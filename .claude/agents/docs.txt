# Claude Code tModLoader Agent Ecosystem Documentation

## Overview

This document describes the comprehensive agent architecture for tModLoader mod development within the Claude Code environment. The system consists of 8 specialized agents that work together to provide complete mod development capabilities, from initial planning to final implementation and quality assurance.

## Architecture Philosophy

The agent ecosystem follows these core principles:

- **Separation of Concerns**: Each agent has a specific, well-defined responsibility
- **Evidence-Based Development**: API verification before coding, documentation before implementation
- **Safety-First Approach**: Minimal changes, compilation verification, robust error handling
- **Localization Parity**: Maintaining en-US ⇆ ja-JP synchronization throughout development
- **Weak Reference Integration**: Safe cross-mod compatibility without hard dependencies

## Agent Hierarchy and Workflow

### **Orchestration Layer**
- **tmodloader-orchestrator**: Master coordinator for complex multi-agent workflows
- **task-planner**: Decomposes complex requests into structured subtasks

### **Research and Verification Layer**  
- **reference-agent**: Retrieves external documentation and community examples
- **api-verifier**: Validates API existence and signatures before implementation

### **Implementation Layer**
- **code-editor**: Implements code changes with safety-first approach
- **code-refactorer**: Improves code quality without changing functionality

### **Specialized Operations Layer**
- **localization-sync**: Maintains translation parity between languages
- **mod-integrator**: Handles safe cross-mod integration

### **Independent Development Layer**
- **vibe-coding-coach**: Vision-based application development for non-technical users

## Detailed Agent Specifications

### 1. tmodloader-orchestrator
**Role**: Master coordinator and workflow manager
**Key Capabilities**:
- Analyzes complex requests requiring multiple specialized operations
- Delegates tasks to appropriate sub-agents with proper context
- Ensures quality assurance across all changes
- Maintains oversight of entire development process

**Primary Use Cases**:
- Complex features requiring API verification + implementation + localization
- Mod porting from older versions with multiple breaking changes
- Cross-mod integration projects with multiple dependencies

### 2. task-planner
**Role**: Strategic planning and task decomposition specialist
**Key Capabilities**:
- Breaks down broad/complex requests into actionable subtasks
- Identifies dependencies and execution order
- Maps resource requirements for each subtask
- Provides structured plans without implementation details

**Primary Use Cases**:
- Multi-component feature requests (magic systems, boss mechanics)
- Large-scale mod porting projects
- Complex integration requirements with unclear scope

### 3. reference-agent  
**Role**: Documentation and research specialist
**Key Capabilities**:
- Searches official tModLoader wiki for authoritative API documentation
- Finds community examples and implementation patterns on GitHub
- Retrieves .NET API documentation for standard library usage
- Provides evidence-based findings with clear source attribution

**Primary Use Cases**:
- Unknown API signatures or usage patterns
- Researching version migration changes (1.3 → 1.4)
- Finding community examples for complex implementations

### 4. api-verifier
**Role**: API validation and verification specialist  
**Key Capabilities**:
- Confirms existence of classes, methods, fields, and properties
- Validates method signatures and parameter types
- Tests method calls with specific argument types
- Provides exact API specifications before coding

**Primary Use Cases**:
- Pre-implementation API verification
- Debugging "method not found" errors during porting
- Ensuring correct overload usage for complex APIs

### 5. code-editor
**Role**: Safe code implementation specialist
**Key Capabilities**:
- Locates target code using semantic search tools
- Applies minimal, precise edits using context-aware commands
- Verifies compilation success after every change
- Follows project conventions and tModLoader best practices

**Primary Use Cases**:
- Implementing new items, NPCs, or game mechanics
- Fixing compilation errors with minimal changes
- Adding new functionality to existing code structures

### 6. code-refactorer
**Role**: Code quality improvement specialist
**Key Capabilities**:
- Improves code structure, readability, and maintainability
- Eliminates code duplication and improves naming
- Simplifies complex logic without changing functionality
- Maintains exact behavioral compatibility

**Primary Use Cases**:
- Post-implementation code cleanup
- Improving legacy code maintainability
- Addressing code review feedback for quality issues

### 7. localization-sync
**Role**: Translation synchronization specialist
**Key Capabilities**:
- Maintains perfect parity between en-US and ja-JP translations
- Validates placeholder consistency across languages
- Audits localization files for structural inconsistencies
- Synchronizes new content across both language versions

**Primary Use Cases**:
- Adding new translatable content to mods
- Fixing placeholder mismatches between languages
- Routine localization quality audits

### 8. mod-integrator
**Role**: Cross-mod compatibility specialist
**Key Capabilities**:
- Implements weak reference patterns for external mod integration
- Creates robust error handling for mod absence scenarios
- Uses reflection and Mod.Call APIs safely
- Ensures graceful degradation when dependencies are missing

**Primary Use Cases**:
- Adding Calamity/Thorium mod compatibility features
- Creating utility mods that enhance other popular mods
- Implementing conditional content based on mod presence

### 9. vibe-coding-coach
**Role**: Vision-based application development specialist
**Key Capabilities**:
- Translates user ideas and visual references into working applications
- Handles all technical complexity behind the scenes
- Focuses on user experience and aesthetic preferences
- Creates complete applications through conversational development

**Primary Use Cases**:
- Non-technical users wanting to build applications
- Projects driven by visual mockups or aesthetic goals
- Rapid prototyping based on user vision rather than technical specs

## Common Workflow Patterns

### Standard Feature Development
1. **task-planner** → Break down feature requirements
2. **reference-agent** → Research relevant APIs and examples  
3. **api-verifier** → Verify all required APIs exist
4. **code-editor** → Implement the feature safely
5. **localization-sync** → Add translations for new content
6. **code-refactorer** → Clean up and optimize final code

### Cross-Mod Integration Project
1. **task-planner** → Plan integration approach
2. **reference-agent** → Research target mod's APIs
3. **mod-integrator** → Implement weak reference integration
4. **localization-sync** → Sync any new translatable content
5. **api-verifier** → Verify integration points work correctly

### Legacy Mod Porting
1. **task-planner** → Analyze porting requirements
2. **reference-agent** → Research API changes between versions
3. **api-verifier** → Verify replacement APIs exist
4. **code-editor** → Apply necessary code updates
5. **localization-sync** → Update localization file formats
6. **code-refactorer** → Modernize code patterns

### Vision-Driven Development
1. **vibe-coding-coach** → Single-agent development cycle
2. (Optional) **code-refactorer** → Post-development optimization

## Integration Guidelines

- **Always verify before implementing**: Use api-verifier before code-editor
- **Maintain localization parity**: Include localization-sync in any content-adding workflow  
- **Plan complex requests**: Use task-planner for multi-component features
- **Research before building**: Use reference-agent for unfamiliar APIs or patterns
- **Refactor after implementing**: Use code-refactorer to improve quality post-implementation
- **Integrate safely**: Use mod-integrator for any cross-mod functionality

This ecosystem provides comprehensive coverage of all tModLoader development needs while maintaining safety, quality, and best practices throughout the development process.
（翻訳）Claude Code tModLoader エージェント・エコシステム ドキュメント

概要（Overview）

このドキュメントは、Claude Code 環境における tModLoader の MOD 開発向け 包括的エージェント・アーキテクチャを説明します。
システムは 8 つの専門サブエージェントで構成され、計画から実装、品質保証までをカバーします。

アーキテクチャの思想（Architecture Philosophy）

関心の分離: 各エージェントは特定かつ明確な責務を持つ

証拠に基づく開発: 実装前に API 検証、実装前にドキュメント確認

セーフティファースト: 最小変更・コンパイル検証・堅牢なエラーハンドリング

ローカリゼーションの一貫性: en-US ⇆ ja-JP の同期を開発全体で維持

弱参照による統合: ハード依存を避けた安全なクロス MOD 連携

エージェント階層とワークフロー（Agent Hierarchy and Workflow）
オーケストレーション層

tmodloader-orchestrator: 複合ワークフローのマスター調整役

task-planner: 複雑要求を構造化したサブタスクへと分解

リサーチ & 検証層

reference-agent: 公式ドキュメントやコミュニティ実例の収集

api-verifier: 実装前に API の存在とシグネチャを検証

実装層

code-editor: 安全第一でコード変更を実施

code-refactorer: 機能を変えずに品質を向上

専門オペレーション層

localization-sync: en-US と ja-JP の訳語同期を維持

mod-integrator: 安全なクロス MOD 連携を担当

独立開発層

vibe-coding-coach: 非エンジニア向けの“ビジョン主導”アプリ開発

各エージェントの詳細（Detailed Agent Specifications）
1. tmodloader-orchestrator

役割: マスターコーディネータ／ワークフロー管理
主な能力:

複数の専門作業を要する複雑要求を分析

適切なサブエージェントへ十分な文脈とともに委譲

すべての変更に対して品質保証を徹底

全体の進行を俯瞰・監督
主なユースケース:

API 検証＋実装＋ローカリゼーションが絡む複合機能

旧版からの移植（多数の非互換変更を含む）

多依存のクロス MOD 連携プロジェクト

2. task-planner

役割: 戦略的計画とタスク分解の専門家
主な能力:

広範・複雑な要求を実行可能なサブタスクへ分解

依存関係と実行順序を明確化

各サブタスクの必要資源をマッピング

実装詳細に踏み込まない構造化プランを提示
主なユースケース:

複数コンポーネントからなる機能開発（魔法システム、ボス機構 など）

大規模な MOD 移植

範囲が曖昧な複合的連携要件の整理

3. reference-agent

役割: ドキュメント／リサーチ専門家
主な能力:

公式 tModLoader Wiki で権威ある API 情報を検索

GitHub 上のコミュニティ実装例・パターンを調査

.NET 標準ライブラリの API 参照を収集

出典を明示した証拠ベースの所見を提供
主なユースケース:

不明な API シグネチャや使用パターンの把握

1.3→1.4 などのバージョン移行に伴う API 変更の調査

複雑実装のコミュニティ実例探索

4. api-verifier

役割: API 検証のスペシャリスト
主な能力:

クラス／メソッド／フィールド／プロパティの存在確認

メソッドのシグネチャと引数型を検証

具体的な引数で呼び出し検証を実施

実装前に正確な API 仕様を提示
主なユースケース:

実装前の API 確認

移植時の “メソッドが見つからない” エラーの原因切り分け

多オーバーロード API の正しい使用確認

5. code-editor

役割: 安全なコード実装の専門家
主な能力:

セマンティック検索で対象コードを特定

文脈に沿った最小・精密な編集を実施

変更のたびにコンパイル成功を確認

プロジェクトの規約と tModLoader の最良慣行に準拠
主なユースケース:

新規アイテム／NPC／ゲーム機構の実装

最小修正でのコンパイルエラー解消

既存構造に沿った機能追加

6. code-refactorer

役割: コード品質改善の専門家
主な能力:

構造・可読性・保守性を改善

重複の排除・命名改善

複雑ロジックの単純化（挙動は不変）

既存機能と完全に互換性を維持
主なユースケース:

実装後のクリーンアップ

レガシーコードの保守性向上

レビュー指摘の是正

7. localization-sync

役割: 翻訳同期の専門家
主な能力:

en-US と ja-JP の完全なキー／内容パリティを維持

プレースホルダ整合性（個数・順序・形式）を検証

ローカリゼーションファイルの構造的不整合を監査

新規コンテンツの双方向同期を実施
主なユースケース:

翻訳対象の新規追加時

言語間のプレースホルダ不一致の修正

定期的な翻訳品質監査

8. mod-integrator

役割: クロス MOD 互換の専門家
主な能力:

外部 MOD 連携に弱参照パターンを適用

依存 MOD 不在時の堅牢なエラーハンドリング

Reflection や Mod.Call を安全に活用

依存欠如時に優雅に機能を縮退
主なユースケース:

Calamity／Thorium 等との互換機能追加

人気 MOD を拡張するユーティリティ MOD

MOD presence に応じた条件付きコンテンツ

9. vibe-coding-coach

役割: ビジョン主導のアプリ開発専門家
主な能力:

ユーザーの発想／ビジュアル参照を動くアプリに翻訳

技術的複雑性は裏側で処理

体験と美意識を重視した対話駆動の開発

会話ベースで完成品に到達
主なユースケース:

非エンジニアのアプリ構想の具現化

モックや美観重視のプロジェクト

技術仕様より体験重視の迅速プロトタイピング

代表的なワークフロー（Common Workflow Patterns）
標準機能開発（Standard Feature Development）

task-planner → 機能要件を分解

reference-agent → 関連 API／実例を調査

api-verifier → 必要 API を検証

code-editor → 安全に実装

localization-sync → 新規テキストを翻訳追加

code-refactorer → 仕上げの品質改善

クロス MOD 連携（Cross-Mod Integration Project）

task-planner → 連携方針を立案

reference-agent → 対象 MOD の API を調査

mod-integrator → 弱参照による連携を実装

localization-sync → 翻訳同期

api-verifier → 連携ポイントを再検証

レガシー MOD 移植（Legacy Mod Porting）

task-planner → 移植要件の分析

reference-agent → 版間 API 変更の調査

api-verifier → 代替 API の検証

code-editor → 必要変更の実装

localization-sync → 形式／内容の更新

code-refactorer → 近代的パターンへ改善

ビジョン駆動開発（Vision-Driven Development）

vibe-coding-coach → 単独サイクルで対話構築

（任意）code-refactorer → 仕上げの最適化

統合ガイドライン（Integration Guidelines）

実装前に必ず検証: code-editor の前に api-verifier

翻訳パリティを維持: コンテンツ追加には localization-sync を組み込む

複雑要求は計画から: task-planner で分解と順序付け

作る前に調べる: 不慣れな API／手法は reference-agent

実装後に整える: 品質仕上げは code-refactorer

安全に統合する: クロス MOD は mod-integrator を通す

このエコシステムは、tModLoader における MOD 開発の全領域をカバーしつつ、安全性・品質・最良慣行を開発プロセス全体で維持します。
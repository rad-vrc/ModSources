using Terraria;
using Terraria.ModLoader;

namespace TranslateTest2
{
    public class PrefixGlobalItem : GlobalItem
    {
        public float MinionSlotMult = 1f;
        public float MinionSpeedMult = 1f;
        public float MinionScaleMult = 1f;
        public float MinionKnockbackMult = 1f;
        public float MinionLifeSteal = 0f;
        public float MinionCritAdd = 0f;
        public float MinionUpdateSpeed = 1f;
        public float WhipRangeMult = 1f;
        public bool CanGiveTag = false;
        public WhipTag wTag = null;
        
        // Original SummonerPrefix properties
        public bool electrified = false;
        public bool blessing = false;

        public override bool InstancePerEntity => true;

        public override GlobalItem Clone(Item from, Item to)
        {
            PrefixGlobalItem myClone = (PrefixGlobalItem)base.Clone(from, to);
            
            // 全てのプロパティを適切にコピー
            myClone.MinionSlotMult = MinionSlotMult;
            myClone.MinionSpeedMult = MinionSpeedMult;
            myClone.MinionScaleMult = MinionScaleMult;
            myClone.MinionKnockbackMult = MinionKnockbackMult;
            myClone.MinionLifeSteal = MinionLifeSteal;
            myClone.MinionCritAdd = MinionCritAdd;
            myClone.MinionUpdateSpeed = MinionUpdateSpeed;
            myClone.WhipRangeMult = WhipRangeMult; // 重要: WhipRangeMultをコピー
            myClone.CanGiveTag = CanGiveTag;
            myClone.wTag = wTag?.Clone();
            myClone.electrified = electrified;
            myClone.blessing = blessing;
            
            return myClone;
        }

        public override void SetStaticDefaults()
        {
            // Initialize default whip tag if needed
        }

        public override void PostUpdate(Item item)
        {
            // Initialize whip tag if it's null and this item can give tags
            if (CanGiveTag && wTag == null)
            {
                wTag = new WhipTag("default", 0);
            }

            // Prefix効果に基づいてプロパティを更新
            UpdatePrefixEffects(item);
        }

        private void UpdatePrefixEffects(Item item)
        {
            if (item?.IsAir != false) return;

            try
            {
                // 各フレームでPrefix効果を再適用する必要がある効果のみここで処理
                // 注意: Apply()メソッドで一度設定すれば永続的な効果はここで処理しない
                
                // Brisk効果: MinionSpeedMultの更新（動的効果）
                if (item.prefix == ModContent.PrefixType<Prefixes.Brisk>())
                {
                    MinionSpeedMult += Prefixes.Brisk.MinionSpeedMult - 1f;
                }
                else if (MinionSpeedMult != 1f && item.prefix != ModContent.PrefixType<Prefixes.Brisk>())
                {
                    // Brisk以外の場合はリセット
                    MinionSpeedMult = 1f;
                }

                // 鞭のWhipRangeMultはApply()で設定済みなので、ここではリセットしない
                // ただし、Prefixが変更された場合は適切にリセット・再設定する
                
                // Extended効果: 鞭の射程倍率（Apply()で設定済み、維持）
                // Oracle効果: 鞭の射程倍率（Apply()で設定済み、維持）
                
            }
            catch (System.Exception ex)
            {
                TranslateTest2.Instance?.Logger?.Debug($"Error updating prefix effects: {ex.Message}");
            }
        }
    }
}
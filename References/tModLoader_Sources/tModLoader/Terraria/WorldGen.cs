using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using log4net;
using Microsoft.Xna.Framework;
using MonoMod.Cil;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Biomes;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Events;
using Terraria.GameContent.Generation;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI.States;
using Terraria.Graphics.Capture;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ModLoader;
using Terraria.ModLoader.Exceptions;
using Terraria.ModLoader.IO;
using Terraria.ObjectData;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	// Token: 0x0200006B RID: 107
	public class WorldGen
	{
		/// <summary>
		/// The random number generator for world generation. It is important to use this instead of <see cref="P:Terraria.Main.rand" /> for all world generation randomness to make the world seed feature reliable.
		/// </summary>
		// Token: 0x17000236 RID: 566
		// (get) Token: 0x06001121 RID: 4385 RVA: 0x0040C88C File Offset: 0x0040AA8C
		public static UnifiedRandom genRand
		{
			get
			{
				if (WorldGen._lastSeed != WorldGen._genRandSeed)
				{
					WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
					WorldGen._genRandSeed = WorldGen._lastSeed;
				}
				if (WorldGen._genRand == null)
				{
					WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
					WorldGen._genRandSeed = WorldGen._lastSeed;
				}
				return WorldGen._genRand;
			}
		}

		// Token: 0x17000237 RID: 567
		// (get) Token: 0x06001122 RID: 4386 RVA: 0x0040C8E3 File Offset: 0x0040AAE3
		public static double oceanLevel
		{
			get
			{
				return (Main.worldSurface + Main.rockLayer) / 2.0 + 40.0;
			}
		}

		// Token: 0x17000238 RID: 568
		// (get) Token: 0x06001123 RID: 4387 RVA: 0x0040C904 File Offset: 0x0040AB04
		public static bool SkipFramingBecauseOfGen
		{
			get
			{
				return WorldGen.generatingWorld && WorldGen.skipFramingDuringGen;
			}
		}

		// Token: 0x06001124 RID: 4388 RVA: 0x0040C914 File Offset: 0x0040AB14
		public static void SetupStatueList()
		{
			List<Point16> list = new List<Point16>();
			for (int i = 0; i < 44; i++)
			{
				list.Add(new Point16(105, i));
			}
			list[34] = new Point16(349, 0);
			list[43] = new Point16(105, 50);
			list.Add(new Point16(105, 63));
			list.Add(new Point16(105, 64));
			list.Add(new Point16(105, 65));
			list.Add(new Point16(105, 66));
			list.Add(new Point16(105, 68));
			list.Add(new Point16(105, 69));
			list.Add(new Point16(105, 70));
			list.Add(new Point16(105, 71));
			list.Add(new Point16(105, 72));
			list.Add(new Point16(105, 73));
			list.Add(new Point16(105, 75));
			list.Add(new Point16(105, 51));
			list.Add(new Point16(105, 52));
			list.Add(new Point16(105, 53));
			list.Add(new Point16(105, 54));
			list.Add(new Point16(105, 55));
			list.Add(new Point16(105, 56));
			list.Add(new Point16(105, 57));
			list.Add(new Point16(105, 58));
			list.Add(new Point16(105, 59));
			list.Add(new Point16(105, 60));
			list.Add(new Point16(105, 61));
			list.Add(new Point16(105, 62));
			list.Add(new Point16(105, 77));
			list.Add(new Point16(105, 78));
			list.Add(new Point16(105, 67));
			list.Add(new Point16(105, 74));
			list.Add(new Point16(105, 37));
			list.Add(new Point16(105, 2));
			GenVars.statueList = list.ToArray();
			GenVars.StatuesWithTraps = new List<int>(new int[]
			{
				4,
				7,
				10,
				18
			});
		}

		// Token: 0x06001125 RID: 4389 RVA: 0x0040CB40 File Offset: 0x0040AD40
		public unsafe static void PlaceStatueTrap(int x, int y)
		{
			for (int i = -10; i <= 10; i++)
			{
				for (int j = -10; j <= 10; j++)
				{
					Tile tile = Main.tile[x + i, y + j + 1];
					Tile tile2 = Main.tile[x + i, y + j];
					if (!tile2.active() && WorldGen.SolidTile2(tile) && *tile.type != 162)
					{
						WorldGen.PlaceTile(x + i, y + j, 135, true, false, -1, 0);
						if (tile2.active() && *tile2.type == 135)
						{
							WorldUtils.WireLine(new Point(x, y), new Point(x + i, y + j));
							return;
						}
					}
				}
			}
		}

		// Token: 0x06001126 RID: 4390 RVA: 0x0040CBFE File Offset: 0x0040ADFE
		private static EntitySource_TileBreak GetProjectileSource_TileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y, null);
		}

		// Token: 0x06001127 RID: 4391 RVA: 0x0040CC08 File Offset: 0x0040AE08
		private static EntitySource_TileBreak GetNPCSource_TileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y, null);
		}

		// Token: 0x06001128 RID: 4392 RVA: 0x0040CC12 File Offset: 0x0040AE12
		public static EntitySource_ShakeTree GetNPCSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y, null);
		}

		// Token: 0x06001129 RID: 4393 RVA: 0x0040CC1C File Offset: 0x0040AE1C
		private static EntitySource_ShakeTree GetProjectileSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y, null);
		}

		// Token: 0x0600112A RID: 4394 RVA: 0x0040CC26 File Offset: 0x0040AE26
		private static EntitySource_ShakeTree GetItemSource_ShakeTree(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y, null);
		}

		// Token: 0x0600112B RID: 4395 RVA: 0x0040CC30 File Offset: 0x0040AE30
		private static IEntitySource GetProjectileSource_PlayerOrWires(int x, int y, bool fromWiring, Player player)
		{
			if (fromWiring)
			{
				return new EntitySource_Wiring(x, y, null);
			}
			return new EntitySource_TileInteraction(player, x, y, null);
		}

		// Token: 0x0600112C RID: 4396 RVA: 0x0040CC48 File Offset: 0x0040AE48
		public unsafe static bool EmptyLiquid(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 0))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			tile.liquidType();
			if (tile.nactive() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
			{
				return false;
			}
			tile.Clear(TileDataType.Liquid);
			WorldGen.SquareTileFrame(x, y, false);
			if (Main.netMode != 0)
			{
				NetMessage.sendWater(x, y);
			}
			else
			{
				Liquid.AddWater(x, y);
			}
			return true;
		}

		// Token: 0x0600112D RID: 4397 RVA: 0x0040CCD8 File Offset: 0x0040AED8
		public unsafe static bool PlaceLiquid(int x, int y, byte liquidType, byte amount)
		{
			if (!WorldGen.InWorld(x, y, 0))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			byte b = tile.liquidType();
			if (tile.nactive() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
			{
				return false;
			}
			if (*tile.liquid == 0 || liquidType == b)
			{
				tile.liquidType((int)liquidType);
				if (amount + *tile.liquid > 255)
				{
					amount = byte.MaxValue - *tile.liquid;
				}
				ref byte liquid = ref tile.liquid;
				liquid += amount;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode != 0)
				{
					NetMessage.sendWater(x, y);
				}
				return true;
			}
			int liquidMergeTileType = 0;
			bool waterNearby = b == 0;
			bool lavaNearby = b == 1;
			bool honeyNearby = b == 2;
			bool shimmerNearby = b == 3;
			int liquidMergeType = 0;
			Liquid.GetLiquidMergeTypes((int)liquidType, out liquidMergeTileType, out liquidMergeType, waterNearby, lavaNearby, honeyNearby, shimmerNearby);
			if (liquidMergeTileType != 0)
			{
				*tile.liquid = 0;
				tile.liquidType(0);
				WorldGen.PlaceTile(x, y, liquidMergeTileType, true, false, -1, 0);
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode != 0)
				{
					NetMessage.SendTileSquare(-1, x - 1, y - 1, WorldGen.GetLiquidChangeType((int)liquidType, (int)b));
				}
				return true;
			}
			return false;
		}

		// Token: 0x0600112E RID: 4398 RVA: 0x0040CE0C File Offset: 0x0040B00C
		public static void PlayLiquidChangeSound(TileChangeType eventType, int x, int y, int count = 1)
		{
			switch (eventType)
			{
			case TileChangeType.LavaWater:
				SoundEngine.PlaySound(new SoundStyle?(SoundID.LiquidsWaterLava), x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyWater:
				SoundEngine.PlaySound(new SoundStyle?(SoundID.LiquidsHoneyWater), x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyLava:
				SoundEngine.PlaySound(new SoundStyle?(SoundID.LiquidsHoneyLava), x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.ShimmerWater:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			case TileChangeType.ShimmerLava:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			case TileChangeType.ShimmerHoney:
				SoundEngine.PlaySound(19, x * 16 + count * 8, y * 16 + count * 8, 4, 1f, 0f);
				return;
			default:
				return;
			}
		}

		// Token: 0x0600112F RID: 4399 RVA: 0x0040CF08 File Offset: 0x0040B108
		public static TileChangeType GetLiquidChangeType(int liquidType, int otherLiquidType)
		{
			if ((liquidType == 0 && otherLiquidType == 1) || (liquidType == 1 && otherLiquidType == 0))
			{
				return TileChangeType.LavaWater;
			}
			if ((liquidType == 0 && otherLiquidType == 2) || (liquidType == 2 && otherLiquidType == 0))
			{
				return TileChangeType.HoneyWater;
			}
			if ((liquidType == 1 && otherLiquidType == 2) || (liquidType == 2 && otherLiquidType == 1))
			{
				return TileChangeType.HoneyLava;
			}
			if ((liquidType == 0 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 0))
			{
				return TileChangeType.ShimmerWater;
			}
			if ((liquidType == 1 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 1))
			{
				return TileChangeType.ShimmerLava;
			}
			if ((liquidType == 2 && otherLiquidType == 3) || (liquidType == 3 && otherLiquidType == 2))
			{
				return TileChangeType.ShimmerHoney;
			}
			return TileChangeType.None;
		}

		// Token: 0x06001130 RID: 4400 RVA: 0x0040CF7C File Offset: 0x0040B17C
		public static bool MoveTownNPC(int x, int y, int n)
		{
			if (!WorldGen.StartRoomCheck(x, y))
			{
				string newText = Lang.inter[40].Value;
				switch (WorldGen.roomCheckFailureReason)
				{
				case TownNPCRoomCheckFailureReason.TooCloseToWorldEdge:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.TooCloseToWorldEdge");
					break;
				case TownNPCRoomCheckFailureReason.RoomIsTooBig:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooBig");
					break;
				case TownNPCRoomCheckFailureReason.RoomIsTooSmall:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooSmall");
					break;
				case TownNPCRoomCheckFailureReason.HoleInWallIsTooBig:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.HoleInWallIsTooBig");
					break;
				case TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile:
					newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomCheckStartedInASolidTile");
					break;
				}
				Main.NewText(newText, byte.MaxValue, 240, 20);
				return false;
			}
			if (!WorldGen.RoomNeeds(WorldGen.prioritizedTownNPCType))
			{
				int num = 0;
				int num2 = (!WorldGen.roomTorch + !WorldGen.roomDoor + !WorldGen.roomTable + !WorldGen.roomChair) ? 1 : 0;
				string[] array = new string[num2];
				if (!WorldGen.roomTorch)
				{
					array[num] = Language.GetTextValue("Game.HouseLightSource");
					num++;
				}
				if (!WorldGen.roomDoor)
				{
					array[num] = Language.GetTextValue("Game.HouseDoor");
					num++;
				}
				if (!WorldGen.roomTable)
				{
					array[num] = Language.GetTextValue("Game.HouseTable");
					num++;
				}
				if (!WorldGen.roomChair)
				{
					array[num] = Language.GetTextValue("Game.HouseChair");
					num++;
				}
				string key = "Game.HouseMissing_" + num2.ToString();
				object[] array2 = array;
				object[] args = array2;
				Main.NewText(Language.GetTextValue(key, args), byte.MaxValue, 240, 20);
				return false;
			}
			int type = WorldGen.prioritizedTownNPCType;
			if (n >= 0)
			{
				type = Main.npc[n].type;
			}
			bool flag = NPCID.Sets.IsTownPet[type];
			if (WorldGen.roomHasStinkbug && !flag)
			{
				Main.NewText(Language.GetTextValue("TownNPCHousingFailureReasons.RoomHasAStinkbug"), byte.MaxValue, 240, 20);
				return false;
			}
			if (WorldGen.roomHasEchoStinkbug && !flag)
			{
				Main.NewText(Language.GetTextValue("TownNPCHousingFailureReasons.RoomHasAnEchoStinkbug"), byte.MaxValue, 240, 20);
				return false;
			}
			WorldGen.ScoreRoom(-1, type);
			if (WorldGen.hiScore <= 0)
			{
				if (WorldGen.roomOccupied)
				{
					Main.NewText(Lang.inter[41].Value, byte.MaxValue, 240, 20);
				}
				else if (WorldGen.roomEvil)
				{
					Main.NewText(Lang.inter[42].Value, byte.MaxValue, 240, 20);
				}
				else
				{
					Main.NewText(Lang.inter[40].Value, byte.MaxValue, 240, 20);
				}
				return false;
			}
			if (n >= 0 && !WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[n].type))
			{
				Main.NewText(Lang.inter[55].Value + " " + Main.npc[n].TypeName, byte.MaxValue, 240, 20);
				return false;
			}
			return true;
		}

		// Token: 0x06001131 RID: 4401 RVA: 0x0040D238 File Offset: 0x0040B438
		public static void moveRoom(int x, int y, int n)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(60, -1, -1, null, n, (float)x, (float)y, 0f, 0, 0, 0);
				return;
			}
			WorldGen.prioritizedTownNPCType = Main.npc[n].type;
			Main.npc[n].homeless = true;
			WorldGen.SpawnTownNPC(x, y);
			WorldGen.TownManager.SetRoom(Main.npc[n].type, Main.npc[n].homeTileX, Main.npc[n].homeTileY);
		}

		// Token: 0x06001132 RID: 4402 RVA: 0x0040D2BC File Offset: 0x0040B4BC
		public static bool IsNPCEvictable(int n)
		{
			if (n < 0)
			{
				return false;
			}
			Rectangle hitbox = Main.LocalPlayer.Hitbox;
			hitbox.Inflate(Main.LogicCheckScreenWidth / 2, Main.LogicCheckScreenHeight / 2);
			NPC nPC = Main.npc[n];
			Rectangle value;
			value..ctor(nPC.homeTileX * 16, nPC.homeTileY * 16, 16, 16);
			return hitbox.Intersects(value);
		}

		// Token: 0x06001133 RID: 4403 RVA: 0x0040D31C File Offset: 0x0040B51C
		public static void kickOut(int n)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(60, -1, -1, null, n, 0f, 0f, 1f, 0, 0, 0);
				return;
			}
			Main.npc[n].homeless = true;
			WorldGen.TownManager.KickOut(Main.npc[n]);
		}

		// Token: 0x06001134 RID: 4404 RVA: 0x0040D370 File Offset: 0x0040B570
		public static bool IsThereASpawnablePrioritizedTownNPC(int x, int y, ref bool canSpawnNewTownNPC)
		{
			if (WorldGen.CheckSpecialTownNPCSpawningConditions(WorldGen.prioritizedTownNPCType) && NPC.AnyNPCs(WorldGen.prioritizedTownNPCType))
			{
				canSpawnNewTownNPC = false;
				return true;
			}
			List<int> list = new List<int>();
			WorldGen.TownManager.AddOccupantsToList(x, y, list);
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.townNPCCanSpawn[num] && !NPC.AnyNPCs(num) && WorldGen.CheckSpecialTownNPCSpawningConditions(num))
				{
					WorldGen.prioritizedTownNPCType = num;
					canSpawnNewTownNPC = true;
					return true;
				}
			}
			for (int j = 0; j < NPCLoader.NPCCount; j++)
			{
				if (Main.townNPCCanSpawn[j] && WorldGen.CheckSpecialTownNPCSpawningConditions(j))
				{
					if (NPC.AnyNPCs(j))
					{
						Main.townNPCCanSpawn[j] = false;
					}
					else
					{
						if (WorldGen.TownManager.HasRoomQuick(j))
						{
							WorldGen.prioritizedTownNPCType = j;
							canSpawnNewTownNPC = true;
							return true;
						}
						if (!NPCID.Sets.IsTownPet[WorldGen.prioritizedTownNPCType] || NPCID.Sets.IsTownPet[j])
						{
							WorldGen.prioritizedTownNPCType = j;
							canSpawnNewTownNPC = true;
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06001135 RID: 4405 RVA: 0x0040D458 File Offset: 0x0040B658
		public static bool IsThereASpawnablePrioritizedTownNPC_Old(int x, int y)
		{
			if (WorldGen.CheckSpecialTownNPCSpawningConditions(WorldGen.prioritizedTownNPCType) && NPC.AnyNPCs(WorldGen.prioritizedTownNPCType))
			{
				return true;
			}
			List<int> list = new List<int>();
			WorldGen.TownManager.AddOccupantsToList(x, y, list);
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.townNPCCanSpawn[num] && !NPC.AnyNPCs(num) && WorldGen.CheckSpecialTownNPCSpawningConditions(num))
				{
					WorldGen.prioritizedTownNPCType = num;
					return true;
				}
			}
			int num2 = -1;
			for (int j = 0; j < Main.townNPCCanSpawn.Length; j++)
			{
				if (Main.townNPCCanSpawn[j] && WorldGen.CheckSpecialTownNPCSpawningConditions(j))
				{
					if (NPC.AnyNPCs(j))
					{
						Main.townNPCCanSpawn[j] = false;
					}
					else if (WorldGen.TownManager.HasRoomQuick(j))
					{
						if (num2 == -1)
						{
							num2 = j;
						}
					}
					else if (!NPCID.Sets.IsTownPet[WorldGen.prioritizedTownNPCType] || NPCID.Sets.IsTownPet[j])
					{
						WorldGen.prioritizedTownNPCType = j;
						return true;
					}
				}
			}
			if (num2 != -1)
			{
				WorldGen.prioritizedTownNPCType = num2;
				return true;
			}
			return false;
		}

		// Token: 0x06001136 RID: 4406 RVA: 0x0040D550 File Offset: 0x0040B750
		public unsafe static bool CheckSpecialTownNPCSpawningConditions(int type)
		{
			if (!NPCLoader.CheckConditions(type))
			{
				return false;
			}
			if (type != 160)
			{
				return true;
			}
			if (!NPC.unlockedTruffleSpawn && (double)WorldGen.roomY2 > Main.worldSurface)
			{
				return false;
			}
			int startX;
			int endX;
			int startY;
			int endY;
			WorldGen.Housing_GetTestedRoomBounds(out startX, out endX, out startY, out endY);
			int num = 0;
			for (int i = startX + 1; i < endX; i++)
			{
				for (int j = startY + 2; j < endY + 2; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (*tile.type == 70 || *tile.type == 71 || *tile.type == 72 || *tile.type == 528))
					{
						num++;
					}
				}
			}
			return num >= SceneMetrics.MushroomTileThreshold;
		}

		// Token: 0x06001137 RID: 4407 RVA: 0x0040D620 File Offset: 0x0040B820
		public static void UnspawnTravelNPC()
		{
			int num = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 368)
				{
					num = i;
					break;
				}
			}
			if (num < 0)
			{
				return;
			}
			int num2 = (int)(Main.npc[num].Center.X / 16f);
			int num3 = (int)(Main.npc[num].Center.Y / 16f);
			bool flag = true;
			Rectangle value;
			value..ctor(num2 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height).Intersects(value))
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				string fullName = Main.npc[num].FullName;
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[35].Format(new object[]
					{
						fullName
					}), 50, 125, byte.MaxValue);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[35].Key, new object[]
					{
						Main.npc[num].GetFullNetName()
					}), new Color(50, 125, 255), -1);
				}
				Main.npc[num].active = false;
				Main.npc[num].netSkip = -1;
				Main.npc[num].life = 0;
				NetMessage.SendData(23, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x06001138 RID: 4408 RVA: 0x0040D830 File Offset: 0x0040BA30
		public unsafe static void SpawnTravelNPC()
		{
			if (Main.eclipse || !Main.dayTime || (Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0))
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 368)
				{
					return;
				}
			}
			Chest.SetupTravelShop();
			NetMessage.SendTravelShop(-1);
			int[] array = new int[200];
			int num2 = 0;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].townNPC && Main.npc[j].type != 37 && !Main.npc[j].homeless)
				{
					array[num2] = j;
					num2++;
				}
			}
			if (num2 == 0)
			{
				return;
			}
			int num3 = array[Main.rand.Next(num2)];
			WorldGen.bestX = Main.npc[num3].homeTileX;
			WorldGen.bestY = Main.npc[num3].homeTileY;
			int minValue = WorldGen.bestX;
			int num4 = WorldGen.bestX;
			int num5 = WorldGen.bestY;
			int num6 = WorldGen.bestX;
			while (num6 > WorldGen.bestX - 10 && (WorldGen.SolidTile(num6, num5, false) || Main.tileSolidTop[(int)(*Main.tile[num6, num5].type)]) && (!Main.tile[num6, num5 - 1].active() || !Main.tileSolid[(int)(*Main.tile[num6, num5 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[num6, num5 - 1].type)]) && (!Main.tile[num6, num5 - 2].active() || !Main.tileSolid[(int)(*Main.tile[num6, num5 - 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num6, num5 - 2].type)]) && (!Main.tile[num6, num5 - 3].active() || !Main.tileSolid[(int)(*Main.tile[num6, num5 - 3].type)] || Main.tileSolidTop[(int)(*Main.tile[num6, num5 - 3].type)]))
			{
				minValue = num6;
				num6--;
			}
			int k = WorldGen.bestX;
			while (k < WorldGen.bestX + 10 && (WorldGen.SolidTile(k, num5, false) || Main.tileSolidTop[(int)(*Main.tile[k, num5].type)]) && (!Main.tile[k, num5 - 1].active() || !Main.tileSolid[(int)(*Main.tile[k, num5 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[k, num5 - 1].type)]) && (!Main.tile[k, num5 - 2].active() || !Main.tileSolid[(int)(*Main.tile[k, num5 - 2].type)] || Main.tileSolidTop[(int)(*Main.tile[k, num5 - 2].type)]) && (!Main.tile[k, num5 - 3].active() || !Main.tileSolid[(int)(*Main.tile[k, num5 - 3].type)] || Main.tileSolidTop[(int)(*Main.tile[k, num5 - 3].type)]))
			{
				num4 = k;
				k++;
			}
			for (int l = 0; l < 30; l++)
			{
				int num7 = Main.rand.Next(minValue, num4 + 1);
				if (l < 20)
				{
					if (num7 < WorldGen.bestX - 1 || num7 > WorldGen.bestX + 1)
					{
						WorldGen.bestX = num7;
						break;
					}
				}
				else if (num7 != WorldGen.bestX)
				{
					WorldGen.bestX = num7;
					break;
				}
			}
			int num8 = WorldGen.bestX;
			int num9 = WorldGen.bestY;
			bool flag = false;
			if (!flag && (double)num9 <= Main.worldSurface)
			{
				for (int m = 20; m < 500; m++)
				{
					for (int n = 0; n < 2; n++)
					{
						num8 = ((n != 0) ? (WorldGen.bestX - m * 2) : (WorldGen.bestX + m * 2));
						if (num8 > 10 && num8 < Main.maxTilesX - 10)
						{
							int num10 = WorldGen.bestY - m;
							double num11 = (double)(WorldGen.bestY + m);
							if (num10 < 10)
							{
								num10 = 10;
							}
							if (num11 > Main.worldSurface)
							{
								num11 = Main.worldSurface;
							}
							int num12 = num10;
							while ((double)num12 < num11)
							{
								num9 = num12;
								if (Main.tile[num8, num9].nactive() && Main.tileSolid[(int)(*Main.tile[num8, num9].type)])
								{
									if (*Main.tile[num8, num9 - 3].liquid == 0 && *Main.tile[num8, num9 - 2].liquid == 0 && *Main.tile[num8, num9 - 1].liquid == 0 && !Collision.SolidTiles(num8 - 1, num8 + 1, num9 - 3, num9 - 1))
									{
										flag = true;
										Rectangle value;
										value..ctor(num8 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num9 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
										for (int num13 = 0; num13 < 255; num13++)
										{
											if (Main.player[num13].active && new Rectangle((int)Main.player[num13].position.X, (int)Main.player[num13].position.Y, Main.player[num13].width, Main.player[num13].height).Intersects(value))
											{
												flag = false;
												break;
											}
										}
										break;
									}
									break;
								}
								else
								{
									num12++;
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
					if (flag)
					{
						break;
					}
				}
			}
			int num14 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), num8 * 16, num9 * 16, 368, 1, 0f, 0f, 0f, 0f, 255);
			Main.npc[num14].homeTileX = WorldGen.bestX;
			Main.npc[num14].homeTileY = WorldGen.bestY;
			Main.npc[num14].homeless = true;
			if (num8 < WorldGen.bestX)
			{
				Main.npc[num14].direction = 1;
			}
			else if (num8 > WorldGen.bestX)
			{
				Main.npc[num14].direction = -1;
			}
			Main.npc[num14].netUpdate = true;
			string fullName = Main.npc[num14].FullName;
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue);
				return;
			}
			if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", new object[]
				{
					Main.npc[num14].GetFullNetName()
				}), new Color(50, 125, 255), -1);
			}
		}

		// Token: 0x06001139 RID: 4409 RVA: 0x0040E014 File Offset: 0x0040C214
		public unsafe static TownNPCSpawnResult SpawnTownNPC(int x, int y)
		{
			if (Main.wallHouse[(int)(*Main.tile[x, y].wall)])
			{
				WorldGen.canSpawn = true;
			}
			if (!WorldGen.canSpawn)
			{
				return TownNPCSpawnResult.Blocked;
			}
			if (!WorldGen.StartRoomCheck(x, y))
			{
				return TownNPCSpawnResult.Blocked;
			}
			if (!WorldGen.RoomNeeds(WorldGen.prioritizedTownNPCType))
			{
				return TownNPCSpawnResult.Blocked;
			}
			int num = WorldGen.FindAHomelessNPC();
			int type = WorldGen.prioritizedTownNPCType;
			if (num != -1)
			{
				type = Main.npc[num].type;
			}
			Point roomPosition = Point.Zero;
			bool flag = NPCID.Sets.IsTownPet[type] && WorldGen.TownManager.HasRoom(type, out roomPosition);
			if ((WorldGen.roomHasStinkbug || WorldGen.roomHasEchoStinkbug) && !flag)
			{
				return TownNPCSpawnResult.Blocked;
			}
			WorldGen.ScoreRoom(-1, type);
			if (WorldGen.hiScore <= 0)
			{
				return TownNPCSpawnResult.Blocked;
			}
			bool canSpawnNewTownNPC = true;
			if (!WorldGen.IsThereASpawnablePrioritizedTownNPC(WorldGen.bestX, WorldGen.bestY, ref canSpawnNewTownNPC))
			{
				return TownNPCSpawnResult.Blocked;
			}
			type = WorldGen.prioritizedTownNPCType;
			if (num != -1)
			{
				Main.townNPCCanSpawn[WorldGen.prioritizedTownNPCType] = false;
				Main.npc[num].homeTileX = WorldGen.bestX;
				Main.npc[num].homeTileY = WorldGen.bestY;
				Main.npc[num].homeless = false;
				AchievementsHelper.NotifyProgressionEvent(8);
				WorldGen.prioritizedTownNPCType = 0;
				return TownNPCSpawnResult.RelocatedHomeless;
			}
			if (canSpawnNewTownNPC && num == -1)
			{
				Point roomPosition2;
				if (WorldGen.TownManager.HasRoom(type, out roomPosition2) && !WorldGen.currentlyTryingToUseAlternateHousingSpot)
				{
					int num8 = WorldGen.bestX;
					int num2 = WorldGen.bestY;
					WorldGen.currentlyTryingToUseAlternateHousingSpot = true;
					TownNPCSpawnResult townNPCSpawnResult = WorldGen.SpawnTownNPC(roomPosition2.X, roomPosition2.Y - 2);
					WorldGen.currentlyTryingToUseAlternateHousingSpot = false;
					WorldGen.bestX = num8;
					WorldGen.bestY = num2;
					if (townNPCSpawnResult == TownNPCSpawnResult.Successful)
					{
						return townNPCSpawnResult;
					}
				}
				int num3 = WorldGen.bestX;
				int num4 = WorldGen.bestY;
				int npcTypeToSpawn = WorldGen.prioritizedTownNPCType;
				if (WorldGen.IsRoomConsideredAlreadyOccupied(num3, num4, npcTypeToSpawn))
				{
					return TownNPCSpawnResult.BlockedInfiHousing;
				}
				bool flag2 = false;
				if (!flag2)
				{
					flag2 = true;
					Rectangle value;
					value..ctor(num3 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num4 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && new Rectangle((int)Main.player[i].position.X, (int)Main.player[i].position.Y, Main.player[i].width, Main.player[i].height).Intersects(value))
						{
							flag2 = false;
							break;
						}
					}
				}
				if (!flag2 && (double)num4 <= Main.worldSurface)
				{
					for (int j = 1; j < 500; j++)
					{
						for (int k = 0; k < 2; k++)
						{
							num3 = ((k != 0) ? (WorldGen.bestX - j) : (WorldGen.bestX + j));
							if (num3 > 10 && num3 < Main.maxTilesX - 10)
							{
								int num5 = WorldGen.bestY - j;
								double num6 = (double)(WorldGen.bestY + j);
								if (num5 < 10)
								{
									num5 = 10;
								}
								if (num6 > Main.worldSurface)
								{
									num6 = Main.worldSurface;
								}
								int l = num5;
								while ((double)l < num6)
								{
									num4 = l;
									if (Main.tile[num3, num4].nactive() && Main.tileSolid[(int)(*Main.tile[num3, num4].type)])
									{
										if (!Collision.SolidTiles(num3 - 1, num3 + 1, num4 - 3, num4 - 1))
										{
											flag2 = true;
											Rectangle value2;
											value2..ctor(num3 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num4 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
											for (int m = 0; m < 255; m++)
											{
												if (Main.player[m].active && new Rectangle((int)Main.player[m].position.X, (int)Main.player[m].position.Y, Main.player[m].width, Main.player[m].height).Intersects(value2))
												{
													flag2 = false;
													break;
												}
											}
											break;
										}
										break;
									}
									else
									{
										l++;
									}
								}
							}
							if (flag2)
							{
								break;
							}
						}
						if (flag2)
						{
							break;
						}
					}
				}
				int num7 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), num3 * 16, num4 * 16, type, 1, 0f, 0f, 0f, 0f, 255);
				Main.townNPCCanSpawn[type] = false;
				Main.npc[num7].homeTileX = WorldGen.bestX;
				Main.npc[num7].homeTileY = WorldGen.bestY;
				if (num3 < WorldGen.bestX)
				{
					Main.npc[num7].direction = 1;
				}
				else if (num3 > WorldGen.bestX)
				{
					Main.npc[num7].direction = -1;
				}
				Main.npc[num7].netUpdate = true;
				string fullName = Main.npc[num7].FullName;
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", new object[]
					{
						Main.npc[num7].GetFullNetName()
					}), new Color(50, 125, 255), -1);
				}
				AchievementsHelper.NotifyProgressionEvent(8);
				int type2 = Main.npc[num7].type;
				if (type2 <= 160)
				{
					switch (type2)
					{
					case 17:
						NPC.unlockedMerchantSpawn = true;
						break;
					case 18:
						NPC.unlockedNurseSpawn = true;
						break;
					case 19:
						NPC.unlockedArmsDealerSpawn = true;
						break;
					default:
						if (type2 != 38)
						{
							if (type2 == 160)
							{
								AchievementsHelper.NotifyProgressionEvent(18);
								NPC.unlockedTruffleSpawn = true;
								NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						else
						{
							NPC.unlockedDemolitionistSpawn = true;
						}
						break;
					}
				}
				else if (type2 <= 208)
				{
					if (type2 != 207)
					{
						if (type2 == 208)
						{
							NPC.unlockedPartyGirlSpawn = true;
						}
					}
					else
					{
						NPC.unlockedDyeTraderSpawn = true;
					}
				}
				else if (type2 != 663)
				{
					if (type2 == 678)
					{
						NPC.unlockedSlimeGreenSpawn = true;
					}
				}
				else
				{
					NPC.unlockedPrincessSpawn = true;
				}
				WorldGen.CheckAchievement_RealEstateAndTownSlimes();
				WorldGen.prioritizedTownNPCType = 0;
			}
			return TownNPCSpawnResult.Successful;
		}

		// Token: 0x0600113A RID: 4410 RVA: 0x0040E678 File Offset: 0x0040C878
		private static int FindAHomelessNPC()
		{
			int result = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].type == WorldGen.prioritizedTownNPCType && WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[i].type))
				{
					result = i;
					break;
				}
			}
			return result;
		}

		// Token: 0x0600113B RID: 4411 RVA: 0x0040E6E0 File Offset: 0x0040C8E0
		private static bool IsRoomConsideredAlreadyOccupied(int spawnTileX, int spawnTileY, int npcTypeToSpawn)
		{
			bool result = false;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.townNPC && !nPC.homeless && nPC.homeTileX == spawnTileX && nPC.homeTileY == spawnTileY && !WorldGen.TownManager.CanNPCsLiveWithEachOther(npcTypeToSpawn, nPC))
				{
					result = true;
					break;
				}
			}
			return result;
		}

		// Token: 0x0600113C RID: 4412 RVA: 0x0040E744 File Offset: 0x0040C944
		public static void CheckAchievement_RealEstateAndTownSlimes()
		{
			bool[] array = new bool[(int)NPCID.Count];
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type >= 0 && Main.npc[i].type < (int)NPCID.Count)
				{
					array[Main.npc[i].type] = true;
				}
			}
			if (array[38] && array[17] && array[107] && array[19] && array[22] && array[124] && array[228] && array[178] && array[18] && array[229] && array[209] && array[54] && array[108] && array[160] && array[20] && array[369] && array[207] && array[227] && array[208] && array[441] && array[353] && array[550] && array[588] && array[633] && array[663])
			{
				AchievementsHelper.NotifyProgressionEvent(17);
			}
			if (array[670] && array[678] && array[679] && array[680] && array[681] && array[682] && array[683] && array[684])
			{
				AchievementsHelper.NotifyProgressionEvent(26);
			}
		}

		// Token: 0x0600113D RID: 4413 RVA: 0x0040E8E4 File Offset: 0x0040CAE4
		public static bool RoomNeeds(int npcType)
		{
			WorldGen.roomChair = false;
			WorldGen.roomDoor = false;
			WorldGen.roomTable = false;
			WorldGen.roomTorch = false;
			for (int i = 0; i < TileID.Sets.RoomNeeds.CountsAsChair.Length; i++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsChair[i]])
				{
					WorldGen.roomChair = true;
					break;
				}
			}
			for (int j = 0; j < TileID.Sets.RoomNeeds.CountsAsTable.Length; j++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTable[j]])
				{
					WorldGen.roomTable = true;
					break;
				}
			}
			for (int k = 0; k < TileID.Sets.RoomNeeds.CountsAsTorch.Length; k++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTorch[k]])
				{
					WorldGen.roomTorch = true;
					break;
				}
			}
			for (int l = 0; l < TileID.Sets.RoomNeeds.CountsAsDoor.Length; l++)
			{
				if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsDoor[l]])
				{
					WorldGen.roomDoor = true;
					break;
				}
			}
			if (WorldGen.roomChair && WorldGen.roomTable && WorldGen.roomDoor && WorldGen.roomTorch)
			{
				WorldGen.canSpawn = true;
			}
			else
			{
				WorldGen.canSpawn = false;
			}
			return WorldGen.canSpawn;
		}

		// Token: 0x0600113E RID: 4414 RVA: 0x0040E9DC File Offset: 0x0040CBDC
		public static void QuickFindHome(int npc)
		{
			bool flag = Main.tileSolid[379];
			Main.tileSolid[379] = true;
			if (Main.npc[npc].homeTileX > 10 && Main.npc[npc].homeTileY > 10 && Main.npc[npc].homeTileX < Main.maxTilesX - 10 && Main.npc[npc].homeTileY < Main.maxTilesY)
			{
				WorldGen.canSpawn = false;
				WorldGen.StartRoomCheck(Main.npc[npc].homeTileX, Main.npc[npc].homeTileY - 1);
				if (!WorldGen.canSpawn)
				{
					for (int i = Main.npc[npc].homeTileX - 1; i < Main.npc[npc].homeTileX + 2; i++)
					{
						int j = Main.npc[npc].homeTileY - 1;
						while (j < Main.npc[npc].homeTileY + 2 && !WorldGen.StartRoomCheck(i, j))
						{
							j++;
						}
					}
				}
				if (!WorldGen.canSpawn)
				{
					int num = 10;
					for (int k = Main.npc[npc].homeTileX - num; k <= Main.npc[npc].homeTileX + num; k += 2)
					{
						int l = Main.npc[npc].homeTileY - num;
						while (l <= Main.npc[npc].homeTileY + num && !WorldGen.StartRoomCheck(k, l))
						{
							l += 2;
						}
					}
				}
				if (WorldGen.canSpawn)
				{
					WorldGen.RoomNeeds(Main.npc[npc].type);
					if (WorldGen.canSpawn)
					{
						WorldGen.ScoreRoom(npc, Main.npc[npc].type);
					}
					if (WorldGen.canSpawn && WorldGen.hiScore > 0)
					{
						WorldGen.canSpawn = WorldGen.IsRoomConsideredOccupiedForNPCIndex(npc);
					}
					if (WorldGen.canSpawn && WorldGen.hiScore > 0)
					{
						Main.npc[npc].homeTileX = WorldGen.bestX;
						Main.npc[npc].homeTileY = WorldGen.bestY;
						Main.npc[npc].homeless = false;
						AchievementsHelper.NotifyProgressionEvent(8);
						WorldGen.canSpawn = false;
					}
					else
					{
						Main.npc[npc].homeless = true;
					}
				}
				else
				{
					Main.npc[npc].homeless = true;
				}
			}
			Main.tileSolid[379] = flag;
		}

		// Token: 0x0600113F RID: 4415 RVA: 0x0040EC04 File Offset: 0x0040CE04
		private static bool IsRoomConsideredOccupiedForNPCIndex(int npc)
		{
			bool result = true;
			for (int i = 0; i < 200; i++)
			{
				if (i != npc)
				{
					NPC nPC = Main.npc[i];
					if (nPC.active && nPC.townNPC && !nPC.homeless && nPC.homeTileX == WorldGen.bestX && nPC.homeTileY == WorldGen.bestY && !WorldGen.TownManager.CanNPCsLiveWithEachOther(Main.npc[npc], nPC))
					{
						result = false;
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x06001140 RID: 4416 RVA: 0x0040EC7C File Offset: 0x0040CE7C
		private static bool ScoreRoom_IsThisRoomOccupiedBySomeone(int ignoreNPC = -1, int npcTypeAsking = -1)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && ignoreNPC != i && !Main.npc[i].homeless)
				{
					for (int j = 0; j < WorldGen.numRoomTiles; j++)
					{
						if (Main.npc[i].homeTileX == WorldGen.roomX[j] && Main.npc[i].homeTileY == WorldGen.roomY[j])
						{
							bool flag = false;
							for (int k = 0; k < WorldGen.numRoomTiles; k++)
							{
								if (Main.npc[i].homeTileX == WorldGen.roomX[k] && Main.npc[i].homeTileY - 1 == WorldGen.roomY[k])
								{
									if (!WorldGen.TownManager.CanNPCsLiveWithEachOther(npcTypeAsking, Main.npc[i]))
									{
										flag = true;
										break;
									}
									WorldGen.sharedRoomX = Main.npc[i].homeTileX;
								}
							}
							if (flag)
							{
								return true;
							}
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06001141 RID: 4417 RVA: 0x0040ED8C File Offset: 0x0040CF8C
		public unsafe static void CountTileTypesInArea(int[] tileTypeCounts, int startX, int endX, int startY, int endY)
		{
			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
				{
					if (Main.tile[i, j].active())
					{
						tileTypeCounts[(int)(*Main.tile[i, j].type)]++;
					}
				}
			}
		}

		// Token: 0x06001142 RID: 4418 RVA: 0x0040EDE8 File Offset: 0x0040CFE8
		public static int GetTileTypeCountByCategory(int[] tileTypeCounts, TileScanGroup group)
		{
			switch (group)
			{
			case TileScanGroup.None:
				return 0;
			case TileScanGroup.Corruption:
				return tileTypeCounts[23] + tileTypeCounts[24] + tileTypeCounts[25] + tileTypeCounts[32] + tileTypeCounts[112] + tileTypeCounts[163] + tileTypeCounts[400] + tileTypeCounts[398] + -5 * tileTypeCounts[27];
			case TileScanGroup.Crimson:
				return tileTypeCounts[199] + tileTypeCounts[203] + tileTypeCounts[200] + tileTypeCounts[401] + tileTypeCounts[399] + tileTypeCounts[234] + tileTypeCounts[352] - 5 * tileTypeCounts[27];
			case TileScanGroup.Hallow:
				return tileTypeCounts[109] + tileTypeCounts[110] + tileTypeCounts[113] + tileTypeCounts[117] + tileTypeCounts[116] + tileTypeCounts[164] + tileTypeCounts[403] + tileTypeCounts[402];
			case TileScanGroup.TotalGoodEvil:
			{
				int tileTypeCountByCategory4 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Hallow);
				int tileTypeCountByCategory5 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Corruption);
				int tileTypeCountByCategory3 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Crimson);
				int num = 5 * tileTypeCounts[27];
				int num2 = tileTypeCountByCategory5 + tileTypeCountByCategory3 + num;
				return tileTypeCountByCategory4 - num2;
			}
			default:
				return 0;
			}
		}

		// Token: 0x06001143 RID: 4419 RVA: 0x0040EEE8 File Offset: 0x0040D0E8
		public unsafe static void ScoreRoom(int ignoreNPC = -1, int npcTypeAskingToScoreRoom = -1)
		{
			WorldGen.roomOccupied = false;
			WorldGen.roomEvil = false;
			WorldGen.sharedRoomX = -1;
			if (WorldGen.ScoreRoom_IsThisRoomOccupiedBySomeone(ignoreNPC, npcTypeAskingToScoreRoom))
			{
				WorldGen.roomOccupied = true;
				WorldGen.hiScore = -1;
				return;
			}
			WorldGen.hiScore = 0;
			int num2 = 50;
			int startX;
			int endX;
			int startY;
			int endY;
			WorldGen.Housing_GetTestedRoomBounds(out startX, out endX, out startY, out endY);
			int[] tileTypeCounts = new int[TileLoader.TileCount];
			WorldGen.CountTileTypesInArea(tileTypeCounts, startX + 1, endX - 1, startY + 2, endY + 1);
			int num3 = -WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.TotalGoodEvil);
			if (num3 < 50)
			{
				num3 = 0;
			}
			num2 -= num3;
			if (num3 > 0)
			{
				WorldGen.roomEvil = true;
			}
			if (num2 <= -250)
			{
				WorldGen.hiScore = num2;
				return;
			}
			startX = WorldGen.roomX1;
			endX = WorldGen.roomX2;
			startY = WorldGen.roomY1;
			endY = WorldGen.roomY2;
			for (int i = startX + 1; i < endX; i++)
			{
				for (int j = startY + 2; j < endY + 2; j++)
				{
					if (Main.tile[i, j].nactive() && WorldGen.ScoreRoom_CanBeHomeSpot(i, j))
					{
						int num4 = num2;
						if (Main.tileSolid[(int)(*Main.tile[i, j].type)] && !Main.tileSolidTop[(int)(*Main.tile[i, j].type)] && !Collision.SolidTiles(i - 1, i + 1, j - 3, j - 1) && Main.tile[i - 1, j].nactive() && Main.tileSolid[(int)(*Main.tile[i - 1, j].type)] && Main.tile[i + 1, j].nactive() && Main.tileSolid[(int)(*Main.tile[i + 1, j].type)])
						{
							int num5 = 0;
							int num6 = 0;
							for (int k = i - 2; k < i + 3; k++)
							{
								for (int l = j - 4; l < j; l++)
								{
									Tile tile = Main.tile[k, l];
									if (tile.nactive() && !TileID.Sets.IgnoredInHouseScore[(int)(*tile.type)] && (*tile.type != 11 || WorldGen.IsOpenDoorAnchorFrame(k, l)))
									{
										if (k == i)
										{
											num5++;
										}
										else if (TileID.Sets.BasicChest[(int)(*tile.type)])
										{
											num6++;
										}
										else
										{
											num4 = ((*tile.type != 10 && *tile.type != 388) ? ((!WorldGen.IsOpenDoorAnchorFrame(k, l) && *tile.type != 389) ? ((!Main.tileSolid[(int)(*tile.type)]) ? (num4 + 5) : (num4 - 5)) : (num4 - 20)) : (num4 - 20));
										}
									}
								}
							}
							if (WorldGen.sharedRoomX >= 0 && num4 >= 1 && Math.Abs(WorldGen.sharedRoomX - i) < 3)
							{
								num4 = 1;
							}
							if (num4 > 0 && num6 > 0)
							{
								num4 -= 30 * num6;
								if (num4 < 1)
								{
									num4 = 1;
								}
							}
							if (num4 > 0 && num5 > 0)
							{
								num4 -= 15 * num5;
								if (num4 <= 0)
								{
									num4 = 0;
								}
							}
							if (num4 > WorldGen.hiScore)
							{
								bool flag = WorldGen.Housing_CheckIfInRoom(i, j);
								bool[] array = new bool[3];
								for (int m = 1; m <= 3; m++)
								{
									if (!Main.tile[i, j - m].active() || !Main.tileSolid[(int)(*Main.tile[i, j - m].type)])
									{
										array[m - 1] = true;
									}
									if (!WorldGen.Housing_CheckIfInRoom(i, j - m))
									{
										array[m - 1] = false;
									}
								}
								bool[] array2 = array;
								for (int n = 0; n < array2.Length; n++)
								{
									if (!array2[n])
									{
										flag = false;
										break;
									}
								}
								if (flag && !WorldGen.Housing_CheckIfIsCeiling(i, j))
								{
									WorldGen.hiScore = num4;
									WorldGen.bestX = i;
									WorldGen.bestY = j;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06001144 RID: 4420 RVA: 0x0040F308 File Offset: 0x0040D508
		public static void Housing_GetTestedRoomBounds(out int startX, out int endX, out int startY, out int endY)
		{
			int num = 40;
			int num2 = 5;
			int num3 = 3;
			startX = WorldGen.roomX1 - num2 - 1 - num;
			endX = WorldGen.roomX2 + num2 + 1 + num;
			startY = WorldGen.roomY1 - num3 - 1 - num;
			endY = WorldGen.roomY2 + num3 + 1 + num;
			if (startX < 5)
			{
				startX = 5;
			}
			if (endX >= Main.maxTilesX - 5)
			{
				endX = Main.maxTilesX - 6;
			}
			if (startY < 5)
			{
				startY = 5;
			}
			if (endY >= Main.maxTilesY - 5)
			{
				endY = Main.maxTilesY - 6;
			}
		}

		// Token: 0x06001145 RID: 4421 RVA: 0x0040F388 File Offset: 0x0040D588
		private unsafe static bool ScoreRoom_CanBeHomeSpot(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			return !tile.active() || *tile.type != 379;
		}

		// Token: 0x06001146 RID: 4422 RVA: 0x0040F3C0 File Offset: 0x0040D5C0
		private static bool Housing_CheckIfIsCeiling(int i, int j)
		{
			bool result = false;
			int k = 0;
			while (k < WorldGen.roomCeilingsCount)
			{
				if (WorldGen.roomCeilingX[k] == i)
				{
					if (WorldGen.roomCeilingY[k] == j)
					{
						result = true;
						break;
					}
					break;
				}
				else
				{
					k++;
				}
			}
			return result;
		}

		// Token: 0x06001147 RID: 4423 RVA: 0x0040F3F8 File Offset: 0x0040D5F8
		private static bool Housing_CheckIfInRoom(int i, int j)
		{
			bool result = false;
			for (int k = 0; k < WorldGen.numRoomTiles; k++)
			{
				if (WorldGen.roomX[k] == i && WorldGen.roomY[k] == j)
				{
					result = true;
					break;
				}
			}
			return result;
		}

		// Token: 0x06001148 RID: 4424 RVA: 0x0040F430 File Offset: 0x0040D630
		public unsafe static bool StartRoomCheck(int x, int y)
		{
			WorldGen.roomHasStinkbug = false;
			WorldGen.roomHasEchoStinkbug = false;
			WorldGen.roomX1 = x;
			WorldGen.roomX2 = x;
			WorldGen.roomY1 = y;
			WorldGen.roomY2 = y;
			WorldGen.numRoomTiles = 0;
			WorldGen.roomCeilingsCount = 0;
			for (int i = 0; i < WorldGen.houseTile.Length; i++)
			{
				WorldGen.houseTile[i] = false;
			}
			WorldGen.canSpawn = true;
			if (Main.tile[x, y].nactive() && Main.tileSolid[(int)(*Main.tile[x, y].type)])
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile;
				WorldGen.canSpawn = false;
				return false;
			}
			WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;
			WorldGen.CheckRoom(x, y);
			if (!WorldGen.canSpawn)
			{
				return false;
			}
			if (WorldGen.numRoomTiles < 60)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooSmall;
				WorldGen.canSpawn = false;
				return false;
			}
			return WorldGen.canSpawn;
		}

		// Token: 0x06001149 RID: 4425 RVA: 0x0040F508 File Offset: 0x0040D708
		public unsafe static void CheckRoom(int x, int y)
		{
			if (!WorldGen.canSpawn)
			{
				return;
			}
			if (x < 10 || y < 10 || x >= Main.maxTilesX - 10 || y >= WorldGen.lastMaxTilesY - 10)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.TooCloseToWorldEdge;
				WorldGen.canSpawn = false;
				return;
			}
			for (int i = 0; i < WorldGen.numRoomTiles; i++)
			{
				if (WorldGen.roomX[i] == x && WorldGen.roomY[i] == y)
				{
					return;
				}
			}
			WorldGen.roomX[WorldGen.numRoomTiles] = x;
			WorldGen.roomY[WorldGen.numRoomTiles] = y;
			bool flag = false;
			int j = 0;
			while (j < WorldGen.roomCeilingsCount)
			{
				if (WorldGen.roomCeilingX[j] == x)
				{
					flag = true;
					if (WorldGen.roomCeilingY[j] > y)
					{
						WorldGen.roomCeilingY[j] = y;
						break;
					}
					break;
				}
				else
				{
					j++;
				}
			}
			if (!flag)
			{
				WorldGen.roomCeilingX[WorldGen.roomCeilingsCount] = x;
				WorldGen.roomCeilingY[WorldGen.roomCeilingsCount] = y;
				WorldGen.roomCeilingsCount++;
			}
			WorldGen.numRoomTiles++;
			if (WorldGen.numRoomTiles >= WorldGen.maxRoomTiles)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooBig;
				WorldGen.canSpawn = false;
				return;
			}
			if (Main.tile[x, y].nactive())
			{
				WorldGen.houseTile[(int)(*Main.tile[x, y].type)] = true;
				if (Main.tileSolid[(int)(*Main.tile[x, y].type)] || (*Main.tile[x, y].type == 11 && (*Main.tile[x, y].frameX == 0 || *Main.tile[x, y].frameX == 54 || *Main.tile[x, y].frameX == 72 || *Main.tile[x, y].frameX == 126)) || *Main.tile[x, y].type == 389 || (*Main.tile[x, y].type == 386 && ((*Main.tile[x, y].frameX < 36 && *Main.tile[x, y].frameY == 18) || (*Main.tile[x, y].frameX >= 36 && *Main.tile[x, y].frameY == 0))))
				{
					return;
				}
				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (*Main.tile[x, y].frameX == 0 || *Main.tile[x, y].frameX == 54 || *Main.tile[x, y].frameX == 72 || *Main.tile[x, y].frameX == 126))
				{
					return;
				}
			}
			if (x < WorldGen.roomX1)
			{
				WorldGen.roomX1 = x;
			}
			if (x > WorldGen.roomX2)
			{
				WorldGen.roomX2 = x;
			}
			if (y < WorldGen.roomY1)
			{
				WorldGen.roomY1 = y;
			}
			if (y > WorldGen.roomY2)
			{
				WorldGen.roomY2 = y;
			}
			if (*Main.tile[x, y].type == 630)
			{
				WorldGen.roomHasStinkbug = true;
			}
			if (*Main.tile[x, y].type == 631)
			{
				WorldGen.roomHasEchoStinkbug = true;
			}
			bool flag2 = false;
			bool flag3 = false;
			for (int k = -2; k < 3; k++)
			{
				if (Main.wallHouse[(int)(*Main.tile[x + k, y].wall)])
				{
					flag2 = true;
				}
				if (Main.tile[x + k, y].nactive() && (Main.tileSolid[(int)(*Main.tile[x + k, y].type)] || TileID.Sets.HousingWalls[(int)(*Main.tile[x + k, y].type)]))
				{
					flag2 = true;
				}
				if (Main.wallHouse[(int)(*Main.tile[x, y + k].wall)])
				{
					flag3 = true;
				}
				if (Main.tile[x, y + k].nactive() && (Main.tileSolid[(int)(*Main.tile[x, y + k].type)] || TileID.Sets.HousingWalls[(int)(*Main.tile[x, y + k].type)]))
				{
					flag3 = true;
				}
			}
			if (!flag2 || !flag3)
			{
				WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.HoleInWallIsTooBig;
				WorldGen.canSpawn = false;
				return;
			}
			for (int l = x - 1; l < x + 2; l++)
			{
				for (int m = y - 1; m < y + 2; m++)
				{
					if ((l != x || m != y) && WorldGen.canSpawn)
					{
						WorldGen.CheckRoom(l, m);
					}
				}
			}
		}

		// Token: 0x0600114A RID: 4426 RVA: 0x0040FA00 File Offset: 0x0040DC00
		public unsafe static void dropMeteor()
		{
			bool flag = true;
			if (Main.netMode == 1)
			{
				return;
			}
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					flag = false;
					break;
				}
			}
			int num = 0;
			double num2 = (double)Main.maxTilesX / 4200.0;
			int num3 = (int)(400.0 * num2);
			for (int j = 5; j < Main.maxTilesX - 5; j++)
			{
				int k = 5;
				while ((double)k < Main.worldSurface)
				{
					if (Main.tile[j, k].active() && *Main.tile[j, k].type == 37)
					{
						num++;
						if (num > num3)
						{
							return;
						}
					}
					k++;
				}
			}
			double num4 = 600.0;
			int num5 = 0;
			while (!flag)
			{
				double num6 = (double)Main.maxTilesX * 0.08;
				int num7 = Main.rand.Next(150, Main.maxTilesX - 150);
				while ((double)num7 > (double)Main.spawnTileX - num6 && (double)num7 < (double)Main.spawnTileX + num6)
				{
					num7 = Main.rand.Next(150, Main.maxTilesX - 150);
				}
				int l = (int)(Main.worldSurface * 0.3);
				while (l < Main.maxTilesY)
				{
					Tile tile = Main.tile[num7, l];
					if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !TileID.Sets.Platforms[(int)(*tile.type)])
					{
						int num8 = 0;
						int num9 = 15;
						for (int m = num7 - num9; m < num7 + num9; m++)
						{
							for (int n = l - num9; n < l + num9; n++)
							{
								if (WorldGen.SolidTile(m, n, false))
								{
									num8++;
									if (*Main.tile[m, n].type == 189 || *Main.tile[m, n].type == 202)
									{
										num8 -= 100;
									}
								}
								else if (*Main.tile[m, n].liquid > 0)
								{
									num8--;
								}
							}
						}
						if ((double)num8 < num4)
						{
							num4 -= 0.5;
							break;
						}
						flag = WorldGen.meteor(num7, l, false);
						if (!flag)
						{
							break;
						}
						break;
					}
					else
					{
						l++;
					}
				}
				num5++;
				if (num4 < 100.0 || num5 >= Main.maxTilesX * 5)
				{
					break;
				}
			}
		}

		// Token: 0x0600114B RID: 4427 RVA: 0x0040FCB8 File Offset: 0x0040DEB8
		public unsafe static bool meteor(int i, int j, bool ignorePlayers = false)
		{
			if (i < 50 || i > Main.maxTilesX - 50)
			{
				return false;
			}
			if (j < 50 || j > Main.maxTilesY - 50)
			{
				return false;
			}
			int num = 35;
			Rectangle rectangle;
			rectangle..ctor((i - num) * 16, (j - num) * 16, num * 2 * 16, num * 2 * 16);
			for (int k = 0; k < 255; k++)
			{
				if (Main.player[k].active && !ignorePlayers)
				{
					Rectangle value;
					value..ctor((int)(Main.player[k].position.X + (float)(Main.player[k].width / 2) - (float)(NPC.sWidth / 2) - (float)NPC.safeRangeX), (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2) - (float)(NPC.sHeight / 2) - (float)NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					if (rectangle.Intersects(value))
					{
						return false;
					}
				}
			}
			for (int l = 0; l < 200; l++)
			{
				if (Main.npc[l].active)
				{
					Rectangle value2;
					value2..ctor((int)Main.npc[l].position.X, (int)Main.npc[l].position.Y, Main.npc[l].width, Main.npc[l].height);
					if (rectangle.Intersects(value2))
					{
						return false;
					}
				}
			}
			for (int m = i - num; m < i + num; m++)
			{
				for (int n = j - num; n < j + num; n++)
				{
					if (Main.tile[m, n].active())
					{
						if (TileID.Sets.BasicChest[(int)(*Main.tile[m, n].type)] || Main.tileDungeon[(int)(*Main.tile[m, n].type)])
						{
							return false;
						}
						ref ushort type = ref Main.tile[m, n].type;
						if (TileID.Sets.AvoidedByMeteorLanding[(int)(*Main.tile[m, n].type)])
						{
							return false;
						}
					}
				}
			}
			WorldGen.stopDrops = true;
			num = WorldGen.genRand.Next(17, 23);
			for (int num2 = i - num; num2 < i + num; num2++)
			{
				for (int num3 = j - num; num3 < j + num; num3++)
				{
					if (num3 > j + Main.rand.Next(-2, 3) - 5)
					{
						double num17 = (double)Math.Abs(i - num2);
						double num4 = (double)Math.Abs(j - num3);
						if (Math.Sqrt(num17 * num17 + num4 * num4) < (double)num * 0.9 + (double)Main.rand.Next(-4, 5))
						{
							if (!Main.tileSolid[(int)(*Main.tile[num2, num3].type)])
							{
								Main.tile[num2, num3].active(false);
							}
							*Main.tile[num2, num3].type = 37;
						}
					}
				}
			}
			num = WorldGen.genRand.Next(8, 14);
			for (int num5 = i - num; num5 < i + num; num5++)
			{
				for (int num6 = j - num; num6 < j + num; num6++)
				{
					if (num6 > j + Main.rand.Next(-2, 3) - 4)
					{
						double num18 = (double)Math.Abs(i - num5);
						double num7 = (double)Math.Abs(j - num6);
						if (Math.Sqrt(num18 * num18 + num7 * num7) < (double)num * 0.8 + (double)Main.rand.Next(-3, 4))
						{
							Main.tile[num5, num6].active(false);
						}
					}
				}
			}
			num = WorldGen.genRand.Next(25, 35);
			for (int num8 = i - num; num8 < i + num; num8++)
			{
				for (int num9 = j - num; num9 < j + num; num9++)
				{
					double num19 = (double)Math.Abs(i - num8);
					double num10 = (double)Math.Abs(j - num9);
					if (Math.Sqrt(num19 * num19 + num10 * num10) < (double)num * 0.7)
					{
						if (TileID.Sets.GetsDestroyedForMeteors[(int)(*Main.tile[num8, num9].type)])
						{
							WorldGen.KillTile(num8, num9, false, false, false);
						}
						*Main.tile[num8, num9].liquid = 0;
					}
					if (*Main.tile[num8, num9].type == 37)
					{
						if (!WorldGen.SolidTile(num8 - 1, num9, false) && !WorldGen.SolidTile(num8 + 1, num9, false) && !WorldGen.SolidTile(num8, num9 - 1, false) && !WorldGen.SolidTile(num8, num9 + 1, false))
						{
							Main.tile[num8, num9].active(false);
						}
						else if ((Main.tile[num8, num9].halfBrick() || Main.tile[num8 - 1, num9].topSlope()) && !WorldGen.SolidTile(num8, num9 + 1, false))
						{
							Main.tile[num8, num9].active(false);
						}
					}
					WorldGen.SquareTileFrame(num8, num9, true);
					WorldGen.SquareWallFrame(num8, num9, true);
				}
			}
			num = WorldGen.genRand.Next(23, 32);
			for (int num11 = i - num; num11 < i + num; num11++)
			{
				for (int num12 = j - num; num12 < j + num; num12++)
				{
					if (num12 > j + WorldGen.genRand.Next(-3, 4) - 3 && Main.tile[num11, num12].active() && Main.rand.Next(10) == 0)
					{
						double num20 = (double)Math.Abs(i - num11);
						double num13 = (double)Math.Abs(j - num12);
						if (Math.Sqrt(num20 * num20 + num13 * num13) < (double)num * 0.8)
						{
							if (TileID.Sets.GetsDestroyedForMeteors[(int)(*Main.tile[num11, num12].type)])
							{
								WorldGen.KillTile(num11, num12, false, false, false);
							}
							*Main.tile[num11, num12].type = 37;
							WorldGen.SquareTileFrame(num11, num12, true);
						}
					}
				}
			}
			num = WorldGen.genRand.Next(30, 38);
			for (int num14 = i - num; num14 < i + num; num14++)
			{
				for (int num15 = j - num; num15 < j + num; num15++)
				{
					if (num15 > j + WorldGen.genRand.Next(-2, 3) && Main.tile[num14, num15].active() && Main.rand.Next(20) == 0)
					{
						double num21 = (double)Math.Abs(i - num14);
						double num16 = (double)Math.Abs(j - num15);
						if (Math.Sqrt(num21 * num21 + num16 * num16) < (double)num * 0.85)
						{
							if (TileID.Sets.GetsDestroyedForMeteors[(int)(*Main.tile[num14, num15].type)])
							{
								WorldGen.KillTile(num14, num15, false, false, false);
							}
							*Main.tile[num14, num15].type = 37;
							WorldGen.SquareTileFrame(num14, num15, true);
						}
					}
				}
			}
			WorldGen.stopDrops = false;
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.gen[59].Value, 50, byte.MaxValue, 130);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[59].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
			}
			if (Main.netMode != 1)
			{
				NetMessage.SendTileSquare(-1, i, j, 40, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x0600114C RID: 4428 RVA: 0x004104C4 File Offset: 0x0040E6C4
		public static void setWorldSize()
		{
			Main.bottomWorld = (float)(Main.maxTilesY * 16);
			Main.rightWorld = (float)(Main.maxTilesX * 16);
			Main.maxSectionsX = (Main.maxTilesX - 1) / 200 + 1;
			Main.maxSectionsY = (Main.maxTilesY - 1) / 150 + 1;
		}

		// Token: 0x0600114D RID: 4429 RVA: 0x00410515 File Offset: 0x0040E715
		public static int GetWorldSize()
		{
			if (Main.maxTilesX <= 4200)
			{
				return 0;
			}
			if (Main.maxTilesX <= 6400)
			{
				return 1;
			}
			return 2;
		}

		// Token: 0x0600114E RID: 4430 RVA: 0x00410534 File Offset: 0x0040E734
		public static void worldGenCallback(object threadContext)
		{
			try
			{
				WorldGen.do_worldGenCallBack(threadContext);
			}
			catch (Exception e)
			{
				string textValue = Language.GetTextValue("tModLoader.WorldGenError");
				string str = "\n";
				Exception ex = e;
				Utils.ShowFancyErrorMessage(textValue + str + ((ex != null) ? ex.ToString() : null), 0, null);
			}
		}

		// Token: 0x0600114F RID: 4431 RVA: 0x00410584 File Offset: 0x0040E784
		public static void do_worldGenCallBack(object threadContext)
		{
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldGen.clearWorld();
			WorldGen.GenerateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
			WorldFile.SaveWorld(Main.ActiveWorldFileData.IsCloudSave, true);
			BackupIO.archiveLock = false;
			if (Main.menuMode == 10 || Main.menuMode == 888)
			{
				Main.menuMode = 6;
			}
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldGen.generatingWorld = false;
		}

		// Token: 0x06001150 RID: 4432 RVA: 0x0041060C File Offset: 0x0040E80C
		public static Task CreateNewWorld(GenerationProgress progress = null)
		{
			WorldGen.generatingWorld = true;
			Main.rand = new UnifiedRandom(Main.ActiveWorldFileData.Seed);
			WorldGen.gen = true;
			Main.menuMode = 888;
			try
			{
				Main.MenuUI.SetState(new UIWorldLoad());
			}
			catch
			{
			}
			TaskFactory factory = Task.Factory;
			Action<object> action;
			if ((action = WorldGen.<>O.<0>__worldGenCallback) == null)
			{
				action = (WorldGen.<>O.<0>__worldGenCallback = new Action<object>(WorldGen.worldGenCallback));
			}
			return factory.StartNew(action, progress);
		}

		// Token: 0x06001151 RID: 4433 RVA: 0x00410690 File Offset: 0x0040E890
		public static void JustQuit()
		{
			Main.ambientWaterfallStrength = 0f;
			Main.ambientLavafallStrength = 0f;
			Main.ambientLavaStrength = 0f;
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			Main.menuMode = 10;
			Main.gameMenu = true;
			SoundEngine.StopTrackedSounds();
			try
			{
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			catch
			{
			}
			CaptureInterface.ResetFocus();
			Main.ActivePlayerFileData.StopPlayTimer();
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			Main.UpdateTimeRate();
			if (Main.netMode == 0)
			{
				Main.GoToWorldSelect();
				Main.player[Main.myPlayer].position = new Vector2(0f, 0f);
				return;
			}
			if (Main.netMode == 1)
			{
				Main.menuMode = 0;
				Netplay.Disconnect = true;
				Main.netMode = 0;
			}
		}

		// Token: 0x06001152 RID: 4434 RVA: 0x0041077C File Offset: 0x0040E97C
		public static void SaveAndQuitCallBack(object threadContext)
		{
			int netMode = Main.netMode;
			Main.ambientWaterfallStrength = 0f;
			Main.ambientLavafallStrength = 0f;
			if (netMode == 0)
			{
				WorldFile.CacheSaveTime();
			}
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			Main.menuMode = 10;
			Main.gameMenu = true;
			SoundEngine.StopTrackedSounds();
			try
			{
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			catch
			{
			}
			CaptureInterface.ResetFocus();
			Main.ActivePlayerFileData.StopPlayTimer();
			Player.SavePlayer(Main.ActivePlayerFileData, false);
			Player.ClearPlayerTempInfo();
			Rain.ClearRain();
			if (netMode == 0)
			{
				WorldFile.SaveWorld();
				SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			}
			else
			{
				Netplay.Disconnect = true;
				Main.netMode = 0;
			}
			SystemLoader.OnWorldUnload();
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			Main.UpdateTimeRate();
			Main.menuMode = 0;
			if (threadContext != null)
			{
				((Action)threadContext)();
			}
		}

		// Token: 0x06001153 RID: 4435 RVA: 0x0041087C File Offset: 0x0040EA7C
		public static void SaveAndQuit(Action callback = null)
		{
			WaitCallback callBack;
			if ((callBack = WorldGen.<>O.<1>__SaveAndQuitCallBack) == null)
			{
				callBack = (WorldGen.<>O.<1>__SaveAndQuitCallBack = new WaitCallback(WorldGen.SaveAndQuitCallBack));
			}
			ThreadPool.QueueUserWorkItem(callBack, callback);
		}

		// Token: 0x06001154 RID: 4436 RVA: 0x004108A0 File Offset: 0x0040EAA0
		public static void RenameWorld(WorldFileData data, string newName, Action<string> callback = null)
		{
			data.SetAsActive();
			WaitCallback callBack;
			if ((callBack = WorldGen.<>O.<2>__RenameWorldCallBack) == null)
			{
				callBack = (WorldGen.<>O.<2>__RenameWorldCallBack = new WaitCallback(WorldGen.RenameWorldCallBack));
			}
			ThreadPool.QueueUserWorkItem(callBack, Tuple.Create<string, Action<string>>(newName, callback));
		}

		// Token: 0x06001155 RID: 4437 RVA: 0x004108D0 File Offset: 0x0040EAD0
		public static void RenameWorldCallBack(object threadContext)
		{
			if (threadContext != null)
			{
				Tuple<string, Action<string>> tuple = threadContext as Tuple<string, Action<string>>;
				if (tuple != null)
				{
					string item = tuple.Item1;
					Action<string> item2 = tuple.Item2;
					WorldGen.noMapUpdate = true;
					Main.ToggleGameplayUpdates(false);
					WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
					WorldGen.noMapUpdate = false;
					if (WorldGen.loadFailed || !WorldGen.loadSuccess)
					{
						Main.LoadWorlds();
						Main.GoToWorldSelect();
						return;
					}
					Main.sectionManager.SetAllSectionsLoaded();
					double time = Main.time;
					bool dayTime = Main.dayTime;
					WorldFile.SetOngoingToTemps();
					WorldFile.CacheSaveTime();
					Main.time = time;
					Main.dayTime = dayTime;
					Main.worldName = item;
					WorldFile.SaveWorld();
					Rain.ClearRain();
					Main.fastForwardTimeToDawn = false;
					Main.fastForwardTimeToDusk = false;
					Main.UpdateTimeRate();
					if (item2 != null)
					{
						item2(item);
					}
				}
			}
		}

		// Token: 0x06001156 RID: 4438 RVA: 0x00410990 File Offset: 0x0040EB90
		public static void playWorldCallBack(object threadContext)
		{
			Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}, Width: {2}, Height: {3}, Evil: {4}, GameMode: {5}", new object[]
			{
				Main.ActiveWorldFileData.Name,
				Main.ActiveWorldFileData.IsCloudSave,
				Main.ActiveWorldFileData.WorldSizeX,
				Main.ActiveWorldFileData.WorldSizeY,
				Main.ActiveWorldFileData.HasCrimson.ToInt(),
				Main.ActiveWorldFileData.GameMode
			});
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			for (int i = 0; i < 255; i++)
			{
				if (i != Main.myPlayer)
				{
					Main.player[i].active = false;
				}
			}
			WorldGen.noMapUpdate = true;
			Main.ToggleGameplayUpdates(false);
			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
				if (WorldGen.loadFailed || !WorldGen.loadSuccess)
				{
					bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
					if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
					{
						WorldGen.worldBackup = true;
					}
					else
					{
						WorldGen.worldBackup = false;
					}
					if (!Main.dedServ)
					{
						CustomModDataException ex = WorldFile.LastThrownLoadException as CustomModDataException;
						if (ex != null)
						{
							WorldIO.customDataFail = ex;
							DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(4, 4);
							defaultInterpolatedStringHandler.AppendFormatted(Language.GetTextValue("tModLoader.WorldIOException"));
							defaultInterpolatedStringHandler.AppendLiteral("\n");
							defaultInterpolatedStringHandler.AppendFormatted(ex.modName);
							defaultInterpolatedStringHandler.AppendLiteral("\n\n");
							defaultInterpolatedStringHandler.AppendFormatted(ex.Message);
							defaultInterpolatedStringHandler.AppendLiteral("\n");
							defaultInterpolatedStringHandler.AppendFormatted(ex.StackTrace);
							Utils.ShowFancyErrorMessage(defaultInterpolatedStringHandler.ToStringAndClear(), WorldGen.worldBackup ? 200 : 201, null);
							return;
						}
						if (WorldGen.worldBackup)
						{
							Main.menuMode = 200;
							return;
						}
						Main.menuMode = 201;
						return;
					}
					else
					{
						if (!WorldGen.worldBackup)
						{
							string message = Language.GetTextValue("Error.LoadFailedNoBackup");
							if (WorldIO.customDataFail != null)
							{
								message = WorldIO.customDataFail.modName + " " + message;
								string str = message;
								string str2 = "\n";
								Exception innerException = WorldIO.customDataFail.InnerException;
								message = str + str2 + ((innerException != null) ? innerException.ToString() : null);
							}
							Console.WriteLine(message);
							return;
						}
						FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave, false);
						WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
						WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
						{
							WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
							if (WorldGen.loadFailed || !WorldGen.loadSuccess)
							{
								FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
								FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
								FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave, false);
								WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
								string message2 = Language.GetTextValue("Error.LoadFailed");
								if (WorldIO.customDataFail != null)
								{
									DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(3, 3);
									defaultInterpolatedStringHandler.AppendFormatted(WorldIO.customDataFail.modName);
									defaultInterpolatedStringHandler.AppendLiteral(" ");
									defaultInterpolatedStringHandler.AppendFormatted(message2);
									defaultInterpolatedStringHandler.AppendLiteral("\r\n");
									defaultInterpolatedStringHandler.AppendFormatted<Exception>(WorldIO.customDataFail.InnerException);
									message2 = defaultInterpolatedStringHandler.ToStringAndClear();
								}
								Console.WriteLine(message2);
								return;
							}
						}
					}
				}
			}
			if (Main.mapEnabled)
			{
				Main.Map.Load();
			}
			if (Main.netMode != 2)
			{
				Main.sectionManager.SetAllSectionsLoaded();
			}
			while (Main.loadMapLock)
			{
				float num = (float)Main.loadMapLastX / (float)Main.maxTilesX;
				Main.statusText = Lang.gen[68].Value + " " + ((int)(num * 100f + 1f)).ToString() + "%";
				Thread.Sleep(0);
				if (!Main.mapEnabled)
				{
					break;
				}
			}
			if (Main.gameMenu)
			{
				Main.gameMenu = false;
			}
			if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
			{
				Main.anglerQuestFinished = true;
			}
			Action action;
			if ((action = WorldGen.<>O.<3>__FinishPlayWorld) == null)
			{
				action = (WorldGen.<>O.<3>__FinishPlayWorld = new Action(WorldGen.FinishPlayWorld));
			}
			Main.QueueMainThreadAction(action);
		}

		// Token: 0x06001157 RID: 4439 RVA: 0x00410E38 File Offset: 0x0040F038
		internal static void FinishPlayWorld()
		{
			Main.player[Main.myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
			WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
			WorldFile.SetOngoingToTemps();
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			Main.resetClouds = true;
			WorldGen.noMapUpdate = false;
		}

		// Token: 0x06001158 RID: 4440 RVA: 0x00410E8B File Offset: 0x0040F08B
		public static void playWorld()
		{
			WaitCallback callBack;
			if ((callBack = WorldGen.<>O.<4>__playWorldCallBack) == null)
			{
				callBack = (WorldGen.<>O.<4>__playWorldCallBack = new WaitCallback(WorldGen.playWorldCallBack));
			}
			ThreadPool.QueueUserWorkItem(callBack, 1);
		}

		// Token: 0x06001159 RID: 4441 RVA: 0x00410EB4 File Offset: 0x0040F0B4
		public static void saveAndPlayCallBack(object threadContext)
		{
			WorldFile.SaveWorld();
		}

		// Token: 0x0600115A RID: 4442 RVA: 0x00410EBB File Offset: 0x0040F0BB
		public static void saveAndPlay()
		{
			WaitCallback callBack;
			if ((callBack = WorldGen.<>O.<5>__saveAndPlayCallBack) == null)
			{
				callBack = (WorldGen.<>O.<5>__saveAndPlayCallBack = new WaitCallback(WorldGen.saveAndPlayCallBack));
			}
			ThreadPool.QueueUserWorkItem(callBack, 1);
		}

		// Token: 0x0600115B RID: 4443 RVA: 0x00410EE4 File Offset: 0x0040F0E4
		public static void saveToonWhilePlayingCallBack(object threadContext)
		{
			Player.SavePlayer(Main.ActivePlayerFileData, false);
		}

		// Token: 0x0600115C RID: 4444 RVA: 0x00410EF1 File Offset: 0x0040F0F1
		public static void saveToonWhilePlaying()
		{
			WaitCallback callBack;
			if ((callBack = WorldGen.<>O.<6>__saveToonWhilePlayingCallBack) == null)
			{
				callBack = (WorldGen.<>O.<6>__saveToonWhilePlayingCallBack = new WaitCallback(WorldGen.saveToonWhilePlayingCallBack));
			}
			ThreadPool.QueueUserWorkItem(callBack, 1);
		}

		// Token: 0x0600115D RID: 4445 RVA: 0x00410F1C File Offset: 0x0040F11C
		public static void serverLoadWorldCallBack()
		{
			Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}, Width: {2}, Height: {3}, Evil: {4}, GameMode: {5}", new object[]
			{
				Main.ActiveWorldFileData.Name,
				Main.ActiveWorldFileData.IsCloudSave,
				Main.ActiveWorldFileData.WorldSizeX,
				Main.ActiveWorldFileData.WorldSizeY,
				Main.ActiveWorldFileData.HasCrimson.ToInt(),
				Main.ActiveWorldFileData.GameMode
			});
			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
				if (WorldGen.loadFailed || !WorldGen.loadSuccess)
				{
					bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
					if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
					{
						WorldGen.worldBackup = true;
					}
					else
					{
						WorldGen.worldBackup = false;
					}
					if (!Main.dedServ)
					{
						if (WorldGen.worldBackup)
						{
							Main.menuMode = 200;
							return;
						}
						Main.menuMode = 201;
						return;
					}
					else
					{
						if (!WorldGen.worldBackup)
						{
							Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
							return;
						}
						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave, false);
						WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
						{
							WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
							if (WorldGen.loadFailed || !WorldGen.loadSuccess)
							{
								Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
								return;
							}
						}
					}
				}
			}
			WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			WorldFile.SetOngoingToTemps();
			WorldGen.Hooks.WorldLoaded();
		}

		// Token: 0x0600115E RID: 4446 RVA: 0x00411116 File Offset: 0x0040F316
		public static Task serverLoadWorld()
		{
			TaskFactory factory = Task.Factory;
			Action action;
			if ((action = WorldGen.<>O.<7>__serverLoadWorldCallBack) == null)
			{
				action = (WorldGen.<>O.<7>__serverLoadWorldCallBack = new Action(WorldGen.serverLoadWorldCallBack));
			}
			return factory.StartNew(action);
		}

		// Token: 0x0600115F RID: 4447 RVA: 0x00411140 File Offset: 0x0040F340
		public static void clearWorld()
		{
			WorldGen.ResetTreeShakes();
			Main.ladyBugRainBoost = 0.0;
			Main.getGoodWorld = false;
			Main.drunkWorld = false;
			Main.tenthAnniversaryWorld = false;
			Main.dontStarveWorld = false;
			Main.notTheBeesWorld = false;
			Main.remixWorld = false;
			Main.noTrapsWorld = false;
			Main.zenithWorld = false;
			Main.afterPartyOfDoom = false;
			Main.shimmerAlpha = 0f;
			Main.shimmerDarken = 0f;
			Main.shimmerBrightenDelay = 0f;
			NPC.ResetBadgerHatTime();
			NPC.freeCake = false;
			NPC.mechQueen = -1;
			Main.mapDelay = 2;
			Main.waterStyle = 0;
			Main.ResetWindCounter(true);
			WorldGen.TownManager = new TownRoomManager();
			PressurePlateHelper.Reset();
			WorldGen.TownManager.Clear();
			NPC.ResetKillCount();
			Main.instance.ClearCachedTileDraws();
			MapHelper.ResetMapData();
			TileEntity.Clear();
			Main.checkXMas();
			Main.checkHalloween();
			DontStarveDarknessDamageDealer.Reset();
			Wiring.ClearAll();
			Main.ParticleSystem_World_BehindPlayers.Particles.Clear();
			Main.ParticleSystem_World_OverPlayers.Particles.Clear();
			if (Main.mapReady)
			{
				for (int i = 0; i < WorldGen.lastMaxTilesX; i++)
				{
					float num12 = (float)i / (float)WorldGen.lastMaxTilesX;
					Main.statusText = Lang.gen[65].Value;
				}
				if (Main.Map != null)
				{
					Main.Map.Clear();
				}
			}
			NPC.MoonLordCountdown = 0;
			Main.forceHalloweenForToday = false;
			Main.forceXMasForToday = false;
			NPC.RevengeManager.Reset();
			Main.pumpkinMoon = false;
			Main.clearMap = true;
			Main.mapTime = 0;
			Main.updateMap = false;
			Main.mapReady = false;
			Main.refreshMap = false;
			Main.eclipse = false;
			Main.slimeRain = false;
			Main.slimeRainTime = 0.0;
			Main.slimeWarningTime = 0;
			Main.sundialCooldown = 0;
			Main.moondialCooldown = 0;
			Main.fastForwardTimeToDawn = false;
			Main.fastForwardTimeToDusk = false;
			BirthdayParty.WorldClear();
			LanternNight.WorldClear();
			WorldGen.mysticLogsEvent.WorldClear();
			CreditsRollEvent.Reset();
			Sandstorm.WorldClear();
			Main.DroneCameraTracker.WorldClear();
			Main.LocalGolfState.WorldClear();
			Main.CurrentPan = Vector2.Zero;
			Main.UpdateTimeRate();
			Main.wofNPCIndex = -1;
			NPC.waveKills = 0f;
			WorldGen.spawnHardBoss = 0;
			WorldGen.totalSolid2 = 0;
			WorldGen.totalGood2 = 0;
			WorldGen.totalEvil2 = 0;
			WorldGen.totalBlood2 = 0;
			WorldGen.totalSolid = 0;
			WorldGen.totalGood = 0;
			WorldGen.totalEvil = 0;
			WorldGen.totalBlood = 0;
			WorldFile.ResetTemps();
			Main.maxRaining = 0f;
			WorldGen.totalX = 0;
			WorldGen.totalD = 0;
			WorldGen.tEvil = 0;
			WorldGen.tBlood = 0;
			WorldGen.tGood = 0;
			WorldGen.spawnEye = false;
			WorldGen.prioritizedTownNPCType = 0;
			WorldGen.shadowOrbCount = 0;
			WorldGen.altarCount = 0;
			WorldGen.SavedOreTiers.Copper = -1;
			WorldGen.SavedOreTiers.Iron = -1;
			WorldGen.SavedOreTiers.Silver = -1;
			WorldGen.SavedOreTiers.Gold = -1;
			WorldGen.SavedOreTiers.Cobalt = -1;
			WorldGen.SavedOreTiers.Mythril = -1;
			WorldGen.SavedOreTiers.Adamantite = -1;
			GenVars.shimmerPosition = Vector2D.Zero;
			Main.cloudBGActive = 0f;
			Main.raining = false;
			Main.hardMode = false;
			Main.helpText = 0;
			Main.BartenderHelpTextIndex = 0;
			Main.dungeonX = 0;
			Main.dungeonY = 0;
			NPC.downedBoss1 = false;
			NPC.downedBoss2 = false;
			NPC.downedBoss3 = false;
			NPC.downedQueenBee = false;
			NPC.downedSlimeKing = false;
			NPC.downedMechBossAny = false;
			NPC.downedMechBoss1 = false;
			NPC.downedMechBoss2 = false;
			NPC.downedMechBoss3 = false;
			NPC.downedFishron = false;
			NPC.downedAncientCultist = false;
			NPC.downedMoonlord = false;
			NPC.downedHalloweenKing = false;
			NPC.downedHalloweenTree = false;
			NPC.downedChristmasIceQueen = false;
			NPC.downedChristmasSantank = false;
			NPC.downedChristmasTree = false;
			NPC.downedPlantBoss = false;
			NPC.downedGolemBoss = false;
			NPC.downedEmpressOfLight = false;
			NPC.downedQueenSlime = false;
			NPC.downedDeerclops = false;
			NPC.combatBookWasUsed = false;
			NPC.combatBookVolumeTwoWasUsed = false;
			NPC.peddlersSatchelWasUsed = false;
			NPC.savedStylist = false;
			NPC.savedGoblin = false;
			NPC.savedWizard = false;
			NPC.savedMech = false;
			NPC.savedTaxCollector = false;
			NPC.savedAngler = false;
			NPC.savedBartender = false;
			NPC.savedGolfer = false;
			NPC.boughtCat = false;
			NPC.boughtDog = false;
			NPC.boughtBunny = false;
			NPC.unlockedSlimeBlueSpawn = false;
			NPC.unlockedSlimeGreenSpawn = false;
			NPC.unlockedSlimeOldSpawn = false;
			NPC.unlockedSlimePurpleSpawn = false;
			NPC.unlockedSlimeRainbowSpawn = false;
			NPC.unlockedSlimeRedSpawn = false;
			NPC.unlockedSlimeYellowSpawn = false;
			NPC.unlockedSlimeCopperSpawn = false;
			NPC.unlockedMerchantSpawn = false;
			NPC.unlockedDemolitionistSpawn = false;
			NPC.unlockedPartyGirlSpawn = false;
			NPC.unlockedDyeTraderSpawn = false;
			NPC.unlockedTruffleSpawn = false;
			NPC.unlockedArmsDealerSpawn = false;
			NPC.unlockedNurseSpawn = false;
			NPC.unlockedPrincessSpawn = false;
			Array.Clear(NPC.ShimmeredTownNPCs, 0, NPC.ShimmeredTownNPCs.Length);
			NPC.downedGoblins = false;
			NPC.downedClown = false;
			NPC.downedFrost = false;
			NPC.downedPirates = false;
			NPC.downedMartians = false;
			NPC.downedTowerSolar = (NPC.downedTowerVortex = (NPC.downedTowerNebula = (NPC.downedTowerStardust = (NPC.LunarApocalypseIsUp = false))));
			NPC.TowerActiveSolar = (NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveStardust = false)));
			DD2Event.ResetProgressEntirely();
			NPC.ClearFoundActiveNPCs();
			Main.BestiaryTracker.Reset();
			Main.PylonSystem.Reset();
			CreativePowerManager.Instance.Reset();
			Main.CreativeMenu.Reset();
			WorldGen.shadowOrbSmashed = false;
			WorldGen.spawnMeteor = false;
			WorldGen.stopDrops = false;
			Main.invasionDelay = 0;
			Main.invasionType = 0;
			Main.invasionSize = 0;
			Main.invasionWarn = 0;
			Main.invasionX = 0.0;
			Main.invasionSizeStart = 0;
			Main.treeX[0] = Main.maxTilesX;
			Main.treeX[1] = Main.maxTilesX;
			Main.treeX[2] = Main.maxTilesX;
			Main.treeStyle[0] = 0;
			Main.treeStyle[1] = 0;
			Main.treeStyle[2] = 0;
			Main.treeStyle[3] = 0;
			WorldGen.noLiquidCheck = false;
			Liquid.numLiquid = 0;
			LiquidBuffer.numLiquidBuffer = 0;
			WorldGen.lastMaxTilesX = Main.maxTilesX;
			WorldGen.lastMaxTilesY = Main.maxTilesY;
			if (Main.netMode != 2)
			{
				Main.sectionManager = new WorldSections((Main.maxTilesX - 1) / 200 + 1, (Main.maxTilesY - 1) / 150 + 1);
			}
			Main.tile.ClearEverything();
			for (int j = 0; j < Main.countsAsHostForGameplay.Length; j++)
			{
				Main.countsAsHostForGameplay[j] = false;
			}
			CombatText.clearAll();
			PopupText.ClearAll();
			for (int num3 = 0; num3 < 6000; num3++)
			{
				Main.dust[num3] = new Dust();
				Main.dust[num3].dustIndex = num3;
			}
			for (int num4 = 0; num4 < 600; num4++)
			{
				Main.gore[num4] = new Gore();
			}
			for (int num5 = 0; num5 < 400; num5++)
			{
				Main.item[num5] = new Item();
				Main.item[num5].whoAmI = num5;
				Main.timeItemSlotCannotBeReusedFor[num5] = 0;
			}
			for (int num6 = 0; num6 < 200; num6++)
			{
				Main.npc[num6] = new NPC();
				Main.npc[num6].whoAmI = num6;
			}
			for (int num7 = 0; num7 < 1000; num7++)
			{
				Main.projectile[num7] = new Projectile();
				Main.projectile[num7].whoAmI = num7;
			}
			for (int num8 = 0; num8 < 8000; num8++)
			{
				Main.chest[num8] = null;
			}
			for (int num9 = 0; num9 < 1000; num9++)
			{
				Main.sign[num9] = null;
			}
			for (int num10 = 0; num10 < Liquid.maxLiquid; num10++)
			{
				Main.liquid[num10] = new Liquid();
			}
			for (int num11 = 0; num11 < 50000; num11++)
			{
				Main.liquidBuffer[num11] = new LiquidBuffer();
			}
			WorldGen.setWorldSize();
			Star.SpawnStars(-1);
			SystemLoader.ClearWorld();
			WorldGen.worldCleared = true;
		}

		// Token: 0x06001160 RID: 4448 RVA: 0x0041186C File Offset: 0x0040FA6C
		public static void setBG(int bg, int style)
		{
			switch (bg)
			{
			case 0:
				WorldGen.treeBG1 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet1, Main.treeBGSet1);
				return;
			case 1:
				WorldGen.corruptBG = style;
				switch (style)
				{
				case 1:
					Main.corruptBG[0] = 56;
					Main.corruptBG[1] = 57;
					Main.corruptBG[2] = 58;
					return;
				case 2:
					Main.corruptBG[0] = 211;
					Main.corruptBG[1] = 212;
					Main.corruptBG[2] = 213;
					return;
				case 3:
					Main.corruptBG[0] = 225;
					Main.corruptBG[1] = 226;
					Main.corruptBG[2] = 227;
					return;
				case 4:
					Main.corruptBG[0] = 240;
					Main.corruptBG[1] = 241;
					Main.corruptBG[2] = 242;
					return;
				default:
					Main.corruptBG[0] = 12;
					Main.corruptBG[1] = 13;
					Main.corruptBG[2] = 14;
					return;
				}
				break;
			case 2:
				WorldGen.jungleBG = style;
				switch (style)
				{
				case 1:
					Main.jungleBG[0] = 59;
					Main.jungleBG[1] = 60;
					Main.jungleBG[2] = 61;
					return;
				case 2:
					Main.jungleBG[0] = 222;
					Main.jungleBG[1] = 223;
					Main.jungleBG[2] = 224;
					return;
				case 3:
					Main.jungleBG[0] = 237;
					Main.jungleBG[1] = 238;
					Main.jungleBG[2] = 239;
					return;
				case 4:
					Main.jungleBG[0] = 284;
					Main.jungleBG[1] = 285;
					Main.jungleBG[2] = 286;
					return;
				case 5:
					Main.jungleBG[0] = 271;
					Main.jungleBG[1] = 272;
					Main.jungleBG[2] = 273;
					return;
				default:
					Main.jungleBG[0] = 15;
					Main.jungleBG[1] = 16;
					Main.jungleBG[2] = 17;
					return;
				}
				break;
			case 3:
				WorldGen.snowBG = style;
				Main.snowMntBG[0] = 35;
				Main.snowMntBG[1] = 36;
				if (style <= 22)
				{
					switch (style)
					{
					case 1:
						Main.snowBG[0] = 97;
						Main.snowBG[1] = 96;
						Main.snowBG[2] = 95;
						return;
					case 2:
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 99;
						Main.snowBG[0] = -1;
						Main.snowBG[1] = -1;
						Main.snowBG[2] = -1;
						return;
					case 3:
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 100;
						Main.snowBG[0] = -1;
						Main.snowBG[1] = -1;
						Main.snowBG[2] = -1;
						return;
					case 4:
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 101;
						Main.snowBG[0] = -1;
						Main.snowBG[1] = -1;
						Main.snowBG[2] = -1;
						return;
					case 5:
						Main.snowMntBG[0] = -1;
						Main.snowMntBG[1] = -1;
						Main.snowBG[0] = 258;
						Main.snowBG[1] = 259;
						Main.snowBG[2] = 260;
						return;
					case 6:
						Main.snowMntBG[0] = -1;
						Main.snowMntBG[1] = -1;
						Main.snowBG[0] = 263;
						Main.snowBG[1] = 264;
						Main.snowBG[2] = 265;
						return;
					case 7:
						Main.snowMntBG[0] = 269;
						Main.snowMntBG[1] = 270;
						Main.snowBG[0] = 267;
						Main.snowBG[1] = 266;
						Main.snowBG[2] = 268;
						return;
					default:
						if (style == 21)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 99;
							Main.snowBG[0] = 95;
							Main.snowBG[1] = 96;
							Main.snowBG[2] = 97;
							return;
						}
						if (style == 22)
						{
							Main.snowMntBG[0] = 98;
							Main.snowMntBG[1] = 99;
							Main.snowBG[0] = 37;
							Main.snowBG[1] = 38;
							Main.snowBG[2] = 39;
							return;
						}
						break;
					}
				}
				else if (style <= 32)
				{
					if (style == 31)
					{
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 100;
						Main.snowBG[0] = 95;
						Main.snowBG[1] = 96;
						Main.snowBG[2] = 97;
						return;
					}
					if (style == 32)
					{
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 100;
						Main.snowBG[0] = 37;
						Main.snowBG[1] = 38;
						Main.snowBG[2] = 39;
						return;
					}
				}
				else
				{
					if (style == 41)
					{
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 101;
						Main.snowBG[0] = 95;
						Main.snowBG[1] = 96;
						Main.snowBG[2] = 97;
						return;
					}
					if (style == 42)
					{
						Main.snowMntBG[0] = 98;
						Main.snowMntBG[1] = 101;
						Main.snowBG[0] = 37;
						Main.snowBG[1] = 38;
						Main.snowBG[2] = 39;
						return;
					}
				}
				Main.snowBG[0] = 37;
				Main.snowBG[1] = 38;
				Main.snowBG[2] = 39;
				return;
			case 4:
				WorldGen.hallowBG = style;
				switch (style)
				{
				case 1:
					Main.hallowBG[0] = 102;
					Main.hallowBG[1] = 103;
					Main.hallowBG[2] = 104;
					return;
				case 2:
					Main.hallowBG[0] = 219;
					Main.hallowBG[1] = 220;
					Main.hallowBG[2] = 221;
					return;
				case 3:
					Main.hallowBG[0] = 243;
					Main.hallowBG[1] = 244;
					Main.hallowBG[2] = 245;
					return;
				case 4:
					Main.hallowBG[0] = -1;
					Main.hallowBG[1] = 261;
					Main.hallowBG[2] = 262;
					return;
				default:
					Main.hallowBG[0] = 29;
					Main.hallowBG[1] = 30;
					Main.hallowBG[2] = 31;
					return;
				}
				break;
			case 5:
				WorldGen.crimsonBG = style;
				switch (style)
				{
				case 1:
					Main.crimsonBG[0] = 105;
					Main.crimsonBG[1] = 106;
					Main.crimsonBG[2] = 107;
					return;
				case 2:
					Main.crimsonBG[0] = 174;
					Main.crimsonBG[1] = -1;
					Main.crimsonBG[2] = 175;
					return;
				case 3:
					Main.crimsonBG[0] = 214;
					Main.crimsonBG[1] = 215;
					Main.crimsonBG[2] = 216;
					return;
				case 4:
					Main.crimsonBG[0] = -1;
					Main.crimsonBG[1] = 229;
					Main.crimsonBG[2] = 230;
					return;
				case 5:
					Main.crimsonBG[0] = 255;
					Main.crimsonBG[1] = 256;
					Main.crimsonBG[2] = 257;
					return;
				default:
					Main.crimsonBG[0] = 43;
					Main.crimsonBG[1] = 44;
					Main.crimsonBG[2] = 45;
					return;
				}
				break;
			case 6:
				WorldGen.desertBG = style;
				switch (style)
				{
				case 1:
					Main.desertBG[0] = 108;
					Main.desertBG[1] = 109;
					Main.desertBG[2] = -1;
					return;
				case 2:
					Main.desertBG[0] = 207;
					Main.desertBG[1] = 208;
					Main.desertBG[2] = -1;
					return;
				case 3:
					Main.desertBG[0] = 217;
					Main.desertBG[1] = 218;
					Main.desertBG[2] = -1;
					return;
				case 4:
					Main.desertBG[0] = 248;
					Main.desertBG[1] = 249;
					Main.desertBG[2] = 250;
					return;
				default:
					Main.desertBG[0] = 21;
					Main.desertBG[1] = 20;
					Main.desertBG[2] = -1;
					return;
				}
				break;
			case 7:
				WorldGen.oceanBG = style;
				switch (style)
				{
				case 1:
					Main.oceanBG = 110;
					return;
				case 2:
					Main.oceanBG = 111;
					return;
				case 3:
					Main.oceanBG = 209;
					return;
				case 4:
					Main.oceanBG = 210;
					return;
				case 5:
					Main.oceanBG = 283;
					return;
				default:
					Main.oceanBG = 28;
					return;
				}
				break;
			case 8:
				WorldGen.mushroomBG = style;
				switch (style)
				{
				case 1:
					Main.mushroomBG[0] = 231;
					Main.mushroomBG[1] = 232;
					Main.mushroomBG[2] = 233;
					return;
				case 2:
					Main.mushroomBG[0] = 234;
					Main.mushroomBG[1] = 235;
					Main.mushroomBG[2] = 236;
					return;
				case 3:
					Main.mushroomBG[0] = 287;
					Main.mushroomBG[1] = 288;
					Main.mushroomBG[2] = 289;
					return;
				default:
					Main.mushroomBG[0] = 46;
					Main.mushroomBG[1] = 47;
					Main.mushroomBG[2] = 48;
					return;
				}
				break;
			case 9:
				WorldGen.underworldBG = style;
				if (style == 1)
				{
					Main.underworldBG[0] = 5;
					Main.underworldBG[1] = 6;
					Main.underworldBG[2] = 7;
					Main.underworldBG[3] = 8;
					Main.underworldBG[4] = 9;
					return;
				}
				if (style != 2)
				{
					Main.underworldBG[0] = 0;
					Main.underworldBG[1] = 1;
					Main.underworldBG[2] = 2;
					Main.underworldBG[3] = 3;
					Main.underworldBG[4] = 4;
					return;
				}
				Main.underworldBG[0] = 10;
				Main.underworldBG[1] = 11;
				Main.underworldBG[2] = 12;
				Main.underworldBG[3] = 13;
				Main.underworldBG[4] = 9;
				return;
			case 10:
				WorldGen.treeBG2 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet2, Main.treeBGSet2);
				return;
			case 11:
				WorldGen.treeBG3 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet3, Main.treeBGSet3);
				return;
			case 12:
				WorldGen.treeBG4 = style;
				WorldGen.SetForestBGSet(style, Main.treeMntBGSet4, Main.treeBGSet4);
				return;
			default:
				return;
			}
		}

		// Token: 0x06001161 RID: 4449 RVA: 0x004121A4 File Offset: 0x004103A4
		private static void SetForestBGSet(int style, int[] mountainSet, int[] treeSet)
		{
			mountainSet[0] = 7;
			mountainSet[1] = 8;
			if (style <= 31)
			{
				switch (style)
				{
				case 1:
					treeSet[0] = 50;
					treeSet[1] = 51;
					treeSet[2] = 52;
					return;
				case 2:
					treeSet[0] = 53;
					treeSet[1] = 54;
					treeSet[2] = 55;
					return;
				case 3:
					mountainSet[1] = 90;
					treeSet[0] = 91;
					treeSet[1] = -1;
					treeSet[2] = 92;
					return;
				case 4:
					mountainSet[0] = 93;
					mountainSet[1] = 94;
					treeSet[0] = -1;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				case 5:
					mountainSet[0] = 93;
					mountainSet[1] = 94;
					treeSet[0] = -1;
					treeSet[1] = -1;
					treeSet[2] = 55;
					return;
				case 6:
					mountainSet[0] = 171;
					mountainSet[1] = 172;
					treeSet[0] = 173;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				case 7:
					mountainSet[0] = 176;
					mountainSet[1] = 177;
					treeSet[0] = 178;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				case 8:
					mountainSet[0] = 179;
					mountainSet[1] = 180;
					treeSet[0] = 184;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				case 9:
					mountainSet[0] = 277;
					mountainSet[1] = 278;
					treeSet[0] = 279;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				case 10:
					mountainSet[0] = 280;
					mountainSet[1] = 281;
					treeSet[0] = 282;
					treeSet[1] = -1;
					treeSet[2] = -1;
					return;
				default:
					if (style == 31)
					{
						mountainSet[1] = 90;
						treeSet[0] = 91;
						treeSet[1] = -1;
						treeSet[2] = 11;
						return;
					}
					break;
				}
			}
			else
			{
				if (style == 51)
				{
					mountainSet[0] = 93;
					mountainSet[1] = 94;
					treeSet[0] = -1;
					treeSet[1] = -1;
					treeSet[2] = 11;
					return;
				}
				switch (style)
				{
				case 71:
					mountainSet[0] = 176;
					mountainSet[1] = 177;
					treeSet[0] = 178;
					treeSet[1] = -1;
					treeSet[2] = 11;
					return;
				case 72:
					mountainSet[0] = 176;
					mountainSet[1] = 177;
					treeSet[0] = 178;
					treeSet[1] = -1;
					treeSet[2] = 52;
					return;
				case 73:
					mountainSet[0] = 176;
					mountainSet[1] = 177;
					treeSet[0] = 178;
					treeSet[1] = -1;
					treeSet[2] = 55;
					return;
				}
			}
			treeSet[0] = 9;
			treeSet[1] = 10;
			treeSet[2] = 11;
		}

		// Token: 0x06001162 RID: 4450 RVA: 0x004123C4 File Offset: 0x004105C4
		public static void RandomizeWeather()
		{
			Main.numClouds = WorldGen.genRand.Next(10, 200);
			Main.windSpeedCurrent = 0f;
			while (Main.windSpeedCurrent == 0f)
			{
				Main.windSpeedCurrent = (float)WorldGen.genRand.Next(-400, 401) * 0.001f;
				Main.windSpeedTarget = Main.windSpeedCurrent;
			}
			Cloud.resetClouds();
		}

		// Token: 0x06001163 RID: 4451 RVA: 0x00412430 File Offset: 0x00410630
		public static void RandomizeMoonState(UnifiedRandom random, bool garenteeNewStyle = false)
		{
			int moonType = Main.moonType;
			do
			{
				Main.moonType = random.Next(9);
			}
			while (garenteeNewStyle && moonType == Main.moonType);
		}

		// Token: 0x06001164 RID: 4452 RVA: 0x0041245C File Offset: 0x0041065C
		public static void RandomizeBackgroundBasedOnPlayer(UnifiedRandom random, Player player)
		{
			if (player.ZoneGlowshroom)
			{
				int num = WorldGen.mushroomBG;
				while (num == WorldGen.mushroomBG)
				{
					WorldGen.setBG(8, random.Next(4));
				}
			}
			else if (player.ZoneUnderworldHeight)
			{
				int num2 = WorldGen.underworldBG;
				while (num2 == WorldGen.underworldBG)
				{
					WorldGen.setBG(9, random.Next(3));
				}
			}
			else if (player.ZoneDesert)
			{
				int num3 = WorldGen.desertBG;
				while (num3 == WorldGen.desertBG)
				{
					WorldGen.setBG(6, random.Next(5));
				}
			}
			else if (player.ZoneHallow)
			{
				int num4 = WorldGen.hallowBG;
				while (num4 == WorldGen.hallowBG)
				{
					WorldGen.setBG(4, random.Next(5));
				}
			}
			else if (player.ZoneCorrupt)
			{
				int num5 = WorldGen.corruptBG;
				while (num5 == WorldGen.corruptBG)
				{
					WorldGen.setBG(1, random.Next(5));
				}
			}
			else if (player.ZoneCrimson)
			{
				int num6 = WorldGen.crimsonBG;
				while (num6 == WorldGen.crimsonBG)
				{
					WorldGen.setBG(5, random.Next(6));
				}
			}
			else if (player.ZoneJungle)
			{
				int num7 = WorldGen.jungleBG;
				while (num7 == WorldGen.jungleBG)
				{
					WorldGen.setBG(2, random.Next(6));
				}
			}
			else if (player.ZoneSnow)
			{
				int num8 = WorldGen.snowBG;
				while (num8 == WorldGen.snowBG)
				{
					WorldGen.snowBG = random.Next(8);
					if (WorldGen.snowBG == 2 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 21;
						}
						else
						{
							WorldGen.snowBG = 22;
						}
					}
					if (WorldGen.snowBG == 3 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 31;
						}
						else
						{
							WorldGen.snowBG = 32;
						}
					}
					if (WorldGen.snowBG == 4 && random.Next(2) == 0)
					{
						if (random.Next(2) == 0)
						{
							WorldGen.snowBG = 41;
						}
						else
						{
							WorldGen.snowBG = 42;
						}
					}
					WorldGen.setBG(3, WorldGen.snowBG);
				}
			}
			else if (player.ZoneBeach)
			{
				int num9 = WorldGen.oceanBG;
				while (num9 == WorldGen.oceanBG)
				{
					WorldGen.setBG(7, random.Next(6));
				}
			}
			else
			{
				int num10 = (int)(player.Center.X / 16f);
				if (num10 < Main.treeX[0])
				{
					int num11 = WorldGen.treeBG1;
					while (WorldGen.IsBackgroundConsideredTheSame(num11, WorldGen.treeBG1))
					{
						WorldGen.treeBG1 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(0, WorldGen.treeBG1);
				}
				else if (num10 < Main.treeX[1])
				{
					int num12 = WorldGen.treeBG2;
					while (WorldGen.IsBackgroundConsideredTheSame(num12, WorldGen.treeBG2))
					{
						WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(10, WorldGen.treeBG2);
				}
				else if (num10 < Main.treeX[2])
				{
					int num13 = WorldGen.treeBG3;
					while (WorldGen.IsBackgroundConsideredTheSame(num13, WorldGen.treeBG3))
					{
						WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(11, WorldGen.treeBG3);
				}
				else
				{
					int num14 = WorldGen.treeBG4;
					while (WorldGen.IsBackgroundConsideredTheSame(num14, WorldGen.treeBG4))
					{
						WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
					}
					WorldGen.setBG(12, WorldGen.treeBG4);
				}
			}
			WorldGen.BackgroundsCache.UpdateCache();
		}

		// Token: 0x06001165 RID: 4453 RVA: 0x00412780 File Offset: 0x00410980
		public static void RandomizeBackgrounds(UnifiedRandom random)
		{
			WorldGen.treeBG1 = WorldGen.RollRandomForestBGStyle(random);
			WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG2 == WorldGen.treeBG1)
			{
				WorldGen.treeBG2 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG3 == WorldGen.treeBG1 || WorldGen.treeBG3 == WorldGen.treeBG2)
			{
				WorldGen.treeBG3 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
			while (WorldGen.treeBG4 == WorldGen.treeBG1 || WorldGen.treeBG4 == WorldGen.treeBG2 || WorldGen.treeBG4 == WorldGen.treeBG3)
			{
				WorldGen.treeBG4 = WorldGen.RollRandomForestBGStyle(random);
			}
			WorldGen.setBG(0, WorldGen.treeBG1);
			WorldGen.setBG(10, WorldGen.treeBG2);
			WorldGen.setBG(11, WorldGen.treeBG3);
			WorldGen.setBG(12, WorldGen.treeBG4);
			WorldGen.setBG(1, random.Next(5));
			WorldGen.setBG(2, random.Next(6));
			WorldGen.snowBG = random.Next(8);
			if (WorldGen.snowBG == 2 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 21;
				}
				else
				{
					WorldGen.snowBG = 22;
				}
			}
			if (WorldGen.snowBG == 3 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 31;
				}
				else
				{
					WorldGen.snowBG = 32;
				}
			}
			if (WorldGen.snowBG == 4 && random.Next(2) == 0)
			{
				if (random.Next(2) == 0)
				{
					WorldGen.snowBG = 41;
				}
				else
				{
					WorldGen.snowBG = 42;
				}
			}
			WorldGen.setBG(3, WorldGen.snowBG);
			WorldGen.setBG(4, random.Next(5));
			WorldGen.setBG(5, random.Next(6));
			WorldGen.setBG(6, random.Next(5));
			WorldGen.setBG(7, random.Next(6));
			WorldGen.setBG(8, random.Next(4));
			WorldGen.setBG(9, random.Next(3));
		}

		// Token: 0x06001166 RID: 4454 RVA: 0x00412958 File Offset: 0x00410B58
		private static int RollRandomForestBGStyle(UnifiedRandom random)
		{
			int num = random.Next(11);
			if ((num == 1 || num == 2) && random.Next(2) == 0)
			{
				num = random.Next(11);
			}
			if (num == 0)
			{
				num = random.Next(11);
			}
			if (num == 3 && random.Next(3) == 0)
			{
				num = 31;
			}
			if (num == 5 && random.Next(2) == 0)
			{
				num = 51;
			}
			if (num == 7 && random.Next(4) == 0)
			{
				num = random.Next(71, 74);
			}
			return num;
		}

		// Token: 0x06001167 RID: 4455 RVA: 0x004129D0 File Offset: 0x00410BD0
		public static bool IsBackgroundConsideredTheSame(int oldBG, int newBG)
		{
			if (oldBG <= 31)
			{
				switch (oldBG)
				{
				case 3:
					break;
				case 4:
				case 6:
					goto IL_64;
				case 5:
					goto IL_42;
				case 7:
					goto IL_4E;
				default:
					if (oldBG != 31)
					{
						goto IL_64;
					}
					break;
				}
				return newBG == 3 || newBG == 31;
			}
			if (oldBG != 51)
			{
				if (oldBG - 71 > 2)
				{
					goto IL_64;
				}
				goto IL_4E;
			}
			IL_42:
			return newBG == 5 || newBG == 51;
			IL_4E:
			return newBG == 7 || (newBG >= 71 && newBG <= 73);
			IL_64:
			return oldBG == newBG;
		}

		// Token: 0x06001168 RID: 4456 RVA: 0x00412A48 File Offset: 0x00410C48
		public static void RandomizeTreeStyle()
		{
			if (Main.maxTilesX == 4200)
			{
				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.25));
				Main.treeStyle[0] = WorldGen.genRand.Next(6);
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
				while (Main.treeStyle[1] == Main.treeStyle[0])
				{
					Main.treeStyle[1] = WorldGen.genRand.Next(6);
				}
				Main.treeX[1] = Main.maxTilesX;
				Main.treeX[2] = Main.maxTilesX;
				for (int i = 0; i < 2; i++)
				{
					if (Main.treeStyle[i] == 0 && WorldGen.genRand.Next(3) != 0)
					{
						Main.treeStyle[i] = 4;
					}
				}
				return;
			}
			if (Main.maxTilesX == 6400)
			{
				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.334 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.334 + (double)Main.maxTilesX * 0.2));
				Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.667 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.667 + (double)Main.maxTilesX * 0.2));
				Main.treeStyle[0] = WorldGen.genRand.Next(6);
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
				Main.treeStyle[2] = WorldGen.genRand.Next(6);
				while (Main.treeStyle[1] == Main.treeStyle[0])
				{
					Main.treeStyle[1] = WorldGen.genRand.Next(6);
				}
				while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
				{
					Main.treeStyle[2] = WorldGen.genRand.Next(6);
				}
				Main.treeX[2] = Main.maxTilesX;
				for (int j = 0; j < 3; j++)
				{
					if (Main.treeStyle[j] == 0 && WorldGen.genRand.Next(3) != 0)
					{
						Main.treeStyle[j] = 4;
					}
				}
				return;
			}
			Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.25 + (double)Main.maxTilesX * 0.15));
			Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.15));
			Main.treeX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.75 + (double)Main.maxTilesX * 0.15));
			Main.treeStyle[0] = WorldGen.genRand.Next(6);
			Main.treeStyle[1] = WorldGen.genRand.Next(6);
			Main.treeStyle[2] = WorldGen.genRand.Next(6);
			Main.treeStyle[3] = WorldGen.genRand.Next(6);
			while (Main.treeStyle[1] == Main.treeStyle[0])
			{
				Main.treeStyle[1] = WorldGen.genRand.Next(6);
			}
			while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
			{
				Main.treeStyle[2] = WorldGen.genRand.Next(6);
			}
			while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2])
			{
				Main.treeStyle[3] = WorldGen.genRand.Next(6);
			}
			for (int k = 0; k < 4; k++)
			{
				if (Main.treeStyle[k] == 0 && WorldGen.genRand.Next(3) != 0)
				{
					Main.treeStyle[k] = 4;
				}
			}
		}

		// Token: 0x06001169 RID: 4457 RVA: 0x00412ED0 File Offset: 0x004110D0
		public static void RandomizeCaveBackgrounds()
		{
			int maxValue = 8;
			if (Main.maxTilesX == 4200)
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.25));
				Main.caveBackX[1] = Main.maxTilesX;
				Main.caveBackX[2] = Main.maxTilesX;
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
			}
			else if (Main.maxTilesX == 6400)
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.334 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.334 + (double)Main.maxTilesX * 0.2));
				Main.caveBackX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.667 - (double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.667 + (double)Main.maxTilesX * 0.2));
				Main.caveBackX[2] = Main.maxTilesX;
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
				{
					Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				}
			}
			else
			{
				Main.caveBackX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.25 + (double)Main.maxTilesX * 0.15));
				Main.caveBackX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.5 + (double)Main.maxTilesX * 0.15));
				Main.caveBackX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.75 + (double)Main.maxTilesX * 0.15));
				Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
				while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
				{
					Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
				{
					Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
				}
				while (Main.caveBackStyle[3] == Main.caveBackStyle[0] || Main.caveBackStyle[3] == Main.caveBackStyle[1] || Main.caveBackStyle[3] == Main.caveBackStyle[2])
				{
					Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
				}
			}
			Main.iceBackStyle = WorldGen.genRand.Next(4);
			Main.hellBackStyle = WorldGen.genRand.Next(3);
			Main.jungleBackStyle = WorldGen.genRand.Next(2);
		}

		// Token: 0x0600116A RID: 4458 RVA: 0x00413314 File Offset: 0x00411514
		private static void ResetGenerator()
		{
			GenVars.numOrePatch = 0;
			GenVars.numTunnels = 0;
			GenVars.numLakes = 0;
			GenVars.numMushroomBiomes = 0;
			GenVars.numOceanCaveTreasure = 0;
			GenVars.numOasis = 0;
			GenVars.mudWall = false;
			GenVars.hellChest = 0;
			GenVars.JungleX = 0;
			GenVars.numMCaves = 0;
			GenVars.numIslandHouses = 0;
			GenVars.skyIslandHouseCount = 0;
			GenVars.dEnteranceX = 0;
			GenVars.numDRooms = 0;
			GenVars.numDDoors = 0;
			GenVars.generatedShadowKey = false;
			GenVars.numDungeonPlatforms = 0;
			GenVars.numJChests = 0;
			GenVars.JungleItemCount = 0;
			GenVars.lastDungeonHall = Vector2D.Zero;
		}

		// Token: 0x0600116B RID: 4459 RVA: 0x004133A0 File Offset: 0x004115A0
		public unsafe static bool mayanTrap(int x2, int y2)
		{
			int num = 1;
			if (WorldGen.genRand.Next(3) == 0)
			{
				num = 0;
			}
			int num2 = y2;
			while (!WorldGen.SolidOrSlopedTile(x2, num2))
			{
				num2++;
				if (num2 >= Main.maxTilesY - 300)
				{
					return false;
				}
			}
			if (*Main.tile[x2, num2].type == 232 || *Main.tile[x2, num2].type == 10)
			{
				return false;
			}
			num2--;
			if (*Main.tile[x2, num2].liquid > 0 && Main.tile[x2, num2].lava())
			{
				return false;
			}
			if (num == -1 && WorldGen.genRand.Next(20) == 0)
			{
				num = 2;
			}
			else if (num == -1)
			{
				num = WorldGen.genRand.Next(2);
			}
			if (Main.tile[x2, num2].nactive() || Main.tile[x2 - 1, num2].nactive() || Main.tile[x2 + 1, num2].nactive() || Main.tile[x2, num2 - 1].nactive() || Main.tile[x2 - 1, num2 - 1].nactive() || Main.tile[x2 + 1, num2 - 1].nactive() || Main.tile[x2, num2 - 2].nactive() || Main.tile[x2 - 1, num2 - 2].nactive() || Main.tile[x2 + 1, num2 - 2].nactive())
			{
				return false;
			}
			if (*Main.tile[x2, num2 + 1].type == 10)
			{
				return false;
			}
			if (*Main.tile[x2, num2 + 1].type == 48)
			{
				return false;
			}
			if (*Main.tile[x2, num2 + 1].type == 232)
			{
				return false;
			}
			if (num != 0)
			{
				if (num != 1)
				{
					return false;
				}
				int num3 = num2;
				while (!WorldGen.SolidOrSlopedTile(x2, num3))
				{
					num3--;
					if ((double)num3 < Main.worldSurface)
					{
						return false;
					}
				}
				int num4 = Math.Abs(num3 - num2);
				if (num4 < 3)
				{
					return false;
				}
				int num5 = WorldGen.genRand.Next(3);
				if (Main.tile[x2, num2].wire())
				{
					num5 = 0;
				}
				if (Main.tile[x2, num2].wire2())
				{
					num5 = 1;
				}
				if (Main.tile[x2, num2].wire3())
				{
					num5 = 2;
				}
				int style = 3;
				if (num4 < 16 && WorldGen.genRand.Next(3) != 0)
				{
					style = 4;
				}
				if (*Main.tile[x2, num3].type == 135)
				{
					return false;
				}
				if (*Main.tile[x2, num3].type == 137)
				{
					return false;
				}
				if (*Main.tile[x2, num3].type == 232)
				{
					return false;
				}
				if (*Main.tile[x2, num3].type == 237)
				{
					return false;
				}
				if (*Main.tile[x2, num3].type == 10)
				{
					return false;
				}
				if (*Main.tile[x2, num3].wall != 87)
				{
					return false;
				}
				WorldGen.PlaceTile(x2, num2, 135, true, true, -1, 6);
				WorldGen.PlaceTile(x2, num3, 137, true, true, -1, style);
				for (int i = 0; i < 2; i++)
				{
					int num6 = WorldGen.genRand.Next(1, 5);
					int num7 = x2;
					int num8 = -1;
					if (i == 1)
					{
						num8 = 1;
					}
					while (num6 > 0)
					{
						num6--;
						num7 += num8;
						if (!WorldGen.SolidTile(num7, num3 - 1, false) || WorldGen.SolidOrSlopedTile(num7, num3 + 1))
						{
							break;
						}
						WorldGen.PlaceTile(num7, num3, 137, true, true, -1, style);
						switch (num5)
						{
						case 0:
							Main.tile[num7, num3].wire(true);
							break;
						case 1:
							Main.tile[num7, num3].wire2(true);
							break;
						case 2:
							Main.tile[num7, num3].wire3(true);
							break;
						}
					}
				}
				int num9 = x2;
				int num10 = num2;
				while (num9 != x2 || num10 != num3)
				{
					switch (num5)
					{
					case 0:
						Main.tile[num9, num10].wire(true);
						break;
					case 1:
						Main.tile[num9, num10].wire2(true);
						break;
					case 2:
						Main.tile[num9, num10].wire3(true);
						break;
					}
					if (num9 > x2)
					{
						num9--;
					}
					if (num9 < x2)
					{
						num9++;
					}
					switch (num5)
					{
					case 0:
						Main.tile[num9, num10].wire(true);
						break;
					case 1:
						Main.tile[num9, num10].wire2(true);
						break;
					case 2:
						Main.tile[num9, num10].wire3(true);
						break;
					}
					if (num10 > num3)
					{
						num10--;
					}
					if (num10 < num3)
					{
						num10++;
					}
					switch (num5)
					{
					case 0:
						Main.tile[num9, num10].wire(true);
						break;
					case 1:
						Main.tile[num9, num10].wire2(true);
						break;
					case 2:
						Main.tile[num9, num10].wire3(true);
						break;
					}
				}
				return true;
			}
			else
			{
				int num11 = x2;
				int num12 = num2;
				num12 -= WorldGen.genRand.Next(3);
				while (WorldGen.InWorld(num11, num12, 5) && !WorldGen.SolidOrSlopedTile(num11, num12))
				{
					num11--;
				}
				int num13 = num11;
				num11 = x2;
				while (WorldGen.InWorld(num11, num12, 5) && !WorldGen.SolidOrSlopedTile(num11, num12))
				{
					num11++;
				}
				int num14 = num11;
				int num15 = x2 - num13;
				int num16 = num14 - x2;
				bool flag = false;
				bool flag2 = false;
				if (num15 > 5 && num15 < 50)
				{
					flag = true;
				}
				if (num16 > 5 && num16 < 50)
				{
					flag2 = true;
				}
				if (flag && !WorldGen.SolidOrSlopedTile(num13, num12 + 1))
				{
					flag = false;
				}
				if (flag2 && !WorldGen.SolidOrSlopedTile(num14, num12 + 1))
				{
					flag2 = false;
				}
				if (flag && (*Main.tile[num13, num12].type == 10 || *Main.tile[num13, num12].type == 48 || *Main.tile[num13, num12 + 1].type == 10 || *Main.tile[num13, num12 + 1].type == 48))
				{
					flag = false;
				}
				if (flag2 && (*Main.tile[num14, num12].type == 10 || *Main.tile[num14, num12].type == 48 || *Main.tile[num14, num12 + 1].type == 10 || *Main.tile[num14, num12 + 1].type == 48))
				{
					flag2 = false;
				}
				int num17;
				if (flag && flag2)
				{
					num17 = 1;
					num11 = num13;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num11 = num14;
						num17 = -1;
					}
				}
				else if (flag2)
				{
					num11 = num14;
					num17 = -1;
				}
				else
				{
					if (!flag)
					{
						return false;
					}
					num11 = num13;
					num17 = 1;
				}
				if (*Main.tile[num11, num12].wall != 87)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 190)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 135)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 137)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 232)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 237)
				{
					return false;
				}
				if (*Main.tile[num11, num12].type == 10)
				{
					return false;
				}
				WorldGen.PlaceTile(x2, num2, 135, true, true, -1, 6);
				WorldGen.KillTile(num11, num12, false, false, false);
				int num18 = WorldGen.genRand.Next(3);
				if (Main.tile[x2, num2].wire())
				{
					num18 = 0;
				}
				if (Main.tile[x2, num2].wire2())
				{
					num18 = 1;
				}
				if (Main.tile[x2, num2].wire3())
				{
					num18 = 2;
				}
				int num23 = Math.Abs(num11 - x2);
				int style2 = 1;
				if (num23 < 10 && WorldGen.genRand.Next(3) != 0)
				{
					style2 = 2;
				}
				WorldGen.PlaceTile(num11, num12, 137, true, true, -1, style2);
				if (num17 == 1)
				{
					ref short frameX = ref Main.tile[num11, num12].frameX;
					frameX += 18;
				}
				int num19 = WorldGen.genRand.Next(5);
				int num20 = num12;
				while (num19 > 0)
				{
					num19--;
					num20--;
					if (!WorldGen.SolidTile(num11, num20, false) || !WorldGen.SolidTile(num11 - num17, num20, false) || WorldGen.SolidOrSlopedTile(num11 + num17, num20))
					{
						break;
					}
					WorldGen.PlaceTile(num11, num20, 137, true, true, -1, style2);
					if (num17 == 1)
					{
						ref short frameX2 = ref Main.tile[num11, num20].frameX;
						frameX2 += 18;
					}
					switch (num18)
					{
					case 0:
						Main.tile[num11, num20].wire(true);
						break;
					case 1:
						Main.tile[num11, num20].wire2(true);
						break;
					case 2:
						Main.tile[num11, num20].wire3(true);
						break;
					}
				}
				int num21 = x2;
				int num22 = num2;
				while (num21 != num11 || num22 != num12)
				{
					switch (num18)
					{
					case 0:
						Main.tile[num21, num22].wire(true);
						break;
					case 1:
						Main.tile[num21, num22].wire2(true);
						break;
					case 2:
						Main.tile[num21, num22].wire3(true);
						break;
					}
					if (num21 > num11)
					{
						num21--;
					}
					if (num21 < num11)
					{
						num21++;
					}
					switch (num18)
					{
					case 0:
						Main.tile[num21, num22].wire(true);
						break;
					case 1:
						Main.tile[num21, num22].wire2(true);
						break;
					case 2:
						Main.tile[num21, num22].wire3(true);
						break;
					}
					if (num22 > num12)
					{
						num22--;
					}
					if (num22 < num12)
					{
						num22++;
					}
					switch (num18)
					{
					case 0:
						Main.tile[num21, num22].wire(true);
						break;
					case 1:
						Main.tile[num21, num22].wire2(true);
						break;
					case 2:
						Main.tile[num21, num22].wire3(true);
						break;
					}
				}
				return true;
			}
		}

		// Token: 0x0600116C RID: 4460 RVA: 0x00413F54 File Offset: 0x00412154
		public unsafe static bool placeLavaTrap(int x, int y)
		{
			int num = 5;
			int num2 = 50;
			int num3 = 40;
			int num4 = 20;
			int num5 = 4;
			if (Main.tile[x, y].active() || *Main.tile[x, y].liquid < 255 || !Main.tile[x, y].lava())
			{
				return false;
			}
			int num6 = 0;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (Main.tile[i, j].lava() && !Main.tile[i, j].active() && *Main.tile[i, j].liquid == 255)
					{
						num6++;
					}
				}
			}
			if (num6 < num2)
			{
				return false;
			}
			int num7 = y;
			while (!Main.tile[x, num7].active())
			{
				num7++;
				if (num7 > Main.maxTilesY - 200)
				{
					return false;
				}
			}
			if (!Main.tileSolid[(int)(*Main.tile[x, num7].type)] || Main.tileSolidTop[(int)(*Main.tile[x, num7].type)])
			{
				return false;
			}
			int num8 = num7;
			for (int k = x - num4; k <= x + num4; k++)
			{
				for (int l = num7 - num4; l <= num7 + num4; l++)
				{
					if (Main.tile[k, l].wire())
					{
						return false;
					}
				}
			}
			while (Main.tile[x, num7].active() && Main.tileSolid[(int)(*Main.tile[x, num7].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, num7].type)])
			{
				num7++;
				if (num7 > Main.maxTilesY - 200)
				{
					return false;
				}
			}
			Tile tile = Main.tile[x, num7 - 1];
			if (Main.tileDungeon[(int)(*tile.type)] || *tile.type == 225 || *tile.type == 226)
			{
				return false;
			}
			int num9 = num7;
			while (!Main.tile[x, num7].active())
			{
				num7++;
				if (num7 > Main.maxTilesY - 200 || *Main.tile[x, num7].liquid > 0)
				{
					return false;
				}
			}
			if (!Main.tileSolid[(int)(*Main.tile[x, num7].type)] || Main.tileSolidTop[(int)(*Main.tile[x, num7].type)] || *Main.tile[x, num7].type == 162)
			{
				return false;
			}
			int num10 = num7 - 1;
			if (num10 - num8 > num3)
			{
				return false;
			}
			if (num10 - num9 < num5)
			{
				return false;
			}
			Main.tile[x, num7].slope(0);
			Main.tile[x, num7].halfBrick(false);
			WorldGen.PlaceTile(x, num10, 135, false, true, -1, 7);
			for (int m = num8; m <= num10; m++)
			{
				Main.tile[x, m].wire(true);
				if (m < num9)
				{
					Main.tile[x, m].slope(0);
					Main.tile[x, m].halfBrick(false);
					Main.tile[x, m].actuator(true);
				}
			}
			return true;
		}

		// Token: 0x0600116D RID: 4461 RVA: 0x00414330 File Offset: 0x00412530
		public unsafe static bool IsTileNearby(int x, int y, int type, int distance)
		{
			for (int i = x - distance; i <= x + distance; i++)
			{
				for (int j = y - distance; j <= y + distance; j++)
				{
					if (WorldGen.InWorld(i, j, 0) && Main.tile[i, j].active() && (int)(*Main.tile[i, j].type) == type)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x0600116E RID: 4462 RVA: 0x00414398 File Offset: 0x00412598
		private static bool placeTNTBarrel(int x, int y)
		{
			int num = y;
			while (!Main.tile[x, num].active())
			{
				num++;
				if (num > Main.maxTilesY - 350)
				{
					return false;
				}
			}
			num--;
			return !Main.tile[x, num].shimmer() && WorldGen.PlaceTile(x, num, 654, false, false, -1, 0);
		}

		// Token: 0x0600116F RID: 4463 RVA: 0x00414404 File Offset: 0x00412604
		public unsafe static bool placeTrap(int x2, int y2, int type = -1)
		{
			int num = y2;
			if (Vector2D.Distance(new Vector2D((double)x2, (double)y2), GenVars.shimmerPosition) < 100.0)
			{
				return false;
			}
			bool flag = false;
			bool flag2 = false;
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = false;
			}
			while (!WorldGen.SolidTile(x2, num, false))
			{
				num++;
				if (num > Main.maxTilesY - 10)
				{
					return false;
				}
				if (num >= Main.maxTilesY - 300)
				{
					flag2 = true;
				}
			}
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = true;
			}
			num--;
			if (!WorldGen.noTrapsWorldGen && WorldGen.IsTileNearby(x2, num, 70, 20))
			{
				return false;
			}
			if (*Main.tile[x2, num].wall == 87)
			{
				return false;
			}
			if (*Main.tile[x2, num].liquid > 0 && Main.tile[x2, num].lava())
			{
				flag = true;
			}
			if (Main.remixWorld)
			{
				if (type == -1 && WorldGen.genRand.Next(20) == 0)
				{
					type = 2;
				}
				else if (type == -1 && (double)num < Main.rockLayer - 30.0 && WorldGen.genRand.Next(3) != 0)
				{
					type = 3;
				}
				else if (type == -1)
				{
					type = WorldGen.genRand.Next(2);
				}
			}
			else if (type == -1 && WorldGen.genRand.Next(20) == 0)
			{
				type = 2;
			}
			else if (type == -1 && num > GenVars.lavaLine + 30 && WorldGen.genRand.Next(6) != 0)
			{
				type = 3;
			}
			else if (type == -1)
			{
				type = WorldGen.genRand.Next(2);
			}
			if (!WorldGen.InWorld(x2, num, 3))
			{
				return false;
			}
			if (flag && type != 3)
			{
				return false;
			}
			if (flag2 && type != 3)
			{
				return false;
			}
			if (Main.tile[x2, num].nactive() || Main.tile[x2 - 1, num].nactive() || Main.tile[x2 + 1, num].nactive() || Main.tile[x2, num - 1].nactive() || Main.tile[x2 - 1, num - 1].nactive() || Main.tile[x2 + 1, num - 1].nactive() || Main.tile[x2, num - 2].nactive() || Main.tile[x2 - 1, num - 2].nactive() || Main.tile[x2 + 1, num - 2].nactive())
			{
				return false;
			}
			if (*Main.tile[x2, num + 1].type == 48)
			{
				return false;
			}
			if (*Main.tile[x2, num + 1].type == 232)
			{
				return false;
			}
			if (type == 1)
			{
				for (int i = x2 - 3; i <= x2 + 3; i++)
				{
					for (int j = num - 3; j <= num + 3; j++)
					{
						if (*Main.tile[i, j].type == 147 || *Main.tile[i, j].type == 161)
						{
							type = 0;
						}
					}
				}
			}
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = false;
			}
			switch (type)
			{
			case 0:
			{
				int num2 = x2;
				int num3 = num;
				num3 -= WorldGen.genRand.Next(3);
				while (!WorldGen.SolidTile(num2, num3, false) && !Main.tileCracked[(int)(*Main.tile[num2, num3].type)])
				{
					num2--;
					if (num2 < 0)
					{
						return false;
					}
				}
				int num4 = num2;
				num2 = x2;
				while (!WorldGen.SolidTile(num2, num3, false) && !Main.tileCracked[(int)(*Main.tile[num2, num3].type)])
				{
					num2++;
					if (num2 > Main.maxTilesX)
					{
						return false;
					}
				}
				int num5 = num2;
				int num6 = x2 - num4;
				int num7 = num5 - x2;
				bool flag3 = false;
				bool flag4 = false;
				if (num6 > 5 && num6 < 50)
				{
					flag3 = true;
				}
				if (num7 > 5 && num7 < 50)
				{
					flag4 = true;
				}
				if (flag3 && !WorldGen.SolidTile(num4, num3 + 1, false))
				{
					flag3 = false;
				}
				if (flag4 && !WorldGen.SolidTile(num5, num3 + 1, false))
				{
					flag4 = false;
				}
				if (flag3 && (*Main.tile[num4, num3].type == 10 || *Main.tile[num4, num3].type == 48 || *Main.tile[num4, num3 + 1].type == 10 || *Main.tile[num4, num3 + 1].type == 48))
				{
					flag3 = false;
				}
				if (flag4 && (*Main.tile[num5, num3].type == 10 || *Main.tile[num5, num3].type == 48 || *Main.tile[num5, num3 + 1].type == 10 || *Main.tile[num5, num3 + 1].type == 48))
				{
					flag4 = false;
				}
				int num8;
				if (flag3 && flag4)
				{
					num8 = 1;
					num2 = num4;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num2 = num5;
						num8 = -1;
					}
				}
				else if (flag4)
				{
					num2 = num5;
					num8 = -1;
				}
				else
				{
					if (!flag3)
					{
						WorldGen.trapDiag[type, 0]++;
						return false;
					}
					num2 = num4;
					num8 = 1;
				}
				if (*Main.tile[num2, num3].type == 190)
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				if (*Main.tile[x2, num].wall > 0)
				{
					WorldGen.PlaceTile(x2, num, 135, true, true, -1, 2);
				}
				else
				{
					WorldGen.PlaceTile(x2, num, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
				}
				WorldGen.KillTile(num2, num3, false, false, false);
				WorldGen.PlaceTile(num2, num3, 137, true, true, -1, 0);
				if (num8 == 1)
				{
					ref short frameX = ref Main.tile[num2, num3].frameX;
					frameX += 18;
				}
				int num9 = x2;
				int num10 = num;
				while (num9 != num2 || num10 != num3)
				{
					Main.tile[num9, num10].wire(true);
					if (num9 > num2)
					{
						num9--;
					}
					if (num9 < num2)
					{
						num9++;
					}
					Main.tile[num9, num10].wire(true);
					if (num10 > num3)
					{
						num10--;
					}
					if (num10 < num3)
					{
						num10++;
					}
					Main.tile[num9, num10].wire(true);
				}
				WorldGen.trapDiag[type, 1]++;
				return true;
			}
			case 1:
			{
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = true;
				}
				int num11 = num - 8;
				int num12 = x2 + WorldGen.genRand.Next(-1, 2);
				if (WorldGen.noTrapsWorldGen)
				{
					if (WorldGen.IsTileNearby(num12, num11, 138, 6))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num12, num11, 664, 6))
					{
						return false;
					}
				}
				else
				{
					if (WorldGen.IsTileNearby(num12, num11, 138, 10))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num12, num11, 664, 10))
					{
						return false;
					}
					if (WorldGen.IsTileNearby(num12, num11, 665, 10))
					{
						return false;
					}
				}
				bool flag5 = true;
				while (flag5)
				{
					bool flag6 = true;
					int num13 = 0;
					for (int k = num12 - 2; k <= num12 + 3; k++)
					{
						for (int l = num11; l <= num11 + 3; l++)
						{
							if (!WorldGen.SolidTile(k, l, false))
							{
								flag6 = false;
							}
							if (Main.tile[k, l].active())
							{
								if (*Main.tile[k, l].type == 226)
								{
									WorldGen.trapDiag[type, 0]++;
									return false;
								}
								if (*Main.tile[k, l].type == 0 || *Main.tile[k, l].type == 1 || *Main.tile[k, l].type == 59)
								{
									num13++;
								}
							}
						}
					}
					num11--;
					if ((double)num11 < Main.worldSurface)
					{
						WorldGen.trapDiag[type, 0]++;
						return false;
					}
					if (flag6 && num13 > 2)
					{
						flag5 = false;
					}
				}
				if (num - num11 <= 5 || num - num11 >= 40)
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				for (int num14 = num12; num14 <= num12 + 1; num14++)
				{
					for (int num15 = num11; num15 <= num; num15++)
					{
						WorldGen.KillTile(num14, num15, false, false, false);
					}
				}
				for (int num16 = num12 - 2; num16 <= num12 + 3; num16++)
				{
					for (int num17 = num11 - 2; num17 <= num11 + 3; num17++)
					{
						if (WorldGen.SolidTile(num16, num17, false))
						{
							*Main.tile[num16, num17].type = 1;
						}
					}
				}
				if (WorldGen.IsTileNearby(num12, num11, 21, 4) || WorldGen.IsTileNearby(num12, num11, 467, 4))
				{
					WorldGen.trapDiag[type, 0]++;
					return false;
				}
				WorldGen.PlaceTile(x2, num, 135, true, true, -1, 7);
				WorldGen.PlaceTile(num12, num11 + 2, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num12 + 1, num11 + 2, 130, true, false, -1, 0);
				if ((WorldGen.tenthAnniversaryWorldGen || WorldGen.noTrapsWorldGen) && WorldGen.genRand.Next(3) == 0)
				{
					WorldGen.PlaceTile(num12 + 1, num11 + 1, 664, true, false, -1, 0);
				}
				else
				{
					WorldGen.PlaceTile(num12 + 1, num11 + 1, 138, true, false, -1, 0);
				}
				num11 += 2;
				Main.tile[num12, num11].wire(true);
				Main.tile[num12 + 1, num11].wire(true);
				num11++;
				WorldGen.PlaceTile(num12, num11, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num12 + 1, num11, 130, true, false, -1, 0);
				Main.tile[num12, num11].wire(true);
				Main.tile[num12 + 1, num11].wire(true);
				WorldGen.PlaceTile(num12, num11 + 1, 130, true, false, -1, 0);
				WorldGen.PlaceTile(num12 + 1, num11 + 1, 130, true, false, -1, 0);
				Main.tile[num12, num11 + 1].wire(true);
				Main.tile[num12 + 1, num11 + 1].wire(true);
				int num18 = x2;
				int num19 = num;
				while (num18 != num12 || num19 != num11)
				{
					Main.tile[num18, num19].wire(true);
					if (num18 > num12)
					{
						num18--;
					}
					if (num18 < num12)
					{
						num18++;
					}
					Main.tile[num18, num19].wire(true);
					if (num19 > num11)
					{
						num19--;
					}
					if (num19 < num11)
					{
						num19++;
					}
					Main.tile[num18, num19].wire(true);
				}
				WorldGen.trapDiag[type, 1]++;
				return true;
			}
			case 2:
			{
				int num20 = WorldGen.genRand.Next(4, 7);
				int num21 = x2 + WorldGen.genRand.Next(-1, 2);
				int num22 = num;
				for (int num23 = 0; num23 < num20; num23++)
				{
					num22++;
					if (!WorldGen.SolidTile(num21, num22, false))
					{
						WorldGen.trapDiag[type, 0]++;
						return false;
					}
				}
				for (int num24 = num21 - 2; num24 <= num21 + 2; num24++)
				{
					for (int num25 = num22 - 2; num25 <= num22 + 2; num25++)
					{
						if (!WorldGen.SolidTile(num24, num25, false))
						{
							return false;
						}
					}
				}
				WorldGen.KillTile(num21, num22, false, false, false);
				Main.tile[num21, num22].active(true);
				*Main.tile[num21, num22].type = 141;
				*Main.tile[num21, num22].frameX = 0;
				*Main.tile[num21, num22].frameY = (short)(18 * WorldGen.genRand.Next(2));
				WorldGen.PlaceTile(x2, num, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
				int num26 = x2;
				int num27 = num;
				while (num26 != num21 || num27 != num22)
				{
					Main.tile[num26, num27].wire(true);
					if (num26 > num21)
					{
						num26--;
					}
					if (num26 < num21)
					{
						num26++;
					}
					Main.tile[num26, num27].wire(true);
					if (num27 > num22)
					{
						num27--;
					}
					if (num27 < num22)
					{
						num27++;
					}
					Main.tile[num26, num27].wire(true);
				}
				WorldGen.trapDiag[type, 1]++;
				break;
			}
			case 3:
			{
				if (Main.tile[x2 + 1, num].active())
				{
					return false;
				}
				if (*Main.tile[x2, num].liquid > 0 && !Main.tile[x2, num].lava())
				{
					return false;
				}
				if (WorldGen.noTrapsWorldGen && (WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees))
				{
					if (WorldGen.genRand.Next(3) != 0)
					{
						return false;
					}
					if (WorldGen.IsTileNearby(x2, num, 443, 30))
					{
						return false;
					}
				}
				for (int m = x2; m <= x2 + 1; m++)
				{
					int j2 = num + 1;
					if (!WorldGen.SolidTile(m, j2, false))
					{
						return false;
					}
				}
				int num28 = WorldGen.genRand.Next(2);
				for (int n = 0; n < 2; n++)
				{
					Main.tile[x2 + n, num].active(true);
					*Main.tile[x2 + n, num].type = 443;
					*Main.tile[x2 + n, num].frameX = (short)(18 * n + 36 * num28);
					*Main.tile[x2 + n, num].frameY = 0;
				}
				return true;
			}
			}
			if (WorldGen.noTrapsWorldGen)
			{
				Main.tileSolid[138] = true;
			}
			return false;
		}

		// Token: 0x06001170 RID: 4464 RVA: 0x004152C8 File Offset: 0x004134C8
		public static int countWires(int x, int y, int size)
		{
			int num = 0;
			for (int i = x - size; i <= x + size; i++)
			{
				for (int j = y - size; j <= y + size; j++)
				{
					if (WorldGen.InWorld(i, j, 0))
					{
						if (Main.tile[i, j].wire())
						{
							num++;
						}
						if (Main.tile[i, j].wire2())
						{
							num++;
						}
						if (Main.tile[i, j].wire3())
						{
							num++;
						}
						if (Main.tile[i, j].wire4())
						{
							num++;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06001171 RID: 4465 RVA: 0x00415370 File Offset: 0x00413570
		public static int countTiles(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			WorldGen.numTileCount = 0;
			WorldGen.shroomCount = 0;
			WorldGen.lavaCount = 0;
			WorldGen.iceCount = 0;
			WorldGen.sandCount = 0;
			WorldGen.rockCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.nextCount(x, y, jungle, lavaOk);
			return WorldGen.numTileCount;
		}

		// Token: 0x06001172 RID: 4466 RVA: 0x004153B0 File Offset: 0x004135B0
		public unsafe static void nextCount(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			if (WorldGen.numTileCount >= WorldGen.maxTileCount)
			{
				return;
			}
			if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (WorldGen.CountedTiles.ContainsKey(new Point(x, y)))
			{
				return;
			}
			if (*Main.tile[x, y].wall == 244)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (Main.tile[x, y].shimmer() && *Main.tile[x, y].liquid > 0)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (!jungle)
			{
				if (*Main.tile[x, y].wall != 0)
				{
					WorldGen.numTileCount = WorldGen.maxTileCount;
					return;
				}
				if (!lavaOk)
				{
					if (Main.tile[x, y].lava() && *Main.tile[x, y].liquid > 0)
					{
						WorldGen.lavaCount++;
						WorldGen.numTileCount = WorldGen.maxTileCount;
						return;
					}
				}
				else if (Main.tile[x, y].lava() && *Main.tile[x, y].liquid > 0)
				{
					WorldGen.lavaCount++;
				}
			}
			if (Main.tile[x, y].active())
			{
				if (*Main.tile[x, y].type == 70)
				{
					WorldGen.shroomCount++;
				}
				if (*Main.tile[x, y].type == 1)
				{
					WorldGen.rockCount++;
				}
				if (*Main.tile[x, y].type == 147 || *Main.tile[x, y].type == 161)
				{
					WorldGen.iceCount++;
				}
				if (*Main.tile[x, y].type == 53 || *Main.tile[x, y].type == 396 || *Main.tile[x, y].type == 397)
				{
					WorldGen.sandCount++;
				}
			}
			if (!WorldGen.SolidTile(x, y, false))
			{
				WorldGen.CountedTiles.Add(new Point(x, y), true);
				WorldGen.numTileCount++;
				WorldGen.nextCount(x - 1, y, jungle, lavaOk);
				WorldGen.nextCount(x + 1, y, jungle, lavaOk);
				WorldGen.nextCount(x, y - 1, jungle, lavaOk);
				WorldGen.nextCount(x, y + 1, jungle, lavaOk);
			}
		}

		// Token: 0x06001173 RID: 4467 RVA: 0x00415666 File Offset: 0x00413866
		public static int countDirtTiles(int x, int y)
		{
			WorldGen.numTileCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.nextDirtCount(x, y);
			return WorldGen.numTileCount;
		}

		// Token: 0x06001174 RID: 4468 RVA: 0x00415684 File Offset: 0x00413884
		public unsafe static void nextDirtCount(int x, int y)
		{
			if (WorldGen.numTileCount >= WorldGen.maxTileCount)
			{
				return;
			}
			if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
			{
				WorldGen.numTileCount = WorldGen.maxTileCount;
				return;
			}
			if (!WorldGen.CountedTiles.ContainsKey(new Point(x, y)))
			{
				if (Main.tile[x, y].active() && (*Main.tile[x, y].type == 147 || *Main.tile[x, y].type == 161))
				{
					WorldGen.numTileCount = WorldGen.maxTileCount;
					return;
				}
				if (*Main.tile[x, y].wall == 244 || *Main.tile[x, y].wall == 83 || *Main.tile[x, y].wall == 3 || *Main.tile[x, y].wall == 187 || *Main.tile[x, y].wall == 216)
				{
					WorldGen.numTileCount = WorldGen.maxTileCount;
					return;
				}
				if (!WorldGen.SolidTile(x, y, false) && (*Main.tile[x, y].wall == 2 || *Main.tile[x, y].wall == 59))
				{
					WorldGen.CountedTiles.Add(new Point(x, y), true);
					WorldGen.numTileCount++;
					WorldGen.nextDirtCount(x - 1, y);
					WorldGen.nextDirtCount(x + 1, y);
					WorldGen.nextDirtCount(x, y - 1);
					WorldGen.nextDirtCount(x, y + 1);
					WorldGen.nextDirtCount(x - 1, y - 1);
					WorldGen.nextDirtCount(x - 1, y + 1);
					WorldGen.nextDirtCount(x + 1, y - 1);
					WorldGen.nextDirtCount(x + 1, y + 1);
					WorldGen.nextDirtCount(x - 2, y);
					WorldGen.nextDirtCount(x + 2, y);
				}
			}
		}

		/// <summary>
		/// Returns true if the provided tile coordinates are within the world bounds.
		/// <para />When dealing with random coordinates combined with addition or subtraction, there is a chance you might construct coordinates outside the bounds of the world. This will crash world generation, so it is important that you check that the coordinates are suitable before attempting to do things at those coordinates. Use this method to check if the given coordinates fall inside the world. The fluff parameter further checks that the coordinates are at least that many tiles away from the edge, which is useful for world generation actions that could affect large areas of tiles.
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="fluff"></param>
		/// <returns></returns>
		// Token: 0x06001175 RID: 4469 RVA: 0x00415885 File Offset: 0x00413A85
		public static bool InWorld(int x, int y, int fluff = 0)
		{
			return x >= fluff && x < Main.maxTilesX - fluff && y >= fluff && y < Main.maxTilesY - fluff;
		}

		// Token: 0x06001176 RID: 4470 RVA: 0x004158A8 File Offset: 0x00413AA8
		public static void gemCave(int x, int y)
		{
			WorldGen.countTiles(x, y, false, false);
			for (int i = 0; i < 6; i++)
			{
				WorldGen.gem[i] = false;
			}
			WorldGen.gem[WorldGen.genRand.Next(6)] = true;
			for (int j = 0; j < 6; j++)
			{
				if (WorldGen.genRand.Next(6) == 0)
				{
					WorldGen.gem[j] = true;
				}
			}
			WorldGen.Spread.Gem(x, y);
		}

		// Token: 0x06001177 RID: 4471 RVA: 0x00415910 File Offset: 0x00413B10
		public static int randGem()
		{
			int num = WorldGen.genRand.Next(6);
			while (!WorldGen.gem[num])
			{
				num = WorldGen.genRand.Next(6);
			}
			return num;
		}

		// Token: 0x06001178 RID: 4472 RVA: 0x00415944 File Offset: 0x00413B44
		public static ushort randGemTile()
		{
			if (WorldGen.genRand.Next(20) != 0)
			{
				return 1;
			}
			switch ((ushort)WorldGen.randGem())
			{
			case 0:
				return 67;
			case 1:
				return 66;
			case 2:
				return 63;
			case 3:
				return 65;
			case 4:
				return 64;
			default:
				return 68;
			}
		}

		// Token: 0x06001179 RID: 4473 RVA: 0x00415998 File Offset: 0x00413B98
		public static void randMoss(bool justNeon = false)
		{
			WorldGen.neonMossType = WorldGen.genRand.NextFromList(new ushort[]
			{
				539,
				536,
				534,
				625
			});
			if (!justNeon)
			{
				WorldGen.mossType[0] = WorldGen.genRand.Next(5);
				WorldGen.mossType[1] = WorldGen.genRand.Next(5);
				while (WorldGen.mossType[1] == WorldGen.mossType[0])
				{
					WorldGen.mossType[1] = WorldGen.genRand.Next(5);
				}
				WorldGen.mossType[2] = WorldGen.genRand.Next(5);
				while (WorldGen.mossType[2] == WorldGen.mossType[0] || WorldGen.mossType[2] == WorldGen.mossType[1])
				{
					WorldGen.mossType[2] = WorldGen.genRand.Next(5);
				}
			}
		}

		// Token: 0x0600117A RID: 4474 RVA: 0x00415A5C File Offset: 0x00413C5C
		public static void neonMossBiome(int i, int j, int maxY = 99999)
		{
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = WorldGen.genRand.NextDouble() * 4.0 - 2.0;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 4.0 - 2.0;
			if (vector2D2.X == 0.0)
			{
				vector2D2.X = 1.0;
			}
			while (vector2D2.Length() < 4.0)
			{
				vector2D2 *= 1.5;
			}
			double num = (double)WorldGen.genRand.Next(60, 80);
			double num2 = (double)WorldGen.genRand.Next(30, 40);
			double num3 = (double)Main.maxTilesX / 4200.0;
			if (WorldGen.getGoodWorldGen)
			{
				num3 *= 1.5;
			}
			num *= num3;
			num2 *= num3;
			while (num2 > 0.0)
			{
				num *= 0.98;
				num2 -= 1.0;
				int num4 = (int)(vector2D.X - num);
				int num5 = (int)(vector2D.X + num);
				int num6 = (int)(vector2D.Y - num);
				int num7 = (int)(vector2D.Y + num);
				if (num4 < 1)
				{
					num4 = 1;
				}
				if (num5 > Main.maxTilesX - 1)
				{
					num5 = Main.maxTilesX - 1;
				}
				if (num6 < 1)
				{
					num6 = 1;
				}
				if (num7 > Main.maxTilesY - 1)
				{
					num7 = Main.maxTilesY - 1;
				}
				if (Main.remixWorld)
				{
					if ((double)num6 < Main.worldSurface)
					{
						num6 = (int)Main.worldSurface;
						if (vector2D2.Y < 5.0)
						{
							vector2D2.Y = 5.0;
						}
					}
				}
				else if ((double)num6 < Main.rockLayer)
				{
					num6 = (int)Main.rockLayer;
					if (vector2D2.Y < 5.0)
					{
						vector2D2.Y = 5.0;
					}
				}
				if (num7 > maxY)
				{
					num7 = maxY;
					if (vector2D2.Y > -5.0)
					{
						vector2D2.Y = -5.0;
					}
				}
				double num8 = num * (1.0 + WorldGen.genRand.NextDouble() * 0.4 - 0.2);
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						if (new Vector2D(Math.Abs((double)k - vector2D.X), Math.Abs((double)l - vector2D.Y)).Length() < num8 * 0.8 && WorldGen.TileType(k, l) == 1 && (!Main.tile[k - 1, l].active() || !Main.tile[k + 1, l].active() || !Main.tile[k, l - 1].active() || !Main.tile[k, l + 1].active()))
						{
							WorldGen.SpreadGrass(k - 1, l, 1, (int)WorldGen.neonMossType, true, default(TileColorCache));
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 4.0 - 2.0;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 4.0 - 2.0;
				vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, -10.0, 10.0);
				vector2D2.X = Utils.Clamp<double>(vector2D2.X, -10.0, 10.0);
			}
		}

		// Token: 0x0600117B RID: 4475 RVA: 0x00415E68 File Offset: 0x00414068
		public static void setMoss(int x, int y)
		{
			int num = ((double)x >= (double)Main.maxTilesX * 0.334) ? (((double)x < (double)Main.maxTilesX * 0.667) ? 1 : 2) : 0;
			GenVars.mossWall = (ushort)(54 + WorldGen.mossType[num]);
			GenVars.mossTile = (ushort)(179 + WorldGen.mossType[num]);
		}

		// Token: 0x0600117C RID: 4476 RVA: 0x00415ECC File Offset: 0x004140CC
		public static void FillWallHolesInArea(Rectangle worldCoordsArea)
		{
			int num4 = Math.Max(worldCoordsArea.Left, 0);
			int num2 = Math.Min(worldCoordsArea.Right, Main.maxTilesX);
			int num3 = 0;
			for (int i = num4; i <= num2; i++)
			{
				if (i >= 0 && i < Main.maxTilesX)
				{
					num3 += WorldGen.FillWallHolesInColumn(i, worldCoordsArea.Top, worldCoordsArea.Bottom);
				}
			}
		}

		// Token: 0x0600117D RID: 4477 RVA: 0x00415F28 File Offset: 0x00414128
		private unsafe static int FillWallHolesInColumn(int x, int startY, int endY)
		{
			int num = 0;
			x = Utils.Clamp<int>(x, 2, Main.maxTilesX - 1 - 2);
			startY = Math.Max(startY, 2);
			endY = Math.Min(endY, Main.maxTilesY - 2);
			bool flag = false;
			for (int i = startY; i < endY; i++)
			{
				if (*Main.tile[x, i].wall == 0)
				{
					if (flag)
					{
						flag = false;
						if (WorldGen.FillWallHolesInSpot(x, i, 150))
						{
							num++;
						}
					}
				}
				else
				{
					flag = true;
				}
			}
			return num;
		}

		// Token: 0x0600117E RID: 4478 RVA: 0x00415FA4 File Offset: 0x004141A4
		private unsafe static bool FillWallHolesInSpot(int originX, int originY, int maxWallsThreshold)
		{
			if (!WorldGen.InWorld(originX, originY, 2))
			{
				return false;
			}
			List<Point> list = new List<Point>();
			List<Point> list2 = new List<Point>();
			HashSet<Point> hashSet = new HashSet<Point>();
			Dictionary<ushort, int> dictionary = new Dictionary<ushort, int>();
			list2.Add(new Point(originX, originY));
			while (list2.Count > 0)
			{
				list.Clear();
				list.AddRange(list2);
				list2.Clear();
				while (list.Count > 0)
				{
					if (hashSet.Count >= maxWallsThreshold)
					{
						return false;
					}
					Point item = list[0];
					if (hashSet.Contains(item))
					{
						list.Remove(item);
					}
					else if (!WorldGen.InWorld(item.X, item.Y, 1))
					{
						list.Remove(item);
					}
					else
					{
						hashSet.Add(item);
						list.Remove(item);
						Tile tile = Main.tile[item.X, item.Y];
						if (*tile.wall != 0)
						{
							if (dictionary.ContainsKey(*tile.wall))
							{
								dictionary[*tile.wall] = dictionary[*tile.wall] + 1;
							}
							else
							{
								dictionary[*tile.wall] = 1;
							}
						}
						else
						{
							bool flag = false;
							if (!flag)
							{
								int y = item.Y;
								for (int i = item.X - 1; i <= item.X + 1; i++)
								{
									if (!Main.tile[i, y].active())
									{
										flag = true;
										break;
									}
								}
							}
							if (!flag)
							{
								int x = item.X;
								for (int j = item.Y - 1; j <= item.Y + 1; j++)
								{
									if (!Main.tile[x, j].active())
									{
										flag = true;
										break;
									}
								}
							}
							if (flag)
							{
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
						}
					}
				}
			}
			if (hashSet.Count == 1)
			{
				return false;
			}
			ushort wall = 0;
			int num = -1;
			foreach (KeyValuePair<ushort, int> item3 in dictionary)
			{
				if (item3.Value > num)
				{
					wall = item3.Key;
					num = item3.Value;
				}
			}
			if (num == -1)
			{
				wall = 2;
			}
			foreach (Point item4 in hashSet)
			{
				Tile tile2 = Main.tile[item4.X, item4.Y];
				if (*tile2.wall == 0)
				{
					*tile2.wall = wall;
				}
			}
			return true;
		}

		// Token: 0x0600117F RID: 4479 RVA: 0x00416304 File Offset: 0x00414504
		public static void tileCountAndDestroy()
		{
			for (int i = 10; i < Main.maxTilesX - 10; i++)
			{
				for (int j = 10; j < Main.maxTilesY - 10; j++)
				{
					if (Main.tile[i, j].active() && WorldGen.tileCounter(i, j) < WorldGen.tileCounterMax)
					{
						WorldGen.tileCounterKill();
					}
				}
			}
		}

		// Token: 0x06001180 RID: 4480 RVA: 0x00416362 File Offset: 0x00414562
		public static int tileCounter(int x, int y)
		{
			WorldGen.tileCounterNum = 0;
			WorldGen.tileCounterNext(x, y);
			return WorldGen.tileCounterNum;
		}

		// Token: 0x06001181 RID: 4481 RVA: 0x00416378 File Offset: 0x00414578
		public unsafe static void tileCounterNext(int x, int y)
		{
			if (WorldGen.tileCounterNum >= WorldGen.tileCounterMax || x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5 || !Main.tile[x, y].active() || !Main.tileSolid[(int)(*Main.tile[x, y].type)] || !TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[x, y].type)])
			{
				return;
			}
			for (int i = 0; i < WorldGen.tileCounterNum; i++)
			{
				if (WorldGen.tileCounterX[i] == x && WorldGen.tileCounterY[i] == y)
				{
					return;
				}
			}
			WorldGen.tileCounterX[WorldGen.tileCounterNum] = x;
			WorldGen.tileCounterY[WorldGen.tileCounterNum] = y;
			WorldGen.tileCounterNum++;
			WorldGen.tileCounterNext(x - 1, y);
			WorldGen.tileCounterNext(x + 1, y);
			WorldGen.tileCounterNext(x, y - 1);
			WorldGen.tileCounterNext(x, y + 1);
		}

		// Token: 0x06001182 RID: 4482 RVA: 0x0041646C File Offset: 0x0041466C
		public static void tileCounterKill()
		{
			for (int i = 0; i < WorldGen.tileCounterNum; i++)
			{
				int num = WorldGen.tileCounterX[i];
				int num2 = WorldGen.tileCounterY[i];
				Main.tile[num, num2].active(false);
			}
		}

		// Token: 0x06001183 RID: 4483 RVA: 0x004164AE File Offset: 0x004146AE
		private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
		{
			WorldGen._vanillaGenPasses.Add(name, new PassLegacy(name, method));
		}

		// Token: 0x06001184 RID: 4484 RVA: 0x004164C2 File Offset: 0x004146C2
		private static void AddGenerationPass(GenPass pass)
		{
			WorldGen._vanillaGenPasses.Add(pass.Name, pass);
		}

		// Token: 0x06001185 RID: 4485 RVA: 0x004164D5 File Offset: 0x004146D5
		private static void AddGenerationPass(string name, double weight, WorldGenLegacyMethod method)
		{
			WorldGen._vanillaGenPasses.Add(name, new PassLegacy(name, method, weight));
		}

		// Token: 0x06001186 RID: 4486 RVA: 0x004164EC File Offset: 0x004146EC
		public unsafe static bool checkUnderground(int x, int y)
		{
			try
			{
				int num = 120;
				int num2 = 80;
				int num3 = 3;
				if ((double)y > Main.worldSurface + (double)num2)
				{
					return true;
				}
				if ((double)y < Main.worldSurface / 2.0)
				{
					return false;
				}
				int num4 = y - num2;
				int num5 = x - num / 2;
				int num6 = 0;
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num5 >= Main.maxTilesX - num)
				{
					num5 = Main.maxTilesX - num - 1;
				}
				for (int i = num5; i < num5 + num; i++)
				{
					for (int j = num4; j < num4 + num3; j++)
					{
						if (WorldGen.SolidTile(i, j, false) || *Main.tile[x, y].wall > 0)
						{
							num6++;
						}
					}
				}
				if ((double)num6 >= (double)(num * num3) * 0.8)
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001187 RID: 4487 RVA: 0x004165E0 File Offset: 0x004147E0
		public static int GetNextJungleChestItem()
		{
			int result = 211;
			switch (GenVars.JungleItemCount % 4)
			{
			case 0:
				result = 211;
				break;
			case 1:
				result = 212;
				break;
			case 2:
				result = 213;
				break;
			case 3:
				result = 964;
				break;
			}
			if (WorldGen.genRand.Next(50) == 0)
			{
				result = 753;
			}
			else if (WorldGen.genRand.Next(15) == 0)
			{
				result = 2292;
			}
			else if (WorldGen.genRand.Next(20) == 0)
			{
				result = 3017;
			}
			GenVars.JungleItemCount++;
			return result;
		}

		// Token: 0x06001188 RID: 4488 RVA: 0x00416680 File Offset: 0x00414880
		private unsafe static void ScanTileColumnAndRemoveClumps(int x)
		{
			int num = 0;
			int y = 0;
			for (int i = 10; i < Main.maxTilesY - 10; i++)
			{
				if (Main.tile[x, i].active() && Main.tileSolid[(int)(*Main.tile[x, i].type)] && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[x, i].type)])
				{
					if (num == 0)
					{
						y = i;
					}
					num++;
				}
				else
				{
					if (num > 0 && num < WorldGen.tileCounterMax)
					{
						WorldGen.SmallConsecutivesFound++;
						if (WorldGen.tileCounter(x, y) < WorldGen.tileCounterMax)
						{
							WorldGen.SmallConsecutivesEliminated++;
							WorldGen.tileCounterKill();
						}
					}
					num = 0;
				}
			}
		}

		// Token: 0x06001189 RID: 4489 RVA: 0x00416740 File Offset: 0x00414940
		public unsafe static void OreHelper(int X, int Y)
		{
			for (int i = X - 1; i <= X + 1; i++)
			{
				for (int j = Y - 1; j <= Y + 1; j++)
				{
					if (*Main.tile[i, j].type == 1 || *Main.tile[i, j].type == 40)
					{
						*Main.tile[i, j].type = 0;
					}
				}
			}
		}

		// Token: 0x0600118A RID: 4490 RVA: 0x004167B4 File Offset: 0x004149B4
		public unsafe static bool StonePatch(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (!TileID.Sets.Conversion.Grass[(int)(*Main.tile[X, num].type)] || !TileID.Sets.Conversion.Grass[(int)(*Main.tile[X - 1, num].type)] || !TileID.Sets.Conversion.Grass[(int)(*Main.tile[X + 1, num].type)])
			{
				return false;
			}
			if (*Main.tile[X, num].wall > 0)
			{
				return false;
			}
			for (int i = X - 10; i <= X + 10; i++)
			{
				for (int j = num + 7; j <= num + 30; j++)
				{
					if (!Main.tile[i, j].active() || Main.tileDungeon[(int)(*Main.tile[i, j].type)] || TileID.Sets.Clouds[(int)(*Main.tile[i, j].type)] || TileID.Sets.Conversion.Sand[(int)(*Main.tile[i, j].type)] || *Main.tile[i, j].wall == 0 || *Main.tile[i, j].type == 199 || *Main.tile[i, j].type == 23)
					{
						return false;
					}
				}
			}
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num2 = (double)WorldGen.genRand.Next(13, 18);
			int num3 = WorldGen.genRand.Next(13, 19);
			if (WorldGen.genRand.Next(3) == 0)
			{
				num2 += (double)WorldGen.genRand.Next(3);
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				num3 += WorldGen.genRand.Next(3);
			}
			while (num3 > 0)
			{
				num3--;
				int k = X - (int)num2 * 4;
				while ((double)k <= (double)X + num2 * 4.0)
				{
					int l = num - (int)num2 * 4;
					while ((double)l <= (double)num + num2 * 4.0)
					{
						double num4 = num2 * (0.7 + WorldGen.genRand.NextDouble() * 0.6) * 0.3;
						if (WorldGen.genRand.Next(8) == 0)
						{
							num4 *= 2.0;
						}
						Vector2D vector2D3 = vector2D - new Vector2D((double)k, (double)l);
						if (vector2D3.Length() < num4 * 2.0 && !Main.tile[k, l].active() && Main.tile[k, l + 1].active() && *Main.tile[k, l + 1].type == 1 && WorldGen.genRand.Next(7) == 0 && WorldGen.SolidTile(k - 1, l + 1, false) && WorldGen.SolidTile(k + 1, l + 1, false))
						{
							if (WorldGen.genRand.Next(3) != 0)
							{
								WorldGen.PlaceTile(k, l, 186, true, false, -1, WorldGen.genRand.Next(7, 13));
							}
							if (WorldGen.genRand.Next(3) != 0)
							{
								WorldGen.PlaceSmallPile(k, l, WorldGen.genRand.Next(6), 1, 185);
							}
							WorldGen.PlaceSmallPile(k, l, WorldGen.genRand.Next(6), 0, 185);
						}
						if (vector2D3.Length() < num4)
						{
							if (Main.tileSolid[(int)(*Main.tile[k, l].type)])
							{
								*Main.tile[k, l].type = 1;
							}
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
						l++;
					}
					k++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x0600118B RID: 4491 RVA: 0x00416CE0 File Offset: 0x00414EE0
		public unsafe static bool ShellPile(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (*Main.tile[X, num].type != 53)
			{
				return false;
			}
			if (*Main.tile[X, num].wall > 0)
			{
				return false;
			}
			num--;
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num2 = (double)WorldGen.genRand.Next(2, 4);
			if (WorldGen.genRand.Next(10) == 0)
			{
				num2 += 1.0;
			}
			int num3 = WorldGen.genRand.Next(3, 6);
			while (num3 > 0)
			{
				num3--;
				int i = X - (int)num2 * 4;
				while ((double)i <= (double)X + num2 * 4.0)
				{
					int num4 = num + (int)num2 * 4;
					while ((double)num4 > (double)num - num2 * 4.0)
					{
						double num5 = num2 * (double)WorldGen.genRand.Next(70, 91) * 0.01;
						Vector2D vector2D3 = vector2D - new Vector2D((double)i, (double)num4);
						vector2D3.X *= 0.6;
						if (vector2D3.Length() < num5)
						{
							if (num4 <= num + 1 || WorldGen.genRand.Next(6) == 0)
							{
								*Main.tile[i, num4].type = 495;
								Main.tile[i, num4].active(true);
								Main.tile[i, num4].halfBrick(false);
								Main.tile[i, num4].slope(0);
								if (!Main.tile[i, num4 + 1].active())
								{
									*Main.tile[i, num4 + 1].type = 495;
									Main.tile[i, num4 + 1].active(true);
									Main.tile[i, num4 + 1].halfBrick(false);
									Main.tile[i, num4 + 1].slope(0);
									if (!Main.tile[i, num4 + 2].active())
									{
										*Main.tile[i, num4 + 2].type = 53;
										Main.tile[i, num4 + 2].active(true);
										Main.tile[i, num4 + 2].halfBrick(false);
										Main.tile[i, num4 + 2].slope(0);
										if (!Main.tile[i, num4 + 3].active())
										{
											*Main.tile[i, num4 + 3].type = 397;
											Main.tile[i, num4 + 3].active(true);
											Main.tile[i, num4 + 3].halfBrick(false);
											Main.tile[i, num4 + 3].slope(0);
										}
									}
								}
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(i, num4, true);
								}
							}
							else if (*Main.tile[i, num4].type != 495)
							{
								Main.tile[i, num4].active(true);
								Main.tile[i, num4].halfBrick(false);
								Main.tile[i, num4].slope(0);
								*Main.tile[i, num4].type = 53;
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(i, num4, true);
								}
							}
						}
						num4--;
					}
					i++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x0600118C RID: 4492 RVA: 0x004171EC File Offset: 0x004153EC
		public unsafe static bool MarblePileWithStatues(int X, int Y)
		{
			int num = Y;
			while (!WorldGen.SolidTile(X, num, false))
			{
				num++;
				if ((double)num > Main.worldSurface)
				{
					return false;
				}
			}
			if (*Main.tile[X, num].type != 0 && *Main.tile[X, num].type != 2)
			{
				return false;
			}
			if (*Main.tile[X, num].wall > 0)
			{
				return false;
			}
			int num2 = 130;
			int num3 = 60;
			int num13 = (int)MathHelper.Clamp((float)(X - num2), 30f, (float)(Main.maxTilesX - 30));
			int num4 = (int)MathHelper.Clamp((float)(X + num2), 30f, (float)(Main.maxTilesX - 30));
			int num5 = (int)MathHelper.Clamp((float)(num - num3), 30f, (float)(Main.maxTilesY - 30));
			int num6 = (int)MathHelper.Clamp((float)(num + num3), 30f, (float)(Main.maxTilesY - 30));
			for (int i = num13; i <= num4; i++)
			{
				for (int j = num5; j <= num6; j++)
				{
					if (Main.tile[i, j].active() && (*Main.tile[i, j].type == 367 || *Main.tile[i, j].type == 191))
					{
						return false;
					}
				}
			}
			num--;
			Vector2D vector2D;
			vector2D..ctor((double)X, (double)num);
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num7 = (double)WorldGen.genRand.Next(2, 4);
			if (WorldGen.genRand.Next(10) == 0)
			{
				num7 += 1.0;
			}
			int num8 = WorldGen.genRand.Next(3, 6);
			while (num8 > 0)
			{
				num8--;
				int k = X - (int)num7 * 5;
				while ((double)k <= (double)X + num7 * 5.0)
				{
					int num9 = num + (int)num7 * 3;
					while ((double)num9 > (double)num - num7 * 3.0)
					{
						double num10 = num7 * (double)WorldGen.genRand.Next(70, 91) * 0.01 * 1.2;
						Vector2D vector2D3 = vector2D - new Vector2D((double)k, (double)num9);
						if (vector2D3.Length() > 30.0)
						{
							vector2D..ctor((double)X, (double)num);
							vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
							vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
						}
						else
						{
							vector2D3.X *= 0.25;
							vector2D3.Y *= 0.8;
							if (vector2D3.Length() < num10 && Main.tile[k, num9].active())
							{
								Main.tile[k, num9].active(true);
								Main.tile[k, num9].halfBrick(false);
								Main.tile[k, num9].slope(0);
								*Main.tile[k, num9].type = 367;
								if (!WorldGen.gen)
								{
									WorldGen.SquareTileFrame(k, num9, true);
								}
							}
						}
						num9--;
					}
					k++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += (0.1 + WorldGen.genRand.NextDouble() * 0.1) * 0.8;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			int num11 = 0;
			int l = X - (int)num7 * 5;
			while ((double)l <= (double)X + num7 * 5.0 && num11 < 3)
			{
				if (l % 2 != 1 && (num11 <= 0 || WorldGen.genRand.Next(5) == 0))
				{
					int num12 = (int)vector2D.Y - 20;
					Tile tile = Main.tile[l, num12];
					while (tile != null && !tile.active())
					{
						num12++;
						tile = Main.tile[l, num12];
					}
					if (tile != null && *tile.type == 367 && !Main.tile[l, num12 - 1].active() && WorldGen.Statue(l, num12 - 1, 26))
					{
						num11++;
					}
				}
				l++;
			}
			return true;
		}

		// Token: 0x0600118D RID: 4493 RVA: 0x0041774C File Offset: 0x0041594C
		public static bool Statue(int x, int y, byte paint)
		{
			int num = WorldGen.genRand.Next(2, GenVars.statueList.Length);
			int x2 = (int)GenVars.statueList[num].X;
			int y2 = (int)GenVars.statueList[num].Y;
			while (!Main.tile[x, y].active())
			{
				y++;
				if (y >= Main.maxTilesY)
				{
					break;
				}
			}
			if (y >= Main.maxTilesY)
			{
				return false;
			}
			y--;
			if (WorldGen.PlaceTile(x, y, x2, true, true, -1, y2))
			{
				for (int i = 0; i < 2; i++)
				{
					for (int j = 0; j < 3; j++)
					{
						Main.tile[x + i, y + j - 2].color(paint);
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x0600118E RID: 4494 RVA: 0x00417810 File Offset: 0x00415A10
		public unsafe static bool OrePatch(int X, int Y)
		{
			ushort type = (ushort)WorldGen.SavedOreTiers.Copper;
			if (WorldGen.genRand.Next(3) == 0)
			{
				type = (ushort)WorldGen.SavedOreTiers.Iron;
			}
			int num = X;
			int num2 = Y;
			while (!WorldGen.SolidTile(num, num2, false))
			{
				num2++;
				if ((double)num2 > Main.worldSurface)
				{
					return false;
				}
			}
			if (!TileID.Sets.Conversion.Grass[(int)(*Main.tile[num, num2].type)] || !TileID.Sets.Conversion.Grass[(int)(*Main.tile[num - 1, num2].type)] || !TileID.Sets.Conversion.Grass[(int)(*Main.tile[num + 1, num2].type)])
			{
				return false;
			}
			if (*Main.tile[num, num2].wall > 0)
			{
				return false;
			}
			for (int i = num - 10; i <= num + 10; i++)
			{
				for (int j = num2 + 7; j <= num2 + 30; j++)
				{
					if (!Main.tile[i, j].active() || Main.tileDungeon[(int)(*Main.tile[i, j].type)] || TileID.Sets.Clouds[(int)(*Main.tile[i, j].type)] || TileID.Sets.Conversion.Sand[(int)(*Main.tile[i, j].type)] || *Main.tile[i, j].wall == 0)
					{
						return false;
					}
				}
			}
			num2 += WorldGen.genRand.Next(2);
			*Main.tile[num, num2].type = type;
			Main.tile[num, num2].active(true);
			WorldGen.OreHelper(num, num2);
			if (!WorldGen.gen)
			{
				WorldGen.SquareTileFrame(num, num2, true);
			}
			int num3 = num2;
			while (num2 < num3 + WorldGen.genRand.Next(8, 13))
			{
				num += WorldGen.genRand.Next(-1, 2);
				num2 += WorldGen.genRand.Next(1, 3);
				if (WorldGen.genRand.Next(3) == 0)
				{
					num2++;
				}
				*Main.tile[num, num2].type = type;
				Main.tile[num, num2].active(true);
				WorldGen.OreHelper(num, num2);
				if (!WorldGen.gen)
				{
					WorldGen.SquareTileFrame(num, num2, true);
				}
				if (WorldGen.genRand.Next(4) == 0)
				{
					int num4 = num + WorldGen.genRand.Next(-2, 3);
					int num5 = num2 + WorldGen.genRand.Next(2);
					*Main.tile[num4, num5].type = type;
					Main.tile[num4, num5].active(true);
					WorldGen.OreHelper(num4, num5);
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(num4, num5, true);
					}
				}
			}
			Vector2D vector2D;
			vector2D..ctor((double)num, (double)num2);
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = WorldGen.genRand.NextDouble() * 0.6 - 0.3;
			vector2D2.Y = WorldGen.genRand.NextDouble() * 0.5 + 0.5;
			double num6 = (double)WorldGen.genRand.Next(5, 9);
			int num7 = WorldGen.genRand.Next(9, 14);
			if (WorldGen.genRand.Next(3) == 0)
			{
				num6 += (double)WorldGen.genRand.Next(2);
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				num7 += WorldGen.genRand.Next(2);
			}
			while (num7 > 0)
			{
				num7--;
				int k = num - (int)num6 * 4;
				while ((double)k <= (double)num + num6 * 4.0)
				{
					int l = num2 - (int)num6 * 4;
					while ((double)l <= (double)num2 + num6 * 4.0)
					{
						double num8 = num6 * (0.5 + WorldGen.genRand.NextDouble() * 0.5) * 0.1;
						double num9 = num6 * (0.7 + WorldGen.genRand.NextDouble() * 0.6) * 0.3;
						if (WorldGen.genRand.Next(8) == 0)
						{
							num9 *= 2.0;
						}
						Vector2D vector2D3 = vector2D - new Vector2D((double)k, (double)l);
						if (vector2D3.Length() < num8)
						{
							Main.tile[k, l].active(false);
						}
						else if (vector2D3.Length() < num9)
						{
							*Main.tile[k, l].type = type;
							if (WorldGen.genRand.Next(4) == 0)
							{
								Main.tile[k, l].active(true);
							}
							WorldGen.OreHelper(k, l);
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
						l++;
					}
					k++;
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.2 - 0.1;
				Utils.Clamp<double>(vector2D2.X, -0.3, 0.3);
				Utils.Clamp<double>(vector2D2.Y, 0.5, 1.0);
			}
			return true;
		}

		// Token: 0x0600118F RID: 4495 RVA: 0x00417DD0 File Offset: 0x00415FD0
		public unsafe static bool PlaceOasis(int X, int Y)
		{
			int i = Y;
			if (Main.tile[X, i].active() || *Main.tile[X, i].wall != 0)
			{
				return false;
			}
			while (!Main.tile[X, i].active() && *Main.tile[X, i].wall == 0 && (double)i <= Main.worldSurface)
			{
				i++;
			}
			if ((double)i > Main.worldSurface - 10.0)
			{
				return false;
			}
			if (*Main.tile[X, i].type != 53)
			{
				return false;
			}
			int num = 350;
			for (int j = 0; j < GenVars.numOasis; j++)
			{
				if (Vector2D.Distance(GenVars.oasisPosition[j].ToVector2D(), new Vector2D((double)X, (double)i)) < (double)num)
				{
					return false;
				}
			}
			int num2 = WorldGen.genRand.Next(45, 61);
			int oasisHeight = GenVars.oasisHeight;
			int num3 = num2 + 50;
			int num4 = 4;
			for (int k = X - num3; k <= X + num3; k++)
			{
				for (int l = i - oasisHeight; l <= i + oasisHeight + num4; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.active())
					{
						if (Main.tileSolid[(int)(*tile.type)])
						{
							if ((*tile.type == 151 || *tile.type == 397) && Math.Abs(k - X) < num2 && Math.Abs(l - i) < oasisHeight / 2)
							{
								return false;
							}
							if (*tile.type != 53)
							{
								return false;
							}
						}
					}
					else if ((*tile.liquid > 0 || *tile.wall > 0) && Math.Abs(k - X) < num2 && Math.Abs(l - i) < oasisHeight / 2)
					{
						return false;
					}
				}
				if (k > X - num2 / 2 && k < X - num2 / 2)
				{
					if (Main.tile[k, i - 6].active())
					{
						return false;
					}
					if (!Main.tile[k, i + 1].active())
					{
						return false;
					}
				}
			}
			int num5 = 5;
			int num6 = i;
			while (!Main.tile[X - num2, i + num5].active() || *Main.tile[X - num2, i + num5].wall != 0 || !Main.tile[X + num2, i + num5].active() || *Main.tile[X + num2, i + num5].wall != 0)
			{
				i++;
				if (i - num6 > 20)
				{
					break;
				}
			}
			int num7 = num2 / 2;
			int num8 = X - num2 * 3;
			int num9 = X + num2 * 3;
			int num10 = i - oasisHeight * 4;
			int num11 = i + oasisHeight * 3;
			if (num8 < 0)
			{
				num8 = 0;
			}
			if (num9 > Main.maxTilesX)
			{
				num9 = Main.maxTilesX;
			}
			if (num10 < 0)
			{
				num10 = 0;
			}
			if (num11 > Main.maxTilesY)
			{
				num11 = Main.maxTilesY;
			}
			for (int m = num8; m < num9; m++)
			{
				for (int n = num10; n < num11; n++)
				{
					double num12 = (double)Math.Abs(m - X) * 0.7;
					double num13 = (double)Math.Abs(n - i) * 1.35;
					double num27 = Math.Sqrt(num12 * num12 + num13 * num13);
					double num14 = (double)num7 * (0.53 + WorldGen.genRand.NextDouble() * 0.04);
					double num15 = (double)Math.Abs(m - X) / (double)(num9 - X);
					num15 = 1.0 - num15;
					num15 *= 2.3;
					num15 *= num15;
					num15 *= num15;
					if (num27 < num14)
					{
						if (n == i + 1)
						{
							*Main.tile[m, n].liquid = 127;
						}
						else if (n > i + 1)
						{
							*Main.tile[m, n].liquid = byte.MaxValue;
						}
						Main.tile[m, n].lava(false);
						Main.tile[m, n].active(false);
					}
					else if (n < i && num12 < num14 + (double)(Math.Abs(n - i) * 3) * num15)
					{
						if (*Main.tile[m, n].type == 53)
						{
							Main.tile[m, n].active(false);
						}
					}
					else if (n >= i && num12 < num14 + (double)Math.Abs(n - i) * num15 && *Main.tile[m, n].wall == 0)
					{
						if (Main.tile[m, n].active() && Main.tileSolid[(int)(*Main.tile[m, n].type)] && !Main.tileSolidTop[(int)(*Main.tile[m, n].type)])
						{
							Main.tile[m, n].slope(0);
							Main.tile[m, n].halfBrick(false);
						}
						else
						{
							Main.tile[m, n].active(true);
							*Main.tile[m, n].type = 53;
							Main.tile[m, n].slope(0);
							Main.tile[m, n].halfBrick(false);
						}
					}
				}
			}
			int num16 = 50;
			num8 = X - num2 * 2;
			num9 = X + num2 * 2;
			num11 = i + oasisHeight * 2;
			for (int num17 = num8; num17 < num9; num17++)
			{
				for (int num18 = num11; num18 >= i; num18--)
				{
					double num28 = (double)Math.Abs(num17 - X) * 0.7;
					double num19 = (double)Math.Abs(num18 - i) * 1.35;
					double num29 = Math.Sqrt(num28 * num28 + num19 * num19);
					double num20 = (double)num7 * 0.5700000000000001;
					if (num29 > num20 && !Main.tile[num17, num18].active() && *Main.tile[num17, num18].wall == 0)
					{
						int num21 = -1;
						int num22 = -1;
						int num23 = num17;
						while (num23 <= num17 + num16 && Main.tile[num23, num18 + 1].active() && Main.tileSolid[(int)(*Main.tile[num23, num18 + 1].type)] && *Main.tile[num23, num18].wall <= 0)
						{
							if (Main.tile[num23, num18].active() && Main.tileSolid[(int)(*Main.tile[num23, num18].type)])
							{
								if (*Main.tile[num23, num18].type == 53)
								{
								}
								num22 = num23;
								break;
							}
							if (Main.tile[num23, num18].active())
							{
								break;
							}
							num23++;
						}
						int num24 = num17;
						while (num24 >= num17 - num16 && Main.tile[num24, num18 + 1].active() && Main.tileSolid[(int)(*Main.tile[num24, num18 + 1].type)] && *Main.tile[num24, num18].wall <= 0)
						{
							if (Main.tile[num24, num18].active() && Main.tileSolid[(int)(*Main.tile[num24, num18].type)])
							{
								if (*Main.tile[num24, num18].type == 53)
								{
								}
								num21 = num24;
								break;
							}
							if (Main.tile[num24, num18].active())
							{
								break;
							}
							num24--;
						}
						bool flag = true;
						if (num21 > -1 && num22 > -1 && flag)
						{
							int num25 = 0;
							for (int num26 = num21 + 1; num26 < num22; num26++)
							{
								if (num22 - num21 > 5 && WorldGen.genRand.Next(5) == 0)
								{
									num25 = WorldGen.genRand.Next(5, 10);
								}
								Main.tile[num26, num18].active(true);
								*Main.tile[num26, num18].type = 53;
								if (num25 > 0)
								{
									num25--;
									Main.tile[num26, num18 - 1].active(true);
									*Main.tile[num26, num18 - 1].type = 53;
								}
							}
						}
					}
				}
			}
			if (GenVars.numOasis < GenVars.maxOasis)
			{
				GenVars.oasisPosition[GenVars.numOasis] = new Point(X, i);
				GenVars.oasisWidth[GenVars.numOasis] = num2;
				GenVars.numOasis++;
			}
			return true;
		}

		// Token: 0x06001190 RID: 4496 RVA: 0x00418730 File Offset: 0x00416930
		public unsafe static bool BiomeTileCheck(int x, int y)
		{
			int num = 50;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (WorldGen.InWorld(i, j, 0))
					{
						if (Main.tile[i, j].active())
						{
							int type = (int)(*Main.tile[i, j].type);
							if (type == 368 || type == 367 || type == 147 || type == 161 || type == 162 || type == 70 || type == 72 || type == 396 || type == 397)
							{
								return true;
							}
						}
						int wall = (int)(*Main.tile[i, j].wall);
						if (wall == 187 || wall == 216)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x06001191 RID: 4497 RVA: 0x0041881F File Offset: 0x00416A1F
		public static bool oceanDepths(int x, int y)
		{
			return (double)y <= WorldGen.oceanLevel && (x < WorldGen.beachDistance || x > Main.maxTilesX - WorldGen.beachDistance);
		}

		// Token: 0x06001192 RID: 4498 RVA: 0x00418845 File Offset: 0x00416A45
		public static void UpdateDesertHiveBounds(int x, int y)
		{
			if (GenVars.desertHiveHigh > y)
			{
				GenVars.desertHiveHigh = y;
			}
			if (GenVars.desertHiveLow < y)
			{
				GenVars.desertHiveLow = y;
			}
			if (GenVars.desertHiveLeft > x)
			{
				GenVars.desertHiveLeft = x;
			}
			if (GenVars.desertHiveRight < x)
			{
				GenVars.desertHiveRight = x;
			}
		}

		// Token: 0x06001193 RID: 4499 RVA: 0x00418880 File Offset: 0x00416A80
		public static void GenerateWorld(int seed, GenerationProgress customProgressObject = null)
		{
			Stopwatch generationStopwatch = Stopwatch.StartNew();
			WorldGen.remixWorldGen = WorldGen.tempRemixWorldGen;
			WorldGen.tenthAnniversaryWorldGen = WorldGen.tempTenthAnniversaryWorldGen;
			WorldGen.drunkWorldGen = false;
			WorldGen.drunkWorldGenText = false;
			Main.afterPartyOfDoom = false;
			if (seed == 5162020 || WorldGen.everythingWorldGen)
			{
				WorldGen.drunkWorldGen = true;
				WorldGen.drunkWorldGenText = true;
				Main.drunkWorld = true;
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
				if (!Main.dayTime)
				{
					Main.time = 0.0;
				}
			}
			else if (seed == 5162021 || seed == 5162011)
			{
				WorldGen.tenthAnniversaryWorldGen = true;
			}
			Main.notTheBeesWorld = WorldGen.notTheBees;
			if (WorldGen.notTheBees)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.noTrapsWorld = WorldGen.noTrapsWorldGen;
			if (WorldGen.noTrapsWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			if (WorldGen.getGoodWorldGen)
			{
				Main.getGoodWorld = true;
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			else
			{
				Main.getGoodWorld = false;
			}
			Main.tenthAnniversaryWorld = WorldGen.tenthAnniversaryWorldGen;
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.dontStarveWorld = WorldGen.dontStarveWorldGen;
			if (WorldGen.dontStarveWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.remixWorld = WorldGen.remixWorldGen;
			if (WorldGen.remixWorldGen)
			{
				Main.rand = new UnifiedRandom();
				seed = Main.rand.Next(999999999);
			}
			Main.zenithWorld = WorldGen.everythingWorldGen;
			Utils.LogAndConsoleInfoMessageFormat("Creating world - Seed: {0}, Width: {1}, Height: {2}, Evil: {3}, IsExpert: {4}", new object[]
			{
				seed,
				Main.maxTilesX,
				Main.maxTilesY,
				WorldGen.WorldGenParam_Evil,
				Main.expertMode
			});
			Main.lockMenuBGChange = true;
			GenVars.configuration = WorldGenConfiguration.FromEmbeddedPath("Terraria.GameContent.WorldBuilding.Configuration.json");
			WorldGen.Hooks.ProcessWorldGenConfig(ref GenVars.configuration);
			Logging.Terraria.InfoFormat("Generating World: {0}", Main.ActiveWorldFileData.Name);
			WorldGen._lastSeed = seed;
			WorldGen._generator = new WorldGenerator(seed, GenVars.configuration);
			WorldGen._genRand = new UnifiedRandom(seed);
			Main.rand = new UnifiedRandom(seed);
			GenVars.structures = new StructureMap();
			GenVars.desertHiveHigh = Main.maxTilesY;
			GenVars.desertHiveLow = 0;
			GenVars.desertHiveLeft = Main.maxTilesX;
			GenVars.desertHiveRight = 0;
			GenVars.worldSurfaceLow = 0.0;
			GenVars.worldSurface = 0.0;
			GenVars.worldSurfaceHigh = 0.0;
			GenVars.rockLayerLow = 0.0;
			GenVars.rockLayer = 0.0;
			GenVars.rockLayerHigh = 0.0;
			GenVars.copper = 7;
			GenVars.iron = 6;
			GenVars.silver = 9;
			GenVars.gold = 8;
			GenVars.dungeonSide = 0;
			GenVars.jungleHut = (ushort)WorldGen.genRand.Next(5);
			GenVars.shellStartXLeft = 0;
			GenVars.shellStartYLeft = 0;
			GenVars.shellStartXRight = 0;
			GenVars.shellStartYRight = 0;
			GenVars.PyrX = null;
			GenVars.PyrY = null;
			GenVars.numPyr = 0;
			GenVars.jungleMinX = -1;
			GenVars.jungleMaxX = -1;
			GenVars.snowMinX = new int[Main.maxTilesY];
			GenVars.snowMaxX = new int[Main.maxTilesY];
			GenVars.snowTop = 0;
			GenVars.snowBottom = 0;
			GenVars.skyLakes = 1;
			if (Main.maxTilesX > 8000)
			{
				GenVars.skyLakes++;
			}
			if (Main.maxTilesX > 6000)
			{
				GenVars.skyLakes++;
			}
			GenVars.beachBordersWidth = 275;
			GenVars.beachSandRandomCenter = GenVars.beachBordersWidth + 5 + 40;
			GenVars.beachSandRandomWidthRange = 20;
			GenVars.beachSandDungeonExtraWidth = 40;
			GenVars.beachSandJungleExtraWidth = 20;
			GenVars.oceanWaterStartRandomMin = 220;
			GenVars.oceanWaterStartRandomMax = GenVars.oceanWaterStartRandomMin + 40;
			GenVars.oceanWaterForcedJungleLength = 275;
			GenVars.leftBeachEnd = 0;
			GenVars.rightBeachStart = 0;
			GenVars.evilBiomeBeachAvoidance = GenVars.beachSandRandomCenter + 60;
			GenVars.evilBiomeAvoidanceMidFixer = 50;
			GenVars.lakesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.smallHolesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.surfaceCavesBeachAvoidance = GenVars.beachSandRandomCenter + 20;
			GenVars.surfaceCavesBeachAvoidance2 = GenVars.beachSandRandomCenter + 20;
			GenVars.jungleOriginX = 0;
			GenVars.snowOriginLeft = 0;
			GenVars.snowOriginRight = 0;
			GenVars.logX = -1;
			GenVars.logY = -1;
			GenVars.dungeonLocation = 0;
			SystemLoader.PreWorldGen();
			if (WorldGen.everythingWorldGen)
			{
				Main.starGame = true;
			}
			WorldGen.AddGenPassesFromLoadTime();
			WorldGen.GenerateWorld_RunTasksAndFinish(seed, generationStopwatch, customProgressObject);
		}

		// Token: 0x06001194 RID: 4500 RVA: 0x00418D14 File Offset: 0x00416F14
		internal unsafe static void AddGenPasses()
		{
			WorldGen.AddGenerationPass("Reset", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.crimsonLeft = false;
				}
				else
				{
					GenVars.crimsonLeft = true;
				}
				GenVars.numOceanCaveTreasure = 0;
				GenVars.skipDesertTileCheck = false;
				WorldGen.growGrassUnderground = false;
				WorldGen.gen = true;
				Liquid.ReInit();
				WorldGen.noTileActions = true;
				progress.Message = "";
				WorldGen.SetupStatueList();
				WorldGen.RandomizeWeather();
				Main.cloudAlpha = 0f;
				Main.maxRaining = 0f;
				Main.raining = false;
				WorldGen.heartCount = 0;
				GenVars.extraBastStatueCount = 0;
				GenVars.extraBastStatueCountMax = 2;
				Main.checkXMas();
				Main.checkHalloween();
				WorldGen.ResetGenerator();
				GenVars.UndergroundDesertLocation = Rectangle.Empty;
				GenVars.UndergroundDesertHiveLocation = Rectangle.Empty;
				GenVars.numLarva = 0;
				List<int> list3 = new List<int>
				{
					274,
					220,
					112,
					218,
					3019
				};
				if (WorldGen.remixWorldGen)
				{
					list3 = new List<int>
					{
						274,
						220,
						683,
						218,
						3019
					};
				}
				List<int> list4 = new List<int>();
				while (list3.Count > 0)
				{
					int index = WorldGen.genRand.Next(list3.Count);
					int item = list3[index];
					list4.Add(item);
					list3.RemoveAt(index);
				}
				GenVars.hellChestItem = list4.ToArray();
				int num1086 = 86400;
				Main.slimeRainTime = (double)(-(double)WorldGen.genRand.Next(num1086 * 2, num1086 * 3));
				Main.cloudBGActive = (float)(-(float)WorldGen.genRand.Next(8640, 86400));
				WorldGen.skipFramingDuringGen = false;
				WorldGen.SavedOreTiers.Copper = 7;
				WorldGen.SavedOreTiers.Iron = 6;
				WorldGen.SavedOreTiers.Silver = 9;
				WorldGen.SavedOreTiers.Gold = 8;
				GenVars.copperBar = 20;
				GenVars.ironBar = 22;
				GenVars.silverBar = 21;
				GenVars.goldBar = 19;
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.copper = 166;
					GenVars.copperBar = 703;
					WorldGen.SavedOreTiers.Copper = 166;
				}
				if ((!WorldGen.dontStarveWorldGen || WorldGen.drunkWorldGen) && WorldGen.genRand.Next(2) == 0)
				{
					GenVars.iron = 167;
					GenVars.ironBar = 704;
					WorldGen.SavedOreTiers.Iron = 167;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					GenVars.silver = 168;
					GenVars.silverBar = 705;
					WorldGen.SavedOreTiers.Silver = 168;
				}
				if ((!WorldGen.dontStarveWorldGen || WorldGen.drunkWorldGen) && WorldGen.genRand.Next(2) == 0)
				{
					GenVars.gold = 169;
					GenVars.goldBar = 706;
					WorldGen.SavedOreTiers.Gold = 169;
				}
				WorldGen.crimson = (WorldGen.genRand.Next(2) == 0);
				if (WorldGen.WorldGenParam_Evil == 0)
				{
					WorldGen.crimson = false;
				}
				if (WorldGen.WorldGenParam_Evil == 1)
				{
					WorldGen.crimson = true;
				}
				if (GenVars.jungleHut == 0)
				{
					GenVars.jungleHut = 119;
				}
				else if (GenVars.jungleHut == 1)
				{
					GenVars.jungleHut = 120;
				}
				else if (GenVars.jungleHut == 2)
				{
					GenVars.jungleHut = 158;
				}
				else if (GenVars.jungleHut == 3)
				{
					GenVars.jungleHut = 175;
				}
				else if (GenVars.jungleHut == 4)
				{
					GenVars.jungleHut = 45;
				}
				Main.worldID = WorldGen.genRand.Next(int.MaxValue);
				WorldGen.RandomizeTreeStyle();
				WorldGen.RandomizeCaveBackgrounds();
				WorldGen.RandomizeBackgrounds(WorldGen.genRand);
				WorldGen.RandomizeMoonState(WorldGen.genRand, false);
				WorldGen.TreeTops.CopyExistingWorldInfoForWorldGeneration();
				GenVars.dungeonSide = ((WorldGen.genRand.Next(2) != 0) ? 1 : -1);
				if (WorldGen.remixWorldGen)
				{
					if (GenVars.dungeonSide == -1)
					{
						double num1087 = 1.0 - (double)WorldGen.genRand.Next(20, 35) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num1087);
					}
					else
					{
						double num1088 = (double)WorldGen.genRand.Next(20, 35) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num1088);
					}
				}
				else
				{
					int minValue3 = 15;
					int maxValue12 = 30;
					if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
					{
						minValue3 = 25;
						maxValue12 = 35;
					}
					if (GenVars.dungeonSide == -1)
					{
						double num1089 = 1.0 - (double)WorldGen.genRand.Next(minValue3, maxValue12) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num1089);
					}
					else
					{
						double num1090 = (double)WorldGen.genRand.Next(minValue3, maxValue12) * 0.01;
						GenVars.jungleOriginX = (int)((double)Main.maxTilesX * num1090);
					}
				}
				int num1091 = WorldGen.genRand.Next(Main.maxTilesX);
				if (WorldGen.drunkWorldGen)
				{
					GenVars.dungeonSide *= -1;
				}
				if (GenVars.dungeonSide == 1)
				{
					while ((double)num1091 < (double)Main.maxTilesX * 0.6 || (double)num1091 > (double)Main.maxTilesX * 0.75)
					{
						num1091 = WorldGen.genRand.Next(Main.maxTilesX);
					}
				}
				else
				{
					while ((double)num1091 < (double)Main.maxTilesX * 0.25 || (double)num1091 > (double)Main.maxTilesX * 0.4)
					{
						num1091 = WorldGen.genRand.Next(Main.maxTilesX);
					}
				}
				if (WorldGen.drunkWorldGen)
				{
					GenVars.dungeonSide *= -1;
				}
				int num1092 = WorldGen.genRand.Next(50, 90);
				double num1093 = (double)Main.maxTilesX / 4200.0;
				num1092 += (int)((double)WorldGen.genRand.Next(20, 40) * num1093);
				num1092 += (int)((double)WorldGen.genRand.Next(20, 40) * num1093);
				int num1094 = num1091 - num1092;
				num1092 = WorldGen.genRand.Next(50, 90);
				num1092 += (int)((double)WorldGen.genRand.Next(20, 40) * num1093);
				num1092 += (int)((double)WorldGen.genRand.Next(20, 40) * num1093);
				int num1095 = num1091 + num1092;
				if (num1094 < 0)
				{
					num1094 = 0;
				}
				if (num1095 > Main.maxTilesX)
				{
					num1095 = Main.maxTilesX;
				}
				GenVars.snowOriginLeft = num1094;
				GenVars.snowOriginRight = num1095;
				GenVars.leftBeachEnd = WorldGen.genRand.Next(GenVars.beachSandRandomCenter - GenVars.beachSandRandomWidthRange, GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
				{
					GenVars.leftBeachEnd = GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange;
				}
				if (GenVars.dungeonSide == 1)
				{
					GenVars.leftBeachEnd += GenVars.beachSandDungeonExtraWidth;
				}
				else
				{
					GenVars.leftBeachEnd += GenVars.beachSandJungleExtraWidth;
				}
				GenVars.rightBeachStart = Main.maxTilesX - WorldGen.genRand.Next(GenVars.beachSandRandomCenter - GenVars.beachSandRandomWidthRange, GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
				{
					GenVars.rightBeachStart = Main.maxTilesX - (GenVars.beachSandRandomCenter + GenVars.beachSandRandomWidthRange);
				}
				if (GenVars.dungeonSide == -1)
				{
					GenVars.rightBeachStart -= GenVars.beachSandDungeonExtraWidth;
				}
				else
				{
					GenVars.rightBeachStart -= GenVars.beachSandJungleExtraWidth;
				}
				int num1096 = 50;
				if (GenVars.dungeonSide == -1)
				{
					GenVars.dungeonLocation = WorldGen.genRand.Next(GenVars.leftBeachEnd + num1096, (int)((double)Main.maxTilesX * 0.2));
				}
				else
				{
					GenVars.dungeonLocation = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), GenVars.rightBeachStart - num1096);
				}
				int num1097 = 0;
				if (Main.maxTilesX >= 8400)
				{
					num1097 = 2;
				}
				else if (Main.maxTilesX >= 6400)
				{
					num1097 = 1;
				}
				GenVars.extraBastStatueCountMax = 2 + num1097;
				Main.tileSolid[659] = false;
			});
			WorldGen.AddGenerationPass(new TerrainPass());
			WorldGen.AddGenerationPass("Dunes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[1].Value;
				int random9 = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num1080 = passConfig.Get<double>("ChanceOfPyramid");
				if (WorldGen.drunkWorldGen)
				{
					num1080 = 1.0;
				}
				double num1081 = (double)Main.maxTilesX / 4200.0;
				GenVars.PyrX = new int[random9 + 3];
				GenVars.PyrY = new int[random9 + 3];
				DunesBiome dunesBiome = GenVars.configuration.CreateBiome<DunesBiome>();
				for (int num1082 = 0; num1082 < random9; num1082++)
				{
					progress.Set((double)num1082 / (double)random9);
					Point origin5 = Point.Zero;
					bool flag62 = false;
					int num1083 = 0;
					while (!flag62)
					{
						origin5 = WorldGen.RandomWorldPoint(0, 500, 0, 500);
						bool flag63 = Math.Abs(origin5.X - GenVars.jungleOriginX) < (int)(600.0 * num1081);
						bool flag64 = Math.Abs(origin5.X - Main.maxTilesX / 2) < 300;
						bool flag65 = origin5.X > GenVars.snowOriginLeft - 300 && origin5.X < GenVars.snowOriginRight + 300;
						num1083++;
						if (num1083 >= Main.maxTilesX)
						{
							flag63 = false;
						}
						if (num1083 >= Main.maxTilesX * 2)
						{
							flag65 = false;
						}
						flag62 = (!flag63 && !flag64 && !flag65);
					}
					dunesBiome.Place(origin5, GenVars.structures);
					if (WorldGen.genRand.NextDouble() <= num1080)
					{
						int num1084 = WorldGen.genRand.Next(origin5.X - 200, origin5.X + 200);
						for (int num1085 = 0; num1085 < Main.maxTilesY; num1085++)
						{
							if (Main.tile[num1084, num1085].active())
							{
								GenVars.PyrX[GenVars.numPyr] = num1084;
								GenVars.PyrY[GenVars.numPyr] = num1085 + 20;
								GenVars.numPyr++;
								break;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Ocean Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Language.GetTextValue("WorldGeneration.OceanSand");
				int num1069 = 0;
				while (num1069 < 3)
				{
					progress.Set((double)num1069 / 3.0);
					int num1070 = WorldGen.genRand.Next(Main.maxTilesX);
					while ((double)num1070 > (double)Main.maxTilesX * 0.4 && (double)num1070 < (double)Main.maxTilesX * 0.6)
					{
						num1070 = WorldGen.genRand.Next(Main.maxTilesX);
					}
					int num1071 = WorldGen.genRand.Next(35, 90);
					if (num1069 == 1)
					{
						double num1072 = (double)Main.maxTilesX / 4200.0;
						num1071 += (int)((double)WorldGen.genRand.Next(20, 40) * num1072);
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						num1071 *= 2;
					}
					if (num1069 == 1)
					{
						num1071 *= 2;
					}
					int num1073 = num1070 - num1071;
					num1071 = WorldGen.genRand.Next(35, 90);
					if (WorldGen.genRand.Next(3) == 0)
					{
						num1071 *= 2;
					}
					if (num1069 == 1)
					{
						num1071 *= 2;
					}
					int num1074 = num1070 + num1071;
					if (num1073 < 0)
					{
						num1073 = 0;
					}
					if (num1074 > Main.maxTilesX)
					{
						num1074 = Main.maxTilesX;
					}
					if (num1069 == 0)
					{
						num1073 = 0;
						num1074 = GenVars.leftBeachEnd;
						goto IL_136;
					}
					if (num1069 == 2)
					{
						num1073 = GenVars.rightBeachStart;
						num1074 = Main.maxTilesX;
						goto IL_136;
					}
					if (num1069 != 1)
					{
						goto IL_136;
					}
					IL_29F:
					num1069++;
					continue;
					IL_136:
					int num1075 = WorldGen.genRand.Next(50, 100);
					for (int num1076 = num1073; num1076 < num1074; num1076++)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							num1075 += WorldGen.genRand.Next(-1, 2);
							if (num1075 < 50)
							{
								num1075 = 50;
							}
							if (num1075 > 200)
							{
								num1075 = 200;
							}
						}
						int num1077 = 0;
						while ((double)num1077 < (Main.worldSurface + Main.rockLayer) / 2.0)
						{
							if (Main.tile[num1076, num1077].active())
							{
								if (num1076 == (num1073 + num1074) / 2 && WorldGen.genRand.Next(6) == 0)
								{
									GenVars.PyrX[GenVars.numPyr] = num1076;
									GenVars.PyrY[GenVars.numPyr] = num1077;
									GenVars.numPyr++;
								}
								int num1078 = num1075;
								if (num1076 - num1073 < num1078)
								{
									num1078 = num1076 - num1073;
								}
								if (num1074 - num1076 < num1078)
								{
									num1078 = num1074 - num1076;
								}
								num1078 += WorldGen.genRand.Next(5);
								for (int num1079 = num1077; num1079 < num1077 + num1078; num1079++)
								{
									if (num1076 > num1073 + WorldGen.genRand.Next(5) && num1076 < num1074 - WorldGen.genRand.Next(5))
									{
										*Main.tile[num1076, num1079].type = 53;
									}
								}
								break;
							}
							num1077++;
						}
					}
					goto IL_29F;
				}
			});
			WorldGen.AddGenerationPass("Sand Patches", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				int num1064 = (int)((double)Main.maxTilesX * 0.013);
				if (WorldGen.remixWorldGen)
				{
					num1064 /= 4;
				}
				for (int num1065 = 0; num1065 < num1064; num1065++)
				{
					int num1066 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num1067 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					if (WorldGen.remixWorldGen)
					{
						num1067 = WorldGen.genRand.Next((int)Main.rockLayer - 100, Main.maxTilesY - 350);
					}
					while ((double)num1066 > (double)Main.maxTilesX * 0.46 && (double)num1066 < (double)Main.maxTilesX * 0.54 && (double)num1067 < Main.worldSurface + 150.0)
					{
						num1066 = WorldGen.genRand.Next(0, Main.maxTilesX);
						num1067 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					int num1068 = WorldGen.genRand.Next(15, 70);
					int steps2 = WorldGen.genRand.Next(20, 130);
					WorldGen.TileRunner(num1066, num1067, (double)num1068, steps2, 53, false, 0.0, 0.0, false, true, -1);
				}
			});
			WorldGen.AddGenerationPass("Tunnels", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				int num1058 = (int)((double)Main.maxTilesX * 0.0015);
				if (WorldGen.remixWorldGen)
				{
					num1058 = (int)((double)num1058 * 1.5);
				}
				int num1059 = 0;
				while (num1059 < num1058 && GenVars.numTunnels < GenVars.maxTunnels - 1)
				{
					int[] array = new int[10];
					int[] array2 = new int[10];
					int num1060 = WorldGen.genRand.Next(450, Main.maxTilesX - 450);
					if (!WorldGen.remixWorldGen)
					{
						if (WorldGen.tenthAnniversaryWorldGen)
						{
							num1060 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
						}
						else
						{
							while ((double)num1060 > (double)Main.maxTilesX * 0.4 && (double)num1060 < (double)Main.maxTilesX * 0.6)
							{
								num1060 = WorldGen.genRand.Next(450, Main.maxTilesX - 450);
							}
						}
					}
					int num1061 = 0;
					bool flag61;
					do
					{
						flag61 = false;
						for (int num1062 = 0; num1062 < 10; num1062++)
						{
							num1060 %= Main.maxTilesX;
							while (!Main.tile[num1060, num1061].active())
							{
								num1061++;
							}
							if (*Main.tile[num1060, num1061].type == 53)
							{
								flag61 = true;
							}
							array[num1062] = num1060;
							array2[num1062] = num1061 - WorldGen.genRand.Next(11, 16);
							num1060 += WorldGen.genRand.Next(5, 11);
						}
					}
					while (flag61);
					GenVars.tunnelX[GenVars.numTunnels] = array[5];
					GenVars.numTunnels++;
					for (int num1063 = 0; num1063 < 10; num1063++)
					{
						WorldGen.TileRunner(array[num1063], array2[num1063], (double)WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, -2.0, -0.3, false, true, -1);
						WorldGen.TileRunner(array[num1063], array2[num1063], (double)WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, 2.0, -0.3, false, true, -1);
					}
					num1059++;
				}
			});
			WorldGen.AddGenerationPass("Mount Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				GenVars.numMCaves = 0;
				progress.Message = Lang.gen[2].Value;
				int num1050 = (int)((double)Main.maxTilesX * 0.001);
				if (WorldGen.remixWorldGen)
				{
					num1050 = (int)((double)num1050 * 1.5);
				}
				for (int num1051 = 0; num1051 < num1050; num1051++)
				{
					progress.Set((double)num1051 / (double)num1050);
					int num1052 = 0;
					bool flag59 = false;
					bool flag60 = false;
					int num1053 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.75));
					while (!flag60)
					{
						flag60 = true;
						if (!WorldGen.remixWorldGen)
						{
							while (num1053 > Main.maxTilesX / 2 - 90 && num1053 < Main.maxTilesX / 2 + 90)
							{
								num1053 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.75));
							}
						}
						for (int num1054 = 0; num1054 < GenVars.numMCaves; num1054++)
						{
							if (Math.Abs(num1053 - GenVars.mCaveX[num1054]) < 100)
							{
								num1052++;
								flag60 = false;
								break;
							}
						}
						if (num1052 >= Main.maxTilesX / 5)
						{
							flag59 = true;
							break;
						}
					}
					if (!flag59)
					{
						int num1055 = 0;
						while ((double)num1055 < Main.worldSurface)
						{
							if (Main.tile[num1053, num1055].active())
							{
								for (int num1056 = num1053 - 50; num1056 < num1053 + 50; num1056++)
								{
									for (int num1057 = num1055 - 25; num1057 < num1055 + 25; num1057++)
									{
										if (Main.tile[num1056, num1057].active() && (*Main.tile[num1056, num1057].type == 53 || *Main.tile[num1056, num1057].type == 151 || *Main.tile[num1056, num1057].type == 274))
										{
											flag59 = true;
										}
									}
								}
								if (!flag59)
								{
									WorldGen.Mountinater(num1053, num1055);
									GenVars.mCaveX[GenVars.numMCaves] = num1053;
									GenVars.mCaveY[GenVars.numMCaves] = num1055;
									GenVars.numMCaves++;
									break;
								}
							}
							num1055++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Dirt Wall Backgrounds", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[3].Value;
				int num1047 = 0;
				for (int num1048 = 1; num1048 < Main.maxTilesX - 1; num1048++)
				{
					ushort wall3 = 2;
					double value20 = (double)num1048 / (double)Main.maxTilesX;
					progress.Set(value20);
					bool flag58 = false;
					num1047 += WorldGen.genRand.Next(-1, 2);
					if (num1047 < 0)
					{
						num1047 = 0;
					}
					if (num1047 > 10)
					{
						num1047 = 10;
					}
					int num1049 = 0;
					while ((double)num1049 < Main.worldSurface + 10.0 && (double)num1049 <= Main.worldSurface + (double)num1047)
					{
						if (Main.tile[num1048, num1049].active())
						{
							wall3 = ((*Main.tile[num1048, num1049].type != 147) ? 2 : 40);
						}
						if (flag58 && *Main.tile[num1048, num1049].wall != 64)
						{
							*Main.tile[num1048, num1049].wall = wall3;
						}
						if (Main.tile[num1048, num1049].active() && Main.tile[num1048 - 1, num1049].active() && Main.tile[num1048 + 1, num1049].active() && Main.tile[num1048, num1049 + 1].active() && Main.tile[num1048 - 1, num1049 + 1].active() && Main.tile[num1048 + 1, num1049 + 1].active())
						{
							flag58 = true;
						}
						num1049++;
					}
				}
			});
			WorldGen.AddGenerationPass("Rocks In Dirt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[4].Value;
				double num1041 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.00015;
				int num1042 = 0;
				while ((double)num1042 < num1041)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow + 1), (double)WorldGen.genRand.Next(4, 15), WorldGen.genRand.Next(5, 40), 1, false, 0.0, 0.0, false, true, -1);
					num1042++;
				}
				progress.Set(0.34);
				num1041 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0002;
				int num1043 = 0;
				while ((double)num1043 < num1041)
				{
					int num1044 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num1045 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1);
					if (!Main.tile[num1044, num1045 - 10].active())
					{
						num1045 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1);
					}
					WorldGen.TileRunner(num1044, num1045, (double)WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0.0, 0.0, false, true, -1);
					num1043++;
				}
				progress.Set(0.67);
				num1041 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0045;
				int num1046 = 0;
				while ((double)num1046 < num1041)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh + 1), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 23), 1, false, 0.0, 0.0, false, true, -1);
					num1046++;
				}
			});
			WorldGen.AddGenerationPass("Dirt In Rocks", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[5].Value;
				double num1037 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.005;
				int num1038 = 0;
				while ((double)num1038 < num1037)
				{
					progress.Set((double)num1038 / num1037);
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 0, false, 0.0, 0.0, false, true, -1);
					num1038++;
				}
				if (WorldGen.remixWorldGen)
				{
					for (int num1039 = 0; num1039 < Main.maxTilesX; num1039++)
					{
						for (int num1040 = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 3); num1040 < Main.maxTilesY; num1040++)
						{
							if (Main.tile[num1039, num1040].active())
							{
								if (*Main.tile[num1039, num1040].type == 0)
								{
									*Main.tile[num1039, num1040].type = 1;
								}
								else if (*Main.tile[num1039, num1040].type == 1)
								{
									*Main.tile[num1039, num1040].type = 0;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Clay", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[6].Value;
				for (int num1030 = 0; num1030 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num1030++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 14), WorldGen.genRand.Next(10, 50), 40, false, 0.0, 0.0, false, true, -1);
				}
				progress.Set(0.25);
				if (WorldGen.remixWorldGen)
				{
					for (int num1031 = 0; num1031 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 7E-05); num1031++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayer - 25, Main.maxTilesY - 350), (double)WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0.0, 0.0, false, true, -1);
					}
				}
				else
				{
					for (int num1032 = 0; num1032 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05); num1032++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh + 1), (double)WorldGen.genRand.Next(8, 14), WorldGen.genRand.Next(15, 45), 40, false, 0.0, 0.0, false, true, -1);
					}
					progress.Set(0.5);
					for (int num1033 = 0; num1033 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num1033++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh + 1), (double)WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0.0, 0.0, false, true, -1);
					}
				}
				progress.Set(0.75);
				for (int num1034 = 5; num1034 < Main.maxTilesX - 5; num1034++)
				{
					int num1035 = 1;
					while ((double)num1035 < Main.worldSurface - 1.0)
					{
						if (Main.tile[num1034, num1035].active())
						{
							for (int num1036 = num1035; num1036 < num1035 + 5; num1036++)
							{
								if (*Main.tile[num1034, num1036].type == 40)
								{
									*Main.tile[num1034, num1036].type = 0;
								}
							}
							break;
						}
						num1035++;
					}
				}
			});
			WorldGen.AddGenerationPass("Small Holes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[7].Value;
				double worldSurfaceHigh2 = GenVars.worldSurfaceHigh;
				for (int num1025 = 0; num1025 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015); num1025++)
				{
					double value19 = (double)num1025 / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015);
					progress.Set(value19);
					int type14 = -1;
					if (WorldGen.genRand.Next(5) == 0)
					{
						type14 = -2;
					}
					int num1026 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num1027 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					if (!WorldGen.remixWorldGen && WorldGen.tenthAnniversaryWorldGen)
					{
						while ((double)num1026 < (double)Main.maxTilesX * 0.2 && (double)num1026 > (double)Main.maxTilesX * 0.8)
						{
							if ((double)num1027 >= GenVars.worldSurface)
							{
								break;
							}
							num1026 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num1027 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
						}
					}
					else
					{
						while (((num1026 < GenVars.smallHolesBeachAvoidance || num1026 > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num1027 < worldSurfaceHigh2) || ((double)num1026 > (double)Main.maxTilesX * 0.45 && (double)num1026 < (double)Main.maxTilesX * 0.55 && (double)num1027 < GenVars.worldSurface))
						{
							num1026 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num1027 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
						}
					}
					int num1028 = WorldGen.genRand.Next(2, 5);
					int num1029 = WorldGen.genRand.Next(2, 20);
					if (WorldGen.remixWorldGen && (double)num1027 > Main.rockLayer)
					{
						num1028 = (int)((double)num1028 * 0.8);
						num1029 = (int)((double)num1029 * 0.9);
					}
					WorldGen.TileRunner(num1026, num1027, (double)num1028, num1029, type14, false, 0.0, 0.0, false, true, -1);
					num1026 = WorldGen.genRand.Next(0, Main.maxTilesX);
					num1027 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					while (((num1026 < GenVars.smallHolesBeachAvoidance || num1026 > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num1027 < worldSurfaceHigh2) || ((double)num1026 > (double)Main.maxTilesX * 0.45 && (double)num1026 < (double)Main.maxTilesX * 0.55 && (double)num1027 < GenVars.worldSurface))
					{
						num1026 = WorldGen.genRand.Next(0, Main.maxTilesX);
						num1027 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY);
					}
					num1028 = WorldGen.genRand.Next(8, 15);
					num1029 = WorldGen.genRand.Next(7, 30);
					if (WorldGen.remixWorldGen && (double)num1027 > Main.rockLayer)
					{
						num1028 = (int)((double)num1028 * 0.7);
						num1029 = (int)((double)num1029 * 0.9);
					}
					WorldGen.TileRunner(num1026, num1027, (double)num1028, num1029, type14, false, 0.0, 0.0, false, true, -1);
				}
			});
			WorldGen.AddGenerationPass("Dirt Layer Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[8].Value;
				double worldSurfaceHigh = GenVars.worldSurfaceHigh;
				int num1019 = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05);
				if (WorldGen.remixWorldGen)
				{
					num1019 *= 2;
				}
				for (int num1020 = 0; num1020 < num1019; num1020++)
				{
					double value18 = (double)num1020 / (double)num1019;
					progress.Set(value18);
					if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
					{
						int type13 = -1;
						if (WorldGen.genRand.Next(6) == 0)
						{
							type13 = -2;
						}
						int num1021 = WorldGen.genRand.Next(0, Main.maxTilesX);
						int num1022 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.rockLayerHigh + 1);
						while (((num1021 < GenVars.smallHolesBeachAvoidance || num1021 > Main.maxTilesX - GenVars.smallHolesBeachAvoidance) && (double)num1022 < worldSurfaceHigh) || ((double)num1021 >= (double)Main.maxTilesX * 0.45 && (double)num1021 <= (double)Main.maxTilesX * 0.55 && (double)num1022 < Main.worldSurface))
						{
							num1021 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num1022 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.rockLayerHigh + 1);
						}
						int num1023 = WorldGen.genRand.Next(5, 15);
						int num1024 = WorldGen.genRand.Next(30, 200);
						if (WorldGen.remixWorldGen)
						{
							num1023 = (int)((double)num1023 * 1.1);
							num1024 = (int)((double)num1024 * 1.9);
						}
						WorldGen.TileRunner(num1021, num1022, (double)num1023, num1024, type13, false, 0.0, 0.0, false, true, -1);
					}
				}
			});
			WorldGen.AddGenerationPass("Rock Layer Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[9].Value;
				int num1011 = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013);
				if (WorldGen.remixWorldGen)
				{
					num1011 = (int)((double)num1011 * 1.1);
				}
				for (int num1012 = 0; num1012 < num1011; num1012++)
				{
					double value17 = (double)num1012 / (double)num1011;
					progress.Set(value17);
					if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
					{
						int type11 = -1;
						if (WorldGen.genRand.Next(10) == 0)
						{
							type11 = -2;
						}
						int num1013 = WorldGen.genRand.Next(6, 20);
						int num1014 = WorldGen.genRand.Next(50, 300);
						if (WorldGen.remixWorldGen)
						{
							num1013 = (int)((double)num1013 * 0.7);
							num1014 = (int)((double)num1014 * 0.7);
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY), (double)num1013, num1014, type11, false, 0.0, 0.0, false, true, -1);
					}
				}
				if (WorldGen.remixWorldGen)
				{
					num1011 = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013 * 0.4);
					for (int num1015 = 0; num1015 < num1011; num1015++)
					{
						if (GenVars.rockLayerHigh <= (double)Main.maxTilesY)
						{
							int type12 = -1;
							if (WorldGen.genRand.Next(10) == 0)
							{
								type12 = -2;
							}
							int num1016 = WorldGen.genRand.Next(7, 26);
							int steps = WorldGen.genRand.Next(50, 200);
							double num1017 = (double)WorldGen.genRand.Next(100, 221) * 0.1;
							double num1018 = (double)WorldGen.genRand.Next(-10, 11) * 0.02;
							int i = WorldGen.genRand.Next(0, Main.maxTilesX);
							int j7 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
							WorldGen.TileRunner(i, j7, (double)num1016, steps, type12, false, num1017, num1018, true, true, -1);
							WorldGen.TileRunner(i, j7, (double)num1016, steps, type12, false, 0.0 - num1017, 0.0 - num1018, true, true, -1);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Surface Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[10].Value;
				int num992 = (int)((double)Main.maxTilesX * 0.002);
				int num993 = (int)((double)Main.maxTilesX * 0.0007);
				int num994 = (int)((double)Main.maxTilesX * 0.0003);
				if (WorldGen.remixWorldGen)
				{
					num992 *= 3;
					num993 *= 3;
					num994 *= 3;
				}
				for (int num995 = 0; num995 < num992; num995++)
				{
					int num996 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num996 > (double)Main.maxTilesX * 0.45 && (double)num996 < (double)Main.maxTilesX * 0.55) || num996 < GenVars.leftBeachEnd + 20 || num996 > GenVars.rightBeachStart - 20)
					{
						num996 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num997 = 0;
					while ((double)num997 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num996, num997].active())
						{
							WorldGen.TileRunner(num996, num997, (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(5, 50), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 1.0, false, true, -1);
							break;
						}
						num997++;
					}
				}
				progress.Set(0.2);
				for (int num998 = 0; num998 < num993; num998++)
				{
					int num999 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num999 > (double)Main.maxTilesX * 0.43 && (double)num999 < (double)Main.maxTilesX * 0.5700000000000001) || num999 < GenVars.leftBeachEnd + 20 || num999 > GenVars.rightBeachStart - 20)
					{
						num999 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num1000 = 0;
					while ((double)num1000 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num999, num1000].active())
						{
							WorldGen.TileRunner(num999, num1000, (double)WorldGen.genRand.Next(10, 15), WorldGen.genRand.Next(50, 130), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							break;
						}
						num1000++;
					}
				}
				progress.Set(0.4);
				for (int num1001 = 0; num1001 < num994; num1001++)
				{
					int num1002 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num1002 > (double)Main.maxTilesX * 0.4 && (double)num1002 < (double)Main.maxTilesX * 0.6) || num1002 < GenVars.leftBeachEnd + 20 || num1002 > GenVars.rightBeachStart - 20)
					{
						num1002 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num1003 = 0;
					while ((double)num1003 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num1002, num1003].active())
						{
							WorldGen.TileRunner(num1002, num1003, (double)WorldGen.genRand.Next(12, 25), WorldGen.genRand.Next(150, 500), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 4.0, false, true, -1);
							WorldGen.TileRunner(num1002, num1003, (double)WorldGen.genRand.Next(8, 17), WorldGen.genRand.Next(60, 200), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							WorldGen.TileRunner(num1002, num1003, (double)WorldGen.genRand.Next(5, 13), WorldGen.genRand.Next(40, 170), -1, false, (double)WorldGen.genRand.Next(-10, 11) * 0.1, 2.0, false, true, -1);
							break;
						}
						num1003++;
					}
				}
				progress.Set(0.6);
				for (int num1004 = 0; num1004 < (int)((double)Main.maxTilesX * 0.0004); num1004++)
				{
					int num1005 = WorldGen.genRand.Next(0, Main.maxTilesX);
					while (((double)num1005 > (double)Main.maxTilesX * 0.4 && (double)num1005 < (double)Main.maxTilesX * 0.6) || num1005 < GenVars.leftBeachEnd + 20 || num1005 > GenVars.rightBeachStart - 20)
					{
						num1005 = WorldGen.genRand.Next(0, Main.maxTilesX);
					}
					int num1006 = 0;
					while ((double)num1006 < GenVars.worldSurfaceHigh)
					{
						if (Main.tile[num1005, num1006].active())
						{
							WorldGen.TileRunner(num1005, num1006, (double)WorldGen.genRand.Next(7, 12), WorldGen.genRand.Next(150, 250), -1, false, 0.0, 1.0, true, true, -1);
							break;
						}
						num1006++;
					}
				}
				progress.Set(0.8);
				double num1007 = (double)Main.maxTilesX / 4200.0;
				int num1008 = 0;
				while ((double)num1008 < 5.0 * num1007)
				{
					try
					{
						int num1009 = (int)Main.rockLayer;
						int num1010 = Main.maxTilesY - 400;
						if (num1009 >= num1010)
						{
							num1009 = num1010 - 1;
						}
						WorldGen.Caverer(WorldGen.genRand.Next(GenVars.surfaceCavesBeachAvoidance2, Main.maxTilesX - GenVars.surfaceCavesBeachAvoidance2), WorldGen.genRand.Next(num1009, num1010));
					}
					catch
					{
					}
					num1008++;
				}
			});
			WorldGen.AddGenerationPass("Wavy Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.dontStarveWorldGen)
				{
					progress.Message = Language.GetTextValue("WorldGeneration.WavyCaves");
					double num983 = (double)Main.maxTilesX / 4200.0;
					num983 *= num983;
					int num984 = (int)(35.0 * num983);
					if (Main.remixWorld)
					{
						num984 /= 3;
					}
					int num985 = 0;
					int num986 = 80;
					for (int num987 = 0; num987 < num984; num987++)
					{
						double num988 = (double)num987 / (double)(num984 - 1);
						progress.Set(num988);
						int num989 = WorldGen.genRand.Next((int)Main.worldSurface + 100, Main.UnderworldLayer - 100);
						int num990 = 0;
						while (Math.Abs(num989 - num985) < num986)
						{
							num990++;
							if (num990 > 100)
							{
								break;
							}
							num989 = WorldGen.genRand.Next((int)Main.worldSurface + 100, Main.UnderworldLayer - 100);
						}
						num985 = num989;
						int num991 = 80;
						int startX = num991 + (int)((double)(Main.maxTilesX - num991 * 2) * num988);
						try
						{
							WorldGen.WavyCaverer(startX, num989, (double)(12 + WorldGen.genRand.Next(3, 6)), 0.25 + WorldGen.genRand.NextDouble(), WorldGen.genRand.Next(300, 500), -1);
						}
						catch
						{
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Generate Ice Biome", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[56].Value;
				GenVars.snowTop = (int)Main.worldSurface;
				int num975 = GenVars.lavaLine - WorldGen.genRand.Next(160, 200);
				int num976 = GenVars.lavaLine;
				if (WorldGen.remixWorldGen)
				{
					num976 = Main.maxTilesY - 250;
					num975 = num976 - WorldGen.genRand.Next(160, 200);
				}
				int num977 = GenVars.snowOriginLeft;
				int num978 = GenVars.snowOriginRight;
				int num979 = 10;
				for (int num980 = 0; num980 <= num976 - 140; num980++)
				{
					progress.Set((double)num980 / (double)(num976 - 140));
					num977 += WorldGen.genRand.Next(-4, 4);
					num978 += WorldGen.genRand.Next(-3, 5);
					if (num980 > 0)
					{
						num977 = (num977 + GenVars.snowMinX[num980 - 1]) / 2;
						num978 = (num978 + GenVars.snowMaxX[num980 - 1]) / 2;
					}
					if (GenVars.dungeonSide > 0)
					{
						if (WorldGen.genRand.Next(4) == 0)
						{
							num977++;
							num978++;
						}
					}
					else if (WorldGen.genRand.Next(4) == 0)
					{
						num977--;
						num978--;
					}
					GenVars.snowMinX[num980] = num977;
					GenVars.snowMaxX[num980] = num978;
					for (int num981 = num977; num981 < num978; num981++)
					{
						if (num980 < num975)
						{
							if (*Main.tile[num981, num980].wall == 2)
							{
								*Main.tile[num981, num980].wall = 40;
							}
							ushort num983 = *Main.tile[num981, num980].type;
							if (num983 <= 23)
							{
								switch (num983)
								{
								case 0:
								case 2:
									break;
								case 1:
									*Main.tile[num981, num980].type = 161;
									goto IL_33F;
								default:
									if (num983 != 23)
									{
										goto IL_33F;
									}
									break;
								}
							}
							else if (num983 != 40 && num983 != 53)
							{
								goto IL_33F;
							}
							*Main.tile[num981, num980].type = 147;
						}
						else
						{
							num979 += WorldGen.genRand.Next(-3, 4);
							if (WorldGen.genRand.Next(3) == 0)
							{
								num979 += WorldGen.genRand.Next(-4, 5);
								if (WorldGen.genRand.Next(3) == 0)
								{
									num979 += WorldGen.genRand.Next(-6, 7);
								}
							}
							if (num979 < 0)
							{
								num979 = WorldGen.genRand.Next(3);
							}
							else if (num979 > 50)
							{
								num979 = 50 - WorldGen.genRand.Next(3);
							}
							int num982 = num980;
							while (num982 < num980 + num979)
							{
								if (*Main.tile[num981, num982].wall == 2)
								{
									*Main.tile[num981, num982].wall = 40;
								}
								ushort num983 = *Main.tile[num981, num982].type;
								if (num983 <= 23)
								{
									switch (num983)
									{
									case 0:
									case 2:
										goto IL_2F1;
									case 1:
										*Main.tile[num981, num982].type = 161;
										break;
									default:
										if (num983 == 23)
										{
											goto IL_2F1;
										}
										break;
									}
								}
								else if (num983 == 40 || num983 == 53)
								{
									goto IL_2F1;
								}
								IL_32D:
								num982++;
								continue;
								IL_2F1:
								*Main.tile[num981, num982].type = 147;
								goto IL_32D;
							}
						}
						IL_33F:;
					}
					if (GenVars.snowBottom < num980)
					{
						GenVars.snowBottom = num980;
					}
				}
			});
			WorldGen.AddGenerationPass("Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				double num971 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.002;
				int num972 = 0;
				while ((double)num972 < num971)
				{
					progress.Set((double)num972 / num971);
					int num973 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
					int num974 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh);
					if (num974 >= Main.maxTilesY)
					{
						num974 = Main.maxTilesY - 2;
					}
					if (Main.tile[num973 - 1, num974].active() && *Main.tile[num973 - 1, num974].type == 0 && Main.tile[num973 + 1, num974].active() && *Main.tile[num973 + 1, num974].type == 0 && Main.tile[num973, num974 - 1].active() && *Main.tile[num973, num974 - 1].type == 0 && Main.tile[num973, num974 + 1].active() && *Main.tile[num973, num974 + 1].type == 0)
					{
						Main.tile[num973, num974].active(true);
						*Main.tile[num973, num974].type = 2;
					}
					num973 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
					num974 = WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow);
					if (num974 >= Main.maxTilesY)
					{
						num974 = Main.maxTilesY - 2;
					}
					if (Main.tile[num973 - 1, num974].active() && *Main.tile[num973 - 1, num974].type == 0 && Main.tile[num973 + 1, num974].active() && *Main.tile[num973 + 1, num974].type == 0 && Main.tile[num973, num974 - 1].active() && *Main.tile[num973, num974 - 1].type == 0 && Main.tile[num973, num974 + 1].active() && *Main.tile[num973, num974 + 1].type == 0)
					{
						Main.tile[num973, num974].active(true);
						*Main.tile[num973, num974].type = 2;
					}
					num972++;
				}
			});
			WorldGen.AddGenerationPass(new JunglePass());
			WorldGen.AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[77].Value;
				WorldGen.NotTheBees();
				for (int num966 = 0; num966 < Main.maxTilesX; num966++)
				{
					for (int num967 = 0; num967 < Main.maxTilesY; num967++)
					{
						if (Main.tile[num966, num967].active())
						{
							WorldGen.grassSpread = 0;
							WorldGen.SpreadGrass(num966, num967, 59, 60, true, default(TileColorCache));
						}
						progress.Set(0.2 * ((double)(num966 * Main.maxTilesY + num967) / (double)(Main.maxTilesX * Main.maxTilesY)));
					}
				}
				WorldGen.SmallConsecutivesFound = 0;
				WorldGen.SmallConsecutivesEliminated = 0;
				double num968 = (double)(Main.maxTilesX - 20);
				for (int num969 = 10; num969 < Main.maxTilesX - 10; num969++)
				{
					WorldGen.ScanTileColumnAndRemoveClumps(num969);
					double num970 = (double)(num969 - 10) / num968;
					progress.Set(0.2 + num970 * 0.8);
				}
			});
			WorldGen.AddGenerationPass("Full Desert", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[78].Value;
				Main.tileSolid[484] = false;
				int num958 = 0;
				int num959 = GenVars.dungeonSide;
				int num960 = Main.maxTilesX / 2;
				int num961 = WorldGen.genRand.Next(num960) / 8;
				num961 += num960 / 8;
				int x16 = num960 + num961 * -num959;
				int num962 = 0;
				DesertBiome desertBiome = GenVars.configuration.CreateBiome<DesertBiome>();
				while (!desertBiome.Place(new Point(x16, (int)GenVars.worldSurfaceHigh + 25), GenVars.structures))
				{
					num961 = WorldGen.genRand.Next(num960) / 2;
					num961 += num960 / 8;
					num961 += WorldGen.genRand.Next(num962 / 12);
					x16 = num960 + num961 * -num959;
					if (++num962 > Main.maxTilesX / 4)
					{
						num959 *= -1;
						num962 = 0;
						num958++;
						if (num958 >= 2)
						{
							GenVars.skipDesertTileCheck = true;
						}
					}
				}
				if (WorldGen.remixWorldGen)
				{
					for (int num963 = 50; num963 < Main.maxTilesX - 50; num963++)
					{
						for (int num964 = (int)Main.rockLayer + WorldGen.genRand.Next(-1, 2); num964 < Main.maxTilesY - 50; num964++)
						{
							if ((*Main.tile[num963, num964].type == 396 || *Main.tile[num963, num964].type == 397 || *Main.tile[num963, num964].type == 53) && !WorldGen.SolidTile(num963, num964 - 1, false))
							{
								int num965 = num964;
								while (num965 < num964 + WorldGen.genRand.Next(4, 7) && Main.tile[num963, num965 + 1].active() && (*Main.tile[num963, num965].type == 396 || *Main.tile[num963, num965].type == 397))
								{
									*Main.tile[num963, num965].type = 53;
									num965++;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Floating Islands", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				GenVars.numIslandHouses = 0;
				GenVars.skyIslandHouseCount = 0;
				progress.Message = Lang.gen[12].Value;
				int num948 = (int)((double)Main.maxTilesX * 0.0008);
				int num949 = 0;
				double num950 = (double)(num948 + GenVars.skyLakes);
				int num951 = 0;
				while ((double)num951 < num950)
				{
					progress.Set((double)num951 / num950);
					int num952 = Main.maxTilesX;
					while (--num952 > 0)
					{
						bool flag57 = true;
						int num953 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
						while (num953 > Main.maxTilesX / 2 - 150 && num953 < Main.maxTilesX / 2 + 150)
						{
							num953 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
						}
						for (int num954 = 0; num954 < GenVars.numIslandHouses; num954++)
						{
							if (num953 > GenVars.floatingIslandHouseX[num954] - 180 && num953 < GenVars.floatingIslandHouseX[num954] + 180)
							{
								flag57 = false;
								break;
							}
						}
						if (flag57)
						{
							flag57 = false;
							int num955 = 0;
							int num956 = 200;
							while ((double)num956 < Main.worldSurface)
							{
								if (Main.tile[num953, num956].active())
								{
									num955 = num956;
									flag57 = true;
									break;
								}
								num956++;
							}
							if (flag57)
							{
								int num957 = 0;
								num952 = -1;
								int val = WorldGen.genRand.Next(90, num955 - 100);
								val = Math.Min(val, (int)GenVars.worldSurfaceLow - 50);
								if (num949 >= num948)
								{
									GenVars.skyLake[GenVars.numIslandHouses] = true;
									WorldGen.CloudLake(num953, val);
								}
								else
								{
									GenVars.skyLake[GenVars.numIslandHouses] = false;
									if (WorldGen.drunkWorldGen && !WorldGen.remixWorldGen)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											num957 = 3;
											WorldGen.SnowCloudIsland(num953, val);
										}
										else
										{
											num957 = 1;
											WorldGen.DesertCloudIsland(num953, val);
										}
									}
									else
									{
										if (WorldGen.remixWorldGen && WorldGen.drunkWorldGen)
										{
											num957 = ((GenVars.crimsonLeft && num953 < Main.maxTilesX / 2) ? 5 : ((GenVars.crimsonLeft || num953 <= Main.maxTilesX / 2) ? 4 : 5));
										}
										else if (WorldGen.getGoodWorldGen || WorldGen.remixWorldGen)
										{
											num957 = ((!WorldGen.crimson) ? 4 : 5);
										}
										else if (Main.tenthAnniversaryWorld)
										{
											num957 = 6;
										}
										WorldGen.CloudIsland(num953, val);
									}
								}
								GenVars.floatingIslandHouseX[GenVars.numIslandHouses] = num953;
								GenVars.floatingIslandHouseY[GenVars.numIslandHouses] = val;
								GenVars.floatingIslandStyle[GenVars.numIslandHouses] = num957;
								GenVars.numIslandHouses++;
								num949++;
							}
						}
					}
					num951++;
				}
			});
			WorldGen.AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[13].Value;
				if (WorldGen.remixWorldGen)
				{
					for (int num927 = 10; num927 < Main.maxTilesX - 10; num927++)
					{
						for (int num928 = Main.maxTilesY + WorldGen.genRand.Next(3) - 350; num928 < Main.maxTilesY - 10; num928++)
						{
							if (*Main.tile[num927, num928].type == 0)
							{
								*Main.tile[num927, num928].type = 59;
							}
						}
					}
				}
				double num929 = (double)Main.maxTilesX / 700.0;
				if (num929 > (double)GenVars.maxMushroomBiomes)
				{
					num929 = (double)GenVars.maxMushroomBiomes;
				}
				int num930 = 0;
				while ((double)num930 < num929)
				{
					int num931 = 0;
					bool flag56 = true;
					while (flag56)
					{
						int num932 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
						if (num931 > Main.maxTilesX / 4)
						{
							num932 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25), (int)((double)Main.maxTilesX * 0.975));
						}
						int num933 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)Main.rockLayer + 50, Main.maxTilesY - 300) : WorldGen.genRand.Next((int)Main.worldSurface + 50, (int)Main.rockLayer - 50);
						flag56 = false;
						int num934 = 100;
						int num935 = 500;
						for (int num936 = num932 - num934; num936 < num932 + num934; num936 += 3)
						{
							for (int num937 = num933 - num934; num937 < num933 + num934; num937 += 3)
							{
								if (WorldGen.InWorld(num936, num937, 0))
								{
									if (*Main.tile[num936, num937].type == 147 || *Main.tile[num936, num937].type == 161 || *Main.tile[num936, num937].type == 162 || *Main.tile[num936, num937].type == 60 || *Main.tile[num936, num937].type == 368 || *Main.tile[num936, num937].type == 367)
									{
										flag56 = true;
										break;
									}
									if (GenVars.UndergroundDesertLocation.Contains(new Point(num936, num937)))
									{
										flag56 = true;
										break;
									}
								}
								else
								{
									flag56 = true;
								}
							}
						}
						if (!flag56)
						{
							for (int num938 = 0; num938 < GenVars.numMushroomBiomes; num938++)
							{
								if (Vector2D.Distance(GenVars.mushroomBiomesPosition[num938].ToVector2D(), new Vector2D((double)num932, (double)num933)) < (double)num935)
								{
									flag56 = true;
								}
							}
						}
						if (!flag56 && GenVars.numMushroomBiomes < GenVars.maxMushroomBiomes)
						{
							WorldGen.ShroomPatch(num932, num933);
							for (int num939 = 0; num939 < 5; num939++)
							{
								int i = num932 + WorldGen.genRand.Next(-40, 41);
								int j6 = num933 + WorldGen.genRand.Next(-40, 41);
								WorldGen.ShroomPatch(i, j6);
							}
							GenVars.mushroomBiomesPosition[GenVars.numMushroomBiomes].X = num932;
							GenVars.mushroomBiomesPosition[GenVars.numMushroomBiomes].Y = num933;
							GenVars.numMushroomBiomes++;
						}
						num931++;
						if (num931 > Main.maxTilesX / 2)
						{
							break;
						}
					}
					num930++;
				}
				for (int num940 = 0; num940 < Main.maxTilesX; num940++)
				{
					progress.Set((double)num940 / (double)Main.maxTilesX);
					for (int num941 = (int)Main.worldSurface; num941 < Main.maxTilesY; num941++)
					{
						if (WorldGen.InWorld(num940, num941, 50) && Main.tile[num940, num941].active())
						{
							WorldGen.grassSpread = 0;
							WorldGen.SpreadGrass(num940, num941, 59, 70, false, default(TileColorCache));
						}
					}
				}
				for (int num942 = 0; num942 < Main.maxTilesX; num942++)
				{
					for (int num943 = (int)Main.worldSurface; num943 < Main.maxTilesY; num943++)
					{
						if (Main.tile[num942, num943].active() && *Main.tile[num942, num943].type == 70)
						{
							int type10 = 59;
							for (int num944 = num942 - 1; num944 <= num942 + 1; num944++)
							{
								for (int num945 = num943 - 1; num945 <= num943 + 1; num945++)
								{
									if (Main.tile[num944, num945].active())
									{
										if (!Main.tile[num944 - 1, num945].active() && !Main.tile[num944 + 1, num945].active())
										{
											WorldGen.KillTile(num944, num945, false, false, false);
										}
										else if (!Main.tile[num944, num945 - 1].active() && !Main.tile[num944, num945 + 1].active())
										{
											WorldGen.KillTile(num944, num945, false, false, false);
										}
									}
									else if (Main.tile[num944 - 1, num945].active() && Main.tile[num944 + 1, num945].active())
									{
										WorldGen.PlaceTile(num944, num945, type10, false, false, -1, 0);
										if (*Main.tile[num944 - 1, num943].type == 70)
										{
											*Main.tile[num944 - 1, num943].type = 59;
										}
										if (*Main.tile[num944 + 1, num943].type == 70)
										{
											*Main.tile[num944 + 1, num943].type = 59;
										}
									}
									else if (Main.tile[num944, num945 - 1].active() && Main.tile[num944, num945 + 1].active())
									{
										WorldGen.PlaceTile(num944, num945, type10, false, false, -1, 0);
										if (*Main.tile[num944, num943 - 1].type == 70)
										{
											*Main.tile[num944, num943 - 1].type = 59;
										}
										if (*Main.tile[num944, num943 + 1].type == 70)
										{
											*Main.tile[num944, num943 + 1].type = 59;
										}
									}
								}
							}
							if (WorldGen.genRand.Next(4) == 0)
							{
								int num946 = num942 + WorldGen.genRand.Next(-20, 21);
								int num947 = num943 + WorldGen.genRand.Next(-20, 21);
								if (WorldGen.InWorld(num946, num947, 0) && *Main.tile[num946, num947].type == 59)
								{
									*Main.tile[num946, num947].type = 70;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Marble", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[80].Value;
				int num922 = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num923 = (double)(Main.maxTilesX - 160) / (double)num922;
				MarbleBiome marbleBiome = GenVars.configuration.CreateBiome<MarbleBiome>();
				int num924 = 0;
				int num925 = 0;
				while (num925 < num922)
				{
					double num926 = (double)num925 / (double)num922;
					progress.Set(num926);
					Point origin4 = WorldGen.RandomRectanglePoint((int)(num926 * (double)(Main.maxTilesX - 160)) + 80, (int)GenVars.rockLayer + 20, (int)num923, Main.maxTilesY - ((int)GenVars.rockLayer + 40) - 200);
					if (WorldGen.remixWorldGen)
					{
						origin4 = WorldGen.RandomRectanglePoint((int)(num926 * (double)(Main.maxTilesX - 160)) + 80, (int)GenVars.worldSurface + 100, (int)num923, (int)GenVars.rockLayer - (int)GenVars.worldSurface - 100);
					}
					while ((double)origin4.X > (double)Main.maxTilesX * 0.45 && (double)origin4.X < (double)Main.maxTilesX * 0.55)
					{
						origin4.X = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
					}
					num924++;
					if (marbleBiome.Place(origin4, GenVars.structures))
					{
						num925++;
						num924 = 0;
					}
					else if (num924 > Main.maxTilesX * 10)
					{
						num922 = num925;
						num925++;
						num924 = 0;
					}
				}
			});
			WorldGen.AddGenerationPass("Granite", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[81].Value;
				int num916 = passConfig.Get<WorldGenRange>("Count").GetRandom(WorldGen.genRand);
				double num917 = (double)(Main.maxTilesX - 200) / (double)num916;
				List<Point> list2 = new List<Point>(num916);
				int num918 = 0;
				int num919 = 0;
				while (num919 < num916)
				{
					double num920 = (double)num919 / (double)num916;
					progress.Set(num920);
					Point point3 = WorldGen.RandomRectanglePoint((int)(num920 * (double)(Main.maxTilesX - 200)) + 100, (int)GenVars.rockLayer + 20, (int)num917, Main.maxTilesY - ((int)GenVars.rockLayer + 40) - 200);
					if (WorldGen.remixWorldGen)
					{
						point3 = WorldGen.RandomRectanglePoint((int)(num920 * (double)(Main.maxTilesX - 200)) + 100, (int)GenVars.worldSurface + 100, (int)num917, (int)GenVars.rockLayer - (int)GenVars.worldSurface - 100);
					}
					while ((double)point3.X > (double)Main.maxTilesX * 0.45 && (double)point3.X < (double)Main.maxTilesX * 0.55)
					{
						point3.X = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
					}
					num918++;
					if (GraniteBiome.CanPlace(point3, GenVars.structures))
					{
						list2.Add(point3);
						num919++;
					}
					else if (num918 > Main.maxTilesX * 10)
					{
						num916 = num919;
						num919++;
						num918 = 0;
					}
				}
				GraniteBiome graniteBiome = GenVars.configuration.CreateBiome<GraniteBiome>();
				for (int num921 = 0; num921 < num916; num921++)
				{
					graniteBiome.Place(list2[num921], GenVars.structures);
				}
			});
			WorldGen.AddGenerationPass("Dirt To Mud", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[14].Value;
				double num914 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.001;
				int num915 = 0;
				while ((double)num915 < num914)
				{
					progress.Set((double)num915 / num914);
					if (WorldGen.remixWorldGen)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)GenVars.rockLayerLow), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 59, false, 0.0, 0.0, false, true, 53);
					}
					else
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 59, false, 0.0, 0.0, false, true, 53);
					}
					num915++;
				}
			});
			WorldGen.AddGenerationPass("Silt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[15].Value;
				for (int num908 = 0; num908 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001); num908++)
				{
					int num909 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num910 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
					if (WorldGen.remixWorldGen)
					{
						num910 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					if (*Main.tile[num909, num910].wall != 187 && *Main.tile[num909, num910].wall != 216)
					{
						WorldGen.TileRunner(num909, num910, (double)WorldGen.genRand.Next(5, 12), WorldGen.genRand.Next(15, 50), 123, false, 0.0, 0.0, false, true, -1);
					}
				}
				for (int num911 = 0; num911 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005); num911++)
				{
					int num912 = WorldGen.genRand.Next(0, Main.maxTilesX);
					int num913 = WorldGen.genRand.Next((int)GenVars.rockLayerHigh, Main.maxTilesY);
					if (WorldGen.remixWorldGen)
					{
						num913 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					if (*Main.tile[num912, num913].wall != 187 && *Main.tile[num912, num913].wall != 216)
					{
						WorldGen.TileRunner(num912, num913, (double)WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(2, 5), 123, false, 0.0, 0.0, false, true, -1);
					}
				}
			});
			WorldGen.AddGenerationPass("Shinies", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[16].Value;
				if (WorldGen.remixWorldGen)
				{
					for (int num878 = 0; num878 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); num878++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num879 = 0; num879 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num879++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num880 = 0; num880 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num880++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num881 = 0; num881 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); num881++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num882 = 0; num882 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num882++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num883 = 0; num883 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num883++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num884 = 0; num884 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num884++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer - 100, Main.maxTilesY - 250), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num885 = 0; num885 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num885++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num886 = 0; num886 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num886++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num887 = 0; num887 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num887++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					for (int num888 = 0; num888 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num888++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					if (WorldGen.drunkWorldGen)
					{
						for (int num889 = 0; num889 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num889++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						for (int num890 = 0; num890 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num890++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
						}
					}
					if (WorldGen.crimson)
					{
						for (int num891 = 0; num891 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 4.25E-05); num891++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						return;
					}
					for (int num892 = 0; num892 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 4.25E-05); num892++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
					}
					return;
				}
				else
				{
					for (int num893 = 0; num893 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); num893++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num894 = 0; num894 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num894++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num895 = 0; num895 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num895++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.copper = 7;
							}
							else
							{
								GenVars.copper = 166;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.copper, false, 0.0, 0.0, false, true, -1);
					}
					for (int num896 = 0; num896 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); num896++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num897 = 0; num897 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num897++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num898 = 0; num898 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num898++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.iron = 6;
							}
							else
							{
								GenVars.iron = 167;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.iron, false, 0.0, 0.0, false, true, -1);
					}
					for (int num899 = 0; num899 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num899++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, (int)GenVars.rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num900 = 0; num900 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num900++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num901 = 0; num901 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num901++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.silver = 9;
							}
							else
							{
								GenVars.silver = 168;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), GenVars.silver, false, 0.0, 0.0, false, true, -1);
					}
					for (int num902 = 0; num902 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num902++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					for (int num903 = 0; num903 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num903++)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								GenVars.gold = 8;
							}
							else
							{
								GenVars.gold = 169;
							}
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)GenVars.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), GenVars.gold, false, 0.0, 0.0, false, true, -1);
					}
					if (WorldGen.drunkWorldGen)
					{
						for (int num904 = 0; num904 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num904++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						for (int num905 = 0; num905 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05 / 2.0); num905++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
						}
					}
					if (WorldGen.crimson)
					{
						for (int num906 = 0; num906 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05); num906++)
						{
							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 204, false, 0.0, 0.0, false, true, -1);
						}
						return;
					}
					for (int num907 = 0; num907 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.25E-05); num907++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(4, 8), 22, false, 0.0, 0.0, false, true, -1);
					}
					return;
				}
			});
			WorldGen.AddGenerationPass("Webs", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[17].Value;
				for (int num874 = 0; num874 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006); num874++)
				{
					int num875 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num876 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY - 20);
					if (num874 < GenVars.numMCaves)
					{
						num875 = GenVars.mCaveX[num874];
						num876 = GenVars.mCaveY[num874];
					}
					if (!Main.tile[num875, num876].active())
					{
						if ((double)num876 <= Main.worldSurface)
						{
							if (*Main.tile[num875, num876].wall <= 0)
							{
								goto IL_15F;
							}
						}
						while (!Main.tile[num875, num876].active() && num876 > (int)GenVars.worldSurfaceLow)
						{
							num876--;
						}
						num876++;
						int num877 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num877 = -1;
						}
						while (!Main.tile[num875, num876].active() && num875 > 10 && num875 < Main.maxTilesX - 10)
						{
							num875 += num877;
						}
						num875 -= num877;
						if ((double)num876 > Main.worldSurface || *Main.tile[num875, num876].wall > 0)
						{
							WorldGen.TileRunner(num875, num876, (double)WorldGen.genRand.Next(4, 11), WorldGen.genRand.Next(2, 4), 51, true, (double)num877, -1.0, false, false, -1);
						}
					}
					IL_15F:;
				}
			});
			WorldGen.AddGenerationPass("Underworld", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[18].Value;
				progress.Set(0.0);
				int num838 = Main.maxTilesY - WorldGen.genRand.Next(150, 190);
				for (int num839 = 0; num839 < Main.maxTilesX; num839++)
				{
					num838 += WorldGen.genRand.Next(-3, 4);
					if (num838 < Main.maxTilesY - 190)
					{
						num838 = Main.maxTilesY - 190;
					}
					if (num838 > Main.maxTilesY - 160)
					{
						num838 = Main.maxTilesY - 160;
					}
					for (int num840 = num838 - 20 - WorldGen.genRand.Next(3); num840 < Main.maxTilesY; num840++)
					{
						if (num840 >= num838)
						{
							Main.tile[num839, num840].active(false);
							Main.tile[num839, num840].lava(false);
							*Main.tile[num839, num840].liquid = 0;
						}
						else
						{
							*Main.tile[num839, num840].type = 57;
						}
					}
				}
				int num841 = Main.maxTilesY - WorldGen.genRand.Next(40, 70);
				for (int num842 = 10; num842 < Main.maxTilesX - 10; num842++)
				{
					num841 += WorldGen.genRand.Next(-10, 11);
					if (num841 > Main.maxTilesY - 60)
					{
						num841 = Main.maxTilesY - 60;
					}
					if (num841 < Main.maxTilesY - 100)
					{
						num841 = Main.maxTilesY - 120;
					}
					for (int num843 = num841; num843 < Main.maxTilesY - 10; num843++)
					{
						if (!Main.tile[num842, num843].active())
						{
							Main.tile[num842, num843].lava(true);
							*Main.tile[num842, num843].liquid = byte.MaxValue;
						}
					}
				}
				for (int num844 = 0; num844 < Main.maxTilesX; num844++)
				{
					if (WorldGen.genRand.Next(50) == 0)
					{
						int num845 = Main.maxTilesY - 65;
						while (!Main.tile[num844, num845].active() && num845 > Main.maxTilesY - 135)
						{
							num845--;
						}
						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), num845 + WorldGen.genRand.Next(20, 50), (double)WorldGen.genRand.Next(15, 20), 1000, 57, true, 0.0, (double)WorldGen.genRand.Next(1, 3), true, true, -1);
					}
				}
				Liquid.QuickWater(-2, -1, -1);
				for (int num846 = 0; num846 < Main.maxTilesX; num846++)
				{
					double num847 = (double)num846 / (double)(Main.maxTilesX - 1);
					progress.Set(num847 / 2.0 + 0.5);
					if (WorldGen.genRand.Next(13) == 0)
					{
						int num848 = Main.maxTilesY - 65;
						while ((*Main.tile[num846, num848].liquid > 0 || Main.tile[num846, num848].active()) && num848 > Main.maxTilesY - 140)
						{
							num848--;
						}
						if ((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || WorldGen.genRand.Next(3) == 0 || (double)num846 <= (double)Main.maxTilesX * 0.4 || (double)num846 >= (double)Main.maxTilesX * 0.6)
						{
							WorldGen.TileRunner(num846, num848 - WorldGen.genRand.Next(2, 5), (double)WorldGen.genRand.Next(5, 30), 1000, 57, true, 0.0, (double)WorldGen.genRand.Next(1, 3), true, true, -1);
						}
						double num849 = (double)WorldGen.genRand.Next(1, 3);
						if (WorldGen.genRand.Next(3) == 0)
						{
							num849 *= 0.5;
						}
						if ((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || WorldGen.genRand.Next(3) == 0 || (double)num846 <= (double)Main.maxTilesX * 0.4 || (double)num846 >= (double)Main.maxTilesX * 0.6)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.TileRunner(num846, num848 - WorldGen.genRand.Next(2, 5), (double)((int)((double)WorldGen.genRand.Next(5, 15) * num849)), (int)((double)WorldGen.genRand.Next(10, 15) * num849), 57, true, 1.0, 0.3, false, true, -1);
							}
							if (WorldGen.genRand.Next(2) == 0)
							{
								num849 = (double)WorldGen.genRand.Next(1, 3);
								WorldGen.TileRunner(num846, num848 - WorldGen.genRand.Next(2, 5), (double)((int)((double)WorldGen.genRand.Next(5, 15) * num849)), (int)((double)WorldGen.genRand.Next(10, 15) * num849), 57, true, -1.0, 0.3, false, true, -1);
							}
						}
						WorldGen.TileRunner(num846 + WorldGen.genRand.Next(-10, 10), num848 + WorldGen.genRand.Next(-10, 10), (double)WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(5, 10), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						if (WorldGen.genRand.Next(3) == 0)
						{
							WorldGen.TileRunner(num846 + WorldGen.genRand.Next(-10, 10), num848 + WorldGen.genRand.Next(-10, 10), (double)WorldGen.genRand.Next(10, 30), WorldGen.genRand.Next(10, 20), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							WorldGen.TileRunner(num846 + WorldGen.genRand.Next(-15, 15), num848 + WorldGen.genRand.Next(-15, 10), (double)WorldGen.genRand.Next(15, 30), WorldGen.genRand.Next(5, 20), -2, false, (double)WorldGen.genRand.Next(-1, 3), (double)WorldGen.genRand.Next(-1, 3), false, true, -1);
						}
					}
				}
				for (int num850 = 0; num850 < Main.maxTilesX; num850++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(20, Main.maxTilesX - 20), WorldGen.genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 7), -2, false, 0.0, 0.0, false, true, -1);
				}
				if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
				{
					for (int num851 = 0; num851 < Main.maxTilesX * 2; num851++)
					{
						WorldGen.TileRunner(WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.35), (int)((double)Main.maxTilesX * 0.65)), WorldGen.genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double)WorldGen.genRand.Next(5, 20), WorldGen.genRand.Next(5, 10), -2, false, 0.0, 0.0, false, true, -1);
					}
				}
				for (int num852 = 0; num852 < Main.maxTilesX; num852++)
				{
					if (!Main.tile[num852, Main.maxTilesY - 145].active())
					{
						*Main.tile[num852, Main.maxTilesY - 145].liquid = byte.MaxValue;
						Main.tile[num852, Main.maxTilesY - 145].lava(true);
					}
					if (!Main.tile[num852, Main.maxTilesY - 144].active())
					{
						*Main.tile[num852, Main.maxTilesY - 144].liquid = byte.MaxValue;
						Main.tile[num852, Main.maxTilesY - 144].lava(true);
					}
				}
				for (int num853 = 0; num853 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num853++)
				{
					WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(3, 7), 58, false, 0.0, 0.0, false, true, -1);
				}
				if (WorldGen.remixWorldGen)
				{
					int num854 = (int)((double)Main.maxTilesX * 0.38);
					int num855 = (int)((double)Main.maxTilesX * 0.62);
					int num856 = num854;
					int num857 = Main.maxTilesY - 1;
					int num858 = Main.maxTilesY - 135;
					int num859 = Main.maxTilesY - 160;
					bool flag55 = false;
					Liquid.QuickWater(-2, -1, -1);
					while (num857 < Main.maxTilesY - 1 || num856 < num855)
					{
						if (!flag55)
						{
							num857 -= WorldGen.genRand.Next(1, 4);
							if (num857 < num858)
							{
								flag55 = true;
							}
						}
						else if (num856 >= num855)
						{
							num857 += WorldGen.genRand.Next(1, 4);
							if (num857 > Main.maxTilesY - 1)
							{
								num857 = Main.maxTilesY - 1;
							}
						}
						else
						{
							if ((num856 <= Main.maxTilesX / 2 - 5 || num856 >= Main.maxTilesX / 2 + 5) && WorldGen.genRand.Next(4) == 0)
							{
								if (WorldGen.genRand.Next(3) == 0)
								{
									num857 += WorldGen.genRand.Next(-1, 2);
								}
								else if (WorldGen.genRand.Next(6) == 0)
								{
									num857 += WorldGen.genRand.Next(-2, 3);
								}
								else if (WorldGen.genRand.Next(8) == 0)
								{
									num857 += WorldGen.genRand.Next(-4, 5);
								}
							}
							if (num857 < num859)
							{
								num857 = num859;
							}
							if (num857 > num858)
							{
								num857 = num858;
							}
						}
						for (int num860 = num857; num860 > num857 - 20; num860--)
						{
							*Main.tile[num856, num860].liquid = 0;
						}
						for (int num861 = num857; num861 < Main.maxTilesY; num861++)
						{
							Main.tile[num856, num861].Clear(TileDataType.All);
							Main.tile[num856, num861].active(true);
							*Main.tile[num856, num861].type = 57;
						}
						num856++;
					}
					Liquid.QuickWater(-2, -1, -1);
					for (int num862 = num854; num862 < num855 + 15; num862++)
					{
						for (int num863 = Main.maxTilesY - 300; num863 < num858 + 20; num863++)
						{
							*Main.tile[num862, num863].liquid = 0;
							if (*Main.tile[num862, num863].type == 57 && Main.tile[num862, num863].active() && (!Main.tile[num862 - 1, num863 - 1].active() || !Main.tile[num862, num863 - 1].active() || !Main.tile[num862 + 1, num863 - 1].active() || !Main.tile[num862 - 1, num863].active() || !Main.tile[num862 + 1, num863].active() || !Main.tile[num862 - 1, num863 + 1].active() || !Main.tile[num862, num863 + 1].active() || !Main.tile[num862 + 1, num863 + 1].active()))
							{
								*Main.tile[num862, num863].type = 633;
							}
						}
					}
					for (int num864 = num854; num864 < num855 + 15; num864++)
					{
						for (int num865 = Main.maxTilesY - 200; num865 < num858 + 20; num865++)
						{
							if (*Main.tile[num864, num865].type == 633 && Main.tile[num864, num865].active() && !Main.tile[num864, num865 - 1].active() && WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.TryGrowingTreeByType(634, num864, num865);
							}
						}
					}
				}
				else if (!WorldGen.drunkWorldGen)
				{
					for (int num866 = 25; num866 < Main.maxTilesX - 25; num866++)
					{
						if ((double)num866 < (double)Main.maxTilesX * 0.17 || (double)num866 > (double)Main.maxTilesX * 0.83)
						{
							for (int num867 = Main.maxTilesY - 300; num867 < Main.maxTilesY - 100 + WorldGen.genRand.Next(-1, 2); num867++)
							{
								if (*Main.tile[num866, num867].type == 57 && Main.tile[num866, num867].active() && (!Main.tile[num866 - 1, num867 - 1].active() || !Main.tile[num866, num867 - 1].active() || !Main.tile[num866 + 1, num867 - 1].active() || !Main.tile[num866 - 1, num867].active() || !Main.tile[num866 + 1, num867].active() || !Main.tile[num866 - 1, num867 + 1].active() || !Main.tile[num866, num867 + 1].active() || !Main.tile[num866 + 1, num867 + 1].active()))
								{
									*Main.tile[num866, num867].type = 633;
								}
							}
						}
					}
					for (int num868 = 25; num868 < Main.maxTilesX - 25; num868++)
					{
						if ((double)num868 < (double)Main.maxTilesX * 0.17 || (double)num868 > (double)Main.maxTilesX * 0.83)
						{
							for (int num869 = Main.maxTilesY - 200; num869 < Main.maxTilesY - 50; num869++)
							{
								if (*Main.tile[num868, num869].type == 633 && Main.tile[num868, num869].active() && !Main.tile[num868, num869 - 1].active() && WorldGen.genRand.Next(3) == 0)
								{
									WorldGen.TryGrowingTreeByType(634, num868, num869);
								}
							}
						}
					}
				}
				WorldGen.AddHellHouses();
				if (WorldGen.drunkWorldGen)
				{
					for (int num870 = 25; num870 < Main.maxTilesX - 25; num870++)
					{
						for (int num871 = Main.maxTilesY - 300; num871 < Main.maxTilesY - 100 + WorldGen.genRand.Next(-1, 2); num871++)
						{
							if (*Main.tile[num870, num871].type == 57 && Main.tile[num870, num871].active() && (!Main.tile[num870 - 1, num871 - 1].active() || !Main.tile[num870, num871 - 1].active() || !Main.tile[num870 + 1, num871 - 1].active() || !Main.tile[num870 - 1, num871].active() || !Main.tile[num870 + 1, num871].active() || !Main.tile[num870 - 1, num871 + 1].active() || !Main.tile[num870, num871 + 1].active() || !Main.tile[num870 + 1, num871 + 1].active()))
							{
								*Main.tile[num870, num871].type = 633;
							}
						}
					}
					for (int num872 = 25; num872 < Main.maxTilesX - 25; num872++)
					{
						for (int num873 = Main.maxTilesY - 200; num873 < Main.maxTilesY - 50; num873++)
						{
							if (*Main.tile[num872, num873].type == 633 && Main.tile[num872, num873].active() && !Main.tile[num872, num873 - 1].active() && WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.TryGrowingTreeByType(634, num872, num873);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Corruption", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num778 = Main.maxTilesX;
				int num779 = 0;
				int num780 = Main.maxTilesX;
				int num781 = 0;
				for (int num782 = 0; num782 < Main.maxTilesX; num782++)
				{
					int num783 = 0;
					while ((double)num783 < Main.worldSurface)
					{
						if (Main.tile[num782, num783].active())
						{
							if (*Main.tile[num782, num783].type == 60)
							{
								if (num782 < num778)
								{
									num778 = num782;
								}
								if (num782 > num779)
								{
									num779 = num782;
								}
							}
							else if (*Main.tile[num782, num783].type == 147 || *Main.tile[num782, num783].type == 161)
							{
								if (num782 < num780)
								{
									num780 = num782;
								}
								if (num782 > num781)
								{
									num781 = num782;
								}
							}
						}
						num783++;
					}
				}
				int num784 = 10;
				num778 -= num784;
				num779 += num784;
				num780 -= num784;
				num781 += num784;
				int num785 = 500;
				int num786 = 100;
				bool flag49 = WorldGen.crimson;
				double num787 = (double)Main.maxTilesX * 0.00045;
				if (WorldGen.remixWorldGen)
				{
					num787 *= 2.0;
				}
				else if (WorldGen.tenthAnniversaryWorldGen)
				{
					num785 *= 2;
					num786 *= 2;
				}
				if (WorldGen.drunkWorldGen)
				{
					flag49 = true;
					num787 /= 2.0;
				}
				if (flag49)
				{
					progress.Message = Lang.gen[72].Value;
					int num788 = 0;
					while ((double)num788 < num787)
					{
						int num789 = num780;
						int num790 = num781;
						int num791 = num778;
						int num792 = num779;
						double value15 = (double)num788 / num787;
						progress.Set(value15);
						bool flag50 = false;
						int num793 = 0;
						int num794 = 0;
						int num795 = 0;
						while (!flag50)
						{
							flag50 = true;
							int num796 = Main.maxTilesX / 2;
							int num797 = 200;
							if (WorldGen.drunkWorldGen)
							{
								num797 = 100;
								num793 = ((!GenVars.crimsonLeft) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5), Main.maxTilesX - num785) : WorldGen.genRand.Next(num785, (int)((double)Main.maxTilesX * 0.5)));
							}
							else
							{
								num793 = WorldGen.genRand.Next(num785, Main.maxTilesX - num785);
							}
							num794 = num793 - WorldGen.genRand.Next(200) - 100;
							num795 = num793 + WorldGen.genRand.Next(200) + 100;
							if (num794 < GenVars.evilBiomeBeachAvoidance)
							{
								num794 = GenVars.evilBiomeBeachAvoidance;
							}
							if (num795 > Main.maxTilesX - GenVars.evilBiomeBeachAvoidance)
							{
								num795 = Main.maxTilesX - GenVars.evilBiomeBeachAvoidance;
							}
							if (num793 < num794 + GenVars.evilBiomeAvoidanceMidFixer)
							{
								num793 = num794 + GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num793 > num795 - GenVars.evilBiomeAvoidanceMidFixer)
							{
								num793 = num795 - GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (GenVars.dungeonSide < 0 && num794 < 400)
							{
								num794 = 400;
							}
							else if (GenVars.dungeonSide > 0 && num794 > Main.maxTilesX - 400)
							{
								num794 = Main.maxTilesX - 400;
							}
							if (num794 < GenVars.dungeonLocation + num786 && num795 > GenVars.dungeonLocation - num786)
							{
								flag50 = false;
							}
							if (!WorldGen.remixWorldGen)
							{
								if (!WorldGen.tenthAnniversaryWorldGen)
								{
									if (num793 > num796 - num797 && num793 < num796 + num797)
									{
										flag50 = false;
									}
									if (num794 > num796 - num797 && num794 < num796 + num797)
									{
										flag50 = false;
									}
									if (num795 > num796 - num797 && num795 < num796 + num797)
									{
										flag50 = false;
									}
								}
								if (num793 > GenVars.UndergroundDesertLocation.X && num793 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag50 = false;
								}
								if (num794 > GenVars.UndergroundDesertLocation.X && num794 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag50 = false;
								}
								if (num795 > GenVars.UndergroundDesertLocation.X && num795 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag50 = false;
								}
								if (num794 < num790 && num795 > num789)
								{
									num789++;
									num790--;
									flag50 = false;
								}
								if (num794 < num792 && num795 > num791)
								{
									num791++;
									num792--;
									flag50 = false;
								}
							}
						}
						WorldGen.CrimStart(num793, (int)GenVars.worldSurfaceLow - 10);
						for (int num798 = num794; num798 < num795; num798++)
						{
							int num799 = (int)GenVars.worldSurfaceLow;
							while ((double)num799 < Main.worldSurface - 1.0)
							{
								if (Main.tile[num798, num799].active())
								{
									int num800 = num799 + WorldGen.genRand.Next(10, 14);
									for (int num801 = num799; num801 < num800; num801++)
									{
										if (*Main.tile[num798, num801].type == 60 && num798 >= num794 + WorldGen.genRand.Next(5) && num798 < num795 - WorldGen.genRand.Next(5))
										{
											*Main.tile[num798, num801].type = 662;
										}
									}
									break;
								}
								num799++;
							}
						}
						double num802 = Main.worldSurface + 40.0;
						for (int num803 = num794; num803 < num795; num803++)
						{
							num802 += (double)WorldGen.genRand.Next(-2, 3);
							if (num802 < Main.worldSurface + 30.0)
							{
								num802 = Main.worldSurface + 30.0;
							}
							if (num802 > Main.worldSurface + 50.0)
							{
								num802 = Main.worldSurface + 50.0;
							}
							bool flag51 = false;
							int num804 = (int)GenVars.worldSurfaceLow;
							while ((double)num804 < num802)
							{
								if (Main.tile[num803, num804].active())
								{
									if (*Main.tile[num803, num804].type == 53 && num803 >= num794 + WorldGen.genRand.Next(5) && num803 <= num795 - WorldGen.genRand.Next(5))
									{
										*Main.tile[num803, num804].type = 234;
									}
									if ((double)num804 < Main.worldSurface - 1.0 && !flag51)
									{
										if (*Main.tile[num803, num804].type == 0)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num803, num804, 0, 199, true, default(TileColorCache));
										}
										else if (*Main.tile[num803, num804].type == 59)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num803, num804, 59, 662, true, default(TileColorCache));
										}
									}
									flag51 = true;
									if (*Main.tile[num803, num804].wall == 216)
									{
										*Main.tile[num803, num804].wall = 218;
									}
									else if (*Main.tile[num803, num804].wall == 187)
									{
										*Main.tile[num803, num804].wall = 221;
									}
									if (*Main.tile[num803, num804].type == 1)
									{
										if (num803 >= num794 + WorldGen.genRand.Next(5) && num803 <= num795 - WorldGen.genRand.Next(5))
										{
											*Main.tile[num803, num804].type = 203;
										}
									}
									else if (*Main.tile[num803, num804].type == 2)
									{
										*Main.tile[num803, num804].type = 199;
									}
									else if (*Main.tile[num803, num804].type == 60)
									{
										*Main.tile[num803, num804].type = 662;
									}
									else if (*Main.tile[num803, num804].type == 161)
									{
										*Main.tile[num803, num804].type = 200;
									}
									else if (*Main.tile[num803, num804].type == 396)
									{
										*Main.tile[num803, num804].type = 401;
									}
									else if (*Main.tile[num803, num804].type == 397)
									{
										*Main.tile[num803, num804].type = 399;
									}
								}
								num804++;
							}
						}
						int num805 = WorldGen.genRand.Next(10, 15);
						for (int num806 = 0; num806 < num805; num806++)
						{
							int num807 = 0;
							bool flag52 = false;
							int num808 = 0;
							while (!flag52)
							{
								num807++;
								int num809 = WorldGen.genRand.Next(num794 - num808, num795 + num808);
								int num810 = WorldGen.genRand.Next((int)(Main.worldSurface - (double)(num808 / 2)), (int)(Main.worldSurface + 100.0 + (double)num808));
								while (WorldGen.oceanDepths(num809, num810))
								{
									num809 = WorldGen.genRand.Next(num794 - num808, num795 + num808);
									num810 = WorldGen.genRand.Next((int)(Main.worldSurface - (double)(num808 / 2)), (int)(Main.worldSurface + 100.0 + (double)num808));
								}
								if (num807 > 100)
								{
									num808++;
									num807 = 0;
								}
								if (!Main.tile[num809, num810].active())
								{
									while (!Main.tile[num809, num810].active())
									{
										num810++;
									}
									num810--;
								}
								else
								{
									while (Main.tile[num809, num810].active() && (double)num810 > Main.worldSurface)
									{
										num810--;
									}
								}
								if ((num808 > 10 || (Main.tile[num809, num810 + 1].active() && *Main.tile[num809, num810 + 1].type == 203)) && !WorldGen.IsTileNearby(num809, num810, 26, 3))
								{
									WorldGen.Place3x2(num809, num810, 26, 1);
									if (*Main.tile[num809, num810].type == 26)
									{
										flag52 = true;
									}
								}
								if (num808 > 100)
								{
									flag52 = true;
								}
							}
						}
						num788++;
					}
					WorldGen.CrimPlaceHearts();
				}
				if (WorldGen.drunkWorldGen)
				{
					flag49 = false;
				}
				if (!flag49)
				{
					progress.Message = Lang.gen[20].Value;
					int num811 = 0;
					while ((double)num811 < num787)
					{
						int num812 = num780;
						int num813 = num781;
						int num814 = num778;
						int num815 = num779;
						double value16 = (double)num811 / num787;
						progress.Set(value16);
						bool flag53 = false;
						int num816 = 0;
						int num817 = 0;
						int num818 = 0;
						while (!flag53)
						{
							flag53 = true;
							int num819 = Main.maxTilesX / 2;
							int num820 = 200;
							num816 = ((!WorldGen.drunkWorldGen) ? WorldGen.genRand.Next(num785, Main.maxTilesX - num785) : (GenVars.crimsonLeft ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5), Main.maxTilesX - num785) : WorldGen.genRand.Next(num785, (int)((double)Main.maxTilesX * 0.5))));
							num817 = num816 - WorldGen.genRand.Next(200) - 100;
							num818 = num816 + WorldGen.genRand.Next(200) + 100;
							if (num817 < GenVars.evilBiomeBeachAvoidance)
							{
								num817 = GenVars.evilBiomeBeachAvoidance;
							}
							if (num818 > Main.maxTilesX - GenVars.evilBiomeBeachAvoidance)
							{
								num818 = Main.maxTilesX - GenVars.evilBiomeBeachAvoidance;
							}
							if (num816 < num817 + GenVars.evilBiomeAvoidanceMidFixer)
							{
								num816 = num817 + GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num816 > num818 - GenVars.evilBiomeAvoidanceMidFixer)
							{
								num816 = num818 - GenVars.evilBiomeAvoidanceMidFixer;
							}
							if (num817 < GenVars.dungeonLocation + num786 && num818 > GenVars.dungeonLocation - num786)
							{
								flag53 = false;
							}
							if (!WorldGen.remixWorldGen)
							{
								if (!WorldGen.tenthAnniversaryWorldGen)
								{
									if (num816 > num819 - num820 && num816 < num819 + num820)
									{
										flag53 = false;
									}
									if (num817 > num819 - num820 && num817 < num819 + num820)
									{
										flag53 = false;
									}
									if (num818 > num819 - num820 && num818 < num819 + num820)
									{
										flag53 = false;
									}
								}
								if (num816 > GenVars.UndergroundDesertLocation.X && num816 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag53 = false;
								}
								if (num817 > GenVars.UndergroundDesertLocation.X && num817 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag53 = false;
								}
								if (num818 > GenVars.UndergroundDesertLocation.X && num818 < GenVars.UndergroundDesertLocation.X + GenVars.UndergroundDesertLocation.Width)
								{
									flag53 = false;
								}
								if (num817 < num813 && num818 > num812)
								{
									num812++;
									num813--;
									flag53 = false;
								}
								if (num817 < num815 && num818 > num814)
								{
									num814++;
									num815--;
									flag53 = false;
								}
							}
						}
						int num821 = 0;
						for (int num822 = num817; num822 < num818; num822++)
						{
							if (num821 > 0)
							{
								num821--;
							}
							if (num822 == num816 || num821 == 0)
							{
								int num823 = (int)GenVars.worldSurfaceLow;
								while ((double)num823 < Main.worldSurface - 1.0)
								{
									if (Main.tile[num822, num823].active() || *Main.tile[num822, num823].wall > 0)
									{
										if (num822 == num816)
										{
											num821 = 20;
											WorldGen.ChasmRunner(num822, num823, WorldGen.genRand.Next(150) + 150, true);
											break;
										}
										if (WorldGen.genRand.Next(35) == 0 && num821 == 0)
										{
											num821 = 30;
											bool makeOrb = true;
											WorldGen.ChasmRunner(num822, num823, WorldGen.genRand.Next(50) + 50, makeOrb);
											break;
										}
										break;
									}
									else
									{
										num823++;
									}
								}
							}
							int num824 = (int)GenVars.worldSurfaceLow;
							while ((double)num824 < Main.worldSurface - 1.0)
							{
								if (Main.tile[num822, num824].active())
								{
									int num825 = num824 + WorldGen.genRand.Next(10, 14);
									for (int num826 = num824; num826 < num825; num826++)
									{
										if (*Main.tile[num822, num826].type == 60 && num822 >= num817 + WorldGen.genRand.Next(5) && num822 < num818 - WorldGen.genRand.Next(5))
										{
											*Main.tile[num822, num826].type = 661;
										}
									}
									break;
								}
								num824++;
							}
						}
						double num827 = Main.worldSurface + 40.0;
						for (int num828 = num817; num828 < num818; num828++)
						{
							num827 += (double)WorldGen.genRand.Next(-2, 3);
							if (num827 < Main.worldSurface + 30.0)
							{
								num827 = Main.worldSurface + 30.0;
							}
							if (num827 > Main.worldSurface + 50.0)
							{
								num827 = Main.worldSurface + 50.0;
							}
							bool flag54 = false;
							int num829 = (int)GenVars.worldSurfaceLow;
							while ((double)num829 < num827)
							{
								if (Main.tile[num828, num829].active())
								{
									if (*Main.tile[num828, num829].type == 53 && num828 >= num817 + WorldGen.genRand.Next(5) && num828 <= num818 - WorldGen.genRand.Next(5))
									{
										*Main.tile[num828, num829].type = 112;
									}
									if ((double)num829 < Main.worldSurface - 1.0 && !flag54)
									{
										if (*Main.tile[num828, num829].type == 0)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num828, num829, 0, 23, true, default(TileColorCache));
										}
										else if (*Main.tile[num828, num829].type == 59)
										{
											WorldGen.grassSpread = 0;
											WorldGen.SpreadGrass(num828, num829, 59, 661, true, default(TileColorCache));
										}
									}
									flag54 = true;
									if (*Main.tile[num828, num829].wall == 216)
									{
										*Main.tile[num828, num829].wall = 217;
									}
									else if (*Main.tile[num828, num829].wall == 187)
									{
										*Main.tile[num828, num829].wall = 220;
									}
									if (*Main.tile[num828, num829].type == 1)
									{
										if (num828 >= num817 + WorldGen.genRand.Next(5) && num828 <= num818 - WorldGen.genRand.Next(5))
										{
											*Main.tile[num828, num829].type = 25;
										}
									}
									else if (*Main.tile[num828, num829].type == 2)
									{
										*Main.tile[num828, num829].type = 23;
									}
									else if (*Main.tile[num828, num829].type == 60)
									{
										*Main.tile[num828, num829].type = 661;
									}
									else if (*Main.tile[num828, num829].type == 161)
									{
										*Main.tile[num828, num829].type = 163;
									}
									else if (*Main.tile[num828, num829].type == 396)
									{
										*Main.tile[num828, num829].type = 400;
									}
									else if (*Main.tile[num828, num829].type == 397)
									{
										*Main.tile[num828, num829].type = 398;
									}
								}
								num829++;
							}
						}
						for (int num830 = num817; num830 < num818; num830++)
						{
							for (int num831 = 0; num831 < Main.maxTilesY - 50; num831++)
							{
								if (Main.tile[num830, num831].active() && *Main.tile[num830, num831].type == 31)
								{
									int num837 = num830 - 13;
									int num832 = num830 + 13;
									int num833 = num831 - 13;
									int num834 = num831 + 13;
									for (int num835 = num837; num835 < num832; num835++)
									{
										if (num835 > 10 && num835 < Main.maxTilesX - 10)
										{
											for (int num836 = num833; num836 < num834; num836++)
											{
												if (Math.Abs(num835 - num830) + Math.Abs(num836 - num831) < 9 + WorldGen.genRand.Next(11) && WorldGen.genRand.Next(3) != 0 && *Main.tile[num835, num836].type != 31)
												{
													Main.tile[num835, num836].active(true);
													*Main.tile[num835, num836].type = 25;
													if (Math.Abs(num835 - num830) <= 1 && Math.Abs(num836 - num831) <= 1)
													{
														Main.tile[num835, num836].active(false);
													}
												}
												if (*Main.tile[num835, num836].type != 31 && Math.Abs(num835 - num830) <= 2 + WorldGen.genRand.Next(3) && Math.Abs(num836 - num831) <= 2 + WorldGen.genRand.Next(3))
												{
													Main.tile[num835, num836].active(false);
												}
											}
										}
									}
								}
							}
						}
						num811++;
					}
				}
			});
			WorldGen.AddGenerationPass("Lakes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[19].Value;
				double num759 = (double)Main.maxTilesX / 4200.0;
				int num760 = WorldGen.genRand.Next((int)(num759 * 3.0), (int)(num759 * 6.0));
				for (int num761 = 0; num761 < num760; num761++)
				{
					int num762 = Main.maxTilesX / 4;
					if (GenVars.numLakes >= GenVars.maxLakes - 1)
					{
						break;
					}
					double value14 = (double)num761 / (double)num760;
					progress.Set(value14);
					while (num762 > 0)
					{
						bool flag48 = false;
						num762--;
						int num763 = WorldGen.genRand.Next(GenVars.lakesBeachAvoidance, Main.maxTilesX - GenVars.lakesBeachAvoidance);
						if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
						{
							num763 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.85));
						}
						else
						{
							while ((double)num763 > (double)Main.maxTilesX * 0.45 && (double)num763 < (double)Main.maxTilesX * 0.55)
							{
								num763 = WorldGen.genRand.Next(GenVars.lakesBeachAvoidance, Main.maxTilesX - GenVars.lakesBeachAvoidance);
							}
						}
						for (int num764 = 0; num764 < GenVars.numLakes; num764++)
						{
							if (Math.Abs(num763 - GenVars.LakeX[num764]) < 150)
							{
								flag48 = true;
								break;
							}
						}
						for (int num765 = 0; num765 < GenVars.numMCaves; num765++)
						{
							if (Math.Abs(num763 - GenVars.mCaveX[num765]) < 100)
							{
								flag48 = true;
								break;
							}
						}
						for (int num766 = 0; num766 < GenVars.numTunnels; num766++)
						{
							if (Math.Abs(num763 - GenVars.tunnelX[num766]) < 100)
							{
								flag48 = true;
								break;
							}
						}
						if (!flag48)
						{
							int num767 = (int)GenVars.worldSurfaceLow - 20;
							while (!Main.tile[num763, num767].active())
							{
								num767++;
								if ((double)num767 >= Main.worldSurface || *Main.tile[num763, num767].wall > 0)
								{
									flag48 = true;
									break;
								}
							}
							if (*Main.tile[num763, num767].type == 53)
							{
								flag48 = true;
							}
							if (!flag48)
							{
								int num768 = 50;
								for (int num769 = num763 - num768; num769 <= num763 + num768; num769++)
								{
									for (int num770 = num767 - num768; num770 <= num767 + num768; num770++)
									{
										if (*Main.tile[num769, num770].type == 203 || *Main.tile[num769, num770].type == 25)
										{
											flag48 = true;
											break;
										}
									}
								}
								if (!flag48)
								{
									int num771 = num767;
									num768 = 20;
									while (!WorldGen.SolidTile(num763 - num768, num767, false) || !WorldGen.SolidTile(num763 + num768, num767, false))
									{
										num767++;
										if ((double)num767 > Main.worldSurface - 50.0)
										{
											flag48 = true;
										}
									}
									if (num767 - num771 <= 10)
									{
										num768 = 60;
										for (int num772 = num763 - num768; num772 <= num763 + num768; num772++)
										{
											int num773 = num767 - 20;
											if (Main.tile[num772, num773].active() || *Main.tile[num772, num773].wall > 0)
											{
												flag48 = true;
											}
										}
										if (!flag48)
										{
											int num774 = 0;
											for (int num775 = num763 - num768; num775 <= num763 + num768; num775++)
											{
												for (int num776 = num767; num776 <= num767 + num768 * 2; num776++)
												{
													if (WorldGen.SolidTile(num775, num776, false))
													{
														num774++;
													}
												}
											}
											int num777 = (num768 * 2 + 1) * (num768 * 2 + 1);
											if ((double)num774 >= (double)num777 * 0.8 && !GenVars.UndergroundDesertLocation.Intersects(new Rectangle(num763 - 8, num767 - 8, 16, 16)))
											{
												WorldGen.SonOfLakinater(num763, num767, 1.0);
												GenVars.LakeX[GenVars.numLakes] = num763;
												GenVars.numLakes++;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Dungeon", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int dungeonLocation = GenVars.dungeonLocation;
				int num759 = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
				int num756 = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + 200;
				int num757 = num759;
				bool flag47 = false;
				for (int num758 = 0; num758 < 10; num758++)
				{
					if (WorldGen.SolidTile(dungeonLocation, num757 + num758, false))
					{
						flag47 = true;
						break;
					}
				}
				if (!flag47)
				{
					while (num757 < num756 && !WorldGen.SolidTile(dungeonLocation, num757 + 10, false))
					{
						num757++;
					}
				}
				if (WorldGen.drunkWorldGen)
				{
					num757 = (int)Main.worldSurface + 70;
				}
				WorldGen.MakeDungeon(dungeonLocation, num757);
			});
			WorldGen.AddGenerationPass("Slush", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				for (int num750 = GenVars.snowTop; num750 < GenVars.snowBottom; num750++)
				{
					for (int num751 = GenVars.snowMinX[num750]; num751 < GenVars.snowMaxX[num750]; num751++)
					{
						ushort num755 = *Main.tile[num751, num750].type;
						if (num755 != 1)
						{
							if (num755 != 59)
							{
								if (num755 == 123)
								{
									*Main.tile[num751, num750].type = 224;
								}
							}
							else
							{
								bool flag46 = true;
								int num752 = 3;
								for (int num753 = num751 - num752; num753 <= num751 + num752; num753++)
								{
									for (int num754 = num750 - num752; num754 <= num750 + num752; num754++)
									{
										if (*Main.tile[num753, num754].type == 60 || *Main.tile[num753, num754].type == 70 || *Main.tile[num753, num754].type == 71 || *Main.tile[num753, num754].type == 72)
										{
											flag46 = false;
											break;
										}
									}
								}
								if (flag46)
								{
									*Main.tile[num751, num750].type = 224;
								}
							}
						}
						else
						{
							*Main.tile[num751, num750].type = 161;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Mountain Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[21].Value;
				for (int num749 = 0; num749 < GenVars.numMCaves; num749++)
				{
					int i = GenVars.mCaveX[num749];
					int j5 = GenVars.mCaveY[num749];
					WorldGen.CaveOpenater(i, j5);
					WorldGen.Cavinator(i, j5, WorldGen.genRand.Next(40, 50));
				}
			});
			WorldGen.AddGenerationPass("Beaches", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num731 = 50;
				progress.Message = Lang.gen[22].Value;
				bool floridaStyle = false;
				bool floridaStyle2 = false;
				if (WorldGen.genRand.Next(4) == 0)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						floridaStyle = true;
					}
					else
					{
						floridaStyle2 = true;
					}
				}
				for (int num732 = 0; num732 < 2; num732++)
				{
					if (num732 == 0)
					{
						int num733 = 0;
						int num734 = WorldGen.genRand.Next(GenVars.oceanWaterStartRandomMin, GenVars.oceanWaterStartRandomMax);
						if (GenVars.dungeonSide == 1)
						{
							num734 = GenVars.oceanWaterForcedJungleLength;
						}
						int num735 = GenVars.leftBeachEnd - num731;
						if (num734 > num735)
						{
							num734 = num735;
						}
						int num736 = 0;
						double num737 = 1.0;
						int num738 = 0;
						while (!Main.tile[num734 - 1, num738].active())
						{
							num738++;
						}
						GenVars.shellStartYLeft = num738;
						num738 += WorldGen.genRand.Next(1, 5);
						for (int num739 = num734 - 1; num739 >= num733; num739--)
						{
							if (num739 > 30)
							{
								num736++;
								num737 = WorldGen.TuneOceanDepth(num736, num737, floridaStyle);
							}
							else
							{
								num737 += 1.0;
							}
							int num740 = WorldGen.genRand.Next(15, 20);
							int num741 = 0;
							while ((double)num741 < (double)num738 + num737 + (double)num740)
							{
								if ((double)num741 < (double)num738 + num737 * 0.75 - 3.0)
								{
									Main.tile[num739, num741].active(false);
									if (num741 > num738)
									{
										*Main.tile[num739, num741].liquid = byte.MaxValue;
										Main.tile[num739, num741].lava(false);
									}
									else if (num741 == num738)
									{
										*Main.tile[num739, num741].liquid = 127;
										if (GenVars.shellStartXLeft == 0)
										{
											GenVars.shellStartXLeft = num739;
										}
									}
								}
								else if (num741 > num738)
								{
									*Main.tile[num739, num741].type = 53;
									Main.tile[num739, num741].active(true);
								}
								*Main.tile[num739, num741].wall = 0;
								num741++;
							}
						}
					}
					else
					{
						int num733 = Main.maxTilesX - WorldGen.genRand.Next(GenVars.oceanWaterStartRandomMin, GenVars.oceanWaterStartRandomMax);
						int num734 = Main.maxTilesX;
						if (GenVars.dungeonSide == -1)
						{
							num733 = Main.maxTilesX - GenVars.oceanWaterForcedJungleLength;
						}
						int num742 = GenVars.rightBeachStart + num731;
						if (num733 < num742)
						{
							num733 = num742;
						}
						double num743 = 1.0;
						int num744 = 0;
						int num745 = 0;
						while (!Main.tile[num733, num745].active())
						{
							num745++;
						}
						GenVars.shellStartXRight = 0;
						GenVars.shellStartYRight = num745;
						num745 += WorldGen.genRand.Next(1, 5);
						for (int num746 = num733; num746 < num734; num746++)
						{
							if (num746 < num734 - 30)
							{
								num744++;
								num743 = WorldGen.TuneOceanDepth(num744, num743, floridaStyle2);
							}
							else
							{
								num743 += 1.0;
							}
							int num747 = WorldGen.genRand.Next(15, 20);
							int num748 = 0;
							while ((double)num748 < (double)num745 + num743 + (double)num747)
							{
								if ((double)num748 < (double)num745 + num743 * 0.75 - 3.0)
								{
									Main.tile[num746, num748].active(false);
									if (num748 > num745)
									{
										*Main.tile[num746, num748].liquid = byte.MaxValue;
										Main.tile[num746, num748].lava(false);
									}
									else if (num748 == num745)
									{
										*Main.tile[num746, num748].liquid = 127;
										if (GenVars.shellStartXRight == 0)
										{
											GenVars.shellStartXRight = num746;
										}
									}
								}
								else if (num748 > num745)
								{
									*Main.tile[num746, num748].type = 53;
									Main.tile[num746, num748].active(true);
								}
								*Main.tile[num746, num748].wall = 0;
								num748++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gems", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[23].Value;
				Main.tileSolid[484] = false;
				for (int num718 = 63; num718 <= 68; num718++)
				{
					double value13 = (double)(num718 - 63) / 6.0;
					progress.Set(value13);
					double num719 = 0.0;
					switch (num718)
					{
					case 63:
						num719 = (double)Main.maxTilesX * 0.3;
						break;
					case 64:
						num719 = (double)Main.maxTilesX * 0.1;
						break;
					case 65:
						num719 = (double)Main.maxTilesX * 0.25;
						break;
					case 66:
						num719 = (double)Main.maxTilesX * 0.45;
						break;
					case 67:
						num719 = (double)Main.maxTilesX * 0.5;
						break;
					case 68:
						num719 = (double)Main.maxTilesX * 0.05;
						break;
					}
					num719 *= 0.2;
					int num720 = 0;
					while ((double)num720 < num719)
					{
						int num721 = WorldGen.genRand.Next(0, Main.maxTilesX);
						int num722 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY);
						while (*Main.tile[num721, num722].type != 1)
						{
							num721 = WorldGen.genRand.Next(0, Main.maxTilesX);
							num722 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY);
						}
						WorldGen.TileRunner(num721, num722, (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), num718, false, 0.0, 0.0, false, true, -1);
						num720++;
					}
				}
				for (int num723 = 0; num723 < 2; num723++)
				{
					int num724 = 1;
					int num725 = 5;
					int num726 = Main.maxTilesX - 5;
					if (num723 == 1)
					{
						num724 = -1;
						num725 = Main.maxTilesX - 5;
						num726 = 5;
					}
					for (int num727 = num725; num727 != num726; num727 += num724)
					{
						if (num727 <= GenVars.UndergroundDesertLocation.Left || num727 >= GenVars.UndergroundDesertLocation.Right)
						{
							for (int num728 = 10; num728 < Main.maxTilesY - 10; num728++)
							{
								if (Main.tile[num727, num728].active() && Main.tile[num727, num728 + 1].active() && Main.tileSand[(int)(*Main.tile[num727, num728].type)] && Main.tileSand[(int)(*Main.tile[num727, num728 + 1].type)])
								{
									ushort type9 = *Main.tile[num727, num728].type;
									int num729 = num727 + num724;
									int num730 = num728 + 1;
									if (!Main.tile[num729, num728].active() && !Main.tile[num729, num730].active())
									{
										while (!Main.tile[num729, num730].active())
										{
											num730++;
										}
										num730--;
										Main.tile[num727, num728].active(false);
										Main.tile[num729, num730].active(true);
										*Main.tile[num729, num730].type = type9;
									}
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gravitating Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[24].Value;
				for (int num714 = 0; num714 < Main.maxTilesX; num714++)
				{
					double value12 = (double)num714 / (double)(Main.maxTilesX - 1);
					progress.Set(value12);
					bool flag45 = false;
					int num715 = 0;
					for (int num716 = Main.maxTilesY - 1; num716 > 0; num716--)
					{
						if (WorldGen.SolidOrSlopedTile(num714, num716))
						{
							ushort type8 = *Main.tile[num714, num716].type;
							if (flag45 && num716 < (int)Main.worldSurface && num716 != num715 - 1 && TileID.Sets.Falling[(int)type8])
							{
								for (int num717 = num716; num717 < num715; num717++)
								{
									Main.tile[num714, num717].ResetToType(type8);
								}
							}
							flag45 = true;
							num715 = num716;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Create Ocean Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int maxValue11 = 3;
				if (WorldGen.remixWorldGen)
				{
					maxValue11 = 2;
				}
				for (int num711 = 0; num711 < 2; num711++)
				{
					if ((num711 != 0 || GenVars.dungeonSide <= 0) && (num711 != 1 || GenVars.dungeonSide >= 0) && (WorldGen.genRand.Next(maxValue11) == 0 || WorldGen.drunkWorldGen || WorldGen.tenthAnniversaryWorldGen))
					{
						progress.Message = Lang.gen[90].Value;
						int num712 = WorldGen.genRand.Next(55, 95);
						if (num711 == 1)
						{
							num712 = WorldGen.genRand.Next(Main.maxTilesX - 95, Main.maxTilesX - 55);
						}
						int num713 = 0;
						while (!Main.tile[num712, num713].active())
						{
							num713++;
						}
						WorldGen.oceanCave(num712, num713);
					}
				}
			});
			WorldGen.AddGenerationPass("Shimmer", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				int num702 = 50;
				int num703 = (int)(Main.worldSurface + Main.rockLayer) / 2 + num702;
				int num704 = (int)((double)((Main.maxTilesY - 250) * 2) + Main.rockLayer) / 3;
				if (num704 > Main.maxTilesY - 330 - 100 - 30)
				{
					num704 = Main.maxTilesY - 330 - 100 - 30;
				}
				if (num704 <= num703)
				{
					num704 = num703 + 50;
				}
				int num705 = WorldGen.genRand.Next(num703, num704);
				int num706 = (GenVars.dungeonSide < 0) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200) : WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11));
				int num707 = (int)Main.worldSurface + 150;
				int num708 = (int)(Main.rockLayer + Main.worldSurface + 200.0) / 2;
				if (num708 <= num707)
				{
					num708 = num707 + 50;
				}
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num705 = WorldGen.genRand.Next(num707, num708);
				}
				int num709 = 0;
				while (!WorldGen.ShimmerMakeBiome(num706, num705))
				{
					num709++;
					if (WorldGen.tenthAnniversaryWorldGen && num709 < 10000)
					{
						num705 = WorldGen.genRand.Next(num707, num708);
						num706 = ((GenVars.dungeonSide < 0) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200) : WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11)));
					}
					else if (num709 > 20000)
					{
						num705 = WorldGen.genRand.Next((int)Main.worldSurface + 100 + 20, num704);
						num706 = ((GenVars.dungeonSide < 0) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), Main.maxTilesX - 200) : WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.2)));
					}
					else
					{
						num705 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2 + 20, num704);
						num706 = ((GenVars.dungeonSide < 0) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.89), Main.maxTilesX - 200) : WorldGen.genRand.Next(200, (int)((double)Main.maxTilesX * 0.11)));
					}
				}
				GenVars.shimmerPosition = new Vector2D((double)num706, (double)num705);
				int num710 = 200;
				GenVars.structures.AddProtectedStructure(new Rectangle(num706 - num710 / 2, num705 - num710 / 2, num710, num710), 0);
			});
			WorldGen.AddGenerationPass("Clean Up Dirt", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[25].Value;
				for (int num696 = 3; num696 < Main.maxTilesX - 3; num696++)
				{
					double num697 = (double)num696 / (double)Main.maxTilesX;
					progress.Set(0.5 * num697);
					bool flag43 = true;
					int num698 = 0;
					while ((double)num698 < Main.worldSurface)
					{
						if (flag43)
						{
							if (*Main.tile[num696, num698].wall == 2 || *Main.tile[num696, num698].wall == 40 || *Main.tile[num696, num698].wall == 64 || *Main.tile[num696, num698].wall == 86)
							{
								*Main.tile[num696, num698].wall = 0;
							}
							if (*Main.tile[num696, num698].type != 53 && *Main.tile[num696, num698].type != 112 && *Main.tile[num696, num698].type != 234)
							{
								if (*Main.tile[num696 - 1, num698].wall == 2 || *Main.tile[num696 - 1, num698].wall == 40 || *Main.tile[num696 - 1, num698].wall == 40)
								{
									*Main.tile[num696 - 1, num698].wall = 0;
								}
								if ((*Main.tile[num696 - 2, num698].wall == 2 || *Main.tile[num696 - 2, num698].wall == 40 || *Main.tile[num696 - 2, num698].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num696 - 2, num698].wall = 0;
								}
								if ((*Main.tile[num696 - 3, num698].wall == 2 || *Main.tile[num696 - 3, num698].wall == 40 || *Main.tile[num696 - 3, num698].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num696 - 3, num698].wall = 0;
								}
								if (*Main.tile[num696 + 1, num698].wall == 2 || *Main.tile[num696 + 1, num698].wall == 40 || *Main.tile[num696 + 1, num698].wall == 40)
								{
									*Main.tile[num696 + 1, num698].wall = 0;
								}
								if ((*Main.tile[num696 + 2, num698].wall == 2 || *Main.tile[num696 + 2, num698].wall == 40 || *Main.tile[num696 + 2, num698].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num696 + 2, num698].wall = 0;
								}
								if ((*Main.tile[num696 + 3, num698].wall == 2 || *Main.tile[num696 + 3, num698].wall == 40 || *Main.tile[num696 + 3, num698].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num696 + 3, num698].wall = 0;
								}
								if (Main.tile[num696, num698].active())
								{
									flag43 = false;
								}
							}
						}
						else if (*Main.tile[num696, num698].wall == 0 && *Main.tile[num696, num698 + 1].wall == 0 && *Main.tile[num696, num698 + 2].wall == 0 && *Main.tile[num696, num698 + 3].wall == 0 && *Main.tile[num696, num698 + 4].wall == 0 && *Main.tile[num696 - 1, num698].wall == 0 && *Main.tile[num696 + 1, num698].wall == 0 && *Main.tile[num696 - 2, num698].wall == 0 && *Main.tile[num696 + 2, num698].wall == 0 && !Main.tile[num696, num698].active() && !Main.tile[num696, num698 + 1].active() && !Main.tile[num696, num698 + 2].active() && !Main.tile[num696, num698 + 3].active())
						{
							flag43 = true;
						}
						num698++;
					}
				}
				for (int num699 = Main.maxTilesX - 5; num699 >= 5; num699--)
				{
					double num700 = (double)num699 / (double)Main.maxTilesX;
					progress.Set(1.0 - 0.5 * num700);
					bool flag44 = true;
					int num701 = 0;
					while ((double)num701 < Main.worldSurface)
					{
						if (flag44)
						{
							if (*Main.tile[num699, num701].wall == 2 || *Main.tile[num699, num701].wall == 40 || *Main.tile[num699, num701].wall == 64)
							{
								*Main.tile[num699, num701].wall = 0;
							}
							if (*Main.tile[num699, num701].type != 53)
							{
								if (*Main.tile[num699 - 1, num701].wall == 2 || *Main.tile[num699 - 1, num701].wall == 40 || *Main.tile[num699 - 1, num701].wall == 40)
								{
									*Main.tile[num699 - 1, num701].wall = 0;
								}
								if ((*Main.tile[num699 - 2, num701].wall == 2 || *Main.tile[num699 - 2, num701].wall == 40 || *Main.tile[num699 - 2, num701].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num699 - 2, num701].wall = 0;
								}
								if ((*Main.tile[num699 - 3, num701].wall == 2 || *Main.tile[num699 - 3, num701].wall == 40 || *Main.tile[num699 - 3, num701].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num699 - 3, num701].wall = 0;
								}
								if (*Main.tile[num699 + 1, num701].wall == 2 || *Main.tile[num699 + 1, num701].wall == 40 || *Main.tile[num699 + 1, num701].wall == 40)
								{
									*Main.tile[num699 + 1, num701].wall = 0;
								}
								if ((*Main.tile[num699 + 2, num701].wall == 2 || *Main.tile[num699 + 2, num701].wall == 40 || *Main.tile[num699 + 2, num701].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num699 + 2, num701].wall = 0;
								}
								if ((*Main.tile[num699 + 3, num701].wall == 2 || *Main.tile[num699 + 3, num701].wall == 40 || *Main.tile[num699 + 3, num701].wall == 40) && WorldGen.genRand.Next(2) == 0)
								{
									*Main.tile[num699 + 3, num701].wall = 0;
								}
								if (Main.tile[num699, num701].active())
								{
									flag44 = false;
								}
							}
						}
						else if (*Main.tile[num699, num701].wall == 0 && *Main.tile[num699, num701 + 1].wall == 0 && *Main.tile[num699, num701 + 2].wall == 0 && *Main.tile[num699, num701 + 3].wall == 0 && *Main.tile[num699, num701 + 4].wall == 0 && *Main.tile[num699 - 1, num701].wall == 0 && *Main.tile[num699 + 1, num701].wall == 0 && *Main.tile[num699 - 2, num701].wall == 0 && *Main.tile[num699 + 2, num701].wall == 0 && !Main.tile[num699, num701].active() && !Main.tile[num699, num701 + 1].active() && !Main.tile[num699, num701 + 2].active() && !Main.tile[num699, num701 + 3].active())
						{
							flag44 = true;
						}
						num701++;
					}
				}
			});
			WorldGen.AddGenerationPass("Pyramids", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				Rectangle undergroundDesertLocation = GenVars.UndergroundDesertLocation;
				if (Main.tenthAnniversaryWorld)
				{
					int x = undergroundDesertLocation.Center.X;
					int j4 = undergroundDesertLocation.Top - 10;
					WorldGen.Pyramid(x, j4);
				}
				for (int num689 = 0; num689 < GenVars.numPyr; num689++)
				{
					int num690 = GenVars.PyrX[num689];
					int num691 = GenVars.PyrY[num689];
					if (num690 > 300 && num690 < Main.maxTilesX - 300 && (GenVars.dungeonSide >= 0 || (double)num690 >= (double)GenVars.dungeonX + (double)Main.maxTilesX * 0.15) && (GenVars.dungeonSide <= 0 || (double)num690 <= (double)GenVars.dungeonX - (double)Main.maxTilesX * 0.15))
					{
						if (Main.tenthAnniversaryWorld)
						{
							if (undergroundDesertLocation.Contains(num690, num691))
							{
								goto IL_16B;
							}
						}
						while (!Main.tile[num690, num691].active() && (double)num691 < Main.worldSurface)
						{
							num691++;
						}
						if ((double)num691 < Main.worldSurface && *Main.tile[num690, num691].type == 53)
						{
							int num692 = Main.maxTilesX;
							for (int num693 = 0; num693 < num689; num693++)
							{
								int num694 = Math.Abs(num690 - GenVars.PyrX[num693]);
								if (num694 < num692)
								{
									num692 = num694;
								}
							}
							int num695 = 220;
							if (WorldGen.drunkWorldGen)
							{
								num695 /= 2;
							}
							if (num692 >= num695)
							{
								num691--;
								WorldGen.Pyramid(num690, num691);
							}
						}
					}
					IL_16B:;
				}
			});
			WorldGen.AddGenerationPass("Dirt Rock Wall Runner", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				for (int num686 = 0; num686 < Main.maxTilesX; num686++)
				{
					int num687 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int num688 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
					if (*Main.tile[num687, num688].wall == 2)
					{
						WorldGen.DirtyRockRunner(num687, num688);
					}
				}
			});
			WorldGen.AddGenerationPass("Living Trees", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				int num669 = 200;
				double num670 = (double)Main.maxTilesX / 4200.0;
				int num671 = WorldGen.genRand.Next(0, (int)(2.0 * num670) + 1);
				if (num671 == 0 && WorldGen.genRand.Next(2) == 0)
				{
					num671++;
				}
				if (WorldGen.drunkWorldGen)
				{
					num671 += (int)(2.0 * num670);
				}
				else if (Main.tenthAnniversaryWorld)
				{
					num671 += (int)(3.0 * num670);
				}
				else if (WorldGen.remixWorldGen)
				{
					num671 += (int)(2.0 * num670);
				}
				for (int num672 = 0; num672 < num671; num672++)
				{
					bool flag41 = false;
					int num673 = 0;
					while (!flag41)
					{
						num673++;
						if (num673 > Main.maxTilesX / 2)
						{
							flag41 = true;
						}
						int num674 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						if (WorldGen.tenthAnniversaryWorldGen && !WorldGen.remixWorldGen)
						{
							num674 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((float)Main.maxTilesX * 0.85f));
						}
						if (num674 <= Main.maxTilesX / 2 - num669 || num674 >= Main.maxTilesX / 2 + num669)
						{
							int num675 = 0;
							while (!Main.tile[num674, num675].active() && (double)num675 < Main.worldSurface)
							{
								num675++;
							}
							if (*Main.tile[num674, num675].type == 0)
							{
								num675--;
								if (num675 > 150)
								{
									bool flag42 = true;
									for (int num676 = num674 - 50; num676 < num674 + 50; num676++)
									{
										for (int num677 = num675 - 50; num677 < num675 + 50; num677++)
										{
											if (Main.tile[num676, num677].active())
											{
												ushort num686 = *Main.tile[num676, num677].type;
												if (num686 <= 189)
												{
													if (num686 != 41 && num686 - 43 > 1 && num686 != 189)
													{
														goto IL_20C;
													}
												}
												else if (num686 != 196 && num686 != 460 && num686 - 481 > 2)
												{
													goto IL_20C;
												}
												flag42 = false;
											}
											IL_20C:;
										}
									}
									for (int num678 = 0; num678 < GenVars.numMCaves; num678++)
									{
										if (num674 > GenVars.mCaveX[num678] - 50 && num674 < GenVars.mCaveX[num678] + 50)
										{
											flag42 = false;
											break;
										}
									}
									if (flag42)
									{
										flag41 = WorldGen.GrowLivingTree(num674, num675, false);
										if (flag41)
										{
											for (int num679 = -1; num679 <= 1; num679++)
											{
												if (num679 != 0)
												{
													int num680 = num674;
													int num681 = WorldGen.genRand.Next(4);
													if (WorldGen.drunkWorldGen || Main.tenthAnniversaryWorld)
													{
														num681 += WorldGen.genRand.Next(2, 5);
													}
													else if (WorldGen.remixWorldGen)
													{
														num681 += WorldGen.genRand.Next(1, 6);
													}
													for (int num682 = 0; num682 < num681; num682++)
													{
														num680 += WorldGen.genRand.Next(13, 31) * num679;
														if (num680 <= Main.maxTilesX / 2 - num669 || num680 >= Main.maxTilesX / 2 + num669)
														{
															int num683 = num675;
															if (Main.tile[num680, num683].active())
															{
																while (Main.tile[num680, num683].active())
																{
																	num683--;
																}
															}
															else
															{
																while (!Main.tile[num680, num683].active())
																{
																	num683++;
																}
																num683--;
															}
															flag42 = true;
															for (int num684 = num674 - 50; num684 < num674 + 50; num684++)
															{
																for (int num685 = num675 - 50; num685 < num675 + 50; num685++)
																{
																	if (Main.tile[num684, num685].active())
																	{
																		ushort num686 = *Main.tile[num684, num685].type;
																		if (num686 <= 189)
																		{
																			if (num686 != 41 && num686 - 43 > 1 && num686 != 189)
																			{
																				goto IL_407;
																			}
																		}
																		else if (num686 != 196 && num686 != 460 && num686 - 481 > 2)
																		{
																			goto IL_407;
																		}
																		flag42 = false;
																	}
																	IL_407:;
																}
															}
															if (flag42)
															{
																WorldGen.GrowLivingTree(num680, num683, true);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				Main.tileSolid[192] = false;
			});
			WorldGen.AddGenerationPass("Wood Tree Walls", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				for (int num665 = 25; num665 < Main.maxTilesX - 25; num665++)
				{
					int num666 = 25;
					while ((double)num666 < Main.worldSurface)
					{
						if (*Main.tile[num665, num666].type == 191 || *Main.tile[num665, num666 - 1].type == 191 || *Main.tile[num665 - 1, num666].type == 191 || *Main.tile[num665 + 1, num666].type == 191 || *Main.tile[num665, num666 + 1].type == 191)
						{
							bool flag40 = true;
							for (int num667 = num665 - 1; num667 <= num665 + 1; num667++)
							{
								for (int num668 = num666 - 1; num668 <= num666 + 1; num668++)
								{
									if (num667 != num665 && num668 != num666 && *Main.tile[num667, num668].type != 191 && *Main.tile[num667, num668].wall != 244)
									{
										flag40 = false;
									}
								}
							}
							if (flag40)
							{
								*Main.tile[num665, num666].wall = 244;
							}
						}
						num666++;
					}
				}
			});
			WorldGen.AddGenerationPass("Altars", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[484] = false;
				progress.Message = Lang.gen[26].Value;
				int num660 = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3.3E-06);
				if (WorldGen.remixWorldGen)
				{
					num660 *= 3;
				}
				for (int num661 = 0; num661 < num660; num661++)
				{
					progress.Set((double)num661 / (double)num660);
					for (int num662 = 0; num662 < 10000; num662++)
					{
						int num663 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
						while ((double)num663 > (double)Main.maxTilesX * 0.45 && (double)num663 < (double)Main.maxTilesX * 0.55)
						{
							num663 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
						}
						int num664 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, (int)(Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3);
						if (WorldGen.remixWorldGen)
						{
							num664 = WorldGen.genRand.Next(100, (int)((double)Main.maxTilesY * 0.9));
						}
						while (WorldGen.oceanDepths(num663, num664) || Vector2D.Distance(new Vector2D((double)num663, (double)num664), GenVars.shimmerPosition) < (double)WorldGen.shimmerSafetyDistance)
						{
							num663 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
							while ((double)num663 > (double)Main.maxTilesX * 0.45 && (double)num663 < (double)Main.maxTilesX * 0.55)
							{
								num663 = WorldGen.genRand.Next(281, Main.maxTilesX - 3 - 280);
							}
							num664 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, (int)(Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3);
							if (WorldGen.remixWorldGen)
							{
								num664 = WorldGen.genRand.Next(100, (int)((double)Main.maxTilesY * 0.9));
							}
						}
						int style2 = (WorldGen.crimson > false) ? 1 : 0;
						if (WorldGen.drunkWorldGen)
						{
							style2 = ((GenVars.crimsonLeft ? (num663 < Main.maxTilesX / 2) : (num663 >= Main.maxTilesX / 2)) ? 1 : 0);
						}
						if (!WorldGen.IsTileNearby(num663, num664, 26, 3))
						{
							WorldGen.Place3x2(num663, num664, 26, style2);
						}
						if (*Main.tile[num663, num664].type == 26)
						{
							break;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Wet Jungle", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num658 = 0; num658 < Main.maxTilesX; num658++)
				{
					int num659 = (int)GenVars.worldSurfaceLow;
					while ((double)num659 < Main.worldSurface - 1.0)
					{
						if (Main.tile[num658, num659].active())
						{
							if (*Main.tile[num658, num659].type == 60)
							{
								*Main.tile[num658, num659 - 1].liquid = byte.MaxValue;
								*Main.tile[num658, num659 - 2].liquid = byte.MaxValue;
								break;
							}
							break;
						}
						else
						{
							num659++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				int num648 = 0;
				progress.Message = Lang.gen[70].Value;
				long num649 = 0L;
				double num650 = 0.25;
				bool flag38 = false;
				int num653;
				int num654;
				for (;;)
				{
					int num651 = (int)Main.rockLayer;
					int num652 = Main.maxTilesY - 500;
					if (num651 > num652 - 1)
					{
						num651 = num652 - 1;
					}
					num653 = WorldGen.genRand.Next(num651, num652);
					num654 = (int)(((WorldGen.genRand.NextDouble() * num650 + 0.1) * (double)(-(double)GenVars.dungeonSide) + 0.5) * (double)Main.maxTilesX);
					if (WorldGen.remixWorldGen)
					{
						if (WorldGen.notTheBees)
						{
							num654 = ((GenVars.dungeonSide <= 0) ? WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.6), (int)((double)Main.maxTilesX * 0.8)) : WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.4)));
						}
						else
						{
							num654 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
							while ((double)num654 > (double)Main.maxTilesX * 0.4)
							{
								if ((double)num654 >= (double)Main.maxTilesX * 0.6)
								{
									break;
								}
								num654 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
							}
						}
						while (Main.tile[num654, num653].active() || *Main.tile[num654, num653].wall > 0 || (double)num653 > Main.worldSurface - 5.0)
						{
							num653--;
						}
						num653++;
						if (Main.tile[num654, num653].active() && (*Main.tile[num654, num653].type == 60 || *Main.tile[num654, num653].type == 59))
						{
							int num655 = 10;
							bool flag39 = false;
							for (int num656 = num654 - num655; num656 <= num656 + num655; num656++)
							{
								for (int num657 = num653 - num655; num657 < num655; num657++)
								{
									if (*Main.tile[num656, num657].type == 191 || Main.tileDungeon[(int)(*Main.tile[num656, num657].type)])
									{
										flag39 = true;
									}
								}
							}
							if (!flag39)
							{
								break;
							}
						}
					}
					else if (Main.tile[num654, num653].active() && *Main.tile[num654, num653].type == 60)
					{
						goto Block_17;
					}
					long num658 = num649;
					num649 = num658 + 1L;
					if (num658 > 2000000L)
					{
						if (num650 == 0.35)
						{
							num648++;
							if (num648 > 10)
							{
								goto IL_360;
							}
						}
						num650 = Math.Min(0.35, num650 + 0.05);
						num649 = 0L;
					}
				}
				flag38 = true;
				num653 -= 10 + WorldGen.genRand.Next(10);
				WorldGen.makeTemple(num654, num653);
				goto IL_360;
				Block_17:
				flag38 = true;
				WorldGen.makeTemple(num654, num653);
				IL_360:
				if (!flag38)
				{
					int x14 = Main.maxTilesX - GenVars.dungeonX;
					int y14 = (int)Main.rockLayer + 100;
					if (WorldGen.remixWorldGen)
					{
						x14 = ((!WorldGen.notTheBees) ? ((GenVars.dungeonSide > 0) ? ((int)((double)Main.maxTilesX * 0.4)) : ((int)((double)Main.maxTilesX * 0.6))) : ((GenVars.dungeonSide > 0) ? ((int)((double)Main.maxTilesX * 0.3)) : ((int)((double)Main.maxTilesX * 0.7))));
					}
					WorldGen.makeTemple(x14, y14);
				}
			});
			WorldGen.AddGenerationPass("Hives", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[71].Value;
				double num639 = (double)Main.maxTilesX / 4200.0;
				double num640 = (double)(1 + WorldGen.genRand.Next((int)(5.0 * num639), (int)(8.0 * num639)));
				if (WorldGen.drunkWorldGen)
				{
					num640 *= 0.667;
				}
				int num641 = 10000;
				HiveBiome hiveBiome = GenVars.configuration.CreateBiome<HiveBiome>();
				HoneyPatchBiome honeyPatchBiome = GenVars.configuration.CreateBiome<HoneyPatchBiome>();
				while (num640 > 0.0 && num641 > 0)
				{
					num641--;
					Point origin3 = WorldGen.RandomWorldPoint((int)(Main.worldSurface + Main.rockLayer) >> 1, 20, 300, 20);
					if (WorldGen.drunkWorldGen)
					{
						WorldGen.RandomWorldPoint((int)Main.worldSurface, 20, 300, 20);
					}
					if (hiveBiome.Place(origin3, GenVars.structures))
					{
						num640 -= 1.0;
						int num642 = WorldGen.genRand.Next(5);
						int num643 = 0;
						int num644 = 10000;
						while (num643 < num642 && num644 > 0)
						{
							double num645 = WorldGen.genRand.NextDouble() * 60.0 + 30.0;
							double num647 = WorldGen.genRand.NextDouble() * 6.2831854820251465;
							int num646 = (int)(Math.Cos(num647) * num645) + origin3.X;
							int y13 = (int)(Math.Sin(num647) * num645) + origin3.Y;
							num644--;
							if (num646 > 50 && num646 < Main.maxTilesX - 50 && honeyPatchBiome.Place(new Point(num646, y13), GenVars.structures))
							{
								num643++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Chests", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				int num613 = WorldGen.genRand.Next(40, Main.maxTilesX - 40);
				int num614 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
				double num615 = (double)WorldGen.genRand.Next(7, 12);
				num615 *= (double)Main.maxTilesX / 4200.0;
				int num616 = 0;
				int num617 = 0;
				while ((double)num617 < num615)
				{
					bool flag36 = true;
					while (flag36)
					{
						num616++;
						num613 = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
						if (GenVars.dungeonSide < 0)
						{
							num613 += Main.maxTilesX / 2;
						}
						num614 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
						int num618 = WorldGen.genRand.Next(2, 4);
						int num619 = WorldGen.genRand.Next(2, 4);
						Rectangle area;
						area..ctor(num613 - num618 - 1, num614 - num619 - 1, num618 + 1, num619 + 1);
						if (*Main.tile[num613, num614].type == 60)
						{
							int num620 = 30;
							flag36 = false;
							for (int num621 = num613 - num620; num621 < num613 + num620; num621 += 3)
							{
								for (int num622 = num614 - num620; num622 < num614 + num620; num622 += 3)
								{
									if (Main.tile[num621, num622].active() && (*Main.tile[num621, num622].type == 225 || *Main.tile[num621, num622].type == 229 || *Main.tile[num621, num622].type == 226 || *Main.tile[num621, num622].type == 119 || *Main.tile[num621, num622].type == 120))
									{
										flag36 = true;
									}
									if (*Main.tile[num621, num622].wall == 86 || *Main.tile[num621, num622].wall == 87)
									{
										flag36 = true;
									}
								}
							}
							if (!GenVars.structures.CanPlace(area, 1))
							{
								flag36 = true;
							}
						}
						if (!flag36)
						{
							ushort wall2 = 0;
							if (GenVars.jungleHut == 119)
							{
								wall2 = 23;
							}
							else if (GenVars.jungleHut == 120)
							{
								wall2 = 24;
							}
							else if (GenVars.jungleHut == 158)
							{
								wall2 = 42;
							}
							else if (GenVars.jungleHut == 175)
							{
								wall2 = 45;
							}
							else if (GenVars.jungleHut == 45)
							{
								wall2 = 10;
							}
							for (int num623 = num613 - num618 - 1; num623 <= num613 + num618 + 1; num623++)
							{
								for (int num624 = num614 - num619 - 1; num624 <= num614 + num619 + 1; num624++)
								{
									Main.tile[num623, num624].active(true);
									*Main.tile[num623, num624].type = GenVars.jungleHut;
									*Main.tile[num623, num624].liquid = 0;
									Main.tile[num623, num624].lava(false);
								}
							}
							for (int num625 = num613 - num618; num625 <= num613 + num618; num625++)
							{
								for (int num626 = num614 - num619; num626 <= num614 + num619; num626++)
								{
									Main.tile[num625, num626].active(false);
									*Main.tile[num625, num626].wall = wall2;
								}
							}
							bool flag37 = false;
							int num627 = 0;
							while (!flag37 && num627 < 100)
							{
								num627++;
								int num628 = WorldGen.genRand.Next(num613 - num618, num613 + num618 + 1);
								int num629 = WorldGen.genRand.Next(num614 - num619, num614 + num619 - 2);
								WorldGen.PlaceTile(num628, num629, 4, true, false, -1, 3);
								if (TileID.Sets.Torch[(int)(*Main.tile[num628, num629].type)])
								{
									flag37 = true;
								}
							}
							for (int num630 = num613 - num618 - 1; num630 <= num613 + num618 + 1; num630++)
							{
								for (int num631 = num614 + num619 - 2; num631 <= num614 + num619; num631++)
								{
									Main.tile[num630, num631].active(false);
								}
							}
							for (int num632 = num613 - num618 - 1; num632 <= num613 + num618 + 1; num632++)
							{
								for (int num633 = num614 + num619 - 2; num633 <= num614 + num619 - 1; num633++)
								{
									Main.tile[num632, num633].active(false);
								}
							}
							for (int num634 = num613 - num618 - 1; num634 <= num613 + num618 + 1; num634++)
							{
								int num635 = 4;
								int num636 = num614 + num619 + 2;
								while (!Main.tile[num634, num636].active() && num636 < Main.maxTilesY && num635 > 0)
								{
									Main.tile[num634, num636].active(true);
									*Main.tile[num634, num636].type = 59;
									num636++;
									num635--;
								}
							}
							num618 -= WorldGen.genRand.Next(1, 3);
							int num637 = num614 - num619 - 2;
							while (num618 > -1)
							{
								for (int num638 = num613 - num618 - 1; num638 <= num613 + num618 + 1; num638++)
								{
									Main.tile[num638, num637].active(true);
									*Main.tile[num638, num637].type = GenVars.jungleHut;
								}
								num618 -= WorldGen.genRand.Next(1, 3);
								num637--;
							}
							GenVars.JChestX[GenVars.numJChests] = num613;
							GenVars.JChestY[GenVars.numJChests] = num614;
							GenVars.structures.AddProtectedStructure(area, 0);
							GenVars.numJChests++;
							num616 = 0;
						}
						else if (num616 > Main.maxTilesX * 10)
						{
							num617++;
							num616 = 0;
							break;
						}
					}
					num617++;
				}
				Main.tileSolid[137] = false;
			});
			WorldGen.AddGenerationPass("Settle Liquids", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[27].Value;
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Liquid.worldGenTilesIgnoreWater(true);
				Liquid.QuickWater(3, -1, -1);
				WorldGen.WaterCheck();
				int num606 = 0;
				Liquid.quickSettle = true;
				int num607 = 10;
				while (num606 < num607)
				{
					int num608 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
					num606++;
					double num609 = 0.0;
					int num610 = num608 * 5;
					while (Liquid.numLiquid > 0)
					{
						num610--;
						if (num610 < 0)
						{
							break;
						}
						double num611 = (double)(num608 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (double)num608;
						if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num608)
						{
							num608 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
						}
						if (num611 > num609)
						{
							num609 = num611;
						}
						else
						{
							num611 = num609;
						}
						if (num606 == 1)
						{
							progress.Set(num611 / 3.0 + 0.33);
						}
						int num612 = 10;
						if (num606 > num612)
						{
						}
						Liquid.UpdateLiquid();
					}
					WorldGen.WaterCheck();
					progress.Set((double)num606 * 0.1 / 3.0 + 0.66);
				}
				Liquid.quickSettle = false;
				Liquid.worldGenTilesIgnoreWater(false);
				Main.tileSolid[484] = false;
			});
			WorldGen.AddGenerationPass("Remove Water From Sand", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num603 = 400; num603 < Main.maxTilesX - 400; num603++)
				{
					int num604 = 100;
					while ((double)num604 < Main.worldSurface - 1.0)
					{
						if (Main.tile[num603, num604].active())
						{
							ushort type7 = *Main.tile[num603, num604].type;
							if (type7 == 53 || type7 == 396 || type7 == 397 || type7 == 404 || type7 == 407 || type7 == 151)
							{
								int num605 = num604;
								while (num605 > 100)
								{
									num605--;
									if (Main.tile[num603, num605].active())
									{
										break;
									}
									*Main.tile[num603, num605].liquid = 0;
								}
								break;
							}
							break;
						}
						else
						{
							num604++;
						}
					}
				}
				Main.tileSolid[192] = true;
			});
			WorldGen.AddGenerationPass("Oasis", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.notTheBees)
				{
					progress.Set(1.0);
					int num599 = Main.maxTilesX / 2100;
					num599 += WorldGen.genRand.Next(2);
					for (int num600 = 0; num600 < num599; num600++)
					{
						int num601 = WorldGen.beachDistance + 300;
						int num602 = Main.maxTilesX * 2;
						while (num602 > 0)
						{
							num602--;
							int x = WorldGen.genRand.Next(num601, Main.maxTilesX - num601);
							int y12 = WorldGen.genRand.Next(100, (int)Main.worldSurface);
							if (WorldGen.PlaceOasis(x, y12))
							{
								num602 = -1;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Shell Piles", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.dontStarveWorldGen)
				{
					int num587 = (int)(5.0 * ((double)Main.maxTilesX / 4200.0));
					int num588 = 0;
					int num589 = 100;
					int num598 = Main.maxTilesX / 2;
					int num590 = num598 - num589;
					int num591 = num598 + num589;
					int num592 = 0;
					while (num592 < 80)
					{
						int num593 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						if (num593 < num590 || num593 > num591)
						{
							goto IL_81;
						}
						num593 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						if (num593 < num590 || num593 > num591)
						{
							goto IL_81;
						}
						IL_9E:
						num592++;
						continue;
						IL_81:
						int y11 = (int)Main.worldSurface / 2;
						if (!WorldGen.MarblePileWithStatues(num593, y11))
						{
							goto IL_9E;
						}
						num588++;
						if (num588 < num587)
						{
							goto IL_9E;
						}
						break;
					}
				}
				if (!WorldGen.notTheBees)
				{
					progress.Set(1.0);
					if (WorldGen.genRand.Next(2) == 0)
					{
						int shellStartXLeft = GenVars.shellStartXLeft;
						int shellStartYLeft = GenVars.shellStartYLeft;
						for (int num594 = shellStartXLeft - 20; num594 <= shellStartXLeft + 20; num594++)
						{
							for (int num595 = shellStartYLeft - 10; num595 <= shellStartYLeft + 10; num595++)
							{
								if (Main.tile[num594, num595].active() && *Main.tile[num594, num595].type == 53 && !Main.tile[num594, num595 - 1].active() && *Main.tile[num594, num595 - 1].liquid == 0 && !Main.tile[num594 - 1, num595].active() && *Main.tile[num594 - 1, num595].liquid > 0)
								{
									GenVars.shellStartXLeft = num594;
									GenVars.shellStartYLeft = num595;
								}
							}
						}
						GenVars.shellStartYLeft -= 50;
						GenVars.shellStartXLeft -= WorldGen.genRand.Next(5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							GenVars.shellStartXLeft -= WorldGen.genRand.Next(10);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							GenVars.shellStartXLeft -= WorldGen.genRand.Next(15);
						}
						if (WorldGen.genRand.Next(4) != 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft, GenVars.shellStartYLeft);
						}
						int maxValue9 = WorldGen.genRand.Next(2, 4);
						if (WorldGen.genRand.Next(maxValue9) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(10, 35), GenVars.shellStartYLeft);
						}
						if (WorldGen.genRand.Next(maxValue9) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(40, 65), GenVars.shellStartYLeft);
						}
						if (WorldGen.genRand.Next(maxValue9) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(70, 95), GenVars.shellStartYLeft);
						}
						if (WorldGen.genRand.Next(maxValue9) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft - WorldGen.genRand.Next(100, 125), GenVars.shellStartYLeft);
						}
						if (WorldGen.genRand.Next(maxValue9) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXLeft + WorldGen.genRand.Next(10, 25), GenVars.shellStartYLeft);
						}
					}
					if (WorldGen.genRand.Next(2) == 0)
					{
						int shellStartXRight = GenVars.shellStartXRight;
						int shellStartYRight = GenVars.shellStartYRight;
						for (int num596 = shellStartXRight - 20; num596 <= shellStartXRight + 20; num596++)
						{
							for (int num597 = shellStartYRight - 10; num597 <= shellStartYRight + 10; num597++)
							{
								if (Main.tile[num596, num597].active() && *Main.tile[num596, num597].type == 53 && !Main.tile[num596, num597 - 1].active() && *Main.tile[num596, num597 - 1].liquid == 0 && !Main.tile[num596 + 1, num597].active() && *Main.tile[num596 + 1, num597].liquid > 0)
								{
									GenVars.shellStartXRight = num596;
									GenVars.shellStartYRight = num597;
								}
							}
						}
						GenVars.shellStartYRight -= 50;
						GenVars.shellStartXRight += WorldGen.genRand.Next(5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							GenVars.shellStartXLeft += WorldGen.genRand.Next(10);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							GenVars.shellStartXLeft += WorldGen.genRand.Next(15);
						}
						if (WorldGen.genRand.Next(4) != 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight, GenVars.shellStartYRight);
						}
						int maxValue10 = WorldGen.genRand.Next(2, 4);
						if (WorldGen.genRand.Next(maxValue10) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(10, 35), GenVars.shellStartYRight);
						}
						if (WorldGen.genRand.Next(maxValue10) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(40, 65), GenVars.shellStartYRight);
						}
						if (WorldGen.genRand.Next(maxValue10) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(70, 95), GenVars.shellStartYRight);
						}
						if (WorldGen.genRand.Next(maxValue10) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight + WorldGen.genRand.Next(100, 125), GenVars.shellStartYRight);
						}
						if (WorldGen.genRand.Next(maxValue10) == 0)
						{
							WorldGen.ShellPile(GenVars.shellStartXRight - WorldGen.genRand.Next(10, 25), GenVars.shellStartYRight);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Smooth World", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[60].Value;
				Main.tileSolid[(int)GenVars.crackedType] = true;
				for (int num583 = 20; num583 < Main.maxTilesX - 20; num583++)
				{
					double value11 = (double)num583 / (double)Main.maxTilesX;
					progress.Set(value11);
					for (int num584 = 20; num584 < Main.maxTilesY - 20; num584++)
					{
						if (*Main.tile[num583, num584].type != 48 && *Main.tile[num583, num584].type != 137 && *Main.tile[num583, num584].type != 232 && *Main.tile[num583, num584].type != 191 && *Main.tile[num583, num584].type != 151 && *Main.tile[num583, num584].type != 274)
						{
							if (!Main.tile[num583, num584 - 1].active() && *Main.tile[num583 - 1, num584].type != 136 && *Main.tile[num583 + 1, num584].type != 136)
							{
								if (WorldGen.SolidTile(num583, num584, false) && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[num583, num584].type)])
								{
									if (!Main.tile[num583 - 1, num584].halfBrick() && !Main.tile[num583 + 1, num584].halfBrick() && Main.tile[num583 - 1, num584].slope() == 0 && Main.tile[num583 + 1, num584].slope() == 0)
									{
										if (WorldGen.SolidTile(num583, num584 + 1, false))
										{
											if (!WorldGen.SolidTile(num583 - 1, num584, false) && !Main.tile[num583 - 1, num584 + 1].halfBrick() && WorldGen.SolidTile(num583 - 1, num584 + 1, false) && WorldGen.SolidTile(num583 + 1, num584, false) && !Main.tile[num583 + 1, num584 - 1].active())
											{
												if (WorldGen.genRand.Next(2) == 0)
												{
													WorldGen.SlopeTile(num583, num584, 2, false);
												}
												else
												{
													WorldGen.PoundTile(num583, num584);
												}
											}
											else if (!WorldGen.SolidTile(num583 + 1, num584, false) && !Main.tile[num583 + 1, num584 + 1].halfBrick() && WorldGen.SolidTile(num583 + 1, num584 + 1, false) && WorldGen.SolidTile(num583 - 1, num584, false) && !Main.tile[num583 - 1, num584 - 1].active())
											{
												if (WorldGen.genRand.Next(2) == 0)
												{
													WorldGen.SlopeTile(num583, num584, 1, false);
												}
												else
												{
													WorldGen.PoundTile(num583, num584);
												}
											}
											else if (WorldGen.SolidTile(num583 + 1, num584 + 1, false) && WorldGen.SolidTile(num583 - 1, num584 + 1, false) && !Main.tile[num583 + 1, num584].active() && !Main.tile[num583 - 1, num584].active())
											{
												WorldGen.PoundTile(num583, num584);
											}
											if (WorldGen.SolidTile(num583, num584, false))
											{
												if (WorldGen.SolidTile(num583 - 1, num584, false) && WorldGen.SolidTile(num583 + 1, num584 + 2, false) && !Main.tile[num583 + 1, num584].active() && !Main.tile[num583 + 1, num584 + 1].active() && !Main.tile[num583 - 1, num584 - 1].active())
												{
													WorldGen.KillTile(num583, num584, false, false, false);
												}
												else if (WorldGen.SolidTile(num583 + 1, num584, false) && WorldGen.SolidTile(num583 - 1, num584 + 2, false) && !Main.tile[num583 - 1, num584].active() && !Main.tile[num583 - 1, num584 + 1].active() && !Main.tile[num583 + 1, num584 - 1].active())
												{
													WorldGen.KillTile(num583, num584, false, false, false);
												}
												else if (!Main.tile[num583 - 1, num584 + 1].active() && !Main.tile[num583 - 1, num584].active() && WorldGen.SolidTile(num583 + 1, num584, false) && WorldGen.SolidTile(num583, num584 + 2, false))
												{
													if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.KillTile(num583, num584, false, false, false);
													}
													else if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.PoundTile(num583, num584);
													}
													else
													{
														WorldGen.SlopeTile(num583, num584, 2, false);
													}
												}
												else if (!Main.tile[num583 + 1, num584 + 1].active() && !Main.tile[num583 + 1, num584].active() && WorldGen.SolidTile(num583 - 1, num584, false) && WorldGen.SolidTile(num583, num584 + 2, false))
												{
													if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.KillTile(num583, num584, false, false, false);
													}
													else if (WorldGen.genRand.Next(5) == 0)
													{
														WorldGen.PoundTile(num583, num584);
													}
													else
													{
														WorldGen.SlopeTile(num583, num584, 1, false);
													}
												}
											}
										}
										if (WorldGen.SolidTile(num583, num584, false) && !Main.tile[num583 - 1, num584].active() && !Main.tile[num583 + 1, num584].active())
										{
											WorldGen.KillTile(num583, num584, false, false, false);
										}
									}
								}
								else if (!Main.tile[num583, num584].active() && *Main.tile[num583, num584 + 1].type != 151 && *Main.tile[num583, num584 + 1].type != 274)
								{
									if (*Main.tile[num583 + 1, num584].type != 190 && *Main.tile[num583 + 1, num584].type != 48 && *Main.tile[num583 + 1, num584].type != 232 && WorldGen.SolidTile(num583 - 1, num584 + 1, false) && WorldGen.SolidTile(num583 + 1, num584, false) && !Main.tile[num583 - 1, num584].active() && !Main.tile[num583 + 1, num584 - 1].active())
									{
										if (*Main.tile[num583 + 1, num584].type == 495)
										{
											WorldGen.PlaceTile(num583, num584, (int)(*Main.tile[num583 + 1, num584].type), false, false, -1, 0);
										}
										else
										{
											WorldGen.PlaceTile(num583, num584, (int)(*Main.tile[num583, num584 + 1].type), false, false, -1, 0);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											WorldGen.SlopeTile(num583, num584, 2, false);
										}
										else
										{
											WorldGen.PoundTile(num583, num584);
										}
									}
									if (*Main.tile[num583 - 1, num584].type != 190 && *Main.tile[num583 - 1, num584].type != 48 && *Main.tile[num583 - 1, num584].type != 232 && WorldGen.SolidTile(num583 + 1, num584 + 1, false) && WorldGen.SolidTile(num583 - 1, num584, false) && !Main.tile[num583 + 1, num584].active() && !Main.tile[num583 - 1, num584 - 1].active())
									{
										if (*Main.tile[num583 - 1, num584].type == 495)
										{
											WorldGen.PlaceTile(num583, num584, (int)(*Main.tile[num583 - 1, num584].type), false, false, -1, 0);
										}
										else
										{
											WorldGen.PlaceTile(num583, num584, (int)(*Main.tile[num583, num584 + 1].type), false, false, -1, 0);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											WorldGen.SlopeTile(num583, num584, 1, false);
										}
										else
										{
											WorldGen.PoundTile(num583, num584);
										}
									}
								}
							}
							else if (!Main.tile[num583, num584 + 1].active() && WorldGen.genRand.Next(2) == 0 && WorldGen.SolidTile(num583, num584, false) && !Main.tile[num583 - 1, num584].halfBrick() && !Main.tile[num583 + 1, num584].halfBrick() && Main.tile[num583 - 1, num584].slope() == 0 && Main.tile[num583 + 1, num584].slope() == 0 && WorldGen.SolidTile(num583, num584 - 1, false))
							{
								if (WorldGen.SolidTile(num583 - 1, num584, false) && !WorldGen.SolidTile(num583 + 1, num584, false) && WorldGen.SolidTile(num583 - 1, num584 - 1, false))
								{
									WorldGen.SlopeTile(num583, num584, 3, false);
								}
								else if (WorldGen.SolidTile(num583 + 1, num584, false) && !WorldGen.SolidTile(num583 - 1, num584, false) && WorldGen.SolidTile(num583 + 1, num584 - 1, false))
								{
									WorldGen.SlopeTile(num583, num584, 4, false);
								}
							}
							if (TileID.Sets.Conversion.Sand[(int)(*Main.tile[num583, num584].type)])
							{
								Tile.SmoothSlope(num583, num584, false, false);
							}
						}
					}
				}
				for (int num585 = 20; num585 < Main.maxTilesX - 20; num585++)
				{
					for (int num586 = 20; num586 < Main.maxTilesY - 20; num586++)
					{
						if (WorldGen.genRand.Next(2) == 0 && !Main.tile[num585, num586 - 1].active() && *Main.tile[num585, num586].type != 137 && *Main.tile[num585, num586].type != 48 && *Main.tile[num585, num586].type != 232 && *Main.tile[num585, num586].type != 191 && *Main.tile[num585, num586].type != 151 && *Main.tile[num585, num586].type != 274 && *Main.tile[num585, num586].type != 75 && *Main.tile[num585, num586].type != 76 && WorldGen.SolidTile(num585, num586, false) && *Main.tile[num585 - 1, num586].type != 137 && *Main.tile[num585 + 1, num586].type != 137)
						{
							if (WorldGen.SolidTile(num585, num586 + 1, false) && WorldGen.SolidTile(num585 + 1, num586, false) && !Main.tile[num585 - 1, num586].active())
							{
								WorldGen.SlopeTile(num585, num586, 2, false);
							}
							if (WorldGen.SolidTile(num585, num586 + 1, false) && WorldGen.SolidTile(num585 - 1, num586, false) && !Main.tile[num585 + 1, num586].active())
							{
								WorldGen.SlopeTile(num585, num586, 1, false);
							}
						}
						if (Main.tile[num585, num586].slope() == 1 && !WorldGen.SolidTile(num585 - 1, num586, false))
						{
							WorldGen.SlopeTile(num585, num586, 0, false);
							WorldGen.PoundTile(num585, num586);
						}
						if (Main.tile[num585, num586].slope() == 2 && !WorldGen.SolidTile(num585 + 1, num586, false))
						{
							WorldGen.SlopeTile(num585, num586, 0, false);
							WorldGen.PoundTile(num585, num586);
						}
					}
				}
				Main.tileSolid[137] = true;
				Main.tileSolid[190] = false;
				Main.tileSolid[192] = false;
				Main.tileSolid[(int)GenVars.crackedType] = false;
			});
			WorldGen.AddGenerationPass("Waterfalls", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[69].Value;
				Main.tileSolid[191] = false;
				for (int num574 = 20; num574 < Main.maxTilesX - 20; num574++)
				{
					double num575 = (double)num574 / (double)Main.maxTilesX;
					progress.Set(num575 * 0.5);
					for (int num576 = 20; num576 < Main.maxTilesY - 20; num576++)
					{
						if (WorldGen.SolidTile(num574, num576, false) && !Main.tile[num574 - 1, num576].active() && WorldGen.SolidTile(num574, num576 + 1, false) && !Main.tile[num574 + 1, num576].active() && (*Main.tile[num574 - 1, num576].liquid > 0 || *Main.tile[num574 + 1, num576].liquid > 0))
						{
							bool flag35 = true;
							int num577 = WorldGen.genRand.Next(8, 20);
							int num578 = WorldGen.genRand.Next(8, 20);
							num577 = num576 - num577;
							num578 += num576;
							for (int num579 = num577; num579 <= num578; num579++)
							{
								if (Main.tile[num574, num579].halfBrick())
								{
									flag35 = false;
								}
							}
							if ((*Main.tile[num574, num576].type == 75 || *Main.tile[num574, num576].type == 76) && WorldGen.genRand.Next(10) != 0)
							{
								flag35 = false;
							}
							if (flag35)
							{
								WorldGen.PoundTile(num574, num576);
							}
						}
					}
				}
				for (int num580 = 20; num580 < Main.maxTilesX - 20; num580++)
				{
					double num581 = (double)num580 / (double)Main.maxTilesX;
					progress.Set(num581 * 0.5 + 0.5);
					for (int num582 = 20; num582 < Main.maxTilesY - 20; num582++)
					{
						if (*Main.tile[num580, num582].type != 48 && *Main.tile[num580, num582].type != 232 && WorldGen.SolidTile(num580, num582, false) && WorldGen.SolidTile(num580, num582 + 1, false))
						{
							if (!WorldGen.SolidTile(num580 + 1, num582, false) && Main.tile[num580 - 1, num582].halfBrick() && *Main.tile[num580 - 2, num582].liquid > 0)
							{
								WorldGen.PoundTile(num580, num582);
							}
							if (!WorldGen.SolidTile(num580 - 1, num582, false) && Main.tile[num580 + 1, num582].halfBrick() && *Main.tile[num580 + 2, num582].liquid > 0)
							{
								WorldGen.PoundTile(num580, num582);
							}
						}
					}
				}
				Main.tileSolid[191] = true;
			});
			WorldGen.AddGenerationPass("Ice", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				progress.Set(1.0);
				for (int num572 = 10; num572 < Main.maxTilesX - 10; num572++)
				{
					for (int num573 = (int)Main.worldSurface; num573 < Main.maxTilesY - 100; num573++)
					{
						if (*Main.tile[num572, num573].liquid > 0 && (!Main.tile[num572, num573].lava() || WorldGen.remixWorldGen))
						{
							WorldGen.MakeWateryIceThing(num572, num573);
						}
					}
				}
				Main.tileSolid[226] = false;
				Main.tileSolid[162] = false;
			});
			WorldGen.AddGenerationPass("Wall Variety", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[79].Value;
				double num568 = (double)(Main.maxTilesX * Main.maxTilesY) / 5040000.0;
				int num569 = (int)(300.0 * num568);
				int num570 = num569;
				ShapeData shapeData = new ShapeData();
				while (num569 > 0)
				{
					progress.Set(1.0 - (double)num569 / (double)num570);
					Point point2 = WorldGen.RandomWorldPoint((int)GenVars.worldSurface, 2, 190, 2);
					while (Vector2D.Distance(new Vector2D((double)point2.X, (double)point2.Y), GenVars.shimmerPosition) < (double)WorldGen.shimmerSafetyDistance)
					{
						point2 = WorldGen.RandomWorldPoint((int)GenVars.worldSurface, 2, 190, 2);
					}
					Tile tile6 = Main.tile[point2.X, point2.Y];
					Tile tile7 = Main.tile[point2.X, point2.Y - 1];
					ushort num571 = 0;
					if (*tile6.type == 60)
					{
						num571 = (ushort)(204 + WorldGen.genRand.Next(4));
					}
					else if (*tile6.type == 1 && *tile7.wall == 0)
					{
						num571 = (WorldGen.remixWorldGen ? (((double)point2.Y > GenVars.rockLayer) ? ((ushort)(196 + WorldGen.genRand.Next(4))) : ((point2.Y <= GenVars.lavaLine || WorldGen.genRand.Next(2) != 0) ? ((ushort)(212 + WorldGen.genRand.Next(4))) : ((ushort)(208 + WorldGen.genRand.Next(4))))) : (((double)point2.Y < GenVars.rockLayer) ? ((ushort)(196 + WorldGen.genRand.Next(4))) : ((point2.Y >= GenVars.lavaLine) ? ((ushort)(208 + WorldGen.genRand.Next(4))) : ((ushort)(212 + WorldGen.genRand.Next(4))))));
					}
					if (tile6.active() && num571 != 0 && !tile7.active())
					{
						bool foundInvalidTile = false;
						bool flag34 = (*tile6.type != 60) ? WorldUtils.Gen(new Point(point2.X, point2.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
						{
							new Modifiers.IsNotSolid(),
							new Actions.Blank().Output(shapeData),
							new Actions.ContinueWrapper(Actions.Chain(new GenAction[]
							{
								new Modifiers.IsTouching(true, new ushort[]
								{
									60,
									147,
									161,
									396,
									397,
									70,
									191
								}),
								new Modifiers.IsTouching(true, new ushort[]
								{
									147,
									161,
									396,
									397,
									70,
									191
								}),
								new Actions.Custom(delegate(int <p0>, int <p1>, object[] <p2>)
								{
									foundInvalidTile = true;
									return true;
								})
							}))
						})) : WorldUtils.Gen(new Point(point2.X, point2.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
						{
							new Modifiers.IsNotSolid(),
							new Actions.Blank().Output(shapeData),
							new Actions.ContinueWrapper(Actions.Chain(new GenAction[]
							{
								new Modifiers.IsTouching(true, new ushort[]
								{
									147,
									161,
									396,
									397,
									70,
									191
								}),
								new Actions.Custom(delegate(int <p0>, int <p1>, object[] <p2>)
								{
									foundInvalidTile = true;
									return true;
								})
							}))
						}));
						if (shapeData.Count > 50 && flag34 && !foundInvalidTile)
						{
							WorldUtils.Gen(new Point(point2.X, point2.Y), new ModShapes.OuterOutline(shapeData, true, true), Actions.Chain(new GenAction[]
							{
								new Modifiers.SkipWalls(new ushort[]
								{
									87
								}),
								new Actions.PlaceWall(num571, true)
							}));
							num569--;
						}
						shapeData.Clear();
					}
				}
			});
			WorldGen.AddGenerationPass("Life Crystals", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.getGoodWorldGen)
				{
					Main.tileSolid[56] = false;
				}
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				progress.Message = Lang.gen[28].Value;
				double num565 = (double)(Main.maxTilesX * Main.maxTilesY) * 2E-05;
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num565 *= 1.2;
				}
				if (Main.starGame)
				{
					num565 *= Main.starGameMath(0.2);
				}
				for (int num566 = 0; num566 < (int)num565; num566++)
				{
					double value10 = (double)num566 / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05);
					progress.Set(value10);
					bool flag33 = false;
					int num567 = 0;
					while (!flag33)
					{
						int j3 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
						if (WorldGen.remixWorldGen)
						{
							j3 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
						}
						if (WorldGen.AddLifeCrystal(WorldGen.genRand.Next(Main.offLimitBorderTiles, Main.maxTilesX - Main.offLimitBorderTiles), j3))
						{
							flag33 = true;
						}
						else
						{
							num567++;
							if (num567 >= 10000)
							{
								flag33 = true;
							}
						}
					}
				}
				Main.tileSolid[225] = false;
			});
			WorldGen.AddGenerationPass("Statues", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[29].Value;
				int num558 = 0;
				double num559 = (double)Main.maxTilesX / 4200.0;
				int num560 = (int)((double)(GenVars.statueList.Length * 2) * num559);
				if (WorldGen.noTrapsWorldGen)
				{
					num560 *= 15;
					if (WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees)
					{
						num560 /= 5;
					}
				}
				if (Main.starGame)
				{
					num560 = (int)((double)num560 * Main.starGameMath(0.2));
				}
				for (int num561 = 0; num561 < num560; num561++)
				{
					if (num558 >= GenVars.statueList.Length)
					{
						num558 = 0;
					}
					int x12 = (int)GenVars.statueList[num558].X;
					int y10 = (int)GenVars.statueList[num558].Y;
					double value9 = (double)(num561 / num560);
					progress.Set(value9);
					bool flag32 = false;
					int num562 = 0;
					while (!flag32)
					{
						int num563 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
						int num564 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
						if (WorldGen.remixWorldGen)
						{
							WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
						}
						while (WorldGen.oceanDepths(num563, num564))
						{
							num563 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
							num564 = WorldGen.genRand.Next((int)(Main.worldSurface * 2.0 + Main.rockLayer) / 3, Main.maxTilesY - 300);
							if (WorldGen.remixWorldGen)
							{
								WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
							}
						}
						while (!Main.tile[num563, num564].active())
						{
							num564++;
							if (num564 >= Main.maxTilesY)
							{
								break;
							}
						}
						if (num564 < Main.maxTilesY)
						{
							num564--;
							if (!Main.tile[num563, num564].shimmer())
							{
								WorldGen.PlaceTile(num563, num564, x12, true, true, -1, y10);
							}
							if (Main.tile[num563, num564].active() && (int)(*Main.tile[num563, num564].type) == x12)
							{
								flag32 = true;
								if (GenVars.StatuesWithTraps.Contains(num558))
								{
									WorldGen.PlaceStatueTrap(num563, num564);
								}
								num558++;
							}
							else
							{
								num562++;
								if (num562 >= 10000)
								{
									flag32 = true;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Buried Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[30].Value;
				Main.tileSolid[226] = true;
				Main.tileSolid[162] = true;
				Main.tileSolid[225] = true;
				CaveHouseBiome caveHouseBiome = GenVars.configuration.CreateBiome<CaveHouseBiome>();
				int random6 = passConfig.Get<WorldGenRange>("CaveHouseCount").GetRandom(WorldGen.genRand);
				int random7 = passConfig.Get<WorldGenRange>("UnderworldChestCount").GetRandom(WorldGen.genRand);
				int num546 = passConfig.Get<WorldGenRange>("CaveChestCount").GetRandom(WorldGen.genRand);
				int random8 = passConfig.Get<WorldGenRange>("AdditionalDesertHouseCount").GetRandom(WorldGen.genRand);
				if (Main.starGame)
				{
					num546 = (int)((double)num546 * Main.starGameMath(0.2));
				}
				int num547 = random6 + random7 + num546 + random8;
				int num548 = 10000;
				int num549 = 0;
				while (num549 < num546 && num548 > 0)
				{
					progress.Set((double)num549 / (double)num547);
					int num550 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num551 = WorldGen.genRand.Next((int)((GenVars.worldSurfaceHigh + 20.0 + Main.rockLayer) / 2.0), Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						num551 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
					}
					ushort wall = *Main.tile[num550, num551].wall;
					if (Main.wallDungeon[(int)wall] || wall == 87 || WorldGen.oceanDepths(num550, num551) || !WorldGen.AddBuriedChest(num550, num551, 0, false, -1, false, 0))
					{
						num548--;
						num549--;
					}
					num549++;
				}
				num548 = 10000;
				int num552 = 0;
				while (num552 < random7 && num548 > 0)
				{
					progress.Set((double)(num552 + num546) / (double)num547);
					int num553 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num554 = WorldGen.genRand.Next(Main.UnderworldLayer, Main.maxTilesY - 50);
					if (Main.wallDungeon[(int)(*Main.tile[num553, num554].wall)] || !WorldGen.AddBuriedChest(num553, num554, 0, false, -1, false, 0))
					{
						num548--;
						num552--;
					}
					num552++;
				}
				num548 = 10000;
				int num555 = 0;
				while (num555 < random6 && num548 > 0)
				{
					progress.Set((double)(num555 + num546 + random7) / (double)num547);
					int x11 = WorldGen.genRand.Next(80, Main.maxTilesX - 80);
					int y9 = WorldGen.genRand.Next((int)(GenVars.worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						y9 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 400);
					}
					if (WorldGen.oceanDepths(x11, y9) || !caveHouseBiome.Place(new Point(x11, y9), GenVars.structures))
					{
						num548--;
						num555--;
					}
					num555++;
				}
				num548 = 10000;
				Rectangle undergroundDesertHiveLocation = GenVars.UndergroundDesertHiveLocation;
				if ((double)undergroundDesertHiveLocation.Y < Main.worldSurface + 26.0)
				{
					int num556 = (int)Main.worldSurface + 26 - undergroundDesertHiveLocation.Y;
					undergroundDesertHiveLocation.Y += num556;
					undergroundDesertHiveLocation.Height -= num556;
				}
				int num557 = 0;
				while (num557 < random8 && num548 > 0)
				{
					progress.Set((double)(num557 + num546 + random7 + random6) / (double)num547);
					if (!caveHouseBiome.Place(WorldGen.RandomRectanglePoint(undergroundDesertHiveLocation), GenVars.structures))
					{
						num548--;
						num557--;
					}
					num557++;
				}
				Main.tileSolid[226] = false;
				Main.tileSolid[162] = false;
				Main.tileSolid[225] = false;
			});
			WorldGen.AddGenerationPass("Surface Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[31].Value;
				for (int num536 = 0; num536 < (int)((double)Main.maxTilesX * 0.005); num536++)
				{
					double value8 = (double)num536 / ((double)Main.maxTilesX * 0.005);
					progress.Set(value8);
					bool flag30 = false;
					int num537 = 0;
					while (!flag30)
					{
						int num538 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int num539 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)Main.worldSurface);
						if (WorldGen.remixWorldGen)
						{
							num539 = WorldGen.genRand.Next(Main.maxTilesY - 400, Main.maxTilesY - 150);
						}
						else
						{
							while (WorldGen.oceanDepths(num538, num539))
							{
								num538 = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
								num539 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)Main.worldSurface);
							}
						}
						bool flag31 = false;
						if (!Main.tile[num538, num539].active())
						{
							if (*Main.tile[num538, num539].wall == 2 || *Main.tile[num538, num539].wall == 59 || *Main.tile[num538, num539].wall == 244 || WorldGen.remixWorldGen)
							{
								flag31 = true;
							}
						}
						else
						{
							int num540 = 50;
							int num541 = num538;
							int num542 = num539;
							int num543 = 1;
							for (int num544 = num541 - num540; num544 <= num541 + num540; num544 += 2)
							{
								for (int num545 = num542 - num540; num545 <= num542 + num540; num545 += 2)
								{
									if ((double)num545 < Main.worldSurface && !Main.tile[num544, num545].active() && *Main.tile[num544, num545].wall == 244 && WorldGen.genRand.Next(num543) == 0)
									{
										num543++;
										flag31 = true;
										num538 = num544;
										num539 = num545;
									}
								}
							}
						}
						if (flag31 && WorldGen.AddBuriedChest(num538, num539, 0, true, -1, false, 0))
						{
							flag30 = true;
						}
						else
						{
							num537++;
							if (num537 >= 2000)
							{
								flag30 = true;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Chests Placement", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[32].Value;
				for (int num531 = 0; num531 < GenVars.numJChests; num531++)
				{
					double value7 = (double)num531 / (double)GenVars.numJChests;
					progress.Set(value7);
					int nextJungleChestItem = WorldGen.GetNextJungleChestItem();
					if (!WorldGen.AddBuriedChest(GenVars.JChestX[num531] + WorldGen.genRand.Next(2), GenVars.JChestY[num531], nextJungleChestItem, false, 10, false, 0))
					{
						for (int num532 = GenVars.JChestX[num531] - 1; num532 <= GenVars.JChestX[num531] + 1; num532++)
						{
							for (int num533 = GenVars.JChestY[num531]; num533 <= GenVars.JChestY[num531] + 2; num533++)
							{
								WorldGen.KillTile(num532, num533, false, false, false);
							}
						}
						for (int num534 = GenVars.JChestX[num531] - 1; num534 <= GenVars.JChestX[num531] + 1; num534++)
						{
							for (int num535 = GenVars.JChestY[num531]; num535 <= GenVars.JChestY[num531] + 3; num535++)
							{
								if (num535 < Main.maxTilesY)
								{
									Main.tile[num534, num535].slope(0);
									Main.tile[num534, num535].halfBrick(false);
								}
							}
						}
						WorldGen.AddBuriedChest(GenVars.JChestX[num531], GenVars.JChestY[num531], nextJungleChestItem, false, 10, false, 0);
					}
				}
			});
			WorldGen.AddGenerationPass("Water Chests", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[33].Value;
				for (int num518 = 0; num518 < GenVars.numOceanCaveTreasure; num518++)
				{
					int contain = (int)WorldGen.genRand.NextFromList(new short[]
					{
						863,
						186,
						277,
						187,
						4404
					});
					bool flag28 = false;
					double num519 = 2.0;
					while (!flag28 && num519 < 50.0)
					{
						num519 += 0.1;
						int num520 = WorldGen.genRand.Next(GenVars.oceanCaveTreasure[num518].X - (int)num519, GenVars.oceanCaveTreasure[num518].X + (int)num519 + 1);
						int num521 = WorldGen.genRand.Next(GenVars.oceanCaveTreasure[num518].Y - (int)num519 / 2, GenVars.oceanCaveTreasure[num518].Y + (int)num519 / 2 + 1);
						num520 = ((num520 >= Main.maxTilesX) ? ((int)((double)num520 + num519 / 2.0)) : ((int)((double)num520 - num519 / 2.0)));
						if (*Main.tile[num520, num521].liquid > 250 && (Main.tile[num520, num521].liquidType() == 0 || WorldGen.notTheBees || WorldGen.remixWorldGen))
						{
							flag28 = WorldGen.AddBuriedChest(num520, num521, contain, false, 17, true, 0);
						}
					}
				}
				int num522 = 0;
				double num523 = (double)Main.maxTilesX / 4200.0;
				int num524 = 0;
				while ((double)num524 < 9.0 * num523)
				{
					double value6 = (double)num524 / (9.0 * num523);
					progress.Set(value6);
					num522++;
					int maxValue8 = 10;
					if (WorldGen.tenthAnniversaryWorldGen)
					{
						maxValue8 = 7;
					}
					int num525;
					if (WorldGen.genRand.Next(maxValue8) == 0)
					{
						num525 = 863;
					}
					else
					{
						switch (num522)
						{
						case 1:
							num525 = 186;
							break;
						case 2:
							num525 = 4404;
							break;
						case 3:
							num525 = 277;
							break;
						default:
							num525 = 187;
							num522 = 0;
							break;
						}
					}
					bool flag29 = false;
					int num526 = 0;
					while (!flag29)
					{
						int num527 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num528 = WorldGen.genRand.Next(1, Main.UnderworldLayer);
						while (*Main.tile[num527, num528].liquid < 250 || (Main.tile[num527, num528].liquidType() != 0 && !WorldGen.notTheBees && !WorldGen.remixWorldGen))
						{
							num527 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
							num528 = WorldGen.genRand.Next(50, Main.UnderworldLayer);
						}
						flag29 = WorldGen.AddBuriedChest(num527, num528, num525, false, 17, num527 < WorldGen.beachDistance || num527 > Main.maxTilesX - WorldGen.beachDistance, 0);
						num526++;
						if (num526 > 10000)
						{
							break;
						}
					}
					flag29 = false;
					num526 = 0;
					while (!flag29)
					{
						int num529 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num530 = WorldGen.genRand.Next((int)Main.worldSurface, Main.UnderworldLayer);
						while (*Main.tile[num529, num530].liquid < 250 || (Main.tile[num529, num530].liquidType() != 0 && !WorldGen.notTheBees))
						{
							num529 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
							num530 = WorldGen.genRand.Next((int)Main.worldSurface, Main.UnderworldLayer);
						}
						flag29 = WorldGen.AddBuriedChest(num529, num530, num525, false, 17, num529 < WorldGen.beachDistance || num529 > Main.maxTilesX - WorldGen.beachDistance, 0);
						num526++;
						if (num526 > 10000)
						{
							break;
						}
					}
					num524++;
				}
			});
			WorldGen.AddGenerationPass("Spider Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[64].Value;
				WorldGen.maxTileCount = 3500;
				int num513 = Main.maxTilesX / 2;
				int num514 = (int)((double)Main.maxTilesX * 0.005);
				if (WorldGen.getGoodWorldGen)
				{
					num514 *= 3;
				}
				if (WorldGen.notTheBees)
				{
					Main.tileSolid[225] = true;
				}
				for (int num515 = 0; num515 < num514; num515++)
				{
					double value5 = (double)num515 / ((double)Main.maxTilesX * 0.005);
					progress.Set(value5);
					int num516 = 0;
					int x10 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int y8 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 230);
					if (WorldGen.remixWorldGen)
					{
						y8 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
					}
					int num517 = WorldGen.countTiles(x10, y8, false, true);
					while ((num517 >= 3500 || num517 < 500) && num516 < num513)
					{
						num516++;
						x10 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						y8 = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
						if (WorldGen.remixWorldGen)
						{
							y8 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
						}
						num517 = WorldGen.countTiles(x10, y8, false, true);
						if (WorldGen.shroomCount > 1)
						{
							num517 = 0;
						}
					}
					if (num516 < num513)
					{
						WorldGen.Spread.Spider(x10, y8);
					}
				}
				if (WorldGen.notTheBees)
				{
					Main.tileSolid[225] = false;
				}
				Main.tileSolid[162] = true;
			});
			WorldGen.AddGenerationPass("Gem Caves", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.notTheBees)
				{
					progress.Message = Lang.gen[64].Value;
					WorldGen.maxTileCount = 300;
					double num509 = (double)Main.maxTilesX * 0.003;
					if (WorldGen.tenthAnniversaryWorldGen)
					{
						num509 *= 1.5;
					}
					if (Main.starGame)
					{
						num509 *= Main.starGameMath(0.2);
					}
					int num510 = 0;
					while ((double)num510 < num509)
					{
						double value4 = (double)num510 / num509;
						progress.Set(value4);
						int num511 = 0;
						int x9 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int y7 = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
						if (WorldGen.remixWorldGen)
						{
							y7 = WorldGen.genRand.Next((int)Main.worldSurface + 30, (int)Main.rockLayer - 30);
						}
						int num512 = WorldGen.countTiles(x9, y7, false, false);
						while ((num512 >= 300 || num512 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num511 < 1000)
						{
							num511++;
							x9 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							y7 = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
							if (WorldGen.remixWorldGen)
							{
								y7 = WorldGen.genRand.Next((int)Main.worldSurface + 30, (int)Main.rockLayer - 30);
							}
							num512 = WorldGen.countTiles(x9, y7, false, false);
						}
						if (num511 < 1000)
						{
							WorldGen.gemCave(x9, y7);
						}
						num510++;
					}
				}
			});
			WorldGen.AddGenerationPass("Moss", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					progress.Message = Lang.gen[61].Value;
					WorldGen.randMoss(false);
					int num479 = Main.maxTilesX / 2100;
					if (WorldGen.remixWorldGen)
					{
						num479 = (int)((double)num479 * 1.5);
					}
					else if (WorldGen.tenthAnniversaryWorldGen)
					{
						num479 *= 2;
					}
					int num480 = 0;
					int num481 = 0;
					while (num481 < num479)
					{
						int num482 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
						if (WorldGen.remixWorldGen)
						{
							num482 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.3), (int)((double)Main.maxTilesX * 0.7));
						}
						else if (WorldGen.tenthAnniversaryWorldGen)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.randMoss(true);
							}
						}
						else if (WorldGen.getGoodWorldGen)
						{
							while ((double)num482 > (double)Main.maxTilesX * 0.42)
							{
								if ((double)num482 >= (double)Main.maxTilesX * 0.48)
								{
									break;
								}
								num482 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
							}
						}
						else if (!WorldGen.drunkWorldGen)
						{
							while ((double)num482 > (double)Main.maxTilesX * 0.38 && (double)num482 < (double)Main.maxTilesX * 0.62)
							{
								num482 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
							}
						}
						int num483 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)Main.rockLayer + 40, GenVars.lavaLine - 40) : WorldGen.genRand.Next((int)Main.worldSurface + 50, (int)Main.rockLayer - 50);
						bool flag27 = false;
						int num484 = 50;
						for (int num485 = num482 - num484; num485 <= num482 + num484; num485++)
						{
							for (int num486 = num483 - num484; num486 <= num483 + num484; num486++)
							{
								if (Main.tile[num485, num486].active())
								{
									int type6 = (int)(*Main.tile[num485, num486].type);
									if (WorldGen.remixWorldGen)
									{
										if (type6 == 60 || type6 == 161 || type6 == 147 || Main.tileDungeon[type6] || type6 == 25 || type6 == 203)
										{
											flag27 = true;
											num485 = num482 + num484 + 1;
											break;
										}
									}
									else if (type6 == 70 || type6 == 60 || type6 == 367 || type6 == 368 || type6 == 161 || type6 == 147 || type6 == 396 || type6 == 397 || Main.tileDungeon[type6])
									{
										flag27 = true;
										num485 = num482 + num484 + 1;
										break;
									}
								}
							}
						}
						if (flag27)
						{
							num480++;
							if (num480 > Main.maxTilesX)
							{
								num481++;
							}
						}
						else
						{
							num480 = 0;
							num481++;
							int maxY = GenVars.lavaLine;
							if (WorldGen.remixWorldGen)
							{
								maxY = (int)Main.rockLayer + 50;
							}
							WorldGen.neonMossBiome(num482, num483, maxY);
						}
					}
					WorldGen.maxTileCount = 2500;
					for (int num487 = 0; num487 < (int)((double)Main.maxTilesX * 0.01); num487++)
					{
						double value3 = (double)num487 / ((double)Main.maxTilesX * 0.01);
						progress.Set(value3);
						int num488 = 0;
						int num489 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int num490 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.waterLine);
						if (WorldGen.remixWorldGen)
						{
							num490 = WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer);
						}
						if (Vector2D.Distance(new Vector2D((double)num489, (double)num490), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance)
						{
							int num491 = WorldGen.countTiles(num489, num490, false, false);
							while ((num491 >= 2500 || num491 < 10 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0 || WorldGen.shroomCount > 0) && num488 < 1000)
							{
								num488++;
								num489 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
								num490 = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
								num491 = WorldGen.countTiles(num489, num490, false, false);
							}
							if (num488 < 1000)
							{
								WorldGen.setMoss(num489, num490);
								WorldGen.Spread.Moss(num489, num490);
							}
						}
					}
					for (int num492 = 0; num492 < Main.maxTilesX; num492++)
					{
						int num493 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num494 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine) : WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						if (Vector2D.Distance(new Vector2D((double)num493, (double)num494), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance && *Main.tile[num493, num494].type == 1)
						{
							WorldGen.setMoss(num493, num494);
							*Main.tile[num493, num494].type = GenVars.mossTile;
						}
					}
					double num495 = (double)Main.maxTilesX * 0.05;
					while (num495 > 0.0)
					{
						int num496 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num497 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine) : WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						if (Vector2D.Distance(new Vector2D((double)num496, (double)num497), GenVars.shimmerPosition) >= (double)WorldGen.shimmerSafetyDistance && *Main.tile[num496, num497].type == 1 && (!Main.tile[num496 - 1, num497].active() || !Main.tile[num496 + 1, num497].active() || !Main.tile[num496, num497 - 1].active() || !Main.tile[num496, num497 + 1].active()))
						{
							WorldGen.setMoss(num496, num497);
							*Main.tile[num496, num497].type = GenVars.mossTile;
							num495 -= 1.0;
						}
					}
					num495 = (double)Main.maxTilesX * 0.065;
					if (WorldGen.remixWorldGen)
					{
						num495 *= 2.0;
					}
					while (num495 > 0.0)
					{
						int num498 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num499 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next(GenVars.waterLine, Main.UnderworldLayer) : WorldGen.genRand.Next(GenVars.lavaLine, (int)Main.rockLayer + 50);
						if (*Main.tile[num498, num499].type == 1 && (!Main.tile[num498 - 1, num499].active() || !Main.tile[num498 + 1, num499].active() || !Main.tile[num498, num499 - 1].active() || !Main.tile[num498, num499 + 1].active()))
						{
							int num500 = 25;
							int num501 = 0;
							for (int num502 = num498 - num500; num502 < num498 + num500; num502++)
							{
								for (int num503 = num499 - num500; num503 < num499 + num500; num503++)
								{
									if (*Main.tile[num502, num503].liquid > 0 && Main.tile[num502, num503].lava())
									{
										num501++;
									}
								}
							}
							if (num501 > 20)
							{
								*Main.tile[num498, num499].type = 381;
								num495 -= 1.0;
							}
							else
							{
								num495 -= 0.002;
							}
						}
						num495 -= 0.001;
					}
					for (int num504 = 0; num504 < Main.maxTilesX; num504++)
					{
						for (int num505 = 0; num505 < Main.maxTilesY; num505++)
						{
							if (Main.tile[num504, num505].active() && Main.tileMoss[(int)(*Main.tile[num504, num505].type)])
							{
								for (int num506 = 0; num506 < 4; num506++)
								{
									int num507 = num504;
									int num508 = num505;
									if (num506 == 0)
									{
										num507--;
									}
									if (num506 == 1)
									{
										num507++;
									}
									if (num506 == 2)
									{
										num508--;
									}
									if (num506 == 3)
									{
										num508++;
									}
									try
									{
										WorldGen.grassSpread = 0;
										WorldGen.SpreadGrass(num507, num508, 1, (int)(*Main.tile[num504, num505].type), true, default(TileColorCache));
									}
									catch
									{
										WorldGen.grassSpread = 0;
										WorldGen.SpreadGrass(num507, num508, 1, (int)(*Main.tile[num504, num505].type), false, default(TileColorCache));
									}
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Temple", delegate(GenerationProgress <p0>, GameConfiguration <p1>)
			{
				Main.tileSolid[162] = false;
				Main.tileSolid[226] = true;
				WorldGen.templePart2();
				Main.tileSolid[232] = false;
			});
			WorldGen.AddGenerationPass("Cave Walls", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[63].Value;
				WorldGen.maxTileCount = 1500;
				for (int num463 = 0; num463 < (int)((double)Main.maxTilesX * 0.04); num463++)
				{
					double num464 = (double)num463 / ((double)Main.maxTilesX * 0.04);
					progress.Set(num464 * 0.66);
					int num465 = 0;
					int x7 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int y5 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
					if (WorldGen.remixWorldGen)
					{
						y5 = WorldGen.genRand.Next((int)Main.worldSurface + 25, (int)Main.rockLayer);
					}
					int num466 = WorldGen.countTiles(x7, y5, false, true);
					while ((num466 >= WorldGen.maxTileCount || num466 < 10) && num465 < 500)
					{
						num465++;
						x7 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						y5 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
						if (WorldGen.remixWorldGen)
						{
							y5 = WorldGen.genRand.Next((int)Main.worldSurface + 25, (int)Main.rockLayer);
						}
						num466 = WorldGen.countTiles(x7, y5, false, true);
					}
					if (num465 < 500)
					{
						int num467 = WorldGen.genRand.Next(2);
						if ((double)WorldGen.shroomCount > (double)WorldGen.rockCount * 0.75)
						{
							num467 = 80;
						}
						else if (WorldGen.iceCount > 0)
						{
							if (num467 != 0)
							{
								if (num467 == 1)
								{
									num467 = 71;
								}
							}
							else
							{
								num467 = 40;
							}
						}
						else if (WorldGen.lavaCount > 0)
						{
							num467 = 79;
						}
						else
						{
							num467 = WorldGen.genRand.Next(4);
							switch (num467)
							{
							case 0:
								num467 = 59;
								break;
							case 1:
								num467 = 61;
								break;
							case 2:
								num467 = 170;
								break;
							case 3:
								num467 = 171;
								break;
							}
						}
						WorldGen.Spread.Wall(x7, y5, num467);
					}
				}
				if (WorldGen.remixWorldGen)
				{
					WorldGen.maxTileCount = 1500;
					for (int num468 = 0; num468 < (int)((double)Main.maxTilesX * 0.04); num468++)
					{
						double num469 = (double)num468 / ((double)Main.maxTilesX * 0.04);
						progress.Set(num469 * 0.66);
						int num470 = 0;
						int x8 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						int y6 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						int num471 = WorldGen.countTiles(x8, y6, false, true);
						while ((num471 >= WorldGen.maxTileCount || num471 < 10) && num470 < 500)
						{
							num470++;
							x8 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							y6 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
							num471 = WorldGen.countTiles(x8, y6, false, true);
						}
						if (num470 < 500 && WorldGen.iceCount == 0 && WorldGen.lavaCount == 0 && WorldGen.sandCount == 0)
						{
							int wallType2 = (WorldGen.genRand.Next(2) != 0) ? 63 : 2;
							WorldGen.Spread.Wall(x8, y6, wallType2);
						}
					}
				}
				WorldGen.maxTileCount = 1500;
				double num472 = (double)Main.maxTilesX * 0.02;
				int num473 = 0;
				while ((double)num473 < num472)
				{
					double num474 = (double)num473 / ((double)Main.maxTilesX * 0.02);
					progress.Set(num474 * 0.33 + 0.66);
					int num475 = 0;
					int num476 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
					int num477 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.lavaLine);
					int num478 = 0;
					if (*Main.tile[num476, num477].wall == 64)
					{
						num478 = WorldGen.countTiles(num476, num477, true, false);
					}
					while ((num478 >= WorldGen.maxTileCount || num478 < 10) && num475 < 1000)
					{
						num475++;
						num476 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
						num477 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.lavaLine);
						if (!Main.wallHouse[(int)(*Main.tile[num476, num477].wall)] && *Main.tile[num476, num477].wall != 244)
						{
							num478 = ((*Main.tile[num476, num477].wall == 64) ? WorldGen.countTiles(num476, num477, true, false) : 0);
						}
					}
					if (num475 < 1000)
					{
						WorldGen.Spread.Wall2(num476, num477, 15);
					}
					num473++;
				}
			});
			WorldGen.AddGenerationPass("Jungle Trees", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[83].Value;
				for (int num461 = 0; num461 < Main.maxTilesX; num461++)
				{
					progress.Set((double)num461 / (double)Main.maxTilesX);
					for (int num462 = (int)Main.worldSurface - 1; num462 < Main.maxTilesY - 350; num462++)
					{
						if (WorldGen.genRand.Next(10) == 0 || WorldGen.drunkWorldGen)
						{
							WorldGen.GrowUndergroundTree(num461, num462);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Floating Island Houses", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num460 = 0; num460 < GenVars.numIslandHouses; num460++)
				{
					if (!GenVars.skyLake[num460])
					{
						WorldGen.IslandHouse(GenVars.floatingIslandHouseX[num460], GenVars.floatingIslandHouseY[num460], GenVars.floatingIslandStyle[num460]);
					}
				}
			});
			WorldGen.AddGenerationPass("Quick Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Main.tileSolid[137] = false;
				Main.tileSolid[130] = false;
				for (int num453 = 20; num453 < Main.maxTilesX - 20; num453++)
				{
					for (int num454 = 20; num454 < Main.maxTilesY - 20; num454++)
					{
						if ((double)num454 < Main.worldSurface && WorldGen.oceanDepths(num453, num454) && *Main.tile[num453, num454].type == 53 && Main.tile[num453, num454].active())
						{
							if (Main.tile[num453, num454].bottomSlope())
							{
								Main.tile[num453, num454].slope(0);
							}
							int num455 = num454 + 1;
							while (num455 < num454 + WorldGen.genRand.Next(4, 7) && (!Main.tile[num453, num455].active() || (*Main.tile[num453, num455].type != 397 && *Main.tile[num453, num455].type != 53)) && (!Main.tile[num453, num455 + 1].active() || (*Main.tile[num453, num455 + 1].type != 397 && *Main.tile[num453, num455 + 1].type != 53 && *Main.tile[num453, num455 + 1].type != 495)) && (!Main.tile[num453, num455 + 2].active() || (*Main.tile[num453, num455 + 2].type != 397 && *Main.tile[num453, num455 + 2].type != 53 && *Main.tile[num453, num455 + 2].type != 495)))
							{
								*Main.tile[num453, num455].type = 0;
								Main.tile[num453, num455].active(true);
								Main.tile[num453, num455].halfBrick(false);
								Main.tile[num453, num455].slope(0);
								num455++;
							}
						}
						if (*Main.tile[num453, num454].wall == 187 || *Main.tile[num453, num454].wall == 216)
						{
							if (*Main.tile[num453, num454].type == 59 || *Main.tile[num453, num454].type == 123 || *Main.tile[num453, num454].type == 224)
							{
								*Main.tile[num453, num454].type = 397;
							}
							if (*Main.tile[num453, num454].type == 368 || *Main.tile[num453, num454].type == 367)
							{
								*Main.tile[num453, num454].type = 397;
							}
							if ((double)num454 <= Main.rockLayer)
							{
								*Main.tile[num453, num454].liquid = 0;
							}
							else if (*Main.tile[num453, num454].liquid > 0)
							{
								*Main.tile[num453, num454].liquid = byte.MaxValue;
								Main.tile[num453, num454].lava(true);
							}
						}
						if ((double)num454 < Main.worldSurface && Main.tile[num453, num454].active() && *Main.tile[num453, num454].type == 53 && *Main.tile[num453, num454 + 1].wall == 0 && !WorldGen.SolidTile(num453, num454 + 1, false))
						{
							ushort num456 = 0;
							int num457 = 3;
							for (int num458 = num453 - num457; num458 <= num453 + num457; num458++)
							{
								for (int num459 = num454 - num457; num459 <= num454 + num457; num459++)
								{
									if (*Main.tile[num458, num459].wall > 0)
									{
										num456 = *Main.tile[num458, num459].wall;
										break;
									}
								}
							}
							if (num456 > 0)
							{
								*Main.tile[num453, num454 + 1].wall = num456;
								if (*Main.tile[num453, num454].wall == 0)
								{
									*Main.tile[num453, num454].wall = num456;
								}
							}
						}
						if (*Main.tile[num453, num454].type != 19 && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[num453, num454].type)])
						{
							if (Main.tile[num453, num454].topSlope() || Main.tile[num453, num454].halfBrick())
							{
								if (*Main.tile[num453, num454].type != 225 || !Main.tile[num453, num454].halfBrick())
								{
									if (!WorldGen.SolidTile(num453, num454 + 1, false))
									{
										Main.tile[num453, num454].active(false);
									}
									if (*Main.tile[num453 + 1, num454].type == 137 || *Main.tile[num453 - 1, num454].type == 137)
									{
										Main.tile[num453, num454].active(false);
									}
								}
							}
							else if (Main.tile[num453, num454].bottomSlope())
							{
								if (!WorldGen.SolidTile(num453, num454 - 1, false))
								{
									Main.tile[num453, num454].active(false);
								}
								if (*Main.tile[num453 + 1, num454].type == 137 || *Main.tile[num453 - 1, num454].type == 137)
								{
									Main.tile[num453, num454].active(false);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Pots", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[137] = true;
				Main.tileSolid[130] = true;
				progress.Message = Lang.gen[35].Value;
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = true;
					int num440 = (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0004);
					if (WorldGen.remixWorldGen)
					{
						num440 /= 2;
					}
					for (int num441 = 0; num441 < num440; num441++)
					{
						int num442 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num443 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 250);
						while (!Main.tile[num442, num443].active() && num443 < Main.maxTilesY - 250)
						{
							num443++;
						}
						num443--;
						if (!Main.tile[num442, num443].shimmer())
						{
							WorldGen.PlaceTile(num442, num443, 138, true, false, -1, 0);
							WorldGen.PlaceTile(num442 + 2, num443, 138, true, false, -1, 0);
							WorldGen.PlaceTile(num442 + 1, num443 - 2, 138, true, false, -1, 0);
						}
					}
					Main.tileSolid[138] = false;
				}
				double num444 = (double)(Main.maxTilesX * Main.maxTilesY) * 0.0008;
				if (Main.starGame)
				{
					num444 *= Main.starGameMath(0.2);
				}
				int num445 = 0;
				while ((double)num445 < num444)
				{
					double num446 = (double)num445 / num444;
					progress.Set(num446);
					bool flag25 = false;
					int num447 = 0;
					while (!flag25)
					{
						int num448 = WorldGen.genRand.Next((int)GenVars.worldSurfaceHigh, Main.maxTilesY - 10);
						if (num446 > 0.93)
						{
							num448 = Main.maxTilesY - 150;
						}
						else if (num446 > 0.75)
						{
							num448 = (int)GenVars.worldSurfaceLow;
						}
						int num449 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
						bool flag26 = false;
						for (int num450 = num448; num450 < Main.maxTilesY - 20; num450++)
						{
							if (!flag26)
							{
								if (Main.tile[num449, num450].active() && Main.tileSolid[(int)(*Main.tile[num449, num450].type)] && !Main.tile[num449, num450 - 1].lava() && !Main.tile[num449, num450 - 1].shimmer())
								{
									flag26 = true;
								}
							}
							else if ((double)num450 >= Main.worldSurface || *Main.tile[num449, num450].wall != 0)
							{
								int style = WorldGen.genRand.Next(0, 4);
								int num451 = 0;
								int num452 = 0;
								if (num450 < Main.maxTilesY - 5)
								{
									num451 = (int)(*Main.tile[num449, num450 + 1].type);
									num452 = (int)(*Main.tile[num449, num450].wall);
								}
								if (num451 == 147 || num451 == 161 || num451 == 162)
								{
									style = WorldGen.genRand.Next(4, 7);
								}
								if (num451 == 60)
								{
									style = WorldGen.genRand.Next(7, 10);
								}
								if (Main.wallDungeon[(int)(*Main.tile[num449, num450].wall)])
								{
									style = WorldGen.genRand.Next(10, 13);
								}
								if (num451 == 41 || num451 == 43 || num451 == 44 || num451 == 481 || num451 == 482 || num451 == 483)
								{
									style = WorldGen.genRand.Next(10, 13);
								}
								if (num451 == 22 || num451 == 23 || num451 == 25)
								{
									style = WorldGen.genRand.Next(16, 19);
								}
								if (num451 == 199 || num451 == 203 || num451 == 204 || num451 == 200)
								{
									style = WorldGen.genRand.Next(22, 25);
								}
								if (num451 == 367)
								{
									style = WorldGen.genRand.Next(31, 34);
								}
								if (num451 == 226)
								{
									style = WorldGen.genRand.Next(28, 31);
								}
								if (num452 == 187 || num452 == 216)
								{
									style = WorldGen.genRand.Next(34, 37);
								}
								if (num450 > Main.UnderworldLayer)
								{
									style = WorldGen.genRand.Next(13, 16);
								}
								if (!WorldGen.oceanDepths(num449, num450) && !Main.tile[num449, num450].shimmer() && WorldGen.PlacePot(num449, num450, 28, style))
								{
									flag25 = true;
									break;
								}
								num447++;
								if (num447 >= 10000)
								{
									flag25 = true;
									break;
								}
							}
						}
					}
					num445++;
				}
			});
			WorldGen.AddGenerationPass("Hellforge", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[36].Value;
				for (int num436 = 0; num436 < Main.maxTilesX / 200; num436++)
				{
					double value2 = (double)num436 / (double)(Main.maxTilesX / 200);
					progress.Set(value2);
					bool flag24 = false;
					int num437 = 0;
					while (!flag24)
					{
						int num438 = WorldGen.genRand.Next(1, Main.maxTilesX);
						int num439 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 30);
						try
						{
							if (*Main.tile[num438, num439].wall != 13)
							{
								if (*Main.tile[num438, num439].wall != 14)
								{
									continue;
								}
							}
							while (!Main.tile[num438, num439].active() && num439 < Main.maxTilesY - 20)
							{
								num439++;
							}
							num439--;
							WorldGen.PlaceTile(num438, num439, 77, false, false, -1, 0);
							if (*Main.tile[num438, num439].type == 77)
							{
								flag24 = true;
							}
							else
							{
								num437++;
								if (num437 >= 10000)
								{
									flag24 = true;
								}
							}
						}
						catch
						{
							num437++;
							if (num437 >= 10000)
							{
								flag24 = true;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Spreading Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					progress.Message = Lang.gen[37].Value;
					for (int num414 = 50; num414 < Main.maxTilesX - 50; num414++)
					{
						int num415 = 50;
						while ((double)num415 <= Main.worldSurface)
						{
							if (Main.tile[num414, num415].active())
							{
								int type5 = (int)(*Main.tile[num414, num415].type);
								if (Main.tile[num414, num415].active() && type5 == 60)
								{
									for (int num416 = num414 - 1; num416 <= num414 + 1; num416++)
									{
										for (int num417 = num415 - 1; num417 <= num415 + 1; num417++)
										{
											if (Main.tile[num416, num417].active() && *Main.tile[num416, num417].type == 0)
											{
												if (!Main.tile[num416, num417 - 1].active())
												{
													*Main.tile[num416, num417].type = 60;
												}
												else
												{
													*Main.tile[num416, num417].type = 59;
												}
											}
										}
									}
								}
								else if (type5 == 1 || type5 == 40 || TileID.Sets.Ore[type5])
								{
									int num418 = 3;
									bool flag22 = false;
									ushort num419 = 0;
									for (int num420 = num414 - num418; num420 <= num414 + num418; num420++)
									{
										for (int num421 = num415 - num418; num421 <= num415 + num418; num421++)
										{
											if (Main.tile[num420, num421].active())
											{
												if (*Main.tile[num420, num421].type == 53 || num419 == 53)
												{
													num419 = 53;
												}
												else if (*Main.tile[num420, num421].type == 59 || *Main.tile[num420, num421].type == 60 || *Main.tile[num420, num421].type == 147 || *Main.tile[num420, num421].type == 161 || *Main.tile[num420, num421].type == 199 || *Main.tile[num420, num421].type == 23)
												{
													num419 = *Main.tile[num420, num421].type;
												}
											}
											else if (num421 < num415 && *Main.tile[num420, num421].wall == 0)
											{
												flag22 = true;
											}
										}
									}
									if (flag22)
									{
										if (num419 == 23)
										{
											goto IL_2DC;
										}
										if (num419 - 59 > 1)
										{
											if (num419 == 199)
											{
												goto IL_2DC;
											}
										}
										else if (num414 >= GenVars.jungleMinX && num414 <= GenVars.jungleMaxX)
										{
											num419 = (Main.tile[num414, num415 - 1].active() ? 59 : 60);
										}
										IL_32A:
										*Main.tile[num414, num415].type = num419;
										goto IL_341;
										IL_2DC:
										if (Main.tile[num414, num415 - 1].active())
										{
											num419 = 0;
											goto IL_32A;
										}
										goto IL_32A;
									}
								}
							}
							IL_341:
							num415++;
						}
					}
					for (int num422 = 10; num422 < Main.maxTilesX - 10; num422++)
					{
						bool flag23 = true;
						int num423 = 0;
						while ((double)num423 < Main.worldSurface - 1.0)
						{
							if (Main.tile[num422, num423].active())
							{
								if (flag23 && *Main.tile[num422, num423].type == 0)
								{
									try
									{
										WorldGen.grassSpread = 0;
										WorldGen.SpreadGrass(num422, num423, 0, 2, true, default(TileColorCache));
									}
									catch
									{
										WorldGen.grassSpread = 0;
										WorldGen.SpreadGrass(num422, num423, 0, 2, false, default(TileColorCache));
									}
								}
								if ((double)num423 > GenVars.worldSurfaceHigh)
								{
									break;
								}
								flag23 = false;
							}
							else if (*Main.tile[num422, num423].wall == 0)
							{
								flag23 = true;
							}
							num423++;
						}
					}
					if (WorldGen.remixWorldGen)
					{
						for (int num424 = 5; num424 < Main.maxTilesX - 5; num424++)
						{
							for (int num425 = (int)GenVars.rockLayerLow + WorldGen.genRand.Next(-1, 2); num425 < Main.maxTilesY - 200; num425++)
							{
								if (*Main.tile[num424, num425].type == 0 && Main.tile[num424, num425].active() && (!Main.tile[num424 - 1, num425 - 1].active() || !Main.tile[num424, num425 - 1].active() || !Main.tile[num424 + 1, num425 - 1].active() || !Main.tile[num424 - 1, num425].active() || !Main.tile[num424 + 1, num425].active() || !Main.tile[num424 - 1, num425 + 1].active() || !Main.tile[num424, num425 + 1].active() || !Main.tile[num424 + 1, num425 + 1].active()))
								{
									*Main.tile[num424, num425].type = 2;
								}
							}
						}
						for (int num426 = 5; num426 < Main.maxTilesX - 5; num426++)
						{
							for (int num427 = (int)GenVars.rockLayerLow + WorldGen.genRand.Next(-1, 2); num427 < Main.maxTilesY - 200; num427++)
							{
								if (*Main.tile[num426, num427].type == 2 && !Main.tile[num426, num427 - 1].active() && WorldGen.genRand.Next(20) == 0)
								{
									WorldGen.PlaceTile(num426, num427 - 1, 27, true, false, -1, 0);
								}
							}
						}
						int conversionType = 1;
						if (WorldGen.crimson)
						{
							conversionType = 4;
						}
						int num428 = Main.maxTilesX / 7;
						for (int num429 = 10; num429 < Main.maxTilesX - 10; num429++)
						{
							for (int num430 = 10; num430 < Main.maxTilesY - 10; num430++)
							{
								if ((double)num430 < Main.worldSurface + (double)WorldGen.genRand.Next(3) || num429 < num428 + WorldGen.genRand.Next(3) || num429 >= Main.maxTilesX - num428 - WorldGen.genRand.Next(3))
								{
									if (WorldGen.drunkWorldGen)
									{
										if (GenVars.crimsonLeft)
										{
											if (num429 < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
											{
												WorldGen.Convert(num429, num430, 4, 1);
											}
											else
											{
												WorldGen.Convert(num429, num430, 1, 1);
											}
										}
										else if (num429 < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
										{
											WorldGen.Convert(num429, num430, 1, 1);
										}
										else
										{
											WorldGen.Convert(num429, num430, 4, 1);
										}
									}
									else
									{
										WorldGen.Convert(num429, num430, conversionType, 1);
									}
									Main.tile[num429, num430].color(0);
									Main.tile[num429, num430].wallColor(0);
								}
							}
						}
						if (WorldGen.remixWorldGen)
						{
							Main.tileSolid[225] = true;
							int num435 = (int)((double)Main.maxTilesX * 0.31);
							int num431 = (int)((double)Main.maxTilesX * 0.69);
							int maxTilesY = Main.maxTilesY;
							int num432 = Main.maxTilesY - 135;
							int maxTilesY2 = Main.maxTilesY;
							Liquid.QuickWater(-2, -1, -1);
							for (int num433 = num435; num433 < num431 + 15; num433++)
							{
								for (int num434 = Main.maxTilesY - 200; num434 < num432; num434++)
								{
									*Main.tile[num433, num434].liquid = 0;
								}
							}
							Main.tileSolid[225] = false;
							Main.tileSolid[484] = false;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Surface Ore and Stone", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num405 = WorldGen.genRand.Next(Main.maxTilesX * 5 / 4200, Main.maxTilesX * 10 / 4200);
				for (int num406 = 0; num406 < num405; num406++)
				{
					int num407 = Main.maxTilesX / 420;
					while (num407 > 0)
					{
						num407--;
						int num408 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						while ((double)num408 >= (double)Main.maxTilesX * 0.48 && (double)num408 <= (double)Main.maxTilesX * 0.52)
						{
							num408 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						}
						int y3 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurface);
						bool flag20 = false;
						for (int num409 = 0; num409 < GenVars.numOrePatch; num409++)
						{
							if (Math.Abs(num408 - GenVars.orePatchX[num409]) < 200)
							{
								flag20 = true;
							}
						}
						if (!flag20 && WorldGen.OrePatch(num408, y3))
						{
							if (GenVars.numOrePatch < GenVars.maxOrePatch - 1)
							{
								GenVars.orePatchX[GenVars.numOrePatch] = num408;
								GenVars.numOrePatch++;
								break;
							}
							break;
						}
					}
				}
				num405 = WorldGen.genRand.Next(1, Main.maxTilesX * 7 / 4200);
				for (int num410 = 0; num410 < num405; num410++)
				{
					int num411 = Main.maxTilesX / 420;
					while (num411 > 0)
					{
						num411--;
						int num412 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						while ((double)num412 >= (double)Main.maxTilesX * 0.47 && (double)num412 <= (double)Main.maxTilesX * 0.53)
						{
							num412 = WorldGen.genRand.Next(WorldGen.beachDistance, Main.maxTilesX - WorldGen.beachDistance);
						}
						int y4 = WorldGen.genRand.Next((int)GenVars.worldSurfaceLow, (int)GenVars.worldSurface);
						bool flag21 = false;
						for (int num413 = 0; num413 < GenVars.numOrePatch; num413++)
						{
							if (Math.Abs(num412 - GenVars.orePatchX[num413]) < 100)
							{
								flag21 = true;
							}
						}
						if (!flag21 && WorldGen.StonePatch(num412, y4))
						{
							break;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Place Fallen Log", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[85].Value;
				int num391 = Main.maxTilesX / 2100;
				num391 = ((!WorldGen.remixWorldGen) ? (num391 + WorldGen.genRand.Next(-1, 2)) : (num391 + WorldGen.genRand.Next(0, 2)));
				for (int num392 = 0; num392 < num391; num392++)
				{
					progress.Set((double)num392 / (double)num391);
					int num393 = WorldGen.beachDistance + 20;
					int num394 = 50000;
					int num395 = 5000;
					while (num394 > 0)
					{
						num394--;
						int num396 = WorldGen.genRand.Next(num393, Main.maxTilesX - num393);
						int num397 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						if (WorldGen.remixWorldGen)
						{
							num397 = WorldGen.genRand.Next((int)GenVars.rockLayerLow, Main.maxTilesY - 350);
						}
						bool flag18 = false;
						if (num394 < num395)
						{
							flag18 = true;
						}
						if (num394 > num395 / 2)
						{
							while ((double)num396 > (double)Main.maxTilesX * 0.4 && (double)num396 < (double)Main.maxTilesX * 0.6)
							{
								num396 = WorldGen.genRand.Next(num393, Main.maxTilesX - num393);
							}
						}
						if (!Main.tile[num396, num397].active() && *Main.tile[num396, num397].wall == 0)
						{
							bool flag19 = true;
							if (WorldGen.remixWorldGen)
							{
								while (!Main.tile[num396, num397].active() && *Main.tile[num396, num397].wall == 0)
								{
									if (num397 > Main.maxTilesY - 350)
									{
										break;
									}
									num397++;
								}
							}
							else
							{
								while (!Main.tile[num396, num397].active() && *Main.tile[num396, num397].wall == 0 && (double)num397 <= Main.worldSurface)
								{
									num397++;
								}
							}
							if ((double)num397 > Main.worldSurface - 10.0 && !WorldGen.remixWorldGen)
							{
								flag19 = false;
							}
							else if (!flag18)
							{
								int num398 = 50;
								for (int num399 = num396 - num398; num399 < num396 + num398; num399++)
								{
									if (num399 > 10 && num399 < Main.maxTilesX - 10)
									{
										for (int num400 = num397 - num398; num400 < num397 + num398; num400++)
										{
											if (num400 > 10 && num400 < Main.maxTilesY - 10)
											{
												int type4 = (int)(*Main.tile[num399, num400].type);
												if (type4 != 53)
												{
													if (type4 == 189)
													{
														flag19 = false;
													}
													else if (Main.tileDungeon[type4])
													{
														flag19 = false;
													}
													else if (TileID.Sets.Crimson[type4])
													{
														flag19 = false;
													}
													else if (TileID.Sets.Corrupt[type4])
													{
														flag19 = false;
													}
												}
												else
												{
													flag19 = false;
												}
											}
										}
									}
								}
								if (flag19)
								{
									int num401 = 10;
									int num402 = 10;
									for (int num403 = num396 - num401; num403 < num396 + num401; num403++)
									{
										for (int num404 = num397 - num402; num404 < num397 - 1; num404++)
										{
											if (Main.tile[num403, num404].active() && Main.tileSolid[(int)(*Main.tile[num403, num404].type)])
											{
												flag19 = false;
											}
											if (*Main.tile[num403, num404].wall != 0)
											{
												flag19 = false;
											}
										}
									}
								}
							}
							if (flag19 && (*Main.tile[num396, num397 - 1].liquid == 0 || num394 < num395 / 5) && (*Main.tile[num396, num397].type == 2 || (WorldGen.notTheBees && *Main.tile[num396, num397].type == 60)) && (*Main.tile[num396 - 1, num397].type == 2 || (WorldGen.notTheBees && *Main.tile[num396 - 1, num397].type == 60)) && (*Main.tile[num396 + 1, num397].type == 2 || (WorldGen.notTheBees && *Main.tile[num396 + 1, num397].type == 60)))
							{
								num397--;
								WorldGen.PlaceTile(num396, num397, 488, false, false, -1, 0);
								if (Main.tile[num396, num397].active() && *Main.tile[num396, num397].type == 488)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										GenVars.logX = num396;
										GenVars.logY = num397;
									}
									num394 = -1;
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Traps", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.notTheBees || WorldGen.noTrapsWorldGen || WorldGen.remixWorldGen)
				{
					WorldGen.placingTraps = true;
					progress.Message = Lang.gen[34].Value;
					if (WorldGen.noTrapsWorldGen)
					{
						progress.Message = Lang.gen[91].Value;
					}
					double num377 = (double)Main.maxTilesX * 0.05;
					if (WorldGen.noTrapsWorldGen)
					{
						num377 = ((!WorldGen.tenthAnniversaryWorldGen && !WorldGen.notTheBees) ? (num377 * 100.0) : (num377 * 5.0));
					}
					else if (WorldGen.getGoodWorldGen)
					{
						num377 *= 1.5;
					}
					if (Main.starGame)
					{
						num377 *= Main.starGameMath(0.2);
					}
					int num378 = 0;
					while ((double)num378 < num377)
					{
						progress.Set((double)num378 / num377 / 2.0);
						for (int num379 = 0; num379 < 1150; num379++)
						{
							if (WorldGen.noTrapsWorldGen)
							{
								int num380 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
								int num381 = WorldGen.genRand.Next(50, Main.maxTilesY - 50);
								if (WorldGen.remixWorldGen)
								{
									num381 = WorldGen.genRand.Next(50, Main.maxTilesY - 210);
								}
								if (((double)num381 > Main.worldSurface || *Main.tile[num380, num381].wall > 0) && WorldGen.placeTrap(num380, num381, -1))
								{
									break;
								}
							}
							else
							{
								int num382 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
								int num383 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 210);
								while (WorldGen.oceanDepths(num382, num383))
								{
									num382 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
									num383 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 210);
								}
								if (*Main.tile[num382, num383].wall == 0 && WorldGen.placeTrap(num382, num383, -1))
								{
									break;
								}
							}
						}
						num378++;
					}
					if (WorldGen.noTrapsWorldGen)
					{
						num377 = (double)(Main.maxTilesX * 3);
						if (Main.remixWorld)
						{
							num377 = (double)(Main.maxTilesX / 3);
						}
						if (Main.starGame)
						{
							num377 *= Main.starGameMath(0.2);
						}
						int num384 = 0;
						while ((double)num384 < num377)
						{
							if (Main.remixWorld)
							{
								WorldGen.placeTNTBarrel(WorldGen.genRand.Next(50, Main.maxTilesX - 50), WorldGen.genRand.Next((int)Main.worldSurface, (int)((double)(Main.maxTilesY - 350) + Main.rockLayer) / 2));
							}
							else
							{
								WorldGen.placeTNTBarrel(WorldGen.genRand.Next(50, Main.maxTilesX - 50), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 200));
							}
							num384++;
						}
					}
					num377 = (double)Main.maxTilesX * 0.003;
					if (WorldGen.noTrapsWorldGen)
					{
						num377 *= 5.0;
					}
					else if (WorldGen.getGoodWorldGen)
					{
						num377 *= 1.5;
					}
					int num385 = 0;
					while ((double)num385 < num377)
					{
						progress.Set((double)num385 / num377 / 2.0 + 0.5);
						for (int num386 = 0; num386 < 20000; num386++)
						{
							int num387 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.85));
							int num388 = WorldGen.genRand.Next((int)Main.worldSurface + 20, Main.maxTilesY - 210);
							if (*Main.tile[num387, num388].wall == 187 && WorldGen.PlaceSandTrap(num387, num388))
							{
								break;
							}
						}
						num385++;
					}
					if (WorldGen.drunkWorldGen && !WorldGen.noTrapsWorldGen && !WorldGen.notTheBees)
					{
						for (int num389 = 0; num389 < 8; num389++)
						{
							progress.Message = Lang.gen[34].Value;
							num377 = 100.0;
							int num390 = 0;
							while ((double)num390 < num377)
							{
								progress.Set((double)num390 / num377);
								Thread.Sleep(10);
								num390++;
							}
						}
					}
					if (WorldGen.noTrapsWorldGen)
					{
						Main.tileSolid[138] = true;
					}
					WorldGen.placingTraps = false;
				}
			});
			WorldGen.AddGenerationPass("Piles", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[89].Value;
				Main.tileSolid[229] = false;
				Main.tileSolid[190] = false;
				Main.tileSolid[196] = false;
				Main.tileSolid[189] = false;
				Main.tileSolid[202] = false;
				Main.tileSolid[460] = false;
				Main.tileSolid[484] = false;
				if (WorldGen.noTrapsWorldGen)
				{
					Main.tileSolid[138] = false;
				}
				int num319 = 0;
				while ((double)num319 < (double)Main.maxTilesX * 0.06)
				{
					int num320 = Main.maxTilesX / 2;
					bool flag11 = false;
					while (!flag11 && num320 > 0)
					{
						num320--;
						int num321 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num322 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						while (WorldGen.oceanDepths(num321, num322))
						{
							num321 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num322 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
						}
						if (!Main.tile[num321, num322].active())
						{
							int num323 = 186;
							while (!Main.tile[num321, num322 + 1].active() && num322 < Main.maxTilesY - 5)
							{
								num322++;
							}
							int num324 = WorldGen.genRand.Next(22);
							if (num324 >= 16 && num324 <= 22)
							{
								num324 = WorldGen.genRand.Next(22);
							}
							if ((*Main.tile[num321, num322 + 1].type == 0 || *Main.tile[num321, num322 + 1].type == 1 || Main.tileMoss[(int)(*Main.tile[num321, num322 + 1].type)]) && WorldGen.genRand.Next(5) == 0)
							{
								num324 = WorldGen.genRand.Next(23, 29);
								num323 = 187;
							}
							if (num322 > Main.maxTilesY - 300 || Main.wallDungeon[(int)(*Main.tile[num321, num322].wall)] || *Main.tile[num321, num322 + 1].type == 30 || *Main.tile[num321, num322 + 1].type == 19 || *Main.tile[num321, num322 + 1].type == 25 || *Main.tile[num321, num322 + 1].type == 203)
							{
								num324 = WorldGen.genRand.Next(7);
								num323 = 186;
							}
							if (*Main.tile[num321, num322 + 1].type == 147 || *Main.tile[num321, num322 + 1].type == 161 || *Main.tile[num321, num322 + 1].type == 162)
							{
								num324 = WorldGen.genRand.Next(26, 32);
								num323 = 186;
							}
							if (*Main.tile[num321, num322 + 1].type == 60)
							{
								num323 = 187;
								num324 = WorldGen.genRand.Next(6);
							}
							if ((*Main.tile[num321, num322 + 1].type == 57 || *Main.tile[num321, num322 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
							{
								num323 = 187;
								num324 = WorldGen.genRand.Next(6, 9);
							}
							if (*Main.tile[num321, num322 + 1].type == 226)
							{
								num323 = 187;
								num324 = WorldGen.genRand.Next(18, 23);
							}
							if (*Main.tile[num321, num322 + 1].type == 70)
							{
								num324 = WorldGen.genRand.Next(32, 35);
								num323 = 186;
							}
							if (*Main.tile[num321, num322 + 1].type == 396 || *Main.tile[num321, num322 + 1].type == 397 || *Main.tile[num321, num322 + 1].type == 404)
							{
								num324 = WorldGen.genRand.Next(29, 35);
								num323 = 187;
							}
							if (*Main.tile[num321, num322 + 1].type == 368)
							{
								num324 = WorldGen.genRand.Next(35, 41);
								num323 = 187;
							}
							if (*Main.tile[num321, num322 + 1].type == 367)
							{
								num324 = WorldGen.genRand.Next(41, 47);
								num323 = 187;
							}
							if (num323 == 186 && num324 >= 7 && num324 <= 15 && WorldGen.genRand.Next(75) == 0)
							{
								num323 = 187;
								num324 = 17;
							}
							if (Main.wallDungeon[(int)(*Main.tile[num321, num322].wall)] && WorldGen.genRand.Next(3) != 0)
							{
								flag11 = true;
							}
							else
							{
								if (!Main.tile[num321, num322].shimmer())
								{
									WorldGen.PlaceTile(num321, num322, num323, true, false, -1, num324);
								}
								if (*Main.tile[num321, num322].type == 186 || *Main.tile[num321, num322].type == 187)
								{
									flag11 = true;
								}
								if (flag11 && num323 == 186 && num324 <= 7)
								{
									int num325 = WorldGen.genRand.Next(1, 5);
									for (int num326 = 0; num326 < num325; num326++)
									{
										int num327 = num321 + WorldGen.genRand.Next(-10, 11);
										int num328 = num322 - WorldGen.genRand.Next(5);
										if (!Main.tile[num327, num328].active())
										{
											while (!Main.tile[num327, num328 + 1].active() && num328 < Main.maxTilesY - 5)
											{
												num328++;
											}
											int x3 = WorldGen.genRand.Next(12, 36);
											WorldGen.PlaceSmallPile(num327, num328, x3, 0, 185);
										}
									}
								}
							}
						}
					}
					num319++;
				}
				int num329 = 0;
				while ((double)num329 < (double)Main.maxTilesX * 0.01)
				{
					int num330 = Main.maxTilesX / 2;
					bool flag12 = false;
					while (!flag12 && num330 > 0)
					{
						num330--;
						int num331 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num332 = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 10);
						if (!Main.tile[num331, num332].active())
						{
							int num333 = 186;
							while (!Main.tile[num331, num332 + 1].active() && num332 < Main.maxTilesY - 5)
							{
								num332++;
							}
							int num334 = WorldGen.genRand.Next(22);
							if (num334 >= 16 && num334 <= 22)
							{
								num334 = WorldGen.genRand.Next(22);
							}
							if (num332 > Main.maxTilesY - 300 || Main.wallDungeon[(int)(*Main.tile[num331, num332].wall)] || *Main.tile[num331, num332 + 1].type == 30 || *Main.tile[num331, num332 + 1].type == 19)
							{
								num334 = WorldGen.genRand.Next(7);
							}
							if ((*Main.tile[num331, num332 + 1].type == 57 || *Main.tile[num331, num332 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
							{
								num333 = 187;
								num334 = WorldGen.genRand.Next(6, 9);
							}
							if (*Main.tile[num331, num332 + 1].type == 147 || *Main.tile[num331, num332 + 1].type == 161 || *Main.tile[num331, num332 + 1].type == 162)
							{
								num334 = WorldGen.genRand.Next(26, 32);
							}
							WorldGen.PlaceTile(num331, num332, num333, true, false, -1, num334);
							if (*Main.tile[num331, num332].type == 186 || *Main.tile[num331, num332].type == 187)
							{
								flag12 = true;
							}
							if (flag12 && num333 == 186 && num334 <= 7)
							{
								int num335 = WorldGen.genRand.Next(1, 5);
								for (int num336 = 0; num336 < num335; num336++)
								{
									int num337 = num331 + WorldGen.genRand.Next(-10, 11);
									int num338 = num332 - WorldGen.genRand.Next(5);
									if (!Main.tile[num337, num338].active())
									{
										while (!Main.tile[num337, num338 + 1].active() && num338 < Main.maxTilesY - 5)
										{
											num338++;
										}
										int x4 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num337, num338, x4, 0, 185);
									}
								}
							}
						}
					}
					num329++;
				}
				int num339 = 0;
				while ((double)num339 < (double)Main.maxTilesX * 0.003)
				{
					int num340 = Main.maxTilesX / 2;
					bool flag13 = false;
					while (!flag13 && num340 > 0)
					{
						num340--;
						int num341 = 186;
						int num342 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num343 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						while (WorldGen.oceanDepths(num342, num343))
						{
							num342 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num343 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						}
						if (!Main.tile[num342, num343].active())
						{
							while (!Main.tile[num342, num343 + 1].active() && num343 < Main.maxTilesY - 5)
							{
								num343++;
							}
							int num344 = WorldGen.genRand.Next(7, 13);
							if (num343 > Main.maxTilesY - 300 || Main.wallDungeon[(int)(*Main.tile[num342, num343].wall)] || *Main.tile[num342, num343 + 1].type == 30 || *Main.tile[num342, num343 + 1].type == 19 || *Main.tile[num342, num343 + 1].type == 25 || *Main.tile[num342, num343 + 1].type == 203 || *Main.tile[num342, num343 + 1].type == 234 || *Main.tile[num342, num343 + 1].type == 112)
							{
								num344 = -1;
							}
							if (*Main.tile[num342, num343 + 1].type == 147 || *Main.tile[num342, num343 + 1].type == 161 || *Main.tile[num342, num343 + 1].type == 162)
							{
								num344 = WorldGen.genRand.Next(26, 32);
							}
							if (*Main.tile[num342, num343 + 1].type == 53)
							{
								num341 = 187;
								num344 = WorldGen.genRand.Next(52, 55);
							}
							if (*Main.tile[num342, num343 + 1].type == 2 || *Main.tile[num342 - 1, num343 + 1].type == 2 || *Main.tile[num342 + 1, num343 + 1].type == 2)
							{
								num341 = 187;
								num344 = WorldGen.genRand.Next(14, 17);
							}
							if (*Main.tile[num342, num343 + 1].type == 151 || *Main.tile[num342, num343 + 1].type == 274)
							{
								num341 = 186;
								num344 = WorldGen.genRand.Next(7);
							}
							if (num344 >= 0)
							{
								WorldGen.PlaceTile(num342, num343, num341, true, false, -1, num344);
							}
							if ((int)(*Main.tile[num342, num343].type) == num341)
							{
								flag13 = true;
							}
						}
					}
					num339++;
				}
				int num345 = 0;
				while ((double)num345 < (double)Main.maxTilesX * 0.0035)
				{
					int num346 = Main.maxTilesX / 2;
					bool flag14 = false;
					while (!flag14 && num346 > 0)
					{
						num346--;
						int num347 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num348 = WorldGen.genRand.Next(10, (int)Main.worldSurface);
						if (!Main.tile[num347, num348].active() && *Main.tile[num347, num348].wall > 0)
						{
							int num349 = 186;
							while (!Main.tile[num347, num348 + 1].active() && num348 < Main.maxTilesY - 5)
							{
								num348++;
							}
							int num350 = WorldGen.genRand.Next(7, 13);
							if (num348 > Main.maxTilesY - 300 || Main.wallDungeon[(int)(*Main.tile[num347, num348].wall)] || *Main.tile[num347, num348 + 1].type == 30 || *Main.tile[num347, num348 + 1].type == 19)
							{
								num350 = -1;
							}
							if (*Main.tile[num347, num348 + 1].type == 25)
							{
								num350 = WorldGen.genRand.Next(7);
							}
							if (*Main.tile[num347, num348 + 1].type == 147 || *Main.tile[num347, num348 + 1].type == 161 || *Main.tile[num347, num348 + 1].type == 162)
							{
								num350 = WorldGen.genRand.Next(26, 32);
							}
							if (*Main.tile[num347, num348 + 1].type == 2 || *Main.tile[num347 - 1, num348 + 1].type == 2 || *Main.tile[num347 + 1, num348 + 1].type == 2)
							{
								num349 = 187;
								num350 = WorldGen.genRand.Next(14, 17);
							}
							if (*Main.tile[num347, num348 + 1].type == 151 || *Main.tile[num347, num348 + 1].type == 274)
							{
								num349 = 186;
								num350 = WorldGen.genRand.Next(7);
							}
							if (num350 >= 0)
							{
								WorldGen.PlaceTile(num347, num348, num349, true, false, -1, num350);
							}
							if ((int)(*Main.tile[num347, num348].type) == num349)
							{
								flag14 = true;
							}
							if (flag14 && num350 <= 7)
							{
								int num351 = WorldGen.genRand.Next(1, 5);
								for (int num352 = 0; num352 < num351; num352++)
								{
									int num353 = num347 + WorldGen.genRand.Next(-10, 11);
									int num354 = num348 - WorldGen.genRand.Next(5);
									if (!Main.tile[num353, num354].active())
									{
										while (!Main.tile[num353, num354 + 1].active() && num354 < Main.maxTilesY - 5)
										{
											num354++;
										}
										int x5 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num353, num354, x5, 0, 185);
									}
								}
							}
						}
					}
					num345++;
				}
				int num355 = 0;
				while ((double)num355 < (double)Main.maxTilesX * 0.6)
				{
					int num356 = Main.maxTilesX / 2;
					bool flag15 = false;
					while (!flag15 && num356 > 0)
					{
						num356--;
						int num357 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num358 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						if (*Main.tile[num357, num358].wall == 87 && WorldGen.genRand.Next(2) == 0)
						{
							num357 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num358 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						}
						while (WorldGen.oceanDepths(num357, num358))
						{
							num357 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num358 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20);
						}
						if (!Main.tile[num357, num358].active())
						{
							while (!Main.tile[num357, num358 + 1].active() && num358 < Main.maxTilesY - 5)
							{
								num358++;
							}
							int num359 = WorldGen.genRand.Next(2);
							int num360 = WorldGen.genRand.Next(36);
							if (num360 >= 28 && num360 <= 35)
							{
								num360 = WorldGen.genRand.Next(36);
							}
							if (num359 == 1)
							{
								num360 = WorldGen.genRand.Next(25);
								if (num360 >= 16 && num360 <= 24)
								{
									num360 = WorldGen.genRand.Next(25);
								}
							}
							if (num358 > Main.maxTilesY - 300)
							{
								if (num359 == 0)
								{
									num360 = WorldGen.genRand.Next(12, 28);
								}
								if (num359 == 1)
								{
									num360 = WorldGen.genRand.Next(6, 16);
								}
							}
							if (Main.wallDungeon[(int)(*Main.tile[num357, num358].wall)] || *Main.tile[num357, num358 + 1].type == 30 || *Main.tile[num357, num358 + 1].type == 19 || *Main.tile[num357, num358 + 1].type == 25 || *Main.tile[num357, num358 + 1].type == 203 || *Main.tile[num357, num358].wall == 87)
							{
								if (num359 == 0 && num360 < 12)
								{
									num360 += 12;
								}
								if (num359 == 1 && num360 < 6)
								{
									num360 += 6;
								}
								if (num359 == 1 && num360 >= 17)
								{
									num360 -= 10;
								}
							}
							if (*Main.tile[num357, num358 + 1].type == 147 || *Main.tile[num357, num358 + 1].type == 161 || *Main.tile[num357, num358 + 1].type == 162)
							{
								if (num359 == 0 && num360 < 12)
								{
									num360 += 36;
								}
								if (num359 == 1 && num360 >= 20)
								{
									num360 += 6;
								}
								if (num359 == 1 && num360 < 6)
								{
									num360 += 25;
								}
							}
							if (*Main.tile[num357, num358 + 1].type == 151 || *Main.tile[num357, num358 + 1].type == 274)
							{
								if (num359 == 0)
								{
									num360 = WorldGen.genRand.Next(12, 28);
								}
								if (num359 == 1)
								{
									num360 = WorldGen.genRand.Next(12, 19);
								}
							}
							if (*Main.tile[num357, num358 + 1].type == 368)
							{
								if (num359 == 0)
								{
									num360 = WorldGen.genRand.Next(60, 66);
								}
								if (num359 == 1)
								{
									num360 = WorldGen.genRand.Next(47, 53);
								}
							}
							if (*Main.tile[num357, num358 + 1].type == 367)
							{
								if (num359 == 0)
								{
									num360 = WorldGen.genRand.Next(66, 72);
								}
								if (num359 == 1)
								{
									num360 = WorldGen.genRand.Next(53, 59);
								}
							}
							if (Main.wallDungeon[(int)(*Main.tile[num357, num358].wall)] && WorldGen.genRand.Next(3) != 0)
							{
								flag15 = true;
							}
							else if (!Main.tile[num357, num358].shimmer())
							{
								flag15 = WorldGen.PlaceSmallPile(num357, num358, num360, num359, 185);
							}
							if (flag15 && num359 == 1 && num360 >= 6 && num360 <= 15)
							{
								int num361 = WorldGen.genRand.Next(1, 5);
								for (int num362 = 0; num362 < num361; num362++)
								{
									int num363 = num357 + WorldGen.genRand.Next(-10, 11);
									int num364 = num358 - WorldGen.genRand.Next(5);
									if (!Main.tile[num363, num364].active())
									{
										while (!Main.tile[num363, num364 + 1].active() && num364 < Main.maxTilesY - 5)
										{
											num364++;
										}
										int x6 = WorldGen.genRand.Next(12, 36);
										WorldGen.PlaceSmallPile(num363, num364, x6, 0, 185);
									}
								}
							}
						}
					}
					num355++;
				}
				int num365 = 0;
				while ((double)num365 < (double)Main.maxTilesX * 0.02)
				{
					int num366 = Main.maxTilesX / 2;
					bool flag16 = false;
					while (!flag16 && num366 > 0)
					{
						num366--;
						int num367 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num368 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						while (WorldGen.oceanDepths(num367, num368))
						{
							num367 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
							num368 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						}
						if (!Main.tile[num367, num368].active())
						{
							while (!Main.tile[num367, num368 + 1].active() && num368 < Main.maxTilesY - 5)
							{
								num368++;
							}
							int num369 = WorldGen.genRand.Next(2);
							int num370 = WorldGen.genRand.Next(11);
							if (num369 == 1)
							{
								num370 = WorldGen.genRand.Next(5);
							}
							if (*Main.tile[num367, num368 + 1].type == 147 || *Main.tile[num367, num368 + 1].type == 161 || *Main.tile[num367, num368 + 1].type == 162)
							{
								if (num369 == 0 && num370 < 12)
								{
									num370 += 36;
								}
								if (num369 == 1 && num370 >= 20)
								{
									num370 += 6;
								}
								if (num369 == 1 && num370 < 6)
								{
									num370 += 25;
								}
							}
							if (*Main.tile[num367, num368 + 1].type == 2 && num369 == 1)
							{
								num370 = WorldGen.genRand.Next(38, 41);
							}
							if (*Main.tile[num367, num368 + 1].type == 151 || *Main.tile[num367, num368 + 1].type == 274)
							{
								if (num369 == 0)
								{
									num370 = WorldGen.genRand.Next(12, 28);
								}
								if (num369 == 1)
								{
									num370 = WorldGen.genRand.Next(12, 19);
								}
							}
							if (!Main.wallDungeon[(int)(*Main.tile[num367, num368].wall)] && *Main.tile[num367, num368 + 1].type != 30 && *Main.tile[num367, num368 + 1].type != 19 && *Main.tile[num367, num368 + 1].type != 41 && *Main.tile[num367, num368 + 1].type != 43 && *Main.tile[num367, num368 + 1].type != 44 && *Main.tile[num367, num368 + 1].type != 481 && *Main.tile[num367, num368 + 1].type != 482 && *Main.tile[num367, num368 + 1].type != 483 && *Main.tile[num367, num368 + 1].type != 45 && *Main.tile[num367, num368 + 1].type != 46 && *Main.tile[num367, num368 + 1].type != 47 && *Main.tile[num367, num368 + 1].type != 175 && *Main.tile[num367, num368 + 1].type != 176 && *Main.tile[num367, num368 + 1].type != 177 && *Main.tile[num367, num368 + 1].type != 53 && *Main.tile[num367, num368 + 1].type != 25 && *Main.tile[num367, num368 + 1].type != 203)
							{
								flag16 = WorldGen.PlaceSmallPile(num367, num368, num370, num369, 185);
							}
						}
					}
					num365++;
				}
				int num371 = 0;
				while ((double)num371 < (double)Main.maxTilesX * 0.15)
				{
					int num372 = Main.maxTilesX / 2;
					bool flag17 = false;
					while (!flag17 && num372 > 0)
					{
						num372--;
						int num373 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
						int num374 = WorldGen.genRand.Next(15, (int)Main.worldSurface);
						if (!Main.tile[num373, num374].active())
						{
							if (*Main.tile[num373, num374].wall != 2)
							{
								if (*Main.tile[num373, num374].wall != 40)
								{
									continue;
								}
							}
							while (!Main.tile[num373, num374 + 1].active() && num374 < Main.maxTilesY - 5)
							{
								num374++;
							}
							int num375 = WorldGen.genRand.Next(2);
							int num376 = WorldGen.genRand.Next(11);
							if (num375 == 1)
							{
								num376 = WorldGen.genRand.Next(5);
							}
							if (*Main.tile[num373, num374 + 1].type == 147 || *Main.tile[num373, num374 + 1].type == 161 || *Main.tile[num373, num374 + 1].type == 162)
							{
								if (num375 == 0 && num376 < 12)
								{
									num376 += 36;
								}
								if (num375 == 1 && num376 >= 20)
								{
									num376 += 6;
								}
								if (num375 == 1 && num376 < 6)
								{
									num376 += 25;
								}
							}
							if (*Main.tile[num373, num374 + 1].type == 2 && num375 == 1)
							{
								num376 = WorldGen.genRand.Next(38, 41);
							}
							if (*Main.tile[num373, num374 + 1].type == 151 || *Main.tile[num373, num374 + 1].type == 274)
							{
								if (num375 == 0)
								{
									num376 = WorldGen.genRand.Next(12, 28);
								}
								if (num375 == 1)
								{
									num376 = WorldGen.genRand.Next(12, 19);
								}
							}
							if ((*Main.tile[num373, num374].liquid != 255 || *Main.tile[num373, num374 + 1].type != 53 || *Main.tile[num373, num374].wall != 0) && !Main.wallDungeon[(int)(*Main.tile[num373, num374].wall)] && *Main.tile[num373, num374 + 1].type != 30 && *Main.tile[num373, num374 + 1].type != 19 && *Main.tile[num373, num374 + 1].type != 41 && *Main.tile[num373, num374 + 1].type != 43 && *Main.tile[num373, num374 + 1].type != 44 && *Main.tile[num373, num374 + 1].type != 481 && *Main.tile[num373, num374 + 1].type != 482 && *Main.tile[num373, num374 + 1].type != 483 && *Main.tile[num373, num374 + 1].type != 45 && *Main.tile[num373, num374 + 1].type != 46 && *Main.tile[num373, num374 + 1].type != 47 && *Main.tile[num373, num374 + 1].type != 175 && *Main.tile[num373, num374 + 1].type != 176 && *Main.tile[num373, num374 + 1].type != 177 && *Main.tile[num373, num374 + 1].type != 25 && *Main.tile[num373, num374 + 1].type != 203)
							{
								flag17 = WorldGen.PlaceSmallPile(num373, num374, num376, num375, 185);
							}
						}
					}
					num371++;
				}
				Main.tileSolid[190] = true;
				Main.tileSolid[192] = true;
				Main.tileSolid[196] = true;
				Main.tileSolid[189] = true;
				Main.tileSolid[202] = true;
				Main.tileSolid[225] = true;
				Main.tileSolid[460] = true;
				Main.tileSolid[138] = true;
			});
			WorldGen.AddGenerationPass("Spawn Point", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num310 = 5;
				bool flag10 = true;
				int num311 = Main.maxTilesX / 2;
				if (Main.tenthAnniversaryWorld && !WorldGen.remixWorldGen)
				{
					int num312 = GenVars.beachBordersWidth + 15;
					num311 = ((WorldGen.genRand.Next(2) != 0) ? (Main.maxTilesX - num312) : num312);
				}
				while (flag10)
				{
					int num313 = num311 + WorldGen.genRand.Next(-num310, num310 + 1);
					for (int num314 = 0; num314 < Main.maxTilesY; num314++)
					{
						if (Main.tile[num313, num314].active())
						{
							Main.spawnTileX = num313;
							Main.spawnTileY = num314;
							break;
						}
					}
					flag10 = false;
					num310++;
					if ((double)Main.spawnTileY > Main.worldSurface)
					{
						flag10 = true;
					}
					if (*Main.tile[Main.spawnTileX, Main.spawnTileY - 1].liquid > 0)
					{
						flag10 = true;
					}
				}
				int num315 = 10;
				while ((double)Main.spawnTileY > Main.worldSurface)
				{
					int num316 = WorldGen.genRand.Next(num311 - num315, num311 + num315);
					for (int num317 = 0; num317 < Main.maxTilesY; num317++)
					{
						if (Main.tile[num316, num317].active())
						{
							Main.spawnTileX = num316;
							Main.spawnTileY = num317;
							break;
						}
					}
					num315++;
				}
				if (WorldGen.remixWorldGen)
				{
					int num318 = Main.maxTilesY - 10;
					while (WorldGen.SolidTile(Main.spawnTileX, num318, false))
					{
						num318--;
					}
					Main.spawnTileY = num318 + 1;
				}
			});
			WorldGen.AddGenerationPass("Grass Wall", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				WorldGen.maxTileCount = 3500;
				progress.Set(1.0);
				for (int num298 = 50; num298 < Main.maxTilesX - 50; num298++)
				{
					int num299 = 0;
					while ((double)num299 < Main.worldSurface - 10.0)
					{
						if (WorldGen.genRand.Next(4) == 0)
						{
							bool flag8 = false;
							int num300 = -1;
							int num301 = -1;
							if (Main.tile[num298, num299].active() && *Main.tile[num298, num299].type == 2 && (*Main.tile[num298, num299].wall == 2 || *Main.tile[num298, num299].wall == 63))
							{
								for (int num302 = num298 - 1; num302 <= num298 + 1; num302++)
								{
									for (int num303 = num299 - 1; num303 <= num299 + 1; num303++)
									{
										if (*Main.tile[num302, num303].wall == 0 && !WorldGen.SolidTile(num302, num303, false))
										{
											flag8 = true;
										}
									}
								}
								if (flag8)
								{
									for (int num304 = num298 - 1; num304 <= num298 + 1; num304++)
									{
										for (int num305 = num299 - 1; num305 <= num299 + 1; num305++)
										{
											if ((*Main.tile[num304, num305].wall == 2 || *Main.tile[num304, num305].wall == 15) && !WorldGen.SolidTile(num304, num305, false))
											{
												num300 = num304;
												num301 = num305;
											}
										}
									}
								}
							}
							if (flag8 && num300 > -1 && num301 > -1 && WorldGen.countDirtTiles(num300, num301) < WorldGen.maxTileCount)
							{
								try
								{
									ushort wallType = 63;
									if (WorldGen.dontStarveWorldGen && WorldGen.genRand.Next(3) != 0)
									{
										wallType = 62;
									}
									WorldGen.Spread.Wall2(num300, num301, (int)wallType);
								}
								catch
								{
								}
							}
						}
						num299++;
					}
				}
				for (int num306 = 5; num306 < Main.maxTilesX - 5; num306++)
				{
					int num307 = 10;
					while ((double)num307 < Main.worldSurface - 1.0)
					{
						if (*Main.tile[num306, num307].wall == 63 && WorldGen.genRand.Next(10) == 0)
						{
							*Main.tile[num306, num307].wall = 65;
						}
						if (Main.tile[num306, num307].active() && *Main.tile[num306, num307].type == 0)
						{
							bool flag9 = false;
							for (int num308 = num306 - 1; num308 <= num306 + 1; num308++)
							{
								for (int num309 = num307 - 1; num309 <= num307 + 1; num309++)
								{
									if (*Main.tile[num308, num309].wall == 63 || *Main.tile[num308, num309].wall == 65)
									{
										flag9 = true;
										break;
									}
								}
							}
							if (flag9)
							{
								WorldGen.SpreadGrass(num306, num307, 0, 2, true, default(TileColorCache));
							}
						}
						num307++;
					}
				}
			});
			WorldGen.AddGenerationPass("Guide", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				if (Main.tenthAnniversaryWorld)
				{
					BirthdayParty.GenuineParty = true;
					BirthdayParty.PartyDaysOnCooldown = 5;
					if (WorldGen.getGoodWorldGen)
					{
						Main.afterPartyOfDoom = true;
					}
					int num292;
					if (WorldGen.remixWorldGen)
					{
						num292 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 441, 0, 0f, 0f, 0f, 0f, 255);
						NPC.savedTaxCollector = true;
					}
					else
					{
						num292 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0f, 0f, 0f, 0f, 255);
					}
					Main.npc[num292].homeTileX = Main.spawnTileX;
					Main.npc[num292].homeTileY = Main.spawnTileY;
					Main.npc[num292].direction = 1;
					Main.npc[num292].homeless = true;
					Main.npc[num292].GivenName = Language.GetTextValue("GuideNames.Andrew");
					BirthdayParty.CelebratingNPCs.Add(num292);
					Point adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX + 2, Main.spawnTileY);
					num292 = NPC.NewNPC(new EntitySource_WorldGen(null), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 178, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num292].homeTileX = adjustedFloorPosition.X;
					Main.npc[num292].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num292].direction = -1;
					Main.npc[num292].homeless = true;
					Main.npc[num292].GivenName = Language.GetTextValue("SteampunkerNames.Whitney");
					BirthdayParty.CelebratingNPCs.Add(num292);
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX - 2, Main.spawnTileY);
					num292 = NPC.NewNPC(new EntitySource_WorldGen(null), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 663, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num292].homeTileX = adjustedFloorPosition.X;
					Main.npc[num292].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num292].direction = 1;
					Main.npc[num292].homeless = true;
					Main.npc[num292].GivenName = Language.GetTextValue("PrincessNames.Yorai");
					BirthdayParty.CelebratingNPCs.Add(num292);
					NPC.unlockedPrincessSpawn = true;
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX + 4, Main.spawnTileY);
					num292 = NPC.NewNPC(new EntitySource_WorldGen(null), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 208, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num292].homeTileX = adjustedFloorPosition.X;
					Main.npc[num292].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num292].direction = -1;
					Main.npc[num292].homeless = true;
					Main.npc[num292].GivenName = Language.GetTextValue("PartyGirlNames.Amanda");
					BirthdayParty.CelebratingNPCs.Add(num292);
					NPC.unlockedPartyGirlSpawn = true;
					adjustedFloorPosition = WorldGen.GetAdjustedFloorPosition(Main.spawnTileX - 4, Main.spawnTileY);
					if (Main.remixWorld)
					{
						num292 = NPC.NewNPC(new EntitySource_WorldGen(null), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 681, 0, 0f, 0f, 0f, 0f, 255);
						Main.npc[num292].GivenName = Language.GetTextValue("SlimeNames_Rainbow.Slimestar");
						NPC.unlockedSlimeRainbowSpawn = true;
					}
					else
					{
						num292 = NPC.NewNPC(new EntitySource_WorldGen(null), adjustedFloorPosition.X * 16, adjustedFloorPosition.Y * 16, 656, 0, 0f, 0f, 0f, 0f, 255);
						NPC.boughtBunny = true;
						Main.npc[num292].townNpcVariationIndex = 1;
					}
					Main.npc[num292].homeTileX = adjustedFloorPosition.X;
					Main.npc[num292].homeTileY = adjustedFloorPosition.Y;
					Main.npc[num292].direction = 1;
					Main.npc[num292].homeless = true;
					return;
				}
				if (WorldGen.remixWorldGen)
				{
					int num293 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 441, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num293].homeTileX = Main.spawnTileX;
					Main.npc[num293].homeTileY = Main.spawnTileY;
					Main.npc[num293].direction = 1;
					Main.npc[num293].homeless = true;
					NPC.savedTaxCollector = true;
					return;
				}
				if (WorldGen.notTheBees)
				{
					int num294 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 17, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num294].homeTileX = Main.spawnTileX;
					Main.npc[num294].homeTileY = Main.spawnTileY;
					Main.npc[num294].direction = 1;
					Main.npc[num294].homeless = true;
					NPC.unlockedMerchantSpawn = true;
					return;
				}
				if (WorldGen.drunkWorldGen)
				{
					int num295 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 208, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num295].homeTileX = Main.spawnTileX;
					Main.npc[num295].homeTileY = Main.spawnTileY;
					Main.npc[num295].direction = 1;
					Main.npc[num295].homeless = true;
					NPC.unlockedPartyGirlSpawn = true;
					return;
				}
				if (WorldGen.getGoodWorldGen)
				{
					int num296 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 38, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num296].homeTileX = Main.spawnTileX;
					Main.npc[num296].homeTileY = Main.spawnTileY;
					Main.npc[num296].direction = 1;
					Main.npc[num296].homeless = true;
					NPC.unlockedDemolitionistSpawn = true;
					return;
				}
				int num297 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num297].homeTileX = Main.spawnTileX;
				Main.npc[num297].homeTileY = Main.spawnTileY;
				Main.npc[num297].direction = 1;
				Main.npc[num297].homeless = true;
			});
			WorldGen.AddGenerationPass("Sunflowers", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[39].Value;
				double num283 = (double)Main.maxTilesX * 0.002;
				int num284 = 0;
				while ((double)num284 < num283)
				{
					progress.Set((double)num284 / num283);
					int num291 = Main.maxTilesX / 2;
					int num292 = WorldGen.genRand.Next(Main.maxTilesX);
					int num285 = num292 - WorldGen.genRand.Next(10) - 7;
					int num286 = num292 + WorldGen.genRand.Next(10) + 7;
					if (num285 < 0)
					{
						num285 = 0;
					}
					if (num286 > Main.maxTilesX - 1)
					{
						num286 = Main.maxTilesX - 1;
					}
					int num287 = 1;
					int num288 = (int)Main.worldSurface - 1;
					for (int num289 = num285; num289 < num286; num289++)
					{
						for (int num290 = num287; num290 < num288; num290++)
						{
							if (*Main.tile[num289, num290].type == 2 && Main.tile[num289, num290].active() && !Main.tile[num289, num290 - 1].active())
							{
								WorldGen.PlaceTile(num289, num290 - 1, 27, true, false, -1, 0);
							}
							if (Main.tile[num289, num290].active())
							{
								break;
							}
						}
					}
					num284++;
				}
			});
			WorldGen.AddGenerationPass("Planting Trees", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[40].Value;
				if (!WorldGen.drunkWorldGen && !Main.tenthAnniversaryWorld)
				{
					int num278 = 0;
					while ((double)num278 < (double)Main.maxTilesX * 0.003)
					{
						progress.Set((double)num278 / ((double)Main.maxTilesX * 0.003));
						int num279 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
						int num280 = WorldGen.genRand.Next(25, 50);
						for (int num281 = num279 - num280; num281 < num279 + num280; num281++)
						{
							int num282 = 20;
							while ((double)num282 < Main.worldSurface)
							{
								WorldGen.GrowEpicTree(num281, num282);
								num282++;
							}
						}
						num278++;
					}
				}
				WorldGen.AddTrees(false);
			});
			WorldGen.AddGenerationPass("Herbs", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				double num276 = (double)Main.maxTilesX * 1.7;
				if (WorldGen.remixWorldGen)
				{
					num276 *= 5.0;
				}
				progress.Message = Lang.gen[41].Value;
				int num277 = 0;
				while ((double)num277 < num276)
				{
					progress.Set((double)num277 / num276);
					WorldGen.PlantAlch();
					num277++;
				}
			});
			WorldGen.AddGenerationPass("Dye Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num275 = 0; num275 < Main.maxTilesX; num275++)
				{
					WorldGen.plantDye(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next(100, Main.UnderworldLayer), false);
				}
				WorldGen.MatureTheHerbPlants();
				WorldGen.GrowGlowTulips();
			});
			WorldGen.AddGenerationPass("Webs And Honey", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num265 = 100; num265 < Main.maxTilesX - 100; num265++)
				{
					int num266 = (int)Main.worldSurface;
					if (WorldGen.dontStarveWorldGen)
					{
						num266 = 50;
					}
					for (int num267 = num266; num267 < Main.maxTilesY - 100; num267++)
					{
						if (*Main.tile[num265, num267].wall == 86)
						{
							if (*Main.tile[num265, num267].liquid > 0)
							{
								Main.tile[num265, num267].honey(true);
							}
							if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTight(num265, num267, false);
							}
						}
						if (*Main.tile[num265, num267].wall == 62)
						{
							*Main.tile[num265, num267].liquid = 0;
							Main.tile[num265, num267].lava(false);
						}
						if (*Main.tile[num265, num267].wall == 62 && !Main.tile[num265, num267].active() && WorldGen.genRand.Next(10) != 0)
						{
							int num268 = WorldGen.genRand.Next(2, 5);
							int num274 = num265 - num268;
							int num269 = num265 + num268;
							int num270 = num267 - num268;
							int num271 = num267 + num268;
							bool flag7 = false;
							for (int num272 = num274; num272 <= num269; num272++)
							{
								for (int num273 = num270; num273 <= num271; num273++)
								{
									if (WorldGen.SolidTile(num272, num273, false))
									{
										flag7 = true;
										break;
									}
								}
							}
							if (flag7)
							{
								WorldGen.PlaceTile(num265, num267, 51, true, false, -1, 0);
								WorldGen.TileFrame(num265, num267, false, false);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Weeds", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[42].Value;
				if (Main.halloween)
				{
					for (int num259 = 40; num259 < Main.maxTilesX - 40; num259++)
					{
						int num260 = 50;
						while ((double)num260 < Main.worldSurface)
						{
							if (Main.tile[num259, num260].active() && *Main.tile[num259, num260].type == 2 && WorldGen.genRand.Next(15) == 0)
							{
								WorldGen.PlacePumpkin(num259, num260 - 1);
								int num261 = WorldGen.genRand.Next(5);
								for (int num262 = 0; num262 < num261; num262++)
								{
									WorldGen.GrowPumpkin(num259, num260 - 1, 254);
								}
							}
							num260++;
						}
					}
				}
				for (int num263 = 0; num263 < Main.maxTilesX; num263++)
				{
					progress.Set((double)num263 / (double)Main.maxTilesX);
					for (int num264 = 1; num264 < Main.maxTilesY; num264++)
					{
						if (*Main.tile[num263, num264].type == 2 && Main.tile[num263, num264].nactive())
						{
							if (!Main.tile[num263, num264 - 1].active())
							{
								WorldGen.PlaceTile(num263, num264 - 1, 3, true, false, -1, 0);
								Main.tile[num263, num264 - 1].CopyPaintAndCoating(Main.tile[num263, num264]);
							}
						}
						else if (*Main.tile[num263, num264].type == 23 && Main.tile[num263, num264].nactive())
						{
							if (!Main.tile[num263, num264 - 1].active())
							{
								WorldGen.PlaceTile(num263, num264 - 1, 24, true, false, -1, 0);
							}
						}
						else if (*Main.tile[num263, num264].type == 199 && Main.tile[num263, num264].nactive())
						{
							if (!Main.tile[num263, num264 - 1].active())
							{
								WorldGen.PlaceTile(num263, num264 - 1, 201, true, false, -1, 0);
							}
						}
						else if (*Main.tile[num263, num264].type == 633 && Main.tile[num263, num264].nactive() && !Main.tile[num263, num264 - 1].active())
						{
							WorldGen.PlaceTile(num263, num264 - 1, 637, true, false, -1, 0);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Glowing Mushrooms and Jungle Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num257 = 0; num257 < Main.maxTilesX; num257++)
				{
					for (int num258 = 0; num258 < Main.maxTilesY; num258++)
					{
						if (Main.tile[num257, num258].active())
						{
							if (num258 >= (int)Main.worldSurface && *Main.tile[num257, num258].type == 70 && !Main.tile[num257, num258 - 1].active())
							{
								WorldGen.GrowTree(num257, num258);
								if (!Main.tile[num257, num258 - 1].active())
								{
									WorldGen.GrowTree(num257, num258);
									if (!Main.tile[num257, num258 - 1].active())
									{
										WorldGen.GrowTree(num257, num258);
										if (!Main.tile[num257, num258 - 1].active())
										{
											WorldGen.PlaceTile(num257, num258 - 1, 71, true, false, -1, 0);
										}
									}
								}
							}
							if (*Main.tile[num257, num258].type == 60 && !Main.tile[num257, num258 - 1].active())
							{
								WorldGen.PlaceTile(num257, num258 - 1, 61, true, false, -1, 0);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Jungle Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num254 = 0; num254 < Main.maxTilesX * 100; num254++)
				{
					int num255 = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
					if (GenVars.dungeonSide < 0)
					{
						num255 += Main.maxTilesX / 2;
					}
					int num256 = WorldGen.genRand.Next(Main.maxTilesY - 300);
					while (!Main.tile[num255, num256].active() && num256 < Main.maxTilesY - 300)
					{
						num256++;
					}
					if (Main.tile[num255, num256].active() && *Main.tile[num255, num256].type == 60)
					{
						num256--;
						WorldGen.PlaceJunglePlant(num255, num256, 233, WorldGen.genRand.Next(8), 0);
						if (*Main.tile[num255, num256].type != 233)
						{
							WorldGen.PlaceJunglePlant(num255, num256, 233, WorldGen.genRand.Next(12), 1);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Vines", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[43].Value;
				for (int num233 = 5; num233 < Main.maxTilesX - 5; num233++)
				{
					progress.Set((double)num233 / (double)Main.maxTilesX);
					int num234 = 0;
					ushort type3 = 52;
					int num235 = (int)Main.worldSurface;
					if (WorldGen.remixWorldGen)
					{
						num235 = Main.maxTilesY - 200;
					}
					for (int num236 = 0; num236 < num235; num236++)
					{
						if (num234 > 0 && !Main.tile[num233, num236].active())
						{
							Main.tile[num233, num236].active(true);
							*Main.tile[num233, num236].type = type3;
							Main.tile[num233, num236].CopyPaintAndCoating(Main.tile[num233, num236 - 1]);
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num236].active() && !Main.tile[num233, num236].bottomSlope() && (*Main.tile[num233, num236].type == 2 || (*Main.tile[num233, num236].type == 192 && WorldGen.genRand.Next(4) == 0)) && WorldGen.GrowMoreVines(num233, num236))
						{
							type3 = 52;
							if (*Main.tile[num233, num236].wall == 68 || *Main.tile[num233, num236].wall == 65 || *Main.tile[num233, num236].wall == 66 || *Main.tile[num233, num236].wall == 63)
							{
								type3 = 382;
							}
							else if (*Main.tile[num233, num236 + 1].wall == 68 || *Main.tile[num233, num236 + 1].wall == 65 || *Main.tile[num233, num236 + 1].wall == 66 || *Main.tile[num233, num236 + 1].wall == 63)
							{
								type3 = 382;
							}
							if (WorldGen.remixWorldGen && WorldGen.genRand.Next(5) == 0)
							{
								type3 = 382;
							}
							if (WorldGen.genRand.Next(5) < 3)
							{
								num234 = WorldGen.genRand.Next(1, 10);
							}
						}
					}
					num234 = 0;
					for (int num237 = 5; num237 < Main.maxTilesY - 5; num237++)
					{
						if (num234 > 0 && !Main.tile[num233, num237].active())
						{
							Main.tile[num233, num237].active(true);
							*Main.tile[num233, num237].type = 62;
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num237].active() && *Main.tile[num233, num237].type == 60 && !Main.tile[num233, num237].bottomSlope() && WorldGen.GrowMoreVines(num233, num237))
						{
							if (WorldGen.notTheBees && num237 < Main.maxTilesY - 10 && Main.tile[num233, num237 - 1].active() && !Main.tile[num233, num237 - 1].bottomSlope() && Main.tile[num233 + 1, num237 - 1].active() && !Main.tile[num233 + 1, num237 - 1].bottomSlope() && (*Main.tile[num233, num237 - 1].type == 60 || *Main.tile[num233, num237 - 1].type == 444 || *Main.tile[num233, num237 - 1].type == 230))
							{
								bool flag5 = true;
								for (int num238 = num233; num238 < num233 + 2; num238++)
								{
									for (int num239 = num237 + 1; num239 < num237 + 3; num239++)
									{
										if (Main.tile[num238, num239].active() && (!Main.tileCut[(int)(*Main.tile[num238, num239].type)] || *Main.tile[num238, num239].type == 444))
										{
											flag5 = false;
											break;
										}
										if (*Main.tile[num238, num239].liquid > 0 || Main.wallHouse[(int)(*Main.tile[num238, num239].wall)])
										{
											flag5 = false;
											break;
										}
									}
									if (!flag5)
									{
										break;
									}
								}
								if (flag5 && WorldGen.CountNearBlocksTypes(num233, num237, WorldGen.genRand.Next(3, 10), 1, new int[]
								{
									444
								}) > 0)
								{
									flag5 = false;
								}
								if (flag5)
								{
									for (int num240 = num233; num240 < num233 + 2; num240++)
									{
										for (int num241 = num237 + 1; num241 < num237 + 3; num241++)
										{
											WorldGen.KillTile(num240, num241, false, false, false);
										}
									}
									for (int num242 = num233; num242 < num233 + 2; num242++)
									{
										for (int num243 = num237 + 1; num243 < num237 + 3; num243++)
										{
											Main.tile[num242, num243].active(true);
											*Main.tile[num242, num243].type = 444;
											*Main.tile[num242, num243].frameX = (short)((num242 - num233) * 18);
											*Main.tile[num242, num243].frameY = (short)((num243 - num237 - 1) * 18);
										}
									}
									goto IL_8AD;
								}
							}
							else if (num233 < Main.maxTilesX - 1 && num237 < Main.maxTilesY - 2 && Main.tile[num233 + 1, num237].active() && *Main.tile[num233 + 1, num237].type == 60 && !Main.tile[num233 + 1, num237].bottomSlope() && WorldGen.genRand.Next(40) == 0)
							{
								bool flag6 = true;
								for (int num244 = num233; num244 < num233 + 2; num244++)
								{
									for (int num245 = num237 + 1; num245 < num237 + 3; num245++)
									{
										if (Main.tile[num244, num245].active() && (!Main.tileCut[(int)(*Main.tile[num244, num245].type)] || *Main.tile[num244, num245].type == 444))
										{
											flag6 = false;
											break;
										}
										if (*Main.tile[num244, num245].liquid > 0 || Main.wallHouse[(int)(*Main.tile[num244, num245].wall)])
										{
											flag6 = false;
											break;
										}
									}
									if (!flag6)
									{
										break;
									}
								}
								if (flag6 && WorldGen.CountNearBlocksTypes(num233, num237, 20, 1, new int[]
								{
									444
								}) > 0)
								{
									flag6 = false;
								}
								if (flag6)
								{
									for (int num246 = num233; num246 < num233 + 2; num246++)
									{
										for (int num247 = num237 + 1; num247 < num237 + 3; num247++)
										{
											WorldGen.KillTile(num246, num247, false, false, false);
										}
									}
									for (int num248 = num233; num248 < num233 + 2; num248++)
									{
										for (int num249 = num237 + 1; num249 < num237 + 3; num249++)
										{
											Main.tile[num248, num249].active(true);
											*Main.tile[num248, num249].type = 444;
											*Main.tile[num248, num249].frameX = (short)((num248 - num233) * 18);
											*Main.tile[num248, num249].frameY = (short)((num249 - num237 - 1) * 18);
										}
									}
									goto IL_8AD;
								}
							}
							if (WorldGen.genRand.Next(5) < 3)
							{
								num234 = WorldGen.genRand.Next(1, 10);
							}
						}
						IL_8AD:;
					}
					num234 = 0;
					for (int num250 = 0; num250 < Main.maxTilesY; num250++)
					{
						if (num234 > 0 && !Main.tile[num233, num250].active())
						{
							Main.tile[num233, num250].active(true);
							*Main.tile[num233, num250].type = 528;
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num250].active() && *Main.tile[num233, num250].type == 70 && WorldGen.genRand.Next(5) == 0 && !Main.tile[num233, num250].bottomSlope() && WorldGen.GrowMoreVines(num233, num250) && WorldGen.genRand.Next(5) < 3)
						{
							num234 = WorldGen.genRand.Next(1, 10);
						}
					}
					num234 = 0;
					for (int num251 = 0; num251 < Main.maxTilesY; num251++)
					{
						if (num234 > 0 && !Main.tile[num233, num251].active())
						{
							Main.tile[num233, num251].active(true);
							*Main.tile[num233, num251].type = 636;
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num251].active() && !Main.tile[num233, num251].bottomSlope() && *Main.tile[num233, num251].type == 23 && WorldGen.GrowMoreVines(num233, num251) && WorldGen.genRand.Next(5) < 3)
						{
							num234 = WorldGen.genRand.Next(1, 10);
						}
					}
					num234 = 0;
					for (int num252 = 0; num252 < Main.maxTilesY; num252++)
					{
						if (num234 > 0 && !Main.tile[num233, num252].active())
						{
							Main.tile[num233, num252].active(true);
							*Main.tile[num233, num252].type = 205;
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num252].active() && !Main.tile[num233, num252].bottomSlope() && *Main.tile[num233, num252].type == 199 && WorldGen.GrowMoreVines(num233, num252) && WorldGen.genRand.Next(5) < 3)
						{
							num234 = WorldGen.genRand.Next(1, 10);
						}
					}
					num234 = 0;
					for (int num253 = 0; num253 < Main.maxTilesY; num253++)
					{
						if (num234 > 0 && !Main.tile[num233, num253].active())
						{
							Main.tile[num233, num253].active(true);
							*Main.tile[num233, num253].type = 638;
							num234--;
						}
						else
						{
							num234 = 0;
						}
						if (Main.tile[num233, num253].active() && !Main.tile[num233, num253].bottomSlope() && *Main.tile[num233, num253].type == 633 && WorldGen.GrowMoreVines(num233, num253) && WorldGen.genRand.Next(5) < 3)
						{
							num234 = WorldGen.genRand.Next(1, 10);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Flowers", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[44].Value;
				int num220 = (int)((double)Main.maxTilesX * 0.004);
				if (WorldGen.remixWorldGen)
				{
					num220 *= 6;
				}
				for (int num221 = 0; num221 < num220; num221++)
				{
					progress.Set((double)num221 / (double)num220);
					int num222 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
					int num223 = WorldGen.genRand.Next(15, 30);
					int num224 = WorldGen.genRand.Next(15, 30);
					if (WorldGen.remixWorldGen)
					{
						num223 = WorldGen.genRand.Next(15, 45);
						num224 = WorldGen.genRand.Next(15, 45);
						int num225 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						if (GenVars.logX >= 0)
						{
							num222 = GenVars.logX;
							num225 = GenVars.logY;
							GenVars.logX = -1;
						}
						int num226 = WorldGen.genRand.NextFromList(new int[]
						{
							21,
							24,
							27,
							30,
							33,
							36,
							39,
							42
						});
						for (int num227 = num222 - num223; num227 < num222 + num223; num227++)
						{
							for (int num228 = num225 - num224; num228 < num225 + num224; num228++)
							{
								if (*Main.tile[num227, num228].type != 488 && !Main.tileSolid[(int)(*Main.tile[num227, num228].type)])
								{
									if (*Main.tile[num227, num228].type == 3)
									{
										*Main.tile[num227, num228].frameX = (short)((num226 + WorldGen.genRand.Next(3)) * 18);
										if (WorldGen.genRand.Next(3) != 0)
										{
											*Main.tile[num227, num228].type = 73;
										}
									}
									else if (*Main.tile[num227, num228 + 1].wall == 0 && (*Main.tile[num227, num228 + 1].type == 2 || ((*Main.tile[num227, num228 + 1].type == 40 || *Main.tile[num227, num228 + 1].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num227, num228 + 1].type)]) && !Main.tile[num227, num228].active())) && (!Main.tile[num227, num228].active() || *Main.tile[num227, num228].type == 185 || *Main.tile[num227, num228].type == 186 || *Main.tile[num227, num228].type == 187 || (*Main.tile[num227, num228].type == 5 && (double)num227 < (double)Main.maxTilesX * 0.48) || (double)num227 > (double)Main.maxTilesX * 0.52))
									{
										if (*Main.tile[num227, num228 + 1].type == 40 || *Main.tile[num227, num228 + 1].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num227, num228 + 1].type)])
										{
											*Main.tile[num227, num228 + 1].type = 2;
											if (*Main.tile[num227, num228 + 2].type == 40 || *Main.tile[num227, num228 + 2].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num227, num228 + 2].type)])
											{
												*Main.tile[num227, num228 + 2].type = 2;
											}
										}
										WorldGen.KillTile(num227, num228, false, false, false);
										if (WorldGen.genRand.Next(2) == 0)
										{
											Main.tile[num227, num228 + 1].slope(0);
											Main.tile[num227, num228 + 1].halfBrick(false);
										}
										WorldGen.PlaceTile(num227, num228, 3, false, false, -1, 0);
										if (Main.tile[num227, num228].active() && *Main.tile[num227, num228].type == 3)
										{
											*Main.tile[num227, num228].frameX = (short)((num226 + WorldGen.genRand.Next(3)) * 18);
											if (WorldGen.genRand.Next(3) != 0)
											{
												*Main.tile[num227, num228].type = 73;
											}
										}
										if (*Main.tile[num227, num228 + 2].type == 40 || *Main.tile[num227, num228 + 2].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num227, num228 + 2].type)])
										{
											*Main.tile[num227, num228 + 2].type = 0;
										}
									}
								}
							}
						}
					}
					else
					{
						int num229 = num224;
						while ((double)num229 < Main.worldSurface - (double)num224 - 1.0)
						{
							if (Main.tile[num222, num229].active())
							{
								if (GenVars.logX >= 0)
								{
									num222 = GenVars.logX;
									num229 = GenVars.logY;
									GenVars.logX = -1;
								}
								int num230 = WorldGen.genRand.NextFromList(new int[]
								{
									21,
									24,
									27,
									30,
									33,
									36,
									39,
									42
								});
								for (int num231 = num222 - num223; num231 < num222 + num223; num231++)
								{
									for (int num232 = num229 - num224; num232 < num229 + num224; num232++)
									{
										if (*Main.tile[num231, num232].type != 488 && !Main.tileSolid[(int)(*Main.tile[num231, num232].type)])
										{
											if (*Main.tile[num231, num232].type == 3)
											{
												*Main.tile[num231, num232].frameX = (short)((num230 + WorldGen.genRand.Next(3)) * 18);
												if (WorldGen.genRand.Next(3) != 0)
												{
													*Main.tile[num231, num232].type = 73;
												}
											}
											else if (*Main.tile[num231, num232 + 1].wall == 0 && (*Main.tile[num231, num232 + 1].type == 2 || ((*Main.tile[num231, num232 + 1].type == 40 || *Main.tile[num231, num232 + 1].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num231, num232 + 1].type)]) && !Main.tile[num231, num232].active())) && (!Main.tile[num231, num232].active() || *Main.tile[num231, num232].type == 185 || *Main.tile[num231, num232].type == 186 || *Main.tile[num231, num232].type == 187 || (*Main.tile[num231, num232].type == 5 && (double)num231 < (double)Main.maxTilesX * 0.48) || (double)num231 > (double)Main.maxTilesX * 0.52))
											{
												if (*Main.tile[num231, num232 + 1].type == 40 || *Main.tile[num231, num232 + 1].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num231, num232 + 1].type)])
												{
													*Main.tile[num231, num232 + 1].type = 2;
													if (*Main.tile[num231, num232 + 2].type == 40 || *Main.tile[num231, num232 + 2].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num231, num232 + 2].type)])
													{
														*Main.tile[num231, num232 + 2].type = 2;
													}
												}
												WorldGen.KillTile(num231, num232, false, false, false);
												if (WorldGen.genRand.Next(2) == 0)
												{
													Main.tile[num231, num232 + 1].slope(0);
													Main.tile[num231, num232 + 1].halfBrick(false);
												}
												WorldGen.PlaceTile(num231, num232, 3, false, false, -1, 0);
												if (Main.tile[num231, num232].active() && *Main.tile[num231, num232].type == 3)
												{
													*Main.tile[num231, num232].frameX = (short)((num230 + WorldGen.genRand.Next(3)) * 18);
													if (WorldGen.genRand.Next(3) != 0)
													{
														*Main.tile[num231, num232].type = 73;
													}
												}
												if (*Main.tile[num231, num232 + 2].type == 40 || *Main.tile[num231, num232 + 2].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num231, num232 + 2].type)])
												{
													*Main.tile[num231, num232 + 2].type = 0;
												}
											}
										}
									}
								}
								break;
							}
							num229++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Mushrooms", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[45].Value;
				int num209 = (int)((double)Main.maxTilesX * 0.002);
				if (WorldGen.remixWorldGen)
				{
					num209 *= 9;
				}
				for (int num210 = 0; num210 < num209; num210++)
				{
					progress.Set((double)num210 / (double)num209);
					int num211 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num212 = WorldGen.genRand.Next(4, 10);
					int num213 = WorldGen.genRand.Next(15, 30);
					if (WorldGen.remixWorldGen)
					{
						num212 = WorldGen.genRand.Next(8, 17);
						num213 = WorldGen.genRand.Next(8, 17);
						int num214 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
						if (Main.tile[num211, num214].active())
						{
							for (int num215 = num211 - num212; num215 < num211 + num212; num215++)
							{
								int num216 = num214 - num213;
								while (num216 < num214 + num213 && num215 >= 10 && num216 >= 0 && num215 <= Main.maxTilesX - 10 && num216 <= Main.maxTilesY - 10)
								{
									if (*Main.tile[num215, num216].type == 3 || *Main.tile[num215, num216].type == 24)
									{
										*Main.tile[num215, num216].frameX = 144;
									}
									else if (*Main.tile[num215, num216].type == 201)
									{
										*Main.tile[num215, num216].frameX = 270;
									}
									num216++;
								}
							}
						}
					}
					else
					{
						int num217 = 1;
						while ((double)num217 < Main.worldSurface - 1.0)
						{
							if (Main.tile[num211, num217].active())
							{
								for (int num218 = num211 - num212; num218 < num211 + num212; num218++)
								{
									int num219 = num217 - num213;
									while (num219 < num217 + num213 && num218 >= 10 && num219 >= 0 && num218 <= Main.maxTilesX - 10 && num219 <= Main.maxTilesY - 10)
									{
										if (*Main.tile[num218, num219].type == 3 || *Main.tile[num218, num219].type == 24)
										{
											*Main.tile[num218, num219].frameX = 144;
										}
										else if (*Main.tile[num218, num219].type == 201)
										{
											*Main.tile[num218, num219].frameX = 270;
										}
										num219++;
									}
								}
								break;
							}
							num217++;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Gems In Ice Biome", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num198 = 0;
				while ((double)num198 < (double)Main.maxTilesX * 0.25)
				{
					int num199 = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, GenVars.lavaLine) : WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					int num200 = WorldGen.genRand.Next(GenVars.snowMinX[num199], GenVars.snowMaxX[num199]);
					if (Main.tile[num200, num199].active() && (*Main.tile[num200, num199].type == 147 || *Main.tile[num200, num199].type == 161 || *Main.tile[num200, num199].type == 162 || *Main.tile[num200, num199].type == 224))
					{
						int num201 = WorldGen.genRand.Next(1, 4);
						int num202 = WorldGen.genRand.Next(1, 4);
						int num203 = WorldGen.genRand.Next(1, 4);
						int num204 = WorldGen.genRand.Next(1, 4);
						int num205 = WorldGen.genRand.Next(12);
						int num206 = (num205 >= 3) ? ((num205 < 6) ? 1 : ((num205 < 8) ? 2 : ((num205 < 10) ? 3 : ((num205 >= 11) ? 5 : 4)))) : 0;
						for (int num207 = num200 - num201; num207 < num200 + num202; num207++)
						{
							for (int num208 = num199 - num203; num208 < num199 + num204; num208++)
							{
								if (!Main.tile[num207, num208].active())
								{
									WorldGen.PlaceTile(num207, num208, 178, true, false, -1, num206);
								}
							}
						}
					}
					num198++;
				}
			});
			WorldGen.AddGenerationPass("Random Gems", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num184 = 0; num184 < Main.maxTilesX; num184++)
				{
					int num185 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num186 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 300);
					if (!Main.tile[num185, num186].active() && !Main.tile[num185, num186].lava() && !Main.wallDungeon[(int)(*Main.tile[num185, num186].wall)] && *Main.tile[num185, num186].wall != 27)
					{
						int num187 = WorldGen.genRand.Next(12);
						int num188 = (num187 >= 3) ? ((num187 < 6) ? 1 : ((num187 < 8) ? 2 : ((num187 < 10) ? 3 : ((num187 >= 11) ? 5 : 4)))) : 0;
						WorldGen.PlaceTile(num185, num186, 178, true, false, -1, num188);
					}
				}
				for (int num189 = 0; num189 < Main.maxTilesX; num189++)
				{
					int num190 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
					int num191 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
					if (!Main.tile[num190, num191].active() && !Main.tile[num190, num191].lava() && (*Main.tile[num190, num191].wall == 216 || *Main.tile[num190, num191].wall == 187))
					{
						int num192 = WorldGen.genRand.Next(1, 4);
						int num193 = WorldGen.genRand.Next(1, 4);
						int num194 = WorldGen.genRand.Next(1, 4);
						int num195 = WorldGen.genRand.Next(1, 4);
						for (int num196 = num190 - num192; num196 < num190 + num193; num196++)
						{
							for (int num197 = num191 - num194; num197 < num191 + num195; num197++)
							{
								if (!Main.tile[num196, num197].active())
								{
									WorldGen.PlaceTile(num196, num197, 178, true, false, -1, 6);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Moss Grass", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num179 = 5; num179 < Main.maxTilesX - 5; num179++)
				{
					for (int num180 = 5; num180 < Main.maxTilesY - 5; num180++)
					{
						if (Main.tile[num179, num180].active() && Main.tileMoss[(int)(*Main.tile[num179, num180].type)])
						{
							for (int num181 = 0; num181 < 4; num181++)
							{
								int num182 = num179;
								int num183 = num180;
								if (num181 == 0)
								{
									num182--;
								}
								if (num181 == 1)
								{
									num182++;
								}
								if (num181 == 2)
								{
									num183--;
								}
								if (num181 == 3)
								{
									num183++;
								}
								if (!Main.tile[num182, num183].active())
								{
									WorldGen.PlaceTile(num182, num183, 184, true, false, -1, 0);
								}
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Muds Walls In Jungle", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				int num171 = 0;
				int num172 = 0;
				bool flag4 = false;
				for (int num173 = 5; num173 < Main.maxTilesX - 5; num173++)
				{
					int num174 = 0;
					while ((double)num174 < Main.worldSurface + 20.0)
					{
						if (Main.tile[num173, num174].active() && *Main.tile[num173, num174].type == 60)
						{
							num171 = num173;
							flag4 = true;
							break;
						}
						num174++;
					}
					if (flag4)
					{
						break;
					}
				}
				flag4 = false;
				for (int num175 = Main.maxTilesX - 5; num175 > 5; num175--)
				{
					int num176 = 0;
					while ((double)num176 < Main.worldSurface + 20.0)
					{
						if (Main.tile[num175, num176].active() && *Main.tile[num175, num176].type == 60)
						{
							num172 = num175;
							flag4 = true;
							break;
						}
						num176++;
					}
					if (flag4)
					{
						break;
					}
				}
				GenVars.jungleMinX = num171;
				GenVars.jungleMaxX = num172;
				for (int num177 = num171; num177 <= num172; num177++)
				{
					int num178 = 0;
					while ((double)num178 < Main.worldSurface + 20.0)
					{
						if (((num177 >= num171 + 2 && num177 <= num172 - 2) || WorldGen.genRand.Next(2) != 0) && ((num177 >= num171 + 3 && num177 <= num172 - 3) || WorldGen.genRand.Next(3) != 0) && (*Main.tile[num177, num178].wall == 2 || *Main.tile[num177, num178].wall == 59))
						{
							*Main.tile[num177, num178].wall = 15;
						}
						num178++;
					}
				}
			});
			WorldGen.AddGenerationPass("Larva", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[229] = true;
				progress.Set(1.0);
				for (int num166 = 0; num166 < GenVars.numLarva; num166++)
				{
					int num167 = GenVars.larvaX[num166];
					int num168 = GenVars.larvaY[num166];
					for (int num169 = num167 - 1; num169 <= num167 + 1; num169++)
					{
						for (int num170 = num168 - 2; num170 <= num168 + 1; num170++)
						{
							if (num170 != num168 + 1)
							{
								Main.tile[num169, num170].active(false);
							}
							else
							{
								Main.tile[num169, num170].active(true);
								*Main.tile[num169, num170].type = 225;
								Main.tile[num169, num170].slope(0);
								Main.tile[num169, num170].halfBrick(false);
							}
						}
					}
					WorldGen.PlaceTile(num167, num168, 231, true, false, -1, 0);
				}
				Main.tileSolid[232] = true;
				Main.tileSolid[162] = true;
			});
			WorldGen.AddGenerationPass("Settle Liquids Again", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (WorldGen.getGoodWorldGen)
				{
					Main.tileSolid[56] = true;
				}
				progress.Message = Lang.gen[27].Value;
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
				}
				Liquid.worldGenTilesIgnoreWater(true);
				Liquid.QuickWater(3, -1, -1);
				WorldGen.WaterCheck();
				int num160 = 0;
				Liquid.quickSettle = true;
				int num161 = 10;
				while (num160 < num161)
				{
					int num162 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
					num160++;
					double num163 = 0.0;
					int num164 = num162 * 5;
					while (Liquid.numLiquid > 0)
					{
						num164--;
						if (num164 < 0)
						{
							break;
						}
						double num165 = (double)(num162 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (double)num162;
						if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num162)
						{
							num162 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
						}
						if (num165 > num163)
						{
							num163 = num165;
						}
						else
						{
							num165 = num163;
						}
						if (num160 == 1)
						{
							progress.Set(num165 / 3.0 + 0.33);
						}
						Liquid.UpdateLiquid();
					}
					WorldGen.WaterCheck();
					progress.Set((double)num160 / (double)num161 / 3.0 + 0.66);
				}
				Liquid.quickSettle = false;
				Liquid.worldGenTilesIgnoreWater(false);
				Main.tileSolid[484] = false;
			});
			WorldGen.AddGenerationPass("Cactus, Palm Trees, & Coral", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[38].Value;
				int num132 = 8;
				if (WorldGen.remixWorldGen)
				{
					num132 = 2;
				}
				int num133 = 400;
				int num134 = WorldGen.genRand.Next(3, 13);
				int num135 = WorldGen.genRand.Next(3, 13);
				WorldGen.genRand.Next(2, 6);
				WorldGen.genRand.Next(2, 6);
				int num136 = 380;
				for (int num137 = 0; num137 < GenVars.numOasis; num137++)
				{
					int num138 = (int)((double)GenVars.oasisWidth[num137] * 1.5);
					for (int num139 = GenVars.oasisPosition[num137].X - num138; num139 <= GenVars.oasisPosition[num137].X + num138; num139++)
					{
						for (int num140 = GenVars.oasisPosition[num137].Y - GenVars.oasisHeight; num140 <= GenVars.oasisPosition[num137].Y + GenVars.oasisHeight; num140++)
						{
							double num141 = 1.0;
							int num142 = 8;
							for (int num143 = num139 - num142; num143 <= num139 + num142; num143++)
							{
								for (int num144 = num140 - num142; num144 <= num140 + num142; num144++)
								{
									if (WorldGen.InWorld(num143, num144, 0) && Main.tile[num143, num144] != null && Main.tile[num143, num144].active() && *Main.tile[num143, num144].type == 323)
									{
										num141 = 0.13;
									}
								}
							}
							if (WorldGen.genRand.NextDouble() < num141)
							{
								WorldGen.GrowPalmTree(num139, num140);
							}
							if (WorldGen.PlantSeaOat(num139, num140))
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.GrowSeaOat(num139, num140);
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.GrowSeaOat(num139, num140);
								}
							}
							WorldGen.PlaceOasisPlant(num139, num140, 530);
						}
					}
				}
				for (int num145 = 0; num145 < 3; num145++)
				{
					progress.Set((double)num145 / 3.0);
					int num146;
					int num147;
					bool flag3;
					int maxValue4;
					if (num145 != 1)
					{
						if (num145 != 2)
						{
							num146 = 5;
							num147 = num136;
							flag3 = false;
							maxValue4 = num134;
						}
						else
						{
							num146 = Main.maxTilesX - num136;
							num147 = Main.maxTilesX - 5;
							flag3 = false;
							maxValue4 = num135;
						}
					}
					else
					{
						num146 = num133;
						num147 = Main.maxTilesX - num133;
						flag3 = true;
						maxValue4 = num132;
					}
					double num148 = Main.worldSurface - 1.0;
					if (WorldGen.remixWorldGen)
					{
						num148 = (double)(Main.maxTilesY - 50);
					}
					for (int num149 = num146; num149 < num147; num149++)
					{
						if (WorldGen.genRand.Next(maxValue4) == 0)
						{
							int num150 = 0;
							while ((double)num150 < num148)
							{
								Tile tile4 = Main.tile[num149, num150];
								if (tile4.active() && (*tile4.type == 53 || *tile4.type == 112 || *tile4.type == 234))
								{
									Tile tile5 = Main.tile[num149, num150 - 1];
									if (!tile5.active() && *tile5.wall == 0)
									{
										if (flag3)
										{
											if (WorldGen.remixWorldGen)
											{
												if ((double)num150 > Main.worldSurface)
												{
													if (WorldGen.SolidTile(num149, num150, false) && *Main.tile[num149, num150 + 1].type == 53 && *Main.tile[num149, num150 + 2].type == 53)
													{
														int maxValue5 = 3;
														WorldGen.GrowPalmTree(num149, num150);
														if (!Main.tile[num149, num150 - 1].active() && WorldGen.genRand.Next(maxValue5) == 0)
														{
															WorldGen.PlantCactus(num149, num150);
														}
													}
												}
												else
												{
													int num151 = 0;
													for (int num152 = num149 - WorldGen.cactusWaterWidth; num152 < num149 + WorldGen.cactusWaterWidth; num152++)
													{
														for (int num153 = num150 - WorldGen.cactusWaterHeight; num153 < num150 + WorldGen.cactusWaterHeight; num153++)
														{
															num151 += (int)(*Main.tile[num152, num153].liquid);
														}
													}
													if (num151 / 255 > WorldGen.cactusWaterLimit)
													{
														int maxValue6 = 4;
														if (WorldGen.genRand.Next(maxValue6) == 0)
														{
															WorldGen.GrowPalmTree(num149, num150);
														}
													}
													else
													{
														WorldGen.PlantCactus(num149, num150);
													}
												}
											}
											else
											{
												int num154 = 0;
												for (int num155 = num149 - WorldGen.cactusWaterWidth; num155 < num149 + WorldGen.cactusWaterWidth; num155++)
												{
													for (int num156 = num150 - WorldGen.cactusWaterHeight; num156 < num150 + WorldGen.cactusWaterHeight; num156++)
													{
														num154 += (int)(*Main.tile[num155, num156].liquid);
													}
												}
												if (num154 / 255 > WorldGen.cactusWaterLimit)
												{
													int maxValue7 = 4;
													if (WorldGen.genRand.Next(maxValue7) == 0)
													{
														WorldGen.GrowPalmTree(num149, num150);
													}
												}
												else
												{
													WorldGen.PlantCactus(num149, num150);
												}
											}
										}
										else if (*Main.tile[num149, num150 - 2].liquid == 255 && *Main.tile[num149, num150 - 3].liquid == 255 && *Main.tile[num149, num150 - 4].liquid == 255)
										{
											if (WorldGen.genRand.Next(2) == 0)
											{
												WorldGen.PlaceTile(num149, num150 - 1, 81, true, false, -1, 0);
												break;
											}
											WorldGen.PlaceTile(num149, num150 - 1, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
											break;
										}
										else if (*Main.tile[num149, num150 - 2].liquid == 0 && (double)num150 < Main.worldSurface)
										{
											WorldGen.PlaceTile(num149, num150 - 1, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
											break;
										}
									}
								}
								num150++;
							}
						}
						else
						{
							int num157 = 0;
							while ((double)num157 < num148)
							{
								if (WorldGen.PlantSeaOat(num149, num157))
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.GrowSeaOat(num149, num157);
									}
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.GrowSeaOat(num149, num157);
									}
								}
								WorldGen.PlaceOasisPlant(num149, num157, 530);
								num157++;
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Tile Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[84].Value;
				for (int num64 = 40; num64 < Main.maxTilesX - 40; num64++)
				{
					progress.Set((double)(num64 - 40) / (double)(Main.maxTilesX - 80));
					for (int num65 = 40; num65 < Main.maxTilesY - 40; num65++)
					{
						if (Main.tile[num64, num65].active() && Main.tile[num64, num65].topSlope() && ((Main.tile[num64, num65].leftSlope() && Main.tile[num64 + 1, num65].halfBrick()) || (Main.tile[num64, num65].rightSlope() && Main.tile[num64 - 1, num65].halfBrick())))
						{
							Main.tile[num64, num65].slope(0);
							Main.tile[num64, num65].halfBrick(true);
						}
						if (Main.tile[num64, num65].active() && *Main.tile[num64, num65].liquid > 0 && TileID.Sets.SlowlyDiesInWater[(int)(*Main.tile[num64, num65].type)])
						{
							WorldGen.KillTile(num64, num65, false, false, false);
						}
						if (!Main.tile[num64, num65].active() && *Main.tile[num64, num65].liquid == 0 && WorldGen.genRand.Next(3) != 0 && WorldGen.SolidTile(num64, num65 - 1, false))
						{
							int num66 = WorldGen.genRand.Next(15, 21);
							for (int num67 = num65 - 2; num67 >= num65 - num66; num67--)
							{
								if (*Main.tile[num64, num67].liquid >= 128 && !Main.tile[num64, num67].shimmer())
								{
									int num68 = 373;
									if (Main.tile[num64, num67].lava())
									{
										num68 = 374;
									}
									else if (Main.tile[num64, num67].honey())
									{
										num68 = 375;
									}
									int maxValue3 = num65 - num67;
									if (WorldGen.genRand.Next(maxValue3) <= 1)
									{
										if (*Main.tile[num64, num65].wall == 86)
										{
											num68 = 375;
										}
										*Main.tile[num64, num65].type = (ushort)num68;
										*Main.tile[num64, num65].frameX = 0;
										*Main.tile[num64, num65].frameY = 0;
										Main.tile[num64, num65].active(true);
										break;
									}
								}
							}
							if (!Main.tile[num64, num65].active())
							{
								num66 = WorldGen.genRand.Next(3, 11);
								for (int num69 = num65 + 1; num69 <= num65 + num66; num69++)
								{
									if (*Main.tile[num64, num69].liquid >= 200 && !Main.tile[num64, num69].shimmer())
									{
										int num70 = 373;
										if (Main.tile[num64, num69].lava())
										{
											num70 = 374;
										}
										else if (Main.tile[num64, num69].honey())
										{
											num70 = 375;
										}
										int num71 = num69 - num65;
										if (WorldGen.genRand.Next(num71 * 3) <= 1)
										{
											*Main.tile[num64, num65].type = (ushort)num70;
											*Main.tile[num64, num65].frameX = 0;
											*Main.tile[num64, num65].frameY = 0;
											Main.tile[num64, num65].active(true);
											break;
										}
									}
								}
							}
							if (!Main.tile[num64, num65].active() && WorldGen.genRand.Next(4) == 0)
							{
								Tile tile3 = Main.tile[num64, num65 - 1];
								if (TileID.Sets.Conversion.Sandstone[(int)(*tile3.type)] || TileID.Sets.Conversion.HardenedSand[(int)(*tile3.type)])
								{
									*Main.tile[num64, num65].type = 461;
									*Main.tile[num64, num65].frameX = 0;
									*Main.tile[num64, num65].frameY = 0;
									Main.tile[num64, num65].active(true);
								}
							}
						}
						if (*Main.tile[num64, num65].type == 137)
						{
							int num72 = (int)(*Main.tile[num64, num65].frameY / 18);
							if (num72 <= 2 || num72 == 5)
							{
								int num73 = -1;
								if (*Main.tile[num64, num65].frameX >= 18)
								{
									num73 = 1;
								}
								if (Main.tile[num64 + num73, num65].halfBrick() || Main.tile[num64 + num73, num65].slope() != 0)
								{
									Main.tile[num64 + num73, num65].active(false);
								}
							}
						}
						else if (*Main.tile[num64, num65].type == 162 && *Main.tile[num64, num65 + 1].liquid == 0 && WorldGen.CanKillTile(num64, num65))
						{
							Main.tile[num64, num65].active(false);
						}
						if (*Main.tile[num64, num65].wall == 13 || *Main.tile[num64, num65].wall == 14)
						{
							*Main.tile[num64, num65].liquid = 0;
						}
						if (*Main.tile[num64, num65].type == 31)
						{
							int num74 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num75 = 0;
							int num76 = num64;
							num75 += num74 / 2;
							num75 = (((!WorldGen.drunkWorldGen) ? (WorldGen.crimson > false) : (*Main.tile[num64, num65].wall == 83)) ? 1 : 0);
							num74 %= 2;
							num76 -= num74;
							int num77 = (int)(*Main.tile[num64, num65].frameY / 18);
							int num78 = 0;
							int num79 = num65;
							num78 += num77 / 2;
							num77 %= 2;
							num79 -= num77;
							for (int num80 = 0; num80 < 2; num80++)
							{
								for (int num81 = 0; num81 < 2; num81++)
								{
									int num82 = num76 + num80;
									int num83 = num79 + num81;
									Main.tile[num82, num83].active(true);
									Main.tile[num82, num83].slope(0);
									Main.tile[num82, num83].halfBrick(false);
									*Main.tile[num82, num83].type = 31;
									*Main.tile[num82, num83].frameX = (short)(num80 * 18 + 36 * num75);
									*Main.tile[num82, num83].frameY = (short)(num81 * 18 + 36 * num78);
								}
							}
						}
						if (*Main.tile[num64, num65].type == 12)
						{
							int num84 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num85 = 0;
							int num86 = num64;
							num85 += num84 / 2;
							num84 %= 2;
							num86 -= num84;
							int num87 = (int)(*Main.tile[num64, num65].frameY / 18);
							int num88 = 0;
							int num89 = num65;
							num88 += num87 / 2;
							num87 %= 2;
							num89 -= num87;
							for (int num90 = 0; num90 < 2; num90++)
							{
								for (int num91 = 0; num91 < 2; num91++)
								{
									int num92 = num86 + num90;
									int num93 = num89 + num91;
									Main.tile[num92, num93].active(true);
									Main.tile[num92, num93].slope(0);
									Main.tile[num92, num93].halfBrick(false);
									*Main.tile[num92, num93].type = 12;
									*Main.tile[num92, num93].frameX = (short)(num90 * 18 + 36 * num85);
									*Main.tile[num92, num93].frameY = (short)(num91 * 18 + 36 * num88);
								}
								if (!Main.tile[num90, num65 + 2].active())
								{
									Main.tile[num90, num65 + 2].active(true);
									if (!Main.tileSolid[(int)(*Main.tile[num90, num65 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num90, num65 + 2].type)])
									{
										*Main.tile[num90, num65 + 2].type = 0;
									}
								}
								Main.tile[num90, num65 + 2].slope(0);
								Main.tile[num90, num65 + 2].halfBrick(false);
							}
						}
						if (*Main.tile[num64, num65].type == 639)
						{
							int num94 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num95 = 0;
							int num96 = num64;
							num95 += num94 / 2;
							num94 %= 2;
							num96 -= num94;
							int num97 = (int)(*Main.tile[num64, num65].frameY / 18);
							int num98 = 0;
							int num99 = num65;
							num98 += num97 / 2;
							num97 %= 2;
							num99 -= num97;
							for (int num100 = 0; num100 < 2; num100++)
							{
								for (int num101 = 0; num101 < 2; num101++)
								{
									int num102 = num96 + num100;
									int num103 = num99 + num101;
									Main.tile[num102, num103].active(true);
									Main.tile[num102, num103].slope(0);
									Main.tile[num102, num103].halfBrick(false);
									*Main.tile[num102, num103].type = 639;
									*Main.tile[num102, num103].frameX = (short)(num100 * 18 + 36 * num95);
									*Main.tile[num102, num103].frameY = (short)(num101 * 18 + 36 * num98);
								}
								if (!Main.tile[num100, num65 + 2].active())
								{
									Main.tile[num100, num65 + 2].active(true);
									if (!Main.tileSolid[(int)(*Main.tile[num100, num65 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num100, num65 + 2].type)])
									{
										*Main.tile[num100, num65 + 2].type = 0;
									}
								}
								Main.tile[num100, num65 + 2].slope(0);
								Main.tile[num100, num65 + 2].halfBrick(false);
							}
						}
						if (TileID.Sets.BasicChest[(int)(*Main.tile[num64, num65].type)])
						{
							int num104 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num105 = 0;
							ushort type2 = 21;
							int num106 = num64;
							int num107 = num65 - (int)(*Main.tile[num64, num65].frameY / 18);
							if (*Main.tile[num64, num65].type == 467)
							{
								type2 = 467;
							}
							if (TileID.Sets.BasicChest[(int)(*Main.tile[num64, num65].type)])
							{
								type2 = *Main.tile[num64, num65].type;
							}
							while (num104 >= 2)
							{
								num105++;
								num104 -= 2;
							}
							num106 -= num104;
							int num108 = Chest.FindChest(num106, num107);
							if (num108 != -1)
							{
								int type3 = Main.chest[num108].item[0].type;
								if (type3 != 1156)
								{
									if (type3 != 1260)
									{
										switch (type3)
										{
										case 1569:
											num105 = 25;
											break;
										case 1571:
											num105 = 24;
											break;
										case 1572:
											num105 = 27;
											break;
										}
									}
									else
									{
										num105 = 26;
									}
								}
								else
								{
									num105 = 23;
								}
							}
							for (int num109 = 0; num109 < 2; num109++)
							{
								for (int num110 = 0; num110 < 2; num110++)
								{
									int num111 = num106 + num109;
									int num112 = num107 + num110;
									Main.tile[num111, num112].active(true);
									Main.tile[num111, num112].slope(0);
									Main.tile[num111, num112].halfBrick(false);
									*Main.tile[num111, num112].type = type2;
									*Main.tile[num111, num112].frameX = (short)(num109 * 18 + 36 * num105);
									*Main.tile[num111, num112].frameY = (short)(num110 * 18);
								}
								if (!Main.tile[num109, num65 + 2].active())
								{
									Main.tile[num109, num65 + 2].active(true);
									if (!Main.tileSolid[(int)(*Main.tile[num109, num65 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num109, num65 + 2].type)])
									{
										*Main.tile[num109, num65 + 2].type = 0;
									}
								}
								Main.tile[num109, num65 + 2].slope(0);
								Main.tile[num109, num65 + 2].halfBrick(false);
							}
						}
						if (*Main.tile[num64, num65].type == 28)
						{
							int num113 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num114 = 0;
							int num115 = num64;
							while (num113 >= 2)
							{
								num114++;
								num113 -= 2;
							}
							num115 -= num113;
							int num116 = (int)(*Main.tile[num64, num65].frameY / 18);
							int num117 = 0;
							int num118 = num65;
							while (num116 >= 2)
							{
								num117++;
								num116 -= 2;
							}
							num118 -= num116;
							for (int num119 = 0; num119 < 2; num119++)
							{
								for (int num120 = 0; num120 < 2; num120++)
								{
									int num121 = num115 + num119;
									int num122 = num118 + num120;
									Main.tile[num121, num122].active(true);
									Main.tile[num121, num122].slope(0);
									Main.tile[num121, num122].halfBrick(false);
									*Main.tile[num121, num122].type = 28;
									*Main.tile[num121, num122].frameX = (short)(num119 * 18 + 36 * num114);
									*Main.tile[num121, num122].frameY = (short)(num120 * 18 + 36 * num117);
								}
								if (!Main.tile[num119, num65 + 2].active())
								{
									Main.tile[num119, num65 + 2].active(true);
									if (!Main.tileSolid[(int)(*Main.tile[num119, num65 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num119, num65 + 2].type)])
									{
										*Main.tile[num119, num65 + 2].type = 0;
									}
								}
								Main.tile[num119, num65 + 2].slope(0);
								Main.tile[num119, num65 + 2].halfBrick(false);
							}
						}
						if (*Main.tile[num64, num65].type == 26)
						{
							int num123 = (int)(*Main.tile[num64, num65].frameX / 18);
							int num124 = 0;
							int num125 = num64;
							int num126 = num65 - (int)(*Main.tile[num64, num65].frameY / 18);
							while (num123 >= 3)
							{
								num124++;
								num123 -= 3;
							}
							num125 -= num123;
							num124 = ((WorldGen.drunkWorldGen ? (*Main.tile[num64, num65].wall == 83) : (WorldGen.crimson > false)) ? 1 : 0);
							for (int num127 = 0; num127 < 3; num127++)
							{
								for (int num128 = 0; num128 < 2; num128++)
								{
									int num129 = num125 + num127;
									int num130 = num126 + num128;
									Main.tile[num129, num130].active(true);
									Main.tile[num129, num130].slope(0);
									Main.tile[num129, num130].halfBrick(false);
									*Main.tile[num129, num130].type = 26;
									*Main.tile[num129, num130].frameX = (short)(num127 * 18 + 54 * num124);
									*Main.tile[num129, num130].frameY = (short)(num128 * 18);
								}
								if (!Main.tile[num125 + num127, num126 + 2].active() || !Main.tileSolid[(int)(*Main.tile[num125 + num127, num126 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num125 + num127, num126 + 2].type)])
								{
									Main.tile[num125 + num127, num126 + 2].active(true);
									if (!TileID.Sets.Platforms[(int)(*Main.tile[num125 + num127, num126 + 2].type)])
									{
										if (*Main.tile[num125 + num127, num126 + 2].type == 484)
										{
											*Main.tile[num125 + num127, num126 + 2].type = 397;
										}
										else if (TileID.Sets.Boulders[(int)(*Main.tile[num125 + num127, num126 + 2].type)] || !Main.tileSolid[(int)(*Main.tile[num125 + num127, num126 + 2].type)] || Main.tileSolidTop[(int)(*Main.tile[num125 + num127, num126 + 2].type)])
										{
											*Main.tile[num125 + num127, num126 + 2].type = 0;
										}
									}
								}
								Main.tile[num125 + num127, num126 + 2].slope(0);
								Main.tile[num125 + num127, num126 + 2].halfBrick(false);
								if (*Main.tile[num125 + num127, num126 + 3].type == 28 && *Main.tile[num125 + num127, num126 + 3].frameY % 36 >= 18)
								{
									*Main.tile[num125 + num127, num126 + 3].type = 0;
									Main.tile[num125 + num127, num126 + 3].active(false);
								}
							}
							for (int num131 = 0; num131 < 3; num131++)
							{
								if ((*Main.tile[num125 - 1, num126 + num131].type == 28 || *Main.tile[num125 - 1, num126 + num131].type == 12 || *Main.tile[num125 - 1, num126 + num131].type == 639) && *Main.tile[num125 - 1, num126 + num131].frameX % 36 < 18)
								{
									*Main.tile[num125 - 1, num126 + num131].type = 0;
									Main.tile[num125 - 1, num126 + num131].active(false);
								}
								if ((*Main.tile[num125 + 3, num126 + num131].type == 28 || *Main.tile[num125 + 3, num126 + num131].type == 12 || *Main.tile[num125 - 1, num126 + num131].type == 639) && *Main.tile[num125 + 3, num126 + num131].frameX % 36 >= 18)
								{
									*Main.tile[num125 + 3, num126 + num131].type = 0;
									Main.tile[num125 + 3, num126 + num131].active(false);
								}
							}
						}
						if (*Main.tile[num64, num65].type == 237 && *Main.tile[num64, num65 + 1].type == 232)
						{
							*Main.tile[num64, num65 + 1].type = 226;
						}
						if (*Main.tile[num64, num65].wall == 87)
						{
							*Main.tile[num64, num65].liquid = 0;
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Lihzahrd Altars", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num58 = 0; num58 < 3; num58++)
				{
					for (int num59 = 0; num59 < 2; num59++)
					{
						int num60 = GenVars.lAltarX + num58;
						int num61 = GenVars.lAltarY + num59;
						Main.tile[num60, num61].active(true);
						*Main.tile[num60, num61].type = 237;
						*Main.tile[num60, num61].frameX = (short)(num58 * 18);
						*Main.tile[num60, num61].frameY = (short)(num59 * 18);
					}
					Main.tile[GenVars.lAltarX + num58, GenVars.lAltarY + 2].active(true);
					Main.tile[GenVars.lAltarX + num58, GenVars.lAltarY + 2].slope(0);
					Main.tile[GenVars.lAltarX + num58, GenVars.lAltarY + 2].halfBrick(false);
					*Main.tile[GenVars.lAltarX + num58, GenVars.lAltarY + 2].type = 226;
				}
				for (int num62 = 0; num62 < 3; num62++)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int i = GenVars.lAltarX + num62;
						int j2 = GenVars.lAltarY + num63;
						WorldGen.SquareTileFrame(i, j2, true);
					}
				}
			});
			WorldGen.AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[76].Value + "..Dead Man's Chests";
				double num58 = (double)(Main.maxTilesX * Main.maxTilesY) / 5040000.0;
				double num36 = 10.0;
				if (WorldGen.getGoodWorldGen || WorldGen.noTrapsWorldGen)
				{
					num36 *= 3.0;
				}
				DeadMansChestBiome deadMansChestBiome = GenVars.configuration.CreateBiome<DeadMansChestBiome>();
				List<int> possibleChestsToTrapify = deadMansChestBiome.GetPossibleChestsToTrapify(GenVars.structures);
				int random = passConfig.Get<WorldGenRange>("DeadManChests").GetRandom(WorldGen.genRand);
				int num37 = 0;
				int num38 = 3000;
				while (num37 < random && possibleChestsToTrapify.Count > 0)
				{
					num38--;
					if (num38 <= 0)
					{
						break;
					}
					int num39 = possibleChestsToTrapify[WorldGen.genRand.Next(possibleChestsToTrapify.Count)];
					Point origin;
					origin..ctor(Main.chest[num39].x, Main.chest[num39].y);
					deadMansChestBiome.Place(origin, GenVars.structures);
					num37++;
					possibleChestsToTrapify.Remove(num39);
				}
				progress.Message = Lang.gen[76].Value + "..Thin Ice";
				progress.Set(1.0 / num36);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					ThinIceBiome thinIceBiome = GenVars.configuration.CreateBiome<ThinIceBiome>();
					int random2 = passConfig.Get<WorldGenRange>("ThinIcePatchCount").GetRandom(WorldGen.genRand);
					int num40 = 0;
					int num41 = 1000;
					int num42 = 0;
					while (num42 < random2)
					{
						if (thinIceBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), GenVars.structures))
						{
							num42++;
							num40 = 0;
						}
						else
						{
							num40++;
							if (num40 > num41)
							{
								num42++;
								num40 = 0;
							}
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Sword Shrines";
				progress.Set(0.1);
				progress.Set(2.0 / num36);
				EnchantedSwordBiome enchantedSwordBiome = GenVars.configuration.CreateBiome<EnchantedSwordBiome>();
				int num43 = passConfig.Get<WorldGenRange>("SwordShrineAttempts").GetRandom(WorldGen.genRand);
				double num44 = passConfig.Get<double>("SwordShrinePlacementChance");
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num43 *= 2;
					num44 /= 2.0;
				}
				Point origin2 = default(Point);
				for (int num45 = 0; num45 < num43; num45++)
				{
					if ((num45 == 0 && WorldGen.tenthAnniversaryWorldGen) || WorldGen.genRand.NextDouble() <= num44)
					{
						int num46 = 0;
						while (num46++ <= Main.maxTilesX)
						{
							origin2.Y = (int)GenVars.worldSurface + WorldGen.genRand.Next(50, 100);
							if (WorldGen.genRand.Next(2) == 0)
							{
								origin2.X = WorldGen.genRand.Next(50, (int)((double)Main.maxTilesX * 0.3));
							}
							else
							{
								origin2.X = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.7), Main.maxTilesX - 50);
							}
							if (enchantedSwordBiome.Place(origin2, GenVars.structures))
							{
								break;
							}
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Campsites";
				progress.Set(0.2);
				progress.Set(3.0 / num36);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					CampsiteBiome campsiteBiome = GenVars.configuration.CreateBiome<CampsiteBiome>();
					int random3 = passConfig.Get<WorldGenRange>("CampsiteCount").GetRandom(WorldGen.genRand);
					num38 = 1000;
					int num47 = 0;
					while (num47 < random3)
					{
						num38--;
						if (num38 <= 0)
						{
							break;
						}
						if (campsiteBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, WorldGen.beachDistance, 200, WorldGen.beachDistance), GenVars.structures))
						{
							num47++;
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Explosive Traps";
				progress.Set(4.0 / num36);
				if (!WorldGen.notTheBees || WorldGen.remixWorldGen)
				{
					MiningExplosivesBiome miningExplosivesBiome = GenVars.configuration.CreateBiome<MiningExplosivesBiome>();
					int num48 = passConfig.Get<WorldGenRange>("ExplosiveTrapCount").GetRandom(WorldGen.genRand);
					if ((WorldGen.getGoodWorldGen || WorldGen.noTrapsWorldGen) && !WorldGen.notTheBees)
					{
						num48 = (int)((double)num48 * 1.5);
					}
					num38 = 3000;
					int num49 = 0;
					while (num49 < num48)
					{
						num38--;
						if (num38 <= 0)
						{
							break;
						}
						if (WorldGen.remixWorldGen)
						{
							if (miningExplosivesBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, WorldGen.beachDistance, (int)GenVars.rockLayer, WorldGen.beachDistance), GenVars.structures))
							{
								num49++;
							}
						}
						else if (miningExplosivesBiome.Place(WorldGen.RandomWorldPoint((int)GenVars.rockLayer, WorldGen.beachDistance, 200, WorldGen.beachDistance), GenVars.structures))
						{
							num49++;
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Living Trees";
				progress.Set(0.3);
				progress.Set(5.0 / num36);
				MahoganyTreeBiome mahoganyTreeBiome = GenVars.configuration.CreateBiome<MahoganyTreeBiome>();
				int random4 = passConfig.Get<WorldGenRange>("LivingTreeCount").GetRandom(WorldGen.genRand);
				int num50 = 0;
				int num51 = 0;
				while (num50 < random4 && num51 < 20000)
				{
					if (mahoganyTreeBiome.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 50, 50, 500, 50), GenVars.structures))
					{
						num50++;
					}
					num51++;
				}
				progress.Message = Lang.gen[76].Value + "..Long Minecart Tracks";
				progress.Set(0.4);
				progress.Set(6.0 / num36);
				progress.Set(7.0 / num36);
				TrackGenerator trackGenerator = new TrackGenerator();
				int random5 = passConfig.Get<WorldGenRange>("LongTrackCount").GetRandom(WorldGen.genRand);
				WorldGenRange worldGenRange = passConfig.Get<WorldGenRange>("LongTrackLength");
				int maxTilesX = Main.maxTilesX;
				int num52 = 0;
				int num53 = 0;
				while (num53 < random5)
				{
					if (trackGenerator.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 10, 200, 10), worldGenRange.ScaledMinimum, worldGenRange.ScaledMaximum))
					{
						num53++;
						num52 = 0;
					}
					else
					{
						num52++;
						if (num52 > maxTilesX)
						{
							num53++;
							num52 = 0;
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Standard Minecart Tracks";
				progress.Set(8.0 / num36);
				random5 = passConfig.Get<WorldGenRange>("StandardTrackCount").GetRandom(WorldGen.genRand);
				worldGenRange = passConfig.Get<WorldGenRange>("StandardTrackLength");
				num52 = 0;
				int num54 = 0;
				while (num54 < random5)
				{
					if (trackGenerator.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 10, 200, 10), worldGenRange.ScaledMinimum, worldGenRange.ScaledMaximum))
					{
						num54++;
						num52 = 0;
					}
					else
					{
						num52++;
						if (num52 > maxTilesX)
						{
							num54++;
							num52 = 0;
						}
					}
				}
				progress.Message = Lang.gen[76].Value + "..Lava Traps";
				progress.Set(9.0 / num36);
				if (!WorldGen.notTheBees)
				{
					double num55 = (double)Main.maxTilesX * 0.02;
					if (WorldGen.noTrapsWorldGen)
					{
						num36 *= 5.0;
					}
					else if (WorldGen.getGoodWorldGen)
					{
						num36 *= 2.0;
					}
					int num56 = 0;
					while ((double)num56 < num55)
					{
						for (int num57 = 0; num57 < 10150; num57++)
						{
							int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
							int y2 = WorldGen.genRand.Next(GenVars.lavaLine - 100, Main.maxTilesY - 210);
							if (WorldGen.placeLavaTrap(x, y2))
							{
								break;
							}
						}
						num56++;
					}
				}
				progress.Set(1.0);
			});
			WorldGen.AddGenerationPass("Water Plants", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Message = Lang.gen[88].Value;
				int num28 = (int)Main.worldSurface;
				if (WorldGen.remixWorldGen)
				{
					num28 = Main.maxTilesY - 200;
				}
				for (int num29 = 20; num29 < Main.maxTilesX - 20; num29++)
				{
					progress.Set((double)num29 / (double)Main.maxTilesX);
					for (int num30 = 1; num30 < num28; num30++)
					{
						if (WorldGen.genRand.Next(5) == 0 && *Main.tile[num29, num30].liquid > 0)
						{
							if (!Main.tile[num29, num30].active())
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceLilyPad(num29, num30);
								}
								else
								{
									Point point = WorldGen.PlaceCatTail(num29, num30);
									if (WorldGen.InWorld(point.X, point.Y, 0))
									{
										int num31 = WorldGen.genRand.Next(14);
										for (int num32 = 0; num32 < num31; num32++)
										{
											WorldGen.GrowCatTail(point.X, point.Y);
										}
										WorldGen.SquareTileFrame(point.X, point.Y, true);
									}
								}
							}
							if ((!Main.tile[num29, num30].active() || *Main.tile[num29, num30].type == 61 || *Main.tile[num29, num30].type == 74) && WorldGen.PlaceBamboo(num29, num30))
							{
								int num33 = WorldGen.genRand.Next(10, 20);
								int num34 = 0;
								while (num34 < num33 && WorldGen.PlaceBamboo(num29, num30 - num34))
								{
									num34++;
								}
							}
						}
					}
					int num35 = Main.UnderworldLayer;
					while ((double)num35 > Main.worldSurface)
					{
						if (*Main.tile[num29, num35].type == 53 && WorldGen.genRand.Next(3) != 0)
						{
							WorldGen.GrowCheckSeaweed(num29, num35);
						}
						else if (*Main.tile[num29, num35].type == 549)
						{
							WorldGen.GrowCheckSeaweed(num29, num35);
						}
						num35--;
					}
				}
			});
			WorldGen.AddGenerationPass("Stalac", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				progress.Set(1.0);
				for (int num24 = 20; num24 < Main.maxTilesX - 20; num24++)
				{
					for (int num25 = (int)Main.worldSurface; num25 < Main.maxTilesY - 20; num25++)
					{
						if ((Main.tenthAnniversaryWorld || WorldGen.drunkWorldGen || WorldGen.genRand.Next(5) == 0) && *Main.tile[num24, num25 - 1].liquid == 0)
						{
							int num26 = WorldGen.genRand.Next(7);
							int treeTileType = 0;
							switch (num26)
							{
							case 0:
								treeTileType = 583;
								break;
							case 1:
								treeTileType = 584;
								break;
							case 2:
								treeTileType = 585;
								break;
							case 3:
								treeTileType = 586;
								break;
							case 4:
								treeTileType = 587;
								break;
							case 5:
								treeTileType = 588;
								break;
							case 6:
								treeTileType = 589;
								break;
							}
							WorldGen.TryGrowingTreeByType(treeTileType, num24, num25);
						}
						if (!WorldGen.oceanDepths(num24, num25) && !Main.tile[num24, num25].active() && WorldGen.genRand.Next(5) == 0)
						{
							if ((*Main.tile[num24, num25 - 1].type == 1 || *Main.tile[num24, num25 - 1].type == 147 || *Main.tile[num24, num25 - 1].type == 161 || *Main.tile[num24, num25 - 1].type == 25 || *Main.tile[num24, num25 - 1].type == 203 || Main.tileStone[(int)(*Main.tile[num24, num25 - 1].type)] || Main.tileMoss[(int)(*Main.tile[num24, num25 - 1].type)]) && !Main.tile[num24, num25].active() && !Main.tile[num24, num25 + 1].active())
							{
								Main.tile[num24, num25 - 1].slope(0);
							}
							if ((*Main.tile[num24, num25 + 1].type == 1 || *Main.tile[num24, num25 + 1].type == 147 || *Main.tile[num24, num25 + 1].type == 161 || *Main.tile[num24, num25 + 1].type == 25 || *Main.tile[num24, num25 + 1].type == 203 || Main.tileStone[(int)(*Main.tile[num24, num25 + 1].type)] || Main.tileMoss[(int)(*Main.tile[num24, num25 + 1].type)]) && !Main.tile[num24, num25].active() && !Main.tile[num24, num25 - 1].active())
							{
								Main.tile[num24, num25 + 1].slope(0);
							}
							WorldGen.PlaceTight(num24, num25, false);
						}
					}
					for (int num27 = 5; num27 < (int)Main.worldSurface; num27++)
					{
						if ((*Main.tile[num24, num27 - 1].type == 147 || *Main.tile[num24, num27 - 1].type == 161) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[num24, num27].active() && !Main.tile[num24, num27 + 1].active())
							{
								Main.tile[num24, num27 - 1].slope(0);
							}
							WorldGen.PlaceTight(num24, num27, false);
						}
						if ((*Main.tile[num24, num27 - 1].type == 25 || *Main.tile[num24, num27 - 1].type == 203) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[num24, num27].active() && !Main.tile[num24, num27 + 1].active())
							{
								Main.tile[num24, num27 - 1].slope(0);
							}
							WorldGen.PlaceTight(num24, num27, false);
						}
						if ((*Main.tile[num24, num27 + 1].type == 25 || *Main.tile[num24, num27 + 1].type == 203) && WorldGen.genRand.Next(5) == 0)
						{
							if (!Main.tile[num24, num27].active() && !Main.tile[num24, num27 - 1].active())
							{
								Main.tile[num24, num27 + 1].slope(0);
							}
							WorldGen.PlaceTight(num24, num27, false);
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Remove Broken Traps", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				if (!WorldGen.noTrapsWorldGen || WorldGen.tenthAnniversaryWorldGen || WorldGen.notTheBees)
				{
					progress.Message = Lang.gen[82].Value;
					List<Point> list = new List<Point>();
					int num21 = 50;
					for (int num22 = num21; num22 < Main.maxTilesX - num21; num22++)
					{
						double value = (double)(num22 - num21) / (double)(Main.maxTilesX - num21 * 2);
						progress.Set(value);
						for (int num23 = 50; num23 < Main.maxTilesY - 50; num23++)
						{
							if (Main.tile[num22, num23].wire() && !list.Contains(new Point(num22, num23)))
							{
								WorldGen.ClearBrokenTraps(new Point(num22, num23), list);
							}
						}
					}
				}
			});
			WorldGen.AddGenerationPass("Final Cleanup", delegate(GenerationProgress progress, GameConfiguration passConfig)
			{
				Main.tileSolid[484] = false;
				WorldGen.FillWallHolesInArea(new Rectangle(0, 0, Main.maxTilesX, (int)Main.worldSurface));
				progress.Message = Lang.gen[86].Value;
				for (int i = 0; i < Main.maxTilesX; i++)
				{
					progress.Set((double)i / (double)Main.maxTilesX);
					for (int j = 0; j < Main.maxTilesY; j++)
					{
						if (Main.tile[i, j].active() && !WorldGen.SolidTile(i, j + 1, false) && (*Main.tile[i, j].type == 53 || *Main.tile[i, j].type == 112 || *Main.tile[i, j].type == 234 || *Main.tile[i, j].type == 224 || *Main.tile[i, j].type == 123))
						{
							if ((double)j < Main.worldSurface + 10.0 && !Main.tile[i, j + 1].active() && *Main.tile[i, j + 1].wall != 191 && !WorldGen.oceanDepths(i, j))
							{
								int num = 10;
								int num2 = j + 1;
								int k = num2;
								while (k < num2 + 10)
								{
									if (Main.tile[i, k].active() && *Main.tile[i, k].type == 314)
									{
										num = 0;
										IL_29B:
										while (!Main.tile[i, num2].active() && num > 0 && num2 < Main.maxTilesY - 50)
										{
											Main.tile[i, num2 - 1].slope(0);
											Main.tile[i, num2 - 1].halfBrick(false);
											Main.tile[i, num2].active(true);
											*Main.tile[i, num2].type = *Main.tile[i, j].type;
											Main.tile[i, num2].slope(0);
											Main.tile[i, num2].halfBrick(false);
											num2++;
											num--;
										}
										if (num == 0 && !Main.tile[i, num2].active())
										{
											ushort num21 = *Main.tile[i, j].type;
											if (num21 <= 112)
											{
												if (num21 == 53)
												{
													*Main.tile[i, num2].type = 397;
													Main.tile[i, num2].active(true);
													goto IL_690;
												}
												if (num21 != 112)
												{
													goto IL_690;
												}
												*Main.tile[i, num2].type = 398;
												Main.tile[i, num2].active(true);
												goto IL_690;
											}
											else
											{
												if (num21 == 123)
												{
													*Main.tile[i, num2].type = 1;
													Main.tile[i, num2].active(true);
													goto IL_690;
												}
												if (num21 == 224)
												{
													*Main.tile[i, num2].type = 147;
													Main.tile[i, num2].active(true);
													goto IL_690;
												}
												if (num21 != 234)
												{
													goto IL_690;
												}
												*Main.tile[i, num2].type = 399;
												Main.tile[i, num2].active(true);
												goto IL_690;
											}
										}
										else
										{
											if (Main.tile[i, num2].active() && Main.tileSolid[(int)(*Main.tile[i, num2].type)] && !Main.tileSolidTop[(int)(*Main.tile[i, num2].type)])
											{
												Main.tile[i, num2].slope(0);
												Main.tile[i, num2].halfBrick(false);
												goto IL_690;
											}
											goto IL_690;
										}
									}
									else
									{
										k++;
									}
								}
								goto IL_29B;
							}
							if (Main.tileSolid[(int)(*Main.tile[i, j + 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[i, j + 1].type)] && (Main.tile[i, j + 1].topSlope() || Main.tile[i, j + 1].halfBrick()))
							{
								Main.tile[i, j + 1].slope(0);
								Main.tile[i, j + 1].halfBrick(false);
							}
							else
							{
								ushort num21 = *Main.tile[i, j].type;
								if (num21 <= 112)
								{
									if (num21 != 53)
									{
										if (num21 == 112)
										{
											*Main.tile[i, j].type = 398;
										}
									}
									else
									{
										*Main.tile[i, j].type = 397;
									}
								}
								else if (num21 != 123)
								{
									if (num21 != 224)
									{
										if (num21 == 234)
										{
											*Main.tile[i, j].type = 399;
										}
									}
									else
									{
										*Main.tile[i, j].type = 147;
									}
								}
								else
								{
									*Main.tile[i, j].type = 1;
								}
							}
							IL_690:
							if (*Main.tile[i, j - 1].type == 323)
							{
								WorldGen.TileFrame(i, j - 1, false, false);
							}
						}
						if ((*Main.tile[i, j].wall == 187 || *Main.tile[i, j].wall == 216) && *Main.tile[i, j].liquid > 0 && !WorldGen.remixWorldGen)
						{
							*Main.tile[i, j].liquid = byte.MaxValue;
							Main.tile[i, j].lava(true);
						}
						if (*Main.tile[i, j].type == 485 || *Main.tile[i, j].type == 187 || *Main.tile[i, j].type == 165)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (*Main.tile[i, j].type == 28)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (*Main.tile[i, j].type == 10 || *Main.tile[i, j].type == 11)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (*Main.tile[i, j].type == 26)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (TileID.Sets.IsATreeTrunk[(int)(*Main.tile[i, j].type)] || *Main.tile[i, j].type == 323)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
						if (*Main.tile[i, j].type == 137)
						{
							Main.tile[i, j].slope(0);
							Main.tile[i, j].halfBrick(false);
						}
						if (Main.tile[i, j].active() && TileID.Sets.Boulders[(int)(*Main.tile[i, j].type)])
						{
							int num3 = (int)(*Main.tile[i, j].frameX / 18);
							int num4 = i;
							num4 -= num3;
							int num5 = (int)(*Main.tile[i, j].frameY / 18);
							int num6 = j;
							num6 -= num5;
							bool flag = false;
							for (int l = 0; l < 2; l++)
							{
								Tile tile = Main.tile[num4 + l, num6 - 1];
								if (tile != null && tile.active() && *tile.type == 26)
								{
									flag = true;
									break;
								}
								for (int m = 0; m < 2; m++)
								{
									int num7 = num4 + l;
									int num8 = num6 + m;
									Main.tile[num7, num8].active(true);
									Main.tile[num7, num8].slope(0);
									Main.tile[num7, num8].halfBrick(false);
									*Main.tile[num7, num8].type = *Main.tile[i, j].type;
									*Main.tile[num7, num8].frameX = (short)(l * 18);
									*Main.tile[num7, num8].frameY = (short)(m * 18);
								}
							}
							if (flag)
							{
								ushort type = 0;
								if (*Main.tile[i, j].type == 484)
								{
									type = 397;
								}
								for (int n = 0; n < 2; n++)
								{
									for (int num9 = 0; num9 < 2; num9++)
									{
										int num10 = num4 + n;
										int num11 = num6 + num9;
										Main.tile[num10, num11].active(true);
										Main.tile[num10, num11].slope(0);
										Main.tile[num10, num11].halfBrick(false);
										*Main.tile[num10, num11].type = type;
										*Main.tile[num10, num11].frameX = 0;
										*Main.tile[num10, num11].frameY = 0;
									}
								}
							}
						}
						if (*Main.tile[i, j].type == 323 && *Main.tile[i, j].liquid > 0)
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (Main.wallDungeon[(int)(*Main.tile[i, j].wall)])
						{
							Main.tile[i, j].lava(false);
							if (Main.tile[i, j].active() && *Main.tile[i, j].type == 56)
							{
								WorldGen.KillTile(i, j, false, false, false);
								Main.tile[i, j].lava(false);
								*Main.tile[i, j].liquid = byte.MaxValue;
							}
						}
						if (Main.tile[i, j].active() && *Main.tile[i, j].type == 314)
						{
							int num12 = 15;
							int num13 = 1;
							int num14 = j;
							while (j - num14 < num12)
							{
								*Main.tile[i, num14].liquid = 0;
								num14--;
							}
							num14 = j;
							while (num14 - j < num13)
							{
								*Main.tile[i, num14].liquid = 0;
								num14++;
							}
						}
						if (Main.tile[i, j].active() && *Main.tile[i, j].type == 332 && !Main.tile[i, j + 1].active())
						{
							Main.tile[i, j + 1].ClearEverything();
							Main.tile[i, j + 1].active(true);
							*Main.tile[i, j + 1].type = 332;
						}
						if (i > WorldGen.beachDistance && i < Main.maxTilesX - WorldGen.beachDistance && (double)j < Main.worldSurface && *Main.tile[i, j].liquid > 0 && *Main.tile[i, j].liquid < 255 && *Main.tile[i - 1, j].liquid < 255 && *Main.tile[i + 1, j].liquid < 255 && *Main.tile[i, j + 1].liquid < 255 && !TileID.Sets.Clouds[(int)(*Main.tile[i - 1, j].type)] && !TileID.Sets.Clouds[(int)(*Main.tile[i + 1, j].type)] && !TileID.Sets.Clouds[(int)(*Main.tile[i, j + 1].type)])
						{
							*Main.tile[i, j].liquid = 0;
						}
					}
				}
				int num15 = 0;
				int worldSize = WorldGen.GetWorldSize();
				int num16;
				if (worldSize != 1)
				{
					if (worldSize != 2)
					{
						num16 = 3;
					}
					else
					{
						num16 = 9;
					}
				}
				else
				{
					num16 = 6;
				}
				if (WorldGen.tenthAnniversaryWorldGen)
				{
					num16 *= 5;
				}
				int num17 = 50;
				int minValue = num17;
				int minValue2 = num17;
				int maxValue = Main.maxTilesX - num17;
				int maxValue2 = Main.maxTilesY - 200;
				int num18 = 3000;
				while (num15 < num16)
				{
					num18--;
					if (num18 <= 0)
					{
						break;
					}
					int num19 = WorldGen.genRand.Next(minValue, maxValue);
					int num20 = WorldGen.genRand.Next(minValue2, maxValue2);
					Tile tile2 = Main.tile[num19, num20];
					if (tile2.active() && *tile2.type >= 0)
					{
						bool flag2 = TileID.Sets.Dirt[(int)(*tile2.type)];
						if (WorldGen.notTheBees)
						{
							flag2 = (flag2 || TileID.Sets.Mud[(int)(*tile2.type)]);
						}
						if (flag2)
						{
							num15++;
							tile2.ClearTile();
							tile2.active(true);
							*tile2.type = 668;
						}
					}
				}
				if (WorldGen.noTrapsWorldGen)
				{
					WorldGen.FinishNoTraps();
				}
				if (Main.tenthAnniversaryWorld)
				{
					WorldGen.FinishTenthAnniversaryWorld();
				}
				if (WorldGen.drunkWorldGen)
				{
					WorldGen.FinishDrunkGen();
				}
				if (WorldGen.notTheBees)
				{
					WorldGen.NotTheBees();
					WorldGen.FinishNotTheBees();
				}
				if (WorldGen.getGoodWorldGen)
				{
					WorldGen.FinishGetGoodWorld();
				}
				if (WorldGen.remixWorldGen)
				{
					WorldGen.FinishRemixWorld();
				}
				WorldGen.ShimmerCleanUp();
				WorldGen.notTheBees = false;
				WorldGen.getGoodWorldGen = false;
				WorldGen.noTileActions = false;
				Main.tileSolid[659] = true;
				Main.tileSolid[(int)GenVars.crackedType] = true;
				Main.tileSolid[484] = true;
				WorldGen.gen = false;
				Main.AnglerQuestSwap();
				WorldGen.skipFramingDuringGen = false;
				progress.Message = Lang.gen[87].Value;
			});
		}

		// Token: 0x06001195 RID: 4501 RVA: 0x00419E08 File Offset: 0x00418008
		private static void AddGenPassesFromLoadTime()
		{
			foreach (KeyValuePair<string, GenPass> pass in WorldGen._vanillaGenPasses)
			{
				pass.Value.Reset();
				WorldGen._generator.Append(pass.Value);
			}
		}

		// Token: 0x06001196 RID: 4502 RVA: 0x00419E70 File Offset: 0x00418070
		private static void GenerateWorld_RunTasksAndFinish(int seed, Stopwatch generationStopwatch, GenerationProgress customProgressObject)
		{
			SystemLoader.ModifyWorldGenTasks(WorldGen._generator._passes, ref WorldGen._generator._totalLoadWeight);
			WorldGen._generator.GenerateWorld(customProgressObject);
			WorldGen.ConsumePostGenActions(GenVars.structures);
			SystemLoader.PostWorldGen();
			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
			Main.ActiveWorldFileData.modVersionsDuringWorldGen = ModLoader.Mods.ToDictionary((Mod x) => x.Name, (Mod x) => x.Version);
			Main.NotifyOfEvent(GameNotificationType.WorldGen);
			WorldGen.drunkWorldGenText = false;
			BackupIO.archiveLock = true;
			generationStopwatch.Stop();
			ILog tML = Logging.tML;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(47, 5);
			defaultInterpolatedStringHandler.AppendLiteral("Generation of ");
			defaultInterpolatedStringHandler.AppendFormatted<int>(Main.maxTilesX);
			defaultInterpolatedStringHandler.AppendLiteral("x");
			defaultInterpolatedStringHandler.AppendFormatted<int>(Main.maxTilesY);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(WorldGen.crimson ? "Crimson" : "Corruption");
			defaultInterpolatedStringHandler.AppendLiteral(" world with seed ");
			defaultInterpolatedStringHandler.AppendFormatted<int>(seed);
			defaultInterpolatedStringHandler.AppendLiteral(" completed in ");
			defaultInterpolatedStringHandler.AppendFormatted<TimeSpan>(generationStopwatch.Elapsed, "m'm 's's 'fff'ms'");
			tML.Info(defaultInterpolatedStringHandler.ToStringAndClear());
		}

		// Token: 0x06001197 RID: 4503 RVA: 0x00419FC8 File Offset: 0x004181C8
		private static Point GetAdjustedFloorPosition(int x, int y)
		{
			int num = x - 1;
			int num2 = y - 2;
			bool isEmpty = false;
			bool hasFloor = false;
			while (!isEmpty)
			{
				if (num2 <= Main.spawnTileY - 10)
				{
					break;
				}
				WorldGen.Scan3By3(num, num2, out isEmpty, out hasFloor);
				if (!isEmpty)
				{
					num2--;
				}
			}
			while (!hasFloor && num2 < Main.spawnTileY + 10)
			{
				WorldGen.Scan3By3(num, num2, out isEmpty, out hasFloor);
				if (!hasFloor)
				{
					num2++;
				}
			}
			return new Point(num + 1, num2 + 2);
		}

		// Token: 0x06001198 RID: 4504 RVA: 0x0041A030 File Offset: 0x00418230
		private static void Scan3By3(int topLeftX, int topLeftY, out bool isEmpty, out bool hasFloor)
		{
			isEmpty = true;
			hasFloor = false;
			for (int i = 0; i < 3; i++)
			{
				for (int num = 0; num < 3; num++)
				{
					int i2 = topLeftX + i;
					int j = topLeftY + num;
					if (WorldGen.SolidTile(i2, j, false))
					{
						isEmpty = false;
						goto IL_35;
					}
				}
			}
			IL_35:
			for (int k = 0; k < 3; k++)
			{
				int i3 = topLeftX + k;
				int j2 = topLeftY + 3;
				if (WorldGen.SolidTile(i3, j2, false))
				{
					hasFloor = true;
					return;
				}
			}
		}

		// Token: 0x06001199 RID: 4505 RVA: 0x0041A094 File Offset: 0x00418294
		private unsafe static void FinishTenthAnniversaryWorld()
		{
			if (!WorldGen.remixWorldGen)
			{
				if (!WorldGen.getGoodWorldGen && !WorldGen.drunkWorldGen)
				{
					WorldGen.ConvertSkyIslands(2, true);
				}
				WorldGen.PaintTheDungeon(24, 24);
				WorldGen.PaintTheLivingTrees(12, 12);
				WorldGen.PaintTheTemple(10, 5);
				WorldGen.PaintTheClouds(12, 12);
				WorldGen.PaintTheSand(7, 7);
				WorldGen.PaintThePyramids(12, 12);
			}
			WorldGen.PaintTheTrees();
			WorldGen.PaintTheMushrooms();
			if (!WorldGen.getGoodWorldGen)
			{
				for (int i = 50; i < Main.maxTilesX - 50; i++)
				{
					for (int j = 50; j < Main.maxTilesY - 50; j++)
					{
						Tile tile = Main.tile[i, j];
						if (WorldGen.genRand.Next(4) == 0 && tile.active() && *tile.type == 138 && *tile.frameX == 0 && *tile.frameY == 0)
						{
							*Main.tile[i, j].type = 665;
							*Main.tile[i, j + 1].type = 665;
							*Main.tile[i + 1, j].type = 665;
							*Main.tile[i + 1, j + 1].type = 665;
						}
					}
				}
			}
			if (!WorldGen.getGoodWorldGen)
			{
				WorldGen.ImproveAllChestContents();
			}
		}

		// Token: 0x0600119A RID: 4506 RVA: 0x0041A204 File Offset: 0x00418404
		private unsafe static void PaintTheMushrooms()
		{
			int num = Main.maxTilesY - 20;
			byte b = (byte)WorldGen.genRand.Next(1, 13);
			if (WorldGen.remixWorldGen)
			{
				b = 2;
				num = Main.maxTilesY - 500;
				int num2 = WorldGen.genRand.Next(5, 31);
				if (WorldGen.genRand.Next(2) == 0)
				{
					num2 = WorldGen.genRand.Next(5, 16);
				}
				for (int i = 20; i < Main.maxTilesX - 20; i++)
				{
					if (i % num2 == 0)
					{
						b += 1;
						if (b > 12)
						{
							b = 1;
						}
					}
					for (int j = Main.maxTilesY - 450; j < Main.maxTilesY - 20; j++)
					{
						Tile tile = Main.tile[i, j];
						if (tile.active() && (*tile.type == 70 || *tile.type == 578 || *tile.type == 190 || *tile.type == 71 || *tile.type == 528 || (*tile.type == 519 && *tile.frameY == 90)))
						{
							tile.color(b);
						}
						if (*tile.wall == 80 || *tile.wall == 74)
						{
							tile.wallColor(b);
						}
					}
				}
			}
			b = (byte)WorldGen.genRand.Next(1, 13);
			int num3 = 0;
			for (int k = 20; k < Main.maxTilesX - 20; k++)
			{
				for (int l = 20; l < num; l++)
				{
					Tile tile2 = Main.tile[k, l];
					if (tile2.active() && (*tile2.type == 70 || *tile2.type == 578 || *tile2.type == 190 || *tile2.type == 71 || *tile2.type == 528 || (*tile2.type == 519 && *tile2.frameY == 90)))
					{
						tile2.color(b);
						num3 = 10;
					}
					if (*tile2.wall == 80 || *tile2.wall == 74)
					{
						tile2.wallColor(b);
						num3 = 10;
					}
				}
				num3--;
				if (num3 == 0)
				{
					b += (byte)WorldGen.genRand.Next(1, 3);
					if (b > 12)
					{
						b = 1;
					}
				}
			}
		}

		// Token: 0x0600119B RID: 4507 RVA: 0x0041A470 File Offset: 0x00418670
		private unsafe static void PaintTheTrees()
		{
			int num = 20;
			if (WorldGen.remixWorldGen)
			{
				num = (int)Main.worldSurface;
			}
			byte b = (byte)WorldGen.genRand.Next(1, 13);
			bool flag = false;
			for (int i = 20; i < Main.maxTilesX - 20; i++)
			{
				bool flag2 = false;
				for (int j = num; j < Main.maxTilesY - 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (*tile.type == 5 || *tile.type == 323 || *tile.type == 596 || *tile.type == 616))
					{
						tile.color(b);
						flag2 = true;
						flag = true;
					}
				}
				if (flag && !flag2)
				{
					flag = false;
					b += 1;
					if (b > 12)
					{
						b = 1;
					}
				}
			}
		}

		// Token: 0x0600119C RID: 4508 RVA: 0x0041A548 File Offset: 0x00418748
		private unsafe static void PaintTheSand(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 20; i < Main.maxTilesX - 20; i++)
			{
				for (int j = 20; j < Main.maxTilesY - 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (*tile.type == 53 || *tile.type == 396 || *tile.type == 397))
					{
						tile.color(tilePaintColor);
						if ((double)j > Main.worldSurface)
						{
							if (*Main.tile[i, j - 1].type == 165 || *Main.tile[i, j - 1].type == 185 || *Main.tile[i, j - 1].type == 186 || *Main.tile[i, j - 1].type == 187)
							{
								Main.tile[i, j - 1].color(tilePaintColor);
							}
							if (*Main.tile[i, j - 2].type == 165 || *Main.tile[i, j - 2].type == 185 || *Main.tile[i, j - 2].type == 186 || *Main.tile[i, j - 2].type == 187)
							{
								Main.tile[i, j - 2].color(tilePaintColor);
							}
							if (*Main.tile[i, j + 1].type == 165)
							{
								Main.tile[i, j + 1].color(tilePaintColor);
							}
							if (*Main.tile[i, j + 2].type == 165)
							{
								Main.tile[i, j + 2].color(tilePaintColor);
							}
						}
					}
					if (*tile.wall == 187 || *tile.wall == 216)
					{
						tile.wallColor(tilePaintColor);
					}
				}
			}
		}

		// Token: 0x0600119D RID: 4509 RVA: 0x0041A794 File Offset: 0x00418994
		private unsafe static void PaintThePurityGrass(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (*tile.type == 2)
						{
							tile.color(tilePaintColor);
						}
						else if (*tile.type == 185 || *tile.type == 186 || *tile.type == 187)
						{
							Tile tile2 = tile;
							int num = j;
							while (num < Main.maxTilesY - 20 && (*tile2.type == 185 || *tile2.type == 186 || *tile2.type == 187 || *tile2.type == 3 || *tile2.type == 73))
							{
								tile2 = Main.tile[i, ++num];
							}
							if (*tile2.type == 2)
							{
								tile.color(tilePaintColor);
							}
						}
					}
					if (*tile.wall == 66 || *tile.wall == 63)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x0600119E RID: 4510 RVA: 0x0041A8C8 File Offset: 0x00418AC8
		private unsafe static void PaintThePyramids(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && *tile.type == 151)
					{
						tile.color(tilePaintColor);
					}
					if (*tile.wall == 34)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x0600119F RID: 4511 RVA: 0x0041A938 File Offset: 0x00418B38
		private unsafe static void PaintTheTemple(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						bool flag = false;
						if (*tile.type == 226)
						{
							flag = true;
						}
						if (*tile.type == 137)
						{
							int num = (int)(*tile.frameY / 18);
							if (num >= 1 && num <= 4)
							{
								flag = true;
							}
						}
						if (flag)
						{
							tile.color(tilePaintColor);
						}
					}
					if (*tile.wall == 87)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x060011A0 RID: 4512 RVA: 0x0041A9DC File Offset: 0x00418BDC
		private unsafe static void PaintTheClouds(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && (*tile.type == 189 || *tile.type == 196 || *tile.type == 460))
					{
						tile.color(tilePaintColor);
					}
					if (*tile.wall == 73)
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x060011A1 RID: 4513 RVA: 0x0041AA68 File Offset: 0x00418C68
		private unsafe static void PaintTheDungeon(byte tilePaintColor, byte wallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (Main.tileDungeon[(int)(*tile.type)] || TileID.Sets.CrackedBricks[(int)(*tile.type)])
						{
							tile.color(tilePaintColor);
						}
						if (*tile.type == 19)
						{
							int num = (int)(*tile.frameY / 18);
							if (num >= 6 && num <= 12)
							{
								tile.color(tilePaintColor);
							}
						}
					}
					if (Main.wallDungeon[(int)(*tile.wall)])
					{
						tile.wallColor(wallPaintColor);
					}
				}
			}
		}

		// Token: 0x060011A2 RID: 4514 RVA: 0x0041AB20 File Offset: 0x00418D20
		private unsafe static void PaintTheLivingTrees(byte livingTreePaintColor, byte livingTreeWallPaintColor)
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						if (*tile.wall == 244)
						{
							tile.color(livingTreePaintColor);
						}
						else if (*tile.type == 192 || *tile.type == 191)
						{
							tile.color(livingTreePaintColor);
						}
						else if (*tile.type == 52 || *tile.type == 382)
						{
							int x = i;
							int y = j;
							WorldGen.GetVineTop(i, j, out x, out y);
							if (*Main.tile[x, y].type == 192)
							{
								tile.color(livingTreePaintColor);
							}
						}
						else if (*tile.type == 187)
						{
							Tile tile2 = tile;
							int num = 0;
							while (*tile2.type == 187)
							{
								num++;
								tile2 = Main.tile[i, j + num];
							}
							if (*tile2.type == 192)
							{
								tile.color(livingTreePaintColor);
							}
						}
					}
					if (*tile.wall == 244)
					{
						tile.wallColor(livingTreeWallPaintColor);
					}
				}
			}
		}

		// Token: 0x060011A3 RID: 4515 RVA: 0x0041AC78 File Offset: 0x00418E78
		private unsafe static void ConvertSkyIslands(int convertType, bool growTrees)
		{
			int num = 0;
			int i = 20;
			while ((double)i < Main.worldSurface)
			{
				for (int j = 20; j < Main.maxTilesX - 20; j++)
				{
					Tile tile = Main.tile[j, i];
					if (tile.active() && TileID.Sets.Clouds[(int)(*tile.type)])
					{
						num = i;
						break;
					}
				}
				i++;
			}
			for (int k = 20; k <= Main.maxTilesX - 20; k++)
			{
				for (int l = 20; l < num; l++)
				{
					Tile tile2 = Main.tile[k, l];
					Tile tile3 = Main.tile[k, l - 1];
					if (tile2.active() && *tile2.type == 2)
					{
						if (*tile3.type == 596 || *tile3.type == 616)
						{
							WorldGen.KillTile(k, l - 1, false, false, false);
						}
						WorldGen.Convert(k, l, convertType, 1);
						ushort type = *tile3.type;
						if (type - 82 <= 1 || type - 185 <= 2 || type == 227)
						{
							WorldGen.KillTile(k, l - 1, false, false, false);
						}
						if (growTrees && WorldGen._genRand.Next(3) == 0)
						{
							WorldGen.GrowTree(k, l);
						}
					}
				}
			}
		}

		// Token: 0x060011A4 RID: 4516 RVA: 0x0041ADD0 File Offset: 0x00418FD0
		private static void ImproveAllChestContents()
		{
			for (int i = 0; i < 8000; i++)
			{
				Chest chest = Main.chest[i];
				if (chest != null)
				{
					for (int j = 0; j < 40; j++)
					{
						Item item = chest.item[j];
						if (item != null && !item.IsAir)
						{
							WorldGen.GiveItemGoodPrefixes(item);
						}
					}
				}
			}
		}

		// Token: 0x060011A5 RID: 4517 RVA: 0x0041AE20 File Offset: 0x00419020
		private static void GiveItemGoodPrefixes(Item item)
		{
			if (item.accessory)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForAccessory);
			}
			if (item.melee)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForMeleeWeapon);
			}
			if (item.ranged)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForRangedWeapon);
			}
			if (item.magic)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForMagicWeapon);
			}
			if (item.summon)
			{
				WorldGen.PrefixItemFromOptions(item, WorldGen.TenthAnniversaryWorldInfo.GoodPrefixIdsForSummonerWeapon);
			}
		}

		// Token: 0x060011A6 RID: 4518 RVA: 0x0041AE8C File Offset: 0x0041908C
		private static void PrefixItemFromOptions(Item item, int[] options)
		{
			int prefix = item.prefix;
			if (!item.Prefix(-3))
			{
				return;
			}
			List<int> list = new List<int>(options);
			while (list.Count > 0)
			{
				int index = WorldGen._genRand.Next(list.Count);
				int num = list[index];
				item.Prefix(num);
				if (item.prefix == num)
				{
					return;
				}
				list.RemoveAt(index);
			}
			item.Prefix(prefix);
		}

		// Token: 0x060011A7 RID: 4519 RVA: 0x0041AEF8 File Offset: 0x004190F8
		private unsafe static void NotTheBees()
		{
			int num = Main.maxTilesX / 7;
			if (!WorldGen.notTheBees)
			{
				return;
			}
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY - 180; j++)
				{
					if (!WorldGen.remixWorldGen || (i >= num + WorldGen.genRand.Next(3) && i < Main.maxTilesX - num - WorldGen.genRand.Next(3) && ((double)j <= (Main.worldSurface * 2.0 + Main.rockLayer) / 3.0 + (double)WorldGen.genRand.Next(3) || j >= Main.maxTilesY - 350 - WorldGen.genRand.Next(3))))
					{
						if (*Main.tile[i, j].type == 52)
						{
							*Main.tile[i, j].type = 62;
						}
						if ((WorldGen.SolidOrSlopedTile(i, j) || TileID.Sets.CrackedBricks[(int)(*Main.tile[i, j].type)]) && !TileID.Sets.Ore[(int)(*Main.tile[i, j].type)] && *Main.tile[i, j].type != 123 && *Main.tile[i, j].type != 40)
						{
							if (*Main.tile[i, j].type == 191 || *Main.tile[i, j].type == 383)
							{
								if (!WorldGen.remixWorldGen)
								{
									*Main.tile[i, j].type = 383;
								}
							}
							else if (*Main.tile[i, j].type == 192 || *Main.tile[i, j].type == 384)
							{
								if (!WorldGen.remixWorldGen)
								{
									*Main.tile[i, j].type = 384;
								}
							}
							else if (*Main.tile[i, j].type != 151 && *Main.tile[i, j].type != 662 && *Main.tile[i, j].type != 661 && *Main.tile[i, j].type != 189 && *Main.tile[i, j].type != 196 && *Main.tile[i, j].type != 120 && *Main.tile[i, j].type != 158 && *Main.tile[i, j].type != 175 && *Main.tile[i, j].type != 45 && *Main.tile[i, j].type != 119)
							{
								if (*Main.tile[i, j].type >= 63 && *Main.tile[i, j].type <= 68)
								{
									*Main.tile[i, j].type = 230;
								}
								else if (*Main.tile[i, j].type != 57 && *Main.tile[i, j].type != 76 && *Main.tile[i, j].type != 75 && *Main.tile[i, j].type != 229 && *Main.tile[i, j].type != 230 && *Main.tile[i, j].type != 407 && *Main.tile[i, j].type != 404)
								{
									if (*Main.tile[i, j].type == 224)
									{
										*Main.tile[i, j].type = 229;
									}
									else if (*Main.tile[i, j].type == 53)
									{
										if (i < WorldGen.beachDistance + WorldGen.genRand.Next(3) || i > Main.maxTilesX - WorldGen.beachDistance - WorldGen.genRand.Next(3))
										{
											*Main.tile[i, j].type = 229;
										}
									}
									else if ((i <= WorldGen.beachDistance - WorldGen.genRand.Next(3) || i >= Main.maxTilesX - WorldGen.beachDistance + WorldGen.genRand.Next(3) || (*Main.tile[i, j].type != 397 && *Main.tile[i, j].type != 396)) && *Main.tile[i, j].type != 10 && *Main.tile[i, j].type != 203 && *Main.tile[i, j].type != 25 && *Main.tile[i, j].type != 137 && *Main.tile[i, j].type != 138 && *Main.tile[i, j].type != 141)
									{
										if (Main.tileDungeon[(int)(*Main.tile[i, j].type)] || TileID.Sets.CrackedBricks[(int)(*Main.tile[i, j].type)])
										{
											Main.tile[i, j].color(14);
										}
										else if (*Main.tile[i, j].type == 226)
										{
											Main.tile[i, j].color(15);
										}
										else if (*Main.tile[i, j].type != 202 && *Main.tile[i, j].type != 70 && *Main.tile[i, j].type != 48 && *Main.tile[i, j].type != 232)
										{
											if (TileID.Sets.Conversion.Grass[(int)(*Main.tile[i, j].type)] || *Main.tile[i, j].type == 60 || *Main.tile[i, j].type == 70)
											{
												if (j > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
												{
													*Main.tile[i, j].type = 70;
												}
												else
												{
													*Main.tile[i, j].type = 60;
												}
											}
											else if (*Main.tile[i, j].type == 0 || *Main.tile[i, j].type == 59)
											{
												*Main.tile[i, j].type = 59;
											}
											else if (*Main.tile[i, j].type != 633)
											{
												if (j > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
												{
													*Main.tile[i, j].type = 230;
												}
												else if (!WorldGen.remixWorldGen || (double)j > Main.worldSurface + (double)WorldGen.genRand.Next(-1, 2))
												{
													*Main.tile[i, j].type = 225;
												}
											}
										}
									}
								}
							}
						}
						if (*Main.tile[i, j].wall != 15 && *Main.tile[i, j].wall != 64 && *Main.tile[i, j].wall != 204 && *Main.tile[i, j].wall != 205 && *Main.tile[i, j].wall != 206 && *Main.tile[i, j].wall != 207 && *Main.tile[i, j].wall != 23 && *Main.tile[i, j].wall != 24 && *Main.tile[i, j].wall != 42 && *Main.tile[i, j].wall != 10 && *Main.tile[i, j].wall != 21 && *Main.tile[i, j].wall != 82 && *Main.tile[i, j].wall != 187 && *Main.tile[i, j].wall != 216 && *Main.tile[i, j].wall != 34 && *Main.tile[i, j].wall != 244)
						{
							if (*Main.tile[i, j].wall == 87)
							{
								Main.tile[i, j].wallColor(15);
							}
							else if (Main.wallDungeon[(int)(*Main.tile[i, j].wall)])
							{
								Main.tile[i, j].wallColor(14);
							}
							else if (*Main.tile[i, j].wall == 2)
							{
								*Main.tile[i, j].wall = 2;
							}
							else if (*Main.tile[i, j].wall == 196)
							{
								*Main.tile[i, j].wall = 196;
							}
							else if (*Main.tile[i, j].wall == 197)
							{
								*Main.tile[i, j].wall = 197;
							}
							else if (*Main.tile[i, j].wall == 198)
							{
								*Main.tile[i, j].wall = 198;
							}
							else if (*Main.tile[i, j].wall == 199)
							{
								*Main.tile[i, j].wall = 199;
							}
							else if (*Main.tile[i, j].wall == 63)
							{
								*Main.tile[i, j].wall = 64;
							}
							else if (*Main.tile[i, j].wall != 3 && *Main.tile[i, j].wall != 83 && *Main.tile[i, j].wall != 73 && *Main.tile[i, j].wall != 62 && *Main.tile[i, j].wall != 13 && *Main.tile[i, j].wall != 14 && *Main.tile[i, j].wall > 0 && (!WorldGen.remixWorldGen || (double)j > Main.worldSurface + (double)WorldGen.genRand.Next(-1, 2)))
							{
								*Main.tile[i, j].wall = 86;
							}
						}
						if (*Main.tile[i, j].liquid > 0 && j <= GenVars.lavaLine + 2)
						{
							if ((double)j > Main.rockLayer && (i < WorldGen.beachDistance + 200 || i > Main.maxTilesX - WorldGen.beachDistance - 200))
							{
								Main.tile[i, j].honey(false);
							}
							else if (Main.wallDungeon[(int)(*Main.tile[i, j].wall)])
							{
								Main.tile[i, j].honey(false);
							}
							else
							{
								Main.tile[i, j].honey(true);
							}
						}
					}
				}
			}
		}

		// Token: 0x060011A8 RID: 4520 RVA: 0x0041BCF4 File Offset: 0x00419EF4
		private unsafe static void FinishNotTheBees()
		{
			if (!WorldGen.notTheBees)
			{
				return;
			}
			int num = 0;
			int i = 20;
			while ((double)i < Main.worldSurface)
			{
				for (int j = 20; j < Main.maxTilesX - 20; j++)
				{
					if (Main.tile[j, i].active() && TileID.Sets.Clouds[(int)(*Main.tile[j, i].type)])
					{
						num = i;
						break;
					}
				}
				i++;
			}
			for (int k = 25; k < Main.maxTilesX - 25; k++)
			{
				for (int l = 25; l < Main.maxTilesY - 25; l++)
				{
					if (*Main.tile[k, l].type == 571)
					{
						WorldGen.TileFrame(k, l, false, false);
					}
					int num2 = 20;
					if (WorldGen.remixWorldGen)
					{
						num2 = 10;
					}
					if (*Main.tile[k, l].type == 25 || (WorldGen.remixWorldGen && *Main.tile[k, l].type == 23 && (double)l < Main.worldSurface))
					{
						for (int m = k - num2; m <= k + num2; m++)
						{
							for (int n = l - num2; n <= l + num2; n++)
							{
								if (*Main.tile[m, n].type == 60)
								{
									if (*Main.tile[m, n + 1].type == 444)
									{
										WorldGen.KillTile(m, n + 1, false, false, false);
									}
									*Main.tile[m, n].type = 661;
									if (*Main.tile[m, n - 1].type == 61 || *Main.tile[m, n - 1].type == 74)
									{
										Main.tile[m, n - 1].active(false);
										WorldGen.PlaceTile(m, n - 1, 24, false, false, -1, 0);
									}
								}
								else if (*Main.tile[m, n - 1].type == 233 || *Main.tile[m, n - 1].type == 82)
								{
									WorldGen.KillTile(m, n - 1, false, false, false);
								}
							}
						}
					}
					else if (*Main.tile[k, l].type == 203 || (WorldGen.remixWorldGen && *Main.tile[k, l].type == 199 && (double)l < Main.worldSurface))
					{
						for (int num3 = k - num2; num3 <= k + num2; num3++)
						{
							for (int num4 = l - num2; num4 <= l + num2; num4++)
							{
								if (*Main.tile[num3, num4].type == 60)
								{
									if (*Main.tile[num3, num4 + 1].type == 444)
									{
										WorldGen.KillTile(num3, num4 + 1, false, false, false);
									}
									*Main.tile[num3, num4].type = 662;
									if (*Main.tile[num3, num4 - 1].type == 61 || *Main.tile[num3, num4 - 1].type == 74)
									{
										Main.tile[num3, num4 - 1].active(false);
										WorldGen.PlaceTile(num3, num4 - 1, 201, false, false, -1, 0);
									}
									else if (*Main.tile[num3, num4 - 1].type == 233 || *Main.tile[num3, num4 - 1].type == 82)
									{
										WorldGen.KillTile(num3, num4 - 1, false, false, false);
									}
								}
							}
						}
					}
					if (*Main.tile[k, l].type == 382 || *Main.tile[k, l].type == 52)
					{
						*Main.tile[k, l].type = 62;
					}
					if (l > GenVars.lavaLine + WorldGen.genRand.Next(-2, 3) + 2)
					{
						if (!WorldGen.remixWorldGen)
						{
							WorldGen.SpreadGrass(k, l, 59, 70, true, default(TileColorCache));
						}
					}
					else
					{
						WorldGen.SpreadGrass(k, l, 59, 60, true, default(TileColorCache));
					}
					if ((double)l > Main.rockLayer + 20.0 + (double)WorldGen.genRand.Next(-2, 3) && l <= GenVars.lavaLine + 2 - 20 - WorldGen.genRand.Next(-2, 3) && (k < WorldGen.beachDistance + 200 - 20 - WorldGen.genRand.Next(-2, 3) || k > Main.maxTilesX - WorldGen.beachDistance - 200 + 20 + WorldGen.genRand.Next(-2, 3)))
					{
						if (*Main.tile[k, l].liquid > 0)
						{
							Main.tile[k, l].honey(false);
							Main.tile[k, l].lava(false);
						}
						if (*Main.tile[k, l].type == 59)
						{
							bool flag = false;
							for (int num5 = k - 1; num5 <= k + 1; num5++)
							{
								for (int num6 = l - 1; num6 <= l + 1; num6++)
								{
									if (*Main.tile[num5, num6].type == 60)
									{
										flag = true;
									}
								}
							}
							if (!flag)
							{
								if ((double)l < (Main.rockLayer + (double)GenVars.lavaLine) / 2.0)
								{
									*Main.tile[k, l].type = 161;
								}
								else
								{
									*Main.tile[k, l].type = 147;
								}
							}
						}
					}
					if (!WorldGen.remixWorldGen)
					{
						if ((*Main.tile[k, l].type == 7 || *Main.tile[k, l].type == 166 || *Main.tile[k, l].type == 6 || *Main.tile[k, l].type == 167) && (double)l > ((double)GenVars.lavaLine + Main.rockLayer * 2.0) / 3.0 + (double)WorldGen.genRand.Next(-2, 3) + 2.0)
						{
							*Main.tile[k, l].type = 0;
						}
					}
					else if (!WorldGen.remixWorldGen && (*Main.tile[k, l].type == 123 || *Main.tile[k, l].type == 40) && (double)l > ((double)GenVars.lavaLine + Main.rockLayer) / 2.0 + (double)WorldGen.genRand.Next(-2, 3) + 2.0)
					{
						*Main.tile[k, l].type = 1;
					}
					if (l > num && (*Main.tile[k, l].liquid == 0 || (!Main.tile[k, l].lava() && !Main.tile[k, l].shimmer())))
					{
						if (WorldGen.getGoodWorldGen)
						{
							if (WorldGen.genRand.Next(150) == 0)
							{
								WorldGen.PlaceTile(k, l, 231, true, false, -1, 0);
							}
						}
						else if (WorldGen.genRand.Next(25) == 0)
						{
							WorldGen.PlaceTile(k, l, 231, true, false, -1, 0);
						}
					}
				}
			}
			for (int num7 = 20; num7 < num; num7++)
			{
				for (int num8 = 20; num8 <= Main.maxTilesX - 20; num8++)
				{
					Main.tile[num8, num7].honey(false);
					if (*Main.tile[num8, num7].type == 375)
					{
						*Main.tile[num8, num7].type = 373;
					}
					if (!WorldGen.remixWorldGen)
					{
						if (*Main.tile[num8, num7].type == 60)
						{
							*Main.tile[num8, num7].type = 2;
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.GrowTreeWithSettings(num8, num7, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
							}
							else
							{
								WorldGen.GrowTreeWithSettings(num8, num7, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
							}
							if (!Main.tile[num8, num7 - 1].active())
							{
								WorldGen.PlaceTile(num8, num7 - 1, 3, false, false, -1, 0);
							}
						}
						if (*Main.tile[num8, num7].type == 59)
						{
							*Main.tile[num8, num7].type = 0;
						}
					}
					else
					{
						WorldGen.GrowTree(num8, num7);
					}
				}
			}
		}

		// Token: 0x060011A9 RID: 4521 RVA: 0x0041C6D4 File Offset: 0x0041A8D4
		private unsafe static void FinishGetGoodWorld()
		{
			int num = 0;
			int i = 20;
			while ((double)i < Main.worldSurface)
			{
				for (int j = 20; j < Main.maxTilesX - 20; j++)
				{
					if (Main.tile[j, i].active() && TileID.Sets.Clouds[(int)(*Main.tile[j, i].type)])
					{
						num = i;
						break;
					}
				}
				i++;
			}
			byte b = (byte)WorldGen.genRand.Next(13, 25);
			for (int k = 0; k < Main.maxTilesX; k++)
			{
				bool flag = false;
				for (int l = 0; l < Main.maxTilesY; l++)
				{
					if (Main.tile[k, l].active() && Main.tileDungeon[(int)(*Main.tile[k, l].type)])
					{
						if (*Main.tile[k, l].type == 44)
						{
							b = (byte)WorldGen.genRand.Next(13, 15);
							if (WorldGen.genRand.Next(2) == 0)
							{
								b = (byte)WorldGen.genRand.Next(23, 25);
							}
						}
						if (*Main.tile[k, l].type == 43)
						{
							b = (byte)WorldGen.genRand.Next(15, 19);
						}
						if (*Main.tile[k, l].type == 41)
						{
							b = (byte)WorldGen.genRand.Next(19, 23);
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			for (int m = 0; m < Main.maxTilesX; m++)
			{
				for (int n = 5; n < Main.maxTilesY - 5; n++)
				{
					if (Main.tile[m, n].active() && (Main.tileDungeon[(int)(*Main.tile[m, n].type)] || TileID.Sets.CrackedBricks[(int)(*Main.tile[m, n].type)]))
					{
						Main.tile[m, n].color(b);
					}
					if (Main.wallDungeon[(int)(*Main.tile[m, n].wall)])
					{
						Main.tile[m, n].wallColor(b);
					}
					if (Main.tile[m, n].active())
					{
						bool flag2 = false;
						if (*Main.tile[m, n].type == 226)
						{
							flag2 = true;
						}
						if (*Main.tile[m, n].type == 137)
						{
							int num2 = (int)(*Main.tile[m, n].frameY / 18);
							if (num2 >= 1 && num2 <= 4)
							{
								flag2 = true;
							}
						}
						if (flag2)
						{
							Main.tile[m, n].color(17);
						}
					}
					if (*Main.tile[m, n].wall == 87)
					{
						Main.tile[m, n].wallColor(25);
					}
					if (Main.tile[m, n].active())
					{
						if (!WorldGen.remixWorldGen && *Main.tile[m, n].type == 57 && WorldGen.genRand.Next(15) == 0)
						{
							if (*Main.tile[m, n - 1].type == 57)
							{
								Main.tile[m, n].active(false);
							}
							*Main.tile[m, n].liquid = byte.MaxValue;
							Main.tile[m, n].lava(true);
						}
						if (n < num && *Main.tile[m, n].type == 2)
						{
							if (WorldGen.crimson)
							{
								*Main.tile[m, n].type = 199;
							}
							else
							{
								*Main.tile[m, n].type = 23;
							}
							if (*Main.tile[m, n - 1].type == 3)
							{
								Main.tile[m, n - 1].active(false);
							}
							if (*Main.tile[m, n - 1].type == 73)
							{
								Main.tile[m, n - 1].active(false);
							}
							if (*Main.tile[m, n - 1].type == 27)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 596)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 616)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 82)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 83)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 186)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 187)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 185)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
							if (*Main.tile[m, n - 1].type == 227)
							{
								WorldGen.KillTile(m, n - 1, false, false, false);
							}
						}
					}
				}
			}
			int num3 = 0;
			while (num3 < 8000 && Main.chest[num3] != null)
			{
				if (WorldGen.genRand.Next(10) == 0 && Main.chest[num3].item[1].stack != 0)
				{
					for (int num4 = 1; num4 < 40; num4++)
					{
						if (Main.chest[num3].item[num4].stack == 0)
						{
							Main.chest[num3].item[num4].SetDefaults(678);
							break;
						}
					}
				}
				num3++;
			}
		}

		// Token: 0x060011AA RID: 4522 RVA: 0x0041CDE0 File Offset: 0x0041AFE0
		private unsafe static void FinishNoTraps()
		{
			Main.tileSolid[138] = false;
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = 50; j < Main.maxTilesY - 50; j++)
				{
					Tile tile = Main.tile[i, j];
					if (WorldGen.genRand.Next(5) == 0 && tile.active() && *tile.type == 12 && *tile.frameX == 0 && *tile.frameY == 0)
					{
						*Main.tile[i, j].type = 665;
						*Main.tile[i, j + 1].type = 665;
						*Main.tile[i + 1, j].type = 665;
						*Main.tile[i + 1, j + 1].type = 665;
					}
					if (i % 2 == 0 && j % 2 == 0 && Main.tile[i, j].active() && (*Main.tile[i, j].type == 105 || (*Main.tile[i, j].type == 467 && (*Main.tile[i, j].frameX == 144 || *Main.tile[i, j].frameX == 162))))
					{
						bool flag = false;
						for (int k = i - 1; k <= i + 1; k++)
						{
							for (int l = j - 1; l <= j + 1; l++)
							{
								if (Main.tile[k, l].wire())
								{
									flag = true;
								}
							}
						}
						if (!flag)
						{
							bool flag2 = false;
							int num = 25;
							int num2 = -1;
							int num3 = -1;
							for (int m = 0; m < num * num; m++)
							{
								num2 = WorldGen.genRand.Next(i - num, i + num + 1);
								num3 = WorldGen.genRand.Next(j - num, j + num + 1);
								if (Main.tile[num2, num3].wire())
								{
									flag2 = true;
									break;
								}
							}
							if (flag2)
							{
								int num4 = i;
								int num5 = j;
								Main.tile[num4, num5].wire(true);
								while (num4 != num2)
								{
									if (num4 < num2)
									{
										num4++;
									}
									if (num4 > num2)
									{
										num4--;
									}
									Main.tile[num4, num5].wire(true);
								}
								while (num5 != num3)
								{
									if (num5 < num3)
									{
										num5++;
									}
									if (num5 > num3)
									{
										num5--;
									}
									Main.tile[num4, num5].wire(true);
								}
							}
							else if (*Main.tile[i, j].type == 105)
							{
								num = 15;
								bool flag3 = false;
								for (int n = 0; n < num * num; n++)
								{
									num2 = i + WorldGen.genRand.Next(-num, num + 1);
									num3 = j + WorldGen.genRand.Next(-num, num + 1);
									WorldGen.PlaceTile(num2, num3, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
									if (*Main.tile[num2, num3].type == 135)
									{
										flag3 = true;
										break;
									}
								}
								if (flag3)
								{
									int num6 = i;
									int num7 = j;
									Main.tile[num6, num7].wire(true);
									while (num6 != num2)
									{
										if (num6 < num2)
										{
											num6++;
										}
										if (num6 > num2)
										{
											num6--;
										}
										Main.tile[num6, num7].wire(true);
									}
									while (num7 != num3)
									{
										if (num7 < num3)
										{
											num7++;
										}
										if (num7 > num3)
										{
											num7--;
										}
										Main.tile[num6, num7].wire(true);
									}
								}
							}
						}
						if (*Main.tile[i, j].type == 467)
						{
							int num8 = 8;
							for (int num9 = 0; num9 < num8 * num8; num9++)
							{
								int num10 = i + WorldGen.genRand.Next(-num8, num8 + 1);
								int num11 = j + WorldGen.genRand.Next(-num8, num8 + 1);
								if (*Main.tile[num10, num11].type == 0 || *Main.tile[num10, num11].type == 1 || TileID.Sets.Ore[(int)(*Main.tile[num10, num11].type)] || *Main.tile[num10, num11].type == 59 || *Main.tile[num10, num11].type == 151)
								{
									bool flag4 = true;
									for (int num12 = num10 - 1; num12 <= num10 + 1; num12++)
									{
										for (int num13 = num11 - 1; num13 <= num11 + 1; num13++)
										{
											if (!WorldGen.SolidTile(num12, num13, false))
											{
												flag4 = false;
											}
										}
									}
									if (flag4)
									{
										Tile tile2 = Main.tile[num10, num11];
										*tile2.type = 141;
										*tile2.frameX = (*tile2.frameY = 0);
										tile2.slope(0);
										tile2.halfBrick(false);
										WorldGen.TileFrame(num10, num11, true, false);
										if (*Main.tile[num10, num11].type == 141)
										{
											int num14 = i;
											int num15 = j;
											Main.tile[num14, num15].wire(true);
											while (num14 != num10)
											{
												if (num14 < num10)
												{
													num14++;
												}
												if (num14 > num10)
												{
													num14--;
												}
												Main.tile[num14, num15].wire(true);
											}
											while (num15 != num11)
											{
												if (num15 < num11)
												{
													num15++;
												}
												if (num15 > num11)
												{
													num15--;
												}
												Main.tile[num14, num15].wire(true);
											}
											break;
										}
									}
								}
							}
						}
						else
						{
							j++;
						}
					}
				}
			}
			Main.tileSolid[138] = true;
			int num16 = 0;
			while (num16 < 8000 && Main.chest[num16] != null)
			{
				if (WorldGen.genRand.Next(20) == 0 && Main.chest[num16].item[1].stack != 0)
				{
					for (int num17 = 1; num17 < 40; num17++)
					{
						if (Main.chest[num16].item[num17].stack == 0)
						{
							Main.chest[num16].item[num17].SetDefaults(5346);
							break;
						}
					}
				}
				num16++;
			}
		}

		// Token: 0x060011AB RID: 4523 RVA: 0x0041D4F4 File Offset: 0x0041B6F4
		private unsafe static void FinishDrunkGen()
		{
			byte color = (byte)WorldGen.genRand.Next(13, 25);
			byte b = 16;
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				bool flag = false;
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					if (Main.tile[i, j].active() && Main.tileDungeon[(int)(*Main.tile[i, j].type)])
					{
						if (*Main.tile[i, j].type == 44)
						{
							color = (byte)WorldGen.genRand.Next(13, 15);
							if (WorldGen.genRand.Next(2) == 0)
							{
								color = (byte)WorldGen.genRand.Next(23, 25);
							}
						}
						if (*Main.tile[i, j].type == 43)
						{
							color = (byte)WorldGen.genRand.Next(15, 19);
						}
						if (*Main.tile[i, j].type == 41)
						{
							color = (byte)WorldGen.genRand.Next(19, 23);
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			for (int k = 10; k < Main.maxTilesX - 10; k++)
			{
				for (int l = 10; l < Main.maxTilesY - 10; l++)
				{
					if (Main.tile[k, l].active() && (Main.tileDungeon[(int)(*Main.tile[k, l].type)] || TileID.Sets.CrackedBricks[(int)(*Main.tile[k, l].type)]))
					{
						Main.tile[k, l].color(color);
					}
					if (Main.wallDungeon[(int)(*Main.tile[k, l].wall)])
					{
						Main.tile[k, l].wallColor(25);
					}
					if (Main.tile[k, l].active())
					{
						if (*Main.tile[k, l].type == 60)
						{
							int num = 1;
							for (int m = k - num; m <= k + num; m++)
							{
								for (int n = l - num; n <= l + num; n++)
								{
									if (*Main.tile[m, n].type == 147 || *Main.tile[m, n].type == 161)
									{
										*Main.tile[m, n].type = 59;
									}
								}
							}
						}
						bool flag2 = false;
						if (*Main.tile[k, l].type == 226)
						{
							flag2 = true;
						}
						if (*Main.tile[k, l].type == 137)
						{
							int num2 = (int)(*Main.tile[k, l].frameY / 18);
							if (num2 >= 1 && num2 <= 4)
							{
								flag2 = true;
							}
						}
						if (flag2)
						{
							Main.tile[k, l].color(b);
						}
					}
					if (*Main.tile[k, l].wall == 87)
					{
						Main.tile[k, l].wallColor(b);
					}
				}
			}
			int num3 = 0;
			while (num3 < 8000 && Main.chest[num3] != null)
			{
				if (WorldGen.genRand.Next(15) == 0 && Main.chest[num3].item[1].stack != 0)
				{
					for (int num4 = 1; num4 < 40; num4++)
					{
						if (Main.chest[num3].item[num4].stack == 0)
						{
							Main.chest[num3].item[num4].SetDefaults(5001);
							break;
						}
					}
				}
				if (WorldGen.genRand.Next(30) == 0 && Main.chest[num3].item[1].stack != 0)
				{
					for (int num5 = 1; num5 < 40; num5++)
					{
						if (Main.chest[num3].item[num5].stack == 0)
						{
							Main.chest[num3].item[num5].SetDefaults(678);
							break;
						}
					}
				}
				num3++;
			}
		}

		// Token: 0x060011AC RID: 4524 RVA: 0x0041D984 File Offset: 0x0041BB84
		private unsafe static void FinishRemixWorld()
		{
			for (int i = 25; i < Main.maxTilesX - 25; i++)
			{
				for (int j = 25; j < Main.maxTilesY - 25; j++)
				{
					int conversionType = 1;
					if (WorldGen.crimson)
					{
						conversionType = 4;
					}
					if (WorldGen.notTheBees && (double)j < Main.worldSurface)
					{
						if (Main.tile[i, j].honey())
						{
							if (Main.tileLavaDeath[(int)(*Main.tile[i, j].type)])
							{
								WorldGen.KillTile(i, j, false, false, false);
							}
							Main.tile[i, j].lava(true);
						}
						if (*Main.tile[i, j].type == 375)
						{
							*Main.tile[i, j].type = 374;
						}
						if (*Main.tile[i, j].type == 230 || *Main.tile[i, j].type == 229 || *Main.tile[i, j].type == 659 || *Main.tile[i, j].type == 56)
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (*Main.tile[i, j].type == 82 || *Main.tile[i, j].type == 83 || *Main.tile[i, j].type == 84)
						{
							WorldGen.TileFrame(i, j, false, false);
						}
					}
					if ((double)j < Main.worldSurface + (double)WorldGen.genRand.Next(3))
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									WorldGen.Convert(i, j, 4, 1);
								}
								else
								{
									WorldGen.Convert(i, j, 1, 1);
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								WorldGen.Convert(i, j, 1, 1);
							}
							else
							{
								WorldGen.Convert(i, j, 4, 1);
							}
						}
						else
						{
							WorldGen.Convert(i, j, conversionType, 1);
						}
					}
					if ((double)j < Main.worldSurface - (double)WorldGen.genRand.Next(19, 22) && (*Main.tile[i, j].wall == 178 || *Main.tile[i, j].wall == 180))
					{
						*Main.tile[i, j].wall = 0;
					}
					if (Main.tile[i, j].active() && *Main.tile[i, j].type == 56)
					{
						WorldGen.KillTile(i, j, false, false, false);
					}
					if (*Main.tile[i, j].type == 189 || *Main.tile[i, j].type == 196 || *Main.tile[i, j].type == 202)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									*Main.tile[i, j].type = 195;
								}
								else
								{
									*Main.tile[i, j].type = 474;
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								*Main.tile[i, j].type = 474;
							}
							else
							{
								*Main.tile[i, j].type = 195;
							}
						}
						else if (WorldGen.crimson)
						{
							*Main.tile[i, j].type = 195;
						}
						else
						{
							*Main.tile[i, j].type = 474;
						}
					}
					if (*Main.tile[i, j].wall == 73 || *Main.tile[i, j].wall == 82)
					{
						if (WorldGen.drunkWorldGen)
						{
							if (GenVars.crimsonLeft)
							{
								if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
								{
									*Main.tile[i, j].wall = 77;
								}
								else
								{
									*Main.tile[i, j].wall = 233;
								}
							}
							else if (i < Main.maxTilesX / 2 + WorldGen.genRand.Next(-2, 3))
							{
								*Main.tile[i, j].wall = 233;
							}
							else
							{
								*Main.tile[i, j].wall = 77;
							}
						}
						else if (WorldGen.crimson)
						{
							*Main.tile[i, j].wall = 77;
						}
						else
						{
							*Main.tile[i, j].wall = 233;
						}
					}
					if ((double)j > Main.rockLayer && j < Main.maxTilesY - 350 && *Main.tile[i, j].type == 0 && Main.tile[i, j].active() && (!Main.tile[i - 1, j - 1].active() || !WorldGen.SolidTile(i, j - 1, false) || !Main.tile[i + 1, j - 1].active() || !Main.tile[i - 1, j].active() || !Main.tile[i + 1, j].active() || !Main.tile[i - 1, j + 1].active() || !Main.tile[i, j + 1].active() || !Main.tile[i + 1, j + 1].active()))
					{
						*Main.tile[i, j].type = 2;
					}
				}
			}
			Liquid.QuickWater(-2, -1, -1);
			int num15 = (int)((double)Main.maxTilesX * 0.38);
			int num2 = (int)((double)Main.maxTilesX * 0.62);
			int maxTilesY = Main.maxTilesY;
			int num3 = Main.maxTilesY - 135;
			int maxTilesY2 = Main.maxTilesY;
			for (int k = num15; k < num2 + 15; k++)
			{
				for (int l = Main.maxTilesY - 200; l < num3 + 10; l++)
				{
					*Main.tile[k, l].liquid = 0;
					if (*Main.tile[k, l].type == 58)
					{
						*Main.tile[k, l].type = 57;
					}
				}
			}
			WorldGen.AddTrees(true);
			for (int m = 0; m < Main.maxTilesX; m++)
			{
				byte color = 22;
				byte color2 = 22;
				if (WorldGen.drunkWorldGen)
				{
					if ((GenVars.crimsonLeft && m < Main.maxTilesX / 2) || (!GenVars.crimsonLeft && m > Main.maxTilesX / 2))
					{
						color2 = 13;
						color = 13;
					}
				}
				else if (WorldGen.crimson)
				{
					color2 = 13;
					color = 13;
				}
				for (int n = 0; n < Main.maxTilesY; n++)
				{
					if (Main.tile[m, n].active() && (Main.tileDungeon[(int)(*Main.tile[m, n].type)] || TileID.Sets.CrackedBricks[(int)(*Main.tile[m, n].type)]))
					{
						Main.tile[m, n].color(color);
					}
					if (Main.wallDungeon[(int)(*Main.tile[m, n].wall)])
					{
						Main.tile[m, n].wallColor(25);
						if (*Main.tile[m, n].type == 19 && *Main.tile[m, n].frameY != 180)
						{
							Main.tile[m, n].color(color);
						}
					}
					if (Main.tile[m, n].active())
					{
						bool flag = false;
						if (Main.tenthAnniversaryWorld)
						{
							if (*Main.tile[m, n].type == 191)
							{
								flag = true;
							}
							if (Main.tile[m, n].active() && *Main.tile[m, n].type == 151)
							{
								Main.tile[m, n].color(color);
							}
						}
						if (*Main.tile[m, n].type == 226)
						{
							flag = true;
						}
						if (*Main.tile[m, n].type == 137)
						{
							int num4 = (int)(*Main.tile[m, n].frameY / 18);
							if (num4 >= 1 && num4 <= 4)
							{
								flag = true;
							}
						}
						if (flag)
						{
							Main.tile[m, n].color(color2);
						}
					}
					if (*Main.tile[m, n].wall == 244)
					{
						Main.tile[m, n].wallColor(25);
					}
					if (*Main.tile[m, n].wall == 34)
					{
						Main.tile[m, n].wallColor(25);
					}
					if (*Main.tile[m, n].wall == 87)
					{
						Main.tile[m, n].wallColor(25);
						Main.tile[m, n].color(color2);
					}
				}
			}
			double num5 = (double)Main.maxTilesX / 4200.0;
			num5 *= (double)WorldGen.genRand.Next(2, 5);
			int num6 = 0;
			while ((double)num6 < num5)
			{
				int num7 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.39), (int)((double)Main.maxTilesX * 0.61));
				int num8 = WorldGen.genRand.Next(10, 31);
				for (int num9 = num7 - num8; num9 <= num7 + num8; num9++)
				{
					for (int num10 = Main.maxTilesY - 250; num10 < Main.maxTilesY - 25; num10++)
					{
						if (*Main.tile[num9, num10].type == 637)
						{
							*Main.tile[num9, num10].frameX = (short)(18 * Main.rand.Next(6, 11));
						}
					}
				}
				num6++;
			}
			if (WorldGen.notTheBees)
			{
				for (int num11 = 3; num11 < Main.maxTilesX - 3; num11++)
				{
					bool flag2 = true;
					int num12 = 0;
					while ((double)num12 < Main.worldSurface)
					{
						if (flag2)
						{
							if (*Main.tile[num11, num12].wall == 86)
							{
								*Main.tile[num11, num12].wall = 0;
							}
							if (Main.tile[num11, num12].active())
							{
								flag2 = false;
							}
						}
						else if (*Main.tile[num11, num12].wall == 0 && *Main.tile[num11, num12 + 1].wall == 0 && *Main.tile[num11, num12 + 2].wall == 0 && *Main.tile[num11, num12 + 3].wall == 0 && *Main.tile[num11, num12 + 4].wall == 0 && *Main.tile[num11 - 1, num12].wall == 0 && *Main.tile[num11 + 1, num12].wall == 0 && *Main.tile[num11 - 2, num12].wall == 0 && *Main.tile[num11 + 2, num12].wall == 0 && !Main.tile[num11, num12].active() && !Main.tile[num11, num12 + 1].active() && !Main.tile[num11, num12 + 2].active() && !Main.tile[num11, num12 + 3].active())
						{
							flag2 = true;
						}
						num12++;
					}
				}
			}
			Liquid.QuickWater(-2, -1, -1);
			for (int num13 = 0; num13 < Main.maxTilesX; num13++)
			{
				for (int num14 = 0; num14 < Main.maxTilesY; num14++)
				{
					if (*Main.tile[num13, num14].type == 518)
					{
						WorldGen.CheckLilyPad(num13, num14);
					}
				}
			}
		}

		// Token: 0x060011AD RID: 4525 RVA: 0x0041E7F9 File Offset: 0x0041C9F9
		public unsafe static bool IsItATrap(Tile tile)
		{
			return tile.actuator() || (tile.active() && TileID.Sets.IsAMechanism[(int)(*tile.type)]);
		}

		// Token: 0x060011AE RID: 4526 RVA: 0x0041E824 File Offset: 0x0041CA24
		public unsafe static bool IsItATrigger(Tile tile)
		{
			if (tile.active())
			{
				if (TileID.Sets.IsATrigger[(int)(*tile.type)])
				{
					return true;
				}
				if (*tile.type == 467 && *tile.frameX / 36 == 4)
				{
					return true;
				}
				if (*tile.type == 314 && Minecart.IsPressurePlate(tile))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060011AF RID: 4527 RVA: 0x0041E888 File Offset: 0x0041CA88
		public static void ClearAllBrokenTraps()
		{
			List<Point> list = new List<Point>();
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = 50; j < Main.maxTilesY - 50; j++)
				{
					if (Main.tile[i, j].wire() && !list.Contains(new Point(i, j)))
					{
						WorldGen.ClearBrokenTraps(new Point(i, j), list);
					}
				}
			}
		}

		// Token: 0x060011B0 RID: 4528 RVA: 0x0041E8F8 File Offset: 0x0041CAF8
		public unsafe static void ClearBrokenTraps(Point startTileCoords, List<Point> pointsWeAlreadyWentOver)
		{
			List<Point> t = new List<Point>();
			List<Point> t2 = new List<Point>();
			List<Point> list = new List<Point>();
			bool flag = false;
			bool flag2 = false;
			t2.Add(startTileCoords);
			while (t2.Count > 0)
			{
				Utils.Swap<List<Point>>(ref t, ref t2);
				while (t.Count > 0)
				{
					Point item = t[0];
					t.RemoveAt(0);
					if (WorldGen.InWorld(item.X, item.Y, 5))
					{
						Tile tile = Main.tile[item.X, item.Y];
						if (tile.wire())
						{
							pointsWeAlreadyWentOver.Add(item);
							list.Add(item);
							if (WorldGen.IsItATrap(tile))
							{
								flag = true;
							}
							if (WorldGen.IsItATrigger(tile))
							{
								flag2 = true;
							}
							if (flag2 && flag)
							{
								break;
							}
							Point item2;
							item2..ctor(item.X - 1, item.Y);
							if (!list.Contains(item2))
							{
								t2.Add(item2);
							}
							item2..ctor(item.X + 1, item.Y);
							if (!list.Contains(item2))
							{
								t2.Add(item2);
							}
							item2..ctor(item.X, item.Y - 1);
							if (!list.Contains(item2))
							{
								t2.Add(item2);
							}
							item2..ctor(item.X, item.Y + 1);
							if (!list.Contains(item2))
							{
								t2.Add(item2);
							}
						}
					}
				}
				if (flag2 && flag)
				{
					break;
				}
			}
			if (flag2 && flag)
			{
				return;
			}
			foreach (Point item3 in list)
			{
				Tile tile2 = Main.tile[item3.X, item3.Y];
				tile2.wire(false);
				if (WorldGen.IsItATrap(tile2))
				{
					if (tile2.actuator())
					{
						Main.tile[item3.X, item3.Y].actuator(false);
					}
					else if (*tile2.type != 105)
					{
						WorldGen.KillTile(item3.X, item3.Y, false, false, false);
					}
				}
				else if (WorldGen.IsItATrigger(tile2))
				{
					if (*tile2.type == 314)
					{
						*tile2.frameX = 1;
					}
					else
					{
						WorldGen.KillTile(item3.X, item3.Y, false, false, false);
					}
				}
			}
		}

		// Token: 0x060011B1 RID: 4529 RVA: 0x0041EB78 File Offset: 0x0041CD78
		private static double TuneOceanDepth(int count, double depth, bool floridaStyle = false)
		{
			if (!floridaStyle)
			{
				if (count < 3)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.2;
				}
				else if (count < 6)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.15;
				}
				else if (count < 9)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.1;
				}
				else if (count < 15)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.07;
				}
				else if (count < 50)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 75)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.04;
				}
				else if (count < 100)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.03;
				}
				else if (count < 125)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.02;
				}
				else if (count < 150)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
				else if (count < 175)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.005;
				}
				else if (count < 200)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.001;
				}
				else if (count < 230)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
				else if (count < 235)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 240)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.1;
				}
				else if (count < 245)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.05;
				}
				else if (count < 255)
				{
					depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
				}
			}
			else if (count < 3)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.001;
			}
			else if (count < 6)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.002;
			}
			else if (count < 9)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.004;
			}
			else if (count < 15)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.007;
			}
			else if (count < 50)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.01;
			}
			else if (count < 75)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.014;
			}
			else if (count < 100)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.019;
			}
			else if (count < 125)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.027;
			}
			else if (count < 150)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.038;
			}
			else if (count < 175)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.052;
			}
			else if (count < 200)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.08;
			}
			else if (count < 230)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.12;
			}
			else if (count < 235)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.16;
			}
			else if (count < 240)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.27;
			}
			else if (count < 245)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.43;
			}
			else if (count < 255)
			{
				depth += (double)WorldGen.genRand.Next(10, 20) * 0.6;
			}
			return depth;
		}

		// Token: 0x060011B2 RID: 4530 RVA: 0x0041F08D File Offset: 0x0041D28D
		public static void QueuePostGenAction(Action<StructureMap> action)
		{
			WorldGen._postGenActions.Enqueue(action);
		}

		// Token: 0x060011B3 RID: 4531 RVA: 0x0041F09A File Offset: 0x0041D29A
		public static void ConsumePostGenActions(StructureMap structures)
		{
			while (WorldGen._postGenActions.Count > 0)
			{
				WorldGen._postGenActions.Dequeue()(structures);
			}
		}

		// Token: 0x060011B4 RID: 4532 RVA: 0x0041F0BC File Offset: 0x0041D2BC
		public static Point RandomRectanglePoint(Rectangle rectangle)
		{
			return new Point(WorldGen.genRand.Next(rectangle.X, rectangle.X + rectangle.Width), WorldGen.genRand.Next(rectangle.Y, rectangle.Y + rectangle.Height));
		}

		// Token: 0x060011B5 RID: 4533 RVA: 0x0041F108 File Offset: 0x0041D308
		public static Point RandomRectanglePoint(int x, int y, int width, int height)
		{
			return new Point(WorldGen.genRand.Next(x, x + width), WorldGen.genRand.Next(y, y + height));
		}

		// Token: 0x060011B6 RID: 4534 RVA: 0x0041F12B File Offset: 0x0041D32B
		public static Point RandomWorldPoint(int padding)
		{
			return WorldGen.RandomWorldPoint(padding, padding, padding, padding);
		}

		/// <summary>
		/// Generates a random tile coordinate within the world bounds. The optional parameters define additional padding, avoiding the edges or defining a target area.
		/// <para /> <c>Point point = WorldGen.RandomWorldPoint((int)Main.worldSurface, 40, 500, 60)</c> is equivalent to <code>int x = WorldGen.genRand.Next(60, Main.maxTilesX - 40);
		/// int y = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 500);
		/// </code>
		/// </summary>
		/// <param name="top"></param>
		/// <param name="right"></param>
		/// <param name="bottom"></param>
		/// <param name="left"></param>
		/// <returns></returns>
		// Token: 0x060011B7 RID: 4535 RVA: 0x0041F136 File Offset: 0x0041D336
		public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)
		{
			return new Point(WorldGen.genRand.Next(left, Main.maxTilesX - right), WorldGen.genRand.Next(top, Main.maxTilesY - bottom));
		}

		// Token: 0x060011B8 RID: 4536 RVA: 0x0041F164 File Offset: 0x0041D364
		public unsafe static bool GrowPalmTree(int i, int y)
		{
			int num = y;
			if (!WorldGen.InWorld(i, y, 0))
			{
				return false;
			}
			while (TileID.Sets.TreeSapling[(int)(*Main.tile[i, num].type)])
			{
				num++;
				if (Main.tile[i, num] == null)
				{
					return false;
				}
			}
			Tile tile = Main.tile[i, num];
			Tile tile2 = Main.tile[i, num - 1];
			byte color = 0;
			if (Main.tenthAnniversaryWorld && !WorldGen.gen)
			{
				color = (byte)WorldGen.genRand.Next(1, 13);
			}
			tile.slope();
			tile.halfBrick();
			if (!tile.active() || tile.halfBrick() || tile.slope() != 0)
			{
				return false;
			}
			if (*tile2.wall != 0 || *tile2.liquid != 0)
			{
				return false;
			}
			bool vanillaCanGrow = true;
			if (*tile.type != 53 && *tile.type != 234 && *tile.type != 116 && *tile.type != 112)
			{
				vanillaCanGrow = false;
			}
			if (!vanillaCanGrow && !TileLoader.CanGrowModPalmTree((int)(*tile.type)))
			{
				return false;
			}
			if (!WorldGen.EmptyTileCheck(i, i, num - 2, num - 1, 20))
			{
				return false;
			}
			if (!WorldGen.EmptyTileCheck(i - 1, i + 1, num - 30, num - 3, 20))
			{
				return false;
			}
			int num2 = WorldGen.genRand.Next(10, 21);
			int num3 = WorldGen.genRand.Next(-8, 9);
			num3 *= 2;
			short num4 = 0;
			for (int j = 0; j < num2; j++)
			{
				tile = Main.tile[i, num - 1 - j];
				if (j == 0)
				{
					tile.active(true);
					*tile.type = 323;
					*tile.frameX = 66;
					*tile.frameY = 0;
					tile.color(color);
				}
				else if (j == num2 - 1)
				{
					tile.active(true);
					*tile.type = 323;
					*tile.frameX = (short)(22 * WorldGen.genRand.Next(4, 7));
					*tile.frameY = num4;
					tile.color(color);
				}
				else
				{
					if ((int)num4 != num3)
					{
						double num5 = (double)j / (double)num2;
						if (num5 >= 0.25)
						{
							if ((num5 >= 0.5 || WorldGen.genRand.Next(13) != 0) && (num5 >= 0.7 || WorldGen.genRand.Next(9) != 0) && num5 < 0.95)
							{
								WorldGen.genRand.Next(5);
							}
							short num6 = (short)Math.Sign(num3);
							num4 += num6 * 2;
						}
					}
					tile.active(true);
					*tile.type = 323;
					*tile.frameX = (short)(22 * WorldGen.genRand.Next(0, 3));
					*tile.frameY = num4;
					tile.color(color);
				}
			}
			WorldGen.RangeFrame(i - 2, num - num2 - 1, i + 2, num + 1);
			NetMessage.SendTileSquare(-1, i, num - num2, 1, num2, TileChangeType.None);
			return true;
		}

		// Token: 0x060011B9 RID: 4537 RVA: 0x0041F46A File Offset: 0x0041D66A
		public static bool IsPalmOasisTree(int x)
		{
			return x >= WorldGen.beachDistance && x <= Main.maxTilesX - WorldGen.beachDistance;
		}

		// Token: 0x060011BA RID: 4538 RVA: 0x0041F488 File Offset: 0x0041D688
		public unsafe static bool GrowEpicTree(int i, int y)
		{
			int j = y;
			while (TileID.Sets.TreeSapling[(int)(*Main.tile[i, j].type)])
			{
				j++;
			}
			if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && *Main.tile[i, j].type == 2 && *Main.tile[i, j - 1].wall == 0 && *Main.tile[i, j - 1].liquid == 0 && ((Main.tile[i - 1, j].active() && (*Main.tile[i - 1, j].type == 2 || *Main.tile[i - 1, j].type == 23 || *Main.tile[i - 1, j].type == 60 || *Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree((int)(*Main.tile[i - 1, j].type)))) || (Main.tile[i + 1, j].active() && (*Main.tile[i + 1, j].type == 2 || *Main.tile[i + 1, j].type == 23 || *Main.tile[i + 1, j].type == 60 || *Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree((int)(*Main.tile[i + 1, j].type))))))
			{
				int num = 2;
				if (WorldGen.EmptyTileCheck(i - num, i + num, j - 55, j - 1, 20))
				{
					bool flag = false;
					bool flag2 = false;
					int num2 = WorldGen.genRand.Next(20, 30);
					if (WorldGen.drunkWorldGen)
					{
						num2 = WorldGen.genRand.Next(3, 7);
					}
					int num3;
					for (int k = j - num2; k < j; k++)
					{
						Main.tile[i, k].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, k].active(true);
						*Main.tile[i, k].type = 5;
						num3 = WorldGen.genRand.Next(3);
						int num4 = WorldGen.genRand.Next(10);
						if (k == j - 1 || k == j - num2)
						{
							num4 = 0;
						}
						while (((num4 == 5 || num4 == 7) && flag) || ((num4 == 6 || num4 == 7) && flag2))
						{
							num4 = WorldGen.genRand.Next(10);
						}
						flag = false;
						flag2 = false;
						if (num4 == 5 || num4 == 7)
						{
							flag = true;
						}
						if (num4 == 6 || num4 == 7)
						{
							flag2 = true;
						}
						switch (num4)
						{
						case 1:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 66;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 88;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 2:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 0;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 22;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						case 3:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 66;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 88;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 4:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 66;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 88;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 5:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 0;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 22;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						case 6:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 66;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 88;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 7:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 66;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 88;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						default:
							if (num3 == 0)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 0;
							}
							if (num3 == 1)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 22;
							}
							if (num3 == 2)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						}
						if (num4 == 5 || num4 == 7)
						{
							Main.tile[i - 1, k].active(true);
							*Main.tile[i - 1, k].type = 5;
							num3 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num3 == 0)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 198;
								}
								if (num3 == 1)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 220;
								}
								if (num3 == 2)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 242;
								}
							}
							else
							{
								if (num3 == 0)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 0;
								}
								if (num3 == 1)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 22;
								}
								if (num3 == 2)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 44;
								}
							}
						}
						if (num4 == 6 || num4 == 7)
						{
							Main.tile[i + 1, k].active(true);
							*Main.tile[i + 1, k].type = 5;
							num3 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2)
							{
								if (num3 == 0)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 198;
								}
								if (num3 == 1)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 220;
								}
								if (num3 == 2)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 242;
								}
							}
							else
							{
								if (num3 == 0)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 66;
								}
								if (num3 == 1)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 88;
								}
								if (num3 == 2)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 110;
								}
							}
						}
					}
					int num5 = WorldGen.genRand.Next(3);
					bool flag3 = false;
					bool flag4 = false;
					if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (*Main.tile[i - 1, j].type == 2 || *Main.tile[i - 1, j].type == 23 || *Main.tile[i - 1, j].type == 60 || *Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree((int)(*Main.tile[i - 1, j].type))))
					{
						flag3 = true;
					}
					if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (*Main.tile[i + 1, j].type == 2 || *Main.tile[i + 1, j].type == 23 || *Main.tile[i + 1, j].type == 60 || *Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree((int)(*Main.tile[i + 1, j].type))))
					{
						flag4 = true;
					}
					if (!flag3)
					{
						if (num5 == 0)
						{
							num5 = 2;
						}
						if (num5 == 1)
						{
							num5 = 3;
						}
					}
					if (!flag4)
					{
						if (num5 == 0)
						{
							num5 = 1;
						}
						if (num5 == 2)
						{
							num5 = 3;
						}
					}
					if (flag3 && !flag4)
					{
						num5 = 2;
					}
					if (flag4 && !flag3)
					{
						num5 = 1;
					}
					if (num5 == 0 || num5 == 1)
					{
						Main.tile[i + 1, j - 1].active(true);
						*Main.tile[i + 1, j - 1].type = 5;
						num3 = WorldGen.genRand.Next(3);
						if (num3 == 0)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 132;
						}
						if (num3 == 1)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 154;
						}
						if (num3 == 2)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 176;
						}
					}
					if (num5 == 0 || num5 == 2)
					{
						Main.tile[i - 1, j - 1].active(true);
						*Main.tile[i - 1, j - 1].type = 5;
						num3 = WorldGen.genRand.Next(3);
						if (num3 == 0)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 132;
						}
						if (num3 == 1)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 154;
						}
						if (num3 == 2)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 176;
						}
					}
					num3 = WorldGen.genRand.Next(3);
					switch (num5)
					{
					case 0:
						if (num3 == 0)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num3 == 1)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num3 == 2)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					case 1:
						if (num3 == 0)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num3 == 1)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num3 == 2)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					case 2:
						if (num3 == 0)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num3 == 1)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num3 == 2)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					}
					if (WorldGen.genRand.Next(13) != 0)
					{
						num3 = WorldGen.genRand.Next(3);
						if (num3 == 0)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 198;
						}
						if (num3 == 1)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 220;
						}
						if (num3 == 2)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 242;
						}
					}
					else
					{
						num3 = WorldGen.genRand.Next(3);
						if (num3 == 0)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 198;
						}
						if (num3 == 1)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 220;
						}
						if (num3 == 2)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 242;
						}
					}
					WorldGen.RangeFrame(i - 2, j - num2 - 1, i + 2, j + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, (int)((double)j - (double)num2 * 0.5), num2 + 1, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x060011BB RID: 4539 RVA: 0x004208C4 File Offset: 0x0041EAC4
		public unsafe static bool Pyramid(int i, int j)
		{
			ushort num = 151;
			if (*Main.tile[i, j].type == 151 || *Main.tile[i, j].wall == 151)
			{
				return false;
			}
			int num35 = j - WorldGen.genRand.Next(0, 7);
			int num2 = WorldGen.genRand.Next(9, 13);
			int num3 = 1;
			int num4 = j + WorldGen.genRand.Next(75, 125);
			for (int k = num35; k < num4; k++)
			{
				for (int l = i - num3; l < i + num3 - 1; l++)
				{
					*Main.tile[l, k].type = num;
					Main.tile[l, k].active(true);
					Main.tile[l, k].halfBrick(false);
					Main.tile[l, k].slope(0);
				}
				num3++;
			}
			for (int m = i - num3 - 5; m <= i + num3 + 5; m++)
			{
				for (int n = j - 1; n <= num4 + 1; n++)
				{
					bool flag = true;
					for (int num5 = m - 1; num5 <= m + 1; num5++)
					{
						for (int num6 = n - 1; num6 <= n + 1; num6++)
						{
							if (*Main.tile[num5, num6].type != num)
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						*Main.tile[m, n].wall = 34;
						WorldGen.SquareWallFrame(m, n, true);
					}
				}
			}
			int num7 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num7 = -1;
			}
			int num8 = i - num2 * num7;
			int num9 = j + num2;
			int num10 = WorldGen.genRand.Next(5, 8);
			bool flag2 = true;
			int num11 = WorldGen.genRand.Next(20, 30);
			while (flag2)
			{
				flag2 = false;
				bool flag3 = false;
				for (int num12 = num9; num12 <= num9 + num10; num12++)
				{
					int num13 = num8;
					if (*Main.tile[num13, num12 - 1].type == 53)
					{
						flag3 = true;
					}
					if (*Main.tile[num13, num12].type == num)
					{
						*Main.tile[num13, num12 + 1].wall = 34;
						*Main.tile[num13 + num7, num12].wall = 34;
						Main.tile[num13, num12].active(false);
						flag2 = true;
					}
					if (flag3)
					{
						*Main.tile[num13, num12].type = 53;
						Main.tile[num13, num12].active(true);
						Main.tile[num13, num12].halfBrick(false);
						Main.tile[num13, num12].slope(0);
					}
				}
				num8 -= num7;
			}
			num8 = i - num2 * num7;
			bool flag4 = true;
			bool flag5 = false;
			flag2 = true;
			while (flag2)
			{
				for (int num14 = num9; num14 <= num9 + num10; num14++)
				{
					int num15 = num8;
					Main.tile[num15, num14].active(false);
				}
				num8 += num7;
				num9++;
				num11--;
				if (num9 >= num4 - num10 * 2)
				{
					num11 = 10;
				}
				if (num11 <= 0)
				{
					bool flag6 = false;
					if (!flag4 && !flag5)
					{
						flag5 = true;
						flag6 = true;
						int num16 = WorldGen.genRand.Next(7, 13);
						int num17 = WorldGen.genRand.Next(23, 28);
						int num18 = num17;
						int num19 = num8;
						while (num17 > 0)
						{
							for (int num20 = num9 - num16 + num10; num20 <= num9 + num10; num20++)
							{
								if (num17 == num18 || num17 == 1)
								{
									if (num20 >= num9 - num16 + num10 + 2)
									{
										Main.tile[num8, num20].active(false);
									}
								}
								else if (num17 == num18 - 1 || num17 == 2 || num17 == num18 - 2 || num17 == 3)
								{
									if (num20 >= num9 - num16 + num10 + 1)
									{
										Main.tile[num8, num20].active(false);
									}
								}
								else
								{
									Main.tile[num8, num20].active(false);
								}
							}
							num17--;
							num8 += num7;
						}
						int num21 = num8 - num7;
						int num22 = num21;
						int num23 = num19;
						if (num21 > num19)
						{
							num22 = num19;
							num23 = num21;
						}
						int num24 = WorldGen.genRand.Next(3);
						if (num24 == 0)
						{
							num24 = WorldGen.genRand.Next(3);
						}
						if (Main.tenthAnniversaryWorld && num24 == 0)
						{
							num24 = 1;
						}
						switch (num24)
						{
						case 0:
							num24 = 848;
							break;
						case 1:
							num24 = 857;
							break;
						case 2:
							num24 = 934;
							break;
						}
						WorldGen.AddBuriedChest((num22 + num23) / 2, num9, num24, false, 1, false, 0);
						int num25 = WorldGen.genRand.Next(1, 10);
						for (int num26 = 0; num26 < num25; num26++)
						{
							int i2 = WorldGen.genRand.Next(num22, num23);
							int j2 = num9 + num10;
							WorldGen.PlaceSmallPile(i2, j2, WorldGen.genRand.Next(16, 19), 1, 185);
						}
						WorldGen.PlaceTile(num22 + 2, num9 - num16 + num10 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num22 + 3, num9 - num16 + num10, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num23 - 2, num9 - num16 + num10 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						WorldGen.PlaceTile(num23 - 3, num9 - num16 + num10, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
						for (int num27 = num22; num27 <= num23; num27++)
						{
							WorldGen.PlacePot(num27, num9 + num10, 28, WorldGen.genRand.Next(25, 28));
						}
					}
					if (flag4)
					{
						flag4 = false;
						num7 *= -1;
						num11 = WorldGen.genRand.Next(15, 20);
					}
					else if (flag6)
					{
						num11 = WorldGen.genRand.Next(10, 15);
					}
					else
					{
						num7 *= -1;
						num11 = WorldGen.genRand.Next(20, 40);
					}
				}
				if (num9 >= num4 - num10)
				{
					flag2 = false;
				}
			}
			int num28 = WorldGen.genRand.Next(100, 200);
			int num29 = WorldGen.genRand.Next(500, 800);
			flag2 = true;
			int num30 = num10;
			num11 = WorldGen.genRand.Next(10, 50);
			if (num7 == 1)
			{
				num8 -= num30;
			}
			int num31 = WorldGen.genRand.Next(5, 10);
			while (flag2)
			{
				num28--;
				num29--;
				num11--;
				for (int num32 = num8 - num31 - WorldGen.genRand.Next(0, 2); num32 <= num8 + num30 + num31 + WorldGen.genRand.Next(0, 2); num32++)
				{
					int num33 = num9;
					if (num32 >= num8 && num32 <= num8 + num30)
					{
						Main.tile[num32, num33].active(false);
					}
					else
					{
						*Main.tile[num32, num33].type = num;
						Main.tile[num32, num33].active(true);
						Main.tile[num32, num33].halfBrick(false);
						Main.tile[num32, num33].slope(0);
					}
					if (num32 >= num8 - 1 && num32 <= num8 + 1 + num30)
					{
						*Main.tile[num32, num33].wall = 34;
					}
				}
				num9++;
				num8 += num7;
				if (num28 <= 0)
				{
					flag2 = false;
					for (int num34 = num8 + 1; num34 <= num8 + num30 - 1; num34++)
					{
						if (Main.tile[num34, num9].active())
						{
							flag2 = true;
						}
					}
				}
				if (num11 < 0)
				{
					num11 = WorldGen.genRand.Next(10, 50);
					num7 *= -1;
				}
				if (num29 <= 0)
				{
					flag2 = false;
				}
			}
			return true;
		}

		// Token: 0x060011BC RID: 4540 RVA: 0x00421138 File Offset: 0x0041F338
		public unsafe static bool GrowLivingTree(int i, int j, bool patch = false)
		{
			int num = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int[] array3 = new int[1000];
			int[] array4 = new int[1000];
			int num2 = 0;
			int[] array5 = new int[2000];
			int[] array6 = new int[2000];
			bool[] array7 = new bool[2000];
			if (!WorldGen.SolidTile(i, j + 1, false))
			{
				return false;
			}
			if (Main.tile[i, j].active())
			{
				return false;
			}
			if (*Main.tile[i, j + 1].type != 0 && *Main.tile[i, j + 1].type != 2 && *Main.tile[i, j + 1].type != 1 && *Main.tile[i, j + 1].type != 40 && !TileID.Sets.Ore[(int)(*Main.tile[i, j + 1].type)] && (!WorldGen.remixWorldGen || !WorldGen.notTheBees || (*Main.tile[i, j + 1].type != 60 && *Main.tile[i, j + 1].type != 59)))
			{
				return false;
			}
			if (j < 150)
			{
				return false;
			}
			int num3 = i - WorldGen.genRand.Next(2, 3);
			int num4 = i + WorldGen.genRand.Next(2, 3);
			if (WorldGen.genRand.Next(5) == 0)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num3--;
				}
				else
				{
					num4++;
				}
			}
			int num5 = num4 - num3;
			bool flag = num5 >= 4;
			int num6 = i - 50;
			int num7 = i + 50;
			if (patch)
			{
				num6 = i - 20;
				num7 = i + 20;
				num3 = i - WorldGen.genRand.Next(1, 3);
				num4 = i + WorldGen.genRand.Next(1, 3);
				flag = (num5 >= 4);
			}
			for (int k = num6; k <= num7; k++)
			{
				for (int l = 5; l < j - 5; l++)
				{
					if (Main.tile[k, l].active())
					{
						if (!patch)
						{
							return false;
						}
						int type = (int)(*Main.tile[k, l].type);
						if (type != 2 && type != 0 && type != 1 && type != 191 && type != 192)
						{
							return false;
						}
					}
				}
			}
			int num8 = num3;
			int num9 = num4;
			int minl = num3;
			int minr = num4;
			bool flag2 = true;
			int num10 = WorldGen.genRand.Next(-8, -4);
			int num11 = WorldGen.genRand.Next(2);
			int num12 = j;
			int num13 = WorldGen.genRand.Next(5, 15);
			Main.tileSolid[48] = false;
			while (flag2)
			{
				num10++;
				if (num10 > num13)
				{
					num13 = WorldGen.genRand.Next(5, 15);
					num10 = 0;
					array2[num] = num12 + WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(5) == 0)
					{
						num11 = ((num11 == 0) ? 1 : 0);
					}
					if (num11 == 0)
					{
						array3[num] = -1;
						array[num] = num3;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num3++;
						}
						num8++;
						num11 = 1;
					}
					else
					{
						array3[num] = 1;
						array[num] = num4;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num4--;
						}
						num9--;
						num11 = 0;
					}
					if (num8 == num9)
					{
						flag2 = false;
					}
					num++;
				}
				for (int m = num3; m <= num4; m++)
				{
					*Main.tile[m, num12].type = 191;
					Main.tile[m, num12].active(true);
					Main.tile[m, num12].halfBrick(false);
				}
				num12--;
			}
			for (int n = 0; n < num - 1; n++)
			{
				int num14 = array[n] + array3[n];
				int num15 = array2[n];
				int num16 = (int)((double)array4[n] * (1.0 + (double)WorldGen.genRand.Next(20, 30) * 0.1));
				*Main.tile[num14, num15 + 1].type = 191;
				Main.tile[num14, num15 + 1].active(true);
				Main.tile[num14, num15 + 1].halfBrick(false);
				int num17 = WorldGen.genRand.Next(3, 5);
				while (num16 > 0)
				{
					num16--;
					*Main.tile[num14, num15].type = 191;
					Main.tile[num14, num15].active(true);
					Main.tile[num14, num15].halfBrick(false);
					if (WorldGen.genRand.Next(10) == 0)
					{
						num15 = ((WorldGen.genRand.Next(2) != 0) ? (num15 + 1) : (num15 - 1));
					}
					else
					{
						num14 += array3[n];
					}
					if (num17 > 0)
					{
						num17--;
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						num17 = WorldGen.genRand.Next(2, 5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							*Main.tile[num14, num15].type = 191;
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].halfBrick(false);
							*Main.tile[num14, num15 - 1].type = 191;
							Main.tile[num14, num15 - 1].active(true);
							Main.tile[num14, num15 - 1].halfBrick(false);
							array5[num2] = num14;
							array6[num2] = num15;
							num2++;
						}
						else
						{
							*Main.tile[num14, num15].type = 191;
							Main.tile[num14, num15].active(true);
							Main.tile[num14, num15].halfBrick(false);
							*Main.tile[num14, num15 + 1].type = 191;
							Main.tile[num14, num15 + 1].active(true);
							Main.tile[num14, num15 + 1].halfBrick(false);
							array5[num2] = num14;
							array6[num2] = num15;
							num2++;
						}
					}
					if (num16 == 0)
					{
						array5[num2] = num14;
						array6[num2] = num15;
						num2++;
					}
				}
			}
			int num18 = (num3 + num4) / 2;
			int num19 = num12;
			int num20 = WorldGen.genRand.Next(num5 * 3, num5 * 5);
			int num21 = 0;
			int num22 = 0;
			while (num20 > 0)
			{
				*Main.tile[num18, num19].type = 191;
				Main.tile[num18, num19].active(true);
				Main.tile[num18, num19].halfBrick(false);
				if (num21 > 0)
				{
					num21--;
				}
				if (num22 > 0)
				{
					num22--;
				}
				for (int num23 = -1; num23 < 2; num23++)
				{
					if (num23 != 0 && ((num23 < 0 && num21 == 0) || (num23 > 0 && num22 == 0)) && WorldGen.genRand.Next(2) == 0)
					{
						int num24 = num18;
						int num25 = num19;
						int num26 = WorldGen.genRand.Next(num5, num5 * 3);
						if (num23 < 0)
						{
							num21 = WorldGen.genRand.Next(3, 5);
						}
						if (num23 > 0)
						{
							num22 = WorldGen.genRand.Next(3, 5);
						}
						int num27 = 0;
						while (num26 > 0)
						{
							num26--;
							num24 += num23;
							*Main.tile[num24, num25].type = 191;
							Main.tile[num24, num25].active(true);
							Main.tile[num24, num25].halfBrick(false);
							if (num26 == 0)
							{
								array5[num2] = num24;
								array6[num2] = num25;
								array7[num2] = true;
								num2++;
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								num25 = ((WorldGen.genRand.Next(2) != 0) ? (num25 + 1) : (num25 - 1));
								*Main.tile[num24, num25].type = 191;
								Main.tile[num24, num25].active(true);
								Main.tile[num24, num25].halfBrick(false);
							}
							if (num27 > 0)
							{
								num27--;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								num27 = WorldGen.genRand.Next(2, 4);
								int num28 = num24;
								int num29 = num25;
								num29 = ((WorldGen.genRand.Next(2) != 0) ? (num29 + 1) : (num29 - 1));
								*Main.tile[num28, num29].type = 191;
								Main.tile[num28, num29].active(true);
								Main.tile[num28, num29].halfBrick(false);
								array5[num2] = num28;
								array6[num2] = num29;
								array7[num2] = true;
								num2++;
								array5[num2] = num28 + WorldGen.genRand.Next(-5, 6);
								array6[num2] = num29 + WorldGen.genRand.Next(-5, 6);
								array7[num2] = true;
								num2++;
							}
						}
					}
				}
				array5[num2] = num18;
				array6[num2] = num19;
				num2++;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num18 = ((WorldGen.genRand.Next(2) != 0) ? (num18 + 1) : (num18 - 1));
					*Main.tile[num18, num19].type = 191;
					Main.tile[num18, num19].active(true);
					Main.tile[num18, num19].halfBrick(false);
				}
				num19--;
				num20--;
			}
			for (int num30 = minl; num30 <= minr; num30++)
			{
				int num31 = WorldGen.genRand.Next(1, 6);
				int num32 = j + 1;
				while (num31 > 0)
				{
					if (WorldGen.SolidTile(num30, num32, false))
					{
						num31--;
					}
					*Main.tile[num30, num32].type = 191;
					Main.tile[num30, num32].active(true);
					Main.tile[num30, num32].halfBrick(false);
					num32++;
				}
				int num33 = num32;
				int num34 = WorldGen.genRand.Next(2, num5 + 1);
				for (int num35 = 0; num35 < num34; num35++)
				{
					num32 = num33;
					int num36 = (minl + minr) / 2;
					int num37 = 1;
					int num38 = (num30 >= num36) ? 1 : -1;
					if (num30 == num36 || (num5 > 6 && (num30 == num36 - 1 || num30 == num36 + 1)))
					{
						num38 = 0;
					}
					int num39 = num38;
					int num40 = num30;
					num31 = WorldGen.genRand.Next((int)((double)num5 * 3.5), num5 * 6);
					while (num31 > 0)
					{
						num31--;
						num40 += num38;
						if (*Main.tile[num40, num32].wall != 244)
						{
							*Main.tile[num40, num32].type = 191;
							Main.tile[num40, num32].active(true);
							Main.tile[num40, num32].halfBrick(false);
						}
						num32 += num37;
						if (*Main.tile[num40, num32].wall != 244)
						{
							*Main.tile[num40, num32].type = 191;
							Main.tile[num40, num32].active(true);
							Main.tile[num40, num32].halfBrick(false);
						}
						if (!Main.tile[num40, num32 + 1].active())
						{
							num38 = 0;
							num37 = 1;
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							num38 = ((num39 < 0) ? ((num38 == 0) ? -1 : 0) : ((num39 <= 0) ? WorldGen.genRand.Next(-1, 2) : ((num38 == 0) ? 1 : 0)));
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							num37 = ((num37 == 0) ? 1 : 0);
						}
					}
				}
			}
			if (WorldGen.remixWorldGen)
			{
				num2 = 0;
			}
			for (int num41 = 0; num41 < num2; num41++)
			{
				int num42 = WorldGen.genRand.Next(5, 8);
				num42 = (int)((double)num42 * (1.0 + (double)num5 * 0.05));
				if (array7[num41])
				{
					num42 = WorldGen.genRand.Next(6, 12) + num5;
				}
				int num43 = array5[num41] - num42 * 2;
				int num44 = array5[num41] + num42 * 2;
				int num45 = array6[num41] - num42 * 2;
				int num46 = array6[num41] + num42 * 2;
				double num47 = 2.0 - (double)WorldGen.genRand.Next(5) * 0.1;
				for (int num48 = num43; num48 <= num44; num48++)
				{
					for (int num49 = num45; num49 <= num46; num49++)
					{
						if (*Main.tile[num48, num49].type != 191)
						{
							if (array7[num41])
							{
								if ((new Vector2D((double)array5[num41], (double)array6[num41]) - new Vector2D((double)num48, (double)num49)).Length() < (double)num42 * 0.9)
								{
									*Main.tile[num48, num49].type = 192;
									Main.tile[num48, num49].active(true);
									Main.tile[num48, num49].halfBrick(false);
								}
							}
							else if ((double)Math.Abs(array5[num41] - num48) + (double)Math.Abs(array6[num41] - num49) * num47 < (double)num42)
							{
								*Main.tile[num48, num49].type = 192;
								Main.tile[num48, num49].active(true);
								Main.tile[num48, num49].halfBrick(false);
							}
						}
					}
					if (WorldGen.genRand.Next(30) == 0)
					{
						int num50 = num45;
						if (!Main.tile[num48, num50].active())
						{
							while (!Main.tile[num48, num50 + 1].active() && num50 < num46)
							{
								num50++;
							}
							if (*Main.tile[num48, num50 + 1].type == 192)
							{
								WorldGen.PlaceTile(num48, num50, 187, true, false, -1, WorldGen.genRand.Next(50, 52));
							}
						}
					}
					if (!array7[num41] && WorldGen.genRand.Next(15) == 0)
					{
						int num51 = num46;
						int num52 = num51 + 100;
						if (!Main.tile[num48, num51].active())
						{
							while (!Main.tile[num48, num51 + 1].active() && num51 < num52)
							{
								num51++;
							}
							if (*Main.tile[num48, num51 + 1].type != 192)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceTile(num48, num51, 187, true, false, -1, WorldGen.genRand.Next(47, 50));
								}
								else
								{
									int num53 = WorldGen.genRand.Next(2);
									int x = 72;
									if (num53 == 1)
									{
										x = WorldGen.genRand.Next(59, 62);
									}
									WorldGen.PlaceSmallPile(num48, num51, x, num53, 185);
								}
							}
						}
					}
				}
			}
			if (flag)
			{
				bool flag3 = false;
				int num54 = j;
				while (num54 < j + 20 && (double)num54 < Main.worldSurface - 2.0)
				{
					for (int num55 = minl; num55 <= minr; num55++)
					{
						if (*Main.tile[num55, num54].wall == 0 && !WorldGen.SolidTile(num55, num54, false))
						{
							flag3 = true;
						}
					}
					num54++;
				}
				if (!flag3)
				{
					WorldGen.GrowLivingTree_MakePassage(j, num5, ref minl, ref minr, patch);
				}
			}
			Main.tileSolid[48] = true;
			return true;
		}

		// Token: 0x060011BD RID: 4541 RVA: 0x00422284 File Offset: 0x00420484
		public unsafe static bool GrowDungeonTree(int i, int j, bool patch = false)
		{
			int num = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int[] array3 = new int[1000];
			int[] array4 = new int[1000];
			int num2 = 0;
			int[] array5 = new int[2000];
			int[] array6 = new int[2000];
			bool[] array7 = new bool[2000];
			int num3 = i - WorldGen.genRand.Next(2, 3);
			int num4 = i + WorldGen.genRand.Next(2, 3);
			if (WorldGen.genRand.Next(5) == 0)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					num3--;
				}
				else
				{
					num4++;
				}
			}
			int num5 = num4 - num3;
			int num6 = num3;
			int num7 = num4;
			int minl = num3;
			int minr = num4;
			bool flag = true;
			int num8 = WorldGen.genRand.Next(-8, -4);
			int num9 = WorldGen.genRand.Next(2);
			int num10 = j;
			int num11 = WorldGen.genRand.Next(5, 15);
			Main.tileSolid[48] = false;
			while (flag)
			{
				num8++;
				if (num8 > num11)
				{
					num11 = WorldGen.genRand.Next(5, 15);
					num8 = 0;
					array2[num] = num10 + WorldGen.genRand.Next(5);
					if (WorldGen.genRand.Next(5) == 0)
					{
						num9 = ((num9 == 0) ? 1 : 0);
					}
					if (num9 == 0)
					{
						array3[num] = -1;
						array[num] = num3;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num3++;
						}
						num6++;
						num9 = 1;
					}
					else
					{
						array3[num] = 1;
						array[num] = num4;
						array4[num] = num4 - num3;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num4--;
						}
						num7--;
						num9 = 0;
					}
					if (num6 == num7)
					{
						flag = false;
					}
					num++;
				}
				for (int k = num3; k <= num4; k++)
				{
					*Main.tile[k, num10].type = 191;
					Main.tile[k, num10].active(true);
					Main.tile[k, num10].halfBrick(false);
					Main.tile[k, num10].slope(0);
					Main.tile[k, num10].color(28);
				}
				num10--;
			}
			for (int l = 0; l < num - 1; l++)
			{
				int num12 = array[l] + array3[l];
				int num13 = array2[l];
				int num14 = (int)((double)array4[l] * (1.0 + (double)WorldGen.genRand.Next(20, 30) * 0.1));
				*Main.tile[num12, num13 + 1].type = 191;
				Main.tile[num12, num13 + 1].active(true);
				Main.tile[num12, num13 + 1].halfBrick(false);
				Main.tile[num12, num13 + 1].color(28);
				int num15 = WorldGen.genRand.Next(3, 5);
				while (num14 > 0)
				{
					num14--;
					*Main.tile[num12, num13].type = 191;
					Main.tile[num12, num13].active(true);
					Main.tile[num12, num13].halfBrick(false);
					Main.tile[num12, num13].color(28);
					Main.tile[num12, num13].slope(0);
					if (WorldGen.genRand.Next(10) == 0)
					{
						num13 = ((WorldGen.genRand.Next(2) != 0) ? (num13 + 1) : (num13 - 1));
					}
					else
					{
						num12 += array3[l];
					}
					if (num15 > 0)
					{
						num15--;
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						num15 = WorldGen.genRand.Next(2, 5);
						if (WorldGen.genRand.Next(2) == 0)
						{
							*Main.tile[num12, num13].type = 191;
							Main.tile[num12, num13].active(true);
							Main.tile[num12, num13].halfBrick(false);
							Main.tile[num12, num13].color(28);
							Main.tile[num12, num13].slope(0);
							*Main.tile[num12, num13 - 1].type = 191;
							Main.tile[num12, num13 - 1].active(true);
							Main.tile[num12, num13 - 1].halfBrick(false);
							Main.tile[num12, num13 - 1].color(28);
							array5[num2] = num12;
							array6[num2] = num13;
							num2++;
						}
						else
						{
							*Main.tile[num12, num13].type = 191;
							Main.tile[num12, num13].active(true);
							Main.tile[num12, num13].halfBrick(false);
							Main.tile[num12, num13].color(28);
							Main.tile[num12, num13].slope(0);
							*Main.tile[num12, num13 + 1].type = 191;
							Main.tile[num12, num13 + 1].active(true);
							Main.tile[num12, num13 + 1].halfBrick(false);
							Main.tile[num12, num13 + 1].color(28);
							array5[num2] = num12;
							array6[num2] = num13;
							num2++;
						}
					}
					if (num14 == 0)
					{
						array5[num2] = num12;
						array6[num2] = num13;
						num2++;
					}
				}
			}
			int num16 = (num3 + num4) / 2;
			int num17 = num10;
			int num18 = WorldGen.genRand.Next(num5 * 3, num5 * 5);
			int num19 = 0;
			int num20 = 0;
			while (num18 > 0)
			{
				*Main.tile[num16, num17].type = 191;
				Main.tile[num16, num17].active(true);
				Main.tile[num16, num17].halfBrick(false);
				Main.tile[num16, num17].color(28);
				if (num19 > 0)
				{
					num19--;
				}
				if (num20 > 0)
				{
					num20--;
				}
				for (int m = -1; m < 2; m++)
				{
					if (m != 0 && ((m < 0 && num19 == 0) || (m > 0 && num20 == 0)) && WorldGen.genRand.Next(2) == 0)
					{
						int num21 = num16;
						int num22 = num17;
						int num23 = WorldGen.genRand.Next(num5, num5 * 3);
						if (m < 0)
						{
							num19 = WorldGen.genRand.Next(3, 5);
						}
						if (m > 0)
						{
							num20 = WorldGen.genRand.Next(3, 5);
						}
						int num24 = 0;
						while (num23 > 0)
						{
							num23--;
							num21 += m;
							*Main.tile[num21, num22].type = 191;
							Main.tile[num21, num22].active(true);
							Main.tile[num21, num22].halfBrick(false);
							Main.tile[num21, num22].color(28);
							if (num23 == 0)
							{
								array5[num2] = num21;
								array6[num2] = num22;
								array7[num2] = true;
								num2++;
							}
							if (WorldGen.genRand.Next(5) == 0)
							{
								num22 = ((WorldGen.genRand.Next(2) != 0) ? (num22 + 1) : (num22 - 1));
								*Main.tile[num21, num22].type = 191;
								Main.tile[num21, num22].active(true);
								Main.tile[num21, num22].halfBrick(false);
								Main.tile[num21, num22].color(28);
							}
							if (num24 > 0)
							{
								num24--;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								num24 = WorldGen.genRand.Next(2, 4);
								int num25 = num21;
								int num26 = num22;
								num26 = ((WorldGen.genRand.Next(2) != 0) ? (num26 + 1) : (num26 - 1));
								*Main.tile[num25, num26].type = 191;
								Main.tile[num25, num26].active(true);
								Main.tile[num25, num26].halfBrick(false);
								Main.tile[num25, num26].color(28);
								array5[num2] = num25;
								array6[num2] = num26;
								array7[num2] = true;
								num2++;
								array5[num2] = num25 + WorldGen.genRand.Next(-5, 6);
								array6[num2] = num26 + WorldGen.genRand.Next(-5, 6);
								array7[num2] = true;
								num2++;
							}
						}
					}
				}
				array5[num2] = num16;
				array6[num2] = num17;
				num2++;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num16 = ((WorldGen.genRand.Next(2) != 0) ? (num16 + 1) : (num16 - 1));
					*Main.tile[num16, num17].type = 191;
					Main.tile[num16, num17].active(true);
					Main.tile[num16, num17].halfBrick(false);
					Main.tile[num16, num17].color(28);
				}
				num17--;
				num18--;
			}
			for (int n = minl; n <= minr; n++)
			{
				int num27 = WorldGen.genRand.Next(1, 6);
				int num28 = j + 1;
				while (num27 > 0)
				{
					if (WorldGen.SolidTile(n, num28, false))
					{
						num27--;
					}
					*Main.tile[n, num28].type = 191;
					Main.tile[n, num28].active(true);
					Main.tile[n, num28].halfBrick(false);
					Main.tile[n, num28].slope(0);
					num28++;
				}
				int num29 = num28;
				int num30 = WorldGen.genRand.Next(2, num5 + 1);
				for (int num31 = 0; num31 < num30; num31++)
				{
					num28 = num29;
					int num32 = (minl + minr) / 2;
					int num33 = 1;
					int num34 = (n >= num32) ? 1 : -1;
					if (n == num32 || (num5 > 6 && (n == num32 - 1 || n == num32 + 1)))
					{
						num34 = 0;
					}
					int num35 = num34;
					int num36 = n;
					num27 = WorldGen.genRand.Next((int)((double)num5 * 3.5), num5 * 6);
					while (num27 > 0)
					{
						num27--;
						num36 += num34;
						if (*Main.tile[num36, num28].wall != 244)
						{
							*Main.tile[num36, num28].type = 191;
							Main.tile[num36, num28].active(true);
							Main.tile[num36, num28].halfBrick(false);
							Main.tile[num36, num28].slope(0);
						}
						num28 += num33;
						if (*Main.tile[num36, num28].wall != 244)
						{
							*Main.tile[num36, num28].type = 191;
							Main.tile[num36, num28].active(true);
							Main.tile[num36, num28].halfBrick(false);
							Main.tile[num36, num28].slope(0);
						}
						if (!Main.tile[num36, num28 + 1].active())
						{
							num34 = 0;
							num33 = 1;
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							num34 = ((num35 < 0) ? ((num34 == 0) ? -1 : 0) : ((num35 <= 0) ? WorldGen.genRand.Next(-1, 2) : ((num34 == 0) ? 1 : 0)));
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							num33 = ((num33 == 0) ? 1 : 0);
						}
					}
				}
			}
			if (!WorldGen.remixWorldGen)
			{
				for (int num37 = 0; num37 < num2; num37++)
				{
					int num38 = WorldGen.genRand.Next(5, 8);
					num38 = (int)((double)num38 * (1.0 + (double)num5 * 0.05));
					if (array7[num37])
					{
						num38 = WorldGen.genRand.Next(6, 12) + num5;
					}
					int num39 = array5[num37] - num38 * 2;
					int num40 = array5[num37] + num38 * 2;
					int num41 = array6[num37] - num38 * 2;
					int num42 = array6[num37] + num38 * 2;
					double num43 = 2.0 - (double)WorldGen.genRand.Next(5) * 0.1;
					for (int num44 = num39; num44 <= num40; num44++)
					{
						for (int num45 = num41; num45 <= num42; num45++)
						{
							if (*Main.tile[num44, num45].type != 191)
							{
								if (array7[num37])
								{
									if ((new Vector2D((double)array5[num37], (double)array6[num37]) - new Vector2D((double)num44, (double)num45)).Length() < (double)num38 * 0.9)
									{
										*Main.tile[num44, num45].type = 192;
										Main.tile[num44, num45].active(true);
										Main.tile[num44, num45].halfBrick(false);
										Main.tile[num44, num45].color(28);
									}
								}
								else if ((double)Math.Abs(array5[num37] - num44) + (double)Math.Abs(array6[num37] - num45) * num43 < (double)num38)
								{
									*Main.tile[num44, num45].type = 192;
									Main.tile[num44, num45].active(true);
									Main.tile[num44, num45].halfBrick(false);
									Main.tile[num44, num45].color(28);
								}
							}
						}
					}
				}
			}
			WorldGen.GrowDungeonTree_MakePassage(j, num5, ref minl, ref minr, patch);
			Main.tileSolid[48] = true;
			return true;
		}

		// Token: 0x060011BE RID: 4542 RVA: 0x00423214 File Offset: 0x00421414
		private unsafe static bool GrowLivingTree_HorizontalTunnel(int i, int j)
		{
			int num = i;
			int num2 = i;
			int num3 = 80;
			int num4 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num4 *= -1;
			}
			for (int k = 0; k < 2; k++)
			{
				bool flag = false;
				if (num == i && num4 > 0)
				{
					int l = i + 5;
					while (l < i + num3)
					{
						if (!WorldGen.InWorld(l, j, 10))
						{
							return false;
						}
						if ((double)j < Main.worldSurface)
						{
							int m = j - 7;
							while (m <= j + 7 && *Main.tile[l, m].wall != 0)
							{
								m++;
							}
						}
						if (*Main.tile[l, j].type == 48)
						{
							break;
						}
						if (*Main.tile[l, j].type == 191)
						{
							for (int n = j - 2; n <= j; n++)
							{
								if (*Main.tile[l + 2, n].wall != 244)
								{
									flag = true;
								}
							}
							if (!flag)
							{
								k = 2;
								num2 = l + 2;
								break;
							}
							break;
						}
						else
						{
							if (!Main.tile[l, j].active())
							{
								bool flag2 = true;
								for (int num5 = j - 2; num5 <= j; num5++)
								{
									if ((double)j < Main.worldSurface + 3.0 && (*Main.tile[l + 1, num5].wall == 0 || *Main.tile[l + 2, num5].wall == 0 || *Main.tile[l + 3, num5].wall == 0))
									{
										return false;
									}
									if (Main.tile[l, num5].active() || Main.tile[l + 1, num5].active() || Main.tile[l + 2, num5].active())
									{
										flag2 = false;
									}
								}
								if (flag2)
								{
									k = 2;
									num2 = l;
									break;
								}
							}
							l++;
						}
					}
				}
				flag = false;
				if (num2 == i && num4 < 0)
				{
					int num6 = i - 5;
					while (num6 > i - num3)
					{
						if (!WorldGen.InWorld(num6, j, 10))
						{
							return false;
						}
						if ((double)j < Main.worldSurface)
						{
							int num7 = j - 7;
							while (num7 <= j + 7 && *Main.tile[num6, num7].wall != 0)
							{
								num7++;
							}
						}
						if (*Main.tile[num6, j].type == 48)
						{
							break;
						}
						if (*Main.tile[num6, j].type == 191)
						{
							for (int num8 = j - 2; num8 <= j; num8++)
							{
								if (*Main.tile[num6 - 3, num8].wall != 244)
								{
									flag = true;
								}
							}
							if (!flag)
							{
								k = 2;
								num = num6 - 2;
								break;
							}
							break;
						}
						else
						{
							if (!Main.tile[num6, j].active())
							{
								bool flag3 = true;
								for (int num9 = j - 2; num9 <= j; num9++)
								{
									if ((double)j < Main.worldSurface + 3.0 && (*Main.tile[num6 - 1, num9].wall == 0 || *Main.tile[num6 - 2, num9].wall == 0 || *Main.tile[num6 - 3, num9].wall == 0))
									{
										return false;
									}
									if (Main.tile[num6, num9].active() || Main.tile[num6 - 1, num9].active() || Main.tile[num6 - 2, num9].active())
									{
										flag3 = false;
									}
								}
								if (flag3)
								{
									k = 2;
									num = num6;
									break;
								}
							}
							num6--;
						}
					}
				}
				num4 *= -1;
			}
			if (num == num2)
			{
				return false;
			}
			bool flag4 = false;
			bool flag5 = false;
			for (int num10 = j - 5; num10 <= j + 1; num10++)
			{
				for (int num11 = num; num11 <= num2; num11++)
				{
					int num12 = 2;
					if (Math.Abs(num11 - num2) > 3 && Math.Abs(num11 - num) > 3)
					{
						num12 = 4;
					}
					if (*Main.tile[num11, num10].wall != 244 && *Main.tile[num11, num10].type != 19 && *Main.tile[num11, num10].type != 15 && *Main.tile[num11, num10].type != 304 && *Main.tile[num11, num10].type != 21 && *Main.tile[num11, num10].type != 10)
					{
						if (!Main.wallDungeon[(int)(*Main.tile[num11, num10].wall)] && (!Main.tile[num11, num10].active() || (!Main.wallDungeon[(int)(*Main.tile[num11, num10 - 1].wall)] && !Main.wallDungeon[(int)(*Main.tile[num11, num10 + 1].wall)])))
						{
							Main.tile[num11, num10].active(true);
							*Main.tile[num11, num10].type = 191;
							Main.tile[num11, num10].halfBrick(false);
						}
						if (*Main.tile[num11, num10 - 1].type == 40)
						{
							*Main.tile[num11, num10 - 1].type = 0;
						}
						if (*Main.tile[num11, num10 + 1].type == 40)
						{
							*Main.tile[num11, num10 + 1].type = 0;
						}
					}
					if (num10 >= j - num12 && num10 <= j && *Main.tile[num11, num10].type != 19 && *Main.tile[num11, num10].type != 15 && *Main.tile[num11, num10].type != 304 && *Main.tile[num11, num10].type != 21 && *Main.tile[num11, num10].type != 10 && *Main.tile[num11, num10 - 1].type != 15 && *Main.tile[num11, num10 - 1].type != 304 && *Main.tile[num11, num10 - 1].type != 21 && *Main.tile[num11, num10 - 1].type != 10 && *Main.tile[num11, num10 + 1].type != 10)
					{
						if (!Main.wallDungeon[(int)(*Main.tile[num11, num10].wall)])
						{
							*Main.tile[num11, num10].wall = 244;
						}
						*Main.tile[num11, num10].liquid = 0;
						Main.tile[num11, num10].active(false);
					}
					if (num10 == j)
					{
						int style = 7;
						if (Main.wallDungeon[(int)(*Main.tile[num11, num10].wall)] || Main.wallDungeon[(int)(*Main.tile[num11, num10 - 1].wall)] || Main.wallDungeon[(int)(*Main.tile[num11, num10 - 2].wall)])
						{
							style = 13;
						}
						if (num11 <= num + 4 && !flag4)
						{
							if (*Main.tile[num11 - 1, num10].type == 10 || *Main.tile[num11 + 1, num10].type == 10)
							{
								flag4 = true;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTile(num11, num10, 10, true, false, -1, style);
								if (*Main.tile[num11, num10].type == 10)
								{
									flag4 = true;
								}
							}
						}
						if (num11 >= num2 - 4 && !flag5)
						{
							if (*Main.tile[num11 - 1, num10].type == 10 || *Main.tile[num11 + 1, num10].type == 10)
							{
								flag5 = true;
							}
							else if (WorldGen.genRand.Next(3) == 0)
							{
								WorldGen.PlaceTile(num11, num10, 10, true, false, -1, style);
								if (*Main.tile[num11, num10].type == 10)
								{
									flag5 = true;
								}
							}
						}
					}
				}
			}
			return true;
		}

		// Token: 0x060011BF RID: 4543 RVA: 0x00423BF0 File Offset: 0x00421DF0
		private unsafe static void GrowDungeonTree_MakePassage(int j, int W, ref int minl, ref int minr, bool noSecretRoom = false)
		{
			int num = minl;
			int num2 = minr;
			int num10 = (minl + minr) / 2;
			int num3 = 5;
			int num4 = j - 6;
			int num5 = 0;
			bool flag = true;
			WorldGen.genRand.Next(5, 16);
			for (;;)
			{
				num4++;
				if (num4 > GenVars.dungeonY - 5)
				{
					break;
				}
				int num6 = (minl + minr) / 2;
				int num7 = 1;
				if (num4 > j && W <= 4)
				{
					num7++;
				}
				for (int i = minl - num7; i <= minr + num7; i++)
				{
					if (i > num6 - 2 && i <= num6 + 1)
					{
						if (num4 > j - 4)
						{
							if (*Main.tile[i, num4].type != 19 && *Main.tile[i, num4].type != 15 && *Main.tile[i, num4].type != 304 && *Main.tile[i, num4].type != 21 && *Main.tile[i, num4].type != 10 && *Main.tile[i, num4 - 1].type != 15 && *Main.tile[i, num4 - 1].type != 304 && *Main.tile[i, num4 - 1].type != 21 && *Main.tile[i, num4 - 1].type != 10 && *Main.tile[i, num4 + 1].type != 10)
							{
								Main.tile[i, num4].active(false);
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i, num4].wall)])
							{
								*Main.tile[i, num4].wall = 244;
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i - 1, num4].wall)] && (*Main.tile[i - 1, num4].wall > 0 || (double)num4 >= Main.worldSurface))
							{
								*Main.tile[i - 1, num4].wall = 244;
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i + 1, num4].wall)] && (*Main.tile[i + 1, num4].wall > 0 || (double)num4 >= Main.worldSurface))
							{
								*Main.tile[i + 1, num4].wall = 244;
							}
							if (num4 == j && i > num6 - 2 && i <= num6 + 1)
							{
								Main.tile[i, num4 + 1].active(false);
								WorldGen.PlaceTile(i, num4 + 1, 19, true, false, -1, 23);
							}
						}
					}
					else
					{
						if (*Main.tile[i, num4].type != 15 && *Main.tile[i, num4].type != 304 && *Main.tile[i, num4].type != 21 && *Main.tile[i, num4].type != 10 && *Main.tile[i - 1, num4].type != 10 && *Main.tile[i + 1, num4].type != 10)
						{
							if (!Main.wallDungeon[(int)(*Main.tile[i, num4].wall)])
							{
								*Main.tile[i, num4].type = 191;
								Main.tile[i, num4].active(true);
								Main.tile[i, num4].halfBrick(false);
							}
							if (*Main.tile[i - 1, num4].type == 40)
							{
								*Main.tile[i - 1, num4].type = 0;
							}
							if (*Main.tile[i + 1, num4].type == 40)
							{
								*Main.tile[i + 1, num4].type = 0;
							}
						}
						if (num4 <= j && num4 > j - 4 && i > minl - num7 && i <= minr + num7 - 1)
						{
							*Main.tile[i, num4].wall = 244;
						}
					}
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(i, num4, true);
						WorldGen.SquareWallFrame(i, num4, true);
					}
				}
				num5++;
				if (num5 >= 6)
				{
					num5 = 0;
					int num8 = WorldGen.genRand.Next(3);
					if (num8 == 0)
					{
						num8 = -1;
					}
					if (flag)
					{
						num8 = 2;
					}
					if (num8 == -1 && *Main.tile[minl - num3, num4].wall == 244)
					{
						num8 = 1;
					}
					else if (num8 == 1 && *Main.tile[minr + num3, num4].wall == 244)
					{
						num8 = -1;
					}
					if (num8 == 2)
					{
						flag = false;
						int num9 = 23;
						if (Main.wallDungeon[(int)(*Main.tile[minl, num4 + 1].wall)] || Main.wallDungeon[(int)(*Main.tile[minl + 1, num4 + 1].wall)] || Main.wallDungeon[(int)(*Main.tile[minl + 2, num4 + 1].wall)])
						{
							num9 = 12;
						}
						if (WorldGen.SolidTile(minl - 1, num4 + 1, false) || WorldGen.SolidTile(minr + 1, num4 + 1, false) || num9 != 12)
						{
							for (int k = minl; k <= minr; k++)
							{
								if (k > num6 - 2 && k <= num6 + 1)
								{
									Main.tile[k, num4 + 1].active(false);
									Main.tile[k, num4 + 1].halfBrick(false);
									Main.tile[k, num4 + 1].slope(0);
									WorldGen.PlaceTile(k, num4 + 1, 19, true, false, -1, num9);
								}
							}
						}
					}
					else
					{
						minl += num8;
						minr += num8;
					}
				}
			}
			minl = num;
			minr = num2;
			int num11 = (minl + minr) / 2;
			for (int l = minl; l <= minr; l++)
			{
				for (int m = j - 3; m <= j; m++)
				{
					Main.tile[l, m].active(false);
					if (!Main.wallDungeon[(int)(*Main.tile[l, m].wall)])
					{
						*Main.tile[l, m].wall = 244;
					}
				}
			}
		}

		// Token: 0x060011C0 RID: 4544 RVA: 0x00424348 File Offset: 0x00422548
		private unsafe static void GrowLivingTree_MakePassage(int j, int W, ref int minl, ref int minr, bool noSecretRoom = false)
		{
			bool flag = noSecretRoom;
			int num = minl;
			int num2 = minr;
			bool flag2 = false;
			int num17 = (minl + minr) / 2;
			int num3 = 5;
			int num4 = j - 6;
			int num5 = 50;
			int num6 = WorldGen.genRand.Next(400, 700);
			int num7 = 0;
			bool flag3 = true;
			int num8 = WorldGen.genRand.Next(5, 16);
			while (num6 > 0)
			{
				num4++;
				num6--;
				num5--;
				int num9 = (minl + minr) / 2;
				if (!Main.tile[minl, num4].active() && *Main.tile[minl, num4].wall == 244 && !Main.tile[minr, num4].active() && *Main.tile[minr, num4].wall == 244)
				{
					break;
				}
				int num10 = 1;
				if (num4 > j && W <= 4)
				{
					num10++;
				}
				for (int i = minl - num10; i <= minr + num10; i++)
				{
					if (Main.wallDungeon[(int)(*Main.tile[i, num4].wall)])
					{
						flag = true;
						flag2 = true;
					}
					if (i > num9 - 2 && i <= num9 + 1)
					{
						if (num4 > j - 4)
						{
							if (*Main.tile[i, num4].type != 19 && *Main.tile[i, num4].type != 15 && *Main.tile[i, num4].type != 304 && *Main.tile[i, num4].type != 21 && *Main.tile[i, num4].type != 10 && *Main.tile[i, num4 - 1].type != 15 && *Main.tile[i, num4 - 1].type != 304 && *Main.tile[i, num4 - 1].type != 21 && *Main.tile[i, num4 - 1].type != 10 && *Main.tile[i, num4 + 1].type != 10)
							{
								Main.tile[i, num4].active(false);
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i, num4].wall)])
							{
								*Main.tile[i, num4].wall = 244;
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i - 1, num4].wall)] && (*Main.tile[i - 1, num4].wall > 0 || (double)num4 >= Main.worldSurface))
							{
								*Main.tile[i - 1, num4].wall = 244;
							}
							if (!Main.wallDungeon[(int)(*Main.tile[i + 1, num4].wall)] && (*Main.tile[i + 1, num4].wall > 0 || (double)num4 >= Main.worldSurface))
							{
								*Main.tile[i + 1, num4].wall = 244;
							}
							if (num4 == j && i > num9 - 2 && i <= num9 + 1)
							{
								Main.tile[i, num4 + 1].active(false);
								WorldGen.PlaceTile(i, num4 + 1, 19, true, false, -1, 23);
							}
						}
					}
					else
					{
						if (*Main.tile[i, num4].type != 15 && *Main.tile[i, num4].type != 304 && *Main.tile[i, num4].type != 21 && *Main.tile[i, num4].type != 10 && *Main.tile[i - 1, num4].type != 10 && *Main.tile[i + 1, num4].type != 10)
						{
							if (!Main.wallDungeon[(int)(*Main.tile[i, num4].wall)])
							{
								*Main.tile[i, num4].type = 191;
								Main.tile[i, num4].active(true);
								Main.tile[i, num4].halfBrick(false);
							}
							if (*Main.tile[i - 1, num4].type == 40)
							{
								*Main.tile[i - 1, num4].type = 0;
							}
							if (*Main.tile[i + 1, num4].type == 40)
							{
								*Main.tile[i + 1, num4].type = 0;
							}
						}
						if (num4 <= j && num4 > j - 4 && i > minl - num10 && i <= minr + num10 - 1)
						{
							*Main.tile[i, num4].wall = 244;
						}
					}
					if (!WorldGen.gen)
					{
						WorldGen.SquareTileFrame(i, num4, true);
						WorldGen.SquareWallFrame(i, num4, true);
					}
				}
				num7++;
				if (num7 >= 6)
				{
					num7 = 0;
					int num11 = WorldGen.genRand.Next(3);
					if (num11 == 0)
					{
						num11 = -1;
					}
					if (flag3)
					{
						num11 = 2;
					}
					if (num11 == -1 && *Main.tile[minl - num3, num4].wall == 244)
					{
						num11 = 1;
					}
					else if (num11 == 1 && *Main.tile[minr + num3, num4].wall == 244)
					{
						num11 = -1;
					}
					if (num11 == 2)
					{
						flag3 = false;
						int style = 23;
						if (Main.wallDungeon[(int)(*Main.tile[minl, num4 + 1].wall)] || Main.wallDungeon[(int)(*Main.tile[minl + 1, num4 + 1].wall)] || Main.wallDungeon[(int)(*Main.tile[minl + 2, num4 + 1].wall)])
						{
							style = 12;
						}
						for (int k = minl; k <= minr; k++)
						{
							if (k > num9 - 2 && k <= num9 + 1)
							{
								Main.tile[k, num4 + 1].active(false);
								WorldGen.PlaceTile(k, num4 + 1, 19, true, false, -1, style);
							}
						}
					}
					else
					{
						minl += num11;
						minr += num11;
					}
					if (noSecretRoom)
					{
						num8--;
						if (num8 <= 0)
						{
							num8 = ((!WorldGen.GrowLivingTree_HorizontalTunnel(num9, num4)) ? WorldGen.genRand.Next(2, 11) : WorldGen.genRand.Next(5, 21));
						}
					}
					if (num5 <= 0 && !flag)
					{
						flag = true;
						WorldGen.GrowLivingTreePassageRoom(minl, minr, num4);
					}
				}
				if (flag2)
				{
					bool flag4 = true;
					for (int l = minl; l <= minr; l++)
					{
						for (int m = num4 + 1; m <= num4 + 2; m++)
						{
							if (WorldGen.SolidTile(l, m, false))
							{
								flag4 = false;
							}
						}
					}
					if (flag4)
					{
						num6 = 0;
					}
				}
				else if (num5 <= 0)
				{
					bool flag5 = true;
					for (int n = minl; n <= minr; n++)
					{
						for (int num12 = num4 + 1; num12 <= num4 + 4; num12++)
						{
							if (WorldGen.SolidTile(n, num12, false))
							{
								flag5 = false;
							}
						}
					}
					if (flag5)
					{
						num6 = 0;
					}
				}
			}
			minl = num;
			minr = num2;
			int num18 = (minl + minr) / 2;
			for (int num13 = minl; num13 <= minr; num13++)
			{
				for (int num14 = j - 3; num14 <= j; num14++)
				{
					Main.tile[num13, num14].active(false);
					bool flag6 = true;
					for (int num15 = num13 - 1; num15 <= num13 + 1; num15++)
					{
						for (int num16 = num14 - 1; num16 <= num14 + 1; num16++)
						{
							if (!Main.tile[num15, num16].active() && *Main.tile[num15, num16].wall == 0)
							{
								flag6 = false;
							}
						}
					}
					if (flag6 && !Main.wallDungeon[(int)(*Main.tile[num13, num14].wall)])
					{
						*Main.tile[num13, num14].wall = 244;
					}
				}
			}
		}

		// Token: 0x060011C1 RID: 4545 RVA: 0x00424C90 File Offset: 0x00422E90
		private unsafe static void GrowLivingTreePassageRoom(int minl, int minr, int Y)
		{
			int num = WorldGen.genRand.Next(2);
			if (num == 0)
			{
				num = -1;
			}
			int num2 = Y - 2;
			int num3 = (minl + minr) / 2;
			if (num < 0)
			{
				num3--;
			}
			if (num > 0)
			{
				num3++;
			}
			int num4 = WorldGen.genRand.Next(15, 30);
			int num5 = num3 + num4;
			if (num < 0)
			{
				num5 = num3;
				num3 -= num4;
			}
			for (int i = num3; i < num5; i++)
			{
				for (int j = Y - 20; j < Y + 10; j++)
				{
					if (*Main.tile[i, j].wall == 0 && !Main.tile[i, j].active() && (double)j < Main.worldSurface)
					{
						return;
					}
				}
			}
			GenVars.dMinX = num3;
			GenVars.dMaxX = num5;
			if (num < 0)
			{
				GenVars.dMinX -= 40;
			}
			else
			{
				GenVars.dMaxX += 40;
			}
			for (int k = num3; k <= num5; k++)
			{
				for (int l = num2 - 2; l <= Y + 2; l++)
				{
					if (*Main.tile[k - 1, l].type == 40)
					{
						*Main.tile[k - 1, l].type = 0;
					}
					if (*Main.tile[k + 1, l].type == 40)
					{
						*Main.tile[k + 1, l].type = 0;
					}
					if (*Main.tile[k, l - 1].type == 40)
					{
						*Main.tile[k, l - 1].type = 0;
					}
					if (*Main.tile[k, l + 1].type == 40)
					{
						*Main.tile[k, l + 1].type = 0;
					}
					if (*Main.tile[k, l].wall != 244 && *Main.tile[k, l].type != 19)
					{
						Main.tile[k, l].active(true);
						*Main.tile[k, l].type = 191;
						Main.tile[k, l].halfBrick(false);
					}
					if (l >= num2 && l <= Y)
					{
						*Main.tile[k, l].liquid = 0;
						*Main.tile[k, l].wall = 244;
						Main.tile[k, l].active(false);
					}
				}
			}
			int i2 = (minl + minr) / 2 + 3 * num;
			WorldGen.PlaceTile(i2, Y, 10, true, false, -1, 7);
			int num6 = WorldGen.genRand.Next(5, 9);
			int num7 = WorldGen.genRand.Next(4, 6);
			if (num < 0)
			{
				num5 = num3 + num6;
				num3 -= num6;
			}
			else
			{
				num3 = num5 - num6;
				num5 += num6;
			}
			num2 = Y - num7;
			for (int m = num3 - 2; m <= num5 + 2; m++)
			{
				for (int n = num2 - 2; n <= Y + 2; n++)
				{
					if (*Main.tile[m - 1, n].type == 40)
					{
						*Main.tile[m - 1, n].type = 40;
					}
					if (*Main.tile[m + 1, n].type == 40)
					{
						*Main.tile[m + 1, n].type = 40;
					}
					if (*Main.tile[m, n - 1].type == 40)
					{
						*Main.tile[m, n - 1].type = 40;
					}
					if (*Main.tile[m, n + 1].type == 40)
					{
						*Main.tile[m, n + 1].type = 40;
					}
					if (*Main.tile[m, n].wall != 244 && *Main.tile[m, n].type != 19)
					{
						Main.tile[m, n].active(true);
						*Main.tile[m, n].type = 191;
						Main.tile[m, n].halfBrick(false);
					}
					if (n >= num2 && n <= Y && m >= num3 && m <= num5)
					{
						*Main.tile[m, n].liquid = 0;
						*Main.tile[m, n].wall = 244;
						Main.tile[m, n].active(false);
					}
				}
			}
			i2 = num3 - 2;
			if (num < 0)
			{
				i2 = num5 + 2;
			}
			WorldGen.PlaceTile(i2, Y, 10, true, false, -1, 7);
			int num8 = num5;
			if (num < 0)
			{
				num8 = num3;
			}
			int num9 = 2;
			if (WorldGen.genRand.Next(num9) == 0)
			{
				num9 += 2;
				WorldGen.PlaceTile(num8, Y, 15, true, false, -1, 5);
				if (num < 0)
				{
					ref short frameX = ref Main.tile[num8, Y - 1].frameX;
					frameX += 18;
					ref short frameX2 = ref Main.tile[num8, Y].frameX;
					frameX2 += 18;
				}
			}
			num8 = num5 - 2;
			if (num < 0)
			{
				num8 = num3 + 2;
			}
			WorldGen.PlaceTile(num8, Y, 304, true, false, -1, 0);
			num8 = num5 - 4;
			if (num < 0)
			{
				num8 = num3 + 4;
			}
			if (WorldGen.genRand.Next(num9) == 0)
			{
				WorldGen.PlaceTile(num8, Y, 15, true, false, -1, 5);
				if (num > 0)
				{
					ref short frameX3 = ref Main.tile[num8, Y - 1].frameX;
					frameX3 += 18;
					ref short frameX4 = ref Main.tile[num8, Y].frameX;
					frameX4 += 18;
				}
			}
			num8 = num5 - 7;
			if (num < 0)
			{
				num8 = num3 + 8;
			}
			int contain = 832;
			if (WorldGen.genRand.Next(3) == 0)
			{
				contain = 4281;
			}
			if (!WorldGen.remixWorldGen)
			{
				WorldGen.AddBuriedChest(num8, Y, contain, false, 12, false, 0);
				return;
			}
			int num10 = WorldGen.genRand.Next(1, 3);
			for (int num11 = 0; num11 < num10; num11++)
			{
				bool flag = false;
				while (!flag)
				{
					int num12 = WorldGen.genRand.Next(Main.maxTilesX / 8, Main.maxTilesX - Main.maxTilesX / 8);
					int num13 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
					if (!WorldGen.IsTileNearby(num12, num13, 53, 20) && !WorldGen.IsTileNearby(num12, num13, 147, 20) && !WorldGen.IsTileNearby(num12, num13, 59, 20))
					{
						flag = WorldGen.AddBuriedChest(num12, num13, contain, false, 12, false, 0);
					}
				}
			}
			if (WorldGen.crimson)
			{
				WorldGen.AddBuriedChest(num8, Y, 0, false, 14, false, 0);
				return;
			}
			WorldGen.AddBuriedChest(num8, Y, 0, false, 7, false, 0);
		}

		// Token: 0x060011C2 RID: 4546 RVA: 0x00425408 File Offset: 0x00423608
		public unsafe static void TreeGrowFXCheck(int x, int y)
		{
			int treeHeight = 1;
			int passStyle = -1;
			Tile topTile = default(Tile);
			for (int num = -1; num > -100; num--)
			{
				Tile tile = Main.tile[x, y + num];
				if (!tile.active() || !TileID.Sets.GetsCheckedForLeaves[(int)(*tile.type)])
				{
					break;
				}
				topTile = tile;
				treeHeight++;
			}
			for (int i = 1; i < 5; i++)
			{
				Tile tile2 = Main.tile[x, y + i];
				if (!tile2.active() || !TileID.Sets.GetsCheckedForLeaves[(int)(*tile2.type)])
				{
					int num2;
					WorldGen.GetTreeLeaf(x, topTile, tile2, ref treeHeight, out num2, out passStyle);
					break;
				}
				treeHeight++;
			}
			if (treeHeight > 0 && passStyle > 0)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(112, -1, -1, null, 1, (float)x, (float)y, (float)treeHeight, passStyle, 0, 0);
				}
				if (Main.netMode == 0)
				{
					WorldGen.TreeGrowFX(x, y, treeHeight, passStyle, false);
				}
			}
		}

		// Token: 0x060011C3 RID: 4547 RVA: 0x004254E4 File Offset: 0x004236E4
		public unsafe static void GetTreeLeaf(int x, Tile topTile, Tile t, ref int treeHeight, out int treeFrame, out int passStyle)
		{
			treeFrame = 0;
			passStyle = -1;
			if (*topTile.frameX == 22 || *topTile.frameX == 44 || *topTile.frameX == 66)
			{
				if (*topTile.frameY == 220)
				{
					treeFrame = 1;
				}
				else if (*topTile.frameY == 242)
				{
					treeFrame = 2;
				}
			}
			if (*topTile.frameX == 44 || *topTile.frameX == 66)
			{
				if (*topTile.frameY == 220)
				{
					treeFrame = 1;
				}
				else if (*topTile.frameY == 242)
				{
					treeFrame = 2;
				}
			}
			ushort num3 = *topTile.type;
			if (num3 <= 596)
			{
				if (num3 - 583 > 6)
				{
					if (num3 == 596)
					{
						passStyle = 1248;
					}
				}
				else
				{
					passStyle = (int)(1249 + (*topTile.type - 583));
				}
			}
			else if (num3 != 616)
			{
				if (num3 == 634)
				{
					passStyle = 1278;
				}
			}
			else
			{
				passStyle = 1257;
			}
			if (passStyle > -1)
			{
				return;
			}
			num3 = *t.type;
			if (num3 <= 112)
			{
				if (num3 <= 53)
				{
					if (num3 == 2)
					{
						goto IL_1C2;
					}
					if (num3 != 23)
					{
						if (num3 != 53)
						{
							goto IL_430;
						}
						passStyle = 911;
						goto IL_430;
					}
				}
				else if (num3 <= 70)
				{
					if (num3 == 60)
					{
						passStyle = 914;
						goto IL_430;
					}
					if (num3 != 70)
					{
						goto IL_430;
					}
					passStyle = 912;
					goto IL_430;
				}
				else
				{
					if (num3 == 109)
					{
						goto IL_237;
					}
					if (num3 != 112)
					{
						goto IL_430;
					}
				}
				passStyle = 915;
				goto IL_430;
			}
			if (num3 <= 199)
			{
				if (num3 == 116)
				{
					passStyle = 919;
					goto IL_430;
				}
				if (num3 == 147)
				{
					passStyle = 913;
					goto IL_430;
				}
				if (num3 != 199)
				{
					goto IL_430;
				}
			}
			else if (num3 <= 477)
			{
				if (num3 != 234)
				{
					if (num3 != 477)
					{
						goto IL_430;
					}
					goto IL_1C2;
				}
			}
			else
			{
				if (num3 == 492)
				{
					goto IL_237;
				}
				if (num3 != 633)
				{
					goto IL_430;
				}
				passStyle = 1278;
				goto IL_430;
			}
			passStyle = 916;
			goto IL_430;
			IL_1C2:
			passStyle = 910;
			goto IL_430;
			IL_237:
			int num = 917;
			if (WorldGen.GetHollowTreeFoliageStyle() != 20)
			{
				if (x % 3 == 1)
				{
					treeFrame += 3;
				}
				if (x % 3 == 2)
				{
					treeFrame += 6;
				}
				switch (treeFrame)
				{
				case 0:
					passStyle = 2;
					break;
				case 1:
					passStyle = 1;
					break;
				case 2:
					passStyle = 7;
					break;
				case 3:
					passStyle = 4;
					break;
				case 4:
					passStyle = 5;
					break;
				case 5:
					passStyle = 6;
					break;
				case 6:
					passStyle = 3;
					break;
				case 7:
					passStyle = 8;
					break;
				case 8:
					passStyle = 0;
					break;
				}
			}
			else
			{
				int num2 = 196;
				if (x % 6 == 1)
				{
					treeFrame += 3;
				}
				else if (x % 6 == 2)
				{
					treeFrame += 6;
				}
				else if (x % 6 == 3)
				{
					treeFrame += 9;
				}
				else if (x % 6 == 4)
				{
					treeFrame += 12;
				}
				else if (x % 6 == 5)
				{
					treeFrame += 15;
				}
				switch (treeFrame)
				{
				case 0:
					passStyle = num2;
					break;
				case 1:
					passStyle = num2;
					break;
				case 2:
					passStyle = num2;
					break;
				case 3:
					passStyle = num2 + 1;
					break;
				case 4:
					passStyle = num2 + 2;
					break;
				case 5:
					passStyle = num2 + 1;
					break;
				case 6:
					passStyle = num2 + 3;
					break;
				case 7:
					passStyle = num2 + 4;
					break;
				case 8:
					passStyle = num2 + 5;
					break;
				case 9:
					passStyle = num2 + 6;
					break;
				case 10:
					passStyle = num2 + 6;
					break;
				case 11:
					passStyle = num2 + 6;
					break;
				case 12:
					passStyle = num2 + 7;
					break;
				case 13:
					passStyle = num2 + 7;
					break;
				case 14:
					passStyle = num2 + 7;
					break;
				case 15:
					passStyle = num2 + 8;
					break;
				case 16:
					passStyle = num2 + 8;
					break;
				case 17:
					passStyle = num2 + 8;
					break;
				}
			}
			passStyle += num;
			treeHeight += 5;
			IL_430:
			PlantLoader.GetTreeLeaf((int)(*t.type), ref passStyle);
		}

		// Token: 0x060011C4 RID: 4548 RVA: 0x00425930 File Offset: 0x00423B30
		public static void TreeGrowFX(int x, int y, int height, int treeGore, bool hitTree = false)
		{
			Vector2 vector = new Vector2((float)x, (float)y) * 16f + new Vector2(8f, 8f);
			if (treeGore == 1278)
			{
				WorldGen.TreeGrowFX_AshShake(x, y, height, hitTree);
				return;
			}
			for (int num = 0; num > -height; num--)
			{
				float num2 = 10f;
				Vector2 vector2;
				vector2..ctor(5f, 7f);
				Gore.NewGore(vector + new Vector2(-16f, (float)(num * 16)) - vector2, Utils.RandomVector2(Main.rand, 0f - num2, num2), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				Gore.NewGore(vector + new Vector2(0f, (float)(num * 16)) - vector2, Utils.RandomVector2(Main.rand, 0f - num2, num2), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				Gore.NewGore(vector + new Vector2(16f, (float)(num * 16)) - vector2, Utils.RandomVector2(Main.rand, 0f - num2, num2), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
				if (num == -height + 1)
				{
					int num3 = 20;
					if (hitTree)
					{
						num3 = 5;
					}
					for (int i = 0; i < num3; i++)
					{
						Gore.NewGore(vector + new Vector2(0f, (float)(num * 16 - 40)) + Utils.RandomVector2(Main.rand, -40f, 40f) - vector2, Utils.RandomVector2(Main.rand, -10f, 10f), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
					}
				}
			}
		}

		// Token: 0x060011C5 RID: 4549 RVA: 0x00425B10 File Offset: 0x00423D10
		private static void TreeGrowFX_AshShake(int x, int y, int height, bool hitTree = false)
		{
			Vector2 vector = new Vector2((float)x, (float)y) * 16f + new Vector2(8f, 8f);
			for (int num = 0; num > -height; num--)
			{
				if (num >= -height / 2 && Main.rand.Next(3) != 0)
				{
					int num2 = hitTree ? 10 : 5;
					for (int i = 0; i < num2; i++)
					{
						Dust.NewDustDirect(vector + new Vector2(-16f, (float)(num * 16)) + Utils.RandomVector2(Main.rand, -30f, 30f), 4, 4, 31, 0f, -3f, 100, default(Color), 1f).velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -0.6f);
					}
				}
				if ((float)num >= (float)(-(float)height) * 0.7f && Main.rand.Next(3) != 0)
				{
					int num3 = hitTree ? 16 : 10;
					for (int j = 0; j < num3; j++)
					{
						Dust dust = Dust.NewDustDirect(vector + new Vector2(-16f, (float)(num * 16)) + Utils.RandomVector2(Main.rand, -30f, 30f), 4, 4, 6, 0f, -4f, 0, default(Color), 1f + 0.7f * Main.rand.NextFloat());
						dust.velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -0.6f);
						if (Main.rand.Next(2) == 0)
						{
							dust.velocity *= 2f;
							dust.noGravity = true;
						}
						dust.velocity += new Vector2(0f, hitTree ? -1f : -2f);
					}
				}
				if (!hitTree)
				{
					Gore.NewGoreDirect(vector + new Vector2(-16f, (float)(num * 16 - 40)) + Utils.RandomVector2(Main.rand, -40f, 40f) * new Vector2(0.5f, 1f), Vector2.Zero, 61 + Main.rand.Next(3), 1f).velocity *= 0.5f;
				}
			}
		}

		// Token: 0x060011C6 RID: 4550 RVA: 0x00425DB4 File Offset: 0x00423FB4
		public unsafe static bool IsTileALeafyTreeTop(int i, int j)
		{
			Tile tileSafely = Framing.GetTileSafely(i, j);
			if (tileSafely.active() && TileID.Sets.GetsCheckedForLeaves[(int)(*tileSafely.type)])
			{
				if (*tileSafely.type == 323 && *tileSafely.frameX >= 88)
				{
					return true;
				}
				if (*tileSafely.frameX == 22 && *tileSafely.frameY >= 198 && *tileSafely.frameY <= 242)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060011C7 RID: 4551 RVA: 0x00425E2C File Offset: 0x0042402C
		public static bool IsTileTypeFitForTree(ushort type)
		{
			if (type <= 109)
			{
				if (type <= 23)
				{
					if (type != 2 && type != 23)
					{
						goto IL_64;
					}
				}
				else if (type != 60 && type != 70 && type != 109)
				{
					goto IL_64;
				}
			}
			else if (type <= 477)
			{
				if (type != 147 && type != 199 && type != 477)
				{
					goto IL_64;
				}
			}
			else if (type != 492 && type != 633 && type - 661 > 1)
			{
				goto IL_64;
			}
			return true;
			IL_64:
			return TileLoader.CanGrowModTree((int)type);
		}

		// Token: 0x060011C8 RID: 4552 RVA: 0x00425EA4 File Offset: 0x004240A4
		public unsafe static bool GrowTree(int i, int y)
		{
			int j = y;
			while (TileID.Sets.TreeSapling[(int)(*Main.tile[i, j].type)])
			{
				j++;
			}
			if ((*Main.tile[i - 1, j - 1].liquid != 0 || *Main.tile[i, j - 1].liquid != 0 || *Main.tile[i + 1, j - 1].liquid != 0) && !WorldGen.notTheBees)
			{
				return false;
			}
			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && WorldGen.IsTileTypeFitForTree(*Main.tile[i, j].type) && ((Main.remixWorld && (double)j > Main.worldSurface) || *Main.tile[i, j - 1].wall == 0 || WorldGen.DefaultTreeWallTest((int)(*Main.tile[i, j - 1].wall))) && ((Main.tile[i - 1, j].active() && WorldGen.IsTileTypeFitForTree(*Main.tile[i - 1, j].type)) || (Main.tile[i + 1, j].active() && WorldGen.IsTileTypeFitForTree(*Main.tile[i + 1, j].type))))
			{
				TileColorCache cache = Main.tile[i, j].BlockColorAndCoating();
				if (Main.tenthAnniversaryWorld && !WorldGen.gen)
				{
					cache.Color = (byte)WorldGen.genRand.Next(1, 13);
				}
				int num = 2;
				int num2 = WorldGen.genRand.Next(5, 17);
				int num3 = num2 + 4;
				if (*Main.tile[i, j].type == 60)
				{
					num3 += 5;
				}
				bool flag = false;
				if (*Main.tile[i, j].type == 70 && WorldGen.EmptyTileCheck(i - num, i + num, j - num3, j - 3, 20) && WorldGen.EmptyTileCheck(i - 1, i + 1, j - 2, j - 1, 20))
				{
					flag = true;
				}
				if (WorldGen.EmptyTileCheck(i - num, i + num, j - num3, j - 1, 20))
				{
					flag = true;
				}
				if (flag)
				{
					bool flag2 = Main.remixWorld && (double)j < Main.worldSurface;
					bool flag3 = false;
					bool flag4 = false;
					int num4;
					for (int k = j - num2; k < j; k++)
					{
						Main.tile[i, k].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, k].active(true);
						*Main.tile[i, k].type = 5;
						Main.tile[i, k].UseBlockColors(cache);
						num4 = WorldGen.genRand.Next(3);
						int num5 = WorldGen.genRand.Next(10);
						if (k == j - 1 || k == j - num2)
						{
							num5 = 0;
						}
						while (((num5 == 5 || num5 == 7) && flag3) || ((num5 == 6 || num5 == 7) && flag4))
						{
							num5 = WorldGen.genRand.Next(10);
						}
						flag3 = false;
						flag4 = false;
						if (num5 == 5 || num5 == 7)
						{
							flag3 = true;
						}
						if (num5 == 6 || num5 == 7)
						{
							flag4 = true;
						}
						switch (num5)
						{
						case 1:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 66;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 88;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 2:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 0;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 22;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						case 3:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 66;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 88;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 44;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 4:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 66;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 88;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 22;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 5:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 0;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 22;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 88;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						case 6:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 66;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 88;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 66;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						case 7:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 66;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 88;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 110;
								*Main.tile[i, k].frameY = 110;
							}
							break;
						default:
							if (num4 == 0)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 0;
							}
							if (num4 == 1)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 22;
							}
							if (num4 == 2)
							{
								*Main.tile[i, k].frameX = 0;
								*Main.tile[i, k].frameY = 44;
							}
							break;
						}
						if (num5 == 5 || num5 == 7)
						{
							Main.tile[i - 1, k].active(true);
							*Main.tile[i - 1, k].type = 5;
							Main.tile[i - 1, k].UseBlockColors(cache);
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2 && !flag2)
							{
								if (num4 == 0)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 198;
								}
								if (num4 == 1)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 220;
								}
								if (num4 == 2)
								{
									*Main.tile[i - 1, k].frameX = 44;
									*Main.tile[i - 1, k].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 0;
								}
								if (num4 == 1)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 22;
								}
								if (num4 == 2)
								{
									*Main.tile[i - 1, k].frameX = 66;
									*Main.tile[i - 1, k].frameY = 44;
								}
							}
						}
						if (num5 == 6 || num5 == 7)
						{
							Main.tile[i + 1, k].active(true);
							*Main.tile[i + 1, k].type = 5;
							Main.tile[i + 1, k].UseBlockColors(cache);
							num4 = WorldGen.genRand.Next(3);
							if (WorldGen.genRand.Next(3) < 2 && !flag2)
							{
								if (num4 == 0)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 198;
								}
								if (num4 == 1)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 220;
								}
								if (num4 == 2)
								{
									*Main.tile[i + 1, k].frameX = 66;
									*Main.tile[i + 1, k].frameY = 242;
								}
							}
							else
							{
								if (num4 == 0)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 66;
								}
								if (num4 == 1)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 88;
								}
								if (num4 == 2)
								{
									*Main.tile[i + 1, k].frameX = 88;
									*Main.tile[i + 1, k].frameY = 110;
								}
							}
						}
					}
					int num6 = WorldGen.genRand.Next(3);
					bool flag5 = false;
					bool flag6 = false;
					if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && WorldGen.IsTileTypeFitForTree(*Main.tile[i - 1, j].type))
					{
						flag5 = true;
					}
					if (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && WorldGen.IsTileTypeFitForTree(*Main.tile[i + 1, j].type))
					{
						flag6 = true;
					}
					if (!flag5)
					{
						if (num6 == 0)
						{
							num6 = 2;
						}
						if (num6 == 1)
						{
							num6 = 3;
						}
					}
					if (!flag6)
					{
						if (num6 == 0)
						{
							num6 = 1;
						}
						if (num6 == 2)
						{
							num6 = 3;
						}
					}
					if (flag5 && !flag6)
					{
						num6 = 2;
					}
					if (flag6 && !flag5)
					{
						num6 = 1;
					}
					if (num6 == 0 || num6 == 1)
					{
						Main.tile[i + 1, j - 1].active(true);
						*Main.tile[i + 1, j - 1].type = 5;
						Main.tile[i + 1, j - 1].UseBlockColors(cache);
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							*Main.tile[i + 1, j - 1].frameX = 22;
							*Main.tile[i + 1, j - 1].frameY = 176;
						}
					}
					if (num6 == 0 || num6 == 2)
					{
						Main.tile[i - 1, j - 1].active(true);
						*Main.tile[i - 1, j - 1].type = 5;
						Main.tile[i - 1, j - 1].UseBlockColors(cache);
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							*Main.tile[i - 1, j - 1].frameX = 44;
							*Main.tile[i - 1, j - 1].frameY = 176;
						}
					}
					num4 = WorldGen.genRand.Next(3);
					switch (num6)
					{
					case 0:
						if (num4 == 0)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							*Main.tile[i, j - 1].frameX = 88;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					case 1:
						if (num4 == 0)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							*Main.tile[i, j - 1].frameX = 0;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					case 2:
						if (num4 == 0)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 132;
						}
						if (num4 == 1)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 154;
						}
						if (num4 == 2)
						{
							*Main.tile[i, j - 1].frameX = 66;
							*Main.tile[i, j - 1].frameY = 176;
						}
						break;
					}
					if (WorldGen.genRand.Next(13) != 0 && !flag2)
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 198;
						}
						if (num4 == 1)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 220;
						}
						if (num4 == 2)
						{
							*Main.tile[i, j - num2].frameX = 22;
							*Main.tile[i, j - num2].frameY = 242;
						}
					}
					else
					{
						num4 = WorldGen.genRand.Next(3);
						if (num4 == 0)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 198;
						}
						if (num4 == 1)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 220;
						}
						if (num4 == 2)
						{
							*Main.tile[i, j - num2].frameX = 0;
							*Main.tile[i, j - num2].frameY = 242;
						}
					}
					WorldGen.RangeFrame(i - 2, j - num2 - 1, i + 2, j + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i - 1, j - num2, 3, num2, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x060011C9 RID: 4553 RVA: 0x004272B2 File Offset: 0x004254B2
		public static bool DefaultTreeWallTest(int wallType)
		{
			return wallType >= 0 && WallID.Sets.AllowsPlantsToGrow[wallType];
		}

		// Token: 0x060011CA RID: 4554 RVA: 0x004272C4 File Offset: 0x004254C4
		public static bool GemTreeWallTest(int wallType)
		{
			if (WorldGen.DefaultTreeWallTest(wallType))
			{
				return true;
			}
			if (wallType <= 61)
			{
				if (wallType != 2 && wallType - 54 > 5 && wallType != 61)
				{
					return false;
				}
			}
			else if (wallType != 185 && wallType - 196 > 3 && wallType - 208 > 7)
			{
				return false;
			}
			return true;
		}

		// Token: 0x060011CB RID: 4555 RVA: 0x00427311 File Offset: 0x00425511
		public static bool GemTreeGroundTest(int tileType)
		{
			return tileType >= 0 && (TileID.Sets.Conversion.Stone[tileType] || TileID.Sets.Conversion.Moss[tileType]);
		}

		// Token: 0x060011CC RID: 4556 RVA: 0x0042732E File Offset: 0x0042552E
		public static bool VanityTreeGroundTest(int tileType)
		{
			return tileType >= 0 && TileID.Sets.Conversion.Grass[tileType];
		}

		// Token: 0x060011CD RID: 4557 RVA: 0x00427342 File Offset: 0x00425542
		public static bool AshTreeGroundTest(int tileType)
		{
			return tileType >= 0 && tileType == 633;
		}

		// Token: 0x060011CE RID: 4558 RVA: 0x00427358 File Offset: 0x00425558
		public static bool TryGrowingTreeByType(int treeTileType, int checkedX, int checkedY)
		{
			bool result = false;
			if (treeTileType <= 596)
			{
				if (treeTileType != 5)
				{
					switch (treeTileType)
					{
					case 583:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz);
						break;
					case 584:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst);
						break;
					case 585:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire);
						break;
					case 586:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald);
						break;
					case 587:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby);
						break;
					case 588:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond);
						break;
					case 589:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.GemTree_Amber);
						break;
					case 596:
						result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
						break;
					}
				}
				else
				{
					result = WorldGen.GrowTree(checkedX, checkedY);
				}
			}
			else if (treeTileType != 616)
			{
				if (treeTileType == 634)
				{
					result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.Tree_Ash);
				}
			}
			else
			{
				result = WorldGen.GrowTreeWithSettings(checkedX, checkedY, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
			}
			return result;
		}

		// Token: 0x060011CF RID: 4559 RVA: 0x0042747C File Offset: 0x0042567C
		public unsafe static bool GrowTreeWithSettings(int checkedX, int checkedY, WorldGen.GrowTreeSettings settings)
		{
			int i = checkedY;
			while (*Main.tile[checkedX, i].type == settings.SaplingTileType)
			{
				i++;
			}
			if (*Main.tile[checkedX - 1, i - 1].liquid != 0 || *Main.tile[checkedX, i - 1].liquid != 0 || *Main.tile[checkedX + 1, i - 1].liquid != 0)
			{
				return false;
			}
			Tile tile = Main.tile[checkedX, i];
			if (!tile.nactive() || tile.halfBrick() || tile.slope() != 0)
			{
				return false;
			}
			bool flag = settings.WallTest((int)(*Main.tile[checkedX, i - 1].wall));
			if (!settings.GroundTest((int)(*tile.type)) || !flag)
			{
				return false;
			}
			if ((!Main.tile[checkedX - 1, i].active() || !settings.GroundTest((int)(*Main.tile[checkedX - 1, i].type))) && (!Main.tile[checkedX + 1, i].active() || !settings.GroundTest((int)(*Main.tile[checkedX + 1, i].type))))
			{
				return false;
			}
			TileColorCache cache = Main.tile[checkedX, i].BlockColorAndCoating();
			if (Main.tenthAnniversaryWorld && !WorldGen.gen && (settings.TreeTileType == 596 || settings.TreeTileType == 616))
			{
				cache.Color = (byte)WorldGen.genRand.Next(1, 13);
			}
			int num = 2;
			int num2 = WorldGen.genRand.Next(settings.TreeHeightMin, settings.TreeHeightMax + 1);
			int num3 = num2 + settings.TreeTopPaddingNeeded;
			if (!WorldGen.EmptyTileCheck(checkedX - num, checkedX + num, i - num3, i - 1, 20))
			{
				return false;
			}
			bool flag2 = false;
			bool flag3 = false;
			int num4;
			for (int j = i - num2; j < i; j++)
			{
				Tile tile2 = Main.tile[checkedX, j];
				tile2.frameNumber((byte)WorldGen.genRand.Next(3));
				tile2.active(true);
				*tile2.type = settings.TreeTileType;
				tile2.UseBlockColors(cache);
				num4 = WorldGen.genRand.Next(3);
				int num5 = WorldGen.genRand.Next(10);
				if (j == i - 1 || j == i - num2)
				{
					num5 = 0;
				}
				while (((num5 == 5 || num5 == 7) && flag2) || ((num5 == 6 || num5 == 7) && flag3))
				{
					num5 = WorldGen.genRand.Next(10);
				}
				flag2 = false;
				flag3 = false;
				if (num5 == 5 || num5 == 7)
				{
					flag2 = true;
				}
				if (num5 == 6 || num5 == 7)
				{
					flag3 = true;
				}
				switch (num5)
				{
				case 1:
					if (num4 == 0)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 66;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 88;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 110;
					}
					break;
				case 2:
					if (num4 == 0)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 0;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 22;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 44;
					}
					break;
				case 3:
					if (num4 == 0)
					{
						*tile2.frameX = 44;
						*tile2.frameY = 66;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 44;
						*tile2.frameY = 88;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 44;
						*tile2.frameY = 110;
					}
					break;
				case 4:
					if (num4 == 0)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 66;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 88;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 22;
						*tile2.frameY = 110;
					}
					break;
				case 5:
					if (num4 == 0)
					{
						*tile2.frameX = 88;
						*tile2.frameY = 0;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 88;
						*tile2.frameY = 22;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 88;
						*tile2.frameY = 44;
					}
					break;
				case 6:
					if (num4 == 0)
					{
						*tile2.frameX = 66;
						*tile2.frameY = 66;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 66;
						*tile2.frameY = 88;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 66;
						*tile2.frameY = 110;
					}
					break;
				case 7:
					if (num4 == 0)
					{
						*tile2.frameX = 110;
						*tile2.frameY = 66;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 110;
						*tile2.frameY = 88;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 110;
						*tile2.frameY = 110;
					}
					break;
				default:
					if (num4 == 0)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 0;
					}
					if (num4 == 1)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 22;
					}
					if (num4 == 2)
					{
						*tile2.frameX = 0;
						*tile2.frameY = 44;
					}
					break;
				}
				if (num5 == 5 || num5 == 7)
				{
					Tile tile3 = Main.tile[checkedX - 1, j];
					tile3.active(true);
					*tile3.type = settings.TreeTileType;
					tile3.UseBlockColors(cache);
					num4 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num4 == 0)
						{
							*tile3.frameX = 44;
							*tile3.frameY = 198;
						}
						if (num4 == 1)
						{
							*tile3.frameX = 44;
							*tile3.frameY = 220;
						}
						if (num4 == 2)
						{
							*tile3.frameX = 44;
							*tile3.frameY = 242;
						}
					}
					else
					{
						if (num4 == 0)
						{
							*tile3.frameX = 66;
							*tile3.frameY = 0;
						}
						if (num4 == 1)
						{
							*tile3.frameX = 66;
							*tile3.frameY = 22;
						}
						if (num4 == 2)
						{
							*tile3.frameX = 66;
							*tile3.frameY = 44;
						}
					}
				}
				if (num5 == 6 || num5 == 7)
				{
					Tile tile4 = Main.tile[checkedX + 1, j];
					tile4.active(true);
					*tile4.type = settings.TreeTileType;
					tile4.UseBlockColors(cache);
					num4 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num4 == 0)
						{
							*tile4.frameX = 66;
							*tile4.frameY = 198;
						}
						if (num4 == 1)
						{
							*tile4.frameX = 66;
							*tile4.frameY = 220;
						}
						if (num4 == 2)
						{
							*tile4.frameX = 66;
							*tile4.frameY = 242;
						}
					}
					else
					{
						if (num4 == 0)
						{
							*tile4.frameX = 88;
							*tile4.frameY = 66;
						}
						if (num4 == 1)
						{
							*tile4.frameX = 88;
							*tile4.frameY = 88;
						}
						if (num4 == 2)
						{
							*tile4.frameX = 88;
							*tile4.frameY = 110;
						}
					}
				}
			}
			bool flag4 = false;
			bool flag5 = false;
			if (Main.tile[checkedX - 1, i].nactive() && !Main.tile[checkedX - 1, i].halfBrick() && Main.tile[checkedX - 1, i].slope() == 0 && WorldGen.IsTileTypeFitForTree(*Main.tile[checkedX - 1, i].type))
			{
				flag4 = true;
			}
			if (Main.tile[checkedX + 1, i].nactive() && !Main.tile[checkedX + 1, i].halfBrick() && Main.tile[checkedX + 1, i].slope() == 0 && WorldGen.IsTileTypeFitForTree(*Main.tile[checkedX + 1, i].type))
			{
				flag5 = true;
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				flag4 = false;
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				flag5 = false;
			}
			if (flag5)
			{
				Main.tile[checkedX + 1, i - 1].active(true);
				*Main.tile[checkedX + 1, i - 1].type = settings.TreeTileType;
				Main.tile[checkedX + 1, i - 1].UseBlockColors(cache);
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[checkedX + 1, i - 1].frameX = 22;
					*Main.tile[checkedX + 1, i - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX + 1, i - 1].frameX = 22;
					*Main.tile[checkedX + 1, i - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX + 1, i - 1].frameX = 22;
					*Main.tile[checkedX + 1, i - 1].frameY = 176;
				}
			}
			if (flag4)
			{
				Main.tile[checkedX - 1, i - 1].active(true);
				*Main.tile[checkedX - 1, i - 1].type = settings.TreeTileType;
				Main.tile[checkedX - 1, i - 1].UseBlockColors(cache);
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[checkedX - 1, i - 1].frameX = 44;
					*Main.tile[checkedX - 1, i - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX - 1, i - 1].frameX = 44;
					*Main.tile[checkedX - 1, i - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX - 1, i - 1].frameX = 44;
					*Main.tile[checkedX - 1, i - 1].frameY = 176;
				}
			}
			num4 = WorldGen.genRand.Next(3);
			if (flag4 && flag5)
			{
				if (num4 == 0)
				{
					*Main.tile[checkedX, i - 1].frameX = 88;
					*Main.tile[checkedX, i - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX, i - 1].frameX = 88;
					*Main.tile[checkedX, i - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX, i - 1].frameX = 88;
					*Main.tile[checkedX, i - 1].frameY = 176;
				}
			}
			else if (flag4)
			{
				if (num4 == 0)
				{
					*Main.tile[checkedX, i - 1].frameX = 0;
					*Main.tile[checkedX, i - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX, i - 1].frameX = 0;
					*Main.tile[checkedX, i - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX, i - 1].frameX = 0;
					*Main.tile[checkedX, i - 1].frameY = 176;
				}
			}
			else if (flag5)
			{
				if (num4 == 0)
				{
					*Main.tile[checkedX, i - 1].frameX = 66;
					*Main.tile[checkedX, i - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX, i - 1].frameX = 66;
					*Main.tile[checkedX, i - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX, i - 1].frameX = 66;
					*Main.tile[checkedX, i - 1].frameY = 176;
				}
			}
			if (WorldGen.genRand.Next(13) != 0)
			{
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[checkedX, i - num2].frameX = 22;
					*Main.tile[checkedX, i - num2].frameY = 198;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX, i - num2].frameX = 22;
					*Main.tile[checkedX, i - num2].frameY = 220;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX, i - num2].frameX = 22;
					*Main.tile[checkedX, i - num2].frameY = 242;
				}
			}
			else
			{
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[checkedX, i - num2].frameX = 0;
					*Main.tile[checkedX, i - num2].frameY = 198;
				}
				if (num4 == 1)
				{
					*Main.tile[checkedX, i - num2].frameX = 0;
					*Main.tile[checkedX, i - num2].frameY = 220;
				}
				if (num4 == 2)
				{
					*Main.tile[checkedX, i - num2].frameX = 0;
					*Main.tile[checkedX, i - num2].frameY = 242;
				}
			}
			WorldGen.RangeFrame(checkedX - 2, i - num2 - 1, checkedX + 2, i + 1);
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, checkedX - 1, i - num2, 3, num2, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x060011D0 RID: 4560 RVA: 0x00428358 File Offset: 0x00426558
		public unsafe static void GrowUndergroundTree(int i, int y)
		{
			if (*Main.tile[i, y].type != 60 || !Main.tile[i, y].nactive() || Main.tile[i, y].halfBrick() || Main.tile[i, y].slope() != 0 || *Main.tile[i, y].type != 60 || ((!Main.tile[i - 1, y].active() || *Main.tile[i - 1, y].type != 60) && (!Main.tile[i + 1, y].active() || *Main.tile[i + 1, y].type != 60)))
			{
				return;
			}
			int num = 1;
			int num2 = WorldGen.genRand.Next(5, 15);
			int num3 = num2 + 2;
			if (*Main.tile[i, y].type == 60)
			{
				num3 += 5;
			}
			if (!WorldGen.EmptyTileCheck(i - num, i + num, y - num3, y - 1, 20))
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			int num4;
			for (int j = y - num2; j < y; j++)
			{
				Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
				Main.tile[i, j].active(true);
				*Main.tile[i, j].type = 5;
				num4 = WorldGen.genRand.Next(3);
				int num5 = WorldGen.genRand.Next(10);
				if (j == y - 1 || j == y - num2)
				{
					num5 = 0;
				}
				while (((num5 == 5 || num5 == 7) && flag) || ((num5 == 6 || num5 == 7) && flag2))
				{
					num5 = WorldGen.genRand.Next(10);
				}
				flag = false;
				flag2 = false;
				if (num5 == 5 || num5 == 7)
				{
					flag = true;
				}
				if (num5 == 6 || num5 == 7)
				{
					flag2 = true;
				}
				switch (num5)
				{
				case 1:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 66;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 88;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 110;
					}
					break;
				case 2:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 0;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 22;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 44;
					}
					break;
				case 3:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 44;
						*Main.tile[i, j].frameY = 66;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 44;
						*Main.tile[i, j].frameY = 88;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 44;
						*Main.tile[i, j].frameY = 110;
					}
					break;
				case 4:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 66;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 88;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 22;
						*Main.tile[i, j].frameY = 110;
					}
					break;
				case 5:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 0;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 22;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 44;
					}
					break;
				case 6:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 66;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 88;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 110;
					}
					break;
				case 7:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 66;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 88;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 110;
					}
					break;
				default:
					if (num4 == 0)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 0;
					}
					if (num4 == 1)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 22;
					}
					if (num4 == 2)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 44;
					}
					break;
				}
				if (num5 == 5 || num5 == 7)
				{
					Main.tile[i - 1, j].active(true);
					*Main.tile[i - 1, j].type = 5;
					num4 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num4 == 0)
						{
							*Main.tile[i - 1, j].frameX = 44;
							*Main.tile[i - 1, j].frameY = 198;
						}
						if (num4 == 1)
						{
							*Main.tile[i - 1, j].frameX = 44;
							*Main.tile[i - 1, j].frameY = 220;
						}
						if (num4 == 2)
						{
							*Main.tile[i - 1, j].frameX = 44;
							*Main.tile[i - 1, j].frameY = 242;
						}
					}
					else
					{
						if (num4 == 0)
						{
							*Main.tile[i - 1, j].frameX = 66;
							*Main.tile[i - 1, j].frameY = 0;
						}
						if (num4 == 1)
						{
							*Main.tile[i - 1, j].frameX = 66;
							*Main.tile[i - 1, j].frameY = 22;
						}
						if (num4 == 2)
						{
							*Main.tile[i - 1, j].frameX = 66;
							*Main.tile[i - 1, j].frameY = 44;
						}
					}
				}
				if (num5 == 6 || num5 == 7)
				{
					Main.tile[i + 1, j].active(true);
					*Main.tile[i + 1, j].type = 5;
					num4 = WorldGen.genRand.Next(3);
					if (WorldGen.genRand.Next(3) < 2)
					{
						if (num4 == 0)
						{
							*Main.tile[i + 1, j].frameX = 66;
							*Main.tile[i + 1, j].frameY = 198;
						}
						if (num4 == 1)
						{
							*Main.tile[i + 1, j].frameX = 66;
							*Main.tile[i + 1, j].frameY = 220;
						}
						if (num4 == 2)
						{
							*Main.tile[i + 1, j].frameX = 66;
							*Main.tile[i + 1, j].frameY = 242;
						}
					}
					else
					{
						if (num4 == 0)
						{
							*Main.tile[i + 1, j].frameX = 88;
							*Main.tile[i + 1, j].frameY = 66;
						}
						if (num4 == 1)
						{
							*Main.tile[i + 1, j].frameX = 88;
							*Main.tile[i + 1, j].frameY = 88;
						}
						if (num4 == 2)
						{
							*Main.tile[i + 1, j].frameX = 88;
							*Main.tile[i + 1, j].frameY = 110;
						}
					}
				}
			}
			int num6 = WorldGen.genRand.Next(3);
			bool flag3 = false;
			bool flag4 = false;
			if (Main.tile[i - 1, y].nactive() && !Main.tile[i - 1, y].halfBrick() && Main.tile[i - 1, y].slope() == 0 && (*Main.tile[i - 1, y].type == 2 || *Main.tile[i - 1, y].type == 23 || *Main.tile[i - 1, y].type == 60 || *Main.tile[i - 1, y].type == 109 || *Main.tile[i - 1, y].type == 147 || TileLoader.CanGrowModTree((int)(*Main.tile[i - 1, y].type))))
			{
				flag3 = true;
			}
			if (Main.tile[i + 1, y].nactive() && !Main.tile[i + 1, y].halfBrick() && Main.tile[i + 1, y].slope() == 0 && (*Main.tile[i + 1, y].type == 2 || *Main.tile[i + 1, y].type == 23 || *Main.tile[i + 1, y].type == 60 || *Main.tile[i + 1, y].type == 109 || *Main.tile[i + 1, y].type == 147 || TileLoader.CanGrowModTree((int)(*Main.tile[i + 1, y].type))))
			{
				flag4 = true;
			}
			if (!flag3)
			{
				if (num6 == 0)
				{
					num6 = 2;
				}
				if (num6 == 1)
				{
					num6 = 3;
				}
			}
			if (!flag4)
			{
				if (num6 == 0)
				{
					num6 = 1;
				}
				if (num6 == 2)
				{
					num6 = 3;
				}
			}
			if (flag3 && !flag4)
			{
				num6 = 2;
			}
			if (flag4 && !flag3)
			{
				num6 = 1;
			}
			if (num6 == 0 || num6 == 1)
			{
				Main.tile[i + 1, y - 1].active(true);
				*Main.tile[i + 1, y - 1].type = 5;
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[i + 1, y - 1].frameX = 22;
					*Main.tile[i + 1, y - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[i + 1, y - 1].frameX = 22;
					*Main.tile[i + 1, y - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[i + 1, y - 1].frameX = 22;
					*Main.tile[i + 1, y - 1].frameY = 176;
				}
			}
			if (num6 == 0 || num6 == 2)
			{
				Main.tile[i - 1, y - 1].active(true);
				*Main.tile[i - 1, y - 1].type = 5;
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[i - 1, y - 1].frameX = 44;
					*Main.tile[i - 1, y - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[i - 1, y - 1].frameX = 44;
					*Main.tile[i - 1, y - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[i - 1, y - 1].frameX = 44;
					*Main.tile[i - 1, y - 1].frameY = 176;
				}
			}
			num4 = WorldGen.genRand.Next(3);
			switch (num6)
			{
			case 0:
				if (num4 == 0)
				{
					*Main.tile[i, y - 1].frameX = 88;
					*Main.tile[i, y - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[i, y - 1].frameX = 88;
					*Main.tile[i, y - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[i, y - 1].frameX = 88;
					*Main.tile[i, y - 1].frameY = 176;
				}
				break;
			case 1:
				if (num4 == 0)
				{
					*Main.tile[i, y - 1].frameX = 0;
					*Main.tile[i, y - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[i, y - 1].frameX = 0;
					*Main.tile[i, y - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[i, y - 1].frameX = 0;
					*Main.tile[i, y - 1].frameY = 176;
				}
				break;
			case 2:
				if (num4 == 0)
				{
					*Main.tile[i, y - 1].frameX = 66;
					*Main.tile[i, y - 1].frameY = 132;
				}
				if (num4 == 1)
				{
					*Main.tile[i, y - 1].frameX = 66;
					*Main.tile[i, y - 1].frameY = 154;
				}
				if (num4 == 2)
				{
					*Main.tile[i, y - 1].frameX = 66;
					*Main.tile[i, y - 1].frameY = 176;
				}
				break;
			}
			if (WorldGen.genRand.Next(8) != 0)
			{
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[i, y - num2].frameX = 22;
					*Main.tile[i, y - num2].frameY = 198;
				}
				if (num4 == 1)
				{
					*Main.tile[i, y - num2].frameX = 22;
					*Main.tile[i, y - num2].frameY = 220;
				}
				if (num4 == 2)
				{
					*Main.tile[i, y - num2].frameX = 22;
					*Main.tile[i, y - num2].frameY = 242;
				}
			}
			else
			{
				num4 = WorldGen.genRand.Next(3);
				if (num4 == 0)
				{
					*Main.tile[i, y - num2].frameX = 0;
					*Main.tile[i, y - num2].frameY = 198;
				}
				if (num4 == 1)
				{
					*Main.tile[i, y - num2].frameX = 0;
					*Main.tile[i, y - num2].frameY = 220;
				}
				if (num4 == 2)
				{
					*Main.tile[i, y - num2].frameX = 0;
					*Main.tile[i, y - num2].frameY = 242;
				}
			}
			WorldGen.RangeFrame(i - 2, y - num2 - 1, i + 2, y + 1);
			if (Main.netMode == 2 && !WorldGen.gen)
			{
				NetMessage.SendTileSquare(-1, i - 1, y - num2, 3, num2, TileChangeType.None);
			}
		}

		// Token: 0x060011D1 RID: 4561 RVA: 0x00429728 File Offset: 0x00427928
		public unsafe static bool GrowShroom(int i, int y)
		{
			if (Main.tile[i - 1, y - 1].lava() || Main.tile[i - 1, y - 1].lava() || Main.tile[i + 1, y - 1].lava())
			{
				return false;
			}
			if (Main.tile[i, y].nactive() && *Main.tile[i, y].type == 70 && *Main.tile[i, y - 1].wall == 0 && Main.tile[i - 1, y].active() && *Main.tile[i - 1, y].type == 70 && Main.tile[i + 1, y].active() && *Main.tile[i + 1, y].type == 70 && WorldGen.EmptyTileCheck(i - 2, i + 2, y - 13, y - 3, 71) && WorldGen.EmptyTileCheck(i - 1, i + 1, y - 3, y - 1, 71))
			{
				if (WorldGen.gen && WorldGen.genRand.Next(3) != 0)
				{
					Main.tile[i, y].halfBrick(false);
					Main.tile[i, y].slope(0);
				}
				if (!Main.tile[i, y].halfBrick() && Main.tile[i, y].slope() == 0)
				{
					int num = WorldGen.genRand.Next(4, 11);
					for (int j = y - num; j < y; j++)
					{
						Main.tile[i, j].frameNumber((byte)WorldGen.genRand.Next(3));
						Main.tile[i, j].active(true);
						*Main.tile[i, j].type = 72;
						int num2 = WorldGen.genRand.Next(3);
						if (num2 == 0)
						{
							*Main.tile[i, j].frameX = 0;
							*Main.tile[i, j].frameY = 0;
						}
						if (num2 == 1)
						{
							*Main.tile[i, j].frameX = 0;
							*Main.tile[i, j].frameY = 18;
						}
						if (num2 == 2)
						{
							*Main.tile[i, j].frameX = 0;
							*Main.tile[i, j].frameY = 36;
						}
					}
					int num3 = WorldGen.genRand.Next(3);
					if (num3 == 0)
					{
						*Main.tile[i, y - num].frameX = 36;
						*Main.tile[i, y - num].frameY = 0;
					}
					if (num3 == 1)
					{
						*Main.tile[i, y - num].frameX = 36;
						*Main.tile[i, y - num].frameY = 18;
					}
					if (num3 == 2)
					{
						*Main.tile[i, y - num].frameX = 36;
						*Main.tile[i, y - num].frameY = 36;
					}
					WorldGen.RangeFrame(i - 2, y - num - 1, i + 2, y + 1);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i - 1, y - num, 3, num, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x060011D2 RID: 4562 RVA: 0x00429ACC File Offset: 0x00427CCC
		public unsafe static void AddTrees(bool undergroundOnly = false)
		{
			double num = 0.1 + WorldGen.genRand.NextDouble() * 0.35;
			double num2 = 0.1 + WorldGen.genRand.NextDouble() * 0.35;
			int num3 = 20;
			int num4 = (int)Main.worldSurface;
			if (!undergroundOnly)
			{
				for (int i = 1; i < Main.maxTilesX - 1; i++)
				{
					for (int j = num3; j < num4; j++)
					{
						if (i < 380)
						{
							if (WorldGen.genRand.NextDouble() < num && *Main.tile[i, j].liquid == 0)
							{
								WorldGen.GrowPalmTree(i, j);
							}
						}
						else if (i > Main.maxTilesX - 380 && WorldGen.genRand.NextDouble() < num2 && *Main.tile[i, j].liquid == 0)
						{
							WorldGen.GrowPalmTree(i, j);
						}
						int num5 = 20;
						if (WorldGen.drunkWorldGen)
						{
							num5 /= 3;
						}
						if (WorldGen.remixWorldGen)
						{
							num5 /= 2;
						}
						if (*Main.tile[i, j].type == 2 && (Main.tenthAnniversaryWorld || WorldGen.genRand.Next(num5) == 0))
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								WorldGen.GrowTreeWithSettings(i, j, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
							}
							else
							{
								WorldGen.GrowTreeWithSettings(i, j, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
							}
						}
						else
						{
							WorldGen.GrowTree(i, j);
						}
					}
					if (WorldGen.genRand.Next(3) == 0)
					{
						i++;
					}
					if (WorldGen.genRand.Next(4) == 0)
					{
						i++;
					}
				}
			}
			if (!WorldGen.remixWorldGen)
			{
				return;
			}
			num3 = (int)Main.worldSurface;
			num4 = Main.maxTilesY - 300;
			for (int k = 1; k < Main.maxTilesX - 1; k++)
			{
				for (int l = num3; l < num4; l++)
				{
					int maxValue = 7;
					if (*Main.tile[k, l].type == 2 && (Main.tenthAnniversaryWorld || WorldGen.genRand.Next(maxValue) == 0))
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.GrowTreeWithSettings(k, l, WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow);
						}
						else
						{
							WorldGen.GrowTreeWithSettings(k, l, WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura);
						}
					}
					else
					{
						WorldGen.GrowTree(k, l);
					}
				}
			}
		}

		// Token: 0x060011D3 RID: 4563 RVA: 0x00429D38 File Offset: 0x00427F38
		public static void ExplodeMine(int i, int j, bool fromWiring)
		{
			ref ushort type = ref Main.tile[i, j].type;
			WorldGen.KillTile(i, j, false, false, true);
			NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
			Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(i, j, fromWiring, Main.LocalPlayer), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0f, 164, 250, 10f, Main.myPlayer, 0f, 0f, 0f);
		}

		// Token: 0x060011D4 RID: 4564 RVA: 0x00429DBC File Offset: 0x00427FBC
		public unsafe static bool EmptyTileCheck(int startX, int endX, int startY, int endY, int ignoreID = -1)
		{
			if (startX < 0)
			{
				return false;
			}
			if (endX >= Main.maxTilesX)
			{
				return false;
			}
			if (startY < 0)
			{
				return false;
			}
			if (endY >= Main.maxTilesY)
			{
				return false;
			}
			bool flag = false;
			if (ignoreID != -1 && TileID.Sets.CommonSapling[ignoreID])
			{
				flag = true;
			}
			for (int i = startX; i < endX + 1; i++)
			{
				for (int j = startY; j < endY + 1; j++)
				{
					if (Main.tile[i, j].active())
					{
						if (ignoreID == -1)
						{
							return false;
						}
						if (ignoreID != 11)
						{
							if (ignoreID != 71)
							{
								if (flag)
								{
									if (TileID.Sets.CommonSapling[(int)(*Main.tile[i, j].type)])
									{
										break;
									}
									if (!TileID.Sets.IgnoredByGrowingSaplings[(int)(*Main.tile[i, j].type)])
									{
										return false;
									}
								}
							}
							else if (*Main.tile[i, j].type != 71)
							{
								return false;
							}
						}
						else if (*Main.tile[i, j].type != 11)
						{
							return false;
						}
					}
				}
			}
			return true;
		}

		// Token: 0x060011D5 RID: 4565 RVA: 0x00429EC8 File Offset: 0x004280C8
		public static void StartHardmode()
		{
			if (Main.netMode != 1 && !Main.hardMode)
			{
				Main.hardMode = true;
				WaitCallback callBack;
				if ((callBack = WorldGen.<>O.<8>__smCallBack) == null)
				{
					callBack = (WorldGen.<>O.<8>__smCallBack = new WaitCallback(WorldGen.smCallBack));
				}
				ThreadPool.QueueUserWorkItem(callBack, 1);
			}
		}

		// Token: 0x060011D6 RID: 4566 RVA: 0x00429F08 File Offset: 0x00428108
		public static void TryProtectingSpawnedItems()
		{
			for (int i = 0; i < 400; i++)
			{
				Item item = Main.item[i];
				if (WorldGen.EligibleForSpawnProtection(item))
				{
					item.timeSinceItemSpawned -= 18000;
				}
			}
		}

		// Token: 0x060011D7 RID: 4567 RVA: 0x00429F47 File Offset: 0x00428147
		private static bool EligibleForSpawnProtection(Item item)
		{
			return item.active && ItemID.Sets.OverflowProtectionTimeOffset[item.type] == 0;
		}

		// Token: 0x060011D8 RID: 4568 RVA: 0x00429F64 File Offset: 0x00428164
		public static void UndoSpawnedItemProtection()
		{
			for (int i = 0; i < 400; i++)
			{
				Item item = Main.item[i];
				if (WorldGen.EligibleForSpawnProtection(item) && item.timeSinceItemSpawned < 0)
				{
					item.timeSinceItemSpawned += 18000;
				}
			}
		}

		// Token: 0x060011D9 RID: 4569 RVA: 0x00429FAC File Offset: 0x004281AC
		public static void smCallBack(object threadContext)
		{
			WorldGen.<>c__DisplayClass357_0 CS$<>8__locals1 = new WorldGen.<>c__DisplayClass357_0();
			List<GenPass> list = new List<GenPass>();
			WorldGen.IsGeneratingHardMode = true;
			WorldGen.TryProtectingSpawnedItems();
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			double num = (double)WorldGen.genRand.Next(300, 400) * 0.001;
			double num2 = (double)WorldGen.genRand.Next(200, 300) * 0.001;
			CS$<>8__locals1.num3 = (int)((double)Main.maxTilesX * num);
			CS$<>8__locals1.num4 = (int)((double)Main.maxTilesX * (1.0 - num));
			CS$<>8__locals1.num5 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				CS$<>8__locals1.num4 = (int)((double)Main.maxTilesX * num);
				CS$<>8__locals1.num3 = (int)((double)Main.maxTilesX * (1.0 - num));
				CS$<>8__locals1.num5 = -1;
			}
			int num3 = 1;
			if (GenVars.dungeonX < Main.maxTilesX / 2)
			{
				num3 = -1;
			}
			if (num3 < 0)
			{
				if (CS$<>8__locals1.num4 < CS$<>8__locals1.num3)
				{
					CS$<>8__locals1.num4 = (int)((double)Main.maxTilesX * num2);
				}
				else
				{
					CS$<>8__locals1.num3 = (int)((double)Main.maxTilesX * num2);
				}
			}
			else if (CS$<>8__locals1.num4 > CS$<>8__locals1.num3)
			{
				CS$<>8__locals1.num4 = (int)((double)Main.maxTilesX * (1.0 - num2));
			}
			else
			{
				CS$<>8__locals1.num3 = (int)((double)Main.maxTilesX * (1.0 - num2));
			}
			PassLegacy HardmodeGoodRemixPass = new PassLegacy("Hardmode Good Remix", new WorldGenLegacyMethod(WorldGen.<smCallBack>g__HardmodeGoodRemixTask|357_0));
			PassLegacy HardmodeGoodPass = new PassLegacy("Hardmode Good", new WorldGenLegacyMethod(CS$<>8__locals1.<smCallBack>g__HardmodeGoodTask|1));
			PassLegacy HardmodeEvilPass = new PassLegacy("Hardmode Evil", new WorldGenLegacyMethod(CS$<>8__locals1.<smCallBack>g__HardmodeEvilTask|2));
			list.Add(HardmodeGoodRemixPass);
			list.Add(HardmodeGoodPass);
			list.Add(HardmodeEvilPass);
			if (Main.remixWorld)
			{
				HardmodeGoodPass.Disable();
				HardmodeEvilPass.Disable();
			}
			else
			{
				HardmodeGoodRemixPass.Disable();
			}
			string name = "Hardmode Walls";
			WorldGenLegacyMethod method;
			if ((method = WorldGen.<>O.<9>__HardmodeWallsTask) == null)
			{
				method = (WorldGen.<>O.<9>__HardmodeWallsTask = new WorldGenLegacyMethod(WorldGen.HardmodeWallsTask));
			}
			list.Add(new PassLegacy(name, method));
			string name2 = "Hardmode Announcement";
			WorldGenLegacyMethod method2;
			if ((method2 = WorldGen.<>O.<10>__HardmodeAnnouncementTask) == null)
			{
				method2 = (WorldGen.<>O.<10>__HardmodeAnnouncementTask = new WorldGenLegacyMethod(WorldGen.HardmodeAnnouncementTask));
			}
			list.Add(new PassLegacy(name2, method2));
			WorldGen.smCallback_End(list);
		}

		// Token: 0x060011DA RID: 4570 RVA: 0x0042A1FC File Offset: 0x004283FC
		private unsafe static void HardmodeWallsTask(GenerationProgress progress, GameConfiguration configuration)
		{
			double num9 = (double)Main.maxTilesX / 4200.0;
			int num10 = (int)(25.0 * num9);
			ShapeData shapeData = new ShapeData();
			int num11 = 0;
			while (num10 > 0)
			{
				if (++num11 % 15000 == 0)
				{
					num10--;
				}
				Point point = WorldGen.RandomWorldPoint((int)Main.worldSurface - 100, 1, 190, 1);
				Tile tile = Main.tile[point.X, point.Y];
				Tile tile2 = Main.tile[point.X, point.Y - 1];
				ushort num12 = 0;
				if (TileID.Sets.Crimson[(int)(*tile.type)])
				{
					num12 = (ushort)(192 + WorldGen.genRand.Next(4));
				}
				else if (TileID.Sets.Corrupt[(int)(*tile.type)])
				{
					num12 = (ushort)(188 + WorldGen.genRand.Next(4));
				}
				else if (TileID.Sets.Hallow[(int)(*tile.type)])
				{
					num12 = (ushort)(200 + WorldGen.genRand.Next(4));
				}
				if (tile.active() && num12 != 0 && !tile2.active())
				{
					bool flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000), Actions.Chain(new GenAction[]
					{
						new Modifiers.IsNotSolid(),
						new Modifiers.OnlyWalls(new ushort[]
						{
							0,
							54,
							55,
							56,
							57,
							58,
							59,
							61,
							185,
							212,
							213,
							214,
							215,
							2,
							196,
							197,
							198,
							199,
							15,
							40,
							71,
							64,
							204,
							205,
							206,
							207,
							208,
							209,
							210,
							211,
							71
						}),
						new Actions.Blank().Output(shapeData)
					}));
					if (shapeData.Count > 50 && flag)
					{
						WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(shapeData, true, true), new Actions.PlaceWall(num12, true));
						num10--;
					}
					shapeData.Clear();
				}
			}
		}

		// Token: 0x060011DB RID: 4571 RVA: 0x0042A3D0 File Offset: 0x004285D0
		private static void HardmodeAnnouncementTask(GenerationProgress progress, GameConfiguration configuration)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.misc[15].Value, 50, byte.MaxValue, 130);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
			}
			AchievementsHelper.NotifyProgressionEvent(9);
		}

		// Token: 0x060011DC RID: 4572 RVA: 0x0042A444 File Offset: 0x00428644
		private static void smCallback_End(List<GenPass> hardmodeTasks)
		{
			SystemLoader.ModifyHardmodeTasks(hardmodeTasks);
			foreach (GenPass genPass in hardmodeTasks)
			{
				genPass.Apply(null, null);
			}
			if (Main.netMode == 2)
			{
				Netplay.ResetSections();
			}
			WorldGen.UndoSpawnedItemProtection();
			WorldGen.IsGeneratingHardMode = false;
		}

		// Token: 0x060011DD RID: 4573 RVA: 0x0042A4B0 File Offset: 0x004286B0
		public unsafe static bool PlaceDoor(int i, int j, int type, int style = 0)
		{
			int num = style / 36;
			int num2 = style % 36;
			int num3 = 54 * num;
			int num4 = 54 * num2;
			bool result;
			try
			{
				if (Main.tile[i, j - 2].nactive() && Main.tileSolid[(int)(*Main.tile[i, j - 2].type)] && WorldGen.SolidTile(i, j + 2, false))
				{
					Main.tile[i, j - 1].active(true);
					*Main.tile[i, j - 1].type = 10;
					*Main.tile[i, j - 1].frameY = (short)num4;
					*Main.tile[i, j - 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					Main.tile[i, j].active(true);
					*Main.tile[i, j].type = 10;
					*Main.tile[i, j].frameY = (short)(num4 + 18);
					*Main.tile[i, j].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					Main.tile[i, j + 1].active(true);
					*Main.tile[i, j + 1].type = 10;
					*Main.tile[i, j + 1].frameY = (short)(num4 + 36);
					*Main.tile[i, j + 1].frameX = (short)(num3 + WorldGen.genRand.Next(3) * 18);
					result = true;
				}
				else
				{
					result = false;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x060011DE RID: 4574 RVA: 0x0042A6AC File Offset: 0x004288AC
		public unsafe static bool CloseDoor(int i, int j, bool forced = false)
		{
			int num = 0;
			int num2 = i;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			int frameX = (int)(*Main.tile[i, j].frameX);
			Tile tile = Main.tile[i, j];
			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
			{
				return false;
			}
			int num3 = (int)(*tile.frameY);
			int num4 = 0;
			int num5 = 0;
			while (num3 >= 54)
			{
				num3 -= 54;
				num4++;
			}
			if (frameX >= 72)
			{
				num4 += 36 * (frameX / 72);
				num5 += 54 * (frameX / 72);
			}
			int num6 = j - num3 / 18;
			int num9 = frameX % 72;
			if (num9 <= 18)
			{
				if (num9 != 0)
				{
					if (num9 == 18)
					{
						num2 = i - 1;
						num = 1;
					}
				}
				else
				{
					num2 = i;
					num = 1;
				}
			}
			else if (num9 != 36)
			{
				if (num9 == 54)
				{
					num2 = i;
					num = -1;
				}
			}
			else
			{
				num2 = i + 1;
				num = -1;
			}
			int num7 = num2;
			if (num == -1)
			{
				num7 = num2 - 1;
			}
			if (!forced)
			{
				for (int k = num6; k < num6 + 3; k++)
				{
					if (!Collision.EmptyTile(num2, k, true))
					{
						return false;
					}
				}
			}
			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(tile);
			for (int l = num7; l < num7 + 2; l++)
			{
				for (int m = num6; m < num6 + 3; m++)
				{
					if (l == num2)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = default(Tile);
						}
						*Main.tile[l, m].type = closeDoorID;
						*Main.tile[l, m].frameX = (short)(WorldGen.genRand.Next(3) * 18 + num5);
					}
					else
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = default(Tile);
						}
						Main.tile[l, m].active(false);
					}
				}
			}
			if (Main.netMode != 1 && Wiring.running)
			{
				Wiring.SkipWire(num2, num6);
				Wiring.SkipWire(num2, num6 + 1);
				Wiring.SkipWire(num2, num6 + 2);
			}
			for (int n = num2 - 1; n <= num2 + 1; n++)
			{
				for (int num8 = num6 - 1; num8 <= num6 + 2; num8++)
				{
					WorldGen.TileFrame(n, num8, false, false);
				}
			}
			SoundEngine.PlaySound(9, i * 16, j * 16, 1, 1f, 0f);
			return true;
		}

		// Token: 0x060011DF RID: 4575 RVA: 0x0042A950 File Offset: 0x00428B50
		public unsafe static bool AddLifeCrystal(int i, int j)
		{
			int k = j;
			while (k < Main.maxTilesY)
			{
				if (Main.tile[i, k].active() && Main.tileSolid[(int)(*Main.tile[i, k].type)])
				{
					int num = k - 1;
					if (Main.tile[i, num - 1].lava() || Main.tile[i - 1, num - 1].lava())
					{
						return false;
					}
					if (Main.tile[i, num - 1].shimmer())
					{
						return false;
					}
					if (!WorldGen.EmptyTileCheck(i - 1, i, num - 1, num, -1))
					{
						return false;
					}
					if (Main.wallDungeon[(int)(*Main.tile[i, num].wall)])
					{
						return false;
					}
					Tile tile = Main.tile[i - 1, num + 1];
					Tile tile2 = Main.tile[i, num + 1];
					if (!tile.nactive() || !Main.tileSolid[(int)(*tile.type)])
					{
						return false;
					}
					if (!tile2.nactive() || !Main.tileSolid[(int)(*tile2.type)])
					{
						return false;
					}
					if (tile.blockType() != 0)
					{
						tile.slope(0);
						tile.halfBrick(false);
					}
					if (tile2.blockType() != 0)
					{
						tile2.slope(0);
						tile2.halfBrick(false);
					}
					Main.tile[i - 1, num - 1].active(true);
					*Main.tile[i - 1, num - 1].type = 12;
					*Main.tile[i - 1, num - 1].frameX = 0;
					*Main.tile[i - 1, num - 1].frameY = 0;
					Main.tile[i, num - 1].active(true);
					*Main.tile[i, num - 1].type = 12;
					*Main.tile[i, num - 1].frameX = 18;
					*Main.tile[i, num - 1].frameY = 0;
					Main.tile[i - 1, num].active(true);
					*Main.tile[i - 1, num].type = 12;
					*Main.tile[i - 1, num].frameX = 0;
					*Main.tile[i - 1, num].frameY = 18;
					Main.tile[i, num].active(true);
					*Main.tile[i, num].type = 12;
					*Main.tile[i, num].frameX = 18;
					*Main.tile[i, num].frameY = 18;
					return true;
				}
				else
				{
					k++;
				}
			}
			return false;
		}

		// Token: 0x060011E0 RID: 4576 RVA: 0x0042AC40 File Offset: 0x00428E40
		public unsafe static void AddShadowOrb(int x, int y)
		{
			if (x < 10 || x > Main.maxTilesX - 10 || y < 10 || y > Main.maxTilesY - 10)
			{
				return;
			}
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j].active() && *Main.tile[i, j].type == 31)
					{
						return;
					}
				}
			}
			short num = 0;
			if (WorldGen.crimson)
			{
				num += 36;
			}
			Main.tile[x - 1, y - 1].active(true);
			*Main.tile[x - 1, y - 1].type = 31;
			*Main.tile[x - 1, y - 1].frameX = num;
			*Main.tile[x - 1, y - 1].frameY = 0;
			Main.tile[x, y - 1].active(true);
			*Main.tile[x, y - 1].type = 31;
			*Main.tile[x, y - 1].frameX = 18 + num;
			*Main.tile[x, y - 1].frameY = 0;
			Main.tile[x - 1, y].active(true);
			*Main.tile[x - 1, y].type = 31;
			*Main.tile[x - 1, y].frameX = num;
			*Main.tile[x - 1, y].frameY = 18;
			Main.tile[x, y].active(true);
			*Main.tile[x, y].type = 31;
			*Main.tile[x, y].frameX = 18 + num;
			*Main.tile[x, y].frameY = 18;
		}

		// Token: 0x060011E1 RID: 4577 RVA: 0x0042AE58 File Offset: 0x00429058
		public unsafe static void AddHellHouses()
		{
			int num = (int)((double)Main.maxTilesX * 0.25);
			for (int i = 100; i < Main.maxTilesX - 100; i++)
			{
				if (((!WorldGen.drunkWorldGen && !WorldGen.remixWorldGen) || i <= num || i >= Main.maxTilesX - num) && (WorldGen.drunkWorldGen || WorldGen.remixWorldGen || (i >= num && i <= Main.maxTilesX - num)))
				{
					int num2 = Main.maxTilesY - 40;
					while (Main.tile[i, num2].active() || *Main.tile[i, num2].liquid > 0)
					{
						num2--;
					}
					if (Main.tile[i, num2 + 1].active())
					{
						ushort num3 = (ushort)WorldGen.genRand.Next(75, 77);
						byte wallType = 13;
						if (WorldGen.genRand.Next(5) > 0)
						{
							num3 = 75;
						}
						if (num3 == 75)
						{
							wallType = 14;
						}
						if (WorldGen.getGoodWorldGen)
						{
							num3 = 76;
						}
						WorldGen.HellFort(i, num2, num3, wallType);
						i += WorldGen.genRand.Next(30, 130);
						if (WorldGen.genRand.Next(10) == 0)
						{
							i += WorldGen.genRand.Next(0, 200);
						}
					}
				}
			}
			float num4 = (float)(Main.maxTilesX / 4200);
			int j = 0;
			while ((float)j < 200f * num4)
			{
				int num5 = 0;
				bool flag = false;
				while (!flag)
				{
					num5++;
					int num6 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.2), (int)((double)Main.maxTilesX * 0.8));
					int num7 = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 20);
					if (Main.tile[num6, num7].active() && (*Main.tile[num6, num7].type == 75 || *Main.tile[num6, num7].type == 76))
					{
						int num8 = 0;
						if (*Main.tile[num6 - 1, num7].wall > 0)
						{
							num8 = -1;
						}
						else if (*Main.tile[num6 + 1, num7].wall > 0)
						{
							num8 = 1;
						}
						if (!Main.tile[num6 + num8, num7].active() && !Main.tile[num6 + num8, num7 + 1].active())
						{
							bool flag2 = false;
							for (int k = num6 - 8; k < num6 + 8; k++)
							{
								for (int l = num7 - 8; l < num7 + 8; l++)
								{
									if (Main.tile[k, l].active() && TileID.Sets.Torch[(int)(*Main.tile[k, l].type)])
									{
										flag2 = true;
										break;
									}
								}
							}
							if (!flag2)
							{
								WorldGen.PlaceTile(num6 + num8, num7, 4, true, true, -1, 7);
								flag = true;
							}
						}
					}
					if (num5 > 1000)
					{
						flag = true;
					}
				}
				j++;
			}
			double num9 = 4200000.0 / (double)Main.maxTilesX;
			int m = 0;
			while ((double)m < num9)
			{
				int num10 = 0;
				int num11 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
				int n = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
				while ((*Main.tile[num11, n].wall != 13 && *Main.tile[num11, n].wall != 14) || Main.tile[num11, n].active())
				{
					num11 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					n = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						num11 = ((WorldGen.genRand.Next(2) != 0) ? WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50) : WorldGen.genRand.Next(50, num));
					}
					num10++;
					if (num10 > 100000)
					{
						break;
					}
				}
				if (num10 <= 100000 && (*Main.tile[num11, n].wall == 13 || *Main.tile[num11, n].wall == 14))
				{
					if (!Main.tile[num11, n].active())
					{
						while (!WorldGen.SolidTile(num11, n, false) && n < Main.maxTilesY - 20)
						{
							n++;
						}
						n--;
						int num12 = num11;
						int num13 = num11;
						while (!Main.tile[num12, n].active() && WorldGen.SolidTile(num12, n + 1, false))
						{
							num12--;
						}
						num12++;
						while (!Main.tile[num13, n].active() && WorldGen.SolidTile(num13, n + 1, false))
						{
							num13++;
						}
						num13--;
						int num14 = num13 - num12;
						int num15 = (num13 + num12) / 2;
						if (!Main.tile[num15, n].active() && (*Main.tile[num15, n].wall == 13 || *Main.tile[num15, n].wall == 14) && WorldGen.SolidTile(num15, n + 1, false))
						{
							int style = 16;
							int style2 = 13;
							int style3 = 14;
							int style4 = 49;
							int style5 = 4;
							int style6 = 8;
							int style7 = 15;
							int style8 = 9;
							int style9 = 10;
							int style10 = 17;
							int style11 = 25;
							int style12 = 25;
							int style13 = 23;
							int style14 = 25;
							int num16 = WorldGen.genRand.Next(13);
							int num17 = 0;
							int num18 = 0;
							if (num16 == 0)
							{
								num17 = 5;
								num18 = 4;
							}
							if (num16 == 1)
							{
								num17 = 4;
								num18 = 3;
							}
							if (num16 == 2)
							{
								num17 = 3;
								num18 = 5;
							}
							if (num16 == 3)
							{
								num17 = 4;
								num18 = 6;
							}
							if (num16 == 4)
							{
								num17 = 3;
								num18 = 3;
							}
							if (num16 == 5)
							{
								num17 = 5;
								num18 = 3;
							}
							if (num16 == 6)
							{
								num17 = 5;
								num18 = 4;
							}
							if (num16 == 7)
							{
								num17 = 5;
								num18 = 4;
							}
							if (num16 == 8)
							{
								num17 = 5;
								num18 = 4;
							}
							if (num16 == 9)
							{
								num17 = 3;
								num18 = 5;
							}
							if (num16 == 10)
							{
								num17 = 5;
								num18 = 3;
							}
							if (num16 == 11)
							{
								num17 = 2;
								num18 = 4;
							}
							if (num16 == 12)
							{
								num17 = 3;
								num18 = 3;
							}
							for (int num19 = num15 - num17; num19 <= num15 + num17; num19++)
							{
								for (int num20 = n - num18; num20 <= n; num20++)
								{
									if (Main.tile[num19, num20].active())
									{
										num16 = -1;
										break;
									}
								}
							}
							if ((double)num14 < (double)num17 * 1.75)
							{
								num16 = -1;
							}
							switch (num16)
							{
							case 0:
							{
								WorldGen.PlaceTile(num15, n, 14, true, false, -1, style2);
								int num21 = WorldGen.genRand.Next(6);
								if (num21 < 3)
								{
									WorldGen.PlaceTile(num15 + num21, n - 2, 33, true, false, -1, style12);
								}
								if (Main.tile[num15, n].active())
								{
									if (!Main.tile[num15 - 2, n].active())
									{
										WorldGen.PlaceTile(num15 - 2, n, 15, true, false, -1, style);
										if (Main.tile[num15 - 2, n].active())
										{
											ref short frameX = ref Main.tile[num15 - 2, n].frameX;
											frameX += 18;
											ref short frameX2 = ref Main.tile[num15 - 2, n - 1].frameX;
											frameX2 += 18;
										}
									}
									if (!Main.tile[num15 + 2, n].active())
									{
										WorldGen.PlaceTile(num15 + 2, n, 15, true, false, -1, style);
									}
								}
								break;
							}
							case 1:
							{
								WorldGen.PlaceTile(num15, n, 18, true, false, -1, style3);
								int num22 = WorldGen.genRand.Next(4);
								if (num22 < 2)
								{
									WorldGen.PlaceTile(num15 + num22, n - 1, 33, true, false, -1, style12);
								}
								if (Main.tile[num15, n].active())
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										if (!Main.tile[num15 - 1, n].active())
										{
											WorldGen.PlaceTile(num15 - 1, n, 15, true, false, -1, style);
											if (Main.tile[num15 - 1, n].active())
											{
												ref short frameX3 = ref Main.tile[num15 - 1, n].frameX;
												frameX3 += 18;
												ref short frameX4 = ref Main.tile[num15 - 1, n - 1].frameX;
												frameX4 += 18;
											}
										}
									}
									else if (!Main.tile[num15 + 2, n].active())
									{
										WorldGen.PlaceTile(num15 + 2, n, 15, true, false, -1, style);
									}
								}
								break;
							}
							case 2:
								WorldGen.PlaceTile(num15, n, 105, true, false, -1, style4);
								break;
							case 3:
								WorldGen.PlaceTile(num15, n, 101, true, false, -1, style5);
								break;
							case 4:
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceTile(num15, n, 15, true, false, -1, style);
									ref short frameX5 = ref Main.tile[num15, n].frameX;
									frameX5 += 18;
									ref short frameX6 = ref Main.tile[num15, n - 1].frameX;
									frameX6 += 18;
								}
								else
								{
									WorldGen.PlaceTile(num15, n, 15, true, false, -1, style);
								}
								break;
							case 5:
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.Place4x2(num15, n, 79, 1, style6);
								}
								else
								{
									WorldGen.Place4x2(num15, n, 79, -1, style6);
								}
								break;
							case 6:
								WorldGen.PlaceTile(num15, n, 87, true, false, -1, style7);
								break;
							case 7:
								WorldGen.PlaceTile(num15, n, 88, true, false, -1, style8);
								break;
							case 8:
								WorldGen.PlaceTile(num15, n, 89, true, false, -1, style9);
								break;
							case 9:
								WorldGen.PlaceTile(num15, n, 104, true, false, -1, style10);
								break;
							case 10:
								if (WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.Place4x2(num15, n, 90, 1, style14);
								}
								else
								{
									WorldGen.Place4x2(num15, n, 90, -1, style14);
								}
								break;
							case 11:
								WorldGen.PlaceTile(num15, n, 93, true, false, -1, style13);
								break;
							case 12:
								WorldGen.PlaceTile(num15, n, 100, true, false, -1, style11);
								break;
							}
						}
					}
				}
				m++;
			}
			num9 = 420000.0 / (double)Main.maxTilesX;
			int num23 = 0;
			while ((double)num23 < num9)
			{
				int num24 = 0;
				int num25 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
				int num26 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
				while ((*Main.tile[num25, num26].wall != 13 && *Main.tile[num25, num26].wall != 14) || Main.tile[num25, num26].active())
				{
					num25 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					num26 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						num25 = ((WorldGen.genRand.Next(2) != 0) ? WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50) : WorldGen.genRand.Next(50, num));
					}
					num24++;
					if (num24 > 100000)
					{
						break;
					}
				}
				if (num24 <= 100000)
				{
					int num28;
					int num29;
					int num30;
					int num31;
					for (int num27 = 0; num27 < 2; num27++)
					{
						num28 = num25;
						num29 = num25;
						while (!Main.tile[num28, num26].active() && (*Main.tile[num28, num26].wall == 13 || *Main.tile[num28, num26].wall == 14))
						{
							num28--;
						}
						num28++;
						while (!Main.tile[num29, num26].active() && (*Main.tile[num29, num26].wall == 13 || *Main.tile[num29, num26].wall == 14))
						{
							num29++;
						}
						num29--;
						num25 = (num28 + num29) / 2;
						num30 = num26;
						num31 = num26;
						while (!Main.tile[num25, num30].active() && (*Main.tile[num25, num30].wall == 13 || *Main.tile[num25, num30].wall == 14))
						{
							num30--;
						}
						num30++;
						while (!Main.tile[num25, num31].active() && (*Main.tile[num25, num31].wall == 13 || *Main.tile[num25, num31].wall == 14))
						{
							num31++;
						}
						num31--;
						num26 = (num30 + num31) / 2;
					}
					num28 = num25;
					num29 = num25;
					while (!Main.tile[num28, num26].active() && !Main.tile[num28, num26 - 1].active() && !Main.tile[num28, num26 + 1].active())
					{
						num28--;
					}
					num28++;
					while (!Main.tile[num29, num26].active() && !Main.tile[num29, num26 - 1].active() && !Main.tile[num29, num26 + 1].active())
					{
						num29++;
					}
					num29--;
					num30 = num26;
					num31 = num26;
					while (!Main.tile[num25, num30].active() && !Main.tile[num25 - 1, num30].active() && !Main.tile[num25 + 1, num30].active())
					{
						num30--;
					}
					num30++;
					while (!Main.tile[num25, num31].active() && !Main.tile[num25 - 1, num31].active() && !Main.tile[num25 + 1, num31].active())
					{
						num31++;
					}
					num31--;
					num25 = (num28 + num29) / 2;
					num26 = (num30 + num31) / 2;
					int num43 = num29 - num28;
					int num32 = num31 - num30;
					if (num43 > 7 && num32 > 5)
					{
						int num33 = 0;
						if (WorldGen.nearPicture2(num25, num26))
						{
							num33 = -1;
						}
						if (num33 == 0)
						{
							PaintingEntry paintingEntry = WorldGen.RandHellPicture();
							if (!WorldGen.nearPicture(num25, num26))
							{
								WorldGen.PlaceTile(num25, num26, paintingEntry.tileType, true, false, -1, paintingEntry.style);
							}
						}
					}
				}
				num23++;
			}
			int[] array = new int[]
			{
				WorldGen.genRand.Next(16, 22),
				WorldGen.genRand.Next(16, 22),
				WorldGen.genRand.Next(16, 22)
			};
			while (array[1] == array[0])
			{
				array[1] = WorldGen.genRand.Next(16, 22);
			}
			while (array[2] == array[0] || array[2] == array[1])
			{
				array[2] = WorldGen.genRand.Next(16, 22);
			}
			num9 = 420000.0 / (double)Main.maxTilesX;
			int num34 = 0;
			while ((double)num34 < num9)
			{
				int num35 = 0;
				int num36;
				int num37;
				do
				{
					num36 = WorldGen.genRand.Next(num, Main.maxTilesX - num);
					num37 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
					if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
					{
						num36 = ((WorldGen.genRand.Next(2) != 0) ? WorldGen.genRand.Next(Main.maxTilesX - num, Main.maxTilesX - 50) : WorldGen.genRand.Next(50, num));
					}
					num35++;
				}
				while (num35 <= 100000 && ((*Main.tile[num36, num37].wall != 13 && *Main.tile[num36, num37].wall != 14) || Main.tile[num36, num37].active()));
				if (num35 <= 100000)
				{
					while (!WorldGen.SolidTile(num36, num37, false) && num37 > 10)
					{
						num37--;
					}
					num37++;
					if (*Main.tile[num36, num37].wall == 13 || *Main.tile[num36, num37].wall == 14)
					{
						int num38 = WorldGen.genRand.Next(3);
						int style15 = 32;
						int style16 = 32;
						int num39;
						int num40;
						if (num38 != 1)
						{
							if (num38 != 2)
							{
								num39 = 1;
								num40 = 3;
							}
							else
							{
								num39 = 1;
								num40 = 2;
							}
						}
						else
						{
							num39 = 3;
							num40 = 3;
						}
						for (int num41 = num36 - 1; num41 <= num36 + num39; num41++)
						{
							for (int num42 = num37; num42 <= num37 + num40; num42++)
							{
								Tile tile = Main.tile[num36, num37];
								if (num41 < num36 || num41 == num36 + num39)
								{
									if (tile.active())
									{
										ushort num44 = *tile.type;
										if (num44 <= 34)
										{
											if (num44 - 10 > 1 && num44 != 34)
											{
												goto IL_12C9;
											}
										}
										else if (num44 != 42 && num44 != 91)
										{
											goto IL_12C9;
										}
										num38 = -1;
									}
								}
								else if (tile.active())
								{
									num38 = -1;
								}
								IL_12C9:;
							}
						}
						switch (num38)
						{
						case 0:
							WorldGen.PlaceTile(num36, num37, 91, true, false, -1, array[WorldGen.genRand.Next(3)]);
							break;
						case 1:
							WorldGen.PlaceTile(num36, num37, 34, true, false, -1, style15);
							break;
						case 2:
							WorldGen.PlaceTile(num36, num37, 42, true, false, -1, style16);
							break;
						}
					}
				}
				num34++;
			}
		}

		// Token: 0x060011E2 RID: 4578 RVA: 0x0042C1B8 File Offset: 0x0042A3B8
		public unsafe static void HellFort(int i, int j, ushort tileType = 75, byte wallType = 14)
		{
			int[] array = new int[5];
			int[] array2 = new int[5];
			int[] array3 = new int[10];
			int[] array4 = new int[10];
			int num = 8;
			int num2 = 20;
			if (WorldGen.drunkWorldGen)
			{
				num /= 2;
				num2 *= 2;
			}
			array[2] = i - WorldGen.genRand.Next(num / 2, num2 / 2);
			array2[2] = i + WorldGen.genRand.Next(num / 2, num2 / 2);
			array[3] = array2[2];
			array2[3] = array[3] + WorldGen.genRand.Next(num, num2);
			array[4] = array2[3];
			array2[4] = array[4] + WorldGen.genRand.Next(num, num2);
			array2[1] = array[2];
			array[1] = array2[1] - WorldGen.genRand.Next(num, num2);
			array2[0] = array[1];
			array[0] = array2[0] - WorldGen.genRand.Next(num, num2);
			num = 6;
			num2 = 12;
			array3[3] = j - WorldGen.genRand.Next(num, num2);
			array4[3] = j;
			for (int k = 4; k < 10; k++)
			{
				array3[k] = array4[k - 1];
				array4[k] = array3[k] + WorldGen.genRand.Next(num, num2);
			}
			for (int num3 = 2; num3 >= 0; num3--)
			{
				array4[num3] = array3[num3 + 1];
				array3[num3] = array4[num3] - WorldGen.genRand.Next(num, num2);
			}
			bool flag = false;
			bool flag2 = false;
			bool[,] array5 = new bool[5, 10];
			int num4 = 3;
			int num5 = 3;
			for (int l = 0; l < 2; l++)
			{
				if (WorldGen.genRand.Next(3) == 0 || WorldGen.drunkWorldGen)
				{
					flag = true;
					int num6 = WorldGen.genRand.Next(10);
					if (num6 < num4)
					{
						num4 = num6;
					}
					if (num6 > num5)
					{
						num5 = num6;
					}
					int num7 = 1;
					if (WorldGen.genRand.Next(2) == 0 || WorldGen.drunkWorldGen)
					{
						array5[0, num6] = true;
						array5[1, num6] = true;
						num7 = 0;
					}
					else
					{
						array5[1, num6] = true;
					}
					int num8 = WorldGen.genRand.Next(2);
					if (num8 == 0)
					{
						num8 = -1;
					}
					int num9 = WorldGen.genRand.Next(10);
					while (num9 > 0 && num6 >= 0 && num6 < 10)
					{
						array5[num7, num6] = true;
						num6 += num8;
					}
				}
				if (WorldGen.genRand.Next(3) == 0 || WorldGen.drunkWorldGen)
				{
					flag2 = true;
					int num10 = WorldGen.genRand.Next(10);
					if (num10 < num4)
					{
						num4 = num10;
					}
					if (num10 > num5)
					{
						num5 = num10;
					}
					int num11 = 3;
					if (WorldGen.genRand.Next(2) == 0 || WorldGen.drunkWorldGen)
					{
						array5[3, num10] = true;
						array5[4, num10] = true;
						num11 = 4;
					}
					else
					{
						array5[3, num10] = true;
					}
					int num12 = WorldGen.genRand.Next(2);
					if (num12 == 0)
					{
						num12 = -1;
					}
					int num13 = WorldGen.genRand.Next(10);
					while (num13 > 0 && num10 >= 0 && num10 < 10)
					{
						array5[num11, num10] = true;
						num10 += num12;
					}
				}
			}
			for (int m = 0; m < 5; m++)
			{
				int num14 = array[m];
				bool flag3 = false;
				if (num14 < 10 || num14 > Main.maxTilesX - 10)
				{
					flag3 = true;
				}
				else
				{
					for (int n = Main.UnderworldLayer; n < Main.maxTilesY; n++)
					{
						if (*Main.tile[num14, n].wall > 0)
						{
							flag3 = true;
						}
					}
				}
				if (flag3)
				{
					for (int num15 = 0; num15 < 10; num15++)
					{
						array5[m, num15] = false;
					}
				}
			}
			int num16 = WorldGen.genRand.Next(10);
			if (num16 < num4)
			{
				num4 = num16;
			}
			num16 = WorldGen.genRand.Next(10);
			if (num16 > num5)
			{
				num5 = num16;
			}
			if (!flag && !flag2)
			{
				while (num5 - num4 < 5)
				{
					num16 = WorldGen.genRand.Next(10);
					if (num16 < num4)
					{
						num4 = num16;
					}
					num16 = WorldGen.genRand.Next(10);
					if (num16 > num5)
					{
						num5 = num16;
					}
				}
			}
			for (int num17 = num4; num17 <= num5; num17++)
			{
				array5[2, num17] = true;
			}
			for (int num18 = 0; num18 < 5; num18++)
			{
				for (int num19 = 0; num19 < 10; num19++)
				{
					if (array5[num18, num19] && (array3[num19] < Main.UnderworldLayer || array4[num19] > Main.maxTilesY - 20))
					{
						array5[num18, num19] = false;
					}
				}
			}
			for (int num20 = 0; num20 < 5; num20++)
			{
				for (int num21 = 0; num21 < 10; num21++)
				{
					if (array5[num20, num21])
					{
						for (int num22 = array[num20]; num22 <= array2[num20]; num22++)
						{
							int num23 = array3[num21];
							while (num23 <= array4[num21] && num22 >= 10 && num22 <= Main.maxTilesX - 10)
							{
								*Main.tile[num22, num23].liquid = 0;
								if (num22 == array[num20] || num22 == array2[num20] || num23 == array3[num21] || num23 == array4[num21])
								{
									Main.tile[num22, num23].active(true);
									*Main.tile[num22, num23].type = tileType;
									Main.tile[num22, num23].halfBrick(false);
									Main.tile[num22, num23].slope(0);
								}
								else
								{
									*Main.tile[num22, num23].wall = (ushort)wallType;
									Main.tile[num22, num23].active(false);
								}
								num23++;
							}
						}
					}
				}
			}
			int style = 19;
			int style2 = 13;
			for (int num24 = 0; num24 < 4; num24++)
			{
				bool[] array6 = new bool[10];
				bool flag4 = false;
				for (int num25 = 0; num25 < 10; num25++)
				{
					if (array5[num24, num25] && array5[num24 + 1, num25])
					{
						array6[num25] = true;
						flag4 = true;
					}
				}
				while (flag4)
				{
					int num26 = WorldGen.genRand.Next(10);
					if (array6[num26])
					{
						flag4 = false;
						Main.tile[array2[num24], array4[num26] - 1].active(false);
						Main.tile[array2[num24], array4[num26] - 2].active(false);
						Main.tile[array2[num24], array4[num26] - 3].active(false);
						*Main.tile[array2[num24], array4[num26] - 1].wall = (ushort)wallType;
						*Main.tile[array2[num24], array4[num26] - 2].wall = (ushort)wallType;
						*Main.tile[array2[num24], array4[num26] - 3].wall = (ushort)wallType;
						WorldGen.PlaceTile(array2[num24], array4[num26] - 1, 10, true, false, -1, style);
					}
				}
			}
			for (int num27 = 0; num27 < 5; num27++)
			{
				for (int num28 = 0; num28 < 10; num28++)
				{
					if (array5[num27, num28])
					{
						if (num28 > 0 && array5[num27, num28 - 1])
						{
							int num29 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
							int num30 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
							int num31 = 0;
							while (num30 - num29 < 2 || num30 - num29 > 5)
							{
								num29 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
								num30 = WorldGen.genRand.Next(array[num27] + 2, array2[num27] - 1);
								num31++;
								if (num31 > 10000)
								{
									break;
								}
							}
							if (num31 > 10000)
							{
								break;
							}
							int num32 = num29;
							while (num32 <= num30 && num32 >= 20 && num32 <= Main.maxTilesX - 20)
							{
								Main.tile[num32, array3[num28]].active(false);
								WorldGen.PlaceTile(num32, array3[num28], 19, true, true, -1, style2);
								*Main.tile[num32, array3[num28]].wall = (ushort)wallType;
								num32++;
							}
						}
						if (num27 < 4 && array5[num27 + 1, num28] && WorldGen.genRand.Next(3) == 0)
						{
							Main.tile[array2[num27], array4[num28] - 1].active(false);
							Main.tile[array2[num27], array4[num28] - 2].active(false);
							Main.tile[array2[num27], array4[num28] - 3].active(false);
							*Main.tile[array2[num27], array4[num28] - 1].wall = (ushort)wallType;
							*Main.tile[array2[num27], array4[num28] - 2].wall = (ushort)wallType;
							*Main.tile[array2[num27], array4[num28] - 3].wall = (ushort)wallType;
							WorldGen.PlaceTile(array2[num27], array4[num28] - 1, 10, true, false, -1, style);
						}
					}
				}
			}
			bool flag5 = false;
			for (int num33 = 0; num33 < 5; num33++)
			{
				bool[] array7 = new bool[10];
				for (int num34 = 0; num34 < 10; num34++)
				{
					if (array5[num33, num34])
					{
						flag5 = true;
						array7[num34] = true;
					}
				}
				if (flag5)
				{
					bool flag6 = false;
					for (int num35 = 0; num35 < 10; num35++)
					{
						if (array7[num35])
						{
							if (!Main.tile[array[num33] - 1, array4[num35] - 1].active() && !Main.tile[array[num33] - 1, array4[num35] - 2].active() && !Main.tile[array[num33] - 1, array4[num35] - 3].active() && *Main.tile[array[num33] - 1, array4[num35] - 1].liquid == 0 && *Main.tile[array[num33] - 1, array4[num35] - 2].liquid == 0 && *Main.tile[array[num33] - 1, array4[num35] - 3].liquid == 0)
							{
								flag6 = true;
							}
							else
							{
								array7[num35] = false;
							}
						}
					}
					while (flag6)
					{
						int num36 = WorldGen.genRand.Next(10);
						if (array7[num36])
						{
							flag6 = false;
							Main.tile[array[num33], array4[num36] - 1].active(false);
							Main.tile[array[num33], array4[num36] - 2].active(false);
							Main.tile[array[num33], array4[num36] - 3].active(false);
							WorldGen.PlaceTile(array[num33], array4[num36] - 1, 10, true, false, -1, style);
						}
					}
					break;
				}
			}
			bool flag7 = false;
			for (int num37 = 4; num37 >= 0; num37--)
			{
				bool[] array8 = new bool[10];
				for (int num38 = 0; num38 < 10; num38++)
				{
					if (array5[num37, num38])
					{
						flag7 = true;
						array8[num38] = true;
					}
				}
				if (flag7)
				{
					bool flag8 = false;
					for (int num39 = 0; num39 < 10; num39++)
					{
						if (array8[num39])
						{
							if (num37 < 20 || num37 > Main.maxTilesX - 20)
							{
								IL_D30:
								while (flag8)
								{
									int num40 = WorldGen.genRand.Next(10);
									if (array8[num40])
									{
										flag8 = false;
										Main.tile[array2[num37], array4[num40] - 1].active(false);
										Main.tile[array2[num37], array4[num40] - 2].active(false);
										Main.tile[array2[num37], array4[num40] - 3].active(false);
										WorldGen.PlaceTile(array2[num37], array4[num40] - 1, 10, true, false, -1, style);
									}
								}
								goto IL_D47;
							}
							if (!Main.tile[array2[num37] + 1, array4[num39] - 1].active() && !Main.tile[array2[num37] + 1, array4[num39] - 2].active() && !Main.tile[array2[num37] + 1, array4[num39] - 3].active() && *Main.tile[array2[num37] + 1, array4[num39] - 1].liquid == 0 && *Main.tile[array2[num37] + 1, array4[num39] - 2].liquid == 0 && *Main.tile[array2[num37] + 1, array4[num39] - 3].liquid == 0)
							{
								flag8 = true;
							}
							else
							{
								array8[num39] = false;
							}
						}
					}
					goto IL_D30;
				}
			}
			IL_D47:
			bool flag9 = false;
			for (int num41 = 0; num41 < 10; num41++)
			{
				bool[] array9 = new bool[10];
				for (int num42 = 0; num42 < 5; num42++)
				{
					if (array5[num42, num41])
					{
						flag9 = true;
						array9[num42] = true;
					}
				}
				if (flag9)
				{
					bool flag10 = true;
					while (flag10)
					{
						int num43 = WorldGen.genRand.Next(5);
						if (array9[num43])
						{
							int num44 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
							int num45 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
							int num46 = 0;
							while (num45 - num44 < 2 || num45 - num44 > 5)
							{
								num44 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
								num45 = WorldGen.genRand.Next(array[num43] + 2, array2[num43] - 1);
								num46++;
								if (num46 > 10000)
								{
									break;
								}
							}
							if (num46 > 10000)
							{
								return;
							}
							int num47 = num44;
							while (num47 <= num45 && num47 >= 10 && num47 <= Main.maxTilesX - 10)
							{
								if (Main.tile[num47, array3[num41] - 1].active() || *Main.tile[num47, array3[num41] - 1].liquid > 0)
								{
									flag10 = false;
								}
								num47++;
							}
							if (flag10)
							{
								int num48 = num44;
								while (num48 <= num45 && num48 >= 10 && num48 <= Main.maxTilesX - 10)
								{
									Main.tile[num48, array3[num41]].active(false);
									WorldGen.PlaceTile(num48, array3[num41], 19, true, true, -1, style2);
									num48++;
								}
							}
							flag10 = false;
						}
					}
					return;
				}
			}
		}

		// Token: 0x060011E3 RID: 4579 RVA: 0x0042D0D0 File Offset: 0x0042B2D0
		public unsafe static void HellHouse(int i, int j, byte type = 76, byte wall = 13)
		{
			int num = WorldGen.genRand.Next(8, 20);
			int num2 = WorldGen.genRand.Next(1, 3);
			int num3 = WorldGen.genRand.Next(4, 13);
			int num4 = j;
			for (int k = 0; k < num2; k++)
			{
				int num5 = WorldGen.genRand.Next(5, 9);
				WorldGen.HellRoom(i, num4, num, num5, type, wall);
				num4 -= num5;
			}
			num4 = j;
			for (int l = 0; l < num3; l++)
			{
				int num6 = WorldGen.genRand.Next(5, 9);
				num4 += num6;
				WorldGen.HellRoom(i, num4, num, num6, type, wall);
			}
			for (int m = i - num / 2; m <= i + num / 2; m++)
			{
				num4 = j;
				while (num4 < Main.maxTilesY && ((Main.tile[m, num4].active() && (*Main.tile[m, num4].type == 76 || *Main.tile[m, num4].type == 75)) || *Main.tile[i, num4].wall == 13 || *Main.tile[i, num4].wall == 14))
				{
					num4++;
				}
				int num7 = 6 + WorldGen.genRand.Next(3);
				while (num4 < Main.maxTilesY && !Main.tile[m, num4].active())
				{
					num7--;
					Main.tile[m, num4].active(true);
					*Main.tile[m, num4].type = 57;
					num4++;
					if (num7 <= 0)
					{
						break;
					}
				}
			}
			int num8 = 0;
			int num9 = 0;
			num4 = j;
			while (num4 < Main.maxTilesY && ((Main.tile[i, num4].active() && (*Main.tile[i, num4].type == 76 || *Main.tile[i, num4].type == 75)) || *Main.tile[i, num4].wall == 13 || *Main.tile[i, num4].wall == 14))
			{
				num4++;
			}
			num4--;
			num9 = num4;
			while ((Main.tile[i, num4].active() && (*Main.tile[i, num4].type == 76 || *Main.tile[i, num4].type == 75)) || *Main.tile[i, num4].wall == 13 || *Main.tile[i, num4].wall == 14)
			{
				num4--;
				if (Main.tile[i, num4].active() && (*Main.tile[i, num4].type == 76 || *Main.tile[i, num4].type == 75))
				{
					int num10 = WorldGen.genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
					int num11 = WorldGen.genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
					if (num10 > num11)
					{
						int num20 = num10;
						num10 = num11;
						num11 = num20;
					}
					if (num10 == num11)
					{
						if (num10 < i)
						{
							num11++;
						}
						else
						{
							num10--;
						}
					}
					for (int n = num10; n <= num11; n++)
					{
						if (*Main.tile[n, num4 - 1].wall == 13)
						{
							*Main.tile[n, num4].wall = 13;
						}
						if (*Main.tile[n, num4 - 1].wall == 14)
						{
							*Main.tile[n, num4].wall = 14;
						}
						*Main.tile[n, num4].type = 19;
						Main.tile[n, num4].active(true);
					}
					num4--;
				}
			}
			num8 = num4;
			double num12 = (double)((num9 - num8) * num) * 0.02;
			int num13 = 0;
			while ((double)num13 < num12)
			{
				int num14 = WorldGen.genRand.Next(i - num / 2, i + num / 2 + 1);
				int num15 = WorldGen.genRand.Next(num8, num9);
				int num16 = WorldGen.genRand.Next(3, 8);
				for (int num17 = num14 - num16; num17 <= num14 + num16; num17++)
				{
					for (int num18 = num15 - num16; num18 <= num15 + num16; num18++)
					{
						double num21 = (double)Math.Abs(num17 - num14);
						double num19 = (double)Math.Abs(num18 - num15);
						if (Math.Sqrt(num21 * num21 + num19 * num19) < (double)num16 * 0.4)
						{
							try
							{
								if (*Main.tile[num17, num18].type == 76 || *Main.tile[num17, num18].type == 19)
								{
									Main.tile[num17, num18].active(false);
								}
								*Main.tile[num17, num18].wall = 0;
							}
							catch
							{
							}
						}
					}
				}
				num13++;
			}
		}

		// Token: 0x060011E4 RID: 4580 RVA: 0x0042D680 File Offset: 0x0042B880
		public unsafe static void HellRoom(int i, int j, int width, int height, byte type = 76, byte wall = 13)
		{
			if (j > Main.maxTilesY - 40)
			{
				return;
			}
			for (int k = i - width / 2; k <= i + width / 2; k++)
			{
				for (int l = j - height; l <= j; l++)
				{
					try
					{
						Main.tile[k, l].active(true);
						*Main.tile[k, l].type = (ushort)type;
						*Main.tile[k, l].liquid = 0;
						Main.tile[k, l].lava(false);
					}
					catch
					{
					}
				}
			}
			for (int m = i - width / 2 + 1; m <= i + width / 2 - 1; m++)
			{
				for (int n = j - height + 1; n <= j - 1; n++)
				{
					try
					{
						Main.tile[m, n].active(false);
						*Main.tile[m, n].wall = (ushort)wall;
						*Main.tile[m, n].liquid = 0;
						Main.tile[m, n].lava(false);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x060011E5 RID: 4581 RVA: 0x0042D7C8 File Offset: 0x0042B9C8
		public unsafe static void templeCleaner(int x, int y)
		{
			int num = 0;
			if (Main.tile[x + 1, y].active() && *Main.tile[x + 1, y].type == 226)
			{
				num++;
			}
			if (Main.tile[x - 1, y].active() && *Main.tile[x - 1, y].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y + 1].active() && *Main.tile[x, y + 1].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y - 1].active() && *Main.tile[x, y - 1].type == 226)
			{
				num++;
			}
			if (Main.tile[x, y].active() && *Main.tile[x, y].type == 226)
			{
				if (num <= 1)
				{
					Main.tile[x, y].active(false);
					*Main.tile[x, y].wall = 87;
					return;
				}
			}
			else if (!Main.tile[x, y].active() && num == 3)
			{
				Main.tile[x, y].active(true);
				*Main.tile[x, y].type = 226;
				*Main.tile[x, y].liquid = 0;
				Main.tile[x, y].slope(0);
				Main.tile[x, y].halfBrick(false);
			}
		}

		// Token: 0x060011E6 RID: 4582 RVA: 0x0042D9B0 File Offset: 0x0042BBB0
		public unsafe static Vector2D templePather(Vector2D templePath, int destX, int destY)
		{
			int num = (int)templePath.X;
			int num2 = (int)templePath.Y;
			int num3 = WorldGen.genRand.Next(5, 20);
			int num4 = WorldGen.genRand.Next(2, 5);
			while (num3 > 0 && (num != destX || num2 != destY))
			{
				num3--;
				if (num > destX)
				{
					num--;
				}
				if (num < destX)
				{
					num++;
				}
				if (num2 > destY)
				{
					num2--;
				}
				if (num2 < destY)
				{
					num2++;
				}
				for (int i = num - num4; i < num + num4; i++)
				{
					for (int j = num2 - num4; j < num2 + num4; j++)
					{
						Main.tile[i, j].active(false);
						*Main.tile[i, j].wall = 87;
					}
				}
			}
			return new Vector2D((double)num, (double)num2);
		}

		// Token: 0x060011E7 RID: 4583 RVA: 0x0042DA84 File Offset: 0x0042BC84
		public unsafe static void outerTempled(int x, int y)
		{
			if ((Main.tile[x, y].active() & *Main.tile[x, y].type == 226) || *Main.tile[x, y].wall == 87)
			{
				return;
			}
			int num = 6;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (!Main.tile[i, j].active() && *Main.tile[i, j].wall == 87)
					{
						Main.tile[x, y].active(true);
						*Main.tile[x, y].type = 226;
						*Main.tile[x, y].liquid = 0;
						Main.tile[x, y].slope(0);
						Main.tile[x, y].halfBrick(false);
						return;
					}
				}
			}
		}

		// Token: 0x060011E8 RID: 4584 RVA: 0x0042DBB4 File Offset: 0x0042BDB4
		public unsafe static void makeTemple(int x, int y)
		{
			Rectangle[] array = new Rectangle[100];
			double num = (double)Main.maxTilesX / 4200.0;
			int num2 = WorldGen.genRand.Next((int)(num * 10.0), (int)(num * 16.0));
			if (WorldGen.drunkWorldGen)
			{
				num2 *= 3;
			}
			else if (WorldGen.getGoodWorldGen)
			{
				num2 *= 3;
			}
			else if (WorldGen.remixWorldGen)
			{
				num2 *= 2;
			}
			int num3 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num3 = -1;
			}
			int num4 = num3;
			int num5 = x;
			int num6 = y;
			int num7 = x;
			int num8 = y;
			int num9 = WorldGen.genRand.Next(1, 3);
			int num10 = 0;
			for (int i = 0; i < num2; i++)
			{
				num10++;
				int num11 = num3;
				int num12 = num7;
				int num13 = num8;
				bool flag = true;
				int num14 = 0;
				int num15 = 0;
				int num16 = -10;
				Rectangle rectangle;
				rectangle..ctor(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
				while (flag)
				{
					num12 = num7;
					num13 = num8;
					num14 = WorldGen.genRand.Next(25, 50);
					num15 = WorldGen.genRand.Next(20, 35);
					if (num15 > num14)
					{
						num15 = num14;
					}
					if (i == num2 - 1)
					{
						num14 = WorldGen.genRand.Next(55, 65);
						num15 = WorldGen.genRand.Next(45, 50);
						if (num15 > num14)
						{
							num15 = num14;
						}
						num14 = (int)((double)num14 * 1.6);
						num15 = (int)((double)num15 * 1.35);
						num13 += WorldGen.genRand.Next(5, 10);
					}
					if (num10 > num9)
					{
						num13 += WorldGen.genRand.Next(num15 + 1, num15 + 3) + num16;
						num12 += WorldGen.genRand.Next(-5, 6);
						num11 = num3 * -1;
					}
					else
					{
						num12 += (WorldGen.genRand.Next(num14 + 1, num14 + 3) + num16) * num11;
						num13 += WorldGen.genRand.Next(-5, 6);
					}
					flag = false;
					rectangle..ctor(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
					for (int j = 0; j < i; j++)
					{
						if (rectangle.Intersects(array[j]))
						{
							flag = true;
						}
						if (WorldGen.genRand.Next(100) == 0)
						{
							num16++;
						}
					}
				}
				if (num10 > num9)
				{
					num9++;
					num10 = 1;
				}
				array[i] = rectangle;
				num3 = num11;
				num7 = num12;
				num8 = num13;
			}
			for (int k = 0; k < num2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					for (int m = 0; m < num2; m++)
					{
						for (int n = 0; n < 2; n++)
						{
							int num17 = array[k].X;
							if (l == 1)
							{
								num17 += array[k].Width - 1;
							}
							int num18 = array[k].Y;
							int num19 = num18 + array[k].Height;
							int num20 = array[m].X;
							if (n == 1)
							{
								num20 += array[m].Width - 1;
							}
							int y2 = array[m].Y;
							int num21 = y2 + array[m].Height;
							while (num17 != num20 || num18 != y2 || num19 != num21)
							{
								if (num17 < num20)
								{
									num17++;
								}
								if (num17 > num20)
								{
									num17--;
								}
								if (num18 < y2)
								{
									num18++;
								}
								if (num18 > y2)
								{
									num18--;
								}
								if (num19 < num21)
								{
									num19++;
								}
								if (num19 > num21)
								{
									num19--;
								}
								int num22 = num17;
								for (int num23 = num18; num23 < num19; num23++)
								{
									Main.tile[num22, num23].active(true);
									*Main.tile[num22, num23].type = 226;
									*Main.tile[num22, num23].liquid = 0;
									Main.tile[num22, num23].slope(0);
									Main.tile[num22, num23].halfBrick(false);
								}
							}
						}
					}
				}
			}
			for (int num24 = 0; num24 < num2; num24++)
			{
				for (int num25 = array[num24].X; num25 < array[num24].X + array[num24].Width; num25++)
				{
					for (int num26 = array[num24].Y; num26 < array[num24].Y + array[num24].Height; num26++)
					{
						Main.tile[num25, num26].active(true);
						*Main.tile[num25, num26].type = 226;
						*Main.tile[num25, num26].liquid = 0;
						Main.tile[num25, num26].slope(0);
						Main.tile[num25, num26].halfBrick(false);
					}
				}
				int x2 = array[num24].X;
				int num27 = x2 + array[num24].Width;
				int y3 = array[num24].Y;
				int num28 = y3 + array[num24].Height;
				x2 += WorldGen.genRand.Next(3, 8);
				num27 -= WorldGen.genRand.Next(3, 8);
				y3 += WorldGen.genRand.Next(3, 8);
				num28 -= WorldGen.genRand.Next(3, 8);
				int num29 = x2;
				int num30 = num27;
				int num31 = y3;
				int num32 = num28;
				int num33 = (x2 + num27) / 2;
				int num34 = (y3 + num28) / 2;
				for (int num35 = x2; num35 < num27; num35++)
				{
					for (int num36 = y3; num36 < num28; num36++)
					{
						if (WorldGen.genRand.Next(20) == 0)
						{
							num31 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num32 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num29 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num30 += WorldGen.genRand.Next(-1, 2);
						}
						if (num29 < x2)
						{
							num29 = x2;
						}
						if (num30 > num27)
						{
							num30 = num27;
						}
						if (num31 < y3)
						{
							num31 = y3;
						}
						if (num32 > num28)
						{
							num32 = num28;
						}
						if (num29 > num33)
						{
							num29 = num33;
						}
						if (num30 < num33)
						{
							num30 = num33;
						}
						if (num31 > num34)
						{
							num31 = num34;
						}
						if (num32 < num34)
						{
							num32 = num34;
						}
						if (num35 >= num29 && num35 < num30 && num36 >= num31 && num36 <= num32)
						{
							Main.tile[num35, num36].active(false);
							*Main.tile[num35, num36].wall = 87;
						}
					}
				}
				for (int num37 = num28; num37 > y3; num37--)
				{
					for (int num38 = num27; num38 > x2; num38--)
					{
						if (WorldGen.genRand.Next(20) == 0)
						{
							num31 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num32 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num29 += WorldGen.genRand.Next(-1, 2);
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							num30 += WorldGen.genRand.Next(-1, 2);
						}
						if (num29 < x2)
						{
							num29 = x2;
						}
						if (num30 > num27)
						{
							num30 = num27;
						}
						if (num31 < y3)
						{
							num31 = y3;
						}
						if (num32 > num28)
						{
							num32 = num28;
						}
						if (num29 > num33)
						{
							num29 = num33;
						}
						if (num30 < num33)
						{
							num30 = num33;
						}
						if (num31 > num34)
						{
							num31 = num34;
						}
						if (num32 < num34)
						{
							num32 = num34;
						}
						if (num38 >= num29 && num38 < num30 && num37 >= num31 && num37 <= num32)
						{
							Main.tile[num38, num37].active(false);
							*Main.tile[num38, num37].wall = 87;
						}
					}
				}
			}
			Vector2D templePath;
			templePath..ctor((double)num5, (double)num6);
			for (int num39 = 0; num39 < num2; num39++)
			{
				Rectangle rectangle2 = array[num39];
				rectangle2.X += 8;
				rectangle2.Y += 8;
				rectangle2.Width -= 16;
				rectangle2.Height -= 16;
				bool flag2 = true;
				while (flag2)
				{
					int num40 = WorldGen.genRand.Next(rectangle2.X, rectangle2.X + rectangle2.Width);
					int num41 = WorldGen.genRand.Next(rectangle2.Y, rectangle2.Y + rectangle2.Height);
					if (num39 == num2 - 1)
					{
						num40 = rectangle2.X + rectangle2.Width / 2 + WorldGen.genRand.Next(-10, 10);
						num41 = rectangle2.Y + rectangle2.Height / 2 + WorldGen.genRand.Next(-10, 10);
					}
					templePath = WorldGen.templePather(templePath, num40, num41);
					if (templePath.X == (double)num40 && templePath.Y == (double)num41)
					{
						flag2 = false;
					}
				}
				if (num39 < num2 - 1)
				{
					if (WorldGen.genRand.Next(3) != 0)
					{
						int num42 = num39 + 1;
						if (array[num42].Y >= array[num39].Y + array[num39].Height)
						{
							rectangle2.X = array[num42].X;
							if (num39 == 0)
							{
								if (num3 > 0)
								{
									rectangle2.X += (int)((double)array[num42].Width * 0.8);
								}
								else
								{
									rectangle2.X += (int)((double)array[num42].Width * 0.2);
								}
							}
							else if (array[num42].X < array[num39].X)
							{
								rectangle2.X += (int)((double)array[num42].Width * 0.2);
							}
							else
							{
								rectangle2.X += (int)((double)array[num42].Width * 0.8);
							}
							rectangle2.Y = array[num42].Y;
						}
						else
						{
							rectangle2.X = (array[num39].X + array[num39].Width / 2 + array[num42].X + array[num42].Width / 2) / 2;
							rectangle2.Y = (int)((double)array[num42].Y + (double)array[num42].Height * 0.8);
						}
						int x3 = rectangle2.X;
						int y4 = rectangle2.Y;
						flag2 = true;
						while (flag2)
						{
							int num43 = WorldGen.genRand.Next(x3 - 6, x3 + 7);
							int num44 = WorldGen.genRand.Next(y4 - 6, y4 + 7);
							templePath = WorldGen.templePather(templePath, num43, num44);
							if (templePath.X == (double)num43 && templePath.Y == (double)num44)
							{
								flag2 = false;
							}
						}
					}
					else
					{
						int num45 = num39 + 1;
						int num46 = (array[num39].X + array[num39].Width / 2 + array[num45].X + array[num45].Width / 2) / 2;
						int num47 = (array[num39].Y + array[num39].Height / 2 + array[num45].Y + array[num45].Height / 2) / 2;
						flag2 = true;
						while (flag2)
						{
							int num48 = WorldGen.genRand.Next(num46 - 6, num46 + 7);
							int num49 = WorldGen.genRand.Next(num47 - 6, num47 + 7);
							templePath = WorldGen.templePather(templePath, num48, num49);
							if (templePath.X == (double)num48 && templePath.Y == (double)num49)
							{
								flag2 = false;
							}
						}
					}
				}
			}
			int num50 = Main.maxTilesX - 20;
			int num51 = 20;
			int num52 = Main.maxTilesY - 20;
			int num53 = 20;
			for (int num54 = 0; num54 < num2; num54++)
			{
				if (array[num54].X < num50)
				{
					num50 = array[num54].X;
				}
				if (array[num54].X + array[num54].Width > num51)
				{
					num51 = array[num54].X + array[num54].Width;
				}
				if (array[num54].Y < num52)
				{
					num52 = array[num54].Y;
				}
				if (array[num54].Y + array[num54].Height > num53)
				{
					num53 = array[num54].Y + array[num54].Height;
				}
			}
			num50 -= 10;
			num51 += 10;
			num52 -= 10;
			num53 += 10;
			for (int num55 = num50; num55 < num51; num55++)
			{
				for (int num56 = num52; num56 < num53; num56++)
				{
					WorldGen.outerTempled(num55, num56);
				}
			}
			for (int num57 = num51; num57 >= num50; num57--)
			{
				for (int num58 = num52; num58 < num53 / 2; num58++)
				{
					WorldGen.outerTempled(num57, num58);
				}
			}
			for (int num59 = num52; num59 < num53; num59++)
			{
				for (int num60 = num50; num60 < num51; num60++)
				{
					WorldGen.outerTempled(num60, num59);
				}
			}
			for (int num61 = num53; num61 >= num52; num61--)
			{
				for (int num62 = num50; num62 < num51; num62++)
				{
					WorldGen.outerTempled(num62, num61);
				}
			}
			int num63 = num6;
			num3 = -num4;
			Vector2D vector2D;
			vector2D..ctor((double)num5, (double)num6);
			int num64 = WorldGen.genRand.Next(2, 5);
			bool flag3 = true;
			int num65 = 0;
			int num66 = WorldGen.genRand.Next(9, 14);
			while (flag3)
			{
				num65++;
				if (num65 >= num66)
				{
					num65 = 0;
					vector2D.Y -= 1.0;
				}
				vector2D.X += (double)num3;
				int num67 = (int)vector2D.X;
				flag3 = false;
				int num68 = (int)vector2D.Y - num64;
				while ((double)num68 < vector2D.Y + (double)num64)
				{
					if (*Main.tile[num67, num68].wall == 87 || (Main.tile[num67, num68].active() && *Main.tile[num67, num68].type == 226))
					{
						flag3 = true;
					}
					if (Main.tile[num67, num68].active() && *Main.tile[num67, num68].type == 226)
					{
						if (num68 > num63)
						{
							num63 = num68;
						}
						Main.tile[num67, num68].active(false);
						*Main.tile[num67, num68].wall = 87;
					}
					num68++;
				}
			}
			num63 += 2;
			int num69 = num5;
			int num70 = num6;
			while (!Main.tile[num69, num70].active())
			{
				num70++;
				if (num70 >= num63)
				{
					num70 = num63;
					Main.tile[num69, num70].ClearEverything();
					Main.tile[num69, num70].active(true);
					*Main.tile[num69, num70].type = 226;
					break;
				}
			}
			num70 -= 4;
			int num71 = num70;
			while ((Main.tile[num69, num71].active() && *Main.tile[num69, num71].type == 226) || *Main.tile[num69, num71].wall == 87)
			{
				num71--;
			}
			num71 += 2;
			for (int num72 = num69 - 1; num72 <= num69 + 1; num72++)
			{
				for (int num73 = num71; num73 <= num70; num73++)
				{
					Main.tile[num72, num73].active(true);
					*Main.tile[num72, num73].type = 226;
					*Main.tile[num72, num73].liquid = 0;
					Main.tile[num72, num73].slope(0);
					Main.tile[num72, num73].halfBrick(false);
				}
			}
			for (int num74 = num69 - 4; num74 <= num69 + 4; num74++)
			{
				for (int num75 = num70 - 1; num75 < num70 + 3; num75++)
				{
					Main.tile[num74, num75].active(false);
					*Main.tile[num74, num75].wall = 87;
				}
			}
			for (int num76 = num69 - 1; num76 <= num69 + 1; num76++)
			{
				for (int num77 = num70 - 5; num77 <= num70 + 8; num77++)
				{
					Main.tile[num76, num77].active(true);
					*Main.tile[num76, num77].type = 226;
					*Main.tile[num76, num77].liquid = 0;
					Main.tile[num76, num77].slope(0);
					Main.tile[num76, num77].halfBrick(false);
				}
			}
			for (int num78 = num69 - 3; num78 <= num69 + 3; num78++)
			{
				for (int num79 = num70 - 2; num79 < num70 + 3; num79++)
				{
					if (num79 >= num70 || num78 < num5 - 1 || num78 > num5 + 1)
					{
						Main.tile[num78, num79].active(false);
						*Main.tile[num78, num79].wall = 87;
					}
				}
			}
			WorldGen.PlaceTile(num69, num70, 10, true, false, -1, 11);
			for (int num80 = num50; num80 < num51; num80++)
			{
				for (int num81 = num52; num81 < num53; num81++)
				{
					WorldGen.templeCleaner(num80, num81);
				}
			}
			for (int num82 = num53; num82 >= num52; num82--)
			{
				for (int num83 = num51; num83 >= num50; num83--)
				{
					WorldGen.templeCleaner(num83, num82);
				}
			}
			for (int num84 = num50; num84 < num51; num84++)
			{
				for (int num85 = num52; num85 < num53; num85++)
				{
					bool flag4 = true;
					for (int num86 = num84 - 1; num86 <= num84 + 1; num86++)
					{
						for (int num87 = num85 - 1; num87 <= num85 + 1; num87++)
						{
							if ((!Main.tile[num86, num87].active() || *Main.tile[num86, num87].type != 226) && *Main.tile[num86, num87].wall != 87)
							{
								flag4 = false;
								break;
							}
						}
					}
					if (flag4)
					{
						*Main.tile[num84, num85].wall = 87;
					}
				}
			}
			int num88 = 0;
			Rectangle rectangle3 = array[num2 - 1];
			int num89 = rectangle3.Width / 2;
			int num90 = rectangle3.Height / 2;
			int num91;
			int num92;
			for (;;)
			{
				num88++;
				num91 = rectangle3.X + num89 + 15 - WorldGen.genRand.Next(30);
				num92 = rectangle3.Y + num90 + 15 - WorldGen.genRand.Next(30);
				WorldGen.PlaceTile(num91, num92, 237, false, false, -1, 0);
				if (*Main.tile[num91, num92].type == 237)
				{
					break;
				}
				if (num88 >= 1000)
				{
					goto Block_128;
				}
			}
			GenVars.lAltarX = num91 - (int)(*Main.tile[num91, num92].frameX / 18);
			GenVars.lAltarY = num92 - (int)(*Main.tile[num91, num92].frameY / 18);
			goto IL_1805;
			Block_128:
			num91 = rectangle3.X + num89;
			num92 = rectangle3.Y + num90;
			num91 += WorldGen.genRand.Next(-10, 11);
			num92 += WorldGen.genRand.Next(-10, 11);
			while (!Main.tile[num91, num92].active())
			{
				num92++;
			}
			Main.tile[num91 - 1, num92].active(true);
			Main.tile[num91 - 1, num92].slope(0);
			Main.tile[num91 - 1, num92].halfBrick(false);
			*Main.tile[num91 - 1, num92].type = 226;
			Main.tile[num91, num92].active(true);
			Main.tile[num91, num92].slope(0);
			Main.tile[num91, num92].halfBrick(false);
			*Main.tile[num91, num92].type = 226;
			Main.tile[num91 + 1, num92].active(true);
			Main.tile[num91 + 1, num92].slope(0);
			Main.tile[num91 + 1, num92].halfBrick(false);
			*Main.tile[num91 + 1, num92].type = 226;
			num92 -= 2;
			num91--;
			for (int num93 = -1; num93 <= 3; num93++)
			{
				for (int num94 = -1; num94 <= 1; num94++)
				{
					x = num91 + num93;
					y = num92 + num94;
					Main.tile[x, y].active(false);
				}
			}
			GenVars.lAltarX = num91;
			GenVars.lAltarY = num92;
			for (int num95 = 0; num95 <= 2; num95++)
			{
				for (int num96 = 0; num96 <= 1; num96++)
				{
					x = num91 + num95;
					y = num92 + num96;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].type = 237;
					*Main.tile[x, y].frameX = (short)(num95 * 18);
					*Main.tile[x, y].frameY = (short)(num96 * 18);
				}
			}
			for (int num97 = 0; num97 <= 2; num97++)
			{
				for (int num98 = 0; num98 <= 1; num98++)
				{
					x = num91 + num97;
					y = num92 + num98;
					WorldGen.SquareTileFrame(x, y, true);
				}
			}
			IL_1805:
			double num99 = (double)num2 * 1.1;
			num99 *= 1.0 + (double)WorldGen.genRand.Next(-25, 26) * 0.01;
			if (WorldGen.drunkWorldGen)
			{
				num99 *= 1.5;
			}
			int num100 = 0;
			while (num99 > 0.0)
			{
				num100++;
				int num101 = WorldGen.genRand.Next(num2);
				int num102 = WorldGen.genRand.Next(array[num101].X, array[num101].X + array[num101].Width);
				int num103 = WorldGen.genRand.Next(array[num101].Y, array[num101].Y + array[num101].Height);
				if (*Main.tile[num102, num103].wall == 87 && !Main.tile[num102, num103].active())
				{
					bool flag5 = false;
					if (WorldGen.genRand.Next(2) == 0)
					{
						int num104 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num104 = -1;
						}
						while (!Main.tile[num102, num103].active())
						{
							num103 += num104;
						}
						num103 -= num104;
						int num105 = WorldGen.genRand.Next(2);
						int num106 = WorldGen.genRand.Next(3, 10);
						bool flag6 = true;
						for (int num107 = num102 - num106; num107 < num102 + num106; num107++)
						{
							for (int num108 = num103 - num106; num108 < num103 + num106; num108++)
							{
								if (Main.tile[num107, num108].active() && (*Main.tile[num107, num108].type == 10 || *Main.tile[num107, num108].type == 237))
								{
									flag6 = false;
									break;
								}
							}
						}
						if (flag6)
						{
							for (int num109 = num102 - num106; num109 < num102 + num106; num109++)
							{
								for (int num110 = num103 - num106; num110 < num103 + num106; num110++)
								{
									if (WorldGen.SolidTile(num109, num110, false) && *Main.tile[num109, num110].type != 232 && !WorldGen.SolidTile(num109, num110 - num104, false))
									{
										*Main.tile[num109, num110].type = 232;
										flag5 = true;
										if (num105 == 0)
										{
											*Main.tile[num109, num110 - 1].type = 232;
											Main.tile[num109, num110 - 1].active(true);
											if (WorldGen.drunkWorldGen)
											{
												*Main.tile[num109, num110 - 2].type = 232;
												Main.tile[num109, num110 - 2].active(true);
											}
										}
										else
										{
											*Main.tile[num109, num110 + 1].type = 232;
											Main.tile[num109, num110 + 1].active(true);
											if (WorldGen.drunkWorldGen)
											{
												*Main.tile[num109, num110 + 2].type = 232;
												Main.tile[num109, num110 + 2].active(true);
											}
										}
										num105++;
										if (num105 > 1)
										{
											num105 = 0;
										}
									}
								}
							}
						}
						if (flag5)
						{
							num100 = 0;
							num99 -= 1.0;
						}
					}
					else
					{
						int num111 = 1;
						if (WorldGen.genRand.Next(2) == 0)
						{
							num111 = -1;
						}
						while (!Main.tile[num102, num103].active())
						{
							num102 += num111;
						}
						num102 -= num111;
						int num112 = WorldGen.genRand.Next(2);
						int num113 = WorldGen.genRand.Next(3, 10);
						bool flag7 = true;
						for (int num114 = num102 - num113; num114 < num102 + num113; num114++)
						{
							for (int num115 = num103 - num113; num115 < num103 + num113; num115++)
							{
								if (Main.tile[num114, num115].active() && *Main.tile[num114, num115].type == 10)
								{
									flag7 = false;
									break;
								}
							}
						}
						if (flag7)
						{
							for (int num116 = num102 - num113; num116 < num102 + num113; num116++)
							{
								for (int num117 = num103 - num113; num117 < num103 + num113; num117++)
								{
									if (WorldGen.SolidTile(num116, num117, false) && *Main.tile[num116, num117].type != 232 && !WorldGen.SolidTile(num116 - num111, num117, false))
									{
										*Main.tile[num116, num117].type = 232;
										flag5 = true;
										if (num112 == 0)
										{
											*Main.tile[num116 - 1, num117].type = 232;
											Main.tile[num116 - 1, num117].active(true);
											if (WorldGen.drunkWorldGen)
											{
												*Main.tile[num116 - 2, num117].type = 232;
												Main.tile[num116 - 2, num117].active(true);
											}
										}
										else
										{
											*Main.tile[num116 + 1, num117].type = 232;
											Main.tile[num116 + 1, num117].active(true);
											if (WorldGen.drunkWorldGen)
											{
												*Main.tile[num116 - 2, num117].type = 232;
												Main.tile[num116 - 2, num117].active(true);
											}
										}
										num112++;
										if (num112 > 1)
										{
											num112 = 0;
										}
									}
								}
							}
						}
						if (flag5)
						{
							num100 = 0;
							num99 -= 1.0;
						}
					}
				}
				if (num100 > 1000)
				{
					num100 = 0;
					num99 -= 1.0;
				}
			}
			GenVars.tLeft = num50;
			GenVars.tRight = num51;
			GenVars.tTop = num52;
			GenVars.tBottom = num53;
			GenVars.tRooms = num2;
		}

		// Token: 0x060011E9 RID: 4585 RVA: 0x0042FA68 File Offset: 0x0042DC68
		public unsafe static void templePart2()
		{
			int tLeft = GenVars.tLeft;
			int tRight = GenVars.tRight;
			int tTop = GenVars.tTop;
			int tBottom = GenVars.tBottom;
			int tRooms = GenVars.tRooms;
			double num = (double)tRooms * 1.9;
			num *= 1.0 + (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			int num2 = 0;
			while (num > 0.0)
			{
				int num3 = WorldGen.genRand.Next(tLeft, tRight);
				int num4 = WorldGen.genRand.Next(tTop, tBottom);
				if (*Main.tile[num3, num4].wall == 87 && !Main.tile[num3, num4].active())
				{
					if (WorldGen.mayanTrap(num3, num4))
					{
						num -= 1.0;
						num2 = 0;
					}
					else
					{
						num2++;
					}
				}
				else
				{
					num2++;
				}
				if (num2 > 100)
				{
					num2 = 0;
					num -= 1.0;
				}
			}
			Main.tileSolid[232] = false;
			double num5 = (double)tRooms * 0.35;
			num5 *= 1.0 + (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			int contain = 1293;
			num2 = 0;
			while (num5 > 0.0)
			{
				int num6 = WorldGen.genRand.Next(tLeft, tRight);
				int num7 = WorldGen.genRand.Next(tTop, tBottom);
				if (*Main.tile[num6, num7].wall == 87 && !Main.tile[num6, num7].active() && WorldGen.AddBuriedChest(num6, num7, contain, true, 16, false, 0))
				{
					num5 -= 1.0;
					num2 = 0;
				}
				num2++;
				if (num2 > 10000)
				{
					break;
				}
			}
			double num8 = (double)tRooms * 1.25;
			num8 *= 1.0 + (double)WorldGen.genRand.Next(-25, 36) * 0.01;
			num2 = 0;
			while (num8 > 0.0)
			{
				num2++;
				int num9 = WorldGen.genRand.Next(tLeft, tRight);
				int num10 = WorldGen.genRand.Next(tTop, tBottom);
				if (*Main.tile[num9, num10].wall == 87 && !Main.tile[num9, num10].active())
				{
					int num11 = num9;
					int num12 = num10;
					while (!Main.tile[num11, num12].active())
					{
						num12++;
						if (num12 > tBottom)
						{
							break;
						}
					}
					num12--;
					if (num12 <= tBottom)
					{
						WorldGen.PlaceTile(num11, num12, 105, true, false, -1, WorldGen.genRand.Next(43, 46));
						if (*Main.tile[num11, num12].type == 105)
						{
							num8 -= 1.0;
						}
					}
				}
			}
			double num13 = (double)tRooms * 1.35;
			num13 *= 1.0 + (double)WorldGen.genRand.Next(-15, 26) * 0.01;
			num2 = 0;
			while (num13 > 0.0)
			{
				num2++;
				int num14 = WorldGen.genRand.Next(tLeft, tRight);
				int num15 = WorldGen.genRand.Next(tTop, tBottom);
				if (*Main.tile[num14, num15].wall == 87 && !Main.tile[num14, num15].active())
				{
					int num16 = num14;
					int num17 = num15;
					while (!Main.tile[num16, num17].active())
					{
						num17++;
						if (num17 > tBottom)
						{
							break;
						}
					}
					num17--;
					if (num17 <= tBottom)
					{
						switch (WorldGen.genRand.Next(3))
						{
						case 0:
							WorldGen.PlaceTile(num16, num17, 18, true, false, -1, 10);
							if (*Main.tile[num16, num17].type == 18)
							{
								num13 -= 1.0;
							}
							break;
						case 1:
							WorldGen.PlaceTile(num16, num17, 14, true, false, -1, 9);
							if (*Main.tile[num16, num17].type == 14)
							{
								num13 -= 1.0;
							}
							break;
						case 2:
							WorldGen.PlaceTile(num16, num17, 15, true, false, -1, 12);
							if (*Main.tile[num16, num17].type == 15)
							{
								num13 -= 1.0;
							}
							break;
						}
					}
				}
				if (num2 > 10000)
				{
					break;
				}
			}
			int num18 = 1;
			if (Main.maxTilesX > 4200)
			{
				num18++;
			}
			if (Main.maxTilesX > 6400)
			{
				num18 += WorldGen.genRand.Next(2);
			}
			num2 = 0;
			while (num18 > 0)
			{
				num2++;
				int num19 = WorldGen.genRand.Next(tLeft, tRight);
				int num20 = WorldGen.genRand.Next(tTop, tBottom);
				if (*Main.tile[num19, num20].wall == 87 && !Main.tile[num19, num20].active())
				{
					bool flag = false;
					for (int i = -70; i <= 70; i++)
					{
						for (int j = -70; j <= 70; j++)
						{
							int num21 = i + num19;
							int num22 = j + num20;
							if (WorldGen.InWorld(num21, num22, 5))
							{
								Tile tile = Main.tile[num21, num22];
								if (tile.active())
								{
									if (*tile.type == 240)
									{
										flag = true;
										break;
									}
									if (i >= -4 && i <= 4 && j >= -4 && j <= 4 && *tile.type == 226)
									{
										flag = true;
										break;
									}
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
					if (flag)
					{
						continue;
					}
					if (WorldGen.PlaceTile(num19, num20, 240, true, false, -1, 88))
					{
						num18--;
					}
				}
				if (num2 > 10000)
				{
					break;
				}
			}
			Main.tileSolid[232] = true;
		}

		// Token: 0x060011EA RID: 4586 RVA: 0x004300CC File Offset: 0x0042E2CC
		public static bool nearPicture(int x, int y)
		{
			for (int i = x - 4; i <= x + 3; i++)
			{
				for (int j = y - 3; j <= y + 2; j++)
				{
					if (Main.tile[i, j].active())
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060011EB RID: 4587 RVA: 0x00430114 File Offset: 0x0042E314
		public unsafe static bool nearPicture2(int x, int y)
		{
			if (*Main.tile[x, y].wall != 7 && *Main.tile[x, y].wall != 8 && *Main.tile[x, y].wall != 9)
			{
				for (int i = x - 8; i <= x + 8; i++)
				{
					for (int j = y - 5; j <= y + 5; j++)
					{
						if (Main.tile[i, j].active() && (*Main.tile[i, j].type == 240 || *Main.tile[i, j].type == 241 || *Main.tile[i, j].type == 242))
						{
							return true;
						}
					}
				}
			}
			else
			{
				for (int k = x - 15; k <= x + 15; k++)
				{
					for (int l = y - 10; l <= y + 10; l++)
					{
						if (Main.tile[k, l].active() && (*Main.tile[k, l].type == 240 || *Main.tile[k, l].type == 241 || *Main.tile[k, l].type == 242))
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x060011EC RID: 4588 RVA: 0x004302AC File Offset: 0x0042E4AC
		private unsafe static void ShimmerCleanUp()
		{
			WorldGen.ShimmerRemoveWater();
			int num = 120;
			int num2 = 90;
			int num3 = (int)GenVars.shimmerPosition.X - num;
			int num4 = (int)GenVars.shimmerPosition.X + num;
			int num9 = (int)GenVars.shimmerPosition.Y - num;
			int num5 = (int)GenVars.shimmerPosition.Y + num;
			int num10 = num / 4;
			for (int i = num9; i <= num5; i++)
			{
				for (int j = num3; j <= num4; j++)
				{
					if ((int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y), 2.0)) < num)
					{
						if (*Main.tile[j, i].type == 22 || *Main.tile[j, i].type == 204)
						{
							*Main.tile[j, i].type = 1;
						}
						if (*Main.tile[j, i].type == 51 || *Main.tile[j, i].type == 56 || *Main.tile[j, i].type == 229 || *Main.tile[j, i].type == 230 || *Main.tile[j, i].type == 659)
						{
							Main.tile[j, i].active(false);
						}
						if (TileID.Sets.Conversion.Moss[(int)(*Main.tile[j, i].type)])
						{
							*Main.tile[j, i].type = 1;
						}
						if (*Main.tile[j, i].type == 184)
						{
							Main.tile[j, i].active(false);
						}
					}
					if ((((double)i <= GenVars.shimmerPosition.Y) ? ((int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y) * 1.4 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0))) : ((int)Math.Sqrt(Math.Pow(Math.Abs((double)j - GenVars.shimmerPosition.X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow(Math.Abs((double)i - GenVars.shimmerPosition.Y) * 1.2 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0)))) < num2)
					{
						WorldGen.Convert(j, i, 0, 3);
					}
				}
			}
			int num6 = (int)GenVars.shimmerPosition.X;
			int num7 = (int)GenVars.shimmerPosition.Y;
			byte b = 127;
			Liquid.tilesIgnoreWater(true);
			while (*Main.tile[num6, num7].liquid <= b || !Main.tile[num6, num7].shimmer())
			{
				while (!Main.tile[num6, num7].active())
				{
					*Main.tile[num6, num7].liquid = b;
					Main.tile[num6, num7].shimmer(true);
					num6--;
				}
				num6 = (int)GenVars.shimmerPosition.X;
				while (!Main.tile[num6, num7].active())
				{
					*Main.tile[num6, num7].liquid = b;
					Main.tile[num6, num7].shimmer(true);
					num6++;
				}
				num6 = (int)GenVars.shimmerPosition.X;
				num7++;
				b = byte.MaxValue;
				if (Main.tile[num6, num7].active())
				{
					break;
				}
			}
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				int num8 = 170;
				int k = (int)GenVars.shimmerPosition.X - num8;
				while ((double)k <= GenVars.shimmerPosition.X + (double)num8)
				{
					for (int l = (int)GenVars.shimmerPosition.Y + 40; l < Main.maxTilesY - 330 - 100; l++)
					{
						if (WorldGen.InWorld(k, l, 0))
						{
							if (*Main.tile[k, l].type == 375 || *Main.tile[k, l].type == 374 || *Main.tile[k, l].type == 373)
							{
								Main.tile[k, l].active(false);
							}
							if (*Main.tile[k, l].liquid > 0 && !Main.tile[k, l].shimmer())
							{
								WorldGen.Shimmerator(k, l, false, false);
							}
						}
					}
					k++;
				}
			}
			Liquid.tilesIgnoreWater(false);
			for (int m = 10; m < Main.maxTilesX - 10; m++)
			{
				for (int n = 10; n < Main.maxTilesY - 10; n++)
				{
					if (*Main.tile[m, n].liquid > 0 && Main.tile[m, n].shimmer() && *Main.tile[m, n].type == 5)
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
		}

		// Token: 0x060011ED RID: 4589 RVA: 0x00430944 File Offset: 0x0042EB44
		public unsafe static void ShimmerRemoveWater()
		{
			if (!WorldGen.generatingWorld)
			{
				return;
			}
			int num = 150;
			int num2 = (int)GenVars.shimmerPosition.X - num;
			int num3 = (int)GenVars.shimmerPosition.X + num;
			int num5 = (int)GenVars.shimmerPosition.Y - num;
			int num4 = (int)GenVars.shimmerPosition.Y + num / 2;
			for (int i = num5; i <= num4; i++)
			{
				for (int j = num2; j <= num3; j++)
				{
					if (WorldGen.InWorld(j, i, 0) && (int)Math.Sqrt(Math.Pow((double)Math.Abs(j - (int)GenVars.shimmerPosition.X), 2.0) + Math.Pow((double)Math.Abs(i - (int)GenVars.shimmerPosition.Y), 2.0)) < num && !Main.tile[j, i].shimmer())
					{
						*Main.tile[j, i].liquid = 0;
					}
				}
			}
		}

		// Token: 0x060011EE RID: 4590 RVA: 0x00430A54 File Offset: 0x0042EC54
		public unsafe static bool ShimmerMakeBiome(int X, int Y)
		{
			int num = WorldGen.genRand.Next(2);
			double num2 = 0.6;
			double num3 = 1.3;
			double num4 = 0.3;
			if (num == 0)
			{
				num2 = 0.55;
				num3 = 2.0;
			}
			num2 *= 1.05 - WorldGen.genRand.NextDouble() * 0.1;
			num3 *= 1.05 - WorldGen.genRand.NextDouble() * 0.1;
			num4 *= 1.0 - WorldGen.genRand.NextDouble() * 0.1;
			int num5 = WorldGen.genRand.Next(105, 125);
			int num6 = (int)((double)num5 * num4);
			int num7 = (int)((double)num5 * num2);
			int num8 = WorldGen.genRand.Next(9, 13);
			int num9 = X - num5;
			int num10 = X + num5;
			int num11 = Y - num5;
			int num12 = Y + num5;
			for (int i = num11; i <= num12; i++)
			{
				for (int j = num9; j <= num10; j++)
				{
					if (!WorldGen.InWorld(j, i, 50))
					{
						return false;
					}
					if (*Main.tile[j, i].type == 203 || *Main.tile[j, i].type == 25)
					{
						return false;
					}
				}
			}
			int num13 = Y;
			if (WorldGen.genRand.Next(4) == 0)
			{
				num13 = Y - WorldGen.genRand.Next(2);
			}
			int num14 = Y - num8;
			if (WorldGen.genRand.Next(4) == 0)
			{
				num14 = Y - num8 - WorldGen.genRand.Next(2);
			}
			for (int k = num11; k <= num12; k++)
			{
				for (int l = num9; l <= num10; l++)
				{
					*Main.tile[l, k].liquid = 0;
					if (WorldGen.genRand.Next(4) == 0)
					{
						num13 = Y - WorldGen.genRand.Next(2);
					}
					if (WorldGen.genRand.Next(4) == 0)
					{
						num14 = Y - num8 + WorldGen.genRand.Next(2);
					}
					int num15 = (k <= Y) ? ((int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * 1.4 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0))) : ((int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * 1.2 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0)));
					if (num15 < num5)
					{
						Main.tile[l, k].color(0);
						Main.tile[l, k].wallColor(0);
						Main.tile[l, k].slope(0);
						Main.tile[l, k].halfBrick(false);
						*Main.tile[l, k].type = 1;
						if (l > num9 + 5 + WorldGen.genRand.Next(2) && l < num10 - 5 - WorldGen.genRand.Next(2))
						{
							Main.tile[l, k].active(true);
						}
						if ((double)num15 < (double)num5 * 0.9)
						{
							*Main.tile[l, k].wall = 0;
						}
					}
					num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)Math.Abs(k - Y) * num3 * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					if (k > num14 && k < num13)
					{
						Main.tile[l, k].active(false);
					}
					if (k < num13 && num15 < (int)((double)num7 * (1.0 + WorldGen.genRand.NextDouble() * 0.02)))
					{
						Main.tile[l, k].active(false);
					}
					num15 = (int)Math.Sqrt(Math.Pow((double)Math.Abs(l - X) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0) + Math.Pow((double)(Math.Abs(k - Y) * 2) * (1.0 + WorldGen.genRand.NextDouble() * 0.02), 2.0));
					if (k >= Y - 1 && num15 < (int)((double)num6 * (1.0 + WorldGen.genRand.NextDouble() * 0.025)))
					{
						if (k <= Y + 2 || num15 != num6 - 1 || WorldGen.genRand.Next(2) != 0)
						{
							Main.tile[l, k].active(false);
						}
						if (k >= Y)
						{
							if (k == Y)
							{
								*Main.tile[l, k].liquid = 127;
							}
							else
							{
								*Main.tile[l, k].liquid = byte.MaxValue;
							}
							Main.tile[l, k].shimmer(true);
						}
					}
				}
			}
			if (num == 0)
			{
				num9 = (int)((double)X - (double)num5 * num4) - WorldGen.genRand.Next(-15, 1) - 5;
				num10 = (int)((double)X + (double)num5 * num4) + WorldGen.genRand.Next(0, 16);
				int m = num9;
				int num16 = 0;
				while (m < num10)
				{
					int num17 = Y - 3;
					while (!Main.tile[m, num17].active())
					{
						num17--;
					}
					num17 -= 4;
					int num18 = WorldGen.genRand.Next(5, 10);
					int num19 = WorldGen.genRand.Next(15, 21);
					int n = m - num18;
					while (num18 > 0)
					{
						for (n = m - num18; n < m + num18; n++)
						{
							Main.tile[n, num17].active(true);
							*Main.tile[n, num17].type = 1;
						}
						num16++;
						if (WorldGen.genRand.Next(3) < num16)
						{
							num16 = 0;
							num18--;
							m += WorldGen.genRand.Next(-1, 2);
						}
						if (num19 <= 0)
						{
							num18--;
						}
						num19--;
						num17++;
					}
					n -= WorldGen.genRand.Next(1, 3);
					Main.tile[n, num17 - 2].active(true);
					*Main.tile[n, num17 - 2].type = 1;
					Main.tile[n, num17 - 1].active(true);
					*Main.tile[n, num17 - 1].type = 1;
					Main.tile[n, num17].active(true);
					*Main.tile[n, num17].type = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						Main.tile[n, num17 + 1].active(true);
						*Main.tile[n, num17 + 1].type = 1;
						WorldGen.PlaceTight(n, num17 + 2, false);
					}
					else
					{
						WorldGen.PlaceTight(n, num17 + 1, false);
					}
					m += WorldGen.genRand.Next(9, 14);
				}
			}
			WorldGen.ShimmerMakeBiomeOpening(-1, X - num5, Y, num8);
			WorldGen.ShimmerMakeBiomeOpening(1, X + num5, Y, num8);
			int num20 = 70;
			for (int num21 = 0; num21 < 500; num21++)
			{
				int num22 = WorldGen.genRand.Next(X - num20, X + num20);
				int num23 = WorldGen.genRand.Next(Y - 2, Y + 3);
				int num24 = WorldGen.genRand.Next(7);
				int treeTileType = 0;
				switch (num24)
				{
				case 0:
					treeTileType = 583;
					break;
				case 1:
					treeTileType = 584;
					break;
				case 2:
					treeTileType = 585;
					break;
				case 3:
					treeTileType = 586;
					break;
				case 4:
					treeTileType = 587;
					break;
				case 5:
					treeTileType = 588;
					break;
				case 6:
					treeTileType = 589;
					break;
				}
				if (WorldGen.SolidTile(num22 - 1, num23, false) && WorldGen.SolidTile(num22 + 1, num23, false))
				{
					WorldGen.TryGrowingTreeByType(treeTileType, num22, num23);
				}
			}
			return true;
		}

		// Token: 0x060011EF RID: 4591 RVA: 0x004313EC File Offset: 0x0042F5EC
		private unsafe static void ShimmerMakeBiomeOpening(int direction, int X, int Y, int caveOpenningSize)
		{
			int num = X;
			caveOpenningSize--;
			bool flag;
			do
			{
				num += direction;
				flag = true;
				for (int i = Y - caveOpenningSize + 1; i < Y - 1; i++)
				{
					if (WorldGen.SolidTile(num, i, false))
					{
						flag = false;
					}
					if (WorldGen.SolidTile(num + direction, i, false))
					{
						flag = false;
					}
					if (WorldGen.SolidTile(num + direction * 2, i, false))
					{
						flag = false;
					}
					Main.tile[num, i].active(false);
				}
				for (int j = Y - caveOpenningSize; j < Y; j++)
				{
					Main.tile[num - direction, j].active(false);
				}
				if (WorldGen.SolidTile(num - direction, Y - caveOpenningSize - 1, false))
				{
					*Main.tile[num - direction, Y - caveOpenningSize - 1].wall = 0;
				}
				if (WorldGen.SolidTile(num - direction, Y, false))
				{
					*Main.tile[num - direction, Y].wall = 0;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					Y += WorldGen.genRand.Next(-1, 2);
				}
			}
			while (!flag && num >= 50 && num <= Main.maxTilesX - 50 && Math.Abs(num - X) <= 100);
		}

		// Token: 0x060011F0 RID: 4592 RVA: 0x00431510 File Offset: 0x0042F710
		private unsafe static void Shimminate()
		{
			foreach (KeyValuePair<Point, bool> countedTile in WorldGen.CountedTiles)
			{
				Point key = countedTile.Key;
				Main.tile[key.X, key.Y].shimmer(true);
				*Main.tile[key.X, key.Y].liquid = byte.MaxValue;
				if (*Main.tile[key.X, key.Y].type == 5 || *Main.tile[key.X, key.Y].type == 56 || (Main.tileCut[(int)(*Main.tile[key.X, key.Y].type)] && *Main.tile[key.X, key.Y].type != 28))
				{
					WorldGen.KillTile(key.X, key.Y, false, false, false);
				}
			}
		}

		// Token: 0x060011F1 RID: 4593 RVA: 0x0043165C File Offset: 0x0042F85C
		public static void Shimmerator(int x, int y, bool jungle = false, bool lavaOk = false)
		{
			WorldGen.numTileCount = 0;
			WorldGen.CountedTiles.Clear();
			WorldGen.ShimmeratorNext(x, y);
			if (WorldGen.numTileCount > 0 && WorldGen.numTileCount < WorldGen.maxTileCount)
			{
				WorldGen.Shimminate();
			}
		}

		// Token: 0x060011F2 RID: 4594 RVA: 0x00431690 File Offset: 0x0042F890
		private unsafe static void ShimmeratorNext(int x, int y)
		{
			if (WorldGen.numTileCount < WorldGen.maxTileCount)
			{
				if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
				{
					WorldGen.numTileCount = WorldGen.maxTileCount;
					return;
				}
				if (!WorldGen.CountedTiles.ContainsKey(new Point(x, y)) && ((!WorldGen.SolidTile(x, y, false) && !Main.tile[x, y].shimmer() && *Main.tile[x, y].liquid > 0) || (Main.tile[x, y].active() && *Main.tile[x, y].type == 56)))
				{
					WorldGen.CountedTiles.Add(new Point(x, y), true);
					WorldGen.numTileCount++;
					WorldGen.ShimmeratorNext(x - 1, y);
					WorldGen.ShimmeratorNext(x + 1, y);
					WorldGen.ShimmeratorNext(x, y - 1);
					WorldGen.ShimmeratorNext(x, y + 1);
				}
			}
		}

		// Token: 0x060011F3 RID: 4595 RVA: 0x00431794 File Offset: 0x0042F994
		public unsafe static void MakeDungeon(int x, int y)
		{
			GenVars.dEnteranceX = 0;
			GenVars.numDRooms = 0;
			GenVars.numDDoors = 0;
			GenVars.numDungeonPlatforms = 0;
			int num = WorldGen.genRand.Next(3);
			WorldGen.genRand.Next(3);
			if (WorldGen.remixWorldGen)
			{
				num = (WorldGen.crimson ? 2 : 0);
			}
			ushort num2;
			int num3;
			if (num != 0)
			{
				if (num != 1)
				{
					num2 = 44;
					num3 = 9;
					GenVars.crackedType = 483;
				}
				else
				{
					num2 = 43;
					num3 = 8;
					GenVars.crackedType = 482;
				}
			}
			else
			{
				num2 = 41;
				num3 = 7;
				GenVars.crackedType = 481;
			}
			Main.tileSolid[(int)GenVars.crackedType] = false;
			GenVars.dungeonLake = true;
			GenVars.numDDoors = 0;
			GenVars.numDungeonPlatforms = 0;
			GenVars.numDRooms = 0;
			GenVars.dungeonX = x;
			GenVars.dungeonY = y;
			GenVars.dMinX = x;
			GenVars.dMaxX = x;
			GenVars.dMinY = y;
			GenVars.dMaxY = y;
			GenVars.dxStrength1 = (double)WorldGen.genRand.Next(25, 30);
			GenVars.dyStrength1 = (double)WorldGen.genRand.Next(20, 25);
			GenVars.dxStrength2 = (double)WorldGen.genRand.Next(35, 50);
			GenVars.dyStrength2 = (double)WorldGen.genRand.Next(10, 15);
			double num4 = (double)(Main.maxTilesX / 60);
			num4 += (double)WorldGen.genRand.Next(0, (int)(num4 / 3.0));
			double num5 = num4;
			int num6 = 5;
			WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			while (num4 > 0.0)
			{
				if (GenVars.dungeonX < GenVars.dMinX)
				{
					GenVars.dMinX = GenVars.dungeonX;
				}
				if (GenVars.dungeonX > GenVars.dMaxX)
				{
					GenVars.dMaxX = GenVars.dungeonX;
				}
				if (GenVars.dungeonY > GenVars.dMaxY)
				{
					GenVars.dMaxY = GenVars.dungeonY;
				}
				num4 -= 1.0;
				Main.statusText = Lang.gen[58].Value + " " + ((int)((num5 - num4) / num5 * 60.0)).ToString() + "%";
				if (num6 > 0)
				{
					num6--;
				}
				if (num6 == 0 & WorldGen.genRand.Next(3) == 0)
				{
					num6 = 5;
					if (WorldGen.genRand.Next(2) == 0)
					{
						int dungeonX = GenVars.dungeonX;
						int dungeonY = GenVars.dungeonY;
						WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
						}
						WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
						GenVars.dungeonX = dungeonX;
						GenVars.dungeonY = dungeonY;
					}
					else
					{
						WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
					}
				}
				else
				{
					WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, false);
				}
			}
			WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			int num7 = GenVars.dRoomX[0];
			int num8 = GenVars.dRoomY[0];
			for (int i = 0; i < GenVars.numDRooms; i++)
			{
				if (GenVars.dRoomY[i] < num8)
				{
					num7 = GenVars.dRoomX[i];
					num8 = GenVars.dRoomY[i];
				}
			}
			GenVars.dungeonX = num7;
			GenVars.dungeonY = num8;
			GenVars.dEnteranceX = num7;
			GenVars.dSurface = false;
			num6 = 5;
			if (WorldGen.drunkWorldGen)
			{
				GenVars.dSurface = true;
			}
			while (!GenVars.dSurface)
			{
				if (num6 > 0)
				{
					num6--;
				}
				if (num6 == 0 && WorldGen.genRand.Next(5) == 0 && (double)GenVars.dungeonY > Main.worldSurface + 100.0)
				{
					num6 = 10;
					int dungeonX2 = GenVars.dungeonX;
					int dungeonY2 = GenVars.dungeonY;
					WorldGen.DungeonHalls(GenVars.dungeonX, GenVars.dungeonY, num2, num3, true);
					WorldGen.DungeonRoom(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
					GenVars.dungeonX = dungeonX2;
					GenVars.dungeonY = dungeonY2;
				}
				WorldGen.DungeonStairs(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			}
			WorldGen.DungeonEnt(GenVars.dungeonX, GenVars.dungeonY, num2, num3);
			Main.statusText = Lang.gen[58].Value + " 65%";
			int num9 = Main.maxTilesX * 2;
			for (int num10 = 0; num10 < num9; num10++)
			{
				int i3 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num11 = GenVars.dMinY;
				if ((double)num11 < Main.worldSurface)
				{
					num11 = (int)Main.worldSurface;
				}
				int j = WorldGen.genRand.Next(num11, GenVars.dMaxY);
				num10 = ((!WorldGen.DungeonPitTrap(i3, j, num2, num3)) ? (num10 + 1) : (num10 + 1500));
			}
			for (int k = 0; k < GenVars.numDRooms; k++)
			{
				for (int l = GenVars.dRoomL[k]; l <= GenVars.dRoomR[k]; l++)
				{
					if (!Main.tile[l, GenVars.dRoomT[k] - 1].active())
					{
						GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = l;
						GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = GenVars.dRoomT[k] - 1;
						GenVars.numDungeonPlatforms++;
						break;
					}
				}
				for (int m = GenVars.dRoomL[k]; m <= GenVars.dRoomR[k]; m++)
				{
					if (!Main.tile[m, GenVars.dRoomB[k] + 1].active())
					{
						GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = m;
						GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = GenVars.dRoomB[k] + 1;
						GenVars.numDungeonPlatforms++;
						break;
					}
				}
				for (int n = GenVars.dRoomT[k]; n <= GenVars.dRoomB[k]; n++)
				{
					if (!Main.tile[GenVars.dRoomL[k] - 1, n].active())
					{
						GenVars.DDoorX[GenVars.numDDoors] = GenVars.dRoomL[k] - 1;
						GenVars.DDoorY[GenVars.numDDoors] = n;
						GenVars.DDoorPos[GenVars.numDDoors] = -1;
						GenVars.numDDoors++;
						break;
					}
				}
				for (int num12 = GenVars.dRoomT[k]; num12 <= GenVars.dRoomB[k]; num12++)
				{
					if (!Main.tile[GenVars.dRoomR[k] + 1, num12].active())
					{
						GenVars.DDoorX[GenVars.numDDoors] = GenVars.dRoomR[k] + 1;
						GenVars.DDoorY[GenVars.numDDoors] = num12;
						GenVars.DDoorPos[GenVars.numDDoors] = 1;
						GenVars.numDDoors++;
						break;
					}
				}
			}
			Main.statusText = Lang.gen[58].Value + " 70%";
			int num13 = 0;
			int num14 = 1000;
			int num15 = 0;
			int num16 = Main.maxTilesX / 100;
			if (WorldGen.getGoodWorldGen)
			{
				num16 *= 3;
			}
			while (num15 < num16)
			{
				num13++;
				int num17 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num18 = WorldGen.genRand.Next((int)Main.worldSurface + 25, GenVars.dMaxY);
				if (WorldGen.drunkWorldGen)
				{
					num18 = WorldGen.genRand.Next(GenVars.dungeonY + 25, GenVars.dMaxY);
				}
				int num19 = num17;
				if ((int)(*Main.tile[num17, num18].wall) == num3 && !Main.tile[num17, num18].active())
				{
					int num20 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num20 = -1;
					}
					while (!Main.tile[num17, num18].active())
					{
						num18 += num20;
					}
					if (Main.tile[num17 - 1, num18].active() && Main.tile[num17 + 1, num18].active() && *Main.tile[num17 - 1, num18].type != GenVars.crackedType && !Main.tile[num17 - 1, num18 - num20].active() && !Main.tile[num17 + 1, num18 - num20].active())
					{
						num15++;
						int num21 = WorldGen.genRand.Next(5, 13);
						while (Main.tile[num17 - 1, num18].active() && *Main.tile[num17 - 1, num18].type != GenVars.crackedType && Main.tile[num17, num18 + num20].active() && Main.tile[num17, num18].active() && !Main.tile[num17, num18 - num20].active() && num21 > 0)
						{
							*Main.tile[num17, num18].type = 48;
							if (!Main.tile[num17 - 1, num18 - num20].active() && !Main.tile[num17 + 1, num18 - num20].active())
							{
								Main.tile[num17, num18 - num20].Clear(TileDataType.Slope);
								*Main.tile[num17, num18 - num20].type = 48;
								Main.tile[num17, num18 - num20].active(true);
								Main.tile[num17, num18 - num20 * 2].Clear(TileDataType.Slope);
								*Main.tile[num17, num18 - num20 * 2].type = 48;
								Main.tile[num17, num18 - num20 * 2].active(true);
							}
							num17--;
							num21--;
						}
						num21 = WorldGen.genRand.Next(5, 13);
						num17 = num19 + 1;
						while (Main.tile[num17 + 1, num18].active() && *Main.tile[num17 + 1, num18].type != GenVars.crackedType && Main.tile[num17, num18 + num20].active() && Main.tile[num17, num18].active() && !Main.tile[num17, num18 - num20].active() && num21 > 0)
						{
							*Main.tile[num17, num18].type = 48;
							if (!Main.tile[num17 - 1, num18 - num20].active() && !Main.tile[num17 + 1, num18 - num20].active())
							{
								Main.tile[num17, num18 - num20].Clear(TileDataType.Slope);
								*Main.tile[num17, num18 - num20].type = 48;
								Main.tile[num17, num18 - num20].active(true);
								Main.tile[num17, num18 - num20 * 2].Clear(TileDataType.Slope);
								*Main.tile[num17, num18 - num20 * 2].type = 48;
								Main.tile[num17, num18 - num20 * 2].active(true);
							}
							num17++;
							num21--;
						}
					}
				}
				if (num13 > num14)
				{
					num13 = 0;
					num15++;
				}
			}
			num13 = 0;
			num14 = 1000;
			num15 = 0;
			Main.statusText = Lang.gen[58].Value + " 75%";
			while (num15 < num16)
			{
				num13++;
				int num22 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num23 = WorldGen.genRand.Next((int)Main.worldSurface + 25, GenVars.dMaxY);
				int num24 = num23;
				if ((int)(*Main.tile[num22, num23].wall) == num3 && !Main.tile[num22, num23].active())
				{
					int num25 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num25 = -1;
					}
					while (num22 > 5 && num22 < Main.maxTilesX - 5 && !Main.tile[num22, num23].active())
					{
						num22 += num25;
					}
					if (Main.tile[num22, num23 - 1].active() && Main.tile[num22, num23 + 1].active() && *Main.tile[num22, num23 - 1].type != GenVars.crackedType && !Main.tile[num22 - num25, num23 - 1].active() && !Main.tile[num22 - num25, num23 + 1].active())
					{
						num15++;
						int num26 = WorldGen.genRand.Next(5, 13);
						while (Main.tile[num22, num23 - 1].active() && *Main.tile[num22, num23 - 1].type != GenVars.crackedType && Main.tile[num22 + num25, num23].active() && Main.tile[num22, num23].active() && !Main.tile[num22 - num25, num23].active() && num26 > 0)
						{
							*Main.tile[num22, num23].type = 48;
							if (!Main.tile[num22 - num25, num23 - 1].active() && !Main.tile[num22 - num25, num23 + 1].active())
							{
								*Main.tile[num22 - num25, num23].type = 48;
								Main.tile[num22 - num25, num23].active(true);
								Main.tile[num22 - num25, num23].Clear(TileDataType.Slope);
								*Main.tile[num22 - num25 * 2, num23].type = 48;
								Main.tile[num22 - num25 * 2, num23].active(true);
								Main.tile[num22 - num25 * 2, num23].Clear(TileDataType.Slope);
							}
							num23--;
							num26--;
						}
						num26 = WorldGen.genRand.Next(5, 13);
						num23 = num24 + 1;
						while (Main.tile[num22, num23 + 1].active() && *Main.tile[num22, num23 + 1].type != GenVars.crackedType && Main.tile[num22 + num25, num23].active() && Main.tile[num22, num23].active() && !Main.tile[num22 - num25, num23].active() && num26 > 0)
						{
							*Main.tile[num22, num23].type = 48;
							if (!Main.tile[num22 - num25, num23 - 1].active() && !Main.tile[num22 - num25, num23 + 1].active())
							{
								*Main.tile[num22 - num25, num23].type = 48;
								Main.tile[num22 - num25, num23].active(true);
								Main.tile[num22 - num25, num23].Clear(TileDataType.Slope);
								*Main.tile[num22 - num25 * 2, num23].type = 48;
								Main.tile[num22 - num25 * 2, num23].active(true);
								Main.tile[num22 - num25 * 2, num23].Clear(TileDataType.Slope);
							}
							num23++;
							num26--;
						}
					}
				}
				if (num13 > num14)
				{
					num13 = 0;
					num15++;
				}
			}
			Main.statusText = Lang.gen[58].Value + " 80%";
			for (int num27 = 0; num27 < GenVars.numDDoors; num27++)
			{
				int num94 = GenVars.DDoorX[num27] - 10;
				int num28 = GenVars.DDoorX[num27] + 10;
				int num29 = 100;
				int num30 = 0;
				for (int num31 = num94; num31 < num28; num31++)
				{
					bool flag = true;
					int num32 = GenVars.DDoorY[num27];
					while (num32 > 10 && !Main.tile[num31, num32].active())
					{
						num32--;
					}
					if (!Main.tileDungeon[(int)(*Main.tile[num31, num32].type)])
					{
						flag = false;
					}
					int num33 = num32;
					num32 = GenVars.DDoorY[num27];
					while (!Main.tile[num31, num32].active())
					{
						num32++;
					}
					if (!Main.tileDungeon[(int)(*Main.tile[num31, num32].type)])
					{
						flag = false;
					}
					int num34 = num32;
					if (num34 - num33 >= 3)
					{
						int num95 = num31 - 20;
						int num35 = num31 + 20;
						int num36 = num34 - 10;
						int num37 = num34 + 10;
						for (int num38 = num95; num38 < num35; num38++)
						{
							for (int num39 = num36; num39 < num37; num39++)
							{
								if (Main.tile[num38, num39].active() && *Main.tile[num38, num39].type == 10)
								{
									flag = false;
									break;
								}
							}
						}
						if (flag)
						{
							for (int num40 = num34 - 3; num40 < num34; num40++)
							{
								for (int num41 = num31 - 3; num41 <= num31 + 3; num41++)
								{
									if (Main.tile[num41, num40].active())
									{
										flag = false;
										break;
									}
								}
							}
						}
						if (flag && num34 - num33 < 20)
						{
							bool flag2 = false;
							if (GenVars.DDoorPos[num27] == 0 && num34 - num33 < num29)
							{
								flag2 = true;
							}
							if (GenVars.DDoorPos[num27] == -1 && num31 > num30)
							{
								flag2 = true;
							}
							if (GenVars.DDoorPos[num27] == 1 && (num31 < num30 || num30 == 0))
							{
								flag2 = true;
							}
							if (flag2)
							{
								num30 = num31;
								num29 = num34 - num33;
							}
						}
					}
				}
				if (num29 < 20)
				{
					int num42 = num30;
					int num43 = GenVars.DDoorY[num27];
					int num44 = num43;
					while (!Main.tile[num42, num43].active())
					{
						Main.tile[num42, num43].active(false);
						num43++;
					}
					while (!Main.tile[num42, num44].active())
					{
						num44--;
					}
					num43--;
					num44++;
					for (int num45 = num44; num45 < num43 - 2; num45++)
					{
						Main.tile[num42, num45].Clear(TileDataType.Slope);
						Main.tile[num42, num45].active(true);
						*Main.tile[num42, num45].type = num2;
						if (*Main.tile[num42 - 1, num45].type == num2)
						{
							Main.tile[num42 - 1, num45].active(false);
							Main.tile[num42 - 1, num45].ClearEverything();
							*Main.tile[num42 - 1, num45].wall = (ushort)num3;
						}
						if (*Main.tile[num42 - 2, num45].type == num2)
						{
							Main.tile[num42 - 2, num45].active(false);
							Main.tile[num42 - 2, num45].ClearEverything();
							*Main.tile[num42 - 2, num45].wall = (ushort)num3;
						}
						if (*Main.tile[num42 + 1, num45].type == num2)
						{
							Main.tile[num42 + 1, num45].active(false);
							Main.tile[num42 + 1, num45].ClearEverything();
							*Main.tile[num42 + 1, num45].wall = (ushort)num3;
						}
						if (*Main.tile[num42 + 2, num45].type == num2)
						{
							Main.tile[num42 + 2, num45].active(false);
							Main.tile[num42 + 2, num45].ClearEverything();
							*Main.tile[num42 + 2, num45].wall = (ushort)num3;
						}
					}
					int style = 13;
					if (WorldGen.genRand.Next(3) == 0)
					{
						switch (num3)
						{
						case 7:
							style = 16;
							break;
						case 8:
							style = 17;
							break;
						case 9:
							style = 18;
							break;
						}
					}
					WorldGen.PlaceTile(num42, num43, 10, true, false, -1, style);
					num42--;
					int num46 = num43 - 3;
					while (!Main.tile[num42, num46].active())
					{
						num46--;
					}
					if (num43 - num46 < num43 - num44 + 5 && Main.tileDungeon[(int)(*Main.tile[num42, num46].type)])
					{
						for (int num47 = num43 - 4 - WorldGen.genRand.Next(3); num47 > num46; num47--)
						{
							Main.tile[num42, num47].Clear(TileDataType.Slope);
							Main.tile[num42, num47].active(true);
							*Main.tile[num42, num47].type = num2;
							if (*Main.tile[num42 - 1, num47].type == num2)
							{
								Main.tile[num42 - 1, num47].active(false);
								Main.tile[num42 - 1, num47].ClearEverything();
								*Main.tile[num42 - 1, num47].wall = (ushort)num3;
							}
							if (*Main.tile[num42 - 2, num47].type == num2)
							{
								Main.tile[num42 - 2, num47].active(false);
								Main.tile[num42 - 2, num47].ClearEverything();
								*Main.tile[num42 - 2, num47].wall = (ushort)num3;
							}
						}
					}
					num42 += 2;
					num46 = num43 - 3;
					while (!Main.tile[num42, num46].active())
					{
						num46--;
					}
					if (num43 - num46 < num43 - num44 + 5 && Main.tileDungeon[(int)(*Main.tile[num42, num46].type)])
					{
						for (int num48 = num43 - 4 - WorldGen.genRand.Next(3); num48 > num46; num48--)
						{
							Main.tile[num42, num48].active(true);
							Main.tile[num42, num48].Clear(TileDataType.Slope);
							*Main.tile[num42, num48].type = num2;
							if (*Main.tile[num42 + 1, num48].type == num2)
							{
								Main.tile[num42 + 1, num48].active(false);
								Main.tile[num42 + 1, num48].ClearEverything();
								*Main.tile[num42 + 1, num48].wall = (ushort)num3;
							}
							if (*Main.tile[num42 + 2, num48].type == num2)
							{
								Main.tile[num42 + 2, num48].active(false);
								Main.tile[num42 + 2, num48].ClearEverything();
								*Main.tile[num42 + 2, num48].wall = (ushort)num3;
							}
						}
					}
					num43++;
					num42--;
					for (int num49 = num43 - 8; num49 < num43; num49++)
					{
						if (*Main.tile[num42 + 2, num49].type == num2)
						{
							Main.tile[num42 + 2, num49].active(false);
							Main.tile[num42 + 2, num49].ClearEverything();
							*Main.tile[num42 + 2, num49].wall = (ushort)num3;
						}
						if (*Main.tile[num42 + 3, num49].type == num2)
						{
							Main.tile[num42 + 3, num49].active(false);
							Main.tile[num42 + 3, num49].ClearEverything();
							*Main.tile[num42 + 3, num49].wall = (ushort)num3;
						}
						if (*Main.tile[num42 - 2, num49].type == num2)
						{
							Main.tile[num42 - 2, num49].active(false);
							Main.tile[num42 - 2, num49].ClearEverything();
							*Main.tile[num42 - 2, num49].wall = (ushort)num3;
						}
						if (*Main.tile[num42 - 3, num49].type == num2)
						{
							Main.tile[num42 - 3, num49].active(false);
							Main.tile[num42 - 3, num49].ClearEverything();
							*Main.tile[num42 - 3, num49].wall = (ushort)num3;
						}
					}
					Main.tile[num42 - 1, num43].active(true);
					*Main.tile[num42 - 1, num43].type = num2;
					Main.tile[num42 - 1, num43].Clear(TileDataType.Slope);
					Main.tile[num42 + 1, num43].active(true);
					*Main.tile[num42 + 1, num43].type = num2;
					Main.tile[num42 + 1, num43].Clear(TileDataType.Slope);
				}
			}
			int[] array = new int[3];
			if (num3 != 7)
			{
				if (num3 != 9)
				{
					array[0] = 8;
					array[1] = 98;
					array[2] = 99;
				}
				else
				{
					array[0] = 9;
					array[1] = 96;
					array[2] = 97;
				}
			}
			else
			{
				array[0] = 7;
				array[1] = 94;
				array[2] = 95;
			}
			for (int num50 = 0; num50 < 5; num50++)
			{
				for (int num51 = 0; num51 < 3; num51++)
				{
					int num52 = WorldGen.genRand.Next(40, 240);
					int num53 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					int num54 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
					for (int num55 = num53 - num52; num55 < num53 + num52; num55++)
					{
						for (int num56 = num54 - num52; num56 < num54 + num52; num56++)
						{
							if ((double)num56 > Main.worldSurface)
							{
								double num96 = (double)Math.Abs(num53 - num55);
								double num57 = (double)Math.Abs(num54 - num56);
								if (Math.Sqrt(num96 * num96 + num57 * num57) < (double)num52 * 0.4 && Main.wallDungeon[(int)(*Main.tile[num55, num56].wall)])
								{
									WorldGen.Spread.WallDungeon(num55, num56, array[num51]);
								}
							}
						}
					}
				}
			}
			Main.statusText = Lang.gen[58].Value + " 85%";
			for (int num58 = 0; num58 < GenVars.numDungeonPlatforms; num58++)
			{
				int num59 = GenVars.dungeonPlatformX[num58];
				int num60 = GenVars.dungeonPlatformY[num58];
				int num61 = Main.maxTilesX;
				int num62 = 10;
				if ((double)num60 < Main.worldSurface + 50.0)
				{
					num62 = 20;
				}
				for (int num63 = num60 - 5; num63 <= num60 + 5; num63++)
				{
					int num64 = num59;
					int num65 = num59;
					bool flag3 = false;
					if (!Main.tile[num64, num63].active())
					{
						while (!Main.tile[num64, num63].active())
						{
							num64--;
							if (!Main.tileDungeon[(int)(*Main.tile[num64, num63].type)] || num64 == 0)
							{
								flag3 = true;
								IL_1E4B:
								while (!Main.tile[num65, num63].active())
								{
									num65++;
									if (!Main.tileDungeon[(int)(*Main.tile[num65, num63].type)] || num65 == Main.maxTilesX - 1)
									{
										flag3 = true;
										break;
									}
								}
								goto IL_1E64;
							}
						}
						goto IL_1E4B;
					}
					flag3 = true;
					IL_1E64:
					if (!flag3 && num65 - num64 <= num62)
					{
						bool flag4 = true;
						int num97 = num59 - num62 / 2 - 2;
						int num66 = num59 + num62 / 2 + 2;
						int num67 = num63 - 5;
						int num68 = num63 + 5;
						for (int num69 = num97; num69 <= num66; num69++)
						{
							for (int num70 = num67; num70 <= num68; num70++)
							{
								if (Main.tile[num69, num70].active() && *Main.tile[num69, num70].type == 19)
								{
									flag4 = false;
									break;
								}
							}
						}
						for (int num71 = num63 + 3; num71 >= num63 - 5; num71--)
						{
							if (Main.tile[num59, num71].active())
							{
								flag4 = false;
								break;
							}
						}
						if (flag4)
						{
							num61 = num63;
							break;
						}
					}
				}
				if (num61 > num60 - 10 && num61 < num60 + 10)
				{
					int num72 = num59;
					int num73 = num61;
					int num74 = num59 + 1;
					while (!Main.tile[num72, num73].active())
					{
						Main.tile[num72, num73].active(true);
						*Main.tile[num72, num73].type = 19;
						Main.tile[num72, num73].Clear(TileDataType.Slope);
						if (num3 != 7)
						{
							if (num3 != 8)
							{
								*Main.tile[num72, num73].frameY = 126;
							}
							else
							{
								*Main.tile[num72, num73].frameY = 144;
							}
						}
						else
						{
							*Main.tile[num72, num73].frameY = 108;
						}
						WorldGen.TileFrame(num72, num73, false, false);
						num72--;
					}
					while (!Main.tile[num74, num73].active())
					{
						Main.tile[num74, num73].active(true);
						*Main.tile[num74, num73].type = 19;
						Main.tile[num74, num73].Clear(TileDataType.Slope);
						if (num3 != 7)
						{
							if (num3 != 8)
							{
								*Main.tile[num74, num73].frameY = 126;
							}
							else
							{
								*Main.tile[num74, num73].frameY = 144;
							}
						}
						else
						{
							*Main.tile[num74, num73].frameY = 108;
						}
						WorldGen.TileFrame(num74, num73, false, false);
						num74++;
					}
				}
			}
			int num75 = 5;
			if (WorldGen.drunkWorldGen)
			{
				num75 = 6;
			}
			for (int num76 = 0; num76 < num75; num76++)
			{
				bool flag5 = false;
				while (!flag5)
				{
					int num77 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					int num78 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
					if (Main.wallDungeon[(int)(*Main.tile[num77, num78].wall)] && !Main.tile[num77, num78].active())
					{
						ushort chestTileType = 21;
						int contain = 0;
						int style2 = 0;
						switch (num76)
						{
						case 0:
							style2 = 23;
							contain = 1156;
							break;
						case 1:
							if (!WorldGen.crimson)
							{
								style2 = 24;
								contain = 1571;
							}
							else
							{
								style2 = 25;
								contain = 1569;
							}
							break;
						case 2:
							style2 = 26;
							contain = 1260;
							break;
						case 3:
							style2 = 27;
							contain = 1572;
							break;
						case 4:
							chestTileType = 467;
							style2 = 13;
							contain = 4607;
							break;
						case 5:
							if (WorldGen.crimson)
							{
								style2 = 24;
								contain = 1571;
							}
							else
							{
								style2 = 25;
								contain = 1569;
							}
							break;
						}
						flag5 = WorldGen.AddBuriedChest(num77, num78, contain, false, style2, false, chestTileType);
					}
				}
			}
			int[] array3 = new int[3];
			array3[0] = WorldGen.genRand.Next(9, 13);
			array3[1] = WorldGen.genRand.Next(9, 13);
			int[] array2 = array3;
			while (array2[1] == array2[0])
			{
				array2[1] = WorldGen.genRand.Next(9, 13);
			}
			array2[2] = WorldGen.genRand.Next(9, 13);
			while (array2[2] == array2[0] || array2[2] == array2[1])
			{
				array2[2] = WorldGen.genRand.Next(9, 13);
			}
			Main.statusText = Lang.gen[58].Value + " 90%";
			num13 = 0;
			num14 = 1000;
			num15 = 0;
			while (num15 < Main.maxTilesX / 20)
			{
				num13++;
				int num79 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num80 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				bool flag6 = true;
				if (Main.wallDungeon[(int)(*Main.tile[num79, num80].wall)] && !Main.tile[num79, num80].active())
				{
					int num81 = 1;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num81 = -1;
					}
					while (flag6 && !Main.tile[num79, num80].active())
					{
						num79 -= num81;
						if (num79 < 5 || num79 > Main.maxTilesX - 5)
						{
							flag6 = false;
						}
						else if (Main.tile[num79, num80].active() && !Main.tileDungeon[(int)(*Main.tile[num79, num80].type)])
						{
							flag6 = false;
						}
					}
					if (flag6 && Main.tile[num79, num80].active() && Main.tileDungeon[(int)(*Main.tile[num79, num80].type)] && Main.tile[num79, num80 - 1].active() && Main.tileDungeon[(int)(*Main.tile[num79, num80 - 1].type)] && Main.tile[num79, num80 + 1].active() && Main.tileDungeon[(int)(*Main.tile[num79, num80 + 1].type)])
					{
						num79 += num81;
						for (int num82 = num79 - 3; num82 <= num79 + 3; num82++)
						{
							for (int num83 = num80 - 3; num83 <= num80 + 3; num83++)
							{
								if (Main.tile[num82, num83].active() && *Main.tile[num82, num83].type == 19)
								{
									flag6 = false;
									break;
								}
							}
						}
						if (flag6 && (!Main.tile[num79, num80 - 1].active() & !Main.tile[num79, num80 - 2].active() & !Main.tile[num79, num80 - 3].active()))
						{
							int num84 = num79;
							int num85 = num79;
							while (num84 > GenVars.dMinX && num84 < GenVars.dMaxX && !Main.tile[num84, num80].active() && !Main.tile[num84, num80 - 1].active() && !Main.tile[num84, num80 + 1].active())
							{
								num84 += num81;
							}
							num84 = Math.Abs(num79 - num84);
							bool flag7 = false;
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag7 = true;
							}
							if (num84 > 5)
							{
								for (int num86 = WorldGen.genRand.Next(1, 4); num86 > 0; num86--)
								{
									Main.tile[num79, num80].active(true);
									Main.tile[num79, num80].Clear(TileDataType.Slope);
									*Main.tile[num79, num80].type = 19;
									if ((int)(*Main.tile[num79, num80].wall) == array[0])
									{
										*Main.tile[num79, num80].frameY = (short)(18 * array2[0]);
									}
									else if ((int)(*Main.tile[num79, num80].wall) == array[1])
									{
										*Main.tile[num79, num80].frameY = (short)(18 * array2[1]);
									}
									else
									{
										*Main.tile[num79, num80].frameY = (short)(18 * array2[2]);
									}
									WorldGen.TileFrame(num79, num80, false, false);
									if (flag7)
									{
										WorldGen.PlaceTile(num79, num80 - 1, 50, true, false, -1, 0);
										if (WorldGen.genRand.Next(50) == 0 && (double)num80 > (Main.worldSurface + Main.rockLayer) / 2.0 && *Main.tile[num79, num80 - 1].type == 50)
										{
											*Main.tile[num79, num80 - 1].frameX = 90;
										}
									}
									num79 += num81;
								}
								num13 = 0;
								num15++;
								if (!flag7 && WorldGen.genRand.Next(2) == 0)
								{
									num79 = num85;
									num80--;
									int num87 = 0;
									if (WorldGen.genRand.Next(4) == 0)
									{
										num87 = 1;
									}
									if (num87 != 0)
									{
										if (num87 == 1)
										{
											num87 = 49;
										}
									}
									else
									{
										num87 = 13;
									}
									WorldGen.PlaceTile(num79, num80, num87, true, false, -1, 0);
									if (*Main.tile[num79, num80].type == 13)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											*Main.tile[num79, num80].frameX = 18;
										}
										else
										{
											*Main.tile[num79, num80].frameX = 36;
										}
									}
								}
							}
						}
					}
				}
				if (num13 > num14)
				{
					num13 = 0;
					num15++;
				}
			}
			Main.statusText = Lang.gen[58].Value + " 95%";
			int num88 = 1;
			for (int num89 = 0; num89 < GenVars.numDRooms; num89++)
			{
				int num90 = 0;
				while (num90 < 1000)
				{
					int num91 = (int)((double)GenVars.dRoomSize[num89] * 0.4);
					int i2 = GenVars.dRoomX[num89] + WorldGen.genRand.Next(-num91, num91 + 1);
					int num92 = GenVars.dRoomY[num89] + WorldGen.genRand.Next(-num91, num91 + 1);
					int style3 = 2;
					if (num88 == 1)
					{
						num88++;
					}
					int num93;
					switch (num88)
					{
					case 2:
						num93 = 155;
						break;
					case 3:
						num93 = 156;
						break;
					case 4:
						num93 = ((!WorldGen.remixWorldGen) ? 157 : 2623);
						break;
					case 5:
						num93 = 163;
						break;
					case 6:
						num93 = 113;
						break;
					case 7:
						num93 = 3317;
						break;
					case 8:
						num93 = 327;
						style3 = 0;
						break;
					default:
						num93 = 164;
						num88 = 0;
						break;
					}
					if ((double)num92 < Main.worldSurface + 50.0)
					{
						num93 = 327;
						style3 = 0;
					}
					if (num93 == 0 && WorldGen.genRand.Next(2) == 0)
					{
						num90 = 1000;
					}
					else
					{
						if (WorldGen.AddBuriedChest(i2, num92, num93, false, style3, false, 0))
						{
							num90 += 1000;
							num88++;
						}
						num90++;
					}
				}
			}
			GenVars.dMinX -= 25;
			GenVars.dMaxX += 25;
			GenVars.dMinY -= 25;
			GenVars.dMaxY += 25;
			if (GenVars.dMinX < 0)
			{
				GenVars.dMinX = 0;
			}
			if (GenVars.dMaxX > Main.maxTilesX)
			{
				GenVars.dMaxX = Main.maxTilesX;
			}
			if (GenVars.dMinY < 0)
			{
				GenVars.dMinY = 0;
			}
			if (GenVars.dMaxY > Main.maxTilesY)
			{
				GenVars.dMaxY = Main.maxTilesY;
			}
			num13 = 0;
			num14 = 1000;
			num15 = 0;
			WorldGen.MakeDungeon_Lights(num2, ref num13, num14, ref num15, array);
			num13 = 0;
			num14 = 1000;
			num15 = 0;
			WorldGen.MakeDungeon_Traps(ref num13, num14, ref num15);
			double count = WorldGen.MakeDungeon_GroundFurniture(num3);
			count = WorldGen.MakeDungeon_Pictures(array, count);
			count = WorldGen.MakeDungeon_Banners(array, count);
		}

		// Token: 0x060011F4 RID: 4596 RVA: 0x004342E8 File Offset: 0x004324E8
		private unsafe static void MakeDungeon_Traps(ref int failCount, int failMax, ref int numAdd)
		{
			while (numAdd < Main.maxTilesX / 500)
			{
				failCount++;
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				while ((double)num2 < Main.worldSurface)
				{
					num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				}
				if (Main.wallDungeon[(int)(*Main.tile[num, num2].wall)] && WorldGen.placeTrap(num, num2, 0))
				{
					failCount = failMax;
				}
				if (failCount > failMax)
				{
					numAdd++;
					failCount = 0;
				}
			}
		}

		// Token: 0x060011F5 RID: 4597 RVA: 0x00434394 File Offset: 0x00432594
		private unsafe static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd, int[] roomWall)
		{
			int[] array2 = new int[3];
			array2[0] = WorldGen.genRand.Next(7);
			array2[1] = WorldGen.genRand.Next(7);
			int[] array = array2;
			while (array[1] == array[0])
			{
				array[1] = WorldGen.genRand.Next(7);
			}
			array[2] = WorldGen.genRand.Next(7);
			while (array[2] == array[0] || array[2] == array[1])
			{
				array[2] = WorldGen.genRand.Next(7);
			}
			while (numAdd < Main.maxTilesX / 150)
			{
				failCount++;
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				if (Main.wallDungeon[(int)(*Main.tile[num, num2].wall)])
				{
					int num3 = num2;
					while (num3 > GenVars.dMinY)
					{
						if (Main.tile[num, num3 - 1].active() && *Main.tile[num, num3 - 1].type == tileType)
						{
							bool flag = false;
							for (int i = num - 15; i < num + 15; i++)
							{
								for (int j = num3 - 15; j < num3 + 15; j++)
								{
									if (i > 0 && i < Main.maxTilesX && j > 0 && j < Main.maxTilesY && (*Main.tile[i, j].type == 42 || *Main.tile[i, j].type == 34))
									{
										flag = true;
										break;
									}
								}
							}
							if (Main.tile[num - 1, num3].active() || Main.tile[num + 1, num3].active() || Main.tile[num - 1, num3 + 1].active() || Main.tile[num + 1, num3 + 1].active() || Main.tile[num, num3 + 2].active())
							{
								flag = true;
							}
							if (flag)
							{
								break;
							}
							bool flag2 = false;
							if (!flag2 && WorldGen.genRand.Next(7) == 0)
							{
								int style = 27;
								switch (roomWall[0])
								{
								case 7:
									style = 27;
									break;
								case 8:
									style = 28;
									break;
								case 9:
									style = 29;
									break;
								}
								bool flag3 = false;
								for (int k = 0; k < 15; k++)
								{
									if (WorldGen.SolidTile(num, num3 + k, false))
									{
										flag3 = true;
										break;
									}
								}
								if (!flag3)
								{
									WorldGen.PlaceChand(num, num3, 34, style);
								}
								if (*Main.tile[num, num3].type == 34)
								{
									flag2 = true;
									failCount = 0;
									numAdd++;
									for (int l = 0; l < 1000; l++)
									{
										int num4 = num + WorldGen.genRand.Next(-12, 13);
										int num5 = num3 + WorldGen.genRand.Next(3, 21);
										if (!Main.tile[num4, num5].active() && !Main.tile[num4, num5 + 1].active() && Main.tileDungeon[(int)(*Main.tile[num4 - 1, num5].type)] && Main.tileDungeon[(int)(*Main.tile[num4 + 1, num5].type)] && Collision.CanHit(new Point(num4 * 16, num5 * 16), 16, 16, new Point(num * 16, num3 * 16 + 1), 16, 16))
										{
											if (((WorldGen.SolidTile(num4 - 1, num5, false) && *Main.tile[num4 - 1, num5].type != 10) || (WorldGen.SolidTile(num4 + 1, num5, false) && *Main.tile[num4 + 1, num5].type != 10) || WorldGen.SolidTile(num4, num5 + 1, false)) && Main.wallDungeon[(int)(*Main.tile[num4, num5].wall)] && (Main.tileDungeon[(int)(*Main.tile[num4 - 1, num5].type)] || Main.tileDungeon[(int)(*Main.tile[num4 + 1, num5].type)]))
											{
												WorldGen.PlaceTile(num4, num5, 136, true, false, -1, 0);
											}
											if (Main.tile[num4, num5].active())
											{
												while (num4 != num || num5 != num3)
												{
													Main.tile[num4, num5].wire(true);
													if (num4 > num)
													{
														num4--;
													}
													if (num4 < num)
													{
														num4++;
													}
													Main.tile[num4, num5].wire(true);
													if (num5 > num3)
													{
														num5--;
													}
													if (num5 < num3)
													{
														num5++;
													}
													Main.tile[num4, num5].wire(true);
												}
												if (WorldGen.genRand.Next(3) > 0)
												{
													*Main.tile[num, num3].frameX = 18;
													*Main.tile[num, num3 + 1].frameX = 18;
													break;
												}
												break;
											}
										}
									}
								}
							}
							if (flag2)
							{
								break;
							}
							int style2 = array[0];
							if ((int)(*Main.tile[num, num3].wall) == roomWall[1])
							{
								style2 = array[1];
							}
							if ((int)(*Main.tile[num, num3].wall) == roomWall[2])
							{
								style2 = array[2];
							}
							WorldGen.Place1x2Top(num, num3, 42, style2);
							if (*Main.tile[num, num3].type == 42)
							{
								failCount = 0;
								numAdd++;
								for (int m = 0; m < 1000; m++)
								{
									int num6 = num + WorldGen.genRand.Next(-12, 13);
									int num7 = num3 + WorldGen.genRand.Next(3, 21);
									if (!Main.tile[num6, num7].active() && !Main.tile[num6, num7 + 1].active() && *Main.tile[num6 - 1, num7].type != 48 && *Main.tile[num6 + 1, num7].type != 48 && Collision.CanHit(new Point(num6 * 16, num7 * 16), 16, 16, new Point(num * 16, num3 * 16 + 1), 16, 16))
									{
										if ((WorldGen.SolidTile(num6 - 1, num7, false) && *Main.tile[num6 - 1, num7].type != 10) || (WorldGen.SolidTile(num6 + 1, num7, false) && *Main.tile[num6 + 1, num7].type != 10) || WorldGen.SolidTile(num6, num7 + 1, false))
										{
											WorldGen.PlaceTile(num6, num7, 136, true, false, -1, 0);
										}
										if (Main.tile[num6, num7].active())
										{
											while (num6 != num || num7 != num3)
											{
												Main.tile[num6, num7].wire(true);
												if (num6 > num)
												{
													num6--;
												}
												if (num6 < num)
												{
													num6++;
												}
												Main.tile[num6, num7].wire(true);
												if (num7 > num3)
												{
													num7--;
												}
												if (num7 < num3)
												{
													num7++;
												}
												Main.tile[num6, num7].wire(true);
											}
											if (WorldGen.genRand.Next(3) > 0)
											{
												*Main.tile[num, num3].frameX = 18;
												*Main.tile[num, num3 + 1].frameX = 18;
												break;
											}
											break;
										}
									}
								}
								break;
							}
							break;
						}
						else
						{
							num3--;
						}
					}
				}
				if (failCount > failMax)
				{
					numAdd++;
					failCount = 0;
				}
			}
		}

		// Token: 0x060011F6 RID: 4598 RVA: 0x00434BF8 File Offset: 0x00432DF8
		private unsafe static double MakeDungeon_Banners(int[] roomWall, double count)
		{
			count = 840000.0 / (double)Main.maxTilesX;
			int i = 0;
			while ((double)i < count)
			{
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)(*Main.tile[num, num2].wall)] || Main.tile[num, num2].active())
				{
					num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					num2 = WorldGen.genRand.Next(GenVars.dMinY, GenVars.dMaxY);
				}
				while (!WorldGen.SolidTile(num, num2, false) && num2 > 10)
				{
					num2--;
				}
				num2++;
				if (Main.wallDungeon[(int)(*Main.tile[num, num2].wall)] && *Main.tile[num, num2 - 1].type != 48 && !Main.tile[num, num2].active() && !Main.tile[num, num2 + 1].active() && !Main.tile[num, num2 + 2].active() && !Main.tile[num, num2 + 3].active())
				{
					bool flag = true;
					for (int j = num - 1; j <= num + 1; j++)
					{
						for (int k = num2; k <= num2 + 3; k++)
						{
							if (Main.tile[j, k].active() && (*Main.tile[j, k].type == 10 || *Main.tile[j, k].type == 11 || *Main.tile[j, k].type == 91))
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						int num3 = 10;
						if ((int)(*Main.tile[num, num2].wall) == roomWall[1])
						{
							num3 = 12;
						}
						if ((int)(*Main.tile[num, num2].wall) == roomWall[2])
						{
							num3 = 14;
						}
						num3 += WorldGen.genRand.Next(2);
						WorldGen.PlaceTile(num, num2, 91, true, false, -1, num3);
					}
				}
				i++;
			}
			return count;
		}

		// Token: 0x060011F7 RID: 4599 RVA: 0x00434E80 File Offset: 0x00433080
		private unsafe static double MakeDungeon_Pictures(int[] roomWall, double count)
		{
			count = 420000.0 / (double)Main.maxTilesX;
			int i = 0;
			while ((double)i < count)
			{
				int num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int num2 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)(*Main.tile[num, num2].wall)] || Main.tile[num, num2].active())
				{
					num = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					num2 = WorldGen.genRand.Next((int)Main.worldSurface, GenVars.dMaxY);
				}
				int num3;
				int num4;
				int num5;
				int num6;
				for (int j = 0; j < 2; j++)
				{
					num3 = num;
					num4 = num;
					while (!Main.tile[num3, num2].active() && Main.wallDungeon[(int)(*Main.tile[num3, num2].wall)])
					{
						num3--;
					}
					num3++;
					while (!Main.tile[num4, num2].active() && Main.wallDungeon[(int)(*Main.tile[num4, num2].wall)])
					{
						num4++;
					}
					num4--;
					num = (num3 + num4) / 2;
					num5 = num2;
					num6 = num2;
					while (!Main.tile[num, num5].active() && Main.wallDungeon[(int)(*Main.tile[num, num5].wall)])
					{
						num5--;
					}
					num5++;
					while (!Main.tile[num, num6].active() && Main.wallDungeon[(int)(*Main.tile[num, num6].wall)])
					{
						num6++;
					}
					num6--;
					num2 = (num5 + num6) / 2;
				}
				num3 = num;
				num4 = num;
				while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() && !Main.tile[num3, num2 + 1].active())
				{
					num3--;
				}
				num3++;
				while (!Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() && !Main.tile[num4, num2 + 1].active())
				{
					num4++;
				}
				num4--;
				num5 = num2;
				num6 = num2;
				while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() && !Main.tile[num + 1, num5].active())
				{
					num5--;
				}
				num5++;
				while (!Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() && !Main.tile[num + 1, num6].active())
				{
					num6++;
				}
				num6--;
				num = (num3 + num4) / 2;
				num2 = (num5 + num6) / 2;
				int num7 = num4 - num3;
				int num8 = num6 - num5;
				if (num7 > 7 && num8 > 5)
				{
					bool[] array2 = new bool[3];
					array2[0] = true;
					bool[] array = array2;
					if (num7 > num8 * 3 && num7 > 21)
					{
						array[1] = true;
					}
					if (num8 > num7 * 3 && num8 > 21)
					{
						array[2] = true;
					}
					int num9 = WorldGen.genRand.Next(3);
					if ((int)(*Main.tile[num, num2].wall) == roomWall[0])
					{
						num9 = 0;
					}
					while (!array[num9])
					{
						num9 = WorldGen.genRand.Next(3);
					}
					if (WorldGen.nearPicture2(num, num2))
					{
						num9 = -1;
					}
					switch (num9)
					{
					case 0:
					{
						PaintingEntry paintingEntry2 = WorldGen.RandPictureTile();
						if ((int)(*Main.tile[num, num2].wall) != roomWall[0])
						{
							paintingEntry2 = WorldGen.RandBonePicture();
						}
						if (!WorldGen.nearPicture(num, num2))
						{
							WorldGen.PlaceTile(num, num2, paintingEntry2.tileType, true, false, -1, paintingEntry2.style);
						}
						break;
					}
					case 1:
					{
						PaintingEntry paintingEntry3 = WorldGen.RandPictureTile();
						if ((int)(*Main.tile[num, num2].wall) != roomWall[0])
						{
							paintingEntry3 = WorldGen.RandBonePicture();
						}
						if (!Main.tile[num, num2].active())
						{
							WorldGen.PlaceTile(num, num2, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
						int num10 = num;
						int num11 = num2;
						int num12 = num2;
						for (int k = 0; k < 2; k++)
						{
							num += 7;
							num5 = num12;
							num6 = num12;
							while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() && !Main.tile[num + 1, num5].active())
							{
								num5--;
							}
							num5++;
							while (!Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() && !Main.tile[num + 1, num6].active())
							{
								num6++;
							}
							num6--;
							num12 = (num5 + num6) / 2;
							paintingEntry3 = WorldGen.RandPictureTile();
							if ((int)(*Main.tile[num, num12].wall) != roomWall[0])
							{
								paintingEntry3 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num11 - num12) >= 4 || WorldGen.nearPicture(num, num12))
							{
								break;
							}
							WorldGen.PlaceTile(num, num12, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
						num12 = num2;
						num = num10;
						for (int l = 0; l < 2; l++)
						{
							num -= 7;
							num5 = num12;
							num6 = num12;
							while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() && !Main.tile[num + 1, num5].active())
							{
								num5--;
							}
							num5++;
							while (!Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() && !Main.tile[num + 1, num6].active())
							{
								num6++;
							}
							num6--;
							num12 = (num5 + num6) / 2;
							paintingEntry3 = WorldGen.RandPictureTile();
							if ((int)(*Main.tile[num, num12].wall) != roomWall[0])
							{
								paintingEntry3 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num11 - num12) >= 4 || WorldGen.nearPicture(num, num12))
							{
								break;
							}
							WorldGen.PlaceTile(num, num12, paintingEntry3.tileType, true, false, -1, paintingEntry3.style);
						}
						break;
					}
					case 2:
					{
						PaintingEntry paintingEntry4 = WorldGen.RandPictureTile();
						if ((int)(*Main.tile[num, num2].wall) != roomWall[0])
						{
							paintingEntry4 = WorldGen.RandBonePicture();
						}
						if (!Main.tile[num, num2].active())
						{
							WorldGen.PlaceTile(num, num2, paintingEntry4.tileType, true, false, -1, paintingEntry4.style);
						}
						int num13 = num2;
						int num14 = num;
						int num15 = num;
						for (int m = 0; m < 3; m++)
						{
							num2 += 7;
							num3 = num15;
							num4 = num15;
							while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() && !Main.tile[num3, num2 + 1].active())
							{
								num3--;
							}
							num3++;
							while (!Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() && !Main.tile[num4, num2 + 1].active())
							{
								num4++;
							}
							num4--;
							num15 = (num3 + num4) / 2;
							paintingEntry4 = WorldGen.RandPictureTile();
							if ((int)(*Main.tile[num15, num2].wall) != roomWall[0])
							{
								paintingEntry4 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num14 - num15) >= 4 || WorldGen.nearPicture(num15, num2))
							{
								break;
							}
							WorldGen.PlaceTile(num15, num2, paintingEntry4.tileType, true, false, -1, paintingEntry4.style);
						}
						num15 = num;
						num2 = num13;
						for (int n = 0; n < 3; n++)
						{
							num2 -= 7;
							num3 = num15;
							num4 = num15;
							while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() && !Main.tile[num3, num2 + 1].active())
							{
								num3--;
							}
							num3++;
							while (!Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() && !Main.tile[num4, num2 + 1].active())
							{
								num4++;
							}
							num4--;
							num15 = (num3 + num4) / 2;
							paintingEntry4 = WorldGen.RandPictureTile();
							if ((int)(*Main.tile[num15, num2].wall) != roomWall[0])
							{
								paintingEntry4 = WorldGen.RandBonePicture();
							}
							if (Math.Abs(num14 - num15) >= 4 || WorldGen.nearPicture(num15, num2))
							{
								break;
							}
							WorldGen.PlaceTile(num15, num2, paintingEntry4.tileType, true, false, -1, paintingEntry4.style);
						}
						break;
					}
					}
				}
				i++;
			}
			return count;
		}

		// Token: 0x060011F8 RID: 4600 RVA: 0x004358C4 File Offset: 0x00433AC4
		private unsafe static double MakeDungeon_GroundFurniture(int wallType)
		{
			double num = (double)(2000 * Main.maxTilesX) / 4200.0;
			int num2 = 1 + (int)((double)Main.maxTilesX / 4200.0);
			int num3 = 1 + (int)((double)Main.maxTilesX / 4200.0);
			int i = 0;
			while ((double)i < num)
			{
				if (num2 > 0 || num3 > 0)
				{
					i--;
				}
				int num4 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
				int j = WorldGen.genRand.Next((int)Main.worldSurface + 10, GenVars.dMaxY);
				while (!Main.wallDungeon[(int)(*Main.tile[num4, j].wall)] || Main.tile[num4, j].active())
				{
					num4 = WorldGen.genRand.Next(GenVars.dMinX, GenVars.dMaxX);
					j = WorldGen.genRand.Next((int)Main.worldSurface + 10, GenVars.dMaxY);
				}
				if (Main.wallDungeon[(int)(*Main.tile[num4, j].wall)])
				{
					if (!Main.tile[num4, j].active())
					{
						while (!WorldGen.SolidTile(num4, j, false) && j < Main.UnderworldLayer)
						{
							j++;
						}
						j--;
						int num5 = num4;
						int k = num4;
						while (!Main.tile[num5, j].active() && WorldGen.SolidTile(num5, j + 1, false))
						{
							num5--;
						}
						num5++;
						while (!Main.tile[k, j].active() && WorldGen.SolidTile(k, j + 1, false))
						{
							k++;
						}
						k--;
						int num6 = k - num5;
						int num7 = (k + num5) / 2;
						if (!Main.tile[num7, j].active() && Main.wallDungeon[(int)(*Main.tile[num7, j].wall)] && WorldGen.SolidTile(num7, j + 1, false) && *Main.tile[num7, j + 1].type != 48)
						{
							int style = 13;
							int style2 = 10;
							int style3 = 11;
							int num8 = 1;
							int num9 = 46;
							int style4 = 1;
							int num10 = 5;
							int num11 = 11;
							int num12 = 5;
							int num13 = 6;
							int num14 = 21;
							int num15 = 22;
							int num16 = 24;
							int num17 = 30;
							if (wallType != 8)
							{
								if (wallType == 9)
								{
									style = 15;
									style2 = 12;
									style3 = 13;
									num8 = 3;
									num9 = 48;
									style4 = 3;
									num10 = 7;
									num11 = 13;
									num12 = 7;
									num13 = 8;
									num14 = 23;
									num15 = 24;
									num16 = 26;
									num17 = 32;
								}
							}
							else
							{
								style = 14;
								style2 = 11;
								style3 = 12;
								num8 = 2;
								num9 = 47;
								style4 = 2;
								num10 = 6;
								num11 = 12;
								num12 = 6;
								num13 = 7;
								num14 = 22;
								num15 = 23;
								num16 = 25;
								num17 = 31;
							}
							if (*Main.tile[num7, j].wall >= 94 && *Main.tile[num7, j].wall <= 105)
							{
								style = 17;
								style2 = 14;
								style3 = 15;
								num8 = -1;
								num9 = -1;
								style4 = 5;
								num10 = -1;
								num11 = -1;
								num12 = -1;
								num13 = -1;
								num14 = -1;
								num15 = -1;
								num16 = -1;
								num17 = -1;
							}
							int num18 = WorldGen.genRand.Next(13);
							if ((num18 == 10 || num18 == 11 || num18 == 12) && WorldGen.genRand.Next(4) != 0)
							{
								num18 = WorldGen.genRand.Next(13);
							}
							while ((num18 == 2 && num9 == -1) || (num18 == 5 && num10 == -1) || (num18 == 6 && num11 == -1) || (num18 == 7 && num12 == -1) || (num18 == 8 && num13 == -1) || (num18 == 9 && num14 == -1) || (num18 == 10 && num15 == -1) || (num18 == 11 && num16 == -1) || (num18 == 12 && num17 == -1))
							{
								num18 = WorldGen.genRand.Next(13);
							}
							int num19 = 0;
							int num20 = 0;
							if (num18 == 0)
							{
								num19 = 5;
								num20 = 4;
							}
							if (num18 == 1)
							{
								num19 = 4;
								num20 = 3;
							}
							if (num18 == 2)
							{
								num19 = 3;
								num20 = 5;
							}
							if (num18 == 3)
							{
								num19 = 4;
								num20 = 6;
							}
							if (num18 == 4)
							{
								num19 = 3;
								num20 = 3;
							}
							if (num18 == 5)
							{
								num19 = 5;
								num20 = 3;
							}
							if (num18 == 6)
							{
								num19 = 5;
								num20 = 4;
							}
							if (num18 == 7)
							{
								num19 = 5;
								num20 = 4;
							}
							if (num18 == 8)
							{
								num19 = 5;
								num20 = 4;
							}
							if (num18 == 9)
							{
								num19 = 5;
								num20 = 3;
							}
							if (num18 == 10)
							{
								num19 = 2;
								num20 = 4;
							}
							if (num18 == 11)
							{
								num19 = 3;
								num20 = 3;
							}
							if (num18 == 12)
							{
								num19 = 2;
								num20 = 5;
							}
							for (int l = num7 - num19; l <= num7 + num19; l++)
							{
								for (int m = j - num20; m <= j; m++)
								{
									if (Main.tile[l, m].active())
									{
										num18 = -1;
										break;
									}
								}
							}
							if ((double)num6 < (double)num19 * 1.75)
							{
								num18 = -1;
							}
							if (num2 > 0 || num3 > 0)
							{
								if (num2 > 0)
								{
									WorldGen.PlaceTile(num7, j, 355, true, false, -1, 0);
									if (*Main.tile[num7, j].type == 355)
									{
										num2--;
									}
								}
								else if (num3 > 0)
								{
									WorldGen.PlaceTile(num7, j, 354, true, false, -1, 0);
									if (*Main.tile[num7, j].type == 354)
									{
										num3--;
									}
								}
							}
							else
							{
								switch (num18)
								{
								case 0:
									WorldGen.PlaceTile(num7, j, 14, true, false, -1, style2);
									if (Main.tile[num7, j].active())
									{
										if (!Main.tile[num7 - 2, j].active())
										{
											WorldGen.PlaceTile(num7 - 2, j, 15, true, false, -1, style);
											if (Main.tile[num7 - 2, j].active())
											{
												ref short frameX = ref Main.tile[num7 - 2, j].frameX;
												frameX += 18;
												ref short frameX2 = ref Main.tile[num7 - 2, j - 1].frameX;
												frameX2 += 18;
											}
										}
										if (!Main.tile[num7 + 2, j].active())
										{
											WorldGen.PlaceTile(num7 + 2, j, 15, true, false, -1, style);
										}
									}
									for (int num21 = num7 - 1; num21 <= num7 + 1; num21++)
									{
										if (WorldGen.genRand.Next(2) == 0 && !Main.tile[num21, j - 2].active())
										{
											int num22 = WorldGen.genRand.Next(5);
											if (num8 != -1 && num22 <= 1 && !Main.tileLighted[(int)(*Main.tile[num21 - 1, j - 2].type)])
											{
												WorldGen.PlaceTile(num21, j - 2, 33, true, false, -1, num8);
											}
											if (num22 == 2 && !Main.tileLighted[(int)(*Main.tile[num21 - 1, j - 2].type)])
											{
												WorldGen.PlaceTile(num21, j - 2, 49, true, false, -1, 0);
											}
											if (num22 == 3)
											{
												WorldGen.PlaceTile(num21, j - 2, 50, true, false, -1, 0);
											}
											if (num22 == 4)
											{
												WorldGen.PlaceTile(num21, j - 2, 103, true, false, -1, 0);
											}
										}
									}
									break;
								case 1:
									WorldGen.PlaceTile(num7, j, 18, true, false, -1, style3);
									if (Main.tile[num7, j].active())
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											if (!Main.tile[num7 - 1, j].active())
											{
												WorldGen.PlaceTile(num7 - 1, j, 15, true, false, -1, style);
												if (Main.tile[num7 - 1, j].active())
												{
													ref short frameX3 = ref Main.tile[num7 - 1, j].frameX;
													frameX3 += 18;
													ref short frameX4 = ref Main.tile[num7 - 1, j - 1].frameX;
													frameX4 += 18;
												}
											}
										}
										else if (!Main.tile[num7 + 2, j].active())
										{
											WorldGen.PlaceTile(num7 + 2, j, 15, true, false, -1, style);
										}
										for (int n = num7; n <= num7 + 1; n++)
										{
											if (WorldGen.genRand.Next(2) == 0 && !Main.tile[n, j - 1].active())
											{
												int num23 = WorldGen.genRand.Next(5);
												if (num8 != -1 && num23 <= 1 && !Main.tileLighted[(int)(*Main.tile[n - 1, j - 1].type)])
												{
													WorldGen.PlaceTile(n, j - 1, 33, true, false, -1, num8);
												}
												if (num23 == 2 && !Main.tileLighted[(int)(*Main.tile[n - 1, j - 1].type)])
												{
													WorldGen.PlaceTile(n, j - 1, 49, true, false, -1, 0);
												}
												if (num23 == 3)
												{
													WorldGen.PlaceTile(n, j - 1, 50, true, false, -1, 0);
												}
												if (num23 == 4)
												{
													WorldGen.PlaceTile(n, j - 1, 103, true, false, -1, 0);
												}
											}
										}
									}
									break;
								case 2:
									WorldGen.PlaceTile(num7, j, 105, true, false, -1, num9);
									break;
								case 3:
									WorldGen.PlaceTile(num7, j, 101, true, false, -1, style4);
									break;
								case 4:
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.PlaceTile(num7, j, 15, true, false, -1, style);
										ref short frameX5 = ref Main.tile[num7, j].frameX;
										frameX5 += 18;
										ref short frameX6 = ref Main.tile[num7, j - 1].frameX;
										frameX6 += 18;
									}
									else
									{
										WorldGen.PlaceTile(num7, j, 15, true, false, -1, style);
									}
									break;
								case 5:
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.Place4x2(num7, j, 79, 1, num10);
									}
									else
									{
										WorldGen.Place4x2(num7, j, 79, -1, num10);
									}
									break;
								case 6:
									WorldGen.PlaceTile(num7, j, 87, true, false, -1, num11);
									break;
								case 7:
									WorldGen.PlaceTile(num7, j, 88, true, false, -1, num12);
									break;
								case 8:
									WorldGen.PlaceTile(num7, j, 89, true, false, -1, num13);
									break;
								case 9:
									if (WorldGen.genRand.Next(2) == 0)
									{
										WorldGen.Place4x2(num7, j, 90, 1, num14);
									}
									else
									{
										WorldGen.Place4x2(num7, j, 90, -1, num14);
									}
									break;
								case 10:
									WorldGen.PlaceTile(num7, j, 93, true, false, -1, num16);
									break;
								case 11:
									WorldGen.PlaceTile(num7, j, 100, true, false, -1, num15);
									break;
								case 12:
									WorldGen.PlaceTile(num7, j, 104, true, false, -1, num17);
									break;
								}
							}
						}
					}
				}
				i++;
			}
			return num;
		}

		// Token: 0x060011F9 RID: 4601 RVA: 0x00436400 File Offset: 0x00434600
		public static PaintingEntry RandBonePicture()
		{
			int num = WorldGen.genRand.Next(2);
			int num2 = 0;
			if (num != 0)
			{
				if (num == 1)
				{
					num = 241;
					num2 = WorldGen.genRand.Next(9);
				}
			}
			else
			{
				num = 240;
				num2 = WorldGen.genRand.Next(2);
				if (num2 != 0)
				{
					if (num2 == 1)
					{
						num2 = 17;
					}
				}
				else
				{
					num2 = 16;
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x060011FA RID: 4602 RVA: 0x00436478 File Offset: 0x00434678
		public static PaintingEntry RandHellPicture()
		{
			int num = WorldGen.genRand.Next(4);
			if (num == 1)
			{
				num = WorldGen.genRand.Next(4);
			}
			int num2;
			switch (num)
			{
			case 0:
				num = 240;
				num2 = WorldGen.genRand.Next(5);
				switch (num2)
				{
				case 0:
					num2 = 27;
					break;
				case 1:
					num2 = 29;
					break;
				case 2:
					num2 = 30;
					break;
				case 3:
					num2 = 31;
					break;
				case 4:
					num2 = 32;
					break;
				}
				break;
			case 1:
				num = 242;
				num2 = 14;
				break;
			case 2:
				num = 245;
				num2 = WorldGen.genRand.Next(3);
				switch (num2)
				{
				case 0:
					num2 = 1;
					break;
				case 1:
					num2 = 2;
					break;
				case 2:
					num2 = 4;
					break;
				}
				break;
			default:
				num = 246;
				num2 = WorldGen.genRand.Next(3);
				switch (num2)
				{
				case 0:
					num2 = 0;
					break;
				case 1:
					num2 = 16;
					break;
				case 2:
					num2 = 17;
					break;
				}
				break;
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x060011FB RID: 4603 RVA: 0x00436590 File Offset: 0x00434790
		public static PaintingEntry RandHousePictureDesert()
		{
			int num = WorldGen.genRand.Next(4);
			int num2;
			if (num <= 1)
			{
				num = 240;
				int maxValue = 6;
				num2 = 63 + WorldGen.genRand.Next(maxValue);
			}
			else if (num == 2)
			{
				num = 245;
				int maxValue2 = 2;
				num2 = 7 + WorldGen.genRand.Next(maxValue2);
			}
			else
			{
				num = 242;
				int maxValue3 = 6;
				num2 = 37 + WorldGen.genRand.Next(maxValue3);
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x060011FC RID: 4604 RVA: 0x00436618 File Offset: 0x00434818
		public static PaintingEntry RandHousePicture()
		{
			int num = WorldGen.genRand.Next(4);
			if (num >= 3 && WorldGen.genRand.Next(2) != 0)
			{
				num = WorldGen.genRand.Next(3);
			}
			int num2;
			if (num <= 1)
			{
				num = 240;
				int maxValue = 15;
				num2 = WorldGen.genRand.Next(maxValue);
				switch (num2)
				{
				case 0:
					num2 = 26;
					break;
				case 1:
					num2 = 28;
					break;
				case 2:
					num2 = 20;
					break;
				case 3:
					num2 = 21;
					break;
				case 4:
					num2 = 22;
					break;
				case 5:
					num2 = 24;
					break;
				case 6:
					num2 = 25;
					break;
				case 7:
					num2 = 33;
					break;
				case 8:
					num2 = 34;
					break;
				case 9:
					num2 = 35;
					break;
				case 10:
					num2 = 76;
					break;
				case 11:
					num2 = 77;
					break;
				case 12:
					num2 = 78;
					break;
				case 13:
					num2 = 79;
					break;
				case 14:
					num2 = 82;
					break;
				}
			}
			else if (num == 2)
			{
				int maxValue2 = 9;
				num = 245;
				num2 = WorldGen.genRand.Next(maxValue2);
				if (num2 == 0 && WorldGen.genRand.Next(3) != 0)
				{
					num2 = WorldGen.genRand.Next(maxValue2);
				}
				switch (num2)
				{
				case 0:
					num2 = 0;
					break;
				case 1:
					num2 = 3;
					break;
				case 2:
					num2 = 5;
					break;
				case 3:
					num2 = 6;
					break;
				case 4:
					num2 = 14;
					break;
				case 5:
				{
					int num3 = WorldGen.genRand.Next(4);
					if (num3 == 0)
					{
						num2 = 15;
					}
					if (num3 == 1)
					{
						num2 = 16;
					}
					if (num3 == 2)
					{
						num2 = 17;
					}
					if (num3 == 3)
					{
						num2 = 18;
					}
					break;
				}
				case 6:
					num2 = 19;
					break;
				case 7:
					num2 = 20;
					break;
				case 8:
					num2 = 21;
					break;
				}
			}
			else
			{
				num = 246;
				int maxValue3 = 8;
				num2 = WorldGen.genRand.Next(maxValue3);
				switch (num2)
				{
				case 0:
					num2 = 1;
					break;
				case 1:
					num2 = 30;
					break;
				case 2:
					num2 = 31;
					break;
				case 3:
					num2 = 32;
					break;
				case 4:
					num2 = 33;
					break;
				case 5:
					num2 = 34;
					break;
				case 6:
					num2 = 35;
					break;
				case 7:
					num2 = 36;
					break;
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x060011FD RID: 4605 RVA: 0x0043686C File Offset: 0x00434A6C
		public static PaintingEntry RandPictureTile()
		{
			int num = WorldGen.genRand.Next(3);
			int num2 = 0;
			if (num <= 1)
			{
				int maxValue = 7;
				num = 240;
				num2 = WorldGen.genRand.Next(maxValue);
				if (num2 == 6)
				{
					num2 = WorldGen.genRand.Next(maxValue);
				}
				switch (num2)
				{
				case 0:
					num2 = 12;
					break;
				case 1:
					num2 = 13;
					break;
				case 2:
					num2 = 14;
					break;
				case 3:
					num2 = 15;
					break;
				case 4:
					num2 = 18;
					break;
				case 5:
					num2 = 19;
					break;
				case 6:
					num2 = 23;
					break;
				}
			}
			else if (num == 2)
			{
				num = 242;
				int maxValue2 = 17;
				num2 = WorldGen.genRand.Next(maxValue2);
				switch (num2)
				{
				case 14:
					num2 = 15;
					break;
				case 15:
					num2 = 16;
					break;
				case 16:
					num2 = 30;
					break;
				}
			}
			return new PaintingEntry
			{
				tileType = num,
				style = num2
			};
		}

		// Token: 0x060011FE RID: 4606 RVA: 0x00436950 File Offset: 0x00434B50
		public unsafe static void DungeonStairs(int i, int j, ushort tileType, int wallType)
		{
			Vector2D zero = Vector2D.Zero;
			double num = (double)WorldGen.genRand.Next(5, 9);
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int num2 = WorldGen.genRand.Next(10, 30);
			int num3 = (i <= GenVars.dEnteranceX) ? 1 : -1;
			if (i > Main.maxTilesX - 400)
			{
				num3 = -1;
			}
			else if (i < 400)
			{
				num3 = 1;
			}
			zero.Y = -1.0;
			zero.X = (double)num3;
			if (WorldGen.genRand.Next(3) != 0)
			{
				zero.X *= 1.0 + (double)WorldGen.genRand.Next(0, 200) * 0.01;
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				zero.X *= (double)WorldGen.genRand.Next(50, 76) * 0.01;
			}
			else if (WorldGen.genRand.Next(6) == 0)
			{
				zero.Y *= 2.0;
			}
			if (GenVars.dungeonX < Main.maxTilesX / 2 && zero.X < 0.0 && zero.X < 0.5)
			{
				zero.X = -0.5;
			}
			if (GenVars.dungeonX > Main.maxTilesX / 2 && zero.X > 0.0 && zero.X > 0.5)
			{
				zero.X = -0.5;
			}
			if (WorldGen.drunkWorldGen)
			{
				num3 *= -1;
				zero.X *= -1.0;
			}
			while (num2 > 0)
			{
				num2--;
				int num4 = (int)(vector2D.X - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num5 = (int)(vector2D.X + num + 4.0 + (double)WorldGen.genRand.Next(6));
				int num6 = (int)(vector2D.Y - num - 4.0);
				int num7 = (int)(vector2D.Y + num + 4.0 + (double)WorldGen.genRand.Next(6));
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				int num8 = 1;
				if (vector2D.X > (double)(Main.maxTilesX / 2))
				{
					num8 = -1;
				}
				int num9 = (int)(vector2D.X + GenVars.dxStrength1 * 0.6 * (double)num8 + GenVars.dxStrength2 * (double)num8);
				int num10 = (int)(GenVars.dyStrength2 * 0.5);
				if (vector2D.Y < Main.worldSurface - 5.0 && *Main.tile[num9, (int)(vector2D.Y - num - 6.0 + (double)num10)].wall == 0 && *Main.tile[num9, (int)(vector2D.Y - num - 7.0 + (double)num10)].wall == 0 && *Main.tile[num9, (int)(vector2D.Y - num - 8.0 + (double)num10)].wall == 0)
				{
					GenVars.dSurface = true;
					WorldGen.TileRunner(num9, (int)(vector2D.Y - num - 6.0 + (double)num10), (double)WorldGen.genRand.Next(25, 35), WorldGen.genRand.Next(10, 20), -1, false, 0.0, -1.0, false, true, -1);
				}
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						*Main.tile[k, l].liquid = 0;
						if (!Main.wallDungeon[(int)(*Main.tile[k, l].wall)])
						{
							*Main.tile[k, l].wall = 0;
							Main.tile[k, l].active(true);
							*Main.tile[k, l].type = tileType;
						}
					}
				}
				for (int m = num4 + 1; m < num5 - 1; m++)
				{
					for (int n = num6 + 1; n < num7 - 1; n++)
					{
						*Main.tile[m, n].wall = (ushort)wallType;
					}
				}
				int num11 = 0;
				if (WorldGen.genRand.Next((int)num) == 0)
				{
					num11 = WorldGen.genRand.Next(1, 3);
				}
				num4 = (int)(vector2D.X - num * 0.5 - (double)num11);
				num5 = (int)(vector2D.X + num * 0.5 + (double)num11);
				num6 = (int)(vector2D.Y - num * 0.5 - (double)num11);
				num7 = (int)(vector2D.Y + num * 0.5 + (double)num11);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				for (int num12 = num4; num12 < num5; num12++)
				{
					for (int num13 = num6; num13 < num7; num13++)
					{
						Main.tile[num12, num13].active(false);
						WorldGen.PlaceWall(num12, num13, wallType, true);
					}
				}
				if (GenVars.dSurface)
				{
					num2 = 0;
				}
				vector2D += zero;
				if (vector2D.Y < Main.worldSurface)
				{
					zero.Y *= 0.98;
				}
			}
			GenVars.dungeonX = (int)vector2D.X;
			GenVars.dungeonY = (int)vector2D.Y;
		}

		// Token: 0x060011FF RID: 4607 RVA: 0x00436F68 File Offset: 0x00435168
		public unsafe static bool PlaceSandTrap(int i, int j)
		{
			int num = 6;
			int num2 = 4;
			int num3 = 25;
			int k = j;
			while (!Main.tile[i, k].active() && k < Main.UnderworldLayer)
			{
				k++;
			}
			if (!Main.tileSolid[(int)(*Main.tile[i, k].type)] || Main.tile[i, k].halfBrick() || Main.tile[i, k].topSlope())
			{
				return false;
			}
			if ((*Main.tile[i, k].type != 53 && *Main.tile[i, k].type != 397 && *Main.tile[i, k].type != 396) || (*Main.tile[i, k].wall != 216 && *Main.tile[i, k].wall != 187))
			{
				return false;
			}
			k--;
			int num4 = -1;
			int num5 = WorldGen.genRand.Next(6, 12);
			int num6 = WorldGen.genRand.Next(6, 14);
			for (int l = i - num3; l <= i + num3; l++)
			{
				for (int m = k - num3; m < k + num3; m++)
				{
					if (Main.tile[l, m].wire())
					{
						return false;
					}
					if (TileID.Sets.BasicChest[(int)(*Main.tile[l, m].type)])
					{
						return false;
					}
					if (TileID.Sets.Paintings[(int)(*Main.tile[l, m].type)])
					{
						return false;
					}
					if (*Main.tile[l, m].type == 10)
					{
						return false;
					}
					if (*Main.tile[l, m].type == 19)
					{
						return false;
					}
					if (*Main.tile[l, m].type == 15)
					{
						return false;
					}
					if (*Main.tile[l, m].type == 219)
					{
						return false;
					}
				}
			}
			for (int n = i - 2; n <= i + 2; n++)
			{
				for (int num7 = k + 1; num7 <= k + 3; num7++)
				{
					if (!Main.tile[n, num7].active() || !Main.tileSolid[(int)(*Main.tile[n, num7].type)])
					{
						return false;
					}
				}
			}
			if (*Main.tile[i, k + 1].type == 162)
			{
				return false;
			}
			int num8 = k;
			while (num8 > k - 30)
			{
				if (Main.tile[i, num8].active())
				{
					if (*Main.tile[i, num8].type == 396)
					{
						num4 = num8;
						break;
					}
					return false;
				}
				else
				{
					num8--;
				}
			}
			if (num4 <= -1)
			{
				return false;
			}
			if (k - num4 < num6 + num2)
			{
				return false;
			}
			int num9 = 0;
			int num10 = (k + num4) / 2;
			for (int num11 = i - num5; num11 <= i + num5; num11++)
			{
				if (Main.tile[num11, num10].active() && Main.tileSolid[(int)(*Main.tile[num11, num10].type)])
				{
					return false;
				}
				for (int num12 = num4 - num6; num12 <= num4; num12++)
				{
					if (Main.tile[num11, num12].active())
					{
						if (TileID.Sets.Ore[(int)(*Main.tile[num11, num12].type)] || *Main.tile[num11, num12].type == 404)
						{
							return false;
						}
						if (Main.tileSolid[(int)(*Main.tile[num11, num12].type)])
						{
							num9++;
						}
					}
				}
			}
			double num13 = (double)((num5 * 2 + 1) * (num6 + 1)) * 0.75;
			if ((double)num9 < num13)
			{
				return false;
			}
			for (int num14 = i - num5 - 1; num14 <= i + num5 + 1; num14++)
			{
				for (int num15 = num4 - num6; num15 <= num4; num15++)
				{
					bool flag = false;
					if (Main.tile[num14, num15].active() && Main.tileSolid[(int)(*Main.tile[num14, num15].type)])
					{
						flag = true;
					}
					if (num15 == num4)
					{
						Main.tile[num14, num15].slope(0);
						Main.tile[num14, num15].halfBrick(false);
						if (!flag)
						{
							Main.tile[num14, num15].active(true);
							*Main.tile[num14, num15].type = 396;
						}
					}
					else if (num15 == num4 - num6)
					{
						Main.tile[num14, num15].ClearTile();
						Main.tile[num14, num15].active(true);
						if (flag && Main.tile[num14, num15 - 1].active() && Main.tileSolid[(int)(*Main.tile[num14, num15 - 1].type)])
						{
							*Main.tile[num14, num15].type = 397;
						}
						else
						{
							*Main.tile[num14, num15].type = 396;
						}
					}
					else if (num14 == i - num5 - 1 || num14 == i + num5 + 1)
					{
						if (!flag)
						{
							Main.tile[num14, num15].ClearTile();
							Main.tile[num14, num15].active(true);
							*Main.tile[num14, num15].type = 396;
						}
						else
						{
							Main.tile[num14, num15].slope(0);
							Main.tile[num14, num15].halfBrick(false);
						}
					}
					else
					{
						Main.tile[num14, num15].ClearTile();
						Main.tile[num14, num15].active(true);
						*Main.tile[num14, num15].type = 53;
					}
				}
			}
			int num16 = (int)((double)num4 - (double)num6 * 0.666);
			while ((double)num16 <= (double)num4 - (double)num6 * 0.333)
			{
				if ((double)num16 < (double)num4 - (double)num6 * 0.4)
				{
					if (Main.tile[i - num5 - 2, num16].bottomSlope())
					{
						Main.tile[i - num5 - 2, num16].slope(0);
					}
				}
				else if ((double)num16 > (double)num4 - (double)num6 * 0.6)
				{
					if (Main.tile[i - num5 - 2, num16].topSlope())
					{
						Main.tile[i - num5 - 2, num16].slope(0);
					}
					Main.tile[i - num5 - 2, num16].halfBrick(false);
				}
				else
				{
					Main.tile[i - num5 - 2, num16].halfBrick(false);
					Main.tile[i - num5 - 2, num16].slope(0);
				}
				if (!Main.tile[i - num5 - 2, num16].active() || !Main.tileSolid[(int)(*Main.tile[i - num5 - 2, num16].type)])
				{
					Main.tile[i - num5 - 2, num16].active(true);
					*Main.tile[i - num5 - 2, num16].type = 396;
				}
				if (!Main.tile[i + num5 + 2, num16].active() || !Main.tileSolid[(int)(*Main.tile[i + num5 + 2, num16].type)])
				{
					Main.tile[i + num5 + 2, num16].active(true);
					*Main.tile[i + num5 + 2, num16].type = 396;
				}
				num16++;
			}
			for (int num17 = num4 - num6; num17 <= num4; num17++)
			{
				Main.tile[i - num5 - 2, num17].slope(0);
				Main.tile[i - num5 - 2, num17].halfBrick(false);
				Main.tile[i - num5 - 1, num17].slope(0);
				Main.tile[i - num5 - 1, num17].halfBrick(false);
				Main.tile[i - num5 + 1, num17].slope(0);
				Main.tile[i - num5 + 1, num17].halfBrick(false);
				Main.tile[i - num5 + 2, num17].slope(0);
				Main.tile[i - num5 + 2, num17].halfBrick(false);
			}
			for (int num18 = i - num5 - 1; num18 < i + num5 + 1; num18++)
			{
				int num19 = k - num6 - 1;
				if (Main.tile[num18, num19].bottomSlope())
				{
					Main.tile[num18, num19].slope(0);
				}
				Main.tile[num18, num19].halfBrick(false);
			}
			WorldGen.KillTile(i - 2, k, false, false, false);
			WorldGen.KillTile(i - 1, k, false, false, false);
			WorldGen.KillTile(i + 1, k, false, false, false);
			WorldGen.KillTile(i + 2, k, false, false, false);
			WorldGen.PlaceTile(i, k, 135, true, false, -1, 7);
			for (int num20 = i - num5; num20 <= i + num5; num20++)
			{
				int num21 = k;
				if ((double)num20 < (double)i - (double)num5 * 0.8 || (double)num20 > (double)i + (double)num5 * 0.8)
				{
					num21 = k - 3;
				}
				else if ((double)num20 < (double)i - (double)num5 * 0.6 || (double)num20 > (double)i + (double)num5 * 0.6)
				{
					num21 = k - 2;
				}
				else if ((double)num20 < (double)i - (double)num5 * 0.4 || (double)num20 > (double)i + (double)num5 * 0.4)
				{
					num21 = k - 1;
				}
				for (int num22 = num4; num22 <= k; num22++)
				{
					if (num20 == i && num22 <= k)
					{
						Main.tile[i, num22].wire(true);
					}
					if (Main.tile[num20, num22].active() && Main.tileSolid[(int)(*Main.tile[num20, num22].type)])
					{
						if (num22 < num4 + num - 4)
						{
							Main.tile[num20, num22].actuator(true);
							Main.tile[num20, num22].wire(true);
						}
						else if (num22 < num21)
						{
							WorldGen.KillTile(num20, num22, false, false, false);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06001200 RID: 4608 RVA: 0x00437B98 File Offset: 0x00435D98
		public unsafe static bool DungeonPitTrap(int i, int j, ushort tileType, int wallType)
		{
			int num = 30;
			int num2 = j;
			int num3 = num2;
			int num4 = WorldGen.genRand.Next(8, 19);
			int num5 = WorldGen.genRand.Next(19, 46);
			int num6 = num4 + WorldGen.genRand.Next(6, 10);
			int num7 = num5 + WorldGen.genRand.Next(6, 10);
			if (!Main.wallDungeon[(int)(*Main.tile[i, num2].wall)])
			{
				return false;
			}
			if (Main.tile[i, num2].active())
			{
				return false;
			}
			int k = num2;
			while (k < Main.maxTilesY)
			{
				if (k > Main.maxTilesY - 300)
				{
					return false;
				}
				if (Main.tile[i, k].active() && WorldGen.SolidTile(i, k, false))
				{
					if (*Main.tile[i, k].type == 48)
					{
						return false;
					}
					num2 = k;
					break;
				}
				else
				{
					k++;
				}
			}
			if (!Main.wallDungeon[(int)(*Main.tile[i - num4, num2].wall)] || !Main.wallDungeon[(int)(*Main.tile[i + num4, num2].wall)])
			{
				return false;
			}
			for (int l = num2; l < num2 + num; l++)
			{
				bool flag = true;
				for (int m = i - num4; m <= i + num4; m++)
				{
					Tile tile = Main.tile[m, l];
					if (tile.active() && Main.tileDungeon[(int)(*tile.type)])
					{
						flag = false;
					}
				}
				if (flag)
				{
					num2 = l;
					break;
				}
			}
			for (int n = i - num4; n <= i + num4; n++)
			{
				for (int num8 = num2; num8 <= num2 + num5; num8++)
				{
					Tile tile2 = Main.tile[n, num8];
					if (tile2.active() && (Main.tileDungeon[(int)(*tile2.type)] || *tile2.type == GenVars.crackedType))
					{
						return false;
					}
				}
			}
			bool flag2 = false;
			if (GenVars.dungeonLake)
			{
				flag2 = true;
				GenVars.dungeonLake = false;
			}
			else if (WorldGen.genRand.Next(8) == 0)
			{
				flag2 = true;
			}
			for (int num9 = i - num4; num9 <= i + num4; num9++)
			{
				for (int num10 = num3; num10 <= num2 + num5; num10++)
				{
					if (Main.tileDungeon[(int)(*Main.tile[num9, num10].type)])
					{
						*Main.tile[num9, num10].type = GenVars.crackedType;
						*Main.tile[num9, num10].wall = (ushort)wallType;
					}
				}
			}
			for (int num11 = i - num6; num11 <= i + num6; num11++)
			{
				for (int num12 = num3; num12 <= num2 + num7; num12++)
				{
					Main.tile[num11, num12].lava(false);
					*Main.tile[num11, num12].liquid = 0;
					if (!Main.wallDungeon[(int)(*Main.tile[num11, num12].wall)] && *Main.tile[num11, num12].type != GenVars.crackedType)
					{
						Main.tile[num11, num12].Clear(TileDataType.Slope);
						*Main.tile[num11, num12].type = tileType;
						Main.tile[num11, num12].active(true);
						if (num11 > i - num6 && num11 < i + num6 && num12 < num2 + num7)
						{
							*Main.tile[num11, num12].wall = (ushort)wallType;
						}
					}
				}
			}
			for (int num13 = i - num4; num13 <= i + num4; num13++)
			{
				for (int num14 = num3; num14 <= num2 + num5; num14++)
				{
					if (*Main.tile[num13, num14].type != GenVars.crackedType)
					{
						if (flag2)
						{
							*Main.tile[num13, num14].liquid = byte.MaxValue;
						}
						if (num13 == i - num4 || num13 == i + num4 || num14 == num2 + num5)
						{
							*Main.tile[num13, num14].type = 48;
						}
						else if ((num13 == i - num4 + 1 && num14 % 2 == 0) || (num13 == i + num4 - 1 && num14 % 2 == 0) || (num14 == num2 + num5 - 1 && num13 % 2 == 0))
						{
							*Main.tile[num13, num14].type = 48;
						}
						else
						{
							Main.tile[num13, num14].active(false);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06001201 RID: 4609 RVA: 0x0043806C File Offset: 0x0043626C
		public unsafe static void DungeonHalls(int i, int j, ushort tileType, int wallType, bool forceX = false)
		{
			Vector2D zero = Vector2D.Zero;
			double num = (double)WorldGen.genRand.Next(4, 6);
			double num2 = num;
			Vector2D zero2 = Vector2D.Zero;
			Vector2D zero3 = Vector2D.Zero;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int num3 = WorldGen.genRand.Next(35, 80);
			bool flag = false;
			if (WorldGen.genRand.Next(6) == 0)
			{
				flag = true;
			}
			if (forceX)
			{
				num3 += 20;
				GenVars.lastDungeonHall = Vector2D.Zero;
			}
			else if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 2.0;
				num3 /= 2;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = true;
			while (!flag2)
			{
				bool flag5 = false;
				int num7;
				if (flag4 && !forceX)
				{
					bool flag6 = true;
					bool flag7 = true;
					bool flag8 = true;
					bool flag9 = true;
					int num4 = num3;
					bool flag10 = false;
					for (int num5 = j; num5 > j - num4; num5--)
					{
						if ((int)(*Main.tile[i, num5].wall) == wallType)
						{
							if (flag10)
							{
								flag6 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int k = j; k < j + num4; k++)
					{
						if ((int)(*Main.tile[i, k].wall) == wallType)
						{
							if (flag10)
							{
								flag7 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int num6 = i; num6 > i - num4; num6--)
					{
						if ((int)(*Main.tile[num6, j].wall) == wallType)
						{
							if (flag10)
							{
								flag8 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					flag10 = false;
					for (int l = i; l < i + num4; l++)
					{
						if ((int)(*Main.tile[l, j].wall) == wallType)
						{
							if (flag10)
							{
								flag9 = false;
								break;
							}
						}
						else
						{
							flag10 = true;
						}
					}
					if (!flag8 && !flag9 && !flag6 && !flag7)
					{
						num7 = ((WorldGen.genRand.Next(2) != 0) ? 1 : -1);
						if (WorldGen.genRand.Next(2) == 0)
						{
							flag5 = true;
						}
					}
					else
					{
						int num8 = WorldGen.genRand.Next(4);
						do
						{
							num8 = WorldGen.genRand.Next(4);
						}
						while ((num8 != 0 || !flag6) && (num8 != 1 || !flag7) && (num8 != 2 || !flag8) && (num8 != 3 || !flag9));
						if (num8 != 0)
						{
							if (num8 != 1)
							{
								flag5 = true;
								num7 = ((num8 != 2) ? 1 : -1);
							}
							else
							{
								num7 = 1;
							}
						}
						else
						{
							num7 = -1;
						}
					}
				}
				else
				{
					num7 = ((WorldGen.genRand.Next(2) != 0) ? 1 : -1);
					if (WorldGen.genRand.Next(2) == 0)
					{
						flag5 = true;
					}
				}
				flag4 = false;
				if (forceX)
				{
					flag5 = true;
				}
				if (flag5)
				{
					zero2.Y = 0.0;
					zero2.X = (double)num7;
					zero3.Y = 0.0;
					zero3.X = (double)(-(double)num7);
					zero.Y = 0.0;
					zero.X = (double)num7;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else
				{
					num += 1.0;
					zero.Y = (double)num7;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num7;
					zero3.X = 0.0;
					zero3.Y = (double)(-(double)num7);
					if (WorldGen.genRand.Next(3) != 0)
					{
						flag3 = true;
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(10, 20) * 0.1;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(10, 20)) * 0.1;
						}
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 40) * 0.01;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(20, 40)) * 0.01;
						}
					}
					else
					{
						num3 /= 2;
					}
				}
				if (GenVars.lastDungeonHall != zero3)
				{
					flag2 = true;
				}
			}
			int num9 = 0;
			bool flag11 = vector2D.Y < Main.rockLayer + 100.0;
			if (WorldGen.remixWorldGen)
			{
				flag11 = (vector2D.Y < Main.worldSurface + 100.0);
			}
			if (!forceX)
			{
				if (vector2D.X > (double)(WorldGen.lastMaxTilesX - 200))
				{
					int num7 = -1;
					zero2.Y = 0.0;
					zero2.X = (double)num7;
					zero.Y = 0.0;
					zero.X = (double)num7;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.X < 200.0)
				{
					int num7 = 1;
					zero2.Y = 0.0;
					zero2.X = (double)num7;
					zero.Y = 0.0;
					zero.X = (double)num7;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.Y > (double)(WorldGen.lastMaxTilesY - 300))
				{
					int num7 = -1;
					num += 1.0;
					zero.Y = (double)num7;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num7;
					if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(20, 50)) * 0.01;
						}
					}
				}
				else if (flag11)
				{
					int num7 = 1;
					num += 1.0;
					zero.Y = (double)num7;
					zero.X = 0.0;
					zero2.X = 0.0;
					zero2.Y = (double)num7;
					if (WorldGen.genRand.Next(3) != 0)
					{
						flag3 = true;
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(10, 20) * 0.1;
						}
						else
						{
							zero.X = (double)(-(double)WorldGen.genRand.Next(10, 20)) * 0.1;
						}
					}
					else if (WorldGen.genRand.Next(2) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
						else
						{
							zero.X = (double)WorldGen.genRand.Next(20, 50) * 0.01;
						}
					}
				}
				else if (vector2D.X < (double)(Main.maxTilesX / 2) && vector2D.X > (double)Main.maxTilesX * 0.25)
				{
					int num7 = -1;
					zero2.Y = 0.0;
					zero2.X = (double)num7;
					zero.Y = 0.0;
					zero.X = (double)num7;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
				else if (vector2D.X > (double)(Main.maxTilesX / 2) && vector2D.X < (double)Main.maxTilesX * 0.75)
				{
					int num7 = 1;
					zero2.Y = 0.0;
					zero2.X = (double)num7;
					zero.Y = 0.0;
					zero.X = (double)num7;
					if (WorldGen.genRand.Next(3) == 0)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							zero.Y = -0.2;
						}
						else
						{
							zero.Y = 0.2;
						}
					}
				}
			}
			if (zero2.Y == 0.0)
			{
				GenVars.DDoorX[GenVars.numDDoors] = (int)vector2D.X;
				GenVars.DDoorY[GenVars.numDDoors] = (int)vector2D.Y;
				GenVars.DDoorPos[GenVars.numDDoors] = 0;
				GenVars.numDDoors++;
			}
			else
			{
				GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = (int)vector2D.X;
				GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = (int)vector2D.Y;
				GenVars.numDungeonPlatforms++;
			}
			GenVars.lastDungeonHall = zero2;
			if (Math.Abs(zero.X) > Math.Abs(zero.Y) && WorldGen.genRand.Next(3) != 0)
			{
				num = (double)((int)(num2 * ((double)WorldGen.genRand.Next(110, 150) * 0.01)));
			}
			while (num3 > 0)
			{
				num9++;
				if (zero2.X > 0.0 && vector2D.X > (double)(Main.maxTilesX - 100))
				{
					num3 = 0;
				}
				else if (zero2.X < 0.0 && vector2D.X < 100.0)
				{
					num3 = 0;
				}
				else if (zero2.Y > 0.0 && vector2D.Y > (double)(Main.maxTilesY - 100))
				{
					num3 = 0;
				}
				else if (WorldGen.remixWorldGen && zero2.Y < 0.0 && vector2D.Y < (Main.rockLayer + Main.worldSurface) / 2.0)
				{
					num3 = 0;
				}
				else if (!WorldGen.remixWorldGen && zero2.Y < 0.0 && vector2D.Y < Main.rockLayer + 50.0)
				{
					num3 = 0;
				}
				num3--;
				int num10 = (int)(vector2D.X - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num11 = (int)(vector2D.X + num + 4.0 + (double)WorldGen.genRand.Next(6));
				int num12 = (int)(vector2D.Y - num - 4.0 - (double)WorldGen.genRand.Next(6));
				int num13 = (int)(vector2D.Y + num + 4.0 + (double)WorldGen.genRand.Next(6));
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesX)
				{
					num11 = Main.maxTilesX;
				}
				if (num12 < 0)
				{
					num12 = 0;
				}
				if (num13 > Main.maxTilesY)
				{
					num13 = Main.maxTilesY;
				}
				for (int m = num10; m < num11; m++)
				{
					for (int n = num12; n < num13; n++)
					{
						if (m < GenVars.dMinX)
						{
							GenVars.dMinX = m;
						}
						if (m > GenVars.dMaxX)
						{
							GenVars.dMaxX = m;
						}
						if (n > GenVars.dMaxY)
						{
							GenVars.dMaxY = n;
						}
						*Main.tile[m, n].liquid = 0;
						if (!Main.wallDungeon[(int)(*Main.tile[m, n].wall)])
						{
							Main.tile[m, n].active(true);
							*Main.tile[m, n].type = tileType;
							Main.tile[m, n].Clear(TileDataType.Slope);
						}
					}
				}
				for (int num14 = num10 + 1; num14 < num11 - 1; num14++)
				{
					for (int num15 = num12 + 1; num15 < num13 - 1; num15++)
					{
						*Main.tile[num14, num15].wall = (ushort)wallType;
					}
				}
				int num16 = 0;
				if (zero.Y == 0.0 && WorldGen.genRand.Next((int)num + 1) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				else if (zero.X == 0.0 && WorldGen.genRand.Next((int)num - 1) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				else if (WorldGen.genRand.Next((int)num * 3) == 0)
				{
					num16 = WorldGen.genRand.Next(1, 3);
				}
				num10 = (int)(vector2D.X - num * 0.5 - (double)num16);
				num11 = (int)(vector2D.X + num * 0.5 + (double)num16);
				num12 = (int)(vector2D.Y - num * 0.5 - (double)num16);
				num13 = (int)(vector2D.Y + num * 0.5 + (double)num16);
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesX)
				{
					num11 = Main.maxTilesX;
				}
				if (num12 < 0)
				{
					num12 = 0;
				}
				if (num13 > Main.maxTilesY)
				{
					num13 = Main.maxTilesY;
				}
				for (int num17 = num10; num17 < num11; num17++)
				{
					for (int num18 = num12; num18 < num13; num18++)
					{
						Main.tile[num17, num18].Clear(TileDataType.Slope);
						if (flag)
						{
							if (Main.tile[num17, num18].active() || (int)(*Main.tile[num17, num18].wall) != wallType)
							{
								Main.tile[num17, num18].active(true);
								*Main.tile[num17, num18].type = GenVars.crackedType;
							}
						}
						else
						{
							Main.tile[num17, num18].active(false);
						}
						Main.tile[num17, num18].Clear(TileDataType.Slope);
						*Main.tile[num17, num18].wall = (ushort)wallType;
					}
				}
				vector2D += zero;
				if (flag3 && num9 > WorldGen.genRand.Next(10, 20))
				{
					num9 = 0;
					zero.X *= -1.0;
				}
			}
			GenVars.dungeonX = (int)vector2D.X;
			GenVars.dungeonY = (int)vector2D.Y;
			if (zero2.Y == 0.0)
			{
				GenVars.DDoorX[GenVars.numDDoors] = (int)vector2D.X;
				GenVars.DDoorY[GenVars.numDDoors] = (int)vector2D.Y;
				GenVars.DDoorPos[GenVars.numDDoors] = 0;
				GenVars.numDDoors++;
				return;
			}
			GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = (int)vector2D.X;
			GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = (int)vector2D.Y;
			GenVars.numDungeonPlatforms++;
		}

		// Token: 0x06001202 RID: 4610 RVA: 0x00439028 File Offset: 0x00437228
		public unsafe static void DungeonRoom(int i, int j, ushort tileType, int wallType)
		{
			double num = (double)WorldGen.genRand.Next(15, 30);
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)i;
			vector2D2.Y = (double)j - num / 2.0;
			int num2 = WorldGen.genRand.Next(10, 20);
			double num3 = vector2D2.X;
			double num4 = vector2D2.X;
			double num5 = vector2D2.Y;
			double num6 = vector2D2.Y;
			while (num2 > 0)
			{
				num2--;
				int num7 = (int)(vector2D2.X - num * 0.8 - 5.0);
				int num8 = (int)(vector2D2.X + num * 0.8 + 5.0);
				int num9 = (int)(vector2D2.Y - num * 0.8 - 5.0);
				int num10 = (int)(vector2D2.Y + num * 0.8 + 5.0);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				for (int k = num7; k < num8; k++)
				{
					for (int l = num9; l < num10; l++)
					{
						if (k < GenVars.dMinX)
						{
							GenVars.dMinX = k;
						}
						if (k > GenVars.dMaxX)
						{
							GenVars.dMaxX = k;
						}
						if (l > GenVars.dMaxY)
						{
							GenVars.dMaxY = l;
						}
						*Main.tile[k, l].liquid = 0;
						if (!Main.wallDungeon[(int)(*Main.tile[k, l].wall)])
						{
							Main.tile[k, l].Clear(TileDataType.Slope);
							Main.tile[k, l].active(true);
							*Main.tile[k, l].type = tileType;
						}
					}
				}
				for (int m = num7 + 1; m < num8 - 1; m++)
				{
					for (int n = num9 + 1; n < num10 - 1; n++)
					{
						*Main.tile[m, n].wall = (ushort)wallType;
					}
				}
				num7 = (int)(vector2D2.X - num * 0.5);
				num8 = (int)(vector2D2.X + num * 0.5);
				num9 = (int)(vector2D2.Y - num * 0.5);
				num10 = (int)(vector2D2.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				if ((double)num7 < num3)
				{
					num3 = (double)num7;
				}
				if ((double)num8 > num4)
				{
					num4 = (double)num8;
				}
				if ((double)num9 < num5)
				{
					num5 = (double)num9;
				}
				if ((double)num10 > num6)
				{
					num6 = (double)num10;
				}
				for (int num11 = num7; num11 < num8; num11++)
				{
					for (int num12 = num9; num12 < num10; num12++)
					{
						Main.tile[num11, num12].active(false);
						*Main.tile[num11, num12].wall = (ushort)wallType;
					}
				}
				vector2D2 += vector2D;
				vector2D.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D.X > 1.0)
				{
					vector2D.X = 1.0;
				}
				if (vector2D.X < -1.0)
				{
					vector2D.X = -1.0;
				}
				if (vector2D.Y > 1.0)
				{
					vector2D.Y = 1.0;
				}
				if (vector2D.Y < -1.0)
				{
					vector2D.Y = -1.0;
				}
			}
			GenVars.dRoomX[GenVars.numDRooms] = (int)vector2D2.X;
			GenVars.dRoomY[GenVars.numDRooms] = (int)vector2D2.Y;
			GenVars.dRoomSize[GenVars.numDRooms] = (int)num;
			GenVars.dRoomL[GenVars.numDRooms] = (int)num3;
			GenVars.dRoomR[GenVars.numDRooms] = (int)num4;
			GenVars.dRoomT[GenVars.numDRooms] = (int)num5;
			GenVars.dRoomB[GenVars.numDRooms] = (int)num6;
			GenVars.dRoomTreasure[GenVars.numDRooms] = false;
			GenVars.numDRooms++;
		}

		// Token: 0x06001203 RID: 4611 RVA: 0x0043952C File Offset: 0x0043772C
		public unsafe static void DungeonEnt(int i, int j, ushort tileType, int wallType)
		{
			int num = 60;
			for (int k = i - num; k < i + num; k++)
			{
				for (int l = j - num; l < j + num; l++)
				{
					if (WorldGen.InWorld(k, l, 0))
					{
						*Main.tile[k, l].liquid = 0;
						Main.tile[k, l].lava(false);
						Main.tile[k, l].Clear(TileDataType.Slope);
					}
				}
			}
			double dxStrength = GenVars.dxStrength1;
			double dyStrength = GenVars.dyStrength1;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j - dyStrength / 2.0;
			GenVars.dMinY = (int)vector2D.Y;
			int num2 = 1;
			if (i > Main.maxTilesX / 2)
			{
				num2 = -1;
			}
			if (WorldGen.drunkWorldGen || WorldGen.getGoodWorldGen)
			{
				num2 *= -1;
			}
			int num3 = (int)(vector2D.X - dxStrength * 0.6 - (double)WorldGen.genRand.Next(2, 5));
			int num4 = (int)(vector2D.X + dxStrength * 0.6 + (double)WorldGen.genRand.Next(2, 5));
			int num5 = (int)(vector2D.Y - dyStrength * 0.6 - (double)WorldGen.genRand.Next(2, 5));
			int num6 = (int)(vector2D.Y + dyStrength * 0.6 + (double)WorldGen.genRand.Next(8, 16));
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int m = num3; m < num4; m++)
			{
				for (int n = num5; n < num6; n++)
				{
					*Main.tile[m, n].liquid = 0;
					if ((int)(*Main.tile[m, n].wall) != wallType)
					{
						*Main.tile[m, n].wall = 0;
						if (m > num3 + 1 && m < num4 - 2 && n > num5 + 1 && n < num6 - 2)
						{
							*Main.tile[m, n].wall = (ushort)wallType;
						}
						Main.tile[m, n].active(true);
						*Main.tile[m, n].type = tileType;
						Main.tile[m, n].Clear(TileDataType.Slope);
					}
				}
			}
			int num7 = num3;
			int num8 = num3 + 5 + WorldGen.genRand.Next(4);
			int num9 = num5 - 3 - WorldGen.genRand.Next(3);
			int num10 = num5;
			for (int num11 = num7; num11 < num8; num11++)
			{
				for (int num12 = num9; num12 < num10; num12++)
				{
					*Main.tile[num11, num12].liquid = 0;
					if ((int)(*Main.tile[num11, num12].wall) != wallType)
					{
						Main.tile[num11, num12].active(true);
						*Main.tile[num11, num12].type = tileType;
						Main.tile[num11, num12].Clear(TileDataType.Slope);
					}
				}
			}
			num7 = num4 - 5 - WorldGen.genRand.Next(4);
			num8 = num4;
			num9 = num5 - 3 - WorldGen.genRand.Next(3);
			num10 = num5;
			for (int num13 = num7; num13 < num8; num13++)
			{
				for (int num14 = num9; num14 < num10; num14++)
				{
					*Main.tile[num13, num14].liquid = 0;
					if ((int)(*Main.tile[num13, num14].wall) != wallType)
					{
						Main.tile[num13, num14].active(true);
						*Main.tile[num13, num14].type = tileType;
						Main.tile[num13, num14].Clear(TileDataType.Slope);
					}
				}
			}
			int num15 = 1 + WorldGen.genRand.Next(2);
			int num16 = 2 + WorldGen.genRand.Next(4);
			int num17 = 0;
			for (int num18 = num3; num18 < num4; num18++)
			{
				for (int num19 = num5 - num15; num19 < num5; num19++)
				{
					*Main.tile[num18, num19].liquid = 0;
					if ((int)(*Main.tile[num18, num19].wall) != wallType)
					{
						Main.tile[num18, num19].active(true);
						*Main.tile[num18, num19].type = tileType;
						Main.tile[num18, num19].Clear(TileDataType.Slope);
					}
				}
				num17++;
				if (num17 >= num16)
				{
					num18 += num16;
					num17 = 0;
				}
			}
			for (int num20 = num3; num20 < num4; num20++)
			{
				int num21 = num6;
				while ((double)num21 < Main.worldSurface)
				{
					*Main.tile[num20, num21].liquid = 0;
					if (!Main.wallDungeon[(int)(*Main.tile[num20, num21].wall)])
					{
						Main.tile[num20, num21].active(true);
						*Main.tile[num20, num21].type = tileType;
					}
					if (num20 > num3 && num20 < num4 - 1)
					{
						*Main.tile[num20, num21].wall = (ushort)wallType;
					}
					Main.tile[num20, num21].Clear(TileDataType.Slope);
					num21++;
				}
			}
			num3 = (int)(vector2D.X - dxStrength * 0.6);
			num4 = (int)(vector2D.X + dxStrength * 0.6);
			num5 = (int)(vector2D.Y - dyStrength * 0.6);
			num6 = (int)(vector2D.Y + dyStrength * 0.6);
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int num22 = num3; num22 < num4; num22++)
			{
				for (int num23 = num5; num23 < num6; num23++)
				{
					*Main.tile[num22, num23].liquid = 0;
					*Main.tile[num22, num23].wall = (ushort)wallType;
					Main.tile[num22, num23].Clear(TileDataType.Slope);
				}
			}
			num3 = (int)(vector2D.X - dxStrength * 0.6 - 1.0);
			num4 = (int)(vector2D.X + dxStrength * 0.6 + 1.0);
			num5 = (int)(vector2D.Y - dyStrength * 0.6 - 1.0);
			num6 = (int)(vector2D.Y + dyStrength * 0.6 + 1.0);
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			if (WorldGen.drunkWorldGen)
			{
				num3 -= 4;
			}
			for (int num24 = num3; num24 < num4; num24++)
			{
				for (int num25 = num5; num25 < num6; num25++)
				{
					*Main.tile[num24, num25].liquid = 0;
					*Main.tile[num24, num25].wall = (ushort)wallType;
					Main.tile[num24, num25].Clear(TileDataType.Slope);
				}
			}
			num3 = (int)(vector2D.X - dxStrength * 0.5);
			num4 = (int)(vector2D.X + dxStrength * 0.5);
			num5 = (int)(vector2D.Y - dyStrength * 0.5);
			num6 = (int)(vector2D.Y + dyStrength * 0.5);
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int num26 = num3; num26 < num4; num26++)
			{
				for (int num27 = num5; num27 < num6; num27++)
				{
					*Main.tile[num26, num27].liquid = 0;
					Main.tile[num26, num27].active(false);
					*Main.tile[num26, num27].wall = (ushort)wallType;
				}
			}
			int num28 = (int)vector2D.X;
			int num29 = num6;
			for (int num30 = 0; num30 < 20; num30++)
			{
				num28 = (int)vector2D.X - num30;
				if (!Main.tile[num28, num29].active() && Main.wallDungeon[(int)(*Main.tile[num28, num29].wall)])
				{
					GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = num28;
					GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = num29;
					GenVars.numDungeonPlatforms++;
					break;
				}
				num28 = (int)vector2D.X + num30;
				if (!Main.tile[num28, num29].active() && Main.wallDungeon[(int)(*Main.tile[num28, num29].wall)])
				{
					GenVars.dungeonPlatformX[GenVars.numDungeonPlatforms] = num28;
					GenVars.dungeonPlatformY[GenVars.numDungeonPlatforms] = num29;
					GenVars.numDungeonPlatforms++;
					break;
				}
			}
			vector2D.X += dxStrength * 0.6 * (double)num2;
			vector2D.Y += dyStrength * 0.5;
			dxStrength = GenVars.dxStrength2;
			dyStrength = GenVars.dyStrength2;
			vector2D.X += dxStrength * 0.55 * (double)num2;
			vector2D.Y -= dyStrength * 0.5;
			num3 = (int)(vector2D.X - dxStrength * 0.6 - (double)WorldGen.genRand.Next(1, 3));
			num4 = (int)(vector2D.X + dxStrength * 0.6 + (double)WorldGen.genRand.Next(1, 3));
			num5 = (int)(vector2D.Y - dyStrength * 0.6 - (double)WorldGen.genRand.Next(1, 3));
			num6 = (int)(vector2D.Y + dyStrength * 0.6 + (double)WorldGen.genRand.Next(6, 16));
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int num31 = num3; num31 < num4; num31++)
			{
				for (int num32 = num5; num32 < num6; num32++)
				{
					*Main.tile[num31, num32].liquid = 0;
					if ((int)(*Main.tile[num31, num32].wall) != wallType)
					{
						bool flag = true;
						if (num2 < 0)
						{
							if ((double)num31 < vector2D.X - dxStrength * 0.5)
							{
								flag = false;
							}
						}
						else if ((double)num31 > vector2D.X + dxStrength * 0.5 - 1.0)
						{
							flag = false;
						}
						if (flag)
						{
							*Main.tile[num31, num32].wall = 0;
							Main.tile[num31, num32].active(true);
							*Main.tile[num31, num32].type = tileType;
							Main.tile[num31, num32].Clear(TileDataType.Slope);
						}
					}
				}
			}
			for (int num33 = num3; num33 < num4; num33++)
			{
				int num34 = num6;
				while ((double)num34 < Main.worldSurface)
				{
					*Main.tile[num33, num34].liquid = 0;
					if (!Main.wallDungeon[(int)(*Main.tile[num33, num34].wall)])
					{
						Main.tile[num33, num34].active(true);
						*Main.tile[num33, num34].type = tileType;
					}
					*Main.tile[num33, num34].wall = (ushort)wallType;
					Main.tile[num33, num34].Clear(TileDataType.Slope);
					num34++;
				}
			}
			num3 = (int)(vector2D.X - dxStrength * 0.5);
			num4 = (int)(vector2D.X + dxStrength * 0.5);
			num7 = num3;
			if (num2 < 0)
			{
				num7++;
			}
			num8 = num7 + 5 + WorldGen.genRand.Next(4);
			num9 = num5 - 3 - WorldGen.genRand.Next(3);
			num10 = num5;
			for (int num35 = num7; num35 < num8; num35++)
			{
				for (int num36 = num9; num36 < num10; num36++)
				{
					*Main.tile[num35, num36].liquid = 0;
					if ((int)(*Main.tile[num35, num36].wall) != wallType)
					{
						Main.tile[num35, num36].active(true);
						*Main.tile[num35, num36].type = tileType;
						Main.tile[num35, num36].Clear(TileDataType.Slope);
					}
				}
			}
			num7 = num4 - 5 - WorldGen.genRand.Next(4);
			num8 = num4;
			num9 = num5 - 3 - WorldGen.genRand.Next(3);
			num10 = num5;
			for (int num37 = num7; num37 < num8; num37++)
			{
				for (int num38 = num9; num38 < num10; num38++)
				{
					*Main.tile[num37, num38].liquid = 0;
					if ((int)(*Main.tile[num37, num38].wall) != wallType)
					{
						Main.tile[num37, num38].active(true);
						*Main.tile[num37, num38].type = tileType;
						Main.tile[num37, num38].Clear(TileDataType.Slope);
					}
				}
			}
			num15 = 1 + WorldGen.genRand.Next(2);
			num16 = 2 + WorldGen.genRand.Next(4);
			num17 = 0;
			if (num2 < 0)
			{
				num4++;
			}
			for (int num39 = num3 + 1; num39 < num4 - 1; num39++)
			{
				for (int num40 = num5 - num15; num40 < num5; num40++)
				{
					*Main.tile[num39, num40].liquid = 0;
					if ((int)(*Main.tile[num39, num40].wall) != wallType)
					{
						Main.tile[num39, num40].active(true);
						*Main.tile[num39, num40].type = tileType;
						Main.tile[num39, num40].Clear(TileDataType.Slope);
					}
				}
				num17++;
				if (num17 >= num16)
				{
					num39 += num16;
					num17 = 0;
				}
			}
			if (!WorldGen.drunkWorldGen)
			{
				num3 = (int)(vector2D.X - dxStrength * 0.6);
				num4 = (int)(vector2D.X + dxStrength * 0.6);
				num5 = (int)(vector2D.Y - dyStrength * 0.6);
				num6 = (int)(vector2D.Y + dyStrength * 0.6);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int num41 = num3; num41 < num4; num41++)
				{
					for (int num42 = num5; num42 < num6; num42++)
					{
						*Main.tile[num41, num42].liquid = 0;
						*Main.tile[num41, num42].wall = 0;
					}
				}
			}
			num3 = (int)(vector2D.X - dxStrength * 0.5);
			num4 = (int)(vector2D.X + dxStrength * 0.5);
			num5 = (int)(vector2D.Y - dyStrength * 0.5);
			num6 = (int)(vector2D.Y + dyStrength * 0.5);
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int num43 = num3; num43 < num4; num43++)
			{
				for (int num44 = num5; num44 < num6; num44++)
				{
					*Main.tile[num43, num44].liquid = 0;
					Main.tile[num43, num44].active(false);
					*Main.tile[num43, num44].wall = 0;
				}
			}
			Main.dungeonX = (int)vector2D.X;
			Main.dungeonY = num6;
			int num45 = NPC.NewNPC(new EntitySource_WorldGen(null), Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
			Main.npc[num45].homeless = false;
			Main.npc[num45].homeTileX = Main.dungeonX;
			Main.npc[num45].homeTileY = Main.dungeonY;
			if (WorldGen.drunkWorldGen)
			{
				int num46 = (int)Main.worldSurface;
				while (Main.tile[GenVars.dungeonX, num46].active() || *Main.tile[GenVars.dungeonX, num46].wall > 0 || Main.tile[GenVars.dungeonX, num46 - 1].active() || *Main.tile[GenVars.dungeonX, num46 - 1].wall > 0 || Main.tile[GenVars.dungeonX, num46 - 2].active() || *Main.tile[GenVars.dungeonX, num46 - 2].wall > 0 || Main.tile[GenVars.dungeonX, num46 - 3].active() || *Main.tile[GenVars.dungeonX, num46 - 3].wall > 0 || Main.tile[GenVars.dungeonX, num46 - 4].active() || *Main.tile[GenVars.dungeonX, num46 - 4].wall > 0)
				{
					num46--;
					if (num46 < 50)
					{
						break;
					}
				}
				if (num46 > 50)
				{
					WorldGen.GrowDungeonTree(GenVars.dungeonX, num46, false);
				}
			}
			if (!WorldGen.drunkWorldGen)
			{
				int num47 = 100;
				if (num2 == 1)
				{
					int num48 = 0;
					for (int num49 = num4; num49 < num4 + num47; num49++)
					{
						num48++;
						for (int num50 = num6 + num48; num50 < num6 + num47; num50++)
						{
							*Main.tile[num49, num50].liquid = 0;
							*Main.tile[num49, num50 - 1].liquid = 0;
							*Main.tile[num49, num50 - 2].liquid = 0;
							*Main.tile[num49, num50 - 3].liquid = 0;
							if (!Main.wallDungeon[(int)(*Main.tile[num49, num50].wall)] && *Main.tile[num49, num50].wall != 3 && *Main.tile[num49, num50].wall != 83)
							{
								Main.tile[num49, num50].active(true);
								*Main.tile[num49, num50].type = tileType;
								Main.tile[num49, num50].Clear(TileDataType.Slope);
							}
						}
					}
				}
				else
				{
					int num51 = 0;
					for (int num52 = num3; num52 > num3 - num47; num52--)
					{
						num51++;
						for (int num53 = num6 + num51; num53 < num6 + num47; num53++)
						{
							*Main.tile[num52, num53].liquid = 0;
							*Main.tile[num52, num53 - 1].liquid = 0;
							*Main.tile[num52, num53 - 2].liquid = 0;
							*Main.tile[num52, num53 - 3].liquid = 0;
							if (!Main.wallDungeon[(int)(*Main.tile[num52, num53].wall)] && *Main.tile[num52, num53].wall != 3 && *Main.tile[num52, num53].wall != 83)
							{
								Main.tile[num52, num53].active(true);
								*Main.tile[num52, num53].type = tileType;
								Main.tile[num52, num53].Clear(TileDataType.Slope);
							}
						}
					}
				}
			}
			num15 = 1 + WorldGen.genRand.Next(2);
			num16 = 2 + WorldGen.genRand.Next(4);
			num17 = 0;
			num3 = (int)(vector2D.X - dxStrength * 0.5);
			num4 = (int)(vector2D.X + dxStrength * 0.5);
			if (WorldGen.drunkWorldGen)
			{
				if (num2 == 1)
				{
					num4--;
					num3--;
				}
				else
				{
					num3++;
					num4++;
				}
			}
			else
			{
				num3 += 2;
				num4 -= 2;
			}
			for (int num54 = num3; num54 < num4; num54++)
			{
				for (int num55 = num5; num55 < num6 + 1; num55++)
				{
					WorldGen.PlaceWall(num54, num55, wallType, true);
				}
				if (!WorldGen.drunkWorldGen)
				{
					num17++;
					if (num17 >= num16)
					{
						num54 += num16 * 2;
						num17 = 0;
					}
				}
			}
			if (WorldGen.drunkWorldGen)
			{
				num3 = (int)(vector2D.X - dxStrength * 0.5);
				num4 = (int)(vector2D.X + dxStrength * 0.5);
				if (num2 == 1)
				{
					num3 = num4 - 3;
				}
				else
				{
					num4 = num3 + 3;
				}
				for (int num56 = num3; num56 < num4; num56++)
				{
					for (int num57 = num5; num57 < num6 + 1; num57++)
					{
						Main.tile[num56, num57].active(true);
						*Main.tile[num56, num57].type = tileType;
						Main.tile[num56, num57].Clear(TileDataType.Slope);
					}
				}
			}
			vector2D.X -= dxStrength * 0.6 * (double)num2;
			vector2D.Y += dyStrength * 0.5;
			dxStrength = 15.0;
			dyStrength = 3.0;
			vector2D.Y -= dyStrength * 0.5;
			num3 = (int)(vector2D.X - dxStrength * 0.5);
			num4 = (int)(vector2D.X + dxStrength * 0.5);
			num5 = (int)(vector2D.Y - dyStrength * 0.5);
			num6 = (int)(vector2D.Y + dyStrength * 0.5);
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX;
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY;
			}
			for (int num58 = num3; num58 < num4; num58++)
			{
				for (int num59 = num5; num59 < num6; num59++)
				{
					Main.tile[num58, num59].active(false);
				}
			}
			if (num2 < 0)
			{
				vector2D.X -= 1.0;
			}
			WorldGen.PlaceTile((int)vector2D.X, (int)vector2D.Y + 1, 10, true, false, -1, 13);
		}

		// Token: 0x06001204 RID: 4612 RVA: 0x0043AEEB File Offset: 0x004390EB
		public static bool AddBuriedChest(Point point, int contain = 0, bool notNearOtherChests = false, int Style = -1)
		{
			return WorldGen.AddBuriedChest(point.X, point.Y, contain, notNearOtherChests, Style, false, 0);
		}

		// Token: 0x06001205 RID: 4613 RVA: 0x0043AF04 File Offset: 0x00439104
		public unsafe static bool IsChestRigged(int x, int y)
		{
			return *Main.tile[x, y].type == 467 && *Main.tile[x, y].frameX / 36 == 4;
		}

		// Token: 0x06001206 RID: 4614 RVA: 0x0043AF4C File Offset: 0x0043914C
		private unsafe static bool IsUndergroundDesert(int x, int y)
		{
			if ((double)y < Main.worldSurface)
			{
				return false;
			}
			if ((double)x < (double)Main.maxTilesX * 0.15 || (double)x > (double)Main.maxTilesX * 0.85)
			{
				return false;
			}
			if (WorldGen.remixWorldGen && (double)y > Main.rockLayer)
			{
				return false;
			}
			int num = 15;
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num; j <= y + num; j++)
				{
					if (*Main.tile[i, j].wall == 187 || *Main.tile[i, j].wall == 216)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06001207 RID: 4615 RVA: 0x0043B000 File Offset: 0x00439200
		private unsafe static bool IsDungeon(int x, int y)
		{
			return (double)y >= Main.worldSurface && x >= 0 && x <= Main.maxTilesX && Main.wallDungeon[(int)(*Main.tile[x, y].wall)];
		}

		/// <summary>
		/// Attempts to place a chest and fill it with typical loot according to the style (<paramref name="Style" />) and depth. Without any parameters, a regular, gold, or locked shadow chest will be created, depending on the depth. You can pass in an item type (<paramref name="contain" />) and the first item in the chest will be that item. Unlike <see cref="M:Terraria.WorldGen.PlaceChest(System.Int32,System.Int32,System.UInt16,System.Boolean,System.Int32)" />, the resulting chest will be placed with the bottom right corner at the given coordinates (<paramref name="i" />, <paramref name="j" />). In addition, if the given <paramref name="j" /> coordinate isn't suitable, AddBuriedChest will search down from the given coordinate to find the first solid tile it encounters and attempt to place there. This method returns true if a chest was successfully placed, but be aware that the chest might not be exactly at the coordinates you provide. This makes further adjusting the chest contents directly difficult.
		/// <para /> A video guide can be found on the <see href="https://github.com/tModLoader/tModLoader/wiki/World-Generation#terrariaworldgen-public-static-void-tilerunnerint-i-int-j-double-strength-int-steps-int-type-bool-addtile--false-float-speedx--0f-float-speedy--0f-bool-noychange--false-bool-override--true">World Generation wiki page</see>. It shows an example of running the method with the default parameters <c>WorldGen.AddBuriedChest(x, y);</c>. Notice how the chest style changes according to depth and how the chest is placed on the floor directly below the provided coordinates if possible.
		/// </summary>
		/// <param name="i"></param>
		/// <param name="j"></param>
		/// <param name="contain"></param>
		/// <param name="notNearOtherChests"></param>
		/// <param name="Style"></param>
		/// <param name="trySlope"></param>
		/// <param name="chestTileType"></param>
		/// <returns></returns>
		// Token: 0x06001208 RID: 4616 RVA: 0x0043B048 File Offset: 0x00439248
		public unsafe static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1, bool trySlope = false, ushort chestTileType = 0)
		{
			if (chestTileType == 0)
			{
				chestTileType = 21;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			int num = 15;
			if (WorldGen.tenthAnniversaryWorldGen)
			{
				num *= 3;
			}
			int k = j;
			while (k < Main.maxTilesY - 10)
			{
				int num2 = -1;
				int num3 = -1;
				if (Main.tile[i, k].shimmer())
				{
					return false;
				}
				if (trySlope && Main.tile[i, k].active() && Main.tileSolid[(int)(*Main.tile[i, k].type)] && !Main.tileSolidTop[(int)(*Main.tile[i, k].type)])
				{
					if (Style == 17)
					{
						int num4 = 30;
						for (int l = i - num4; l <= i + num4; l++)
						{
							for (int m = k - num4; m <= k + num4; m++)
							{
								if (!WorldGen.InWorld(l, m, 5))
								{
									return false;
								}
								if (Main.tile[l, m].active() && (*Main.tile[l, m].type == 21 || *Main.tile[l, m].type == 467))
								{
									return false;
								}
							}
						}
					}
					if (Main.tile[i - 1, k].topSlope())
					{
						num2 = (int)Main.tile[i - 1, k].slope();
						Main.tile[i - 1, k].slope(0);
					}
					if (Main.tile[i, k].topSlope())
					{
						num3 = (int)Main.tile[i, k].slope();
						Main.tile[i, k].slope(0);
					}
				}
				if (WorldGen.remixWorldGen && (double)i > (double)Main.maxTilesX * 0.37 && (double)i < (double)Main.maxTilesX * 0.63 && k > Main.maxTilesY - 250)
				{
					return false;
				}
				int num5 = 2;
				for (int n = i - num5; n <= i + num5; n++)
				{
					for (int num6 = k - num5; num6 <= k + num5; num6++)
					{
						if (Main.tile[n, num6].active() && (TileID.Sets.Boulders[(int)(*Main.tile[n, num6].type)] || *Main.tile[n, num6].type == 26 || *Main.tile[n, num6].type == 237))
						{
							return false;
						}
					}
				}
				if (WorldGen.SolidTile(i, k, false))
				{
					bool flag11 = false;
					int num7 = k;
					int num8 = 0;
					bool flag12 = (double)num7 >= Main.worldSurface + 25.0;
					if (WorldGen.remixWorldGen)
					{
						flag12 = (num7 < Main.maxTilesY - 400);
					}
					if (flag12 || contain > 0)
					{
						num8 = 1;
					}
					if (Style >= 0)
					{
						num8 = Style;
					}
					if ((chestTileType == 467 && num8 == 10) || (contain == 0 && num7 <= Main.maxTilesY - 205 && WorldGen.IsUndergroundDesert(i, k)))
					{
						flag2 = true;
						num8 = 10;
						chestTileType = 467;
						contain = (int)((num7 <= (GenVars.desertHiveHigh * 3 + GenVars.desertHiveLow * 4) / 7) ? Utils.SelectRandom<short>(WorldGen.genRand, new short[]
						{
							4056,
							4055,
							4262,
							4263
						}) : Utils.SelectRandom<short>(WorldGen.genRand, new short[]
						{
							4061,
							4062,
							4276
						}));
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && (num8 == 11 || (contain == 0 && (double)num7 >= Main.worldSurface + 25.0 && num7 <= Main.maxTilesY - 205 && (*Main.tile[i, k].type == 147 || *Main.tile[i, k].type == 161 || *Main.tile[i, k].type == 162))))
					{
						flag = true;
						num8 = 11;
						switch (WorldGen.genRand.Next(6))
						{
						case 0:
							contain = 670;
							break;
						case 1:
							contain = 724;
							break;
						case 2:
							contain = 950;
							break;
						case 3:
							contain = ((!WorldGen.remixWorldGen) ? 1319 : 725);
							break;
						case 4:
							contain = 987;
							break;
						default:
							contain = 1579;
							break;
						}
						if (WorldGen.genRand.Next(20) == 0)
						{
							contain = 997;
						}
						if (WorldGen.genRand.Next(50) == 0)
						{
							contain = 669;
						}
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && (Style == 10 || contain == 211 || contain == 212 || contain == 213 || contain == 753))
					{
						flag3 = true;
						num8 = 10;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num7 > Main.maxTilesY - 205 && contain == 0)
					{
						flag7 = true;
						contain = GenVars.hellChestItem[GenVars.hellChest];
						num8 = 4;
						flag11 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 17)
					{
						flag4 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 12)
					{
						flag5 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 == 32)
					{
						flag6 = true;
						if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(num) == 0)
						{
							contain = 52;
						}
					}
					if (chestTileType == 21 && num8 != 0 && WorldGen.IsDungeon(i, k))
					{
						flag8 = true;
					}
					if (chestTileType == 21 && num8 != 0 && (contain == 848 || contain == 857 || contain == 934))
					{
						flag9 = true;
					}
					if (chestTileType == 21 && (num8 == 13 || contain == 159 || contain == 65 || contain == 158 || contain == 2219))
					{
						flag10 = true;
						if (WorldGen.remixWorldGen && !WorldGen.getGoodWorldGen)
						{
							if (WorldGen.crimson)
							{
								num8 = 43;
							}
							else
							{
								chestTileType = 467;
								num8 = 3;
							}
						}
					}
					if (WorldGen.noTrapsWorldGen && num8 == 1 && chestTileType == 21 && (!WorldGen.remixWorldGen || WorldGen.genRand.Next(3) == 0))
					{
						num8 = 4;
						chestTileType = 467;
					}
					int num9 = (chestTileType != 467) ? WorldGen.PlaceChest(i - 1, num7 - 1, chestTileType, notNearOtherChests, num8) : WorldGen.PlaceChest(i - 1, num7 - 1, chestTileType, notNearOtherChests, num8);
					if (num9 >= 0)
					{
						if (flag11)
						{
							GenVars.hellChest++;
							if (GenVars.hellChest >= GenVars.hellChestItem.Length)
							{
								GenVars.hellChest = 0;
							}
						}
						Chest chest = Main.chest[num9];
						int num10 = 0;
						while (num10 == 0)
						{
							bool flag13 = (double)num7 < Main.worldSurface + 25.0;
							if (WorldGen.remixWorldGen)
							{
								flag13 = ((double)num7 >= (Main.rockLayer + (double)((Main.maxTilesY - 350) * 2)) / 3.0);
							}
							if ((num8 == 0 && flag13) || flag9)
							{
								if (contain > 0)
								{
									chest.item[num10].SetDefaults(contain);
									chest.item[num10].Prefix(-1);
									num10++;
									if (contain != 832)
									{
										if (contain == 848)
										{
											chest.item[num10].SetDefaults(866);
											num10++;
										}
									}
									else
									{
										chest.item[num10].SetDefaults(933);
										num10++;
										if (WorldGen.genRand.Next(6) == 0)
										{
											int num11 = WorldGen.genRand.Next(2);
											if (num11 != 0)
											{
												if (num11 == 1)
												{
													num11 = 4427;
												}
											}
											else
											{
												num11 = 4429;
											}
											chest.item[num10].SetDefaults(num11);
											num10++;
										}
									}
									if (Main.tenthAnniversaryWorld && flag9)
									{
										chest.item[num10++].SetDefaults(848);
										chest.item[num10++].SetDefaults(866);
									}
								}
								else
								{
									int num14 = WorldGen.genRand.Next(10);
									if (num14 == 0)
									{
										chest.item[num10].SetDefaults(280);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 1)
									{
										chest.item[num10].SetDefaults(281);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 2)
									{
										chest.item[num10].SetDefaults(284);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 3)
									{
										chest.item[num10].SetDefaults(285);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 4)
									{
										chest.item[num10].SetDefaults(953);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 5)
									{
										chest.item[num10].SetDefaults(946);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 6)
									{
										chest.item[num10].SetDefaults(3068);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 7)
									{
										if (WorldGen.remixWorldGen)
										{
											chest.item[num10].SetDefaults(517);
											chest.item[num10].Prefix(-1);
										}
										else
										{
											chest.item[num10].SetDefaults(3069);
											chest.item[num10].Prefix(-1);
										}
									}
									if (num14 == 8)
									{
										chest.item[num10].SetDefaults(3084);
										chest.item[num10].Prefix(-1);
									}
									if (num14 == 9)
									{
										chest.item[num10].SetDefaults(4341);
										chest.item[num10].Prefix(-1);
									}
									num10++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									int stack = WorldGen.genRand.Next(40, 76);
									chest.item[num10].SetDefaults(282);
									chest.item[num10].stack = stack;
									num10++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									int stack2 = WorldGen.genRand.Next(150, 301);
									chest.item[num10].SetDefaults(279);
									chest.item[num10].stack = stack2;
									num10++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									chest.item[num10].SetDefaults(3093);
									chest.item[num10].stack = 1;
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num10].stack += WorldGen.genRand.Next(2);
									}
									if (WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10].stack += WorldGen.genRand.Next(3);
									}
									num10++;
								}
								if (WorldGen.genRand.Next(6) == 0)
								{
									chest.item[num10].SetDefaults(4345);
									chest.item[num10].stack = 1;
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num10].stack += WorldGen.genRand.Next(2);
									}
									if (WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10].stack += WorldGen.genRand.Next(3);
									}
									num10++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(168);
									chest.item[num10].stack = WorldGen.genRand.Next(3, 6);
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num15 = WorldGen.genRand.Next(2);
									int stack3 = WorldGen.genRand.Next(8) + 3;
									if (num15 == 0)
									{
										chest.item[num10].SetDefaults(GenVars.copperBar);
									}
									if (num15 == 1)
									{
										chest.item[num10].SetDefaults(GenVars.ironBar);
									}
									chest.item[num10].stack = stack3;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack4 = WorldGen.genRand.Next(50, 101);
									chest.item[num10].SetDefaults(965);
									chest.item[num10].stack = stack4;
									num10++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									int num16 = WorldGen.genRand.Next(2);
									int stack5 = WorldGen.genRand.Next(26) + 25;
									if (num16 == 0)
									{
										chest.item[num10].SetDefaults(40);
									}
									if (num16 == 1)
									{
										chest.item[num10].SetDefaults(42);
									}
									chest.item[num10].stack = stack5;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack6 = WorldGen.genRand.Next(3) + 3;
									chest.item[num10].SetDefaults(28);
									chest.item[num10].stack = stack6;
									num10++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									chest.item[num10].SetDefaults(2350);
									chest.item[num10].stack = WorldGen.genRand.Next(3, 6);
									num10++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num17 = WorldGen.genRand.Next(6);
									int stack7 = WorldGen.genRand.Next(1, 3);
									if (num17 == 0)
									{
										chest.item[num10].SetDefaults(292);
									}
									if (num17 == 1)
									{
										chest.item[num10].SetDefaults(298);
									}
									if (num17 == 2)
									{
										chest.item[num10].SetDefaults(299);
									}
									if (num17 == 3)
									{
										chest.item[num10].SetDefaults(290);
									}
									if (num17 == 4)
									{
										chest.item[num10].SetDefaults(2322);
									}
									if (num17 == 5)
									{
										chest.item[num10].SetDefaults(2325);
									}
									chest.item[num10].stack = stack7;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num18 = WorldGen.genRand.Next(2);
									int stack8 = WorldGen.genRand.Next(11) + 10;
									if (num18 == 0)
									{
										chest.item[num10].SetDefaults(8);
									}
									if (num18 == 1)
									{
										chest.item[num10].SetDefaults(31);
									}
									chest.item[num10].stack = stack8;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(72);
									chest.item[num10].stack = WorldGen.genRand.Next(10, 30);
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(9);
									chest.item[num10].stack = WorldGen.genRand.Next(50, 100);
									num10++;
								}
							}
							else if ((!WorldGen.remixWorldGen && (double)num7 < Main.rockLayer) || (WorldGen.remixWorldGen && (double)num7 > Main.rockLayer && num7 < Main.maxTilesY - 250))
							{
								if (contain > 0)
								{
									if (contain == 832)
									{
										chest.item[num10].SetDefaults(933);
										num10++;
									}
									chest.item[num10].SetDefaults(contain);
									chest.item[num10].Prefix(-1);
									num10++;
									if (flag4)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num10++].SetDefaults(4425);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num10++].SetDefaults(4460);
										}
									}
									if (flag10 && WorldGen.genRand.Next(40) == 0)
									{
										chest.item[num10++].SetDefaults(4978);
									}
									if (flag5 && WorldGen.genRand.Next(10) == 0)
									{
										int num12 = WorldGen.genRand.Next(2);
										if (num12 != 0)
										{
											if (num12 == 1)
											{
												num12 = 4427;
											}
										}
										else
										{
											num12 = 4429;
										}
										chest.item[num10].SetDefaults(num12);
										num10++;
									}
									if (flag8 && (!GenVars.generatedShadowKey || WorldGen.genRand.Next(3) == 0))
									{
										GenVars.generatedShadowKey = true;
										chest.item[num10].SetDefaults(329);
										num10++;
									}
								}
								else
								{
									switch (WorldGen.genRand.Next(6))
									{
									case 0:
										chest.item[num10].SetDefaults(49);
										chest.item[num10].Prefix(-1);
										break;
									case 1:
										chest.item[num10].SetDefaults(50);
										chest.item[num10].Prefix(-1);
										break;
									case 2:
										chest.item[num10].SetDefaults(53);
										chest.item[num10].Prefix(-1);
										break;
									case 3:
										chest.item[num10].SetDefaults(54);
										chest.item[num10].Prefix(-1);
										break;
									case 4:
										chest.item[num10].SetDefaults(5011);
										chest.item[num10].Prefix(-1);
										break;
									default:
										chest.item[num10].SetDefaults(975);
										chest.item[num10].Prefix(-1);
										break;
									}
									num10++;
									if (WorldGen.genRand.Next(20) == 0)
									{
										chest.item[num10].SetDefaults(997);
										chest.item[num10].Prefix(-1);
										num10++;
									}
									else if (WorldGen.genRand.Next(20) == 0)
									{
										chest.item[num10].SetDefaults(930);
										chest.item[num10].Prefix(-1);
										num10++;
										chest.item[num10].SetDefaults(931);
										chest.item[num10].stack = WorldGen.genRand.Next(26) + 25;
										num10++;
									}
									if (flag6 && WorldGen.genRand.Next(2) == 0)
									{
										chest.item[num10].SetDefaults(4450);
										num10++;
									}
									if (flag6 && WorldGen.genRand.Next(3) == 0)
									{
										chest.item[num10].SetDefaults(4779);
										num10++;
										chest.item[num10].SetDefaults(4780);
										num10++;
										chest.item[num10].SetDefaults(4781);
										num10++;
									}
								}
								if (flag2)
								{
									if (WorldGen.genRand.Next(3) == 0)
									{
										chest.item[num10].SetDefaults(4423);
										chest.item[num10].stack = WorldGen.genRand.Next(10, 20);
										num10++;
									}
								}
								else if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(166);
									chest.item[num10].stack = WorldGen.genRand.Next(10, 20);
									num10++;
								}
								if (WorldGen.genRand.Next(5) == 0)
								{
									chest.item[num10].SetDefaults(52);
									num10++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									int stack9 = WorldGen.genRand.Next(50, 101);
									chest.item[num10].SetDefaults(965);
									chest.item[num10].stack = stack9;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num19 = WorldGen.genRand.Next(2);
									int stack10 = WorldGen.genRand.Next(10) + 5;
									if (num19 == 0)
									{
										chest.item[num10].SetDefaults(GenVars.ironBar);
									}
									if (num19 == 1)
									{
										chest.item[num10].SetDefaults(GenVars.silverBar);
									}
									chest.item[num10].stack = stack10;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num20 = WorldGen.genRand.Next(2);
									int stack11 = WorldGen.genRand.Next(25) + 25;
									if (num20 == 0)
									{
										chest.item[num10].SetDefaults(40);
									}
									if (num20 == 1)
									{
										chest.item[num10].SetDefaults(42);
									}
									chest.item[num10].stack = stack11;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack12 = WorldGen.genRand.Next(3) + 3;
									chest.item[num10].SetDefaults(28);
									chest.item[num10].stack = stack12;
									num10++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num21 = WorldGen.genRand.Next(9);
									int stack13 = WorldGen.genRand.Next(1, 3);
									if (num21 == 0)
									{
										chest.item[num10].SetDefaults(289);
									}
									if (num21 == 1)
									{
										chest.item[num10].SetDefaults(298);
									}
									if (num21 == 2)
									{
										chest.item[num10].SetDefaults(299);
									}
									if (num21 == 3)
									{
										chest.item[num10].SetDefaults(290);
									}
									if (num21 == 4)
									{
										chest.item[num10].SetDefaults(303);
									}
									if (num21 == 5)
									{
										chest.item[num10].SetDefaults(291);
									}
									if (num21 == 6)
									{
										chest.item[num10].SetDefaults(304);
									}
									if (num21 == 7)
									{
										chest.item[num10].SetDefaults(2322);
									}
									if (num21 == 8)
									{
										chest.item[num10].SetDefaults(2329);
									}
									chest.item[num10].stack = stack13;
									num10++;
								}
								if (WorldGen.genRand.Next(3) != 0)
								{
									int stack14 = WorldGen.genRand.Next(2, 5);
									chest.item[num10].SetDefaults(2350);
									chest.item[num10].stack = stack14;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack15 = WorldGen.genRand.Next(11) + 10;
									if (num8 == 11)
									{
										chest.item[num10].SetDefaults(974);
									}
									else
									{
										chest.item[num10].SetDefaults(8);
									}
									chest.item[num10].stack = stack15;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(72);
									chest.item[num10].stack = WorldGen.genRand.Next(50, 90);
									num10++;
								}
							}
							else if (num7 < Main.maxTilesY - 250 || (WorldGen.remixWorldGen && (Style == 7 || Style == 14)))
							{
								if (contain > 0)
								{
									chest.item[num10].SetDefaults(contain);
									chest.item[num10].Prefix(-1);
									num10++;
									if (flag && WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num10].SetDefaults(3199);
										num10++;
									}
									if (flag2)
									{
										if (WorldGen.genRand.Next(7) == 0)
										{
											chest.item[num10].SetDefaults(4346);
											num10++;
										}
										if (WorldGen.genRand.Next(15) == 0)
										{
											chest.item[num10].SetDefaults(4066);
											num10++;
										}
									}
									if (flag3 && WorldGen.genRand.Next(6) == 0)
									{
										chest.item[num10++].SetDefaults(3360);
										chest.item[num10++].SetDefaults(3361);
									}
									if (flag3 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10++].SetDefaults(4426);
									}
									if (flag4)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num10++].SetDefaults(4425);
										}
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num10++].SetDefaults(4460);
										}
									}
									if (flag8 && (!GenVars.generatedShadowKey || WorldGen.genRand.Next(3) == 0))
									{
										GenVars.generatedShadowKey = true;
										chest.item[num10].SetDefaults(329);
										num10++;
									}
								}
								else
								{
									int num13 = WorldGen.genRand.Next(7);
									bool flag14 = num7 > GenVars.lavaLine;
									if (WorldGen.remixWorldGen)
									{
										flag14 = ((double)num7 > Main.worldSurface && (double)num7 < Main.rockLayer);
									}
									int maxValue = 20;
									if (WorldGen.tenthAnniversaryWorldGen)
									{
										maxValue = 15;
									}
									if (WorldGen.genRand.Next(maxValue) == 0 && flag14)
									{
										chest.item[num10].SetDefaults(906);
										chest.item[num10].Prefix(-1);
									}
									else if (WorldGen.genRand.Next(15) == 0)
									{
										chest.item[num10].SetDefaults(997);
										chest.item[num10].Prefix(-1);
									}
									else
									{
										if (num13 == 0)
										{
											chest.item[num10].SetDefaults(49);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 1)
										{
											chest.item[num10].SetDefaults(50);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 2)
										{
											chest.item[num10].SetDefaults(53);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 3)
										{
											chest.item[num10].SetDefaults(54);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 4)
										{
											chest.item[num10].SetDefaults(5011);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 5)
										{
											chest.item[num10].SetDefaults(975);
											chest.item[num10].Prefix(-1);
										}
										if (num13 == 6)
										{
											chest.item[num10].SetDefaults(930);
											chest.item[num10].Prefix(-1);
											num10++;
											chest.item[num10].SetDefaults(931);
											chest.item[num10].stack = WorldGen.genRand.Next(26) + 25;
										}
									}
									num10++;
									if (flag6)
									{
										if (WorldGen.genRand.Next(2) == 0)
										{
											chest.item[num10].SetDefaults(4450);
											num10++;
										}
										else
										{
											chest.item[num10].SetDefaults(4779);
											num10++;
											chest.item[num10].SetDefaults(4780);
											num10++;
											chest.item[num10].SetDefaults(4781);
											num10++;
										}
									}
								}
								if (WorldGen.genRand.Next(5) == 0)
								{
									chest.item[num10].SetDefaults(43);
									num10++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(167);
									num10++;
								}
								if (WorldGen.genRand.Next(4) == 0)
								{
									chest.item[num10].SetDefaults(51);
									chest.item[num10].stack = WorldGen.genRand.Next(26) + 25;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num22 = WorldGen.genRand.Next(2);
									int stack16 = WorldGen.genRand.Next(8) + 3;
									if (num22 == 0)
									{
										chest.item[num10].SetDefaults(GenVars.goldBar);
									}
									if (num22 == 1)
									{
										chest.item[num10].SetDefaults(GenVars.silverBar);
									}
									chest.item[num10].stack = stack16;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num23 = WorldGen.genRand.Next(2);
									int stack17 = WorldGen.genRand.Next(26) + 25;
									if (num23 == 0)
									{
										chest.item[num10].SetDefaults(41);
									}
									if (num23 == 1)
									{
										chest.item[num10].SetDefaults(279);
									}
									chest.item[num10].stack = stack17;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack18 = WorldGen.genRand.Next(3) + 3;
									chest.item[num10].SetDefaults(188);
									chest.item[num10].stack = stack18;
									num10++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num24 = WorldGen.genRand.Next(6);
									int stack19 = WorldGen.genRand.Next(1, 3);
									if (num24 == 0)
									{
										chest.item[num10].SetDefaults(296);
									}
									if (num24 == 1)
									{
										chest.item[num10].SetDefaults(295);
									}
									if (num24 == 2)
									{
										chest.item[num10].SetDefaults(299);
									}
									if (num24 == 3)
									{
										chest.item[num10].SetDefaults(302);
									}
									if (num24 == 4)
									{
										chest.item[num10].SetDefaults(303);
									}
									if (num24 == 5)
									{
										chest.item[num10].SetDefaults(305);
									}
									chest.item[num10].stack = stack19;
									num10++;
								}
								if (WorldGen.genRand.Next(3) > 1)
								{
									int num25 = WorldGen.genRand.Next(6);
									int stack20 = WorldGen.genRand.Next(1, 3);
									if (num25 == 0)
									{
										chest.item[num10].SetDefaults(301);
									}
									if (num25 == 1)
									{
										chest.item[num10].SetDefaults(297);
									}
									if (num25 == 2)
									{
										chest.item[num10].SetDefaults(304);
									}
									if (num25 == 3)
									{
										chest.item[num10].SetDefaults(2329);
									}
									if (num25 == 4)
									{
										chest.item[num10].SetDefaults(2351);
									}
									if (num25 == 5)
									{
										chest.item[num10].SetDefaults(2326);
									}
									chest.item[num10].stack = stack20;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack21 = WorldGen.genRand.Next(2, 5);
									chest.item[num10].SetDefaults(2350);
									chest.item[num10].stack = stack21;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num26 = WorldGen.genRand.Next(2);
									int stack22 = WorldGen.genRand.Next(15) + 15;
									if (num26 == 0)
									{
										if (num8 == 11)
										{
											chest.item[num10].SetDefaults(974);
										}
										else
										{
											chest.item[num10].SetDefaults(8);
										}
									}
									if (num26 == 1)
									{
										chest.item[num10].SetDefaults(282);
									}
									chest.item[num10].stack = stack22;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(73);
									chest.item[num10].stack = WorldGen.genRand.Next(1, 3);
									num10++;
								}
							}
							else
							{
								if (contain > 0)
								{
									chest.item[num10].SetDefaults(contain);
									chest.item[num10].Prefix(-1);
									num10++;
									if (flag7 && WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num10].SetDefaults(5010);
										num10++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10].SetDefaults(4443);
										num10++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10].SetDefaults(4737);
										num10++;
									}
									if (flag7 && WorldGen.genRand.Next(10) == 0)
									{
										chest.item[num10].SetDefaults(4551);
										num10++;
									}
								}
								else
								{
									int num27 = WorldGen.genRand.Next(4);
									if (num27 == 0)
									{
										chest.item[num10].SetDefaults(49);
										chest.item[num10].Prefix(-1);
									}
									if (num27 == 1)
									{
										chest.item[num10].SetDefaults(50);
										chest.item[num10].Prefix(-1);
									}
									if (num27 == 2)
									{
										chest.item[num10].SetDefaults(53);
										chest.item[num10].Prefix(-1);
									}
									if (num27 == 3)
									{
										chest.item[num10].SetDefaults(54);
										chest.item[num10].Prefix(-1);
									}
									num10++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(167);
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num28 = WorldGen.genRand.Next(2);
									int stack23 = WorldGen.genRand.Next(15) + 15;
									if (num28 == 0)
									{
										chest.item[num10].SetDefaults(117);
									}
									if (num28 == 1)
									{
										chest.item[num10].SetDefaults(GenVars.goldBar);
									}
									chest.item[num10].stack = stack23;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num29 = WorldGen.genRand.Next(2);
									int stack24 = WorldGen.genRand.Next(25) + 50;
									if (num29 == 0)
									{
										chest.item[num10].SetDefaults(265);
									}
									if (num29 == 1)
									{
										if (WorldGen.SavedOreTiers.Silver == 168)
										{
											chest.item[num10].SetDefaults(4915);
										}
										else
										{
											chest.item[num10].SetDefaults(278);
										}
									}
									chest.item[num10].stack = stack24;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int stack25 = WorldGen.genRand.Next(6) + 15;
									chest.item[num10].SetDefaults(227);
									chest.item[num10].stack = stack25;
									num10++;
								}
								if (WorldGen.genRand.Next(4) > 0)
								{
									int num30 = WorldGen.genRand.Next(8);
									int stack26 = WorldGen.genRand.Next(1, 3);
									if (num30 == 0)
									{
										chest.item[num10].SetDefaults(296);
									}
									if (num30 == 1)
									{
										chest.item[num10].SetDefaults(295);
									}
									if (num30 == 2)
									{
										chest.item[num10].SetDefaults(293);
									}
									if (num30 == 3)
									{
										chest.item[num10].SetDefaults(288);
									}
									if (num30 == 4)
									{
										chest.item[num10].SetDefaults(294);
									}
									if (num30 == 5)
									{
										chest.item[num10].SetDefaults(297);
									}
									if (num30 == 6)
									{
										chest.item[num10].SetDefaults(304);
									}
									if (num30 == 7)
									{
										chest.item[num10].SetDefaults(2323);
									}
									chest.item[num10].stack = stack26;
									num10++;
								}
								if (WorldGen.genRand.Next(3) > 0)
								{
									int num31 = WorldGen.genRand.Next(8);
									int stack27 = WorldGen.genRand.Next(1, 3);
									if (num31 == 0)
									{
										chest.item[num10].SetDefaults(305);
									}
									if (num31 == 1)
									{
										chest.item[num10].SetDefaults(301);
									}
									if (num31 == 2)
									{
										chest.item[num10].SetDefaults(302);
									}
									if (num31 == 3)
									{
										chest.item[num10].SetDefaults(288);
									}
									if (num31 == 4)
									{
										chest.item[num10].SetDefaults(300);
									}
									if (num31 == 5)
									{
										chest.item[num10].SetDefaults(2351);
									}
									if (num31 == 6)
									{
										chest.item[num10].SetDefaults(2348);
									}
									if (num31 == 7)
									{
										chest.item[num10].SetDefaults(2345);
									}
									chest.item[num10].stack = stack27;
									num10++;
								}
								if (WorldGen.genRand.Next(3) == 0)
								{
									int stack28 = WorldGen.genRand.Next(1, 3);
									if (WorldGen.genRand.Next(2) == 0)
									{
										chest.item[num10].SetDefaults(2350);
									}
									else
									{
										chest.item[num10].SetDefaults(4870);
									}
									chest.item[num10].stack = stack28;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									int num32 = WorldGen.genRand.Next(2);
									int stack29 = WorldGen.genRand.Next(15) + 15;
									if (num32 == 0)
									{
										chest.item[num10].SetDefaults(8);
									}
									if (num32 == 1)
									{
										chest.item[num10].SetDefaults(282);
									}
									chest.item[num10].stack = stack29;
									num10++;
								}
								if (WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(73);
									chest.item[num10].stack = WorldGen.genRand.Next(2, 5);
									num10++;
								}
							}
							if (num10 > 0 && chestTileType == 21)
							{
								if (num8 == 10 && WorldGen.genRand.Next(4) == 0)
								{
									chest.item[num10].SetDefaults(2204);
									num10++;
								}
								if (num8 == 11 && WorldGen.genRand.Next(7) == 0)
								{
									chest.item[num10].SetDefaults(2198);
									num10++;
								}
								if (flag10 && WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(2197);
									num10++;
								}
								if (flag10)
								{
									int num33 = WorldGen.genRand.Next(6);
									if (num33 == 0)
									{
										chest.item[num10].SetDefaults(5258);
									}
									if (num33 == 1)
									{
										chest.item[num10].SetDefaults(5226);
									}
									if (num33 == 2)
									{
										chest.item[num10].SetDefaults(5254);
									}
									if (num33 == 3)
									{
										chest.item[num10].SetDefaults(5238);
									}
									if (num33 == 4)
									{
										chest.item[num10].SetDefaults(5255);
									}
									if (num33 == 5)
									{
										chest.item[num10].SetDefaults(5388);
									}
									num10++;
								}
								if (flag10)
								{
									chest.item[num10].SetDefaults(751);
									chest.item[num10].stack = WorldGen.genRand.Next(50, 101);
									num10++;
								}
								if (num8 == 16)
								{
									chest.item[num10].SetDefaults(2195);
									num10++;
								}
								if (Main.wallDungeon[(int)(*Main.tile[i, k].wall)] && WorldGen.genRand.Next(8) == 0)
								{
									chest.item[num10].SetDefaults(2192);
									num10++;
								}
								if ((num8 == 23 || num8 == 24 || num8 == 25 || num8 == 26 || num8 == 27) && WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(5234);
									num10++;
								}
								if (num8 == 16)
								{
									if (WorldGen.genRand.Next(5) == 0)
									{
										chest.item[num10].SetDefaults(2767);
										num10++;
									}
									else
									{
										chest.item[num10].SetDefaults(2766);
										chest.item[num10].stack = WorldGen.genRand.Next(3, 8);
										num10++;
									}
								}
							}
							if (num10 > 0 && chestTileType == 467)
							{
								if (flag10 && WorldGen.genRand.Next(3) == 0)
								{
									chest.item[num10].SetDefaults(2197);
									num10++;
								}
								if (flag10)
								{
									int num34 = WorldGen.genRand.Next(5);
									if (num34 == 0)
									{
										chest.item[num10].SetDefaults(5258);
									}
									if (num34 == 1)
									{
										chest.item[num10].SetDefaults(5226);
									}
									if (num34 == 2)
									{
										chest.item[num10].SetDefaults(5254);
									}
									if (num34 == 3)
									{
										chest.item[num10].SetDefaults(5238);
									}
									if (num34 == 4)
									{
										chest.item[num10].SetDefaults(5255);
									}
									num10++;
								}
								if (flag10)
								{
									chest.item[num10].SetDefaults(751);
									chest.item[num10].stack = WorldGen.genRand.Next(50, 101);
									num10++;
								}
								if (num8 == 13 && WorldGen.genRand.Next(2) == 0)
								{
									chest.item[num10].SetDefaults(5234);
									num10++;
								}
							}
						}
						return true;
					}
					if (trySlope)
					{
						if (num2 > -1)
						{
							Main.tile[i - 1, k].slope((byte)num2);
						}
						if (num3 > -1)
						{
							Main.tile[i, k].slope((byte)num3);
						}
					}
					return false;
				}
				else
				{
					k++;
				}
			}
			return false;
		}

		// Token: 0x06001209 RID: 4617 RVA: 0x0043DB48 File Offset: 0x0043BD48
		public unsafe static void UnlockDoor(int i, int j)
		{
			int num = j;
			if (Main.tile[i, num] == null)
			{
				return;
			}
			while (*Main.tile[i, num].frameY != 594)
			{
				num--;
				if (*Main.tile[i, num].frameY < 594 || num <= 0)
				{
					return;
				}
			}
			SoundEngine.PlaySound(22, i * 16, num * 16 + 16, 1, 1f, 0f);
			for (int k = num; k <= num + 2; k++)
			{
				if (Main.tile[i, k] == null)
				{
					Main.tile[i, k] = default(Tile);
				}
				ref short frameY = ref Main.tile[i, k].frameY;
				frameY += 54;
				for (int l = 0; l < 4; l++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(k * 16)), 16, 16, 11, 0f, 0f, 0, default(Color), 1f);
				}
			}
			AchievementsHelper.NotifyProgressionEvent(22);
		}

		// Token: 0x0600120A RID: 4618 RVA: 0x0043DC6C File Offset: 0x0043BE6C
		public unsafe static bool OpenDoor(int i, int j, int direction)
		{
			if (Main.tile[i, j - 1] == null)
			{
				Main.tile[i, j - 1] = default(Tile);
			}
			if (Main.tile[i, j - 2] == null)
			{
				Main.tile[i, j - 2] = default(Tile);
			}
			if (Main.tile[i, j + 1] == null)
			{
				Main.tile[i, j + 1] = default(Tile);
			}
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			Tile tile = Main.tile[i, j];
			if (TileLoader.OpenDoorID(tile) < 0)
			{
				return false;
			}
			if (WorldGen.IsLockedDoor(tile))
			{
				return false;
			}
			short num2 = 0;
			int num3 = (int)(*tile.frameY);
			int num4 = 0;
			while (num3 >= 54)
			{
				num3 -= 54;
				num4++;
			}
			if (*tile.frameX >= 54)
			{
				int num5 = (int)(*tile.frameX / 54);
				num4 += 36 * num5;
				num2 += (short)(72 * num5);
			}
			int num6 = j - num3 / 18;
			TileColorCache cache = Main.tile[i, num6].BlockColorAndCoating();
			if (Main.tile[i, num6 + 1] == null)
			{
				Main.tile[i, num6 + 1] = default(Tile);
			}
			TileColorCache cache2 = Main.tile[i, num6 + 1].BlockColorAndCoating();
			if (Main.tile[i, num6 + 2] == null)
			{
				Main.tile[i, num6 + 2] = default(Tile);
			}
			TileColorCache cache3 = Main.tile[i, num6 + 2].BlockColorAndCoating();
			int num7;
			int num8;
			if (direction == -1)
			{
				num7 = i - 1;
				num2 += 36;
				num8 = i - 1;
			}
			else
			{
				num7 = i;
				num8 = i + 1;
			}
			for (int k = num6; k < num6 + 3; k++)
			{
				if (Main.tile[num8, k] == null)
				{
					Main.tile[num8, k] = default(Tile);
				}
				if (Main.tile[num8, k].active())
				{
					if (!Main.tileCut[(int)(*Main.tile[num8, k].type)] && *Main.tile[num8, k].type != 3 && *Main.tile[num8, k].type != 24 && *Main.tile[num8, k].type != 52 && *Main.tile[num8, k].type != 61 && *Main.tile[num8, k].type != 62 && *Main.tile[num8, k].type != 69 && *Main.tile[num8, k].type != 655 && *Main.tile[num8, k].type != 71 && *Main.tile[num8, k].type != 73 && *Main.tile[num8, k].type != 74 && *Main.tile[num8, k].type != 110 && *Main.tile[num8, k].type != 113 && *Main.tile[num8, k].type != 115 && *Main.tile[num8, k].type != 165)
					{
						return false;
					}
					WorldGen.KillTile(num8, k, false, false, false);
				}
			}
			if (Main.netMode != 1 && Wiring.running)
			{
				Wiring.SkipWire(num7, num6);
				Wiring.SkipWire(num7, num6 + 1);
				Wiring.SkipWire(num7, num6 + 2);
				Wiring.SkipWire(num7 + 1, num6);
				Wiring.SkipWire(num7 + 1, num6 + 1);
				Wiring.SkipWire(num7 + 1, num6 + 2);
			}
			int num9 = num4 % 36 * 54;
			SoundEngine.PlaySound(8, i * 16, j * 16, 1, 1f, 0f);
			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
			Main.tile[num7, num6].active(true);
			*Main.tile[num7, num6].type = openDoorID;
			*Main.tile[num7, num6].frameY = (short)num9;
			*Main.tile[num7, num6].frameX = num2;
			Main.tile[num7, num6].UseBlockColors(cache);
			if (Main.tile[num7 + 1, num6] == null)
			{
				Main.tile[num7 + 1, num6] = default(Tile);
			}
			Main.tile[num7 + 1, num6].active(true);
			*Main.tile[num7 + 1, num6].type = openDoorID;
			*Main.tile[num7 + 1, num6].frameY = (short)num9;
			*Main.tile[num7 + 1, num6].frameX = num2 + 18;
			Main.tile[num7 + 1, num6].UseBlockColors(cache);
			if (Main.tile[num7, num6 + 1] == null)
			{
				Main.tile[num7, num6 + 1] = default(Tile);
			}
			Main.tile[num7, num6 + 1].active(true);
			*Main.tile[num7, num6 + 1].type = openDoorID;
			*Main.tile[num7, num6 + 1].frameY = (short)(num9 + 18);
			*Main.tile[num7, num6 + 1].frameX = num2;
			Main.tile[num7, num6 + 1].UseBlockColors(cache2);
			if (Main.tile[num7 + 1, num6 + 1] == null)
			{
				Main.tile[num7 + 1, num6 + 1] = default(Tile);
			}
			Main.tile[num7 + 1, num6 + 1].active(true);
			*Main.tile[num7 + 1, num6 + 1].type = openDoorID;
			*Main.tile[num7 + 1, num6 + 1].frameY = (short)(num9 + 18);
			*Main.tile[num7 + 1, num6 + 1].frameX = num2 + 18;
			Main.tile[num7 + 1, num6 + 1].UseBlockColors(cache2);
			if (Main.tile[num7, num6 + 2] == null)
			{
				Main.tile[num7, num6 + 2] = default(Tile);
			}
			Main.tile[num7, num6 + 2].active(true);
			*Main.tile[num7, num6 + 2].type = openDoorID;
			*Main.tile[num7, num6 + 2].frameY = (short)(num9 + 36);
			*Main.tile[num7, num6 + 2].frameX = num2;
			Main.tile[num7, num6 + 2].UseBlockColors(cache3);
			if (Main.tile[num7 + 1, num6 + 2] == null)
			{
				Main.tile[num7 + 1, num6 + 2] = default(Tile);
			}
			Main.tile[num7 + 1, num6 + 2].active(true);
			*Main.tile[num7 + 1, num6 + 2].type = openDoorID;
			*Main.tile[num7 + 1, num6 + 2].frameY = (short)(num9 + 36);
			*Main.tile[num7 + 1, num6 + 2].frameX = num2 + 18;
			Main.tile[num7 + 1, num6 + 2].UseBlockColors(cache3);
			for (int l = num7 - 1; l <= num7 + 2; l++)
			{
				for (int m = num6 - 1; m <= num6 + 2; m++)
				{
					WorldGen.TileFrame(l, m, false, false);
				}
			}
			return true;
		}

		// Token: 0x0600120B RID: 4619 RVA: 0x0043E59C File Offset: 0x0043C79C
		public unsafe static void Check1xX(int x, int j, short type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int frameX = (int)(*Main.tile[x, j].frameX);
			int num = 3;
			if (type == 92)
			{
				num = 6;
			}
			int num2 = (int)(*Main.tile[x, j].frameY);
			int num3 = 0;
			while (num2 >= 18 * num)
			{
				num2 -= 18 * num;
				num3++;
			}
			int num4 = (int)(*Main.tile[x, j].frameX / 18);
			int num5 = j - num2 / 18;
			bool flag = false;
			for (int i = 0; i < num; i++)
			{
				if (Main.tile[x, num5 + i] == null)
				{
					Main.tile[x, num5 + i] = default(Tile);
				}
				if (!Main.tile[x, num5 + i].active())
				{
					flag = true;
				}
				else if (*Main.tile[x, num5 + i].type != (ushort)type)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[x, num5 + i].frameY) != i * 18 + num3 * num * 18)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[x, num5 + i].frameX) != frameX)
				{
					flag = true;
				}
			}
			if (Main.tile[x, num5 + num] == null)
			{
				Main.tile[x, num5 + num] = default(Tile);
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num5 + num))
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, j, (int)type, true);
			for (int k = 0; k < num; k++)
			{
				if (*Main.tile[x, num5 + k].type == (ushort)type)
				{
					WorldGen.KillTile(x, num5 + k, false, false, false);
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 92)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 32, 32, 341, 1, false, 0, false, false);
				}
				if (type == 453)
				{
					int num6 = (num4 < 2) ? 3744 : ((num4 >= 4) ? 3743 : 3745);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 16, 32, num6, 1, false, 0, false, false);
				}
				if (type == 93)
				{
					int type2 = 0;
					if (num3 != 0)
					{
						if (num3 - 1 > 9)
						{
							if (num3 >= 11 && num3 <= 16)
							{
								type2 = 2129 + num3 - 11;
							}
							else
							{
								switch (num3)
								{
								case 17:
									type2 = 2225;
									break;
								case 18:
									type2 = 2533;
									break;
								case 19:
									type2 = 2547;
									break;
								case 20:
									type2 = 2563;
									break;
								case 21:
									type2 = 2578;
									break;
								case 22:
									type2 = 2643;
									break;
								case 23:
									type2 = 2644;
									break;
								case 24:
									type2 = 2645;
									break;
								case 25:
									type2 = 2646;
									break;
								case 26:
									type2 = 2647;
									break;
								case 27:
									type2 = 2819;
									break;
								case 28:
									type2 = 3135;
									break;
								case 29:
									type2 = 3137;
									break;
								case 30:
									type2 = 3136;
									break;
								case 31:
									type2 = 3892;
									break;
								case 32:
									type2 = 3942;
									break;
								case 33:
									type2 = 3969;
									break;
								case 34:
									type2 = 4156;
									break;
								case 35:
									type2 = 4177;
									break;
								case 36:
									type2 = 4198;
									break;
								case 37:
									type2 = 4219;
									break;
								case 38:
									type2 = 4308;
									break;
								case 39:
									type2 = 4577;
									break;
								case 40:
									type2 = 5159;
									break;
								case 41:
									type2 = 5180;
									break;
								case 42:
									type2 = 5201;
									break;
								}
							}
						}
						else
						{
							type2 = 2082 + num3 - 1;
						}
					}
					else
					{
						type2 = 342;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, j), x * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600120C RID: 4620 RVA: 0x0043EA24 File Offset: 0x0043CC24
		public unsafe static void Check2xX(int i, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = i;
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameX); num2 >= 36; num2 -= 36)
			{
			}
			if (num2 == 18)
			{
				num--;
			}
			if (Main.tile[num, j] == null)
			{
				Main.tile[num, j] = default(Tile);
			}
			int num3 = (int)(*Main.tile[num, j].frameY / 18);
			int num4 = 3;
			if (type == 104)
			{
				num4 = 5;
			}
			if (type == 207)
			{
				num4 = 4;
			}
			int num5 = 0;
			while (num3 >= num4)
			{
				num3 -= num4;
				num5 += num4 * 18;
			}
			int num6 = j - num3;
			if (type == 410 && num5 != 0)
			{
				num5 += 2;
			}
			if (Main.tile[num, num6] == null)
			{
				Main.tile[num, num6] = default(Tile);
			}
			int frameX = (int)(*Main.tile[num, j].frameX);
			int frameY = (int)(*Main.tile[num, j].frameY);
			bool flag = false;
			for (int k = 0; k < num4; k++)
			{
				if (Main.tile[num, num6 + k] == null)
				{
					Main.tile[num, num6 + k] = default(Tile);
				}
				if (!Main.tile[num, num6 + k].active())
				{
					flag = true;
				}
				else if (*Main.tile[num, num6 + k].type != type)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[num, num6 + k].frameY) != k * 18 + num5)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[num, num6 + k].frameX) != frameX)
				{
					flag = true;
				}
				if (Main.tile[num + 1, num6 + k] == null)
				{
					Main.tile[num + 1, num6 + k] = default(Tile);
				}
				if (!Main.tile[num + 1, num6 + k].active())
				{
					flag = true;
				}
				else if (*Main.tile[num + 1, num6 + k].type != type)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[num + 1, num6 + k].frameY) != k * 18 + num5)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[num + 1, num6 + k].frameX) != frameX + 18)
				{
					flag = true;
				}
			}
			if (type == 465 || type == 531 || type == 591 || type == 592)
			{
				bool flag2 = false;
				for (int l = 0; l < 2; l++)
				{
					bool flag3 = false;
					Tile tileSafely = Framing.GetTileSafely(num + l, num6 - 1);
					if (type != 531 && *tileSafely.type == 380)
					{
						flag3 = true;
					}
					else if (type != 531 && TileID.Sets.Platforms[(int)(*tileSafely.type)])
					{
						if (l == 0)
						{
							flag2 = WorldGen.IsBelowANonHammeredPlatform(num + l, num6);
							flag3 = true;
						}
						else if (flag2 == WorldGen.IsBelowANonHammeredPlatform(num + l, num6))
						{
							flag3 = true;
						}
					}
					else
					{
						flag3 = WorldGen.SolidTileAllowTopSlope(num + l, num6 - 1);
					}
					if (!flag3)
					{
						flag = true;
						break;
					}
				}
			}
			else
			{
				if (!WorldGen.SolidTileAllowBottomSlope(num, num6 + num4))
				{
					flag = true;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(num + 1, num6 + num4))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, (int)type, true);
			for (int m = 0; m < num4; m++)
			{
				if (*Main.tile[num, num6 + m].type == type)
				{
					WorldGen.KillTile(num, num6 + m, false, false, false);
				}
				if (*Main.tile[num + 1, num6 + m].type == type)
				{
					WorldGen.KillTile(num + 1, num6 + m, false, false, false);
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 104)
				{
					int num7 = frameX / 36;
					int num8;
					if (num7 >= 1 && num7 <= 5)
					{
						num8 = 2237 + num7 - 1;
					}
					else
					{
						switch (num7)
						{
						case 6:
							num8 = 2560;
							break;
						case 7:
							num8 = 2575;
							break;
						case 8:
						case 9:
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
							num8 = 2591 + num7 - 8;
							break;
						default:
							switch (num7)
							{
							case 24:
								num8 = 2809;
								break;
							case 25:
								num8 = 3126;
								break;
							case 26:
								num8 = 3128;
								break;
							case 27:
								num8 = 3127;
								break;
							case 28:
								num8 = 3898;
								break;
							case 29:
								num8 = 3899;
								break;
							case 30:
								num8 = 3900;
								break;
							case 31:
								num8 = 3901;
								break;
							case 32:
								num8 = 3902;
								break;
							case 33:
								num8 = 3940;
								break;
							case 34:
								num8 = 3966;
								break;
							case 35:
								num8 = 4154;
								break;
							case 36:
								num8 = 4175;
								break;
							case 37:
								num8 = 4196;
								break;
							case 38:
								num8 = 4217;
								break;
							case 39:
								num8 = 4306;
								break;
							case 40:
								num8 = 4575;
								break;
							case 41:
								num8 = 5157;
								break;
							case 42:
								num8 = 5178;
								break;
							case 43:
								num8 = 5199;
								break;
							default:
								num8 = 359;
								break;
							}
							break;
						}
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num8, 1, false, 0, false, false);
				}
				if (type == 105)
				{
					int num9 = frameX / 36;
					int num10 = frameY / 54;
					num10 %= 3;
					num9 += num10 * 55;
					if (num9 != 0)
					{
						if (num9 != 1)
						{
							switch (num9)
							{
							case 43:
								num9 = 1152;
								break;
							case 44:
								num9 = 1153;
								break;
							case 45:
								num9 = 1154;
								break;
							case 46:
								num9 = 1408;
								break;
							case 47:
								num9 = 1409;
								break;
							case 48:
								num9 = 1410;
								break;
							case 49:
								num9 = 1462;
								break;
							case 50:
								num9 = 2672;
								break;
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
							case 58:
							case 59:
							case 60:
							case 61:
							case 62:
								num9 = 3651 + num9 - 51;
								break;
							default:
								if (num9 >= 63 && num9 <= 75)
								{
									num9 = 3708 + num9 - 63;
								}
								else
								{
									switch (num9)
									{
									case 76:
										num9 = 4397;
										break;
									case 77:
										num9 = 4360;
										break;
									case 78:
										num9 = 4342;
										break;
									case 79:
										num9 = 4466;
										break;
									case 80:
										num9 = 5317;
										break;
									case 81:
										num9 = 5318;
										break;
									case 82:
										num9 = 5319;
										break;
									default:
										num9 = 438 + num9 - 2;
										break;
									}
								}
								break;
							}
						}
						else
						{
							num9 = 52;
						}
					}
					else
					{
						num9 = 360;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num9, 1, false, 0, false, false);
				}
				if (type == 356)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3064, 1, false, 0, false, false);
				}
				if (type == 663)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5381, 1, false, 0, false, false);
				}
				if (type == 456)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3748, 1, false, 0, false, false);
				}
				if (type == 337)
				{
					int num11 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 2702 + num11, 1, false, 0, false, false);
				}
				if (type == 207)
				{
					int num12 = frameX / 36;
					switch (num12)
					{
					case 0:
						num12 = 909;
						break;
					case 1:
						num12 = 910;
						break;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
						num12 = 938 + num12;
						break;
					default:
						if (num12 != 8)
						{
							if (num12 == 9)
							{
								num12 = 4417;
							}
						}
						else
						{
							num12 = 4922;
						}
						break;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num12, 1, false, 0, false, false);
				}
				if (type == 410)
				{
					int num13 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num13 + 3536, 1, false, 0, false, false);
				}
				if (type == 480)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4054, 1, false, 0, false, false);
				}
				if (type == 509)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4318, 1, false, 0, false, false);
				}
				if (type == 657)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5345, 1, false, 0, false, false);
				}
				if (type == 658)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 5347, 1, false, 0, false, false);
				}
				if (type == 489)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4074, 1, false, 0, false, false);
				}
				if (type == 320)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 2496, 1, false, 0, false, false);
				}
				if (type == 349)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 470, 1, false, 0, false, false);
				}
				if (type == 506)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4276, 1, false, 0, false, false);
				}
				if (type == 545)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4420, 1, false, 0, false, false);
				}
				if (type == 465)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 3815, 1, false, 0, false, false);
				}
				if (type == 531)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4355, 1, false, 0, false, false);
				}
				if (type == 378)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 48, 3202, 1, false, 0, false, false);
					TETrainingDummy.Kill(num, num6);
				}
				if (type == 560)
				{
					int num14 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num14 + 4599, 1, false, 0, false, false);
				}
				if (type == 591)
				{
					int num15 = frameX / 36;
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, num15 + 4858, 1, false, 0, false, false);
				}
				if (type == 592)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, j), num * 16, j * 16, 32, 32, 4867, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600120D RID: 4621 RVA: 0x0043F664 File Offset: 0x0043D864
		public unsafe static bool IsBelowANonHammeredPlatform(int x, int y)
		{
			if (y < 1)
			{
				return false;
			}
			Tile tile = Main.tile[x, y - 1];
			return !(tile == null) && tile.active() && TileID.Sets.Platforms[(int)(*tile.type)] && !tile.halfBrick() && tile.slope() == 0;
		}

		// Token: 0x0600120E RID: 4622 RVA: 0x0043F6C0 File Offset: 0x0043D8C0
		public unsafe static void PlaceTight(int x, int y, bool spiders = false)
		{
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (!Main.tile[x, y].shimmer())
			{
				WorldGen.PlaceUncheckedStalactite(x, y, WorldGen.genRand.Next(2) == 0, WorldGen.genRand.Next(3), spiders);
				if (*Main.tile[x, y].type == 165)
				{
					WorldGen.CheckTight(x, y);
				}
			}
		}

		// Token: 0x0600120F RID: 4623 RVA: 0x0043F7AC File Offset: 0x0043D9AC
		public unsafe static void PlaceUncheckedStalactite(int x, int y, bool preferSmall, int variation, bool spiders)
		{
			ushort type = 165;
			variation = Utils.Clamp<int>(variation, 0, 2);
			if (WorldGen.SolidTile(x, y - 1, false) && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
			{
				if (spiders)
				{
					int num = 108 + variation * 18;
					*Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameX = (short)num;
					*Main.tile[x, y].frameY = 0;
					*Main.tile[x, y + 1].type = type;
					Main.tile[x, y + 1].active(true);
					*Main.tile[x, y + 1].frameX = (short)num;
					*Main.tile[x, y + 1].frameY = 18;
					return;
				}
				if (*Main.tile[x, y - 1].type == 147 || *Main.tile[x, y - 1].type == 161 || *Main.tile[x, y - 1].type == 163 || *Main.tile[x, y - 1].type == 164 || *Main.tile[x, y - 1].type == 200)
				{
					if (preferSmall)
					{
						int num2 = variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num2;
						*Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num3 = variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num3;
						*Main.tile[x, y].frameY = 0;
						*Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						*Main.tile[x, y + 1].frameX = (short)num3;
						*Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (*Main.tile[x, y - 1].type == 1 || Main.tileMoss[(int)(*Main.tile[x, y - 1].type)] || *Main.tile[x, y - 1].type == 117 || *Main.tile[x, y - 1].type == 25 || *Main.tile[x, y - 1].type == 203)
				{
					if (preferSmall)
					{
						int num4 = 54 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num4;
						*Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num5 = 54 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num5;
						*Main.tile[x, y].frameY = 0;
						*Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						*Main.tile[x, y + 1].frameX = (short)num5;
						*Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (*Main.tile[x, y - 1].type == 225)
				{
					int num6 = 162 + variation * 18;
					*Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameX = (short)num6;
					*Main.tile[x, y].frameY = 72;
				}
				if (*Main.tile[x, y - 1].type == 396 || *Main.tile[x, y - 1].type == 397)
				{
					if (preferSmall)
					{
						int num7 = 378 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num7;
						*Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num8 = 378 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num8;
						*Main.tile[x, y].frameY = 0;
						*Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						*Main.tile[x, y + 1].frameX = (short)num8;
						*Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (*Main.tile[x, y - 1].type == 368)
				{
					if (preferSmall)
					{
						int num9 = 432 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num9;
						*Main.tile[x, y].frameY = 72;
					}
					else
					{
						int num10 = 432 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num10;
						*Main.tile[x, y].frameY = 0;
						*Main.tile[x, y + 1].type = type;
						Main.tile[x, y + 1].active(true);
						*Main.tile[x, y + 1].frameX = (short)num10;
						*Main.tile[x, y + 1].frameY = 18;
					}
				}
				if (*Main.tile[x, y - 1].type == 367)
				{
					if (preferSmall)
					{
						int num11 = 486 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num11;
						*Main.tile[x, y].frameY = 72;
						return;
					}
					int num12 = 486 + variation * 18;
					*Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameX = (short)num12;
					*Main.tile[x, y].frameY = 0;
					*Main.tile[x, y + 1].type = type;
					Main.tile[x, y + 1].active(true);
					*Main.tile[x, y + 1].frameX = (short)num12;
					*Main.tile[x, y + 1].frameY = 18;
					return;
				}
			}
			else
			{
				if (spiders || !WorldGen.SolidTile(x, y + 1, false) || Main.tile[x, y].active() || Main.tile[x, y - 1].active())
				{
					return;
				}
				if (*Main.tile[x, y + 1].type == 1 || Main.tileMoss[(int)(*Main.tile[x, y + 1].type)] || *Main.tile[x, y - 1].type == 117 || *Main.tile[x, y - 1].type == 25 || *Main.tile[x, y - 1].type == 203)
				{
					if (preferSmall)
					{
						int num13 = 54 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num13;
						*Main.tile[x, y].frameY = 90;
					}
					else
					{
						int num14 = 54 + variation * 18;
						*Main.tile[x, y - 1].type = type;
						Main.tile[x, y - 1].active(true);
						*Main.tile[x, y - 1].frameX = (short)num14;
						*Main.tile[x, y - 1].frameY = 36;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num14;
						*Main.tile[x, y].frameY = 54;
					}
				}
				if (*Main.tile[x, y + 1].type == 225)
				{
					int num15 = 162 + variation * 18;
					*Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameX = (short)num15;
					*Main.tile[x, y].frameY = 90;
				}
				if (*Main.tile[x, y + 1].type == 396 || *Main.tile[x, y + 1].type == 397)
				{
					if (preferSmall)
					{
						int num16 = 378 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num16;
						*Main.tile[x, y].frameY = 90;
					}
					else
					{
						int num17 = 378 + variation * 18;
						*Main.tile[x, y - 1].type = type;
						Main.tile[x, y - 1].active(true);
						*Main.tile[x, y - 1].frameX = (short)num17;
						*Main.tile[x, y - 1].frameY = 36;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num17;
						*Main.tile[x, y].frameY = 54;
					}
				}
				if (*Main.tile[x, y + 1].type == 368)
				{
					if (preferSmall)
					{
						int num18 = 432 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num18;
						*Main.tile[x, y].frameY = 90;
					}
					else
					{
						int num19 = 432 + variation * 18;
						*Main.tile[x, y - 1].type = type;
						Main.tile[x, y - 1].active(true);
						*Main.tile[x, y - 1].frameX = (short)num19;
						*Main.tile[x, y - 1].frameY = 36;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num19;
						*Main.tile[x, y].frameY = 54;
					}
				}
				if (*Main.tile[x, y + 1].type == 367)
				{
					if (preferSmall)
					{
						int num20 = 486 + variation * 18;
						*Main.tile[x, y].type = type;
						Main.tile[x, y].active(true);
						*Main.tile[x, y].frameX = (short)num20;
						*Main.tile[x, y].frameY = 90;
						return;
					}
					int num21 = 486 + variation * 18;
					*Main.tile[x, y - 1].type = type;
					Main.tile[x, y - 1].active(true);
					*Main.tile[x, y - 1].frameX = (short)num21;
					*Main.tile[x, y - 1].frameY = 36;
					*Main.tile[x, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameX = (short)num21;
					*Main.tile[x, y].frameY = 54;
				}
			}
		}

		// Token: 0x06001210 RID: 4624 RVA: 0x00440798 File Offset: 0x0043E998
		public unsafe static bool UpdateStalagtiteStyle(int x, int j)
		{
			if (Main.netMode == 1)
			{
				return true;
			}
			if (Main.tile[x, j] == null)
			{
				return true;
			}
			int style;
			bool fail;
			WorldGen.GetStalagtiteStyle(x, j, out style, out fail);
			if (fail)
			{
				return false;
			}
			bool fail2;
			int desiredStyle;
			int height;
			int y;
			WorldGen.GetDesiredStalagtiteStyle(x, j, out fail2, out desiredStyle, out height, out y);
			if (fail2)
			{
				return false;
			}
			if (style != desiredStyle)
			{
				int num = WorldGen.genRand.Next(3) * 18;
				switch (desiredStyle)
				{
				case 0:
					num += 54;
					break;
				case 1:
					num += 216;
					break;
				case 2:
					num += 270;
					break;
				case 3:
					num += 324;
					break;
				case 4:
					num += 378;
					break;
				case 5:
					num += 432;
					break;
				case 6:
					num += 486;
					break;
				case 7:
					num = num;
					break;
				case 8:
					num += 540;
					break;
				case 9:
					num += 594;
					break;
				case 10:
					num += 648;
					break;
				}
				for (int i = y; i < y + height; i++)
				{
					*Main.tile[x, i].frameX = (short)num;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, 1, 2, TileChangeType.None);
				}
			}
			return true;
		}

		// Token: 0x06001211 RID: 4625 RVA: 0x004408F4 File Offset: 0x0043EAF4
		private unsafe static void GetDesiredStalagtiteStyle(int x, int j, out bool fail, out int desiredStyle, out int height, out int y)
		{
			fail = false;
			desiredStyle = 0;
			height = 1;
			y = j;
			if (*Main.tile[x, y].frameY == 72)
			{
				desiredStyle = (int)(*Main.tile[x, y - 1].type);
			}
			else if (*Main.tile[x, y].frameY == 90)
			{
				desiredStyle = (int)(*Main.tile[x, y + 1].type);
			}
			else if (*Main.tile[x, y].frameY >= 36)
			{
				if (*Main.tile[x, y].frameY == 54)
				{
					y--;
				}
				height = 2;
				desiredStyle = (int)(*Main.tile[x, y + 2].type);
			}
			else
			{
				if (*Main.tile[x, y].frameY == 18)
				{
					y--;
				}
				height = 2;
				desiredStyle = (int)(*Main.tile[x, y - 1].type);
			}
			if (desiredStyle == 1 || Main.tileMoss[desiredStyle])
			{
				desiredStyle = 0;
				return;
			}
			if (desiredStyle == 200)
			{
				desiredStyle = 10;
				return;
			}
			if (desiredStyle == 164)
			{
				desiredStyle = 8;
				return;
			}
			if (desiredStyle == 163)
			{
				desiredStyle = 9;
				return;
			}
			if (desiredStyle == 117 || desiredStyle == 402 || desiredStyle == 403)
			{
				desiredStyle = 1;
				return;
			}
			if (desiredStyle == 25 || desiredStyle == 398 || desiredStyle == 400)
			{
				desiredStyle = 2;
				return;
			}
			if (desiredStyle == 203 || desiredStyle == 399 || desiredStyle == 401)
			{
				desiredStyle = 3;
				return;
			}
			if (desiredStyle == 396 || desiredStyle == 397)
			{
				desiredStyle = 4;
				return;
			}
			if (desiredStyle == 367)
			{
				desiredStyle = 6;
				return;
			}
			if (desiredStyle == 368)
			{
				desiredStyle = 5;
				return;
			}
			if (desiredStyle == 161 || desiredStyle == 147)
			{
				desiredStyle = 7;
				return;
			}
			fail = true;
		}

		// Token: 0x06001212 RID: 4626 RVA: 0x00440B04 File Offset: 0x0043ED04
		private unsafe static void GetStalagtiteStyle(int x, int y, out int style, out bool fail)
		{
			style = 0;
			fail = false;
			switch (*Main.tile[x, y].frameX / 54)
			{
			case 0:
				style = 7;
				return;
			case 1:
				style = 0;
				return;
			default:
				fail = true;
				return;
			case 4:
				style = 1;
				return;
			case 5:
				style = 2;
				return;
			case 6:
				style = 3;
				return;
			case 7:
				style = 4;
				return;
			case 8:
				style = 5;
				return;
			case 9:
				style = 6;
				return;
			case 10:
				style = 8;
				return;
			case 11:
				style = 9;
				return;
			case 12:
				style = 10;
				return;
			}
		}

		// Token: 0x06001213 RID: 4627 RVA: 0x00440B9C File Offset: 0x0043ED9C
		public unsafe static void CheckTight(int x, int j)
		{
			if (Main.tile[x, j] == null)
			{
				return;
			}
			int num = j;
			if (*Main.tile[x, num].frameY == 72)
			{
				if (Main.tile[x, num - 1] == null)
				{
					Main.tile[x, num - 1] = default(Tile);
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = default(Tile);
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = default(Tile);
				}
				bool flag = false;
				if (!WorldGen.SolidTile(x, num - 1, false))
				{
					flag = true;
				}
				if (!flag && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag = true;
				}
				if (flag)
				{
					WorldGen.destroyObject = true;
					if (*Main.tile[x, num].type == *Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					WorldGen.destroyObject = false;
				}
				return;
			}
			if (*Main.tile[x, num].frameY == 90)
			{
				if (Main.tile[x, num - 1] == null)
				{
					Main.tile[x, num - 1] = default(Tile);
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = default(Tile);
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = default(Tile);
				}
				bool flag2 = false;
				if (!WorldGen.SolidTile(x, num + 1, false))
				{
					flag2 = true;
				}
				if (!flag2 && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag2 = true;
				}
				if (flag2)
				{
					WorldGen.destroyObject = true;
					if (*Main.tile[x, num].type == *Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					WorldGen.destroyObject = false;
				}
				return;
			}
			if (*Main.tile[x, num].frameY >= 36)
			{
				if (*Main.tile[x, num].frameY == 54)
				{
					num--;
				}
				if (Main.tile[x, num] == null)
				{
					Main.tile[x, num] = default(Tile);
				}
				if (Main.tile[x, num + 1] == null)
				{
					Main.tile[x, num + 1] = default(Tile);
				}
				if (Main.tile[x, num + 2] == null)
				{
					Main.tile[x, num + 2] = default(Tile);
				}
				bool flag3 = false;
				if (!WorldGen.SolidTile(x, num + 2, false))
				{
					flag3 = true;
				}
				if (*Main.tile[x, num + 1].type != *Main.tile[x, num].type)
				{
					flag3 = true;
				}
				if (*Main.tile[x, num + 1].frameX != *Main.tile[x, num].frameX)
				{
					flag3 = true;
				}
				if (!flag3 && !WorldGen.UpdateStalagtiteStyle(x, num))
				{
					flag3 = true;
				}
				if (flag3)
				{
					WorldGen.destroyObject = true;
					if (*Main.tile[x, num].type == *Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num, false, false, false);
					}
					if (*Main.tile[x, num + 1].type == *Main.tile[x, j].type)
					{
						WorldGen.KillTile(x, num + 1, false, false, false);
					}
					WorldGen.destroyObject = false;
				}
				return;
			}
			if (*Main.tile[x, num].frameY == 18)
			{
				num--;
			}
			if (Main.tile[x, num - 1] == null)
			{
				Main.tile[x, num - 1] = default(Tile);
			}
			if (Main.tile[x, num] == null)
			{
				Main.tile[x, num] = default(Tile);
			}
			if (Main.tile[x, num + 1] == null)
			{
				Main.tile[x, num + 1] = default(Tile);
			}
			bool flag4 = false;
			if (!WorldGen.SolidTile(x, num - 1, false))
			{
				flag4 = true;
			}
			if (*Main.tile[x, num + 1].type != *Main.tile[x, num].type)
			{
				flag4 = true;
			}
			if (*Main.tile[x, num + 1].frameX != *Main.tile[x, num].frameX)
			{
				flag4 = true;
			}
			if (!flag4 && !WorldGen.UpdateStalagtiteStyle(x, num))
			{
				flag4 = true;
			}
			if (flag4)
			{
				WorldGen.destroyObject = true;
				if (*Main.tile[x, num].type == *Main.tile[x, j].type)
				{
					WorldGen.KillTile(x, num, false, false, false);
				}
				if (*Main.tile[x, num + 1].type == *Main.tile[x, j].type)
				{
					WorldGen.KillTile(x, num + 1, false, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001214 RID: 4628 RVA: 0x0044112C File Offset: 0x0043F32C
		public unsafe static void Place1xX(int x, int y, ushort type, int style = 0)
		{
			int num = style * 18;
			int num2 = 3;
			if (type == 92)
			{
				num2 = 6;
			}
			bool flag = true;
			for (int i = y - num2 + 1; i < y + 1; i++)
			{
				if (Main.tile[x, i] == null)
				{
					Main.tile[x, i] = default(Tile);
				}
				if (Main.tile[x, i].active())
				{
					flag = false;
				}
				if (type == 93 && *Main.tile[x, i].liquid > 0)
				{
					flag = false;
				}
			}
			if (flag && WorldGen.SolidTile2(x, y + 1))
			{
				for (int j = 0; j < num2; j++)
				{
					Main.tile[x, y - num2 + 1 + j].active(true);
					*Main.tile[x, y - num2 + 1 + j].frameY = (short)(j * 18 + num2 * num);
					*Main.tile[x, y - num2 + 1 + j].frameX = 0;
					*Main.tile[x, y - num2 + 1 + j].type = type;
				}
			}
		}

		// Token: 0x06001215 RID: 4629 RVA: 0x00441268 File Offset: 0x0043F468
		public unsafe static int checkXmasTreeDrop(int x, int y, int obj)
		{
			int num = x;
			int num2 = y;
			if (*Main.tile[x, y].frameX < 10)
			{
				num -= (int)(*Main.tile[x, y].frameX);
				num2 -= (int)(*Main.tile[x, y].frameY);
			}
			int num3 = 0;
			if ((*Main.tile[num, num2].frameY & 1) == 1)
			{
				num3++;
			}
			if ((*Main.tile[num, num2].frameY & 2) == 2)
			{
				num3 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 4) == 4)
			{
				num3 += 4;
			}
			int num4 = 0;
			if ((*Main.tile[num, num2].frameY & 8) == 8)
			{
				num4++;
			}
			if ((*Main.tile[num, num2].frameY & 16) == 16)
			{
				num4 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 32) == 32)
			{
				num4 += 4;
			}
			int num5 = 0;
			if ((*Main.tile[num, num2].frameY & 64) == 64)
			{
				num5++;
			}
			if ((*Main.tile[num, num2].frameY & 128) == 128)
			{
				num5 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 256) == 256)
			{
				num5 += 4;
			}
			if ((*Main.tile[num, num2].frameY & 512) == 512)
			{
				num5 += 8;
			}
			int num6 = 0;
			if ((*Main.tile[num, num2].frameY & 1024) == 1024)
			{
				num6++;
			}
			if ((*Main.tile[num, num2].frameY & 2048) == 2048)
			{
				num6 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 4096) == 4096)
			{
				num6 += 4;
			}
			if ((*Main.tile[num, num2].frameY & 8192) == 8192)
			{
				num6 += 8;
			}
			if (obj == 0 && num3 > 0)
			{
				return num3;
			}
			if (obj == 1 && num4 > 0)
			{
				return num4;
			}
			if (obj == 2 && num5 > 0)
			{
				return num5;
			}
			if (obj == 3 && num6 > 0)
			{
				return num6;
			}
			return -1;
		}

		// Token: 0x06001216 RID: 4630 RVA: 0x004414FC File Offset: 0x0043F6FC
		public unsafe static void dropXmasTree(int x, int y, int obj)
		{
			int num = x;
			int num2 = y;
			if (*Main.tile[x, y].frameX < 10)
			{
				num -= (int)(*Main.tile[x, y].frameX);
				num2 -= (int)(*Main.tile[x, y].frameY);
			}
			int num3 = 0;
			if ((*Main.tile[num, num2].frameY & 1) == 1)
			{
				num3++;
			}
			if ((*Main.tile[num, num2].frameY & 2) == 2)
			{
				num3 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 4) == 4)
			{
				num3 += 4;
			}
			int num4 = 0;
			if ((*Main.tile[num, num2].frameY & 8) == 8)
			{
				num4++;
			}
			if ((*Main.tile[num, num2].frameY & 16) == 16)
			{
				num4 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 32) == 32)
			{
				num4 += 4;
			}
			int num5 = 0;
			if ((*Main.tile[num, num2].frameY & 64) == 64)
			{
				num5++;
			}
			if ((*Main.tile[num, num2].frameY & 128) == 128)
			{
				num5 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 256) == 256)
			{
				num5 += 4;
			}
			if ((*Main.tile[num, num2].frameY & 512) == 512)
			{
				num5 += 8;
			}
			int num6 = 0;
			if ((*Main.tile[num, num2].frameY & 1024) == 1024)
			{
				num6++;
			}
			if ((*Main.tile[num, num2].frameY & 2048) == 2048)
			{
				num6 += 2;
			}
			if ((*Main.tile[num, num2].frameY & 4096) == 4096)
			{
				num6 += 4;
			}
			if ((*Main.tile[num, num2].frameY & 8192) == 8192)
			{
				num6 += 8;
			}
			if (obj == 0 && num3 > 0)
			{
				int number = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1874 + num3 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 1 && num4 > 0)
			{
				int number2 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1878 + num4 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 2 && num5 > 0)
			{
				int number3 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1884 + num5 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (obj == 3 && num6 > 0)
			{
				int number4 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, 1895 + num6 - 1, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06001217 RID: 4631 RVA: 0x004418C8 File Offset: 0x0043FAC8
		public unsafe static void setXmasTree(int x, int y, int obj, int style)
		{
			int num = x;
			int num2 = y;
			if (*Main.tile[x, y].frameX < 10)
			{
				num -= (int)(*Main.tile[x, y].frameX);
				num2 -= (int)(*Main.tile[x, y].frameY);
			}
			if (obj == 0)
			{
				if ((style & 1) == 1)
				{
					ref short frameY = ref Main.tile[num, num2].frameY;
					frameY |= 1;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -2);
				}
				if ((style & 2) == 2)
				{
					ref short frameY2 = ref Main.tile[num, num2].frameY;
					frameY2 |= 2;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -3);
				}
				if ((style & 4) == 4)
				{
					ref short frameY3 = ref Main.tile[num, num2].frameY;
					frameY3 |= 4;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -5);
				}
			}
			if (obj == 1)
			{
				if ((style & 1) == 1)
				{
					ref short frameY4 = ref Main.tile[num, num2].frameY;
					frameY4 |= 8;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -9);
				}
				if ((style & 2) == 2)
				{
					ref short frameY5 = ref Main.tile[num, num2].frameY;
					frameY5 |= 16;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -17);
				}
				if ((style & 4) == 4)
				{
					ref short frameY6 = ref Main.tile[num, num2].frameY;
					frameY6 |= 32;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -33);
				}
			}
			if (obj == 2)
			{
				if ((style & 1) == 1)
				{
					ref short frameY7 = ref Main.tile[num, num2].frameY;
					frameY7 |= 64;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -65);
				}
				if ((style & 2) == 2)
				{
					ref short frameY8 = ref Main.tile[num, num2].frameY;
					frameY8 |= 128;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -129);
				}
				if ((style & 4) == 4)
				{
					ref short frameY9 = ref Main.tile[num, num2].frameY;
					frameY9 |= 256;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -257);
				}
				if ((style & 8) == 8)
				{
					ref short frameY10 = ref Main.tile[num, num2].frameY;
					frameY10 |= 512;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -513);
				}
			}
			if (obj == 3)
			{
				if ((style & 1) == 1)
				{
					ref short frameY11 = ref Main.tile[num, num2].frameY;
					frameY11 |= 1024;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -1025);
				}
				if ((style & 2) == 2)
				{
					ref short frameY12 = ref Main.tile[num, num2].frameY;
					frameY12 |= 2048;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -2049);
				}
				if ((style & 4) == 4)
				{
					ref short frameY13 = ref Main.tile[num, num2].frameY;
					frameY13 |= 4096;
				}
				else
				{
					*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -4097);
				}
				if ((style & 8) == 8)
				{
					ref short frameY14 = ref Main.tile[num, num2].frameY;
					frameY14 |= 8192;
					return;
				}
				*Main.tile[num, num2].frameY = (*Main.tile[num, num2].frameY & -8193);
			}
		}

		// Token: 0x06001218 RID: 4632 RVA: 0x00441DD0 File Offset: 0x0043FFD0
		public unsafe static int PlaceXmasTree_Direct(int x, int y, int type, int style, int dir, int alternate)
		{
			for (short num = 0; num < 4; num += 1)
			{
				for (short num2 = 0; num2 < 8; num2 += 1)
				{
					Tile tile = Main.tile[x + (int)num, y + (int)num2];
					tile.active(true);
					*tile.type = (ushort)type;
					if (num == 0 && num2 == 0)
					{
						*tile.frameX = 10;
						*tile.frameY = 0;
					}
					else
					{
						*tile.frameX = num;
						*tile.frameY = num2;
					}
				}
			}
			return 0;
		}

		// Token: 0x06001219 RID: 4633 RVA: 0x00441E48 File Offset: 0x00440048
		public unsafe static void PlaceXmasTree(int x, int y, ushort type = 171)
		{
			bool flag = true;
			int num = x - 1;
			int num2 = y - 7;
			for (int i = num; i < num + 4; i++)
			{
				for (int j = num2; j < num2 + 8; j++)
				{
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (i > num && i < num + 3 && !WorldGen.SolidTile(i, num2 + 8, false))
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			int num3 = 0;
			for (int k = num; k < num + 4; k++)
			{
				int num4 = 0;
				for (int l = num2; l < num2 + 8; l++)
				{
					Main.tile[k, l].active(true);
					if (num3 == 0 && num4 == 0)
					{
						*Main.tile[k, l].frameX = 10;
						*Main.tile[k, l].frameY = 0;
					}
					else
					{
						*Main.tile[k, l].frameX = (short)num3;
						*Main.tile[k, l].frameY = (short)num4;
					}
					*Main.tile[k, l].type = type;
					Main.tile[k, l].active(true);
					num4++;
				}
				num3++;
			}
		}

		// Token: 0x0600121A RID: 4634 RVA: 0x00441FB8 File Offset: 0x004401B8
		public unsafe static void CheckXmasTree(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = x;
			int num2 = y;
			if (*Main.tile[x, y].frameX < 10)
			{
				num -= (int)(*Main.tile[x, y].frameX);
				num2 -= (int)(*Main.tile[x, y].frameY);
			}
			bool flag = false;
			int num3 = 0;
			for (int i = num; i < num + 4; i++)
			{
				int num4 = 0;
				for (int j = num2; j < num2 + 8; j++)
				{
					if (Main.tile[i, j].active() && *Main.tile[i, j].type == 171)
					{
						if (num3 != 0 && num4 != 0 && (int)(*Main.tile[i, j].frameX) != num3 && (int)(*Main.tile[i, j].frameY) != num4)
						{
							flag = true;
						}
					}
					else
					{
						flag = true;
					}
					num4++;
				}
				num3++;
				if (i > num && i < num + 3 && !WorldGen.SolidTile2(i, num2 + 8))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, 171, true);
			for (int k = num; k < num + 4; k++)
			{
				for (int l = num2; l < num2 + 8; l++)
				{
					if (*Main.tile[k, l].type == 171)
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600121B RID: 4635 RVA: 0x004421AC File Offset: 0x004403AC
		public unsafe static void Place2xX(int x, int y, ushort type, int style = 0)
		{
			int num = style * 36;
			int num2 = 0;
			int num3 = 3;
			if (type == 105 && style == 34)
			{
				type = 349;
				style = 0;
				num = 0;
			}
			if (type == 105)
			{
				int num4 = style / 55;
				num -= 1980 * num4;
				num2 += 54 * num4;
			}
			if (type == 104)
			{
				num3 = 5;
			}
			if (type == 207)
			{
				num3 = 4;
			}
			bool flag = true;
			for (int i = y - num3 + 1; i < y + 1; i++)
			{
				if (Main.tile[x, i] == null)
				{
					Main.tile[x, i] = default(Tile);
				}
				if (Main.tile[x, i].active())
				{
					flag = false;
				}
				if (Main.tile[x + 1, i] == null)
				{
					Main.tile[x + 1, i] = default(Tile);
				}
				if (Main.tile[x + 1, i].active())
				{
					flag = false;
				}
			}
			if (flag && WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1))
			{
				for (int j = 0; j < num3; j++)
				{
					Main.tile[x, y - num3 + 1 + j].active(true);
					*Main.tile[x, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
					*Main.tile[x, y - num3 + 1 + j].frameX = (short)num;
					*Main.tile[x, y - num3 + 1 + j].type = type;
					Main.tile[x + 1, y - num3 + 1 + j].active(true);
					*Main.tile[x + 1, y - num3 + 1 + j].frameY = (short)(num2 + j * 18);
					*Main.tile[x + 1, y - num3 + 1 + j].frameX = (short)(num + 18);
					*Main.tile[x + 1, y - num3 + 1 + j].type = type;
				}
			}
		}

		// Token: 0x0600121C RID: 4636 RVA: 0x004423FC File Offset: 0x004405FC
		public static int GetItemDrop_Benches(int style)
		{
			switch (style)
			{
			case 1:
				return 2397;
			case 2:
				return 2398;
			case 3:
				return 2399;
			case 4:
				return 2400;
			case 5:
				return 2401;
			case 6:
				return 2402;
			case 7:
				return 2403;
			case 8:
				return 2404;
			case 9:
				return 2405;
			case 10:
				return 2406;
			case 11:
				return 2407;
			case 12:
				return 2408;
			case 13:
				return 2409;
			case 14:
				return 2410;
			case 15:
				return 2411;
			case 16:
				return 2412;
			case 17:
				return 2413;
			case 18:
				return 2414;
			case 19:
				return 2415;
			case 20:
				return 2416;
			case 21:
				return 2521;
			case 22:
				return 2527;
			case 23:
				return 2539;
			case 24:
				return 858;
			case 25:
				return 2582;
			case 26:
				return 2634;
			case 27:
				return 2635;
			case 28:
				return 2636;
			case 29:
				return 2823;
			case 30:
				return 3150;
			case 31:
				return 3152;
			case 32:
				return 3151;
			case 33:
				return 3918;
			case 34:
				return 3919;
			case 35:
				return 3947;
			case 36:
				return 3973;
			case 37:
				return 4161;
			case 38:
				return 4182;
			case 39:
				return 4203;
			case 40:
				return 4224;
			case 41:
				return 4313;
			case 42:
				return 4582;
			case 43:
				return 4993;
			case 44:
				return 5164;
			case 45:
				return 5185;
			case 46:
				return 5206;
			default:
				return 335;
			}
		}

		// Token: 0x0600121D RID: 4637 RVA: 0x004425E2 File Offset: 0x004407E2
		public static int GetItemDrop_PicnicTables(int style)
		{
			if (style == 0 || style != 1)
			{
				return 4064;
			}
			return 4065;
		}

		// Token: 0x0600121E RID: 4638 RVA: 0x004425F8 File Offset: 0x004407F8
		public static int GetItemDrop_Chair(int style)
		{
			switch (style)
			{
			case 1:
				return 358;
			case 2:
				return 628;
			case 3:
				return 629;
			case 4:
				return 630;
			case 5:
				return 806;
			case 6:
				return 807;
			case 7:
				return 808;
			case 8:
				return 809;
			case 9:
				return 810;
			case 10:
				return 826;
			case 11:
				return 915;
			case 12:
				return 1143;
			case 13:
				return 1396;
			case 14:
				return 1399;
			case 15:
				return 1402;
			case 16:
				return 1459;
			case 17:
				return 1509;
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
				return 1703 + style - 18;
			case 24:
				return 1792;
			case 25:
				return 1814;
			case 26:
				return 1925;
			case 27:
				return 2228;
			case 28:
				return 2288;
			case 29:
				return 2524;
			case 30:
				return 2557;
			case 31:
				return 2572;
			case 32:
				return 2812;
			case 33:
				return 3174;
			case 34:
				return 3176;
			case 35:
				return 3175;
			case 36:
				return 3889;
			case 37:
				return 3937;
			case 38:
				return 3963;
			case 39:
				return 4151;
			case 40:
				return 4172;
			case 41:
				return 4193;
			case 42:
				return 4214;
			case 43:
				return 4304;
			case 44:
				return 4572;
			case 45:
				return 5154;
			case 46:
				return 5175;
			case 47:
				return 5196;
			default:
				return 34;
			}
		}

		// Token: 0x0600121F RID: 4639 RVA: 0x004427CC File Offset: 0x004409CC
		public static int GetItemDrop_Toilet(int style)
		{
			int num = 4096 + style;
			switch (style)
			{
			case 32:
				num = 4141;
				break;
			case 33:
				num = 4165;
				break;
			case 34:
				num = 4186;
				break;
			case 35:
				num = 4207;
				break;
			case 36:
				num = 4228;
				break;
			case 37:
				num = 4316;
				break;
			case 38:
				num = 4586;
				break;
			case 39:
				num = 4731;
				break;
			case 40:
				num = 5168;
				break;
			case 41:
				num = 5189;
				break;
			case 42:
				num = 5210;
				break;
			}
			if (num > 5210)
			{
				num = 5210;
			}
			return num;
		}

		// Token: 0x06001220 RID: 4640 RVA: 0x00442880 File Offset: 0x00440A80
		public unsafe static void Check1x2(int x, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = j;
			bool flag = true;
			if (Main.tile[x, num] == null)
			{
				Main.tile[x, num] = default(Tile);
			}
			if (Main.tile[x, num + 1] == null)
			{
				Main.tile[x, num + 1] = default(Tile);
			}
			int num2 = (int)(*Main.tile[x, num].frameY);
			int num3 = 0;
			while (num2 >= 40)
			{
				num2 -= 40;
				num3++;
			}
			if (num2 == 18)
			{
				num--;
			}
			int num4 = (int)(*Main.tile[x, num].frameX / 18);
			if (*Main.tile[x, num].frameX == -1)
			{
				num4 = (int)(*Main.tile[x, num + 1].frameX / 18);
			}
			if (Main.tile[x, num] == null)
			{
				Main.tile[x, num] = default(Tile);
			}
			if ((int)(*Main.tile[x, num].frameY) == 40 * num3 && (int)(*Main.tile[x, num + 1].frameY) == 40 * num3 + 18 && *Main.tile[x, num].type == type && *Main.tile[x, num + 1].type == type)
			{
				flag = false;
			}
			if (Main.tile[x, num + 2] == null)
			{
				Main.tile[x, num + 2] = default(Tile);
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[(int)(*Main.tile[x, num + 2].type)])
			{
				flag = true;
			}
			if (TileID.Sets.TreeSapling[(int)(*Main.tile[x, num].type)])
			{
				int originalType = (int)(*Main.tile[x, num].type);
				int newType = 20;
				int num5 = (int)(*Main.tile[x, num].frameX / 54);
				int type2 = (int)(*Main.tile[x, num + 2].type);
				int num6 = -1;
				int num9 = type2;
				if (num9 > 116)
				{
					if (num9 <= 477)
					{
						if (num9 <= 199)
						{
							if (num9 == 147)
							{
								num6 = 1;
								goto IL_36A;
							}
							if (num9 != 199)
							{
								goto IL_35B;
							}
						}
						else
						{
							if (num9 == 234)
							{
								num6 = 8;
								goto IL_36A;
							}
							if (num9 != 477)
							{
								goto IL_35B;
							}
							goto IL_322;
						}
					}
					else if (num9 <= 633)
					{
						if (num9 == 492)
						{
							goto IL_33B;
						}
						if (num9 != 633)
						{
							goto IL_35B;
						}
						num6 = 10;
						goto IL_36A;
					}
					else
					{
						if (num9 == 661)
						{
							goto IL_331;
						}
						if (num9 != 662)
						{
							goto IL_35B;
						}
					}
					num6 = 4;
					goto IL_36A;
				}
				if (num9 <= 53)
				{
					if (num9 != 2)
					{
						if (num9 == 23)
						{
							goto IL_331;
						}
						if (num9 != 53)
						{
							goto IL_35B;
						}
						num6 = 6;
						goto IL_36A;
					}
				}
				else if (num9 <= 109)
				{
					if (num9 == 60)
					{
						num6 = 2;
						goto IL_36A;
					}
					if (num9 != 109)
					{
						goto IL_35B;
					}
					goto IL_33B;
				}
				else
				{
					if (num9 == 112)
					{
						num6 = 9;
						goto IL_36A;
					}
					if (num9 != 116)
					{
						goto IL_35B;
					}
					num6 = 7;
					goto IL_36A;
				}
				IL_322:
				num6 = 0;
				goto IL_36A;
				IL_331:
				num6 = 3;
				goto IL_36A;
				IL_33B:
				num6 = 5;
				goto IL_36A;
				IL_35B:
				if (!TileLoader.SaplingGrowthType(type2, ref newType, ref num6))
				{
					flag = true;
				}
				IL_36A:
				if (!flag && (originalType != newType || num5 != num6))
				{
					*Main.tile[x, num].type = (ushort)newType;
					*Main.tile[x, num + 1].type = (ushort)newType;
					int num7 = 54 * num6;
					num7 += WorldGen.genRand.Next(3) * 18;
					*Main.tile[x, num].frameX = (short)num7;
					*Main.tile[x, num + 1].frameX = (short)num7;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, j, (int)type, true);
			if (*Main.tile[x, num].type == type)
			{
				WorldGen.KillTile(x, num, false, false, false);
			}
			if (*Main.tile[x, num + 1].type == type)
			{
				WorldGen.KillTile(x, num + 1, false, false, false);
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 216)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 970 + num3, 1, false, 0, false, false);
				}
				if (type == 338)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 2738, 1, false, 0, false, false);
				}
				if (type == 390)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 16, 32, 3253, 1, false, 0, false, false);
				}
				if (type == 493)
				{
					int num8 = 0;
					switch (num4)
					{
					case 0:
						num8 = 4083;
						break;
					case 1:
						num8 = 4084;
						break;
					case 2:
						num8 = 4085;
						break;
					case 3:
						num8 = 4086;
						break;
					case 4:
						num8 = 4087;
						break;
					case 5:
						num8 = 4088;
						break;
					}
					if (num8 > 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, num8, 1, false, 0, false, false);
					}
				}
				if (type == 15)
				{
					int itemDrop_Chair = WorldGen.GetItemDrop_Chair(num3);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, itemDrop_Chair, 1, false, 0, false, false);
				}
				if (type != 134)
				{
					if (type == 497)
					{
						int itemDrop_Toilet = WorldGen.GetItemDrop_Toilet(num3);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, itemDrop_Toilet, 1, false, 0, false, false);
					}
				}
				else if (num3 == 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 1220, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num), x * 16, num * 16, 32, 32, 525, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001221 RID: 4641 RVA: 0x00442EE0 File Offset: 0x004410E0
		public unsafe static void CheckOnTable1x1(int x, int y, int type)
		{
			if (Main.tile[x, y + 1] == null)
			{
				return;
			}
			if (Main.tile[x, y + 1].topSlope())
			{
				if (!TileID.Sets.Platforms[(int)(*Main.tile[x, y + 1].type)])
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
				if ((Main.tile[x, y + 1].blockType() != 3 || !Main.tile[x - 1, y + 1].active() || Main.tile[x - 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[(int)(*Main.tile[x - 1, y + 1].type)]) && (Main.tile[x, y + 1].blockType() != 2 || !Main.tile[x + 1, y + 1].active() || Main.tile[x + 1, y + 1].blockType() != 0 || !TileID.Sets.Platforms[(int)(*Main.tile[x + 1, y + 1].type)]))
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
			}
			else
			{
				if (Main.tile[x, y + 1].active() && Main.tileTable[(int)(*Main.tile[x, y + 1].type)] && !Main.tile[x, y + 1].halfBrick())
				{
					return;
				}
				if (type == 78)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
					{
						WorldGen.KillTile(x, y, false, false, false);
						return;
					}
				}
				else
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
		}

		// Token: 0x06001222 RID: 4642 RVA: 0x004430B0 File Offset: 0x004412B0
		public unsafe static void CheckSign(int x, int y, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0 || num2 > Main.maxTilesX || num3 < 0 || num4 > Main.maxTilesY)
			{
				return;
			}
			bool flag = false;
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
				}
			}
			int num5 = (int)(*Main.tile[x, y].frameX / 18);
			int num6 = (int)(*Main.tile[x, y].frameY / 18);
			num5 %= 2;
			num6 %= 2;
			int num7 = x - num5;
			int num8 = y - num6;
			int num9 = (int)(*Main.tile[num7, num8].frameX / 18 / 2);
			int num10 = (int)(*Main.tile[num7, num8].frameY / 18 / 2);
			int num11 = (int)(*Main.tile[x, y].frameX / 18);
			int num12 = 0;
			while (num11 > 1)
			{
				num11 -= 2;
				num12++;
			}
			num = num7;
			num2 = num7 + 2;
			num3 = num8;
			num4 = num8 + 2;
			num5 = 0;
			for (int k = num; k < num2; k++)
			{
				num6 = 0;
				for (int l = num3; l < num4; l++)
				{
					if (!Main.tile[k, l].active() || *Main.tile[k, l].type != type)
					{
						flag = true;
						break;
					}
					if ((int)(*Main.tile[k, l].frameX / 18) != num5 + num9 * 2 || (int)(*Main.tile[k, l].frameY / 18) != num6 + num10 * 2)
					{
						flag = true;
						break;
					}
					num6++;
				}
				num5++;
			}
			if (!flag)
			{
				if (type == 85)
				{
					if (WorldGen.SolidTileAllowBottomSlope(num7, num8 + 2) && WorldGen.SolidTileAllowBottomSlope(num7 + 1, num8 + 2))
					{
						num9 = num12;
					}
					else
					{
						flag = true;
					}
				}
				else if (WorldGen.TopEdgeCanBeAttachedTo(num7, num8 + 2) && WorldGen.TopEdgeCanBeAttachedTo(num7 + 1, num8 + 2))
				{
					num9 = 0;
				}
				else if (WorldGen.BottomEdgeCanBeAttachedTo(num7, num8 - 1) && WorldGen.BottomEdgeCanBeAttachedTo(num7 + 1, num8 - 1))
				{
					num9 = 1;
				}
				else if (WorldGen.RightEdgeCanBeAttachedTo(num7 - 1, num8) && WorldGen.RightEdgeCanBeAttachedTo(num7 - 1, num8 + 1))
				{
					num9 = 2;
				}
				else if (WorldGen.LeftEdgeCanBeAttachedTo(num7 + 2, num8) && WorldGen.LeftEdgeCanBeAttachedTo(num7 + 2, num8 + 1))
				{
					num9 = 3;
				}
				else if (*Main.tile[num7, num8].wall > 0 && *Main.tile[num7 + 1, num8].wall > 0 && *Main.tile[num7, num8 + 1].wall > 0 && *Main.tile[num7 + 1, num8 + 1].wall > 0)
				{
					num9 = 4;
				}
				else
				{
					flag = true;
				}
			}
			if (flag)
			{
				if (type == 395)
				{
					int num13 = TEItemFrame.Find(num7, num8);
					if (num13 != -1 && ((TEItemFrame)TileEntity.ByID[num13]).item.stack > 0)
					{
						((TEItemFrame)TileEntity.ByID[num13]).DropItem();
						if (Main.netMode != 2)
						{
							Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
						}
					}
				}
				WorldGen.destroyObject = true;
				bool drop = TileLoader.Drop(x, y, (int)type, true);
				for (int m = num; m < num2; m++)
				{
					for (int n = num3; n < num4; n++)
					{
						if (*Main.tile[m, n].type == type)
						{
							WorldGen.KillTile(m, n, false, false, false);
						}
					}
				}
				if (type != 395)
				{
					Sign.KillSign(num7, num8);
				}
				using (new Item.DisableNewItemMethod(!drop))
				{
					if (type <= 425)
					{
						if (type != 85)
						{
							if (type == 395)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 3270, 1, false, 0, false, false);
								TEItemFrame.Kill(num7, num8);
								goto IL_64F;
							}
							if (type == 425)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 3617, 1, false, 0, false, false);
								goto IL_64F;
							}
						}
						else
						{
							int type2 = 321;
							if (num12 >= 6 && num12 <= 10)
							{
								type2 = 3229 + num12 - 6;
							}
							else if (num12 >= 1 && num12 <= 5)
							{
								type2 = 1173 + num12 - 1;
							}
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, type2, 1, false, 0, false, false);
							if (Main.netMode == 1 || WorldGen.genRand.Next(2) != 0 || NPC.CountNPCS(316) >= 2)
							{
								goto IL_64F;
							}
							int num14 = (int)Player.FindClosest(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16);
							if (Main.player[num14].ZoneGraveyard || !Main.dayTime || (double)y > Main.worldSurface)
							{
								NPC.SpawnOnPlayer(num14, 316);
								goto IL_64F;
							}
							goto IL_64F;
						}
					}
					else
					{
						if (type == 510)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4319, 1, false, 0, false, false);
							goto IL_64F;
						}
						if (type == 511)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4320, 1, false, 0, false, false);
							goto IL_64F;
						}
						if (type == 573)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num7, num8), num7 * 16, num8 * 16, 32, 32, 4710, 1, false, 0, false, false);
							goto IL_64F;
						}
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 171, 1, false, 0, false, false);
					IL_64F:
					WorldGen.destroyObject = false;
					return;
				}
			}
			int num15 = 36 * num9;
			for (int num16 = 0; num16 < 2; num16++)
			{
				for (int num17 = 0; num17 < 2; num17++)
				{
					Main.tile[num7 + num16, num8 + num17].active(true);
					*Main.tile[num7 + num16, num8 + num17].type = type;
					*Main.tile[num7 + num16, num8 + num17].frameX = (short)(num15 + 18 * num16);
					*Main.tile[num7 + num16, num8 + num17].frameY = (short)(18 * num17 + num10 * 36);
				}
			}
		}

		// Token: 0x06001223 RID: 4643 RVA: 0x004437FC File Offset: 0x004419FC
		public unsafe static bool PlaceSign(int x, int y, ushort type, int Style = 0)
		{
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0)
			{
				return false;
			}
			if (num2 > Main.maxTilesX)
			{
				return false;
			}
			if (num3 < 0)
			{
				return false;
			}
			if (num4 > Main.maxTilesY)
			{
				return false;
			}
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
				}
			}
			int num5 = x;
			int num6 = y;
			int num7 = 0;
			if (type == 55 || type == 425 || type == 510 || type == 511)
			{
				if (WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1))
				{
					num6--;
					num7 = 0;
				}
				else if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)(*Main.tile[x, y - 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, y - 1].type)] && Main.tile[x + 1, y - 1].nactive() && Main.tileSolid[(int)(*Main.tile[x + 1, y - 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x + 1, y - 1].type)])
				{
					num7 = 1;
				}
				else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[(int)(*Main.tile[x - 1, y].type)] && !Main.tileSolidTop[(int)(*Main.tile[x - 1, y].type)] && !Main.tileNoAttach[(int)(*Main.tile[x - 1, y].type)] && Main.tile[x - 1, y + 1].nactive() && Main.tileSolid[(int)(*Main.tile[x - 1, y + 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x - 1, y + 1].type)] && !Main.tileNoAttach[(int)(*Main.tile[x - 1, y + 1].type)])
				{
					num7 = 2;
				}
				else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[(int)(*Main.tile[x + 1, y].type)] && !Main.tileSolidTop[(int)(*Main.tile[x + 1, y].type)] && !Main.tileNoAttach[(int)(*Main.tile[x + 1, y].type)] && Main.tile[x + 1, y + 1].nactive() && Main.tileSolid[(int)(*Main.tile[x + 1, y + 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x + 1, y + 1].type)] && !Main.tileNoAttach[(int)(*Main.tile[x + 1, y + 1].type)])
				{
					num5--;
					num7 = 3;
				}
				else
				{
					if (*Main.tile[num5, num6].wall <= 0 || *Main.tile[num5 + 1, num6].wall <= 0 || *Main.tile[num5, num6 + 1].wall <= 0 || *Main.tile[num5 + 1, num6 + 1].wall <= 0)
					{
						return false;
					}
					num7 = 4;
				}
			}
			if (Main.tile[num5, num6].active() || Main.tile[num5 + 1, num6].active() || Main.tile[num5, num6 + 1].active() || Main.tile[num5 + 1, num6 + 1].active())
			{
				return false;
			}
			int num8 = 36 * num7;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Main.tile[num5 + k, num6 + l].active(true);
					*Main.tile[num5 + k, num6 + l].type = type;
					*Main.tile[num5 + k, num6 + l].frameX = (short)(num8 + 18 * k);
					*Main.tile[num5 + k, num6 + l].frameY = (short)(18 * l);
				}
			}
			return true;
		}

		// Token: 0x06001224 RID: 4644 RVA: 0x00443D60 File Offset: 0x00441F60
		public unsafe static bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
		{
			int num = x - 2;
			int num2 = x + 3;
			int num3 = y - 2;
			int num4 = y + 3;
			if (num < 0)
			{
				return false;
			}
			if (num2 > Main.maxTilesX)
			{
				return false;
			}
			if (num3 < 0)
			{
				return false;
			}
			if (num4 > Main.maxTilesY)
			{
				return false;
			}
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
				}
			}
			if (!WorldGen.SolidTile2(x, y + 1) || !WorldGen.SolidTile2(x + 1, y + 1))
			{
				return false;
			}
			int num5 = y - 1;
			if (Main.tile[x, num5].active() || Main.tile[x + 1, num5].active() || Main.tile[x, num5 + 1].active() || Main.tile[x + 1, num5 + 1].active())
			{
				return false;
			}
			int num6 = 36 * Style;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Main.tile[x + k, num5 + l].active(true);
					*Main.tile[x + k, num5 + l].type = type;
					*Main.tile[x + k, num5 + l].frameX = (short)(num6 + 18 * k);
					*Main.tile[x + k, num5 + l].frameY = (short)(18 * l);
				}
			}
			return true;
		}

		// Token: 0x06001225 RID: 4645 RVA: 0x00443F3C File Offset: 0x0044213C
		public static Color paintColor(int color)
		{
			Color white = Color.White;
			if (color == 1 || color == 13)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = 0;
			}
			if (color == 2 || color == 14)
			{
				white.R = byte.MaxValue;
				white.G = 127;
				white.B = 0;
			}
			if (color == 3 || color == 15)
			{
				white.R = byte.MaxValue;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 4 || color == 16)
			{
				white.R = 127;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 5 || color == 17)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = 0;
			}
			if (color == 6 || color == 18)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = 127;
			}
			if (color == 7 || color == 19)
			{
				white.R = 0;
				white.G = byte.MaxValue;
				white.B = byte.MaxValue;
			}
			if (color == 8 || color == 20)
			{
				white.R = 0;
				white.G = 127;
				white.B = byte.MaxValue;
			}
			if (color == 9 || color == 21)
			{
				white.R = 0;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 10 || color == 22)
			{
				white.R = 127;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 11 || color == 23)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = byte.MaxValue;
			}
			if (color == 12 || color == 24)
			{
				white.R = byte.MaxValue;
				white.G = 0;
				white.B = 127;
			}
			if (color == 25)
			{
				white.R = 75;
				white.G = 75;
				white.B = 75;
			}
			if (color == 26)
			{
				white.R = byte.MaxValue;
				white.G = byte.MaxValue;
				white.B = byte.MaxValue;
			}
			if (color == 27)
			{
				white.R = 175;
				white.G = 175;
				white.B = 175;
			}
			if (color == 28)
			{
				white.R = byte.MaxValue;
				white.G = 178;
				white.B = 125;
			}
			if (color == 29)
			{
				white.R = 25;
				white.G = 25;
				white.B = 25;
			}
			if (color == 30)
			{
				white.R = 200;
				white.G = 200;
				white.B = 200;
				white.A = 150;
			}
			return white;
		}

		// Token: 0x06001226 RID: 4646 RVA: 0x00444210 File Offset: 0x00442410
		public static Color coatingColor(int coating)
		{
			if (coating == 1)
			{
				return new Color(235, 170, 255, 255);
			}
			if (coating != 2)
			{
				return Color.Transparent;
			}
			return new Color(180, 245, 255, 255);
		}

		// Token: 0x06001227 RID: 4647 RVA: 0x00444260 File Offset: 0x00442460
		public static List<Color> coatingColors(Tile tile, bool block)
		{
			WorldGen._coatingColors.Clear();
			if (tile == null)
			{
				return WorldGen._coatingColors;
			}
			if ((block && tile.fullbrightBlock()) || (!block && tile.fullbrightWall()))
			{
				WorldGen._coatingColors.Add(WorldGen.coatingColor(1));
			}
			if ((block && tile.invisibleBlock()) || (!block && tile.invisibleWall()))
			{
				WorldGen._coatingColors.Add(WorldGen.coatingColor(2));
			}
			return WorldGen._coatingColors;
		}

		// Token: 0x06001228 RID: 4648 RVA: 0x004442DC File Offset: 0x004424DC
		public static void paintEffect(int x, int y, byte color, byte oldColor)
		{
			int color2 = (int)(color ?? oldColor);
			Color newColor = WorldGen.paintColor(color2);
			for (int i = 0; i < 10; i++)
			{
				int num = Dust.NewDust(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16, 143, 0f, 0f, 50, newColor, 1f);
				if (WorldGen.genRand.Next(2) == 0)
				{
					Main.dust[num].noGravity = true;
					Main.dust[num].scale *= 1.2f;
				}
				else
				{
					Main.dust[num].scale *= 0.5f;
				}
			}
		}

		// Token: 0x06001229 RID: 4649 RVA: 0x00444388 File Offset: 0x00442588
		public static void paintCoatEffect(int x, int y, byte paintCoatId, List<Color> oldColors)
		{
			Color color = WorldGen.coatingColor((int)paintCoatId);
			for (int i = 0; i < 10; i++)
			{
				Color newColor = color;
				if (paintCoatId == 0 && oldColors.Count > 0)
				{
					newColor = oldColors[Main.rand.Next(oldColors.Count)];
				}
				int num = Dust.NewDust(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16, 143, 0f, 0f, 50, newColor, 1f);
				if (WorldGen.genRand.Next(2) == 0)
				{
					Main.dust[num].noGravity = true;
					Main.dust[num].scale *= 1.2f;
				}
				else
				{
					Main.dust[num].scale *= 0.5f;
				}
			}
		}

		// Token: 0x0600122A RID: 4650 RVA: 0x00444450 File Offset: 0x00442650
		public static bool paintTile(int x, int y, byte color, bool broadCast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			byte b = tile.color();
			if (b == color)
			{
				return false;
			}
			WorldGen.paintEffect(x, y, color, b);
			tile.color(color);
			if (broadCast)
			{
				NetMessage.SendData(63, -1, -1, null, x, (float)y, (float)color, 0f, 0, 0, 0);
			}
			return true;
		}

		// Token: 0x0600122B RID: 4651 RVA: 0x004444B8 File Offset: 0x004426B8
		public static bool paintCoatTile(int x, int y, byte paintCoatId, bool broadcast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			List<Color> oldColors = WorldGen.coatingColors(tile, true);
			switch (paintCoatId)
			{
			case 0:
				if (!tile.fullbrightBlock() && !tile.invisibleBlock())
				{
					return false;
				}
				tile.fullbrightBlock(false);
				tile.invisibleBlock(false);
				WorldGen.SquareTileFrame(x, y, false);
				break;
			case 1:
				if (tile.fullbrightBlock())
				{
					return false;
				}
				tile.fullbrightBlock(true);
				break;
			case 2:
				if (tile.invisibleBlock())
				{
					return false;
				}
				tile.invisibleBlock(true);
				WorldGen.SquareTileFrame(x, y, false);
				break;
			default:
				return false;
			}
			if (broadcast)
			{
				NetMessage.SendData(63, -1, -1, null, x, (float)y, (float)paintCoatId, 1f, 0, 0, 0);
			}
			WorldGen.paintCoatEffect(x, y, paintCoatId, oldColors);
			return true;
		}

		// Token: 0x0600122C RID: 4652 RVA: 0x00444584 File Offset: 0x00442784
		public unsafe static bool paintCoatWall(int x, int y, byte paintCoatId, bool broadcast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || *tile.wall == 0)
			{
				return false;
			}
			List<Color> oldColors = WorldGen.coatingColors(tile, false);
			switch (paintCoatId)
			{
			case 0:
				if (!tile.fullbrightWall() && !tile.invisibleWall())
				{
					return false;
				}
				tile.fullbrightWall(false);
				tile.invisibleWall(false);
				WorldGen.SquareWallFrame(x, y, false);
				break;
			case 1:
				if (tile.fullbrightWall())
				{
					return false;
				}
				tile.fullbrightWall(true);
				break;
			case 2:
				if (tile.invisibleWall())
				{
					return false;
				}
				tile.invisibleWall(true);
				WorldGen.SquareWallFrame(x, y, false);
				break;
			default:
				return false;
			}
			if (broadcast)
			{
				NetMessage.SendData(64, -1, -1, null, x, (float)y, (float)paintCoatId, 1f, 0, 0, 0);
			}
			WorldGen.paintCoatEffect(x, y, paintCoatId, oldColors);
			return true;
		}

		// Token: 0x0600122D RID: 4653 RVA: 0x00444654 File Offset: 0x00442854
		public unsafe static bool paintWall(int x, int y, byte color, bool broadCast = false)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || *tile.wall == 0)
			{
				return false;
			}
			byte b = tile.wallColor();
			if (b == color)
			{
				return false;
			}
			tile.wallColor(color);
			if (broadCast)
			{
				NetMessage.SendData(64, -1, -1, null, x, (float)y, (float)color, 0f, 0, 0, 0);
			}
			WorldGen.paintEffect(x, y, color, b);
			return true;
		}

		// Token: 0x0600122E RID: 4654 RVA: 0x004446C0 File Offset: 0x004428C0
		public unsafe static void Place3x3Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			int num2 = y - 1;
			bool flag = true;
			for (int i = num; i < num + 3; i++)
			{
				for (int j = num2; j < num2 + 3; j++)
				{
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num3 = 0;
			while (style > 35)
			{
				num3++;
				style -= 36;
			}
			int num4 = style * 54;
			int num5 = num3 * 54;
			for (int k = num; k < num + 3; k++)
			{
				for (int l = num2; l < num2 + 3; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].type = type;
					*Main.tile[k, l].frameX = (short)(num4 + 18 * (k - num));
					*Main.tile[k, l].frameY = (short)(num5 + 18 * (l - num2));
				}
			}
		}

		// Token: 0x0600122F RID: 4655 RVA: 0x004447FC File Offset: 0x004429FC
		public unsafe static void Check3x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return;
			}
			int type = (int)(*tile.type);
			int num = 0;
			int num2 = 0;
			int num3 = (int)(*tile.frameX / 18);
			while (num3 >= 3)
			{
				num3 -= 3;
				num++;
			}
			int num4 = x - num3;
			int num5 = (int)(*tile.frameY / 18);
			while (num5 >= 3)
			{
				num5 -= 3;
				num2++;
			}
			int num6 = y - num5;
			num5 = num2 * 54;
			num3 = num * 54;
			for (int i = num4; i < num4 + 3; i++)
			{
				for (int j = num6; j < num6 + 3; j++)
				{
					Tile tile2 = Main.tile[i, j];
					if (tile2 != null && ((int)(*tile2.type) != type || !tile2.active() || *tile2.wall <= 0 || (int)(*tile2.frameX) != num3 + (i - num4) * 18 || (int)(*tile2.frameY) != num5 + (j - num6) * 18))
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = num4; k < num4 + 3; k++)
			{
				for (int l = num6; l < num6 + 3; l++)
				{
					if (Main.tile[k, l] != null && (int)(*Main.tile[k, l].type) == type && Main.tile[k, l].active())
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type != 240)
				{
					if (type == 440)
					{
						int num7 = -1;
						int num8 = -1;
						switch (num)
						{
						case 0:
							num7 = 3644;
							num8 = 1526;
							break;
						case 1:
							num7 = 3645;
							num8 = 1524;
							break;
						case 2:
							num7 = 3646;
							num8 = 1525;
							break;
						case 3:
							num7 = 3647;
							num8 = 1523;
							break;
						case 4:
							num7 = 3648;
							num8 = 1522;
							break;
						case 5:
							num7 = 3649;
							num8 = 1527;
							break;
						case 6:
							num7 = 3650;
							num8 = 3643;
							break;
						}
						if (num7 != -1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, num7, 1, false, 0, false, false);
						}
						if (num8 != -1 && num2 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, num8, 1, false, 0, false, false);
						}
					}
				}
				else
				{
					num += num2 * 36;
					switch (num)
					{
					case 18:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1419, 1, false, 0, false, false);
						goto IL_A24;
					case 19:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1420, 1, false, 0, false, false);
						goto IL_A24;
					case 20:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1427, 1, false, 0, false, false);
						goto IL_A24;
					case 21:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1428, 1, false, 0, false, false);
						goto IL_A24;
					case 33:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1574, 1, false, 0, false, false);
						goto IL_A24;
					case 34:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1575, 1, false, 0, false, false);
						goto IL_A24;
					case 35:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1576, 1, false, 0, false, false);
						goto IL_A24;
					case 36:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1855, 1, false, 0, false, false);
						goto IL_A24;
					case 37:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1856, 1, false, 0, false, false);
						goto IL_A24;
					case 38:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1960, 1, false, 0, false, false);
						goto IL_A24;
					case 39:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1961, 1, false, 0, false, false);
						goto IL_A24;
					case 40:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1962, 1, false, 0, false, false);
						goto IL_A24;
					case 54:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2489, 1, false, 0, false, false);
						goto IL_A24;
					case 55:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2589, 1, false, 0, false, false);
						goto IL_A24;
					case 56:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3357, 1, false, 0, false, false);
						goto IL_A24;
					case 57:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3358, 1, false, 0, false, false);
						goto IL_A24;
					case 58:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3359, 1, false, 0, false, false);
						goto IL_A24;
					case 59:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3595, 1, false, 0, false, false);
						goto IL_A24;
					case 60:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3867, 1, false, 0, false, false);
						goto IL_A24;
					case 61:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3866, 1, false, 0, false, false);
						goto IL_A24;
					case 62:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3868, 1, false, 0, false, false);
						goto IL_A24;
					case 69:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4660, 1, false, 0, false, false);
						goto IL_A24;
					case 70:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4723, 1, false, 0, false, false);
						goto IL_A24;
					case 71:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4724, 1, false, 0, false, false);
						goto IL_A24;
					case 72:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4783, 1, false, 0, false, false);
						goto IL_A24;
					case 73:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4958, 1, false, 0, false, false);
						goto IL_A24;
					case 74:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5087, 1, false, 0, false, false);
						goto IL_A24;
					case 75:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5108, 1, false, 0, false, false);
						goto IL_A24;
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 91:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5218 + num - 76, 1, false, 0, false, false);
						goto IL_A24;
					case 92:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5388, 1, false, 0, false, false);
						goto IL_A24;
					}
					if (num >= 63 && num <= 68)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4626 + num - 63, 1, false, 0, false, false);
					}
					else if (num >= 41 && num <= 45)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2114 + num - 41, 1, false, 0, false, false);
					}
					else if (num >= 46 && num <= 53)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2442 + num - 46, 1, false, 0, false, false);
					}
					else if (num >= 22 && num <= 25)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1440 + num - 22, 1, false, 0, false, false);
					}
					else if (num >= 26 && num <= 29)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1496 + num - 26, 1, false, 0, false, false);
					}
					else if (num >= 30 && num <= 32)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1538 + num - 30, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1360 + num, 1, false, 0, false, false);
					}
				}
				IL_A24:
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001230 RID: 4656 RVA: 0x0044525C File Offset: 0x0044345C
		public unsafe static void Place2x3Wall(int x, int y, ushort type, int style)
		{
			int num = y - 1;
			bool flag = true;
			for (int i = x; i < x + 2; i++)
			{
				for (int j = num; j < num + 3; j++)
				{
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num2 = style * 36;
			int num3 = 0;
			for (int k = x; k < x + 2; k++)
			{
				for (int l = num; l < num + 3; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].type = type;
					*Main.tile[k, l].frameX = (short)(num2 + 18 * (k - x));
					*Main.tile[k, l].frameY = (short)(num3 + 18 * (l - num));
				}
			}
		}

		// Token: 0x06001231 RID: 4657 RVA: 0x00445378 File Offset: 0x00443578
		public unsafe static void Check2x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)(*Main.tile[x, y].type);
			int num = 0;
			int num2 = (int)(*Main.tile[x, y].frameX / 18);
			while (num2 >= 2)
			{
				num2 -= 2;
				num++;
			}
			int num3 = x - num2;
			int num4 = y - (int)(*Main.tile[x, y].frameY / 18);
			num2 = num * 36;
			for (int i = num3; i < num3 + 2; i++)
			{
				for (int j = num4; j < num4 + 3; j++)
				{
					if ((int)(*Main.tile[i, j].type) != type || !Main.tile[i, j].active() || *Main.tile[i, j].wall <= 0 || (int)(*Main.tile[i, j].frameX) != num2 + (i - num3) * 18 || (int)(*Main.tile[i, j].frameY) != (j - num4) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = num3; k < num3 + 2; k++)
			{
				for (int l = num4; l < num4 + 3; l++)
				{
					if ((int)(*Main.tile[k, l].type) == type && Main.tile[k, l].active())
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 245)
				{
					if (num >= 19 && num <= 28)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5248 + num - 19, 1, false, 0, false, false);
					}
					else if (num >= 15 && num <= 18)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5247, 1, false, 0, false, false);
					}
					else
					{
						switch (num)
						{
						case 5:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1495, 1, false, 0, false, false);
							break;
						case 6:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1577, 1, false, 0, false, false);
							break;
						case 7:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4638, 1, false, 0, false, false);
							break;
						case 8:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4639, 1, false, 0, false, false);
							break;
						case 9:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4659, 1, false, 0, false, false);
							break;
						case 10:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4726, 1, false, 0, false, false);
							break;
						case 11:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4727, 1, false, 0, false, false);
							break;
						case 12:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4728, 1, false, 0, false, false);
							break;
						case 13:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5086, 1, false, 0, false, false);
							break;
						case 14:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5246, 1, false, 0, false, false);
							break;
						default:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1474 + num, 1, false, 0, false, false);
							break;
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001232 RID: 4658 RVA: 0x004457D0 File Offset: 0x004439D0
		public unsafe static void Place3x2Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			bool flag = true;
			for (int i = num; i < num + 3; i++)
			{
				for (int j = y; j < y + 2; j++)
				{
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num2 = 0;
			int num3 = style * 36;
			for (int k = num; k < num + 3; k++)
			{
				for (int l = y; l < y + 2; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].type = type;
					*Main.tile[k, l].frameX = (short)(num2 + 18 * (k - num));
					*Main.tile[k, l].frameY = (short)(num3 + 18 * (l - y));
				}
			}
		}

		// Token: 0x06001233 RID: 4659 RVA: 0x004458EC File Offset: 0x00443AEC
		public unsafe static void Check3x2Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)(*Main.tile[x, y].type);
			int num = 0;
			int num2 = (int)(*Main.tile[x, y].frameY / 18);
			while (num2 >= 2)
			{
				num2 -= 2;
				num++;
			}
			int num3 = y - num2;
			int num4 = x - (int)(*Main.tile[x, y].frameX / 18);
			num2 = num * 36;
			for (int i = num4; i < num4 + 3; i++)
			{
				for (int j = num3; j < num3 + 2; j++)
				{
					if ((int)(*Main.tile[i, j].type) != type || !Main.tile[i, j].active() || *Main.tile[i, j].wall <= 0 || (int)(*Main.tile[i, j].frameY) != num2 + (j - num3) * 18 || (int)(*Main.tile[i, j].frameX) != (i - num4) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = num4; k < num4 + 3; k++)
			{
				for (int l = num3; l < num3 + 2; l++)
				{
					if ((int)(*Main.tile[k, l].type) == type && Main.tile[k, l].active())
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 246)
				{
					switch (num)
					{
					case 16:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1541, 1, false, 0, false, false);
						break;
					case 17:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1542, 1, false, 0, false, false);
						break;
					case 18:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1908, 1, false, 0, false, false);
						break;
					case 19:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4661, 1, false, 0, false, false);
						break;
					case 20:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4729, 1, false, 0, false, false);
						break;
					case 21:
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5258 + num - 21, 1, false, 0, false, false);
						break;
					default:
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1479 + num, 1, false, 0, false, false);
						break;
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001234 RID: 4660 RVA: 0x00445C6C File Offset: 0x00443E6C
		public unsafe static void Place4x3Wall(int x, int y, ushort type, int style)
		{
			int num = x - 1;
			int num2 = y - 1;
			bool flag = true;
			for (int i = num; i < num + 4; i++)
			{
				for (int j = num2; j < num2 + 3; j++)
				{
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num3 = 0;
			int num4 = style * 54;
			for (int k = num; k < num + 4; k++)
			{
				for (int l = num2; l < num2 + 3; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].type = type;
					*Main.tile[k, l].frameX = (short)(num3 + 18 * (k - num));
					*Main.tile[k, l].frameY = (short)(num4 + 18 * (l - num2));
				}
			}
		}

		// Token: 0x06001235 RID: 4661 RVA: 0x00445D90 File Offset: 0x00443F90
		public unsafe static void Check4x3Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)(*Main.tile[x, y].type);
			int num = 0;
			int num2 = (int)(*Main.tile[x, y].frameY / 18);
			while (num2 >= 3)
			{
				num2 -= 3;
				num++;
			}
			int num3 = y - num2;
			int num4 = x - (int)(*Main.tile[x, y].frameX / 18);
			num2 = num * 54;
			for (int i = num4; i < num4 + 4; i++)
			{
				for (int j = num3; j < num3 + 3; j++)
				{
					if ((int)(*Main.tile[i, j].type) != type || !Main.tile[i, j].active() || *Main.tile[i, j].wall <= 0 || (int)(*Main.tile[i, j].frameY) != num2 + (j - num3) * 18 || (int)(*Main.tile[i, j].frameX) != (i - num4) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = num4; k < num4 + 4; k++)
			{
				for (int l = num3; l < num3 + 3; l++)
				{
					if ((int)(*Main.tile[k, l].type) == type && Main.tile[k, l].active())
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 241)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1417, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001236 RID: 4662 RVA: 0x00445FB0 File Offset: 0x004441B0
		public unsafe static void Place6x4Wall(int x, int y, ushort type, int style)
		{
			int num = x - 2;
			int num2 = y - 2;
			bool flag = true;
			for (int i = num; i < num + 6; i++)
			{
				for (int j = num2; j < num2 + 4; j++)
				{
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall == 0)
					{
						flag = false;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num3 = 27;
			int num4 = style / num3 * 108;
			int num5 = style % num3 * 72;
			for (int k = num; k < num + 6; k++)
			{
				for (int l = num2; l < num2 + 4; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].type = type;
					*Main.tile[k, l].frameX = (short)(num4 + 18 * (k - num));
					*Main.tile[k, l].frameY = (short)(num5 + 18 * (l - num2));
				}
			}
		}

		// Token: 0x06001237 RID: 4663 RVA: 0x004460E0 File Offset: 0x004442E0
		public unsafe static void Check6x4Wall(int x, int y)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int type = (int)(*Main.tile[x, y].type);
			int num2 = (int)(*Main.tile[x, y].frameY / 18);
			int num3 = (int)(*Main.tile[x, y].frameX / 18);
			int num4 = 27 * (num3 / 6) + (num2 >> 2);
			num2 %= 4;
			num3 %= 6;
			int num5 = y - num2;
			int num6 = x - (int)(*Main.tile[x, y].frameX / 18 % 6);
			num2 = num4 % 27 * 72;
			num3 = num4 / 27 * 108;
			for (int i = num6; i < num6 + 6; i++)
			{
				for (int j = num5; j < num5 + 4; j++)
				{
					if ((int)(*Main.tile[i, j].type) != type || !Main.tile[i, j].active() || *Main.tile[i, j].wall <= 0 || (int)(*Main.tile[i, j].frameY) != num2 + (j - num5) * 18 || (int)(*Main.tile[i, j].frameX) != num3 + (i - num6) * 18)
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = num6; k < num6 + 6; k++)
			{
				for (int l = num5; l < num5 + 4; l++)
				{
					if ((int)(*Main.tile[k, l].type) == type && Main.tile[k, l].active())
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 242)
				{
					if (num4 != 30)
					{
						switch (num4)
						{
						case 50:
						case 51:
						case 52:
						case 53:
						case 54:
						case 55:
						case 56:
						case 57:
						case 58:
						case 59:
						case 60:
						case 61:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5234 + num4 - 50, 1, false, 0, false, false);
							break;
						case 62:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5274, 1, false, 0, false, false);
							break;
						case 63:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5308, 1, false, 0, false, false);
							break;
						case 64:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5310, 1, false, 0, false, false);
							break;
						case 65:
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5389, 1, false, 0, false, false);
							break;
						default:
							if (num4 >= 46 && num4 <= 49)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5121 + num4 - 46, 1, false, 0, false, false);
							}
							else
							{
								switch (num4)
								{
								case 37:
								case 38:
								case 39:
								case 40:
								case 41:
								case 42:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4632 + num4 - 37, 1, false, 0, false, false);
									break;
								case 43:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4658, 1, false, 0, false, false);
									break;
								case 44:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 4725, 1, false, 0, false, false);
									break;
								case 45:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 5085, 1, false, 0, false, false);
									break;
								default:
									if (num4 >= 31 && num4 <= 35)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3055 + num4 - 31, 1, false, 0, false, false);
									}
									else if (num4 >= 27 && num4 <= 29)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2865 + num4 - 27, 1, false, 0, false, false);
									}
									else if (num4 == 36)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 3596, 1, false, 0, false, false);
									}
									else if (num4 == 26)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2497, 1, false, 0, false, false);
									}
									else if (num4 == 25)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2495, 1, false, 0, false, false);
									}
									else if (num4 >= 22)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2281 + num4 - 22, 1, false, 0, false, false);
									}
									else if (num4 >= 17)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1846 + num4 - 17, 1, false, 0, false, false);
									}
									else if (num4 == 16)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1573, 1, false, 0, false, false);
									}
									else if (num4 >= 13)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1500 + num4 - 13, 1, false, 0, false, false);
									}
									else if (num4 >= 6)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1433 + num4 - 6, 1, false, 0, false, false);
									}
									else
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 1421 + num4, 1, false, 0, false, false);
									}
									break;
								}
							}
							break;
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 32, 32, 2995, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001238 RID: 4664 RVA: 0x00446780 File Offset: 0x00444980
		private static int RollRandomSeaShellStyle()
		{
			int result = WorldGen.genRand.Next(2);
			if (WorldGen.genRand.Next(10) == 0)
			{
				result = 2;
			}
			if (WorldGen.genRand.Next(10) == 0)
			{
				result = 3;
			}
			if (WorldGen.genRand.Next(50) == 0)
			{
				result = 4;
			}
			return result;
		}

		// Token: 0x06001239 RID: 4665 RVA: 0x004467CC File Offset: 0x004449CC
		public unsafe static void Place1x1(int x, int y, int type, int style = 0)
		{
			Tile tile = Main.tile[x, y];
			if (Main.tile[x, y] == null)
			{
				tile = default(Tile);
				Main.tile[x, y] = tile;
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (type == 324)
			{
				if (WorldGen.SolidTile2(x, y + 1) || (Main.tile[x, y + 1].nactive() && Main.tileTable[(int)(*Main.tile[x, y + 1].type)]))
				{
					tile.active(true);
					*tile.type = (ushort)type;
					*tile.frameX = (short)(22 * WorldGen.genRand.Next(3));
					*tile.frameY = (short)(22 * style);
					return;
				}
			}
			else if (WorldGen.SolidTile2(x, y + 1) && !tile.active())
			{
				tile.active(true);
				*tile.type = (ushort)type;
				if (type <= 144)
				{
					if (type != 36 && type != 144)
					{
						goto IL_170;
					}
				}
				else if (type != 239)
				{
					if (type == 324)
					{
						*tile.frameX = (short)(22 * WorldGen.RollRandomSeaShellStyle());
						*tile.frameY = (short)(22 * style);
						return;
					}
					goto IL_170;
				}
				*tile.frameX = (short)(style * 18);
				*tile.frameY = 0;
				return;
				IL_170:
				*tile.frameY = (short)(style * 18);
			}
		}

		// Token: 0x0600123A RID: 4666 RVA: 0x00446958 File Offset: 0x00444B58
		public static void Check1x1(int x, int y, int type)
		{
			if (Main.tile[x, y + 1] != null)
			{
				if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				if (type == 624 && !WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(x, y))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
		}

		// Token: 0x0600123B RID: 4667 RVA: 0x004469AC File Offset: 0x00444BAC
		public unsafe static void CheckGolf1x1(int x, int y, int type)
		{
			Tile tile = Main.tile[x, y];
			bool flag = false;
			if (*tile.frameX % 18 != 0)
			{
				flag = true;
			}
			if (*tile.frameY % 18 != 0)
			{
				flag = true;
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x0600123C RID: 4668 RVA: 0x00446A00 File Offset: 0x00444C00
		public unsafe static void CheckLogicTiles(int x, int y, int type)
		{
			if (type == 419)
			{
				Tile tile = Main.tile[x, y + 1];
				if (tile != null && (!tile.active() || (*tile.type != 420 && *tile.type != 419)))
				{
					WorldGen.KillTile(x, y, false, false, false);
					return;
				}
			}
			Tile tile2 = Main.tile[x, y];
			bool flag = false;
			if (*tile2.frameX % 18 != 0)
			{
				flag = true;
			}
			if (*tile2.frameY % 18 != 0)
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x0600123D RID: 4669 RVA: 0x00446A9C File Offset: 0x00444C9C
		public unsafe static void PlaceLogicTiles(int x, int y, int type, int style = 0)
		{
			Tile tile = Main.tile[x, y];
			if (Main.tile[x, y] == null)
			{
				tile = default(Tile);
				Main.tile[x, y] = tile;
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (type == 419)
			{
				if (Main.tile[x, y + 1].active() && (*Main.tile[x, y + 1].type == 419 || *Main.tile[x, y + 1].type == 420))
				{
					tile.active(true);
					*tile.type = (ushort)type;
					*tile.frameX = (short)(style * 18);
					*tile.frameY = 0;
					return;
				}
			}
			else if (!tile.active())
			{
				tile.active(true);
				*tile.type = (ushort)type;
				*tile.frameX = 0;
				*tile.frameY = (short)(18 * style);
			}
		}

		// Token: 0x0600123E RID: 4670 RVA: 0x00446BC8 File Offset: 0x00444DC8
		public unsafe static void PlaceOnTable1x1(int x, int y, int type, int style = 0)
		{
			bool flag = false;
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileTable[(int)(*Main.tile[x, y + 1].type)])
			{
				flag = true;
			}
			if (type == 78 && !Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileSolid[(int)(*Main.tile[x, y + 1].type)] && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				flag = true;
			}
			if (flag)
			{
				Main.tile[x, y].active(true);
				*Main.tile[x, y].type = (ushort)type;
				if (type == 33)
				{
					*Main.tile[x, y].frameX = 0;
					*Main.tile[x, y].frameY = (short)(style * 22);
				}
				else
				{
					*Main.tile[x, y].frameX = (short)(style * 18);
					*Main.tile[x, y].frameY = 0;
				}
				if (type == 50)
				{
					*Main.tile[x, y].frameX = (short)(18 * WorldGen.genRand.Next(5));
				}
			}
		}

		// Token: 0x0600123F RID: 4671 RVA: 0x00446DC4 File Offset: 0x00444FC4
		public unsafe static bool PlaceAlch(int x, int y, int style)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				bool flag = false;
				switch (style)
				{
				case 0:
					if (*Main.tile[x, y + 1].type != 2 && *Main.tile[x, y + 1].type != 477 && *Main.tile[x, y + 1].type != 492 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 109)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
					break;
				case 1:
					if (*Main.tile[x, y + 1].type != 60 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
					break;
				case 2:
					if (*Main.tile[x, y + 1].type != 0 && *Main.tile[x, y + 1].type != 59 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
					break;
				case 3:
					if (*Main.tile[x, y + 1].type != 661 && *Main.tile[x, y + 1].type != 662 && *Main.tile[x, y + 1].type != 203 && *Main.tile[x, y + 1].type != 199 && *Main.tile[x, y + 1].type != 23 && *Main.tile[x, y + 1].type != 25 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0)
					{
						flag = true;
					}
					break;
				case 4:
					if (*Main.tile[x, y + 1].type != 53 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 116)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 5:
					if (*Main.tile[x, y + 1].type != 57 && *Main.tile[x, y + 1].type != 633 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 6:
					if (*Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 147 && *Main.tile[x, y + 1].type != 161 && *Main.tile[x, y + 1].type != 163 && *Main.tile[x, y + 1].type != 164 && *Main.tile[x, y + 1].type != 200)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				}
				if (!flag)
				{
					Main.tile[x, y].active(true);
					*Main.tile[x, y].type = 82;
					*Main.tile[x, y].frameX = (short)(18 * style);
					*Main.tile[x, y].frameY = 0;
					return true;
				}
			}
			return false;
		}

		// Token: 0x06001240 RID: 4672 RVA: 0x0044746C File Offset: 0x0044566C
		public unsafe static void GrowSpike(int i, int j, ushort spikeType, ushort landType)
		{
			int num = -1;
			if (landType != 23)
			{
				if (landType == 199)
				{
					num = 662;
				}
			}
			else
			{
				num = 661;
			}
			int num2 = i;
			int num3 = j;
			int num4 = 0;
			if (Main.tile[num2 + 1, num3].active() && *Main.tile[num2 + 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2 - 1, num3].active() && *Main.tile[num2 - 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 + 1].active() && *Main.tile[num2, num3 + 1].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 - 1].active() && *Main.tile[num2, num3 - 1].type == spikeType)
			{
				num4++;
			}
			if (num4 >= 3 && *Main.tile[i, j].type != landType && (int)(*Main.tile[i, j].type) != num)
			{
				return;
			}
			switch (WorldGen.genRand.Next(4))
			{
			case 0:
				num3--;
				break;
			case 1:
				num3++;
				break;
			case 2:
				num2--;
				break;
			case 3:
				num2++;
				break;
			}
			if (Main.tile[num2, num3].active())
			{
				return;
			}
			num4 = 0;
			if (Main.tile[num2 + 1, num3].active() && *Main.tile[num2 + 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2 - 1, num3].active() && *Main.tile[num2 - 1, num3].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 + 1].active() && *Main.tile[num2, num3 + 1].type == spikeType)
			{
				num4++;
			}
			if (Main.tile[num2, num3 - 1].active() && *Main.tile[num2, num3 - 1].type == spikeType)
			{
				num4++;
			}
			if (num4 >= 2)
			{
				return;
			}
			int num5 = 7;
			int num9 = num2 - num5;
			int num6 = num2 + num5;
			int num7 = num3 - num5;
			int num8 = num3 + num5;
			bool flag = false;
			for (int k = num9; k < num6; k++)
			{
				for (int l = num7; l < num8; l++)
				{
					if (Math.Abs(k - num2) * 2 + Math.Abs(l - num3) < 9 && Main.tile[k, l].active() && (*Main.tile[k, l].type == landType || (int)(*Main.tile[k, l].type) == num) && Main.tile[k, l - 1].active() && *Main.tile[k, l - 1].type == spikeType && *Main.tile[k, l - 1].liquid == 0)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				*Main.tile[num2, num3].type = spikeType;
				Main.tile[num2, num3].active(true);
				Main.tile[num2, num3].CopyPaintAndCoating(Main.tile[i, j]);
				WorldGen.SquareTileFrame(num2, num3, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, num2, num3, 1, TileChangeType.None);
				}
			}
		}

		/// <summary>
		/// Checks if vines are allowed to grow immediately below the location provided. This method only checks that the count of existing vine tiles (<see cref="F:Terraria.ID.TileID.Sets.IsVine" />) in a nearby area does not exceed the maximum allowed amount. Returns true if more vines in the area would be allowed.
		/// <para /> Specifically, this method checks that the number of vine tiles in a 9x17 area around the given coordinate does not exceed 60.
		/// </summary>
		// Token: 0x06001241 RID: 4673 RVA: 0x00447870 File Offset: 0x00445A70
		public unsafe static bool GrowMoreVines(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 30))
			{
				return false;
			}
			int num = 4;
			int num2 = 6;
			int num3 = 10;
			int num4 = 60;
			int num5 = 0;
			if (*Main.tile[x, y].type == 528)
			{
				num4 /= 5;
			}
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num2; j <= y + num3; j++)
				{
					if (TileID.Sets.IsVine[(int)(*Main.tile[i, j].type)])
					{
						num5++;
						if (j > y && Collision.CanHitLine(new Vector2((float)(x * 16), (float)(y * 16)), 1, 1, new Vector2((float)(i * 16), (float)(j * 16)), 1, 1))
						{
							num5 = ((*Main.tile[i, j].type != 528) ? (num5 + (j - y) * 2) : (num5 + (j - y) * 20));
						}
						if (num5 > num4)
						{
							return false;
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06001242 RID: 4674 RVA: 0x00447980 File Offset: 0x00445B80
		private static void GrowGlowTulips()
		{
			int num = (Main.maxTilesX > 4200) ? ((Main.maxTilesX <= 6400) ? 1 : 2) : 0;
			int num2 = 100;
			int num3 = 300;
			int num4;
			if (num != 1)
			{
				if (num != 2)
				{
					num4 = 2;
				}
				else
				{
					num4 = 6;
				}
			}
			else
			{
				num4 = 4;
			}
			int num5 = 0;
			int num6 = 10000;
			int num7 = (int)((double)num6 * 0.75);
			while (num5 < num4)
			{
				num6--;
				if (num6 <= 0)
				{
					break;
				}
				int i2 = (num5 >= num4 / 2 && (num6 <= num7 || WorldGen.genRand.Next(2) != 0)) ? WorldGen.genRand.Next(Main.maxTilesX - num3, Main.maxTilesX - num2) : WorldGen.genRand.Next(num2, num3);
				int i = (!WorldGen.remixWorldGen) ? WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 200) : WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 350);
				if (WorldGen.TryGrowingGlowTulip(i2, i))
				{
					num5++;
				}
			}
		}

		// Token: 0x06001243 RID: 4675 RVA: 0x00447A90 File Offset: 0x00445C90
		private unsafe static void MatureTheHerbPlants()
		{
			for (int i = 10; i < Main.maxTilesX - 10; i++)
			{
				for (int j = 10; j < Main.maxTilesY - 10; j++)
				{
					if ((double)j > Main.rockLayer && (*Main.tile[i, j + 1].type == 59 || *Main.tile[i, j + 1].type == 0) && WorldGen.SolidTile(i, j + 1, false) && !Main.tile[i, j].active() && *Main.tile[i, j].liquid == 0 && WorldGen.genRand.Next(25) == 0)
					{
						Main.tile[i, j].active(true);
						*Main.tile[i, j].type = 82;
						*Main.tile[i, j].frameX = 36;
						*Main.tile[i, j].frameY = 0;
					}
					if (*Main.tile[i, j].type == 82 && WorldGen.genRand.Next(3) == 0)
					{
						*Main.tile[i, j].type = 83;
						if (*Main.tile[i, j].frameX == 36 && WorldGen.genRand.Next(2) == 0)
						{
							*Main.tile[i, j].type = 84;
						}
						if (*Main.tile[i, j].frameX == 108 && WorldGen.genRand.Next(3) == 0)
						{
							*Main.tile[i, j].type = 84;
						}
					}
				}
			}
		}

		// Token: 0x06001244 RID: 4676 RVA: 0x00447C74 File Offset: 0x00445E74
		public unsafe static void GrowAlch(int x, int y)
		{
			if (!Main.tile[x, y].active())
			{
				return;
			}
			if (*Main.tile[x, y].liquid > 0)
			{
				int num = (int)(*Main.tile[x, y].frameX / 18);
				if ((!Main.tile[x, y].lava() || num != 5) && (Main.tile[x, y].liquidType() != 0 || (num != 1 && num != 4)))
				{
					WorldGen.KillTile(x, y, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					}
					WorldGen.SquareTileFrame(x, y, true);
				}
			}
			if (*Main.tile[x, y].type == 82)
			{
				if (WorldGen.genRand.Next(50) == 0)
				{
					bool flag = false;
					if (*Main.tile[x, y].frameX == 108)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							flag = true;
						}
					}
					else
					{
						flag = true;
					}
					if (flag)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
				}
				else
				{
					if (Main.dayTime && *Main.tile[x, y].type == 82 && *Main.tile[x, y].frameX == 0 && WorldGen.genRand.Next(50) == 0)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
					if (!Main.dayTime && *Main.tile[x, y].type == 82 && *Main.tile[x, y].frameX == 18 && WorldGen.genRand.Next(50) == 0)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
					if (Main.raining && *Main.tile[x, y].type == 82 && *Main.tile[x, y].frameX == 72 && WorldGen.genRand.Next(50) == 0)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
					if ((double)y > Main.worldSurface && *Main.tile[x, y].type == 82 && *Main.tile[x, y].frameX == 36 && WorldGen.genRand.Next(50) == 0)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
					if (y > Main.maxTilesY - 200 && *Main.tile[x, y].type == 82 && *Main.tile[x, y].frameX == 90 && WorldGen.genRand.Next(50) == 0)
					{
						*Main.tile[x, y].type = 83;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
						WorldGen.SquareTileFrame(x, y, true);
						return;
					}
				}
			}
			else if (*Main.tile[x, y].frameX == 36 && WorldGen.genRand.Next(3) != 0)
			{
				if (*Main.tile[x, y].type == 83)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						*Main.tile[x, y].type = 84;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							return;
						}
					}
				}
				else if (*Main.tile[x, y].type == 84 || WorldGen.genRand.Next(5) == 0)
				{
					*Main.tile[x, y].type = 83;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (*Main.tile[x, y].frameX == 108 && *Main.tile[x, y].type == 83 && WorldGen.genRand.Next(30) == 0)
			{
				*Main.tile[x, y].type = 84;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
				WorldGen.SquareTileFrame(x, y, true);
			}
		}

		// Token: 0x06001245 RID: 4677 RVA: 0x00448164 File Offset: 0x00446364
		public unsafe static void PlantAlch()
		{
			int num = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
			int num2 = Main.remixWorld ? WorldGen.genRand.Next(20, Main.maxTilesY - 20) : ((WorldGen.genRand.Next(40) == 0) ? WorldGen.genRand.Next((int)(Main.rockLayer + (double)Main.maxTilesY) / 2, Main.maxTilesY - 20) : ((WorldGen.genRand.Next(10) != 0) ? WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 20) : WorldGen.genRand.Next(20, Main.maxTilesY - 20)));
			while (num2 < Main.maxTilesY - 20 && !Main.tile[num, num2].active())
			{
				num2++;
			}
			if (!Main.tile[num, num2].nactive() || Main.tile[num, num2 - 1].active() || *Main.tile[num, num2 - 1].liquid != 0)
			{
				return;
			}
			int num3 = 15;
			int num4 = 5;
			int num5 = 0;
			num3 = (int)((double)num3 * ((double)Main.maxTilesX / 4200.0));
			int num9 = Utils.Clamp<int>(num - num3, 4, Main.maxTilesX - 4);
			int num6 = Utils.Clamp<int>(num + num3, 4, Main.maxTilesX - 4);
			int num7 = Utils.Clamp<int>(num2 - num3, 4, Main.maxTilesY - 4);
			int num8 = Utils.Clamp<int>(num2 + num3, 4, Main.maxTilesY - 4);
			for (int i = num9; i <= num6; i++)
			{
				for (int j = num7; j <= num8; j++)
				{
					if (Main.tileAlch[(int)(*Main.tile[i, j].type)])
					{
						num5++;
					}
				}
			}
			if (num5 < num4)
			{
				if (*Main.tile[num, num2].type == 2 || *Main.tile[num, num2].type == 109)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 0);
				}
				if (*Main.tile[num, num2].type == 60)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 1);
				}
				if (*Main.tile[num, num2].type == 0 || *Main.tile[num, num2].type == 59)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 2);
				}
				if (*Main.tile[num, num2].type == 23 || *Main.tile[num, num2].type == 661 || *Main.tile[num, num2].type == 25 || *Main.tile[num, num2].type == 203 || *Main.tile[num, num2].type == 199 || *Main.tile[num, num2].type == 662)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 3);
				}
				if ((*Main.tile[num, num2].type == 53 || *Main.tile[num, num2].type == 116) && num >= WorldGen.beachDistance && num <= Main.maxTilesX - WorldGen.beachDistance)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 4);
				}
				if (*Main.tile[num, num2].type == 57 || *Main.tile[num, num2].type == 633)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 5);
				}
				if (*Main.tile[num, num2].type == 147 || *Main.tile[num, num2].type == 163 || *Main.tile[num, num2].type == 164 || *Main.tile[num, num2].type == 161 || *Main.tile[num, num2].type == 200)
				{
					WorldGen.PlaceAlch(num, num2 - 1, 6);
				}
				if (Main.tile[num, num2 - 1].active() && Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, num, num2 - 1, TileChangeType.None);
				}
			}
		}

		// Token: 0x06001246 RID: 4678 RVA: 0x004485F0 File Offset: 0x004467F0
		public unsafe static void CheckAlch(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			bool flag = false;
			if (!Main.tile[x, y + 1].nactive())
			{
				flag = true;
			}
			if (Main.tile[x, y + 1].halfBrick())
			{
				flag = true;
			}
			int num = (int)(*Main.tile[x, y].frameX / 18);
			*Main.tile[x, y].frameY = 0;
			if (!flag)
			{
				switch (num)
				{
				case 0:
					if (*Main.tile[x, y + 1].type != 109 && *Main.tile[x, y + 1].type != 2 && *Main.tile[x, y + 1].type != 477 && *Main.tile[x, y + 1].type != 492 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 1:
					if (*Main.tile[x, y + 1].type != 60 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 2:
					if (*Main.tile[x, y + 1].type != 0 && *Main.tile[x, y + 1].type != 59 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 3:
					if (*Main.tile[x, y + 1].type != 661 && *Main.tile[x, y + 1].type != 662 && *Main.tile[x, y + 1].type != 199 && *Main.tile[x, y + 1].type != 203 && *Main.tile[x, y + 1].type != 23 && *Main.tile[x, y + 1].type != 25 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 4:
					if (*Main.tile[x, y + 1].type != 53 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 116)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				case 5:
					if (*Main.tile[x, y + 1].type != 57 && *Main.tile[x, y + 1].type != 633 && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380)
					{
						flag = true;
					}
					if (*Main.tile[x, y].type != 82 && Main.tile[x, y].lava() && Main.netMode != 1)
					{
						if (*Main.tile[x, y].liquid > 16)
						{
							if (*Main.tile[x, y].type == 83)
							{
								*Main.tile[x, y].type = 84;
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
								}
							}
						}
						else if (*Main.tile[x, y].type == 84)
						{
							*Main.tile[x, y].type = 83;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
						}
					}
					break;
				case 6:
					if (*Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 147 && *Main.tile[x, y + 1].type != 161 && *Main.tile[x, y + 1].type != 163 && *Main.tile[x, y + 1].type != 164 && *Main.tile[x, y + 1].type != 200)
					{
						flag = true;
					}
					if (*Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
					{
						flag = true;
					}
					break;
				}
			}
			if (flag)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x06001247 RID: 4679 RVA: 0x00448D5C File Offset: 0x00446F5C
		public unsafe static void CheckBanner(int x, int j, byte type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = (int)(*Main.tile[x, j].frameY / 18);
			int num2 = 0;
			while (num >= 3)
			{
				num -= 3;
				num2++;
			}
			num = j - num;
			int frameX = (int)(*Main.tile[x, j].frameX);
			bool flag = false;
			for (int i = 0; i < 3; i++)
			{
				if (Main.tile[x, num + i] == null)
				{
					Main.tile[x, num + i] = default(Tile);
				}
				if (!Main.tile[x, num + i].active())
				{
					flag = true;
				}
				else if (*Main.tile[x, num + i].type != (ushort)type)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[x, num + i].frameY) != i * 18 + num2 * 18 * 3)
				{
					flag = true;
				}
				else if ((int)(*Main.tile[x, num + i].frameX) != frameX)
				{
					flag = true;
				}
			}
			if (Main.tile[x, num - 1] == null)
			{
				Main.tile[x, num - 1] = default(Tile);
			}
			Tile tile = Main.tile[x, num - 1];
			if (!tile.nactive())
			{
				flag = true;
			}
			bool flag4 = tile.topSlope() || tile.halfBrick() || Main.tileSolid[(int)(*tile.type)];
			bool flag2 = !Main.tileSolidTop[(int)(*tile.type)] || (TileID.Sets.Platforms[(int)(*tile.type)] && (tile.halfBrick() || tile.topSlope()));
			bool flag3 = flag4 && flag2 && !TileID.Sets.NotReallySolid[(int)(*tile.type)] && !tile.bottomSlope();
			if (TileID.Sets.Platforms[(int)(*tile.type)] || *tile.type == 380)
			{
				flag3 = true;
			}
			if (!flag3)
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, j, (int)type, true);
			for (int k = 0; k < 3; k++)
			{
				if (*Main.tile[x, num + k].type == (ushort)type)
				{
					WorldGen.KillTile(x, num + k, false, false, false);
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 91)
				{
					int num3 = frameX / 18;
					num3 += num2 * 111;
					if (num3 == 310)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 5352, 1, false, 0, false, false);
					}
					else if (num3 >= 297)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 4668 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 295)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 4392 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 294)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 4602, 1, false, 0, false, false);
					}
					else if (num3 >= 288)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 4253 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 278)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 3559 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 273)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 3516 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 272)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 3780, 1, false, 0, false, false);
					}
					else if (num3 >= 270)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 3323 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 207)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 3183 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 109)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 2788 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 22)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 1593 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 10 && num3 <= 15)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 1441 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 16 && num3 <= 21)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 1448 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 7 && num3 <= 9)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 838 + num3, 1, false, 0, false, false);
					}
					else if (num3 >= 4 && num3 <= 6)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 785 + num3, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num + 1), x * 16, (num + 1) * 16, 32, 32, 337 + num3, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001248 RID: 4680 RVA: 0x004493B4 File Offset: 0x004475B4
		public unsafe static void PlaceBanner(int x, int y, ushort type, int style = 0)
		{
			int num = style * 18;
			int num2 = 0;
			if (style >= 90)
			{
				num -= 1620;
				num2 += 54;
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (Main.tile[x, y + 2] == null)
			{
				Main.tile[x, y + 2] = default(Tile);
			}
			if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)(*Main.tile[x, y - 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, y - 1].type)] && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active() && !Main.tile[x, y + 2].active())
			{
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = (short)num2;
				*Main.tile[x, y].frameX = (short)num;
				*Main.tile[x, y].type = type;
				Main.tile[x, y + 1].active(true);
				*Main.tile[x, y + 1].frameY = (short)(num2 + 18);
				*Main.tile[x, y + 1].frameX = (short)num;
				*Main.tile[x, y + 1].type = type;
				Main.tile[x, y + 2].active(true);
				*Main.tile[x, y + 2].frameY = (short)(num2 + 36);
				*Main.tile[x, y + 2].frameX = (short)num;
				*Main.tile[x, y + 2].type = type;
			}
		}

		// Token: 0x06001249 RID: 4681 RVA: 0x0044965C File Offset: 0x0044785C
		public unsafe static void PlaceMan(int i, int j, int dir)
		{
			for (int k = i; k <= i + 1; k++)
			{
				for (int l = j - 2; l <= j; l++)
				{
					if (Main.tile[k, l].active())
					{
						return;
					}
				}
			}
			if (WorldGen.SolidTile2(i, j + 1) && WorldGen.SolidTile2(i + 1, j + 1))
			{
				byte b = 0;
				if (dir == 1)
				{
					b = 36;
				}
				Main.tile[i, j - 2].active(true);
				*Main.tile[i, j - 2].frameY = 0;
				*Main.tile[i, j - 2].frameX = (short)b;
				*Main.tile[i, j - 2].type = 128;
				Main.tile[i, j - 1].active(true);
				*Main.tile[i, j - 1].frameY = 18;
				*Main.tile[i, j - 1].frameX = (short)b;
				*Main.tile[i, j - 1].type = 128;
				Main.tile[i, j].active(true);
				*Main.tile[i, j].frameY = 36;
				*Main.tile[i, j].frameX = (short)b;
				*Main.tile[i, j].type = 128;
				Main.tile[i + 1, j - 2].active(true);
				*Main.tile[i + 1, j - 2].frameY = 0;
				*Main.tile[i + 1, j - 2].frameX = (short)(18 + b);
				*Main.tile[i + 1, j - 2].type = 128;
				Main.tile[i + 1, j - 1].active(true);
				*Main.tile[i + 1, j - 1].frameY = 18;
				*Main.tile[i + 1, j - 1].frameX = (short)(18 + b);
				*Main.tile[i + 1, j - 1].type = 128;
				Main.tile[i + 1, j].active(true);
				*Main.tile[i + 1, j].frameY = 36;
				*Main.tile[i + 1, j].frameX = (short)(18 + b);
				*Main.tile[i + 1, j].type = 128;
			}
		}

		// Token: 0x0600124A RID: 4682 RVA: 0x00449930 File Offset: 0x00447B30
		public unsafe static void PlaceWoman(int i, int j, int dir)
		{
			for (int k = i; k <= i + 1; k++)
			{
				for (int l = j - 2; l <= j; l++)
				{
					if (Main.tile[k, l].active())
					{
						return;
					}
				}
			}
			if (WorldGen.SolidTile2(i, j + 1) && WorldGen.SolidTile2(i + 1, j + 1))
			{
				byte b = 0;
				if (dir == 1)
				{
					b = 36;
				}
				Main.tile[i, j - 2].active(true);
				*Main.tile[i, j - 2].frameY = 0;
				*Main.tile[i, j - 2].frameX = (short)b;
				*Main.tile[i, j - 2].type = 269;
				Main.tile[i, j - 1].active(true);
				*Main.tile[i, j - 1].frameY = 18;
				*Main.tile[i, j - 1].frameX = (short)b;
				*Main.tile[i, j - 1].type = 269;
				Main.tile[i, j].active(true);
				*Main.tile[i, j].frameY = 36;
				*Main.tile[i, j].frameX = (short)b;
				*Main.tile[i, j].type = 269;
				Main.tile[i + 1, j - 2].active(true);
				*Main.tile[i + 1, j - 2].frameY = 0;
				*Main.tile[i + 1, j - 2].frameX = (short)(18 + b);
				*Main.tile[i + 1, j - 2].type = 269;
				Main.tile[i + 1, j - 1].active(true);
				*Main.tile[i + 1, j - 1].frameY = 18;
				*Main.tile[i + 1, j - 1].frameX = (short)(18 + b);
				*Main.tile[i + 1, j - 1].type = 269;
				Main.tile[i + 1, j].active(true);
				*Main.tile[i + 1, j].frameY = 36;
				*Main.tile[i + 1, j].frameX = (short)(18 + b);
				*Main.tile[i + 1, j].type = 269;
			}
		}

		// Token: 0x0600124B RID: 4683 RVA: 0x00449C04 File Offset: 0x00447E04
		public unsafe static void CheckWeaponsRack(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num2 = j - (int)(*Main.tile[i, j].frameY / 18);
			int num3 = (int)(*Main.tile[i, j].frameX);
			int num4 = 0;
			while (num3 >= 5000)
			{
				num3 -= 5000;
				num4++;
			}
			if (num4 != 0)
			{
				num3 = (num4 - 1) * 18;
			}
			num3 %= 54;
			int num5 = i - num3 / 18;
			bool flag = false;
			for (int k = 0; k < 3; k++)
			{
				for (int l = 0; l < 3; l++)
				{
					int num6 = num5 + k;
					int num7 = num2 + l;
					int num8 = (int)(*Main.tile[num6, num7].frameX);
					int num9 = 0;
					while (num8 >= 5000)
					{
						num8 -= 5000;
						num9++;
					}
					if (num9 != 0)
					{
						num8 = (num9 - 1) * 18;
					}
					num8 %= 54;
					if (!Main.tile[num6, num7].active() || *Main.tile[num6, num7].type != 334 || *Main.tile[num6, num7].wall <= 0 || (int)(*Main.tile[num6, num7].frameY) != l * 18 || num8 != k * 18)
					{
						flag = true;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int num10 = TEWeaponsRack.Find(num5, num2);
			if (num10 != -1 && ((TEWeaponsRack)TileEntity.ByID[num10]).item.stack > 0)
			{
				((TEWeaponsRack)TileEntity.ByID[num10]).DropItem();
				if (Main.netMode != 2)
				{
					Main.LocalPlayer.InterruptItemUsageIfOverTile(471);
				}
			}
			WorldGen.destroyObject = true;
			using (new Item.DisableNewItemMethod(!TileLoader.Drop(i, j, (int)(*Main.tile[i, j].type), true)))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
				TEWeaponsRack.Kill(num5, num2);
				for (int m = 0; m < 3; m++)
				{
					for (int n = 0; n < 3; n++)
					{
						int num11 = num5 + m;
						int num12 = num2 + n;
						if (Main.tile[num11, num12].active() && *Main.tile[num11, num12].type == 334)
						{
							WorldGen.KillTile(num11, num12, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600124C RID: 4684 RVA: 0x00449EC8 File Offset: 0x004480C8
		public unsafe static void ToggleGemLock(int i, int j, bool on)
		{
			Tile tileSafely = Framing.GetTileSafely(i, j);
			if (!tileSafely.active() || *tileSafely.type != 440 || (*tileSafely.frameY < 54 && !on))
			{
				return;
			}
			bool flag = false;
			int num = -1;
			if (*tileSafely.frameY >= 54)
			{
				flag = true;
			}
			int num2 = (int)(*Main.tile[i, j].frameX / 54);
			int num3 = (int)(*Main.tile[i, j].frameX % 54 / 18);
			int num4 = (int)(*Main.tile[i, j].frameY % 54 / 18);
			switch (num2)
			{
			case 0:
				num = 1526;
				break;
			case 1:
				num = 1524;
				break;
			case 2:
				num = 1525;
				break;
			case 3:
				num = 1523;
				break;
			case 4:
				num = 1522;
				break;
			case 5:
				num = 1527;
				break;
			case 6:
				num = 3643;
				break;
			}
			for (int k = i - num3; k < i - num3 + 3; k++)
			{
				for (int l = j - num4; l < j - num4 + 3; l++)
				{
					*Main.tile[k, l].frameY = (short)((on ? 54 : 0) + (l - j + num4) * 18);
				}
			}
			if (num != -1 && flag)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num, 1, false, 0, false, false);
			}
			WorldGen.SquareTileFrame(i, j, true);
			NetMessage.SendTileSquare(-1, i - num3, j - num4, 3, 3, TileChangeType.None);
			Wiring.HitSwitch(i - num3, j - num4);
			NetMessage.SendData(59, -1, -1, null, i - num3, (float)(j - num4), 0f, 0f, 0, 0, 0);
		}

		// Token: 0x0600124D RID: 4685 RVA: 0x0044A094 File Offset: 0x00448294
		public unsafe static void CheckMan(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num2 = j - (int)(*Main.tile[i, j].frameY / 18);
			int num3;
			for (num3 = (int)(*Main.tile[i, j].frameX); num3 >= 100; num3 -= 100)
			{
			}
			while (num3 >= 36)
			{
				num3 -= 36;
			}
			int num4 = i - num3 / 18;
			bool flag = false;
			for (int k = 0; k <= 1; k++)
			{
				for (int l = 0; l <= 2; l++)
				{
					int num5 = num4 + k;
					int num6 = num2 + l;
					int num7;
					for (num7 = (int)(*Main.tile[num5, num6].frameX); num7 >= 100; num7 -= 100)
					{
					}
					if (num7 >= 36)
					{
						num7 -= 36;
					}
					if (!Main.tile[num5, num6].active() || *Main.tile[num5, num6].type != 128 || (int)(*Main.tile[num5, num6].frameY) != l * 18 || num7 != k * 18)
					{
						flag = true;
					}
				}
			}
			if (!WorldGen.SolidTileAllowBottomSlope(num4, num2 + 3) || !WorldGen.SolidTileAllowBottomSlope(num4 + 1, num2 + 3))
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			using (new Item.DisableNewItemMethod(!TileLoader.Drop(i, j, (int)(*Main.tile[i, j].type), true)))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
				for (int m = 0; m <= 1; m++)
				{
					for (int n = 0; n <= 2; n++)
					{
						int num8 = num4 + m;
						int num9 = num2 + n;
						if (Main.tile[num8, num9].active() && *Main.tile[num8, num9].type == 128)
						{
							WorldGen.KillTile(num8, num9, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600124E RID: 4686 RVA: 0x0044A2D0 File Offset: 0x004484D0
		public unsafe static void CheckWoman(int i, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num2 = j - (int)(*Main.tile[i, j].frameY / 18);
			int num3;
			for (num3 = (int)(*Main.tile[i, j].frameX); num3 >= 100; num3 -= 100)
			{
			}
			while (num3 >= 36)
			{
				num3 -= 36;
			}
			int num4 = i - num3 / 18;
			bool flag = false;
			for (int k = 0; k <= 1; k++)
			{
				for (int l = 0; l <= 2; l++)
				{
					int num5 = num4 + k;
					int num6 = num2 + l;
					int num7;
					for (num7 = (int)(*Main.tile[num5, num6].frameX); num7 >= 100; num7 -= 100)
					{
					}
					if (num7 >= 36)
					{
						num7 -= 36;
					}
					if (!Main.tile[num5, num6].active() || *Main.tile[num5, num6].type != 269 || (int)(*Main.tile[num5, num6].frameY) != l * 18 || num7 != k * 18)
					{
						flag = true;
					}
				}
			}
			if (!WorldGen.SolidTileAllowBottomSlope(num4, num2 + 3) || !WorldGen.SolidTileAllowBottomSlope(num4 + 1, num2 + 3))
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			using (new Item.DisableNewItemMethod(!TileLoader.Drop(i, j, (int)(*Main.tile[i, j].type), true)))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
				for (int m = 0; m <= 1; m++)
				{
					for (int n = 0; n <= 2; n++)
					{
						int num8 = num4 + m;
						int num9 = num2 + n;
						if (Main.tile[num8, num9].active() && *Main.tile[num8, num9].type == 269)
						{
							WorldGen.KillTile(num8, num9, false, false, false);
						}
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600124F RID: 4687 RVA: 0x0044A50C File Offset: 0x0044870C
		public unsafe static void Place1x2(int x, int y, ushort type, int style)
		{
			short frameX = 0;
			if (TileID.Sets.TreeSapling[(int)type])
			{
				frameX = (short)(WorldGen.genRand.Next(3) * 18);
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (WorldGen.SolidTile2(x, y + 1) & !Main.tile[x, y - 1].active())
			{
				short num = (short)(style * 40);
				Main.tile[x, y - 1].active(true);
				*Main.tile[x, y - 1].frameY = num;
				*Main.tile[x, y - 1].frameX = frameX;
				*Main.tile[x, y - 1].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = num + 18;
				*Main.tile[x, y].frameX = frameX;
				*Main.tile[x, y].type = type;
			}
		}

		// Token: 0x06001250 RID: 4688 RVA: 0x0044A678 File Offset: 0x00448878
		public unsafe static void Place1x2Top(int x, int y, ushort type, int style)
		{
			short frameX = 0;
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int)(*Main.tile[x, y - 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, y - 1].type)] && !Main.tile[x, y + 1].active())
			{
				short num = (short)(style * 36);
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = num;
				*Main.tile[x, y].frameX = frameX;
				*Main.tile[x, y].type = type;
				Main.tile[x, y + 1].active(true);
				*Main.tile[x, y + 1].frameY = num + 18;
				*Main.tile[x, y + 1].frameX = frameX;
				*Main.tile[x, y + 1].type = type;
			}
		}

		// Token: 0x06001251 RID: 4689 RVA: 0x0044A81C File Offset: 0x00448A1C
		public unsafe static void Check1x2Top(int x, int j, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = true;
			int num2 = (int)(*Main.tile[x, j].frameY / 18);
			int num3 = 0;
			while (num2 >= 2)
			{
				num2 -= 2;
				num3++;
			}
			int num4 = j - num2;
			num2 = num3 * 36;
			if (Main.tile[x, num4] == null)
			{
				Main.tile[x, num4] = default(Tile);
			}
			if (Main.tile[x, num4 + 1] == null)
			{
				Main.tile[x, num4 + 1] = default(Tile);
			}
			if (Main.tile[x, num4] == null)
			{
				Main.tile[x, num4] = default(Tile);
			}
			if ((int)(*Main.tile[x, num4].frameY) == num2 && (int)(*Main.tile[x, num4 + 1].frameY) == num2 + 18 && *Main.tile[x, num4].type == type && *Main.tile[x, num4 + 1].type == type)
			{
				flag = false;
			}
			if (Main.tile[x, num4 - 1] == null)
			{
				Main.tile[x, num4 - 1] = default(Tile);
			}
			bool flag2 = false;
			if (type <= 271)
			{
				if (type != 42 && type - 270 > 1)
				{
					goto IL_193;
				}
			}
			else if (type != 572 && type != 581 && type != 660)
			{
				goto IL_193;
			}
			flag2 = true;
			IL_193:
			bool flag3 = Main.tile[x, num4 - 1].active() && (TileID.Sets.Platforms[(int)(*Main.tile[x, num4 - 1].type)] || *Main.tile[x, num4 - 1].type == 380);
			if ((!flag2 || !flag3) && (!Main.tile[x, num4 - 1].nactive() || !Main.tileSolid[(int)(*Main.tile[x, num4 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[x, num4 - 1].type)]))
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, j, (int)type, true);
			if (*Main.tile[x, num4].type == type)
			{
				WorldGen.KillTile(x, num4, false, false, false);
			}
			if (*Main.tile[x, num4 + 1].type == type)
			{
				WorldGen.KillTile(x, num4 + 1, false, false, false);
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type <= 271)
				{
					if (type != 42)
					{
						if (type != 270)
						{
							if (type == 271)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, 2005, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, 1993, 1, false, 0, false, false);
						}
					}
					else
					{
						int type2 = 0;
						if (num3 == 0)
						{
							type2 = 136;
						}
						else if (num3 == 7)
						{
							type2 = 1431;
						}
						else if (num3 == 8)
						{
							type2 = 1808;
						}
						else if (num3 == 9)
						{
							type2 = 1859;
						}
						else if (num3 < 10)
						{
							type2 = 1389 + num3;
						}
						else
						{
							switch (num3)
							{
							case 10:
								type2 = 2032;
								break;
							case 11:
								type2 = 2033;
								break;
							case 12:
								type2 = 2034;
								break;
							case 13:
								type2 = 2035;
								break;
							case 14:
								type2 = 2036;
								break;
							case 15:
								type2 = 2037;
								break;
							case 16:
								type2 = 2038;
								break;
							case 17:
								type2 = 2039;
								break;
							case 18:
								type2 = 2040;
								break;
							case 19:
								type2 = 2041;
								break;
							case 20:
								type2 = 2042;
								break;
							case 21:
								type2 = 2043;
								break;
							case 22:
							case 23:
							case 24:
							case 25:
								type2 = 2145 + num3 - 22;
								break;
							default:
								switch (num3)
								{
								case 26:
									type2 = 2226;
									break;
								case 27:
									type2 = 2530;
									break;
								case 28:
									type2 = 2546;
									break;
								case 29:
									type2 = 2564;
									break;
								case 30:
									type2 = 2579;
									break;
								case 31:
									type2 = 2641;
									break;
								case 32:
									type2 = 2642;
									break;
								case 33:
									type2 = 2820;
									break;
								case 34:
									type2 = 3138;
									break;
								case 35:
									type2 = 3140;
									break;
								case 36:
									type2 = 3139;
									break;
								case 37:
									type2 = 3891;
									break;
								case 38:
									type2 = 3943;
									break;
								case 39:
									type2 = 3970;
									break;
								case 40:
									type2 = 4157;
									break;
								case 41:
									type2 = 4178;
									break;
								case 42:
									type2 = 4199;
									break;
								case 43:
									type2 = 4220;
									break;
								case 44:
									type2 = 4309;
									break;
								case 45:
									type2 = 4578;
									break;
								case 46:
									type2 = 5160;
									break;
								case 47:
									type2 = 5181;
									break;
								case 48:
									type2 = 5202;
									break;
								}
								break;
							}
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, type2, 1, false, 0, false, false);
					}
				}
				else if (type != 572)
				{
					if (type != 581)
					{
						if (type == 660)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, 5351, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, 4848, 1, false, 0, false, false);
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num4), x * 16, num4 * 16, 32, 32, 4695 + num3, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
			}
		}

		/// <summary>
		/// Places <see cref="F:Terraria.ID.TileID.SmallPiles" /> tiles. This tile is special and doesn't follow the normal style rules and won't place with PlaceTile. i and j are the coordinates. X and Y are the count and row indexes of the specific tile in the texture file. Indexes count from left to right and start at 0. So for example the Sapphire Stash would have Y=1 (second row) and X=21 (22nd 2x1 tile).
		/// </summary>
		/// <param name="i"></param>
		/// <param name="j"></param>
		/// <param name="X"></param>
		/// <param name="Y"></param>
		/// <param name="type"></param>
		/// <returns></returns>
		// Token: 0x06001252 RID: 4690 RVA: 0x0044AEDC File Offset: 0x004490DC
		public unsafe static bool PlaceSmallPile(int i, int j, int X, int Y, ushort type = 185)
		{
			short frameY = (short)(Y * 18);
			short frameX = (short)(X * 18);
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			if (Main.tile[i + 1, j] == null)
			{
				Main.tile[i + 1, j] = default(Tile);
			}
			if (Main.tile[i, j + 1] == null)
			{
				Main.tile[i, j + 1] = default(Tile);
			}
			if (Main.tile[i + 1, j + 1] == null)
			{
				Main.tile[i + 1, j + 1] = default(Tile);
			}
			if (Main.tile[i, j].lava())
			{
				return false;
			}
			if (Y == 1)
			{
				frameX = (short)(X * 36);
				bool flag = false;
				if (WorldGen.SolidTile2(i, j + 1) && WorldGen.SolidTile2(i + 1, j + 1) && !Main.tile[i, j].active() && !Main.tile[i + 1, j].active())
				{
					flag = true;
				}
				if (flag)
				{
					Main.tile[i, j].active(true);
					*Main.tile[i, j].frameY = frameY;
					*Main.tile[i, j].frameX = frameX;
					*Main.tile[i, j].type = type;
					Main.tile[i + 1, j].active(true);
					*Main.tile[i + 1, j].frameY = frameY;
					*Main.tile[i + 1, j].frameX = frameX + 18;
					*Main.tile[i + 1, j].type = type;
					return true;
				}
			}
			else if (WorldGen.SolidTile2(i, j + 1) && !Main.tile[i, j].active())
			{
				Main.tile[i, j].active(true);
				*Main.tile[i, j].frameY = frameY;
				*Main.tile[i, j].frameX = frameX;
				*Main.tile[i, j].type = type;
				return true;
			}
			return false;
		}

		// Token: 0x06001253 RID: 4691 RVA: 0x0044B158 File Offset: 0x00449358
		public unsafe static void CheckPile(int i, int y)
		{
			if (Main.tile[i, y] == null)
			{
				Main.tile[i, y] = default(Tile);
			}
			if (Main.tile[i + 1, y] == null)
			{
				Main.tile[i + 1, y] = default(Tile);
			}
			if (Main.tile[i, y + 1] == null)
			{
				Main.tile[i, y + 1] = default(Tile);
			}
			if (Main.tile[i + 1, y + 1] == null)
			{
				Main.tile[i + 1, y + 1] = default(Tile);
			}
			Tile tile = Main.tile[i, y];
			if (*tile.frameY == 18 || *tile.type == 649)
			{
				WorldGen.Check2x1(i, y, *tile.type);
				return;
			}
			if (!WorldGen.SolidTileAllowBottomSlope(i, y + 1))
			{
				WorldGen.KillTile(i, y, false, false, false);
				return;
			}
			if (*tile.type != 185)
			{
				return;
			}
			int num = (int)(*tile.frameX / 18);
			Tile tile2 = Main.tile[i, y + 1];
			if (tile2 == null || !tile2.active() || *tile2.type < 0)
			{
				return;
			}
			ushort type = *tile2.type;
			switch (num)
			{
			case 36:
			case 37:
			case 38:
			case 39:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
				if (!TileID.Sets.Snow[(int)type] && !TileID.Sets.Conversion.Ice[(int)type] && type != 162 && type != 224)
				{
					WorldGen.KillTile(i, y, false, false, false);
					return;
				}
				break;
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
				break;
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 73:
			case 74:
			case 75:
			case 76:
				if (!TileID.Sets.Conversion.Sand[(int)type] && !TileID.Sets.Conversion.HardenedSand[(int)type] && !TileID.Sets.Conversion.Sandstone[(int)type])
				{
					WorldGen.KillTile(i, y, false, false, false);
				}
				break;
			default:
				return;
			}
		}

		// Token: 0x06001254 RID: 4692 RVA: 0x0044B3C4 File Offset: 0x004495C4
		public unsafe static void Check2x1(int i, int y, ushort type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = true;
			if (Main.tile[i, y] == null)
			{
				Main.tile[i, y] = default(Tile);
			}
			int num2 = (int)(*Main.tile[i, y].frameX / 18);
			int num3 = num2 >> 1;
			int num4 = (int)(*Main.tile[i, y].frameY / 18);
			num2 %= 2;
			int num5 = i - num2;
			if (Main.tile[num5, y] == null)
			{
				Main.tile[num5, y] = default(Tile);
			}
			if (Main.tile[num5 + 1, y] == null)
			{
				Main.tile[num5 + 1, y] = default(Tile);
			}
			if (Main.tile[num5, y + 1] == null)
			{
				Main.tile[num5, y + 1] = default(Tile);
			}
			if (Main.tile[num5 + 1, y + 1] == null)
			{
				Main.tile[num5 + 1, y + 1] = default(Tile);
			}
			if (*Main.tile[num5 + 1, y].frameX == *Main.tile[num5, y].frameX + 18 && *Main.tile[num5, y].type == type && *Main.tile[num5 + 1, y].type == type)
			{
				flag = false;
			}
			if (type == 29 || type == 103 || type == 462)
			{
				if (!Main.tile[num5, y + 1].active() || !Main.tileTable[(int)(*Main.tile[num5, y + 1].type)] || Main.tile[num5, y + 1].halfBrick() || Main.tile[num5, y + 1].topSlope())
				{
					flag = true;
				}
				if (!Main.tile[num5 + 1, y + 1].active() || !Main.tileTable[(int)(*Main.tile[num5 + 1, y + 1].type)] || Main.tile[num5 + 1, y + 1].halfBrick() || Main.tile[num5 + 1, y + 1].topSlope())
				{
					flag = true;
				}
			}
			else
			{
				if (!WorldGen.SolidTileAllowBottomSlope(num5, y + 1))
				{
					flag = true;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(num5 + 1, y + 1))
				{
					flag = true;
				}
			}
			if (type == 185)
			{
				if (*Main.tile[num5, y].frameX >= 1368 && *Main.tile[num5, y].frameX <= 1458 && *Main.tile[num5, y + 1].type != 2 && *Main.tile[num5 + 1, y + 1].type != 2 && *Main.tile[num5, y + 1].type != 477 && *Main.tile[num5 + 1, y + 1].type != 477 && *Main.tile[num5, y + 1].type != 492 && *Main.tile[num5 + 1, y + 1].type != 492)
				{
					ref short frameX2 = ref Main.tile[num5, y].frameX;
					frameX2 -= 1368;
					ref short frameX3 = ref Main.tile[num5 + 1, y].frameX;
					frameX3 -= 1368;
				}
				Tile tile = Main.tile[num5, y];
				int num6 = (int)(*tile.frameX / 36);
				num6 += (int)((*tile.frameY / 18 - 1) * 52);
				for (int j = num5; j < num5 + 2; j++)
				{
					Tile tile2 = Main.tile[j, y + 1];
					if (!(tile2 == null) && tile2.active() && *tile2.type >= 0)
					{
						ushort type2 = *tile2.type;
						if (num6 - 25 > 5)
						{
							if (num6 - 41 <= 5 || num6 - 62 <= 2)
							{
								if (!TileID.Sets.Conversion.Sand[(int)type2] && !TileID.Sets.Conversion.HardenedSand[(int)type2] && !TileID.Sets.Conversion.Sandstone[(int)type2])
								{
									flag = true;
								}
							}
						}
						else if (!TileID.Sets.Snow[(int)type2] && !TileID.Sets.Conversion.Ice[(int)type2] && type2 != 162 && type2 != 224)
						{
							flag = true;
						}
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int frameX = (int)(*Main.tile[num5, y].frameX);
			if (!Main.tile[num5, y].active())
			{
				frameX = (int)(*Main.tile[num5 + 1, y].frameX);
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, y, (int)type, true);
			if (*Main.tile[num5, y].type == type)
			{
				WorldGen.KillTile(num5, y, false, false, false);
			}
			if (*Main.tile[num5 + 1, y].type == type)
			{
				WorldGen.KillTile(num5 + 1, y, false, false, false);
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 16)
				{
					if (num3 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 716, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 35, 1, false, 0, false, false);
					}
				}
				if (type == 18)
				{
					int type3 = 36;
					if (num3 >= 1 && num3 <= 3)
					{
						type3 = 634 + num3;
					}
					else if (num3 >= 4 && num3 <= 8)
					{
						type3 = 807 + num3;
					}
					else
					{
						switch (num3)
						{
						case 9:
							type3 = 916;
							break;
						case 10:
							type3 = 1145;
							break;
						case 11:
							type3 = 1398;
							break;
						case 12:
							type3 = 1401;
							break;
						case 13:
							type3 = 1404;
							break;
						case 14:
							type3 = 1461;
							break;
						case 15:
							type3 = 1511;
							break;
						case 16:
							type3 = 1795;
							break;
						case 17:
							type3 = 1817;
							break;
						case 18:
							type3 = 2229;
							break;
						case 19:
							type3 = 2251;
							break;
						case 20:
							type3 = 2252;
							break;
						case 21:
							type3 = 2253;
							break;
						case 22:
							type3 = 2534;
							break;
						case 23:
							type3 = 673;
							break;
						case 24:
							type3 = 2631;
							break;
						case 25:
							type3 = 2632;
							break;
						case 26:
							type3 = 2633;
							break;
						case 27:
							type3 = 2826;
							break;
						case 28:
							type3 = 3156;
							break;
						case 29:
							type3 = 3158;
							break;
						case 30:
							type3 = 3157;
							break;
						case 31:
							type3 = 3909;
							break;
						case 32:
							type3 = 3910;
							break;
						case 33:
							type3 = 3949;
							break;
						case 34:
							type3 = 3975;
							break;
						case 35:
							type3 = 4163;
							break;
						case 36:
							type3 = 4184;
							break;
						case 37:
							type3 = 4205;
							break;
						case 38:
							type3 = 4226;
							break;
						case 39:
							type3 = 4315;
							break;
						case 40:
							type3 = 4584;
							break;
						case 41:
							type3 = 5166;
							break;
						case 42:
							type3 = 5187;
							break;
						case 43:
							type3 = 5208;
							break;
						}
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, type3, 1, false, 0, false, false);
				}
				if (type == 185)
				{
					if (frameX >= 576 && frameX <= 610)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						if (WorldGen.genRand.Next(3) != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(4) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(4) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
					}
					if (frameX >= 612 && frameX <= 646)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
						}
					}
					if (frameX >= 648 && frameX <= 682)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(1, 6), false, 0, false, false);
						if (WorldGen.genRand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(2, 6), false, 0, false, false);
						}
						if (WorldGen.genRand.Next(3) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(3, 6), false, 0, false, false);
						}
					}
					if (frameX >= 684 && frameX <= 718)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 181, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 720 && frameX <= 754)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 180, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 756 && frameX <= 790)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 177, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 792 && frameX <= 826)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 179, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 828 && frameX <= 862)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 178, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
					if (frameX >= 864 && frameX <= 898)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 182, WorldGen.genRand.Next(1, 4), false, 0, false, false);
					}
				}
				if (type == 462)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 3795, 1, false, 0, false, false);
				}
				if (type == 29)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 87, 1, false, 0, false, false);
					SoundEngine.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
				}
				if (type != 103)
				{
					if (type != 134)
					{
						if (type == 649)
						{
							num3 += num4 * 53;
							int num7 = 0;
							if (num3 < 6)
							{
								num7 = 3;
							}
							else if (num3 < 16)
							{
								num7 = 154;
							}
							else if (num3 < 17)
							{
								num7 = 71;
							}
							else if (num3 < 18)
							{
								num7 = 72;
							}
							else if (num3 < 19)
							{
								num7 = 73;
							}
							else if (num3 < 20)
							{
								num7 = 181;
							}
							else if (num3 < 21)
							{
								num7 = 180;
							}
							else if (num3 < 22)
							{
								num7 = 177;
							}
							else if (num3 < 23)
							{
								num7 = 179;
							}
							else if (num3 < 24)
							{
								num7 = 178;
							}
							else if (num3 < 25)
							{
								num7 = 182;
							}
							else if (num3 < 31)
							{
								num7 = 593;
							}
							else if (num3 < 34)
							{
								num7 = 9;
							}
							else if (num3 < 38)
							{
								num7 = 150;
							}
							else if (num3 < 41)
							{
								num7 = 3;
							}
							else if (num3 < 47)
							{
								num7 = 3271;
							}
							else if (num3 < 53)
							{
								num7 = 3086;
							}
							else if (num3 < 59)
							{
								num7 = 3081;
							}
							else if (num3 < 62)
							{
								num7 = 62;
							}
							else if (num3 < 65)
							{
								num7 = 169;
							}
							if (num7 != 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, num7, 1, false, 0, false, false);
							}
						}
					}
					else if (num3 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 1220, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, 525, 1, false, 0, false, false);
					}
				}
				else
				{
					int type4 = 356;
					if (num3 == 1)
					{
						type4 = 2235;
					}
					if (num3 == 2)
					{
						type4 = 2242;
					}
					if (num3 == 3)
					{
						type4 = 2243;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num5, y), num5 * 16, y * 16, 32, 32, type4, 1, false, 0, false, false);
					SoundEngine.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
				}
				WorldGen.destroyObject = false;
				WorldGen.SquareTileFrame(num5, y, true);
				WorldGen.SquareTileFrame(num5 + 1, y, true);
			}
		}

		// Token: 0x06001255 RID: 4693 RVA: 0x0044C498 File Offset: 0x0044A698
		public unsafe static void Place2x1(int x, int y, ushort type, int style = 0)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x + 1, y] == null)
			{
				Main.tile[x + 1, y] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			if (Main.tile[x + 1, y + 1] == null)
			{
				Main.tile[x + 1, y + 1] = default(Tile);
			}
			bool flag = false;
			if (type != 29 && type != 103 && WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1) && !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
			{
				flag = true;
			}
			else if ((type == 29 || type == 103) && Main.tile[x, y + 1].active() && Main.tile[x + 1, y + 1].active() && Main.tileTable[(int)(*Main.tile[x, y + 1].type)] && Main.tileTable[(int)(*Main.tile[x + 1, y + 1].type)] && !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
			{
				flag = true;
			}
			if (flag)
			{
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = 0;
				*Main.tile[x, y].frameX = (short)(36 * style);
				*Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				*Main.tile[x + 1, y].frameY = 0;
				*Main.tile[x + 1, y].frameX = (short)(36 * style + 18);
				*Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06001256 RID: 4694 RVA: 0x0044C72C File Offset: 0x0044A92C
		public unsafe static void Check4x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (type != 487) ? (i + (int)(*Main.tile[i, j].frameX / 18 * -1)) : (i + (int)(*Main.tile[i, j].frameX / 18 % 4 * -1));
			if ((type == 79 || type == 90) && *Main.tile[i, j].frameX >= 72)
			{
				num += 4;
			}
			int num2 = (int)(*Main.tile[i, j].frameY / 18);
			int num3 = 0;
			while (num2 > 1)
			{
				num2 -= 2;
				num3++;
			}
			num2 = j - num2;
			if (type == 487)
			{
				num3 = (int)(*Main.tile[i, j].frameX / 72);
			}
			for (int k = num; k < num + 4; k++)
			{
				for (int l = num2; l < num2 + 2; l++)
				{
					int num4 = (k - num) * 18;
					int num5 = (l - num2) * 18;
					if ((type == 79 || type == 90) && *Main.tile[i, j].frameX >= 72)
					{
						num4 = (k - num + 4) * 18;
					}
					if (type == 487)
					{
						num4 += num3 * 72;
					}
					else
					{
						num5 += num3 * 36;
					}
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != num4 || (int)(*Main.tile[k, l].frameY) != num5)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num2 + 2] == null)
				{
					Main.tile[k, num2 + 2] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num2 + 2) && (!Main.tile[k, num2 + 2].active() || !TileID.Sets.Platforms[(int)(*Main.tile[k, num2 + 2].type)]))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 4; m++)
			{
				for (int n = num2; n < num2 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 79)
				{
					int num6;
					if (num3 != 0)
					{
						if (num3 != 4)
						{
							if (num3 - 9 > 3)
							{
								if (num3 >= 5 && num3 <= 8)
								{
									num6 = 1465 + num3;
								}
								else if (num3 >= 13 && num3 <= 18)
								{
									num6 = 2066 + num3 - 13;
								}
								else
								{
									switch (num3)
									{
									case 19:
										num6 = 2139;
										break;
									case 20:
										num6 = 2140;
										break;
									case 21:
										num6 = 2231;
										break;
									case 22:
										num6 = 2520;
										break;
									case 23:
										num6 = 2538;
										break;
									case 24:
										num6 = 2553;
										break;
									case 25:
										num6 = 2568;
										break;
									case 26:
										num6 = 2669;
										break;
									case 27:
										num6 = 2811;
										break;
									case 28:
										num6 = 3162;
										break;
									case 29:
										num6 = 3164;
										break;
									case 30:
										num6 = 3163;
										break;
									case 31:
										num6 = 3897;
										break;
									case 32:
										num6 = 3932;
										break;
									case 33:
										num6 = 3959;
										break;
									case 34:
										num6 = 4146;
										break;
									case 35:
										num6 = 4167;
										break;
									case 36:
										num6 = 4188;
										break;
									case 37:
										num6 = 4209;
										break;
									case 38:
										num6 = 4299;
										break;
									case 39:
										num6 = 4567;
										break;
									case 40:
										num6 = 5149;
										break;
									case 41:
										num6 = 5170;
										break;
									case 42:
										num6 = 5191;
										break;
									default:
										num6 = num3 + 643;
										break;
									}
								}
							}
							else
							{
								num6 = 1710 + num3;
							}
						}
						else
						{
							num6 = 920;
						}
					}
					else
					{
						num6 = 224;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num6, 1, false, 0, false, false);
				}
				if (type == 487)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_PicnicTables(num3), 1, false, 0, false, false);
				}
				if (type == 90)
				{
					int type2 = 0;
					if (num3 != 0)
					{
						if (num3 - 1 > 9)
						{
							if (num3 >= 11 && num3 <= 15)
							{
								type2 = 2124 + num3 - 11;
							}
							else
							{
								switch (num3)
								{
								case 16:
									type2 = 2232;
									break;
								case 17:
									type2 = 2519;
									break;
								case 18:
									type2 = 2537;
									break;
								case 19:
									type2 = 2552;
									break;
								case 20:
									type2 = 2567;
									break;
								case 21:
									type2 = 2658;
									break;
								case 22:
									type2 = 2659;
									break;
								case 23:
									type2 = 2660;
									break;
								case 24:
									type2 = 2661;
									break;
								case 25:
									type2 = 2662;
									break;
								case 26:
									type2 = 2663;
									break;
								case 27:
									type2 = 2810;
									break;
								case 28:
									type2 = 3159;
									break;
								case 29:
									type2 = 3161;
									break;
								case 30:
									type2 = 3160;
									break;
								case 31:
									type2 = 3895;
									break;
								case 32:
									type2 = 3931;
									break;
								case 33:
									type2 = 3958;
									break;
								case 34:
									type2 = 4145;
									break;
								case 35:
									type2 = 4166;
									break;
								case 36:
									type2 = 4187;
									break;
								case 37:
									type2 = 4208;
									break;
								case 38:
									type2 = 4298;
									break;
								case 39:
									type2 = 4566;
									break;
								case 40:
									type2 = 5148;
									break;
								case 41:
									type2 = 5169;
									break;
								case 42:
									type2 = 5190;
									break;
								}
							}
						}
						else
						{
							type2 = 2072 + num3 - 1;
						}
					}
					else
					{
						type2 = 336;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num7 = num - 1; num7 < num + 4; num7++)
				{
					for (int num8 = num2 - 1; num8 < num2 + 4; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x06001257 RID: 4695 RVA: 0x0044CEB4 File Offset: 0x0044B0B4
		private unsafe static bool OasisPlantWaterCheck(int x, int y, bool boost = false)
		{
			int num = 45;
			int num2 = 20;
			if (boost)
			{
				num += 4;
				num2 += 3;
			}
			int num3 = 20;
			int num4 = 0;
			for (int i = x - num; i <= x + num; i++)
			{
				if (x > WorldGen.beachDistance && x < Main.maxTilesX - WorldGen.beachDistance)
				{
					for (int j = y - num2; j <= y + num2; j++)
					{
						if (WorldGen.InWorld(i, j, 0) && !WorldGen.SolidTile(i, j, false))
						{
							num4 += (int)(*Main.tile[i, j].liquid);
						}
					}
				}
			}
			return num4 / 255 >= num3;
		}

		// Token: 0x06001258 RID: 4696 RVA: 0x0044CF58 File Offset: 0x0044B158
		public unsafe static void PlaceOasisPlant(int X, int Y, ushort type = 530)
		{
			int num = WorldGen.genRand.Next(9);
			int num2 = 0;
			if (X < WorldGen.beachDistance || X > Main.maxTilesX - WorldGen.beachDistance || Y < 5 || Y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = X - 1; i < X + 2; i++)
			{
				for (int j = Y - 1; j < Y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active() && *Main.tile[i, j].type != 529)
					{
						flag = false;
					}
					if (*Main.tile[i, j].liquid > 0)
					{
						flag = false;
					}
				}
				if (Main.tile[i, Y + 1] == null)
				{
					Main.tile[i, Y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile(i, Y + 1, false) || !TileID.Sets.Conversion.Sand[(int)(*Main.tile[i, Y + 1].type)])
				{
					flag = false;
				}
			}
			if (flag && WorldGen.OasisPlantWaterCheck(X, Y, false))
			{
				short num3 = (short)(54 * num);
				short num4 = (short)(36 * num2);
				Main.tile[X - 1, Y - 1].active(true);
				*Main.tile[X - 1, Y - 1].frameY = num4;
				*Main.tile[X - 1, Y - 1].frameX = num3;
				*Main.tile[X - 1, Y - 1].type = type;
				Main.tile[X, Y - 1].active(true);
				*Main.tile[X, Y - 1].frameY = num4;
				*Main.tile[X, Y - 1].frameX = num3 + 18;
				*Main.tile[X, Y - 1].type = type;
				Main.tile[X + 1, Y - 1].active(true);
				*Main.tile[X + 1, Y - 1].frameY = num4;
				*Main.tile[X + 1, Y - 1].frameX = num3 + 36;
				*Main.tile[X + 1, Y - 1].type = type;
				Main.tile[X - 1, Y].active(true);
				*Main.tile[X - 1, Y].frameY = num4 + 18;
				*Main.tile[X - 1, Y].frameX = num3;
				*Main.tile[X - 1, Y].type = type;
				Main.tile[X, Y].active(true);
				*Main.tile[X, Y].frameY = num4 + 18;
				*Main.tile[X, Y].frameX = num3 + 18;
				*Main.tile[X, Y].type = type;
				Main.tile[X + 1, Y].active(true);
				*Main.tile[X + 1, Y].frameY = num4 + 18;
				*Main.tile[X + 1, Y].frameX = num3 + 36;
				*Main.tile[X + 1, Y].type = type;
			}
		}

		// Token: 0x06001259 RID: 4697 RVA: 0x0044D34C File Offset: 0x0044B54C
		public unsafe static void CheckOasisPlant(int i, int j, int type = 530)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tileSafely = Framing.GetTileSafely(i, j);
			int num2 = (int)(*tileSafely.frameY % 36);
			int num3 = j + num2 / 18 * -1;
			int num4 = (int)(*tileSafely.frameX / 18);
			int num5 = 0;
			short num9 = *Framing.GetTileSafely(num4, num3).frameY / 36;
			while (num4 > 2)
			{
				num4 -= 3;
				num5++;
			}
			num4 = i - num4;
			int num6 = num5 * 54;
			for (int k = num4; k < num4 + 3; k++)
			{
				for (int l = num3; l < num3 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num4) * 18 + num6 || (int)(*Main.tile[k, l].frameY) != (l - num3) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num3 + 2] == null)
				{
					Main.tile[k, num3 + 2] = default(Tile);
				}
				if (!WorldGen.SolidTile(k, num3 + 2, false) || !TileID.Sets.Conversion.Sand[(int)(*Main.tile[k, num3 + 2].type)])
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			ref short frameX = ref Main.tile[i, j].frameX;
			WorldGen.destroyObject = true;
			for (int m = num4; m < num4 + 3; m++)
			{
				for (int n = num3; n < num3 + 2; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = default(Tile);
					}
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			WorldGen.destroyObject = false;
			for (int num7 = num4 - 1; num7 < num4 + 4; num7++)
			{
				for (int num8 = num3 - 1; num8 < num3 + 3; num8++)
				{
					WorldGen.TileFrame(num7, num8, false, false);
				}
			}
		}

		// Token: 0x0600125A RID: 4698 RVA: 0x0044D5FC File Offset: 0x0044B7FC
		public static void GetCactusType(int tileX, int tileY, int frameX, int frameY, out int type)
		{
			bool flag;
			bool flag2;
			bool flag3;
			WorldGen.GetCactusType(tileX, tileY, frameX, frameY, out flag, out flag2, out flag3, out type);
		}

		// Token: 0x0600125B RID: 4699 RVA: 0x0044D61C File Offset: 0x0044B81C
		public static void GetCactusType(int tileX, int tileY, int frameX, int frameY, out bool evil, out bool good, out bool crimson)
		{
			int num;
			WorldGen.GetCactusType(tileX, tileY, frameX, frameY, out evil, out good, out crimson, out num);
		}

		// Token: 0x0600125C RID: 4700 RVA: 0x0044D63C File Offset: 0x0044B83C
		public unsafe static void GetCactusType(int tileX, int tileY, int frameX, int frameY, out bool evil, out bool good, out bool crimson, out int type)
		{
			type = 0;
			evil = false;
			good = false;
			crimson = false;
			int num = tileX;
			if (frameX == 36)
			{
				num--;
			}
			if (frameX == 54)
			{
				num++;
			}
			if (frameX == 108)
			{
				num = ((frameY != 18) ? (num + 1) : (num - 1));
			}
			int num2 = tileY;
			bool flag = false;
			Tile tile = Main.tile[num, num2];
			if (tile == null)
			{
				return;
			}
			if (*tile.type == 80 && tile.active())
			{
				flag = true;
			}
			while (tile != null && (!tile.active() || !Main.tileSolid[(int)(*tile.type)] || !flag))
			{
				if (*tile.type == 80 && tile.active())
				{
					flag = true;
				}
				num2++;
				if (num2 > tileY + 20)
				{
					break;
				}
				tile = Main.tile[num, num2];
			}
			type = (int)(*tile.type);
			if (*tile.type == 112)
			{
				evil = true;
			}
			if (*tile.type == 116)
			{
				good = true;
			}
			if (*tile.type == 234)
			{
				crimson = true;
			}
		}

		// Token: 0x0600125D RID: 4701 RVA: 0x0044D748 File Offset: 0x0044B948
		public unsafe static void GetBiomeInfluence(int startX, int endX, int startY, int endY, out int corruptCount, out int crimsonCount, out int hallowedCount)
		{
			corruptCount = 0;
			crimsonCount = 0;
			hallowedCount = 0;
			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null)
					{
						if (TileID.Sets.Corrupt[(int)(*tile.type)])
						{
							corruptCount++;
						}
						if (TileID.Sets.Crimson[(int)(*tile.type)])
						{
							crimsonCount++;
						}
						if (TileID.Sets.Hallow[(int)(*tile.type)])
						{
							hallowedCount++;
						}
					}
				}
			}
		}

		// Token: 0x0600125E RID: 4702 RVA: 0x0044D7D8 File Offset: 0x0044B9D8
		public unsafe static void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
		{
			if (styleY > 0 || type == 236 || type == 238)
			{
				int num = Y2;
				if (type == 95 || type == 126)
				{
					num++;
				}
				if (X2 < 5 || X2 > Main.maxTilesX - 5 || num < 5 || num > Main.maxTilesY - 5)
				{
					return;
				}
				bool flag = true;
				for (int i = X2 - 1; i < X2 + 1; i++)
				{
					for (int j = num - 1; j < num + 1; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = default(Tile);
						}
						Tile tile = Main.tile[i, j];
						if (tile.active() && *tile.type != 61 && *tile.type != 62 && *tile.type != 655 && *tile.type != 69 && *tile.type != 74 && (type != 236 || *tile.type != 233) && (type != 238 || *tile.type != 233) && (*tile.type != 185 || *tile.frameY != 0))
						{
							flag = false;
						}
						if (type == 98 && *tile.liquid > 0)
						{
							flag = false;
						}
					}
					if (Main.tile[i, num + 1] == null)
					{
						Main.tile[i, num + 1] = default(Tile);
					}
					if (!WorldGen.SolidTile(i, num + 1, false) || *Main.tile[i, num + 1].type != 60)
					{
						flag = false;
					}
				}
				if (!flag)
				{
					return;
				}
				for (int k = X2 - 1; k < X2 + 1; k++)
				{
					for (int l = num - 1; l < num + 1; l++)
					{
						if (Main.tile[k, l] != null && Main.tile[k, l].active())
						{
							WorldGen.KillTile(k, l, false, false, true);
						}
					}
				}
				short num2 = 36;
				if (type == 236 || type == 238)
				{
					num2 = 0;
				}
				short num3 = (short)(36 * styleX);
				Main.tile[X2 - 1, num - 1].active(true);
				*Main.tile[X2 - 1, num - 1].frameY = num2;
				*Main.tile[X2 - 1, num - 1].frameX = num3;
				*Main.tile[X2 - 1, num - 1].type = type;
				Main.tile[X2, num - 1].active(true);
				*Main.tile[X2, num - 1].frameY = num2;
				*Main.tile[X2, num - 1].frameX = 18 + num3;
				*Main.tile[X2, num - 1].type = type;
				Main.tile[X2 - 1, num].active(true);
				*Main.tile[X2 - 1, num].frameY = num2 + 18;
				*Main.tile[X2 - 1, num].frameX = num3;
				*Main.tile[X2 - 1, num].type = type;
				Main.tile[X2, num].active(true);
				*Main.tile[X2, num].frameY = num2 + 18;
				*Main.tile[X2, num].frameX = 18 + num3;
				*Main.tile[X2, num].type = type;
				return;
			}
			else
			{
				if (X2 < 5 || X2 > Main.maxTilesX - 5 || Y2 < 5 || Y2 > Main.maxTilesY - 5)
				{
					return;
				}
				bool flag2 = true;
				for (int m = X2 - 1; m < X2 + 2; m++)
				{
					for (int n = Y2 - 1; n < Y2 + 1; n++)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = default(Tile);
						}
						if (Main.tile[m, n].active() && *Main.tile[m, n].type != 61 && *Main.tile[m, n].type != 62 && *Main.tile[m, n].type != 69 && *Main.tile[m, n].type != 655 && *Main.tile[m, n].type != 74 && (*Main.tile[m, n].type != 185 || *Main.tile[m, n].frameY != 0))
						{
							flag2 = false;
						}
					}
					if (Main.tile[m, Y2 + 1] == null)
					{
						Main.tile[m, Y2 + 1] = default(Tile);
					}
					if (!WorldGen.SolidTile(m, Y2 + 1, false) || *Main.tile[m, Y2 + 1].type != 60)
					{
						flag2 = false;
					}
				}
				if (!flag2)
				{
					return;
				}
				for (int num4 = X2 - 1; num4 < X2 + 2; num4++)
				{
					for (int num5 = Y2 - 1; num5 < Y2 + 1; num5++)
					{
						if (Main.tile[num4, num5] != null && Main.tile[num4, num5].active())
						{
							WorldGen.KillTile(num4, num5, false, false, true);
						}
					}
				}
				short num6 = (short)(54 * styleX);
				Main.tile[X2 - 1, Y2 - 1].active(true);
				*Main.tile[X2 - 1, Y2 - 1].frameY = 0;
				*Main.tile[X2 - 1, Y2 - 1].frameX = num6;
				*Main.tile[X2 - 1, Y2 - 1].type = type;
				Main.tile[X2, Y2 - 1].active(true);
				*Main.tile[X2, Y2 - 1].frameY = 0;
				*Main.tile[X2, Y2 - 1].frameX = num6 + 18;
				*Main.tile[X2, Y2 - 1].type = type;
				Main.tile[X2 + 1, Y2 - 1].active(true);
				*Main.tile[X2 + 1, Y2 - 1].frameY = 0;
				*Main.tile[X2 + 1, Y2 - 1].frameX = num6 + 36;
				*Main.tile[X2 + 1, Y2 - 1].type = type;
				Main.tile[X2 - 1, Y2].active(true);
				*Main.tile[X2 - 1, Y2].frameY = 18;
				*Main.tile[X2 - 1, Y2].frameX = num6;
				*Main.tile[X2 - 1, Y2].type = type;
				Main.tile[X2, Y2].active(true);
				*Main.tile[X2, Y2].frameY = 18;
				*Main.tile[X2, Y2].frameX = num6 + 18;
				*Main.tile[X2, Y2].type = type;
				Main.tile[X2 + 1, Y2].active(true);
				*Main.tile[X2 + 1, Y2].frameY = 18;
				*Main.tile[X2 + 1, Y2].frameX = num6 + 36;
				*Main.tile[X2 + 1, Y2].type = type;
				return;
			}
		}

		// Token: 0x0600125F RID: 4703 RVA: 0x0044E070 File Offset: 0x0044C270
		public unsafe static void CheckJunglePlant(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			if (*Main.tile[i, j].frameY >= 36 || *Main.tile[i, j].type == 236 || *Main.tile[i, j].type == 238)
			{
				bool flag = false;
				int num = (int)(*Main.tile[i, j].frameX / 18);
				int num2 = 0;
				while (num > 1)
				{
					num -= 2;
					num2++;
				}
				num = i - num;
				int num3 = 36;
				if (type == 236 || type == 238)
				{
					num3 = 0;
				}
				int num4;
				for (num4 = (int)(*Main.tile[i, j].frameY / 18); num4 > 1; num4 -= 2)
				{
				}
				num4 = j - num4;
				int num5 = num2 * 36;
				for (int k = num; k < num + 2; k++)
				{
					for (int l = num4; l < num4 + 2; l++)
					{
						if (Main.tile[k, l] == null)
						{
							Main.tile[k, l] = default(Tile);
						}
						if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num) * 18 + num5 || (int)(*Main.tile[k, l].frameY) != (l - num4) * 18 + num3)
						{
							flag = true;
						}
					}
					if (Main.tile[k, num4 + 2] == null)
					{
						Main.tile[k, num4 + 2] = default(Tile);
					}
					if (!WorldGen.SolidTile(k, num4 + 2, false) || *Main.tile[k, num4 + 2].type != 60)
					{
						flag = true;
					}
				}
				if (!flag)
				{
					return;
				}
				if (type == 238)
				{
					float num6 = (float)(i * 16);
					float num7 = (float)(j * 16);
					float num8 = -1f;
					int plr = 0;
					for (int m = 0; m < 255; m++)
					{
						float num9 = Math.Abs(Main.player[m].position.X - num6) + Math.Abs(Main.player[m].position.Y - num7);
						if (num9 < num8 || num8 == -1f)
						{
							plr = m;
							num8 = num9;
						}
					}
					if (num8 / 16f < 50f)
					{
						NPC.SpawnOnPlayer(plr, 262);
					}
				}
				using (new Item.DisableNewItemMethod(!TileLoader.Drop(i, j, type, true)))
				{
					if (type == 236)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1291, 1, false, 0, false, false);
					}
					ref short frameX = ref Main.tile[i, j].frameX;
					WorldGen.destroyObject = true;
					for (int n = num; n < num + 2; n++)
					{
						for (int num10 = num4; num10 < num4 + 2; num10++)
						{
							if (Main.tile[n, num10] == null)
							{
								Main.tile[n, num10] = default(Tile);
							}
							if ((int)(*Main.tile[n, num10].type) == type && Main.tile[n, num10].active())
							{
								WorldGen.KillTile(n, num10, false, false, false);
							}
						}
					}
					WorldGen.destroyObject = false;
					return;
				}
			}
			bool flag2 = false;
			int num11 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			int num12 = (int)(*Main.tile[i, j].frameX / 18);
			int num13 = 0;
			while (num12 > 2)
			{
				num12 -= 3;
				num13++;
			}
			num12 = i - num12;
			int num14 = num13 * 54;
			for (int num15 = num12; num15 < num12 + 3; num15++)
			{
				for (int num16 = num11; num16 < num11 + 2; num16++)
				{
					if (Main.tile[num15, num16] == null)
					{
						Main.tile[num15, num16] = default(Tile);
					}
					if (!Main.tile[num15, num16].active() || (int)(*Main.tile[num15, num16].type) != type || (int)(*Main.tile[num15, num16].frameX) != (num15 - num12) * 18 + num14 || (int)(*Main.tile[num15, num16].frameY) != (num16 - num11) * 18)
					{
						flag2 = true;
					}
				}
				if (Main.tile[num15, num11 + 2] == null)
				{
					Main.tile[num15, num11 + 2] = default(Tile);
				}
				if (!WorldGen.SolidTile(num15, num11 + 2, false) || *Main.tile[num15, num11 + 2].type != 60)
				{
					flag2 = true;
				}
			}
			if (!flag2)
			{
				return;
			}
			ref short frameX2 = ref Main.tile[i, j].frameX;
			WorldGen.destroyObject = true;
			TileLoader.Drop(i, j, type, true);
			for (int num17 = num12; num17 < num12 + 3; num17++)
			{
				for (int num18 = num11; num18 < num11 + 3; num18++)
				{
					if (Main.tile[num17, num18] == null)
					{
						Main.tile[num17, num18] = default(Tile);
					}
					if ((int)(*Main.tile[num17, num18].type) == type && Main.tile[num17, num18].active())
					{
						WorldGen.KillTile(num17, num18, false, false, false);
					}
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x06001260 RID: 4704 RVA: 0x0044E6B8 File Offset: 0x0044C8B8
		public unsafe static void CheckSuper(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			Tile tile = Main.tile[x, y];
			int num = 0;
			if (type == 376)
			{
				num = (int)(*tile.frameX / 36);
			}
			if (type == 443)
			{
				num = (int)(*tile.frameX / 36);
			}
			if (type == 485)
			{
				num = (int)(*tile.frameX / 36);
			}
			bool flag = type == 376;
			bool flag2 = type == 443;
			bool flag3 = type == 444;
			bool flag4 = type == 485;
			TileObjectData tileData = TileObjectData.GetTileData(type, num, 0);
			bool styleHorizontal = tileData.StyleHorizontal;
			int width = tileData.Width;
			int height = tileData.Height;
			int num2 = x - (int)(*tile.frameX / 18) % width;
			int num3 = y - (int)(*tile.frameY / 18) % height;
			int num4 = 0;
			int num5 = 0;
			if (styleHorizontal)
			{
				num4 = (int)(*tile.frameX) / tileData.CoordinateFullWidth;
			}
			else
			{
				num5 = (int)(*tile.frameY) / tileData.CoordinateFullHeight;
			}
			bool flag5 = false;
			bool flag6 = false;
			for (int i = 0; i < width; i++)
			{
				for (int j = 0; j < height; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(num2 + i, num3 + j);
					if (!tileSafely.active() || (int)(*tileSafely.type) != type || (int)(*tileSafely.frameX) != num4 * tileData.CoordinateFullWidth + i * (tileData.CoordinateWidth + 2) || (int)(*tileSafely.frameY) != num5 * tileData.CoordinateFullHeight + j * (tileData.CoordinateHeights[0] + 2))
					{
						flag5 = true;
					}
				}
			}
			if (flag)
			{
				for (int k = 0; k < width; k++)
				{
					Tile tileSafely2 = Framing.GetTileSafely(num2 + k, num3 + height);
					if (!tileSafely2.active() || (!Main.tileSolid[(int)(*tileSafely2.type)] && !Main.tileTable[(int)(*tileSafely2.type)]))
					{
						flag5 = true;
					}
					if (tileSafely2.halfBrick())
					{
						flag5 = true;
					}
				}
			}
			if (flag2)
			{
				bool flag7 = true;
				bool flag8 = true;
				for (int l = 0; l < width; l++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + l, num3 + height), AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide))
					{
						flag8 = false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + l, num3 - 1), AnchorType.SolidBottom))
					{
						flag7 = false;
					}
				}
				if (!flag7 && !flag8)
				{
					flag5 = true;
				}
				if (!flag5)
				{
					int num6 = 0;
					if (flag8)
					{
						for (int m = 0; m < width; m++)
						{
							*Framing.GetTileSafely(num2 + m, num3).frameX = (short)(m * 18 + num / 2 * 36 + num6 * 36);
						}
					}
					else
					{
						for (int n = 0; n < width; n++)
						{
							*Framing.GetTileSafely(num2 + n, num3).frameX = (short)(n * 18 + (num - 2) / 2 * 36 + 72 + num6 * 36);
						}
					}
				}
			}
			if (flag3)
			{
				bool flag9 = true;
				for (int num7 = 0; num7 < width; num7++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + num7, num3 - 1), AnchorType.SolidTile))
					{
						flag9 = false;
					}
				}
				if (!flag9)
				{
					flag5 = true;
				}
				for (int num8 = 0; num8 < width; num8++)
				{
					for (int num9 = 0; num9 < height; num9++)
					{
						if (*Framing.GetTileSafely(num2 + num8, num3 + num9).liquid > 0)
						{
							flag5 = true;
							flag6 = true;
						}
					}
				}
			}
			if (flag4)
			{
				bool flag10 = true;
				for (int num10 = 0; num10 < width; num10++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(num2 + num10, num3 + height), AnchorType.SolidTile))
					{
						flag10 = false;
					}
				}
				if (!flag10)
				{
					flag5 = true;
				}
			}
			if (!flag5)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int num11 = 0; num11 < width; num11++)
			{
				for (int num12 = 0; num12 < height; num12++)
				{
					if ((int)(*Main.tile[num2 + num11, num3 + num12].type) == type && Main.tile[num2 + num11, num3 + num12].active())
					{
						WorldGen.KillTile(num2 + num11, num3 + num12, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				int num13 = 0;
				if (type == 376)
				{
					switch (num)
					{
					case 0:
						num13 = 2334;
						break;
					case 1:
						num13 = 2335;
						break;
					case 2:
						num13 = 2336;
						break;
					case 3:
						num13 = 3203;
						break;
					case 4:
						num13 = 3204;
						break;
					case 5:
						num13 = 3205;
						break;
					case 6:
						num13 = 3206;
						break;
					case 7:
						num13 = 3207;
						break;
					case 8:
						num13 = 3208;
						break;
					case 9:
						num13 = 3979;
						break;
					case 10:
						num13 = 3980;
						break;
					case 11:
						num13 = 3981;
						break;
					case 12:
						num13 = 3982;
						break;
					case 13:
						num13 = 3983;
						break;
					case 14:
						num13 = 3984;
						break;
					case 15:
						num13 = 3985;
						break;
					case 16:
						num13 = 3986;
						break;
					case 17:
						num13 = 3987;
						break;
					case 18:
						num13 = 4405;
						break;
					case 19:
						num13 = 4406;
						break;
					case 20:
						num13 = 4407;
						break;
					case 21:
						num13 = 4408;
						break;
					case 22:
						num13 = 4877;
						break;
					case 23:
						num13 = 4878;
						break;
					case 24:
						num13 = 5002;
						break;
					case 25:
						num13 = 5003;
						break;
					}
				}
				if (type == 443)
				{
					num13 = 3722;
				}
				if (type == 485 && !WorldGen.gen && Main.netMode != 1)
				{
					int availableAmountOfNPCsToSpawnUpToSlot = NPC.GetAvailableAmountOfNPCsToSpawnUpToSlot(1, 100);
					for (int num14 = 0; num14 < availableAmountOfNPCsToSpawnUpToSlot; num14++)
					{
						int num15 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(num2, num3), num2 * 16, num3 * 16 + 32, 582, 0, 0f, 0f, 0f, 0f, 255);
						Main.npc[num15].TargetClosest(true);
						Main.npc[num15].velocity = new Vector2((float)Main.npc[num15].direction * 1.5f, -5f);
						NetMessage.SendData(23, -1, -1, null, num15, 0f, 0f, 0f, 0, 0, 0);
						int num16 = 20;
						int num17 = -1;
						Main.npc[num15].GetImmuneTime(num17, num16);
						NetMessage.SendData(131, -1, -1, null, num15, 1f, (float)num17, (float)num16, 0, 0, 0);
					}
				}
				if (type == 444 && Main.netMode != 1 && !flag6)
				{
					Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num3), (float)(num2 * 16 + 16), (float)(num3 * 16 + 16), 0f, 0f, 655, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
				}
				if (num13 != 0)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num2, num3), num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, num13, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num18 = -1; num18 < width + 1; num18++)
				{
					for (int num19 = -1; num19 < height + 1; num19++)
					{
						WorldGen.TileFrame(num2 + num18, num3 + num19, false, false);
					}
				}
			}
		}

		// Token: 0x06001261 RID: 4705 RVA: 0x0044EE80 File Offset: 0x0044D080
		public unsafe static void Check2x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int num2 = (int)(*Main.tile[i, j].frameX / 18 * -1);
			if (num2 < -1)
			{
				num2 += 2;
				num = 36;
			}
			num2 += i;
			int num3 = (type == 172) ? 38 : 36;
			int num4 = (int)(*Main.tile[i, j].frameY);
			int num5 = 0;
			while (num4 >= num3)
			{
				num4 -= num3;
				num5++;
			}
			int num6 = j - num4 / 18;
			int num7 = 0;
			if (type == 652)
			{
				num7 = (int)(*Main.tile[i, j].frameX / 36);
				num2 = (int)(*Main.tile[i, j].frameX % 36 / 18 * -1) + i;
				num = num7 * 36;
			}
			for (int k = num2; k < num2 + 2; k++)
			{
				for (int l = num6; l < num6 + 2; l++)
				{
					Tile tileSafely = Framing.GetTileSafely(k, l);
					if (!tileSafely.active() || (int)(*tileSafely.type) != type || (int)(*tileSafely.frameX) != (k - num2) * 18 + num || (int)(*tileSafely.frameY) != (l - num6) * 18 + num5 * num3)
					{
						flag = true;
						break;
					}
				}
				if (type == 95 || type == 126)
				{
					Framing.GetTileSafely(k, num6 - 1);
					if (!Main.tile[k, num6 - 1].active() || !Main.tileSolid[(int)(*Main.tile[k, num6 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[k, num6 - 1].type)])
					{
						flag = true;
					}
				}
				else if (!TileID.Sets.Boulders[type] && type != 132)
				{
					Tile tileSafely2 = Framing.GetTileSafely(k, num6 + 2);
					if (!tileSafely2.active() || (!Main.tileSolid[(int)(*tileSafely2.type)] && !Main.tileTable[(int)(*tileSafely2.type)]))
					{
						flag = true;
					}
					if (tileSafely2.halfBrick())
					{
						flag = true;
					}
				}
			}
			if (TileID.Sets.Boulders[type])
			{
				if (Main.tile[num2, num6 - 1] == null)
				{
					Main.tile[num2, num6 - 1] = default(Tile);
				}
				if (Main.tile[num2 + 1, num6 - 1] == null)
				{
					Main.tile[num2 + 1, num6 - 1] = default(Tile);
				}
				ushort type2 = *Main.tile[num2, num6 - 1].type;
				ushort type3 = *Main.tile[num2 + 1, num6 - 1].type;
				if (!TileID.Sets.BasicChest[(int)type2] && !TileID.Sets.BasicChest[(int)type3] && !TileID.Sets.BasicDresser[(int)type2] && !TileID.Sets.BasicDresser[(int)type3] && !TileID.Sets.BasicChestFake[(int)type2] && !TileID.Sets.BasicChestFake[(int)type3] && type2 != 470 && type3 != 470 && type2 != 475 && type3 != 475 && !WorldGen.SolidTileAllowBottomSlope(num2, num6 + 2) && !WorldGen.SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
				{
					flag = true;
				}
			}
			else if (type == 132)
			{
				flag = false;
				num6 = (int)(*Main.tile[i, j].frameY / 18 * -1);
				num6 += j;
				num = 0;
				num2 = (int)(*Main.tile[i, j].frameX / 18 * -1);
				while (num2 < -1)
				{
					num2 += 2;
					num += 36;
				}
				num2 += i;
				for (int m = num2; m < num2 + 2; m++)
				{
					for (int n = num6; n < num6 + 2; n++)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = default(Tile);
						}
						if (!Main.tile[m, n].active() || (int)(*Main.tile[m, n].type) != type || (int)(*Main.tile[m, n].frameX) != (m - num2) * 18 + num || (int)(*Main.tile[m, n].frameY) != (n - num6) * 18)
						{
							flag = true;
						}
					}
				}
				if (Main.tile[num2, num6 + 2] == null)
				{
					Main.tile[num2, num6 + 2] = default(Tile);
				}
				if (Main.tile[num2 + 1, num6 + 2] == null)
				{
					Main.tile[num2 + 1, num6 + 2] = default(Tile);
				}
				bool flag2 = false;
				ushort type4 = *Main.tile[num2, num6 + 2].type;
				ushort type5 = *Main.tile[num2 + 1, num6 + 2].type;
				if (!Main.tile[num2, num6 + 2].active() || (!Main.tileSolid[(int)type4] && !Main.tileSolidTop[(int)type4]) || Main.tile[num2, num6 + 2].halfBrick() || (Main.tile[num2, num6 + 2].slope() != 0 && !Main.tile[num2, num6 + 2].bottomSlope()))
				{
					flag2 = true;
				}
				if (!Main.tile[num2 + 1, num6 + 2].active() || (!Main.tileSolid[(int)type5] && !Main.tileSolidTop[(int)type5]) || Main.tile[num2 + 1, num6 + 2].halfBrick() || (Main.tile[num2 + 1, num6 + 2].slope() != 0 && !Main.tile[num2 + 1, num6 + 2].bottomSlope()))
				{
					flag2 = true;
				}
				if (flag2)
				{
					if (*Main.tile[num2, num6].wall < 1 || *Main.tile[num2 + 1, num6].wall < 1 || *Main.tile[num2, num6 + 1].wall < 1 || *Main.tile[num2 + 1, num6 + 1].wall < 1)
					{
						flag = true;
					}
					else if (num < 72)
					{
						for (int num8 = num2; num8 < num2 + 2; num8++)
						{
							for (int num9 = num6; num9 < num6 + 2; num9++)
							{
								ref short frameX = ref Main.tile[num8, num9].frameX;
								frameX += 72;
							}
						}
					}
				}
				else if (num >= 72)
				{
					for (int num10 = num2; num10 < num2 + 2; num10++)
					{
						for (int num11 = num6; num11 < num6 + 2; num11++)
						{
							ref short frameX2 = ref Main.tile[num10, num11].frameX;
							frameX2 -= 72;
						}
					}
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int num12 = num2; num12 < num2 + 2; num12++)
			{
				for (int num13 = num6; num13 < num6 + 2; num13++)
				{
					if ((int)(*Main.tile[num12, num13].type) == type && Main.tile[num12, num13].active())
					{
						WorldGen.KillTile(num12, num13, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				int num14 = 0;
				if (type <= 565)
				{
					switch (type)
					{
					case 521:
						num14 = 4327;
						break;
					case 522:
						num14 = 4328;
						break;
					case 523:
						num14 = 4329;
						break;
					case 524:
						num14 = 4330;
						break;
					case 525:
						num14 = 4331;
						break;
					case 526:
						num14 = 4332;
						break;
					case 527:
						num14 = 4333;
						break;
					default:
						if (type != 564)
						{
							if (type == 565)
							{
								num14 = 4552;
							}
						}
						else
						{
							num14 = 4553;
						}
						break;
					}
				}
				else if (type != 594)
				{
					if (type != 621)
					{
						if (type == 622)
						{
							num14 = 5008;
						}
					}
					else
					{
						num14 = 3750;
					}
				}
				else
				{
					num14 = 4869;
				}
				if (type == 598)
				{
					num14 = 4880;
				}
				if (type == 360)
				{
					num14 = 3072;
				}
				if (type == 580)
				{
					num14 = 4846;
				}
				if (type == 620)
				{
					num14 = 4964;
				}
				if (type == 505)
				{
					num14 = 4275;
				}
				if (type == 543)
				{
					num14 = 4398;
				}
				if (type == 568)
				{
					num14 = 4655;
				}
				if (type == 569)
				{
					num14 = 4656;
				}
				if (type == 570)
				{
					num14 = 4657;
				}
				if (type >= 288 && type <= 295)
				{
					num14 = 2178 + type - 288;
				}
				if (type >= 316 && type <= 318)
				{
					num14 = 2439 + type - 316;
				}
				if (type == 85)
				{
					num14 = 321;
				}
				if (type == 94)
				{
					num14 = 352;
				}
				if (type == 95)
				{
					num14 = 344;
				}
				if (type == 96)
				{
					num14 = 345;
				}
				if (type == 97)
				{
					num14 = 346;
				}
				if (type == 98)
				{
					num14 = 347;
				}
				if (type == 99)
				{
					num14 = 348;
				}
				if (type == 335)
				{
					num14 = 2700;
				}
				if (type == 411)
				{
					num14 = 3545;
				}
				if (type == 652)
				{
					num14 = ((num7 < 3) ? 195 : ((num7 >= 6) ? 331 : 62));
				}
				if (type == 100)
				{
					if (num5 != 0)
					{
						if (num5 - 1 > 11)
						{
							if (num5 >= 13 && num5 <= 16)
							{
								num14 = 2149 + num5 - 13;
							}
							else
							{
								switch (num5)
								{
								case 17:
									num14 = 2227;
									break;
								case 18:
									num14 = 2522;
									break;
								case 19:
									num14 = 2541;
									break;
								case 20:
									num14 = 2555;
									break;
								case 21:
									num14 = 2570;
									break;
								case 22:
									num14 = 2664;
									break;
								case 23:
									num14 = 2665;
									break;
								case 24:
									num14 = 2666;
									break;
								case 25:
									num14 = 2667;
									break;
								case 26:
									num14 = 2668;
									break;
								case 27:
									num14 = 2825;
									break;
								case 28:
									num14 = 3168;
									break;
								case 29:
									num14 = 3170;
									break;
								case 30:
									num14 = 3169;
									break;
								case 31:
									num14 = 3893;
									break;
								case 32:
									num14 = 3935;
									break;
								case 33:
									num14 = 3961;
									break;
								case 34:
									num14 = 4149;
									break;
								case 35:
									num14 = 4170;
									break;
								case 36:
									num14 = 4191;
									break;
								case 37:
									num14 = 4212;
									break;
								case 38:
									num14 = 4302;
									break;
								case 39:
									num14 = 4570;
									break;
								case 40:
									num14 = 5152;
									break;
								case 41:
									num14 = 5173;
									break;
								case 42:
									num14 = 5194;
									break;
								}
							}
						}
						else
						{
							num14 = 2092 + num5 - 1;
						}
					}
					else
					{
						num14 = 349;
					}
				}
				if (type == 173)
				{
					num14 = 714;
				}
				if (type == 125)
				{
					num14 = 487;
				}
				if (type == 287)
				{
					num14 = 2177;
				}
				if (type == 126)
				{
					num14 = 488;
				}
				if (type == 132)
				{
					num14 = 513;
				}
				if (type == 142)
				{
					num14 = 581;
				}
				if (type == 143)
				{
					num14 = 582;
				}
				if (type == 282)
				{
					num14 = 250;
				}
				if (type == 319)
				{
					num14 = 2490;
				}
				if (type == 490)
				{
					num14 = 4075;
				}
				if (type == 172)
				{
					num14 = 2827 + num5;
					switch (num5)
					{
					case 29:
						num14 = 3147;
						break;
					case 30:
						num14 = 3149;
						break;
					case 31:
						num14 = 3148;
						break;
					case 32:
						num14 = 3896;
						break;
					case 33:
						num14 = 3946;
						break;
					case 34:
						num14 = 3972;
						break;
					case 35:
						num14 = 4160;
						break;
					case 36:
						num14 = 4181;
						break;
					case 37:
						num14 = 4202;
						break;
					case 38:
						num14 = 4223;
						break;
					case 39:
						num14 = 4312;
						break;
					case 40:
						num14 = 4581;
						break;
					case 41:
						num14 = 5163;
						break;
					case 42:
						num14 = 5184;
						break;
					case 43:
						num14 = 5205;
						break;
					}
				}
				if (num14 != 0)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num14, 1, false, 0, false, false);
				}
				if (!WorldGen.gen && Main.netMode != 1)
				{
					if (type <= 484)
					{
						if (type != 138)
						{
							if (type == 484)
							{
								Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num6), (float)(num2 * 16) + 15.5f, (float)(num6 * 16 + 16), 0f, 0f, 727, 35, 10f, Main.myPlayer, 0f, 0f, 0f);
							}
						}
						else
						{
							Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num6), (float)(num2 * 16) + 15.5f, (float)(num6 * 16 + 16), 0f, 0f, 99, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
						}
					}
					else if (type != 654)
					{
						if (type != 664)
						{
							if (type == 665)
							{
								Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num6), (float)(num2 * 16) + 15.5f, (float)(num6 * 16 + 16), 0f, 0f, 1014, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
							}
						}
						else
						{
							Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num6), (float)(num2 * 16) + 15.5f, (float)(num6 * 16 + 16), 0f, 0f, 1013, 70, 10f, Main.myPlayer, 0f, 0f, 0f);
						}
					}
					else
					{
						Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num2, num6), (float)(num2 * 16 + 8), (float)(num6 * 16 + 8), 0f, 0f, 1002, 400, 10f, Main.myPlayer, 0f, 0f, 0f);
					}
				}
				WorldGen.destroyObject = false;
				for (int num15 = num2 - 1; num15 < num2 + 3; num15++)
				{
					for (int num16 = num6 - 1; num16 < num6 + 3; num16++)
					{
						WorldGen.TileFrame(num15, num16, false, false);
					}
				}
			}
		}

		// Token: 0x06001262 RID: 4706 RVA: 0x0044FE3C File Offset: 0x0044E03C
		public unsafe static bool CheckBoulderChest(int i, int j)
		{
			int num = (int)(*Main.tile[i, j].frameX / 18 * -1);
			if (num < -1)
			{
				num += 2;
			}
			num += i;
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameY); num2 >= 36; num2 -= 36)
			{
			}
			num2 = j - num2 / 18;
			return WorldGen.IsAContainer(Main.tile[num, num2 - 1]) || WorldGen.IsAContainer(Main.tile[num + 1, num2 - 1]);
		}

		// Token: 0x06001263 RID: 4707 RVA: 0x0044FEC8 File Offset: 0x0044E0C8
		public unsafe static bool IsAContainer(Tile t)
		{
			return TileID.Sets.BasicDresser[(int)(*t.type)] || *t.type == 470 || *t.type == 475 || TileID.Sets.BasicChest[(int)(*t.type)] || TileID.Sets.BasicChestFake[(int)(*t.type)];
		}

		/// <summary>
		/// Similar to <see cref="M:Terraria.WorldGen.TileRunner(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Boolean,System.Double,System.Double,System.Boolean,System.Boolean,System.Int32)" />, but without many of the options. OreRunner places small splotches of the specified tile (<paramref name="type" />) starting at the coordinates (<paramref name="i" /> and <paramref name="j" /> in tile coordinates). OreRunner only replaces active tiles (<see cref="P:Terraria.Tile.HasTile" />) that are either <see cref="F:Terraria.ID.TileID.Sets.CanBeClearedDuringOreRunner" /> or <see cref="F:Terraria.Main.tileMoss" />, making it suitable to be used even after FrameImportant tiles (<see cref="F:Terraria.Main.tileFrameImportant" />) exist in the world.
		/// <para /> If you have a tile that should be susceptible to being replaced when additional ores are spawned in the world, set <see cref="F:Terraria.ID.TileID.Sets.CanBeClearedDuringOreRunner" /> to true for that ModTile. Vanilla code only uses this method when spawning hardmode ores. This method is suitable for use in-game and in multiplayer as it both frames and syncs tile changes.
		/// </summary>
		/// <param name="i"></param>
		/// <param name="j"></param>
		/// <param name="strength"></param>
		/// <param name="steps"></param>
		/// <param name="type"></param>
		// Token: 0x06001264 RID: 4708 RVA: 0x0044FF24 File Offset: 0x0044E124
		public unsafe static void OreRunner(int i, int j, double strength, int steps, ushort type)
		{
			double num = strength;
			double num2 = (double)steps;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num2 > 0.0)
			{
				if (vector2D.Y < 0.0 && num2 > 0.0 && type == 59)
				{
					num2 = 0.0;
				}
				num = strength * (num2 / (double)steps);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int k = num3; k < num4; k++)
				{
					for (int l = num5; l < num6; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (TileID.Sets.CanBeClearedDuringOreRunner[(int)(*Main.tile[k, l].type)] || (Main.remixWorld && *Main.tile[k, l].type == 230) || (*Main.tile[k, l].type == 225 && *Main.tile[k, l].wall != 108)))
						{
							*Main.tile[k, l].type = type;
							Main.tile[k, l].ClearBlockPaintAndCoating();
							WorldGen.SquareTileFrame(k, l, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
			}
		}

		// Token: 0x06001265 RID: 4709 RVA: 0x00450258 File Offset: 0x0044E458
		public static void SmashAltar(int i, int j)
		{
			if (Main.netMode == 1 || !Main.hardMode || WorldGen.noTileActions || WorldGen.gen)
			{
				return;
			}
			int num = WorldGen.altarCount % 3;
			int num2 = WorldGen.altarCount / 3 + 1;
			double num3 = (double)Main.maxTilesX / 4200.0;
			int num4 = 1 - num;
			num3 = num3 * 310.0 - (double)(85 * num);
			num3 *= 0.85;
			num3 /= (double)num2;
			bool flag = false;
			if (Main.drunkWorld)
			{
				if (WorldGen.SavedOreTiers.Adamantite == 111)
				{
					WorldGen.SavedOreTiers.Adamantite = 223;
				}
				else if (WorldGen.SavedOreTiers.Adamantite == 223)
				{
					WorldGen.SavedOreTiers.Adamantite = 111;
				}
			}
			if (num != 0)
			{
				if (num != 1)
				{
					if (Main.drunkWorld)
					{
						if (WorldGen.SavedOreTiers.Cobalt == 107)
						{
							WorldGen.SavedOreTiers.Cobalt = 221;
						}
						else if (WorldGen.SavedOreTiers.Cobalt == 221)
						{
							WorldGen.SavedOreTiers.Cobalt = 107;
						}
					}
					if (WorldGen.SavedOreTiers.Adamantite == -1)
					{
						flag = true;
						WorldGen.SavedOreTiers.Adamantite = 111;
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.SavedOreTiers.Adamantite = 223;
						}
					}
					int num5 = 14;
					if (WorldGen.SavedOreTiers.Adamantite == 223)
					{
						num5 += 9;
						num3 *= 0.8999999761581421;
					}
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[num5].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num5].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
					}
					num = WorldGen.SavedOreTiers.Adamantite;
				}
				else
				{
					if (Main.drunkWorld)
					{
						if (WorldGen.SavedOreTiers.Mythril == 108)
						{
							WorldGen.SavedOreTiers.Mythril = 222;
						}
						else if (WorldGen.SavedOreTiers.Mythril == 222)
						{
							WorldGen.SavedOreTiers.Mythril = 108;
						}
					}
					if (WorldGen.SavedOreTiers.Mythril == -1)
					{
						flag = true;
						WorldGen.SavedOreTiers.Mythril = 108;
						if (WorldGen.genRand.Next(2) == 0)
						{
							WorldGen.SavedOreTiers.Mythril = 222;
						}
					}
					int num6 = 13;
					if (WorldGen.SavedOreTiers.Mythril == 222)
					{
						num6 += 9;
						num3 *= 0.8999999761581421;
					}
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[num6].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num6].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
					}
					num = WorldGen.SavedOreTiers.Mythril;
				}
			}
			else
			{
				if (WorldGen.SavedOreTiers.Cobalt == -1)
				{
					flag = true;
					WorldGen.SavedOreTiers.Cobalt = 107;
					if (WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.SavedOreTiers.Cobalt = 221;
					}
				}
				int num7 = 12;
				if (WorldGen.SavedOreTiers.Cobalt == 221)
				{
					num7 += 9;
					num3 *= 0.8999999761581421;
				}
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[num7].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
				}
				num = WorldGen.SavedOreTiers.Cobalt;
				num3 *= 1.0499999523162842;
			}
			if (flag)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			int k = 0;
			while ((double)k < num3)
			{
				int i2 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
				double num8 = Main.worldSurface;
				if (num == 108 || num == 222)
				{
					num8 = Main.rockLayer;
				}
				if (num == 111 || num == 223)
				{
					num8 = (Main.rockLayer + Main.rockLayer + (double)Main.maxTilesY) / 3.0;
				}
				int j2 = WorldGen.genRand.Next((int)num8, Main.maxTilesY - 150);
				if (Main.remixWorld)
				{
					double num9 = (double)(Main.maxTilesX - 350);
					if (num == 108 || num == 222)
					{
						num9 = (Main.rockLayer + Main.rockLayer + (double)Main.maxTilesY - 350.0) / 3.0;
					}
					if (num == 111 || num == 223)
					{
						num9 = Main.rockLayer - 25.0;
					}
					j2 = WorldGen.genRand.Next((int)Main.worldSurface + 15, (int)num9);
				}
				if (Main.tenthAnniversaryWorld)
				{
					WorldGen.OreRunner(i2, j2, (double)WorldGen.genRand.Next(5, 11 + num4), WorldGen.genRand.Next(5, 11 + num4), (ushort)num);
				}
				else
				{
					WorldGen.OreRunner(i2, j2, (double)WorldGen.genRand.Next(5, 9 + num4), WorldGen.genRand.Next(5, 9 + num4), (ushort)num);
				}
				k++;
			}
			if (Main.netMode != 1)
			{
				int num10 = Main.rand.Next(2) + 1;
				for (int l = 0; l < num10; l++)
				{
					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
				}
			}
			WorldGen.altarCount++;
			AchievementsHelper.NotifyProgressionEvent(6);
		}

		// Token: 0x06001266 RID: 4710 RVA: 0x00450774 File Offset: 0x0044E974
		public unsafe static void Check3x1(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num > 2)
			{
				num -= 3;
				num2++;
			}
			num = i - num;
			int num3 = num2 * 54;
			for (int k = num; k < num + 3; k++)
			{
				if (Main.tile[k, j] == null)
				{
					Main.tile[k, j] = default(Tile);
				}
				if (!Main.tile[k, j].active() || (int)(*Main.tile[k, j].type) != type || (int)(*Main.tile[k, j].frameX) != (k - num) * 18 + num3 || *Main.tile[k, j].frameY != 0)
				{
					flag = true;
				}
				if (Main.tile[k, j - 1] == null)
				{
					Main.tile[k, j - 1] = default(Tile);
				}
				if (Main.tile[k, j - 1].active() && (TileID.Sets.BasicChest[(int)(*Main.tile[k, j - 1].type)] || TileID.Sets.BasicChestFake[(int)(*Main.tile[k, j - 1].type)] || TileID.Sets.BasicDresser[(int)(*Main.tile[k, j - 1].type)] || *Main.tile[k, j - 1].type == 470 || *Main.tile[k, j - 1].type == 475 || *Main.tile[k, j - 1].type == 597))
				{
					return;
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, j + 1))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			ref short frameX = ref Main.tile[i, j].frameX;
			WorldGen.destroyObject = true;
			using (new Item.DisableNewItemMethod(!TileLoader.Drop(i, j, type, true)))
			{
				if (type == 235)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1263, 1, false, 0, false, false);
				}
				for (int l = num; l < num + 3; l++)
				{
					if (Main.tile[l, j] == null)
					{
						Main.tile[l, j] = default(Tile);
					}
					if ((int)(*Main.tile[l, j].type) == type && Main.tile[l, j].active())
					{
						WorldGen.KillTile(l, j, false, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int m = num - 1; m < num + 4; m++)
				{
					WorldGen.TileFrame(m, j, false, false);
				}
			}
		}

		// Token: 0x06001267 RID: 4711 RVA: 0x00450AD8 File Offset: 0x0044ECD8
		public unsafe static void Check3x2(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			int num2 = 36;
			int num3 = (int)(*Main.tile[i, j].frameY) / num2;
			int num4 = (int)(*Main.tile[i, j].frameY) % num2;
			int num5 = j - num4 / 18;
			int num6 = (int)(*Main.tile[i, j].frameX / 18);
			int num7 = 0;
			while (num6 > 2)
			{
				num6 -= 3;
				num7++;
			}
			num6 = i - num6;
			int num8 = num7 * 54;
			if (type == 14 && num7 == 25)
			{
				flag2 = true;
			}
			int num9 = num5 + 2;
			if (flag2)
			{
				num9--;
			}
			for (int k = num6; k < num6 + 3; k++)
			{
				for (int l = num5; l < num9; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num6) * 18 + num8 || (int)(*Main.tile[k, l].frameY) != (l - num5) * 18 + num3 * 36)
					{
						flag = true;
					}
				}
				if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || type == 538 || (type >= 361 && type <= 364) || type == 532 || type == 544 || type == 533 || type == 555 || type == 556 || type == 582 || type == 619 || type == 629)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(k, num9) && (Main.tile[k, num9] == null || !Main.tile[k, num9].nactive() || !Main.tileSolidTop[(int)(*Main.tile[k, num9].type)] || *Main.tile[k, num9].frameY != 0) && (Main.tile[k, num9] == null || !Main.tile[k, num9].active() || !TileID.Sets.Platforms[(int)(*Main.tile[k, num9].type)]))
					{
						flag = true;
					}
				}
				else if (type != 26)
				{
					if (type != 186)
					{
						if (type == 488)
						{
							int num10 = 0;
							if (Main.tile[k, num9] != null && Main.tile[k, num9].active())
							{
								num10 = (int)(*Main.tile[k, num9].type);
							}
							if (!TileObjectData.GetTileData(488, 0, 0).AnchorValidTiles.Contains(num10))
							{
								flag = true;
							}
						}
					}
					else if (!WorldGen.SolidTileAllowBottomSlope(k, num9))
					{
						flag = true;
					}
					else
					{
						Tile tile = Main.tile[k, num9];
						if (!(tile == null) && tile.active())
						{
							if (num7 - 26 > 5)
							{
								if (num7 - 32 <= 2)
								{
									if (!TileID.Sets.Mud[(int)(*tile.type)] && *tile.type != 70)
									{
										flag = true;
									}
								}
							}
							else if (!TileID.Sets.Snow[(int)(*tile.type)] && !TileID.Sets.Conversion.Ice[(int)(*tile.type)] && *tile.type != 162 && *tile.type != 224)
							{
								flag = true;
							}
						}
					}
				}
				else
				{
					Tile tile2 = Main.tile[k, num9];
					if (!WorldGen.SolidTileAllowBottomSlope(k, num9) || (tile2 != null && tile2.active() && TileID.Sets.Boulders[(int)(*tile2.type)]))
					{
						flag = true;
					}
				}
				if (type == 187)
				{
					if (!WorldGen.SolidTileAllowBottomSlope(k, num9))
					{
						flag = true;
					}
					else
					{
						Tile tile3 = Main.tile[k, num9];
						if (!(tile3 == null) && tile3.active())
						{
							if (num7 > 5)
							{
								if (num7 - 6 > 2)
								{
									if (num7 - 29 <= 5)
									{
										if (!TileID.Sets.Conversion.Sand[(int)(*tile3.type)] && !TileID.Sets.Conversion.HardenedSand[(int)(*tile3.type)] && !TileID.Sets.Conversion.Sandstone[(int)(*tile3.type)])
										{
											flag = true;
										}
									}
								}
								else if (*tile3.type != 57 && *tile3.type != 58 && *tile3.type != 75 && *tile3.type != 76)
								{
									flag = true;
								}
							}
							else if (!TileID.Sets.Mud[(int)(*tile3.type)] && *tile3.type != 60 && *tile3.type != 226)
							{
								flag = true;
							}
						}
					}
				}
				else if (!WorldGen.SolidTileAllowBottomSlope(k, num9))
				{
					flag = true;
				}
			}
			if (type == 187 && Main.tile[num6, num5] != null && *Main.tile[num6, num5].frameX >= 756 && *Main.tile[num6, num5].frameX <= 900 && *Main.tile[num6, num5 + 2].type != 2 && *Main.tile[num6 + 1, num5 + 2].type != 2 && *Main.tile[num6 + 2, num5 + 2].type != 2 && *Main.tile[num6, num5 + 2].type != 477 && *Main.tile[num6 + 1, num5 + 2].type != 477 && *Main.tile[num6 + 2, num5 + 2].type != 477 && *Main.tile[num6, num5 + 2].type != 492 && *Main.tile[num6 + 1, num5 + 2].type != 492 && *Main.tile[num6 + 2, num5 + 2].type != 492)
			{
				ref short frameX2 = ref Main.tile[num6, num5].frameX;
				frameX2 -= 378;
				ref short frameX3 = ref Main.tile[num6 + 1, num5].frameX;
				frameX3 -= 378;
				ref short frameX4 = ref Main.tile[num6 + 2, num5].frameX;
				frameX4 -= 378;
				ref short frameX5 = ref Main.tile[num6, num5 + 1].frameX;
				frameX5 -= 378;
				ref short frameX6 = ref Main.tile[num6 + 1, num5 + 1].frameX;
				frameX6 -= 378;
				ref short frameX7 = ref Main.tile[num6 + 2, num5 + 1].frameX;
				frameX7 -= 378;
				*Main.tile[num6, num5].type = 186;
				*Main.tile[num6 + 1, num5].type = 186;
				*Main.tile[num6 + 2, num5].type = 186;
				*Main.tile[num6, num5 + 1].type = 186;
				*Main.tile[num6 + 1, num5 + 1].type = 186;
				*Main.tile[num6 + 2, num5 + 1].type = 186;
			}
			if (flag && type == 488 && WorldGen.gen)
			{
				for (int m = num6; m < num6 + 3; m++)
				{
					for (int n = num5; n < num5 + 2; n++)
					{
						Main.tile[m, n].active(true);
						*Main.tile[m, n].type = 488;
						*Main.tile[m, n].frameX = (short)((m - num6) * 18);
						*Main.tile[m, n].frameY = (short)((n - num5) * 18);
					}
					Main.tile[m, num5 + 2].active(true);
					*Main.tile[m, num5 + 2].type = 2;
					Main.tile[m, num5 + 2].slope(0);
					Main.tile[m, num5 + 2].halfBrick(false);
				}
				flag = false;
			}
			if (!flag)
			{
				return;
			}
			int frameX = (int)(*Main.tile[i, j].frameX);
			WorldGen.destroyObject = true;
			num9 = num5 + 3;
			if (flag2)
			{
				num9--;
			}
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int num11 = num6; num11 < num6 + 3; num11++)
			{
				for (int num12 = num5; num12 < num5 + 3; num12++)
				{
					if (Main.tile[num11, num12] == null)
					{
						Main.tile[num11, num12] = default(Tile);
					}
					if ((int)(*Main.tile[num11, num12].type) == type && Main.tile[num11, num12].active())
					{
						WorldGen.KillTile(num11, num12, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 14)
				{
					int type2;
					if (num7 >= 1 && num7 <= 3)
					{
						type2 = 637 + num7;
					}
					else if (num7 >= 15 && num7 <= 20)
					{
						type2 = 1698 + num7;
					}
					else if (num7 >= 4 && num7 <= 7)
					{
						type2 = 823 + num7;
					}
					else
					{
						switch (num7)
						{
						case 8:
							type2 = 917;
							goto IL_C71;
						case 9:
							type2 = 1144;
							goto IL_C71;
						case 10:
							type2 = 1397;
							goto IL_C71;
						case 11:
							type2 = 1400;
							goto IL_C71;
						case 12:
							type2 = 1403;
							goto IL_C71;
						case 13:
							type2 = 1460;
							goto IL_C71;
						case 14:
							type2 = 1510;
							goto IL_C71;
						case 21:
							type2 = 1794;
							goto IL_C71;
						case 22:
							type2 = 1816;
							goto IL_C71;
						case 23:
							type2 = 1926;
							goto IL_C71;
						case 24:
							type2 = 2248;
							goto IL_C71;
						case 25:
							type2 = 2259;
							goto IL_C71;
						case 26:
							type2 = 2532;
							goto IL_C71;
						case 27:
							type2 = 2550;
							goto IL_C71;
						case 28:
							type2 = 677;
							goto IL_C71;
						case 29:
							type2 = 2583;
							goto IL_C71;
						case 30:
							type2 = 2743;
							goto IL_C71;
						case 31:
							type2 = 2824;
							goto IL_C71;
						case 32:
							type2 = 3153;
							goto IL_C71;
						case 33:
							type2 = 3155;
							goto IL_C71;
						case 34:
							type2 = 3154;
							goto IL_C71;
						}
						type2 = 32;
					}
					IL_C71:
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				if (type <= 298)
				{
					if (type != 26)
					{
						if (type == 114)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 398, 1, false, 0, false, false);
							goto IL_2068;
						}
						if (type == 298)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2190, 1, false, 0, false, false);
							goto IL_2068;
						}
					}
					else
					{
						if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
						{
							WorldGen.SmashAltar(i, j);
							goto IL_2068;
						}
						goto IL_2068;
					}
				}
				else
				{
					if (type == 299)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2191, 1, false, 0, false, false);
						goto IL_2068;
					}
					if (type - 361 <= 3)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3073 + type - 361, 1, false, 0, false, false);
						goto IL_2068;
					}
					if (type == 469)
					{
						int type3 = 3920;
						if (num7 == 1)
						{
							type3 = 3948;
						}
						if (num7 == 2)
						{
							type3 = 3974;
						}
						if (num7 == 3)
						{
							type3 = 4162;
						}
						if (num7 == 4)
						{
							type3 = 4183;
						}
						if (num7 == 5)
						{
							type3 = 4204;
						}
						if (num7 == 6)
						{
							type3 = 4225;
						}
						if (num7 == 7)
						{
							type3 = 4314;
						}
						if (num7 == 8)
						{
							type3 = 4583;
						}
						if (num7 == 9)
						{
							type3 = 5165;
						}
						if (num7 == 10)
						{
							type3 = 5186;
						}
						if (num7 == 11)
						{
							type3 = 5207;
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
						goto IL_2068;
					}
				}
				if (type >= 391 && type <= 394)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 48, 32, 3254 + type - 391, 1, false, 0, false, false);
				}
				else if (type <= 339)
				{
					if (type <= 220)
					{
						if (type <= 89)
						{
							if (type != 17)
							{
								if (type != 77)
								{
									switch (type)
									{
									case 86:
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 332, 1, false, 0, false, false);
										break;
									case 87:
									{
										int type4;
										if (num7 >= 1 && num7 <= 3)
										{
											type4 = 640 + num7;
										}
										else if (num7 != 4)
										{
											if (num7 - 5 > 2)
											{
												if (num7 >= 8 && num7 <= 10)
												{
													type4 = 2254 + num7 - 8;
												}
												else if (num7 >= 11 && num7 <= 20)
												{
													type4 = 2376 + num7 - 11;
												}
												else
												{
													switch (num7)
													{
													case 21:
														type4 = 2531;
														break;
													case 22:
														type4 = 2548;
														break;
													case 23:
														type4 = 2565;
														break;
													case 24:
														type4 = 2580;
														break;
													case 25:
														type4 = 2671;
														break;
													case 26:
														type4 = 2821;
														break;
													case 27:
														type4 = 3141;
														break;
													case 28:
														type4 = 3143;
														break;
													case 29:
														type4 = 3142;
														break;
													case 30:
														type4 = 3915;
														break;
													case 31:
														type4 = 3916;
														break;
													case 32:
														type4 = 3944;
														break;
													case 33:
														type4 = 3971;
														break;
													case 34:
														type4 = 4158;
														break;
													case 35:
														type4 = 4179;
														break;
													case 36:
														type4 = 4200;
														break;
													case 37:
														type4 = 4221;
														break;
													case 38:
														type4 = 4310;
														break;
													case 39:
														type4 = 4579;
														break;
													case 40:
														type4 = 5161;
														break;
													case 41:
														type4 = 5182;
														break;
													case 42:
														type4 = 5203;
														break;
													default:
														type4 = 333;
														break;
													}
												}
											}
											else
											{
												type4 = 2245 + num7 - 5;
											}
										}
										else
										{
											type4 = 919;
										}
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type4, 1, false, 0, false, false);
										break;
									}
									case 88:
									{
										int dresserItemDrop = WorldGen.GetDresserItemDrop(num7);
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, dresserItemDrop, 1, false, 0, false, false);
										break;
									}
									case 89:
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetItemDrop_Benches(num7), 1, false, 0, false, false);
										break;
									}
								}
								else
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 221, 1, false, 0, false, false);
								}
							}
							else
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 33, 1, false, 0, false, false);
							}
						}
						else if (type <= 186)
						{
							if (type != 133)
							{
								if (type == 186)
								{
									if (frameX >= 864)
									{
										if (frameX <= 954)
										{
											Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											if (WorldGen.genRand.Next(3) != 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) != 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) != 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(2) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(2) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(2) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(4) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(4) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(4) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(5) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(5) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(5) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
										}
										else if (frameX <= 1062)
										{
											Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
											if (WorldGen.genRand.Next(2) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(4) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(40, 100), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(5) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(50, 100), false, 0, false, false);
											}
										}
										else if (frameX <= 1170)
										{
											Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(1, 7), false, 0, false, false);
											if (WorldGen.genRand.Next(2) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(2, 7), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(3) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(3, 7), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(4) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(4, 7), false, 0, false, false);
											}
											if (WorldGen.genRand.Next(5) == 0)
											{
												Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(5, 7), false, 0, false, false);
											}
										}
									}
								}
							}
							else if (frameX >= 54)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1221, 1, false, 0, false, false);
							}
							else
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 524, 1, false, 0, false, false);
							}
						}
						else if (type != 187)
						{
							switch (type)
							{
							case 215:
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, WorldGen.GetCampfireItemDrop(num7), 1, false, 0, false, false);
								break;
							case 217:
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 995, 1, false, 0, false, false);
								break;
							case 218:
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 996, 1, false, 0, false, false);
								break;
							case 219:
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
								break;
							case 220:
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
								break;
							}
						}
						else if (frameX >= 918 && frameX <= 970)
						{
							if (Main.rand.Next(50) == 0)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4144, 1, false, 0, false, false);
							}
							else
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 989, 1, false, 0, false, false);
							}
						}
					}
					else if (type <= 244)
					{
						if (type != 228)
						{
							if (type != 237)
							{
								if (type == 244)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1449, 1, false, 0, false, false);
								}
							}
							else
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1292, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
						}
					}
					else if (type <= 286)
					{
						if (type != 285)
						{
							if (type == 286)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2175, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2174, 1, false, 0, false, false);
						}
					}
					else if (type != 310)
					{
						if (type == 339)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2741, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2207, 1, false, 0, false, false);
					}
				}
				else if (type <= 538)
				{
					if (type <= 486)
					{
						if (type != 377)
						{
							if (type != 405)
							{
								if (type == 486)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4063, 1, false, 0, false, false);
								}
							}
							else
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3364, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3198, 1, false, 0, false, false);
						}
					}
					else if (type <= 532)
					{
						if (type != 488)
						{
							if (type == 532)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4364, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 9, WorldGen.genRand.Next(10, 21), false, 0, false, false);
						}
					}
					else if (type != 533)
					{
						if (type == 538)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4380, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4376, 1, false, 0, false, false);
					}
				}
				else if (type <= 582)
				{
					if (type <= 555)
					{
						if (type != 544)
						{
							if (type == 555)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4475, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4399, 1, false, 0, false, false);
						}
					}
					else if (type != 556)
					{
						if (type == 582)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4850, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4476, 1, false, 0, false, false);
					}
				}
				else if (type <= 629)
				{
					if (type != 619)
					{
						if (type == 629)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5133, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4963, 1, false, 0, false, false);
					}
				}
				else if (type != 642)
				{
					switch (type)
					{
					case 647:
					{
						int num13 = 0;
						if (num7 < 7)
						{
							num13 = 154;
						}
						else if (num7 < 13)
						{
							num13 = 3;
						}
						else if (num7 < 16)
						{
							num13 = 3;
						}
						else if (num7 < 18)
						{
							num13 = 71;
						}
						else if (num7 < 20)
						{
							num13 = 72;
						}
						else if (num7 < 22)
						{
							num13 = 73;
						}
						else if (num7 < 26)
						{
							num13 = 9;
						}
						else if (num7 < 32)
						{
							num13 = 593;
						}
						else if (num7 < 35)
						{
							num13 = 183;
						}
						if (num13 != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num13, 1, false, 0, false, false);
						}
						break;
					}
					case 648:
					{
						num7 += num3 * 35;
						int num14 = 0;
						if (num7 < 6)
						{
							num14 = 195;
						}
						else if (num7 < 9)
						{
							num14 = 174;
						}
						else if (num7 < 14)
						{
							num14 = 150;
						}
						else if (num7 < 17)
						{
							num14 = 3;
						}
						else if (num7 < 18)
						{
							num14 = 989;
						}
						else if (num7 < 21)
						{
							num14 = 1101;
						}
						else if (num7 < 29)
						{
							num14 = 9;
						}
						else if (num7 < 35)
						{
							num14 = 3271;
						}
						else if (num7 < 41)
						{
							num14 = 3086;
						}
						else if (num7 < 47)
						{
							num14 = 3081;
						}
						else if (num7 < 52)
						{
							num14 = 62;
						}
						else if (num7 < 55)
						{
							num14 = 154;
						}
						if (num14 != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num14, 1, false, 0, false, false);
						}
						break;
					}
					case 651:
					{
						int num15 = (num7 < 3) ? 195 : ((num7 >= 6) ? 331 : 62);
						if (num15 != 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num15, 1, false, 0, false, false);
						}
						break;
					}
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5296, 1, false, 0, false, false);
				}
				IL_2068:
				WorldGen.destroyObject = false;
				for (int num16 = num6 - 1; num16 < num6 + 4; num16++)
				{
					for (int num17 = num5 - 1; num17 < num5 + 4; num17++)
					{
						WorldGen.TileFrame(num16, num17, false, false);
					}
				}
				if (type == 488)
				{
					WorldGen.mysticLogsEvent.FallenLogDestroyed();
				}
			}
		}

		// Token: 0x06001268 RID: 4712 RVA: 0x00452BC0 File Offset: 0x00450DC0
		private static int GetDresserItemDrop(int style)
		{
			if (style >= 1 && style <= 3)
			{
				return 646 + style;
			}
			if (style == 4)
			{
				return 918;
			}
			if (style - 5 <= 10)
			{
				return 2386 + style - 5;
			}
			switch (style)
			{
			case 16:
				return 2529;
			case 17:
				return 2545;
			case 18:
				return 2562;
			case 19:
				return 2577;
			case 20:
				return 2637;
			case 21:
				return 2638;
			case 22:
				return 2639;
			case 23:
				return 2640;
			case 24:
				return 2816;
			case 25:
				return 3132;
			case 26:
				return 3134;
			case 27:
				return 3133;
			case 28:
				return 3911;
			case 29:
				return 3912;
			case 30:
				return 3913;
			case 31:
				return 3914;
			case 32:
				return 3934;
			case 33:
				return 3968;
			case 34:
				return 4148;
			case 35:
				return 4169;
			case 36:
				return 4190;
			case 37:
				return 4211;
			case 38:
				return 4301;
			case 39:
				return 4569;
			case 40:
				return 5151;
			case 41:
				return 5172;
			case 42:
				return 5193;
			default:
				return 334;
			}
		}

		// Token: 0x06001269 RID: 4713 RVA: 0x00452D1C File Offset: 0x00450F1C
		private static int GetCampfireItemDrop(int style)
		{
			if (style == 0)
			{
				return 966;
			}
			if (style - 1 <= 4)
			{
				return 3046 + style - 1;
			}
			switch (style)
			{
			case 6:
				return 3723;
			case 7:
				return 3724;
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
				return 4689 + style - 8;
			default:
				if (style == 14)
				{
					return 5299;
				}
				if (style != 15)
				{
					return 966;
				}
				return 5357;
			}
		}

		// Token: 0x0600126A RID: 4714 RVA: 0x00452DA4 File Offset: 0x00450FA4
		public unsafe static void Check3x4(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num3 = 0;
			int num4 = 0;
			int num5 = (int)(*Main.tile[i, j].frameX / 18);
			int num6 = (int)(*Main.tile[i, j].frameY / 18);
			while (num5 >= 3)
			{
				num3++;
				num5 -= 3;
			}
			while (num6 >= 4)
			{
				num4++;
				num6 -= 4;
			}
			int num7 = i - num5;
			int num8 = j - num6;
			for (int k = num7; k < num7 + 3; k++)
			{
				for (int l = num8; l < num8 + 4; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != num3 * 54 + (k - num7) * 18 || (int)(*Main.tile[k, l].frameY) != num4 * 72 + (l - num8) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num8 + 4] == null)
				{
					Main.tile[k, num8 + 4] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num8 + 4))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num7; m < num7 + 3; m++)
			{
				for (int n = num8; n < num8 + 4; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type <= 102)
				{
					if (type != 101)
					{
						if (type == 102)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 355, 1, false, 0, false, false);
						}
					}
					else
					{
						int type2;
						switch (num3)
						{
						case 1:
							type2 = 1414;
							break;
						case 2:
							type2 = 1415;
							break;
						case 3:
							type2 = 1416;
							break;
						case 4:
							type2 = 1463;
							break;
						case 5:
							type2 = 1512;
							break;
						case 6:
							type2 = 2020;
							break;
						case 7:
							type2 = 2021;
							break;
						case 8:
							type2 = 2022;
							break;
						case 9:
							type2 = 2023;
							break;
						case 10:
							type2 = 2024;
							break;
						case 11:
							type2 = 2025;
							break;
						case 12:
							type2 = 2026;
							break;
						case 13:
							type2 = 2027;
							break;
						case 14:
							type2 = 2028;
							break;
						case 15:
							type2 = 2029;
							break;
						case 16:
							type2 = 2030;
							break;
						case 17:
							type2 = 2031;
							break;
						case 18:
						case 19:
						case 20:
						case 21:
							type2 = 2135 + num3 - 18;
							break;
						default:
							switch (num3)
							{
							case 22:
								type2 = 2233;
								break;
							case 23:
								type2 = 2536;
								break;
							case 24:
								type2 = 2540;
								break;
							case 25:
								type2 = 2554;
								break;
							case 26:
								type2 = 2569;
								break;
							case 27:
								type2 = 2670;
								break;
							case 28:
								type2 = 2817;
								break;
							case 29:
								type2 = 3165;
								break;
							case 30:
								type2 = 3167;
								break;
							case 31:
								type2 = 3166;
								break;
							case 32:
								type2 = 3917;
								break;
							case 33:
								type2 = 3933;
								break;
							case 34:
								type2 = 3960;
								break;
							case 35:
								type2 = 4147;
								break;
							case 36:
								type2 = 4168;
								break;
							case 37:
								type2 = 4189;
								break;
							case 38:
								type2 = 4210;
								break;
							case 39:
								type2 = 4300;
								break;
							case 40:
								type2 = 4568;
								break;
							case 41:
								type2 = 5150;
								break;
							case 42:
								type2 = 5171;
								break;
							case 43:
								type2 = 5192;
								break;
							default:
								type2 = 354;
								break;
							}
							break;
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
					}
				}
				else if (type != 463)
				{
					if (type == 617)
					{
						if (num3 == 27)
						{
							short type3 = 5110;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, (int)type3, 1, false, 0, false, false);
						}
						else
						{
							int type4 = 4924 + num3;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type4, 1, false, 0, false, false);
						}
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3813, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num9 = num7 - 1; num9 < num7 + 4; num9++)
				{
					for (int num10 = num8 - 1; num10 < num8 + 4; num10++)
					{
						WorldGen.TileFrame(num9, num10, false, false);
					}
				}
			}
		}

		// Token: 0x0600126B RID: 4715 RVA: 0x004533AC File Offset: 0x004515AC
		public unsafe static void Check5x4(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num3 = 0;
			int num4;
			for (num4 = (int)(*Main.tile[i, j].frameX / 18); num4 >= 5; num4 -= 5)
			{
				num3++;
			}
			int num5 = i - num4;
			int num6 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			for (int k = num5; k < num5 + 5; k++)
			{
				for (int l = num6; l < num6 + 4; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != num3 * 90 + (k - num5) * 18 || (int)(*Main.tile[k, l].frameY) != (l - num6) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num6 + 4] == null)
				{
					Main.tile[k, num6 + 4] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num6 + 4))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num5; m < num5 + 5; m++)
			{
				for (int n = num6; n < num6 + 4; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 464)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3814, 1, false, 0, false, false);
				}
				if (type == 466)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3816, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num7 = num5 - 1; num7 < num5 + 6; num7++)
				{
					for (int num8 = num6 - 1; num8 < num6 + 5; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x0600126C RID: 4716 RVA: 0x00453660 File Offset: 0x00451860
		public unsafe static void Check6x3(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = i + (int)(*Main.tile[i, j].frameX / 18 * -1);
			int num2 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			for (int k = num; k < num + 6; k++)
			{
				for (int l = num2; l < num2 + 3; l++)
				{
					int num3 = (k - num) * 18;
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != num3 || (int)(*Main.tile[k, l].frameY) != (l - num2) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num2 + 3] == null)
				{
					Main.tile[k, num2 + 3] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num2 + 3) && (!Main.tile[k, num2 + 3].nactive() || !Main.tileSolidTop[(int)(*Main.tile[k, num2 + 3].type)] || *Main.tile[k, num2 + 3].frameY != 0))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 6; m++)
			{
				for (int n = num2; n < num2 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 275)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2162, 1, false, 0, false, false);
				}
				if (type == 413)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3565, 1, false, 0, false, false);
				}
				if (type == 414)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3566, 1, false, 0, false, false);
				}
				if (type == 276)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2163, 1, false, 0, false, false);
				}
				if (type == 277)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2164, 1, false, 0, false, false);
				}
				if (type == 278)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2165, 1, false, 0, false, false);
				}
				if (type == 279)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2166, 1, false, 0, false, false);
				}
				if (type == 280)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2167, 1, false, 0, false, false);
				}
				if (type == 281)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2168, 1, false, 0, false, false);
				}
				if (type == 296)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2186, 1, false, 0, false, false);
				}
				if (type == 297)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2187, 1, false, 0, false, false);
				}
				if (type == 309)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2206, 1, false, 0, false, false);
				}
				if (type == 358)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3070, 1, false, 0, false, false);
				}
				if (type == 359)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3071, 1, false, 0, false, false);
				}
				if (type == 542)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4396, 1, false, 0, false, false);
				}
				if (type == 550)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4461, 1, false, 0, false, false);
				}
				if (type == 551)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4462, 1, false, 0, false, false);
				}
				if (type == 553)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4473, 1, false, 0, false, false);
				}
				if (type == 554)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4474, 1, false, 0, false, false);
				}
				if (type == 558)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4481, 1, false, 0, false, false);
				}
				if (type == 559)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4483, 1, false, 0, false, false);
				}
				if (type == 599)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4882, 1, false, 0, false, false);
				}
				if (type == 600)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4883, 1, false, 0, false, false);
				}
				if (type == 601)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4884, 1, false, 0, false, false);
				}
				if (type == 602)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4885, 1, false, 0, false, false);
				}
				if (type == 603)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4886, 1, false, 0, false, false);
				}
				if (type == 604)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4887, 1, false, 0, false, false);
				}
				if (type == 605)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4888, 1, false, 0, false, false);
				}
				if (type == 606)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4889, 1, false, 0, false, false);
				}
				if (type == 607)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4890, 1, false, 0, false, false);
				}
				if (type == 608)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4891, 1, false, 0, false, false);
				}
				if (type == 609)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4892, 1, false, 0, false, false);
				}
				if (type == 610)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4893, 1, false, 0, false, false);
				}
				if (type == 611)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4894, 1, false, 0, false, false);
				}
				if (type == 612)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4895, 1, false, 0, false, false);
				}
				if (type == 632)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5213, 1, false, 0, false, false);
				}
				if (type == 640)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5301, 1, false, 0, false, false);
				}
				if (type == 643)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5314, 1, false, 0, false, false);
				}
				if (type == 644)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5315, 1, false, 0, false, false);
				}
				if (type == 645)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5316, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num4 = num - 1; num4 < num + 7; num4++)
				{
					for (int num5 = num2 - 1; num5 < num2 + 4; num5++)
					{
						WorldGen.TileFrame(num4, num5, false, false);
					}
				}
			}
		}

		// Token: 0x0600126D RID: 4717 RVA: 0x00453FC0 File Offset: 0x004521C0
		public unsafe static void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 3; i < x + 3; i++)
			{
				for (int j = y - 2; j <= y; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int)(*Main.tile[i, y + 1].type)] || *Main.tile[i, y + 1].frameY != 0))
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			int num = 0;
			for (int k = x - 3; k < x + 3; k++)
			{
				int num2 = 0;
				for (int l = y - 2; l <= y; l++)
				{
					Main.tile[k, l].active(true);
					*Main.tile[k, l].frameY = (short)num2;
					*Main.tile[k, l].frameX = (short)num;
					*Main.tile[k, l].type = type;
					num2 += 18;
				}
				num += 18;
			}
		}

		// Token: 0x0600126E RID: 4718 RVA: 0x00454188 File Offset: 0x00452388
		public unsafe static void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 3; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			short num = 0;
			if (direction == 1)
			{
				num = 72;
			}
			int num2 = 36 * style;
			if (flag)
			{
				Main.tile[x - 1, y - 1].active(true);
				*Main.tile[x - 1, y - 1].frameY = (short)num2;
				*Main.tile[x - 1, y - 1].frameX = num;
				*Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				*Main.tile[x, y - 1].frameY = (short)num2;
				*Main.tile[x, y - 1].frameX = 18 + num;
				*Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				*Main.tile[x + 1, y - 1].frameY = (short)num2;
				*Main.tile[x + 1, y - 1].frameX = 36 + num;
				*Main.tile[x + 1, y - 1].type = type;
				Main.tile[x + 2, y - 1].active(true);
				*Main.tile[x + 2, y - 1].frameY = (short)num2;
				*Main.tile[x + 2, y - 1].frameX = 54 + num;
				*Main.tile[x + 2, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				*Main.tile[x - 1, y].frameY = (short)(num2 + 18);
				*Main.tile[x - 1, y].frameX = num;
				*Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = (short)(num2 + 18);
				*Main.tile[x, y].frameX = 18 + num;
				*Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				*Main.tile[x + 1, y].frameY = (short)(num2 + 18);
				*Main.tile[x + 1, y].frameX = 36 + num;
				*Main.tile[x + 1, y].type = type;
				Main.tile[x + 2, y].active(true);
				*Main.tile[x + 2, y].frameY = (short)(num2 + 18);
				*Main.tile[x + 2, y].frameX = 54 + num;
				*Main.tile[x + 2, y].type = type;
			}
		}

		// Token: 0x0600126F RID: 4719 RVA: 0x004545C8 File Offset: 0x004527C8
		public static void ShootFromCannon(int x, int y, int angle, int ammo, int Damage, float KnockBack, int owner, bool fromWire)
		{
			float num = 14f;
			float num2 = 0f;
			float num3 = 0f;
			int type = 162;
			if (ammo == 2)
			{
				type = 281;
			}
			if (ammo == 3)
			{
				type = 178;
			}
			if (ammo == 4)
			{
				type = 601;
				num = 3f;
			}
			if (ammo == 5)
			{
				type = 601;
				num = 3f;
			}
			int num4 = 0;
			int num5 = 0;
			if (ammo == 5)
			{
				num4 = 1;
			}
			if (ammo == 2)
			{
				num5 = owner + 1;
			}
			if (angle == 0)
			{
				num2 = 10f;
				num3 = 0f;
			}
			if (angle == 1)
			{
				num2 = 7.5f;
				num3 = -2.5f;
			}
			if (angle == 2)
			{
				num2 = 5f;
				num3 = -5f;
			}
			if (angle == 3)
			{
				num2 = 2.75f;
				num3 = -6f;
			}
			if (angle == 4)
			{
				num2 = 0f;
				num3 = -10f;
			}
			if (angle == 5)
			{
				num2 = -2.75f;
				num3 = -6f;
			}
			if (angle == 6)
			{
				num2 = -5f;
				num3 = -5f;
			}
			if (angle == 7)
			{
				num2 = -7.5f;
				num3 = -2.5f;
			}
			if (angle == 8)
			{
				num2 = -10f;
				num3 = 0f;
			}
			Vector2 vector;
			vector..ctor((float)((x + 2) * 16), (float)((y + 2) * 16));
			float num6 = num2;
			float num7 = num3;
			float num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
			if (ammo == 4 || ammo == 5)
			{
				if (angle == 4)
				{
					vector.X += 5f;
				}
				vector.Y += 5f;
			}
			bool flag = true;
			if (ammo == 2 && !WorldGen.BunnyCannonCanFire())
			{
				flag = false;
			}
			if (!flag)
			{
				return;
			}
			num8 = num / num8;
			num6 *= num8;
			num7 *= num8;
			if (Main.myPlayer != owner && Main.netMode == 2 && (ammo == 4 || ammo == 5))
			{
				NetMessage.SendData(108, owner, -1, null, Damage, KnockBack, (float)x, (float)y, angle, ammo, owner);
				return;
			}
			if (Main.netMode == 2)
			{
				owner = Main.myPlayer;
			}
			int num9 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWire, Main.player[owner]), vector.X, vector.Y, num6, num7, type, Damage, KnockBack, owner, (float)num4, (float)num5, 0f);
			Main.projectile[num9].originatedFromActivableTile = true;
		}

		// Token: 0x06001270 RID: 4720 RVA: 0x004547D8 File Offset: 0x004529D8
		public static bool BunnyCannonCanFire()
		{
			int num = 1;
			int num2 = 0;
			int num3 = 100;
			for (int i = 0; i < num3; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC == null || !nPC.active)
				{
					num2++;
				}
			}
			for (int j = 0; j < Main.projectile.Length; j++)
			{
				Projectile projectile = Main.projectile[j];
				if (projectile != null && projectile.active && projectile.type == 281)
				{
					num2--;
					if (num2 <= 0)
					{
						return false;
					}
				}
			}
			return num2 >= num;
		}

		// Token: 0x06001271 RID: 4721 RVA: 0x00454860 File Offset: 0x00452A60
		public unsafe static void SwitchCannon(int i, int j)
		{
			int num;
			for (num = (int)(*Main.tile[i, j].frameX / 18); num >= 4; num -= 4)
			{
			}
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameY / 18); num2 >= 3; num2 -= 3)
			{
			}
			int num3 = 1;
			if (num < 2)
			{
				num3 = -1;
			}
			num = i - num;
			num2 = j - num2;
			if ((num3 == 1 && *Main.tile[num, num2].frameY <= 52) || (num3 == -1 && *Main.tile[num, num2].frameY >= 432))
			{
				return;
			}
			num3 *= -54;
			for (int k = num; k < num + 4; k++)
			{
				for (int l = num2; l < num2 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (Main.tile[k, l].active() && *Main.tile[k, l].type == 209)
					{
						*Main.tile[k, l].frameY = (short)((int)(*Main.tile[k, l].frameY) + num3);
					}
				}
			}
			NetMessage.SendTileSquare(-1, num, num2, 4, 3, TileChangeType.None);
		}

		// Token: 0x06001272 RID: 4722 RVA: 0x004549D8 File Offset: 0x00452BD8
		public unsafe static void CheckCannon(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num >= 4)
			{
				num2++;
				num -= 4;
			}
			num = i - num;
			int num3 = (int)(*Main.tile[i, j].frameY / 18);
			int num4 = 0;
			while (num3 >= 3)
			{
				num4 += 54;
				num3 -= 3;
			}
			num3 = j - num3;
			int num5 = 72 * num2;
			for (int k = num; k < num + 4; k++)
			{
				int num6 = num4;
				for (int l = num3; l < num3 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != num5 || (int)(*Main.tile[k, l].frameY) != num6)
					{
						flag = true;
					}
					num6 += 18;
				}
				if (Main.tile[k, num3 + 3] == null)
				{
					Main.tile[k, num3 + 3] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num3 + 3) && k != num && k != num + 3)
				{
					flag = true;
				}
				num5 += 18;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 4; m++)
			{
				for (int n = num3; n < num3 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				int type2 = 928;
				switch (num2)
				{
				case 1:
					type2 = 1337;
					break;
				case 2:
					type2 = 3369;
					break;
				case 3:
				case 4:
					type2 = 3664;
					break;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
				for (int num7 = num; num7 < num + 4; num7++)
				{
					for (int num8 = num3; num8 < num3 + 3; num8++)
					{
						WorldGen.TileFrame(num7, num8, false, false);
					}
				}
			}
		}

		// Token: 0x06001273 RID: 4723 RVA: 0x00454CAC File Offset: 0x00452EAC
		public unsafe static void PlaceCannon(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 3; i++)
			{
				for (int j = y - 2; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1) && i != x - 1 && i != x + 2)
				{
					flag = false;
				}
			}
			int num = 72 * style;
			int num2 = 0;
			if (flag)
			{
				Main.tile[x - 1, y - 2].active(true);
				*Main.tile[x - 1, y - 2].frameY = (short)num2;
				*Main.tile[x - 1, y - 2].frameX = (short)num;
				*Main.tile[x - 1, y - 2].type = type;
				Main.tile[x, y - 2].active(true);
				*Main.tile[x, y - 2].frameY = (short)num2;
				*Main.tile[x, y - 2].frameX = (short)(18 + num);
				*Main.tile[x, y - 2].type = type;
				Main.tile[x + 1, y - 2].active(true);
				*Main.tile[x + 1, y - 2].frameY = (short)num2;
				*Main.tile[x + 1, y - 2].frameX = (short)(36 + num);
				*Main.tile[x + 1, y - 2].type = type;
				Main.tile[x + 2, y - 2].active(true);
				*Main.tile[x + 2, y - 2].frameY = (short)num2;
				*Main.tile[x + 2, y - 2].frameX = (short)(54 + num);
				*Main.tile[x + 2, y - 2].type = type;
				Main.tile[x - 1, y - 1].active(true);
				*Main.tile[x - 1, y - 1].frameY = (short)(num2 + 18);
				*Main.tile[x - 1, y - 1].frameX = (short)num;
				*Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				*Main.tile[x, y - 1].frameY = (short)(num2 + 18);
				*Main.tile[x, y - 1].frameX = (short)(18 + num);
				*Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				*Main.tile[x + 1, y - 1].frameY = (short)(num2 + 18);
				*Main.tile[x + 1, y - 1].frameX = (short)(36 + num);
				*Main.tile[x + 1, y - 1].type = type;
				Main.tile[x + 2, y - 1].active(true);
				*Main.tile[x + 2, y - 1].frameY = (short)(num2 + 18);
				*Main.tile[x + 2, y - 1].frameX = (short)(54 + num);
				*Main.tile[x + 2, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				*Main.tile[x - 1, y].frameY = (short)(num2 + 36);
				*Main.tile[x - 1, y].frameX = (short)num;
				*Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = (short)(num2 + 36);
				*Main.tile[x, y].frameX = (short)(18 + num);
				*Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				*Main.tile[x + 1, y].frameY = (short)(num2 + 36);
				*Main.tile[x + 1, y].frameX = (short)(36 + num);
				*Main.tile[x + 1, y].type = type;
				Main.tile[x + 2, y].active(true);
				*Main.tile[x + 2, y].frameY = (short)(num2 + 36);
				*Main.tile[x + 2, y].frameX = (short)(54 + num);
				*Main.tile[x + 2, y].type = type;
			}
		}

		// Token: 0x06001274 RID: 4724 RVA: 0x004552B4 File Offset: 0x004534B4
		public unsafe static void SwitchMB(int i, int j)
		{
			int num3;
			for (num3 = (int)(*Main.tile[i, j].frameY / 18); num3 >= 2; num3 -= 2)
			{
			}
			int num4 = (int)(*Main.tile[i, j].frameX / 18);
			if (num4 >= 2)
			{
				num4 -= 2;
			}
			int num5 = i - num4;
			int num6 = j - num3;
			for (int k = num5; k < num5 + 2; k++)
			{
				for (int l = num6; l < num6 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (Main.tile[k, l].active() && (*Main.tile[k, l].type == 139 || *Main.tile[k, l].type == 35 || TileLoader.IsModMusicBox(Main.tile[k, l])))
					{
						if (*Main.tile[k, l].frameX < 36)
						{
							ref short frameX = ref Main.tile[k, l].frameX;
							frameX += 36;
						}
						else
						{
							ref short frameX2 = ref Main.tile[k, l].frameX;
							frameX2 -= 36;
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num5, num6);
				Wiring.SkipWire(num5 + 1, num6);
				Wiring.SkipWire(num5, num6 + 1);
				Wiring.SkipWire(num5 + 1, num6 + 1);
			}
			NetMessage.SendTileSquare(-1, num5, num6, 2, 2, TileChangeType.None);
		}

		// Token: 0x06001275 RID: 4725 RVA: 0x00455470 File Offset: 0x00453670
		public unsafe static void SwitchMonolith(int i, int j)
		{
			int num3;
			for (num3 = (int)(*Main.tile[i, j].frameX / 18); num3 >= 2; num3 -= 2)
			{
			}
			int num4;
			for (num4 = (int)(*Main.tile[i, j].frameY / 18); num4 >= 3; num4 -= 3)
			{
			}
			int num5 = i - num3;
			int num6 = j - num4;
			for (int k = num5; k < num5 + 2; k++)
			{
				for (int l = num6; l < num6 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					Tile tile = Main.tile[k, l];
					if (tile.active())
					{
						if (*tile.type == 410)
						{
							if (*tile.frameY < 56)
							{
								ref short frameY = ref tile.frameY;
								frameY += 56;
							}
							else
							{
								ref short frameY2 = ref tile.frameY;
								frameY2 -= 56;
							}
						}
						else if (*tile.type == 480)
						{
							if (*tile.frameY < 54)
							{
								ref short frameY3 = ref tile.frameY;
								frameY3 += 54;
							}
							else
							{
								ref short frameY4 = ref tile.frameY;
								frameY4 -= 54;
							}
						}
						else if (*tile.type == 509)
						{
							if (*tile.frameY < 54)
							{
								ref short frameY5 = ref tile.frameY;
								frameY5 += 54;
							}
							else
							{
								ref short frameY6 = ref tile.frameY;
								frameY6 -= 54;
							}
						}
						else if (*tile.type == 657)
						{
							if (*tile.frameY < 54)
							{
								ref short frameY7 = ref tile.frameY;
								frameY7 += 54;
							}
							else
							{
								ref short frameY8 = ref tile.frameY;
								frameY8 -= 54;
							}
						}
						else if (*tile.type == 658)
						{
							short num7 = 54;
							short num8 = 3;
							short num9 = num7 * num8;
							ref short frameY9 = ref tile.frameY;
							frameY9 += num7;
							if (*tile.frameY >= num9)
							{
								ref short frameY10 = ref tile.frameY;
								frameY10 -= num9;
							}
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num5, num6);
				Wiring.SkipWire(num5, num6 + 1);
				Wiring.SkipWire(num5, num6 + 2);
				Wiring.SkipWire(num5 + 1, num6);
				Wiring.SkipWire(num5 + 1, num6 + 1);
				Wiring.SkipWire(num5 + 1, num6 + 2);
			}
			NetMessage.SendTileSquare(-1, num5, num6, 2, 3, TileChangeType.None);
		}

		// Token: 0x06001276 RID: 4726 RVA: 0x004556DC File Offset: 0x004538DC
		public unsafe static void SwitchFountain(int i, int j)
		{
			int num3;
			for (num3 = (int)(*Main.tile[i, j].frameX / 18); num3 >= 2; num3 -= 2)
			{
			}
			int num4 = (int)(*Main.tile[i, j].frameY / 18);
			if (num4 >= 4)
			{
				num4 -= 4;
			}
			int num5 = i - num3;
			int num6 = j - num4;
			for (int k = num5; k < num5 + 2; k++)
			{
				for (int l = num6; l < num6 + 4; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (Main.tile[k, l].active() && *Main.tile[k, l].type == 207)
					{
						if (*Main.tile[k, l].frameY < 72)
						{
							ref short frameY = ref Main.tile[k, l].frameY;
							frameY += 72;
						}
						else
						{
							ref short frameY2 = ref Main.tile[k, l].frameY;
							frameY2 -= 72;
						}
					}
				}
			}
			if (Wiring.running)
			{
				Wiring.SkipWire(num5, num6);
				Wiring.SkipWire(num5, num6 + 1);
				Wiring.SkipWire(num5, num6 + 2);
				Wiring.SkipWire(num5, num6 + 3);
				Wiring.SkipWire(num5 + 1, num6);
				Wiring.SkipWire(num5 + 1, num6 + 1);
				Wiring.SkipWire(num5 + 1, num6 + 2);
				Wiring.SkipWire(num5 + 1, num6 + 3);
			}
			NetMessage.SendTileSquare(-1, num5, num6, 2, 4, TileChangeType.None);
		}

		// Token: 0x06001277 RID: 4727 RVA: 0x0045588C File Offset: 0x00453A8C
		public unsafe static void CheckMB(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num3 = 0;
			int num4;
			for (num4 = (int)(*Main.tile[i, j].frameY / 18); num4 >= 2; num4 -= 2)
			{
				num3++;
			}
			int num5 = (int)(*Main.tile[i, j].frameX / 18);
			int num6 = 0;
			if (num5 >= 2)
			{
				num5 -= 2;
				num6++;
			}
			int num7 = i - num5;
			int num8 = j - num4;
			for (int k = num7; k < num7 + 2; k++)
			{
				for (int l = num8; l < num8 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num7) * 18 + num6 * 36 || (int)(*Main.tile[k, l].frameY) != (l - num8) * 18 + num3 * 36)
					{
						flag = true;
					}
				}
				if (!Main.tile[k, num8 + 2].nactive())
				{
					flag = true;
				}
				else if (!Main.tileSolid[(int)(*Main.tile[k, num8 + 2].type)] && !Main.tileTable[(int)(*Main.tile[k, num8 + 2].type)])
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num7; m < num7 + 2; m++)
			{
				for (int n = num8; n < num8 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 35)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1813, 1, false, 0, false, false);
				}
				else if (num3 == 28)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1963, 1, false, 0, false, false);
				}
				else if (num3 == 29)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1964, 1, false, 0, false, false);
				}
				else if (num3 == 30)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1965, 1, false, 0, false, false);
				}
				else if (num3 == 31)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2742, 1, false, 0, false, false);
				}
				else if (num3 == 32)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3044, 1, false, 0, false, false);
				}
				else if (num3 == 33)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3235, 1, false, 0, false, false);
				}
				else if (num3 == 34)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3236, 1, false, 0, false, false);
				}
				else if (num3 == 35)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3237, 1, false, 0, false, false);
				}
				else if (num3 == 36)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3370, 1, false, 0, false, false);
				}
				else if (num3 == 37)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3371, 1, false, 0, false, false);
				}
				else if (num3 == 38)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3796, 1, false, 0, false, false);
				}
				else if (num3 == 39)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3869, 1, false, 0, false, false);
				}
				else if (num3 == 43)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4077, 1, false, 0, false, false);
				}
				else if (num3 == 41)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4078, 1, false, 0, false, false);
				}
				else if (num3 == 42)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4079, 1, false, 0, false, false);
				}
				else if (num3 == 44)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4080, 1, false, 0, false, false);
				}
				else if (num3 == 45)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4081, 1, false, 0, false, false);
				}
				else if (num3 == 40)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4082, 1, false, 0, false, false);
				}
				else if (num3 == 46)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4237, 1, false, 0, false, false);
				}
				else if (num3 == 47)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4356, 1, false, 0, false, false);
				}
				else if (num3 == 48)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4357, 1, false, 0, false, false);
				}
				else if (num3 == 49)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4358, 1, false, 0, false, false);
				}
				else if (num3 == 50)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4421, 1, false, 0, false, false);
				}
				else if (num3 == 51)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4606, 1, false, 0, false, false);
				}
				else if (num3 == 52)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4979, 1, false, 0, false, false);
				}
				else if (num3 == 53)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4985, 1, false, 0, false, false);
				}
				else if (num3 == 54)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4990, 1, false, 0, false, false);
				}
				else if (num3 == 55)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4991, 1, false, 0, false, false);
				}
				else if (num3 == 56)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4992, 1, false, 0, false, false);
				}
				else if (num3 == 57)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5006, 1, false, 0, false, false);
				}
				else if (num3 == 58)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5014, 1, false, 0, false, false);
				}
				else if (num3 == 59)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5015, 1, false, 0, false, false);
				}
				else if (num3 == 60)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5016, 1, false, 0, false, false);
				}
				else if (num3 == 61)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5017, 1, false, 0, false, false);
				}
				else if (num3 == 62)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5018, 1, false, 0, false, false);
				}
				else if (num3 == 63)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5019, 1, false, 0, false, false);
				}
				else if (num3 == 64)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5020, 1, false, 0, false, false);
				}
				else if (num3 == 65)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5021, 1, false, 0, false, false);
				}
				else if (num3 == 66)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5022, 1, false, 0, false, false);
				}
				else if (num3 == 67)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5023, 1, false, 0, false, false);
				}
				else if (num3 == 68)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5024, 1, false, 0, false, false);
				}
				else if (num3 == 69)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5025, 1, false, 0, false, false);
				}
				else if (num3 == 70)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5026, 1, false, 0, false, false);
				}
				else if (num3 == 71)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5027, 1, false, 0, false, false);
				}
				else if (num3 == 72)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5028, 1, false, 0, false, false);
				}
				else if (num3 == 73)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5029, 1, false, 0, false, false);
				}
				else if (num3 == 74)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5030, 1, false, 0, false, false);
				}
				else if (num3 == 75)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5031, 1, false, 0, false, false);
				}
				else if (num3 == 76)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5032, 1, false, 0, false, false);
				}
				else if (num3 == 77)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5033, 1, false, 0, false, false);
				}
				else if (num3 == 78)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5034, 1, false, 0, false, false);
				}
				else if (num3 == 79)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5035, 1, false, 0, false, false);
				}
				else if (num3 == 80)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5036, 1, false, 0, false, false);
				}
				else if (num3 == 81)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5037, 1, false, 0, false, false);
				}
				else if (num3 == 82)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5038, 1, false, 0, false, false);
				}
				else if (num3 == 83)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5039, 1, false, 0, false, false);
				}
				else if (num3 == 84)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5040, 1, false, 0, false, false);
				}
				else if (num3 == 85)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5044, 1, false, 0, false, false);
				}
				else if (num3 == 86)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5112, 1, false, 0, false, false);
				}
				else if (num3 == 87)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5362, 1, false, 0, false, false);
				}
				else if (num3 >= 13)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1596 + num3 - 13, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 562 + num3, 1, false, 0, false, false);
				}
				for (int num9 = num7 - 1; num9 < num7 + 3; num9++)
				{
					for (int num10 = num8 - 1; num10 < num8 + 3; num10++)
					{
						WorldGen.TileFrame(num9, num10, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001278 RID: 4728 RVA: 0x0045663C File Offset: 0x0045483C
		public unsafe static void PlaceMB(int X, int y, ushort type, int style)
		{
			int num = X + 1;
			if (num < 5 || num > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = num - 1; i < num + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!Main.tile[i, y + 1].active() || Main.tile[i, y + 1].halfBrick() || (!Main.tileSolid[(int)(*Main.tile[i, y + 1].type)] && !Main.tileTable[(int)(*Main.tile[i, y + 1].type)]))
				{
					flag = false;
				}
			}
			if (flag)
			{
				Main.tile[num - 1, y - 1].active(true);
				*Main.tile[num - 1, y - 1].frameY = (short)(style * 36);
				*Main.tile[num - 1, y - 1].frameX = 0;
				*Main.tile[num - 1, y - 1].type = type;
				Main.tile[num, y - 1].active(true);
				*Main.tile[num, y - 1].frameY = (short)(style * 36);
				*Main.tile[num, y - 1].frameX = 18;
				*Main.tile[num, y - 1].type = type;
				Main.tile[num - 1, y].active(true);
				*Main.tile[num - 1, y].frameY = (short)(style * 36 + 18);
				*Main.tile[num - 1, y].frameX = 0;
				*Main.tile[num - 1, y].type = type;
				Main.tile[num, y].active(true);
				*Main.tile[num, y].frameY = (short)(style * 36 + 18);
				*Main.tile[num, y].frameX = 18;
				*Main.tile[num, y].type = type;
			}
		}

		// Token: 0x06001279 RID: 4729 RVA: 0x00456924 File Offset: 0x00454B24
		public unsafe static void Place2x2(int x, int y, ushort type, int style)
		{
			if (type == 95 || type == 126)
			{
				y++;
			}
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			if (type == 172)
			{
				if (!WorldGen.CanPlaceSink(x, y, type, style))
				{
					return;
				}
			}
			else
			{
				for (int i = x - 1; i < x + 1; i++)
				{
					for (int j = y - 1; j < y + 1; j++)
					{
						Tile tileSafely = Framing.GetTileSafely(i, j);
						if (tileSafely.active() || (type == 98 && *tileSafely.liquid > 0))
						{
							return;
						}
					}
					if (type != 95 && type != 126)
					{
						if (type != 132)
						{
							Tile tileSafely2 = Framing.GetTileSafely(i, y + 1);
							if (!tileSafely2.nactive() || (!WorldGen.SolidTile2(tileSafely2) && !Main.tileTable[(int)(*tileSafely2.type)]))
							{
								return;
							}
						}
					}
					else
					{
						Tile tileSafely3 = Framing.GetTileSafely(i, y - 2);
						if (!tileSafely3.nactive() || !Main.tileSolid[(int)(*tileSafely3.type)] || Main.tileSolidTop[(int)(*tileSafely3.type)])
						{
							return;
						}
					}
				}
			}
			if (type == 132)
			{
				bool flag = true;
				if (Main.tile[x - 1, y + 1] == null)
				{
					Main.tile[x - 1, y + 1] = default(Tile);
				}
				if (Main.tile[x, y + 1] == null)
				{
					Main.tile[x, y + 1] = default(Tile);
				}
				if (!Main.tile[x - 1, y + 1].nactive() || (!WorldGen.SolidTile2(x - 1, y + 1) && !Main.tileTable[(int)(*Main.tile[x - 1, y + 1].type)]))
				{
					flag = false;
				}
				if (!Main.tile[x, y + 1].nactive() || (!WorldGen.SolidTile2(x, y + 1) && !Main.tileTable[(int)(*Main.tile[x, y + 1].type)]))
				{
					flag = false;
				}
				if (!flag && (*Main.tile[x - 1, y - 1].wall < 1 || *Main.tile[x, y - 1].wall < 1 || *Main.tile[x - 1, y].wall < 1 || *Main.tile[x - 1, y].wall < 1))
				{
					return;
				}
			}
			x--;
			y--;
			int num = (type == 172) ? 38 : 36;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Tile tileSafely4 = Main.tile[x + k, y + l];
					tileSafely4.active(true);
					*tileSafely4.frameX = (short)(k * 18);
					*tileSafely4.frameY = (short)(style * num + l * 18);
					*tileSafely4.type = type;
				}
			}
		}

		// Token: 0x0600127A RID: 4730 RVA: 0x00456C28 File Offset: 0x00454E28
		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
		{
			TileObject objectData;
			if (!TileObject.CanPlace(x, y, type, style, direction, out objectData, false, null, false))
			{
				return false;
			}
			objectData.random = random;
			if (TileObject.Place(objectData))
			{
				WorldGen.SquareTileFrame(x, y, true);
				if (!mute)
				{
					SoundEngine.PlaySound(0, x * 16, y * 16, 1, 1f, 0f);
				}
			}
			return true;
		}

		// Token: 0x0600127B RID: 4731 RVA: 0x00456C8C File Offset: 0x00454E8C
		public unsafe static bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (*tileSafely.type == 386 && onlyCloseOrOpen != 1)
			{
				Point topLeftAndStyles = WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 2, 18, 18);
				if (topLeftAndStyles.X == 0)
				{
					if (Main.netMode != 1 && Wiring.running)
					{
						Wiring.SkipWire(x, y);
						Wiring.SkipWire(x, y + 1);
						Wiring.SkipWire(x + 1, y);
						Wiring.SkipWire(x + 1, y + 1);
					}
					if (!Collision.EmptyTile(x, y + 1, true) || !Collision.EmptyTile(x + 1, y + 1, true))
					{
						return false;
					}
					SoundEngine.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
					for (int i = 0; i < 2; i++)
					{
						Framing.GetTileSafely(x + i, y).ClearTile();
					}
					for (int j = 0; j < 2; j++)
					{
						tileSafely = Framing.GetTileSafely(x + j, y + 1);
						*tileSafely.type = 387;
						*tileSafely.frameX = (short)(j * 18);
						*tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
					}
					for (int k = -1; k < 3; k++)
					{
						for (int l = 0; l < 3; l++)
						{
							WorldGen.TileFrame(x + k, y + l, false, false);
						}
					}
					return true;
				}
				else if (topLeftAndStyles.X == 1)
				{
					if (Main.netMode != 1 && Wiring.running)
					{
						Wiring.SkipWire(x, y - 1);
						Wiring.SkipWire(x, y);
						Wiring.SkipWire(x + 1, y - 1);
						Wiring.SkipWire(x + 1, y);
					}
					if (!Collision.EmptyTile(x, y, true) || !Collision.EmptyTile(x + 1, y, true))
					{
						return false;
					}
					SoundEngine.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
					for (int m = 0; m < 2; m++)
					{
						Framing.GetTileSafely(x + m, y + 1).ClearTile();
					}
					for (int n = 0; n < 2; n++)
					{
						tileSafely = Framing.GetTileSafely(x + n, y);
						*tileSafely.type = 387;
						*tileSafely.frameX = (short)(n * 18);
						*tileSafely.frameY = (short)(topLeftAndStyles.Y * 18);
					}
					for (int num = -1; num < 3; num++)
					{
						for (int num2 = -1; num2 < 2; num2++)
						{
							WorldGen.TileFrame(x + num, y + num2, false, false);
						}
					}
					return true;
				}
			}
			if (*tileSafely.type == 387 && onlyCloseOrOpen != 0)
			{
				WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 1, 18, 18);
				int num3 = playerAbove.ToDirectionInt();
				for (int num4 = 0; num4 < 2; num4++)
				{
					tileSafely = Framing.GetTileSafely(x + num4, y + num3);
					if (tileSafely.active() && !Main.tileCut[(int)(*tileSafely.type)])
					{
						return false;
					}
				}
				if (Main.netMode != 1 && Wiring.running)
				{
					Wiring.SkipWire(x, y);
					Wiring.SkipWire(x, y + num3);
					Wiring.SkipWire(x + 1, y);
					Wiring.SkipWire(x + 1, y + num3);
				}
				SoundEngine.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
				for (int num5 = 0; num5 < 2; num5++)
				{
					tileSafely = Framing.GetTileSafely(x + num5, y + num3);
					if (tileSafely.active() && Main.tileCut[(int)(*tileSafely.type)])
					{
						WorldGen.KillTile(x + num5, y + num3, false, false, false);
					}
				}
				for (int num6 = 0; num6 < 2; num6++)
				{
					TileColorCache cache = Framing.GetTileSafely(x + num6, y).BlockColorAndCoating();
					for (int num7 = 0; num7 < 2; num7++)
					{
						tileSafely = Framing.GetTileSafely(x + num6, y + num7 - (!playerAbove).ToInt());
						*tileSafely.type = 386;
						*tileSafely.frameX = (short)(num6 * 18 + playerAbove.ToInt() * 36);
						*tileSafely.frameY = (short)(num7 * 18);
						tileSafely.UseBlockColors(cache);
						tileSafely.active(true);
					}
				}
				for (int num8 = -1; num8 < 3; num8++)
				{
					for (int num9 = -1; num9 < 3; num9++)
					{
						WorldGen.TileFrame(x + num8, y + num9 - (!playerAbove).ToInt() * 2, false, false);
					}
				}
				return true;
			}
			SoundEngine.PlaySound(9, x * 16, y * 16, 1, 1f, 0f);
			return false;
		}

		// Token: 0x0600127C RID: 4732 RVA: 0x004570D8 File Offset: 0x004552D8
		public static void CheckTrapDoor(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			int num2 = 0;
			Point point = default(Point);
			if (type == 387)
			{
				num = 2;
				num2 = 1;
				point = WorldGen.GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
				flag = (flag || !WorldGen.CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18) || !WorldGen.CheckTileAnchors(x, y, num, num2, 1, AnchorType.SolidTile));
			}
			if (type == 386)
			{
				num = 2;
				num2 = 2;
				point = WorldGen.GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
				flag = (flag || !WorldGen.CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18));
				if (point.X == 0)
				{
					flag = (flag || !WorldGen.CheckTileAnchors(x, y + 1, num, 1, 1, AnchorType.SolidTile));
				}
				else if (point.X == 1)
				{
					flag = (flag || !WorldGen.CheckTileAnchors(x, y, num, 1, 1, AnchorType.SolidTile));
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int i = x; i < x + num; i++)
			{
				for (int j = y; j < y + num2; j++)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				int type2 = 3239;
				if (point.Y == 0)
				{
					type2 = 3239;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, num * 16, num2 * 16, type2, 1, false, 0, false, false);
				for (int k = x - 1; k < x + num + 1; k++)
				{
					for (int l = y - 1; l < y + num2 + 1; l++)
					{
						WorldGen.TileFrame(k, l, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600127D RID: 4733 RVA: 0x004572AC File Offset: 0x004554AC
		public unsafe static void CheckTallGate(int x, int y, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			Point point;
			point..ctor((int)(*tileSafely.frameX / 18), 0);
			TileObjectData tileData = TileObjectData.GetTileData(type, point.X, 0);
			point.Y = (int)(*tileSafely.frameY) / tileData.CoordinateFullHeight;
			int width = tileData.Width;
			int height = tileData.Height;
			int i = 0;
			int num = (int)(*tileSafely.frameY) % tileData.CoordinateFullHeight;
			while (i < height && num - tileData.CoordinateHeights[i] >= 0)
			{
				num -= tileData.CoordinateHeights[i];
				i++;
			}
			int coordinateFullHeight = tileData.CoordinateFullHeight;
			y -= i;
			int num2 = point.Y * tileData.CoordinateFullHeight;
			for (int j = 0; j < height; j++)
			{
				tileSafely = Framing.GetTileSafely(x, y + j);
				if ((int)(*tileSafely.frameX) != point.X * tileData.CoordinateFullWidth || (int)(*tileSafely.frameY) != num2)
				{
					flag = true;
					break;
				}
				num2 += tileData.CoordinateHeights[j] + tileData.CoordinatePadding;
			}
			if (!flag && WorldGen.CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(x, y, type, true);
			for (int k = x; k < x + width; k++)
			{
				for (int l = y; l < y + height; l++)
				{
					WorldGen.KillTile(k, l, false, false, false);
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				int type2 = 3240;
				if (point.Y == 0)
				{
					type2 = 3240;
				}
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, width * 16, height * 16, type2, 1, false, 0, false, false);
				for (int m = x - 1; m < x + width + 1; m++)
				{
					for (int n = y - 1; n < y + height + 1; n++)
					{
						WorldGen.TileFrame(m, n, false, false);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600127E RID: 4734 RVA: 0x004574BC File Offset: 0x004556BC
		public unsafe static bool ShiftTallGate(int x, int y, bool closing, bool forced = false)
		{
			ushort type = closing ? 388 : 389;
			ushort num = closing ? 389 : 388;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (*tileSafely.type != num)
			{
				return false;
			}
			Point point;
			point..ctor((int)(*tileSafely.frameX / 18), 0);
			TileObjectData tileData = TileObjectData.GetTileData(388, point.X, 0);
			point.Y = (int)(*tileSafely.frameY) / tileData.CoordinateFullHeight;
			int width = tileData.Width;
			int height = tileData.Height;
			int i = 0;
			int num2 = (int)(*tileSafely.frameY) % tileData.CoordinateFullHeight;
			while (i < height && num2 - tileData.CoordinateHeights[i] >= 0)
			{
				num2 -= tileData.CoordinateHeights[i];
				i++;
			}
			int coordinateFullHeight = tileData.CoordinateFullHeight;
			y -= i;
			if (Main.netMode != 1 && Wiring.running)
			{
				for (int j = 0; j < height; j++)
				{
					Wiring.SkipWire(x, y + j);
				}
			}
			for (int k = 0; k < height; k++)
			{
				if (!forced && !Collision.EmptyTile(x, y + k, true))
				{
					return false;
				}
			}
			SoundEngine.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
			for (int l = 0; l < height; l++)
			{
				*Framing.GetTileSafely(x, y + l).type = type;
			}
			for (int m = -1; m < 2; m++)
			{
				for (int n = -1; n < height + 1; n++)
				{
					WorldGen.TileFrame(x + m, y + n, false, false);
				}
			}
			return true;
		}

		// Token: 0x0600127F RID: 4735 RVA: 0x00457664 File Offset: 0x00455864
		public unsafe static Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			Point result = new Point((int)(*tileSafely.frameX) / (w * frameXinc), (int)(*tileSafely.frameY) / (h * frameYinc));
			if (frameXinc != 0)
			{
				x -= (int)(*tileSafely.frameX) / frameXinc % w;
			}
			if (frameYinc != 0)
			{
				y -= (int)(*tileSafely.frameY) / frameYinc % h;
			}
			return result;
		}

		// Token: 0x06001280 RID: 4736 RVA: 0x004576C8 File Offset: 0x004558C8
		public unsafe static bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY, int frameYinc)
		{
			for (int i = 0; i < w; i++)
			{
				for (int j = 0; j < h; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(sx + i, sy + j);
					if (!tileSafely.active() || (int)(*tileSafely.type) != type || (int)(*tileSafely.frameX) != styleX * w * frameXinc + i * frameXinc || (int)(*tileSafely.frameY) != styleY * h * frameYinc + j * frameYinc)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001281 RID: 4737 RVA: 0x00457740 File Offset: 0x00455940
		public static bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
		{
			if ((mode & 1) == 1)
			{
				for (int i = sy; i < sy + h; i++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(sx - 1, i), anchor))
					{
						return false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(sx + w, i), anchor))
					{
						return false;
					}
				}
			}
			if ((mode & 2) == 2)
			{
				for (int j = sx; j < sx + w; j++)
				{
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(j, sy - 1), anchor))
					{
						return false;
					}
					if (!WorldGen.AnchorValid(Framing.GetTileSafely(j, sy + h), anchor))
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001282 RID: 4738 RVA: 0x004577C8 File Offset: 0x004559C8
		public unsafe static bool AnchorValid(Tile tileCache, AnchorType anchor)
		{
			bool flag = false;
			if (tileCache.nactive())
			{
				if ((anchor & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[(int)(*tileCache.type)] && !Main.tileSolidTop[(int)(*tileCache.type)] && !Main.tileNoAttach[(int)(*tileCache.type)] && tileCache.blockType() == 0)
				{
					flag = true;
				}
				if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && ((Main.tileSolid[(int)(*tileCache.type)] && (!Main.tileSolidTop[(int)(*tileCache.type)] || (TileID.Sets.Platforms[(int)(*tileCache.type)] && (tileCache.halfBrick() || tileCache.topSlope())))) || tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[(int)(*tileCache.type)] && !tileCache.bottomSlope())
				{
					flag = true;
				}
				if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchor & AnchorType.Table) == AnchorType.Table))
				{
					if (TileID.Sets.Platforms[(int)(*tileCache.type)])
					{
						int num = (int)(*tileCache.frameX) / TileObjectData.PlatformFrameWidth();
						if ((!tileCache.halfBrick() && num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26))
						{
							flag = true;
						}
					}
					else if (Main.tileSolid[(int)(*tileCache.type)] && Main.tileSolidTop[(int)(*tileCache.type)])
					{
						flag = true;
					}
				}
				if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && !TileID.Sets.Platforms[(int)(*tileCache.type)] && Main.tileTable[(int)(*tileCache.type)] && tileCache.blockType() == 0)
				{
					flag = true;
				}
				if (!flag && (anchor & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[(int)(*tileCache.type)] && !Main.tileSolidTop[(int)(*tileCache.type)] && tileCache.blockType() - 4 <= 1)
				{
					flag = true;
				}
			}
			else if (!flag && (anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile)
			{
				flag = true;
			}
			return flag;
		}

		// Token: 0x06001283 RID: 4739 RVA: 0x00457998 File Offset: 0x00455B98
		public static bool CanPlaceSink(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return false;
			}
			bool result = true;
			x--;
			y--;
			for (int i = 0; i < 2; i++)
			{
				for (int j = 0; j < 2; j++)
				{
					if (Framing.GetTileSafely(x + i, y + j).active())
					{
						result = false;
					}
				}
				Tile tileSafely = Framing.GetTileSafely(x + i, y + 2);
				if (!tileSafely.nactive() || !WorldGen.SolidTile(tileSafely))
				{
					result = false;
				}
			}
			return result;
		}

		// Token: 0x06001284 RID: 4740 RVA: 0x00457A20 File Offset: 0x00455C20
		public unsafe static void Place3x4(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 2; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = style * 54;
				for (int k = -3; k <= 0; k++)
				{
					short frameY = (short)((3 + k) * 18);
					Main.tile[x - 1, y + k].active(true);
					*Main.tile[x - 1, y + k].frameY = frameY;
					*Main.tile[x - 1, y + k].frameX = (short)num;
					*Main.tile[x - 1, y + k].type = type;
					Main.tile[x, y + k].active(true);
					*Main.tile[x, y + k].frameY = frameY;
					*Main.tile[x, y + k].frameX = (short)(num + 18);
					*Main.tile[x, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					*Main.tile[x + 1, y + k].frameY = frameY;
					*Main.tile[x + 1, y + k].frameX = (short)(num + 36);
					*Main.tile[x + 1, y + k].type = type;
				}
			}
		}

		// Token: 0x06001285 RID: 4741 RVA: 0x00457C64 File Offset: 0x00455E64
		public unsafe static void Place5x4(int x, int y, ushort type, int style)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 2; i < x + 3; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = style * 54;
				for (int k = -3; k <= 0; k++)
				{
					short frameY = (short)((3 + k) * 18);
					Main.tile[x - 2, y + k].active(true);
					*Main.tile[x - 2, y + k].frameY = frameY;
					*Main.tile[x - 2, y + k].frameX = (short)(num - 36);
					*Main.tile[x - 2, y + k].type = type;
					Main.tile[x - 1, y + k].active(true);
					*Main.tile[x - 1, y + k].frameY = frameY;
					*Main.tile[x - 1, y + k].frameX = (short)(num - 18);
					*Main.tile[x - 1, y + k].type = type;
					Main.tile[x, y + k].active(true);
					*Main.tile[x, y + k].frameY = frameY;
					*Main.tile[x, y + k].frameX = (short)num;
					*Main.tile[x, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					*Main.tile[x + 1, y + k].frameY = frameY;
					*Main.tile[x + 1, y + k].frameX = (short)(num + 18);
					*Main.tile[x + 1, y + k].type = type;
					Main.tile[x + 1, y + k].active(true);
					*Main.tile[x + 1, y + k].frameY = frameY;
					*Main.tile[x + 1, y + k].frameX = (short)(num + 36);
					*Main.tile[x + 1, y + k].type = type;
				}
			}
		}

		// Token: 0x06001286 RID: 4742 RVA: 0x00457F88 File Offset: 0x00456188
		public unsafe static void Place3x1(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 2; i++)
			{
				if (Main.tile[i, y] == null)
				{
					Main.tile[i, y] = default(Tile);
				}
				if (Main.tile[i, y].active())
				{
					flag = false;
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile2(i, y + 1))
				{
					flag = false;
				}
			}
			if (flag)
			{
				short num = (short)(54 * style);
				Main.tile[x - 1, y].active(true);
				*Main.tile[x - 1, y].frameY = 0;
				*Main.tile[x - 1, y].frameX = num;
				*Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = 0;
				*Main.tile[x, y].frameX = num + 18;
				*Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				*Main.tile[x + 1, y].frameY = 0;
				*Main.tile[x + 1, y].frameX = num + 36;
				*Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06001287 RID: 4743 RVA: 0x0045816C File Offset: 0x0045636C
		public unsafe static void Place3x2(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = false;
			bool flag2 = true;
			if (type == 14 && style == 25)
			{
				flag = true;
			}
			int num = y - 1;
			if (flag)
			{
				num = y;
			}
			int i = x - 1;
			while (i < x + 2)
			{
				for (int j = num; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag2 = false;
					}
					if (type == 215 && *Main.tile[i, j].liquid > 0)
					{
						flag2 = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (type <= 299)
				{
					if (type - 285 > 1 && type - 298 > 1)
					{
						goto IL_119;
					}
					goto IL_15F;
				}
				else
				{
					if (type != 310 && type - 361 > 3)
					{
						goto IL_119;
					}
					goto IL_15F;
				}
				IL_1BF:
				i++;
				continue;
				IL_119:
				if (type != 582 && type != 619)
				{
					if (type == 26 && TileID.Sets.Boulders[(int)(*Main.tile[i, y + 1].type)])
					{
						flag2 = false;
					}
					if (!WorldGen.SolidTile2(i, y + 1))
					{
						flag2 = false;
						goto IL_1BF;
					}
					goto IL_1BF;
				}
				IL_15F:
				if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int)(*Main.tile[i, y + 1].type)] || *Main.tile[i, y + 1].frameY != 0))
				{
					flag2 = false;
					goto IL_1BF;
				}
				goto IL_1BF;
			}
			if (TileID.Sets.BasicDresser[(int)type])
			{
				if (Chest.CreateChest(x - 1, y - 1, -1) == -1)
				{
					flag2 = false;
				}
				else if (Main.netMode == 1)
				{
					NetMessage.SendData(34, -1, -1, null, 2, (float)x, (float)y, (float)style, 0, 0, 0);
				}
			}
			if (flag2)
			{
				short num2 = (short)(54 * style);
				if (flag)
				{
					Main.tile[x - 1, y].active(true);
					*Main.tile[x - 1, y].frameY = 0;
					*Main.tile[x - 1, y].frameX = num2;
					*Main.tile[x - 1, y].type = type;
					Main.tile[x, y].active(true);
					*Main.tile[x, y].frameY = 0;
					*Main.tile[x, y].frameX = num2 + 18;
					*Main.tile[x, y].type = type;
					Main.tile[x + 1, y].active(true);
					*Main.tile[x + 1, y].frameY = 0;
					*Main.tile[x + 1, y].frameX = num2 + 36;
					*Main.tile[x + 1, y].type = type;
					return;
				}
				Main.tile[x - 1, y - 1].active(true);
				*Main.tile[x - 1, y - 1].frameY = 0;
				*Main.tile[x - 1, y - 1].frameX = num2;
				*Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				*Main.tile[x, y - 1].frameY = 0;
				*Main.tile[x, y - 1].frameX = num2 + 18;
				*Main.tile[x, y - 1].type = type;
				Main.tile[x + 1, y - 1].active(true);
				*Main.tile[x + 1, y - 1].frameY = 0;
				*Main.tile[x + 1, y - 1].frameX = num2 + 36;
				*Main.tile[x + 1, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				*Main.tile[x - 1, y].frameY = 18;
				*Main.tile[x - 1, y].frameX = num2;
				*Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = 18;
				*Main.tile[x, y].frameX = num2 + 18;
				*Main.tile[x, y].type = type;
				Main.tile[x + 1, y].active(true);
				*Main.tile[x + 1, y].frameY = 18;
				*Main.tile[x + 1, y].frameX = num2 + 36;
				*Main.tile[x + 1, y].type = type;
			}
		}

		// Token: 0x06001288 RID: 4744 RVA: 0x00458730 File Offset: 0x00456930
		public unsafe static void Place2x2Style(int x, int y, ushort type, int style = 0)
		{
			if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
			{
				return;
			}
			short num = 0;
			if (type == 254)
			{
				num = (short)(x % 12 / 2);
				num *= 36;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!WorldGen.SolidTile(i, y + 1, false))
				{
					flag = false;
				}
				if (type == 254 && *Main.tile[i, y + 1].type != 2 && *Main.tile[i, y + 1].type != 477 && *Main.tile[i, y + 1].type != 492 && *Main.tile[i, y + 1].type != 109)
				{
					flag = false;
				}
			}
			if (flag)
			{
				short num2 = (short)(36 * style);
				Main.tile[x - 1, y - 1].active(true);
				*Main.tile[x - 1, y - 1].frameY = num;
				*Main.tile[x - 1, y - 1].frameX = num2;
				*Main.tile[x - 1, y - 1].type = type;
				Main.tile[x, y - 1].active(true);
				*Main.tile[x, y - 1].frameY = num;
				*Main.tile[x, y - 1].frameX = num2 + 18;
				*Main.tile[x, y - 1].type = type;
				Main.tile[x - 1, y].active(true);
				*Main.tile[x - 1, y].frameY = num + 18;
				*Main.tile[x - 1, y].frameX = num2;
				*Main.tile[x - 1, y].type = type;
				Main.tile[x, y].active(true);
				*Main.tile[x, y].frameY = num + 18;
				*Main.tile[x, y].frameX = num2 + 18;
				*Main.tile[x, y].type = type;
			}
		}

		// Token: 0x06001289 RID: 4745 RVA: 0x00458A48 File Offset: 0x00456C48
		public unsafe static bool NearFriendlyWall(int x, int y)
		{
			try
			{
				if (x < 2 || x >= Main.maxTilesX - 2 || y < 2 || y >= Main.maxTilesY - 2)
				{
					return true;
				}
				if (*Main.tile[x, y].wall == 0 || Main.wallHouse[(int)(*Main.tile[x, y].wall)])
				{
					return true;
				}
				if (*Main.tile[x - 1, y].wall == 0 || Main.wallHouse[(int)(*Main.tile[x - 1, y].wall)])
				{
					return true;
				}
				if (*Main.tile[x + 1, y].wall == 0 || Main.wallHouse[(int)(*Main.tile[x + 1, y].wall)])
				{
					return true;
				}
				if (*Main.tile[x, y - 1].wall == 0 || Main.wallHouse[(int)(*Main.tile[x, y - 1].wall)])
				{
					return true;
				}
				if (*Main.tile[x, y + 1].wall == 0 || Main.wallHouse[(int)(*Main.tile[x, y + 1].wall)])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600128A RID: 4746 RVA: 0x00458BCC File Offset: 0x00456DCC
		public unsafe static void Check2x2Style(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameY / 18); num2 > 1; num2 -= 2)
			{
			}
			int num3 = j - num2;
			int num4 = (int)(*Main.tile[i, j].frameX / 18);
			int num5 = 0;
			while (num4 > 1)
			{
				num4 -= 2;
				num5++;
			}
			num4 = i - num4;
			int num6 = num5 * 36;
			for (int k = num4; k < num4 + 2; k++)
			{
				for (int l = num3; l < num3 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num4) * 18 + num6)
					{
						flag = true;
					}
				}
				if (!WorldGen.SolidTileAllowBottomSlope(k, num3 + 2))
				{
					flag = true;
				}
				else if (type == 254)
				{
					Tile tile = Main.tile[k, num3 + 2];
					if (tile != null && tile.active() && *tile.type >= 0 && *tile.type < TileID.Count)
					{
						ushort type2 = *tile.type;
						if (type2 != 2 && type2 != 109 && type2 != 477 && type2 != 492)
						{
							flag = true;
						}
					}
				}
			}
			if (!flag)
			{
				return;
			}
			int frameX = (int)(*Main.tile[i, j].frameX);
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num4; m < num4 + 2; m++)
			{
				for (int n = num3; n < num3 + 2; n++)
				{
					if (Main.tile[m, n] == null)
					{
						Main.tile[m, n] = default(Tile);
					}
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type <= 254)
				{
					if (type != 96)
					{
						if (type == 254)
						{
							if (frameX >= 72)
							{
								if (frameX < 108)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(1, 3), false, 0, false, false);
									}
								}
								else if (frameX < 144)
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(2, 6), false, 0, false, false);
								}
								else
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(5, 11), false, 0, false, false);
									if (Main.halloween && WorldGen.genRand.Next(200) == 0)
									{
										Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1799, 1, false, 0, false, false);
									}
								}
							}
						}
					}
					else
					{
						if (num5 == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 345, 1, false, 0, false, false);
						}
						if (num5 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1791, 1, false, 0, false, false);
						}
					}
				}
				else if (type != 441)
				{
					if (type != 457)
					{
						if (type == 468)
						{
							int num7 = -1;
							switch (num5)
							{
							case 0:
								num7 = 3886;
								break;
							case 1:
								num7 = 3887;
								break;
							case 2:
								num7 = 3950;
								break;
							case 3:
								num7 = 3976;
								break;
							case 4:
								num7 = -1;
								break;
							case 5:
								num7 = 4164;
								break;
							case 6:
								num7 = 4185;
								break;
							case 7:
								num7 = 4206;
								break;
							case 8:
								num7 = 4227;
								break;
							case 9:
								num7 = 4266;
								break;
							case 10:
								num7 = 4268;
								break;
							case 11:
								num7 = 4585;
								break;
							case 12:
								num7 = 4713;
								break;
							case 13:
								num7 = -1;
								break;
							case 14:
								num7 = 5167;
								break;
							case 15:
								num7 = 5188;
								break;
							case 16:
								num7 = 5209;
								break;
							}
							if (num7 != -1)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num7, 1, false, 0, false, false);
							}
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3749, 1, false, 0, false, false);
					}
				}
				else
				{
					int num8 = -1;
					switch (num5)
					{
					case 0:
						num8 = 3665;
						break;
					case 1:
						num8 = 3666;
						break;
					case 3:
						num8 = 3667;
						break;
					case 7:
						num8 = 3668;
						break;
					case 8:
						num8 = 3669;
						break;
					case 9:
						num8 = 3670;
						break;
					case 10:
						num8 = 3671;
						break;
					case 11:
						num8 = 3672;
						break;
					case 12:
						num8 = 3673;
						break;
					case 13:
						num8 = 3674;
						break;
					case 14:
						num8 = 3675;
						break;
					case 15:
						num8 = 3676;
						break;
					case 16:
						num8 = 3677;
						break;
					case 17:
						num8 = 3678;
						break;
					case 18:
						num8 = 3679;
						break;
					case 19:
						num8 = 3680;
						break;
					case 20:
						num8 = 3681;
						break;
					case 21:
						num8 = 3682;
						break;
					case 22:
						num8 = 3683;
						break;
					case 28:
						num8 = 3684;
						break;
					case 29:
						num8 = 3685;
						break;
					case 30:
						num8 = 3686;
						break;
					case 31:
						num8 = 3687;
						break;
					case 32:
						num8 = 3688;
						break;
					case 33:
						num8 = 3689;
						break;
					case 34:
						num8 = 3690;
						break;
					case 35:
						num8 = 3691;
						break;
					case 37:
						num8 = 3692;
						break;
					case 39:
						num8 = 3693;
						break;
					case 41:
						num8 = 3694;
						break;
					case 42:
						num8 = 3695;
						break;
					case 43:
						num8 = 3696;
						break;
					case 44:
						num8 = 3697;
						break;
					case 45:
						num8 = 3698;
						break;
					case 46:
						num8 = 3699;
						break;
					case 47:
						num8 = 3700;
						break;
					case 48:
						num8 = 3701;
						break;
					case 49:
						num8 = 3702;
						break;
					case 50:
						num8 = 3703;
						break;
					case 51:
						num8 = 3704;
						break;
					}
					if (num8 != -1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, num8, 1, false, 0, false, false);
					}
				}
				WorldGen.destroyObject = false;
				for (int num9 = num4 - 1; num9 < num4 + 3; num9++)
				{
					for (int num10 = num3 - 1; num10 < num3 + 3; num10++)
					{
						WorldGen.TileFrame(num9, num10, false, false);
					}
				}
			}
		}

		// Token: 0x0600128B RID: 4747 RVA: 0x00459438 File Offset: 0x00457638
		public unsafe static void PlacePumpkin(int x, int superY)
		{
			ushort type = 254;
			int num = WorldGen.genRand.Next(6) * 36;
			if (x < 5 || x > Main.maxTilesX - 5 || superY < 5 || superY > Main.maxTilesY - 5)
			{
				return;
			}
			bool flag = true;
			for (int i = x - 1; i < x + 1; i++)
			{
				for (int j = superY - 1; j < superY + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active() && *Main.tile[i, j].type != 3 && *Main.tile[i, j].type != 73 && *Main.tile[i, j].type != 113 && *Main.tile[i, j].type != 110 && (*Main.tile[i, j].type != 185 || *Main.tile[i, j].frameY != 0))
					{
						flag = false;
					}
					if (*Main.tile[i, j].liquid > 0)
					{
						flag = false;
					}
				}
				if (!WorldGen.SolidTile(i, superY + 1, false) || !TileObjectData.GetTileData((int)type, 0, 0).AnchorValidTiles.Contains((int)(*Main.tile[i, superY + 1].type)) || TileID.Sets.Conversion.GolfGrass[(int)(*Main.tile[i, superY + 1].type)])
				{
					flag = false;
				}
			}
			if (flag)
			{
				Main.tile[x - 1, superY - 1].active(true);
				*Main.tile[x - 1, superY - 1].frameY = (short)num;
				*Main.tile[x - 1, superY - 1].frameX = 0;
				*Main.tile[x - 1, superY - 1].type = type;
				Main.tile[x, superY - 1].active(true);
				*Main.tile[x, superY - 1].frameY = (short)num;
				*Main.tile[x, superY - 1].frameX = 18;
				*Main.tile[x, superY - 1].type = type;
				Main.tile[x - 1, superY].active(true);
				*Main.tile[x - 1, superY].frameY = (short)(num + 18);
				*Main.tile[x - 1, superY].frameX = 0;
				*Main.tile[x - 1, superY].type = type;
				Main.tile[x, superY].active(true);
				*Main.tile[x, superY].frameY = (short)(num + 18);
				*Main.tile[x, superY].frameX = 18;
				*Main.tile[x, superY].type = type;
			}
		}

		// Token: 0x0600128C RID: 4748 RVA: 0x004597AC File Offset: 0x004579AC
		public unsafe static void GrowPumpkin(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameY / 18); num2 > 1; num2 -= 2)
			{
			}
			int num3 = j - num2;
			int num4 = (int)(*Main.tile[i, j].frameX / 18);
			int num5 = 0;
			while (num4 > 1)
			{
				num4 -= 2;
				num5++;
			}
			num4 = i - num4;
			int num6 = num5 * 36;
			if (num5 >= 4)
			{
				return;
			}
			for (int k = num4; k < num4 + 2; k++)
			{
				for (int l = num3; l < num3 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num4) * 18 + num6)
					{
						flag = true;
					}
				}
				if (!WorldGen.SolidTile(k, num3 + 2, false) || !TileObjectData.GetTileData(type, 0, 0).AnchorValidTiles.Contains((int)(*Main.tile[k, num3 + 2].type)))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				for (int m = num4; m < num4 + 2; m++)
				{
					for (int n = num3; n < num3 + 2; n++)
					{
						if (Main.tile[m, n] == null)
						{
							Main.tile[m, n] = default(Tile);
						}
						if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
						{
							ref short frameX = ref Main.tile[m, n].frameX;
							frameX += 36;
						}
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, num4, num3, 2, 2, TileChangeType.None);
			}
		}

		// Token: 0x0600128D RID: 4749 RVA: 0x004599E8 File Offset: 0x00457BE8
		public unsafe static void FixHearts()
		{
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() && *tile.type == 12 && *tile.frameX == 0 && *tile.frameY == 0)
					{
						WorldGen.FixHeart(i, j);
					}
				}
			}
		}

		// Token: 0x0600128E RID: 4750 RVA: 0x00459A54 File Offset: 0x00457C54
		public unsafe static void DestroyHeart(int i, int j)
		{
			WorldGen.destroyObject = true;
			for (int k = i; k < i + 2; k++)
			{
				for (int l = j; l < j + 2; l++)
				{
					if (k < Main.maxTilesX && l < Main.maxTilesY)
					{
						Tile tile = Main.tile[k, l];
						if (tile.active() && *tile.type == 12)
						{
							WorldGen.KillTile(k, l, false, false, false);
						}
					}
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x0600128F RID: 4751 RVA: 0x00459AC8 File Offset: 0x00457CC8
		public unsafe static void FixHeart(int i, int j)
		{
			if (i < Main.offLimitBorderTiles || i >= Main.maxTilesX - Main.offLimitBorderTiles || j < Main.offLimitBorderTiles || j >= Main.maxTilesY - Main.offLimitBorderTiles)
			{
				WorldGen.DestroyHeart(i, j);
				return;
			}
			Tile tile = Main.tile[i, j + 2];
			Tile tile2 = Main.tile[i + 1, j + 2];
			if (tile.active() && !Main.tileSolid[(int)(*tile.type)] && Main.tileCut[(int)(*tile.type)])
			{
				WorldGen.KillTile(i, j + 2, false, false, false);
			}
			if (tile2.active() && !Main.tileSolid[(int)(*tile2.type)] && Main.tileCut[(int)(*tile2.type)])
			{
				WorldGen.KillTile(i + 1, j + 2, false, false, false);
			}
			if (!tile.active())
			{
				if (!tile2.active())
				{
					WorldGen.DestroyHeart(i, j);
					return;
				}
				if (Main.tileSolid[(int)(*tile2.type)])
				{
					*tile.type = *tile2.type;
					tile.active(true);
				}
			}
			if (!tile2.active() && Main.tileSolid[(int)(*tile.type)])
			{
				*tile2.type = *tile.type;
				tile2.active(true);
			}
			if (!tile.nactive() || !Main.tileSolid[(int)(*tile.type)] || !tile2.nactive() || !Main.tileSolid[(int)(*tile2.type)])
			{
				WorldGen.DestroyHeart(i, j);
				return;
			}
			if (tile.blockType() != 0)
			{
				tile.slope(0);
				tile.halfBrick(false);
			}
			if (tile2.blockType() != 0)
			{
				tile2.slope(0);
				tile2.halfBrick(false);
			}
		}

		// Token: 0x06001290 RID: 4752 RVA: 0x00459C74 File Offset: 0x00457E74
		public unsafe static void FixChands()
		{
			for (int i = 5; i < Main.maxTilesX - 5; i++)
			{
				for (int j = 5; j < Main.maxTilesY - 5; j++)
				{
					if (Main.tile[i, j].active())
					{
						int type = (int)(*Main.tile[i, j].type);
						if (Main.tile[i, j].active() && (type == 35 || type == 36 || type == 170 || type == 171 || type == 172))
						{
							WorldGen.FixChand(i, j);
						}
					}
				}
			}
		}

		// Token: 0x06001291 RID: 4753 RVA: 0x00459D18 File Offset: 0x00457F18
		public unsafe static void FixChand(int i, int j)
		{
			int num = 0;
			int type = (int)(*Main.tile[i, j].type);
			if (Main.tile[i, j].active())
			{
				if (type == 35)
				{
					num = 1;
				}
				if (type == 36)
				{
					num = 2;
				}
				if (type == 170)
				{
					num = 3;
				}
				if (type == 171)
				{
					num = 4;
				}
				if (type == 172)
				{
					num = 5;
				}
			}
			if (num <= 0)
			{
				return;
			}
			int num2;
			for (num2 = (int)(*Main.tile[i, j].frameX / 18); num2 >= 3; num2 -= 3)
			{
			}
			if (num2 >= 3)
			{
				num2 -= 3;
			}
			num2 = i - num2;
			int num3 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			for (int k = num2; k < num2 + 3; k++)
			{
				for (int l = num3; l < num3 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (Main.tile[k, l].active() && (int)(*Main.tile[k, l].type) == type)
					{
						*Main.tile[k, l].type = 34;
						*Main.tile[k, l].frameY = (short)((int)(*Main.tile[k, l].frameY) + num * 54);
					}
				}
			}
		}

		// Token: 0x06001292 RID: 4754 RVA: 0x00459EBC File Offset: 0x004580BC
		public unsafe static void PlaceChand(int x, int y, ushort type, int style = 0)
		{
			bool flag = true;
			int num = 0;
			for (int i = x - 1; i < x + 2; i++)
			{
				for (int j = y; j < y + 3; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int)(*Main.tile[x, y - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[x, y - 1].type)])
			{
				flag = false;
			}
			if (flag)
			{
				int num2 = style / 36 * 18 * 6;
				int num3 = style * 18 * 3;
				Main.tile[x - 1, y + num].active(true);
				*Main.tile[x - 1, y + num].frameY = (short)num3;
				*Main.tile[x - 1, y + num].frameX = (short)num2;
				*Main.tile[x - 1, y + num].type = type;
				Main.tile[x, y + num].active(true);
				*Main.tile[x, y + num].frameY = (short)num3;
				*Main.tile[x, y + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + num].type = type;
				Main.tile[x + 1, y + num].active(true);
				*Main.tile[x + 1, y + num].frameY = (short)num3;
				*Main.tile[x + 1, y + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + num].type = type;
				Main.tile[x - 1, y + 1 + num].active(true);
				*Main.tile[x - 1, y + 1 + num].frameY = (short)(num3 + 18);
				*Main.tile[x - 1, y + 1 + num].frameX = (short)num2;
				*Main.tile[x - 1, y + 1 + num].type = type;
				Main.tile[x, y + 1 + num].active(true);
				*Main.tile[x, y + 1 + num].frameY = (short)(num3 + 18);
				*Main.tile[x, y + 1 + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + 1 + num].type = type;
				Main.tile[x + 1, y + 1 + num].active(true);
				*Main.tile[x + 1, y + 1 + num].frameY = (short)(num3 + 18);
				*Main.tile[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + 1 + num].type = type;
				Main.tile[x - 1, y + 2 + num].active(true);
				*Main.tile[x - 1, y + 2 + num].frameY = (short)(num3 + 36);
				*Main.tile[x - 1, y + 2 + num].frameX = (short)num2;
				*Main.tile[x - 1, y + 2 + num].type = type;
				Main.tile[x, y + 2 + num].active(true);
				*Main.tile[x, y + 2 + num].frameY = (short)(num3 + 36);
				*Main.tile[x, y + 2 + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + 2 + num].type = type;
				Main.tile[x + 1, y + 2 + num].active(true);
				*Main.tile[x + 1, y + 2 + num].frameY = (short)(num3 + 36);
				*Main.tile[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + 2 + num].type = type;
			}
		}

		// Token: 0x06001293 RID: 4755 RVA: 0x0045A3F4 File Offset: 0x004585F4
		public unsafe static void CheckChand(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num3 = 3;
			if (type == 454)
			{
				num3 = 4;
			}
			int num4 = (int)(*Main.tile[i, j].frameX / 18);
			int num5 = 0;
			while (num4 >= num3)
			{
				num5++;
				num4 -= num3;
			}
			int num6 = i - num4;
			int num7 = 18 * num3 * num5;
			if (num4 >= num3)
			{
				num4 -= num3;
			}
			num4 = i - num4;
			int num8 = (int)(*Main.tile[i, j].frameY / 18);
			int num9 = 0;
			while (num8 >= 3)
			{
				num9++;
				num8 -= 3;
			}
			if (num7 >= 108)
			{
				num9 += 37 * (num7 / 108);
			}
			int num10 = 54 * num9;
			if (num7 >= 108)
			{
				num10 -= 54 * (num7 / 108) * 37;
			}
			if (num8 >= 3)
			{
				num8 -= 3;
			}
			num8 = j - num8;
			for (int k = num4; k < num4 + num3; k++)
			{
				for (int l = num8; l < num8 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num6) * 18 + num7 || (int)(*Main.tile[k, l].frameY) != (l - num8) * 18 + num10)
					{
						flag = true;
					}
				}
			}
			if (Main.tile[num4 + 1, num8 - 1] == null)
			{
				Main.tile[num4 + 1, num8 - 1] = default(Tile);
			}
			if (!Main.tile[num4 + 1, num8 - 1].nactive() || !Main.tileSolid[(int)(*Main.tile[num4 + 1, num8 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[num4 + 1, num8 - 1].type)])
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num4; m < num4 + num3; m++)
			{
				for (int n = num8; n < num8 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 454)
				{
					switch (Main.rand.Next(9))
					{
					case 2:
					case 3:
					case 4:
					{
						int num11 = Main.rand.Next(10, 31);
						while (num11 > 0)
						{
							int num12 = Main.rand.Next(2, 11);
							if (num12 > num11)
							{
								num12 = num11;
							}
							num11 -= num12;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 72, num12, false, 0, false, false);
						}
						break;
					}
					case 5:
					case 6:
					{
						int num13 = Main.rand.Next(60, 80);
						while (num13 > 0)
						{
							int num14 = Main.rand.Next(3, 16);
							if (num14 > num13)
							{
								num14 = num13;
							}
							num13 -= num14;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num14, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
						break;
					}
					case 7:
					{
						int num15 = Main.rand.Next(10, 31);
						while (num15 > 0)
						{
							int num16 = Main.rand.Next(2, 9);
							if (num16 > num15)
							{
								num16 = num15;
							}
							num15 -= num16;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num16, false, 0, false, false);
						}
						if (Main.rand.Next(8) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
						}
						if (Main.rand.Next(8) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
						break;
					}
					case 8:
					{
						int num17 = 100;
						while (num17 > 0)
						{
							int num18 = Main.rand.Next(3, 16);
							if (num18 > num17)
							{
								num18 = num17;
							}
							num17 -= num18;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 72, num18, false, 0, false, false);
						}
						int num19 = Main.rand.Next(30, 91);
						while (num19 > 0)
						{
							int num20 = Main.rand.Next(7, 14);
							if (num20 > num19)
							{
								num20 = num19;
							}
							num19 -= num20;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16 - 10, j * 16 - 10, 52, 52, 1349, num20, false, 0, false, false);
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
						break;
					}
					}
				}
				if (type == 34)
				{
					int type2;
					switch (num9)
					{
					case 1:
						type2 = 107;
						break;
					case 2:
						type2 = 108;
						break;
					case 3:
						type2 = 710;
						break;
					case 4:
						type2 = 711;
						break;
					case 5:
						type2 = 712;
						break;
					case 6:
						type2 = 1812;
						break;
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
					case 17:
						type2 = 2055 + num9 - 7;
						break;
					default:
						if (num9 >= 18 && num9 <= 21)
						{
							type2 = 2141 + num9 - 18;
						}
						else
						{
							switch (num9)
							{
							case 22:
								type2 = 2224;
								break;
							case 23:
								type2 = 2525;
								break;
							case 24:
								type2 = 2543;
								break;
							case 25:
								type2 = 2558;
								break;
							case 26:
								type2 = 2573;
								break;
							case 27:
								type2 = 2652;
								break;
							case 28:
								type2 = 2653;
								break;
							case 29:
								type2 = 2654;
								break;
							case 30:
								type2 = 2655;
								break;
							case 31:
								type2 = 2656;
								break;
							case 32:
								type2 = 2657;
								break;
							case 33:
								type2 = 2813;
								break;
							case 34:
								type2 = 3177;
								break;
							case 35:
								type2 = 3179;
								break;
							case 36:
								type2 = 3178;
								break;
							case 37:
								type2 = 3894;
								break;
							case 38:
								type2 = 3938;
								break;
							case 39:
								type2 = 3964;
								break;
							case 40:
								type2 = 4152;
								break;
							case 41:
								type2 = 4173;
								break;
							case 42:
								type2 = 4194;
								break;
							case 43:
								type2 = 4215;
								break;
							case 44:
								type2 = 4305;
								break;
							case 45:
								type2 = 4573;
								break;
							case 46:
								type2 = 5155;
								break;
							case 47:
								type2 = 5176;
								break;
							case 48:
								type2 = 5197;
								break;
							default:
								type2 = 106;
								break;
							}
						}
						break;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num21 = num4 - 1; num21 < num4 + num3 + 1; num21++)
				{
					for (int num22 = num8 - 1; num22 < num8 + 4; num22++)
					{
						WorldGen.TileFrame(num21, num22, false, false);
					}
				}
			}
		}

		// Token: 0x06001294 RID: 4756 RVA: 0x0045ACA4 File Offset: 0x00458EA4
		public unsafe static void Check3x3(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num >= 3)
			{
				num2++;
				num -= 3;
			}
			int num3 = i - num;
			int num4 = 54 * num2;
			int num5 = (int)(*Main.tile[i, j].frameY / 54);
			int num6 = (int)(*Main.tile[i, j].frameY % 54 / 18);
			if (num >= 3)
			{
				num -= 3;
			}
			num = i - num;
			int num7 = j - num6;
			for (int k = num; k < num + 3; k++)
			{
				for (int l = num7; l < num7 + 3; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num3) * 18 + num4 || (int)(*Main.tile[k, l].frameY) != (l - num7) * 18 + num5 * 54)
					{
						flag = true;
					}
				}
			}
			if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 || type == 499 || type == 406 || type == 412 || type == 452 || type == 455 || type == 491 || type == 642)
			{
				for (int m = num; m < num + 3; m++)
				{
					if (Main.tile[m, num7 + 3] == null)
					{
						Main.tile[m, num7 + 3] = default(Tile);
					}
					if (!WorldGen.SolidTileAllowBottomSlope(m, num7 + 3))
					{
						flag = true;
						break;
					}
				}
			}
			else
			{
				if (Main.tile[num + 1, num7 - 1] == null)
				{
					Main.tile[num + 1, num7 - 1] = default(Tile);
				}
				if (!Main.tile[num + 1, num7 - 1].nactive() || !Main.tileSolid[(int)(*Main.tile[num + 1, num7 - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[num + 1, num7 - 1].type)])
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int n = num; n < num + 3; n++)
			{
				for (int num8 = num7; num8 < num7 + 3; num8++)
				{
					if ((int)(*Main.tile[n, num8].type) == type && Main.tile[n, num8].active())
					{
						WorldGen.KillTile(n, num8, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type <= 228)
				{
					if (type <= 212)
					{
						if (type == 106)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 363, 1, false, 0, false, false);
							goto IL_917;
						}
						if (type == 212)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 951, 1, false, 0, false, false);
							goto IL_917;
						}
					}
					else
					{
						if (type == 219)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
							goto IL_917;
						}
						if (type == 220)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
							goto IL_917;
						}
						if (type == 228)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
							goto IL_917;
						}
					}
				}
				else if (type <= 247)
				{
					if (type == 243)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1430, 1, false, 0, false, false);
						goto IL_917;
					}
					if (type == 247)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 1551, 1, false, 0, false, false);
						goto IL_917;
					}
				}
				else
				{
					if (type == 283)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2172, 1, false, 0, false, false);
						goto IL_917;
					}
					if (type - 300 <= 6)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2192 + type - 300, 1, false, 0, false, false);
						goto IL_917;
					}
					if (type == 642)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5296, 1, false, 0, false, false);
						goto IL_917;
					}
				}
				if (type <= 355)
				{
					if (type <= 307)
					{
						if (type != 231)
						{
							if (type == 307)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2203, 1, false, 0, false, false);
							}
						}
						else
						{
							int num17 = (i + 1) * 16 + 8;
							int num9 = j * 16;
							Gore.NewGore(new Vector2((float)num17, (float)num9), default(Vector2), 300, 1f);
							Gore.NewGore(new Vector2((float)num17, (float)(num9 + 8)), default(Vector2), 301, 1f);
							Gore.NewGore(new Vector2((float)num17, (float)(num9 + 16)), default(Vector2), 302, 1f);
							float num10 = (float)(i * 16);
							float num11 = (float)(j * 16);
							float num12 = -1f;
							int plr = 0;
							for (int num13 = 0; num13 < 255; num13++)
							{
								if (Main.player[num13].active && !Main.player[num13].dead)
								{
									float num14 = Math.Abs(Main.player[num13].position.X - num10) + Math.Abs(Main.player[num13].position.Y - num11);
									if (num14 < num12 || num12 == -1f)
									{
										plr = num13;
										num12 = num14;
									}
								}
							}
							if (num12 < 4800f && !Main.gameMenu)
							{
								NPC.SpawnOnPlayer(plr, 222);
							}
						}
					}
					else if (type != 308)
					{
						if (type != 354)
						{
							if (type == 355)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3000, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2999, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 2204, 1, false, 0, false, false);
					}
				}
				else if (type <= 452)
				{
					if (type != 406)
					{
						if (type != 412)
						{
							if (type == 452)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3742, 1, false, 0, false, false);
							}
						}
						else
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3549, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3365, 1, false, 0, false, false);
					}
				}
				else if (type != 455)
				{
					if (type != 491)
					{
						if (type == 499)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4142, 1, false, 0, false, false);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4076, 1, false, 0, false, false);
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 3747, 1, false, 0, false, false);
				}
				IL_917:
				WorldGen.destroyObject = false;
				for (int num15 = num - 1; num15 < num + 4; num15++)
				{
					for (int num16 = num7 - 1; num16 < num7 + 4; num16++)
					{
						WorldGen.TileFrame(num15, num16, false, false);
					}
				}
			}
		}

		// Token: 0x06001295 RID: 4757 RVA: 0x0045B628 File Offset: 0x00459828
		public unsafe static void Check2x5(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num >= 2)
			{
				num2++;
				num -= 2;
			}
			int num3 = i - num;
			int num4 = 36 * num2;
			int num5 = (int)(*Main.tile[i, j].frameY % 80 / 18);
			if (num >= 3)
			{
				num -= 2;
			}
			num = i - num;
			int num6 = j - num5;
			for (int k = num; k < num + 2; k++)
			{
				for (int l = num6; l < num6 + 5; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num3) * 18 + num4 || (int)(*Main.tile[k, l].frameY) != (l - num6) * 18)
					{
						flag = true;
					}
				}
			}
			for (int m = num; m < num + 2; m++)
			{
				if (Main.tile[m, num6 + 5] == null)
				{
					Main.tile[m, num6 + 5] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, num6 + 5))
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int n = num; n < num + 2; n++)
			{
				for (int num7 = num6; num7 < num6 + 5; num7++)
				{
					if ((int)(*Main.tile[n, num7].type) == type && Main.tile[n, num7].active())
					{
						WorldGen.KillTile(n, num7, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type != 547)
				{
					if (type == 623)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 5081 + num2, 1, false, 0, false, false);
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4430 + num2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = num - 1; num8 < num + 3; num8++)
				{
					for (int num9 = num6 - 1; num9 < num6 + 6; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06001296 RID: 4758 RVA: 0x0045B90C File Offset: 0x00459B0C
		public unsafe static void Check3x5(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num >= 3)
			{
				num2++;
				num -= 3;
			}
			int num3 = i - num;
			int num4 = 54 * num2;
			int num5 = (int)(*Main.tile[i, j].frameY % 90 / 18);
			if (num >= 4)
			{
				num -= 3;
			}
			num = i - num;
			int num6 = j - num5;
			for (int k = num; k < num + 3; k++)
			{
				for (int l = num6; l < num6 + 5; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num3) * 18 + num4 || (int)(*Main.tile[k, l].frameY) != (l - num6) * 18)
					{
						flag = true;
					}
				}
			}
			for (int m = num; m < num + 3; m++)
			{
				if (Main.tile[m, num6 + 5] == null)
				{
					Main.tile[m, num6 + 5] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, num6 + 5))
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int n = num; n < num + 3; n++)
			{
				for (int num7 = num6; num7 < num6 + 5; num7++)
				{
					if ((int)(*Main.tile[n, num7].type) == type && Main.tile[n, num7].active())
					{
						WorldGen.KillTile(n, num7, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 613)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4904 + num2, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = num - 1; num8 < num + 4; num8++)
				{
					for (int num9 = num6 - 1; num9 < num6 + 6; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06001297 RID: 4759 RVA: 0x0045BBBC File Offset: 0x00459DBC
		public unsafe static void Check3x6(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = (int)(*Main.tile[i, j].frameX / 18);
			int num2 = 0;
			while (num >= 3)
			{
				num2++;
				num -= 3;
			}
			int num3 = i - num;
			int num4 = 54 * num2;
			int num5 = (int)(*Main.tile[i, j].frameY % 96 / 18);
			if (num >= 4)
			{
				num -= 3;
			}
			num = i - num;
			int num6 = j - num5;
			for (int k = num; k < num + 3; k++)
			{
				for (int l = num6; l < num6 + 6; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || (int)(*Main.tile[k, l].frameX) != (k - num3) * 18 + num4 || (int)(*Main.tile[k, l].frameY) != (l - num6) * 18)
					{
						flag = true;
					}
				}
			}
			for (int m = num; m < num + 3; m++)
			{
				if (Main.tile[m, num6 + 6] == null)
				{
					Main.tile[m, num6 + 6] = default(Tile);
				}
				if (!WorldGen.SolidTileAllowBottomSlope(m, num6 + 6))
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int n = num; n < num + 3; n++)
			{
				for (int num7 = num6; num7 < num6 + 6; num7++)
				{
					if ((int)(*Main.tile[n, num7].type) == type && Main.tile[n, num7].active())
					{
						WorldGen.KillTile(n, num7, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (type == 548)
				{
					if (num2 >= 7)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4902 + num2 - 7, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4435 + num2, 1, false, 0, false, false);
					}
				}
				if (type == 614)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 4906, 1, false, 0, false, false);
				}
				WorldGen.destroyObject = false;
				for (int num8 = num - 1; num8 < num + 4; num8++)
				{
					for (int num9 = num6 - 1; num9 < num6 + 7; num9++)
					{
						WorldGen.TileFrame(num8, num9, false, false);
					}
				}
			}
		}

		// Token: 0x06001298 RID: 4760 RVA: 0x0045BEC4 File Offset: 0x0045A0C4
		public unsafe static void Place3x3(int x, int y, ushort type, int style = 0)
		{
			bool flag = true;
			int num = 0;
			if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 || type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 || type == 642)
			{
				num = -2;
				for (int i = x - 1; i < x + 2; i++)
				{
					for (int j = y - 2; j < y + 1; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = default(Tile);
						}
						if (Main.tile[i, j].active())
						{
							flag = false;
						}
					}
				}
				for (int k = x - 1; k < x + 2; k++)
				{
					if (Main.tile[k, y + 1] == null)
					{
						Main.tile[k, y + 1] = default(Tile);
					}
					if (!WorldGen.SolidTile2(k, y + 1))
					{
						flag = false;
						break;
					}
				}
			}
			else
			{
				for (int l = x - 1; l < x + 2; l++)
				{
					for (int m = y; m < y + 3; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = default(Tile);
						}
						if (Main.tile[l, m].active())
						{
							flag = false;
						}
					}
				}
				if (Main.tile[x, y - 1] == null)
				{
					Main.tile[x, y - 1] = default(Tile);
				}
				if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int)(*Main.tile[x, y - 1].type)] || Main.tileSolidTop[(int)(*Main.tile[x, y - 1].type)])
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num2 = style * 18 * 3;
				Main.tile[x - 1, y + num].active(true);
				*Main.tile[x - 1, y + num].frameY = 0;
				*Main.tile[x - 1, y + num].frameX = (short)num2;
				*Main.tile[x - 1, y + num].type = type;
				Main.tile[x, y + num].active(true);
				*Main.tile[x, y + num].frameY = 0;
				*Main.tile[x, y + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + num].type = type;
				Main.tile[x + 1, y + num].active(true);
				*Main.tile[x + 1, y + num].frameY = 0;
				*Main.tile[x + 1, y + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + num].type = type;
				Main.tile[x - 1, y + 1 + num].active(true);
				*Main.tile[x - 1, y + 1 + num].frameY = 18;
				*Main.tile[x - 1, y + 1 + num].frameX = (short)num2;
				*Main.tile[x - 1, y + 1 + num].type = type;
				Main.tile[x, y + 1 + num].active(true);
				*Main.tile[x, y + 1 + num].frameY = 18;
				*Main.tile[x, y + 1 + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + 1 + num].type = type;
				Main.tile[x + 1, y + 1 + num].active(true);
				*Main.tile[x + 1, y + 1 + num].frameY = 18;
				*Main.tile[x + 1, y + 1 + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + 1 + num].type = type;
				Main.tile[x - 1, y + 2 + num].active(true);
				*Main.tile[x - 1, y + 2 + num].frameY = 36;
				*Main.tile[x - 1, y + 2 + num].frameX = (short)num2;
				*Main.tile[x - 1, y + 2 + num].type = type;
				Main.tile[x, y + 2 + num].active(true);
				*Main.tile[x, y + 2 + num].frameY = 36;
				*Main.tile[x, y + 2 + num].frameX = (short)(num2 + 18);
				*Main.tile[x, y + 2 + num].type = type;
				Main.tile[x + 1, y + 2 + num].active(true);
				*Main.tile[x + 1, y + 2 + num].frameY = 36;
				*Main.tile[x + 1, y + 2 + num].frameX = (short)(num2 + 36);
				*Main.tile[x + 1, y + 2 + num].type = type;
			}
		}

		// Token: 0x06001299 RID: 4761 RVA: 0x0045C514 File Offset: 0x0045A714
		public unsafe static void PlaceSunflower(int x, int y, ushort type = 27)
		{
			if ((double)y > Main.worldSurface - 1.0 && !Main.remixWorld)
			{
				return;
			}
			bool flag = true;
			for (int i = x; i < x + 2; i++)
			{
				for (int j = y - 3; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active() || *Main.tile[i, j].wall > 0)
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() || Main.tile[i, y + 1].slope() != 0 || (*Main.tile[i, y + 1].type != 2 && *Main.tile[i, y + 1].type != 109))
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			int num = WorldGen.genRand.Next(3);
			for (int k = 0; k < 2; k++)
			{
				for (int l = -3; l < 1; l++)
				{
					int num2 = k * 18 + WorldGen.genRand.Next(3) * 36;
					if (l <= -2)
					{
						num2 = k * 18 + num * 36;
					}
					int num3 = (l + 3) * 18;
					Main.tile[x + k, y + l].active(true);
					*Main.tile[x + k, y + l].frameX = (short)num2;
					*Main.tile[x + k, y + l].frameY = (short)num3;
					*Main.tile[x + k, y + l].type = type;
				}
			}
		}

		// Token: 0x0600129A RID: 4762 RVA: 0x0045C758 File Offset: 0x0045A958
		public unsafe static void FixSunflowers()
		{
			for (int i = 5; i < Main.maxTilesX - 5; i++)
			{
				int j = 5;
				while ((double)j < Main.worldSurface)
				{
					if (Main.tile[i, j].active() && *Main.tile[i, j].type == 27)
					{
						WorldGen.FixSunflower(i, j);
					}
					j++;
				}
			}
		}

		// Token: 0x0600129B RID: 4763 RVA: 0x0045C7C0 File Offset: 0x0045A9C0
		public unsafe static void FixSunflower(int i, int j)
		{
			if (*Main.tile[i, j].type != 27)
			{
				return;
			}
			int num = 0;
			num += (int)(*Main.tile[i, j].frameX / 18);
			int num2 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			while (num > 1)
			{
				num -= 2;
			}
			num *= -1;
			num += i;
			int num3 = WorldGen.genRand.Next(3) * 36;
			int num4 = 0;
			for (int k = num; k < num + 2; k++)
			{
				for (int l = num2; l < num2 + 4; l++)
				{
					*Main.tile[k, l].frameX = (short)(num4 + num3);
				}
				num4 += 18;
			}
		}

		// Token: 0x0600129C RID: 4764 RVA: 0x0045C890 File Offset: 0x0045AA90
		public unsafe static void CheckSunflower(int i, int j, int type = 27)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			num += (int)(*Main.tile[i, j].frameX / 18);
			int num2 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			while (num > 1)
			{
				num -= 2;
			}
			num *= -1;
			num += i;
			for (int k = num; k < num + 2; k++)
			{
				for (int l = num2; l < num2 + 4; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					int num3;
					for (num3 = (int)(*Main.tile[k, l].frameX / 18); num3 > 1; num3 -= 2)
					{
					}
					if (!Main.tile[k, l].nactive() || (int)(*Main.tile[k, l].type) != type || num3 != k - num || (int)(*Main.tile[k, l].frameY) != (l - num2) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num2 + 4] == null)
				{
					Main.tile[k, num2 + 4] = default(Tile);
				}
				if (!Main.tile[k, num2 + 4].nactive() || !TileObjectData.GetTileData(type, 0, 0).AnchorValidTiles.Contains((int)(*Main.tile[k, num2 + 4].type)))
				{
					flag = true;
				}
				if (!WorldGen.SolidTile(k, num2 + 4, false))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 2; m++)
			{
				for (int n = num2; n < num2 + 4; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x0600129D RID: 4765 RVA: 0x0045CB2C File Offset: 0x0045AD2C
		public unsafe static void CheckDye(int x, int y)
		{
			int num = (int)(*Main.tile[x, y].frameX / 34);
			if (num != 6)
			{
				if (num == 7)
				{
					if (!WorldGen.SolidTile(x, y - 1, false))
					{
						WorldGen.KillTile(x, y, false, false, false);
						return;
					}
				}
				else if (!WorldGen.SolidTile(x, y + 1, false))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if (!Main.tile[x, y + 1].nactive() || *Main.tile[x, y + 1].type != 80)
			{
				WorldGen.KillTile(x, y, false, false, false);
				return;
			}
		}

		// Token: 0x0600129E RID: 4766 RVA: 0x0045CBC5 File Offset: 0x0045ADC5
		public static void CheckRockGolemHead(int x, int y)
		{
			if (!WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x0600129F RID: 4767 RVA: 0x0045CBDC File Offset: 0x0045ADDC
		public unsafe static void CheckStinkbugBlocker(int x, int y)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			int num = (int)(*tileSafely.frameX / 18);
			int style = -1;
			if (WorldGen.AttemptReorientingStinkbugBlocker(x, y, (int)(*tileSafely.wall), ref style))
			{
				if (style != num)
				{
					*tileSafely.frameX = (short)(style * 18);
					return;
				}
			}
			else
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x060012A0 RID: 4768 RVA: 0x0045CC30 File Offset: 0x0045AE30
		public static bool AttemptReorientingStinkbugBlocker(int x, int y, int wall, ref int style)
		{
			style = -1;
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				style = 0;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x, y - 1))
			{
				style = 1;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x + 1, y))
			{
				style = 2;
			}
			if (style == -1 && WorldGen.SolidTileAllowBottomSlope(x - 1, y))
			{
				style = 3;
			}
			if (style == -1 && wall > 0)
			{
				style = 4;
			}
			return style > -1;
		}

		// Token: 0x060012A1 RID: 4769 RVA: 0x0045CCA0 File Offset: 0x0045AEA0
		public unsafe static void CheckGnome(int x, int j)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = 567;
			int num2 = j;
			bool flag = true;
			Tile tileSafely = Framing.GetTileSafely(x, num2);
			Tile tileSafely2 = Framing.GetTileSafely(x, num2 + 1);
			if (*tileSafely.frameY > 0)
			{
				num2--;
				tileSafely = Framing.GetTileSafely(x, num2);
				tileSafely2 = Framing.GetTileSafely(x, num2 + 1);
			}
			short num3 = *tileSafely.frameX / 28;
			if (*tileSafely.frameY == 0 && *tileSafely2.frameY == 20 && (int)(*tileSafely.type) == num && (int)(*tileSafely2.type) == num)
			{
				flag = false;
			}
			if (Main.tile[x, num2 + 2] == null)
			{
				Main.tile[x, num2 + 2] = default(Tile);
			}
			if (!WorldGen.SolidTileAllowBottomSlope(x, num2 + 2) && !TileID.Sets.Platforms[(int)(*Main.tile[x, num2 + 2].type)])
			{
				flag = true;
			}
			if (flag)
			{
				WorldGen.destroyObject = true;
				bool drop = TileLoader.Drop(x, j, num, true);
				if ((int)(*tileSafely.type) == num)
				{
					WorldGen.KillTile(x, num2, false, false, false);
				}
				if ((int)(*tileSafely2.type) == num)
				{
					WorldGen.KillTile(x, num2 + 1, false, false, false);
				}
				using (new Item.DisableNewItemMethod(!drop))
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, num2), x * 16, num2 * 16, 16, 32, 4609, 1, false, 0, false, false);
					WorldGen.destroyObject = false;
				}
			}
		}

		// Token: 0x060012A2 RID: 4770 RVA: 0x0045CE18 File Offset: 0x0045B018
		public static void PlaceGnome(int x, int y, int style)
		{
			WorldGen.PlaceObject(x, y, 567, false, style, 0, -1, -1);
		}

		// Token: 0x060012A3 RID: 4771 RVA: 0x0045CE2C File Offset: 0x0045B02C
		public unsafe static void PlaceDye(int x, int y, int style)
		{
			bool flag = false;
			if (Main.tile[x, y + 1] == null || Main.tile[x, y - 1] == null)
			{
				return;
			}
			if (style == 7)
			{
				if (Main.tile[x, y + 1].active() && *Main.tile[x, y + 1].type != 3 && *Main.tile[x, y + 1].type != 51 && *Main.tile[x, y + 1].type != 61 && *Main.tile[x, y + 1].type != 73 && *Main.tile[x, y + 1].type != 74 && *Main.tile[x, y + 1].type != 184)
				{
					return;
				}
				if (WorldGen.SolidTile(x, y - 1, false) && !Main.tile[x, y + 1].active())
				{
					flag = true;
				}
			}
			else
			{
				if (Main.tile[x, y - 1].active() && *Main.tile[x, y - 1].type != 3 && *Main.tile[x, y - 1].type != 51 && *Main.tile[x, y - 1].type != 61 && *Main.tile[x, y - 1].type != 73 && *Main.tile[x, y - 1].type != 74 && *Main.tile[x, y - 1].type != 184)
				{
					return;
				}
				if (style == 6)
				{
					if (Main.tile[x, y + 1].nactive() && *Main.tile[x, y + 1].type == 80 && !Main.tile[x - 1, y + 1].active() && !Main.tile[x + 1, y + 1].active())
					{
						flag = true;
					}
				}
				else if (WorldGen.SolidTile(x, y + 1, false) && !Main.tile[x, y - 1].active())
				{
					if (style != 5)
					{
						if (style - 8 > 3)
						{
							if (*Main.tile[x, y].liquid == 0)
							{
								if (style == 3 || style == 4)
								{
									if (*Main.tile[x, y].wall == 0)
									{
										flag = true;
									}
								}
								else
								{
									flag = true;
								}
							}
						}
						else
						{
							flag = true;
						}
					}
					else if (*Main.tile[x, y].liquid == 255 && !Main.tile[x, y].lava() && !Main.tile[x, y].honey() && !Main.tile[x, y].shimmer())
					{
						flag = true;
					}
				}
			}
			if (flag)
			{
				*Main.tile[x, y].type = 227;
				Main.tile[x, y].active(true);
				Main.tile[x, y].halfBrick(false);
				Main.tile[x, y].slope(0);
				*Main.tile[x, y].frameY = 0;
				*Main.tile[x, y].frameX = (short)(34 * style);
			}
		}

		// Token: 0x060012A4 RID: 4772 RVA: 0x0045D210 File Offset: 0x0045B410
		public unsafe static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
		{
			bool flag = true;
			if (WorldGen.remixWorldGen && (double)x > (double)Main.maxTilesX * 0.48 && (double)x < (double)Main.maxTilesX * 0.52 && y > Main.maxTilesY - 220)
			{
				flag = false;
			}
			for (int i = x; i < x + 2; i++)
			{
				for (int j = y - 1; j < y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if (Main.tile[i, j].active())
					{
						flag = false;
					}
				}
				if (Main.tile[i, y + 1] == null)
				{
					Main.tile[i, y + 1] = default(Tile);
				}
				if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() || Main.tile[i, y + 1].slope() != 0 || !Main.tileSolid[(int)(*Main.tile[i, y + 1].type)])
				{
					flag = false;
				}
			}
			if (flag)
			{
				int num = WorldGen.genRand.Next(3) * 36;
				for (int k = 0; k < 2; k++)
				{
					for (int l = -1; l < 1; l++)
					{
						int num2 = k * 18 + num;
						int num3 = (l + 1) * 18;
						Main.tile[x + k, y + l].active(true);
						*Main.tile[x + k, y + l].frameX = (short)num2;
						*Main.tile[x + k, y + l].frameY = (short)(num3 + style * 36);
						*Main.tile[x + k, y + l].type = type;
						Main.tile[x + k, y + l].halfBrick(false);
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012A5 RID: 4773 RVA: 0x0045D444 File Offset: 0x0045B644
		public unsafe static bool CheckCactus(int i, int j)
		{
			int num = j;
			int num2 = i;
			while (Main.tile[num2, num] != null && Main.tile[num2, num].active() && *Main.tile[num2, num].type == 80)
			{
				num++;
				if (Main.tile[num2, num] == null)
				{
					return false;
				}
				if (!Main.tile[num2, num].active() || *Main.tile[num2, num].type != 80)
				{
					if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() && *Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1] != null && Main.tile[num2 - 1, num - 1].active() && *Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
					{
						num2--;
					}
					if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() && *Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1] != null && Main.tile[num2 + 1, num - 1].active() && *Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
					{
						num2++;
					}
				}
			}
			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || (*Main.tile[num2, num].type != 53 && *Main.tile[num2, num].type != 112 && *Main.tile[num2, num].type != 116 && *Main.tile[num2, num].type != 234 && !TileLoader.CanGrowModCactus((int)(*Main.tile[num2, num].type))))
			{
				WorldGen.KillTile(i, j, false, false, false);
				return true;
			}
			if (i != num2)
			{
				if ((!Main.tile[i, j + 1].active() || *Main.tile[i, j + 1].type != 80) && (!Main.tile[i - 1, j].active() || *Main.tile[i - 1, j].type != 80) && (!Main.tile[i + 1, j].active() || *Main.tile[i + 1, j].type != 80))
				{
					WorldGen.KillTile(i, j, false, false, false);
					return true;
				}
			}
			else if (i == num2 && (!Main.tile[i, j + 1].active() || (*Main.tile[i, j + 1].type != 80 && *Main.tile[i, j + 1].type != 53 && *Main.tile[i, j + 1].type != 112 && *Main.tile[i, j + 1].type != 116 && *Main.tile[i, j + 1].type != 234 && !TileLoader.CanGrowModCactus((int)(*Main.tile[i, j + 1].type)))))
			{
				WorldGen.KillTile(i, j, false, false, false);
				return true;
			}
			return false;
		}

		// Token: 0x060012A6 RID: 4774 RVA: 0x0045D89C File Offset: 0x0045BA9C
		public static void PlantCactus(int i, int j)
		{
			WorldGen.GrowCactus(i, j);
			for (int k = 0; k < 150; k++)
			{
				int i2 = WorldGen.genRand.Next(i - 1, i + 2);
				int j2 = WorldGen.genRand.Next(j - 10, j + 2);
				WorldGen.GrowCactus(i2, j2);
			}
		}

		// Token: 0x060012A7 RID: 4775 RVA: 0x0045D8E8 File Offset: 0x0045BAE8
		public unsafe static void CheckOrb(int i, int j, int type)
		{
			if (Main.tile[i, j] == null)
			{
				return;
			}
			int num10 = (int)(*Main.tile[i, j].frameX);
			bool flag = false;
			if (num10 >= 36)
			{
				flag = true;
			}
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = (*Main.tile[i, j].frameX != 0 && *Main.tile[i, j].frameX != 36) ? (i - 1) : i;
			int num2 = (*Main.tile[i, j].frameY != 0) ? (j - 1) : j;
			for (int k = 0; k < 2; k++)
			{
				for (int l = 0; l < 2; l++)
				{
					Tile tile = Main.tile[num + k, num2 + l];
					if (tile != null && (!tile.nactive() || (int)(*tile.type) != type))
					{
						WorldGen.destroyObject = true;
						break;
					}
				}
				if (WorldGen.destroyObject)
				{
					break;
				}
				if ((type == 12 || type == 639) && Main.tile[num + k, num2 + 2] != null && !WorldGen.SolidTileAllowBottomSlope(num + k, num2 + 2))
				{
					WorldGen.destroyObject = true;
					break;
				}
			}
			if (!WorldGen.destroyObject)
			{
				return;
			}
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 2; m++)
			{
				for (int n = num2; n < num2 + 2; n++)
				{
					if (Main.tile[m, n] != null && (int)(*Main.tile[m, n].type) == type)
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				if (Main.netMode != 1 && !WorldGen.noTileActions)
				{
					if (type != 12)
					{
						if (type != 31)
						{
							if (type == 639)
							{
								Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 109, 1, false, 0, false, false);
							}
						}
						else
						{
							if (flag)
							{
								int num3 = Main.rand.Next(5);
								if (!WorldGen.shadowOrbSmashed)
								{
									num3 = 0;
								}
								switch (num3)
								{
								case 0:
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 800, 1, false, -1, false, false);
									int stack = WorldGen.genRand.Next(100, 101);
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 97, stack, false, 0, false, false);
									break;
								}
								case 1:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 1256, 1, false, -1, false, false);
									break;
								case 2:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 802, 1, false, -1, false, false);
									break;
								case 3:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 3062, 1, false, -1, false, false);
									break;
								case 4:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 1290, 1, false, -1, false, false);
									break;
								}
							}
							else
							{
								int num4 = Main.rand.Next(5);
								if (!WorldGen.shadowOrbSmashed)
								{
									num4 = 0;
								}
								switch (num4)
								{
								case 0:
								{
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 96, 1, false, -1, false, false);
									int stack2 = WorldGen.genRand.Next(100, 101);
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 97, stack2, false, 0, false, false);
									break;
								}
								case 1:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 64, 1, false, -1, false, false);
									break;
								case 2:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 162, 1, false, -1, false, false);
									break;
								case 3:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 115, 1, false, -1, false, false);
									break;
								case 4:
									Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 111, 1, false, -1, false, false);
									break;
								}
							}
							WorldGen.shadowOrbSmashed = true;
							WorldGen.shadowOrbCount++;
							if (WorldGen.shadowOrbCount >= 3)
							{
								if ((!NPC.AnyNPCs(266) || !flag) && (!NPC.AnyNPCs(13) || flag))
								{
									WorldGen.shadowOrbCount = 0;
									float num5 = (float)(num * 16);
									float num6 = (float)(num2 * 16);
									float num7 = -1f;
									int plr = 0;
									for (int num8 = 0; num8 < 255; num8++)
									{
										float num9 = Math.Abs(Main.player[num8].position.X - num5) + Math.Abs(Main.player[num8].position.Y - num6);
										if (num9 < num7 || num7 == -1f)
										{
											plr = num8;
											num7 = num9;
										}
									}
									if (flag)
									{
										NPC.SpawnOnPlayer(plr, 266);
									}
									else
									{
										NPC.SpawnOnPlayer(plr, 13);
									}
								}
							}
							else
							{
								LocalizedText localizedText = Lang.misc[10];
								if (WorldGen.shadowOrbCount == 2)
								{
									localizedText = Lang.misc[11];
								}
								if (Main.netMode == 0)
								{
									Main.NewText(localizedText.ToString(), 50, byte.MaxValue, 130);
								}
								else if (Main.netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(NetworkText.FromKey(localizedText.Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
								}
							}
							AchievementsHelper.NotifyProgressionEvent(7);
						}
					}
					else
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(num, num2), num * 16, num2 * 16, 32, 32, 29, 1, false, 0, false, false);
					}
				}
				if (flag)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
				}
				else
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x060012A8 RID: 4776 RVA: 0x0045DF24 File Offset: 0x0045C124
		public unsafe static void CheckPalmTree(int i, int j)
		{
			int num = -1;
			int num2 = -1;
			int type = (int)(*Main.tile[i, j].type);
			int frameX = (int)(*Main.tile[i, j].frameX);
			int frameY = (int)(*Main.tile[i, j].frameY);
			if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
			{
				num = (int)(*Main.tile[i, j - 1].type);
			}
			if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
			{
				num2 = (int)(*Main.tile[i, j + 1].type);
			}
			if (num2 == 53)
			{
				num2 = 53;
			}
			if (num2 == 234)
			{
				num2 = 53;
			}
			if (num2 == 116)
			{
				num2 = 53;
			}
			if (num2 == 112)
			{
				num2 = 53;
			}
			if (TileLoader.CanGrowModPalmTree(num2))
			{
				num2 = 53;
			}
			if (num2 != 53 && num2 != type)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if ((*Main.tile[i, j].frameX == 66 || *Main.tile[i, j].frameX == 220) && num2 != 53)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if (num != type && *Main.tile[i, j].frameX <= 44)
			{
				*Main.tile[i, j].frameX = (short)(WorldGen.genRand.Next(7, 10) * 22);
			}
			else if (num != type && *Main.tile[i, j].frameX == 66)
			{
				*Main.tile[i, j].frameX = 220;
			}
			if ((int)(*Main.tile[i, j].frameX) != frameX && (int)(*Main.tile[i, j].frameY) != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				WorldGen.TileFrame(i + 1, j, false, false);
				WorldGen.TileFrame(i, j - 1, false, false);
				WorldGen.TileFrame(i, j + 1, false, false);
			}
		}

		// Token: 0x060012A9 RID: 4777 RVA: 0x0045E17C File Offset: 0x0045C37C
		public unsafe static void CheckTreeWithSettings(int x, int y, WorldGen.CheckTreeSettings settings)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			Tile tile = Main.tile[x, y];
			int type = (int)(*tile.type);
			int frameX = (int)(*tile.frameX);
			int frameY = (int)(*tile.frameY);
			if (Main.tile[x - 1, y] != null && Main.tile[x - 1, y].active())
			{
				num2 = (int)(*Main.tile[x - 1, y].type);
			}
			if (Main.tile[x + 1, y] != null && Main.tile[x + 1, y].active())
			{
				num3 = (int)(*Main.tile[x + 1, y].type);
			}
			if (Main.tile[x, y - 1] != null && Main.tile[x, y - 1].active())
			{
				num = (int)(*Main.tile[x, y - 1].type);
			}
			if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].active())
			{
				num4 = (int)(*Main.tile[x, y + 1].type);
			}
			bool flag = settings.IsGroundValid(num4);
			bool flag2 = num3 == type;
			bool flag3 = num2 == type;
			if (!flag && num4 != type && ((*tile.frameX == 0 && *tile.frameY <= 130) || (*tile.frameX == 22 && *tile.frameY <= 130) || (*tile.frameX == 44 && *tile.frameY <= 130)))
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
			if (*tile.frameX >= 22 && *tile.frameX <= 44 && *tile.frameY >= 132 && *tile.frameY <= 176)
			{
				if (!flag)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				else if ((*tile.frameX != 22 || !flag3) && (*tile.frameX != 44 || !flag2))
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if ((*tile.frameX == 88 && *tile.frameY >= 0 && *tile.frameY <= 44) || (*tile.frameX == 66 && *tile.frameY >= 66 && *tile.frameY <= 130) || (*tile.frameX == 110 && *tile.frameY >= 66 && *tile.frameY <= 110) || (*tile.frameX == 132 && *tile.frameY >= 0 && *tile.frameY <= 176))
			{
				if (flag3 && flag2)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 110;
						*tile.frameY = 66;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 110;
						*tile.frameY = 88;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 110;
						*tile.frameY = 110;
					}
				}
				else if (flag3)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 88;
						*tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 88;
						*tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 88;
						*tile.frameY = 44;
					}
				}
				else if (flag2)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 66;
						*tile.frameY = 66;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 66;
						*tile.frameY = 88;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 66;
						*tile.frameY = 110;
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 0;
						*tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 0;
						*tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 0;
						*tile.frameY = 44;
					}
				}
			}
			if (*tile.frameY >= 132 && *tile.frameY <= 176 && (*tile.frameX == 0 || *tile.frameX == 66 || *tile.frameX == 88))
			{
				if (!flag)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
				if (!flag3 && !flag2)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 0;
						*tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 0;
						*tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 0;
						*tile.frameY = 44;
					}
				}
				else if (!flag3)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 0;
						*tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 0;
						*tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 0;
						*tile.frameY = 176;
					}
				}
				else if (!flag2)
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 66;
						*tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 66;
						*tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 66;
						*tile.frameY = 176;
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 88;
						*tile.frameY = 132;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 88;
						*tile.frameY = 154;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 88;
						*tile.frameY = 176;
					}
				}
			}
			if ((*tile.frameX == 66 && (*tile.frameY == 0 || *tile.frameY == 22 || *tile.frameY == 44)) || (*tile.frameX == 44 && (*tile.frameY == 198 || *tile.frameY == 220 || *tile.frameY == 242)))
			{
				if (!flag2)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if ((*tile.frameX == 88 && (*tile.frameY == 66 || *tile.frameY == 88 || *tile.frameY == 110)) || (*tile.frameX == 66 && (*tile.frameY == 198 || *tile.frameY == 220 || *tile.frameY == 242)))
			{
				if (!flag3)
				{
					WorldGen.KillTile(x, y, false, false, false);
				}
			}
			else if (num4 == -1)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
			else if (num != type && *tile.frameY < 198 && ((*tile.frameX != 22 && *tile.frameX != 44) || *tile.frameY < 132))
			{
				if (flag3 || flag2)
				{
					if (num4 == type)
					{
						if (flag3 && flag2)
						{
							if (tile.frameNumber() == 0)
							{
								*tile.frameX = 132;
								*tile.frameY = 132;
							}
							if (tile.frameNumber() == 1)
							{
								*tile.frameX = 132;
								*tile.frameY = 154;
							}
							if (tile.frameNumber() == 2)
							{
								*tile.frameX = 132;
								*tile.frameY = 176;
							}
						}
						else if (flag3)
						{
							if (tile.frameNumber() == 0)
							{
								*tile.frameX = 132;
								*tile.frameY = 0;
							}
							if (tile.frameNumber() == 1)
							{
								*tile.frameX = 132;
								*tile.frameY = 22;
							}
							if (tile.frameNumber() == 2)
							{
								*tile.frameX = 132;
								*tile.frameY = 44;
							}
						}
						else if (flag2)
						{
							if (tile.frameNumber() == 0)
							{
								*tile.frameX = 132;
								*tile.frameY = 66;
							}
							if (tile.frameNumber() == 1)
							{
								*tile.frameX = 132;
								*tile.frameY = 88;
							}
							if (tile.frameNumber() == 2)
							{
								*tile.frameX = 132;
								*tile.frameY = 110;
							}
						}
					}
					else if (flag3 && flag2)
					{
						if (tile.frameNumber() == 0)
						{
							*tile.frameX = 154;
							*tile.frameY = 132;
						}
						if (tile.frameNumber() == 1)
						{
							*tile.frameX = 154;
							*tile.frameY = 154;
						}
						if (tile.frameNumber() == 2)
						{
							*tile.frameX = 154;
							*tile.frameY = 176;
						}
					}
					else if (flag3)
					{
						if (tile.frameNumber() == 0)
						{
							*tile.frameX = 154;
							*tile.frameY = 0;
						}
						if (tile.frameNumber() == 1)
						{
							*tile.frameX = 154;
							*tile.frameY = 22;
						}
						if (tile.frameNumber() == 2)
						{
							*tile.frameX = 154;
							*tile.frameY = 44;
						}
					}
					else if (flag2)
					{
						if (tile.frameNumber() == 0)
						{
							*tile.frameX = 154;
							*tile.frameY = 66;
						}
						if (tile.frameNumber() == 1)
						{
							*tile.frameX = 154;
							*tile.frameY = 88;
						}
						if (tile.frameNumber() == 2)
						{
							*tile.frameX = 154;
							*tile.frameY = 110;
						}
					}
				}
				else
				{
					if (tile.frameNumber() == 0)
					{
						*tile.frameX = 110;
						*tile.frameY = 0;
					}
					if (tile.frameNumber() == 1)
					{
						*tile.frameX = 110;
						*tile.frameY = 22;
					}
					if (tile.frameNumber() == 2)
					{
						*tile.frameX = 110;
						*tile.frameY = 44;
					}
				}
			}
			if ((int)(*tile.frameX) != frameX && (int)(*tile.frameY) != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(x - 1, y, false, false);
				WorldGen.TileFrame(x + 1, y, false, false);
				WorldGen.TileFrame(x, y - 1, false, false);
				WorldGen.TileFrame(x, y + 1, false, false);
			}
		}

		// Token: 0x060012AA RID: 4778 RVA: 0x0045ECA4 File Offset: 0x0045CEA4
		public unsafe static void CheckTree(int i, int j)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int type = (int)(*Main.tile[i, j].type);
			int frameX = (int)(*Main.tile[i, j].frameX);
			int frameY = (int)(*Main.tile[i, j].frameY);
			if (Main.tile[i - 1, j] != null && Main.tile[i - 1, j].active())
			{
				num2 = (int)(*Main.tile[i - 1, j].type);
			}
			if (Main.tile[i + 1, j] != null && Main.tile[i + 1, j].active())
			{
				num3 = (int)(*Main.tile[i + 1, j].type);
			}
			if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
			{
				num = (int)(*Main.tile[i, j - 1].type);
			}
			if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
			{
				num4 = (int)(*Main.tile[i, j + 1].type);
			}
			if (Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].active())
			{
				ref ushort type2 = ref Main.tile[i - 1, j - 1].type;
			}
			if (Main.tile[i + 1, j - 1] != null && Main.tile[i + 1, j - 1].active())
			{
				ref ushort type3 = ref Main.tile[i + 1, j - 1].type;
			}
			if (Main.tile[i - 1, j + 1] != null && Main.tile[i - 1, j + 1].active())
			{
				ref ushort type4 = ref Main.tile[i - 1, j + 1].type;
			}
			if (Main.tile[i + 1, j + 1] != null && Main.tile[i + 1, j + 1].active())
			{
				ref ushort type5 = ref Main.tile[i + 1, j + 1].type;
			}
			if (num4 == 23 || num4 == 661)
			{
				num4 = 2;
			}
			if (num4 == 477)
			{
				num4 = 2;
			}
			if (num4 == 60)
			{
				num4 = 2;
			}
			if (num4 == 70)
			{
				num4 = 2;
			}
			if (num4 == 109)
			{
				num4 = 2;
			}
			if (num4 == 147)
			{
				num4 = 2;
			}
			if (num4 == 199 || num4 == 662)
			{
				num4 = 2;
			}
			if (num4 == 492)
			{
				num4 = 2;
			}
			if (TileLoader.CanGrowModTree(num4))
			{
				num4 = 2;
			}
			if (num4 != 2 && num4 != type && ((*Main.tile[i, j].frameX == 0 && *Main.tile[i, j].frameY <= 130) || (*Main.tile[i, j].frameX == 22 && *Main.tile[i, j].frameY <= 130) || (*Main.tile[i, j].frameX == 44 && *Main.tile[i, j].frameY <= 130)))
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			if (*Main.tile[i, j].frameX >= 22 && *Main.tile[i, j].frameX <= 44 && *Main.tile[i, j].frameY >= 132 && *Main.tile[i, j].frameY <= 176)
			{
				if (num4 != 2)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
				else if ((*Main.tile[i, j].frameX != 22 || num2 != type) && (*Main.tile[i, j].frameX != 44 || num3 != type))
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if ((*Main.tile[i, j].frameX == 88 && *Main.tile[i, j].frameY >= 0 && *Main.tile[i, j].frameY <= 44) || (*Main.tile[i, j].frameX == 66 && *Main.tile[i, j].frameY >= 66 && *Main.tile[i, j].frameY <= 130) || (*Main.tile[i, j].frameX == 110 && *Main.tile[i, j].frameY >= 66 && *Main.tile[i, j].frameY <= 110) || (*Main.tile[i, j].frameX == 132 && *Main.tile[i, j].frameY >= 0 && *Main.tile[i, j].frameY <= 176))
			{
				if (num2 == type && num3 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 66;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 88;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 110;
					}
				}
				else if (num2 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 44;
					}
				}
				else if (num3 == type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 66;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 88;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 110;
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 44;
					}
				}
			}
			if (*Main.tile[i, j].frameY >= 132 && *Main.tile[i, j].frameY <= 176 && (*Main.tile[i, j].frameX == 0 || *Main.tile[i, j].frameX == 66 || *Main.tile[i, j].frameX == 88))
			{
				if (num4 != 2)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
				if (num2 != type && num3 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 44;
					}
				}
				else if (num2 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 0;
						*Main.tile[i, j].frameY = 176;
					}
				}
				else if (num3 != type)
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 66;
						*Main.tile[i, j].frameY = 176;
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 132;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 154;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 88;
						*Main.tile[i, j].frameY = 176;
					}
				}
			}
			if ((*Main.tile[i, j].frameX == 66 && (*Main.tile[i, j].frameY == 0 || *Main.tile[i, j].frameY == 22 || *Main.tile[i, j].frameY == 44)) || (*Main.tile[i, j].frameX == 44 && (*Main.tile[i, j].frameY == 198 || *Main.tile[i, j].frameY == 220 || *Main.tile[i, j].frameY == 242)))
			{
				if (num3 != type)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if ((*Main.tile[i, j].frameX == 88 && (*Main.tile[i, j].frameY == 66 || *Main.tile[i, j].frameY == 88 || *Main.tile[i, j].frameY == 110)) || (*Main.tile[i, j].frameX == 66 && (*Main.tile[i, j].frameY == 198 || *Main.tile[i, j].frameY == 220 || *Main.tile[i, j].frameY == 242)))
			{
				if (num2 != type)
				{
					WorldGen.KillTile(i, j, false, false, false);
				}
			}
			else if (num4 == -1 || num4 == 23)
			{
				WorldGen.KillTile(i, j, false, false, false);
			}
			else if (num != type && *Main.tile[i, j].frameY < 198 && ((*Main.tile[i, j].frameX != 22 && *Main.tile[i, j].frameX != 44) || *Main.tile[i, j].frameY < 132))
			{
				if (num2 == type || num3 == type)
				{
					if (num4 == type)
					{
						if (num2 == type && num3 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 132;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 154;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 176;
							}
						}
						else if (num2 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 0;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 22;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 44;
							}
						}
						else if (num3 == type)
						{
							if (Main.tile[i, j].frameNumber() == 0)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 66;
							}
							if (Main.tile[i, j].frameNumber() == 1)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 88;
							}
							if (Main.tile[i, j].frameNumber() == 2)
							{
								*Main.tile[i, j].frameX = 132;
								*Main.tile[i, j].frameY = 110;
							}
						}
					}
					else if (num2 == type && num3 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 132;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 154;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 176;
						}
					}
					else if (num2 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 0;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 22;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 44;
						}
					}
					else if (num3 == type)
					{
						if (Main.tile[i, j].frameNumber() == 0)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 66;
						}
						if (Main.tile[i, j].frameNumber() == 1)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 88;
						}
						if (Main.tile[i, j].frameNumber() == 2)
						{
							*Main.tile[i, j].frameX = 154;
							*Main.tile[i, j].frameY = 110;
						}
					}
				}
				else
				{
					if (Main.tile[i, j].frameNumber() == 0)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 0;
					}
					if (Main.tile[i, j].frameNumber() == 1)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 22;
					}
					if (Main.tile[i, j].frameNumber() == 2)
					{
						*Main.tile[i, j].frameX = 110;
						*Main.tile[i, j].frameY = 44;
					}
				}
			}
			if ((int)(*Main.tile[i, j].frameX) != frameX && (int)(*Main.tile[i, j].frameY) != frameY && frameX >= 0 && frameY >= 0)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				WorldGen.TileFrame(i + 1, j, false, false);
				WorldGen.TileFrame(i, j - 1, false, false);
				WorldGen.TileFrame(i, j + 1, false, false);
			}
		}

		// Token: 0x060012AB RID: 4779 RVA: 0x00460404 File Offset: 0x0045E604
		public unsafe static bool TileIsExposedToAir(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && (!tile.active() || !Main.tileSolid[(int)(*tile.type)] || TileID.Sets.Platforms[(int)(*tile.type)]))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060012AC RID: 4780 RVA: 0x00460480 File Offset: 0x0045E680
		public unsafe static bool TryKillingTreesAboveIfTheyWouldBecomeInvalid(int i, int j, int newFloorType)
		{
			if (newFloorType < 0)
			{
				return false;
			}
			if (!WorldGen.InWorld(i, j, 2))
			{
				return false;
			}
			Tile tile = Main.tile[i, j - 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			int type = (int)(*tile.type);
			if (!WorldGen.IsTreeType((int)(*tile.type)) && *tile.type != 323)
			{
				return false;
			}
			bool flag;
			if (type != 72)
			{
				if (type != 323)
				{
					flag = (TileID.Sets.Conversion.Grass[newFloorType] || TileID.Sets.Conversion.JungleGrass[newFloorType] || TileID.Sets.Conversion.Snow[newFloorType]);
				}
				else
				{
					flag = TileID.Sets.Conversion.Sand[newFloorType];
				}
			}
			else
			{
				flag = (newFloorType == 70);
			}
			WorldGen.GrowTreeSettings profile;
			if (flag && WorldGen.GrowTreeSettings.Profiles.TryGetFromTreeId(type, out profile))
			{
				flag = profile.GroundTest(newFloorType);
			}
			if (!flag)
			{
				WorldGen.KillTile(i, j - 1, false, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)(j - 1), 0f, 0, 0, 0);
				}
			}
			return true;
		}

		/// <inheritdoc cref="M:Terraria.WorldGen.Convert(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)" />
		// Token: 0x060012AD RID: 4781 RVA: 0x00460574 File Offset: 0x0045E774
		public static void Convert(int i, int j, int conversionType, int size)
		{
			WorldGen.Convert(i, j, conversionType, size, true, true);
		}

		/// <summary>
		/// Converts biome variant tiles and walls to a target biome.<br />
		/// Converts a 9x9 square by default, but can be adjusted with the <paramref name="size" /> parameter.
		/// </summary>
		/// <remarks>
		/// For an easily-viewable usage example, refer to the code for projectile AI style 31 (used for the Clentaminator's solutions).
		/// </remarks>
		/// <param name="i">The X coordinate of the target tile.</param>
		/// <param name="j">The Y coordinate of the target tile.</param>
		/// <param name="conversionType">The biome that you wish to convert to. See <see cref="T:Terraria.ID.BiomeConversionID" />
		/// Setting this to 0 (Purity) returns affected tiles to their default states (e.g. Ebonstone, Crimstone, and Pearlstone will be converted back into normal Stone Blocks).<br />
		/// </param>
		/// <param name="size">
		/// When using this method to convert tiles, a square centered on the target tile is converted into those of the target biome.<br />
		/// This optional parameter, which defaults to 4, determines the "radius" of that square in tiles, counting outward from the central tile.<br />
		/// Set to 0 if you only want to convert a single tile. In other cases, use this parameter wisely.
		/// </param>
		/// <param name="tiles">If the conversion should affect tiles</param>
		/// <param name="walls">If the conversion should affect walls</param>
		// Token: 0x060012AE RID: 4782 RVA: 0x00460584 File Offset: 0x0045E784
		public unsafe static void Convert(int i, int j, int conversionType, int size = 4, bool tiles = true, bool walls = true)
		{
			for (int k = i - size; k <= i + size; k++)
			{
				for (int l = j - size; l <= j + size; l++)
				{
					if (WorldGen.InWorld(k, l, 1) && Math.Abs(k - i) + Math.Abs(l - j) < 6)
					{
						Tile tile = Main.tile[k, l];
						int type = (int)(*tile.type);
						int wall = (int)(*tile.wall);
						bool convertWall = walls && wall > 0 && WallLoader.Convert(k, l, conversionType);
						bool convertTile = tiles && tile.HasTile && TileLoader.Convert(k, l, conversionType);
						if (conversionType < BiomeConversionID.Count)
						{
							switch (conversionType)
							{
							case 1:
								if (type <= TileLoader.TileCount && wall <= WallLoader.WallCount)
								{
									if (convertWall)
									{
										if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
										{
											*tile.wall = 69;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.JungleGrass[type] && type != 661)
										{
											*tile.type = 661;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Stone[wall] && wall != 3)
										{
											*tile.wall = 3;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 217)
										{
											*tile.wall = 217;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 220)
										{
											*tile.wall = 220;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 188)
										{
											*tile.wall = 188;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 189)
										{
											*tile.wall = 189;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 190)
										{
											*tile.wall = 190;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 191)
										{
											*tile.wall = 191;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 25)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 25);
											*tile.type = 25;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Grass[type] && type != 23)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 23);
											*tile.type = 23;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Ice[type] && type != 163)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 163);
											*tile.type = 163;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sand[type] && type != 112)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 112);
											*tile.type = 112;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.HardenedSand[type] && type != 398)
										{
											*tile.type = 398;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sandstone[type] && type != 400)
										{
											*tile.type = 400;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type] && type != 32)
										{
											*tile.type = 32;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
								}
								break;
							case 2:
								if (type < TileLoader.TileCount && wall < WallLoader.WallCount)
								{
									if (convertWall)
									{
										if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
										{
											*tile.wall = 70;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Stone[wall] && wall != 28)
										{
											*tile.wall = 28;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 219)
										{
											*tile.wall = 219;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 222)
										{
											*tile.wall = 222;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 200)
										{
											*tile.wall = 200;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 201)
										{
											*tile.wall = 201;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 202)
										{
											*tile.wall = 202;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 203)
										{
											*tile.wall = 203;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 117)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 117);
											*tile.type = 117;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.GolfGrass[type] && type != 492)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 492);
											*tile.type = 492;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Grass[type] && type != 109 && type != 492)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 109);
											*tile.type = 109;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Ice[type] && type != 164)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 164);
											*tile.type = 164;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sand[type] && type != 116)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 116);
											*tile.type = 116;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.HardenedSand[type] && type != 402)
										{
											*tile.type = 402;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sandstone[type] && type != 403)
										{
											*tile.type = 403;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type])
										{
											WorldGen.KillTile(k, l, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
											}
										}
										if (type == 59 && (*Main.tile[k - 1, l].type == 109 || *Main.tile[k + 1, l].type == 109 || *Main.tile[k, l - 1].type == 109 || *Main.tile[k, l + 1].type == 109))
										{
											*tile.type = 0;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
								}
								break;
							case 3:
								if (convertWall && WallID.Sets.CanBeConvertedToGlowingMushroom[wall])
								{
									*tile.wall = 80;
									WorldGen.SquareWallFrame(k, l, true);
									NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
								}
								if (convertTile)
								{
									if (*tile.type == 60)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 70);
										*tile.type = 70;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Thorn[type])
									{
										WorldGen.KillTile(k, l, false, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
										}
									}
								}
								break;
							case 4:
								if (type <= TileLoader.TileCount && wall <= WallLoader.WallCount)
								{
									if (convertWall)
									{
										if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
										{
											*tile.wall = 81;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Stone[wall] && wall != 83)
										{
											*tile.wall = 83;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 218)
										{
											*tile.wall = 218;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 221)
										{
											*tile.wall = 221;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 192)
										{
											*tile.wall = 192;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 193)
										{
											*tile.wall = 193;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 194)
										{
											*tile.wall = 194;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 195)
										{
											*tile.wall = 195;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 203)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 203);
											*tile.type = 203;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.JungleGrass[type] && type != 662)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 662);
											*tile.type = 662;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Grass[type] && type != 199)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 199);
											*tile.type = 199;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Ice[type] && type != 200)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 200);
											*tile.type = 200;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sand[type] && type != 234)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 234);
											*tile.type = 234;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.HardenedSand[type] && type != 399)
										{
											*tile.type = 399;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Sandstone[type] && type != 401)
										{
											*tile.type = 401;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type] && type != 352)
										{
											*tile.type = 352;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
								}
								break;
							case 5:
								if (type >= 0 && type < TileLoader.TileCount && wall >= 0 && wall < WallLoader.WallCount)
								{
									if (convertWall)
									{
										if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.NewWall1[wall] || WallID.Sets.Conversion.NewWall2[wall] || WallID.Sets.Conversion.NewWall3[wall] || WallID.Sets.Conversion.NewWall4[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 187)
										{
											*tile.wall = 187;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Dirt[wall] || WallID.Sets.Conversion.Snow[wall]) && wall != 216)
										{
											*tile.wall = 216;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 53)
										{
											int num = 53;
											if (WorldGen.BlockBelowMakesSandConvertIntoHardenedSand(k, l))
											{
												num = 397;
											}
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, num);
											*tile.type = (ushort)num;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.HardenedSand[type] && type != 397)
										{
											*tile.type = 397;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 396)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 396);
											*tile.type = 396;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
										{
											WorldGen.KillTile(k, l, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
											}
										}
									}
								}
								break;
							case 6:
								if (type >= 0 && type < TileLoader.TileCount && wall >= 0 && wall < WallLoader.WallCount)
								{
									if (convertWall)
									{
										if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.NewWall1[wall] || WallID.Sets.Conversion.NewWall2[wall] || WallID.Sets.Conversion.NewWall3[wall] || WallID.Sets.Conversion.NewWall4[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 71)
										{
											*tile.wall = 71;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Dirt[wall] || WallID.Sets.Conversion.Snow[wall]) && wall != 40)
										{
											*tile.wall = 40;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.HardenedSand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 147)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 147);
											*tile.type = 147;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 161)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 161);
											*tile.type = 161;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
										{
											WorldGen.KillTile(k, l, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
											}
										}
									}
								}
								break;
							case 7:
								if (type >= 0 && type < TileLoader.TileCount && wall >= 0 && wall < WallLoader.WallCount)
								{
									if (convertWall)
									{
										if ((WallID.Sets.Conversion.Stone[wall] || WallID.Sets.Conversion.Ice[wall] || WallID.Sets.Conversion.Sandstone[wall]) && wall != 1)
										{
											*tile.wall = 1;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((WallID.Sets.Conversion.HardenedSand[wall] || WallID.Sets.Conversion.Snow[wall] || WallID.Sets.Conversion.Dirt[wall]) && wall != 2)
										{
											*tile.wall = 2;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall1[wall] && wall != 196)
										{
											*tile.wall = 196;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 197)
										{
											*tile.wall = 197;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 198)
										{
											*tile.wall = 198;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 199)
										{
											*tile.wall = 199;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									if (convertTile)
									{
										if ((TileID.Sets.Conversion.Stone[type] || TileID.Sets.Conversion.Ice[type] || TileID.Sets.Conversion.Sandstone[type]) && type != 1)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 1);
											*tile.type = 1;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.GolfGrass[type] && type != 477)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 477);
											*tile.type = 477;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Grass[type] && type != 2 && type != 477)
										{
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 2);
											*tile.type = 2;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if ((TileID.Sets.Conversion.Sand[type] || TileID.Sets.Conversion.HardenedSand[type] || TileID.Sets.Conversion.Snow[type] || TileID.Sets.Conversion.Dirt[type]) && type != 0)
										{
											int num2 = 0;
											if (WorldGen.TileIsExposedToAir(k, l))
											{
												num2 = 2;
											}
											WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, num2);
											*tile.type = (ushort)num2;
											WorldGen.SquareTileFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else if (TileID.Sets.Conversion.Thorn[type] && type != 69)
										{
											WorldGen.KillTile(k, l, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
											}
										}
									}
								}
								break;
							default:
								if (convertWall)
								{
									if (*tile.wall == 69 || *tile.wall == 70 || *tile.wall == 81)
									{
										if ((double)l < Main.worldSurface)
										{
											if (WorldGen.genRand.Next(10) == 0)
											{
												*tile.wall = 65;
											}
											else
											{
												*tile.wall = 63;
											}
										}
										else
										{
											*tile.wall = 64;
										}
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.Stone[wall] && wall != 1 && wall != 262 && wall != 274 && wall != 61 && wall != 185)
									{
										*tile.wall = 1;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.Stone[wall] && wall == 262)
									{
										*tile.wall = 61;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.Stone[wall] && wall == 274)
									{
										*tile.wall = 185;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									if (WallID.Sets.Conversion.NewWall1[wall] && wall != 212)
									{
										*tile.wall = 212;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.NewWall2[wall] && wall != 213)
									{
										*tile.wall = 213;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.NewWall3[wall] && wall != 214)
									{
										*tile.wall = 214;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.NewWall4[wall] && wall != 215)
									{
										*tile.wall = 215;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (*tile.wall == 80)
									{
										if ((double)l < Main.worldSurface + 4.0 + (double)WorldGen.genRand.Next(3) || (double)l > ((double)Main.maxTilesY + Main.rockLayer) / 2.0 - 3.0 + (double)WorldGen.genRand.Next(3))
										{
											*tile.wall = 15;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
										else
										{
											*tile.wall = 64;
											WorldGen.SquareWallFrame(k, l, true);
											NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
										}
									}
									else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 216)
									{
										*tile.wall = 216;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 187)
									{
										*tile.wall = 187;
										WorldGen.SquareWallFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
								}
								if (convertTile)
								{
									if (*tile.type == 492)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 477);
										*tile.type = 477;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.JungleGrass[type] && type != 60)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 60);
										*tile.type = 60;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Grass[type] && type != 2 && type != 477)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 2);
										*tile.type = 2;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Stone[type] && type != 1)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 1);
										*tile.type = 1;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Sand[type] && type != 53)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 53);
										*tile.type = 53;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.HardenedSand[type] && type != 397)
									{
										*tile.type = 397;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Sandstone[type] && type != 396)
									{
										*tile.type = 396;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.Ice[type] && type != 161)
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 161);
										*tile.type = 161;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (TileID.Sets.Conversion.MushroomGrass[type])
									{
										WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(k, l, 60);
										*tile.type = 60;
										WorldGen.SquareTileFrame(k, l, true);
										NetMessage.SendTileSquare(-1, k, l, TileChangeType.None);
									}
									else if (*tile.type == 32 || *Main.tile[k, l].type == 352)
									{
										WorldGen.KillTile(k, l, false, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
										}
									}
								}
								break;
							}
						}
					}
				}
			}
		}

		// Token: 0x060012AF RID: 4783 RVA: 0x00461EA8 File Offset: 0x004600A8
		public unsafe static void CactusFrame(int i, int j)
		{
			try
			{
				int num = j;
				int num2 = i;
				if (!WorldGen.CheckCactus(i, j))
				{
					while (Main.tile[num2, num].active() && *Main.tile[num2, num].type == 80)
					{
						num++;
						if (Main.tile[num2, num] == null)
						{
							return;
						}
						if (!Main.tile[num2, num].active() || *Main.tile[num2, num].type != 80)
						{
							if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() && *Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1].active() && *Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
							{
								num2--;
							}
							if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() && *Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1].active() && *Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
							{
								num2++;
							}
						}
					}
					num--;
					int num3 = i - num2;
					if (!(Main.tile[i - 2, j] == null))
					{
						int type = (int)(*Main.tile[i - 2, j].type);
						if (!(Main.tile[i - 1, j] == null))
						{
							int num4 = (int)(*Main.tile[i - 1, j].type);
							if (!(Main.tile[i + 1, j] == null))
							{
								int num5 = (int)(*Main.tile[i + 1, j].type);
								if (!(Main.tile[i, j - 1] == null))
								{
									int num6 = (int)(*Main.tile[i, j - 1].type);
									if (num6 == 227)
									{
										num6 = 80;
									}
									int num7 = (int)(*Main.tile[i, j + 1].type);
									int num8 = (int)(*Main.tile[i - 1, j + 1].type);
									int num9 = (int)(*Main.tile[i + 1, j + 1].type);
									if (!Main.tile[i - 1, j].active())
									{
										num4 = -1;
									}
									if (!Main.tile[i + 1, j].active())
									{
										num5 = -1;
									}
									if (!Main.tile[i, j - 1].active())
									{
										num6 = -1;
									}
									if (!Main.tile[i, j + 1].active())
									{
										num7 = -1;
									}
									if (!Main.tile[i - 1, j + 1].active())
									{
										num8 = -1;
									}
									if (!Main.tile[i + 1, j + 1].active())
									{
										num9 = -1;
									}
									short num10 = *Main.tile[i, j].frameX;
									short num11 = *Main.tile[i, j].frameY;
									switch (num3)
									{
									case -1:
										if (num5 == 80)
										{
											if (num6 != 80 && num7 != 80)
											{
												num10 = 108;
												num11 = 36;
											}
											else if (num7 != 80)
											{
												num10 = 54;
												num11 = 36;
											}
											else if (num6 != 80)
											{
												num10 = 54;
												num11 = 0;
											}
											else
											{
												num10 = 54;
												num11 = 18;
											}
										}
										else if (num6 != 80)
										{
											num10 = 54;
											num11 = 0;
										}
										else
										{
											num10 = 54;
											num11 = 18;
										}
										break;
									case 0:
										if (num6 != 80)
										{
											if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
											{
												num10 = 90;
												num11 = 0;
											}
											else if (num4 == 80 && num8 != 80 && type != 80)
											{
												num10 = 72;
												num11 = 0;
											}
											else if (num5 == 80 && num9 != 80)
											{
												num10 = 18;
												num11 = 0;
											}
											else
											{
												num10 = 0;
												num11 = 0;
											}
										}
										else if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
										{
											num10 = 90;
											num11 = 36;
										}
										else if (num4 == 80 && num8 != 80 && type != 80)
										{
											num10 = 72;
											num11 = 36;
										}
										else if (num5 == 80 && num9 != 80)
										{
											num10 = 18;
											num11 = 36;
										}
										else if (num7 >= 0 && Main.tileSolid[num7])
										{
											num10 = 0;
											num11 = 36;
										}
										else
										{
											num10 = 0;
											num11 = 18;
										}
										break;
									case 1:
										if (num4 == 80)
										{
											if (num6 != 80 && num7 != 80)
											{
												num10 = 108;
												num11 = 18;
											}
											else if (num7 != 80)
											{
												num10 = 36;
												num11 = 36;
											}
											else if (num6 != 80)
											{
												num10 = 36;
												num11 = 0;
											}
											else
											{
												num10 = 36;
												num11 = 18;
											}
										}
										else if (num6 != 80)
										{
											num10 = 36;
											num11 = 0;
										}
										else
										{
											num10 = 36;
											num11 = 18;
										}
										break;
									}
									if (num10 != *Main.tile[i, j].frameX || num11 != *Main.tile[i, j].frameY)
									{
										*Main.tile[i, j].frameX = num10;
										*Main.tile[i, j].frameY = num11;
										WorldGen.DiamondTileFrame(i, j);
									}
								}
							}
						}
					}
				}
			}
			catch
			{
				*Main.tile[i, j].frameX = 0;
				*Main.tile[i, j].frameY = 0;
			}
		}

		// Token: 0x060012B0 RID: 4784 RVA: 0x0046250C File Offset: 0x0046070C
		public unsafe static void GrowCactus(int i, int j)
		{
			int num = j;
			int num2 = i;
			if (!Main.tile[i, j].nactive() || Main.tile[i, j].halfBrick() || (!WorldGen.gen && Main.tile[i, j].slope() != 0) || *Main.tile[i, j - 1].liquid > 0 || (*Main.tile[i, j].type != 53 && *Main.tile[i, j].type != 80 && *Main.tile[i, j].type != 234 && *Main.tile[i, j].type != 112 && *Main.tile[i, j].type != 116))
			{
				return;
			}
			int num3 = 0;
			for (int k = i - WorldGen.cactusWaterWidth; k < i + WorldGen.cactusWaterWidth; k++)
			{
				for (int l = j - WorldGen.cactusWaterHeight; l < j + WorldGen.cactusWaterHeight; l++)
				{
					num3 += (int)(*Main.tile[k, l].liquid);
				}
			}
			if ((!Main.remixWorld || (double)j <= Main.worldSurface) && num3 / 255 > WorldGen.cactusWaterLimit)
			{
				return;
			}
			if (*Main.tile[i, j].type == 53 || *Main.tile[i, j].type == 112 || *Main.tile[i, j].type == 116 || *Main.tile[i, j].type == 234 || TileLoader.CanGrowModCactus((int)(*Main.tile[i, j].type)))
			{
				if (Main.tile[i, j - 1].active() || Main.tile[i - 1, j - 1].active() || Main.tile[i + 1, j - 1].active())
				{
					return;
				}
				int num4 = 0;
				int num5 = 0;
				for (int m = i - 6; m <= i + 6; m++)
				{
					for (int n = j - 3; n <= j + 1; n++)
					{
						try
						{
							if (Main.tile[m, n].active())
							{
								if (*Main.tile[m, n].type == 80)
								{
									num4++;
									if (num4 >= 4)
									{
										return;
									}
								}
								if (*Main.tile[m, n].type == 53 || *Main.tile[m, n].type == 112 || *Main.tile[m, n].type == 116 || *Main.tile[m, n].type == 234 || TileLoader.CanGrowModCactus((int)(*Main.tile[m, n].type)))
								{
									num5++;
								}
							}
						}
						catch
						{
						}
					}
				}
				if (num5 > 10)
				{
					if (WorldGen.gen && WorldGen.genRand.Next(2) == 0)
					{
						Main.tile[i, j].slope(0);
					}
					Main.tile[i, j - 1].active(true);
					*Main.tile[i, j - 1].type = 80;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j - 1, TileChangeType.None);
					}
					WorldGen.SquareTileFrame(num2, num - 1, true);
					return;
				}
			}
			else
			{
				if (*Main.tile[i, j].type != 80)
				{
					return;
				}
				while (Main.tile[num2, num].active() && *Main.tile[num2, num].type == 80)
				{
					num++;
					if (!Main.tile[num2, num].active() || *Main.tile[num2, num].type != 80)
					{
						if (Main.tile[num2 - 1, num].active() && *Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1].active() && *Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
						{
							num2--;
						}
						if (Main.tile[num2 + 1, num].active() && *Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1].active() && *Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
						{
							num2++;
						}
					}
				}
				num--;
				int num6 = num - j;
				int num7 = i - num2;
				num2 = i - num7;
				num = j;
				int num8 = 11 - num6;
				int num9 = 0;
				for (int num10 = num2 - 2; num10 <= num2 + 2; num10++)
				{
					for (int num11 = num - num8; num11 <= num + num6; num11++)
					{
						if (Main.tile[num10, num11].active() && *Main.tile[num10, num11].type == 80)
						{
							num9++;
						}
					}
				}
				if (Main.drunkWorld)
				{
					if (num9 >= WorldGen.genRand.Next(11, 20))
					{
						return;
					}
				}
				else if (num9 >= WorldGen.genRand.Next(11, 13))
				{
					return;
				}
				num2 = i;
				num = j;
				if (num7 == 0)
				{
					if (num6 == 0)
					{
						if (!Main.tile[num2, num - 1].active())
						{
							Main.tile[num2, num - 1].active(true);
							*Main.tile[num2, num - 1].type = 80;
							WorldGen.SquareTileFrame(num2, num - 1, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
							}
						}
						return;
					}
					bool flag = false;
					bool flag2 = false;
					if (Main.tile[num2, num - 1].active() && *Main.tile[num2, num - 1].type == 80)
					{
						if (!Main.tile[num2 - 1, num].active() && !Main.tile[num2 - 2, num + 1].active() && !Main.tile[num2 - 1, num - 1].active() && !Main.tile[num2 - 1, num + 1].active() && !Main.tile[num2 - 2, num].active())
						{
							flag = true;
						}
						if (!Main.tile[num2 + 1, num].active() && !Main.tile[num2 + 2, num + 1].active() && !Main.tile[num2 + 1, num - 1].active() && !Main.tile[num2 + 1, num + 1].active() && !Main.tile[num2 + 2, num].active())
						{
							flag2 = true;
						}
					}
					int num12 = WorldGen.genRand.Next(3);
					if (num12 == 0 && flag)
					{
						Main.tile[num2 - 1, num].active(true);
						*Main.tile[num2 - 1, num].type = 80;
						WorldGen.SquareTileFrame(num2 - 1, num, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num2 - 1, num, TileChangeType.None);
							return;
						}
					}
					else if (num12 == 1 && flag2)
					{
						Main.tile[num2 + 1, num].active(true);
						*Main.tile[num2 + 1, num].type = 80;
						WorldGen.SquareTileFrame(num2 + 1, num, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num2 + 1, num, TileChangeType.None);
							return;
						}
					}
					else
					{
						if (num6 >= WorldGen.genRand.Next(2, 8))
						{
							return;
						}
						if (Main.tile[num2 - 1, num - 1].active())
						{
							ref ushort type = ref Main.tile[num2 - 1, num - 1].type;
						}
						if ((!Main.tile[num2 + 1, num - 1].active() || *Main.tile[num2 + 1, num - 1].type != 80) && !Main.tile[num2, num - 1].active())
						{
							Main.tile[num2, num - 1].active(true);
							*Main.tile[num2, num - 1].type = 80;
							WorldGen.SquareTileFrame(num2, num - 1, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
								return;
							}
						}
					}
				}
				else if (!Main.tile[num2, num - 1].active() && !Main.tile[num2, num - 2].active() && !Main.tile[num2 + num7, num - 1].active() && Main.tile[num2 - num7, num - 1].active() && *Main.tile[num2 - num7, num - 1].type == 80)
				{
					Main.tile[num2, num - 1].active(true);
					*Main.tile[num2, num - 1].type = 80;
					WorldGen.SquareTileFrame(num2, num - 1, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, num2, num - 1, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x060012B1 RID: 4785 RVA: 0x00462F58 File Offset: 0x00461158
		public unsafe static void CheckPot(int i, int j, int type = 28)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			for (num += (int)(*Main.tile[i, j].frameX / 18); num > 1; num -= 2)
			{
			}
			num *= -1;
			num += i;
			int num2 = (int)(*Main.tile[i, j].frameY / 18);
			int num3 = 0;
			while (num2 > 1)
			{
				num2 -= 2;
				num3++;
			}
			int num4 = j - num2;
			for (int k = num; k < num + 2; k++)
			{
				for (int l = num4; l < num4 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					int num5;
					for (num5 = (int)(*Main.tile[k, l].frameX / 18); num5 > 1; num5 -= 2)
					{
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || num5 != k - num || (int)(*Main.tile[k, l].frameY) != (l - num4) * 18 + num3 * 36)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num4 + 2] == null)
				{
					Main.tile[k, num4 + 2] = default(Tile);
				}
				if (!WorldGen.SolidTile2(k, num4 + 2))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			WorldGen.destroyObject = true;
			if (num3 >= 7 && num3 <= 9)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (num3 >= 16 && num3 <= 24)
			{
				SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
			}
			else
			{
				SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
			}
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 2; m++)
			{
				for (int n = num4; n < num4 + 2; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				switch (num3)
				{
				case 0:
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 51, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 52, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 53, 1f);
					break;
				case 1:
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 166, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 167, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 168, 1f);
					break;
				case 2:
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 169, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 170, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 171, 1f);
					break;
				case 3:
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 172, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 173, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 174, 1f);
					break;
				case 4:
				case 5:
				case 6:
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 197, 1f);
					Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 198, 1f);
					break;
				default:
					if (num3 >= 7 && num3 <= 9)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 199, 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 200, 1f);
					}
					else if (num3 >= 10 && num3 <= 12)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 201, 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 202, 1f);
					}
					else if (num3 >= 13 && num3 <= 15)
					{
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 203, 1f);
						Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 204, 1f);
					}
					else if ((num3 < 16 || num3 > 18) && (num3 < 19 || num3 > 21) && (num3 < 22 || num3 > 24))
					{
						if (num3 >= 25 && num3 <= 27)
						{
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(217, 220), 1f);
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(217, 220), 1f);
						}
						else if (num3 >= 28 && num3 <= 30)
						{
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(315, 317), 1f);
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), WorldGen.genRand.Next(315, 317), 1f);
						}
						else if (num3 >= 31 && num3 <= 33)
						{
							int num6 = WorldGen.genRand.Next(2, 5);
							for (int num7 = 0; num7 < num6; num7++)
							{
								Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 698 + WorldGen.genRand.Next(6), 1f);
							}
						}
						else if (num3 >= 34 && num3 <= 36)
						{
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1122, 1f);
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1123, 1f);
							Gore.NewGore(new Vector2((float)(i * 16), (float)(j * 16)), default(Vector2), 1124, 1f);
						}
					}
					break;
				}
				if (Main.netMode != 1 && type != 653)
				{
					WorldGen.SpawnThingsFromPot(i, j, num, num4, num3);
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x060012B2 RID: 4786 RVA: 0x004637F0 File Offset: 0x004619F0
		private unsafe static void SpawnThingsFromPot(int i, int j, int x2, int y2, int style)
		{
			bool flag = (double)j < Main.rockLayer;
			bool flag2 = j < Main.UnderworldLayer;
			if (Main.remixWorld)
			{
				flag = ((double)j > Main.rockLayer && j < Main.UnderworldLayer);
				flag2 = ((double)j > Main.worldSurface && (double)j < Main.rockLayer);
			}
			float num = 1f;
			bool flag3 = style >= 34 && style <= 36;
			if (style > 3)
			{
				if (style - 4 <= 2)
				{
					num = 1.25f;
				}
				else if (style >= 7 && style <= 9)
				{
					num = 1.75f;
				}
				else if (style >= 10 && style <= 12)
				{
					num = 1.9f;
				}
				else if (style >= 13 && style <= 15)
				{
					num = 2.1f;
				}
				else if (style >= 16 && style <= 18)
				{
					num = 1.6f;
				}
				else if (style >= 19 && style <= 21)
				{
					num = 3.5f;
				}
				else if (style >= 22 && style <= 24)
				{
					num = 1.6f;
				}
				else if (style >= 25 && style <= 27)
				{
					num = 10f;
				}
				else if (style >= 28 && style <= 30)
				{
					if (Main.hardMode)
					{
						num = 4f;
					}
				}
				else if (style >= 31 && style <= 33)
				{
					num = 2f;
				}
				else if (style >= 34 && style <= 36)
				{
					num = 1.25f;
				}
			}
			num = (num * 2f + 1f) / 3f;
			int range = (int)(500f / ((num + 1f) / 2f));
			if (WorldGen.gen)
			{
				return;
			}
			if (Player.GetClosestRollLuck(i, j, range) == 0f)
			{
				if (Main.netMode != 1)
				{
					Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 16), (float)(j * 16 + 16), 0f, -12f, 518, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
				}
				return;
			}
			if (WorldGen.genRand.Next(35) == 0 && Main.wallDungeon[(int)(*Main.tile[i, j].wall)] && (double)j > Main.worldSurface)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 327, 1, false, 0, false, false);
				return;
			}
			if (Main.getGoodWorld && WorldGen.genRand.Next(6) == 0)
			{
				Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 16), (float)(j * 16 + 8), (float)Main.rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Main.myPlayer, 16f, 16f, 0f);
				return;
			}
			if (Main.remixWorld && Main.netMode != 1 && WorldGen.genRand.Next(5) == 0)
			{
				Player player = Main.player[(int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16)];
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 75, 1, false, 0, false, false);
					return;
				}
				if (player.ZoneJungle)
				{
					int num2 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -10, 0, 0f, 0f, 0f, 0f, 255);
					if (num2 > -1)
					{
						Main.npc[num2].ai[1] = 75f;
						Main.npc[num2].netUpdate = true;
						return;
					}
				}
				else if ((double)j > Main.rockLayer && j < Main.maxTilesY - 350)
				{
					int num3 = (Main.rand.Next(9) == 0) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -7, 0, 0f, 0f, 0f, 0f, 255) : ((Main.rand.Next(7) == 0) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -8, 0, 0f, 0f, 0f, 0f, 255) : ((Main.rand.Next(6) == 0) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -9, 0, 0f, 0f, 0f, 0f, 255) : ((Main.rand.Next(3) != 0) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, 1, 0, 0f, 0f, 0f, 0f, 255) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -3, 0, 0f, 0f, 0f, 0f, 255))));
					if (num3 > -1)
					{
						Main.npc[num3].ai[1] = 75f;
						Main.npc[num3].netUpdate = true;
						return;
					}
				}
				else if ((double)j > Main.worldSurface && (double)j <= Main.rockLayer)
				{
					int num4 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), x2 * 16 + 16, y2 * 16 + 32, -6, 0, 0f, 0f, 0f, 0f, 255);
					if (num4 > -1)
					{
						Main.npc[num4].ai[1] = 75f;
						Main.npc[num4].netUpdate = true;
						return;
					}
				}
				else
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 75, 1, false, 0, false, false);
				}
				return;
			}
			else
			{
				if (Main.remixWorld && (double)i > (double)Main.maxTilesX * 0.37 && (double)i < (double)Main.maxTilesX * 0.63 && j > Main.maxTilesY - 220)
				{
					int stack = Main.rand.Next(20, 41);
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 965, stack, false, 0, false, false);
					return;
				}
				if (WorldGen.genRand.Next(45) == 0 || (Main.rand.Next(45) == 0 && Main.expertMode))
				{
					if ((double)j < Main.worldSurface)
					{
						int num16 = WorldGen.genRand.Next(10);
						if (num16 == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 292, 1, false, 0, false, false);
						}
						if (num16 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
						}
						if (num16 == 2)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
						}
						if (num16 == 3)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
						}
						if (num16 == 4)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
						}
						if (num16 == 5)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2324, 1, false, 0, false, false);
						}
						if (num16 == 6)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2325, 1, false, 0, false, false);
						}
						if (num16 >= 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
							return;
						}
					}
					else if (flag)
					{
						int num17 = WorldGen.genRand.Next(11);
						if (num17 == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 289, 1, false, 0, false, false);
						}
						if (num17 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
						}
						if (num17 == 2)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
						}
						if (num17 == 3)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
						}
						if (num17 == 4)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
						}
						if (num17 == 5)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 291, 1, false, 0, false, false);
						}
						if (num17 == 6)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
						}
						if (num17 == 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
						}
						if (num17 == 8)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
						}
						if (num17 >= 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
							return;
						}
					}
					else if (flag2)
					{
						int num18 = WorldGen.genRand.Next(15);
						if (num18 == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
						}
						if (num18 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
						}
						if (num18 == 2)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
						}
						if (num18 == 3)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
						}
						if (num18 == 4)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
						}
						if (num18 == 5)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
						}
						if (num18 == 6)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
						}
						if (num18 == 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
						}
						if (num18 == 8)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
						}
						if (num18 == 9)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
						}
						if (num18 == 10)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
						}
						if (num18 == 11)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
						}
						if (num18 == 12)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2327, 1, false, 0, false, false);
						}
						if (num18 == 13)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
						}
						if (num18 >= 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2350, WorldGen.genRand.Next(1, 3), false, 0, false, false);
							return;
						}
					}
					else
					{
						int num19 = WorldGen.genRand.Next(14);
						if (num19 == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
						}
						if (num19 == 1)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
						}
						if (num19 == 2)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 293, 1, false, 0, false, false);
						}
						if (num19 == 3)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
						}
						if (num19 == 4)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 294, 1, false, 0, false, false);
						}
						if (num19 == 5)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
						}
						if (num19 == 6)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
						}
						if (num19 == 7)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
						}
						if (num19 == 8)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
						}
						if (num19 == 9)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
						}
						if (num19 == 10)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
						}
						if (num19 == 11)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 300, 1, false, 0, false, false);
						}
						if (num19 == 12)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
						}
						if (num19 == 13)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2326, 1, false, 0, false, false);
						}
						if (WorldGen.genRand.Next(5) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 4870, 1, false, 0, false, false);
						}
					}
					return;
				}
				if (Main.netMode == 2 && Main.rand.Next(30) == 0)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 2997, 1, false, 0, false, false);
					return;
				}
				int num5 = Main.rand.Next(7);
				if (Main.expertMode)
				{
					num5--;
				}
				Player player2 = Main.player[(int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16)];
				int num6 = 0;
				int num7 = 20;
				for (int k = 0; k < 50; k++)
				{
					Item item = player2.inventory[k];
					if (!item.IsAir && item.createTile == 4)
					{
						num6 += item.stack;
						if (num6 >= num7)
						{
							break;
						}
					}
				}
				bool flag4 = num6 < num7;
				if (num5 == 0 && player2.statLife < player2.statLifeMax2)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
					if (Main.rand.Next(2) == 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
					}
					if (Main.expertMode)
					{
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
						}
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
						}
					}
					return;
				}
				if (num5 == 1 || (num5 == 0 && flag4))
				{
					int num8 = Main.rand.Next(2, 7);
					if (Main.expertMode)
					{
						num8 += Main.rand.Next(1, 7);
					}
					int type = 8;
					int type2 = 282;
					if (player2.ZoneHallow)
					{
						num8 += Main.rand.Next(2, 7);
						type = 4387;
					}
					else if ((style >= 22 && style <= 24) || player2.ZoneCrimson)
					{
						num8 += Main.rand.Next(2, 7);
						type = 4386;
					}
					else if ((style >= 16 && style <= 18) || player2.ZoneCorrupt)
					{
						num8 += Main.rand.Next(2, 7);
						type = 4385;
					}
					else if (style >= 7 && style <= 9)
					{
						num8 += Main.rand.Next(2, 7);
						num8 = (int)((float)num8 * 1.5f);
						type = 4388;
					}
					else if (style >= 4 && style <= 6)
					{
						type = 974;
						type2 = 286;
					}
					else if (style >= 34 && style <= 36)
					{
						num8 += Main.rand.Next(2, 7);
						type = 4383;
					}
					else if (player2.ZoneGlowshroom)
					{
						num8 += Main.rand.Next(2, 7);
						type = 5293;
					}
					if (*Main.tile[i, j].liquid > 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type2, num8, false, 0, false, false);
						return;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type, num8, false, 0, false, false);
					return;
				}
				else
				{
					switch (num5)
					{
					case 2:
					{
						int stack2 = Main.rand.Next(10, 21);
						int type3 = 40;
						if (flag && WorldGen.genRand.Next(2) == 0)
						{
							type3 = ((!Main.hardMode) ? 42 : 168);
						}
						if (j > Main.UnderworldLayer)
						{
							type3 = 265;
						}
						else if (Main.hardMode)
						{
							type3 = ((Main.rand.Next(2) != 0) ? 47 : ((WorldGen.SavedOreTiers.Silver != 168) ? 278 : 4915));
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type3, stack2, false, 0, false, false);
						return;
					}
					case 3:
					{
						int type4 = 28;
						if (j > Main.UnderworldLayer || Main.hardMode)
						{
							type4 = 188;
						}
						int num9 = 1;
						if (Main.expertMode && Main.rand.Next(3) != 0)
						{
							num9++;
						}
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type4, num9, false, 0, false, false);
						return;
					}
					case 4:
						if (flag3 || flag2)
						{
							int type5 = 166;
							if (flag3)
							{
								type5 = 4423;
							}
							int num10 = Main.rand.Next(4) + 1;
							if (Main.expertMode)
							{
								num10 += Main.rand.Next(4);
							}
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, type5, num10, false, 0, false, false);
							return;
						}
						break;
					}
					if ((num5 == 4 || num5 == 5) && j < Main.UnderworldLayer && !Main.hardMode)
					{
						int stack3 = Main.rand.Next(20, 41);
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 965, stack3, false, 0, false, false);
						return;
					}
					float num11 = (float)(200 + WorldGen.genRand.Next(-100, 101));
					if ((double)j < Main.worldSurface)
					{
						num11 *= 0.5f;
					}
					else if (flag)
					{
						num11 *= 0.75f;
					}
					else if (j > Main.maxTilesY - 250)
					{
						num11 *= 1.25f;
					}
					num11 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					if (Main.rand.Next(4) == 0)
					{
						num11 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
					}
					if (Main.rand.Next(8) == 0)
					{
						num11 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
					}
					if (Main.rand.Next(12) == 0)
					{
						num11 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
					}
					if (Main.rand.Next(16) == 0)
					{
						num11 *= 1f + (float)Main.rand.Next(40, 81) * 0.01f;
					}
					if (Main.rand.Next(20) == 0)
					{
						num11 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
					}
					if (Main.expertMode)
					{
						num11 *= 2.5f;
					}
					if (Main.expertMode && Main.rand.Next(2) == 0)
					{
						num11 *= 1.25f;
					}
					if (Main.expertMode && Main.rand.Next(3) == 0)
					{
						num11 *= 1.5f;
					}
					if (Main.expertMode && Main.rand.Next(4) == 0)
					{
						num11 *= 1.75f;
					}
					num11 *= num;
					if (NPC.downedBoss1)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedBoss2)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedBoss3)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedMechBoss1)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedMechBoss2)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedMechBoss3)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedPlantBoss)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedQueenBee)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedGolemBoss)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedPirates)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedGoblins)
					{
						num11 *= 1.1f;
					}
					if (NPC.downedFrost)
					{
						num11 *= 1.1f;
					}
					while ((int)num11 > 0)
					{
						if (num11 > 1000000f)
						{
							int num12 = (int)(num11 / 1000000f);
							if (num12 > 50 && Main.rand.Next(2) == 0)
							{
								num12 /= Main.rand.Next(3) + 1;
							}
							if (Main.rand.Next(2) == 0)
							{
								num12 /= Main.rand.Next(3) + 1;
							}
							num11 -= (float)(1000000 * num12);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 74, num12, false, 0, false, false);
						}
						else if (num11 > 10000f)
						{
							int num13 = (int)(num11 / 10000f);
							if (num13 > 50 && Main.rand.Next(2) == 0)
							{
								num13 /= Main.rand.Next(3) + 1;
							}
							if (Main.rand.Next(2) == 0)
							{
								num13 /= Main.rand.Next(3) + 1;
							}
							num11 -= (float)(10000 * num13);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 73, num13, false, 0, false, false);
						}
						else if (num11 > 100f)
						{
							int num14 = (int)(num11 / 100f);
							if (num14 > 50 && Main.rand.Next(2) == 0)
							{
								num14 /= Main.rand.Next(3) + 1;
							}
							if (Main.rand.Next(2) == 0)
							{
								num14 /= Main.rand.Next(3) + 1;
							}
							num11 -= (float)(100 * num14);
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 72, num14, false, 0, false, false);
						}
						else
						{
							int num15 = (int)num11;
							if (num15 > 50 && Main.rand.Next(2) == 0)
							{
								num15 /= Main.rand.Next(3) + 1;
							}
							if (Main.rand.Next(2) == 0)
							{
								num15 /= Main.rand.Next(4) + 1;
							}
							if (num15 < 1)
							{
								num15 = 1;
							}
							num11 -= (float)num15;
							Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 71, num15, false, 0, false, false);
						}
					}
					return;
				}
			}
		}

		/// <summary>
		/// Attempts to place a chest at the given tile coordinates. The coordinate provided (<paramref name="x" />, <paramref name="y" />) will be the bottom left corner of the resulting chest, if the method succeeds. <paramref name="type" /> is the tile type to place, and <paramref name="style" /> is the tile style to place.
		/// <para /> For vanilla chests, you can count from zero starting from the left in the <c>Tiles_21.png</c> image after <see href="https://github.com/tModLoader/tModLoader/wiki/Intermediate-Prerequisites#vanilla-texture-file-reference">extracting the vanilla textures</see> to find the style you want to place. Another option is to follow the <see href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-Content-IDs#tile-ids">Tile IDs wiki guide</see> to find the style.
		/// <para /> <paramref name="notNearOtherChests" /> can be set to true to prevent the chest from placing if another chest exists within 25 tiles left or right and 8 tiles up or down. This method returns the chest index (the index within <see cref="F:Terraria.Main.chest" />) of the chest that was successfully placed or -1 if placing the chest failed. Chest placement can fail for many reasons, such as if existing tiles block the space, or if there isn't 2 suitable solid tiles directly below the intended location.
		/// <para /> See the <see href="https://github.com/tModLoader/tModLoader/wiki/World-Generation#try-until-success">"Try Until Success" section of the World Generation wiki guide</see> for an approach to using this method. See the <see href="https://github.com/tModLoader/tModLoader/wiki/World-Generation#try-until-success">"Placing Items in Chests" section of the World Generation wiki guide</see> for info on placing items in the chest.
		/// <para /> The <see cref="M:Terraria.WorldGen.AddBuriedChest(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,System.UInt16)" /> method places a chest and fills it with the default items for that chest.
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="type"></param>
		/// <param name="notNearOtherChests"></param>
		/// <param name="style"></param>
		/// <returns></returns>
		// Token: 0x060012B3 RID: 4787 RVA: 0x00464FDC File Offset: 0x004631DC
		public unsafe static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)
		{
			int num = -1;
			if (TileID.Sets.Boulders[(int)(*Main.tile[x, y + 1].type)] || TileID.Sets.Boulders[(int)(*Main.tile[x + 1, y + 1].type)])
			{
				return -1;
			}
			TileObject objectData;
			if (TileObject.CanPlace(x, y, (int)type, style, 1, out objectData, false, null, false))
			{
				bool flag = true;
				if (notNearOtherChests && Chest.NearOtherChests(x - 1, y - 1))
				{
					flag = false;
				}
				if (flag)
				{
					TileObject.Place(objectData);
					num = Chest.CreateChest(objectData.xCoord, objectData.yCoord, -1);
				}
			}
			else
			{
				num = -1;
			}
			if (num != -1 && Main.netMode == 1 && type == 21)
			{
				NetMessage.SendData(34, -1, -1, null, 0, (float)x, (float)y, (float)style, 0, 0, 0);
			}
			if (num != -1 && Main.netMode == 1 && type == 467)
			{
				NetMessage.SendData(34, -1, -1, null, 4, (float)x, (float)y, (float)style, 0, 0, 0);
			}
			if (num != 1 && Main.netMode == 1 && type >= TileID.Count && TileID.Sets.BasicChest[(int)type])
			{
				NetMessage.SendData(34, -1, -1, null, 100, (float)x, (float)y, (float)style, 0, (int)type, 0);
			}
			return num;
		}

		/// <summary>
		/// Used for network syncing. Modders should use <see cref="M:Terraria.WorldGen.PlaceChest(System.Int32,System.Int32,System.UInt16,System.Boolean,System.Int32)" /> if attempting to place a chest.
		/// </summary>
		// Token: 0x060012B4 RID: 4788 RVA: 0x00465104 File Offset: 0x00463304
		public unsafe static void PlaceChestDirect(int x, int y, ushort type, int style, int id)
		{
			Chest.CreateChest(x, y - 1, id);
			for (int i = 0; i <= 1; i++)
			{
				for (int j = -1; j <= 0; j++)
				{
					if (Main.tile[x + i, y + j] == null)
					{
						Main.tile[x + i, y + j] = default(Tile);
					}
				}
			}
			Main.tile[x, y - 1].active(true);
			*Main.tile[x, y - 1].frameY = 0;
			*Main.tile[x, y - 1].frameX = (short)(36 * style);
			*Main.tile[x, y - 1].type = type;
			Main.tile[x, y - 1].halfBrick(false);
			Main.tile[x + 1, y - 1].active(true);
			*Main.tile[x + 1, y - 1].frameY = 0;
			*Main.tile[x + 1, y - 1].frameX = (short)(18 + 36 * style);
			*Main.tile[x + 1, y - 1].type = type;
			Main.tile[x + 1, y - 1].halfBrick(false);
			Main.tile[x, y].active(true);
			*Main.tile[x, y].frameY = 18;
			*Main.tile[x, y].frameX = (short)(36 * style);
			*Main.tile[x, y].type = type;
			Main.tile[x, y].halfBrick(false);
			Main.tile[x + 1, y].active(true);
			*Main.tile[x + 1, y].frameY = 18;
			*Main.tile[x + 1, y].frameX = (short)(18 + 36 * style);
			*Main.tile[x + 1, y].type = type;
			Main.tile[x + 1, y].halfBrick(false);
		}

		// Token: 0x060012B5 RID: 4789 RVA: 0x00465358 File Offset: 0x00463558
		public unsafe static void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
		{
			Chest.CreateChest(x - 1, y - 1, id);
			for (int i = -1; i <= 1; i++)
			{
				for (int j = -1; j <= 0; j++)
				{
					if (Main.tile[x + i, y + j] == null)
					{
						Main.tile[x + i, y + j] = default(Tile);
					}
				}
			}
			short num = (short)(style * 54);
			Main.tile[x - 1, y - 1].active(true);
			*Main.tile[x - 1, y - 1].frameY = 0;
			*Main.tile[x - 1, y - 1].frameX = num;
			*Main.tile[x - 1, y - 1].type = type;
			Main.tile[x, y - 1].active(true);
			*Main.tile[x, y - 1].frameY = 0;
			*Main.tile[x, y - 1].frameX = num + 18;
			*Main.tile[x, y - 1].type = type;
			Main.tile[x + 1, y - 1].active(true);
			*Main.tile[x + 1, y - 1].frameY = 0;
			*Main.tile[x + 1, y - 1].frameX = num + 36;
			*Main.tile[x + 1, y - 1].type = type;
			Main.tile[x - 1, y].active(true);
			*Main.tile[x - 1, y].frameY = 18;
			*Main.tile[x - 1, y].frameX = num;
			*Main.tile[x - 1, y].type = type;
			Main.tile[x, y].active(true);
			*Main.tile[x, y].frameY = 18;
			*Main.tile[x, y].frameX = num + 18;
			*Main.tile[x, y].type = type;
			Main.tile[x + 1, y].active(true);
			*Main.tile[x + 1, y].frameY = 18;
			*Main.tile[x + 1, y].frameX = num + 36;
			*Main.tile[x + 1, y].type = type;
		}

		// Token: 0x060012B6 RID: 4790 RVA: 0x00465618 File Offset: 0x00463818
		public unsafe static void CheckChest(int i, int j, int type)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			bool flag = false;
			int num = 0;
			num += (int)(*Main.tile[i, j].frameX / 18);
			int num2 = j + (int)(*Main.tile[i, j].frameY / 18 * -1);
			while (num > 1)
			{
				num -= 2;
			}
			num *= -1;
			num += i;
			for (int k = num; k < num + 2; k++)
			{
				for (int l = num2; l < num2 + 2; l++)
				{
					if (Main.tile[k, l] == null)
					{
						Main.tile[k, l] = default(Tile);
					}
					int num3;
					for (num3 = (int)(*Main.tile[k, l].frameX / 18); num3 > 1; num3 -= 2)
					{
					}
					if (!Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != type || num3 != k - num || (int)(*Main.tile[k, l].frameY) != (l - num2) * 18)
					{
						flag = true;
					}
				}
				if (Main.tile[k, num2 + 2] == null)
				{
					Main.tile[k, num2 + 2] = default(Tile);
				}
				if ((!Main.tile[k, num2 + 2].active() || !Main.tileSolid[(int)(*Main.tile[k, num2 + 2].type)]) && Chest.CanDestroyChest(num, num2))
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return;
			}
			int chestItemDrop = WorldGen.GetChestItemDrop(i, j, type);
			WorldGen.destroyObject = true;
			bool drop = TileLoader.Drop(i, j, type, true);
			for (int m = num; m < num + 2; m++)
			{
				for (int n = num2; n < num2 + 3; n++)
				{
					if ((int)(*Main.tile[m, n].type) == type && Main.tile[m, n].active())
					{
						Chest.DestroyChest(m, n);
						WorldGen.KillTile(m, n, false, false, false);
					}
				}
			}
			using (new Item.DisableNewItemMethod(!drop))
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 32, 32, chestItemDrop, 1, false, 0, false, false);
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x060012B7 RID: 4791 RVA: 0x004658B4 File Offset: 0x00463AB4
		private unsafe static int GetChestItemDrop(int x, int y, int type)
		{
			int num = (int)(*Main.tile[x, y].frameX / 36);
			if (type == 467)
			{
				return Chest.chestItemSpawn2[num];
			}
			return Chest.chestItemSpawn[num];
		}

		// Token: 0x060012B8 RID: 4792 RVA: 0x004658F4 File Offset: 0x00463AF4
		public static bool PlaceActuator(int i, int j)
		{
			if (!Main.tile[i, j].actuator())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].actuator(true);
				return true;
			}
			return false;
		}

		// Token: 0x060012B9 RID: 4793 RVA: 0x0046594C File Offset: 0x00463B4C
		public static bool KillActuator(int i, int j)
		{
			if (Main.tile[i, j].actuator())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].actuator(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 849, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012BA RID: 4794 RVA: 0x00465A10 File Offset: 0x00463C10
		public static bool PlaceWire(int i, int j)
		{
			if (!Main.tile[i, j].wire())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire(true);
				return true;
			}
			return false;
		}

		// Token: 0x060012BB RID: 4795 RVA: 0x00465A68 File Offset: 0x00463C68
		public static bool KillWire(int i, int j)
		{
			if (Main.tile[i, j].wire())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012BC RID: 4796 RVA: 0x00465B2C File Offset: 0x00463D2C
		public static bool PlaceWire2(int i, int j)
		{
			if (!Main.tile[i, j].wire2())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire2(true);
				return true;
			}
			return false;
		}

		// Token: 0x060012BD RID: 4797 RVA: 0x00465B84 File Offset: 0x00463D84
		public static bool KillWire2(int i, int j)
		{
			if (Main.tile[i, j].wire2())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire2(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012BE RID: 4798 RVA: 0x00465C48 File Offset: 0x00463E48
		public static bool PlaceWire3(int i, int j)
		{
			if (!Main.tile[i, j].wire3())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire3(true);
				return true;
			}
			return false;
		}

		// Token: 0x060012BF RID: 4799 RVA: 0x00465CA0 File Offset: 0x00463EA0
		public static bool KillWire3(int i, int j)
		{
			if (Main.tile[i, j].wire3())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire3(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012C0 RID: 4800 RVA: 0x00465D64 File Offset: 0x00463F64
		public static bool PlaceWire4(int i, int j)
		{
			if (!Main.tile[i, j].wire4())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire4(true);
				return true;
			}
			return false;
		}

		// Token: 0x060012C1 RID: 4801 RVA: 0x00465DBC File Offset: 0x00463FBC
		public static bool KillWire4(int i, int j)
		{
			if (Main.tile[i, j].wire4())
			{
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				Main.tile[i, j].wire4(false);
				if (Main.netMode != 1)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
				}
				for (int k = 0; k < 5; k++)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color), 1f);
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012C2 RID: 4802 RVA: 0x00465E80 File Offset: 0x00464080
		public unsafe static bool IsFitToPlaceFlowerIn(int x, int y, int typeAttemptedToPlace)
		{
			if (y < 1 || y > Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			return tile.active() && tile.slope() == 0 && !tile.halfBrick() && (((*tile.type == 2 || *tile.type == 78 || *tile.type == 380 || *tile.type == 477 || *tile.type == 579) && typeAttemptedToPlace == 3) || ((*tile.type == 23 || *tile.type == 661) && typeAttemptedToPlace == 24) || ((*tile.type == 109 || *tile.type == 492) && typeAttemptedToPlace == 110) || ((*tile.type == 199 || *tile.type == 662) && typeAttemptedToPlace == 201) || (*tile.type == 633 && typeAttemptedToPlace == 637));
		}

		// Token: 0x060012C3 RID: 4803 RVA: 0x00465FA0 File Offset: 0x004641A0
		private unsafe static bool SeaOatWaterCheck(int x, int y)
		{
			int num = 45;
			int num2 = 20;
			int num3 = 20;
			int num4 = num + 1;
			int num5 = 0;
			bool flag = false;
			if (x <= WorldGen.beachDistance || x >= Main.maxTilesX - WorldGen.beachDistance)
			{
				flag = true;
				num = 65;
				num2 += 5;
			}
			for (int i = x - num; i <= x + num; i++)
			{
				for (int j = y - num2; j <= y + num2; j++)
				{
					if (WorldGen.InWorld(i, j, 0) && !WorldGen.SolidTile(i, j, false) && *Main.tile[i, j].liquid > 0)
					{
						num5 += (int)(*Main.tile[i, j].liquid);
						int num6 = Math.Abs(i - x);
						if (num6 < num4)
						{
							num4 = num6;
						}
					}
				}
			}
			if (num5 / 255 >= num3)
			{
				return !flag;
			}
			return flag;
		}

		// Token: 0x060012C4 RID: 4804 RVA: 0x00466088 File Offset: 0x00464288
		private unsafe static bool PlantSeaOat(int x, int y)
		{
			if (*Main.tile[x, y].wall > 0 || Main.tile[x, y].active() || *Main.tile[x, y].liquid > 0 || !WorldGen.SolidTileAllowBottomSlope(x, y + 1) || !TileID.Sets.Conversion.Sand[(int)(*Main.tile[x, y + 1].type)])
			{
				return false;
			}
			if (!WorldGen.SeaOatWaterCheck(x, y))
			{
				return false;
			}
			Main.tile[x, y].active(true);
			Main.tile[x, y].slope(0);
			Main.tile[x, y].halfBrick(false);
			*Main.tile[x, y].type = 529;
			*Main.tile[x, y].frameX = (short)(WorldGen.genRand.Next(5) * 18);
			int num = 0;
			*Main.tile[x, y].frameY = (short)(num * 34);
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
			}
			return true;
		}

		// Token: 0x060012C5 RID: 4805 RVA: 0x004661C0 File Offset: 0x004643C0
		private static bool CheckSeaOat(int x, int y)
		{
			if (!WorldGen.SeaOatWaterCheck(x, y))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				return false;
			}
			return true;
		}

		// Token: 0x060012C6 RID: 4806 RVA: 0x00466204 File Offset: 0x00464404
		private unsafe static bool GrowSeaOat(int x, int y)
		{
			if (*Main.tile[x, y].frameX < 180)
			{
				ref short frameX = ref Main.tile[x, y].frameX;
				frameX += 90;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
			}
			return false;
		}

		// Token: 0x060012C7 RID: 4807 RVA: 0x0046625C File Offset: 0x0046445C
		private unsafe static int GetWaterDepth(int x, int y)
		{
			int num = y;
			while (!WorldGen.SolidTile(x, num, false))
			{
				num++;
				if (num > Main.maxTilesY - 1)
				{
					return 0;
				}
			}
			num--;
			int num2 = num;
			while (*Main.tile[x, num2].liquid > 0 && !WorldGen.SolidTile(x, num2, false))
			{
				num2--;
			}
			return num - num2;
		}

		// Token: 0x060012C8 RID: 4808 RVA: 0x004662B8 File Offset: 0x004644B8
		private unsafe static int CountGrowingPlantTiles(int x, int y, int range, int type)
		{
			int num = 0;
			for (int i = x - range; i <= x + range; i++)
			{
				for (int j = y - range * 3; j <= y + range * 3; j++)
				{
					if (Main.tile[i, j].active() && (int)(*Main.tile[i, j].type) == type)
					{
						num++;
					}
				}
			}
			return num;
		}

		// Token: 0x060012C9 RID: 4809 RVA: 0x00466320 File Offset: 0x00464520
		private unsafe static bool PlaceBamboo(int x, int y)
		{
			int num = 2;
			int num2 = 5;
			int num3 = WorldGen.genRand.Next(1, 21);
			Tile tile = Main.tile[x, y];
			if (*tile.wall > 0 && (double)y <= Main.worldSurface)
			{
				return false;
			}
			if (tile.active() && *tile.type == 314)
			{
				return false;
			}
			Tile tile2 = Main.tile[x, y + 1];
			if (*tile2.type != 571 && *tile2.type != 60)
			{
				return false;
			}
			int waterDepth = WorldGen.GetWaterDepth(x, y);
			if (waterDepth < num || waterDepth > num2)
			{
				return false;
			}
			int num4 = WorldGen.CountGrowingPlantTiles(x, y, 5, 571);
			int i = 1;
			if (*tile2.type == 571)
			{
				while (!WorldGen.SolidTile(x, y + i, false))
				{
					i++;
				}
				if (i + num4 / WorldGen.genRand.Next(1, 21) > num3)
				{
					return false;
				}
			}
			else
			{
				num4 += 25;
			}
			num4 += i * 2;
			if (num4 > WorldGen.genRand.Next(40, 61))
			{
				return false;
			}
			tile = Main.tile[x, y];
			tile.active(true);
			*tile.type = 571;
			*tile.frameX = 0;
			*tile.frameY = 0;
			tile.slope(0);
			tile.halfBrick(false);
			WorldGen.SquareTileFrame(x, y, true);
			return true;
		}

		// Token: 0x060012CA RID: 4810 RVA: 0x00466480 File Offset: 0x00464680
		public unsafe static void CheckBamboo(int x, int y)
		{
			Tile tile = Main.tile[x, y + 1];
			if (tile == null)
			{
				return;
			}
			if (!tile.active() || (*tile.type != 60 && *tile.type != 571))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				WorldGen.SquareTileFrame(x, y, true);
				return;
			}
			Tile tile2 = Main.tile[x, y - 1];
			if (tile2 == null)
			{
				return;
			}
			Tile tile3 = Main.tile[x, y];
			if (tile3 == null)
			{
				return;
			}
			bool flag2 = tile2.active() && *tile2.type == 571;
			bool flag = tile.active() && *tile.type == 571;
			int num2 = (int)(*tile3.frameX / 18);
			*tile3.frameY = 0;
			if (flag2)
			{
				if (flag)
				{
					if (num2 < 5 || num2 > 14)
					{
						*tile3.frameX = (short)(WorldGen.genRand.Next(5, 15) * 18);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							return;
						}
					}
				}
				else if (num2 < 1 || num2 > 4)
				{
					*tile3.frameX = (short)(WorldGen.genRand.Next(1, 5) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (flag)
			{
				if (num2 < 15 || num2 > 19)
				{
					*tile3.frameX = (short)(WorldGen.genRand.Next(15, 20) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (num2 != 0)
			{
				*tile3.frameX = 0;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x060012CB RID: 4811 RVA: 0x0046664C File Offset: 0x0046484C
		public unsafe static void PlaceUnderwaterPlant(ushort type, int x, int y)
		{
			if (WorldGen.CanUnderwaterPlantGrowHere(type, x, y, false))
			{
				Tile tileSafely = Framing.GetTileSafely(x, y + 1);
				tileSafely.slope(0);
				tileSafely.halfBrick(false);
				Tile tileSafely2 = Framing.GetTileSafely(x, y);
				tileSafely2.active(true);
				*tileSafely2.type = type;
				*tileSafely2.frameX = 0;
				*tileSafely2.frameY = 0;
				tileSafely2.slope(0);
				tileSafely2.halfBrick(false);
				WorldGen.SquareTileFrame(x, y, true);
			}
		}

		// Token: 0x060012CC RID: 4812 RVA: 0x004666C4 File Offset: 0x004648C4
		public unsafe static bool CanUnderwaterPlantGrowHere(ushort type, int x, int y, bool ignoreSelf)
		{
			if (!WorldGen.InWorld(x, y, 50))
			{
				return false;
			}
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (!ignoreSelf && tileSafely.active())
			{
				return false;
			}
			for (int i = 0; i < 3; i++)
			{
				tileSafely = Framing.GetTileSafely(x, y - i);
				if (*tileSafely.liquid == 0 || tileSafely.liquidType() != 0)
				{
					return false;
				}
			}
			Tile tileSafely2 = Framing.GetTileSafely(x, y + 1);
			if (!tileSafely2.nactive())
			{
				return false;
			}
			if (!TileID.Sets.Conversion.Sand[(int)(*tileSafely2.type)] && type != *tileSafely2.type)
			{
				return false;
			}
			ushort wall = *Framing.GetTileSafely(x, y).wall;
			return wall == 0 || wall - 63 <= 6 || wall - 80 <= 1;
		}

		// Token: 0x060012CD RID: 4813 RVA: 0x00466778 File Offset: 0x00464978
		public unsafe static void CheckUnderwaterPlant(ushort type, int x, int y)
		{
			if (!WorldGen.CanUnderwaterPlantGrowHere(type, x, y, true))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				WorldGen.SquareTileFrame(x, y, true);
				return;
			}
			Tile tileSafely = Framing.GetTileSafely(x, y - 1);
			Tile tileSafely2 = Framing.GetTileSafely(x, y);
			Tile tileSafely3 = Framing.GetTileSafely(x, y + 1);
			bool flag2 = tileSafely.active() && *tileSafely.type == type;
			bool flag = tileSafely3.active() && *tileSafely3.type == type;
			int num2 = (int)(*tileSafely2.frameX / 18);
			*tileSafely2.frameY = 0;
			if (flag2)
			{
				if (1 > num2 || num2 > 7)
				{
					*tileSafely2.frameX = (short)(WorldGen.genRand.Next(1, 8) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (flag)
			{
				if (7 > num2 || num2 > 12)
				{
					*tileSafely2.frameX = (short)(WorldGen.genRand.Next(7, 13) * 18);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						return;
					}
				}
			}
			else if (num2 != 0)
			{
				*tileSafely2.frameX = 0;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x060012CE RID: 4814 RVA: 0x004668B4 File Offset: 0x00464AB4
		public unsafe static Point PlaceCatTail(int x, int j)
		{
			int num = j;
			Point result;
			result..ctor(-1, -1);
			if (x < 50 || x > Main.maxTilesX - 50 || num < 50 || num > Main.maxTilesY - 50)
			{
				return result;
			}
			if ((Main.tile[x, num].active() && *Main.tile[x, num].type != 71) || *Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return result;
			}
			while (*Main.tile[x, num].liquid > 0 && num > 50)
			{
				num--;
			}
			num++;
			if (Main.tile[x, num].active() || Main.tile[x, num - 1].active() || *Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return result;
			}
			if (*Main.tile[x, num].wall != 0 && *Main.tile[x, num].wall != 80 && *Main.tile[x, num].wall != 81 && *Main.tile[x, num].wall != 69 && (*Main.tile[x, num].wall < 63 || *Main.tile[x, num].wall > 68))
			{
				return result;
			}
			int num2 = 7;
			int num3 = 0;
			for (int i = x - num2; i <= x + num2; i++)
			{
				for (int k = num - num2; k <= num + num2; k++)
				{
					if (Main.tile[i, k].active() && *Main.tile[i, k].type == 519)
					{
						num3++;
						break;
					}
				}
			}
			if (num3 > 3)
			{
				return result;
			}
			int l = num;
			while ((!Main.tile[x, l].active() || !Main.tileSolid[(int)(*Main.tile[x, l].type)] || Main.tileSolidTop[(int)(*Main.tile[x, l].type)]) && l < Main.maxTilesY - 50)
			{
				if (Main.tile[x, l].active() && *Main.tile[x, l].type != 71)
				{
					return result;
				}
				l++;
			}
			int num4 = WorldGen.catTailDistance - 1;
			if (l - num > num4)
			{
				return result;
			}
			if (l - num < 2)
			{
				return result;
			}
			int type = (int)(*Main.tile[x, l].type);
			if (!Main.tile[x, l].nactive())
			{
				return result;
			}
			int num5 = -1;
			if (type > 112)
			{
				if (type <= 234)
				{
					if (type != 199 && type != 234)
					{
						goto IL_3B9;
					}
				}
				else
				{
					if (type == 477)
					{
						goto IL_386;
					}
					if (type == 661)
					{
						goto IL_3AF;
					}
					if (type != 662)
					{
						goto IL_3B9;
					}
				}
				num5 = 54;
				goto IL_3B9;
			}
			if (type <= 23)
			{
				if (type != 2)
				{
					if (type != 23)
					{
						goto IL_3B9;
					}
					goto IL_3AF;
				}
			}
			else if (type != 53)
			{
				if (type == 70)
				{
					num5 = 90;
					goto IL_3B9;
				}
				if (type != 112)
				{
					goto IL_3B9;
				}
				goto IL_3AF;
			}
			else
			{
				if (x < WorldGen.beachDistance || x > Main.maxTilesX - WorldGen.beachDistance)
				{
					return result;
				}
				num5 = 18;
				goto IL_3B9;
			}
			IL_386:
			num5 = 0;
			goto IL_3B9;
			IL_3AF:
			num5 = 72;
			IL_3B9:
			if (num5 < 0)
			{
				return result;
			}
			if (Main.tile[x, l].topSlope() && WorldGen.gen && WorldGen.genRand.Next(3) != 0)
			{
				Main.tile[x, l].slope(0);
			}
			else if (Main.tile[x, l].topSlope() || Main.tile[x, l].halfBrick())
			{
				return result;
			}
			num = l - 1;
			Main.tile[x, num].active(true);
			*Main.tile[x, num].type = 519;
			*Main.tile[x, num].frameX = 0;
			*Main.tile[x, num].frameY = (short)num5;
			Main.tile[x, num].halfBrick(false);
			Main.tile[x, num].slope(0);
			Main.tile[x, num].CopyPaintAndCoating(Main.tile[x, num + 1]);
			WorldGen.SquareTileFrame(x, num, true);
			return new Point(x, num);
		}

		// Token: 0x060012CF RID: 4815 RVA: 0x00466DC0 File Offset: 0x00464FC0
		public unsafe static void CheckCatTail(int x, int j)
		{
			if (Main.tile[x, j] == null)
			{
				return;
			}
			bool flag = false;
			int num2 = j;
			while ((!Main.tile[x, num2].active() || !Main.tileSolid[(int)(*Main.tile[x, num2].type)] || Main.tileSolidTop[(int)(*Main.tile[x, num2].type)]) && num2 < Main.maxTilesY - 50)
			{
				if (Main.tile[x, num2].active() && *Main.tile[x, num2].type != 519)
				{
					flag = true;
				}
				if (!Main.tile[x, num2].active())
				{
					break;
				}
				num2++;
				if (Main.tile[x, num2] == null)
				{
					return;
				}
			}
			int num3 = num2 - 1;
			if (Main.tile[x, num3] == null)
			{
				return;
			}
			while (Main.tile[x, num3] != null && *Main.tile[x, num3].liquid > 0 && num3 > 50)
			{
				if ((Main.tile[x, num3].active() && *Main.tile[x, num3].type != 519) || Main.tile[x, num3].liquidType() != 0)
				{
					flag = true;
				}
				num3--;
				if (Main.tile[x, num3] == null)
				{
					return;
				}
			}
			num3++;
			if (Main.tile[x, num3] == null)
			{
				return;
			}
			int num4 = num3;
			int num5 = WorldGen.catTailDistance;
			if (num2 - num4 > num5)
			{
				flag = true;
			}
			int type = (int)(*Main.tile[x, num2].type);
			int num6 = -1;
			if (type > 112)
			{
				if (type <= 234)
				{
					if (type != 199 && type != 234)
					{
						goto IL_260;
					}
				}
				else
				{
					if (type == 477)
					{
						goto IL_245;
					}
					if (type == 661)
					{
						goto IL_256;
					}
					if (type != 662)
					{
						goto IL_260;
					}
				}
				num6 = 54;
				goto IL_260;
			}
			if (type <= 23)
			{
				if (type != 2)
				{
					if (type != 23)
					{
						goto IL_260;
					}
					goto IL_256;
				}
			}
			else
			{
				if (type == 53)
				{
					num6 = 18;
					goto IL_260;
				}
				if (type == 70)
				{
					num6 = 90;
					goto IL_260;
				}
				if (type != 112)
				{
					goto IL_260;
				}
				goto IL_256;
			}
			IL_245:
			num6 = 0;
			goto IL_260;
			IL_256:
			num6 = 72;
			IL_260:
			if (!Main.tile[x, num2].nactive())
			{
				flag = true;
			}
			if (num6 < 0)
			{
				flag = true;
			}
			num3 = num2 - 1;
			if (Main.tile[x, num3] != null && !Main.tile[x, num3].active())
			{
				for (int num7 = num3; num7 >= num4; num7--)
				{
					if (Main.tile[x, num7] == null)
					{
						return;
					}
					if (Main.tile[x, num7].active() && *Main.tile[x, num7].type == 519)
					{
						num3 = num7;
						break;
					}
				}
			}
			while (Main.tile[x, num3] != null && Main.tile[x, num3].active() && *Main.tile[x, num3].type == 519)
			{
				num3--;
			}
			num3++;
			if (Main.tile[x, num2 - 1] != null && *Main.tile[x, num2 - 1].liquid < 127 && WorldGen.genRand.Next(4) == 0)
			{
				flag = true;
			}
			if (Main.tile[x, num3] != null && *Main.tile[x, num3].frameX >= 180 && *Main.tile[x, num3].liquid > 127 && WorldGen.genRand.Next(4) == 0)
			{
				flag = true;
			}
			if (Main.tile[x, num3] != null && Main.tile[x, num2 - 1] != null && *Main.tile[x, num3].frameX > 18)
			{
				if (*Main.tile[x, num2 - 1].frameX < 36 || *Main.tile[x, num2 - 1].frameX > 72)
				{
					flag = true;
				}
				else if (*Main.tile[x, num3].frameX < 90)
				{
					flag = true;
				}
				else if (*Main.tile[x, num3].frameX >= 108 && *Main.tile[x, num3].frameX <= 162)
				{
					*Main.tile[x, num3].frameX = 90;
				}
			}
			if (num2 > num3 + 4 && Main.tile[x, num3 + 4] != null && Main.tile[x, num3 + 3] != null && *Main.tile[x, num3 + 4].liquid == 0 && *Main.tile[x, num3 + 3].type == 519)
			{
				flag = true;
			}
			if (flag)
			{
				int num8 = num4;
				if (num3 < num4)
				{
					num8 = num3;
				}
				num8 -= 4;
				for (int i = num8; i <= num2; i++)
				{
					if (Main.tile[x, i] != null && Main.tile[x, i].active() && *Main.tile[x, i].type == 519)
					{
						WorldGen.KillTile(x, i, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)i, 0f, 0, 0, 0);
						}
						WorldGen.SquareTileFrame(x, i, true);
					}
				}
				return;
			}
			if (num6 == (int)(*Main.tile[x, num3].frameY))
			{
				return;
			}
			for (int k = num3; k < num2; k++)
			{
				if (Main.tile[x, k] != null && Main.tile[x, k].active() && *Main.tile[x, k].type == 519)
				{
					*Main.tile[x, k].frameY = (short)num6;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, num3, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x060012D0 RID: 4816 RVA: 0x00467480 File Offset: 0x00465680
		public unsafe static void GrowCheckSeaweed(int x, int y)
		{
			int maxValue = 1;
			if (Main.netMode == 1)
			{
				return;
			}
			if ((*Main.tile[x, y].type == 549 && *Main.tile[x, y].liquid < 200) || *Main.tile[x, y - 1].liquid < 200)
			{
				if (Main.tile[x, y].active() && *Main.tile[x, y].type == 549 && WorldGen.genRand.Next(2) == 0)
				{
					WorldGen.KillTile(x, y, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else
			{
				if (Main.tile[x, y - 1].active() || Main.tile[x, y - 2].active() || WorldGen.genRand.Next(maxValue) != 0 || *Main.tile[x, y - 2].liquid != 255 || *Main.tile[x, y - 3].liquid != 255)
				{
					return;
				}
				int num = 17;
				int num2 = 4;
				int num3 = 30;
				int num4 = 0;
				for (int i = x - num2; i <= x + num2; i++)
				{
					for (int j = y; j <= y + num2 * 3; j++)
					{
						if (Main.tile[i, j].active() && *Main.tile[i, j].type == 549)
						{
							num4++;
							if (num4 > num3)
							{
								return;
							}
						}
					}
				}
				int k = y;
				while (!WorldGen.SolidTile(x, k, false) && k < Main.maxTilesY - 50)
				{
					k++;
				}
				if (k - y < num - WorldGen.genRand.Next(20))
				{
					WorldGen.PlaceTile(x, y - 1, 549, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y - 1, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x060012D1 RID: 4817 RVA: 0x004676B0 File Offset: 0x004658B0
		public unsafe static void GrowCatTail(int x, int j)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			int num = j;
			while (*Main.tile[x, num].liquid > 0 && num > 50)
			{
				num--;
			}
			num++;
			int i = num;
			while ((!Main.tile[x, i].active() || !Main.tileSolid[(int)(*Main.tile[x, i].type)] || Main.tileSolidTop[(int)(*Main.tile[x, i].type)]) && i < Main.maxTilesY - 50)
			{
				i++;
			}
			num = i - 1;
			while (Main.tile[x, num].active() && *Main.tile[x, num].type == 519)
			{
				num--;
			}
			num++;
			if (*Main.tile[x, num].frameX == 90 && Main.tile[x, num - 1].active() && Main.tileCut[(int)(*Main.tile[x, num - 1].type)])
			{
				WorldGen.KillTile(x, num - 1, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)(num - 1), 0f, 0, 0, 0);
				}
			}
			if (Main.tile[x, num - 1].active())
			{
				return;
			}
			if (*Main.tile[x, num].frameX == 0)
			{
				*Main.tile[x, num].frameX = 18;
				WorldGen.SquareTileFrame(x, num, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, num, TileChangeType.None);
				}
			}
			else if (*Main.tile[x, num].frameX == 18)
			{
				*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(2, 5));
				Main.tile[x, num - 1].active(true);
				*Main.tile[x, num - 1].type = 519;
				*Main.tile[x, num - 1].frameX = 90;
				*Main.tile[x, num - 1].frameY = *Main.tile[x, num].frameY;
				Main.tile[x, num - 1].halfBrick(false);
				Main.tile[x, num - 1].slope(0);
				Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
				WorldGen.SquareTileFrame(x, num, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, num, TileChangeType.None);
				}
			}
			else if (*Main.tile[x, num].frameX == 90)
			{
				if (*Main.tile[x, num - 1].liquid == 0)
				{
					if (!Main.tile[x, num - 2].active() && (*Main.tile[x, num].liquid > 0 || *Main.tile[x, num + 1].liquid > 0 || *Main.tile[x, num + 2].liquid > 0) && WorldGen.genRand.Next(3) == 0)
					{
						*Main.tile[x, num].frameX = 108;
						Main.tile[x, num - 1].active(true);
						*Main.tile[x, num - 1].type = 519;
						*Main.tile[x, num - 1].frameX = 90;
						*Main.tile[x, num - 1].frameY = *Main.tile[x, num].frameY;
						Main.tile[x, num - 1].halfBrick(false);
						Main.tile[x, num - 1].slope(0);
						Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
						WorldGen.SquareTileFrame(x, num, true);
					}
					else
					{
						int num2 = WorldGen.genRand.Next(3);
						*Main.tile[x, num].frameX = (short)(126 + num2 * 18);
						Main.tile[x, num - 1].active(true);
						*Main.tile[x, num - 1].type = 519;
						*Main.tile[x, num - 1].frameX = (short)(180 + num2 * 18);
						*Main.tile[x, num - 1].frameY = *Main.tile[x, num].frameY;
						Main.tile[x, num - 1].halfBrick(false);
						Main.tile[x, num - 1].slope(0);
						Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
						WorldGen.SquareTileFrame(x, num, true);
					}
				}
				else
				{
					*Main.tile[x, num].frameX = 108;
					Main.tile[x, num - 1].active(true);
					*Main.tile[x, num - 1].type = 519;
					*Main.tile[x, num - 1].frameX = 90;
					*Main.tile[x, num - 1].frameY = *Main.tile[x, num].frameY;
					Main.tile[x, num - 1].halfBrick(false);
					Main.tile[x, num - 1].slope(0);
					Main.tile[x, num - 1].CopyPaintAndCoating(Main.tile[x, num]);
					WorldGen.SquareTileFrame(x, num, true);
				}
			}
			WorldGen.SquareTileFrame(x, num - 1, false);
			if (Main.netMode == 2)
			{
				NetMessage.SendTileSquare(-1, x, num - 1, 1, 2, TileChangeType.None);
			}
		}

		// Token: 0x060012D2 RID: 4818 RVA: 0x00467D4C File Offset: 0x00465F4C
		public unsafe static bool PlaceLilyPad(int x, int j)
		{
			int num = j;
			if (x < 50 || x > Main.maxTilesX - 50 || num < 50 || num > Main.maxTilesY - 50)
			{
				return false;
			}
			if (Main.tile[x, num].active() || *Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return false;
			}
			while (*Main.tile[x, num].liquid > 0 && num > 50)
			{
				num--;
			}
			num++;
			if (Main.tile[x, num].active() || Main.tile[x, num - 1].active() || *Main.tile[x, num].liquid == 0 || Main.tile[x, num].liquidType() != 0)
			{
				return false;
			}
			if (*Main.tile[x, num].wall != 0 && *Main.tile[x, num].wall != 15 && *Main.tile[x, num].wall != 70 && (*Main.tile[x, num].wall < 63 || *Main.tile[x, num].wall > 68))
			{
				return false;
			}
			int num2 = 5;
			int num3 = 0;
			for (int i = x - num2; i <= x + num2; i++)
			{
				for (int k = num - num2; k <= num + num2; k++)
				{
					if (Main.tile[i, k].active() && *Main.tile[i, k].type == 518)
					{
						num3++;
					}
				}
			}
			if (num3 > 3)
			{
				return false;
			}
			int l = num;
			while ((!Main.tile[x, l].active() || !Main.tileSolid[(int)(*Main.tile[x, l].type)] || Main.tileSolidTop[(int)(*Main.tile[x, l].type)]) && l < Main.maxTilesY - 50)
			{
				if (Main.tile[x, l].active() && *Main.tile[x, l].type == 519)
				{
					return false;
				}
				l++;
			}
			int num4 = 12;
			if (l - num > num4)
			{
				return false;
			}
			if (l - num < 3)
			{
				return false;
			}
			int type = (int)(*Main.tile[x, l].type);
			int num5 = -1;
			if (type == 2 || type == 477)
			{
				num5 = 0;
			}
			if (type == 109 || type == 109 || type == 116)
			{
				num5 = 18;
			}
			if (type == 60)
			{
				num5 = 36;
			}
			if (num5 < 0)
			{
				return false;
			}
			Main.tile[x, num].active(true);
			*Main.tile[x, num].type = 518;
			if (WorldGen.genRand.Next(2) == 0)
			{
				*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3));
			}
			else if (WorldGen.genRand.Next(15) == 0)
			{
				*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(18));
			}
			else
			{
				int num6 = Main.maxTilesX / 5;
				if (x < num6)
				{
					*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(6, 9));
				}
				else if (x < num6 * 2)
				{
					*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(9, 12));
				}
				else if (x < num6 * 3)
				{
					*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(3, 6));
				}
				else if (x < num6 * 4)
				{
					*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(15, 18));
				}
				else
				{
					*Main.tile[x, num].frameX = (short)(18 * WorldGen.genRand.Next(12, 15));
				}
			}
			*Main.tile[x, num].frameY = (short)num5;
			Main.tile[x, num].halfBrick(false);
			Main.tile[x, num].slope(0);
			WorldGen.SquareTileFrame(x, num, true);
			return true;
		}

		// Token: 0x060012D3 RID: 4819 RVA: 0x00468228 File Offset: 0x00466428
		public unsafe static void CheckLilyPad(int x, int y)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.tile[x, y].liquidType() != 0)
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				return;
			}
			int num = y;
			while ((!Main.tile[x, num].active() || !Main.tileSolid[(int)(*Main.tile[x, num].type)] || Main.tileSolidTop[(int)(*Main.tile[x, num].type)]) && num < Main.maxTilesY - 50)
			{
				num++;
				if (Main.tile[x, num] == null)
				{
					return;
				}
			}
			int type = (int)(*Main.tile[x, num].type);
			int num2 = -1;
			if (type == 2 || type == 477)
			{
				num2 = 0;
			}
			if (type == 109 || type == 109 || type == 116)
			{
				num2 = 18;
			}
			if (type == 60)
			{
				num2 = 36;
			}
			if (num2 >= 0)
			{
				if (num2 != (int)(*Main.tile[x, y].frameY))
				{
					*Main.tile[x, y].frameY = (short)num2;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					}
				}
				if (*Main.tile[x, y - 1].liquid > 0 && !Main.tile[x, y - 1].active())
				{
					Main.tile[x, y - 1].active(true);
					*Main.tile[x, y - 1].type = 518;
					*Main.tile[x, y - 1].frameX = *Main.tile[x, y].frameX;
					*Main.tile[x, y - 1].frameY = *Main.tile[x, y].frameY;
					Main.tile[x, y - 1].halfBrick(false);
					Main.tile[x, y - 1].slope(0);
					Main.tile[x, y].active(false);
					*Main.tile[x, y].type = 0;
					WorldGen.SquareTileFrame(x, y - 1, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, x, y - 1, 1, 2, TileChangeType.None);
						return;
					}
				}
				else
				{
					if (*Main.tile[x, y].liquid != 0)
					{
						return;
					}
					Tile tileSafely = Framing.GetTileSafely(x, y + 1);
					if (!tileSafely.active())
					{
						Main.tile[x, y + 1].active(true);
						*Main.tile[x, y + 1].type = 518;
						*Main.tile[x, y + 1].frameX = *Main.tile[x, y].frameX;
						*Main.tile[x, y + 1].frameY = *Main.tile[x, y].frameY;
						Main.tile[x, y + 1].halfBrick(false);
						Main.tile[x, y + 1].slope(0);
						Main.tile[x, y].active(false);
						*Main.tile[x, y].type = 0;
						WorldGen.SquareTileFrame(x, y + 1, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, x, y, 1, 2, TileChangeType.None);
							return;
						}
					}
					else if (tileSafely.active() && !TileID.Sets.Platforms[(int)(*tileSafely.type)] && (!Main.tileSolid[(int)(*tileSafely.type)] || Main.tileSolidTop[(int)(*tileSafely.type)]))
					{
						WorldGen.KillTile(x, y, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
							return;
						}
					}
				}
			}
			else
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x060012D4 RID: 4820 RVA: 0x00468680 File Offset: 0x00466880
		public unsafe static bool TryKillingReplaceableTile(int x, int y, int tileType)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			if (!Main.tile[x, y].active() || (!Main.tileCut[(int)(*Main.tile[x, y].type)] && !TileID.Sets.BreakableWhenPlacing[(int)(*Main.tile[x, y].type)] && (*Main.tile[x, y].type < 373 || *Main.tile[x, y].type > 375) && *Main.tile[x, y].type != 461))
			{
				return false;
			}
			if ((int)(*Main.tile[x, y].type) == tileType)
			{
				return false;
			}
			bool flag4 = *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 579;
			bool flag = *Main.tile[x, y].type == 3 || *Main.tile[x, y].type == 73;
			bool flag2 = Main.tileAlch[(int)(*Main.tile[x, y].type)] && WorldGen.IsHarvestableHerbWithSeed((int)(*Main.tile[x, y].type), (int)(*Main.tile[x, y].frameX / 18));
			bool flag3 = Main.tileAlch[tileType];
			if (flag4 || ((flag || flag2) && flag3))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (!Main.tile[x, y].active() && Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
				return true;
			}
			return false;
		}

		/// <summary>
		/// PlaceTile is the main way to place individual tiles while obeying anchor considerations. Most of the other PlaceX methods in the WorldGen class are called by this method. i and j are the tile coordinates. These coordinates relate to the origin of the tile, not necessarily the top left corner of the tile. Read <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Tile">the Basic Tile wiki guide</see> to familiarize yourself with the concepts of Anchors and Origins. <paramref name="mute" /> indicates if a sound should be made, this only applies to in-game usage as sounds are all muted during world gen. <paramref name="forced" /> attempts to place the tile even if other tiles are already at the coordinates, but it is unreliable. <paramref name="plr" /> does nothing except affect bathtubs. <paramref name="style" /> refers to the style of the tile type provided. Styles are explained in the Basic Tile guide.
		/// <para /> PlaceTile returns a bool indicating placement success. Unfortunately, it doesn't work, don't use it. Checking the coordinates after calling PlaceTile is a good way to check if the placement was a success: <c>if(Main.tile[x, y].TileType == TileID.Campfire)</c>
		/// <para /> PlaceTile doesn't expose everything. For example, attempting to place a tile with a specific style will be ignored by many of the underlying methods. Another issue is that it is impossible to place a tile that has left and right placement orientations facing right. In these situations, you might need to manually place each tile in the multitile or use <see cref="M:Terraria.WorldGen.PlaceObject(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)" /> instead. WorldGen.PlaceObject requires more input. For example, placing Coral with PlaceObject means you have to manually specify the style, as the random style (<see cref="P:Terraria.ObjectData.TileObjectData.RandomStyleRange" />) choosing is a feature of PlaceTile.
		/// <para /> If called in-game, the changed tiles would need to be synced if placement is successful. See <see cref="M:Terraria.NetMessage.SendTileSquare(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Terraria.ID.TileChangeType)" /> for more information and examples.
		/// </summary>
		/// <param name="i"></param>
		/// <param name="j"></param>
		/// <param name="Type"></param>
		/// <param name="mute"></param>
		/// <param name="forced"></param>
		/// <param name="plr"></param>
		/// <param name="style"></param>
		/// <returns></returns>
		// Token: 0x060012D5 RID: 4821 RVA: 0x0046889C File Offset: 0x00466A9C
		public unsafe static bool PlaceTile(int i, int j, int Type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
		{
			int num = Type;
			if (WorldGen.gen && Main.tile[i, j].active() && *Main.tile[i, j].type == 488)
			{
				return false;
			}
			bool result = false;
			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					tile = default(Tile);
					Main.tile[i, j] = tile;
				}
				if (tile.active())
				{
					if (num == 23 && *tile.type == 59)
					{
						num = 661;
					}
					if (num == 199 && *tile.type == 59)
					{
						num = 662;
					}
				}
				if (forced || Collision.EmptyTile(i, j, false) || !Main.tileSolid[num] || (num == 23 && *tile.type == 0 && tile.active()) || (num == 199 && *tile.type == 0 && tile.active()) || (num == 2 && *tile.type == 0 && tile.active()) || (num == 109 && *tile.type == 0 && tile.active()) || (num == 60 && *tile.type == 59 && tile.active()) || (num == 661 && *tile.type == 59 && tile.active()) || (num == 662 && *tile.type == 59 && tile.active()) || (num == 70 && *tile.type == 59 && tile.active()) || (num == 633 && *tile.type == 57 && tile.active()) || (Main.tileMoss[num] && (*tile.type == 1 || *tile.type == 38) && tile.active()))
				{
					if (num == 23 && (*tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 199 && (*tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 2 && (*tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 109 && (*tile.type != 0 || !tile.active()))
					{
						return false;
					}
					if (num == 60 && (*tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 661 && (*tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 662 && (*tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 70 && (*tile.type != 59 || !tile.active()))
					{
						return false;
					}
					if (num == 633 && (*tile.type != 57 || !tile.active()))
					{
						return false;
					}
					if (Main.tileMoss[num])
					{
						if ((*tile.type != 1 && *tile.type != 38) || !tile.active())
						{
							return false;
						}
						if (*tile.type == 38)
						{
							if (num <= 536)
							{
								if (num == 381)
								{
									num = 517;
									goto IL_3CE;
								}
								if (num == 534)
								{
									num = 535;
									goto IL_3CE;
								}
								if (num == 536)
								{
									num = 537;
									goto IL_3CE;
								}
							}
							else
							{
								if (num == 539)
								{
									num = 540;
									goto IL_3CE;
								}
								if (num == 625)
								{
									num = 626;
									goto IL_3CE;
								}
								if (num == 627)
								{
									num = 628;
									goto IL_3CE;
								}
							}
							num = 512 + num - 179;
						}
					}
					IL_3CE:
					if (num == 81)
					{
						if (Main.tile[i, j - 1] == null)
						{
							Main.tile[i, j - 1] = default(Tile);
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = default(Tile);
						}
						if (Main.tile[i, j - 1].active())
						{
							return false;
						}
						if (!Main.tile[i, j + 1].active() || !Main.tileSolid[(int)(*Main.tile[i, j + 1].type)] || Main.tile[i, j + 1].halfBrick() || Main.tile[i, j + 1].slope() != 0)
						{
							return false;
						}
					}
					if ((num == 373 || num == 375 || num == 374 || num == 461) && (Main.tile[i, j - 1] == null || Main.tile[i, j - 1].bottomSlope()))
					{
						return false;
					}
					if (*tile.liquid > 0 || tile.checkingLiquid())
					{
						int num5 = num;
						if (num5 != 4)
						{
							if (!TileID.Sets.Torch[num])
							{
								if (num5 != 3 && !TileID.Sets.TreeSapling[num])
								{
									if (num5 <= 72)
									{
										if (num5 <= 32)
										{
											if (num5 != 24 && num5 != 27 && num5 != 32)
											{
												goto IL_605;
											}
										}
										else if (num5 != 51 && num5 != 69 && num5 != 72)
										{
											goto IL_605;
										}
									}
									else if (num5 <= 529)
									{
										if (num5 != 201 && num5 != 352 && num5 != 529)
										{
											goto IL_605;
										}
									}
									else if (num5 != 624 && num5 != 637 && num5 != 656)
									{
										goto IL_605;
									}
								}
								return false;
							}
							if (TileObjectData.GetTileData(num, style, 0).WaterPlacement != LiquidPlacement.Allowed)
							{
								return false;
							}
						}
						else if (style != 8 && style != 11 && style != 17)
						{
							return false;
						}
					}
					IL_605:
					if (TileID.Sets.ResetsHalfBrickPlacementAttempt[num] && (!tile.active() || !Main.tileFrameImportant[(int)(*tile.type)]))
					{
						tile.halfBrick(false);
						*tile.frameY = 0;
						*tile.frameX = 0;
					}
					if (num == 624)
					{
						if ((!tile.active() || Main.tileCut[(int)(*tile.type)] || TileID.Sets.BreakableWhenPlacing[(int)(*tile.type)]) && WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(i, j))
						{
							tile.active(true);
							*tile.type = 624;
							tile.halfBrick(false);
							tile.slope(0);
							*tile.frameX = 0;
							*tile.frameY = 0;
						}
					}
					else if (num == 656)
					{
						if ((!tile.active() || Main.tileCut[(int)(*tile.type)] || TileID.Sets.BreakableWhenPlacing[(int)(*tile.type)]) && WorldGen.HasValidGroundForGlowTulipBelowSpot(i, j))
						{
							tile.active(true);
							*tile.type = 656;
							tile.halfBrick(false);
							tile.slope(0);
							*tile.frameX = 0;
							*tile.frameY = 0;
						}
					}
					else if (num == 3 || num == 24 || num == 110 || num == 201 || num == 637)
					{
						if (WorldGen.IsFitToPlaceFlowerIn(i, j, num))
						{
							if (num == 24 && WorldGen.genRand.Next(13) == 0)
							{
								tile.active(true);
								*tile.type = 32;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (num == 201 && WorldGen.genRand.Next(13) == 0)
							{
								tile.active(true);
								*tile.type = 352;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (*Main.tile[i, j + 1].type == 78 || *Main.tile[i, j + 1].type == 380 || *Main.tile[i, j + 1].type == 579)
							{
								tile.active(true);
								*tile.type = (ushort)num;
								int num2 = WorldGen.genRand.NextFromList(new int[]
								{
									6,
									7,
									9,
									10,
									11,
									12,
									13,
									14,
									15,
									16,
									17,
									18,
									19,
									20,
									21,
									24,
									27,
									30,
									33,
									36,
									39,
									42
								});
								if (num2 <= 30)
								{
									if (num2 <= 24)
									{
										if (num2 != 21 && num2 != 24)
										{
											goto IL_8B3;
										}
									}
									else if (num2 != 27 && num2 != 30)
									{
										goto IL_8B3;
									}
								}
								else if (num2 <= 36)
								{
									if (num2 != 33 && num2 != 36)
									{
										goto IL_8B3;
									}
								}
								else if (num2 != 39 && num2 != 42)
								{
									goto IL_8B3;
								}
								num2 += WorldGen.genRand.Next(3);
								IL_8B3:
								*tile.frameX = (short)(num2 * 18);
							}
							else if (*tile.wall >= 0 && WallID.Sets.AllowsPlantsToGrow[(int)(*tile.wall)] && *Main.tile[i, j + 1].wall >= 0 && (int)(*Main.tile[i, j + 1].wall) < WallLoader.WallCount && WallID.Sets.AllowsPlantsToGrow[(int)(*Main.tile[i, j + 1].wall)])
							{
								if (WorldGen.genRand.Next(50) == 0 || ((num == 24 || num == 201) && WorldGen.genRand.Next(40) == 0))
								{
									tile.active(true);
									*tile.type = (ushort)num;
									if (num == 201)
									{
										*tile.frameX = 270;
									}
									else
									{
										*tile.frameX = 144;
									}
								}
								else if (WorldGen.genRand.Next(35) == 0 || (*Main.tile[i, j].wall >= 63 && *Main.tile[i, j].wall <= 70))
								{
									tile.active(true);
									*tile.type = (ushort)num;
									int num3 = WorldGen.genRand.NextFromList(new int[]
									{
										6,
										7,
										9,
										10,
										11,
										12,
										13,
										14,
										15,
										16,
										17,
										18,
										19,
										20
									});
									if (num == 201)
									{
										num3 = WorldGen.genRand.NextFromList(new int[]
										{
											6,
											7,
											8,
											9,
											10,
											11,
											12,
											13,
											14,
											16,
											17,
											18,
											19,
											20,
											21,
											22
										});
									}
									if (num == 637)
									{
										num3 = WorldGen.genRand.NextFromList(new int[]
										{
											6,
											7,
											8,
											9,
											10
										});
									}
									*tile.frameX = (short)(num3 * 18);
								}
								else
								{
									tile.active(true);
									*tile.type = (ushort)num;
									*tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
								}
							}
						}
					}
					else if (num == 61)
					{
						if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() && *Main.tile[i, j + 1].type == 60)
						{
							bool flag = (double)j > Main.rockLayer || Main.remixWorld || WorldGen.remixWorldGen;
							if (WorldGen.genRand.Next(16) == 0 && (double)j > Main.worldSurface)
							{
								tile.active(true);
								*tile.type = 69;
								WorldGen.SquareTileFrame(i, j, true);
							}
							else if (WorldGen.genRand.Next(60) == 0 && flag)
							{
								tile.active(true);
								*tile.type = (ushort)num;
								*tile.frameX = 144;
							}
							else if (WorldGen.genRand.Next(230) == 0 && flag)
							{
								tile.active(true);
								*tile.type = (ushort)num;
								*tile.frameX = 162;
							}
							else if (WorldGen.genRand.Next(15) == 0)
							{
								tile.active(true);
								*tile.type = (ushort)num;
								if (WorldGen.genRand.Next(3) != 0)
								{
									*tile.frameX = (short)(WorldGen.genRand.Next(2) * 18 + 108);
								}
								else
								{
									*tile.frameX = (short)(WorldGen.genRand.Next(13) * 18 + 180);
								}
							}
							else
							{
								tile.active(true);
								*tile.type = (ushort)num;
								*tile.frameX = (short)(WorldGen.genRand.Next(6) * 18);
							}
						}
					}
					else if (num == 518)
					{
						WorldGen.PlaceLilyPad(i, j);
					}
					else if (num == 519)
					{
						WorldGen.PlaceCatTail(i, j);
					}
					else if (num == 529)
					{
						WorldGen.PlantSeaOat(i, j);
					}
					else if (num == 571)
					{
						WorldGen.PlaceBamboo(i, j);
					}
					else if (num == 549)
					{
						WorldGen.PlaceUnderwaterPlant(549, i, j);
					}
					else if (num == 71)
					{
						if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() && *Main.tile[i, j + 1].type == 70)
						{
							Point point;
							point..ctor(-1, -1);
							if ((double)j > Main.worldSurface)
							{
								point = WorldGen.PlaceCatTail(i, j);
							}
							if (WorldGen.InWorld(point.X, point.Y, 0))
							{
								if (WorldGen.gen)
								{
									int num4 = WorldGen.genRand.Next(14);
									for (int k = 0; k < num4; k++)
									{
										WorldGen.GrowCatTail(point.X, point.Y);
									}
									WorldGen.SquareTileFrame(point.X, point.Y, true);
								}
							}
							else
							{
								tile.active(true);
								*tile.type = (ushort)num;
								*tile.frameX = (short)(WorldGen.genRand.Next(5) * 18);
							}
						}
					}
					else if (num == 129)
					{
						if (WorldGen.SolidTile(i - 1, j, false) || WorldGen.SolidTile(i + 1, j, false) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							*tile.frameX = (short)(style * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 178)
					{
						if (WorldGen.SolidTile(i - 1, j, true) || WorldGen.SolidTile(i + 1, j, true) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							*tile.frameX = (short)(style * 18);
							*tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 184)
					{
						if ((Main.tileMoss[(int)(*Main.tile[i - 1, j].type)] && WorldGen.SolidTile(i - 1, j, false)) || (Main.tileMoss[(int)(*Main.tile[i + 1, j].type)] && WorldGen.SolidTile(i + 1, j, false)) || (Main.tileMoss[(int)(*Main.tile[i, j - 1].type)] && WorldGen.SolidTile(i, j - 1, false)) || (Main.tileMoss[(int)(*Main.tile[i, j + 1].type)] && WorldGen.SolidTile(i, j + 1, false)))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							*tile.frameX = (short)(style * 18);
							*tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
						if ((TileID.Sets.tileMossBrick[(int)(*Main.tile[i - 1, j].type)] && WorldGen.SolidTile(i - 1, j, false)) || (TileID.Sets.tileMossBrick[(int)(*Main.tile[i + 1, j].type)] && WorldGen.SolidTile(i + 1, j, false)) || (TileID.Sets.tileMossBrick[(int)(*Main.tile[i, j - 1].type)] && WorldGen.SolidTile(i, j - 1, false)) || (TileID.Sets.tileMossBrick[(int)(*Main.tile[i, j + 1].type)] && WorldGen.SolidTile(i, j + 1, false)))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							*tile.frameX = (short)(style * 18);
							*tile.frameY = (short)(WorldGen.genRand.Next(3) * 18);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 485)
					{
						WorldGen.PlaceObject(i, j, num, mute, style, 0, -1, -1);
					}
					else if (num == 171)
					{
						WorldGen.PlaceXmasTree(i, j, 171);
					}
					else if (num == 254)
					{
						WorldGen.Place2x2Style(i, j, (ushort)num, style);
					}
					else if (num == 335 || num == 564 || num == 594)
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 654 || num == 319 || num == 132 || num == 484 || num == 138 || num == 664 || num == 142 || num == 143 || num == 282 || (num >= 288 && num <= 295) || (num >= 316 && num <= 318))
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 411)
					{
						WorldGen.Place2x2(i, j, (ushort)num, 0);
					}
					else if (num == 457)
					{
						WorldGen.Place2x2Horizontal(i, j, 457, style);
					}
					else if (num == 137)
					{
						tile.active(true);
						*tile.type = (ushort)num;
						*tile.frameY = (short)(18 * style);
					}
					else if (num == 136)
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = default(Tile);
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = default(Tile);
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = default(Tile);
						}
						if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)(*Main.tile[i - 1, j].type)] && Main.tile[i - 1, j].slope() == 0 && (WorldGen.SolidTile(i - 1, j, false) || TileID.Sets.IsBeam[(int)(*Main.tile[i - 1, j].type)] || (*Main.tile[i - 1, j].type == 5 && *Main.tile[i - 1, j - 1].type == 5 && *Main.tile[i - 1, j + 1].type == 5))) || (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)(*Main.tile[i + 1, j].type)] && Main.tile[i + 1, j].slope() == 0 && (WorldGen.SolidTile(i + 1, j, false) || TileID.Sets.IsBeam[(int)(*Main.tile[i + 1, j].type)] || (*Main.tile[i + 1, j].type == 5 && *Main.tile[i + 1, j - 1].type == 5 && *Main.tile[i + 1, j + 1].type == 5))) || (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && WorldGen.SolidTile(i, j + 1, false) && Main.tile[i, j + 1].slope() == 0) || *tile.wall > 0)
						{
							tile.active(true);
							*tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 442)
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = default(Tile);
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = default(Tile);
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = default(Tile);
						}
						if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)(*Main.tile[i - 1, j].type)] && Main.tile[i - 1, j].slope() == 0 && (WorldGen.SolidTile(i - 1, j, false) || TileID.Sets.IsBeam[(int)(*Main.tile[i - 1, j].type)] || (*Main.tile[i - 1, j].type == 5 && *Main.tile[i - 1, j - 1].type == 5 && *Main.tile[i - 1, j + 1].type == 5))) || (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && !TileID.Sets.NotReallySolid[(int)(*Main.tile[i + 1, j].type)] && Main.tile[i + 1, j].slope() == 0 && (WorldGen.SolidTile(i + 1, j, false) || TileID.Sets.IsBeam[(int)(*Main.tile[i + 1, j].type)] || (*Main.tile[i + 1, j].type == 5 && *Main.tile[i + 1, j - 1].type == 5 && *Main.tile[i + 1, j + 1].type == 5))) || (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && WorldGen.SolidTile(i, j + 1, false) && Main.tile[i, j + 1].slope() == 0))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (TileID.Sets.Torch[num])
					{
						if (Main.tile[i - 1, j] == null)
						{
							Main.tile[i - 1, j] = default(Tile);
						}
						if (Main.tile[i + 1, j] == null)
						{
							Main.tile[i + 1, j] = default(Tile);
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = default(Tile);
						}
						Tile tile2 = Main.tile[i - 1, j];
						Tile tile3 = Main.tile[i + 1, j];
						Tile tile4 = Main.tile[i, j + 1];
						if (*tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || tile2.slope() % 2 != 1) && ((Main.tileSolid[(int)(*tile2.type)] && !Main.tileSolidTop[(int)(*tile2.type)] && !TileID.Sets.NotReallySolid[(int)(*tile2.type)]) || TileID.Sets.IsBeam[(int)(*tile2.type)] || (WorldGen.IsTreeType((int)(*tile2.type)) && WorldGen.IsTreeType((int)(*Main.tile[i - 1, j - 1].type)) && WorldGen.IsTreeType((int)(*Main.tile[i - 1, j + 1].type))))) || (tile3.active() && (tile3.slope() == 0 || tile3.slope() % 2 != 0) && ((Main.tileSolid[(int)(*tile3.type)] && !Main.tileSolidTop[(int)(*tile3.type)] && !TileID.Sets.NotReallySolid[(int)(*tile3.type)]) || TileID.Sets.IsBeam[(int)(*tile3.type)] || (WorldGen.IsTreeType((int)(*tile3.type)) && WorldGen.IsTreeType((int)(*Main.tile[i + 1, j - 1].type)) && WorldGen.IsTreeType((int)(*Main.tile[i + 1, j + 1].type))))) || (tile4.active() && Main.tileSolid[(int)(*tile4.type)] && ((TileID.Sets.Platforms[(int)(*tile4.type)] && WorldGen.TopEdgeCanBeAttachedTo(i, j + 1)) || ((!Main.tileSolidTop[(int)(*tile4.type)] || (*tile4.type == 380 && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[(int)(*tile4.type)] && !tile4.halfBrick() && tile4.slope() == 0))))
						{
							tile.active(true);
							*tile.type = (ushort)num;
							*tile.frameY = (short)(22 * style);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 10)
					{
						if (Main.tile[i, j - 1] == null)
						{
							Main.tile[i, j - 1] = default(Tile);
						}
						if (Main.tile[i, j - 2] == null)
						{
							Main.tile[i, j - 2] = default(Tile);
						}
						if (Main.tile[i, j - 3] == null)
						{
							Main.tile[i, j - 3] = default(Tile);
						}
						if (Main.tile[i, j + 1] == null)
						{
							Main.tile[i, j + 1] = default(Tile);
						}
						if (Main.tile[i, j + 2] == null)
						{
							Main.tile[i, j + 2] = default(Tile);
						}
						if (Main.tile[i, j + 3] == null)
						{
							Main.tile[i, j + 3] = default(Tile);
						}
						if (!Main.tile[i, j - 1].active() && !Main.tile[i, j - 2].active() && Main.tile[i, j - 3].active() && Main.tileSolid[(int)(*Main.tile[i, j - 3].type)])
						{
							WorldGen.PlaceDoor(i, j - 1, num, style);
							WorldGen.SquareTileFrame(i, j, true);
						}
						else
						{
							if (Main.tile[i, j + 1].active() || Main.tile[i, j + 2].active() || !Main.tile[i, j + 3].active() || !Main.tileSolid[(int)(*Main.tile[i, j + 3].type)])
							{
								return false;
							}
							WorldGen.PlaceDoor(i, j + 1, num, style);
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if ((num >= 275 && num <= 281) || num == 296 || num == 297 || num == 309 || num == 358 || num == 359 || num == 413 || num == 414 || num == 542)
					{
						WorldGen.Place6x3(i, j, (ushort)num, -1, 0);
					}
					else if (num == 237 || num == 244 || num == 285 || num == 286 || num == 298 || num == 299 || num == 310 || num == 339 || num == 538 || (num >= 361 && num <= 364) || num == 532 || num == 533 || num == 486 || num == 488 || num == 544 || num == 582 || num == 619 || num == 629)
					{
						WorldGen.Place3x2(i, j, (ushort)num, 0);
					}
					else if (num == 128)
					{
						WorldGen.PlaceMan(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 269)
					{
						WorldGen.PlaceWoman(i, j, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 334)
					{
						int style2 = 0;
						if (style == -1)
						{
							style2 = 1;
						}
						WorldGen.Place3x3Wall(i, j, 334, style2);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 149)
					{
						if (WorldGen.SolidTile(i - 1, j, false) || WorldGen.SolidTile(i + 1, j, false) || WorldGen.SolidTile(i, j - 1, false) || WorldGen.SolidTile(i, j + 1, false))
						{
							*tile.frameX = (short)(18 * style);
							tile.active(true);
							*tile.type = (ushort)num;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
					else if (num == 139 || num == 35)
					{
						WorldGen.PlaceMB(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 165)
					{
						WorldGen.PlaceTight(i, j, false);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 235)
					{
						WorldGen.Place3x1(i, j, (ushort)num, 0);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 240)
					{
						WorldGen.Place3x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 440)
					{
						WorldGen.Place3x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 245)
					{
						WorldGen.Place2x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 246)
					{
						WorldGen.Place3x2Wall(i, j, (ushort)num, style);
					}
					else if (num == 241)
					{
						WorldGen.Place4x3Wall(i, j, (ushort)num, style);
					}
					else if (num == 242)
					{
						WorldGen.Place6x4Wall(i, j, (ushort)num, style);
					}
					else if (num == 34)
					{
						WorldGen.PlaceChand(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else if (num == 106 || num == 212 || num == 219 || num == 220 || num == 228 || num == 231 || num == 243 || num == 247 || num == 283 || (num >= 300 && num <= 308) || num == 354 || num == 355 || num == 491 || num == 642)
					{
						WorldGen.Place3x3(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					else
					{
						int num5 = num;
						if (num5 <= 50)
						{
							if (num5 <= 14)
							{
								if (num5 != 13)
								{
									if (num5 != 14)
									{
										goto IL_249B;
									}
									goto IL_24A7;
								}
							}
							else
							{
								if (num5 == 26)
								{
									goto IL_24A7;
								}
								if (num5 != 33 && num5 - 49 > 1)
								{
									goto IL_249B;
								}
							}
						}
						else if (num5 <= 87)
						{
							if (num5 != 78)
							{
								if (num5 - 86 > 1)
								{
									goto IL_249B;
								}
								goto IL_24A7;
							}
						}
						else if (num5 != 174 && num5 != 372 && num5 != 646)
						{
							goto IL_249B;
						}
						WorldGen.PlaceOnTable1x1(i, j, num, style);
						WorldGen.SquareTileFrame(i, j, true);
						goto IL_2BB4;
						IL_249B:
						if (!TileID.Sets.BasicDresser[num])
						{
							if (num5 <= 215)
							{
								if (num5 <= 114)
								{
									if (num5 == 89 || num5 == 114)
									{
										goto IL_24A7;
									}
								}
								else if (num5 - 186 <= 1 || num5 == 215)
								{
									goto IL_24A7;
								}
							}
							else if (num5 <= 236)
							{
								if (num5 - 217 <= 1)
								{
									goto IL_24A7;
								}
								if (num5 == 236)
								{
									WorldGen.PlaceJunglePlant(i, j, (ushort)num, WorldGen.genRand.Next(3), 0);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
							}
							else
							{
								if (num5 == 238)
								{
									WorldGen.PlaceJunglePlant(i, j, (ushort)num, 0, 0);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
								if (num5 == 377 || num5 == 469)
								{
									goto IL_24A7;
								}
							}
							if (TileID.Sets.TreeSapling[num])
							{
								if (Main.tile[i, j + 1] == null)
								{
									Main.tile[i, j + 1] = default(Tile);
								}
								int type = (int)(*Main.tile[i, j + 1].type);
								int dummyType = 20;
								int dummyStyle = 0;
								if (Main.tile[i, j + 1].active() && (type == 2 || type == 109 || type == 147 || type == 60 || type == 23 || type == 199 || type == 661 || type == 662 || type == 53 || type == 234 || type == 116 || type == 112 || TileLoader.SaplingGrowthType(type, ref dummyType, ref dummyStyle)))
								{
									WorldGen.Place1x2(i, j, (ushort)dummyType, dummyStyle);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
								goto IL_2BB4;
							}
							else
							{
								if (num5 > 356)
								{
									if (num5 <= 480)
									{
										if (num5 <= 453)
										{
											if (num5 <= 390)
											{
												if (num5 == 378)
												{
													goto IL_26B6;
												}
												if (num5 != 390)
												{
													goto IL_272E;
												}
												goto IL_25EC;
											}
											else if (num5 != 410)
											{
												if (num5 != 453)
												{
													goto IL_272E;
												}
												goto IL_269E;
											}
										}
										else if (num5 <= 462)
										{
											if (num5 == 456)
											{
												goto IL_26B6;
											}
											if (num5 != 462)
											{
												goto IL_272E;
											}
											goto IL_2686;
										}
										else
										{
											if (num5 == 465)
											{
												goto IL_2716;
											}
											if (num5 != 480)
											{
												goto IL_272E;
											}
										}
									}
									else if (num5 <= 545)
									{
										if (num5 <= 509)
										{
											if (num5 == 506)
											{
												goto IL_26B6;
											}
											if (num5 != 509)
											{
												goto IL_272E;
											}
										}
										else
										{
											if (num5 == 531)
											{
												goto IL_2716;
											}
											if (num5 != 545)
											{
												goto IL_272E;
											}
											goto IL_26B6;
										}
									}
									else if (num5 <= 592)
									{
										if (num5 == 567)
										{
											WorldGen.PlaceGnome(i, j, style);
											WorldGen.SquareTileFrame(i, j, true);
											goto IL_2BB4;
										}
										if (num5 - 591 > 1)
										{
											goto IL_272E;
										}
										goto IL_2716;
									}
									else if (num5 - 657 > 1)
									{
										if (num5 != 663)
										{
											goto IL_272E;
										}
										goto IL_26B6;
									}
									WorldGen.Place2xX(i, j, (ushort)num, style);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
									IL_2716:
									WorldGen.Place2xX(i, j, (ushort)num, style);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
								if (num5 <= 134)
								{
									if (num5 <= 93)
									{
										if (num5 <= 29)
										{
											switch (num5)
											{
											case 15:
												goto IL_25EC;
											case 16:
											case 18:
												goto IL_2686;
											case 17:
												break;
											default:
												if (num5 != 29)
												{
													goto IL_272E;
												}
												goto IL_2686;
											}
										}
										else if (num5 != 77)
										{
											if (num5 - 92 > 1)
											{
												goto IL_272E;
											}
											goto IL_269E;
										}
									}
									else if (num5 <= 105)
									{
										if (num5 == 103)
										{
											goto IL_2686;
										}
										if (num5 - 104 > 1)
										{
											goto IL_272E;
										}
										goto IL_26B6;
									}
									else if (num5 != 133)
									{
										if (num5 != 134)
										{
											goto IL_272E;
										}
										goto IL_2686;
									}
									WorldGen.Place3x2(i, j, (ushort)num, style);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
								if (num5 <= 320)
								{
									if (num5 <= 216)
									{
										if (num5 == 207)
										{
											WorldGen.Place2xX(i, j, (ushort)num, style);
											WorldGen.SquareTileFrame(i, j, true);
											goto IL_2BB4;
										}
										if (num5 != 216)
										{
											goto IL_272E;
										}
									}
									else
									{
										if (num5 == 227)
										{
											WorldGen.PlaceDye(i, j, style);
											WorldGen.SquareTileFrame(i, j, true);
											goto IL_2BB4;
										}
										if (num5 != 320)
										{
											goto IL_272E;
										}
										goto IL_26B6;
									}
								}
								else if (num5 <= 338)
								{
									if (num5 == 337)
									{
										goto IL_26B6;
									}
									if (num5 != 338)
									{
										goto IL_272E;
									}
								}
								else
								{
									if (num5 != 349 && num5 != 356)
									{
										goto IL_272E;
									}
									goto IL_26B6;
								}
								IL_25EC:
								if (Main.tile[i, j - 1] == null)
								{
									Main.tile[i, j - 1] = default(Tile);
								}
								if (Main.tile[i, j] == null)
								{
									Main.tile[i, j] = default(Tile);
								}
								WorldGen.Place1x2(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_2686:
								WorldGen.Place2x1(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_269E:
								WorldGen.Place1xX(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_26B6:
								WorldGen.Place2xX(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_272E:
								if (TileID.Sets.BasicChest[num])
								{
									WorldGen.PlaceChest(i, j, (ushort)num, false, style);
									WorldGen.SquareTileFrame(i, j, true);
									goto IL_2BB4;
								}
								if (num <= 144)
								{
									if (num <= 55)
									{
										if (num <= 28)
										{
											if (num == 27)
											{
												WorldGen.PlaceSunflower(i, j, 27);
												WorldGen.SquareTileFrame(i, j, true);
												goto IL_2BB4;
											}
											if (num != 28)
											{
												goto IL_29A8;
											}
											WorldGen.PlacePot(i, j, 28, WorldGen.genRand.Next(4));
											WorldGen.SquareTileFrame(i, j, true);
											goto IL_2BB4;
										}
										else if (num != 36)
										{
											if (num == 42)
											{
												goto IL_296E;
											}
											if (num != 55)
											{
												goto IL_29A8;
											}
											goto IL_2986;
										}
									}
									else if (num <= 102)
									{
										if (num == 85)
										{
											goto IL_2997;
										}
										if (num == 91)
										{
											WorldGen.PlaceBanner(i, j, (ushort)num, style);
											WorldGen.SquareTileFrame(i, j, true);
											goto IL_2BB4;
										}
										if (num - 101 > 1)
										{
											goto IL_29A8;
										}
										goto IL_2906;
									}
									else if (num != 135 && num != 141 && num != 144)
									{
										goto IL_29A8;
									}
								}
								else if (num <= 376)
								{
									if (num <= 239)
									{
										if (num != 210 && num != 239)
										{
											goto IL_29A8;
										}
									}
									else
									{
										if (num - 270 <= 1)
										{
											goto IL_296E;
										}
										if (num != 324)
										{
											if (num != 376)
											{
												goto IL_29A8;
											}
											goto IL_2997;
										}
									}
								}
								else
								{
									if (num <= 466)
									{
										switch (num)
										{
										case 419:
										case 420:
										case 423:
										case 424:
										case 429:
											break;
										case 421:
										case 422:
										case 426:
										case 427:
										case 428:
											goto IL_29A8;
										case 425:
											goto IL_2986;
										default:
											if (num != 445)
											{
												switch (num)
												{
												case 463:
													goto IL_2906;
												case 464:
												case 466:
													WorldGen.Place5x4(i, j, (ushort)num, style);
													WorldGen.SquareTileFrame(i, j, true);
													goto IL_2BB4;
												case 465:
													goto IL_29A8;
												default:
													goto IL_29A8;
												}
											}
											break;
										}
										WorldGen.PlaceLogicTiles(i, j, num, style);
										WorldGen.SquareTileFrame(i, j, true);
										goto IL_2BB4;
									}
									if (num != 476 && num != 494)
									{
										if (num - 510 > 1)
										{
											goto IL_29A8;
										}
										goto IL_2986;
									}
								}
								WorldGen.Place1x1(i, j, num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_2906:
								WorldGen.Place3x4(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_296E:
								WorldGen.Place1x2Top(i, j, (ushort)num, style);
								WorldGen.SquareTileFrame(i, j, true);
								goto IL_2BB4;
								IL_2986:
								WorldGen.PlaceSign(i, j, (ushort)num, style);
								goto IL_2BB4;
								IL_2997:
								WorldGen.Place2x2Horizontal(i, j, (ushort)num, style);
								goto IL_2BB4;
								IL_29A8:
								if (Main.tileAlch[num])
								{
									WorldGen.PlaceAlch(i, j, style);
									goto IL_2BB4;
								}
								int num6 = num;
								if (num6 <= 126)
								{
									if (num6 <= 79)
									{
										if (num6 == 19)
										{
											*tile.frameY = (short)(18 * style);
											tile.active(true);
											*tile.type = (ushort)num;
											goto IL_2BB4;
										}
										if (num6 != 79)
										{
											goto IL_2B52;
										}
									}
									else
									{
										if (num6 == 81)
										{
											*tile.frameX = (short)(26 * WorldGen.genRand.Next(6));
											tile.active(true);
											*tile.type = (ushort)num;
											goto IL_2BB4;
										}
										switch (num6)
										{
										case 90:
											break;
										case 91:
										case 92:
										case 93:
											goto IL_2B52;
										case 94:
										case 95:
										case 97:
										case 98:
										case 99:
										case 100:
											goto IL_2A7A;
										case 96:
											WorldGen.Place2x2Style(i, j, (ushort)num, style);
											goto IL_2BB4;
										default:
											if (num6 - 125 > 1)
											{
												goto IL_2B52;
											}
											goto IL_2A7A;
										}
									}
									int direction = 1;
									if (plr > -1)
									{
										direction = Main.player[plr].direction;
									}
									WorldGen.Place4x2(i, j, (ushort)num, direction, style);
									goto IL_2BB4;
								}
								if (num6 <= 209)
								{
									if (num6 - 172 > 1)
									{
										if (num6 != 209)
										{
											goto IL_2B52;
										}
										WorldGen.PlaceCannon(i, j, (ushort)num, style);
										goto IL_2BB4;
									}
								}
								else if (num6 != 287)
								{
									if (num6 == 314)
									{
										Minecart.PlaceTrack(tile, style);
										goto IL_2BB4;
									}
									if (num6 != 380)
									{
										goto IL_2B52;
									}
									*tile.frameY = (short)(18 * style);
									tile.active(true);
									*tile.type = (ushort)num;
									goto IL_2BB4;
								}
								IL_2A7A:
								WorldGen.Place2x2(i, j, (ushort)num, style);
								goto IL_2BB4;
								IL_2B52:
								if (num >= (int)TileID.Count && TileObjectData.GetTileData(num, style, 0) != null)
								{
									WorldGen.PlaceObject(i, j, (int)((ushort)num), mute, style, 0, -1, -1);
									goto IL_2BB4;
								}
								tile.active(true);
								*tile.type = (ushort)num;
								if (Main.tenthAnniversaryWorld && !Main.remixWorld && (num == 53 || num == 396 || num == 397))
								{
									tile.color(7);
									goto IL_2BB4;
								}
								goto IL_2BB4;
							}
						}
						IL_24A7:
						WorldGen.Place3x2(i, j, (ushort)num, style);
						WorldGen.SquareTileFrame(i, j, true);
					}
					IL_2BB4:
					if (tile.active())
					{
						if (TileID.Sets.BlocksWaterDrawingBehindSelf[(int)(*tile.type)])
						{
							WorldGen.SquareWallFrame(i, j, true);
						}
						WorldGen.SquareTileFrame(i, j, true);
						result = true;
						if (!mute && !WorldGen.generatingWorld)
						{
							if (num != 127)
							{
								if (num != 314)
								{
									if (num - 330 > 3)
									{
										SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
									}
									else
									{
										SoundEngine.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
									}
								}
								else
								{
									SoundEngine.PlaySound(new SoundStyle?(SoundID.Item52), i * 16, j * 16);
								}
							}
							else
							{
								SoundEngine.PlaySound(new SoundStyle?(SoundID.Item30), i * 16, j * 16);
							}
							if (num == 22 || num == 140)
							{
								for (int l = 0; l < 3; l++)
								{
									Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
								}
							}
						}
					}
				}
			}
			return result;
		}

		// Token: 0x060012D6 RID: 4822 RVA: 0x0046B574 File Offset: 0x00469774
		public unsafe static void KillWall(int i, int j, bool fail = false)
		{
			if (i < 0 || j < 0 || i >= Main.maxTilesX || j >= Main.maxTilesY)
			{
				return;
			}
			Tile tile = Main.tile[i, j];
			if (tile == null)
			{
				tile = default(Tile);
				Main.tile[i, j] = tile;
			}
			if (*tile.wall <= 0)
			{
				return;
			}
			fail = WorldGen.KillWall_CheckFailure(fail, tile);
			WallLoader.KillWall(i, j, (int)(*tile.wall), ref fail);
			WorldGen.KillWall_PlaySounds(i, j, tile, fail);
			int num = 10;
			if (fail)
			{
				num = 3;
			}
			WallLoader.NumDust(i, j, (int)(*tile.wall), fail, ref num);
			for (int k = 0; k < num; k++)
			{
				WorldGen.KillWall_MakeWallDust(i, j, tile);
			}
			if (fail)
			{
				WorldGen.SquareWallFrame(i, j, true);
				return;
			}
			WorldGen.KillWall_DropItems(i, j, tile);
			*tile.wall = 0;
			tile.ClearWallPaintAndCoating();
			WorldGen.SquareWallFrame(i, j, true);
			if (*tile.type >= 0 && TileID.Sets.FramesOnKillWall[(int)(*tile.type)])
			{
				WorldGen.TileFrame(i, j, false, false);
			}
		}

		// Token: 0x060012D7 RID: 4823 RVA: 0x0046B672 File Offset: 0x00469872
		private unsafe static bool KillWall_CheckFailure(bool fail, Tile tileCache)
		{
			if (Main.wallDungeon[(int)(*tileCache.wall)] && !NPC.downedBoss3)
			{
				fail = true;
			}
			if (*tileCache.wall == 87 && !NPC.downedGolemBoss)
			{
				fail = true;
			}
			return fail;
		}

		// Token: 0x060012D8 RID: 4824 RVA: 0x0046B6A8 File Offset: 0x004698A8
		private unsafe static void KillWall_PlaySounds(int i, int j, Tile tileCache, bool fail = false)
		{
			if (!WallLoader.KillSound(i, j, (int)(*tileCache.wall), fail))
			{
				return;
			}
			if (*tileCache.wall == 241 || (*tileCache.wall >= 88 && *tileCache.wall <= 93) || *tileCache.wall == 21 || *tileCache.wall == 186 || *tileCache.wall == 136 || *tileCache.wall == 137 || *tileCache.wall == 168 || *tileCache.wall == 169 || *tileCache.wall == 172 || *tileCache.wall == 226 || *tileCache.wall == 227 || *tileCache.wall == 242 || *tileCache.wall == 243)
			{
				SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				return;
			}
			if ((*tileCache.wall >= 63 && *tileCache.wall <= 70) || *tileCache.wall == 264 || *tileCache.wall == 268 || *tileCache.wall == 265)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				return;
			}
			SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
		}

		// Token: 0x060012D9 RID: 4825 RVA: 0x0046B834 File Offset: 0x00469A34
		private unsafe static void KillWall_DropItems(int i, int j, Tile tileCache)
		{
			int num = WorldGen.KillWall_GetItemDrops(tileCache);
			if (WallLoader.Drop(i, j, (int)(*Main.tile[i, j].wall), ref num) && num > 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromWallBreak(i, j), i * 16, j * 16, 16, 16, num, 1, false, 0, false, false);
			}
		}

		// Token: 0x060012DA RID: 4826 RVA: 0x0046B88C File Offset: 0x00469A8C
		private unsafe static int KillWall_GetItemDrops(Tile tileCache)
		{
			switch (*tileCache.wall)
			{
			case 237:
				return 4233;
			case 238:
				return 4234;
			case 239:
				return 4235;
			case 240:
				return 4236;
			case 246:
				return 4486;
			case 247:
				return 4487;
			case 248:
				return 4488;
			case 249:
				return 4489;
			case 250:
				return 4490;
			case 251:
				return 4491;
			case 252:
				return 4492;
			case 253:
				return 4493;
			case 254:
				return 4494;
			case 255:
				return 4495;
			case 256:
				return 4496;
			case 257:
				return 4497;
			case 258:
				return 4498;
			case 259:
				return 4499;
			case 260:
				return 4500;
			case 261:
				return 4501;
			case 262:
				return 4502;
			case 263:
				return 4503;
			case 264:
				return 4504;
			case 265:
				return 4505;
			case 266:
				return 4506;
			case 267:
				return 4507;
			case 268:
				return 4508;
			case 269:
				return 4509;
			case 270:
				return 4510;
			case 271:
				return 4511;
			case 274:
				return 4512;
			case 275:
				return 3273;
			case 276:
				return 4513;
			case 277:
				return 4514;
			case 278:
				return 4515;
			case 279:
				return 4516;
			case 280:
				return 4517;
			case 281:
				return 4518;
			case 282:
				return 4519;
			case 283:
				return 4520;
			case 284:
				return 4521;
			case 285:
				return 4522;
			case 286:
				return 4523;
			case 287:
				return 4524;
			case 288:
				return 4525;
			case 289:
				return 4526;
			case 290:
				return 4527;
			case 291:
				return 4528;
			case 292:
				return 4529;
			case 293:
				return 4530;
			case 294:
				return 4531;
			case 295:
				return 4532;
			case 296:
				return 4533;
			case 297:
				return 4534;
			case 298:
				return 4535;
			case 299:
				return 4536;
			case 300:
				return 4537;
			case 301:
				return 4538;
			case 302:
				return 4539;
			case 303:
				return 4540;
			case 304:
				return 3340;
			case 305:
				return 3341;
			case 306:
				return 3342;
			case 307:
				return 3343;
			case 308:
				return 3344;
			case 309:
				return 3345;
			case 310:
				return 3346;
			case 311:
				return 3348;
			case 314:
				return 4647;
			}
			int result = 0;
			if (*tileCache.wall == 168)
			{
				result = 2696;
			}
			if (*tileCache.wall == 169)
			{
				result = 2698;
			}
			if (*tileCache.wall == 226)
			{
				result = 3752;
			}
			if (*tileCache.wall == 227)
			{
				result = 3753;
			}
			if (*tileCache.wall == 228)
			{
				result = 3760;
			}
			if (*tileCache.wall == 229)
			{
				result = 3761;
			}
			if (*tileCache.wall == 230)
			{
				result = 3762;
			}
			if (*tileCache.wall == 142)
			{
				result = 2263;
			}
			if (*tileCache.wall == 143)
			{
				result = 2264;
			}
			if (*tileCache.wall == 144)
			{
				result = 2271;
			}
			if (*tileCache.wall == 149)
			{
				result = 2505;
			}
			if (*tileCache.wall == 150)
			{
				result = 2507;
			}
			if (*tileCache.wall == 151)
			{
				result = 2506;
			}
			if (*tileCache.wall == 152)
			{
				result = 2508;
			}
			if (*tileCache.wall == 316)
			{
				result = 5216;
			}
			if (*tileCache.wall == 317)
			{
				result = 5217;
			}
			if (*tileCache.wall == 245)
			{
				result = 4424;
			}
			if (*tileCache.wall == 315)
			{
				result = 4667;
			}
			if (*tileCache.wall == 1)
			{
				result = 26;
			}
			if (*tileCache.wall == 4)
			{
				result = 93;
			}
			if (*tileCache.wall == 5)
			{
				result = 130;
			}
			if (*tileCache.wall == 6)
			{
				result = 132;
			}
			if (*tileCache.wall == 7)
			{
				result = 135;
			}
			if (*tileCache.wall == 8)
			{
				result = 138;
			}
			if (*tileCache.wall == 9)
			{
				result = 140;
			}
			if (*tileCache.wall == 10)
			{
				result = 142;
			}
			if (*tileCache.wall == 11)
			{
				result = 144;
			}
			if (*tileCache.wall == 12)
			{
				result = 146;
			}
			if (*tileCache.wall == 14)
			{
				result = 330;
			}
			if (*tileCache.wall == 224)
			{
				result = 3472;
			}
			if (*tileCache.wall == 323)
			{
				result = 5409;
			}
			if (*tileCache.wall == 324)
			{
				result = 5410;
			}
			if (*tileCache.wall == 325)
			{
				result = 5411;
			}
			if (*tileCache.wall == 326)
			{
				result = 5412;
			}
			if (*tileCache.wall == 327)
			{
				result = 5413;
			}
			if (*tileCache.wall == 328)
			{
				result = 5414;
			}
			if (*tileCache.wall == 329)
			{
				result = 5415;
			}
			if (*tileCache.wall == 330)
			{
				result = 5416;
			}
			if (*tileCache.wall == 331)
			{
				result = 5418;
			}
			if (*tileCache.wall == 332)
			{
				result = 5420;
			}
			if (*tileCache.wall == 333)
			{
				result = 5422;
			}
			if (*tileCache.wall == 334)
			{
				result = 5424;
			}
			if (*tileCache.wall == 335)
			{
				result = 5426;
			}
			if (*tileCache.wall == 336)
			{
				result = 5428;
			}
			if (*tileCache.wall == 337)
			{
				result = 5434;
			}
			if (*tileCache.wall == 338)
			{
				result = 5436;
			}
			if (*tileCache.wall == 339)
			{
				result = 5430;
			}
			if (*tileCache.wall == 340)
			{
				result = 5432;
			}
			if (*tileCache.wall == 341)
			{
				result = 5445;
			}
			if (*tileCache.wall == 342)
			{
				result = 5446;
			}
			if (*tileCache.wall == 343)
			{
				result = 5447;
			}
			if (*tileCache.wall == 344)
			{
				result = 5448;
			}
			if (*tileCache.wall == 345)
			{
				result = 5449;
			}
			if (*tileCache.wall == 346)
			{
				result = 5450;
			}
			if (*tileCache.wall == 177)
			{
				result = 3067;
			}
			if (*tileCache.wall == 167)
			{
				result = 2691;
			}
			if (*tileCache.wall == 60)
			{
				result = 3584;
			}
			if (*tileCache.wall == 231)
			{
				result = 3952;
			}
			if (*tileCache.wall == 232)
			{
				result = 3954;
			}
			if (*tileCache.wall == 225)
			{
				result = 3751;
			}
			if (*tileCache.wall == 233)
			{
				result = 3956;
			}
			if (*tileCache.wall == 234)
			{
				result = 4052;
			}
			if (*tileCache.wall == 235)
			{
				result = 4053;
			}
			if (*tileCache.wall == 236)
			{
				result = 4140;
			}
			if (*tileCache.wall == 312)
			{
				result = 4565;
			}
			if (*tileCache.wall == 313)
			{
				result = 4548;
			}
			if (*tileCache.wall == 319)
			{
				result = 5307;
			}
			if (*tileCache.wall == 318)
			{
				result = 5291;
			}
			if (*tileCache.wall == 179)
			{
				result = 3083;
			}
			if (*tileCache.wall == 183)
			{
				result = 3082;
			}
			if (*tileCache.wall == 321)
			{
				result = 5397;
			}
			if (*tileCache.wall == 322)
			{
				result = 5399;
			}
			if (*tileCache.wall == 181)
			{
				result = 3089;
			}
			if (*tileCache.wall == 184)
			{
				result = 3088;
			}
			if (*tileCache.wall == 186)
			{
				result = 3238;
			}
			if (*tileCache.wall == 320)
			{
				result = 5396;
			}
			if (*tileCache.wall >= 153 && *tileCache.wall <= 166)
			{
				switch (*tileCache.wall)
				{
				case 153:
					result = 2677;
					break;
				case 154:
					result = 2679;
					break;
				case 155:
					result = 2681;
					break;
				case 156:
					result = 2683;
					break;
				case 157:
					result = 2678;
					break;
				case 158:
					result = 2680;
					break;
				case 159:
					result = 2682;
					break;
				case 160:
					result = 2684;
					break;
				case 161:
					result = 2686;
					break;
				case 162:
					result = 2688;
					break;
				case 163:
					result = 2690;
					break;
				case 164:
					result = 2685;
					break;
				case 165:
					result = 2687;
					break;
				case 166:
					result = 2689;
					break;
				}
			}
			if (*tileCache.wall == 136)
			{
				result = 2169;
			}
			if (*tileCache.wall == 137)
			{
				result = 2170;
			}
			if (*tileCache.wall == 172)
			{
				result = 2788;
			}
			if (*tileCache.wall == 242)
			{
				result = 4279;
			}
			if (*tileCache.wall == 243)
			{
				result = 4280;
			}
			if (*tileCache.wall == 145)
			{
				result = 2333;
			}
			if (*tileCache.wall == 16)
			{
				result = 30;
			}
			if (*tileCache.wall == 17)
			{
				result = 135;
			}
			if (*tileCache.wall == 18)
			{
				result = 138;
			}
			if (*tileCache.wall == 19)
			{
				result = 140;
			}
			if (*tileCache.wall == 20)
			{
				result = 330;
			}
			if (*tileCache.wall == 21)
			{
				result = 392;
			}
			if (*tileCache.wall == 86 || *tileCache.wall == 108)
			{
				result = 1126;
			}
			if (*tileCache.wall == 173)
			{
				result = 2789;
			}
			if (*tileCache.wall == 174)
			{
				result = 2790;
			}
			if (*tileCache.wall == 175)
			{
				result = 2791;
			}
			if (*tileCache.wall == 176)
			{
				result = 2861;
			}
			if (*tileCache.wall == 182)
			{
				result = 3101;
			}
			if (*tileCache.wall == 133)
			{
				result = 2158;
			}
			if (*tileCache.wall == 134)
			{
				result = 2159;
			}
			if (*tileCache.wall == 135)
			{
				result = 2160;
			}
			else if (*tileCache.wall == 113)
			{
				result = 1726;
			}
			else if (*tileCache.wall == 114)
			{
				result = 1728;
			}
			else if (*tileCache.wall == 115)
			{
				result = 1730;
			}
			else if (*tileCache.wall == 146)
			{
				result = 2432;
			}
			else if (*tileCache.wall == 147)
			{
				result = 2433;
			}
			else if (*tileCache.wall == 148)
			{
				result = 2434;
			}
			if (*tileCache.wall >= 116 && *tileCache.wall <= 125)
			{
				result = (int)(1948 + *tileCache.wall - 116);
			}
			if (*tileCache.wall >= 126 && *tileCache.wall <= 132)
			{
				result = (int)(2008 + *tileCache.wall - 126);
			}
			if (*tileCache.wall == 22)
			{
				result = 417;
			}
			if (*tileCache.wall == 23)
			{
				result = 418;
			}
			if (*tileCache.wall == 24)
			{
				result = 419;
			}
			if (*tileCache.wall == 25)
			{
				result = 420;
			}
			if (*tileCache.wall == 26)
			{
				result = 421;
			}
			if (*tileCache.wall == 29)
			{
				result = 587;
			}
			if (*tileCache.wall == 30)
			{
				result = 592;
			}
			if (*tileCache.wall == 31)
			{
				result = 595;
			}
			if (*tileCache.wall == 32)
			{
				result = 605;
			}
			if (*tileCache.wall == 33)
			{
				result = 606;
			}
			if (*tileCache.wall == 34)
			{
				result = 608;
			}
			if (*tileCache.wall == 35)
			{
				result = 610;
			}
			if (*tileCache.wall == 36)
			{
				result = 615;
			}
			if (*tileCache.wall == 37)
			{
				result = 616;
			}
			if (*tileCache.wall == 38)
			{
				result = 617;
			}
			if (*tileCache.wall == 39)
			{
				result = 618;
			}
			if (*tileCache.wall == 41)
			{
				result = 622;
			}
			if (*tileCache.wall == 42)
			{
				result = 623;
			}
			if (*tileCache.wall == 43)
			{
				result = 624;
			}
			if (*tileCache.wall == 44)
			{
				result = 663;
			}
			if (*tileCache.wall == 45)
			{
				result = 720;
			}
			if (*tileCache.wall == 46)
			{
				result = 721;
			}
			if (*tileCache.wall == 47)
			{
				result = 722;
			}
			if (*tileCache.wall == 66)
			{
				result = 745;
			}
			if (*tileCache.wall == 67)
			{
				result = 746;
			}
			if (*tileCache.wall == 68)
			{
				result = 747;
			}
			if (*tileCache.wall == 84)
			{
				result = 884;
			}
			if (*tileCache.wall == 72)
			{
				result = 750;
			}
			if (*tileCache.wall == 73)
			{
				result = 752;
			}
			if (*tileCache.wall == 74)
			{
				result = 764;
			}
			if (*tileCache.wall == 85)
			{
				result = 927;
			}
			if (*tileCache.wall == 75)
			{
				result = 768;
			}
			if (*tileCache.wall == 76)
			{
				result = 769;
			}
			if (*tileCache.wall == 77)
			{
				result = 770;
			}
			if (*tileCache.wall == 82)
			{
				result = 825;
			}
			if (*tileCache.wall == 27)
			{
				result = 479;
			}
			if (*tileCache.wall == 106)
			{
				result = 1447;
			}
			if (*tileCache.wall == 107)
			{
				result = 1448;
			}
			if (*tileCache.wall == 109)
			{
				result = 1590;
			}
			if (*tileCache.wall == 110)
			{
				result = 1592;
			}
			if (*tileCache.wall == 111)
			{
				result = 1594;
			}
			if (*tileCache.wall == 78)
			{
				result = 1723;
			}
			if (*tileCache.wall == 87 || *tileCache.wall == 112)
			{
				result = 1102;
			}
			if (*tileCache.wall == 94 || *tileCache.wall == 100)
			{
				result = 1378;
			}
			if (*tileCache.wall == 95 || *tileCache.wall == 101)
			{
				result = 1379;
			}
			if (*tileCache.wall == 96 || *tileCache.wall == 102)
			{
				result = 1380;
			}
			if (*tileCache.wall == 97 || *tileCache.wall == 103)
			{
				result = 1381;
			}
			if (*tileCache.wall == 98 || *tileCache.wall == 104)
			{
				result = 1382;
			}
			if (*tileCache.wall == 99 || *tileCache.wall == 105)
			{
				result = 1383;
			}
			if (*tileCache.wall == 241)
			{
				result = 4260;
			}
			if (*tileCache.wall >= 88 && *tileCache.wall <= 93)
			{
				result = (int)(1267 + *tileCache.wall - 88);
			}
			if (*tileCache.wall >= 138 && *tileCache.wall <= 141)
			{
				result = (int)(2210 + *tileCache.wall - 138);
			}
			return result;
		}

		// Token: 0x060012DB RID: 4827 RVA: 0x0046C938 File Offset: 0x0046AB38
		private unsafe static void KillWall_MakeWallDust(int i, int j, Tile tileCache)
		{
			int num = 0;
			ushort num3 = *tileCache.wall;
			switch (num3)
			{
			case 3:
			case 246:
				num = ((WorldGen.genRand.Next(2) != 0) ? 1 : 14);
				goto IL_6C0;
			case 4:
			case 5:
			case 6:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 16:
			case 20:
			case 21:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 39:
			case 41:
			case 42:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 60:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 80:
			case 82:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 186:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 235:
			case 236:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 272:
			case 273:
				goto IL_6C0;
			case 7:
			case 17:
			case 94:
			case 95:
			case 100:
			case 101:
				break;
			case 8:
			case 18:
			case 98:
			case 99:
			case 104:
			case 105:
				goto IL_52F;
			case 9:
			case 19:
			case 96:
			case 97:
			case 102:
			case 103:
				goto IL_53A;
			case 15:
			case 247:
				num = 38;
				goto IL_6C0;
			case 22:
			case 28:
			case 248:
				num = 51;
				goto IL_6C0;
			case 40:
			case 249:
				num = 51;
				goto IL_6C0;
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 185:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 274:
			case 314:
				num = 1;
				goto IL_6C0;
			case 59:
			case 61:
			case 261:
			case 262:
				num = 0;
				goto IL_6C0;
			case 62:
			case 263:
				num = 0;
				goto IL_6C0;
			case 69:
			case 264:
				num = ((WorldGen.genRand.Next(2) != 0) ? 17 : 14);
				goto IL_6C0;
			case 70:
			case 265:
				num = 47;
				goto IL_6C0;
			case 71:
			case 266:
				num = 80;
				goto IL_6C0;
			case 79:
			case 267:
				num = 37;
				goto IL_6C0;
			case 81:
			case 268:
				num = 123;
				goto IL_6C0;
			case 83:
			case 234:
			case 269:
				num = ((WorldGen.genRand.Next(2) == 0) ? 1 : 117);
				goto IL_6C0;
			case 170:
			case 171:
			case 270:
			case 271:
				num = 0;
				goto IL_6C0;
			case 187:
			case 275:
				num = 0;
				goto IL_6C0;
			case 188:
			case 189:
			case 190:
			case 191:
			case 276:
			case 277:
			case 278:
			case 279:
				num = 37;
				goto IL_6C0;
			case 192:
			case 193:
			case 194:
			case 195:
			case 280:
			case 281:
			case 282:
			case 283:
				num = 117;
				goto IL_6C0;
			case 196:
			case 197:
			case 198:
			case 199:
			case 284:
			case 285:
			case 286:
			case 287:
				num = 0;
				goto IL_6C0;
			case 200:
			case 202:
			case 288:
			case 290:
				num = ((WorldGen.genRand.Next(2) != 0) ? 70 : 69);
				goto IL_6C0;
			case 201:
			case 289:
				num = 17;
				goto IL_6C0;
			case 203:
			case 291:
				num = ((WorldGen.genRand.Next(2) != 0) ? 68 : 69);
				goto IL_6C0;
			case 204:
			case 205:
			case 207:
			case 292:
			case 293:
			case 295:
				num = 0;
				goto IL_6C0;
			case 206:
			case 294:
				num = 1;
				goto IL_6C0;
			case 208:
			case 209:
			case 210:
			case 211:
			case 296:
			case 297:
			case 298:
			case 299:
				num = ((WorldGen.genRand.Next(2) != 0) ? 125 : 155);
				goto IL_6C0;
			case 212:
			case 213:
			case 214:
			case 215:
			case 300:
			case 301:
			case 302:
			case 303:
				num = 1;
				goto IL_6C0;
			case 216:
			case 304:
				num = 0;
				goto IL_6C0;
			case 217:
			case 305:
				num = 37;
				goto IL_6C0;
			case 218:
			case 306:
				num = 155;
				goto IL_6C0;
			case 219:
			case 307:
				num = 17;
				goto IL_6C0;
			case 220:
			case 308:
				num = 37;
				goto IL_6C0;
			case 221:
			case 309:
				num = 155;
				goto IL_6C0;
			case 222:
			case 310:
				num = 37;
				goto IL_6C0;
			case 223:
			case 311:
				num = 0;
				goto IL_6C0;
			case 231:
				num = 8;
				goto IL_6C0;
			case 232:
				num = 82;
				goto IL_6C0;
			case 233:
				num = 18;
				goto IL_6C0;
			case 237:
				num = 6;
				goto IL_6C0;
			case 238:
				num = 61;
				goto IL_6C0;
			case 239:
				num = 242;
				goto IL_6C0;
			case 240:
				num = 135;
				goto IL_6C0;
			case 312:
			case 313:
			case 315:
				num = -1;
				goto IL_6C0;
			case 316:
			case 317:
				num = 36;
				goto IL_6C0;
			default:
				switch (num3)
				{
				case 331:
					break;
				case 332:
					goto IL_52F;
				case 333:
					goto IL_53A;
				default:
					goto IL_6C0;
				}
				break;
			}
			num = 275;
			goto IL_6C0;
			IL_52F:
			num = 276;
			goto IL_6C0;
			IL_53A:
			num = 277;
			IL_6C0:
			if (*tileCache.wall == 148)
			{
				num = -1;
			}
			if (*tileCache.wall == 1 || *tileCache.wall == 5 || *tileCache.wall == 6 || *tileCache.wall == 107)
			{
				num = 1;
			}
			if (*tileCache.wall == 35)
			{
				num = 37;
			}
			if (*tileCache.wall == 4 || *tileCache.wall == 106)
			{
				num = 7;
			}
			if (*tileCache.wall == 12)
			{
				num = 9;
			}
			if (*tileCache.wall == 336)
			{
				num = 9;
			}
			if (*tileCache.wall == 10)
			{
				num = 10;
			}
			if (*tileCache.wall == 334)
			{
				num = 10;
			}
			if (*tileCache.wall == 11)
			{
				num = 11;
			}
			if (*tileCache.wall == 335)
			{
				num = 11;
			}
			if (*tileCache.wall == 21)
			{
				num = 13;
			}
			if (*tileCache.wall == 34)
			{
				num = 32;
			}
			if (*tileCache.wall == 225)
			{
				num = 1;
			}
			if (*tileCache.wall == 145)
			{
				num = 8;
			}
			if (*tileCache.wall == 23)
			{
				num = 38;
			}
			if (*tileCache.wall == 24)
			{
				num = 36;
			}
			if (*tileCache.wall == 25 || *tileCache.wall == 339)
			{
				num = 48;
			}
			if (*tileCache.wall == 179 || *tileCache.wall == 178 || *tileCache.wall == 183)
			{
				num = 236;
			}
			if (*tileCache.wall == 181 || *tileCache.wall == 180 || *tileCache.wall == 184)
			{
				num = 240;
			}
			if (*tileCache.wall == 113)
			{
				num = 189;
			}
			if (*tileCache.wall == 114)
			{
				num = 190;
			}
			if (*tileCache.wall == 115)
			{
				num = 191;
			}
			if (*tileCache.wall == 177 || *tileCache.wall == 13 || *tileCache.wall == 338)
			{
				num = 25;
			}
			if (*tileCache.wall == 186)
			{
				num = WorldGen.genRand.Next(68, 71);
			}
			if (*tileCache.wall == 319)
			{
				num = 171;
			}
			if (*tileCache.wall == 321)
			{
				num = 308;
			}
			if (*tileCache.wall == 322)
			{
				num = 308;
			}
			if (*tileCache.wall == 318)
			{
				num = 226;
			}
			if (*tileCache.wall == 142)
			{
				num = 210;
			}
			if (*tileCache.wall == 143)
			{
				num = 210;
			}
			if (*tileCache.wall == 224)
			{
				num = 265;
			}
			if (*tileCache.wall == 323)
			{
				num = 314;
			}
			if (*tileCache.wall == 324)
			{
				num = 315;
			}
			if (*tileCache.wall == 325)
			{
				num = 316;
			}
			if (*tileCache.wall == 326)
			{
				num = 317;
			}
			if (*tileCache.wall == 327)
			{
				num = 318;
			}
			if (*tileCache.wall == 328)
			{
				num = 319;
			}
			if (*tileCache.wall == 329)
			{
				num = 320;
			}
			if (*tileCache.wall == 330)
			{
				num = 321;
			}
			if (*tileCache.wall == 320)
			{
				num = 0;
			}
			if (*tileCache.wall == 341)
			{
				num = 258;
			}
			if (*tileCache.wall == 342)
			{
				num = 301;
			}
			if (*tileCache.wall == 343)
			{
				num = 299;
			}
			if (*tileCache.wall == 344)
			{
				num = 300;
			}
			if (*tileCache.wall == 345)
			{
				num = 305;
			}
			if (*tileCache.wall == 173)
			{
				num = 128;
			}
			if (*tileCache.wall == 174)
			{
				num = 117;
			}
			if (*tileCache.wall == 175)
			{
				num = 42;
			}
			if (*tileCache.wall == 176)
			{
				num = 226;
			}
			if (*tileCache.wall == 182)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 23 : 6);
			}
			if (*tileCache.wall >= 153 && *tileCache.wall <= 166)
			{
				switch (*tileCache.wall)
				{
				case 153:
				case 157:
					num = 138;
					break;
				case 154:
				case 158:
					num = 86;
					break;
				case 155:
				case 159:
					num = 91;
					break;
				case 156:
				case 160:
					num = 89;
					break;
				case 161:
				case 164:
					num = 90;
					break;
				case 162:
				case 165:
					num = 88;
					break;
				case 163:
				case 166:
					num = 87;
					break;
				}
			}
			if (*tileCache.wall == 26 || *tileCache.wall == 30 || *tileCache.wall == 340)
			{
				num = 49;
			}
			if (*tileCache.wall == 29 || *tileCache.wall == 32)
			{
				num = 50;
			}
			if (*tileCache.wall == 31)
			{
				num = 51;
			}
			if (*tileCache.wall == 14 || *tileCache.wall == 20 || *tileCache.wall == 337)
			{
				num = 109;
			}
			if (*tileCache.wall == 241)
			{
				num = 286;
			}
			if (*tileCache.wall >= 88 && *tileCache.wall <= 93)
			{
				num = (int)(86 + *tileCache.wall - 88);
				if (*tileCache.wall == 93)
				{
					num = WorldGen.genRand.Next(88, 94);
				}
			}
			if (*tileCache.wall == 33)
			{
				num = 14;
			}
			if (*tileCache.wall == 41)
			{
				num = 77;
			}
			if (*tileCache.wall == 42)
			{
				num = 78;
			}
			if (*tileCache.wall == 43)
			{
				num = 78;
			}
			if (*tileCache.wall == 36)
			{
				num = 26;
			}
			if (*tileCache.wall == 37)
			{
				num = 32;
			}
			if (*tileCache.wall == 38)
			{
				num = 2;
			}
			if (*tileCache.wall == 39)
			{
				num = 1;
			}
			if (*tileCache.wall == 45)
			{
				num = 81;
			}
			if (*tileCache.wall == 46)
			{
				num = 83;
			}
			if (*tileCache.wall == 47)
			{
				num = 84;
			}
			if (*tileCache.wall == 85)
			{
				num = 126;
			}
			if (*tileCache.wall == 63)
			{
				num = 3;
			}
			if (*tileCache.wall == 65)
			{
				num = 3;
			}
			if (*tileCache.wall == 66)
			{
				num = 3;
			}
			if (*tileCache.wall == 68)
			{
				num = 3;
			}
			if (*tileCache.wall == 64)
			{
				num = 40;
			}
			if (*tileCache.wall == 67)
			{
				num = 40;
			}
			if (*tileCache.wall == 84)
			{
				num = 80;
			}
			if (*tileCache.wall == 60)
			{
				num = 3;
			}
			if (*tileCache.wall == 167)
			{
				num = 81;
			}
			if (*tileCache.wall == 147)
			{
				num = 51;
			}
			if (*tileCache.wall == 146)
			{
				num = 9;
			}
			if (*tileCache.wall == 109)
			{
				num = 144;
			}
			if (*tileCache.wall == 110)
			{
				num = 145;
			}
			if (*tileCache.wall == 111)
			{
				num = 146;
			}
			if (*tileCache.wall == 86 || *tileCache.wall == 108)
			{
				num = 147;
			}
			if (*tileCache.wall == 87)
			{
				num = 148;
			}
			if (*tileCache.wall == 136)
			{
				num = 13;
			}
			if (*tileCache.wall == 137)
			{
				num = 13;
			}
			if (*tileCache.wall == 168)
			{
				num = 13;
			}
			if (*tileCache.wall == 169)
			{
				num = 13;
			}
			if (*tileCache.wall == 172)
			{
				num = 13;
			}
			if (*tileCache.wall == 226)
			{
				num = 13;
			}
			if (*tileCache.wall == 227)
			{
				num = 13;
			}
			if (*tileCache.wall == 242)
			{
				num = 13;
			}
			if (*tileCache.wall == 243)
			{
				num = 13;
			}
			if (*tileCache.wall == 72)
			{
				num = 40;
			}
			if (*tileCache.wall == 73)
			{
				num = 16;
			}
			if (*tileCache.wall == 74 || *tileCache.wall == 80)
			{
				num = 26;
			}
			if (*tileCache.wall == 144)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 118 : 10);
			}
			if (*tileCache.wall == 75)
			{
				num = 26;
			}
			if (*tileCache.wall == 76)
			{
				num = 4;
			}
			if (*tileCache.wall == 77 || *tileCache.wall == 81)
			{
				num = 5;
			}
			if (*tileCache.wall == 78 || *tileCache.wall == 244)
			{
				num = 7;
			}
			if (*tileCache.wall == 82)
			{
				num = 36;
			}
			if (*tileCache.wall == 27)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 1 : 7);
			}
			if (*tileCache.wall == 138)
			{
				num = 77;
			}
			if (*tileCache.wall == 139)
			{
				num = 78;
			}
			if (*tileCache.wall == 140)
			{
				num = 79;
			}
			if (*tileCache.wall == 141)
			{
				num = 126;
			}
			if (*tileCache.wall == 149 || *tileCache.wall == 150)
			{
				num = 214;
			}
			if (*tileCache.wall == 151 || *tileCache.wall == 152)
			{
				num = 215;
			}
			if (*tileCache.wall == 245)
			{
				num = 195;
			}
			ModWall modWall = WallLoader.GetWall((int)(*tileCache.wall));
			if (modWall != null)
			{
				num = modWall.DustType;
			}
			if (!WallLoader.CreateDust(i, j, (int)(*tileCache.wall), ref num))
			{
				return;
			}
			if (*tileCache.wall == 44 || *tileCache.wall == 346)
			{
				int num2 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
				Main.dust[num2].noGravity = true;
				return;
			}
			if ((*tileCache.wall < 133 || *tileCache.wall > 135) && (*tileCache.wall < 116 || *tileCache.wall > 125) && (*tileCache.wall < 126 || *tileCache.wall > 132))
			{
				if (*tileCache.wall == 76)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(0, 80, 255, 100), 0.75f);
					return;
				}
				if (num >= 0)
				{
					Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
				}
			}
		}

		// Token: 0x060012DC RID: 4828 RVA: 0x0046DB14 File Offset: 0x0046BD14
		public unsafe static void LaunchRocket(int x, int y, bool fromWiring)
		{
			int num = (int)(*Main.tile[x, y].frameY);
			int num2 = 0;
			while (num >= 40)
			{
				num -= 40;
				num2++;
			}
			if (num == 18)
			{
				y--;
			}
			Vector2 vector;
			vector..ctor((float)(x * 16 + 8), (float)(y * 16 + 4));
			int type = 167 + num2;
			int damage = 150;
			int num3 = 7;
			int num4 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWiring, Main.LocalPlayer), vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num3, Main.myPlayer, 0f, 0f, 0f);
			Main.projectile[num4].originatedFromActivableTile = true;
			Main.tile[x, y].active(false);
			Main.tile[x, y + 1].active(false);
			NetMessage.SendTileSquare(-1, x, y, 1, 2, TileChangeType.None);
		}

		// Token: 0x060012DD RID: 4829 RVA: 0x0046DC0C File Offset: 0x0046BE0C
		public unsafe static void LaunchRocketSmall(int x, int y, bool fromWiring)
		{
			if (*Main.tile[x, y].frameX == 18)
			{
				x--;
			}
			if (*Main.tile[x, y].frameY == 18)
			{
				y--;
			}
			Vector2 vector;
			vector..ctor((float)(x * 16 + 16), (float)(y * 16));
			int type = 415 + Main.rand.Next(4);
			int damage = 0;
			int num = 0;
			int num2 = Projectile.NewProjectile(WorldGen.GetProjectileSource_PlayerOrWires(x, y, fromWiring, Main.LocalPlayer), vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num, Main.myPlayer, 0f, 0f, 0f);
			Main.projectile[num2].originatedFromActivableTile = true;
		}

		// Token: 0x060012DE RID: 4830 RVA: 0x0046DCD8 File Offset: 0x0046BED8
		public unsafe static bool CanKillTile(int i, int j, WorldGen.SpecialKillTileContext context)
		{
			if (context == WorldGen.SpecialKillTileContext.MowingTheGrass)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return false;
				}
				if (*tile.type == 2 || *tile.type == 109)
				{
					return true;
				}
			}
			return WorldGen.CanKillTile(i, j);
		}

		// Token: 0x060012DF RID: 4831 RVA: 0x0046DD24 File Offset: 0x0046BF24
		public static bool CanKillTile(int i, int j)
		{
			bool blockDamaged;
			return WorldGen.CanKillTile(i, j, out blockDamaged);
		}

		// Token: 0x060012E0 RID: 4832 RVA: 0x0046DD3C File Offset: 0x0046BF3C
		public unsafe static bool CanKillTile(int i, int j, out bool blockDamaged)
		{
			blockDamaged = false;
			if (i < 0 || j < 0 || i >= Main.maxTilesX || j >= Main.maxTilesY)
			{
				return false;
			}
			Tile tile = Main.tile[i, j];
			Tile tile2 = default(Tile);
			if (tile == null)
			{
				return false;
			}
			if (!tile.active())
			{
				return false;
			}
			if (!TileLoader.CanKillTile(i, j, (int)(*tile.type), ref blockDamaged))
			{
				return false;
			}
			if (j >= 1)
			{
				tile2 = Main.tile[i, j - 1];
			}
			if (tile2 != null && tile2.active())
			{
				int type = (int)(*tile2.type);
				if (TileID.Sets.IsATreeTrunk[type] && (int)(*tile.type) != type && (*tile2.frameX != 66 || *tile2.frameY < 0 || *tile2.frameY > 44) && (*tile2.frameX != 88 || *tile2.frameY < 66 || *tile2.frameY > 110) && *tile2.frameY < 198)
				{
					return false;
				}
				int num3 = type;
				if (num3 <= 77)
				{
					if (num3 <= 26)
					{
						if (num3 == 21 || num3 == 26)
						{
							goto IL_18A;
						}
					}
					else if (num3 == 72 || num3 == 77)
					{
						goto IL_18A;
					}
				}
				else if (num3 <= 323)
				{
					if (num3 == 88)
					{
						goto IL_18A;
					}
					if (num3 == 323)
					{
						if ((int)(*tile.type) != type && (*tile2.frameX == 66 || *tile2.frameX == 220))
						{
							return false;
						}
						goto IL_1BD;
					}
				}
				else if (num3 == 467 || num3 == 488)
				{
					goto IL_18A;
				}
				if (!TileID.Sets.BasicDresser[type] && !TileID.Sets.BasicChest[type])
				{
					if (num3 != 80)
					{
						goto IL_1BD;
					}
					if ((int)(*tile.type) == type)
					{
						goto IL_1BD;
					}
					int num = (int)(*tile2.frameX / 18);
					if (num <= 1 || num - 4 <= 1)
					{
						return false;
					}
					goto IL_1BD;
				}
				IL_18A:
				if ((int)(*tile.type) != type)
				{
					return false;
				}
			}
			IL_1BD:
			if (TileID.Sets.Boulders[(int)(*tile.type)] && WorldGen.CheckBoulderChest(i, j))
			{
				blockDamaged = true;
				return false;
			}
			ushort t = *tile.type;
			if (t != 10)
			{
				if (t != 235)
				{
					if (TileID.Sets.BasicChest[(int)t])
					{
						if (!Chest.CanDestroyChest(i - (int)(*tile.frameX / 18 % 2), j - (int)(*tile.frameY / 18)))
						{
							return false;
						}
					}
					else
					{
						ushort t2 = t;
						if (TileID.Sets.BasicDresser[(int)t2] && !Chest.CanDestroyChest(i - (int)(*tile.frameX / 18 % 3), j - (int)(*tile.frameY / 18)))
						{
							return false;
						}
					}
				}
				else
				{
					int num2 = i - (int)(*tile.frameX % 54 / 18);
					for (int k = 0; k < 3; k++)
					{
						Tile tile3 = Main.tile[num2 + k, j - 1];
						if (tile3.active() && WorldGen.IsAContainer(tile3))
						{
							blockDamaged = true;
							return false;
						}
					}
				}
			}
			else if (WorldGen.IsLockedDoor(tile))
			{
				blockDamaged = true;
				return false;
			}
			return true;
		}

		// Token: 0x060012E1 RID: 4833 RVA: 0x0046E004 File Offset: 0x0046C204
		public unsafe static bool IsTileReplacable(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (y >= 1)
			{
				Tile tile2 = Main.tile[x, y - 1];
				if (tile == null || tile2 == null)
				{
					return false;
				}
				if (tile2.active())
				{
					if (*tile2.type == 80)
					{
						return false;
					}
					if (*tile2.type == 488)
					{
						return false;
					}
					if (TileID.Sets.PreventsTileReplaceIfOnTopOfIt[(int)(*tile2.type)] && *tile.type != *tile2.type)
					{
						if (TileID.Sets.IsATreeTrunk[(int)(*tile2.type)])
						{
							return (*tile2.frameX == 66 && *tile2.frameY >= 0 && *tile2.frameY <= 44) || (*tile2.frameX == 88 && *tile2.frameY >= 66 && *tile2.frameY <= 110) || *tile2.frameY >= 198;
						}
						return *tile2.type == 323 && *tile2.frameX != 66 && *tile2.frameX != 220;
					}
				}
			}
			return true;
		}

		// Token: 0x060012E2 RID: 4834 RVA: 0x0046E138 File Offset: 0x0046C338
		public unsafe static int CheckTileBreakability(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			Tile tile = Main.tile[x, y];
			if (y >= 1 && y <= Main.maxTilesY - 1)
			{
				if (Main.tile[x, y - 1] == null)
				{
					Main.tile[x, y - 1] = default(Tile);
				}
				if (Main.tile[x, y + 1] == null)
				{
					Main.tile[x, y + 1] = default(Tile);
				}
				Tile tile2 = Main.tile[x, y - 1];
				Tile tile3 = Main.tile[x, y + 1];
				if (tile3 != null && tile3.active() && WorldGen.IsLockedDoor(x, y + 1))
				{
					return 2;
				}
				if (!Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
				{
					return 0;
				}
				if (tile2.active())
				{
					if ((TileID.Sets.PreventsTileRemovalIfOnTopOfIt[(int)(*tile2.type)] && *tile.type != *tile2.type) | WorldGen.IsLockedDoor(x, y - 1) | (*tile2.type == 77 && *tile.type != 77 && !Main.hardMode) | (WorldGen.IsAContainer(tile2) && !WorldGen.IsAContainer(tile)))
					{
						if (TileID.Sets.IsATreeTrunk[(int)(*tile2.type)])
						{
							if ((*tile2.frameX == 66 && *tile2.frameY >= 0 && *tile2.frameY <= 44) || (*tile2.frameX == 88 && *tile2.frameY >= 66 && *tile2.frameY <= 110) || *tile2.frameY >= 198)
							{
								return 0;
							}
							return 2;
						}
						else
						{
							if (*tile2.type != 323)
							{
								return 2;
							}
							if (*tile2.frameX == 66 || *tile2.frameX == 220)
							{
								return 2;
							}
							return 0;
						}
					}
					else
					{
						if (*tile2.type == 80 && *tile2.type != *tile.type)
						{
							int num = (int)(*tile2.frameX / 18);
							if (num <= 1 || num - 4 <= 1)
							{
								return 2;
							}
						}
						if (*tile.type == 10 && WorldGen.IsLockedDoor(tile))
						{
							return 1;
						}
						if (TileID.Sets.Boulders[(int)(*tile.type)])
						{
							if (WorldGen.CheckBoulderChest(x, y))
							{
								return 1;
							}
							return 0;
						}
					}
				}
				if (*tile.type == 235)
				{
					int frameX = (int)(*tile.frameX);
					int num2 = x - frameX % 54 / 18;
					for (int i = 0; i < 3; i++)
					{
						if (Main.tile[num2 + i, y - 1].active() && WorldGen.IsAContainer(Main.tile[num2 + i, y - 1]))
						{
							return 2;
						}
					}
				}
			}
			return 0;
		}

		// Token: 0x060012E3 RID: 4835 RVA: 0x0046E438 File Offset: 0x0046C638
		public unsafe static bool CheckTileBreakability2_ShouldTileSurvive(int x, int y)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			Tile tile = Main.tile[x, y];
			if (TileID.Sets.BasicChest[(int)(*tile.type)])
			{
				int num = (int)(*tile.frameX / 18);
				int y2 = y - (int)(*tile.frameY / 18);
				while (num > 1)
				{
					num -= 2;
				}
				num = x - num;
				if (!Chest.DestroyChest(num, y2))
				{
					return true;
				}
			}
			if (TileID.Sets.BasicDresser[(int)(*tile.type)])
			{
				int num2 = (int)(*tile.frameX / 18);
				int y3 = y - (int)(*tile.frameY / 18);
				num2 %= 3;
				num2 = x - num2;
				if (!Chest.DestroyChest(num2, y3))
				{
					return true;
				}
			}
			if (*tile.type == 470)
			{
				return !TEDisplayDoll.IsBreakable(x, y);
			}
			return *tile.type == 475 && !TEHatRack.IsBreakable(x, y);
		}

		// Token: 0x060012E4 RID: 4836 RVA: 0x0046E544 File Offset: 0x0046C744
		public unsafe static bool ReplaceWall(int x, int y, ushort targetWall)
		{
			if ((int)targetWall >= WallLoader.WallCount)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (*tile.wall == 0 || targetWall == 0)
			{
				return false;
			}
			if (WorldGen.KillWall_CheckFailure(false, tile))
			{
				return false;
			}
			int num = 10;
			for (int i = 0; i < num; i++)
			{
				WorldGen.KillWall_MakeWallDust(x, y, tile);
			}
			WorldGen.KillWall_PlaySounds(x, y, tile, false);
			WorldGen.KillWall_DropItems(x, y, tile);
			*tile.wall = targetWall;
			tile.ClearWallPaintAndCoating();
			WorldGen.SquareWallFrame(x, y, true);
			return true;
		}

		// Token: 0x060012E5 RID: 4837 RVA: 0x0046E5C4 File Offset: 0x0046C7C4
		public static bool ReplaceTile(int x, int y, ushort targetType, int targetStyle)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (!WorldGen.WouldTileReplacementWork(targetType, x, y))
			{
				return false;
			}
			if (!WorldGen.IsTileReplacable(x, y))
			{
				return false;
			}
			WorldGen.MoveReplaceTileAnchor(ref x, ref y, targetType, tileSafely);
			int num = WorldGen.KillTile_GetTileDustAmount(false, tileSafely, x, y);
			for (int i = 0; i < num; i++)
			{
				WorldGen.KillTile_MakeTileDust(x, y, tileSafely);
			}
			WorldGen.KillTile_PlaySounds(x, y, false, tileSafely);
			WorldGen.KillTile_DropItems(x, y, tileSafely, true, false);
			WorldGen.AttemptFossilShattering(x, y, tileSafely, false);
			WorldGen.ReplaceTIle_DoActualReplacement(targetType, targetStyle, x, y, tileSafely);
			return true;
		}

		// Token: 0x060012E6 RID: 4838 RVA: 0x0046E644 File Offset: 0x0046C844
		private static void ReplaceTIle_DoActualReplacement(ushort targetType, int targetStyle, int topLeftX, int topLeftY, Tile t)
		{
			if (TileID.Sets.BasicChest[(int)targetType])
			{
				if (WorldGen.IsChestRigged(topLeftX, topLeftY) && Main.netMode != 1)
				{
					Wiring.HitSwitch(topLeftX, topLeftY);
					NetMessage.SendData(59, -1, -1, null, topLeftX, (float)topLeftY, 0f, 0f, 0, 0, 0);
				}
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 2, 2);
				return;
			}
			if (TileID.Sets.BasicDresser[(int)targetType])
			{
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 3, 2);
				return;
			}
			if (TileID.Sets.Campfire[(int)targetType])
			{
				WorldGen.ReplaceTile_DoActualReplacement_Area(targetType, targetStyle, topLeftX, topLeftY, 3, 2);
				return;
			}
			WorldGen.ReplaceTile_DoActualReplacement_Single(targetType, targetStyle, topLeftX, topLeftY, t);
		}

		// Token: 0x060012E7 RID: 4839 RVA: 0x0046E6D0 File Offset: 0x0046C8D0
		private unsafe static void ReplaceTile_DoActualReplacement_Single(ushort targetType, int targetStyle, int topLeftX, int topLeftY, Tile t)
		{
			WorldGen.ReplaceTile_EliminateNaturalExtras(topLeftX, topLeftY);
			int type = (int)(*t.type);
			*t.type = targetType;
			if (TileID.Sets.Platforms[(int)(*t.type)])
			{
				*t.frameY = (short)(targetStyle * 18);
			}
			if (TileID.Sets.Torch[(int)(*t.type)])
			{
				*t.frameY = (short)(targetStyle * 22);
			}
			t.ClearBlockPaintAndCoating();
			bool flag = !WorldGen.CanPoundTile(topLeftX, topLeftY);
			if (TileID.Sets.Platforms[type] && TileID.Sets.Platforms[(int)(*t.type)])
			{
				flag = false;
			}
			if (flag)
			{
				t.slope(0);
				t.halfBrick(false);
			}
			if (Main.tenthAnniversaryWorld && !Main.remixWorld && (targetType == 53 || targetType == 396 || targetType == 397))
			{
				t.color(7);
			}
			WorldGen.TileFrame(topLeftX, topLeftY, false, false);
			WorldGen.SquareTileFrame(topLeftX, topLeftY, true);
		}

		// Token: 0x060012E8 RID: 4840 RVA: 0x0046E7AC File Offset: 0x0046C9AC
		private unsafe static void ReplaceTile_EliminateNaturalExtras(int x, int y)
		{
			if (WorldGen.InWorld(x, y, 2))
			{
				if (Main.tile[x, y - 1] != null && Main.tile[x, y - 1].active() && (TileID.Sets.ReplaceTileBreakUp[(int)(*Main.tile[x, y - 1].type)] || (*Main.tile[x, y - 1].type == 165 && (*Main.tile[x, y - 1].frameY == 36 || *Main.tile[x, y - 1].frameY == 54 || *Main.tile[x, y - 1].frameY == 90))))
				{
					WorldGen.KillTile(x, y - 1, false, false, false);
				}
				if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].active() && (TileID.Sets.ReplaceTileBreakDown[(int)(*Main.tile[x, y + 1].type)] || (*Main.tile[x, y + 1].type == 165 && (*Main.tile[x, y + 1].frameY == 0 || *Main.tile[x, y + 1].frameY == 18 || *Main.tile[x, y + 1].frameY == 72))))
				{
					WorldGen.KillTile(x, y + 1, false, false, false);
				}
			}
		}

		// Token: 0x060012E9 RID: 4841 RVA: 0x0046E960 File Offset: 0x0046CB60
		private unsafe static void ReplaceTile_DoActualReplacement_Area(ushort targetType, int targetStyle, int topLeftX, int topLeftY, int areaSizeX, int areaSizeY)
		{
			for (int i = 0; i < areaSizeX; i++)
			{
				for (int j = 0; j < areaSizeY; j++)
				{
					Tile tile = Main.tile[topLeftX + i, topLeftY + j];
					*tile.type = targetType;
					*tile.frameX = (short)(targetStyle * (areaSizeX * 18) + i * 18);
					*tile.frameY = (short)(j * 18);
					tile.ClearBlockPaintAndCoating();
				}
			}
			for (int k = 0; k < areaSizeX; k++)
			{
				for (int l = 0; l < areaSizeY; l++)
				{
					WorldGen.SquareTileFrame(topLeftX + k, topLeftY + l, true);
				}
			}
		}

		// Token: 0x060012EA RID: 4842 RVA: 0x0046E9F8 File Offset: 0x0046CBF8
		private unsafe static void MoveReplaceTileAnchor(ref int x, ref int y, ushort targetType, Tile t)
		{
			if (TileID.Sets.BasicChest[(int)(*t.type)])
			{
				x -= (int)(*t.frameX % 36 / 18);
				y -= (int)(*t.frameY % 36 / 18);
			}
			if (TileID.Sets.BasicDresser[(int)(*t.type)])
			{
				x -= (int)(*t.frameX % 54 / 18);
				y -= (int)(*t.frameY % 36 / 18);
			}
			if (TileID.Sets.Campfire[(int)(*t.type)])
			{
				x -= (int)(*t.frameX % 54 / 18);
				y -= (int)(*t.frameY % 36 / 18);
			}
		}

		// Token: 0x060012EB RID: 4843 RVA: 0x0046EAA8 File Offset: 0x0046CCA8
		public unsafe static bool WouldTileReplacementBeBlockedByLiquid(int x, int y, int liquidType)
		{
			return (*Main.tile[x - 1, y].liquid > 0 && (int)Main.tile[x - 1, y].liquidType() == liquidType) || (*Main.tile[x + 1, y].liquid > 0 && (int)Main.tile[x + 1, y].liquidType() == liquidType) || (*Main.tile[x, y - 1].liquid > 0 && (int)Main.tile[x, y - 1].liquidType() == liquidType);
		}

		// Token: 0x060012EC RID: 4844 RVA: 0x0046EB54 File Offset: 0x0046CD54
		public unsafe static bool WouldTileReplacementWork(ushort attemptingToReplaceWith, int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if ((int)attemptingToReplaceWith >= TileLoader.TileCount)
			{
				return false;
			}
			if (TileID.Sets.Conversion.Grass[(int)attemptingToReplaceWith] || attemptingToReplaceWith == 633)
			{
				return false;
			}
			if (Main.tileRope[(int)(*tile.type)] && WorldGen.InWorld(x, y, 2))
			{
				Tile tile2 = Main.tile[x - 1, y];
				Tile tile3 = Main.tile[x + 1, y];
				if (attemptingToReplaceWith == 314 && tile2 != null && tile3 != null && ((tile2.active() && *tile2.type == 314) || (tile3.active() && *tile3.type == 314)))
				{
					return true;
				}
				if (TileID.Sets.Platforms[(int)attemptingToReplaceWith] && tile2 != null && tile3 != null && ((tile2.active() && TileID.Sets.Platforms[(int)(*tile2.type)]) || (tile3.active() && TileID.Sets.Platforms[(int)(*tile3.type)])))
				{
					return true;
				}
			}
			bool flag = !WorldGen.ReplaceTile_IsValidSolid((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidSolid((int)(*tile.type));
			bool flag2 = !WorldGen.ReplaceTile_IsValidTorch((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidTorch((int)(*tile.type));
			bool flag3 = !WorldGen.ReplaceTile_IsValidCampfire((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidCampfire((int)(*tile.type));
			bool flag7 = !WorldGen.ReplaceTile_IsValidPlatform((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidPlatform((int)(*tile.type));
			bool flag4 = (!WorldGen.ReplaceTile_IsValidSolid((int)attemptingToReplaceWith) && !WorldGen.ReplaceTile_IsValidPlatform((int)attemptingToReplaceWith)) || (!WorldGen.ReplaceTile_IsValidSolid((int)(*tile.type)) && !WorldGen.ReplaceTile_IsValidPlatform((int)(*tile.type)));
			bool flag5 = !WorldGen.ReplaceTile_IsValidChest((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidChest((int)(*tile.type)) || Chest.IsLocked(x, y, tile);
			bool flag6 = !WorldGen.ReplaceTile_IsValidDresser((int)attemptingToReplaceWith) || !WorldGen.ReplaceTile_IsValidDresser((int)(*tile.type));
			return !flag7 || !flag2 || !flag3 || !flag || !flag4 || !flag5 || !flag6;
		}

		// Token: 0x060012ED RID: 4845 RVA: 0x0046ED63 File Offset: 0x0046CF63
		private static bool ReplaceTile_IsValidSolid(int type)
		{
			return Main.tileSolid[type] && !Main.tileSolidTop[type] && (Main.tileRope[type] || !Main.tileFrameImportant[type]);
		}

		// Token: 0x060012EE RID: 4846 RVA: 0x0046ED8E File Offset: 0x0046CF8E
		private static bool ReplaceTile_IsValidTorch(int type)
		{
			return TileID.Sets.Torch[type];
		}

		// Token: 0x060012EF RID: 4847 RVA: 0x0046ED97 File Offset: 0x0046CF97
		private static bool ReplaceTile_IsValidCampfire(int type)
		{
			return TileID.Sets.Campfire[type];
		}

		// Token: 0x060012F0 RID: 4848 RVA: 0x0046EDA0 File Offset: 0x0046CFA0
		private static bool ReplaceTile_IsValidChest(int type)
		{
			return TileID.Sets.BasicChest[type];
		}

		// Token: 0x060012F1 RID: 4849 RVA: 0x0046EDA9 File Offset: 0x0046CFA9
		private static bool ReplaceTile_IsValidDresser(int type)
		{
			return TileID.Sets.BasicDresser[type];
		}

		// Token: 0x060012F2 RID: 4850 RVA: 0x0046EDB2 File Offset: 0x0046CFB2
		private static bool ReplaceTile_IsValidPlatform(int type)
		{
			return TileID.Sets.Platforms[type];
		}

		// Token: 0x060012F3 RID: 4851 RVA: 0x0046EDBC File Offset: 0x0046CFBC
		public unsafe static bool GetAshTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile2 = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 116;
			topTextureFrameHeight = 96;
			floorY = j;
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile = Main.tile[num, floorY];
				if (tile == null)
				{
					return false;
				}
				if (*tile.type == 633)
				{
					treeStyle = 31;
					return true;
				}
			}
			return false;
		}

		// Token: 0x060012F4 RID: 4852 RVA: 0x0046EE2C File Offset: 0x0046D02C
		public unsafe static bool GetVanityTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 118;
			topTextureFrameHeight = 96;
			floorY = j;
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile2 = Main.tile[num, floorY];
				if (tile2 == null)
				{
					return false;
				}
				if (TileID.Sets.Conversion.Grass[(int)(*tile2.type)])
				{
					ushort num2 = *tile.type;
					if (num2 == 596)
					{
						treeStyle = 29;
						return true;
					}
					if (num2 == 616)
					{
						treeStyle = 30;
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060012F5 RID: 4853 RVA: 0x0046EEC4 File Offset: 0x0046D0C4
		public unsafe static bool GetGemTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 116;
			topTextureFrameHeight = 96;
			floorY = j;
			WorldGen.GrowTreeSettings profile;
			if (!WorldGen.GrowTreeSettings.Profiles.TryGetFromTreeId((int)(*tile.type), out profile))
			{
				return false;
			}
			for (int k = 0; k < 100; k++)
			{
				floorY = j + k;
				Tile tile2 = Main.tile[num, floorY];
				if (tile2 == null)
				{
					return false;
				}
				if (profile.GroundTest((int)(*tile2.type)))
				{
					switch (*tile.type)
					{
					case 583:
						treeStyle = 22;
						return true;
					case 584:
						treeStyle = 23;
						return true;
					case 585:
						treeStyle = 24;
						return true;
					case 586:
						treeStyle = 25;
						return true;
					case 587:
						treeStyle = 26;
						return true;
					case 588:
						treeStyle = 27;
						return true;
					case 589:
						treeStyle = 28;
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060012F6 RID: 4854 RVA: 0x0046EFB4 File Offset: 0x0046D1B4
		public unsafe static bool GetCommonTreeFoliageData(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight)
		{
			Tile tile2 = Main.tile[i, j];
			int num = i + xoffset;
			topTextureFrameWidth = 80;
			topTextureFrameHeight = 80;
			floorY = j;
			int k = 0;
			while (k < 100)
			{
				floorY = j + k;
				Tile tile = Main.tile[num, floorY];
				if (tile == null)
				{
					return false;
				}
				ushort num4 = *tile.type;
				if (num4 > 109)
				{
					if (num4 <= 477)
					{
						if (num4 == 147)
						{
							treeStyle = 4;
							int num2 = WorldGen.TreeTops.GetTreeStyle(6);
							if (num2 == 0)
							{
								treeStyle = 12;
								if (i % 10 == 0)
								{
									treeStyle = 18;
								}
							}
							if (num2 == 2 || num2 == 3 || num2 == 32 || num2 == 4 || num2 == 42 || num2 == 5 || num2 == 7)
							{
								if (num2 % 2 == 0)
								{
									if (i < Main.maxTilesX / 2)
									{
										treeStyle = 16;
									}
									else
									{
										treeStyle = 17;
									}
								}
								else if (i > Main.maxTilesX / 2)
								{
									treeStyle = 16;
								}
								else
								{
									treeStyle = 17;
								}
							}
							return true;
						}
						if (num4 != 199)
						{
							if (num4 != 477)
							{
								goto IL_2B7;
							}
							goto IL_EC;
						}
					}
					else
					{
						if (num4 == 492)
						{
							goto IL_22A;
						}
						if (num4 == 661)
						{
							goto IL_162;
						}
						if (num4 != 662)
						{
							goto IL_2B7;
						}
					}
					treeStyle = 5;
					return true;
				}
				if (num4 <= 23)
				{
					if (num4 == 2)
					{
						goto IL_EC;
					}
					if (num4 == 23)
					{
						goto IL_162;
					}
				}
				else
				{
					if (num4 == 60)
					{
						topTextureFrameHeight = 96;
						topTextureFrameWidth = 114;
						treeStyle = 2;
						int num2 = WorldGen.TreeTops.GetTreeStyle(5);
						if (num2 == 1)
						{
							treeStyle = 11;
							topTextureFrameWidth = 116;
						}
						if ((double)floorY > Main.worldSurface)
						{
							treeStyle = 13;
							topTextureFrameWidth = 116;
						}
						return true;
					}
					if (num4 == 70)
					{
						treeStyle = 14;
						return true;
					}
					if (num4 == 109)
					{
						goto IL_22A;
					}
				}
				IL_2B7:
				ModTree tree = PlantLoader.Get<ModTree>(5, (int)(*tile.type));
				if (tree != null)
				{
					tree.SetTreeFoliageSettings(tile, ref xoffset, ref treeFrame, ref floorY, ref topTextureFrameWidth, ref topTextureFrameHeight);
					treeStyle = (int)(*tile.type + 100);
					return true;
				}
				k++;
				continue;
				IL_EC:
				int num3 = (num <= Main.treeX[0]) ? WorldGen.TreeTops.GetTreeStyle(0) : ((num <= Main.treeX[1]) ? WorldGen.TreeTops.GetTreeStyle(1) : ((num > Main.treeX[2]) ? WorldGen.TreeTops.GetTreeStyle(3) : WorldGen.TreeTops.GetTreeStyle(2)));
				if (num3 != 0)
				{
					if (num3 != 5)
					{
						treeStyle = 5 + num3;
					}
					else
					{
						treeStyle = 10;
					}
				}
				else
				{
					treeStyle = 0;
				}
				return true;
				IL_162:
				treeStyle = 1;
				return true;
				IL_22A:
				topTextureFrameHeight = 140;
				int num5 = treeStyle = WorldGen.GetHollowTreeFoliageStyle();
				if (num5 == 19)
				{
					topTextureFrameWidth = 120;
				}
				if (num5 == 20)
				{
					treeStyle = 20;
					if (i % 6 == 1)
					{
						treeFrame += 3;
					}
					else if (i % 6 == 2)
					{
						treeFrame += 6;
					}
					else if (i % 6 == 3)
					{
						treeFrame += 9;
					}
					else if (i % 6 == 4)
					{
						treeFrame += 12;
					}
					else if (i % 6 == 5)
					{
						treeFrame += 15;
					}
				}
				else if (i % 3 == 1)
				{
					treeFrame += 3;
				}
				else if (i % 3 == 2)
				{
					treeFrame += 6;
				}
				return true;
			}
			return false;
		}

		// Token: 0x060012F7 RID: 4855 RVA: 0x0046F2BC File Offset: 0x0046D4BC
		public static int GetHollowTreeFoliageStyle()
		{
			WorldGen.TreeTops.GetTreeStyle(7);
			int num = WorldGen.hallowBG;
			if (num - 2 <= 1)
			{
				return 20;
			}
			if (num != 4)
			{
				return 3;
			}
			return 19;
		}

		// Token: 0x060012F8 RID: 4856 RVA: 0x0046F2EC File Offset: 0x0046D4EC
		public unsafe static int GetTreeFrame(Tile t)
		{
			if (*t.frameY == 220)
			{
				return 1;
			}
			if (*t.frameY == 242)
			{
				return 2;
			}
			return 0;
		}

		// Token: 0x060012F9 RID: 4857 RVA: 0x0046F314 File Offset: 0x0046D514
		public static TreeTypes GetTreeType(int tileType)
		{
			TreeTypes modType = PlantLoader.GetModTreeType(tileType);
			if (modType != TreeTypes.None)
			{
				return modType;
			}
			if (tileType <= 112)
			{
				if (tileType <= 53)
				{
					if (tileType != 2)
					{
						if (tileType == 23)
						{
							return TreeTypes.Corrupt;
						}
						if (tileType != 53)
						{
							return TreeTypes.None;
						}
						return TreeTypes.Palm;
					}
				}
				else if (tileType <= 70)
				{
					if (tileType == 60)
					{
						return TreeTypes.Jungle;
					}
					if (tileType != 70)
					{
						return TreeTypes.None;
					}
					return TreeTypes.Mushroom;
				}
				else
				{
					if (tileType == 109)
					{
						return TreeTypes.Hallowed;
					}
					if (tileType != 112)
					{
						return TreeTypes.None;
					}
					return TreeTypes.PalmCorrupt;
				}
			}
			else if (tileType <= 199)
			{
				if (tileType == 116)
				{
					return TreeTypes.PalmHallowed;
				}
				if (tileType == 147)
				{
					return TreeTypes.Snow;
				}
				if (tileType != 199)
				{
					return TreeTypes.None;
				}
				return TreeTypes.Crimson;
			}
			else if (tileType <= 477)
			{
				if (tileType == 234)
				{
					return TreeTypes.PalmCrimson;
				}
				if (tileType != 477)
				{
					return TreeTypes.None;
				}
			}
			else
			{
				if (tileType == 492)
				{
					return TreeTypes.Hallowed;
				}
				if (tileType != 633)
				{
					return TreeTypes.None;
				}
				return TreeTypes.Ash;
			}
			return TreeTypes.Forest;
		}

		// Token: 0x060012FA RID: 4858 RVA: 0x0046F3D0 File Offset: 0x0046D5D0
		public unsafe static bool IsThisAMushroomTree(int i, int j)
		{
			int x;
			int y;
			WorldGen.GetTreeBottom(i, j, out x, out y);
			return WorldGen.GetTreeType((int)(*Main.tile[x, y].type)) == TreeTypes.Mushroom;
		}

		// Token: 0x060012FB RID: 4859 RVA: 0x0046F408 File Offset: 0x0046D608
		public static void ResetTreeShakes()
		{
			WorldGen.numTreeShakes = 0;
		}

		// Token: 0x060012FC RID: 4860 RVA: 0x0046F410 File Offset: 0x0046D610
		private unsafe static void ShakeTree(int i, int j)
		{
			if (WorldGen.numTreeShakes == WorldGen.maxTreeShakes)
			{
				return;
			}
			int x;
			int y;
			WorldGen.GetTreeBottom(i, j, out x, out y);
			int num = y;
			TreeTypes treeType = WorldGen.GetTreeType((int)(*Main.tile[x, y].type));
			if (treeType == TreeTypes.None)
			{
				return;
			}
			for (int k = 0; k < WorldGen.numTreeShakes; k++)
			{
				if (WorldGen.treeShakeX[k] == x && WorldGen.treeShakeY[k] == y)
				{
					return;
				}
			}
			WorldGen.treeShakeX[WorldGen.numTreeShakes] = x;
			WorldGen.treeShakeY[WorldGen.numTreeShakes] = y;
			WorldGen.numTreeShakes++;
			y--;
			while (y > 10 && Main.tile[x, y].active() && TileID.Sets.IsShakeable[(int)(*Main.tile[x, y].type)])
			{
				y--;
			}
			y++;
			if (!WorldGen.IsTileALeafyTreeTop(x, y) || Collision.SolidTiles(x - 2, x + 2, y - 2, y + 2))
			{
				return;
			}
			bool createLeaves = true;
			if (!TileLoader.GlobalShakeTree(x, y, treeType) && PlantLoader.ShakeTree(x, y, (int)(*Main.tile[x, num].type), ref createLeaves))
			{
				if (Main.getGoodWorld && WorldGen.genRand.Next(17) == 0)
				{
					Projectile.NewProjectile(WorldGen.GetProjectileSource_ShakeTree(x, y), (float)(x * 16), (float)(y * 16), (float)Main.rand.Next(-100, 101) * 0.002f, 0f, 28, 0, 0f, Main.myPlayer, 16f, 16f, 0f);
				}
				else if (WorldGen.genRand.Next(300) == 0 && treeType == TreeTypes.Forest)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 832, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(300) == 0 && treeType == TreeTypes.Forest)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 933, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(200) == 0 && treeType == TreeTypes.Jungle)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 3360, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(200) == 0 && treeType == TreeTypes.Jungle)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 3361, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(1000) == 0 && treeType == TreeTypes.Forest)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 4366, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(7) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Snow || treeType == TreeTypes.Hallowed || treeType == TreeTypes.Ash))
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 27, WorldGen.genRand.Next(1, 3), false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(8) == 0 && treeType == TreeTypes.Mushroom)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 194, WorldGen.genRand.Next(1, 2), false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(35) == 0 && Main.halloween)
				{
					Item.NewItem(WorldGen.GetItemSource_ShakeTree(x, y), x * 16, y * 16, 16, 16, 1809, WorldGen.genRand.Next(1, 3), false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0)
				{
					int dropItem = 0;
					int num3;
					int num4;
					int num5;
					WorldGen.KillTile_GetItemDrops(i, j, Main.tile[i, j], out dropItem, out num3, out num4, out num5, false);
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, dropItem, WorldGen.genRand.Next(1, 4), false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(20) == 0)
				{
					int type = 71;
					int num2 = WorldGen.genRand.Next(50, 100);
					if (WorldGen.genRand.Next(30) == 0)
					{
						type = 73;
						num2 = 1;
						if (WorldGen.genRand.Next(5) == 0)
						{
							num2++;
						}
						if (WorldGen.genRand.Next(10) == 0)
						{
							num2++;
						}
					}
					else if (WorldGen.genRand.Next(10) == 0)
					{
						type = 72;
						num2 = WorldGen.genRand.Next(1, 21);
						if (WorldGen.genRand.Next(3) == 0)
						{
							num2 += WorldGen.genRand.Next(1, 21);
						}
						if (WorldGen.genRand.Next(4) == 0)
						{
							num2 += WorldGen.genRand.Next(1, 21);
						}
					}
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, type, num2, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(15) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
				{
					int num5 = WorldGen.genRand.Next(5);
					int type2;
					switch (num5)
					{
					case 0:
						type2 = 74;
						break;
					case 1:
						type2 = 297;
						break;
					case 2:
						type2 = 298;
						break;
					case 3:
						type2 = 299;
						break;
					default:
						type2 = 538;
						break;
					}
					if (Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) == 0f)
					{
						type2 = ((WorldGen.genRand.Next(2) != 0) ? 539 : 442);
					}
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, type2, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Hallowed && !Main.dayTime)
				{
					int type3 = (int)Main.rand.NextFromList(new short[]
					{
						583,
						584,
						585
					});
					if (Main.tenthAnniversaryWorld && Main.rand.Next(4) != 0)
					{
						type3 = 583;
					}
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, type3, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Forest && !Main.dayTime)
				{
					NPC npc = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, 611, 0, 0f, 0f, 0f, 0f, 255)];
					npc.velocity.Y = 1f;
					npc.netUpdate = true;
				}
				else if (WorldGen.genRand.Next(50) == 0 && treeType == TreeTypes.Jungle && Main.dayTime)
				{
					NPC npc2 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, (int)Main.rand.NextFromList(new short[]
					{
						671,
						672,
						673,
						674,
						675
					}), 0, 0f, 0f, 0f, 0f, 255)];
					npc2.velocity.Y = 1f;
					npc2.netUpdate = true;
				}
				else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Forest && !Main.dayTime && Main.halloween)
				{
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, 301, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(50) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed))
				{
					for (int l = 0; l < 5; l++)
					{
						Point point;
						point..ctor(x + Main.rand.Next(-2, 2), y - 1 + Main.rand.Next(-2, 2));
						int type4 = (int)((Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) != 0f) ? Main.rand.NextFromList(new short[]
						{
							74,
							297,
							298
						}) : 442);
						NPC npc3 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), point.X * 16, point.Y * 16, type4, 0, 0f, 0f, 0f, 0f, 255)];
						npc3.velocity = Main.rand.NextVector2CircularEdge(3f, 3f);
						npc3.netUpdate = true;
					}
				}
				else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
				{
					for (int m = 0; m < 5; m++)
					{
						Point point2;
						point2..ctor(x + Main.rand.Next(-2, 2), y - 1 + Main.rand.Next(-2, 2));
						NPC npc4 = Main.npc[NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), point2.X * 16, point2.Y * 16, (int)Main.rand.NextFromList(new short[]
						{
							210,
							211
						}), 0, 0f, 0f, 0f, 0f, 255)];
						npc4.ai[1] = 65f;
						npc4.netUpdate = true;
					}
				}
				else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(x))
				{
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, 603, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
				{
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16 + 8, (y - 1) * 16, -22, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(30) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
				{
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16 + 8, (y - 1) * 16, -11, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(30) == 0 && treeType == TreeTypes.Jungle && !Main.dayTime)
				{
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, 51, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(40) == 0 && treeType == TreeTypes.Jungle)
				{
					Projectile.NewProjectile(WorldGen.GetProjectileSource_ShakeTree(x, y), (float)(x * 16 + 8), (float)((y - 1) * 16), 0f, 0f, 655, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
				}
				else if (WorldGen.genRand.Next(20) == 0 && (treeType == TreeTypes.Forest || treeType == TreeTypes.Hallowed) && !Main.raining && !NPC.TooWindyForButterflies && Main.dayTime)
				{
					int type5 = 356;
					if (Player.GetClosestRollLuck(x, y, NPC.goldCritterChance) == 0f)
					{
						type5 = 444;
					}
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, type5, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (WorldGen.genRand.Next(20) == 0 && treeType == TreeTypes.Ash && y > Main.maxTilesY - 250)
				{
					int num5 = WorldGen.genRand.Next(3);
					int type6;
					if (num5 != 0)
					{
						if (num5 != 1)
						{
							type6 = 655;
						}
						else
						{
							type6 = 653;
						}
					}
					else
					{
						type6 = 654;
					}
					NPC.NewNPC(new EntitySource_ShakeTree(x, y, null), x * 16, y * 16, type6, 0, 0f, 0f, 0f, 0f, 255);
				}
				else if (Main.remixWorld && WorldGen.genRand.Next(20) == 0 && treeType == TreeTypes.Ash && y > Main.maxTilesY - 250)
				{
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, 965, WorldGen.genRand.Next(20, 41), false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Forest)
				{
					int num5 = WorldGen.genRand.Next(5);
					int type7;
					switch (num5)
					{
					case 0:
						type7 = 4009;
						break;
					case 1:
						type7 = 4293;
						break;
					case 2:
						type7 = 4282;
						break;
					case 3:
						type7 = 4290;
						break;
					default:
						type7 = 4291;
						break;
					}
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, type7, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Snow)
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4295 : 4286;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Jungle)
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4292 : 4294;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Palm || treeType == TreeTypes.PalmCorrupt || treeType == TreeTypes.PalmCrimson || treeType == TreeTypes.PalmHallowed) && !WorldGen.IsPalmOasisTree(x))
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4287 : 4283;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Corrupt || treeType == TreeTypes.PalmCorrupt))
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4289 : 4284;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Hallowed || treeType == TreeTypes.PalmHallowed))
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4288 : 4297;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && (treeType == TreeTypes.Crimson || treeType == TreeTypes.PalmCrimson))
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 4285 : 4296;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
				else if (WorldGen.genRand.Next(12) == 0 && treeType == TreeTypes.Ash)
				{
					int num5 = (WorldGen.genRand.Next(2) != 0) ? 5278 : 5277;
					Item.NewItem(WorldGen.GetItemSource_FromTreeShake(x, y), x * 16, y * 16, 16, 16, num5, 1, false, 0, false, false);
				}
			}
			NPCLoader.blockLoot.Clear();
			if (!createLeaves)
			{
				return;
			}
			int treeHeight = 0;
			int treeFrame = 0;
			int passStyle = 0;
			WorldGen.GetTreeLeaf(x, Main.tile[x, y], Main.tile[x, num], ref treeHeight, out treeFrame, out passStyle);
			if (passStyle > 0)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(112, -1, -1, null, 1, (float)x, (float)y, 1f, passStyle, 0, 0);
				}
				if (Main.netMode == 0)
				{
					WorldGen.TreeGrowFX(x, y, 1, passStyle, true);
				}
			}
		}

		// Token: 0x060012FD RID: 4861 RVA: 0x004703D4 File Offset: 0x0046E5D4
		private unsafe static void GetVineTop(int i, int j, out int x, out int y)
		{
			x = i;
			y = j;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (TileID.Sets.IsVine[(int)(*tileSafely.type)])
			{
				while (y > 20 && tileSafely.active() && TileID.Sets.IsVine[(int)(*tileSafely.type)])
				{
					y--;
					tileSafely = Framing.GetTileSafely(x, y);
				}
			}
		}

		/// <summary> If given a tree tile coordinate, will output the coordinates of the tree tile at the bottom of the tree. </summary>
		// Token: 0x060012FE RID: 4862 RVA: 0x00470434 File Offset: 0x0046E634
		public unsafe static void GetTreeBottom(int i, int j, out int x, out int y)
		{
			x = i;
			y = j;
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (*tileSafely.type == 323)
			{
				while (y < Main.maxTilesY - 50 && (!tileSafely.active() || *tileSafely.type == 323))
				{
					y++;
					tileSafely = Framing.GetTileSafely(x, y);
				}
				return;
			}
			int num = (int)(*tileSafely.frameX / 22);
			int num2 = (int)(*tileSafely.frameY / 22);
			if (num == 3 && num2 <= 2)
			{
				x++;
			}
			else if (num == 4 && num2 >= 3 && num2 <= 5)
			{
				x--;
			}
			else if (num == 1 && num2 >= 6 && num2 <= 8)
			{
				x--;
			}
			else if (num == 2 && num2 >= 6 && num2 <= 8)
			{
				x++;
			}
			else if (num == 2 && num2 >= 9)
			{
				x++;
			}
			else if (num == 3 && num2 >= 9)
			{
				x--;
			}
			tileSafely = Framing.GetTileSafely(x, y);
			while (y < Main.maxTilesY - 50 && (!tileSafely.active() || TileID.Sets.IsATreeTrunk[(int)(*tileSafely.type)] || *tileSafely.type == 72))
			{
				y++;
				tileSafely = Framing.GetTileSafely(x, y);
			}
		}

		// Token: 0x060012FF RID: 4863 RVA: 0x00470568 File Offset: 0x0046E768
		private unsafe static void AttemptFossilShattering(int i, int j, Tile tileCache, bool fail)
		{
			if (*tileCache.type != 404 || Main.netMode == 1 || WorldGen.fossilBreak)
			{
				return;
			}
			WorldGen.fossilBreak = true;
			for (int k = i - 1; k <= i + 1; k++)
			{
				for (int l = j - 1; l <= j + 1; l++)
				{
					int maxValue = 15;
					if (!WorldGen.SolidTile(k, l + 1, false))
					{
						maxValue = 4;
					}
					else if (k == i && l == j - 1 && !fail)
					{
						maxValue = 4;
					}
					if ((k != i || l != j) && Main.tile[k, l].active() && *Main.tile[k, l].type == 404 && WorldGen.genRand.Next(maxValue) == 0)
					{
						WorldGen.KillTile(k, l, false, false, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
						}
					}
				}
			}
			WorldGen.fossilBreak = false;
		}

		/// <summary>
		/// Attempts to destroy the tile at the provided tile coordinates.<para />
		/// Callers can use <paramref name="fail" />, <paramref name="effectOnly" />, and <paramref name="noItem" /> to dictate if the intention is to not actually kill the tile, only spawn kill tile effects, and not drop items respectively. For example, worms typically use <c>fail: true, effectOnly: true</c> to spawn dust indicating the worm burrowing through the ground. <para />
		/// <see cref="M:Terraria.ModLoader.ModTile.KillTile(System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@)" /> and <see cref="M:Terraria.ModLoader.GlobalTile.KillTile(System.Int32,System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@)" /> will be called to modify those values.<para />
		/// Note that this method will destroy a single tile and then call the tile framing code. The <paramref name="noItem" /> parameter is only relevant for 1x1 tiles, not multi-tiles. The tile framing code is what triggers multi-tiles to destroy all of their remaining tiles and drop their placement item. <see cref="M:Terraria.ModLoader.GlobalTile.Drop(System.Int32,System.Int32,System.Int32)" /> must be used by the caller if the intention is to prevent item drops from a multi-tile.<para />
		/// </summary>
		/// <param name="i"></param>
		/// <param name="j"></param>
		/// <param name="fail">Prevents the tile from being destroyed, but still plays a hit sound</param>
		/// <param name="effectOnly">Prevents the tile from being destroyed but still spawns hit dust and prevents the hit sound.</param>
		/// <param name="noItem">Prevents the item from dropping. Only relevant for 1x1 tiles.</param>
		// Token: 0x06001300 RID: 4864 RVA: 0x00470660 File Offset: 0x0046E860
		public unsafe static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
		{
			if (i < 0 || j < 0 || i >= Main.maxTilesX || j >= Main.maxTilesY)
			{
				return;
			}
			Tile tile = Main.tile[i, j];
			if (tile == null)
			{
				tile = default(Tile);
				Main.tile[i, j] = tile;
			}
			if (!tile.active())
			{
				return;
			}
			if (j >= 1 && Main.tile[i, j - 1] == null)
			{
				Main.tile[i, j - 1] = default(Tile);
			}
			int num23 = WorldGen.CheckTileBreakability(i, j);
			if (num23 == 1)
			{
				fail = true;
			}
			if (num23 == 2)
			{
				return;
			}
			TileLoader.KillTile(i, j, (int)(*tile.type), ref fail, ref effectOnly, ref noItem);
			if (WorldGen.gen)
			{
				noItem = true;
			}
			if (!effectOnly && !WorldGen.stopDrops)
			{
				if (!noItem && FixExploitManEaters.SpotProtected(i, j))
				{
					return;
				}
				if (!Main.dedServ && !WorldGen.gen && !Main.gameMenu)
				{
					WorldGen.KillTile_PlaySounds(i, j, fail, tile);
				}
			}
			if (*tile.type == 128 || *tile.type == 269)
			{
				int num2 = i;
				int num3 = (int)(*tile.frameX);
				int num4;
				for (num4 = (int)(*tile.frameX); num4 >= 100; num4 -= 100)
				{
				}
				while (num4 >= 36)
				{
					num4 -= 36;
				}
				if (num4 == 18)
				{
					num3 = (int)(*Main.tile[i - 1, j].frameX);
					num2--;
				}
				if (num3 >= 100)
				{
					int num5 = 0;
					while (num3 >= 100)
					{
						num3 -= 100;
						num5++;
					}
					short num24 = *Main.tile[num2, j].frameY / 18;
					if (num24 == 0)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.headType[num5], 1, false, 0, false, false);
					}
					if (num24 == 1)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.bodyType[num5], 1, false, 0, false, false);
					}
					if (num24 == 2)
					{
						Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, Item.legType[num5], 1, false, 0, false, false);
					}
					for (num3 = (int)(*Main.tile[num2, j].frameX); num3 >= 100; num3 -= 100)
					{
					}
					*Main.tile[num2, j].frameX = (short)num3;
				}
			}
			if (*tile.type == 334)
			{
				int num6 = i;
				int frameX = (int)(*tile.frameX);
				int num7 = (int)(*tile.frameX);
				int num8 = 0;
				while (num7 >= 5000)
				{
					num7 -= 5000;
					num8++;
				}
				if (num8 != 0)
				{
					num7 = (num8 - 1) * 18;
				}
				num7 %= 54;
				if (num7 == 18)
				{
					frameX = (int)(*Main.tile[i - 1, j].frameX);
					num6--;
				}
				if (num7 == 36)
				{
					frameX = (int)(*Main.tile[i - 2, j].frameX);
					num6 -= 2;
				}
				if (frameX >= 5000)
				{
					int num9 = frameX % 5000;
					num9 -= 100;
					int frameX2 = (int)(*Main.tile[num6 + 1, j].frameX);
					frameX2 = ((frameX2 < 25000) ? (frameX2 - 10000) : (frameX2 - 25000));
					if (Main.netMode != 1)
					{
						Item item = new Item();
						item.netDefaults(num9);
						item.Prefix(frameX2);
						int num10 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(i, j), i * 16, j * 16, 16, 16, num9, 1, true, 0, false, false);
						item.position = Main.item[num10].position;
						Main.item[num10] = item;
						NetMessage.SendData(21, -1, -1, null, num10, 0f, 0f, 0f, 0, 0, 0);
					}
					frameX = (int)(*Main.tile[num6, j].frameX);
					int num11 = 0;
					while (frameX >= 5000)
					{
						frameX -= 5000;
						num11++;
					}
					if (num11 != 0)
					{
						frameX = (num11 - 1) * 18;
					}
					*Main.tile[num6, j].frameX = (short)frameX;
					*Main.tile[num6 + 1, j].frameX = (short)(frameX + 18);
				}
			}
			if (*tile.type == 395)
			{
				int num12 = TEItemFrame.Find(i - (int)(*tile.frameX % 36 / 18), j - (int)(*tile.frameY % 36 / 18));
				if (num12 != -1 && ((TEItemFrame)TileEntity.ByID[num12]).item.stack > 0)
				{
					((TEItemFrame)TileEntity.ByID[num12]).DropItem();
					if (Main.netMode != 2)
					{
						Main.LocalPlayer.InterruptItemUsageIfOverTile(395);
					}
					return;
				}
			}
			if (*tile.type == 471)
			{
				int num13 = TEWeaponsRack.Find(i - (int)(*tile.frameX % 54 / 18), j - (int)(*tile.frameY % 54 / 18));
				if (num13 != -1 && ((TEWeaponsRack)TileEntity.ByID[num13]).item.stack > 0)
				{
					((TEWeaponsRack)TileEntity.ByID[num13]).DropItem();
					if (Main.netMode != 2)
					{
						Main.LocalPlayer.InterruptItemUsageIfOverTile(471);
					}
					return;
				}
			}
			if (*tile.type == 520)
			{
				int num14 = TEFoodPlatter.Find(i, j);
				if (num14 != -1 && ((TEFoodPlatter)TileEntity.ByID[num14]).item.stack > 0)
				{
					((TEFoodPlatter)TileEntity.ByID[num14]).DropItem();
					if (Main.netMode != 2)
					{
						Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
					}
					return;
				}
			}
			if ((*tile.type == 470 && (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)) || (*tile.type == 475 && (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)))
			{
				return;
			}
			int num15 = WorldGen.KillTile_GetTileDustAmount(fail, tile, i, j);
			for (int k = 0; k < num15; k++)
			{
				WorldGen.KillTile_MakeTileDust(i, j, tile);
			}
			if (effectOnly)
			{
				return;
			}
			WorldGen.AttemptFossilShattering(i, j, tile, fail);
			if (fail)
			{
				if (Main.netMode != 1 && TileID.Sets.IsShakeable[(int)(*tile.type)])
				{
					WorldGen.ShakeTree(i, j);
				}
				if (*tile.type == 2 || *tile.type == 23 || *tile.type == 109 || *tile.type == 199 || *tile.type == 477 || *tile.type == 492)
				{
					*tile.type = 0;
				}
				if (*tile.type == 633)
				{
					*tile.type = 57;
				}
				if (*tile.type == 60 || *tile.type == 661 || *tile.type == 662 || *tile.type == 70)
				{
					*tile.type = 59;
				}
				if (Main.tileMoss[(int)(*tile.type)])
				{
					*tile.type = 1;
				}
				if (TileID.Sets.tileMossBrick[(int)(*tile.type)])
				{
					*tile.type = 38;
				}
				WorldGen.SquareTileFrame(i, j, true);
				return;
			}
			if (Main.getGoodWorld && Main.netMode != 1 && *tile.type == 57)
			{
				for (int l = 0; l < 8; l++)
				{
					int maxValue = 2;
					int num16 = i;
					int num17 = j;
					switch (l)
					{
					case 0:
						num16--;
						break;
					case 1:
						num16++;
						break;
					case 2:
						num17--;
						break;
					case 3:
						num17++;
						break;
					case 4:
						num16--;
						num17--;
						break;
					case 5:
						num16++;
						num17--;
						break;
					case 6:
						num16--;
						num17++;
						break;
					case 7:
						num16++;
						num17++;
						break;
					}
					Tile tile2 = Main.tile[num16, num17];
					if (tile2.active() && WorldGen.genRand.Next(maxValue) == 0 && *tile2.type == 57 && !WorldGen.SolidTile(num16, num17 + 1, false))
					{
						WorldGen.KillTile(num16, num17, false, false, true);
						if (Main.netMode == 2)
						{
							NetMessage.TrySendData(17, -1, -1, null, 20, (float)num16, (float)num17, 0f, 0, 0, 0);
						}
						int num18 = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(num16, num17), (float)(num16 * 16 + 8), (float)(num17 * 16 + 8), 0f, 0.41f, 40, 15, 0f, Main.myPlayer, 0f, 0f, 0f);
						Main.projectile[num18].netUpdate = true;
					}
				}
			}
			if (Main.netMode != 1 && *tile.type >= 481 && *tile.type <= 483)
			{
				for (int m = 0; m < 8; m++)
				{
					int num19 = 6;
					int num20 = i;
					int num21 = j;
					switch (m)
					{
					case 0:
						num20--;
						break;
					case 1:
						num20++;
						break;
					case 2:
						num21--;
						num19 /= 2;
						break;
					case 3:
						num21++;
						break;
					case 4:
						num20--;
						num21--;
						break;
					case 5:
						num20++;
						num21--;
						break;
					case 6:
						num20--;
						num21++;
						break;
					case 7:
						num20++;
						num21++;
						break;
					}
					Tile tile3 = Main.tile[num20, num21];
					if (tile3.active() && WorldGen.genRand.Next(num19) == 0 && *tile3.type >= 481 && *tile3.type <= 483)
					{
						tile.active(false);
						WorldGen.KillTile(num20, num21, false, false, true);
						if (Main.netMode == 2)
						{
							NetMessage.TrySendData(17, -1, -1, null, 20, (float)num20, (float)num21, 0f, 0, 0, 0);
						}
					}
				}
				int type = (int)(*tile.type - 481 + 736);
				int damage = 20;
				EntitySource_TileBreak projectileSource_TileBreak = WorldGen.GetProjectileSource_TileBreak(i, j);
				if (Main.netMode == 0)
				{
					Projectile.NewProjectile(projectileSource_TileBreak, (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, type, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
				}
				else if (Main.netMode == 2)
				{
					int num22 = Projectile.NewProjectile(projectileSource_TileBreak, (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, type, damage, 0f, Main.myPlayer, 0f, 0f, 0f);
					Main.projectile[num22].netUpdate = true;
				}
			}
			if (WorldGen.CheckTileBreakability2_ShouldTileSurvive(i, j))
			{
				return;
			}
			if (*tile.type == 51 && *tile.wall == 62 && WorldGen.genRand.Next(4) != 0)
			{
				noItem = true;
			}
			if (!noItem && !WorldGen.stopDrops && Main.netMode != 1)
			{
				WorldGen.KillTile_DropBait(i, j, tile);
				WorldGen.KillTile_DropItems(i, j, tile, false, false);
			}
			if (*tile.type == 520)
			{
				TEFoodPlatter.Kill(i, j);
			}
			if (*tile.type == 423)
			{
				TELogicSensor.Kill(i, j);
			}
			if (Main.netMode != 2)
			{
				AchievementsHelper.NotifyTileDestroyed(Main.player[Main.myPlayer], *tile.type);
			}
			tile.active(false);
			tile.halfBrick(false);
			*tile.frameX = -1;
			*tile.frameY = -1;
			tile.ClearBlockPaintAndCoating();
			tile.frameNumber(0);
			if (Main.netMode != 1)
			{
				if (*tile.type == 58 && j > Main.UnderworldLayer)
				{
					tile.lava(true);
					*tile.liquid = 128;
				}
				else if (*tile.type == 230 && Main.getGoodWorld && WorldGen.genRand.Next(2) == 0)
				{
					tile.lava(true);
					*tile.liquid = 128;
				}
			}
			if (*tile.type == 419)
			{
				Wiring.PokeLogicGate(i, j + 1);
			}
			else if (TileID.Sets.BlocksWaterDrawingBehindSelf[(int)(*tile.type)])
			{
				WorldGen.SquareWallFrame(i, j, true);
			}
			*tile.type = 0;
			tile.inActive(false);
			WorldGen.SquareTileFrame(i, j, true);
			while (!WorldGen.destroyObject && WorldGen.ExploitDestroyQueue.Count > 0)
			{
				Point point = WorldGen.ExploitDestroyQueue.Dequeue();
				if (Framing.GetTileSafely(point.X, point.Y).active())
				{
					WorldGen.SquareTileFrame(point.X, point.Y, true);
					NetMessage.SendTileSquare(-1, point.X, point.Y, TileChangeType.None);
				}
			}
		}

		// Token: 0x06001301 RID: 4865 RVA: 0x00471334 File Offset: 0x0046F534
		private static Player GetPlayerForTile(int x, int y)
		{
			return Main.player[(int)Player.FindClosest(new Vector2((float)x, (float)y) * 16f, 16, 16)];
		}

		// Token: 0x06001302 RID: 4866 RVA: 0x00471358 File Offset: 0x0046F558
		internal unsafe static void KillTile_DropItems(int x, int y, Tile tileCache, bool includeLargeObjectDrops = false, bool includeAllModdedLargeObjectDrops = false)
		{
			if (!TileLoader.Drop(x, y, (int)(*Main.tile[x, y].type), includeLargeObjectDrops))
			{
				return;
			}
			int dropItem;
			int dropItemStack;
			int secondaryItem;
			int secondaryItemStack;
			WorldGen.KillTile_GetItemDrops(x, y, tileCache, out dropItem, out dropItemStack, out secondaryItem, out secondaryItemStack, includeLargeObjectDrops);
			TileLoader.GetItemDrops(x, y, tileCache, includeLargeObjectDrops, includeAllModdedLargeObjectDrops);
			if (!Main.getGoodWorld || tileCache.active())
			{
				if (dropItem > 0)
				{
					int num = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, dropItem, dropItemStack, false, -1, false, false);
					Main.item[num].TryCombiningIntoNearbyItems(num);
				}
				if (secondaryItem > 0)
				{
					int num2 = Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, secondaryItem, secondaryItemStack, false, -1, false, false);
					Main.item[num2].TryCombiningIntoNearbyItems(num2);
				}
			}
		}

		// Token: 0x06001303 RID: 4867 RVA: 0x00471418 File Offset: 0x0046F618
		internal unsafe static void KillTile_GetItemDrops(int x, int y, Tile tileCache, out int dropItem, out int dropItemStack, out int secondaryItem, out int secondaryItemStack, bool includeLargeObjectDrops = false)
		{
			dropItem = 0;
			dropItemStack = 1;
			secondaryItem = 0;
			secondaryItemStack = 1;
			if (includeLargeObjectDrops)
			{
				ushort num5 = *tileCache.type;
				if (num5 <= 88)
				{
					if (num5 != 21)
					{
						if (num5 != 88)
						{
							goto IL_7C;
						}
						int num = (int)(*tileCache.frameX / 54);
						dropItem = WorldGen.GetDresserItemDrop(num);
						goto IL_7C;
					}
				}
				else
				{
					if (num5 == 215)
					{
						int num = (int)(*tileCache.frameX / 54);
						dropItem = WorldGen.GetCampfireItemDrop(num);
						goto IL_7C;
					}
					if (num5 != 467)
					{
						goto IL_7C;
					}
				}
				dropItem = WorldGen.GetChestItemDrop(x, y, (int)(*tileCache.type));
			}
			IL_7C:
			switch (*tileCache.type)
			{
			case 0:
			case 2:
			case 109:
			case 199:
			case 477:
			case 492:
				dropItem = 2;
				return;
			case 1:
				dropItem = 3;
				return;
			case 3:
				if (*tileCache.frameX == 144)
				{
					dropItem = 5;
					return;
				}
				if (WorldGen.KillTile_ShouldDropSeeds(x, y))
				{
					dropItem = 283;
					return;
				}
				break;
			case 4:
			{
				int num = (int)(*tileCache.frameY / 22);
				switch (num)
				{
				case 0:
					dropItem = 8;
					return;
				case 8:
					dropItem = 523;
					return;
				case 9:
					dropItem = 974;
					return;
				case 10:
					dropItem = 1245;
					return;
				case 11:
					dropItem = 1333;
					return;
				case 12:
					dropItem = 2274;
					return;
				case 13:
					dropItem = 3004;
					return;
				case 14:
					dropItem = 3045;
					return;
				case 15:
					dropItem = 3114;
					return;
				case 16:
					dropItem = 4383;
					return;
				case 17:
					dropItem = 4384;
					return;
				case 18:
					dropItem = 4385;
					return;
				case 19:
					dropItem = 4386;
					return;
				case 20:
					dropItem = 4387;
					return;
				case 21:
					dropItem = 4388;
					return;
				case 22:
					dropItem = 5293;
					return;
				case 23:
					dropItem = 5353;
					return;
				}
				dropItem = 426 + num;
				return;
			}
			case 5:
			case 596:
			case 616:
			case 634:
			{
				bool bonusWood = false;
				WorldGen.KillTile_GetTreeDrops(x, y, tileCache, ref bonusWood, ref dropItem, ref secondaryItem);
				if (bonusWood)
				{
					dropItemStack++;
					return;
				}
				break;
			}
			case 6:
				dropItem = 11;
				return;
			case 7:
				dropItem = 12;
				return;
			case 8:
				dropItem = 13;
				return;
			case 9:
				dropItem = 14;
				return;
			case 10:
			case 11:
			case 12:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 20:
			case 21:
			case 26:
			case 27:
			case 28:
			case 29:
			case 31:
			case 32:
			case 34:
			case 35:
			case 42:
			case 55:
			case 69:
			case 77:
			case 79:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 113:
			case 114:
			case 115:
			case 125:
			case 126:
			case 127:
			case 128:
			case 132:
			case 133:
			case 134:
			case 138:
			case 139:
			case 142:
			case 143:
			case 162:
			case 165:
			case 172:
			case 173:
			case 184:
			case 185:
			case 186:
			case 187:
			case 192:
			case 205:
			case 207:
			case 209:
			case 212:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 228:
			case 231:
			case 233:
			case 235:
			case 236:
			case 237:
			case 238:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 254:
			case 269:
			case 270:
			case 271:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 334:
			case 335:
			case 337:
			case 338:
			case 339:
			case 349:
			case 352:
			case 354:
			case 355:
			case 356:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 384:
			case 386:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 405:
			case 406:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 425:
			case 440:
			case 441:
			case 443:
			case 444:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 475:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 493:
			case 497:
			case 499:
			case 504:
			case 505:
			case 506:
			case 509:
			case 510:
			case 511:
			case 518:
			case 521:
			case 522:
			case 523:
			case 524:
			case 525:
			case 526:
			case 527:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 538:
			case 542:
			case 543:
			case 544:
			case 545:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 558:
			case 559:
			case 560:
			case 564:
			case 565:
			case 567:
			case 568:
			case 569:
			case 570:
			case 572:
			case 573:
			case 580:
			case 581:
			case 582:
			case 590:
			case 591:
			case 592:
			case 594:
			case 595:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 607:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 617:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 629:
			case 632:
			case 636:
			case 638:
			case 639:
			case 640:
			case 642:
			case 643:
			case 644:
			case 645:
			case 647:
			case 648:
			case 649:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 657:
			case 658:
			case 660:
			case 663:
			case 664:
			case 665:
				break;
			case 13:
				switch (*tileCache.frameX / 18)
				{
				case 1:
					dropItem = 28;
					return;
				case 2:
					dropItem = 110;
					return;
				case 3:
					dropItem = 350;
					return;
				case 4:
					dropItem = 351;
					return;
				case 5:
					dropItem = 2234;
					return;
				case 6:
					dropItem = 2244;
					return;
				case 7:
					dropItem = 2257;
					return;
				case 8:
					dropItem = 2258;
					return;
				default:
					dropItem = 31;
					return;
				}
				break;
			case 19:
			{
				int num = (int)(*tileCache.frameY / 18);
				switch (num)
				{
				case 0:
					dropItem = 94;
					return;
				case 1:
					dropItem = 631;
					return;
				case 2:
					dropItem = 632;
					return;
				case 3:
					dropItem = 633;
					return;
				case 4:
					dropItem = 634;
					return;
				case 5:
					dropItem = 913;
					return;
				case 6:
					dropItem = 1384;
					return;
				case 7:
					dropItem = 1385;
					return;
				case 8:
					dropItem = 1386;
					return;
				case 9:
					dropItem = 1387;
					return;
				case 10:
					dropItem = 1388;
					return;
				case 11:
					dropItem = 1389;
					return;
				case 12:
					dropItem = 1418;
					return;
				case 13:
					dropItem = 1457;
					return;
				case 14:
					dropItem = 1702;
					return;
				case 15:
					dropItem = 1796;
					return;
				case 16:
					dropItem = 1818;
					return;
				case 17:
					dropItem = 2518;
					return;
				case 18:
					dropItem = 2549;
					return;
				case 19:
					dropItem = 2566;
					return;
				case 20:
					dropItem = 2581;
					return;
				case 21:
					dropItem = 2627;
					return;
				case 22:
					dropItem = 2628;
					return;
				case 23:
					dropItem = 2629;
					return;
				case 24:
					dropItem = 2630;
					return;
				case 25:
					dropItem = 2744;
					return;
				case 26:
					dropItem = 2822;
					return;
				case 27:
					dropItem = 3144;
					return;
				case 28:
					dropItem = 3146;
					return;
				case 29:
					dropItem = 3145;
					return;
				case 30:
				case 31:
				case 32:
				case 33:
				case 34:
				case 35:
					dropItem = 3903 + num - 30;
					return;
				default:
					switch (num)
					{
					case 36:
						dropItem = 3945;
						return;
					case 37:
						dropItem = 3957;
						return;
					case 38:
						dropItem = 4159;
						return;
					case 39:
						dropItem = 4180;
						return;
					case 40:
						dropItem = 4201;
						return;
					case 41:
						dropItem = 4222;
						return;
					case 42:
						dropItem = 4311;
						return;
					case 43:
						dropItem = 4416;
						return;
					case 44:
						dropItem = 4580;
						return;
					case 45:
						dropItem = 5162;
						return;
					case 46:
						dropItem = 5183;
						return;
					case 47:
						dropItem = 5204;
						return;
					case 48:
						dropItem = 5292;
						return;
					default:
						return;
					}
					break;
				}
				break;
			}
			case 22:
				dropItem = 56;
				return;
			case 23:
				dropItem = 2;
				return;
			case 24:
				if (*tileCache.frameX == 144)
				{
					dropItem = 60;
					return;
				}
				break;
			case 25:
				dropItem = 61;
				return;
			case 30:
				dropItem = 9;
				return;
			case 33:
			{
				int num = (int)(*tileCache.frameY / 22);
				dropItem = 105;
				switch (num)
				{
				case 1:
					dropItem = 1405;
					return;
				case 2:
					dropItem = 1406;
					return;
				case 3:
					dropItem = 1407;
					return;
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 12:
				case 13:
					dropItem = 2045 + num - 4;
					return;
				default:
					if (num >= 14 && num <= 16)
					{
						dropItem = 2153 + num - 14;
						return;
					}
					switch (num)
					{
					case 17:
						dropItem = 2236;
						return;
					case 18:
						dropItem = 2523;
						return;
					case 19:
						dropItem = 2542;
						return;
					case 20:
						dropItem = 2556;
						return;
					case 21:
						dropItem = 2571;
						return;
					case 22:
						dropItem = 2648;
						return;
					case 23:
						dropItem = 2649;
						return;
					case 24:
						dropItem = 2650;
						return;
					case 25:
						dropItem = 2651;
						return;
					case 26:
						dropItem = 2818;
						return;
					case 27:
						dropItem = 3171;
						return;
					case 28:
						dropItem = 3173;
						return;
					case 29:
						dropItem = 3172;
						return;
					case 30:
						dropItem = 3890;
						return;
					case 31:
						dropItem = 3936;
						return;
					case 32:
						dropItem = 3962;
						return;
					case 33:
						dropItem = 4150;
						return;
					case 34:
						dropItem = 4171;
						return;
					case 35:
						dropItem = 4192;
						return;
					case 36:
						dropItem = 4213;
						return;
					case 37:
						dropItem = 4303;
						return;
					case 38:
						dropItem = 4571;
						return;
					case 39:
						dropItem = 5153;
						return;
					case 40:
						dropItem = 5174;
						return;
					case 41:
						dropItem = 5195;
						return;
					default:
						return;
					}
					break;
				}
				break;
			}
			case 36:
				dropItem = 1869;
				return;
			case 37:
				dropItem = 116;
				return;
			case 38:
				dropItem = 129;
				return;
			case 39:
				dropItem = 131;
				return;
			case 40:
				dropItem = 133;
				return;
			case 41:
				dropItem = 134;
				return;
			case 43:
				dropItem = 137;
				return;
			case 44:
				dropItem = 139;
				return;
			case 45:
				dropItem = 141;
				return;
			case 46:
				dropItem = 143;
				return;
			case 47:
				dropItem = 145;
				return;
			case 48:
				dropItem = 147;
				return;
			case 49:
				dropItem = 148;
				return;
			case 50:
				if (*tileCache.frameX == 90)
				{
					dropItem = 165;
					return;
				}
				dropItem = 149;
				return;
			case 51:
				dropItem = 150;
				return;
			case 52:
			case 62:
			case 382:
				if (Main.rand.Next(2) == 0 && WorldGen.GetPlayerForTile(x, y).cordage)
				{
					dropItem = 2996;
					return;
				}
				break;
			case 53:
				dropItem = 169;
				return;
			case 54:
				dropItem = 170;
				return;
			case 56:
				dropItem = 173;
				return;
			case 57:
				dropItem = 172;
				return;
			case 58:
				dropItem = 174;
				return;
			case 59:
			case 60:
			case 661:
			case 662:
				dropItem = 176;
				return;
			case 61:
			case 74:
				if (*tileCache.frameX == 144 && *tileCache.type == 61)
				{
					dropItem = 331;
					dropItemStack = Main.rand.Next(2, 4);
					return;
				}
				if (*tileCache.frameX == 162 && *tileCache.type == 61)
				{
					dropItem = 223;
					return;
				}
				if (*tileCache.frameX >= 108 && *tileCache.frameX <= 126 && *tileCache.type == 61 && Main.rand.Next(20) == 0)
				{
					dropItem = 208;
					return;
				}
				if (Main.rand.Next(100) == 0)
				{
					dropItem = 195;
					return;
				}
				break;
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
				dropItem = (int)(*tileCache.type - 63 + 177);
				return;
			case 70:
				dropItem = 176;
				return;
			case 71:
			case 72:
				if (Main.rand.Next(40) == 0)
				{
					dropItem = 194;
					return;
				}
				if (Main.rand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 73:
				if (WorldGen.KillTile_ShouldDropSeeds(x, y))
				{
					dropItem = 283;
					return;
				}
				break;
			case 75:
				dropItem = 192;
				return;
			case 76:
				dropItem = 214;
				return;
			case 78:
				dropItem = 222;
				return;
			case 80:
				dropItem = 276;
				return;
			case 81:
				dropItem = 275;
				return;
			case 83:
			case 84:
			{
				int num = (int)(*tileCache.frameX / 18);
				dropItem = 313 + num;
				int num2 = 307 + num;
				if (num == 6)
				{
					dropItem = 2358;
					num2 = 2357;
				}
				bool flag = WorldGen.IsHarvestableHerbWithSeed((int)(*tileCache.type), num);
				Player playerForTile = WorldGen.GetPlayerForTile(x, y);
				if (playerForTile.HeldItem.type == 213 || playerForTile.HeldItem.type == 5295)
				{
					dropItemStack = Main.rand.Next(1, 3);
					secondaryItem = num2;
					secondaryItemStack = Main.rand.Next(1, 6);
					return;
				}
				if (flag)
				{
					secondaryItem = num2;
					secondaryItemStack = Main.rand.Next(1, 4);
					return;
				}
				break;
			}
			case 107:
				dropItem = 364;
				return;
			case 108:
				dropItem = 365;
				return;
			case 110:
				if (*tileCache.frameX == 144)
				{
					dropItem = 5;
					return;
				}
				break;
			case 111:
				dropItem = 366;
				return;
			case 112:
				dropItem = 370;
				return;
			case 116:
				dropItem = 408;
				return;
			case 117:
				dropItem = 409;
				return;
			case 118:
				dropItem = 412;
				return;
			case 119:
				dropItem = 413;
				return;
			case 120:
				dropItem = 414;
				return;
			case 121:
				dropItem = 415;
				return;
			case 122:
				dropItem = 416;
				return;
			case 123:
				dropItem = 424;
				return;
			case 124:
				dropItem = 480;
				return;
			case 129:
				if (*tileCache.frameX >= 324)
				{
					dropItem = 4988;
					return;
				}
				dropItem = 502;
				return;
			case 130:
				dropItem = 511;
				return;
			case 131:
				dropItem = 512;
				return;
			case 135:
			{
				int num = (int)(*tileCache.frameY / 18);
				if (num == 0)
				{
					dropItem = 529;
				}
				if (num == 1)
				{
					dropItem = 541;
				}
				if (num == 2)
				{
					dropItem = 542;
				}
				if (num == 3)
				{
					dropItem = 543;
				}
				if (num == 4)
				{
					dropItem = 852;
				}
				if (num == 5)
				{
					dropItem = 853;
				}
				if (num == 6)
				{
					dropItem = 1151;
					return;
				}
				break;
			}
			case 136:
				dropItem = 538;
				return;
			case 137:
			{
				int num = (int)(*tileCache.frameY / 18);
				if (num == 0)
				{
					dropItem = 539;
				}
				if (num == 1)
				{
					dropItem = 1146;
				}
				if (num == 2)
				{
					dropItem = 1147;
				}
				if (num == 3)
				{
					dropItem = 1148;
				}
				if (num == 4)
				{
					dropItem = 1149;
				}
				if (num == 5)
				{
					dropItem = 5135;
					return;
				}
				break;
			}
			case 140:
				dropItem = 577;
				return;
			case 141:
				dropItem = 580;
				return;
			case 144:
				if (*tileCache.frameX == 0)
				{
					dropItem = 583;
				}
				if (*tileCache.frameX == 18)
				{
					dropItem = 584;
				}
				if (*tileCache.frameX == 36)
				{
					dropItem = 585;
				}
				if (*tileCache.frameX == 54)
				{
					dropItem = 4484;
				}
				if (*tileCache.frameX == 72)
				{
					dropItem = 4485;
					return;
				}
				break;
			case 145:
				dropItem = 586;
				return;
			case 146:
				dropItem = 591;
				return;
			case 147:
				dropItem = 593;
				return;
			case 148:
				dropItem = 594;
				return;
			case 149:
				if (*tileCache.frameX == 0 || *tileCache.frameX == 54)
				{
					dropItem = 596;
					return;
				}
				if (*tileCache.frameX == 18 || *tileCache.frameX == 72)
				{
					dropItem = 597;
					return;
				}
				if (*tileCache.frameX == 36 || *tileCache.frameX == 90)
				{
					dropItem = 598;
					return;
				}
				break;
			case 150:
				dropItem = 604;
				return;
			case 151:
				dropItem = 607;
				return;
			case 152:
				dropItem = 609;
				return;
			case 153:
				dropItem = 611;
				return;
			case 154:
				dropItem = 612;
				return;
			case 155:
				dropItem = 613;
				return;
			case 156:
				dropItem = 614;
				return;
			case 157:
				dropItem = 619;
				return;
			case 158:
				dropItem = 620;
				return;
			case 159:
				dropItem = 621;
				return;
			case 160:
				dropItem = 662;
				return;
			case 161:
				dropItem = 664;
				return;
			case 163:
				dropItem = 833;
				return;
			case 164:
				dropItem = 834;
				return;
			case 166:
				dropItem = 699;
				return;
			case 167:
				dropItem = 700;
				return;
			case 168:
				dropItem = 701;
				return;
			case 169:
				dropItem = 702;
				return;
			case 170:
				dropItem = 1872;
				return;
			case 171:
				if (*tileCache.frameX >= 10)
				{
					WorldGen.dropXmasTree(x, y, 0);
					WorldGen.dropXmasTree(x, y, 1);
					WorldGen.dropXmasTree(x, y, 2);
					WorldGen.dropXmasTree(x, y, 3);
					return;
				}
				break;
			case 174:
				dropItem = 713;
				return;
			case 175:
				dropItem = 717;
				return;
			case 176:
				dropItem = 718;
				return;
			case 177:
				dropItem = 719;
				return;
			case 178:
				switch (*tileCache.frameX / 18)
				{
				case 0:
					dropItem = 181;
					return;
				case 1:
					dropItem = 180;
					return;
				case 2:
					dropItem = 177;
					return;
				case 3:
					dropItem = 179;
					return;
				case 4:
					dropItem = 178;
					return;
				case 5:
					dropItem = 182;
					return;
				case 6:
					dropItem = 999;
					return;
				default:
					return;
				}
				break;
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 381:
			case 534:
			case 536:
			case 539:
			case 625:
			case 627:
				dropItem = 3;
				return;
			case 188:
				dropItem = 276;
				return;
			case 189:
				dropItem = 751;
				return;
			case 190:
				dropItem = 183;
				return;
			case 191:
				dropItem = 9;
				return;
			case 193:
				dropItem = 762;
				return;
			case 194:
				dropItem = 154;
				return;
			case 195:
				dropItem = 763;
				return;
			case 196:
				dropItem = 765;
				return;
			case 197:
				dropItem = 767;
				return;
			case 198:
				dropItem = 775;
				return;
			case 200:
				dropItem = 835;
				return;
			case 201:
				if (*tileCache.frameX == 270)
				{
					dropItem = 2887;
					return;
				}
				break;
			case 202:
				dropItem = 824;
				return;
			case 203:
				dropItem = 836;
				return;
			case 204:
				dropItem = 880;
				return;
			case 206:
				dropItem = 883;
				return;
			case 208:
				dropItem = 911;
				return;
			case 210:
				dropItem = 937;
				return;
			case 211:
				dropItem = 947;
				return;
			case 213:
				dropItem = 965;
				return;
			case 214:
				dropItem = 85;
				return;
			case 221:
				dropItem = 1104;
				return;
			case 222:
				dropItem = 1105;
				return;
			case 223:
				dropItem = 1106;
				return;
			case 224:
				dropItem = 1103;
				return;
			case 225:
				if (Main.rand.Next(3) == 0)
				{
					tileCache.honey(true);
					*tileCache.liquid = byte.MaxValue;
					return;
				}
				dropItem = 1124;
				if (Main.netMode != 1 && Main.rand.Next(2) == 0)
				{
					int num3 = 1;
					if (Main.rand.Next(3) == 0)
					{
						num3 = 2;
					}
					for (int i = 0; i < num3; i++)
					{
						int type = Main.rand.Next(210, 212);
						int num4 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(x, y), x * 16 + 8, y * 16 + 15, type, 1, 0f, 0f, 0f, 0f, 255);
						Main.npc[num4].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num4].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num4].netUpdate = true;
					}
					return;
				}
				break;
			case 226:
				dropItem = 1101;
				return;
			case 227:
			{
				int num = (int)(*tileCache.frameX / 34);
				dropItem = 1107 + num;
				if (num >= 8 && num <= 11)
				{
					dropItem = 3385 + num - 8;
					return;
				}
				break;
			}
			case 229:
				dropItem = 1125;
				return;
			case 230:
				dropItem = 1127;
				return;
			case 232:
				dropItem = 1150;
				return;
			case 234:
				dropItem = 1246;
				return;
			case 239:
			{
				int num = (int)(*tileCache.frameX / 18);
				if (num == 0)
				{
					dropItem = 20;
				}
				if (num == 1)
				{
					dropItem = 703;
				}
				if (num == 2)
				{
					dropItem = 22;
				}
				if (num == 3)
				{
					dropItem = 704;
				}
				if (num == 4)
				{
					dropItem = 21;
				}
				if (num == 5)
				{
					dropItem = 705;
				}
				if (num == 6)
				{
					dropItem = 19;
				}
				if (num == 7)
				{
					dropItem = 706;
				}
				if (num == 8)
				{
					dropItem = 57;
				}
				if (num == 9)
				{
					dropItem = 117;
				}
				if (num == 10)
				{
					dropItem = 175;
				}
				if (num == 11)
				{
					dropItem = 381;
				}
				if (num == 12)
				{
					dropItem = 1184;
				}
				if (num == 13)
				{
					dropItem = 382;
				}
				if (num == 14)
				{
					dropItem = 1191;
				}
				if (num == 15)
				{
					dropItem = 391;
				}
				if (num == 16)
				{
					dropItem = 1198;
				}
				if (num == 17)
				{
					dropItem = 1006;
				}
				if (num == 18)
				{
					dropItem = 1225;
				}
				if (num == 19)
				{
					dropItem = 1257;
				}
				if (num == 20)
				{
					dropItem = 1552;
				}
				if (num == 21)
				{
					dropItem = 3261;
				}
				if (num == 22)
				{
					dropItem = 3467;
					return;
				}
				break;
			}
			case 248:
				dropItem = 1589;
				return;
			case 249:
				dropItem = 1591;
				return;
			case 250:
				dropItem = 1593;
				return;
			case 251:
				dropItem = 1725;
				return;
			case 252:
				dropItem = 1727;
				return;
			case 253:
				dropItem = 1729;
				return;
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
				dropItem = (int)(1970 + *tileCache.type - 255);
				return;
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
				dropItem = (int)(1970 + *tileCache.type - 262);
				return;
			case 272:
				dropItem = 1344;
				return;
			case 273:
				dropItem = 2119;
				return;
			case 274:
				dropItem = 2120;
				return;
			case 284:
				dropItem = 2173;
				return;
			case 311:
				dropItem = 2260;
				return;
			case 312:
				dropItem = 2261;
				return;
			case 313:
				dropItem = 2262;
				return;
			case 314:
				dropItem = Minecart.GetTrackItem(tileCache);
				return;
			case 315:
				dropItem = 2435;
				return;
			case 321:
				dropItem = 2503;
				return;
			case 322:
				dropItem = 2504;
				return;
			case 323:
			{
				dropItem = 2504;
				if (Main.tenthAnniversaryWorld)
				{
					dropItemStack += WorldGen.genRand.Next(2, 5);
				}
				if (*tileCache.frameX <= 132 && *tileCache.frameX >= 88)
				{
					secondaryItem = 27;
				}
				int j = y;
				while (!Main.tile[x, j].active() || !Main.tileSolid[(int)(*Main.tile[x, j].type)])
				{
					j++;
				}
				if (Main.tile[x, j].active())
				{
					ushort num6 = *Main.tile[x, j].type;
					if (num6 != 112)
					{
						if (num6 != 116)
						{
							if (num6 == 234)
							{
								dropItem = 911;
							}
						}
						else
						{
							dropItem = 621;
						}
					}
					else
					{
						dropItem = 619;
					}
					TileLoader.DropPalmTreeWood((int)(*Main.tile[x, j].type), ref dropItem);
					return;
				}
				break;
			}
			case 324:
				switch (*tileCache.frameY / 22)
				{
				case 0:
					dropItem = 2625;
					return;
				case 1:
					dropItem = 2626;
					return;
				case 2:
					dropItem = 4072;
					return;
				case 3:
					dropItem = 4073;
					return;
				case 4:
					dropItem = 4071;
					return;
				default:
					return;
				}
				break;
			case 325:
				dropItem = 2692;
				return;
			case 326:
				dropItem = 2693;
				return;
			case 327:
				dropItem = 2694;
				return;
			case 328:
				dropItem = 2695;
				return;
			case 329:
				dropItem = 2697;
				return;
			case 330:
				dropItem = 71;
				return;
			case 331:
				dropItem = 72;
				return;
			case 332:
				dropItem = 73;
				return;
			case 333:
				dropItem = 74;
				return;
			case 336:
				dropItem = 2701;
				return;
			case 340:
				dropItem = 2751;
				return;
			case 341:
				dropItem = 2752;
				return;
			case 342:
				dropItem = 2753;
				return;
			case 343:
				dropItem = 2754;
				return;
			case 344:
				dropItem = 2755;
				return;
			case 345:
				dropItem = 2787;
				return;
			case 346:
				dropItem = 2792;
				return;
			case 347:
				dropItem = 2793;
				return;
			case 348:
				dropItem = 2794;
				return;
			case 350:
				dropItem = 2860;
				return;
			case 351:
				dropItem = 2868;
				return;
			case 353:
				dropItem = 2996;
				return;
			case 357:
				dropItem = 3066;
				return;
			case 365:
				dropItem = 3077;
				return;
			case 366:
				dropItem = 3078;
				return;
			case 367:
				dropItem = 3081;
				return;
			case 368:
				dropItem = 3086;
				return;
			case 369:
				dropItem = 3087;
				return;
			case 370:
				dropItem = 3100;
				return;
			case 371:
				dropItem = 3113;
				return;
			case 372:
				dropItem = 3117;
				return;
			case 379:
				dropItem = 3214;
				return;
			case 380:
			{
				int num = (int)(*tileCache.frameY / 18);
				dropItem = 3215 + num;
				return;
			}
			case 383:
				dropItem = 620;
				return;
			case 385:
				dropItem = 3234;
				return;
			case 396:
				dropItem = 3271;
				return;
			case 397:
				dropItem = 3272;
				return;
			case 398:
				dropItem = 3274;
				return;
			case 399:
				dropItem = 3275;
				return;
			case 400:
				dropItem = 3276;
				return;
			case 401:
				dropItem = 3277;
				return;
			case 402:
				dropItem = 3338;
				return;
			case 403:
				dropItem = 3339;
				return;
			case 404:
				dropItem = 3347;
				return;
			case 407:
				dropItem = 3380;
				return;
			case 408:
				dropItem = 3460;
				return;
			case 409:
				dropItem = 3461;
				return;
			case 415:
				dropItem = 3573;
				return;
			case 416:
				dropItem = 3574;
				return;
			case 417:
				dropItem = 3575;
				return;
			case 418:
				dropItem = 3576;
				return;
			case 419:
				switch (*tileCache.frameX / 18)
				{
				case 0:
					dropItem = 3602;
					return;
				case 1:
					dropItem = 3618;
					return;
				case 2:
					dropItem = 3663;
					return;
				default:
					return;
				}
				break;
			case 420:
				switch (*tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3603;
					return;
				case 1:
					dropItem = 3604;
					return;
				case 2:
					dropItem = 3605;
					return;
				case 3:
					dropItem = 3606;
					return;
				case 4:
					dropItem = 3607;
					return;
				case 5:
					dropItem = 3608;
					return;
				default:
					return;
				}
				break;
			case 421:
				dropItem = 3609;
				return;
			case 422:
				dropItem = 3610;
				return;
			case 423:
				TELogicSensor.Kill(x, y);
				switch (*tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3613;
					return;
				case 1:
					dropItem = 3614;
					return;
				case 2:
					dropItem = 3615;
					return;
				case 3:
					dropItem = 3726;
					return;
				case 4:
					dropItem = 3727;
					return;
				case 5:
					dropItem = 3728;
					return;
				case 6:
					dropItem = 3729;
					return;
				default:
					return;
				}
				break;
			case 424:
				dropItem = 3616;
				return;
			case 426:
				dropItem = 3621;
				return;
			case 427:
				dropItem = 3622;
				return;
			case 428:
				switch (*tileCache.frameY / 18)
				{
				case 0:
					dropItem = 3630;
					break;
				case 1:
					dropItem = 3632;
					break;
				case 2:
					dropItem = 3631;
					break;
				case 3:
					dropItem = 3626;
					break;
				}
				PressurePlateHelper.DestroyPlate(new Point(x, y));
				return;
			case 429:
				dropItem = 3629;
				return;
			case 430:
				dropItem = 3633;
				return;
			case 431:
				dropItem = 3634;
				return;
			case 432:
				dropItem = 3635;
				return;
			case 433:
				dropItem = 3636;
				return;
			case 434:
				dropItem = 3637;
				return;
			case 435:
				dropItem = 3638;
				return;
			case 436:
				dropItem = 3639;
				return;
			case 437:
				dropItem = 3640;
				return;
			case 438:
				dropItem = 3641;
				return;
			case 439:
				dropItem = 3642;
				return;
			case 442:
				dropItem = 3707;
				return;
			case 445:
				dropItem = 3725;
				return;
			case 446:
				dropItem = 3736;
				return;
			case 447:
				dropItem = 3737;
				return;
			case 448:
				dropItem = 3738;
				return;
			case 449:
				dropItem = 3739;
				return;
			case 450:
				dropItem = 3740;
				return;
			case 451:
				dropItem = 3741;
				return;
			case 458:
				dropItem = 3754;
				return;
			case 459:
				dropItem = 3755;
				return;
			case 460:
				dropItem = 3756;
				return;
			case 472:
				dropItem = 3951;
				return;
			case 473:
				dropItem = 3953;
				return;
			case 474:
				dropItem = 3955;
				return;
			case 476:
				dropItem = 4040;
				return;
			case 478:
				dropItem = 4050;
				return;
			case 479:
				dropItem = 4051;
				return;
			case 494:
				dropItem = 4089;
				return;
			case 495:
				dropItem = 4090;
				return;
			case 496:
				dropItem = 4091;
				return;
			case 498:
				dropItem = 4139;
				return;
			case 500:
				dropItem = 4229;
				return;
			case 501:
				dropItem = 4230;
				return;
			case 502:
				dropItem = 4231;
				return;
			case 503:
				dropItem = 4232;
				return;
			case 507:
				dropItem = 4277;
				return;
			case 508:
				dropItem = 4278;
				return;
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 535:
			case 537:
			case 540:
			case 626:
			case 628:
				dropItem = 129;
				return;
			case 519:
				if (*tileCache.frameY == 90 && WorldGen.genRand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 520:
				dropItem = 4326;
				return;
			case 528:
				if (WorldGen.genRand.Next(2) == 0)
				{
					dropItem = 183;
					return;
				}
				break;
			case 541:
				dropItem = 4392;
				return;
			case 546:
			case 557:
				dropItem = 4422;
				return;
			case 561:
				dropItem = 4554;
				return;
			case 562:
				dropItem = 4564;
				return;
			case 563:
				dropItem = 4547;
				return;
			case 566:
				dropItem = 999;
				return;
			case 571:
				dropItem = 4564;
				dropItemStack = WorldGen.genRand.Next(1, 3);
				return;
			case 574:
				dropItem = 4717;
				return;
			case 575:
				dropItem = 4718;
				return;
			case 576:
				dropItem = 4719;
				return;
			case 577:
				dropItem = 4720;
				return;
			case 578:
				dropItem = 4721;
				return;
			case 579:
				dropItem = 4761;
				return;
			case 583:
				WorldGen.SetGemTreeDrops(180, 4851, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 584:
				WorldGen.SetGemTreeDrops(181, 4852, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 585:
				WorldGen.SetGemTreeDrops(177, 4853, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 586:
				WorldGen.SetGemTreeDrops(179, 4854, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 587:
				WorldGen.SetGemTreeDrops(178, 4855, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 588:
				WorldGen.SetGemTreeDrops(182, 4856, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
				}
				break;
			case 589:
				WorldGen.SetGemTreeDrops(999, 4857, tileCache, ref dropItem, ref secondaryItem);
				if (dropItem == 3)
				{
					dropItemStack = Main.rand.Next(1, 3);
					return;
				}
				break;
			case 593:
				dropItem = 4868;
				return;
			case 618:
				dropItem = 4962;
				return;
			case 624:
				dropItem = 5114;
				return;
			case 630:
				dropItem = 5137;
				return;
			case 631:
				dropItem = 5138;
				return;
			case 633:
				dropItem = 172;
				return;
			case 635:
				dropItem = 5215;
				return;
			case 637:
				if (Main.rand.Next(100) == 0)
				{
					dropItem = 5214;
					return;
				}
				break;
			case 641:
				dropItem = 5306;
				return;
			case 646:
				dropItem = 5322;
				return;
			case 650:
			{
				int num = (int)(*tileCache.frameX / 18);
				if (num < 6)
				{
					dropItem = 3;
					return;
				}
				if (num < 12)
				{
					dropItem = 2;
					return;
				}
				if (num < 20)
				{
					dropItem = 154;
					return;
				}
				if (num < 28)
				{
					dropItem = 154;
					return;
				}
				if (num < 36)
				{
					dropItem = 9;
					return;
				}
				if (num < 42)
				{
					dropItem = 593;
					return;
				}
				if (num < 48)
				{
					dropItem = 664;
					return;
				}
				if (num < 54)
				{
					dropItem = 150;
					return;
				}
				if (num < 60)
				{
					dropItem = 3271;
					return;
				}
				if (num < 66)
				{
					dropItem = 3086;
					return;
				}
				if (num < 72)
				{
					dropItem = 3081;
					return;
				}
				if (num < 73)
				{
					dropItem = 62;
					return;
				}
				if (num < 77)
				{
					dropItem = 169;
					return;
				}
				break;
			}
			case 656:
				dropItem = 5333;
				return;
			case 659:
				dropItem = 5349;
				return;
			case 666:
				dropItem = 5395;
				return;
			case 667:
				dropItem = 5398;
				return;
			case 668:
				dropItem = 5400;
				return;
			case 669:
				dropItem = 5401;
				return;
			case 670:
				dropItem = 5402;
				return;
			case 671:
				dropItem = 5403;
				return;
			case 672:
				dropItem = 5404;
				return;
			case 673:
				dropItem = 5405;
				return;
			case 674:
				dropItem = 5406;
				return;
			case 675:
				dropItem = 5407;
				return;
			case 676:
				dropItem = 5408;
				return;
			case 677:
				dropItem = 5417;
				return;
			case 678:
				dropItem = 5419;
				return;
			case 679:
				dropItem = 5421;
				return;
			case 680:
				dropItem = 5423;
				return;
			case 681:
				dropItem = 5425;
				return;
			case 682:
				dropItem = 5427;
				return;
			case 683:
				dropItem = 5433;
				return;
			case 684:
				dropItem = 5435;
				return;
			case 685:
				dropItem = 5429;
				return;
			case 686:
				dropItem = 5431;
				return;
			case 687:
				dropItem = 5439;
				return;
			case 688:
				dropItem = 5440;
				return;
			case 689:
				dropItem = 5441;
				return;
			case 690:
				dropItem = 5442;
				return;
			case 691:
				dropItem = 5443;
				return;
			case 692:
				dropItem = 5444;
				return;
			default:
				return;
			}
		}

		// Token: 0x06001304 RID: 4868 RVA: 0x00473980 File Offset: 0x00471B80
		private unsafe static void SetGemTreeDrops(int gemType, int seedType, Tile tileCache, ref int dropItem, ref int secondaryItem)
		{
			if (Main.rand.Next(10) == 0)
			{
				dropItem = gemType;
			}
			else
			{
				dropItem = 3;
			}
			if (*tileCache.frameX >= 22 && *tileCache.frameY >= 198 && Main.rand.Next(2) == 0)
			{
				secondaryItem = seedType;
			}
		}

		// Token: 0x06001305 RID: 4869 RVA: 0x004739CF File Offset: 0x00471BCF
		private static void SetVanityTreeDrops(int dropType, Tile tileCache, ref int dropItem)
		{
			if (Main.rand.Next(2) == 0)
			{
				dropItem = dropType;
			}
		}

		// Token: 0x06001306 RID: 4870 RVA: 0x004739E4 File Offset: 0x00471BE4
		public static bool IsHarvestableHerbWithSeed(int type, int style)
		{
			if (type == 82)
			{
				return false;
			}
			if (type - 83 > 1)
			{
				return false;
			}
			bool result = false;
			if (type == 84)
			{
				result = true;
			}
			if (style == 0 && Main.dayTime)
			{
				result = true;
			}
			if (style == 1 && !Main.dayTime)
			{
				result = true;
			}
			if (style == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
			{
				result = true;
			}
			if (style == 4 && (Main.raining || Main.cloudAlpha > 0f))
			{
				result = true;
			}
			if (style == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06001307 RID: 4871 RVA: 0x00473A7E File Offset: 0x00471C7E
		private static bool KillTile_ShouldDropSeeds(int x, int y)
		{
			return Main.rand.Next(2) == 0 && (WorldGen.GetPlayerForTile(x, y).HasItem(281) || WorldGen.GetPlayerForTile(x, y).HasItem(986));
		}

		// Token: 0x06001308 RID: 4872 RVA: 0x00473AB8 File Offset: 0x00471CB8
		private unsafe static void KillTile_GetTreeDrops(int i, int j, Tile tileCache, ref bool bonusWood, ref int dropItem, ref int secondaryItem)
		{
			if (*tileCache.frameX >= 22 && *tileCache.frameY >= 198)
			{
				if (Main.netMode != 1)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						int k = j;
						while (Main.tile[i, k] != null && (!Main.tile[i, k].active() || !Main.tileSolid[(int)(*Main.tile[i, k].type)] || Main.tileSolidTop[(int)(*Main.tile[i, k].type)]))
						{
							k++;
						}
						if (Main.tile[i, k] != null)
						{
							Tile tile = Main.tile[i, k];
							bool vanillaResult = false;
							if (*tile.type == 2 || *tile.type == 109 || *tile.type == 477 || *tile.type == 492 || *tile.type == 147 || *tile.type == 199 || *tile.type == 23 || *tile.type == 633)
							{
								vanillaResult = true;
							}
							if (vanillaResult || TileLoader.CanDropAcorn((int)(*tile.type)))
							{
								dropItem = 9;
								secondaryItem = 27;
							}
							else
							{
								dropItem = 9;
							}
						}
					}
					else
					{
						dropItem = 9;
					}
				}
			}
			else
			{
				dropItem = 9;
			}
			if (dropItem != 9)
			{
				return;
			}
			int x;
			int y;
			WorldGen.GetTreeBottom(i, j, out x, out y);
			if (Main.tile[x, y].active())
			{
				ushort num2 = *Main.tile[x, y].type;
				if (num2 > 147)
				{
					if (num2 <= 492)
					{
						if (num2 != 199)
						{
							if (num2 != 492)
							{
								goto IL_295;
							}
							goto IL_266;
						}
					}
					else
					{
						if (num2 == 633)
						{
							dropItem = 5215;
							goto IL_295;
						}
						if (num2 == 661)
						{
							goto IL_248;
						}
						if (num2 != 662)
						{
							goto IL_295;
						}
					}
					dropItem = 911;
					goto IL_295;
				}
				if (num2 <= 60)
				{
					if (num2 != 23)
					{
						if (num2 != 60)
						{
							goto IL_295;
						}
						dropItem = 620;
						goto IL_295;
					}
				}
				else if (num2 != 70)
				{
					if (num2 == 109)
					{
						goto IL_266;
					}
					if (num2 != 147)
					{
						goto IL_295;
					}
					dropItem = 2503;
					goto IL_295;
				}
				else
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						dropItem = 183;
						goto IL_295;
					}
					dropItem = 0;
					goto IL_295;
				}
				IL_248:
				dropItem = 619;
				goto IL_295;
				IL_266:
				dropItem = 621;
				IL_295:
				TileLoader.DropTreeWood((int)(*Main.tile[x, y].type), ref dropItem);
			}
			int num = (int)Player.FindClosest(new Vector2((float)(x * 16), (float)(y * 16)), 16, 16);
			int axe = Main.player[num].inventory[Main.player[num].selectedItem].axe;
			if (WorldGen.genRand.Next(100) < axe || Main.rand.Next(3) == 0)
			{
				bonusWood = true;
			}
		}

		// Token: 0x06001309 RID: 4873 RVA: 0x00473DD0 File Offset: 0x00471FD0
		private unsafe static void KillTile_DropBait(int i, int j, Tile tileCache)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int num5 = (int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16);
			if (*tileCache.type == 3)
			{
				num = 400;
				num2 = 100;
				if (Main.player[num5].flowerBoots && *tileCache.frameX >= 108)
				{
					num *= 10000;
					num2 *= 10000;
				}
			}
			if (*tileCache.type == 73)
			{
				num = 200;
				num2 = 50;
				if (Main.player[num5].flowerBoots && *tileCache.frameX >= 108)
				{
					num *= 10000;
					num2 *= 10000;
				}
			}
			if (*tileCache.type == 637)
			{
				num4 = 100;
				if (Main.player[num5].flowerBoots && *tileCache.frameX >= 108)
				{
					num4 *= 10000;
				}
			}
			if (*tileCache.type == 61)
			{
				num3 = 80;
				if (Main.player[num5].flowerBoots && *tileCache.frameX >= 108)
				{
					num3 *= 10000;
				}
			}
			if (*tileCache.type == 74)
			{
				num3 = 40;
				if (Main.player[num5].flowerBoots && *tileCache.frameX >= 108)
				{
					num3 *= 10000;
				}
			}
			if (*tileCache.type == 62)
			{
				num3 = 250;
			}
			if (*tileCache.type == 185)
			{
				if (*tileCache.frameY == 0 && *tileCache.frameX < 214)
				{
					num = 6;
				}
				if (*tileCache.frameY == 18 && (*tileCache.frameX < 214 || *tileCache.frameX >= 1368))
				{
					num = 6;
				}
			}
			else if (*tileCache.type == 186)
			{
				if (*tileCache.frameX >= 378 && *tileCache.frameX <= 700)
				{
					num = 6;
				}
			}
			else if (*tileCache.type == 187)
			{
				if (*tileCache.frameX >= 756 && *tileCache.frameX <= 916)
				{
					num = 6;
				}
				if (*tileCache.frameX <= 322)
				{
					num = 6;
				}
			}
			else if (*tileCache.type == 233)
			{
				num3 = 10;
			}
			int num6 = 357;
			if (Main.player[num5].ZoneGraveyard)
			{
				num6 = 606;
			}
			TileLoader.DropCritterChance(i, j, (int)(*tileCache.type), ref num, ref num2, ref num3);
			if (num > 0 && NPC.CountNPCS(num6) < 5 && WorldGen.genRand.Next(num) == 0)
			{
				int type = num6;
				if (num6 == 357 && Player.GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
				{
					type = 448;
				}
				int num7 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num7].TargetClosest(true);
				Main.npc[num7].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num7].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num7].direction);
				Main.npc[num7].direction *= -1;
				Main.npc[num7].netUpdate = true;
			}
			if (num2 > 0 && NPC.CountNPCS(377) < 5 && WorldGen.genRand.Next(num2) == 0)
			{
				int type2 = 377;
				if (Player.GetClosestRollLuck(i, j, NPC.goldCritterChance) == 0f)
				{
					type2 = 446;
				}
				int num8 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type2, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num8].TargetClosest(true);
				Main.npc[num8].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num8].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num8].direction);
				Main.npc[num8].direction *= -1;
				Main.npc[num8].netUpdate = true;
			}
			if (num3 > 0 && NPC.CountNPCS(485) + NPC.CountNPCS(486) + NPC.CountNPCS(487) < 8 && WorldGen.genRand.Next(num3) == 0)
			{
				int type3 = 485;
				if (WorldGen.genRand.Next(4) == 0)
				{
					type3 = 486;
				}
				if (WorldGen.genRand.Next(12) == 0)
				{
					type3 = 487;
				}
				int num9 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type3, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num9].TargetClosest(true);
				Main.npc[num9].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num9].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num9].direction);
				Main.npc[num9].direction *= -1;
				Main.npc[num9].netUpdate = true;
			}
			if (num4 > 0 && NPC.CountNPCS(654) + NPC.CountNPCS(653) < 8 && WorldGen.genRand.Next(num4) == 0)
			{
				int type4 = 653;
				if (WorldGen.genRand.Next(2) == 0)
				{
					type4 = 654;
				}
				int num10 = NPC.NewNPC(WorldGen.GetNPCSource_TileBreak(i, j), i * 16 + 10, j * 16, type4, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num10].TargetClosest(true);
				Main.npc[num10].velocity.Y = (float)WorldGen.genRand.Next(-50, -21) * 0.1f;
				Main.npc[num10].velocity.X = (float)WorldGen.genRand.Next(0, 26) * 0.1f * (float)(-(float)Main.npc[num10].direction);
				Main.npc[num10].direction *= -1;
				Main.npc[num10].netUpdate = true;
			}
		}

		// Token: 0x0600130A RID: 4874 RVA: 0x0047449C File Offset: 0x0047269C
		public unsafe static void KillTile_PlaySounds(int i, int j, bool fail, Tile tileCache)
		{
			if (WorldGen.gen)
			{
				return;
			}
			int type = (int)(*tileCache.type);
			if (!TileLoader.KillSound(i, j, type, fail))
			{
				return;
			}
			if (type == 127 || type == 623)
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item27), i * 16, j * 16);
			}
			else if (type == 147 || type == 224)
			{
				if (WorldGen.genRand.Next(2) == 0)
				{
					SoundEngine.PlaySound(new SoundStyle?(SoundID.Item48), i * 16, j * 16);
				}
				else
				{
					SoundEngine.PlaySound(new SoundStyle?(SoundID.Item49), i * 16, j * 16);
				}
			}
			else if (type == 161 || type == 163 || type == 164 || type == 200 || type == 541)
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item50), i * 16, j * 16);
			}
			else if (type == 518 || type == 519 || type == 528 || type == 529 || type == 549 || type == 637 || type == 638 || type == 636)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else if (type == 530 && *tileCache.frameX < 270)
			{
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
			}
			else
			{
				if (type <= 24)
				{
					if (type != 3)
					{
						if (type != 24)
						{
							goto IL_1F6;
						}
						SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
						goto IL_926;
					}
				}
				else if (type != 110)
				{
					if (type != 254)
					{
						goto IL_1F6;
					}
					SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
					goto IL_926;
				}
				SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				goto IL_926;
				IL_1F6:
				if (Main.tileAlch[type] || type == 384 || type == 227 || type == 32 || type == 51 || type == 52 || type == 61 || type == 62 || type == 69 || type == 655 || type == 71 || type == 73 || type == 74 || type == 113 || type == 115 || type == 184 || type == 192 || type == 205 || type == 233 || type == 352 || type == 382 || type == 624 || type == 656)
				{
					SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				}
				else if (type == 485)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 11, 1f, 0f);
				}
				else if (type == 201)
				{
					SoundEngine.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
				}
				else if (type == 481 || type == 482 || type == 483)
				{
					SoundEngine.PlaySound(new SoundStyle?(SoundID.Item127), i * 16, j * 16);
				}
				else if (type == 1 || type == 6 || type == 7 || type == 8 || type == 9 || type == 22 || type == 140 || type == 25 || type == 37 || type == 38 || type == 39 || type == 41 || type == 43 || type == 44 || type == 45 || type == 46 || type == 47 || type == 48 || type == 56 || type == 58 || type == 63 || type == 64 || type == 65 || type == 66 || type == 67 || type == 68 || type == 75 || type == 76 || type == 107 || type == 108 || type == 111 || type == 117 || type == 118 || type == 119 || type == 120 || type == 121 || type == 122 || type == 150 || type == 151 || type == 152 || type == 153 || type == 154 || type == 155 || type == 156 || type == 160 || type == 161 || type == 166 || type == 167 || type == 168 || type == 169 || type == 175 || type == 176 || type == 177 || type == 203 || type == 202 || type == 204 || type == 206 || type == 211 || type == 221 || type == 222 || type == 223 || type == 226 || type == 248 || type == 249 || type == 250 || type == 272 || type == 273 || type == 274 || type == 478 || type == 284 || type == 325 || type == 346 || type == 347 || type == 348 || type == 350 || type == 367 || type == 357 || type == 368 || type == 369 || type == 370 || type == 407 || type == 472 || type == 473 || type == 500 || type == 501 || type == 502 || type == 503 || type == 546 || type == 557 || type == 566 || type == 618 || type == 408 || type == 409 || type == 669 || type == 670 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675 || type == 676 || type == 677 || type == 678 || type == 679 || type == 680 || type == 681 || type == 682 || type == 683 || type == 684 || type == 685 || type == 686 || type == 687 || type == 689 || type == 688 || type == 690 || type == 691 || type == 692)
				{
					SoundEngine.PlaySound(21, i * 16, j * 16, 1, 1f, 0f);
				}
				else if (type == 666)
				{
					SoundEngine.PlaySound(new SoundStyle?(SoundID.Item177), i * 16, j * 16);
				}
				else if (type == 231 || type == 195 || type == 474)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
					if (type == 231)
					{
						SoundEngine.PlaySound(new SoundStyle?(SoundID.Item173), i * 16, j * 16);
					}
				}
				else if (type == 26 && *tileCache.frameX >= 54)
				{
					SoundEngine.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
				}
				else if (type != 314)
				{
					if (type - 330 > 3)
					{
						if ((type == 162 || type == 385 || type == 129 || (type == 165 && *tileCache.frameX < 54)) && !fail)
						{
							SoundEngine.PlaySound(new SoundStyle?(SoundID.Item27), i * 16, j * 16);
						}
						else if (type != 138)
						{
							SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
						}
					}
					else
					{
						SoundEngine.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
					}
				}
				else
				{
					SoundEngine.PlaySound(new SoundStyle?(SoundID.Item52), i * 16, j * 16);
				}
			}
			IL_926:
			if (!fail)
			{
				if (*tileCache.type == 13)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 54)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 326)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 327)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 458)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 459)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 345)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 328)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 329)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 507)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
					return;
				}
				if (*tileCache.type == 508)
				{
					SoundEngine.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
				}
			}
		}

		// Token: 0x0600130B RID: 4875 RVA: 0x00474FA8 File Offset: 0x004731A8
		public unsafe static Rectangle? GetTileVisualHitbox(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.nactive())
			{
				return null;
			}
			Rectangle value;
			value..ctor(x * 16, y * 16, 16, 16);
			if (*tile.type == 323)
			{
				value.X += (int)(*tile.frameY);
			}
			if (tile.halfBrick())
			{
				value.Y += 8;
				value.Height = 8;
			}
			return new Rectangle?(value);
		}

		// Token: 0x0600130C RID: 4876 RVA: 0x00475038 File Offset: 0x00473238
		public unsafe static int KillTile_GetTileDustAmount(bool fail, Tile tileCache, int x, int y)
		{
			int result = WorldGen.KillTile_GetTileDustAmount_Vanilla(fail, tileCache);
			TileLoader.NumDust(x, y, (int)(*tileCache.type), fail, ref result);
			return result;
		}

		// Token: 0x0600130D RID: 4877 RVA: 0x00475060 File Offset: 0x00473260
		private unsafe static int KillTile_GetTileDustAmount_Vanilla(bool fail, Tile tileCache)
		{
			ushort num = *tileCache.type;
			if (num <= 484)
			{
				if (num <= 287)
				{
					if (num <= 172)
					{
						if (num == 125 || num == 138 || num == 172)
						{
							return 0;
						}
					}
					else if (num != 184)
					{
						if (num != 231)
						{
							if (num == 287)
							{
								return 0;
							}
						}
						else
						{
							if (!fail)
							{
								return 6;
							}
							return 3;
						}
					}
					else
					{
						if (*tileCache.frameX / 22 >= 5)
						{
							return 5;
						}
						if (!fail)
						{
							return 10;
						}
						return 3;
					}
				}
				else if (num <= 376)
				{
					if (num - 300 <= 8 || num - 354 <= 1 || num - 373 <= 3)
					{
						return 0;
					}
				}
				else
				{
					if (num == 461)
					{
						return 0;
					}
					if (num - 481 <= 2)
					{
						return 3;
					}
					if (num == 484)
					{
						return 0;
					}
				}
			}
			else
			{
				if (num <= 549)
				{
					if (num <= 536)
					{
						if (num == 499)
						{
							return 0;
						}
						if (num != 534 && num != 536)
						{
							goto IL_179;
						}
					}
					else if (num != 539)
					{
						if (num == 541)
						{
							return 1;
						}
						if (num != 549)
						{
							goto IL_179;
						}
						return 2;
					}
				}
				else if (num <= 617)
				{
					if (num - 564 > 1 && num - 593 > 1 && num != 617)
					{
						goto IL_179;
					}
					return 0;
				}
				else
				{
					switch (num)
					{
					case 625:
					case 627:
						break;
					case 626:
					case 628:
					case 629:
						goto IL_179;
					case 630:
					case 631:
						return 0;
					default:
						if (num == 654)
						{
							return 0;
						}
						if (num - 664 > 1)
						{
							goto IL_179;
						}
						return 0;
					}
				}
				if (!fail)
				{
					return 5;
				}
				return 3;
			}
			IL_179:
			if (!fail)
			{
				return 10;
			}
			return 3;
		}

		// Token: 0x0600130E RID: 4878 RVA: 0x00475220 File Offset: 0x00473420
		public unsafe static int KillTile_MakeTileDust(int i, int j, Tile tileCache)
		{
			int num = 0;
			if (*tileCache.type == 216)
			{
				num = -1;
			}
			if (*tileCache.type == 324)
			{
				num = (int)((*tileCache.frameY != 0) ? (281 + *tileCache.frameX / 18) : 280);
			}
			if (*tileCache.type == 216)
			{
				num = -1;
			}
			if (*tileCache.type == 335)
			{
				num = -1;
			}
			if (*tileCache.type == 338)
			{
				num = -1;
			}
			if (*tileCache.type == 0)
			{
				num = 0;
			}
			if (*tileCache.type == 192)
			{
				num = 3;
			}
			if (*tileCache.type == 208)
			{
				num = 126;
			}
			else if (*tileCache.type == 408 || *tileCache.type == 409)
			{
				num = 265;
			}
			else if (*tileCache.type == 669)
			{
				num = 314;
			}
			else if (*tileCache.type == 670)
			{
				num = 315;
			}
			else if (*tileCache.type == 671)
			{
				num = 316;
			}
			else if (*tileCache.type == 672)
			{
				num = 317;
			}
			else if (*tileCache.type == 673)
			{
				num = 318;
			}
			else if (*tileCache.type == 674)
			{
				num = 319;
			}
			else if (*tileCache.type == 675)
			{
				num = 320;
			}
			else if (*tileCache.type == 676)
			{
				num = 321;
			}
			if (*tileCache.type == 16)
			{
				num = 1;
				if (*tileCache.frameX >= 36)
				{
					num = 82;
				}
			}
			else if (*tileCache.type == 415 || *tileCache.type == 500)
			{
				num = 6;
			}
			else if (*tileCache.type == 416 || *tileCache.type == 501)
			{
				num = 61;
			}
			else if (*tileCache.type == 417 || *tileCache.type == 502)
			{
				num = 242;
			}
			else if (*tileCache.type == 418 || *tileCache.type == 503)
			{
				num = 135;
			}
			else if (*tileCache.type == 474)
			{
				num = 18;
			}
			if (*tileCache.type == 1 || *tileCache.type == 17 || *tileCache.type == 38 || *tileCache.type == 39 || *tileCache.type == 41 || *tileCache.type == 43 || *tileCache.type == 44 || *tileCache.type == 481 || *tileCache.type == 482 || *tileCache.type == 483 || *tileCache.type == 48 || Main.tileStone[(int)(*tileCache.type)] || *tileCache.type == 85 || *tileCache.type == 90 || *tileCache.type == 92 || *tileCache.type == 96 || *tileCache.type == 97 || *tileCache.type == 99 || *tileCache.type == 117 || *tileCache.type == 130 || *tileCache.type == 131 || *tileCache.type == 132 || *tileCache.type == 135 || *tileCache.type == 135 || *tileCache.type == 142 || *tileCache.type == 143 || *tileCache.type == 144 || *tileCache.type == 210 || *tileCache.type == 207 || *tileCache.type == 235 || *tileCache.type == 247 || *tileCache.type == 272 || *tileCache.type == 273 || *tileCache.type == 283 || *tileCache.type == 410 || *tileCache.type == 480 || *tileCache.type == 509 || *tileCache.type == 618 || *tileCache.type == 657 || *tileCache.type == 658 || *tileCache.type == 677 || *tileCache.type == 678 || *tileCache.type == 679)
			{
				num = 1;
			}
			if (*tileCache.type == 379)
			{
				num = 257;
			}
			if (*tileCache.type == 311)
			{
				num = 207;
			}
			if (*tileCache.type == 312)
			{
				num = 208;
			}
			if (*tileCache.type == 313)
			{
				num = 209;
			}
			if (*tileCache.type == 104)
			{
				num = -1;
			}
			if (*tileCache.type == 95 || *tileCache.type == 98 || *tileCache.type == 100 || *tileCache.type == 174 || *tileCache.type == 173)
			{
				num = 6;
			}
			if (*tileCache.type == 30 || *tileCache.type == 86 || *tileCache.type == 94 || *tileCache.type == 106 || *tileCache.type == 114 || *tileCache.type == 124 || *tileCache.type == 128 || *tileCache.type == 269)
			{
				num = 7;
			}
			if (*tileCache.type == 372)
			{
				num = 242;
			}
			if (*tileCache.type == 646)
			{
				num = 29;
			}
			if (*tileCache.type == 49)
			{
				num = 29;
			}
			if (*tileCache.type == 371)
			{
				num = 243;
			}
			if (*tileCache.type == 334)
			{
				num = 7;
			}
			ushort num24 = *tileCache.type;
			if (num24 > 209)
			{
				if (num24 > 548)
				{
					if (num24 <= 638)
					{
						switch (num24)
						{
						case 557:
							goto IL_B9A;
						case 558:
						case 559:
						case 561:
						case 562:
						case 563:
						case 566:
						case 568:
						case 569:
						case 570:
						case 571:
						case 573:
						case 574:
						case 575:
						case 576:
						case 577:
						case 578:
						case 580:
						case 581:
						case 582:
							goto IL_D9D;
						case 560:
						case 564:
						case 565:
						case 567:
						case 572:
						case 579:
						case 591:
						case 592:
						case 593:
						case 594:
							goto IL_B50;
						case 583:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 87);
							goto IL_D9D;
						case 584:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 86);
							goto IL_D9D;
						case 585:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 88);
							goto IL_D9D;
						case 586:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 89);
							goto IL_D9D;
						case 587:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 90);
							goto IL_D9D;
						case 588:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 91);
							goto IL_D9D;
						case 589:
							num = ((WorldGen.genRand.Next(10) != 0) ? 1 : 138);
							goto IL_D9D;
						case 590:
							num = 1;
							goto IL_D9D;
						case 595:
							num = 78;
							goto IL_D9D;
						case 596:
							num = 78;
							goto IL_D9D;
						default:
							switch (num24)
							{
							case 613:
							case 614:
							case 621:
							case 622:
							case 623:
							case 624:
							case 630:
							case 631:
								goto IL_B50;
							case 615:
								num = 78;
								goto IL_D9D;
							case 616:
								num = 78;
								goto IL_D9D;
							case 617:
							case 618:
							case 619:
							case 620:
							case 625:
							case 627:
							case 628:
							case 629:
							case 632:
							case 635:
							case 636:
								goto IL_D9D;
							case 626:
								break;
							case 633:
								num = ((WorldGen.genRand.Next(6) != 0) ? 237 : 36);
								goto IL_D9D;
							case 634:
								num = ((WorldGen.genRand.Next(10) != 0) ? 36 : 31);
								if (WorldGen.genRand.Next(12) == 0)
								{
									num = 6;
									goto IL_D9D;
								}
								goto IL_D9D;
							case 637:
							case 638:
								num = 237;
								goto IL_D9D;
							default:
								goto IL_D9D;
							}
							break;
						}
					}
					else
					{
						if (num24 == 656)
						{
							goto IL_B50;
						}
						if (num24 == 668)
						{
							num = 0;
							goto IL_D9D;
						}
						switch (num24)
						{
						case 677:
							goto IL_B71;
						case 678:
							goto IL_B7C;
						case 679:
							goto IL_B87;
						case 680:
						case 681:
						case 682:
						case 683:
						case 684:
						case 685:
						case 686:
							goto IL_D9D;
						case 687:
							goto IL_BA9;
						case 688:
							goto IL_BCA;
						case 689:
							goto IL_BB4;
						case 690:
							goto IL_BBF;
						case 691:
							break;
						default:
							goto IL_D9D;
						}
					}
					num = 305;
					goto IL_D9D;
				}
				if (num24 <= 387)
				{
					if (num24 - 319 > 1 && num24 - 386 > 1)
					{
						goto IL_D9D;
					}
					goto IL_B50;
				}
				else
				{
					if (num24 == 390)
					{
						goto IL_B50;
					}
					switch (num24)
					{
					case 405:
					case 406:
					case 411:
					case 412:
					case 419:
					case 420:
					case 421:
					case 422:
					case 423:
					case 424:
					case 425:
					case 428:
					case 429:
					case 441:
					case 442:
					case 445:
					case 446:
					case 447:
					case 448:
					case 449:
					case 450:
					case 451:
					case 452:
					case 453:
					case 455:
					case 456:
					case 457:
					case 462:
					case 463:
					case 464:
					case 465:
					case 466:
					case 468:
					case 476:
					case 486:
					case 487:
					case 489:
					case 490:
					case 491:
					case 493:
					case 494:
					case 497:
					case 510:
					case 511:
					case 520:
					case 521:
					case 522:
					case 523:
					case 524:
					case 525:
					case 526:
					case 527:
					case 531:
					case 545:
					case 547:
					case 548:
						goto IL_B50;
					case 407:
						num = 10;
						goto IL_D9D;
					case 408:
					case 409:
					case 410:
					case 413:
					case 414:
					case 415:
					case 416:
					case 417:
					case 418:
					case 426:
					case 427:
					case 430:
					case 431:
					case 432:
					case 433:
					case 434:
					case 435:
					case 436:
					case 437:
					case 438:
					case 439:
					case 440:
					case 443:
					case 444:
					case 458:
					case 459:
					case 460:
					case 461:
					case 467:
					case 469:
					case 470:
					case 471:
					case 474:
					case 475:
					case 477:
					case 478:
					case 479:
					case 480:
					case 484:
					case 485:
					case 488:
					case 492:
					case 495:
					case 496:
					case 499:
					case 500:
					case 501:
					case 502:
					case 503:
					case 504:
					case 505:
					case 506:
					case 507:
					case 508:
					case 509:
					case 518:
					case 519:
					case 528:
					case 529:
					case 530:
					case 532:
					case 533:
					case 534:
					case 536:
					case 538:
					case 539:
					case 542:
					case 543:
					case 544:
						goto IL_D9D;
					case 454:
						num = 139;
						goto IL_D9D;
					case 472:
					case 546:
						break;
					case 473:
						num = 82;
						goto IL_D9D;
					case 481:
						goto IL_B71;
					case 482:
						goto IL_B7C;
					case 483:
						goto IL_B87;
					case 498:
						num = 30;
						goto IL_D9D;
					case 512:
						num = 93;
						goto IL_D9D;
					case 513:
						num = 94;
						goto IL_D9D;
					case 514:
						num = 95;
						goto IL_D9D;
					case 515:
						num = 96;
						goto IL_D9D;
					case 516:
						num = 97;
						goto IL_D9D;
					case 517:
						goto IL_BA9;
					case 535:
						goto IL_BB4;
					case 537:
						goto IL_BBF;
					case 540:
						goto IL_BCA;
					case 541:
						num = 226;
						goto IL_D9D;
					default:
						goto IL_D9D;
					}
				}
				IL_B9A:
				num = 8;
				goto IL_D9D;
				IL_BA9:
				num = 258;
				goto IL_D9D;
				IL_BB4:
				num = 299;
				goto IL_D9D;
				IL_BBF:
				num = 300;
				goto IL_D9D;
				IL_BCA:
				num = 301;
				goto IL_D9D;
			}
			if (num24 <= 89)
			{
				if (num24 <= 44)
				{
					if (num24 - 10 > 1)
					{
						switch (num24)
						{
						case 41:
							goto IL_B71;
						case 42:
							goto IL_D9D;
						case 43:
							goto IL_B7C;
						case 44:
							goto IL_B87;
						default:
							goto IL_D9D;
						}
					}
				}
				else if (num24 != 87 && num24 != 89)
				{
					goto IL_D9D;
				}
			}
			else if (num24 <= 139)
			{
				if (num24 != 93 && num24 != 139)
				{
					goto IL_D9D;
				}
			}
			else if (num24 != 184)
			{
				if (num24 != 209)
				{
					goto IL_D9D;
				}
			}
			else
			{
				int num2 = (int)(*tileCache.frameX / 22);
				switch (num2)
				{
				case 5:
					num = 258;
					goto IL_D9D;
				case 6:
					num = 299;
					goto IL_D9D;
				case 7:
					num = 300;
					goto IL_D9D;
				case 8:
					num = 301;
					goto IL_D9D;
				case 9:
					num = 305;
					goto IL_D9D;
				case 10:
					num = 267;
					goto IL_D9D;
				default:
					num = 93 + num2;
					goto IL_D9D;
				}
			}
			IL_B50:
			num = -1;
			goto IL_D9D;
			IL_B71:
			num = 275;
			goto IL_D9D;
			IL_B7C:
			num = 276;
			goto IL_D9D;
			IL_B87:
			num = 277;
			IL_D9D:
			if (Main.tileMoss[(int)(*tileCache.type)])
			{
				num = (int)((*tileCache.type == 381) ? 258 : ((*tileCache.type == 534) ? 299 : ((*tileCache.type == 536) ? 300 : ((*tileCache.type == 539) ? 301 : ((*tileCache.type == 625) ? 305 : ((*tileCache.type != 627) ? (*tileCache.type - 179 + 93) : 267))))));
			}
			if (*tileCache.type == 240)
			{
				int num3 = (int)(*tileCache.frameX / 54);
				if (*tileCache.frameY >= 54)
				{
					num3 += (int)(36 * (*tileCache.frameY / 54));
				}
				num = 7;
				if (num3 == 16 || num3 == 17)
				{
					num = 26;
				}
				if (num3 >= 46 && num3 <= 49)
				{
					num = -1;
				}
			}
			if (*tileCache.type == 241)
			{
				num = 1;
			}
			if (*tileCache.type == 242)
			{
				num = -1;
			}
			if (*tileCache.type == 529)
			{
				num24 = *Main.tile[i, j + 1].type;
				if (num24 != 112)
				{
					if (num24 != 116)
					{
						if (num24 != 234)
						{
							num = ((i >= WorldGen.beachDistance && i <= Main.maxTilesX - WorldGen.beachDistance) ? 289 : 290);
						}
						else
						{
							num = (num = 125);
						}
					}
					else
					{
						num = (num = 47);
					}
				}
				else
				{
					num = (num = 17);
				}
			}
			if (*tileCache.type == 356)
			{
				num = -1;
			}
			if (*tileCache.type == 663)
			{
				num = -1;
			}
			if (*tileCache.type == 351)
			{
				num = -1;
			}
			if (*tileCache.type == 246)
			{
				num = -1;
			}
			if (*tileCache.type == 36)
			{
				num = -1;
			}
			if (*tileCache.type == 365)
			{
				num = 239;
			}
			if (*tileCache.type == 366)
			{
				num = 30;
			}
			if (*tileCache.type == 504)
			{
				num = -1;
			}
			if (*tileCache.type == 357 || *tileCache.type == 367 || *tileCache.type == 561)
			{
				num = 236;
			}
			if (*tileCache.type == 368 || *tileCache.type == 369 || *tileCache.type == 576)
			{
				num = 240;
			}
			if (*tileCache.type == 170)
			{
				num = 196;
			}
			if (*tileCache.type == 315)
			{
				num = 225;
			}
			if (*tileCache.type == 641)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 161 : 243);
			}
			if (*tileCache.type == 659)
			{
				num = 308;
			}
			if (*tileCache.type == 667)
			{
				num = 308;
			}
			if (*tileCache.type == 346)
			{
				num = 128;
			}
			if (*tileCache.type == 347)
			{
				num = 117;
			}
			if (*tileCache.type == 348)
			{
				num = 42;
			}
			if (*tileCache.type == 350)
			{
				num = 226;
			}
			if (*tileCache.type == 370)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 23 : 6);
			}
			if (*tileCache.type == 171)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? -1 : 196);
			}
			if (*tileCache.type == 326)
			{
				num = 13;
			}
			if (*tileCache.type == 327)
			{
				num = 13;
			}
			if (*tileCache.type == 345)
			{
				num = 13;
			}
			if (*tileCache.type == 458)
			{
				num = 13;
			}
			if (*tileCache.type == 459)
			{
				num = 13;
			}
			if (*tileCache.type == 336)
			{
				num = 6;
			}
			if (*tileCache.type == 340)
			{
				num = 75;
			}
			if (*tileCache.type == 341)
			{
				num = 65;
			}
			if (*tileCache.type == 342)
			{
				num = 135;
			}
			if (*tileCache.type == 343)
			{
				num = 169;
			}
			if (*tileCache.type == 344)
			{
				num = 156;
			}
			if (*tileCache.type == 328)
			{
				num = 13;
			}
			if (*tileCache.type == 329)
			{
				num = 13;
			}
			if (*tileCache.type == 507)
			{
				num = 13;
			}
			if (*tileCache.type == 508)
			{
				num = 13;
			}
			if (*tileCache.type == 562)
			{
				num = -1;
			}
			if (*tileCache.type == 571)
			{
				num = 40;
			}
			if (*tileCache.type == 563)
			{
				num = -1;
			}
			if (*tileCache.type == 330)
			{
				num = 9;
			}
			if (*tileCache.type == 331)
			{
				num = 11;
			}
			if (*tileCache.type == 332)
			{
				num = 19;
			}
			if (*tileCache.type == 333)
			{
				num = 11;
			}
			if (*tileCache.type == 101)
			{
				num = -1;
			}
			if (*tileCache.type == 19)
			{
				switch (*tileCache.frameY / 18)
				{
				case 0:
					num = 7;
					goto IL_1558;
				case 1:
					num = 77;
					goto IL_1558;
				case 2:
					num = 78;
					goto IL_1558;
				case 3:
					num = 79;
					goto IL_1558;
				case 4:
					num = 26;
					goto IL_1558;
				case 5:
					num = 126;
					goto IL_1558;
				case 6:
					num = 275;
					goto IL_1558;
				case 7:
					num = 277;
					goto IL_1558;
				case 8:
					num = 276;
					goto IL_1558;
				case 9:
					num = 1;
					goto IL_1558;
				case 10:
					num = 214;
					goto IL_1558;
				case 11:
					num = 214;
					goto IL_1558;
				case 12:
					num = 214;
					goto IL_1558;
				case 13:
					num = 109;
					goto IL_1558;
				case 14:
					num = 13;
					goto IL_1558;
				case 15:
					num = 189;
					goto IL_1558;
				case 16:
					num = 191;
					goto IL_1558;
				case 17:
					num = 215;
					goto IL_1558;
				case 18:
					num = 26;
					goto IL_1558;
				case 19:
					num = 214;
					goto IL_1558;
				case 20:
					num = 4;
					goto IL_1558;
				case 21:
					num = 10;
					goto IL_1558;
				case 22:
					num = 32;
					goto IL_1558;
				case 23:
					num = 78;
					goto IL_1558;
				case 24:
					num = 147;
					goto IL_1558;
				case 25:
					num = 40;
					goto IL_1558;
				case 26:
					num = 226;
					goto IL_1558;
				case 27:
					num = 23;
					goto IL_1558;
				case 28:
					num = 240;
					goto IL_1558;
				case 29:
					num = 236;
					goto IL_1558;
				case 30:
					num = 68 + Main.rand.Next(3);
					goto IL_1558;
				case 31:
					num = 10;
					goto IL_1558;
				case 32:
					num = 78;
					goto IL_1558;
				case 33:
					num = 148;
					goto IL_1558;
				case 34:
					num = 5;
					goto IL_1558;
				case 35:
					num = 80;
					goto IL_1558;
				case 37:
					num = 18;
					goto IL_1558;
				case 38:
					num = 6;
					goto IL_1558;
				case 39:
					num = 61;
					goto IL_1558;
				case 40:
					num = 242;
					goto IL_1558;
				case 41:
					num = 135;
					goto IL_1558;
				case 42:
					num = 287;
					goto IL_1558;
				case 44:
					num = 273;
					goto IL_1558;
				case 45:
					num = 243;
					goto IL_1558;
				case 46:
					num = 243;
					goto IL_1558;
				case 47:
					num = 36;
					goto IL_1558;
				case 48:
					num = 226;
					goto IL_1558;
				}
				num = 1;
			}
			IL_1558:
			if (*tileCache.type == 79)
			{
				int num4 = (int)(*tileCache.frameY / 36);
				num = ((num4 == 0) ? 7 : ((num4 == 1) ? 77 : ((num4 == 2) ? 78 : ((num4 == 3) ? 79 : ((num4 == 4) ? 126 : ((num4 == 8) ? 109 : ((num4 < 9) ? 1 : -1)))))));
			}
			if (*tileCache.type == 18)
			{
				switch (*tileCache.frameX / 36)
				{
				case 0:
					num = 7;
					break;
				case 1:
					num = 77;
					break;
				case 2:
					num = 78;
					break;
				case 3:
					num = 79;
					break;
				case 4:
					num = 26;
					break;
				case 5:
					num = 40;
					break;
				case 6:
					num = 5;
					break;
				case 7:
					num = 26;
					break;
				case 8:
					num = 4;
					break;
				case 9:
					num = 126;
					break;
				case 10:
					num = 148;
					break;
				case 11:
				case 12:
				case 13:
					num = 1;
					break;
				case 14:
					num = 109;
					break;
				case 15:
					num = 126;
					break;
				default:
					num = -1;
					break;
				}
			}
			if (*tileCache.type == 14 || *tileCache.type == 87 || *tileCache.type == 88 || *tileCache.type == 469)
			{
				num = -1;
			}
			if (*tileCache.type >= 255 && *tileCache.type <= 261)
			{
				int num5 = (int)(*tileCache.type - 255);
				num = 86 + num5;
				if (num5 == 6)
				{
					num = 138;
				}
			}
			if (*tileCache.type >= 262 && *tileCache.type <= 268)
			{
				int num6 = (int)(*tileCache.type - 262);
				num = 86 + num6;
				if (num6 == 6)
				{
					num = 138;
				}
			}
			if (*tileCache.type == 178)
			{
				int num7 = (int)(*tileCache.frameX / 18);
				num = 86 + num7;
				if (num7 == 6)
				{
					num = 138;
				}
			}
			if (*tileCache.type == 440)
			{
				switch (*tileCache.frameX / 54)
				{
				case 0:
					num = 90;
					break;
				case 1:
					num = 88;
					break;
				case 2:
					num = 89;
					break;
				case 3:
					num = 87;
					break;
				case 4:
					num = 86;
					break;
				case 5:
					num = 91;
					break;
				case 6:
					num = 138;
					break;
				default:
					num = -1;
					break;
				}
				if (*tileCache.frameY < 54)
				{
					num = -1;
				}
			}
			num24 = *tileCache.type;
			if (num24 <= 496)
			{
				switch (num24)
				{
				case 426:
				case 427:
					num = 90;
					break;
				case 428:
				case 429:
					break;
				case 430:
				case 435:
					num = 89;
					break;
				case 431:
				case 436:
					num = 88;
					break;
				case 432:
				case 437:
					num = 87;
					break;
				case 433:
				case 438:
					num = 86;
					break;
				case 434:
				case 439:
					num = 91;
					break;
				default:
					if (num24 == 496)
					{
						num = 109;
					}
					break;
				}
			}
			else if (num24 != 549)
			{
				if (num24 == 552)
				{
					num = 32;
				}
			}
			else
			{
				num = 3;
			}
			if (*tileCache.type == 186)
			{
				num = ((*tileCache.frameX <= 360) ? 26 : ((*tileCache.frameX <= 846) ? 1 : ((*tileCache.frameX <= 954) ? 9 : ((*tileCache.frameX <= 1062) ? 11 : ((*tileCache.frameX <= 1170) ? 10 : ((*tileCache.frameX > 1332) ? ((*tileCache.frameX > 1386) ? 80 : 10) : 0))))));
			}
			if (*tileCache.type == 187)
			{
				if (*tileCache.frameX <= 144)
				{
					num = 1;
				}
				else if (*tileCache.frameX <= 306)
				{
					num = 38;
				}
				else if (*tileCache.frameX <= 468)
				{
					num = 36;
				}
				else if (*tileCache.frameX <= 738)
				{
					num = 30;
				}
				else if (*tileCache.frameX <= 970)
				{
					num = 1;
				}
				else if (*tileCache.frameX <= 1132)
				{
					num = 148;
				}
				else if (*tileCache.frameX <= 1132)
				{
					num = 155;
				}
				else if (*tileCache.frameX <= 1348)
				{
					num = 1;
				}
				else if (*tileCache.frameX <= 1564)
				{
					num = 0;
				}
				else if (*tileCache.frameX <= 1890)
				{
					num = 250;
				}
				else if (*tileCache.frameX <= 2196)
				{
					num = 240;
				}
				else if (*tileCache.frameX <= 2520)
				{
					num = 236;
				}
			}
			if (*tileCache.type == 647)
			{
				int num8 = (int)(*tileCache.frameX / 54);
				if (num8 < 7)
				{
					num = 26;
				}
				else if (num8 < 16)
				{
					num = 1;
				}
				else if (num8 < 18)
				{
					num = 9;
				}
				else if (num8 < 20)
				{
					num = 11;
				}
				else if (num8 < 22)
				{
					num = 10;
				}
				else if (num8 < 26)
				{
					num = 7;
				}
				else if (num8 < 32)
				{
					num = 80;
				}
				else if (num8 < 35)
				{
					num = 80;
				}
			}
			if (*tileCache.type == 648)
			{
				int num9 = (int)(*tileCache.frameX / 54);
				num9 += (int)(*tileCache.frameY / 36 * 35);
				if (num9 < 3)
				{
					num = 1;
				}
				else if (num9 < 6)
				{
					num = 38;
				}
				else if (num9 < 9)
				{
					num = 36;
				}
				else if (num9 < 14)
				{
					num = 30;
				}
				else if (num9 < 17)
				{
					num = 1;
				}
				else if (num9 < 18)
				{
					num = 1;
				}
				else if (num9 < 21)
				{
					num = 148;
				}
				else if (num9 < 29)
				{
					num = 155;
				}
				else if (num9 < 35)
				{
					num = 287;
				}
				else if (num9 < 41)
				{
					num = 240;
				}
				else if (num9 < 47)
				{
					num = 236;
				}
				else if (num9 < 50)
				{
					num = 0;
				}
				else if (num9 < 52)
				{
					num = 2;
				}
				else if (num9 < 55)
				{
					num = 26;
				}
			}
			if (*tileCache.type == 105)
			{
				num = 1;
				if (*tileCache.frameX >= 1548 && *tileCache.frameX <= 1654 && *tileCache.frameY < 54)
				{
					num = 148;
				}
			}
			if (*tileCache.type == 349)
			{
				num = 1;
			}
			if (*tileCache.type == 337 || *tileCache.type == 506)
			{
				num = 1;
			}
			if (*tileCache.type == 239)
			{
				short num25 = *tileCache.frameX / 18;
				if (num25 == 0)
				{
					num = 9;
				}
				if (num25 == 1)
				{
					num = 81;
				}
				if (num25 == 2)
				{
					num = 8;
				}
				if (num25 == 3)
				{
					num = 82;
				}
				if (num25 == 4)
				{
					num = 11;
				}
				if (num25 == 5)
				{
					num = 83;
				}
				if (num25 == 6)
				{
					num = 10;
				}
				if (num25 == 7)
				{
					num = 84;
				}
				if (num25 == 8)
				{
					num = 14;
				}
				if (num25 == 9)
				{
					num = 23;
				}
				if (num25 == 10)
				{
					num = 25;
				}
				if (num25 == 11)
				{
					num = 48;
				}
				if (num25 == 12)
				{
					num = 144;
				}
				if (num25 == 13)
				{
					num = 49;
				}
				if (num25 == 14)
				{
					num = 145;
				}
				if (num25 == 15)
				{
					num = 50;
				}
				if (num25 == 16)
				{
					num = 146;
				}
				if (num25 == 17)
				{
					num = 128;
				}
				if (num25 == 18)
				{
					num = 84;
				}
				if (num25 == 19)
				{
					num = 117;
				}
				if (num25 == 20)
				{
					num = 42;
				}
				if (num25 == 21)
				{
					num = -1;
				}
				if (num25 == 22)
				{
					num = 265;
				}
			}
			if (*tileCache.type == 185)
			{
				if (*tileCache.frameY == 18)
				{
					int num10 = (int)(*tileCache.frameX / 36);
					if (num10 < 6)
					{
						num = 1;
					}
					else if (num10 < 16)
					{
						num = 26;
					}
					else if (num10 == 16)
					{
						num = 9;
					}
					else if (num10 == 17)
					{
						num = 11;
					}
					else if (num10 == 18)
					{
						num = 10;
					}
					else if (num10 == 19)
					{
						num = 86;
					}
					else if (num10 == 20)
					{
						num = 87;
					}
					else if (num10 == 21)
					{
						num = 88;
					}
					else if (num10 == 22)
					{
						num = 89;
					}
					else if (num10 == 23)
					{
						num = 90;
					}
					else if (num10 == 24)
					{
						num = 91;
					}
					else if (num10 < 31)
					{
						num = 80;
					}
					else if (num10 < 33)
					{
						num = 7;
					}
					else if (num10 < 34)
					{
						num = 8;
					}
					else if (num10 < 38)
					{
						num = 30;
					}
					else if (num10 < 41)
					{
						num = 1;
					}
					else if (num10 < 47)
					{
						num = 287;
					}
					else if (num10 < 53)
					{
						num = 240;
					}
					else if (num10 < 59)
					{
						num = 236;
					}
				}
				else
				{
					int num11 = (int)(*tileCache.frameX / 18);
					if (num11 < 6)
					{
						num = 1;
					}
					else if (num11 < 12)
					{
						num = 0;
					}
					else if (num11 < 28)
					{
						num = 26;
					}
					else if (num11 < 33)
					{
						num = 1;
					}
					else if (num11 < 36)
					{
						num = 0;
					}
					else if (num11 < 48)
					{
						num = 80;
					}
					else if (num11 < 54)
					{
						num = 30;
					}
					else if (num11 < 60)
					{
						num = 287;
					}
					else if (num11 < 66)
					{
						num = 240;
					}
					else if (num11 < 72)
					{
						num = 236;
					}
					else if (num11 < 73)
					{
						num = 0;
					}
					else if (num11 < 77)
					{
						num = 32;
					}
				}
			}
			if (*tileCache.type == 649)
			{
				int num12 = (int)(*tileCache.frameX / 36 + *tileCache.frameY / 18 * 53);
				if (num12 < 6)
				{
					num = 1;
				}
				else if (num12 < 16)
				{
					num = 26;
				}
				else if (num12 == 16)
				{
					num = 9;
				}
				else if (num12 == 17)
				{
					num = 11;
				}
				else if (num12 == 18)
				{
					num = 10;
				}
				else if (num12 == 19)
				{
					num = 86;
				}
				else if (num12 == 20)
				{
					num = 87;
				}
				else if (num12 == 21)
				{
					num = 88;
				}
				else if (num12 == 22)
				{
					num = 89;
				}
				else if (num12 == 23)
				{
					num = 90;
				}
				else if (num12 == 24)
				{
					num = 91;
				}
				else if (num12 < 31)
				{
					num = 80;
				}
				else if (num12 < 33)
				{
					num = 7;
				}
				else if (num12 < 34)
				{
					num = 8;
				}
				else if (num12 < 38)
				{
					num = 30;
				}
				else if (num12 < 41)
				{
					num = 1;
				}
				else if (num12 < 47)
				{
					num = 287;
				}
				else if (num12 < 53)
				{
					num = 240;
				}
				else if (num12 < 59)
				{
					num = 236;
				}
				else if (num12 < 62)
				{
					num = 0;
				}
				else if (num12 < 65)
				{
					num = 32;
				}
			}
			if (*tileCache.type == 650)
			{
				int num13 = (int)(*tileCache.frameX / 18);
				if (num13 < 6)
				{
					num = 1;
				}
				else if (num13 < 12)
				{
					num = 0;
				}
				else if (num13 < 28)
				{
					num = 26;
				}
				else if (num13 < 33)
				{
					num = 1;
				}
				else if (num13 < 36)
				{
					num = 0;
				}
				else if (num13 < 48)
				{
					num = 80;
				}
				else if (num13 < 54)
				{
					num = 30;
				}
				else if (num13 < 60)
				{
					num = 287;
				}
				else if (num13 < 66)
				{
					num = 240;
				}
				else if (num13 < 72)
				{
					num = 236;
				}
				else if (num13 < 73)
				{
					num = 0;
				}
				else if (num13 < 77)
				{
					num = 32;
				}
			}
			if (*tileCache.type == 237)
			{
				num = 148;
			}
			if (*tileCache.type == 157)
			{
				num = 77;
			}
			if (*tileCache.type == 158 || *tileCache.type == 232 || *tileCache.type == 383 || *tileCache.type == 575)
			{
				num = 78;
			}
			if (*tileCache.type == 159)
			{
				num = 78;
			}
			if (*tileCache.type == 15)
			{
				num = -1;
			}
			if (*tileCache.type == 191)
			{
				num = 7;
			}
			if (*tileCache.type == 5)
			{
				num = 7;
				if (i > 5 && i < Main.maxTilesX - 5)
				{
					int num14 = i;
					int k = j;
					if (*tileCache.frameX == 66 && *tileCache.frameY <= 45)
					{
						num14++;
					}
					if (*tileCache.frameX == 88 && *tileCache.frameY >= 66 && *tileCache.frameY <= 110)
					{
						num14--;
					}
					if (*tileCache.frameX == 22 && *tileCache.frameY >= 132 && *tileCache.frameY <= 176)
					{
						num14--;
					}
					if (*tileCache.frameX == 44 && *tileCache.frameY >= 132 && *tileCache.frameY <= 176)
					{
						num14++;
					}
					if (*tileCache.frameX == 44 && *tileCache.frameY >= 132 && *tileCache.frameY <= 176)
					{
						num14++;
					}
					if (*tileCache.frameX == 44 && *tileCache.frameY >= 198)
					{
						num14++;
					}
					if (*tileCache.frameX == 66 && *tileCache.frameY >= 198)
					{
						num14--;
					}
					while (Main.tile[num14, k] != null && (!Main.tile[num14, k].active() || !Main.tileSolid[(int)(*Main.tile[num14, k].type)]))
					{
						k++;
					}
					if (Main.tile[num14, k] != null)
					{
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 23)
						{
							num = 77;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 661)
						{
							num = 77;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 60)
						{
							num = 78;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 70)
						{
							num = 26;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 109)
						{
							num = 79;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 199)
						{
							num = 121;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 662)
						{
							num = 121;
						}
						if (Main.tile[num14, k].active() && *Main.tile[num14, k].type == 147)
						{
							num = 122;
						}
						TileLoader.TreeDust(Main.tile[num14, k], ref num);
					}
				}
			}
			if (*tileCache.type == 323)
			{
				num = 215;
				if (i > 5 && i < Main.maxTilesX - 5)
				{
					int l = j;
					while (Main.tile[i, l] != null && (!Main.tile[i, l].active() || !Main.tileSolid[(int)(*Main.tile[i, l].type)]))
					{
						l++;
					}
					if (Main.tile[i, l] != null)
					{
						if (Main.tile[i, l].active() && *Main.tile[i, l].type == 234)
						{
							num = 121;
						}
						if (Main.tile[i, l].active() && *Main.tile[i, l].type == 116)
						{
							num = 79;
						}
						if (Main.tile[i, l].active() && *Main.tile[i, l].type == 112)
						{
							num = 77;
						}
						TileLoader.PalmTreeDust(Main.tile[i, l], ref num);
					}
				}
			}
			if (*tileCache.type == 137)
			{
				int num26 = (int)(*tileCache.frameY / 18);
				if (num26 - 1 > 3)
				{
					if (num26 != 5)
					{
						num = 1;
					}
					else
					{
						num = 1;
					}
				}
				else
				{
					num = 148;
				}
			}
			if (*tileCache.type == 443)
			{
				num = 1;
			}
			if (*tileCache.type == 444)
			{
				num = -1;
			}
			if (*tileCache.type == 212)
			{
				num = -1;
			}
			if (*tileCache.type == 213)
			{
				num = 129;
			}
			if (*tileCache.type == 214)
			{
				num = 1;
			}
			if (*tileCache.type == 215)
			{
				num = -6;
			}
			if (*tileCache.type == 325)
			{
				num = 81;
			}
			if (*tileCache.type == 251)
			{
				num = 189;
			}
			if (*tileCache.type == 252)
			{
				num = 190;
			}
			if (*tileCache.type == 253)
			{
				num = 191;
			}
			if (*tileCache.type == 254)
			{
				if (*tileCache.frameX < 72)
				{
					num = 3;
				}
				else if (*tileCache.frameX < 108)
				{
					num = 3;
					if (WorldGen.genRand.Next(3) == 0)
					{
						num = 189;
					}
				}
				else if (*tileCache.frameX < 144)
				{
					num = 3;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num = 189;
					}
				}
				else
				{
					num = 3;
					if (WorldGen.genRand.Next(4) != 0)
					{
						num = 189;
					}
				}
			}
			if (*tileCache.type == 467)
			{
				num = -1;
			}
			if (*tileCache.type == 21)
			{
				num = ((*tileCache.frameX >= 1008) ? -1 : ((*tileCache.frameX >= 612) ? 11 : ((*tileCache.frameX >= 576) ? 148 : ((*tileCache.frameX >= 540) ? 26 : ((*tileCache.frameX >= 504) ? 126 : ((*tileCache.frameX >= 468) ? 116 : ((*tileCache.frameX >= 432) ? 7 : ((*tileCache.frameX >= 396) ? 11 : ((*tileCache.frameX >= 360) ? 10 : ((*tileCache.frameX >= 324) ? 79 : ((*tileCache.frameX >= 288) ? 78 : ((*tileCache.frameX >= 252) ? 77 : ((*tileCache.frameX >= 216) ? 1 : ((*tileCache.frameX >= 180) ? 7 : ((*tileCache.frameX >= 108) ? 37 : ((*tileCache.frameX < 36) ? 7 : 10))))))))))))))));
			}
			if (*tileCache.type == 382)
			{
				num = 3;
			}
			if (*tileCache.type == 2 || *tileCache.type == 477)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 2 : 0);
			}
			if (*tileCache.type == 127)
			{
				num = 67;
			}
			if (*tileCache.type == 91)
			{
				num = -1;
			}
			if (*tileCache.type == 198)
			{
				num = 109;
			}
			if (*tileCache.type == 26)
			{
				num = ((*tileCache.frameX < 54) ? 8 : 5);
			}
			if (*tileCache.type == 34)
			{
				num = -1;
			}
			if (*tileCache.type == 6)
			{
				num = 8;
			}
			if (*tileCache.type == 7 || *tileCache.type == 47 || *tileCache.type == 284 || *tileCache.type == 682)
			{
				num = 9;
			}
			if (*tileCache.type == 8 || *tileCache.type == 45 || *tileCache.type == 102 || *tileCache.type == 680)
			{
				num = 10;
			}
			if (*tileCache.type == 9 || *tileCache.type == 42 || *tileCache.type == 46 || *tileCache.type == 126 || *tileCache.type == 136 || *tileCache.type == 681)
			{
				num = 11;
			}
			if (*tileCache.type == 166 || *tileCache.type == 175)
			{
				num = 81;
			}
			if (*tileCache.type == 167)
			{
				num = 82;
			}
			if (*tileCache.type == 168 || *tileCache.type == 176)
			{
				num = 83;
			}
			if (*tileCache.type == 169 || *tileCache.type == 177)
			{
				num = 84;
			}
			if (*tileCache.type == 199 || *tileCache.type == 662)
			{
				num = 117;
			}
			if (*tileCache.type == 205)
			{
				num = 125;
			}
			if (*tileCache.type == 201)
			{
				num = 125;
			}
			if (*tileCache.type == 211)
			{
				num = 128;
			}
			if (*tileCache.type == 227)
			{
				switch (*tileCache.frameX / 34)
				{
				case 0:
				case 1:
					num = 26;
					break;
				case 2:
				case 4:
				case 5:
				case 6:
					num = 40;
					break;
				case 3:
					num = 3;
					break;
				case 7:
					num = 117;
					break;
				case 8:
					num = 17;
					break;
				case 9:
					num = 6;
					break;
				case 10:
					num = 3;
					break;
				case 11:
					num = 26;
					break;
				}
			}
			if (*tileCache.type == 204 || *tileCache.type == 478)
			{
				num = 117;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num = 1;
				}
			}
			if (*tileCache.type == 203)
			{
				num = 117;
			}
			if (*tileCache.type == 243)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 13 : 7);
			}
			if (*tileCache.type == 219)
			{
				num = -1;
			}
			if (*tileCache.type == 642)
			{
				num = -128;
			}
			if (*tileCache.type == 244)
			{
				num = ((WorldGen.genRand.Next(2) == 0) ? 1 : 13);
			}
			if (*tileCache.type == 597)
			{
				num = -1;
			}
			else if ((*tileCache.type >= 358 && *tileCache.type <= 364) || (*tileCache.type >= 275 && *tileCache.type <= 282) || (*tileCache.type == 285 || *tileCache.type == 286 || (*tileCache.type >= 288 && *tileCache.type <= 297)) || (*tileCache.type >= 316 && *tileCache.type <= 318) || *tileCache.type == 298 || *tileCache.type == 299 || *tileCache.type == 309 || *tileCache.type == 310 || *tileCache.type == 339 || *tileCache.type == 538 || *tileCache.type == 413 || *tileCache.type == 414 || *tileCache.type == 505 || *tileCache.type == 521 || *tileCache.type == 522 || *tileCache.type == 523 || *tileCache.type == 524 || *tileCache.type == 525 || *tileCache.type == 526 || *tileCache.type == 527 || *tileCache.type == 532 || *tileCache.type == 543 || *tileCache.type == 544 || *tileCache.type == 550 || *tileCache.type == 551 || *tileCache.type == 533 || *tileCache.type == 553 || *tileCache.type == 554 || *tileCache.type == 555 || *tileCache.type == 556 || *tileCache.type == 558 || *tileCache.type == 559 || *tileCache.type == 542 || *tileCache.type == 391 || *tileCache.type == 394 || *tileCache.type == 392 || *tileCache.type == 393 || *tileCache.type == 568 || *tileCache.type == 569 || *tileCache.type == 570 || *tileCache.type == 582 || *tileCache.type == 580 || *tileCache.type == 598 || *tileCache.type == 599 || *tileCache.type == 600 || *tileCache.type == 601 || *tileCache.type == 602 || *tileCache.type == 603 || *tileCache.type == 604 || *tileCache.type == 605 || *tileCache.type == 606 || *tileCache.type == 607 || *tileCache.type == 608 || *tileCache.type == 609 || *tileCache.type == 610 || *tileCache.type == 611 || *tileCache.type == 612 || *tileCache.type == 619 || *tileCache.type == 620 || *tileCache.type == 629 || *tileCache.type == 632 || *tileCache.type == 640 || *tileCache.type == 643 || *tileCache.type == 644 || *tileCache.type == 645)
			{
				num = 13;
				if (WorldGen.genRand.Next(3) != 0)
				{
					num = -1;
				}
			}
			if (*tileCache.type == 13)
			{
				num = ((*tileCache.frameX < 90) ? 13 : -1);
			}
			if (*tileCache.type == 189)
			{
				num = 16;
			}
			if (*tileCache.type == 460)
			{
				num = 16;
			}
			if (*tileCache.type == 530)
			{
				num24 = *Main.tile[i, j + 2 - (int)(*tileCache.frameY / 18)].type;
				if (num24 != 112)
				{
					if (num24 != 116)
					{
						if (num24 != 234)
						{
							num = ((*tileCache.frameX >= 270) ? 291 : 40);
						}
						else
						{
							num = 125;
						}
					}
					else
					{
						num = 47;
					}
				}
				else
				{
					num = 17;
				}
			}
			if (*tileCache.type == 518)
			{
				if (*tileCache.frameY == 0)
				{
					num = 3;
				}
				else if (*tileCache.frameY == 18)
				{
					num = 47;
				}
				else if (*tileCache.frameY == 36)
				{
					num = 40;
				}
			}
			else if (*tileCache.type == 519)
			{
				if (*tileCache.frameY == 0)
				{
					num = 3;
				}
				else if (*tileCache.frameY == 18)
				{
					num = 40;
				}
				else if (*tileCache.frameY == 36)
				{
					num = 47;
				}
				else if (*tileCache.frameY == 54)
				{
					num = 125;
				}
				else if (*tileCache.frameY == 72)
				{
					num = 17;
				}
				else if (*tileCache.frameY == 90)
				{
					num = 26;
				}
			}
			else if (*tileCache.type == 636)
			{
				num = 17;
			}
			else if (*tileCache.type == 528)
			{
				num = 26;
			}
			if (*tileCache.type == 12)
			{
				num = 12;
			}
			if (*tileCache.type == 639)
			{
				num = 48;
			}
			if (*tileCache.type == 3 || *tileCache.type == 73)
			{
				num = 3;
			}
			if (*tileCache.type == 54)
			{
				num = 13;
			}
			if (*tileCache.type == 22 || *tileCache.type == 140)
			{
				num = 14;
			}
			if (*tileCache.type == 78)
			{
				num = 22;
			}
			if (*tileCache.type == 28 || *tileCache.type == 653)
			{
				num = 22;
				if (*tileCache.frameY >= 72 && *tileCache.frameY <= 90)
				{
					num = 1;
				}
				if (*tileCache.frameY >= 144 && *tileCache.frameY <= 234)
				{
					num = 48;
				}
				if (*tileCache.frameY >= 252 && *tileCache.frameY <= 358)
				{
					num = 85;
				}
				if (*tileCache.frameY >= 360 && *tileCache.frameY <= 466)
				{
					num = 26;
				}
				if (*tileCache.frameY >= 468 && *tileCache.frameY <= 574)
				{
					num = 36;
				}
				if (*tileCache.frameY >= 576 && *tileCache.frameY <= 790)
				{
					num = 18;
				}
				if (*tileCache.frameY >= 792 && *tileCache.frameY <= 898)
				{
					num = 5;
				}
				if (*tileCache.frameY >= 900 && *tileCache.frameY <= 1006)
				{
					num = 0;
				}
				if (*tileCache.frameY >= 1008 && *tileCache.frameY <= 1114)
				{
					num = 148;
				}
				if (*tileCache.frameY >= 1116 && *tileCache.frameY <= 1222)
				{
					num = 241;
				}
				if (*tileCache.frameY >= 1224 && *tileCache.frameY <= 1330)
				{
					num = 287;
				}
			}
			if (*tileCache.type == 163)
			{
				num = 118;
			}
			if (*tileCache.type == 164)
			{
				num = 119;
			}
			if (*tileCache.type == 200)
			{
				num = 120;
			}
			if (*tileCache.type == 221 || *tileCache.type == 248)
			{
				num = 144;
			}
			if (*tileCache.type == 222 || *tileCache.type == 249)
			{
				num = 145;
			}
			if (*tileCache.type == 223 || *tileCache.type == 250)
			{
				num = 146;
			}
			if (*tileCache.type == 224)
			{
				num = 149;
			}
			if (*tileCache.type == 225)
			{
				num = 147;
			}
			if (*tileCache.type == 229)
			{
				num = 153;
			}
			if (*tileCache.type == 231)
			{
				num = 153;
				if (WorldGen.genRand.Next(3) == 0)
				{
					num = 26;
				}
			}
			if (*tileCache.type == 226)
			{
				num = 148;
			}
			if (*tileCache.type == 103)
			{
				num = -1;
			}
			if (*tileCache.type == 29)
			{
				num = 23;
			}
			if (*tileCache.type == 40)
			{
				num = 28;
			}
			if (*tileCache.type == 50)
			{
				num = 22;
			}
			if (*tileCache.type == 51)
			{
				num = 30;
			}
			if (*tileCache.type == 52 || *tileCache.type == 353)
			{
				num = 3;
			}
			if (*tileCache.type == 53 || *tileCache.type == 81 || *tileCache.type == 151 || *tileCache.type == 202 || *tileCache.type == 274 || *tileCache.type == 495)
			{
				num = 32;
			}
			if (*tileCache.type == 56 || *tileCache.type == 152)
			{
				num = 37;
			}
			if (*tileCache.type == 75 || *tileCache.type == 683)
			{
				num = 109;
			}
			if (*tileCache.type == 57 || *tileCache.type == 119 || *tileCache.type == 141 || *tileCache.type == 234 || *tileCache.type == 635 || *tileCache.type == 654)
			{
				num = 36;
			}
			if (*tileCache.type == 59 || *tileCache.type == 120)
			{
				num = 38;
			}
			if (*tileCache.type == 61 || *tileCache.type == 62 || *tileCache.type == 74 || *tileCache.type == 80 || *tileCache.type == 188 || *tileCache.type == 233 || *tileCache.type == 236 || *tileCache.type == 384 || *tileCache.type == 652 || *tileCache.type == 651)
			{
				num = 40;
			}
			if (*tileCache.type == 485)
			{
				num = 32;
			}
			if (*tileCache.type == 238)
			{
				num = ((WorldGen.genRand.Next(3) != 0) ? 166 : 167);
			}
			if (*tileCache.type == 69)
			{
				num = 7;
			}
			if (*tileCache.type == 655)
			{
				num = 166;
			}
			if (*tileCache.type == 71 || *tileCache.type == 72 || *tileCache.type == 190 || *tileCache.type == 578)
			{
				num = 26;
			}
			if (*tileCache.type == 70)
			{
				num = 17;
			}
			if (*tileCache.type == 112)
			{
				num = 14;
			}
			if (*tileCache.type == 123)
			{
				num = 53;
			}
			if (*tileCache.type == 161)
			{
				num = 80;
			}
			if (*tileCache.type == 206)
			{
				num = 80;
			}
			if (*tileCache.type == 162)
			{
				num = 80;
			}
			if (*tileCache.type == 165)
			{
				switch (*tileCache.frameX / 54)
				{
				case 0:
					num = 80;
					break;
				case 1:
					num = 1;
					break;
				case 2:
					num = 30;
					break;
				case 3:
					num = 147;
					break;
				case 4:
					num = 1;
					break;
				case 5:
					num = 14;
					break;
				case 6:
					num = 117;
					break;
				case 7:
					num = 250;
					break;
				case 8:
					num = 240;
					break;
				case 9:
					num = 236;
					break;
				default:
					num = 1;
					break;
				}
			}
			if (*tileCache.type == 666)
			{
				num = 322;
			}
			if (*tileCache.type == 193)
			{
				num = 4;
			}
			if (*tileCache.type == 194)
			{
				num = 26;
			}
			if (*tileCache.type == 195)
			{
				num = 5;
			}
			if (*tileCache.type == 196)
			{
				num = 108;
			}
			if (*tileCache.type == 460)
			{
				num = 108;
			}
			if (*tileCache.type == 197)
			{
				num = 4;
			}
			if (*tileCache.type == 153)
			{
				num = 26;
			}
			if (*tileCache.type == 154)
			{
				num = 32;
			}
			if (*tileCache.type == 155)
			{
				num = 2;
			}
			if (*tileCache.type == 156)
			{
				num = 1;
			}
			if (*tileCache.type == 116 || *tileCache.type == 118 || *tileCache.type == 147 || *tileCache.type == 148)
			{
				num = 51;
			}
			if (*tileCache.type == 109 || *tileCache.type == 492)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 47 : 0);
			}
			if (*tileCache.type == 110 || *tileCache.type == 113 || *tileCache.type == 115)
			{
				num = 47;
			}
			if (*tileCache.type == 107 || *tileCache.type == 121 || *tileCache.type == 685)
			{
				num = 48;
			}
			if (*tileCache.type == 108 || *tileCache.type == 122 || *tileCache.type == 146 || *tileCache.type == 686)
			{
				num = 49;
			}
			if (*tileCache.type == 111 || *tileCache.type == 145 || *tileCache.type == 150)
			{
				num = 50;
			}
			if (*tileCache.type == 133)
			{
				num = 50;
				if (*tileCache.frameX >= 54)
				{
					num = 146;
				}
			}
			if (*tileCache.type == 134)
			{
				num = 49;
				if (*tileCache.frameX >= 36)
				{
					num = 145;
				}
			}
			if (*tileCache.type == 149)
			{
				num = 49;
			}
			if (Main.tileAlch[(int)(*tileCache.type)])
			{
				short num27 = *tileCache.frameX / 18;
				if (num27 == 0)
				{
					num = 3;
				}
				if (num27 == 1)
				{
					num = 3;
				}
				if (num27 == 2)
				{
					num = 7;
				}
				if (num27 == 3)
				{
					num = 17;
				}
				if (num27 == 4)
				{
					num = 289;
				}
				if (num27 == 5)
				{
					num = 6;
				}
				if (num27 == 6)
				{
					num = 224;
				}
			}
			if (*tileCache.type == 58 || *tileCache.type == 76 || *tileCache.type == 77 || *tileCache.type == 684)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 25 : 6);
			}
			if (*tileCache.type == 37)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 23 : 6);
			}
			if (*tileCache.type == 32)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 24 : 14);
			}
			if (*tileCache.type == 352)
			{
				num = ((WorldGen.genRand.Next(3) != 0) ? 125 : 5);
			}
			if (*tileCache.type == 23 || *tileCache.type == 24 || *tileCache.type == 661)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 17 : 14);
			}
			if (*tileCache.type == 25 || *tileCache.type == 31)
			{
				num = ((*tileCache.type == 31 && *tileCache.frameX >= 36) ? 5 : ((WorldGen.genRand.Next(2) != 0) ? 1 : 14));
			}
			if (*tileCache.type == 20)
			{
				switch (*tileCache.frameX / 54)
				{
				case 1:
					num = 122;
					break;
				case 2:
					num = 78;
					break;
				case 3:
					num = 77;
					break;
				case 4:
					num = 121;
					break;
				case 5:
					num = 79;
					break;
				default:
					num = 7;
					break;
				}
			}
			if (*tileCache.type == 27)
			{
				num = ((WorldGen.genRand.Next(2) != 0) ? 19 : 3);
			}
			if (*tileCache.type == 129)
			{
				if (*tileCache.frameX >= 324)
				{
					num = 69;
				}
				num = ((*tileCache.frameX != 0 && *tileCache.frameX != 54 && *tileCache.frameX != 108) ? ((*tileCache.frameX != 18 && *tileCache.frameX != 72 && *tileCache.frameX != 126) ? 70 : 69) : 68);
			}
			if (*tileCache.type == 385)
			{
				num = WorldGen.genRand.Next(68, 71);
			}
			if (*tileCache.type == 4)
			{
				int num15 = (int)MathHelper.Clamp((float)(*tileCache.frameY / 22), 0f, (float)(TorchID.Count - 1));
				num = TorchID.Dust[num15];
			}
			if (*tileCache.type == 35)
			{
				num = 189;
				if (*tileCache.frameX < 36 && WorldGen.genRand.Next(2) == 0)
				{
					num = 6;
				}
			}
			if ((*tileCache.type == 34 || *tileCache.type == 42) && WorldGen.genRand.Next(2) == 0)
			{
				num = 6;
			}
			if (*tileCache.type == 270)
			{
				num = -1;
			}
			if (*tileCache.type == 271)
			{
				num = -1;
			}
			if (*tileCache.type == 581)
			{
				num = -1;
			}
			if (*tileCache.type == 660)
			{
				num = -1;
			}
			if (*tileCache.type == 79 || *tileCache.type == 90 || *tileCache.type == 101)
			{
				num = -1;
			}
			if (*tileCache.type == 33 || *tileCache.type == 34 || *tileCache.type == 42 || *tileCache.type == 93 || *tileCache.type == 100)
			{
				num = -1;
			}
			if (*tileCache.type == 321 || *tileCache.type == 574)
			{
				num = 214;
			}
			if (*tileCache.type == 322)
			{
				num = 215;
			}
			if (*tileCache.type == 635)
			{
				num = 36;
			}
			bool flag = *tileCache.type == 178 || *tileCache.type == 440;
			ushort type = *tileCache.type;
			if (type == 178 || type - 426 <= 1 || type - 430 <= 10)
			{
				flag = true;
			}
			ModTile modTile = TileLoader.GetTile((int)(*tileCache.type));
			if (modTile != null)
			{
				num = modTile.DustType;
			}
			if (!TileLoader.CreateDust(i, j, (int)(*tileCache.type), ref num) || num < 0)
			{
				return 6000;
			}
			if (*tileCache.type == 627 || *tileCache.type == 628 || (*tileCache.type == 184 && *tileCache.frameX / 22 == 10))
			{
				int num16 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 1f);
				Main.dust[num16].noGravity = true;
				Main.dust[num16].noLightEmittence = true;
				return num16;
			}
			if (*tileCache.type == 518)
			{
				int num17 = (int)(*tileCache.liquid / 16);
				num17 -= 3;
				if (WorldGen.SolidTile(i, j - 1, false) && num17 > 8)
				{
					num17 = 8;
				}
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16 - num17)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
			}
			if (*tileCache.type == 352 && num == 5)
			{
				int num18 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 5, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num18].scale = 1.5f;
				Main.dust[num18].noGravity = true;
				Main.dust[num18].velocity *= 1.65f;
				Main.dust[num18].fadeIn = 1.6f;
				return num18;
			}
			if (*tileCache.type == 160 || *tileCache.type == 692)
			{
				int num19 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
				Main.dust[num19].noGravity = true;
				return num19;
			}
			if (*tileCache.type == 323)
			{
				int frameY = (int)(*tileCache.frameY);
				return Dust.NewDust(new Vector2((float)(i * 16 + frameY), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
			}
			if (*tileCache.type == 314)
			{
				int num20 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, 213, (float)WorldGen.genRand.Next(-2, 3), (float)WorldGen.genRand.Next(-2, 3), 0, default(Color), 1f);
				Main.dust[num20].noGravity = true;
				Main.dust[num20].fadeIn = Main.dust[num20].scale + 1f + 0.01f * (float)WorldGen.genRand.Next(0, 51);
				Main.dust[num20].noGravity = true;
				return num20;
			}
			if (flag)
			{
				int num21 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, default(Color), 0.75f);
				Main.dust[num21].noLight = true;
				return num21;
			}
			if (*tileCache.type == 193 || (*tileCache.type == 18 && num == 4) || (*tileCache.type == 19 && num == 4))
			{
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(0, 80, 255, 100), 0.75f);
			}
			if (*tileCache.type == 197)
			{
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, new Color(97, 200, 255, 100), 0.75f);
			}
			if (*tileCache.type == 185 && num >= 86 && num <= 91)
			{
				int num22 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 75, default(Color), 0.75f);
				Main.dust[num22].noLight = true;
				return num22;
			}
			if (*tileCache.type == 4 && num == 66)
			{
				int num23 = Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, new Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f), 1f);
				Main.dust[num23].noGravity = true;
				return num23;
			}
			if (num == 139)
			{
				int type2 = num + Main.rand.Next(4);
				return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, type2, 0f, 0f, 0, default(Color), 1f);
			}
			return Dust.NewDust(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16, num, 0f, 0f, 0, default(Color), 1f);
		}

		// Token: 0x0600130F RID: 4879 RVA: 0x00479768 File Offset: 0x00477968
		public unsafe static bool IsOpenDoorAnchorFrame(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active() || *tile.type != 11)
			{
				return false;
			}
			int num = (int)(*tile.frameX % 72);
			return num < 18 || num >= 54;
		}

		// Token: 0x06001310 RID: 4880 RVA: 0x004797B4 File Offset: 0x004779B4
		public static bool IsLockedDoor(int x, int y)
		{
			return WorldGen.IsLockedDoor(Main.tile[x, y]);
		}

		// Token: 0x06001311 RID: 4881 RVA: 0x004797C7 File Offset: 0x004779C7
		public unsafe static bool IsLockedDoor(Tile t)
		{
			return *t.type == 10 && *t.frameY >= 594 && *t.frameY <= 646 && *t.frameX < 54;
		}

		// Token: 0x06001312 RID: 4882 RVA: 0x00479804 File Offset: 0x00477A04
		public static void DropDoorItem(int x, int y, int doorStyle)
		{
			int num = 0;
			switch (doorStyle)
			{
			case 0:
				num = 25;
				goto IL_2B4;
			case 9:
				num = 837;
				goto IL_2B4;
			case 10:
				num = 912;
				goto IL_2B4;
			case 12:
				num = 1137;
				goto IL_2B4;
			case 13:
				num = 1138;
				goto IL_2B4;
			case 14:
				num = 1139;
				goto IL_2B4;
			case 15:
				num = 1140;
				goto IL_2B4;
			case 16:
				num = 1411;
				goto IL_2B4;
			case 17:
				num = 1412;
				goto IL_2B4;
			case 18:
				num = 1413;
				goto IL_2B4;
			case 19:
				num = 1458;
				goto IL_2B4;
			case 20:
			case 21:
			case 22:
			case 23:
				num = 1709 + doorStyle - 20;
				goto IL_2B4;
			}
			switch (doorStyle)
			{
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
				num = 812 + doorStyle;
				goto IL_2B4;
			case 24:
				num = 1793;
				goto IL_2B4;
			case 25:
				num = 1815;
				goto IL_2B4;
			case 26:
				num = 1924;
				goto IL_2B4;
			case 27:
				num = 2044;
				goto IL_2B4;
			case 28:
				num = 2265;
				goto IL_2B4;
			case 29:
				num = 2528;
				goto IL_2B4;
			case 30:
				num = 2561;
				goto IL_2B4;
			case 31:
				num = 2576;
				goto IL_2B4;
			case 32:
				num = 2815;
				goto IL_2B4;
			case 33:
				num = 3129;
				goto IL_2B4;
			case 34:
				num = 3131;
				goto IL_2B4;
			case 35:
				num = 3130;
				goto IL_2B4;
			case 36:
				num = 3888;
				goto IL_2B4;
			case 37:
				num = 3941;
				goto IL_2B4;
			case 38:
				num = 3967;
				goto IL_2B4;
			case 39:
				num = 4155;
				goto IL_2B4;
			case 40:
				num = 4176;
				goto IL_2B4;
			case 41:
				num = 4197;
				goto IL_2B4;
			case 42:
				num = 4218;
				goto IL_2B4;
			case 43:
				num = 4307;
				goto IL_2B4;
			case 44:
				num = 4415;
				goto IL_2B4;
			case 45:
				num = 4576;
				goto IL_2B4;
			case 46:
				num = 5158;
				goto IL_2B4;
			case 47:
				num = 5179;
				goto IL_2B4;
			case 48:
				num = 5200;
				goto IL_2B4;
			}
			if (doorStyle != 11)
			{
				num = 649 + doorStyle;
			}
			IL_2B4:
			if (num != 0)
			{
				Item.NewItem(WorldGen.GetItemSource_FromTileBreak(x, y), x * 16, y * 16, 16, 16, num, 1, false, 0, false, false);
			}
		}

		// Token: 0x06001313 RID: 4883 RVA: 0x00479AE7 File Offset: 0x00477CE7
		public static IEntitySource GetItemSource_FromTileBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y, null);
		}

		// Token: 0x06001314 RID: 4884 RVA: 0x00479AF1 File Offset: 0x00477CF1
		public static IEntitySource GetItemSource_FromWallBreak(int x, int y)
		{
			return new EntitySource_TileBreak(x, y, null);
		}

		// Token: 0x06001315 RID: 4885 RVA: 0x00479AFB File Offset: 0x00477CFB
		public static IEntitySource GetItemSource_FromTreeShake(int x, int y)
		{
			return new EntitySource_ShakeTree(x, y, null);
		}

		// Token: 0x06001316 RID: 4886 RVA: 0x00479B08 File Offset: 0x00477D08
		public static bool PlayerLOS(int x, int y)
		{
			Rectangle rectangle;
			rectangle..ctor(x * 16, y * 16, 16, 16);
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					Rectangle value;
					value..ctor((int)((double)Main.player[i].position.X + (double)Main.player[i].width * 0.5 - (double)NPC.sWidth * 0.6), (int)((double)Main.player[i].position.Y + (double)Main.player[i].height * 0.5 - (double)NPC.sHeight * 0.6), (int)((double)NPC.sWidth * 1.2), (int)((double)NPC.sHeight * 1.2));
					if (rectangle.Intersects(value))
					{
						return true;
					}
				}
			}
			return false;
		}

		/// <summary>
		/// Called when an evil biome or hallow tile attempts to spread onto a tile but Chlorophyte (ore or bricks) is found nearby. If the tile targeted by the spreading biome happened to already be converted, this code will purify it back to its regular variant.<br />
		/// This code differs from regular purity conversion such as clentaminator's green solution, as it turns corrupt, crimson and hallowed grass into jungle grass instead of regular grass.<br />
		/// For more info, see <see href="https://terraria.wiki.gg/wiki/Biome_spread#Notes">Biome Spread wiki page</see>.
		/// </summary>
		// Token: 0x06001317 RID: 4887 RVA: 0x00479C00 File Offset: 0x00477E00
		public unsafe static void ChlorophyteDefense(int x, int y)
		{
			if (!Main.remixWorld)
			{
				return;
			}
			if (!TileLoader.Convert(x, y, 9))
			{
				return;
			}
			if (*Main.tile[x, y].type == 23 || *Main.tile[x, y].type == 199 || *Main.tile[x, y].type == 661 || *Main.tile[x, y].type == 662)
			{
				*Main.tile[x, y].type = 60;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (*Main.tile[x, y].type == 25 || *Main.tile[x, y].type == 203)
			{
				*Main.tile[x, y].type = 1;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (*Main.tile[x, y].type == 112 || *Main.tile[x, y].type == 234)
			{
				*Main.tile[x, y].type = 53;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (*Main.tile[x, y].type == 398 || *Main.tile[x, y].type == 399)
			{
				*Main.tile[x, y].type = 397;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (*Main.tile[x, y].type == 400 || *Main.tile[x, y].type == 401)
			{
				*Main.tile[x, y].type = 396;
				WorldGen.SquareTileFrame(x, y, true);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
					return;
				}
			}
			else if (*Main.tile[x, y].type == 24 || *Main.tile[x, y].type == 201 || *Main.tile[x, y].type == 32 || *Main.tile[x, y].type == 352 || *Main.tile[x, y].type == 636 || *Main.tile[x, y].type == 205)
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
				}
			}
		}

		// Token: 0x06001318 RID: 4888 RVA: 0x00479F34 File Offset: 0x00478134
		public unsafe static bool Chlorophyte(int i, int j)
		{
			int num = 40;
			int num2 = 130;
			int num3 = 35;
			int num4 = 85;
			if (Main.remixWorld)
			{
				num += 5;
				num2 *= 15;
				num3 -= 4;
				num4 -= 8;
			}
			else if ((double)j < Main.rockLayer)
			{
				num /= 2;
				num2 /= 2;
				num3 = (int)((double)num3 * 1.5);
				num4 = (int)((double)num4 * 1.5);
			}
			int num5 = 0;
			for (int k = i - num3; k < i + num3; k++)
			{
				for (int l = j - num3; l < j + num3; l++)
				{
					if (WorldGen.InWorld(k, l, 0) && Main.tile[k, l].active() && *Main.tile[k, l].type == 211)
					{
						num5++;
					}
				}
			}
			if (num5 > num)
			{
				return false;
			}
			num5 = 0;
			for (int m = i - num4; m < i + num4; m++)
			{
				for (int n = j - num4; n < j + num4; n++)
				{
					if (WorldGen.InWorld(m, n, 0) && Main.tile[m, n].active() && *Main.tile[m, n].type == 211)
					{
						num5++;
					}
				}
			}
			return num5 <= num2;
		}

		/// <summary>
		/// Returns true if there are 3 or more Chlorophyte or ChlorophyteBrick tiles within a 11x11 area around the provided coordinate. Sometimes returns true if there are less than 3 but more than 0 of them. Used to implement Chlorophyte tiles  restricting the spread of the evil biomes nearby (<see href="https://terraria.wiki.gg/wiki/Biome_spread#Notes">Biome Spread wiki page</see>).
		/// </summary>
		// Token: 0x06001319 RID: 4889 RVA: 0x0047A090 File Offset: 0x00478290
		public unsafe static bool nearbyChlorophyte(int i, int j)
		{
			double num = 0.0;
			int num2 = 5;
			if (i <= num2 + 5 || i >= Main.maxTilesX - num2 - 5)
			{
				return false;
			}
			if (j <= num2 + 5 || j >= Main.maxTilesY - num2 - 5)
			{
				return false;
			}
			for (int k = i - num2; k <= i + num2; k++)
			{
				for (int l = j - num2; l <= j + num2; l++)
				{
					if (Main.tile[k, l].active() && (*Main.tile[k, l].type == 211 || *Main.tile[k, l].type == 346))
					{
						num += 1.0;
						if (num >= 3.0)
						{
							return true;
						}
					}
				}
			}
			if (num > 0.0)
			{
				if (Main.remixWorld)
				{
					if ((double)WorldGen.genRand.Next(-1, 3) < num)
					{
						return true;
					}
				}
				else if ((double)WorldGen.genRand.Next(-1, 4) < num)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600131A RID: 4890 RVA: 0x0047A198 File Offset: 0x00478398
		public unsafe static int CountNearBlocksTypes(int i, int j, int radius, int cap = 0, params int[] tiletypes)
		{
			if (tiletypes.Length == 0)
			{
				return 0;
			}
			int value5 = i - radius;
			int value2 = i + radius;
			int value3 = j - radius;
			int value4 = j + radius;
			int num3 = Utils.Clamp<int>(value5, 0, Main.maxTilesX - 1);
			value2 = Utils.Clamp<int>(value2, 0, Main.maxTilesX - 1);
			value3 = Utils.Clamp<int>(value3, 0, Main.maxTilesY - 1);
			value4 = Utils.Clamp<int>(value4, 0, Main.maxTilesY - 1);
			int num2 = 0;
			for (int k = num3; k <= value2; k++)
			{
				for (int l = value3; l <= value4; l++)
				{
					if (Main.tile[k, l].active())
					{
						int m = 0;
						while (m < tiletypes.Length)
						{
							if (tiletypes[m] == (int)(*Main.tile[k, l].type))
							{
								num2++;
								if (cap > 0 && num2 >= cap)
								{
									return num2;
								}
								break;
							}
							else
							{
								m++;
							}
						}
					}
				}
			}
			return num2;
		}

		// Token: 0x0600131B RID: 4891 RVA: 0x0047A270 File Offset: 0x00478470
		public unsafe static void hardUpdateWorld(int i, int j)
		{
			if (!Main.hardMode || Main.tile[i, j].inActive())
			{
				return;
			}
			int type = (int)(*Main.tile[i, j].type);
			if (type > 0 && TileID.Sets.CanGrowCrystalShards[type] && ((double)j > Main.rockLayer || Main.remixWorld) && WorldGen.genRand.Next(5) == 0)
			{
				int num = WorldGen.genRand.Next(4);
				int num2 = 0;
				int num3 = 0;
				if (num != 0)
				{
					if (num != 1)
					{
						num3 = ((num != 0) ? 1 : -1);
					}
					else
					{
						num2 = 1;
					}
				}
				else
				{
					num2 = -1;
				}
				if (!Main.tile[i + num2, j + num3].active())
				{
					int num4 = 0;
					int num5 = 6;
					for (int k = i - num5; k <= i + num5; k++)
					{
						for (int l = j - num5; l <= j + num5; l++)
						{
							if (Main.tile[k, l].active() && *Main.tile[k, l].type == 129)
							{
								num4++;
							}
						}
					}
					if (num4 < 2)
					{
						int style = (int)((short)WorldGen.genRand.Next(18));
						if (WorldGen.genRand.Next(50) == 0)
						{
							style = (int)((short)(18 + WorldGen.genRand.Next(6)));
						}
						WorldGen.PlaceTile(i + num2, j + num3, 129, true, false, -1, style);
						NetMessage.SendTileSquare(-1, i + num2, j + num3, TileChangeType.None);
					}
				}
			}
			if ((double)j > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.remixWorld)
			{
				if (type == 60 && WorldGen.genRand.Next(300) == 0)
				{
					int num6 = i + WorldGen.genRand.Next(-10, 11);
					int num7 = j + WorldGen.genRand.Next(-10, 11);
					if (WorldGen.InWorld(num6, num7, 2) && Main.tile[num6, num7].active() && *Main.tile[num6, num7].type == 59 && (!Main.tile[num6, num7 - 1].active() || (*Main.tile[num6, num7 - 1].type != 5 && *Main.tile[num6, num7 - 1].type != 236 && *Main.tile[num6, num7 - 1].type != 238)) && WorldGen.Chlorophyte(num6, num7))
					{
						*Main.tile[num6, num7].type = 211;
						WorldGen.SquareTileFrame(num6, num7, true);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num6, num7, TileChangeType.None);
						}
					}
				}
				if (type == 211 || type == 346)
				{
					int num8 = i;
					int num9 = j;
					if (WorldGen.genRand.Next(3) != 0)
					{
						int num16 = WorldGen.genRand.Next(4);
						if (num16 == 0)
						{
							num8++;
						}
						if (num16 == 1)
						{
							num8--;
						}
						if (num16 == 2)
						{
							num9++;
						}
						if (num16 == 3)
						{
							num9--;
						}
						if (WorldGen.InWorld(num8, num9, 2) && Main.tile[num8, num9].active() && (*Main.tile[num8, num9].type == 59 || *Main.tile[num8, num9].type == 60) && WorldGen.Chlorophyte(num8, num9))
						{
							*Main.tile[num8, num9].type = 211;
							WorldGen.SquareTileFrame(num8, num9, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
							}
						}
					}
					bool flag = true;
					while (flag)
					{
						flag = false;
						num8 = i + Main.rand.Next(-6, 7);
						num9 = j + Main.rand.Next(-6, 7);
						if (WorldGen.InWorld(num8, num9, 2) && Main.tile[num8, num9].active())
						{
							ushort num17 = *Main.tile[num8, num9].type;
							bool convertTile = TileLoader.Convert(num8, num9, 9);
							if (num17 != *Main.tile[num8, num9].type)
							{
								flag = true;
							}
							else if (convertTile)
							{
								if (*Main.tile[num8, num9].type == 661 || *Main.tile[num8, num9].type == 662 || *Main.tile[num8, num9].type == 23 || *Main.tile[num8, num9].type == 199 || *Main.tile[num8, num9].type == 2 || *Main.tile[num8, num9].type == 477 || *Main.tile[num8, num9].type == 492 || *Main.tile[num8, num9].type == 109)
								{
									*Main.tile[num8, num9].type = 60;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 0)
								{
									*Main.tile[num8, num9].type = 59;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 25 || *Main.tile[num8, num9].type == 203)
								{
									*Main.tile[num8, num9].type = 1;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 112 || *Main.tile[num8, num9].type == 234)
								{
									*Main.tile[num8, num9].type = 53;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 398 || *Main.tile[num8, num9].type == 399)
								{
									*Main.tile[num8, num9].type = 397;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 400 || *Main.tile[num8, num9].type == 401)
								{
									*Main.tile[num8, num9].type = 396;
									WorldGen.SquareTileFrame(num8, num9, true);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
								else if (*Main.tile[num8, num9].type == 24 || *Main.tile[num8, num9].type == 201 || *Main.tile[num8, num9].type == 32 || *Main.tile[num8, num9].type == 352 || *Main.tile[num8, num9].type == 636 || *Main.tile[num8, num9].type == 205)
								{
									WorldGen.KillTile(num8, num9, false, false, false);
									if (Main.netMode == 2)
									{
										NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
									}
									flag = true;
								}
							}
						}
					}
				}
			}
			if ((NPC.downedPlantBoss && WorldGen.genRand.Next(2) != 0) || !WorldGen.AllowedToSpreadInfections)
			{
				return;
			}
			if (type == 23 || type == 25 || type == 32 || type == 112 || type == 163 || type == 400 || type == 398 || type == 636 || type == 661)
			{
				bool flag2 = true;
				while (flag2)
				{
					flag2 = false;
					int num10 = i + WorldGen.genRand.Next(-3, 4);
					int num11 = j + WorldGen.genRand.Next(-3, 4);
					if (WorldGen.InWorld(num10, num11, 10) && Main.tile[num10, num11].active())
					{
						if (WorldGen.nearbyChlorophyte(num10, num11))
						{
							WorldGen.ChlorophyteDefense(num10, num11);
						}
						else if (WorldGen.CountNearBlocksTypes(num10, num11, 2, 1, new int[]
						{
							27
						}) <= 0)
						{
							ushort num18 = *Main.tile[num10, num11].type;
							bool convertTile2 = TileLoader.Convert(num10, num11, 1);
							if (num18 != *Main.tile[num10, num11].type)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									flag2 = true;
								}
							}
							else if (convertTile2)
							{
								if (*Main.tile[num10, num11].type == 2)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 23;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 1 || Main.tileMoss[(int)(*Main.tile[num10, num11].type)])
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 25;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 53)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 112;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 396)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 400;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 397)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 398;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 60)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 661;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 69)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 32;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
								else if (*Main.tile[num10, num11].type == 161)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag2 = true;
									}
									*Main.tile[num10, num11].type = 163;
									WorldGen.SquareTileFrame(num10, num11, true);
									NetMessage.SendTileSquare(-1, num10, num11, TileChangeType.None);
								}
							}
						}
					}
				}
			}
			if (type == 199 || type == 200 || type == 201 || type == 203 || type == 205 || type == 234 || type == 352 || type == 401 || type == 399 || type == 662)
			{
				bool flag3 = true;
				while (flag3)
				{
					flag3 = false;
					int num12 = i + WorldGen.genRand.Next(-3, 4);
					int num13 = j + WorldGen.genRand.Next(-3, 4);
					if (WorldGen.InWorld(num12, num13, 10) && Main.tile[num12, num13].active())
					{
						if (WorldGen.nearbyChlorophyte(num12, num13))
						{
							WorldGen.ChlorophyteDefense(num12, num13);
						}
						else if (WorldGen.CountNearBlocksTypes(num12, num13, 2, 1, new int[]
						{
							27
						}) <= 0)
						{
							ushort num19 = *Main.tile[num12, num13].type;
							bool convertTile3 = TileLoader.Convert(num12, num13, 4);
							if (num19 != *Main.tile[num12, num13].type)
							{
								if (WorldGen.genRand.Next(2) == 0)
								{
									flag3 = true;
								}
							}
							else if (convertTile3)
							{
								if (*Main.tile[num12, num13].type == 2)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 199;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 1 || Main.tileMoss[(int)(*Main.tile[num12, num13].type)])
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 203;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 53)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 234;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 396)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 401;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 397)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 399;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 60)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 662;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 69)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 352;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
								else if (*Main.tile[num12, num13].type == 161)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										flag3 = true;
									}
									*Main.tile[num12, num13].type = 200;
									WorldGen.SquareTileFrame(num12, num13, true);
									NetMessage.SendTileSquare(-1, num12, num13, TileChangeType.None);
								}
							}
						}
					}
				}
			}
			if (type != 109 && type != 110 && type != 113 && type != 115 && type != 116 && type != 117 && type != 164 && type != 402 && type != 403 && type != 492)
			{
				return;
			}
			bool flag4 = true;
			while (flag4)
			{
				flag4 = false;
				int num14 = i + WorldGen.genRand.Next(-3, 4);
				int num15 = j + WorldGen.genRand.Next(-3, 4);
				if (WorldGen.InWorld(num14, num15, 10) && WorldGen.CountNearBlocksTypes(num14, num15, 2, 1, new int[]
				{
					27
				}) <= 0 && Main.tile[num14, num15].active())
				{
					ushort num20 = *Main.tile[num14, num15].type;
					bool convertTile4 = TileLoader.Convert(num14, num15, 2);
					if (num20 != *Main.tile[num14, num15].type)
					{
						if (WorldGen.genRand.Next(2) == 0)
						{
							flag4 = true;
						}
					}
					else if (convertTile4)
					{
						if (*Main.tile[num14, num15].type == 2)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 109;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 477)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 492;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 1 || Main.tileMoss[(int)(*Main.tile[num14, num15].type)])
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 117;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 53)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 116;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 396)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 403;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 397)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 402;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
						else if (*Main.tile[num14, num15].type == 161)
						{
							if (WorldGen.genRand.Next(2) == 0)
							{
								flag4 = true;
							}
							*Main.tile[num14, num15].type = 164;
							WorldGen.SquareTileFrame(num14, num15, true);
							NetMessage.SendTileSquare(-1, num14, num15, TileChangeType.None);
						}
					}
				}
			}
		}

		// Token: 0x0600131C RID: 4892 RVA: 0x0047B7DC File Offset: 0x004799DC
		public unsafe static bool SolidTile(Tile testTile)
		{
			try
			{
				if (testTile == null)
				{
					return true;
				}
				if (testTile.active() && Main.tileSolid[(int)(*testTile.type)] && !Main.tileSolidTop[(int)(*testTile.type)] && !testTile.halfBrick() && testTile.slope() == 0 && !testTile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600131D RID: 4893 RVA: 0x0047B858 File Offset: 0x00479A58
		public static bool TileEmpty(int i, int j)
		{
			return !(Main.tile[i, j] != null) || !Main.tile[i, j].active() || Main.tile[i, j].inActive();
		}

		// Token: 0x0600131E RID: 4894 RVA: 0x0047B8A5 File Offset: 0x00479AA5
		public unsafe static bool SolidOrSlopedTile(Tile tile)
		{
			return tile != null && tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)] && !tile.inActive();
		}

		// Token: 0x0600131F RID: 4895 RVA: 0x0047B8E8 File Offset: 0x00479AE8
		public unsafe static int TileType(int x, int y)
		{
			if (!Main.tile[x, y].active())
			{
				return -1;
			}
			return (int)(*Main.tile[x, y].type);
		}

		// Token: 0x06001320 RID: 4896 RVA: 0x0047B922 File Offset: 0x00479B22
		public static bool SolidOrSlopedTile(int x, int y)
		{
			return WorldGen.SolidOrSlopedTile(Main.tile[x, y]);
		}

		// Token: 0x06001321 RID: 4897 RVA: 0x0047B938 File Offset: 0x00479B38
		public unsafe static bool IsRope(int x, int y)
		{
			return !(Main.tile[x, y] == null) && Main.tile[x, y].active() && (Main.tileRope[(int)(*Main.tile[x, y].type)] || ((*Main.tile[x, y].type == 314 || TileID.Sets.Platforms[(int)(*Main.tile[x, y].type)]) && Main.tile[x, y - 1] != null && Main.tile[x, y + 1] != null && Main.tile[x, y - 1].active() && Main.tile[x, y + 1].active() && Main.tileRope[(int)(*Main.tile[x, y - 1].type)] && Main.tileRope[(int)(*Main.tile[x, y + 1].type)]));
		}

		// Token: 0x06001322 RID: 4898 RVA: 0x0047BA6C File Offset: 0x00479C6C
		public static bool SolidTile(Point p)
		{
			return WorldGen.SolidTile(p.X, p.Y, false);
		}

		// Token: 0x06001323 RID: 4899 RVA: 0x0047BA80 File Offset: 0x00479C80
		public unsafe static bool SolidTile(int i, int j, bool noDoors = false)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)(*Main.tile[i, j].type)] && !Main.tileSolidTop[(int)(*Main.tile[i, j].type)] && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && !Main.tile[i, j].inActive())
				{
					if (noDoors && *Main.tile[i, j].type == 10)
					{
						return false;
					}
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001324 RID: 4900 RVA: 0x0047BB7C File Offset: 0x00479D7C
		public unsafe static bool SolidTile2(Tile testTile)
		{
			try
			{
				if (testTile == null)
				{
					return true;
				}
				if (testTile.active() && Main.tileSolid[(int)(*testTile.type)] && testTile.slope() == 0 && !testTile.halfBrick() && !testTile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001325 RID: 4901 RVA: 0x0047BBE8 File Offset: 0x00479DE8
		public static bool PlatformProperTopFrame(short frameX)
		{
			int num = (int)frameX / TileObjectData.PlatformFrameWidth();
			return (num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26);
		}

		/// <summary>
		/// Returns true if there is a solid tile at the provided tile coordinates suitable for a tile to be anchored above.
		/// <br /><br /> Specifically, this checks that the tile is active, unactuated, is <see cref="F:Terraria.Main.tileSolid" /> or <see cref="F:Terraria.Main.tileSolidTop" />, isn't a half block, and it has a solid top side (top isn't sloped).
		/// </summary>
		// Token: 0x06001326 RID: 4902 RVA: 0x0047BC20 File Offset: 0x00479E20
		public unsafe static bool SolidTileAllowBottomSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)(*tile.type)] || Main.tileSolidTop[(int)(*tile.type)]) && (!tile.topSlope() || (TileID.Sets.Platforms[(int)(*tile.type)] && WorldGen.PlatformProperTopFrame(*tile.frameX))) && !tile.halfBrick() && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001327 RID: 4903 RVA: 0x0047BCC8 File Offset: 0x00479EC8
		public unsafe static bool ActiveAndWalkableTile(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001328 RID: 4904 RVA: 0x0047BD30 File Offset: 0x00479F30
		public unsafe static bool SolidTileAllowTopSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)(*tile.type)] || *tile.type == 380) && (!tile.bottomSlope() || (TileID.Sets.Platforms[(int)(*tile.type)] && tile.halfBrick())) && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001329 RID: 4905 RVA: 0x0047BDC8 File Offset: 0x00479FC8
		public unsafe static bool SolidTileAllowLeftSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !tile.rightSlope() && !TileID.Sets.Platforms[(int)(*tile.type)] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132A RID: 4906 RVA: 0x0047BE48 File Offset: 0x0047A048
		public unsafe static bool SolidTileAllowRightSlope(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !tile.leftSlope() && !TileID.Sets.Platforms[(int)(*tile.type)] && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132B RID: 4907 RVA: 0x0047BEC8 File Offset: 0x0047A0C8
		public unsafe static bool TopEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && (Main.tileSolid[(int)(*tile.type)] || Main.tileSolidTop[(int)(*tile.type)]) && (!tile.topSlope() || (TileID.Sets.Platforms[(int)(*tile.type)] && WorldGen.PlatformProperTopFrame(*tile.frameX))) && !tile.halfBrick() && !tile.inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132C RID: 4908 RVA: 0x0047BF70 File Offset: 0x0047A170
		public unsafe static bool RightEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)] && !tile.rightSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[(int)(*tile.type)])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132D RID: 4909 RVA: 0x0047C008 File Offset: 0x0047A208
		public unsafe static bool LeftEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)] && !tile.leftSlope() && !tile.halfBrick() && !tile.inActive() && !Main.tileNoAttach[(int)(*tile.type)])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132E RID: 4910 RVA: 0x0047C0A0 File Offset: 0x0047A2A0
		public unsafe static bool BottomEdgeCanBeAttachedTo(int i, int j)
		{
			try
			{
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					return true;
				}
				if (tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)] && !tile.bottomSlope() && !tile.inActive() && !Main.tileNoAttach[(int)(*tile.type)])
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x0600132F RID: 4911 RVA: 0x0047C130 File Offset: 0x0047A330
		public static bool SolidTile3(int i, int j)
		{
			return WorldGen.InWorld(i, j, 1) && WorldGen.SolidTile3(Main.tile[i, j]);
		}

		// Token: 0x06001330 RID: 4912 RVA: 0x0047C150 File Offset: 0x0047A350
		public unsafe static bool SolidTile3(Tile t)
		{
			return !(t == null) && (t.active() && !t.inActive() && Main.tileSolid[(int)(*t.type)]) && !Main.tileSolidTop[(int)(*t.type)];
		}

		// Token: 0x06001331 RID: 4913 RVA: 0x0047C1A0 File Offset: 0x0047A3A0
		public unsafe static bool SolidTile2(int i, int j)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)(*Main.tile[i, j].type)] && ((TileID.Sets.Platforms[(int)(*Main.tile[i, j].type)] && (Main.tile[i, j].halfBrick() || Main.tile[i, j].topSlope())) || Main.tile[i, j].slope() == 0) && !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001332 RID: 4914 RVA: 0x0047C2A8 File Offset: 0x0047A4A8
		public unsafe static bool SolidTileNoAttach(int i, int j)
		{
			try
			{
				if (Main.tile[i, j] == null)
				{
					return true;
				}
				if (Main.tile[i, j].active() && Main.tileSolid[(int)(*Main.tile[i, j].type)] && !Main.tileNoAttach[(int)(*Main.tile[i, j].type)] && Main.tile[i, j].slope() == 0 && !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
				{
					return true;
				}
			}
			catch
			{
			}
			return false;
		}

		// Token: 0x06001333 RID: 4915 RVA: 0x0047C384 File Offset: 0x0047A584
		public unsafe static void MineHouse(int i, int j)
		{
			if (i < 50 || i > Main.maxTilesX - 50 || j < 50 || j > Main.maxTilesY - 50)
			{
				return;
			}
			int num = WorldGen.genRand.Next(6, 12);
			int num2 = WorldGen.genRand.Next(3, 6);
			int num3 = WorldGen.genRand.Next(15, 30);
			int num4 = WorldGen.genRand.Next(15, 30);
			if (WorldGen.SolidTile(i, j, false) || *Main.tile[i, j].wall > 0)
			{
				return;
			}
			int num5 = j - num;
			int num6 = j + num2;
			for (int k = 0; k < 2; k++)
			{
				bool flag = true;
				int num7 = i;
				int num8 = j;
				int num9 = -1;
				int num10 = num3;
				if (k == 1)
				{
					num9 = 1;
					num10 = num4;
					num7++;
				}
				while (flag)
				{
					if (num8 - num < num5)
					{
						num5 = num8 - num;
					}
					if (num8 + num2 > num6)
					{
						num6 = num8 + num2;
					}
					for (int l = 0; l < 2; l++)
					{
						int num11 = num8;
						bool flag2 = true;
						int num12 = num;
						int num13 = -1;
						if (l == 1)
						{
							num11++;
							num12 = num2;
							num13 = 1;
						}
						while (flag2)
						{
							if (num7 != i && *Main.tile[num7 - num9, num11].wall != 27 && (WorldGen.SolidTile(num7 - num9, num11, false) || !Main.tile[num7 - num9, num11].active() || Main.tile[num7 - num9, num11].halfBrick() || Main.tile[num7 - num9, num11].slope() != 0))
							{
								Main.tile[num7 - num9, num11].active(true);
								*Main.tile[num7 - num9, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7 - 1, num11, false) || Main.tile[num7 - 1, num11].halfBrick() || Main.tile[num7 - 1, num11].slope() != 0)
							{
								*Main.tile[num7 - 1, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7 + 1, num11, false) || Main.tile[num7 + 1, num11].halfBrick() || Main.tile[num7 + 1, num11].slope() != 0)
							{
								*Main.tile[num7 + 1, num11].type = 30;
							}
							if (WorldGen.SolidTile(num7, num11, false) || Main.tile[num7, num11].halfBrick() || Main.tile[num7, num11].slope() != 0)
							{
								int num14 = 0;
								if (WorldGen.SolidTile(num7 - 1, num11, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7 + 1, num11, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7, num11 - 1, false))
								{
									num14++;
								}
								if (WorldGen.SolidTile(num7, num11 + 1, false))
								{
									num14++;
								}
								if (num14 < 2)
								{
									Main.tile[num7, num11].active(false);
								}
								else
								{
									flag2 = false;
									*Main.tile[num7, num11].type = 30;
								}
							}
							else
							{
								*Main.tile[num7, num11].wall = 27;
								*Main.tile[num7, num11].liquid = 0;
								Main.tile[num7, num11].lava(false);
							}
							num11 += num13;
							num12--;
							if (num12 <= 0)
							{
								if (!Main.tile[num7, num11].active())
								{
									Main.tile[num7, num11].active(true);
									*Main.tile[num7, num11].type = 30;
								}
								flag2 = false;
							}
						}
					}
					num10--;
					num7 += num9;
					if (WorldGen.SolidTile(num7, num8, false))
					{
						int num15 = 0;
						int num16 = 0;
						int num17 = num8;
						bool flag3 = true;
						while (flag3)
						{
							num17--;
							num15++;
							if (WorldGen.SolidTile(num7 - num9, num17, false))
							{
								num15 = 999;
								flag3 = false;
							}
							else if (!WorldGen.SolidTile(num7, num17, false))
							{
								flag3 = false;
							}
						}
						num17 = num8;
						flag3 = true;
						while (flag3)
						{
							num17++;
							num16++;
							if (WorldGen.SolidTile(num7 - num9, num17, false))
							{
								num16 = 999;
								flag3 = false;
							}
							else if (!WorldGen.SolidTile(num7, num17, false))
							{
								flag3 = false;
							}
						}
						if (num16 <= num15)
						{
							if (num16 > num2)
							{
								num10 = 0;
							}
							else
							{
								num8 += num16 + 1;
							}
						}
						else if (num15 > num)
						{
							num10 = 0;
						}
						else
						{
							num8 -= num15 + 1;
						}
					}
					if (num10 <= 0)
					{
						flag = false;
					}
				}
			}
			int num18 = i - num3 - 1;
			int num19 = i + num4 + 2;
			int num20 = num5 - 1;
			int num21 = num6 + 2;
			for (int m = num18; m < num19; m++)
			{
				for (int n = num20; n < num21; n++)
				{
					if (*Main.tile[m, n].wall == 27 && !Main.tile[m, n].active())
					{
						if (*Main.tile[m - 1, n].wall != 27 && m < i && !WorldGen.SolidTile(m - 1, n, false))
						{
							WorldGen.PlaceTile(m, n, 30, true, false, -1, 0);
							*Main.tile[m, n].wall = 0;
						}
						if (*Main.tile[m + 1, n].wall != 27 && m > i && !WorldGen.SolidTile(m + 1, n, false))
						{
							WorldGen.PlaceTile(m, n, 30, true, false, -1, 0);
							*Main.tile[m, n].wall = 0;
						}
						for (int num22 = m - 1; num22 <= m + 1; num22++)
						{
							for (int num23 = n - 1; num23 <= n + 1; num23++)
							{
								if (WorldGen.SolidTile(num22, num23, false))
								{
									*Main.tile[num22, num23].type = 30;
								}
							}
						}
					}
					if (*Main.tile[m, n].type == 30 && *Main.tile[m - 1, n].wall == 27 && *Main.tile[m + 1, n].wall == 27 && (*Main.tile[m, n - 1].wall == 27 || Main.tile[m, n - 1].active()) && (*Main.tile[m, n + 1].wall == 27 || Main.tile[m, n + 1].active()))
					{
						Main.tile[m, n].active(false);
						*Main.tile[m, n].wall = 27;
					}
				}
			}
			for (int num24 = num18; num24 < num19; num24++)
			{
				for (int num25 = num20; num25 < num21; num25++)
				{
					if (*Main.tile[num24, num25].type == 30)
					{
						if (*Main.tile[num24 - 1, num25].wall == 27 && *Main.tile[num24 + 1, num25].wall == 27 && !Main.tile[num24 - 1, num25].active() && !Main.tile[num24 + 1, num25].active())
						{
							Main.tile[num24, num25].active(false);
							*Main.tile[num24, num25].wall = 27;
						}
						if (!TileID.Sets.BasicChest[(int)(*Main.tile[num24, num25 - 1].type)] && *Main.tile[num24 - 1, num25].wall == 27 && *Main.tile[num24 + 1, num25].type == 30 && *Main.tile[num24 + 2, num25].wall == 27 && !Main.tile[num24 - 1, num25].active() && !Main.tile[num24 + 2, num25].active())
						{
							Main.tile[num24, num25].active(false);
							*Main.tile[num24, num25].wall = 27;
							Main.tile[num24 + 1, num25].active(false);
							*Main.tile[num24 + 1, num25].wall = 27;
						}
						if (*Main.tile[num24, num25 - 1].wall == 27 && *Main.tile[num24, num25 + 1].wall == 27 && !Main.tile[num24, num25 - 1].active() && !Main.tile[num24, num25 + 1].active())
						{
							Main.tile[num24, num25].active(false);
							*Main.tile[num24, num25].wall = 27;
						}
					}
				}
			}
			for (int num26 = num18; num26 < num19; num26++)
			{
				for (int num27 = num21; num27 > num20; num27--)
				{
					bool flag4 = false;
					if (Main.tile[num26, num27].active() && *Main.tile[num26, num27].type == 30)
					{
						int num28 = -1;
						for (int num29 = 0; num29 < 2; num29++)
						{
							if (!WorldGen.SolidTile(num26 + num28, num27, false) && *Main.tile[num26 + num28, num27].wall == 0)
							{
								int num30 = 0;
								int num31 = num27;
								int num32 = num27;
								while (Main.tile[num26, num31].active() && *Main.tile[num26, num31].type == 30 && !WorldGen.SolidTile(num26 + num28, num31, false) && *Main.tile[num26 + num28, num31].wall == 0)
								{
									num31--;
									num30++;
								}
								num31++;
								int num33 = num31 + 1;
								if (num30 > 4)
								{
									if (WorldGen.genRand.Next(2) == 0)
									{
										num31 = num32 - 1;
										bool flag5 = true;
										for (int num34 = num26 - 2; num34 <= num26 + 2; num34++)
										{
											for (int num35 = num31 - 2; num35 <= num31; num35++)
											{
												if (num34 != num26 && Main.tile[num34, num35].active())
												{
													flag5 = false;
												}
											}
										}
										if (flag5)
										{
											Main.tile[num26, num31].active(false);
											Main.tile[num26, num31 - 1].active(false);
											Main.tile[num26, num31 - 2].active(false);
											WorldGen.PlaceTile(num26, num31, 10, true, false, -1, 0);
											flag4 = true;
										}
									}
									if (!flag4)
									{
										for (int num36 = num33; num36 < num32; num36++)
										{
											*Main.tile[num26, num36].type = 124;
										}
									}
								}
							}
							num28 = 1;
						}
					}
					if (flag4)
					{
						break;
					}
				}
			}
			int num37 = WorldGen.genRand.Next(1, 2);
			if (WorldGen.genRand.Next(4) == 0)
			{
				num37 = 0;
			}
			if (WorldGen.genRand.Next(6) == 0)
			{
				num37++;
			}
			if (WorldGen.genRand.Next(10) == 0)
			{
				num37++;
			}
			for (int num38 = 0; num38 < num37; num38++)
			{
				int num39 = 0;
				int num40 = WorldGen.genRand.Next(num18, num19);
				int num41 = WorldGen.genRand.Next(num20, num21);
				while (!Main.wallHouse[(int)(*Main.tile[num40, num41].wall)] || Main.tile[num40, num41].active())
				{
					num39++;
					if (num39 > 1000)
					{
						break;
					}
					num40 = WorldGen.genRand.Next(num18, num19);
					num41 = WorldGen.genRand.Next(num20, num21);
				}
				if (num39 > 1000)
				{
					break;
				}
				int num43;
				int num44;
				int num45;
				int num46;
				for (int num42 = 0; num42 < 2; num42++)
				{
					num43 = num40;
					num44 = num40;
					while (!Main.tile[num43, num41].active() && Main.wallHouse[(int)(*Main.tile[num43, num41].wall)])
					{
						num43--;
					}
					num43++;
					while (!Main.tile[num44, num41].active() && Main.wallHouse[(int)(*Main.tile[num44, num41].wall)])
					{
						num44++;
					}
					num44--;
					i = (num43 + num44) / 2;
					num45 = num41;
					num46 = num41;
					while (!Main.tile[num40, num45].active() && Main.wallHouse[(int)(*Main.tile[num40, num45].wall)])
					{
						num45--;
					}
					num45++;
					while (!Main.tile[num40, num46].active() && Main.wallHouse[(int)(*Main.tile[num40, num46].wall)])
					{
						num46++;
					}
					num46--;
					num41 = (num45 + num46) / 2;
				}
				num43 = num40;
				num44 = num40;
				while (!Main.tile[num43, num41].active() && !Main.tile[num43, num41 - 1].active() && !Main.tile[num43, num41 + 1].active())
				{
					num43--;
				}
				num43++;
				while (!Main.tile[num44, num41].active() && !Main.tile[num44, num41 - 1].active() && !Main.tile[num44, num41 + 1].active())
				{
					num44++;
				}
				num44--;
				num45 = num41;
				num46 = num41;
				while (!Main.tile[num40, num45].active() && !Main.tile[num40 - 1, num45].active() && !Main.tile[num40 + 1, num45].active())
				{
					num45--;
				}
				num45++;
				while (!Main.tile[num40, num46].active() && !Main.tile[num40 - 1, num46].active() && !Main.tile[num40 + 1, num46].active())
				{
					num46++;
				}
				num46--;
				num40 = (num43 + num44) / 2;
				num41 = (num45 + num46) / 2;
				int num73 = num44 - num43;
				int num47 = num46 - num45;
				if (num73 > 7 && num47 > 5)
				{
					int num48 = 0;
					if (WorldGen.nearPicture2(i, num41))
					{
						num48 = -1;
					}
					if (num48 == 0)
					{
						PaintingEntry paintingEntry = WorldGen.RandHousePicture();
						if (!WorldGen.nearPicture(num40, num41))
						{
							WorldGen.PlaceTile(num40, num41, paintingEntry.tileType, true, false, -1, paintingEntry.style);
						}
					}
				}
			}
			for (int num49 = num18; num49 < num19; num49++)
			{
				bool flag6 = true;
				for (int num50 = num20; num50 < num21; num50++)
				{
					for (int num51 = num49 - 3; num51 <= num49 + 3; num51++)
					{
						if (Main.tile[num51, num50].active() && (!WorldGen.SolidTile(num51, num50, false) || *Main.tile[num51, num50].type == 10))
						{
							flag6 = false;
						}
					}
				}
				if (flag6)
				{
					for (int num52 = num20; num52 < num21; num52++)
					{
						if (*Main.tile[num49, num52].wall == 27 && !Main.tile[num49, num52].active())
						{
							WorldGen.PlaceTile(num49, num52, 124, true, false, -1, 0);
						}
					}
				}
				num49 += WorldGen.genRand.Next(4);
			}
			for (int num53 = 0; num53 < 4; num53++)
			{
				int num54 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num55 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (*Main.tile[num54, num55].wall != 27)
				{
					num54 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num55 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num54, num55].active())
				{
					num55--;
				}
				while (!Main.tile[num54, num55].active())
				{
					num55++;
				}
				num55--;
				if (*Main.tile[num54, num55].wall == 27)
				{
					if (WorldGen.genRand.Next(3) == 0)
					{
						int num56 = WorldGen.genRand.Next(9);
						if (num56 == 0)
						{
							num56 = 14;
						}
						if (num56 == 1)
						{
							num56 = 16;
						}
						if (num56 == 2)
						{
							num56 = 18;
						}
						if (num56 == 3)
						{
							num56 = 86;
						}
						if (num56 == 4)
						{
							num56 = 87;
						}
						if (num56 == 5)
						{
							num56 = 94;
						}
						if (num56 == 6)
						{
							num56 = 101;
						}
						if (num56 == 7)
						{
							num56 = 104;
						}
						if (num56 == 8)
						{
							num56 = 106;
						}
						WorldGen.PlaceTile(num54, num55, num56, true, false, -1, 0);
					}
					else if (GenVars.statueList != null)
					{
						int num57 = WorldGen.genRand.Next(2, GenVars.statueList.Length);
						WorldGen.PlaceTile(num54, num55, (int)GenVars.statueList[num57].X, true, true, -1, (int)GenVars.statueList[num57].Y);
					}
				}
			}
			for (int num58 = 0; num58 < 40; num58++)
			{
				int num59 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num60 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (*Main.tile[num59, num60].wall != 27)
				{
					num59 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num60 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num59, num60].active())
				{
					num60--;
				}
				while (!Main.tile[num59, num60].active())
				{
					num60++;
				}
				num60--;
				if (*Main.tile[num59, num60].wall == 27 && WorldGen.genRand.Next(2) == 0)
				{
					int style = WorldGen.genRand.Next(22, 26);
					WorldGen.PlaceTile(num59, num60, 186, true, false, -1, style);
				}
			}
			for (int num61 = 0; num61 < 20; num61++)
			{
				int num62 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num63 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (*Main.tile[num62, num63].wall != 27)
				{
					num62 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num63 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num62, num63].active())
				{
					num63--;
				}
				while (!Main.tile[num62, num63].active())
				{
					num63++;
				}
				num63--;
				if (*Main.tile[num62, num63].wall == 27 && WorldGen.genRand.Next(2) == 0)
				{
					int x = WorldGen.genRand.Next(31, 34);
					WorldGen.PlaceSmallPile(num62, num63, x, 1, 185);
				}
			}
			for (int num64 = 0; num64 < 15; num64++)
			{
				int num65 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
				int num66 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				while (*Main.tile[num65, num66].wall != 27)
				{
					num65 = WorldGen.genRand.Next(num18 + 2, num19 - 1);
					num66 = WorldGen.genRand.Next(num20 + 2, num21 - 1);
				}
				while (Main.tile[num65, num66].active())
				{
					num66--;
				}
				while (num66 > 0 && !Main.tile[num65, num66 - 1].active())
				{
					num66--;
				}
				if (*Main.tile[num65, num66].wall == 27)
				{
					int style2 = 0;
					int num67;
					if (WorldGen.genRand.Next(10) < 9)
					{
						num67 = -1;
					}
					else
					{
						num67 = 34;
						style2 = WorldGen.genRand.Next(6);
					}
					if (num67 > 0)
					{
						WorldGen.PlaceTile(num65, num66, num67, true, false, -1, style2);
						if ((int)(*Main.tile[num65, num66].type) == num67)
						{
							if (num67 == 4)
							{
								ref short frameX = ref Main.tile[num65, num66].frameX;
								frameX += 54;
							}
							else
							{
								int num68 = num65;
								int num69 = num66;
								num66 = num69 - (int)(*Main.tile[num68, num69].frameY % 54 / 18);
								num65 = (int)(*Main.tile[num68, num69].frameX / 18);
								if (num65 > 2)
								{
									num65 -= 3;
								}
								num65 = num68 - num65;
								short num70 = 54;
								if (*Main.tile[num65, num66].frameX > 0)
								{
									num70 = -54;
								}
								for (int num71 = num65; num71 < num65 + 3; num71++)
								{
									for (int num72 = num66; num72 < num66 + 3; num72++)
									{
										ref short frameX2 = ref Main.tile[num71, num72].frameX;
										frameX2 += num70;
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06001334 RID: 4916 RVA: 0x0047DB94 File Offset: 0x0047BD94
		public unsafe static void CountTiles(int X)
		{
			if (X == 0)
			{
				WorldGen.totalEvil = WorldGen.totalEvil2;
				WorldGen.totalBlood = WorldGen.totalBlood2;
				WorldGen.totalSolid = WorldGen.totalSolid2;
				WorldGen.totalGood = WorldGen.totalGood2;
				WorldGen.tGood = (byte)Math.Round((double)WorldGen.totalGood / (double)WorldGen.totalSolid * 100.0);
				WorldGen.tEvil = (byte)Math.Round((double)WorldGen.totalEvil / (double)WorldGen.totalSolid * 100.0);
				WorldGen.tBlood = (byte)Math.Round((double)WorldGen.totalBlood / (double)WorldGen.totalSolid * 100.0);
				if (WorldGen.tGood == 0 && WorldGen.totalGood > 0)
				{
					WorldGen.tGood = 1;
				}
				if (WorldGen.tEvil == 0 && WorldGen.totalEvil > 0)
				{
					WorldGen.tEvil = 1;
				}
				if (WorldGen.tBlood == 0 && WorldGen.totalBlood > 0)
				{
					WorldGen.tBlood = 1;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(57, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
				WorldGen.totalEvil2 = 0;
				WorldGen.totalSolid2 = 0;
				WorldGen.totalGood2 = 0;
				WorldGen.totalBlood2 = 0;
			}
			ushort num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			do
			{
				int num6;
				int num7;
				if (num4 == 0)
				{
					num6 = 0;
					num5 = (int)(Main.worldSurface + 1.0);
					num7 = 5;
				}
				else
				{
					num6 = num5;
					num5 = Main.maxTilesY;
					num7 = 1;
				}
				for (int i = num6; i < num5; i++)
				{
					Tile tile = Main.tile[X, i];
					if (tile == null)
					{
						int y = i;
						Tile tile2 = default(Tile);
						Main.tile[X, y] = tile2;
						tile = tile2;
					}
					ushort num8 = *tile.type;
					if (num8 != 0 || tile.active())
					{
						if (num8 == num2)
						{
							num3 += num7;
						}
						else
						{
							WorldGen.tileCounts[(int)num2] += num3;
							num2 = num8;
							num3 = num7;
						}
					}
				}
				WorldGen.tileCounts[(int)num2] += num3;
				num3 = 0;
				num4++;
			}
			while (num4 < 2);
			WorldGen.AddUpAlignmentCounts(false);
		}

		// Token: 0x06001335 RID: 4917 RVA: 0x0047DD88 File Offset: 0x0047BF88
		public static void AddUpAlignmentCounts(bool clearCounts = false)
		{
			if (clearCounts)
			{
				WorldGen.totalEvil2 = 0;
				WorldGen.totalSolid2 = 0;
				WorldGen.totalGood2 = 0;
				WorldGen.totalBlood2 = 0;
			}
			for (int i = 0; i < TileID.Sets.HallowCountCollection.Count; i++)
			{
				WorldGen.totalGood2 += WorldGen.tileCounts[TileID.Sets.HallowCountCollection[i]];
			}
			for (int j = 0; j < TileID.Sets.CorruptCountCollection.Count; j++)
			{
				WorldGen.totalEvil2 += WorldGen.tileCounts[TileID.Sets.CorruptCountCollection[j]];
			}
			for (int k = 0; k < TileID.Sets.CrimsonCountCollection.Count; k++)
			{
				WorldGen.totalBlood2 += WorldGen.tileCounts[TileID.Sets.CrimsonCountCollection[k]];
			}
			WorldGen.totalSolid2 += WorldGen.tileCounts[2] + WorldGen.tileCounts[477] + WorldGen.tileCounts[1] + WorldGen.tileCounts[60] + WorldGen.tileCounts[53] + WorldGen.tileCounts[161];
			WorldGen.totalSolid2 += WorldGen.tileCounts[164] + WorldGen.tileCounts[109] + WorldGen.tileCounts[492] + WorldGen.tileCounts[117] + WorldGen.tileCounts[116];
			WorldGen.totalSolid2 += WorldGen.tileCounts[23] + WorldGen.tileCounts[661] + WorldGen.tileCounts[163] + WorldGen.tileCounts[112] + WorldGen.tileCounts[25];
			WorldGen.totalSolid2 += WorldGen.tileCounts[199] + WorldGen.tileCounts[662] + WorldGen.tileCounts[234] + WorldGen.tileCounts[203] + WorldGen.tileCounts[200];
			Array.Clear(WorldGen.tileCounts, 0, WorldGen.tileCounts.Length);
		}

		// Token: 0x06001336 RID: 4918 RVA: 0x0047DF5C File Offset: 0x0047C15C
		public unsafe static void plantDye(int i, int j, bool exoticPlant = false)
		{
			UnifiedRandom unifiedRandom = WorldGen.gen ? WorldGen.genRand : Main.rand;
			if (!Main.tile[i, j].active() || i < 95 || i > Main.maxTilesX - 95 || j < 95 || j > Main.maxTilesY - 95)
			{
				return;
			}
			int num = 90;
			if (exoticPlant)
			{
				num = 240;
			}
			if (((double)j < Main.worldSurface || WorldGen.remixWorldGen) && (!Main.tile[i, j - 1].active() || *Main.tile[i, j - 1].type == 3 || *Main.tile[i, j - 1].type == 51 || *Main.tile[i, j - 1].type == 61 || *Main.tile[i, j - 1].type == 73 || *Main.tile[i, j - 1].type == 74 || *Main.tile[i, j - 1].type == 184))
			{
				int num12 = Utils.Clamp<int>(i - num, 1, Main.maxTilesX - 1 - 1);
				int num2 = Utils.Clamp<int>(i + num, 1, Main.maxTilesX - 1 - 1);
				int num3 = Utils.Clamp<int>(j - num, 1, Main.maxTilesY - 1 - 1);
				int num4 = Utils.Clamp<int>(j + num, 1, Main.maxTilesY - 1 - 1);
				for (int k = num12; k < num2; k++)
				{
					for (int l = num3; l < num4; l++)
					{
						if (Main.tile[k, l].active() && *Main.tile[k, l].type == 227 && (!exoticPlant || *Main.tile[k, l].frameX >= 272) && (exoticPlant || *Main.tile[k, l].frameX < 272))
						{
							return;
						}
					}
				}
				if (exoticPlant)
				{
					int type = (int)(*Main.tile[i, j].type);
					bool flag = TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type] || type == 0;
					if (*Main.tile[i, j - 1].liquid > 0 && (Main.tile[i, j - 1].lava() || Main.tile[i, j - 1].honey()))
					{
						flag = false;
					}
					if (flag)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
					}
				}
				else if (*Main.tile[i, j].type == 2 || *Main.tile[i, j].type == 109)
				{
					if (unifiedRandom.Next(4) == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
					}
					else
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 3);
					}
				}
				else if (*Main.tile[i, j].type == 60)
				{
					if (unifiedRandom.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
					}
					else
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
					}
				}
				else if (*Main.tile[i, j].type == 53 && *Main.tile[i, j - 1].liquid == 255 && *Main.tile[i, j - 2].liquid == 255)
				{
					WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
				}
				else if (*Main.tile[i, j].type == 80 && !Main.tile[i - 1, j - 1].active() && !Main.tile[i + 1, j - 1].active())
				{
					try
					{
						bool flag2 = true;
						for (int m = i - 5; m <= i + 5; m++)
						{
							for (int n = j - 5; n <= j + 15; n++)
							{
								if (Main.tile[m, n].active() && (*Main.tile[m, n].type == 112 || *Main.tile[m, n].type == 234))
								{
									flag2 = false;
								}
							}
						}
						if (flag2)
						{
							WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 6);
						}
					}
					catch
					{
					}
				}
			}
			if (((double)j < Main.worldSurface && !WorldGen.remixWorldGen) || j >= Main.UnderworldLayer)
			{
				return;
			}
			if (!Main.tile[i, j - 1].active() || *Main.tile[i, j - 1].type == 3 || *Main.tile[i, j - 1].type == 51 || *Main.tile[i, j - 1].type == 61 || *Main.tile[i, j - 1].type == 73 || *Main.tile[i, j - 1].type == 74 || *Main.tile[i, j - 1].type == 184)
			{
				int num13 = Utils.Clamp<int>(i - num, 1, Main.maxTilesX - 1 - 1);
				int num5 = Utils.Clamp<int>(i + num, 1, Main.maxTilesX - 1 - 1);
				int num6 = Utils.Clamp<int>(j - num, 1, Main.maxTilesY - 1 - 1);
				int num7 = Utils.Clamp<int>(j + num, 1, Main.maxTilesY - 1 - 1);
				for (int num8 = num13; num8 < num5; num8++)
				{
					for (int num9 = num6; num9 < num7; num9++)
					{
						if (Main.tile[num8, num9].active() && *Main.tile[num8, num9].type == 227 && (!exoticPlant || *Main.tile[num8, num9].frameX >= 272) && (exoticPlant || *Main.tile[num8, num9].frameX < 272))
						{
							return;
						}
					}
				}
				if (exoticPlant)
				{
					int type2 = (int)(*Main.tile[i, j].type);
					if (TileID.Sets.Conversion.Grass[type2] || TileID.Sets.Conversion.Moss[type2] || type2 == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
					}
				}
				else if (*Main.tile[i, j].type == 60)
				{
					if (unifiedRandom.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
					}
					else if (unifiedRandom.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
					}
					else
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
					}
				}
				else if (*Main.tile[i, j].type == 0 || *Main.tile[i, j].type == 1 || *Main.tile[i, j].type == 59)
				{
					if (unifiedRandom.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
					}
					else
					{
						WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
					}
				}
				else if (*Main.tile[i, j - 1].liquid == 255 && *Main.tile[i, j - 2].liquid == 255)
				{
					WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 5);
				}
			}
			if (Main.tile[i, j + 1].active() || exoticPlant)
			{
				return;
			}
			for (int num10 = i - num; num10 < i + num; num10++)
			{
				for (int num11 = j - num; num11 < j + num; num11++)
				{
					if (Main.tile[num10, num11].active() && *Main.tile[num10, num11].type == 227)
					{
						return;
					}
				}
			}
			if (*Main.tile[i, j].type == 0)
			{
				WorldGen.PlaceTile(i, j + 1, 227, true, false, -1, 7);
			}
		}

		// Token: 0x06001337 RID: 4919 RVA: 0x0047E874 File Offset: 0x0047CA74
		private static int MossConversion(int thisType, int otherType)
		{
			if (TileID.Sets.tileMossBrick[thisType] && otherType == 38)
			{
				return thisType;
			}
			if (Main.tileMoss[thisType] && otherType == 1)
			{
				return thisType;
			}
			if (thisType <= 381)
			{
				switch (thisType)
				{
				case 179:
					return 512;
				case 180:
					return 513;
				case 181:
					return 514;
				case 182:
					return 515;
				case 183:
					return 516;
				default:
					if (thisType == 381)
					{
						return 517;
					}
					break;
				}
			}
			else
			{
				switch (thisType)
				{
				case 512:
					return 179;
				case 513:
					return 180;
				case 514:
					return 181;
				case 515:
					return 182;
				case 516:
					return 183;
				case 517:
					return 381;
				default:
					switch (thisType)
					{
					case 534:
						return 535;
					case 535:
						return 534;
					case 536:
						return 537;
					case 537:
						return 536;
					case 538:
						break;
					case 539:
						return 540;
					case 540:
						return 539;
					default:
						switch (thisType)
						{
						case 625:
							return 626;
						case 626:
							return 625;
						case 627:
							return 628;
						case 628:
							return 627;
						}
						break;
					}
					break;
				}
			}
			return 0;
		}

		// Token: 0x06001338 RID: 4920 RVA: 0x0047E9CA File Offset: 0x0047CBCA
		public static void UpdateWorld()
		{
			if (WorldGen.gen)
			{
				return;
			}
			SystemLoader.PreUpdateWorld();
			WorldGen.UpdateWorld_Inner();
			SystemLoader.PostUpdateWorld();
		}

		// Token: 0x06001339 RID: 4921 RVA: 0x0047E9E8 File Offset: 0x0047CBE8
		private static void UpdateWorld_Inner()
		{
			WorldGen.AllowedToSpreadInfections = true;
			CreativePowers.StopBiomeSpreadPower power = CreativePowerManager.Instance.GetPower<CreativePowers.StopBiomeSpreadPower>();
			if (power != null && power.GetIsUnlocked())
			{
				WorldGen.AllowedToSpreadInfections = !power.Enabled;
			}
			int wallDist = 3;
			Wiring.UpdateMech();
			TileEntity.UpdateStart();
			foreach (TileEntity tileEntity in TileEntity.ByID.Values)
			{
				tileEntity.Update();
			}
			TileEntity.UpdateEnd();
			WorldGen.UpdateLunarApocalypse();
			if (Main.netMode != 1)
			{
				WorldGen.totalD++;
				if (WorldGen.totalD >= 30)
				{
					WorldGen.totalD = 0;
					WorldGen.CountTiles(WorldGen.totalX);
					WorldGen.totalX++;
					if (WorldGen.totalX >= Main.maxTilesX)
					{
						WorldGen.totalX = 0;
					}
				}
			}
			Liquid.skipCount++;
			if (Liquid.skipCount > 1)
			{
				Liquid.UpdateLiquid();
				Liquid.skipCount = 0;
			}
			double worldUpdateRate = WorldGen.GetWorldUpdateRate();
			if (worldUpdateRate == 0.0)
			{
				return;
			}
			double num = (double)(3E-05f * (float)worldUpdateRate);
			double num2 = (double)(1.5E-05f * (float)worldUpdateRate);
			double num3 = (double)(2.5E-05f * (float)worldUpdateRate);
			bool checkNPCSpawns = false;
			WorldGen.spawnDelay++;
			if (Main.invasionType > 0 || Main.eclipse)
			{
				WorldGen.spawnDelay = 0;
			}
			if (WorldGen.spawnDelay >= 20)
			{
				checkNPCSpawns = true;
				WorldGen.spawnDelay = 0;
				if (WorldGen.prioritizedTownNPCType != 37)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].townNPC && Main.npc[i].type != 368)
						{
							ModNPC modNPC = Main.npc[i].ModNPC;
							if (!(((modNPC != null) ? new bool?(modNPC.TownNPCStayingHomeless) : null) ?? false))
							{
								WorldGen.prioritizedTownNPCType = Main.npc[i].type;
								break;
							}
						}
					}
				}
			}
			double num4 = (double)(Main.maxTilesX * Main.maxTilesY) * num;
			int num5 = 151;
			int num6 = (int)Utils.Lerp((double)num5, (double)num5 * 2.8, Utils.Clamp<double>((double)Main.maxTilesX / 4200.0 - 1.0, 0.0, 1.0));
			int j = 0;
			while ((double)j < num4)
			{
				if (Main.rand.Next(num6 * 100) == 0)
				{
					WorldGen.PlantAlch();
				}
				int i2 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
				int j2 = WorldGen.genRand.Next(10, (int)Main.worldSurface - 1);
				WorldGen.UpdateWorld_OvergroundTile(i2, j2, checkNPCSpawns, wallDist);
				j++;
			}
			if (Main.remixWorld)
			{
				int k = 0;
				while ((double)k < (double)(Main.maxTilesX * Main.maxTilesY) * num3)
				{
					int i3 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int j3 = WorldGen.genRand.Next((int)Main.worldSurface - 1, Main.maxTilesY - 20);
					WorldGen.growGrassUnderground = true;
					WorldGen.UpdateWorld_UndergroundTile(i3, j3, checkNPCSpawns, wallDist);
					WorldGen.UpdateWorld_OvergroundTile(i3, j3, checkNPCSpawns, wallDist);
					WorldGen.growGrassUnderground = false;
					k++;
				}
			}
			else
			{
				int l = 0;
				while ((double)l < (double)(Main.maxTilesX * Main.maxTilesY) * num2)
				{
					int i4 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
					int j4 = WorldGen.genRand.Next((int)Main.worldSurface - 1, Main.maxTilesY - 20);
					WorldGen.UpdateWorld_UndergroundTile(i4, j4, checkNPCSpawns, wallDist);
					l++;
				}
			}
			if (Main.dayTime && !Main.remixWorld)
			{
				return;
			}
			for (int m = 0; m < Main.worldEventUpdates; m++)
			{
				double num7 = (double)Main.maxTilesX / 4200.0;
				num7 *= (double)Star.starfallBoost;
				if ((double)Main.rand.Next(8000) < 10.0 * num7)
				{
					int num8 = 12;
					int num9 = Main.rand.Next(Main.maxTilesX - 50) + 100;
					num9 *= 16;
					int num10 = Main.rand.Next((int)((double)Main.maxTilesY * 0.05));
					num10 *= 16;
					Vector2 position;
					position..ctor((float)num9, (float)num10);
					int num11 = -1;
					if (Main.expertMode && Main.rand.Next(15) == 0)
					{
						int num12 = (int)Player.FindClosest(position, 1, 1);
						if ((double)Main.player[num12].position.Y < Main.worldSurface * 16.0 && Main.player[num12].afkCounter < 3600)
						{
							int num13 = Main.rand.Next(1, 640);
							position.X = Main.player[num12].position.X + (float)Main.rand.Next(-num13, num13 + 1);
							num11 = num12;
						}
					}
					if (!Collision.SolidCollision(position, 16, 16))
					{
						float num14 = (float)Main.rand.Next(-100, 101);
						float num15 = (float)(Main.rand.Next(200) + 100);
						float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
						num16 = (float)num8 / num16;
						num14 *= num16;
						num15 *= num16;
						Projectile.NewProjectile(new EntitySource_Misc("FallingStar"), position.X, position.Y, num14, num15, 720, 0, 0f, Main.myPlayer, 0f, (float)num11, 0f);
					}
				}
			}
		}

		// Token: 0x0600133A RID: 4922 RVA: 0x0047EF98 File Offset: 0x0047D198
		public static double GetWorldUpdateRate()
		{
			double result = Math.Min(Main.desiredWorldTilesUpdateRate, 24.0);
			if (CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled)
			{
				result = 0.0;
			}
			return result;
		}

		// Token: 0x0600133B RID: 4923 RVA: 0x0047EFD8 File Offset: 0x0047D1D8
		private unsafe static void UpdateWorld_OvergroundTile(int i, int j, bool checkNPCSpawns, int wallDist)
		{
			TileLoader.RandomUpdate(i, j, (int)(*Main.tile[i, j].type));
			WallLoader.RandomUpdate(i, j, (int)(*Main.tile[i, j].wall));
			int num = i - 1;
			int num2 = i + 2;
			int num3 = j - 1;
			int num4 = j + 2;
			if (num < 10)
			{
				num = 10;
			}
			if (num2 > Main.maxTilesX - 10)
			{
				num2 = Main.maxTilesX - 10;
			}
			if (num3 < 10)
			{
				num3 = 10;
			}
			if (num4 > Main.maxTilesY - 10)
			{
				num4 = Main.maxTilesY - 10;
			}
			if (Main.tile[i, j] == null)
			{
				return;
			}
			if (*Main.tile[i, j].type == 655 && !NPC.AnyNPCs(262))
			{
				WorldGen.KillTile(i, j, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
				}
			}
			if (*Main.tile[i, j].type == 85)
			{
				WorldGen.TryGrowingAbigailsFlower(i, j);
			}
			else if (Main.tileAlch[(int)(*Main.tile[i, j].type)])
			{
				WorldGen.GrowAlch(i, j);
			}
			else if ((double)j < Main.worldSurface + 10.0 && (i < WorldGen.beachDistance || i > Main.maxTilesX - WorldGen.beachDistance) && !Main.tile[i, j].active())
			{
				int num5 = 3000;
				num5 -= (int)(Math.Abs(Main.windSpeedCurrent) * 1250f);
				if (Main.raining)
				{
					num5 -= (int)(1250f * Main.maxRaining);
				}
				if (num5 < 300)
				{
					num5 = 300;
				}
				if (WorldGen.genRand.Next(num5) == 0)
				{
					int k = j;
					while ((double)k < Main.worldSurface + 10.0 && !Main.tile[i, k].active() && k - j < 15)
					{
						k++;
					}
					if (Main.tile[i, k].active() && *Main.tile[i, k].type == 53 && WorldGen.SolidTileAllowBottomSlope(i, k))
					{
						k--;
						int num6 = WorldGen.genRand.Next(2, 5);
						int num7 = WorldGen.genRand.Next(8, 11);
						int num8 = 0;
						for (int l = i - num7; l <= i + num7; l++)
						{
							for (int m = k - num7; m <= k + num7; m++)
							{
								if (Main.tile[l, m].active() && (*Main.tile[l, m].type == 324 || *Main.tile[l, m].type == 81))
								{
									num8++;
								}
							}
						}
						if (num8 < num6)
						{
							if (WorldGen.genRand.Next(2) == 0 && *Main.tile[i, k].liquid >= 230)
							{
								WorldGen.PlaceTile(i, k, 81, true, false, -1, 0);
								if (Main.netMode == 2 && Main.tile[i, k].active())
								{
									NetMessage.SendTileSquare(-1, i, k, TileChangeType.None);
								}
							}
							else
							{
								WorldGen.PlaceTile(i, k, 324, true, false, -1, WorldGen.RollRandomSeaShellStyle());
								if (Main.netMode == 2 && Main.tile[i, k].active())
								{
									NetMessage.SendTileSquare(-1, i, k, TileChangeType.None);
								}
							}
						}
					}
				}
			}
			if ((*Main.tile[i, j].type == 596 || *Main.tile[i, j].type == 616 || *Main.tile[i, j].type == 595 || *Main.tile[i, j].type == 615) && (*Main.tile[i, j + 1].type == 199 || *Main.tile[i, j + 1].type == 23))
			{
				WorldGen.KillTile(i, j, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
				}
			}
			if ((*Main.tile[i, j].type == 571 || (*Main.tile[i, j].type == 60 && *Main.tile[i, j - 1].liquid > 0)) && WorldGen.genRand.Next(5) == 0 && (!Main.tile[i, j - 1].active() || *Main.tile[i, j - 1].type == 61 || *Main.tile[i, j - 1].type == 74 || *Main.tile[i, j - 1].type == 518) && (*Main.tile[i, j].type != 60 || WorldGen.genRand.Next(30) == 0) && WorldGen.PlaceBamboo(i, j - 1))
			{
				NetMessage.SendTileSquare(-1, i, j - 1, 1, 2, TileChangeType.None);
			}
			if (*Main.tile[i, j].type == 518)
			{
				if (*Main.tile[i, j].liquid == 0 || (*Main.tile[i, j].liquid / 16 >= 9 && WorldGen.SolidTile(i, j - 1, false)) || (*Main.tile[i, j - 1].liquid > 0 && Main.tile[i, j - 1].active()))
				{
					WorldGen.KillTile(i, j, false, false, false);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
					}
				}
				else
				{
					WorldGen.CheckLilyPad(i, j);
				}
			}
			else if (*Main.tile[i, j].type == 519)
			{
				WorldGen.CheckCatTail(i, j);
				if (Main.tile[i, j].active() && WorldGen.genRand.Next(8) == 0)
				{
					WorldGen.GrowCatTail(i, j);
					WorldGen.CheckCatTail(i, j);
				}
			}
			else if (*Main.tile[i, j].liquid > 32)
			{
				if (Main.tile[i, j].active())
				{
					if (TileID.Sets.SlowlyDiesInWater[(int)(*Main.tile[i, j].type)])
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
					else if (*Main.tile[i, j].type == 60)
					{
						WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, false);
					}
				}
				else if (WorldGen.genRand.Next(600) == 0)
				{
					WorldGen.PlaceTile(i, j, 518, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
				else if (WorldGen.genRand.Next(600) == 0)
				{
					WorldGen.PlaceTile(i, j, 519, true, false, -1, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
			}
			else if (Main.tile[i, j].nactive())
			{
				WorldGen.hardUpdateWorld(i, j);
				if (Main.rand.Next(3000) == 0)
				{
					WorldGen.plantDye(i, j, false);
				}
				else if (Main.hardMode && ((double)i < (double)Main.maxTilesX * 0.4 || (double)i > (double)Main.maxTilesX * 0.6) && Main.rand.Next(15000) == 0)
				{
					WorldGen.plantDye(i, j, true);
				}
				if (*Main.tile[i, j].type == 80)
				{
					if (WorldGen.genRand.Next(15) == 0)
					{
						WorldGen.GrowCactus(i, j);
					}
				}
				else if (*Main.tile[i, j].type == 529)
				{
					if (WorldGen.CheckSeaOat(i, j) && WorldGen.genRand.Next(20) == 0)
					{
						WorldGen.GrowSeaOat(i, j);
					}
				}
				else if (TileID.Sets.Conversion.Sand[(int)(*Main.tile[i, j].type)])
				{
					if (!Main.tile[i, num3].active())
					{
						if (WorldGen.genRand.Next(25) == 0)
						{
							WorldGen.PlaceOasisPlant(i, num3, 530);
							if (*Main.tile[i, num3].type == 530 && Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i - 1, num3 - 1, 3, 2, TileChangeType.None);
							}
						}
						if (WorldGen.genRand.Next(20) != 0 || !WorldGen.PlantSeaOat(i, num3))
						{
							if (i < WorldGen.oceanDistance || i > Main.maxTilesX - WorldGen.oceanDistance)
							{
								if (WorldGen.genRand.Next(500) == 0)
								{
									int num9 = 7;
									int num10 = 6;
									int num11 = 0;
									for (int n = i - num9; n <= i + num9; n++)
									{
										for (int num12 = num3 - num9; num12 <= num3 + num9; num12++)
										{
											if (Main.tile[n, num12].active() && *Main.tile[n, num12].type == 81)
											{
												num11++;
											}
										}
									}
									if (num11 < num10 && *Main.tile[i, num3].liquid == 255 && *Main.tile[i, num3 - 1].liquid == 255 && *Main.tile[i, num3 - 2].liquid == 255 && *Main.tile[i, num3 - 3].liquid == 255 && *Main.tile[i, num3 - 4].liquid == 255)
									{
										WorldGen.PlaceTile(i, num3, 81, true, false, -1, 0);
										if (Main.netMode == 2 && Main.tile[i, num3].active())
										{
											NetMessage.SendTileSquare(-1, i, num3, TileChangeType.None);
										}
									}
								}
							}
							else if (i > WorldGen.beachDistance + 20 && i < Main.maxTilesX - WorldGen.beachDistance - 20 && WorldGen.genRand.Next(300) == 0)
							{
								WorldGen.GrowCactus(i, j);
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 530)
				{
					if (!WorldGen.OasisPlantWaterCheck(i, j, true))
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
				}
				else if (*Main.tile[i, j].type == 147 || *Main.tile[i, j].type == 161 || *Main.tile[i, j].type == 163 || *Main.tile[i, j].type == 164 || *Main.tile[i, j].type == 200)
				{
					if (Main.rand.Next(10) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 2].active())
					{
						int num48 = i - 3;
						int num13 = i + 4;
						int num14 = 0;
						for (int num15 = num48; num15 < num13; num15++)
						{
							if (*Main.tile[num15, j].type == 165 && Main.tile[num15, j].active())
							{
								num14++;
							}
							if (*Main.tile[num15, j + 1].type == 165 && Main.tile[num15, j + 1].active())
							{
								num14++;
							}
							if (*Main.tile[num15, j + 2].type == 165 && Main.tile[num15, j + 2].active())
							{
								num14++;
							}
							if (*Main.tile[num15, j + 3].type == 165 && Main.tile[num15, j + 3].active())
							{
								num14++;
							}
						}
						if (num14 < 2)
						{
							WorldGen.PlaceTight(i, j + 1, false);
							WorldGen.SquareTileFrame(i, j + 1, true);
							if (Main.netMode == 2 && Main.tile[i, j + 1].active())
							{
								NetMessage.SendTileSquare(-1, i, j + 1, 1, 2, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 254)
				{
					if (Main.rand.Next((int)((*Main.tile[i, j].frameX + 10) / 10)) == 0)
					{
						WorldGen.GrowPumpkin(i, j, 254);
					}
				}
				else if (*Main.tile[i, j].type == 78 || *Main.tile[i, j].type == 380 || *Main.tile[i, j].type == 579)
				{
					if (!Main.tile[i, num3].active() && WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.PlaceTile(i, num3, 3, true, false, -1, 0);
						if (Main.netMode == 2 && Main.tile[i, num3].active())
						{
							NetMessage.SendTileSquare(-1, i, num3, TileChangeType.None);
						}
					}
				}
				else if (TileID.Sets.SpreadOverground[(int)(*Main.tile[i, j].type)])
				{
					WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, false);
					int type = (int)(*Main.tile[i, j].type);
					if ((type == 32 || type == 352) && WorldGen.genRand.Next(3) == 0)
					{
						if (type == 32)
						{
							WorldGen.GrowSpike(i, j, 32, 23);
						}
						else
						{
							WorldGen.GrowSpike(i, j, 352, 199);
						}
					}
				}
				else if (Main.tileMoss[(int)(*Main.tile[i, j].type)] || TileID.Sets.tileMossBrick[(int)(*Main.tile[i, j].type)])
				{
					if (WorldGen.genRand.NextDouble() < 0.5)
					{
						int type2 = (int)(*Main.tile[i, j].type);
						bool flag = false;
						TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
						for (int num16 = num; num16 < num2; num16++)
						{
							for (int num17 = num3; num17 < num4; num17++)
							{
								if ((i != num16 || j != num17) && Main.tile[num16, num17].active() && (*Main.tile[num16, num17].type == 1 || *Main.tile[num16, num17].type == 38))
								{
									int type3 = (int)(*Main.tile[num16, num17].type);
									int num18 = WorldGen.MossConversion(type2, type3);
									WorldGen.SpreadGrass(num16, num17, (int)(*Main.tile[num16, num17].type), num18, false, color);
									if ((int)(*Main.tile[num16, num17].type) == num18)
									{
										WorldGen.SquareTileFrame(num16, num17, true);
										flag = true;
									}
								}
							}
						}
						if (Main.netMode == 2 && flag)
						{
							NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						}
						if (WorldGen.genRand.Next(6) == 0)
						{
							int num19 = i;
							int num20 = j;
							switch (WorldGen.genRand.Next(4))
							{
							case 0:
								num19--;
								break;
							case 1:
								num19++;
								break;
							case 2:
								num20--;
								break;
							default:
								num20++;
								break;
							}
							if (!Main.tile[num19, num20].active())
							{
								if (WorldGen.PlaceTile(num19, num20, 184, true, false, -1, 0))
								{
									Main.tile[num19, num20].CopyPaintAndCoating(Main.tile[i, j]);
								}
								if (Main.netMode == 2 && Main.tile[num19, num20].active())
								{
									NetMessage.SendTileSquare(-1, num19, num20, TileChangeType.None);
								}
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 20)
				{
					if (WorldGen.genRand.Next(20) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (*Main.tile[i, j].type == 595)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (*Main.tile[i, j].type == 615)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, false);
					}
				}
				else if (*Main.tile[i, j].type == 3 && WorldGen.genRand.Next(20) == 0)
				{
					if (*Main.tile[i, j].frameX != 144)
					{
						*Main.tile[i, j].type = 73;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
						}
					}
				}
				else if (*Main.tile[i, j].type == 110 && WorldGen.genRand.Next(20) == 0 && *Main.tile[i, j].frameX < 144)
				{
					*Main.tile[i, j].type = 113;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
			}
			else
			{
				if (*Main.tile[i, j].wall == 62 && *Main.tile[i, j].liquid == 0)
				{
					WorldGen.GrowWeb(i, j);
				}
				if (checkNPCSpawns)
				{
					WorldGen.TrySpawningTownNPC(i, j);
				}
			}
			if (WorldGen.AllowedToSpreadInfections)
			{
				if (*Main.tile[i, j].wall == 81 || *Main.tile[i, j].wall == 83 || (*Main.tile[i, j].type == 199 && Main.tile[i, j].active()))
				{
					int num21 = i + WorldGen.genRand.Next(-2, 3);
					int num22 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num21, num22, 10) && *Main.tile[num21, num22].wall >= 63 && *Main.tile[num21, num22].wall <= 68)
					{
						bool flag2 = false;
						for (int num23 = i - wallDist; num23 < i + wallDist; num23++)
						{
							for (int num24 = j - wallDist; num24 < j + wallDist; num24++)
							{
								if (Main.tile[num23, num24].active())
								{
									int type4 = (int)(*Main.tile[num23, num24].type);
									if (type4 == 199 || type4 == 200 || type4 == 201 || type4 == 203 || type4 == 205 || type4 == 234 || type4 == 352 || type4 == 662)
									{
										flag2 = true;
										break;
									}
								}
							}
						}
						if (flag2)
						{
							*Main.tile[num21, num22].wall = 81;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num21, num22, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].wall == 69 || *Main.tile[i, j].wall == 3 || (*Main.tile[i, j].type == 23 && Main.tile[i, j].active()))
				{
					int num25 = i + WorldGen.genRand.Next(-2, 3);
					int num26 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num25, num26, 10) && *Main.tile[num25, num26].wall >= 63 && *Main.tile[num25, num26].wall <= 68)
					{
						bool flag3 = false;
						for (int num27 = i - wallDist; num27 < i + wallDist; num27++)
						{
							for (int num28 = j - wallDist; num28 < j + wallDist; num28++)
							{
								if (Main.tile[num27, num28].active())
								{
									int type5 = (int)(*Main.tile[num27, num28].type);
									if (type5 == 22 || type5 == 23 || type5 == 24 || type5 == 25 || type5 == 32 || type5 == 112 || type5 == 163 || type5 == 636 || type5 == 661)
									{
										flag3 = true;
										break;
									}
								}
							}
						}
						if (flag3)
						{
							*Main.tile[num25, num26].wall = 69;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num25, num26, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].wall == 70 || (*Main.tile[i, j].type == 109 && Main.tile[i, j].active()))
				{
					int num29 = i + WorldGen.genRand.Next(-2, 3);
					int num30 = j + WorldGen.genRand.Next(-2, 3);
					if ((WorldGen.InWorld(num29, num30, 10) && *Main.tile[num29, num30].wall == 63) || *Main.tile[num29, num30].wall == 65 || *Main.tile[num29, num30].wall == 66 || *Main.tile[num29, num30].wall == 68)
					{
						bool flag4 = false;
						for (int num31 = i - wallDist; num31 < i + wallDist; num31++)
						{
							for (int num32 = j - wallDist; num32 < j + wallDist; num32++)
							{
								if (Main.tile[num31, num32].active())
								{
									int type6 = (int)(*Main.tile[num31, num32].type);
									if (type6 == 109 || type6 == 110 || type6 == 113 || type6 == 115 || type6 == 116 || type6 == 117 || type6 == 164)
									{
										flag4 = true;
										break;
									}
								}
							}
						}
						if (flag4)
						{
							*Main.tile[num29, num30].wall = 70;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num29, num30, TileChangeType.None);
							}
						}
					}
				}
				WorldGen.SpreadDesertWalls(wallDist, i, j);
			}
			if (Main.tile[i, j].nactive())
			{
				if (*Main.tile[i, j].type == 2 || *Main.tile[i, j].type == 52 || *Main.tile[i, j].type == 382 || (*Main.tile[i, j].type == 192 && WorldGen.genRand.Next(10) == 0))
				{
					if (*Main.tile[i, j].type == 52 || *Main.tile[i, j].type == 382)
					{
					}
					int num33 = 1;
					if (WorldGen.genRand.Next(num33) == 0 && WorldGen.GrowMoreVines(i, j) && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag5 = false;
						ushort type7 = 52;
						if (*Main.tile[i, j].type == 382)
						{
							type7 = 382;
						}
						else if (*Main.tile[i, j].type != 52)
						{
							if (*Main.tile[i, j].wall == 68 || *Main.tile[i, j].wall == 65 || *Main.tile[i, j].wall == 66 || *Main.tile[i, j].wall == 63)
							{
								type7 = 382;
							}
							else if (*Main.tile[i, j + 1].wall == 68 || *Main.tile[i, j + 1].wall == 65 || *Main.tile[i, j + 1].wall == 66 || *Main.tile[i, j + 1].wall == 63)
							{
								type7 = 382;
							}
							if (Main.remixWorld && WorldGen.genRand.Next(5) == 0)
							{
								type7 = 382;
							}
						}
						for (int num34 = j; num34 > j - 10; num34--)
						{
							if (Main.tile[i, num34].bottomSlope())
							{
								flag5 = false;
								break;
							}
							if (Main.tile[i, num34].active() && *Main.tile[i, num34].type == 2 && !Main.tile[i, num34].bottomSlope())
							{
								flag5 = true;
								break;
							}
						}
						if (flag5)
						{
							int num35 = j + 1;
							*Main.tile[i, num35].type = type7;
							Main.tile[i, num35].active(true);
							Main.tile[i, num35].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num35, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num35, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0 && *Main.tile[i, j].frameX < 144)
				{
					if (Main.rand.Next(4) == 0)
					{
						*Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
					}
					*Main.tile[i, j].type = 74;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
					}
				}
				if ((*Main.tile[i, j].type == 60 || *Main.tile[i, j].type == 62) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue = 30;
					if (*Main.tile[i, j].type == 62)
					{
						maxValue = 10;
					}
					if (WorldGen.genRand.Next(maxValue) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag6 = false;
						for (int num36 = j; num36 > j - 10; num36--)
						{
							if (Main.tile[i, num36].bottomSlope())
							{
								flag6 = false;
								break;
							}
							if (Main.tile[i, num36].active() && *Main.tile[i, num36].type == 60 && !Main.tile[i, num36].bottomSlope())
							{
								flag6 = true;
								break;
							}
						}
						if (flag6)
						{
							int num37 = j + 1;
							*Main.tile[i, num37].type = 62;
							Main.tile[i, num37].active(true);
							Main.tile[i, num37].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num37, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num37, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 70 || *Main.tile[i, j].type == 528) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue2 = 70;
					if (*Main.tile[i, j].type == 528)
					{
						maxValue2 = 7;
					}
					if (WorldGen.genRand.Next(maxValue2) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag7 = false;
						for (int num38 = j; num38 > j - 10; num38--)
						{
							if (Main.tile[i, num38].bottomSlope())
							{
								flag7 = false;
								break;
							}
							if (Main.tile[i, num38].active() && *Main.tile[i, num38].type == 70 && !Main.tile[i, num38].bottomSlope())
							{
								flag7 = true;
								break;
							}
						}
						if (flag7)
						{
							int num39 = j + 1;
							*Main.tile[i, num39].type = 528;
							Main.tile[i, num39].active(true);
							Main.tile[i, num39].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num39, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num39, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 109 || *Main.tile[i, j].type == 115) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue3 = 60;
					if (*Main.tile[i, j].type == 115)
					{
						maxValue3 = 20;
					}
					if (WorldGen.genRand.Next(maxValue3) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag8 = false;
						for (int num40 = j; num40 > j - 10; num40--)
						{
							if (Main.tile[i, num40].bottomSlope())
							{
								flag8 = false;
								break;
							}
							if (Main.tile[i, num40].active() && *Main.tile[i, num40].type == 109 && !Main.tile[i, num40].bottomSlope())
							{
								flag8 = true;
								break;
							}
						}
						if (flag8)
						{
							int num41 = j + 1;
							*Main.tile[i, num41].type = 115;
							Main.tile[i, num41].active(true);
							Main.tile[i, num41].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num41, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num41, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 23 || *Main.tile[i, j].type == 661 || *Main.tile[i, j].type == 636) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue4 = 60;
					if (*Main.tile[i, j].type == 636)
					{
						maxValue4 = 20;
					}
					if (WorldGen.genRand.Next(maxValue4) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag9 = false;
						for (int num42 = j; num42 > j - 10; num42--)
						{
							if (Main.tile[i, num42].bottomSlope())
							{
								flag9 = false;
								break;
							}
							if (Main.tile[i, num42].active() && (*Main.tile[i, num42].type == 23 || *Main.tile[i, num42].type == 661) && !Main.tile[i, num42].bottomSlope())
							{
								flag9 = true;
								break;
							}
						}
						if (flag9)
						{
							int num43 = j + 1;
							*Main.tile[i, num43].type = 636;
							Main.tile[i, num43].active(true);
							Main.tile[i, num43].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num43, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num43, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 199 || *Main.tile[i, j].type == 662 || *Main.tile[i, j].type == 205) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue5 = 60;
					if (*Main.tile[i, j].type == 205)
					{
						maxValue5 = 20;
					}
					if (WorldGen.genRand.Next(maxValue5) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag10 = false;
						for (int num44 = j; num44 > j - 10; num44--)
						{
							if (Main.tile[i, num44].bottomSlope())
							{
								flag10 = false;
								break;
							}
							if (Main.tile[i, num44].active() && (*Main.tile[i, num44].type == 199 || *Main.tile[i, num44].type == 662) && !Main.tile[i, num44].bottomSlope())
							{
								flag10 = true;
								break;
							}
						}
						if (flag10)
						{
							int num45 = j + 1;
							*Main.tile[i, num45].type = 205;
							Main.tile[i, num45].active(true);
							Main.tile[i, num45].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num45, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num45, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 633 || *Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
				{
					int maxValue6 = 70;
					if (*Main.tile[i, j].type == 638)
					{
						maxValue6 = 7;
					}
					if (WorldGen.genRand.Next(maxValue6) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag11 = false;
						for (int num46 = j; num46 > j - 10; num46--)
						{
							if (Main.tile[i, num46].bottomSlope())
							{
								flag11 = false;
								break;
							}
							if (Main.tile[i, num46].active() && *Main.tile[i, num46].type == 633 && !Main.tile[i, num46].bottomSlope())
							{
								flag11 = true;
								break;
							}
						}
						if (flag11)
						{
							int num47 = j + 1;
							*Main.tile[i, num47].type = 638;
							Main.tile[i, num47].active(true);
							Main.tile[i, num47].CopyPaintAndCoating(Main.tile[i, j]);
							WorldGen.SquareTileFrame(i, num47, true);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num47, TileChangeType.None);
							}
						}
					}
				}
			}
			if (!Main.remixWorld && Main.dontStarveWorld && (float)Main.rand.Next(200) < 100f * Main.maxRaining && Main.maxRaining >= 0.2f)
			{
				WorldGen.DontStarveTryWateringTile(i, j);
			}
		}

		// Token: 0x0600133C RID: 4924 RVA: 0x004818A0 File Offset: 0x0047FAA0
		public unsafe static bool AttemptToGrowTreeFromSapling(int x, int y, bool underground)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort num3 = *tile.type;
			if (num3 <= 590)
			{
				if (num3 == 20)
				{
					int num4 = (int)(*tile.frameX / 54);
					bool flag;
					if (num4 - 6 > 3)
					{
						if (num4 == 10)
						{
							flag = WorldGen.TryGrowingTreeByType(634, x, y);
						}
						else
						{
							if (underground)
							{
								return false;
							}
							flag = WorldGen.GrowTree(x, y);
						}
					}
					else
					{
						if (underground)
						{
							return false;
						}
						flag = WorldGen.GrowPalmTree(x, y);
					}
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
				if (num3 == 590)
				{
					if (!underground)
					{
						return false;
					}
					int num = (int)(*tile.frameX / 54);
					int num2 = 587;
					switch (num)
					{
					case 0:
						num2 = 583;
						break;
					case 1:
						num2 = 584;
						break;
					case 2:
						num2 = 585;
						break;
					case 3:
						num2 = 586;
						break;
					case 4:
						num2 = 587;
						break;
					case 5:
						num2 = 588;
						break;
					case 6:
						num2 = 589;
						break;
					}
					bool flag = WorldGen.TryGrowingTreeByType(num2, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
			}
			else
			{
				if (num3 == 595)
				{
					int num = (int)(*tile.frameX / 54);
					int num2 = 596;
					if (num == 0)
					{
						num2 = 596;
					}
					bool flag = WorldGen.TryGrowingTreeByType(num2, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
				if (num3 == 615)
				{
					int num = (int)(*tile.frameX / 54);
					int num2 = 616;
					if (num == 0)
					{
						num2 = 616;
					}
					bool flag = WorldGen.TryGrowingTreeByType(num2, x, y);
					if (flag && WorldGen.PlayerLOS(x, y))
					{
						WorldGen.TreeGrowFXCheck(x, y);
					}
					return flag;
				}
			}
			return false;
		}

		// Token: 0x0600133D RID: 4925 RVA: 0x00481A8C File Offset: 0x0047FC8C
		public static void DontStarveTryWateringTile(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (tile.active() && TileObjectData.CheckWaterDeath(tile) && !WorldGen.IsSafeFromRain(x, y) && !WorldGen.HasAnyWireNearby(x, y, 0) && !WorldGen.TryToggleLight(x, y, new bool?(false), false))
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x0600133E RID: 4926 RVA: 0x00481B04 File Offset: 0x0047FD04
		public static bool HasAnyWireNearby(int sourceX, int sourceY, int boxSpread)
		{
			int num5 = Utils.Clamp<int>(sourceX - boxSpread, 0, Main.maxTilesX - 1);
			int num2 = Utils.Clamp<int>(sourceX + boxSpread, 0, Main.maxTilesX - 1);
			int num3 = Utils.Clamp<int>(sourceY - boxSpread, 0, Main.maxTilesY - 1);
			int num4 = Utils.Clamp<int>(sourceY + boxSpread, 0, Main.maxTilesY - 1);
			for (int i = num5; i <= num2; i++)
			{
				for (int j = num3; j <= num4; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && (tile.wire() || tile.wire2() || tile.wire3() || tile.wire4()))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x0600133F RID: 4927 RVA: 0x00481BB0 File Offset: 0x0047FDB0
		public static bool IsSafeFromRain(int startX, int startY)
		{
			Vector2D vector2D = -Rain.GetRainFallVelocity().SafeNormalize(new Vector2(0f, 1f)).ToVector2D();
			Vector2D vector2D2 = new Vector2D((double)startX, (double)startY) * 16.0 + Vector2D.One * 8.0;
			double num = 85.0;
			DelegateMethods.CheckResultOut = false;
			Vector2D end = vector2D2 + vector2D * 16.0 * num;
			double width = 4.0;
			Utils.TileActionAttempt plot;
			if ((plot = WorldGen.<>O.<11>__CheckStopForSolids) == null)
			{
				plot = (WorldGen.<>O.<11>__CheckStopForSolids = new Utils.TileActionAttempt(DelegateMethods.CheckStopForSolids));
			}
			Utils.PlotTileLine(vector2D2, end, width, plot);
			return DelegateMethods.CheckResultOut;
		}

		// Token: 0x06001340 RID: 4928 RVA: 0x00481C6C File Offset: 0x0047FE6C
		public unsafe static bool TryToggleLight(int x, int y, bool? forcedState, bool skipWires)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active())
			{
				return false;
			}
			ushort num = *tile.type;
			if (TileID.Sets.Torch[(int)(*tile.type)])
			{
				Wiring.ToggleTorch(x, y, tile, forcedState);
				return true;
			}
			if (num <= 126)
			{
				if (num <= 42)
				{
					if (num == 33)
					{
						goto IL_108;
					}
					if (num == 34)
					{
						Wiring.ToggleChandelier(x, y, tile, forcedState, skipWires);
						return true;
					}
					if (num == 42)
					{
						Wiring.ToggleHangingLantern(x, y, tile, forcedState, skipWires);
						return true;
					}
				}
				else if (num <= 95)
				{
					if (num == 49)
					{
						goto IL_108;
					}
					switch (num)
					{
					case 92:
						Wiring.ToggleLampPost(x, y, tile, forcedState, skipWires);
						return true;
					case 93:
						Wiring.ToggleLamp(x, y, tile, forcedState, skipWires);
						return true;
					case 95:
						goto IL_11F;
					}
				}
				else if (num == 100 || num == 126)
				{
					goto IL_11F;
				}
			}
			else if (num <= 215)
			{
				if (num <= 173)
				{
					if (num == 149)
					{
						Wiring.ToggleHolidayLight(x, y, tile, forcedState);
						return true;
					}
					if (num == 173)
					{
						goto IL_11F;
					}
				}
				else
				{
					if (num == 174)
					{
						goto IL_108;
					}
					if (num == 215)
					{
						Wiring.ToggleCampFire(x, y, tile, forcedState, skipWires);
						return true;
					}
				}
			}
			else if (num <= 405)
			{
				if (num == 372)
				{
					goto IL_108;
				}
				if (num == 405)
				{
					Wiring.ToggleFirePlace(x, y, tile, forcedState, skipWires);
					return true;
				}
			}
			else
			{
				if (num == 564)
				{
					goto IL_11F;
				}
				if (num == 646)
				{
					goto IL_108;
				}
			}
			return false;
			IL_108:
			Wiring.ToggleCandle(x, y, tile, forcedState);
			return true;
			IL_11F:
			Wiring.Toggle2x2Light(x, y, tile, forcedState, skipWires);
			return true;
		}

		// Token: 0x06001341 RID: 4929 RVA: 0x00481DEC File Offset: 0x0047FFEC
		private unsafe static bool HasValidGroundForAbigailsFlowerBelowSpot(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort type = *tile.type;
			return type >= 0 && (type == 70 || type == 633 || TileID.Sets.Conversion.Grass[(int)type]) && WorldGen.SolidTileAllowBottomSlope(x, y + 1);
		}

		// Token: 0x06001342 RID: 4930 RVA: 0x00481E58 File Offset: 0x00480058
		private static bool TryGrowingAbigailsFlower(int i, int j)
		{
			if (Main.rand.Next(30) != 0)
			{
				return false;
			}
			int num = 1;
			if (Main.dontStarveWorld)
			{
				num = 2;
			}
			for (int k = 0; k < num; k++)
			{
				int num2 = WorldGen.genRand.Next(Math.Max(10, i - 10), Math.Min(Main.maxTilesX - 10, i + 10));
				int num3 = WorldGen.genRand.Next(Math.Max(10, j - 10), Math.Min(Main.maxTilesY - 10, j + 10));
				if (WorldGen.HasValidGroundForAbigailsFlowerBelowSpot(num2, num3) && WorldGen.NoNearbyAbigailsFlower(num2, num3) && WorldGen.PlaceTile(num2, num3, 624, true, false, -1, 0))
				{
					if (Main.netMode == 2 && Main.tile[num2, num3] != null && Main.tile[num2, num3].active())
					{
						NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x06001343 RID: 4931 RVA: 0x00481F44 File Offset: 0x00480144
		private unsafe static bool NoNearbyAbigailsFlower(int i, int j)
		{
			int num5 = Utils.Clamp<int>(i - 120, 10, Main.maxTilesX - 1 - 10);
			int num2 = Utils.Clamp<int>(i + 120, 10, Main.maxTilesX - 1 - 10);
			int num3 = Utils.Clamp<int>(j - 120, 10, Main.maxTilesY - 1 - 10);
			int num4 = Utils.Clamp<int>(j + 120, 10, Main.maxTilesY - 1 - 10);
			for (int k = num5; k <= num2; k++)
			{
				for (int l = num3; l <= num4; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.active() && *tile.type == 624)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001344 RID: 4932 RVA: 0x00481FF0 File Offset: 0x004801F0
		private unsafe static bool HasValidGroundForGlowTulipBelowSpot(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 2))
			{
				return false;
			}
			Tile tile = Main.tile[x, y + 1];
			if (tile == null || !tile.active())
			{
				return false;
			}
			ushort type = *tile.type;
			return type >= 0 && (type == 0 || type == 70 || type == 633 || type == 59 || type == 225 || TileID.Sets.Conversion.Grass[(int)type] || TileID.Sets.Conversion.Stone[(int)type] || Main.tileMoss[(int)type]) && WorldGen.SolidTileAllowBottomSlope(x, y + 1);
		}

		// Token: 0x06001345 RID: 4933 RVA: 0x00482080 File Offset: 0x00480280
		private unsafe static bool TryGrowingGlowTulip(int i, int j)
		{
			int num = 5;
			for (int k = 0; k < num; k++)
			{
				int num2 = WorldGen.genRand.Next(Math.Max(10, i - 10), Math.Min(Main.maxTilesX - 10, i + 10));
				int num3 = WorldGen.genRand.Next(Math.Max(10, j - 10), Math.Min(Main.maxTilesY - 10, j + 10));
				if (WorldGen.HasValidGroundForGlowTulipBelowSpot(num2, num3) && WorldGen.NoNearbyGlowTulips(num2, num3))
				{
					WorldGen.PlaceTile(num2, num3, 656, true, false, -1, 0);
					Tile tile = Main.tile[num2, num3];
					if (tile.active() && *tile.type == 656)
					{
						if (!WorldGen.generatingWorld && Main.netMode == 2 && Main.tile[num2, num3] != null && Main.tile[num2, num3].active())
						{
							NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
						}
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06001346 RID: 4934 RVA: 0x00482184 File Offset: 0x00480384
		private unsafe static bool NoNearbyGlowTulips(int i, int j)
		{
			int num5 = Utils.Clamp<int>(i - 120, 10, Main.maxTilesX - 1 - 10);
			int num2 = Utils.Clamp<int>(i + 120, 10, Main.maxTilesX - 1 - 10);
			int num3 = Utils.Clamp<int>(j - 120, 10, Main.maxTilesY - 1 - 10);
			int num4 = Utils.Clamp<int>(j + 120, 10, Main.maxTilesY - 1 - 10);
			for (int k = num5; k <= num2; k++)
			{
				for (int l = num3; l <= num4; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.active() && *tile.type == 656)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001347 RID: 4935 RVA: 0x00482230 File Offset: 0x00480430
		private unsafe static void UpdateWorld_UndergroundTile(int i, int j, bool checkNPCSpawns, int wallDist)
		{
			TileLoader.RandomUpdate(i, j, (int)(*Main.tile[i, j].type));
			WallLoader.RandomUpdate(i, j, (int)(*Main.tile[i, j].wall));
			int num = i - 1;
			int num2 = i + 2;
			int num3 = j - 1;
			int num4 = j + 2;
			if (num < 10)
			{
				num = 10;
			}
			if (num2 > Main.maxTilesX - 10)
			{
				num2 = Main.maxTilesX - 10;
			}
			if (num3 < 10)
			{
				num3 = 10;
			}
			if (num4 > Main.maxTilesY - 10)
			{
				num4 = Main.maxTilesY - 10;
			}
			if (Main.tile[i, j] == null)
			{
				return;
			}
			if (*Main.tile[i, j].type == 655 && !NPC.AnyNPCs(262))
			{
				WorldGen.KillTile(i, j, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
				}
			}
			if (Main.tileAlch[(int)(*Main.tile[i, j].type)])
			{
				WorldGen.GrowAlch(i, j);
			}
			else if (Main.tile[i, j].nactive())
			{
				WorldGen.hardUpdateWorld(i, j);
				if (Main.rand.Next(2500) == 0)
				{
					WorldGen.plantDye(i, j, false);
				}
				else if (Main.hardMode && Main.rand.Next(10000) == 0)
				{
					WorldGen.plantDye(i, j, true);
				}
				if (*Main.tile[i, j].type == 519)
				{
					WorldGen.CheckCatTail(i, j);
					if (Main.tile[i, j].active() && WorldGen.genRand.Next(2) == 0)
					{
						WorldGen.GrowCatTail(i, j);
						WorldGen.CheckCatTail(i, j);
					}
				}
				if (*Main.tile[i, j].type == 549)
				{
					WorldGen.GrowCheckSeaweed(i, j);
				}
				else if (*Main.tile[i, j].type == 53 && !Main.tile[i, j].topSlope() && !Main.tile[i, j].halfBrick() && !Main.tile[i, j - 1].active() && WorldGen.genRand.Next(20) == 0)
				{
					WorldGen.GrowCheckSeaweed(i, j);
				}
				else if (TileID.Sets.SpreadUnderground[(int)(*Main.tile[i, j].type)])
				{
					WorldGen.UpdateWorld_GrassGrowth(i, j, num, num2, num3, num4, true);
					int type = (int)(*Main.tile[i, j].type);
					if ((type == 32 || type == 352) && WorldGen.genRand.Next(3) == 0)
					{
						if (type == 32)
						{
							WorldGen.GrowSpike(i, j, 32, 23);
						}
						else
						{
							WorldGen.GrowSpike(i, j, 352, 199);
						}
					}
				}
				else if (*Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0)
				{
					if (*Main.tile[i, j].frameX < 144)
					{
						if (Main.rand.Next(4) == 0)
						{
							*Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
						}
						*Main.tile[i, j].type = 74;
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
						}
					}
				}
				else if ((*Main.tile[i, j].type == 60 || *Main.tile[i, j].type == 62) && WorldGen.genRand.Next(5) == 0 && WorldGen.GrowMoreVines(i, j))
				{
					if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						bool flag = false;
						for (int num5 = j; num5 > j - 10; num5--)
						{
							if (Main.tile[i, num5].bottomSlope())
							{
								flag = false;
								break;
							}
							if (Main.tile[i, num5].active() && *Main.tile[i, num5].type == 60 && !Main.tile[i, num5].bottomSlope())
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							int num6 = j + 1;
							*Main.tile[i, num6].type = 62;
							Main.tile[i, num6].active(true);
							WorldGen.SquareTileFrame(i, num6, true);
							Main.tile[i, num6].CopyPaintAndCoating(Main.tile[i, num6 - 1]);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, num6, TileChangeType.None);
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 633 || *Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
				{
					if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						int maxValue = 70;
						if (*Main.tile[i, j].type == 638)
						{
							maxValue = 7;
						}
						if (WorldGen.genRand.Next(maxValue) == 0)
						{
							bool flag2 = false;
							for (int num7 = j; num7 > j - 10; num7--)
							{
								if (Main.tile[i, num7].bottomSlope())
								{
									flag2 = false;
									break;
								}
								if (Main.tile[i, num7].active() && *Main.tile[i, num7].type == 633 && !Main.tile[i, num7].bottomSlope())
								{
									flag2 = true;
									break;
								}
							}
							if (flag2)
							{
								int num8 = j + 1;
								*Main.tile[i, num8].type = 638;
								Main.tile[i, num8].active(true);
								Main.tile[i, num8].CopyPaintAndCoating(Main.tile[i, num8 - 1]);
								WorldGen.SquareTileFrame(i, num8, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num8, TileChangeType.None);
								}
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 70 || *Main.tile[i, j].type == 528) && WorldGen.GrowMoreVines(i, j))
				{
					if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						int maxValue2 = 70;
						if (*Main.tile[i, j].type == 528)
						{
							maxValue2 = 7;
						}
						if (WorldGen.genRand.Next(maxValue2) == 0)
						{
							bool flag3 = false;
							for (int num9 = j; num9 > j - 10; num9--)
							{
								if (Main.tile[i, num9].bottomSlope())
								{
									flag3 = false;
									break;
								}
								if (Main.tile[i, num9].active() && *Main.tile[i, num9].type == 70 && !Main.tile[i, num9].bottomSlope())
								{
									flag3 = true;
									break;
								}
							}
							if (flag3)
							{
								int num10 = j + 1;
								*Main.tile[i, num10].type = 528;
								Main.tile[i, num10].active(true);
								Main.tile[i, num10].CopyPaintAndCoating(Main.tile[i, num10 - 1]);
								WorldGen.SquareTileFrame(i, num10, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num10, TileChangeType.None);
								}
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 661 || *Main.tile[i, j].type == 636) && WorldGen.GrowMoreVines(i, j))
				{
					if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						int maxValue3 = 70;
						if (*Main.tile[i, j].type == 636)
						{
							maxValue3 = 7;
						}
						if (WorldGen.genRand.Next(maxValue3) == 0)
						{
							bool flag4 = false;
							for (int num11 = j; num11 > j - 10; num11--)
							{
								if (Main.tile[i, num11].bottomSlope())
								{
									flag4 = false;
									break;
								}
								if (Main.tile[i, num11].active() && *Main.tile[i, num11].type == 661 && !Main.tile[i, num11].bottomSlope())
								{
									flag4 = true;
									break;
								}
							}
							if (flag4)
							{
								int num12 = j + 1;
								*Main.tile[i, num12].type = 636;
								Main.tile[i, num12].active(true);
								Main.tile[i, num12].CopyPaintAndCoating(Main.tile[i, num12 - 1]);
								WorldGen.SquareTileFrame(i, num12, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num12, TileChangeType.None);
								}
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 662 || *Main.tile[i, j].type == 205) && WorldGen.GrowMoreVines(i, j))
				{
					if (!Main.tile[i, j + 1].active() && !Main.tile[i, j + 1].lava())
					{
						int maxValue4 = 70;
						if (*Main.tile[i, j].type == 205)
						{
							maxValue4 = 7;
						}
						if (WorldGen.genRand.Next(maxValue4) == 0)
						{
							bool flag5 = false;
							for (int num13 = j; num13 > j - 10; num13--)
							{
								if (Main.tile[i, num13].bottomSlope())
								{
									flag5 = false;
									break;
								}
								if (Main.tile[i, num13].active() && *Main.tile[i, num13].type == 662 && !Main.tile[i, num13].bottomSlope())
								{
									flag5 = true;
									break;
								}
							}
							if (flag5)
							{
								int num14 = j + 1;
								*Main.tile[i, num14].type = 205;
								Main.tile[i, num14].active(true);
								Main.tile[i, num14].CopyPaintAndCoating(Main.tile[i, num14 - 1]);
								WorldGen.SquareTileFrame(i, num14, true);
								if (Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, num14, TileChangeType.None);
								}
							}
						}
					}
				}
				else if ((*Main.tile[i, j].type == 60 || *Main.tile[i, j].type == 62) && WorldGen.genRand.Next(80) == 0 && !WorldGen.PlayerLOS(i, j))
				{
					bool flag6 = true;
					int num15 = j;
					if (*Main.tile[i, j].type == 60)
					{
						num15++;
					}
					for (int k = i; k < i + 2; k++)
					{
						int num16 = num15 - 1;
						if (!WorldGen.AnchorValid(Framing.GetTileSafely(k, num16), AnchorType.SolidTile) || Main.tile[k, num16].bottomSlope())
						{
							flag6 = false;
						}
						if (*Main.tile[k, num16].liquid > 0 || Main.wallHouse[(int)(*Main.tile[k, num16].wall)])
						{
							flag6 = false;
						}
						if (!flag6)
						{
							break;
						}
						for (int l = num15; l < num15 + 2; l++)
						{
							if ((Main.tile[k, l].active() && (!Main.tileCut[(int)(*Main.tile[k, l].type)] || *Main.tile[k, l].type == 444)) || Main.tile[k, l].lava())
							{
								flag6 = false;
							}
							if (!flag6)
							{
								break;
							}
						}
						if (!flag6)
						{
							break;
						}
					}
					if (flag6 && WorldGen.CountNearBlocksTypes(i, j, 20, 1, new int[]
					{
						444
					}) > 0)
					{
						flag6 = false;
					}
					if (flag6)
					{
						for (int m = i; m < i + 2; m++)
						{
							Main.tile[m, num15 - 1].slope(0);
							Main.tile[m, num15 - 1].halfBrick(false);
							for (int n = num15; n < num15 + 2; n++)
							{
								if (Main.tile[m, n].active())
								{
									WorldGen.KillTile(m, n, false, false, false);
								}
							}
						}
						for (int num17 = i; num17 < i + 2; num17++)
						{
							for (int num18 = num15; num18 < num15 + 2; num18++)
							{
								Main.tile[num17, num18].active(true);
								*Main.tile[num17, num18].type = 444;
								*Main.tile[num17, num18].frameX = (short)((num17 - i) * 18);
								*Main.tile[num17, num18].frameY = (short)((num18 - num15) * 18);
							}
						}
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, num15 - 1, 2, 3, TileChangeType.None);
						}
					}
				}
				else if (*Main.tile[i, j].type == 396 && WorldGen.genRand.Next(80) == 0 && !WorldGen.PlayerLOS(i, j))
				{
					bool flag7 = true;
					int num19 = j - 1;
					for (int num20 = i; num20 < i + 2; num20++)
					{
						int num21 = num19 + 1;
						if (!WorldGen.AnchorValid(Framing.GetTileSafely(num20, num21), AnchorType.SolidTile) || Main.tile[num20, num21].topSlope())
						{
							flag7 = false;
						}
						if (*Main.tile[num20, num21].liquid > 0 || Main.wallHouse[(int)(*Main.tile[num20, num21].wall)])
						{
							flag7 = false;
						}
						if (!flag7)
						{
							break;
						}
						for (int num22 = num19 - 2; num22 < num19; num22++)
						{
							if ((Main.tile[num20, num22].active() && (!Main.tileCut[(int)(*Main.tile[num20, num22].type)] || *Main.tile[num20, num22].type == 485)) || Main.tile[num20, num22].lava())
							{
								flag7 = false;
							}
							if (!flag7)
							{
								break;
							}
						}
						if (!flag7)
						{
							break;
						}
					}
					if (flag7 && WorldGen.CountNearBlocksTypes(i, j, 20, 1, new int[]
					{
						485
					}) > 0)
					{
						flag7 = false;
					}
					if (flag7)
					{
						bool flag8 = true;
						for (int num23 = -1; num23 >= -3; num23--)
						{
							if (Main.tile[i, j + num23].active())
							{
								flag8 = false;
								break;
							}
						}
						if (flag8)
						{
							WorldGen.PlaceTile(i, j - 1, 485, true, false, -1, WorldGen.genRand.Next(4));
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, j - 2, 2, 2, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 69)
				{
					WorldGen.GrowSpike(i, j, 69, 60);
				}
				else if (*Main.tile[i, j].type == 147 || *Main.tile[i, j].type == 161 || *Main.tile[i, j].type == 163 || *Main.tile[i, j].type == 164 || *Main.tile[i, j].type == 200)
				{
					if (Main.rand.Next(10) == 0 && !Main.tile[i, j + 1].active() && !Main.tile[i, j + 2].active())
					{
						int num50 = i - 3;
						int num24 = i + 4;
						int num25 = 0;
						for (int num26 = num50; num26 < num24; num26++)
						{
							if (*Main.tile[num26, j].type == 165 && Main.tile[num26, j].active())
							{
								num25++;
							}
							if (*Main.tile[num26, j + 1].type == 165 && Main.tile[num26, j + 1].active())
							{
								num25++;
							}
							if (*Main.tile[num26, j + 2].type == 165 && Main.tile[num26, j + 2].active())
							{
								num25++;
							}
							if (*Main.tile[num26, j + 3].type == 165 && Main.tile[num26, j + 3].active())
							{
								num25++;
							}
						}
						if (num25 < 2)
						{
							WorldGen.PlaceTight(i, j + 1, false);
							WorldGen.SquareTileFrame(i, j + 1, true);
							if (Main.netMode == 2 && Main.tile[i, j + 1].active())
							{
								NetMessage.SendTileSquare(-1, i, j + 1, 1, 2, TileChangeType.None);
							}
						}
					}
				}
				else if (Main.tileMoss[(int)(*Main.tile[i, j].type)] || TileID.Sets.tileMossBrick[(int)(*Main.tile[i, j].type)])
				{
					int type2 = (int)(*Main.tile[i, j].type);
					bool flag9 = false;
					TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
					for (int num27 = num; num27 < num2; num27++)
					{
						for (int num28 = num3; num28 < num4; num28++)
						{
							if ((i != num27 || j != num28) && Main.tile[num27, num28].active() && (*Main.tile[num27, num28].type == 1 || *Main.tile[num27, num28].type == 38))
							{
								int type3 = (int)(*Main.tile[num27, num28].type);
								int num29 = WorldGen.MossConversion(type2, type3);
								WorldGen.SpreadGrass(num27, num28, (int)(*Main.tile[num27, num28].type), num29, false, color);
								if ((int)(*Main.tile[num27, num28].type) == num29)
								{
									WorldGen.SquareTileFrame(num27, num28, true);
									flag9 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag9)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
					}
					if (WorldGen.genRand.Next(6) == 0)
					{
						int num30 = i;
						int num31 = j;
						switch (WorldGen.genRand.Next(4))
						{
						case 0:
							num30--;
							break;
						case 1:
							num30++;
							break;
						case 2:
							num31--;
							break;
						default:
							num31++;
							break;
						}
						if (!Main.tile[num30, num31].active())
						{
							if (WorldGen.PlaceTile(num30, num31, 184, true, false, -1, 0))
							{
								Main.tile[num30, num31].CopyPaintAndCoating(Main.tile[i, j]);
							}
							if (Main.netMode == 2 && Main.tile[num30, num31].active())
							{
								NetMessage.SendTileSquare(-1, num30, num31, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].type == 20)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
					}
				}
				else if (*Main.tile[i, j].type == 590)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
					}
				}
				else if (*Main.tile[i, j].type == 595)
				{
					if (WorldGen.genRand.Next(5) == 0)
					{
						WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
					}
				}
				else if (*Main.tile[i, j].type == 615 && WorldGen.genRand.Next(5) == 0)
				{
					WorldGen.AttemptToGrowTreeFromSapling(i, j, true);
				}
			}
			else
			{
				if (*Main.tile[i, j].wall == 62 && *Main.tile[i, j].liquid == 0)
				{
					WorldGen.GrowWeb(i, j);
				}
				if (checkNPCSpawns)
				{
					WorldGen.TrySpawningTownNPC(i, j);
				}
			}
			if (WorldGen.AllowedToSpreadInfections)
			{
				if (*Main.tile[i, j].wall == 81 || *Main.tile[i, j].wall == 83 || (*Main.tile[i, j].type == 199 && Main.tile[i, j].active()))
				{
					int num32 = i + WorldGen.genRand.Next(-2, 3);
					int num33 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num32, num33, 10) && *Main.tile[num32, num33].wall >= 63 && *Main.tile[num32, num33].wall <= 68)
					{
						bool flag10 = false;
						for (int num34 = i - wallDist; num34 < i + wallDist; num34++)
						{
							for (int num35 = j - wallDist; num35 < j + wallDist; num35++)
							{
								if (Main.tile[num34, num35].active())
								{
									int type4 = (int)(*Main.tile[num34, num35].type);
									if (type4 == 199 || type4 == 200 || type4 == 201 || type4 == 203 || type4 == 205 || type4 == 234 || type4 == 352 || type4 == 662)
									{
										flag10 = true;
										break;
									}
								}
							}
						}
						if (flag10)
						{
							*Main.tile[num32, num33].wall = 81;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num32, num33, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].wall == 69 || *Main.tile[i, j].wall == 3 || (*Main.tile[i, j].type == 23 && Main.tile[i, j].active()))
				{
					int num36 = i + WorldGen.genRand.Next(-2, 3);
					int num37 = j + WorldGen.genRand.Next(-2, 3);
					if (WorldGen.InWorld(num36, num37, 10) && *Main.tile[num36, num37].wall >= 63 && *Main.tile[num36, num37].wall <= 68)
					{
						bool flag11 = false;
						for (int num38 = i - wallDist; num38 < i + wallDist; num38++)
						{
							for (int num39 = j - wallDist; num39 < j + wallDist; num39++)
							{
								if (Main.tile[num38, num39].active())
								{
									int type5 = (int)(*Main.tile[num38, num39].type);
									if (type5 == 22 || type5 == 23 || type5 == 24 || type5 == 25 || type5 == 32 || type5 == 112 || type5 == 163 || type5 == 636 || type5 == 661)
									{
										flag11 = true;
										break;
									}
								}
							}
						}
						if (flag11)
						{
							*Main.tile[num36, num37].wall = 69;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num36, num37, TileChangeType.None);
							}
						}
					}
				}
				else if (*Main.tile[i, j].wall == 70 || (*Main.tile[i, j].type == 109 && Main.tile[i, j].active()))
				{
					int num40 = i + WorldGen.genRand.Next(-2, 3);
					int num41 = j + WorldGen.genRand.Next(-2, 3);
					if ((WorldGen.InWorld(num40, num41, 10) && *Main.tile[num40, num41].wall == 63) || *Main.tile[num40, num41].wall == 65 || *Main.tile[num40, num41].wall == 66 || *Main.tile[num40, num41].wall == 68)
					{
						bool flag12 = false;
						for (int num42 = i - wallDist; num42 < i + wallDist; num42++)
						{
							for (int num43 = j - wallDist; num43 < j + wallDist; num43++)
							{
								if (Main.tile[num42, num43].active())
								{
									int type6 = (int)(*Main.tile[num42, num43].type);
									if (type6 == 109 || type6 == 110 || type6 == 113 || type6 == 115 || type6 == 116 || type6 == 117 || type6 == 164)
									{
										flag12 = true;
										break;
									}
								}
							}
						}
						if (flag12)
						{
							*Main.tile[num40, num41].wall = 70;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num40, num41, TileChangeType.None);
							}
						}
					}
				}
				WorldGen.SpreadDesertWalls(wallDist, i, j);
			}
			if (!Main.tile[i, j].nactive())
			{
				return;
			}
			if (*Main.tile[i, j].type == 61 && WorldGen.genRand.Next(3) == 0 && *Main.tile[i, j].frameX < 144)
			{
				if (Main.rand.Next(4) == 0)
				{
					*Main.tile[i, j].frameX = (short)(162 + WorldGen.genRand.Next(8) * 18);
				}
				*Main.tile[i, j].type = 74;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
				}
			}
			if ((*Main.tile[i, j].type == 60 || *Main.tile[i, j].type == 62) && WorldGen.GrowMoreVines(i, j))
			{
				int maxValue5 = 30;
				if (*Main.tile[i, j].type == 62)
				{
					maxValue5 = 10;
				}
				if (WorldGen.genRand.Next(maxValue5) != 0 || Main.tile[i, j + 1].active() || Main.tile[i, j + 1].lava())
				{
					return;
				}
				bool flag13 = false;
				for (int num44 = j; num44 > j - 10; num44--)
				{
					if (Main.tile[i, num44].bottomSlope())
					{
						flag13 = false;
						break;
					}
					if (Main.tile[i, num44].active() && *Main.tile[i, num44].type == 60 && !Main.tile[i, num44].bottomSlope())
					{
						flag13 = true;
						break;
					}
				}
				if (flag13)
				{
					int num45 = j + 1;
					*Main.tile[i, num45].type = 62;
					Main.tile[i, num45].active(true);
					Main.tile[i, num45].CopyPaintAndCoating(Main.tile[i, num45 - 1]);
					WorldGen.SquareTileFrame(i, num45, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, num45, TileChangeType.None);
						return;
					}
				}
			}
			else if ((*Main.tile[i, j].type == 633 || *Main.tile[i, j].type == 638) && WorldGen.GrowMoreVines(i, j))
			{
				int maxValue6 = 70;
				if (*Main.tile[i, j].type == 638)
				{
					maxValue6 = 7;
				}
				if (WorldGen.genRand.Next(maxValue6) != 0 || Main.tile[i, j + 1].active() || Main.tile[i, j + 1].lava())
				{
					return;
				}
				bool flag14 = false;
				for (int num46 = j; num46 > j - 10; num46--)
				{
					if (Main.tile[i, num46].bottomSlope())
					{
						flag14 = false;
						break;
					}
					if (Main.tile[i, num46].active() && *Main.tile[i, num46].type == 633 && !Main.tile[i, num46].bottomSlope())
					{
						flag14 = true;
						break;
					}
				}
				if (flag14)
				{
					int num47 = j + 1;
					*Main.tile[i, num47].type = 638;
					Main.tile[i, num47].active(true);
					Main.tile[i, num47].CopyPaintAndCoating(Main.tile[i, num47 - 1]);
					WorldGen.SquareTileFrame(i, num47, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, num47, TileChangeType.None);
						return;
					}
				}
			}
			else
			{
				if ((*Main.tile[i, j].type != 70 && *Main.tile[i, j].type != 528) || !WorldGen.GrowMoreVines(i, j))
				{
					return;
				}
				int maxValue7 = 70;
				if (*Main.tile[i, j].type == 528)
				{
					maxValue7 = 7;
				}
				if (WorldGen.genRand.Next(maxValue7) != 0 || Main.tile[i, j + 1].active() || Main.tile[i, j + 1].lava())
				{
					return;
				}
				bool flag15 = false;
				for (int num48 = j; num48 > j - 10; num48--)
				{
					if (Main.tile[i, num48].bottomSlope())
					{
						flag15 = false;
						break;
					}
					if (Main.tile[i, num48].active() && *Main.tile[i, num48].type == 70 && !Main.tile[i, num48].bottomSlope())
					{
						flag15 = true;
						break;
					}
				}
				if (flag15)
				{
					int num49 = j + 1;
					*Main.tile[i, num49].type = 528;
					Main.tile[i, num49].active(true);
					Main.tile[i, num49].CopyPaintAndCoating(Main.tile[i, num49 - 1]);
					WorldGen.SquareTileFrame(i, num49, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, num49, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x06001348 RID: 4936 RVA: 0x004844B8 File Offset: 0x004826B8
		private static void GrowWeb(int i, int j)
		{
			if (WorldGen.genRand.Next(10) != 0)
			{
				return;
			}
			int num = WorldGen.genRand.Next(2, 4);
			int num5 = i - num;
			int num2 = i + num;
			int num3 = j - num;
			int num4 = j + num;
			bool flag = false;
			for (int k = num5; k <= num2; k++)
			{
				for (int l = num3; l <= num4; l++)
				{
					if (WorldGen.SolidTile(k, l, false))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag && !Main.tile[i, j].active())
			{
				WorldGen.PlaceTile(i, j, 51, true, false, -1, 0);
				WorldGen.TileFrame(i, j, true, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
				}
			}
		}

		// Token: 0x06001349 RID: 4937 RVA: 0x00484568 File Offset: 0x00482768
		public unsafe static bool GeneratePlanteraBulbOnAllMechsDefeated()
		{
			bool flag5 = (double)Main.dungeonX > (double)Main.maxTilesX * 0.5;
			int num2 = (int)(flag5 ? ((double)Main.maxTilesX * 0.15) : ((double)Main.maxTilesX * 0.65));
			int num3 = (int)(flag5 ? ((double)Main.maxTilesX * 0.35) : ((double)Main.maxTilesX * 0.85));
			int num4 = (int)Main.worldSurface;
			int underworldLayer = Main.UnderworldLayer;
			int width = num3 - num2;
			int height = underworldLayer - num4;
			Rectangle rectangle;
			rectangle..ctor(num2, num4, width, height);
			int num5 = 2500;
			while (num5 > 0)
			{
				bool flag = num5 < 500;
				bool flag2 = num5 < 200;
				num5--;
				Point point;
				point..ctor(rectangle.X + WorldGen.genRand.Next(rectangle.Width), rectangle.Y + WorldGen.genRand.Next(rectangle.Height));
				Tile tile = Main.tile[point.X, point.Y];
				int num6 = 500;
				bool flag3 = false;
				while (!flag3)
				{
					num6--;
					if (num6 <= 0)
					{
						flag3 = true;
					}
					point.Y--;
					if (point.Y < rectangle.Y)
					{
						break;
					}
					tile = Main.tile[point.X, point.Y];
					if (tile != null && (flag2 || tile.active()))
					{
						if (*tile.type == 60)
						{
							flag3 = true;
						}
						else if (flag && *tile.type == 59)
						{
							flag3 = true;
						}
					}
				}
				if (!(tile == null))
				{
					bool flag6 = tile.active() || flag2;
					bool flag4 = *tile.type == 60 || (flag && *tile.type == 59);
					if (flag6 && flag4)
					{
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X, point.Y - 1, flag))
						{
							return true;
						}
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X - 1, point.Y - 1, flag))
						{
							return true;
						}
						if (WorldGen.AttemptToGeneratePlanteraBulbAt(point.X + 1, point.Y - 1, flag))
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x0600134A RID: 4938 RVA: 0x004847A8 File Offset: 0x004829A8
		private unsafe static bool AttemptToGeneratePlanteraBulbAt(int i, int j, bool forceBulb)
		{
			if (forceBulb)
			{
				int num = 0;
				for (int k = -2; k < 2; k++)
				{
					for (int l = -2; l < 2; l++)
					{
						int num2 = i + k;
						int num3 = j + l;
						Tile tile = Main.tile[num2, num3];
						if (*tile.type == 59 || *tile.type == 60)
						{
							num++;
						}
						else if (tile.active())
						{
							num--;
						}
						if (WorldGen.IsAContainer(tile) || *tile.type == 226 || *tile.type == 237 || *tile.type == 10 || *tile.type == 11 || *tile.type == 26 || *tile.type == 16 || *tile.type == 15 || *tile.type == 14 || *tile.type == 104 || TileID.Sets.Paintings[(int)(*tile.type)] || *tile.type == 158 || *tile.type == 105 || *tile.type == 531 || *tile.type == 349 || *tile.type == 138 || *tile.type == 664 || *tile.type == 665 || *tile.type == 137 || *tile.type == 443 || *tile.type == 12 || *tile.type == 665 || *tile.type == 314)
						{
							num = -1;
							break;
						}
					}
					if (num <= -1)
					{
						break;
					}
				}
				if (num < 12)
				{
					return false;
				}
				for (int m = -2; m < 2; m++)
				{
					for (int n = -2; n < 2; n++)
					{
						int num4 = i + m;
						int num5 = j + n;
						bool flag = m == -2 || m == 1 || n == -2 || n == 1;
						Tile tile2 = Main.tile[num4, num5];
						tile2.ClearTile();
						if (flag)
						{
							*tile2.type = 60;
							tile2.active(true);
						}
						WorldGen.SquareTileFrame(num4, num5, true);
					}
				}
				WorldGen.PlaceJunglePlant(i, j, 238, 0, 0);
				if (*Main.tile[i, j].type == 238)
				{
					WorldGen.SquareTileFrame(i, j, true);
					WorldGen.SquareTileFrame(i + 2, j, true);
					WorldGen.SquareTileFrame(i - 1, j, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, 8, TileChangeType.None);
					}
					return true;
				}
			}
			else
			{
				WorldGen.PlaceJunglePlant(i, j, 238, 0, 0);
				if (*Main.tile[i, j].type == 238)
				{
					WorldGen.SquareTileFrame(i, j, true);
					WorldGen.SquareTileFrame(i + 2, j, true);
					WorldGen.SquareTileFrame(i - 1, j, true);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, 5, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600134B RID: 4939 RVA: 0x00484AD0 File Offset: 0x00482CD0
		private unsafe static void UpdateWorld_GrassGrowth(int i, int j, int minI, int maxI, int minJ, int maxJ, bool underground)
		{
			if (!WorldGen.InWorld(i, j, 10))
			{
				return;
			}
			if (underground)
			{
				int type = (int)(*Main.tile[i, j].type);
				int num = -1;
				int num2 = -1;
				int num3 = -1;
				int maxValue = 1;
				int num4 = type;
				int num5 = -1;
				if (type <= 70)
				{
					if (type != 23)
					{
						if (type != 60)
						{
							if (type == 70)
							{
								num = 59;
								num3 = 71;
								maxValue = 10;
							}
						}
						else
						{
							num = 59;
							num3 = 61;
							maxValue = 10;
						}
					}
					else
					{
						num = 0;
						num2 = 59;
						num4 = 23;
						num5 = 661;
						num3 = 24;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else if (type <= 633)
				{
					if (type != 199)
					{
						if (type == 633)
						{
							num = 57;
							num3 = 637;
							maxValue = 2;
						}
					}
					else
					{
						num = 0;
						num2 = 59;
						num4 = 199;
						num5 = 662;
						num3 = 201;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else if (type != 661)
				{
					if (type == 662)
					{
						num = 59;
						num2 = 0;
						num4 = 662;
						num5 = 199;
						num3 = 201;
						maxValue = 2;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else
				{
					num = 59;
					num2 = 0;
					num4 = 661;
					num5 = 23;
					num3 = 24;
					maxValue = 2;
					if (!WorldGen.AllowedToSpreadInfections)
					{
						return;
					}
				}
				bool flag = false;
				if (num3 != -1 && !Main.tile[i, minJ].active() && WorldGen.genRand.Next(maxValue) == 0)
				{
					flag = true;
					if (WorldGen.PlaceTile(i, minJ, num3, true, false, -1, 0))
					{
						Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
					}
					if (Main.netMode == 2 && Main.tile[i, minJ].active())
					{
						NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
					}
				}
				if (num != -1)
				{
					bool flag2 = false;
					TileColorCache color = Main.tile[i, j].BlockColorAndCoating();
					for (int k = minI; k < maxI; k++)
					{
						for (int l = minJ; l < maxJ; l++)
						{
							if (WorldGen.InWorld(k, l, 10) && (i != k || j != l) && Main.tile[k, l].active())
							{
								if ((int)(*Main.tile[k, l].type) == num)
								{
									WorldGen.SpreadGrass(k, l, num, num4, false, color);
									if ((int)(*Main.tile[k, l].type) == num4)
									{
										WorldGen.SquareTileFrame(k, l, true);
										flag2 = true;
									}
								}
								else if (num2 > -1 && num5 > -1 && (int)(*Main.tile[k, l].type) == num2)
								{
									WorldGen.SpreadGrass(k, l, num2, num5, false, color);
									if ((int)(*Main.tile[k, l].type) == num5)
									{
										WorldGen.SquareTileFrame(k, l, true);
										flag2 = true;
									}
								}
							}
						}
					}
					if (Main.netMode == 2 && flag2)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
					}
				}
				if (type != 60)
				{
					if (type != 70)
					{
						return;
					}
					if (*Main.tile[i, j - 1].liquid > 0)
					{
						WorldGen.PlaceCatTail(i, j - 1);
					}
					if (WorldGen.genRand.Next(250) == 0 && WorldGen.GrowTree(i, j) && WorldGen.PlayerLOS(i, j))
					{
						WorldGen.TreeGrowFXCheck(i, j - 1);
					}
				}
				else if (!flag && WorldGen.genRand.Next(25) == 0 && *Main.tile[i, minJ].liquid == 0)
				{
					if (Main.hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && WorldGen.genRand.Next(60) == 0)
					{
						bool flag3 = true;
						int num6 = 150;
						for (int m = i - num6; m < i + num6; m += 2)
						{
							for (int n = j - num6; n < j + num6; n += 2)
							{
								if (m > 1 && m < Main.maxTilesX - 2 && n > 1 && n < Main.maxTilesY - 2 && Main.tile[m, n].active() && *Main.tile[m, n].type == 238)
								{
									flag3 = false;
									break;
								}
							}
						}
						if (flag3)
						{
							WorldGen.PlaceJunglePlant(i, minJ, 238, 0, 0);
							WorldGen.SquareTileFrame(i, minJ, true);
							WorldGen.SquareTileFrame(i + 2, minJ, true);
							WorldGen.SquareTileFrame(i - 1, minJ, true);
							if (*Main.tile[i, minJ].type == 238 && Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 5, TileChangeType.None);
							}
						}
					}
					int maxValue2 = Main.expertMode ? 30 : 40;
					if (Main.hardMode && NPC.downedMechBossAny && WorldGen.genRand.Next(maxValue2) == 0)
					{
						bool flag4 = true;
						int num7 = 60;
						if (Main.expertMode)
						{
							num7 -= 10;
						}
						for (int num8 = i - num7; num8 < i + num7; num8 += 2)
						{
							for (int num9 = j - num7; num9 < j + num7; num9 += 2)
							{
								if (num8 > 1 && num8 < Main.maxTilesX - 2 && num9 > 1 && num9 < Main.maxTilesY - 2 && Main.tile[num8, num9].active() && *Main.tile[num8, num9].type == 236)
								{
									flag4 = false;
									break;
								}
							}
						}
						if (flag4)
						{
							WorldGen.PlaceJunglePlant(i, minJ, 236, WorldGen.genRand.Next(3), 0);
							WorldGen.SquareTileFrame(i, minJ, true);
							WorldGen.SquareTileFrame(i + 1, minJ + 1, true);
							if (*Main.tile[i, minJ].type == 236 && Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
								return;
							}
						}
					}
					else
					{
						WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(8), 0);
						if (*Main.tile[i, minJ].type == 233)
						{
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
								return;
							}
							WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(12), 1);
							if (*Main.tile[i, minJ].type == 233 && Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 3, TileChangeType.None);
								return;
							}
						}
					}
				}
				return;
			}
			int num10 = (int)(*Main.tile[i, j].type);
			if (num10 <= 109)
			{
				if (num10 <= 32)
				{
					if (num10 != 2 && num10 != 23 && num10 != 32)
					{
						return;
					}
				}
				else if (num10 != 60)
				{
					if (num10 != 70)
					{
						if (num10 != 109)
						{
							return;
						}
					}
					else
					{
						if (!Main.tile[i, j].inActive())
						{
							if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(10) == 0)
							{
								WorldGen.PlaceTile(i, minJ, 71, true, false, -1, 0);
								if (Main.tile[i, minJ].active())
								{
									Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
								}
								if (Main.netMode == 2 && Main.tile[i, minJ].active())
								{
									NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
								}
							}
							if (WorldGen.genRand.Next(300) == 0)
							{
								bool flag5 = WorldGen.PlayerLOS(i, j);
								if (WorldGen.GrowTree(i, j) && flag5)
								{
									WorldGen.TreeGrowFXCheck(i, j - 1);
								}
							}
						}
						bool flag6 = false;
						TileColorCache color2 = Main.tile[i, j].BlockColorAndCoating();
						for (int num11 = minI; num11 < maxI; num11++)
						{
							for (int num12 = minJ; num12 < maxJ; num12++)
							{
								if ((i != num11 || j != num12) && Main.tile[num11, num12].active() && *Main.tile[num11, num12].type == 59)
								{
									WorldGen.SpreadGrass(num11, num12, 59, num10, false, color2);
									if ((int)(*Main.tile[num11, num12].type) == num10)
									{
										WorldGen.SquareTileFrame(num11, num12, true);
										flag6 = true;
									}
								}
							}
						}
						if (Main.netMode == 2 && flag6)
						{
							NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
							return;
						}
						return;
					}
				}
				else
				{
					if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(7) == 0)
					{
						WorldGen.PlaceTile(i, minJ, 61, true, false, -1, 0);
						if (Main.tile[i, minJ].active())
						{
							Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
						}
						if (Main.netMode == 2 && Main.tile[i, minJ].active())
						{
							NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
						}
					}
					else if (WorldGen.genRand.Next(500) == 0 && (!Main.tile[i, minJ].active() || *Main.tile[i, minJ].type == 61 || *Main.tile[i, minJ].type == 74 || *Main.tile[i, minJ].type == 69))
					{
						if (WorldGen.GrowTree(i, j) && WorldGen.PlayerLOS(i, j))
						{
							WorldGen.TreeGrowFXCheck(i, j - 1);
						}
					}
					else if (WorldGen.genRand.Next(25) == 0 && *Main.tile[i, minJ].liquid == 0)
					{
						WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(8), 0);
						if (*Main.tile[i, minJ].type == 233)
						{
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, i, minJ, 4, TileChangeType.None);
							}
							else
							{
								WorldGen.PlaceJunglePlant(i, minJ, 233, WorldGen.genRand.Next(12), 1);
								if (*Main.tile[i, minJ].type == 233 && Main.netMode == 2)
								{
									NetMessage.SendTileSquare(-1, i, minJ, 3, TileChangeType.None);
								}
							}
						}
					}
					bool flag7 = false;
					TileColorCache color3 = Main.tile[i, j].BlockColorAndCoating();
					for (int num13 = minI; num13 < maxI; num13++)
					{
						for (int num14 = minJ; num14 < maxJ; num14++)
						{
							if ((i != num13 || j != num14) && Main.tile[num13, num14].active() && *Main.tile[num13, num14].type == 59)
							{
								WorldGen.SpreadGrass(num13, num14, 59, num10, false, color3);
								if ((int)(*Main.tile[num13, num14].type) == num10)
								{
									WorldGen.SquareTileFrame(num13, num14, true);
									flag7 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag7)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						return;
					}
					return;
				}
			}
			else if (num10 <= 477)
			{
				if (num10 != 199 && num10 != 352 && num10 != 477)
				{
					return;
				}
			}
			else if (num10 != 492)
			{
				if (num10 != 633)
				{
					if (num10 - 661 > 1)
					{
						return;
					}
				}
				else
				{
					if (!Main.tile[i, minJ].active() && WorldGen.genRand.Next(10) == 0)
					{
						WorldGen.PlaceTile(i, minJ, 637, true, false, -1, 0);
						if (Main.tile[i, minJ].active())
						{
							Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
						}
						if (Main.netMode == 2 && Main.tile[i, minJ].active())
						{
							NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
						}
					}
					TileColorCache color4 = Main.tile[i, j].BlockColorAndCoating();
					bool flag8 = false;
					for (int num15 = minI; num15 < maxI; num15++)
					{
						for (int num16 = minJ; num16 < maxJ; num16++)
						{
							if ((i != num15 || j != num16) && Main.tile[num15, num16].active() && *Main.tile[num15, num16].type == 57)
							{
								WorldGen.SpreadGrass(num15, num16, 57, num10, false, color4);
								if ((int)(*Main.tile[num15, num16].type) == num10)
								{
									WorldGen.SquareTileFrame(num15, num16, true);
									flag8 = true;
								}
							}
						}
					}
					if (Main.netMode == 2 && flag8)
					{
						NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
						return;
					}
					return;
				}
			}
			if (Main.halloween && WorldGen.genRand.Next(75) == 0 && (num10 == 2 || num10 == 109))
			{
				int num17 = 100;
				int num18 = 0;
				for (int num19 = i - num17; num19 < i + num17; num19 += 2)
				{
					for (int num20 = j - num17; num20 < j + num17; num20 += 2)
					{
						if (num19 > 1 && num19 < Main.maxTilesX - 2 && num20 > 1 && num20 < Main.maxTilesY - 2 && Main.tile[num19, num20].active() && *Main.tile[num19, num20].type == 254)
						{
							num18++;
						}
					}
				}
				if (num18 < 6)
				{
					WorldGen.PlacePumpkin(i, minJ);
					if (Main.netMode == 2 && *Main.tile[i, minJ].type == 254)
					{
						NetMessage.SendTileSquare(-1, i - 1, minJ - 1, 2, 2, TileChangeType.None);
					}
				}
			}
			if (!Main.tile[i, minJ].active() && *Main.tile[i, minJ].liquid == 0)
			{
				int num21 = -1;
				if (num10 == 2 && WorldGen.genRand.Next(12) == 0)
				{
					num21 = 3;
				}
				else if (num10 == 23 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 24;
				}
				else if (num10 == 199 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 201;
				}
				else if (num10 == 661 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 24;
				}
				else if (num10 == 662 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 201;
				}
				else if (num10 == 109 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 110;
				}
				else if (num10 == 633 && WorldGen.genRand.Next(10) == 0)
				{
					num21 = 637;
				}
				if (num21 != -1 && WorldGen.PlaceTile(i, minJ, num21, true, false, -1, 0))
				{
					Main.tile[i, minJ].CopyPaintAndCoating(Main.tile[i, j]);
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, minJ, TileChangeType.None);
					}
				}
			}
			bool flag9 = false;
			if (num10 <= 352)
			{
				if (num10 != 32)
				{
					if (num10 == 352)
					{
						num10 = 199;
						if (!WorldGen.AllowedToSpreadInfections)
						{
							return;
						}
					}
				}
				else
				{
					num10 = 23;
					if (!WorldGen.AllowedToSpreadInfections)
					{
						return;
					}
				}
			}
			else if (num10 != 477)
			{
				if (num10 == 492)
				{
					num10 = 109;
				}
			}
			else
			{
				num10 = 2;
			}
			int grass = num10;
			int num22 = -1;
			if (num10 == 23 || num10 == 661)
			{
				grass = 23;
				num22 = 661;
			}
			if (num10 == 199 || num10 == 662)
			{
				grass = 199;
				num22 = 662;
			}
			bool flag10 = WorldGen.AllowedToSpreadInfections && (num10 == 23 || num10 == 199 || num10 == 109 || num10 == 492 || num10 == 661 || num10 == 662) && WorldGen.InWorld(i, j, 10);
			for (int num23 = minI; num23 < maxI; num23++)
			{
				for (int num24 = minJ; num24 < maxJ; num24++)
				{
					if (WorldGen.InWorld(num23, num24, 10) && (i != num23 || j != num24) && Main.tile[num23, num24].active())
					{
						int type2 = (int)(*Main.tile[num23, num24].type);
						if (flag10 || type2 == 0 || (num22 != -1 && type2 == 59))
						{
							TileColorCache color5 = Main.tile[i, j].BlockColorAndCoating();
							if (type2 == 0 || (num22 > -1 && type2 == 59) || ((num10 == 23 || num10 == 661 || num10 == 199 || num10 == 662) && (type2 == 2 || type2 == 109 || type2 == 477 || type2 == 492)))
							{
								WorldGen.SpreadGrass(num23, num24, 0, grass, false, color5);
								if (num22 > -1)
								{
									WorldGen.SpreadGrass(num23, num24, 59, num22, false, color5);
								}
								if (WorldGen.AllowedToSpreadInfections && (num10 == 23 || num10 == 199 || num10 == 661 || num10 == 662))
								{
									WorldGen.SpreadGrass(num23, num24, 2, grass, false, color5);
									WorldGen.SpreadGrass(num23, num24, 109, grass, false, color5);
									WorldGen.SpreadGrass(num23, num24, 477, grass, false, color5);
									WorldGen.SpreadGrass(num23, num24, 492, grass, false, color5);
									if (num22 > -1)
									{
										WorldGen.SpreadGrass(num23, num24, 60, num22, false, color5);
									}
								}
								if ((int)(*Main.tile[num23, num24].type) == num10 || (num22 > -1 && (int)(*Main.tile[num23, num24].type) == num22))
								{
									WorldGen.SquareTileFrame(num23, num24, true);
									flag9 = true;
								}
							}
							if (type2 == 0 || ((num10 == 109 || num10 == 492) && (type2 == 2 || type2 == 477 || type2 == 23 || type2 == 199)))
							{
								WorldGen.SpreadGrass(num23, num24, 0, grass, false, color5);
								if (num10 == 109)
								{
									WorldGen.SpreadGrass(num23, num24, 2, grass, false, color5);
								}
								if (num10 != 109)
								{
									if (num10 == 492)
									{
										WorldGen.SpreadGrass(num23, num24, 477, grass, false, color5);
									}
								}
								else
								{
									WorldGen.SpreadGrass(num23, num24, 477, 492, false, color5);
								}
								if ((num10 == 492 || num10 == 109) && WorldGen.AllowedToSpreadInfections)
								{
									WorldGen.SpreadGrass(num23, num24, 23, 109, false, color5);
								}
								if ((num10 == 492 || num10 == 109) && WorldGen.AllowedToSpreadInfections)
								{
									WorldGen.SpreadGrass(num23, num24, 199, 109, false, color5);
								}
								if ((int)(*Main.tile[num23, num24].type) == num10)
								{
									WorldGen.SquareTileFrame(num23, num24, true);
									flag9 = true;
								}
							}
						}
					}
				}
			}
			if (Main.netMode == 2 && flag9)
			{
				NetMessage.SendTileSquare(-1, i, j, 3, TileChangeType.None);
				return;
			}
		}

		// Token: 0x0600134C RID: 4940 RVA: 0x00485E4C File Offset: 0x0048404C
		private unsafe static void TrySpawningTownNPC(int x, int y)
		{
			bool flag = Main.tileSolid[379];
			Main.tileSolid[379] = true;
			if (WorldGen.prioritizedTownNPCType > 0)
			{
				if (*Main.tile[x, y].wall == 34)
				{
					if (Main.rand.Next(4) == 0)
					{
						WorldGen.SpawnTownNPC(x, y);
					}
				}
				else
				{
					WorldGen.SpawnTownNPC(x, y);
				}
			}
			Main.tileSolid[379] = flag;
		}

		// Token: 0x0600134D RID: 4941 RVA: 0x00485EC0 File Offset: 0x004840C0
		public unsafe static void SpreadDesertWalls(int wallDist, int i, int j)
		{
			if (!WorldGen.InWorld(i, j, 10) || (!WallID.Sets.Conversion.Sandstone[(int)(*Main.tile[i, j].wall)] && (!Main.tile[i, j].active() || !TileID.Sets.Conversion.Sandstone[(int)(*Main.tile[i, j].type)]) && !WallID.Sets.Conversion.HardenedSand[(int)(*Main.tile[i, j].wall)]))
			{
				return;
			}
			int num = 0;
			int wall = (int)(*Main.tile[i, j].wall);
			int type = (int)(*Main.tile[i, j].type);
			if (WallID.Sets.Corrupt[wall] || TileID.Sets.Corrupt[type])
			{
				num = 1;
			}
			if (WallID.Sets.Hallow[wall] || TileID.Sets.Hallow[type])
			{
				num = 2;
			}
			if (WallID.Sets.Crimson[wall] || TileID.Sets.Crimson[type])
			{
				num = 3;
			}
			if (num == 0)
			{
				return;
			}
			int num2 = i + WorldGen.genRand.Next(-2, 3);
			int num3 = j + WorldGen.genRand.Next(-2, 3);
			bool flag = false;
			if (WallID.Sets.Conversion.PureSand[(int)(*Main.tile[num2, num3].wall)])
			{
				switch (num)
				{
				case 1:
					for (int k = i - wallDist; k < i + wallDist; k++)
					{
						for (int l = j - wallDist; l < j + wallDist; l++)
						{
							if (Main.tile[k, l].active() && TileID.Sets.Corrupt[(int)(*Main.tile[k, l].type)])
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
					break;
				case 2:
					for (int num4 = i - wallDist; num4 < i + wallDist; num4++)
					{
						for (int num5 = j - wallDist; num5 < j + wallDist; num5++)
						{
							if (Main.tile[num4, num5].active() && TileID.Sets.Hallow[(int)(*Main.tile[num4, num5].type)])
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
					break;
				case 3:
					for (int m = i - wallDist; m < i + wallDist; m++)
					{
						for (int n = j - wallDist; n < j + wallDist; n++)
						{
							if (Main.tile[m, n].active() && TileID.Sets.Crimson[(int)(*Main.tile[m, n].type)])
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
					break;
				}
			}
			if (!flag)
			{
				return;
			}
			ushort? num6 = null;
			if (WallID.Sets.Conversion.Sandstone[(int)(*Main.tile[num2, num3].wall)])
			{
				switch (num)
				{
				case 1:
					num6 = new ushort?((ushort)220);
					break;
				case 2:
					num6 = new ushort?((ushort)222);
					break;
				case 3:
					num6 = new ushort?((ushort)221);
					break;
				}
			}
			if (WallID.Sets.Conversion.HardenedSand[(int)(*Main.tile[num2, num3].wall)])
			{
				switch (num)
				{
				case 1:
					num6 = new ushort?((ushort)217);
					break;
				case 2:
					num6 = new ushort?((ushort)219);
					break;
				case 3:
					num6 = new ushort?((ushort)218);
					break;
				}
			}
			if (num6 != null && *Main.tile[num2, num3].wall != num6.Value)
			{
				*Main.tile[num2, num3].wall = num6.Value;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
				}
			}
		}

		// Token: 0x0600134E RID: 4942 RVA: 0x00486288 File Offset: 0x00484488
		public unsafe static void PlaceWall(int i, int j, int type, bool mute = false)
		{
			if (i <= 1 || j <= 1 || i >= Main.maxTilesX - 2 || j >= Main.maxTilesY - 2)
			{
				return;
			}
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			if (*Main.tile[i, j].wall == 0)
			{
				*Main.tile[i, j].wall = (ushort)type;
				WorldGen.SquareWallFrame(i, j, true);
				if (!mute)
				{
					SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				}
			}
		}

		// Token: 0x0600134F RID: 4943 RVA: 0x00486330 File Offset: 0x00484530
		public unsafe static void SpreadGrass(int i, int j, int dirt = 0, int grass = 2, bool repeat = true, TileColorCache color = default(TileColorCache))
		{
			try
			{
				if (WorldGen.InWorld(i, j, 10) && Main.tile[i, j].active() && (int)(*Main.tile[i, j].type) == dirt)
				{
					if (WorldGen.gen && (grass == 199 || grass == 23))
					{
						int num = WorldGen.beachDistance;
						if ((!WorldGen.tenthAnniversaryWorldGen && (double)i > (double)Main.maxTilesX * 0.45 && (double)i <= (double)Main.maxTilesX * 0.55) || i < num || i >= Main.maxTilesX - num)
						{
							return;
						}
					}
					else if ((WorldGen.gen || (grass != 199 && grass != 23 && grass != 661 && grass != 662)) && ((int)(*Main.tile[i, j].type) != dirt || !Main.tile[i, j].active() || ((double)j >= Main.worldSurface && dirt == 0)) && !WorldGen.growGrassUnderground)
					{
						return;
					}
					int num2 = i - 1;
					int num3 = i + 2;
					int num4 = j - 1;
					int num5 = j + 2;
					if (num2 < 0)
					{
						num2 = 0;
					}
					if (num3 > Main.maxTilesX)
					{
						num3 = Main.maxTilesX;
					}
					if (num4 < 0)
					{
						num4 = 0;
					}
					if (num5 > Main.maxTilesY)
					{
						num5 = Main.maxTilesY;
					}
					bool flag = true;
					for (int k = num2; k < num3; k++)
					{
						for (int l = num4; l < num5; l++)
						{
							if (!Main.tile[k, l].active() || !Main.tileSolid[(int)(*Main.tile[k, l].type)])
							{
								flag = false;
							}
							if (Main.tile[k, l].lava() && *Main.tile[k, l].liquid > 0)
							{
								flag = true;
								break;
							}
						}
					}
					if (!flag && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[i, j].type)] && ((grass != 23 && grass != 661) || *Main.tile[i, j - 1].type != 27) && ((grass != 199 && grass != 662) || *Main.tile[i, j - 1].type != 27) && (grass != 109 || *Main.tile[i, j - 1].type != 27))
					{
						*Main.tile[i, j].type = (ushort)grass;
						Main.tile[i, j].UseBlockColors(color);
						for (int m = num2; m < num3; m++)
						{
							for (int n = num4; n < num5; n++)
							{
								if (Main.tile[m, n].active() && (int)(*Main.tile[m, n].type) == dirt)
								{
									try
									{
										if (repeat && WorldGen.grassSpread < 1000)
										{
											WorldGen.grassSpread++;
											WorldGen.SpreadGrass(m, n, dirt, grass, true, default(TileColorCache));
											WorldGen.grassSpread--;
										}
									}
									catch
									{
									}
								}
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x06001350 RID: 4944 RVA: 0x004866CC File Offset: 0x004848CC
		public unsafe static void ChasmRunnerSideways(int i, int j, int direction, int steps)
		{
			double num = (double)steps;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(10, 21) * 0.1 * (double)direction;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 10) * 0.01;
			double num2 = (double)(WorldGen.genRand.Next(5) + 7);
			while (num2 > 0.0)
			{
				if (num > 0.0)
				{
					num2 += (double)WorldGen.genRand.Next(3);
					num2 -= (double)WorldGen.genRand.Next(3);
					if (num2 < 7.0)
					{
						num2 = 7.0;
					}
					if (num2 > 20.0)
					{
						num2 = 20.0;
					}
					if (num == 1.0 && num2 < 10.0)
					{
						num2 = 10.0;
					}
				}
				else
				{
					num2 -= (double)WorldGen.genRand.Next(4);
				}
				if (vector2D.Y > Main.rockLayer && num > 0.0)
				{
					num = 0.0;
				}
				num -= 1.0;
				int num3 = (int)(vector2D.X - num2 * 0.5);
				int num4 = (int)(vector2D.X + num2 * 0.5);
				int num5 = (int)(vector2D.Y - num2 * 0.5);
				int num6 = (int)(vector2D.Y + num2 * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int k = num3; k < num4; k++)
				{
					for (int l = num5; l < num6; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num2 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && *Main.tile[k, l].type != 31 && *Main.tile[k, l].type != 22)
						{
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 10) * 0.1;
				if (vector2D.Y < (double)(j - 20))
				{
					vector2D2.Y += (double)WorldGen.genRand.Next(20) * 0.01;
				}
				if (vector2D.Y > (double)(j + 20))
				{
					vector2D2.Y -= (double)WorldGen.genRand.Next(20) * 0.01;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
				if (vector2D2.Y > 0.5)
				{
					vector2D2.Y = 0.5;
				}
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.01;
				if (direction != -1)
				{
					if (direction == 1)
					{
						if (vector2D2.X < 0.5)
						{
							vector2D2.X = 0.5;
						}
						if (vector2D2.X > 2.0)
						{
							vector2D2.X = 2.0;
						}
					}
				}
				else
				{
					if (vector2D2.X > -0.5)
					{
						vector2D2.X = -0.5;
					}
					if (vector2D2.X < -2.0)
					{
						vector2D2.X = -2.0;
					}
				}
				num3 = (int)(vector2D.X - num2 * 1.1);
				num4 = (int)(vector2D.X + num2 * 1.1);
				num5 = (int)(vector2D.Y - num2 * 1.1);
				num6 = (int)(vector2D.Y + num2 * 1.1);
				if (num3 < 1)
				{
					num3 = 1;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				for (int m = num3; m < num4; m++)
				{
					for (int n = num5; n < num6; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < num2 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && *Main.tile[m, n].wall != 3)
						{
							if (*Main.tile[m, n].type != 25 && n > j + WorldGen.genRand.Next(3, 20))
							{
								Main.tile[m, n].active(true);
							}
							Main.tile[m, n].active(true);
							if (*Main.tile[m, n].type != 31 && *Main.tile[m, n].type != 22)
							{
								*Main.tile[m, n].type = 25;
							}
							if (*Main.tile[m, n].wall == 2)
							{
								*Main.tile[m, n].wall = 0;
							}
						}
					}
				}
				for (int num7 = num3; num7 < num4; num7++)
				{
					for (int num8 = num5; num8 < num6; num8++)
					{
						if (Math.Abs((double)num7 - vector2D.X) + Math.Abs((double)num8 - vector2D.Y) < num2 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && *Main.tile[num7, num8].wall != 3)
						{
							if (*Main.tile[num7, num8].type != 31 && *Main.tile[num7, num8].type != 22)
							{
								*Main.tile[num7, num8].type = 25;
							}
							Main.tile[num7, num8].active(true);
							WorldGen.PlaceWall(num7, num8, 3, true);
						}
					}
				}
			}
			if (WorldGen.genRand.Next(3) == 0)
			{
				int num9 = (int)vector2D.X;
				int num10 = (int)vector2D.Y;
				while (!Main.tile[num9, num10].active())
				{
					num10++;
				}
				WorldGen.TileRunner(num9, num10, (double)WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), 22, false, 0.0, 0.0, false, true, -1);
			}
		}

		// Token: 0x06001351 RID: 4945 RVA: 0x00486E94 File Offset: 0x00485094
		public unsafe static void CrimStart(int i, int j)
		{
			int crimDir = 1;
			int k = j;
			if ((double)k > Main.worldSurface)
			{
				k = (int)Main.worldSurface;
			}
			while (!WorldGen.SolidTile(i, k, false))
			{
				k++;
			}
			int num = k;
			Vector2D position;
			position..ctor((double)i, (double)k);
			Vector2D vector2D;
			vector2D..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.1, (double)WorldGen.genRand.Next(20, 201) * 0.01);
			if (vector2D.X < 0.0)
			{
				crimDir = -1;
			}
			double num2 = (double)WorldGen.genRand.Next(15, 26);
			bool flag = true;
			int num3 = 0;
			while (flag)
			{
				num2 += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				if (num2 < 15.0)
				{
					num2 = 15.0;
				}
				if (num2 > 25.0)
				{
					num2 = 25.0;
				}
				int l = (int)(position.X - num2 / 2.0);
				while ((double)l < position.X + num2 / 2.0)
				{
					int m = (int)(position.Y - num2 / 2.0);
					while ((double)m < position.Y + num2 / 2.0)
					{
						if (m > num)
						{
							if (Math.Abs((double)l - position.X) + Math.Abs((double)m - position.Y) < num2 * 0.3)
							{
								Main.tile[l, m].active(false);
								*Main.tile[l, m].wall = 83;
							}
							else if (Math.Abs((double)l - position.X) + Math.Abs((double)m - position.Y) < num2 * 0.8 && *Main.tile[l, m].wall != 83)
							{
								Main.tile[l, m].active(true);
								*Main.tile[l, m].type = 203;
								if (Math.Abs((double)l - position.X) + Math.Abs((double)m - position.Y) < num2 * 0.6)
								{
									*Main.tile[l, m].wall = 83;
								}
							}
						}
						else if (Math.Abs((double)l - position.X) + Math.Abs((double)m - position.Y) < num2 * 0.3 && Main.tile[l, m].active())
						{
							Main.tile[l, m].active(false);
							*Main.tile[l, m].wall = 83;
						}
						m++;
					}
					l++;
				}
				if (position.X > (double)(i + 50))
				{
					num3 = -100;
				}
				if (position.X < (double)(i - 50))
				{
					num3 = 100;
				}
				if (num3 < 0)
				{
					vector2D.X -= (double)WorldGen.genRand.Next(20, 51) * 0.01;
				}
				else if (num3 > 0)
				{
					vector2D.X += (double)WorldGen.genRand.Next(20, 51) * 0.01;
				}
				else
				{
					vector2D.X += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				}
				vector2D.Y += (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				if (vector2D.Y < 0.25)
				{
					vector2D.Y = 0.25;
				}
				if (vector2D.Y > 2.0)
				{
					vector2D.Y = 2.0;
				}
				if (vector2D.X < -2.0)
				{
					vector2D.X = -2.0;
				}
				if (vector2D.X > 2.0)
				{
					vector2D.X = 2.0;
				}
				position += vector2D;
				if (position.Y > Main.worldSurface + 100.0)
				{
					flag = false;
				}
			}
			num2 = (double)WorldGen.genRand.Next(40, 55);
			for (int n = 0; n < 50; n++)
			{
				int num4 = (int)position.X + WorldGen.genRand.Next(-20, 21);
				int num5 = (int)position.Y + WorldGen.genRand.Next(-20, 21);
				int num6 = (int)((double)num4 - num2 / 2.0);
				while ((double)num6 < (double)num4 + num2 / 2.0)
				{
					int num7 = (int)((double)num5 - num2 / 2.0);
					while ((double)num7 < (double)num5 + num2 / 2.0)
					{
						double num34 = (double)Math.Abs(num6 - num4);
						double num8 = (double)Math.Abs(num7 - num5);
						double num9 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.01;
						double num10 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.01;
						double num35 = num34 * num9;
						num8 *= num10;
						double num11 = Math.Sqrt(num35 * num35 + num8 * num8);
						if (num11 < num2 * 0.25)
						{
							Main.tile[num6, num7].active(false);
							*Main.tile[num6, num7].wall = 83;
						}
						else if (num11 < num2 * 0.4 && *Main.tile[num6, num7].wall != 83)
						{
							Main.tile[num6, num7].active(true);
							*Main.tile[num6, num7].type = 203;
							if (num11 < num2 * 0.35)
							{
								*Main.tile[num6, num7].wall = 83;
							}
						}
						num7++;
					}
					num6++;
				}
			}
			int num12 = WorldGen.genRand.Next(5, 9);
			Vector2D[] array = new Vector2D[num12];
			for (int num13 = 0; num13 < num12; num13++)
			{
				int num14 = (int)position.X;
				int num15 = (int)position.Y;
				int num16 = 0;
				bool flag2 = true;
				Vector2D vector2D2;
				vector2D2..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
				while (flag2)
				{
					vector2D2..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
					while (Math.Abs(vector2D2.X) + Math.Abs(vector2D2.Y) < 1.5)
					{
						vector2D2..ctor((double)WorldGen.genRand.Next(-20, 21) * 0.15, (double)WorldGen.genRand.Next(0, 21) * 0.15);
					}
					flag2 = false;
					for (int num17 = 0; num17 < num13; num17++)
					{
						if (vector2D.X > array[num17].X - 0.75 && vector2D.X < array[num17].X + 0.75 && vector2D.Y > array[num17].Y - 0.75 && vector2D.Y < array[num17].Y + 0.75)
						{
							flag2 = true;
							num16++;
							break;
						}
					}
					if (num16 > 10000)
					{
						break;
					}
				}
				array[num13] = vector2D2;
				WorldGen.CrimVein(new Vector2D((double)num14, (double)num15), vector2D2);
			}
			int num18 = Main.maxTilesX;
			int num19 = 0;
			position.X = (double)i;
			position.Y = (double)num;
			num2 = (double)WorldGen.genRand.Next(25, 35);
			double num20 = (double)WorldGen.genRand.Next(0, 6);
			for (int num21 = 0; num21 < 50; num21++)
			{
				if (num20 > 0.0)
				{
					double num22 = (double)WorldGen.genRand.Next(10, 30) * 0.01;
					num20 -= num22;
					position.Y -= num22;
				}
				int num23 = (int)position.X + WorldGen.genRand.Next(-2, 3);
				int num24 = (int)position.Y + WorldGen.genRand.Next(-2, 3);
				int num25 = (int)((double)num23 - num2 / 2.0);
				while ((double)num25 < (double)num23 + num2 / 2.0)
				{
					int num26 = (int)((double)num24 - num2 / 2.0);
					while ((double)num26 < (double)num24 + num2 / 2.0)
					{
						double num36 = (double)Math.Abs(num25 - num23);
						double num27 = (double)Math.Abs(num26 - num24);
						double num28 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.005;
						double num29 = 1.0 + (double)WorldGen.genRand.Next(-20, 21) * 0.005;
						double num37 = num36 * num28;
						num27 *= num29;
						double num30 = Math.Sqrt(num37 * num37 + num27 * num27);
						if (num30 < num2 * 0.2 * ((double)WorldGen.genRand.Next(90, 111) * 0.01))
						{
							Main.tile[num25, num26].active(false);
							*Main.tile[num25, num26].wall = 83;
						}
						else if (num30 < num2 * 0.45)
						{
							if (num25 < num18)
							{
								num18 = num25;
							}
							if (num25 > num19)
							{
								num19 = num25;
							}
							if (*Main.tile[num25, num26].wall != 83)
							{
								Main.tile[num25, num26].active(true);
								*Main.tile[num25, num26].type = 203;
								if (num30 < num2 * 0.35)
								{
									*Main.tile[num25, num26].wall = 83;
								}
							}
						}
						num26++;
					}
					num25++;
				}
			}
			for (int num31 = num18; num31 <= num19; num31++)
			{
				int num32 = num;
				while ((*Main.tile[num31, num32].type == 203 && Main.tile[num31, num32].active()) || *Main.tile[num31, num32].wall == 83)
				{
					num32++;
				}
				int num33 = WorldGen.genRand.Next(15, 20);
				while (!Main.tile[num31, num32].active() && num33 > 0 && *Main.tile[num31, num32].wall != 83)
				{
					num33--;
					*Main.tile[num31, num32].type = 203;
					Main.tile[num31, num32].active(true);
					num32++;
				}
			}
			WorldGen.CrimEnt(position, crimDir);
		}

		// Token: 0x06001352 RID: 4946 RVA: 0x00487AE0 File Offset: 0x00485CE0
		public unsafe static void CrimPlaceHearts()
		{
			for (int i = 0; i < WorldGen.heartCount; i++)
			{
				int num = WorldGen.genRand.Next(16, 21);
				int x = WorldGen.heartPos[i].X;
				int y = WorldGen.heartPos[i].Y;
				for (int j = x - num / 2; j < x + num / 2; j++)
				{
					for (int k = y - num / 2; k < y + num / 2; k++)
					{
						double num5 = (double)Math.Abs(j - x);
						double num2 = (double)Math.Abs(k - y);
						if (Math.Sqrt(num5 * num5 + num2 * num2) < (double)num * 0.4)
						{
							Main.tile[j, k].active(true);
							*Main.tile[j, k].type = 203;
							*Main.tile[j, k].wall = 83;
						}
					}
				}
			}
			for (int l = 0; l < WorldGen.heartCount; l++)
			{
				int num = WorldGen.genRand.Next(10, 14);
				int x2 = WorldGen.heartPos[l].X;
				int y2 = WorldGen.heartPos[l].Y;
				for (int m = x2 - num / 2; m < x2 + num / 2; m++)
				{
					for (int n = y2 - num / 2; n < y2 + num / 2; n++)
					{
						double num6 = (double)Math.Abs(m - x2);
						double num3 = (double)Math.Abs(n - y2);
						if (Math.Sqrt(num6 * num6 + num3 * num3) < (double)num * 0.3)
						{
							Main.tile[m, n].active(false);
							*Main.tile[m, n].wall = 83;
						}
					}
				}
			}
			for (int num4 = 0; num4 < WorldGen.heartCount; num4++)
			{
				WorldGen.AddShadowOrb(WorldGen.heartPos[num4].X, WorldGen.heartPos[num4].Y);
			}
		}

		// Token: 0x06001353 RID: 4947 RVA: 0x00487D1C File Offset: 0x00485F1C
		public unsafe static void CrimEnt(Vector2D position, int crimDir)
		{
			double num = 0.0;
			double num2 = (double)WorldGen.genRand.Next(6, 11);
			bool flag = true;
			Vector2D vector2D;
			vector2D..ctor(2.0, (double)WorldGen.genRand.Next(-20, 0) * 0.01);
			vector2D.X *= (double)(-(double)crimDir);
			while (flag)
			{
				num += 1.0;
				if (num >= 20.0)
				{
					flag = false;
				}
				num2 += (double)WorldGen.genRand.Next(-10, 11) * 0.02;
				if (num2 < 6.0)
				{
					num2 = 6.0;
				}
				if (num2 > 10.0)
				{
					num2 = 10.0;
				}
				int i = (int)(position.X - num2 / 2.0);
				while ((double)i < position.X + num2 / 2.0)
				{
					int j = (int)(position.Y - num2 / 2.0);
					while ((double)j < position.Y + num2 / 2.0)
					{
						double num4 = Math.Abs((double)i - position.X);
						double num3 = Math.Abs((double)j - position.Y);
						if (Math.Sqrt(num4 * num4 + num3 * num3) < num2 * 0.5 && Main.tile[i, j].active() && *Main.tile[i, j].type == 203)
						{
							Main.tile[i, j].active(false);
							flag = true;
							num = 0.0;
						}
						j++;
					}
					i++;
				}
				position += vector2D;
			}
		}

		// Token: 0x06001354 RID: 4948 RVA: 0x00487EFC File Offset: 0x004860FC
		public unsafe static void CrimVein(Vector2D position, Vector2D velocity)
		{
			double num = (double)WorldGen.genRand.Next(15, 26);
			bool flag = true;
			Vector2D vector2D = velocity;
			Vector2D vector2D2 = position;
			int num2 = WorldGen.genRand.Next(100, 150);
			if (velocity.Y < 0.0)
			{
				num2 -= 25;
			}
			while (flag)
			{
				num += (double)WorldGen.genRand.Next(-50, 51) * 0.02;
				if (num < 15.0)
				{
					num = 15.0;
				}
				if (num > 25.0)
				{
					num = 25.0;
				}
				int i = (int)(position.X - num / 2.0);
				while ((double)i < position.X + num / 2.0)
				{
					int j = (int)(position.Y - num / 2.0);
					while ((double)j < position.Y + num / 2.0)
					{
						double num5 = Math.Abs((double)i - position.X);
						double num3 = Math.Abs((double)j - position.Y);
						double num4 = Math.Sqrt(num5 * num5 + num3 * num3);
						if (num4 < num * 0.2)
						{
							Main.tile[i, j].active(false);
							*Main.tile[i, j].wall = 83;
						}
						else if (num4 < num * 0.5 && *Main.tile[i, j].wall != 83)
						{
							Main.tile[i, j].active(true);
							*Main.tile[i, j].type = 203;
							if (num4 < num * 0.4)
							{
								*Main.tile[i, j].wall = 83;
							}
						}
						j++;
					}
					i++;
				}
				velocity.X += (double)WorldGen.genRand.Next(-50, 51) * 0.05;
				velocity.Y += (double)WorldGen.genRand.Next(-50, 51) * 0.05;
				if (velocity.Y < vector2D.Y - 0.75)
				{
					velocity.Y = vector2D.Y - 0.75;
				}
				if (velocity.Y > vector2D.Y + 0.75)
				{
					velocity.Y = vector2D.Y + 0.75;
				}
				if (velocity.X < vector2D.X - 0.75)
				{
					velocity.X = vector2D.X - 0.75;
				}
				if (velocity.X > vector2D.X + 0.75)
				{
					velocity.X = vector2D.X + 0.75;
				}
				position += velocity;
				if (Math.Abs(position.X - vector2D2.X) + Math.Abs(position.Y - vector2D2.Y) > (double)num2)
				{
					flag = false;
				}
			}
			WorldGen.heartPos[WorldGen.heartCount] = position.ToPoint();
			WorldGen.heartCount++;
		}

		// Token: 0x06001355 RID: 4949 RVA: 0x0048826C File Offset: 0x0048646C
		public unsafe static void ChasmRunner(int i, int j, int steps, bool makeOrb = false)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if (!makeOrb)
			{
				flag2 = true;
			}
			double num = (double)steps;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(11) * 0.2 + 0.5;
			int num2 = 5;
			double num3 = (double)(WorldGen.genRand.Next(5) + 7);
			while (num3 > 0.0)
			{
				if (num > 0.0)
				{
					num3 += (double)WorldGen.genRand.Next(3);
					num3 -= (double)WorldGen.genRand.Next(3);
					if (num3 < 7.0)
					{
						num3 = 7.0;
					}
					if (num3 > 20.0)
					{
						num3 = 20.0;
					}
					if (num == 1.0 && num3 < 10.0)
					{
						num3 = 10.0;
					}
				}
				else if (vector2D.Y > Main.worldSurface + 45.0)
				{
					num3 -= (double)WorldGen.genRand.Next(4);
				}
				if (vector2D.Y > Main.rockLayer && num > 0.0)
				{
					num = 0.0;
				}
				num -= 1.0;
				if (!flag && vector2D.Y > Main.worldSurface + 20.0)
				{
					flag = true;
					WorldGen.ChasmRunnerSideways((int)vector2D.X, (int)vector2D.Y, -1, WorldGen.genRand.Next(20, 40));
					WorldGen.ChasmRunnerSideways((int)vector2D.X, (int)vector2D.Y, 1, WorldGen.genRand.Next(20, 40));
				}
				int num4;
				int num5;
				int num6;
				int num7;
				if (num > (double)num2)
				{
					num4 = (int)(vector2D.X - num3 * 0.5);
					num5 = (int)(vector2D.X + num3 * 0.5);
					num6 = (int)(vector2D.Y - num3 * 0.5);
					num7 = (int)(vector2D.Y + num3 * 0.5);
					if (num4 < 0)
					{
						num4 = 0;
					}
					if (num5 > Main.maxTilesX - 1)
					{
						num5 = Main.maxTilesX - 1;
					}
					if (num6 < 0)
					{
						num6 = 0;
					}
					if (num7 > Main.maxTilesY)
					{
						num7 = Main.maxTilesY;
					}
					for (int k = num4; k < num5; k++)
					{
						for (int l = num6; l < num7; l++)
						{
							if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num3 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && *Main.tile[k, l].type != 31 && *Main.tile[k, l].type != 22)
							{
								Main.tile[k, l].active(false);
							}
						}
					}
				}
				if (num <= 2.0 && vector2D.Y < Main.worldSurface + 45.0)
				{
					num = 2.0;
				}
				if (num <= 0.0)
				{
					if (!flag2)
					{
						flag2 = true;
						WorldGen.AddShadowOrb((int)vector2D.X, (int)vector2D.Y);
					}
					else if (!flag3)
					{
						flag3 = false;
						bool flag4 = false;
						int num8 = 0;
						while (!flag4)
						{
							int num9 = WorldGen.genRand.Next((int)vector2D.X - 25, (int)vector2D.X + 25);
							int num10 = WorldGen.genRand.Next((int)vector2D.Y - 50, (int)vector2D.Y);
							if (num9 < 5)
							{
								num9 = 5;
							}
							if (num9 > Main.maxTilesX - 5)
							{
								num9 = Main.maxTilesX - 5;
							}
							if (num10 < 5)
							{
								num10 = 5;
							}
							if (num10 > Main.maxTilesY - 5)
							{
								num10 = Main.maxTilesY - 5;
							}
							if ((double)num10 > Main.worldSurface)
							{
								if (!WorldGen.IsTileNearby(num9, num10, 26, 3))
								{
									WorldGen.Place3x2(num9, num10, 26, 0);
								}
								if (*Main.tile[num9, num10].type == 26)
								{
									flag4 = true;
								}
								else
								{
									num8++;
									if (num8 >= 10000)
									{
										flag4 = true;
									}
								}
							}
							else
							{
								flag4 = true;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.01;
				if (vector2D2.X > 0.3)
				{
					vector2D2.X = 0.3;
				}
				if (vector2D2.X < -0.3)
				{
					vector2D2.X = -0.3;
				}
				num4 = (int)(vector2D.X - num3 * 1.1);
				num5 = (int)(vector2D.X + num3 * 1.1);
				num6 = (int)(vector2D.Y - num3 * 1.1);
				num7 = (int)(vector2D.Y + num3 * 1.1);
				if (num4 < 1)
				{
					num4 = 1;
				}
				if (num5 > Main.maxTilesX - 1)
				{
					num5 = Main.maxTilesX - 1;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				for (int m = num4; m < num5; m++)
				{
					for (int n = num6; n < num7; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < num3 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (*Main.tile[m, n].type != 25 && n > j + WorldGen.genRand.Next(3, 20))
							{
								Main.tile[m, n].active(true);
							}
							if (steps <= num2)
							{
								Main.tile[m, n].active(true);
							}
							if (*Main.tile[m, n].type != 31)
							{
								*Main.tile[m, n].type = 25;
							}
						}
					}
				}
				for (int num11 = num4; num11 < num5; num11++)
				{
					for (int num12 = num6; num12 < num7; num12++)
					{
						if (Math.Abs((double)num11 - vector2D.X) + Math.Abs((double)num12 - vector2D.Y) < num3 * 1.1 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (*Main.tile[num11, num12].type != 31)
							{
								*Main.tile[num11, num12].type = 25;
							}
							if (steps <= num2)
							{
								Main.tile[num11, num12].active(true);
							}
							if (num12 > j + WorldGen.genRand.Next(3, 20))
							{
								*Main.tile[num11, num12].wall = 3;
							}
						}
					}
				}
			}
		}

		// Token: 0x06001356 RID: 4950 RVA: 0x00488A38 File Offset: 0x00486C38
		public static void SpawnPlanteraThorns(Vector2 position)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			int num = Main.rand.Next(3, 6);
			for (int i = 0; i < num; i++)
			{
				int num2 = Main.rand.Next(15, 31);
				int num3 = (int)(position.X / 16f);
				int num4 = (int)(position.Y / 16f);
				int num5 = 0;
				int num6 = 0;
				if (Main.rand.Next(2) != 0)
				{
					num6 = ((Main.rand.Next(2) == 0) ? 1 : -1);
				}
				else
				{
					num5 = ((Main.rand.Next(2) == 0) ? 1 : -1);
				}
				while (num2 > 0)
				{
					num2--;
					if (!Main.tile[num3, num4].active())
					{
						WorldGen.PlaceTile(num3, num4, 655, false, false, -1, 0);
						if (Main.tile[num3, num4].active() && Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, num3, num4, TileChangeType.None);
						}
					}
					num3 += num5;
					num4 += num6;
					if (!WorldGen.InWorld(num3, num4, 0))
					{
						return;
					}
					if (Main.rand.Next(5) == 0)
					{
						if (num6 == 0)
						{
							num5 = 0;
							num6 = ((Main.rand.Next(2) == 0) ? 1 : -1);
						}
						else
						{
							num6 = 0;
							num5 = ((Main.rand.Next(2) == 0) ? 1 : -1);
						}
					}
				}
			}
		}

		// Token: 0x06001357 RID: 4951 RVA: 0x00488B94 File Offset: 0x00486D94
		public unsafe static void GERunner(int i, int j, double speedX = 0.0, double speedY = 0.0, bool good = true)
		{
			int num = 0;
			for (int k = 20; k < Main.maxTilesX - 20; k++)
			{
				for (int l = 20; l < Main.maxTilesY - 20; l++)
				{
					if (Main.tile[k, l].active() && *Main.tile[k, l].type == 225)
					{
						num++;
					}
				}
			}
			bool flag = false;
			if (num > 200000)
			{
				flag = true;
			}
			int num2 = WorldGen.genRand.Next(200, 250);
			double num3 = (double)Main.maxTilesX / 4200.0;
			num2 = (int)((double)num2 * num3);
			double num4 = (double)num2;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			if (speedX != 0.0 || speedY != 0.0)
			{
				vector2D2.X = speedX;
				vector2D2.Y = speedY;
			}
			bool flag2 = true;
			while (flag2)
			{
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY - 5)
				{
					num8 = Main.maxTilesY - 5;
				}
				for (int m = num5; m < num6; m++)
				{
					for (int n = num7; n < num8; n++)
					{
						if (Math.Abs((double)m - vector2D.X) + Math.Abs((double)n - vector2D.Y) < (double)num2 * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							bool convertWall = WallLoader.Convert(m, n, good ? 2 : (WorldGen.crimson ? 4 : 1));
							bool convertTile = TileLoader.Convert(m, n, good ? 2 : (WorldGen.crimson ? 4 : 1));
							if (good)
							{
								if (convertWall)
								{
									if (*Main.tile[m, n].wall == 63 || *Main.tile[m, n].wall == 65 || *Main.tile[m, n].wall == 66 || *Main.tile[m, n].wall == 68 || *Main.tile[m, n].wall == 69 || *Main.tile[m, n].wall == 81)
									{
										*Main.tile[m, n].wall = 70;
									}
									else if (*Main.tile[m, n].wall == 216)
									{
										*Main.tile[m, n].wall = 219;
									}
									else if (*Main.tile[m, n].wall == 187)
									{
										*Main.tile[m, n].wall = 222;
									}
									else if (*Main.tile[m, n].wall == 3 || *Main.tile[m, n].wall == 83)
									{
										*Main.tile[m, n].wall = 28;
									}
								}
								if (convertTile)
								{
									if (flag && *Main.tile[m, n].type == 225)
									{
										*Main.tile[m, n].type = 117;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (flag && *Main.tile[m, n].type == 230)
									{
										*Main.tile[m, n].type = 402;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 2)
									{
										*Main.tile[m, n].type = 109;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 1 || *Main.tile[m, n].type == 25 || *Main.tile[m, n].type == 203)
									{
										*Main.tile[m, n].type = 117;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 53 || *Main.tile[m, n].type == 123 || *Main.tile[m, n].type == 112 || *Main.tile[m, n].type == 234)
									{
										*Main.tile[m, n].type = 116;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 661 || *Main.tile[m, n].type == 662)
									{
										*Main.tile[m, n].type = 60;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 23 || *Main.tile[m, n].type == 199)
									{
										*Main.tile[m, n].type = 109;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 161 || *Main.tile[m, n].type == 163 || *Main.tile[m, n].type == 200)
									{
										*Main.tile[m, n].type = 164;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 396)
									{
										*Main.tile[m, n].type = 403;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 397)
									{
										*Main.tile[m, n].type = 402;
										WorldGen.SquareTileFrame(m, n, true);
									}
								}
							}
							else if (WorldGen.crimson)
							{
								if (convertWall)
								{
									if (*Main.tile[m, n].wall == 63 || *Main.tile[m, n].wall == 65 || *Main.tile[m, n].wall == 66 || *Main.tile[m, n].wall == 68)
									{
										*Main.tile[m, n].wall = 81;
									}
									else if (*Main.tile[m, n].wall == 216)
									{
										*Main.tile[m, n].wall = 218;
									}
									else if (*Main.tile[m, n].wall == 187)
									{
										*Main.tile[m, n].wall = 221;
									}
								}
								if (convertTile)
								{
									if (flag && *Main.tile[m, n].type == 225)
									{
										*Main.tile[m, n].type = 203;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (flag && *Main.tile[m, n].type == 230)
									{
										*Main.tile[m, n].type = 399;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 60 || *Main.tile[m, n].type == 661)
									{
										*Main.tile[m, n].type = 662;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 2 || *Main.tile[m, n].type == 109)
									{
										*Main.tile[m, n].type = 199;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 1 || *Main.tile[m, n].type == 117)
									{
										*Main.tile[m, n].type = 203;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 53 || *Main.tile[m, n].type == 123 || *Main.tile[m, n].type == 116)
									{
										*Main.tile[m, n].type = 234;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 161 || *Main.tile[m, n].type == 164)
									{
										*Main.tile[m, n].type = 200;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 396)
									{
										*Main.tile[m, n].type = 401;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 397)
									{
										*Main.tile[m, n].type = 399;
										WorldGen.SquareTileFrame(m, n, true);
									}
								}
							}
							else
							{
								if (convertWall)
								{
									if (*Main.tile[m, n].wall == 63 || *Main.tile[m, n].wall == 65 || *Main.tile[m, n].wall == 66 || *Main.tile[m, n].wall == 68)
									{
										*Main.tile[m, n].wall = 69;
									}
									else if (*Main.tile[m, n].wall == 216)
									{
										*Main.tile[m, n].wall = 217;
									}
									else if (*Main.tile[m, n].wall == 187)
									{
										*Main.tile[m, n].wall = 220;
									}
								}
								if (convertTile)
								{
									if (flag && *Main.tile[m, n].type == 225)
									{
										*Main.tile[m, n].type = 25;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (flag && *Main.tile[m, n].type == 230)
									{
										*Main.tile[m, n].type = 398;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 60 || *Main.tile[m, n].type == 662)
									{
										*Main.tile[m, n].type = 661;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 2 || *Main.tile[m, n].type == 109)
									{
										*Main.tile[m, n].type = 23;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 1 || *Main.tile[m, n].type == 117)
									{
										*Main.tile[m, n].type = 25;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 53 || *Main.tile[m, n].type == 123 || *Main.tile[m, n].type == 116)
									{
										*Main.tile[m, n].type = 112;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 161 || *Main.tile[m, n].type == 164)
									{
										*Main.tile[m, n].type = 163;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 396)
									{
										*Main.tile[m, n].type = 400;
										WorldGen.SquareTileFrame(m, n, true);
									}
									else if (*Main.tile[m, n].type == 397)
									{
										*Main.tile[m, n].type = 398;
										WorldGen.SquareTileFrame(m, n, true);
									}
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > speedX + 1.0)
				{
					vector2D2.X = speedX + 1.0;
				}
				if (vector2D2.X < speedX - 1.0)
				{
					vector2D2.X = speedX - 1.0;
				}
				if (vector2D.X < (double)(-(double)num2) || vector2D.Y < (double)(-(double)num2) || vector2D.X > (double)(Main.maxTilesX + num2) || vector2D.Y > (double)(Main.maxTilesY + num2))
				{
					flag2 = false;
				}
			}
		}

		// Token: 0x06001358 RID: 4952 RVA: 0x00489D34 File Offset: 0x00487F34
		private unsafe static bool badOceanCaveTiles(int x, int y)
		{
			return *Main.tile[x, y].wall == 83 || *Main.tile[x, y].wall == 3 || Main.wallDungeon[(int)(*Main.tile[x, y].wall)] || *Main.tile[x, y].type == 203 || *Main.tile[x, y].type == 25 || Main.tileDungeon[(int)(*Main.tile[x, y].type)] || *Main.tile[x, y].type == 26 || *Main.tile[x, y].type == 31;
		}

		// Token: 0x06001359 RID: 4953 RVA: 0x00489E20 File Offset: 0x00488020
		public unsafe static void oceanCave(int i, int j)
		{
			if (GenVars.numOceanCaveTreasure >= GenVars.maxOceanCaveTreasure)
			{
				GenVars.numOceanCaveTreasure = 0;
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			if (i < Main.maxTilesX / 2)
			{
				vector2D2.X = 0.25 + WorldGen.genRand.NextDouble() * 0.25;
			}
			else
			{
				vector2D2.X = -0.35 - WorldGen.genRand.NextDouble() * 0.5;
			}
			vector2D2.Y = 0.4 + WorldGen.genRand.NextDouble() * 0.25;
			ushort num = 264;
			ushort num2 = 53;
			ushort num3 = 397;
			double num4 = (double)WorldGen.genRand.Next(17, 25);
			double num5 = (double)WorldGen.genRand.Next(600, 800);
			double num6 = 4.0;
			bool flag = true;
			while (num4 > num6 && num5 > 0.0)
			{
				bool flag2 = true;
				bool flag3 = true;
				bool flag4 = true;
				if (vector2D.X > (double)(WorldGen.beachDistance - 50) && vector2D.X < (double)(Main.maxTilesX - WorldGen.beachDistance + 50))
				{
					num4 *= 0.96;
					num5 *= 0.96;
				}
				if (num4 < num6 + 2.0 || num5 < 20.0)
				{
					flag4 = false;
				}
				if (flag)
				{
					num4 -= 0.01 + WorldGen.genRand.NextDouble() * 0.01;
					num5 -= 0.5;
				}
				else
				{
					num4 -= 0.02 + WorldGen.genRand.NextDouble() * 0.02;
					num5 -= 1.0;
				}
				if (flag4)
				{
					GenVars.oceanCaveTreasure[GenVars.numOceanCaveTreasure].X = (int)vector2D.X;
					GenVars.oceanCaveTreasure[GenVars.numOceanCaveTreasure].Y = (int)vector2D.Y;
				}
				int num7 = (int)(vector2D.X - num4 * 3.0);
				int num8 = (int)(vector2D.X + num4 * 3.0);
				int num9 = (int)(vector2D.Y - num4 * 3.0);
				int num10 = (int)(vector2D.Y + num4 * 3.0);
				if (num7 < 1)
				{
					num7 = 1;
				}
				if (num8 > Main.maxTilesX - 1)
				{
					num8 = Main.maxTilesX - 1;
				}
				if (num9 < 1)
				{
					num9 = 1;
				}
				if (num10 > Main.maxTilesY - 1)
				{
					num10 = Main.maxTilesY - 1;
				}
				for (int k = num7; k < num8; k++)
				{
					for (int l = num9; l < num10; l++)
					{
						if (!WorldGen.badOceanCaveTiles(k, l))
						{
							double num11 = new Vector2D(Math.Abs((double)k - vector2D.X), Math.Abs((double)l - vector2D.Y)).Length();
							if (flag4 && num11 < num4 * 0.5 + 1.0)
							{
								*Main.tile[k, l].type = num;
								Main.tile[k, l].active(false);
							}
							else if (num11 < num4 * 1.5 + 1.0 && *Main.tile[k, l].type != num)
							{
								if ((double)l < vector2D.Y)
								{
									if ((vector2D2.X < 0.0 && (double)k < vector2D.X) || (vector2D2.X > 0.0 && (double)k > vector2D.X))
									{
										if (num11 < num4 * 1.1 + 1.0)
										{
											*Main.tile[k, l].type = num3;
											if (*Main.tile[k, l].liquid == 255)
											{
												*Main.tile[k, l].wall = 0;
											}
										}
										else if (*Main.tile[k, l].type != num3)
										{
											*Main.tile[k, l].type = num2;
										}
									}
								}
								else if ((vector2D2.X < 0.0 && k < i) || (vector2D2.X > 0.0 && k > i))
								{
									if (*Main.tile[k, l].liquid == 255)
									{
										*Main.tile[k, l].wall = 0;
									}
									*Main.tile[k, l].type = num2;
									Main.tile[k, l].active(true);
									if (k == (int)vector2D.X && flag2)
									{
										flag2 = false;
										int num12 = 50 + WorldGen.genRand.Next(3);
										int num13 = 43 + WorldGen.genRand.Next(3);
										int num14 = 20 + WorldGen.genRand.Next(3);
										int num15 = k;
										int num16 = k + num14;
										if (vector2D2.X < 0.0)
										{
											num15 = k - num14;
											num16 = k;
										}
										if (num5 < 100.0)
										{
											num12 = (int)((double)num12 * (num5 / 100.0));
											num13 = (int)((double)num13 * (num5 / 100.0));
											num14 = (int)((double)num14 * (num5 / 100.0));
										}
										if (num4 < num6 + 5.0)
										{
											double num17 = (num4 - num6) / 5.0;
											num12 = (int)((double)num12 * num17);
											num13 = (int)((double)num13 * num17);
											num14 = (int)((double)num14 * num17);
										}
										for (int m = num15; m <= num16; m++)
										{
											int n = l;
											while (n < l + num12 && !WorldGen.badOceanCaveTiles(m, n))
											{
												if (n > l + num13)
												{
													if (WorldGen.SolidTile(m, n, false) && *Main.tile[m, n].type != num2)
													{
														break;
													}
													*Main.tile[m, n].type = num3;
												}
												else
												{
													*Main.tile[m, n].type = num2;
												}
												Main.tile[m, n].active(true);
												if (WorldGen.genRand.Next(3) == 0)
												{
													*Main.tile[m - 1, n].type = num2;
													Main.tile[m - 1, n].active(true);
												}
												if (WorldGen.genRand.Next(3) == 0)
												{
													*Main.tile[m + 1, n].type = num2;
													Main.tile[m + 1, n].active(true);
												}
												n++;
											}
										}
									}
								}
							}
							if (num11 < num4 * 1.3 + 1.0 && l > j - 10)
							{
								*Main.tile[k, l].liquid = byte.MaxValue;
							}
							if (flag3 && k == (int)vector2D.X && (double)l > vector2D.Y)
							{
								flag3 = false;
								int num18 = 100;
								int num19 = 2;
								for (int num20 = k - num19; num20 <= k + num19; num20++)
								{
									for (int num21 = l; num21 < l + num18; num21++)
									{
										if (!WorldGen.badOceanCaveTiles(num20, num21))
										{
											*Main.tile[num20, num21].liquid = byte.MaxValue;
										}
									}
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += WorldGen.genRand.NextDouble() * 0.1 - 0.05;
				vector2D2.Y += WorldGen.genRand.NextDouble() * 0.1 - 0.05;
				if (flag)
				{
					if (vector2D.Y > (Main.worldSurface * 2.0 + Main.rockLayer) / 3.0 && vector2D.Y > (double)(j + 30))
					{
						flag = false;
					}
					vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, 0.35, 1.0);
				}
				else
				{
					if (vector2D.X < (double)(Main.maxTilesX / 2))
					{
						if (vector2D2.X < 0.5)
						{
							vector2D2.X += 0.02;
						}
					}
					else if (vector2D2.X > -0.5)
					{
						vector2D2.X -= 0.02;
					}
					if (!flag4)
					{
						if (vector2D2.Y < 0.0)
						{
							vector2D2.Y *= 0.95;
						}
						vector2D2.Y += 0.04;
					}
					else if (vector2D.Y < (Main.worldSurface * 4.0 + Main.rockLayer) / 5.0)
					{
						if (vector2D2.Y < 0.0)
						{
							vector2D2.Y *= 0.97;
						}
						vector2D2.Y += 0.02;
					}
					else if (vector2D2.Y > -0.1)
					{
						vector2D2.Y *= 0.99;
						vector2D2.Y -= 0.01;
					}
					vector2D2.Y = Utils.Clamp<double>(vector2D2.Y, -1.0, 1.0);
				}
				if (vector2D.X < (double)(Main.maxTilesX / 2))
				{
					vector2D2.X = Utils.Clamp<double>(vector2D2.X, 0.1, 1.0);
				}
				else
				{
					vector2D2.X = Utils.Clamp<double>(vector2D2.X, -1.0, -0.1);
				}
			}
			GenVars.numOceanCaveTreasure++;
		}

		// Token: 0x0600135A RID: 4954 RVA: 0x0048A8DC File Offset: 0x00488ADC
		public static void WavyCaverer(int startX, int startY, double waveStrengthScalar, double wavePercentScalar, int steps, int type)
		{
			Vector2D vector2D;
			vector2D..ctor((double)startX, (double)startY);
			bool flag = startX > Main.maxTilesX / 2;
			int num = 2 + WorldGen.genRand.Next(2);
			int num2 = 15 + WorldGen.genRand.Next(11);
			int num3 = 1 + WorldGen.genRand.Next(2);
			int num4 = (int)Math.Ceiling((double)num2 / (double)num3);
			double num5 = 1.0;
			double num6 = 1.0;
			int num7 = (int)(-1.0 + WorldGen.genRand.NextDouble() * 3.0);
			int num8 = num;
			int num9 = 0;
			for (int i = 0; i < steps; i++)
			{
				bool flag2 = i < num4;
				bool flag3 = i >= steps - num4;
				vector2D.X += (double)((!flag) ? 1 : -1);
				if (!flag2 && !flag3)
				{
					num9++;
					num5 = Math.Min(2.0, Math.Max(0.5, num5 + (-0.5 + WorldGen.genRand.NextDouble()) * 0.25));
					num6 = Math.Min(1.1, Math.Max(0.9, num6 + (-0.5 + WorldGen.genRand.NextDouble()) * 0.02));
				}
				double num10 = Math.Sin((double)num9 * 0.1 * num6 * wavePercentScalar) * num5 * waveStrengthScalar;
				vector2D.Y = (double)startY + num10 + (double)(num9 * num7);
				int num11 = num8;
				if (flag2)
				{
					num8 = Math.Min(num2, num8 + num3);
				}
				else if (flag3)
				{
					num8 = Math.Max(num, num8 - num3);
				}
				vector2D.Y -= (double)((num11 + num8) / 4);
				for (int j = 0; j < num8; j++)
				{
					int num12 = (int)vector2D.X;
					int num13 = (int)vector2D.Y + j;
					if (WorldGen.InWorld(num12, num13, 20))
					{
						if (type >= 0)
						{
							WorldGen.PlaceTile(num12, num13, type, true, true, -1, 0);
						}
						else
						{
							WorldGen.KillTile(num12, num13, false, false, false);
						}
					}
				}
			}
		}

		/// <summary>
		/// Places small splotches of the specified tile starting at the designated coordinates. This should only be used early in world generation code. <see cref="M:Terraria.WorldGen.OreRunner(System.Int32,System.Int32,System.Double,System.Int32,System.UInt16)" /> is a safer version that can be used anytime without corrupting tiles.
		/// <para /> More detailed information and a video guide can be found on the <see href="https://github.com/tModLoader/tModLoader/wiki/World-Generation#terrariaworldgen-public-static-void-tilerunnerint-i-int-j-double-strength-int-steps-int-type-bool-addtile--false-float-speedx--0f-float-speedy--0f-bool-noychange--false-bool-override--true">World Generation wiki page</see>
		/// </summary>
		// Token: 0x0600135B RID: 4955 RVA: 0x0048AB0C File Offset: 0x00488D0C
		public unsafe static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, double speedX = 0.0, double speedY = 0.0, bool noYChange = false, bool overRide = true, int ignoreTileType = -1)
		{
			if (!GenVars.mudWall)
			{
				if (WorldGen.drunkWorldGen)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.01;
					steps = (int)((double)steps * (1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.01));
				}
				else if (WorldGen.remixWorldGen)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				}
				else if (WorldGen.getGoodWorldGen && type != 57)
				{
					strength *= 1.0 + (double)WorldGen.genRand.Next(-80, 81) * 0.015;
					steps += WorldGen.genRand.Next(3);
				}
			}
			double num = strength;
			double num2 = (double)steps;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			if (speedX != 0.0 || speedY != 0.0)
			{
				vector2D2.X = speedX;
				vector2D2.Y = speedY;
			}
			bool flag = type == 368;
			bool flag2 = type == 367;
			bool lava = false;
			if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(4) == 0)
			{
				lava = true;
			}
			while (num > 0.0 && num2 > 0.0)
			{
				if (WorldGen.drunkWorldGen && WorldGen.genRand.Next(30) == 0)
				{
					vector2D.X += (double)WorldGen.genRand.Next(-100, 101) * 0.05;
					vector2D.Y += (double)WorldGen.genRand.Next(-100, 101) * 0.05;
				}
				if (vector2D.Y < 0.0 && num2 > 0.0 && type == 59)
				{
					num2 = 0.0;
				}
				num = strength * (num2 / (double)steps);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 1)
				{
					num3 = 1;
				}
				if (num4 > Main.maxTilesX - 1)
				{
					num4 = Main.maxTilesX - 1;
				}
				if (num5 < 1)
				{
					num5 = 1;
				}
				if (num6 > Main.maxTilesY - 1)
				{
					num6 = Main.maxTilesY - 1;
				}
				for (int k = num3; k < num4; k++)
				{
					if (k < WorldGen.beachDistance + 50 || k >= Main.maxTilesX - WorldGen.beachDistance - 50)
					{
						lava = false;
					}
					for (int l = num5; l < num6; l++)
					{
						if ((!WorldGen.drunkWorldGen || l >= Main.maxTilesY - 300 || type != 57) && (ignoreTileType < 0 || !Main.tile[k, l].active() || (int)(*Main.tile[k, l].type) != ignoreTileType) && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015))
						{
							if (GenVars.mudWall && (double)l > Main.worldSurface && *Main.tile[k, l - 1].wall != 2 && l < Main.maxTilesY - 210 - WorldGen.genRand.Next(3) && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.45 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
							{
								if (l > GenVars.lavaLine - WorldGen.genRand.Next(0, 4) - 50)
								{
									if (*Main.tile[k, l - 1].wall != 64 && *Main.tile[k, l + 1].wall != 64 && *Main.tile[k - 1, l].wall != 64 && *Main.tile[k + 1, l].wall != 64)
									{
										WorldGen.PlaceWall(k, l, 15, true);
									}
								}
								else if (*Main.tile[k, l - 1].wall != 15 && *Main.tile[k, l + 1].wall != 15 && *Main.tile[k - 1, l].wall != 15 && *Main.tile[k + 1, l].wall != 15)
								{
									WorldGen.PlaceWall(k, l, 64, true);
								}
							}
							if (type < 0)
							{
								if (*Main.tile[k, l].type != 53)
								{
									if (type == -2 && Main.tile[k, l].active() && (l < GenVars.waterLine || l > GenVars.lavaLine))
									{
										*Main.tile[k, l].liquid = byte.MaxValue;
										Main.tile[k, l].lava(lava);
										if (WorldGen.remixWorldGen)
										{
											if (l > GenVars.lavaLine && ((double)l < Main.rockLayer - 80.0 || l > Main.maxTilesY - 350) && !WorldGen.oceanDepths(k, l))
											{
												Main.tile[k, l].lava(true);
											}
										}
										else if (l > GenVars.lavaLine)
										{
											Main.tile[k, l].lava(true);
										}
									}
									Main.tile[k, l].active(false);
								}
							}
							else
							{
								if (flag && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.3 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
								{
									WorldGen.PlaceWall(k, l, 180, true);
								}
								if (flag2 && Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < strength * 0.3 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.01))
								{
									WorldGen.PlaceWall(k, l, 178, true);
								}
								if (overRide || !Main.tile[k, l].active())
								{
									Tile tile = Main.tile[k, l];
									bool flag3 = Main.tileStone[type] && *tile.type != 1;
									if (!TileID.Sets.CanBeClearedDuringGeneration[(int)(*tile.type)])
									{
										flag3 = true;
									}
									ushort num7 = *tile.type;
									if (num7 <= 147)
									{
										if (num7 <= 45)
										{
											if (num7 != 1)
											{
												if (num7 == 45)
												{
													goto IL_8A5;
												}
											}
											else if (type == 59 && (double)l < Main.worldSurface + (double)WorldGen.genRand.Next(-50, 50))
											{
												flag3 = true;
											}
										}
										else if (num7 != 53)
										{
											if (num7 == 147)
											{
												goto IL_8A5;
											}
										}
										else
										{
											if (type == 59 && GenVars.UndergroundDesertLocation.Contains(k, l))
											{
												flag3 = true;
											}
											if (type == 40)
											{
												flag3 = true;
											}
											if ((double)l < Main.worldSurface && type != 59)
											{
												flag3 = true;
											}
										}
									}
									else if (num7 <= 196)
									{
										if (num7 - 189 <= 1 || num7 == 196)
										{
											goto IL_8A5;
										}
									}
									else if (num7 - 367 > 1)
									{
										if (num7 - 396 > 1)
										{
											if (num7 == 460)
											{
												goto IL_8A5;
											}
										}
										else
										{
											flag3 = !TileID.Sets.Ore[type];
										}
									}
									else if (type == 59)
									{
										flag3 = true;
									}
									IL_8E7:
									if (!flag3)
									{
										*tile.type = (ushort)type;
										goto IL_8F6;
									}
									goto IL_8F6;
									IL_8A5:
									flag3 = true;
									goto IL_8E7;
								}
								IL_8F6:
								if (addTile)
								{
									Main.tile[k, l].active(true);
									*Main.tile[k, l].liquid = 0;
									Main.tile[k, l].lava(false);
								}
								if (noYChange && (double)l < Main.worldSurface && type != 59)
								{
									*Main.tile[k, l].wall = 2;
								}
								if (type == 59 && l > GenVars.waterLine && *Main.tile[k, l].liquid > 0)
								{
									Main.tile[k, l].lava(false);
									*Main.tile[k, l].liquid = 0;
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				if ((!WorldGen.drunkWorldGen || WorldGen.genRand.Next(3) != 0) && num > 50.0)
				{
					vector2D += vector2D2;
					num2 -= 1.0;
					vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					if (num > 100.0)
					{
						vector2D += vector2D2;
						num2 -= 1.0;
						vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
						vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
						if (num > 150.0)
						{
							vector2D += vector2D2;
							num2 -= 1.0;
							vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
							vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
							if (num > 200.0)
							{
								vector2D += vector2D2;
								num2 -= 1.0;
								vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
								vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
								if (num > 250.0)
								{
									vector2D += vector2D2;
									num2 -= 1.0;
									vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
									vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
									if (num > 300.0)
									{
										vector2D += vector2D2;
										num2 -= 1.0;
										vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
										vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
										if (num > 400.0)
										{
											vector2D += vector2D2;
											num2 -= 1.0;
											vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
											vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
											if (num > 500.0)
											{
												vector2D += vector2D2;
												num2 -= 1.0;
												vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
												vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
												if (num > 600.0)
												{
													vector2D += vector2D2;
													num2 -= 1.0;
													vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
													vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
													if (num > 700.0)
													{
														vector2D += vector2D2;
														num2 -= 1.0;
														vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
														vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
														if (num > 800.0)
														{
															vector2D += vector2D2;
															num2 -= 1.0;
															vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															if (num > 900.0)
															{
																vector2D += vector2D2;
																num2 -= 1.0;
																vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
																vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (WorldGen.drunkWorldGen)
				{
					vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.25;
				}
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (!noYChange)
				{
					vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
					if (vector2D2.Y > 1.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D2.Y < -1.0)
					{
						vector2D2.Y = -1.0;
					}
				}
				else if (type != 59 && num < 3.0)
				{
					if (vector2D2.Y > 1.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D2.Y < -1.0)
					{
						vector2D2.Y = -1.0;
					}
				}
				if (type == 59 && !noYChange)
				{
					if (vector2D2.Y > 0.5)
					{
						vector2D2.Y = 0.5;
					}
					if (vector2D2.Y < -0.5)
					{
						vector2D2.Y = -0.5;
					}
					if (vector2D.Y < Main.rockLayer + 100.0)
					{
						vector2D2.Y = 1.0;
					}
					if (vector2D.Y > (double)(Main.maxTilesY - 300))
					{
						vector2D2.Y = -1.0;
					}
				}
			}
		}

		// Token: 0x0600135C RID: 4956 RVA: 0x0048BC2C File Offset: 0x00489E2C
		public unsafe static void DirtyRockRunner(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(2, 6);
			double num2 = (double)WorldGen.genRand.Next(5, 50);
			double num3 = num2;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				double num4 = num * (num3 / num2);
				num3 -= 1.0;
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && *Main.tile[k, l].wall == 2)
						{
							*Main.tile[k, l].wall = 59;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				if (vector2D2.Y < -1.0)
				{
					vector2D2.Y = -1.0;
				}
			}
		}

		// Token: 0x0600135D RID: 4957 RVA: 0x0048BF04 File Offset: 0x0048A104
		public unsafe static void MudWallRunner(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(8, 21);
			double num2 = (double)WorldGen.genRand.Next(8, 33);
			double num3 = num2;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				double num4 = num * (num3 / num2);
				num3 -= 1.0;
				int num5 = (int)(vector2D.X - num4 * 0.5);
				int num6 = (int)(vector2D.X + num4 * 0.5);
				int num7 = (int)(vector2D.Y - num4 * 0.5);
				int num8 = (int)(vector2D.Y + num4 * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						if (Math.Abs((double)k - vector2D.X) + Math.Abs((double)l - vector2D.Y) < num * 0.5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.015) && (double)l > Main.worldSurface)
						{
							*Main.tile[k, l].wall = 0;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				if (vector2D2.Y < -1.0)
				{
					vector2D2.Y = -1.0;
				}
			}
		}

		// Token: 0x0600135E RID: 4958 RVA: 0x0048C1C4 File Offset: 0x0048A3C4
		public unsafe static void SnowCloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num53 = Math.Abs((double)k - vector2D.X);
							double num13 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num53 * num53 + num13 * num13) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								*Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num14 = num3;
			int num16;
			for (num14 += WorldGen.genRand.Next(5); num14 < num4; num14 += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[num14, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 460;
				}
				for (int m = num14 - num16; m <= num14 + num16; m++)
				{
					for (int n = num15 - num16; n <= num15 + num16; n++)
					{
						if (n > num5)
						{
							double num54 = (double)Math.Abs(m - num14);
							double num18 = (double)(Math.Abs(n - num15) * 2);
							if (Math.Sqrt(num54 * num54 + num18 * num18) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[m, n].active(true);
								*Main.tile[m, n].type = (ushort)num17;
								WorldGen.SquareTileFrame(m, n, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num19 = (int)(vector2D.X - num * 0.5);
				int num20 = (int)(vector2D.X + num * 0.5);
				int num21 = num5 - 1;
				int num22 = (int)(vector2D.Y + num * 0.5);
				if (num19 < 0)
				{
					num19 = 0;
				}
				if (num20 > Main.maxTilesX)
				{
					num20 = Main.maxTilesX;
				}
				if (num21 < 0)
				{
					num21 = 0;
				}
				if (num22 > Main.maxTilesY)
				{
					num22 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num23 = vector2D.Y + 1.0;
				for (int num24 = num19; num24 < num20; num24++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num23 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num23 < vector2D.Y)
					{
						num23 = vector2D.Y;
					}
					if (num23 > vector2D.Y + 2.0)
					{
						num23 = vector2D.Y + 2.0;
					}
					for (int num25 = num21; num25 < num22; num25++)
					{
						if ((double)num25 > num23)
						{
							double num55 = Math.Abs((double)num24 - vector2D.X);
							double num26 = Math.Abs((double)num25 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num55 * num55 + num26 * num26) < num11 * 0.4 && *Main.tile[num24, num25].type == 189)
							{
								*Main.tile[num24, num25].type = 147;
								WorldGen.SquareTileFrame(num24, num25, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num27 = num3;
			num27 += WorldGen.genRand.Next(5);
			while (num27 < num4)
			{
				int num28 = num6;
				while ((!Main.tile[num27, num28].active() || *Main.tile[num27, num28].type != 0) && num27 < num4)
				{
					num28--;
					if (num28 < num5)
					{
						num28 = num6;
						num27 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num27 < num4)
				{
					num28 += WorldGen.genRand.Next(0, 4);
					int num29 = WorldGen.genRand.Next(2, 5);
					int num30 = 189;
					for (int num31 = num27 - num29; num31 <= num27 + num29; num31++)
					{
						for (int num32 = num28 - num29; num32 <= num28 + num29; num32++)
						{
							if (num32 > num5)
							{
								double num56 = (double)Math.Abs(num31 - num27);
								double num33 = (double)(Math.Abs(num32 - num28) * 2);
								if (Math.Sqrt(num56 * num56 + num33 * num33) < (double)num29)
								{
									*Main.tile[num31, num32].type = (ushort)num30;
									WorldGen.SquareTileFrame(num31, num32, true);
								}
							}
						}
					}
					num27 += WorldGen.genRand.Next(num29, (int)((double)num29 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						*Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && *Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (*Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								*Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (*Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								*Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && *Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								*Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						*Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 460;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num57 = (double)Math.Abs(num48 - num44);
						double num50 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num57 * num57 + num50 * num50) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							*Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num51 = num44 - num46 + 2; num51 <= num44 + num46 - 2; num51++)
				{
					int num52 = num45 - num46;
					while (!Main.tile[num51, num52].active())
					{
						num52++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num51, num52))
					{
						Main.tile[num51, num52].active(false);
						*Main.tile[num51, num52].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num51, num52, true);
					}
				}
			}
		}

		// Token: 0x0600135F RID: 4959 RVA: 0x0048D0C8 File Offset: 0x0048B2C8
		public unsafe static void DesertCloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num53 = Math.Abs((double)k - vector2D.X);
							double num13 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num53 * num53 + num13 * num13) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								*Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num14 = num3;
			int num16;
			for (num14 += WorldGen.genRand.Next(5); num14 < num4; num14 += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[num14, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int m = num14 - num16; m <= num14 + num16; m++)
				{
					for (int n = num15 - num16; n <= num15 + num16; n++)
					{
						if (n > num5)
						{
							double num54 = (double)Math.Abs(m - num14);
							double num18 = (double)(Math.Abs(n - num15) * 2);
							if (Math.Sqrt(num54 * num54 + num18 * num18) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[m, n].active(true);
								*Main.tile[m, n].type = (ushort)num17;
								WorldGen.SquareTileFrame(m, n, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num19 = (int)(vector2D.X - num * 0.5);
				int num20 = (int)(vector2D.X + num * 0.5);
				int num21 = num5 - 1;
				int num22 = (int)(vector2D.Y + num * 0.5);
				if (num19 < 0)
				{
					num19 = 0;
				}
				if (num20 > Main.maxTilesX)
				{
					num20 = Main.maxTilesX;
				}
				if (num21 < 0)
				{
					num21 = 0;
				}
				if (num22 > Main.maxTilesY)
				{
					num22 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num23 = vector2D.Y + 1.0;
				for (int num24 = num19; num24 < num20; num24++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num23 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num23 < vector2D.Y)
					{
						num23 = vector2D.Y;
					}
					if (num23 > vector2D.Y + 2.0)
					{
						num23 = vector2D.Y + 2.0;
					}
					for (int num25 = num21; num25 < num22; num25++)
					{
						if ((double)num25 > num23)
						{
							double num55 = Math.Abs((double)num24 - vector2D.X);
							double num26 = Math.Abs((double)num25 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num55 * num55 + num26 * num26) < num11 * 0.4 && *Main.tile[num24, num25].type == 189)
							{
								*Main.tile[num24, num25].type = 53;
								WorldGen.SquareTileFrame(num24, num25, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num27 = num3;
			num27 += WorldGen.genRand.Next(5);
			while (num27 < num4)
			{
				int num28 = num6;
				while ((!Main.tile[num27, num28].active() || *Main.tile[num27, num28].type != 0) && num27 < num4)
				{
					num28--;
					if (num28 < num5)
					{
						num28 = num6;
						num27 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num27 < num4)
				{
					num28 += WorldGen.genRand.Next(0, 4);
					int num29 = WorldGen.genRand.Next(2, 5);
					int num30 = 189;
					for (int num31 = num27 - num29; num31 <= num27 + num29; num31++)
					{
						for (int num32 = num28 - num29; num32 <= num28 + num29; num32++)
						{
							if (num32 > num5)
							{
								double num56 = (double)Math.Abs(num31 - num27);
								double num33 = (double)(Math.Abs(num32 - num28) * 2);
								if (Math.Sqrt(num56 * num56 + num33 * num33) < (double)num29)
								{
									*Main.tile[num31, num32].type = (ushort)num30;
									WorldGen.SquareTileFrame(num31, num32, true);
								}
							}
						}
					}
					num27 += WorldGen.genRand.Next(num29, (int)((double)num29 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						*Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && *Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (*Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								*Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (*Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								*Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && *Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								*Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						*Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 196;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num57 = (double)Math.Abs(num48 - num44);
						double num50 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num57 * num57 + num50 * num50) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							*Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num51 = num44 - num46 + 2; num51 <= num44 + num46 - 2; num51++)
				{
					int num52 = num45 - num46;
					while (!Main.tile[num51, num52].active())
					{
						num52++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num51, num52))
					{
						Main.tile[num51, num52].active(false);
						*Main.tile[num51, num52].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num51, num52, true);
					}
				}
			}
		}

		// Token: 0x06001360 RID: 4960 RVA: 0x0048DFC8 File Offset: 0x0048C1C8
		public unsafe static void CloudIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num53 = Math.Abs((double)k - vector2D.X);
							double num13 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num53 * num53 + num13 * num13) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								*Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num14 = num3;
			int num16;
			for (num14 += WorldGen.genRand.Next(5); num14 < num4; num14 += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[num14, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int m = num14 - num16; m <= num14 + num16; m++)
				{
					for (int n = num15 - num16; n <= num15 + num16; n++)
					{
						if (n > num5)
						{
							double num54 = (double)Math.Abs(m - num14);
							double num18 = (double)(Math.Abs(n - num15) * 2);
							if (Math.Sqrt(num54 * num54 + num18 * num18) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[m, n].active(true);
								*Main.tile[m, n].type = (ushort)num17;
								WorldGen.SquareTileFrame(m, n, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num19 = (int)(vector2D.X - num * 0.5);
				int num20 = (int)(vector2D.X + num * 0.5);
				int num21 = num5 - 1;
				int num22 = (int)(vector2D.Y + num * 0.5);
				if (num19 < 0)
				{
					num19 = 0;
				}
				if (num20 > Main.maxTilesX)
				{
					num20 = Main.maxTilesX;
				}
				if (num21 < 0)
				{
					num21 = 0;
				}
				if (num22 > Main.maxTilesY)
				{
					num22 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num23 = vector2D.Y + 1.0;
				for (int num24 = num19; num24 < num20; num24++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num23 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num23 < vector2D.Y)
					{
						num23 = vector2D.Y;
					}
					if (num23 > vector2D.Y + 2.0)
					{
						num23 = vector2D.Y + 2.0;
					}
					for (int num25 = num21; num25 < num22; num25++)
					{
						if ((double)num25 > num23)
						{
							double num55 = Math.Abs((double)num24 - vector2D.X);
							double num26 = Math.Abs((double)num25 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num55 * num55 + num26 * num26) < num11 * 0.4 && *Main.tile[num24, num25].type == 189)
							{
								*Main.tile[num24, num25].type = 0;
								WorldGen.SquareTileFrame(num24, num25, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num27 = num3;
			num27 += WorldGen.genRand.Next(5);
			while (num27 < num4)
			{
				int num28 = num6;
				while ((!Main.tile[num27, num28].active() || *Main.tile[num27, num28].type != 0) && num27 < num4)
				{
					num28--;
					if (num28 < num5)
					{
						num28 = num6;
						num27 += WorldGen.genRand.Next(1, 4);
					}
				}
				if (num27 < num4)
				{
					num28 += WorldGen.genRand.Next(0, 4);
					int num29 = WorldGen.genRand.Next(2, 5);
					int num30 = 189;
					for (int num31 = num27 - num29; num31 <= num27 + num29; num31++)
					{
						for (int num32 = num28 - num29; num32 <= num28 + num29; num32++)
						{
							if (num32 > num5)
							{
								double num56 = (double)Math.Abs(num31 - num27);
								double num33 = (double)(Math.Abs(num32 - num28) * 2);
								if (Math.Sqrt(num56 * num56 + num33 * num33) < (double)num29)
								{
									*Main.tile[num31, num32].type = (ushort)num30;
									WorldGen.SquareTileFrame(num31, num32, true);
								}
							}
						}
					}
					num27 += WorldGen.genRand.Next(num29, (int)((double)num29 * 1.5));
				}
			}
			for (int num34 = num3 - 20; num34 <= num4 + 20; num34++)
			{
				for (int num35 = num5 - 20; num35 <= num6 + 20; num35++)
				{
					bool flag = true;
					for (int num36 = num34 - 1; num36 <= num34 + 1; num36++)
					{
						for (int num37 = num35 - 1; num37 <= num35 + 1; num37++)
						{
							if (!Main.tile[num36, num37].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						*Main.tile[num34, num35].wall = 73;
						WorldGen.SquareWallFrame(num34, num35, true);
					}
				}
			}
			for (int num38 = num3; num38 <= num4; num38++)
			{
				int num39 = num5 - 10;
				while (!Main.tile[num38, num39 + 1].active())
				{
					num39++;
				}
				if (num39 < num6 && *Main.tile[num38, num39 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num40 = WorldGen.genRand.Next(1, 3);
						for (int num41 = num38 - num40; num41 <= num38 + num40; num41++)
						{
							if (*Main.tile[num41, num39].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39))
							{
								Main.tile[num41, num39].active(false);
								*Main.tile[num41, num39].liquid = byte.MaxValue;
								Main.tile[num41, num39].lava(false);
								WorldGen.SquareTileFrame(num38, num39, true);
							}
							if (*Main.tile[num41, num39 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 1))
							{
								Main.tile[num41, num39 + 1].active(false);
								*Main.tile[num41, num39 + 1].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 1].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 1, true);
							}
							if (num41 > num38 - num40 && num41 < num38 + 2 && *Main.tile[num41, num39 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num41, num39 + 2))
							{
								Main.tile[num41, num39 + 2].active(false);
								*Main.tile[num41, num39 + 2].liquid = byte.MaxValue;
								Main.tile[num41, num39 + 2].lava(false);
								WorldGen.SquareTileFrame(num38, num39 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num38, num39))
					{
						*Main.tile[num38, num39].liquid = byte.MaxValue;
					}
					Main.tile[num38, num39].lava(false);
					WorldGen.SquareTileFrame(num38, num39, true);
				}
			}
			int num42 = WorldGen.genRand.Next(4);
			for (int num43 = 0; num43 <= num42; num43++)
			{
				int num44 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num45 = num5 - WorldGen.genRand.Next(20, 40);
				int num46 = WorldGen.genRand.Next(4, 8);
				int num47 = 189;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num47 = 196;
				}
				for (int num48 = num44 - num46; num48 <= num44 + num46; num48++)
				{
					for (int num49 = num45 - num46; num49 <= num45 + num46; num49++)
					{
						double num57 = (double)Math.Abs(num48 - num44);
						double num50 = (double)(Math.Abs(num49 - num45) * 2);
						if (Math.Sqrt(num57 * num57 + num50 * num50) < (double)(num46 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num48, num49].active(true);
							*Main.tile[num48, num49].type = (ushort)num47;
							WorldGen.SquareTileFrame(num48, num49, true);
						}
					}
				}
				for (int num51 = num44 - num46 + 2; num51 <= num44 + num46 - 2; num51++)
				{
					int num52 = num45 - num46;
					while (!Main.tile[num51, num52].active())
					{
						num52++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num51, num52))
					{
						Main.tile[num51, num52].active(false);
						*Main.tile[num51, num52].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num51, num52, true);
					}
				}
			}
		}

		// Token: 0x06001361 RID: 4961 RVA: 0x0048EEC8 File Offset: 0x0048D0C8
		public unsafe static bool WillWaterPlacedHereStayPut(int x, int y)
		{
			return ((Main.tile[x, y + 1].active() && Main.tileSolid[(int)(*Main.tile[x, y + 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, y + 1].type)]) || *Main.tile[x, y + 1].liquid == byte.MaxValue) && ((Main.tile[x - 1, y].active() && Main.tileSolid[(int)(*Main.tile[x - 1, y].type)] && !Main.tileSolidTop[(int)(*Main.tile[x - 1, y].type)]) || *Main.tile[x - 1, y].liquid == byte.MaxValue) && ((Main.tile[x + 1, y].active() && Main.tileSolid[(int)(*Main.tile[x + 1, y].type)] && !Main.tileSolidTop[(int)(*Main.tile[x + 1, y].type)]) || *Main.tile[x + 1, y].liquid == byte.MaxValue);
		}

		// Token: 0x06001362 RID: 4962 RVA: 0x0048F038 File Offset: 0x0048D238
		public unsafe static void CloudLake(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(100, 150);
			double num2 = (double)WorldGen.genRand.Next(20, 30);
			int num3 = i;
			int num4 = i;
			int num5 = i;
			int num6 = j;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num7 = (int)(vector2D.X - num * 0.5);
				int num8 = (int)(vector2D.X + num * 0.5);
				int num9 = (int)(vector2D.Y - num * 0.5);
				int num10 = (int)(vector2D.Y + num * 0.5);
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesX)
				{
					num8 = Main.maxTilesX;
				}
				if (num9 < 0)
				{
					num9 = 0;
				}
				if (num10 > Main.maxTilesY)
				{
					num10 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num12 = vector2D.Y + 1.0;
				for (int k = num7; k < num8; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num12 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num12 < vector2D.Y)
					{
						num12 = vector2D.Y;
					}
					if (num12 > vector2D.Y + 2.0)
					{
						num12 = vector2D.Y + 2.0;
					}
					for (int l = num9; l < num10; l++)
					{
						if ((double)l > num12)
						{
							double num46 = Math.Abs((double)k - vector2D.X);
							double num13 = Math.Abs((double)l - vector2D.Y) * 3.0;
							if (Math.Sqrt(num46 * num46 + num13 * num13) < num11 * 0.4)
							{
								if (k < num3)
								{
									num3 = k;
								}
								if (k > num4)
								{
									num4 = k;
								}
								if (l < num5)
								{
									num5 = l;
								}
								if (l > num6)
								{
									num6 = l;
								}
								Main.tile[k, l].active(true);
								*Main.tile[k, l].type = 189;
								WorldGen.SquareTileFrame(k, l, true);
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
			int num14 = num3;
			int num16;
			for (num14 += WorldGen.genRand.Next(5); num14 < num4; num14 += WorldGen.genRand.Next(num16, (int)((double)num16 * 1.5)))
			{
				int num15 = num6;
				while (!Main.tile[num14, num15].active())
				{
					num15--;
				}
				num15 += WorldGen.genRand.Next(-3, 4);
				num16 = WorldGen.genRand.Next(4, 8);
				int num17 = 189;
				if (WorldGen.genRand.Next(4) == 0)
				{
					num17 = 196;
				}
				for (int m = num14 - num16; m <= num14 + num16; m++)
				{
					for (int n = num15 - num16; n <= num15 + num16; n++)
					{
						if (n > num5)
						{
							double num47 = (double)Math.Abs(m - num14);
							double num18 = (double)(Math.Abs(n - num15) * 2);
							if (Math.Sqrt(num47 * num47 + num18 * num18) < (double)(num16 + WorldGen.genRand.Next(2)))
							{
								Main.tile[m, n].active(true);
								*Main.tile[m, n].type = (ushort)num17;
								WorldGen.SquareTileFrame(m, n, true);
							}
						}
					}
				}
			}
			num = (double)WorldGen.genRand.Next(80, 95);
			num2 = (double)WorldGen.genRand.Next(10, 15);
			vector2D.X = (double)i;
			vector2D.Y = (double)num5;
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num19 = (int)(vector2D.X - num * 0.5);
				int num20 = (int)(vector2D.X + num * 0.5);
				int num21 = num5 - 1;
				int num22 = (int)(vector2D.Y + num * 0.5);
				if (num19 < 0)
				{
					num19 = 0;
				}
				if (num20 > Main.maxTilesX)
				{
					num20 = Main.maxTilesX;
				}
				if (num21 < 0)
				{
					num21 = 0;
				}
				if (num22 > Main.maxTilesY)
				{
					num22 = Main.maxTilesY;
				}
				double num11 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num23 = vector2D.Y + 1.0;
				for (int num24 = num19; num24 < num20; num24++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num23 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num23 < vector2D.Y)
					{
						num23 = vector2D.Y;
					}
					if (num23 > vector2D.Y + 2.0)
					{
						num23 = vector2D.Y + 2.0;
					}
					for (int num25 = num21; num25 < num22; num25++)
					{
						if ((double)num25 > num23 - 2.0)
						{
							double num48 = Math.Abs((double)num24 - vector2D.X);
							double num26 = Math.Abs((double)num25 - vector2D.Y) * 3.0;
							if (Math.Sqrt(num48 * num48 + num26 * num26) < num11 * 0.4 && *Main.tile[num24, num25].type == 189)
							{
								Main.tile[num24, num25].active(false);
								if ((double)num25 > num23 + 1.0)
								{
									if (WorldGen.WillWaterPlacedHereStayPut(num24, num25))
									{
										*Main.tile[num24, num25].liquid = byte.MaxValue;
									}
									Main.tile[num24, num25].honey(false);
									Main.tile[num24, num25].lava(false);
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-20, 21) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < 0.0)
				{
					vector2D2.Y = 0.0;
				}
			}
			for (int num27 = num3 - 20; num27 <= num4 + 20; num27++)
			{
				for (int num28 = num5 - 20; num28 <= num6 + 20; num28++)
				{
					bool flag = true;
					for (int num29 = num27 - 1; num29 <= num27 + 1; num29++)
					{
						for (int num30 = num28 - 1; num30 <= num28 + 1; num30++)
						{
							if (!Main.tile[num29, num30].active())
							{
								flag = false;
							}
						}
					}
					if (flag)
					{
						*Main.tile[num27, num28].wall = 73;
					}
				}
			}
			for (int num31 = num3; num31 <= num4; num31++)
			{
				int num32 = num5 - 10;
				while (!Main.tile[num31, num32 + 1].active())
				{
					num32++;
				}
				if (num32 < num6 && *Main.tile[num31, num32 + 1].type == 189)
				{
					if (WorldGen.genRand.Next(10) == 0)
					{
						int num33 = WorldGen.genRand.Next(1, 3);
						for (int num34 = num31 - num33; num34 <= num31 + num33; num34++)
						{
							if (*Main.tile[num34, num32].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num34, num32))
							{
								Main.tile[num34, num32].active(false);
								*Main.tile[num34, num32].liquid = byte.MaxValue;
								Main.tile[num34, num32].lava(false);
								WorldGen.SquareTileFrame(num31, num32, true);
							}
							if (*Main.tile[num34, num32 + 1].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num34, num32 + 1))
							{
								Main.tile[num34, num32 + 1].active(false);
								*Main.tile[num34, num32 + 1].liquid = byte.MaxValue;
								Main.tile[num34, num32 + 1].lava(false);
								WorldGen.SquareTileFrame(num31, num32 + 1, true);
							}
							if (num34 > num31 - num33 && num34 < num31 + 2 && *Main.tile[num34, num32 + 2].type == 189 && WorldGen.WillWaterPlacedHereStayPut(num34, num32 + 2))
							{
								Main.tile[num34, num32 + 2].active(false);
								*Main.tile[num34, num32 + 2].liquid = byte.MaxValue;
								Main.tile[num34, num32 + 2].lava(false);
								WorldGen.SquareTileFrame(num31, num32 + 2, true);
							}
						}
					}
					if (WorldGen.genRand.Next(5) == 0 && WorldGen.WillWaterPlacedHereStayPut(num31, num32))
					{
						*Main.tile[num31, num32].liquid = byte.MaxValue;
					}
					Main.tile[num31, num32].lava(false);
					WorldGen.SquareTileFrame(num31, num32, true);
				}
			}
			int num35 = WorldGen.genRand.Next(1, 4);
			for (int num36 = 0; num36 <= num35; num36++)
			{
				int num37 = WorldGen.genRand.Next(num3 - 5, num4 + 5);
				int num38 = num5 - WorldGen.genRand.Next(20, 40);
				int num39 = WorldGen.genRand.Next(4, 8);
				int num40 = 189;
				if (WorldGen.genRand.Next(4) != 0)
				{
					num40 = 196;
				}
				for (int num41 = num37 - num39; num41 <= num37 + num39; num41++)
				{
					for (int num42 = num38 - num39; num42 <= num38 + num39; num42++)
					{
						double num49 = (double)Math.Abs(num41 - num37);
						double num43 = (double)(Math.Abs(num42 - num38) * 2);
						if (Math.Sqrt(num49 * num49 + num43 * num43) < (double)(num39 + WorldGen.genRand.Next(-1, 2)))
						{
							Main.tile[num41, num42].active(true);
							*Main.tile[num41, num42].type = (ushort)num40;
							WorldGen.SquareTileFrame(num41, num42, true);
						}
					}
				}
				for (int num44 = num37 - num39 + 2; num44 <= num37 + num39 - 2; num44++)
				{
					int num45 = num38 - num39;
					while (!Main.tile[num44, num45].active())
					{
						num45++;
					}
					if (WorldGen.WillWaterPlacedHereStayPut(num44, num45))
					{
						Main.tile[num44, num45].active(false);
						*Main.tile[num44, num45].liquid = byte.MaxValue;
						WorldGen.SquareTileFrame(num44, num45, true);
					}
				}
			}
		}

		// Token: 0x06001363 RID: 4963 RVA: 0x0048FE44 File Offset: 0x0048E044
		public unsafe static void FloatingIsland(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 120);
			double num2 = (double)WorldGen.genRand.Next(20, 25);
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			while (vector2D2.X > -2.0 && vector2D2.X < 2.0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-20, 21) * 0.2;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.02;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num2 -= 1.0;
				int num3 = (int)(vector2D.X - num * 0.5);
				int num4 = (int)(vector2D.X + num * 0.5);
				int num5 = (int)(vector2D.Y - num * 0.5);
				int num6 = (int)(vector2D.Y + num * 0.5);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				double num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				double num8 = vector2D.Y + 1.0;
				for (int k = num3; k < num4; k++)
				{
					if (WorldGen.genRand.Next(2) == 0)
					{
						num8 += (double)WorldGen.genRand.Next(-1, 2);
					}
					if (num8 < vector2D.Y)
					{
						num8 = vector2D.Y;
					}
					if (num8 > vector2D.Y + 2.0)
					{
						num8 = vector2D.Y + 2.0;
					}
					for (int l = num5; l < num6; l++)
					{
						if ((double)l > num8)
						{
							double num11 = Math.Abs((double)k - vector2D.X);
							double num9 = Math.Abs((double)l - vector2D.Y) * 2.0;
							if (Math.Sqrt(num11 * num11 + num9 * num9) < num7 * 0.4)
							{
								Main.tile[k, l].active(true);
								if (*Main.tile[k, l].type == 59)
								{
									*Main.tile[k, l].type = 0;
								}
							}
						}
					}
				}
				num3 = (int)(vector2D.X - num * 0.4);
				num4 = (int)(vector2D.X + num * 0.4);
				num5 = (int)(vector2D.Y - num * 0.4);
				num6 = (int)(vector2D.Y + num * 0.4);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				num7 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int m = num3; m < num4; m++)
				{
					for (int n = num5; n < num6; n++)
					{
						if ((double)n > vector2D.Y + 2.0)
						{
							double num12 = Math.Abs((double)m - vector2D.X);
							double num10 = Math.Abs((double)n - vector2D.Y) * 2.0;
							if (Math.Sqrt(num12 * num12 + num10 * num10) < num7 * 0.4)
							{
								*Main.tile[m, n].wall = 2;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 0.2)
				{
					vector2D2.Y = -0.2;
				}
				if (vector2D2.Y < -0.2)
				{
					vector2D2.Y = -0.2;
				}
			}
		}

		// Token: 0x06001364 RID: 4964 RVA: 0x0049031C File Offset: 0x0048E51C
		public static void Caverer(int X, int Y)
		{
			int num12 = WorldGen.genRand.Next(2);
			if (num12 == 0)
			{
				int num4 = WorldGen.genRand.Next(7, 9);
				double num5 = (double)WorldGen.genRand.Next(100) * 0.01;
				double num6 = 1.0 - num5;
				if (WorldGen.genRand.Next(2) == 0)
				{
					num5 = 0.0 - num5;
				}
				if (WorldGen.genRand.Next(2) == 0)
				{
					num6 = 0.0 - num6;
				}
				Vector2D vector2D2;
				vector2D2..ctor((double)X, (double)Y);
				for (int i = 0; i < num4; i++)
				{
					vector2D2 = WorldGen.digTunnel(vector2D2.X, vector2D2.Y, num5, num6, WorldGen.genRand.Next(6, 20), WorldGen.genRand.Next(4, 9), false);
					num5 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					num6 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
					if (num5 < -1.5)
					{
						num5 = -1.5;
					}
					if (num5 > 1.5)
					{
						num5 = 1.5;
					}
					if (num6 < -1.5)
					{
						num6 = -1.5;
					}
					if (num6 > 1.5)
					{
						num6 = 1.5;
					}
					double num7 = (double)WorldGen.genRand.Next(100) * 0.01;
					double num8 = 1.0 - num7;
					if (WorldGen.genRand.Next(2) == 0)
					{
						num7 = 0.0 - num7;
					}
					if (WorldGen.genRand.Next(2) == 0)
					{
						num8 = 0.0 - num8;
					}
					Vector2D vector2D3 = WorldGen.digTunnel(vector2D2.X, vector2D2.Y, num7, num8, WorldGen.genRand.Next(30, 50), WorldGen.genRand.Next(3, 6), false);
					WorldGen.TileRunner((int)vector2D3.X, (int)vector2D3.Y, (double)WorldGen.genRand.Next(10, 20), WorldGen.genRand.Next(5, 10), -1, false, 0.0, 0.0, false, true, -1);
				}
				return;
			}
			if (num12 != 1)
			{
				return;
			}
			int num9 = WorldGen.genRand.Next(15, 30);
			double num10 = (double)WorldGen.genRand.Next(100) * 0.01;
			double num11 = 1.0 - num10;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num10 = 0.0 - num10;
			}
			if (WorldGen.genRand.Next(2) == 0)
			{
				num11 = 0.0 - num11;
			}
			Vector2D vector2D4;
			vector2D4..ctor((double)X, (double)Y);
			for (int j = 0; j < num9; j++)
			{
				vector2D4 = WorldGen.digTunnel(vector2D4.X, vector2D4.Y, num10, num11, WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(2, 6), true);
				num10 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
				num11 += (double)WorldGen.genRand.Next(-20, 21) * 0.1;
				if (num10 < -1.5)
				{
					num10 = -1.5;
				}
				if (num10 > 1.5)
				{
					num10 = 1.5;
				}
				if (num11 < -1.5)
				{
					num11 = -1.5;
				}
				if (num11 > 1.5)
				{
					num11 = 1.5;
				}
			}
		}

		// Token: 0x06001365 RID: 4965 RVA: 0x004906C0 File Offset: 0x0048E8C0
		public unsafe static Vector2D digTunnel(double X, double Y, double xDir, double yDir, int Steps, int Size, bool Wet = false)
		{
			double num = X;
			double num2 = Y;
			try
			{
				double num3 = 0.0;
				double num4 = 0.0;
				double num5 = (double)Size;
				num = Utils.Clamp<double>(num, num5 + 1.0, (double)Main.maxTilesX - num5 - 1.0);
				num2 = Utils.Clamp<double>(num2, num5 + 1.0, (double)Main.maxTilesY - num5 - 1.0);
				for (int i = 0; i < Steps; i++)
				{
					int j = (int)(num - num5);
					while ((double)j <= num + num5)
					{
						int k = (int)(num2 - num5);
						while ((double)k <= num2 + num5)
						{
							if (Math.Abs((double)j - num) + Math.Abs((double)k - num2) < num5 * (1.0 + (double)WorldGen.genRand.Next(-10, 11) * 0.005) && j >= 0 && j < Main.maxTilesX && k >= 0 && k < Main.maxTilesY)
							{
								Main.tile[j, k].active(false);
								if (Wet)
								{
									*Main.tile[j, k].liquid = byte.MaxValue;
								}
							}
							k++;
						}
						j++;
					}
					num5 += (double)WorldGen.genRand.Next(-50, 51) * 0.03;
					if (num5 < (double)Size * 0.6)
					{
						num5 = (double)Size * 0.6;
					}
					if (num5 > (double)(Size * 2))
					{
						num5 = (double)(Size * 2);
					}
					num3 += (double)WorldGen.genRand.Next(-20, 21) * 0.01;
					num4 += (double)WorldGen.genRand.Next(-20, 21) * 0.01;
					if (num3 < -1.0)
					{
						num3 = -1.0;
					}
					if (num3 > 1.0)
					{
						num3 = 1.0;
					}
					if (num4 < -1.0)
					{
						num4 = -1.0;
					}
					if (num4 > 1.0)
					{
						num4 = 1.0;
					}
					num += (xDir + num3) * 0.6;
					num2 += (yDir + num4) * 0.6;
				}
			}
			catch
			{
			}
			return new Vector2D(num, num2);
		}

		// Token: 0x06001366 RID: 4966 RVA: 0x00490944 File Offset: 0x0048EB44
		public unsafe static void IslandHouse(int i, int j, int islandStyle)
		{
			bool flag = WorldGen.crimson;
			if (WorldGen.drunkWorldGen)
			{
				flag = ((GenVars.crimsonLeft && i < Main.maxTilesX / 2) || (!GenVars.crimsonLeft && i > Main.maxTilesX / 2));
			}
			byte type = 202;
			byte wall = 82;
			Vector2D vector2D;
			vector2D..ctor((double)i, (double)j);
			int num = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num = -1;
			}
			int num2 = WorldGen.genRand.Next(7, 12);
			int num3 = WorldGen.genRand.Next(5, 7);
			vector2D.X = (double)(i + (num2 + 2) * num);
			for (int k = j - 15; k < j + 30; k++)
			{
				if (Main.tile[(int)vector2D.X, k].active())
				{
					vector2D.Y = (double)(k - 1);
					break;
				}
			}
			vector2D.X = (double)i;
			int num4 = (int)(vector2D.X - (double)num2 - 1.0);
			int num5 = (int)(vector2D.X + (double)num2 + 1.0);
			int num6 = (int)(vector2D.Y - (double)num3 - 1.0);
			int num7 = (int)(vector2D.Y + 2.0);
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX;
			}
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY;
			}
			for (int l = num4; l <= num5; l++)
			{
				for (int m = num6 - 1; m < num7 + 1; m++)
				{
					if (m != num6 - 1 || (l != num4 && l != num5))
					{
						Main.tile[l, m].active(true);
						*Main.tile[l, m].liquid = 0;
						*Main.tile[l, m].type = (ushort)type;
						*Main.tile[l, m].wall = 0;
						Main.tile[l, m].halfBrick(false);
						Main.tile[l, m].slope(0);
					}
				}
			}
			num4 = (int)(vector2D.X - (double)num2);
			num5 = (int)(vector2D.X + (double)num2);
			num6 = (int)(vector2D.Y - (double)num3);
			num7 = (int)(vector2D.Y + 1.0);
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX;
			}
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY;
			}
			for (int n = num4; n <= num5; n++)
			{
				for (int num8 = num6; num8 < num7; num8++)
				{
					if ((num8 != num6 || (n != num4 && n != num5)) && *Main.tile[n, num8].wall == 0)
					{
						Main.tile[n, num8].active(false);
						*Main.tile[n, num8].wall = (ushort)wall;
					}
				}
			}
			int num9 = i + (num2 + 1) * num;
			int num10 = (int)vector2D.Y;
			for (int num11 = num9 - 2; num11 <= num9 + 2; num11++)
			{
				Main.tile[num11, num10].active(false);
				Main.tile[num11, num10 - 1].active(false);
				Main.tile[num11, num10 - 2].active(false);
			}
			if (WorldGen.remixWorldGen)
			{
				if (flag)
				{
					WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 5);
				}
				else
				{
					WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 38);
				}
			}
			else
			{
				WorldGen.PlaceTile(num9, num10, 10, true, false, -1, 9);
			}
			num9 = i + (num2 + 1) * -num - num;
			for (int num12 = num6; num12 <= num7 + 1; num12++)
			{
				Main.tile[num9, num12].active(true);
				*Main.tile[num9, num12].liquid = 0;
				*Main.tile[num9, num12].type = (ushort)type;
				*Main.tile[num9, num12].wall = 0;
				Main.tile[num9, num12].halfBrick(false);
				Main.tile[num9, num12].slope(0);
			}
			int contain = 0;
			int num13 = GenVars.skyIslandHouseCount;
			if (num13 > 3)
			{
				num13 = WorldGen.genRand.Next(4);
			}
			switch (num13)
			{
			case 0:
				contain = 159;
				break;
			case 1:
				contain = 65;
				break;
			case 2:
				contain = 158;
				break;
			case 3:
				contain = 2219;
				break;
			}
			if (WorldGen.getGoodWorldGen)
			{
				WorldGen.AddBuriedChest(i, num10 - 3, contain, false, 2, false, 0);
			}
			else
			{
				WorldGen.AddBuriedChest(i, num10 - 3, contain, false, 13, false, 0);
			}
			if (islandStyle > 0)
			{
				for (int num14 = 0; num14 < 100000; num14++)
				{
					int num15 = i + WorldGen.genRand.Next(-50, 51);
					int num16 = num10 + WorldGen.genRand.Next(21);
					if ((num14 >= 50000 || *Main.tile[num15, num16].type != 202) && !Main.tile[num15, num16].active())
					{
						WorldGen.Place2xX(num15, num16, 207, islandStyle);
						if (Main.tile[num15, num16].active())
						{
							WorldGen.SwitchFountain(num15, num16);
							break;
						}
					}
				}
			}
			GenVars.skyIslandHouseCount++;
			if (!WorldGen.remixWorldGen)
			{
				int num17 = i - num2 / 2 + 1;
				int num18 = i + num2 / 2 - 1;
				int num19 = 1;
				if (num2 > 10)
				{
					num19 = 2;
				}
				int num20 = (num6 + num7) / 2 - 1;
				for (int num21 = num17 - num19; num21 <= num17 + num19; num21++)
				{
					for (int num22 = num20 - 1; num22 <= num20 + 1; num22++)
					{
						*Main.tile[num21, num22].wall = 21;
					}
				}
				for (int num23 = num18 - num19; num23 <= num18 + num19; num23++)
				{
					for (int num24 = num20 - 1; num24 <= num20 + 1; num24++)
					{
						*Main.tile[num23, num24].wall = 21;
					}
				}
			}
			int num25 = i + (num2 / 2 + 1) * -num;
			if (WorldGen.remixWorldGen)
			{
				if (flag)
				{
					WorldGen.PlaceTile(num25, num7 - 1, 14, true, false, -1, 5);
					WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 8);
					WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 8);
				}
				else
				{
					WorldGen.PlaceTile(num25, num7 - 1, 469, true, false, -1, 2);
					WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 38);
					WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 38);
				}
			}
			else
			{
				WorldGen.PlaceTile(num25, num7 - 1, 14, true, false, -1, 7);
				WorldGen.PlaceTile(num25 - 2, num7 - 1, 15, true, false, 0, 10);
				WorldGen.PlaceTile(num25 + 2, num7 - 1, 15, true, false, 0, 10);
			}
			ref short frameX = ref Main.tile[num25 - 2, num7 - 1].frameX;
			frameX += 18;
			ref short frameX2 = ref Main.tile[num25 - 2, num7 - 2].frameX;
			frameX2 += 18;
			if (!WorldGen.remixWorldGen)
			{
				int i2 = num4 + 1;
				int j2 = num6;
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
				i2 = num5 - 1;
				j2 = num6;
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
				if (num > 0)
				{
					i2 = num4;
					j2 = num6 + 1;
				}
				else
				{
					i2 = num5;
					j2 = num6 + 1;
				}
				WorldGen.PlaceTile(i2, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
			}
			if (islandStyle != 1)
			{
				return;
			}
			int num26 = WorldGen.genRand.Next(3, 6);
			for (int num27 = 0; num27 < 100000; num27++)
			{
				int num28 = i + WorldGen.genRand.Next(-50, 51);
				int num29 = num10 + WorldGen.genRand.Next(-10, 21);
				if (!Main.tile[num28, num29].active())
				{
					WorldGen.GrowPalmTree(num28, num29 + 1);
					if (Main.tile[num28, num29].active())
					{
						num26--;
					}
				}
				if (num26 <= 0)
				{
					break;
				}
			}
		}

		// Token: 0x06001367 RID: 4967 RVA: 0x00491234 File Offset: 0x0048F434
		public unsafe static void Mountinater(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 120);
			double num2 = num;
			double num3 = (double)WorldGen.genRand.Next(40, 55);
			if (WorldGen.remixWorldGen)
			{
				num2 *= 1.5;
				num3 *= 1.5;
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j + num3 / 2.0;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(4);
				num3 -= 1.0;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				num2 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num9 = Math.Abs((double)k - vector2D.X);
						double num8 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num9 * num9 + num8 * num8) < num2 * 0.4 && !Main.tile[k, l].active())
						{
							Main.tile[k, l].active(true);
							*Main.tile[k, l].type = 0;
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > -0.5)
				{
					vector2D2.Y = -0.5;
				}
				if (vector2D2.Y < -1.5)
				{
					vector2D2.Y = -1.5;
				}
			}
		}

		// Token: 0x06001368 RID: 4968 RVA: 0x00491558 File Offset: 0x0048F758
		public unsafe static void MakeWateryIceThing(int i, int j)
		{
			if (*Main.tile[i, j].liquid <= 0 || Main.tile[i, j].active() || (Main.tile[i, j].lava() && !Main.remixWorld))
			{
				return;
			}
			int num = j;
			while (!Main.tile[i, num].active() && *Main.tile[i, num].liquid > 0)
			{
				num++;
				if (num > Main.maxTilesY - 50)
				{
					return;
				}
			}
			if (*Main.tile[i, num].type != 147 && *Main.tile[i, num].type != 161)
			{
				return;
			}
			num--;
			while (*Main.tile[i, num].liquid > 0)
			{
				num--;
				if (num < 10)
				{
					return;
				}
			}
			if (Main.tile[i, num].active())
			{
				return;
			}
			num++;
			if (!Main.tile[i, num].active())
			{
				int num2 = i;
				while (!Main.tile[num2, num].active() && *Main.tile[num2, num].liquid > 0 && *Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() && !Main.tile[num2 - 1, num].halfBrick())
				{
					WorldGen.PlaceTile(num2, num, 162, true, false, -1, 0);
					num2--;
				}
				num2 = i + 1;
				while (!Main.tile[num2, num].active() && *Main.tile[num2, num].liquid > 0 && *Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() && !Main.tile[num2 + 1, num].halfBrick())
				{
					WorldGen.PlaceTile(num2, num, 162, true, false, -1, 0);
					num2++;
				}
			}
		}

		// Token: 0x06001369 RID: 4969 RVA: 0x004917B0 File Offset: 0x0048F9B0
		public unsafe static void Lakinater(int i, int j, double strengthMultiplier = 1.0)
		{
			double num = (double)WorldGen.genRand.Next(25, 50) * strengthMultiplier;
			double num2 = num;
			double num3 = (double)WorldGen.genRand.Next(30, 80);
			if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 1.5;
				num2 *= 1.5;
				num3 *= 1.2;
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j - num3 * 0.3;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-10, 11) * 0.1;
			vector2D2.Y = (double)WorldGen.genRand.Next(-20, -10) * 0.1;
			while (num > 0.0 && num3 > 0.0)
			{
				if (vector2D.Y + num2 * 0.5 > Main.worldSurface)
				{
					num3 = 0.0;
				}
				num -= (double)WorldGen.genRand.Next(3);
				num3 -= 1.0;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				num2 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num9 = Math.Abs((double)k - vector2D.X);
						double num8 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num9 * num9 + num8 * num8) < num2 * 0.4)
						{
							if (Main.tile[k, l].active())
							{
								*Main.tile[k, l].liquid = byte.MaxValue;
							}
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > 1.5)
				{
					vector2D2.Y = 1.5;
				}
				if (vector2D2.Y < 0.5)
				{
					vector2D2.Y = 0.5;
				}
			}
		}

		// Token: 0x0600136A RID: 4970 RVA: 0x00491B10 File Offset: 0x0048FD10
		public unsafe static void SonOfLakinater(int i, int j, double strengthMultiplier = 1.0)
		{
			bool lava = false;
			if (WorldGen.getGoodWorldGen && WorldGen.genRand.Next(3) == 0)
			{
				lava = true;
			}
			double num = (double)WorldGen.genRand.Next(15, 31) * strengthMultiplier;
			double num2 = (double)WorldGen.genRand.Next(30, 61);
			if (WorldGen.genRand.Next(5) == 0)
			{
				num *= 1.3;
				num2 *= 1.3;
			}
			if (WorldGen.drunkWorldGen)
			{
				num *= 1.3;
				num2 *= 1.3;
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			double num3 = WorldGen.genRand.NextDouble() * 0.002;
			Vector2D vector2D2 = default(Vector2D);
			if (WorldGen.genRand.Next(4) != 0)
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-15, 16) * 0.01;
			}
			else
			{
				vector2D2.X = (double)WorldGen.genRand.Next(-50, 51) * 0.01;
				num3 = WorldGen.genRand.NextDouble() * 0.004 + 0.001;
			}
			vector2D2.Y = (double)WorldGen.genRand.Next(101) * 0.01;
			double num4 = num2;
			while (num > 3.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(11) * 0.1;
				num2 -= 1.0;
				int num5 = (int)(vector2D.X - num * 4.0);
				int num6 = (int)(vector2D.X + num * 4.0);
				int num7 = (int)(vector2D.Y - num * 3.0);
				int num8 = (int)(vector2D.Y + num * 2.0);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				double num9 = num;
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						double value = Math.Abs((double)k - vector2D.X) * 0.6;
						double value2 = Math.Abs((double)l - vector2D.Y) * 1.4;
						double value3 = Math.Abs((double)k - vector2D.X) * 0.3;
						double value4 = Math.Abs((double)l - vector2D.Y) * 5.0;
						value = Utils.Lerp(value, value3, num2 / num4);
						value2 = Utils.Lerp(value2, value4, num2 / num4);
						double num10 = Math.Sqrt(value * value + value2 * value2);
						int num11 = j + 5;
						if (num10 < num9 * 0.4)
						{
							if (l >= j)
							{
								if (l <= j + 1)
								{
									if (WorldGen.WillWaterPlacedHereStayPut(k, l))
									{
										*Main.tile[k, l].liquid = byte.MaxValue;
										Main.tile[k, l].lava(lava);
									}
								}
								else
								{
									*Main.tile[k, l].liquid = byte.MaxValue;
									Main.tile[k, l].lava(lava);
								}
							}
							Main.tile[k, l].active(false);
							if (!WorldGen.gen)
							{
								WorldGen.SquareTileFrame(k, l, true);
							}
							if (*Main.tile[k, l].type == 59 || *Main.tile[k, l].type == 60)
							{
								WorldGen.SpreadGrass(k - 1, l, 59, 60, true, default(TileColorCache));
								WorldGen.SpreadGrass(k + 1, l, 59, 60, true, default(TileColorCache));
								WorldGen.SpreadGrass(k, l + 1, 59, 60, true, default(TileColorCache));
							}
						}
						else if (l > j + 1 && num10 < num9 && *Main.tile[k, l].liquid == 0)
						{
							if (Math.Abs((double)k - vector2D.X) * 0.8 < num9 && *Main.tile[k, l].wall > 0 && *Main.tile[k - 1, l].wall > 0 && *Main.tile[k + 1, l].wall > 0 && *Main.tile[k, l + 1].wall > 0)
							{
								Main.tile[k, l].active(true);
							}
						}
						else if (l < j && num2 == num4 - 1.0 && (double)l > GenVars.worldSurfaceLow - 20.0 && !TileID.Sets.Clouds[(int)(*Main.tile[k, l].type)])
						{
							value = (double)Math.Abs(k - i) * 0.7;
							value2 = (double)Math.Abs(l - num11) * 1.35;
							num10 = Math.Sqrt(value * value + value2 * value2);
							double num12 = num9 * 0.4;
							double num13 = (double)Math.Abs(k - i) / (double)(num6 - i);
							num13 = 1.0 - num13;
							num13 *= 2.3;
							num13 *= num13;
							num13 *= num13;
							if (l < num11 && value < num12 + (double)Math.Abs(l - num11) * 0.5 * num13)
							{
								Main.tile[k, l].active(false);
								if (*Main.tile[k, l].type == 59 || *Main.tile[k, l].type == 60)
								{
									WorldGen.SpreadGrass(k - 1, l, 59, 60, true, default(TileColorCache));
									WorldGen.SpreadGrass(k + 1, l, 59, 60, true, default(TileColorCache));
									WorldGen.SpreadGrass(k, l + 1, 59, 60, true, default(TileColorCache));
								}
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-100, 101) * num3;
				vector2D2.Y += (double)WorldGen.genRand.Next(-100, 101) * 0.01;
				if (vector2D2.X > 1.0)
				{
					vector2D2.X = 1.0;
				}
				if (vector2D2.X < -1.0)
				{
					vector2D2.X = -1.0;
				}
				if (vector2D2.Y > 1.0)
				{
					vector2D2.Y = 1.0;
				}
				double num14 = 0.5 * (1.0 - num2 / num4);
				if (vector2D2.Y < num14)
				{
					vector2D2.Y = num14;
				}
			}
		}

		// Token: 0x0600136B RID: 4971 RVA: 0x004922C4 File Offset: 0x004904C4
		public unsafe static void ShroomPatch(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(80, 100);
			double num2 = (double)WorldGen.genRand.Next(20, 26);
			double num3 = (double)Main.maxTilesX / 4200.0;
			if (WorldGen.getGoodWorldGen && !Main.remixWorld)
			{
				num3 *= 1.5;
			}
			num *= num3;
			num2 *= num3;
			double num4 = num2 - 1.0;
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j - num2 * 0.3;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.X = (double)WorldGen.genRand.Next(-100, 101) * 0.005;
			vector2D2.Y = (double)WorldGen.genRand.Next(-200, -100) * 0.005;
			while (num > 0.0 && num2 > 0.0)
			{
				num -= (double)WorldGen.genRand.Next(3);
				num2 -= 1.0;
				int num5 = (int)(vector2D.X - num * 0.5);
				int num6 = (int)(vector2D.X + num * 0.5);
				int num7 = (int)(vector2D.Y - num * 0.5);
				int num8 = (int)(vector2D.Y + num * 0.5);
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesX)
				{
					num6 = Main.maxTilesX;
				}
				if (num7 < 0)
				{
					num7 = 0;
				}
				if (num8 > Main.maxTilesY)
				{
					num8 = Main.maxTilesY;
				}
				double num9 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num5; k < num6; k++)
				{
					for (int l = num7; l < num8; l++)
					{
						double num15 = Math.Abs((double)k - vector2D.X);
						double num10 = Math.Abs(((double)l - vector2D.Y) * 2.3);
						double num11 = Math.Sqrt(num15 * num15 + num10 * num10);
						if (num11 < num9 * 0.8 && Main.tile[k, l].lava())
						{
							*Main.tile[k, l].liquid = 0;
						}
						if (num11 < num9 * 0.2 && (double)l < vector2D.Y)
						{
							Main.tile[k, l].active(false);
							if (*Main.tile[k, l].wall > 0)
							{
								*Main.tile[k, l].wall = 80;
							}
						}
						else if (num11 < num9 * 0.4 * (0.95 + WorldGen.genRand.NextDouble() * 0.1))
						{
							*Main.tile[k, l].type = 59;
							if (num2 == num4 && (double)l > vector2D.Y)
							{
								Main.tile[k, l].active(true);
							}
							if (*Main.tile[k, l].wall > 0)
							{
								*Main.tile[k, l].wall = 80;
							}
						}
					}
				}
				vector2D += vector2D2;
				vector2D.X += vector2D2.X;
				vector2D2.X += (double)WorldGen.genRand.Next(-100, 110) * 0.005;
				vector2D2.Y -= (double)WorldGen.genRand.Next(110) * 0.005;
				if (vector2D2.X > -0.5 && vector2D2.X < 0.5)
				{
					if (vector2D2.X < 0.0)
					{
						vector2D2.X = -0.5;
					}
					else
					{
						vector2D2.X = 0.5;
					}
				}
				if (vector2D2.X > 0.5)
				{
					vector2D2.X = 0.5;
				}
				if (vector2D2.X < -0.5)
				{
					vector2D2.X = -0.5;
				}
				if (vector2D2.Y > 0.5)
				{
					vector2D2.Y = 0.5;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
				for (int m = 0; m < 2; m++)
				{
					int num12 = (int)vector2D.X + WorldGen.genRand.Next(-20, 20);
					int num13 = (int)vector2D.Y + WorldGen.genRand.Next(0, 20);
					while (!Main.tile[num12, num13].active() && *Main.tile[num12, num13].type != 59)
					{
						num12 = (int)vector2D.X + WorldGen.genRand.Next(-20, 20);
						num13 = (int)vector2D.Y + WorldGen.genRand.Next(0, 20);
					}
					int num14 = WorldGen.genRand.Next(10, 20);
					int steps = WorldGen.genRand.Next(10, 20);
					WorldGen.TileRunner(num12, num13, (double)num14, steps, 59, false, 0.0, 2.0, true, true, -1);
				}
			}
		}

		// Token: 0x0600136C RID: 4972 RVA: 0x00492880 File Offset: 0x00490A80
		public unsafe static void Cavinator(int i, int j, int steps)
		{
			double num = (double)WorldGen.genRand.Next(7, 15);
			int num2 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num2 = -1;
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int num3 = WorldGen.genRand.Next(20, 40);
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.Y = (double)WorldGen.genRand.Next(10, 20) * 0.01;
			vector2D2.X = (double)num2;
			while (num3 > 0)
			{
				num3--;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				double num8 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num10 = Math.Abs((double)k - vector2D.X);
						double num9 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num10 * num10 + num9 * num9) < num8 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[k, l].type)] && *Main.tile[k, l].type != 53)
						{
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > (double)num2 + 0.5)
				{
					vector2D2.X = (double)num2 + 0.5;
				}
				if (vector2D2.X < (double)num2 - 0.5)
				{
					vector2D2.X = (double)num2 - 0.5;
				}
				if (vector2D2.Y > 2.0)
				{
					vector2D2.Y = 2.0;
				}
				if (vector2D2.Y < 0.0)
				{
					vector2D2.Y = 0.0;
				}
			}
			if (steps > 0 && (double)((int)vector2D.Y) < Main.rockLayer + 50.0)
			{
				WorldGen.Cavinator((int)vector2D.X, (int)vector2D.Y, steps - 1);
			}
		}

		// Token: 0x0600136D RID: 4973 RVA: 0x00492B94 File Offset: 0x00490D94
		public unsafe static void CaveOpenater(int i, int j)
		{
			double num = (double)WorldGen.genRand.Next(7, 12);
			int num2 = 1;
			if (WorldGen.genRand.Next(2) == 0)
			{
				num2 = -1;
			}
			if (WorldGen.genRand.Next(10) != 0)
			{
				num2 = ((i < Main.maxTilesX / 2) ? 1 : -1);
			}
			Vector2D vector2D = default(Vector2D);
			vector2D.X = (double)i;
			vector2D.Y = (double)j;
			int num3 = 100;
			Vector2D vector2D2 = default(Vector2D);
			vector2D2.Y = 0.0;
			vector2D2.X = (double)num2;
			while (num3 > 0)
			{
				Tile tile = Main.tile[(int)vector2D.X, (int)vector2D.Y];
				if (*tile.wall == 0 || (tile.active() && !TileID.Sets.CanBeClearedDuringGeneration[(int)(*tile.type)]))
				{
					num3 = 0;
				}
				num3--;
				int num4 = (int)(vector2D.X - num * 0.5);
				int num5 = (int)(vector2D.X + num * 0.5);
				int num6 = (int)(vector2D.Y - num * 0.5);
				int num7 = (int)(vector2D.Y + num * 0.5);
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesX)
				{
					num5 = Main.maxTilesX;
				}
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num7 > Main.maxTilesY)
				{
					num7 = Main.maxTilesY;
				}
				double num8 = num * (double)WorldGen.genRand.Next(80, 120) * 0.01;
				for (int k = num4; k < num5; k++)
				{
					for (int l = num6; l < num7; l++)
					{
						double num10 = Math.Abs((double)k - vector2D.X);
						double num9 = Math.Abs((double)l - vector2D.Y);
						if (Math.Sqrt(num10 * num10 + num9 * num9) < num8 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[(int)(*Main.tile[k, l].type)])
						{
							Main.tile[k, l].active(false);
						}
					}
				}
				vector2D += vector2D2;
				vector2D2.X += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				vector2D2.Y += (double)WorldGen.genRand.Next(-10, 11) * 0.05;
				if (vector2D2.X > (double)num2 + 0.5)
				{
					vector2D2.X = (double)num2 + 0.5;
				}
				if (vector2D2.X < (double)num2 - 0.5)
				{
					vector2D2.X = (double)num2 - 0.5;
				}
				if (vector2D2.Y > 0.0)
				{
					vector2D2.Y = 0.0;
				}
				if (vector2D2.Y < -0.5)
				{
					vector2D2.Y = -0.5;
				}
			}
		}

		// Token: 0x0600136E RID: 4974 RVA: 0x00492E93 File Offset: 0x00491093
		public static void DiamondTileFrame(int i, int j)
		{
			WorldGen.TileFrame(i - 1, j, false, false);
			WorldGen.TileFrame(i, j - 1, false, false);
			WorldGen.TileFrame(i, j + 1, false, false);
			WorldGen.TileFrame(i + 1, j, false, false);
		}

		// Token: 0x0600136F RID: 4975 RVA: 0x00492EC4 File Offset: 0x004910C4
		public static void SquareTileFrame(int i, int j, bool resetFrame = true)
		{
			WorldGen.TileFrame(i - 1, j - 1, false, false);
			WorldGen.TileFrame(i - 1, j, false, false);
			WorldGen.TileFrame(i - 1, j + 1, false, false);
			WorldGen.TileFrame(i, j - 1, false, false);
			WorldGen.TileFrame(i, j, resetFrame, false);
			WorldGen.TileFrame(i, j + 1, false, false);
			WorldGen.TileFrame(i + 1, j - 1, false, false);
			WorldGen.TileFrame(i + 1, j, false, false);
			WorldGen.TileFrame(i + 1, j + 1, false, false);
		}

		// Token: 0x06001370 RID: 4976 RVA: 0x00492F3C File Offset: 0x0049113C
		public static void SquareWallFrame(int i, int j, bool resetFrame = true)
		{
			Framing.WallFrame(i - 1, j - 1, false);
			Framing.WallFrame(i - 1, j, false);
			Framing.WallFrame(i - 1, j + 1, false);
			Framing.WallFrame(i, j - 1, false);
			Framing.WallFrame(i, j, resetFrame);
			Framing.WallFrame(i, j + 1, false);
			Framing.WallFrame(i + 1, j - 1, false);
			Framing.WallFrame(i + 1, j, false);
			Framing.WallFrame(i + 1, j + 1, false);
		}

		// Token: 0x06001371 RID: 4977 RVA: 0x00492FAC File Offset: 0x004911AC
		public static void SectionTileFrameWithCheck(int startX, int startY, int endX, int endY)
		{
			int sectionX3 = Netplay.GetSectionX(startX);
			int sectionY = Netplay.GetSectionY(startY);
			int sectionX2 = Netplay.GetSectionX(endX);
			int sectionY2 = Netplay.GetSectionY(endY);
			for (int i = sectionX3; i <= sectionX2; i++)
			{
				for (int j = sectionY; j <= sectionY2; j++)
				{
					if (Main.sectionManager.SectionLoaded(i, j) && !Main.sectionManager.SectionFramed(i, j))
					{
						WorldGen.SectionTileFrame(i, j, i, j);
						if (!Main.sectionManager.AnyUnfinishedSections)
						{
							return;
						}
					}
				}
			}
		}

		// Token: 0x06001372 RID: 4978 RVA: 0x00493028 File Offset: 0x00491228
		public static void RefreshSections(int startX, int startY, int endX, int endY)
		{
			int sectionX3 = Netplay.GetSectionX(startX);
			int sectionY = Netplay.GetSectionY(startY);
			int sectionX2 = Netplay.GetSectionX(endX);
			int sectionY2 = Netplay.GetSectionY(endY);
			for (int i = sectionX3; i <= sectionX2; i++)
			{
				for (int j = sectionY; j <= sectionY2; j++)
				{
					if (Main.sectionManager.SectionNeedsRefresh(i, j))
					{
						WorldGen.RefreshSection(i, j);
					}
				}
			}
		}

		// Token: 0x06001373 RID: 4979 RVA: 0x00493084 File Offset: 0x00491284
		public static void RefreshSection(int sectionX, int sectionY)
		{
			int tileStartX;
			int tileEndX;
			int tileStartY;
			int tileEndY;
			WorldGen.GetSectionBounds(sectionX, sectionY, sectionX, sectionY, out tileStartX, out tileEndX, out tileStartY, out tileEndY);
			WorldGen.noMapUpdate = true;
			int totalEcho = 0;
			int totalFramed = 0;
			for (int i = tileStartY; i < tileEndY; i += 50)
			{
				for (int j = tileStartX; j < tileEndX; j += 200)
				{
					WorldGen.RefreshStrip(j, i, Math.Min(j + 200, tileEndX), Math.Min(i + 50, tileEndY), ref totalEcho, ref totalFramed);
				}
			}
			WorldGen.noMapUpdate = false;
			Main.sectionManager.SetSectionAsRefreshed(sectionX, sectionY);
		}

		// Token: 0x06001374 RID: 4980 RVA: 0x0049310C File Offset: 0x0049130C
		public static void RefreshStrip(int xStart, int yStart, int xEnd, int yEnd, ref int totalEcho, ref int totalFramed)
		{
			int num = xStart - 1;
			int num2 = yStart - 1;
			int num3 = xEnd - xStart;
			int num4 = yEnd - yStart;
			if (num4 > 50 || num3 > 200)
			{
				throw new IndexOutOfRangeException();
			}
			int num5 = 0;
			Vertical64BitStrips vertical64BitStrips = WorldGen.bitStrip;
			for (int i = 1; i <= num3; i++)
			{
				Bits64 value = default(Bits64);
				for (int j = 1; j <= num4; j++)
				{
					Tile tile = Main.tile[num + i, num2 + j];
					if (tile != null && (tile.invisibleBlock() || tile.invisibleWall()))
					{
						num5++;
						value[j] = true;
					}
				}
				vertical64BitStrips[i] = value;
			}
			if (num5 == 0)
			{
				return;
			}
			vertical64BitStrips.Expand3x3();
			for (int k = 0; k < num3 + 2; k++)
			{
				Bits64 bits = vertical64BitStrips[k];
				if (!bits.IsEmpty)
				{
					for (int l = 0; l < num4 + 2; l++)
					{
						if (bits[l])
						{
							totalFramed++;
							WorldGen.Reframe(num + k, num2 + l, false);
						}
					}
				}
			}
			vertical64BitStrips.Clear();
			totalEcho += num5;
		}

		// Token: 0x06001375 RID: 4981 RVA: 0x0049322E File Offset: 0x0049142E
		public static void Reframe(int x, int y, bool resetFrame = false)
		{
			WorldGen.TileFrame(x, y, resetFrame, true);
			Framing.WallFrame(x, y, resetFrame);
		}

		// Token: 0x06001376 RID: 4982 RVA: 0x00493244 File Offset: 0x00491444
		public static void SectionTileFrame(int sectionStartX, int sectionStartY, int sectionEndXInclusive, int sectionEndYInclusive)
		{
			Main.mapTime = Main.mapTimeMax + 10;
			WorldGen.noMapUpdate = true;
			int tileStartX;
			int tileEndX;
			int tileStartY;
			int tileEndY;
			WorldGen.GetSectionBounds(sectionStartX, sectionStartY, sectionEndXInclusive, sectionEndYInclusive, out tileStartX, out tileEndX, out tileStartY, out tileEndY);
			for (int i = tileStartX - 1; i < tileEndX + 1; i++)
			{
				for (int j = tileStartY - 1; j < tileEndY + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					WorldGen.Reframe(i, j, true);
				}
			}
			for (int k = sectionStartX; k <= sectionEndXInclusive; k++)
			{
				for (int l = sectionStartY; l <= sectionEndYInclusive; l++)
				{
					Main.sectionManager.SetSectionFramed(k, l);
				}
			}
			WorldGen.noMapUpdate = false;
		}

		// Token: 0x06001377 RID: 4983 RVA: 0x0049330C File Offset: 0x0049150C
		public static void GetSectionBounds(int sectionStartX, int sectionStartY, int sectionEndXInclusive, int sectionEndYInclusive, out int tileStartX, out int tileEndX, out int tileStartY, out int tileEndY)
		{
			tileStartX = sectionStartX * 200;
			tileEndX = (sectionEndXInclusive + 1) * 200;
			tileStartY = sectionStartY * 150;
			tileEndY = (sectionEndYInclusive + 1) * 150;
			if (tileStartX < 1)
			{
				tileStartX = 1;
			}
			if (tileStartY < 1)
			{
				tileStartY = 1;
			}
			if (tileStartX > Main.maxTilesX - 2)
			{
				tileStartX = Main.maxTilesX - 2;
			}
			if (tileStartY > Main.maxTilesY - 2)
			{
				tileStartY = Main.maxTilesY - 2;
			}
			if (tileEndX > Main.maxTilesX - 2)
			{
				tileEndX = Main.maxTilesX - 2;
			}
			if (tileEndY > Main.maxTilesY - 2)
			{
				tileEndY = Main.maxTilesY - 2;
			}
		}

		// Token: 0x06001378 RID: 4984 RVA: 0x004933B4 File Offset: 0x004915B4
		public static void RangeFrame(int startX, int startY, int endX, int endY)
		{
			int num = endX + 1;
			int num2 = endY + 1;
			for (int i = startX - 1; i < num + 1; i++)
			{
				for (int j = startY - 1; j < num2 + 1; j++)
				{
					WorldGen.TileFrame(i, j, false, false);
					Framing.WallFrame(i, j, false);
				}
			}
		}

		// Token: 0x06001379 RID: 4985 RVA: 0x004933FC File Offset: 0x004915FC
		public unsafe static void WaterCheck()
		{
			Liquid.tilesIgnoreWater(true);
			Liquid.numLiquid = 0;
			LiquidBuffer.numLiquidBuffer = 0;
			for (int i = 1; i < Main.maxTilesX - 1; i++)
			{
				for (int num = Main.maxTilesY - 2; num > 0; num--)
				{
					Tile tile = Main.tile[i, num];
					tile.checkingLiquid(false);
					if (*tile.liquid > 0 && tile.nactive() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
					{
						*tile.liquid = 0;
					}
					else if (*tile.liquid > 0)
					{
						if (tile.active())
						{
							if (tile.lava())
							{
								if (TileObjectData.CheckLavaDeath(tile))
								{
									WorldGen.KillTile(i, num, false, false, false);
								}
							}
							else if (TileObjectData.CheckWaterDeath(tile))
							{
								WorldGen.KillTile(i, num, false, false, false);
							}
						}
						Tile tile2 = Main.tile[i, num + 1];
						if ((!tile2.nactive() || !Main.tileSolid[(int)(*tile2.type)] || Main.tileSolidTop[(int)(*tile2.type)]) && *tile2.liquid < 255)
						{
							if (*tile2.liquid > 250)
							{
								*tile2.liquid = byte.MaxValue;
							}
							else
							{
								Liquid.AddWater(i, num);
							}
						}
						Tile tile3 = Main.tile[i - 1, num];
						Tile tile4 = Main.tile[i + 1, num];
						if ((!tile3.nactive() || !Main.tileSolid[(int)(*tile3.type)] || Main.tileSolidTop[(int)(*tile3.type)]) && *tile3.liquid != *tile.liquid)
						{
							Liquid.AddWater(i, num);
						}
						else if ((!tile4.nactive() || !Main.tileSolid[(int)(*tile4.type)] || Main.tileSolidTop[(int)(*tile4.type)]) && *tile4.liquid != *tile.liquid)
						{
							Liquid.AddWater(i, num);
						}
						if (tile.lava())
						{
							if (*tile3.liquid > 0 && !tile3.lava())
							{
								Liquid.AddWater(i, num);
							}
							else if (*tile4.liquid > 0 && !tile4.lava())
							{
								Liquid.AddWater(i, num);
							}
							else if (*Main.tile[i, num - 1].liquid > 0 && !Main.tile[i, num - 1].lava())
							{
								Liquid.AddWater(i, num);
							}
							else if (*tile2.liquid > 0 && !tile2.lava())
							{
								Liquid.AddWater(i, num);
							}
						}
					}
				}
			}
			Liquid.tilesIgnoreWater(false);
		}

		// Token: 0x0600137A RID: 4986 RVA: 0x004936A0 File Offset: 0x004918A0
		public unsafe static void EveryTileFrame()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.noLiquidCheck = true;
			WorldGen.noTileActions = true;
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				float num = (float)i / (float)Main.maxTilesX;
				Main.statusText = Lang.gen[55].Value + " " + ((int)(num * 100f + 1f)).ToString() + "%";
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					if (Main.tile[i, j].active())
					{
						WorldGen.TileFrame(i, j, true, false);
					}
					if (*Main.tile[i, j].wall > 0)
					{
						Framing.WallFrame(i, j, true);
					}
				}
			}
			WorldGen.noLiquidCheck = false;
			WorldGen.noTileActions = false;
			long elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
		}

		// Token: 0x0600137B RID: 4987 RVA: 0x00493788 File Offset: 0x00491988
		public unsafe static void PlantCheck(int x, int y)
		{
			x = Utils.Clamp<int>(x, 1, Main.maxTilesX - 2);
			y = Utils.Clamp<int>(y, 1, Main.maxTilesY - 2);
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return;
					}
				}
			}
			int num = -1;
			int num2 = (int)(*Main.tile[x, y].type);
			int maxTilesX = Main.maxTilesX;
			if (y + 1 >= Main.maxTilesY)
			{
				num = num2;
			}
			if (x - 1 >= 0 && Main.tile[x - 1, y] != null && Main.tile[x - 1, y].nactive())
			{
				ref ushort type = ref Main.tile[x - 1, y].type;
			}
			if (x + 1 < Main.maxTilesX && Main.tile[x + 1, y] != null && Main.tile[x + 1, y].nactive())
			{
				ref ushort type2 = ref Main.tile[x + 1, y].type;
			}
			if (y - 1 >= 0 && Main.tile[x, y - 1] != null && Main.tile[x, y - 1].nactive())
			{
				ref ushort type3 = ref Main.tile[x, y - 1].type;
			}
			if (y + 1 < Main.maxTilesY && Main.tile[x, y + 1] != null && Main.tile[x, y + 1].nactive() && !Main.tile[x, y + 1].halfBrick() && Main.tile[x, y + 1].slope() == 0)
			{
				num = (int)(*Main.tile[x, y + 1].type);
			}
			if (x - 1 >= 0 && y - 1 >= 0 && Main.tile[x - 1, y - 1] != null && Main.tile[x - 1, y - 1].nactive())
			{
				ref ushort type4 = ref Main.tile[x - 1, y - 1].type;
			}
			if (x + 1 < Main.maxTilesX && y - 1 >= 0 && Main.tile[x + 1, y - 1] != null && Main.tile[x + 1, y - 1].nactive())
			{
				ref ushort type5 = ref Main.tile[x + 1, y - 1].type;
			}
			if (x - 1 >= 0 && y + 1 < Main.maxTilesY && Main.tile[x - 1, y + 1] != null && Main.tile[x - 1, y + 1].nactive())
			{
				ref ushort type6 = ref Main.tile[x - 1, y + 1].type;
			}
			if (x + 1 < Main.maxTilesX && y + 1 < Main.maxTilesY && Main.tile[x + 1, y + 1] != null && Main.tile[x + 1, y + 1].nactive())
			{
				ref ushort type7 = ref Main.tile[x + 1, y + 1].type;
			}
			if ((num2 != 3 || num == 2 || num == 477 || num == 78 || num == 380 || num == 579) && (num2 != 73 || num == 2 || num == 477 || num == 78 || num == 380 || num == 579) && (num2 != 24 || num == 23 || num == 661) && (num2 != 61 || num == 60) && (num2 != 74 || num == 60) && (num2 != 71 || num == 70) && (num2 != 110 || num == 109 || num == 492) && (num2 != 113 || num == 109 || num == 492) && (num2 != 201 || num == 199 || num == 662) && (num2 != 637 || num == 633))
			{
				return;
			}
			bool flag = false;
			if (num2 == 3 || num2 == 110 || num2 == 24)
			{
				flag = (*Main.tile[x, y].frameX == 144);
			}
			if (num2 == 201)
			{
				flag = (*Main.tile[x, y].frameX == 270);
			}
			if ((num2 == 3 || num2 == 73) && num != 2 && num != 477 && *Main.tile[x, y].frameX >= 162)
			{
				*Main.tile[x, y].frameX = 126;
			}
			if (num2 == 74 && num != 60 && *Main.tile[x, y].frameX >= 162)
			{
				*Main.tile[x, y].frameX = 126;
			}
			if (num > 109)
			{
				if (num <= 477)
				{
					if (num != 199)
					{
						if (num != 477)
						{
							goto IL_666;
						}
						goto IL_5C5;
					}
				}
				else
				{
					if (num == 492)
					{
						goto IL_5D5;
					}
					if (num == 661)
					{
						goto IL_585;
					}
					if (num != 662)
					{
						goto IL_666;
					}
				}
				num2 = 201;
				goto IL_666;
			}
			if (num <= 23)
			{
				if (num == 2)
				{
					goto IL_5C5;
				}
				if (num != 23)
				{
					goto IL_666;
				}
			}
			else
			{
				if (num == 60)
				{
					num2 = 61;
					while (*Main.tile[x, y].frameX > 126)
					{
						ref short frameX = ref Main.tile[x, y].frameX;
						frameX -= 126;
					}
					goto IL_666;
				}
				if (num == 70)
				{
					num2 = 71;
					while (*Main.tile[x, y].frameX > 72)
					{
						ref short frameX2 = ref Main.tile[x, y].frameX;
						frameX2 -= 72;
					}
					goto IL_666;
				}
				if (num != 109)
				{
					goto IL_666;
				}
				goto IL_5D5;
			}
			IL_585:
			num2 = 24;
			if (*Main.tile[x, y].frameX >= 162)
			{
				*Main.tile[x, y].frameX = 126;
				goto IL_666;
			}
			goto IL_666;
			IL_5C5:
			num2 = ((num2 != 113) ? 3 : 73);
			goto IL_666;
			IL_5D5:
			num2 = ((num2 != 73) ? 110 : 113);
			IL_666:
			if (num2 != (int)(*Main.tile[x, y].type))
			{
				*Main.tile[x, y].type = (ushort)num2;
				if (flag)
				{
					*Main.tile[x, y].frameX = 144;
					if (num2 == 201)
					{
						*Main.tile[x, y].frameX = 270;
						return;
					}
				}
			}
			else
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
		}

		// Token: 0x0600137C RID: 4988 RVA: 0x00493E78 File Offset: 0x00492078
		public unsafe static bool CanPoundTile(int x, int y)
		{
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = default(Tile);
			}
			if (Main.tile[x, y - 1] == null)
			{
				Main.tile[x, y - 1] = default(Tile);
			}
			if (Main.tile[x, y + 1] == null)
			{
				Main.tile[x, y + 1] = default(Tile);
			}
			ushort num = *Main.tile[x, y].type;
			if (!TileLoader.IsClosedDoor((int)(*Main.tile[x, y].type)))
			{
				if (num <= 380)
				{
					if (num <= 138)
					{
						if (num == 48 || num - 137 <= 1)
						{
							return false;
						}
					}
					else if (num == 232 || num == 380)
					{
						return false;
					}
				}
				else if (num <= 476)
				{
					if (num - 387 <= 1 || num == 476)
					{
						return false;
					}
				}
				else if (num == 484 || num - 664 <= 1)
				{
					return false;
				}
				if (WorldGen.gen)
				{
					if (*Main.tile[x, y].type == 190)
					{
						return false;
					}
					if (*Main.tile[x, y].type == 30)
					{
						return false;
					}
				}
				if (Main.tile[x, y - 1].active())
				{
					ushort t = *Main.tile[x, y - 1].type;
					if (TileID.Sets.BasicChest[(int)t] || TileID.Sets.BasicDresser[(int)t] || TileID.Sets.PreventsTileHammeringIfOnTopOfIt[(int)t])
					{
						return false;
					}
				}
				return WorldGen.CanKillTile(x, y);
			}
			return false;
		}

		// Token: 0x0600137D RID: 4989 RVA: 0x00494038 File Offset: 0x00492238
		public static bool SlopeTile(int i, int j, int slope = 0, bool noEffects = false)
		{
			if (!WorldGen.CanPoundTile(i, j))
			{
				return false;
			}
			Main.tile[i, j].halfBrick(false);
			Main.tile[i, j].slope((byte)slope);
			if (!WorldGen.gen)
			{
				if (!noEffects)
				{
					WorldGen.KillTile(i, j, true, true, false);
				}
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				WorldGen.SquareTileFrame(i, j, true);
				if (Main.tile[i, j].slope() == 0)
				{
					Rectangle rectangle;
					rectangle..ctor(i * 16, j * 16, 16, 16);
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
						{
							Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
							Main.player[k].position.Y = (float)(rectangle.Y - Main.player[k].height);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x0600137E RID: 4990 RVA: 0x004941C4 File Offset: 0x004923C4
		public static bool PoundTile(int i, int j)
		{
			if (!WorldGen.CanPoundTile(i, j))
			{
				return false;
			}
			if (!Main.tile[i, j].halfBrick())
			{
				Main.tile[i, j].halfBrick(true);
			}
			else
			{
				Main.tile[i, j].halfBrick(false);
			}
			if (!WorldGen.gen)
			{
				WorldGen.KillTile(i, j, true, true, false);
				SoundEngine.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
				WorldGen.SquareTileFrame(i, j, true);
				if (!Main.tile[i, j].halfBrick())
				{
					Rectangle rectangle;
					rectangle..ctor(i * 16, j * 16, 16, 16);
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)))
						{
							Main.player[k].gfxOffY += Main.player[k].position.Y + (float)Main.player[k].height - (float)rectangle.Y;
							Main.player[k].position.Y = (float)(rectangle.Y - Main.player[k].height);
						}
					}
				}
			}
			return true;
		}

		// Token: 0x0600137F RID: 4991 RVA: 0x00494364 File Offset: 0x00492564
		public unsafe static void PoundPlatform(int x, int y)
		{
			if (Main.tile[x, y].halfBrick())
			{
				WorldGen.PoundTile(x, y);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
				}
				return;
			}
			int num = 1;
			int slope = 2;
			if (TileID.Sets.Platforms[(int)(*Main.tile[x + 1, y - 1].type)] || TileID.Sets.Platforms[(int)(*Main.tile[x - 1, y + 1].type)] || (WorldGen.SolidTile(x + 1, y, false) && !WorldGen.SolidTile(x - 1, y, false)))
			{
				num = 2;
				slope = 1;
			}
			if (Main.tile[x, y].slope() == 0)
			{
				WorldGen.SlopeTile(x, y, num, false);
				int num2 = (int)Main.tile[x, y].slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num2, 0, 0, 0);
				}
				return;
			}
			if ((int)Main.tile[x, y].slope() == num)
			{
				WorldGen.SlopeTile(x, y, slope, false);
				int num3 = (int)Main.tile[x, y].slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num3, 0, 0, 0);
				}
				return;
			}
			WorldGen.SlopeTile(x, y, 0, false);
			int num4 = (int)Main.tile[x, y].slope();
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num4, 0, 0, 0);
			}
			WorldGen.PoundTile(x, y);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
			}
		}

		// Token: 0x06001380 RID: 4992 RVA: 0x00494520 File Offset: 0x00492720
		public unsafe static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active() || !TileID.Sets.Platforms[(int)(*tile.type)])
			{
				return 0;
			}
			int num = (int)tile.slope();
			int num2 = -1;
			if (num == 1)
			{
				num2 = 2;
			}
			if (num == 2)
			{
				num2 = 1;
			}
			int num3 = 0;
			int num4 = 1;
			int num5 = 0;
			if (num == 1)
			{
				num5 = 1;
			}
			if (num == 2)
			{
				num5 = -1;
			}
			if (acceptNonOpposing)
			{
				if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)(*Main.tile[x + num4, y + num5].type)] && (int)Main.tile[x + num4, y + num5].slope() != num2)
				{
					num3++;
				}
			}
			else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)(*Main.tile[x + num4, y + num5].type)] && (int)Main.tile[x + num4, y + num5].slope() == num)
			{
				num3++;
			}
			num4 *= -1;
			num5 *= -1;
			if (acceptNonOpposing)
			{
				if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)(*Main.tile[x + num4, y + num5].type)] && (int)Main.tile[x + num4, y + num5].slope() != num2)
				{
					num3++;
				}
			}
			else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int)(*Main.tile[x + num4, y + num5].type)] && (int)Main.tile[x + num4, y + num5].slope() == num)
			{
				num3++;
			}
			return num3;
		}

		// Token: 0x06001381 RID: 4993 RVA: 0x00494730 File Offset: 0x00492930
		public static bool UpdateMapTile(int i, int j, bool addToList = true)
		{
			bool result = false;
			if (!Main.dedServ && Main.mapEnabled && !WorldGen.noMapUpdate && !WorldGen.gen && !Main.refreshMap && Main.Map[i, j].Light > 0 && Main.Map.UpdateType(i, j) && addToList)
			{
				result = true;
				if (MapHelper.numUpdateTile < MapHelper.maxUpdateTile - 1)
				{
					MapHelper.updateTileX[MapHelper.numUpdateTile] = (short)i;
					MapHelper.updateTileY[MapHelper.numUpdateTile] = (short)j;
					MapHelper.numUpdateTile++;
				}
				else
				{
					Main.refreshMap = true;
				}
			}
			return result;
		}

		// Token: 0x06001382 RID: 4994 RVA: 0x004947CC File Offset: 0x004929CC
		public static void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up == lookfor)
			{
				WorldGen.TileFrame(i, j - 1, false, false);
				if (WorldGen.mergeDown)
				{
					up = myType;
				}
			}
			if (down == lookfor)
			{
				WorldGen.TileFrame(i, j + 1, false, false);
				if (WorldGen.mergeUp)
				{
					down = myType;
				}
			}
			if (left == lookfor)
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				if (WorldGen.mergeRight)
				{
					left = myType;
				}
			}
			if (right == lookfor)
			{
				WorldGen.TileFrame(i + 1, j, false, false);
				if (WorldGen.mergeLeft)
				{
					right = myType;
				}
			}
			if (upLeft == lookfor)
			{
				upLeft = myType;
			}
			if (upRight == lookfor)
			{
				upRight = myType;
			}
			if (downLeft == lookfor)
			{
				downLeft = myType;
			}
			if (downRight == lookfor)
			{
				downRight = myType;
			}
		}

		// Token: 0x06001383 RID: 4995 RVA: 0x00494874 File Offset: 0x00492A74
		public static void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && lookfor[up])
			{
				WorldGen.TileFrame(i, j - 1, false, false);
				if (WorldGen.mergeDown)
				{
					up = myType;
				}
			}
			if (down > -1 && lookfor[down])
			{
				WorldGen.TileFrame(i, j + 1, false, false);
				if (WorldGen.mergeUp)
				{
					down = myType;
				}
			}
			if (left > -1 && lookfor[left])
			{
				WorldGen.TileFrame(i - 1, j, false, false);
				if (WorldGen.mergeRight)
				{
					left = myType;
				}
			}
			if (right > -1 && lookfor[right])
			{
				WorldGen.TileFrame(i + 1, j, false, false);
				if (WorldGen.mergeLeft)
				{
					right = myType;
				}
			}
			if (upLeft > -1 && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001384 RID: 4996 RVA: 0x00494951 File Offset: 0x00492B51
		public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
		{
			if (lookfor == up)
			{
				up = myType;
			}
			if (lookfor == down)
			{
				down = myType;
			}
			if (lookfor == left)
			{
				left = myType;
			}
			if (lookfor == right)
			{
				right = myType;
			}
		}

		// Token: 0x06001385 RID: 4997 RVA: 0x00494977 File Offset: 0x00492B77
		public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right)
		{
			if (up > -1 && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && lookfor[right])
			{
				right = myType;
			}
		}

		// Token: 0x06001386 RID: 4998 RVA: 0x004949B8 File Offset: 0x00492BB8
		public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (lookfor == up)
			{
				up = myType;
			}
			if (lookfor == down)
			{
				down = myType;
			}
			if (lookfor == left)
			{
				left = myType;
			}
			if (lookfor == right)
			{
				right = myType;
			}
			if (lookfor == upLeft)
			{
				upLeft = myType;
			}
			if (lookfor == upRight)
			{
				upRight = myType;
			}
			if (lookfor == downLeft)
			{
				downLeft = myType;
			}
			if (lookfor == downRight)
			{
				downRight = myType;
			}
		}

		// Token: 0x06001387 RID: 4999 RVA: 0x00494A14 File Offset: 0x00492C14
		public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && lookfor[right])
			{
				right = myType;
			}
			if (upLeft > -1 && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001388 RID: 5000 RVA: 0x00494AA4 File Offset: 0x00492CA4
		public static void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && !exclude[up] && lookfor[up])
			{
				up = myType;
			}
			if (down > -1 && !exclude[down] && lookfor[down])
			{
				down = myType;
			}
			if (left > -1 && !exclude[left] && lookfor[left])
			{
				left = myType;
			}
			if (right > -1 && !exclude[right] && lookfor[right])
			{
				right = myType;
			}
			if (upLeft > -1 && !exclude[upLeft] && lookfor[upLeft])
			{
				upLeft = myType;
			}
			if (upRight > -1 && !exclude[upRight] && lookfor[upRight])
			{
				upRight = myType;
			}
			if (downLeft > -1 && !exclude[downLeft] && lookfor[downLeft])
			{
				downLeft = myType;
			}
			if (downRight > -1 && !exclude[downRight] && lookfor[downRight])
			{
				downRight = myType;
			}
		}

		// Token: 0x06001389 RID: 5001 RVA: 0x00494B70 File Offset: 0x00492D70
		public static void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
		{
			if (up > -1 && !exclude[up] && up != myType)
			{
				up = changeTo;
			}
			if (down > -1 && !exclude[down] && down != myType)
			{
				down = changeTo;
			}
			if (left > -1 && !exclude[left] && left != myType)
			{
				left = changeTo;
			}
			if (right > -1 && !exclude[right] && right != myType)
			{
				right = changeTo;
			}
			if (upLeft > -1 && !exclude[upLeft] && upLeft != myType)
			{
				upLeft = changeTo;
			}
			if (upRight > -1 && !exclude[upRight] && upRight != myType)
			{
				upRight = changeTo;
			}
			if (downLeft > -1 && !exclude[downLeft] && downLeft != myType)
			{
				downLeft = changeTo;
			}
			if (downRight > -1 && !exclude[downRight] && downRight != myType)
			{
				downRight = changeTo;
			}
		}

		// Token: 0x0600138A RID: 5002 RVA: 0x00494C34 File Offset: 0x00492E34
		public static int GetTileMossColor(int tileType)
		{
			if (tileType <= 517)
			{
				switch (tileType)
				{
				case 179:
					break;
				case 180:
					return 1;
				case 181:
					return 2;
				case 182:
					return 3;
				case 183:
					return 4;
				default:
					if (tileType != 381)
					{
						switch (tileType)
						{
						case 512:
							return 0;
						case 513:
							return 1;
						case 514:
							return 2;
						case 515:
							return 3;
						case 516:
							return 4;
						case 517:
							break;
						default:
							return -1;
						}
					}
					return 5;
				}
				return 0;
			}
			switch (tileType)
			{
			case 534:
			case 535:
				return 6;
			case 536:
			case 537:
				return 7;
			case 538:
				break;
			case 539:
			case 540:
				return 8;
			default:
				if (tileType - 625 <= 1)
				{
					return 9;
				}
				if (tileType - 627 <= 1)
				{
					return 10;
				}
				break;
			}
			return -1;
		}

		// Token: 0x0600138B RID: 5003 RVA: 0x00494CEC File Offset: 0x00492EEC
		public unsafe static void CheckFoodPlatter(int x, int y, int type)
		{
			if (Main.tile[x, y] == null || WorldGen.destroyObject || WorldGen.SolidTileAllowBottomSlope(x, y + 1))
			{
				return;
			}
			if (type == 520)
			{
				int num = TEFoodPlatter.Find(x, y);
				if (num != -1 && ((TEFoodPlatter)TileEntity.ByID[num]).item.stack > 0)
				{
					((TEFoodPlatter)TileEntity.ByID[num]).DropItem();
					if (Main.netMode != 2)
					{
						Main.LocalPlayer.InterruptItemUsageIfOverTile(520);
					}
				}
			}
			WorldGen.destroyObject = true;
			if ((int)(*Main.tile[x, y].type) == type)
			{
				WorldGen.KillTile(x, y, false, false, false);
			}
			if (type == 520)
			{
				TEFoodPlatter.Kill(x, y);
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x0600138C RID: 5004 RVA: 0x00494DBC File Offset: 0x00492FBC
		public unsafe static void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
		{
			bool addToList = false;
			try
			{
				if (i > 5 && j > 5 && i < Main.maxTilesX - 5 && j < Main.maxTilesY - 5 && Main.tile[i, j] != null)
				{
					if (WorldGen.SkipFramingBecauseOfGen && !Main.tileFrameImportant[(int)(*Main.tile[i, j].type)])
					{
						return;
					}
					addToList = WorldGen.UpdateMapTile(i, j, true);
					Tile tile = Main.tile[i, j];
					if (!tile.active())
					{
						tile.halfBrick(false);
						tile.ClearBlockPaintAndCoating();
						tile.slope(0);
					}
					if (*tile.liquid > 0 && Main.netMode != 1 && !WorldGen.noLiquidCheck)
					{
						Liquid.AddWater(i, j);
					}
					if (tile.active())
					{
						if (!TileLoader.TileFrame(i, j, (int)(*tile.type), ref resetFrame, ref noBreak))
						{
							return;
						}
						if (noBreak && Main.tileFrameImportant[(int)(*tile.type)] && !TileID.Sets.Torch[(int)(*tile.type)])
						{
							return;
						}
						int num = (int)(*tile.type);
						if (Main.tileStone[num])
						{
							num = 1;
						}
						int frameX = (int)(*tile.frameX);
						int frameY = (int)(*tile.frameY);
						Rectangle rectangle;
						rectangle..ctor(-1, -1, 0, 0);
						int num43;
						if (Main.tileFrameImportant[(int)(*tile.type)])
						{
							num43 = num;
							if (num43 <= 519)
							{
								if (num43 == 518)
								{
									WorldGen.CheckLilyPad(i, j);
									goto IL_2941;
								}
								if (num43 == 519)
								{
									WorldGen.CheckCatTail(i, j);
									goto IL_2941;
								}
							}
							else
							{
								if (num43 == 549)
								{
									WorldGen.CheckUnderwaterPlant(549, i, j);
									goto IL_2941;
								}
								if (num43 == 571)
								{
									WorldGen.CheckBamboo(i, j);
									goto IL_2941;
								}
							}
							if (TileID.Sets.Torch[num])
							{
								WorldGen.CheckTorch(i, j);
							}
							else
							{
								if (num43 <= 136)
								{
									if (num43 != 129)
									{
										if (num43 != 136)
										{
											goto IL_6C9;
										}
										Tile tile2 = Main.tile[i, j - 1];
										Tile tile3 = Main.tile[i, j + 1];
										Tile tile4 = Main.tile[i - 1, j];
										Tile tile5 = Main.tile[i + 1, j];
										Tile tile6 = Main.tile[i - 1, j + 1];
										Tile tile7 = Main.tile[i + 1, j + 1];
										Tile tile8 = Main.tile[i - 1, j - 1];
										Tile tile9 = Main.tile[i + 1, j - 1];
										int num2 = -1;
										int num3 = -1;
										int num4 = -1;
										int tree = -1;
										int tree2 = -1;
										int tree3 = -1;
										int tree4 = -1;
										if (tile2 != null && tile2.nactive())
										{
											ref ushort type = ref tile2.type;
										}
										if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
										{
											num2 = (int)(*tile3.type);
										}
										if (tile4 != null && tile4.nactive())
										{
											num3 = (int)(*tile4.type);
										}
										if (tile5 != null && tile5.nactive())
										{
											num4 = (int)(*tile5.type);
										}
										if (tile6 != null && tile6.nactive())
										{
											tree = (int)(*tile6.type);
										}
										if (tile7 != null && tile7.nactive())
										{
											tree2 = (int)(*tile7.type);
										}
										if (tile8 != null && tile8.nactive())
										{
											tree3 = (int)(*tile8.type);
										}
										if (tile9 != null && tile9.nactive())
										{
											tree4 = (int)(*tile9.type);
										}
										if (num2 >= 0 && Main.tileSolid[num2] && !Main.tileNoAttach[num2] && tile3 != null && !tile3.halfBrick() && (tile3.slope() == 0 || tile3.bottomSlope()))
										{
											*tile.frameX = 0;
											goto IL_2941;
										}
										if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3] && tile4 != null && (tile4.leftSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
										{
											*tile.frameX = 18;
											goto IL_2941;
										}
										if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4] && tile5 != null && (tile5.rightSlope() || tile5.slope() == 0) && !tile5.halfBrick()) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
										{
											*tile.frameX = 36;
											goto IL_2941;
										}
										if (*tile.wall > 0)
										{
											*tile.frameX = 54;
											goto IL_2941;
										}
										WorldGen.KillTile(i, j, false, false, false);
										goto IL_2941;
									}
								}
								else if (num43 != 149)
								{
									if (num43 - 373 <= 2)
									{
										goto IL_28EB;
									}
									if (num43 != 442)
									{
										goto IL_6C9;
									}
									WorldGen.CheckProjectilePressurePad(i, j);
									goto IL_2941;
								}
								Tile tile10 = Main.tile[i, j - 1];
								Tile tile11 = Main.tile[i, j + 1];
								Tile tile12 = Main.tile[i - 1, j];
								Tile tile13 = Main.tile[i + 1, j];
								int num5 = -1;
								int num6 = -1;
								int num7 = -1;
								int num8 = -1;
								if (tile10 != null && tile10.nactive() && !tile10.bottomSlope())
								{
									num6 = (int)(*tile10.type);
								}
								if (tile11 != null && tile11.nactive() && !tile11.halfBrick() && !tile11.topSlope())
								{
									num5 = (int)(*tile11.type);
								}
								if (tile12 != null && tile12.nactive() && !tile13.rightSlope())
								{
									num7 = (int)(*tile12.type);
								}
								if (tile13 != null && tile13.nactive() && !tile13.leftSlope())
								{
									num8 = (int)(*tile13.type);
								}
								if (num5 >= 0 && Main.tileSolid[num5] && !Main.tileSolidTop[num5])
								{
									*tile.frameY = 0;
									goto IL_2941;
								}
								if (num7 >= 0 && Main.tileSolid[num7] && !Main.tileSolidTop[num7])
								{
									*tile.frameY = 54;
									goto IL_2941;
								}
								if (num8 >= 0 && Main.tileSolid[num8] && !Main.tileSolidTop[num8])
								{
									*tile.frameY = 36;
									goto IL_2941;
								}
								if (num6 >= 0 && Main.tileSolid[num6] && !Main.tileSolidTop[num6])
								{
									*tile.frameY = 18;
									goto IL_2941;
								}
								WorldGen.KillTile(i, j, false, false, false);
								goto IL_2941;
								IL_6C9:
								if (num != 461)
								{
									if (num <= 178)
									{
										if (num <= 61)
										{
											if (num <= 12)
											{
												if (num != 3)
												{
													if (num != 12)
													{
														goto IL_D94;
													}
													goto IL_D45;
												}
											}
											else if (num != 24)
											{
												if (num == 31)
												{
													goto IL_D45;
												}
												if (num != 61)
												{
													goto IL_D94;
												}
											}
										}
										else if (num <= 110)
										{
											if (num != 71 && num - 73 > 1 && num != 110)
											{
												goto IL_D94;
											}
										}
										else if (num != 113)
										{
											if (num == 165)
											{
												WorldGen.CheckTight(i, j);
												goto IL_2941;
											}
											if (num != 178)
											{
												goto IL_D94;
											}
											Tile tile14 = Main.tile[i, j - 1];
											Tile tile15 = Main.tile[i, j + 1];
											Tile tile16 = Main.tile[i - 1, j];
											Tile tile17 = Main.tile[i + 1, j];
											int num9 = -1;
											int num10 = -1;
											int num11 = -1;
											int num12 = -1;
											if (tile14 != null && tile14.nactive() && !tile14.bottomSlope())
											{
												num10 = (int)(*tile14.type);
											}
											if (tile15 != null && tile15.nactive() && !tile15.halfBrick() && !tile15.topSlope())
											{
												num9 = (int)(*tile15.type);
											}
											if (tile16 != null && tile16.nactive() && !tile16.halfBrick() && !tile16.rightSlope())
											{
												num11 = (int)(*tile16.type);
											}
											if (tile17 != null && tile17.nactive() && !tile17.halfBrick() && !tile17.leftSlope())
											{
												num12 = (int)(*tile17.type);
											}
											if (num11 == 10)
											{
												num11 = -1;
											}
											if (num12 == 10)
											{
												num12 = -1;
											}
											short num13 = (short)(WorldGen.genRand.Next(3) * 18);
											if (num9 >= 0 && Main.tileSolid[num9] && !Main.tileSolidTop[num9])
											{
												if (*tile.frameY < 0 || *tile.frameY > 36)
												{
													*tile.frameY = num13;
													goto IL_2941;
												}
												goto IL_2941;
											}
											else if (num11 >= 0 && Main.tileSolid[num11] && !Main.tileSolidTop[num11])
											{
												if (*tile.frameY < 108 || *tile.frameY > 54)
												{
													*tile.frameY = 108 + num13;
													goto IL_2941;
												}
												goto IL_2941;
											}
											else if (num12 >= 0 && Main.tileSolid[num12] && !Main.tileSolidTop[num12])
											{
												if (*tile.frameY < 162 || *tile.frameY > 198)
												{
													*tile.frameY = 162 + num13;
													goto IL_2941;
												}
												goto IL_2941;
											}
											else
											{
												if (num10 < 0 || !Main.tileSolid[num10] || Main.tileSolidTop[num10])
												{
													WorldGen.KillTile(i, j, false, false, false);
													goto IL_2941;
												}
												if (*tile.frameY < 54 || *tile.frameY > 90)
												{
													*tile.frameY = 54 + num13;
													goto IL_2941;
												}
												goto IL_2941;
											}
										}
									}
									else if (num <= 235)
									{
										if (num <= 185)
										{
											if (num != 184)
											{
												if (num != 185)
												{
													goto IL_D94;
												}
												WorldGen.CheckPile(i, j);
												goto IL_2941;
											}
											else
											{
												Tile tile18 = Main.tile[i, j - 1];
												Tile tile19 = Main.tile[i, j + 1];
												Tile tile20 = Main.tile[i - 1, j];
												Tile tile21 = Main.tile[i + 1, j];
												int num14 = -1;
												int num15 = -1;
												int num16 = -1;
												int num17 = -1;
												if (tile18 != null && tile18.active() && !tile18.bottomSlope())
												{
													num15 = (int)(*tile18.type);
												}
												if (tile19 != null && tile19.active() && !tile19.halfBrick() && !tile19.topSlope())
												{
													num14 = (int)(*tile19.type);
												}
												if (tile20 != null && tile20.active())
												{
													num16 = (int)(*tile20.type);
												}
												if (tile21 != null && tile21.active())
												{
													num17 = (int)(*tile21.type);
												}
												short num18 = (short)(WorldGen.genRand.Next(3) * 18);
												if (num14 >= 0 && WorldGen.GetTileMossColor(num14) != -1)
												{
													*tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num14));
													if (*tile.frameY < 0 || *tile.frameY > 36)
													{
														*tile.frameY = num18;
														goto IL_2941;
													}
													goto IL_2941;
												}
												else if (num15 >= 0 && WorldGen.GetTileMossColor(num15) != -1)
												{
													*tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num15));
													if (*tile.frameY < 54 || *tile.frameY > 90)
													{
														*tile.frameY = 54 + num18;
														goto IL_2941;
													}
													goto IL_2941;
												}
												else if (num16 >= 0 && WorldGen.GetTileMossColor(num16) != -1)
												{
													*tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num16));
													if (*tile.frameY < 108 || *tile.frameY > 144)
													{
														*tile.frameY = 108 + num18;
														goto IL_2941;
													}
													goto IL_2941;
												}
												else
												{
													if (num17 < 0 || WorldGen.GetTileMossColor(num17) == -1)
													{
														WorldGen.KillTile(i, j, false, false, false);
														goto IL_2941;
													}
													*tile.frameX = (short)(22 * WorldGen.GetTileMossColor(num17));
													if (*tile.frameY < 162 || *tile.frameY > 198)
													{
														*tile.frameY = 162 + num18;
														goto IL_2941;
													}
													goto IL_2941;
												}
											}
										}
										else if (num != 201)
										{
											if (num == 227)
											{
												WorldGen.CheckDye(i, j);
												goto IL_2941;
											}
											if (num != 235)
											{
												goto IL_D94;
											}
											WorldGen.Check3x1(i, j, num);
											goto IL_2941;
										}
									}
									else if (num <= 529)
									{
										if (num - 275 <= 6)
										{
											goto IL_28E1;
										}
										if (num != 324)
										{
											if (num != 529)
											{
												goto IL_D94;
											}
											if (!WorldGen.SolidTileAllowBottomSlope(i, j + 1))
											{
												WorldGen.KillTile(i, j, false, false, false);
												goto IL_2941;
											}
											Tile tile22 = Main.tile[i, j + 1];
											short num44 = *Main.tile[i, j].frameY / 34;
											if (tile22 == null || !tile22.active() || (*tile22.type >= 0 && !TileID.Sets.Conversion.Sand[(int)(*tile22.type)]))
											{
												WorldGen.KillTile(i, j, false, false, false);
												goto IL_2941;
											}
											goto IL_2941;
										}
										else
										{
											if (!WorldGen.SolidTileAllowBottomSlope(i, j + 1))
											{
												WorldGen.KillTile(i, j, false, false, false);
												goto IL_2941;
											}
											goto IL_2941;
										}
									}
									else
									{
										if (num == 579)
										{
											WorldGen.CheckRockGolemHead(i, j);
											goto IL_2941;
										}
										if (num != 637)
										{
											if (num != 639)
											{
												goto IL_D94;
											}
											goto IL_D45;
										}
									}
									WorldGen.PlantCheck(i, j);
									goto IL_2941;
									IL_D45:
									WorldGen.CheckOrb(i, j, num);
									goto IL_2941;
									IL_D94:
									if (num != 296 && num != 297 && num != 309 && num != 358 && num != 359 && num != 413 && num != 414 && num != 542 && num != 550 && num != 551 && num != 553 && num != 554 && num != 558 && num != 559 && num != 599 && num != 600 && num != 601 && num != 602 && num != 603 && num != 604 && num != 605 && num != 606 && num != 607 && num != 608 && num != 609 && num != 610 && num != 611 && num != 612 && num != 632 && num != 640 && num != 643 && num != 644 && num != 645)
									{
										if (num == 10)
										{
											WorldGen.CheckDoorClosed(i, j, tile, num);
											goto IL_2941;
										}
										if (num == 11)
										{
											WorldGen.CheckDoorOpen(i, j, tile);
											goto IL_2941;
										}
										if (num == 314)
										{
											Minecart.FrameTrack(i, j, false, false);
											Tile tile23 = Main.tile[i, j - 1];
											Tile tile24 = Main.tile[i, j + 1];
											if (tile23 != null && *tile23.type >= 0 && Main.tileRope[(int)(*tile23.type)])
											{
												WorldGen.TileFrame(i, j - 1, false, false);
											}
											if (tile24 != null && *tile24.type >= 0 && Main.tileRope[(int)(*tile24.type)])
											{
												WorldGen.TileFrame(i, j + 1, false, false);
												goto IL_2941;
											}
											goto IL_2941;
										}
										else if (num == 380)
										{
											Tile tile25 = Main.tile[i - 1, j];
											if (tile25 == null)
											{
												goto IL_2941;
											}
											Tile tile26 = Main.tile[i + 1, j];
											if (!(tile26 == null) && !(Main.tile[i - 1, j + 1] == null) && !(Main.tile[i + 1, j + 1] == null) && !(Main.tile[i - 1, j - 1] == null) && Main.tile[i + 1, j - 1] != null)
											{
												int num19 = -1;
												int num20 = -1;
												if (tile25 != null && tile25.active())
												{
													num20 = (int)(Main.tileStone[(int)(*tile25.type)] ? 1 : (*tile25.type));
												}
												if (tile26 != null && tile26.active())
												{
													num19 = (int)(Main.tileStone[(int)(*tile26.type)] ? 1 : (*tile26.type));
												}
												if (num19 >= 0 && !Main.tileSolid[num19])
												{
													num19 = -1;
												}
												if (num20 >= 0 && !Main.tileSolid[num20])
												{
													num20 = -1;
												}
												if (num20 == num && num19 == num)
												{
													rectangle.X = 18;
												}
												else if (num20 == num && num19 != num)
												{
													rectangle.X = 36;
												}
												else if (num20 != num && num19 == num)
												{
													rectangle.X = 0;
												}
												else
												{
													rectangle.X = 54;
												}
												*tile.frameX = (short)rectangle.X;
												goto IL_2941;
											}
											goto IL_2941;
										}
										else
										{
											if (num < 0 || !TileID.Sets.Platforms[num])
											{
												if (num <= 440)
												{
													if (num > 220)
													{
														if (num <= 283)
														{
															switch (num)
															{
															case 228:
															case 231:
															case 243:
															case 247:
																goto IL_28D6;
															case 229:
															case 230:
															case 232:
															case 234:
															case 235:
															case 237:
															case 239:
															case 244:
																goto IL_198B;
															case 233:
															case 236:
															case 238:
																WorldGen.CheckJunglePlant(i, j, num);
																goto IL_2941;
															case 240:
																break;
															case 241:
																WorldGen.Check4x3Wall(i, j);
																goto IL_2941;
															case 242:
																WorldGen.Check6x4Wall(i, j);
																goto IL_2941;
															case 245:
																WorldGen.Check2x3Wall(i, j);
																goto IL_2941;
															case 246:
																WorldGen.Check3x2Wall(i, j);
																goto IL_2941;
															default:
																if (num != 283)
																{
																	goto IL_198B;
																}
																goto IL_28D6;
															}
														}
														else
														{
															if (num - 300 <= 8)
															{
																goto IL_28D6;
															}
															if (num == 334)
															{
																WorldGen.CheckWeaponsRack(i, j);
																goto IL_2941;
															}
															if (num != 440)
															{
																goto IL_198B;
															}
														}
														WorldGen.Check3x3Wall(i, j);
														goto IL_2941;
													}
													if (num <= 106)
													{
														if (num != 34)
														{
															if (num != 106)
															{
																goto IL_198B;
															}
															goto IL_28D6;
														}
													}
													else
													{
														if (num != 212 && num - 219 > 1)
														{
															goto IL_198B;
														}
														goto IL_28D6;
													}
												}
												else
												{
													if (num <= 530)
													{
														if (num <= 464)
														{
															if (num == 454)
															{
																goto IL_1957;
															}
															if (num != 464)
															{
																goto IL_198B;
															}
														}
														else if (num != 466)
														{
															if (num == 471)
															{
																TEWeaponsRack.Framing_CheckTile(i, j);
																goto IL_2941;
															}
															if (num != 530)
															{
																goto IL_198B;
															}
															WorldGen.CheckOasisPlant(i, j, 530);
															goto IL_2941;
														}
														WorldGen.Check5x4(i, j, num);
														goto IL_2941;
													}
													if (num <= 548)
													{
														if (num != 547)
														{
															if (num != 548)
															{
																goto IL_198B;
															}
															goto IL_1971;
														}
													}
													else
													{
														if (num == 613)
														{
															WorldGen.Check3x5(i, j, num);
															goto IL_2941;
														}
														if (num == 614)
														{
															goto IL_1971;
														}
														if (num != 623)
														{
															goto IL_198B;
														}
													}
													WorldGen.Check2x5(i, j, num);
													goto IL_2941;
													IL_1971:
													WorldGen.Check3x6(i, j, num);
													goto IL_2941;
												}
												IL_1957:
												WorldGen.CheckChand(i, j, num);
												goto IL_2941;
												IL_198B:
												if (num != 354 && num != 406 && num != 412 && num != 355 && num != 452 && num != 455 && num != 491 && num != 499 && num != 642)
												{
													int num45 = num;
													if (num45 != 15 && !TileID.Sets.TreeSapling[num])
													{
														if (num45 <= 299)
														{
															if (num45 <= 114)
															{
																if (num45 <= 26)
																{
																	if (num45 == 14 || num45 == 17 || num45 == 26)
																	{
																		goto IL_28CB;
																	}
																}
																else if (num45 == 77 || num45 - 86 <= 3 || num45 == 114)
																{
																	goto IL_28CB;
																}
															}
															else if (num45 <= 218)
															{
																if (num45 == 133 || num45 - 186 <= 1)
																{
																	goto IL_28CB;
																}
																switch (num45)
																{
																case 215:
																case 217:
																case 218:
																	goto IL_28CB;
																case 216:
																	goto IL_1BAE;
																}
															}
															else if (num45 <= 244)
															{
																if (num45 == 237 || num45 == 244)
																{
																	goto IL_28CB;
																}
															}
															else if (num45 - 285 <= 1 || num45 - 298 <= 1)
															{
																goto IL_28CB;
															}
														}
														else if (num45 <= 390)
														{
															if (num45 <= 339)
															{
																if (num45 == 310)
																{
																	goto IL_28CB;
																}
																if (num45 == 338)
																{
																	goto IL_1BAE;
																}
																if (num45 == 339)
																{
																	goto IL_28CB;
																}
															}
															else
															{
																if (num45 - 361 <= 3 || num45 == 377)
																{
																	goto IL_28CB;
																}
																if (num45 == 390)
																{
																	goto IL_1BAE;
																}
															}
														}
														else if (num45 <= 497)
														{
															if (num45 == 469)
															{
																goto IL_28CB;
															}
															if (num45 == 493 || num45 == 497)
															{
																goto IL_1BAE;
															}
														}
														else if (num45 <= 590)
														{
															if (num45 == 538)
															{
																goto IL_28CB;
															}
															if (num45 == 590)
															{
																goto IL_1BAE;
															}
														}
														else if (num45 == 595 || num45 == 615)
														{
															goto IL_1BAE;
														}
														if (num < 391 || num > 394)
														{
															if (num <= 372)
															{
																if (num <= 78)
																{
																	if (num <= 29)
																	{
																		if (num <= 16)
																		{
																			if (num == 13)
																			{
																				goto IL_1E90;
																			}
																			if (num != 16)
																			{
																				goto IL_1E9D;
																			}
																			goto IL_1E82;
																		}
																		else
																		{
																			if (num != 18 && num != 29)
																			{
																				goto IL_1E9D;
																			}
																			goto IL_1E82;
																		}
																	}
																	else if (num <= 36)
																	{
																		if (num == 33)
																		{
																			goto IL_1E90;
																		}
																		if (num != 36)
																		{
																			goto IL_1E9D;
																		}
																	}
																	else
																	{
																		if (num - 49 > 1 && num != 78)
																		{
																			goto IL_1E9D;
																		}
																		goto IL_1E90;
																	}
																}
																else if (num <= 141)
																{
																	if (num <= 134)
																	{
																		if (num != 103 && num != 134)
																		{
																			goto IL_1E9D;
																		}
																		goto IL_1E82;
																	}
																	else if (num != 135 && num != 141)
																	{
																		goto IL_1E9D;
																	}
																}
																else if (num <= 174)
																{
																	if (num != 144)
																	{
																		if (num != 174)
																		{
																			goto IL_1E9D;
																		}
																		goto IL_1E90;
																	}
																}
																else if (num != 210 && num != 239)
																{
																	if (num != 372)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_1E90;
																}
															}
															else if (num <= 533)
															{
																if (num <= 462)
																{
																	if (num <= 429)
																	{
																		if (num == 405)
																		{
																			goto IL_28CB;
																		}
																		switch (num)
																		{
																		case 419:
																		case 420:
																		case 423:
																		case 424:
																		case 429:
																			break;
																		case 421:
																		case 422:
																		case 425:
																		case 426:
																		case 427:
																			goto IL_1E9D;
																		case 428:
																			goto IL_1E4E;
																		default:
																			goto IL_1E9D;
																		}
																	}
																	else if (num != 445)
																	{
																		if (num != 462)
																		{
																			goto IL_1E9D;
																		}
																		goto IL_1E82;
																	}
																	WorldGen.CheckLogicTiles(i, j, num);
																	return;
																}
																if (num <= 486)
																{
																	if (num == 476)
																	{
																		WorldGen.CheckGolf1x1(i, j, num);
																		return;
																	}
																	if (num != 486)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_28CB;
																}
																else
																{
																	if (num == 488)
																	{
																		goto IL_28CB;
																	}
																	if (num == 494)
																	{
																		WorldGen.CheckGolf1x1(i, j, num);
																		return;
																	}
																	if (num - 532 > 1)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_28CB;
																}
															}
															else if (num <= 582)
															{
																if (num <= 552)
																{
																	if (num != 544 && num != 552)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_28CB;
																}
																else
																{
																	if (num - 555 > 1 && num != 582)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_28CB;
																}
															}
															else if (num <= 619)
															{
																if (num != 593)
																{
																	if (num != 619)
																	{
																		goto IL_1E9D;
																	}
																	goto IL_28CB;
																}
															}
															else if (num != 624)
															{
																if (num == 629)
																{
																	goto IL_28CB;
																}
																switch (num)
																{
																case 646:
																	goto IL_1E90;
																case 647:
																case 648:
																case 651:
																	goto IL_28CB;
																case 649:
																	goto IL_1E82;
																case 650:
																case 656:
																	break;
																case 652:
																case 653:
																case 654:
																case 655:
																	goto IL_1E9D;
																default:
																	goto IL_1E9D;
																}
															}
															IL_1E4E:
															WorldGen.Check1x1(i, j, num);
															return;
															IL_1E82:
															WorldGen.Check2x1(i, j, (ushort)num);
															return;
															IL_1E90:
															WorldGen.CheckOnTable1x1(i, j, num);
															return;
															IL_1E9D:
															if (TileID.Sets.BasicChest[num] && num < (int)TileID.Count)
															{
																WorldGen.CheckChest(i, j, num);
																return;
															}
															if (num <= 254)
															{
																if (num <= 28)
																{
																	if (num == 27)
																	{
																		WorldGen.CheckSunflower(i, j, 27);
																		goto IL_28C6;
																	}
																	if (num != 28)
																	{
																		goto IL_1F97;
																	}
																}
																else
																{
																	if (num == 128)
																	{
																		WorldGen.CheckMan(i, j);
																		goto IL_28C6;
																	}
																	if (num == 171)
																	{
																		WorldGen.CheckXmasTree(i, j);
																		goto IL_28C6;
																	}
																	if (num != 254)
																	{
																		goto IL_1F97;
																	}
																	goto IL_28BE;
																}
															}
															else if (num <= 470)
															{
																if (num == 269)
																{
																	WorldGen.CheckWoman(i, j);
																	goto IL_28C6;
																}
																if (num != 470)
																{
																	goto IL_1F97;
																}
																TEDisplayDoll.Framing_CheckTile(i, j);
																goto IL_28C6;
															}
															else
															{
																if (num == 475)
																{
																	TEHatRack.Framing_CheckTile(i, j);
																	goto IL_28C6;
																}
																if (num == 597)
																{
																	TETeleportationPylon.Framing_CheckTile(i, j);
																	goto IL_28C6;
																}
																if (num != 653)
																{
																	goto IL_1F97;
																}
															}
															WorldGen.CheckPot(i, j, num);
															goto IL_28C6;
															IL_1F97:
															if ((!TileID.Sets.BasicChestFake[num] && num != 457) || num >= (int)TileID.Count)
															{
																if (num <= 335)
																{
																	if (num <= 138)
																	{
																		if (num != 132 && num != 138)
																		{
																			goto IL_2052;
																		}
																		goto IL_28B4;
																	}
																	else
																	{
																		if (num - 142 <= 1 || num - 288 <= 7)
																		{
																			goto IL_28B4;
																		}
																		if (num != 335)
																		{
																			goto IL_2052;
																		}
																	}
																}
																else if (num <= 490)
																{
																	if (num != 411)
																	{
																		if (num == 484)
																		{
																			goto IL_28B4;
																		}
																		if (num != 490)
																		{
																			goto IL_2052;
																		}
																	}
																}
																else if (num - 564 > 1 && num != 594)
																{
																	if (num - 664 > 1)
																	{
																		goto IL_2052;
																	}
																	goto IL_28B4;
																}
																WorldGen.Check2x2(i, j, num);
																goto IL_28C6;
																IL_2052:
																if (num < 316 || num > 318)
																{
																	if (num <= 387)
																	{
																		if (num <= 271)
																		{
																			if (num <= 126)
																			{
																				if (num <= 42)
																				{
																					if (num != 35)
																					{
																						if (num != 42)
																						{
																							goto IL_25FB;
																						}
																						goto IL_24D4;
																					}
																				}
																				else
																				{
																					if (num == 55)
																					{
																						goto IL_24E2;
																					}
																					switch (num)
																					{
																					case 79:
																					case 90:
																						goto IL_250B;
																					case 80:
																					case 82:
																					case 83:
																					case 84:
																					case 86:
																					case 87:
																					case 88:
																					case 89:
																					case 103:
																						goto IL_25FB;
																					case 81:
																					{
																						Tile tile27 = Main.tile[i, j - 1];
																						Tile tile28 = Main.tile[i, j + 1];
																						Tile tile46 = Main.tile[i - 1, j];
																						Tile tile47 = Main.tile[i + 1, j];
																						int num21 = -1;
																						int num22 = -1;
																						if (tile27 != null && tile27.active())
																						{
																							num22 = (int)(*tile27.type);
																						}
																						if (tile28 != null && tile28.active())
																						{
																							num21 = (int)(*tile28.type);
																						}
																						if (num22 != -1)
																						{
																							WorldGen.KillTile(i, j, false, false, false);
																						}
																						else if (num21 < 0 || !Main.tileSolid[num21] || (tile28 != null && (tile28.halfBrick() || tile28.topSlope())))
																						{
																							WorldGen.KillTile(i, j, false, false, false);
																						}
																						return;
																					}
																					case 85:
																						goto IL_24E2;
																					case 91:
																						WorldGen.CheckBanner(i, j, (byte)num);
																						return;
																					case 92:
																					case 93:
																						goto IL_24AB;
																					case 94:
																					case 95:
																					case 97:
																					case 98:
																					case 99:
																					case 100:
																						goto IL_2518;
																					case 96:
																						WorldGen.Check2x2Style(i, j, num);
																						return;
																					case 101:
																					case 102:
																						goto IL_24C7;
																					case 104:
																					case 105:
																						goto IL_24B9;
																					default:
																						if (num - 125 > 1)
																						{
																							goto IL_25FB;
																						}
																						goto IL_2518;
																					}
																				}
																			}
																			else if (num <= 173)
																			{
																				if (num != 139)
																				{
																					if (num == 172)
																					{
																						goto IL_28B4;
																					}
																					if (num != 173)
																					{
																						goto IL_25FB;
																					}
																					goto IL_2518;
																				}
																			}
																			else
																			{
																				if (num == 207)
																				{
																					goto IL_24B9;
																				}
																				if (num == 209)
																				{
																					WorldGen.CheckCannon(i, j, num);
																					return;
																				}
																				if (num - 270 > 1)
																				{
																					goto IL_25FB;
																				}
																				goto IL_24D4;
																			}
																			WorldGen.CheckMB(i, j, (int)((byte)num));
																			return;
																		}
																		if (num <= 337)
																		{
																			if (num <= 287)
																			{
																				if (num != 282 && num != 287)
																				{
																					goto IL_25FB;
																				}
																				goto IL_2518;
																			}
																			else
																			{
																				if (num == 319)
																				{
																					goto IL_2518;
																				}
																				if (num != 320 && num != 337)
																				{
																					goto IL_25FB;
																				}
																				goto IL_24B9;
																			}
																		}
																		else if (num <= 360)
																		{
																			if (num == 349 || num == 356)
																			{
																				goto IL_24B9;
																			}
																			if (num != 360)
																			{
																				goto IL_25FB;
																			}
																			goto IL_28B4;
																		}
																		else if (num != 376)
																		{
																			if (num == 378)
																			{
																				goto IL_24B9;
																			}
																			if (num - 386 > 1)
																			{
																				goto IL_25FB;
																			}
																			WorldGen.CheckTrapDoor(i, j, num);
																			return;
																		}
																	}
																	else if (num <= 489)
																	{
																		if (num <= 444)
																		{
																			if (num <= 395)
																			{
																				if (num - 388 <= 1)
																				{
																					WorldGen.CheckTallGate(i, j, num);
																					return;
																				}
																				if (num != 395)
																				{
																					goto IL_25FB;
																				}
																				goto IL_24E2;
																			}
																			else
																			{
																				if (num == 410)
																				{
																					goto IL_24B9;
																				}
																				if (num == 425)
																				{
																					goto IL_24E2;
																				}
																				if (num - 443 > 1)
																				{
																					goto IL_25FB;
																				}
																			}
																		}
																		else if (num <= 463)
																		{
																			if (num == 453)
																			{
																				goto IL_24AB;
																			}
																			if (num == 456)
																			{
																				goto IL_24B9;
																			}
																			if (num != 463)
																			{
																				goto IL_25FB;
																			}
																			goto IL_24C7;
																		}
																		else
																		{
																			if (num == 465 || num == 480)
																			{
																				goto IL_24B9;
																			}
																			switch (num)
																			{
																			case 485:
																				break;
																			case 486:
																			case 488:
																				goto IL_25FB;
																			case 487:
																				goto IL_250B;
																			case 489:
																				goto IL_24B9;
																			default:
																				goto IL_25FB;
																			}
																		}
																	}
																	else if (num <= 580)
																	{
																		if (num <= 545)
																		{
																			switch (num)
																			{
																			case 505:
																			case 521:
																			case 522:
																			case 523:
																			case 524:
																			case 525:
																			case 526:
																			case 527:
																				goto IL_28B4;
																			case 506:
																			case 509:
																			case 531:
																				goto IL_24B9;
																			case 507:
																			case 508:
																			case 512:
																			case 513:
																			case 514:
																			case 515:
																			case 516:
																			case 517:
																			case 518:
																			case 519:
																			case 528:
																			case 529:
																			case 530:
																				goto IL_25FB;
																			case 510:
																			case 511:
																				goto IL_24E2;
																			case 520:
																				WorldGen.CheckFoodPlatter(i, j, (int)((ushort)num));
																				return;
																			default:
																				if (num == 543)
																				{
																					goto IL_28B4;
																				}
																				if (num != 545)
																				{
																					goto IL_25FB;
																				}
																				goto IL_24B9;
																			}
																		}
																		else
																		{
																			if (num == 560)
																			{
																				goto IL_24B9;
																			}
																			switch (num)
																			{
																			case 568:
																			case 569:
																			case 570:
																				goto IL_28B4;
																			case 571:
																				goto IL_25FB;
																			case 572:
																				goto IL_24D4;
																			case 573:
																				goto IL_24E2;
																			default:
																				if (num != 580)
																				{
																					goto IL_25FB;
																				}
																				goto IL_28B4;
																			}
																		}
																	}
																	else if (num <= 598)
																	{
																		if (num == 581)
																		{
																			goto IL_24D4;
																		}
																		if (num - 591 <= 1)
																		{
																			goto IL_24B9;
																		}
																		if (num != 598)
																		{
																			goto IL_25FB;
																		}
																		goto IL_28B4;
																	}
																	else
																	{
																		switch (num)
																		{
																		case 617:
																			goto IL_24C7;
																		case 618:
																		case 619:
																			goto IL_25FB;
																		case 620:
																			goto IL_28B4;
																		case 621:
																		case 622:
																			goto IL_2518;
																		default:
																			switch (num)
																			{
																			case 652:
																			case 654:
																				goto IL_28B4;
																			case 653:
																			case 655:
																			case 656:
																			case 659:
																				goto IL_25FB;
																			case 657:
																			case 658:
																				goto IL_24B9;
																			case 660:
																				goto IL_24D4;
																			default:
																				if (num != 663)
																				{
																					goto IL_25FB;
																				}
																				goto IL_24B9;
																			}
																			break;
																		}
																	}
																	WorldGen.CheckSuper(i, j, num);
																	return;
																	IL_24AB:
																	WorldGen.Check1xX(i, j, (short)num);
																	return;
																	IL_24B9:
																	WorldGen.Check2xX(i, j, (ushort)num);
																	return;
																	IL_24C7:
																	WorldGen.Check3x4(i, j, num);
																	return;
																	IL_24D4:
																	WorldGen.Check1x2Top(i, j, (ushort)num);
																	return;
																	IL_24E2:
																	WorldGen.CheckSign(i, j, (ushort)num);
																	return;
																	IL_250B:
																	WorldGen.Check4x2(i, j, num);
																	return;
																	IL_2518:
																	WorldGen.Check2x2(i, j, num);
																	return;
																	IL_25FB:
																	if (Main.tileAlch[num])
																	{
																		WorldGen.CheckAlch(i, j);
																		return;
																	}
																	if (num <= 567)
																	{
																		if (num <= 72)
																		{
																			if (num != 5)
																			{
																				if (num == 72)
																				{
																					Tile tile29 = Main.tile[i, j - 1];
																					Tile tile30 = Main.tile[i, j + 1];
																					int num23 = -1;
																					int num24 = -1;
																					if (tile29 != null && tile29.active())
																					{
																						num24 = (int)(*tile29.type);
																					}
																					if (tile30 != null && tile30.active())
																					{
																						num23 = (int)(*tile30.type);
																					}
																					if (num23 != num && num23 != 70)
																					{
																						WorldGen.KillTile(i, j, false, false, false);
																					}
																					else if (num24 != num && *tile.frameX == 0)
																					{
																						tile.frameNumber((byte)WorldGen.genRand.Next(3));
																						if (tile.frameNumber() == 0)
																						{
																							*tile.frameX = 18;
																							*tile.frameY = 0;
																						}
																						if (tile.frameNumber() == 1)
																						{
																							*tile.frameX = 18;
																							*tile.frameY = 18;
																						}
																						if (tile.frameNumber() == 2)
																						{
																							*tile.frameX = 18;
																							*tile.frameY = 36;
																						}
																					}
																				}
																			}
																			else
																			{
																				WorldGen.CheckTree(i, j);
																			}
																		}
																		else if (num != 323)
																		{
																			if (num == 567)
																			{
																				WorldGen.CheckGnome(i, j);
																			}
																		}
																		else
																		{
																			WorldGen.CheckPalmTree(i, j);
																		}
																	}
																	else if (num <= 596)
																	{
																		if (num - 583 > 6)
																		{
																			if (num == 596)
																			{
																				WorldGen.CheckTreeSettings settings = default(WorldGen.CheckTreeSettings);
																				WorldGen.CheckTreeSettings.GroundValidTest isGroundValid;
																				if ((isGroundValid = WorldGen.<>O.<13>__VanityTreeGroundTest) == null)
																				{
																					isGroundValid = (WorldGen.<>O.<13>__VanityTreeGroundTest = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.VanityTreeGroundTest));
																				}
																				settings.IsGroundValid = isGroundValid;
																				WorldGen.CheckTreeWithSettings(i, j, settings);
																			}
																		}
																		else
																		{
																			WorldGen.CheckTreeSettings settings = default(WorldGen.CheckTreeSettings);
																			WorldGen.CheckTreeSettings.GroundValidTest isGroundValid2;
																			if ((isGroundValid2 = WorldGen.<>O.<12>__GemTreeGroundTest) == null)
																			{
																				isGroundValid2 = (WorldGen.<>O.<12>__GemTreeGroundTest = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.GemTreeGroundTest));
																			}
																			settings.IsGroundValid = isGroundValid2;
																			WorldGen.CheckTreeWithSettings(i, j, settings);
																		}
																	}
																	else if (num != 616)
																	{
																		if (num - 630 > 1)
																		{
																			if (num == 634)
																			{
																				WorldGen.CheckTreeSettings settings = default(WorldGen.CheckTreeSettings);
																				WorldGen.CheckTreeSettings.GroundValidTest isGroundValid3;
																				if ((isGroundValid3 = WorldGen.<>O.<14>__AshTreeGroundTest) == null)
																				{
																					isGroundValid3 = (WorldGen.<>O.<14>__AshTreeGroundTest = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.AshTreeGroundTest));
																				}
																				settings.IsGroundValid = isGroundValid3;
																				WorldGen.CheckTreeWithSettings(i, j, settings);
																			}
																		}
																		else
																		{
																			WorldGen.CheckStinkbugBlocker(i, j);
																		}
																	}
																	else
																	{
																		WorldGen.CheckTreeSettings settings = default(WorldGen.CheckTreeSettings);
																		WorldGen.CheckTreeSettings.GroundValidTest isGroundValid4;
																		if ((isGroundValid4 = WorldGen.<>O.<13>__VanityTreeGroundTest) == null)
																		{
																			isGroundValid4 = (WorldGen.<>O.<13>__VanityTreeGroundTest = new WorldGen.CheckTreeSettings.GroundValidTest(WorldGen.VanityTreeGroundTest));
																		}
																		settings.IsGroundValid = isGroundValid4;
																		WorldGen.CheckTreeWithSettings(i, j, settings);
																	}
																	TileLoader.CheckModTile(i, j, num);
																	TileLoader.PostTileFrame(num, i, j, 0, 0, 0, 0, 0, 0, 0, 0);
																	return;
																}
																IL_28B4:
																WorldGen.Check2x2(i, j, num);
																goto IL_28C6;
															}
															IL_28BE:
															WorldGen.Check2x2Style(i, j, num);
															IL_28C6:
															return;
														}
														IL_28CB:
														WorldGen.Check3x2(i, j, (int)((ushort)num));
														goto IL_2941;
													}
													IL_1BAE:
													WorldGen.Check1x2(i, j, (ushort)num);
													goto IL_2941;
												}
												IL_28D6:
												WorldGen.Check3x3(i, j, (int)((ushort)num));
												goto IL_2941;
											}
											Tile tile31 = Main.tile[i - 1, j];
											if (tile31 == null)
											{
												goto IL_2941;
											}
											Tile tile32 = Main.tile[i + 1, j];
											if (tile32 == null)
											{
												goto IL_2941;
											}
											Tile tile33 = Main.tile[i - 1, j + 1];
											if (tile33 == null)
											{
												goto IL_2941;
											}
											Tile tile34 = Main.tile[i + 1, j + 1];
											if (tile34 == null)
											{
												goto IL_2941;
											}
											Tile tile35 = Main.tile[i - 1, j - 1];
											if (tile35 == null)
											{
												goto IL_2941;
											}
											Tile tile36 = Main.tile[i + 1, j - 1];
											if (tile36 == null)
											{
												goto IL_2941;
											}
											int num25 = -1;
											int num26 = -1;
											if (tile31 != null && tile31.active())
											{
												num26 = (Main.tileStone[(int)(*tile31.type)] ? 1 : ((!TileID.Sets.Platforms[(int)(*tile31.type)]) ? ((int)(*tile31.type)) : num));
											}
											if (tile32 != null && tile32.active())
											{
												num25 = (Main.tileStone[(int)(*tile32.type)] ? 1 : ((!TileID.Sets.Platforms[(int)(*tile32.type)]) ? ((int)(*tile32.type)) : num));
											}
											if (num25 >= 0 && !Main.tileSolid[num25])
											{
												num25 = -1;
											}
											if (num26 >= 0 && !Main.tileSolid[num26])
											{
												num26 = -1;
											}
											if (num26 == num && tile31.halfBrick() != tile.halfBrick())
											{
												num26 = -1;
											}
											if (num25 == num && tile32.halfBrick() != tile.halfBrick())
											{
												num25 = -1;
											}
											if (num26 != -1 && num26 != num && tile.halfBrick())
											{
												num26 = -1;
											}
											if (num25 != -1 && num25 != num && tile.halfBrick())
											{
												num25 = -1;
											}
											if (num26 == -1 && tile35.active() && (int)(*tile35.type) == num && tile35.slope() == 1)
											{
												num26 = num;
											}
											if (num25 == -1 && tile36.active() && (int)(*tile36.type) == num && tile36.slope() == 2)
											{
												num25 = num;
											}
											if (num26 == num && tile31.slope() == 2 && num25 != num)
											{
												num25 = -1;
											}
											if (num25 == num && tile32.slope() == 1 && num26 != num)
											{
												num26 = -1;
											}
											if (tile.slope() == 1)
											{
												if (TileID.Sets.Platforms[(int)(*tile32.type)] && tile32.slope() == 0 && !tile32.halfBrick())
												{
													rectangle.X = 468;
												}
												else if (!tile34.active() && (!TileID.Sets.Platforms[(int)(*tile34.type)] || tile34.slope() == 2))
												{
													if (!tile31.active() && (!TileID.Sets.Platforms[(int)(*tile35.type)] || tile35.slope() != 1))
													{
														rectangle.X = 432;
													}
													else
													{
														rectangle.X = 360;
													}
												}
												else if (!tile31.active() && (!TileID.Sets.Platforms[(int)(*tile35.type)] || tile35.slope() != 1))
												{
													rectangle.X = 396;
												}
												else
												{
													rectangle.X = 180;
												}
											}
											else if (tile.slope() == 2)
											{
												if (TileID.Sets.Platforms[(int)(*tile31.type)] && tile31.slope() == 0 && !tile31.halfBrick())
												{
													rectangle.X = 450;
												}
												else if (!tile33.active() && (!TileID.Sets.Platforms[(int)(*tile33.type)] || tile33.slope() == 1))
												{
													if (!tile32.active() && (!TileID.Sets.Platforms[(int)(*tile36.type)] || tile36.slope() != 2))
													{
														rectangle.X = 414;
													}
													else
													{
														rectangle.X = 342;
													}
												}
												else if (!tile32.active() && (!TileID.Sets.Platforms[(int)(*tile36.type)] || tile36.slope() != 2))
												{
													rectangle.X = 378;
												}
												else
												{
													rectangle.X = 144;
												}
											}
											else if (num26 == num && num25 == num)
											{
												if (tile31.slope() == 2 && tile32.slope() == 1)
												{
													rectangle.X = 252;
												}
												else if (tile31.slope() == 2)
												{
													rectangle.X = 216;
												}
												else if (tile32.slope() == 1)
												{
													rectangle.X = 234;
												}
												else
												{
													rectangle.X = 0;
												}
											}
											else if (num26 == num && num25 == -1)
											{
												if (tile31.slope() == 2)
												{
													rectangle.X = 270;
												}
												else
												{
													rectangle.X = 18;
												}
											}
											else if (num26 == -1 && num25 == num)
											{
												if (tile32.slope() == 1)
												{
													rectangle.X = 288;
												}
												else
												{
													rectangle.X = 36;
												}
											}
											else if (num26 != num && num25 == num)
											{
												rectangle.X = 54;
											}
											else if (num26 == num && num25 != num)
											{
												rectangle.X = 72;
											}
											else if (num26 != num && num26 != -1 && num25 == -1)
											{
												rectangle.X = 108;
											}
											else if (num26 == -1 && num25 != num && num25 != -1)
											{
												rectangle.X = 126;
											}
											else
											{
												rectangle.X = 90;
											}
											*tile.frameX = (short)rectangle.X;
											if (Main.tile[i, j - 1] != null && Main.tileRope[(int)(*Main.tile[i, j - 1].type)])
											{
												WorldGen.TileFrame(i, j - 1, false, false);
											}
											if (Main.tile[i, j + 1] != null && Main.tileRope[(int)(*Main.tile[i, j + 1].type)])
											{
												WorldGen.TileFrame(i, j + 1, false, false);
												goto IL_2941;
											}
											goto IL_2941;
										}
									}
									IL_28E1:
									WorldGen.Check6x3(i, j, num);
									goto IL_2941;
								}
								IL_28EB:
								Tile tile37 = Main.tile[i, j - 1];
								if (tile37 == null || !tile37.active() || tile37.bottomSlope() || !Main.tileSolid[(int)(*tile37.type)] || Main.tileSolidTop[(int)(*tile37.type)])
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
							IL_2941:
							return;
						}
						if ((num >= 255 && num <= 268) || num == 385 || num - 446 <= 2)
						{
							Framing.SelfFrame8Way(i, j, tile, resetFrame);
							return;
						}
						Tile tile38 = Main.tile[i, j - 1];
						Tile tile39 = Main.tile[i, j + 1];
						Tile tile40 = Main.tile[i - 1, j];
						Tile tile41 = Main.tile[i + 1, j];
						Tile tile42 = Main.tile[i - 1, j + 1];
						Tile tile43 = Main.tile[i + 1, j + 1];
						Tile tile44 = Main.tile[i - 1, j - 1];
						Tile tile45 = Main.tile[i + 1, j - 1];
						int upLeft = -1;
						int up = -1;
						int upRight = -1;
						int left = -1;
						int right = -1;
						int downLeft = -1;
						int down = -1;
						int downRight = -1;
						if (tile40 != null && tile40.active())
						{
							left = (int)(Main.tileStone[(int)(*tile40.type)] ? 1 : (*tile40.type));
							if (tile40.slope() == 1 || tile40.slope() == 3)
							{
								left = -1;
							}
						}
						if (tile41 != null && tile41.active())
						{
							right = (int)(Main.tileStone[(int)(*tile41.type)] ? 1 : (*tile41.type));
							if (tile41.slope() == 2 || tile41.slope() == 4)
							{
								right = -1;
							}
						}
						if (tile38 != null && tile38.active())
						{
							up = (int)(Main.tileStone[(int)(*tile38.type)] ? 1 : (*tile38.type));
							if (tile38.slope() == 3 || tile38.slope() == 4)
							{
								up = -1;
							}
						}
						if (tile39 != null && tile39.active())
						{
							down = (int)(Main.tileStone[(int)(*tile39.type)] ? 1 : (*tile39.type));
							if (tile39.slope() == 1 || tile39.slope() == 2)
							{
								down = -1;
							}
						}
						if (tile44 != null && tile44.active())
						{
							upLeft = (int)(Main.tileStone[(int)(*tile44.type)] ? 1 : (*tile44.type));
						}
						if (tile45 != null && tile45.active())
						{
							upRight = (int)(Main.tileStone[(int)(*tile45.type)] ? 1 : (*tile45.type));
						}
						if (tile42 != null && tile42.active())
						{
							downLeft = (int)(Main.tileStone[(int)(*tile42.type)] ? 1 : (*tile42.type));
						}
						if (tile43 != null && tile43.active())
						{
							downRight = (int)(Main.tileStone[(int)(*tile43.type)] ? 1 : (*tile43.type));
						}
						if (tile.slope() == 2)
						{
							up = -1;
							left = -1;
						}
						if (tile.slope() == 1)
						{
							up = -1;
							right = -1;
						}
						if (tile.slope() == 4)
						{
							down = -1;
							left = -1;
						}
						if (tile.slope() == 3)
						{
							down = -1;
							right = -1;
						}
						if (num == 668)
						{
							num = 0;
						}
						WorldGen.TileMergeAttempt(0, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						num43 = num;
						if (TileID.Sets.Snow[num])
						{
							WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (TileID.Sets.Ices[num])
						{
							WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (num43 != 162)
						{
							if (Main.tileBrick[num])
							{
								int num45 = num;
								if (TileID.Sets.GrassSpecial[num])
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								}
								else if (num45 != 633)
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								}
								else
								{
									WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ash, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								}
							}
							else if (Main.tilePile[num])
							{
								WorldGen.TileMergeAttempt(num, Main.tilePile, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
						}
						else
						{
							WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && down == 165)
						{
							if (tile39 != null && *tile39.frameY == 72)
							{
								down = num;
							}
							else if (tile39 != null && *tile39.frameY == 0)
							{
								down = num;
							}
						}
						if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && up == 165)
						{
							if (tile38 != null && *tile38.frameY == 90)
							{
								up = num;
							}
							else if (tile38 != null && *tile38.frameY == 54)
							{
								up = num;
							}
						}
						if (num == 225)
						{
							if (down == 165)
							{
								down = num;
							}
							if (up == 165)
							{
								up = num;
							}
						}
						if ((TileID.Sets.Ices[num] || num == 147) && down == 165)
						{
							down = num;
						}
						if ((tile.slope() == 1 || tile.slope() == 2) && down > -1 && !TileID.Sets.Platforms[down])
						{
							down = num;
						}
						if (up > -1 && tile38 != null && (tile38.slope() == 1 || tile38.slope() == 2) && !TileID.Sets.Platforms[up])
						{
							up = num;
						}
						if ((tile.slope() == 3 || tile.slope() == 4) && up > -1 && !TileID.Sets.Platforms[up])
						{
							up = num;
						}
						if (down > -1 && tile39 != null && (tile39.slope() == 3 || tile39.slope() == 4) && !TileID.Sets.Platforms[down])
						{
							down = num;
						}
						if (num == 124)
						{
							if (up > -1 && Main.tileSolid[up] && !TileID.Sets.Platforms[up])
							{
								up = num;
							}
							if (down > -1 && Main.tileSolid[down] && !TileID.Sets.Platforms[down])
							{
								down = num;
							}
						}
						if (up > -1 && tile38 != null && tile38.halfBrick() && !TileID.Sets.Platforms[up])
						{
							up = num;
						}
						if (left > -1 && tile40 != null && tile40.halfBrick())
						{
							if (tile.halfBrick())
							{
								left = num;
							}
							else if ((int)(*tile40.type) != num)
							{
								left = -1;
							}
						}
						if (right > -1 && tile41 != null && tile41.halfBrick())
						{
							if (tile.halfBrick())
							{
								right = num;
							}
							else if ((int)(*tile41.type) != num)
							{
								right = -1;
							}
						}
						if (tile.halfBrick())
						{
							if (left != num)
							{
								left = -1;
							}
							if (right != num)
							{
								right = -1;
							}
							up = -1;
						}
						if (tile39 != null && tile39.halfBrick())
						{
							down = -1;
						}
						if (!Main.tileSolid[num])
						{
							if (num == 49)
							{
								WorldGen.CheckOnTable1x1(i, j, (int)((byte)num));
								return;
							}
							if (num == 80)
							{
								WorldGen.CactusFrame(i, j);
								return;
							}
						}
						WorldGen.mergeUp = false;
						WorldGen.mergeDown = false;
						WorldGen.mergeLeft = false;
						WorldGen.mergeRight = false;
						int num27;
						if (resetFrame)
						{
							num27 = WorldGen.genRand.Next(0, 3);
							tile.frameNumber((byte)num27);
						}
						else
						{
							num27 = (int)tile.frameNumber();
						}
						if (Main.tileLargeFrames[num] == 1)
						{
							int num28 = j % 4;
							int num29 = i % 3;
							num27 = (new int[,]
							{
								{
									2,
									4,
									2
								},
								{
									1,
									3,
									1
								},
								{
									2,
									2,
									4
								},
								{
									1,
									1,
									3
								}
							})[num28, num29] - 1;
						}
						if (Main.tileLargeFrames[num] == 2)
						{
							int num46 = i % 2;
							int num30 = j % 2;
							num27 = num46 + num30 * 2;
						}
						if (!Main.tileRope[num] && TileID.Sets.BlockMergesWithMergeAllBlock[num])
						{
							WorldGen.TileMergeAttempt(num, Main.tileBlendAll, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (Main.tileBlendAll[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.BlockMergesWithMergeAllBlock, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (TileID.Sets.ForcedDirtMerging[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (TileID.Sets.Dirt[num])
						{
							if (up > -1 && Main.tileMergeDirt[up])
							{
								WorldGen.TileFrame(i, j - 1, false, false);
								if (WorldGen.mergeDown)
								{
									up = num;
								}
							}
							else if (up >= 0 && TileID.Sets.Snow[up])
							{
								WorldGen.TileFrame(i, j - 1, false, false);
								if (WorldGen.mergeDown)
								{
									up = num;
								}
							}
							if (down > -1 && Main.tileMergeDirt[down])
							{
								WorldGen.TileFrame(i, j + 1, false, false);
								if (WorldGen.mergeUp)
								{
									down = num;
								}
							}
							else if (down >= 0 && TileID.Sets.Snow[down])
							{
								WorldGen.TileFrame(i, j + 1, false, false);
								if (WorldGen.mergeUp)
								{
									down = num;
								}
							}
							if (left > -1 && Main.tileMergeDirt[left])
							{
								WorldGen.TileFrame(i - 1, j, false, false);
								if (WorldGen.mergeRight)
								{
									left = num;
								}
							}
							else if (left >= 0 && TileID.Sets.Snow[left])
							{
								WorldGen.TileFrame(i - 1, j, false, false);
								if (WorldGen.mergeRight)
								{
									left = num;
								}
							}
							if (right > -1 && Main.tileMergeDirt[right])
							{
								WorldGen.TileFrame(i + 1, j, false, false);
								if (WorldGen.mergeLeft)
								{
									right = num;
								}
							}
							else if (right == 147)
							{
								WorldGen.TileFrame(i + 1, j, false, false);
								if (WorldGen.mergeLeft)
								{
									right = num;
								}
							}
							bool[] mergesWithDirtInASpecialWay = TileID.Sets.Conversion.MergesWithDirtInASpecialWay;
							if (up > -1 && mergesWithDirtInASpecialWay[up])
							{
								up = num;
							}
							if (down > -1 && mergesWithDirtInASpecialWay[down])
							{
								down = num;
							}
							if (left > -1 && mergesWithDirtInASpecialWay[left])
							{
								left = num;
							}
							if (right > -1 && mergesWithDirtInASpecialWay[right])
							{
								right = num;
							}
							if (upLeft > -1 && Main.tileMergeDirt[upLeft])
							{
								upLeft = num;
							}
							else if (upLeft > -1 && mergesWithDirtInASpecialWay[upLeft])
							{
								upLeft = num;
							}
							if (upRight > -1 && Main.tileMergeDirt[upRight])
							{
								upRight = num;
							}
							else if (upRight > -1 && mergesWithDirtInASpecialWay[upRight])
							{
								upRight = num;
							}
							if (downLeft > -1 && Main.tileMergeDirt[downLeft])
							{
								downLeft = num;
							}
							else if (downLeft > -1 && mergesWithDirtInASpecialWay[downLeft])
							{
								downLeft = num;
							}
							if (downRight > -1 && Main.tileMergeDirt[downRight])
							{
								downRight = num;
							}
							else if (downRight > -1 && mergesWithDirtInASpecialWay[downRight])
							{
								downRight = num;
							}
							WorldGen.TileMergeAttempt(0, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							WorldGen.TileMergeAttempt(0, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							if (up > -1 && TileID.Sets.ForcedDirtMerging[up])
							{
								up = num;
							}
							if (down > -1 && TileID.Sets.ForcedDirtMerging[down])
							{
								down = num;
							}
							if (left > -1 && TileID.Sets.ForcedDirtMerging[left])
							{
								left = num;
							}
							if (right > -1 && TileID.Sets.ForcedDirtMerging[right])
							{
								right = num;
							}
							if (upLeft > -1 && TileID.Sets.ForcedDirtMerging[upLeft])
							{
								upLeft = num;
							}
							if (upRight > -1 && TileID.Sets.ForcedDirtMerging[upRight])
							{
								upRight = num;
							}
							if (downLeft > -1 && TileID.Sets.ForcedDirtMerging[downLeft])
							{
								downLeft = num;
							}
							if (downRight > -1 && TileID.Sets.ForcedDirtMerging[downRight])
							{
								downRight = num;
							}
						}
						else if (Main.tileRope[num])
						{
							if (num != 504 && up != num && WorldGen.IsRope(i, j - 1))
							{
								up = num;
							}
							if (down != num && WorldGen.IsRope(i, j + 1))
							{
								down = num;
							}
							if (num != 504 && up > -1 && Main.tileSolid[up] && !Main.tileSolidTop[up])
							{
								up = num;
							}
							if (down > -1 && Main.tileSolid[down])
							{
								down = num;
							}
							if (num != 504 && up != num)
							{
								if (left > -1 && Main.tileSolid[left])
								{
									left = num;
								}
								if (right > -1 && Main.tileSolid[right])
								{
									right = num;
								}
							}
						}
						else if (num <= 112)
						{
							if (num != 53)
							{
								if (num == 112)
								{
									WorldGen.TileMergeAttemptFrametest(i, j, num, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									WorldGen.TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								}
							}
							else
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
						}
						else if (num != 116)
						{
							if (num == 234)
							{
								WorldGen.TileMergeAttemptFrametest(i, j, num, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								WorldGen.TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
						}
						else
						{
							WorldGen.TileMergeAttemptFrametest(i, j, num, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							WorldGen.TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (Main.tileMergeDirt[num])
						{
							WorldGen.TileMergeAttempt(-2, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							if (num == 1)
							{
								if ((double)j > Main.rockLayer)
								{
									WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								}
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Ash, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
						}
						else
						{
							num43 = num;
							if (TileID.Sets.HellSpecial[num])
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Ash, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							else if (num43 != 57)
							{
								if (TileID.Sets.Mud[num])
								{
									if ((double)j > Main.rockLayer)
									{
										WorldGen.TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									}
									WorldGen.TileMergeAttempt(num, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.JungleSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									if ((double)j < Main.rockLayer)
									{
										WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									}
									else
									{
										WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref up, ref down, ref left, ref right);
									}
								}
								else
								{
									if (num43 <= 196)
									{
										if (num43 == 60)
										{
											WorldGen.TileMergeAttempt(59, 211, ref up, ref down, ref left, ref right);
											goto IL_3DD0;
										}
										if (num43 == 189)
										{
											WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.MergesWithClouds, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											goto IL_3DD0;
										}
										if (num43 == 196)
										{
											WorldGen.TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(num, 460, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											goto IL_3DD0;
										}
									}
									else
									{
										if (num43 == 211)
										{
											WorldGen.TileMergeAttempt(59, 60, ref up, ref down, ref left, ref right);
											WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											goto IL_3DD0;
										}
										if (num43 - 225 <= 1)
										{
											WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											goto IL_3DD0;
										}
										if (num43 == 460)
										{
											WorldGen.TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(num, 196, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											goto IL_3DD0;
										}
									}
									if (TileID.Sets.Snow[num])
									{
										WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									}
									else if (TileID.Sets.IcesSlush[num])
									{
										WorldGen.TileMergeAttempt(-2, 147, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									}
									else if (num43 <= 191)
									{
										if (num43 <= 51)
										{
											if (num43 != 32)
											{
												if (num43 == 51)
												{
													WorldGen.TileMergeAttempt(num, TileID.Sets.AllTiles, Main.tileNoAttach, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
												}
											}
											else if (down == 23)
											{
												down = num;
											}
										}
										else if (num43 != 69)
										{
											if (num43 != 162)
											{
												if (num43 == 191)
												{
													WorldGen.TileMergeAttempt(-2, 192, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
													WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
												}
											}
											else
											{
												WorldGen.TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											}
										}
										else if (down == 60)
										{
											down = num;
										}
									}
									else if (num43 <= 383)
									{
										if (num43 != 192)
										{
											if (num43 != 352)
											{
												if (num43 == 383)
												{
													WorldGen.TileMergeAttempt(-2, 384, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
													WorldGen.TileMergeAttempt(num, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
												}
											}
											else if (down == 199)
											{
												down = num;
											}
										}
										else
										{
											WorldGen.TileMergeAttemptFrametest(i, j, num, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
										}
									}
									else if (num43 != 384)
									{
										switch (num43)
										{
										case 396:
											WorldGen.TileMergeAttempt(-2, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 397:
											WorldGen.TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 398:
											WorldGen.TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 399:
											WorldGen.TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 400:
											WorldGen.TileMergeAttempt(-2, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 401:
											WorldGen.TileMergeAttempt(-2, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 402:
											WorldGen.TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 403:
											WorldGen.TileMergeAttempt(-2, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 404:
											WorldGen.TileMergeAttempt(-2, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											WorldGen.TileMergeAttemptFrametest(i, j, num, 407, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										case 405:
										case 406:
											break;
										case 407:
											WorldGen.TileMergeAttempt(-2, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
											break;
										default:
											if (num43 == 655)
											{
												if (down == 60)
												{
													down = num;
												}
											}
											break;
										}
									}
									else
									{
										WorldGen.TileMergeAttemptFrametest(i, j, num, 383, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
									}
								}
							}
							else
							{
								WorldGen.TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								WorldGen.TileMergeAttempt(num, 633, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
						}
						IL_3DD0:
						if (num == 0)
						{
							WorldGen.TileMergeAttempt(num, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							WorldGen.TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (Main.tileStone[num] || num == 1)
						{
							WorldGen.TileMergeAttempt(num, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (num == 38)
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.tileMossBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (TileID.Sets.Conversion.Grass[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.Ore, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (TileID.Sets.Ore[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.Conversion.Grass, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						if (num >= 0 && TileID.Sets.Mud[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.OreMergesWithMud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						else if (TileID.Sets.OreMergesWithMud[num])
						{
							WorldGen.TileMergeAttempt(num, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						TileLoader.ModifyFrameMerge(num, i, j, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						bool flag = false;
						WorldGen.TileMergeCullCache tileMergeCullCache = default(WorldGen.TileMergeCullCache);
						if (!Main.ShouldShowInvisibleWalls())
						{
							bool flag2 = tile.invisibleBlock();
							tileMergeCullCache.CullTop |= (tile38 != null && tile38.invisibleBlock() != flag2);
							tileMergeCullCache.CullBottom |= (tile39 != null && tile39.invisibleBlock() != flag2);
							tileMergeCullCache.CullLeft |= (tile40 != null && tile40.invisibleBlock() != flag2);
							tileMergeCullCache.CullRight |= (tile41 != null && tile41.invisibleBlock() != flag2);
							tileMergeCullCache.CullTopLeft |= (tile44 != null && tile44.invisibleBlock() != flag2);
							tileMergeCullCache.CullTopRight |= (tile45 != null && tile45.invisibleBlock() != flag2);
							tileMergeCullCache.CullBottomLeft |= (tile42 != null && tile42.invisibleBlock() != flag2);
							tileMergeCullCache.CullBottomRight |= (tile43 != null && tile43.invisibleBlock() != flag2);
						}
						if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num] || TileID.Sets.tileMossBrick[num])
						{
							flag = true;
							WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							int num31 = TileID.Sets.NeedsGrassFramingDirt[num];
							if (TileID.Sets.GrassSpecial[num])
							{
								num31 = 59;
							}
							else if (Main.tileMoss[num])
							{
								num31 = 1;
							}
							else if (TileID.Sets.tileMossBrick[num])
							{
								num31 = 38;
							}
							else
							{
								if (num != 2)
								{
									if (num == 23)
									{
										WorldGen.TileMergeAttempt(num31, 2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
										goto IL_414A;
									}
									if (num != 477)
									{
										goto IL_414A;
									}
								}
								WorldGen.TileMergeAttempt(num31, 23, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							IL_414A:
							tileMergeCullCache.Cull(ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							if (up != num && up != num31 && (down == num || down == num31))
							{
								if (left == num31 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 198;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 198;
									}
								}
								else if (left == num && right == num31)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 198;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 198;
									}
								}
							}
							else if (down != num && down != num31 && (up == num || up == num31))
							{
								if (left == num31 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 216;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 216;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 216;
									}
								}
								else if (left == num && right == num31)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 216;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 216;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 216;
									}
								}
							}
							else if (left != num && left != num31 && (right == num || right == num31))
							{
								if (up == num31 && down == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 72;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 162;
										}
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 144;
									}
								}
								else if (down == num && up == num31)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 72;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 90;
									}
								}
							}
							else if (right != num && right != num31 && (left == num || left == num31))
							{
								if (up == num31 && down == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 162;
										}
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 144;
									}
								}
								else if (down == num && right == up)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 90;
									}
								}
							}
							else if (up == num && down == num && left == num && right == num)
							{
								if (upLeft != num && upRight != num && downLeft != num && downRight != num)
								{
									if (downRight == num31)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 144;
												rectangle.Y = 324;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 324;
											}
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 324;
										}
									}
									else if (upRight == num31)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 144;
												rectangle.Y = 342;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 342;
											}
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 342;
										}
									}
									else if (downLeft == num31)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 144;
												rectangle.Y = 360;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 360;
											}
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 360;
										}
									}
									else if (upLeft == num31)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 144;
												rectangle.Y = 378;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 378;
											}
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 378;
										}
									}
									else if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 252;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 234;
										}
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 234;
									}
								}
								else if (upLeft != num && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 72;
											rectangle.Y = 306;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 306;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 306;
									}
								}
								else if (upRight != num && downLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 126;
											rectangle.Y = 306;
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 306;
										}
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 306;
									}
								}
								else if (upLeft != num && upRight == num && downLeft == num && downRight == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 108;
									}
								}
								else if (upLeft == num && upRight != num && downLeft == num && downRight == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 108;
									}
								}
								else if (upLeft == num && upRight == num && downLeft != num && downRight == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 90;
									}
								}
								else if (upLeft == num && upRight == num && downLeft == num && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 90;
									}
								}
							}
							else if (up == num && down == num31 && left == num && right == num && upLeft == -1 && upRight == -1)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 144;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 108;
									rectangle.Y = 18;
								}
							}
							else if (up == num31 && down == num && left == num && right == num && downLeft == -1 && downRight == -1)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 144;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 36;
									}
								}
								else
								{
									rectangle.X = 108;
									rectangle.Y = 36;
								}
							}
							else if (up == num && down == num && left == num31 && right == num && upRight == -1 && downRight == -1)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 198;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 198;
									rectangle.Y = 0;
								}
							}
							else if (up == num && down == num && left == num && right == num31 && upLeft == -1 && downLeft == -1)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 180;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 180;
									rectangle.Y = 0;
								}
							}
							else if (up == num && down == num31 && left == num && right == num)
							{
								if (upRight != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 108;
									}
								}
								else if (upLeft != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 108;
									}
								}
							}
							else if (up == num31 && down == num && left == num && right == num)
							{
								if (downRight != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 90;
									}
								}
								else if (downLeft != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 90;
									}
								}
							}
							else if (up == num && down == num && left == num && right == num31)
							{
								if (upLeft != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 90;
									}
								}
								else if (downLeft != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 108;
									}
								}
							}
							else if (up == num && down == num && left == num31 && right == num)
							{
								if (upRight != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 90;
									}
								}
								else if (downRight != -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 108;
									}
								}
							}
							else if ((up == num31 && down == num && left == num && right == num) || (up == num && down == num31 && left == num && right == num) || (up == num && down == num && left == num31 && right == num) || (up == num && down == num && left == num && right == num31))
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 18;
								}
							}
							if ((up == num || up == num31) && (down == num || down == num31) && (left == num || left == num31) && (right == num || right == num31))
							{
								if (upLeft != num && upLeft != num31 && (upRight == num || upRight == num31) && (downLeft == num || downLeft == num31) && (downRight == num || downRight == num31))
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 108;
									}
								}
								else if (upRight != num && upRight != num31 && (upLeft == num || upLeft == num31) && (downLeft == num || downLeft == num31) && (downRight == num || downRight == num31))
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 108;
									}
								}
								else if (downLeft != num && downLeft != num31 && (upLeft == num || upLeft == num31) && (upRight == num || upRight == num31) && (downRight == num || downRight == num31))
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 90;
									}
								}
								else if (downRight != num && downRight != num31 && (upLeft == num || upLeft == num31) && (downLeft == num || downLeft == num31) && (upRight == num || upRight == num31))
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 90;
									}
								}
							}
							if (up != num31 && up != num && down == num && left != num31 && left != num && right == num && downRight != num31 && downRight != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 126;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 270;
									}
								}
								else
								{
									rectangle.X = 90;
									rectangle.Y = 270;
								}
							}
							else if (up != num31 && up != num && down == num && left == num && right != num31 && right != num && downLeft != num31 && downLeft != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 180;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 270;
									}
								}
								else
								{
									rectangle.X = 144;
									rectangle.Y = 270;
								}
							}
							else if (down != num31 && down != num && up == num && left != num31 && left != num && right == num && upRight != num31 && upRight != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 126;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 90;
									rectangle.Y = 288;
								}
							}
							else if (down != num31 && down != num && up == num && left == num && right != num31 && right != num && upLeft != num31 && upLeft != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 180;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 144;
									rectangle.Y = 288;
								}
							}
							else if (up != num && up != num31 && down == num && left == num && right == num && downLeft != num && downLeft != num31 && downRight != num && downRight != num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 252;
										rectangle.Y = 216;
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 216;
									}
								}
								else
								{
									rectangle.X = 144;
									rectangle.Y = 216;
								}
							}
							else if (down != num && down != num31 && up == num && left == num && right == num && upLeft != num && upLeft != num31 && upRight != num && upRight != num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 252;
										rectangle.Y = 252;
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 252;
									}
								}
								else
								{
									rectangle.X = 144;
									rectangle.Y = 252;
								}
							}
							else if (left != num && left != num31 && down == num && up == num && right == num && upRight != num && upRight != num31 && downRight != num && downRight != num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 234;
										rectangle.Y = 234;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 234;
									}
								}
								else
								{
									rectangle.X = 126;
									rectangle.Y = 234;
								}
							}
							else if (right != num && right != num31 && down == num && up == num && left == num && upLeft != num && upLeft != num31 && downLeft != num && downLeft != num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 270;
										rectangle.Y = 234;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 234;
									}
								}
								else
								{
									rectangle.X = 162;
									rectangle.Y = 234;
								}
							}
							else if (up != num31 && up != num && (down == num31 || down == num) && left == num31 && right == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 72;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 270;
									}
								}
								else
								{
									rectangle.X = 36;
									rectangle.Y = 270;
								}
							}
							else if (down != num31 && down != num && (up == num31 || up == num) && left == num31 && right == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 72;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 36;
									rectangle.Y = 288;
								}
							}
							else if (left != num31 && left != num && (right == num31 || right == num) && up == num31 && down == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 0;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 0;
									rectangle.Y = 270;
								}
							}
							else if (right != num31 && right != num && (left == num31 || left == num) && up == num31 && down == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 18;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 18;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 270;
								}
							}
							else if (up == num && down == num31 && left == num31 && right == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 234;
										rectangle.Y = 288;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 288;
									}
								}
								else
								{
									rectangle.X = 198;
									rectangle.Y = 288;
								}
							}
							else if (up == num31 && down == num && left == num31 && right == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 234;
										rectangle.Y = 270;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 270;
									}
								}
								else
								{
									rectangle.X = 198;
									rectangle.Y = 270;
								}
							}
							else if (up == num31 && down == num31 && left == num && right == num31)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 234;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 306;
									}
								}
								else
								{
									rectangle.X = 198;
									rectangle.Y = 306;
								}
							}
							else if (up == num31 && down == num31 && left == num31 && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 180;
										rectangle.Y = 306;
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 306;
									}
								}
								else
								{
									rectangle.X = 144;
									rectangle.Y = 306;
								}
							}
							if (up != num && up != num31 && down == num && left == num && right == num)
							{
								if ((downLeft == num31 || downLeft == num) && downRight != num31 && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 324;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 324;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 324;
									}
								}
								else if ((downRight == num31 || downRight == num) && downLeft != num31 && downLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 324;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 324;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 324;
									}
								}
							}
							else if (down != num && down != num31 && up == num && left == num && right == num)
							{
								if ((upLeft == num31 || upLeft == num) && upRight != num31 && upRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 342;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 342;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 342;
									}
								}
								else if ((upRight == num31 || upRight == num) && upLeft != num31 && upLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 342;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 342;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 342;
									}
								}
							}
							else if (left != num && left != num31 && up == num && down == num && right == num)
							{
								if ((upRight == num31 || upRight == num) && downRight != num31 && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 360;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 360;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 360;
									}
								}
								else if ((downRight == num31 || downRight == num) && upRight != num31 && upRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 360;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 360;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 360;
									}
								}
							}
							else if (right != num && right != num31 && up == num && down == num && left == num)
							{
								if ((upLeft == num31 || upLeft == num) && downLeft != num31 && downLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 378;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 378;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 378;
									}
								}
								else if ((downLeft == num31 || downLeft == num) && upLeft != num31 && upLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 378;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 378;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 378;
									}
								}
							}
							if ((up == num || up == num31) && (down == num || down == num31) && (left == num || left == num31) && (right == num || right == num31) && upLeft != -1 && upRight != -1 && downLeft != -1 && downRight != -1)
							{
								if ((i + j) % 2 == 1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 144;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 198;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 198;
									}
								}
								else if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 18;
								}
							}
							if (num31 >= 0 && TileID.Sets.Dirt[num31])
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Dirt, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							else if (num31 >= 0 && TileID.Sets.Mud[num31])
							{
								WorldGen.TileMergeAttempt(-2, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							else
							{
								WorldGen.TileMergeAttempt(-2, num31, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							tileMergeCullCache.Cull(ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						}
						WorldGen.TileMergeAttempt(num, Main.tileMerge[num], ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
						if (rectangle.X == -1 && rectangle.Y == -1 && (Main.tileMergeDirt[num] || (num > -1 && TileID.Sets.ChecksForMerge[num])))
						{
							if (!flag)
							{
								flag = true;
								WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							if (up > -1 && up != num)
							{
								up = -1;
							}
							if (down > -1 && down != num)
							{
								down = -1;
							}
							if (left > -1 && left != num)
							{
								left = -1;
							}
							if (right > -1 && right != num)
							{
								right = -1;
							}
							tileMergeCullCache.Cull(ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							if (up != -1 && down != -1 && left != -1 && right != -1)
							{
								if (up == -2 && down == num && left == num && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 180;
											rectangle.Y = 108;
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 108;
									}
									WorldGen.mergeUp = true;
								}
								else if (up == num && down == -2 && left == num && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 180;
											rectangle.Y = 90;
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 90;
										}
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 90;
									}
									WorldGen.mergeDown = true;
								}
								else if (up == num && down == num && left == -2 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 162;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 126;
									}
									WorldGen.mergeLeft = true;
								}
								else if (up == num && down == num && left == num && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 144;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 144;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 126;
									}
									WorldGen.mergeRight = true;
								}
								else if (up == -2 && down == num && left == -2 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 90;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeLeft = true;
								}
								else if (up == -2 && down == num && left == num && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 126;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 90;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeRight = true;
								}
								else if (up == num && down == -2 && left == -2 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 36;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 108;
									}
									WorldGen.mergeDown = true;
									WorldGen.mergeLeft = true;
								}
								else if (up == num && down == -2 && left == num && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 54;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 108;
									}
									WorldGen.mergeDown = true;
									WorldGen.mergeRight = true;
								}
								else if (up == num && down == num && left == -2 && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 180;
											rectangle.Y = 162;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 144;
										}
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 126;
									}
									WorldGen.mergeLeft = true;
									WorldGen.mergeRight = true;
								}
								else if (up == -2 && down == -2 && left == num && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 180;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 180;
										}
									}
									else
									{
										rectangle.X = 144;
										rectangle.Y = 180;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeDown = true;
								}
								else if (up == -2 && down == num && left == -2 && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 198;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 90;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeLeft = true;
									WorldGen.mergeRight = true;
								}
								else if (up == num && down == -2 && left == -2 && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 198;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 162;
										}
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 144;
									}
									WorldGen.mergeDown = true;
									WorldGen.mergeLeft = true;
									WorldGen.mergeRight = true;
								}
								else if (up == -2 && down == -2 && left == num && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 216;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 216;
											rectangle.Y = 162;
										}
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 144;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeDown = true;
									WorldGen.mergeRight = true;
								}
								else if (up == -2 && down == -2 && left == -2 && right == num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 216;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 216;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 90;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeDown = true;
									WorldGen.mergeLeft = true;
								}
								else if (up == -2 && down == -2 && left == -2 && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 144;
											rectangle.Y = 198;
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 198;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 198;
									}
									WorldGen.mergeUp = true;
									WorldGen.mergeDown = true;
									WorldGen.mergeLeft = true;
									WorldGen.mergeRight = true;
								}
								else if (up == num && down == num && left == num && right == num)
								{
									if (upLeft == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 18;
												rectangle.Y = 180;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 144;
											}
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 108;
										}
									}
									if (upRight == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 0;
												rectangle.Y = 180;
											}
											else
											{
												rectangle.X = 0;
												rectangle.Y = 144;
											}
										}
										else
										{
											rectangle.X = 0;
											rectangle.Y = 108;
										}
									}
									if (downLeft == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 18;
												rectangle.Y = 162;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 126;
											}
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 90;
										}
									}
									if (downRight == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 0;
												rectangle.Y = 162;
											}
											else
											{
												rectangle.X = 0;
												rectangle.Y = 126;
											}
										}
										else
										{
											rectangle.X = 0;
											rectangle.Y = 90;
										}
									}
								}
							}
							else
							{
								if (!TileID.Sets.Grass[num] && !TileID.Sets.GrassSpecial[num])
								{
									if (up == -1 && down == -2 && left == num && right == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 270;
												rectangle.Y = 0;
											}
											else
											{
												rectangle.X = 252;
												rectangle.Y = 0;
											}
										}
										else
										{
											rectangle.X = 234;
											rectangle.Y = 0;
										}
										WorldGen.mergeDown = true;
									}
									else if (up == -2 && down == -1 && left == num && right == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 270;
												rectangle.Y = 18;
											}
											else
											{
												rectangle.X = 252;
												rectangle.Y = 18;
											}
										}
										else
										{
											rectangle.X = 234;
											rectangle.Y = 18;
										}
										WorldGen.mergeUp = true;
									}
									else if (up == num && down == num && left == -1 && right == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 270;
												rectangle.Y = 36;
											}
											else
											{
												rectangle.X = 252;
												rectangle.Y = 36;
											}
										}
										else
										{
											rectangle.X = 234;
											rectangle.Y = 36;
										}
										WorldGen.mergeRight = true;
									}
									else if (up == num && down == num && left == -2 && right == -1)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 270;
												rectangle.Y = 54;
											}
											else
											{
												rectangle.X = 252;
												rectangle.Y = 54;
											}
										}
										else
										{
											rectangle.X = 234;
											rectangle.Y = 54;
										}
										WorldGen.mergeLeft = true;
									}
								}
								if (up != -1 && down != -1 && left == -1 && right == num)
								{
									if (up == -2 && down == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 72;
												rectangle.Y = 180;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 162;
											}
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 144;
										}
										WorldGen.mergeUp = true;
									}
									else if (down == -2 && up == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 72;
												rectangle.Y = 126;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 108;
											}
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 90;
										}
										WorldGen.mergeDown = true;
									}
								}
								else if (up != -1 && down != -1 && left == num && right == -1)
								{
									if (up == -2 && down == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 90;
												rectangle.Y = 180;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 162;
											}
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 144;
										}
										WorldGen.mergeUp = true;
									}
									else if (down == -2 && up == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 90;
												rectangle.Y = 126;
											}
											else
											{
												rectangle.X = 90;
												rectangle.Y = 108;
											}
										}
										else
										{
											rectangle.X = 90;
											rectangle.Y = 90;
										}
										WorldGen.mergeDown = true;
									}
								}
								else if (up == -1 && down == num && left != -1 && right != -1)
								{
									if (left == -2 && right == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 36;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 198;
											}
										}
										else
										{
											rectangle.X = 0;
											rectangle.Y = 198;
										}
										WorldGen.mergeLeft = true;
									}
									else if (right == -2 && left == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 90;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 198;
											}
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 198;
										}
										WorldGen.mergeRight = true;
									}
								}
								else if (up == num && down == -1 && left != -1 && right != -1)
								{
									if (left == -2 && right == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 36;
												rectangle.Y = 216;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 216;
											}
										}
										else
										{
											rectangle.X = 0;
											rectangle.Y = 216;
										}
										WorldGen.mergeLeft = true;
									}
									else if (right == -2 && left == num)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 90;
												rectangle.Y = 216;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 216;
											}
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 216;
										}
										WorldGen.mergeRight = true;
									}
								}
								else if (up != -1 && down != -1 && left == -1 && right == -1)
								{
									if (up == -2 && down == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 108;
												rectangle.Y = 252;
											}
											else
											{
												rectangle.X = 108;
												rectangle.Y = 234;
											}
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 216;
										}
										WorldGen.mergeUp = true;
										WorldGen.mergeDown = true;
									}
									else if (up == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 126;
												rectangle.Y = 180;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 162;
											}
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 144;
										}
										WorldGen.mergeUp = true;
									}
									else if (down == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 126;
												rectangle.Y = 126;
											}
											else
											{
												rectangle.X = 126;
												rectangle.Y = 108;
											}
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 90;
										}
										WorldGen.mergeDown = true;
									}
								}
								else if (up == -1 && down == -1 && left != -1 && right != -1)
								{
									if (left == -2 && right == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 198;
												rectangle.Y = 198;
											}
											else
											{
												rectangle.X = 180;
												rectangle.Y = 198;
											}
										}
										else
										{
											rectangle.X = 162;
											rectangle.Y = 198;
										}
										WorldGen.mergeLeft = true;
										WorldGen.mergeRight = true;
									}
									else if (left == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 36;
												rectangle.Y = 252;
											}
											else
											{
												rectangle.X = 18;
												rectangle.Y = 252;
											}
										}
										else
										{
											rectangle.X = 0;
											rectangle.Y = 252;
										}
										WorldGen.mergeLeft = true;
									}
									else if (right == -2)
									{
										if (num27 != 0)
										{
											if (num27 != 1)
											{
												rectangle.X = 90;
												rectangle.Y = 252;
											}
											else
											{
												rectangle.X = 72;
												rectangle.Y = 252;
											}
										}
										else
										{
											rectangle.X = 54;
											rectangle.Y = 252;
										}
										WorldGen.mergeRight = true;
									}
								}
								else if (up == -2 && down == -1 && left == -1 && right == -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 108;
											rectangle.Y = 180;
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 162;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 144;
									}
									WorldGen.mergeUp = true;
								}
								else if (up == -1 && down == -2 && left == -1 && right == -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 108;
											rectangle.Y = 126;
										}
										else
										{
											rectangle.X = 108;
											rectangle.Y = 108;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 90;
									}
									WorldGen.mergeDown = true;
								}
								else if (up == -1 && down == -1 && left == -2 && right == -1)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 36;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 18;
											rectangle.Y = 234;
										}
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 234;
									}
									WorldGen.mergeLeft = true;
								}
								else if (up == -1 && down == -1 && left == -1 && right == -2)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 90;
											rectangle.Y = 234;
										}
										else
										{
											rectangle.X = 72;
											rectangle.Y = 234;
										}
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 234;
									}
									WorldGen.mergeRight = true;
								}
							}
						}
						int num32 = tile.blockType();
						if (TileID.Sets.HasSlopeFrames[num])
						{
							if (num32 == 0)
							{
								bool flag3 = num == up && tile38 != null && tile38.topSlope();
								bool flag4 = num == left && tile40 != null && tile40.leftSlope();
								bool flag5 = num == right && tile41 != null && tile41.rightSlope();
								bool flag6 = num == down && tile39 != null && tile39.bottomSlope();
								int num33 = 0;
								int num34 = 0;
								if (flag3.ToInt() + flag4.ToInt() + flag5.ToInt() + flag6.ToInt() > 2)
								{
									int num35 = (tile38 != null && tile38.slope() == 1).ToInt() + (tile41 != null && tile41.slope() == 1).ToInt() + (tile39 != null && tile39.slope() == 4).ToInt() + (tile40 != null && tile40.slope() == 4).ToInt();
									int num36 = (tile38 != null && tile38.slope() == 2).ToInt() + (tile41 != null && tile41.slope() == 3).ToInt() + (tile39 != null && tile39.slope() == 3).ToInt() + (tile40 != null && tile40.slope() == 2).ToInt();
									if (num35 == num36)
									{
										num33 = 2;
										num34 = 4;
									}
									else if (num35 > num36)
									{
										bool flag18 = num == upLeft && tile44 != null && tile44.slope() == 0;
										bool flag7 = num == downRight && tile43 != null && tile43.slope() == 0;
										if (flag18 && flag7)
										{
											num34 = 4;
										}
										else if (flag7)
										{
											num33 = 6;
										}
										else
										{
											num33 = 7;
											num34 = 1;
										}
									}
									else
									{
										bool flag19 = num == upRight && tile45 != null && tile45.slope() == 0;
										bool flag8 = num == downLeft && tile42 != null && tile42.slope() == 0;
										if (flag19 && flag8)
										{
											num34 = 4;
											num33 = 1;
										}
										else if (flag8)
										{
											num33 = 7;
										}
										else
										{
											num33 = 6;
											num34 = 1;
										}
									}
									rectangle.X = (18 + num33) * 18;
									rectangle.Y = num34 * 18;
								}
								else
								{
									if (flag3 && flag4 && num == down && num == right)
									{
										num34 = 2;
									}
									else if (flag3 && flag5 && num == down && num == left)
									{
										num33 = 1;
										num34 = 2;
									}
									else if (flag5 && flag6 && num == up && num == left)
									{
										num33 = 1;
										num34 = 3;
									}
									else if (flag6 && flag4 && num == up && num == right)
									{
										num34 = 3;
									}
									if (num33 != 0 || num34 != 0)
									{
										rectangle.X = (18 + num33) * 18;
										rectangle.Y = num34 * 18;
									}
								}
							}
							if (num32 >= 2 && (rectangle.X < 0 || rectangle.Y < 0))
							{
								int num37 = -1;
								int num38 = -1;
								int num39 = -1;
								int num40 = 0;
								int num41 = 0;
								switch (num32)
								{
								case 2:
									num37 = left;
									num38 = down;
									num39 = downLeft;
									num40++;
									break;
								case 3:
									num37 = right;
									num38 = down;
									num39 = downRight;
									break;
								case 4:
									num37 = left;
									num38 = up;
									num39 = upLeft;
									num40++;
									num41++;
									break;
								case 5:
									num37 = right;
									num38 = up;
									num39 = upRight;
									num41++;
									break;
								}
								if (num != num37 || num != num38 || num != num39)
								{
									if (num == num37 && num == num38)
									{
										num40 += 2;
									}
									else if (num == num37)
									{
										num40 += 4;
									}
									else if (num == num38)
									{
										num40 += 4;
										num41 += 2;
									}
									else
									{
										num40 += 2;
										num41 += 2;
									}
								}
								rectangle.X = (18 + num40) * 18;
								rectangle.Y = num41 * 18;
							}
						}
						if (rectangle.X < 0 || rectangle.Y < 0)
						{
							if (!flag)
							{
								WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								tileMergeCullCache.Cull(ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
							{
								WorldGen.TileMergeAttempt(num, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
								tileMergeCullCache.Cull(ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
							}
							if (up == num && down == num && left == num && right == num)
							{
								if (upLeft != num && upRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 144;
											rectangle.Y = 18;
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 18;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 18;
									}
								}
								else if (downLeft != num && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 144;
											rectangle.Y = 36;
										}
										else
										{
											rectangle.X = 126;
											rectangle.Y = 36;
										}
									}
									else
									{
										rectangle.X = 108;
										rectangle.Y = 36;
									}
								}
								else if (upLeft != num && downLeft != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 180;
											rectangle.Y = 36;
										}
										else
										{
											rectangle.X = 180;
											rectangle.Y = 18;
										}
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 0;
									}
								}
								else if (upRight != num && downRight != num)
								{
									if (num27 != 0)
									{
										if (num27 != 1)
										{
											rectangle.X = 198;
											rectangle.Y = 36;
										}
										else
										{
											rectangle.X = 198;
											rectangle.Y = 18;
										}
									}
									else
									{
										rectangle.X = 198;
										rectangle.Y = 0;
									}
								}
								else if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 54;
										rectangle.Y = 18;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 18;
								}
							}
							else if (up != num && down == num && left == num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 54;
										rectangle.Y = 0;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 0;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 0;
								}
							}
							else if (up == num && down != num && left == num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 54;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 36;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 36;
								}
							}
							else if (up == num && down == num && left != num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 0;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 0;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 0;
									rectangle.Y = 0;
								}
							}
							else if (up == num && down == num && left == num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 72;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 72;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 72;
									rectangle.Y = 0;
								}
							}
							else if (up != num && down == num && left != num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 72;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 54;
									}
								}
								else
								{
									rectangle.X = 0;
									rectangle.Y = 54;
								}
							}
							else if (up != num && down == num && left == num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 90;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 54;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 54;
								}
							}
							else if (up == num && down != num && left != num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 72;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 36;
										rectangle.Y = 72;
									}
								}
								else
								{
									rectangle.X = 0;
									rectangle.Y = 72;
								}
							}
							else if (up == num && down != num && left == num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 90;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 54;
										rectangle.Y = 72;
									}
								}
								else
								{
									rectangle.X = 18;
									rectangle.Y = 72;
								}
							}
							else if (up == num && down == num && left != num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 90;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 90;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 90;
									rectangle.Y = 0;
								}
							}
							else if (up != num && down != num && left == num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 144;
										rectangle.Y = 72;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 72;
									}
								}
								else
								{
									rectangle.X = 108;
									rectangle.Y = 72;
								}
							}
							else if (up != num && down == num && left != num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 144;
										rectangle.Y = 0;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 0;
									}
								}
								else
								{
									rectangle.X = 108;
									rectangle.Y = 0;
								}
							}
							else if (up == num && down != num && left != num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 144;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 126;
										rectangle.Y = 54;
									}
								}
								else
								{
									rectangle.X = 108;
									rectangle.Y = 54;
								}
							}
							else if (up != num && down != num && left != num && right == num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 162;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 162;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 162;
									rectangle.Y = 0;
								}
							}
							else if (up != num && down != num && left == num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 216;
										rectangle.Y = 36;
									}
									else
									{
										rectangle.X = 216;
										rectangle.Y = 18;
									}
								}
								else
								{
									rectangle.X = 216;
									rectangle.Y = 0;
								}
							}
							else if (up != num && down != num && left != num && right != num)
							{
								if (num27 != 0)
								{
									if (num27 != 1)
									{
										rectangle.X = 198;
										rectangle.Y = 54;
									}
									else
									{
										rectangle.X = 180;
										rectangle.Y = 54;
									}
								}
								else
								{
									rectangle.X = 162;
									rectangle.Y = 54;
								}
							}
						}
						if (rectangle.X <= -1 || rectangle.Y <= -1)
						{
							if (num27 <= 0)
							{
								rectangle.X = 18;
								rectangle.Y = 18;
							}
							else if (num27 == 1)
							{
								rectangle.X = 36;
								rectangle.Y = 18;
							}
							if (num27 >= 2)
							{
								rectangle.X = 54;
								rectangle.Y = 18;
							}
						}
						if (Main.tileLargeFrames[num] == 1 && num27 == 3)
						{
							rectangle.Y += 90;
						}
						if (Main.tileLargeFrames[num] == 2 && num27 == 3)
						{
							rectangle.Y += 90;
						}
						*tile.frameX = (short)rectangle.X;
						*tile.frameY = (short)rectangle.Y;
						TileLoader.PostTileFrame(num, i, j, up, down, left, right, upLeft, upRight, downLeft, downRight);
						if (TileID.Sets.IsVine[num])
						{
							up = ((tile38 == null) ? num : ((!tile38.nactive()) ? -1 : ((!tile38.bottomSlope()) ? ((int)(*tile38.type)) : -1)));
							if (num != up)
							{
								bool flag20 = up == 60 || up == 62;
								bool flag21 = up == 109 || up == 115;
								bool flag9 = up == 23 || up == 636 || up == 661;
								bool flag10 = up == 199 || up == 205 || up == 662;
								bool flag11 = up == 2 || up == 52;
								bool flag12 = up == 382;
								bool flag22 = up == 70 || up == 528;
								bool flag23 = up == 633 || up == 638;
								ushort num42 = 0;
								if (flag23)
								{
									num42 = 638;
								}
								if (flag22)
								{
									num42 = 528;
								}
								if (flag21)
								{
									num42 = 115;
								}
								if (flag20)
								{
									num42 = 62;
								}
								if (flag9)
								{
									num42 = 636;
								}
								if (flag10)
								{
									num42 = 205;
								}
								if (flag11 && num != 382)
								{
									num42 = 52;
								}
								if (flag12)
								{
									num42 = 382;
								}
								if (num42 != 0 && (int)num42 != num)
								{
									*tile.type = num42;
									WorldGen.SquareTileFrame(i, j, true);
									return;
								}
							}
							if (up != num)
							{
								bool flag13 = false;
								if (up == -1)
								{
									flag13 = true;
								}
								if (num == 52 && up != 2 && up != 192)
								{
									flag13 = true;
								}
								if (num == 382 && up != 2 && up != 192)
								{
									flag13 = true;
								}
								if (num == 62 && up != 60)
								{
									flag13 = true;
								}
								if (num == 115 && up != 109)
								{
									flag13 = true;
								}
								if (num == 528 && up != 70)
								{
									flag13 = true;
								}
								if (num == 636 && up != 23 && up != 661)
								{
									flag13 = true;
								}
								if (num == 205 && up != 199 && up != 662)
								{
									flag13 = true;
								}
								if (num == 638 && up != 633)
								{
									flag13 = true;
								}
								if (flag13)
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
							}
						}
						bool flag14 = false;
						if (!WorldGen.noTileActions && tile.active() && TileID.Sets.Falling[num])
						{
							WorldGen.SpawnFallingBlockProjectile(i, j, tile, tile38, tile39, num);
						}
						if (((int)(*tile.frameX) != frameX && (int)(*tile.frameY) != frameY && frameX >= 0 && frameY >= 0) || flag14)
						{
							WorldGen.tileReframeCount++;
							if (WorldGen.tileReframeCount < 25)
							{
								bool flag24 = WorldGen.mergeUp;
								bool flag15 = WorldGen.mergeDown;
								bool flag16 = WorldGen.mergeLeft;
								bool flag17 = WorldGen.mergeRight;
								WorldGen.TileFrame(i - 1, j, false, false);
								WorldGen.TileFrame(i + 1, j, false, false);
								WorldGen.TileFrame(i, j - 1, false, false);
								WorldGen.TileFrame(i, j + 1, false, false);
								WorldGen.mergeUp = flag24;
								WorldGen.mergeDown = flag15;
								WorldGen.mergeLeft = flag16;
								WorldGen.mergeRight = flag17;
							}
							WorldGen.tileReframeCount--;
						}
					}
				}
			}
			catch
			{
			}
			if (i > 0 && j > 0)
			{
				WorldGen.UpdateMapTile(i, j, addToList);
			}
		}

		// Token: 0x0600138D RID: 5005 RVA: 0x0049D0B8 File Offset: 0x0049B2B8
		private static void StopMergingByInvsibility(ref int currentMerge, Tile block, bool wantedInvisibilityState)
		{
			if (currentMerge > -1 && block.invisibleBlock() != wantedInvisibilityState)
			{
				currentMerge = -1;
			}
		}

		// Token: 0x0600138E RID: 5006 RVA: 0x0049D0CC File Offset: 0x0049B2CC
		public static bool SpawnFallingBlockProjectile(int i, int j, Tile tileCache, Tile tileTopCache, Tile tileBottomCache, int type)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			if (tileCache == null || tileTopCache == null || tileBottomCache == null)
			{
				return false;
			}
			if (!WorldGen.BlockBelowMakesSandFall(i, j))
			{
				return false;
			}
			if (!WorldGen.AllowsSandfall(tileTopCache))
			{
				return false;
			}
			int projType;
			int dmg;
			WorldGen.GetSandfallProjData(type, out projType, out dmg);
			tileCache.ClearTile();
			if (Main.netMode == 0)
			{
				int num = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 0.41f, projType, dmg, 0f, Main.myPlayer, 0f, 0f, 0f);
				Main.projectile[num].ai[0] = 1f;
				WorldGen.SquareTileFrame(i, j, true);
			}
			if (Main.netMode == 2)
			{
				bool flag = false;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == projType && Math.Abs(Main.projectile[k].timeLeft - 3600) < 60 && Main.projectile[k].Distance(new Vector2((float)(i * 16 + 8), (float)(j * 16 + 10))) < 4f)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					int num2 = Projectile.NewProjectile(WorldGen.GetProjectileSource_TileBreak(i, j), (float)(i * 16 + 8), (float)(j * 16 + 8), 0f, 2.5f, projType, dmg, 0f, Main.myPlayer, 0f, 0f, 0f);
					Main.projectile[num2].velocity.Y = 0.5f;
					Projectile projectile = Main.projectile[num2];
					projectile.position.Y = projectile.position.Y + 2f;
					Main.projectile[num2].netUpdate = true;
				}
				WorldGen.SquareTileFrame(i, j, true);
				NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
				WorldGen.ExploitDestroyQueue.Enqueue(new Point(i, j));
				WorldGen.ExploitDestroyQueue.Enqueue(new Point(i, j - 1));
			}
			return true;
		}

		// Token: 0x0600138F RID: 5007 RVA: 0x0049D2EC File Offset: 0x0049B4EC
		public unsafe static void CheckTorch(int x, int y)
		{
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 1; j <= y + 1; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return;
					}
				}
			}
			Tile tile = Main.tile[x, y];
			Tile tile2 = Main.tile[x, y - 1];
			Tile tile3 = Main.tile[x, y + 1];
			Tile tile4 = Main.tile[x - 1, y];
			Tile tile5 = Main.tile[x + 1, y];
			Tile tile6 = Main.tile[x - 1, y + 1];
			Tile tile7 = Main.tile[x + 1, y + 1];
			Tile tile8 = Main.tile[x - 1, y - 1];
			Tile tile9 = Main.tile[x + 1, y - 1];
			short num = 0;
			if (*tile.frameX >= 66)
			{
				num = 66;
			}
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int tree = -1;
			int tree2 = -1;
			int tree3 = -1;
			int tree4 = -1;
			if (tile2 != null && tile2.active() && !tile2.bottomSlope())
			{
				ref ushort type = ref tile2.type;
			}
			if (tile3 != null && tile3.active() && ((TileID.Sets.Platforms[(int)(*tile3.type)] && WorldGen.TopEdgeCanBeAttachedTo(x, y + 1)) || (!tile3.halfBrick() && !tile3.topSlope())))
			{
				num2 = (int)(*tile3.type);
			}
			if (tile4 != null && tile4.active() && (tile4.slope() == 0 || tile4.slope() % 2 != 1))
			{
				num3 = (int)(*tile4.type);
			}
			if (tile5 != null && tile5.active() && (tile5.slope() == 0 || tile5.slope() % 2 != 0))
			{
				num4 = (int)(*tile5.type);
			}
			if (tile6 != null && tile6.active())
			{
				tree = (int)(*tile6.type);
			}
			if (tile7 != null && tile7.active())
			{
				tree2 = (int)(*tile7.type);
			}
			if (tile8 != null && tile8.active())
			{
				tree3 = (int)(*tile8.type);
			}
			if (tile9 != null && tile9.active())
			{
				tree4 = (int)(*tile9.type);
			}
			if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || TileID.Sets.Platforms[num2]))
			{
				*tile.frameX = num;
				return;
			}
			if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3]) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
			{
				*tile.frameX = 22 + num;
				return;
			}
			if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4]) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
			{
				*tile.frameX = 44 + num;
				return;
			}
			if (*tile.wall > 0)
			{
				*tile.frameX = num;
				return;
			}
			WorldGen.KillTile(x, y, false, false, false);
		}

		// Token: 0x06001390 RID: 5008 RVA: 0x0049D628 File Offset: 0x0049B828
		public unsafe static void CheckProjectilePressurePad(int i, int j)
		{
			bool canUp;
			bool canLeft;
			bool canRight;
			bool canDown;
			WorldGen.CheckProjectilePressurePad_GetPossiblePlacementDirections(i, j, out canUp, out canLeft, out canRight, out canDown);
			Tile tile = Main.tile[i, j];
			bool flag;
			switch (*tile.frameX / 22)
			{
			case 0:
				flag = !canDown;
				break;
			case 1:
				flag = !canUp;
				break;
			case 2:
				flag = !canLeft;
				break;
			case 3:
				flag = !canRight;
				break;
			default:
				flag = true;
				break;
			}
			if (flag)
			{
				if (canDown)
				{
					*tile.frameX = 0;
					return;
				}
				if (canUp)
				{
					*tile.frameX = 22;
					return;
				}
				if (canLeft)
				{
					*tile.frameX = 44;
					return;
				}
				if (canRight)
				{
					*tile.frameX = 66;
					return;
				}
				WorldGen.KillTile(i, j, false, false, false);
			}
		}

		// Token: 0x06001391 RID: 5009 RVA: 0x0049D6E4 File Offset: 0x0049B8E4
		private unsafe static void CheckProjectilePressurePad_GetPossiblePlacementDirections(int i, int j, out bool canUp, out bool canLeft, out bool canRight, out bool canDown)
		{
			canUp = false;
			canLeft = false;
			canRight = false;
			canDown = false;
			Tile tile9 = Main.tile[i, j];
			Tile tile = Main.tile[i, j - 1];
			Tile tile2 = Main.tile[i, j + 1];
			Tile tile3 = Main.tile[i - 1, j];
			Tile tile4 = Main.tile[i + 1, j];
			Tile tile5 = Main.tile[i - 1, j + 1];
			Tile tile6 = Main.tile[i + 1, j + 1];
			Tile tile7 = Main.tile[i - 1, j - 1];
			Tile tile8 = Main.tile[i + 1, j - 1];
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			int num4 = -1;
			int tree = -1;
			int tree2 = -1;
			int tree3 = -1;
			int tree4 = -1;
			if (tile != null && tile.nactive() && !tile.bottomSlope())
			{
				num2 = (int)(*tile.type);
			}
			if (tile2 != null && tile2.nactive() && !tile2.halfBrick() && !tile2.topSlope())
			{
				num = (int)(*tile2.type);
			}
			if (tile3 != null && tile3.nactive() && (tile3.slope() == 0 || tile3.slope() % 2 != 1))
			{
				num3 = (int)(*tile3.type);
			}
			if (tile4 != null && tile4.nactive() && (tile4.slope() == 0 || tile4.slope() % 2 != 0))
			{
				num4 = (int)(*tile4.type);
			}
			if (tile5 != null && tile5.nactive())
			{
				tree = (int)(*tile5.type);
			}
			if (tile6 != null && tile6.nactive())
			{
				tree2 = (int)(*tile6.type);
			}
			if (tile7 != null && tile7.nactive())
			{
				tree3 = (int)(*tile7.type);
			}
			if (tile8 != null && tile8.nactive())
			{
				tree4 = (int)(*tile8.type);
			}
			if (num >= 0 && Main.tileSolid[num] && (!Main.tileNoAttach[num] || TileID.Sets.Platforms[num]) && (tile2.bottomSlope() || tile2.slope() == 0) && !tile2.halfBrick())
			{
				canDown = true;
			}
			if (num2 >= 0 && Main.tileSolid[num2] && (!Main.tileNoAttach[num2] || (TileID.Sets.Platforms[num2] && tile.halfBrick())) && (tile.topSlope() || tile.slope() == 0 || tile.halfBrick()))
			{
				canUp = true;
			}
			if ((num3 >= 0 && Main.tileSolid[num3] && !Main.tileNoAttach[num3] && (tile3.leftSlope() || tile3.slope() == 0) && !tile3.halfBrick()) || (num3 >= 0 && TileID.Sets.IsBeam[num3]) || (WorldGen.IsTreeType(num3) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
			{
				canLeft = true;
			}
			if ((num4 >= 0 && Main.tileSolid[num4] && !Main.tileNoAttach[num4] && (tile4.rightSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num4 >= 0 && TileID.Sets.IsBeam[num4]) || (WorldGen.IsTreeType(num4) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
			{
				canRight = true;
			}
		}

		// Token: 0x06001392 RID: 5010 RVA: 0x0049DA1F File Offset: 0x0049BC1F
		public static bool IsTreeType(int tree)
		{
			return tree >= 0 && TileID.Sets.IsATreeTrunk[tree];
		}

		// Token: 0x06001393 RID: 5011 RVA: 0x0049DA30 File Offset: 0x0049BC30
		public static int CanPlaceProjectilePressurePad(int x, int y, int type = 442, int style = 0, int direction = 0, int alternate = 0)
		{
			bool canUp;
			bool canLeft;
			bool canRight;
			bool canDown;
			WorldGen.CheckProjectilePressurePad_GetPossiblePlacementDirections(x, y, out canUp, out canLeft, out canRight, out canDown);
			if (!canUp && !canDown && !canLeft && !canRight)
			{
				return -1;
			}
			switch (alternate)
			{
			case 0:
				if (!canDown)
				{
					return -1;
				}
				break;
			case 1:
				if (!canUp)
				{
					return -1;
				}
				break;
			case 2:
				if (!canLeft)
				{
					return -1;
				}
				break;
			case 3:
				if (!canRight)
				{
					return -1;
				}
				break;
			}
			return style;
		}

		// Token: 0x06001394 RID: 5012 RVA: 0x0049DA88 File Offset: 0x0049BC88
		private unsafe static void CheckDoorOpen(int i, int j, Tile tileCache)
		{
			if (WorldGen.destroyObject)
			{
				return;
			}
			int num = 0;
			int num2 = i;
			int num6 = (int)(*tileCache.frameX);
			int frameY = (int)(*tileCache.frameY);
			int num3 = frameY / 54;
			num3 += (int)(*tileCache.frameX / 72 * 36);
			int num4 = j - frameY % 54 / 18;
			bool flag = false;
			int num7 = num6 % 72;
			if (num7 <= 18)
			{
				if (num7 != 0)
				{
					if (num7 == 18)
					{
						num2 = i - 1;
						num = 1;
					}
				}
				else
				{
					num2 = i;
					num = 1;
				}
			}
			else if (num7 != 36)
			{
				if (num7 == 54)
				{
					num2 = i;
					num = -1;
				}
			}
			else
			{
				num2 = i + 1;
				num = -1;
			}
			Tile tile = Main.tile[num2, num4 - 1];
			Tile tile2 = Main.tile[num2, num4 + 3];
			if (tile == null)
			{
				tile = default(Tile);
				Main.tile[num2, num4 - 1] = tile;
			}
			if (tile2 == null)
			{
				tile2 = default(Tile);
				Main.tile[num2, num4 + 3] = tile2;
			}
			if (!WorldGen.SolidTile(tile) || !WorldGen.SolidTile(tile2))
			{
				flag = true;
				WorldGen.destroyObject = true;
				if (TileLoader.Drop(i, j, (int)(*tileCache.type), true))
				{
					WorldGen.DropDoorItem(i, j, num3);
				}
			}
			int num5 = num2;
			if (num == -1)
			{
				num5 = num2 - 1;
			}
			for (int k = num5; k < num5 + 2; k++)
			{
				for (int l = num4; l < num4 + 3; l++)
				{
					if (!flag)
					{
						Tile tile3 = Main.tile[k, l];
						if (!tile3.active() || *tile3.type != 11)
						{
							WorldGen.destroyObject = true;
							if (TileLoader.Drop(i, j, (int)(*tileCache.type), true))
							{
								WorldGen.DropDoorItem(i, j, num3);
							}
							flag = true;
							k = num5;
							l = num4;
						}
					}
					if (flag)
					{
						WorldGen.KillTile(k, l, false, false, false);
					}
				}
			}
			WorldGen.destroyObject = false;
		}

		// Token: 0x06001395 RID: 5013 RVA: 0x0049DC54 File Offset: 0x0049BE54
		private unsafe static void CheckDoorClosed(int i, int j, Tile tileCache, int type)
		{
			if (!WorldGen.destroyObject)
			{
				bool flag = false;
				int frameY = (int)(*tileCache.frameY);
				int num2 = frameY / 54;
				num2 += (int)(*tileCache.frameX / 54 * 36);
				int num3 = j - frameY % 54 / 18;
				Tile tile = Main.tile[i, num3 - 1];
				Tile tile2 = Main.tile[i, num3];
				Tile tile3 = Main.tile[i, num3 + 1];
				Tile tile4 = Main.tile[i, num3 + 2];
				Tile tile5 = Main.tile[i, num3 + 3];
				if (tile == null)
				{
					tile = default(Tile);
					Main.tile[i, num3 - 1] = tile;
				}
				if (tile2 == null)
				{
					tile2 = default(Tile);
					Main.tile[i, num3] = tile2;
				}
				if (tile3 == null)
				{
					tile3 = default(Tile);
					Main.tile[i, num3 + 1] = tile3;
				}
				if (tile4 == null)
				{
					tile4 = default(Tile);
					Main.tile[i, num3 + 2] = tile4;
				}
				if (tile5 == null)
				{
					tile5 = default(Tile);
					Main.tile[i, num3 + 3] = tile5;
				}
				if (!WorldGen.SolidTile(tile))
				{
					flag = true;
				}
				if (!WorldGen.SolidTile(tile5))
				{
					flag = true;
				}
				if (!tile2.active() || (int)(*tile2.type) != type)
				{
					flag = true;
				}
				if (!tile3.active() || (int)(*tile3.type) != type)
				{
					flag = true;
				}
				if (!tile4.active() || (int)(*tile4.type) != type)
				{
					flag = true;
				}
				if (flag)
				{
					WorldGen.destroyObject = true;
					bool flag2 = TileLoader.Drop(i, j, type, true);
					WorldGen.KillTile(i, num3, false, false, false);
					WorldGen.KillTile(i, num3 + 1, false, false, false);
					WorldGen.KillTile(i, num3 + 2, false, false, false);
					if (flag2)
					{
						WorldGen.DropDoorItem(i, j, num2);
					}
				}
				WorldGen.destroyObject = false;
			}
		}

		// Token: 0x06001396 RID: 5014 RVA: 0x0049DE2C File Offset: 0x0049C02C
		private static void GetSandfallProjData(int type, out int projType, out int dmg)
		{
			dmg = 10;
			projType = 31;
			TileID.Sets.FallingBlockProjectileInfo data = TileID.Sets.FallingBlockProjectile[type];
			if (data != null)
			{
				projType = data.FallingProjectileType;
				dmg = data.FallingProjectileDamage;
			}
		}

		// Token: 0x06001397 RID: 5015 RVA: 0x0049DE5C File Offset: 0x0049C05C
		public unsafe static bool BlockBelowMakesSandConvertIntoHardenedSand(int i, int j)
		{
			bool result = false;
			if (j >= Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[i, j + 1];
			if (tile == null)
			{
				return false;
			}
			if (!tile.nactive())
			{
				result = true;
			}
			else if (*tile.type >= 0 && !Main.tileSolid[(int)(*tile.type)])
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06001398 RID: 5016 RVA: 0x0049DEBC File Offset: 0x0049C0BC
		public unsafe static bool BlockBelowMakesSandFall(int i, int j)
		{
			bool result = false;
			if (j >= Main.maxTilesY - 1)
			{
				return false;
			}
			Tile tile = Main.tile[i, j + 1];
			if (tile == null)
			{
				return false;
			}
			if (!tile.nactive())
			{
				result = true;
			}
			else if (!Main.tile[i, j + 2].nactive() && (!tile.active() || !Main.tileSolid[(int)(*tile.type)]))
			{
				result = true;
			}
			else if (tile.active() && *tile.type == 165)
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06001399 RID: 5017 RVA: 0x0049DF50 File Offset: 0x0049C150
		public unsafe static bool AllowsSandfall(Tile tileTopCache)
		{
			if (tileTopCache == null)
			{
				return false;
			}
			bool result = true;
			if (tileTopCache.active() && (TileID.Sets.BasicChest[(int)(*tileTopCache.type)] || TileID.Sets.BasicChestFake[(int)(*tileTopCache.type)] || TileID.Sets.BasicDresser[(int)(*tileTopCache.type)] || TileID.Sets.PreventsSandfall[(int)(*tileTopCache.type)]))
			{
				result = false;
			}
			return result;
		}

		// Token: 0x0600139A RID: 5018 RVA: 0x0049DFB8 File Offset: 0x0049C1B8
		public static void TriggerLunarApocalypse()
		{
			List<int> list = new List<int>
			{
				517,
				422,
				507,
				493
			};
			int[] array = new int[4];
			for (int i = 0; i < 4; i++)
			{
				array[i] = list[Main.rand.Next(list.Count)];
				list.Remove(array[i]);
			}
			int num = Main.maxTilesX / 5;
			int num2 = (int)Main.worldSurface;
			for (int j = 0; j < 4; j++)
			{
				int num3 = num * (1 + j);
				bool flag = false;
				for (int k = 0; k < 30; k++)
				{
					int num4 = Main.rand.Next(-100, 101);
					if (Main.remixWorld && Main.getGoodWorld)
					{
						int num5 = Main.rand.Next((int)Main.worldSurface, Main.maxTilesY - 350);
						if (!WorldGen.PlayerLOS(num3 + num4 - 10, num5) && !WorldGen.PlayerLOS(num3 + num4 + 10, num5) && !WorldGen.PlayerLOS(num3 + num4 - 10, num5 - 20) && !WorldGen.PlayerLOS(num3 + num4 + 10, num5 - 20))
						{
							int num6 = NPC.NewNPC(new EntitySource_WorldEvent(null), (num3 + num4) * 16, num5 * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
							if (Main.netMode == 2 && num6 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num6, 0f, 0f, 0f, 0, 0, 0);
							}
							flag = true;
							break;
						}
					}
					else
					{
						for (int num7 = num2; num7 > 100; num7--)
						{
							if (!Collision.SolidTiles(num3 + num4 - 10, num3 + num4 + 10, num7 - 20, num7 + 15) && !WorldGen.PlayerLOS(num3 + num4 - 10, num7) && !WorldGen.PlayerLOS(num3 + num4 + 10, num7) && !WorldGen.PlayerLOS(num3 + num4 - 10, num7 - 20) && !WorldGen.PlayerLOS(num3 + num4 + 10, num7 - 20))
							{
								int num8 = NPC.NewNPC(new EntitySource_WorldEvent(null), (num3 + num4) * 16, num7 * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
								if (Main.netMode == 2 && num8 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num8, 0f, 0f, 0f, 0, 0, 0);
								}
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
				}
				if (!flag)
				{
					NPC.NewNPC(new EntitySource_WorldEvent(null), num3 * 16, (num2 - 40) * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
				}
			}
			NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveSolar = (NPC.TowerActiveStardust = true)));
			NPC.LunarApocalypseIsUp = true;
			NPC.ShieldStrengthTowerSolar = (NPC.ShieldStrengthTowerVortex = (NPC.ShieldStrengthTowerNebula = (NPC.ShieldStrengthTowerStardust = NPC.ShieldStrengthTowerMax)));
			NetMessage.SendData(101, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			WorldGen.MessageLunarApocalypse();
		}

		// Token: 0x0600139B RID: 5019 RVA: 0x0049E314 File Offset: 0x0049C514
		public static void UpdateLunarApocalypse()
		{
			if (!NPC.LunarApocalypseIsUp)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					int type = Main.npc[i].type;
					if (type <= 422)
					{
						if (type != 398)
						{
							if (type == 422)
							{
								flag3 = true;
							}
						}
						else
						{
							flag = true;
						}
					}
					else if (type != 493)
					{
						if (type != 507)
						{
							if (type == 517)
							{
								flag2 = true;
							}
						}
						else
						{
							flag4 = true;
						}
					}
					else
					{
						flag5 = true;
					}
				}
			}
			if (!flag2)
			{
				NPC.TowerActiveSolar = false;
			}
			if (!flag3)
			{
				NPC.TowerActiveVortex = false;
			}
			if (!flag4)
			{
				NPC.TowerActiveNebula = false;
			}
			if (!flag5)
			{
				NPC.TowerActiveStardust = false;
			}
			if (!NPC.TowerActiveSolar && !NPC.TowerActiveVortex && !NPC.TowerActiveNebula && !NPC.TowerActiveStardust && !flag)
			{
				WorldGen.StartImpendingDoom(3600);
			}
		}

		// Token: 0x0600139C RID: 5020 RVA: 0x0049E404 File Offset: 0x0049C604
		public static void StartImpendingDoom(int countdownTime)
		{
			NPC.LunarApocalypseIsUp = false;
			NPC.MaxMoonLordCountdown = countdownTime;
			NPC.MoonLordCountdown = NPC.MaxMoonLordCountdown;
			NetMessage.SendData(103, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[52].Key, Array.Empty<object>()), 50, 255, 130);
			if (Main.netMode != 1)
			{
				WorldGen.GetRidOfCultists();
			}
		}

		// Token: 0x0600139D RID: 5021 RVA: 0x0049E47C File Offset: 0x0049C67C
		public static void GetRidOfCultists()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].type == 437 || Main.npc[i].type == 438 || Main.npc[i].type == 379))
				{
					Main.npc[i].active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, i, 0f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600139E RID: 5022 RVA: 0x0049E518 File Offset: 0x0049C718
		public static void MessageLunarApocalypse()
		{
			if (NPC.LunarApocalypseIsUp)
			{
				int num = 0;
				if (!NPC.TowerActiveSolar)
				{
					num++;
				}
				if (!NPC.TowerActiveVortex)
				{
					num++;
				}
				if (!NPC.TowerActiveNebula)
				{
					num++;
				}
				if (!NPC.TowerActiveStardust)
				{
					num++;
				}
				WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[43 + num].Key, Array.Empty<object>()), 175, 75, 255);
			}
		}

		// Token: 0x0600139F RID: 5023 RVA: 0x0049E584 File Offset: 0x0049C784
		public static void BroadcastText(NetworkText text, Vector4 color)
		{
			WorldGen.BroadcastText(text, new Color(color));
		}

		// Token: 0x060013A0 RID: 5024 RVA: 0x0049E592 File Offset: 0x0049C792
		public static void BroadcastText(NetworkText text, Vector3 color)
		{
			WorldGen.BroadcastText(text, new Color(color));
		}

		// Token: 0x060013A1 RID: 5025 RVA: 0x0049E5A0 File Offset: 0x0049C7A0
		public static void BroadcastText(NetworkText text, int r, int g, int b)
		{
			WorldGen.BroadcastText(text, new Color(r, g, b));
		}

		// Token: 0x060013A2 RID: 5026 RVA: 0x0049E5B0 File Offset: 0x0049C7B0
		public static void BroadcastText(NetworkText text, byte r, byte g, byte b)
		{
			WorldGen.BroadcastText(text, new Color((int)r, (int)g, (int)b));
		}

		// Token: 0x060013A3 RID: 5027 RVA: 0x0049E5C0 File Offset: 0x0049C7C0
		public static void BroadcastText(NetworkText text, Color color)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(text.ToString(), color.R, color.G, color.B);
				return;
			}
			if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(text, color, -1);
			}
		}

		// Token: 0x060013A4 RID: 5028 RVA: 0x0049E5FC File Offset: 0x0049C7FC
		public unsafe static bool CanCutTile(int x, int y, TileCuttingContext context)
		{
			return Main.tile[x, y + 1] != null && *Main.tile[x, y + 1].type != 78 && *Main.tile[x, y + 1].type != 380 && *Main.tile[x, y + 1].type != 579 && (*Main.tile[x, y].type != 254 || *Main.tile[x, y].frameX >= 144);
		}

		// Token: 0x060013A5 RID: 5029 RVA: 0x0049E6B8 File Offset: 0x0049C8B8
		public static bool InAPlaceWithWind(Vector2 position, int width, int height)
		{
			Point point = position.ToTileCoordinates();
			Point point2 = (position + new Vector2((float)width, (float)height)).ToTileCoordinates();
			return WorldGen.InAPlaceWithWind(point.X, point.Y, 1 + point2.X - point.X, 1 + point2.Y - point.Y);
		}

		// Token: 0x060013A6 RID: 5030 RVA: 0x0049E710 File Offset: 0x0049C910
		public static bool DoesWindBlowAtThisHeight(int tileY)
		{
			bool flag = (double)tileY < Main.worldSurface;
			if (Main.remixWorld)
			{
				flag = !flag;
			}
			return flag;
		}

		// Token: 0x060013A7 RID: 5031 RVA: 0x0049E734 File Offset: 0x0049C934
		public unsafe static bool InAPlaceWithWind(int x, int y, int width, int height)
		{
			if (!WorldGen.DoesWindBlowAtThisHeight(y))
			{
				return false;
			}
			for (int i = 0; i < width; i++)
			{
				for (int j = 0; j < height; j++)
				{
					Tile tile = Main.tile[x + i, y + j];
					if (tile == null)
					{
						return false;
					}
					if (*tile.liquid > 0 || (*tile.wall > 0 && !WallID.Sets.AllowsWind[(int)(*tile.wall)]))
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x060013A8 RID: 5032 RVA: 0x0049E7A8 File Offset: 0x0049C9A8
		public unsafe static int[] CountTileTypesInWorld(params int[] oreTypes)
		{
			int[] array = new int[oreTypes.Length];
			for (int i = 0; i < Main.maxTilesX; i++)
			{
				for (int j = 0; j < Main.maxTilesY; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active())
					{
						for (int k = 0; k < oreTypes.Length; k++)
						{
							if (oreTypes[k] == (int)(*tile.type))
							{
								array[k]++;
								break;
							}
						}
					}
				}
			}
			return array;
		}

		// Token: 0x060013A9 RID: 5033 RVA: 0x0049E824 File Offset: 0x0049CA24
		internal static void ClearGenerationPasses()
		{
			WorldGenerator generator = WorldGen._generator;
			if (generator == null)
			{
				return;
			}
			generator._passes.Clear();
		}

		// Token: 0x17000239 RID: 569
		// (get) Token: 0x060013AA RID: 5034 RVA: 0x0049E83A File Offset: 0x0049CA3A
		public static IReadOnlyDictionary<string, GenPass> VanillaGenPasses
		{
			get
			{
				return WorldGen._vanillaGenPasses;
			}
		}

		// Token: 0x060013AB RID: 5035 RVA: 0x0049E841 File Offset: 0x0049CA41
		public static void ModifyPass(PassLegacy pass, ILContext.Manipulator callback)
		{
			MonoModHooks.Modify(pass._method.Method, callback);
		}

		// Token: 0x060013AC RID: 5036 RVA: 0x0049E854 File Offset: 0x0049CA54
		public static void DetourPass(PassLegacy pass, WorldGen.GenPassDetour hookDelegate)
		{
			MonoModHooks.Add(pass._method.Method, hookDelegate);
		}

		/// <summary>
		/// Converts the single tile at the given coordinate into a specified new tile type<br />
		/// Automatically handles tile framing and multiplayer syncing.
		/// </summary>
		/// <param name="i">The X coordinate of the target tile.</param>
		/// <param name="j">The Y coordinate of the target tile.</param>
		/// <param name="newType">The new type to convert the tile into</param>
		/// <param name="tryBreakTrees">Should the conversion try to break trees above the converted tile if the new type is invalid for the tree</param>
		// Token: 0x060013AD RID: 5037 RVA: 0x0049E868 File Offset: 0x0049CA68
		public unsafe static void ConvertTile(int i, int j, int newType, bool tryBreakTrees = false)
		{
			Tile tile = Main.tile[i, j];
			if (*tile.type == (ushort)newType)
			{
				return;
			}
			if (tryBreakTrees)
			{
				WorldGen.TryKillingTreesAboveIfTheyWouldBecomeInvalid(i, j, newType);
			}
			*tile.type = (ushort)newType;
			WorldGen.SquareTileFrame(i, j, true);
			if (Main.netMode != 0)
			{
				NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
			}
		}

		/// <summary>
		/// Converts the single wall at the given coordinate into a specified new wall type<br />
		/// Automatically handles wall framing and multiplayer syncing.
		/// </summary>
		/// <param name="i">The X coordinate of the target tile.</param>
		/// <param name="j">The Y coordinate of the target tile.</param>
		/// <param name="newType">The new type to convert the wall into</param>
		// Token: 0x060013AE RID: 5038 RVA: 0x0049E8C0 File Offset: 0x0049CAC0
		public unsafe static void ConvertWall(int i, int j, int newType)
		{
			Tile tile = Main.tile[i, j];
			if (*tile.wall == (ushort)newType)
			{
				return;
			}
			*tile.wall = (ushort)newType;
			WorldGen.SquareWallFrame(i, j, true);
			if (Main.netMode != 0)
			{
				NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
			}
		}

		/// <summary>
		/// Utility method that mimics vanilla behavior for biome spread in hardmode. Call this in <see cref="M:Terraria.ModLoader.ModBlockType.RandomUpdate(System.Int32,System.Int32)" /> to let your infectious tiles spread around<br />
		/// Automatically checks for the journey mode biome spread toggle, hardmode, spread speed decrease after plantera, chlorophyte protection and sunflower protection.
		/// </summary>
		/// <param name="x">X coordinate of the spreading tile</param>
		/// <param name="y">Y coordinate of the spreading tile</param>
		/// <param name="conversionType">The <see cref="T:Terraria.ID.BiomeConversionID" /> of the spreading tile</param>
		/// <param name="range">Tile range for potential conversion targets</param>
		// Token: 0x060013AF RID: 5039 RVA: 0x0049E90C File Offset: 0x0049CB0C
		public unsafe static void SpreadInfectionToNearbyTile(int x, int y, int conversionType, int range = 3)
		{
			if (!WorldGen.AllowedToSpreadInfections)
			{
				return;
			}
			if (!Main.hardMode || (NPC.downedPlantBoss && WorldGen.genRand.NextBool(2)))
			{
				return;
			}
			bool keepSpreading = true;
			while (keepSpreading)
			{
				keepSpreading = false;
				int testX = x + WorldGen.genRand.Next(-range, range + 1);
				int testY = y + WorldGen.genRand.Next(-range, range + 1);
				if (!WorldGen.InWorld(testX, testY, 10))
				{
					return;
				}
				if (WorldGen.nearbyChlorophyte(testX, testY))
				{
					WorldGen.ChlorophyteDefense(testX, testY);
					return;
				}
				if (WorldGen.CountNearBlocksTypes(testX, testY, 2, 1, new int[]
				{
					27
				}) > 0)
				{
					return;
				}
				ushort num = *Main.tile[testX, testY].type;
				WorldGen.Convert(testX, testY, conversionType, 0, true, false);
				if (num != *Main.tile[testX, testY].type)
				{
					keepSpreading = WorldGen.genRand.NextBool(2);
				}
			}
		}

		// Token: 0x060013B2 RID: 5042 RVA: 0x0049EC44 File Offset: 0x0049CE44
		[CompilerGenerated]
		internal unsafe static void <smCallBack>g__HardmodeGoodRemixTask|357_0(GenerationProgress progress, GameConfiguration configuration)
		{
			int num7 = Main.maxTilesX / 7;
			int num8 = Main.maxTilesX / 14;
			if (Main.dungeonX < Main.maxTilesX / 2)
			{
				for (int i = Main.maxTilesX - num7 - num8; i < Main.maxTilesX; i++)
				{
					for (int j = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 2); j < Main.maxTilesY - 10; j++)
					{
						if (i > Main.maxTilesX - num7)
						{
							WorldGen.Convert(i, j, 2, 1);
						}
						else if (TileID.Sets.Crimson[(int)(*Main.tile[i, j].type)] || TileID.Sets.Corrupt[(int)(*Main.tile[i, j].type)])
						{
							WorldGen.Convert(i, j, 2, 1);
						}
					}
				}
				return;
			}
			for (int k = 0; k < num7 + num8; k++)
			{
				for (int l = (int)Main.worldSurface + WorldGen.genRand.Next(-1, 2); l < Main.maxTilesY - 10; l++)
				{
					if (k < num7)
					{
						WorldGen.Convert(k, l, 2, 1);
					}
					else if (TileID.Sets.Crimson[(int)(*Main.tile[k, l].type)] || TileID.Sets.Corrupt[(int)(*Main.tile[k, l].type)])
					{
						WorldGen.Convert(k, l, 2, 1);
					}
				}
			}
		}

		// Token: 0x04000F2C RID: 3884
		public static TownRoomManager TownManager = new TownRoomManager();

		// Token: 0x04000F2D RID: 3885
		private static Queue<Action<StructureMap>> _postGenActions = new Queue<Action<StructureMap>>();

		// Token: 0x04000F2E RID: 3886
		public static int tileReframeCount;

		// Token: 0x04000F2F RID: 3887
		public static bool noMapUpdate;

		// Token: 0x04000F30 RID: 3888
		public static int treeBG1;

		// Token: 0x04000F31 RID: 3889
		public static int treeBG2;

		// Token: 0x04000F32 RID: 3890
		public static int treeBG3;

		// Token: 0x04000F33 RID: 3891
		public static int treeBG4;

		// Token: 0x04000F34 RID: 3892
		public static int corruptBG;

		// Token: 0x04000F35 RID: 3893
		public static int jungleBG;

		// Token: 0x04000F36 RID: 3894
		public static int snowBG;

		// Token: 0x04000F37 RID: 3895
		public static int hallowBG;

		// Token: 0x04000F38 RID: 3896
		public static int crimsonBG;

		// Token: 0x04000F39 RID: 3897
		public static int desertBG;

		// Token: 0x04000F3A RID: 3898
		public static int oceanBG;

		// Token: 0x04000F3B RID: 3899
		public static int mushroomBG;

		// Token: 0x04000F3C RID: 3900
		public static int underworldBG;

		// Token: 0x04000F3D RID: 3901
		public static readonly int oceanDistance = 250;

		// Token: 0x04000F3E RID: 3902
		public static readonly int beachDistance = 380;

		// Token: 0x04000F3F RID: 3903
		public static readonly int shimmerSafetyDistance = 150;

		/// <summary> Indicates the selected world evil. If true, the world is a Crimson world, when false the world is a Corruption world. </summary>
		// Token: 0x04000F40 RID: 3904
		public static bool crimson;

		// Token: 0x04000F41 RID: 3905
		public static int[] tileCounts = new int[(int)TileID.Count];

		// Token: 0x04000F42 RID: 3906
		public static int totalEvil;

		// Token: 0x04000F43 RID: 3907
		public static int totalBlood;

		// Token: 0x04000F44 RID: 3908
		public static int totalGood;

		// Token: 0x04000F45 RID: 3909
		public static int totalSolid;

		// Token: 0x04000F46 RID: 3910
		public static int totalEvil2;

		// Token: 0x04000F47 RID: 3911
		public static int totalBlood2;

		// Token: 0x04000F48 RID: 3912
		public static int totalGood2;

		// Token: 0x04000F49 RID: 3913
		public static int totalSolid2;

		// Token: 0x04000F4A RID: 3914
		public static byte tEvil;

		// Token: 0x04000F4B RID: 3915
		public static byte tBlood;

		// Token: 0x04000F4C RID: 3916
		public static byte tGood;

		// Token: 0x04000F4D RID: 3917
		public static string currentWorldSeed;

		// Token: 0x04000F4E RID: 3918
		public static int totalX;

		// Token: 0x04000F4F RID: 3919
		public static int totalD;

		// Token: 0x04000F50 RID: 3920
		public static bool IsGeneratingHardMode;

		// Token: 0x04000F51 RID: 3921
		public static bool noTileActions;

		// Token: 0x04000F52 RID: 3922
		public static bool spawnEye;

		// Token: 0x04000F53 RID: 3923
		public static int spawnHardBoss;

		// Token: 0x04000F54 RID: 3924
		public static volatile bool gen;

		// Token: 0x04000F55 RID: 3925
		public static bool shadowOrbSmashed;

		// Token: 0x04000F56 RID: 3926
		public static int shadowOrbCount;

		// Token: 0x04000F57 RID: 3927
		public static int altarCount;

		// Token: 0x04000F58 RID: 3928
		public static bool spawnMeteor;

		// Token: 0x04000F59 RID: 3929
		public static bool loadFailed = false;

		// Token: 0x04000F5A RID: 3930
		public static bool loadSuccess = false;

		// Token: 0x04000F5B RID: 3931
		public static bool worldCleared;

		// Token: 0x04000F5C RID: 3932
		public static bool worldBackup;

		// Token: 0x04000F5D RID: 3933
		public static bool loadBackup = false;

		// Token: 0x04000F5E RID: 3934
		private static int lastMaxTilesX;

		// Token: 0x04000F5F RID: 3935
		private static int lastMaxTilesY;

		// Token: 0x04000F60 RID: 3936
		private static bool mergeUp;

		// Token: 0x04000F61 RID: 3937
		private static bool mergeDown;

		// Token: 0x04000F62 RID: 3938
		private static bool mergeLeft;

		// Token: 0x04000F63 RID: 3939
		private static bool mergeRight;

		/// <summary>
		/// If true, tiles being destroyed won't drop their items. Used during meteor dropping to prevent item spawns. Note that tiles indirectly killed through nearby tile framing, for example, will still drop their item, so this won't prevent all drops.
		/// </summary>
		// Token: 0x04000F64 RID: 3940
		private static bool stopDrops;

		// Token: 0x04000F65 RID: 3941
		public static bool noLiquidCheck;

		// Token: 0x04000F66 RID: 3942
		public static bool AllowedToSpreadInfections = true;

		// Token: 0x04000F67 RID: 3943
		[ThreadStatic]
		public static UnifiedRandom _genRand;

		// Token: 0x04000F68 RID: 3944
		[ThreadStatic]
		public static int _genRandSeed = -2;

		// Token: 0x04000F69 RID: 3945
		public static int _lastSeed;

		// Token: 0x04000F6A RID: 3946
		public static string statusText = "";

		/// <summary> Is true while a multitile is being destroyed. </summary>
		// Token: 0x04000F6B RID: 3947
		public static bool destroyObject;

		// Token: 0x04000F6C RID: 3948
		public static int spawnDelay;

		// Token: 0x04000F6D RID: 3949
		public static int prioritizedTownNPCType;

		// Token: 0x04000F6E RID: 3950
		public static int numTileCount;

		// Token: 0x04000F6F RID: 3951
		public static int maxTileCount = 3500;

		// Token: 0x04000F70 RID: 3952
		public static int maxWallOut2 = 5000;

		// Token: 0x04000F71 RID: 3953
		public static Dictionary<Point, bool> CountedTiles = new Dictionary<Point, bool>(WorldGen.maxTileCount);

		// Token: 0x04000F72 RID: 3954
		public static int lavaCount;

		// Token: 0x04000F73 RID: 3955
		public static int iceCount;

		// Token: 0x04000F74 RID: 3956
		public static int sandCount;

		// Token: 0x04000F75 RID: 3957
		public static int rockCount;

		// Token: 0x04000F76 RID: 3958
		public static int shroomCount;

		// Token: 0x04000F77 RID: 3959
		public static int maxRoomTiles = 750;

		// Token: 0x04000F78 RID: 3960
		public static int numRoomTiles;

		// Token: 0x04000F79 RID: 3961
		public static int[] roomX = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000F7A RID: 3962
		public static int[] roomY = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000F7B RID: 3963
		public static int roomCeilingsCount;

		// Token: 0x04000F7C RID: 3964
		public static int[] roomCeilingX = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000F7D RID: 3965
		public static int[] roomCeilingY = new int[WorldGen.maxRoomTiles];

		// Token: 0x04000F7E RID: 3966
		public static int roomX1;

		// Token: 0x04000F7F RID: 3967
		public static int roomX2;

		// Token: 0x04000F80 RID: 3968
		public static int roomY1;

		// Token: 0x04000F81 RID: 3969
		public static int roomY2;

		// Token: 0x04000F82 RID: 3970
		public static bool canSpawn;

		// Token: 0x04000F83 RID: 3971
		public static bool[] houseTile = new bool[(int)TileID.Count];

		// Token: 0x04000F84 RID: 3972
		public static int bestX;

		// Token: 0x04000F85 RID: 3973
		public static int bestY;

		// Token: 0x04000F86 RID: 3974
		public static int hiScore;

		// Token: 0x04000F87 RID: 3975
		private static bool roomTorch;

		// Token: 0x04000F88 RID: 3976
		private static bool roomDoor;

		// Token: 0x04000F89 RID: 3977
		private static bool roomChair;

		// Token: 0x04000F8A RID: 3978
		private static bool roomTable;

		// Token: 0x04000F8B RID: 3979
		private static bool roomOccupied;

		// Token: 0x04000F8C RID: 3980
		private static bool roomEvil;

		// Token: 0x04000F8D RID: 3981
		private static bool roomHasStinkbug;

		// Token: 0x04000F8E RID: 3982
		private static bool roomHasEchoStinkbug;

		// Token: 0x04000F8F RID: 3983
		public static int WorldGenParam_Evil = -1;

		// Token: 0x04000F90 RID: 3984
		public static readonly int cactusWaterWidth = 50;

		// Token: 0x04000F91 RID: 3985
		public static readonly int cactusWaterHeight = 25;

		// Token: 0x04000F92 RID: 3986
		public static readonly int cactusWaterLimit = 25;

		// Token: 0x04000F93 RID: 3987
		public static MysticLogFairiesEvent mysticLogsEvent = new MysticLogFairiesEvent();

		// Token: 0x04000F94 RID: 3988
		private static bool currentlyTryingToUseAlternateHousingSpot;

		// Token: 0x04000F95 RID: 3989
		private static int sharedRoomX;

		// Token: 0x04000F96 RID: 3990
		public static TownNPCRoomCheckFailureReason roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;

		// Token: 0x04000F97 RID: 3991
		public const int WorldSizeSmallX = 4200;

		// Token: 0x04000F98 RID: 3992
		public const int WorldSizeSmallY = 1200;

		// Token: 0x04000F99 RID: 3993
		public const int WorldSizeMediumX = 6400;

		// Token: 0x04000F9A RID: 3994
		public const int WorldSizeMediumY = 1800;

		// Token: 0x04000F9B RID: 3995
		public const int WorldSizeLargeX = 8400;

		// Token: 0x04000F9C RID: 3996
		public const int WorldSizeLargeY = 2400;

		// Token: 0x04000F9D RID: 3997
		public const int InfectionAndGrassSpreadOuterWorldBuffer = 10;

		// Token: 0x04000F9E RID: 3998
		public static bool generatingWorld = false;

		// Token: 0x04000F9F RID: 3999
		private static int[,] trapDiag = new int[4, 2];

		// Token: 0x04000FA0 RID: 4000
		private static bool[] gem = new bool[6];

		// Token: 0x04000FA1 RID: 4001
		private static int[] mossType = new int[3];

		// Token: 0x04000FA2 RID: 4002
		private static ushort neonMossType;

		// Token: 0x04000FA3 RID: 4003
		private static int tileCounterNum;

		// Token: 0x04000FA4 RID: 4004
		private static int tileCounterMax = 20;

		// Token: 0x04000FA5 RID: 4005
		private static int[] tileCounterX = new int[WorldGen.tileCounterMax];

		// Token: 0x04000FA6 RID: 4006
		private static int[] tileCounterY = new int[WorldGen.tileCounterMax];

		// Token: 0x04000FA7 RID: 4007
		private static WorldGenerator _generator;

		// Token: 0x04000FA8 RID: 4008
		public static int SmallConsecutivesFound = 0;

		// Token: 0x04000FA9 RID: 4009
		public static int SmallConsecutivesEliminated = 0;

		// Token: 0x04000FAA RID: 4010
		public static bool tempRemixWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/Don%27t_dig_up">Don't dig up (aka Remix)</see> secret world seed. See also <see cref="F:Terraria.Main.remixWorld" />. </summary>
		// Token: 0x04000FAB RID: 4011
		public static bool remixWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/Get_fixed_boi">Get fixed boi (aka Zenith)</see> secret world seed. This seed combines multiple secret seeds. Note that the other secret world seed bools inherited by this seed will be set as well, so there is no need to specifically check both those bools and this bool. See also <see cref="F:Terraria.Main.zenithWorld" />. </summary>
		// Token: 0x04000FAC RID: 4012
		public static bool everythingWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/No_traps">No traps</see> secret world seed. See also <see cref="F:Terraria.Main.noTrapsWorld" />. </summary>
		// Token: 0x04000FAD RID: 4013
		public static bool noTrapsWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/Drunk_world">Drunk world</see> secret world seed. See also <see cref="F:Terraria.Main.drunkWorld" />. </summary>
		// Token: 0x04000FAE RID: 4014
		public static bool drunkWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/For_the_worthy">For the worthy</see> secret world seed. See also <see cref="F:Terraria.Main.getGoodWorld" />. </summary>
		// Token: 0x04000FAF RID: 4015
		public static bool getGoodWorldGen = false;

		// Token: 0x04000FB0 RID: 4016
		public static bool tempTenthAnniversaryWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/Celebrationmk10">Celebrationmk10</see> secret world seed. See also <see cref="F:Terraria.Main.tenthAnniversaryWorld" />. </summary>
		// Token: 0x04000FB1 RID: 4017
		public static bool tenthAnniversaryWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/The_Constant">The Constant</see> secret world seed. See also <see cref="F:Terraria.Main.dontStarveWorld" />. </summary>
		// Token: 0x04000FB2 RID: 4018
		public static bool dontStarveWorldGen = false;

		/// <summary> If true, the world is generating with the <see href="https://terraria.wiki.gg/wiki/Not_the_bees">Not the bees</see> secret world seed. See also <see cref="F:Terraria.Main.notTheBeesWorld" />. </summary>
		// Token: 0x04000FB3 RID: 4019
		public static bool notTheBees = false;

		// Token: 0x04000FB4 RID: 4020
		public static bool drunkWorldGenText = false;

		// Token: 0x04000FB5 RID: 4021
		public static bool placingTraps = false;

		// Token: 0x04000FB6 RID: 4022
		public const bool USE_FRAMING_SKIP_FOR_UNIMPORTANT_TILES_IN_WORLDGEN = false;

		// Token: 0x04000FB7 RID: 4023
		private const int ItemSpawnProtectionTime = 18000;

		// Token: 0x04000FB8 RID: 4024
		private static List<Color> _coatingColors = new List<Color>();

		// Token: 0x04000FB9 RID: 4025
		private static int catTailDistance = 8;

		// Token: 0x04000FBA RID: 4026
		public static TreeTopsInfo TreeTops = new TreeTopsInfo();

		// Token: 0x04000FBB RID: 4027
		public static BackgroundChangeFlashInfo BackgroundsCache = new BackgroundChangeFlashInfo();

		// Token: 0x04000FBC RID: 4028
		private static int maxTreeShakes = 500;

		// Token: 0x04000FBD RID: 4029
		private static int numTreeShakes = 0;

		// Token: 0x04000FBE RID: 4030
		private static int[] treeShakeX = new int[WorldGen.maxTreeShakes];

		// Token: 0x04000FBF RID: 4031
		private static int[] treeShakeY = new int[WorldGen.maxTreeShakes];

		// Token: 0x04000FC0 RID: 4032
		private static bool fossilBreak = false;

		// Token: 0x04000FC1 RID: 4033
		public static Queue<Point> ExploitDestroyQueue = new Queue<Point>();

		// Token: 0x04000FC2 RID: 4034
		private static bool growGrassUnderground = false;

		// Token: 0x04000FC3 RID: 4035
		public const bool BUBBLES_SOLID_STATE_FOR_HOUSING = true;

		// Token: 0x04000FC4 RID: 4036
		public static int grassSpread;

		// Token: 0x04000FC5 RID: 4037
		private static Point[] heartPos = new Point[100];

		// Token: 0x04000FC6 RID: 4038
		private static int heartCount;

		// Token: 0x04000FC7 RID: 4039
		private const int strip_w = 200;

		// Token: 0x04000FC8 RID: 4040
		private const int strip_h = 50;

		// Token: 0x04000FC9 RID: 4041
		private static readonly Vertical64BitStrips bitStrip = new Vertical64BitStrips(202);

		// Token: 0x04000FCA RID: 4042
		public static bool noMapUpdateRefresh = false;

		// Token: 0x04000FCB RID: 4043
		private static bool skipFramingDuringGen = false;

		// Token: 0x04000FCC RID: 4044
		internal static Dictionary<string, GenPass> _vanillaGenPasses = new Dictionary<string, GenPass>();

		// Token: 0x020007FC RID: 2044
		public static class WorldSize
		{
			// Token: 0x040067C6 RID: 26566
			public const int Small = 0;

			// Token: 0x040067C7 RID: 26567
			public const int Medium = 1;

			// Token: 0x040067C8 RID: 26568
			public const int Large = 2;
		}

		// Token: 0x020007FD RID: 2045
		public static class SavedOreTiers
		{
			// Token: 0x040067C9 RID: 26569
			public static int Copper = 7;

			// Token: 0x040067CA RID: 26570
			public static int Iron = 6;

			// Token: 0x040067CB RID: 26571
			public static int Silver = 9;

			// Token: 0x040067CC RID: 26572
			public static int Gold = 8;

			// Token: 0x040067CD RID: 26573
			public static int Cobalt = 107;

			// Token: 0x040067CE RID: 26574
			public static int Mythril = 108;

			// Token: 0x040067CF RID: 26575
			public static int Adamantite = 111;
		}

		// Token: 0x020007FE RID: 2046
		public static class Hooks
		{
			// Token: 0x1400007B RID: 123
			// (add) Token: 0x06004FE0 RID: 20448 RVA: 0x00677BAC File Offset: 0x00675DAC
			// (remove) Token: 0x06004FE1 RID: 20449 RVA: 0x00677BE0 File Offset: 0x00675DE0
			public static event WorldGen.Hooks.WorldGenConfigProcessEvent OnWorldGenConfigProcess;

			// Token: 0x1400007C RID: 124
			// (add) Token: 0x06004FE2 RID: 20450 RVA: 0x00677C14 File Offset: 0x00675E14
			// (remove) Token: 0x06004FE3 RID: 20451 RVA: 0x00677C48 File Offset: 0x00675E48
			public static event Action OnWorldLoad;

			// Token: 0x06004FE4 RID: 20452 RVA: 0x00677C7C File Offset: 0x00675E7C
			public static void Initialize()
			{
				Player.Hooks.OnEnterWorld += delegate(Player player)
				{
					if (player.whoAmI == Main.myPlayer)
					{
						WorldGen.Hooks.WorldLoaded();
						if (Main.netMode != 1)
						{
							Main.FixUIScale();
						}
					}
				};
				WorldGen.Hooks.OnWorldLoad += WorldGen.mysticLogsEvent.StartWorld;
				Action value;
				if ((value = WorldGen.Hooks.<>O.<0>__checkHalloween) == null)
				{
					value = (WorldGen.Hooks.<>O.<0>__checkHalloween = new Action(Main.checkHalloween));
				}
				WorldGen.Hooks.OnWorldLoad += value;
				Action value2;
				if ((value2 = WorldGen.Hooks.<>O.<1>__checkXMas) == null)
				{
					value2 = (WorldGen.Hooks.<>O.<1>__checkXMas = new Action(Main.checkXMas));
				}
				WorldGen.Hooks.OnWorldLoad += value2;
			}

			// Token: 0x06004FE5 RID: 20453 RVA: 0x00677D02 File Offset: 0x00675F02
			public static void WorldLoaded()
			{
				if (WorldGen.Hooks.OnWorldLoad != null)
				{
					WorldGen.Hooks.OnWorldLoad();
				}
			}

			// Token: 0x06004FE6 RID: 20454 RVA: 0x00677D15 File Offset: 0x00675F15
			public static void ProcessWorldGenConfig(ref WorldGenConfiguration config)
			{
				if (WorldGen.Hooks.OnWorldGenConfigProcess != null)
				{
					WorldGen.Hooks.OnWorldGenConfigProcess(ref config);
				}
			}

			// Token: 0x02000DE1 RID: 3553
			// (Invoke) Token: 0x06006452 RID: 25682
			public delegate void WorldGenConfigProcessEvent(ref WorldGenConfiguration config);

			// Token: 0x02000DE2 RID: 3554
			[CompilerGenerated]
			private static class <>O
			{
				// Token: 0x04007BBF RID: 31679
				public static Action <0>__checkHalloween;

				// Token: 0x04007BC0 RID: 31680
				public static Action <1>__checkXMas;
			}
		}

		// Token: 0x020007FF RID: 2047
		public static class Spread
		{
			// Token: 0x06004FE7 RID: 20455 RVA: 0x00677D2C File Offset: 0x00675F2C
			public unsafe static void Wall(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort wall = (ushort)wallType;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (WorldGen.SolidTile(item.X, item.Y, false) || *tile.wall != 0)
							{
								if (tile.active() && *tile.wall == 0)
								{
									*tile.wall = wall;
								}
							}
							else
							{
								*tile.wall = wall;
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004FE8 RID: 20456 RVA: 0x00677EE8 File Offset: 0x006760E8
			public unsafe static void Wall2(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort num = (ushort)wallType;
				int num2 = 0;
				int maxWallOut = WorldGen.maxWallOut2;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (*tile.wall != num && !WallID.Sets.CannotBeReplacedByWallSpread[(int)(*tile.wall)])
							{
								if (!WorldGen.SolidTile(item.X, item.Y, false))
								{
									bool flag = WallID.Sets.WallSpreadStopsAtAir[(int)num];
									if (flag && *tile.wall == 0)
									{
										list.Remove(item);
									}
									else
									{
										num2++;
										if (num2 >= maxWallOut)
										{
											list.Remove(item);
										}
										else
										{
											*tile.wall = num;
											Point item2;
											item2..ctor(item.X - 1, item.Y);
											if (!hashSet.Contains(item2))
											{
												list2.Add(item2);
											}
											item2..ctor(item.X + 1, item.Y);
											if (!hashSet.Contains(item2))
											{
												list2.Add(item2);
											}
											item2..ctor(item.X, item.Y - 1);
											if (!hashSet.Contains(item2))
											{
												list2.Add(item2);
											}
											item2..ctor(item.X, item.Y + 1);
											if (!hashSet.Contains(item2))
											{
												list2.Add(item2);
											}
											if (flag)
											{
												item2..ctor(item.X - 1, item.Y - 1);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
												item2..ctor(item.X + 1, item.Y - 1);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
												item2..ctor(item.X - 1, item.Y + 1);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
												item2..ctor(item.X + 1, item.Y + 1);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
												item2..ctor(item.X - 2, item.Y);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
												item2..ctor(item.X + 2, item.Y);
												if (!hashSet.Contains(item2))
												{
													list2.Add(item2);
												}
											}
										}
									}
								}
								else if (tile.active())
								{
									*tile.wall = num;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004FE9 RID: 20457 RVA: 0x00678210 File Offset: 0x00676410
			public unsafe static void Moss(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort mossWall = GenVars.mossWall;
				ushort mossTile = GenVars.mossTile;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (WorldGen.SolidTile(item.X, item.Y, false) || *tile.wall != 0)
							{
								if (tile.active())
								{
									if (*tile.wall == 0)
									{
										*tile.wall = mossWall;
									}
									if (*tile.type == 1)
									{
										*tile.type = mossTile;
									}
								}
							}
							else
							{
								*tile.wall = mossWall;
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004FEA RID: 20458 RVA: 0x006783F0 File Offset: 0x006765F0
			public unsafe static void Gem(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (WorldGen.SolidTile(item.X, item.Y, false) || *tile.wall != 0)
							{
								if (tile.active())
								{
									if (WorldGen.Spread.Gemmable((int)(*tile.type)))
									{
										*tile.type = WorldGen.randGemTile();
									}
									Tile tile2 = Main.tile[item.X - 1, item.Y];
									if (WorldGen.Spread.Gemmable((int)(*tile2.type)))
									{
										*tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[item.X + 1, item.Y];
									if (WorldGen.Spread.Gemmable((int)(*tile2.type)))
									{
										*tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[item.X, item.Y - 1];
									if (WorldGen.Spread.Gemmable((int)(*tile2.type)))
									{
										*tile2.type = WorldGen.randGemTile();
									}
									tile2 = Main.tile[item.X, item.Y + 1];
									if (WorldGen.Spread.Gemmable((int)(*tile2.type)))
									{
										*tile2.type = WorldGen.randGemTile();
									}
								}
							}
							else
							{
								*tile.wall = (ushort)(48 + WorldGen.randGem());
								if (!tile.active() && WorldGen.genRand.Next(2) == 0)
								{
									WorldGen.PlaceTile(item.X, item.Y, 178, true, false, -1, WorldGen.randGem());
								}
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004FEB RID: 20459 RVA: 0x006786B8 File Offset: 0x006768B8
			public unsafe static void Spider(int x, int y)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				byte wall = 62;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (WorldGen.SolidTile(item.X, item.Y, false) || *tile.wall != 0)
							{
								if (tile.active() && *tile.wall == 0)
								{
									*tile.wall = (ushort)wall;
								}
							}
							else
							{
								*tile.wall = (ushort)wall;
								WorldGen.SquareWallFrame(item.X, item.Y, true);
								if (!tile.active())
								{
									*tile.liquid = 0;
									tile.lava(false);
									if (WorldGen.SolidTile(item.X, item.Y + 1, false) && WorldGen.genRand.Next(3) == 0)
									{
										if (WorldGen.genRand.Next(15) == 0)
										{
											WorldGen.AddBuriedChest(item.X, item.Y, 939, true, 15, false, 0);
										}
										else
										{
											WorldGen.PlacePot(item.X, item.Y, 28, WorldGen.genRand.Next(19, 21));
										}
									}
									if (!tile.active())
									{
										if (WorldGen.SolidTile(item.X, item.Y - 1, false) && WorldGen.genRand.Next(3) == 0)
										{
											WorldGen.PlaceTight(item.X, item.Y, true);
										}
										else if (WorldGen.SolidTile(item.X, item.Y + 1, false))
										{
											WorldGen.PlaceTile(item.X, item.Y, 187, true, false, -1, 9 + WorldGen.genRand.Next(5));
											if (WorldGen.genRand.Next(3) == 0)
											{
												if (!tile.active())
												{
													WorldGen.PlaceSmallPile(item.X, item.Y, 34 + WorldGen.genRand.Next(4), 1, 185);
												}
												if (!tile.active())
												{
													WorldGen.PlaceSmallPile(item.X, item.Y, 48 + WorldGen.genRand.Next(6), 0, 185);
												}
											}
										}
									}
								}
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004FEC RID: 20460 RVA: 0x00678A1C File Offset: 0x00676C1C
			public unsafe static void WallDungeon(int x, int y, int wallType)
			{
				if (!WorldGen.InWorld(x, y, 0))
				{
					return;
				}
				ushort num = (ushort)wallType;
				List<Point> list = new List<Point>();
				List<Point> list2 = new List<Point>();
				HashSet<Point> hashSet = new HashSet<Point>();
				list2.Add(new Point(x, y));
				while (list2.Count > 0)
				{
					list.Clear();
					list.AddRange(list2);
					list2.Clear();
					while (list.Count > 0)
					{
						Point item = list[0];
						if (!WorldGen.InWorld(item.X, item.Y, 1))
						{
							list.Remove(item);
						}
						else
						{
							hashSet.Add(item);
							list.Remove(item);
							Tile tile = Main.tile[item.X, item.Y];
							if (!WorldGen.SolidTile(item.X, item.Y, false) && *tile.wall != num && *tile.wall > 0 && *tile.wall != 244)
							{
								*tile.wall = num;
								Point item2;
								item2..ctor(item.X - 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X + 1, item.Y);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y - 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
								item2..ctor(item.X, item.Y + 1);
								if (!hashSet.Contains(item2))
								{
									list2.Add(item2);
								}
							}
							else if (tile.active())
							{
								*tile.wall = num;
							}
						}
					}
				}
			}

			// Token: 0x06004FED RID: 20461 RVA: 0x00678BEC File Offset: 0x00676DEC
			private static bool Gemmable(int type)
			{
				return type == 0 || type == 1 || type == 40 || type == 59 || type == 60 || type == 70 || type == 147 || type == 161;
			}
		}

		// Token: 0x02000800 RID: 2048
		public static class TenthAnniversaryWorldInfo
		{
			// Token: 0x040067D2 RID: 26578
			public static int[] GoodPrefixIdsForAccessory = new int[]
			{
				65,
				68,
				72,
				76
			};

			// Token: 0x040067D3 RID: 26579
			public static int[] GoodPrefixIdsForMeleeWeapon = new int[]
			{
				81,
				59,
				57
			};

			// Token: 0x040067D4 RID: 26580
			public static int[] GoodPrefixIdsForRangedWeapon = new int[]
			{
				82,
				57,
				60
			};

			// Token: 0x040067D5 RID: 26581
			public static int[] GoodPrefixIdsForMagicWeapon = new int[]
			{
				83,
				57,
				60
			};

			// Token: 0x040067D6 RID: 26582
			public static int[] GoodPrefixIdsForSummonerWeapon = new int[]
			{
				83,
				57,
				60
			};
		}

		// Token: 0x02000801 RID: 2049
		public struct GrowTreeSettings
		{
			// Token: 0x040067D7 RID: 26583
			public ushort TreeTileType;

			// Token: 0x040067D8 RID: 26584
			public int TreeHeightMin;

			// Token: 0x040067D9 RID: 26585
			public int TreeHeightMax;

			// Token: 0x040067DA RID: 26586
			public int TreeTopPaddingNeeded;

			// Token: 0x040067DB RID: 26587
			public WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest GroundTest;

			// Token: 0x040067DC RID: 26588
			public WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack WallTest;

			// Token: 0x040067DD RID: 26589
			public ushort SaplingTileType;

			// Token: 0x02000DE4 RID: 3556
			// (Invoke) Token: 0x06006459 RID: 25689
			public delegate bool IsTileFitForTreeGroundTest(int tileType);

			// Token: 0x02000DE5 RID: 3557
			// (Invoke) Token: 0x0600645D RID: 25693
			public delegate bool IsWallTypeFitForTreeBack(int wallType);

			// Token: 0x02000DE6 RID: 3558
			public static class Profiles
			{
				// Token: 0x06006460 RID: 25696 RVA: 0x006DA004 File Offset: 0x006D8204
				public static bool TryGetFromItemId(int itemType, out WorldGen.GrowTreeSettings profile)
				{
					switch (itemType)
					{
					case 4851:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz;
						return true;
					case 4852:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst;
						return true;
					case 4853:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire;
						return true;
					case 4854:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald;
						return true;
					case 4855:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby;
						return true;
					case 4856:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond;
						return true;
					case 4857:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amber;
						return true;
					default:
						if (itemType == 4871)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura;
							return true;
						}
						if (itemType != 4907)
						{
							profile = default(WorldGen.GrowTreeSettings);
							return false;
						}
						profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow;
						return true;
					}
				}

				// Token: 0x06006461 RID: 25697 RVA: 0x006DA0C8 File Offset: 0x006D82C8
				public static bool TryGetFromTreeId(int tileType, out WorldGen.GrowTreeSettings profile)
				{
					switch (tileType)
					{
					case 583:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Topaz;
						return true;
					case 584:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amethyst;
						return true;
					case 585:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Sappphire;
						return true;
					case 586:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Emerald;
						return true;
					case 587:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Ruby;
						return true;
					case 588:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Diamond;
						return true;
					case 589:
						profile = WorldGen.GrowTreeSettings.Profiles.GemTree_Amber;
						return true;
					case 590:
					case 591:
					case 592:
					case 593:
					case 594:
					case 595:
						break;
					case 596:
						profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Sakura;
						return true;
					default:
						if (tileType == 616)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.VanityTree_Willow;
							return true;
						}
						if (tileType == 634)
						{
							profile = WorldGen.GrowTreeSettings.Profiles.Tree_Ash;
							return true;
						}
						break;
					}
					profile = default(WorldGen.GrowTreeSettings);
					return false;
				}

				// Token: 0x04007BC3 RID: 31683
				public static WorldGen.GrowTreeSettings GemTree_Ruby = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 587,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC4 RID: 31684
				public static WorldGen.GrowTreeSettings GemTree_Diamond = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 588,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC5 RID: 31685
				public static WorldGen.GrowTreeSettings GemTree_Topaz = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 583,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC6 RID: 31686
				public static WorldGen.GrowTreeSettings GemTree_Amethyst = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 584,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC7 RID: 31687
				public static WorldGen.GrowTreeSettings GemTree_Sappphire = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 585,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC8 RID: 31688
				public static WorldGen.GrowTreeSettings GemTree_Emerald = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 586,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BC9 RID: 31689
				public static WorldGen.GrowTreeSettings GemTree_Amber = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.GemTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.GemTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 589,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 590
				};

				// Token: 0x04007BCA RID: 31690
				public static WorldGen.GrowTreeSettings VanityTree_Sakura = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.VanityTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 596,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 595
				};

				// Token: 0x04007BCB RID: 31691
				public static WorldGen.GrowTreeSettings VanityTree_Willow = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.VanityTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 616,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 615
				};

				// Token: 0x04007BCC RID: 31692
				public static WorldGen.GrowTreeSettings Tree_Ash = new WorldGen.GrowTreeSettings
				{
					GroundTest = new WorldGen.GrowTreeSettings.IsTileFitForTreeGroundTest(WorldGen.AshTreeGroundTest),
					WallTest = new WorldGen.GrowTreeSettings.IsWallTypeFitForTreeBack(WorldGen.DefaultTreeWallTest),
					TreeHeightMax = 12,
					TreeHeightMin = 7,
					TreeTileType = 634,
					TreeTopPaddingNeeded = 4,
					SaplingTileType = 20
				};
			}
		}

		// Token: 0x02000802 RID: 2050
		public struct CheckTreeSettings
		{
			// Token: 0x040067DE RID: 26590
			public WorldGen.CheckTreeSettings.GroundValidTest IsGroundValid;

			// Token: 0x02000DE7 RID: 3559
			// (Invoke) Token: 0x06006464 RID: 25700
			public delegate bool GroundValidTest(int groundTileType);
		}

		// Token: 0x02000803 RID: 2051
		public enum SpecialKillTileContext
		{
			// Token: 0x040067E0 RID: 26592
			None,
			// Token: 0x040067E1 RID: 26593
			MowingTheGrass
		}

		// Token: 0x02000804 RID: 2052
		// (Invoke) Token: 0x06004FF0 RID: 20464
		public delegate bool GetTreeFoliageDataMethod(int i, int j, int xoffset, ref int treeFrame, ref int treeStyle, out int floorY, out int topTextureFrameWidth, out int topTextureFrameHeight);

		// Token: 0x02000805 RID: 2053
		public struct TileMergeCullCache
		{
			// Token: 0x06004FF3 RID: 20467 RVA: 0x00678C98 File Offset: 0x00676E98
			public void Cull(ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
			{
				if (this.CullTop)
				{
					up = -1;
				}
				if (this.CullBottom)
				{
					down = -1;
				}
				if (this.CullLeft)
				{
					left = -1;
				}
				if (this.CullRight)
				{
					right = -1;
				}
				if (this.CullTopLeft)
				{
					upLeft = -1;
				}
				if (this.CullTopRight)
				{
					upRight = -1;
				}
				if (this.CullBottomLeft)
				{
					downLeft = -1;
				}
				if (this.CullBottomRight)
				{
					downRight = -1;
				}
			}

			// Token: 0x040067E2 RID: 26594
			public bool CullTop;

			// Token: 0x040067E3 RID: 26595
			public bool CullBottom;

			// Token: 0x040067E4 RID: 26596
			public bool CullLeft;

			// Token: 0x040067E5 RID: 26597
			public bool CullRight;

			// Token: 0x040067E6 RID: 26598
			public bool CullTopLeft;

			// Token: 0x040067E7 RID: 26599
			public bool CullTopRight;

			// Token: 0x040067E8 RID: 26600
			public bool CullBottomLeft;

			// Token: 0x040067E9 RID: 26601
			public bool CullBottomRight;
		}

		// Token: 0x02000806 RID: 2054
		// (Invoke) Token: 0x06004FF5 RID: 20469
		public delegate void GenPassDetour(WorldGen.orig_GenPassDetour orig, object self, GenerationProgress progress, GameConfiguration configuration);

		// Token: 0x02000807 RID: 2055
		// (Invoke) Token: 0x06004FF9 RID: 20473
		public delegate void orig_GenPassDetour(object self, GenerationProgress progress, GameConfiguration configuration);

		// Token: 0x02000808 RID: 2056
		[CompilerGenerated]
		private static class <>O
		{
			// Token: 0x040067EA RID: 26602
			[Nullable(new byte[]
			{
				0,
				2
			})]
			public static Action<object> <0>__worldGenCallback;

			// Token: 0x040067EB RID: 26603
			public static WaitCallback <1>__SaveAndQuitCallBack;

			// Token: 0x040067EC RID: 26604
			public static WaitCallback <2>__RenameWorldCallBack;

			// Token: 0x040067ED RID: 26605
			public static Action <3>__FinishPlayWorld;

			// Token: 0x040067EE RID: 26606
			public static WaitCallback <4>__playWorldCallBack;

			// Token: 0x040067EF RID: 26607
			public static WaitCallback <5>__saveAndPlayCallBack;

			// Token: 0x040067F0 RID: 26608
			public static WaitCallback <6>__saveToonWhilePlayingCallBack;

			// Token: 0x040067F1 RID: 26609
			public static Action <7>__serverLoadWorldCallBack;

			// Token: 0x040067F2 RID: 26610
			public static WaitCallback <8>__smCallBack;

			// Token: 0x040067F3 RID: 26611
			public static WorldGenLegacyMethod <9>__HardmodeWallsTask;

			// Token: 0x040067F4 RID: 26612
			public static WorldGenLegacyMethod <10>__HardmodeAnnouncementTask;

			// Token: 0x040067F5 RID: 26613
			public static Utils.TileActionAttempt <11>__CheckStopForSolids;

			// Token: 0x040067F6 RID: 26614
			public static WorldGen.CheckTreeSettings.GroundValidTest <12>__GemTreeGroundTest;

			// Token: 0x040067F7 RID: 26615
			public static WorldGen.CheckTreeSettings.GroundValidTest <13>__VanityTreeGroundTest;

			// Token: 0x040067F8 RID: 26616
			public static WorldGen.CheckTreeSettings.GroundValidTest <14>__AshTreeGroundTest;
		}
	}
}

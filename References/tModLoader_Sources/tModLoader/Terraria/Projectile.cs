using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.CompilerServices;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using Terraria.ModLoader.Core;
using Terraria.ObjectData;
using Terraria.Physics;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	// Token: 0x02000048 RID: 72
	public class Projectile : Entity, IEntityWithGlobals<GlobalProjectile>
	{
		// Token: 0x170001A8 RID: 424
		// (get) Token: 0x06000CD7 RID: 3287 RVA: 0x002E40C8 File Offset: 0x002E22C8
		// (set) Token: 0x06000CD8 RID: 3288 RVA: 0x002E40D5 File Offset: 0x002E22D5
		internal bool melee
		{
			get
			{
				return this.CountsAsClass(DamageClass.Melee);
			}
			set
			{
				if (value)
				{
					this.DamageType = DamageClass.Melee;
					return;
				}
				if (this.DamageType == DamageClass.Melee)
				{
					this.DamageType = DamageClass.Default;
				}
			}
		}

		// Token: 0x170001A9 RID: 425
		// (get) Token: 0x06000CD9 RID: 3289 RVA: 0x002E40FE File Offset: 0x002E22FE
		// (set) Token: 0x06000CDA RID: 3290 RVA: 0x002E410B File Offset: 0x002E230B
		internal bool ranged
		{
			get
			{
				return this.CountsAsClass(DamageClass.Ranged);
			}
			set
			{
				if (value)
				{
					this.DamageType = DamageClass.Ranged;
					return;
				}
				if (this.DamageType == DamageClass.Ranged)
				{
					this.DamageType = DamageClass.Default;
				}
			}
		}

		// Token: 0x170001AA RID: 426
		// (get) Token: 0x06000CDB RID: 3291 RVA: 0x002E4134 File Offset: 0x002E2334
		// (set) Token: 0x06000CDC RID: 3292 RVA: 0x002E4141 File Offset: 0x002E2341
		internal bool magic
		{
			get
			{
				return this.CountsAsClass(DamageClass.Magic);
			}
			set
			{
				if (value)
				{
					this.DamageType = DamageClass.Magic;
					return;
				}
				if (this.DamageType == DamageClass.Magic)
				{
					this.DamageType = DamageClass.Default;
				}
			}
		}

		// Token: 0x170001AB RID: 427
		// (get) Token: 0x06000CDD RID: 3293 RVA: 0x002E416A File Offset: 0x002E236A
		// (set) Token: 0x06000CDE RID: 3294 RVA: 0x002E4186 File Offset: 0x002E2386
		public string Name
		{
			get
			{
				return this.nameOverride ?? Lang.GetProjectileName(this.type).Value;
			}
			set
			{
				this.nameOverride = value;
			}
		}

		// Token: 0x170001AC RID: 428
		// (get) Token: 0x06000CDF RID: 3295 RVA: 0x002E418F File Offset: 0x002E238F
		public bool WipableTurret
		{
			get
			{
				return this.owner == Main.myPlayer && this.sentry && !this.TurretShouldPersist();
			}
		}

		/// <summary>
		/// Derived from <see cref="F:Terraria.Projectile.alpha" />, except it ranges from 0f to 1f and is inverted. 0 is transparent and 1 is fully opaque. Using this instead of alpha might make more sense when doing graphics calculations.
		/// </summary>
		// Token: 0x170001AD RID: 429
		// (get) Token: 0x06000CE0 RID: 3296 RVA: 0x002E41B1 File Offset: 0x002E23B1
		// (set) Token: 0x06000CE1 RID: 3297 RVA: 0x002E41C6 File Offset: 0x002E23C6
		public float Opacity
		{
			get
			{
				return 1f - (float)this.alpha / 255f;
			}
			set
			{
				this.alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		/// <summary>
		/// Derived from <see cref="F:Terraria.Projectile.extraUpdates" />, except 1 is added to arrive at the total number of updates to be run. Using this instead of extraUpdates might make code more readable.
		/// </summary>
		// Token: 0x170001AE RID: 430
		// (get) Token: 0x06000CE2 RID: 3298 RVA: 0x002E41EB File Offset: 0x002E23EB
		// (set) Token: 0x06000CE3 RID: 3299 RVA: 0x002E41F5 File Offset: 0x002E23F5
		public int MaxUpdates
		{
			get
			{
				return this.extraUpdates + 1;
			}
			set
			{
				this.extraUpdates = value - 1;
			}
		}

		// Token: 0x170001AF RID: 431
		// (get) Token: 0x06000CE4 RID: 3300 RVA: 0x002E4200 File Offset: 0x002E2400
		public NPC OwnerMinionAttackTargetNPC
		{
			get
			{
				if (Main.player[this.owner].MinionAttackTargetNPC < 0)
				{
					return null;
				}
				return Main.npc[Main.player[this.owner].MinionAttackTargetNPC];
			}
		}

		// Token: 0x06000CE5 RID: 3301 RVA: 0x002E4230 File Offset: 0x002E2430
		public static void InitializeStaticThings()
		{
			Projectile.perIDStaticNPCImmunity = new uint[(int)ProjectileID.Count][];
			for (int i = 0; i < Projectile.perIDStaticNPCImmunity.Length; i++)
			{
				Projectile.perIDStaticNPCImmunity[i] = new uint[200];
			}
			Action value;
			if ((value = Projectile.<>O.<0>__ResetImmunity) == null)
			{
				value = (Projectile.<>O.<0>__ResetImmunity = new Action(Projectile.ResetImmunity));
			}
			WorldGen.Hooks.OnWorldLoad += value;
		}

		// Token: 0x06000CE6 RID: 3302 RVA: 0x002E4290 File Offset: 0x002E2490
		public static void ResetImmunity()
		{
			for (int i = 0; i < Projectile.perIDStaticNPCImmunity.Length; i++)
			{
				for (int j = 0; j < 200; j++)
				{
					Projectile.perIDStaticNPCImmunity[i][j] = 0U;
				}
			}
		}

		// Token: 0x06000CE7 RID: 3303 RVA: 0x002E42C9 File Offset: 0x002E24C9
		public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex)
		{
			return Projectile.perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
		}

		// Token: 0x06000CE8 RID: 3304 RVA: 0x002E42E0 File Offset: 0x002E24E0
		public bool TurretShouldPersist()
		{
			int num = this.type;
			switch (num)
			{
			case 663:
			case 665:
			case 667:
				break;
			case 664:
			case 666:
				return false;
			default:
				if (num - 677 > 2 && num - 688 > 5)
				{
					return false;
				}
				break;
			}
			return DD2Event.Ongoing;
		}

		// Token: 0x06000CE9 RID: 3305 RVA: 0x002E4330 File Offset: 0x002E2530
		public void CloneDefaults(int TypeToClone)
		{
			int originalType = this.type;
			ModProjectile originalModProjectile = this.ModProjectile;
			GlobalProjectile[] originalGlobals = this._globals;
			this.SetDefaults(TypeToClone);
			this.type = originalType;
			this.ModProjectile = originalModProjectile;
			this._globals = originalGlobals;
			int num = ProjectileID.Sets.TrailCacheLength[this.type];
			if (num != this.oldPos.Length)
			{
				Array.Resize<Vector2>(ref this.oldPos, num);
				Array.Resize<float>(ref this.oldRot, num);
				Array.Resize<int>(ref this.oldSpriteDirection, num);
			}
			for (int i = 0; i < this.oldPos.Length; i++)
			{
				this.oldPos[i].X = 0f;
				this.oldPos[i].Y = 0f;
				this.oldRot[i] = 0f;
				this.oldSpriteDirection[i] = 0;
			}
		}

		// Token: 0x06000CEA RID: 3306 RVA: 0x002E4408 File Offset: 0x002E2608
		public void SetDefaults(int Type)
		{
			this.ModProjectile = null;
			this._globals = null;
			this.DamageType = DamageClass.Default;
			this.ArmorPenetration = 0;
			this.CritChance = 0;
			this.WhipSettings = default(WhipSettings);
			this.ContinuouslyUpdateDamageStats = false;
			this.nameOverride = null;
			this.ownerHitCheckDistance = 1000f;
			this.counterweight = false;
			this.sentry = false;
			this.arrow = false;
			this.bobber = false;
			this.numHits = 0;
			this.netImportant = false;
			this.manualDirectionChange = false;
			this.decidesManualFallThrough = false;
			this.shouldFallThrough = false;
			this.bannerIdToRespondTo = 0;
			this.stopsDealingDamageAfterPenetrateHits = false;
			this.localNPCHitCooldown = -2;
			this.idStaticNPCHitCooldown = -1;
			this.usesLocalNPCImmunity = false;
			this.usesIDStaticNPCImmunity = false;
			this.usesOwnerMeleeHitCD = false;
			this.appliesImmunityTimeOnSingleHits = false;
			int num = 10;
			if (Type >= 0)
			{
				num = ProjectileID.Sets.TrailCacheLength[Type];
			}
			if (num != this.oldPos.Length)
			{
				Array.Resize<Vector2>(ref this.oldPos, num);
				Array.Resize<float>(ref this.oldRot, num);
				Array.Resize<int>(ref this.oldSpriteDirection, num);
			}
			for (int i = 0; i < this.oldPos.Length; i++)
			{
				this.oldPos[i].X = 0f;
				this.oldPos[i].Y = 0f;
				this.oldRot[i] = 0f;
				this.oldSpriteDirection[i] = 0;
			}
			for (int j = 0; j < Projectile.maxAI; j++)
			{
				this.ai[j] = 0f;
				this.localAI[j] = 0f;
			}
			for (int k = 0; k < 255; k++)
			{
				this.playerImmune[k] = 0;
			}
			this.ResetLocalNPCHitImmunity();
			this.noDropItem = false;
			this.minion = false;
			this.minionSlots = 0f;
			this.soundDelay = 0;
			this.spriteDirection = 1;
			this.ownerHitCheck = false;
			this.hide = false;
			this.lavaWet = false;
			this.wetCount = 0;
			this.wet = false;
			this.ignoreWater = false;
			this.isAPreviewDummy = false;
			this.hostile = false;
			this.reflected = false;
			this.netUpdate = false;
			this.netUpdate2 = false;
			this.netSpam = 0;
			this.numUpdates = 0;
			this.extraUpdates = 0;
			this.identity = 0;
			this.restrikeDelay = 0;
			this.light = 0f;
			this.penetrate = 1;
			this.tileCollide = true;
			this.position = Vector2.Zero;
			this.velocity = Vector2.Zero;
			this.aiStyle = 0;
			this.alpha = 0;
			this.glowMask = -1;
			this.type = Type;
			this.active = (Type != 0);
			this.rotation = 0f;
			this.scale = 1f;
			this.owner = 255;
			this.timeLeft = 3600;
			this.friendly = false;
			this.damage = 0;
			this.originalDamage = 0;
			this.knockBack = 0f;
			this.miscText = "";
			this.coldDamage = false;
			this.noEnchantments = false;
			this.noEnchantmentVisuals = false;
			this.trap = false;
			this.npcProj = false;
			this.originatedFromActivableTile = false;
			this.projUUID = -1;
			this.frame = 0;
			this.frameCounter = 0;
			this.SetDefaults_Inner(Type);
			this.SetDefaults_End(Type);
		}

		// Token: 0x06000CEB RID: 3307 RVA: 0x002E4748 File Offset: 0x002E2948
		private bool SetDefaults1(int Type)
		{
			if (this.type == 1)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 2)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 3)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 4;
				this.ranged = true;
			}
			else if (this.type == 4)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 0.35f;
				this.penetrate = 5;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 5)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 0.4f;
				this.penetrate = -1;
				this.alpha = 100;
				this.ignoreWater = true;
				this.ranged = true;
				this.extraUpdates = 1;
				this.timeLeft = 120;
			}
			else if (this.type == 6)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
			}
			else if (this.type == 7 || this.type == 8)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 4;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 9)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 2;
				this.scale = 0.8f;
				this.tileCollide = false;
				this.melee = true;
			}
			else if (this.type == 10)
			{
				this.width = 64;
				this.height = 64;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 11)
			{
				this.width = 48;
				this.height = 48;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 12)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 5;
				if (Main.remixWorld)
				{
					this.hostile = true;
				}
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 50;
				this.light = 1f;
			}
			else if (this.type == 13)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 14)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 15)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
			}
			else if (this.type == 16)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 17)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.ignoreWater = true;
			}
			else if (this.type == 18)
			{
				this.netImportant = true;
				this.width = 32;
				this.height = 32;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.alpha = 150;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 19)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.light = 1f;
				this.melee = true;
			}
			else if (this.type == 20)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 21)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.scale = 1.2f;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 22)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 12;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 5;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
				if (Main.remixWorld)
				{
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = 12;
				}
			}
			else if (this.type == 23)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 12;
			}
			else if (this.type == 24)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = 7;
				this.ranged = true;
			}
			else if (this.type == 25)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.9f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 26)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 27)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft /= 2;
				this.penetrate = 10;
				this.magic = true;
			}
			else if (this.type == 28)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 29)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 30)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 31)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 32)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 33)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 34)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.penetrate = 2;
				this.magic = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 12;
			}
			else if (this.type == 35)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 36)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 2;
				this.light = 0.6f;
				this.alpha = 255;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 15;
			}
			else if (this.type == 37)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 38)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 0;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
			}
			else if (this.type == 39)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 40)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 41)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.light = 0.3f;
			}
			else if (this.type == 42)
			{
				this.knockBack = 8f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.ranged = true;
				this.friendly = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 43)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 44)
			{
				this.width = 48;
				this.height = 48;
				this.alpha = 100;
				this.light = 0.2f;
				this.aiStyle = 18;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = true;
				this.scale = 0.9f;
			}
			else if (this.type == 45)
			{
				this.width = 48;
				this.height = 48;
				this.alpha = 100;
				this.light = 0.2f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 5;
				this.tileCollide = true;
				this.scale = 0.9f;
				this.magic = true;
			}
			else if (this.type == 46)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 47)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 48)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.ranged = true;
			}
			else if (this.type == 49)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.2f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 50)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
			}
			else if (this.type == 51)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.ranged = true;
				this.friendly = true;
			}
			else if (this.type == 52)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 53)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
				this.tileCollide = false;
			}
			else if (this.type == 54)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.ranged = true;
			}
			else if (this.type == 55)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 0;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
			}
			else if (this.type == 56)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 57)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 58)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.08f;
			}
			else if (this.type == 59)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 60)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 61)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.16f;
			}
			else if (this.type == 62)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.9f;
			}
			else if (this.type == 63)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 64)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.25f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 65)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 66)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.27f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 67)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 68)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 69)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 70)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 621)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 71)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 72)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 73 || this.type == 74)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.light = 0.4f;
			}
			else if (this.type == 75)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 76 || this.type == 77 || this.type == 78)
			{
				if (this.type == 76)
				{
					this.width = 10;
					this.height = 22;
				}
				else if (this.type == 77)
				{
					this.width = 18;
					this.height = 24;
				}
				else
				{
					this.width = 22;
					this.height = 24;
				}
				this.aiStyle = 21;
				this.friendly = true;
				this.alpha = 100;
				this.light = 0.3f;
				this.penetrate = -1;
				this.timeLeft = 180;
				this.magic = true;
			}
			else if (this.type == 79)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 9;
				this.friendly = true;
				this.light = 0.8f;
				this.magic = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 12;
				this.ignoreWater = true;
			}
			else if (this.type == 80)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 22;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.light = 0.5f;
				this.coldDamage = true;
			}
			else if (this.type == 81)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 82)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 83)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.7f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 84)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 85)
			{
				this.ArmorPenetration = 15;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 193;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 4;
				this.extraUpdates = 2;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 86)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 87)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 11;
				this.friendly = true;
				this.light = 0.9f;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 88)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 4;
				this.scale = 1.4f;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 89)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 90)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 24;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 50;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.tileCollide = false;
			}
			else if (this.type == 91)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 92)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 50;
				this.scale = 0.8f;
				this.tileCollide = false;
				this.ranged = true;
			}
			else if (this.type == 93)
			{
				this.light = 0.15f;
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 2;
				this.magic = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 20;
			}
			else if (this.type == 94)
			{
				this.ignoreWater = true;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 24;
				this.friendly = true;
				this.light = 0.5f;
				this.alpha = 50;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
				this.tileCollide = true;
				this.penetrate = 1;
			}
			else if (this.type == 95)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.penetrate = 2;
			}
			else if (this.type == 96)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.hostile = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.penetrate = -1;
				this.scale = 0.9f;
				this.scale = 1.3f;
			}
			else if (this.type == 97)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 98)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 99 || this.type == 727 || this.type == 1013 || this.type == 1014)
			{
				this.width = 31;
				this.height = 31;
				this.aiStyle = 25;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 1005)
			{
				this.width = 15;
				this.height = 15;
				this.aiStyle = 25;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 1021)
			{
				this.width = 31;
				this.height = 31;
				this.aiStyle = 25;
				this.hostile = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
				this.timeLeft *= 3;
			}
			else if (this.type == 100)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.8f;
				this.timeLeft = 2700;
				this.magic = true;
			}
			else if (this.type == 101)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 23;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 3;
				this.magic = true;
			}
			else if (this.type == 102)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 103)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 104)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 2;
			}
			else if (this.type == 105)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.3f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 106)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
			}
			else if (this.type == 107)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 108)
			{
				this.width = 260;
				this.height = 260;
				this.aiStyle = 16;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.timeLeft = 2;
				this.trap = true;
			}
			else if (this.type == 109)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.hostile = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.coldDamage = true;
				this.ranged = true;
			}
			else if (this.type == 110)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 111)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 112)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 113)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.4f;
				this.coldDamage = true;
			}
			else if (this.type == 114)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.magic = true;
				this.penetrate = 3;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 115)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.hostile = true;
				this.magic = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
			}
			else if (this.type == 116)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 117)
			{
				this.arrow = true;
				this.extraUpdates = 2;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 118)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 28;
				this.alpha = 255;
				this.melee = true;
				this.penetrate = 1;
				this.friendly = true;
				this.coldDamage = true;
			}
			else if (this.type == 119)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.melee = true;
				this.penetrate = 3;
				this.friendly = true;
				this.coldDamage = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 120)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.coldDamage = true;
				this.extraUpdates = 1;
				this.timeLeft = 1200;
			}
			else if (this.type == 121)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 122)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 123)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 124)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 125)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 126)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 127)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 128)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.coldDamage = true;
			}
			else if (this.type == 129)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type == 130)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.2f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 131)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 30;
				this.friendly = true;
				this.penetrate = 1;
				this.tileCollide = false;
				this.melee = true;
				this.light = 0.5f;
			}
			else if (this.type == 132)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 3;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 133)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 134)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 135)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 136)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 137)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 138)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 139)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 140)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 141)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 142)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 143)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 144)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 145)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 146)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 147)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 148)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 149)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 31;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 150 || this.type == 151 || this.type == 152)
			{
				this.ArmorPenetration = 10;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 4;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 153)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 154)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 22;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 0.8f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 155)
			{
				this.netImportant = true;
				this.width = 44;
				this.height = 44;
				this.aiStyle = 32;
				this.friendly = true;
			}
			else if (this.type == 156)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 2;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 157)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 27;
				this.melee = true;
				this.light = 0.5f;
				this.alpha = 255;
				this.friendly = true;
				this.scale = 1.2f;
			}
			else if (this.type == 158)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 159)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 160)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 161)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 162)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 4;
				this.alpha = 255;
			}
			else if (this.type == 163)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 164)
			{
				this.width = 128;
				this.height = 128;
				this.aiStyle = 16;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.timeLeft = 2;
			}
			else if (this.type == 165)
			{
				this.netImportant = true;
				this.width = 12;
				this.height = 12;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 166)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
				this.coldDamage = true;
			}
			else if (this.type == 167 || this.type == 168 || this.type == 169 || this.type == 170)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 34;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 45;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 1;
				this.appliesImmunityTimeOnSingleHits = true;
			}
			else if (this.type == 171 || this.type == 505 || this.type == 506)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 35;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 400;
			}
			else if (this.type == 172)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.coldDamage = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 173)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 27;
				this.melee = true;
				this.penetrate = 1;
				this.light = 0.2f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 174)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.coldDamage = true;
			}
			else if (this.type == 175)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 176)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 177)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.coldDamage = true;
			}
			else if (this.type == 178)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.timeLeft = 2;
			}
			else if (this.type == 179)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 180)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.extraUpdates = 1;
			}
			else if (this.type == 181)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.timeLeft = 600;
				this.extraUpdates = 3;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 182)
			{
				this.light = 0.15f;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = 10;
				this.melee = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 183)
			{
				this.width = 14;
				this.height = 22;
				this.aiStyle = 14;
				this.penetrate = 1;
				this.timeLeft = 180;
				this.ranged = true;
				this.friendly = true;
			}
			else if (this.type == 184)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 185)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 900;
				this.trap = true;
			}
			else if (this.type == 186)
			{
				this.width = 10;
				this.height = 14;
				this.aiStyle = 37;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 300;
				this.trap = true;
			}
			else if (this.type == 187)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 38;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.trap = true;
			}
			else if (this.type == 188)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 23;
				this.friendly = true;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.trap = true;
			}
			else if (this.type == 189)
			{
				this.ArmorPenetration = 10;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
				this.extraUpdates = 3;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 190)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 39;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 14;
			}
			else if (this.type >= 191 && this.type <= 194)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				if (this.type == 192)
				{
					this.scale = 1.025f;
				}
				if (this.type == 193)
				{
					this.scale = 1.05f;
				}
				if (this.type == 194)
				{
					this.scale = 1.075f;
				}
			}
			else if (this.type == 195)
			{
				this.tileCollide = false;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 196)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.scale = 0.8f;
			}
			else if (this.type == 197)
			{
				this.netImportant = true;
				this.width = 42;
				this.height = 42;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 198)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 199)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
			}
			else if (this.type == 200)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 201)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 202)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 203)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 204)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 205)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 206)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 40;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 207)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 208)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 36;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 209)
			{
				this.width = 12;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 0.5f;
			}
			else if (this.type == 210)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 211)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 1f;
				this.ignoreWater = true;
			}
			else if (this.type == 212)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.12f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 213)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.92f;
			}
			else if (this.type == 214)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 215)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.27f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 216)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.93f;
			}
			else if (this.type == 217)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.12f;
			}
			else if (this.type == 218)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.28f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 219)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 0.95f;
			}
			else if (this.type == 220)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.2f;
			}
			else if (this.type == 221)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 41;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.penetrate = -1;
				this.scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				this.extraUpdates = 2;
			}
			else if (this.type == 222)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.3f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 223)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1f;
			}
			else if (this.type == 224)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 225)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.extraUpdates = 1;
				this.timeLeft = 1200;
			}
			else if (this.type == 226)
			{
				this.netImportant = true;
				this.width = 22;
				this.height = 42;
				this.aiStyle = 42;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.light = 0.4f;
				this.ignoreWater = true;
			}
			else if (this.type == 227)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 43;
				this.friendly = true;
				this.penetrate = 1;
				this.timeLeft = 180;
				this.extraUpdates = 180;
				this.hide = true;
			}
			else if (this.type == 228)
			{
				this.tileCollide = false;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 44;
				this.friendly = true;
				this.melee = true;
				this.scale = 1.1f;
				this.penetrate = -1;
				this.noEnchantmentVisuals = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 229)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 44;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.light = 0.2f;
				this.noEnchantmentVisuals = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type >= 230 && this.type <= 235)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 236)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 237)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 238)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.width = 54;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
				this.timeLeft = 18000;
			}
			else if (this.type == 239)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.friendly = true;
				this.penetrate = 5;
				this.timeLeft = 300;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 240)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 241)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 242)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 7;
				this.scale = 1.18f;
				this.timeLeft = 600;
				this.ranged = true;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 15;
			}
			else if (this.type == 243)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
			}
			else if (this.type == 244)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.width = 54;
				this.height = 28;
				this.aiStyle = 45;
				this.penetrate = -1;
				this.timeLeft = 18000;
			}
			else if (this.type == 245)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.friendly = true;
				this.penetrate = 2;
				this.timeLeft = 300;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 246)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.alpha = 255;
				this.extraUpdates = 1;
			}
			else if (this.type == 247)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 248)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 1;
				this.friendly = true;
				this.melee = true;
			}
			else if (this.type == 249)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 250)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 46;
				this.penetrate = -1;
				this.magic = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.scale = 1.25f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 251)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 46;
				this.friendly = true;
				this.penetrate = -1;
				this.magic = true;
				this.alpha = 255;
				this.light = 0.3f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.scale = 1.25f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 252)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.1f;
			}
			else if (this.type == 253)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.light = 0.8f;
				this.alpha = 100;
				this.magic = true;
				this.coldDamage = true;
			}
			else if (this.type == 254)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 47;
				this.magic = true;
				this.timeLeft = 900;
				this.light = 0.5f;
			}
			else if (this.type == 255)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 100;
			}
			else if (this.type == 256)
			{
				this.netImportant = true;
				this.tileCollide = false;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1f;
				this.timeLeft *= 10;
			}
			else if (this.type == 257)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.75f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.magic = true;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 258)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 100;
				this.timeLeft = 300;
			}
			else if (this.type == 259)
			{
				this.ignoreWater = true;
				this.tileCollide = false;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.3f;
				this.scale = 1.1f;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 260)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 200;
				this.penetrate = 1;
			}
			else if (this.type == 261)
			{
				this.width = 32;
				this.height = 34;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = 6;
				this.magic = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 262)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 263)
			{
				this.width = 34;
				this.height = 34;
				this.alpha = 100;
				this.light = 0.5f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 4;
				this.tileCollide = true;
				this.scale = 1f;
				this.melee = true;
				this.timeLeft = 180;
				this.coldDamage = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 8;
			}
			else if (this.type == 264)
			{
				this.ignoreWater = true;
				this.width = 4;
				this.height = 40;
				this.aiStyle = 45;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 120;
				this.scale = 1.1f;
				this.extraUpdates = 1;
			}
			else if (this.type == 265)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
				this.timeLeft = 37;
			}
			else if (this.type == 266)
			{
				this.netImportant = true;
				this.alpha = 75;
				this.width = 24;
				this.height = 16;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 12;
			}
			else if (this.type == 267)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 268)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 269)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 270)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.alpha = 255;
				this.hostile = true;
				this.penetrate = 3;
			}
			else if (this.type == 271)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
				this.scale = 1.2f;
			}
			else if (this.type == 272)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 273)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
			}
			else if (this.type == 274)
			{
				this.width = 42;
				this.height = 42;
				this.alpha = 100;
				this.light = 0.5f;
				this.aiStyle = 18;
				this.friendly = true;
				this.penetrate = 5;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.melee = true;
				this.timeLeft = 180;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 275)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 276)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
			}
			else if (this.type == 277)
			{
				this.alpha = 255;
				this.width = 38;
				this.height = 38;
				this.aiStyle = 14;
				this.hostile = true;
			}
			else if (this.type == 278)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 1f;
				this.ranged = true;
				this.extraUpdates = 1;
				this.timeLeft = 1200;
			}
			else if (this.type == 279)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.25f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 280)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 12;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 5;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 281)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 49;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 600;
				this.idStaticNPCHitCooldown = 10;
				this.usesIDStaticNPCImmunity = true;
				this.penetrate = -1;
			}
			else if (this.type == 282)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.extraUpdates = 1;
				this.timeLeft = 1200;
			}
			else if (this.type == 283)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.25f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 284)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 285)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 286)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 287)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.3f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 288)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 12;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
				this.magic = true;
			}
			else if (this.type == 289)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.timeLeft = 2;
			}
			else if (this.type == 290)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 48;
				this.hostile = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 100;
				this.penetrate = -1;
			}
			else if (this.type == 291)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 50;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 292)
			{
				this.width = 130;
				this.height = 130;
				this.aiStyle = 50;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 293)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 51;
				this.hostile = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 294)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 48;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 100;
				this.timeLeft = 300;
				this.penetrate = -1;
			}
			else if (this.type == 295)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 50;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = true;
			}
			else if (this.type == 296)
			{
				this.width = 150;
				this.height = 150;
				this.aiStyle = 50;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 297)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 51;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.extraUpdates = 1;
				this.penetrate = 3;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 298)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 52;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 3;
			}
			else if (this.type == 299)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.magic = true;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 300)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 301)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.extraUpdates = 2;
			}
			else if (this.type == 302)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.light = 0.3f;
				this.alpha = 255;
				this.extraUpdates = 7;
				this.scale = 1.18f;
				this.timeLeft = 300;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 303)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 304)
			{
				this.alpha = 255;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
				this.light = 0.2f;
				this.ignoreWater = true;
				this.extraUpdates = 0;
			}
			else if (this.type == 305)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 52;
				this.alpha = 255;
				this.tileCollide = false;
				this.extraUpdates = 10;
			}
			else if (this.type == 306)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 307)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 36;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.melee = true;
				this.extraUpdates = 3;
			}
			else if (this.type == 308)
			{
				this.width = 80;
				this.height = 74;
				this.aiStyle = 53;
				this.timeLeft = 36000;
				this.light = 0.25f;
				this.ignoreWater = true;
				this.coldDamage = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 309)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.penetrate = 3;
				this.friendly = true;
				this.extraUpdates = 3;
				this.coldDamage = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 310)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 311)
			{
				this.width = 10;
				this.height = 12;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 312)
			{
				this.alpha = 255;
				this.width = 32;
				this.height = 32;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 300;
				this.glowMask = 257;
			}
			else if (this.type == 313)
			{
				this.netImportant = true;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 314)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 40;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 315)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 316)
			{
				this.alpha = 255;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 1;
				this.timeLeft = 600;
				this.magic = true;
			}
			else if (this.type == 317)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 54;
				this.penetrate = 1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 318)
			{
				this.width = 12;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 319)
			{
				this.netImportant = true;
				this.width = 36;
				this.height = 30;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 320)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 321)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 55;
				this.friendly = true;
				this.melee = true;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 322)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 323)
			{
				this.penetrate = 10;
				this.extraUpdates = 3;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.ranged = true;
				this.scale = 0.8f;
			}
			else if (this.type == 324)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 38;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 325)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
				this.tileCollide = false;
				this.timeLeft = 420;
			}
			else if (this.type >= 326 && this.type <= 328)
			{
				if (this.type == 326)
				{
					this.width = 14;
					this.height = 16;
				}
				else if (this.type == 327)
				{
					this.width = 12;
					this.height = 14;
				}
				else
				{
					this.width = 6;
					this.height = 12;
				}
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 360;
			}
			else if (this.type == 329)
			{
				this.width = 80;
				this.height = 80;
				this.light = 0.25f;
				this.aiStyle = 56;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 420;
			}
			else if (this.type == 330)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 6;
				this.ranged = true;
			}
			else if (this.type == 331)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 332)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.light = 0.5f;
			}
			else if (this.type == 333)
			{
				this.width = 38;
				this.height = 38;
				this.aiStyle = 3;
				this.friendly = true;
				this.scale = 0.9f;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 334)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 335)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 30;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
			}
			else if (this.type == 336)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.scale = 0.8f;
				this.extraUpdates = 1;
			}
			else if (this.type == 337)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.coldDamage = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.penetrate = -1;
				this.friendly = true;
				this.ranged = true;
				this.scale = 0.9f;
			}
			else if (this.type == 342)
			{
				this.width = 22;
				this.height = 2;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.coldDamage = true;
			}
			else if (this.type == 343)
			{
				this.alpha = 255;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 57;
				this.friendly = true;
				this.melee = true;
				this.scale = 1.1f;
				this.penetrate = 3;
				this.coldDamage = true;
				this.timeLeft = 120;
			}
			else if (this.type == 344)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.friendly = true;
				this.scale = 0.9f;
				this.alpha = 255;
				this.melee = true;
				this.coldDamage = true;
				this.tileCollide = false;
				this.noEnchantmentVisuals = true;
				this.timeLeft = 240;
			}
			else if (this.type == 345)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.scale = 0.8f;
			}
			else if (this.type == 346)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 300;
			}
			else if (this.type == 347)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 2;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 348)
			{
				this.aiStyle = 1;
				this.width = 48;
				this.height = 48;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.coldDamage = true;
				this.extraUpdates = 1;
				this.timeLeft = 900;
			}
			else if (this.type == 349)
			{
				this.aiStyle = 1;
				this.width = 12;
				this.height = 12;
				this.hostile = true;
				this.penetrate = -1;
				this.coldDamage = true;
				this.timeLeft = 900;
			}
			else if (this.type == 350)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.hostile = true;
				this.tileCollide = false;
				this.timeLeft /= 2;
			}
			else if (this.type == 351)
			{
				this.alpha = 255;
				this.penetrate = -1;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 58;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type == 352)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft /= 3;
			}
			else if (this.type == 353)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 354)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = -1;
				this.extraUpdates = 1;
			}
			else if (this.type == 355)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 5;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
				this.timeLeft = 58;
			}
			else if (this.type == 356)
			{
				this.width = 6;
				this.height = 6;
				this.aiStyle = 59;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 3;
			}
			else if (this.type == 357)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 6;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 358)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 60;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
			}
			else if (this.type == 359)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
				this.coldDamage = true;
			}
			else if ((this.type >= 360 && this.type <= 366) || this.type == 381 || this.type == 382 || this.type == 760 || this.type == 775)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 61;
				this.penetrate = -1;
				this.netImportant = true;
				this.bobber = true;
			}
			else if (this.type == 367)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1.1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 368)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 369)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 370)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 371)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 372)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 373)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 26;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 374)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 0;
				this.friendly = true;
				this.penetrate = 1;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.scale *= 0.9f;
			}
			else if (this.type == 375)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 26;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 376)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 0;
				this.friendly = true;
				this.penetrate = 5;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.timeLeft = 100;
				this.alpha = 255;
				this.extraUpdates = 1;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 6;
			}
			else if (this.type == 377)
			{
				this.width = 66;
				this.height = 50;
				this.aiStyle = 53;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 378)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft = 60;
				this.scale = 0.9f;
			}
			else if (this.type == 379)
			{
				this.width = 14;
				this.height = 10;
				this.aiStyle = 63;
				this.friendly = true;
				this.timeLeft = 300;
				this.penetrate = 1;
			}
			else if (this.type == 380)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 383)
			{
				this.width = 34;
				this.height = 34;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
			}
			else if (this.type == 384)
			{
				this.width = 150;
				this.height = 42;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 64;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.timeLeft = 540;
			}
			else if (this.type == 385)
			{
				this.width = 30;
				this.height = 30;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 65;
				this.alpha = 255;
				this.timeLeft = 300;
			}
			else if (this.type == 386)
			{
				this.width = 150;
				this.height = 42;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 64;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.timeLeft = 840;
			}
			else if (this.type == 387)
			{
				this.netImportant = true;
				this.width = 40;
				this.height = 20;
				this.aiStyle = 66;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0.5f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.friendly = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 16;
			}
			else if (this.type == 388)
			{
				this.netImportant = true;
				this.width = 40;
				this.height = 20;
				this.aiStyle = 66;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0.5f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.friendly = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 12;
			}
			else if (this.type == 389)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
			}
			else if (this.type == 390 || this.type == 391 || this.type == 392)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 15;
			}
			else if (this.type == 393 || this.type == 394 || this.type == 395)
			{
				this.width = 20;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 18;
				this.decidesManualFallThrough = true;
			}
			else if (this.type == 396)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.alpha = 100;
			}
			else if (this.type == 397)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				this.tileCollide = false;
			}
			else if (this.type == 398)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 38;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 399)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 68;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.ranged = true;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type >= 400 && this.type <= 402)
			{
				if (this.type == 400)
				{
					this.width = 14;
					this.height = 16;
				}
				else if (this.type == 401)
				{
					this.width = 12;
					this.height = 14;
				}
				else
				{
					this.width = 6;
					this.height = 12;
				}
				this.penetrate = 3;
				this.aiStyle = 14;
				this.friendly = true;
				this.timeLeft = 360;
				this.ranged = true;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 403)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 404)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 69;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
			}
			else if (this.type == 405)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 70;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 120;
				this.melee = true;
				this.noEnchantments = true;
			}
			else if (this.type == 406)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 60;
				this.alpha = 255;
				this.penetrate = -1;
				this.extraUpdates = 2;
				this.ignoreWater = true;
			}
			else if (this.type == 407)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 40;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 408)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 409)
			{
				this.width = 30;
				this.height = 30;
				this.penetrate = -1;
				this.aiStyle = 71;
				this.alpha = 255;
				this.timeLeft = 300;
				this.friendly = true;
				this.tileCollide = true;
				this.extraUpdates = 2;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 410)
			{
				if (Main.remixWorld)
				{
					this.ArmorPenetration = 20;
				}
				this.width = 14;
				this.height = 14;
				this.aiStyle = 72;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 100;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type >= 411 && this.type <= 414)
			{
				int num = this.type;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
			}
			else if (this.type == 415 || this.type == 416 || this.type == 417 || this.type == 418)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 34;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 45;
			}
			else if (this.type >= 419 && this.type <= 422)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 73;
				this.friendly = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 3;
			}
			else if (this.type == 423)
			{
				this.netImportant = true;
				this.width = 28;
				this.height = 28;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.minionSlots = 1f;
				this.ignoreWater = true;
			}
			else if (this.type >= 424 && this.type <= 426)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 2;
			}
			else if (this.type == 427)
			{
				this.width = 22;
				this.height = 56;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 2;
			}
			else if (this.type == 428)
			{
				this.width = 26;
				this.height = 54;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 3;
			}
			else if (this.type == 429)
			{
				this.width = 18;
				this.height = 56;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 7;
			}
			else if (this.type == 430)
			{
				this.width = 30;
				this.height = 54;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 8;
			}
			else if (this.type == 431)
			{
				this.width = 28;
				this.height = 64;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 432)
			{
				this.width = 30;
				this.height = 54;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 610)
			{
				this.width = 28;
				this.height = 64;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 179;
			}
			else if (this.type == 609)
			{
				this.width = 30;
				this.height = 54;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.glowMask = 180;
			}
			else if (this.type == 433)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 48;
				this.friendly = true;
				this.extraUpdates = 100;
				this.timeLeft = 100;
				this.ignoreWater = true;
			}
			else if (this.type == 434)
			{
				this.width = 1;
				this.height = 1;
				this.aiStyle = 74;
				this.friendly = true;
				this.extraUpdates = 100;
				this.penetrate = -1;
			}
			else if (this.type == 435)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.ignoreWater = true;
			}
			else if (this.type == 436)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.ignoreWater = true;
			}
			else if (this.type == 437)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.extraUpdates = 2;
				this.ignoreWater = true;
			}
			else if (this.type == 438)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.extraUpdates = 3;
				this.ignoreWater = true;
			}
			else if (this.type == 439)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 440)
			{
				this.width = 5;
				this.height = 5;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1f;
				this.timeLeft = 600;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 441)
			{
				this.width = 1;
				this.height = 1;
				this.aiStyle = 76;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 442)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.scale = 1f;
				this.timeLeft = 600;
				this.ranged = true;
			}
			else if (this.type == 443)
			{
				this.width = 80;
				this.height = 80;
				this.aiStyle = 77;
				this.friendly = true;
				this.alpha = 255;
				this.scale = 1f;
				this.ranged = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 444)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 78;
				this.friendly = true;
				this.alpha = 255;
				this.scale = 1f;
				this.ranged = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 445)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.melee = true;
				this.ignoreWater = true;
				this.ownerHitCheck = true;
			}
			else if (this.type == 446)
			{
				this.netImportant = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.light = 0.7f;
			}
			else if (this.type == 447)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 79;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 240;
			}
			else if (this.type == 448)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 80;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 449)
			{
				this.width = 5;
				this.height = 5;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.extraUpdates = 1;
				this.scale = 1f;
				this.timeLeft = 600;
				this.ignoreWater = true;
			}
			else if (this.type == 450)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 360;
			}
			else if (this.type == 451)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 81;
				this.melee = true;
				this.penetrate = 3;
				this.light = 0.2f;
				this.alpha = 255;
				this.friendly = true;
			}
			else if (this.type == 452)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 82;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 600;
			}
			else if (this.type == 453)
			{
				this.width = 1;
				this.height = 1;
				this.aiStyle = 76;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 454)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 83;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.tileCollide = false;
			}
			else if (this.type == 455)
			{
				this.width = 36;
				this.height = 36;
				this.aiStyle = 84;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.tileCollide = false;
			}
			else if (this.type == 456)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 85;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 600;
				this.tileCollide = false;
			}
			else if (this.type == 459)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.alpha = 255;
				this.scale = 1f;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 460)
			{
				this.width = 14;
				this.height = 18;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 461)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 84;
				this.friendly = true;
				this.magic = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.tileCollide = false;
				this.hide = true;
			}
			else if (this.type == 462)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.extraUpdates = 3;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 463)
			{
				this.width = 48;
				this.height = 48;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 464)
			{
				this.width = 60;
				this.height = 60;
				this.aiStyle = 86;
				this.hostile = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else if (this.type == 467)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 468)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 465)
			{
				this.width = 80;
				this.height = 80;
				this.aiStyle = 88;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 466)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 88;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.tileCollide = true;
				this.extraUpdates = 4;
				this.timeLeft = 120 * (this.extraUpdates + 1);
			}
			else if (this.type == 491)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 9;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
			}
			else if (this.type == 500)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 499)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 469)
			{
				this.alpha = 255;
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 470)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 471)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 2;
				this.scale = 1.2f;
				this.hostile = true;
				this.ranged = true;
			}
			else if (this.type == 472)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 0;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.timeLeft = 60;
			}
			else if (this.type == 474)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
				this.penetrate = 2;
			}
			else if (this.type == 473)
			{
				this.netImportant = true;
				this.width = 8;
				this.height = 8;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 2;
			}
			else if (this.type == 475)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 35;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 400;
			}
			else if (this.type == 476)
			{
				this.width = 200;
				this.height = 200;
				this.aiStyle = 185;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 3;
				this.magic = true;
			}
			else if (this.type == 477)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 7;
				this.extraUpdates = 1;
				this.ranged = true;
			}
			else if (this.type == 478)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.timeLeft = 300;
				this.ranged = true;
			}
			else if (this.type == 479)
			{
				this.alpha = 255;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 480)
			{
				this.alpha = 255;
				this.width = 12;
				this.height = 12;
				this.penetrate = 3;
				this.aiStyle = 14;
				this.friendly = true;
				this.timeLeft = 120;
				this.ranged = true;
				this.noEnchantments = true;
			}
			else if (this.type == 481)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 13;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.melee = true;
				this.extraUpdates = 0;
			}
			else if (this.type == 482)
			{
				this.width = 16;
				this.height = 200;
				this.aiStyle = 87;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 18000;
				this.magic = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 483)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 14;
				this.friendly = true;
				this.melee = true;
			}
			else if (this.type == 484)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.melee = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 485)
			{
				this.arrow = true;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = -1;
				this.timeLeft = 1200;
			}
			else if (this.type >= 486 && this.type <= 489)
			{
				if (this.type == 486)
				{
					this.width = 12;
					this.height = 12;
				}
				else if (this.type == 487)
				{
					this.width = 22;
					this.height = 22;
				}
				else if (this.type == 488)
				{
					this.width = 12;
					this.height = 12;
					this.light = 0.3f;
				}
				else if (this.type == 489)
				{
					this.width = 20;
					this.height = 16;
				}
				this.netImportant = true;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 492)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 32;
				this.aiStyle = 90;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 490)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 89;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.timeLeft = 600;
				this.netImportant = true;
			}
			else if (this.type == 493 || this.type == 494)
			{
				this.ArmorPenetration = 10;
				this.width = 32;
				this.height = 32;
				this.aiStyle = 4;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.magic = true;
				this.light = 0.2f;
			}
			else if (this.type == 495)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = 3;
				this.timeLeft = 1200;
			}
			else if (this.type == 496)
			{
				this.alpha = 255;
				this.width = 40;
				this.height = 40;
				this.aiStyle = 91;
				this.friendly = true;
				this.magic = true;
				this.MaxUpdates = 3;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 497)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 3;
				this.melee = true;
			}
			else
			{
				if (this.type != 498)
				{
					return false;
				}
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 180;
			}
			return true;
		}

		// Token: 0x06000CEC RID: 3308 RVA: 0x002EDCA8 File Offset: 0x002EBEA8
		private bool SetDefaults2(int Type)
		{
			if (this.type == 501)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.scale = 1.1f;
				this.hostile = true;
				this.ranged = true;
			}
			else if (this.type == 502)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 8;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 5;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 503)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 2;
				this.alpha = 255;
				this.tileCollide = false;
				this.melee = true;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 30;
			}
			else if (this.type == 504)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
				this.melee = true;
				this.alpha = 255;
				this.penetrate = 2;
				this.noEnchantmentVisuals = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 507)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = 3;
			}
			else if (this.type == 508)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 509)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 20;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
				this.scale = 1.2f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 510)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.magic = true;
			}
			else if (this.type == 511)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 92;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1.1f;
				this.magic = true;
			}
			else if (this.type == 512)
			{
				this.width = 40;
				this.height = 38;
				this.aiStyle = 92;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1.1f;
				this.magic = true;
			}
			else if (this.type == 513)
			{
				this.width = 30;
				this.height = 28;
				this.aiStyle = 92;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1.1f;
				this.magic = true;
			}
			else if (this.type == 514)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 93;
				this.friendly = true;
				this.penetrate = 3;
				this.alpha = 255;
				this.ranged = true;
			}
			else if (this.type == 515)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
			}
			else if (this.type == 516)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 517)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 518)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 94;
				this.friendly = true;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 519)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 520)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 3;
				this.ranged = true;
				this.coldDamage = true;
			}
			else if (this.type == 521)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 522)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 523)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 95;
				this.alpha = 255;
				this.ranged = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 524)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 96;
				this.friendly = true;
				this.alpha = 255;
				this.penetrate = 5;
				this.ignoreWater = true;
				this.melee = true;
				this.extraUpdates = 5;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 525)
			{
				this.width = 30;
				this.height = 24;
				this.aiStyle = 97;
				this.tileCollide = false;
				this.timeLeft = 10800;
				this.hide = true;
			}
			else if (this.type == 526)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 98;
				this.tileCollide = false;
				this.timeLeft = 120;
				this.alpha = 255;
			}
			else if (this.type >= 527 && this.type <= 531)
			{
				this.knockBack = 12f;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 17;
				this.penetrate = -1;
				if (Main.getGoodWorld)
				{
					this.friendly = true;
					this.hostile = true;
				}
			}
			else if (this.type == 532)
			{
				this.ArmorPenetration = 25;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.scale = 1f;
				this.friendly = true;
				this.penetrate = 3;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 533)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 66;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 12;
			}
			else if (this.type == 534)
			{
				this.extraUpdates = 0;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
			}
			else if (this.type >= 541 && this.type <= 555)
			{
				this.extraUpdates = 0;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
				if (this.type == 547)
				{
					this.scale = 1.1f;
				}
				if (this.type == 554)
				{
					this.scale = 1.2f;
				}
				if (this.type == 555)
				{
					this.scale = 1.15f;
				}
				if (this.type == 551 || this.type == 550)
				{
					this.scale = 1.1f;
				}
			}
			else if (this.type >= 562 && this.type <= 564)
			{
				this.extraUpdates = 0;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
				if (this.type == 563)
				{
					this.scale = 1.05f;
				}
				if (this.type == 564)
				{
					this.scale = 1.075f;
				}
			}
			else if (this.type == 603)
			{
				this.extraUpdates = 0;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1.15f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 604)
			{
				this.extraUpdates = 0;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 115;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1.2f;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type >= 556 && this.type <= 561)
			{
				this.extraUpdates = 0;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
				this.counterweight = true;
			}
			else if (this.type == 535)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 100;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 536)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 101;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 537)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 84;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 240;
				this.tileCollide = false;
			}
			else if (this.type == 538)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 14;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 120;
				this.extraUpdates = 1;
				this.alpha = 255;
			}
			else if (this.type == 539)
			{
				this.width = 18;
				this.height = 30;
				this.aiStyle = 102;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 600;
			}
			else if (this.type == 540)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 103;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 300;
				this.alpha = 255;
			}
			else if (this.type == 565)
			{
				this.width = 28;
				this.height = 28;
				this.aiStyle = 104;
				this.penetrate = -1;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.scale = 0.8f;
			}
			else if (this.type == 566)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 36;
				this.friendly = true;
				this.penetrate = 4;
				this.alpha = 255;
				this.timeLeft = 660;
				this.extraUpdates = 3;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 567 || this.type == 568)
			{
				if (this.type == 567)
				{
					this.width = 14;
					this.height = 14;
				}
				else
				{
					this.width = 16;
					this.height = 16;
				}
				this.aiStyle = 105;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 3600;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type >= 569 && this.type <= 571)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 106;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 3600;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 575)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 107;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft = 420;
				this.alpha = 255;
			}
			else if (this.type == 573)
			{
				this.width = 18;
				this.height = 30;
				this.aiStyle = 102;
				this.hostile = true;
				this.penetrate = -1;
				this.timeLeft = 600;
			}
			else if (this.type == 574)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 102;
				this.hostile = true;
				this.timeLeft = 600;
				this.tileCollide = false;
			}
			else if (this.type == 572)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 576)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
			}
			else if (this.type == 577)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1.2f;
				this.timeLeft = 600;
			}
			else if (this.type == 578 || this.type == 579 || this.type == 813)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 108;
				this.friendly = true;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.hostile = true;
				this.hide = true;
			}
			else if (this.type == 580)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 88;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.tileCollide = true;
				this.extraUpdates = 4;
				this.timeLeft = 600;
			}
			else if (this.type == 581)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 582)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 109;
				this.friendly = true;
				this.penetrate = -1;
				this.MaxUpdates = 2;
			}
			else if (this.type == 583)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
				this.scale = 0.8f;
			}
			else if (this.type == 589)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
			}
			else if (this.type == 584)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 110;
				this.friendly = true;
				this.scale = 0.8f;
				this.penetrate = 3;
			}
			else if (this.type == 585)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.penetrate = 3;
			}
			else if (this.type == 586)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 111;
				this.alpha = 255;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 587)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 588)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 590)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 112;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.timeLeft = 900;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 591)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 101;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ignoreWater = true;
			}
			else if (this.type == 592)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.extraUpdates = 3;
				this.ignoreWater = true;
			}
			else if (this.type == 593)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.hostile = true;
				this.alpha = 255;
				this.extraUpdates = 1;
				this.ignoreWater = true;
			}
			else if (this.type == 594)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 1;
				this.alpha = 255;
				this.extraUpdates = 2;
			}
			else if (this.type == 595)
			{
				this.ArmorPenetration = 20;
				this.width = 68;
				this.height = 64;
				this.aiStyle = 75;
				this.friendly = true;
				this.tileCollide = false;
				this.melee = true;
				this.penetrate = -1;
				this.ownerHitCheck = true;
			}
			else if (this.type == 596)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 107;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 180;
				this.tileCollide = false;
			}
			else if (this.type == 597)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 2;
				this.friendly = true;
			}
			else if (this.type == 598)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 113;
				this.friendly = true;
				this.ranged = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
			}
			else if (this.type == 599)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 6;
				this.ranged = true;
			}
			else if (this.type == 600)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ignoreWater = true;
			}
			else if (this.type == 601)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.extraUpdates = 30;
			}
			else if (this.type == 602)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 114;
				this.alpha = 255;
				this.friendly = true;
				this.tileCollide = false;
				this.netImportant = true;
			}
			else if (this.type == 605)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 606)
			{
				this.width = 5;
				this.height = 5;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.extraUpdates = 2;
				this.scale = 1f;
				this.timeLeft = 600;
				this.ignoreWater = true;
			}
			else if (this.type == 607)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 116;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 600;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 608)
			{
				this.width = 160;
				this.height = 160;
				this.aiStyle = 117;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 3;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.hide = true;
			}
			else if (this.type == 611)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 75;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 612)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 117;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 613)
			{
				this.netImportant = true;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 62;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.minionSlots = 1f;
				this.ignoreWater = true;
			}
			else if (this.type == 614)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 113;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 615)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 616)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.ranged = true;
				this.extraUpdates = 2;
				this.timeLeft = 90 * this.MaxUpdates;
			}
			else if (this.type == 617)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 118;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.hide = true;
				this.magic = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 618)
			{
				this.tileCollide = false;
				this.width = 18;
				this.height = 30;
				this.aiStyle = 119;
				this.penetrate = -1;
				this.timeLeft = 420;
				this.magic = true;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 619)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 620)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.penetrate = 1;
				this.friendly = true;
			}
			else if (this.type == 622)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.extraUpdates = 2;
			}
			else if (this.type == 623)
			{
				this.netImportant = true;
				this.width = 50;
				this.height = 80;
				this.aiStyle = 120;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.minionSlots = 0f;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.netImportant = true;
				this.manualDirectionChange = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 5;
			}
			else if (this.type == 624)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 117;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type >= 625 && this.type <= 628)
			{
				if (this.type == 625 || this.type == 628)
				{
					this.netImportant = true;
				}
				if (this.type == 626 || this.type == 627)
				{
					this.minionSlots = 0.5f;
				}
				this.width = 24;
				this.height = 24;
				this.aiStyle = 121;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.minion = true;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.alpha = 255;
				this.hide = true;
				this.netImportant = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 7;
			}
			else if (this.type == 629)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 122;
				this.hostile = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 3600;
				this.tileCollide = false;
				this.penetrate = -1;
				this.extraUpdates = 2;
			}
			else if (this.type == 630 || this.type == 705)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 631)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 122;
				this.friendly = true;
				this.ranged = true;
				this.tileCollide = false;
				this.alpha = 255;
				this.ignoreWater = true;
				this.extraUpdates = 1;
				this.timeLeft = 1200;
			}
			else if (this.type == 633)
			{
				this.width = 14;
				this.height = 18;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 632)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 84;
				this.friendly = true;
				this.magic = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.tileCollide = false;
			}
			else if (this.type == 634)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.extraUpdates = 2;
				this.magic = true;
			}
			else if (this.type == 635)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.friendly = true;
				this.extraUpdates = 3;
				this.magic = true;
			}
			else if (this.type == 636)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 113;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.MaxUpdates = 2;
			}
			else if (this.type == 637)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 638)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.extraUpdates = 5;
				this.timeLeft = 600;
				this.ranged = true;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.penetrate = -1;
			}
			else if (this.type == 639)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.MaxUpdates = 2;
				this.timeLeft = this.MaxUpdates * 45;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.alpha = 255;
				this.penetrate = 4;
			}
			else if (this.type == 640)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.MaxUpdates = 3;
				this.timeLeft = 90;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.alpha = 255;
				this.penetrate = 4;
			}
			else if (this.type == 642)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 84;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.tileCollide = false;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 641)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 123;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.alpha = 255;
				this.hide = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 643)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 123;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.alpha = 255;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 644)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 112;
				this.penetrate = 1;
				this.timeLeft = 900;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.usesIDStaticNPCImmunity = true;
			}
			else if (this.type == 645)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.extraUpdates = 5;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type >= 646 && this.type <= 649)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 650)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 651)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 125;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 652)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 653)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.scale = 0.8f;
			}
			else if (this.type == 654)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 126;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 655)
			{
				this.width = 31;
				this.height = 31;
				this.aiStyle = 25;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 656)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 127;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 657)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 127;
				this.hostile = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.timeLeft = 1200;
			}
			else if (this.type == 658)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 128;
				this.penetrate = 1;
				this.timeLeft = 900;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.hostile = true;
			}
			else if (this.type == 659)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 129;
				this.friendly = true;
				this.magic = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 240;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 660)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
				this.ignoreWater = true;
			}
			else if (this.type == 661)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 40;
				this.extraUpdates = 1;
				this.ranged = true;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 662 || this.type == 685)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 663 || this.type == 665 || this.type == 667)
			{
				this.width = 30;
				this.height = 54;
				this.aiStyle = 130;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
				int num = this.type;
				if (num != 665)
				{
					if (num == 667)
					{
						this.height = 60;
						this.width = 28;
					}
				}
				else
				{
					this.height = 58;
					this.width = 28;
				}
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 664 || this.type == 666 || this.type == 668)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 131;
				this.friendly = true;
				this.alpha = 255;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 669)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 68;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.ranged = true;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 670)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 126;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 671)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 672)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 132;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 900;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 674 || this.type == 673)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 133;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 900;
				this.hostile = true;
				this.penetrate = -1;
				this.hide = true;
			}
			else if (this.type == 675)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 676)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 677 || this.type == 678 || this.type == 679)
			{
				this.width = 26;
				this.height = 54;
				this.aiStyle = 134;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 680)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 4;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 681)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.hostile = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 682)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = true;
				this.ignoreWater = true;
				this.timeLeft = 30;
				this.scale = 1.2f;
			}
			else if (this.type == 683)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 135;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 684)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 1;
				this.melee = true;
				this.penetrate = 5;
				this.alpha = 255;
				this.friendly = true;
				this.tileCollide = false;
			}
			else if (this.type == 686)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 687)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 136;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
			}
			else if (this.type == 688 || this.type == 689 || this.type == 690)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 137;
				this.friendly = true;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.timeLeft = 36000;
				this.localNPCHitCooldown = 3;
				this.tileCollide = false;
				this.penetrate = -1;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 691 || this.type == 692 || this.type == 693)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 138;
				this.ignoreWater = true;
				this.friendly = true;
				this.timeLeft = 36000;
				this.tileCollide = false;
				this.penetrate = -1;
				this.hide = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 694 || this.type == 695 || this.type == 696)
			{
				this.aiStyle = 139;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 30;
				this.alpha = 255;
				this.width = 144;
				this.height = 144;
			}
			else if (this.type == 697)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 140;
				this.friendly = true;
				this.melee = true;
				this.scale = 1.35f;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 12;
				this.ownerHitCheck = true;
			}
			else if (this.type == 698)
			{
				this.width = 50;
				this.height = 200;
				this.aiStyle = 141;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.friendly = true;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.melee = true;
			}
			else if (this.type == 699)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 142;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
				this.ownerHitCheck = true;
			}
			else if (this.type == 700)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 143;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = true;
				this.melee = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
			}
			else if (this.type == 703 || this.type == 701 || this.type == 702)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 144;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.scale = 1f;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 704)
			{
				this.width = 60;
				this.height = 210;
				this.aiStyle = 145;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.timeLeft = 600;
				this.localNPCHitCooldown = -1;
				this.ignoreWater = true;
			}
			else if (this.type == 706)
			{
				this.width = 66;
				this.height = 66;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 300;
				this.ranged = true;
				this.usesLocalNPCImmunity = true;
				this.penetrate = -1;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 707)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 140;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 6;
				this.ownerHitCheck = true;
			}
			else if (this.type == 708)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 142;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 6;
				this.ownerHitCheck = true;
			}
			else if (this.type == 709)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 1;
				this.friendly = true;
				this.melee = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.extraUpdates = 1;
				this.noEnchantmentVisuals = true;
				this.scale = 0.6f;
			}
			else if (this.type == 710)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
				this.timeLeft = this.extraUpdates * 60 * 5;
				this.usesLocalNPCImmunity = true;
				this.alpha = 255;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 711)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.extraUpdates = 1;
				this.scale = 0.7f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 712)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.alpha = 255;
				this.timeLeft = 600;
				this.magic = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 713)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 146;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 900;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 714)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 75;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.hide = true;
				this.ranged = true;
				this.ignoreWater = true;
			}
			else if (this.type == 715 || this.type == 717)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 147;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.ranged = true;
				this.extraUpdates = 2;
				this.timeLeft = 360 * this.MaxUpdates;
			}
			else if (this.type == 716 || this.type == 718)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 147;
				this.friendly = true;
				this.penetrate = 1;
				this.alpha = 255;
				this.ranged = true;
				this.extraUpdates = 2;
				this.timeLeft = 360 * this.MaxUpdates;
			}
			else if (this.type == 719)
			{
				this.width = 10;
				this.height = 10;
				this.hostile = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
			}
			else if (this.type == 720)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 148;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 721 || this.type == 739 || this.type == 740 || this.type == 741 || this.type == 742 || this.type == 743 || this.type == 744 || this.type == 745 || this.type == 746 || this.type == 747 || this.type == 748 || this.type == 749 || this.type == 750 || this.type == 751 || this.type == 752)
			{
				this.netImportant = true;
				this.width = 7;
				this.height = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.aiStyle = 149;
				this.tileCollide = false;
			}
			else if (this.type == 722)
			{
				this.width = 2;
				this.height = 2;
				this.aiStyle = 150;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.penetrate = -1;
				this.hide = true;
			}
			else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
			{
				this.ArmorPenetration = 25;
				this.width = 24;
				this.height = 24;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = 2;
				this.alpha = 50;
				this.tileCollide = false;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 728)
			{
				this.width = 24;
				this.height = 24;
				this.aiStyle = 151;
				this.alpha = 255;
				this.tileCollide = true;
				this.ranged = true;
				this.friendly = true;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
			}
			else if (this.type == 729)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 152;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.ranged = true;
				this.penetrate = -1;
				this.scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				this.extraUpdates = 2;
				this.timeLeft = 10 * this.MaxUpdates;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 730)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 19;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 731)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 29;
				this.alpha = 255;
				this.magic = true;
				this.friendly = true;
				this.extraUpdates = 1;
				this.timeLeft = 90;
			}
			else if (this.type == 732)
			{
				this.tileCollide = true;
				this.width = 15;
				this.height = 15;
				this.aiStyle = 44;
				this.friendly = true;
				this.penetrate = 1;
				this.melee = true;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 733)
			{
				this.width = 2;
				this.height = 2;
				this.aiStyle = 153;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 734)
			{
				this.width = 30;
				this.height = 24;
				this.aiStyle = 154;
				this.tileCollide = false;
				this.timeLeft = 10800;
				this.alpha = 255;
				this.hide = true;
			}
			else if (this.type == 735)
			{
				this.width = 68;
				this.height = 64;
				this.aiStyle = 75;
				this.friendly = true;
				this.tileCollide = false;
				this.melee = true;
				this.penetrate = -1;
				this.ownerHitCheck = true;
			}
			else if (this.type == 736 || this.type == 737 || this.type == 738)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.penetrate = -1;
			}
			else if (this.type == 753)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 754)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 155;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.penetrate = -1;
				this.alpha = 255;
			}
			else if (this.type == 755)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft *= 5;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.aiStyle = 156;
			}
			else if (this.type == 756)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 157;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.penetrate = 4;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 25;
			}
			else if (this.type == 757)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 758)
			{
				this.width = 20;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.friendly = true;
				this.decidesManualFallThrough = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 759)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = true;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft *= 5;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 15;
				this.aiStyle = 158;
				this.hide = true;
			}
			else if (this.type == 761 || this.type == 762)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 159;
				this.friendly = true;
				this.ranged = true;
				this.manualDirectionChange = true;
			}
			else if (this.type == 763)
			{
				this.width = 10;
				this.height = 10;
				this.hostile = true;
				this.friendly = true;
				this.penetrate = -1;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 764)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 144;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 765)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if ((this.type >= 766 && this.type <= 770) || this.type == 771)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 772)
			{
				this.width = 22;
				this.height = 22;
				this.friendly = true;
				this.aiStyle = 1;
				this.tileCollide = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 773)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type == 774)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 802)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 161;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1f;
				this.ownerHitCheck = true;
				this.melee = true;
				this.extraUpdates = 1;
				this.hide = true;
			}
			else if (this.type == 811 || this.type == 814)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				if (this.type == 814)
				{
					this.tileCollide = false;
				}
			}
			else if ((this.type >= 776 && this.type <= 801) || (this.type >= 803 && this.type <= 810))
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
				if (this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 800)
				{
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
				}
			}
			else if (this.type == 812)
			{
				this.knockBack = 6f;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 10;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 815)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 816)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 817)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 819)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.alpha = 255;
				this.extraUpdates = 1;
				this.hide = true;
				this.friendly = true;
				this.ranged = true;
			}
			else if (this.type == 818)
			{
				this.width = 132;
				this.height = 132;
				this.aiStyle = 162;
				this.friendly = true;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.penetrate = -1;
				this.extraUpdates = 3;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 820)
			{
				this.width = 12;
				this.height = 12;
				this.friendly = true;
				this.aiStyle = 163;
				this.tileCollide = true;
				this.netImportant = true;
				this.penetrate = -1;
				this.timeLeft = 86400;
			}
			else if (this.type == 821)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 36;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type >= 822 && this.type <= 824)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 825)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type >= 826 && this.type <= 830)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 836)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 112;
				this.hostile = true;
			}
			else if (this.type == 831)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft = 60;
				this.aiStyle = 164;
				this.hide = true;
			}
			else if (this.type == 833)
			{
				this.width = 26;
				this.height = 20;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0f;
				this.decidesManualFallThrough = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 834)
			{
				this.width = 20;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0f;
				this.decidesManualFallThrough = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 835)
			{
				this.width = 20;
				this.height = 30;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 0f;
				this.decidesManualFallThrough = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 837)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 1;
				this.alpha = 255;
				this.friendly = true;
				this.magic = true;
				this.penetrate = 3;
			}
			else if (this.type >= 838 && this.type <= 840)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 841)
			{
				this.DefaultToWhip();
			}
			else if (this.type == 842)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 161;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1f;
				this.ownerHitCheck = true;
				this.melee = true;
				this.extraUpdates = 1;
				this.hide = true;
			}
			else if (this.type >= 843 && this.type <= 846)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 847)
			{
				this.DefaultToWhip();
				this.extraUpdates = 2;
			}
			else if (this.type == 848)
			{
				this.DefaultToWhip();
			}
			else if (this.type == 849)
			{
				this.DefaultToWhip();
				this.extraUpdates = 2;
			}
			else if (this.type == 850)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 851)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 166;
				this.penetrate = -1;
				this.timeLeft = 300;
			}
			else if (this.type >= 852 && this.type <= 853)
			{
				this.netImportant = true;
				this.width = 4;
				this.height = 4;
				this.aiStyle = 160;
				this.penetrate = -1;
				this.extraUpdates = 60;
			}
			else if (this.type == 854)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 855)
			{
				this.netImportant = true;
				this.width = 12;
				this.height = 12;
				this.aiStyle = 166;
				this.penetrate = -1;
				this.timeLeft = 1000;
			}
			else if (this.type == 856)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 167;
				this.friendly = true;
				this.alpha = 255;
				this.magic = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.extraUpdates = 2;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 857)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 168;
				this.friendly = true;
				this.alpha = 255;
				this.melee = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.manualDirectionChange = true;
				this.penetrate = -1;
				this.hide = true;
			}
			else if (this.type == 858)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 859)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 32;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 860)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 861)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
			}
			else if (this.type == 862 || this.type == 863)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 864)
			{
				this.ArmorPenetration = 25;
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft = 60;
				this.aiStyle = 169;
				this.localNPCHitCooldown = 40;
			}
			else if (this.type == 865)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
			}
			else if (this.type == 866)
			{
				this.light = 0.15f;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = 5;
				this.melee = true;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
			}
			else if (this.type == 867)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.6f;
			}
			else if (this.type == 868 || this.type == 869)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 870)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 14;
				this.penetrate = -1;
				this.alpha = 75;
				this.light = 1f;
				this.timeLeft *= 5;
			}
			else if (this.type == 873)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 171;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 200;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 874)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 0;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 210;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 871)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 172;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 240;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 875)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 872)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 173;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 660;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 876)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 8;
				this.light = 0.75f;
				this.alpha = 255;
				this.extraUpdates = 3;
				this.scale = 1.4f;
				this.timeLeft = 3600;
				this.magic = true;
			}
			else if (this.type >= 877 && this.type <= 879)
			{
				this.netImportant = true;
				this.width = 25;
				this.height = 25;
				this.aiStyle = 19;
				this.alpha = 255;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1f;
				this.hide = true;
				this.ownerHitCheck = true;
				this.melee = true;
			}
			else if (this.type == 880)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 183;
				this.penetrate = -1;
				this.timeLeft = 18;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.hostile = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 881)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 882)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 883)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 174;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.netImportant = true;
			}
			else if (this.type >= 884 && this.type <= 886)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 887)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 174;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.netImportant = true;
			}
			else if (this.type == 888)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type >= 889 && this.type <= 892)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 893)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 174;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.netImportant = true;
			}
			else if (this.type == 894)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type >= 895 && this.type <= 896)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 897)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 898)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type >= 899 && this.type <= 901)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 902)
			{
				this.width = 20;
				this.height = 20;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.MaxUpdates = 2;
			}
			else if (this.type >= 903 && this.type <= 906)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 907)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 30;
				this.friendly = true;
				this.penetrate = 2;
				this.melee = true;
			}
			else if (this.type == 908)
			{
				this.tileCollide = false;
				this.ignoreWater = true;
				this.width = 14;
				this.height = 14;
				this.aiStyle = 175;
				this.friendly = true;
				this.penetrate = 1;
				this.timeLeft = 3600;
				this.hide = true;
			}
			else if (this.type == 909)
			{
				this.width = 12;
				this.height = 12;
				this.aiStyle = 2;
				this.friendly = false;
				this.hostile = true;
				this.penetrate = 1;
			}
			else if (this.type == 910)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
			}
			else if (this.type == 911)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
			}
			else if (this.type >= 912 && this.type <= 915)
			{
				this.DefaultToWhip();
				if (this.type == 915)
				{
					this.extraUpdates = 2;
				}
				if (this.type == 912)
				{
					this.coldDamage = true;
				}
			}
			else if (this.type == 916)
			{
				this.ArmorPenetration = 50;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 176;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.extraUpdates = 2;
			}
			else if (this.type == 918)
			{
				this.aiStyle = 178;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.alpha = 255;
				this.width = 96;
				this.height = 96;
			}
			else if (this.type == 917)
			{
				this.ArmorPenetration = 30;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 177;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.coldDamage = true;
				this.localNPCHitCooldown = 20;
			}
			else if (this.type == 919)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 179;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 240;
				this.tileCollide = false;
				this.ignoreWater = true;
			}
			else if (this.type == 920)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 1;
			}
			else if (this.type == 921)
			{
				this.alpha = 255;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 3;
			}
			else if (this.type == 922)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 135;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 120;
				this.hostile = true;
				this.penetrate = -1;
			}
			else if (this.type == 923)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 180;
				this.alpha = 255;
				this.penetrate = -1;
				this.friendly = false;
				this.hostile = true;
				this.timeLeft = 180;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.hide = true;
			}
			else if (this.type == 926)
			{
				this.alpha = 255;
				this.width = 12;
				this.height = 12;
				this.scale = 1f;
				this.aiStyle = 1;
				this.hostile = true;
				this.penetrate = 2;
			}
			else if (this.type == 927)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 75;
				this.friendly = true;
				this.tileCollide = false;
				this.melee = true;
				this.penetrate = -1;
				this.ownerHitCheck = true;
			}
			else if (this.type == 928)
			{
				this.netImportant = true;
				this.width = 34;
				this.height = 34;
				this.aiStyle = 14;
				this.friendly = true;
				this.penetrate = 2;
				this.melee = true;
				this.timeLeft = 250;
			}
			else if (this.type == 929)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 183;
				this.penetrate = -1;
				this.timeLeft = 18;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.hostile = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 930)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 16;
				this.friendly = true;
				this.penetrate = -1;
				this.ranged = true;
			}
			else if (this.type == 931)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 171;
				this.alpha = 255;
				this.penetrate = 3;
				this.friendly = true;
				this.timeLeft = 240;
				this.magic = true;
				this.tileCollide = true;
				this.ignoreWater = true;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 60;
			}
			else if (this.type == 932)
			{
				this.ranged = true;
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 181;
				this.penetrate = 5;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.timeLeft = 120;
				this.alpha = 0;
				this.ignoreWater = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 60;
			}
			else if (this.type == 933)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 182;
				this.friendly = true;
				this.melee = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.alpha = 255;
				this.extraUpdates = 1;
				this.usesLocalNPCImmunity = true;
				this.manualDirectionChange = true;
				this.localNPCHitCooldown = 15;
				this.penetrate = -1;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 934)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 935)
			{
				this.netImportant = true;
				this.width = 18;
				this.height = 18;
				this.aiStyle = 7;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.timeLeft *= 10;
				this.extraUpdates = 3;
			}
			else if (this.type == 936)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
				this.Opacity = 0.6f;
			}
			else if (this.type == 937)
			{
				this.alpha = 255;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.hostile = false;
				this.friendly = true;
				this.penetrate = 3;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type >= 938 && this.type <= 945)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 161;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.scale = 1f;
				this.ownerHitCheck = true;
				this.melee = true;
				this.extraUpdates = 1;
				this.timeLeft = 360;
				this.hide = true;
			}
			else if (this.type == 946)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft *= 5;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.aiStyle = 156;
				this.scale = 0.75f;
				this.manualDirectionChange = true;
				this.hide = true;
			}
			else if (this.type == 947 || this.type == 948)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 15;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 10;
			}
			else if (this.type == 949)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 184;
				this.penetrate = -1;
				this.hostile = true;
				this.tileCollide = false;
			}
			else if (this.type == 950)
			{
				this.width = 104;
				this.height = 104;
				this.aiStyle = 186;
				this.friendly = true;
				this.magic = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 180;
				this.tileCollide = false;
				this.penetrate = -1;
			}
			else if (this.type == 951)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.minion = true;
				this.minionSlots = 1f;
				this.friendly = true;
				this.decidesManualFallThrough = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 10;
			}
			else if (this.type == 952)
			{
				this.DefaultToWhip();
			}
			else if (this.type == 953)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 117;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.tileCollide = false;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 80;
			}
			else if (this.type == 954)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
				this.magic = true;
				this.alpha = 255;
				this.penetrate = 2;
				this.noEnchantmentVisuals = true;
			}
			else if (this.type == 955)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 5;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 50;
				this.light = 1f;
				this.ranged = true;
			}
			else if (this.type == 956)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 28;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 957)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 124;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.manualDirectionChange = true;
			}
			else if (this.type == 958)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 959)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 960)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
				this.hide = true;
			}
			else if (this.type == 961)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 157;
				this.hostile = true;
				this.alpha = 255;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.coldDamage = true;
			}
			else if (this.type == 962)
			{
				this.width = 32;
				this.height = 32;
				this.aiStyle = 1;
				this.hostile = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 220;
				this.coldDamage = true;
			}
			else if (this.type == 963)
			{
				this.netImportant = true;
				this.width = 30;
				this.height = 48;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 0f;
				this.timeLeft *= 5;
				this.aiStyle = 62;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = 20;
			}
			else if (this.type == 965)
			{
				this.width = 40;
				this.height = 40;
				this.aiStyle = 187;
				this.hostile = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft = 300;
				this.alpha = 255;
			}
			else if (this.type == 964)
			{
				this.ArmorPenetration = 20;
				this.width = 40;
				this.height = 40;
				this.aiStyle = 187;
				this.alpha = 255;
				this.penetrate = 3;
				this.friendly = true;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.extraUpdates = 1;
				this.scale = 0.7f;
			}
			else if (this.type == 966)
			{
				this.width = 18;
				this.height = 60;
				this.aiStyle = 53;
				this.timeLeft = 36000;
				this.ignoreWater = true;
				this.sentry = true;
				this.netImportant = true;
			}
			else if (this.type == 967)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 28;
				this.friendly = true;
			}
			else if (this.type == 968)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 2;
				this.friendly = true;
				this.ranged = true;
				this.alpha = 255;
			}
			else if (this.type == 969)
			{
				this.ArmorPenetration = 10;
				this.width = 56;
				this.height = 64;
				this.aiStyle = 177;
				this.friendly = true;
				this.magic = true;
				this.tileCollide = true;
				this.penetrate = 15;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 25;
			}
			else if (this.type == 970)
			{
				this.netImportant = true;
				this.width = 10;
				this.height = 10;
				this.penetrate = -1;
				this.ignoreWater = true;
				this.tileCollide = false;
				this.friendly = true;
				this.minion = true;
				this.minionSlots = 1f;
				this.timeLeft = 60;
				this.aiStyle = 164;
				this.hide = true;
			}
			else if (this.type == 971)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 113;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.hide = true;
			}
			else if (this.type == 977)
			{
				this.ArmorPenetration = 5;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 152;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.melee = true;
				this.penetrate = 1;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				this.extraUpdates = 2;
				this.timeLeft = 10 * this.MaxUpdates;
			}
			else if (this.type == 979)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 2;
				this.friendly = true;
				this.magic = true;
				this.alpha = 255;
				this.penetrate = 2;
				this.noEnchantmentVisuals = true;
				this.coldDamage = true;
			}
			else if (this.type == 974)
			{
				this.ArmorPenetration = 5;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 188;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.melee = true;
				this.penetrate = 2;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.timeLeft = 30;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 978)
			{
				this.width = 160;
				this.height = 160;
				this.aiStyle = 189;
				this.friendly = true;
				this.alpha = 255;
				this.ignoreWater = true;
				this.timeLeft = 60;
				this.tileCollide = false;
				this.ownerHitCheck = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.melee = true;
				this.timeLeft = 30;
			}
			else if (this.type == 976)
			{
				this.ArmorPenetration = 20;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 152;
				this.friendly = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.melee = true;
				this.penetrate = 2;
				this.usesLocalNPCImmunity = true;
				this.localNPCHitCooldown = -1;
				this.scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				this.extraUpdates = 0;
				this.timeLeft = 60 * this.MaxUpdates;
			}
			else if (this.type == 975)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 113;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.alpha = 0;
				this.hide = true;
			}
			else if (this.type == 972)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 190;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 2;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
				this.usesOwnerMeleeHitCD = true;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 973)
			{
				this.width = 30;
				this.height = 30;
				this.aiStyle = 191;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = 10;
				this.alpha = 255;
				this.timeLeft = 90;
			}
			else if (this.type == 980)
			{
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.trap = true;
			}
			else if (this.type == 981)
			{
				this.width = 4;
				this.height = 4;
				this.aiStyle = 1;
				this.friendly = true;
				this.penetrate = 1;
				this.light = 0.5f;
				this.alpha = 255;
				this.scale = 1.2f;
				this.timeLeft = 600;
				this.ranged = true;
				this.extraUpdates = 1;
			}
			else if (this.type == 982)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 190;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
				this.usesOwnerMeleeHitCD = true;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 983)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 190;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 6;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
				this.usesOwnerMeleeHitCD = true;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 984)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 190;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
				this.usesOwnerMeleeHitCD = true;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 985)
			{
				this.width = 8;
				this.height = 8;
				this.aiStyle = 191;
				this.friendly = true;
				this.melee = true;
				this.penetrate = -1;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = true;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.alpha = 255;
				this.timeLeft = 90;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
			}
			else if (this.type >= 986 && this.type <= 993)
			{
				this.width = 14;
				this.height = 14;
				this.aiStyle = 61;
				this.penetrate = -1;
				this.netImportant = true;
				this.bobber = true;
				if (this.type >= 987 && this.type <= 993)
				{
					this.glowMask = (short)(318 + (this.type - 987));
					this.light = 1f;
				}
			}
			else if (this.type == 994)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 995)
			{
				this.netImportant = true;
				this.width = 240;
				this.height = 104;
				this.aiStyle = 192;
				this.friendly = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.timeLeft *= 5;
			}
			else if (this.type == 996)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 2;
				this.friendly = true;
				this.penetrate = 1;
			}
			else if (this.type == 997)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 190;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 3;
				this.usesLocalNPCImmunity = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.localNPCHitCooldown = -1;
				this.ownerHitCheck = true;
				this.ownerHitCheckDistance = 300f;
				this.usesOwnerMeleeHitCD = true;
				this.stopsDealingDamageAfterPenetrateHits = true;
			}
			else if (this.type == 999)
			{
				this.extraUpdates = 0;
				this.width = 16;
				this.height = 16;
				this.aiStyle = 99;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.scale = 1f;
			}
			else if (this.type == 1000)
			{
				this.width = 22;
				this.height = 22;
				this.aiStyle = 3;
				this.friendly = true;
				this.penetrate = -1;
				this.melee = true;
				this.light = 0.6f;
			}
			else if (this.type == 998)
			{
				this.netImportant = true;
				this.width = 20;
				this.height = 20;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 1001)
			{
				this.width = 26;
				this.height = 26;
				this.aiStyle = 194;
				this.hostile = true;
				this.tileCollide = false;
				this.ignoreWater = true;
				this.scale = 1f + (float)Main.rand.Next(51) * 0.01f;
				this.timeLeft = 360;
				this.alpha = 255;
			}
			else if (this.type == 1002)
			{
				this.width = 260;
				this.height = 260;
				this.aiStyle = 16;
				this.friendly = true;
				this.hostile = true;
				this.penetrate = -1;
				this.tileCollide = false;
				this.alpha = 255;
				this.timeLeft = 2;
				this.trap = true;
				this.usesIDStaticNPCImmunity = true;
				this.idStaticNPCHitCooldown = 15;
			}
			else if (this.type == 1003)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 1004)
			{
				this.netImportant = true;
				this.width = 26;
				this.height = 26;
				this.aiStyle = 26;
				this.friendly = true;
				this.penetrate = -1;
				this.timeLeft *= 5;
			}
			else if (this.type == 1007)
			{
				this.width = 50;
				this.height = 50;
				this.aiStyle = 92;
				this.hostile = true;
				this.friendly = true;
				this.penetrate = -1;
				this.scale = 1.1f;
				this.trap = true;
				this.hide = true;
			}
			else if (this.type == 1006)
			{
				this.arrow = true;
				this.width = 10;
				this.height = 10;
				this.aiStyle = 1;
				this.friendly = true;
				this.ranged = true;
				this.timeLeft = 1200;
			}
			else if (this.type == 1008)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 1009)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 1010)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 1011)
			{
				this.netImportant = true;
				this.width = 6;
				this.height = 6;
				this.aiStyle = 33;
				this.friendly = true;
				this.penetrate = -1;
				this.alpha = 255;
				this.timeLeft = 36000;
			}
			else if (this.type == 1012)
			{
				this.width = 18;
				this.height = 18;
				this.aiStyle = 2;
				this.friendly = true;
				this.melee = true;
				this.penetrate = 1;
			}
			else if (this.type == 1015 || this.type == 1016 || this.type == 1017)
			{
				this.DefaultToSpray();
			}
			else if (this.type == 1018)
			{
				this.width = 16;
				this.height = 16;
				this.aiStyle = 67;
				this.penetrate = -1;
				this.netImportant = true;
				this.timeLeft *= 5;
				this.friendly = true;
				this.ignoreWater = true;
			}
			else if (this.type == 1019)
			{
				this.width = 64;
				this.height = 64;
				this.aiStyle = 6;
				this.friendly = true;
				this.tileCollide = false;
				this.penetrate = -1;
				this.alpha = 255;
				this.ignoreWater = true;
			}
			else
			{
				if (this.type != 1020)
				{
					return false;
				}
				this.width = 12;
				this.height = 12;
				this.aiStyle = 195;
				this.friendly = true;
				this.penetrate = -1;
			}
			return true;
		}

		// Token: 0x06000CED RID: 3309 RVA: 0x002F5603 File Offset: 0x002F3803
		private void SetDefaults_Inner(int Type)
		{
			if (!this.SetDefaults1(Type))
			{
				this.SetDefaults2(Type);
			}
		}

		// Token: 0x06000CEE RID: 3310 RVA: 0x002F5618 File Offset: 0x002F3818
		private void SetDefaults_End(int Type)
		{
			if (this.type < (int)ProjectileID.Count && (this.minion || this.sentry || ProjectileID.Sets.MinionShot[this.type] || ProjectileID.Sets.SentryShot[this.type]))
			{
				this.DamageType = DamageClass.Summon;
			}
			ProjectileLoader.SetDefaults(this, true);
			this.width = (int)((float)this.width * this.scale);
			this.height = (int)((float)this.height * this.scale);
			this.maxPenetrate = this.penetrate;
		}

		// Token: 0x06000CEF RID: 3311 RVA: 0x002F56A8 File Offset: 0x002F38A8
		public void DefaultToSpray()
		{
			this.width = 6;
			this.height = 6;
			this.aiStyle = 31;
			this.friendly = true;
			this.alpha = 255;
			this.penetrate = -1;
			this.extraUpdates = 2;
			this.tileCollide = false;
			this.ignoreWater = true;
		}

		// Token: 0x06000CF0 RID: 3312 RVA: 0x002F56FC File Offset: 0x002F38FC
		public void DefaultToWhip()
		{
			this.width = 18;
			this.height = 18;
			this.aiStyle = 165;
			this.friendly = true;
			this.penetrate = -1;
			this.tileCollide = false;
			this.scale = 1f;
			this.ownerHitCheck = true;
			this.extraUpdates = 1;
			this.usesLocalNPCImmunity = true;
			this.localNPCHitCooldown = -1;
			this.DamageType = DamageClass.SummonMeleeSpeed;
			Projectile.VanillaWhipSettings(this, out this.WhipSettings.Segments, out this.WhipSettings.RangeMultiplier);
		}

		// Token: 0x06000CF1 RID: 3313 RVA: 0x002F5788 File Offset: 0x002F3988
		public static int GetNextSlot()
		{
			int result = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		/// <summary>
		/// <inheritdoc cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />
		/// <br /><br />This particular overload uses a Vector2 instead of X and Y to determine the actual spawn position and a Vector2 to dictate the initial velocity.
		/// </summary>
		// Token: 0x06000CF2 RID: 3314 RVA: 0x002F57C0 File Offset: 0x002F39C0
		public static int NewProjectile(IEntitySource spawnSource, Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
		{
			return Projectile.NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1, ai2);
		}

		// Token: 0x06000CF3 RID: 3315 RVA: 0x002F57F8 File Offset: 0x002F39F8
		public static int FindOldestProjectile()
		{
			int result = 1000;
			int num = 9999999;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].netImportant && Main.projectile[i].timeLeft < num)
				{
					result = i;
					num = Main.projectile[i].timeLeft;
				}
			}
			return result;
		}

		/// <summary>
		/// Spawns a projectile into the game world with the given type. The spawn position is given in world coordinates by the X and Y parameters. SpeedX and SpeedY dictate the initial velocity. Damage and KnockBack are self-explanatory. Owner is the player who spawned the projectile, almost always Main.myPlayer. ai0, ai1, and ai2 will initialize the Projectile.ai[] array with the supplied values. This can be used to pass in information to the Projectile. The Projectile AI code will have to be written to utilize those values. The return value is the index of the spawned Projectile within the <see cref="F:Terraria.Main.projectile" /> array.
		/// <br /> Make sure that this method is called only by the client in charge of the source causing this projectile to spawn. Failure to do this will result in the projectile spawning once for each player in the world. For example, if Player code uses this method, make sure to first check <code>if(Main.myPlayer == Player.whoAmI)</code> to ensure that only the local player spawns the projectile.
		/// <br /> Projectiles spawning other projectiles should check <code>if(Main.myPlayer == Projectile.owner)</code>
		/// <br /> If the source is an NPC or non-player owned projectile, checking <code>if (Main.netMode != NetmodeID.MultiplayerClient)</code> will ensure that clients don't attempt to spawn the projectile.
		/// </summary>
		/// <param name="spawnSource"></param>
		/// <param name="X"></param>
		/// <param name="Y"></param>
		/// <param name="SpeedX"></param>
		/// <param name="SpeedY"></param>
		/// <param name="Type">Either a <see cref="T:Terraria.ID.ProjectileID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.ProjectileType``1" />, for example <see cref="F:Terraria.ID.ProjectileID.FireArrow" /> or ModContent.ProjectileType&lt;MyModProjectile&gt;()</param>
		/// <param name="Damage"></param>
		/// <param name="KnockBack"></param>
		/// <param name="Owner"></param>
		/// <param name="ai0"></param>
		/// <param name="ai1"></param>
		/// <param name="ai2"></param>
		/// <returns></returns>
		// Token: 0x06000CF4 RID: 3316 RVA: 0x002F5850 File Offset: 0x002F3A50
		public static int NewProjectile(IEntitySource spawnSource, float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
		{
			if (Owner == -1)
			{
				Owner = Main.myPlayer;
			}
			int num = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					num = i;
					break;
				}
			}
			if (num == 1000)
			{
				num = Projectile.FindOldestProjectile();
			}
			Projectile projectile = Main.projectile[num];
			projectile.SetDefaults(Type);
			projectile.position.X = X - (float)projectile.width * 0.5f;
			projectile.position.Y = Y - (float)projectile.height * 0.5f;
			projectile.owner = Owner;
			projectile.velocity.X = SpeedX;
			projectile.velocity.Y = SpeedY;
			projectile.damage = Damage;
			projectile.knockBack = KnockBack;
			projectile.identity = num;
			projectile.gfxOffY = 0f;
			projectile.stepSpeed = 1f;
			projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
			if (projectile.ignoreWater)
			{
				projectile.wet = false;
			}
			projectile.honeyWet = Collision.honey;
			projectile.shimmerWet = Collision.shimmer;
			Main.projectileIdentity[Owner, num] = num;
			Projectile.FindBannerToAssociateTo(spawnSource, projectile);
			if (projectile.aiStyle == 1)
			{
				while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
				{
					Projectile projectile2 = projectile;
					projectile2.velocity.X = projectile2.velocity.X * 0.97f;
					Projectile projectile3 = projectile;
					projectile3.velocity.Y = projectile3.velocity.Y * 0.97f;
				}
			}
			if (Owner == Main.myPlayer)
			{
				if (Type <= 335)
				{
					if (Type == 206)
					{
						projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
						projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
						goto IL_297;
					}
					if (Type == 335)
					{
						projectile.ai[1] = (float)Main.rand.Next(4);
						goto IL_297;
					}
				}
				else
				{
					if (Type == 358)
					{
						projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
						goto IL_297;
					}
					if (Type == 406)
					{
						projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
						goto IL_297;
					}
				}
				projectile.ai[0] = ai0;
				projectile.ai[1] = ai1;
				projectile.ai[2] = ai2;
			}
			IL_297:
			if (Type == 434)
			{
				projectile.ai[0] = projectile.position.X;
				projectile.ai[1] = projectile.position.Y;
			}
			if (Type > 0)
			{
				if (ProjectileID.Sets.NeedsUUID[Type])
				{
					projectile.projUUID = projectile.identity;
				}
				if (ProjectileID.Sets.StardustDragon[Type])
				{
					int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
					if (num2 >= 0)
					{
						projectile.ai[0] = (float)num2;
					}
				}
			}
			if (Owner == Main.myPlayer)
			{
				if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
				{
					int num3 = 0;
					int num4 = 0;
					int num5 = 99999999;
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[j].type] && Main.projectile[j].owner == Owner && Main.projectile[j].damage <= 0)
						{
							num3++;
							if (num5 > Main.projectile[j].timeLeft)
							{
								num4 = j;
								num5 = Main.projectile[j].timeLeft;
							}
						}
					}
					if (num3 > 10)
					{
						Main.projectile[num4].Kill();
					}
				}
				if (Type == 28)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 516)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 519)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 29)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 470)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 637)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 30)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 517)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 37)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 773)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 75)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 133)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 136)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 139)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 142)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 397)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 419)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 420)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 421)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 422)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 588)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 779)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 783)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 862 || Type == 863)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 443)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 681)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 684)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 706)
				{
					projectile.timeLeft = 120;
				}
				if (Type == 680 && Main.player[projectile.owner].setSquireT2)
				{
					projectile.penetrate = 7;
				}
				if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
				{
					projectile.timeLeft = 180;
				}
				if (Main.netMode != 2)
				{
					Player throwingPlayer = Main.player[Owner];
					if (throwingPlayer.AnyThrownCostReduction && throwingPlayer.HeldItem.CountsAsClass(DamageClass.Throwing) && spawnSource is EntitySource_ItemUse_WithAmmo)
					{
						projectile.noDropItem = true;
					}
				}
			}
			if (Type == 249)
			{
				projectile.frame = Main.rand.Next(5);
			}
			if (Owner == Main.myPlayer)
			{
				Main.player[Owner].TryUpdateChannel(projectile);
			}
			projectile.ApplyStatsFromSource(spawnSource);
			ProjectileLoader.OnSpawn(projectile, spawnSource);
			if (Main.netMode != 0 && Owner == Main.myPlayer)
			{
				NetMessage.SendData(27, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
			return num;
		}

		// Token: 0x06000CF5 RID: 3317 RVA: 0x002F5FA0 File Offset: 0x002F41A0
		private static void FindBannerToAssociateTo(IEntitySource spawnSource, Projectile next)
		{
			EntitySource_Parent entitySource_Parent = spawnSource as EntitySource_Parent;
			if (entitySource_Parent != null)
			{
				Projectile projectile = entitySource_Parent.Entity as Projectile;
				if (projectile != null)
				{
					next.bannerIdToRespondTo = projectile.bannerIdToRespondTo;
					return;
				}
				NPC nPC = entitySource_Parent.Entity as NPC;
				if (nPC != null)
				{
					next.bannerIdToRespondTo = Item.NPCtoBanner(nPC.BannerID());
				}
			}
		}

		// Token: 0x06000CF6 RID: 3318 RVA: 0x002F5FF4 File Offset: 0x002F41F4
		public static Color GetGolfTrailColor(Projectile proj)
		{
			switch (proj.type)
			{
			case 739:
				return new Color(50, 50, 50, 80);
			case 740:
				return new Color(30, 50, 255, 40);
			case 741:
				return new Color(150, 90, 60, 90);
			case 742:
				return new Color(30, 255, 170, 30);
			case 743:
				return new Color(30, 255, 30, 40);
			case 744:
				return new Color(190, 255, 30, 50);
			case 745:
				return new Color(255, 130, 30, 50);
			case 746:
				return new Color(255, 50, 110, 50);
			case 747:
				return new Color(130, 10, 200, 40);
			case 748:
				return new Color(255, 30, 50, 50);
			case 749:
				return new Color(100, 180, 255, 30);
			case 750:
				return new Color(50, 240, 160, 30);
			case 751:
				return new Color(220, 80, 220, 70);
			case 752:
				return new Color(255, 180, 50, 30);
			default:
				return new Color(160, 160, 255, 50);
			}
		}

		// Token: 0x06000CF7 RID: 3319 RVA: 0x002F6168 File Offset: 0x002F4368
		public void StatusNPC(int i)
		{
			NPC nPC = Main.npc[i];
			if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
			{
				byte meleeEnchant = Main.player[this.owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					nPC.AddBuff(70, 60 * Main.rand.Next(5, 10), false);
				}
				if (meleeEnchant == 2)
				{
					nPC.AddBuff(39, 60 * Main.rand.Next(3, 7), false);
				}
				if (meleeEnchant == 3)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(3, 7), false);
				}
				if (meleeEnchant == 5)
				{
					nPC.AddBuff(69, 60 * Main.rand.Next(10, 20), false);
				}
				if (meleeEnchant == 6)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(1, 4), false);
				}
				if (meleeEnchant == 8)
				{
					nPC.AddBuff(20, 60 * Main.rand.Next(5, 10), false);
				}
				if (meleeEnchant == 4)
				{
					nPC.AddBuff(72, 120, false);
				}
			}
			if (this.type == 195)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(5, 11), false);
			}
			if (this.type == 119)
			{
				nPC.AddBuff(324, 240, false);
			}
			if (this.type == 309)
			{
				nPC.AddBuff(324, 300, false);
			}
			if (this.type == 359)
			{
				nPC.AddBuff(324, 420, false);
			}
			int num5 = this.type;
			if (num5 <= 849)
			{
				if (num5 != 841)
				{
					switch (num5)
					{
					case 847:
						nPC.AddBuff(309, 240, false);
						break;
					case 848:
						nPC.AddBuff(319, 240, false);
						break;
					case 849:
						nPC.AddBuff(310, 240, false);
						break;
					}
				}
				else
				{
					nPC.AddBuff(307, 240, false);
				}
			}
			else
			{
				switch (num5)
				{
				case 912:
					nPC.AddBuff(340, 240, false);
					nPC.AddBuff(324, 240, false);
					break;
				case 913:
					if (this.localAI[0] == 0f)
					{
						nPC.AddBuff(313, 240, false);
					}
					nPC.AddBuff(323, 240, false);
					break;
				case 914:
					nPC.AddBuff(315, 240, false);
					if (Main.rand.Next(5) == 0)
					{
						nPC.AddBuff(20, 180, false);
					}
					break;
				case 915:
					nPC.AddBuff(316, 240, false);
					break;
				default:
					if (num5 == 952)
					{
						nPC.AddBuff(326, 240, false);
					}
					break;
				}
			}
			if (this.type == 664 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 6), false);
			}
			if (this.type == 666 && Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(323, 60 * Main.rand.Next(3, 9), false);
			}
			if (this.type == 668 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(323, 60 * Main.rand.Next(6, 9), false);
			}
			if (this.type == 567 || this.type == 568)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(5, 11), false);
			}
			if (this.type == 598 && this.ai[1] == (float)i)
			{
				nPC.AddBuff(169, 900, false);
			}
			if (this.type == 636 && this.ai[1] == (float)i)
			{
				nPC.AddBuff(189, 300, false);
			}
			if (this.type == 971 && this.ai[1] == (float)i)
			{
				nPC.AddBuff(337, 540, false);
			}
			if (this.type == 975 && this.ai[1] == (float)i)
			{
				nPC.AddBuff(344, 540, false);
			}
			if (this.type == 611)
			{
				nPC.AddBuff(189, 300, false);
			}
			if (this.type == 612)
			{
				nPC.AddBuff(189, 300, false);
			}
			if (this.type == 978)
			{
				nPC.AddBuff(24, 180, false);
			}
			if (this.type == 953)
			{
				nPC.AddBuff(189, 300, false);
			}
			if (this.type == 711)
			{
				nPC.AddBuff(203, 600, false);
			}
			if (this.type == 706)
			{
				nPC.AddBuff(323, 480, false);
			}
			if (this.type == 614 && this.ai[1] == (float)i)
			{
				nPC.AddBuff(183, 900, false);
			}
			if (this.type == 585)
			{
				nPC.AddBuff(153, 60 * Main.rand.Next(5, 11), false);
			}
			if (this.type == 583)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(3, 6), false);
			}
			if (this.type == 524)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(3, 8), false);
			}
			if (this.type == 954 && Main.rand.Next(2) == 0)
			{
				int num = 24;
				if (Main.remixWorld)
				{
					num = 323;
				}
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(num, Main.rand.Next(60, 240), false);
				}
				else
				{
					nPC.AddBuff(num, Main.rand.Next(60, 120), false);
				}
			}
			if (this.type == 504 && Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(323, Main.rand.Next(60, 240), false);
				}
				else
				{
					nPC.AddBuff(323, Main.rand.Next(60, 120), false);
				}
			}
			if (this.type == 979 && Main.rand.Next(2) == 0)
			{
				int num2 = 44;
				if (Main.remixWorld)
				{
					num2 = 324;
				}
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(num2, Main.rand.Next(60, 240), false);
				}
				else
				{
					nPC.AddBuff(num2, Main.rand.Next(60, 120), false);
				}
			}
			if ((this.type == 694 || this.type == 695 || this.type == 696) && Main.player[this.owner].setHuntressT2)
			{
				nPC.AddBuff(204, Main.rand.Next(8, 18) * 30, false);
			}
			if (this.type == 545 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(60, 240), false);
			}
			if (this.type == 553)
			{
				nPC.AddBuff(323, Main.rand.Next(180, 480), false);
			}
			if (this.type == 552 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(324, Main.rand.Next(120, 320), false);
			}
			if (this.type == 495)
			{
				nPC.AddBuff(153, Main.rand.Next(120, 300), false);
			}
			if (this.type == 497)
			{
				nPC.AddBuff(153, Main.rand.Next(60, 180), false);
			}
			if (this.type == 496)
			{
				nPC.AddBuff(153, Main.rand.Next(240, 480), false);
			}
			if (this.type == 46)
			{
				nPC.AddBuff(153, Main.rand.Next(240, 300), false);
			}
			if (this.type == 476)
			{
				nPC.AddBuff(151, 30, false);
			}
			if (this.type == 523)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(10, 30), false);
			}
			if (this.type == 478 || this.type == 480)
			{
				nPC.AddBuff(39, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type == 479)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(7, 15), false);
			}
			if (this.type == 379)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5), false);
			}
			if (this.type >= 390 && this.type <= 392)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5), false);
			}
			if (this.type == 374)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(4, 7), false);
			}
			if (this.type == 376)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type >= 399 && this.type <= 402)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7), false);
			}
			if (this.type == 295 || this.type == 296)
			{
				nPC.AddBuff(323, 60 * Main.rand.Next(8, 16), false);
			}
			if ((this.melee || this.ranged) && !this.npcProj && Main.player[this.owner].frostBurn && !this.noEnchantments)
			{
				nPC.AddBuff(324, 60 * Main.rand.Next(5, 15), false);
			}
			if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
			{
				if (Main.rand.Next(7) == 0)
				{
					nPC.AddBuff(323, 360, false);
				}
				else if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(323, 120, false);
				}
				else
				{
					nPC.AddBuff(323, 60, false);
				}
			}
			if (this.type == 287)
			{
				nPC.AddBuff(72, 120, false);
			}
			if (this.type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(31, 180, false);
				}
				else
				{
					nPC.AddBuff(31, 60, false);
				}
			}
			if (this.type == 2 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 180, false);
			}
			if (this.type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(44, 180, false);
				}
			}
			else if (this.type == 15)
			{
				int num3 = 24;
				if (Main.remixWorld)
				{
					num3 = 323;
				}
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(num3, 300, false);
				}
			}
			else if (this.type == 253)
			{
				nPC.AddBuff(324, 480, false);
			}
			else if (this.type == 19)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 360, false);
				}
			}
			else if (this.type == 113)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(44, 180, false);
				}
			}
			else if (this.type == 33)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(20, 420, false);
				}
			}
			else if (this.type == 976)
			{
				if (Main.rand.Next(4) == 0)
				{
					nPC.AddBuff(20, 420, false);
				}
			}
			else if (this.type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, Main.rand.Next(240, 480), false);
				}
			}
			else if (this.type == 948)
			{
				if (Main.rand.Next(6) == 0)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(2, 4), false);
				}
			}
			else if (this.type == 35)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 300, false);
				}
			}
			else if (this.type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(20, 600, false);
				}
			}
			else if (this.type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(20, 3600, false);
				}
				else
				{
					nPC.AddBuff(20, 1800, false);
				}
			}
			else if (this.type == 63)
			{
				if (Main.rand.Next(5) != 0)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(2, 5), false);
				}
			}
			else if (this.type == 85)
			{
				int num4 = (this.ai[0] == 1f) ? 324 : 323;
				nPC.AddBuff(num4, 1200, false);
			}
			else if (this.type == 188)
			{
				nPC.AddBuff(323, 1200, false);
			}
			else if (this.type == 95 || this.type == 103 || this.type == 104 || this.type == 482)
			{
				nPC.AddBuff(39, 420, false);
			}
			else if (this.type == 278 || this.type == 279 || this.type == 280)
			{
				nPC.AddBuff(69, 600, false);
			}
			else if (this.type == 282 || this.type == 283)
			{
				nPC.AddBuff(70, 600, false);
			}
			if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1011)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, 600, false);
				}
				else
				{
					nPC.AddBuff(24, 300, false);
				}
			}
			if (this.type == 1009)
			{
				nPC.AddBuff(39, 600, false);
				return;
			}
			if (this.type == 98)
			{
				nPC.AddBuff(20, 600, false);
				return;
			}
			if (this.type == 184)
			{
				nPC.AddBuff(20, 900, false);
				return;
			}
			if (this.type == 980)
			{
				nPC.AddBuff(70, 300, false);
				return;
			}
			if (this.type == 265)
			{
				nPC.AddBuff(20, 1800, false);
				return;
			}
			if (this.type == 355)
			{
				nPC.AddBuff(70, 1800, false);
			}
		}

		// Token: 0x06000CF8 RID: 3320 RVA: 0x002F7158 File Offset: 0x002F5358
		public void StatusPvP(int i)
		{
			if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
			{
				byte meleeEnchant = Main.player[this.owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false, false);
				}
				if (meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false, false);
				}
				if (meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false, false);
				}
				if (meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false, false);
				}
				if (meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false, false);
				}
				if (meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false, false);
				}
			}
			if (this.type == 978)
			{
				Main.player[i].AddBuff(24, 180, true, false);
			}
			if (this.type == 295 || this.type == 296)
			{
				Main.player[i].AddBuff(323, 60 * Main.rand.Next(8, 16), false, false);
			}
			if (this.type >= 399 && this.type <= 402)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false, false);
			}
			if (this.type == 478 || this.type == 480)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false, false);
			}
			if ((this.melee || this.ranged) && Main.player[this.owner].frostBurn && !this.noEnchantments)
			{
				Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), false, false);
			}
			if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 360, false, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, false, false);
				}
				else
				{
					Main.player[i].AddBuff(24, 120, false, false);
				}
			}
			if (this.type == 2 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 180, false, false);
			}
			if (this.type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(44, 240, false, false);
				}
			}
			else if (this.type == 15)
			{
				int num = 24;
				if (Main.remixWorld)
				{
					num = 323;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(num, 300, false, false);
				}
			}
			else if (this.type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(44, 480, false, false);
				}
			}
			else if (this.type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, false, false);
				}
			}
			else if (this.type == 113)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(44, 180, false, false);
				}
			}
			else if (this.type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(20, 420, false, false);
				}
			}
			else if (this.type == 976)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 420, false, false);
				}
			}
			else if (this.type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, false, false);
				}
			}
			else if (this.type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 180, false, false);
				}
			}
			else if (this.type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 600, false, false);
				}
			}
			else if (this.type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 3600, false, false);
				}
				else
				{
					Main.player[i].AddBuff(20, 1800, false, false);
				}
			}
			else if (this.type == 63)
			{
				if (Main.rand.Next(3) != 0)
				{
					Main.player[i].AddBuff(31, 120, false, false);
				}
			}
			else if (this.type == 85 || this.type == 188)
			{
				Main.player[i].AddBuff(24, 1200, false, false);
			}
			else if (this.type == 95 || this.type == 103 || this.type == 104 || this.type == 482)
			{
				Main.player[i].AddBuff(39, 420, false, false);
			}
			else if (this.type == 278 || this.type == 279 || this.type == 280)
			{
				Main.player[i].AddBuff(69, 900, false, false);
			}
			else if (this.type == 282 || this.type == 283)
			{
				Main.player[i].AddBuff(70, 600, false, false);
			}
			if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1011)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 600, false, false);
				}
				else
				{
					Main.player[i].AddBuff(24, 300, false, false);
				}
			}
			if (this.type == 1009)
			{
				Main.player[i].AddBuff(39, 300, false, false);
				return;
			}
			if (this.type == 265)
			{
				Main.player[i].AddBuff(20, 1200, false, false);
				return;
			}
			if (this.type == 355)
			{
				Main.player[i].AddBuff(70, 1800, false, false);
			}
		}

		// Token: 0x06000CF9 RID: 3321 RVA: 0x002F78B0 File Offset: 0x002F5AB0
		public void ghostHurt(int dmg, Vector2 Position, Entity victim)
		{
			if (!this.magic || this.damage <= 0)
			{
				return;
			}
			int num = this.damage;
			if (dmg <= 1)
			{
				return;
			}
			int num2 = 1500;
			if (Main.player[Main.myPlayer].ghostDmg > (float)num2)
			{
				return;
			}
			Main.player[Main.myPlayer].ghostDmg += (float)num;
			int[] array = new int[200];
			int num3 = 0;
			new int[200];
			int num4 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].CanBeChasedBy(this, false))
				{
					float num5 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - this.position.Y + (float)(this.height / 2));
					if (num5 < 800f)
					{
						if (Collision.CanHit(this.position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num5 > 50f)
						{
							array[num4] = i;
							num4++;
						}
						else if (num4 == 0)
						{
							array[num3] = i;
							num3++;
						}
					}
				}
			}
			if (num3 != 0 || num4 != 0)
			{
				int num6 = (num4 <= 0) ? array[Main.rand.Next(num3)] : array[Main.rand.Next(num4)];
				float num7 = (float)Main.rand.Next(-100, 101);
				float num8 = (float)Main.rand.Next(-100, 101);
				float num9 = (float)Math.Sqrt((double)(num7 * num7 + num8 * num8));
				num9 = 4f / num9;
				num7 *= num9;
				num8 *= num9;
				Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 16), Position.X, Position.Y, num7, num8, 356, num, 0f, this.owner, (float)num6, 0f, 0f);
			}
		}

		// Token: 0x06000CFA RID: 3322 RVA: 0x002F7AFC File Offset: 0x002F5CFC
		public void ghostHeal(int dmg, Vector2 Position, Entity victim)
		{
			float num = 0.2f;
			num -= (float)this.numHits * 0.05f;
			if (num <= 0f)
			{
				return;
			}
			float num2 = (float)dmg * num;
			if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num2;
			if (!this.magic)
			{
				return;
			}
			float num3 = 0f;
			int num4 = this.owner;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[this.owner].hostile && !Main.player[i].hostile) || Main.player[this.owner].team == Main.player[i].team) && base.Distance(Main.player[i].Center) <= 3000f)
				{
					int num5 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
					if ((float)num5 > num3)
					{
						num3 = (float)num5;
						num4 = i;
					}
				}
			}
			Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 15), Position.X, Position.Y, 0f, 0f, 298, 0, 0f, this.owner, (float)num4, num2, 0f);
		}

		// Token: 0x06000CFB RID: 3323 RVA: 0x002F7C7C File Offset: 0x002F5E7C
		public void vampireHeal(int dmg, Vector2 Position, Entity victim)
		{
			float num = (float)dmg * 0.075f;
			if ((int)num != 0 && Main.player[Main.myPlayer].lifeSteal > 0f)
			{
				Main.player[Main.myPlayer].lifeSteal -= num;
				int num2 = this.owner;
				Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 18), Position.X, Position.Y, 0f, 0f, 305, 0, 0f, this.owner, (float)num2, num, 0f);
			}
		}

		// Token: 0x06000CFC RID: 3324 RVA: 0x002F7D0C File Offset: 0x002F5F0C
		public void StatusPlayer(int i)
		{
			if (Main.player[i].creativeGodMode)
			{
				return;
			}
			if (this.type == 119)
			{
				Main.player[i].AddBuff(324, 240, true, false);
			}
			if (this.type == 359)
			{
				Main.player[i].AddBuff(324, 420, true, false);
			}
			if (this.type == 472)
			{
				Main.player[i].AddBuff(149, Main.rand.Next(30, 150), true, false);
			}
			if (this.type == 961)
			{
				Main.player[i].AddBuff(47, 20, true, false);
			}
			if (this.type == 467)
			{
				Main.player[i].AddBuff(24, Main.rand.Next(30, 150), true, false);
			}
			if (this.type == 581)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(300, 540), true, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(360, 720), true, false);
				}
			}
			if (this.type == 687)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11), true, false);
			}
			if (this.type == 258 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8), true, false);
			}
			if (this.type == 572 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 240), true, false);
			}
			if (this.type == 276)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(120, 540), true, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(180, 420), true, false);
				}
			}
			if (this.type == 436 && Main.rand.Next(5) >= 2)
			{
				Main.player[i].AddBuff(31, 300, true, false);
			}
			if (this.type == 435 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(144, 300, true, false);
			}
			if (this.type == 682)
			{
				Main.player[i].AddBuff(196, 300, true, false);
			}
			if (this.type == 437)
			{
				Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9), true, false);
			}
			if (this.type == 348)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 600, true, false);
				}
				else
				{
					Main.player[i].AddBuff(46, 300, true, false);
				}
				if (Main.rand.Next(3) != 0)
				{
					if (Main.rand.Next(16) == 0)
					{
						Main.player[i].AddBuff(47, 60, true, false);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Main.player[i].AddBuff(47, 40, true, false);
					}
					else if (Main.rand.Next(8) == 0)
					{
						Main.player[i].AddBuff(47, 20, true, false);
					}
				}
			}
			if (this.type == 349)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(46, 600, true, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 300, true, false);
				}
			}
			if (this.type >= 399 && this.type <= 402 && !this.hostile)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true, false);
			}
			if (this.type == 55 || this.type == 719)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 600, true, false);
				}
				else if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(60, 300), true, false);
				}
			}
			if (this.type == 44 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(22, 900, true, false);
			}
			if (this.type == 293)
			{
				Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7), true, false);
			}
			if (this.type == 299)
			{
				Main.player[i].AddBuff(23, 240, true, false);
			}
			if (this.type == 82 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 420, true, false);
			}
			if (this.type == 285 && !this.hostile)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(31, 180, true, false);
				}
				else
				{
					Main.player[i].AddBuff(31, 60, true, false);
				}
			}
			if (this.type == 96 || this.type == 101)
			{
				if (Main.rand.Next(6) == 0)
				{
					Main.player[i].AddBuff(39, 180, true, false);
				}
				else if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(39, 180, true, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(39, 120, true, false);
				}
			}
			else if (this.type == 288)
			{
				Main.player[i].AddBuff(69, 900, true, false);
			}
			else if (this.type == 253 && !this.hostile)
			{
				Main.player[i].AddBuff(324, 600, true, false);
			}
			if (this.type == 291 || this.type == 292)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true, false);
			}
			if (this.type == 98)
			{
				Main.player[i].AddBuff(20, 600, true, false);
			}
			if (this.type == 184)
			{
				Main.player[i].AddBuff(20, 900, true, false);
			}
			if (this.type == 980)
			{
				Main.player[i].AddBuff(70, 300, true, false);
			}
			if (this.type == 290)
			{
				Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16), true, false);
			}
			if (this.type == 174)
			{
				Main.player[i].AddBuff(46, 1200, true, false);
				if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 90, true, false);
				}
				else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 60, true, false);
				}
			}
			if (this.type == 257)
			{
				Main.player[i].AddBuff(46, 2700, true, false);
				if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(47, 60, true, false);
				}
			}
			if (this.type == 177)
			{
				Main.player[i].AddBuff(46, 1500, true, false);
				if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(47, Main.rand.Next(30, 120), true, false);
				}
			}
			if (this.type == 128 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(44, 360, true, false);
			}
			if (this.type == 176)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 1200, true, false);
					return;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 300, true, false);
				}
			}
		}

		// Token: 0x06000CFD RID: 3325 RVA: 0x002F8610 File Offset: 0x002F6810
		public bool CanHitWithMeleeWeapon(Entity ent)
		{
			return base.Distance(ent.Center) <= this.ownerHitCheckDistance && (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, ent.position, ent.width, ent.height) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), Main.player[this.owner].gravDir * (float)(-(float)Main.player[this.owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, (float)(-(float)ent.height / 3)), 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), Main.player[this.owner].gravDir * (float)(-(float)Main.player[this.owner].height) / 3f), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float)(Main.player[this.owner].direction * Main.player[this.owner].width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0));
		}

		// Token: 0x06000CFE RID: 3326 RVA: 0x002F8808 File Offset: 0x002F6A08
		public bool CanHitWithOwnBody(Entity ent)
		{
			if (base.Distance(ent.Center) > this.ownerHitCheckDistance)
			{
				return false;
			}
			bool flag = Collision.CanHit(this.position, this.width, this.height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), (float)(-(float)this.height / 3)), 0, 0, ent.Center + new Vector2(0f, (float)(-(float)ent.height / 3)), 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), (float)(-(float)this.height / 3)), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0);
			float num = ProjectileID.Sets.ExtendedCanHitCheckRange[this.type];
			if (num != 0f)
			{
				if (flag)
				{
					return flag;
				}
				GenSearch genSearch = ProjectileID.Sets.ExtendedCanHitCheckSearch[this.type];
				Vector2 position = base.Top + new Vector2(0f, 0f - num);
				Vector2 position2 = ent.Top + new Vector2(0f, 0f - num);
				if (genSearch != null)
				{
					Point result;
					if (WorldUtils.Find(base.Top.ToTileCoordinates(), Searches.Chain(genSearch, new GenCondition[]
					{
						Projectile._cachedConditions_notNull,
						Projectile._cachedConditions_solid
					}), out result))
					{
						position = result.ToWorldCoordinates(8f, 8f);
					}
					if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(genSearch, new GenCondition[]
					{
						Projectile._cachedConditions_notNull,
						Projectile._cachedConditions_solid
					}), out result))
					{
						position2 = result.ToWorldCoordinates(8f, 8f);
					}
				}
				flag |= Collision.CanHitLine(position, 0, 0, position2, 0, 0);
			}
			return flag;
		}

		// Token: 0x06000CFF RID: 3327 RVA: 0x002F8A3C File Offset: 0x002F6C3C
		public unsafe void Damage()
		{
			bool vanillaCanDamage = true;
			if (this.type == 18 || this.type == 72 || this.type == 86 || this.type == 87 || this.aiStyle == 31 || this.aiStyle == 32 || this.type == 226 || this.type == 378 || this.type == 613 || this.type == 650 || this.type == 882 || this.type == 888 || this.type == 895 || this.type == 896 || (this.type == 434 && this.localAI[0] != 0f) || this.type == 439 || this.type == 444 || (this.type == 451 && ((int)(this.ai[0] - 1f) / this.penetrate == 0 || this.ai[1] < 5f) && this.ai[0] != 0f) || (this.type == 500 || this.type == 653 || this.type == 1018 || this.type == 460 || this.type == 633 || this.type == 600 || this.type == 601 || this.type == 602 || this.type == 535 || (this.type == 631 && this.localAI[1] == 0f) || (this.type == 537 && this.localAI[0] <= 30f) || this.type == 651 || (this.type == 188 && this.localAI[0] < 5f) || (this.aiStyle == 137 && this.ai[0] != 0f) || this.aiStyle == 138 || (this.type == 261 && this.velocity.Length() < 1.5f) || (this.type == 818 && this.ai[0] < 1f) || this.type == 831 || this.type == 970 || (this.type == 833 && this.ai[0] == 4f) || (this.type == 834 && this.ai[0] == 4f) || (this.type == 835 && this.ai[0] == 4f) || (this.type == 281 && this.ai[0] == -3f) || ((this.type == 598 || this.type == 636 || this.type == 614 || this.type == 971 || this.type == 975) && this.ai[0] == 1f)) || (this.type == 923 && this.localAI[0] <= 60f) || (this.type == 919 && this.localAI[0] <= 60f) || (this.aiStyle == 15 && this.ai[0] == 0f && this.localAI[1] <= 12f) || (this.type == 861 || (this.type >= 511 && this.type <= 513 && this.ai[1] >= 1f)) || (this.type == 1007 || (this.aiStyle == 93 && this.ai[0] != 0f && this.ai[0] != 2f)) || (this.aiStyle == 10 && this.localAI[1] == -1f) || (this.type == 85 && this.localAI[0] >= 54f) || (Main.projPet[this.type] && this.type != 266 && this.type != 407 && this.type != 317 && (this.type != 388 || this.ai[0] != 2f) && (this.type < 390 || this.type > 392) && (this.type < 393 || this.type > 395) && (this.type != 533 || this.ai[0] < 6f || this.ai[0] > 8f) && (this.type < 625 || this.type > 628) && (this.type != 755 || this.ai[0] == 0f) && (this.type != 946 || this.ai[0] == 0f) && this.type != 758 && this.type != 951 && this.type != 963 && (this.type != 759 || this.frame == Main.projFrames[this.type] - 1) && this.type != 833 && this.type != 834 && this.type != 835 && this.type != 864 && (this.type != 623 || this.ai[0] != 2f)))
			{
				vanillaCanDamage = false;
			}
			if (Main.projPet[this.type] && ProjectileLoader.MinionContactDamage(this))
			{
				vanillaCanDamage = true;
			}
			if (!ProjectileLoader.CanDamage(this).GetValueOrDefault(vanillaCanDamage))
			{
				return;
			}
			Rectangle rectangle = this.Damage_GetHitbox();
			if (this.friendly && Main.getGoodWorld && (this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type]) && Main.netMode == 1 && this.owner != Main.myPlayer && !this.npcProj)
			{
				this.BombsHurtPlayers(rectangle, Main.myPlayer);
				return;
			}
			if (this.friendly && this.owner == Main.myPlayer && !this.npcProj)
			{
				this.BombsHurtPlayers(rectangle, this.owner);
				if (!this.minion)
				{
					this.CutTiles();
				}
			}
			int num50;
			if (this.owner == Main.myPlayer)
			{
				float num = 1f;
				if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[this.type] && this.timeLeft > 3)
				{
					num *= 2f;
				}
				if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[this.type] && this.velocity.Length() < 0.5f)
				{
					num *= 3f;
				}
				if (this.type == 34 && this.penetrate == 1)
				{
					num *= 1f;
				}
				if (this.aiStyle == 15 && this.ai[0] == 0f)
				{
					num *= 1.2f;
				}
				if (this.aiStyle == 15 && (this.ai[0] == 1f || this.ai[0] == 2f))
				{
					num *= 2f;
				}
				if (this.type == 877 || this.type == 879 || this.type == 878)
				{
					num = 0.1f + Main.player[this.owner].velocity.Length() / 7f * 0.9f;
				}
				if (this.type == 968)
				{
					num = 1f;
					switch ((int)this.ai[1])
					{
					case 0:
						num = 1.5f;
						break;
					case 1:
						num = 1f;
						break;
					case 2:
						num = 1.5f;
						break;
					case 3:
						num = 0.1f;
						break;
					case 4:
						num = 1f;
						break;
					case 5:
						num = 1f;
						break;
					case 6:
						num = 1f;
						break;
					case 7:
						num = 0.25f;
						break;
					case 8:
						num = 1f;
						break;
					case 9:
						num = 0.75f;
						break;
					case 10:
						num = 0.5f;
						break;
					case 11:
						num = 0.5f;
						break;
					case 12:
						num = 0.5f;
						break;
					case 13:
						num = 0.5f;
						break;
					case 14:
						num = 0.5f;
						break;
					case 15:
						num = 0.5f;
						break;
					case 16:
						num = 0.5f;
						break;
					case 17:
						num = 1.5f;
						break;
					case 18:
						num = 1.6f;
						break;
					case 19:
						num = 1.8f;
						break;
					case 20:
						num = 1.9f;
						break;
					case 21:
						num = 1.7f;
						break;
					case 22:
						num = 2f;
						break;
					case 23:
						num = 1.9f;
						break;
					}
				}
				if (this.type == 533 && this.localAI[2] >= 40f)
				{
					num *= 0.5f;
				}
				bool flag = !this.npcProj && !this.trap;
				bool flag2 = this.usesOwnerMeleeHitCD && flag && this.owner < 255;
				bool flag3 = this.damage > 0;
				if (flag3)
				{
					int[] array = this.localNPCImmunity;
					if (this.type == 626 || this.type == 627 || this.type == 628)
					{
						Projectile projectile = this.FindStardustDragonHeadOfOwner();
						if (projectile != null)
						{
							array = projectile.localNPCImmunity;
						}
					}
					bool flag4 = true;
					int i = 0;
					while (i < 200 && flag4)
					{
						if (Main.npc[i].active)
						{
							bool flag5 = (!this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity) || (this.usesLocalNPCImmunity && array[i] == 0) || (this.usesIDStaticNPCImmunity && Projectile.IsNPCIndexImmuneToProjectileType(this.type, i));
							if (flag2 && !Main.player[this.owner].CanHitNPCWithMeleeHit(i))
							{
								flag5 = false;
							}
							if ((!Main.npc[i].dontTakeDamage || NPCID.Sets.ZappingJellyfish[Main.npc[i].type]) && flag5 && (Main.npc[i].aiStyle != 112 || Main.npc[i].ai[2] <= 1f))
							{
								bool canHitFlag = false;
								bool? flag29 = CombinedHooks.CanHitNPCWithProj(this, Main.npc[i]);
								if (flag29 != null)
								{
									bool b = flag29.GetValueOrDefault();
									if (!b)
									{
										goto IL_47B6;
									}
									canHitFlag = true;
								}
								Main.npc[i].position += Main.npc[i].netOffset;
								bool flag6 = !Main.npc[i].friendly;
								flag6 |= (this.type == 318);
								flag6 |= (Main.npc[i].type == 22 && this.owner < 255 && Main.player[this.owner].killGuide);
								flag6 |= (Main.npc[i].type == 54 && this.owner < 255 && Main.player[this.owner].killClothier);
								if (this.owner < 255 && !Main.player[this.owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[i], this))
								{
									flag6 = false;
								}
								bool flag7 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
								if (canHitFlag || (this.friendly && (flag6 || NPCID.Sets.ZappingJellyfish[Main.npc[i].type])) || (this.hostile && flag7))
								{
									bool flag8 = this.maxPenetrate == 1 && !this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity;
									if (canHitFlag)
									{
										flag8 = true;
									}
									if (this.owner < 0 || Main.npc[i].immune[this.owner] == 0 || flag8)
									{
										bool flag9 = false;
										if (this.type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
										{
											flag9 = true;
										}
										else if (this.type == 31 && Main.npc[i].type == 69)
										{
											flag9 = true;
										}
										else if (Main.npc[i].trapImmune && this.trap)
										{
											flag9 = true;
										}
										else if (Main.npc[i].immortal && this.npcProj)
										{
											flag9 = true;
										}
										if (canHitFlag)
										{
											flag9 = false;
										}
										if (!flag9 && (Main.npc[i].noTileCollide || !this.ownerHitCheck || this.CanHitWithMeleeWeapon(Main.npc[i])))
										{
											bool flag10;
											if (Main.npc[i].type == 414)
											{
												Rectangle rect = Main.npc[i].getRect();
												int num2 = 8;
												rect.X -= num2;
												rect.Y -= num2;
												rect.Width += num2 * 2;
												rect.Height += num2 * 2;
												flag10 = this.Colliding(rectangle, rect);
											}
											else
											{
												flag10 = this.Colliding(rectangle, Main.npc[i].getRect());
											}
											if (flag10)
											{
												NPC nPC = Main.npc[i];
												if (NPCID.Sets.ZappingJellyfish[nPC.type])
												{
													if ((nPC.dontTakeDamage || !Main.player[this.owner].CanNPCBeHitByPlayerOrPlayerProjectile(nPC, this)) && (this.aiStyle == 19 || this.aiStyle == 161 || this.aiStyle == 75 || this.aiStyle == 140 || ProjectileID.Sets.IsAWhip[this.type] || ProjectileID.Sets.AllowsContactDamageFromJellyfish[this.type]))
													{
														Main.player[this.owner].TakeDamageFromJellyfish(i);
													}
													if (nPC.dontTakeDamage || !flag6)
													{
														goto IL_47B6;
													}
												}
												if (this.type == 876)
												{
													Vector2 vector = this.position;
													if (Main.rand.Next(20) == 0)
													{
														this.tileCollide = false;
														this.position.X = this.position.X + (float)Main.rand.Next(-256, 257);
													}
													if (Main.rand.Next(20) == 0)
													{
														this.tileCollide = false;
														this.position.Y = this.position.Y + (float)Main.rand.Next(-256, 257);
													}
													if (Main.rand.Next(2) == 0)
													{
														this.tileCollide = false;
													}
													if (Main.rand.Next(3) != 0)
													{
														vector = this.position;
														this.position -= this.velocity * (float)Main.rand.Next(0, 40);
														if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
														{
															this.position = vector;
															this.position -= this.velocity * (float)Main.rand.Next(0, 40);
															if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
															{
																this.position = vector;
															}
														}
													}
													this.velocity *= 0.6f;
													if (Main.rand.Next(7) == 0)
													{
														this.velocity.X = this.velocity.X + (float)Main.rand.Next(30, 31) * 0.01f;
													}
													if (Main.rand.Next(7) == 0)
													{
														this.velocity.Y = this.velocity.Y + (float)Main.rand.Next(30, 31) * 0.01f;
													}
													this.damage = (int)((double)this.damage * 0.9);
													this.knockBack *= 0.9f;
													if (Main.rand.Next(20) == 0)
													{
														this.knockBack *= 10f;
													}
													if (Main.rand.Next(50) == 0)
													{
														this.damage *= 10;
													}
													if (Main.rand.Next(7) == 0)
													{
														vector = this.position;
														this.position.X = this.position.X + (float)Main.rand.Next(-64, 65);
														if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
														{
															this.position = vector;
														}
													}
													if (Main.rand.Next(7) == 0)
													{
														vector = this.position;
														this.position.Y = this.position.Y + (float)Main.rand.Next(-64, 65);
														if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
														{
															this.position = vector;
														}
													}
													if (Main.rand.Next(14) == 0)
													{
														this.velocity.X = this.velocity.X * -1f;
													}
													if (Main.rand.Next(14) == 0)
													{
														this.velocity.Y = this.velocity.Y * -1f;
													}
													if (Main.rand.Next(10) == 0)
													{
														this.velocity *= (float)Main.rand.Next(1, 201) * 0.0005f;
													}
													if (this.tileCollide)
													{
														this.ai[1] = 0f;
													}
													else
													{
														this.ai[1] = 1f;
													}
													this.netUpdate = true;
												}
												bool flag11 = nPC.reflectsProjectiles;
												if (Main.getGoodWorld && NPCID.Sets.ReflectStarShotsInForTheWorthy[Main.npc[i].type] && (this.type == 955 || this.type == 728))
												{
													flag11 = true;
												}
												if (flag11 && this.CanBeReflected() && nPC.CanReflectProjectile(this))
												{
													nPC.ReflectProjectile(this);
													Main.npc[i].position -= Main.npc[i].netOffset;
													return;
												}
												if (this.type == 604)
												{
													Main.player[this.owner].Counterweight(nPC.Center, this.damage, this.knockBack);
												}
												NPC.HitModifiers modifiers = nPC.GetIncomingStrikeModifiers(this.DamageType, this.direction, false);
												modifiers.ArmorPenetration += (float)this.ArmorPenetration;
												CombinedHooks.ModifyHitNPCWithProj(this, nPC, ref modifiers);
												float num3 = this.knockBack;
												bool flag12 = false;
												int num4 = (int)(*Main.player[this.owner].armorPenetration);
												float armorPenetrationPercent = 0f;
												bool flag13 = false;
												num50 = this.type;
												if (num50 <= 595)
												{
													if (num50 <= 410)
													{
														if (num50 <= 152)
														{
															if (num50 != 85)
															{
																if (num50 - 150 <= 2)
																{
																	num4 += 10;
																}
															}
															else
															{
																num4 += 15;
															}
														}
														else if (num50 != 189)
														{
															if (num50 == 410)
															{
																if (Main.remixWorld)
																{
																	num4 += 20;
																}
															}
														}
														else
														{
															num4 += 10;
															if (flag && Main.player[this.owner].strongBees)
															{
																modifiers.ArmorPenetration += 5f;
															}
														}
													}
													else if (num50 <= 494)
													{
														if (num50 != 442)
														{
															if (num50 - 493 <= 1)
															{
																num4 += 10;
															}
														}
														else
														{
															flag13 = true;
														}
													}
													else if (num50 != 532)
													{
														if (num50 == 595)
														{
															num4 += 20;
														}
													}
													else
													{
														num4 += 25;
													}
												}
												else if (num50 <= 916)
												{
													if (num50 <= 864)
													{
														if (num50 - 723 > 3)
														{
															if (num50 == 864)
															{
																num4 += 25;
															}
														}
														else
														{
															num4 += 25;
														}
													}
													else if (num50 - 877 > 2)
													{
														if (num50 == 916)
														{
															num4 += 50;
														}
													}
													else
													{
														num3 *= Main.player[this.owner].velocity.Length() / 7f;
													}
												}
												else if (num50 <= 963)
												{
													if (num50 != 917)
													{
														if (num50 == 963)
														{
															num3 *= 0.25f;
														}
													}
													else
													{
														num4 += 30;
													}
												}
												else if (num50 != 964)
												{
													if (num50 != 969)
													{
														switch (num50)
														{
														case 974:
															num4 += 5;
															break;
														case 976:
															num4 += 20;
															break;
														case 977:
															num4 += 5;
															break;
														}
													}
													else
													{
														num4 += 10;
													}
												}
												else
												{
													num4 += 20;
												}
												if (flag13)
												{
													this.Kill();
													return;
												}
												modifiers.SourceDamage *= num;
												float num5 = 1000f;
												int num6 = 0;
												if (this.type > 0 && ProjectileID.Sets.StardustDragon[this.type])
												{
													float value = (this.scale - 1f) * 100f;
													value = Utils.Clamp<float>(value, 0f, 50f);
													num5 = (float)((int)(num5 * (1f + value * 0.23f)));
												}
												if (this.type > 0 && this.type < (int)ProjectileID.Count && ProjectileID.Sets.StormTiger[this.type])
												{
													int num7 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[831] - 1);
													num5 = (float)((int)(num5 * (1f + (float)num7 * 0.4f)));
												}
												if (this.type == 818)
												{
													int num8 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[831] - 1);
													num5 = (float)((int)(num5 * (1.5f + (float)num8 * 0.4f)));
												}
												if (this.type == 963)
												{
													int num9 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[970] - 1);
													int num10 = 3 + num9 / 2;
													if (this.CountEnemiesWhoAreImmuneToMeRightNow(num10) >= num10)
													{
														return;
													}
													float num11 = 0.55f;
													if (Main.hardMode)
													{
														num11 = 1.3f;
													}
													num5 = (float)((int)(num5 * (1f + (float)num9 * num11)));
												}
												if (flag && this.type == 189 && Main.player[this.owner].strongBees)
												{
													modifiers.SourceDamage.Base = modifiers.SourceDamage.Base + 5f;
												}
												if (flag)
												{
													if (this.DamageType.UseStandardCritCalcs && Main.rand.Next(100) < this.CritChance)
													{
														flag12 = true;
													}
													if (this.type - 688 <= 2)
													{
														if (Main.player[this.owner].setMonkT3)
														{
															if (Main.rand.Next(4) == 0)
															{
																flag12 = true;
															}
														}
														else if (Main.player[this.owner].setMonkT2 && Main.rand.Next(6) == 0)
														{
															flag12 = true;
														}
													}
												}
												modifiers.SourceDamage *= num5 / 1000f;
												num5 = modifiers.SourceDamage.ApplyTo((float)this.damage);
												float num12 = ProjectileID.Sets.SummonTagDamageMultiplier[this.type];
												if (flag && (this.minion || ProjectileID.Sets.MinionShot[this.type] || this.sentry || ProjectileID.Sets.SentryShot[this.type]))
												{
													bool flag14 = false;
													bool flag15 = false;
													bool flag16 = false;
													bool flag17 = false;
													bool flag18 = false;
													bool flag19 = false;
													bool flag20 = false;
													bool flag21 = false;
													bool flag22 = false;
													for (int j = 0; j < NPC.maxBuffs; j++)
													{
														if (nPC.buffTime[j] >= 1)
														{
															num50 = nPC.buffType[j];
															switch (num50)
															{
															case 307:
																flag14 = true;
																break;
															case 308:
															case 311:
															case 312:
															case 314:
															case 317:
															case 318:
																break;
															case 309:
																flag15 = true;
																break;
															case 310:
																flag17 = true;
																break;
															case 313:
																flag16 = true;
																break;
															case 315:
																flag18 = true;
																break;
															case 316:
																flag22 = true;
																break;
															case 319:
																flag21 = true;
																break;
															default:
																if (num50 != 326)
																{
																	if (num50 == 340)
																	{
																		flag20 = true;
																	}
																}
																else
																{
																	flag19 = true;
																}
																break;
															}
														}
													}
													if (flag14)
													{
														num6 += 4;
													}
													if (flag18)
													{
														num6 += 6;
													}
													if (flag19)
													{
														num6 += 7;
													}
													if (flag20)
													{
														num6 += 6;
													}
													if (flag15)
													{
														num6 += 9;
													}
													if (flag21)
													{
														num6 += 8;
														if (Main.rand.Next(100) < 12)
														{
															flag12 = true;
														}
													}
													if (flag17)
													{
														int num13 = 10;
														num6 += num13;
														int num14 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 916, (int)((float)num13 * num12), 0f, this.owner, 0f, 0f, 0f);
														Main.projectile[num14].localNPCImmunity[i] = -1;
														Projectile.EmitBlackLightningParticles(nPC);
													}
													if (flag22)
													{
														int num15 = 20;
														num6 += num15;
														if (Main.rand.Next(10) == 0)
														{
															flag12 = true;
														}
														ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings
														{
															PositionInWorld = base.Center
														}, null);
													}
													if (flag16)
													{
														nPC.RequestBuffRemoval(313);
														int num16 = (int)(num5 * 1.75f);
														int num17 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 918, num16, 0f, this.owner, 0f, 0f, 0f);
														Main.projectile[num17].localNPCImmunity[i] = -1;
														modifiers.ScalingBonusDamage += 1.75f * num12;
													}
												}
												num6 = (int)((float)num6 * num12);
												modifiers.FlatBonusDamage += (float)num6;
												if (flag)
												{
													float luck = Main.player[this.owner].luck;
												}
												float num18 = 1000f;
												if (this.type == 1002)
												{
													num18 /= 2f;
												}
												if (this.trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[nPC.type])
												{
													num18 /= 2f;
												}
												if (this.type == 482 && (nPC.aiStyle == 6 || nPC.aiStyle == 37))
												{
													num18 /= 2f;
												}
												if (flag)
												{
													Vector2 positionInWorld = Main.rand.NextVector2FromRectangle(nPC.Hitbox);
													ParticleOrchestraSettings settings = new ParticleOrchestraSettings
													{
														PositionInWorld = positionInWorld
													};
													num50 = this.type;
													if (num50 != 972)
													{
														if (num50 != 973)
														{
															switch (num50)
															{
															case 982:
																ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.Excalibur, settings, new int?(this.owner));
																break;
															case 983:
																ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TrueExcalibur, settings, new int?(this.owner));
																break;
															case 984:
															case 985:
																settings.MovementVector = this.velocity;
																ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TerraBlade, settings, new int?(this.owner));
																break;
															}
														}
														else
														{
															ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TrueNightsEdge, settings, new int?(this.owner));
														}
													}
													else
													{
														ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.NightsEdge, settings, new int?(this.owner));
													}
												}
												if (this.type == 604)
												{
													this.friendly = false;
													this.ai[1] = 1000f;
												}
												if ((this.type == 400 || this.type == 401 || this.type == 402) && nPC.type >= 13 && nPC.type <= 15)
												{
													num18 = (float)((int)((double)num18 * 0.65));
													if (this.penetrate > 1)
													{
														this.penetrate--;
													}
												}
												Point point;
												if (this.type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), new GenCondition[]
												{
													Projectile._cachedConditions_notNull,
													Projectile._cachedConditions_solid
												}), out point))
												{
													num18 = (float)((int)(num18 * 1.5f));
												}
												if (this.type == 504 || this.type == 954 || this.type == 979)
												{
													float num19 = (60f - this.ai[0]) / 2f;
													this.ai[0] += num19;
												}
												if (this.aiStyle == 3 && this.type != 301 && this.type != 866 && this.type != 902)
												{
													if (this.ai[0] == 0f)
													{
														if (this.type == 106)
														{
															this.LightDisc_Bounce(base.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 8f, (-this.velocity).SafeNormalize(Vector2.UnitX));
														}
														this.velocity.X = 0f - this.velocity.X;
														this.velocity.Y = 0f - this.velocity.Y;
														this.netUpdate = true;
													}
													this.ai[0] = 1f;
												}
												else if (this.type == 951)
												{
													Vector2 vector2 = (nPC.Center - base.Center).SafeNormalize(Vector2.Zero);
													vector2.X += (-0.5f + Main.rand.NextFloat()) * 13f;
													vector2.Y = -5f;
													this.velocity.X = vector2.X;
													this.velocity.Y = vector2.Y;
													this.netUpdate = true;
												}
												else if (this.type == 582 || this.type == 902)
												{
													if (this.ai[0] != 0f)
													{
														this.direction *= -1;
													}
												}
												else if (this.type == 612 || this.type == 953 || this.type == 978)
												{
													this.direction = Main.player[this.owner].direction;
												}
												else if (this.type == 624)
												{
													float num20 = 1f;
													if (nPC.knockBackResist > 0f)
													{
														num20 = 1f / nPC.knockBackResist;
													}
													this.knockBack = 4f * num20;
													num3 = this.knockBack;
													if (nPC.Center.X < base.Center.X)
													{
														this.direction = 1;
													}
													else
													{
														this.direction = -1;
													}
												}
												else if (this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type])
												{
													if (this.timeLeft > 3)
													{
														this.timeLeft = 3;
													}
													if (nPC.position.X + (float)(nPC.width / 2) < this.position.X + (float)(this.width / 2))
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
												}
												else if (this.aiStyle == 68)
												{
													if (this.timeLeft > 3)
													{
														this.timeLeft = 3;
													}
													if (nPC.position.X + (float)(nPC.width / 2) < this.position.X + (float)(this.width / 2))
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
												}
												else if (this.aiStyle == 50)
												{
													if (nPC.position.X + (float)(nPC.width / 2) < this.position.X + (float)(this.width / 2))
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
												}
												else if (this.type == 908)
												{
													if (nPC.position.X + (float)(nPC.width / 2) < this.position.X + (float)(this.width / 2))
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
												}
												if (this.type == 509)
												{
													int num21 = Main.rand.Next(2, 6);
													for (int k = 0; k < num21; k++)
													{
														Vector2 vector3;
														vector3..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
														vector3 += this.velocity * 3f;
														vector3.Normalize();
														vector3 *= (float)Main.rand.Next(35, 81) * 0.1f;
														int num22 = (int)((double)this.damage * 0.5);
														Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector3.X, vector3.Y, 504, num22, this.knockBack * 0.2f, this.owner, 0f, 0f, 0f);
													}
												}
												if ((this.type == 476 || this.type == 950) && !this.npcProj)
												{
													float x = Main.player[this.owner].Center.X;
													if (nPC.Center.X < x)
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
												}
												if (this.type == 598 || this.type == 636 || this.type == 614 || this.type == 971 || this.type == 975)
												{
													this.ai[0] = 1f;
													this.ai[1] = (float)i;
													this.velocity = (nPC.Center - base.Center) * 0.75f;
													this.netUpdate = true;
												}
												if (this.type >= 511 && this.type <= 513)
												{
													this.ai[1] += 1f;
													this.netUpdate = true;
												}
												if (this.type == 659)
												{
													this.timeLeft = 0;
												}
												if (this.type == 524)
												{
													this.netUpdate = true;
													this.ai[0] += 50f;
												}
												if ((this.type == 688 || this.type == 689 || this.type == 690) && nPC.type != 68 && nPC.defense < 999)
												{
													armorPenetrationPercent = 1f;
												}
												if (this.aiStyle == 39)
												{
													if (this.ai[1] == 0f)
													{
														this.ai[1] = (float)(i + 1);
														this.netUpdate = true;
													}
													if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2))
													{
														this.direction = 1;
													}
													else
													{
														this.direction = -1;
													}
												}
												if (this.type == 41 && this.timeLeft > 1)
												{
													this.timeLeft = 1;
												}
												if (this.aiStyle == 99)
												{
													Main.player[this.owner].Counterweight(nPC.Center, this.damage, this.knockBack);
													if (nPC.Center.X < Main.player[this.owner].Center.X)
													{
														this.direction = -1;
													}
													else
													{
														this.direction = 1;
													}
													if (this.ai[0] >= 0f)
													{
														Vector2 vector4 = base.Center - nPC.Center;
														vector4.Normalize();
														float num23 = 16f;
														this.velocity *= -0.5f;
														this.velocity += vector4 * num23;
														this.netUpdate = true;
														this.localAI[0] += 20f;
														if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
														{
															this.localAI[0] += 40f;
															num18 = (float)((int)((double)num18 * 0.75));
														}
													}
												}
												if (this.type == 856 && !Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
												{
													num18 = (float)((int)((double)num18 * 0.75));
												}
												if (this.aiStyle == 93)
												{
													if (this.ai[0] == 0f)
													{
														this.ai[1] = 0f;
														int num24 = -i - 1;
														this.ai[0] = (float)num24;
														this.velocity = nPC.Center - base.Center;
													}
													num18 = (float)((this.ai[0] != 2f) ? ((int)((double)num18 * 0.15)) : ((int)((double)num18 * 1.35)));
												}
												if (flag)
												{
													int num25 = Item.NPCtoBanner(nPC.BannerID());
													if (num25 >= 0)
													{
														Main.player[Main.myPlayer].lastCreatureHit = num25;
													}
												}
												if (Main.netMode != 2 && flag)
												{
													Main.player[this.owner].ApplyBannerOffenseBuff(nPC, ref modifiers);
												}
												if (Main.expertMode)
												{
													if ((this.type == 30 || this.type == 397 || this.type == 517 || this.type == 28 || this.type == 37 || this.type == 516 || this.type == 29 || this.type == 470 || this.type == 637 || this.type == 108 || this.type == 281 || this.type == 588 || this.type == 519 || this.type == 773 || this.type == 183 || this.type == 181 || this.type == 566 || this.type == 1002) && nPC.type >= 13 && nPC.type <= 15)
													{
														num18 /= 5f;
													}
													if (this.type == 280 && ((nPC.type >= 134 && nPC.type <= 136) || nPC.type == 139))
													{
														num18 = (float)((int)((double)num18 * 0.75));
													}
												}
												if (Main.netMode != 2 && nPC.type == 439 && this.type >= 0 && ProjectileID.Sets.CultistIsResistantTo[this.type])
												{
													num18 = (float)((int)(num18 * 0.75f));
												}
												if (this.type == 497 && this.penetrate != 1)
												{
													this.ai[0] = 25f;
													float num26 = this.velocity.Length();
													Vector2 vector5 = nPC.Center - base.Center;
													vector5.Normalize();
													vector5 *= num26;
													this.velocity = -vector5 * 0.9f;
													this.netUpdate = true;
												}
												if (this.type == 323 && (nPC.type == 159 || nPC.type == 158))
												{
													num18 *= 10f;
												}
												if (this.type == 981 && nPC.type == 104)
												{
													num18 *= 3f;
												}
												if (this.type == 261 && this.velocity.Length() < 3.5f)
												{
													modifiers.SourceDamage /= 2f;
													num3 /= 2f;
												}
												if (flag && this.melee && Main.player[this.owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[this.type])
												{
													modifiers.ScalingBonusDamage += 4f;
													Main.player[this.owner].parryDamageBuff = false;
													Main.player[this.owner].ClearBuff(198);
												}
												int? num27 = null;
												num50 = this.type;
												if (num50 <= 699)
												{
													if (num50 == 697 || num50 == 699)
													{
														goto IL_3052;
													}
												}
												else if (num50 - 707 <= 1 || num50 == 759)
												{
													goto IL_3052;
												}
												IL_3081:
												if (this.aiStyle == 188 || this.aiStyle == 189 || this.aiStyle == 190 || this.aiStyle == 191)
												{
													num27 = new int?((Main.player[this.owner].Center.X < nPC.Center.X) ? 1 : -1);
												}
												if (this.aiStyle == 15)
												{
													num27 = new int?((Main.player[this.owner].Center.X < nPC.Center.X) ? 1 : -1);
													if (this.ai[0] == 0f)
													{
														num3 *= 0.35f;
													}
													if (this.ai[0] == 6f)
													{
														num3 *= 0.5f;
													}
												}
												modifiers.ScalingArmorPenetration += armorPenetrationPercent;
												modifiers.Knockback *= num3 / this.knockBack;
												modifiers.TargetDamageMultiplier *= num18 / 1000f;
												if (num27 != null)
												{
													modifiers.HitDirectionOverride = num27;
												}
												NPC.HitInfo strike = modifiers.ToHitInfo((float)this.damage, flag12, num3, true, flag ? Main.player[this.owner].luck : 0f);
												num27 = new int?(strike.HitDirection);
												if (this.type == 294)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 265)
												{
													this.damage = (int)((double)this.damage * 0.75);
												}
												if (this.type == 355)
												{
													this.damage = (int)((double)this.damage * 0.75);
												}
												if (this.type == 114)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 76 || this.type == 78 || this.type == 77)
												{
													this.damage = (int)((double)this.damage * 0.95);
												}
												if (this.type == 85)
												{
													this.damage = (int)((double)this.damage * 0.85);
												}
												if (this.type == 866)
												{
													this.damage = (int)((double)this.damage * 0.8);
												}
												if (this.type == 841)
												{
													this.damage = (int)((double)this.damage * 0.5);
												}
												if (this.type == 914)
												{
													this.damage = (int)((double)this.damage * 0.6);
												}
												if (this.type == 952)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 913)
												{
													this.damage = (int)((double)this.damage * 0.66);
												}
												if (this.type == 912)
												{
													this.damage = (int)((double)this.damage * 0.7);
												}
												if (this.type == 847)
												{
													this.damage = (int)((double)this.damage * 0.8);
												}
												if (this.type == 848)
												{
													this.damage = (int)((double)this.damage * 0.95);
												}
												if (this.type == 849)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 915)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 931)
												{
													this.damage = (int)((double)this.damage * 0.8);
												}
												if (this.type == 242)
												{
													this.damage = (int)((double)this.damage * 0.85);
												}
												if (this.type == 323)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 5)
												{
													this.damage = (int)((double)this.damage * 0.9);
												}
												if (this.type == 4)
												{
													this.damage = (int)((double)this.damage * 0.95);
												}
												if (this.type == 309)
												{
													this.damage = (int)((double)this.damage * 0.85);
												}
												if (this.type == 132)
												{
													this.damage = (int)((double)this.damage * 0.85);
												}
												if (this.type == 985)
												{
													this.damage = (int)((double)this.damage * 0.75);
												}
												if (this.type == 950)
												{
													this.damage = (int)((double)this.damage * 0.98);
												}
												if (this.type == 964)
												{
													this.damage = (int)((double)this.damage * 0.85);
												}
												if (this.type == 477 && this.penetrate > 1)
												{
													int[] array2 = new int[10];
													int num28 = 0;
													int num29 = 700;
													int num30 = 20;
													for (int l = 0; l < 200; l++)
													{
														if (l != i && Main.npc[l].CanBeChasedBy(this, false))
														{
															float num31 = (base.Center - Main.npc[l].Center).Length();
															if (num31 > (float)num30 && num31 < (float)num29 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[l].Center, 1, 1))
															{
																array2[num28] = l;
																num28++;
																if (num28 >= 9)
																{
																	break;
																}
															}
														}
													}
													if (num28 > 0)
													{
														num28 = Main.rand.Next(num28);
														Vector2 vector6 = Main.npc[array2[num28]].Center - base.Center;
														float num32 = this.velocity.Length();
														vector6.Normalize();
														this.velocity = vector6 * num32;
														this.netUpdate = true;
													}
												}
												this.StatusNPC(i);
												if (flag && nPC.life > 5)
												{
													this.TryDoingOnHitEffects(nPC);
												}
												if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[this.type])
												{
													nPC.UpdateNPC_BuffSetFlags(false);
												}
												if (this.type == 317)
												{
													this.ai[1] = -1f;
													this.netUpdate = true;
												}
												NPCKillAttempt attempt = new NPCKillAttempt(nPC);
												int num33 = nPC.StrikeNPC(strike, false, !flag);
												if (flag && attempt.DidNPCDie())
												{
													Main.player[this.owner].OnKillNPC(ref attempt, this);
												}
												if (flag && Main.player[this.owner].accDreamCatcher && !nPC.HideStrikeDamage)
												{
													Main.player[this.owner].addDPS(num33);
												}
												bool flag23 = !nPC.immortal;
												bool flag24 = num33 > 0 && nPC.lifeMax > 5 && this.friendly && !this.hostile && this.aiStyle != 59;
												bool flag25 = false;
												if (flag23 && this.active && this.timeLeft > 10 && nPC.active && nPC.type == 676 && this.CanBeReflected())
												{
													nPC.ReflectProjectile(this);
													this.penetrate++;
												}
												if (flag && flag23)
												{
													if (this.type == 997 && (!nPC.immortal || flag25) && !nPC.SpawnedFromStatue && !NPCID.Sets.CountsAsCritter[nPC.type])
													{
														Main.player[this.owner].HorsemansBlade_SpawnPumpkin(i, (int)((float)this.damage * 1f), this.knockBack);
													}
													if (this.type == 756 && this.penetrate == 1)
													{
														this.damage = 0;
														this.penetrate = -1;
														flag4 = false;
													}
													if ((flag25 || nPC.value > 0f) && Main.player[this.owner].hasLuckyCoin && Main.rand.Next(5) == 0)
													{
														int num34 = 71;
														if (Main.rand.Next(10) == 0)
														{
															num34 = 72;
														}
														if (Main.rand.Next(100) == 0)
														{
															num34 = 73;
														}
														int num35 = Item.NewItem(this.GetItemSource_OnHit(nPC, 2), (int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num34, 1, false, 0, false, false);
														Main.item[num35].stack = Main.rand.Next(1, 11);
														Main.item[num35].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
														Main.item[num35].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num27.Value;
														Main.item[num35].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
														if (Main.netMode == 1)
														{
															NetMessage.SendData(148, -1, -1, null, num35, 0f, 0f, 0f, 0, 0, 0);
														}
													}
													if (this.type == 999 && this.owner == Main.myPlayer && Main.rand.Next(3) == 0)
													{
														Player player = Main.player[this.owner];
														Vector2 vector7 = (base.Center - nPC.Center).SafeNormalize(Vector2.Zero) * 0.25f;
														int dmg = this.damage / 2;
														float kB = this.knockBack;
														int num36 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector7.X, vector7.Y, player.beeType(), player.beeDamage(dmg), player.beeKB(kB), this.owner, 0f, 0f, 0f);
														Main.projectile[num36].melee = true;
													}
													if (flag24)
													{
														if (this.type == 304 && !Main.player[this.owner].moonLeech)
														{
															this.vampireHeal(num33, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
														}
														if (nPC.canGhostHeal || flag25)
														{
															if (Main.player[this.owner].ghostHeal && !Main.player[this.owner].moonLeech)
															{
																this.ghostHeal(num33, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
															}
															if (Main.player[this.owner].ghostHurt)
															{
																this.ghostHurt(num33, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
															}
															if (this.magic && Main.player[this.owner].setNebula && Main.player[this.owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
															{
																Main.player[this.owner].nebulaCD = 30;
																int num37 = Utils.SelectRandom<int>(Main.rand, new int[]
																{
																	3453,
																	3454,
																	3455
																});
																int num38 = Item.NewItem(this.GetItemSource_OnHit(nPC, 1), (int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num37, 1, false, 0, false, false);
																Main.item[num38].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
																Main.item[num38].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num27.Value;
																if (Main.netMode == 1)
																{
																	NetMessage.SendData(21, -1, -1, null, num38, 0f, 0f, 0f, 0, 0, 0);
																}
															}
														}
														if (this.melee && Main.player[this.owner].beetleOffense && (!nPC.immortal || flag25))
														{
															if (Main.player[this.owner].beetleOrbs == 0)
															{
																Main.player[this.owner].beetleCounter += (float)(num33 * 3);
															}
															else if (Main.player[this.owner].beetleOrbs == 1)
															{
																Main.player[this.owner].beetleCounter += (float)(num33 * 2);
															}
															else
															{
																Main.player[this.owner].beetleCounter += (float)num33;
															}
															Main.player[this.owner].beetleCountdown = 0;
														}
														if (this.arrow && this.type != 631 && Main.player[this.owner].phantasmTime > 0)
														{
															Vector2 source = Main.player[this.owner].position + Main.player[this.owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
															Vector2 vector8 = nPC.DirectionFrom(source) * 6f;
															int num39 = (int)((float)this.damage * 0.3f);
															Projectile.NewProjectile(this.GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num39, 0f, this.owner, (float)i, 0f, 0f);
															Projectile.NewProjectile(this.GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num39, 0f, this.owner, (float)i, 15f, 0f);
															Projectile.NewProjectile(this.GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num39, 0f, this.owner, (float)i, 30f, 0f);
														}
														Player player2 = Main.player[this.owner];
														num50 = this.type;
														if (num50 <= 849)
														{
															if (num50 != 847)
															{
																if (num50 == 849)
																{
																	player2.AddBuff(311, 180, true, false);
																}
															}
															else
															{
																player2.AddBuff(308, 180, true, false);
															}
														}
														else if (num50 != 912)
														{
															if (num50 == 914)
															{
																player2.AddBuff(314, 180, true, false);
															}
														}
														else
														{
															int num40 = 15;
															if (!player2.coolWhipBuff)
															{
																Projectile.NewProjectile(this.GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 917, num40, 0f, this.owner, 0f, 0f, 0f);
																player2.coolWhipBuff = true;
															}
															player2.AddBuff(312, 180, true, false);
														}
													}
												}
												if (flag && (this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant == 7)
												{
													Projectile.NewProjectile(this.GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, nPC.velocity.X, nPC.velocity.Y, 289, 0, 0f, this.owner, 0f, 0f, 0f);
												}
												if (flag && this.type == 913)
												{
													this.localAI[0] = 1f;
												}
												if (Main.netMode != 0)
												{
													NetMessage.SendStrikeNPC(nPC, strike, -1);
												}
												if (this.type == 916)
												{
													Projectile.EmitBlackLightningParticles(nPC);
												}
												if (this.type >= 390 && this.type <= 392)
												{
													this.localAI[1] = 20f;
												}
												if (this.usesIDStaticNPCImmunity)
												{
													if (this.penetrate != 1 || this.appliesImmunityTimeOnSingleHits)
													{
														nPC.immune[this.owner] = 0;
														Projectile.perIDStaticNPCImmunity[this.type][i] = Main.GameUpdateCount + (uint)this.idStaticNPCHitCooldown;
													}
												}
												else if (this.type == 434)
												{
													this.numUpdates = 0;
												}
												else if (this.type == 598 || this.type == 636 || this.type == 614)
												{
													Point[] bufferForScan = Projectile._javelinsMax6;
													if (this.type == 636)
													{
														bufferForScan = Projectile._javelinsMax8;
													}
													if (this.type == 614)
													{
														bufferForScan = Projectile._javelinsMax10;
													}
													Projectile.KillOldestJavelin(this.whoAmI, this.type, i, bufferForScan);
												}
												else if (this.type == 632)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 514)
												{
													nPC.immune[this.owner] = 1;
												}
												else if (this.type == 611)
												{
													if (this.localAI[1] <= 0f)
													{
														Main.projectile[Projectile.NewProjectile(this.GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, 0f, 0f, 612, this.damage, 10f, this.owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f, 0f)].CritChance = 0;
													}
													this.localAI[1] = 4f;
												}
												else if (this.type == 595 || this.type == 735)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 927)
												{
													nPC.immune[this.owner] = 4;
												}
												else if (this.type == 286)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 443)
												{
													nPC.immune[this.owner] = 8;
												}
												else if (this.type >= 424 && this.type <= 426)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 634 || this.type == 635)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 659)
												{
													nPC.immune[this.owner] = 5;
												}
												else if (this.type == 246)
												{
													nPC.immune[this.owner] = 7;
												}
												else if (this.type == 249)
												{
													nPC.immune[this.owner] = 7;
												}
												else if (this.type == 16)
												{
													nPC.immune[this.owner] = 8;
												}
												else if (this.type == 409)
												{
													nPC.immune[this.owner] = 6;
												}
												else if (this.type == 311)
												{
													nPC.immune[this.owner] = 7;
												}
												else if (this.type == 582 || this.type == 902)
												{
													nPC.immune[this.owner] = 7;
													if (this.ai[0] != 1f)
													{
														this.ai[0] = 1f;
														this.netUpdate = true;
													}
												}
												else
												{
													if (this.type == 451)
													{
														if (this.ai[0] == 0f)
														{
															this.ai[0] += (float)this.penetrate;
														}
														else
														{
															this.ai[0] -= (float)(this.penetrate + 1);
														}
														this.ai[1] = 0f;
														this.netUpdate = true;
														Main.npc[i].position -= Main.npc[i].netOffset;
														break;
													}
													if (this.type == 864)
													{
														array[i] = 10;
														nPC.immune[this.owner] = 0;
														if (this.ai[0] > 0f)
														{
															this.ai[0] = -1f;
															this.ai[1] = 0f;
															this.netUpdate = true;
														}
													}
													else if (this.type == 661 || this.type == 856)
													{
														array[i] = 8;
														nPC.immune[this.owner] = 0;
													}
													else if (this.type == 866)
													{
														array[i] = -1;
														nPC.immune[this.owner] = 0;
														this.penetrate--;
														if (this.penetrate == 0)
														{
															this.penetrate = 1;
															this.damage = 0;
															this.ai[1] = -1f;
															this.netUpdate = true;
															Main.npc[i].position -= Main.npc[i].netOffset;
															break;
														}
														if (this.owner == Main.myPlayer)
														{
															int num41 = this.FindTargetWithLineOfSight(800f);
															float num42 = this.ai[1];
															this.ai[1] = (float)num41;
															if (this.ai[1] != num42)
															{
																this.netUpdate = true;
															}
															if (num41 != -1)
															{
																this.velocity = this.velocity.Length() * base.DirectionTo(Main.npc[num41].Center);
															}
														}
													}
													else if (this.usesLocalNPCImmunity && this.localNPCHitCooldown != -2)
													{
														nPC.immune[this.owner] = 0;
														array[i] = this.localNPCHitCooldown;
													}
													else if (this.penetrate != 1 || this.appliesImmunityTimeOnSingleHits)
													{
														nPC.immune[this.owner] = 10;
													}
												}
												if (this.type == 710)
												{
													this.BetsySharpnel(i);
												}
												CombinedHooks.OnHitNPCWithProj(this, nPC, strike, num33);
												if (this.penetrate > 0 && this.type != 317 && this.type != 866)
												{
													if (this.type == 357)
													{
														this.damage = (int)((double)this.damage * 0.8);
													}
													this.penetrate--;
													if (this.penetrate == 0)
													{
														Main.npc[i].position -= Main.npc[i].netOffset;
														if (this.stopsDealingDamageAfterPenetrateHits)
														{
															this.penetrate = -1;
															this.damage = 0;
														}
														flag4 = false;
													}
												}
												if (this.aiStyle == 7)
												{
													this.ai[0] = 1f;
													this.damage = 0;
													this.netUpdate = true;
												}
												else if (this.aiStyle == 13)
												{
													this.ai[0] = 1f;
													this.netUpdate = true;
												}
												else if (this.aiStyle == 69)
												{
													this.ai[0] = 1f;
													this.netUpdate = true;
												}
												else if (this.type == 607)
												{
													this.ai[0] = 1f;
													this.netUpdate = true;
													this.friendly = false;
												}
												else if (this.type == 638 || this.type == 639 || this.type == 640)
												{
													array[i] = -1;
													nPC.immune[this.owner] = 0;
													this.damage = (int)((double)this.damage * 0.96);
												}
												else if (this.type == 617)
												{
													array[i] = 8;
													nPC.immune[this.owner] = 0;
												}
												else if (this.type == 656)
												{
													array[i] = 8;
													nPC.immune[this.owner] = 0;
													this.localAI[0] += 1f;
												}
												else if (this.type == 618)
												{
													array[i] = 20;
													nPC.immune[this.owner] = 0;
												}
												else if (this.type == 642)
												{
													array[i] = 10;
													nPC.immune[this.owner] = 0;
												}
												else if (this.type == 857)
												{
													array[i] = 10;
													nPC.immune[this.owner] = 0;
												}
												else if (this.type == 611 || this.type == 612)
												{
													array[i] = 6;
													nPC.immune[this.owner] = 4;
												}
												else if (this.type == 645)
												{
													array[i] = -1;
													nPC.immune[this.owner] = 0;
													if (this.ai[1] != -1f)
													{
														this.ai[0] = 0f;
														this.ai[1] = -1f;
														this.netUpdate = true;
													}
												}
												this.numHits++;
												if (this.type == 697)
												{
													if (this.ai[0] >= 42f)
													{
														this.localAI[1] = 1f;
													}
												}
												else if (this.type == 699)
												{
													this.SummonMonkGhast();
												}
												else if (this.type == 706)
												{
													this.damage = (int)((float)this.damage * 0.95f);
												}
												else if (this.type == 728)
												{
													this.SummonSuperStarSlash(nPC.Center);
												}
												else if (this.type == 34)
												{
													if (this.ai[0] == -1f)
													{
														this.ai[1] = -1f;
														this.netUpdate = true;
													}
												}
												else if (this.type == 79)
												{
													if (this.ai[0] == -1f)
													{
														this.ai[1] = -1f;
														this.netUpdate = true;
													}
													ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings
													{
														PositionInWorld = nPC.Center,
														MovementVector = this.velocity
													}, null);
												}
												else if (this.type == 931)
												{
													int num43 = this.FindTargetWithLineOfSight(800f);
													if (num43 != -1)
													{
														this.ai[0] = (float)num43;
														this.netUpdate = true;
													}
												}
												else if (this.aiStyle == 165)
												{
													if (nPC.active)
													{
														Main.player[this.owner].MinionAttackTargetNPC = i;
													}
												}
												else if (this.type == 623)
												{
													ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.StardustPunch, new ParticleOrchestraSettings
													{
														PositionInWorld = Vector2.Lerp(base.Center, nPC.Hitbox.ClosestPointInRect(base.Center), 0.5f) + new Vector2(0f, Main.rand.NextFloatDirection() * 10f),
														MovementVector = new Vector2((float)this.direction, Main.rand.NextFloatDirection() * 0.5f) * (3f + 3f * Main.rand.NextFloat())
													}, null);
												}
												if (flag2)
												{
													Main.player[this.owner].SetMeleeHitCooldown(i, Main.player[this.owner].itemAnimation);
													goto IL_4791;
												}
												goto IL_4791;
												IL_3052:
												num27 = new int?((Main.player[this.owner].Center.X < nPC.Center.X) ? 1 : -1);
												goto IL_3081;
											}
										}
									}
								}
								IL_4791:
								Main.npc[i].position -= Main.npc[i].netOffset;
							}
						}
						IL_47B6:
						i++;
					}
				}
				if (flag3 && Main.player[Main.myPlayer].hostile)
				{
					for (int m = 0; m < 255; m++)
					{
						if (m != this.owner)
						{
							Player player3 = Main.player[m];
							if (player3.active && !player3.dead && !player3.immune && player3.hostile && this.playerImmune[m] <= 0 && (Main.player[Main.myPlayer].team == 0 || Main.player[Main.myPlayer].team != player3.team))
							{
								bool flag26 = !this.ownerHitCheck;
								if (this.ownerHitCheck)
								{
									flag26 |= this.CanHitWithMeleeWeapon(player3);
								}
								if (flag26 && this.Colliding(rectangle, player3.getRect()) && CombinedHooks.CanHitPvpWithProj(this, player3))
								{
									if (this.aiStyle == 3)
									{
										if (this.ai[0] == 0f)
										{
											this.velocity.X = 0f - this.velocity.X;
											this.velocity.Y = 0f - this.velocity.Y;
											this.netUpdate = true;
										}
										this.ai[0] = 1f;
									}
									else if (this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type])
									{
										if (this.timeLeft > 3)
										{
											this.timeLeft = 3;
										}
										if (player3.position.X + (float)(player3.width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
									else if (this.aiStyle == 68)
									{
										if (this.timeLeft > 3)
										{
											this.timeLeft = 3;
										}
										if (player3.position.X + (float)(player3.width / 2) < this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
									int playerIndex = this.owner;
									if (ProjectileID.Sets.IsAGravestone[this.type])
									{
										playerIndex = (int)this.ai[0];
									}
									PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(playerIndex, this.whoAmI);
									if (this.type == 41 && this.timeLeft > 1)
									{
										this.timeLeft = 1;
									}
									bool flag27 = false;
									int num44 = Main.DamageVar((float)((int)((float)this.damage * num)), Main.player[this.owner].luck);
									bool dodgeable = this.IsDamageDodgable();
									if (!player3.immune)
									{
										this.StatusPvP(m);
									}
									this.TryDoingOnHitEffects(player3);
									int num45 = (int)player3.Hurt(playerDeathReason, num44, this.direction, true, false, flag27, -1, dodgeable, 0f);
									if (num45 > 0 && Main.player[this.owner].ghostHeal && this.friendly && !this.hostile)
									{
										this.ghostHeal(num45, new Vector2(player3.Center.X, player3.Center.Y), player3);
									}
									if (this.type == 304 && num45 > 0)
									{
										this.vampireHeal(num45, new Vector2(player3.Center.X, player3.Center.Y), player3);
									}
									if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant == 7)
									{
										Projectile.NewProjectile(this.GetProjectileSource_FromThis(), player3.Center.X, player3.Center.Y, player3.velocity.X, player3.velocity.Y, 289, 0, 0f, this.owner, 0f, 0f, 0f);
									}
									if (Main.netMode != 0)
									{
										NetMessage.SendPlayerHurt(m, playerDeathReason, num44, this.direction, flag27, true, -1, -1, -1);
									}
									this.playerImmune[m] = 40;
									if (this.penetrate > 0)
									{
										this.penetrate--;
										if (this.penetrate == 0)
										{
											break;
										}
									}
									if (this.aiStyle == 7)
									{
										this.ai[0] = 1f;
										this.damage = 0;
										this.netUpdate = true;
									}
									else if (this.aiStyle == 13)
									{
										this.ai[0] = 1f;
										this.netUpdate = true;
									}
									else if (this.aiStyle == 69)
									{
										this.ai[0] = 1f;
										this.netUpdate = true;
									}
								}
							}
						}
					}
				}
			}
			if (this.type == 10 && Main.netMode != 1)
			{
				for (int n = 0; n < 200; n++)
				{
					NPC nPC2 = Main.npc[n];
					if (nPC2.active)
					{
						if (nPC2.type == 534)
						{
							if (rectangle.Intersects(nPC2.Hitbox))
							{
								nPC2.Transform(441);
							}
						}
						else if (nPC2.type == 687 && rectangle.Intersects(nPC2.Hitbox))
						{
							nPC2.Transform(683);
							Vector2 vector9 = nPC2.Center - new Vector2(20f);
							Utils.PoofOfSmoke(vector9);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(106, -1, -1, null, (int)vector9.X, vector9.Y, 0f, 0f, 0, 0, 0);
							}
							if (!NPC.unlockedSlimeYellowSpawn)
							{
								NPC.unlockedSlimeYellowSpawn = true;
								if (Main.netMode == 2)
								{
									NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
			if ((this.type == 11 || this.type == 463) && Main.netMode != 1)
			{
				bool crimson = this.type == 463;
				for (int num46 = 0; num46 < 200; num46++)
				{
					if (Main.npc[num46].active)
					{
						Rectangle value2;
						value2..ctor((int)Main.npc[num46].position.X, (int)Main.npc[num46].position.Y, Main.npc[num46].width, Main.npc[num46].height);
						if (rectangle.Intersects(value2))
						{
							Main.npc[num46].AttemptToConvertNPCToEvil(crimson);
						}
					}
				}
			}
			if (Main.netMode == 2 || !this.hostile || Main.myPlayer >= 255 || this.damage <= 0)
			{
				return;
			}
			int num47 = -1;
			num50 = this.type;
			if (num50 <= 462)
			{
				if (num50 == 452 || num50 - 454 <= 1 || num50 == 462)
				{
					num47 = 1;
				}
			}
			else if (num50 - 871 <= 3 || num50 == 919 || num50 - 923 <= 1)
			{
				num47 = 1;
			}
			if (this.ModProjectile != null)
			{
				num47 = this.ModProjectile.CooldownSlot;
			}
			int myPlayer = Main.myPlayer;
			bool flag28 = Main.player[myPlayer].active && !Main.player[myPlayer].dead && (!Main.player[myPlayer].immune || num47 != -1);
			if (flag28 && this.type == 281)
			{
				flag28 = (this.ai[1] - 1f == (float)myPlayer);
			}
			if (Main.getGoodWorld && this.type == 281)
			{
				flag28 = true;
			}
			if (!flag28 || !this.Colliding(rectangle, Main.player[myPlayer].getRect()))
			{
				return;
			}
			if (!CombinedHooks.CanBeHitByProjectile(Main.player[myPlayer], this))
			{
				return;
			}
			int num48 = this.direction;
			num48 = ((Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) >= this.position.X + (float)(this.width / 2)) ? 1 : -1);
			if (!Main.player[myPlayer].CanParryAgainst(Main.player[myPlayer].Hitbox, base.Hitbox, this.velocity))
			{
				int num49 = Main.DamageVar((float)this.damage, 0f - Main.player[this.owner].luck) * 2;
				if (this.type == 961)
				{
					if (this.penetrate == 1)
					{
						this.damage = 0;
						this.penetrate = -1;
					}
					else
					{
						this.damage = (int)((double)this.damage * 0.7);
					}
				}
				bool dodgeable2 = this.IsDamageDodgable();
				int playerIndex2 = -1;
				if (ProjectileID.Sets.IsAGravestone[this.type])
				{
					playerIndex2 = (int)this.ai[0];
				}
				if (Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(playerIndex2, this.whoAmI), num49, num48, false, false, false, num47, dodgeable2, (float)this.ArmorPenetration) > 0.0 && !Main.player[myPlayer].dead)
				{
					this.StatusPlayer(myPlayer);
				}
				if (this.trap)
				{
					Main.player[myPlayer].trapDebuffSource = true;
					if (Main.player[myPlayer].dead)
					{
						AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
					}
				}
			}
			if (this.type == 435 || this.type == 682)
			{
				this.penetrate--;
			}
			if (this.type == 436)
			{
				this.penetrate--;
			}
			if (this.type == 681)
			{
				this.timeLeft = 0;
			}
			if (this.type == 437)
			{
				this.penetrate--;
			}
		}

		// Token: 0x06000D00 RID: 3328 RVA: 0x002FDBA8 File Offset: 0x002FBDA8
		private Rectangle Damage_GetHitbox()
		{
			Rectangle result;
			result..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
			if (this.type == 101)
			{
				result.Inflate(30, 30);
			}
			if (this.type == 85)
			{
				int num = (int)Utils.Remap(this.localAI[0], 0f, 72f, 10f, 40f, true);
				result.Inflate(num, num);
			}
			if (this.type == 188)
			{
				result.Inflate(20, 20);
			}
			if (this.aiStyle == 29)
			{
				result.Inflate(4, 4);
			}
			if (this.type == 967)
			{
				result.Inflate(10, 10);
			}
			ProjectileLoader.ModifyDamageHitbox(this, ref result);
			return result;
		}

		// Token: 0x06000D01 RID: 3329 RVA: 0x002FDC78 File Offset: 0x002FBE78
		private void BombsHurtPlayers(Rectangle projRectangle, int j)
		{
			if ((this.aiStyle != 16 && !ProjectileID.Sets.Explosive[this.type]) || (ProjectileID.Sets.RocketsSkipDamageForPlayers[this.type] || (this.timeLeft > 1 && this.type != 108 && this.type != 164 && this.type != 1002)) || !Main.player[j].active || Main.player[j].dead || Main.player[j].immune || (this.ownerHitCheck && !this.CanHitWithMeleeWeapon(Main.player[j])))
			{
				return;
			}
			Rectangle value;
			value..ctor((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height);
			if (!projRectangle.Intersects(value))
			{
				return;
			}
			if (Main.player[j].position.X + (float)(Main.player[j].width / 2) < this.position.X + (float)(this.width / 2))
			{
				this.direction = -1;
			}
			else
			{
				this.direction = 1;
			}
			int num = Main.DamageVar((float)this.damage, 0f - Main.player[j].luck);
			int playerIndex = this.owner;
			bool pvp = true;
			if (this.type == 108 || this.type == 1002)
			{
				playerIndex = -1;
				pvp = false;
			}
			if (ProjectileID.Sets.IsAGravestone[this.type])
			{
				playerIndex = (int)this.ai[0];
			}
			bool dodgeable = this.IsDamageDodgable();
			PlayerDeathReason damageSource = PlayerDeathReason.ByProjectile(playerIndex, this.whoAmI);
			if (Main.player[j].Hurt(damageSource, num, this.direction, pvp, false, false, -1, dodgeable, (float)this.ArmorPenetration) > 0.0 && !Main.player[j].dead)
			{
				this.StatusPlayer(j);
			}
			if (this.trap)
			{
				Main.player[j].trapDebuffSource = true;
				if (Main.player[j].dead)
				{
					AchievementsHelper.HandleSpecialEvent(Main.player[j], 4);
				}
			}
		}

		// Token: 0x06000D02 RID: 3330 RVA: 0x002FDE94 File Offset: 0x002FC094
		public bool IsDamageDodgable()
		{
			int num = this.type;
			return (num - 871 > 3 && num != 919 && num - 923 > 1) || this.damage != 9999;
		}

		// Token: 0x06000D03 RID: 3331 RVA: 0x002FDED4 File Offset: 0x002FC0D4
		public static void KillOldestJavelin(int protectedProjectileIndex, int projectileType, int targetNPCIndex, Point[] bufferForScan)
		{
			int num = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (i != protectedProjectileIndex && Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].type == projectileType && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)targetNPCIndex)
				{
					bufferForScan[num++] = new Point(i, Main.projectile[i].timeLeft);
					if (num >= bufferForScan.Length)
					{
						break;
					}
				}
			}
			if (num < bufferForScan.Length)
			{
				return;
			}
			int num2 = 0;
			for (int j = 1; j < bufferForScan.Length; j++)
			{
				if (bufferForScan[j].Y < bufferForScan[num2].Y)
				{
					num2 = j;
				}
			}
			Main.projectile[bufferForScan[num2].X].Kill();
		}

		// Token: 0x06000D04 RID: 3332 RVA: 0x002FDFC4 File Offset: 0x002FC1C4
		private int CountEnemiesWhoAreImmuneToMeRightNow(int cap)
		{
			int num = 0;
			for (int i = 0; i < this.localNPCImmunity.Length; i++)
			{
				if (this.localNPCImmunity[i] > 0)
				{
					num++;
					if (num >= cap)
					{
						break;
					}
				}
			}
			return num;
		}

		// Token: 0x06000D05 RID: 3333 RVA: 0x002FDFFC File Offset: 0x002FC1FC
		public static void EmitBlackLightningParticles(NPC targetNPC)
		{
			ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings
			{
				PositionInWorld = targetNPC.Center
			}, null);
		}

		// Token: 0x06000D06 RID: 3334 RVA: 0x002FE030 File Offset: 0x002FC230
		private void TryDoingOnHitEffects(Entity entity)
		{
			int num = this.type;
			if (num <= 614)
			{
				if (num != 221 && num != 227 && num != 614)
				{
					goto IL_42;
				}
			}
			else if (num != 729 && num != 908 && num != 977)
			{
				goto IL_42;
			}
			return;
			IL_42:
			Main.player[this.owner].OnHit(entity.Center.X, entity.Center.Y, entity);
		}

		// Token: 0x06000D07 RID: 3335 RVA: 0x002FE0A8 File Offset: 0x002FC2A8
		private void SummonSuperStarSlash(Vector2 target)
		{
			Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
			if (v.Y < 0f)
			{
				v.Y *= -1f;
			}
			v.Y += 100f;
			Vector2 vector = v.SafeNormalize(Vector2.UnitY) * 6f;
			Projectile.NewProjectile(this.GetProjectileSource_FromThis(), target - vector * 20f, vector, 729, (int)((double)this.damage * 0.75), 0f, this.owner, 0f, target.Y, 0f);
		}

		// Token: 0x06000D08 RID: 3336 RVA: 0x002FE160 File Offset: 0x002FC360
		private void SummonMonkGhast()
		{
			if (this.localAI[0] > 0f)
			{
				return;
			}
			this.localAI[0] = 1000f;
			List<NPC> list = new List<NPC>();
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false) && base.Distance(nPC.Center) < 800f)
				{
					list.Add(nPC);
				}
			}
			Vector2 center = base.Center;
			Vector2 zero = Vector2.Zero;
			if (list.Count > 0)
			{
				NPC npc = list[Main.rand.Next(list.Count)];
				center = npc.Center;
				zero = npc.velocity;
			}
			int num = Main.rand.Next(2) * 2 - 1;
			Vector2 vector;
			vector..ctor((float)num * (4f + (float)Main.rand.Next(3)), 0f);
			Vector2 vector2 = center + new Vector2((float)(-(float)num * 120), 0f);
			vector += (center + zero * 15f - vector2).SafeNormalize(Vector2.Zero) * 2f;
			Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2, vector, 700, this.damage, 0f, this.owner, 0f, 0f, 0f);
		}

		// Token: 0x06000D09 RID: 3337 RVA: 0x002FE2C4 File Offset: 0x002FC4C4
		private void CutTiles()
		{
			if (!this.CanCutTiles())
			{
				return;
			}
			AchievementsHelper.CurrentlyMining = true;
			bool flag = true;
			bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			DelegateMethods.tileCutIgnore = tileCutIgnorance;
			Rectangle extensionBox;
			if (this.type == 461 || this.type == 632 || this.type == 642)
			{
				Vector2 center = base.Center;
				Vector2 end2 = base.Center + this.velocity * this.localAI[1];
				float width = (float)this.width * this.scale;
				Utils.TileActionAttempt plot;
				if ((plot = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(center, end2, width, plot);
			}
			else if (ProjectileID.Sets.IsAWhip[this.type])
			{
				flag = false;
				this.WhipPointsForCollision.Clear();
				Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
				Vector2 vector;
				vector..ctor((float)this.width * this.scale / 2f, 0f);
				for (int i = 0; i < this.WhipPointsForCollision.Count; i++)
				{
					Vector2 start = this.WhipPointsForCollision[i] - vector;
					Vector2 end3 = this.WhipPointsForCollision[i] + vector;
					float width2 = (float)this.height * this.scale;
					Utils.TileActionAttempt plot2;
					if ((plot2 = Projectile.<>O.<1>__CutTiles) == null)
					{
						plot2 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
					}
					Utils.PlotTileLine(start, end3, width2, plot2);
				}
			}
			else if (this.type == 756)
			{
				Vector2 center2 = base.Center;
				Vector2 end4 = base.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 200f * this.scale;
				float width3 = 22f * this.scale;
				Utils.TileActionAttempt plot3;
				if ((plot3 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot3 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(center2, end4, width3, plot3);
			}
			else if (this.type == 927)
			{
				Vector2 end = base.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 220f * this.scale;
				Vector2 center3 = base.Center;
				Vector2 end5 = end;
				float width4 = 80f * this.scale;
				Utils.TileActionAttempt plot4;
				if ((plot4 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot4 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(center3, end5, width4, plot4);
			}
			else if (this.type == 802 || this.type == 842 || this.type == 938 || this.type == 939 || this.type == 940 || this.type == 941 || this.type == 942 || this.type == 943 || this.type == 944 || this.type == 945)
			{
				Vector2 center4 = base.Center;
				Vector2 end6 = base.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 10f;
				float width5 = 10f * this.scale;
				Utils.TileActionAttempt plot5;
				if ((plot5 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot5 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(center4, end6, width5, plot5);
			}
			else if (this.type == 611)
			{
				Vector2 center5 = base.Center;
				Vector2 end7 = base.Center + this.velocity + this.velocity.SafeNormalize(Vector2.Zero) * 48f;
				float width6 = (float)this.width * this.scale;
				Utils.TileActionAttempt plot6;
				if ((plot6 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot6 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(center5, end7, width6, plot6);
			}
			else if (this.type == 697 || this.type == 707)
			{
				float num = 40f;
				if (this.type == 707)
				{
					num = 60f;
				}
				float f = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X);
				Vector2 start2 = base.Center + f.ToRotationVector2() * (0f - num);
				Vector2 end8 = base.Center + f.ToRotationVector2() * num;
				float width7 = (float)this.width * this.scale;
				Utils.TileActionAttempt plot7;
				if ((plot7 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot7 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(start2, end8, width7, plot7);
			}
			else if (this.aiStyle == 190 || this.aiStyle == 191)
			{
				flag = false;
				Vector2 vector2 = (this.rotation - 0.7853982f).ToRotationVector2() * 60f * this.scale;
				Vector2 vector3 = (this.rotation + 0.7853982f).ToRotationVector2() * 60f * this.scale;
				float num2 = 60f * this.scale;
				Vector2 start3 = base.Center + vector2;
				Vector2 end9 = base.Center + vector3;
				float width8 = num2;
				Utils.TileActionAttempt plot8;
				if ((plot8 = Projectile.<>O.<1>__CutTiles) == null)
				{
					plot8 = (Projectile.<>O.<1>__CutTiles = new Utils.TileActionAttempt(DelegateMethods.CutTiles));
				}
				Utils.PlotTileLine(start3, end9, width8, plot8);
			}
			else if (this.aiStyle == 19 && this.AI_019_Spears_GetExtensionHitbox(out extensionBox))
			{
				this.CutTilesAt(extensionBox.TopLeft(), extensionBox.Width, extensionBox.Height);
			}
			if (flag)
			{
				this.CutTilesAt(this.position, this.width, this.height);
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		// Token: 0x06000D0A RID: 3338 RVA: 0x002FE858 File Offset: 0x002FCA58
		private unsafe void CutTilesAt(Vector2 boxPosition, int boxWidth, int boxHeight)
		{
			int num = (int)(boxPosition.X / 16f);
			int num2 = (int)((boxPosition.X + (float)boxWidth) / 16f) + 1;
			int num3 = (int)(boxPosition.Y / 16f);
			int num4 = (int)((boxPosition.Y + (float)boxHeight) / 16f) + 1;
			if (num < 0)
			{
				num = 0;
			}
			if (num2 > Main.maxTilesX)
			{
				num2 = Main.maxTilesX;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesY)
			{
				num4 = Main.maxTilesY;
			}
			bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] != null && Main.tileCut[(int)(*Main.tile[i, j].type)] && !tileCutIgnorance[(int)(*Main.tile[i, j].type)] && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
				}
			}
			ProjectileLoader.CutTiles(this);
		}

		// Token: 0x06000D0B RID: 3339 RVA: 0x002FE9A8 File Offset: 0x002FCBA8
		private bool CanCutTiles()
		{
			bool? flag = ProjectileLoader.CanCutTiles(this);
			if (flag != null)
			{
				return flag.GetValueOrDefault();
			}
			return this.aiStyle != 45 && this.aiStyle != 137 && this.aiStyle != 92 && this.aiStyle != 105 && this.aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[this.type] && this.type != 463 && this.type != 69 && this.type != 70 && this.type != 621 && this.type != 10 && this.type != 11 && this.type != 379 && this.type != 407 && this.type != 476 && this.type != 623 && (this.type < 625 || this.type > 628) && this.type != 833 && this.type != 834 && this.type != 835 && this.type != 818 && this.type != 831 && this.type != 820 && this.type != 864 && this.type != 970 && this.type != 995 && this.type != 908 && this.type != 1020;
		}

		// Token: 0x06000D0C RID: 3340 RVA: 0x002FEB6C File Offset: 0x002FCD6C
		public bool Colliding(Rectangle myRect, Rectangle targetRect)
		{
			if (this.aiStyle == 15)
			{
				if (this.ai[0] == 0f)
				{
					Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
					Vector2 vector = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
					vector.Y /= 0.8f;
					float num = 55f;
					return vector.Length() <= num;
				}
			}
			else if (this.type == 973)
			{
				Vector2 v = targetRect.ClosestPointInRect(base.Center) - base.Center;
				v.SafeNormalize(Vector2.UnitX);
				float num2 = 100f * this.scale;
				if (v.Length() < num2 && Collision.CanHit(base.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0))
				{
					return true;
				}
			}
			else
			{
				if (this.type == 85)
				{
					return myRect.Intersects(targetRect) && Collision.CanHit(base.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0);
				}
				if (this.type == 985)
				{
					float coneLength = 90f * this.scale;
					float maximumAngle = 0.7853982f;
					float coneRotation = this.rotation;
					if (targetRect.IntersectsConeFastInaccurate(base.Center, coneLength, coneRotation, maximumAngle) && Collision.CanHit(base.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0))
					{
						return true;
					}
				}
				else if (this.aiStyle == 190)
				{
					float coneLength2 = 94f * this.scale;
					float num3 = 0.25132743f * this.ai[0];
					float maximumAngle2 = 0.7853982f;
					float num4 = this.rotation + num3;
					if (targetRect.IntersectsConeSlowMoreAccurate(base.Center, coneLength2, num4, maximumAngle2))
					{
						return true;
					}
					float num5 = Utils.Remap(this.localAI[0], this.ai[1] * 0.3f, this.ai[1] * 0.5f, 1f, 0f, true);
					if (num5 > 0f)
					{
						float coneRotation2 = num4 - 0.7853982f * this.ai[0] * num5;
						if (targetRect.IntersectsConeSlowMoreAccurate(base.Center, coneLength2, coneRotation2, maximumAngle2))
						{
							return true;
						}
					}
					return false;
				}
				else if (this.type == 623)
				{
					if (this.ai[0] == 2f)
					{
						Rectangle value = Utils.CenteredRectangle(base.Center + new Vector2((float)(this.direction * 40), 0f), new Vector2(80f, 40f));
						if (targetRect.Intersects(value))
						{
							return true;
						}
					}
				}
				else
				{
					if (this.type == 933)
					{
						float collisionPoint = 0f;
						float num6 = 40f;
						for (int i = 14; i < this.oldPos.Length; i += 15)
						{
							float num7 = this.localAI[0] - (float)i;
							if (num7 >= 0f && num7 <= 60f)
							{
								Vector2 vector2 = this.oldPos[i] + base.Size / 2f;
								Vector2 vector3 = (this.oldRot[i] + 1.5707964f).ToRotationVector2();
								Projectile._lanceHitboxBounds.X = (int)vector2.X - Projectile._lanceHitboxBounds.Width / 2;
								Projectile._lanceHitboxBounds.Y = (int)vector2.Y - Projectile._lanceHitboxBounds.Height / 2;
								if (Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), vector2 - vector3 * num6, vector2 + vector3 * num6, 20f, ref collisionPoint))
								{
									return true;
								}
							}
						}
						Vector2 vector4 = (this.rotation + 1.5707964f).ToRotationVector2();
						Projectile._lanceHitboxBounds.X = (int)this.position.X - Projectile._lanceHitboxBounds.Width / 2;
						Projectile._lanceHitboxBounds.Y = (int)this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
						return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector4 * num6, base.Center + vector4 * num6, 20f, ref collisionPoint);
					}
					if (this.type == 927)
					{
						for (float num8 = 0f; num8 <= 1f; num8 += 0.05f)
						{
							float num9 = Utils.Remap(num8, 0f, 1f, 1f, 5f, true);
							Rectangle rectangle = myRect;
							Vector2 vector5 = this.velocity.SafeNormalize(Vector2.Zero) * (float)this.width * num9 * this.scale;
							rectangle.Offset((int)vector5.X, (int)vector5.Y);
							if (rectangle.Intersects(targetRect))
							{
								return true;
							}
						}
					}
					else
					{
						if (this.type == 877 || this.type == 878 || this.type == 879)
						{
							float f = this.rotation - 0.7853982f - 1.5707964f - ((this.spriteDirection == 1) ? 3.1415927f : 0f);
							float collisionPoint2 = 0f;
							float num10 = 95f;
							Projectile._lanceHitboxBounds.X = (int)this.position.X - Projectile._lanceHitboxBounds.Width / 2;
							Projectile._lanceHitboxBounds.Y = (int)this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
							return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f.ToRotationVector2() * num10, 23f * this.scale, ref collisionPoint2);
						}
						if (this.type == 974)
						{
							float f4 = this.rotation;
							float collisionPoint3 = 0f;
							float num11 = 46f * this.scale;
							float num12 = 8f;
							Vector2 vector6 = f4.ToRotationVector2();
							Rectangle hitbox = base.Hitbox;
							hitbox.Inflate((int)num11, (int)num11);
							return hitbox.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector6 * num11, base.Center + vector6 * num11, num12 * this.scale, ref collisionPoint3);
						}
						if (this.type == 919 || this.type == 932)
						{
							float f5 = this.rotation;
							float collisionPoint4 = 0f;
							float num13 = 40f;
							Vector2 vector7 = f5.ToRotationVector2();
							Projectile._lanceHitboxBounds.X = (int)this.position.X - Projectile._lanceHitboxBounds.Width / 2;
							Projectile._lanceHitboxBounds.Y = (int)this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
							return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector7 * num13, base.Center + vector7 * num13, 8f, ref collisionPoint4);
						}
						if (this.type == 923)
						{
							float collisionPoint5 = 0f;
							float num28 = this.scale;
							float f6 = this.rotation;
							Vector2 objectPosition = targetRect.TopLeft();
							Vector2 objectDimensions = targetRect.Size();
							Vector2 vector8 = f6.ToRotationVector2();
							float num14 = this.scale * 0.7f;
							return Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector8 * this.scale * 510f, num14 * 100f, ref collisionPoint5) || Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector8 * this.scale * 660f, num14 * 60f, ref collisionPoint5) || Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector8 * this.scale * 800f, num14 * 10f, ref collisionPoint5);
						}
						if (this.type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else
						{
							if (this.type == 872)
							{
								Rectangle hitbox2 = base.Hitbox;
								int num15 = 80;
								for (int j = 0; j < num15; j += 2)
								{
									Vector2 vector9 = this.oldPos[j];
									if (!(vector9 == Vector2.Zero))
									{
										hitbox2.X = (int)vector9.X;
										hitbox2.Y = (int)vector9.Y;
										if (hitbox2.Intersects(targetRect))
										{
											return true;
										}
									}
								}
								return false;
							}
							if (this.type == 871)
							{
								int num16 = this.AI_172_GetPelletStormsCount();
								for (int k = 0; k < num16; k++)
								{
									Projectile.HallowBossPelletStormInfo hallowBossPelletStormInfo = this.AI_172_GetPelletStormInfo(k);
									for (int l = 0; l < hallowBossPelletStormInfo.BulletsInStorm; l++)
									{
										if (hallowBossPelletStormInfo.IsValid(l) && hallowBossPelletStormInfo.GetBulletHitbox(l, base.Center).Intersects(targetRect))
										{
											return true;
										}
									}
								}
								return false;
							}
							if (ProjectileID.Sets.IsAWhip[this.type])
							{
								this.WhipPointsForCollision.Clear();
								Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
								for (int m = 0; m < this.WhipPointsForCollision.Count; m++)
								{
									Point point = this.WhipPointsForCollision[m].ToPoint();
									myRect.Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
									if (myRect.Intersects(targetRect))
									{
										return true;
									}
								}
								return false;
							}
							if (this.type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
							{
								targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
							}
							else if (this.type == 963 && this.ai[0] >= 2f)
							{
								targetRect.Inflate(30, 30);
							}
							else if (this.type == 758)
							{
								if (this.ai[0] == 2f && Utils.CenteredRectangle(base.Center + new Vector2((float)(this.spriteDirection * 30), 0f), new Vector2(50f, 20f)).Intersects(targetRect))
								{
									return true;
								}
							}
							else if (this.type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
							{
								targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
							}
							else if (this.type == 607)
							{
								myRect.X += (int)this.velocity.X;
								myRect.Y += (int)this.velocity.Y;
							}
							else if (this.type == 661)
							{
								if (Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500f || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
								{
									return false;
								}
							}
							else
							{
								if (this.aiStyle == 137)
								{
									if (myRect.Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(this.height / 2 - 20))
									{
										if (this.AI_137_CanHit(targetRect.Center.ToVector2()))
										{
											return true;
										}
										if (this.AI_137_CanHit(targetRect.TopLeft() + new Vector2((float)(targetRect.Width / 2), 0f)))
										{
											return true;
										}
									}
									return false;
								}
								if (this.aiStyle == 19)
								{
									Vector2 center = base.Center;
									Rectangle extensionBox;
									if (this.AI_019_Spears_GetExtensionHitbox(out extensionBox))
									{
										Vector2 vector10 = extensionBox.Center.ToVector2();
										float num17 = Vector2.Distance(vector10, center);
										Vector2 size = extensionBox.Size();
										float num18 = MathHelper.Max((float)extensionBox.Width, (float)extensionBox.Height);
										if (num18 < 12f)
										{
											num18 = 12f;
										}
										for (float num19 = num18; num19 < num17; num19 += num18)
										{
											if (Utils.CenteredRectangle(Vector2.Lerp(center, vector10, num19 / num17), size).Intersects(targetRect))
											{
												return true;
											}
										}
										if (extensionBox.Intersects(targetRect))
										{
											return true;
										}
									}
								}
							}
						}
					}
				}
			}
			bool? flag = ProjectileLoader.Colliding(this, myRect, targetRect);
			if (flag != null)
			{
				return flag.GetValueOrDefault();
			}
			if (myRect.Intersects(targetRect))
			{
				return true;
			}
			if (this.type == 461)
			{
				float collisionPoint6 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint6);
			}
			if (this.type == 697 || this.type == 707)
			{
				float f2 = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X);
				float collisionPoint7 = 0f;
				float num20 = 50f;
				if (this.type == 697)
				{
					num20 = 65f;
				}
				if (this.type == 707)
				{
					num20 = 110f;
				}
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f2.ToRotationVector2() * (0f - num20), base.Center + f2.ToRotationVector2() * num20, 23f * this.scale, ref collisionPoint7);
			}
			if (this.type == 699)
			{
				float f3 = this.rotation - 0.7853982f * (float)Math.Sign(this.velocity.X) + ((this.spriteDirection == -1) ? 3.1415927f : 0f);
				float collisionPoint8 = 0f;
				float num21 = -95f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f3.ToRotationVector2() * num21, 23f * this.scale, ref collisionPoint8);
			}
			if (this.type == 642)
			{
				float collisionPoint9 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 30f * this.scale, ref collisionPoint9);
			}
			if (this.type == 802 || this.type == 842 || this.type == 938 || this.type == 939 || this.type == 940 || this.type == 941 || this.type == 942 || this.type == 943 || this.type == 944 || this.type == 945)
			{
				float collisionPoint10 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * 6f, 10f * this.scale, ref collisionPoint10);
			}
			if (this.type == 632)
			{
				float collisionPoint11 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint11);
			}
			if (this.type == 455)
			{
				float collisionPoint12 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 36f * this.scale, ref collisionPoint12);
			}
			if (this.type == 611)
			{
				float collisionPoint13 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity + this.velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * this.scale, ref collisionPoint13);
			}
			if (this.type == 684)
			{
				float collisionPoint14 = 0f;
				Vector2 vector11 = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866, default(Vector2)) * this.scale;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector11 * 40f, base.Center + vector11 * 40f, 16f * this.scale, ref collisionPoint14);
			}
			if (this.type == 537)
			{
				float collisionPoint15 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint15);
			}
			if (this.type == 756 || this.type == 961)
			{
				float collisionPoint16 = 0f;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 200f * this.scale, 22f * this.scale, ref collisionPoint16);
			}
			if (this.type == 687)
			{
				float collisionPoint17 = 0f;
				float num22 = this.ai[0] / 25f;
				if (num22 > 1f)
				{
					num22 = 1f;
				}
				float num23 = (this.ai[0] - 38f) / 40f;
				if (num23 < 0f)
				{
					num23 = 0f;
				}
				Vector2 lineStart = base.Center + this.rotation.ToRotationVector2() * 400f * num23;
				Vector2 lineEnd = base.Center + this.rotation.ToRotationVector2() * 400f * num22;
				return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * this.scale, ref collisionPoint17);
			}
			if (this.type == 466 || this.type == 580 || this.type == 686)
			{
				int n = 0;
				while (n < this.oldPos.Length && (this.oldPos[n].X != 0f || this.oldPos[n].Y != 0f))
				{
					myRect.X = (int)this.oldPos[n].X;
					myRect.Y = (int)this.oldPos[n].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
					n++;
				}
				return false;
			}
			if (this.type == 711)
			{
				if (this.penetrate != -1)
				{
					for (int num24 = 0; num24 < this.oldPos.Length; num24++)
					{
						if (this.oldPos[num24].X == 0f && this.oldPos[num24].Y == 0f)
						{
							break;
						}
						myRect.X = (int)this.oldPos[num24].X;
						myRect.Y = (int)this.oldPos[num24].Y;
						if (myRect.Intersects(targetRect))
						{
							return true;
						}
					}
				}
			}
			else if (this.type == 464 && this.ai[1] != 1f)
			{
				Vector2 vector12 = new Vector2(0f, -720f).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
				float num25 = this.ai[0] % 45f / 45f;
				Vector2 spinningpoint = vector12 * num25;
				for (int num26 = 0; num26 < 6; num26++)
				{
					float num27 = (float)num26 * 6.2831855f / 6f;
					if (Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy((double)num27, default(Vector2)), new Vector2(30f, 30f)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000D0D RID: 3341 RVA: 0x00300130 File Offset: 0x002FE330
		public void ProjLight()
		{
			if (this.light <= 0f)
			{
				return;
			}
			float num = this.light;
			float num2 = this.light;
			float num3 = this.light;
			switch (this.type)
			{
			case 987:
				num *= 0.6f;
				num2 *= 0.5f;
				num3 *= 0.1f;
				break;
			case 988:
				num *= 0.8f;
				num2 *= 0.35f;
				num3 *= 0f;
				break;
			case 989:
				num *= 0f;
				num2 *= 0.65f;
				num3 *= 0f;
				break;
			case 990:
				num *= 0f;
				num2 *= 0.35f;
				num3 *= 0.7f;
				break;
			case 991:
				num *= 0.9f;
				num2 *= 0f;
				num3 *= 0.5f;
				break;
			case 992:
				num *= 0.75f;
				num2 *= 0f;
				num3 *= 0.75f;
				break;
			case 993:
				num *= (float)Main.DiscoR / 255f;
				num2 *= (float)Main.DiscoG / 255f;
				num3 *= (float)Main.DiscoB / 255f;
				break;
			}
			if (this.type == 446)
			{
				num *= 0f;
				num3 *= 0.8f;
			}
			else if (this.type == 493 || this.type == 494)
			{
				num2 *= 0.3f;
			}
			else if (this.type == 876)
			{
				num *= 0.1f;
				num2 *= 0.7f;
				num3 *= 1f;
			}
			else if (this.type == 867)
			{
				float num4 = (float)Main.rand.Next(28, 42) * 0.005f;
				num4 += (float)(270 - (int)Main.mouseTextColor) / 500f;
				num = 0.1f;
				num2 = 0.3f + num4 / 2f;
				num3 = 0.6f + num4;
			}
			else if (this.type == 1000)
			{
				float num5 = (float)Main.rand.Next(28, 42) * 0.005f;
				num5 += (float)(270 - (int)Main.mouseTextColor) / 500f;
				num = 0.3f + num5 * 0.25f;
				num2 = 0.35f + num5 * 0.75f;
				num3 = 0.5f + num5;
			}
			else if (this.type == 332)
			{
				num3 *= 0.1f;
				num2 *= 0.6f;
			}
			else if (this.type == 259)
			{
				num3 *= 0.1f;
				if (Main.getGoodWorld)
				{
					num = 0f;
					num2 = 0f;
					num3 = 0f;
				}
			}
			else if (this.type == 329)
			{
				num3 *= 0.1f;
				num2 *= 0.9f;
			}
			else if (this.type == 2 || this.type == 82)
			{
				num2 *= 0.75f;
				num3 *= 0.55f;
			}
			else if (this.type == 172)
			{
				num2 *= 0.55f;
				num *= 0.35f;
			}
			else if (this.type == 308)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (this.type == 304)
			{
				num2 *= 0.2f;
				num3 *= 0.1f;
			}
			else if (this.type == 263)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (this.type == 274)
			{
				num2 *= 0.1f;
				num *= 0.7f;
			}
			else if (this.type == 254)
			{
				num *= 0.1f;
			}
			else if (this.type == 94)
			{
				num *= 0.5f;
				num2 *= 0f;
			}
			else if (this.type == 95 || this.type == 96 || this.type == 103 || this.type == 104)
			{
				num *= 0.35f;
				num2 *= 1f;
				num3 *= 0f;
			}
			else if (this.type == 4)
			{
				num2 *= 0.1f;
				num *= 0.5f;
			}
			else if (this.type == 257)
			{
				num2 *= 0.9f;
				num *= 0.1f;
			}
			else if (this.type == 9)
			{
				num2 *= 0.1f;
				num3 *= 0.6f;
			}
			else if (this.type == 488)
			{
				num = 0.3f;
				num3 = 0.25f;
				num2 = 0f;
			}
			else if (this.type == 92)
			{
				num2 *= 0.6f;
				num *= 0.8f;
			}
			else if (this.type == 93)
			{
				num2 *= 1f;
				num *= 1f;
				num3 *= 0.01f;
			}
			else if (this.type == 12 || this.type == 955)
			{
				num *= 0.9f;
				num2 *= 0.8f;
				num3 *= 0.1f;
			}
			else if (this.type == 14 || this.type == 110 || this.type == 180 || this.type == 242 || this.type == 302)
			{
				num2 *= 0.7f;
				num3 *= 0.1f;
			}
			else if (this.type == 981)
			{
				num2 *= 0.7f;
				num3 *= 0.7f;
			}
			else if (this.type == 15)
			{
				num2 *= 0.4f;
				num3 *= 0.1f;
				num = 1f;
			}
			else if (this.type == 16)
			{
				num *= 0.1f;
				num2 *= 0.4f;
				num3 = 1f;
			}
			else if (this.type == 18)
			{
				num2 *= 0.1f;
				num *= 0.6f;
			}
			else if (this.type == 19)
			{
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (this.type == 20)
			{
				num *= 0.1f;
				num3 *= 0.3f;
			}
			else if (this.type == 22)
			{
				num = 0f;
				num2 = 0f;
			}
			else if (this.type == 27)
			{
				num *= 0f;
				num2 *= 0.3f;
				num3 = 1f;
			}
			else if (this.type == 34)
			{
				num2 *= 0.1f;
				num3 *= 0.1f;
			}
			else if (this.type == 36)
			{
				num = 0.8f;
				num2 *= 0.2f;
				num3 *= 0.6f;
			}
			else if (this.type == 41)
			{
				num2 *= 0.8f;
				num3 *= 0.6f;
			}
			else if (this.type == 44 || this.type == 45)
			{
				num3 = 1f;
				num *= 0.6f;
				num2 *= 0.1f;
			}
			else if (this.type == 50)
			{
				num *= 0.7f;
				num3 *= 0.8f;
			}
			else if (this.type == 515)
			{
				num2 *= 0.6f;
				num3 *= 0.85f;
			}
			else if (this.type == 870)
			{
				num *= 0.9f;
				num2 = 0.35f;
			}
			else if (this.type == 53)
			{
				num *= 0.7f;
				num2 *= 0.8f;
			}
			else if (this.type == 473)
			{
				num *= 1.05f;
				num2 *= 0.95f;
				num3 *= 0.55f;
			}
			else if (this.type == 72)
			{
				num *= 0.45f;
				num2 *= 0.75f;
				num3 = 1f;
			}
			else if (this.type == 86)
			{
				num *= 1f;
				num2 *= 0.45f;
				num3 = 0.75f;
			}
			else if (this.type == 87)
			{
				num *= 0.45f;
				num2 = 1f;
				num3 *= 0.75f;
			}
			else if (this.type == 73)
			{
				num *= 0.4f;
				num2 *= 0.6f;
				num3 *= 1f;
			}
			else if (this.type == 74)
			{
				num *= 1f;
				num2 *= 0.4f;
				num3 *= 0.6f;
			}
			else if (this.type == 284)
			{
				num *= 1f;
				num2 *= 0.1f;
				num3 *= 0.8f;
			}
			else if (this.type == 285)
			{
				num *= 0.1f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (this.type == 286)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (this.type == 287)
			{
				num *= 0.9f;
				num2 *= 1f;
				num3 *= 0.4f;
			}
			else if (this.type == 283)
			{
				num *= 0.8f;
				num2 *= 0.1f;
			}
			else if (this.type == 76 || this.type == 77 || this.type == 78)
			{
				num *= 1f;
				num2 *= 0.3f;
				num3 *= 0.6f;
			}
			else if (this.type == 79)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
			}
			else if (this.type == 80)
			{
				num *= 0f;
				num2 *= 0.8f;
				num3 *= 1f;
			}
			else if (this.type == 83 || this.type == 88)
			{
				num *= 0.7f;
				num2 *= 0f;
				num3 *= 1f;
			}
			else if (this.type == 100)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0f;
			}
			else if (this.type == 84 || this.type == 389)
			{
				num *= 0.8f;
				num2 *= 0f;
				num3 *= 0.5f;
			}
			else if (this.type == 89 || this.type == 90)
			{
				num2 *= 0.2f;
				num3 *= 1f;
				num *= 0.05f;
			}
			else if (this.type == 106)
			{
				num *= 0f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (this.type == 113)
			{
				num *= 0.25f;
				num2 *= 0.75f;
				num3 *= 1f;
			}
			else if (this.type == 114 || this.type == 115)
			{
				num *= 0.5f;
				num2 *= 0.05f;
				num3 *= 1f;
			}
			else if (this.type == 116)
			{
				num3 *= 0.25f;
			}
			else if (this.type == 131)
			{
				num *= 0.1f;
				num2 *= 0.4f;
			}
			else if (this.type == 132 || this.type == 157)
			{
				num *= 0.2f;
				num3 *= 0.6f;
			}
			else if (this.type == 156)
			{
				num *= 1f;
				num3 *= 0.6f;
				num2 = 0f;
			}
			else if (this.type == 173)
			{
				num *= 0.3f;
				num3 *= 1f;
				num2 = 0.4f;
			}
			else if (this.type == 207)
			{
				num *= 0.4f;
				num3 *= 0.4f;
			}
			else if (this.type == 253)
			{
				num = 0f;
				num2 *= 0.4f;
			}
			else if (this.type == 211)
			{
				num *= 0.5f;
				num2 *= 0.9f;
				num3 *= 1f;
				if (this.localAI[0] == 0f)
				{
					this.light = 1.5f;
				}
				else
				{
					this.light = 1f;
				}
			}
			else if (this.type == 209)
			{
				float num6 = (255f - (float)this.alpha) / 255f;
				num *= 0.3f;
				num2 *= 0.4f;
				num3 *= 1.75f;
				num3 *= num6;
				num *= num6;
				num2 *= num6;
			}
			else if (this.type == 226 || (this.type == 221 | this.type == 229))
			{
				num *= 0.25f;
				num2 *= 1f;
				num3 *= 0.5f;
			}
			else if (this.type == 251)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
				num = (num + 1f) / 2f;
				num2 = (num2 + 1f) / 2f;
				num3 = (num3 + 1f) / 2f;
				num *= this.light;
				num2 *= this.light;
				num3 *= this.light;
			}
			else if (this.type == 278 || this.type == 279)
			{
				num *= 1f;
				num2 *= 1f;
				num3 *= 0f;
			}
			if (this.type == 870)
			{
				Vector3 rgb = DelegateMethods.v3_1 = new Vector3(num, num2, num3);
				Point p = base.Center.ToTileCoordinates();
				DelegateMethods.v2_1 = p.ToVector2();
				DelegateMethods.f_1 = 4.5f;
				int x = p.X;
				int y = p.Y;
				Utils.TileActionAttempt plot;
				if ((plot = Projectile.<>O.<2>__SpreadLightOpen_StopForSolids) == null)
				{
					plot = (Projectile.<>O.<2>__SpreadLightOpen_StopForSolids = new Utils.TileActionAttempt(DelegateMethods.SpreadLightOpen_StopForSolids));
				}
				Utils.PlotTileArea(x, y, plot);
				Lighting.AddLight(base.Center, rgb);
				return;
			}
			Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), num, num2, num3);
		}

		// Token: 0x06000D0E RID: 3342 RVA: 0x00300F9F File Offset: 0x002FF19F
		public Rectangle getRect()
		{
			return new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
		}

		// Token: 0x06000D0F RID: 3343 RVA: 0x00300FCC File Offset: 0x002FF1CC
		public unsafe void Update(int i)
		{
			if (!this.active)
			{
				return;
			}
			if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[this.type] || this.type == 820))
			{
				int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
				if (!Main.sectionManager.TileLoaded(num, num2))
				{
					return;
				}
			}
			this.numUpdates = this.extraUpdates;
			while (this.numUpdates >= 0)
			{
				this.numUpdates--;
				if (this.type == 640 && this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					if (this.position.X <= Main.leftWorld || this.position.X + (float)this.width >= Main.rightWorld || this.position.Y <= Main.topWorld || this.position.Y + (float)this.height >= Main.bottomWorld)
					{
						this.active = false;
						return;
					}
					if (!this.noEnchantmentVisuals)
					{
						this.UpdateEnchantmentVisuals();
					}
					if (this.minion || this.sentry || this.ContinuouslyUpdateDamageStats)
					{
						Player player = Main.player[this.owner];
						this.damage = (int)player.GetTotalDamage(this.DamageType).ApplyTo((float)this.originalDamage);
						this.CritChance = (int)((float)this.OriginalCritChance + player.GetTotalCritChance(this.DamageType) + 5E-06f);
						this.ArmorPenetration = (int)((float)this.OriginalArmorPenetration + player.GetTotalArmorPenetration(this.DamageType) + 5E-06f);
					}
					if (this.minion && this.numUpdates == -1 && this.type != 625 && this.type != 628)
					{
						this.minionPos = Main.player[this.owner].numMinions;
						if (Main.player[this.owner].slotsMinions + this.minionSlots > (float)Main.player[this.owner].maxMinions && this.owner == Main.myPlayer)
						{
							if ((this.type == 627 || this.type == 626) && this.owner == Main.myPlayer)
							{
								int byUUID = Projectile.GetByUUID(this.owner, this.ai[0]);
								if (byUUID != -1)
								{
									Projectile projectile = Main.projectile[byUUID];
									if (projectile.type != 625)
									{
										projectile.localAI[1] = this.localAI[1];
									}
									projectile = Main.projectile[(int)this.localAI[1]];
									projectile.ai[0] = this.ai[0];
									projectile.ai[1] = 1f;
									projectile.netUpdate = true;
								}
							}
							this.Kill();
						}
						else
						{
							Main.player[this.owner].numMinions++;
							Main.player[this.owner].slotsMinions += this.minionSlots;
						}
					}
					float num3 = 1f + Math.Abs(this.velocity.X) / 3f;
					if (this.gfxOffY > 0f)
					{
						this.gfxOffY -= num3 * this.stepSpeed;
						if (this.gfxOffY < 0f)
						{
							this.gfxOffY = 0f;
						}
					}
					else if (this.gfxOffY < 0f)
					{
						this.gfxOffY += num3 * this.stepSpeed;
						if (this.gfxOffY > 0f)
						{
							this.gfxOffY = 0f;
						}
					}
					if (this.gfxOffY > 16f)
					{
						this.gfxOffY = 16f;
					}
					if (this.gfxOffY < -16f)
					{
						this.gfxOffY = -16f;
					}
					Vector2 wetVelocity = this.velocity;
					this.oldVelocity = this.velocity;
					this.whoAmI = i;
					if (this.soundDelay > 0)
					{
						this.soundDelay--;
					}
					this.netUpdate = false;
					for (int j = 0; j < 255; j++)
					{
						if (this.playerImmune[j] > 0)
						{
							this.playerImmune[j]--;
						}
					}
					if (this.usesLocalNPCImmunity)
					{
						for (int k = 0; k < 200; k++)
						{
							if (this.localNPCImmunity[k] > 0)
							{
								this.localNPCImmunity[k]--;
							}
						}
					}
					this.AI();
					if (this.ShouldUseWindPhysics() && (double)base.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16] != null && *Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall == 0 && ((this.velocity.X > 0f && Main.windSpeedCurrent < 0f) || (this.velocity.X < 0f && Main.windSpeedCurrent > 0f) || Math.Abs(this.velocity.X) < Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180f) && Math.Abs(this.velocity.X) < 16f)
					{
						this.velocity.X = this.velocity.X + Main.windSpeedCurrent * Main.windPhysicsStrength;
						MathHelper.Clamp(this.velocity.X, -16f, 16f);
					}
					if (this.owner < 255 && !Main.player[this.owner].active)
					{
						this.Kill();
					}
					if (this.type == 242 || this.type == 302 || this.type == 638)
					{
						this.wet = false;
					}
					int num35;
					if (!this.ignoreWater)
					{
						bool flag;
						bool flag2;
						try
						{
							flag = Collision.LavaCollision(this.position, this.width, this.height);
							flag2 = Collision.WetCollision(this.position, this.width, this.height);
							if (flag)
							{
								this.lavaWet = true;
							}
							if (Collision.honey)
							{
								this.honeyWet = true;
							}
							if (Collision.shimmer)
							{
								this.shimmerWet = true;
							}
						}
						catch
						{
							this.active = false;
							return;
						}
						if (this.wet && !this.lavaWet)
						{
							if (this.type == 85 || this.type == 15 || this.type == 188)
							{
								this.Kill();
							}
							if (this.type == 2)
							{
								this.type = 1;
								this.light = 0f;
							}
						}
						if (this.type == 34)
						{
							if (this.wet && !this.lavaWet)
							{
								this.Kill();
							}
							if (this.lavaWet)
							{
								flag2 = (this.wet = (this.lavaWet = false));
							}
						}
						if (this.type == 80)
						{
							flag2 = false;
							this.wet = false;
							if (flag && this.ai[0] >= 0f)
							{
								this.Kill();
							}
						}
						if (flag2)
						{
							if (this.type != 155 && this.wetCount == 0 && !this.wet)
							{
								if (!flag)
								{
									if (this.shimmerWet)
									{
										for (int l = 0; l < 10; l++)
										{
											int num4 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 308, 0f, 0f, 0, default(Color), 1f);
											Dust dust = Main.dust[num4];
											dust.velocity.Y = dust.velocity.Y - 4f;
											Dust dust2 = Main.dust[num4];
											dust2.velocity.X = dust2.velocity.X * 2.5f;
											Main.dust[num4].scale = 1.3f;
											Main.dust[num4].noGravity = true;
											num35 = Main.rand.Next(6);
											switch (num35)
											{
											case 0:
												Main.dust[num4].color = new Color(255, 255, 210);
												break;
											case 1:
												Main.dust[num4].color = new Color(190, 245, 255);
												break;
											case 2:
												Main.dust[num4].color = new Color(255, 150, 255);
												break;
											default:
												Main.dust[num4].color = new Color(190, 175, 255);
												break;
											}
											SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 4, 1f, 0f);
										}
									}
									else if (this.honeyWet)
									{
										for (int m = 0; m < 10; m++)
										{
											int num5 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
											Dust dust3 = Main.dust[num5];
											dust3.velocity.Y = dust3.velocity.Y - 1f;
											Dust dust4 = Main.dust[num5];
											dust4.velocity.X = dust4.velocity.X * 2.5f;
											Main.dust[num5].scale = 1.3f;
											Main.dust[num5].alpha = 100;
											Main.dust[num5].noGravity = true;
										}
										SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
									else
									{
										for (int n = 0; n < 10; n++)
										{
											int num6 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
											Dust dust5 = Main.dust[num6];
											dust5.velocity.Y = dust5.velocity.Y - 4f;
											Dust dust6 = Main.dust[num6];
											dust6.velocity.X = dust6.velocity.X * 2.5f;
											Main.dust[num6].scale = 1.3f;
											Main.dust[num6].alpha = 100;
											Main.dust[num6].noGravity = true;
										}
										SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
								}
								else
								{
									for (int num7 = 0; num7 < 10; num7++)
									{
										int num8 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
										Dust dust7 = Main.dust[num8];
										dust7.velocity.Y = dust7.velocity.Y - 1.5f;
										Dust dust8 = Main.dust[num8];
										dust8.velocity.X = dust8.velocity.X * 2.5f;
										Main.dust[num8].scale = 1.3f;
										Main.dust[num8].alpha = 100;
										Main.dust[num8].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
							}
							this.wet = true;
						}
						else if (this.wet)
						{
							this.wet = false;
							if (this.type == 155)
							{
								this.velocity.Y = this.velocity.Y * 0.5f;
							}
							else if (this.wetCount == 0)
							{
								this.wetCount = 10;
								if (!this.lavaWet)
								{
									if (this.shimmerWet)
									{
										for (int num9 = 0; num9 < 10; num9++)
										{
											int num10 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 308, 0f, 0f, 0, default(Color), 1f);
											Dust dust9 = Main.dust[num10];
											dust9.velocity.Y = dust9.velocity.Y - 4f;
											Dust dust10 = Main.dust[num10];
											dust10.velocity.X = dust10.velocity.X * 2.5f;
											Main.dust[num10].scale = 1.3f;
											Main.dust[num10].noGravity = true;
											num35 = Main.rand.Next(6);
											switch (num35)
											{
											case 0:
												Main.dust[num10].color = new Color(255, 255, 210);
												break;
											case 1:
												Main.dust[num10].color = new Color(190, 245, 255);
												break;
											case 2:
												Main.dust[num10].color = new Color(255, 150, 255);
												break;
											default:
												Main.dust[num10].color = new Color(190, 175, 255);
												break;
											}
											SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 5, 1f, 0f);
										}
									}
									else if (this.honeyWet)
									{
										for (int num11 = 0; num11 < 10; num11++)
										{
											int num12 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
											Dust dust11 = Main.dust[num12];
											dust11.velocity.Y = dust11.velocity.Y - 1f;
											Dust dust12 = Main.dust[num12];
											dust12.velocity.X = dust12.velocity.X * 2.5f;
											Main.dust[num12].scale = 1.3f;
											Main.dust[num12].alpha = 100;
											Main.dust[num12].noGravity = true;
										}
										SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
									else
									{
										for (int num13 = 0; num13 < 10; num13++)
										{
											int num14 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
											Dust dust13 = Main.dust[num14];
											dust13.velocity.Y = dust13.velocity.Y - 4f;
											Dust dust14 = Main.dust[num14];
											dust14.velocity.X = dust14.velocity.X * 2.5f;
											Main.dust[num14].scale = 1.3f;
											Main.dust[num14].alpha = 100;
											Main.dust[num14].noGravity = true;
										}
										SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
								}
								else
								{
									for (int num15 = 0; num15 < 10; num15++)
									{
										int num16 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
										Dust dust15 = Main.dust[num16];
										dust15.velocity.Y = dust15.velocity.Y - 1.5f;
										Dust dust16 = Main.dust[num16];
										dust16.velocity.X = dust16.velocity.X * 2.5f;
										Main.dust[num16].scale = 1.3f;
										Main.dust[num16].alpha = 100;
										Main.dust[num16].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
							}
						}
						if (!this.wet)
						{
							this.lavaWet = false;
							this.honeyWet = false;
							this.shimmerWet = false;
						}
						if (this.wetCount > 0)
						{
							this.wetCount -= 1;
						}
					}
					if (this.shimmerWet)
					{
						this.Shimmer();
					}
					this.oldPosition = this.position;
					this.oldDirection = this.direction;
					int num36;
					this.HandleMovement(wetVelocity, out num35, out num36);
					if (this.AutomaticallyChangesDirection())
					{
						if (this.velocity.X < 0f)
						{
							this.direction = -1;
						}
						else
						{
							this.direction = 1;
						}
					}
					if (!this.active)
					{
						return;
					}
					this.ProjLight();
					if (!this.npcProj && this.friendly && Main.player[this.owner].magicQuiver && this.extraUpdates < 1 && this.arrow)
					{
						this.extraUpdates = 1;
					}
					if (this.type == 2 || this.type == 82)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
					}
					else if (this.type == 172)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
					}
					else if (this.type == 103)
					{
						int num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num17].noGravity = true;
							Main.dust[num17].scale *= 2f;
						}
					}
					else if (this.type == 278)
					{
						int num18 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num18].noGravity = true;
							Main.dust[num18].scale *= 1.5f;
						}
					}
					else if (this.type == 4)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.1f);
						}
					}
					else if (this.type == 5)
					{
						num36 = Main.rand.Next(3);
						int num19;
						if (num36 != 0)
						{
							if (num36 != 1)
							{
								num19 = 58;
							}
							else
							{
								num19 = 57;
							}
						}
						else
						{
							num19 = 15;
						}
						Dust.NewDust(this.position, this.width, this.height, num19, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					this.Damage();
					if (this.type == 434 && this.localAI[0] == 0f && this.numUpdates == 0)
					{
						this.extraUpdates = 1;
						this.velocity = Vector2.Zero;
						this.localAI[0] = 1f;
						this.localAI[1] = 0.9999f;
						this.netUpdate = true;
					}
					if (Main.netMode != 1 && (this.type == 99 || this.type == 1013 || this.type == 655 || this.type == 727 || this.type == 1014 || this.type == 1021))
					{
						Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 3);
					}
					if (ProjectileID.Sets.TrailingMode[this.type] == 0)
					{
						for (int num20 = this.oldPos.Length - 1; num20 > 0; num20--)
						{
							this.oldPos[num20] = this.oldPos[num20 - 1];
						}
						this.oldPos[0] = this.position;
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 1)
					{
						if (this.frameCounter == 0 || this.oldPos[0] == Vector2.Zero)
						{
							for (int num21 = this.oldPos.Length - 1; num21 > 0; num21--)
							{
								this.oldPos[num21] = this.oldPos[num21 - 1];
							}
							this.oldPos[0] = this.position;
							if (this.velocity == Vector2.Zero && this.type == 466)
							{
								float num22 = this.rotation + 1.5707964f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
								float num23 = (float)Main.rand.NextDouble() * 2f + 2f;
								Vector2 vector;
								vector..ctor((float)Math.Cos((double)num22) * num23, (float)Math.Sin((double)num22) * num23);
								int num24 = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector.X, vector.Y, 0, default(Color), 1f);
								Main.dust[num24].noGravity = true;
								Main.dust[num24].scale = 1.7f;
							}
							if (this.velocity == Vector2.Zero && this.type == 580)
							{
								float num25 = this.rotation + 1.5707964f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
								float num26 = (float)Main.rand.NextDouble() * 2f + 2f;
								Vector2 vector2;
								vector2..ctor((float)Math.Cos((double)num25) * num26, (float)Math.Sin((double)num25) * num26);
								int num27 = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y, 0, default(Color), 1f);
								Main.dust[num27].noGravity = true;
								Main.dust[num27].scale = 1.7f;
							}
						}
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 2)
					{
						for (int num28 = this.oldPos.Length - 1; num28 > 0; num28--)
						{
							this.oldPos[num28] = this.oldPos[num28 - 1];
							this.oldRot[num28] = this.oldRot[num28 - 1];
							this.oldSpriteDirection[num28] = this.oldSpriteDirection[num28 - 1];
						}
						this.oldPos[0] = this.position;
						this.oldRot[0] = this.rotation;
						this.oldSpriteDirection[0] = this.spriteDirection;
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 3)
					{
						for (int num29 = this.oldPos.Length - 1; num29 > 0; num29--)
						{
							this.oldPos[num29] = this.oldPos[num29 - 1];
							this.oldRot[num29] = this.oldRot[num29 - 1];
							this.oldSpriteDirection[num29] = this.oldSpriteDirection[num29 - 1];
						}
						this.oldPos[0] = this.position;
						this.oldRot[0] = this.rotation;
						this.oldSpriteDirection[0] = this.spriteDirection;
						float amount = 0.65f;
						int num30 = 1;
						for (int num31 = 0; num31 < num30; num31++)
						{
							for (int num32 = this.oldPos.Length - 1; num32 > 0; num32--)
							{
								if (!(this.oldPos[num32] == Vector2.Zero))
								{
									if (this.oldPos[num32].Distance(this.oldPos[num32 - 1]) > 2f)
									{
										this.oldPos[num32] = Vector2.Lerp(this.oldPos[num32], this.oldPos[num32 - 1], amount);
									}
									this.oldRot[num32] = (this.oldPos[num32 - 1] - this.oldPos[num32]).SafeNormalize(Vector2.Zero).ToRotation();
								}
							}
						}
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 4)
					{
						Vector2 vector3 = Main.player[this.owner].position - Main.player[this.owner].oldPosition;
						for (int num33 = this.oldPos.Length - 1; num33 > 0; num33--)
						{
							this.oldPos[num33] = this.oldPos[num33 - 1];
							this.oldRot[num33] = this.oldRot[num33 - 1];
							this.oldSpriteDirection[num33] = this.oldSpriteDirection[num33 - 1];
							if (this.numUpdates == 0 && this.oldPos[num33] != Vector2.Zero)
							{
								this.oldPos[num33] += vector3;
							}
						}
						this.oldPos[0] = this.position;
						this.oldRot[0] = this.rotation;
						this.oldSpriteDirection[0] = this.spriteDirection;
					}
					else if (ProjectileID.Sets.TrailingMode[this.type] == 5)
					{
						for (int num34 = this.oldPos.Length - 1; num34 > 0; num34--)
						{
							this.oldPos[num34] = this.oldPos[num34 - 1];
							this.oldRot[num34] = this.oldRot[num34 - 1];
							this.oldSpriteDirection[num34] = this.oldSpriteDirection[num34 - 1];
						}
						this.oldPos[0] = this.position;
						this.oldRot[0] = this.velocity.ToRotation();
						this.oldSpriteDirection[0] = this.spriteDirection;
					}
					if (ProjectileID.Sets.IsADD2Turret[this.type] && DD2Event.Ongoing)
					{
						this.timeLeft++;
					}
					this.timeLeft--;
					if (this.timeLeft <= 0)
					{
						this.Kill();
					}
					if (this.penetrate == 0)
					{
						this.Kill();
					}
					if (this.active && this.owner == Main.myPlayer)
					{
						if (this.netUpdate2)
						{
							this.netUpdate = true;
						}
						if (!this.active)
						{
							this.netSpam = 0;
						}
						if (this.netUpdate)
						{
							if (this.netSpam < 60)
							{
								this.netSpam += 5;
								NetMessage.SendData(27, -1, -1, null, i, 0f, 0f, 0f, 0, 0, 0);
								this.netUpdate2 = false;
							}
							else
							{
								this.netUpdate2 = true;
							}
						}
						if (this.netSpam > 0)
						{
							this.netSpam--;
						}
					}
				}
			}
			this.netUpdate = false;
		}

		// Token: 0x06000D10 RID: 3344 RVA: 0x00302DC4 File Offset: 0x00300FC4
		private bool AutomaticallyChangesDirection()
		{
			return (this.aiStyle != 3 || this.ai[0] != 1f) && (this.aiStyle != 7 || this.ai[0] != 1f) && (this.aiStyle != 13 || this.ai[0] != 1f) && this.aiStyle != 65 && this.aiStyle != 69 && this.aiStyle != 114 && this.aiStyle != 123 && this.aiStyle != 112 && !this.manualDirectionChange && this.aiStyle != 67 && this.aiStyle != 26 && this.aiStyle != 15 && this.aiStyle != 150;
		}

		// Token: 0x06000D11 RID: 3345 RVA: 0x00302E8C File Offset: 0x0030108C
		private void UpdateEnchantmentVisuals()
		{
			if (this.npcProj)
			{
				return;
			}
			Vector2 boxPosition = this.position;
			int boxWidth = this.width;
			int boxHeight = this.height;
			if (this.aiStyle == 190 || this.aiStyle == 191)
			{
				for (float num = -0.7853982f; num <= 0.7853982f; num += 1.5707964f)
				{
					Rectangle r = Utils.CenteredRectangle(base.Center + (this.rotation + num).ToRotationVector2() * 70f * this.scale, new Vector2(60f * this.scale, 60f * this.scale));
					this.EmitEnchantmentVisualsAt(r.TopLeft(), r.Width, r.Height);
				}
				return;
			}
			if (ProjectileID.Sets.IsAWhip[this.type])
			{
				this.WhipPointsForCollision.Clear();
				Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
				Vector2 vector = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1];
				this.EmitEnchantmentVisualsAt(new Vector2(vector.X - (float)(this.width / 2), vector.Y - (float)(this.height / 2)), this.width, this.height);
				return;
			}
			this.EmitEnchantmentVisualsAt(boxPosition, boxWidth, boxHeight);
		}

		/// <summary>
		/// Spawns weapon enchantment visuals the specified location. <paramref name="boxPosition" /> is the top left corner of the intended spawn area and <paramref name="boxWidth" /> and <paramref name="boxHeight" /> dictate the spawn area.
		/// <para /> This method is automatically called for all projectiles that are not <see cref="F:Terraria.Projectile.npcProj" /> and not <see cref="F:Terraria.Projectile.noEnchantmentVisuals" />. Modders can use <see cref="F:Terraria.Projectile.noEnchantmentVisuals" /> to prevent the automatic calling of this method and manually call this method in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> to customize the intended enchantment visuals position. Set <see cref="F:Terraria.Projectile.noEnchantments" /> to true on projectiles that shouldn't have enchantment visuals or effects at all.
		/// </summary>
		// Token: 0x06000D12 RID: 3346 RVA: 0x00302FDC File Offset: 0x003011DC
		public void EmitEnchantmentVisualsAt(Vector2 boxPosition, int boxWidth, int boxHeight)
		{
			CombinedHooks.EmitEnchantmentVisualsAt(this, boxPosition, boxWidth, boxHeight);
			Player player = Main.player[this.owner];
			if (player.frostBurn && (this.melee || this.ranged) && this.friendly && !this.hostile && !this.noEnchantments && Main.rand.Next(2 * (1 + this.extraUpdates)) == 0)
			{
				int num = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.7f;
				Dust dust = Main.dust[num];
				dust.velocity.Y = dust.velocity.Y - 0.5f;
			}
			if (this.melee && player.magmaStone && !this.noEnchantments && Main.rand.Next(3) != 0)
			{
				int num2 = Dust.NewDust(new Vector2(boxPosition.X - 4f, boxPosition.Y - 4f), boxWidth + 8, boxHeight + 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num2].scale = 1.5f;
				}
				Main.dust[num2].noGravity = true;
				Dust dust2 = Main.dust[num2];
				dust2.velocity.X = dust2.velocity.X * 2f;
				Dust dust3 = Main.dust[num2];
				dust3.velocity.Y = dust3.velocity.Y * 2f;
			}
			if ((!this.melee && !ProjectileID.Sets.IsAWhip[this.type]) || player.meleeEnchant <= 0 || this.noEnchantments)
			{
				return;
			}
			if (player.meleeEnchant == 1 && Main.rand.Next(3) == 0)
			{
				int num3 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].fadeIn = 1.5f;
				Main.dust[num3].velocity *= 0.25f;
			}
			if (player.meleeEnchant == 1)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num4 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].fadeIn = 1.5f;
					Main.dust[num4].velocity *= 0.25f;
					return;
				}
			}
			else if (player.meleeEnchant == 2)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 75, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 0.7f;
					Dust dust4 = Main.dust[num5];
					dust4.velocity.Y = dust4.velocity.Y - 0.5f;
					return;
				}
			}
			else if (player.meleeEnchant == 3)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity *= 0.7f;
					Dust dust5 = Main.dust[num6];
					dust5.velocity.Y = dust5.velocity.Y - 0.5f;
					return;
				}
			}
			else if (player.meleeEnchant == 4)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num7 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
					Main.dust[num7].noGravity = true;
					Dust dust6 = Main.dust[num7];
					dust6.velocity.X = dust6.velocity.X / 2f;
					Dust dust7 = Main.dust[num7];
					dust7.velocity.Y = dust7.velocity.Y / 2f;
					return;
				}
			}
			else if (player.meleeEnchant == 5)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 169, 0f, 0f, 100, default(Color), 1f);
					Dust dust8 = Main.dust[num8];
					dust8.velocity.X = dust8.velocity.X + (float)this.direction;
					Dust dust9 = Main.dust[num8];
					dust9.velocity.Y = dust9.velocity.Y + 0.2f;
					Main.dust[num8].noGravity = true;
					return;
				}
			}
			else if (player.meleeEnchant == 6)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, 0f, 0f, 100, default(Color), 1f);
					Dust dust10 = Main.dust[num9];
					dust10.velocity.X = dust10.velocity.X + (float)this.direction;
					Dust dust11 = Main.dust[num9];
					dust11.velocity.Y = dust11.velocity.Y + 0.2f;
					Main.dust[num9].noGravity = true;
					return;
				}
			}
			else if (player.meleeEnchant == 7)
			{
				Vector2 vector = this.velocity;
				if (vector.Length() > 4f)
				{
					vector *= 4f / vector.Length();
				}
				if (Main.rand.Next(20) == 0)
				{
					int num10 = Main.rand.Next(139, 143);
					int num11 = Dust.NewDust(boxPosition, boxWidth, boxHeight, num10, vector.X, vector.Y, 0, default(Color), 1.2f);
					Dust dust12 = Main.dust[num11];
					dust12.velocity.X = dust12.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust13 = Main.dust[num11];
					dust13.velocity.Y = dust13.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust14 = Main.dust[num11];
					dust14.velocity.X = dust14.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust15 = Main.dust[num11];
					dust15.velocity.Y = dust15.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num11].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Main.rand.Next(276, 283);
					int num13 = Gore.NewGore(this.position, vector, num12, 1f);
					Gore gore = Main.gore[num13];
					gore.velocity.X = gore.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore gore2 = Main.gore[num13];
					gore2.velocity.Y = gore2.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Main.gore[num13].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Gore gore3 = Main.gore[num13];
					gore3.velocity.X = gore3.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Gore gore4 = Main.gore[num13];
					gore4.velocity.Y = gore4.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					return;
				}
			}
			else if (player.meleeEnchant == 8 && Main.rand.Next(4) == 0)
			{
				int num14 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 46, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num14].noGravity = true;
				Main.dust[num14].fadeIn = 1.5f;
				Main.dust[num14].velocity *= 0.25f;
			}
		}

		// Token: 0x06000D13 RID: 3347 RVA: 0x0030391C File Offset: 0x00301B1C
		private unsafe void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
		{
			bool flag = false;
			overrideWidth = -1;
			overrideHeight = -1;
			bool flag2 = false;
			bool? flag3 = ProjectileID.Sets.ForcePlateDetection[this.type];
			bool flag4 = flag3 != null && !flag3.Value;
			bool flag5 = flag3 != null && flag3.Value;
			if (this.tileCollide)
			{
				Vector2 lastVelocity = this.velocity;
				bool flag6 = true;
				Vector2? vector = null;
				if (Main.projPet[this.type])
				{
					flag6 = false;
					if (Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - 12f > this.position.Y + (float)this.height)
					{
						flag6 = true;
					}
				}
				if (this.type == 500)
				{
					flag6 = false;
					if (Main.player[this.owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (this.type == 653 || this.type == 668)
				{
					flag6 = false;
					if (Main.player[this.owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (this.aiStyle == 62)
				{
					flag6 = true;
				}
				if (this.aiStyle == 66)
				{
					flag6 = true;
				}
				if (this.type == 317)
				{
					flag6 = true;
				}
				if (this.type == 373)
				{
					flag6 = true;
				}
				if (this.aiStyle == 53)
				{
					flag6 = false;
				}
				if (this.type == 9 || this.type == 12 || this.type == 15 || this.type == 13)
				{
					flag6 = false;
				}
				if (this.aiStyle == 10 && ProjectileID.Sets.FallingBlockDoesNotFallThroughPlatforms[this.type])
				{
					flag6 = false;
				}
				if (this.type == 24)
				{
					flag6 = false;
				}
				int num54 = this.type;
				if (num54 <= 679)
				{
					switch (num54)
					{
					case 663:
					case 665:
					case 667:
						break;
					case 664:
					case 666:
						goto IL_268;
					default:
						if (num54 - 677 > 2)
						{
							goto IL_268;
						}
						break;
					}
				}
				else if (num54 - 688 > 5)
				{
					if (num54 == 759)
					{
						flag6 = true;
						goto IL_268;
					}
					if (num54 != 1020)
					{
						goto IL_268;
					}
					float num = MathHelper.WrapAngle(this.rotation);
					flag6 = (num >= 1.5707964f || num < -1.5707964f);
					goto IL_268;
				}
				flag6 = false;
				IL_268:
				if (this.decidesManualFallThrough)
				{
					flag6 = this.shouldFallThrough;
				}
				if (this.type == 771 || this.type == 822 || this.type == 823 || this.type == 843 || this.type == 846 || this.type == 845 || this.type == 852)
				{
					overrideWidth = this.width;
					overrideHeight = 34;
					vector = new Vector2?(new Vector2(0.75f, 0.75f));
				}
				if (this.type == 969)
				{
					overrideWidth = 18;
					overrideHeight = 32;
				}
				if (this.type == 824 || this.type == 839 || this.type == 840 || this.type == 850 || this.type == 853)
				{
					overrideWidth = this.width;
					overrideHeight = 58;
					vector = new Vector2?(new Vector2(0.75f, 0.75f));
				}
				if (this.type == 826 || this.type == 830 || this.type == 838)
				{
					overrideWidth = this.width;
					overrideHeight = 38;
					vector = new Vector2?(new Vector2(0.75f, 0.75f));
				}
				if (this.type == 828 || this.type == 829 || this.type == 827 || this.type == 844)
				{
					overrideWidth = this.width;
					overrideHeight = 22;
					vector = new Vector2?(new Vector2(0.75f, 0.75f));
				}
				if (this.aiStyle == 29 || this.type == 28 || this.aiStyle == 49 || this.type == 906 || this.type == 903 || this.type == 904 || this.type == 910)
				{
					overrideWidth = this.width - 8;
					overrideHeight = this.height - 8;
				}
				else if (this.type == 250 || this.type == 267 || this.type == 297 || this.type == 323 || this.type == 3 || this.type == 711)
				{
					overrideWidth = 6;
					overrideHeight = 6;
				}
				else if (this.type == 308)
				{
					overrideWidth = 26;
					overrideHeight = this.height;
				}
				else if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693)
				{
					overrideWidth = 16;
					overrideHeight = this.height;
				}
				else if (this.type == 688 || this.type == 689 || this.type == 690)
				{
					overrideWidth = 16;
					overrideHeight = this.height;
					vector = new Vector2?(new Vector2(0.5f, 1f));
				}
				else if (this.type == 669 || this.type == 706)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (this.type == 261 || this.type == 277)
				{
					overrideWidth = 26;
					overrideHeight = 26;
				}
				else if (this.type == 481 || this.type == 491 || this.type == 106 || this.type == 262 || this.type == 271 || this.type == 270 || this.type == 272 || this.type == 273 || this.type == 274 || this.type == 280 || this.type == 288 || this.type == 301 || this.type == 320 || this.type == 333 || this.type == 335 || this.type == 343 || this.type == 344 || this.type == 497 || this.type == 496 || this.type == 6 || this.type == 19 || this.type == 113 || this.type == 52 || this.type == 520 || this.type == 523 || this.type == 585 || this.type == 598 || this.type == 599 || this.type == 636 || this.type == 837 || this.type == 861 || this.type == 867 || this.type == 971 || this.type == 975 || this.type == 1000)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (this.type == 514)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (this.type == 248 || this.type == 247 || this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685 || this.type == 757 || this.type == 928)
				{
					overrideWidth = this.width - 12;
					overrideHeight = this.height - 12;
				}
				else if (this.aiStyle == 18 || this.type == 254)
				{
					overrideWidth = this.width - 36;
					overrideHeight = this.height - 36;
				}
				else if (this.type == 182 || this.type == 190 || this.type == 33 || this.type == 229 || this.type == 237 || this.type == 243 || this.type == 866)
				{
					overrideWidth = this.width - 20;
					overrideHeight = this.height - 20;
				}
				else if (this.aiStyle == 27)
				{
					overrideWidth = this.width - 12;
					overrideHeight = this.height - 12;
				}
				else if (this.type == 533 && this.ai[0] >= 6f)
				{
					overrideWidth = this.width + 6;
					overrideHeight = this.height + 6;
				}
				else if (this.type == 755 && this.ai[0] >= 0f)
				{
					overrideWidth = this.width + 6;
					overrideHeight = this.height + 6;
				}
				else if (this.type == 759)
				{
					if (this.velocity.X != lastVelocity.X)
					{
						this.velocity.X = 0f - lastVelocity.X;
					}
					if (this.velocity.Y != lastVelocity.Y)
					{
						this.velocity.Y = 0f - lastVelocity.Y;
					}
				}
				else if (this.type == 582 || this.type == 634 || this.type == 635 || this.type == 902)
				{
					overrideWidth = 8;
					overrideHeight = 8;
				}
				else if (this.type == 617)
				{
					overrideWidth = (int)(20f * this.scale);
					overrideHeight = (int)(20f * this.scale);
				}
				else if (this.type == 304)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (this.aiStyle == 9)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (this.type == 931)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				Vector2 hitboxCenterFrac = vector ?? new Vector2(0.5f);
				int num2 = (overrideWidth != -1) ? overrideWidth : this.width;
				int num3 = (overrideHeight != -1) ? overrideHeight : this.height;
				if (ProjectileLoader.TileCollideStyle(this, ref num2, ref num3, ref flag6, ref hitboxCenterFrac) && ((this.type != 440 && this.type != 449 && this.type != 606) || this.ai[1] != 1f) && (this.type != 466 || this.localAI[1] != 1f) && (this.type != 580 || this.localAI[1] <= 0f) && (this.type != 640 || this.localAI[1] <= 0f))
				{
					Vector2 vector2 = this.position + new Vector2((float)this.width, (float)this.height) * 0.5f - new Vector2((float)num2, (float)num3) * hitboxCenterFrac;
					if (this.aiStyle == 10)
					{
						this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
						if (this.type >= 411 && this.type <= 414)
						{
							this.velocity = Collision.AnyCollisionWithSpecificTiles(vector2, this.velocity, num2, num3, TileID.Sets.Falling, true);
						}
					}
					else if (this.wet)
					{
						if (this.shimmerWet)
						{
							Vector2 vector3 = this.velocity;
							this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
							wetVelocity = this.velocity * 0.375f;
							if (this.velocity.X != vector3.X)
							{
								wetVelocity.X = this.velocity.X;
							}
							if (this.velocity.Y != vector3.Y)
							{
								wetVelocity.Y = this.velocity.Y;
							}
						}
						else if (this.honeyWet)
						{
							Vector2 vector4 = this.velocity;
							this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
							wetVelocity = this.velocity * 0.25f;
							if (this.velocity.X != vector4.X)
							{
								wetVelocity.X = this.velocity.X;
							}
							if (this.velocity.Y != vector4.Y)
							{
								wetVelocity.Y = this.velocity.Y;
							}
						}
						else
						{
							Vector2 vector5 = this.velocity;
							this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
							wetVelocity = this.velocity * 0.5f;
							if (this.velocity.X != vector5.X)
							{
								wetVelocity.X = this.velocity.X;
							}
							if (this.velocity.Y != vector5.Y)
							{
								wetVelocity.Y = this.velocity.Y;
							}
						}
						if (!Main.projPet[this.type])
						{
							Vector4 vector6 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
							Vector2 vector7 = this.position - vector2;
							if (this.aiStyle == 137)
							{
								if (vector2.Y != vector6.Y)
								{
									flag = true;
								}
								if (this.velocity.Y != vector6.W)
								{
									flag = true;
								}
								vector2.Y = vector6.Y;
								this.position.Y = vector2.Y + vector7.Y;
								this.velocity.Y = vector6.W;
							}
							else
							{
								if (vector2.X != vector6.X)
								{
									flag = true;
								}
								if (vector2.Y != vector6.Y)
								{
									flag = true;
								}
								if (this.velocity.X != vector6.Z)
								{
									flag = true;
								}
								if (this.velocity.Y != vector6.W)
								{
									flag = true;
								}
								vector2.X = vector6.X;
								vector2.Y = vector6.Y;
								this.position = vector2 + vector7;
								this.velocity.X = vector6.Z;
								this.velocity.Y = vector6.W;
							}
						}
					}
					else
					{
						int num4 = Math.Min(num2, num3);
						if (num4 < 3)
						{
							num4 = 3;
						}
						if (num4 > 16)
						{
							num4 = 16;
						}
						if (this.velocity.Length() > (float)num4)
						{
							Vector2 vector26 = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
							float num5 = this.velocity.Length();
							float num6 = (float)num4;
							Vector2 vector8 = this.velocity.SafeNormalize(Vector2.Zero);
							if (vector26.Y == 0f)
							{
								vector8.Y = 0f;
							}
							Vector2 zero = Vector2.Zero;
							Vector2 zero2 = Vector2.Zero;
							Vector2 zero3 = Vector2.Zero;
							int num7 = 0;
							while (num5 > 0f)
							{
								num7++;
								if (num7 > 300)
								{
									break;
								}
								Vector2 vector9 = vector2;
								float num8 = num5;
								if (num8 > num6)
								{
									num8 = num6;
								}
								num5 -= num8;
								Vector2 vector10 = vector8 * num8;
								Vector2 vector11 = Collision.TileCollision(vector2, vector10, num2, num3, flag6, flag6, 1);
								vector2 += vector11;
								this.velocity = vector11;
								if (!Main.projPet[this.type])
								{
									Vector4 vector12 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
									Vector2 vector13 = this.position - vector2;
									if (this.aiStyle == 137)
									{
										if (vector2.Y != vector12.Y)
										{
											flag = true;
										}
										if (this.velocity.Y != vector12.W)
										{
											flag = true;
										}
										vector2.Y = vector12.Y;
										this.position.Y = vector2.Y + vector13.Y;
										this.velocity.Y = vector12.W;
									}
									else
									{
										if (vector2.X != vector12.X)
										{
											flag = true;
										}
										if (vector2.Y != vector12.Y)
										{
											flag = true;
										}
										if (this.velocity.X != vector12.Z)
										{
											flag = true;
										}
										if (this.velocity.Y != vector12.W)
										{
											flag = true;
										}
										vector2.X = vector12.X;
										vector2.Y = vector12.Y;
										this.position = vector2 + vector13;
										this.velocity.X = vector12.Z;
										this.velocity.Y = vector12.W;
									}
								}
								flag2 = true;
								if (this.owner == Main.myPlayer && vector2 != vector9 && !flag4)
								{
									Collision.SwitchTiles(vector2, num2, num3, vector9, 4);
								}
								vector11 = this.velocity;
								zero += vector11;
							}
							this.velocity = zero;
							if (Math.Abs(this.velocity.X - lastVelocity.X) < 0.0001f)
							{
								this.velocity.X = lastVelocity.X;
							}
							if (Math.Abs(this.velocity.Y - lastVelocity.Y) < 0.0001f)
							{
								this.velocity.Y = lastVelocity.Y;
							}
							if (!Main.projPet[this.type])
							{
								Vector4 vector14 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
								Vector2 vector15 = this.position - vector2;
								if (this.aiStyle == 137)
								{
									if (vector2.Y != vector14.Y)
									{
										flag = true;
									}
									if (this.velocity.Y != vector14.W)
									{
										flag = true;
									}
									vector2.Y = vector14.Y;
									this.position.Y = vector2.Y + vector15.Y;
									this.velocity.Y = vector14.W;
								}
								else
								{
									if (vector2.X != vector14.X)
									{
										flag = true;
									}
									if (vector2.Y != vector14.Y)
									{
										flag = true;
									}
									if (this.velocity.X != vector14.Z)
									{
										flag = true;
									}
									if (this.velocity.Y != vector14.W)
									{
										flag = true;
									}
									vector2.X = vector14.X;
									vector2.Y = vector14.Y;
									this.position = vector2 + vector15;
									this.velocity.X = vector14.Z;
									this.velocity.Y = vector14.W;
								}
							}
						}
						else
						{
							this.velocity = Collision.TileCollision(vector2, this.velocity, num2, num3, flag6, flag6, 1);
							if (!Main.projPet[this.type])
							{
								Vector4 vector16 = Collision.SlopeCollision(vector2, this.velocity, num2, num3, 0f, true);
								Vector2 vector17 = this.position - vector2;
								if (this.aiStyle == 137)
								{
									if (vector2.Y != vector16.Y)
									{
										flag = true;
									}
									if (this.velocity.Y != vector16.W)
									{
										flag = true;
									}
									vector2.Y = vector16.Y;
									this.position.Y = vector2.Y + vector17.Y;
									this.velocity.Y = vector16.W;
								}
								else
								{
									if (vector2.X != vector16.X)
									{
										flag = true;
									}
									if (vector2.Y != vector16.Y)
									{
										flag = true;
									}
									if (this.velocity.X != vector16.Z)
									{
										flag = true;
									}
									if (this.velocity.Y != vector16.W)
									{
										flag = true;
									}
									vector2.X = vector16.X;
									vector2.Y = vector16.Y;
									this.position = vector2 + vector17;
									this.velocity.X = vector16.Z;
									this.velocity.Y = vector16.W;
								}
							}
						}
					}
				}
				if (lastVelocity != this.velocity)
				{
					flag = true;
				}
				if (flag)
				{
					if (this.owner == Main.myPlayer && this.CanCutTiles() && (this.friendly || this.hostile) && this.damage > 0)
					{
						int num9 = (int)(this.position.X + this.velocity.X - 1f) / 16;
						int num10 = (int)((this.position.X + (float)this.width + this.velocity.X + 1f) / 16f) + 1;
						int num11 = (int)(this.position.Y + this.velocity.Y - 1f) / 16;
						int num12 = (int)((this.position.Y + (float)this.height + this.velocity.Y + 1f) / 16f) + 1;
						if (num9 < 0)
						{
							num9 = 0;
						}
						if (num10 > Main.maxTilesX)
						{
							num10 = Main.maxTilesX;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						if (num12 > Main.maxTilesY)
						{
							num12 = Main.maxTilesY;
						}
						bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
						for (int i = num9; i < num10; i++)
						{
							for (int j = num11; j < num12; j++)
							{
								if (Main.tile[i, j] != null && !tileCutIgnorance[(int)(*Main.tile[i, j].type)] && *Main.tile[i, j].type == 484 && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
								{
									WorldGen.KillTile(i, j, false, false, false);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
									}
								}
							}
						}
					}
					if (Main.rand.Next(3) == 0 && this.owner == Main.myPlayer && this.CanCutTiles() && (this.friendly || this.hostile) && this.damage > 0)
					{
						int num13 = (int)(this.position.X + this.velocity.X - 1f) / 16;
						int num14 = (int)((this.position.X + (float)this.width + this.velocity.X + 1f) / 16f) + 1;
						int num15 = (int)(this.position.Y + this.velocity.Y - 1f) / 16;
						int num16 = (int)((this.position.Y + (float)this.height + this.velocity.Y + 1f) / 16f) + 1;
						if (num13 < 0)
						{
							num13 = 0;
						}
						if (num14 > Main.maxTilesX)
						{
							num14 = Main.maxTilesX;
						}
						if (num15 < 0)
						{
							num15 = 0;
						}
						if (num16 > Main.maxTilesY)
						{
							num16 = Main.maxTilesY;
						}
						bool[] tileCutIgnorance2 = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
						for (int k = num13; k < num14; k++)
						{
							for (int l = num15; l < num16; l++)
							{
								if (Main.tile[k, l] != null && !tileCutIgnorance2[(int)(*Main.tile[k, l].type)] && TileID.Sets.CrackedBricks[(int)(*Main.tile[k, l].type)] && WorldGen.CanCutTile(k, l, TileCuttingContext.AttackProjectile))
								{
									WorldGen.KillTile(k, l, false, false, false);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 0, (float)k, (float)l, 0f, 0, 0, 0);
									}
								}
							}
						}
					}
					if (ProjectileLoader.OnTileCollide(this, lastVelocity))
					{
						if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693 || this.type == 688 || this.type == 689 || this.type == 690)
						{
							this.position += this.velocity;
							this.velocity = Vector2.Zero;
						}
						else if (this.type == 434)
						{
							this.position += this.velocity;
							this.numUpdates = 0;
						}
						else if (this.type == 1020)
						{
							if (this.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								this.velocity.X = (0f - lastVelocity.X) * 0.25f;
							}
							if (this.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								this.velocity.Y = (0f - lastVelocity.Y) * 0.25f;
							}
						}
						else if (this.type == 601)
						{
							if (Main.netMode != 2 && this.alpha > 0)
							{
								if (this.ai[1] != 0f)
								{
									SoundEngine.PlaySound(SoundID.Item114, new Vector2?(this.position), null);
								}
								else
								{
									SoundEngine.PlaySound(SoundID.Item115, new Vector2?(this.position), null);
								}
							}
							if (this.owner == Main.myPlayer)
							{
								PortalHelper.TryPlacingPortal(this, lastVelocity, this.velocity);
							}
							this.position += this.velocity;
							this.Kill();
						}
						else if (this.type == 985)
						{
							this.position += this.velocity;
							this.velocity = lastVelocity;
							this.velocity *= 0.01f;
							this.localAI[1] = 1f;
						}
						else if (this.type == 451)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.netUpdate = true;
							this.velocity = lastVelocity / 2f;
						}
						else if (this.type == 645)
						{
							this.ai[0] = 0f;
							this.ai[1] = -1f;
							this.netUpdate = true;
						}
						else if (this.type == 584)
						{
							bool flag7 = false;
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = lastVelocity.X * -0.75f;
								flag7 = true;
							}
							if ((this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || this.velocity.Y == 0f)
							{
								this.velocity.Y = lastVelocity.Y * -0.75f;
								flag7 = true;
							}
							if (flag7)
							{
								float num17 = lastVelocity.Length() / this.velocity.Length();
								if (num17 == 0f)
								{
									num17 = 1f;
								}
								this.velocity /= num17;
								this.penetrate--;
							}
						}
						else if (this.type == 532)
						{
							bool flag8 = false;
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = lastVelocity.X * -0.75f;
								flag8 = true;
							}
							if ((this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || this.velocity.Y == 0f)
							{
								this.velocity.Y = lastVelocity.Y * -0.75f;
								flag8 = true;
							}
							if (flag8)
							{
								float num18 = lastVelocity.Length() / this.velocity.Length();
								if (num18 == 0f)
								{
									num18 = 1f;
								}
								this.velocity /= num18;
								this.penetrate--;
								Collision.HitTiles(this.position, lastVelocity, this.width, this.height);
							}
						}
						else if (this.type == 533)
						{
							float num19 = 1f;
							bool flag9 = false;
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = lastVelocity.X * (0f - num19);
								flag9 = true;
							}
							if (this.velocity.Y != lastVelocity.Y || this.velocity.Y == 0f)
							{
								this.velocity.Y = lastVelocity.Y * (0f - num19) * 0.5f;
								flag9 = true;
							}
							if (flag9)
							{
								float num20 = lastVelocity.Length() / this.velocity.Length();
								if (num20 == 0f)
								{
									num20 = 1f;
								}
								this.velocity /= num20;
								if (this.ai[0] == 7f && (double)this.velocity.Y < -0.1)
								{
									this.velocity.Y = this.velocity.Y + 0.1f;
								}
								if (this.ai[0] >= 6f && this.ai[0] < 9f)
								{
									Collision.HitTiles(this.position, lastVelocity, this.width, this.height);
								}
								this.localAI[2] += 30f;
							}
						}
						else if (this.type == 502)
						{
							this.ai[0] += 1f;
							SoundEngine.PlaySound(37, (int)this.position.X, (int)this.position.Y, 5 + (int)this.ai[0], 1f, 0f);
							if (this.ai[0] >= 5f)
							{
								this.position += this.velocity;
								this.Kill();
							}
							else
							{
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = 0f - lastVelocity.Y;
								}
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = 0f - lastVelocity.X;
								}
							}
							Vector2 spinningpoint = new Vector2(0f, -3f - this.ai[0]).RotatedByRandom(3.1415927410125732);
							float num21 = 10f + this.ai[0] * 4f;
							Vector2 vector18;
							vector18..ctor(1.05f, 1f);
							for (float num22 = 0f; num22 < num21; num22 += 1f)
							{
								int num23 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent, 1f);
								Main.dust[num23].position = base.Center;
								Main.dust[num23].velocity = spinningpoint.RotatedBy((double)(6.2831855f * num22 / num21), default(Vector2)) * vector18 * (0.8f + Main.rand.NextFloat() * 0.4f);
								Main.dust[num23].color = Main.hslToRgb(num22 / num21, 1f, 0.5f, byte.MaxValue);
								Main.dust[num23].noGravity = true;
								Main.dust[num23].scale = 1f + this.ai[0] / 3f;
							}
							if (Main.myPlayer == this.owner)
							{
								int num24 = this.width;
								int num25 = this.height;
								int num26 = this.penetrate;
								this.position = base.Center;
								this.width = (this.height = 40 + 8 * (int)this.ai[0]);
								base.Center = this.position;
								this.penetrate = -1;
								this.Damage();
								this.penetrate = num26;
								this.position = base.Center;
								this.width = num24;
								this.height = num25;
								base.Center = this.position;
							}
						}
						else if (this.type == 444)
						{
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = 0f - lastVelocity.X;
							}
							if (this.velocity.Y != lastVelocity.Y)
							{
								this.velocity.Y = 0f - lastVelocity.Y;
							}
							this.ai[0] = this.velocity.ToRotation();
						}
						else if (this.type == 617)
						{
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = (0f - lastVelocity.X) * 0.35f;
							}
							if (this.velocity.Y != lastVelocity.Y)
							{
								this.velocity.Y = (0f - lastVelocity.Y) * 0.35f;
							}
						}
						else if (this.type == 440 || this.type == 449 || this.type == 606)
						{
							if (this.ai[1] != 1f)
							{
								this.ai[1] = 1f;
								this.position += this.velocity;
								this.velocity = lastVelocity;
							}
						}
						else if (this.type == 85)
						{
							this.velocity = lastVelocity * 0.95f;
							this.position -= this.velocity;
						}
						else if (this.type == 466 || this.type == 580 || this.type == 640)
						{
							if (this.localAI[1] < 1f)
							{
								this.localAI[1] += 2f;
								this.position += this.velocity;
								this.velocity = Vector2.Zero;
							}
						}
						else if (this.type == 851)
						{
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = (0f - lastVelocity.X) * 0.8f;
							}
							if (this.velocity.Y != lastVelocity.Y)
							{
								this.velocity.Y = (0f - lastVelocity.Y) * 0.5f;
							}
						}
						else if (this.type == 855)
						{
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = 0f - lastVelocity.X;
							}
							if (this.velocity.Y != lastVelocity.Y)
							{
								this.velocity.Y = 0f - lastVelocity.Y;
								if (lastVelocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.25f;
								}
							}
						}
						else if (this.aiStyle == 54)
						{
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = lastVelocity.X * -0.6f;
							}
							if (this.velocity.Y != lastVelocity.Y)
							{
								this.velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (this.type == 861)
						{
							float num27 = -1f;
							if (this.ai[1] == 1f)
							{
								num27 = -0.6f;
							}
							if (this.velocity.X != lastVelocity.X)
							{
								this.velocity.X = lastVelocity.X * num27;
							}
							if (this.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7)
							{
								this.velocity.Y = lastVelocity.Y * num27;
							}
							if (Math.Abs(this.velocity.Y) < 0.5f)
							{
								this.velocity.Y = 0f;
							}
							if (this.ai[1] != 1f)
							{
								this.netUpdate = true;
							}
							this.ai[1] = 1f;
						}
						else if (!Main.projPet[this.type] && this.type != 500 && this.type != 820 && this.aiStyle != 160 && this.type != 650 && this.type != 882 && this.type != 888 && this.type != 894 && this.type != 895 && this.type != 898 && this.type != 901 && this.type != 957)
						{
							if (this.aiStyle == 99)
							{
								if (this.type >= 556 && this.type <= 561)
								{
									bool flag10 = false;
									if (this.velocity.X != lastVelocity.X)
									{
										flag10 = true;
										this.velocity.X = lastVelocity.X * -1f;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										flag10 = true;
										this.velocity.Y = lastVelocity.Y * -1f;
									}
									if (flag10)
									{
										Vector2 vector19 = Main.player[this.owner].Center - base.Center;
										vector19.Normalize();
										vector19 *= this.velocity.Length();
										vector19 *= 0.25f;
										this.velocity *= 0.75f;
										this.velocity += vector19;
										if (this.velocity.Length() > 6f)
										{
											this.velocity *= 0.5f;
										}
									}
								}
							}
							else if (this.type == 604)
							{
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = 0f - lastVelocity.X;
								}
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (this.type == 379)
							{
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -0.6f;
								}
								if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
								{
									this.velocity.Y = lastVelocity.Y * -0.6f;
								}
							}
							else if (this.type == 491)
							{
								if (this.ai[0] <= 0f)
								{
									this.ai[0] = -10f;
								}
								if (this.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 0f)
								{
									this.velocity.X = lastVelocity.X * -1f;
								}
								if (this.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 0f)
								{
									this.velocity.Y = lastVelocity.Y * -1f;
								}
							}
							else if ((this.type >= 515 && this.type <= 517) || this.type == 637)
							{
								if (this.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
								{
									this.velocity.X = lastVelocity.X * -0.9f;
								}
								if (this.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
								{
									this.velocity.Y = lastVelocity.Y * -0.9f;
								}
							}
							else if (this.type == 921 || this.type == 926 || this.type == 937)
							{
								if (this.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
								{
									this.velocity.X = lastVelocity.X * -0.4f;
								}
								if (this.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
								{
									this.velocity.Y = lastVelocity.Y * -0.95f;
								}
								this.penetrate--;
							}
							else if (this.type == 969)
							{
								if (this.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
								{
									this.velocity.X = lastVelocity.X * -0.75f;
								}
								if (this.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
								{
									this.velocity.Y = lastVelocity.Y * -0.75f;
								}
							}
							else if (this.type == 681)
							{
								this.timeLeft = 4;
							}
							else if (this.type == 409)
							{
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -1f;
								}
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = lastVelocity.Y * -1f;
								}
							}
							else if (this.type == 254)
							{
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -1f;
								}
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = lastVelocity.Y * -1f;
								}
							}
							else if (this.type == 225)
							{
								this.ai[1] += 1f;
								if (this.ai[1] == 1f)
								{
									this.damage = (int)((float)this.damage * 0.66f);
								}
								if (this.ai[1] >= 4f)
								{
									this.Kill();
									return;
								}
								this.velocity.X = 0f - lastVelocity.X;
								this.velocity.Y = 0f - lastVelocity.Y;
								int num28 = this.FindTargetWithLineOfSight(800f);
								if (num28 != -1)
								{
									NPC nPC = Main.npc[num28];
									float t = base.Distance(nPC.Center);
									Vector2 vector20 = -Vector2.UnitY * MathHelper.Lerp((float)nPC.height * 0.1f, (float)nPC.height * 0.5f, Utils.GetLerpValue(0f, 300f, t, false));
									this.velocity = base.DirectionTo(nPC.Center + vector20).SafeNormalize(-Vector2.UnitY) * this.velocity.Length();
									this.netUpdate = true;
								}
							}
							else if (this.type == 285)
							{
								this.ai[1] += 1f;
								if (this.ai[1] == 1f)
								{
									this.damage = (int)((float)this.damage * 0.66f);
								}
								if (this.ai[1] >= 2f)
								{
									this.Kill();
									return;
								}
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -1f;
								}
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = lastVelocity.Y * -1f;
								}
								int num29 = this.FindTargetWithLineOfSight(800f);
								if (num29 != -1)
								{
									NPC nPC2 = Main.npc[num29];
									base.Distance(nPC2.Center);
									this.velocity = base.DirectionTo(nPC2.Center).SafeNormalize(-Vector2.UnitY) * this.velocity.Length();
									this.netUpdate = true;
								}
							}
							else if (this.type == 931)
							{
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -1f;
								}
								if (this.velocity.Y != lastVelocity.Y)
								{
									this.velocity.Y = lastVelocity.Y * -1f;
								}
							}
							else if (this.type == 155)
							{
								if (this.ai[1] > 10f)
								{
									NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", new object[]
									{
										NetworkText.FromKey(Lang.GetProjectileName(this.type).Key, Array.Empty<object>()),
										this.ai[1]
									});
									if (Main.netMode == 0)
									{
										Main.NewText(networkText.ToString(), byte.MaxValue, 240, 20);
									}
									else if (Main.netMode == 2)
									{
										ChatHelper.BroadcastChatMessage(networkText, new Color(255, 240, 20), -1);
									}
								}
								this.ai[1] = 0f;
								if (this.velocity.X != lastVelocity.X)
								{
									this.velocity.X = lastVelocity.X * -0.6f;
								}
								if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
								{
									this.velocity.Y = lastVelocity.Y * -0.6f;
								}
							}
							else if (this.aiStyle == 33)
							{
								if (this.localAI[0] == 0f)
								{
									if (this.wet)
									{
										this.position += lastVelocity / 2f;
									}
									else
									{
										this.position += lastVelocity;
									}
									this.velocity *= 0f;
									this.localAI[0] = 1f;
								}
							}
							else if (this.type != 308 && this.type != 377 && this.type != 966)
							{
								if (this.type == 477)
								{
									if (this.velocity.Y != lastVelocity.Y || this.velocity.X != lastVelocity.X)
									{
										this.penetrate--;
										if (this.penetrate <= 0)
										{
											this.Kill();
										}
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
										if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									if (this.penetrate > 0 && this.owner == Main.myPlayer)
									{
										int[] array = new int[10];
										int num30 = 0;
										int num31 = 700;
										int num32 = 20;
										for (int m = 0; m < 200; m++)
										{
											if (Main.npc[m].CanBeChasedBy(this, false))
											{
												float num33 = (base.Center - Main.npc[m].Center).Length();
												if (num33 > (float)num32 && num33 < (float)num31 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[m].Center, 1, 1))
												{
													array[num30] = m;
													num30++;
													if (num30 >= 9)
													{
														break;
													}
												}
											}
										}
										if (num30 > 0)
										{
											num30 = Main.rand.Next(num30);
											Vector2 vector21 = Main.npc[array[num30]].Center - base.Center;
											float num34 = this.velocity.Length();
											vector21.Normalize();
											this.velocity = vector21 * num34;
											this.netUpdate = true;
										}
									}
								}
								else if (this.type == 94)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.type == 496)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										if (Math.Abs(this.velocity.X) < 1f)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
										else
										{
											this.Kill();
										}
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										if (Math.Abs(this.velocity.Y) < 1f)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
										else
										{
											this.Kill();
										}
									}
								}
								else if (this.type == 311)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
										this.ai[1] += 1f;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
										this.ai[1] += 1f;
									}
									if (this.ai[1] > 4f)
									{
										this.Kill();
									}
								}
								else if (this.type == 312)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
										this.ai[1] += 1f;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
										this.ai[1] += 1f;
									}
								}
								else if (this.type == 522 || this.type == 620)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.type == 524)
								{
									this.ai[0] += 100f;
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.aiStyle == 93)
								{
									if (this.velocity != lastVelocity)
									{
										this.ai[1] = 0f;
										this.ai[0] = 1f;
										this.netUpdate = true;
										this.tileCollide = false;
										this.position += this.velocity;
										this.velocity = lastVelocity;
										this.velocity.Normalize();
										this.velocity *= 3f;
									}
								}
								else if (this.type == 281)
								{
									bool flag11 = Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 2f || this.ai[0] == -1f;
									if (this.ai[0] == -2f || this.ai[0] == -3f)
									{
										flag11 = false;
									}
									if (flag11)
									{
										if (Main.myPlayer == this.owner)
										{
											int num35 = (this.velocity.X > 0f) ? 1 : 2;
											if (this.damage == 0)
											{
												num35 += 2;
											}
											NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y - 4, 614, num35, this.owner);
											this.ai[0] = -3f;
											this.netUpdate = true;
										}
									}
									else
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = (0f - lastVelocity.X) * 0.5f;
										}
										if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = (0f - lastVelocity.Y) * 0.5f;
										}
									}
								}
								else if (this.type == 290 || this.type == 294)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.position.X = this.position.X + this.velocity.X;
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.position.Y = this.position.Y + this.velocity.Y;
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if ((this.type == 181 || this.type == 189 || this.type == 357 || this.type == 566) && this.penetrate > 0)
								{
									if (this.type == 357)
									{
										this.damage = (int)((double)this.damage * 0.9);
									}
									this.penetrate--;
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.type == 307 && this.ai[1] < 5f)
								{
									this.ai[1] += 1f;
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.type == 99 || this.type == 1005 || this.type == 1014)
								{
									if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
									{
										Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
										this.velocity.Y = (0f - lastVelocity.Y) * 0.2f;
									}
									if (this.velocity.X != lastVelocity.X)
									{
										this.Kill();
									}
								}
								else if (this.type == 1021)
								{
									if (this.velocity.Y != lastVelocity.Y)
									{
										if (lastVelocity.Y > 4f)
										{
											Collision.HitTiles(this.position, this.velocity, this.width, this.height);
											SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
											this.velocity.Y = (0f - lastVelocity.Y) * 0.9f;
										}
										else if (lastVelocity.Y > 0f)
										{
											this.localAI[1] = 999f;
										}
									}
									if (this.velocity.X != lastVelocity.X)
									{
										if (this.localAI[1] <= 3f)
										{
											this.velocity.X = lastVelocity.X * -0.75f;
											this.localAI[1] += 1f;
										}
										else
										{
											this.Kill();
										}
									}
								}
								else if (this.type == 1013)
								{
									float num36 = Math.Abs(lastVelocity.X);
									float num37 = Math.Abs(lastVelocity.Y);
									float num38 = 0.95f;
									float num39 = 0.95f;
									if (num36 < 0.5f)
									{
										num38 = 0.1f;
									}
									else if (num36 < 0.75f)
									{
										num38 = 0.25f;
									}
									else if (num36 < 1f)
									{
										num38 = 0.5f;
									}
									if (num37 < 0.5f)
									{
										num39 = 0.1f;
									}
									else if (num37 < 0.75f)
									{
										num39 = 0.25f;
									}
									else if (num37 < 1f)
									{
										num39 = 0.5f;
									}
									bool flag12 = false;
									if (this.velocity.Y != lastVelocity.Y)
									{
										if (Math.Abs(lastVelocity.Y) > 5f)
										{
											flag12 = true;
										}
										this.velocity.Y = (0f - lastVelocity.Y) * num39;
									}
									if (this.velocity.X != lastVelocity.X)
									{
										if (Math.Abs(lastVelocity.X) > 5f)
										{
											flag12 = true;
										}
										this.velocity.X = (0f - lastVelocity.X) * num38;
									}
									if (flag12)
									{
										this.localAI[1] += 1f;
										Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
									if (this.velocity.Length() < 0.1f && this.localAI[0] > 50f)
									{
										this.Kill();
									}
									if (this.localAI[1] > 20f)
									{
										this.Kill();
									}
								}
								else if (this.type == 727)
								{
									int num40 = 30;
									float num41 = 2f;
									float num42 = 2f;
									if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
									{
										Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
										this.velocity.Y = (0f - lastVelocity.Y) * 0.65f;
										if (this.owner == Main.myPlayer)
										{
											int num43 = Main.rand.Next(3, 6);
											float num44 = Main.rand.NextFloat();
											for (float num45 = 0f; num45 < 1f; num45 += 1f / (float)num43)
											{
												Vector2 vector22 = ((num44 + num45) * 6.2831855f).ToRotationVector2() * num42;
												if (vector22.Y > 0f)
												{
													vector22 *= -0.7f;
												}
												Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, vector22, 763, num40, num41, Main.myPlayer, 0f, 0f, 0f);
											}
										}
									}
									if (this.velocity.X != lastVelocity.X)
									{
										this.Kill();
										if (this.owner == Main.myPlayer)
										{
											int num46 = Main.rand.Next(3, 6);
											float num47 = Main.rand.NextFloat();
											for (float num48 = 0f; num48 < 1f; num48 += 1f / (float)num46)
											{
												Vector2 vector23 = ((num47 + num48) * 6.2831855f).ToRotationVector2() * num42;
												if (vector23.Y > 0f)
												{
													vector23 *= -0.7f;
												}
												Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, vector23, 763, num40, num41, Main.myPlayer, 0f, 0f, 0f);
											}
										}
									}
								}
								else if (this.type == 655)
								{
									if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
									{
										Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
										this.velocity.Y = (0f - lastVelocity.Y) * 0.2f;
									}
									if (this.velocity.X != lastVelocity.X)
									{
										this.Kill();
									}
								}
								else if (this.type == 36)
								{
									if (this.penetrate > 1)
									{
										Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
										this.penetrate--;
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
										if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									else
									{
										this.Kill();
									}
								}
								else if (this.aiStyle == 21)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = 0f - lastVelocity.X;
									}
									if (this.velocity.Y != lastVelocity.Y)
									{
										this.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else if (this.aiStyle == 17)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = lastVelocity.X * -0.75f;
									}
									if (this.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
									{
										this.velocity.Y = lastVelocity.Y * -0.7f;
									}
								}
								else if (this.aiStyle == 15)
								{
									this.AI_015_HandleMovementCollision(ref wetVelocity, ref lastVelocity);
								}
								else if (this.aiStyle == 9)
								{
									bool flag13 = this.owner == Main.myPlayer;
									if (this.type == 79)
									{
										bool flag14 = this.ai[0] >= 0f;
										flag13 = (flag13 && !flag14);
										if (flag14)
										{
											if (this.velocity.X != lastVelocity.X)
											{
												this.velocity.X = this.velocity.X * 0.1f;
											}
											if (this.velocity.Y != lastVelocity.Y)
											{
												this.velocity.Y = this.velocity.Y * 0.1f;
											}
										}
									}
									if (flag13)
									{
										this.Kill();
									}
								}
								else if (this.aiStyle == 39)
								{
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									if (this.type == 33 || this.type == 106)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
										if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									else
									{
										this.ai[0] = 1f;
										if (this.aiStyle == 3)
										{
											this.velocity.X = 0f - lastVelocity.X;
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									this.netUpdate = true;
									SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
								else if (this.aiStyle == 3 || this.aiStyle == 13 || this.aiStyle == 69 || this.aiStyle == 109)
								{
									if (this.type == 106)
									{
										Vector2 hitPoint = base.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 8f * this.scale;
										Vector2 normal;
										normal..ctor((float)((this.velocity.X != lastVelocity.X) ? (-(float)Math.Sign(lastVelocity.X)) : 0), (float)((this.velocity.Y != lastVelocity.Y) ? (-(float)Math.Sign(lastVelocity.Y)) : 0));
										this.LightDisc_Bounce(hitPoint, normal);
									}
									Collision.HitTiles(this.position, this.velocity, this.width, this.height);
									if (this.type == 33 || this.type == 106 || this.type == 866)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
										if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									else
									{
										this.ai[0] = 1f;
										if ((this.aiStyle == 3 || this.aiStyle == 109) && this.type != 383)
										{
											this.velocity.X = 0f - lastVelocity.X;
											this.velocity.Y = 0f - lastVelocity.Y;
										}
									}
									this.netUpdate = true;
									SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
								else if (this.aiStyle == 8 && this.type != 96)
								{
									SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
									this.ai[0] += 1f;
									int num49 = 5;
									num54 = this.type;
									if (num54 != 15)
									{
										if (num54 == 253)
										{
											num49 = 8;
										}
									}
									else
									{
										num49 = 6;
									}
									if (this.ai[0] >= (float)num49)
									{
										this.position += this.velocity;
										this.Kill();
									}
									else
									{
										if (this.type == 15 && this.velocity.Y > 4f)
										{
											if (this.velocity.Y != lastVelocity.Y)
											{
												this.velocity.Y = (0f - lastVelocity.Y) * 0.8f;
											}
										}
										else if (this.velocity.Y != lastVelocity.Y)
										{
											this.velocity.Y = 0f - lastVelocity.Y;
										}
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = 0f - lastVelocity.X;
										}
									}
								}
								else if (this.aiStyle == 61)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = lastVelocity.X * -0.3f;
									}
									if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
									{
										this.velocity.Y = lastVelocity.Y * -0.3f;
									}
								}
								else if (this.aiStyle == 14)
								{
									if (this.type == 928)
									{
										int num50 = 0;
										for (int num51 = 1000; num51 >= 0; num51--)
										{
											if (num51 != this.whoAmI && Main.projectile[num51].active && Main.projectile[num51].owner == this.owner && Main.projectile[num51].type == this.type)
											{
												num50++;
												if (num50 >= 2 && this.timeLeft > Main.projectile[num51].timeLeft && Main.projectile[num51].timeLeft > 30)
												{
													Main.projectile[num51].timeLeft = 2;
												}
											}
										}
									}
									if (this.type == 261 && ((this.velocity.X != lastVelocity.X && (lastVelocity.X < -3f || lastVelocity.X > 3f)) || (this.velocity.Y != lastVelocity.Y && (lastVelocity.Y < -3f || lastVelocity.Y > 3f))))
									{
										for (int n = 0; n < 10; n++)
										{
											Collision.HitTiles(this.position, this.velocity, this.width, this.height);
										}
										SoundEngine.PlaySound(0, (int)base.Center.X, (int)base.Center.Y, 1, 1f, 0f);
										this.MakeBoulderOfEarthExplosion();
									}
									if (this.type >= 326 && this.type <= 328 && this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = lastVelocity.X * -0.1f;
									}
									if (this.type >= 400 && this.type <= 402)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = lastVelocity.X * -0.1f;
										}
									}
									else if (this.type == 870 && this.ai[1] == 0f)
									{
										if (this.velocity.X != lastVelocity.X || this.velocity.Y != lastVelocity.Y)
										{
											this.velocity = -lastVelocity;
											this.ai[1] = 1f;
										}
									}
									else if (this.type == 50)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = lastVelocity.X * -0.2f;
										}
										if (this.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
										{
											this.velocity.Y = lastVelocity.Y * -0.2f;
										}
									}
									else if (this.type == 185)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = lastVelocity.X * -0.9f;
										}
										if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
										{
											this.velocity.Y = lastVelocity.Y * -0.9f;
										}
									}
									else if (this.type == 277)
									{
										if (this.velocity.X != lastVelocity.X)
										{
											this.velocity.X = lastVelocity.X * -0.9f;
										}
										if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 3f)
										{
											this.velocity.Y = lastVelocity.Y * -0.9f;
										}
									}
									else if (this.type != 480)
									{
										if (this.type == 450)
										{
											if (this.velocity.X != lastVelocity.X)
											{
												this.velocity.X = lastVelocity.X * -0.1f;
											}
										}
										else
										{
											if (this.velocity.X != lastVelocity.X)
											{
												this.velocity.X = lastVelocity.X * -0.5f;
											}
											if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
											{
												this.velocity.Y = lastVelocity.Y * -0.5f;
											}
										}
									}
								}
								else if (this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type])
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = lastVelocity.X * -0.4f;
										if (this.type == 29)
										{
											this.velocity.X = this.velocity.X * 0.8f;
										}
									}
									if (this.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7 && this.type != 102)
									{
										this.velocity.Y = lastVelocity.Y * -0.4f;
										if (this.type == 29)
										{
											this.velocity.Y = this.velocity.Y * 0.8f;
										}
									}
									if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || (this.type >= 338 && this.type <= 341) || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
									{
										this.velocity *= 0f;
										this.alpha = 255;
										this.timeLeft = 3;
									}
								}
								else if (this.aiStyle == 68)
								{
									this.velocity *= 0f;
									this.alpha = 255;
									this.timeLeft = 3;
									this.netUpdate = true;
								}
								else if (this.type == 870)
								{
									if (this.velocity.X != lastVelocity.X)
									{
										this.velocity.X = lastVelocity.X * -0.2f;
									}
									if (this.velocity.Y != lastVelocity.Y && lastVelocity.Y > 0f)
									{
										this.velocity.Y = lastVelocity.Y * -0.2f;
									}
								}
								else
								{
									this.position += this.velocity;
									this.Kill();
								}
							}
						}
					}
				}
			}
			this.UpdatePosition(wetVelocity);
			if (!flag2 && !flag4 && this.owner == Main.myPlayer && (this.tileCollide || flag5) && this.position != this.oldPosition)
			{
				Vector2 vector24 = this.position;
				Vector2 vector25 = this.oldPosition;
				int num52 = (overrideWidth != -1) ? overrideWidth : this.width;
				int num53 = (overrideHeight != -1) ? overrideHeight : this.height;
				if (overrideHeight != -1 || overrideWidth != -1)
				{
					vector24..ctor(this.position.X + (float)(this.width / 2) - (float)(num52 / 2), this.position.Y + (float)(this.height / 2) - (float)(num53 / 2));
					vector25..ctor(this.oldPosition.X + (float)(this.width / 2) - (float)(num52 / 2), this.oldPosition.Y + (float)(this.height / 2) - (float)(num53 / 2));
				}
				Collision.SwitchTiles(vector24, num52, num53, vector25, 4);
			}
		}

		// Token: 0x06000D14 RID: 3348 RVA: 0x00308B34 File Offset: 0x00306D34
		private void LightDisc_Bounce(Vector2 hitPoint, Vector2 normal)
		{
			Vector2 spinningpoint = Vector2.Reflect(this.velocity, normal);
			for (int i = 0; i < 4; i++)
			{
				Dust dust = Dust.NewDustPerfect(hitPoint, 306, new Vector2?(spinningpoint.RotatedBy((double)(0.7853982f * Main.rand.NextFloatDirection()), default(Vector2)) * 0.6f * Main.rand.NextFloat()), 200, default(Color), 1.6f);
				dust.color = Color.Lerp(new Color(219, 253, 0), Color.Cyan, Main.rand.NextFloat());
				Dust dust2 = Dust.CloneDust(dust);
				dust2.color = Color.White;
				dust2.scale = 1f;
				dust2.alpha = 50;
			}
		}

		// Token: 0x06000D15 RID: 3349 RVA: 0x00308C08 File Offset: 0x00306E08
		private unsafe void AI_149_GolfBall()
		{
			if (!this.npcProj && this.timeLeft < 10)
			{
				this.timeLeft = 10;
			}
			if (this.ai[1] == -1f)
			{
				Tile tileSafely = Framing.GetTileSafely(base.Bottom.ToTileCoordinates());
				if (!tileSafely.active() || *tileSafely.type != 494)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				return;
			}
			BallStepResult ballStepResult = GolfHelper.StepGolfBall(this, ref this.localAI[0]);
			if (ballStepResult.State == BallState.Resting)
			{
				this.damage = 0;
				if (Main.netMode == 1 && this.owner == Main.myPlayer && this.localAI[1] != (float)ballStepResult.State)
				{
					this.netUpdate = true;
				}
			}
			this.localAI[1] = (float)ballStepResult.State;
			this.rotation += this.localAI[0];
			if (this.velocity.Y != 0f && ballStepResult.State == BallState.Moving)
			{
				this.rotation += this.velocity.X * 0.1f + this.velocity.Y * 0.1f;
			}
			if (ballStepResult.State == BallState.Moving && this.owner == Main.myPlayer)
			{
				bool? flag = ProjectileID.Sets.ForcePlateDetection[135];
				if ((flag == null || flag.Value) && this.localAI[1] != 0f)
				{
					Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 4);
				}
			}
			if (ballStepResult.State == BallState.Moving && Main.netMode == 2 && Main.player.IndexInRange(this.owner) && Main.player[this.owner].active)
			{
				RemoteClient.CheckSection(this.owner, this.position, 1);
			}
		}

		// Token: 0x06000D16 RID: 3350 RVA: 0x00308DE8 File Offset: 0x00306FE8
		private void MakeBoulderOfEarthExplosion()
		{
			this.localAI[0] = 40f;
			float mAX_SPREAD = 20f;
			int fluff = 10;
			int distFluff = 50;
			int layerStart = 1;
			int num = 6;
			if (this.velocity.Length() < 8f || Math.Abs(this.velocity.Y) < 4f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 4;
			}
			if (this.velocity.Length() < 4f || Math.Abs(this.velocity.Y) < 2f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 2;
				layerStart = 0;
			}
			int layerEnd = num;
			int num2 = num - 2;
			if (num2 < 1)
			{
				num2 = 1;
			}
			this.CreateGroundExplosion(mAX_SPREAD, fluff, distFluff, layerStart, layerEnd, num2);
			for (int i = 0; i < 10; i++)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular((float)(this.width / 2), (float)(this.height / 2)), 228, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 0, default(Color), 1f);
				dust.scale = 0.6f;
				if (i < 5)
				{
					dust.noGravity = true;
					dust.scale = 1.8f;
				}
			}
		}

		// Token: 0x06000D17 RID: 3351 RVA: 0x00308F3C File Offset: 0x0030713C
		private void UpdatePosition(Vector2 wetVelocity)
		{
			if (this.aiStyle == 4 || this.aiStyle == 38 || this.aiStyle == 84 || this.aiStyle == 148 || (this.aiStyle == 7 && this.ai[0] == 2f) || ((this.type == 440 || this.type == 449 || this.type == 606) && this.ai[1] == 1f) || (this.aiStyle == 93 && this.ai[0] < 0f) || this.type == 540 || this.type == 756 || this.type == 818 || this.type == 856 || this.type == 961 || this.type == 933 || ProjectileID.Sets.IsAGolfBall[this.type])
			{
				return;
			}
			if (!ProjectileLoader.ShouldUpdatePosition(this))
			{
				return;
			}
			if (this.wet)
			{
				this.position += wetVelocity;
			}
			else
			{
				this.position += this.velocity;
			}
			if (Main.projPet[this.type] && this.tileCollide)
			{
				bool fall = false;
				if (this.aiStyle == 62)
				{
					fall = true;
				}
				int num = this.type;
				if (num <= 388)
				{
					if (num != 317 && num - 387 > 1)
					{
						goto IL_198;
					}
				}
				else if (num != 533 && num != 759)
				{
					goto IL_198;
				}
				fall = true;
				IL_198:
				Vector4 vector = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, 0f, fall);
				this.position.X = vector.X;
				this.position.Y = vector.Y;
				this.velocity.X = vector.Z;
				this.velocity.Y = vector.W;
			}
		}

		// Token: 0x06000D18 RID: 3352 RVA: 0x0030914C File Offset: 0x0030734C
		public void FishingCheck()
		{
			if (Main.player[this.owner].wet && base.Center.Y < Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, false, true).Y)
			{
				return;
			}
			FishingAttempt fisher = default(FishingAttempt);
			fisher.X = (int)(base.Center.X / 16f);
			fisher.Y = (int)(base.Center.Y / 16f);
			fisher.bobberType = this.type;
			Projectile.GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
			if (Main.notTheBeesWorld && Main.rand.Next(2) == 0)
			{
				fisher.inHoney = false;
			}
			if (fisher.waterTilesCount < 75)
			{
				Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
				return;
			}
			fisher.playerFishingConditions = Main.player[this.owner].GetFishingConditions();
			if (fisher.playerFishingConditions.BaitItemType == 2673)
			{
				Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
				if ((fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000 && !NPC.AnyNPCs(370))
				{
					this.ai[1] = (float)(Main.rand.Next(-180, -60) - 100);
					this.localAI[1] = 1f;
					this.netUpdate = true;
				}
				return;
			}
			fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
			if (fisher.fishingLevel == 0)
			{
				return;
			}
			fisher.CanFishInLava = (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[this.owner].accLavaFishing);
			if (fisher.chumsInWater > 0)
			{
				fisher.fishingLevel += 11;
			}
			if (fisher.chumsInWater > 1)
			{
				fisher.fishingLevel += 6;
			}
			if (fisher.chumsInWater > 2)
			{
				fisher.fishingLevel += 3;
			}
			Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fisher.fishingLevel);
			fisher.waterNeededToFish = 300;
			float num = (float)Main.maxTilesX / 4200f;
			num *= num;
			fisher.atmo = (float)((double)(this.position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)fisher.atmo < 0.25)
			{
				fisher.atmo = 0.25f;
			}
			if (fisher.atmo > 1f)
			{
				fisher.atmo = 1f;
			}
			fisher.waterNeededToFish = (int)((float)fisher.waterNeededToFish * fisher.atmo);
			fisher.waterQuality = (float)fisher.waterTilesCount / (float)fisher.waterNeededToFish;
			if (fisher.waterQuality < 1f)
			{
				fisher.fishingLevel = (int)((float)fisher.fishingLevel * fisher.waterQuality);
			}
			fisher.waterQuality = 1f - fisher.waterQuality;
			if (fisher.waterTilesCount < fisher.waterNeededToFish)
			{
				Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", fisher.fishingLevel, 0.0 - Math.Round((double)(fisher.waterQuality * 100f)));
			}
			if (Main.player[this.owner].luck < 0f)
			{
				if (Main.rand.NextFloat() < 0f - Main.player[this.owner].luck)
				{
					fisher.fishingLevel = (int)((double)fisher.fishingLevel * (0.9 - (double)Main.rand.NextFloat() * 0.3));
				}
			}
			else if (Main.rand.NextFloat() < Main.player[this.owner].luck)
			{
				fisher.fishingLevel = (int)((double)fisher.fishingLevel * (1.1 + (double)Main.rand.NextFloat() * 0.3));
			}
			int num2 = (fisher.fishingLevel + 75) / 2;
			if (Main.rand.Next(100) > num2)
			{
				return;
			}
			fisher.heightLevel = 0;
			if (Main.remixWorld)
			{
				if ((double)fisher.Y < Main.worldSurface * 0.5)
				{
					fisher.heightLevel = 0;
				}
				else if ((double)fisher.Y < Main.worldSurface)
				{
					fisher.heightLevel = 1;
				}
				else if ((double)fisher.Y < Main.rockLayer)
				{
					fisher.heightLevel = 3;
				}
				else if (fisher.Y < Main.maxTilesY - 300)
				{
					fisher.heightLevel = 2;
				}
				else
				{
					fisher.heightLevel = 4;
				}
				if (fisher.heightLevel == 2 && Main.rand.Next(2) == 0)
				{
					fisher.heightLevel = 1;
				}
			}
			else if ((double)fisher.Y < Main.worldSurface * 0.5)
			{
				fisher.heightLevel = 0;
			}
			else if ((double)fisher.Y < Main.worldSurface)
			{
				fisher.heightLevel = 1;
			}
			else if ((double)fisher.Y < Main.rockLayer)
			{
				fisher.heightLevel = 2;
			}
			else if (fisher.Y < Main.maxTilesY - 300)
			{
				fisher.heightLevel = 3;
			}
			else
			{
				fisher.heightLevel = 4;
			}
			this.FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
			PlayerLoader.ModifyFishingAttempt(Main.player[this.owner], ref fisher);
			this.FishingCheck_ProbeForQuestFish(ref fisher);
			this.FishingCheck_RollEnemySpawns(ref fisher);
			this.FishingCheck_RollItemDrop(ref fisher);
			bool flag = false;
			AdvancedPopupRequest sonar = default(AdvancedPopupRequest);
			Vector2 sonarPosition;
			sonarPosition..ctor(this.position.X, this.position.Y);
			PlayerLoader.CatchFish(Main.player[this.owner], fisher, ref fisher.rolledItemDrop, ref fisher.rolledEnemySpawn, ref sonar, ref sonarPosition);
			if (sonar.Text != null && Main.player[this.owner].sonarPotion)
			{
				PopupText.AssignAsSonarText(PopupText.NewText(sonar, sonarPosition));
			}
			if (fisher.rolledItemDrop > 0)
			{
				if (sonar.Text == null && Main.player[this.owner].sonarPotion)
				{
					Item item = new Item();
					item.SetDefaults(fisher.rolledItemDrop);
					item.position = this.position;
					int sonarPopupText = PopupText.NewText(PopupTextContext.SonarAlert, item, 1, true, false);
					if (sonarPopupText >= 0)
					{
						Main.popupText[sonarPopupText].NoStack = true;
					}
					PopupText.AssignAsSonarText(sonarPopupText);
					this.localAI[2] = (float)(sonarPopupText + 1);
				}
				float num3 = (float)fisher.fishingLevel;
				this.ai[1] = (float)Main.rand.Next(-240, -90) - num3;
				this.localAI[1] = (float)fisher.rolledItemDrop;
				this.netUpdate = true;
				flag = true;
			}
			if (fisher.rolledEnemySpawn > 0)
			{
				if (sonar.Text == null && Main.player[this.owner].sonarPotion)
				{
					PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, base.Center, false));
				}
				float num4 = (float)fisher.fishingLevel;
				this.ai[1] = (float)Main.rand.Next(-240, -90) - num4;
				this.localAI[1] = (float)(-(float)fisher.rolledEnemySpawn);
				this.netUpdate = true;
				flag = true;
			}
			if (!flag && fisher.inLava)
			{
				int num5 = 0;
				if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
				{
					num5++;
				}
				if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
				{
					num5++;
				}
				if (Main.player[this.owner].accLavaFishing)
				{
					num5++;
				}
				if (num5 >= 2)
				{
					this.localAI[1] += 240f;
				}
			}
			if (fisher.CanFishInLava && fisher.inLava)
			{
				AchievementsHelper.HandleSpecialEvent(Main.player[this.owner], 19);
			}
		}

		// Token: 0x06000D19 RID: 3353 RVA: 0x003099B4 File Offset: 0x00307BB4
		private void FishingCheck_RollEnemySpawns(ref FishingAttempt fisher)
		{
			if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
			{
				return;
			}
			int maxValue = 6;
			if (fisher.playerFishingConditions.PoleItemType == 4325)
			{
				maxValue = 3;
			}
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			if (!NPC.unlockedSlimeRedSpawn && Main.rand.Next(5) == 0)
			{
				fisher.rolledEnemySpawn = 682;
				return;
			}
			if (Main.hardMode)
			{
				fisher.rolledEnemySpawn = (int)Utils.SelectRandom<short>(Main.rand, new short[]
				{
					620,
					621,
					586,
					587
				});
				if (Main.rand.Next(10) == 0)
				{
					fisher.rolledEnemySpawn = 618;
					return;
				}
			}
			else
			{
				fisher.rolledEnemySpawn = (int)Utils.SelectRandom<short>(Main.rand, new short[]
				{
					586,
					587
				});
			}
		}

		// Token: 0x06000D1A RID: 3354 RVA: 0x00309A8C File Offset: 0x00307C8C
		private void FishingCheck_RollItemDrop(ref FishingAttempt fisher)
		{
			bool flag = Main.player[this.owner].ZoneCorrupt;
			bool flag2 = Main.player[this.owner].ZoneCrimson;
			bool flag3 = Main.player[this.owner].ZoneJungle;
			bool flag4 = Main.player[this.owner].ZoneSnow;
			bool flag5 = Main.player[this.owner].ZoneDungeon;
			if (!NPC.downedBoss3)
			{
				flag5 = false;
			}
			if (Main.notTheBeesWorld && !Main.remixWorld && Main.rand.Next(2) == 0)
			{
				flag3 = false;
			}
			if (Main.remixWorld && fisher.heightLevel == 0)
			{
				flag = false;
				flag2 = false;
			}
			else if (flag && flag2)
			{
				if (Main.rand.Next(2) == 0)
				{
					flag2 = false;
				}
				else
				{
					flag = false;
				}
			}
			if (fisher.rolledEnemySpawn > 0)
			{
				return;
			}
			if (fisher.inLava)
			{
				if (fisher.CanFishInLava)
				{
					if (fisher.crate && Main.rand.Next(6) == 0)
					{
						fisher.rolledItemDrop = (Main.hardMode ? 4878 : 4877);
						return;
					}
					if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = (int)Main.rand.NextFromList(new short[]
						{
							4819,
							4820,
							4872,
							2331
						});
						return;
					}
					if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = (int)Main.rand.NextFromList(new short[]
						{
							4819,
							4820,
							4872
						});
						return;
					}
					if (fisher.veryrare)
					{
						fisher.rolledItemDrop = 2312;
						return;
					}
					if (fisher.rare)
					{
						fisher.rolledItemDrop = 2315;
					}
				}
				return;
			}
			if (fisher.inHoney)
			{
				if (fisher.rare || (fisher.uncommon && Main.rand.Next(2) == 0))
				{
					fisher.rolledItemDrop = 2314;
					return;
				}
				if (fisher.uncommon && fisher.questFish == 2451)
				{
					fisher.rolledItemDrop = 2451;
				}
				return;
			}
			else
			{
				if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
				{
					fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
					if (Main.rand.Next(8) == 0)
					{
						fisher.rolledItemDrop = 5275;
					}
					return;
				}
				if (fisher.crate)
				{
					bool hardMode = Main.hardMode;
					if (fisher.rare && flag5)
					{
						fisher.rolledItemDrop = (hardMode ? 3984 : 3205);
						return;
					}
					if (fisher.rare && (Main.player[this.owner].ZoneBeach || (Main.remixWorld && fisher.heightLevel == 1 && (double)fisher.Y >= Main.rockLayer && Main.rand.Next(2) == 0)))
					{
						fisher.rolledItemDrop = (hardMode ? 5003 : 5002);
						return;
					}
					if (fisher.rare && flag)
					{
						fisher.rolledItemDrop = (hardMode ? 3982 : 3203);
						return;
					}
					if (fisher.rare && flag2)
					{
						fisher.rolledItemDrop = (hardMode ? 3983 : 3204);
						return;
					}
					if (fisher.rare && Main.player[this.owner].ZoneHallow)
					{
						fisher.rolledItemDrop = (hardMode ? 3986 : 3207);
						return;
					}
					if (fisher.rare && flag3)
					{
						fisher.rolledItemDrop = (hardMode ? 3987 : 3208);
						return;
					}
					if (fisher.rare && Main.player[this.owner].ZoneSnow)
					{
						fisher.rolledItemDrop = (hardMode ? 4406 : 4405);
						return;
					}
					if (fisher.rare && Main.player[this.owner].ZoneDesert)
					{
						fisher.rolledItemDrop = (hardMode ? 4408 : 4407);
						return;
					}
					if (fisher.rare && fisher.heightLevel == 0)
					{
						fisher.rolledItemDrop = (hardMode ? 3985 : 3206);
						return;
					}
					if (fisher.veryrare || fisher.legendary)
					{
						fisher.rolledItemDrop = (hardMode ? 3981 : 2336);
						return;
					}
					if (fisher.uncommon)
					{
						fisher.rolledItemDrop = (hardMode ? 3980 : 2335);
						return;
					}
					fisher.rolledItemDrop = (hardMode ? 3979 : 2334);
					return;
				}
				else
				{
					if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 4382;
						return;
					}
					if (Main.bloodMoon && fisher.legendary && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 5240;
						return;
					}
					if (fisher.legendary && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = 2423;
						return;
					}
					if (fisher.legendary && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = 3225;
						return;
					}
					if (fisher.legendary && Main.rand.Next(10) == 0)
					{
						fisher.rolledItemDrop = 2420;
						return;
					}
					if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = 3196;
						return;
					}
					bool flag6 = Main.player[this.owner].ZoneDesert;
					if (flag5)
					{
						flag6 = false;
						if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
						{
							fisher.rolledItemDrop = 3000;
						}
					}
					else
					{
						if (flag)
						{
							if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
							{
								fisher.rolledItemDrop = 2429;
							}
							else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
							{
								fisher.rolledItemDrop = 3210;
							}
							else if (fisher.rare)
							{
								fisher.rolledItemDrop = 2330;
							}
							else if (fisher.uncommon && fisher.questFish == 2454)
							{
								fisher.rolledItemDrop = 2454;
							}
							else if (fisher.uncommon && fisher.questFish == 2485)
							{
								fisher.rolledItemDrop = 2485;
							}
							else if (fisher.uncommon && fisher.questFish == 2457)
							{
								fisher.rolledItemDrop = 2457;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2318;
							}
						}
						else if (flag2)
						{
							if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
							{
								fisher.rolledItemDrop = 2429;
							}
							else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
							{
								fisher.rolledItemDrop = 3211;
							}
							else if (fisher.uncommon && fisher.questFish == 2477)
							{
								fisher.rolledItemDrop = 2477;
							}
							else if (fisher.uncommon && fisher.questFish == 2463)
							{
								fisher.rolledItemDrop = 2463;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2319;
							}
							else if (fisher.common)
							{
								fisher.rolledItemDrop = 2305;
							}
						}
						else if (Main.player[this.owner].ZoneHallow)
						{
							if (flag6 && Main.rand.Next(2) == 0)
							{
								if (fisher.uncommon && fisher.questFish == 4393)
								{
									fisher.rolledItemDrop = 4393;
								}
								else if (fisher.uncommon && fisher.questFish == 4394)
								{
									fisher.rolledItemDrop = 4394;
								}
								else if (fisher.uncommon)
								{
									fisher.rolledItemDrop = 4410;
								}
								else if (Main.rand.Next(3) == 0)
								{
									fisher.rolledItemDrop = 4402;
								}
								else
								{
									fisher.rolledItemDrop = 4401;
								}
							}
							else if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
							{
								fisher.rolledItemDrop = 2429;
							}
							else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
							{
								fisher.rolledItemDrop = 3209;
							}
							else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) != 0)
							{
								fisher.rolledItemDrop = 5274;
							}
							else if (fisher.heightLevel > 1 && fisher.veryrare)
							{
								fisher.rolledItemDrop = 2317;
							}
							else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2465)
							{
								fisher.rolledItemDrop = 2465;
							}
							else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2468)
							{
								fisher.rolledItemDrop = 2468;
							}
							else if (fisher.rare)
							{
								fisher.rolledItemDrop = 2310;
							}
							else if (fisher.uncommon && fisher.questFish == 2471)
							{
								fisher.rolledItemDrop = 2471;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2307;
							}
						}
						if (fisher.rolledItemDrop == 0 && Main.player[this.owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
						{
							fisher.rolledItemDrop = 2475;
						}
						if (flag4 && flag3 && Main.rand.Next(2) == 0)
						{
							flag4 = false;
						}
						if (fisher.rolledItemDrop == 0 && flag4)
						{
							if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
							{
								fisher.rolledItemDrop = 2467;
							}
							else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
							{
								fisher.rolledItemDrop = 2470;
							}
							else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
							{
								fisher.rolledItemDrop = 2484;
							}
							else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
							{
								fisher.rolledItemDrop = 2466;
							}
							else if ((fisher.common && Main.rand.Next(12) == 0) || (fisher.uncommon && Main.rand.Next(6) == 0))
							{
								fisher.rolledItemDrop = 3197;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2306;
							}
							else if (fisher.common)
							{
								fisher.rolledItemDrop = 2299;
							}
							else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
							{
								fisher.rolledItemDrop = 2309;
							}
						}
						if (fisher.rolledItemDrop == 0 && flag3)
						{
							if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
							{
								fisher.rolledItemDrop = 2452;
							}
							else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
							{
								fisher.rolledItemDrop = 2483;
							}
							else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
							{
								fisher.rolledItemDrop = 2488;
							}
							else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
							{
								fisher.rolledItemDrop = 2486;
							}
							else if (fisher.heightLevel > 1 && fisher.uncommon)
							{
								fisher.rolledItemDrop = 2311;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2313;
							}
							else if (fisher.common)
							{
								fisher.rolledItemDrop = 2302;
							}
						}
					}
					if (fisher.rolledItemDrop == 0)
					{
						if ((Main.remixWorld && fisher.heightLevel == 1 && (double)fisher.Y >= Main.rockLayer && Main.rand.Next(3) == 0) || (fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000))
						{
							if (fisher.veryrare && Main.rand.Next(2) == 0)
							{
								fisher.rolledItemDrop = 2341;
							}
							else if (fisher.veryrare)
							{
								fisher.rolledItemDrop = 2342;
							}
							else if (fisher.rare && Main.rand.Next(5) == 0)
							{
								fisher.rolledItemDrop = 2438;
							}
							else if (fisher.rare && Main.rand.Next(3) == 0)
							{
								fisher.rolledItemDrop = 2332;
							}
							else if (fisher.uncommon && fisher.questFish == 2480)
							{
								fisher.rolledItemDrop = 2480;
							}
							else if (fisher.uncommon && fisher.questFish == 2481)
							{
								fisher.rolledItemDrop = 2481;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 2316;
							}
							else if (fisher.common && Main.rand.Next(2) == 0)
							{
								fisher.rolledItemDrop = 2301;
							}
							else if (fisher.common)
							{
								fisher.rolledItemDrop = 2300;
							}
							else
							{
								fisher.rolledItemDrop = 2297;
							}
						}
						else if (flag6)
						{
							if (fisher.uncommon && fisher.questFish == 4393)
							{
								fisher.rolledItemDrop = 4393;
							}
							else if (fisher.uncommon && fisher.questFish == 4394)
							{
								fisher.rolledItemDrop = 4394;
							}
							else if (fisher.uncommon)
							{
								fisher.rolledItemDrop = 4410;
							}
							else if (Main.rand.Next(3) == 0)
							{
								fisher.rolledItemDrop = 4402;
							}
							else
							{
								fisher.rolledItemDrop = 4401;
							}
						}
					}
					if (fisher.rolledItemDrop != 0)
					{
						return;
					}
					if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
					{
						fisher.rolledItemDrop = 2461;
						return;
					}
					if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
					{
						fisher.rolledItemDrop = 2453;
						return;
					}
					if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
					{
						fisher.rolledItemDrop = 2473;
						return;
					}
					if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
					{
						fisher.rolledItemDrop = 2476;
						return;
					}
					if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
					{
						fisher.rolledItemDrop = 2458;
						return;
					}
					if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
					{
						fisher.rolledItemDrop = 2459;
						return;
					}
					if (fisher.heightLevel == 0 && fisher.uncommon)
					{
						fisher.rolledItemDrop = 2304;
						return;
					}
					if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
					{
						fisher.rolledItemDrop = 2455;
						return;
					}
					if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
					{
						fisher.rolledItemDrop = 2479;
						return;
					}
					if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
					{
						fisher.rolledItemDrop = 2456;
						return;
					}
					if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
					{
						fisher.rolledItemDrop = 2474;
						return;
					}
					if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
					{
						if (Main.hardMode && Main.rand.Next(2) == 0)
						{
							fisher.rolledItemDrop = 2437;
							return;
						}
						fisher.rolledItemDrop = 2436;
						return;
					}
					else
					{
						if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
						{
							fisher.rolledItemDrop = 2308;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
						{
							fisher.rolledItemDrop = 2320;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.rare)
						{
							fisher.rolledItemDrop = 2321;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
						{
							fisher.rolledItemDrop = 2478;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
						{
							fisher.rolledItemDrop = 2450;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
						{
							fisher.rolledItemDrop = 2464;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
						{
							fisher.rolledItemDrop = 2469;
							return;
						}
						if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
						{
							fisher.rolledItemDrop = 2462;
							return;
						}
						if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
						{
							fisher.rolledItemDrop = 2482;
							return;
						}
						if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
						{
							fisher.rolledItemDrop = 2472;
							return;
						}
						if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
						{
							fisher.rolledItemDrop = 2460;
							return;
						}
						if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
						{
							fisher.rolledItemDrop = 2303;
							return;
						}
						if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
						{
							if (Main.rand.Next(4) == 0)
							{
								fisher.rolledItemDrop = 2303;
								return;
							}
							fisher.rolledItemDrop = 2309;
							return;
						}
						else
						{
							if (fisher.uncommon && fisher.questFish == 2487)
							{
								fisher.rolledItemDrop = 2487;
								return;
							}
							if (fisher.waterTilesCount > 1000 && fisher.common)
							{
								fisher.rolledItemDrop = 2298;
								return;
							}
							fisher.rolledItemDrop = 2290;
							return;
						}
					}
				}
			}
		}

		// Token: 0x06000D1B RID: 3355 RVA: 0x0030ADDC File Offset: 0x00308FDC
		private void FishingCheck_ProbeForQuestFish(ref FishingAttempt fisher)
		{
			fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
			if (Main.player[this.owner].HasItem(fisher.questFish))
			{
				fisher.questFish = -1;
			}
			if (!NPC.AnyNPCs(369))
			{
				fisher.questFish = -1;
			}
			if (Main.anglerQuestFinished)
			{
				fisher.questFish = -1;
			}
		}

		// Token: 0x06000D1C RID: 3356 RVA: 0x0030AE3C File Offset: 0x0030903C
		private void FishingCheck_RollDropLevels(int fishingLevel, out bool common, out bool uncommon, out bool rare, out bool veryrare, out bool legendary, out bool crate)
		{
			int num = 150 / fishingLevel;
			int num2 = 300 / fishingLevel;
			int num3 = 1050 / fishingLevel;
			int num4 = 2250 / fishingLevel;
			int num5 = 4500 / fishingLevel;
			int num6 = 10;
			if (Main.player[this.owner].cratePotion)
			{
				num6 += 15;
			}
			if (num < 2)
			{
				num = 2;
			}
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num3 < 4)
			{
				num3 = 4;
			}
			if (num4 < 5)
			{
				num4 = 5;
			}
			if (num5 < 6)
			{
				num5 = 6;
			}
			common = false;
			uncommon = false;
			rare = false;
			veryrare = false;
			legendary = false;
			crate = false;
			if (Main.rand.Next(num) == 0)
			{
				common = true;
			}
			if (Main.rand.Next(num2) == 0)
			{
				uncommon = true;
			}
			if (Main.rand.Next(num3) == 0)
			{
				rare = true;
			}
			if (Main.rand.Next(num4) == 0)
			{
				veryrare = true;
			}
			if (Main.rand.Next(num5) == 0)
			{
				legendary = true;
			}
			if (Main.rand.Next(100) < num6)
			{
				crate = true;
			}
		}

		// Token: 0x06000D1D RID: 3357 RVA: 0x0030AF30 File Offset: 0x00309130
		private unsafe static void GetFishingPondState(int x, int y, out bool lava, out bool honey, out int numWaters, out int chumCount)
		{
			lava = false;
			honey = false;
			numWaters = 0;
			chumCount = 0;
			Point tileCoords;
			tileCoords..ctor(0, 0);
			int minX;
			int maxX;
			Projectile.GetFishingPondWidth(x, y, out minX, out maxX);
			for (int i = minX; i <= maxX; i++)
			{
				int num = y;
				while (Main.tile[i, num] != null && *Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num, false) && num < Main.maxTilesY - 10)
				{
					numWaters++;
					num++;
					if (Main.tile[i, num].lava())
					{
						lava = true;
					}
					else if (Main.tile[i, num].honey())
					{
						honey = true;
					}
					tileCoords.X = i;
					tileCoords.Y = num;
					chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
				}
			}
			if (honey)
			{
				numWaters = (int)((double)numWaters * 1.5);
			}
		}

		// Token: 0x06000D1E RID: 3358 RVA: 0x0030B044 File Offset: 0x00309244
		private unsafe static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
		{
			minX = x;
			maxX = x;
			while (minX > 10 && Main.tile[minX, y] != null && *Main.tile[minX, y].liquid > 0)
			{
				if (WorldGen.SolidTile(minX, y, false))
				{
					break;
				}
				minX--;
			}
			while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y] != null && *Main.tile[maxX, y].liquid > 0 && !WorldGen.SolidTile(maxX, y, false))
			{
				maxX++;
			}
		}

		// Token: 0x06000D1F RID: 3359 RVA: 0x0030B0EC File Offset: 0x003092EC
		public bool CanBeReflected()
		{
			if (this.active && this.friendly && !this.hostile && this.damage > 0)
			{
				if (this.type == 728 || this.type == 955)
				{
					return true;
				}
				if (this.aiStyle == 1 || this.aiStyle == 2 || this.aiStyle == 8 || this.aiStyle == 21 || this.aiStyle == 24 || this.aiStyle == 28 || this.aiStyle == 29 || this.aiStyle == 131)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000D20 RID: 3360 RVA: 0x0030B18C File Offset: 0x0030938C
		public Color GetFairyQueenWeaponsColor(float alphaChannelMultiplier = 1f, float lerpToWhite = 0f, float? rawHueOverride = null)
		{
			float num = this.ai[1];
			if (rawHueOverride != null)
			{
				num = rawHueOverride.Value;
			}
			float num2 = (num + 0.5f) % 1f;
			float saturation = 1f;
			float luminosity = 0.5f;
			if (Main.player[this.owner].active)
			{
				string name = Main.player[this.owner].name;
				if (name != null)
				{
					switch (name.Length)
					{
					case 3:
						if (name == "Mid")
						{
							num2 = 0f;
							float amount4 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
							luminosity = MathHelper.Lerp(0f, 0.9f, amount4);
						}
						break;
					case 4:
					{
						char c = name[0];
						if (c != 'B')
						{
							if (c != 'C')
							{
								if (c == 'L')
								{
									if (name == "Loki")
									{
										num2 = 0f;
										float amount5 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
										luminosity = MathHelper.Lerp(0f, 0.25f, amount5);
									}
								}
							}
							else if (name == "Cenx")
							{
								float amount6 = Utils.PingPongFrom01To010(num2);
								amount6 = MathHelper.SmoothStep(0f, 1f, amount6);
								amount6 = MathHelper.SmoothStep(0f, 1f, amount6);
								Color color3 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount6);
								if (lerpToWhite != 0f)
								{
									color3 = Color.Lerp(color3, Color.White, lerpToWhite);
								}
								color3.A = (byte)((float)color3.A * alphaChannelMultiplier);
								return color3;
							}
						}
						else if (name == "Bame")
						{
							float amount7 = Utils.PingPongFrom01To010(num2);
							amount7 = MathHelper.SmoothStep(0f, 1f, amount7);
							amount7 = MathHelper.SmoothStep(0f, 1f, amount7);
							Color color4 = Color.Lerp(Color.Yellow, new Color(0.4f, 0f, 0.75f), amount7);
							if (lerpToWhite != 0f)
							{
								color4 = Color.Lerp(color4, Color.White, lerpToWhite);
							}
							color4.A = (byte)((float)color4.A * alphaChannelMultiplier);
							return color4;
						}
						break;
					}
					case 5:
					{
						char c = name[0];
						if (c != 'S')
						{
							if (c == 'Z')
							{
								if (name == "Zoomo")
								{
									num2 = 0.77f;
									luminosity = 0.5f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
								}
							}
						}
						else if (name == "Sigma")
						{
							num2 = MathHelper.Lerp(0f, 0.12f, Utils.Turn01ToCyclic010(num2));
							luminosity = 0.5f;
							alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
						}
						break;
					}
					case 6:
					{
						char c = name[0];
						if (c <= 'D')
						{
							if (c != 'C')
							{
								if (c == 'D')
								{
									if (name == "Doylee")
									{
										num2 = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(num2));
										luminosity = 0.5f;
										alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
									}
								}
							}
							else if (name == "Crowno")
							{
								luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(num2));
								num2 = MathHelper.Lerp(0.70555556f, 0.78333336f, Utils.Turn01ToCyclic010(num2));
								alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
							}
						}
						else
						{
							switch (c)
							{
							case 'J':
								if (name == "Jaxrud")
								{
									num2 = MathHelper.Lerp(0.18055555f, 0.43611112f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.5f;
								}
								break;
							case 'K':
								if (name == "Khaios")
								{
									num2 = 0.33f;
									float amount8 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
									luminosity = MathHelper.Lerp(0f, 0.2f, amount8);
								}
								break;
							case 'L':
								if (name == "Lazure")
								{
									num2 = MathHelper.Lerp(0.53333336f, 0.9222222f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.5f;
								}
								break;
							case 'M':
								break;
							case 'N':
								if (name == "Nimbus")
								{
									num2 = MathHelper.Lerp(0.75f, 1f, Utils.Turn01ToCyclic010(num2));
									luminosity = 1f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.8f);
								}
								break;
							default:
								if (c == 't')
								{
									if (name == "teiull")
									{
										num2 = MathHelper.Lerp(0.66f, 1f, Utils.Turn01ToCyclic010(num2));
										luminosity = 0.5f;
									}
								}
								break;
							}
						}
						break;
					}
					case 7:
					{
						char c = name[0];
						if (c <= 'G')
						{
							if (c != 'C')
							{
								if (c == 'G')
								{
									if (name == "Ghostar")
									{
										num2 = 0.66f;
										float amount9 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
										luminosity = MathHelper.Lerp(0.15f, 0.85f, amount9);
									}
								}
							}
							else if (name == "Criddle")
							{
								num2 = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(num2));
								luminosity = 0.5f;
								alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
							}
						}
						else if (c != 'J')
						{
							if (c != 'R')
							{
								if (c == 'X')
								{
									if (name == "Xman101")
									{
										num2 = 0.06f;
										float amount10 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
										luminosity = MathHelper.Lerp(0f, 0.5f, amount10);
									}
								}
							}
							else if (name == "Redigit")
							{
								num2 = 0.7f;
								luminosity = 0.5f;
							}
						}
						else if (name == "Jenosis")
						{
							num2 = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(num2)) % 1f;
							luminosity = 0.5f;
							alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
						}
						break;
					}
					case 8:
					{
						char c = name[0];
						if (c <= 'L')
						{
							if (c != 'A')
							{
								if (c == 'L')
								{
									if (name == "Leinfors")
									{
										num2 = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(num2));
										luminosity = 0.5f;
									}
								}
							}
							else if (name == "Acamaeda")
							{
								num2 = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(num2));
								luminosity = 0.5f;
								alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
							}
						}
						else if (c != 'M')
						{
							switch (c)
							{
							case 'R':
								if (name == "RBrandon")
								{
									num2 = 0.03f;
									luminosity = 0.3f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
								}
								break;
							case 'S':
								if (name == "Serenity")
								{
									num2 = 0.85f;
									float amount11 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
									luminosity = MathHelper.Lerp(1f, 0.5f, amount11);
								}
								break;
							case 'U':
								if (name == "Unit One")
								{
									float amount12 = Utils.PingPongFrom01To010(num2);
									amount12 = MathHelper.SmoothStep(0f, 1f, amount12);
									Color color5 = Color.Lerp(Color.Yellow, Color.Blue, amount12);
									if (lerpToWhite != 0f)
									{
										color5 = Color.Lerp(color5, Color.White, lerpToWhite);
									}
									color5.A = (byte)((float)color5.A * alphaChannelMultiplier);
									return color5;
								}
								break;
							case 'W':
								if (name == "Waze3174")
								{
									num2 = MathHelper.Lerp(0.33f, 0f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.3f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
								}
								break;
							case 'Y':
								if (name == "Yoraiz0r")
								{
									num2 = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.5f;
								}
								break;
							}
						}
						else if (name == "ManaUser")
						{
							num2 = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(num2));
							luminosity = 0.5f;
						}
						break;
					}
					case 9:
					{
						char c = name[0];
						if (c != 'D')
						{
							if (c != 'N')
							{
								if (c == 'd')
								{
									if (name == "darthmorf")
									{
										num2 = 0f;
										float amount13 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
										luminosity = MathHelper.Lerp(0f, 0.2f, amount13);
									}
								}
							}
							else if (name == "Nike Leon")
							{
								num2 = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(num2));
								luminosity = 0.5f;
								alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
							}
						}
						else if (name == "Discipile")
						{
							num2 = 0.53f;
							float amount14 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
							luminosity = MathHelper.Lerp(0.05f, 0.5f, amount14);
						}
						break;
					}
					case 10:
					{
						char c = name[1];
						if (c != 'a')
						{
							if (c != 'n')
							{
								if (c == 'u')
								{
									if (name == "Aurora3500")
									{
										num2 = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(num2));
										luminosity = 0.5f;
										alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
									}
								}
							}
							else if (name == "Antithesis")
							{
								num2 = 0.51f;
								float amount15 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
								luminosity = MathHelper.Lerp(0f, 0.5f, amount15);
							}
						}
						else if (name == "Kazzymodus")
						{
							num2 = 0.33f;
							float amount16 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
							luminosity = MathHelper.Lerp(0.15f, 0.4f, amount16);
						}
						break;
					}
					case 11:
					{
						char c = name[0];
						if (c != 'D')
						{
							if (c == 'p')
							{
								if (name == "ppowersteef")
								{
									num2 = MathHelper.Lerp(0f, 0.15f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.5f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
								}
							}
						}
						else if (name == "Darthkitten")
						{
							num2 = 1f;
							float amount17 = (float)Math.Cos((double)(num * 6.2831855f)) * 0.5f + 0.5f;
							luminosity = MathHelper.Lerp(1f, 0.4f, amount17);
						}
						break;
					}
					case 12:
						if (name == "Alchemystics")
						{
							num2 = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(num2));
							luminosity = 0.6f;
							alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
						}
						break;
					case 14:
					{
						char c = name[0];
						if (c != 'G')
						{
							if (c == 'V')
							{
								if (name == "Vulpes Inculta")
								{
									num2 = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(num2));
									luminosity = 0.5f;
									alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
								}
							}
						}
						else if (name == "Grox The Great")
						{
							num2 = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(num2));
							luminosity = 0.5f;
							alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
						}
						break;
					}
					}
				}
			}
			Color color6 = Main.hslToRgb(num2, saturation, luminosity, byte.MaxValue);
			color6 *= this.Opacity;
			if (lerpToWhite != 0f)
			{
				color6 = Color.Lerp(color6, Color.White, lerpToWhite);
			}
			color6.A = (byte)((float)color6.A * alphaChannelMultiplier);
			return color6;
		}

		// Token: 0x06000D21 RID: 3361 RVA: 0x0030BF4C File Offset: 0x0030A14C
		public float GetLastPrismHue(float laserIndex, ref float laserLuminance, ref float laserAlphaMultiplier)
		{
			if (Main.player[this.owner].active)
			{
				double timeForVisualEffects = Main.timeForVisualEffects;
				string name = Main.player[this.owner].name;
				if (name != null)
				{
					switch (name.Length)
					{
					case 3:
					{
						char c = name[0];
						if (c != 'M')
						{
							if (c != 'W')
							{
								goto IL_F40;
							}
							if (!(name == "W1K"))
							{
								goto IL_F40;
							}
							return 0.75f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.05f;
						}
						else
						{
							if (!(name == "Mid"))
							{
								goto IL_F40;
							}
							laserLuminance = 0.25f;
							laserAlphaMultiplier = 0.4f;
							return 0.86f + (float)Math.Cos(timeForVisualEffects / 270.0 * 6.2831854820251465) * 0.13f;
						}
						break;
					}
					case 4:
					{
						char c = name[0];
						if (c != 'B')
						{
							if (c != 'C')
							{
								if (c != 'L')
								{
									goto IL_F40;
								}
								if (!(name == "Loki"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 5.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.4f;
								return 0f;
							}
							else
							{
								if (!(name == "Cenx"))
								{
									goto IL_F40;
								}
								float amount2 = Utils.PingPongFrom01To010(laserIndex / 6f);
								amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
								amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
								return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount2)).X;
							}
						}
						else
						{
							if (!(name == "Bame"))
							{
								goto IL_F40;
							}
							float amount3 = Utils.PingPongFrom01To010(laserIndex / 6f);
							amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
							amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
							return Main.rgbToHsl(Color.Lerp(Color.Yellow, new Color(0.2f, 0f, 0.7f), amount3)).X;
						}
						break;
					}
					case 5:
					{
						char c = name[0];
						if (c != 'S')
						{
							if (c != 'T')
							{
								if (c != 'Z')
								{
									goto IL_F40;
								}
								if (!(name == "Zoomo"))
								{
									goto IL_F40;
								}
								return 0.77f;
							}
							else if (!(name == "Tsuki"))
							{
								goto IL_F40;
							}
						}
						else
						{
							if (!(name == "Sigma"))
							{
								goto IL_F40;
							}
							return 0.06f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.06f;
						}
						break;
					}
					case 6:
					{
						char c = name[0];
						if (c <= 'D')
						{
							if (c != 'C')
							{
								if (c != 'D')
								{
									goto IL_F40;
								}
								if (!(name == "Doylee"))
								{
									goto IL_F40;
								}
								return 0.84f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.16f;
							}
							else
							{
								if (!(name == "Crowno"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.5f;
								return MathHelper.Lerp(0.70555556f, 0.78333336f, Utils.Turn01ToCyclic010(laserIndex / 6f));
							}
						}
						else
						{
							switch (c)
							{
							case 'J':
								if (!(name == "Jaxrud"))
								{
									goto IL_F40;
								}
								return MathHelper.Lerp(0.18055555f, 0.43611112f, Utils.Turn01ToCyclic010(laserIndex / 6f));
							case 'K':
								if (!(name == "Khaios"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.25f;
								return 0.35f;
							case 'L':
								if (!(name == "Lazure"))
								{
									goto IL_F40;
								}
								return MathHelper.Lerp(0.53333336f, 0.9222222f, Utils.Turn01ToCyclic010(laserIndex / 6f));
							case 'M':
							case 'O':
							case 'P':
							case 'Q':
								goto IL_F40;
							case 'N':
								if (!(name == "Nimbus"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 20.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.2f;
								return 0.75f;
							case 'R':
								if (!(name == "Random"))
								{
									goto IL_F40;
								}
								return Main.rand.NextFloat();
							default:
								if (c != 't')
								{
									goto IL_F40;
								}
								if (!(name == "teiull"))
								{
									goto IL_F40;
								}
								return 0.5f + (float)Math.Cos(timeForVisualEffects / 45.0 * 6.2831854820251465) * 0.3f;
							}
						}
						break;
					}
					case 7:
					{
						char c = name[0];
						if (c <= 'J')
						{
							if (c != 'C')
							{
								if (c != 'G')
								{
									if (c != 'J')
									{
										goto IL_F40;
									}
									if (!(name == "Jenosis"))
									{
										goto IL_F40;
									}
									return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.08f;
								}
								else
								{
									if (!(name == "Ghostar"))
									{
										goto IL_F40;
									}
									laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465), false));
									laserAlphaMultiplier = 0.3f;
									return 0.66f;
								}
							}
							else
							{
								if (!(name == "Criddle"))
								{
									goto IL_F40;
								}
								return 0.91f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.19f;
							}
						}
						else if (c != 'R')
						{
							if (c != 'S')
							{
								if (c != 'X')
								{
									goto IL_F40;
								}
								if (!(name == "Xman101"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.2f;
								return 0.33f;
							}
							else
							{
								if (!(name == "Suweeka"))
								{
									goto IL_F40;
								}
								return 0.5f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
							}
						}
						else
						{
							if (!(name == "Redigit"))
							{
								goto IL_F40;
							}
							return 0.7f;
						}
						break;
					}
					case 8:
					{
						char c = name[5];
						if (c <= 'e')
						{
							if (c <= 'O')
							{
								if (c != '1')
								{
									if (c != 'O')
									{
										goto IL_F40;
									}
									if (!(name == "Unit One"))
									{
										goto IL_F40;
									}
									return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
								}
								else
								{
									if (!(name == "Waze3174"))
									{
										goto IL_F40;
									}
									return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
								}
							}
							else if (c != 'd')
							{
								if (c != 'e')
								{
									goto IL_F40;
								}
								if (!(name == "Acamaeda"))
								{
									goto IL_F40;
								}
								return 0.18f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.1f;
							}
							else
							{
								if (!(name == "RBrandon"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.4f;
								return 1f;
							}
						}
						else if (c <= 'l')
						{
							if (c != 'i')
							{
								if (c != 'l')
								{
									goto IL_F40;
								}
								if (name == "Aeroblop")
								{
									return 0.25f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
								}
								if (!(name == "Arkhalis"))
								{
									goto IL_F40;
								}
								goto IL_86E;
							}
							else
							{
								if (!(name == "Serenity"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.3f;
								return 0.85f;
							}
						}
						else if (c != 'o')
						{
							if (c != 's')
							{
								if (c != 'z')
								{
									goto IL_F40;
								}
								if (!(name == "Yoraiz0r"))
								{
									goto IL_F40;
								}
							}
							else
							{
								if (!(name == "ManaUser"))
								{
									goto IL_F40;
								}
								return 0.49f + (float)Math.Cos(timeForVisualEffects / 140.0 * 6.2831854820251465) * 0.08f;
							}
						}
						else
						{
							if (!(name == "Leinfors"))
							{
								goto IL_F40;
							}
							return 0.73f + (float)Math.Cos(timeForVisualEffects / 3.0 * 6.2831854820251465) * 0.03f;
						}
						break;
					}
					case 9:
					{
						char c = name[3];
						switch (c)
						{
						case 'a':
							if (!(name == "Devalaous"))
							{
								goto IL_F40;
							}
							return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
						case 'b':
						case 'd':
							goto IL_F40;
						case 'c':
							if (!(name == "Discipile"))
							{
								goto IL_F40;
							}
							laserLuminance = MathHelper.Lerp(0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
							laserAlphaMultiplier = 0.35f;
							return 0.55f;
						case 'e':
							if (!(name == "Nike Leon"))
							{
								goto IL_F40;
							}
							return 0.07f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.04f;
						default:
							if (c != 'k')
							{
								if (c != 't')
								{
									goto IL_F40;
								}
								if (!(name == "darthmorf"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.4f;
								return 0f;
							}
							else
							{
								if (!(name == "Darkhalis"))
								{
									goto IL_F40;
								}
								goto IL_86E;
							}
							break;
						}
						break;
					}
					case 10:
					{
						char c = name[1];
						if (c != 'a')
						{
							if (c != 'n')
							{
								if (c != 'u')
								{
									goto IL_F40;
								}
								if (!(name == "Aurora3500"))
								{
									goto IL_F40;
								}
								laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
								laserAlphaMultiplier = 0.25f;
								return 0.35f;
							}
							else
							{
								if (!(name == "Antithesis"))
								{
									goto IL_F40;
								}
								laserLuminance = 0.25f;
								laserAlphaMultiplier = 0.4f;
								return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
							}
						}
						else
						{
							if (!(name == "Kazzymodus"))
							{
								goto IL_F40;
							}
							laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465), false));
							laserAlphaMultiplier = 0.3f;
							return 0.33f;
						}
						break;
					}
					case 11:
					{
						char c = name[0];
						if (c != 'D')
						{
							if (c != 'p')
							{
								goto IL_F40;
							}
							if (!(name == "ppowersteef"))
							{
								goto IL_F40;
							}
							laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465), false));
							laserAlphaMultiplier = 0.25f;
							return 0.6f;
						}
						else
						{
							if (!(name == "Darthkitten"))
							{
								goto IL_F40;
							}
							laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465), false));
							laserAlphaMultiplier = 0.3f;
							return 1f;
						}
						break;
					}
					case 12:
					{
						char c = name[3];
						if (c != 'e')
						{
							if (c != 'h')
							{
								if (c != 's')
								{
									goto IL_F40;
								}
								if (!(name == "blushiemagic"))
								{
									goto IL_F40;
								}
							}
							else
							{
								if (!(name == "Alchemystics"))
								{
									goto IL_F40;
								}
								return 0.73f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
							}
						}
						else if (!(name == "bluemagic123"))
						{
							goto IL_F40;
						}
						return 0.55f + (float)Math.Cos(Main.time / 120.0 * 6.2831854820251465) * 0.1f;
					}
					case 13:
						goto IL_F40;
					case 14:
					{
						char c = name[0];
						if (c != 'G')
						{
							if (c != 'V')
							{
								goto IL_F40;
							}
							if (!(name == "Vulpes Inculta"))
							{
								goto IL_F40;
							}
							return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
						}
						else
						{
							if (!(name == "Grox The Great"))
							{
								goto IL_F40;
							}
							return 0.41f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.1f;
						}
						break;
					}
					default:
						goto IL_F40;
					}
					return 0.92f;
					IL_86E:
					return 0.75f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.07f;
				}
			}
			IL_F40:
			return (float)((int)laserIndex) / 6f;
		}

		// Token: 0x06000D22 RID: 3362 RVA: 0x0030CEA2 File Offset: 0x0030B0A2
		public static int GetByUUID(int owner, float uuid)
		{
			return Projectile.GetByUUID(owner, (int)uuid);
		}

		// Token: 0x06000D23 RID: 3363 RVA: 0x0030CEAC File Offset: 0x0030B0AC
		public static int GetByUUID(int owner, int uuid)
		{
			if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
			{
				return -1;
			}
			int num = Main.projectileIdentity[owner, uuid];
			if (num >= 0 && Main.projectile[num].active)
			{
				return num;
			}
			return -1;
		}

		// Token: 0x06000D24 RID: 3364 RVA: 0x0030CEF8 File Offset: 0x0030B0F8
		public void ProjectileFixDesperation()
		{
			if (this.owner < 0 || this.owner >= 255)
			{
				return;
			}
			int num = this.type;
			if (num <= 632)
			{
				if (num != 461 && num != 632)
				{
					return;
				}
			}
			else if (num != 642 && num != 644)
			{
				return;
			}
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].owner == this.owner && (float)Main.projectile[i].identity == this.ai[1] && Main.projectile[i].active)
				{
					this.ai[1] = (float)i;
					return;
				}
			}
		}

		// Token: 0x06000D25 RID: 3365 RVA: 0x0030CFA0 File Offset: 0x0030B1A0
		public bool ShouldUseWindPhysics()
		{
			if (Main.windPhysics)
			{
				bool? flag = ProjectileID.Sets.WindPhysicsImmunity[this.type];
				if (flag != null)
				{
					return !flag.Value;
				}
				int num = this.aiStyle;
				if (num <= 17)
				{
					if (num <= 8)
					{
						if (num - 1 > 1 && num != 8)
						{
							return false;
						}
					}
					else if (num != 10 && num != 14 && num - 16 > 1)
					{
						return false;
					}
				}
				else if (num <= 72)
				{
					switch (num)
					{
					case 21:
					case 24:
					case 28:
					case 29:
					case 32:
					case 33:
					case 34:
					case 35:
						break;
					case 22:
					case 23:
					case 25:
					case 26:
					case 27:
					case 30:
					case 31:
						return false;
					default:
						if (num != 49 && num != 72)
						{
							return false;
						}
						break;
					}
				}
				else if (num != 93 && num != 96 && num != 106)
				{
					return false;
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000D26 RID: 3366 RVA: 0x0030D074 File Offset: 0x0030B274
		private void AI_151_SuperStar()
		{
			this.alpha -= 10;
			int num = 100;
			if (this.alpha < num)
			{
				this.alpha = num;
			}
			if (this.soundDelay == 0)
			{
				this.soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
			}
			this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.005f * (float)this.direction;
			Vector2 vector;
			vector..ctor((float)Main.screenWidth, (float)Main.screenHeight);
			if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector / 2f, vector + new Vector2(400f))) && Main.rand.Next(6) == 0)
			{
				Gore.NewGore(this.position, this.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, new int[]
				{
					16,
					17,
					17,
					17
				}), 1f);
			}
			for (int i = 0; i < 2; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					int num2 = 228;
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, num2, 0f, 0f, 127, default(Color), 1f);
					dust.velocity *= 0.25f;
					dust.scale = 1.3f;
					dust.noGravity = true;
					dust.velocity += this.velocity.RotatedBy((double)(0.3926991f * (1f - (float)(2 * i))), default(Vector2)) * 0.2f;
				}
			}
		}

		// Token: 0x06000D27 RID: 3367 RVA: 0x0030D26E File Offset: 0x0030B46E
		public bool IsInterruptible(Player player)
		{
			return this.aiStyle == 160;
		}

		// Token: 0x06000D28 RID: 3368 RVA: 0x0030D280 File Offset: 0x0030B480
		public void Interrupt(Player player)
		{
			if (this.aiStyle == 160)
			{
				this.Kill();
				player.heldProj = -1;
				player.itemAnimation = 0;
				player.itemTime = 0;
			}
		}

		// Token: 0x06000D29 RID: 3369 RVA: 0x0030D2AA File Offset: 0x0030B4AA
		internal IEntitySource GetNPCSource_FromThis()
		{
			return base.GetSource_FromThis(null);
		}

		// Token: 0x06000D2A RID: 3370 RVA: 0x0030D2B3 File Offset: 0x0030B4B3
		internal IEntitySource GetProjectileSource_FromThis()
		{
			return base.GetSource_FromThis(null);
		}

		// Token: 0x06000D2B RID: 3371 RVA: 0x0030D2BC File Offset: 0x0030B4BC
		internal IEntitySource GetItemSource_FromThis()
		{
			return base.GetSource_FromThis(null);
		}

		// Token: 0x06000D2C RID: 3372 RVA: 0x0030D2C5 File Offset: 0x0030B4C5
		internal IEntitySource GetItemSource_DropAsItem()
		{
			return base.GetSource_DropAsItem(null);
		}

		// Token: 0x06000D2D RID: 3373 RVA: 0x0030D2CE File Offset: 0x0030B4CE
		internal IEntitySource GetProjectileSource_OnHit(Entity victim, int projectileSourceId)
		{
			return base.GetSource_OnHit(victim, ProjectileSourceID.ToContextString(projectileSourceId));
		}

		// Token: 0x06000D2E RID: 3374 RVA: 0x0030D2DD File Offset: 0x0030B4DD
		internal IEntitySource GetItemSource_OnHit(Entity victim, int itemSourceId)
		{
			return base.GetSource_OnHit(victim, ItemSourceID.ToContextString(itemSourceId));
		}

		// Token: 0x06000D2F RID: 3375 RVA: 0x0030D2EC File Offset: 0x0030B4EC
		internal static IEntitySource GetNoneSource()
		{
			return Entity.GetSource_None();
		}

		// Token: 0x06000D30 RID: 3376 RVA: 0x0030D2F4 File Offset: 0x0030B4F4
		private void AI_152_SuperStarSlash()
		{
			float num = 1.5707964f;
			bool flag = true;
			if (this.type == 976)
			{
				flag = false;
			}
			if (flag)
			{
				this.alpha -= 10;
				int num2 = 100;
				if (this.alpha < num2)
				{
					this.alpha = num2;
				}
			}
			if (this.soundDelay == 0)
			{
				if (this.type == 977)
				{
					this.soundDelay = -1;
					SoundEngine.PlaySound(SoundID.Item1, new Vector2?(this.position), null);
				}
				else if (this.type == 976)
				{
					this.soundDelay = -1;
				}
				else
				{
					this.soundDelay = 20 + Main.rand.Next(40);
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
				}
			}
			if (this.ai[0] != 0f)
			{
				if (this.type == 976)
				{
					this.velocity = this.velocity.RotatedBy((double)this.ai[0], default(Vector2));
				}
				else
				{
					int num3 = 10 * this.MaxUpdates;
					this.velocity = this.velocity.RotatedBy((double)(this.ai[0] / (float)num3), default(Vector2));
				}
			}
			if (this.type == 977)
			{
				this.velocity *= 0.96f;
				if (Main.rand.Next(8) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 0.9f);
					dust.noGravity = true;
					dust.position = base.Center;
					dust.velocity = Main.rand.NextVector2Circular(1f, 1f) + this.velocity * 0.5f;
				}
			}
			if (this.type == 976)
			{
				if (Collision.LavaCollision(this.position, this.width, this.height))
				{
					this.Kill();
					return;
				}
				int num5 = this.frameCounter + 1;
				this.frameCounter = num5;
				if (num5 >= 2)
				{
					this.frameCounter = 0;
					num5 = this.frame + 1;
					this.frame = num5;
					if (num5 >= 7)
					{
						this.frame = 0;
					}
				}
				float fromValue = (float)(60 - this.timeLeft);
				float fromMax = this.ai[1] + 20f;
				float num4 = Utils.Remap(fromValue, this.ai[1], fromMax, 0f, 1f, true) * Utils.Remap(fromValue, this.ai[1], this.ai[1] + 60f, 1f, 0f, true);
				this.velocity = this.velocity.SafeNormalize(Vector2.UnitY) * (4f + 12f * (1f - num4));
				this.Opacity = Utils.Remap(fromValue, 0f, 10f, 0f, 1f, true) * Utils.Remap(fromValue, 30f, 60f, 1f, 0f, true);
				num = 0f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(this.position, this.width, this.height, 40, 0f, 0f, 0, default(Color), 1.2f);
					dust2.noGravity = true;
					dust2.velocity = this.velocity * 0.5f;
				}
				if (this.localAI[1] == 0f)
				{
					this.localAI[1] = 1f;
					for (int i = 0; i < 10; i++)
					{
						Dust.NewDustDirect(this.position, this.width, this.height, 40, 0f, 0f, 0, default(Color), 0.7f).velocity = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy((double)(Main.rand.NextFloat() * 6.2831855f * 0.25f), default(Vector2)) * (Main.rand.NextFloat() * 3f);
					}
				}
			}
			this.rotation = this.velocity.ToRotation() + num;
			this.tileCollide = false;
		}

		/// <summary>
		/// Changes the <see cref="F:Terraria.Entity.width" /> and <see cref="F:Terraria.Entity.height" /> of the projectile while preserving the <see cref="P:Terraria.Entity.Center" />. Useful for explosive projectiles that expand their hitbox while exploding.
		/// </summary>
		// Token: 0x06000D31 RID: 3377 RVA: 0x0030D754 File Offset: 0x0030B954
		public void Resize(int newWidth, int newHeight)
		{
			this.position = base.Center;
			this.width = newWidth;
			this.height = newHeight;
			base.Center = this.position;
		}

		// Token: 0x06000D32 RID: 3378 RVA: 0x0030D77C File Offset: 0x0030B97C
		private unsafe void Shimmer()
		{
			if (this.hostile || (this.aiStyle == 99 && this.ai[0] == -1f) || (this.aiStyle == 15 && (this.ai[0] == 2f || this.ai[0] == 4f)))
			{
				return;
			}
			if (this.type == 502)
			{
				this.velocity.Y = this.velocity.Y - 0.4f;
				this.timeLeft -= 5;
				return;
			}
			if (this.type == 469 || this.type == 181)
			{
				this.velocity.Y = this.velocity.Y - 0.2f;
				if (this.type == 469 && this.velocity.Y < 0f)
				{
					this.Kill();
					return;
				}
			}
			else
			{
				if (this.type == 819 || this.type == 117 || this.type == 474 || this.type == 225 || this.type == 103 || this.type == 2 || this.type == 82 || this.type == 120 || this.type == 172 || this.type == 41 || this.type == 91 || this.type == 278 || this.type == 5 || this.type == 639 || this.type == 631 || this.type == 495 || this.type == 4 || this.type == 282 || this.type == 1 || this.type == 81)
				{
					this.velocity.Y = this.velocity.Y - 0.4f;
					return;
				}
				if (this.aiStyle == 1 || this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type] || this.aiStyle == 40)
				{
					int num = (int)(base.Center.X / 16f);
					int num2 = (int)(this.position.Y / 16f);
					if (WorldGen.InWorld(num, num2, 0) && Main.tile[num, num2] != null && *Main.tile[num, num2].liquid == 255 && Main.tile[num, num2].shimmer() && WorldGen.InWorld(num, num2 - 1, 0) && Main.tile[num, num2 - 1] != null && *Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 1].shimmer())
					{
						this.Kill();
						return;
					}
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * -1f;
						this.netUpdate = true;
						if (this.timeLeft > 600)
						{
							this.timeLeft = 600;
						}
						this.timeLeft -= 60;
						this.shimmerWet = false;
						this.wet = false;
						return;
					}
				}
				else if (this.aiStyle == 5 || this.aiStyle == 8 || this.aiStyle == 21 || this.aiStyle == 28 || this.aiStyle == 29 || this.aiStyle == 33 || this.aiStyle == 36 || this.aiStyle == 47 || this.aiStyle == 93 || this.aiStyle == 115 || this.aiStyle == 151 || this.aiStyle == 152)
				{
					int num3 = (int)(base.Center.X / 16f);
					int num4 = (int)(this.position.Y / 16f);
					if (WorldGen.InWorld(num3, num4, 0) && Main.tile[num3, num4] != null && *Main.tile[num3, num4].liquid == 255 && Main.tile[num3, num4].shimmer() && WorldGen.InWorld(num3, num4 - 1, 0) && Main.tile[num3, num4 - 1] != null && *Main.tile[num3, num4 - 1].liquid > 0 && Main.tile[num3, num4 - 1].shimmer())
					{
						this.Kill();
						return;
					}
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * -1f;
						this.netUpdate = true;
						this.shimmerWet = false;
						this.wet = false;
						return;
					}
				}
				else if (this.aiStyle == 15)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * -1f;
						this.netUpdate = true;
					}
					this.velocity.Y = this.velocity.Y - 0.4f;
					if (this.velocity.Y < -8f)
					{
						this.velocity.Y = -8f;
						return;
					}
				}
				else if (this.aiStyle == 99)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * -1f;
						this.netUpdate = true;
						this.shimmerWet = false;
						this.wet = false;
					}
					if (this.velocity.Y > -8f)
					{
						this.velocity.Y = -8f;
						return;
					}
				}
				else
				{
					if (this.aiStyle == 7 || this.aiStyle == 9 || this.aiStyle == 13 || this.aiStyle == 35 || this.aiStyle == 53 || this.aiStyle == 130 || this.aiStyle == 134 || this.aiStyle == 137 || this.aiStyle == 138 || this.aiStyle == 149 || this.aiStyle == 160)
					{
						this.Kill();
						return;
					}
					if (this.aiStyle == 2)
					{
						this.velocity.Y = this.velocity.Y - 0.7f;
						if (this.type != 936 || NPC.unlockedSlimeRainbowSpawn || this.velocity.Y >= 0f)
						{
							this.timeLeft -= 20;
							return;
						}
						if (this.timeLeft > 5)
						{
							this.timeLeft = 5;
						}
						if (Main.netMode != 1)
						{
							NPC.unlockedSlimeRainbowSpawn = true;
							NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
							int num5 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X + 4, (int)base.Center.Y, 681, 0, 0f, 0f, 0f, 0f, 255);
							NPC npc = Main.npc[num5];
							npc.velocity = this.velocity;
							npc.netUpdate = true;
							WorldGen.CheckAchievement_RealEstateAndTownSlimes();
							return;
						}
					}
					else
					{
						if (this.aiStyle == 14 || this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type])
						{
							if (this.timeLeft > 3000)
							{
								this.timeLeft -= 60;
							}
							this.velocity.Y = this.velocity.Y - 0.5f;
							return;
						}
						if (this.aiStyle == 25 || this.aiStyle == 17)
						{
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = this.velocity.Y * 0.97f;
							}
							this.velocity.Y = this.velocity.Y - 0.7f;
							if (this.velocity.Y < -10f)
							{
								this.velocity.Y = -10f;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000D33 RID: 3379 RVA: 0x0030DF99 File Offset: 0x0030C199
		public void AI()
		{
			ProjectileLoader.ProjectileAI(this);
		}

		// Token: 0x06000D34 RID: 3380 RVA: 0x0030DFA4 File Offset: 0x0030C1A4
		public unsafe void VanillaAI()
		{
			if (this.aiStyle == 1)
			{
				this.AI_001();
				return;
			}
			if (this.aiStyle == 2)
			{
				if (Main.windPhysics)
				{
					ref float ptr = ref this.velocity.X;
					ptr += Main.windSpeedCurrent * Main.windPhysicsStrength;
				}
				if (this.type == 93 && Main.rand.Next(5) == 0)
				{
					int num = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1f);
					Main.dust[num].noGravity = true;
					Main.dust[num].fadeIn = 1f;
					ref float ptr = ref Main.dust[num].velocity.X;
					ptr *= 0.3f;
					ptr = ref Main.dust[num].velocity.Y;
					ptr *= 0.3f;
				}
				if (this.type == 968)
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						Vector2 vector = Main.player[this.owner].velocity;
						float num2 = Utils.Remap(vector.Length(), 0f, 3f, 0f, 0.5f, true);
						Vector2 vector2 = base.Center + new Vector2(-8f, -8f) + this.velocity.SafeNormalize(Vector2.Zero) * 25f;
						int num1063;
						for (int i = 0; i < 8; i = num1063 + 1)
						{
							Dust dust = Main.dust[Dust.NewDust(vector2, 16, 16, 31, this.velocity.X, this.velocity.Y, 50, default(Color), 0.75f + Main.rand.NextFloat() * 0.3f)];
							dust.velocity = (this.velocity * (0.2f + num2)).RotatedByRandom(0.699999988079071) + vector * 0.25f;
							Dust dust2 = dust;
							Dust dust212 = dust2;
							dust212.velocity *= 0f + Main.rand.NextFloat() * 1f;
							dust.fadeIn = 0.1f;
							dust2 = dust;
							dust212 = dust2;
							dust212.position -= dust.velocity;
							dust.noGravity = true;
							num1063 = i;
						}
					}
					this.alpha = Math.Max(0, this.alpha - 50);
					this.frame = (int)this.ai[1];
				}
				if (this.type == 304 && this.localAI[0] == 0f)
				{
					ref float ptr = ref this.localAI[0];
					ptr += 1f;
					this.alpha = 0;
				}
				if (this.type == 510)
				{
					this.rotation += Math.Abs(this.velocity.X) * 0.04f * (float)this.direction;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.03f * (float)this.direction;
				}
				if (this.type == 909)
				{
					int num3 = 38;
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= (float)num3)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.4f;
						ptr = ref this.velocity.X;
						ptr *= 0.97f;
					}
					if (Main.netMode != 1 && this.ai[1] == 0f)
					{
						this.ai[1] = (float)(1 + Main.rand.Next(6));
						this.netUpdate = true;
					}
					if (this.ai[1] > 0f)
					{
						this.frame = (int)this.ai[1] - 1;
					}
				}
				else if (this.type == 162)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 18f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.28f;
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num1063;
							for (int j = 0; j < 10; j = num1063 + 1)
							{
								int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust3 = Main.dust[num4];
								Dust dust212 = dust3;
								dust212.velocity *= 0.5f;
								dust3 = Main.dust[num4];
								dust212 = dust3;
								dust212.velocity += this.velocity * 0.1f;
								num1063 = j;
							}
							for (int k = 0; k < 5; k = num1063 + 1)
							{
								int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num5].noGravity = true;
								Dust dust4 = Main.dust[num5];
								Dust dust212 = dust4;
								dust212.velocity *= 3f;
								dust4 = Main.dust[num5];
								dust212 = dust4;
								dust212.velocity += this.velocity * 0.2f;
								num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust4 = Main.dust[num5];
								dust212 = dust4;
								dust212.velocity *= 2f;
								dust4 = Main.dust[num5];
								dust212 = dust4;
								dust212.velocity += this.velocity * 0.3f;
								num1063 = k;
							}
							for (int l = 0; l < 1; l = num1063 + 1)
							{
								int num6 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore = Main.gore[num6];
								Gore gore8 = gore;
								gore8.position += this.velocity * 1.25f;
								Main.gore[num6].scale = 1.5f;
								gore = Main.gore[num6];
								gore8 = gore;
								gore8.velocity += this.velocity * 0.5f;
								gore = Main.gore[num6];
								gore8 = gore;
								gore8.velocity *= 0.02f;
								num1063 = l;
							}
						}
					}
				}
				else if (this.type == 281)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 18f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.28f;
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num1063;
							for (int m = 0; m < 10; m = num1063 + 1)
							{
								int num7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust5 = Main.dust[num7];
								Dust dust212 = dust5;
								dust212.velocity *= 0.5f;
								dust5 = Main.dust[num7];
								dust212 = dust5;
								dust212.velocity += this.velocity * 0.1f;
								num1063 = m;
							}
							for (int n = 0; n < 5; n = num1063 + 1)
							{
								int num8 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num8].noGravity = true;
								Dust dust6 = Main.dust[num8];
								Dust dust212 = dust6;
								dust212.velocity *= 3f;
								dust6 = Main.dust[num8];
								dust212 = dust6;
								dust212.velocity += this.velocity * 0.2f;
								num8 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust6 = Main.dust[num8];
								dust212 = dust6;
								dust212.velocity *= 2f;
								dust6 = Main.dust[num8];
								dust212 = dust6;
								dust212.velocity += this.velocity * 0.3f;
								num1063 = n;
							}
							for (int num9 = 0; num9 < 1; num9 = num1063 + 1)
							{
								int num10 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore2 = Main.gore[num10];
								Gore gore8 = gore2;
								gore8.position += this.velocity * 1.25f;
								Main.gore[num10].scale = 1.5f;
								gore2 = Main.gore[num10];
								gore8 = gore2;
								gore8.velocity += this.velocity * 0.5f;
								gore2 = Main.gore[num10];
								gore8 = gore2;
								gore8.velocity *= 0.02f;
								num1063 = num9;
							}
						}
					}
				}
				else if (this.type == 240)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 16f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.18f;
						ptr = ref this.velocity.X;
						ptr *= 0.991f;
					}
					if (this.ai[0] > 2f)
					{
						this.alpha = 0;
						if (this.ai[0] == 3f)
						{
							int num1063;
							for (int num11 = 0; num11 < 7; num11 = num1063 + 1)
							{
								int num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust7 = Main.dust[num12];
								Dust dust212 = dust7;
								dust212.velocity *= 0.5f;
								dust7 = Main.dust[num12];
								dust212 = dust7;
								dust212.velocity += this.velocity * 0.1f;
								num1063 = num11;
							}
							for (int num13 = 0; num13 < 3; num13 = num1063 + 1)
							{
								int num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num14].noGravity = true;
								Dust dust8 = Main.dust[num14];
								Dust dust212 = dust8;
								dust212.velocity *= 3f;
								dust8 = Main.dust[num14];
								dust212 = dust8;
								dust212.velocity += this.velocity * 0.2f;
								num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								dust8 = Main.dust[num14];
								dust212 = dust8;
								dust212.velocity *= 2f;
								dust8 = Main.dust[num14];
								dust212 = dust8;
								dust212.velocity += this.velocity * 0.3f;
								num1063 = num13;
							}
							for (int num15 = 0; num15 < 1; num15 = num1063 + 1)
							{
								int num16 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
								Gore gore3 = Main.gore[num16];
								Gore gore8 = gore3;
								gore8.position += this.velocity * 1.25f;
								Main.gore[num16].scale = 1.25f;
								gore3 = Main.gore[num16];
								gore8 = gore3;
								gore8.velocity += this.velocity * 0.5f;
								gore3 = Main.gore[num16];
								gore8 = gore3;
								gore8.velocity *= 0.02f;
								num1063 = num15;
							}
						}
					}
				}
				else if (this.type == 497)
				{
					int num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num17].position = (Main.dust[num17].position + base.Center) / 2f;
					Main.dust[num17].noGravity = true;
					Dust dust9 = Main.dust[num17];
					Dust dust212 = dust9;
					dust212.velocity *= 0.3f;
					dust9 = Main.dust[num17];
					dust212 = dust9;
					dust212.velocity -= this.velocity * 0.1f;
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 30f)
					{
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
						ptr = ref this.velocity.Y;
						ptr += 0.5f;
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 861)
				{
					float ptr;
					if (Main.myPlayer == this.owner)
					{
						ptr = ref this.localAI[0];
						ref float ptr2 = ref ptr;
						float num1064 = ptr;
						ptr2 = num1064 + 1f;
						if (this.localAI[0] > 30f)
						{
							this.localAI[0] = 30f;
						}
						Player player = Main.player[this.owner];
						int num1063;
						for (int num18 = 0; num18 < 255; num18 = num1063 + 1)
						{
							Player player2 = Main.player[num18];
							if (player2 != null && player2.active && !player2.dead && (player2.whoAmI != player.whoAmI || this.localAI[0] >= 30f) && this.Colliding(base.Hitbox, player2.Hitbox))
							{
								this.Kill();
								break;
							}
							num1063 = num18;
						}
					}
					if (this.velocity.Y == 0f)
					{
						ptr = ref this.velocity.X;
						ptr *= 0.95f;
					}
					else
					{
						ptr = ref this.velocity.X;
						ptr *= 0.995f;
					}
					if (Math.Abs(this.velocity.X) < 0.5f)
					{
						this.velocity.X = 0f;
					}
					if (this.velocity.X == 0f && this.velocity.Y == 0f)
					{
						this.Kill();
					}
					ptr = ref this.velocity.Y;
					ptr += 0.1f;
					if (this.ai[1] == 1f)
					{
						this.frame = (this.frameCounter = 0);
						this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.03f * (float)this.direction;
					}
					else
					{
						if (this.frame == 0)
						{
							this.frame = 1;
						}
						int num1063 = this.frameCounter;
						this.frameCounter = num1063 + 1;
						if (this.frameCounter > 4)
						{
							this.frameCounter = 0;
							num1063 = this.frame;
							this.frame = num1063 + 1;
							if (this.frame >= Main.projFrames[this.type])
							{
								this.frame = 1;
							}
						}
						this.rotation = this.velocity.ToRotation() + 0.7853982f;
						this.spriteDirection = ((this.velocity.X >= 0f) ? 1 : -1);
						if (this.spriteDirection == -1)
						{
							this.rotation += 1.5707964f;
						}
					}
				}
				else if (this.type == 249)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 0f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.25f;
					}
				}
				else if (this.type == 347)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 5f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.25f;
					}
				}
				else if (this.type == 501)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 18f)
					{
						ptr = ref this.velocity.X;
						ptr *= 0.995f;
						ptr = ref this.velocity.Y;
						ptr += 0.2f;
					}
				}
				else if (this.type == 504 || this.type == 954 || this.type == 979)
				{
					this.alpha = 255;
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] > 3f)
					{
						int num19 = 100;
						if (this.ai[0] > 20f)
						{
							int num20 = 40;
							float num21 = this.ai[0] - 20f;
							num19 = (int)(100f * (1f - num21 / (float)num20));
							if (num21 >= (float)num20)
							{
								this.Kill();
							}
						}
						if (this.ai[0] <= 10f)
						{
							num19 = (int)this.ai[0] * 10;
						}
						if (Main.rand.Next(100) < num19)
						{
							int num22 = (this.type != 979) ? Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 150, default(Color), 1f) : Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 150, default(Color), 1f);
							Main.dust[num22].position = (Main.dust[num22].position + base.Center) / 2f;
							Main.dust[num22].noGravity = true;
							Dust dust10 = Main.dust[num22];
							Dust dust212 = dust10;
							dust212.velocity *= 2f;
							dust10 = Main.dust[num22];
							dust212 = dust10;
							dust212.scale *= 1.6f;
							dust10 = Main.dust[num22];
							dust212 = dust10;
							dust212.velocity += this.velocity;
						}
					}
					if (this.ai[0] >= 20f)
					{
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
						ptr = ref this.velocity.Y;
						ptr += 0.1f;
					}
				}
				else if (this.type == 69 || this.type == 70 || this.type == 621)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 10f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.25f;
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
					}
				}
				else if (this.type == 166)
				{
					if (this.owner == Main.myPlayer && this.ai[1] == 1f)
					{
						int num1063;
						for (int num23 = 0; num23 < 200; num23 = num1063 + 1)
						{
							if (Main.npc[num23].active && Main.npc[num23].townNPC && this.Colliding(base.Hitbox, Main.npc[num23].Hitbox))
							{
								this.Kill();
								return;
							}
							num1063 = num23;
						}
						if (Main.netMode == 1)
						{
							for (int num24 = 0; num24 < 255; num24 = num1063 + 1)
							{
								if (num24 != this.owner && Main.player[num24].active && !Main.player[this.owner].InOpposingTeam(Main.player[num24]) && this.Colliding(base.Hitbox, Main.player[num24].Hitbox))
								{
									this.Kill();
									return;
								}
								num1063 = num24;
							}
						}
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 20f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.3f;
						ptr = ref this.velocity.X;
						ptr *= 0.98f;
					}
				}
				else if (this.type == 300)
				{
					if (this.ai[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item1, new Vector2?(this.position), null);
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 60f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.2f;
						ptr = ref this.velocity.X;
						ptr *= 0.99f;
					}
				}
				else if (this.type == 306)
				{
					if (this.alpha <= 200)
					{
						int num1063;
						for (int num25 = 0; num25 < 4; num25 = num1063 + 1)
						{
							float num26 = this.velocity.X / 4f * (float)num25;
							float num27 = this.velocity.Y / 4f * (float)num25;
							int num28 = Dust.NewDust(this.position, this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num28].position.X = base.Center.X - num26;
							Main.dust[num28].position.Y = base.Center.Y - num27;
							Dust dust11 = Main.dust[num28];
							Dust dust212 = dust11;
							dust212.velocity *= 0f;
							Main.dust[num28].scale = 0.7f;
							num1063 = num25;
						}
					}
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 0.785f;
				}
				else if (this.type == 304)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 30f)
					{
						this.alpha += 10;
						this.damage = (int)((double)this.damage * 0.9);
						this.knockBack = (float)((int)((double)this.knockBack * 0.9));
						if (this.alpha >= 255)
						{
							this.active = false;
						}
					}
					if (this.ai[0] < 30f)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 370 || this.type == 371 || this.type == 936)
				{
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= 15f)
					{
						ptr = ref this.velocity.Y;
						ptr += 0.3f;
						ptr = ref this.velocity.X;
						ptr *= 0.98f;
					}
				}
				else
				{
					int num29 = 20;
					if (this.type == 93)
					{
						num29 = 28 + Main.rand.Next(6);
					}
					ref float ptr = ref this.ai[0];
					ptr += 1f;
					if (this.ai[0] >= (float)num29)
					{
						if (this.type == 93)
						{
							this.ai[0] = 40f;
						}
						ptr = ref this.velocity.Y;
						ptr += 0.4f;
						ptr = ref this.velocity.X;
						ptr *= 0.97f;
					}
					else if (this.type == 48 || this.type == 54 || this.type == 93 || this.type == 520 || this.type == 599)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
				if (this.type == 54 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					return;
				}
			}
			else if (this.aiStyle == 3)
			{
				if (this.soundDelay == 0 && this.type != 383)
				{
					this.soundDelay = 8;
					SoundEngine.PlaySound(SoundID.Item7, new Vector2?(this.position), null);
				}
				if (this.type == 19)
				{
					int num1063;
					for (int num30 = 0; num30 < 2; num30 = num1063 + 1)
					{
						int num31 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num31].noGravity = true;
						ref float ptr = ref Main.dust[num31].velocity.X;
						ptr *= 0.3f;
						ptr = ref Main.dust[num31].velocity.Y;
						ptr *= 0.3f;
						num1063 = num30;
					}
				}
				else if (this.type == 1000)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num1063 = Main.rand.Next(3);
						if (num1063 != 1)
						{
							if (num1063 != 2)
							{
								int num1065 = Main.rand.Next(3);
								int num32;
								if (num1065 != 1)
								{
									if (num1065 != 2)
									{
										num32 = 15;
									}
									else
									{
										num32 = 58;
									}
								}
								else
								{
									num32 = 57;
								}
								Dust dust12 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num32, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, default(Color), 0.7f)];
								Dust dust13 = dust12;
								Dust dust212 = dust13;
								dust212.velocity *= 0.5f;
							}
							else
							{
								Dust dust14 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, 0, default(Color), 1.1f)];
								dust14.noGravity = true;
								Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, default(Color), 0.6f);
							}
						}
						else
						{
							Dust dust15 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 267, this.velocity.X, this.velocity.Y, 50, new Color(50, 50, 200), 1.1f)];
							dust15.fadeIn = 0.1f;
							dust15.velocity = this.velocity * 0.5f;
							dust15.noGravity = true;
						}
					}
				}
				else if (this.type == 867)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num33 = Dust.NewDust(this.position, this.width, this.height, 165, this.velocity.X, this.velocity.Y, 50, default(Color), 1f);
						Dust dust16 = Main.dust[num33];
						Dust dust212 = dust16;
						dust212.velocity *= 0.5f;
						Main.dust[num33].noGravity = true;
					}
				}
				else if (this.type == 33)
				{
					if (Main.rand.Next(1) == 0)
					{
						int num34 = Dust.NewDust(this.position, this.width, this.height, 40, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, default(Color), 1.4f);
						Main.dust[num34].noGravity = true;
					}
				}
				else if (this.type == 320)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num35 = Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, default(Color), 1.1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num35].scale = 0.9f;
							Dust dust17 = Main.dust[num35];
							Dust dust212 = dust17;
							dust212.velocity *= 0.2f;
						}
						else
						{
							Main.dust[num35].noGravity = true;
						}
					}
				}
				else if (this.type == 6)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num1063 = Main.rand.Next(3);
						int num36;
						if (num1063 != 0)
						{
							if (num1063 != 1)
							{
								num36 = 58;
							}
							else
							{
								num36 = 57;
							}
						}
						else
						{
							num36 = 15;
						}
						Dust.NewDust(this.position, this.width, this.height, num36, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, default(Color), 0.7f);
					}
				}
				else if (this.type == 113 && Main.rand.Next(1) == 0)
				{
					int num37 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, 0, default(Color), 1.1f);
					Main.dust[num37].noGravity = true;
					Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, default(Color), 0.6f);
				}
				if (this.ai[0] == 0f)
				{
					bool flag = true;
					int num38 = this.type;
					if (num38 == 866)
					{
						flag = false;
					}
					if (flag)
					{
						ref float ptr = ref this.ai[1];
						ptr += 1f;
					}
					if (this.type == 106 && this.ai[1] >= 45f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
					if (this.type == 320 || this.type == 383)
					{
						if (this.ai[1] >= 10f)
						{
							ref float ptr = ref this.velocity.Y;
							ptr += 0.5f;
							if (this.type == 383 && this.velocity.Y < 0f)
							{
								ptr = ref this.velocity.Y;
								ptr += 0.35f;
							}
							ptr = ref this.velocity.X;
							ptr *= 0.95f;
							if (this.velocity.Y > 16f)
							{
								this.velocity.Y = 16f;
							}
							if (this.type == 383 && Vector2.Distance(base.Center, Main.player[this.owner].Center) > 800f)
							{
								this.ai[0] = 1f;
								this.netUpdate = true;
							}
						}
					}
					else if (this.type == 182)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num39 = Dust.NewDust(this.position, this.width, this.height, 57, 0f, 0f, 255, default(Color), 0.75f);
							Dust dust18 = Main.dust[num39];
							Dust dust212 = dust18;
							dust212.velocity *= 0.1f;
							Main.dust[num39].noGravity = true;
						}
						if (this.velocity.X > 0f)
						{
							this.spriteDirection = 1;
						}
						else if (this.velocity.X < 0f)
						{
							this.spriteDirection = -1;
						}
						float num40 = this.position.X;
						float num41 = this.position.Y;
						float num42 = 800f;
						bool flag2 = false;
						if (this.ai[1] > 10f && this.ai[1] < 360f)
						{
							int num1063;
							for (int num43 = 0; num43 < 200; num43 = num1063 + 1)
							{
								if (Main.npc[num43].CanBeChasedBy(this, false))
								{
									float num44 = Main.npc[num43].position.X + (float)(Main.npc[num43].width / 2);
									float num45 = Main.npc[num43].position.Y + (float)(Main.npc[num43].height / 2);
									float num46 = base.Distance(Main.npc[num43].Center);
									if (num46 < num42 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num43].position, Main.npc[num43].width, Main.npc[num43].height))
									{
										num42 = num46;
										num40 = num44;
										num41 = num45;
										flag2 = true;
									}
								}
								num1063 = num43;
							}
						}
						if (!flag2)
						{
							num40 = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
							num41 = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
							if (this.ai[1] >= 30f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								this.netUpdate = true;
							}
						}
						float num47 = 12f;
						float num48 = 0.25f;
						Vector2 vector3;
						vector3..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num49 = num40 - vector3.X;
						float num50 = num41 - vector3.Y;
						float num51 = (float)Math.Sqrt((double)(num49 * num49 + num50 * num50));
						num51 = num47 / num51;
						num49 *= num51;
						num50 *= num51;
						if (this.velocity.X < num49)
						{
							ref float ptr = ref this.velocity.X;
							ptr += num48;
							if (this.velocity.X < 0f && num49 > 0f)
							{
								ptr = ref this.velocity.X;
								ptr += num48 * 2f;
							}
						}
						else if (this.velocity.X > num49)
						{
							ref float ptr = ref this.velocity.X;
							ptr -= num48;
							if (this.velocity.X > 0f && num49 < 0f)
							{
								ptr = ref this.velocity.X;
								ptr -= num48 * 2f;
							}
						}
						if (this.velocity.Y < num50)
						{
							ref float ptr = ref this.velocity.Y;
							ptr += num48;
							if (this.velocity.Y < 0f && num50 > 0f)
							{
								ptr = ref this.velocity.Y;
								ptr += num48 * 2f;
							}
						}
						else if (this.velocity.Y > num50)
						{
							ref float ptr = ref this.velocity.Y;
							ptr -= num48;
							if (this.velocity.Y > 0f && num50 < 0f)
							{
								ptr = ref this.velocity.Y;
								ptr -= num48 * 2f;
							}
						}
					}
					else if (this.type == 866)
					{
						if (this.owner == Main.myPlayer && this.damage > 0)
						{
							float num52 = this.ai[1];
							if (this.localAI[0] >= 10f && this.localAI[0] <= 360f)
							{
								int num53 = this.FindTargetWithLineOfSight(800f);
								this.ai[1] = (float)num53;
							}
							else
							{
								this.ai[1] = -1f;
							}
							if (this.ai[1] != num52)
							{
								this.netUpdate = true;
							}
						}
						ref float ptr = ref this.localAI[0];
						ptr += 1f;
						int num54 = (int)this.ai[1];
						Vector2 vector4;
						if (Main.npc.IndexInRange(num54) && Main.npc[num54].CanBeChasedBy(this, false))
						{
							vector4 = Main.npc[num54].Center;
						}
						else
						{
							vector4 = base.Center + this.velocity * 100f;
							int num55 = 30;
							if (this.owner != Main.myPlayer)
							{
								num55 = 60;
							}
							if (this.localAI[0] >= (float)num55)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								this.netUpdate = true;
							}
						}
						float num56 = 12f;
						float num57 = 0.25f;
						Vector2 vector5;
						vector5..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num58 = vector4.X - vector5.X;
						float num59 = vector4.Y - vector5.Y;
						float num60 = (float)Math.Sqrt((double)(num58 * num58 + num59 * num59));
						num60 = num56 / num60;
						num58 *= num60;
						num59 *= num60;
						if (this.velocity.X < num58)
						{
							ptr = ref this.velocity.X;
							ptr += num57;
							if (this.velocity.X < 0f && num58 > 0f)
							{
								ptr = ref this.velocity.X;
								ptr += num57 * 2f;
							}
						}
						else if (this.velocity.X > num58)
						{
							ptr = ref this.velocity.X;
							ptr -= num57;
							if (this.velocity.X > 0f && num58 < 0f)
							{
								ptr = ref this.velocity.X;
								ptr -= num57 * 2f;
							}
						}
						if (this.velocity.Y < num59)
						{
							ptr = ref this.velocity.Y;
							ptr += num57;
							if (this.velocity.Y < 0f && num59 > 0f)
							{
								ptr = ref this.velocity.Y;
								ptr += num57 * 2f;
							}
						}
						else if (this.velocity.Y > num59)
						{
							ptr = ref this.velocity.Y;
							ptr -= num57;
							if (this.velocity.Y > 0f && num59 < 0f)
							{
								ptr = ref this.velocity.Y;
								ptr -= num57 * 2f;
							}
						}
					}
					else if (this.type == 301)
					{
						if (this.ai[1] >= 20f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.velocity = Vector2.Zero;
							this.netUpdate = true;
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
				else
				{
					this.tileCollide = false;
					float num61 = 9f;
					float num62 = 0.4f;
					if (this.type == 1000)
					{
						num61 = 9.5f;
					}
					if (this.type == 19)
					{
						num61 = 20f;
						num62 = 1.5f;
					}
					else if (this.type == 33)
					{
						num61 = 18f;
						num62 = 1.2f;
					}
					else if (this.type == 182)
					{
						num61 = 16f;
						num62 = 1.2f;
					}
					else if (this.type == 866)
					{
						num61 = 16f;
						num62 = 1.2f;
					}
					else if (this.type == 106)
					{
						num61 = 16f;
						num62 = 1.2f;
					}
					else if (this.type == 272)
					{
						num61 = 20f;
						num62 = 1.5f;
					}
					else if (this.type == 333)
					{
						num61 = 12f;
						num62 = 0.6f;
					}
					else if (this.type == 301)
					{
						num61 = 15f;
						num62 = 3f;
					}
					else if (this.type == 320)
					{
						num61 = 15f;
						num62 = 3f;
					}
					else if (this.type == 383)
					{
						num61 = 16f;
						num62 = 4f;
					}
					Vector2 vector6;
					vector6..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num63 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector6.X;
					float num64 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector6.Y;
					float num65 = (float)Math.Sqrt((double)(num63 * num63 + num64 * num64));
					if (num65 > 3000f)
					{
						this.Kill();
					}
					num65 = num61 / num65;
					num63 *= num65;
					num64 *= num65;
					if (this.type == 383)
					{
						Vector2 vector7 = new Vector2(num63, num64) - this.velocity;
						if (vector7 != Vector2.Zero)
						{
							Vector2 vector8 = vector7;
							vector8.Normalize();
							this.velocity += vector8 * Math.Min(num62, vector7.Length());
						}
					}
					else
					{
						if (this.velocity.X < num63)
						{
							ref float ptr = ref this.velocity.X;
							ptr += num62;
							if (this.velocity.X < 0f && num63 > 0f)
							{
								ptr = ref this.velocity.X;
								ptr += num62;
							}
						}
						else if (this.velocity.X > num63)
						{
							ref float ptr = ref this.velocity.X;
							ptr -= num62;
							if (this.velocity.X > 0f && num63 < 0f)
							{
								ptr = ref this.velocity.X;
								ptr -= num62;
							}
						}
						if (this.velocity.Y < num64)
						{
							ref float ptr = ref this.velocity.Y;
							ptr += num62;
							if (this.velocity.Y < 0f && num64 > 0f)
							{
								ptr = ref this.velocity.Y;
								ptr += num62;
							}
						}
						else if (this.velocity.Y > num64)
						{
							ref float ptr = ref this.velocity.Y;
							ptr -= num62;
							if (this.velocity.Y > 0f && num64 < 0f)
							{
								ptr = ref this.velocity.Y;
								ptr -= num62;
							}
						}
					}
					if (Main.myPlayer == this.owner)
					{
						Rectangle rectangle;
						rectangle..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
						Rectangle value;
						value..ctor((int)Main.player[this.owner].position.X, (int)Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height);
						if (rectangle.Intersects(value))
						{
							this.Kill();
						}
					}
				}
				if (this.type == 106)
				{
					this.rotation += 0.3f * (float)this.direction;
					return;
				}
				if (this.type == 866)
				{
					this.rotation = this.velocity.ToRotation();
					if (Main.rand.Next(2) == 0)
					{
						int num66 = Dust.NewDust(this.position, this.width, this.height, 212, 0f, 0f, 0, default(Color), 1f);
						Dust dust19 = Main.dust[num66];
						Dust dust212 = dust19;
						dust212.velocity *= 0.1f;
						Main.dust[num66].noGravity = true;
						return;
					}
				}
				else if (this.type == 383)
				{
					if (this.ai[0] == 0f)
					{
						Vector2 v = this.velocity;
						v = v.SafeNormalize(Vector2.Zero);
						this.rotation = (float)Math.Atan2((double)v.Y, (double)v.X) + 1.57f;
						return;
					}
					Vector2 v2 = base.Center - Main.player[this.owner].Center;
					v2 = v2.SafeNormalize(Vector2.Zero);
					this.rotation = (float)Math.Atan2((double)v2.Y, (double)v2.X) + 1.57f;
					return;
				}
				else
				{
					if (this.type != 301)
					{
						this.rotation += 0.4f * (float)this.direction;
						return;
					}
					if (this.ai[0] != 0f)
					{
						this.rotation += 0.4f * (float)this.direction;
						return;
					}
					this.rotation = this.velocity.ToRotation() + 0.7853982f;
					if (Main.rand.Next(2) == 0)
					{
						int num67 = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, default(Color), 1.2f);
						Dust dust20 = Main.dust[num67];
						Dust dust212 = dust20;
						dust212.velocity += this.velocity * 0.3f;
						dust20 = Main.dust[num67];
						dust212 = dust20;
						dust212.velocity *= 0.2f;
						Main.dust[num67].noGravity = true;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num68 = Dust.NewDust(this.position, this.width, this.height, 43, 0f, 0f, 254, default(Color), 0.3f);
						Dust dust21 = Main.dust[num68];
						Dust dust212 = dust21;
						dust212.velocity += this.velocity * 0.5f;
						dust21 = Main.dust[num68];
						dust212 = dust21;
						dust212.velocity *= 0.5f;
						Main.dust[num68].noGravity = true;
						return;
					}
				}
			}
			else if (this.aiStyle == 4)
			{
				if (Main.netMode != 2 && this.ai[1] == 0f && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundStyle legacySoundStyle = SoundID.Item8;
					if (this.type == 494)
					{
						legacySoundStyle = SoundID.Item101;
					}
					SoundEngine.PlaySound(legacySoundStyle, new Vector2?(base.Center), null);
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				if (this.ai[0] == 0f)
				{
					if (this.type >= 150 && this.type <= 152 && this.ai[1] == 0f && this.alpha == 255 && Main.rand.Next(2) == 0)
					{
						int num1063 = this.type;
						this.type = num1063 + 1;
						this.netUpdate = true;
					}
					this.alpha -= 50;
					if (this.type >= 150 && this.type <= 152)
					{
						this.alpha -= 25;
					}
					else if (this.type == 493 || this.type == 494)
					{
						this.alpha -= 50;
					}
					if (this.alpha > 0)
					{
						return;
					}
					this.alpha = 0;
					this.ai[0] = 1f;
					if (this.ai[1] == 0f)
					{
						ref float ptr = ref this.ai[1];
						ptr += 1f;
						this.position += this.velocity * 1f;
					}
					if (this.type == 7 && Main.myPlayer == this.owner)
					{
						int num69 = this.type;
						if (this.ai[1] >= 6f)
						{
							int num1063 = num69;
							num69 = num1063 + 1;
						}
						int num70 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num69, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
						Main.projectile[num70].damage = this.damage;
						Main.projectile[num70].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num70, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
					if (this.type == 494 && Main.myPlayer == this.owner)
					{
						int num71 = this.type;
						if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
						{
							int num1063 = num71;
							num71 = num1063 - 1;
						}
						int num72 = this.damage;
						float num73 = this.knockBack;
						if (num71 == 493)
						{
							num72 = (int)((double)this.damage * 1.25);
							num73 = this.knockBack * 1.25f;
						}
						int number = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num71, num72, num73, this.owner, 0f, this.ai[1] + 1f, 0f);
						NetMessage.SendData(27, -1, -1, null, number, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
					if ((this.type == 150 || this.type == 151) && Main.myPlayer == this.owner)
					{
						int num74 = this.type;
						if (this.type == 150)
						{
							num74 = 151;
						}
						else if (this.type == 151)
						{
							num74 = 150;
						}
						if (this.ai[1] >= 10f && this.type == 151)
						{
							num74 = 152;
						}
						int num75 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float)(this.width / 2), this.position.Y + this.velocity.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, num74, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
						Main.projectile[num75].damage = this.damage;
						Main.projectile[num75].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num75, 0f, 0f, 0f, 0, 0, 0);
					}
					return;
				}
				else
				{
					if (this.alpha < 170 && this.alpha + 5 >= 170)
					{
						if (this.type >= 150 && this.type <= 152)
						{
							int num1063;
							for (int num76 = 0; num76 < 8; num76 = num1063 + 1)
							{
								int num77 = Dust.NewDust(this.position, this.width, this.height, 7, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, default(Color), 1.3f);
								Main.dust[num77].noGravity = true;
								Dust dust22 = Main.dust[num77];
								Dust dust212 = dust22;
								dust212.velocity *= 0.5f;
								num1063 = num76;
							}
						}
						else if (this.type == 493 || this.type == 494)
						{
							int num1063;
							for (int num78 = 0; num78 < 8; num78 = num1063 + 1)
							{
								int num79 = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(68, 71), this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, default(Color), 1.3f);
								Main.dust[num79].noGravity = true;
								Dust dust23 = Main.dust[num79];
								Dust dust212 = dust23;
								dust212.velocity *= 0.5f;
								num1063 = num78;
							}
						}
						else
						{
							int num1063;
							for (int num80 = 0; num80 < 3; num80 = num1063 + 1)
							{
								Dust.NewDust(this.position, this.width, this.height, 18, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 170, default(Color), 1.2f);
								num1063 = num80;
							}
							Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 170, default(Color), 1.1f);
						}
					}
					if (this.type >= 150 && this.type <= 152)
					{
						this.alpha += 3;
					}
					else if (this.type == 493 || this.type == 494)
					{
						this.alpha += 4;
					}
					else
					{
						this.alpha += 5;
					}
					if (this.alpha >= 255)
					{
						this.Kill();
						return;
					}
				}
			}
			else if (this.aiStyle == 5)
			{
				if (!Main.remixWorld && this.type == 12 && Main.dayTime && this.damage == 1000)
				{
					this.Kill();
				}
				if (this.type == 503 || this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
				{
					if (base.Center.Y > this.ai[1])
					{
						this.tileCollide = true;
					}
				}
				else if (this.type == 92)
				{
					if (this.position.Y > this.ai[1])
					{
						this.tileCollide = true;
					}
				}
				else if (this.type == 9)
				{
					this.tileCollide = (base.Bottom.Y >= this.ai[1]);
				}
				else
				{
					if (this.ai[1] == 0f && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[1] = 1f;
						this.netUpdate = true;
					}
					if (this.ai[1] != 0f)
					{
						this.tileCollide = true;
					}
				}
				if (this.soundDelay == 0)
				{
					this.soundDelay = 20 + Main.rand.Next(40);
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
				}
				if (this.type == 503 || this.type == 9)
				{
					this.alpha -= 15;
					int num81 = 150;
					if (base.Center.Y >= this.ai[1])
					{
						num81 = 0;
					}
					if (this.alpha < num81)
					{
						this.alpha = num81;
					}
					ref float ptr = ref this.localAI[0];
					ptr += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f * (float)this.direction;
				}
				else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
				{
					this.alpha -= 15;
					int num82 = 100;
					if (base.Center.Y >= this.ai[1])
					{
						num82 = 0;
					}
					if (this.alpha < num82)
					{
						this.alpha = num82;
					}
					ref float ptr = ref this.localAI[0];
					ptr += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f * (float)this.direction;
				}
				else
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
					}
					this.alpha += (int)(25f * this.localAI[0]);
					if (this.alpha > 200)
					{
						this.alpha = 200;
						this.localAI[0] = -1f;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
						this.localAI[0] = 1f;
					}
				}
				if (this.type == 503)
				{
					this.rotation = this.velocity.ToRotation() - 1.5707964f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f * (float)this.direction;
				}
				if (this.type == 503)
				{
					if (Main.rand.Next(16) == 0)
					{
						Vector2 vector9 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num83 = Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
						Main.dust[num83].velocity = vector9 * 0.66f;
						Main.dust[num83].position = base.Center + vector9 * 12f;
					}
					if (Main.rand.Next(48) == 0)
					{
						int num84 = Gore.NewGore(base.Center, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), 16, 1f);
						Gore gore4 = Main.gore[num84];
						Gore gore8 = gore4;
						gore8.velocity *= 0.66f;
						gore4 = Main.gore[num84];
						gore8 = gore4;
						gore8.velocity += this.velocity * 0.3f;
					}
				}
				if (this.type == 12 || this.type == 955)
				{
					Vector2 vector10;
					vector10..ctor((float)Main.screenWidth, (float)Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector10 / 2f, vector10 + new Vector2(400f))) && Main.rand.Next(6) == 0)
					{
						int num85 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							16,
							17,
							17,
							17
						});
						if (Main.tenthAnniversaryWorld)
						{
							num85 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								16,
								16,
								16,
								17
							});
						}
						Gore.NewGore(this.position, this.velocity * 0.2f, num85, 1f);
					}
					this.light = 0.9f;
					if (Main.rand.Next(20) == 0 || (Main.tenthAnniversaryWorld && Main.rand.Next(15) == 0))
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
						return;
					}
				}
				else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
				{
					if (this.type == 726 || this.type == 725 || this.type == 726)
					{
						Vector2 vector11;
						vector11..ctor((float)Main.screenWidth, (float)Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector11 / 2f, vector11 + new Vector2(400f))) && Main.rand.Next(24) == 0)
						{
							Gore.NewGore(this.position, this.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								16,
								17
							}), 1f);
						}
						if (Main.rand.Next(3) == 0)
						{
							Dust dust24 = Dust.NewDustDirect(this.position, this.width, this.height, 86, 0f, 0f, 127, default(Color), 1f);
							Dust dust25 = dust24;
							Dust dust212 = dust25;
							dust212.velocity *= 0.5f;
							dust24.noGravity = true;
						}
					}
					if (this.type == 723)
					{
						Vector2 vector12;
						vector12..ctor((float)Main.screenWidth, (float)Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector12 / 2f, vector12 + new Vector2(400f))) && Main.rand.Next(6) == 0)
						{
							Gore.NewGore(this.position, this.velocity * 0.2f, 17, 1f);
						}
						for (float num86 = 0f; num86 < 3f; num86 += 1f)
						{
							Vector2 vector13 = base.Center + new Vector2(0f, 12f * this.scale).RotatedBy((double)(this.position.Y / 200f + num86 * 6.2831855f + this.rotation), default(Vector2)) - this.velocity * 0.5f;
							Dust dust26 = Dust.NewDustPerfect(vector13, 267, new Vector2?(this.velocity * 0.2f * num86), 0, Color.Blue, 1f);
							dust26.noLight = true;
							dust26.noGravity = true;
							dust26 = Dust.NewDustPerfect(vector13, 267, new Vector2?(this.velocity * 0.2f * num86), 0, Color.White, 0.4f);
							dust26.noLight = true;
							dust26.noGravity = true;
						}
						return;
					}
				}
				else if (this.type == 9)
				{
					Vector2 vector14;
					vector14..ctor((float)Main.screenWidth, (float)Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector14 / 2f, vector14 + new Vector2(400f))) && Main.rand.Next(20) == 0)
					{
						Gore.NewGore(this.position, this.velocity * 0.2f, Main.rand.Next(16, 18), 1f);
					}
					if (Main.rand.Next(4) == 0)
					{
						Dust dust27 = Dust.NewDustDirect(this.position, this.width, this.height, 86, 0f, 0f, 127, default(Color), 1f);
						Dust dust28 = dust27;
						Dust dust212 = dust28;
						dust212.velocity *= 0.7f;
						dust27.noGravity = true;
						dust28 = dust27;
						dust212 = dust28;
						dust212.velocity += this.velocity * 0.3f;
						if (Main.rand.Next(2) == 0)
						{
							dust28 = dust27;
							dust212 = dust28;
							dust212.position -= this.velocity * 4f;
							return;
						}
					}
				}
				else if (this.ai[1] == 1f || this.type == 92)
				{
					this.light = 0.9f;
					if (Main.rand.Next(10) == 0)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					if (Main.rand.Next(20) == 0)
					{
						Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), Main.rand.Next(16, 18), 1f);
						return;
					}
				}
			}
			else if (this.aiStyle == 6)
			{
				bool flag3 = this.type == 1019;
				this.velocity *= 0.95f;
				ref float ptr = ref this.ai[0];
				ptr += 1f;
				if (this.ai[0] == 180f)
				{
					this.Kill();
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					int num87 = 10 + this.type;
					int num88 = 30;
					if (this.type == 463)
					{
						num87 = 231;
					}
					if (flag3)
					{
						num87 = 0;
						num88 = 40;
					}
					int num1063;
					for (int num89 = 0; num89 < num88; num89 = num1063 + 1)
					{
						Dust dust29 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num87, this.velocity.X, this.velocity.Y, 50, default(Color), 1f)];
						if (flag3)
						{
							dust29.noGravity = (num89 % 3 != 0);
							if (!dust29.noGravity)
							{
								Dust dust30 = dust29;
								Dust dust212 = dust30;
								dust212.scale *= 1.25f;
								dust30 = dust29;
								dust212 = dust30;
								dust212.velocity /= 2f;
								ptr = ref dust29.velocity.Y;
								ptr -= 2.2f;
							}
							else
							{
								Dust dust31 = dust29;
								Dust dust212 = dust31;
								dust212.scale *= 1.75f;
								dust31 = dust29;
								dust212 = dust31;
								dust212.velocity += this.velocity * 0.65f;
							}
						}
						num1063 = num89;
					}
				}
				bool flag4 = Main.myPlayer == this.owner;
				if (flag3)
				{
					flag4 = (Main.netMode != 1);
				}
				if (flag4 && (this.type == 10 || this.type == 11 || this.type == 463 || flag3))
				{
					int num90 = (int)(this.position.X / 16f) - 1;
					int num91 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num92 = (int)(this.position.Y / 16f) - 1;
					int num93 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num90 < 0)
					{
						num90 = 0;
					}
					if (num91 > Main.maxTilesX)
					{
						num91 = Main.maxTilesX;
					}
					if (num92 < 0)
					{
						num92 = 0;
					}
					if (num93 > Main.maxTilesY)
					{
						num93 = Main.maxTilesY;
					}
					Vector2 vector15 = default(Vector2);
					int num1063;
					for (int num94 = num90; num94 < num91; num94 = num1063 + 1)
					{
						for (int num95 = num92; num95 < num93; num95 = num1063 + 1)
						{
							vector15.X = (float)(num94 * 16);
							vector15.Y = (float)(num95 * 16);
							if (this.position.X + (float)this.width > vector15.X && this.position.X < vector15.X + 16f && this.position.Y + (float)this.height > vector15.Y && this.position.Y < vector15.Y + 16f && Main.tile[num94, num95].active())
							{
								if (this.type != 10)
								{
									goto IL_50C8;
								}
								if (TileLoader.Convert(num94, num95, 8))
								{
									if (*Main.tile[num94, num95].type == 23 || *Main.tile[num94, num95].type == 199)
									{
										*Main.tile[num94, num95].type = 2;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type == 25 || *Main.tile[num94, num95].type == 203)
									{
										*Main.tile[num94, num95].type = 1;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type == 112 || *Main.tile[num94, num95].type == 234)
									{
										*Main.tile[num94, num95].type = 53;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type == 163 || *Main.tile[num94, num95].type == 200)
									{
										*Main.tile[num94, num95].type = 161;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type == 400 || *Main.tile[num94, num95].type == 401)
									{
										*Main.tile[num94, num95].type = 396;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type == 398 || *Main.tile[num94, num95].type == 399)
									{
										*Main.tile[num94, num95].type = 397;
										WorldGen.SquareTileFrame(num94, num95, true);
										if (Main.netMode == 1)
										{
											NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										}
									}
									if (*Main.tile[num94, num95].type != 661 && *Main.tile[num94, num95].type != 662)
									{
										goto IL_50C8;
									}
									*Main.tile[num94, num95].type = 60;
									WorldGen.SquareTileFrame(num94, num95, true);
									if (Main.netMode == 1)
									{
										NetMessage.SendTileSquare(-1, num94, num95, TileChangeType.None);
										goto IL_50C8;
									}
									goto IL_50C8;
								}
								IL_510C:
								if (!flag3)
								{
									goto IL_518A;
								}
								Tile tile = Main.tile[num94, num95];
								if (*tile.type >= 0 && *tile.type < TileID.Count && TileID.Sets.CommonSapling[(int)(*tile.type)])
								{
									if (Main.remixWorld && num95 >= (int)Main.worldSurface - 1 && num95 < Main.maxTilesY - 20)
									{
										WorldGen.AttemptToGrowTreeFromSapling(num94, num95, false);
									}
									WorldGen.AttemptToGrowTreeFromSapling(num94, num95, num95 > (int)Main.worldSurface - 1);
									goto IL_518A;
								}
								goto IL_518A;
								IL_50C8:
								if (this.type != 11 && this.type != 463)
								{
									goto IL_510C;
								}
								if (this.type == 11)
								{
									WorldGen.Convert(num94, num95, 1, 1);
								}
								if (this.type == 463)
								{
									WorldGen.Convert(num94, num95, 4, 1);
									goto IL_510C;
								}
								goto IL_510C;
							}
							IL_518A:
							num1063 = num95;
						}
						num1063 = num94;
					}
				}
				if (flag3 && this.velocity.Length() < 0.5f)
				{
					this.Kill();
					return;
				}
			}
			else
			{
				if (this.aiStyle == 7)
				{
					this.AI_007_GrapplingHooks();
					return;
				}
				if (this.aiStyle == 8)
				{
					if (this.type == 258 && this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						SoundEngine.PlaySound(SoundID.Item20, new Vector2?(this.position), null);
					}
					if (this.type == 96 && this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						SoundEngine.PlaySound(SoundID.Item20, new Vector2?(this.position), null);
					}
					if (this.type == 27)
					{
						int num1063;
						for (int num96 = 0; num96 < 5; num96 = num1063 + 1)
						{
							float num97 = this.velocity.X / 3f * (float)num96;
							float num98 = this.velocity.Y / 3f * (float)num96;
							int num99 = 4;
							int num100 = Dust.NewDust(new Vector2(this.position.X + (float)num99, this.position.Y + (float)num99), this.width - num99 * 2, this.height - num99 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num100].noGravity = true;
							Dust dust32 = Main.dust[num100];
							Dust dust212 = dust32;
							dust212.velocity *= 0.1f;
							dust32 = Main.dust[num100];
							dust212 = dust32;
							dust212.velocity += this.velocity * 0.1f;
							ref float ptr = ref Main.dust[num100].position.X;
							ptr -= num97;
							ptr = ref Main.dust[num100].position.Y;
							ptr -= num98;
							num1063 = num96;
						}
						if (Main.rand.Next(5) == 0)
						{
							int num101 = 4;
							int num102 = Dust.NewDust(new Vector2(this.position.X + (float)num101, this.position.Y + (float)num101), this.width - num101 * 2, this.height - num101 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
							Dust dust33 = Main.dust[num102];
							Dust dust212 = dust33;
							dust212.velocity *= 0.25f;
							dust33 = Main.dust[num102];
							dust212 = dust33;
							dust212.velocity += this.velocity * 0.5f;
						}
					}
					else if (this.type == 502)
					{
						float num103 = (float)Main.DiscoR / 255f;
						float num104 = (float)Main.DiscoG / 255f;
						float num105 = (float)Main.DiscoB / 255f;
						num103 = (0.5f + num103) / 2f;
						num104 = (0.5f + num104) / 2f;
						num105 = (0.5f + num105) / 2f;
						Lighting.AddLight(base.Center, num103, num104, num105);
					}
					else if (this.type == 95 || this.type == 96)
					{
						int num106 = Dust.NewDust(new Vector2(this.position.X + this.velocity.X, this.position.Y + this.velocity.Y), this.width, this.height, 75, this.velocity.X, this.velocity.Y, 100, default(Color), 3f * this.scale);
						Main.dust[num106].noGravity = true;
					}
					else if (this.type == 253)
					{
						int num1063;
						for (int num107 = 0; num107 < 2; num107 = num1063 + 1)
						{
							int num108 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num108].noGravity = true;
							ref float ptr = ref Main.dust[num108].velocity.X;
							ptr *= 0.3f;
							ptr = ref Main.dust[num108].velocity.Y;
							ptr *= 0.3f;
							num1063 = num107;
						}
					}
					else
					{
						int num1063;
						for (int num109 = 0; num109 < 2; num109 = num1063 + 1)
						{
							int num110 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
							if (this.type == 258 && Main.getGoodWorld)
							{
								Main.dust[num110].noLight = true;
							}
							Main.dust[num110].noGravity = true;
							ref float ptr = ref Main.dust[num110].velocity.X;
							ptr *= 0.3f;
							ptr = ref Main.dust[num110].velocity.Y;
							ptr *= 0.3f;
							num1063 = num109;
						}
					}
					if (this.type != 27 && this.type != 96 && this.type != 258)
					{
						ref float ptr = ref this.ai[1];
						ptr += 1f;
					}
					if (this.ai[1] >= 20f)
					{
						ref float ptr = ref this.velocity.Y;
						ptr += 0.2f;
					}
					if (this.type == 502)
					{
						this.rotation = this.velocity.ToRotation() + 1.5707964f;
						if (this.velocity.X != 0f)
						{
							this.spriteDirection = (this.direction = Math.Sign(this.velocity.X));
						}
					}
					else
					{
						this.rotation += 0.3f * (float)this.direction;
					}
					if (this.velocity.Y > 16f)
					{
						this.velocity.Y = 16f;
						return;
					}
				}
				else
				{
					if (this.aiStyle == 9)
					{
						this.AI_009_MagicMissiles();
						return;
					}
					if (this.aiStyle == 10)
					{
						this.AI_010();
						return;
					}
					if (this.aiStyle == 11)
					{
						bool flag5 = this.type == 72 || this.type == 86 || this.type == 87;
						if (flag5)
						{
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = -1;
							}
							else if (this.velocity.X < 0f)
							{
								this.spriteDirection = 1;
							}
							this.rotation = this.velocity.X * 0.1f;
							int num1063 = this.frameCounter;
							this.frameCounter = num1063 + 1;
							if (this.frameCounter >= 4)
							{
								num1063 = this.frame;
								this.frame = num1063 + 1;
								this.frameCounter = 0;
							}
							if (this.frame >= 4)
							{
								this.frame = 0;
							}
							if (Main.rand.Next(6) == 0)
							{
								int num111 = 56;
								if (this.type == 86)
								{
									num111 = 73;
								}
								else if (this.type == 87)
								{
									num111 = 74;
								}
								int num112 = Dust.NewDust(this.position, this.width, this.height, num111, 0f, 0f, 200, default(Color), 0.8f);
								Dust dust34 = Main.dust[num112];
								Dust dust212 = dust34;
								dust212.velocity *= 0.3f;
								Main.dust[num112].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
							}
						}
						else
						{
							this.rotation += 0.02f;
						}
						if (this.type == 72)
						{
							if (Main.player[this.owner].blueFairy)
							{
								this.timeLeft = 2;
							}
						}
						else if (this.type == 86)
						{
							if (Main.player[this.owner].redFairy)
							{
								this.timeLeft = 2;
							}
						}
						else if (this.type == 87)
						{
							if (Main.player[this.owner].greenFairy)
							{
								this.timeLeft = 2;
							}
						}
						else if (this.type == 18 && Main.player[this.owner].lightOrb)
						{
							this.timeLeft = 2;
						}
						if (Main.player[this.owner].dead)
						{
							this.Kill();
							return;
						}
						float num113 = 3f;
						if (flag5)
						{
							num113 = 6f;
						}
						Vector2 vector16;
						vector16..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num114 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector16.X;
						float num115 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector16.Y;
						int num116 = 800;
						int num117 = 70;
						if (this.type == 18)
						{
							if (Main.player[this.owner].controlUp)
							{
								num115 = Main.player[this.owner].position.Y - 40f - vector16.Y;
								num114 -= 6f;
								num117 = 4;
							}
							else if (Main.player[this.owner].controlDown)
							{
								num115 = Main.player[this.owner].position.Y + (float)Main.player[this.owner].height + 40f - vector16.Y;
								num114 -= 6f;
								num117 = 4;
							}
						}
						if (flag5)
						{
							num117 = 50;
						}
						float num118 = (float)Math.Sqrt((double)(num114 * num114 + num115 * num115));
						num118 = (float)Math.Sqrt((double)(num114 * num114 + num115 * num115));
						if (num118 > (float)num116)
						{
							this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
							this.position.Y = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - (float)(this.height / 2);
							return;
						}
						if (num118 <= (float)num117)
						{
							this.velocity.X = (this.velocity.Y = 0f);
							return;
						}
						float num119 = num118 - (float)num117;
						num118 = num113 / num118;
						num114 *= num118;
						num115 *= num118;
						this.velocity.X = num114;
						this.velocity.Y = num115;
						if (flag5 && this.velocity.Length() > num119)
						{
							this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num119;
							return;
						}
					}
					else if (this.aiStyle == 12)
					{
						if (this.type == 288 && this.localAI[0] == 0f)
						{
							this.localAI[0] = 1f;
							SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
						}
						float ptr;
						if (this.type == 280 || this.type == 288)
						{
							this.scale -= 0.002f;
							if (this.scale <= 0f)
							{
								this.Kill();
							}
							if (this.type == 288)
							{
								this.ai[0] = 4f;
							}
							if (this.ai[0] > 3f)
							{
								ptr = ref this.velocity.Y;
								ptr += 0.075f;
								int num1063;
								for (int num120 = 0; num120 < 3; num120 = num1063 + 1)
								{
									float num121 = this.velocity.X / 3f * (float)num120;
									float num122 = this.velocity.Y / 3f * (float)num120;
									int num123 = 14;
									int num124 = Dust.NewDust(new Vector2(this.position.X + (float)num123, this.position.Y + (float)num123), this.width - num123 * 2, this.height - num123 * 2, 170, 0f, 0f, 100, default(Color), 1f);
									Main.dust[num124].noGravity = true;
									Dust dust35 = Main.dust[num124];
									Dust dust212 = dust35;
									dust212.velocity *= 0.1f;
									dust35 = Main.dust[num124];
									dust212 = dust35;
									dust212.velocity += this.velocity * 0.5f;
									ptr = ref Main.dust[num124].position.X;
									ptr -= num121;
									ptr = ref Main.dust[num124].position.Y;
									ptr -= num122;
									num1063 = num120;
								}
								if (Main.rand.Next(8) == 0)
								{
									int num125 = 16;
									int num126 = Dust.NewDust(new Vector2(this.position.X + (float)num125, this.position.Y + (float)num125), this.width - num125 * 2, this.height - num125 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
									Dust dust36 = Main.dust[num126];
									Dust dust212 = dust36;
									dust212.velocity *= 0.25f;
									dust36 = Main.dust[num126];
									dust212 = dust36;
									dust212.velocity += this.velocity * 0.5f;
									return;
								}
							}
							else
							{
								ptr = ref this.ai[0];
								ptr += 1f;
							}
							return;
						}
						float num127 = 0.02f;
						float num128 = 0.2f;
						if (this.type == 22)
						{
							num127 = 0.01f;
							num128 = 0.15f;
						}
						this.scale -= num127;
						if (this.scale <= 0f)
						{
							this.Kill();
						}
						if (this.ai[0] > 3f)
						{
							ptr = ref this.velocity.Y;
							ptr += num128;
							int num1063;
							for (int num129 = 0; num129 < 1; num129 = num1063 + 1)
							{
								for (int num130 = 0; num130 < 3; num130 = num1063 + 1)
								{
									float num131 = this.velocity.X / 3f * (float)num130;
									float num132 = this.velocity.Y / 3f * (float)num130;
									int num133 = 6;
									int num134 = Dust.NewDust(new Vector2(this.position.X + (float)num133, this.position.Y + (float)num133), this.width - num133 * 2, this.height - num133 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
									Main.dust[num134].noGravity = true;
									Dust dust37 = Main.dust[num134];
									Dust dust212 = dust37;
									dust212.velocity *= 0.3f;
									dust37 = Main.dust[num134];
									dust212 = dust37;
									dust212.velocity += this.velocity * 0.5f;
									ptr = ref Main.dust[num134].position.X;
									ptr -= num131;
									ptr = ref Main.dust[num134].position.Y;
									ptr -= num132;
									num1063 = num130;
								}
								if (Main.rand.Next(8) == 0)
								{
									int num135 = 6;
									int num136 = Dust.NewDust(new Vector2(this.position.X + (float)num135, this.position.Y + (float)num135), this.width - num135 * 2, this.height - num135 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
									Dust dust38 = Main.dust[num136];
									Dust dust212 = dust38;
									dust212.velocity *= 0.5f;
									dust38 = Main.dust[num136];
									dust212 = dust38;
									dust212.velocity += this.velocity * 0.5f;
								}
								num1063 = num129;
							}
							return;
						}
						ptr = ref this.ai[0];
						ptr += 1f;
						return;
					}
					else if (this.aiStyle == 13)
					{
						bool flag6 = Main.player[this.owner].dead;
						if (!flag6)
						{
							float num137 = (Main.player[this.owner].Center - base.Center).Length();
							flag6 = (num137 > 2000f);
						}
						if (flag6)
						{
							this.Kill();
							return;
						}
						if (this.type != 481)
						{
							int dummyItemTime = 5;
							Main.player[this.owner].SetDummyItemTime(dummyItemTime);
						}
						if (this.alpha == 0)
						{
							if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
							{
								Main.player[this.owner].ChangeDir(1);
							}
							else
							{
								Main.player[this.owner].ChangeDir(-1);
							}
						}
						if (this.type == 481)
						{
							if (this.ai[0] == 0f)
							{
								this.extraUpdates = 1;
							}
							else
							{
								this.extraUpdates = 2;
							}
						}
						Vector2 vector17;
						vector17..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num138 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector17.X;
						float num139 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector17.Y;
						float num140 = (float)Math.Sqrt((double)(num138 * num138 + num139 * num139));
						if (this.ai[0] == 0f)
						{
							if (num140 > 700f)
							{
								this.ai[0] = 1f;
							}
							else if (this.type == 262 && num140 > 500f)
							{
								this.ai[0] = 1f;
							}
							else if (this.type == 271 && num140 > 200f)
							{
								this.ai[0] = 1f;
							}
							else if (this.type == 273 && (Main.remixWorld ? (num140 > 300f) : (num140 > 150f)))
							{
								this.ai[0] = 1f;
							}
							else if (this.type == 481 && num140 > 525f)
							{
								this.ai[0] = 1f;
							}
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
							ref float ptr = ref this.ai[1];
							ptr += 1f;
							if (this.ai[1] > 5f)
							{
								this.alpha = 0;
							}
							if (this.type == 262 && this.ai[1] > 8f)
							{
								this.ai[1] = 8f;
							}
							if (this.type == 271 && this.ai[1] > 8f)
							{
								this.ai[1] = 8f;
							}
							if (this.type == 273 && this.ai[1] > 8f)
							{
								this.ai[1] = 8f;
							}
							if (this.type == 481 && this.ai[1] > 8f)
							{
								this.ai[1] = 8f;
							}
							if (this.type == 404 && this.ai[1] > 8f)
							{
								this.ai[1] = 0f;
							}
							if (this.ai[1] >= 10f)
							{
								this.ai[1] = 15f;
								ptr = ref this.velocity.Y;
								ptr += 0.3f;
							}
							if (this.type == 262 && this.velocity.X < 0f)
							{
								this.spriteDirection = -1;
							}
							else if (this.type == 262)
							{
								this.spriteDirection = 1;
							}
							if (this.type == 271 && this.velocity.X < 0f)
							{
								this.spriteDirection = -1;
								return;
							}
							if (this.type == 271)
							{
								this.spriteDirection = 1;
								return;
							}
						}
						else if (this.ai[0] == 1f)
						{
							this.tileCollide = false;
							this.rotation = (float)Math.Atan2((double)num139, (double)num138) - 1.57f;
							float num141 = 20f;
							if (this.type == 262)
							{
								num141 = 30f;
							}
							if (num140 < 50f)
							{
								this.Kill();
							}
							num140 = num141 / num140;
							num138 *= num140;
							num139 *= num140;
							this.velocity.X = num138;
							this.velocity.Y = num139;
							if (this.type == 262 && this.velocity.X < 0f)
							{
								this.spriteDirection = 1;
							}
							else if (this.type == 262)
							{
								this.spriteDirection = -1;
							}
							if (this.type == 271 && this.velocity.X < 0f)
							{
								this.spriteDirection = 1;
								return;
							}
							if (this.type == 271)
							{
								this.spriteDirection = -1;
								return;
							}
						}
					}
					else if (this.aiStyle == 14)
					{
						if (this.type == 870 && this.ai[1] > 0f)
						{
							this.aiStyle = 170;
						}
						if (this.type == 473 && Main.netMode != 2)
						{
							ref float ptr = ref this.localAI[0];
							ptr += 1f;
							if (this.localAI[0] >= 10f)
							{
								this.localAI[0] = 0f;
								int num142 = 30;
								if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num142 * 16))
								{
									Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
								}
							}
						}
						if (this.type == 352)
						{
							if (this.localAI[1] == 0f)
							{
								this.localAI[1] = 1f;
							}
							this.alpha += (int)(25f * this.localAI[1]);
							if (this.alpha <= 0)
							{
								this.alpha = 0;
								this.localAI[1] = 1f;
							}
							else if (this.alpha >= 255)
							{
								this.alpha = 255;
								this.localAI[1] = -1f;
							}
							this.scale += this.localAI[1] * 0.01f;
						}
						if (this.type == 346)
						{
							if (this.localAI[0] == 0f)
							{
								this.localAI[0] = 1f;
								SoundEngine.PlaySound(SoundID.Item1, new Vector2?(this.position), null);
							}
							this.frame = (int)this.ai[1];
							if (this.frame == 0)
							{
								Lighting.AddLight(base.Center, 0.25f, 0.2f, 0f);
							}
							else
							{
								Lighting.AddLight(base.Center, 0.15f, 0.15f, 0.15f);
							}
							if (this.owner == Main.myPlayer && this.timeLeft == 1)
							{
								int num1063;
								for (int num143 = 0; num143 < 5; num143 = num1063 + 1)
								{
									float num144 = 10f;
									Vector2 vector18;
									vector18..ctor(base.Center.X, base.Center.Y);
									float num145 = (float)Main.rand.Next(-20, 21);
									float num146 = (float)Main.rand.Next(-20, 0);
									float num147 = (float)Math.Sqrt((double)(num145 * num145 + num146 * num146));
									num147 = num144 / num147;
									num145 *= num147;
									num146 *= num147;
									num145 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
									num146 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
									int num148 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector18.X, vector18.Y, num145, num146, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1], 0f);
									num1063 = num143;
								}
							}
						}
						if (this.type == 196)
						{
							int num149 = Main.rand.Next(1, 3);
							int num1063;
							for (int num150 = 0; num150 < num149; num150 = num1063 + 1)
							{
								int num151 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
								Dust dust39 = Main.dust[num151];
								Dust dust212 = dust39;
								dust212.alpha += Main.rand.Next(100);
								dust39 = Main.dust[num151];
								dust212 = dust39;
								dust212.velocity *= 0.3f;
								ref float ptr = ref Main.dust[num151].velocity.X;
								ptr += (float)Main.rand.Next(-10, 11) * 0.025f;
								ptr = ref Main.dust[num151].velocity.Y;
								ptr -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
								Main.dust[num151].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
								num1063 = num150;
							}
						}
						if (this.type == 53)
						{
							try
							{
								int num152 = (int)(this.position.X / 16f) - 1;
								int num153 = (int)((this.position.X + (float)this.width) / 16f) + 2;
								int num154 = (int)(this.position.Y / 16f) - 1;
								int num155 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
								if (num152 < 0)
								{
									num152 = 0;
								}
								if (num153 > Main.maxTilesX)
								{
									num153 = Main.maxTilesX;
								}
								if (num154 < 0)
								{
									num154 = 0;
								}
								if (num155 > Main.maxTilesY)
								{
									num155 = Main.maxTilesY;
								}
								Vector2 vector19 = default(Vector2);
								int num1063;
								for (int num156 = num152; num156 < num153; num156 = num1063 + 1)
								{
									for (int num157 = num154; num157 < num155; num157 = num1063 + 1)
									{
										if (Main.tile[num156, num157] != null && Main.tile[num156, num157].nactive() && Main.tileSolid[(int)(*Main.tile[num156, num157].type)] && !Main.tileSolidTop[(int)(*Main.tile[num156, num157].type)])
										{
											vector19.X = (float)(num156 * 16);
											vector19.Y = (float)(num157 * 16);
											if (this.position.X + (float)this.width > vector19.X && this.position.X < vector19.X + 16f && this.position.Y + (float)this.height > vector19.Y && this.position.Y < vector19.Y + 16f)
											{
												this.velocity.X = 0f;
												this.velocity.Y = -0.2f;
											}
										}
										num1063 = num157;
									}
									num1063 = num156;
								}
							}
							catch
							{
							}
						}
						if (this.type == 277)
						{
							if (this.alpha > 0)
							{
								this.alpha -= 30;
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
							}
							if (Main.expertMode)
							{
								float num158 = 12f;
								int num159 = (int)Player.FindClosest(base.Center, 1, 1);
								Vector2 vector20 = Main.player[num159].Center - base.Center;
								vector20.Normalize();
								vector20 *= num158;
								int num160 = 200;
								this.velocity.X = (this.velocity.X * (float)(num160 - 1) + vector20.X) / (float)num160;
								if (this.velocity.Length() > 16f)
								{
									this.velocity.Normalize();
									this.velocity *= 16f;
								}
							}
						}
						if (this.type == 261)
						{
							if (this.localAI[1] == 0f)
							{
								this.localAI[1] = 1f;
								this.localAI[0] = 80f;
							}
							this.rotation += this.velocity.X * 0.05f;
							if (this.velocity.Y != 0f)
							{
								this.rotation += (float)this.spriteDirection * 0.01f;
							}
							ref float ptr = ref this.ai[0];
							ref float ptr3 = ref ptr;
							float num1064 = ptr;
							ptr3 = num1064 + 1f;
							if (this.ai[0] > 15f)
							{
								if (this.velocity.Y == 0f && this.velocity.X != 0f)
								{
									ptr = ref this.velocity.X;
									ptr *= 0.97f;
									Math.Abs(this.velocity.X);
									if (Math.Abs(this.velocity.X) <= 0.01f)
									{
										this.Kill();
									}
								}
								this.ai[0] = 15f;
								ptr = ref this.velocity.Y;
								ptr += 0.2f;
							}
							if (this.localAI[0] > 0f)
							{
								ptr = ref this.localAI[0];
								ref float ptr4 = ref ptr;
								num1064 = ptr;
								ptr4 = num1064 - 1f;
								int num161 = 5;
								int maxValue = num161;
								if (this.localAI[0] < 20f)
								{
									maxValue = num161 + num161;
								}
								if (this.localAI[0] < 10f)
								{
									maxValue = num161 + num161 + num161;
								}
								if (Main.rand.Next(maxValue) == 0)
								{
									Vector2 position2 = base.Center + Main.rand.NextVector2Circular((float)(this.width / 2), (float)(this.height / 2));
									int num1066 = 31;
									Vector2? velocity = null;
									Dust dust40 = Dust.NewDustPerfect(position2, num1066, velocity, 0, default(Color), 1f);
									Dust dust41 = dust40;
									Dust dust212 = dust41;
									dust212.velocity *= 0.33f;
									dust40.scale = 0.7f;
								}
								if (Main.rand.Next(maxValue) == 0)
								{
									Dust dust42 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular((float)(this.width / 2), (float)(this.height / 2)), 228, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 0, default(Color), 1f);
									dust42.scale = 0.6f;
									Dust dust43 = dust42;
									Dust dust212 = dust43;
									dust212.velocity *= 0.33f;
								}
							}
						}
						else if (this.type == 277)
						{
							ref float ptr = ref this.ai[0];
							ptr += 1f;
							if (this.ai[0] > 15f)
							{
								this.ai[0] = 15f;
								if (this.velocity.Y == 0f && this.velocity.X != 0f)
								{
									ptr = ref this.velocity.X;
									ptr *= 0.97f;
									if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
									{
										this.Kill();
									}
								}
								ptr = ref this.velocity.Y;
								ptr += 0.2f;
							}
							this.rotation += this.velocity.X * 0.05f;
						}
						else if (this.type == 378)
						{
							float ptr;
							if (this.localAI[0] == 0f)
							{
								SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
								ptr = ref this.localAI[0];
								ptr += 1f;
							}
							Rectangle rectangle2;
							rectangle2..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
							int num1063;
							for (int num162 = 0; num162 < 200; num162 = num1063 + 1)
							{
								if (Main.npc[num162].CanBeChasedBy(this, true))
								{
									Rectangle value2;
									value2..ctor((int)Main.npc[num162].position.X, (int)Main.npc[num162].position.Y, Main.npc[num162].width, Main.npc[num162].height);
									if (rectangle2.Intersects(value2))
									{
										this.Kill();
										return;
									}
								}
								num1063 = num162;
							}
							ptr = ref this.ai[0];
							ptr += 1f;
							if (this.ai[0] > 10f)
							{
								this.ai[0] = 90f;
								if (this.velocity.Y == 0f && this.velocity.X != 0f)
								{
									ptr = ref this.velocity.X;
									ptr *= 0.96f;
									if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
									{
										this.Kill();
									}
								}
								ptr = ref this.velocity.Y;
								ptr += 0.2f;
							}
							this.rotation += this.velocity.X * 0.1f;
						}
						else if (this.type == 483)
						{
							ref float ptr = ref this.ai[0];
							ptr += 1f;
							if (this.ai[0] > 5f)
							{
								if (this.owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
								{
									this.Kill();
								}
								if (this.velocity.Y == 0f && this.velocity.X != 0f)
								{
									ptr = ref this.velocity.X;
									ptr *= 0.97f;
									if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
									{
										this.velocity.X = 0f;
										this.netUpdate = true;
									}
								}
								ptr = ref this.velocity.Y;
								ptr += 0.3f;
								ptr = ref this.velocity.X;
								ptr *= 0.99f;
							}
							this.rotation += this.velocity.X * 0.05f;
						}
						else if (this.type == 538)
						{
							ref float ptr = ref this.ai[0];
							ptr += 1f;
							if (this.ai[0] > 60f || this.velocity.Y >= 0f)
							{
								this.alpha += 6;
								this.velocity *= 0.5f;
							}
							else if (this.ai[0] > 5f)
							{
								ptr = ref this.velocity.Y;
								ptr += 0.1f;
								ptr = ref this.velocity.X;
								ptr *= 1.025f;
								this.alpha -= 23;
								this.scale = 0.8f * (255f - (float)this.alpha) / 255f;
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
							}
							if (this.alpha >= 255 && this.ai[0] > 5f)
							{
								this.Kill();
								return;
							}
						}
						else
						{
							ref float ptr = ref this.ai[0];
							ptr += 1f;
							if (this.ai[0] > 5f)
							{
								this.ai[0] = 5f;
								if (this.velocity.Y == 0f && this.velocity.X != 0f)
								{
									ptr = ref this.velocity.X;
									ptr *= 0.97f;
									if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
									{
										this.velocity.X = 0f;
										this.netUpdate = true;
									}
								}
								ptr = ref this.velocity.Y;
								ptr += 0.2f;
							}
							this.rotation += this.velocity.X * 0.1f;
						}
						if (this.type == 538)
						{
							if (this.localAI[1] == 0f)
							{
								this.localAI[1] = 1f;
								SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 7, 1f, 0f);
							}
							if (this.velocity.Y < 0f && this.ai[0] < 60f)
							{
								if (Main.rand.Next(4) == 0)
								{
									int num163 = Dust.NewDust(this.position, this.width, this.height, 180, 0f, 0f, 100, default(Color), 1f);
									Main.dust[num163].position = base.Center;
									Dust dust44 = Main.dust[num163];
									Dust dust212 = dust44;
									dust212.scale += (float)Main.rand.Next(50) * 0.01f;
									Main.dust[num163].noGravity = true;
									ref float ptr = ref Main.dust[num163].velocity.Y;
									ptr -= 2f;
								}
								if (Main.rand.Next(6) == 0)
								{
									int num164 = Dust.NewDust(this.position, this.width, this.height, 176, 0f, 0f, 100, default(Color), 1f);
									Main.dust[num164].position = base.Center;
									Dust dust45 = Main.dust[num164];
									Dust dust212 = dust45;
									dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
									Main.dust[num164].noGravity = true;
									dust45 = Main.dust[num164];
									dust212 = dust45;
									dust212.velocity *= 0.1f;
								}
							}
						}
						if (this.type == 450)
						{
							if (this.ai[1] == 0f)
							{
								this.ai[1] = 1f;
								SoundEngine.PlaySound(SoundID.Item13, new Vector2?(this.position), null);
							}
							if (Main.rand.Next(2) == 0)
							{
								int num165 = Dust.NewDust(this.position, this.width, this.height, 228, 0f, 0f, 100, default(Color), 1f);
								ref float ptr = ref Main.dust[num165].position.X;
								ptr -= 2f;
								ptr = ref Main.dust[num165].position.Y;
								ptr += 2f;
								Dust dust46 = Main.dust[num165];
								Dust dust212 = dust46;
								dust212.scale += (float)Main.rand.Next(50) * 0.01f;
								Main.dust[num165].noGravity = true;
								ptr = ref Main.dust[num165].velocity.Y;
								ptr -= 2f;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num166 = Dust.NewDust(this.position, this.width, this.height, 228, 0f, 0f, 100, default(Color), 1f);
								ref float ptr = ref Main.dust[num166].position.X;
								ptr -= 2f;
								ptr = ref Main.dust[num166].position.Y;
								ptr += 2f;
								Dust dust47 = Main.dust[num166];
								Dust dust212 = dust47;
								dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
								Main.dust[num166].noGravity = true;
								dust47 = Main.dust[num166];
								dust212 = dust47;
								dust212.velocity *= 0.1f;
							}
							int num1063 = this.frameCounter + 1;
							this.frameCounter = num1063;
							if (num1063 >= 3)
							{
								this.frameCounter = 0;
								num1063 = this.frame + 1;
								this.frame = num1063;
								if (num1063 >= 5)
								{
									this.frame = 0;
								}
							}
							if ((double)this.velocity.Y < 0.25 && (double)this.velocity.Y > 0.15)
							{
								ref float ptr = ref this.velocity.X;
								ptr *= 0.8f;
							}
							this.rotation = (0f - this.velocity.X) * 0.05f;
						}
						if (this.type == 480)
						{
							this.alpha = 255;
							int num167 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
							ref float ptr = ref Main.dust[num167].position.X;
							ptr -= 2f;
							ptr = ref Main.dust[num167].position.Y;
							ptr += 2f;
							Dust dust48 = Main.dust[num167];
							Dust dust212 = dust48;
							dust212.scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num167].noGravity = true;
							ptr = ref Main.dust[num167].velocity.Y;
							ptr -= 2f;
							if (Main.rand.Next(2) == 0)
							{
								int num168 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
								ptr = ref Main.dust[num168].position.X;
								ptr -= 2f;
								ptr = ref Main.dust[num168].position.Y;
								ptr += 2f;
								dust48 = Main.dust[num168];
								dust212 = dust48;
								dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
								Main.dust[num168].noGravity = true;
								dust48 = Main.dust[num168];
								dust212 = dust48;
								dust212.velocity *= 0.1f;
							}
						}
						if (this.type >= 326 && this.type <= 328)
						{
							if (this.wet)
							{
								this.Kill();
							}
							if (this.ai[1] == 0f && this.type >= 326 && this.type <= 328)
							{
								this.ai[1] = 1f;
								SoundEngine.PlaySound(SoundID.Item13, new Vector2?(this.position), null);
							}
							if (Main.rand.Next(3) != 0)
							{
								Dust dust49 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
								ref float ptr = ref dust49.velocity.Y;
								ptr -= 2f;
								dust49.noGravity = true;
								Dust dust50 = dust49;
								Dust dust212 = dust50;
								dust212.scale += Main.rand.NextFloat() * 0.8f + 0.3f;
								dust50 = dust49;
								dust212 = dust50;
								dust212.velocity += this.velocity * 1f;
							}
							if ((double)this.velocity.Y < 0.25 && (double)this.velocity.Y > 0.15)
							{
								ref float ptr = ref this.velocity.X;
								ptr *= 0.8f;
							}
							this.rotation = (0f - this.velocity.X) * 0.05f;
						}
						if (this.type >= 400 && this.type <= 402)
						{
							if (this.wet)
							{
								this.Kill();
							}
							if (this.ai[1] == 0f && this.type >= 326 && this.type <= 328)
							{
								this.ai[1] = 1f;
								SoundEngine.PlaySound(SoundID.Item13, new Vector2?(this.position), null);
							}
							int num169 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
							ref float ptr = ref Main.dust[num169].position.X;
							ptr -= 2f;
							ptr = ref Main.dust[num169].position.Y;
							ptr += 2f;
							Dust dust51 = Main.dust[num169];
							Dust dust212 = dust51;
							dust212.scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num169].noGravity = true;
							ptr = ref Main.dust[num169].velocity.Y;
							ptr -= 2f;
							if (Main.rand.Next(2) == 0)
							{
								int num170 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
								ptr = ref Main.dust[num170].position.X;
								ptr -= 2f;
								ptr = ref Main.dust[num170].position.Y;
								ptr += 2f;
								dust51 = Main.dust[num170];
								dust212 = dust51;
								dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
								Main.dust[num170].noGravity = true;
								dust51 = Main.dust[num170];
								dust212 = dust51;
								dust212.velocity *= 0.1f;
							}
							if ((double)this.velocity.Y < 0.25 && (double)this.velocity.Y > 0.15)
							{
								ptr = ref this.velocity.X;
								ptr *= 0.8f;
							}
							this.rotation = (0f - this.velocity.X) * 0.05f;
						}
						if (this.velocity.Y > 16f)
						{
							this.velocity.Y = 16f;
							return;
						}
					}
					else
					{
						if (this.aiStyle == 15)
						{
							this.AI_015_Flails();
							return;
						}
						if (this.aiStyle == 16)
						{
							this.AI_016();
							return;
						}
						if (this.aiStyle == 17)
						{
							float ptr;
							if (this.velocity.Y == 0f)
							{
								ptr = ref this.velocity.X;
								ptr *= 0.98f;
							}
							this.rotation += this.velocity.X * 0.1f;
							ptr = ref this.velocity.Y;
							ptr += 0.2f;
							if (Main.getGoodWorld && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 1f)
							{
								this.damage = 0;
								this.knockBack = 0f;
							}
							if (this.owner != Main.myPlayer)
							{
								return;
							}
							int num171 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
							int num172 = (int)((this.position.Y + (float)this.height - 4f) / 16f);
							if (Main.tile[num171, num172] == null)
							{
								return;
							}
							int style = 0;
							if (this.type >= 201 && this.type <= 205)
							{
								style = this.type - 200;
							}
							if (this.type >= 527 && this.type <= 531)
							{
								style = this.type - 527 + 6;
							}
							bool flag7 = false;
							TileObject objectData = default(TileObject);
							int x9 = num171;
							int y8 = num172;
							int num1067 = 85;
							int style2 = style;
							int direction = this.direction;
							bool onlyCheck = false;
							int? num1068 = null;
							if (TileObject.CanPlace(x9, y8, num1067, style2, direction, out objectData, onlyCheck, num1068, false))
							{
								flag7 = TileObject.Place(objectData);
							}
							if (flag7)
							{
								NetMessage.SendObjectPlacement(-1, num171, num172, objectData.type, objectData.style, objectData.alternate, objectData.random, this.direction);
								SoundEngine.PlaySound(0, num171 * 16, num172 * 16, 1, 1f, 0f);
								int num173 = Sign.ReadSign(num171, num172, true);
								if (num173 >= 0)
								{
									Sign.TextSign(num173, this.miscText);
									NetMessage.SendData(47, -1, -1, null, num173, 0f, (float)new BitsByte(true, false, false, false, false, false, false, false), 0f, 0, 0, 0);
								}
								this.Kill();
								return;
							}
						}
						else if (this.aiStyle == 18)
						{
							if (this.ai[1] == 0f && this.type == 44)
							{
								this.ai[1] = 1f;
								SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
							}
							if (this.type != 263 && this.type != 274)
							{
								this.rotation += (float)this.direction * 0.8f;
								ref float ptr = ref this.ai[0];
								ptr += 1f;
								if (this.ai[0] >= 30f)
								{
									if (this.ai[0] < 100f)
									{
										this.velocity *= 1.06f;
									}
									else
									{
										this.ai[0] = 200f;
									}
								}
								int num1063;
								for (int num174 = 0; num174 < 2; num174 = num1063 + 1)
								{
									int num175 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), 1f);
									Main.dust[num175].noGravity = true;
									num1063 = num174;
								}
								return;
							}
							if (this.type == 274 && this.velocity.X < 0f)
							{
								this.spriteDirection = -1;
							}
							this.rotation += (float)this.direction * 0.05f;
							this.rotation += (float)this.direction * 0.5f * ((float)this.timeLeft / 180f);
							if (this.type == 274)
							{
								this.velocity *= 0.96f;
								return;
							}
							this.velocity *= 0.95f;
							return;
						}
						else
						{
							if (this.aiStyle == 19)
							{
								this.AI_019_Spears();
								return;
							}
							if (this.aiStyle == 20)
							{
								this.timeLeft = 60;
								if (this.type == 252)
								{
									int num1063 = this.frameCounter;
									this.frameCounter = num1063 + 1;
									if (this.frameCounter >= 4)
									{
										this.frameCounter = 0;
										num1063 = this.frame;
										this.frame = num1063 + 1;
									}
									if (this.frame > 3)
									{
										this.frame = 0;
									}
								}
								if (this.type == 509)
								{
									int num1063 = this.frameCounter;
									this.frameCounter = num1063 + 1;
									if (this.frameCounter >= 2)
									{
										this.frameCounter = 0;
										num1063 = this.frame;
										this.frame = num1063 + 1;
									}
									if (this.frame > 1)
									{
										this.frame = 0;
									}
								}
								if (this.soundDelay <= 0)
								{
									SoundEngine.PlaySound(SoundID.Item22, new Vector2?(this.position), null);
									this.soundDelay = 30;
								}
								Vector2 vector21 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, false, true);
								if (Main.myPlayer == this.owner)
								{
									if (Main.player[this.owner].channel)
									{
										float num176 = Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shootSpeed * this.scale;
										Vector2 vector22 = vector21;
										float num177 = (float)Main.mouseX + Main.screenPosition.X - vector22.X;
										float num178 = (float)Main.mouseY + Main.screenPosition.Y - vector22.Y;
										if (Main.player[this.owner].gravDir == -1f)
										{
											num178 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector22.Y;
										}
										float num179 = (float)Math.Sqrt((double)(num177 * num177 + num178 * num178));
										num179 = (float)Math.Sqrt((double)(num177 * num177 + num178 * num178));
										num179 = num176 / num179;
										num177 *= num179;
										num178 *= num179;
										if (num177 != this.velocity.X || num178 != this.velocity.Y)
										{
											this.netUpdate = true;
										}
										this.velocity.X = num177;
										this.velocity.Y = num178;
									}
									else
									{
										this.Kill();
									}
								}
								if (this.velocity.X > 0f)
								{
									Main.player[this.owner].ChangeDir(1);
								}
								else if (this.velocity.X < 0f)
								{
									Main.player[this.owner].ChangeDir(-1);
								}
								this.spriteDirection = this.direction;
								Main.player[this.owner].ChangeDir(this.direction);
								Main.player[this.owner].heldProj = this.whoAmI;
								Main.player[this.owner].SetDummyItemTime(2);
								this.position.X = vector21.X - (float)(this.width / 2);
								this.position.Y = vector21.Y - (float)(this.height / 2);
								this.rotation = (float)(Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.5700000524520874);
								if (Main.player[this.owner].direction == 1)
								{
									Main.player[this.owner].itemRotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
								}
								else
								{
									Main.player[this.owner].itemRotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
								}
								ref float ptr = ref this.velocity.X;
								ptr *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
								if (Main.rand.Next(6) == 0)
								{
									int num180 = Dust.NewDust(this.position + this.velocity * (float)Main.rand.Next(6, 10) * 0.1f, this.width, this.height, 31, 0f, 0f, 80, default(Color), 1.4f);
									ptr = ref Main.dust[num180].position.X;
									ptr -= 4f;
									Main.dust[num180].noGravity = true;
									Dust dust52 = Main.dust[num180];
									Dust dust212 = dust52;
									dust212.velocity *= 0.2f;
									Main.dust[num180].velocity.Y = (float)(-(float)Main.rand.Next(7, 13)) * 0.15f;
									return;
								}
							}
							else if (this.aiStyle == 21)
							{
								this.rotation = this.velocity.X * 0.1f;
								this.spriteDirection = -this.direction;
								if (Main.rand.Next(3) == 0)
								{
									int num181 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 80, default(Color), 1f);
									Main.dust[num181].noGravity = true;
									Dust dust53 = Main.dust[num181];
									Dust dust212 = dust53;
									dust212.velocity *= 0.2f;
								}
								if (this.ai[1] == 1f)
								{
									this.ai[1] = 0f;
									Main.musicPitch = this.ai[0];
									SoundEngine.PlaySound(SoundID.Item26, new Vector2?(this.position), null);
									return;
								}
							}
							else if (this.aiStyle == 22)
							{
								if (this.velocity.X == 0f && this.velocity.Y == 0f)
								{
									this.alpha = 255;
								}
								Dust dust212;
								int num1063;
								Dust dust54;
								if (this.ai[1] < 0f)
								{
									if (this.timeLeft > 60)
									{
										this.timeLeft = 60;
									}
									if (this.velocity.X > 0f)
									{
										this.rotation += 0.3f;
									}
									else
									{
										this.rotation -= 0.3f;
									}
									int num182 = (int)(this.position.X / 16f) - 1;
									int num183 = (int)((this.position.X + (float)this.width) / 16f) + 2;
									int num184 = (int)(this.position.Y / 16f) - 1;
									int num185 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
									if (num182 < 0)
									{
										num182 = 0;
									}
									if (num183 > Main.maxTilesX)
									{
										num183 = Main.maxTilesX;
									}
									if (num184 < 0)
									{
										num184 = 0;
									}
									if (num185 > Main.maxTilesY)
									{
										num185 = Main.maxTilesY;
									}
									int num186 = (int)this.position.X + 4;
									int num187 = (int)this.position.Y + 4;
									Vector2 vector23 = default(Vector2);
									for (int num188 = num182; num188 < num183; num188 = num1063 + 1)
									{
										for (int num189 = num184; num189 < num185; num189 = num1063 + 1)
										{
											if (Main.tile[num188, num189] != null && Main.tile[num188, num189].active() && *Main.tile[num188, num189].type != 127 && Main.tileSolid[(int)(*Main.tile[num188, num189].type)] && !Main.tileSolidTop[(int)(*Main.tile[num188, num189].type)])
											{
												vector23.X = (float)(num188 * 16);
												vector23.Y = (float)(num189 * 16);
												if ((float)(num186 + 8) > vector23.X && (float)num186 < vector23.X + 16f && (float)(num187 + 8) > vector23.Y && (float)num187 < vector23.Y + 16f)
												{
													this.Kill();
												}
											}
											num1063 = num189;
										}
										num1063 = num188;
									}
									int num190 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
									Main.dust[num190].noGravity = true;
									dust54 = Main.dust[num190];
									dust212 = dust54;
									dust212.velocity *= 0.3f;
									return;
								}
								if (this.ai[0] < 0f)
								{
									if (this.ai[0] == -1f)
									{
										for (int num191 = 0; num191 < 10; num191 = num1063 + 1)
										{
											int num192 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1.1f);
											Main.dust[num192].noGravity = true;
											dust54 = Main.dust[num192];
											dust212 = dust54;
											dust212.velocity *= 1.3f;
											num1063 = num191;
										}
									}
									else if (Main.rand.Next(30) == 0)
									{
										int num193 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 100, default(Color), 1f);
										dust54 = Main.dust[num193];
										dust212 = dust54;
										dust212.velocity *= 0.2f;
									}
									int num194 = (int)this.position.X / 16;
									int num195 = (int)this.position.Y / 16;
									if (Main.tile[num194, num195] == null || !Main.tile[num194, num195].active())
									{
										this.Kill();
									}
									ref float ptr = ref this.ai[0];
									ptr -= 1f;
									if (this.ai[0] <= -900f && (Main.myPlayer == this.owner || Main.netMode == 2) && Main.tile[num194, num195].active() && *Main.tile[num194, num195].type == 127)
									{
										WorldGen.KillTile(num194, num195, false, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, null, 0, (float)num194, (float)num195, 0f, 0, 0, 0);
										}
										this.Kill();
									}
									return;
								}
								int num196 = (int)(this.position.X / 16f) - 1;
								int num197 = (int)((this.position.X + (float)this.width) / 16f) + 2;
								int num198 = (int)(this.position.Y / 16f) - 1;
								int num199 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
								if (num196 < 0)
								{
									num196 = 0;
								}
								if (num197 > Main.maxTilesX)
								{
									num197 = Main.maxTilesX;
								}
								if (num198 < 0)
								{
									num198 = 0;
								}
								if (num199 > Main.maxTilesY)
								{
									num199 = Main.maxTilesY;
								}
								int num200 = (int)this.position.X + 4;
								int num201 = (int)this.position.Y + 4;
								Vector2 vector24 = default(Vector2);
								for (int num202 = num196; num202 < num197; num202 = num1063 + 1)
								{
									for (int num203 = num198; num203 < num199; num203 = num1063 + 1)
									{
										if (Main.tile[num202, num203] != null && Main.tile[num202, num203].nactive() && *Main.tile[num202, num203].type != 127 && Main.tileSolid[(int)(*Main.tile[num202, num203].type)] && !Main.tileSolidTop[(int)(*Main.tile[num202, num203].type)])
										{
											vector24.X = (float)(num202 * 16);
											vector24.Y = (float)(num203 * 16);
											if ((float)(num200 + 8) > vector24.X && (float)num200 < vector24.X + 16f && (float)(num201 + 8) > vector24.Y && (float)num201 < vector24.Y + 16f)
											{
												this.Kill();
											}
										}
										num1063 = num203;
									}
									num1063 = num202;
								}
								if (this.lavaWet)
								{
									this.Kill();
								}
								int num204 = (int)(base.Center.X / 16f);
								int num205 = (int)(base.Center.Y / 16f);
								if (WorldGen.InWorld(num204, num205, 0) && Main.tile[num204, num205] != null && *Main.tile[num204, num205].liquid > 0 && Main.tile[num204, num205].shimmer())
								{
									this.Kill();
								}
								if (!this.active)
								{
									return;
								}
								int num206 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num206].noGravity = true;
								dust54 = Main.dust[num206];
								dust212 = dust54;
								dust212.velocity *= 0.3f;
								int num207 = (int)this.ai[0];
								int num208 = (int)this.ai[1];
								if (WorldGen.InWorld(num207, num208, 0) && WorldGen.SolidTile(num207, num208, false))
								{
									if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
									{
										if (base.Center.Y < (float)(num208 * 16 + 8) && WorldGen.InWorld(num207, num208 - 1, 0) && !WorldGen.SolidTile(num207, num208 - 1, false))
										{
											num1063 = num208;
											num208 = num1063 - 1;
										}
										else if (WorldGen.InWorld(num207, num208 + 1, 0) && !WorldGen.SolidTile(num207, num208 + 1, false))
										{
											num1063 = num208;
											num208 = num1063 + 1;
										}
										else if (WorldGen.InWorld(num207, num208 - 1, 0) && !WorldGen.SolidTile(num207, num208 - 1, false))
										{
											num1063 = num208;
											num208 = num1063 - 1;
										}
										else if (base.Center.X < (float)(num207 * 16 + 8) && WorldGen.InWorld(num207 - 1, num208, 0) && !WorldGen.SolidTile(num207 - 1, num208, false))
										{
											num1063 = num207;
											num207 = num1063 - 1;
										}
										else if (WorldGen.InWorld(num207 + 1, num208, 0) && !WorldGen.SolidTile(num207 + 1, num208, false))
										{
											num1063 = num207;
											num207 = num1063 + 1;
										}
										else if (WorldGen.InWorld(num207 - 1, num208, 0) && !WorldGen.SolidTile(num207 - 1, num208, false))
										{
											num1063 = num207;
											num207 = num1063 - 1;
										}
									}
									else if (base.Center.X < (float)(num207 * 16 + 8) && WorldGen.InWorld(num207 - 1, num208, 0) && !WorldGen.SolidTile(num207 - 1, num208, false))
									{
										num1063 = num207;
										num207 = num1063 - 1;
									}
									else if (WorldGen.InWorld(num207 + 1, num208, 0) && !WorldGen.SolidTile(num207 + 1, num208, false))
									{
										num1063 = num207;
										num207 = num1063 + 1;
									}
									else if (WorldGen.InWorld(num207 - 1, num208, 0) && !WorldGen.SolidTile(num207 - 1, num208, false))
									{
										num1063 = num207;
										num207 = num1063 - 1;
									}
									else if (base.Center.Y < (float)(num208 * 16 + 8) && WorldGen.InWorld(num207, num208 - 1, 0) && !WorldGen.SolidTile(num207, num208 - 1, false))
									{
										num1063 = num208;
										num208 = num1063 - 1;
									}
									else if (WorldGen.InWorld(num207, num208 + 1, 0) && !WorldGen.SolidTile(num207, num208 + 1, false))
									{
										num1063 = num208;
										num208 = num1063 + 1;
									}
									else if (WorldGen.InWorld(num207, num208 - 1, 0) && !WorldGen.SolidTile(num207, num208 - 1, false))
									{
										num1063 = num208;
										num208 = num1063 - 1;
									}
								}
								if (this.velocity.X > 0f)
								{
									this.rotation += 0.3f;
								}
								else
								{
									this.rotation -= 0.3f;
								}
								if (Main.myPlayer != this.owner)
								{
									return;
								}
								int num209 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
								int num210 = (int)((this.position.Y + (float)(this.height / 2)) / 16f);
								bool flag8 = false;
								if (num209 == num207 && num210 == num208)
								{
									flag8 = true;
								}
								if (((this.velocity.X <= 0f && num209 <= num207) || (this.velocity.X >= 0f && num209 >= num207)) && ((this.velocity.Y <= 0f && num210 <= num208) || (this.velocity.Y >= 0f && num210 >= num208)))
								{
									flag8 = true;
								}
								if (!flag8)
								{
									return;
								}
								if (WorldGen.PlaceTile(num207, num208, 127, false, false, this.owner, 0))
								{
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, null, 1, (float)num207, (float)num208, 127f, 0, 0, 0);
									}
									this.damage = 0;
									this.ai[0] = -1f;
									this.velocity *= 0f;
									this.alpha = 255;
									this.position.X = (float)(num207 * 16);
									this.position.Y = (float)(num208 * 16);
									this.netUpdate = true;
									return;
								}
								this.ai[1] = -1f;
								return;
							}
							else
							{
								if (this.aiStyle == 23)
								{
									if (this.type == 188)
									{
										if (this.ai[0] < 8f)
										{
											this.ai[0] = 8f;
										}
										ref float ptr = ref this.localAI[0];
										ref float ptr5 = ref ptr;
										float num1064 = ptr;
										ptr5 = num1064 + 1f;
									}
									if (this.timeLeft > 60)
									{
										this.timeLeft = 60;
									}
									if (this.ai[0] > 7f)
									{
										float num211 = 1f;
										if (this.ai[0] == 8f)
										{
											num211 = 0.25f;
										}
										else if (this.ai[0] == 9f)
										{
											num211 = 0.5f;
										}
										else if (this.ai[0] == 10f)
										{
											num211 = 0.75f;
										}
										ref float ptr = ref this.ai[0];
										ptr += 1f;
										int num212 = 6;
										if (this.type == 101)
										{
											num212 = 75;
										}
										if (num212 == 6 || Main.rand.Next(2) == 0)
										{
											int num1063;
											for (int num213 = 0; num213 < 1; num213 = num1063 + 1)
											{
												int num214 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num212, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
												Dust dust212;
												Dust dust55;
												if (Main.rand.Next(3) != 0 || (num212 == 75 && Main.rand.Next(3) == 0))
												{
													Main.dust[num214].noGravity = true;
													dust55 = Main.dust[num214];
													dust212 = dust55;
													dust212.scale *= 3f;
													ptr = ref Main.dust[num214].velocity.X;
													ptr *= 2f;
													ptr = ref Main.dust[num214].velocity.Y;
													ptr *= 2f;
												}
												if (this.type == 188)
												{
													dust55 = Main.dust[num214];
													dust212 = dust55;
													dust212.scale *= 1.25f;
												}
												else
												{
													dust55 = Main.dust[num214];
													dust212 = dust55;
													dust212.scale *= 1.5f;
												}
												ptr = ref Main.dust[num214].velocity.X;
												ptr *= 1.2f;
												ptr = ref Main.dust[num214].velocity.Y;
												ptr *= 1.2f;
												dust55 = Main.dust[num214];
												dust212 = dust55;
												dust212.scale *= num211;
												if (num212 == 75)
												{
													dust55 = Main.dust[num214];
													dust212 = dust55;
													dust212.velocity += this.velocity;
													if (!Main.dust[num214].noGravity)
													{
														dust55 = Main.dust[num214];
														dust212 = dust55;
														dust212.velocity *= 0.5f;
													}
												}
												num1063 = num213;
											}
										}
									}
									else
									{
										ref float ptr = ref this.ai[0];
										ptr += 1f;
									}
									this.rotation += 0.3f * (float)this.direction;
									return;
								}
								if (this.aiStyle == 24)
								{
									this.light = this.scale * 0.5f;
									this.rotation += this.velocity.X * 0.2f;
									ref float ptr = ref this.ai[1];
									ptr += 1f;
									if (this.type == 94)
									{
										if (Main.rand.Next(4) == 0)
										{
											int num215 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 70, 0f, 0f, 0, default(Color), 1f);
											Main.dust[num215].noGravity = true;
											Dust dust56 = Main.dust[num215];
											Dust dust212 = dust56;
											dust212.velocity *= 0.5f;
											dust56 = Main.dust[num215];
											dust212 = dust56;
											dust212.scale *= 0.9f;
										}
										this.velocity *= 0.985f;
										if (this.ai[1] > 130f)
										{
											this.scale -= 0.05f;
											if ((double)this.scale <= 0.2)
											{
												this.scale = 0.2f;
												this.Kill();
											}
										}
										return;
									}
									this.velocity *= 0.96f;
									if (this.ai[1] > 15f)
									{
										this.scale -= 0.05f;
										if ((double)this.scale <= 0.2)
										{
											this.scale = 0.2f;
											this.Kill();
											return;
										}
									}
								}
								else if (this.aiStyle == 25)
								{
									if (this.type == 1013)
									{
										ref float ptr = ref this.localAI[0];
										ref float ptr6 = ref ptr;
										float num1064 = ptr;
										ptr6 = num1064 + 1f;
									}
									if (this.type == 1014)
									{
										this.frame = Main.tileFrame[665];
									}
									if (this.ai[0] != 0f && this.velocity.Y <= 0f && this.velocity.X == 0f)
									{
										float num216 = 0.5f;
										int i2 = (int)((this.position.X - 8f) / 16f);
										int num217 = (int)(this.position.Y / 16f);
										bool flag9 = false;
										bool flag10 = false;
										if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
										{
											flag9 = true;
										}
										i2 = (int)((this.position.X + (float)this.width + 8f) / 16f);
										if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
										{
											flag10 = true;
										}
										if (flag9)
										{
											this.velocity.X = num216;
										}
										else if (flag10)
										{
											this.velocity.X = 0f - num216;
										}
										else
										{
											i2 = (int)((this.position.X - 8f - 16f) / 16f);
											num217 = (int)(this.position.Y / 16f);
											flag9 = false;
											flag10 = false;
											if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
											{
												flag9 = true;
											}
											i2 = (int)((this.position.X + (float)this.width + 8f + 16f) / 16f);
											if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
											{
												flag10 = true;
											}
											if (flag9)
											{
												this.velocity.X = num216;
											}
											else if (flag10)
											{
												this.velocity.X = 0f - num216;
											}
											else
											{
												i2 = (int)((this.position.X - 8f - 32f) / 16f);
												num217 = (int)(this.position.Y / 16f);
												flag9 = false;
												flag10 = false;
												if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
												{
													flag9 = true;
												}
												i2 = (int)((this.position.X + (float)this.width + 8f + 32f) / 16f);
												if (WorldGen.SolidTile(i2, num217, false) || WorldGen.SolidTile(i2, num217 + 1, false))
												{
													flag10 = true;
												}
												if (!flag9 && !flag10)
												{
													if ((int)(base.Center.X / 16f) % 2 == 0)
													{
														flag9 = true;
													}
													else
													{
														flag10 = true;
													}
												}
												if (flag9)
												{
													this.velocity.X = num216;
												}
												else if (flag10)
												{
													this.velocity.X = 0f - num216;
												}
											}
										}
									}
									this.rotation += this.velocity.X * 0.06f;
									this.ai[0] = 1f;
									if (this.velocity.Y > 16f)
									{
										this.velocity.Y = 16f;
									}
									if (this.type == 1021)
									{
										if (Math.Abs(this.velocity.Y) <= 1f)
										{
											if (this.velocity.X > 0f && (double)this.velocity.X < 3.5)
											{
												ref float ptr = ref this.velocity.X;
												ptr += 0.025f;
											}
											if (this.velocity.X < 0f && (double)this.velocity.X > -3.5)
											{
												ref float ptr = ref this.velocity.X;
												ptr -= 0.025f;
											}
										}
									}
									else if (this.velocity.Y <= 6f)
									{
										if (this.velocity.X > 0f && this.velocity.X < 7f)
										{
											ref float ptr = ref this.velocity.X;
											ptr += 0.05f;
										}
										if (this.velocity.X < 0f && this.velocity.X > -7f)
										{
											ref float ptr = ref this.velocity.X;
											ptr -= 0.05f;
										}
									}
									if (this.type == 1021)
									{
										ref float ptr = ref this.velocity.Y;
										ptr += 0.06f;
									}
									else
									{
										ref float ptr = ref this.velocity.Y;
										ptr += 0.3f;
									}
									if (this.type == 655 && this.wet)
									{
										this.Kill();
										return;
									}
								}
								else
								{
									if (this.aiStyle == 26)
									{
										this.AI_026();
										return;
									}
									if (this.aiStyle == 27)
									{
										if (this.type == 115)
										{
											ref float ptr = ref this.ai[0];
											ptr += 1f;
											if (this.ai[0] < 30f)
											{
												this.velocity *= 1.125f;
											}
										}
										if (this.type == 115 && this.localAI[1] < 5f)
										{
											this.localAI[1] = 5f;
											int num1063;
											for (int num218 = 5; num218 < 25; num218 = num1063 + 1)
											{
												float num219 = this.velocity.X * (30f / (float)num218);
												float num220 = this.velocity.Y * (30f / (float)num218);
												num219 *= 80f;
												num220 *= 80f;
												int num221 = Dust.NewDust(new Vector2(this.position.X - num219, this.position.Y - num220), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.9f);
												Dust dust57 = Main.dust[num221];
												Dust dust212 = dust57;
												dust212.velocity *= 0.25f;
												dust57 = Main.dust[num221];
												dust212 = dust57;
												dust212.velocity -= this.velocity * 5f;
												num1063 = num218;
											}
										}
										if (this.localAI[1] > 7f && this.type == 173)
										{
											int num1063 = Main.rand.Next(3);
											int num222;
											if (num1063 != 0)
											{
												if (num1063 != 1)
												{
													num222 = 58;
												}
												else
												{
													num222 = 57;
												}
											}
											else
											{
												num222 = 15;
											}
											int num223 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, num222, 0f, 0f, 100, default(Color), 1.25f);
											Dust dust58 = Main.dust[num223];
											Dust dust212 = dust58;
											dust212.velocity *= 0.1f;
										}
										if (this.localAI[1] > 7f && this.type == 132)
										{
											int num224 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.25f);
											Dust dust59 = Main.dust[num224];
											Dust dust212 = dust59;
											dust212.velocity *= -0.25f;
											num224 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 4f + 2f, this.position.Y + 2f - this.velocity.Y * 4f), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.25f);
											dust59 = Main.dust[num224];
											dust212 = dust59;
											dust212.velocity *= -0.25f;
											dust59 = Main.dust[num224];
											dust212 = dust59;
											dust212.position -= this.velocity * 0.5f;
										}
										if (this.localAI[1] < 15f)
										{
											ref float ptr = ref this.localAI[1];
											ptr += 1f;
										}
										else
										{
											if (this.type == 114 || this.type == 115)
											{
												int num225 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.6f);
												Dust dust60 = Main.dust[num225];
												Dust dust212 = dust60;
												dust212.velocity *= -0.25f;
											}
											else if (this.type == 116)
											{
												int num226 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 5f + 2f, this.position.Y + 2f - this.velocity.Y * 5f), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.5f);
												Dust dust61 = Main.dust[num226];
												Dust dust212 = dust61;
												dust212.velocity *= -0.25f;
												Main.dust[num226].noGravity = true;
											}
											if (this.localAI[0] == 0f)
											{
												this.scale -= 0.02f;
												this.alpha += 30;
												if (this.alpha >= 250)
												{
													this.alpha = 255;
													this.localAI[0] = 1f;
												}
											}
											else if (this.localAI[0] == 1f)
											{
												this.scale += 0.02f;
												this.alpha -= 30;
												if (this.alpha <= 0)
												{
													this.alpha = 0;
													this.localAI[0] = 0f;
												}
											}
										}
										if (this.ai[1] == 0f)
										{
											this.ai[1] = 1f;
											if (this.type == 132)
											{
												SoundEngine.PlaySound(SoundID.Item60, new Vector2?(this.position), null);
											}
											else
											{
												SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
											}
										}
										if (this.type == 157)
										{
											this.rotation += (float)this.direction * 0.4f;
											this.spriteDirection = this.direction;
										}
										else
										{
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 0.785f;
										}
										if (this.velocity.Y > 16f)
										{
											this.velocity.Y = 16f;
											return;
										}
									}
									else if (this.aiStyle == 28)
									{
										if (this.type == 967)
										{
											ref float ptr = ref this.localAI[0];
											ref float ptr7 = ref ptr;
											float num1064 = ptr;
											ptr7 = num1064 + 1f;
											if (this.localAI[0] >= 5f && this.timeLeft % 3 == 0)
											{
												this.localAI[0] = 5f;
												int num227 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, 0, default(Color), 0.35f + (float)Main.rand.Next(-5, 5) * 0.01f);
												Main.dust[num227].noGravity = true;
												Main.dust[num227].velocity = this.velocity * 1.5f;
											}
											int num1063 = this.frameCounter + 1;
											this.frameCounter = num1063;
											if (num1063 > 6)
											{
												this.frameCounter = 0;
												num1063 = this.frame;
												this.frame = num1063 + 1;
												if (this.frame >= Main.projFrames[this.type])
												{
													this.frame = 0;
												}
											}
										}
										if (this.type == 177)
										{
											int num1063;
											for (int num228 = 0; num228 < 3; num228 = num1063 + 1)
											{
												int num229 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
												Main.dust[num229].noGravity = true;
												Dust dust62 = Main.dust[num229];
												Dust dust212 = dust62;
												dust212.velocity *= 0.3f;
												num1063 = num228;
											}
										}
										if (this.type == 118)
										{
											int num1063;
											for (int num230 = 0; num230 < 2; num230 = num1063 + 1)
											{
												int num231 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
												Main.dust[num231].noGravity = true;
												Dust dust63 = Main.dust[num231];
												Dust dust212 = dust63;
												dust212.velocity *= 0.3f;
												num1063 = num230;
											}
										}
										if (this.type == 119 || this.type == 128 || this.type == 359)
										{
											int num1063;
											for (int num232 = 0; num232 < 3; num232 = num1063 + 1)
											{
												int num233 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
												Main.dust[num233].noGravity = true;
												Dust dust64 = Main.dust[num233];
												Dust dust212 = dust64;
												dust212.velocity *= 0.3f;
												num1063 = num232;
											}
										}
										if (this.type == 309)
										{
											int num1063;
											for (int num234 = 0; num234 < 3; num234 = num1063 + 1)
											{
												int num235 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
												Main.dust[num235].noGravity = true;
												Dust dust65 = Main.dust[num235];
												Dust dust212 = dust65;
												dust212.velocity *= 0.3f;
												num1063 = num234;
											}
										}
										if (this.type == 129)
										{
											int num1063;
											for (int num236 = 0; num236 < 6; num236 = num1063 + 1)
											{
												int num237 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
												Main.dust[num237].noGravity = true;
												Dust dust66 = Main.dust[num237];
												Dust dust212 = dust66;
												dust212.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
												dust66 = Main.dust[num237];
												dust212 = dust66;
												dust212.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
												num1063 = num236;
											}
										}
										if (this.ai[1] != 0f)
										{
											return;
										}
										this.ai[1] = 1f;
										if (this.type == 967)
										{
											int num1063;
											for (int num238 = 0; num238 < 10; num238 = num1063 + 1)
											{
												int num239 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, 0, default(Color), 0.4f + (float)Main.rand.Next(-20, 40) * 0.01f);
												Main.dust[num239].noGravity = true;
												Main.dust[num239].velocity = (this.velocity * 0.5f).RotatedByRandom(0.5);
												num1063 = num238;
											}
											SoundEngine.PlaySound(SoundID.Item60, new Vector2?(this.position), null);
											return;
										}
										SoundEngine.PlaySound(SoundID.Item28, new Vector2?(this.position), null);
										return;
									}
									else if (this.aiStyle == 29)
									{
										int num1063;
										if (this.type == 619)
										{
											int num240 = (int)this.ai[0];
											for (int num241 = 0; num241 < 3; num241 = num1063 + 1)
											{
												int num242 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, num240, default(Color), 1.2f);
												Main.dust[num242].position = (Main.dust[num242].position + base.Center) / 2f;
												Main.dust[num242].noGravity = true;
												Dust dust67 = Main.dust[num242];
												Dust dust212 = dust67;
												dust212.velocity *= 0.5f;
												num1063 = num241;
											}
											for (int num243 = 0; num243 < 2; num243 = num1063 + 1)
											{
												int num244 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, num240, default(Color), 0.4f);
												if (num243 != 0)
												{
													if (num243 == 1)
													{
														Main.dust[num244].position = (Main.dust[num244].position + (base.Center + this.velocity / 2f) * 5f) / 6f;
													}
												}
												else
												{
													Main.dust[num244].position = (Main.dust[num244].position + base.Center * 5f) / 6f;
												}
												Dust dust68 = Main.dust[num244];
												Dust dust212 = dust68;
												dust212.velocity *= 0.1f;
												Main.dust[num244].noGravity = true;
												Main.dust[num244].fadeIn = 1f;
												num1063 = num243;
											}
											return;
										}
										if (this.type == 620)
										{
											int num245 = (int)this.ai[0];
											ref float ptr = ref this.ai[1];
											ptr += 1f;
											float num246 = (60f - this.ai[1]) / 60f;
											if (this.ai[1] > 40f)
											{
												this.Kill();
											}
											ptr = ref this.velocity.Y;
											ptr += 0.2f;
											if (this.velocity.Y > 18f)
											{
												this.velocity.Y = 18f;
											}
											ptr = ref this.velocity.X;
											ptr *= 0.98f;
											for (int num247 = 0; num247 < 2; num247 = num1063 + 1)
											{
												int num248 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num245, this.velocity.X, this.velocity.Y, 50, default(Color), 1.1f);
												Main.dust[num248].position = (Main.dust[num248].position + base.Center) / 2f;
												Main.dust[num248].noGravity = true;
												Dust dust69 = Main.dust[num248];
												Dust dust212 = dust69;
												dust212.velocity *= 0.3f;
												dust69 = Main.dust[num248];
												dust212 = dust69;
												dust212.scale *= num246;
												num1063 = num247;
											}
											for (int num249 = 0; num249 < 1; num249 = num1063 + 1)
											{
												int num250 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num245, this.velocity.X, this.velocity.Y, 50, default(Color), 0.6f);
												Main.dust[num250].position = (Main.dust[num250].position + base.Center * 5f) / 6f;
												Dust dust70 = Main.dust[num250];
												Dust dust212 = dust70;
												dust212.velocity *= 0.1f;
												Main.dust[num250].noGravity = true;
												Main.dust[num250].fadeIn = 0.9f * num246;
												dust70 = Main.dust[num250];
												dust212 = dust70;
												dust212.scale *= num246;
												num1063 = num249;
											}
											return;
										}
										if (this.type == 521)
										{
											for (int num251 = 0; num251 < 3; num251 = num1063 + 1)
											{
												int num252 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
												Main.dust[num252].position = (Main.dust[num252].position + base.Center) / 2f;
												Main.dust[num252].noGravity = true;
												Dust dust71 = Main.dust[num252];
												Dust dust212 = dust71;
												dust212.velocity *= 0.5f;
												num1063 = num251;
											}
											for (int num253 = 0; num253 < 2; num253 = num1063 + 1)
											{
												int num254 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, 50, default(Color), 0.4f);
												if (num253 != 0)
												{
													if (num253 == 1)
													{
														Main.dust[num254].position = (Main.dust[num254].position + (base.Center + this.velocity / 2f) * 5f) / 6f;
													}
												}
												else
												{
													Main.dust[num254].position = (Main.dust[num254].position + base.Center * 5f) / 6f;
												}
												Dust dust72 = Main.dust[num254];
												Dust dust212 = dust72;
												dust212.velocity *= 0.1f;
												Main.dust[num254].noGravity = true;
												Main.dust[num254].fadeIn = 1f;
												num1063 = num253;
											}
											return;
										}
										if (this.type == 522)
										{
											ref float ptr = ref this.ai[1];
											ptr += 1f;
											float num255 = (60f - this.ai[1]) / 60f;
											if (this.ai[1] > 40f)
											{
												this.Kill();
											}
											ptr = ref this.velocity.Y;
											ptr += 0.2f;
											if (this.velocity.Y > 18f)
											{
												this.velocity.Y = 18f;
											}
											ptr = ref this.velocity.X;
											ptr *= 0.98f;
											for (int num256 = 0; num256 < 2; num256 = num1063 + 1)
											{
												int num257 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, default(Color), 1.1f);
												Main.dust[num257].position = (Main.dust[num257].position + base.Center) / 2f;
												Main.dust[num257].noGravity = true;
												Dust dust73 = Main.dust[num257];
												Dust dust212 = dust73;
												dust212.velocity *= 0.3f;
												dust73 = Main.dust[num257];
												dust212 = dust73;
												dust212.scale *= num255;
												num1063 = num256;
											}
											for (int num258 = 0; num258 < 1; num258 = num1063 + 1)
											{
												int num259 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 255, this.velocity.X, this.velocity.Y, 50, default(Color), 0.6f);
												Main.dust[num259].position = (Main.dust[num259].position + base.Center * 5f) / 6f;
												Dust dust74 = Main.dust[num259];
												Dust dust212 = dust74;
												dust212.velocity *= 0.1f;
												Main.dust[num259].noGravity = true;
												Main.dust[num259].fadeIn = 0.9f * num255;
												dust74 = Main.dust[num259];
												dust212 = dust74;
												dust212.scale *= num255;
												num1063 = num258;
											}
											return;
										}
										if (this.type == 731)
										{
											num1063 = this.frameCounter + 1;
											this.frameCounter = num1063;
											if (num1063 >= 4)
											{
												this.frameCounter = 0;
												num1063 = this.frame + 1;
												this.frame = num1063;
												if (num1063 >= Main.projFrames[this.type])
												{
													this.frame = 0;
												}
											}
											this.alpha -= 15;
											if (this.alpha < 0)
											{
												this.alpha = 0;
											}
											ref float ptr = ref this.ai[0];
											ref float ptr8 = ref ptr;
											float num1064 = ptr;
											ptr8 = num1064 + 1f;
											if ((int)this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
											{
												ptr = ref this.ai[0];
												ref float ptr9 = ref ptr;
												num1064 = ptr;
												ptr9 = num1064 + 1f;
											}
											float num260 = 5f;
											num1063 = (int)this.ai[0];
											if (num1063 <= 12)
											{
												if (num1063 != 10)
												{
													if (num1063 == 12)
													{
														ptr = ref this.velocity.Y;
														ptr += num260;
													}
												}
												else
												{
													ptr = ref this.velocity.Y;
													ptr -= num260;
												}
											}
											else if (num1063 != 18)
											{
												if (num1063 == 20)
												{
													ptr = ref this.velocity.Y;
													ptr -= num260;
													this.ai[0] = 0f;
												}
											}
											else
											{
												ptr = ref this.velocity.Y;
												ptr += num260;
											}
											if (Main.rand.Next(3) == 0)
											{
												Dust dust75 = Dust.NewDustDirect(this.position, this.width, this.height, 226, this.velocity.X, this.velocity.Y, 50, default(Color), 0.4f);
												dust75.noGravity = true;
												dust75.velocity = dust75.velocity * 0f + this.velocity * 0.5f;
												if (Main.rand.Next(3) != 0)
												{
													Dust dust76 = dust75;
													Dust dust212 = dust76;
													dust212.velocity *= 1.4f;
												}
											}
											Lighting.AddLight(base.Center, 0.2f, 0.5f, 0.7f);
											return;
										}
										int num261 = this.type - 121 + 86;
										if (this.type == 597)
										{
											num261 = 262;
										}
										for (int num262 = 0; num262 < 2; num262 = num1063 + 1)
										{
											int num263 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num261, this.velocity.X, this.velocity.Y, 50, default(Color), 1.2f);
											Main.dust[num263].noGravity = true;
											Dust dust77 = Main.dust[num263];
											Dust dust212 = dust77;
											dust212.velocity *= 0.3f;
											num1063 = num262;
										}
										if (this.ai[1] == 0f)
										{
											this.ai[1] = 1f;
											SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
											return;
										}
									}
									else if (this.aiStyle == 30)
									{
										if (this.type == 907)
										{
											float num264 = 100f;
											float num265 = num264 - 50f;
											if (Main.rand.Next(Math.Max(4, 8 - (int)this.velocity.Length())) == 0)
											{
												int num266 = 5;
												int num267 = Dust.NewDust(this.position + new Vector2((float)num266, (float)num266), this.width - num266 * 2, this.height - num266 * 2, 43, 0f, 0f, 254, new Color(255, 255, 0), 1f);
												Main.dust[num267].velocity = this.velocity * 0.75f;
											}
											if (this.ai[0] > num265)
											{
												this.velocity *= 0.9f;
												this.rotation *= 0.9f;
											}
											else
											{
												this.rotation += 0.2f;
												if (this.rotation > 6.2831855f)
												{
													this.rotation -= 6.2831855f;
												}
											}
											float num268 = this.ai[0];
											ref float ptr = ref this.ai[0];
											ref float ptr10 = ref ptr;
											float num1064 = ptr;
											ptr10 = num1064 + 1f;
											if (Main.myPlayer == this.owner && this.ai[0] < num265 && this.ai[0] % 10f == 0f)
											{
												float num269 = 1.5707964f * (float)((this.ai[0] % 20f != 0f) ? 1 : -1);
												num269 *= (float)((this.whoAmI % 2 != 0) ? 1 : -1);
												num269 += (float)Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num265);
												Vector2 v3 = this.velocity.RotatedBy((double)num269, default(Vector2));
												v3 = v3.SafeNormalize(Vector2.Zero);
												v3 *= Math.Max(2.5f, (num265 - this.ai[0]) / num265 * (7f + (-2f + (float)Main.rand.Next(2) * 2f)));
												int num270 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, v3, 335, this.damage, this.knockBack * 0.25f, this.owner, 0f, (float)Main.rand.Next(4), 0f);
											}
											if (num268 <= num265 && this.ai[0] > num265)
											{
												this.netUpdate = true;
											}
											if (this.ai[0] > num264)
											{
												this.Kill();
												return;
											}
										}
										else
										{
											if (this.type == 335)
											{
												int num271 = this.frame = (int)this.ai[1];
												float ptr;
												if (this.ai[0] < 0f)
												{
													ptr = ref this.velocity.Y;
													ptr += 0.25f;
													if (this.velocity.Y > 14f)
													{
														this.velocity.Y = 14f;
													}
												}
												else
												{
													if (Main.rand.Next(Math.Max(4, 8 - (int)this.velocity.Length())) == 0)
													{
														Color newColor = Color.White;
														switch (num271)
														{
														case 0:
															newColor..ctor(255, 100, 100);
															break;
														case 1:
															newColor..ctor(100, 255, 100);
															break;
														case 2:
															newColor..ctor(100, 100, 255);
															break;
														case 3:
															newColor..ctor(255, 255, 100);
															break;
														}
														int num272 = 5;
														int num273 = Dust.NewDust(this.position + new Vector2((float)num272, (float)num272), this.width - num272 * 2, this.height - num272 * 2, 43, 0f, 0f, 254, newColor, 1f);
														Main.dust[num273].velocity = this.velocity * 0.75f;
													}
													this.velocity *= 0.95f;
												}
												float num1064;
												if (this.ai[0] >= 0f && this.velocity.Length() < 0.25f)
												{
													if (this.velocity != Vector2.Zero)
													{
														this.velocity = Vector2.Zero;
														if (Main.netMode != 1)
														{
															this.ai[0] = 50f;
															this.netUpdate = true;
														}
													}
													ptr = ref this.ai[0];
													ref float ptr11 = ref ptr;
													num1064 = ptr;
													ptr11 = num1064 - 1f;
												}
												ptr = ref this.localAI[0];
												ref float ptr12 = ref ptr;
												num1064 = ptr;
												ptr12 = num1064 + 1f;
												this.rotation = (float)Math.Sin((double)(this.localAI[0] / 10f));
												return;
											}
											this.velocity *= 0.8f;
											this.rotation += 0.2f;
											this.alpha += 4;
											if (this.alpha >= 255)
											{
												this.Kill();
												return;
											}
										}
									}
									else
									{
										if (this.aiStyle == 31)
										{
											bool flag11 = this.ai[1] == 1f;
											int num1063 = this.type;
											short num274;
											int num275;
											switch (num1063)
											{
											case 146:
												num274 = 111;
												num275 = 2;
												break;
											case 147:
												num274 = 112;
												num275 = 1;
												break;
											case 148:
												num274 = 113;
												num275 = 3;
												break;
											case 149:
												num274 = 114;
												num275 = 4;
												break;
											default:
												switch (num1063)
												{
												case 1015:
													num274 = 311;
													num275 = 5;
													break;
												case 1016:
													num274 = 312;
													num275 = 6;
													break;
												case 1017:
													num274 = 313;
													num275 = 7;
													break;
												default:
													num274 = 110;
													num275 = 0;
													break;
												}
												break;
											}
											if (this.owner == Main.myPlayer)
											{
												int size = 2;
												if (flag11)
												{
													size = 3;
												}
												Point point = base.Center.ToTileCoordinates();
												WorldGen.Convert(point.X, point.Y, num275, size);
											}
											if (this.timeLeft > 133)
											{
												this.timeLeft = 133;
											}
											int num276 = 7;
											if (flag11)
											{
												num276 = 3;
											}
											if (this.ai[0] > (float)num276)
											{
												float num277 = 1f;
												if (this.ai[0] == (float)(num276 + 1))
												{
													num277 = 0.2f;
												}
												else if (this.ai[0] == (float)(num276 + 2))
												{
													num277 = 0.4f;
												}
												else if (this.ai[0] == (float)(num276 + 3))
												{
													num277 = 0.6f;
												}
												else if (this.ai[0] == (float)(num276 + 4))
												{
													num277 = 0.8f;
												}
												int num278 = 0;
												if (flag11)
												{
													num277 *= 1.2f;
													num278 = (int)(12f * num277);
												}
												ref float ptr = ref this.ai[0];
												ref float ptr13 = ref ptr;
												float num1064 = ptr;
												ptr13 = num1064 + 1f;
												for (int num279 = 0; num279 < 1; num279 = num1063 + 1)
												{
													int num280 = Dust.NewDust(new Vector2(this.position.X - (float)num278, this.position.Y - (float)num278), this.width + num278 * 2, this.height + num278 * 2, (int)num274, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
													Main.dust[num280].noGravity = true;
													Dust dust78 = Main.dust[num280];
													Dust dust212 = dust78;
													dust212.scale *= 1.75f;
													ptr = ref Main.dust[num280].velocity.X;
													ptr *= 2f;
													ptr = ref Main.dust[num280].velocity.Y;
													ptr *= 2f;
													dust78 = Main.dust[num280];
													dust212 = dust78;
													dust212.scale *= num277;
													num1063 = num279;
												}
											}
											else
											{
												ref float ptr = ref this.ai[0];
												ref float ptr14 = ref ptr;
												float num1064 = ptr;
												ptr14 = num1064 + 1f;
											}
											this.rotation += 0.3f * (float)this.direction;
											return;
										}
										if (this.aiStyle == 32)
										{
											this.timeLeft = 10;
											ref float ptr = ref this.ai[0];
											ptr += 1f;
											if (this.ai[0] >= 20f)
											{
												this.ai[0] = 18f;
												Rectangle rectangle3;
												rectangle3..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
												int num1063;
												for (int num281 = 0; num281 < 255; num281 = num1063 + 1)
												{
													Entity entity = Main.player[num281];
													if (entity.active && rectangle3.Intersects(entity.Hitbox))
													{
														this.ai[0] = 0f;
														this.velocity.Y = -4.5f;
														if (this.velocity.X > 2f)
														{
															this.velocity.X = 2f;
														}
														if (this.velocity.X < -2f)
														{
															this.velocity.X = -2f;
														}
														this.velocity.X = (this.velocity.X + (float)entity.direction * 1.75f) / 2f;
														ptr = ref this.velocity.X;
														ptr += entity.velocity.X * 3f;
														ptr = ref this.velocity.Y;
														ptr += entity.velocity.Y;
														if (this.velocity.X > 6f)
														{
															this.velocity.X = 6f;
														}
														if (this.velocity.X < -6f)
														{
															this.velocity.X = -6f;
														}
														if (this.velocity.Length() > 16f)
														{
															this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
														}
														this.netUpdate = true;
														ptr = ref this.ai[1];
														ptr += 1f;
													}
													num1063 = num281;
												}
												for (int num282 = 0; num282 < 1000; num282 = num1063 + 1)
												{
													if (num282 != this.whoAmI)
													{
														Entity entity2 = Main.projectile[num282];
														if (entity2.active && rectangle3.Intersects(entity2.Hitbox))
														{
															this.ai[0] = 0f;
															this.velocity.Y = -4.5f;
															if (this.velocity.X > 2f)
															{
																this.velocity.X = 2f;
															}
															if (this.velocity.X < -2f)
															{
																this.velocity.X = -2f;
															}
															this.velocity.X = (this.velocity.X + (float)entity2.direction * 1.75f) / 2f;
															ptr = ref this.velocity.X;
															ptr += entity2.velocity.X * 3f;
															ptr = ref this.velocity.Y;
															ptr += entity2.velocity.Y;
															if (this.velocity.X > 6f)
															{
																this.velocity.X = 6f;
															}
															if (this.velocity.X < -6f)
															{
																this.velocity.X = -6f;
															}
															if (this.velocity.Length() > 16f)
															{
																this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
															}
															this.netUpdate = true;
															ptr = ref this.ai[1];
															ptr += 1f;
														}
													}
													num1063 = num282;
												}
											}
											if (this.velocity.X == 0f && this.velocity.Y == 0f)
											{
												this.Kill();
											}
											this.rotation += 0.02f * this.velocity.X;
											if (this.velocity.Y == 0f)
											{
												ptr = ref this.velocity.X;
												ptr *= 0.98f;
											}
											else if (this.wet)
											{
												ptr = ref this.velocity.X;
												ptr *= 0.99f;
											}
											else
											{
												ptr = ref this.velocity.X;
												ptr *= 0.995f;
											}
											if ((double)this.velocity.X > -0.03 && (double)this.velocity.X < 0.03)
											{
												this.velocity.X = 0f;
											}
											if (this.wet)
											{
												this.ai[1] = 0f;
												if (this.velocity.Y > 0f)
												{
													ptr = ref this.velocity.Y;
													ptr *= 0.95f;
												}
												ptr = ref this.velocity.Y;
												ptr -= 0.1f;
												if (this.velocity.Y < -4f)
												{
													this.velocity.Y = -4f;
												}
												if (this.velocity.X == 0f)
												{
													this.Kill();
												}
											}
											else
											{
												ptr = ref this.velocity.Y;
												ptr += 0.1f;
											}
											if (this.velocity.Y > 10f)
											{
												this.velocity.Y = 10f;
												return;
											}
										}
										else
										{
											if (this.aiStyle == 33)
											{
												if (this.alpha > 0)
												{
													this.alpha -= 50;
													if (this.alpha < 0)
													{
														this.alpha = 0;
													}
												}
												float num283 = 4f;
												float num284 = this.ai[0];
												float num285 = this.ai[1];
												if (num284 == 0f && num285 == 0f)
												{
													num284 = 1f;
												}
												float num286 = (float)Math.Sqrt((double)(num284 * num284 + num285 * num285));
												num286 = num283 / num286;
												num284 *= num286;
												num285 *= num286;
												if (this.alpha < 70)
												{
													short num287 = 127;
													int num1063 = this.type;
													if (num1063 != 163)
													{
														if (num1063 != 310)
														{
															switch (num1063)
															{
															case 1008:
																num287 = 169;
																break;
															case 1009:
																num287 = 75;
																break;
															case 1010:
																num287 = 66;
																break;
															case 1011:
																num287 = 310;
																break;
															}
														}
														else
														{
															num287 = 187;
														}
													}
													else
													{
														num287 = 127;
													}
													int num288 = Dust.NewDust(new Vector2(this.position.X, this.position.Y - 2f), 6, 6, (int)num287, this.velocity.X, this.velocity.Y, 100, default(Color), 1.6f);
													Main.dust[num288].noGravity = true;
													ref float ptr = ref Main.dust[num288].position.X;
													ptr -= num284 * 1f;
													ptr = ref Main.dust[num288].position.Y;
													ptr -= num285 * 1f;
													ptr = ref Main.dust[num288].velocity.X;
													ptr -= num284;
													ptr = ref Main.dust[num288].velocity.Y;
													ptr -= num285;
													if (this.type == 1010)
													{
														Main.dust[num288].color = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.6f % 1f, 1f, 0.5f, byte.MaxValue);
														Dust dust79 = Main.dust[num288];
														Dust dust212 = dust79;
														dust212.scale *= 0.5f;
														dust79 = Main.dust[num288];
														dust212 = dust79;
														dust212.velocity *= 0.75f;
													}
												}
												if (this.localAI[0] == 0f)
												{
													this.ai[0] = this.velocity.X;
													this.ai[1] = this.velocity.Y;
													ref float ptr = ref this.localAI[1];
													ptr += 1f;
													if (this.localAI[1] >= 30f)
													{
														ptr = ref this.velocity.Y;
														ptr += 0.09f;
														this.localAI[1] = 30f;
													}
												}
												else
												{
													if (!Collision.SolidCollision(this.position, this.width, this.height))
													{
														this.localAI[0] = 0f;
														this.localAI[1] = 30f;
													}
													if (this.type == 1008 && Main.netMode != 2)
													{
														int num289 = 30;
														if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num289 * 16))
														{
															Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
														}
													}
													this.damage = 0;
												}
												if (this.velocity.Y > 16f)
												{
													this.velocity.Y = 16f;
												}
												this.rotation = (float)Math.Atan2((double)this.ai[1], (double)this.ai[0]) + 1.57f;
												return;
											}
											if (this.aiStyle == 34)
											{
												this.rotation = this.velocity.ToRotation() + 1.5707964f;
												if (this.ai[1] == 1f)
												{
													ref float ptr = ref this.ai[0];
													ref float ptr15 = ref ptr;
													float num1064 = ptr;
													ptr15 = num1064 + 1f;
													if (this.ai[0] == 1f)
													{
														int num1063;
														for (int num290 = 0; num290 < 8; num290 = num1063 + 1)
														{
															int num291 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.8f);
															Main.dust[num291].noGravity = true;
															Dust dust80 = Main.dust[num291];
															Dust dust212 = dust80;
															dust212.velocity *= 3f;
															Main.dust[num291].fadeIn = 0.5f;
															dust80 = Main.dust[num291];
															dust212 = dust80;
															dust212.position += this.velocity / 2f;
															dust80 = Main.dust[num291];
															dust212 = dust80;
															dust212.velocity += this.velocity / 4f + Main.player[this.owner].velocity * 0.1f;
															num1063 = num290;
														}
													}
													if (this.ai[0] > 2f)
													{
														int num292 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
														Main.dust[num292].noGravity = true;
														Dust dust81 = Main.dust[num292];
														Dust dust212 = dust81;
														dust212.velocity *= 0.2f;
														Main.dust[num292].position = Main.dust[num292].position.RotatedBy((double)this.rotation, base.Center);
														num292 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 15f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
														Main.dust[num292].noGravity = true;
														dust81 = Main.dust[num292];
														dust212 = dust81;
														dust212.velocity *= 0.2f;
														Main.dust[num292].position = Main.dust[num292].position.RotatedBy((double)this.rotation, base.Center);
														num292 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 10f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
														Main.dust[num292].noGravity = true;
														dust81 = Main.dust[num292];
														dust212 = dust81;
														dust212.velocity *= 0.2f;
														Main.dust[num292].position = Main.dust[num292].position.RotatedBy((double)this.rotation, base.Center);
														return;
													}
												}
												else
												{
													if (this.type < 415 || this.type > 418)
													{
														int num293 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
														Main.dust[num293].noGravity = true;
														Dust dust82 = Main.dust[num293];
														Dust dust212 = dust82;
														dust212.velocity *= 0.2f;
														Main.dust[num293].position = Main.dust[num293].position.RotatedBy((double)this.rotation, base.Center);
														return;
													}
													ref float ptr = ref this.ai[0];
													ref float ptr16 = ref ptr;
													float num1064 = ptr;
													ptr16 = num1064 + 1f;
													if (this.ai[0] > 4f)
													{
														int num294 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
														Main.dust[num294].noGravity = true;
														Dust dust83 = Main.dust[num294];
														Dust dust212 = dust83;
														dust212.velocity *= 0.2f;
														Main.dust[num294].position = Main.dust[num294].position.RotatedBy((double)this.rotation, base.Center);
														return;
													}
												}
											}
											else if (this.aiStyle == 35)
											{
												ref float ptr = ref this.ai[0];
												ptr += 1f;
												if (this.ai[0] > 30f)
												{
													ptr = ref this.velocity.Y;
													ptr += 0.2f;
													ptr = ref this.velocity.X;
													ptr *= 0.985f;
													if (this.velocity.Y > 14f)
													{
														this.velocity.Y = 14f;
													}
												}
												this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * (float)this.direction * 0.02f;
												if (this.owner != Main.myPlayer)
												{
													return;
												}
												Vector2 vector25 = Collision.TileCollision(this.position, this.velocity, this.width, this.height, true, true, 1);
												bool flag12 = false;
												if (vector25 != this.velocity)
												{
													flag12 = true;
												}
												else
												{
													int num295 = (int)(base.Center.X + this.velocity.X) / 16;
													int num296 = (int)(base.Center.Y + this.velocity.Y) / 16;
													if (Main.tile[num295, num296] != null && Main.tile[num295, num296].active() && Main.tile[num295, num296].bottomSlope())
													{
														flag12 = true;
														this.position.Y = (float)(num296 * 16 + 16 + 8);
														this.position.X = (float)(num295 * 16 + 8);
													}
												}
												if (!flag12)
												{
													return;
												}
												int num297 = 213;
												if (this.type == 475)
												{
													num297 = 353;
												}
												if (this.type == 506)
												{
													num297 = 366;
												}
												if (this.type == 505)
												{
													num297 = 365;
												}
												int num298 = (int)(this.position.X + (float)(this.width / 2)) / 16;
												int num299 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
												this.position += vector25;
												int num300 = 10;
												if (Main.tile[num298, num299] == null)
												{
													return;
												}
												while (WorldGen.IsRope(num298, num299))
												{
													int num1063 = num299;
													num299 = num1063 + 1;
												}
												bool flag13 = false;
												while (num300 > 0)
												{
													bool flag14 = false;
													if (Main.tile[num298, num299] == null)
													{
														break;
													}
													if (Main.tile[num298, num299].active())
													{
														if (*Main.tile[num298, num299].type == 314 || TileID.Sets.Platforms[(int)(*Main.tile[num298, num299].type)])
														{
															flag13 = !flag13;
														}
														else if (Main.tileCut[(int)(*Main.tile[num298, num299].type)] || *Main.tile[num298, num299].type == 165)
														{
															flag13 = false;
															WorldGen.KillTile(num298, num299, false, false, false);
															NetMessage.SendData(17, -1, -1, null, 0, (float)num298, (float)num299, 0f, 0, 0, 0);
														}
													}
													if (!Main.tile[num298, num299].active())
													{
														flag13 = false;
														flag14 = true;
														WorldGen.PlaceTile(num298, num299, num297, false, false, -1, 0);
														NetMessage.SendData(17, -1, -1, null, 1, (float)num298, (float)num299, (float)num297, 0, 0, 0);
														ptr = ref this.ai[1];
														ptr += 1f;
													}
													else if (!flag13)
													{
														num300 = 0;
													}
													int num1063;
													if (flag14)
													{
														num1063 = num300;
														num300 = num1063 - 1;
													}
													num1063 = num299;
													num299 = num1063 + 1;
												}
												this.Kill();
												return;
											}
											else if (this.aiStyle == 36)
											{
												if (this.type != 307 && this.wet && !this.honeyWet && !this.shimmerWet)
												{
													this.Kill();
												}
												if (this.alpha > 0)
												{
													this.alpha -= 50;
												}
												else
												{
													this.extraUpdates = 0;
												}
												if (this.alpha < 0)
												{
													this.alpha = 0;
												}
												if (this.type == 307)
												{
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
													int num1063 = this.frameCounter;
													this.frameCounter = num1063 + 1;
													if (this.frameCounter >= 6)
													{
														num1063 = this.frame;
														this.frame = num1063 + 1;
														this.frameCounter = 0;
													}
													if (this.frame >= 2)
													{
														this.frame = 0;
													}
													for (int num301 = 0; num301 < 3; num301 = num1063 + 1)
													{
														float num302 = this.velocity.X / 3f * (float)num301;
														float num303 = this.velocity.Y / 3f * (float)num301;
														int num304 = Dust.NewDust(this.position, this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
														Main.dust[num304].position.X = base.Center.X - num302;
														Main.dust[num304].position.Y = base.Center.Y - num303;
														Dust dust84 = Main.dust[num304];
														Dust dust212 = dust84;
														dust212.velocity *= 0f;
														Main.dust[num304].scale = 0.5f;
														num1063 = num301;
													}
												}
												else
												{
													if (this.type == 316)
													{
														if (this.velocity.X > 0f)
														{
															this.spriteDirection = -1;
														}
														else if (this.velocity.X < 0f)
														{
															this.spriteDirection = 1;
														}
													}
													else if (this.velocity.X > 0f)
													{
														this.spriteDirection = 1;
													}
													else if (this.velocity.X < 0f)
													{
														this.spriteDirection = -1;
													}
													this.rotation = this.velocity.X * 0.1f;
													int num1063 = this.frameCounter;
													this.frameCounter = num1063 + 1;
													if (this.frameCounter >= 3)
													{
														num1063 = this.frame;
														this.frame = num1063 + 1;
														this.frameCounter = 0;
													}
													if (this.frame >= 3)
													{
														this.frame = 0;
													}
												}
												float num305 = this.position.X;
												float num306 = this.position.Y;
												float num307 = 100000f;
												bool flag15 = false;
												ref float ptr = ref this.ai[0];
												ptr += 1f;
												if (this.ai[0] > 30f)
												{
													this.ai[0] = 30f;
													int num1063;
													for (int num308 = 0; num308 < 200; num308 = num1063 + 1)
													{
														if (Main.npc[num308].CanBeChasedBy(this, false) && (!Main.npc[num308].wet || Main.npc[num308].type == 370 || this.type == 307))
														{
															float num309 = Main.npc[num308].position.X + (float)(Main.npc[num308].width / 2);
															float num310 = Main.npc[num308].position.Y + (float)(Main.npc[num308].height / 2);
															float num311 = Math.Abs(this.position.X + (float)(this.width / 2) - num309) + Math.Abs(this.position.Y + (float)(this.height / 2) - num310);
															if (num311 < 800f && num311 < num307 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num308].position, Main.npc[num308].width, Main.npc[num308].height))
															{
																num307 = num311;
																num305 = num309;
																num306 = num310;
																flag15 = true;
															}
														}
														num1063 = num308;
													}
												}
												if (!flag15)
												{
													num305 = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
													num306 = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
												}
												else if (this.type == 307)
												{
													this.friendly = true;
												}
												float num312 = 6f;
												float num313 = 0.1f;
												if (this.type == 189)
												{
													num312 = 9f;
													num313 = 0.2f;
												}
												if (this.type == 307)
												{
													num312 = 13f;
													num313 = 0.35f;
												}
												if (this.type == 316)
												{
													if (flag15)
													{
														num312 = 13f;
														num313 = 0.325f;
													}
													else
													{
														num312 = 10f;
														num313 = 0.25f;
													}
												}
												if (this.type == 566)
												{
													num312 = 6.8f;
													num313 = 0.14f;
												}
												Vector2 vector26;
												vector26..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num314 = num305 - vector26.X;
												float num315 = num306 - vector26.Y;
												float num316 = (float)Math.Sqrt((double)(num314 * num314 + num315 * num315));
												num316 = num312 / num316;
												num314 *= num316;
												num315 *= num316;
												if (this.velocity.X < num314)
												{
													ptr = ref this.velocity.X;
													ptr += num313;
													if (this.velocity.X < 0f && num314 > 0f)
													{
														ptr = ref this.velocity.X;
														ptr += num313 * 2f;
													}
												}
												else if (this.velocity.X > num314)
												{
													ptr = ref this.velocity.X;
													ptr -= num313;
													if (this.velocity.X > 0f && num314 < 0f)
													{
														ptr = ref this.velocity.X;
														ptr -= num313 * 2f;
													}
												}
												if (this.velocity.Y < num315)
												{
													ptr = ref this.velocity.Y;
													ptr += num313;
													if (this.velocity.Y < 0f && num315 > 0f)
													{
														ptr = ref this.velocity.Y;
														ptr += num313 * 2f;
														return;
													}
												}
												else if (this.velocity.Y > num315)
												{
													ptr = ref this.velocity.Y;
													ptr -= num313;
													if (this.velocity.Y > 0f && num315 < 0f)
													{
														ptr = ref this.velocity.Y;
														ptr -= num313 * 2f;
														return;
													}
												}
											}
											else if (this.aiStyle == 37)
											{
												if (this.ai[1] == 0f)
												{
													this.ai[1] = 1f;
													this.localAI[0] = base.Center.X - this.velocity.X * 1.5f;
													this.localAI[1] = base.Center.Y - this.velocity.Y * 1.5f;
												}
												Vector2 vector27;
												vector27..ctor(this.localAI[0], this.localAI[1]);
												this.rotation = (base.Center - vector27).ToRotation() - 1.5707964f;
												if (this.ai[0] == 0f)
												{
													if (Collision.SolidCollision(this.position, this.width, this.height))
													{
														this.velocity *= -1f;
														ref float ptr = ref this.ai[0];
														ptr += 1f;
														return;
													}
													float num317 = Vector2.Distance(base.Center, vector27);
													if (num317 > 300f)
													{
														this.velocity *= -1f;
														ref float ptr = ref this.ai[0];
														ptr += 1f;
														return;
													}
												}
												else if (Collision.SolidCollision(this.position, this.width, this.height) || Vector2.Distance(base.Center, vector27) < this.velocity.Length())
												{
													this.Kill();
													return;
												}
											}
											else if (this.aiStyle == 38)
											{
												ref float ptr = ref this.ai[0];
												ptr += 1f;
												if (this.ai[0] >= 6f)
												{
													this.ai[0] = 0f;
													SoundEngine.PlaySound(SoundID.Item34, new Vector2?(this.position), null);
													if (Main.myPlayer == this.owner)
													{
														Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 188, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
														return;
													}
												}
											}
											else if (this.aiStyle == 39)
											{
												this.alpha -= 50;
												if (this.alpha < 0)
												{
													this.alpha = 0;
												}
												if (!this.active || !Main.player[this.owner].active || Main.player[this.owner].dead || Vector2.Distance(Main.player[this.owner].Center, base.Center) > 2000f)
												{
													this.Kill();
													return;
												}
												if (this.active && this.alpha == 0)
												{
													Main.player[this.owner].SetDummyItemTime(5);
													if (base.Center.X > Main.player[this.owner].Center.X)
													{
														Main.player[this.owner].ChangeDir(1);
													}
													else
													{
														Main.player[this.owner].ChangeDir(-1);
													}
												}
												Vector2 center = base.Center;
												float num318 = Main.player[this.owner].Center.X - center.X;
												float num319 = Main.player[this.owner].Center.Y - center.Y;
												float num320 = (float)Math.Sqrt((double)(num318 * num318 + num319 * num319));
												if (!Main.player[this.owner].channel && this.active && this.alpha == 0)
												{
													this.ai[0] = 1f;
													this.ai[1] = -1f;
												}
												if (this.ai[1] > 0f && num320 > 1500f)
												{
													this.ai[1] = 0f;
													this.ai[0] = 1f;
												}
												int num1063;
												if (this.ai[1] > 0f)
												{
													this.tileCollide = false;
													int num321 = (int)this.ai[1] - 1;
													if (Main.npc[num321].active && Main.npc[num321].life > 0)
													{
														float num322 = 16f;
														center = base.Center;
														num318 = Main.npc[num321].Center.X - center.X;
														num319 = Main.npc[num321].Center.Y - center.Y;
														num320 = (float)Math.Sqrt((double)(num318 * num318 + num319 * num319));
														if (num320 < num322)
														{
															this.velocity.X = num318;
															this.velocity.Y = num319;
															if (num320 > num322 / 3f)
															{
																if (this.velocity.X < 0f)
																{
																	this.spriteDirection = -1;
																	this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
																}
																else
																{
																	this.spriteDirection = 1;
																	this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
																}
																if (this.type == 190)
																{
																	this.velocity.X = 0f;
																	this.velocity.Y = 0f;
																}
															}
														}
														else
														{
															if (num320 == 0f)
															{
																num320 = 0.0001f;
															}
															num320 = num322 / num320;
															num318 *= num320;
															num319 *= num320;
															this.velocity.X = num318;
															this.velocity.Y = num319;
															if (this.velocity.X < 0f)
															{
																this.spriteDirection = -1;
																this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
															}
															else
															{
																this.spriteDirection = 1;
																this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
															}
														}
														if (this.type == 190)
														{
															this.position += Main.npc[num321].velocity;
															for (int num323 = 0; num323 < 1000; num323 = num1063 + 1)
															{
																if (num323 != this.whoAmI && Main.projectile[num323].active && Main.projectile[num323].owner == this.owner && Main.projectile[num323].type == 190 && Vector2.Distance(base.Center, Main.projectile[num323].Center) < 8f)
																{
																	if (this.position.X < Main.projectile[num323].position.X)
																	{
																		ref float ptr = ref this.velocity.X;
																		ptr -= 4f;
																	}
																	else
																	{
																		ref float ptr = ref this.velocity.X;
																		ptr += 4f;
																	}
																	if (this.position.Y < Main.projectile[num323].position.Y)
																	{
																		ref float ptr = ref this.velocity.Y;
																		ptr -= 4f;
																	}
																	else
																	{
																		ref float ptr = ref this.velocity.Y;
																		ptr += 4f;
																	}
																}
																num1063 = num323;
															}
														}
														if (Main.myPlayer == this.owner)
														{
															float num324 = this.ai[0];
															this.ai[0] = 1f;
															if (num324 != this.ai[0])
															{
																this.netUpdate = true;
															}
														}
													}
													else if (Main.myPlayer == this.owner)
													{
														float num325 = this.ai[1];
														this.ai[1] = 0f;
														if (num325 != this.ai[1])
														{
															this.netUpdate = true;
														}
														float num326 = this.position.X;
														float num327 = this.position.Y;
														float num328 = 3000f;
														int num329 = -1;
														for (int num330 = 0; num330 < 200; num330 = num1063 + 1)
														{
															if (Main.npc[num330].CanBeChasedBy(this, false))
															{
																float x = Main.npc[num330].Center.X;
																float y = Main.npc[num330].Center.Y;
																float num331 = Math.Abs(base.Center.X - x) + Math.Abs(base.Center.Y - y);
																if (num331 < num328 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num330].position, Main.npc[num330].width, Main.npc[num330].height))
																{
																	num328 = num331;
																	num326 = x;
																	num327 = y;
																	num329 = num330;
																}
															}
															num1063 = num330;
														}
														if (num329 >= 0)
														{
															float num332 = 16f;
															center = base.Center;
															num318 = num326 - center.X;
															num319 = num327 - center.Y;
															num320 = (float)Math.Sqrt((double)(num318 * num318 + num319 * num319));
															if (num320 == 0f)
															{
																num320 = 0.0001f;
															}
															num320 = num332 / num320;
															num318 *= num320;
															num319 *= num320;
															this.velocity.X = num318;
															this.velocity.Y = num319;
															this.ai[0] = 0f;
															this.ai[1] = (float)(num329 + 1);
															this.netUpdate = true;
														}
													}
												}
												else if (this.ai[0] == 0f)
												{
													if (Main.myPlayer == this.owner && num320 > 700f)
													{
														this.ai[0] = 1f;
														this.netUpdate = true;
													}
													if (this.velocity.X < 0f)
													{
														this.spriteDirection = -1;
														this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
													}
													else
													{
														this.spriteDirection = 1;
														this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
													}
												}
												else if (this.ai[0] == 1f)
												{
													this.tileCollide = false;
													if (this.velocity.X < 0f)
													{
														this.spriteDirection = 1;
														this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
													}
													else
													{
														this.spriteDirection = -1;
														this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
													}
													if (this.velocity.X < 0f)
													{
														this.spriteDirection = -1;
														this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
													}
													else
													{
														this.spriteDirection = 1;
														this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
													}
													float num333 = 20f;
													if (Main.myPlayer == this.owner && num320 < 70f)
													{
														this.Kill();
													}
													num320 = num333 / num320;
													num318 *= num320;
													num319 *= num320;
													this.velocity.X = num318;
													this.velocity.Y = num319;
													if (this.type == 190)
													{
														this.position += Main.player[this.owner].velocity;
													}
												}
												num1063 = this.frameCounter;
												this.frameCounter = num1063 + 1;
												if (this.frameCounter >= 4)
												{
													num1063 = this.frame;
													this.frame = num1063 + 1;
													this.frameCounter = 0;
												}
												if (this.frame >= 4)
												{
													this.frame = 0;
													return;
												}
											}
											else
											{
												if (this.aiStyle == 40)
												{
													ref float ptr = ref this.localAI[0];
													ptr += 1f;
													if (this.localAI[0] > 3f)
													{
														this.localAI[0] = 100f;
														this.alpha -= 50;
														if (this.alpha < 0)
														{
															this.alpha = 0;
														}
													}
													int num1063 = this.frameCounter;
													this.frameCounter = num1063 + 1;
													if (this.frameCounter >= 3)
													{
														num1063 = this.frame;
														this.frame = num1063 + 1;
														this.frameCounter = 0;
													}
													if (this.frame >= 5)
													{
														this.frame = 0;
													}
													ptr = ref this.velocity.X;
													ptr += this.ai[0];
													ptr = ref this.velocity.Y;
													ptr += this.ai[1];
													ptr = ref this.localAI[1];
													ptr += 1f;
													if (this.localAI[1] == 50f)
													{
														this.localAI[1] = 51f;
														this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
														this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
													}
													if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 16f)
													{
														ptr = ref this.velocity.X;
														ptr *= 0.95f;
														ptr = ref this.velocity.Y;
														ptr *= 0.95f;
													}
													if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 12f)
													{
														ptr = ref this.velocity.X;
														ptr *= 1.05f;
														ptr = ref this.velocity.Y;
														ptr *= 1.05f;
													}
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
													return;
												}
												if (this.aiStyle == 41)
												{
													if (this.localAI[0] == 0f)
													{
														this.localAI[0] = 1f;
														this.frame = Main.rand.Next(3);
													}
													this.rotation += this.velocity.X * 0.01f;
													return;
												}
												if (this.aiStyle == 42)
												{
													if (!Main.player[this.owner].crystalLeaf)
													{
														this.Kill();
														return;
													}
													this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
													this.position.Y = Main.player[this.owner].Center.Y - (float)(this.height / 2) + Main.player[this.owner].gfxOffY - 60f;
													if (Main.player[this.owner].gravDir == -1f)
													{
														ref float ptr = ref this.position.Y;
														ptr += 120f;
														this.rotation = 3.14f;
													}
													else
													{
														this.rotation = 0f;
													}
													this.position.X = (float)((int)this.position.X);
													this.position.Y = (float)((int)this.position.Y);
													float num334 = (float)Main.mouseTextColor / 200f - 0.35f;
													num334 *= 0.2f;
													this.scale = num334 + 0.95f;
													if (this.owner != Main.myPlayer || Main.player[this.owner].crystalLeafCooldown != 0)
													{
														return;
													}
													float x2 = this.position.X;
													float y2 = this.position.Y;
													float num335 = 700f;
													NPC nPC = null;
													int num1063;
													for (int num336 = 0; num336 < 200; num336 = num1063 + 1)
													{
														if (Main.npc[num336].CanBeChasedBy(this, false))
														{
															float num337 = Main.npc[num336].position.X + (float)(Main.npc[num336].width / 2);
															float num338 = Main.npc[num336].position.Y + (float)(Main.npc[num336].height / 2);
															float num339 = Math.Abs(this.position.X + (float)(this.width / 2) - num337) + Math.Abs(this.position.Y + (float)(this.height / 2) - num338);
															if (num339 < num335 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num336].position, Main.npc[num336].width, Main.npc[num336].height))
															{
																num335 = num339;
																nPC = Main.npc[num336];
															}
														}
														num1063 = num336;
													}
													if (nPC != null)
													{
														float num340 = 12f;
														Vector2 vector28;
														vector28..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num341 = x2 - vector28.X;
														float num342 = y2 - vector28.Y;
														float num343 = (float)Math.Sqrt((double)(num341 * num341 + num342 * num342));
														num343 = num340 / num343;
														num341 *= num343;
														num342 *= num343;
														int num344 = 180;
														Utils.ChaseResults chaseResults = Utils.GetChaseResults(base.Center, num340 * (float)num344, nPC.Center, nPC.velocity);
														if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= 180f)
														{
															Vector2 vector29 = chaseResults.ChaserVelocity / (float)num344;
															num341 = vector29.X;
															num342 = vector29.Y;
														}
														Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - 4f, base.Center.Y, num341, num342, 227, Player.crystalLeafDamage, (float)Player.crystalLeafKB, this.owner, 0f, 0f, 0f);
														Main.player[this.owner].crystalLeafCooldown = 40;
														return;
													}
												}
												else if (this.aiStyle == 43)
												{
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
													int num1063;
													if (this.soundDelay == 0 && this.type == 227)
													{
														this.soundDelay = -1;
														SoundEngine.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
														for (int num345 = 0; num345 < 8; num345 = num1063 + 1)
														{
															int num346 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
															Main.dust[num346].noGravity = true;
															Dust dust85 = Main.dust[num346];
															Dust dust212 = dust85;
															dust212.velocity *= 3f;
															Main.dust[num346].scale = 1.5f;
															dust85 = Main.dust[num346];
															dust212 = dust85;
															dust212.velocity += this.velocity * Main.rand.NextFloat();
															num1063 = num345;
														}
													}
													float num347 = 1f - (float)this.timeLeft / 180f;
													float num348 = ((num347 * -6f * 0.85f + 0.33f) % 1f + 1f) % 1f;
													Color value3 = Main.hslToRgb(num348, 1f, 0.5f, byte.MaxValue);
													value3 = Color.Lerp(value3, Color.Red, Utils.Remap(num348, 0.33f, 0.7f, 0f, 1f, true));
													value3 = Color.Lerp(value3, Color.Lerp(Color.LimeGreen, Color.Gold, 0.3f), (float)value3.R / 255f * 1f);
													num1063 = this.frameCounter;
													this.frameCounter = num1063 + 1;
													if (num1063 >= 1)
													{
														this.frameCounter = 0;
														bool clientOnly = true;
														ParticleOrchestraType particleOrchestraType = ParticleOrchestraType.ChlorophyteLeafCrystalShot;
														ParticleOrchestraSettings particleOrchestraSettings = new ParticleOrchestraSettings
														{
															PositionInWorld = base.Center,
															MovementVector = this.velocity,
															UniqueInfoPiece = (int)((byte)(Main.rgbToHsl(value3).X * 255f))
														};
														ParticleOrchestraSettings settings = particleOrchestraSettings;
														int? num1068 = null;
														ParticleOrchestrator.RequestParticleSpawn(clientOnly, particleOrchestraType, settings, num1068);
													}
													Lighting.AddLight(base.Center, new Vector3(0.05f, 0.2f, 0.1f) * 1.5f);
													if (Main.rand.Next(5) == 0)
													{
														Dust dust86 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 63, 0f, 0f, 0, default(Color), 1f);
														dust86.noGravity = true;
														Dust dust87 = dust86;
														Dust dust212 = dust87;
														dust212.velocity *= 0.1f;
														dust86.scale = 1.5f;
														dust87 = dust86;
														dust212 = dust87;
														dust212.velocity += this.velocity * Main.rand.NextFloat();
														dust86.color = value3;
														ref Color ptr17 = ref dust86.color;
														ptr17.A /= 4;
														dust86.alpha = 100;
														dust86.noLight = true;
														return;
													}
												}
												else if (this.aiStyle == 44)
												{
													int num349 = 6;
													if (this.type == 228)
													{
														this.velocity *= 0.96f;
														this.alpha += 2;
														if (this.alpha > 200)
														{
															this.Kill();
														}
													}
													else if (this.type == 732)
													{
														num349 = 3;
														this.alpha += 20;
														if (this.alpha > 255)
														{
															this.Kill();
														}
														if (Main.rand.Next(5) == 0)
														{
															Dust dust88 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 150, default(Color), 0.8f);
															dust88.noGravity = true;
															Dust dust89 = dust88;
															Dust dust212 = dust89;
															dust212.velocity *= 1.2f;
														}
														this.rotation = this.velocity.ToRotation();
														Lighting.AddLight(base.Center, 0.3f, 0.6f, 0.8f);
													}
													else if (this.type == 229)
													{
														if (this.ai[0] == 0f)
														{
															SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
														}
														ref float ptr = ref this.ai[0];
														ptr += 1f;
														if (this.ai[0] > 20f)
														{
															ptr = ref this.velocity.Y;
															ptr += 0.3f;
															ptr = ref this.velocity.X;
															ptr *= 0.98f;
														}
													}
													int num1063 = this.frameCounter + 1;
													this.frameCounter = num1063;
													if (num1063 >= num349)
													{
														this.frameCounter = 0;
														num1063 = this.frame + 1;
														this.frame = num1063;
														if (num1063 >= Main.projFrames[this.type])
														{
															this.frame = 0;
															return;
														}
													}
												}
												else if (this.aiStyle == 45)
												{
													if (this.type == 237 || this.type == 243)
													{
														float num350 = this.ai[0];
														float num351 = this.ai[1];
														if (num350 != 0f && num351 != 0f)
														{
															bool flag16 = false;
															bool flag17 = false;
															if (this.velocity.X == 0f || (this.velocity.X < 0f && base.Center.X < num350) || (this.velocity.X > 0f && base.Center.X > num350))
															{
																this.velocity.X = 0f;
																flag16 = true;
															}
															if (this.velocity.Y == 0f || (this.velocity.Y < 0f && base.Center.Y < num351) || (this.velocity.Y > 0f && base.Center.Y > num351))
															{
																this.velocity.Y = 0f;
																flag17 = true;
															}
															if (this.owner == Main.myPlayer && flag16 && flag17)
															{
																this.Kill();
															}
														}
														this.rotation += this.velocity.X * 0.02f;
														int num1063 = this.frameCounter;
														this.frameCounter = num1063 + 1;
														if (this.frameCounter > 4)
														{
															this.frameCounter = 0;
															num1063 = this.frame;
															this.frame = num1063 + 1;
															if (this.frame > 3)
															{
																this.frame = 0;
																return;
															}
														}
													}
													else if (this.type == 238 || this.type == 244)
													{
														bool flag18 = true;
														int num352 = (int)base.Center.X;
														int num353 = (int)(this.position.Y + (float)this.height);
														if (Collision.SolidTiles(new Vector2((float)num352, (float)num353), 2, 20))
														{
															flag18 = false;
														}
														int num1063 = this.frameCounter;
														this.frameCounter = num1063 + 1;
														if (this.frameCounter > 8)
														{
															this.frameCounter = 0;
															num1063 = this.frame;
															this.frame = num1063 + 1;
															if ((!flag18 && this.frame > 2) || this.frame > 5)
															{
																this.frame = 0;
															}
														}
														ref float ptr = ref this.ai[1];
														ptr += 1f;
														if (this.type == 244 && this.ai[1] >= 18000f)
														{
															this.alpha += 5;
															if (this.alpha > 255)
															{
																this.alpha = 255;
																this.Kill();
															}
														}
														else if (this.type == 238 && this.ai[1] >= 18000f)
														{
															this.alpha += 5;
															if (this.alpha > 255)
															{
																this.alpha = 255;
																this.Kill();
															}
														}
														else if (flag18)
														{
															ptr = ref this.ai[0];
															ptr += 1f;
															if (this.type == 244)
															{
																if (this.ai[0] > 10f)
																{
																	this.ai[0] = 0f;
																	if (this.owner == Main.myPlayer)
																	{
																		num352 += Main.rand.Next(-14, 15);
																		Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float)num352, (float)num353, 0f, 5f, 245, this.damage, 0f, this.owner, 0f, 0f, 0f);
																	}
																}
															}
															else if (this.ai[0] > 8f)
															{
																this.ai[0] = 0f;
																if (this.owner == Main.myPlayer)
																{
																	num352 += Main.rand.Next(-14, 15);
																	Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float)num352, (float)num353, 0f, 5f, 239, this.damage, 0f, this.owner, 0f, 0f, 0f);
																}
															}
														}
														ptr = ref this.localAI[0];
														ptr += 1f;
														if (this.localAI[0] < 10f)
														{
															return;
														}
														this.localAI[0] = 0f;
														int num354 = 0;
														int num355 = 0;
														float num356 = 0f;
														int num357 = this.type;
														for (int num358 = 0; num358 < 1000; num358 = num1063 + 1)
														{
															if (Main.projectile[num358].active && Main.projectile[num358].owner == this.owner && Main.projectile[num358].type == num357 && Main.projectile[num358].ai[1] < 18000f)
															{
																num1063 = num354;
																num354 = num1063 + 1;
																if (Main.projectile[num358].ai[1] > num356)
																{
																	num355 = num358;
																	num356 = Main.projectile[num358].ai[1];
																}
															}
															num1063 = num358;
														}
														if (this.type == 244)
														{
															if (num354 > 1)
															{
																Main.projectile[num355].netUpdate = true;
																Main.projectile[num355].ai[1] = 18000f;
																return;
															}
														}
														else if (num354 > 2)
														{
															Main.projectile[num355].netUpdate = true;
															Main.projectile[num355].ai[1] = 18000f;
															return;
														}
													}
													else if (this.type == 239 || this.type == 245 || this.type == 264)
													{
														int num359 = (int)(base.Center.X / 16f);
														int num360 = (int)((this.position.Y + (float)this.height) / 16f);
														if (WorldGen.InWorld(num359, num360, 0) && Main.tile[num359, num360] != null && *Main.tile[num359, num360].liquid == 255 && Main.tile[num359, num360].shimmer() && this.velocity.Y > 0f)
														{
															ref float ptr = ref this.velocity.Y;
															ptr *= -1f;
															this.netUpdate = true;
														}
														if (this.type == 239)
														{
															this.alpha = 50;
															return;
														}
														if (this.type == 245)
														{
															this.alpha = 100;
															return;
														}
														if (this.type == 264)
														{
															this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
															return;
														}
													}
												}
												else if (this.aiStyle == 46)
												{
													int num361 = (int)(base.Center.X / 16f);
													int num362 = (int)(base.Center.Y / 16f);
													if (WorldGen.InWorld(num361, num362, 0) && Main.tile[num361, num362] != null && *Main.tile[num361, num362].liquid > 0 && Main.tile[num361, num362].shimmer())
													{
														this.Kill();
													}
													int num363 = 2400;
													if (this.type == 250)
													{
														Point point2 = base.Center.ToTileCoordinates();
														if (!WorldGen.InWorld(point2.X, point2.Y, 2) || Main.tile[point2.X, point2.Y] == null)
														{
															this.Kill();
															return;
														}
														float ptr;
														if (this.owner == Main.myPlayer)
														{
															ptr = ref this.localAI[0];
															ptr += 1f;
															if (this.localAI[0] > 4f)
															{
																this.localAI[0] = 3f;
																Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, this.velocity.X * 0.001f, this.velocity.Y * 0.001f, 251, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
															}
															if (this.timeLeft > num363)
															{
																this.timeLeft = num363;
															}
														}
														float num364 = 1f;
														if (this.velocity.Y < 0f)
														{
															num364 -= this.velocity.Y / 3f;
														}
														ptr = ref this.ai[0];
														ptr += num364;
														if (this.ai[0] > 30f)
														{
															ptr = ref this.velocity.Y;
															ptr += 0.5f;
															if (this.velocity.Y > 0f)
															{
																ptr = ref this.velocity.X;
																ptr *= 0.95f;
															}
															else
															{
																ptr = ref this.velocity.X;
																ptr *= 1.05f;
															}
														}
														float x3 = this.velocity.X;
														float y3 = this.velocity.Y;
														float num365 = (float)Math.Sqrt((double)(x3 * x3 + y3 * y3));
														num365 = 15.95f * this.scale / num365;
														x3 *= num365;
														y3 *= num365;
														this.velocity.X = x3;
														this.velocity.Y = y3;
														this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
														return;
													}
													else
													{
														if (this.localAI[0] == 0f)
														{
															if (this.velocity.X > 0f)
															{
																this.spriteDirection = -1;
																this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
															}
															else
															{
																this.spriteDirection = 1;
																this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
															}
															this.localAI[0] = 1f;
															this.timeLeft = num363;
														}
														ref float ptr = ref this.velocity.X;
														ptr *= 0.98f;
														ptr = ref this.velocity.Y;
														ptr *= 0.98f;
														if (this.rotation == 0f)
														{
															this.alpha = 255;
															return;
														}
														if (this.timeLeft < 10)
														{
															this.alpha = 255 - (int)(255f * (float)this.timeLeft / 10f);
															return;
														}
														if (this.timeLeft > num363 - 10)
														{
															int num366 = num363 - this.timeLeft;
															this.alpha = 255 - (int)(255f * (float)num366 / 10f);
															return;
														}
														this.alpha = 0;
														return;
													}
												}
												else
												{
													if (this.aiStyle == 47)
													{
														this.AI_047_MagnetSphere();
														return;
													}
													if (this.aiStyle == 48)
													{
														float ptr;
														if (this.type == 255)
														{
															int num1063;
															for (int num367 = 0; num367 < 4; num367 = num1063 + 1)
															{
																Vector2 vector30 = this.position;
																vector30 -= this.velocity * ((float)num367 * 0.25f);
																this.alpha = 255;
																int num368 = Dust.NewDust(vector30, 1, 1, 160, 0f, 0f, 0, default(Color), 1f);
																Main.dust[num368].position = vector30;
																ptr = ref Main.dust[num368].position.X;
																ptr += (float)(this.width / 2);
																ptr = ref Main.dust[num368].position.Y;
																ptr += (float)(this.height / 2);
																Main.dust[num368].scale = (float)Main.rand.Next(70, 110) * 0.013f;
																Dust dust90 = Main.dust[num368];
																Dust dust212 = dust90;
																dust212.velocity *= 0.2f;
																num1063 = num367;
															}
															return;
														}
														if (this.type == 433)
														{
															int num1063;
															for (int num369 = 0; num369 < 2; num369 = num1063 + 1)
															{
																Vector2 vector31 = this.position;
																vector31 -= this.velocity * ((float)num369 * 0.25f);
																this.alpha = 255;
																int num370 = Dust.NewDust(vector31, 1, 1, 160, 0f, 0f, 0, default(Color), 1f);
																Main.dust[num370].position = vector31;
																ptr = ref Main.dust[num370].position.X;
																ptr += (float)(this.width / 2);
																ptr = ref Main.dust[num370].position.Y;
																ptr += (float)(this.height / 2);
																if (Main.rand.Next(2) == 0)
																{
																	Main.dust[num370].color = Color.LimeGreen;
																}
																else
																{
																	Main.dust[num370].color = Color.CornflowerBlue;
																}
																Main.dust[num370].scale = (float)Main.rand.Next(70, 110) * 0.013f;
																Dust dust91 = Main.dust[num370];
																Dust dust212 = dust91;
																dust212.velocity *= 0.2f;
																num1063 = num369;
															}
															return;
														}
														if (this.type == 290)
														{
															if (this.localAI[0] == 0f)
															{
																SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
															}
															ptr = ref this.localAI[0];
															ptr += 1f;
															if (this.localAI[0] > 3f)
															{
																int num1063;
																for (int num371 = 0; num371 < 3; num371 = num1063 + 1)
																{
																	Vector2 vector32 = this.position;
																	vector32 -= this.velocity * ((float)num371 * 0.3334f);
																	this.alpha = 255;
																	int num372 = Dust.NewDust(vector32, 1, 1, 173, 0f, 0f, 0, default(Color), 1f);
																	Main.dust[num372].position = vector32;
																	Main.dust[num372].scale = (float)Main.rand.Next(70, 110) * 0.013f;
																	Dust dust92 = Main.dust[num372];
																	Dust dust212 = dust92;
																	dust212.velocity *= 0.2f;
																	num1063 = num371;
																}
															}
															return;
														}
														if (this.type == 294)
														{
															ptr = ref this.localAI[0];
															ptr += 1f;
															if (this.localAI[0] > 9f)
															{
																int num1063;
																for (int num373 = 0; num373 < 4; num373 = num1063 + 1)
																{
																	Vector2 vector33 = this.position;
																	vector33 -= this.velocity * ((float)num373 * 0.25f);
																	this.alpha = 255;
																	int num374 = Dust.NewDust(vector33, 1, 1, 173, 0f, 0f, 0, default(Color), 1f);
																	Main.dust[num374].position = vector33;
																	Main.dust[num374].scale = (float)Main.rand.Next(70, 110) * 0.013f;
																	Dust dust93 = Main.dust[num374];
																	Dust dust212 = dust93;
																	dust212.velocity *= 0.2f;
																	num1063 = num373;
																}
															}
															return;
														}
														ptr = ref this.localAI[0];
														ptr += 1f;
														if (this.localAI[0] > 3f)
														{
															int num1063;
															for (int num375 = 0; num375 < 4; num375 = num1063 + 1)
															{
																Vector2 vector34 = this.position;
																vector34 -= this.velocity * ((float)num375 * 0.25f);
																this.alpha = 255;
																int num376 = Dust.NewDust(vector34, 1, 1, 162, 0f, 0f, 0, default(Color), 1f);
																Main.dust[num376].position = vector34;
																ptr = ref Main.dust[num376].position.X;
																ptr += (float)(this.width / 2);
																ptr = ref Main.dust[num376].position.Y;
																ptr += (float)(this.height / 2);
																Main.dust[num376].scale = (float)Main.rand.Next(70, 110) * 0.013f;
																Dust dust94 = Main.dust[num376];
																Dust dust212 = dust94;
																dust212.velocity *= 0.2f;
																num1063 = num375;
															}
															return;
														}
													}
													else if (this.aiStyle == 49)
													{
														if (this.ai[0] == -2f)
														{
															this.hostile = true;
															this.Kill();
															return;
														}
														if (this.ai[0] == -3f)
														{
															this.Kill();
															return;
														}
														if (this.soundDelay == 0)
														{
															this.soundDelay = 3000;
															SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
														}
														if (this.ai[0] >= 0f)
														{
															if (this.velocity.X > 0f)
															{
																this.direction = 1;
															}
															else if (this.velocity.X < 0f)
															{
																this.direction = -1;
															}
															this.spriteDirection = this.direction;
															ref float ptr = ref this.ai[0];
															ptr += 1f;
															this.rotation += this.velocity.X * 0.05f + (float)this.direction * 0.05f;
															if (this.ai[0] >= 18f)
															{
																ptr = ref this.velocity.Y;
																ptr += 0.28f;
																ptr = ref this.velocity.X;
																ptr *= 0.99f;
															}
															if ((double)this.velocity.Y > 15.9)
															{
																this.velocity.Y = 15.9f;
															}
															if (this.ai[0] <= 2f)
															{
																return;
															}
															this.alpha = 0;
															if (this.ai[0] == 3f)
															{
																int num1063;
																for (int num377 = 0; num377 < 10; num377 = num1063 + 1)
																{
																	int num378 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
																	Dust dust95 = Main.dust[num378];
																	Dust dust212 = dust95;
																	dust212.velocity *= 0.5f;
																	dust95 = Main.dust[num378];
																	dust212 = dust95;
																	dust212.velocity += this.velocity * 0.1f;
																	num1063 = num377;
																}
																for (int num379 = 0; num379 < 5; num379 = num1063 + 1)
																{
																	int num380 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
																	Main.dust[num380].noGravity = true;
																	Dust dust96 = Main.dust[num380];
																	Dust dust212 = dust96;
																	dust212.velocity *= 3f;
																	dust96 = Main.dust[num380];
																	dust212 = dust96;
																	dust212.velocity += this.velocity * 0.2f;
																	num380 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
																	dust96 = Main.dust[num380];
																	dust212 = dust96;
																	dust212.velocity *= 2f;
																	dust96 = Main.dust[num380];
																	dust212 = dust96;
																	dust212.velocity += this.velocity * 0.3f;
																	num1063 = num379;
																}
																for (int num381 = 0; num381 < 1; num381 = num1063 + 1)
																{
																	int num382 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
																	Gore gore5 = Main.gore[num382];
																	Gore gore8 = gore5;
																	gore8.position += this.velocity * 1.25f;
																	Main.gore[num382].scale = 1.5f;
																	gore5 = Main.gore[num382];
																	gore8 = gore5;
																	gore8.velocity += this.velocity * 0.5f;
																	gore5 = Main.gore[num382];
																	gore8 = gore5;
																	gore8.velocity *= 0.02f;
																	num1063 = num381;
																}
																return;
															}
														}
														else if (this.ai[0] == -1f)
														{
															this.rotation = 0f;
															ref float ptr = ref this.velocity.X;
															ptr *= 0.95f;
															ptr = ref this.velocity.Y;
															ptr += 0.2f;
															return;
														}
													}
													else if (this.aiStyle == 50)
													{
														float ptr;
														if (this.type == 291)
														{
															if (this.localAI[0] == 0f)
															{
																SoundEngine.PlaySound(SoundID.Item20, new Vector2?(this.position), null);
																ptr = ref this.localAI[0];
																ptr += 1f;
															}
															bool flag19 = false;
															bool flag20 = false;
															if (this.velocity.X < 0f && this.position.X < this.ai[0])
															{
																flag19 = true;
															}
															if (this.velocity.X > 0f && this.position.X > this.ai[0])
															{
																flag19 = true;
															}
															if (this.velocity.Y < 0f && this.position.Y < this.ai[1])
															{
																flag20 = true;
															}
															if (this.velocity.Y > 0f && this.position.Y > this.ai[1])
															{
																flag20 = true;
															}
															if (flag19 && flag20)
															{
																this.Kill();
															}
															int num1063;
															for (int num383 = 0; num383 < 10; num383 = num1063 + 1)
															{
																int num384 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.2f);
																Main.dust[num384].noGravity = true;
																Dust dust97 = Main.dust[num384];
																Dust dust212 = dust97;
																dust212.velocity *= 0.5f;
																dust97 = Main.dust[num384];
																dust212 = dust97;
																dust212.velocity += this.velocity * 0.1f;
																num1063 = num383;
															}
															return;
														}
														if (this.type == 295)
														{
															int num1063;
															for (int num385 = 0; num385 < 8; num385 = num1063 + 1)
															{
																int num386 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.2f);
																Main.dust[num386].noGravity = true;
																Dust dust98 = Main.dust[num386];
																Dust dust212 = dust98;
																dust212.velocity *= 0.5f;
																dust98 = Main.dust[num386];
																dust212 = dust98;
																dust212.velocity += this.velocity * 0.1f;
																num1063 = num385;
															}
															return;
														}
														if (this.localAI[0] == 0f)
														{
															SoundEngine.PlaySound(SoundID.Item74, new Vector2?(this.position), null);
															ptr = ref this.localAI[0];
															ptr += 1f;
														}
														ptr = ref this.ai[0];
														ptr += 1f;
														if (this.type == 296)
														{
															ptr = ref this.ai[0];
															ptr += 3f;
														}
														float num387 = 25f;
														if (this.ai[0] > 540f)
														{
															num387 -= (this.ai[0] - 180f) / 2f;
														}
														if (num387 <= 0f)
														{
															num387 = 0f;
															this.Kill();
														}
														if (this.type == 296)
														{
															num387 *= 0.7f;
														}
														int num388 = 0;
														while ((float)num388 < num387)
														{
															float num389 = (float)Main.rand.Next(-10, 11);
															float num390 = (float)Main.rand.Next(-10, 11);
															float num391 = (float)Main.rand.Next(3, 9);
															float num392 = (float)Math.Sqrt((double)(num389 * num389 + num390 * num390));
															num392 = num391 / num392;
															num389 *= num392;
															num390 *= num392;
															int num393 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.5f);
															Main.dust[num393].noGravity = true;
															Main.dust[num393].position.X = base.Center.X;
															Main.dust[num393].position.Y = base.Center.Y;
															ptr = ref Main.dust[num393].position.X;
															ptr += (float)Main.rand.Next(-10, 11);
															ptr = ref Main.dust[num393].position.Y;
															ptr += (float)Main.rand.Next(-10, 11);
															Main.dust[num393].velocity.X = num389;
															Main.dust[num393].velocity.Y = num390;
															int num1063 = num388;
															num388 = num1063 + 1;
														}
														return;
													}
													else if (this.aiStyle == 51)
													{
														if (this.type == 297)
														{
															ref float ptr = ref this.localAI[0];
															ptr += 1f;
															if (this.localAI[0] > 4f)
															{
																int num1063;
																for (int num394 = 0; num394 < 5; num394 = num1063 + 1)
																{
																	int num395 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 2f);
																	Main.dust[num395].noGravity = true;
																	Dust dust99 = Main.dust[num395];
																	Dust dust212 = dust99;
																	dust212.velocity *= 0f;
																	num1063 = num394;
																}
															}
														}
														else
														{
															if (this.localAI[0] == 0f)
															{
																SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
																ref float ptr = ref this.localAI[0];
																ptr += 1f;
															}
															int num1063;
															for (int num396 = 0; num396 < 9; num396 = num1063 + 1)
															{
																int num397 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
																Main.dust[num397].noGravity = true;
																Dust dust100 = Main.dust[num397];
																Dust dust212 = dust100;
																dust212.velocity *= 0f;
																num1063 = num396;
															}
														}
														float num398 = base.Center.X;
														float num399 = base.Center.Y;
														float num400 = 400f;
														bool flag21 = false;
														if (this.type == 297)
														{
															int num1063;
															for (int num401 = 0; num401 < 200; num401 = num1063 + 1)
															{
																if (Main.npc[num401].CanBeChasedBy(this, false) && base.Distance(Main.npc[num401].Center) < num400 && Collision.CanHit(base.Center, 1, 1, Main.npc[num401].Center, 1, 1))
																{
																	float num402 = Main.npc[num401].position.X + (float)(Main.npc[num401].width / 2);
																	float num403 = Main.npc[num401].position.Y + (float)(Main.npc[num401].height / 2);
																	float num404 = Math.Abs(this.position.X + (float)(this.width / 2) - num402) + Math.Abs(this.position.Y + (float)(this.height / 2) - num403);
																	if (num404 < num400)
																	{
																		num400 = num404;
																		num398 = num402;
																		num399 = num403;
																		flag21 = true;
																	}
																}
																num1063 = num401;
															}
														}
														else
														{
															num400 = 200f;
															int num1063;
															for (int num405 = 0; num405 < 255; num405 = num1063 + 1)
															{
																if (Main.player[num405].active && !Main.player[num405].dead)
																{
																	float num406 = Main.player[num405].position.X + (float)(Main.player[num405].width / 2);
																	float num407 = Main.player[num405].position.Y + (float)(Main.player[num405].height / 2);
																	float num408 = Math.Abs(this.position.X + (float)(this.width / 2) - num406) + Math.Abs(this.position.Y + (float)(this.height / 2) - num407);
																	if (num408 < num400)
																	{
																		num400 = num408;
																		num398 = num406;
																		num399 = num407;
																		flag21 = true;
																	}
																}
																num1063 = num405;
															}
														}
														if (flag21)
														{
															float num409 = 3f;
															if (this.type == 297)
															{
																num409 = 6f;
															}
															Vector2 vector35;
															vector35..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
															float num410 = num398 - vector35.X;
															float num411 = num399 - vector35.Y;
															float num412 = (float)Math.Sqrt((double)(num410 * num410 + num411 * num411));
															num412 = num409 / num412;
															num410 *= num412;
															num411 *= num412;
															if (this.type == 297)
															{
																this.velocity.X = (this.velocity.X * 20f + num410) / 21f;
																this.velocity.Y = (this.velocity.Y * 20f + num411) / 21f;
																return;
															}
															this.velocity.X = (this.velocity.X * 100f + num410) / 101f;
															this.velocity.Y = (this.velocity.Y * 100f + num411) / 101f;
															return;
														}
													}
													else if (this.aiStyle == 52)
													{
														int num413 = (int)this.ai[0];
														float num414 = 4f;
														Vector2 vector36;
														vector36..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num415 = Main.player[num413].Center.X - vector36.X;
														float num416 = Main.player[num413].Center.Y - vector36.Y;
														float num417 = (float)Math.Sqrt((double)(num415 * num415 + num416 * num416));
														if (num417 < 50f && this.position.X < Main.player[num413].position.X + (float)Main.player[num413].width && this.position.X + (float)this.width > Main.player[num413].position.X && this.position.Y < Main.player[num413].position.Y + (float)Main.player[num413].height && this.position.Y + (float)this.height > Main.player[num413].position.Y)
														{
															if (this.owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
															{
																int num418 = (int)this.ai[1];
																Main.player[num413].HealEffect(num418, false);
																Player player3 = Main.player[num413];
																Player player13 = player3;
																player13.statLife += num418;
																if (Main.player[num413].statLife > Main.player[num413].statLifeMax2)
																{
																	Main.player[num413].statLife = Main.player[num413].statLifeMax2;
																}
																NetMessage.SendData(66, -1, -1, null, num413, (float)num418, 0f, 0f, 0, 0, 0);
															}
															this.Kill();
														}
														num417 = num414 / num417;
														num415 *= num417;
														num416 *= num417;
														this.velocity.X = (this.velocity.X * 15f + num415) / 16f;
														this.velocity.Y = (this.velocity.Y * 15f + num416) / 16f;
														int num1063;
														if (this.type == 305)
														{
															for (int num419 = 0; num419 < 3; num419 = num1063 + 1)
															{
																float num420 = this.velocity.X * 0.334f * (float)num419;
																float num421 = (0f - this.velocity.Y * 0.334f) * (float)num419;
																int num422 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 183, 0f, 0f, 100, default(Color), 1.1f);
																Main.dust[num422].noGravity = true;
																Dust dust101 = Main.dust[num422];
																Dust dust212 = dust101;
																dust212.velocity *= 0f;
																ref float ptr = ref Main.dust[num422].position.X;
																ptr -= num420;
																ptr = ref Main.dust[num422].position.Y;
																ptr -= num421;
																num1063 = num419;
															}
															return;
														}
														for (int num423 = 0; num423 < 5; num423 = num1063 + 1)
														{
															float num424 = this.velocity.X * 0.2f * (float)num423;
															float num425 = (0f - this.velocity.Y * 0.2f) * (float)num423;
															int num426 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
															Main.dust[num426].noGravity = true;
															Dust dust102 = Main.dust[num426];
															Dust dust212 = dust102;
															dust212.velocity *= 0f;
															ref float ptr = ref Main.dust[num426].position.X;
															ptr -= num424;
															ptr = ref Main.dust[num426].position.Y;
															ptr -= num425;
															num1063 = num423;
														}
														return;
													}
													else if (this.aiStyle == 53)
													{
														if (this.localAI[0] == 0f)
														{
															this.localAI[1] = 1f;
															this.localAI[0] = 1f;
															this.ai[0] = 120f;
															int num427 = 80;
															SoundEngine.PlaySound(SoundID.Item46, new Vector2?(this.position), null);
															if (this.type == 308)
															{
																int num1063;
																for (int num428 = 0; num428 < num427; num428 = num1063 + 1)
																{
																	int num429 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0f, 0f, 0, default(Color), 1f);
																	Dust dust103 = Main.dust[num429];
																	Dust dust212 = dust103;
																	dust212.velocity *= 2f;
																	Main.dust[num429].noGravity = true;
																	dust103 = Main.dust[num429];
																	dust212 = dust103;
																	dust212.scale *= 1.15f;
																	num1063 = num428;
																}
															}
															if (this.type == 377)
															{
																this.frame = 4;
																num427 = 40;
																int num1063;
																for (int num430 = 0; num430 < num427; num430 = num1063 + 1)
																{
																	int num431 = Dust.NewDust(this.position + Vector2.UnitY * 16f, this.width, this.height - 16, 171, 0f, 0f, 100, default(Color), 1f);
																	Main.dust[num431].scale = (float)Main.rand.Next(1, 10) * 0.1f;
																	Main.dust[num431].noGravity = true;
																	Main.dust[num431].fadeIn = 1.5f;
																	Dust dust104 = Main.dust[num431];
																	Dust dust212 = dust104;
																	dust212.velocity *= 0.75f;
																	num1063 = num430;
																}
															}
															if (this.type == 966)
															{
																this.ai[1] = -1f;
																this.frame = 0;
																num427 = 30;
																int num432 = 25;
																int num433 = 30;
																int num1063;
																for (int num434 = 0; num434 < num427; num434 = num1063 + 1)
																{
																	int num435 = Dust.NewDust(base.Center - new Vector2((float)num432, (float)num433), num432 * 2, num433 * 2, 219, 0f, 0f, 0, default(Color), 1f);
																	Dust dust105 = Main.dust[num435];
																	Dust dust212 = dust105;
																	dust212.velocity *= 2f;
																	Main.dust[num435].noGravity = true;
																	dust105 = Main.dust[num435];
																	dust212 = dust105;
																	dust212.scale *= 0.5f;
																	num1063 = num434;
																}
															}
														}
														this.velocity.X = 0f;
														ref float ptr = ref this.velocity.Y;
														ptr += 0.2f;
														if (this.velocity.Y > 16f)
														{
															this.velocity.Y = 16f;
														}
														bool flag22 = false;
														float num436 = base.Center.X;
														float num437 = base.Center.Y;
														float num438 = 1000f;
														int num439 = -1;
														NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
														if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
														{
															float num440 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
															float num441 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
															float num442 = Math.Abs(this.position.X + (float)(this.width / 2) - num440) + Math.Abs(this.position.Y + (float)(this.height / 2) - num441);
															if (num442 < num438 && Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
															{
																num438 = num442;
																num436 = num440;
																num437 = num441;
																flag22 = true;
																num439 = ownerMinionAttackTargetNPC.whoAmI;
															}
														}
														if (!flag22)
														{
															int num1063;
															for (int num443 = 0; num443 < 200; num443 = num1063 + 1)
															{
																if (Main.npc[num443].CanBeChasedBy(this, false))
																{
																	float num444 = Main.npc[num443].position.X + (float)(Main.npc[num443].width / 2);
																	float num445 = Main.npc[num443].position.Y + (float)(Main.npc[num443].height / 2);
																	float num446 = Math.Abs(this.position.X + (float)(this.width / 2) - num444) + Math.Abs(this.position.Y + (float)(this.height / 2) - num445);
																	if (num446 < num438 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num443].position, Main.npc[num443].width, Main.npc[num443].height))
																	{
																		num438 = num446;
																		num436 = num444;
																		num437 = num445;
																		flag22 = true;
																		num439 = Main.npc[num443].whoAmI;
																	}
																}
																num1063 = num443;
															}
														}
														if (flag22)
														{
															if (this.type == 966 && this.ai[1] != (float)num439)
															{
																this.ai[1] = (float)num439;
																this.netUpdate = true;
															}
															float num447 = num436;
															float num448 = num437;
															num436 -= base.Center.X;
															num437 -= base.Center.Y;
															int num449 = 0;
															if (this.type != 966)
															{
																if (this.frameCounter > 0)
																{
																	int num1063 = this.frameCounter;
																	this.frameCounter = num1063 - 1;
																}
																if (this.frameCounter <= 0)
																{
																	int num450 = this.spriteDirection;
																	if (num436 < 0f)
																	{
																		this.spriteDirection = -1;
																	}
																	else
																	{
																		this.spriteDirection = 1;
																	}
																	num449 = ((num437 <= 0f) ? ((Math.Abs(num437) > Math.Abs(num436) * 3f) ? 4 : ((Math.Abs(num437) > Math.Abs(num436) * 2f) ? 3 : ((Math.Abs(num436) <= Math.Abs(num437) * 3f) ? ((Math.Abs(num436) > Math.Abs(num437) * 2f) ? 1 : 2) : 0))) : 0);
																	int num451 = this.frame;
																	if (this.type == 308)
																	{
																		this.frame = num449 * 2;
																	}
																	else if (this.type == 377)
																	{
																		this.frame = num449;
																	}
																	if (this.ai[0] > 40f && this.localAI[1] == 0f && this.type == 308)
																	{
																		int num1063 = this.frame;
																		this.frame = num1063 + 1;
																	}
																	if (num451 != this.frame || num450 != this.spriteDirection)
																	{
																		this.frameCounter = 8;
																		if (this.ai[0] <= 0f)
																		{
																			this.frameCounter = 4;
																		}
																	}
																}
															}
															if (this.ai[0] <= 0f)
															{
																float num452 = 60f;
																if (this.type == 966)
																{
																	num452 = 90f;
																}
																this.localAI[1] = 0f;
																this.ai[0] = num452;
																this.netUpdate = true;
																if (Main.myPlayer == this.owner)
																{
																	float num453 = 6f;
																	int num454 = 309;
																	if (this.type == 308)
																	{
																		num454 = 309;
																		num453 = 9f;
																	}
																	if (this.type == 377)
																	{
																		num454 = 378;
																		num453 = 9f;
																	}
																	if (this.type == 966)
																	{
																		num454 = 967;
																		num453 = 12.5f;
																	}
																	Vector2 vector37;
																	vector37..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
																	if (this.type == 966)
																	{
																		ptr = ref vector37.Y;
																		ptr -= 16f;
																	}
																	else
																	{
																		switch (num449)
																		{
																		case 0:
																			ptr = ref vector37.Y;
																			ptr += 12f;
																			ptr = ref vector37.X;
																			ptr += (float)(24 * this.spriteDirection);
																			break;
																		case 1:
																			ptr = ref vector37.Y;
																			ptr += 0f;
																			ptr = ref vector37.X;
																			ptr += (float)(24 * this.spriteDirection);
																			break;
																		case 2:
																			ptr = ref vector37.Y;
																			ptr -= 2f;
																			ptr = ref vector37.X;
																			ptr += (float)(24 * this.spriteDirection);
																			break;
																		case 3:
																			ptr = ref vector37.Y;
																			ptr -= 6f;
																			ptr = ref vector37.X;
																			ptr += (float)(14 * this.spriteDirection);
																			break;
																		case 4:
																			ptr = ref vector37.Y;
																			ptr -= 14f;
																			ptr = ref vector37.X;
																			ptr += (float)(2 * this.spriteDirection);
																			break;
																		}
																	}
																	if (this.type != 966 && this.spriteDirection < 0)
																	{
																		ptr = ref vector37.X;
																		ptr += 10f;
																	}
																	float num455 = num447 - vector37.X;
																	float num456 = num448 - vector37.Y;
																	float num457 = (float)Math.Sqrt((double)(num455 * num455 + num456 * num456));
																	num457 = num453 / num457;
																	num455 *= num457;
																	num456 *= num457;
																	int num458 = this.damage;
																	int num459 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector37.X, vector37.Y, num455, num456, num454, num458, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
																}
															}
														}
														else
														{
															if (this.type == 966 && this.ai[1] != -1f)
															{
																this.ai[1] = -1f;
																this.netUpdate = true;
															}
															if (this.type != 966 && this.ai[0] <= 60f && (this.frame == 1 || this.frame == 3 || this.frame == 5 || this.frame == 7 || this.frame == 9))
															{
																int num1063 = this.frame;
																this.frame = num1063 - 1;
															}
														}
														if (this.ai[0] > 0f)
														{
															ptr = ref this.ai[0];
															ptr -= 1f;
															return;
														}
													}
													else if (this.aiStyle == 54)
													{
														if (this.type == 317)
														{
															if (Main.player[Main.myPlayer].dead)
															{
																Main.player[Main.myPlayer].raven = false;
															}
															if (Main.player[Main.myPlayer].raven)
															{
																this.timeLeft = 2;
															}
														}
														int num1063;
														for (int num460 = 0; num460 < 1000; num460 = num1063 + 1)
														{
															if (num460 != this.whoAmI && Main.projectile[num460].active && Main.projectile[num460].owner == this.owner && Main.projectile[num460].type == this.type && Math.Abs(this.position.X - Main.projectile[num460].position.X) + Math.Abs(this.position.Y - Main.projectile[num460].position.Y) < (float)this.width)
															{
																if (this.position.X < Main.projectile[num460].position.X)
																{
																	ref float ptr = ref this.velocity.X;
																	ptr -= 0.05f;
																}
																else
																{
																	ref float ptr = ref this.velocity.X;
																	ptr += 0.05f;
																}
																if (this.position.Y < Main.projectile[num460].position.Y)
																{
																	ref float ptr = ref this.velocity.Y;
																	ptr -= 0.05f;
																}
																else
																{
																	ref float ptr = ref this.velocity.Y;
																	ptr += 0.05f;
																}
															}
															num1063 = num460;
														}
														float num461 = this.position.X;
														float num462 = this.position.Y;
														float num463 = 900f;
														bool flag23 = false;
														int num464 = 500;
														if (this.ai[1] != 0f || this.friendly)
														{
															num464 = 1400;
														}
														if (Math.Abs(base.Center.X - Main.player[this.owner].Center.X) + Math.Abs(base.Center.Y - Main.player[this.owner].Center.Y) > (float)num464)
														{
															this.ai[0] = 1f;
														}
														if (this.ai[0] == 0f)
														{
															this.tileCollide = true;
															NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
															if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
															{
																float num465 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
																float num466 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
																float num467 = Math.Abs(this.position.X + (float)(this.width / 2) - num465) + Math.Abs(this.position.Y + (float)(this.height / 2) - num466);
																if (num467 < num463 && Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
																{
																	num463 = num467;
																	num461 = num465;
																	num462 = num466;
																	flag23 = true;
																}
															}
															if (!flag23)
															{
																for (int num468 = 0; num468 < 200; num468 = num1063 + 1)
																{
																	if (Main.npc[num468].CanBeChasedBy(this, false))
																	{
																		float num469 = Main.npc[num468].position.X + (float)(Main.npc[num468].width / 2);
																		float num470 = Main.npc[num468].position.Y + (float)(Main.npc[num468].height / 2);
																		float num471 = Math.Abs(this.position.X + (float)(this.width / 2) - num469) + Math.Abs(this.position.Y + (float)(this.height / 2) - num470);
																		if (num471 < num463 && Collision.CanHit(this.position, this.width, this.height, Main.npc[num468].position, Main.npc[num468].width, Main.npc[num468].height))
																		{
																			num463 = num471;
																			num461 = num469;
																			num462 = num470;
																			flag23 = true;
																		}
																	}
																	num1063 = num468;
																}
															}
														}
														else
														{
															this.tileCollide = false;
														}
														if (!flag23)
														{
															this.friendly = true;
															float num472 = 8f;
															if (this.ai[0] == 1f)
															{
																num472 = 12f;
															}
															Vector2 vector38;
															vector38..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
															float num473 = Main.player[this.owner].Center.X - vector38.X;
															float num474 = Main.player[this.owner].Center.Y - vector38.Y - 60f;
															float num475 = (float)Math.Sqrt((double)(num473 * num473 + num474 * num474));
															if (num475 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(this.position, this.width, this.height))
															{
																this.ai[0] = 0f;
															}
															if (num475 > 2000f)
															{
																this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
																this.position.Y = Main.player[this.owner].Center.Y - (float)(this.width / 2);
															}
															if (this.type == 317 && num475 > 100f)
															{
																num472 = 12f;
																if (this.ai[0] == 1f)
																{
																	num472 = 15f;
																}
															}
															if (num475 > 70f)
															{
																num475 = num472 / num475;
																num473 *= num475;
																num474 *= num475;
																this.velocity.X = (this.velocity.X * 20f + num473) / 21f;
																this.velocity.Y = (this.velocity.Y * 20f + num474) / 21f;
															}
															else
															{
																if (this.velocity.X == 0f && this.velocity.Y == 0f)
																{
																	this.velocity.X = -0.15f;
																	this.velocity.Y = -0.05f;
																}
																this.velocity *= 1.01f;
															}
															this.friendly = false;
															this.rotation = this.velocity.X * 0.05f;
															num1063 = this.frameCounter;
															this.frameCounter = num1063 + 1;
															if (this.frameCounter >= 4)
															{
																this.frameCounter = 0;
																num1063 = this.frame;
																this.frame = num1063 + 1;
															}
															if (this.frame > 3)
															{
																this.frame = 0;
															}
															if ((double)Math.Abs(this.velocity.X) > 0.2)
															{
																this.spriteDirection = -this.direction;
															}
															return;
														}
														if (this.ai[1] == -1f)
														{
															this.ai[1] = 17f;
														}
														if (this.ai[1] > 0f)
														{
															ref float ptr = ref this.ai[1];
															ptr -= 1f;
														}
														if (this.ai[1] == 0f)
														{
															this.friendly = true;
															float num476 = 16f;
															Vector2 vector39;
															vector39..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
															float num477 = num461 - vector39.X;
															float num478 = num462 - vector39.Y;
															float num479 = (float)Math.Sqrt((double)(num477 * num477 + num478 * num478));
															if (num479 < 100f)
															{
																num476 = 10f;
															}
															num479 = num476 / num479;
															num477 *= num479;
															num478 *= num479;
															this.velocity.X = (this.velocity.X * 14f + num477) / 15f;
															this.velocity.Y = (this.velocity.Y * 14f + num478) / 15f;
														}
														else
														{
															this.friendly = false;
															if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 10f)
															{
																this.velocity *= 1.05f;
															}
														}
														this.rotation = this.velocity.X * 0.05f;
														num1063 = this.frameCounter;
														this.frameCounter = num1063 + 1;
														if (this.frameCounter >= 4)
														{
															this.frameCounter = 0;
															num1063 = this.frame;
															this.frame = num1063 + 1;
														}
														if (this.frame < 4)
														{
															this.frame = 4;
														}
														if (this.frame > 7)
														{
															this.frame = 4;
														}
														if ((double)Math.Abs(this.velocity.X) > 0.2)
														{
															this.spriteDirection = -this.direction;
															return;
														}
													}
													else if (this.aiStyle == 55)
													{
														int num1063 = this.frameCounter;
														this.frameCounter = num1063 + 1;
														if (this.frameCounter > 0)
														{
															num1063 = this.frame;
															this.frame = num1063 + 1;
															this.frameCounter = 0;
															if (this.frame > 2)
															{
																this.frame = 0;
															}
														}
														if (this.velocity.X < 0f)
														{
															this.spriteDirection = -1;
															this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
														}
														else
														{
															this.spriteDirection = 1;
															this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
														}
														if (this.ai[0] >= 0f && this.ai[0] < 200f)
														{
															int num480 = (int)this.ai[0];
															NPC nPC2 = Main.npc[num480];
															if (nPC2.CanBeChasedBy(this, false) && !NPCID.Sets.CountsAsCritter[nPC2.type])
															{
																float num481 = 8f;
																Vector2 center2 = base.Center;
																float num482 = nPC2.Center.X - center2.X;
																float num483 = nPC2.Center.Y - center2.Y;
																float num484 = (float)Math.Sqrt((double)(num482 * num482 + num483 * num483));
																num484 = num481 / num484;
																num482 *= num484;
																num483 *= num484;
																this.velocity.X = (this.velocity.X * 14f + num482) / 15f;
																this.velocity.Y = (this.velocity.Y * 14f + num483) / 15f;
															}
															else
															{
																float num485 = 1000f;
																for (int num486 = 0; num486 < 200; num486 = num1063 + 1)
																{
																	NPC nPC3 = Main.npc[num486];
																	if (nPC3.CanBeChasedBy(this, false) && !NPCID.Sets.CountsAsCritter[nPC3.type])
																	{
																		float x4 = nPC3.Center.X;
																		float y4 = nPC3.Center.Y;
																		float num487 = Math.Abs(base.Center.X - x4) + Math.Abs(base.Center.Y - y4);
																		if (num487 < num485 && Collision.CanHit(this.position, this.width, this.height, nPC3.position, nPC3.width, nPC3.height))
																		{
																			num485 = num487;
																			this.ai[0] = (float)num486;
																		}
																	}
																	num1063 = num486;
																}
															}
															int num488 = 8;
															int num489 = Dust.NewDust(new Vector2(this.position.X + (float)num488, this.position.Y + (float)num488), this.width - num488 * 2, this.height - num488 * 2, 6, 0f, 0f, 0, default(Color), 1f);
															Dust dust106 = Main.dust[num489];
															Dust dust212 = dust106;
															dust212.velocity *= 0.5f;
															dust106 = Main.dust[num489];
															dust212 = dust106;
															dust212.velocity += this.velocity * 0.5f;
															Main.dust[num489].noGravity = true;
															Main.dust[num489].noLight = true;
															Main.dust[num489].scale = 1.4f;
															return;
														}
														this.Kill();
														return;
													}
													else
													{
														if (this.aiStyle == 56)
														{
															if (this.localAI[0] == 0f)
															{
																this.localAI[0] = 1f;
																this.rotation = this.ai[0];
																this.spriteDirection = -(int)this.ai[1];
															}
															if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 16f)
															{
																this.velocity *= 1.05f;
															}
															if (this.velocity.X < 0f)
															{
																this.direction = -1;
															}
															else
															{
																this.direction = 1;
															}
															this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.025f * (float)this.direction;
															return;
														}
														if (this.aiStyle == 57)
														{
															ref float ptr = ref this.ai[0];
															ptr += 1f;
															if (this.ai[0] > 30f)
															{
																this.ai[0] = 30f;
																ptr = ref this.velocity.Y;
																ptr += 0.25f;
																if (this.velocity.Y > 16f)
																{
																	this.velocity.Y = 16f;
																}
																ptr = ref this.velocity.X;
																ptr *= 0.995f;
															}
															this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
															this.alpha -= 50;
															if (this.alpha < 0)
															{
																this.alpha = 0;
															}
															if (this.owner == Main.myPlayer)
															{
																if (this.localAI[1] == 0f)
																{
																	this.localAI[1] = (float)Main.rand.Next(7);
																}
																ptr = ref this.localAI[0];
																ref float ptr18 = ref ptr;
																float num1064 = ptr;
																ptr18 = num1064 + 1f;
																int num490 = 8;
																if (this.localAI[1] > 0f)
																{
																	num490 += (int)this.localAI[1];
																}
																if (this.localAI[0] >= (float)num490)
																{
																	this.localAI[0] = 0f;
																	this.localAI[1] = -1f;
																	Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 344, (int)((float)this.damage * 0.7f), this.knockBack * 0.55f, this.owner, 0f, (float)Main.rand.Next(3), 0f);
																	return;
																}
															}
														}
														else
														{
															if (this.aiStyle == 58)
															{
																this.alpha -= 50;
																if (this.alpha < 0)
																{
																	this.alpha = 0;
																}
																if (this.ai[0] == 0f)
																{
																	this.frame = 0;
																	ref float ptr = ref this.ai[1];
																	ptr += 1f;
																	if (this.ai[1] > 30f)
																	{
																		ptr = ref this.velocity.Y;
																		ptr += 0.1f;
																	}
																	if (this.velocity.Y >= 0f)
																	{
																		this.ai[0] = 1f;
																	}
																}
																if (this.ai[0] == 1f)
																{
																	this.frame = 1;
																	ref float ptr = ref this.velocity.Y;
																	ptr += 0.1f;
																	if (this.velocity.Y > 3f)
																	{
																		this.velocity.Y = 3f;
																	}
																	ptr = ref this.velocity.X;
																	ptr *= 0.99f;
																}
																this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
																return;
															}
															if (this.aiStyle == 59)
															{
																ref float ptr = ref this.ai[1];
																ptr += 1f;
																int num1063;
																if (this.ai[1] >= 60f)
																{
																	this.friendly = true;
																	int num491 = (int)this.ai[0];
																	if (Main.myPlayer == this.owner && (num491 == -1 || !Main.npc[num491].CanBeChasedBy(this, false)))
																	{
																		int[] array = new int[200];
																		int num492 = 0;
																		for (int num493 = 0; num493 < 200; num493 = num1063 + 1)
																		{
																			if (Main.npc[num493].CanBeChasedBy(this, false))
																			{
																				float num494 = Math.Abs(Main.npc[num493].position.X + (float)(Main.npc[num493].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.npc[num493].position.Y + (float)(Main.npc[num493].height / 2) - this.position.Y + (float)(this.height / 2));
																				if (num494 < 800f)
																				{
																					array[num492] = num493;
																					num1063 = num492;
																					num492 = num1063 + 1;
																				}
																			}
																			num1063 = num493;
																		}
																		if (num492 == 0)
																		{
																			this.Kill();
																			return;
																		}
																		num491 = array[Main.rand.Next(num492)];
																		this.ai[0] = (float)num491;
																		this.netUpdate = true;
																	}
																	if (num491 != -1)
																	{
																		float num495 = 4f;
																		Vector2 vector40;
																		vector40..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
																		float num496 = Main.npc[num491].Center.X - vector40.X;
																		float num497 = Main.npc[num491].Center.Y - vector40.Y;
																		float num498 = (float)Math.Sqrt((double)(num496 * num496 + num497 * num497));
																		num498 = num495 / num498;
																		num496 *= num498;
																		num497 *= num498;
																		int num499 = 30;
																		this.velocity.X = (this.velocity.X * (float)(num499 - 1) + num496) / (float)num499;
																		this.velocity.Y = (this.velocity.Y * (float)(num499 - 1) + num497) / (float)num499;
																	}
																}
																for (int num500 = 0; num500 < 5; num500 = num1063 + 1)
																{
																	float num501 = this.velocity.X * 0.2f * (float)num500;
																	float num502 = (0f - this.velocity.Y * 0.2f) * (float)num500;
																	int num503 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.3f);
																	Main.dust[num503].noGravity = true;
																	Dust dust107 = Main.dust[num503];
																	Dust dust212 = dust107;
																	dust212.velocity *= 0f;
																	ptr = ref Main.dust[num503].position.X;
																	ptr -= num501;
																	ptr = ref Main.dust[num503].position.Y;
																	ptr -= num502;
																	num1063 = num500;
																}
																return;
															}
															if (this.aiStyle == 60)
															{
																this.scale -= 0.015f;
																if (this.scale <= 0f)
																{
																	this.velocity *= 5f;
																	this.oldVelocity = this.velocity;
																	this.Kill();
																}
																float ptr;
																if (this.ai[0] <= 3f)
																{
																	ptr = ref this.ai[0];
																	ptr += 1f;
																	return;
																}
																int num504 = 103;
																if (this.type == 406)
																{
																	num504 = 137;
																}
																int num1063;
																if (this.owner == Main.myPlayer)
																{
																	Rectangle rectangle4;
																	rectangle4..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
																	for (int num505 = 0; num505 < 200; num505 = num1063 + 1)
																	{
																		if (Main.npc[num505].active && !Main.npc[num505].dontTakeDamage && Main.npc[num505].lifeMax > 1)
																		{
																			Rectangle value4;
																			value4..ctor((int)Main.npc[num505].position.X, (int)Main.npc[num505].position.Y, Main.npc[num505].width, Main.npc[num505].height);
																			if (rectangle4.Intersects(value4))
																			{
																				Main.npc[num505].AddBuff(num504, 1500, false);
																				this.Kill();
																			}
																		}
																		num1063 = num505;
																	}
																	for (int num506 = 0; num506 < 255; num506 = num1063 + 1)
																	{
																		if (num506 != this.owner && Main.player[num506].active && !Main.player[num506].dead)
																		{
																			Rectangle value5;
																			value5..ctor((int)Main.player[num506].position.X, (int)Main.player[num506].position.Y, Main.player[num506].width, Main.player[num506].height);
																			if (rectangle4.Intersects(value5))
																			{
																				Main.player[num506].AddBuff(num504, 1500, false, false);
																				this.Kill();
																			}
																		}
																		num1063 = num506;
																	}
																}
																ptr = ref this.ai[0];
																ptr += this.ai[1];
																if (this.ai[0] > 30f)
																{
																	ptr = ref this.velocity.Y;
																	ptr += 0.1f;
																}
																if (this.type == 358)
																{
																	for (int num507 = 0; num507 < 1; num507 = num1063 + 1)
																	{
																		for (int num508 = 0; num508 < 6; num508 = num1063 + 1)
																		{
																			float num509 = this.velocity.X / 6f * (float)num508;
																			float num510 = this.velocity.Y / 6f * (float)num508;
																			int num511 = 6;
																			int num512 = Dust.NewDust(new Vector2(this.position.X + (float)num511, this.position.Y + (float)num511), this.width - num511 * 2, this.height - num511 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
																			Dust dust212;
																			Dust dust108;
																			if (Main.rand.Next(2) == 0)
																			{
																				dust108 = Main.dust[num512];
																				dust212 = dust108;
																				dust212.alpha += 25;
																			}
																			if (Main.rand.Next(2) == 0)
																			{
																				dust108 = Main.dust[num512];
																				dust212 = dust108;
																				dust212.alpha += 25;
																			}
																			if (Main.rand.Next(2) == 0)
																			{
																				dust108 = Main.dust[num512];
																				dust212 = dust108;
																				dust212.alpha += 25;
																			}
																			Main.dust[num512].noGravity = true;
																			dust108 = Main.dust[num512];
																			dust212 = dust108;
																			dust212.velocity *= 0.3f;
																			dust108 = Main.dust[num512];
																			dust212 = dust108;
																			dust212.velocity += this.velocity * 0.5f;
																			Main.dust[num512].position = base.Center;
																			ptr = ref Main.dust[num512].position.X;
																			ptr -= num509;
																			ptr = ref Main.dust[num512].position.Y;
																			ptr -= num510;
																			dust108 = Main.dust[num512];
																			dust212 = dust108;
																			dust212.velocity *= 0.2f;
																			num1063 = num508;
																		}
																		if (Main.rand.Next(4) == 0)
																		{
																			int num513 = 6;
																			int num514 = Dust.NewDust(new Vector2(this.position.X + (float)num513, this.position.Y + (float)num513), this.width - num513 * 2, this.height - num513 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
																			Dust dust109 = Main.dust[num514];
																			Dust dust212 = dust109;
																			dust212.velocity *= 0.5f;
																			dust109 = Main.dust[num514];
																			dust212 = dust109;
																			dust212.velocity += this.velocity * 0.5f;
																		}
																		num1063 = num507;
																	}
																}
																if (this.type != 406)
																{
																	return;
																}
																int num515 = 175;
																Color newColor2;
																newColor2..ctor(0, 80, 255, 100);
																for (int num516 = 0; num516 < 6; num516 = num1063 + 1)
																{
																	Vector2 vector41 = this.velocity * (float)num516 / 6f;
																	int num517 = 6;
																	int num518 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num517 * 2, this.height - num517 * 2, 4, 0f, 0f, num515, newColor2, 1.2f);
																	Dust dust212;
																	Dust dust110;
																	if (Main.rand.Next(2) == 0)
																	{
																		dust110 = Main.dust[num518];
																		dust212 = dust110;
																		dust212.alpha += 25;
																	}
																	if (Main.rand.Next(2) == 0)
																	{
																		dust110 = Main.dust[num518];
																		dust212 = dust110;
																		dust212.alpha += 25;
																	}
																	if (Main.rand.Next(2) == 0)
																	{
																		dust110 = Main.dust[num518];
																		dust212 = dust110;
																		dust212.alpha += 25;
																	}
																	Main.dust[num518].noGravity = true;
																	dust110 = Main.dust[num518];
																	dust212 = dust110;
																	dust212.velocity *= 0.3f;
																	dust110 = Main.dust[num518];
																	dust212 = dust110;
																	dust212.velocity += this.velocity * 0.5f;
																	Main.dust[num518].position = base.Center;
																	ptr = ref Main.dust[num518].position.X;
																	ptr -= vector41.X;
																	ptr = ref Main.dust[num518].position.Y;
																	ptr -= vector41.Y;
																	dust110 = Main.dust[num518];
																	dust212 = dust110;
																	dust212.velocity *= 0.2f;
																	num1063 = num516;
																}
																if (Main.rand.Next(4) == 0)
																{
																	int num519 = 6;
																	int num520 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num519 * 2, this.height - num519 * 2, 4, 0f, 0f, num515, newColor2, 1.2f);
																	Dust dust111 = Main.dust[num520];
																	Dust dust212 = dust111;
																	dust212.velocity *= 0.5f;
																	dust111 = Main.dust[num520];
																	dust212 = dust111;
																	dust212.velocity += this.velocity * 0.5f;
																	return;
																}
															}
															else
															{
																if (this.aiStyle == 61)
																{
																	this.AI_061_FishingBobber();
																	return;
																}
																if (this.aiStyle == 62)
																{
																	this.AI_062();
																	return;
																}
																if (this.aiStyle == 63)
																{
																	if (!Main.player[this.owner].active)
																	{
																		this.active = false;
																		return;
																	}
																	Vector2 center3 = this.position;
																	bool flag24 = false;
																	float num521 = 2000f;
																	int num1063;
																	for (int num522 = 0; num522 < 200; num522 = num1063 + 1)
																	{
																		NPC nPC4 = Main.npc[num522];
																		if (nPC4.CanBeChasedBy(this, false))
																		{
																			float num523 = Vector2.Distance(nPC4.Center, base.Center);
																			if (num523 < num521 && Collision.CanHit(this.position, this.width, this.height, nPC4.position, nPC4.width, nPC4.height))
																			{
																				num521 = num523;
																				center3 = nPC4.Center;
																				flag24 = true;
																			}
																		}
																		num1063 = num522;
																	}
																	float ptr;
																	if (!flag24)
																	{
																		ptr = ref this.velocity.X;
																		ptr *= 0.95f;
																	}
																	else
																	{
																		float num524 = 5f;
																		float num525 = 0.08f;
																		if (this.velocity.Y == 0f)
																		{
																			bool flag25 = false;
																			if (base.Center.Y - 50f > center3.Y)
																			{
																				flag25 = true;
																			}
																			if (flag25)
																			{
																				this.velocity.Y = -6f;
																			}
																		}
																		else
																		{
																			num524 = 8f;
																			num525 = 0.12f;
																		}
																		ptr = ref this.velocity.X;
																		ptr += (float)Math.Sign(center3.X - base.Center.X) * num525;
																		if (this.velocity.X < 0f - num524)
																		{
																			this.velocity.X = 0f - num524;
																		}
																		if (this.velocity.X > num524)
																		{
																			this.velocity.X = num524;
																		}
																	}
																	float num526 = 0f;
																	Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref num526, ref this.gfxOffY, 1, false, 0);
																	if (this.velocity.Y != 0f)
																	{
																		this.frame = 3;
																	}
																	else
																	{
																		if (Math.Abs(this.velocity.X) > 0.2f)
																		{
																			num1063 = this.frameCounter;
																			this.frameCounter = num1063 + 1;
																		}
																		if (this.frameCounter >= 9)
																		{
																			this.frameCounter = 0;
																		}
																		if (this.frameCounter >= 6)
																		{
																			this.frame = 2;
																		}
																		else if (this.frameCounter >= 3)
																		{
																			this.frame = 1;
																		}
																		else
																		{
																			this.frame = 0;
																		}
																	}
																	if (this.velocity.X != 0f)
																	{
																		this.direction = Math.Sign(this.velocity.X);
																	}
																	this.spriteDirection = -this.direction;
																	ptr = ref this.velocity.Y;
																	ptr += 0.2f;
																	if (this.velocity.Y > 16f)
																	{
																		this.velocity.Y = 16f;
																		return;
																	}
																}
																else if (this.aiStyle == 64)
																{
																	int num527 = 10;
																	int num528 = 15;
																	float num529 = 1f;
																	int num530 = 150;
																	int num531 = 42;
																	if (this.type == 386)
																	{
																		num527 = 16;
																		num528 = 16;
																		num529 = 1.5f;
																	}
																	if (this.velocity.X != 0f)
																	{
																		this.direction = (this.spriteDirection = -Math.Sign(this.velocity.X));
																	}
																	int num1063 = this.frameCounter;
																	this.frameCounter = num1063 + 1;
																	if (this.frameCounter > 2)
																	{
																		num1063 = this.frame;
																		this.frame = num1063 + 1;
																		this.frameCounter = 0;
																	}
																	if (this.frame >= 6)
																	{
																		this.frame = 0;
																	}
																	if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
																	{
																		this.localAI[0] = 1f;
																		ref float ptr = ref this.position.X;
																		ptr += (float)(this.width / 2);
																		ptr = ref this.position.Y;
																		ptr += (float)(this.height / 2);
																		this.scale = ((float)(num527 + num528) - this.ai[1]) * num529 / (float)(num528 + num527);
																		this.width = (int)((float)num530 * this.scale);
																		this.height = (int)((float)num531 * this.scale);
																		ptr = ref this.position.X;
																		ptr -= (float)(this.width / 2);
																		ptr = ref this.position.Y;
																		ptr -= (float)(this.height / 2);
																		this.netUpdate = true;
																	}
																	if (this.ai[1] != -1f)
																	{
																		this.scale = ((float)(num527 + num528) - this.ai[1]) * num529 / (float)(num528 + num527);
																		this.width = (int)((float)num530 * this.scale);
																		this.height = (int)((float)num531 * this.scale);
																	}
																	if (!Collision.SolidCollision(this.position, this.width, this.height))
																	{
																		this.alpha -= 30;
																		if (this.alpha < 60)
																		{
																			this.alpha = 60;
																		}
																		if (this.type == 386 && this.alpha < 100)
																		{
																			this.alpha = 100;
																		}
																	}
																	else
																	{
																		this.alpha += 30;
																		if (this.alpha > 150)
																		{
																			this.alpha = 150;
																		}
																	}
																	if (this.ai[0] > 0f)
																	{
																		ref float ptr = ref this.ai[0];
																		ref float ptr19 = ref ptr;
																		float num1064 = ptr;
																		ptr19 = num1064 - 1f;
																	}
																	if (this.ai[0] == 1f && this.ai[1] > 0f && this.owner == Main.myPlayer)
																	{
																		this.netUpdate = true;
																		Vector2 center4 = base.Center;
																		ref float ptr = ref center4.Y;
																		ptr -= (float)num531 * this.scale / 2f;
																		float num532 = ((float)(num527 + num528) - this.ai[1] + 1f) * num529 / (float)(num528 + num527);
																		ptr = ref center4.Y;
																		ptr -= (float)num531 * num532 / 2f;
																		ptr = ref center4.Y;
																		ptr += 2f;
																		Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center4.X, center4.Y, this.velocity.X, this.velocity.Y, this.type, this.damage, this.knockBack, this.owner, 10f, this.ai[1] - 1f, 0f);
																		int num533 = 4;
																		if (this.type == 386)
																		{
																			num533 = 2;
																		}
																		if ((int)this.ai[1] % num533 == 0 && this.ai[1] != 0f)
																		{
																			int num534 = 372;
																			if (this.type == 386)
																			{
																				num534 = 373;
																			}
																			int num535 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int)center4.X, (int)center4.Y, num534, 0, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num535].velocity = this.velocity;
																			Main.npc[num535].netUpdate = true;
																			if (this.type == 386)
																			{
																				Main.npc[num535].ai[2] = (float)this.width;
																				Main.npc[num535].ai[3] = -1.5f;
																			}
																		}
																	}
																	if (this.ai[0] <= 0f)
																	{
																		float num536 = 0.10471976f;
																		float num537 = (float)this.width / 5f;
																		if (this.type == 386)
																		{
																			num537 *= 2f;
																		}
																		float num538 = (float)(Math.Cos((double)(num536 * (0f - this.ai[0]))) - 0.5) * num537;
																		ref float ptr = ref this.position.X;
																		ptr -= num538 * (float)(-(float)this.direction);
																		ptr = ref this.ai[0];
																		ref float ptr20 = ref ptr;
																		float num1064 = ptr;
																		ptr20 = num1064 - 1f;
																		num538 = (float)(Math.Cos((double)(num536 * (0f - this.ai[0]))) - 0.5) * num537;
																		ptr = ref this.position.X;
																		ptr += num538 * (float)(-(float)this.direction);
																		return;
																	}
																}
																else if (this.aiStyle == 65)
																{
																	if (this.ai[1] > 0f)
																	{
																		int num539 = (int)this.ai[1] - 1;
																		if (num539 < 255)
																		{
																			ref float ptr = ref this.localAI[0];
																			ref float ptr21 = ref ptr;
																			float num1064 = ptr;
																			ptr21 = num1064 + 1f;
																			if (this.localAI[0] > 10f)
																			{
																				int num540 = 6;
																				int num1063;
																				for (int num541 = 0; num541 < num540; num541 = num1063 + 1)
																				{
																					Vector2 spinningpoint = Vector2.Normalize(this.velocity) * new Vector2((float)this.width / 2f, (float)this.height) * 0.75f;
																					spinningpoint = spinningpoint.RotatedBy((double)(num541 - (num540 / 2 - 1)) * 3.141592653589793 / (double)num540, default(Vector2)) + base.Center;
																					Vector2 vector42 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.5707964f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
																					int num542 = Dust.NewDust(spinningpoint + vector42, 0, 0, 172, vector42.X * 2f, vector42.Y * 2f, 100, default(Color), 1.4f);
																					Main.dust[num542].noGravity = true;
																					Main.dust[num542].noLight = true;
																					Dust dust112 = Main.dust[num542];
																					Dust dust212 = dust112;
																					dust212.velocity /= 4f;
																					dust112 = Main.dust[num542];
																					dust212 = dust112;
																					dust212.velocity -= this.velocity;
																					num1063 = num541;
																				}
																				this.alpha -= 5;
																				if (this.alpha < 100)
																				{
																					this.alpha = 100;
																				}
																				this.rotation += this.velocity.X * 0.1f;
																				this.frame = (int)(this.localAI[0] / 3f) % 3;
																			}
																			Vector2 value6 = Main.player[num539].Center - base.Center;
																			float num543 = 4f;
																			if (this.ai[2] == 1f)
																			{
																				num543 += 12f;
																			}
																			num543 += this.localAI[0] / 20f;
																			this.velocity = Vector2.Normalize(value6) * num543;
																			if (value6.Length() < 50f)
																			{
																				this.Kill();
																			}
																		}
																	}
																	else
																	{
																		float num544 = 0.20943952f;
																		float num545 = 4f;
																		float num546 = (float)(Math.Cos((double)(num544 * this.ai[0])) - 0.5) * num545;
																		ref float ptr = ref this.velocity.Y;
																		ptr -= num546;
																		ptr = ref this.ai[0];
																		ref float ptr22 = ref ptr;
																		float num1064 = ptr;
																		ptr22 = num1064 + 1f;
																		num546 = (float)(Math.Cos((double)(num544 * this.ai[0])) - 0.5) * num545;
																		ptr = ref this.velocity.Y;
																		ptr += num546;
																		ptr = ref this.localAI[0];
																		ref float ptr23 = ref ptr;
																		num1064 = ptr;
																		ptr23 = num1064 + 1f;
																		if (this.localAI[0] > 10f)
																		{
																			this.alpha -= 5;
																			if (this.alpha < 100)
																			{
																				this.alpha = 100;
																			}
																			this.rotation += this.velocity.X * 0.1f;
																			this.frame = (int)(this.localAI[0] / 3f) % 3;
																		}
																	}
																	if (this.wet)
																	{
																		ref float ptr = ref this.position.Y;
																		ptr -= 16f;
																		this.Kill();
																		return;
																	}
																}
																else if (this.aiStyle == 66)
																{
																	float num547 = 0f;
																	float num548 = 0f;
																	float num549 = 0f;
																	float num550 = 0f;
																	bool flag26 = this.type == 387 || this.type == 388;
																	if (flag26)
																	{
																		num547 = 2000f;
																		num548 = 800f;
																		num549 = 1200f;
																		num550 = 150f;
																		if (Main.player[this.owner].dead)
																		{
																			Main.player[this.owner].twinsMinion = false;
																		}
																		if (Main.player[this.owner].twinsMinion)
																		{
																			this.timeLeft = 2;
																		}
																	}
																	if (this.type == 533)
																	{
																		num547 = 2000f;
																		num548 = 900f;
																		num549 = 1500f;
																		num550 = 450f;
																		if (Main.player[this.owner].dead)
																		{
																			Main.player[this.owner].DeadlySphereMinion = false;
																		}
																		if (Main.player[this.owner].DeadlySphereMinion)
																		{
																			this.timeLeft = 2;
																		}
																		this.localAI[2] = Utils.Clamp<float>(this.localAI[2] - 1f, 0f, 60f);
																	}
																	float num551 = 0.05f;
																	int num1063;
																	for (int num552 = 0; num552 < 1000; num552 = num1063 + 1)
																	{
																		bool flag27 = (Main.projectile[num552].type == 387 || Main.projectile[num552].type == 388) && (this.type == 387 || this.type == 388);
																		if (!flag27)
																		{
																			flag27 = (this.type == 533 && Main.projectile[num552].type == 533);
																		}
																		if (num552 != this.whoAmI && Main.projectile[num552].active && Main.projectile[num552].owner == this.owner && flag27 && Math.Abs(this.position.X - Main.projectile[num552].position.X) + Math.Abs(this.position.Y - Main.projectile[num552].position.Y) < (float)this.width)
																		{
																			if (this.position.X < Main.projectile[num552].position.X)
																			{
																				ref float ptr = ref this.velocity.X;
																				ptr -= num551;
																			}
																			else
																			{
																				ref float ptr = ref this.velocity.X;
																				ptr += num551;
																			}
																			if (this.position.Y < Main.projectile[num552].position.Y)
																			{
																				ref float ptr = ref this.velocity.Y;
																				ptr -= num551;
																			}
																			else
																			{
																				ref float ptr = ref this.velocity.Y;
																				ptr += num551;
																			}
																		}
																		num1063 = num552;
																	}
																	if (this.type == 533)
																	{
																		if ((int)this.ai[0] % 3 != 2)
																		{
																			Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
																		}
																		else
																		{
																			Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
																		}
																	}
																	bool flag28 = false;
																	if (this.ai[0] == 2f && this.type == 388)
																	{
																		ref float ptr = ref this.ai[1];
																		ref float ptr24 = ref ptr;
																		float num1064 = ptr;
																		ptr24 = num1064 + 1f;
																		this.extraUpdates = 1;
																		this.rotation = this.velocity.ToRotation() + 3.1415927f;
																		num1063 = this.frameCounter;
																		this.frameCounter = num1063 + 1;
																		if (this.frameCounter > 1)
																		{
																			num1063 = this.frame;
																			this.frame = num1063 + 1;
																			this.frameCounter = 0;
																		}
																		if (this.frame > 2)
																		{
																			this.frame = 0;
																		}
																		if (this.ai[1] > 40f)
																		{
																			this.ai[1] = 1f;
																			this.ai[0] = 0f;
																			this.extraUpdates = 0;
																			this.numUpdates = 0;
																			this.netUpdate = true;
																		}
																		else
																		{
																			flag28 = true;
																		}
																	}
																	if (this.type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
																	{
																		int num553 = 2;
																		flag28 = true;
																		this.velocity *= 0.9f;
																		ref float ptr = ref this.ai[1];
																		ref float ptr25 = ref ptr;
																		float num1064 = ptr;
																		ptr25 = num1064 + 1f;
																		int num554 = (int)this.ai[1] / num553 + (int)(this.ai[0] - 3f) * 8;
																		if (num554 < 4)
																		{
																			this.frame = 17 + num554;
																		}
																		else if (num554 < 5)
																		{
																			this.frame = 0;
																		}
																		else if (num554 < 8)
																		{
																			this.frame = 1 + num554 - 5;
																		}
																		else if (num554 < 11)
																		{
																			this.frame = 11 - num554;
																		}
																		else if (num554 < 12)
																		{
																			this.frame = 0;
																		}
																		else if (num554 < 16)
																		{
																			this.frame = num554 - 2;
																		}
																		else if (num554 < 20)
																		{
																			this.frame = 29 - num554;
																		}
																		else if (num554 < 21)
																		{
																			this.frame = 0;
																		}
																		else
																		{
																			this.frame = num554 - 4;
																		}
																		if (this.ai[1] > (float)(num553 * 8))
																		{
																			ptr = ref this.ai[0];
																			ptr -= 3f;
																			this.ai[1] = 0f;
																		}
																	}
																	if (this.type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
																	{
																		ref float ptr = ref this.ai[1];
																		ref float ptr26 = ref ptr;
																		float num1064 = ptr;
																		ptr26 = num1064 + 1f;
																		this.MaxUpdates = 2;
																		if (this.ai[0] == 7f)
																		{
																			this.rotation = this.velocity.ToRotation() + 3.1415927f;
																		}
																		else
																		{
																			this.rotation += 0.5235988f;
																		}
																		int num555 = 0;
																		switch ((int)this.ai[0])
																		{
																		case 6:
																			this.frame = 5;
																			num555 = 40;
																			break;
																		case 7:
																			this.frame = 13;
																			num555 = 30;
																			break;
																		case 8:
																			this.frame = 17;
																			num555 = 30;
																			break;
																		}
																		if (this.ai[1] > (float)num555)
																		{
																			this.ai[1] = 1f;
																			ptr = ref this.ai[0];
																			ptr -= 6f;
																			ptr = ref this.localAI[0];
																			ref float ptr27 = ref ptr;
																			num1064 = ptr;
																			ptr27 = num1064 + 1f;
																			this.extraUpdates = 0;
																			this.numUpdates = 0;
																			this.netUpdate = true;
																		}
																		else
																		{
																			flag28 = true;
																		}
																		if (this.ai[0] == 8f)
																		{
																			for (int num556 = 0; num556 < 4; num556 = num1063 + 1)
																			{
																				int num557 = Utils.SelectRandom<int>(Main.rand, new int[]
																				{
																					226,
																					228,
																					75
																				});
																				int num558 = Dust.NewDust(base.Center, 0, 0, num557, 0f, 0f, 0, default(Color), 1f);
																				Dust dust113 = Main.dust[num558];
																				Vector2 vector43 = Vector2.One.RotatedBy((double)((float)num556 * 1.5707964f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																				dust113.position = base.Center + vector43 * 10f;
																				dust113.velocity = vector43 * 1f;
																				dust113.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
																				dust113.noGravity = true;
																				num1063 = num556;
																			}
																		}
																	}
																	if (flag28)
																	{
																		return;
																	}
																	Vector2 center5 = this.position;
																	Vector2 zero = Vector2.Zero;
																	bool flag29 = false;
																	if (this.ai[0] != 1f && flag26)
																	{
																		this.tileCollide = true;
																	}
																	if (this.type == 533 && this.ai[0] < 9f)
																	{
																		this.tileCollide = true;
																	}
																	if (this.tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
																	{
																		this.tileCollide = false;
																	}
																	NPC ownerMinionAttackTargetNPC3 = this.OwnerMinionAttackTargetNPC;
																	if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this, false))
																	{
																		float num559 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
																		float num560 = num547 * 3f;
																		if (num559 < num560 && !flag29 && Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
																		{
																			num547 = num559;
																			center5 = ownerMinionAttackTargetNPC3.Center;
																			flag29 = true;
																		}
																	}
																	if (!flag29)
																	{
																		for (int num561 = 0; num561 < 200; num561 = num1063 + 1)
																		{
																			NPC nPC5 = Main.npc[num561];
																			if (nPC5.CanBeChasedBy(this, false))
																			{
																				float num562 = Vector2.Distance(nPC5.Center, base.Center);
																				if (num562 < num547 && Collision.CanHitLine(this.position, this.width, this.height, nPC5.position, nPC5.width, nPC5.height))
																				{
																					num547 = num562;
																					center5 = nPC5.Center;
																					zero = nPC5.velocity;
																					flag29 = true;
																				}
																			}
																			num1063 = num561;
																		}
																	}
																	float num563 = num548;
																	if (flag29)
																	{
																		num563 = num549;
																	}
																	Player player4 = Main.player[this.owner];
																	if (Vector2.Distance(player4.Center, base.Center) > num563)
																	{
																		if (flag26)
																		{
																			this.ai[0] = 1f;
																		}
																		if (this.type == 533 && this.ai[0] < 9f)
																		{
																			ref float ptr = ref this.ai[0];
																			ptr += (float)(3 * (3 - (int)(this.ai[0] / 3f)));
																		}
																		this.tileCollide = false;
																		this.netUpdate = true;
																	}
																	if (flag26 && flag29 && this.ai[0] == 0f)
																	{
																		Vector2 vector44 = center5 - base.Center;
																		float num564 = vector44.Length();
																		vector44.Normalize();
																		if (num564 > 200f)
																		{
																			float num565 = 6f;
																			if (this.type == 388)
																			{
																				num565 = 14f;
																			}
																			vector44 *= num565;
																			this.velocity = (this.velocity * 40f + vector44) / 41f;
																		}
																		else
																		{
																			float num566 = 4f;
																			vector44 *= 0f - num566;
																			this.velocity = (this.velocity * 40f + vector44) / 41f;
																		}
																	}
																	else
																	{
																		bool flag30 = false;
																		if (!flag30 && flag26)
																		{
																			flag30 = (this.ai[0] == 1f);
																		}
																		if (!flag30 && this.type == 533)
																		{
																			flag30 = (this.ai[0] >= 9f);
																		}
																		float num567 = 6f;
																		float num568 = 40f;
																		if (this.type == 533)
																		{
																			num567 = 12f;
																		}
																		if (flag30)
																		{
																			num567 = 15f;
																		}
																		Vector2 center6 = base.Center;
																		Vector2 vector45 = player4.Center - center6 + new Vector2(0f, -60f);
																		float num569 = vector45.Length();
																		if (num569 > 200f && num567 < 8f)
																		{
																			num567 = 8f;
																		}
																		if (num567 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
																		{
																			num568 = 30f;
																			num567 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
																			if (num569 > 200f)
																			{
																				num568 = 20f;
																				num567 += 4f;
																			}
																			else if (num569 > 100f)
																			{
																				num567 += 3f;
																			}
																		}
																		if (flag30 && num569 > 300f)
																		{
																			num567 += 6f;
																			num568 -= 10f;
																		}
																		if (num569 < num550 && flag30 && !Collision.SolidCollision(this.position, this.width, this.height))
																		{
																			if (this.type == 387 || this.type == 388)
																			{
																				this.ai[0] = 0f;
																			}
																			if (this.type == 533)
																			{
																				ref float ptr = ref this.ai[0];
																				ptr -= 9f;
																			}
																			this.netUpdate = true;
																		}
																		if (num569 > 2000f)
																		{
																			this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
																			this.position.Y = Main.player[this.owner].Center.Y - (float)(this.height / 2);
																			this.netUpdate = true;
																		}
																		if (num569 > 70f)
																		{
																			vector45.Normalize();
																			vector45 *= num567;
																			this.velocity = (this.velocity * num568 + vector45) / (num568 + 1f);
																		}
																		else if (this.velocity.X == 0f && this.velocity.Y == 0f)
																		{
																			this.velocity.X = -0.15f;
																			this.velocity.Y = -0.05f;
																		}
																		if (this.velocity.Length() > num567)
																		{
																			this.velocity *= 0.95f;
																		}
																	}
																	if (this.type == 388)
																	{
																		this.rotation = this.velocity.ToRotation() + 3.1415927f;
																	}
																	if (this.type == 387)
																	{
																		if (this.ai[0] != 1f && flag29)
																		{
																			this.rotation = (center5 - base.Center).ToRotation() + 3.1415927f;
																		}
																		else
																		{
																			this.rotation = this.velocity.ToRotation() + 3.1415927f;
																		}
																	}
																	if (this.type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
																	{
																		this.rotation += this.velocity.X * 0.04f;
																	}
																	if (this.type == 388 || this.type == 387)
																	{
																		num1063 = this.frameCounter;
																		this.frameCounter = num1063 + 1;
																		if (this.frameCounter > 3)
																		{
																			num1063 = this.frame;
																			this.frame = num1063 + 1;
																			this.frameCounter = 0;
																		}
																		if (this.frame > 2)
																		{
																			this.frame = 0;
																		}
																	}
																	else if (this.type == 533)
																	{
																		if (this.ai[0] < 3f || this.ai[0] >= 9f)
																		{
																			num1063 = this.frameCounter;
																			this.frameCounter = num1063 + 1;
																			if (this.frameCounter >= 24)
																			{
																				this.frameCounter = 0;
																			}
																			int num570 = this.frameCounter / 4;
																			this.frame = 4 + num570;
																			num1063 = (int)this.ai[0];
																			switch (num1063)
																			{
																			case 0:
																				break;
																			case 1:
																				goto IL_19051;
																			case 2:
																				goto IL_19070;
																			default:
																				switch (num1063)
																				{
																				case 9:
																					break;
																				case 10:
																					goto IL_19051;
																				case 11:
																					goto IL_19070;
																				default:
																					goto IL_190A4;
																				}
																				break;
																			}
																			this.frame = 4 + num570;
																			goto IL_190A4;
																			IL_19051:
																			num570 = this.frameCounter / 8;
																			this.frame = 14 + num570;
																			goto IL_190A4;
																			IL_19070:
																			num570 = this.frameCounter / 3;
																			if (num570 >= 4)
																			{
																				num570 -= 4;
																			}
																			this.frame = 17 + num570;
																		}
																		IL_190A4:
																		if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
																		{
																			for (int num571 = 0; num571 < 4; num571 = num1063 + 1)
																			{
																				if (Main.rand.Next(2) != 0)
																				{
																					int num572 = Utils.SelectRandom<int>(Main.rand, new int[]
																					{
																						226,
																						228,
																						75
																					});
																					int num573 = Dust.NewDust(base.Center, 0, 0, num572, 0f, 0f, 0, default(Color), 1f);
																					Dust dust114 = Main.dust[num573];
																					Vector2 vector46 = Vector2.One.RotatedBy((double)((float)num571 * 1.5707964f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																					dust114.position = base.Center + vector46 * 10f;
																					dust114.velocity = vector46 * 1f;
																					dust114.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
																					dust114.noGravity = true;
																					dust114.customData = this;
																					dust114.noLight = true;
																				}
																				num1063 = num571;
																			}
																		}
																	}
																	if (this.ai[1] > 0f && flag26)
																	{
																		ref float ptr = ref this.ai[1];
																		ptr += (float)Main.rand.Next(1, 4);
																	}
																	if (this.ai[1] > 90f && this.type == 387)
																	{
																		this.ai[1] = 0f;
																		this.netUpdate = true;
																	}
																	if (this.ai[1] > 40f && this.type == 388)
																	{
																		this.ai[1] = 0f;
																		this.netUpdate = true;
																	}
																	if (this.ai[1] > 0f && this.type == 533)
																	{
																		ref float ptr = ref this.ai[1];
																		ref float ptr28 = ref ptr;
																		float num1064 = ptr;
																		ptr28 = num1064 + 1f;
																		int num574 = 10;
																		if (this.ai[1] > (float)num574)
																		{
																			this.ai[1] = 0f;
																			this.netUpdate = true;
																		}
																	}
																	if (this.ai[0] == 0f && flag26)
																	{
																		if (this.type == 387)
																		{
																			float num575 = 8f;
																			int num576 = 389;
																			if (flag29 && this.ai[1] == 0f)
																			{
																				ref float ptr = ref this.ai[1];
																				ref float ptr29 = ref ptr;
																				float num1064 = ptr;
																				ptr29 = num1064 + 1f;
																				if (Main.myPlayer == this.owner && Collision.CanHitLine(this.position, this.width, this.height, center5, 0, 0))
																				{
																					Vector2 vector47 = center5 - base.Center;
																					vector47.Normalize();
																					vector47 *= num575;
																					int num577 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector47.X, vector47.Y, num576, (int)((float)this.damage * 1.15f), 0f, Main.myPlayer, 0f, 0f, 0f);
																					Main.projectile[num577].timeLeft = 300;
																					this.netUpdate = true;
																				}
																			}
																		}
																		if (this.type == 388 && this.ai[1] == 0f && flag29 && num547 < 500f)
																		{
																			ref float ptr = ref this.ai[1];
																			ref float ptr30 = ref ptr;
																			float num1064 = ptr;
																			ptr30 = num1064 + 1f;
																			if (Main.myPlayer == this.owner)
																			{
																				this.ai[0] = 2f;
																				Vector2 v4 = center5 - base.Center;
																				v4 = v4.SafeNormalize(this.velocity);
																				float num578 = 8f;
																				this.velocity = v4 * num578;
																				this.AI_066_TryInterceptingTarget(center5, zero, num578);
																				this.netUpdate = true;
																				return;
																			}
																		}
																	}
																	else
																	{
																		if (this.type != 533 || this.ai[0] >= 9f)
																		{
																			return;
																		}
																		int num579 = 800;
																		if (this.ai[1] != 0f || !flag29 || num547 >= (float)num579)
																		{
																			return;
																		}
																		ref float ptr = ref this.ai[1];
																		ref float ptr31 = ref ptr;
																		float num1064 = ptr;
																		ptr31 = num1064 + 1f;
																		if (Main.myPlayer != this.owner)
																		{
																			return;
																		}
																		if (this.localAI[0] >= 3f)
																		{
																			ptr = ref this.ai[0];
																			ptr += 4f;
																			if (this.ai[0] == 6f)
																			{
																				this.ai[0] = 3f;
																			}
																			this.localAI[0] = 0f;
																			return;
																		}
																		ptr = ref this.ai[0];
																		ptr += 6f;
																		Vector2 v5 = center5 - base.Center;
																		v5 = v5.SafeNormalize(Vector2.Zero);
																		float num580 = (this.ai[0] == 8f) ? 12f : 10f;
																		this.velocity = v5 * num580;
																		this.AI_066_TryInterceptingTarget(center5, zero, num580);
																		this.netUpdate = true;
																		return;
																	}
																}
																else
																{
																	if (this.aiStyle == 67)
																	{
																		this.AI_067_FreakingPirates();
																		return;
																	}
																	if (this.aiStyle == 68)
																	{
																		this.rotation += 0.25f * (float)this.direction;
																		bool flag31 = this.type == 399;
																		bool flag32 = this.type == 669;
																		ref float ptr = ref this.ai[0];
																		ptr += 1f;
																		if (this.ai[0] >= 3f)
																		{
																			this.alpha -= 40;
																			if (this.alpha < 0)
																			{
																				this.alpha = 0;
																			}
																		}
																		if (this.ai[0] >= 15f)
																		{
																			ptr = ref this.velocity.Y;
																			ptr += 0.2f;
																			if (this.velocity.Y > 16f)
																			{
																				this.velocity.Y = 16f;
																			}
																			ptr = ref this.velocity.X;
																			ptr *= 0.99f;
																		}
																		if (this.alpha == 0)
																		{
																			if (flag31)
																			{
																				Vector2 spinningpoint2;
																				spinningpoint2..ctor(4f, -8f);
																				float num581 = this.rotation;
																				if (this.direction == -1)
																				{
																					spinningpoint2.X = -4f;
																				}
																				spinningpoint2 = spinningpoint2.RotatedBy((double)num581, default(Vector2));
																				int num1063;
																				for (int num582 = 0; num582 < 1; num582 = num1063 + 1)
																				{
																					int num583 = Dust.NewDust(base.Center + spinningpoint2 - Vector2.One * 5f, 4, 4, 6, 0f, 0f, 0, default(Color), 1f);
																					Main.dust[num583].scale = 1.5f;
																					Main.dust[num583].noGravity = true;
																					Main.dust[num583].velocity = Main.dust[num583].velocity * 0.25f + Vector2.Normalize(spinningpoint2) * 1f;
																					Main.dust[num583].velocity = Main.dust[num583].velocity.RotatedBy((double)(-1.5707964f * (float)this.direction), default(Vector2));
																					num1063 = num582;
																				}
																			}
																			if (flag32)
																			{
																				int num1063;
																				for (int num584 = 0; num584 < 2; num584 = num1063 + 1)
																				{
																					Vector2 spinningpoint3;
																					spinningpoint3..ctor(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
																					float num585 = this.rotation;
																					spinningpoint3 = spinningpoint3.RotatedBy((double)num585, default(Vector2));
																					int num586 = Dust.NewDust(base.Center + spinningpoint3 - Vector2.One * 5f, 4, 4, 4, 0f, 0f, 0, default(Color), 1f);
																					Main.dust[num586].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
																					Main.dust[num586].velocity = Main.dust[num586].velocity * 0.25f + Vector2.Normalize(spinningpoint3) * 1f;
																					Main.dust[num586].velocity = Main.dust[num586].velocity.RotatedBy((double)(-1.5707964f * (float)this.direction), default(Vector2));
																					Main.dust[num586].color = Utils.SelectRandom<Color>(Main.rand, new Color[]
																					{
																						new Color(255, 255, 255, 110),
																						new Color(245, 200, 30, 110)
																					});
																					num1063 = num584;
																				}
																			}
																		}
																		this.spriteDirection = this.direction;
																		if (this.timeLeft <= 3)
																		{
																			this.tileCollide = false;
																			this.alpha = 255;
																			ptr = ref this.position.X;
																			ptr += (float)(this.width / 2);
																			ptr = ref this.position.Y;
																			ptr += (float)(this.height / 2);
																			this.width = 80;
																			this.height = 80;
																			ptr = ref this.position.X;
																			ptr -= (float)(this.width / 2);
																			ptr = ref this.position.Y;
																			ptr -= (float)(this.height / 2);
																			this.knockBack = 8f;
																		}
																		if (this.wet && this.timeLeft > 3)
																		{
																			this.timeLeft = 3;
																			return;
																		}
																	}
																	else if (this.aiStyle == 69)
																	{
																		Vector2 vector48 = Main.player[this.owner].Center - base.Center;
																		this.rotation = vector48.ToRotation() - 1.57f;
																		if (Main.player[this.owner].dead)
																		{
																			this.Kill();
																			return;
																		}
																		Main.player[this.owner].SetDummyItemTime(10);
																		if (vector48.X < 0f)
																		{
																			Main.player[this.owner].ChangeDir(1);
																			this.direction = 1;
																		}
																		else
																		{
																			Main.player[this.owner].ChangeDir(-1);
																			this.direction = -1;
																		}
																		Main.player[this.owner].itemRotation = (vector48 * -1f * (float)this.direction).ToRotation();
																		this.spriteDirection = ((vector48.X <= 0f) ? 1 : -1);
																		if (this.ai[0] == 0f && vector48.Length() > 400f)
																		{
																			this.ai[0] = 1f;
																		}
																		if (this.ai[0] == 1f || this.ai[0] == 2f)
																		{
																			float num587 = vector48.Length();
																			if (num587 > 1500f)
																			{
																				this.Kill();
																				return;
																			}
																			if (num587 > 600f)
																			{
																				this.ai[0] = 2f;
																			}
																			this.tileCollide = false;
																			float num588 = 20f;
																			if (this.ai[0] == 2f)
																			{
																				num588 = 40f;
																			}
																			this.velocity = Vector2.Normalize(vector48) * num588;
																			if (vector48.Length() < num588)
																			{
																				this.Kill();
																				return;
																			}
																		}
																		ref float ptr = ref this.ai[1];
																		ref float ptr32 = ref ptr;
																		float num1064 = ptr;
																		ptr32 = num1064 + 1f;
																		if (this.ai[1] > 5f)
																		{
																			this.alpha = 0;
																		}
																		if ((int)this.ai[1] % 4 == 0 && this.owner == Main.myPlayer)
																		{
																			Vector2 spinningpoint4 = vector48 * -1f;
																			spinningpoint4.Normalize();
																			spinningpoint4 *= (float)Main.rand.Next(45, 65) * 0.1f;
																			spinningpoint4 = spinningpoint4.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																			Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, spinningpoint4.X, spinningpoint4.Y, 405, this.damage, this.knockBack, this.owner, -10f, 0f, 0f);
																			return;
																		}
																	}
																	else
																	{
																		if (this.aiStyle == 70)
																		{
																			if (this.ai[0] == 0f)
																			{
																				float num589 = 650f;
																				int num590 = -1;
																				int num1063;
																				for (int num591 = 0; num591 < 200; num591 = num1063 + 1)
																				{
																					NPC nPC6 = Main.npc[num591];
																					float num592 = (nPC6.Center - base.Center).Length();
																					if (num592 < num589 && nPC6.CanBeChasedBy(this, false) && Collision.CanHit(this.position, this.width, this.height, nPC6.position, nPC6.width, nPC6.height))
																					{
																						num590 = num591;
																						num589 = num592;
																					}
																					num1063 = num591;
																				}
																				this.ai[0] = (float)(num590 + 1);
																				if (this.ai[0] == 0f)
																				{
																					this.ai[0] = -15f;
																				}
																				if (this.ai[0] > 0f)
																				{
																					float num593 = (float)Main.rand.Next(35, 75) / 30f;
																					this.velocity = (this.velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101))) * num593) / 21f;
																					this.netUpdate = true;
																				}
																			}
																			else if (this.ai[0] > 0f)
																			{
																				Vector2 vector49 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
																				this.velocity = (this.velocity * 40f + vector49 * 12f) / 41f;
																			}
																			else
																			{
																				ref float ptr = ref this.ai[0];
																				ref float ptr33 = ref ptr;
																				float num1064 = ptr;
																				ptr33 = num1064 + 1f;
																				this.alpha -= 25;
																				if (this.alpha < 50)
																				{
																					this.alpha = 50;
																				}
																				this.velocity *= 0.95f;
																			}
																			if (this.ai[1] == 0f)
																			{
																				this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
																				this.netUpdate = true;
																			}
																			this.scale = this.ai[1];
																			return;
																		}
																		if (this.aiStyle == 71)
																		{
																			ref float ptr = ref this.localAI[1];
																			ref float ptr34 = ref ptr;
																			float num1064 = ptr;
																			ptr34 = num1064 + 1f;
																			if (this.localAI[1] > 10f && Main.rand.Next(3) == 0)
																			{
																				int num594 = 6;
																				int num1063;
																				for (int num595 = 0; num595 < num594; num595 = num1063 + 1)
																				{
																					Vector2 spinningpoint5 = Vector2.Normalize(this.velocity) * new Vector2((float)this.width, (float)this.height) / 2f;
																					spinningpoint5 = spinningpoint5.RotatedBy((double)(num595 - (num594 / 2 - 1)) * 3.141592653589793 / (double)num594, default(Vector2)) + base.Center;
																					Vector2 vector50 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.5707964f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
																					int num596 = Dust.NewDust(spinningpoint5 + vector50, 0, 0, 217, vector50.X * 2f, vector50.Y * 2f, 100, default(Color), 1.4f);
																					Main.dust[num596].noGravity = true;
																					Main.dust[num596].noLight = true;
																					Dust dust115 = Main.dust[num596];
																					Dust dust212 = dust115;
																					dust212.velocity /= 4f;
																					dust115 = Main.dust[num596];
																					dust212 = dust115;
																					dust212.velocity -= this.velocity;
																					num1063 = num595;
																				}
																				this.alpha -= 5;
																				if (this.alpha < 50)
																				{
																					this.alpha = 50;
																				}
																				this.rotation += this.velocity.X * 0.1f;
																				this.frame = (int)(this.localAI[1] / 3f) % 3;
																				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
																			}
																			int num597 = -1;
																			Vector2 vector51 = base.Center;
																			float num598 = 500f;
																			if (this.localAI[0] > 0f)
																			{
																				ptr = ref this.localAI[0];
																				ref float ptr35 = ref ptr;
																				num1064 = ptr;
																				ptr35 = num1064 - 1f;
																			}
																			if (this.ai[0] == 0f && this.localAI[0] == 0f)
																			{
																				int num1063;
																				for (int num599 = 0; num599 < 200; num599 = num1063 + 1)
																				{
																					NPC nPC7 = Main.npc[num599];
																					if (nPC7.CanBeChasedBy(this, false) && (this.ai[0] == 0f || this.ai[0] == (float)(num599 + 1)))
																					{
																						Vector2 center7 = nPC7.Center;
																						float num600 = Vector2.Distance(center7, vector51);
																						if (num600 < num598 && Collision.CanHit(this.position, this.width, this.height, nPC7.position, nPC7.width, nPC7.height))
																						{
																							num598 = num600;
																							vector51 = center7;
																							num597 = num599;
																						}
																					}
																					num1063 = num599;
																				}
																				if (num597 >= 0)
																				{
																					this.ai[0] = (float)(num597 + 1);
																					this.netUpdate = true;
																				}
																			}
																			if (this.localAI[0] == 0f && this.ai[0] == 0f)
																			{
																				this.localAI[0] = 30f;
																			}
																			bool flag33 = false;
																			if (this.ai[0] != 0f)
																			{
																				int num601 = (int)(this.ai[0] - 1f);
																				if (Main.npc[num601].active && !Main.npc[num601].dontTakeDamage && Main.npc[num601].immune[this.owner] == 0)
																				{
																					float num602 = Main.npc[num601].position.X + (float)(Main.npc[num601].width / 2);
																					float num603 = Main.npc[num601].position.Y + (float)(Main.npc[num601].height / 2);
																					float num604 = Math.Abs(this.position.X + (float)(this.width / 2) - num602) + Math.Abs(this.position.Y + (float)(this.height / 2) - num603);
																					if (num604 < 1000f)
																					{
																						flag33 = true;
																						vector51 = Main.npc[num601].Center;
																					}
																				}
																				else
																				{
																					this.ai[0] = 0f;
																					flag33 = false;
																					this.netUpdate = true;
																				}
																			}
																			if (flag33)
																			{
																				Vector2 v6 = vector51 - base.Center;
																				float num605 = this.velocity.ToRotation();
																				float num606 = v6.ToRotation();
																				double num607 = (double)(num606 - num605);
																				if (num607 > 3.141592653589793)
																				{
																					num607 -= 6.283185307179586;
																				}
																				if (num607 < -3.141592653589793)
																				{
																					num607 += 6.283185307179586;
																				}
																				this.velocity = this.velocity.RotatedBy(num607 * 0.10000000149011612, default(Vector2));
																			}
																			float num608 = this.velocity.Length();
																			this.velocity.Normalize();
																			this.velocity *= num608 + 0.0025f;
																			return;
																		}
																		if (this.aiStyle == 72)
																		{
																			ref float ptr = ref this.localAI[0];
																			ref float ptr36 = ref ptr;
																			float num1064 = ptr;
																			ptr36 = num1064 + 1f;
																			if (this.localAI[0] > 3f)
																			{
																				this.alpha -= 25;
																				if (this.alpha < 50)
																				{
																					this.alpha = 50;
																				}
																			}
																			this.velocity *= 0.96f;
																			if (this.ai[1] == 0f)
																			{
																				this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
																				this.netUpdate = true;
																			}
																			this.scale = this.ai[1];
																			this.position = base.Center;
																			int num609 = 14;
																			int num610 = 14;
																			this.width = (int)((float)num609 * this.ai[1]);
																			this.height = (int)((float)num610 * this.ai[1]);
																			this.position -= new Vector2((float)(this.width / 2), (float)(this.height / 2));
																			return;
																		}
																		if (this.aiStyle == 73)
																		{
																			int num611 = (int)this.ai[0];
																			int num612 = (int)this.ai[1];
																			Tile tile2 = Main.tile[num611, num612];
																			if (tile2 == null || !tile2.active() || *tile2.type != 338)
																			{
																				this.Kill();
																				return;
																			}
																			float num613 = 2f;
																			float num614 = (float)this.timeLeft / 60f;
																			if (num614 < 1f)
																			{
																				num613 *= num614;
																			}
																			int num1063;
																			if (this.type == 419)
																			{
																				for (int num615 = 0; num615 < 2; num615 = num1063 + 1)
																				{
																					Vector2 spinningpoint6;
																					spinningpoint6..ctor(0f, 0f - num613);
																					spinningpoint6 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																					spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																					int num616 = Dust.NewDust(this.position, this.width, this.height, 222, 0f, 0f, 100, default(Color), 1f);
																					Dust dust116 = Main.dust[num616];
																					dust116.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																					Dust dust117 = dust116;
																					Dust dust212 = dust117;
																					dust212.velocity *= 0.5f;
																					float ptr;
																					if (dust116.velocity.Y > 0f)
																					{
																						ptr = ref dust116.velocity.Y;
																						ptr *= -1f;
																					}
																					dust117 = dust116;
																					dust212 = dust117;
																					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																					dust117 = dust116;
																					dust212 = dust117;
																					dust212.velocity += spinningpoint6;
																					dust116.scale = 0.6f;
																					dust116.fadeIn = dust116.scale + 0.2f;
																					ptr = ref dust116.velocity.Y;
																					ptr *= 2f;
																					num1063 = num615;
																				}
																			}
																			if (this.type == 420)
																			{
																				for (int num617 = 0; num617 < 2; num617 = num1063 + 1)
																				{
																					Vector2 spinningpoint7;
																					spinningpoint7..ctor(0f, 0f - num613);
																					spinningpoint7 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																					spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																					int num618 = 219;
																					if (Main.rand.Next(5) == 0)
																					{
																						num618 = 222;
																					}
																					int num619 = Dust.NewDust(this.position, this.width, this.height, num618, 0f, 0f, 100, default(Color), 1f);
																					Dust dust118 = Main.dust[num619];
																					dust118.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																					Dust dust119 = dust118;
																					Dust dust212 = dust119;
																					dust212.velocity *= 0.5f;
																					float ptr;
																					if (dust118.velocity.Y > 0f)
																					{
																						ptr = ref dust118.velocity.Y;
																						ptr *= -1f;
																					}
																					dust119 = dust118;
																					dust212 = dust119;
																					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																					dust119 = dust118;
																					dust212 = dust119;
																					dust212.velocity += spinningpoint7;
																					ptr = ref dust118.velocity.X;
																					ptr *= 0.5f;
																					dust118.scale = 0.6f;
																					dust118.fadeIn = dust118.scale + 0.2f;
																					ptr = ref dust118.velocity.Y;
																					ptr *= 2f;
																					num1063 = num617;
																				}
																			}
																			if (this.type == 421)
																			{
																				for (int num620 = 0; num620 < 2; num620 = num1063 + 1)
																				{
																					Vector2 spinningpoint8;
																					spinningpoint8..ctor(0f, 0f - num613);
																					spinningpoint8 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																					spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.7853981852531433, default(Vector2));
																					int num621 = Dust.NewDust(this.position, this.width, this.height, 221, 0f, 0f, 100, default(Color), 1f);
																					Dust dust120 = Main.dust[num621];
																					dust120.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																					Dust dust121 = dust120;
																					Dust dust212 = dust121;
																					dust212.velocity *= 0.1f;
																					float ptr;
																					if (dust120.velocity.Y > 0f)
																					{
																						ptr = ref dust120.velocity.Y;
																						ptr *= -1f;
																					}
																					dust121 = dust120;
																					dust212 = dust121;
																					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																					dust121 = dust120;
																					dust212 = dust121;
																					dust212.velocity += spinningpoint8;
																					dust120.scale = 0.6f;
																					dust120.fadeIn = dust120.scale + 0.2f;
																					ptr = ref dust120.velocity.Y;
																					ptr *= 2.5f;
																					num1063 = num620;
																				}
																				if (this.timeLeft % 10 == 0)
																				{
																					float num622 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																					for (int num623 = 0; num623 < 9; num623 = num1063 + 1)
																					{
																						Vector2 vector52;
																						vector52..ctor((float)(num623 - 4) / 5f, (0f - num613) * num622);
																						int num624 = Dust.NewDust(this.position, this.width, this.height, 222, 0f, 0f, 100, default(Color), 1f);
																						Dust dust122 = Main.dust[num624];
																						dust122.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
																						Dust dust123 = dust122;
																						Dust dust212 = dust123;
																						dust212.velocity *= 0f;
																						float ptr;
																						if (dust122.velocity.Y > 0f)
																						{
																							ptr = ref dust122.velocity.Y;
																							ptr *= -1f;
																						}
																						dust123 = dust122;
																						dust212 = dust123;
																						dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																						dust123 = dust122;
																						dust212 = dust123;
																						dust212.velocity += vector52;
																						dust122.scale = 0.6f;
																						dust122.fadeIn = dust122.scale + 0.2f;
																						ptr = ref dust122.velocity.Y;
																						ptr *= 2f;
																						num1063 = num623;
																					}
																				}
																			}
																			if (this.type != 422)
																			{
																				return;
																			}
																			for (int num625 = 0; num625 < 2; num625 = num1063 + 1)
																			{
																				Vector2 spinningpoint9;
																				spinningpoint9..ctor(0f, 0f - num613);
																				spinningpoint9 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
																				spinningpoint9 = spinningpoint9.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866, default(Vector2));
																				int num626 = Dust.NewDust(this.position, this.width, this.height, 219 + Main.rand.Next(5), 0f, 0f, 100, default(Color), 1f);
																				Dust dust124 = Main.dust[num626];
																				dust124.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
																				Dust dust125 = dust124;
																				Dust dust212 = dust125;
																				dust212.velocity *= 0.5f;
																				float ptr;
																				if (dust124.velocity.Y > 0f)
																				{
																					ptr = ref dust124.velocity.Y;
																					ptr *= -1f;
																				}
																				dust125 = dust124;
																				dust212 = dust125;
																				dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
																				dust125 = dust124;
																				dust212 = dust125;
																				dust212.velocity += spinningpoint9;
																				dust124.scale = 0.6f;
																				dust124.fadeIn = dust124.scale + 0.2f;
																				ptr = ref dust124.velocity.Y;
																				ptr *= 2f;
																				num1063 = num625;
																			}
																			return;
																		}
																		else if (this.aiStyle == 74)
																		{
																			if (this.extraUpdates == 1)
																			{
																				ref float ptr = ref this.localAI[0];
																				ptr *= this.localAI[1];
																				ptr = ref this.localAI[1];
																				ptr -= 0.001f;
																				if ((double)this.localAI[0] < 0.01)
																				{
																					this.Kill();
																					return;
																				}
																			}
																		}
																		else
																		{
																			if (this.aiStyle == 75)
																			{
																				this.AI_075();
																				return;
																			}
																			if (this.aiStyle == 76)
																			{
																				Player player5 = Main.player[this.owner];
																				player5.heldProj = this.whoAmI;
																				if (this.type == 441)
																				{
																					if (player5.mount.Type != 9)
																					{
																						this.Kill();
																						return;
																					}
																				}
																				else if (this.type == 453 && player5.mount.Type != 8)
																				{
																					this.Kill();
																					return;
																				}
																				if (Main.myPlayer == this.owner)
																				{
																					this.position.X = Main.screenPosition.X + (float)Main.mouseX;
																					this.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
																					if (this.ai[0] != this.position.X - player5.position.X || this.ai[1] != this.position.Y - player5.position.Y)
																					{
																						this.netUpdate = true;
																					}
																					this.ai[0] = this.position.X - player5.position.X;
																					this.ai[1] = this.position.Y - player5.position.Y;
																					player5.mount.AimAbility(player5, this.position);
																					if (!player5.channel)
																					{
																						player5.mount.UseAbility(player5, this.position, false);
																						this.Kill();
																					}
																					return;
																				}
																				this.position.X = player5.position.X + this.ai[0];
																				this.position.Y = player5.position.Y + this.ai[1];
																				if (this.type == 441)
																				{
																					if (!player5.mount.AbilityCharging)
																					{
																						player5.mount.StartAbilityCharge(player5);
																					}
																				}
																				else if (this.type == 453 && !player5.mount.AbilityActive)
																				{
																					player5.mount.UseAbility(player5, this.position, false);
																				}
																				player5.mount.AimAbility(player5, this.position);
																				return;
																			}
																			else
																			{
																				if (this.aiStyle == 77)
																				{
																					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
																					if (activeSound != null)
																					{
																						if (activeSound.Volume == 0f)
																						{
																							activeSound.Stop();
																							float[] array5 = this.localAI;
																							int num1069 = 0;
																							SlotId invalid = SlotId.Invalid;
																							array5[num1069] = invalid.ToFloat();
																						}
																						activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
																					}
																					else
																					{
																						float[] array6 = this.localAI;
																						int num1070 = 0;
																						SlotId invalid = SlotId.Invalid;
																						array6[num1070] = invalid.ToFloat();
																					}
																					if (this.ai[1] == 1f)
																					{
																						this.friendly = false;
																						if (this.alpha < 255)
																						{
																							this.alpha += 51;
																						}
																						if (this.alpha >= 255)
																						{
																							this.alpha = 255;
																							this.Kill();
																							return;
																						}
																					}
																					else
																					{
																						if (this.alpha > 0)
																						{
																							this.alpha -= 50;
																						}
																						if (this.alpha < 0)
																						{
																							this.alpha = 0;
																						}
																					}
																					float num627 = 30f;
																					float num628 = num627 * 4f;
																					ref float ptr = ref this.ai[0];
																					ref float ptr37 = ref ptr;
																					float num1064 = ptr;
																					ptr37 = num1064 + 1f;
																					if (this.ai[0] > num628)
																					{
																						this.ai[0] = 0f;
																					}
																					Vector2 vector53 = -Vector2.UnitY.RotatedBy((double)(6.2831855f * this.ai[0] / num627), default(Vector2));
																					float val = 0.75f + vector53.Y * 0.25f;
																					float val2 = 0.8f - vector53.Y * 0.2f;
																					float num629 = Math.Max(val, val2);
																					this.position += new Vector2((float)this.width, (float)this.height) / 2f;
																					this.width = (this.height = (int)(80f * num629));
																					this.position -= new Vector2((float)this.width, (float)this.height) / 2f;
																					int num1063 = this.frameCounter;
																					this.frameCounter = num1063 + 1;
																					if (this.frameCounter >= 3)
																					{
																						this.frameCounter = 0;
																						num1063 = this.frame;
																						this.frame = num1063 + 1;
																						if (this.frame >= 4)
																						{
																							this.frame = 0;
																						}
																					}
																					for (int num630 = 0; num630 < 1; num630 = num1063 + 1)
																					{
																						float num631 = 55f * num629;
																						float num632 = 11f * num629;
																						float num633 = 0.5f;
																						int num634 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.5f);
																						Main.dust[num634].noGravity = true;
																						Dust dust126 = Main.dust[num634];
																						Dust dust212 = dust126;
																						dust212.velocity *= 2f;
																						Main.dust[num634].position = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * (num632 + num633 * (float)Main.rand.NextDouble() * num631) + base.Center;
																						Main.dust[num634].velocity = Main.dust[num634].velocity / 2f + Vector2.Normalize(Main.dust[num634].position - base.Center);
																						if (Main.rand.Next(2) == 0)
																						{
																							num634 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.9f);
																							Main.dust[num634].noGravity = true;
																							dust126 = Main.dust[num634];
																							dust212 = dust126;
																							dust212.velocity *= 1.2f;
																							Main.dust[num634].position = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * (num632 + num633 * (float)Main.rand.NextDouble() * num631) + base.Center;
																							Main.dust[num634].velocity = Main.dust[num634].velocity / 2f + Vector2.Normalize(Main.dust[num634].position - base.Center);
																						}
																						if (Main.rand.Next(4) == 0)
																						{
																							num634 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.7f);
																							Main.dust[num634].noGravity = true;
																							dust126 = Main.dust[num634];
																							dust212 = dust126;
																							dust212.velocity *= 1.2f;
																							Main.dust[num634].position = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * (num632 + num633 * (float)Main.rand.NextDouble() * num631) + base.Center;
																							Main.dust[num634].velocity = Main.dust[num634].velocity / 2f + Vector2.Normalize(Main.dust[num634].position - base.Center);
																						}
																						num1063 = num630;
																					}
																					return;
																				}
																				if (this.aiStyle == 78)
																				{
																					if (this.alpha > 0)
																					{
																						this.alpha -= 30;
																					}
																					if (this.alpha < 0)
																					{
																						this.alpha = 0;
																					}
																					Vector2 v7 = this.ai[0].ToRotationVector2();
																					float num635 = this.velocity.ToRotation();
																					float num636 = v7.ToRotation();
																					double num637 = (double)(num636 - num635);
																					if (num637 > 3.141592653589793)
																					{
																						num637 -= 6.283185307179586;
																					}
																					if (num637 < -3.141592653589793)
																					{
																						num637 += 6.283185307179586;
																					}
																					this.velocity = this.velocity.RotatedBy(num637 * 0.05000000074505806, default(Vector2));
																					this.velocity *= 0.96f;
																					this.rotation = this.velocity.ToRotation() - 1.5707964f;
																					if (Main.myPlayer == this.owner && this.timeLeft > 60)
																					{
																						this.timeLeft = 60;
																						return;
																					}
																				}
																				else if (this.aiStyle == 79)
																				{
																					bool flag34 = true;
																					int num638 = (int)this.ai[0] - 1;
																					if (this.type == 447 && (this.ai[0] == 0f || ((!Main.npc[num638].active || Main.npc[num638].type != 392) && (!Main.npc[num638].active || Main.npc[num638].type != 395 || Main.npc[num638].ai[3] % 120f < 60f || Main.npc[num638].ai[0] != 2f))))
																					{
																						flag34 = false;
																					}
																					if (!flag34)
																					{
																						this.Kill();
																						return;
																					}
																					NPC nPC8 = Main.npc[num638];
																					float num639 = nPC8.Center.Y + 46f;
																					float num640 = num639;
																					if (this.type == 447)
																					{
																						int target = nPC8.target;
																						if (nPC8.type == 392)
																						{
																							target = Main.npc[(int)nPC8.ai[0]].target;
																						}
																						Player player6 = Main.player[target];
																						if (player6 != null && player6.active && !player6.dead)
																						{
																							num640 = player6.Bottom.Y;
																						}
																					}
																					num640 /= 16f;
																					int num641 = (int)nPC8.Center.X / 16;
																					int num642 = (int)num639 / 16;
																					int num643 = 0;
																					if ((float)num642 >= num640 && Main.tile[num641, num642].nactive() && Main.tileSolid[(int)(*Main.tile[num641, num642].type)] && !Main.tileSolidTop[(int)(*Main.tile[num641, num642].type)])
																					{
																						num643 = 1;
																					}
																					else
																					{
																						while (num643 < 150 && num642 + num643 < Main.maxTilesY)
																						{
																							int num644 = num642 + num643;
																							int num1063;
																							if ((float)num644 >= num640 && Main.tile[num641, num644].nactive() && Main.tileSolid[(int)(*Main.tile[num641, num644].type)] && !Main.tileSolidTop[(int)(*Main.tile[num641, num644].type)])
																							{
																								num1063 = num643;
																								num643 = num1063 - 1;
																								break;
																							}
																							num1063 = num643;
																							num643 = num1063 + 1;
																						}
																					}
																					this.position.X = nPC8.Center.X - (float)(this.width / 2);
																					this.position.Y = num639;
																					this.height = (num643 + 1) * 16;
																					int num645 = (int)this.position.Y + this.height;
																					if (Main.tile[num641, num645 / 16].nactive() && Main.tileSolid[(int)(*Main.tile[num641, num645 / 16].type)] && !Main.tileSolidTop[(int)(*Main.tile[num641, num645 / 16].type)])
																					{
																						int num646 = num645 % 16;
																						this.height -= num646 - 2;
																					}
																					if (this.type == 447)
																					{
																						int num1063;
																						for (int num647 = 0; num647 < 2; num647 = num1063 + 1)
																						{
																							int num648 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 16f), this.width, 16, 228, 0f, 0f, 0, default(Color), 1f);
																							Main.dust[num648].noGravity = true;
																							Dust dust127 = Main.dust[num648];
																							Dust dust212 = dust127;
																							dust212.velocity *= 0.5f;
																							ref float ptr = ref Main.dust[num648].velocity.X;
																							ptr -= (float)num647 - nPC8.velocity.X * 2f / 3f;
																							Main.dust[num648].scale = 2.8f;
																							num1063 = num647;
																						}
																						if (Main.rand.Next(5) == 0)
																						{
																							int num649 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - (float)(this.width / 2 * Math.Sign(nPC8.velocity.X)) - 4f, this.position.Y + (float)this.height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
																							Dust dust128 = Main.dust[num649];
																							Dust dust212 = dust128;
																							dust212.velocity *= 0.5f;
																							ref float ptr = ref Main.dust[num649].velocity.X;
																							ptr -= nPC8.velocity.X / 2f;
																							Main.dust[num649].velocity.Y = 0f - Math.Abs(Main.dust[num649].velocity.Y);
																						}
																					}
																					if (this.type == 447)
																					{
																						int num1063 = this.frameCounter + 1;
																						this.frameCounter = num1063;
																						if (num1063 >= 5)
																						{
																							this.frameCounter = 0;
																							num1063 = this.frame + 1;
																							this.frame = num1063;
																							if (num1063 >= 4)
																							{
																								this.frame = 0;
																								return;
																							}
																						}
																					}
																				}
																				else
																				{
																					if (this.aiStyle == 80)
																					{
																						int num1063;
																						if (this.ai[0] == 0f && this.ai[1] > 0f)
																						{
																							ref float ptr = ref this.ai[1];
																							ref float ptr38 = ref ptr;
																							float num1064 = ptr;
																							ptr38 = num1064 - 1f;
																						}
																						else if (this.ai[0] == 0f && this.ai[1] == 0f)
																						{
																							this.ai[0] = 1f;
																							this.ai[1] = (float)Player.FindClosest(this.position, this.width, this.height);
																							this.netUpdate = true;
																							float num650 = this.velocity.Length();
																							this.velocity = Vector2.Normalize(this.velocity) * (num650 + 4f);
																							for (int num651 = 0; num651 < 8; num651 = num1063 + 1)
																							{
																								Vector2 spinningpoint10 = Vector2.UnitX * -8f;
																								spinningpoint10 += -Vector2.UnitY.RotatedBy((double)((float)num651 * 3.1415927f / 4f), default(Vector2)) * new Vector2(2f, 8f);
																								spinningpoint10 = spinningpoint10.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
																								int num652 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																								Main.dust[num652].scale = 1.5f;
																								Main.dust[num652].noGravity = true;
																								Main.dust[num652].position = base.Center + spinningpoint10;
																								Main.dust[num652].velocity = this.velocity * 0f;
																								num1063 = num651;
																							}
																						}
																						else if (this.ai[0] == 1f)
																						{
																							this.tileCollide = true;
																							ref float ptr = ref this.localAI[1];
																							ref float ptr39 = ref ptr;
																							float num1064 = ptr;
																							ptr39 = num1064 + 1f;
																							float num653 = 180f;
																							float num654 = 0f;
																							float num655 = 30f;
																							if (this.localAI[1] == num653)
																							{
																								this.Kill();
																								return;
																							}
																							if (this.localAI[1] >= num654 && this.localAI[1] < num654 + num655)
																							{
																								Vector2 v8 = Main.player[(int)this.ai[1]].Center - base.Center;
																								float num656 = this.velocity.ToRotation();
																								float num657 = v8.ToRotation();
																								double num658 = (double)(num657 - num656);
																								if (num658 > 3.141592653589793)
																								{
																									num658 -= 6.283185307179586;
																								}
																								if (num658 < -3.141592653589793)
																								{
																									num658 += 6.283185307179586;
																								}
																								this.velocity = this.velocity.RotatedBy(num658 * 0.20000000298023224, default(Vector2));
																							}
																							if (this.localAI[1] % 5f == 0f)
																							{
																								for (int num659 = 0; num659 < 4; num659 = num1063 + 1)
																								{
																									Vector2 spinningpoint11 = Vector2.UnitX * -8f;
																									spinningpoint11 += -Vector2.UnitY.RotatedBy((double)((float)num659 * 3.1415927f / 4f), default(Vector2)) * new Vector2(2f, 4f);
																									spinningpoint11 = spinningpoint11.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
																									int num660 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num660].scale = 1.5f;
																									Main.dust[num660].noGravity = true;
																									Main.dust[num660].position = base.Center + spinningpoint11;
																									Main.dust[num660].velocity = this.velocity * 0f;
																									num1063 = num659;
																								}
																							}
																						}
																						this.rotation = this.velocity.ToRotation() + 1.5707964f;
																						num1063 = this.frameCounter + 1;
																						this.frameCounter = num1063;
																						if (num1063 >= 3)
																						{
																							this.frameCounter = 0;
																							num1063 = this.frame + 1;
																							this.frame = num1063;
																							if (num1063 >= 3)
																							{
																								this.frame = 0;
																							}
																						}
																						int num661 = 0;
																						while ((float)num661 < 1f + this.ai[0])
																						{
																							Vector2 vector54 = Vector2.UnitY.RotatedBy((double)this.rotation, default(Vector2)) * 8f * (float)(num661 + 1);
																							int num662 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f);
																							Main.dust[num662].position = base.Center + vector54;
																							Main.dust[num662].scale = 1f;
																							Main.dust[num662].noGravity = true;
																							num1063 = num661;
																							num661 = num1063 + 1;
																						}
																						for (int num663 = 0; num663 < 255; num663 = num1063 + 1)
																						{
																							Player player7 = Main.player[num663];
																							if (player7.active && !player7.dead && Vector2.Distance(player7.Center, base.Center) <= 42f)
																							{
																								this.Kill();
																								return;
																							}
																							num1063 = num663;
																						}
																						return;
																					}
																					if (this.aiStyle == 81)
																					{
																						int num664 = this.penetrate;
																						if (this.ai[0] == 0f)
																						{
																							this.tileCollide = true;
																							ref float ptr = ref this.localAI[0];
																							ref float ptr40 = ref ptr;
																							float num1064 = ptr;
																							ptr40 = num1064 + 1f;
																							if (this.localAI[0] > 7f)
																							{
																								int num665 = Utils.SelectRandom<int>(Main.rand, new int[]
																								{
																									226,
																									229
																								});
																								Vector2 center8 = base.Center;
																								Vector2 spinningpoint12;
																								spinningpoint12..ctor(-16f, 16f);
																								float num666 = 1f;
																								spinningpoint12 += new Vector2(-16f, 16f);
																								spinningpoint12 = spinningpoint12.RotatedBy((double)this.rotation, default(Vector2));
																								int num667 = 4;
																								int num668 = Dust.NewDust(center8 + spinningpoint12 + Vector2.One * (float)(-(float)num667), num667 * 2, num667 * 2, num665, 0f, 0f, 100, default(Color), num666);
																								Dust dust129 = Main.dust[num668];
																								Dust dust212 = dust129;
																								dust212.velocity *= 0.1f;
																								if (Main.rand.Next(6) != 0)
																								{
																									Main.dust[num668].noGravity = true;
																								}
																							}
																							float num669 = 0.01f;
																							int num670 = 5;
																							int num671 = num670 * 15;
																							int num672 = 0;
																							if (this.localAI[0] > 7f)
																							{
																								if (this.localAI[1] == 0f)
																								{
																									this.scale -= num669;
																									this.alpha += num670;
																									if (this.alpha > num671)
																									{
																										this.alpha = num671;
																										this.localAI[1] = 1f;
																									}
																								}
																								else if (this.localAI[1] == 1f)
																								{
																									this.scale += num669;
																									this.alpha -= num670;
																									if (this.alpha <= num672)
																									{
																										this.alpha = num672;
																										this.localAI[1] = 0f;
																									}
																								}
																							}
																							this.rotation = this.velocity.ToRotation() + 0.7853982f;
																						}
																						else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num664))
																						{
																							this.tileCollide = false;
																							this.alpha += 15;
																							this.velocity *= 0.98f;
																							this.localAI[0] = 0f;
																							int num673 = -1;
																							Vector2 vector55 = base.Center;
																							float num674 = 250f;
																							int num1063;
																							for (int num675 = 0; num675 < 200; num675 = num1063 + 1)
																							{
																								NPC nPC9 = Main.npc[num675];
																								if (nPC9.CanBeChasedBy(this, false))
																								{
																									Vector2 center9 = nPC9.Center;
																									float num676 = Vector2.Distance(center9, base.Center);
																									if (num676 < num674)
																									{
																										num674 = num676;
																										vector55 = center9;
																										num673 = num675;
																									}
																								}
																								num1063 = num675;
																							}
																							if (this.alpha >= 255)
																							{
																								if (this.ai[0] == 1f)
																								{
																									this.Kill();
																									return;
																								}
																								if (num673 >= 0)
																								{
																									this.netUpdate = true;
																									ref float ptr = ref this.ai[0];
																									ptr += (float)num664;
																									this.position = vector55 + ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * 100f - new Vector2((float)this.width, (float)this.height) / 2f;
																									this.velocity = Vector2.Normalize(vector55 - base.Center) * 15f;
																									this.rotation = this.velocity.ToRotation() + 0.7853982f;
																								}
																								else
																								{
																									this.Kill();
																								}
																							}
																							if (this.active && num673 >= 0)
																							{
																								this.position += Main.npc[num673].velocity;
																							}
																							if (Main.rand.Next(3) == 0)
																							{
																								int num677 = Utils.SelectRandom<int>(Main.rand, new int[]
																								{
																									226,
																									229
																								});
																								Vector2 center10 = base.Center;
																								Vector2 vector56;
																								vector56..ctor(-16f, 16f);
																								vector56 = vector56;
																								float num678 = 0.6f;
																								vector56 += new Vector2(-16f, 16f);
																								vector56 = vector56.RotatedBy((double)this.rotation, default(Vector2));
																								int num679 = 4;
																								int num680 = Dust.NewDust(center10 + vector56 + Vector2.One * (float)(-(float)num679), num679 * 2, num679 * 2, num677, 0f, 0f, 100, default(Color), num678);
																								Dust dust130 = Main.dust[num680];
																								Dust dust212 = dust130;
																								dust212.velocity *= 0.1f;
																								Main.dust[num680].noGravity = true;
																							}
																						}
																						else if (this.ai[0] >= (float)(1 + num664) && this.ai[0] < (float)(1 + num664 * 2))
																						{
																							this.scale = 0.9f;
																							this.tileCollide = false;
																							this.rotation = this.velocity.ToRotation() + 0.7853982f;
																							ref float ptr = ref this.ai[1];
																							ref float ptr41 = ref ptr;
																							float num1064 = ptr;
																							ptr41 = num1064 + 1f;
																							if (this.ai[1] >= 15f)
																							{
																								this.alpha += 51;
																								this.velocity *= 0.8f;
																								if (this.alpha >= 255)
																								{
																									this.Kill();
																								}
																							}
																							else
																							{
																								this.alpha -= 125;
																								if (this.alpha < 0)
																								{
																									this.alpha = 0;
																								}
																								this.velocity *= 0.98f;
																							}
																							ptr = ref this.localAI[0];
																							ref float ptr42 = ref ptr;
																							num1064 = ptr;
																							ptr42 = num1064 + 1f;
																							int num681 = -1;
																							Vector2 center11 = base.Center;
																							float num682 = 250f;
																							int num1063;
																							for (int num683 = 0; num683 < 200; num683 = num1063 + 1)
																							{
																								NPC nPC10 = Main.npc[num683];
																								if (nPC10.CanBeChasedBy(this, false))
																								{
																									Vector2 center12 = nPC10.Center;
																									float num684 = Vector2.Distance(center12, base.Center);
																									if (num684 < num682)
																									{
																										num682 = num684;
																										num681 = num683;
																									}
																								}
																								num1063 = num683;
																							}
																							if (num681 >= 0)
																							{
																								this.position += Main.npc[num681].velocity;
																							}
																							int num685 = Utils.SelectRandom<int>(Main.rand, new int[]
																							{
																								226,
																								229
																							});
																							Vector2 center13 = base.Center;
																							Vector2 spinningpoint13;
																							spinningpoint13..ctor(-16f, 16f);
																							float num686 = 0.6f;
																							spinningpoint13 += new Vector2(-16f, 16f);
																							spinningpoint13 = spinningpoint13.RotatedBy((double)this.rotation, default(Vector2));
																							int num687 = 4;
																							int num688 = Dust.NewDust(center13 + spinningpoint13 + Vector2.One * (float)(-(float)num687), num687 * 2, num687 * 2, num685, 0f, 0f, 100, default(Color), num686);
																							Dust dust131 = Main.dust[num688];
																							Dust dust212 = dust131;
																							dust212.velocity *= 0.1f;
																							Main.dust[num688].noGravity = true;
																						}
																						float num689 = (float)this.alpha / 255f;
																						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num689, 0.4f * num689, 1f * num689);
																						return;
																					}
																					if (this.aiStyle == 82)
																					{
																						this.alpha -= 40;
																						if (this.alpha < 0)
																						{
																							this.alpha = 0;
																						}
																						if (this.ai[0] == 0f)
																						{
																							ref float ptr = ref this.localAI[0];
																							ref float ptr43 = ref ptr;
																							float num1064 = ptr;
																							ptr43 = num1064 + 1f;
																							if (this.localAI[0] >= 45f)
																							{
																								this.localAI[0] = 0f;
																								this.ai[0] = 1f;
																								this.ai[1] = 0f - this.ai[1];
																								this.netUpdate = true;
																							}
																							this.velocity.X = this.velocity.RotatedBy((double)this.ai[1], default(Vector2)).X;
																							this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
																							ptr = ref this.velocity.Y;
																							ptr -= 0.08f;
																							if (this.velocity.Y > 0f)
																							{
																								ptr = ref this.velocity.Y;
																								ptr -= 0.2f;
																							}
																							if (this.velocity.Y < -7f)
																							{
																								this.velocity.Y = -7f;
																							}
																						}
																						else if (this.ai[0] == 1f)
																						{
																							ref float ptr = ref this.localAI[0];
																							ref float ptr44 = ref ptr;
																							float num1064 = ptr;
																							ptr44 = num1064 + 1f;
																							if (this.localAI[0] >= 90f)
																							{
																								this.localAI[0] = 0f;
																								this.ai[0] = 2f;
																								this.ai[1] = (float)Player.FindClosest(this.position, this.width, this.height);
																								this.netUpdate = true;
																							}
																							this.velocity.X = this.velocity.RotatedBy((double)this.ai[1], default(Vector2)).X;
																							this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
																							ptr = ref this.velocity.Y;
																							ptr -= 0.08f;
																							if (this.velocity.Y > 0f)
																							{
																								ptr = ref this.velocity.Y;
																								ptr -= 0.2f;
																							}
																							if (this.velocity.Y < -7f)
																							{
																								this.velocity.Y = -7f;
																							}
																						}
																						else if (this.ai[0] == 2f)
																						{
																							Vector2 value7 = Main.player[(int)this.ai[1]].Center - base.Center;
																							if (value7.Length() < 30f)
																							{
																								this.Kill();
																								return;
																							}
																							value7.Normalize();
																							value7 *= 14f;
																							value7 = Vector2.Lerp(this.velocity, value7, 0.6f);
																							if (value7.Y < 6f)
																							{
																								value7.Y = 6f;
																							}
																							float num690 = 0.4f;
																							if (this.velocity.X < value7.X)
																							{
																								ref float ptr = ref this.velocity.X;
																								ptr += num690;
																								if (this.velocity.X < 0f && value7.X > 0f)
																								{
																									ptr = ref this.velocity.X;
																									ptr += num690;
																								}
																							}
																							else if (this.velocity.X > value7.X)
																							{
																								ref float ptr = ref this.velocity.X;
																								ptr -= num690;
																								if (this.velocity.X > 0f && value7.X < 0f)
																								{
																									ptr = ref this.velocity.X;
																									ptr -= num690;
																								}
																							}
																							if (this.velocity.Y < value7.Y)
																							{
																								ref float ptr = ref this.velocity.Y;
																								ptr += num690;
																								if (this.velocity.Y < 0f && value7.Y > 0f)
																								{
																									ptr = ref this.velocity.Y;
																									ptr += num690;
																								}
																							}
																							else if (this.velocity.Y > value7.Y)
																							{
																								ref float ptr = ref this.velocity.Y;
																								ptr -= num690;
																								if (this.velocity.Y > 0f && value7.Y < 0f)
																								{
																									ptr = ref this.velocity.Y;
																									ptr -= num690;
																								}
																							}
																						}
																						if (this.alpha < 40)
																						{
																							int num691 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - this.velocity.X) / 3f, (0f - this.velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
																							Main.dust[num691].noGravity = true;
																						}
																						this.rotation = this.velocity.ToRotation() + 1.5707964f;
																						return;
																					}
																					if (this.aiStyle == 83)
																					{
																						if (this.alpha > 200)
																						{
																							this.alpha = 200;
																						}
																						this.alpha -= 5;
																						if (this.alpha < 0)
																						{
																							this.alpha = 0;
																						}
																						float num692 = (float)this.alpha / 255f;
																						this.scale = 1f - num692;
																						if (this.ai[0] >= 0f)
																						{
																							ref float ptr = ref this.ai[0];
																							ref float ptr45 = ref ptr;
																							float num1064 = ptr;
																							ptr45 = num1064 + 1f;
																						}
																						int num1063;
																						if (this.ai[0] == -1f)
																						{
																							this.frame = 1;
																							this.extraUpdates = 1;
																						}
																						else if (this.ai[0] < 30f)
																						{
																							this.position = Main.npc[(int)this.ai[1]].Center - new Vector2((float)this.width, (float)this.height) / 2f - this.velocity;
																						}
																						else
																						{
																							this.velocity *= 0.96f;
																							num1063 = this.frameCounter + 1;
																							this.frameCounter = num1063;
																							if (num1063 >= 6)
																							{
																								this.frameCounter = 0;
																								num1063 = this.frame + 1;
																								this.frame = num1063;
																								if (num1063 >= 2)
																								{
																									this.frame = 0;
																								}
																							}
																						}
																						if (this.alpha >= 40)
																						{
																							return;
																						}
																						for (int num693 = 0; num693 < 2; num693 = num1063 + 1)
																						{
																							float num694 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																							if (num694 < -0.5f)
																							{
																								num694 = -0.5f;
																							}
																							if (num694 > 0.5f)
																							{
																								num694 = 0.5f;
																							}
																							Vector2 vector57 = new Vector2((float)(-(float)this.width) * 0.65f * this.scale, 0f).RotatedBy((double)(num694 * 6.2831855f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																							int num695 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - this.velocity.X) / 3f, (0f - this.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
																							Main.dust[num695].velocity = Vector2.Zero;
																							Main.dust[num695].position = base.Center + vector57;
																							Main.dust[num695].noGravity = true;
																							num1063 = num693;
																						}
																						return;
																					}
																					else if (this.aiStyle == 84)
																					{
																						Vector2? vector58 = null;
																						if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
																						{
																							this.velocity = -Vector2.UnitY;
																						}
																						if (this.type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
																						{
																							if (Main.npc[(int)this.ai[1]].ai[0] == -2f)
																							{
																								this.Kill();
																								return;
																							}
																							Vector2 elipseSizes = new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1];
																							Vector2 vector59 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), elipseSizes);
																							this.position = Main.npc[(int)this.ai[1]].Center + vector59 - new Vector2((float)this.width, (float)this.height) / 2f;
																						}
																						else if (this.type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
																						{
																							Vector2 elipseSizes = new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1];
																							Vector2 vector60 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), elipseSizes);
																							this.position = Main.npc[(int)this.ai[1]].Center + vector60 - new Vector2((float)this.width, (float)this.height) / 2f;
																						}
																						else if (this.type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
																						{
																							Vector2 vector61;
																							vector61..ctor((float)(Main.npc[(int)this.ai[1]].direction * 6), -4f);
																							this.position = Main.npc[(int)this.ai[1]].Center + vector61 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
																						}
																						else if (this.type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
																						{
																							Vector2 vector62 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																							this.position = Main.projectile[(int)this.ai[1]].Center + vector62 * 16f - new Vector2((float)this.width, (float)this.height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
																							this.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																						}
																						else if (this.type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
																						{
																							Projectile projectile = Main.projectile[(int)this.ai[1]];
																							base.Center = projectile.Center;
																							Vector2 vector63 = this.ai[0].ToRotationVector2().RotatedBy((double)((float)(-(float)projectile.direction) * 1.0471976f / 50f), default(Vector2));
																							this.ai[0] = vector63.ToRotation();
																							this.velocity = Vector2.Normalize(vector63);
																						}
																						else
																						{
																							if (this.type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
																							{
																								this.Kill();
																								return;
																							}
																							float num696 = (float)((int)this.ai[0]) - 2.5f;
																							Vector2 vector64 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
																							Projectile projectile2 = Main.projectile[(int)this.ai[1]];
																							float num697 = num696 * 0.5235988f;
																							Vector2 zero2 = Vector2.Zero;
																							float num698;
																							float num699;
																							float num700;
																							float num701;
																							if (projectile2.ai[0] < 180f)
																							{
																								num698 = 1f - projectile2.ai[0] / 180f;
																								num699 = 20f - projectile2.ai[0] / 180f * 14f;
																								if (projectile2.ai[0] < 120f)
																								{
																									num700 = 20f - 4f * (projectile2.ai[0] / 120f);
																									this.Opacity = projectile2.ai[0] / 120f * 0.4f;
																								}
																								else
																								{
																									num700 = 16f - 10f * ((projectile2.ai[0] - 120f) / 60f);
																									this.Opacity = 0.4f + (projectile2.ai[0] - 120f) / 60f * 0.6f;
																								}
																								num701 = -22f + projectile2.ai[0] / 180f * 20f;
																							}
																							else
																							{
																								num698 = 0f;
																								num700 = 1.75f;
																								num699 = 6f;
																								this.Opacity = 1f;
																								num701 = -2f;
																							}
																							float num702 = (projectile2.ai[0] + num696 * num700) / (num700 * 6f) * 6.2831855f;
																							num697 = Vector2.UnitY.RotatedBy((double)num702, default(Vector2)).Y * 0.5235988f * num698;
																							zero2 = (Vector2.UnitY.RotatedBy((double)num702, default(Vector2)) * new Vector2(4f, num699)).RotatedBy((double)projectile2.velocity.ToRotation(), default(Vector2));
																							this.position = projectile2.Center + vector64 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
																							this.position += projectile2.velocity.ToRotation().ToRotationVector2() * num701;
																							this.position += zero2;
																							this.velocity = Vector2.Normalize(projectile2.velocity).RotatedBy((double)num697, default(Vector2));
																							this.scale = 1.4f * (1f - num698);
																							this.damage = projectile2.damage;
																							if (projectile2.ai[0] >= 180f)
																							{
																								this.damage *= 3;
																								vector58 = new Vector2?(projectile2.Center);
																							}
																							if (!Collision.CanHitLine(Main.player[this.owner].Center, 0, 0, projectile2.Center, 0, 0))
																							{
																								vector58 = new Vector2?(Main.player[this.owner].Center);
																							}
																							this.friendly = (projectile2.ai[0] > 30f);
																						}
																						if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
																						{
																							this.velocity = -Vector2.UnitY;
																						}
																						if (this.type == 461)
																						{
																							ref float ptr = ref this.ai[0];
																							ref float ptr46 = ref ptr;
																							float num1064 = ptr;
																							ptr46 = num1064 + 1f;
																							if (this.ai[0] >= 300f)
																							{
																								this.Kill();
																								return;
																							}
																							this.scale = (float)Math.Sin((double)(this.ai[0] * 3.1415927f / 300f)) * 10f;
																							if (this.scale > 1f)
																							{
																								this.scale = 1f;
																							}
																						}
																						if (this.type == 455)
																						{
																							if (this.localAI[0] == 0f)
																							{
																								SoundEngine.PlaySound(29, (int)this.position.X, (int)this.position.Y, 104, 1f, 0f);
																							}
																							float num703 = 1f;
																							if (Main.npc[(int)this.ai[1]].type == 400)
																							{
																								num703 = 0.4f;
																							}
																							ref float ptr = ref this.localAI[0];
																							ref float ptr47 = ref ptr;
																							float num1064 = ptr;
																							ptr47 = num1064 + 1f;
																							if (this.localAI[0] >= 180f)
																							{
																								this.Kill();
																								return;
																							}
																							this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.1415927f / 180f)) * 10f * num703;
																							if (this.scale > num703)
																							{
																								this.scale = num703;
																							}
																						}
																						if (this.type == 642)
																						{
																							float num704 = 1f;
																							ref float ptr = ref this.localAI[0];
																							ref float ptr48 = ref ptr;
																							float num1064 = ptr;
																							ptr48 = num1064 + 1f;
																							if (this.localAI[0] >= 50f)
																							{
																								this.Kill();
																								return;
																							}
																							this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.1415927f / 50f)) * 10f * num704;
																							if (this.scale > num704)
																							{
																								this.scale = num704;
																							}
																						}
																						if (this.type == 537)
																						{
																							float num705 = 0.8f;
																							ref float ptr = ref this.localAI[0];
																							ref float ptr49 = ref ptr;
																							float num1064 = ptr;
																							ptr49 = num1064 + 1f;
																							if (this.localAI[0] >= 90f)
																							{
																								this.Kill();
																								return;
																							}
																							this.scale = (float)Math.Sin((double)(this.localAI[0] * 3.1415927f / 90f)) * 10f * num705;
																							if (this.scale > num705)
																							{
																								this.scale = num705;
																							}
																						}
																						float num706 = this.velocity.ToRotation();
																						if (this.type == 455)
																						{
																							num706 += this.ai[0];
																						}
																						this.rotation = num706 - 1.5707964f;
																						this.velocity = num706.ToRotationVector2();
																						float num707 = 0f;
																						float num708 = 0f;
																						Vector2 samplingPoint = base.Center;
																						if (vector58 != null)
																						{
																							samplingPoint = vector58.Value;
																						}
																						if (this.type == 455)
																						{
																							num707 = 3f;
																							num708 = (float)this.width;
																						}
																						else if (this.type == 461)
																						{
																							num707 = 2f;
																							num708 = 0f;
																						}
																						else if (this.type == 642)
																						{
																							num707 = 2f;
																							num708 = 0f;
																						}
																						else if (this.type == 632)
																						{
																							num707 = 2f;
																							num708 = 0f;
																						}
																						else if (this.type == 537)
																						{
																							num707 = 2f;
																							num708 = 0f;
																						}
																						float[] array2 = new float[(int)num707];
																						Collision.LaserScan(samplingPoint, this.velocity, num708 * this.scale, 2400f, array2);
																						float num709 = 0f;
																						int num1063;
																						for (int num710 = 0; num710 < array2.Length; num710 = num1063 + 1)
																						{
																							num709 += array2[num710];
																							num1063 = num710;
																						}
																						num709 /= num707;
																						float amount = 0.5f;
																						if (this.type == 455)
																						{
																							NPC nPC11 = Main.npc[(int)this.ai[1]];
																							if (nPC11.type == 396)
																							{
																								Player player8 = Main.player[nPC11.target];
																								if (!Collision.CanHitLine(nPC11.position, nPC11.width, nPC11.height, player8.position, player8.width, player8.height))
																								{
																									num709 = Math.Min(2400f, Vector2.Distance(nPC11.Center, player8.Center) + 150f);
																									amount = 0.75f;
																								}
																							}
																						}
																						if (this.type == 632)
																						{
																							amount = 0.75f;
																						}
																						this.localAI[1] = MathHelper.Lerp(this.localAI[1], num709, amount);
																						if (this.type == 455)
																						{
																							Vector2 vector65 = base.Center + this.velocity * (this.localAI[1] - 14f);
																							for (int num711 = 0; num711 < 2; num711 = num1063 + 1)
																							{
																								float num712 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																								float num713 = (float)Main.rand.NextDouble() * 2f + 2f;
																								Vector2 vector66;
																								vector66..ctor((float)Math.Cos((double)num712) * num713, (float)Math.Sin((double)num712) * num713);
																								int num714 = Dust.NewDust(vector65, 0, 0, 229, vector66.X, vector66.Y, 0, default(Color), 1f);
																								Main.dust[num714].noGravity = true;
																								Main.dust[num714].scale = 1.7f;
																								num1063 = num711;
																							}
																							if (Main.rand.Next(5) == 0)
																							{
																								Vector2 vector67 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																								int num715 = Dust.NewDust(vector65 + vector67 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																								Dust dust132 = Main.dust[num715];
																								Dust dust212 = dust132;
																								dust212.velocity *= 0.5f;
																								Main.dust[num715].velocity.Y = 0f - Math.Abs(Main.dust[num715].velocity.Y);
																							}
																							DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
																							Vector2 center21 = base.Center;
																							Vector2 end = base.Center + this.velocity * this.localAI[1];
																							float width = (float)this.width * this.scale;
																							Utils.TileActionAttempt plot;
																							if ((plot = Projectile.<>O.<3>__CastLight) == null)
																							{
																								plot = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																							}
																							Utils.PlotTileLine(center21, end, width, plot);
																						}
																						else if (this.type == 642)
																						{
																							Vector2 vector68 = base.Center + this.velocity * (this.localAI[1] - 14f);
																							for (int num716 = 0; num716 < 2; num716 = num1063 + 1)
																							{
																								float num717 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																								float num718 = (float)Main.rand.NextDouble() * 2f + 2f;
																								Vector2 vector69;
																								vector69..ctor((float)Math.Cos((double)num717) * num718, (float)Math.Sin((double)num717) * num718);
																								int num719 = Dust.NewDust(vector68, 0, 0, 229, vector69.X, vector69.Y, 0, default(Color), 1f);
																								Main.dust[num719].noGravity = true;
																								Main.dust[num719].scale = 1.7f;
																								num1063 = num716;
																							}
																							if (Main.rand.Next(5) == 0)
																							{
																								Vector2 vector70 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																								int num720 = Dust.NewDust(vector68 + vector70 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																								Dust dust133 = Main.dust[num720];
																								Dust dust212 = dust133;
																								dust212.velocity *= 0.5f;
																								Main.dust[num720].velocity.Y = 0f - Math.Abs(Main.dust[num720].velocity.Y);
																							}
																							DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
																							Vector2 center22 = base.Center;
																							Vector2 end2 = base.Center + this.velocity * this.localAI[1];
																							float width2 = (float)this.width * this.scale;
																							Utils.TileActionAttempt plot2;
																							if ((plot2 = Projectile.<>O.<3>__CastLight) == null)
																							{
																								plot2 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																							}
																							Utils.PlotTileLine(center22, end2, width2, plot2);
																						}
																						if (this.type == 461)
																						{
																							Vector2 vector71 = base.Center + this.velocity * (this.localAI[1] - 8f);
																							for (int num721 = 0; num721 < 2; num721 = num1063 + 1)
																							{
																								float num722 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																								float num723 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																								Vector2 vector72;
																								vector72..ctor((float)Math.Cos((double)num722) * num723, (float)Math.Sin((double)num722) * num723);
																								int num724 = Dust.NewDust(vector71, 0, 0, 226, vector72.X, vector72.Y, 0, default(Color), 1f);
																								Main.dust[num724].noGravity = true;
																								Main.dust[num724].scale = 1.2f;
																								num1063 = num721;
																							}
																							if (Main.rand.Next(5) == 0)
																							{
																								Vector2 vector73 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																								int num725 = Dust.NewDust(vector71 + vector73 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																								Dust dust134 = Main.dust[num725];
																								Dust dust212 = dust134;
																								dust212.velocity *= 0.5f;
																								Main.dust[num725].velocity.Y = 0f - Math.Abs(Main.dust[num725].velocity.Y);
																							}
																							DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
																							Vector2 center23 = base.Center;
																							Vector2 end3 = base.Center + this.velocity * this.localAI[1];
																							float width3 = (float)this.width * this.scale;
																							Utils.TileActionAttempt plot3;
																							if ((plot3 = Projectile.<>O.<3>__CastLight) == null)
																							{
																								plot3 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																							}
																							Utils.PlotTileLine(center23, end3, width3, plot3);
																						}
																						if (this.type == 537)
																						{
																							float num726 = MathHelper.Clamp(MathHelper.Lerp(0f, 1f, this.localAI[0] / 30f), 0f, 1f);
																							Vector2 vector74 = base.Center + this.velocity * (this.localAI[1] - 8f);
																							int num727 = (int)(2f * num726);
																							if (num727 > 0)
																							{
																								for (int num728 = 0; num728 < num727; num728 = num1063 + 1)
																								{
																									float num729 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																									float num730 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																									Vector2 vector75;
																									vector75..ctor((float)Math.Cos((double)num729) * num730, (float)Math.Sin((double)num729) * num730);
																									int num731 = Dust.NewDust(vector74, 0, 0, 226, vector75.X, vector75.Y, 0, default(Color), 1f);
																									Main.dust[num731].noGravity = true;
																									Main.dust[num731].scale = 1.2f;
																									num1063 = num728;
																								}
																							}
																							int maxValue2 = 5 + (int)((1f - num726) * 5f);
																							if (Main.rand.Next(maxValue2) == 0)
																							{
																								Vector2 vector76 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																								int num732 = Dust.NewDust(vector74 + vector76 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																								Dust dust135 = Main.dust[num732];
																								Dust dust212 = dust135;
																								dust212.velocity *= 0.5f;
																								Main.dust[num732].velocity.Y = 0f - Math.Abs(Main.dust[num732].velocity.Y);
																							}
																							DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
																							Vector2 center24 = base.Center;
																							Vector2 end4 = base.Center + this.velocity * this.localAI[1];
																							float width4 = (float)this.width * this.scale;
																							Utils.TileActionAttempt plot4;
																							if ((plot4 = Projectile.<>O.<3>__CastLight) == null)
																							{
																								plot4 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																							}
																							Utils.PlotTileLine(center24, end4, width4, plot4);
																						}
																						if (this.type != 632 || Math.Abs(this.localAI[1] - num709) >= 100f || this.scale <= 0.15f)
																						{
																							return;
																						}
																						float laserLuminance = 0.5f;
																						float laserAlphaMultiplier = 0f;
																						float lastPrismHue = this.GetLastPrismHue(this.ai[0], ref laserLuminance, ref laserAlphaMultiplier);
																						Color color = Main.hslToRgb(lastPrismHue, 1f, laserLuminance, byte.MaxValue);
																						color.A = (byte)((float)color.A * laserAlphaMultiplier);
																						Vector2 vector77 = base.Center + this.velocity * (this.localAI[1] - 14.5f * this.scale);
																						float x5 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
																						for (int num733 = 0; num733 < 2; num733 = num1063 + 1)
																						{
																							float num734 = this.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																							float num735 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																							Vector2 vector78;
																							vector78..ctor((float)Math.Cos((double)num734) * num735, (float)Math.Sin((double)num734) * num735);
																							int num736 = Dust.NewDust(vector77, 0, 0, 267, vector78.X, vector78.Y, 0, default(Color), 1f);
																							Main.dust[num736].color = color;
																							Main.dust[num736].scale = 1.2f;
																							if (this.scale > 1f)
																							{
																								Dust dust136 = Main.dust[num736];
																								Dust dust212 = dust136;
																								dust212.velocity *= this.scale;
																								dust136 = Main.dust[num736];
																								dust212 = dust136;
																								dust212.scale *= this.scale;
																							}
																							Main.dust[num736].noGravity = true;
																							if (this.scale != 1.4f && num736 != 6000)
																							{
																								Dust dust137 = Dust.CloneDust(num736);
																								dust137.color = Color.White;
																								Dust dust138 = dust137;
																								Dust dust212 = dust138;
																								dust212.scale /= 2f;
																							}
																							float hue = (x5 + Main.rand.NextFloat() * 0.4f) % 1f;
																							Main.dust[num736].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f, byte.MaxValue), this.scale / 1.4f);
																							num1063 = num733;
																						}
																						if (Main.rand.Next(5) == 0)
																						{
																							Vector2 vector79 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																							int num737 = Dust.NewDust(vector77 + vector79 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																							Dust dust139 = Main.dust[num737];
																							Dust dust212 = dust139;
																							dust212.velocity *= 0.5f;
																							Main.dust[num737].velocity.Y = 0f - Math.Abs(Main.dust[num737].velocity.Y);
																						}
																						DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
																						float value8 = 0.1f * (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 20f));
																						Vector2 size2;
																						size2..ctor(this.velocity.Length() * this.localAI[1], (float)this.width * this.scale);
																						float num738 = this.velocity.ToRotation();
																						if (Main.netMode != 2)
																						{
																							((WaterShaderData)Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(this.position + new Vector2(size2.X * 0.5f, 0f).RotatedBy((double)num738, default(Vector2)), new Color(0.5f, 0.1f * (float)Math.Sign(value8) + 0.5f, 0f, 1f) * Math.Abs(value8), size2, RippleShape.Square, num738);
																						}
																						Vector2 center25 = base.Center;
																						Vector2 end5 = base.Center + this.velocity * this.localAI[1];
																						float width5 = (float)this.width * this.scale;
																						Utils.TileActionAttempt plot5;
																						if ((plot5 = Projectile.<>O.<3>__CastLight) == null)
																						{
																							plot5 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																						}
																						Utils.PlotTileLine(center25, end5, width5, plot5);
																						return;
																					}
																					else if (this.aiStyle == 85)
																					{
																						Vector2 vector80;
																						vector80..ctor(0f, 216f);
																						this.alpha -= 15;
																						if (this.alpha < 0)
																						{
																							this.alpha = 0;
																						}
																						int num739 = (int)Math.Abs(this.ai[0]) - 1;
																						int num740 = (int)this.ai[1];
																						if (!Main.npc[num739].active || Main.npc[num739].type != 396)
																						{
																							this.Kill();
																							return;
																						}
																						ref float ptr = ref this.localAI[0];
																						ref float ptr50 = ref ptr;
																						float num1064 = ptr;
																						ptr50 = num1064 + 1f;
																						if (this.localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
																						{
																							ptr = ref this.ai[0];
																							ptr *= -1f;
																							this.netUpdate = true;
																						}
																						if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
																						{
																							ptr = ref this.ai[0];
																							ptr *= -1f;
																							this.netUpdate = true;
																						}
																						this.rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + vector80).ToRotation() + 1.5707964f;
																						if (this.ai[0] > 0f)
																						{
																							Vector2 value9 = Main.player[(int)this.ai[1]].Center - base.Center;
																							if (value9.X != 0f || value9.Y != 0f)
																							{
																								this.velocity = Vector2.Normalize(value9) * Math.Min(16f, value9.Length());
																							}
																							else
																							{
																								this.velocity = Vector2.Zero;
																							}
																							if (value9.Length() < 20f && this.localAI[1] == 0f)
																							{
																								this.localAI[1] = 1f;
																								int timeToAdd = 840;
																								if (Main.expertMode)
																								{
																									timeToAdd = 960;
																								}
																								if (!Main.player[num740].creativeGodMode)
																								{
																									Main.player[num740].AddBuff(145, timeToAdd, true, false);
																									return;
																								}
																							}
																						}
																						else
																						{
																							Vector2 value10 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + vector80;
																							if (value10.X != 0f || value10.Y != 0f)
																							{
																								this.velocity = Vector2.Normalize(value10) * Math.Min(16f, value10.Length());
																							}
																							else
																							{
																								this.velocity = Vector2.Zero;
																							}
																							if (value10.Length() < 20f)
																							{
																								this.Kill();
																								return;
																							}
																						}
																					}
																					else if (this.aiStyle == 86)
																					{
																						if (this.localAI[1] == 0f)
																						{
																							this.localAI[1] = 1f;
																							SoundEngine.PlaySound(SoundID.Item120, new Vector2?(this.position), null);
																						}
																						ref float ptr = ref this.ai[0];
																						ref float ptr51 = ref ptr;
																						float num1064 = ptr;
																						ptr51 = num1064 + 1f;
																						if (this.ai[1] == 1f)
																						{
																							if (this.ai[0] >= 130f)
																							{
																								this.alpha += 10;
																							}
																							else
																							{
																								this.alpha -= 10;
																							}
																							if (this.alpha < 0)
																							{
																								this.alpha = 0;
																							}
																							if (this.alpha > 255)
																							{
																								this.alpha = 255;
																							}
																							if (this.ai[0] >= 150f)
																							{
																								this.Kill();
																								return;
																							}
																							if (this.ai[0] % 30f == 0f && Main.netMode != 1)
																							{
																								Vector2 vector81 = this.rotation.ToRotationVector2();
																								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector81.X, vector81.Y, 464, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
																							}
																							this.rotation += 0.10471976f;
																							Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
																							return;
																						}
																						else
																						{
																							this.position -= this.velocity;
																							if (this.ai[0] >= 40f)
																							{
																								this.alpha += 3;
																							}
																							else
																							{
																								this.alpha -= 40;
																							}
																							if (this.alpha < 0)
																							{
																								this.alpha = 0;
																							}
																							if (this.alpha > 255)
																							{
																								this.alpha = 255;
																							}
																							if (this.ai[0] >= 45f)
																							{
																								this.Kill();
																								return;
																							}
																							Vector2 vector82 = new Vector2(0f, -720f).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																							float num741 = this.ai[0] % 45f / 45f;
																							Vector2 spinningpoint14 = vector82 * num741;
																							int num1063;
																							for (int num742 = 0; num742 < 6; num742 = num1063 + 1)
																							{
																								Vector2 vector83 = base.Center + spinningpoint14.RotatedBy((double)((float)num742 * 6.2831855f / 6f), default(Vector2));
																								Lighting.AddLight(vector83, 0.3f, 0.75f, 0.9f);
																								for (int num743 = 0; num743 < 2; num743 = num1063 + 1)
																								{
																									int num744 = Dust.NewDust(vector83 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent, 1f);
																									Main.dust[num744].noGravity = true;
																									num1063 = num743;
																								}
																								num1063 = num742;
																							}
																							return;
																						}
																					}
																					else
																					{
																						if (this.aiStyle == 87)
																						{
																							this.position.Y = this.ai[0];
																							this.height = (int)this.ai[1];
																							if (base.Center.X > Main.player[this.owner].Center.X)
																							{
																								this.direction = 1;
																							}
																							else
																							{
																								this.direction = -1;
																							}
																							this.velocity.X = (float)this.direction * 1E-06f;
																							if (this.owner == Main.myPlayer)
																							{
																								int num1063;
																								for (int num745 = 0; num745 < 1000; num745 = num1063 + 1)
																								{
																									if (Main.projectile[num745].active && num745 != this.whoAmI && Main.projectile[num745].type == this.type && Main.projectile[num745].owner == this.owner && Main.projectile[num745].timeLeft > this.timeLeft)
																									{
																										this.Kill();
																										return;
																									}
																									num1063 = num745;
																								}
																							}
																							float num746 = (float)(this.width * this.height) * 0.0045f;
																							int num747 = 0;
																							while ((float)num747 < num746)
																							{
																								int num748 = Dust.NewDust(this.position, this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
																								Main.dust[num748].noGravity = true;
																								Dust dust140 = Main.dust[num748];
																								Dust dust212 = dust140;
																								dust212.velocity *= 0.5f;
																								ref float ptr = ref Main.dust[num748].velocity.Y;
																								ptr -= 0.5f;
																								Main.dust[num748].scale = 1.4f;
																								ptr = ref Main.dust[num748].position.X;
																								ptr += 6f;
																								ptr = ref Main.dust[num748].position.Y;
																								ptr -= 2f;
																								int num1063 = num747;
																								num747 = num1063 + 1;
																							}
																							return;
																						}
																						if (this.aiStyle == 88)
																						{
																							if (this.type == 465)
																							{
																								if (this.localAI[1] == 0f)
																								{
																									SoundEngine.PlaySound(SoundID.Item121, new Vector2?(this.position), null);
																									this.localAI[1] = 1f;
																								}
																								if (this.ai[0] < 180f)
																								{
																									this.alpha -= 5;
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																								}
																								else
																								{
																									this.alpha += 5;
																									if (this.alpha > 255)
																									{
																										this.alpha = 255;
																										this.Kill();
																										return;
																									}
																								}
																								ref float ptr = ref this.ai[0];
																								ref float ptr52 = ref ptr;
																								float num1064 = ptr;
																								ptr52 = num1064 + 1f;
																								int num1063;
																								if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
																								{
																									int[] array3 = new int[5];
																									Vector2[] array4 = new Vector2[5];
																									int num749 = 0;
																									float num750 = 2000f;
																									for (int num751 = 0; num751 < 255; num751 = num1063 + 1)
																									{
																										if (Main.player[num751].active && !Main.player[num751].dead)
																										{
																											Vector2 center14 = Main.player[num751].Center;
																											float num752 = Vector2.Distance(center14, base.Center);
																											if (num752 < num750 && Collision.CanHit(base.Center, 1, 1, center14, 1, 1))
																											{
																												array3[num749] = num751;
																												array4[num749] = center14;
																												int num753 = num749 + 1;
																												num749 = num753;
																												if (num753 >= array4.Length)
																												{
																													break;
																												}
																											}
																										}
																										num1063 = num751;
																									}
																									for (int num754 = 0; num754 < num749; num754 = num1063 + 1)
																									{
																										Vector2 vector84 = array4[num754] - base.Center;
																										float ai = (float)Main.rand.Next(100);
																										Vector2 vector85 = Vector2.Normalize(vector84.RotatedByRandom(0.7853981852531433)) * 7f;
																										Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector85.X, vector85.Y, 466, this.damage, 0f, Main.myPlayer, vector84.ToRotation(), ai, 0f);
																										num1063 = num754;
																									}
																								}
																								Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
																								num1063 = this.frameCounter + 1;
																								this.frameCounter = num1063;
																								if (num1063 >= 4)
																								{
																									this.frameCounter = 0;
																									num1063 = this.frame + 1;
																									this.frame = num1063;
																									if (num1063 >= Main.projFrames[this.type])
																									{
																										this.frame = 0;
																									}
																								}
																								if (this.alpha >= 150 || this.ai[0] >= 180f)
																								{
																									return;
																								}
																								for (int num755 = 0; num755 < 1; num755 = num1063 + 1)
																								{
																									float num756 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																									if (num756 < -0.5f)
																									{
																										num756 = -0.5f;
																									}
																									if (num756 > 0.5f)
																									{
																										num756 = 0.5f;
																									}
																									Vector2 vector86 = new Vector2((float)(-(float)this.width) * 0.2f * this.scale, 0f).RotatedBy((double)(num756 * 6.2831855f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																									int num757 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - this.velocity.X) / 3f, (0f - this.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
																									Main.dust[num757].position = base.Center + vector86;
																									Main.dust[num757].velocity = Vector2.Normalize(Main.dust[num757].position - base.Center) * 2f;
																									Main.dust[num757].noGravity = true;
																									num1063 = num755;
																								}
																								for (int num758 = 0; num758 < 1; num758 = num1063 + 1)
																								{
																									float num759 = (float)Main.rand.NextDouble() * 1f - 0.5f;
																									if (num759 < -0.5f)
																									{
																										num759 = -0.5f;
																									}
																									if (num759 > 0.5f)
																									{
																										num759 = 0.5f;
																									}
																									Vector2 vector87 = new Vector2((float)(-(float)this.width) * 0.6f * this.scale, 0f).RotatedBy((double)(num759 * 6.2831855f), default(Vector2)).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
																									int num760 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - this.velocity.X) / 3f, (0f - this.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
																									Main.dust[num760].velocity = Vector2.Zero;
																									Main.dust[num760].position = base.Center + vector87;
																									Main.dust[num760].noGravity = true;
																									num1063 = num758;
																								}
																								return;
																							}
																							else if (this.type == 466)
																							{
																								int num1063 = this.frameCounter;
																								this.frameCounter = num1063 + 1;
																								Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
																								if (this.velocity == Vector2.Zero)
																								{
																									if (this.frameCounter >= this.extraUpdates * 2)
																									{
																										this.frameCounter = 0;
																										bool flag35 = true;
																										for (int num761 = 1; num761 < this.oldPos.Length; num761 = num1063 + 1)
																										{
																											if (this.oldPos[num761] != this.oldPos[0])
																											{
																												flag35 = false;
																											}
																											num1063 = num761;
																										}
																										if (flag35)
																										{
																											this.Kill();
																											return;
																										}
																									}
																									if (Main.rand.Next(this.extraUpdates) == 0)
																									{
																										for (int num762 = 0; num762 < 2; num762 = num1063 + 1)
																										{
																											float num763 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																											float num764 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																											Vector2 vector88;
																											vector88..ctor((float)Math.Cos((double)num763) * num764, (float)Math.Sin((double)num763) * num764);
																											int num765 = Dust.NewDust(base.Center, 0, 0, 226, vector88.X, vector88.Y, 0, default(Color), 1f);
																											Main.dust[num765].noGravity = true;
																											Main.dust[num765].scale = 1.2f;
																											num1063 = num762;
																										}
																										if (Main.rand.Next(5) == 0)
																										{
																											Vector2 vector89 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																											int num766 = Dust.NewDust(base.Center + vector89 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																											Dust dust141 = Main.dust[num766];
																											Dust dust212 = dust141;
																											dust212.velocity *= 0.5f;
																											Main.dust[num766].velocity.Y = 0f - Math.Abs(Main.dust[num766].velocity.Y);
																											return;
																										}
																									}
																								}
																								else
																								{
																									if (this.frameCounter < this.extraUpdates * 2)
																									{
																										return;
																									}
																									this.frameCounter = 0;
																									float num767 = this.velocity.Length();
																									UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
																									int num768 = 0;
																									Vector2 spinningpoint15 = -Vector2.UnitY;
																									Vector2 vector90;
																									do
																									{
																										int num769 = unifiedRandom.Next();
																										this.ai[1] = (float)num769;
																										num769 %= 100;
																										float f = (float)num769 / 100f * 6.2831855f;
																										vector90 = f.ToRotationVector2();
																										if (vector90.Y > 0f)
																										{
																											ref float ptr = ref vector90.Y;
																											ptr *= -1f;
																										}
																										bool flag36 = false;
																										if (vector90.Y > -0.02f)
																										{
																											flag36 = true;
																										}
																										if (vector90.X * (float)(this.extraUpdates + 1) * 2f * num767 + this.localAI[0] > 40f)
																										{
																											flag36 = true;
																										}
																										if (vector90.X * (float)(this.extraUpdates + 1) * 2f * num767 + this.localAI[0] < -40f)
																										{
																											flag36 = true;
																										}
																										if (!flag36)
																										{
																											goto IL_21738;
																										}
																										num1063 = num768;
																										num768 = num1063 + 1;
																									}
																									while (num1063 < 100);
																									this.velocity = Vector2.Zero;
																									this.localAI[1] = 1f;
																									goto IL_21744;
																									IL_21738:
																									spinningpoint15 = vector90;
																									IL_21744:
																									if (this.velocity != Vector2.Zero)
																									{
																										ref float ptr = ref this.localAI[0];
																										ptr += spinningpoint15.X * (float)(this.extraUpdates + 1) * 2f * num767;
																										this.velocity = spinningpoint15.RotatedBy((double)(this.ai[0] + 1.5707964f), default(Vector2)) * num767;
																										this.rotation = this.velocity.ToRotation() + 1.5707964f;
																										return;
																									}
																								}
																							}
																							else
																							{
																								if (this.type != 580)
																								{
																									return;
																								}
																								if (this.localAI[1] == 0f && this.ai[0] >= 900f)
																								{
																									ref float ptr = ref this.ai[0];
																									ptr -= 1000f;
																									this.localAI[1] = -1f;
																								}
																								int num1063 = this.frameCounter;
																								this.frameCounter = num1063 + 1;
																								Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
																								if (this.velocity == Vector2.Zero)
																								{
																									if (this.frameCounter >= this.extraUpdates * 2)
																									{
																										this.frameCounter = 0;
																										bool flag37 = true;
																										for (int num770 = 1; num770 < this.oldPos.Length; num770 = num1063 + 1)
																										{
																											if (this.oldPos[num770] != this.oldPos[0])
																											{
																												flag37 = false;
																											}
																											num1063 = num770;
																										}
																										if (flag37)
																										{
																											this.Kill();
																											return;
																										}
																									}
																									if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((this.localAI[1] == 2f) ? 2 : 6) == 0))
																									{
																										for (int num771 = 0; num771 < 2; num771 = num1063 + 1)
																										{
																											float num772 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
																											float num773 = (float)Main.rand.NextDouble() * 0.8f + 1f;
																											Vector2 vector91;
																											vector91..ctor((float)Math.Cos((double)num772) * num773, (float)Math.Sin((double)num772) * num773);
																											int num774 = Dust.NewDust(base.Center, 0, 0, 226, vector91.X, vector91.Y, 0, default(Color), 1f);
																											Main.dust[num774].noGravity = true;
																											Main.dust[num774].scale = 1.2f;
																											num1063 = num771;
																										}
																										if (Main.rand.Next(5) == 0)
																										{
																											Vector2 vector92 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
																											int num775 = Dust.NewDust(base.Center + vector92 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
																											Dust dust142 = Main.dust[num775];
																											Dust dust212 = dust142;
																											dust212.velocity *= 0.5f;
																											Main.dust[num775].velocity.Y = 0f - Math.Abs(Main.dust[num775].velocity.Y);
																											return;
																										}
																									}
																								}
																								else
																								{
																									if (this.frameCounter < this.extraUpdates * 2)
																									{
																										return;
																									}
																									this.frameCounter = 0;
																									float num776 = this.velocity.Length();
																									UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
																									int num777 = 0;
																									Vector2 spinningpoint16 = -Vector2.UnitY;
																									float ptr;
																									Vector2 vector93;
																									do
																									{
																										int num778 = unifiedRandom2.Next();
																										this.ai[1] = (float)num778;
																										num778 %= 100;
																										float f2 = (float)num778 / 100f * 6.2831855f;
																										vector93 = f2.ToRotationVector2();
																										if (vector93.Y > 0f)
																										{
																											ptr = ref vector93.Y;
																											ptr *= -1f;
																										}
																										bool flag38 = false;
																										if (vector93.Y > -0.02f)
																										{
																											flag38 = true;
																										}
																										if (vector93.X * (float)(this.extraUpdates + 1) * 2f * num776 + this.localAI[0] > 40f)
																										{
																											flag38 = true;
																										}
																										if (vector93.X * (float)(this.extraUpdates + 1) * 2f * num776 + this.localAI[0] < -40f)
																										{
																											flag38 = true;
																										}
																										if (!flag38)
																										{
																											goto IL_21D0E;
																										}
																										num1063 = num777;
																										num777 = num1063 + 1;
																									}
																									while (num1063 < 100);
																									this.velocity = Vector2.Zero;
																									if (this.localAI[1] < 1f)
																									{
																										ptr = ref this.localAI[1];
																										ptr += 2f;
																										goto IL_21D1A;
																									}
																									goto IL_21D1A;
																									IL_21D0E:
																									spinningpoint16 = vector93;
																									IL_21D1A:
																									if (!(this.velocity != Vector2.Zero))
																									{
																										return;
																									}
																									ptr = ref this.localAI[0];
																									ptr += spinningpoint16.X * (float)(this.extraUpdates + 1) * 2f * num776;
																									this.velocity = spinningpoint16.RotatedBy((double)(this.ai[0] + 1.5707964f), default(Vector2)) * num776;
																									this.rotation = this.velocity.ToRotation() + 1.5707964f;
																									if (Main.rand.Next(4) == 0 && Main.netMode != 1 && this.localAI[1] == 0f)
																									{
																										float num779 = (float)Main.rand.Next(-3, 4) * 1.0471976f / 3f;
																										Vector2 vector94 = this.ai[0].ToRotationVector2().RotatedBy((double)num779, default(Vector2)) * this.velocity.Length();
																										if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector94 * 50f, 0, 0))
																										{
																											Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - vector94.X, base.Center.Y - vector94.Y, vector94.X, vector94.Y, this.type, this.damage, this.knockBack, this.owner, vector94.ToRotation() + 1000f, this.ai[1], 0f);
																											return;
																										}
																									}
																								}
																							}
																						}
																						else if (this.aiStyle == 89)
																						{
																							if (this.ai[1] == -1f)
																							{
																								this.alpha += 12;
																							}
																							else if (this.ai[0] < 300f)
																							{
																								this.alpha -= 5;
																							}
																							else
																							{
																								this.alpha += 12;
																							}
																							if (this.alpha < 0)
																							{
																								this.alpha = 0;
																							}
																							if (this.alpha > 255)
																							{
																								this.alpha = 255;
																							}
																							this.scale = 1f - (float)this.alpha / 255f;
																							this.scale *= 0.6f;
																							this.rotation += 0.014959966f;
																							if (this.localAI[1] == 0f)
																							{
																								this.localAI[1] = 1f;
																								SoundEngine.PlaySound(SoundID.Item123, new Vector2?(this.position), null);
																							}
																							if (this.alpha == 0)
																							{
																								int num1063;
																								for (int num780 = 0; num780 < 2; num780 = num1063 + 1)
																								{
																									float num781 = (float)Main.rand.Next(2, 4);
																									float num782 = this.scale;
																									if (num780 == 1)
																									{
																										num782 *= 0.42f;
																										num781 *= -0.75f;
																									}
																									Vector2 vector95;
																									vector95..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																									vector95.Normalize();
																									int num783 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 2f);
																									Main.dust[num783].noGravity = true;
																									Main.dust[num783].noLight = true;
																									Main.dust[num783].position = base.Center + vector95 * 204f * num782;
																									if (Main.rand.Next(8) == 0)
																									{
																										Main.dust[num783].velocity = vector95 * (0f - num781) * 2f;
																										Dust dust143 = Main.dust[num783];
																										Dust dust212 = dust143;
																										dust212.scale += 0.5f;
																									}
																									else
																									{
																										Main.dust[num783].velocity = vector95 * (0f - num781);
																									}
																									num1063 = num780;
																								}
																							}
																							ref float ptr = ref this.ai[0];
																							ref float ptr53 = ref ptr;
																							float num1064 = ptr;
																							ptr53 = num1064 + 1f;
																							if (this.ai[0] >= 60f)
																							{
																								int num784 = (int)(this.ai[0] - 0f) / 60;
																								float num785 = this.scale * 0.4f;
																								int num1063;
																								for (int num786 = 0; num786 < 1; num786 = num1063 + 1)
																								{
																									float num787 = (float)Main.rand.Next(1, 3);
																									Vector2 vector96;
																									vector96..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
																									vector96.Normalize();
																									int num788 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 2f);
																									Main.dust[num788].noGravity = true;
																									Main.dust[num788].noLight = true;
																									Main.dust[num788].position = base.Center;
																									if (Main.rand.Next(2) == 0)
																									{
																										Main.dust[num788].velocity = vector96 * num787 * 2f;
																										Dust dust144 = Main.dust[num788];
																										Dust dust212 = dust144;
																										dust212.scale += 0.5f;
																									}
																									else
																									{
																										Main.dust[num788].velocity = vector96 * num787;
																									}
																									Main.dust[num788].fadeIn = 2f;
																									num1063 = num786;
																								}
																							}
																							if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
																							{
																								if (!NPC.AnyNPCs(454))
																								{
																									this.ai[1] = (float)NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 454, 0, 0f, 0f, 0f, 0f, 255);
																								}
																								else
																								{
																									this.ai[1] = (float)NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 521, 0, 0f, 0f, 0f, 0f, 255);
																								}
																							}
																							else if (this.ai[0] == 320f)
																							{
																								this.Kill();
																								return;
																							}
																							bool flag39 = false;
																							if (this.ai[1] == -1f)
																							{
																								if (this.alpha == 255)
																								{
																									flag39 = true;
																								}
																							}
																							else
																							{
																								flag39 = (this.ai[1] < 0f || !Main.npc[(int)this.ai[1]].active);
																								if ((flag39 || Main.npc[(int)this.ai[1]].type != 439) && (flag39 || Main.npc[(int)this.ai[1]].type != 454) && (flag39 || Main.npc[(int)this.ai[1]].type != 521))
																								{
																									flag39 = true;
																								}
																							}
																							if (flag39)
																							{
																								this.Kill();
																								return;
																							}
																							Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
																							return;
																						}
																						else if (this.aiStyle == 90)
																						{
																							if (Main.player[this.owner].dead)
																							{
																								this.Kill();
																							}
																							if (Main.player[this.owner].magicLantern)
																							{
																								this.timeLeft = 2;
																							}
																							if (this.tileCollide)
																							{
																								if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
																								{
																									this.tileCollide = false;
																								}
																								else if (!Collision.SolidCollision(this.position, this.width, this.height) && Collision.CanHitLine(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
																								{
																									this.tileCollide = true;
																								}
																							}
																							this.direction = Main.player[this.owner].direction;
																							this.spriteDirection = this.direction;
																							Lighting.AddLight(this.position, 0.35f, 0.35f, 0.1f);
																							ref float ptr = ref this.localAI[0];
																							ptr += 1f;
																							int num1063;
																							if (this.localAI[0] >= 10f)
																							{
																								this.localAI[0] = 0f;
																								int num789 = 17;
																								if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num789 * 16))
																								{
																									int num790 = (int)base.Center.X / 16;
																									int num791 = (int)base.Center.Y / 16;
																									for (int num792 = num790 - num789; num792 <= num790 + num789; num792 = num1063 + 1)
																									{
																										for (int num793 = num791 - num789; num793 <= num791 + num789; num793 = num1063 + 1)
																										{
																											if (Main.rand.Next(4) == 0 && new Vector2((float)(num790 - num792), (float)(num791 - num793)).Length() < (float)num789 && num792 > 0 && num792 < Main.maxTilesX - 1 && num793 > 0 && num793 < Main.maxTilesY - 1 && Main.tile[num792, num793] != null && Main.tile[num792, num793].active() && Main.IsTileSpelunkable(num792, num793))
																											{
																												int num794 = Dust.NewDust(new Vector2((float)(num792 * 16), (float)(num793 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
																												Main.dust[num794].fadeIn = 0.75f;
																												Dust dust145 = Main.dust[num794];
																												Dust dust212 = dust145;
																												dust212.velocity *= 0.1f;
																												Main.dust[num794].noLight = true;
																											}
																											num1063 = num793;
																										}
																										num1063 = num792;
																									}
																								}
																							}
																							Vector2 vector97 = Main.player[this.owner].Center - base.Center;
																							ptr = ref vector97.X;
																							ptr += (float)(40 * this.direction);
																							ptr = ref vector97.Y;
																							ptr -= 40f;
																							float num795 = vector97.Length();
																							if (num795 > 1000f)
																							{
																								base.Center = Main.player[this.owner].Center;
																							}
																							float num796 = 3f;
																							float num797 = 4f;
																							if (num795 > 200f)
																							{
																								num797 += (num795 - 200f) * 0.1f;
																								this.tileCollide = false;
																							}
																							if (num795 < num797)
																							{
																								this.velocity *= 0.25f;
																								num797 = num795;
																							}
																							if (vector97.X != 0f || vector97.Y != 0f)
																							{
																								vector97.Normalize();
																								vector97 *= num797;
																							}
																							this.velocity = (this.velocity * (num796 - 1f) + vector97) / num796;
																							if (this.velocity.Length() > 6f)
																							{
																								float num798 = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
																								if ((double)Math.Abs(this.rotation - num798) >= 3.14)
																								{
																									if (num798 < this.rotation)
																									{
																										this.rotation -= 6.28f;
																									}
																									else
																									{
																										this.rotation += 6.28f;
																									}
																								}
																								this.rotation = (this.rotation * 4f + num798) / 5f;
																								num1063 = this.frameCounter;
																								this.frameCounter = num1063 + 1;
																								if (this.frameCounter > 4)
																								{
																									this.frameCounter = 0;
																									num1063 = this.frame;
																									this.frame = num1063 + 1;
																									if (this.frame > 7)
																									{
																										this.frame = 4;
																									}
																								}
																								if (this.frame < 4)
																								{
																									this.frame = 7;
																								}
																								return;
																							}
																							if ((double)this.rotation > 3.14)
																							{
																								this.rotation -= 6.28f;
																							}
																							if ((double)this.rotation > -0.01 && (double)this.rotation < 0.01)
																							{
																								this.rotation = 0f;
																							}
																							else
																							{
																								this.rotation *= 0.9f;
																							}
																							num1063 = this.frameCounter;
																							this.frameCounter = num1063 + 1;
																							if (this.frameCounter > 6)
																							{
																								this.frameCounter = 0;
																								num1063 = this.frame;
																								this.frame = num1063 + 1;
																								if (this.frame > 3)
																								{
																									this.frame = 0;
																									return;
																								}
																							}
																						}
																						else if (this.aiStyle == 91)
																						{
																							Vector2 center15 = base.Center;
																							this.scale = 1f - this.localAI[0];
																							this.width = (int)(20f * this.scale);
																							this.height = this.width;
																							this.position.X = center15.X - (float)(this.width / 2);
																							this.position.Y = center15.Y - (float)(this.height / 2);
																							float ptr;
																							if ((double)this.localAI[0] < 0.1)
																							{
																								ptr = ref this.localAI[0];
																								ptr += 0.01f;
																							}
																							else
																							{
																								ptr = ref this.localAI[0];
																								ptr += 0.025f;
																							}
																							if (this.localAI[0] >= 0.95f)
																							{
																								this.Kill();
																							}
																							ptr = ref this.velocity.X;
																							ptr += this.ai[0] * 1.5f;
																							ptr = ref this.velocity.Y;
																							ptr += this.ai[1] * 1.5f;
																							if (this.velocity.Length() > 16f)
																							{
																								this.velocity.Normalize();
																								this.velocity *= 16f;
																							}
																							ptr = ref this.ai[0];
																							ptr *= 1.05f;
																							ptr = ref this.ai[1];
																							ptr *= 1.05f;
																							if (this.scale < 1f)
																							{
																								int num799 = 0;
																								while ((float)num799 < this.scale * 10f)
																								{
																									int num800 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.1f);
																									Main.dust[num800].position = (Main.dust[num800].position + base.Center) / 2f;
																									Main.dust[num800].noGravity = true;
																									Dust dust146 = Main.dust[num800];
																									Dust dust212 = dust146;
																									dust212.velocity *= 0.1f;
																									dust146 = Main.dust[num800];
																									dust212 = dust146;
																									dust212.velocity -= this.velocity * (1.3f - this.scale);
																									Main.dust[num800].fadeIn = (float)(100 + this.owner);
																									dust146 = Main.dust[num800];
																									dust212 = dust146;
																									dust212.scale += this.scale * 0.75f;
																									int num1063 = num799;
																									num799 = num1063 + 1;
																								}
																								return;
																							}
																						}
																						else if (this.aiStyle == 92)
																						{
																							bool flag40 = this.type == 1007;
																							bool flag41 = this.type >= 511 && this.type <= 513;
																							this.tileCollide = false;
																							if (Main.netMode != 1 && flag40 && this.localAI[0] == 0f)
																							{
																								if (this.direction == 0)
																								{
																									this.direction = 1;
																								}
																								ParticleOrchestraType particleOrchestraType2 = ParticleOrchestraType.GasTrap;
																								ParticleOrchestraSettings particleOrchestraSettings = new ParticleOrchestraSettings
																								{
																									PositionInWorld = base.Center,
																									MovementVector = Vector2.Zero
																								};
																								ParticleOrchestrator.BroadcastParticleSpawn(particleOrchestraType2, particleOrchestraSettings);
																							}
																							ref float ptr = ref this.ai[0];
																							ptr += 1f;
																							if (this.ai[1] >= 1f)
																							{
																								ptr = ref this.ai[0];
																								ptr += 2f;
																							}
																							float num801 = 260f;
																							if (flag40)
																							{
																								num801 = 80f;
																							}
																							if (this.ai[0] > num801)
																							{
																								this.Kill();
																								this.ai[0] = num801;
																								return;
																							}
																							float fromValue = this.ai[0] / num801;
																							if (flag40)
																							{
																								this.scale = Utils.Remap(fromValue, 0f, 0.95f, 1f, 6f, true);
																								Vector2 center16 = base.Center;
																								this.width = (int)(50f * this.scale);
																								this.height = (int)(50f * this.scale);
																								base.Center = center16;
																								this.Opacity = MathHelper.Clamp(Utils.Remap(fromValue, 0f, 0.25f, 0f, 1f, true) * Utils.Remap(fromValue, 0.75f, 1f, 1f, 0f, true), 0f, 1f) * 0.85f;
																							}
																							else
																							{
																								this.Opacity = Utils.Remap(fromValue, 0f, 0.3f, 0f, 1f, true) * Utils.Remap(fromValue, 0.3f, 1f, 1f, 0f, true) * 0.7f;
																							}
																							ptr = ref this.localAI[0];
																							ptr += (float)this.direction;
																							this.rotation = (float)this.whoAmI * 0.4002029f + this.localAI[0] * 6.2831855f / 480f;
																							if (flag40)
																							{
																								this.velocity = Vector2.Zero;
																							}
																							else
																							{
																								this.velocity *= 0.96f;
																							}
																							int num1063;
																							if (flag41)
																							{
																								Rectangle rectangle5;
																								rectangle5..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
																								for (int num802 = 0; num802 < 1000; num802 = num1063 + 1)
																								{
																									if (num802 != this.whoAmI)
																									{
																										Projectile projectile3 = Main.projectile[num802];
																										if (projectile3.active && projectile3.type >= 511 && projectile3.type <= 513)
																										{
																											Rectangle value11;
																											value11..ctor((int)projectile3.position.X, (int)projectile3.position.Y, projectile3.width, projectile3.height);
																											if (rectangle5.Intersects(value11))
																											{
																												Vector2 vector98 = projectile3.Center - base.Center;
																												if (vector98 == Vector2.Zero)
																												{
																													if (num802 < this.whoAmI)
																													{
																														vector98.X = -1f;
																														vector98.Y = 1f;
																													}
																													else
																													{
																														vector98.X = 1f;
																														vector98.Y = -1f;
																													}
																												}
																												Vector2 vector99 = vector98.SafeNormalize(Vector2.UnitX) * 0.005f;
																												this.velocity = Vector2.Lerp(this.velocity, this.velocity - vector99, 0.6f);
																												projectile3.velocity = Vector2.Lerp(projectile3.velocity, projectile3.velocity + vector99, 0.6f);
																											}
																										}
																									}
																									num1063 = num802;
																								}
																							}
																							Vector2 vector100 = this.velocity.SafeNormalize(Vector2.Zero);
																							Vector2 pos = base.Center + vector100 * 16f;
																							if (!flag40 && Collision.IsWorldPointSolid(pos, true))
																							{
																								this.velocity = Vector2.Lerp(this.velocity, this.velocity - vector100 * 1f, 0.5f);
																							}
																							if (!flag40)
																							{
																								return;
																							}
																							int num803 = 20;
																							int num804 = 2940;
																							float num805 = MathHelper.Clamp(Utils.Remap(fromValue, 0f, 0.2f, 0f, 1f, true), 0f, 1f) * 180f;
																							if (this.localAI[1] > 0f)
																							{
																								ptr = ref this.localAI[1];
																								ref float ptr54 = ref ptr;
																								float num1064 = ptr;
																								ptr54 = num1064 - 1f;
																							}
																							if (this.localAI[1] > 0f)
																							{
																								return;
																							}
																							this.localAI[1] = 15f;
																							if (Main.netMode != 2)
																							{
																								Player localPlayer = Main.LocalPlayer;
																								if (localPlayer.active && !localPlayer.DeadOrGhost && localPlayer.Center.Distance(base.Center) <= num805)
																								{
																									localPlayer.AddBuff(num803, num804, true, false);
																								}
																							}
																							if (Main.netMode == 1)
																							{
																								return;
																							}
																							for (int num806 = 0; num806 < 200; num806 = num1063 + 1)
																							{
																								NPC nPC12 = Main.npc[num806];
																								if (nPC12.active && !nPC12.buffImmune[num803] && nPC12.Center.Distance(base.Center) <= num805)
																								{
																									nPC12.AddBuff(num803, num804, false);
																								}
																								num1063 = num806;
																							}
																							return;
																						}
																						else if (this.aiStyle == 93)
																						{
																							if (this.alpha > 0)
																							{
																								this.alpha -= 25;
																								if (this.alpha <= 0)
																								{
																									this.alpha = 0;
																								}
																							}
																							if (this.velocity.Y > 18f)
																							{
																								this.velocity.Y = 18f;
																							}
																							if (this.ai[0] == 0f)
																							{
																								ref float ptr = ref this.ai[1];
																								ptr += 1f;
																								if (this.ai[1] > 20f)
																								{
																									ptr = ref this.velocity.Y;
																									ptr += 0.1f;
																									ptr = ref this.velocity.X;
																									ptr *= 0.992f;
																								}
																								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
																								return;
																							}
																							this.tileCollide = false;
																							if (this.ai[0] == 1f)
																							{
																								this.tileCollide = false;
																								this.velocity *= 0.6f;
																							}
																							else
																							{
																								this.tileCollide = false;
																								int num807 = (int)(0f - this.ai[0]);
																								int num1063 = num807;
																								num807 = num1063 - 1;
																								this.position = Main.npc[num807].Center - this.velocity;
																								ref float ptr = ref this.position.X;
																								ptr -= (float)(this.width / 2);
																								ptr = ref this.position.Y;
																								ptr -= (float)(this.height / 2);
																								if (!Main.npc[num807].active || Main.npc[num807].life < 0)
																								{
																									this.tileCollide = true;
																									this.ai[0] = 0f;
																									this.ai[1] = 20f;
																									this.velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
																									this.velocity.Normalize();
																									this.velocity *= 6f;
																									this.netUpdate = true;
																								}
																								else if (this.velocity.Length() > (float)((Main.npc[num807].width + Main.npc[num807].height) / 3))
																								{
																									this.velocity *= 0.99f;
																								}
																							}
																							if (this.ai[0] != 0f)
																							{
																								ref float ptr = ref this.ai[1];
																								ptr += 1f;
																								if (this.ai[1] > 90f)
																								{
																									this.Kill();
																									return;
																								}
																							}
																						}
																						else
																						{
																							if (this.aiStyle == 94)
																							{
																								int num1063 = this.frameCounter + 1;
																								this.frameCounter = num1063;
																								if (num1063 >= 4)
																								{
																									this.frameCounter = 0;
																									num1063 = this.frame + 1;
																									this.frame = num1063;
																									if (num1063 >= Main.projFrames[this.type])
																									{
																										this.frame = 0;
																									}
																								}
																								ref float ptr = ref this.ai[0];
																								ref float ptr55 = ref ptr;
																								float num1064 = ptr;
																								ptr55 = num1064 + 1f;
																								if (this.ai[0] <= 40f)
																								{
																									this.alpha -= 5;
																									if (this.alpha < 0)
																									{
																										this.alpha = 0;
																									}
																									this.velocity *= 0.85f;
																									if (this.ai[0] == 40f)
																									{
																										this.netUpdate = true;
																										switch (Main.rand.Next(3))
																										{
																										case 0:
																											this.ai[1] = 10f;
																											break;
																										case 1:
																											this.ai[1] = 15f;
																											break;
																										case 2:
																											this.ai[1] = 30f;
																											break;
																										}
																									}
																								}
																								else if (this.ai[0] <= 60f)
																								{
																									this.velocity = Vector2.Zero;
																									if (this.ai[0] == 60f)
																									{
																										this.netUpdate = true;
																									}
																								}
																								else if (this.ai[0] <= 210f)
																								{
																									if (Main.netMode != 1)
																									{
																										ptr = ref this.localAI[0];
																										if ((ptr += 1f) >= this.ai[1])
																										{
																											this.localAI[0] = 0f;
																											int num808 = Item.NewItem(this.GetItemSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 0, 0, 73, 1, false, 0, false, false);
																											Main.item[num808].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
																										}
																									}
																									if (this.ai[0] == 210f)
																									{
																										this.netUpdate = true;
																									}
																								}
																								else
																								{
																									this.scale -= 0.033333335f;
																									this.alpha += 15;
																									if (this.ai[0] == 239f)
																									{
																										this.netUpdate = true;
																									}
																									if (this.ai[0] == 240f)
																									{
																										this.Kill();
																									}
																								}
																								if (this.alpha < 90 && Main.rand.Next(3) == 0)
																								{
																									Vector2 vector101 = new Vector2((float)this.width, (float)this.height) * this.scale * 0.85f;
																									vector101 /= 2f;
																									Vector2 vector102 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector101;
																									int num809 = Dust.NewDust(base.Center + vector102, 0, 0, 246, 0f, 0f, 0, default(Color), 1f);
																									Main.dust[num809].position = base.Center + vector102;
																									Main.dust[num809].velocity = Vector2.Zero;
																								}
																								float num810 = 0.8f;
																								float num811 = 0.70980394f;
																								float num812 = 0.28235295f;
																								Lighting.AddLight(base.Center, num810 * 0.3f, num811 * 0.3f, num812 * 0.3f);
																								return;
																							}
																							if (this.aiStyle == 95)
																							{
																								if (this.localAI[0] > 2f)
																								{
																									this.alpha -= 20;
																									if (this.alpha < 100)
																									{
																										this.alpha = 100;
																									}
																								}
																								else
																								{
																									ref float ptr = ref this.localAI[0];
																									ptr += 1f;
																								}
																								if (this.ai[0] > 30f)
																								{
																									float ptr;
																									if (this.velocity.Y > -8f)
																									{
																										ptr = ref this.velocity.Y;
																										ptr -= 0.05f;
																									}
																									ptr = ref this.velocity.X;
																									ptr *= 0.98f;
																								}
																								else
																								{
																									ref float ptr = ref this.ai[0];
																									ptr += 1f;
																								}
																								this.rotation = this.velocity.X * 0.1f;
																								if (this.wet)
																								{
																									float ptr;
																									if (this.velocity.Y > 0f)
																									{
																										ptr = ref this.velocity.Y;
																										ptr *= 0.98f;
																									}
																									if (this.velocity.Y > -8f)
																									{
																										ptr = ref this.velocity.Y;
																										ptr -= 0.2f;
																									}
																									ptr = ref this.velocity.X;
																									ptr *= 0.94f;
																									return;
																								}
																							}
																							else
																							{
																								if (this.aiStyle == 96)
																								{
																									ref float ptr = ref this.ai[0];
																									ptr += 0.6f;
																									if (this.ai[0] > 500f)
																									{
																										this.Kill();
																									}
																									int num1063;
																									for (int num813 = 0; num813 < 2; num813 = num1063 + 1)
																									{
																										if (Main.rand.Next(3) != 0)
																										{
																											int num814 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 170, 0f, 0f, 100, default(Color), 1f);
																											Main.dust[num814].position = (Main.dust[num814].position + base.Center) / 2f;
																											Main.dust[num814].noGravity = true;
																											Dust dust147 = Main.dust[num814];
																											Dust dust212 = dust147;
																											dust212.velocity *= 0.1f;
																											if (num813 == 1)
																											{
																												dust147 = Main.dust[num814];
																												dust212 = dust147;
																												dust212.position += this.velocity / 2f;
																											}
																											float num815 = (800f - this.ai[0]) / 800f;
																											dust147 = Main.dust[num814];
																											dust212 = dust147;
																											dust212.scale *= num815 + 0.1f;
																										}
																										num1063 = num813;
																									}
																									ptr = ref this.velocity.Y;
																									ptr += 0.008f;
																									return;
																								}
																								if (this.aiStyle == 97)
																								{
																									int num1063 = this.frameCounter;
																									this.frameCounter = num1063 + 1;
																									float num816 = 4f;
																									if ((float)this.frameCounter < num816 * 1f)
																									{
																										this.frame = 0;
																									}
																									else if ((float)this.frameCounter < num816 * 2f)
																									{
																										this.frame = 1;
																									}
																									else if ((float)this.frameCounter < num816 * 3f)
																									{
																										this.frame = 2;
																									}
																									else if ((float)this.frameCounter < num816 * 4f)
																									{
																										this.frame = 3;
																									}
																									else if ((float)this.frameCounter < num816 * 5f)
																									{
																										this.frame = 4;
																									}
																									else if ((float)this.frameCounter < num816 * 6f)
																									{
																										this.frame = 3;
																									}
																									else if ((float)this.frameCounter < num816 * 7f)
																									{
																										this.frame = 2;
																									}
																									else if ((float)this.frameCounter < num816 * 8f)
																									{
																										this.frame = 1;
																									}
																									else
																									{
																										this.frameCounter = 0;
																										this.frame = 0;
																									}
																									Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
																									if (this.owner == Main.myPlayer)
																									{
																										for (int num817 = 0; num817 < 1000; num817 = num1063 + 1)
																										{
																											if (num817 != this.whoAmI && Main.projectile[num817].active && Main.projectile[num817].owner == this.owner && Main.projectile[num817].type == this.type)
																											{
																												if (this.timeLeft >= Main.projectile[num817].timeLeft)
																												{
																													Main.projectile[num817].Kill();
																												}
																												else
																												{
																													this.Kill();
																												}
																											}
																											num1063 = num817;
																										}
																									}
																									if (this.ai[0] == 0f)
																									{
																										if ((double)this.velocity.Length() < 0.1)
																										{
																											this.velocity.X = 0f;
																											this.velocity.Y = 0f;
																											this.ai[0] = 1f;
																											this.ai[1] = 45f;
																											return;
																										}
																										this.velocity *= 0.94f;
																										if (this.velocity.X < 0f)
																										{
																											this.direction = -1;
																										}
																										else
																										{
																											this.direction = 1;
																										}
																										this.spriteDirection = this.direction;
																										return;
																									}
																									else
																									{
																										if (Main.player[this.owner].Center.X < base.Center.X)
																										{
																											this.direction = -1;
																										}
																										else
																										{
																											this.direction = 1;
																										}
																										this.spriteDirection = this.direction;
																										ref float ptr = ref this.ai[1];
																										ptr += 1f;
																										float num818 = 0.005f;
																										if (this.ai[1] > 0f)
																										{
																											ptr = ref this.velocity.Y;
																											ptr -= num818;
																										}
																										else
																										{
																											ptr = ref this.velocity.Y;
																											ptr += num818;
																										}
																										if (this.ai[1] >= 90f)
																										{
																											ptr = ref this.ai[1];
																											ptr *= -1f;
																											return;
																										}
																									}
																								}
																								else if (this.aiStyle == 98)
																								{
																									Vector2 vector103;
																									vector103..ctor(this.ai[0], this.ai[1]);
																									Vector2 value12 = vector103 - base.Center;
																									if (value12.Length() < this.velocity.Length())
																									{
																										this.Kill();
																										return;
																									}
																									value12.Normalize();
																									value12 *= 15f;
																									this.velocity = Vector2.Lerp(this.velocity, value12, 0.1f);
																									int num1063;
																									for (int num819 = 0; num819 < 2; num819 = num1063 + 1)
																									{
																										int num820 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100, default(Color), 1f);
																										Main.dust[num820].noGravity = true;
																										Dust dust148 = Main.dust[num820];
																										Dust dust212 = dust148;
																										dust212.position += new Vector2(4f);
																										dust148 = Main.dust[num820];
																										dust212 = dust148;
																										dust212.scale += Main.rand.NextFloat() * 1f;
																										num1063 = num819;
																									}
																									return;
																								}
																								else
																								{
																									if (this.aiStyle == 99 && this.type >= 556 && this.type <= 561)
																									{
																										this.AI_099_1();
																										return;
																									}
																									if (this.aiStyle == 99)
																									{
																										this.AI_099_2();
																										return;
																									}
																									if (this.aiStyle == 100)
																									{
																										this.AI_100_Medusa();
																										return;
																									}
																									if (this.aiStyle == 101)
																									{
																										float num821 = 20f;
																										ref float ptr = ref this.localAI[0];
																										ref float ptr56 = ref ptr;
																										float num1064 = ptr;
																										ptr56 = num1064 + 1f;
																										this.alpha = (int)MathHelper.Lerp(0f, 255f, this.localAI[0] / num821);
																										int num822 = (int)this.ai[0];
																										int num823 = -1;
																										int num824 = -1;
																										int num1063 = this.type;
																										if (num1063 != 536)
																										{
																											if (num1063 == 591)
																											{
																												num824 = 1;
																											}
																										}
																										else
																										{
																											num823 = 535;
																											num824 = 0;
																										}
																										if (num824 != 0)
																										{
																											if (num824 == 1)
																											{
																												if (this.localAI[0] >= num821 || num822 < 0 || num822 > 255 || !Main.player[num822].active || Main.player[num822].dead)
																												{
																													this.Kill();
																													return;
																												}
																												if (this.type == 591)
																												{
																													this.position -= this.velocity;
																													this.position += Main.player[this.owner].position - Main.player[this.owner].oldPosition;
																													this.rotation = this.velocity.ToRotation() + 1.5707964f;
																													if (Math.Sign(this.velocity.X) != Math.Sign(Main.player[num822].velocity.X) && Main.player[num822].velocity.X != 0f)
																													{
																														this.Kill();
																														return;
																													}
																												}
																												else
																												{
																													base.Center = Main.player[num822].Center - this.velocity;
																												}
																											}
																										}
																										else
																										{
																											if (this.localAI[0] >= num821 || num822 < 0 || num822 > 1000 || !Main.projectile[num822].active || Main.projectile[num822].type != num823)
																											{
																												this.Kill();
																												return;
																											}
																											base.Center = Main.projectile[num822].Center - this.velocity;
																										}
																										this.rotation = this.velocity.ToRotation() + 1.5707964f;
																										return;
																									}
																									if (this.aiStyle == 102)
																									{
																										int num825 = 0;
																										float num826 = 0f;
																										float x6 = 0f;
																										float y5 = 0f;
																										int num827 = -1;
																										int num828 = 0;
																										float num829 = 0f;
																										bool flag42 = true;
																										bool flag43 = false;
																										bool flag44 = false;
																										int num1063 = this.type;
																										if (num1063 != 539)
																										{
																											if (num1063 != 573)
																											{
																												if (num1063 == 574)
																												{
																													num825 = 420;
																													num826 = 180f;
																													x6 = 0.15f;
																													y5 = 0.075f;
																													num829 = 8f;
																													flag42 = false;
																													num827 = 576;
																													num828 = 65;
																													if (Main.expertMode)
																													{
																														num828 = 50;
																													}
																													flag44 = true;
																												}
																											}
																											else
																											{
																												num825 = 424;
																												num826 = 90f;
																												num829 = 20f;
																												flag42 = false;
																												flag43 = true;
																											}
																										}
																										else
																										{
																											num825 = 407;
																											num826 = 210f;
																											x6 = 0.15f;
																											y5 = 0.075f;
																											num829 = 16f;
																										}
																										if (flag44)
																										{
																											int num830 = (int)this.ai[1];
																											if (!Main.npc[num830].active || Main.npc[num830].type != num825)
																											{
																												this.Kill();
																												return;
																											}
																											this.timeLeft = 2;
																										}
																										ref float ptr = ref this.ai[0];
																										ref float ptr57 = ref ptr;
																										float num1064 = ptr;
																										ptr57 = num1064 + 1f;
																										if (this.ai[0] < num826)
																										{
																											bool flag45 = true;
																											int num831 = (int)this.ai[1];
																											if (Main.npc[num831].active && Main.npc[num831].type == num825)
																											{
																												if (!flag43 && Main.npc[num831].oldPos[1] != Vector2.Zero)
																												{
																													this.position += Main.npc[num831].position - Main.npc[num831].oldPos[1];
																												}
																											}
																											else
																											{
																												this.ai[0] = num826;
																												flag45 = false;
																											}
																											if (flag45 && !flag43)
																											{
																												this.velocity += new Vector2((float)Math.Sign(Main.npc[num831].Center.X - base.Center.X), (float)Math.Sign(Main.npc[num831].Center.Y - base.Center.Y)) * new Vector2(x6, y5);
																												if (this.velocity.Length() > 6f)
																												{
																													this.velocity *= 6f / this.velocity.Length();
																												}
																											}
																											if (this.type == 539)
																											{
																												if (Main.rand.Next(12) == 0)
																												{
																													int num832 = Dust.NewDust(base.Center, 8, 8, 180, 0f, 0f, 0, default(Color), 1f);
																													Main.dust[num832].position = base.Center;
																													Dust dust149 = Main.dust[num832];
																													Dust dust212 = dust149;
																													dust212.velocity *= 0.2f;
																													Main.dust[num832].noGravity = true;
																												}
																												num1063 = this.frameCounter + 1;
																												this.frameCounter = num1063;
																												if (num1063 >= 4)
																												{
																													this.frameCounter = 0;
																													num1063 = this.frame + 1;
																													this.frame = num1063;
																													if (num1063 >= Main.projFrames[this.type])
																													{
																														this.frame = 0;
																													}
																												}
																												this.rotation = this.velocity.X * 0.1f;
																											}
																											if (this.type == 573)
																											{
																												if (Main.rand.Next(2) == 0)
																												{
																													int num833 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																													Main.dust[num833].position = base.Center;
																													Main.dust[num833].velocity = this.velocity;
																													Main.dust[num833].noGravity = true;
																													Main.dust[num833].scale = 1.5f;
																												}
																												this.alpha = 255;
																											}
																											if (this.type == 574)
																											{
																												if (Main.rand.Next(10) == 0)
																												{
																													int num834 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																													Main.dust[num834].position = base.Center;
																													Main.dust[num834].velocity = this.velocity;
																													Main.dust[num834].noGravity = true;
																													Main.dust[num834].scale = 1.5f;
																												}
																												if (flag45)
																												{
																													int target2 = Main.npc[num831].target;
																													float num835 = this.velocity.ToRotation();
																													if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target2].Center, 0, 0))
																													{
																														num835 = base.DirectionTo(Main.player[target2].Center).ToRotation();
																													}
																													this.rotation = this.rotation.AngleLerp(num835 + 1.5707964f, 0.2f);
																												}
																												this.frame = 1;
																											}
																										}
																										if (this.ai[0] == num826)
																										{
																											bool flag46 = true;
																											int num836 = -1;
																											if (!flag42)
																											{
																												int num837 = (int)this.ai[1];
																												if (Main.npc[num837].active && Main.npc[num837].type == num825)
																												{
																													num836 = Main.npc[num837].target;
																												}
																												else
																												{
																													flag46 = false;
																												}
																											}
																											else
																											{
																												flag46 = false;
																											}
																											if (!flag46)
																											{
																												num836 = (int)Player.FindClosest(this.position, this.width, this.height);
																											}
																											Vector2 value13 = Main.player[num836].Center - base.Center;
																											ptr = ref value13.X;
																											ptr += (float)Main.rand.Next(-50, 51);
																											ptr = ref value13.Y;
																											ptr += (float)Main.rand.Next(-50, 51);
																											ptr = ref value13.X;
																											ptr *= (float)Main.rand.Next(80, 121) * 0.01f;
																											ptr = ref value13.Y;
																											ptr *= (float)Main.rand.Next(80, 121) * 0.01f;
																											Vector2 vector104 = Vector2.Normalize(value13);
																											if (vector104.HasNaNs())
																											{
																												vector104 = Vector2.UnitY;
																											}
																											if (num827 == -1)
																											{
																												this.velocity = vector104 * num829;
																												this.netUpdate = true;
																											}
																											else
																											{
																												if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num836].Center, 0, 0))
																												{
																													Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector104.X * num829, vector104.Y * num829, num827, num828, 1f, Main.myPlayer, 0f, 0f, 0f);
																												}
																												this.ai[0] = 0f;
																											}
																										}
																										if (this.ai[0] < num826)
																										{
																											return;
																										}
																										this.rotation = this.rotation.AngleLerp(this.velocity.ToRotation() + 1.5707964f, 0.4f);
																										if (this.type == 539)
																										{
																											num1063 = this.frameCounter + 1;
																											this.frameCounter = num1063;
																											if (num1063 >= 2)
																											{
																												this.frameCounter = 0;
																												num1063 = this.frame + 1;
																												this.frame = num1063;
																												if (num1063 >= Main.projFrames[this.type])
																												{
																													this.frame = 0;
																												}
																											}
																											if (Main.rand.Next(2) == 0)
																											{
																												int num838 = Dust.NewDust(this.position, this.width, this.height, 180, 0f, 0f, 100, default(Color), 1f);
																												Dust dust150 = Main.dust[num838];
																												Dust dust212 = dust150;
																												dust212.scale += (float)Main.rand.Next(50) * 0.01f;
																												Main.dust[num838].noGravity = true;
																												dust150 = Main.dust[num838];
																												dust212 = dust150;
																												dust212.velocity *= 0.1f;
																												Main.dust[num838].fadeIn = Main.rand.NextFloat() * 1.5f;
																											}
																											if (Main.rand.Next(3) == 0)
																											{
																												int num839 = Dust.NewDust(this.position, this.width, this.height, 176, 0f, 0f, 100, default(Color), 1f);
																												Dust dust151 = Main.dust[num839];
																												Dust dust212 = dust151;
																												dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
																												Main.dust[num839].noGravity = true;
																												dust151 = Main.dust[num839];
																												dust212 = dust151;
																												dust212.velocity *= 0.1f;
																												Main.dust[num839].fadeIn = Main.rand.NextFloat() * 1.5f;
																											}
																										}
																										if (this.type == 573)
																										{
																											if (Main.rand.Next(4) == 0)
																											{
																												int num840 = Dust.NewDust(base.Center, 8, 8, 242, 0f, 0f, 0, default(Color), 1f);
																												Main.dust[num840].position = base.Center;
																												Dust dust152 = Main.dust[num840];
																												Dust dust212 = dust152;
																												dust212.velocity *= 0.2f;
																												Main.dust[num840].noGravity = true;
																												Main.dust[num840].scale = 1.5f;
																											}
																											this.alpha = 0;
																											return;
																										}
																									}
																									else if (this.aiStyle == 103)
																									{
																										this.scale = this.ai[1];
																										ref float ptr = ref this.ai[0];
																										ref float ptr58 = ref ptr;
																										float num1064 = ptr;
																										ptr58 = num1064 + 1f;
																										if (this.ai[0] >= 30f)
																										{
																											this.alpha += 25;
																											if (this.alpha >= 250)
																											{
																												this.Kill();
																												return;
																											}
																										}
																										else
																										{
																											if (this.ai[0] < 0f)
																											{
																												return;
																											}
																											this.alpha -= 25;
																											if (this.alpha < 0)
																											{
																												this.alpha = 0;
																												if (this.localAI[1] == 0f && Main.netMode != 1 && this.localAI[0] != 0f)
																												{
																													this.localAI[1] = 1f;
																													NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Bottom.Y, (int)this.localAI[0], 0, 0f, 0f, 0f, 0f, 255);
																													return;
																												}
																											}
																										}
																									}
																									else
																									{
																										if (this.aiStyle == 104)
																										{
																											if (this.ai[0] == 1f)
																											{
																												this.scale *= 0.995f;
																												this.alpha += 3;
																												if (this.alpha >= 250)
																												{
																													this.Kill();
																												}
																											}
																											else
																											{
																												this.scale *= 1.01f;
																												this.alpha -= 7;
																												if (this.alpha < 0)
																												{
																													this.alpha = 0;
																													this.ai[0] = 1f;
																												}
																											}
																											int num1063 = this.frameCounter;
																											this.frameCounter = num1063 + 1;
																											if (this.frameCounter > 6)
																											{
																												this.frameCounter = 0;
																												num1063 = this.frame;
																												this.frame = num1063 + 1;
																												if (this.frame > 3)
																												{
																													this.frame = 0;
																												}
																											}
																											ref float ptr = ref this.velocity.Y;
																											ptr -= 0.03f;
																											ptr = ref this.velocity.X;
																											ptr *= 0.97f;
																											return;
																										}
																										if (this.aiStyle == 105)
																										{
																											float num841 = 1f - (float)this.alpha / 255f;
																											num841 *= this.scale;
																											Lighting.AddLight(base.Center, 0.2f * num841, 0.275f * num841, 0.075f * num841);
																											ref float ptr = ref this.localAI[0];
																											ptr += 1f;
																											if (this.localAI[0] >= 90f)
																											{
																												ptr = ref this.localAI[0];
																												ptr *= -1f;
																											}
																											if (this.localAI[0] >= 0f)
																											{
																												this.scale += 0.003f;
																											}
																											else
																											{
																												this.scale -= 0.003f;
																											}
																											this.rotation += 0.0025f * this.scale;
																											float num842 = 1f;
																											float num843 = 1f;
																											if (this.identity % 6 == 0)
																											{
																												num843 *= -1f;
																											}
																											if (this.identity % 6 == 1)
																											{
																												num842 *= -1f;
																											}
																											if (this.identity % 6 == 2)
																											{
																												num843 *= -1f;
																												num842 *= -1f;
																											}
																											if (this.identity % 6 == 3)
																											{
																												num843 = 0f;
																											}
																											if (this.identity % 6 == 4)
																											{
																												num842 = 0f;
																											}
																											ptr = ref this.localAI[1];
																											ptr += 1f;
																											if (this.localAI[1] > 60f)
																											{
																												this.localAI[1] = -180f;
																											}
																											if (this.localAI[1] >= -60f)
																											{
																												ptr = ref this.velocity.X;
																												ptr += 0.002f * num843;
																												ptr = ref this.velocity.Y;
																												ptr += 0.002f * num842;
																											}
																											else
																											{
																												ptr = ref this.velocity.X;
																												ptr -= 0.002f * num843;
																												ptr = ref this.velocity.Y;
																												ptr -= 0.002f * num842;
																											}
																											ptr = ref this.ai[0];
																											ptr += 1f;
																											if (this.ai[0] > 5400f)
																											{
																												this.damage = 0;
																												this.ai[1] = 1f;
																												if (this.alpha < 255)
																												{
																													this.alpha += 5;
																													if (this.alpha > 255)
																													{
																														this.alpha = 255;
																													}
																												}
																												else if (this.owner == Main.myPlayer)
																												{
																													this.Kill();
																												}
																											}
																											else
																											{
																												float num844 = (base.Center - Main.player[this.owner].Center).Length() / 100f;
																												if (num844 > 4f)
																												{
																													num844 *= 1.1f;
																												}
																												if (num844 > 5f)
																												{
																													num844 *= 1.2f;
																												}
																												if (num844 > 6f)
																												{
																													num844 *= 1.3f;
																												}
																												if (num844 > 7f)
																												{
																													num844 *= 1.4f;
																												}
																												if (num844 > 8f)
																												{
																													num844 *= 1.5f;
																												}
																												if (num844 > 9f)
																												{
																													num844 *= 1.6f;
																												}
																												if (num844 > 10f)
																												{
																													num844 *= 1.7f;
																												}
																												if (!Main.player[this.owner].sporeSac)
																												{
																													num844 += 100f;
																												}
																												ptr = ref this.ai[0];
																												ptr += num844;
																												if (this.alpha > 50)
																												{
																													this.alpha -= 10;
																													if (this.alpha < 50)
																													{
																														this.alpha = 50;
																													}
																												}
																											}
																											bool flag47 = false;
																											Vector2 vector105;
																											vector105..ctor(0f, 0f);
																											float num845 = 340f;
																											int num1063;
																											for (int num846 = 0; num846 < 200; num846 = num1063 + 1)
																											{
																												if (Main.npc[num846].CanBeChasedBy(this, false))
																												{
																													float num847 = Main.npc[num846].position.X + (float)(Main.npc[num846].width / 2);
																													float num848 = Main.npc[num846].position.Y + (float)(Main.npc[num846].height / 2);
																													float num849 = Math.Abs(this.position.X + (float)(this.width / 2) - num847) + Math.Abs(this.position.Y + (float)(this.height / 2) - num848);
																													if (num849 < num845)
																													{
																														num845 = num849;
																														vector105 = Main.npc[num846].Center;
																														flag47 = true;
																													}
																												}
																												num1063 = num846;
																											}
																											if (flag47)
																											{
																												Vector2 vector106 = vector105 - base.Center;
																												vector106.Normalize();
																												vector106 *= 4f;
																												this.velocity = (this.velocity * 40f + vector106) / 41f;
																												return;
																											}
																											if ((double)this.velocity.Length() > 0.2)
																											{
																												this.velocity *= 0.98f;
																												return;
																											}
																										}
																										else if (this.aiStyle == 106)
																										{
																											this.rotation += this.velocity.X * 0.02f;
																											if (this.velocity.X < 0f)
																											{
																												this.rotation -= Math.Abs(this.velocity.Y) * 0.02f;
																											}
																											else
																											{
																												this.rotation += Math.Abs(this.velocity.Y) * 0.02f;
																											}
																											this.velocity *= 0.98f;
																											ref float ptr = ref this.ai[0];
																											ptr += 1f;
																											if (this.ai[0] >= 60f)
																											{
																												if (this.alpha < 255)
																												{
																													this.alpha += 5;
																													if (this.alpha > 255)
																													{
																														this.alpha = 255;
																														return;
																													}
																												}
																												else if (this.owner == Main.myPlayer)
																												{
																													this.Kill();
																													return;
																												}
																											}
																											else if (this.alpha > 80)
																											{
																												this.alpha -= 30;
																												if (this.alpha < 80)
																												{
																													this.alpha = 80;
																													return;
																												}
																											}
																										}
																										else if (this.aiStyle == 107)
																										{
																											float num850 = 10f;
																											float num851 = 5f;
																											float num852 = 40f;
																											if (this.type == 575)
																											{
																												if (this.timeLeft > 30 && this.alpha > 0)
																												{
																													this.alpha -= 25;
																												}
																												if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																												{
																													this.alpha = 128;
																												}
																												if (this.alpha < 0)
																												{
																													this.alpha = 0;
																												}
																												int num1063 = this.frameCounter + 1;
																												this.frameCounter = num1063;
																												if (num1063 > 4)
																												{
																													this.frameCounter = 0;
																													num1063 = this.frame + 1;
																													this.frame = num1063;
																													if (num1063 >= 4)
																													{
																														this.frame = 0;
																													}
																												}
																												Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
																											}
																											else if (this.type == 596)
																											{
																												num850 = 10f;
																												num851 = 7.5f;
																												if (this.timeLeft > 30 && this.alpha > 0)
																												{
																													this.alpha -= 25;
																												}
																												if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																												{
																													this.alpha = 128;
																												}
																												if (this.alpha < 0)
																												{
																													this.alpha = 0;
																												}
																												int num1063 = this.frameCounter + 1;
																												this.frameCounter = num1063;
																												if (num1063 > 4)
																												{
																													this.frameCounter = 0;
																													num1063 = this.frame + 1;
																													this.frame = num1063;
																													if (num1063 >= 4)
																													{
																														this.frame = 0;
																													}
																												}
																												float num853 = 0.5f;
																												if (this.timeLeft < 120)
																												{
																													num853 = 1.1f;
																												}
																												if (this.timeLeft < 60)
																												{
																													num853 = 1.6f;
																												}
																												ref float ptr = ref this.ai[1];
																												ref float ptr59 = ref ptr;
																												float num1064 = ptr;
																												ptr59 = num1064 + 1f;
																												float num854 = this.ai[1] / 180f * 6.2831855f;
																												for (float num855 = 0f; num855 < 3f; num855 = num1064 + 1f)
																												{
																													if (Main.rand.Next(3) != 0)
																													{
																														return;
																													}
																													Dust dust153 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f, 0, default(Color), 1f)];
																													dust153.position = base.Center + Vector2.UnitY.RotatedBy((double)(num855 * 6.2831855f / 3f + this.ai[1]), default(Vector2)) * 10f;
																													dust153.noGravity = true;
																													dust153.velocity = base.DirectionFrom(dust153.position);
																													dust153.scale = num853;
																													dust153.fadeIn = 0.5f;
																													dust153.alpha = 200;
																													num1064 = num855;
																												}
																												if (this.timeLeft < 4)
																												{
																													int num856 = 30;
																													if (Main.expertMode)
																													{
																														num856 = 22;
																													}
																													this.position = base.Center;
																													this.width = (this.height = 60);
																													base.Center = this.position;
																													this.damage = num856;
																													for (int num857 = 0; num857 < 10; num857 = num1063 + 1)
																													{
																														Dust dust154 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
																														{
																															27,
																															6
																														}), 0f, -2f, 0, default(Color), 1f)];
																														dust154.noGravity = true;
																														if (dust154.position != base.Center)
																														{
																															dust154.velocity = base.DirectionTo(dust154.position) * 3f;
																														}
																														num1063 = num857;
																													}
																												}
																											}
																											int num858 = (int)this.ai[0];
																											if (num858 >= 0 && Main.player[num858].active && !Main.player[num858].dead)
																											{
																												if (base.Distance(Main.player[num858].Center) > num852)
																												{
																													Vector2 vector107 = base.DirectionTo(Main.player[num858].Center);
																													if (vector107.HasNaNs())
																													{
																														vector107 = Vector2.UnitY;
																													}
																													this.velocity = (this.velocity * (num850 - 1f) + vector107 * num851) / num850;
																													return;
																												}
																											}
																											else
																											{
																												if (this.timeLeft > 30)
																												{
																													this.timeLeft = 30;
																												}
																												if (this.ai[0] != -1f)
																												{
																													this.ai[0] = -1f;
																													this.netUpdate = true;
																													return;
																												}
																											}
																										}
																										else if (this.aiStyle == 108)
																										{
																											bool flag48 = this.type == 579 || this.type == 578;
																											if (flag48 && this.ai[1] == 1f && Main.netMode != 2)
																											{
																												this.ai[1] = 0f;
																												int num1063;
																												for (int num859 = 0; num859 < 25; num859 = num1063 + 1)
																												{
																													int num860 = Utils.SelectRandom<int>(Main.rand, new int[]
																													{
																														229,
																														229,
																														161
																													});
																													Dust dust155 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num860, 0f, 0f, 0, default(Color), 1f)];
																													dust155.noGravity = true;
																													dust155.scale = 1.75f + Main.rand.NextFloat() * 1.25f;
																													dust155.fadeIn = 0.25f;
																													Dust dust156 = dust155;
																													Dust dust212 = dust156;
																													dust212.velocity *= 3.5f + Main.rand.NextFloat() * 0.5f;
																													dust155.noLight = true;
																													num1063 = num859;
																												}
																											}
																											if (flag48 && this.localAI[1] == 0f)
																											{
																												this.localAI[1] = 1f;
																												SoundEngine.PlaySound(SoundID.Item117, new Vector2?(this.position), null);
																											}
																											if (this.type == 578 && this.localAI[0] == 0f)
																											{
																												this.localAI[0] = 1f;
																												int num861 = (int)Player.FindClosest(base.Center, 0, 0);
																												Vector2 vector108 = Main.player[num861].Center - base.Center;
																												if (vector108 == Vector2.Zero)
																												{
																													vector108 = Vector2.UnitY;
																												}
																												this.ai[1] = vector108.ToRotation();
																												this.netUpdate = true;
																											}
																											ref float ptr = ref this.ai[0];
																											ref float ptr60 = ref ptr;
																											float num1064 = ptr;
																											ptr60 = num1064 + 1f;
																											if (this.ai[0] <= 50f)
																											{
																												if (this.type == 579)
																												{
																													if (Main.rand.Next(4) == 0)
																													{
																														Vector2 vector109 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust157 = Main.dust[Dust.NewDust(base.Center - vector109 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																														dust157.noGravity = true;
																														dust157.position = base.Center - vector109 * (float)Main.rand.Next(10, 21);
																														dust157.velocity = vector109.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
																														dust157.scale = 0.5f + Main.rand.NextFloat();
																														dust157.fadeIn = 0.5f;
																													}
																													if (Main.rand.Next(4) == 0)
																													{
																														Vector2 vector110 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust158 = Main.dust[Dust.NewDust(base.Center - vector110 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																														dust158.noGravity = true;
																														dust158.position = base.Center - vector110 * 30f;
																														dust158.velocity = vector110.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
																														dust158.scale = 0.5f + Main.rand.NextFloat();
																														dust158.fadeIn = 0.5f;
																													}
																												}
																												if (this.type == 578 && Main.rand.Next(2) == 0)
																												{
																													Vector2 vector111 = this.ai[1].ToRotationVector2();
																													Vector2 vector112 = vector111.RotatedBy(1.5707963705062866, default(Vector2)) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
																													Vector2 vector113 = vector111 * (float)Main.rand.Next(-80, 81);
																													Vector2 vector114 = vector113 - vector112;
																													vector114 /= 10f;
																													int num862 = 229;
																													Dust dust159 = Main.dust[Dust.NewDust(base.Center, 0, 0, num862, 0f, 0f, 0, default(Color), 1f)];
																													dust159.noGravity = true;
																													dust159.position = base.Center + vector112;
																													dust159.velocity = vector114;
																													dust159.scale = 0.5f + Main.rand.NextFloat();
																													dust159.fadeIn = 0.5f;
																													vector113 = vector111 * (float)Main.rand.Next(40, 121);
																													vector114 = vector113 - vector112 / 2f;
																													vector114 /= 10f;
																													dust159 = Main.dust[Dust.NewDust(base.Center, 0, 0, num862, 0f, 0f, 0, default(Color), 1f)];
																													dust159.noGravity = true;
																													dust159.position = base.Center + vector112 / 2f;
																													dust159.velocity = vector114;
																													dust159.scale = 1f + Main.rand.NextFloat();
																												}
																												if (this.type == 813)
																												{
																													if (Main.rand.Next(4) == 0)
																													{
																														Vector2 vector115 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust160 = Main.dust[Dust.NewDust(base.Center - vector115 * 30f, 0, 0, 5, 0f, 0f, 0, default(Color), 1f)];
																														dust160.noGravity = true;
																														dust160.position = base.Center - vector115 * (float)Main.rand.Next(10, 21);
																														dust160.velocity = vector115.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
																														dust160.scale = 0.5f + Main.rand.NextFloat();
																														dust160.fadeIn = 0.5f;
																													}
																													if (Main.rand.Next(4) == 0)
																													{
																														Vector2 vector116 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust161 = Main.dust[Dust.NewDust(base.Center - vector116 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																														dust161.noGravity = true;
																														dust161.position = base.Center - vector116 * 30f;
																														dust161.velocity = vector116.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
																														dust161.scale = 0.5f + Main.rand.NextFloat();
																														dust161.fadeIn = 0.5f;
																													}
																												}
																											}
																											else if (this.ai[0] <= 90f)
																											{
																												if (this.ai[0] == 90f)
																												{
																													if (flag48)
																													{
																														SoundEngine.PlaySound(SoundID.Item113, new Vector2?(this.position), null);
																													}
																													else
																													{
																														SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
																													}
																												}
																												this.scale = (this.ai[0] - 50f) / 40f;
																												this.alpha = 255 - (int)(255f * this.scale);
																												this.rotation -= 0.15707964f;
																												if (this.type == 579)
																												{
																													if (Main.rand.Next(2) == 0)
																													{
																														Vector2 vector117 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust162 = Main.dust[Dust.NewDust(base.Center - vector117 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																														dust162.noGravity = true;
																														dust162.position = base.Center - vector117 * (float)Main.rand.Next(10, 21);
																														dust162.velocity = vector117.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																														dust162.scale = 0.5f + Main.rand.NextFloat();
																														dust162.fadeIn = 0.5f;
																														dust162.customData = base.Center;
																													}
																													if (Main.rand.Next(2) == 0)
																													{
																														Vector2 vector118 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust163 = Main.dust[Dust.NewDust(base.Center - vector118 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																														dust163.noGravity = true;
																														dust163.position = base.Center - vector118 * 30f;
																														dust163.velocity = vector118.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																														dust163.scale = 0.5f + Main.rand.NextFloat();
																														dust163.fadeIn = 0.5f;
																														dust163.customData = base.Center;
																													}
																												}
																												if (this.type == 578)
																												{
																													Vector2 vector119 = this.ai[1].ToRotationVector2();
																													Vector2 vector120 = vector119.RotatedBy(1.5707963705062866, default(Vector2)) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
																													vector119 *= (float)Main.rand.Next(-80, 81);
																													Vector2 vector121 = vector119 - vector120;
																													vector121 /= 10f;
																													int num863 = Utils.SelectRandom<int>(Main.rand, new int[]
																													{
																														229,
																														229
																													});
																													Dust dust164 = Main.dust[Dust.NewDust(base.Center, 0, 0, num863, 0f, 0f, 0, default(Color), 1f)];
																													dust164.noGravity = true;
																													dust164.position = base.Center + vector120;
																													dust164.velocity = vector121;
																													dust164.scale = 0.5f + Main.rand.NextFloat();
																													dust164.fadeIn = 0.5f;
																													if (this.ai[0] == 90f && Main.netMode != 1)
																													{
																														Vector2 vector122 = this.ai[1].ToRotationVector2() * 8f;
																														float ai2 = (float)Main.rand.Next(80);
																														Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - vector122.X, base.Center.Y - vector122.Y, vector122.X, vector122.Y, 580, 50, 1f, Main.myPlayer, this.ai[1], ai2, 0f);
																													}
																												}
																												else if (this.type == 579)
																												{
																													if (this.ai[0] == 90f && Main.netMode != 1)
																													{
																														this.ai[1] = 1f;
																														this.netUpdate = true;
																														int num1063;
																														for (int num864 = 0; num864 < 2; num864 = num1063 + 1)
																														{
																															int num865 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 427, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																															Main.npc[num865].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float)Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
																															Main.npc[num865].netUpdate = true;
																															num1063 = num864;
																														}
																													}
																												}
																												else if (this.type == 813)
																												{
																													if (Main.rand.Next(2) == 0)
																													{
																														Vector2 vector123 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust165 = Main.dust[Dust.NewDust(base.Center - vector123 * 30f, 0, 0, 5, 0f, 0f, 0, default(Color), 1f)];
																														dust165.noGravity = true;
																														dust165.position = base.Center - vector123 * (float)Main.rand.Next(10, 21);
																														dust165.velocity = vector123.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																														dust165.scale = 0.5f + Main.rand.NextFloat();
																														dust165.fadeIn = 0.5f;
																														dust165.customData = base.Center;
																													}
																													if (Main.rand.Next(2) == 0)
																													{
																														Vector2 vector124 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust166 = Main.dust[Dust.NewDust(base.Center - vector124 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																														dust166.noGravity = true;
																														dust166.position = base.Center - vector124 * 30f;
																														dust166.velocity = vector124.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																														dust166.scale = 0.5f + Main.rand.NextFloat();
																														dust166.fadeIn = 0.5f;
																														dust166.customData = base.Center;
																													}
																													if (this.ai[0] == 90f && Main.netMode != 1)
																													{
																														int num866 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 619, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																														Main.npc[num866].netUpdate = true;
																													}
																												}
																											}
																											else if (this.ai[0] <= 120f)
																											{
																												this.scale = 1f;
																												this.alpha = 0;
																												this.rotation -= 0.05235988f;
																												if (this.type == 813)
																												{
																													if (Main.rand.Next(2) == 0)
																													{
																														Vector2 vector125 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust167 = Main.dust[Dust.NewDust(base.Center - vector125 * 30f, 0, 0, 5, 0f, 0f, 0, default(Color), 1f)];
																														dust167.noGravity = true;
																														dust167.position = base.Center - vector125 * (float)Main.rand.Next(10, 21);
																														dust167.velocity = vector125.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																														dust167.scale = 0.5f + Main.rand.NextFloat();
																														dust167.fadeIn = 0.5f;
																														dust167.customData = base.Center;
																													}
																													else
																													{
																														Vector2 vector126 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																														Dust dust168 = Main.dust[Dust.NewDust(base.Center - vector126 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																														dust168.noGravity = true;
																														dust168.position = base.Center - vector126 * 30f;
																														dust168.velocity = vector126.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																														dust168.scale = 0.5f + Main.rand.NextFloat();
																														dust168.fadeIn = 0.5f;
																														dust168.customData = base.Center;
																													}
																												}
																												else if (Main.rand.Next(2) == 0)
																												{
																													Vector2 vector127 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																													Dust dust169 = Main.dust[Dust.NewDust(base.Center - vector127 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																													dust169.noGravity = true;
																													dust169.position = base.Center - vector127 * (float)Main.rand.Next(10, 21);
																													dust169.velocity = vector127.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																													dust169.scale = 0.5f + Main.rand.NextFloat();
																													dust169.fadeIn = 0.5f;
																													dust169.customData = base.Center;
																												}
																												else
																												{
																													Vector2 vector128 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																													Dust dust170 = Main.dust[Dust.NewDust(base.Center - vector128 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																													dust170.noGravity = true;
																													dust170.position = base.Center - vector128 * 30f;
																													dust170.velocity = vector128.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																													dust170.scale = 0.5f + Main.rand.NextFloat();
																													dust170.fadeIn = 0.5f;
																													dust170.customData = base.Center;
																												}
																											}
																											else
																											{
																												this.scale = 1f - (this.ai[0] - 120f) / 60f;
																												this.alpha = 255 - (int)(255f * this.scale);
																												this.rotation -= 0.10471976f;
																												if (this.alpha >= 255)
																												{
																													this.Kill();
																												}
																												if (this.type == 813)
																												{
																													int num1063;
																													for (int num867 = 0; num867 < 2; num867 = num1063 + 1)
																													{
																														num1063 = Main.rand.Next(3);
																														if (num1063 != 0)
																														{
																															if (num1063 == 1)
																															{
																																Vector2 vector129 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																																Dust dust171 = Main.dust[Dust.NewDust(base.Center - vector129 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																																dust171.noGravity = true;
																																dust171.position = base.Center - vector129 * 30f;
																																dust171.velocity = vector129.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																																dust171.scale = 0.5f + Main.rand.NextFloat();
																																dust171.fadeIn = 0.5f;
																																dust171.customData = base.Center;
																															}
																														}
																														else
																														{
																															Vector2 vector130 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																															Dust dust172 = Main.dust[Dust.NewDust(base.Center - vector130 * 30f, 0, 0, 5, 0f, 0f, 0, default(Color), 1f)];
																															dust172.noGravity = true;
																															dust172.position = base.Center - vector130 * (float)Main.rand.Next(10, 21);
																															dust172.velocity = vector130.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																															dust172.scale = 0.5f + Main.rand.NextFloat();
																															dust172.fadeIn = 0.5f;
																															dust172.customData = base.Center;
																														}
																														num1063 = num867;
																													}
																												}
																												else
																												{
																													int num1063;
																													for (int num868 = 0; num868 < 2; num868 = num1063 + 1)
																													{
																														num1063 = Main.rand.Next(3);
																														if (num1063 != 0)
																														{
																															if (num1063 == 1)
																															{
																																Vector2 vector131 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																																Dust dust173 = Main.dust[Dust.NewDust(base.Center - vector131 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																																dust173.noGravity = true;
																																dust173.position = base.Center - vector131 * 30f;
																																dust173.velocity = vector131.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																																dust173.scale = 0.5f + Main.rand.NextFloat();
																																dust173.fadeIn = 0.5f;
																																dust173.customData = base.Center;
																															}
																														}
																														else
																														{
																															Vector2 vector132 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
																															Dust dust174 = Main.dust[Dust.NewDust(base.Center - vector132 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																															dust174.noGravity = true;
																															dust174.position = base.Center - vector132 * (float)Main.rand.Next(10, 21);
																															dust174.velocity = vector132.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																															dust174.scale = 0.5f + Main.rand.NextFloat();
																															dust174.fadeIn = 0.5f;
																															dust174.customData = base.Center;
																														}
																														num1063 = num868;
																													}
																												}
																											}
																											if (this.type == 813 && Main.rand.NextFloat() < this.Opacity)
																											{
																												Vector2 position3 = base.Center + Main.rand.NextVector2Circular(3f, 20f);
																												int num1071 = 90;
																												Vector2? velocity = null;
																												Dust dust175 = Dust.NewDustPerfect(position3, num1071, velocity, 0, default(Color), 1f);
																												dust175.velocity = Vector2.UnitY;
																												dust175.noGravity = true;
																												dust175.scale = this.scale;
																												return;
																											}
																										}
																										else
																										{
																											if (this.aiStyle == 109)
																											{
																												if (this.localAI[1] == 0f)
																												{
																													this.localAI[1] = this.velocity.Length();
																												}
																												if (this.ai[0] == 0f)
																												{
																													ref float ptr = ref this.localAI[0];
																													ref float ptr61 = ref ptr;
																													float num1064 = ptr;
																													ptr61 = num1064 + 1f;
																													if (this.localAI[0] > 30f)
																													{
																														this.ai[0] = 1f;
																														this.localAI[0] = 0f;
																														return;
																													}
																												}
																												else if (this.ai[0] == 1f)
																												{
																													Vector2 zero3 = Vector2.Zero;
																													if (this.type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
																													{
																														this.Kill();
																														return;
																													}
																													NPC.lazyNPCOwnedProjectileSearchArray[(int)this.ai[1]] = this.whoAmI;
																													zero3 = Main.npc[(int)this.ai[1]].Center;
																													this.tileCollide = false;
																													float num869 = this.localAI[1];
																													Vector2 value14 = zero3 - base.Center;
																													if (value14.Length() < num869)
																													{
																														this.Kill();
																														return;
																													}
																													value14.Normalize();
																													value14 *= num869;
																													this.velocity = Vector2.Lerp(this.velocity, value14, 0.04f);
																												}
																												this.rotation += 0.31415927f;
																												return;
																											}
																											if (this.aiStyle == 110)
																											{
																												if (this.localAI[1] == 0f)
																												{
																													this.localAI[1] = this.velocity.Length();
																												}
																												Vector2 zero4 = Vector2.Zero;
																												if (!Main.npc[(int)this.ai[0]].active || !Main.npc[(int)this.ai[0]].townNPC)
																												{
																													this.Kill();
																													return;
																												}
																												zero4 = Main.npc[(int)this.ai[0]].Center;
																												float num870 = this.localAI[1];
																												Vector2 value15 = zero4 - base.Center;
																												if (value15.Length() >= num870 && !base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
																												{
																													value15.Normalize();
																													value15 *= num870;
																													if (value15.Y < this.velocity.Y)
																													{
																														value15.Y = this.velocity.Y;
																													}
																													ref float ptr = ref value15.Y;
																													ptr += 1f;
																													this.velocity = Vector2.Lerp(this.velocity, value15, 0.04f);
																													this.rotation += this.velocity.X * 0.05f;
																													return;
																												}
																												this.Kill();
																												int num871 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
																												if (num871 > 20)
																												{
																													num871 = 20;
																												}
																												if (num871 > 0)
																												{
																													NPC nPC13 = Main.npc[(int)this.ai[0]];
																													NPC npc = nPC13;
																													npc.life += num871;
																													Main.npc[(int)this.ai[0]].HealEffect(num871, true);
																													return;
																												}
																											}
																											else
																											{
																												if (this.aiStyle == 111)
																												{
																													this.AI_111_DryadsWard();
																													return;
																												}
																												if (this.aiStyle == 112)
																												{
																													float ptr;
																													int num1063;
																													if (this.type == 836)
																													{
																														if (this.localAI[0] == 0f)
																														{
																															this.localAI[0] = 1f;
																															for (int num872 = 0; num872 < 3; num872 = num1063 + 1)
																															{
																																int num873 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 50, Color.White, 1.2f);
																																Dust dust176 = Main.dust[num873];
																																Dust dust212 = dust176;
																																dust212.velocity *= 0.3f;
																																Main.dust[num873].noGravity = true;
																																num1063 = num872;
																															}
																														}
																														num1063 = this.frameCounter + 1;
																														this.frameCounter = num1063;
																														if (num1063 >= 6)
																														{
																															this.frameCounter = 0;
																															num1063 = this.frame + 1;
																															this.frame = num1063;
																															if (num1063 >= 4)
																															{
																																this.frame = 0;
																															}
																														}
																														Player player9 = Main.player[(int)this.ai[1]];
																														bool flag49 = player9.active && !player9.dead && Vector2.Distance(player9.Center, base.Center) < 800f;
																														int num874 = this.spriteDirection = ((Main.WindForVisuals > 0f) ? 1 : -1);
																														this.direction = ((player9.Center.X > base.Center.X) ? 1 : -1);
																														bool flag50 = num874 != this.direction;
																														float num875 = 2.5f;
																														float num876 = 2f;
																														if (flag50)
																														{
																															num875 = 1.5f;
																															num876 = 1f;
																														}
																														if (flag49)
																														{
																															if (!flag50)
																															{
																																float num877 = player9.Center.X - base.Center.X;
																																ptr = ref this.velocity.X;
																																ptr += 0.05f * (float)this.direction * (0.6f + Math.Abs(Main.WindForVisuals));
																																if (this.velocity.X > num875)
																																{
																																	ptr = ref this.velocity.X;
																																	ptr -= 0.1f;
																																}
																																if (this.velocity.X < 0f - num875)
																																{
																																	ptr = ref this.velocity.X;
																																	ptr += 0.1f;
																																}
																															}
																															if (player9.Top.Y >= base.Center.Y || flag50)
																															{
																																ptr = ref this.velocity.Y;
																																ptr += 0.05f;
																																if (this.velocity.Y > num875)
																																{
																																	ptr = ref this.velocity.Y;
																																	ptr -= 0.1f;
																																}
																															}
																															else if (player9.Top.Y < base.Center.Y)
																															{
																																ptr = ref this.velocity.Y;
																																ptr -= 0.1f;
																																if (this.velocity.Y < 0f - num876)
																																{
																																	ptr = ref this.velocity.Y;
																																	ptr += 0.2f;
																																}
																															}
																														}
																														else
																														{
																															ptr = ref this.velocity.Y;
																															ptr += 0.2f;
																															if (this.velocity.Y < 0f - num876)
																															{
																																ptr = ref this.velocity.Y;
																																ptr += 0.2f;
																															}
																															if (this.velocity.Y > num876)
																															{
																																ptr = ref this.velocity.Y;
																																ptr -= 0.2f;
																															}
																														}
																														this.rotation = this.velocity.X * 0.125f;
																													}
																													float num1064;
																													if (this.type == 590)
																													{
																														num1063 = this.frameCounter + 1;
																														this.frameCounter = num1063;
																														if (num1063 >= 4)
																														{
																															int num878 = 0;
																															int num879 = 3;
																															if (this.ai[2] == 1f)
																															{
																																num878 = 3;
																																num879 = 6;
																															}
																															this.frameCounter = 0;
																															num1063 = this.frame + 1;
																															this.frame = num1063;
																															if (num1063 >= num879)
																															{
																																this.frame = num878;
																															}
																														}
																														if (this.alpha > 0)
																														{
																															this.alpha -= 15;
																														}
																														if (this.alpha < 0)
																														{
																															this.alpha = 0;
																														}
																														if (this.alpha == 0)
																														{
																															float num880 = (float)Main.rand.Next(28, 42) * 0.005f;
																															num880 += (float)(270 - (int)Main.mouseTextColor) / 500f;
																															float num881 = 0.1f;
																															float num882 = 0.3f + num880 / 2f;
																															float num883 = 0.6f + num880;
																															float num884 = 0.35f;
																															num881 *= num884;
																															num882 *= num884;
																															num883 *= num884;
																															Lighting.AddLight(base.Center, num881, num882, num883);
																														}
																														this.velocity = new Vector2(0f, (float)Math.Sin((double)(6.2831855f * this.ai[0] / 180f)) * 0.15f);
																														ptr = ref this.ai[0];
																														ref float ptr62 = ref ptr;
																														num1064 = ptr;
																														ptr62 = num1064 + 1f;
																														if (this.ai[0] >= 180f)
																														{
																															this.ai[0] = 0f;
																														}
																													}
																													if (this.type != 644)
																													{
																														return;
																													}
																													Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f, byte.MaxValue);
																													int num885 = (int)this.ai[1];
																													if (num885 < 0 || num885 >= 1000 || (!Main.projectile[num885].active && Main.projectile[num885].type != 643))
																													{
																														this.ai[1] = -1f;
																													}
																													else
																													{
																														DelegateMethods.v3_1 = newColor3.ToVector3() * 0.5f;
																														Vector2 center26 = base.Center;
																														Vector2 center27 = Main.projectile[num885].Center;
																														float width6 = 8f;
																														Utils.TileActionAttempt plot6;
																														if ((plot6 = Projectile.<>O.<3>__CastLight) == null)
																														{
																															plot6 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
																														}
																														Utils.PlotTileLine(center26, center27, width6, plot6);
																													}
																													if (this.localAI[0] == 0f)
																													{
																														this.localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
																														this.direction = ((Main.rand.Next(2) > 0) ? 1 : -1);
																													}
																													this.rotation = this.localAI[1] / 40f * 6.2831855f * (float)this.direction;
																													if (this.alpha > 0)
																													{
																														this.alpha -= 8;
																													}
																													if (this.alpha < 0)
																													{
																														this.alpha = 0;
																													}
																													if (this.alpha == 0)
																													{
																														Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
																													}
																													for (int num886 = 0; num886 < 2; num886 = num1063 + 1)
																													{
																														if (Main.rand.Next(10) == 0)
																														{
																															Vector2 vector133 = Vector2.UnitY.RotatedBy((double)((float)num886 * 3.1415927f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																															Dust dust177 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
																															dust177.noGravity = true;
																															dust177.noLight = true;
																															dust177.scale = this.Opacity * this.localAI[0];
																															dust177.position = base.Center;
																															dust177.velocity = vector133 * 2.5f;
																														}
																														num1063 = num886;
																													}
																													for (int num887 = 0; num887 < 2; num887 = num1063 + 1)
																													{
																														if (Main.rand.Next(10) == 0)
																														{
																															Vector2 vector134 = Vector2.UnitY.RotatedBy((double)((float)num887 * 3.1415927f), default(Vector2));
																															Dust dust178 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
																															dust178.noGravity = true;
																															dust178.noLight = true;
																															dust178.scale = this.Opacity * this.localAI[0];
																															dust178.position = base.Center;
																															dust178.velocity = vector134 * 2.5f;
																														}
																														num1063 = num887;
																													}
																													if (Main.rand.Next(10) == 0)
																													{
																														float num888 = 1f + Main.rand.NextFloat() * 2f;
																														float fadeIn = 1f + Main.rand.NextFloat();
																														float num889 = 1f + Main.rand.NextFloat();
																														Vector2 vector135 = Utils.RandomVector2(Main.rand, -1f, 1f);
																														if (vector135 != Vector2.Zero)
																														{
																															vector135.Normalize();
																														}
																														vector135 *= 20f + Main.rand.NextFloat() * 100f;
																														Vector2 vec = base.Center + vector135;
																														Point point3 = vec.ToTileCoordinates();
																														bool flag51 = true;
																														if (!WorldGen.InWorld(point3.X, point3.Y, 0))
																														{
																															flag51 = false;
																														}
																														if (flag51 && WorldGen.SolidTile(point3.X, point3.Y, false))
																														{
																															flag51 = false;
																														}
																														if (flag51)
																														{
																															Dust dust179 = Main.dust[Dust.NewDust(vec, 0, 0, 267, 0f, 0f, 127, newColor3, 1f)];
																															dust179.noGravity = true;
																															dust179.position = vec;
																															dust179.velocity = -Vector2.UnitY * num888 * (Main.rand.NextFloat() * 0.9f + 1.6f);
																															dust179.fadeIn = fadeIn;
																															dust179.scale = num889;
																															dust179.noLight = true;
																															if (dust179.dustIndex != 6000)
																															{
																																Dust dust180 = Dust.CloneDust(dust179);
																																Dust dust181 = dust180;
																																Dust dust212 = dust181;
																																dust212.scale *= 0.65f;
																																dust181 = dust180;
																																dust212 = dust181;
																																dust212.fadeIn *= 0.65f;
																																dust180.color = new Color(255, 255, 255, 255);
																															}
																														}
																													}
																													this.scale = this.Opacity / 2f * this.localAI[0];
																													this.velocity = Vector2.Zero;
																													ptr = ref this.localAI[1];
																													ref float ptr63 = ref ptr;
																													num1064 = ptr;
																													ptr63 = num1064 + 1f;
																													if (this.localAI[1] >= 60f)
																													{
																														this.Kill();
																													}
																													if (this.localAI[1] == 30f)
																													{
																														this.DoRainbowCrystalStaffExplosion();
																														if (Main.myPlayer == this.owner)
																														{
																															this.friendly = true;
																															int num890 = this.width;
																															int num891 = this.height;
																															int num892 = this.penetrate;
																															this.position = base.Center;
																															this.width = (this.height = 60);
																															base.Center = this.position;
																															this.penetrate = -1;
																															this.maxPenetrate = -1;
																															this.Damage();
																															this.penetrate = num892;
																															this.position = base.Center;
																															this.width = num890;
																															this.height = num891;
																															base.Center = this.position;
																															this.friendly = false;
																															return;
																														}
																													}
																												}
																												else if (this.aiStyle == 113)
																												{
																													int num893 = 25;
																													if (this.type == 614)
																													{
																														num893 = 63;
																													}
																													if (this.alpha > 0)
																													{
																														this.alpha -= num893;
																													}
																													if (this.alpha < 0)
																													{
																														this.alpha = 0;
																													}
																													if (this.ai[0] == 0f)
																													{
																														if (this.type == 614)
																														{
																															int num894 = (int)this.ai[1];
																															if (!Main.npc[num894].CanBeChasedBy(this, false))
																															{
																																this.Kill();
																																return;
																															}
																															float num895 = this.velocity.ToRotation();
																															Vector2 vector136 = Main.npc[num894].Center - base.Center;
																															if (vector136 != Vector2.Zero)
																															{
																																vector136.Normalize();
																																vector136 *= 14f;
																															}
																															float num896 = 5f;
																															this.velocity = (this.velocity * (num896 - 1f) + vector136) / num896;
																														}
																														else
																														{
																															ref float ptr = ref this.ai[1];
																															ref float ptr64 = ref ptr;
																															float num1064 = ptr;
																															ptr64 = num1064 + 1f;
																															if (this.ai[1] >= 45f)
																															{
																																float num897 = 0.98f;
																																float num898 = 0.35f;
																																if (this.type == 636)
																																{
																																	num897 = 0.995f;
																																	num898 = 0.15f;
																																}
																																this.ai[1] = 45f;
																																ptr = ref this.velocity.X;
																																ptr *= num897;
																																ptr = ref this.velocity.Y;
																																ptr += num898;
																															}
																															this.rotation = this.velocity.ToRotation() + 1.5707964f;
																														}
																													}
																													if (this.ai[0] == 1f)
																													{
																														Vector2 center17 = base.Center;
																														this.ignoreWater = true;
																														this.tileCollide = false;
																														int num899 = 15;
																														if (this.type == 636)
																														{
																															num899 = 5 * this.MaxUpdates;
																														}
																														if (this.type == 971)
																														{
																															num899 = 9 * this.MaxUpdates;
																														}
																														if (this.type == 975)
																														{
																															num899 = 9 * this.MaxUpdates;
																														}
																														bool flag52 = false;
																														bool flag53 = false;
																														ref float ptr = ref this.localAI[0];
																														ref float ptr65 = ref ptr;
																														float num1064 = ptr;
																														ptr65 = num1064 + 1f;
																														if (this.localAI[0] % 30f == 0f)
																														{
																															flag53 = true;
																														}
																														int num900 = (int)this.ai[1];
																														if (this.localAI[0] >= (float)(60 * num899))
																														{
																															flag52 = true;
																														}
																														else if (num900 < 0 || num900 >= 200)
																														{
																															flag52 = true;
																														}
																														else if (Main.npc[num900].active && !Main.npc[num900].dontTakeDamage)
																														{
																															base.Center = Main.npc[num900].Center - this.velocity * 2f;
																															this.gfxOffY = Main.npc[num900].gfxOffY;
																															if (flag53)
																															{
																																Main.npc[num900].HitEffect(0, 1.0, null);
																															}
																														}
																														else
																														{
																															flag52 = true;
																														}
																														if (flag52)
																														{
																															this.Kill();
																														}
																														if (!flag52 && this.type == 971)
																														{
																															if (num900 > 0 && num900 < 200 && this.timeLeft % 2 == 0)
																															{
																																Vector2 vector137 = center17 - this.velocity.SafeNormalize(Vector2.Zero) * 8f;
																																Vector2 value16 = Main.npc[num900].velocity + new Vector2(Main.rand.NextFloatDirection() * 0.35f, 2.5f);
																																Dust dust182 = Dust.NewDustPerfect(vector137, 4, new Vector2?(value16), 0, new Color(120, 50, 120), 0.65f);
																																dust182.fadeIn = 0.25f;
																																dust182.noGravity = true;
																															}
																															if (this.localAI[1] == 0f)
																															{
																																this.localAI[1] = 1f;
																																this.rotation = this.velocity.ToRotation() + 1.5707964f;
																															}
																														}
																														if (!flag52 && this.type == 975)
																														{
																															if (num900 > 0 && num900 < 200 && this.timeLeft % 2 == 0)
																															{
																																Vector2 vector138 = center17;
																																Vector2 vector139 = this.velocity.SafeNormalize(Vector2.Zero) * -7f + this.velocity.SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583);
																																Dust dust183 = Dust.NewDustPerfect(vector138, 5, new Vector2?(Vector2.Zero), 0, default(Color), 1.5f);
																																dust183.scale = 1.1f;
																																dust183.velocity = vector139 * 0.85f + new Vector2(0f, 0.85f);
																																Vector2 spinningpoint17 = dust183.velocity;
																																dust183.velocity = spinningpoint17.RotatedBy((double)(6.2831855f * Main.rand.NextFloatDirection() * 0.025f), default(Vector2));
																																dust183 = Dust.CloneDust(dust183.dustIndex);
																																dust183.velocity = spinningpoint17.RotatedBy((double)(6.2831855f * Main.rand.NextFloatDirection() * 0.025f), default(Vector2));
																																Dust dust184 = dust183;
																																Dust dust212 = dust184;
																																dust212.position += dust183.velocity;
																																if (Main.rand.Next(3) == 0)
																																{
																																	dust183 = Dust.CloneDust(dust183.dustIndex);
																																	dust183.velocity = dust183.velocity.RotatedByRandom(0.39269909262657166) * 0.9f;
																																}
																															}
																															if (this.localAI[1] == 0f)
																															{
																																this.localAI[1] = 1f;
																																this.rotation = this.velocity.ToRotation() + 1.5707964f;
																																Vector2 vector140 = center17;
																																int num1063;
																																for (int num901 = 0; num901 < 10; num901 = num1063 + 1)
																																{
																																	Vector2 vector141 = Main.rand.NextVector2CircularEdge(4f, 4f);
																																	Dust dust185 = Dust.NewDustPerfect(vector140, 5, new Vector2?(Vector2.Zero), 0, default(Color), 1.5f);
																																	dust185.scale = 1.5f;
																																	dust185.velocity = vector141;
																																	dust185.noGravity = true;
																																	num1063 = num901;
																																}
																															}
																														}
																													}
																													if (this.type == 614)
																													{
																														Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
																													}
																													if (this.type == 636)
																													{
																														Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
																														return;
																													}
																												}
																												else if (this.aiStyle == 114)
																												{
																													if (Main.netMode == 2 && this.localAI[0] == 0f)
																													{
																														PortalHelper.SyncPortalSections(base.Center, 1);
																														this.localAI[0] = 1f;
																													}
																													this.timeLeft = 3;
																													bool flag54 = false;
																													if (this.owner != 255 && (!Main.player[this.owner].active || Main.player[this.owner].dead || base.Distance(Main.player[this.owner].Center) > 12800f))
																													{
																														flag54 = true;
																													}
																													if (!flag54 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.OffScreenTiles))
																													{
																														flag54 = true;
																													}
																													if (!flag54 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
																													{
																														flag54 = true;
																													}
																													if (flag54)
																													{
																														this.Kill();
																														return;
																													}
																													Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[1]);
																													this.alpha -= 25;
																													if (this.alpha < 0)
																													{
																														this.alpha = 0;
																													}
																													if (this.alpha == 0)
																													{
																														Lighting.AddLight(base.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
																													}
																													int num1063 = this.frameCounter + 1;
																													this.frameCounter = num1063;
																													if (num1063 >= 6)
																													{
																														this.frameCounter = 0;
																														num1063 = this.frame + 1;
																														this.frame = num1063;
																														if (num1063 >= Main.projFrames[this.type])
																														{
																															this.frame = 0;
																														}
																													}
																													this.rotation = this.ai[0] - 1.5707964f;
																													return;
																												}
																												else if (this.aiStyle == 115)
																												{
																													Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
																													this.velocity *= 0.985f;
																													this.rotation += this.velocity.X * 0.2f;
																													if (this.velocity.X > 0f)
																													{
																														this.rotation += 0.08f;
																													}
																													else
																													{
																														this.rotation -= 0.08f;
																													}
																													ref float ptr = ref this.ai[1];
																													ptr += 1f;
																													if (this.ai[1] > 30f)
																													{
																														this.alpha += 10;
																														if (this.alpha >= 255)
																														{
																															this.alpha = 255;
																															this.Kill();
																															return;
																														}
																													}
																												}
																												else
																												{
																													if (this.aiStyle == 116)
																													{
																														if (this.localAI[0] == 0f)
																														{
																															this.rotation = this.ai[1];
																															this.localAI[0] = 1f;
																														}
																														Player player10 = Main.player[this.owner];
																														if (player10.setSolar)
																														{
																															this.timeLeft = 2;
																														}
																														float angle = (float)player10.miscCounter / 300f * 12.566371f + this.ai[1];
																														angle = MathHelper.WrapAngle(angle);
																														this.rotation = this.rotation.AngleLerp(angle, 0.05f);
																														this.alpha -= 15;
																														if (this.alpha < 0)
																														{
																															this.alpha = 0;
																														}
																														this.velocity = this.rotation.ToRotationVector2() * 100f - player10.velocity;
																														base.Center = player10.Center - this.velocity;
																														return;
																													}
																													if (this.aiStyle == 117)
																													{
																														ref float ptr = ref this.ai[1];
																														ptr += 0.01f;
																														this.scale = this.ai[1];
																														ptr = ref this.ai[0];
																														ref float ptr66 = ref ptr;
																														float num1064 = ptr;
																														ptr66 = num1064 + 1f;
																														if (this.ai[0] >= (float)(3 * Main.projFrames[this.type]))
																														{
																															this.Kill();
																															return;
																														}
																														int num1063 = this.frameCounter + 1;
																														this.frameCounter = num1063;
																														if (num1063 >= 3)
																														{
																															this.frameCounter = 0;
																															num1063 = this.frame + 1;
																															this.frame = num1063;
																															if (num1063 >= Main.projFrames[this.type])
																															{
																																this.hide = true;
																															}
																														}
																														this.alpha -= 63;
																														if (this.alpha < 0)
																														{
																															this.alpha = 0;
																														}
																														bool flag55 = this.type == 612 || this.type == 953 || this.type == 978;
																														bool flag56 = this.type == 624;
																														if (flag55)
																														{
																															Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
																														}
																														if (this.ai[0] != 1f)
																														{
																															return;
																														}
																														this.position = base.Center;
																														this.width = (this.height = (int)(52f * this.scale));
																														base.Center = this.position;
																														this.Damage();
																														if (flag55)
																														{
																															SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
																															for (int num902 = 0; num902 < 4; num902 = num1063 + 1)
																															{
																																int num903 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
																																Main.dust[num903].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																																num1063 = num902;
																															}
																															for (int num904 = 0; num904 < 10; num904 = num1063 + 1)
																															{
																																int num905 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 2.7f);
																																Main.dust[num905].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																																Main.dust[num905].noGravity = true;
																																Dust dust186 = Main.dust[num905];
																																Dust dust212 = dust186;
																																dust212.velocity *= 3f;
																																num905 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
																																Main.dust[num905].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																																dust186 = Main.dust[num905];
																																dust212 = dust186;
																																dust212.velocity *= 2f;
																																Main.dust[num905].noGravity = true;
																																Main.dust[num905].fadeIn = 2.5f;
																																num1063 = num904;
																															}
																															for (int num906 = 0; num906 < 5; num906 = num1063 + 1)
																															{
																																int num907 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
																																Main.dust[num907].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																																Main.dust[num907].noGravity = true;
																																Dust dust187 = Main.dust[num907];
																																Dust dust212 = dust187;
																																dust212.velocity *= 3f;
																																num1063 = num906;
																															}
																															for (int num908 = 0; num908 < 10; num908 = num1063 + 1)
																															{
																																int num909 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
																																Main.dust[num909].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																																Main.dust[num909].noGravity = true;
																																Dust dust188 = Main.dust[num909];
																																Dust dust212 = dust188;
																																dust212.velocity *= 3f;
																																num1063 = num908;
																															}
																														}
																														if (!flag56)
																														{
																															return;
																														}
																														SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
																														for (int num910 = 0; num910 < 20; num910 = num1063 + 1)
																														{
																															int num911 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1.5f);
																															Main.dust[num911].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
																															Dust dust189 = Main.dust[num911];
																															Dust dust212 = dust189;
																															dust212.velocity *= 2f;
																															Main.dust[num911].noGravity = true;
																															Main.dust[num911].fadeIn = 2.5f;
																															Main.dust[num911].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																															num1063 = num910;
																														}
																														for (int num912 = 0; num912 < 15; num912 = num1063 + 1)
																														{
																															int num913 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 0, default(Color), 2.7f);
																															Main.dust[num913].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
																															Main.dust[num913].noGravity = true;
																															Dust dust190 = Main.dust[num913];
																															Dust dust212 = dust190;
																															dust212.velocity *= 3f;
																															Main.dust[num913].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																															num1063 = num912;
																														}
																														float num914 = (float)Main.rand.NextDouble() * 6.2831855f;
																														float num915 = (float)Main.rand.NextDouble() * 6.2831855f;
																														float num916 = (float)Main.rand.NextDouble() * 6.2831855f;
																														float num917 = 7f + (float)Main.rand.NextDouble() * 7f;
																														float num918 = 7f + (float)Main.rand.NextDouble() * 7f;
																														float num919 = 7f + (float)Main.rand.NextDouble() * 7f;
																														float num920 = num917;
																														if (num918 > num920)
																														{
																															num920 = num918;
																														}
																														if (num919 > num920)
																														{
																															num920 = num919;
																														}
																														for (int num921 = 0; num921 < 200; num921 = num1063 + 1)
																														{
																															int num922 = 135;
																															float num923 = num920;
																															if (num921 > 50)
																															{
																																num923 = num918;
																															}
																															if (num921 > 100)
																															{
																																num923 = num917;
																															}
																															if (num921 > 150)
																															{
																																num923 = num919;
																															}
																															int num924 = Dust.NewDust(this.position, 6, 6, num922, 0f, 0f, 100, default(Color), 1f);
																															Vector2 vector142 = Main.dust[num924].velocity;
																															Main.dust[num924].position = base.Center;
																															vector142.Normalize();
																															vector142 *= num923;
																															if (num921 > 150)
																															{
																																ptr = ref vector142.Y;
																																ptr *= 0.5f;
																																vector142 = vector142.RotatedBy((double)num916, default(Vector2));
																															}
																															else if (num921 > 100)
																															{
																																ptr = ref vector142.X;
																																ptr *= 0.5f;
																																vector142 = vector142.RotatedBy((double)num914, default(Vector2));
																															}
																															else if (num921 > 50)
																															{
																																ptr = ref vector142.Y;
																																ptr *= 0.5f;
																																vector142 = vector142.RotatedBy((double)num915, default(Vector2));
																															}
																															Dust dust191 = Main.dust[num924];
																															Dust dust212 = dust191;
																															dust212.velocity *= 0.2f;
																															dust191 = Main.dust[num924];
																															dust212 = dust191;
																															dust212.velocity += vector142;
																															Main.dust[num924].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
																															if (num921 <= 200)
																															{
																																Main.dust[num924].scale = 2f;
																																Main.dust[num924].noGravity = true;
																																Main.dust[num924].fadeIn = Main.rand.NextFloat() * 2f;
																																if (Main.rand.Next(4) == 0)
																																{
																																	Main.dust[num924].fadeIn = 2.5f;
																																}
																																Main.dust[num924].noLight = true;
																																if (num921 < 100)
																																{
																																	dust191 = Main.dust[num924];
																																	dust212 = dust191;
																																	dust212.position += Main.dust[num924].velocity * 20f;
																																	dust191 = Main.dust[num924];
																																	dust212 = dust191;
																																	dust212.velocity *= -1f;
																																}
																															}
																															num1063 = num921;
																														}
																														return;
																													}
																													else if (this.aiStyle == 118)
																													{
																														ref float ptr = ref this.ai[0];
																														ref float ptr67 = ref ptr;
																														float num1064 = ptr;
																														ptr67 = num1064 + 1f;
																														int num925 = 0;
																														if (this.velocity.Length() <= 4f)
																														{
																															num925 = 1;
																														}
																														this.alpha -= 15;
																														if (this.alpha < 0)
																														{
																															this.alpha = 0;
																														}
																														if (num925 != 0)
																														{
																															if (num925 == 1)
																															{
																																this.rotation -= 0.10471976f;
																																int num1063;
																																for (int num926 = 0; num926 < 1; num926 = num1063 + 1)
																																{
																																	if (Main.rand.Next(2) == 0)
																																	{
																																		Vector2 vector143 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																		Dust dust192 = Main.dust[Dust.NewDust(base.Center - vector143 * 30f, 0, 0, 86, 0f, 0f, 0, default(Color), 1f)];
																																		dust192.noGravity = true;
																																		dust192.position = base.Center - vector143 * (float)Main.rand.Next(10, 21);
																																		dust192.velocity = vector143.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																																		dust192.scale = 0.9f + Main.rand.NextFloat();
																																		dust192.fadeIn = 0.5f;
																																		dust192.customData = this;
																																		vector143 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																		dust192 = Main.dust[Dust.NewDust(base.Center - vector143 * 30f, 0, 0, 90, 0f, 0f, 0, default(Color), 1f)];
																																		dust192.noGravity = true;
																																		dust192.position = base.Center - vector143 * (float)Main.rand.Next(10, 21);
																																		dust192.velocity = vector143.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																																		dust192.scale = 0.9f + Main.rand.NextFloat();
																																		dust192.fadeIn = 0.5f;
																																		dust192.customData = this;
																																		dust192.color = Color.Crimson;
																																	}
																																	else
																																	{
																																		Vector2 vector144 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																		Dust dust193 = Main.dust[Dust.NewDust(base.Center - vector144 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																																		dust193.noGravity = true;
																																		dust193.position = base.Center - vector144 * (float)Main.rand.Next(20, 31);
																																		dust193.velocity = vector144.RotatedBy(-1.5707963705062866, default(Vector2)) * 5f;
																																		dust193.scale = 0.9f + Main.rand.NextFloat();
																																		dust193.fadeIn = 0.5f;
																																		dust193.customData = this;
																																	}
																																	num1063 = num926;
																																}
																																if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == this.owner)
																																{
																																	Vector2 vector145 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
																																	Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector145.X, vector145.Y, 618, this.damage / 2, 0f, this.owner, 0f, (float)this.whoAmI, 0f);
																																}
																																Vector2 vector146 = base.Center;
																																float num927 = 800f;
																																bool flag57 = false;
																																int num928 = 0;
																																if (this.ai[1] == 0f)
																																{
																																	for (int num929 = 0; num929 < 200; num929 = num1063 + 1)
																																	{
																																		if (Main.npc[num929].CanBeChasedBy(this, false))
																																		{
																																			Vector2 center18 = Main.npc[num929].Center;
																																			if (base.Distance(center18) < num927 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num929].position, Main.npc[num929].width, Main.npc[num929].height))
																																			{
																																				num927 = base.Distance(center18);
																																				vector146 = center18;
																																				flag57 = true;
																																				num928 = num929;
																																			}
																																		}
																																		num1063 = num929;
																																	}
																																	if (flag57)
																																	{
																																		if (this.ai[1] != (float)(num928 + 1))
																																		{
																																			this.netUpdate = true;
																																		}
																																		this.ai[1] = (float)(num928 + 1);
																																	}
																																	flag57 = false;
																																}
																																if (this.ai[1] != 0f)
																																{
																																	int num930 = (int)(this.ai[1] - 1f);
																																	if (Main.npc[num930].active && Main.npc[num930].CanBeChasedBy(this, true) && base.Distance(Main.npc[num930].Center) < 1000f)
																																	{
																																		flag57 = true;
																																		vector146 = Main.npc[num930].Center;
																																	}
																																}
																																if (!this.friendly)
																																{
																																	flag57 = false;
																																}
																																if (flag57)
																																{
																																	float num931 = 4f;
																																	int num932 = 8;
																																	Vector2 vector147;
																																	vector147..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
																																	float num933 = vector146.X - vector147.X;
																																	float num934 = vector146.Y - vector147.Y;
																																	float num935 = (float)Math.Sqrt((double)(num933 * num933 + num934 * num934));
																																	num935 = num931 / num935;
																																	num933 *= num935;
																																	num934 *= num935;
																																	this.velocity.X = (this.velocity.X * (float)(num932 - 1) + num933) / (float)num932;
																																	this.velocity.Y = (this.velocity.Y * (float)(num932 - 1) + num934) / (float)num932;
																																}
																															}
																														}
																														else
																														{
																															this.rotation -= 0.10471976f;
																															if (Main.rand.Next(3) == 0)
																															{
																																if (Main.rand.Next(2) == 0)
																																{
																																	Vector2 vector148 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																	Dust dust194 = Main.dust[Dust.NewDust(base.Center - vector148 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[]
																																	{
																																		86,
																																		90
																																	}), 0f, 0f, 0, default(Color), 1f)];
																																	dust194.noGravity = true;
																																	dust194.position = base.Center - vector148 * (float)Main.rand.Next(10, 21);
																																	dust194.velocity = vector148.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																																	dust194.scale = 0.5f + Main.rand.NextFloat();
																																	dust194.fadeIn = 0.5f;
																																	dust194.customData = this;
																																}
																																else
																																{
																																	Vector2 vector149 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																	Dust dust195 = Main.dust[Dust.NewDust(base.Center - vector149 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																																	dust195.noGravity = true;
																																	dust195.position = base.Center - vector149 * 30f;
																																	dust195.velocity = vector149.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																																	dust195.scale = 0.5f + Main.rand.NextFloat();
																																	dust195.fadeIn = 0.5f;
																																	dust195.customData = this;
																																}
																															}
																															if (this.ai[0] >= 30f)
																															{
																																this.velocity *= 0.98f;
																																this.scale += 0.0074468083f;
																																if (this.scale > 1.3f)
																																{
																																	this.scale = 1.3f;
																																}
																																this.rotation -= 0.017453292f;
																															}
																															if (this.velocity.Length() < 4.1f)
																															{
																																this.velocity.Normalize();
																																this.velocity *= 4f;
																																this.ai[0] = 0f;
																															}
																														}
																														if (this.alpha < 150)
																														{
																															Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
																														}
																														if (this.ai[0] >= 600f)
																														{
																															this.Kill();
																															return;
																														}
																													}
																													else if (this.aiStyle == 119)
																													{
																														int num936 = 0;
																														float num937 = 0f;
																														float x7 = 0f;
																														float y6 = 0f;
																														bool flag58 = false;
																														bool flag59 = false;
																														int num938 = this.type;
																														if (num938 == 618)
																														{
																															num936 = 617;
																															num937 = 420f;
																															x7 = 0.15f;
																															y6 = 0.15f;
																														}
																														if (flag59)
																														{
																															int num939 = (int)this.ai[1];
																															if (!Main.projectile[num939].active || Main.projectile[num939].type != num936)
																															{
																																this.Kill();
																																return;
																															}
																															this.timeLeft = 2;
																														}
																														ref float ptr = ref this.ai[0];
																														ref float ptr68 = ref ptr;
																														float num1064 = ptr;
																														ptr68 = num1064 + 1f;
																														if (this.ai[0] >= num937)
																														{
																															return;
																														}
																														bool flag60 = true;
																														int num940 = (int)this.ai[1];
																														if (Main.projectile[num940].active && Main.projectile[num940].type == num936)
																														{
																															if (!flag58 && Main.projectile[num940].oldPos[1] != Vector2.Zero)
																															{
																																this.position += Main.projectile[num940].position - Main.projectile[num940].oldPos[1];
																															}
																															if (base.Center.HasNaNs())
																															{
																																this.Kill();
																																return;
																															}
																														}
																														else
																														{
																															this.ai[0] = num937;
																															flag60 = false;
																															this.Kill();
																														}
																														if (flag60 && !flag58)
																														{
																															this.velocity += new Vector2((float)Math.Sign(Main.projectile[num940].Center.X - base.Center.X), (float)Math.Sign(Main.projectile[num940].Center.Y - base.Center.Y)) * new Vector2(x7, y6);
																															if (this.velocity.Length() > 6f)
																															{
																																this.velocity *= 6f / this.velocity.Length();
																															}
																														}
																														if (this.type == 618)
																														{
																															if (Main.rand.Next(2) == 0)
																															{
																																int num941 = Dust.NewDust(base.Center, 8, 8, 86, 0f, 0f, 0, default(Color), 1f);
																																Main.dust[num941].position = base.Center;
																																Main.dust[num941].velocity = this.velocity;
																																Main.dust[num941].noGravity = true;
																																Main.dust[num941].scale = 1.5f;
																																if (flag60)
																																{
																																	Main.dust[num941].customData = Main.projectile[(int)this.ai[1]];
																																}
																															}
																															this.alpha = 255;
																															return;
																														}
																														this.Kill();
																														return;
																													}
																													else
																													{
																														if (this.aiStyle == 120)
																														{
																															this.AI_120_StardustGuardian();
																															return;
																														}
																														if (this.aiStyle == 121)
																														{
																															this.AI_121_StardustDragon();
																															return;
																														}
																														if (this.aiStyle == 122)
																														{
																															int num942 = (int)this.ai[0];
																															bool flag61 = false;
																															if (num942 == -1 || !Main.npc[num942].active)
																															{
																																flag61 = true;
																															}
																															if (flag61)
																															{
																																if (this.type == 629)
																																{
																																	this.Kill();
																																	return;
																																}
																																if (this.type == 631 && this.ai[0] != -1f)
																																{
																																	this.ai[0] = -1f;
																																	this.netUpdate = true;
																																}
																															}
																															if (!flag61 && base.Hitbox.Intersects(Main.npc[num942].Hitbox))
																															{
																																this.Kill();
																																if (this.type == 631)
																																{
																																	this.localAI[1] = 1f;
																																	this.Damage();
																																}
																																return;
																															}
																															if (this.type == 629)
																															{
																																Vector2 value17 = Main.npc[num942].Center - base.Center;
																																this.velocity = Vector2.Normalize(value17) * 5f;
																																Dust.QuickDust(base.Center, Color.Red);
																															}
																															if (this.type != 631)
																															{
																																return;
																															}
																															if (this.ai[1] > 0f)
																															{
																																ref float ptr = ref this.ai[1];
																																ref float ptr69 = ref ptr;
																																float num1064 = ptr;
																																ptr69 = num1064 - 1f;
																																this.velocity = Vector2.Zero;
																																return;
																															}
																															if (flag61)
																															{
																																if (this.velocity == Vector2.Zero)
																																{
																																	this.Kill();
																																}
																																this.tileCollide = true;
																																this.alpha += 10;
																																if (this.alpha > 255)
																																{
																																	this.Kill();
																																}
																															}
																															else
																															{
																																Vector2 value18 = Main.npc[num942].Center - base.Center;
																																this.velocity = Vector2.Normalize(value18) * 12f;
																																this.alpha -= 15;
																																if (this.alpha < 0)
																																{
																																	this.alpha = 0;
																																}
																															}
																															this.rotation = this.velocity.ToRotation() - 1.5707964f;
																															return;
																														}
																														else if (this.aiStyle == 123)
																														{
																															bool flag62 = this.type == 641;
																															bool flag63 = this.type == 643;
																															float num943 = 1000f;
																															this.velocity = Vector2.Zero;
																															if (flag62)
																															{
																																this.alpha -= 5;
																																if (this.alpha < 0)
																																{
																																	this.alpha = 0;
																																}
																																if (this.direction == 0)
																																{
																																	this.direction = Main.player[this.owner].direction;
																																}
																																this.rotation -= (float)this.direction * 6.2831855f / 120f;
																																this.scale = this.Opacity;
																																Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * this.Opacity);
																																if (Main.rand.Next(2) == 0)
																																{
																																	Vector2 vector150 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																	Dust dust196 = Main.dust[Dust.NewDust(base.Center - vector150 * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																																	dust196.noGravity = true;
																																	dust196.position = base.Center - vector150 * (float)Main.rand.Next(10, 21);
																																	dust196.velocity = vector150.RotatedBy(1.5707963705062866, default(Vector2)) * 6f;
																																	dust196.scale = 0.5f + Main.rand.NextFloat();
																																	dust196.fadeIn = 0.5f;
																																	dust196.customData = base.Center;
																																}
																																if (Main.rand.Next(2) == 0)
																																{
																																	Vector2 vector151 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																																	Dust dust197 = Main.dust[Dust.NewDust(base.Center - vector151 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																																	dust197.noGravity = true;
																																	dust197.position = base.Center - vector151 * 30f;
																																	dust197.velocity = vector151.RotatedBy(-1.5707963705062866, default(Vector2)) * 3f;
																																	dust197.scale = 0.5f + Main.rand.NextFloat();
																																	dust197.fadeIn = 0.5f;
																																	dust197.customData = base.Center;
																																}
																																if (this.ai[0] < 0f)
																																{
																																	Vector2 center19 = base.Center;
																																	int num944 = Dust.NewDust(center19 - Vector2.One * 8f, 16, 16, 229, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
																																	Dust dust198 = Main.dust[num944];
																																	Dust dust212 = dust198;
																																	dust212.velocity *= 2f;
																																	Main.dust[num944].noGravity = true;
																																	Main.dust[num944].scale = Utils.SelectRandom<float>(Main.rand, new float[]
																																	{
																																		0.8f,
																																		1.65f
																																	});
																																	Main.dust[num944].customData = this;
																																}
																															}
																															float ptr;
																															int num1063;
																															float num1064;
																															if (flag63)
																															{
																																this.alpha -= 5;
																																if (this.alpha < 0)
																																{
																																	this.alpha = 0;
																																}
																																if (this.direction == 0)
																																{
																																	this.direction = Main.player[this.owner].direction;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 3)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame + 1;
																																	this.frame = num1063;
																																	if (num1063 >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																	}
																																}
																																if (this.alpha == 0 && Main.rand.Next(15) == 0)
																																{
																																	Dust dust199 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100, default(Color), 1f)];
																																	dust199.velocity.X = 0f;
																																	dust199.noGravity = true;
																																	dust199.fadeIn = 1f;
																																	dust199.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
																																	dust199.scale = 0.5f;
																																}
																																ptr = ref this.localAI[0];
																																ref float ptr70 = ref ptr;
																																num1064 = ptr;
																																ptr70 = num1064 + 1f;
																																if (this.localAI[0] >= 60f)
																																{
																																	this.localAI[0] = 0f;
																																}
																															}
																															if (this.ai[0] < 0f)
																															{
																																ptr = ref this.ai[0];
																																ref float ptr71 = ref ptr;
																																num1064 = ptr;
																																ptr71 = num1064 + 1f;
																																if (flag62)
																																{
																																	ptr = ref this.ai[1];
																																	ptr -= (float)this.direction * 0.3926991f / 50f;
																																}
																															}
																															if (this.ai[0] == 0f)
																															{
																																int num945 = -1;
																																float num946 = num943;
																																NPC ownerMinionAttackTargetNPC4 = this.OwnerMinionAttackTargetNPC;
																																if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this, false))
																																{
																																	float num947 = base.Distance(ownerMinionAttackTargetNPC4.Center);
																																	if (num947 < num946 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC4.Center, 0, 0))
																																	{
																																		num946 = num947;
																																		num945 = ownerMinionAttackTargetNPC4.whoAmI;
																																	}
																																}
																																if (num945 < 0)
																																{
																																	for (int num948 = 0; num948 < 200; num948 = num1063 + 1)
																																	{
																																		NPC nPC14 = Main.npc[num948];
																																		if (nPC14.CanBeChasedBy(this, false))
																																		{
																																			float num949 = base.Distance(nPC14.Center);
																																			if (num949 < num946 && Collision.CanHitLine(base.Center, 0, 0, nPC14.Center, 0, 0))
																																			{
																																				num946 = num949;
																																				num945 = num948;
																																			}
																																		}
																																		num1063 = num948;
																																	}
																																}
																																if (num945 != -1)
																																{
																																	this.ai[0] = 1f;
																																	this.ai[1] = (float)num945;
																																	this.netUpdate = true;
																																	return;
																																}
																															}
																															if (this.ai[0] <= 0f)
																															{
																																return;
																															}
																															int num950 = (int)this.ai[1];
																															if (!Main.npc[num950].CanBeChasedBy(this, false))
																															{
																																this.ai[0] = 0f;
																																this.ai[1] = 0f;
																																this.netUpdate = true;
																																return;
																															}
																															ptr = ref this.ai[0];
																															ref float ptr72 = ref ptr;
																															num1064 = ptr;
																															ptr72 = num1064 + 1f;
																															float num951 = 30f;
																															if (flag62)
																															{
																																num951 = 10f;
																															}
																															if (flag63)
																															{
																																num951 = 5f;
																															}
																															if (this.ai[0] < num951)
																															{
																																return;
																															}
																															Vector2 vector152 = base.DirectionTo(Main.npc[num950].Center);
																															if (vector152.HasNaNs())
																															{
																																vector152 = Vector2.UnitY;
																															}
																															float num952 = vector152.ToRotation();
																															int num953 = (vector152.X > 0f) ? 1 : -1;
																															if (flag62)
																															{
																																this.direction = num953;
																																this.ai[0] = -20f;
																																this.ai[1] = num952 + (float)num953 * 3.1415927f / 6f;
																																this.netUpdate = true;
																																if (this.owner == Main.myPlayer)
																																{
																																	Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector152.X, vector152.Y, 642, this.damage, this.knockBack, this.owner, this.ai[1], (float)this.whoAmI, 0f);
																																}
																															}
																															if (!flag63)
																															{
																																return;
																															}
																															this.direction = num953;
																															this.ai[0] = -20f;
																															this.netUpdate = true;
																															if (this.owner != Main.myPlayer)
																															{
																																return;
																															}
																															NPC nPC15 = Main.npc[num950];
																															Vector2 vector153 = nPC15.position + nPC15.Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
																															for (int num954 = 0; num954 < 3; num954 = num1063 + 1)
																															{
																																Vector2 other = base.Center + vector153;
																																Vector2 vector154 = nPC15.velocity * 30f;
																																other += vector154;
																																float num955 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, base.Distance(other), false));
																																if (num954 > 0)
																																{
																																	other = base.Center + vector153.RotatedByRandom(0.7853981852531433) * (Main.rand.NextFloat() * num955 + 0.5f);
																																}
																																float x8 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
																																Projectile.NewProjectile(this.GetProjectileSource_FromThis(), other.X, other.Y, 0f, 0f, 644, this.damage, this.knockBack, this.owner, x8, (float)this.whoAmI, 0f);
																																num1063 = num954;
																															}
																															return;
																														}
																														else if (this.aiStyle == 124)
																														{
																															bool flag64 = this.type == 650;
																															Player player11 = Main.player[this.owner];
																															if (player11.dead)
																															{
																																this.Kill();
																																return;
																															}
																															if (this.type == 650 && player11.suspiciouslookingTentacle)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 882 && player11.petFlagEyeOfCthulhuPet)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 888 && player11.petFlagTwinsPet)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 895 && player11.petFlagFairyQueenPet)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 896 && player11.petFlagPumpkingPet)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 898 && player11.petFlagIceQueenPet)
																															{
																																this.timeLeft = 2;
																															}
																															if (this.type == 957 && player11.petFlagGlommerPet)
																															{
																																this.timeLeft = 2;
																															}
																															this.direction = (this.spriteDirection = player11.direction);
																															if (this.type == 650)
																															{
																																Vector3 v3_ = new Vector3(0.5f, 0.9f, 1f) * 2f;
																																DelegateMethods.v3_1 = v3_;
																																Vector2 center28 = base.Center;
																																Vector2 end6 = base.Center + this.velocity * 6f;
																																float width7 = 20f;
																																Utils.TileActionAttempt plot7;
																																if ((plot7 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot7 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center28, end6, width7, plot7);
																																Vector2 left = base.Left;
																																Vector2 right = base.Right;
																																float width8 = 20f;
																																Utils.TileActionAttempt plot8;
																																if ((plot8 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot8 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left, right, width8, plot8);
																																Vector2 center29 = player11.Center;
																																Vector2 end7 = player11.Center + player11.velocity * 6f;
																																float width9 = 40f;
																																Utils.TileActionAttempt plot9;
																																if ((plot9 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot9 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center29, end7, width9, plot9);
																																Vector2 left2 = player11.Left;
																																Vector2 right2 = player11.Right;
																																float width10 = 40f;
																																Utils.TileActionAttempt plot10;
																																if ((plot10 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot10 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left2, right2, width10, plot10);
																															}
																															if (this.type == 895)
																															{
																																Vector3 vector155 = new Vector3(1f, 0.6f, 1f) * 1.5f;
																																DelegateMethods.v3_1 = vector155 * 0.75f;
																																Vector2 center30 = player11.Center;
																																Vector2 end8 = player11.Center + player11.velocity * 6f;
																																float width11 = 40f;
																																Utils.TileActionAttempt plot11;
																																if ((plot11 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot11 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center30, end8, width11, plot11);
																																Vector2 left3 = player11.Left;
																																Vector2 right3 = player11.Right;
																																float width12 = 40f;
																																Utils.TileActionAttempt plot12;
																																if ((plot12 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot12 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left3, right3, width12, plot12);
																																DelegateMethods.v3_1 = vector155 * 1.5f;
																																Vector2 center31 = base.Center;
																																Vector2 end9 = base.Center + this.velocity * 6f;
																																float width13 = 30f;
																																Utils.TileActionAttempt plot13;
																																if ((plot13 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot13 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center31, end9, width13, plot13);
																																Vector2 left4 = base.Left;
																																Vector2 right4 = base.Right;
																																float width14 = 20f;
																																Utils.TileActionAttempt plot14;
																																if ((plot14 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot14 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left4, right4, width14, plot14);
																															}
																															if (this.type == 896)
																															{
																																Vector3 vector156 = new Vector3(1f, 0.7f, 0.05f) * 1.5f;
																																DelegateMethods.v3_1 = vector156 * 0.75f;
																																Vector2 center32 = player11.Center;
																																Vector2 end10 = player11.Center + player11.velocity * 6f;
																																float width15 = 40f;
																																Utils.TileActionAttempt plot15;
																																if ((plot15 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot15 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center32, end10, width15, plot15);
																																Vector2 left5 = player11.Left;
																																Vector2 right5 = player11.Right;
																																float width16 = 40f;
																																Utils.TileActionAttempt plot16;
																																if ((plot16 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot16 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left5, right5, width16, plot16);
																																DelegateMethods.v3_1 = vector156 * 1.5f;
																																Vector2 center33 = base.Center;
																																Vector2 end11 = base.Center + this.velocity * 6f;
																																float width17 = 30f;
																																Utils.TileActionAttempt plot17;
																																if ((plot17 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot17 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(center33, end11, width17, plot17);
																																Vector2 left6 = base.Left;
																																Vector2 right6 = base.Right;
																																float width18 = 20f;
																																Utils.TileActionAttempt plot18;
																																if ((plot18 = Projectile.<>O.<4>__CastLightOpen) == null)
																																{
																																	plot18 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
																																}
																																Utils.PlotTileLine(left6, right6, width18, plot18);
																															}
																															float num956 = 30f;
																															float y7 = -20f;
																															int num957 = player11.direction;
																															if (this.type == 882 && player11.ownedProjectileCounts[650] > 0)
																															{
																																num957 *= -1;
																															}
																															if (this.type == 888)
																															{
																																num956 = 30f;
																																y7 = -50f;
																																if (player11.ownedProjectileCounts[650] > 0)
																																{
																																	y7 = -70f;
																																}
																															}
																															if (this.type == 895)
																															{
																																num956 = -36f;
																																y7 = -50f;
																															}
																															if (this.type == 896)
																															{
																																num956 = 30f;
																																y7 = -60f;
																																if (player11.ownedProjectileCounts[888] > 0)
																																{
																																	num956 = -30f;
																																}
																															}
																															if (this.type == 898)
																															{
																																num956 = -30f;
																																y7 = -50f;
																																if (player11.ownedProjectileCounts[895] > 0)
																																{
																																	num956 = 30f;
																																}
																															}
																															if (this.type == 957)
																															{
																																num956 = -40f;
																																y7 = -40f;
																																if (player11.ownedProjectileCounts[895] > 0)
																																{
																																	num956 = 40f;
																																}
																															}
																															Vector2 vector157;
																															vector157..ctor((float)num957 * num956, y7);
																															Vector2 vector158 = player11.MountedCenter + vector157;
																															float num958 = Vector2.Distance(base.Center, vector158);
																															if (num958 > 1000f)
																															{
																																base.Center = player11.Center + vector157;
																															}
																															Vector2 vector159 = vector158 - base.Center;
																															float num959 = 4f;
																															if (num958 < num959)
																															{
																																this.velocity *= 0.25f;
																															}
																															if (vector159 != Vector2.Zero)
																															{
																																if (vector159.Length() < num959)
																																{
																																	this.velocity = vector159;
																																}
																																else
																																{
																																	this.velocity = vector159 * 0.1f;
																																}
																															}
																															if (num958 > 50f && (this.type == 895 || this.type == 898 || this.type == 957))
																															{
																																this.direction = (this.spriteDirection = 1);
																																if (this.velocity.X < 0f)
																																{
																																	this.direction = (this.spriteDirection = -1);
																																}
																															}
																															int num1063;
																															if (this.velocity.Length() > 6f)
																															{
																																if (this.type == 650)
																																{
																																	float num960 = this.velocity.ToRotation() + 1.5707964f;
																																	if (Math.Abs(this.rotation - num960) >= 3.1415927f)
																																	{
																																		if (num960 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num961 = 12f;
																																	this.rotation = (this.rotation * (num961 - 1f) + num960) / num961;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 4)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame + 1;
																																		this.frame = num1063;
																																		if (num1063 >= Main.projFrames[this.type])
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																}
																																else if (this.type == 882)
																																{
																																	this.rotation = this.velocity.X * 0.125f;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 3)
																																	{
																																		this.frameCounter = 0;
																																		if (this.frame < 6)
																																		{
																																			this.frame = 6;
																																		}
																																		else
																																		{
																																			num1063 = this.frame;
																																			this.frame = num1063 + 1;
																																			if (this.frame > 15)
																																			{
																																				this.frame = 10;
																																			}
																																		}
																																	}
																																}
																																else if (this.type == 888)
																																{
																																	float num962 = this.velocity.ToRotation() + 1.5707964f;
																																	if (Math.Abs(this.rotation - num962) >= 3.1415927f)
																																	{
																																		if (num962 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num963 = 12f;
																																	this.rotation = (this.rotation * (num963 - 1f) + num962) / num963;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 3)
																																	{
																																		this.frameCounter = 0;
																																		if (this.frame < 6)
																																		{
																																			this.frame = 6;
																																		}
																																		else
																																		{
																																			num1063 = this.frame;
																																			this.frame = num1063 + 1;
																																			if (this.frame > 17)
																																			{
																																				this.frame = 6;
																																			}
																																		}
																																	}
																																}
																																else if (this.type == 895)
																																{
																																	float num964 = this.velocity.X * 0.1f;
																																	if (Math.Abs(this.rotation - num964) >= 3.1415927f)
																																	{
																																		if (num964 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num965 = 12f;
																																	this.rotation = (this.rotation * (num965 - 1f) + num964) / num965;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 3)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame;
																																		this.frame = num1063 + 1;
																																		if (this.frame >= Main.projFrames[this.type])
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																	if (this.frameCounter == 0)
																																	{
																																		int num966 = Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 50, default(Color), 2f);
																																		Main.dust[num966].noGravity = true;
																																	}
																																}
																																else if (this.type == 896)
																																{
																																	float num967 = this.velocity.ToRotation() + 1.5707964f;
																																	if (Math.Abs(this.rotation - num967) >= 3.1415927f)
																																	{
																																		if (num967 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num968 = 12f;
																																	this.rotation = (this.rotation * (num968 - 1f) + num967) / num968;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 4)
																																	{
																																		this.frameCounter = 0;
																																		if (this.frame < 8)
																																		{
																																			this.frame = 8;
																																		}
																																		else
																																		{
																																			num1063 = this.frame;
																																			this.frame = num1063 + 1;
																																			if (this.frame >= Main.projFrames[this.type])
																																			{
																																				this.frame = 8;
																																			}
																																		}
																																	}
																																}
																																else if (this.type == 898)
																																{
																																	float num969 = this.velocity.X * 0.1f;
																																	if (Math.Abs(this.rotation - num969) >= 3.1415927f)
																																	{
																																		if (num969 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num970 = 12f;
																																	this.rotation = (this.rotation * (num970 - 1f) + num969) / num970;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 3)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame;
																																		this.frame = num1063 + 1;
																																		if (this.frame >= Main.projFrames[this.type])
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																	if (this.frameCounter == 0)
																																	{
																																		int num971 = Dust.NewDust(this.position, this.width, this.height, 80, 0f, 0f, 50, default(Color), 1f);
																																		Main.dust[num971].noGravity = true;
																																	}
																																}
																																else if (this.type == 957)
																																{
																																	float num972 = this.velocity.X * 0.05f;
																																	if (Math.Abs(this.rotation - num972) >= 3.1415927f)
																																	{
																																		if (num972 < this.rotation)
																																		{
																																			this.rotation -= 6.2831855f;
																																		}
																																		else
																																		{
																																			this.rotation += 6.2831855f;
																																		}
																																	}
																																	float num973 = 12f;
																																	this.rotation = (this.rotation * (num973 - 1f) + num972) / num973;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 4)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame;
																																		this.frame = num1063 + 1;
																																		if (this.frame >= Main.projFrames[this.type] * 2)
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																}
																															}
																															else if (this.type == 650)
																															{
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 6)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame + 1;
																																	this.frame = num1063;
																																	if (num1063 >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																	}
																																}
																															}
																															else if (this.type == 882)
																															{
																																this.rotation = this.velocity.X * 0.125f;
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 5)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame;
																																	this.frame = num1063 + 1;
																																	if (this.frame == 6 || this.frame >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																	}
																																}
																															}
																															else if (this.type == 888)
																															{
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 5)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame;
																																	this.frame = num1063 + 1;
																																	if (this.frame == 6 || this.frame >= 18)
																																	{
																																		this.frame = 0;
																																	}
																																}
																															}
																															else if (this.type == 895)
																															{
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 5)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame;
																																	this.frame = num1063 + 1;
																																	if (this.frame >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																	}
																																}
																															}
																															else if (this.type == 896)
																															{
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 5)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame;
																																	this.frame = num1063 + 1;
																																	if (this.frame == 8 || this.frame >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																		if (Main.rand.Next(15) == 0)
																																		{
																																			this.frame = 8;
																																		}
																																	}
																																}
																															}
																															else if (this.type == 898)
																															{
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																num1063 = this.frameCounter + 1;
																																this.frameCounter = num1063;
																																if (num1063 >= 5)
																																{
																																	this.frameCounter = 0;
																																	num1063 = this.frame;
																																	this.frame = num1063 + 1;
																																	if (this.frame >= Main.projFrames[this.type])
																																	{
																																		this.frame = 0;
																																	}
																																}
																															}
																															else if (this.type == 957)
																															{
																																int num974 = Main.projFrames[this.type];
																																if (this.rotation > 3.1415927f)
																																{
																																	this.rotation -= 6.2831855f;
																																}
																																if (this.rotation > -0.005f && this.rotation < 0.005f)
																																{
																																	this.rotation = 0f;
																																}
																																else
																																{
																																	this.rotation *= 0.96f;
																																}
																																if (this.velocity.Length() <= 0.01f)
																																{
																																	bool flag65 = true;
																																	int num975 = (int)base.Center.X / 16;
																																	int num976 = (int)base.Center.Y / 16;
																																	int num977 = 4;
																																	for (int num978 = 0; num978 < num977 + 1; num978 = num1063 + 1)
																																	{
																																		if (num975 < 0 || num975 >= Main.maxTilesX || num976 < 0 || num976 >= Main.maxTilesY)
																																		{
																																			flag65 = false;
																																			break;
																																		}
																																		bool flag66 = WorldGen.SolidTileAllowBottomSlope(num975, num976);
																																		if ((num978 == num977 && !flag66) || (num978 < num977 && flag66))
																																		{
																																			flag65 = false;
																																			break;
																																		}
																																		num1063 = num976;
																																		num976 = num1063 + 1;
																																		num1063 = num978;
																																	}
																																	if (flag65)
																																	{
																																		ref float ptr = ref this.localAI[0];
																																		ref float ptr73 = ref ptr;
																																		float num1064 = ptr;
																																		ptr73 = num1064 - 1f;
																																		if (this.localAI[0] <= 0f)
																																		{
																																			this.localAI[0] = 0f;
																																			if (this.frame < num974 * 2)
																																			{
																																				this.frame = num974 * 2;
																																			}
																																			int num979 = 3;
																																			if (this.frame <= 30 && this.frame <= 33)
																																			{
																																				num979 = 2;
																																			}
																																			num1063 = this.frameCounter + 1;
																																			this.frameCounter = num1063;
																																			if (num1063 >= num979)
																																			{
																																				this.frameCounter = 0;
																																				num1063 = this.frame;
																																				this.frame = num1063 + 1;
																																				if (this.frame >= num974 * 3)
																																				{
																																					this.localAI[0] = (float)(200 + Main.rand.Next(150));
																																					this.frame = 0;
																																				}
																																				if (this.frame == 32)
																																				{
																																					SoundEngine.PlaySound(SoundID.GlommerBounce, new Vector2?(base.Bottom), null);
																																				}
																																			}
																																		}
																																		else
																																		{
																																			num1063 = this.frameCounter + 1;
																																			this.frameCounter = num1063;
																																			if (num1063 >= 4)
																																			{
																																				this.frameCounter = 0;
																																				num1063 = this.frame;
																																				this.frame = num1063 + 1;
																																				if (this.frame >= num974 * 2)
																																				{
																																					this.frame = 0;
																																				}
																																			}
																																		}
																																	}
																																	else
																																	{
																																		this.localAI[0] = 300f;
																																		num1063 = this.frameCounter + 1;
																																		this.frameCounter = num1063;
																																		if (num1063 >= 4)
																																		{
																																			this.frameCounter = 0;
																																			num1063 = this.frame;
																																			this.frame = num1063 + 1;
																																			if (this.frame >= num974 * 2)
																																			{
																																				this.frame = 0;
																																			}
																																		}
																																	}
																																}
																																else
																																{
																																	this.localAI[0] = 300f;
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 >= 4)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame;
																																		this.frame = num1063 + 1;
																																		if (this.frame >= num974 * 2)
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																}
																															}
																															if (flag64 && this.ai[0] > 0f)
																															{
																																ref float ptr = ref this.ai[0];
																																if ((ptr += 1f) >= 60f)
																																{
																																	this.ai[0] = 0f;
																																	this.ai[1] = 0f;
																																}
																															}
																															if (flag64 && Main.rand.Next(15) == 0)
																															{
																																float num980 = -1f;
																																int num981 = 17;
																																if ((base.Center - player11.Center).Length() < (float)Main.screenWidth)
																																{
																																	int num982 = (int)base.Center.X / 16;
																																	int num983 = (int)base.Center.Y / 16;
																																	num982 = (int)MathHelper.Clamp((float)num982, (float)(num981 + 1), (float)(Main.maxTilesX - num981 - 1));
																																	num983 = (int)MathHelper.Clamp((float)num983, (float)(num981 + 1), (float)(Main.maxTilesY - num981 - 1));
																																	for (int num984 = num982 - num981; num984 <= num982 + num981; num984 = num1063 + 1)
																																	{
																																		for (int num985 = num983 - num981; num985 <= num983 + num981; num985 = num1063 + 1)
																																		{
																																			int num986 = Main.rand.Next(8);
																																			if (num986 < 4 && new Vector2((float)(num982 - num984), (float)(num983 - num985)).Length() < (float)num981 && Main.tile[num984, num985] != null && Main.tile[num984, num985].active() && Main.IsTileSpelunkable(num984, num985))
																																			{
																																				float num987 = base.Distance(new Vector2((float)(num984 * 16 + 8), (float)(num985 * 16 + 8)));
																																				if (num987 < num980 || num980 == -1f)
																																				{
																																					num980 = num987;
																																					this.ai[0] = 1f;
																																					this.ai[1] = base.AngleTo(new Vector2((float)(num984 * 16 + 8), (float)(num985 * 16 + 8)));
																																				}
																																				if (num986 < 2)
																																				{
																																					int num988 = Dust.NewDust(new Vector2((float)(num984 * 16), (float)(num985 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
																																					Main.dust[num988].fadeIn = 0.75f;
																																					Dust dust200 = Main.dust[num988];
																																					Dust dust212 = dust200;
																																					dust212.velocity *= 0.1f;
																																				}
																																			}
																																			num1063 = num985;
																																		}
																																		num1063 = num984;
																																	}
																																}
																															}
																															if (!flag64)
																															{
																																return;
																															}
																															float f3 = this.localAI[0] % 6.2831855f - 3.1415927f;
																															float num989 = (float)Math.IEEERemainder((double)this.localAI[1], 1.0);
																															if (num989 < 0f)
																															{
																																num989 += 1f;
																															}
																															float num990 = (float)Math.Floor((double)this.localAI[1]);
																															float max = 0.999f;
																															int num991 = 0;
																															float amount2 = 0.1f;
																															bool flag67 = player11.velocity.Length() > 3f;
																															int num992 = -1;
																															int num993 = -1;
																															float num994 = 300f;
																															float num995 = 500f;
																															for (int num996 = 0; num996 < 200; num996 = num1063 + 1)
																															{
																																NPC nPC16 = Main.npc[num996];
																																if (nPC16.active && nPC16.chaseable && !nPC16.dontTakeDamage && !nPC16.immortal)
																																{
																																	float num997 = base.Distance(nPC16.Center);
																																	if (nPC16.friendly || nPC16.lifeMax <= 5)
																																	{
																																		if (num997 < num994 && !flag67)
																																		{
																																			num994 = num997;
																																			num993 = num996;
																																		}
																																	}
																																	else if (num997 < num995)
																																	{
																																		num995 = num997;
																																		num992 = num996;
																																	}
																																}
																																num1063 = num996;
																															}
																															float num998;
																															if (flag67)
																															{
																																num998 = base.AngleTo(base.Center + player11.velocity);
																																num991 = 1;
																																num989 = MathHelper.Clamp(num989 + 0.05f, 0f, max);
																																num990 += (float)Math.Sign(-10f - num990);
																															}
																															else if (num992 != -1)
																															{
																																num998 = base.AngleTo(Main.npc[num992].Center);
																																num991 = 2;
																																num989 = MathHelper.Clamp(num989 + 0.05f, 0f, max);
																																num990 += (float)Math.Sign(-12f - num990);
																															}
																															else if (num993 != -1)
																															{
																																num998 = base.AngleTo(Main.npc[num993].Center);
																																num991 = 3;
																																num989 = MathHelper.Clamp(num989 + 0.05f, 0f, max);
																																num990 += (float)Math.Sign(6f - num990);
																															}
																															else if (this.ai[0] > 0f)
																															{
																																num998 = this.ai[1];
																																num989 = MathHelper.Clamp(num989 + (float)Math.Sign(0.75f - num989) * 0.05f, 0f, max);
																																num991 = 4;
																																num990 += (float)Math.Sign(10f - num990);
																																if (Main.rand.Next(10) == 0)
																																{
																																	int num999 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num989 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
																																	Main.dust[num999].fadeIn = 0.75f;
																																	Dust dust201 = Main.dust[num999];
																																	Dust dust212 = dust201;
																																	dust212.velocity *= 0.1f;
																																}
																															}
																															else
																															{
																																num998 = ((player11.direction == 1) ? 0f : 3.1416028f);
																																num989 = MathHelper.Clamp(num989 + (float)Math.Sign(0.75f - num989) * 0.05f, 0f, max);
																																num990 += (float)Math.Sign(0f - num990);
																																amount2 = 0.12f;
																															}
																															Vector2 value19 = num998.ToRotationVector2();
																															num998 = Vector2.Lerp(f3.ToRotationVector2(), value19, amount2).ToRotation();
																															this.localAI[0] = num998 + (float)num991 * 6.2831855f + 3.1415927f;
																															this.localAI[1] = num990 + num989;
																															return;
																														}
																														else
																														{
																															if (this.aiStyle == 125)
																															{
																																Player player12 = Main.player[this.owner];
																																if (Main.myPlayer == this.owner)
																																{
																																	if (this.localAI[1] > 0f)
																																	{
																																		ref float ptr = ref this.localAI[1];
																																		ref float ptr74 = ref ptr;
																																		float num1064 = ptr;
																																		ptr74 = num1064 - 1f;
																																	}
																																	if (player12.noItems || player12.CCed || player12.dead)
																																	{
																																		this.Kill();
																																	}
																																	else if (Main.mouseRight && Main.mouseRightRelease)
																																	{
																																		this.Kill();
																																		player12.mouseInterface = true;
																																		Main.blockMouse = true;
																																	}
																																	else if (!player12.channel)
																																	{
																																		if (this.localAI[0] == 0f)
																																		{
																																			this.localAI[0] = 1f;
																																		}
																																		this.Kill();
																																	}
																																	else if (this.localAI[1] == 0f)
																																	{
																																		Vector2 vector160 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
																																		if (player12.gravDir == -1f)
																																		{
																																			vector160.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
																																		}
																																		if (vector160 != base.Center)
																																		{
																																			this.netUpdate = true;
																																			base.Center = vector160;
																																			this.localAI[1] = 1f;
																																		}
																																		if (this.ai[0] == 0f && this.ai[1] == 0f)
																																		{
																																			this.ai[0] = (float)((int)base.Center.X / 16);
																																			this.ai[1] = (float)((int)base.Center.Y / 16);
																																			this.netUpdate = true;
																																			this.velocity = Vector2.Zero;
																																		}
																																	}
																																	this.velocity = Vector2.Zero;
																																	Point point4 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
																																	Point point5 = base.Center.ToTileCoordinates();
																																	int num1000 = Math.Abs(point4.X - point5.X);
																																	int num1001 = Math.Abs(point4.Y - point5.Y);
																																	int num1002 = Math.Sign(point5.X - point4.X);
																																	int num1003 = Math.Sign(point5.Y - point4.Y);
																																	Point point6 = default(Point);
																																	bool flag68 = false;
																																	bool flag69 = player12.direction == 1;
																																	int num1004;
																																	int num1005;
																																	int num1006;
																																	if (flag69)
																																	{
																																		point6.X = point4.X;
																																		num1004 = point4.Y;
																																		num1005 = point5.Y;
																																		num1006 = num1003;
																																	}
																																	else
																																	{
																																		point6.Y = point4.Y;
																																		num1004 = point4.X;
																																		num1005 = point5.X;
																																		num1006 = num1002;
																																	}
																																	int num1007 = num1004;
																																	while (num1007 != num1005 && !flag68)
																																	{
																																		if (flag69)
																																		{
																																			point6.Y = num1007;
																																		}
																																		else
																																		{
																																			point6.X = num1007;
																																		}
																																		if (WorldGen.InWorld(point6.X, point6.Y, 1))
																																		{
																																			Tile tile3 = Main.tile[point6.X, point6.Y];
																																		}
																																		num1007 += num1006;
																																	}
																																	if (flag69)
																																	{
																																		point6.Y = point5.Y;
																																		num1004 = point4.X;
																																		num1005 = point5.X;
																																		num1006 = num1002;
																																	}
																																	else
																																	{
																																		point6.X = point5.X;
																																		num1004 = point4.Y;
																																		num1005 = point5.Y;
																																		num1006 = num1003;
																																	}
																																	int num1008 = num1004;
																																	while (num1008 != num1005 && !flag68)
																																	{
																																		if (!flag69)
																																		{
																																			point6.Y = num1008;
																																		}
																																		else
																																		{
																																			point6.X = num1008;
																																		}
																																		if (WorldGen.InWorld(point6.X, point6.Y, 1))
																																		{
																																			Tile tile4 = Main.tile[point6.X, point6.Y];
																																		}
																																		num1008 += num1006;
																																	}
																																}
																																int num1009 = Math.Sign(player12.velocity.X);
																																if (num1009 != 0)
																																{
																																	player12.ChangeDir(num1009);
																																}
																																player12.heldProj = this.whoAmI;
																																player12.SetDummyItemTime(2);
																																player12.itemRotation = 0f;
																																return;
																															}
																															if (this.aiStyle == 126)
																															{
																																int num1010 = Math.Sign(this.velocity.Y);
																																int num1011 = (num1010 != -1) ? 1 : 0;
																																float ptr;
																																float num1064;
																																if (this.ai[0] == 0f)
																																{
																																	if (!Collision.SolidCollision(this.position + new Vector2(0f, (float)((num1010 == -1) ? (this.height - 48) : 0)), this.width, 48) && !Collision.WetCollision(this.position + new Vector2(0f, (float)((num1010 == -1) ? (this.height - 20) : 0)), this.width, 20))
																																	{
																																		this.velocity = new Vector2(0f, (float)Math.Sign(this.velocity.Y) * 0.001f);
																																		this.ai[0] = 1f;
																																		this.ai[1] = 0f;
																																		this.timeLeft = 60;
																																	}
																																	ptr = ref this.ai[1];
																																	ref float ptr75 = ref ptr;
																																	num1064 = ptr;
																																	ptr75 = num1064 + 1f;
																																	if (this.ai[1] >= 60f)
																																	{
																																		this.Kill();
																																	}
																																	int num1063;
																																	for (int num1012 = 0; num1012 < 3; num1012 = num1063 + 1)
																																	{
																																		int num1013 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
																																		Main.dust[num1013].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
																																		Main.dust[num1013].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
																																		Main.dust[num1013].noGravity = true;
																																		Main.dust[num1013].position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
																																		num1063 = num1012;
																																	}
																																}
																																if (this.ai[0] != 1f)
																																{
																																	return;
																																}
																																this.velocity = new Vector2(0f, (float)Math.Sign(this.velocity.Y) * 0.001f);
																																if (num1010 != 0)
																																{
																																	int num1014 = 16;
																																	int num1015 = 320;
																																	if (this.type == 670)
																																	{
																																		num1015 -= (int)Math.Abs(this.localAI[1]) * 64;
																																	}
																																	while (num1014 < num1015 && !Collision.SolidCollision(this.position + new Vector2(0f, (float)((num1010 == -1) ? (this.height - num1014 - 16) : 0)), this.width, num1014 + 16))
																																	{
																																		num1014 += 16;
																																	}
																																	if (num1010 == -1)
																																	{
																																		ptr = ref this.position.Y;
																																		ptr += (float)this.height;
																																		this.height = num1014;
																																		ptr = ref this.position.Y;
																																		ptr -= (float)num1014;
																																	}
																																	else
																																	{
																																		this.height = num1014;
																																	}
																																}
																																ptr = ref this.ai[1];
																																ref float ptr76 = ref ptr;
																																num1064 = ptr;
																																ptr76 = num1064 + 1f;
																																if (this.type == 670 && this.owner == Main.myPlayer && this.ai[1] == 12f && this.localAI[1] < 3f && this.localAI[1] > -3f)
																																{
																																	if (this.localAI[1] == 0f)
																																	{
																																		int num1016 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
																																		Main.projectile[num1016].localAI[1] = this.localAI[1] - 1f;
																																		num1016 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
																																		Main.projectile[num1016].localAI[1] = this.localAI[1] + 1f;
																																	}
																																	else
																																	{
																																		int num1017 = Math.Sign(this.localAI[1]);
																																		int num1018 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Bottom + new Vector2((float)(50 * num1017), -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
																																		Main.projectile[num1018].localAI[1] = this.localAI[1] + (float)num1017;
																																	}
																																}
																																if (this.ai[1] >= 60f)
																																{
																																	this.Kill();
																																}
																																if (this.localAI[0] == 0f)
																																{
																																	this.localAI[0] = 1f;
																																	int num1019 = 0;
																																	while ((float)num1019 < 60f)
																																	{
																																		int num1020 = Utils.SelectRandom<int>(Main.rand, new int[]
																																		{
																																			6,
																																			259,
																																			158
																																		});
																																		int num1021 = Dust.NewDust(this.position, this.width, this.height, num1020, 0f, -2.5f * (float)(-(float)num1010), 0, default(Color), 1f);
																																		Main.dust[num1021].alpha = 200;
																																		Dust dust202 = Main.dust[num1021];
																																		Dust dust212 = dust202;
																																		dust212.velocity *= new Vector2(0.3f, 2f);
																																		ptr = ref Main.dust[num1021].velocity.Y;
																																		ptr += (float)(2 * num1010);
																																		dust202 = Main.dust[num1021];
																																		dust212 = dust202;
																																		dust212.scale += Main.rand.NextFloat();
																																		Main.dust[num1021].position = new Vector2(base.Center.X, base.Center.Y + (float)this.height * 0.5f * (float)(-(float)num1010));
																																		Main.dust[num1021].customData = num1011;
																																		if (num1010 == -1 && Main.rand.Next(4) != 0)
																																		{
																																			ptr = ref Main.dust[num1021].velocity.Y;
																																			ptr -= 0.2f;
																																		}
																																		int num1063 = num1019;
																																		num1019 = num1063 + 1;
																																	}
																																	SoundEngine.PlaySound(SoundID.Item34, new Vector2?(this.position), null);
																																}
																																if (num1010 == 1)
																																{
																																	int num1022 = 0;
																																	while ((float)num1022 < 9f)
																																	{
																																		int num1023 = Utils.SelectRandom<int>(Main.rand, new int[]
																																		{
																																			6,
																																			259,
																																			158
																																		});
																																		int num1024 = Dust.NewDust(this.position, this.width, this.height, num1023, 0f, -2.5f * (float)(-(float)num1010), 0, default(Color), 1f);
																																		Main.dust[num1024].alpha = 200;
																																		Dust dust203 = Main.dust[num1024];
																																		Dust dust212 = dust203;
																																		dust212.velocity *= new Vector2(0.3f, 2f);
																																		ptr = ref Main.dust[num1024].velocity.Y;
																																		ptr += (float)(2 * num1010);
																																		dust203 = Main.dust[num1024];
																																		dust212 = dust203;
																																		dust212.scale += Main.rand.NextFloat();
																																		Main.dust[num1024].position = new Vector2(base.Center.X, base.Center.Y + (float)this.height * 0.5f * (float)(-(float)num1010));
																																		Main.dust[num1024].customData = num1011;
																																		if (num1010 == -1 && Main.rand.Next(4) != 0)
																																		{
																																			ptr = ref Main.dust[num1024].velocity.Y;
																																			ptr -= 0.2f;
																																		}
																																		int num1063 = num1022;
																																		num1022 = num1063 + 1;
																																	}
																																}
																																int num1025 = (int)(this.ai[1] / 60f * (float)this.height) * 3;
																																if (num1025 > this.height)
																																{
																																	num1025 = this.height;
																																}
																																Vector2 vector161 = this.position + ((num1010 == -1) ? new Vector2(0f, (float)(this.height - num1025)) : Vector2.Zero);
																																Vector2 vector162 = this.position + ((num1010 == -1) ? new Vector2(0f, (float)this.height) : Vector2.Zero);
																																int num1026 = 0;
																																while ((float)num1026 < 6f)
																																{
																																	if (Main.rand.Next(3) < 2)
																																	{
																																		int num1027 = Dust.NewDust(vector161, this.width, num1025, 6, 0f, 0f, 90, default(Color), 2.5f);
																																		Main.dust[num1027].noGravity = true;
																																		Main.dust[num1027].fadeIn = 1f;
																																		if (Main.dust[num1027].velocity.Y > 0f)
																																		{
																																			ptr = ref Main.dust[num1027].velocity.Y;
																																			ptr *= -1f;
																																		}
																																		if (Main.rand.Next(6) < 3)
																																		{
																																			Main.dust[num1027].position.Y = MathHelper.Lerp(Main.dust[num1027].position.Y, vector162.Y, 0.5f);
																																			Dust dust204 = Main.dust[num1027];
																																			Dust dust212 = dust204;
																																			dust212.velocity *= 5f;
																																			ptr = ref Main.dust[num1027].velocity.Y;
																																			ptr -= 3f;
																																			Main.dust[num1027].position.X = base.Center.X;
																																			Main.dust[num1027].noGravity = false;
																																			Main.dust[num1027].noLight = true;
																																			Main.dust[num1027].fadeIn = 0.4f;
																																			dust204 = Main.dust[num1027];
																																			dust212 = dust204;
																																			dust212.scale *= 0.3f;
																																		}
																																		else
																																		{
																																			Main.dust[num1027].velocity = base.DirectionFrom(Main.dust[num1027].position) * Main.dust[num1027].velocity.Length() * 0.25f;
																																		}
																																		ptr = ref Main.dust[num1027].velocity.Y;
																																		ptr *= (float)(-(float)num1010);
																																		Main.dust[num1027].customData = num1011;
																																	}
																																	int num1063 = num1026;
																																	num1026 = num1063 + 1;
																																}
																																int num1028 = 0;
																																while ((float)num1028 < 6f)
																																{
																																	if (Main.rand.NextFloat() >= 0.5f)
																																	{
																																		int num1029 = Utils.SelectRandom<int>(Main.rand, new int[]
																																		{
																																			6,
																																			259,
																																			158
																																		});
																																		int num1030 = Dust.NewDust(vector161, this.width, num1025, num1029, 0f, -2.5f * (float)(-(float)num1010), 0, default(Color), 1f);
																																		Main.dust[num1030].alpha = 200;
																																		Dust dust205 = Main.dust[num1030];
																																		Dust dust212 = dust205;
																																		dust212.velocity *= new Vector2(0.6f, 1.5f);
																																		dust205 = Main.dust[num1030];
																																		dust212 = dust205;
																																		dust212.scale += Main.rand.NextFloat();
																																		if (num1010 == -1 && Main.rand.Next(4) != 0)
																																		{
																																			ptr = ref Main.dust[num1030].velocity.Y;
																																			ptr -= 0.2f;
																																		}
																																		Main.dust[num1030].customData = num1011;
																																	}
																																	int num1063 = num1028;
																																	num1028 = num1063 + 1;
																																}
																																return;
																															}
																															else if (this.aiStyle == 127)
																															{
																																float num1031 = 900f;
																																if (this.type == 657)
																																{
																																	num1031 = 300f;
																																}
																																if (this.soundDelay == 0)
																																{
																																	this.soundDelay = -1;
																																	SoundEngine.PlaySound(SoundID.Item82, new Vector2?(base.Center), null);
																																}
																																ref float ptr = ref this.ai[0];
																																ref float ptr77 = ref ptr;
																																float num1064 = ptr;
																																ptr77 = num1064 + 1f;
																																if (this.ai[0] >= num1031)
																																{
																																	this.Kill();
																																}
																																if (this.type == 656 && this.localAI[0] >= 30f)
																																{
																																	this.damage = 0;
																																	if (this.ai[0] < num1031 - 120f)
																																	{
																																		float num1032 = this.ai[0] % 60f;
																																		this.ai[0] = num1031 - 120f + num1032;
																																		this.netUpdate = true;
																																	}
																																}
																																float num1033 = 15f;
																																float num1034 = 15f;
																																Point point7 = base.Center.ToTileCoordinates();
																																int topY;
																																int bottomY;
																																Collision.ExpandVertically(point7.X, point7.Y, out topY, out bottomY, (int)num1033, (int)num1034);
																																int num1063 = topY;
																																topY = num1063 + 1;
																																num1063 = bottomY;
																																bottomY = num1063 - 1;
																																Vector2 value20 = new Vector2((float)point7.X, (float)topY) * 16f + new Vector2(8f);
																																Vector2 value21 = new Vector2((float)point7.X, (float)bottomY) * 16f + new Vector2(8f);
																																Vector2 vector163 = Vector2.Lerp(value20, value21, 0.5f);
																																Vector2 vector164;
																																vector164..ctor(0f, value21.Y - value20.Y);
																																vector164.X = vector164.Y * 0.2f;
																																this.width = (int)(vector164.X * 0.65f);
																																this.height = (int)vector164.Y;
																																base.Center = vector163;
																																if (this.type == 656 && this.owner == Main.myPlayer)
																																{
																																	bool flag70 = false;
																																	Vector2 center20 = Main.player[this.owner].Center;
																																	Vector2 top = Main.player[this.owner].Top;
																																	for (float num1035 = 0f; num1035 < 1f; num1035 += 0.05f)
																																	{
																																		Vector2 position = Vector2.Lerp(value20, value21, num1035);
																																		if (Collision.CanHitLine(position, 0, 0, center20, 0, 0) || Collision.CanHitLine(position, 0, 0, top, 0, 0))
																																		{
																																			flag70 = true;
																																			break;
																																		}
																																	}
																																	if (!flag70 && this.ai[0] < num1031 - 120f)
																																	{
																																		float num1036 = this.ai[0] % 60f;
																																		this.ai[0] = num1031 - 120f + num1036;
																																		this.netUpdate = true;
																																	}
																																}
																																if (this.ai[0] >= num1031 - 120f)
																																{
																																	return;
																																}
																																for (int num1037 = 0; num1037 < 1; num1037 = num1063 + 1)
																																{
																																	float value22 = -0.5f;
																																	float value23 = 0.9f;
																																	float amount3 = Main.rand.NextFloat();
																																	Vector2 vector165;
																																	vector165..ctor(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value22, value23, amount3));
																																	ptr = ref vector165.X;
																																	ptr *= MathHelper.Lerp(2.2f, 0.6f, amount3);
																																	ptr = ref vector165.X;
																																	ptr *= -1f;
																																	Vector2 vector166;
																																	vector166..ctor(6f, 10f);
																																	Vector2 vector167 = vector163 + vector164 * vector165 * 0.5f + vector166;
																																	Dust dust206 = Main.dust[Dust.NewDust(vector167, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
																																	dust206.position = vector167;
																																	dust206.customData = vector163 + vector166;
																																	dust206.fadeIn = 1f;
																																	dust206.scale = 0.3f;
																																	if (vector165.X > -1.2f)
																																	{
																																		dust206.velocity.X = 1f + Main.rand.NextFloat();
																																	}
																																	dust206.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
																																	num1063 = num1037;
																																}
																																return;
																															}
																															else if (this.aiStyle == 128)
																															{
																																Color newColor4;
																																newColor4..ctor(255, 255, 255);
																																if (this.soundDelay == 0)
																																{
																																	this.soundDelay = -1;
																																	SoundEngine.PlaySound(SoundID.Item60, new Vector2?(base.Center), null);
																																}
																																float ptr;
																																int num1063;
																																if (this.localAI[1] < 30f)
																																{
																																	for (int num1038 = 0; num1038 < 1; num1038 = num1063 + 1)
																																	{
																																		float value24 = -0.5f;
																																		float value25 = 0.9f;
																																		float amount4 = Main.rand.NextFloat();
																																		Vector2 vector168;
																																		vector168..ctor(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value24, value25, amount4));
																																		ptr = ref vector168.X;
																																		ptr *= MathHelper.Lerp(2.2f, 0.6f, amount4);
																																		ptr = ref vector168.X;
																																		ptr *= -1f;
																																		Vector2 vector169;
																																		vector169..ctor(2f, 10f);
																																		Vector2 vector170 = base.Center + new Vector2(60f, 200f) * vector168 * 0.5f + vector169;
																																		Dust dust207 = Main.dust[Dust.NewDust(vector170, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
																																		dust207.position = vector170;
																																		dust207.customData = base.Center + vector169;
																																		dust207.fadeIn = 1f;
																																		dust207.scale = 0.3f;
																																		if (vector168.X > -1.2f)
																																		{
																																			dust207.velocity.X = 1f + Main.rand.NextFloat();
																																		}
																																		dust207.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
																																		num1063 = num1038;
																																	}
																																}
																																if (this.localAI[0] == 0f)
																																{
																																	this.localAI[0] = 0.8f;
																																	this.direction = 1;
																																	Point point8 = base.Center.ToTileCoordinates();
																																	base.Center = new Vector2((float)(point8.X * 16 + 8), (float)(point8.Y * 16 + 8));
																																}
																																this.rotation = this.localAI[1] / 40f * 6.2831855f * (float)this.direction;
																																if (this.localAI[1] < 33f)
																																{
																																	if (this.alpha > 0)
																																	{
																																		this.alpha -= 8;
																																	}
																																	if (this.alpha < 0)
																																	{
																																		this.alpha = 0;
																																	}
																																}
																																if (this.localAI[1] > 103f)
																																{
																																	if (this.alpha < 255)
																																	{
																																		this.alpha += 16;
																																	}
																																	if (this.alpha > 255)
																																	{
																																		this.alpha = 255;
																																	}
																																}
																																if (this.alpha == 0)
																																{
																																	Lighting.AddLight(base.Center, newColor4.ToVector3() * 0.5f);
																																}
																																for (int num1039 = 0; num1039 < 2; num1039 = num1063 + 1)
																																{
																																	if (Main.rand.Next(10) == 0)
																																	{
																																		Vector2 vector171 = Vector2.UnitY.RotatedBy((double)((float)num1039 * 3.1415927f), default(Vector2)).RotatedBy((double)this.rotation, default(Vector2));
																																		Dust dust208 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
																																		dust208.noGravity = true;
																																		dust208.noLight = true;
																																		dust208.scale = this.Opacity * this.localAI[0];
																																		dust208.position = base.Center;
																																		dust208.velocity = vector171 * 2.5f;
																																	}
																																	num1063 = num1039;
																																}
																																for (int num1040 = 0; num1040 < 2; num1040 = num1063 + 1)
																																{
																																	if (Main.rand.Next(10) == 0)
																																	{
																																		Vector2 vector172 = Vector2.UnitY.RotatedBy((double)((float)num1040 * 3.1415927f), default(Vector2));
																																		Dust dust209 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
																																		dust209.noGravity = true;
																																		dust209.noLight = true;
																																		dust209.scale = this.Opacity * this.localAI[0];
																																		dust209.position = base.Center;
																																		dust209.velocity = vector172 * 2.5f;
																																	}
																																	num1063 = num1040;
																																}
																																if (this.localAI[1] < 33f || this.localAI[1] > 87f)
																																{
																																	this.scale = this.Opacity / 2f * this.localAI[0];
																																}
																																this.velocity = Vector2.Zero;
																																ptr = ref this.localAI[1];
																																ref float ptr78 = ref ptr;
																																float num1064 = ptr;
																																ptr78 = num1064 + 1f;
																																if (this.localAI[1] == 60f && this.owner == Main.myPlayer)
																																{
																																	int num1041 = 30;
																																	if (Main.expertMode)
																																	{
																																		num1041 = 22;
																																	}
																																	Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, Vector2.Zero, 657, num1041, 3f, this.owner, 0f, 0f, 0f);
																																}
																																if (this.localAI[1] >= 120f)
																																{
																																	this.Kill();
																																	return;
																																}
																															}
																															else if (this.aiStyle == 129)
																															{
																																float num1042 = 10f;
																																float num1043 = 5f;
																																float num1044 = 40f;
																																int num1045 = 180;
																																if (this.type == 659)
																																{
																																	int num1046 = 420;
																																	num1045 = 240;
																																	num1042 = 3f;
																																	num1043 = 7.5f;
																																	num1044 = 1f;
																																	float ptr;
																																	float num1064;
																																	if (this.localAI[0] > 0f)
																																	{
																																		ptr = ref this.localAI[0];
																																		ref float ptr79 = ref ptr;
																																		num1064 = ptr;
																																		ptr79 = num1064 - 1f;
																																	}
																																	int num1063;
																																	if (this.localAI[0] == 0f && this.ai[0] < 0f && this.owner == Main.myPlayer)
																																	{
																																		this.localAI[0] = 5f;
																																		for (int num1047 = 0; num1047 < 200; num1047 = num1063 + 1)
																																		{
																																			NPC nPC17 = Main.npc[num1047];
																																			if (nPC17.CanBeChasedBy(this, false))
																																			{
																																				bool flag71 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC17.Distance(base.Center);
																																				if ((flag71 & nPC17.Distance(base.Center) < 400f) && (Collision.CanHitLine(base.Center, 0, 0, nPC17.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC17.Top, 0, 0)))
																																				{
																																					this.ai[0] = (float)num1047;
																																				}
																																			}
																																			num1063 = num1047;
																																		}
																																		if (this.ai[0] >= 0f)
																																		{
																																			this.timeLeft = num1046;
																																			this.netUpdate = true;
																																		}
																																	}
																																	if (this.timeLeft > 30 && this.alpha > 0)
																																	{
																																		this.alpha -= 12;
																																	}
																																	if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
																																	{
																																		this.alpha = 128;
																																	}
																																	if (this.alpha < 0)
																																	{
																																		this.alpha = 0;
																																	}
																																	num1063 = this.frameCounter + 1;
																																	this.frameCounter = num1063;
																																	if (num1063 > 4)
																																	{
																																		this.frameCounter = 0;
																																		num1063 = this.frame + 1;
																																		this.frame = num1063;
																																		if (num1063 >= 4)
																																		{
																																			this.frame = 0;
																																		}
																																	}
																																	float num1048 = 0.5f;
																																	if (this.timeLeft < 120)
																																	{
																																		num1048 = 1.1f;
																																	}
																																	if (this.timeLeft < 60)
																																	{
																																		num1048 = 1.6f;
																																	}
																																	ptr = ref this.ai[1];
																																	ref float ptr80 = ref ptr;
																																	num1064 = ptr;
																																	ptr80 = num1064 + 1f;
																																	float num1049 = this.ai[1] / 180f * 6.2831855f;
																																	for (float num1050 = 0f; num1050 < 3f; num1050 = num1064 + 1f)
																																	{
																																		if (Main.rand.Next(3) == 0)
																																		{
																																			Dust dust210 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f, 0, default(Color), 1f)];
																																			dust210.position = base.Center + Vector2.UnitY.RotatedBy((double)(num1050 * 6.2831855f / 3f + this.ai[1]), default(Vector2)) * 10f;
																																			dust210.noGravity = true;
																																			dust210.velocity = base.DirectionFrom(dust210.position);
																																			dust210.scale = num1048;
																																			dust210.fadeIn = 0.5f;
																																			dust210.alpha = 200;
																																		}
																																		num1064 = num1050;
																																	}
																																}
																																if (this.timeLeft > 2 && Collision.SolidCollision(this.position, this.width, this.height))
																																{
																																	this.timeLeft = 2;
																																}
																																int num1051 = (int)this.ai[0];
																																if (num1051 >= 0 && Main.npc[num1051].active)
																																{
																																	if (base.Distance(Main.npc[num1051].Center) > num1044)
																																	{
																																		Vector2 vector173 = base.DirectionTo(Main.npc[num1051].Center);
																																		if (vector173.HasNaNs())
																																		{
																																			vector173 = Vector2.UnitY;
																																		}
																																		this.velocity = (this.velocity * (num1042 - 1f) + vector173 * num1043) / num1042;
																																	}
																																	return;
																																}
																																if (this.ai[0] == -1f && this.timeLeft > 5)
																																{
																																	this.timeLeft = 5;
																																}
																																if (this.ai[0] == -2f && this.timeLeft > num1045)
																																{
																																	this.timeLeft = num1045;
																																}
																																if (this.ai[0] >= 0f)
																																{
																																	this.ai[0] = -1f;
																																	this.netUpdate = true;
																																	return;
																																}
																															}
																															else
																															{
																																if (this.aiStyle == 130)
																																{
																																	this.AI_130_FlameBurstTower();
																																	return;
																																}
																																if (this.aiStyle == 131)
																																{
																																	this.AI_131_FlameBurstShot();
																																	return;
																																}
																																if (this.aiStyle == 132)
																																{
																																	float ptr;
																																	float num1064;
																																	if (this.localAI[1] == 0f)
																																	{
																																		if (this.localAI[0] == 0f)
																																		{
																																			SoundEngine.PlayTrackedSound(SoundID.DD2_DefeatScene, new Vector2?(base.Center));
																																		}
																																		if (this.localAI[0] == 105f)
																																		{
																																			int num1063;
																																			for (int num1052 = 0; num1052 < 20; num1052 = num1063 + 1)
																																			{
																																				float num1053 = (float)num1052 / 20f;
																																				Vector2 vector174 = new Vector2(Main.rand.NextFloat() * 10f, 0f).RotatedBy((double)(num1053 * -3.1415927f + Main.rand.NextFloat() * 0.1f - 0.05f), default(Vector2));
																																				Gore gore6 = Gore.NewGoreDirect(base.Center + vector174 * 3f, vector174, Utils.SelectRandom<int>(Main.rand, new int[]
																																				{
																																					1027,
																																					1028,
																																					1029,
																																					1030
																																				}), 1f);
																																				if (gore6.velocity.Y > 0f)
																																				{
																																					Gore gore7 = gore6;
																																					Gore gore8 = gore7;
																																					gore8.velocity *= -0.5f;
																																				}
																																				if (gore6.velocity.Y < -5f)
																																				{
																																					ptr = ref gore6.velocity.Y;
																																					ptr *= 0.8f;
																																				}
																																				ptr = ref gore6.velocity.Y;
																																				ptr *= 1.1f;
																																				ptr = ref gore6.velocity.X;
																																				ptr *= 0.88f;
																																				num1063 = num1052;
																																			}
																																		}
																																		if (!Main.dedServ)
																																		{
																																			if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
																																			{
																																				Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2), Array.Empty<object>());
																																			}
																																			if (!Filters.Scene["CrystalDestructionColor"].IsActive())
																																			{
																																				Filters.Scene.Activate("CrystalDestructionColor", default(Vector2), Array.Empty<object>());
																																			}
																																			float num1054 = Math.Min(1f, this.localAI[0] / 120f);
																																			Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1054);
																																			Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1054 * 2f).UseProgress(0f).UseTargetPosition(base.Center);
																																		}
																																		if (this.localAI[0] == 120f)
																																		{
																																			this.localAI[0] = 0f;
																																			ptr = ref this.localAI[1];
																																			ref float ptr81 = ref ptr;
																																			num1064 = ptr;
																																			ptr81 = num1064 + 1f;
																																		}
																																	}
																																	else if (this.localAI[1] == 1f)
																																	{
																																		if (!Main.dedServ)
																																		{
																																			float num1055 = this.localAI[0] / 300f;
																																			float num1056 = Math.Min(1f, this.localAI[0] / 150f);
																																			this.velocity.Y = num1056 * -0.25f;
																																			if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
																																			{
																																				Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2), Array.Empty<object>());
																																			}
																																			if (!Filters.Scene["CrystalDestructionColor"].IsActive())
																																			{
																																				Filters.Scene.Activate("CrystalDestructionColor", default(Vector2), Array.Empty<object>());
																																			}
																																			num1056 = 1f;
																																			Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1056);
																																			Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1056 * 2f).UseProgress(0f).UseTargetPosition(base.Center);
																																		}
																																		if (this.localAI[0] == 300f)
																																		{
																																			this.localAI[0] = 0f;
																																			ptr = ref this.localAI[1];
																																			ref float ptr82 = ref ptr;
																																			num1064 = ptr;
																																			ptr82 = num1064 + 1f;
																																		}
																																	}
																																	else if (this.localAI[1] == 2f)
																																	{
																																		float num1057 = this.localAI[0] / 300f;
																																		if (Main.netMode != 2)
																																		{
																																			Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num1057 * 30f);
																																		}
																																		ptr = ref this.velocity.Y;
																																		ptr -= 1f;
																																		if (this.localAI[0] == 60f)
																																		{
																																			this.localAI[0] = 0f;
																																			ptr = ref this.localAI[1];
																																			ref float ptr83 = ref ptr;
																																			num1064 = ptr;
																																			ptr83 = num1064 + 1f;
																																		}
																																	}
																																	else if (this.localAI[1] == 3f)
																																	{
																																		if (!Main.dedServ)
																																		{
																																			Filters.Scene.Deactivate("CrystalDestructionVortex", Array.Empty<object>());
																																			Filters.Scene.Deactivate("CrystalDestructionColor", Array.Empty<object>());
																																		}
																																		this.Kill();
																																	}
																																	if (this.localAI[1] >= 1f)
																																	{
																																		int num1063;
																																		for (int num1058 = 0; num1058 < 1 + (int)(0f - this.velocity.Y); num1058 = num1063 + 1)
																																		{
																																			if (Main.rand.Next(2) == 0)
																																			{
																																				float num1059 = Main.rand.NextFloat() * (0f - this.velocity.Y);
																																				Vector2 vector175;
																																				vector175..ctor(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
																																				ptr = ref vector175.X;
																																				ptr += (float)Math.Sin((double)((this.position.Y + num1059) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
																																				vector175.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector175.X, MathHelper.Clamp(0f - this.velocity.Y, 0f, 1f));
																																				vector175.Y = 0.5f - Math.Abs(vector175.X);
																																				vector175 *= new Vector2(100f, 50f);
																																				ptr = ref vector175.Y;
																																				ptr += num1059;
																																				Vector2 vector176 = base.Center + vector175;
																																				Dust dust211 = Dust.NewDustPerfect(vector176, 27, new Vector2?(Vector2.Zero), 0, Color.White * 0.1f, 1.1f);
																																				dust211.velocity.Y = Main.rand.NextFloat() * 2f;
																																				dust211.fadeIn = 0.1f;
																																			}
																																			num1063 = num1058;
																																		}
																																	}
																																	ptr = ref this.localAI[0];
																																	ref float ptr84 = ref ptr;
																																	num1064 = ptr;
																																	ptr84 = num1064 + 1f;
																																	return;
																																}
																																if (this.aiStyle == 133)
																																{
																																	float ptr;
																																	float num1064;
																																	if (this.type == 673)
																																	{
																																		if (this.ai[0] == 70f)
																																		{
																																			SoundEngine.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, new Vector2?(base.Center));
																																		}
																																		ptr = ref this.ai[0];
																																		ref float ptr85 = ref ptr;
																																		num1064 = ptr;
																																		ptr85 = num1064 + 1f;
																																		float opacity = 0f;
																																		if (this.ai[0] < 20f)
																																		{
																																			opacity = Utils.GetLerpValue(0f, 20f, this.ai[0], true);
																																		}
																																		else if (this.ai[0] < 60f)
																																		{
																																			opacity = 1f;
																																		}
																																		else if (this.ai[0] < 80f)
																																		{
																																			opacity = Utils.GetLerpValue(80f, 60f, this.ai[0], true);
																																		}
																																		else
																																		{
																																			this.Kill();
																																		}
																																		this.Opacity = opacity;
																																		int num1072 = this.owner;
																																		int myPlayer = Main.myPlayer;
																																	}
																																	if (this.type != 674)
																																	{
																																		return;
																																	}
																																	if (this.ai[0] == 0f)
																																	{
																																		SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, new Vector2?(base.Center));
																																	}
																																	ptr = ref this.ai[0];
																																	ref float ptr86 = ref ptr;
																																	num1064 = ptr;
																																	ptr86 = num1064 + 1f;
																																	if (this.ai[0] < 40f)
																																	{
																																		return;
																																	}
																																	int num1063;
																																	for (int num1060 = 0; num1060 < 200; num1060 = num1063 + 1)
																																	{
																																		NPC nPC18 = Main.npc[num1060];
																																		if (nPC18.active && nPC18.damage >= 1 && nPC18.lifeMax >= 30 && base.Distance(nPC18.Center) <= 1000f && nPC18.type != 564 && nPC18.type != 565)
																																		{
																																			int num1061 = 500;
																																			int num1062 = nPC18.lifeMax - nPC18.life;
																																			if (num1061 > num1062)
																																			{
																																				num1061 = num1062;
																																			}
																																			if (num1061 > 0)
																																			{
																																				NPC nPC19 = nPC18;
																																				NPC npc = nPC19;
																																				npc.life += num1061;
																																				nPC18.HealEffect(num1061, true);
																																				nPC18.netUpdate = true;
																																			}
																																		}
																																		num1063 = num1060;
																																	}
																																	this.Kill();
																																	return;
																																}
																																else
																																{
																																	if (this.aiStyle == 134)
																																	{
																																		this.AI_134_Ballista();
																																		return;
																																	}
																																	if (this.aiStyle == 135)
																																	{
																																		this.AI_135_OgreStomp();
																																		return;
																																	}
																																	if (this.aiStyle == 136)
																																	{
																																		this.AI_136_BetsyBreath();
																																		return;
																																	}
																																	if (this.aiStyle == 137)
																																	{
																																		this.AI_137_LightningAura();
																																		return;
																																	}
																																	if (this.aiStyle == 138)
																																	{
																																		this.AI_138_ExplosiveTrap();
																																		return;
																																	}
																																	if (this.aiStyle == 139)
																																	{
																																		this.AI_139_ExplosiveTrapExplosion();
																																		return;
																																	}
																																	if (this.aiStyle == 140)
																																	{
																																		this.AI_140_MonkStaffT1();
																																		return;
																																	}
																																	if (this.aiStyle == 141)
																																	{
																																		this.AI_141_MonkStaffT1Explosion();
																																		return;
																																	}
																																	if (this.aiStyle == 142)
																																	{
																																		this.AI_142_MonkStaffT2And3();
																																		return;
																																	}
																																	if (this.aiStyle == 143)
																																	{
																																		this.AI_143_MonkStaffT2Ghast();
																																		return;
																																	}
																																	if (this.aiStyle == 144)
																																	{
																																		this.AI_144_DD2Pet();
																																		return;
																																	}
																																	if (this.aiStyle == 145)
																																	{
																																		this.AI_145_BookStaffStorm();
																																		return;
																																	}
																																	if (this.aiStyle == 146)
																																	{
																																		this.AI_146_DD2Victory();
																																		return;
																																	}
																																	if (this.aiStyle == 147)
																																	{
																																		this.AI_147_Celeb2Rocket();
																																		return;
																																	}
																																	if (this.aiStyle == 148)
																																	{
																																		this.AI_148_StarSpawner();
																																		return;
																																	}
																																	if (this.aiStyle == 149)
																																	{
																																		this.AI_149_GolfBall();
																																		return;
																																	}
																																	if (this.aiStyle == 150)
																																	{
																																		this.AI_150_GolfClubHelper();
																																		return;
																																	}
																																	if (this.aiStyle == 151)
																																	{
																																		this.AI_151_SuperStar();
																																		return;
																																	}
																																	if (this.aiStyle == 152)
																																	{
																																		this.AI_152_SuperStarSlash();
																																		return;
																																	}
																																	if (this.aiStyle == 153)
																																	{
																																		this.AI_153_ToiletPop();
																																		return;
																																	}
																																	if (this.aiStyle == 154)
																																	{
																																		this.AI_154_VoidLens();
																																		return;
																																	}
																																	if (this.aiStyle == 155)
																																	{
																																		this.AI_155_MysticSnakeCoil();
																																		return;
																																	}
																																	if (this.aiStyle == 156)
																																	{
																																		this.AI_156_BatOfLight();
																																		return;
																																	}
																																	if (this.aiStyle == 157)
																																	{
																																		this.AI_157_SharpTears();
																																		return;
																																	}
																																	if (this.aiStyle == 158)
																																	{
																																		this.AI_158_BabyBird();
																																		return;
																																	}
																																	if (this.aiStyle == 159)
																																	{
																																		this.AI_159_PaperAirplanes();
																																		return;
																																	}
																																	if (this.aiStyle == 160)
																																	{
																																		this.AI_160_Kites();
																																		return;
																																	}
																																	if (this.aiStyle == 161)
																																	{
																																		this.AI_161_RapierStabs();
																																		return;
																																	}
																																	if (this.aiStyle == 162)
																																	{
																																		this.AI_162_TigerPounce();
																																		return;
																																	}
																																	if (this.aiStyle == 163)
																																	{
																																		this.AI_163_Chum();
																																		return;
																																	}
																																	if (this.aiStyle == 164)
																																	{
																																		this.AI_164_StormTigerGem();
																																		return;
																																	}
																																	if (this.aiStyle == 165)
																																	{
																																		this.AI_165_Whip();
																																		return;
																																	}
																																	if (this.aiStyle == 166)
																																	{
																																		this.AI_166_Dove();
																																		return;
																																	}
																																	if (this.aiStyle == 167)
																																	{
																																		this.AI_167_SparkleGuitar();
																																		return;
																																	}
																																	if (this.aiStyle == 168)
																																	{
																																		this.AI_168_FirstFractal();
																																		return;
																																	}
																																	if (this.aiStyle == 169)
																																	{
																																		this.AI_169_Smolstars();
																																		return;
																																	}
																																	if (this.aiStyle == 170)
																																	{
																																		this.AI_170_FairyGlowstick();
																																		return;
																																	}
																																	if (this.aiStyle == 171)
																																	{
																																		this.AI_171_HallowBossRainbowStreak();
																																		return;
																																	}
																																	if (this.aiStyle == 172)
																																	{
																																		this.AI_172_HallowBossRainbowPelletStorm();
																																		return;
																																	}
																																	if (this.aiStyle == 173)
																																	{
																																		this.AI_173_HallowBossRainbowTrail();
																																		return;
																																	}
																																	if (this.aiStyle == 174)
																																	{
																																		this.AI_174_MultisegmentPet();
																																		return;
																																	}
																																	if (this.aiStyle == 175)
																																	{
																																		this.AI_175_TitaniumStormShards();
																																		return;
																																	}
																																	if (this.aiStyle == 176)
																																	{
																																		this.AI_176_EdgyLightning();
																																		return;
																																	}
																																	if (this.aiStyle == 177)
																																	{
																																		this.AI_177_IceWhipSlicer();
																																		return;
																																	}
																																	if (this.aiStyle == 178)
																																	{
																																		this.AI_178_FireExplosion();
																																		return;
																																	}
																																	if (this.aiStyle == 179)
																																	{
																																		this.AI_179_FairyQueenLance();
																																		return;
																																	}
																																	if (this.aiStyle == 180)
																																	{
																																		this.AI_180_FairyQueenSunDance();
																																		return;
																																	}
																																	if (this.aiStyle == 181)
																																	{
																																		this.AI_181_FairyQueenRangedItemShot();
																																		return;
																																	}
																																	if (this.aiStyle == 182)
																																	{
																																		this.AI_182_FinalFractal();
																																		return;
																																	}
																																	if (this.aiStyle == 183)
																																	{
																																		this.AI_183_ZoologistStrike();
																																		return;
																																	}
																																	if (this.aiStyle == 184)
																																	{
																																		this.AI_184_BadTorchLuck();
																																		return;
																																	}
																																	if (this.aiStyle == 185)
																																	{
																																		this.AI_185_LifeDrain();
																																		return;
																																	}
																																	if (this.aiStyle == 186)
																																	{
																																		this.AI_186_PrincessWeapon();
																																		return;
																																	}
																																	if (this.aiStyle == 187)
																																	{
																																		this.AI_187_ShadowHand();
																																		return;
																																	}
																																	if (this.aiStyle == 188)
																																	{
																																		this.AI_188_LightsBane();
																																		return;
																																	}
																																	if (this.aiStyle == 189)
																																	{
																																		this.AI_189_Volcano();
																																		return;
																																	}
																																	if (this.aiStyle == 190)
																																	{
																																		this.AI_190_NightsEdge();
																																		return;
																																	}
																																	if (this.aiStyle == 191)
																																	{
																																		this.AI_191_TrueNightsEdge();
																																		return;
																																	}
																																	if (this.aiStyle == 192)
																																	{
																																		this.AI_192_JuminoAnimation();
																																		return;
																																	}
																																	if (this.aiStyle == 193)
																																	{
																																		this.AI_193_Flamethrower();
																																		return;
																																	}
																																	if (this.aiStyle == 194)
																																	{
																																		this.AI_194_HorsemanPumpkin();
																																		return;
																																	}
																																	if (this.aiStyle == 195)
																																	{
																																		this.AI_195_JimsDrone();
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000D35 RID: 3381 RVA: 0x0033FEEC File Offset: 0x0033E0EC
		private void AI_195_JimsDrone()
		{
			Player player = Main.player[this.owner];
			bool flag = false;
			if (player.dead)
			{
				flag = true;
			}
			if (this.owner == Main.myPlayer)
			{
				if (this.position.Y - (float)this.height <= (float)(16 * Main.offScreenRange / 2))
				{
					this.Kill();
					return;
				}
				if (player.HeldItem.type != 5451)
				{
					flag = true;
				}
				bool flag2 = player.gravDir == -1f;
				BitsByte bitsByte = 0;
				Player.DirectionalInputSyncCache localInputCache = player.LocalInputCache;
				bitsByte[0] = (localInputCache.controlLeft ^ flag2);
				bitsByte[1] = (localInputCache.controlRight ^ flag2);
				bitsByte[2] = localInputCache.controlUp;
				bitsByte[3] = localInputCache.controlDown;
				float num = (float)bitsByte;
				if (this.ai[0] != num)
				{
					this.ai[0] = num;
					this.netUpdate = true;
				}
				Main.DroneCameraTracker.Track(this);
			}
			if (flag)
			{
				this.Kill();
				return;
			}
			BitsByte bitsByte2 = (byte)this.ai[0];
			this.rotation = this.ai[1];
			bool flag3 = bitsByte2[0];
			bool flag4 = bitsByte2[1];
			bool flag5 = bitsByte2[2];
			bool flag7 = bitsByte2[3];
			this.localAI[0] += 1f;
			if (!flag3 && !flag4)
			{
				this.localAI[0] = 0f;
			}
			bool flag6 = this.velocity.Y == 0f;
			int num2 = 0;
			if (!flag6)
			{
				num2 = 10;
			}
			if (flag5)
			{
				num2 = 100;
			}
			this.localAI[1] = MathHelper.Lerp(this.localAI[1], (float)num2, 0.2f);
			float num3 = Utils.Remap(this.localAI[0], 0f, 5f, 0f, 1f, true) * Utils.Remap(this.localAI[0], 5f, 15f, 1f, 0f, true);
			float num4 = Utils.Clamp<float>(MathHelper.Max(Utils.Remap(this.localAI[1], 0f, 100f, 0f, 25f, true), num3 * 12f), 0f, 100f);
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
			if (activeSound == null && num4 != 0f)
			{
				this.localAI[2] = SoundEngine.PlayTrackedLoopedSound(SoundID.JimsDrone, base.Center, new Func<bool>(new ProjectileAudioTracker(this).IsActiveAndInGame)).ToFloat();
				activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
			}
			if (activeSound != null)
			{
				activeSound.Volume = num4;
				activeSound.Position = new Vector2?(base.Center);
				activeSound.Pitch = Utils.Clamp<float>(Utils.Remap(this.localAI[1], 0f, 100f, -1f, 1f, true) + num3, -1f, 1f);
			}
			float num5 = 0.15f;
			if (flag6)
			{
				this.rotation = MathHelper.WrapAngle(this.rotation) * 0.7f;
				this.velocity.X = this.velocity.X * 0.97f;
				if (flag5)
				{
					Vector2 vector = (this.rotation - 1.5707964f).ToRotationVector2();
					this.velocity += vector * 0.5f;
					num5 = 0.05f;
				}
			}
			else
			{
				float num6 = 0.20943952f;
				num6 = Utils.Remap(this.localAI[0], 0f, 10f, num6 * 0.1f, num6, true);
				int num7 = flag4.ToInt() - flag3.ToInt();
				this.rotation += (float)num7 * num6;
				if (flag5)
				{
					Vector2 vector2 = (this.rotation - 1.5707964f).ToRotationVector2();
					this.velocity.X = this.velocity.X * 0.97f;
					this.velocity += vector2 * 0.5f;
				}
			}
			this.velocity.Y = this.velocity.Y + num5;
			this.ai[1] = this.rotation;
			if (!flag5 && this.velocity.Y > 12f)
			{
				this.velocity.Y = this.velocity.Y * 0.95f;
			}
			if (this.velocity.Length() > 16f)
			{
				this.velocity *= 16f / this.velocity.Length();
			}
			Lighting.AddLight(base.Center, Vector3.One * 0.3f);
			this.timeLeft = 2;
			if (!flag6)
			{
				Vector2 vector3 = this.position;
				float num8 = 0f;
				int num9 = 3;
				int num10 = 16 * num9;
				for (int i = 0; i < num9; i++)
				{
					Vector2 vector4;
					vector4..ctor(0f, 16f);
					Vector2 vector5 = Collision.TileCollision(vector3 + vector4 * (float)i, vector4, this.width, this.height, false, false, 1);
					num8 += vector5.Y;
					if (vector5 != vector4)
					{
						break;
					}
				}
				if (num8 != (float)num10)
				{
					for (int j = 0; j < 2; j++)
					{
						if (Main.rand.NextFloat() >= 0.66f)
						{
							Vector2 position = vector3 + new Vector2(0f, num8) + new Vector2((float)this.width / 2f, (float)this.height);
							Vector2 value = Main.rand.NextVector2CircularEdge(2.5f, 1f) * 0.5f;
							if (value.Y > 0f)
							{
								value.Y *= -1f;
							}
							Dust.NewDustPerfect(position, (Main.rand.Next(2) == 0) ? 31 : 16, new Vector2?(value), 127, default(Color), 1f);
						}
					}
				}
			}
			if (Main.netMode == 2 && Main.player.IndexInRange(this.owner) && Main.player[this.owner].active)
			{
				RemoteClient.CheckSection(this.owner, this.position, 1);
			}
		}

		// Token: 0x06000D36 RID: 3382 RVA: 0x00340534 File Offset: 0x0033E734
		public static void UseGasTrapInChest(int chestIndex, Chest theChest, int gasTrapIndex, int gasOffsetX, int gasOffsetY)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			bool flag = false;
			int num = -1;
			for (int i = 0; i < 40; i++)
			{
				Item item = theChest.item[i];
				if (item != null)
				{
					if (item.IsAir)
					{
						if (num == -1)
						{
							num = i;
						}
					}
					else if (item.type == 5356 && item.stack < item.maxStack)
					{
						flag = true;
						item.stack++;
						if (Main.netMode != 0)
						{
							NetMessage.SendData(32, -1, -1, null, chestIndex, (float)i, 0f, 0f, 0, 0, 0);
							break;
						}
						break;
					}
				}
			}
			theChest.item[gasTrapIndex].stack--;
			if (theChest.item[gasTrapIndex].stack <= 0)
			{
				if (flag)
				{
					theChest.item[gasTrapIndex].TurnToAir(false);
				}
				else
				{
					flag = true;
					theChest.item[gasTrapIndex].ChangeItemType(5356);
				}
			}
			if (Main.netMode != 0)
			{
				NetMessage.SendData(32, -1, -1, null, chestIndex, (float)gasTrapIndex, 0f, 0f, 0, 0, 0);
			}
			if (!flag && num > -1)
			{
				flag = true;
				theChest.item[num].ChangeItemType(5356);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(32, -1, -1, null, chestIndex, (float)num, 0f, 0f, 0, 0, 0);
				}
			}
			if (!flag)
			{
				Vector2 pos;
				pos..ctor((float)(theChest.x * 16 + gasOffsetX), (float)(theChest.y * 16 + gasOffsetY));
				Item.NewItem(new EntitySource_OverfullChest(theChest.x, theChest.y, theChest, "GasTrap"), pos, Vector2.One, 5356, 1, false, 0, false, false);
			}
		}

		// Token: 0x06000D37 RID: 3383 RVA: 0x003406C0 File Offset: 0x0033E8C0
		private void AI_111_DryadsWard()
		{
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
			{
				this.Kill();
				return;
			}
			this.ai[0] += 1f;
			this.rotation += 0.010471975f;
			this.scale = this.ai[0] / 100f;
			if (this.scale > 1f)
			{
				this.scale = 1f;
			}
			this.alpha = (int)(255f * (1f - this.scale));
			float num = 300f;
			if (this.ai[0] >= 100f)
			{
				num = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
			}
			if (num > 600f)
			{
				num = 600f;
			}
			if (this.ai[0] >= 500f)
			{
				this.alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
				num = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
				this.rotation += 0.010471975f;
			}
			int num2 = 163;
			if (this.ai[2] == 1f)
			{
				float num3 = (float)Math.Sin((double)(this.ai[0] % 120f * 6.2831855f / 120f)) * 0.5f + 0.5f;
				if (Main.rand.NextFloat() < num3)
				{
					num2 = 70;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				float num4 = num;
				Vector2 vector;
				vector..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
				float num5 = (float)Main.rand.Next(3, 9);
				vector.Normalize();
				int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num2, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].position = base.Center + vector * num4;
				if (Main.rand.Next(8) == 0)
				{
					Main.dust[num6].velocity = vector * (0f - num5) * 3f;
					Main.dust[num6].scale += 0.5f;
				}
				else
				{
					Main.dust[num6].velocity = vector * (0f - num5);
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Vector2 vector2;
				vector2..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
				float num7 = (float)Main.rand.Next(3, 9);
				vector2.Normalize();
				int num8 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num2, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num8].noGravity = true;
				Main.dust[num8].position = base.Center + vector2 * 30f;
				if (Main.rand.Next(8) == 0)
				{
					Main.dust[num8].velocity = vector2 * (0f - num7) * 3f;
					Main.dust[num8].scale += 0.5f;
				}
				else
				{
					Main.dust[num8].velocity = vector2 * (0f - num7);
				}
			}
			if (this.ai[0] >= 30f && Main.netMode != 2)
			{
				Player player = Main.player[Main.myPlayer];
				if (player.active && !player.dead && base.Distance(player.Center) <= num && player.FindBuffIndex(165) == -1)
				{
					player.AddBuff(165, 120, true, false);
				}
			}
			if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
			{
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.type != 488 && nPC.active && base.Distance(nPC.Center) <= num)
					{
						if (nPC.townNPC && (nPC.FindBuffIndex(165) == -1 || nPC.buffTime[nPC.FindBuffIndex(165)] <= 20))
						{
							nPC.AddBuff(165, 120, false);
						}
						else if (!nPC.friendly && nPC.lifeMax > 5 && !nPC.dontTakeDamage && (nPC.FindBuffIndex(186) == -1 || nPC.buffTime[nPC.FindBuffIndex(186)] <= 20) && (nPC.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC.position, nPC.width, nPC.height)))
						{
							nPC.AddBuff(186, 120, false);
						}
					}
				}
			}
			if (this.ai[0] >= 570f)
			{
				this.Kill();
			}
		}

		// Token: 0x06000D38 RID: 3384 RVA: 0x00340CBC File Offset: 0x0033EEBC
		public unsafe static bool GasTrapCheck(int x, int y, Player user)
		{
			if (Main.netMode == 1)
			{
				return false;
			}
			int num = Chest.FindChest(x, y);
			if (num < 0)
			{
				return false;
			}
			Chest chest = Main.chest[num];
			int num2 = 16;
			int num3 = 16;
			bool flag = false;
			for (int i = 0; i < 40; i++)
			{
				ushort num4 = *Main.tile[chest.x, chest.y].type;
				if (TileObjectData.CustomPlace((int)num4, 0))
				{
					TileObjectData tileData = TileObjectData.GetTileData((int)num4, 0, 0);
					if (tileData != null)
					{
						int num5 = (int)Math.Ceiling((double)((float)tileData.Width / 2f));
						int num6 = (int)Math.Ceiling((double)((float)tileData.Width / 2f));
						num2 = num5 * 16;
						num3 = num6 * 16;
						if (num5 % 2 != 0)
						{
							num2 += 8;
						}
						if (num6 % 2 != 0)
						{
							num3 += 8;
						}
					}
				}
				if (chest.item[i] != null && chest.item[i].type == 5346)
				{
					Projectile.UseGasTrapInChest(num, chest, i, num2, num3);
					flag = true;
					break;
				}
			}
			if (flag)
			{
				num3 -= 8;
				Vector2 position;
				position..ctor((float)(x * 16 + num2), (float)(y * 16 + num3));
				Projectile.NewProjectile(user.GetProjectileSource_TileInteraction(x, y), position, Vector2.Zero, 1007, 10, 0f, Main.myPlayer, 0f, 0f, 0f);
			}
			return flag;
		}

		// Token: 0x06000D39 RID: 3385 RVA: 0x00340E14 File Offset: 0x0033F014
		private void AI_194_HorsemanPumpkin()
		{
			int num = (int)this.ai[0];
			Vector2 center = base.Center;
			if (Main.player.IndexInRange(num))
			{
				Player player = Main.player[num];
				if (player.active && !player.dead)
				{
					center = player.Center;
				}
			}
			Vector2 vector = center - base.Center;
			int num2 = 30;
			float num3 = 4f;
			float num4 = 5f;
			float num5 = 0.4f;
			float num6 = 0.4f;
			if (vector.Y >= (float)num2 || vector.Y <= (float)(-(float)num2))
			{
				float num7 = (float)Math.Sign(vector.Y) * num6;
				this.velocity.Y = Utils.Clamp<float>(this.velocity.Y + num7, 0f - num4, num4);
			}
			this.velocity.X = Utils.Clamp<float>(this.velocity.X + (float)Math.Sign(vector.X) * num5, 0f - num3, num3);
			this.rotation = this.velocity.ToRotation();
			this.spriteDirection = ((this.velocity.X >= 0f) ? 1 : -1);
			if (this.timeLeft < 6)
			{
				this.Opacity -= 0.1f;
			}
			else
			{
				this.Opacity += 0.033333335f;
			}
			if (Main.rand.Next(3) != 0)
			{
				Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X, this.velocity.Y, 0, default(Color), 1f);
				dust.scale = 0.6f;
				dust.fadeIn = 1.1f;
				dust.noGravity = true;
				dust.noLight = true;
			}
		}

		// Token: 0x06000D3A RID: 3386 RVA: 0x00340FDC File Offset: 0x0033F1DC
		private void AI_193_Flamethrower()
		{
			this.localAI[0] += 1f;
			int num = 60;
			int num2 = 12;
			int num3 = num + num2;
			if (this.localAI[0] >= (float)num3)
			{
				this.Kill();
			}
			if (this.localAI[0] >= (float)num)
			{
				this.velocity *= 0.95f;
			}
			bool flag = this.ai[0] == 1f;
			int num4 = 50;
			int num5 = num4;
			if (flag)
			{
				num4 = 0;
				num5 = num;
			}
			if (this.localAI[0] < (float)num5 && Main.rand.NextFloat() < 0.25f)
			{
				short num6 = flag ? 135 : 6;
				Dust dust = Dust.NewDustDirect(base.Center + Main.rand.NextVector2Circular(60f, 60f) * Utils.Remap(this.localAI[0], 0f, 72f, 0.5f, 1f, true), 4, 4, (int)num6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
				if (Main.rand.Next(4) == 0)
				{
					dust.noGravity = true;
					dust.scale *= 3f;
					Dust dust2 = dust;
					dust2.velocity.X = dust2.velocity.X * 2f;
					Dust dust3 = dust;
					dust3.velocity.Y = dust3.velocity.Y * 2f;
				}
				else
				{
					dust.scale *= 1.5f;
				}
				dust.scale *= 1.5f;
				dust.velocity *= 1.2f;
				dust.velocity += this.velocity * 1f * Utils.Remap(this.localAI[0], 0f, (float)num * 0.75f, 1f, 0.1f, true) * Utils.Remap(this.localAI[0], 0f, (float)num * 0.1f, 0.1f, 1f, true);
				dust.customData = 1;
			}
			if (num4 > 0 && this.localAI[0] >= (float)num4 && Main.rand.NextFloat() < 0.5f)
			{
				Vector2 center = Main.player[this.owner].Center;
				Vector2 vector = (base.Center - center).SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583) * 7f;
				short num7 = 31;
				Dust dust4 = Dust.NewDustDirect(base.Center + Main.rand.NextVector2Circular(50f, 50f) - vector * 2f, 4, 4, (int)num7, 0f, 0f, 150, new Color(80, 80, 80), 1f);
				dust4.noGravity = true;
				dust4.velocity = vector;
				dust4.scale *= 1.1f + Main.rand.NextFloat() * 0.2f;
				dust4.customData = -0.3f - 0.15f * Main.rand.NextFloat();
			}
		}

		// Token: 0x06000D3B RID: 3387 RVA: 0x00341348 File Offset: 0x0033F548
		private void AI_047_MagnetSphere()
		{
			if (this.ai[0] == 0f)
			{
				this.ai[0] = this.velocity.X;
				this.ai[1] = this.velocity.Y;
			}
			if (this.velocity.X > 0f)
			{
				this.rotation += (Math.Abs(this.velocity.Y) + Math.Abs(this.velocity.X)) * 0.001f;
			}
			else
			{
				this.rotation -= (Math.Abs(this.velocity.Y) + Math.Abs(this.velocity.X)) * 0.001f;
			}
			this.frameCounter++;
			if (this.frameCounter > 6)
			{
				this.frameCounter = 0;
				this.frame++;
				if (this.frame > 4)
				{
					this.frame = 0;
				}
			}
			if (this.velocity.Length() > 2f)
			{
				this.velocity *= 0.98f;
			}
			for (int i = 0; i < 1000; i++)
			{
				if (i != this.whoAmI)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == this.owner && projectile.type == this.type && this.timeLeft > Main.projectile[i].timeLeft && Main.projectile[i].timeLeft > 30)
					{
						Main.projectile[i].timeLeft = 30;
					}
				}
			}
			this.AI_047_MagnetSphere_TryAttacking();
		}

		// Token: 0x06000D3C RID: 3388 RVA: 0x003414E8 File Offset: 0x0033F6E8
		private void AI_047_MagnetSphere_TryAttacking()
		{
			int[] array = new int[20];
			int num = 0;
			float num2 = 300f;
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].CanBeChasedBy(this, false))
				{
					float num3 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
					float num4 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
					if (Math.Abs(this.position.X + (float)(this.width / 2) - num3) + Math.Abs(this.position.Y + (float)(this.height / 2) - num4) < num2 && Collision.CanHit(base.Center, 1, 1, Main.npc[i].Center, 1, 1))
					{
						if (num < 20)
						{
							array[num] = i;
							num++;
						}
						flag = true;
					}
				}
			}
			if (this.timeLeft < 30)
			{
				flag = false;
			}
			if (flag)
			{
				int num5 = Main.rand.Next(num);
				num5 = array[num5];
				float num6 = Main.npc[num5].position.X + (float)(Main.npc[num5].width / 2);
				float num7 = Main.npc[num5].position.Y + (float)(Main.npc[num5].height / 2);
				this.localAI[0] += 1f;
				if (this.localAI[0] > 8f)
				{
					this.localAI[0] = 0f;
					Vector2 vector;
					vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					vector += this.velocity * 4f;
					float num8 = num6 - vector.X;
					float num9 = num7 - vector.Y;
					float num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
					num10 = 6f / num10;
					num8 *= num10;
					num9 *= num10;
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector.X, vector.Y, num8, num9, 255, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
				}
			}
		}

		// Token: 0x06000D3D RID: 3389 RVA: 0x00341780 File Offset: 0x0033F980
		public static void AI_192_GetJuminoFall(Projectile proj, out float timeSinceFall, out float fall)
		{
			int num = 420;
			timeSinceFall = proj.ai[0] - (float)num;
			if (timeSinceFall < 0f)
			{
				timeSinceFall = 0f;
			}
			int num2 = 24;
			int num3 = -4;
			float num4 = 0.2f;
			fall = (float)num3 * timeSinceFall + num4 * (timeSinceFall * timeSinceFall) / 2f;
			if (fall > (float)num2)
			{
				fall = (float)num2;
			}
		}

		// Token: 0x06000D3E RID: 3390 RVA: 0x003417DC File Offset: 0x0033F9DC
		private void AI_192_JuminoAnimation()
		{
			float num = 120f;
			float num2 = 420f + num;
			float num3 = num2 - 150f;
			if (this.Opacity > 0f && this.Opacity < 1f)
			{
				for (int i = 0; i < 1; i++)
				{
					Rectangle r = Utils.CenteredRectangle(base.Center + new Vector2(0f, 20f), new Vector2(32f, 32f));
					Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
					dust.noGravity = true;
					dust.fadeIn = 0.9f;
					dust.velocity = new Vector2(0f, -0.3f);
				}
			}
			int num4 = 20;
			int num5 = 4;
			if (this.frame == 1)
			{
				num5 = 60;
			}
			float timeSinceFall;
			float fall;
			Projectile.AI_192_GetJuminoFall(this, out timeSinceFall, out fall);
			if (timeSinceFall > 0f)
			{
				if (fall < 20f)
				{
					this.frame = 0;
				}
				else
				{
					int num16 = this.frameCounter + 1;
					this.frameCounter = num16;
					if (num16 >= num5)
					{
						this.frameCounter = 0;
						num16 = this.frame + 1;
						this.frame = num16;
						if (num16 >= num4)
						{
							this.frame = num4 - 1;
						}
					}
				}
			}
			else
			{
				this.frame = 1;
			}
			float num6 = Main.player[this.owner].Center.X - base.Center.X;
			this.direction = (this.spriteDirection = ((num6 >= 0f) ? 1 : -1));
			int num7 = 30;
			float num8 = num2 + (float)(num4 * num5) + (float)num7;
			this.Opacity = Utils.Remap(this.ai[0], num3 + 0f, num3 + 20f, 0f, 1f, true) * Utils.Remap(this.ai[0], num8 - 5f, num8, 1f, 0.5f, true);
			this.ai[0] += 1f;
			if (this.ai[0] <= 130f && this.ai[0] >= 60f)
			{
				float num9 = Utils.Remap(this.ai[0], 60f, 130f, 0f, 1f, true);
				if (Main.rand.NextFloat() < num9 * 0.5f)
				{
					Rectangle r2 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 0f), new Vector2(70f, 70f) * num9);
					Dust dust2 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
					dust2.noGravity = true;
					dust2.fadeIn = 0.9f;
					dust2.velocity = Main.rand.NextVector2Circular(2f, 2f);
				}
				for (float num10 = 0f; num10 < 1f; num10 += 0.5f)
				{
					if (Main.rand.NextFloat() < 0.5f)
					{
						Dust dust3 = Dust.NewDustPerfect(base.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((double)(((0f - num9) * (3f - num9 * 0.6f) + num10 + Main.rand.NextFloatDirection() * 0.05f * (1f - num9)) * 6.2831855f), default(Vector2)) * (2f + Main.rand.NextFloat() + Main.rand.NextFloat() * 3f * num9)), 30, new Color(80, 200, 255), 1f);
						dust3.noGravity = true;
						dust3.fadeIn = 1.1f;
					}
				}
			}
			if (this.ai[0] <= 60f)
			{
				float num11 = Utils.Remap(this.ai[0], 0f, 60f, 0f, 1f, true);
				for (float num12 = 0f; num12 < 1f; num12 += 0.5f)
				{
					if (Main.rand.NextFloat() < 0.5f)
					{
						Dust dust4 = Dust.NewDustPerfect(base.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((double)(((0f - num11) * 3f + num12 + Main.rand.NextFloatDirection() * 0.05f) * 6.2831855f), default(Vector2)) * (2f * num11 + Main.rand.NextFloat() * num11)), 100, new Color(80, 200, 255), 2f - num11);
						dust4.noGravity = true;
						dust4.fadeIn = 1.1f;
					}
				}
				if (this.ai[0] == 58f)
				{
					for (float num13 = 0f; num13 < 1f; num13 += 0.083333336f)
					{
						Dust dust5 = Dust.NewDustPerfect(base.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((double)(((0f - num11) * 2f + num13 + Main.rand.NextFloatDirection() * 0.05f) * 6.2831855f), default(Vector2)) * (1f * num11 + Main.rand.NextFloat() * num11 * 2f)), 100, new Color(80, 200, 255), 0.8f);
						dust5.noGravity = true;
						dust5.fadeIn = 1.2f;
					}
				}
			}
			if (this.ai[0] >= num8 - 20f)
			{
				float num14 = Utils.Remap(this.ai[0], num8 - 20f, num8, 0.25f, 1f, true);
				Rectangle r3 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 30f + num14 * -20f), new Vector2(82f, 72f) * num14);
				for (int j = 0; j < 5; j++)
				{
					Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 263, 0f, num14 * -4f, 100, new Color(80, 200, 255) * 0.75f, 0.1f);
					dust6.noGravity = true;
					dust6.fadeIn = 0.6f + Main.rand.NextFloat() * 0.3f;
					dust6.velocity = new Vector2(0f, -0.3f);
				}
				for (int k = 0; k < 1; k++)
				{
					Rectangle r4 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 40f), new Vector2(32f, 32f));
					Dust dust7 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
					dust7.noGravity = true;
					dust7.fadeIn = 0.9f;
					dust7.velocity = new Vector2(0f, -0.3f);
				}
			}
			if (Main.rand.Next(6) == 0 && this.ai[0] >= 90f && this.ai[0] < num2)
			{
				Rectangle r5 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 0f), new Vector2(104f, 104f));
				Dust dust8 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
				dust8.noGravity = true;
				dust8.fadeIn = 0.9f;
				dust8.velocity = new Vector2(0f, -0.3f);
			}
			if (this.ai[0] >= num8)
			{
				int num15 = Item.NewItem(new EntitySource_Gift(this, null), base.Center + new Vector2(0f, 12f), Vector2.Zero, 5276, 1, false, 0, false, false);
				Main.item[num15].velocity = new Vector2(0f, 0f);
				this.Kill();
			}
		}

		// Token: 0x06000D3F RID: 3391 RVA: 0x003420C4 File Offset: 0x003402C4
		private void AI_191_TrueNightsEdge()
		{
			float num = 50f;
			float num2 = 15f;
			float num3 = this.ai[1] + num;
			float num4 = num3 + num2;
			float num5 = 77f;
			if (this.type == 985)
			{
				num3 = this.ai[1];
				num4 = this.ai[1] + 25f;
				num5 = num4;
			}
			if (this.localAI[0] == 0f && this.type == 973)
			{
				SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
			}
			this.localAI[0] += 1f;
			if (this.type == 985 && this.localAI[1] == 1f)
			{
				this.localAI[0] += 2f;
			}
			if (this.type == 973 && this.damage == 0 && this.localAI[0] < MathHelper.Lerp(num3, num4, 0.5f))
			{
				this.localAI[0] += 6f;
			}
			this.Opacity = Utils.Remap(this.localAI[0], 0f, this.ai[1], 0f, 1f, true) * Utils.Remap(this.localAI[0], num3, num4, 1f, 0f, true);
			if (this.localAI[0] >= num4)
			{
				this.localAI[1] = 1f;
				this.Kill();
				return;
			}
			Player player = Main.player[this.owner];
			float fromValue = this.localAI[0] / this.ai[1];
			float num6 = Utils.Remap(this.localAI[0], this.ai[1] * 0.4f, num4, 0f, 1f, true);
			this.direction = (this.spriteDirection = (int)this.ai[0]);
			if (this.type == 973)
			{
				int num7 = 3;
				if (this.damage != 0 && this.localAI[0] >= num5 + (float)num7)
				{
					this.damage = 0;
				}
				if (this.damage != 0)
				{
					int num8 = 80;
					bool flag = false;
					float num9 = this.velocity.ToRotation();
					for (float num10 = -1f; num10 <= 1f; num10 += 0.5f)
					{
						Vector2 position = base.Center + (num9 + num10 * 0.7853982f * 0.25f).ToRotationVector2() * (float)num8 * 0.5f * this.scale;
						Vector2 position2 = base.Center + (num9 + num10 * 0.7853982f * 0.25f).ToRotationVector2() * (float)num8 * this.scale;
						if (!Collision.SolidTiles(base.Center, 0, 0) && Collision.CanHit(position, 0, 0, position2, 0, 0))
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						this.damage = 0;
					}
				}
				fromValue = this.localAI[0] / this.ai[1];
				this.localAI[1] += 1f;
				num6 = Utils.Remap(this.localAI[1], this.ai[1] * 0.4f, num4, 0f, 1f, true);
				base.Center = player.RotatedRelativePoint(player.MountedCenter, false, true) - this.velocity + this.velocity * num6 * num6 * num5;
				this.rotation += this.ai[0] * 6.2831855f * (4f + this.Opacity * 4f) / 90f;
				this.scale = Utils.Remap(this.localAI[0], this.ai[1] + 2f, num4, 1.12f, 1f, true) * this.ai[2];
				float f = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
				Vector2 vector = base.Center + f.ToRotationVector2() * 84f * this.scale;
				if (Main.rand.Next(5) == 0)
				{
					Dust dust5 = Dust.NewDustPerfect(vector, 14, null, 150, default(Color), 1.4f);
					dust5.noLight = (dust5.noLightEmittence = true);
				}
				int i = 0;
				while ((float)i < 3f * this.Opacity)
				{
					Vector2 vector2 = this.velocity.SafeNormalize(Vector2.UnitX);
					int num11 = (Main.rand.NextFloat() < this.Opacity) ? 75 : 27;
					Dust dust6 = Dust.NewDustPerfect(vector, num11, new Vector2?(this.velocity * 0.2f + vector2 * 3f), 100, default(Color), 1.4f);
					dust6.noGravity = true;
					dust6.customData = this.Opacity * 0.2f;
					i++;
				}
			}
			if (this.type != 985)
			{
				return;
			}
			this.ownerHitCheck = (this.localAI[0] <= 6f);
			if (this.localAI[0] >= MathHelper.Lerp(num3, num4, 0.65f))
			{
				this.damage = 0;
			}
			float fromValue2 = 1f - (1f - num6) * (1f - num6);
			this.rotation = this.velocity.ToRotation();
			this.scale = Utils.Remap(fromValue2, 0f, 1f, 1.5f, 1f, true) * this.ai[2];
			num6 = Utils.Remap(this.localAI[0], this.ai[1] / 2f, num4, 0f, 1f, true);
			this.Opacity = Utils.Remap(this.localAI[0], 0f, this.ai[1] * 0.5f, 0f, 1f, true) * Utils.Remap(this.localAI[0], num4 - 12f, num4, 1f, 0f, true);
			if (this.velocity.Length() > 8f)
			{
				this.velocity *= 0.94f;
				new Vector2(32f, 32f);
				float num12 = Utils.Remap(fromValue, 0.7f, 1f, 110f, 110f, true);
				if (this.localAI[1] == 0f)
				{
					bool flag2 = false;
					for (float num13 = -1f; num13 <= 1f; num13 += 0.5f)
					{
						Vector2 position4 = base.Center + (this.rotation + num13 * 0.7853982f * 0.25f).ToRotationVector2() * num12 * 0.5f * this.scale;
						Vector2 position3 = base.Center + (this.rotation + num13 * 0.7853982f * 0.25f).ToRotationVector2() * num12 * this.scale;
						if (Collision.CanHit(position4, 0, 0, position3, 0, 0))
						{
							flag2 = true;
							break;
						}
					}
					if (!flag2)
					{
						this.localAI[1] = 1f;
					}
				}
				if (this.localAI[1] == 1f && this.velocity.Length() > 8f)
				{
					this.velocity *= 0.8f;
				}
				if (this.localAI[1] == 1f)
				{
					this.velocity *= 0.88f;
				}
			}
			float num14 = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.9f;
			Vector2 vector3 = base.Center + num14.ToRotationVector2() * 85f * this.scale;
			(num14 + this.ai[0] * 1.5707964f).ToRotationVector2();
			Color value;
			value..ctor(64, 220, 96);
			Color value2;
			value2..ctor(15, 84, 125);
			Lighting.AddLight(base.Center + this.rotation.ToRotationVector2() * 85f * this.scale, value.ToVector3());
			for (int j = 0; j < 3; j++)
			{
				if (Main.rand.NextFloat() < this.Opacity + 0.1f)
				{
					Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(fromValue, 0f, 0.6f, 0f, 1f, true)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0f, 0.5f, true)), Color.White, Main.rand.NextFloat() * 0.3f);
					Dust dust3 = Dust.NewDustPerfect(vector3, 107, new Vector2?(this.velocity * 0.7f), 100, default(Color) * this.Opacity, 0.8f * this.Opacity);
					dust3.scale *= 0.7f;
					dust3.velocity += player.velocity * 0.1f;
					dust3.position -= dust3.velocity * 6f;
				}
			}
			if (this.damage == 0)
			{
				this.localAI[0] += 3f;
				this.velocity *= 0.76f;
			}
			if (this.localAI[0] < 10f && (this.localAI[1] == 1f || this.damage == 0))
			{
				this.localAI[0] += 1f;
				this.velocity *= 0.85f;
				for (int k = 0; k < 4; k++)
				{
					float num15 = Main.rand.NextFloatDirection();
					float num16 = 1f - Math.Abs(num15);
					num14 = this.rotation + num15 * 1.5707964f * 0.9f;
					vector3 = base.Center + num14.ToRotationVector2() * 85f * this.scale;
					Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(fromValue, 0f, 0.6f, 0f, 1f, true)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0f, 0.5f, true)), Color.White, Main.rand.NextFloat() * 0.3f);
					Dust dust4 = Dust.NewDustPerfect(vector3, 107, new Vector2?(this.velocity.RotatedBy((double)(num15 * 0.7853982f), default(Vector2)) * 0.2f * Main.rand.NextFloat()), 100, default(Color), 1.4f * num16);
					dust4.velocity += player.velocity * 0.1f;
					dust4.position -= dust4.velocity * Main.rand.NextFloat() * 3f;
				}
			}
		}

		// Token: 0x06000D40 RID: 3392 RVA: 0x00342C84 File Offset: 0x00340E84
		private void AI_190_NightsEdge()
		{
			if (this.localAI[0] == 0f && this.type == 984)
			{
				SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound(new SoundStyle?(SoundID.Item60), new Vector2?(this.position));
				if (soundEffectInstance != null)
				{
					soundEffectInstance.Volume *= 0.65f;
				}
			}
			this.localAI[0] += 1f;
			Player player = Main.player[this.owner];
			float num = this.localAI[0] / this.ai[1];
			float num2 = this.ai[0];
			float num3 = this.velocity.ToRotation();
			float num4 = 3.1415927f * num2 * num + num3 + num2 * 3.1415927f + player.fullRotation;
			this.rotation = num4;
			float num5 = 0.2f;
			float num6 = 1f;
			int num12 = this.type;
			switch (num12)
			{
			case 982:
				num5 = 0.6f;
				break;
			case 983:
				num5 = 1f;
				num6 = 1.2f;
				break;
			case 984:
				num5 = 0.6f;
				break;
			default:
				if (num12 == 997)
				{
					num5 = 0.6f;
				}
				break;
			}
			base.Center = player.RotatedRelativePoint(player.MountedCenter, false, true) - this.velocity;
			this.scale = num6 + num * num5;
			if (this.type == 972)
			{
				if (Math.Abs(num2) < 0.2f)
				{
					this.rotation += 12.566371f * num2 * 10f * num;
					float num7 = Utils.Remap(this.localAI[0], 10f, this.ai[1] - 5f, 0f, 1f, true);
					this.position += this.velocity.SafeNormalize(Vector2.Zero) * (45f * num7);
					this.scale += num7 * 0.4f;
				}
				if (Main.rand.Next(2) == 0)
				{
					float f = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
					Vector2 vector = base.Center + f.ToRotationVector2() * 84f * this.scale;
					if (Main.rand.Next(5) == 0)
					{
						Dust dust7 = Dust.NewDustPerfect(vector, 14, null, 150, default(Color), 1.4f);
						dust7.noLight = (dust7.noLightEmittence = true);
					}
					if (Main.rand.Next(2) == 0)
					{
						Dust.NewDustPerfect(vector, 27, new Vector2?(new Vector2(player.velocity.X * 0.2f + (float)(player.direction * 3), player.velocity.Y * 0.2f)), 100, default(Color), 1.4f).noGravity = true;
					}
				}
			}
			if (this.type == 982)
			{
				float num8 = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
				Vector2 vector2 = base.Center + num8.ToRotationVector2() * 84f * this.scale;
				Vector2 vector3 = (num8 + this.ai[0] * 1.5707964f).ToRotationVector2();
				if (Main.rand.NextFloat() * 2f < this.Opacity)
				{
					Dust dust8 = Dust.NewDustPerfect(base.Center + num8.ToRotationVector2() * (Main.rand.NextFloat() * 80f * this.scale + 20f * this.scale), 278, new Vector2?(vector3 * 1f), 100, Color.Lerp(Color.Gold, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
					dust8.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
					dust8.noGravity = true;
				}
				if (Main.rand.NextFloat() * 1.5f < this.Opacity)
				{
					Dust.NewDustPerfect(vector2, 43, new Vector2?(vector3 * 1f), 100, Color.White * this.Opacity, 1.2f * this.Opacity);
				}
			}
			if (this.type == 997)
			{
				float num9 = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
				base.Center + num9.ToRotationVector2() * 84f * this.scale;
				Vector2 vector4 = (num9 + this.ai[0] * 1.5707964f).ToRotationVector2();
				if (Main.rand.NextFloat() * 2f < this.Opacity)
				{
					Dust dust9 = Dust.NewDustPerfect(base.Center + num9.ToRotationVector2() * (Main.rand.NextFloat() * 80f * this.scale + 20f * this.scale), 6, new Vector2?(vector4 * 4f), 0, default(Color), 0.4f);
					dust9.noGravity = true;
					dust9.scale = 1.4f;
				}
			}
			if (this.type == 983)
			{
				float num10 = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
				Vector2 vector5 = base.Center + num10.ToRotationVector2() * 84f * this.scale;
				Vector2 vector6 = (num10 + this.ai[0] * 1.5707964f).ToRotationVector2();
				if (Main.rand.NextFloat() < this.Opacity)
				{
					Dust dust10 = Dust.NewDustPerfect(base.Center + num10.ToRotationVector2() * (Main.rand.NextFloat() * 80f * this.scale + 20f * this.scale), 278, new Vector2?(vector6 * 1f), 100, Color.Lerp(Color.HotPink, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
					dust10.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
					dust10.noGravity = true;
				}
				if (Main.rand.NextFloat() * 1.5f < this.Opacity)
				{
					Dust.NewDustPerfect(vector5, 43, new Vector2?(vector6 * 1f), 100, Color.White * this.Opacity, 1.2f * this.Opacity);
				}
			}
			if (this.type == 984)
			{
				float num11 = this.rotation + Main.rand.NextFloatDirection() * 1.5707964f * 0.7f;
				Vector2 vector7 = base.Center + num11.ToRotationVector2() * 85f * this.scale;
				Vector2 vector8 = (num11 + this.ai[0] * 1.5707964f).ToRotationVector2();
				Color value;
				value..ctor(64, 220, 96);
				Color value2;
				value2..ctor(15, 84, 125);
				Lighting.AddLight(base.Center, value2.ToVector3());
				if (Main.rand.NextFloat() * 2f < this.Opacity)
				{
					Color value3 = Color.Lerp(value2, value, Utils.Remap(num, 0f, 0.6f, 0f, 1f, true));
					value3 = Color.Lerp(value3, Color.White, Utils.Remap(num, 0.6f, 0.8f, 0f, 0.5f, true));
					Dust dust11 = Dust.NewDustPerfect(base.Center + num11.ToRotationVector2() * (Main.rand.NextFloat() * 80f * this.scale + 20f * this.scale), 278, new Vector2?(vector8 * 1f), 100, Color.Lerp(value3, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
					dust11.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
					dust11.noGravity = true;
				}
				if (Main.rand.NextFloat() < this.Opacity)
				{
					Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(num, 0f, 0.6f, 0f, 1f, true)), Color.White, Utils.Remap(num, 0.6f, 0.8f, 0f, 0.5f, true)), Color.White, Main.rand.NextFloat() * 0.3f);
					Dust dust6 = Dust.NewDustPerfect(vector7, 107, new Vector2?(vector8 * 3f), 100, default(Color) * this.Opacity, 0.8f * this.Opacity);
					dust6.velocity += player.velocity * 0.1f;
					dust6.velocity += new Vector2((float)player.direction, 0f);
					dust6.position -= dust6.velocity * 6f;
				}
			}
			this.scale *= this.ai[2];
			if (this.localAI[0] >= this.ai[1])
			{
				this.Kill();
			}
		}

		// Token: 0x06000D41 RID: 3393 RVA: 0x00343664 File Offset: 0x00341864
		private void AI_188_LightsBane()
		{
			if (this.soundDelay == 0)
			{
				this.soundDelay = -1;
				SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound(new SoundStyle?(SoundID.Item60), new Vector2?(base.Center));
				if (soundEffectInstance != null)
				{
					soundEffectInstance.Volume *= 0.15f * this.ai[0];
				}
			}
			this.scale = this.ai[0];
			this.localAI[0] += 1f;
			int num3 = this.frameCounter + 1;
			this.frameCounter = num3;
			if (num3 >= 3)
			{
				this.frameCounter = 0;
				num3 = this.frame + 1;
				this.frame = num3;
				if (num3 >= 12)
				{
					this.Kill();
					return;
				}
			}
			this.rotation = this.velocity.ToRotation();
			float f = this.rotation;
			float num = 46f * this.scale;
			Vector2 vector = f.ToRotationVector2();
			float num2 = this.localAI[0] / 36f * 4f;
			if (num2 >= 0f && num2 <= 1f)
			{
				Dust dust = Dust.NewDustPerfect(Vector2.Lerp(base.Center - vector * num, base.Center + vector * num, this.localAI[0] / 36f), 278, new Vector2?(vector.RotatedBy((double)(6.2831855f * Main.rand.NextFloatDirection() * 0.02f), default(Vector2)) * 8f * Main.rand.NextFloat()), 0, new Color(60, 0, 150), 0.7f * num2);
				dust.noGravity = true;
				dust.noLight = (dust.noLightEmittence = true);
			}
		}

		// Token: 0x06000D42 RID: 3394 RVA: 0x00343824 File Offset: 0x00341A24
		private void AI_189_Volcano()
		{
			if (this.soundDelay == 0)
			{
				this.soundDelay = -1;
				SoundEngine.PlaySound(SoundID.DD2_ExplosiveTrapExplode, new Vector2?(base.Center), null);
			}
			this.alpha = (int)(255f * (1f - Utils.Remap(this.ai[0], 0f, 2f, 0f, 1f, true) * Utils.Remap(this.ai[0], 6f, 10f, 1f, 0f, true)));
			float num = (float)(this.width / 2);
			float num2 = (float)(this.height / 2);
			num2 = (num = 8f);
			this.scale = 1f + 1f * (this.ai[0] / 15f);
			int num6 = this.frameCounter + 1;
			this.frameCounter = num6;
			if (num6 >= 2)
			{
				this.frameCounter = 0;
				num6 = this.frame + 1;
				this.frame = num6;
				if (num6 >= 5)
				{
					this.Kill();
					return;
				}
			}
			this.ai[0] += 1f;
			if (this.ai[0] == 1f)
			{
				for (int i = 0; i < 20; i++)
				{
					int num3 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						6,
						259,
						158
					});
					Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), num3, new Vector2?(this.velocity.RotatedBy((double)(Main.rand.NextFloatDirection() * 0.7853982f * 0.6f), default(Vector2)) * (2f + 5f * Main.rand.NextFloat())), 200, default(Color), 1f + Main.rand.NextFloat()).customData = 0;
				}
				int num4 = Main.rand.Next(3, 7);
				for (int j = 0; j < num4 * 5; j++)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), 31, new Vector2?(this.velocity.RotatedBy((double)(Main.rand.NextFloatDirection() * 0.7853982f * 0.6f), default(Vector2)) * (2f + 5f * Main.rand.NextFloat())), 50, default(Color), 1f + Main.rand.NextFloat());
					dust3.noGravity = true;
					dust3.velocity *= 3f;
				}
				for (int k = 0; k < num4; k++)
				{
					Gore.NewGorePerfect(base.Center + Main.rand.NextVector2Circular(num, num2) - new Vector2(16f, 16f), this.velocity.RotatedBy((double)(Main.rand.NextFloatDirection() * 0.7853982f * 0.6f), default(Vector2)) * (0f + 4f * Main.rand.NextFloat()), 61 + Main.rand.Next(3), 1f);
				}
			}
			for (int l = 0; l < 2; l++)
			{
				if (Main.rand.Next(3) < 2)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), 6, new Vector2?(this.velocity.RotatedBy((double)(Main.rand.NextFloatDirection() * 0.7853982f), default(Vector2)) * (1.5f + 2f * Main.rand.NextFloat())), 90, default(Color), 2.5f);
					dust2.noGravity = true;
					dust2.fadeIn = 1f;
					if (Main.rand.Next(6) < 3)
					{
						dust2.noGravity = false;
						dust2.noLight = true;
						dust2.fadeIn = 0.4f;
						dust2.scale *= 0.3f;
					}
					else
					{
						dust2.velocity = base.DirectionFrom(dust2.position) * dust2.velocity.Length() * 0.25f;
					}
					dust2.customData = 0;
				}
			}
			for (int m = 0; m < 2; m++)
			{
				if (Main.rand.NextFloat() >= 0.5f)
				{
					int num5 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						6,
						259,
						158
					});
					Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), num5, new Vector2?(this.velocity.RotatedBy((double)(Main.rand.NextFloatDirection() * 0.7853982f * 0.5f), default(Vector2)) * (1f + 2f * Main.rand.NextFloat())), 200, default(Color), 1f + Main.rand.NextFloat());
					dust4.velocity *= new Vector2(0.6f, 1.5f);
					dust4.customData = 0;
				}
			}
		}

		// Token: 0x06000D43 RID: 3395 RVA: 0x00343DA0 File Offset: 0x00341FA0
		private void AI_066_TryInterceptingTarget(Vector2 targetDir, Vector2 targetVelocity, float speed)
		{
			float num = 5f;
			float num2 = 30f;
			float num3 = num2 + num;
			int num4 = 1;
			int num5 = 4;
			int num6 = 2;
			bool flag = false;
			if (this.type == 533)
			{
				num4 = 2;
			}
			if (this.type == 388)
			{
				num4 = 2;
				num2 = 40f;
			}
			targetVelocity /= (float)num4;
			float num7 = 1f;
			while (num7 <= 1.5f)
			{
				Utils.ChaseResults chaseResults = Utils.GetChaseResults(base.Center, speed, targetDir, targetVelocity);
				if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= num3)
				{
					this.velocity = chaseResults.ChaserVelocity;
					if (flag)
					{
						int num8 = (int)Utils.Clamp<float>((float)Math.Ceiling((double)chaseResults.InterceptionTime) + (float)num6, (float)num5, num2 - 1f) / num4;
						float num9 = num2 / (float)num4 - (float)num8;
						this.ai[1] += num9 * (float)num4;
						return;
					}
					break;
				}
				else
				{
					num7 += 0.1f;
				}
			}
		}

		// Token: 0x06000D44 RID: 3396 RVA: 0x00343E94 File Offset: 0x00342094
		public static void RandomizeInsanityShadowFor(Entity targetEntity, bool isHostile, out Vector2 spawnposition, out Vector2 spawnvelocity, out float ai0, out float ai1)
		{
			int num = Main.rand.Next(2) * 2 - 1;
			int num10 = Main.rand.Next(4);
			float num2 = isHostile ? 200f : 100f;
			float num3 = (float)(isHostile ? 30 : 20);
			float num4 = (float)(isHostile ? 30 : 0);
			float num5 = Main.rand.NextFloatDirection() * 3.1415927f * 0.125f;
			if (isHostile && targetEntity.velocity.X * (float)num > 0f)
			{
				num *= -1;
			}
			if (num10 == 0 && isHostile)
			{
				num3 += 10f;
			}
			spawnposition = targetEntity.Center + targetEntity.velocity * num4 + new Vector2((float)num * (0f - num2), 0f).RotatedBy((double)num5, default(Vector2));
			spawnvelocity = new Vector2((float)num * num2 / num3, 0f).RotatedBy((double)num5, default(Vector2));
			ai0 = 0f;
			ai1 = 0f;
			if (num10 == 1)
			{
				float num6 = 6.2831855f * Main.rand.NextFloat();
				spawnposition = targetEntity.Center - num6.ToRotationVector2() * (isHostile ? num2 : (num2 * 0.5f));
				ai0 = 180f;
				ai1 = num6 - 1.5707964f;
				spawnvelocity = num6.ToRotationVector2() * (float)(isHostile ? 4 : 2);
			}
			if (num10 == 2)
			{
				float num7 = 6.2831855f * Main.rand.NextFloat();
				spawnposition = targetEntity.Center - num7.ToRotationVector2() * num2;
				ai0 = 300f;
				ai1 = num7;
				spawnvelocity = num7.ToRotationVector2() * (float)(isHostile ? 4 : 2);
			}
			if (num10 == 3)
			{
				float f = 6.2831855f * Main.rand.NextFloat();
				float num8 = (float)(isHostile ? 60 : 30);
				float num9 = 1.5707964f / num8 * Main.rand.NextFloatDirection();
				spawnposition = targetEntity.Center + targetEntity.velocity * num8;
				Vector2 vector = f.ToRotationVector2() * (float)(isHostile ? 8 : 3);
				int i = 0;
				while ((float)i < num8)
				{
					spawnposition -= vector;
					vector = vector.RotatedBy((double)(0f - num9), default(Vector2));
					i++;
				}
				spawnvelocity = vector;
				ai0 = 390f;
				ai1 = num9;
			}
		}

		// Token: 0x06000D45 RID: 3397 RVA: 0x0034412C File Offset: 0x0034232C
		private void AI_187_ShadowHand()
		{
			int variation;
			float fakeCounter;
			float counterMax;
			this.AI_187_ShadowHand_GetVariation(out variation, out fakeCounter, out counterMax);
			float fromValue = fakeCounter / counterMax;
			if (fakeCounter == 0f)
			{
				this.localAI[1] = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, new Vector2?(base.Center)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound == null)
			{
				float[] array = this.localAI;
				int num8 = 1;
				SlotId invalid = SlotId.Invalid;
				array[num8] = invalid.ToFloat();
			}
			else
			{
				activeSound.Position = new Vector2?(base.Center);
			}
			float num = counterMax - 15f;
			if (fakeCounter > num)
			{
				this.alpha += 25;
				if (this.alpha > 255)
				{
					this.alpha = 255;
				}
			}
			else
			{
				this.alpha -= 25;
				if (this.alpha < 50)
				{
					this.alpha = 50;
				}
			}
			if (fakeCounter >= counterMax - 1f)
			{
				this.Kill();
				return;
			}
			if (variation == 0)
			{
				this.velocity *= 0.98f;
				this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
				this.rotation = this.velocity.ToRotation();
				if (this.spriteDirection == -1)
				{
					this.rotation += 3.1415927f;
				}
			}
			if (variation == 1)
			{
				float num2 = 70f;
				this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
				if (this.velocity.Length() > 0.1f)
				{
					this.velocity *= 0.95f;
				}
				num2 *= (float)this.direction;
				Vector2 vector = base.Center - this.rotation.ToRotationVector2() * num2;
				float num9 = Utils.Remap(fromValue, 0.3f, 0.5f, 0f, 1f, true) * Utils.Remap(fromValue, 0.45f, 0.5f, 1f, 0f, true);
				float num3 = Utils.Remap(fromValue, 0.5f, 0.55f, 0f, 1f, true) * Utils.Remap(fromValue, 0.5f, 1f, 1f, 0f, true);
				float num4 = num9 * 3.1415927f * 1f / 60f;
				num4 += num3 * -3.1415927f * 8f / 60f;
				this.rotation += num4 * (float)(-(float)this.direction);
				this.rotation = MathHelper.WrapAngle(this.rotation);
				base.Center = vector + this.rotation.ToRotationVector2() * num2;
			}
			if (variation == 2)
			{
				float f = this.ai[1];
				float num10 = Utils.Remap(fromValue, 0f, 0.4f, 1f, 0f, true);
				float num5 = Utils.Remap(fromValue, 0.3f, 0.4f, 0f, 1f, true) * Utils.Remap(fromValue, 0.4f, 1f, 1f, 0f, true);
				float num6 = num10 * 2f + num5 * 8f + 0.01f;
				this.velocity = f.ToRotationVector2() * num6;
				this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
				this.rotation = this.velocity.ToRotation();
				if (this.spriteDirection == -1)
				{
					this.rotation += 3.1415927f;
				}
			}
			if (variation == 3)
			{
				float num7 = this.ai[1];
				this.velocity = this.velocity.RotatedBy((double)num7, default(Vector2));
				this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
				this.rotation = this.velocity.ToRotation();
				if (this.spriteDirection == -1)
				{
					this.rotation += 3.1415927f;
				}
			}
			this.ai[0] += 1f;
		}

		// Token: 0x06000D46 RID: 3398 RVA: 0x00344574 File Offset: 0x00342774
		private void AI_187_ShadowHand_GetVariation(out int variation, out float fakeCounter, out float counterMax)
		{
			fakeCounter = this.ai[0];
			variation = 0;
			float num = 0f;
			float num2 = counterMax = 180f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 0;
				counterMax = num2;
				return;
			}
			num = num2;
			num2 += 120f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 1;
				fakeCounter -= num;
				counterMax = num2 - num;
				return;
			}
			num = num2;
			num2 += 90f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 2;
				fakeCounter -= num;
				counterMax = num2 - num;
			}
			num = num2;
			num2 += 90f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 3;
				fakeCounter -= num;
				counterMax = num2 - num;
			}
		}

		// Token: 0x06000D47 RID: 3399 RVA: 0x00344618 File Offset: 0x00342818
		private void AI_185_LifeDrain()
		{
			if (Main.myPlayer != this.owner || this.localAI[0] != 0f)
			{
				return;
			}
			Player player = Main.player[this.owner];
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && !nPC.townNPC && !nPC.dontTakeDamage && !nPC.friendly && base.Hitbox.Intersects(nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				for (int j = 0; j < 255; j++)
				{
					Player player2 = Main.player[j];
					if (player2.active && player2.whoAmI != player.whoAmI && player2.hostile && !player2.immune && !player2.dead && player2.team != player.team && base.Hitbox.Intersects(player2.Hitbox))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				player.CheckMana(player.inventory[player.selectedItem], -1, true, false);
				this.localAI[0] = 1f;
			}
		}

		// Token: 0x06000D48 RID: 3400 RVA: 0x0034474C File Offset: 0x0034294C
		private void AI_186_PrincessWeapon()
		{
			float num = 60f;
			this.ai[0] += 1f;
			if (this.ai[0] >= num)
			{
				this.Kill();
				return;
			}
			this.Opacity = Utils.Remap(this.ai[0], 0f, num, 1f, 0f, true);
			float num2 = this.ai[0] / num;
			float num3 = 1f - (1f - num2) * (1f - num2);
			float num4 = 1f - (1f - num3) * (1f - num3);
			float num18 = Utils.Remap(this.ai[0], num - 15f, num, 0f, 1f, true);
			float num5 = num18 * num18;
			float num6 = 1f - num5;
			this.scale = (0.4f + 0.6f * num4) * num6;
			float num7 = Utils.Remap(this.ai[0], 20f, num, 0f, 1f, true);
			float num8 = 1f - (1f - num7) * (1f - num7);
			float num9 = 1f - (1f - num8) * (1f - num8);
			this.localAI[0] = (0.4f + 0.6f * num9) * num6;
			int num10 = this.width / 2;
			Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f, byte.MaxValue) * this.Opacity;
			float num11 = 6f;
			float num12 = 2f;
			if (num2 < 0.9f)
			{
				for (int i = 0; i < 3; i++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector10 = Vector2.UnitX.RotatedBy((double)(Main.rand.NextFloat() * 6.2831855f), default(Vector2));
						Vector2 vector2 = vector10 * ((float)num10 * this.scale);
						Vector2 vector3 = base.Center + vector2;
						Vector2 vector4 = vector10.RotatedBy(0.7853981852531433, default(Vector2));
						vector3 += vector4 * num11;
						int num13 = Dust.NewDust(vector3, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
						Main.dust[num13].position = vector3;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].scale = 0.3f;
						Main.dust[num13].fadeIn = Main.rand.NextFloat() * 1.2f * this.scale;
						Main.dust[num13].velocity = vector4 * this.scale * (0f - num12);
						Main.dust[num13].scale *= this.scale;
						Main.dust[num13].velocity += this.velocity * 0.5f;
						Main.dust[num13].position += Main.dust[num13].velocity * -5f;
						if (num13 != 6000)
						{
							Dust dust = Dust.CloneDust(num13);
							dust.scale /= 2f;
							dust.fadeIn *= 0.85f;
							dust.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			if (num2 < 0.9f)
			{
				for (int j = 0; j < 3; j++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector11 = Vector2.UnitX.RotatedBy((double)(Main.rand.NextFloat() * 6.2831855f), default(Vector2));
						Vector2 vector5 = vector11 * ((float)num10 * this.scale);
						Vector2 vector6 = base.Center + vector5;
						Vector2 vector7 = vector11.RotatedBy(0.7853981852531433, default(Vector2));
						vector6 += vector7 * (0f - num11);
						int num14 = Dust.NewDust(vector6, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
						Main.dust[num14].position = vector6;
						Main.dust[num14].noGravity = true;
						Main.dust[num14].scale = 0.3f;
						Main.dust[num14].fadeIn = Main.rand.NextFloat() * 1.2f * this.scale;
						Main.dust[num14].velocity = vector7 * this.scale * num12;
						Main.dust[num14].scale *= this.scale;
						Main.dust[num14].velocity = this.velocity * 0.5f;
						if (num14 != 6000)
						{
							Dust dust2 = Dust.CloneDust(num14);
							dust2.scale /= 2f;
							dust2.fadeIn *= 0.85f;
							dust2.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			if (num2 < 0.95f)
			{
				for (float num15 = 0f; num15 < 0.8f; num15 += 1f)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector8 = Vector2.UnitX.RotatedBy((double)(Main.rand.NextFloat() * 6.2831855f + 1.5707964f), default(Vector2)) * ((float)num10 * this.scale);
						Vector2 positionInWorld = base.Center + vector8;
						ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
						{
							PositionInWorld = positionInWorld,
							MovementVector = this.velocity
						}, new int?(this.owner));
					}
				}
			}
			if (this.ai[0] == num - 10f)
			{
				for (float num16 = 0f; num16 < 1f; num16 += 0.25f)
				{
					Vector2 vector9 = Vector2.UnitX.RotatedBy((double)(6.2831855f * num16), default(Vector2));
					vector9 * ((float)num10 * this.scale);
					Vector2 center = base.Center;
					float num17 = 1f;
					ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
					{
						PositionInWorld = center,
						MovementVector = vector9 * num17
					}, new int?(this.owner));
					ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
					{
						PositionInWorld = center,
						MovementVector = vector9 * num17 * 2f
					}, new int?(this.owner));
				}
			}
		}

		// Token: 0x06000D49 RID: 3401 RVA: 0x00344E3C File Offset: 0x0034303C
		private void AI_184_BadTorchLuck()
		{
			this.owner = 255;
			if (Main.player[Main.myPlayer].unlockedBiomeTorches)
			{
				this.damage = 0;
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, new Vector2?(base.Center), null);
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1] -= this.velocity.Length();
			}
			else
			{
				this.tileCollide = true;
			}
			int num = (int)this.ai[0];
			float num2 = 4f;
			for (float num3 = 0f; num3 < num2; num3 += 1f)
			{
				int num4 = Dust.NewDust(this.position + this.velocity / num2 * num3, 4, 4, num, 0f, 0f, 100, default(Color), 1f);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num4].noGravity = true;
				}
				Main.dust[num4].velocity *= 0.3f;
				if (num == 66)
				{
					Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					Main.dust[num4].noGravity = true;
				}
			}
		}

		// Token: 0x06000D4A RID: 3402 RVA: 0x00344FA8 File Offset: 0x003431A8
		private void AI_121_StardustDragon()
		{
			Player player = Main.player[this.owner];
			if ((int)Main.timeForVisualEffects % 120 == 0)
			{
				this.netUpdate = true;
			}
			if (!player.active)
			{
				this.active = false;
				return;
			}
			bool flag3 = this.type == 625;
			bool flag = this.type == 625 || this.type == 626 || this.type == 627 || this.type == 628;
			int num2 = 10;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustDragon = false;
				}
				if (player.stardustDragon)
				{
					this.timeLeft = 2;
				}
				num2 = 30;
				if (Main.rand.Next(30) == 0)
				{
					int num3 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 0, default(Color), 2f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].fadeIn = 2f;
					Point point = Main.dust[num3].position.ToTileCoordinates();
					if (WorldGen.InWorld(point.X, point.Y, 5) && WorldGen.SolidTile(point.X, point.Y, false))
					{
						Main.dust[num3].noLight = true;
					}
				}
			}
			if (flag3)
			{
				Vector2 center = player.Center;
				float num4 = 700f;
				float num5 = 1000f;
				int num6 = -1;
				if (base.Distance(center) > 2000f)
				{
					base.Center = center;
					this.netUpdate = true;
				}
				NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false) && base.Distance(ownerMinionAttackTargetNPC.Center) < num4 * 2f)
				{
					num6 = ownerMinionAttackTargetNPC.whoAmI;
					if (ownerMinionAttackTargetNPC.boss)
					{
						int whoAmI = ownerMinionAttackTargetNPC.whoAmI;
					}
					else
					{
						int whoAmI2 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (num6 < 0)
				{
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.CanBeChasedBy(this, false) && player.Distance(nPC.Center) < num5 && base.Distance(nPC.Center) < num4)
						{
							num6 = i;
							bool boss = nPC.boss;
						}
					}
				}
				if (num6 != -1)
				{
					NPC nPC2 = Main.npc[num6];
					Vector2 vector = nPC2.Center - base.Center;
					(vector.X > 0f).ToDirectionInt();
					(vector.Y > 0f).ToDirectionInt();
					float num7 = 0.4f;
					if (vector.Length() < 600f)
					{
						num7 = 0.6f;
					}
					if (vector.Length() < 300f)
					{
						num7 = 0.8f;
					}
					if (vector.Length() > nPC2.Size.Length() * 0.75f)
					{
						this.velocity += Vector2.Normalize(vector) * num7 * 1.5f;
						if (Vector2.Dot(this.velocity, vector) < 0.25f)
						{
							this.velocity *= 0.8f;
						}
					}
					float num8 = 30f;
					if (this.velocity.Length() > num8)
					{
						this.velocity = Vector2.Normalize(this.velocity) * num8;
					}
				}
				else
				{
					float num9 = 0.2f;
					Vector2 vector2 = center - base.Center;
					if (vector2.Length() < 200f)
					{
						num9 = 0.12f;
					}
					if (vector2.Length() < 140f)
					{
						num9 = 0.06f;
					}
					if (vector2.Length() > 100f)
					{
						if (Math.Abs(center.X - base.Center.X) > 20f)
						{
							this.velocity.X = this.velocity.X + num9 * (float)Math.Sign(center.X - base.Center.X);
						}
						if (Math.Abs(center.Y - base.Center.Y) > 10f)
						{
							this.velocity.Y = this.velocity.Y + num9 * (float)Math.Sign(center.Y - base.Center.Y);
						}
					}
					else if (this.velocity.Length() > 2f)
					{
						this.velocity *= 0.96f;
					}
					if (Math.Abs(this.velocity.Y) < 1f)
					{
						this.velocity.Y = this.velocity.Y - 0.1f;
					}
					float num10 = 15f;
					if (this.velocity.Length() > num10)
					{
						this.velocity = Vector2.Normalize(this.velocity) * num10;
					}
				}
				this.rotation = this.velocity.ToRotation() + 1.5707964f;
				int direction = this.direction;
				this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
				if (direction != this.direction)
				{
					this.netUpdate = true;
				}
				float num11 = MathHelper.Clamp(this.localAI[0], 0f, 50f);
				this.position = base.Center;
				this.scale = 1f + num11 * 0.01f;
				this.width = (this.height = (int)((float)num2 * this.scale));
				base.Center = this.position;
				if (this.alpha > 0)
				{
					for (int j = 0; j < 2; j++)
					{
						int num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num12].noGravity = true;
						Main.dust[num12].noLight = true;
					}
					this.alpha -= 42;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
			}
			else
			{
				bool flag2 = false;
				Vector2 vector3 = Vector2.Zero;
				Vector2 zero = Vector2.Zero;
				float num13 = 0f;
				float num14 = 0f;
				float num15 = 1f;
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				int byUUID = Projectile.GetByUUID(this.owner, (int)this.ai[0]);
				if (Main.projectile.IndexInRange(byUUID))
				{
					Projectile projectile = Main.projectile[byUUID];
					if (flag && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
					{
						flag2 = true;
						vector3 = projectile.Center;
						Vector2 velocity = projectile.velocity;
						num13 = projectile.rotation;
						num15 = MathHelper.Clamp(projectile.scale, 0f, 50f);
						num14 = 16f;
						int num18 = projectile.alpha;
						projectile.localAI[0] = this.localAI[0] + 1f;
						if (projectile.type != 625)
						{
							projectile.localAI[1] = (float)this.whoAmI;
						}
						if (this.owner == Main.myPlayer && this.type == 628 && projectile.type == 625)
						{
							projectile.Kill();
							this.Kill();
							return;
						}
					}
				}
				if (!flag2)
				{
					for (int k = 0; k < 1000; k++)
					{
						Projectile projectile2 = Main.projectile[k];
						if (projectile2.active && projectile2.owner == this.owner && ProjectileID.Sets.StardustDragon[projectile2.type] && projectile2.localAI[1] == this.ai[0])
						{
							this.ai[0] = (float)projectile2.projUUID;
							projectile2.localAI[1] = (float)this.whoAmI;
							this.netUpdate = true;
						}
					}
					return;
				}
				if (this.alpha > 0)
				{
					for (int l = 0; l < 2; l++)
					{
						int num16 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num16].noGravity = true;
						Main.dust[num16].noLight = true;
					}
				}
				this.alpha -= 42;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.velocity = Vector2.Zero;
				Vector2 vector4 = vector3 - base.Center;
				if (num13 != this.rotation)
				{
					float num17 = MathHelper.WrapAngle(num13 - this.rotation);
					vector4 = vector4.RotatedBy((double)(num17 * 0.1f), default(Vector2));
				}
				this.rotation = vector4.ToRotation() + 1.5707964f;
				this.position = base.Center;
				this.scale = num15;
				this.width = (this.height = (int)((float)num2 * this.scale));
				base.Center = this.position;
				if (vector4 != Vector2.Zero)
				{
					base.Center = vector3 - Vector2.Normalize(vector4) * num14 * num15;
				}
				this.spriteDirection = ((vector4.X > 0f) ? 1 : -1);
			}
			this.position.X = MathHelper.Clamp(this.position.X, 160f, (float)(Main.maxTilesX * 16 - 160));
			this.position.Y = MathHelper.Clamp(this.position.Y, 160f, (float)(Main.maxTilesY * 16 - 160));
		}

		// Token: 0x06000D4B RID: 3403 RVA: 0x003459A0 File Offset: 0x00343BA0
		private Projectile FindStardustDragonHeadOfOwner()
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == this.owner && projectile.type == 625)
				{
					return projectile;
				}
			}
			return null;
		}

		// Token: 0x06000D4C RID: 3404 RVA: 0x003459EC File Offset: 0x00343BEC
		private void AI_183_ZoologistStrike()
		{
			this.velocity.X = this.velocity.X * 0.2f;
			this.velocity.Y = 0f;
			this.spriteDirection = (this.direction = 1);
			if (this.velocity.X < 0f)
			{
				this.spriteDirection = (this.direction = -1);
			}
			this.frame++;
			if (this.frame >= Main.projFrames[this.type])
			{
				this.frame = Main.projFrames[this.type] - 1;
			}
		}

		// Token: 0x06000D4D RID: 3405 RVA: 0x00345A88 File Offset: 0x00343C88
		private void AI_182_FinalFractal()
		{
			if (this.type == 933 && this.localAI[1] == 0f)
			{
				this.localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item169, new Vector2?(base.Center), null);
			}
			Player player = Main.player[this.owner];
			Vector2 mountedCenter = player.MountedCenter;
			float lerpValue = Utils.GetLerpValue(900f, 0f, this.velocity.Length() * 2f, true);
			float num = MathHelper.Lerp(0.7f, 2f, lerpValue);
			this.localAI[0] += num;
			if (this.localAI[0] >= 120f)
			{
				this.Kill();
				return;
			}
			float lerpValue2 = Utils.GetLerpValue(0f, 1f, this.localAI[0] / 60f, true);
			float num11 = this.localAI[0] / 60f;
			float num2 = this.ai[0];
			float num3 = this.velocity.ToRotation();
			float num4 = 3.1415927f;
			float num5 = (float)((this.velocity.X > 0f) ? 1 : -1);
			float num6 = num4 + num5 * lerpValue2 * 6.2831855f;
			float num7 = this.velocity.Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, true) * 40f;
			float num8 = 60f;
			if (num7 < num8)
			{
				num7 = num8;
			}
			Vector2 vector7 = mountedCenter + this.velocity;
			Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((double)num6, default(Vector2)) * new Vector2(num7, num2 * MathHelper.Lerp(2f, 1f, lerpValue));
			Vector2 vector2 = vector7 + spinningpoint.RotatedBy((double)num3, default(Vector2));
			Vector2 vector3 = (1f - Utils.GetLerpValue(0f, 0.5f, lerpValue2, true)) * new Vector2((float)((this.velocity.X > 0f) ? 1 : -1) * (0f - num7) * 0.1f, (0f - this.ai[0]) * 0.3f);
			float num9 = num6 + num3;
			this.rotation = num9 + 1.5707964f;
			base.Center = vector2 + vector3;
			this.spriteDirection = (this.direction = ((this.velocity.X > 0f) ? 1 : -1));
			if (num2 < 0f)
			{
				this.rotation = num4 + num5 * lerpValue2 * -6.2831855f + num3;
				this.rotation += 1.5707964f;
				this.spriteDirection = (this.direction = ((this.velocity.X <= 0f) ? 1 : -1));
			}
			if (num11 < 1f)
			{
				FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)this.ai[1]);
				Vector2 vector4 = (this.rotation - 1.5707964f).ToRotationVector2();
				Vector2 center = base.Center;
				int num10 = 1 + (int)(this.velocity.Length() / 100f);
				num10 = (int)((float)num10 * Utils.GetLerpValue(0f, 0.5f, lerpValue2, true) * Utils.GetLerpValue(1f, 0.5f, lerpValue2, true));
				if (num10 < 1)
				{
					num10 = 1;
				}
				for (int i = 0; i < num10; i++)
				{
					finalFractalProfile.dustMethod(center + vector4 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), this.rotation - 1.5707964f + 1.5707964f * (float)this.spriteDirection, player.velocity);
				}
				Vector3 vector5 = finalFractalProfile.trailColor.ToVector3();
				Vector3 vector6 = Vector3.Lerp(Vector3.One, vector5, 0.7f);
				Lighting.AddLight(base.Center, vector5 * 0.5f * this.Opacity);
				Lighting.AddLight(mountedCenter, vector6 * this.Opacity * 0.15f);
			}
			this.Opacity = Utils.GetLerpValue(0f, 5f, this.localAI[0], true) * Utils.GetLerpValue(120f, 115f, this.localAI[0], true);
		}

		// Token: 0x06000D4E RID: 3406 RVA: 0x00345EE0 File Offset: 0x003440E0
		private void AI_181_FairyQueenRangedItemShot()
		{
			this.ai[0] += 1f;
			this.alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 10f, this.ai[0], true));
			this.rotation = this.velocity.ToRotation();
			if (Main.rand.Next(6) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 267, null, 0, default(Color), 1f);
				dust.fadeIn = 1f;
				dust.noGravity = true;
				dust.alpha = 100;
				dust.color = this.GetFairyQueenWeaponsColor(1f, Main.rand.NextFloat() * 0.4f, null);
				dust.noLightEmittence = true;
				dust.scale *= 1.5f;
			}
		}

		// Token: 0x06000D4F RID: 3407 RVA: 0x00345FD8 File Offset: 0x003441D8
		private void AI_009_MagicMissiles()
		{
			if (this.type == 491)
			{
				this.AI_009_MagicMissiles_Old();
				return;
			}
			int num = 32;
			Player player = Main.player[this.owner];
			int num2 = Main.maxTilesY * 16;
			int num3 = 0;
			if (this.ai[0] >= 0f)
			{
				num3 = (int)(this.ai[1] / (float)num2);
			}
			bool flag = this.ai[0] == -1f || this.ai[0] == -2f;
			if (this.type == 34)
			{
				int num12 = this.frameCounter;
				this.frameCounter = num12 + 1;
				if (num12 >= 4)
				{
					this.frameCounter = 0;
					num12 = this.frame + 1;
					this.frame = num12;
					if (num12 >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.penetrate == 1 && this.ai[0] >= 0f && num3 == 0)
				{
					this.ai[1] += (float)num2;
					num3 = 1;
					this.netUpdate = true;
				}
				if (this.penetrate == 1 && this.ai[0] == -1f)
				{
					this.ai[0] = -2f;
					this.netUpdate = true;
				}
				if (num3 > 0 || this.ai[0] == -2f)
				{
					this.localAI[0] += 1f;
				}
			}
			if (this.owner == Main.myPlayer)
			{
				if (this.ai[0] >= 0f)
				{
					if (player.channel && player.HeldItem.shoot == this.type)
					{
						Vector2 pointPoisition = Main.MouseWorld;
						player.LimitPointToPlayerReachableArea(ref pointPoisition);
						if (this.ai[0] != pointPoisition.X || this.ai[1] != pointPoisition.Y)
						{
							this.netUpdate = true;
							this.ai[0] = pointPoisition.X;
							this.ai[1] = pointPoisition.Y + (float)(num2 * num3);
						}
					}
					else
					{
						this.netUpdate = true;
						this.ai[0] = -1f;
						this.ai[1] = -1f;
						int num4 = this.FindTargetWithLineOfSight(800f);
						if (num4 != -1)
						{
							this.ai[1] = (float)num4;
						}
						else if (this.velocity.Length() < 2f)
						{
							this.velocity = base.DirectionFrom(player.Center) * (float)num;
						}
						else
						{
							this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * (float)num;
						}
					}
				}
				if (flag && this.ai[1] == -1f)
				{
					int num5 = this.FindTargetWithLineOfSight(800f);
					if (num5 != -1)
					{
						this.ai[1] = (float)num5;
						this.netUpdate = true;
					}
				}
			}
			Vector2? vector = null;
			float amount = 1f;
			if (this.ai[0] > 0f && this.ai[1] > 0f)
			{
				vector = new Vector2?(new Vector2(this.ai[0], this.ai[1] % (float)num2));
			}
			if (flag && this.ai[1] >= 0f)
			{
				int num6 = (int)this.ai[1];
				if (Main.npc.IndexInRange(num6))
				{
					NPC nPC = Main.npc[num6];
					if (nPC.CanBeChasedBy(this, false))
					{
						vector = new Vector2?(nPC.Center);
						float t = base.Distance(vector.Value);
						float num7 = Utils.GetLerpValue(0f, 100f, t, true) * Utils.GetLerpValue(600f, 400f, t, true);
						amount = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - num7, true));
					}
					else
					{
						this.ai[1] = -1f;
						this.netUpdate = true;
					}
				}
			}
			bool flag2 = false;
			if (flag)
			{
				flag2 = true;
			}
			if (vector != null)
			{
				Vector2 value = vector.Value;
				if (base.Distance(value) >= 64f)
				{
					flag2 = true;
					Vector2 v = value - base.Center;
					Vector2 vector2 = v.SafeNormalize(Vector2.Zero);
					float num8 = Math.Min((float)num, v.Length());
					Vector2 value2 = vector2 * num8;
					if (this.velocity.Length() < 4f)
					{
						this.velocity += this.velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.7853981852531433, default(Vector2)).SafeNormalize(Vector2.Zero) * 4f;
					}
					if (this.velocity.HasNaNs())
					{
						this.Kill();
					}
					this.velocity = Vector2.Lerp(this.velocity, value2, amount);
				}
				else
				{
					this.velocity *= 0.3f;
					this.velocity += (value - base.Center) * 0.3f;
					flag2 = (this.velocity.Length() >= 2f);
				}
				if (this.timeLeft < 60)
				{
					this.timeLeft = 60;
				}
			}
			if (flag && this.ai[1] < 0f)
			{
				if (this.velocity.Length() != (float)num)
				{
					this.velocity = this.velocity.MoveTowards(this.velocity.SafeNormalize(Vector2.UnitY) * (float)num, 4f);
				}
				if (this.timeLeft > 300)
				{
					this.timeLeft = 300;
				}
			}
			if (flag2 && this.velocity != Vector2.Zero)
			{
				this.rotation = this.rotation.AngleTowards(this.velocity.ToRotation(), 0.7853982f);
			}
			else
			{
				this.rotation = this.rotation.AngleLerp(0f, 0.2f);
			}
			bool flag3 = this.velocity.Length() > 0.1f && Vector2.Dot(this.oldVelocity.SafeNormalize(Vector2.Zero), this.velocity.SafeNormalize(Vector2.Zero)) < 0.2f;
			if (this.type == 16)
			{
				if (this.soundDelay == 0 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 2f)
				{
					this.soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num9 = Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num9].velocity *= 0.3f;
					Main.dust[num9].position.X = this.position.X + (float)(this.width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num9].position.Y = this.position.Y + (float)(this.height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num9].noGravity = true;
					Main.dust[num9].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				if (flag3)
				{
					int num10 = Main.rand.Next(2, 5);
					for (int i = 0; i < num10; i++)
					{
						Dust dust5 = Dust.NewDustDirect(this.position, this.width, this.height, 15, 0f, 0f, 100, default(Color), 1.5f);
						dust5.velocity *= 0.3f;
						dust5.position = base.Center;
						dust5.noGravity = true;
						dust5.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust5.fadeIn = 2.2f;
					}
				}
			}
			if (this.type != 34)
			{
				return;
			}
			float lerpValue = Utils.GetLerpValue(0f, 10f, this.localAI[0], true);
			Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
			if (Main.rand.Next(6) == 0)
			{
				Dust dust6 = Dust.NewDustDirect(base.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, newColor, 3.5f);
				dust6.noGravity = true;
				dust6.velocity *= 1.4f;
				dust6.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust6.velocity += this.velocity * 0.15f;
			}
			if (Main.rand.Next(12) == 0)
			{
				Dust dust7 = Dust.NewDustDirect(base.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, newColor, 1.5f);
				dust7.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust7.velocity += this.velocity * 0.15f;
			}
			if (flag3)
			{
				int num11 = Main.rand.Next(2, 5 + (int)(lerpValue * 4f));
				for (int j = 0; j < num11; j++)
				{
					Dust dust4 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, newColor, 1.5f);
					dust4.velocity *= 0.3f;
					dust4.position = base.Center;
					dust4.noGravity = true;
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.fadeIn = 2.2f;
					dust4.position += (dust4.position - base.Center) * lerpValue * 10f;
				}
			}
		}

		// Token: 0x06000D50 RID: 3408 RVA: 0x00346A8C File Offset: 0x00344C8C
		private void AI_009_MagicMissiles_Old()
		{
			if (Main.myPlayer == this.owner && this.ai[0] <= 0f)
			{
				if (Main.player[this.owner].channel && Main.player[this.owner].HeldItem.shoot == this.type)
				{
					float num = 12f;
					if (this.type == 16)
					{
						num = 15f;
					}
					if (this.type == 491)
					{
						num = 20f;
					}
					Vector2 vector;
					vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					Vector2 pointPoisition = Main.MouseWorld;
					Main.player[this.owner].LimitPointToPlayerReachableArea(ref pointPoisition);
					float num2 = pointPoisition.X - vector.X;
					float num3 = pointPoisition.Y - vector.Y;
					float num4 = (float)Math.Sqrt((double)(num2 * num2 + num3 * num3));
					if (this.ai[0] < 0f)
					{
						this.ai[0] += 1f;
					}
					if (this.type == 491 && num4 < 100f)
					{
						if (this.velocity.Length() < num)
						{
							this.velocity *= 1.1f;
							if (this.velocity.Length() > num)
							{
								this.velocity.Normalize();
								this.velocity *= num;
							}
						}
						if (this.ai[0] == 0f)
						{
							this.ai[0] = -10f;
						}
					}
					else if (num4 > num)
					{
						num4 = num / num4;
						num2 *= num4;
						num3 *= num4;
						int num18 = (int)(num2 * 1000f);
						int num5 = (int)(this.velocity.X * 1000f);
						int num6 = (int)(num3 * 1000f);
						int num7 = (int)(this.velocity.Y * 1000f);
						if (num18 != num5 || num6 != num7)
						{
							this.netUpdate = true;
						}
						if (this.type == 491)
						{
							Vector2 vector2;
							vector2..ctor(num2, num3);
							this.velocity = (this.velocity * 4f + vector2) / 5f;
						}
						else
						{
							this.velocity.X = num2;
							this.velocity.Y = num3;
						}
					}
					else
					{
						int num19 = (int)(num2 * 1000f);
						int num8 = (int)(this.velocity.X * 1000f);
						int num9 = (int)(num3 * 1000f);
						int num10 = (int)(this.velocity.Y * 1000f);
						if (num19 != num8 || num9 != num10)
						{
							this.netUpdate = true;
						}
						this.velocity.X = num2;
						this.velocity.Y = num3;
					}
				}
				else if (this.ai[0] <= 0f)
				{
					this.netUpdate = true;
					if (this.type != 491)
					{
						Vector2 vector3;
						vector3..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num11 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
						float num12 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
						if (Main.player[this.owner].gravDir == -1f)
						{
							num12 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector3.Y;
						}
						float num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
						if (num13 == 0f || this.ai[0] < 0f)
						{
							vector3..ctor(Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2), Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2));
							num11 = this.position.X + (float)this.width * 0.5f - vector3.X;
							num12 = this.position.Y + (float)this.height * 0.5f - vector3.Y;
							num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
						}
						num13 = 12f / num13;
						num11 *= num13;
						num12 *= num13;
						this.velocity.X = num11;
						this.velocity.Y = num12;
						if (this.velocity.X == 0f && this.velocity.Y == 0f)
						{
							this.Kill();
						}
					}
					this.ai[0] = 1f;
				}
			}
			bool flag = false;
			if (this.type == 491)
			{
				this.localAI[0] += 1f;
				if (this.ai[0] > 0f && this.localAI[0] > 15f)
				{
					this.tileCollide = false;
					Vector2 vector4 = Main.player[this.owner].Center - base.Center;
					if (vector4.Length() < 20f)
					{
						this.Kill();
					}
					vector4.Normalize();
					vector4 *= 25f;
					this.velocity = (this.velocity * 5f + vector4) / 6f;
				}
				flag = true;
				if (this.ai[0] < 0f || (this.velocity.X == 0f && this.velocity.Y == 0f))
				{
					this.rotation += 0.3f;
				}
				else if (this.ai[0] > 0f)
				{
					this.rotation += 0.3f * (float)this.direction;
				}
				else
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
				if (Vector2.Distance(base.Center, Main.player[this.owner].Center) > 2000f)
				{
					this.Kill();
				}
				if (Main.rand.Next(2) == 0)
				{
					int num20 = Main.rand.Next(3);
					int num14;
					if (num20 != 0)
					{
						if (num20 != 1)
						{
							num14 = 58;
						}
						else
						{
							num14 = 57;
						}
					}
					else
					{
						num14 = 15;
					}
					int num15 = Dust.NewDust(this.position, this.width, this.height, num14, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 0.7f);
					Main.dust[num15].velocity *= 0.25f;
					Main.dust[num15].position = (Main.dust[num15].position + this.position) / 2f;
				}
			}
			if (this.type == 79)
			{
				if (this.soundDelay == 0 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 2f)
				{
					this.soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
				}
				for (int i = 0; i < 1; i++)
				{
					int num16 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
					Main.dust[num16].velocity *= 0.1f;
					Main.dust[num16].velocity += this.velocity * 0.2f;
					Main.dust[num16].position.X = this.position.X + (float)(this.width / 2) + 4f + (float)Main.rand.Next(-2, 3);
					Main.dust[num16].position.Y = this.position.Y + (float)(this.height / 2) + (float)Main.rand.Next(-2, 3);
					Main.dust[num16].noGravity = true;
				}
			}
			if (this.type == 16)
			{
				if (this.soundDelay == 0 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 2f)
				{
					this.soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(this.position), null);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num17 = Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num17].velocity *= 0.3f;
					Main.dust[num17].position.X = this.position.X + (float)(this.width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num17].position.Y = this.position.Y + (float)(this.height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num17].noGravity = true;
					Main.dust[num17].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				flag = true;
				if (this.velocity != Vector2.Zero)
				{
					this.rotation = this.velocity.ToRotation();
				}
			}
			if (this.type == 34)
			{
				if (Main.rand.Next(12) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 3.5f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
					dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust.velocity += this.velocity * 0.15f;
				}
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.5f);
					dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust2.velocity += this.velocity * 0.15f;
				}
				flag = true;
				if (this.velocity != Vector2.Zero)
				{
					this.rotation = this.velocity.ToRotation();
				}
			}
			if (!flag && this.velocity != Vector2.Zero)
			{
				this.rotation = this.velocity.ToRotation() - 3.1415927f + 0.7853982f;
			}
			if (this.velocity.Y > 16f)
			{
				this.velocity.Y = 16f;
			}
		}

		// Token: 0x06000D51 RID: 3409 RVA: 0x003476EC File Offset: 0x003458EC
		private void AI_015_HandleMovementCollision(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
		{
			int num = 10;
			int num2 = 0;
			Vector2 vector = this.velocity;
			float num3 = 0.2f;
			if (this.ai[0] == 1f || this.ai[0] == 5f)
			{
				num3 = 0.4f;
			}
			if (this.ai[0] == 6f)
			{
				num3 = 0f;
			}
			if (lastVelocity.X != this.velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					num2 = 1;
				}
				this.velocity.X = (0f - lastVelocity.X) * num3;
				this.localAI[0] += 1f;
			}
			if (lastVelocity.Y != this.velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					num2 = 1;
				}
				this.velocity.Y = (0f - lastVelocity.Y) * num3;
				this.localAI[0] += 1f;
			}
			if (this.ai[0] == 1f)
			{
				this.ai[0] = 5f;
				this.localNPCHitCooldown = num;
				this.netUpdate = true;
				Point scanAreaStart = base.TopLeft.ToTileCoordinates();
				Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
				num2 = 2;
				bool causedShockwaves;
				this.CreateImpactExplosion(2, base.Center, ref scanAreaStart, ref scanAreaEnd, this.width, out causedShockwaves);
				this.CreateImpactExplosion2_FlailTileCollision(base.Center, causedShockwaves, vector);
				this.position -= vector;
			}
			if (num2 > 0)
			{
				this.netUpdate = true;
				for (int i = 0; i < num2; i++)
				{
					Collision.HitTiles(this.position, vector, this.width, this.height);
				}
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			if (this.ai[0] != 3f && this.ai[0] != 0f && this.ai[0] != 5f && this.ai[0] != 6f && this.localAI[0] >= 10f)
			{
				this.ai[0] = 4f;
				this.netUpdate = true;
			}
			if (this.wet)
			{
				wetVelocity = this.velocity;
			}
		}

		// Token: 0x06000D52 RID: 3410 RVA: 0x00347940 File Offset: 0x00345B40
		public void ResetLocalNPCHitImmunity()
		{
			for (int i = 0; i < 200; i++)
			{
				this.localNPCImmunity[i] = 0;
			}
		}

		// Token: 0x06000D53 RID: 3411 RVA: 0x00347968 File Offset: 0x00345B68
		private void AI_015_Flails()
		{
			Player player = Main.player[this.owner];
			if (!player.active || player.dead || player.noItems || player.CCed || Vector2.Distance(base.Center, player.Center) > 900f)
			{
				this.Kill();
				return;
			}
			if (Main.myPlayer == this.owner && Main.mapFullscreen)
			{
				this.Kill();
				return;
			}
			if (this.type == 948 && this.wet && !this.lavaWet)
			{
				this.type = 947;
				this.netUpdate = true;
			}
			Vector2 mountedCenter = player.MountedCenter;
			bool doFastThrowDust = false;
			bool flag = true;
			bool flag2 = false;
			int num = 10;
			float num2 = 24f;
			float num3 = 800f;
			float num4 = 3f;
			float num5 = 16f;
			float num6 = 6f;
			float num7 = 48f;
			float num8 = 1f;
			float num9 = 14f;
			int num10 = 60;
			int num11 = 10;
			int num12 = 15;
			int num13 = 10;
			int num14 = num + 5;
			int num23 = this.type;
			if (num23 <= 63)
			{
				if (num23 <= 26)
				{
					if (num23 != 25)
					{
						if (num23 == 26)
						{
							num = 15;
							num2 = 16f;
							num5 = 12f;
							num7 = 16f;
						}
					}
					else
					{
						num = 15;
						num2 = 14f;
						num5 = 10f;
						num7 = 15f;
					}
				}
				else if (num23 != 35)
				{
					if (num23 == 63)
					{
						num = 13;
						num2 = 21f;
						num5 = 20f;
						num7 = 24f;
						num12 = 12;
					}
				}
				else
				{
					num = 15;
					num2 = 17f;
					num5 = 14f;
					num7 = 18f;
				}
			}
			else if (num23 <= 247)
			{
				if (num23 != 154)
				{
					if (num23 == 247)
					{
						num = 13;
						num2 = 23f;
						num12 = 12;
					}
				}
				else
				{
					num = 15;
					num2 = 15f;
					num5 = 11f;
					num7 = 16f;
				}
			}
			else if (num23 != 757)
			{
				if (num23 - 947 <= 1)
				{
					num = 13;
					num2 = 12f;
					num5 = 8f;
					num7 = 13f;
				}
			}
			else
			{
				num = 13;
				num2 = 22f;
				num5 = 22f;
				num7 = 26f;
				num12 = 12;
			}
			float num15 = 1f / player.inverseMeleeSpeed;
			num2 *= num15;
			num8 *= num15;
			num9 *= num15;
			num4 *= num15;
			num5 *= num15;
			num6 *= num15;
			num7 *= num15;
			float num16 = num2 * (float)num;
			float num17 = num16 + 160f;
			this.localNPCHitCooldown = num11;
			switch ((int)this.ai[0])
			{
			case 0:
			{
				flag2 = true;
				if (this.owner == Main.myPlayer)
				{
					Vector2 origin = mountedCenter;
					Vector2 mouseWorld = Main.MouseWorld;
					Vector2 vector3 = origin.DirectionTo(mouseWorld).SafeNormalize(Vector2.UnitX * (float)player.direction);
					player.ChangeDir((vector3.X > 0f) ? 1 : -1);
					if (!player.channel)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.velocity = vector3 * num2 + player.velocity;
						base.Center = mountedCenter;
						this.netUpdate = true;
						this.ResetLocalNPCHitImmunity();
						this.localNPCHitCooldown = num13;
						break;
					}
				}
				this.localAI[1] += 1f;
				Vector2 vector4 = new Vector2((float)player.direction).RotatedBy((double)(31.415928f * (this.localAI[1] / 60f) * (float)player.direction), default(Vector2));
				vector4.Y *= 0.8f;
				if (vector4.Y * player.gravDir > 0f)
				{
					vector4.Y *= 0.5f;
				}
				base.Center = mountedCenter + vector4 * 30f;
				this.velocity = Vector2.Zero;
				this.localNPCHitCooldown = num12;
				break;
			}
			case 1:
			{
				doFastThrowDust = true;
				float[] array = this.ai;
				int num24 = 1;
				float num25 = array[num24];
				array[num24] = num25 + 1f;
				bool flag3 = num25 >= (float)num;
				flag3 |= (base.Distance(mountedCenter) >= num3);
				if (player.controlUseItem)
				{
					this.ai[0] = 6f;
					this.ai[1] = 0f;
					this.netUpdate = true;
					this.velocity *= 0.2f;
					if (Main.myPlayer == this.owner && this.type == 757)
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, this.velocity, 928, this.damage, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
					}
				}
				else
				{
					if (flag3)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.netUpdate = true;
						this.velocity *= 0.3f;
						if (Main.myPlayer == this.owner && this.type == 757)
						{
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, this.velocity, 928, this.damage, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
						}
					}
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
					this.localNPCHitCooldown = num13;
				}
				break;
			}
			case 2:
			{
				Vector2 vector5 = base.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (base.Distance(mountedCenter) <= num5)
				{
					this.Kill();
					return;
				}
				if (player.controlUseItem)
				{
					this.ai[0] = 6f;
					this.ai[1] = 0f;
					this.netUpdate = true;
					this.velocity *= 0.2f;
				}
				else
				{
					this.velocity *= 0.98f;
					this.velocity = this.velocity.MoveTowards(vector5 * num5, num4);
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
				}
				break;
			}
			case 3:
				if (!player.controlUseItem)
				{
					this.ai[0] = 4f;
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				else
				{
					float num18 = base.Distance(mountedCenter);
					this.tileCollide = (this.ai[1] == 1f);
					bool flag4 = num18 <= num16;
					if (flag4 != this.tileCollide)
					{
						this.tileCollide = flag4;
						this.ai[1] = (this.tileCollide > false);
						this.netUpdate = true;
					}
					if (num18 > (float)num10)
					{
						if (num18 >= num16)
						{
							this.velocity *= 0.5f;
							this.velocity = this.velocity.MoveTowards(base.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num9);
						}
						this.velocity *= 0.98f;
						this.velocity = this.velocity.MoveTowards(base.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num8);
					}
					else
					{
						if (this.velocity.Length() < 6f)
						{
							this.velocity.X = this.velocity.X * 0.96f;
							this.velocity.Y = this.velocity.Y + 0.2f;
						}
						if (player.velocity.X == 0f)
						{
							this.velocity.X = this.velocity.X * 0.96f;
						}
					}
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
				}
				break;
			case 4:
			{
				this.tileCollide = false;
				Vector2 vector6 = base.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (base.Distance(mountedCenter) <= num7)
				{
					this.Kill();
					return;
				}
				this.velocity *= 0.98f;
				this.velocity = this.velocity.MoveTowards(vector6 * num7, num6);
				Vector2 target = base.Center + this.velocity;
				Vector2 value = mountedCenter.DirectionFrom(target).SafeNormalize(Vector2.Zero);
				if (Vector2.Dot(vector6, value) < 0f)
				{
					this.Kill();
					return;
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
				break;
			}
			case 5:
			{
				float[] array2 = this.ai;
				int num26 = 1;
				float num25 = array2[num26];
				array2[num26] = num25 + 1f;
				if (num25 >= (float)num14)
				{
					this.ai[0] = 6f;
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				else
				{
					this.localNPCHitCooldown = num13;
					this.velocity.Y = this.velocity.Y + 0.6f;
					this.velocity.X = this.velocity.X * 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
				}
				break;
			}
			case 6:
				if (!player.controlUseItem || base.Distance(mountedCenter) > num17)
				{
					this.ai[0] = 4f;
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				else
				{
					if (!this.shimmerWet)
					{
						this.velocity.Y = this.velocity.Y + 0.8f;
					}
					this.velocity.X = this.velocity.X * 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : -1);
				}
				break;
			}
			if (this.type == 247)
			{
				flag = false;
				float num19 = (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
				this.rotation += ((this.velocity.X > 0f) ? num19 : (0f - num19));
				if (this.ai[0] == 0f)
				{
					this.rotation += 0.41887903f * (float)player.direction;
				}
				float num20 = 600f;
				NPC nPC = null;
				if (this.owner == Main.myPlayer)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] >= 20f)
					{
						this.localAI[0] = 17f;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC2 = Main.npc[i];
							if (nPC2.CanBeChasedBy(this, false))
							{
								float num21 = base.Distance(nPC2.Center);
								if (num21 < num20 && Collision.CanHit(this.position, this.width, this.height, nPC2.position, nPC2.width, nPC2.height))
								{
									nPC = nPC2;
									num20 = num21;
								}
							}
						}
					}
					if (nPC != null)
					{
						this.localAI[0] = 0f;
						float num22 = 14f;
						Vector2 center = base.Center;
						Vector2 vector7 = center.DirectionTo(nPC.Center) * num22;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, vector7, 248, (int)((double)this.damage / 1.5), this.knockBack / 2f, Main.myPlayer, 0f, 0f, 0f);
					}
				}
			}
			this.direction = ((this.velocity.X > 0f) ? 1 : -1);
			this.spriteDirection = this.direction;
			this.ownerHitCheck = flag2;
			if (flag)
			{
				if (this.velocity.Length() > 1f)
				{
					this.rotation = this.velocity.ToRotation() + this.velocity.X * 0.1f;
				}
				else
				{
					this.rotation += this.velocity.X * 0.1f;
				}
			}
			this.timeLeft = 2;
			player.heldProj = this.whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = base.DirectionFrom(mountedCenter).ToRotation();
			if (base.Center.X < mountedCenter.X)
			{
				player.itemRotation += 3.1415927f;
			}
			player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
			this.AI_015_Flails_Dust(doFastThrowDust);
		}

		// Token: 0x06000D54 RID: 3412 RVA: 0x00348660 File Offset: 0x00346860
		private void AI_015_HandleMovementCollision_Old(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
		{
			bool flag = false;
			if (lastVelocity.X != this.velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					flag = true;
				}
				this.position.X = this.position.X + this.velocity.X;
				this.velocity.X = (0f - lastVelocity.X) * 0.2f;
			}
			if (lastVelocity.Y != this.velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					flag = true;
				}
				this.position.Y = this.position.Y + this.velocity.Y;
				this.velocity.Y = (0f - lastVelocity.Y) * 0.2f;
			}
			this.ai[0] = 1f;
			if (flag)
			{
				this.netUpdate = true;
				Collision.HitTiles(this.position, this.velocity, this.width, this.height);
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			if (this.wet)
			{
				wetVelocity = this.velocity;
			}
		}

		// Token: 0x06000D55 RID: 3413 RVA: 0x003487A0 File Offset: 0x003469A0
		private void AI_015_Flails_Old()
		{
			this.AI_015_Flails_Dust(false);
			bool flag = Main.player[this.owner].dead;
			if (!flag)
			{
				flag = ((Main.player[this.owner].Center - base.Center).Length() > 2000f);
			}
			if (flag)
			{
				this.Kill();
				return;
			}
			Main.player[this.owner].SetDummyItemTime(10);
			if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
			{
				Main.player[this.owner].ChangeDir(1);
				this.direction = 1;
			}
			else
			{
				Main.player[this.owner].ChangeDir(-1);
				this.direction = -1;
			}
			Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
			Vector2 vector;
			vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
			if (this.ai[0] == 0f)
			{
				float num4 = 160f;
				if (this.type == 63)
				{
					num4 *= 1.5f;
				}
				if (this.type == 247)
				{
					num4 *= 1.5f;
				}
				if (this.type == 757)
				{
					num4 *= 1.5f;
				}
				this.tileCollide = true;
				if (num3 > num4)
				{
					this.ai[0] = 1f;
					this.netUpdate = true;
				}
				else if (!Main.player[this.owner].channel)
				{
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.9f;
					}
					this.velocity.Y = this.velocity.Y + 1f;
					this.velocity.X = this.velocity.X * 0.9f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				float meleeSpeed = Main.player[this.owner].inverseMeleeSpeed;
				float num5 = 14f / meleeSpeed;
				float num6 = 0.9f / meleeSpeed;
				float num7 = 300f / meleeSpeed;
				int num8 = 60;
				if (this.type == 63)
				{
					num7 *= 1.5f;
					num5 *= 1.5f;
					num6 *= 1.5f;
				}
				if (this.type == 247)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				if (this.type == 757)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				Math.Abs(num);
				Math.Abs(num2);
				if (this.ai[1] == 1f)
				{
					this.tileCollide = false;
				}
				if (!Main.player[this.owner].channel || num3 > num7 || !this.tileCollide)
				{
					this.ai[1] = 1f;
					if (this.tileCollide)
					{
						this.netUpdate = true;
					}
					this.tileCollide = false;
					if (num3 < 20f)
					{
						this.Kill();
					}
				}
				if (!this.tileCollide)
				{
					num6 *= 2f;
				}
				if (num3 > (float)num8 || !this.tileCollide)
				{
					num3 = num5 / num3;
					num *= num3;
					num2 *= num3;
					new Vector2(this.velocity.X, this.velocity.Y);
					float num9 = num - this.velocity.X;
					float num10 = num2 - this.velocity.Y;
					float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
					num11 = num6 / num11;
					num9 *= num11;
					num10 *= num11;
					this.velocity.X = this.velocity.X * 0.98f;
					this.velocity.Y = this.velocity.Y * 0.98f;
					this.velocity.X = this.velocity.X + num9;
					this.velocity.Y = this.velocity.Y + num10;
				}
				else
				{
					if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 6f)
					{
						this.velocity.X = this.velocity.X * 0.96f;
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					if (Main.player[this.owner].velocity.X == 0f)
					{
						this.velocity.X = this.velocity.X * 0.96f;
					}
				}
			}
			if (this.type == 247)
			{
				if (this.velocity.X < 0f)
				{
					this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
				}
				float num12 = this.position.X;
				float num13 = this.position.Y;
				float num14 = 600f;
				bool flag2 = false;
				if (this.owner == Main.myPlayer)
				{
					this.localAI[1] += 1f;
					if (this.localAI[1] > 20f)
					{
						this.localAI[1] = 20f;
						for (int i = 0; i < 200; i++)
						{
							if (Main.npc[i].CanBeChasedBy(this, false))
							{
								float num15 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
								float num16 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
								float num17 = Math.Abs(this.position.X + (float)(this.width / 2) - num15) + Math.Abs(this.position.Y + (float)(this.height / 2) - num16);
								if (num17 < num14 && Collision.CanHit(this.position, this.width, this.height, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
								{
									num14 = num17;
									num12 = num15;
									num13 = num16;
									flag2 = true;
								}
							}
						}
					}
				}
				if (flag2)
				{
					this.localAI[1] = 0f;
					vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					num = num12 - vector.X;
					num2 = num13 - vector.Y;
					num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					num3 = 14f / num3;
					num *= num3;
					num2 *= num3;
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector.X, vector.Y, num, num2, 248, (int)((double)this.damage / 1.5), this.knockBack / 2f, Main.myPlayer, 0f, 0f, 0f);
					return;
				}
			}
			else
			{
				this.rotation = (float)Math.Atan2((double)num2, (double)num) - this.velocity.X * 0.1f;
			}
		}

		// Token: 0x06000D56 RID: 3414 RVA: 0x00348F88 File Offset: 0x00347188
		private void AI_015_Flails_Dust(bool doFastThrowDust)
		{
			if (this.type == 25)
			{
				int maxValue = 15;
				if (doFastThrowDust)
				{
					maxValue = 1;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.3f);
					return;
				}
			}
			else
			{
				if (this.type == 757)
				{
					int num = 4;
					if (this.velocity.Length() < 8f)
					{
						num = 10;
					}
					if (doFastThrowDust)
					{
						num /= 2;
					}
					for (int i = 0; i < 2; i++)
					{
						if (Main.rand.Next(num) == 0)
						{
							Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5, 0f, 0f, 0, default(Color), 0.8f);
							dust.velocity += this.velocity / 4f;
							dust.fadeIn = 1.3f;
						}
					}
					num = 40;
					if (doFastThrowDust)
					{
						num /= 2;
					}
					for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
					{
						if (Main.rand.Next(num) == 0)
						{
							Dust.NewDustDirect(Vector2.Lerp(Main.player[this.owner].Center, base.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, 0f, 0f, 0, default(Color), 1.3f).velocity += this.velocity / 4f;
						}
					}
					return;
				}
				if (this.type == 26)
				{
					int num3 = Dust.NewDust(this.position, this.width, this.height, 172, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, default(Color), 1.5f);
					Main.dust[num3].noGravity = true;
					Dust dust2 = Main.dust[num3];
					dust2.velocity.X = dust2.velocity.X / 2f;
					Dust dust3 = Main.dust[num3];
					dust3.velocity.Y = dust3.velocity.Y / 2f;
					return;
				}
				if (this.type == 948 && !this.wet)
				{
					int num4 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, default(Color), 1.2f);
					Main.dust[num4].noGravity = true;
					Dust dust4 = Main.dust[num4];
					dust4.velocity.X = dust4.velocity.X * 4f;
					Dust dust5 = Main.dust[num4];
					dust5.velocity.Y = dust5.velocity.Y * 4f;
					Main.dust[num4].velocity = (Main.dust[num4].velocity + this.velocity) / 2f;
					return;
				}
				if (this.type == 35)
				{
					int num5 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num5].noGravity = true;
					Dust dust6 = Main.dust[num5];
					dust6.velocity.X = dust6.velocity.X * 2f;
					Dust dust7 = Main.dust[num5];
					dust7.velocity.Y = dust7.velocity.Y * 2f;
					return;
				}
				if (this.type == 154)
				{
					int num6 = Dust.NewDust(this.position, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, default(Color), 1.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity *= 0.25f;
				}
			}
		}

		// Token: 0x06000D57 RID: 3415 RVA: 0x003493E8 File Offset: 0x003475E8
		private void AI_100_Medusa()
		{
			Player player = Main.player[this.owner];
			Vector2 zero = Vector2.Zero;
			if (this.type == 535)
			{
				zero.X = (float)player.direction * 6f;
				zero.Y = player.gravDir * -14f;
				bool flag = true;
				bool flag2 = this.ai[0] > 0f;
				if (!player.dead)
				{
					this.timeLeft = 3;
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
				}
				if (flag2)
				{
					if (this.frame < 8)
					{
						this.frame = 8;
					}
					if (this.frame >= 12)
					{
						this.frame = 8;
					}
					this.frameCounter++;
					int num6 = this.frameCounter + 1;
					this.frameCounter = num6;
					if (num6 >= 5)
					{
						this.frameCounter = 0;
						num6 = this.frame + 1;
						this.frame = num6;
						if (num6 >= 12)
						{
							this.frame = 8;
						}
					}
				}
				else
				{
					int num6 = this.frameCounter + 1;
					this.frameCounter = num6;
					if (num6 >= 5)
					{
						this.frameCounter = 0;
						num6 = this.frame + 1;
						this.frame = num6;
						if (num6 >= 8)
						{
							this.frame = 0;
						}
					}
				}
				Vector2 center = player.Center;
				Vector2 vector = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - center;
				if (player.gravDir == -1f)
				{
					vector.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center.Y;
				}
				Vector2 vector2;
				vector2..ctor((float)Math.Sign((vector.X == 0f) ? ((float)player.direction) : vector.X), 0f);
				if (vector2.X != this.velocity.X || vector2.Y != this.velocity.Y)
				{
					this.netUpdate = true;
				}
				this.velocity = vector2;
				if (flag2 && this.soundDelay == 0)
				{
					SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 17, 1f, 0f);
				}
				this.soundDelay = (flag2 ? 4 : 0);
				if (Main.myPlayer == this.owner)
				{
					Vector2 position = player.Center + new Vector2((float)(player.direction * 4), player.gravDir * 2f);
					if (!player.channel)
					{
						this.Kill();
						return;
					}
					if (!flag2 || this.ai[0] % 15f == 0f)
					{
						bool flag3 = false;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC = Main.npc[i];
							if (nPC.active && base.Distance(nPC.Center) < 320f && nPC.CanBeChasedBy(this, false) && Collision.CanHitLine(nPC.position, nPC.width, nPC.height, position, 0, 0))
							{
								flag3 = true;
								break;
							}
						}
						if (flag3 && (!flag || player.CheckMana(player.inventory[player.selectedItem], -1, true, false)))
						{
							int num = this.damage;
							position = base.Center;
							int num2 = 0;
							float num3 = 0f;
							Projectile._medusaHeadTargetList.Clear();
							for (int j = 0; j < 200; j++)
							{
								NPC nPC2 = Main.npc[j];
								float num4 = base.Distance(nPC2.Center);
								if (nPC2.active && num4 < 320f && nPC2.CanBeChasedBy(this, false) && Collision.CanHitLine(nPC2.position, nPC2.width, nPC2.height, position, 0, 0))
								{
									Projectile._medusaHeadTargetList.Add(Tuple.Create<int, float>(j, num4));
								}
							}
							Projectile._medusaHeadTargetList.Sort(Projectile._medusaTargetComparer);
							int k = 0;
							while (k < Projectile._medusaHeadTargetList.Count && k < 3)
							{
								Tuple<int, float> tuple = Projectile._medusaHeadTargetList[k];
								NPC nPC3 = Main.npc[tuple.Item1];
								Vector2 v = nPC3.Center - position;
								num3 += v.ToRotation();
								num2++;
								int num5 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), position.X, position.Y, v.X, v.Y, 536, 0, 0f, this.owner, (float)this.whoAmI, 0f, 0f);
								Main.projectile[num5].Center = nPC3.Center;
								Main.projectile[num5].damage = num;
								Main.projectile[num5].Damage();
								Main.projectile[num5].damage = 0;
								Main.projectile[num5].Center = position;
								this.ai[0] = 180f;
								k++;
							}
							num3 = ((num2 == 0) ? ((player.direction == 1) ? 0f : 3.1415927f) : (num3 / (float)num2));
							for (int l = 0; l < 4; l++)
							{
								Vector2 zero2 = Vector2.Zero;
								zero2 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)num3, default(Vector2)) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), position.X, position.Y, zero2.X, zero2.Y, 536, 0, 0f, this.owner, (float)this.whoAmI, 0f, 0f);
							}
							this.ai[0] = 60f;
							this.netUpdate = true;
						}
					}
				}
				Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
			}
			this.rotation = ((player.gravDir == 1f) ? 0f : 3.1415927f);
			this.spriteDirection = this.direction;
			this.timeLeft = 2;
			Vector2 vector3 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				vector3.X = (float)player.bodyFrame.Width - vector3.X;
			}
			vector3 -= (player.bodyFrame.Size() - new Vector2((float)player.width, 42f)) / 2f;
			base.Center = (player.position + vector3 + zero - this.velocity).Floor();
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			player.SetDummyItemTime(2);
		}

		// Token: 0x06000D58 RID: 3416 RVA: 0x00349B3C File Offset: 0x00347D3C
		private void AI_120_StardustGuardian()
		{
			Player player = Main.player[this.owner];
			if (!player.active)
			{
				this.active = false;
				return;
			}
			bool flag = this.type == 623;
			Vector2 vector = player.Center;
			float num = 100f;
			float num2 = 500f;
			float num3 = 500f;
			float num4 = 100f;
			bool flag2 = true;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustGuardian = false;
				}
				if (player.stardustGuardian)
				{
					this.timeLeft = 2;
				}
				num = 150f;
				vector.X -= (float)((5 + player.width / 2) * player.direction);
				vector.Y -= 25f;
				Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
				if (this.ai[0] != 3f && this.alpha == 255)
				{
					this.alpha = 0;
					for (int i = 0; i < 30; i++)
					{
						int num5 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
						Main.dust[num5].noGravity = true;
						Main.dust[num5].velocity *= 3f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
						num5 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num5].velocity *= 2f;
						Main.dust[num5].noGravity = true;
						Main.dust[num5].fadeIn = 2.5f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
					}
				}
			}
			if (this.ai[0] != 0f)
			{
				Main.player[this.owner].tankPet = this.whoAmI;
				Main.player[this.owner].tankPetReset = false;
			}
			if (this.ai[0] == 0f)
			{
				base.Center = Vector2.Lerp(base.Center, vector, 0.05f);
				this.velocity *= 0.5f;
				this.direction = (this.spriteDirection = player.direction);
				if (flag)
				{
					int num22 = this.frameCounter + 1;
					this.frameCounter = num22;
					if (num22 >= 9)
					{
						this.frameCounter = 0;
						num22 = this.frame + 1;
						this.frame = num22;
						if (num22 >= 8)
						{
							this.frame = 0;
						}
					}
				}
				int targetNPCIndex = -1;
				float distanceToClosestTarget = num2;
				bool flag3 = flag2;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag3 = false;
				}
				if (flag3)
				{
					this.AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex, ref distanceToClosestTarget);
				}
				if (targetNPCIndex != -1)
				{
					NPC nPC = Main.npc[targetNPCIndex];
					this.direction = (this.spriteDirection = (nPC.Center.X > base.Center.X).ToDirectionInt());
					float num6 = Math.Abs(vector.X - base.Center.X);
					float num7 = Math.Abs(nPC.Center.X - base.Center.X);
					float num8 = Math.Abs(vector.Y - base.Center.Y);
					float num9 = Math.Abs(nPC.Center.Y - base.Bottom.Y);
					float num10 = (float)(nPC.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num6 < num || (vector.X - base.Center.X) * (float)this.direction < 0f) && num7 > 20f && num7 < num - num6 + 100f)
					{
						this.velocity.X = this.velocity.X + 0.1f * (float)this.direction;
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.7f;
					}
					if ((num8 < num4 || (vector.Y - base.Bottom.Y) * num10 < 0f) && num9 > 10f && num9 < num4 - num8 + 10f)
					{
						this.velocity.Y = this.velocity.Y + 0.1f * num10;
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.7f;
					}
					if (this.owner == Main.myPlayer && num7 < num3)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)targetNPCIndex;
						this.netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				if (player.HasMinionRestTarget)
				{
					vector = player.MinionRestTargetPoint;
				}
				else
				{
					this.ai[0] = 0f;
					this.netUpdate = true;
				}
				int targetNPCIndex2 = -1;
				float distanceToClosestTarget2 = num2;
				bool flag4 = true;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag4 = false;
				}
				if (flag4)
				{
					this.AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex2, ref distanceToClosestTarget2);
				}
				if (targetNPCIndex2 != -1)
				{
					NPC nPC2 = Main.npc[targetNPCIndex2];
					this.direction = (this.spriteDirection = (nPC2.Center.X > base.Center.X).ToDirectionInt());
					float num11 = Math.Abs(vector.X - base.Center.X);
					float num12 = Math.Abs(nPC2.Center.X - base.Center.X);
					float num13 = Math.Abs(vector.Y - base.Center.Y);
					float num14 = Math.Abs(nPC2.Center.Y - base.Bottom.Y);
					float num15 = (float)(nPC2.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num11 < num || (vector.X - base.Center.X) * (float)this.direction < 0f) && num12 > 20f && num12 < num - num11 + 100f)
					{
						this.velocity.X = this.velocity.X + 0.1f * (float)this.direction;
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.7f;
					}
					if ((num13 < num4 || (vector.Y - base.Bottom.Y) * num15 < 0f) && num14 > 10f && num14 < num4 - num13 + 10f)
					{
						this.velocity.Y = this.velocity.Y + 0.1f * num15;
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.7f;
					}
					if (this.owner == Main.myPlayer && num12 < num3)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)targetNPCIndex2;
						this.netUpdate = true;
					}
				}
				else
				{
					if (Math.Abs(vector.X - base.Center.X) > num + 40f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					else if (Math.Abs(vector.X - base.Center.X) > 20f)
					{
						this.direction = (this.spriteDirection = (vector.X > base.Center.X).ToDirectionInt());
						this.velocity.X = this.velocity.X + 0.06f * (float)this.direction;
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.8f;
						this.direction = (this.spriteDirection = (player.Center.X < base.Center.X).ToDirectionInt());
					}
					if (Math.Abs(vector.Y - base.Center.Y) > num4)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					else if (Math.Abs(vector.Y - base.Center.Y) > 10f)
					{
						this.velocity.Y = this.velocity.Y + 0.06f * (float)Math.Sign(vector.Y - base.Center.Y);
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.8f;
					}
				}
				if (flag)
				{
					int num22 = this.frameCounter + 1;
					this.frameCounter = num22;
					if (num22 >= 9)
					{
						this.frameCounter = 0;
						num22 = this.frame + 1;
						this.frame = num22;
						if (num22 >= Main.projFrames[this.type] - 4)
						{
							this.frame = 0;
						}
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (flag)
				{
					int num16 = 3;
					if (this.frame < 12)
					{
						this.frame = 12;
					}
					if (this.frame == 12 || this.frame == 13)
					{
						num16 = 8;
					}
					int num22 = this.frameCounter + 1;
					this.frameCounter = num22;
					if (num22 >= num16)
					{
						this.frameCounter = 0;
						num22 = this.frame + 1;
						this.frame = num22;
						if (num22 >= 19)
						{
							this.frame = 14;
						}
					}
				}
				bool flag5 = false;
				if (flag2)
				{
					flag5 = (base.Distance(player.Center) < num2);
				}
				NPC nPC3 = null;
				int num17 = (int)this.ai[1];
				if (Main.npc.IndexInRange(num17))
				{
					nPC3 = Main.npc[num17];
					if (!nPC3.CanBeChasedBy(this, false) || base.Distance(nPC3.Center) > num3)
					{
						nPC3 = null;
					}
				}
				if (!flag5 || nPC3 == null)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
					this.netUpdate = true;
					if (this.frame < 18)
					{
						this.frame = 18;
					}
				}
				else
				{
					int num18 = ((nPC3.Center - player.Center).X > 1f) ? 1 : -1;
					Vector2 targetPosition = nPC3.Center + new Vector2((float)(-(float)num18) * ((float)nPC3.width * 0.5f + 70f), -10f) - base.Center;
					float maxAmountAllowedToMove = 6f * Utils.Remap(targetPosition.Length(), 50f, 400f, 1f, 4f, true);
					int num19 = 32;
					Vector2 targetPosition2 = Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove);
					this.velocity = this.velocity.MoveTowards(targetPosition2, (float)num19);
					this.direction = (this.spriteDirection = num18);
					float[] array = this.localAI;
					int num23 = 0;
					float num24 = array[num23];
					array[num23] = num24 + 1f;
					if (num24 >= 3f)
					{
						this.localAI[0] = 0f;
						int targetNPCIndex3 = -1;
						float distanceToClosestTarget3 = -1f;
						this.AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex3, ref distanceToClosestTarget3);
						if (targetNPCIndex3 != -1)
						{
							this.ai[1] = (float)targetNPCIndex3;
							this.netUpdate = true;
						}
					}
				}
			}
			else
			{
				float num25 = this.ai[0];
			}
			if (this.ai[0] != 3f)
			{
				return;
			}
			if (player.HasMinionRestTarget)
			{
				vector = player.MinionRestTargetPoint;
			}
			else
			{
				this.ai[0] = 0f;
				this.netUpdate = true;
			}
			if (this.alpha == 0)
			{
				this.alpha = 255;
				for (int j = 0; j < 30; j++)
				{
					int num20 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num20].noGravity = true;
					Main.dust[num20].velocity *= 3f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
					num20 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num20].velocity *= 2f;
					Main.dust[num20].noGravity = true;
					Main.dust[num20].fadeIn = 2.5f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
				}
			}
			else
			{
				for (int k = 0; k < 2; k++)
				{
					int num21 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num21].noGravity = true;
					Main.dust[num21].velocity *= 3f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
					num21 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num21].velocity *= 2f;
					Main.dust[num21].noGravity = true;
					Main.dust[num21].fadeIn = 2.5f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
				}
			}
			this.velocity *= 0.7f;
			base.Center = Vector2.Lerp(base.Center, vector, 0.2f);
			if (base.Distance(vector) < 10f)
			{
				this.ai[0] = 1f;
				this.netUpdate = true;
			}
		}

		// Token: 0x06000D59 RID: 3417 RVA: 0x0034AA6C File Offset: 0x00348C6C
		private void AI_120_StardustGuardian_FindTarget(float lookupRange, ref int targetNPCIndex, ref float distanceToClosestTarget)
		{
			Vector2 center = Main.player[this.owner].Center;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false))
				{
					float num = center.Distance(nPC.Center);
					if (num < lookupRange)
					{
						targetNPCIndex = i;
						distanceToClosestTarget = num;
						lookupRange = num;
					}
				}
			}
		}

		// Token: 0x06000D5A RID: 3418 RVA: 0x0034AAC8 File Offset: 0x00348CC8
		private void AI_180_FairyQueenSunDance()
		{
			if (this.localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item159, new Vector2?(base.Center), null);
			}
			this.localAI[0] += 1f;
			float num = 180f;
			float num6 = this.ai[0] / 6.2831855f;
			float num2 = 0.34906587f;
			if (this.localAI[0] >= num)
			{
				this.Kill();
				return;
			}
			this.alpha -= 15;
			if (this.alpha < 0)
			{
				this.alpha = 0;
			}
			this.scale = Utils.GetLerpValue(0f, 20f, this.localAI[0], true) * Utils.GetLerpValue(num, num - 60f, this.localAI[0], true);
			float lerpValue = Utils.GetLerpValue(50f, num, this.localAI[0], true);
			this.rotation = this.ai[0] + lerpValue * num2;
			int num3 = (int)this.ai[1];
			if (Main.npc.IndexInRange(num3))
			{
				NPC nPC = Main.npc[num3];
				if (nPC.active && nPC.type == 636)
				{
					base.Center = nPC.Center;
				}
				this.velocity = Vector2.Zero;
				Vector2 vector = this.rotation.ToRotationVector2();
				Vector3 v3_ = Main.hslToRgb((this.ai[0] / 6.2831855f + this.localAI[0] / num) % 1f, 1f, 0.85f, byte.MaxValue).ToVector3() * this.scale;
				float num4 = 800f * this.scale;
				DelegateMethods.v3_1 = v3_;
				for (float num5 = 0f; num5 <= 1f; num5 += 0.083333336f)
				{
					Point point = (base.Center + vector * num4 * num5).ToTileCoordinates();
					DelegateMethods.CastLightOpen(point.X, point.Y);
				}
				return;
			}
			this.Kill();
		}

		// Token: 0x06000D5B RID: 3419 RVA: 0x0034ACCC File Offset: 0x00348ECC
		private void AI_179_FairyQueenLance()
		{
			this.localAI[0] += 1f;
			if (this.localAI[0] >= 60f)
			{
				this.velocity = this.ai[0].ToRotationVector2() * 40f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 267, null, 0, default(Color), 1f);
					dust.fadeIn = 1f;
					dust.noGravity = true;
					dust.alpha = 100;
					dust.color = Color.Lerp(this.AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
					dust.noLightEmittence = true;
					dust.scale *= 1.5f;
				}
			}
			if (this.localAI[0] >= 360f)
			{
				this.Kill();
				return;
			}
			this.alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 20f, this.localAI[0], true));
			this.rotation = this.ai[0];
		}

		// Token: 0x06000D5C RID: 3420 RVA: 0x0034AE00 File Offset: 0x00349000
		private void AI_176_EdgyLightning()
		{
			int num = (int)this.ai[0] - 1;
			if (num != -1 && (!Main.npc[num].CanBeChasedBy(this, false) || this.localNPCImmunity[num] != 0))
			{
				this.ai[0] = 0f;
				num = -1;
			}
			if (num == -1)
			{
				NPC nPC = this.FindTargetWithinRange(400f, false);
				if (nPC != null)
				{
					num = nPC.whoAmI;
					this.ai[0] = (float)(num + 1);
					this.netUpdate = true;
				}
			}
			if (num != -1)
			{
				NPC nPC2 = Main.npc[num];
				Vector2 vector = base.DirectionTo(nPC2.Center);
				float num2 = 10f;
				if (!vector.HasNaNs())
				{
					this.velocity = vector * num2;
					this.rotation = this.velocity.ToRotation();
				}
				int num3 = this.frameCounter + 1;
				this.frameCounter = num3;
				if (num3 >= 3)
				{
					this.frameCounter = 0;
					this.frame = Main.rand.Next(Main.projFrames[this.type]);
					return;
				}
			}
			else
			{
				this.Kill();
			}
		}

		// Token: 0x06000D5D RID: 3421 RVA: 0x0034AEFC File Offset: 0x003490FC
		public NPC FindTargetWithinRange(float maxRange, bool checkCanHit = false)
		{
			NPC result = null;
			float num = maxRange;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false) && this.localNPCImmunity[i] == 0 && (!checkCanHit || Collision.CanHitLine(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height)))
				{
					float num2 = base.Distance(nPC.Center);
					if (num > num2)
					{
						num = num2;
						result = nPC;
					}
				}
			}
			return result;
		}

		// Token: 0x06000D5E RID: 3422 RVA: 0x0034AF80 File Offset: 0x00349180
		private void AI_177_IceWhipSlicer()
		{
			Player player = Main.player[this.owner];
			if (this.type == 917 && (!player.active || player.dead))
			{
				player.coolWhipBuff = false;
				this.Kill();
				return;
			}
			if (this.type == 917 && player.coolWhipBuff)
			{
				this.timeLeft = 2;
			}
			if (this.type == 969)
			{
				if (this.soundDelay == 0)
				{
					this.soundDelay = -1;
					this.localAI[1] = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, new Vector2?(base.Center)).ToFloat();
				}
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
				if (activeSound != null)
				{
					activeSound.Position = new Vector2?(base.Center);
					activeSound.Volume = 1f - Math.Max(this.ai[1] - 555f, 0f) / 15f;
				}
				else
				{
					float[] array = this.localAI;
					int num7 = 1;
					SlotId invalid = SlotId.Invalid;
					array[num7] = invalid.ToFloat();
				}
				this.ai[1] += 1f;
				if (this.ai[1] > 560f)
				{
					this.alpha = (int)MathHelper.Lerp(0f, 250f, (this.ai[1] - 560f) / 10f);
				}
				if (this.ai[1] >= 570f)
				{
					this.Kill();
				}
				float num = 555f;
				for (int i = 0; i < 1000; i++)
				{
					if (i != this.whoAmI && Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].type == this.type && this.timeLeft > Main.projectile[i].timeLeft && Main.projectile[i].ai[1] < num)
					{
						Main.projectile[i].ai[1] = num;
						Main.projectile[i].netUpdate = true;
					}
				}
			}
			int num2 = (int)this.ai[0] - 1;
			if (num2 != -1 && (!Main.npc[num2].CanBeChasedBy(this, false) || this.localNPCImmunity[num2] > 0))
			{
				this.ai[0] = 0f;
				num2 = -1;
			}
			if (num2 == -1)
			{
				bool checkCanHit = false;
				if (this.type == 969)
				{
					checkCanHit = true;
				}
				NPC nPC = this.FindTargetWithinRange(400f, checkCanHit);
				if (nPC != null)
				{
					num2 = nPC.whoAmI;
					this.ai[0] = (float)(num2 + 1);
					this.netUpdate = true;
				}
			}
			float num3 = 18f;
			float amount = 0.1f;
			float num4 = 0f;
			if (this.type == 969)
			{
				num3 = 8f;
				amount = 0.075f;
				num4 = 25f;
			}
			if (num2 != -1)
			{
				NPC nPC2 = Main.npc[num2];
				float num5 = base.Distance(nPC2.Center);
				if (num3 > num5)
				{
					num3 = num5;
				}
				Vector2 vector = base.DirectionTo(nPC2.Center);
				if (!vector.HasNaNs() && num5 >= num4)
				{
					this.velocity = Vector2.Lerp(this.velocity, vector * num3, amount);
				}
			}
			else if (this.type == 969)
			{
				Vector2 vector2 = base.DirectionTo(base.Center + this.velocity);
				if (!vector2.HasNaNs())
				{
					this.velocity = Vector2.Lerp(this.velocity, vector2 * num3, amount);
				}
			}
			else
			{
				this.velocity *= 0.92f;
			}
			if (this.type == 969)
			{
				this.rotation = this.velocity.X * 0.0125f;
				int num8 = this.frameCounter + 1;
				this.frameCounter = num8;
				if (num8 > 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.timeLeft % 3 == 0)
				{
					int num6 = Dust.NewDust(this.position, this.width, this.height, 16, this.velocity.X, this.velocity.Y, 120, default(Color), 0.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].fadeIn = 0.9f;
					Main.dust[num6].velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -2f) + this.velocity * 0.75f;
					for (int j = 0; j < 2; j++)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 16, this.velocity.X, this.velocity.Y, 60, default(Color), 0.5f);
						dust.noGravity = true;
						dust.fadeIn = 0.7f;
						dust.velocity = Main.rand.NextVector2Circular(2f, 2f) * 0.2f + new Vector2(0f, -0.4f) + this.velocity * 1.5f;
						dust.position -= this.velocity * 3f;
					}
					return;
				}
			}
			else
			{
				this.rotation += 0.020943953f + Math.Abs(this.velocity.X) * 0.2f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 43, this.velocity.X, this.velocity.Y, 254, Color.White, 0.5f);
					Vector2 vector3 = Main.rand.NextVector2Circular(1f, 1f);
					dust2.position = base.Center + vector3 * 10f;
					dust2.velocity = vector3;
				}
			}
		}

		// Token: 0x06000D5F RID: 3423 RVA: 0x0034B5BC File Offset: 0x003497BC
		private void AI_178_FireExplosion()
		{
			if (this.localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				for (int i = 0; i < 4; i++)
				{
					int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
				}
				for (int j = 0; j < 30; j++)
				{
					int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].velocity *= 3f;
					num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num2].velocity *= 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].fadeIn = 2.5f;
				}
				for (int k = 0; k < 10; k++)
				{
					int num3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num3].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity *= 3f;
				}
				for (int l = 0; l < 10; l++)
				{
					int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num4].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity *= 3f;
				}
				for (int m = 0; m < 2; m++)
				{
					int num5 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num5].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.gore[num5].velocity *= 0.3f;
					Gore gore = Main.gore[num5];
					gore.velocity.X = gore.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore2 = Main.gore[num5];
					gore2.velocity.Y = gore2.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			this.localAI[0] += 1f;
			if (this.localAI[0] >= 10f)
			{
				this.Kill();
			}
		}

		// Token: 0x06000D60 RID: 3424 RVA: 0x0034BB9C File Offset: 0x00349D9C
		private void AI_175_TitaniumStormShards()
		{
			Player player = Main.player[this.owner];
			if (!player.active || player.dead || !player.hasTitaniumStormBuff)
			{
				this.Kill();
				return;
			}
			if (this.frameCounter == 0)
			{
				this.frameCounter = 1;
				this.frame = Main.rand.Next(12);
				this.rotation = Main.rand.NextFloat() * 6.2831855f;
			}
			this.rotation += 0.015707964f;
			int index;
			int totalIndexesInGroup;
			this.AI_GetMyGroupIndexAndFillBlackList(null, out index, out totalIndexesInGroup);
			float f = ((float)index / (float)totalIndexesInGroup + player.miscCounterNormalized * 6f) * 6.2831855f;
			float num = 24f + (float)totalIndexesInGroup * 6f;
			Vector2 vector = player.position - player.oldPosition;
			base.Center += vector;
			Vector2 vector2 = f.ToRotationVector2();
			this.localAI[0] = vector2.Y;
			Vector2 value = player.Center + vector2 * new Vector2(1f, 0.05f) * num;
			base.Center = Vector2.Lerp(base.Center, value, 0.3f);
		}

		// Token: 0x06000D61 RID: 3425 RVA: 0x0034BCD0 File Offset: 0x00349ED0
		private void AI_174_MultisegmentPet()
		{
			Player player = Main.player[this.owner];
			if (!player.active)
			{
				this.active = false;
				return;
			}
			if (this.type == 883)
			{
				if (player.dead)
				{
					player.petFlagEaterOfWorldsPet = false;
				}
				if (player.petFlagEaterOfWorldsPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 887)
			{
				if (player.dead)
				{
					player.petFlagDestroyerPet = false;
				}
				if (player.petFlagDestroyerPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 893)
			{
				if (player.dead)
				{
					player.petFlagLunaticCultistPet = false;
				}
				if (player.petFlagLunaticCultistPet)
				{
					this.timeLeft = 2;
				}
			}
			Vector2 center = player.Center;
			if (base.Distance(center) > 2000f)
			{
				base.Center = center;
				this.velocity = Vector2.Zero;
				this.netUpdate = true;
			}
			float num = (center - base.Center).Length();
			float num2 = Math.Min(12f, Math.Max(4f, player.velocity.Length()));
			this.velocity.Length();
			if (this.velocity == Vector2.Zero)
			{
				this.velocity.X = 2f * (float)player.direction;
				Vector2 vector = this.position;
				for (int i = 0; i < this.oldPos.Length; i++)
				{
					vector -= this.velocity;
					this.oldPos[i] = vector;
				}
			}
			if (num >= 120f)
			{
				float targetAngle = base.AngleTo(center);
				float f = this.velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f));
				this.velocity = f.ToRotationVector2() * num2;
			}
			if (this.velocity.Length() > num2)
			{
				this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num2;
			}
			if (Math.Abs(this.velocity.Y) < 1f)
			{
				this.velocity.Y = this.velocity.Y - 0.1f;
			}
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
			int direction = this.direction;
			this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
			if (direction != this.direction)
			{
				this.netUpdate = true;
			}
			this.position.X = MathHelper.Clamp(this.position.X, 160f, (float)(Main.maxTilesX * 16 - 160));
			this.position.Y = MathHelper.Clamp(this.position.Y, 160f, (float)(Main.maxTilesY * 16 - 160));
		}

		// Token: 0x06000D62 RID: 3426 RVA: 0x0034BF9C File Offset: 0x0034A19C
		private void AI_173_HallowBossRainbowTrail()
		{
			this.Opacity = Utils.GetLerpValue(0f, 60f, (float)this.timeLeft, true) * Utils.GetLerpValue(660f, 600f, (float)this.timeLeft, true);
			float num = 0.008726646f;
			float num2 = 30f;
			this.velocity = this.velocity.RotatedBy((double)this.ai[0], default(Vector2));
			if (this.ai[0] < num)
			{
				this.ai[0] += num / num2;
			}
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
		}

		// Token: 0x06000D63 RID: 3427 RVA: 0x0034C044 File Offset: 0x0034A244
		public Color AI_173_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (float)((int)Main.time), true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * this.Opacity;
			}
			return Main.hslToRgb((this.ai[1] + 0f) % 1f, 1f, 0.5f, byte.MaxValue) * this.Opacity;
		}

		// Token: 0x06000D64 RID: 3428 RVA: 0x0034C0C0 File Offset: 0x0034A2C0
		private void AI_171_HallowBossRainbowStreak()
		{
			bool flag = false;
			bool flag2 = false;
			float num = 140f;
			float num2 = 30f;
			float num3 = 0.98f;
			float value = 0.05f;
			float value2 = 0.1f;
			float num4 = 30f;
			if (this.type == 931)
			{
				num = 180f;
				num2 = 20f;
				num4 = 30f;
				num3 = 0.97f;
				value = 0.075f;
				value2 = 0.125f;
				if (this.timeLeft == 238)
				{
					int num5 = this.alpha;
					this.alpha = 0;
					Color fairyQueenWeaponsColor = this.GetFairyQueenWeaponsColor(1f, 0f, null);
					this.alpha = num5;
					for (int i = 0; i < 3; i++)
					{
						Dust dust = Dust.NewDustPerfect(base.Center, 267, new Vector2?(Main.rand.NextVector2CircularEdge(3f, 3f) * (Main.rand.NextFloat() * 0.5f + 0.5f)), 0, fairyQueenWeaponsColor, 1f);
						dust.scale *= 1.2f;
						dust.noGravity = true;
					}
				}
			}
			if ((float)this.timeLeft > num)
			{
				flag = true;
			}
			else if ((float)this.timeLeft > num2)
			{
				flag2 = true;
			}
			if (flag)
			{
				float num6 = (float)Math.Cos((double)((float)this.whoAmI % 6f / 6f + this.position.X / 320f + this.position.Y / 160f));
				this.velocity *= num3;
				this.velocity = this.velocity.RotatedBy((double)(num6 * 6.2831855f * 0.125f * 1f / 30f), default(Vector2));
			}
			if (this.friendly)
			{
				int num7 = (int)this.ai[0];
				if (Main.npc.IndexInRange(num7) && !Main.npc[num7].CanBeChasedBy(this, false))
				{
					num7 = -1;
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
				if (num7 == -1)
				{
					int num8 = this.FindTargetWithLineOfSight(800f);
					if (num8 != -1)
					{
						this.ai[0] = (float)num8;
						this.netUpdate = true;
					}
				}
			}
			if (flag2)
			{
				int num9 = (int)this.ai[0];
				Vector2 value3 = this.velocity;
				if (this.hostile && Main.player.IndexInRange(num9))
				{
					Player player = Main.player[num9];
					value3 = base.DirectionTo(player.Center) * num4;
				}
				if (this.friendly)
				{
					if (Main.npc.IndexInRange(num9))
					{
						if (this.timeLeft < 10)
						{
							this.timeLeft = 10;
						}
						NPC nPC = Main.npc[num9];
						value3 = base.DirectionTo(nPC.Center) * num4;
					}
					else
					{
						this.timeLeft--;
					}
				}
				float amount = MathHelper.Lerp(value, value2, Utils.GetLerpValue(num, 30f, (float)this.timeLeft, true));
				this.velocity = Vector2.SmoothStep(this.velocity, value3, amount);
				if (this.type == 931)
				{
					this.velocity *= MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0f, 90f, (float)this.timeLeft, true));
				}
			}
			this.Opacity = Utils.GetLerpValue(240f, 220f, (float)this.timeLeft, true);
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
		}

		// Token: 0x06000D65 RID: 3429 RVA: 0x0034C45C File Offset: 0x0034A65C
		public Color AI_171_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (float)((int)Main.time), true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * this.Opacity;
			}
			return Main.hslToRgb((this.ai[1] + 0.5f) % 1f, 1f, 0.5f, byte.MaxValue) * this.Opacity;
		}

		// Token: 0x06000D66 RID: 3430 RVA: 0x0034C4D8 File Offset: 0x0034A6D8
		private void AI_172_HallowBossRainbowPelletStorm()
		{
			if (this.localAI[1] <= 90f)
			{
				this.localAI[1] += 1f;
				this.scale = 0.5f;
				this.Opacity = 0.5f;
				float lerpValue = Utils.GetLerpValue(0f, 90f, this.localAI[1], false);
				this.scale = MathHelper.Lerp(5f, 1f, lerpValue);
				this.Opacity = 1f - (1f - lerpValue * lerpValue);
				return;
			}
			this.scale = 1f;
			this.Opacity = 1f;
			float num = 150f + 10f * (float)this.AI_172_GetPelletStormsCount();
			this.localAI[0] += 1f;
			if (this.localAI[0] >= num)
			{
				this.Kill();
				return;
			}
			this.velocity = Vector2.Zero;
			this.rotation = 0f;
			int num2 = this.AI_172_GetPelletStormsCount();
			for (int i = 0; i < num2; i++)
			{
				Projectile.HallowBossPelletStormInfo hallowBossPelletStormInfo = this.AI_172_GetPelletStormInfo(i);
				for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
				{
					if (hallowBossPelletStormInfo.IsValid(j))
					{
						hallowBossPelletStormInfo.GetBulletPosition(j, base.Center);
					}
				}
			}
		}

		// Token: 0x06000D67 RID: 3431 RVA: 0x0034C618 File Offset: 0x0034A818
		public int AI_172_GetPelletStormsCount()
		{
			return 6;
		}

		// Token: 0x06000D68 RID: 3432 RVA: 0x0034C61C File Offset: 0x0034A81C
		public Projectile.HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
		{
			float from = 0f + (float)stormIndex * 10f;
			float to = 90f + (float)stormIndex * 10f;
			return new Projectile.HallowBossPelletStormInfo
			{
				StartAngle = (float)stormIndex * 1.0471976f - 1.5707964f + (float)stormIndex * 0.62831855f,
				AnglePerBullet = 2.0943952f,
				BulletsInStorm = 3,
				BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, this.localAI[0], false),
				BulletsProgressInStormBonusByIndexNormalized = 0f,
				StormTotalRange = 500f,
				BulletSize = new Vector2(16f, 16f)
			};
		}

		/// <summary>
		/// Finds the closest NPC to this projectile which can be targeted and which it has line of sight to.
		/// </summary>
		/// <param name="maxRange">
		/// The maximum range at which this projectile should search out a target, measured in pixels.<br />
		/// Defaults to 800 (50 tiles). Each tile, for reference, measures out to be 16x16 pixels.
		/// </param>
		/// <returns>The index, in <see cref="F:Terraria.Main.npc" />, of the closest targetable NPC.</returns>
		// Token: 0x06000D69 RID: 3433 RVA: 0x0034C6C8 File Offset: 0x0034A8C8
		public int FindTargetWithLineOfSight(float maxRange = 800f)
		{
			float num = maxRange;
			int result = -1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				bool flag = nPC.CanBeChasedBy(this, false);
				if (this.localNPCImmunity[i] != 0)
				{
					flag = false;
				}
				if (flag)
				{
					float num2 = base.Distance(Main.npc[i].Center);
					if (num2 < num && Collision.CanHit(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		// Token: 0x06000D6A RID: 3434 RVA: 0x0034C758 File Offset: 0x0034A958
		private void AI_170_FairyGlowstick()
		{
			Point p = base.Center.ToTileCoordinates();
			Vector2 vector = p.ToVector2();
			int num = 10;
			Vector2 zero = Vector2.Zero;
			int num2 = 0;
			float num3 = 3f;
			if (this.ai[1] == 1f)
			{
				SoundEngine.PlaySound(SoundID.Item28, new Vector2?(this.position), null);
				this.rotation = 0f;
				this.velocity.X = 0f;
				this.ai[1] = 2f;
			}
			this.frameCounter++;
			if (this.frameCounter > 4)
			{
				this.frameCounter = 0;
				this.frame++;
				if (this.frame >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			if (this.velocity.Length() > 1f && this.timeLeft % 10 == 0)
			{
				for (int i = p.X - num; i < p.X + num + 1; i++)
				{
					for (int j = p.Y - num; j < p.Y + num + 1; j++)
					{
						if (WorldGen.SolidTile(i, j, false))
						{
							Vector2 v = vector - new Vector2((float)i, (float)j);
							Vector2 vector2 = v.SafeNormalize(Vector2.Zero) * Math.Max((float)num - v.Length(), 0f);
							vector2 *= num3;
							zero += vector2;
							num2++;
						}
					}
				}
				if (num2 > 0)
				{
					zero /= (float)num2;
				}
				if (zero.Length() > 1f)
				{
					this.velocity = zero;
				}
			}
			this.velocity *= 0.95f;
			if (this.velocity.Length() < 1f)
			{
				this.velocity = Vector2.Zero;
				this.netUpdate = true;
			}
		}

		// Token: 0x06000D6B RID: 3435 RVA: 0x0034C948 File Offset: 0x0034AB48
		private void AI_169_Smolstars()
		{
			Player player = Main.player[this.owner];
			bool flag = this.type == 864;
			Vector2 vector = player.Top + new Vector2(0f, -30f);
			if (flag)
			{
				if (player.dead)
				{
					player.smolstar = false;
				}
				if (player.smolstar)
				{
					this.timeLeft = 2;
				}
				if (this.ai[0] == 0f)
				{
					int index;
					int totalIndexesInGroup;
					this.AI_GetMyGroupIndexAndFillBlackList(null, out index, out totalIndexesInGroup);
					float num2 = 6.2831855f / (float)totalIndexesInGroup;
					float num3 = (float)totalIndexesInGroup * 0.66f;
					Vector2 vector2 = new Vector2(30f, 6f) / 5f * (float)(totalIndexesInGroup - 1);
					Vector2 vector3 = Vector2.UnitY.RotatedBy((double)(num2 * (float)index + Main.GlobalTimeWrappedHourly % num3 / num3 * 6.2831855f), default(Vector2));
					vector += vector3 * vector2;
					vector.Y += player.gfxOffY;
					vector = vector.Floor();
				}
			}
			if (this.ai[0] == 0f)
			{
				Vector2 vector4 = vector - base.Center;
				float num4 = 10f;
				float lerpValue = Utils.GetLerpValue(200f, 600f, vector4.Length(), true);
				num4 += lerpValue * 30f;
				if (vector4.Length() >= 3000f)
				{
					base.Center = vector;
				}
				this.velocity = vector4;
				if (this.velocity.Length() > num4)
				{
					this.velocity *= num4 / this.velocity.Length();
				}
				int startAttackRange = 800;
				int attackTarget = -1;
				this.Minion_FindTargetInRange(startAttackRange, ref attackTarget, false, null);
				if (attackTarget != -1)
				{
					this.ai[0] = 60f;
					this.ai[1] = (float)attackTarget;
					this.netUpdate = true;
				}
				float targetAngle = this.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + 1.5707964f;
				if (vector4.Length() < 40f)
				{
					targetAngle = Vector2.UnitY.ToRotation() + 1.5707964f;
				}
				this.rotation = this.rotation.AngleLerp(targetAngle, 0.2f);
				return;
			}
			if (this.ai[0] == -1f)
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					for (int i = 0; i < 2; i++)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 15, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 0, default(Color), 1.4f);
						if (Main.rand.Next(3) != 0)
						{
							dust.scale *= 1.3f;
							dust.velocity *= 1.1f;
						}
						dust.noGravity = true;
						dust.fadeIn = 0f;
					}
					this.velocity += Main.rand.NextVector2CircularEdge(4f, 4f);
				}
				this.ai[1] += 1f;
				this.rotation += this.velocity.X * 0.1f + this.velocity.Y * 0.05f;
				this.velocity *= 0.92f;
				if (this.ai[1] >= 9f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				return;
			}
			NPC nPC = null;
			int num5 = (int)this.ai[1];
			if (Main.npc.IndexInRange(num5) && Main.npc[num5].CanBeChasedBy(this, false))
			{
				nPC = Main.npc[num5];
			}
			if (nPC == null)
			{
				this.ai[0] = -1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			else if (player.Distance(nPC.Center) >= 900f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			else
			{
				Vector2 vector5 = nPC.Center - base.Center;
				float num6 = 16f;
				this.velocity = vector5;
				if (this.velocity.Length() > num6)
				{
					this.velocity *= num6 / this.velocity.Length();
				}
				float targetAngle2 = this.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + 1.5707964f;
				this.rotation = this.rotation.AngleLerp(targetAngle2, 0.4f);
			}
			float num7 = 0.1f;
			float num8 = (float)(this.width * 5);
			for (int j = 0; j < 1000; j++)
			{
				if (j != this.whoAmI && Main.projectile[j].active && Main.projectile[j].owner == this.owner && Main.projectile[j].type == this.type && Math.Abs(this.position.X - Main.projectile[j].position.X) + Math.Abs(this.position.Y - Main.projectile[j].position.Y) < num8)
				{
					if (this.position.X < Main.projectile[j].position.X)
					{
						this.velocity.X = this.velocity.X - num7;
					}
					else
					{
						this.velocity.X = this.velocity.X + num7;
					}
					if (this.position.Y < Main.projectile[j].position.Y)
					{
						this.velocity.Y = this.velocity.Y - num7;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + num7;
					}
				}
			}
		}

		// Token: 0x06000D6C RID: 3436 RVA: 0x0034CF94 File Offset: 0x0034B194
		private void AI_019_Spears()
		{
			Player player = Main.player[this.owner];
			Vector2 center = player.RotatedRelativePoint(player.MountedCenter, false, true);
			this.direction = player.direction;
			player.heldProj = this.whoAmI;
			player.MatchItemTimeToItemAnimation();
			base.Center = center;
			bool flag = Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3;
			int itemAnimationMax = player.itemAnimationMax;
			int itemAnimation = player.itemAnimation;
			int num = Main.player[this.owner].itemAnimationMax / 3;
			float num2 = MathHelper.Min((float)itemAnimation, (float)num);
			float num3 = (float)itemAnimation - num2;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 0f;
			bool flag2 = false;
			this.spriteDirection = -this.direction;
			int num26 = this.type;
			if (num26 <= 212)
			{
				if (num26 <= 97)
				{
					if (num26 <= 64)
					{
						switch (num26)
						{
						case 46:
							num4 = 3f;
							num6 = 1.6f;
							num5 = 1.4f;
							goto IL_378;
						case 47:
							num4 = 4f;
							num6 = 1.2f;
							num5 = 0.9f;
							goto IL_378;
						case 48:
							goto IL_378;
						case 49:
							num4 = 4f;
							num6 = 1.1f;
							num5 = 0.85f;
							goto IL_378;
						default:
							if (num26 != 64)
							{
								goto IL_378;
							}
							break;
						}
					}
					else
					{
						if (num26 != 66 && num26 != 97)
						{
							goto IL_378;
						}
						goto IL_34C;
					}
				}
				else if (num26 <= 130)
				{
					if (num26 == 105)
					{
						num4 = 3f;
						num6 = 2.4f;
						num5 = 2.1f;
						goto IL_378;
					}
					if (num26 != 130)
					{
						goto IL_378;
					}
					num4 = 3f;
					num6 = 1.3f;
					num5 = 1f;
					goto IL_378;
				}
				else
				{
					if (num26 == 153)
					{
						num4 = 4f;
						num6 = 1.5f;
						num5 = 1.3f;
						goto IL_378;
					}
					if (num26 != 212)
					{
						goto IL_378;
					}
					goto IL_34C;
				}
			}
			else if (num26 <= 342)
			{
				if (num26 <= 218)
				{
					if (num26 != 215)
					{
						if (num26 != 218)
						{
							goto IL_378;
						}
						goto IL_34C;
					}
				}
				else
				{
					if (num26 == 222)
					{
						num4 = 3f;
						num6 = 2.4f;
						num5 = 2.1f;
						goto IL_378;
					}
					if (num26 != 342)
					{
						goto IL_378;
					}
					num4 = 3f;
					num6 = 2.4f;
					num5 = 2.1f;
					goto IL_378;
				}
			}
			else if (num26 <= 368)
			{
				if (num26 == 367)
				{
					num4 = 3f;
					num6 = 1.6f;
					num5 = 1.5f;
					goto IL_378;
				}
				if (num26 != 368)
				{
					goto IL_378;
				}
				num4 = 3f;
				num6 = 1.5f;
				num5 = 1.4f;
				goto IL_378;
			}
			else
			{
				if (num26 == 730)
				{
					num4 = 8f;
					num6 = 1.5f;
					num5 = 1.2f;
					goto IL_378;
				}
				if (num26 - 877 > 2)
				{
					goto IL_378;
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				num4 = 28f;
				num6 = 0.4f;
				num5 = 0.4f;
				flag2 = true;
				goto IL_378;
			}
			this.spriteDirection = -this.direction;
			num4 = 3f;
			num6 = 1.9f;
			num5 = 1.7f;
			goto IL_378;
			IL_34C:
			num4 = 3f;
			num6 = 2.1f;
			num5 = 1.9f;
			IL_378:
			float num7 = (float)(itemAnimationMax - num) - num3;
			float num8 = (float)num - num2;
			float num9 = num4 + num5 * num7 - num6 * num8;
			this.position += this.velocity * num9;
			num26 = this.type;
			if (num26 <= 130)
			{
				if (num26 != 47)
				{
					if (num26 == 130)
					{
						if ((this.localAI[0] == 0f || this.localAI[0] == 4f || this.localAI[0] == 8f || this.localAI[0] == 12f || this.localAI[0] == 16f || this.localAI[0] == 20f || this.localAI[0] == 24f) && this.owner == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0f, this.owner, 0f, 0f, 0f);
						}
						this.localAI[0] += 1f;
					}
				}
				else if (Main.player[this.owner].wet && Main.rand.Next(2) == 0)
				{
					int num10 = Dust.NewDust(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, 15, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num10].velocity *= 0.1f;
				}
			}
			else if (num26 != 222)
			{
				if (num26 != 342)
				{
					if (num26 == 730)
					{
						if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
						{
							this.localAI[0] = 1f;
							Vector2 vector = this.velocity * 4f;
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector.X, vector.Y, 732, (int)((double)this.damage * 1.5), this.knockBack * 0.5f, this.owner, 0f, 0f, 0f);
						}
					}
				}
				else if (flag && this.localAI[0] == 0f && Main.myPlayer == this.owner)
				{
					this.localAI[0] = 1f;
					if (Collision.CanHit(player.position, player.width, player.height, this.position, this.width, this.height))
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, this.damage, this.knockBack * 0.85f, this.owner, 0f, 0f, 0f);
					}
				}
			}
			else if (flag && this.localAI[0] == 0f && Main.myPlayer == this.owner)
			{
				this.localAI[0] = 1f;
				Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
			}
			if (flag2 && player.channel && player.itemAnimation < num)
			{
				player.SetDummyItemTime(num);
			}
			this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.5707964f + 0.7853982f;
			if (this.spriteDirection == -1)
			{
				this.rotation -= 1.5707964f;
			}
			Rectangle rectangle;
			this.AI_019_Spears_GetExtensionHitbox(out rectangle);
			if (this.type == 878 || this.type == 879)
			{
				float num11 = 6f;
				float num12 = 0.8f;
				float num13 = Vector2.Dot(this.velocity.SafeNormalize(Vector2.UnitX * (float)player.direction), player.velocity.SafeNormalize(Vector2.UnitX * (float)player.direction));
				float num14 = player.velocity.Length();
				if (num14 > num11 && num13 > num12)
				{
					int num15 = 8;
					if (num14 > num11 + 1f)
					{
						num15 = 5;
					}
					if (num14 > num11 + 2f)
					{
						num15 = 2;
					}
					int num16 = 14;
					int num17 = 27;
					int num18 = 4;
					if (this.type == 879)
					{
						num16 = 43;
						num17 = 57;
					}
					if (Main.rand.Next(num15 + 3) == 0)
					{
						Dust.NewDust(base.Center - new Vector2((float)num18, (float)num18), num18 * 2, num18 * 2, num16, 0f, 0f, 150, default(Color), 1.4f);
					}
					if (Main.rand.Next(num15) == 0)
					{
						int num19 = Dust.NewDust(base.Center - new Vector2((float)num18, (float)num18), num18 * 2, num18 * 2, num17, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
						Main.dust[num19].noGravity = true;
						Main.dust[num19].velocity *= 0.25f;
						num19 = Dust.NewDust(base.Center - new Vector2((float)num18, (float)num18), num18 * 2, num18 * 2, num17, 0f, 0f, 150, default(Color), 1.4f);
						Main.dust[num19].velocity *= 0.25f;
					}
				}
			}
			if (this.type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num20 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num20].noGravity = true;
				Main.dust[num20].velocity /= 2f;
				num20 = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Main.dust[num20].velocity /= 5f;
			}
			if (this.type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 150, default(Color), 0.5f);
					dust2.velocity.Y = dust2.velocity.Y - 0.5f;
				}
			}
			else if (this.type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num21 = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num21].velocity += this.velocity * 0.3f;
					Main.dust[num21].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num22 = Dust.NewDust(this.position, this.width, this.height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num22].velocity += this.velocity * 0.5f;
					Main.dust[num22].velocity *= 0.5f;
				}
			}
			else if (this.type == 153)
			{
				int num23 = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, default(Color), 1f);
				Main.dust[num23].noGravity = true;
				Main.dust[num23].fadeIn = 1.25f;
				Main.dust[num23].velocity *= 0.25f;
			}
			if (this.type == 342)
			{
				Lighting.AddLight(base.Center, 0.65f, 0.9f, 1f);
				if (this.timeLeft % 2 == 0)
				{
					int num24 = 10;
					int num25 = Dust.NewDust(this.position - this.velocity * 3f - new Vector2((float)num24, (float)num24), this.width + num24 * 2, this.height + num24 * 2, 135, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 50, default(Color), 1.2f);
					Main.dust[num25].velocity *= 0.5f;
					Main.dust[num25].velocity += this.velocity * 0.25f;
				}
			}
			this.ai[0] += 1f;
			bool flag3 = this.ai[0] >= (float)itemAnimationMax;
			if (flag2)
			{
				flag3 &= !player.channel;
			}
			if (flag3)
			{
				this.Kill();
			}
		}

		// Token: 0x06000D6D RID: 3437 RVA: 0x0034DF30 File Offset: 0x0034C130
		public bool AI_019_Spears_GetExtensionHitbox(out Rectangle extensionBox)
		{
			extensionBox = default(Rectangle);
			Player player = Main.player[this.owner];
			if (player.itemAnimation < player.itemAnimationMax / 3)
			{
				return false;
			}
			int itemAnimationMax = player.itemAnimationMax;
			float itemAnimation = (float)player.itemAnimation;
			int num = player.itemAnimationMax / 3;
			float num2 = Utils.Remap(itemAnimation, (float)itemAnimationMax, (float)num, 0f, 1f, true);
			float num3 = 10f;
			float num4 = 10f;
			int num9 = this.type;
			float num5;
			float num6;
			if (num9 != 46)
			{
				if (num9 != 105)
				{
					if (num9 != 153)
					{
						return false;
					}
					num5 = 40f;
					num6 = 10f;
				}
				else
				{
					num5 = 50f;
					num6 = 20f;
				}
			}
			else
			{
				num5 = 50f;
				num6 = 15f;
			}
			num5 *= 1f / player.inverseMeleeSpeed;
			float num7 = num3 + num5 * num2;
			float num8 = num4 + num6 * num2;
			float f = this.velocity.ToRotation();
			Vector2 center = base.Center + f.ToRotationVector2() * num7;
			extensionBox = Utils.CenteredRectangle(center, new Vector2(num8, num8));
			return true;
		}

		// Token: 0x06000D6E RID: 3438 RVA: 0x0034E05C File Offset: 0x0034C25C
		private void AI_019_Spears_Old()
		{
			Vector2 vector = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, false, true);
			this.direction = Main.player[this.owner].direction;
			Main.player[this.owner].heldProj = this.whoAmI;
			Main.player[this.owner].MatchItemTimeToItemAnimation();
			this.position.X = vector.X - (float)(this.width / 2);
			this.position.Y = vector.Y - (float)(this.height / 2);
			bool flag = Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3;
			if (!Main.player[this.owner].frozen)
			{
				if (this.type == 46)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.6f;
					}
					else
					{
						this.ai[0] += 1.4f;
					}
				}
				else if (this.type == 105)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 2.4f;
					}
					else
					{
						this.ai[0] += 2.1f;
					}
				}
				else if (this.type == 367)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.6f;
					}
					else
					{
						this.ai[0] += 1.5f;
					}
				}
				else if (this.type == 368)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.5f;
					}
					else
					{
						this.ai[0] += 1.4f;
					}
				}
				else if (this.type == 222)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 2.4f;
						if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
						{
							this.localAI[0] = 1f;
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
						}
					}
					else
					{
						this.ai[0] += 2.1f;
					}
				}
				else if (this.type == 342)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 2.4f;
						if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
						{
							this.localAI[0] = 1f;
							if (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, new Vector2(base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0]), this.width, this.height))
							{
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, (int)((double)this.damage * 0.8), this.knockBack * 0.85f, this.owner, 0f, 0f, 0f);
							}
						}
					}
					else
					{
						this.ai[0] += 2.1f;
					}
				}
				else if (this.type == 47)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 4f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.2f;
					}
					else
					{
						this.ai[0] += 0.9f;
					}
				}
				else if (this.type == 153)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 4f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.5f;
					}
					else
					{
						this.ai[0] += 1.3f;
					}
				}
				else if (this.type == 49)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 4f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.1f;
					}
					else
					{
						this.ai[0] += 0.85f;
					}
				}
				else if (this.type == 730)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 8f;
						this.netUpdate = true;
						if (this.localAI[0] == 0f && Main.myPlayer == this.owner)
						{
							this.localAI[0] = 1f;
							Vector2 vector2 = this.velocity * 4f;
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X + this.velocity.X * this.ai[0], base.Center.Y + this.velocity.Y * this.ai[0], vector2.X, vector2.Y, 732, (int)((double)this.damage * 1.25), this.knockBack * 0.5f, this.owner, 0f, 0f, 0f);
						}
					}
					if (flag)
					{
						this.ai[0] -= 1.5f;
					}
					else
					{
						this.ai[0] += 1.2f;
					}
				}
				else if (this.type == 64 || this.type == 215)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.9f;
					}
					else
					{
						this.ai[0] += 1.7f;
					}
				}
				else if (this.type == 66 || this.type == 97 || this.type == 212 || this.type == 218)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 2.1f;
					}
					else
					{
						this.ai[0] += 1.9f;
					}
				}
				else if (this.type == 130)
				{
					this.spriteDirection = -this.direction;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 3f;
						this.netUpdate = true;
					}
					if (flag)
					{
						this.ai[0] -= 1.3f;
					}
					else
					{
						this.ai[0] += 1f;
					}
				}
			}
			this.position += this.velocity * this.ai[0];
			if (this.type == 130)
			{
				if (this.ai[1] == 0f || this.ai[1] == 4f || this.ai[1] == 8f || this.ai[1] == 12f || this.ai[1] == 16f || this.ai[1] == 20f || this.ai[1] == 24f)
				{
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0f, this.owner, 0f, 0f, 0f);
				}
				this.ai[1] += 1f;
			}
			if (Main.player[this.owner].ItemAnimationEndingOrEnded)
			{
				this.Kill();
			}
			this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 2.355f;
			if (this.spriteDirection == -1)
			{
				this.rotation -= 1.57f;
			}
			if (this.type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num].noGravity = true;
				Dust dust = Main.dust[num];
				dust.velocity.X = dust.velocity.X / 2f;
				Dust dust2 = Main.dust[num];
				dust2.velocity.Y = dust2.velocity.Y / 2f;
				num = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Dust dust3 = Main.dust[num];
				dust3.velocity.X = dust3.velocity.X / 5f;
				Dust dust4 = Main.dust[num];
				dust4.velocity.Y = dust4.velocity.Y / 5f;
			}
			if (this.type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust5 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust5.noGravity = true;
					dust5.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust6 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 150, default(Color), 0.5f);
					dust6.velocity.Y = dust6.velocity.Y - 0.5f;
					return;
				}
			}
			else if (this.type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num2].velocity += this.velocity * 0.3f;
					Main.dust[num2].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num3].velocity += this.velocity * 0.5f;
					Main.dust[num3].velocity *= 0.5f;
					return;
				}
			}
			else if (this.type == 153)
			{
				int num4 = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, default(Color), 1f);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].fadeIn = 1.25f;
				Main.dust[num4].velocity *= 0.25f;
			}
		}

		// Token: 0x06000D6F RID: 3439 RVA: 0x0034EFC4 File Offset: 0x0034D1C4
		private void AI_168_FirstFractal()
		{
			float num = 60f;
			if ((this.localAI[0] += 1f) >= num - 1f)
			{
				this.Kill();
				return;
			}
			if (this.frameCounter == 0)
			{
				this.frameCounter = 1;
				this.frame = Main.rand.Next(15);
			}
			this.velocity = this.velocity.RotatedBy((double)this.ai[0], default(Vector2));
			this.Opacity = Utils.GetLerpValue(0f, 12f, this.localAI[0], true) * Utils.GetLerpValue(num, num - 12f, this.localAI[0], true);
			this.direction = ((this.velocity.X > 0f) ? 1 : -1);
			this.spriteDirection = this.direction;
			this.rotation = 0.7853982f * (float)this.spriteDirection + this.velocity.ToRotation();
			if (this.spriteDirection == -1)
			{
				this.rotation += 3.1415927f;
			}
			if (this.localAI[0] > 7f)
			{
				int num2 = 5;
				base.Center - new Vector2((float)num2);
				if (Main.rand.Next(15) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 278, null, 100, Color.Lerp(this.GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f), 1f);
					dust.scale = 0.7f;
					dust.noGravity = true;
					dust.velocity *= 0.5f;
					dust.velocity += this.velocity * 2f;
				}
			}
		}

		// Token: 0x06000D70 RID: 3440 RVA: 0x0034F19C File Offset: 0x0034D39C
		private void AI_167_SparkleGuitar()
		{
			float num = 90f;
			if ((this.localAI[0] += 1f) >= num - 1f)
			{
				this.Kill();
				return;
			}
			float num2 = this.localAI[0] / num;
			Vector2 center = Main.player[this.owner].Center;
			Vector2 vector;
			vector..ctor(this.ai[0], this.ai[1]);
			Vector2 vector2 = -this.velocity;
			Vector2 value = center + vector2 * 2f;
			Vector2 value2 = vector + vector2 * (1f - num2 * 3f);
			base.Center = Vector2.CatmullRom(value, center, vector, value2, num2);
			if (this.type == 856)
			{
				Lighting.AddLight(base.Center, Color.HotPink.ToVector3() * 0.3f);
				this.rotation = 6.2831855f * num2 * 1f;
			}
		}

		// Token: 0x06000D71 RID: 3441 RVA: 0x0034F2A0 File Offset: 0x0034D4A0
		private void AI_164_StormTigerGem()
		{
			Player player = Main.player[this.owner];
			if (this.type == 831)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					this.timeLeft = 2;
				}
				int num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 4)
				{
					this.frameCounter = 0;
					num = this.frame + 1;
					this.frame = num;
					if (num >= 6)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 970)
			{
				if (player.ownedProjectileCounts[this.type] > 1 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.AbigailUpgrade, new Vector2?(base.Center), null);
				}
				if (player.dead)
				{
					player.abigailMinion = false;
				}
				if (player.abigailMinion)
				{
					this.timeLeft = 2;
				}
				int num = this.frameCounter + 1;
				this.frameCounter = num;
				if (num >= 4)
				{
					this.frameCounter = 0;
					num = this.frame + 1;
					this.frame = num;
					if (num >= 6)
					{
						this.frame = 0;
					}
				}
			}
			List<int> ai164_blacklistedTargets = Projectile._ai164_blacklistedTargets;
			ai164_blacklistedTargets.Clear();
			int index;
			int totalIndexesInGroup;
			this.AI_GetMyGroupIndexAndFillBlackList(ai164_blacklistedTargets, out index, out totalIndexesInGroup);
			Vector2 center = Projectile.AI_164_GetHomeLocation(player, index, totalIndexesInGroup);
			base.Center = center;
		}

		// Token: 0x06000D72 RID: 3442 RVA: 0x0034F3F8 File Offset: 0x0034D5F8
		public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			vector.Y -= 2f;
			float num2 = master.miscCounterNormalized * 2f;
			int num3 = stackedIndex / 4;
			int num4 = totalIndexes / 4;
			if (totalIndexes % 4 > 0)
			{
				num4++;
			}
			int num5 = (totalIndexes - num3 * 4) % 4;
			if (num5 == 0)
			{
				num5 = 4;
			}
			if (num4 - 1 != num3)
			{
				num5 = 4;
			}
			int num6 = stackedIndex % num5;
			float num7 = (float)num6 / (float)num5;
			num2 += (float)num3 / 8f;
			if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
			{
				num2 = 0f;
				switch (num5)
				{
				case 1:
					num7 = 0f;
					break;
				case 2:
					num7 = 0.25f + (float)num6 * 0.5f;
					break;
				case 3:
					num7 = (float)(num6 - 1) / 6f;
					break;
				case 4:
					num7 = ((float)num6 - 1.5f) / 6f;
					break;
				}
			}
			Vector2 vector2 = new Vector2(0f, (float)(-8 - 12 * num3)).RotatedBy((double)((num2 + num7) * 6.2831855f), default(Vector2));
			vector += vector2 + new Vector2(0f, master.gravDir * -40f);
			Vector2 mountedCenter = master.MountedCenter;
			int direction = master.direction;
			Vector2 vec = mountedCenter + new Vector2(0f, master.gravDir * -21f) + vector;
			vec.Y += master.gfxOffY;
			return vec.Floor();
		}

		// Token: 0x06000D73 RID: 3443 RVA: 0x0034F598 File Offset: 0x0034D798
		private void AI_162_TigerPounce()
		{
			if (this.ai[0] < 0f)
			{
				this.Opacity = 0f;
				this.ai[0] += 1f;
				return;
			}
			bool flag = true;
			if (this.frameCounter == 0)
			{
				this.frameCounter = 1;
				this.localAI[0] = base.Center.X;
				this.localAI[1] = base.Center.Y;
				flag = true;
			}
			Vector2 vector;
			vector..ctor(this.localAI[0], this.localAI[1]);
			Vector2 vector2 = vector + this.velocity;
			float y = Vector2.Distance(vector, vector2) * 1.5f;
			float num = 0.1f;
			Vector2 vector5 = Vector2.Lerp(vector, vector2, 0f - num) + new Vector2(0f, y);
			Vector2 value2 = Vector2.Lerp(vector, vector2, 1f + num) + new Vector2(0f, y);
			if (this.Opacity < 1f)
			{
				this.Opacity += 0.1f;
			}
			int num2 = Math.Sign(vector2.X - vector.X);
			this.rotation += (float)num2 * -0.2f;
			this.spriteDirection = num2;
			if (this.ai[1] < 1f)
			{
				this.ai[1] = 60f;
			}
			this.ai[0] += 1f / this.ai[1];
			float num4 = Utils.Clamp<float>(this.ai[0], 0f, 1f);
			Vector2 vector3 = Vector2.CatmullRom(vector5, vector, vector2, value2, num4);
			if (flag)
			{
				for (float num3 = 0f; num3 < 1f; num3 += 0.5f)
				{
					if (Main.rand.Next(19) == 0)
					{
						Vector2 vector4 = base.Center + base.DirectionTo(vector3).SafeNormalize(Vector2.UnitY) * 100f;
						Dust dust = Dust.NewDustPerfect(base.Center + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 100, Color.White * 0.4f, 1f);
						dust.velocity.Y = dust.velocity.Y + -0.6f;
						dust.velocity += this.velocity * 0.1f;
						Main.rand.Next(5);
						dust.velocity = (vector4 - base.Center) * 0.05f;
						dust.fadeIn = 0f;
						dust.scale = 0.7f;
						dust.noGravity = true;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 269, 0f, 0f, 0, default(Color), 1f)];
					dust2.fadeIn = 0.7f;
					dust2.scale = 0.4f;
					dust2.velocity += this.velocity * 0.001f;
					dust2.noLight = true;
				}
			}
			base.Center = vector3;
			if (this.ai[0] >= 1f)
			{
				this.Kill();
			}
		}

		/// <summary>
		/// Used to adjust projectile properties immediately before the projectile becomes an explosion. This is called on projectiles using the <see cref="F:Terraria.ID.ProjAIStyleID.Explosive" /> aiStyle or projectiles that are contained in the <see cref="F:Terraria.ID.ProjectileID.Sets.Explosive" /> set. By defaults tileCollide is set to false and alpha is set to 255.
		/// <para /> Calls the <see cref="M:Terraria.ModLoader.ProjectileLoader.PrepareBombToBlow(Terraria.Projectile)" /> method.
		/// </summary>
		// Token: 0x06000D74 RID: 3444 RVA: 0x0034F91C File Offset: 0x0034DB1C
		public void PrepareBombToBlow()
		{
			this.tileCollide = false;
			if (this.type < (int)ProjectileID.Count)
			{
				this.ai[1] = 0f;
			}
			this.alpha = 255;
			if (this.type == 28 || this.type == 37 || this.type == 516 || this.type == 519)
			{
				this.Resize(128, 128);
				this.damage = 100;
				this.knockBack = 8f;
			}
			else if (this.type == 773)
			{
				this.Resize(48, 96);
				this.damage = 100;
				this.knockBack = 8f;
			}
			else if (this.type == 29 || this.type == 470 || this.type == 637)
			{
				this.Resize(250, 250);
				this.damage = 250;
				this.knockBack = 10f;
			}
			else if (this.type == 30 || this.type == 397 || this.type == 517 || this.type == 588)
			{
				this.Resize(128, 128);
				this.knockBack = 8f;
			}
			else if (this.type == 681)
			{
				this.Resize(80, 80);
				this.knockBack = 8f;
			}
			else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
			{
				this.Resize(48, 48);
				this.knockBack = 8f;
			}
			else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 338 || this.type == 339 || this.type == 930)
			{
				this.Resize(128, 128);
				this.knockBack = 8f;
			}
			else if (this.type == 794 || this.type == 797 || this.type == 795 || this.type == 798 || this.type == 793 || this.type == 796 || this.type == 808 || this.type == 808)
			{
				this.Resize(250, 250);
				this.knockBack = 12f;
			}
			else if (this.type == 776 || this.type == 780 || this.type == 777 || this.type == 781 || this.type == 778 || this.type == 782 || this.type == 803 || this.type == 804)
			{
				this.Resize(128, 128);
				this.knockBack = 12f;
			}
			else if (this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903 || this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904 || this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905 || this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906 || this.type == 910 || this.type == 911)
			{
				if (this.type == 903 || this.type == 904 || this.type == 905 || this.type == 906 || this.type == 910 || this.type == 911)
				{
					this.damage = 100;
				}
				this.Resize(48, 48);
				this.knockBack = 12f;
			}
			else if (this.type == 139 || this.type == 140 || this.type == 141 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 340 || this.type == 341)
			{
				this.Resize(200, 200);
				this.knockBack = 10f;
			}
			ProjectileLoader.PrepareBombToBlow(this);
		}

		// Token: 0x06000D75 RID: 3445 RVA: 0x0034FED0 File Offset: 0x0034E0D0
		private unsafe void AI_016()
		{
			if (this.wet && (this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906 || this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903 || this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904 || this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905))
			{
				this.timeLeft = 1;
			}
			if (this.type == 108 || this.type == 164 || this.type == 1002)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 3f)
				{
					this.Kill();
				}
			}
			if (this.type == 102)
			{
				int num = (int)(base.Center.X / 16f);
				int num2 = (int)(base.Center.Y / 16f);
				if (WorldGen.InWorld(num, num2, 0))
				{
					Tile tile = Main.tile[num, num2];
					if (tile != null && tile.active() && (TileID.Sets.Platforms[(int)(*tile.type)] || *tile.type == 380))
					{
						this.Kill();
						return;
					}
				}
			}
			if (this.type == 75)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(66, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && (base.Center - Main.player[i].Center).Length() < 40f)
					{
						this.Kill();
						return;
					}
				}
			}
			bool flag = false;
			if (this.type == 37 || this.type == 397 || this.type == 470 || this.type == 519 || this.type == 773 || this.type == 911)
			{
				try
				{
					int num3 = (int)(this.position.X / 16f) - 1;
					int num4 = (int)((this.position.X + (float)this.width) / 16f) + 2;
					int num5 = (int)(this.position.Y / 16f) - 1;
					int num6 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
					if (num3 < 0)
					{
						num3 = 0;
					}
					if (num4 > Main.maxTilesX)
					{
						num4 = Main.maxTilesX;
					}
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesY)
					{
						num6 = Main.maxTilesY;
					}
					Vector2 vector = default(Vector2);
					for (int j = num3; j < num4; j++)
					{
						for (int k = num5; k < num6; k++)
						{
							if (!(Main.tile[j, k] == null) && Main.tile[j, k].nactive() && Main.tileSolid[(int)(*Main.tile[j, k].type)] && !Main.tileSolidTop[(int)(*Main.tile[j, k].type)])
							{
								vector.X = (float)(j * 16);
								vector.Y = (float)(k * 16);
								if (this.position.X + (float)this.width - 4f > vector.X && this.position.X + 4f < vector.X + 16f && this.position.Y + (float)this.height - 4f > vector.Y && this.position.Y + 4f < vector.Y + 16f)
								{
									if (this.type == 911 && this.owner == Main.myPlayer && this.localAI[0] == 0f)
									{
										float num7 = 12f;
										Vector2 value = vector + new Vector2(8f, 8f);
										if (Vector2.Distance(base.Center, value) < num7)
										{
											base.Center += this.velocity.SafeNormalize(Vector2.Zero) * -4f;
										}
										this.localAI[0] = 1f;
										this.netUpdate = true;
									}
									this.velocity.X = 0f;
									this.velocity.Y = -0.2f;
									flag = true;
								}
							}
						}
					}
				}
				catch
				{
				}
			}
			if (flag && this.type == 911)
			{
				Point p = base.Center.ToTileCoordinates();
				if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(p.X, p.Y)))
				{
					Vector2 v = p.ToWorldCoordinates(8f, 8f) - base.Center;
					base.Center += v.SafeNormalize(Vector2.Zero) * -4f;
				}
			}
			if (flag && this.type == 773)
			{
				Player player = Main.player[this.owner];
				Vector2 v2 = base.DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * (float)player.direction);
				float num8 = this.rotation;
				float num9 = v2.ToRotation() + 1.5707964f;
				this.rotation = this.rotation.AngleLerp(num9, 0.2f);
				this.rotation = this.rotation.AngleTowards(num9, 0.05f);
				Vector2 vector2 = (this.rotation - 1.5707964f).ToRotationVector2();
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + vector2 * 10f, 59, new Vector2?(vector2 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f)), 0, default(Color), 2f);
					dust.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust.velocity *= 1.5f;
						dust.noGravity = false;
						dust.scale /= 2f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Point scarabBombDigDirectionSnap = this.GetScarabBombDigDirectionSnap8();
					Dust.NewDustPerfect(base.Center + vector2 * -10f, 59, new Vector2?(scarabBombDigDirectionSnap.ToVector2() * 1.5f), 0, default(Color), 2f).noGravity = true;
				}
				if (Main.rand.Next(15) == 0)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + vector2 * 10f, 88, new Vector2?(vector2 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f)), 0, default(Color), 2f);
					dust2.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust2.velocity *= 1.5f;
					}
				}
				bool flag2 = Main.rand.Next(30) == 0;
				if (num8 != this.rotation && Main.rand.Next(40) == 0)
				{
					flag2 = true;
				}
				if (flag2)
				{
					float num10 = 6.2831855f * Main.rand.NextFloat();
					for (float num11 = 0f; num11 < 1f; num11 += 0.14285715f)
					{
						Vector2 spinningpoint = (num11 * 6.2831855f + num10).ToRotationVector2();
						spinningpoint *= new Vector2(1f, 0.3f);
						spinningpoint = spinningpoint.RotatedBy((double)num9, default(Vector2));
						Dust dust5 = Dust.NewDustPerfect(base.Center + spinningpoint + vector2 * 8f, 59, new Vector2?(vector2 * 3f + spinningpoint), 0, default(Color), 1f);
						dust5.noGravity = true;
						dust5.fadeIn = 1.6f;
					}
				}
				int num30 = this.frameCounter + 1;
				this.frameCounter = num30;
				if (num30 >= 3)
				{
					this.frameCounter = 0;
					num30 = this.frame + 1;
					this.frame = num30;
					if (num30 >= 4)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 519)
			{
				this.localAI[1] += 1f;
				float num12 = 180f - this.localAI[1];
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				this.frameCounter++;
				if (num12 < 15f)
				{
					this.frameCounter++;
				}
				if ((float)this.frameCounter >= (num12 / 10f + 6f) / 2f)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 681 && this.localAI[1] == 0f)
			{
				this.localAI[1] = 1f;
			}
			int num13 = 6;
			if (this.type == 776 || this.type == 780 || this.type == 803 || this.type == 804)
			{
				num13 = 228;
			}
			else if (this.type == 784 || this.type == 805)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : Dust.dustWater());
			}
			else if (this.type == 787 || this.type == 806)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 35);
			}
			else if (this.type == 790 || this.type == 807)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 152);
			}
			if (this.type == 102)
			{
				if (this.velocity.Y > 10f)
				{
					this.velocity.Y = 10f;
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
				}
				this.frameCounter++;
				if (this.frameCounter > 3)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 1)
				{
					this.frame = 0;
				}
				if (this.velocity.Y == 0f)
				{
					this.position.X = this.position.X + (float)(this.width / 2);
					this.position.Y = this.position.Y + (float)(this.height / 2);
					this.width = 128;
					this.height = 128;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					this.damage = 40;
					this.knockBack = 8f;
					this.timeLeft = 3;
					this.netUpdate = true;
				}
			}
			if (this.type == 303 && this.timeLeft <= 3 && this.hostile)
			{
				this.position.X = this.position.X + (float)(this.width / 2);
				this.position.Y = this.position.Y + (float)(this.height / 2);
				this.width = 128;
				this.height = 128;
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
			}
			if (this.owner == Main.myPlayer && this.timeLeft <= 3)
			{
				this.PrepareBombToBlow();
			}
			else
			{
				if (this.type != 30 && this.type != 75 && this.type != 517 && this.type != 681 && this.type != 588 && this.type != 397 && this.type != 108 && this.type != 1002 && this.type != 133 && this.type != 134 && this.type != 135 && this.type != 136 && this.type != 137 && this.type != 138 && this.type != 139 && this.type != 140 && this.type != 141 && this.type != 142 && this.type != 143 && this.type != 144 && this.type != 164 && this.type != 303 && this.type != 338 && this.type != 339 && this.type != 340 && this.type != 341 && (this.type < 776 || this.type > 801) && (this.type < 803 || this.type > 810) && this.type != 862 && this.type != 863 && this.type != 930)
				{
					this.damage = 0;
				}
				if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
				{
					this.localAI[1] += 1f;
					if (this.localAI[1] > 6f)
					{
						this.alpha = 0;
					}
					else
					{
						this.alpha = (int)(255f - 42f * this.localAI[1]) + 100;
						if (this.alpha > 255)
						{
							this.alpha = 255;
						}
					}
					for (int l = 0; l < 2; l++)
					{
						float num14 = 0f;
						float num15 = 0f;
						if (l == 1)
						{
							num14 = this.velocity.X * 0.5f;
							num15 = this.velocity.Y * 0.5f;
						}
						if (this.localAI[1] > 9f)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num16 = Dust.NewDust(new Vector2(this.position.X + 3f + num14, this.position.Y + 3f + num15) - this.velocity * 0.5f, this.width - 8, this.height - 8, num13, 0f, 0f, 100, default(Color), 1f);
								Main.dust[num16].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
								Main.dust[num16].velocity *= 0.2f;
								Main.dust[num16].noGravity = true;
								if (Main.dust[num16].type == 152)
								{
									Main.dust[num16].scale *= 0.5f;
									Main.dust[num16].velocity += this.velocity * 0.1f;
								}
								else if (Main.dust[num16].type == 35)
								{
									Main.dust[num16].scale *= 0.5f;
									Main.dust[num16].velocity += this.velocity * 0.1f;
								}
								else if (Main.dust[num16].type == Dust.dustWater())
								{
									Main.dust[num16].scale *= 0.65f;
									Main.dust[num16].velocity += this.velocity * 0.1f;
								}
								if (this.type == 808 || this.type == 809)
								{
									Dust dust3 = Main.dust[num16];
									if (dust3.dustIndex != 6000)
									{
										dust3 = Dust.NewDustPerfect(dust3.position, dust3.type, new Vector2?(dust3.velocity), dust3.alpha, dust3.color, dust3.scale + 0.5f);
										dust3.velocity = Main.rand.NextVector2Circular(3f, 3f);
										dust3.noGravity = true;
									}
									if (dust3.dustIndex != 6000)
									{
										dust3 = Dust.NewDustPerfect(dust3.position, dust3.type, new Vector2?(dust3.velocity), dust3.alpha, dust3.color, dust3.scale + 0.5f);
										dust3.velocity = (6.2831855f * ((float)this.timeLeft / 20f)).ToRotationVector2() * 3f;
										dust3.noGravity = true;
									}
								}
							}
							if (Main.rand.Next(2) == 0)
							{
								int num17 = Dust.NewDust(new Vector2(this.position.X + 3f + num14, this.position.Y + 3f + num15) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
								Main.dust[num17].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
								Main.dust[num17].velocity *= 0.05f;
							}
						}
					}
					float x = this.position.X;
					float y = this.position.Y;
					float num18 = 600f;
					if (this.type == 930)
					{
						num18 = 650f;
					}
					bool flag3 = false;
					this.ai[0] += 1f;
					if (this.ai[0] > 30f)
					{
						this.ai[0] = 30f;
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].CanBeChasedBy(this, false))
							{
								float num19 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
								float num20 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
								float num21 = Math.Abs(this.position.X + (float)(this.width / 2) - num19) + Math.Abs(this.position.Y + (float)(this.height / 2) - num20);
								if (num21 < num18 && Collision.CanHit(this.position, this.width, this.height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
								{
									num18 = num21;
									x = num19;
									y = num20;
									flag3 = true;
								}
							}
						}
					}
					if (!flag3)
					{
						x = this.position.X + (float)(this.width / 2) + this.velocity.X * 100f;
						y = this.position.Y + (float)(this.height / 2) + this.velocity.Y * 100f;
					}
					float num22 = 16f;
					if (this.type == 930)
					{
						num22 = 12f;
					}
					Vector2 value2 = (new Vector2(x, y) - base.Center).SafeNormalize(-Vector2.UnitY) * num22;
					this.velocity = Vector2.Lerp(this.velocity, value2, 0.083333336f);
				}
				else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790)
				{
					if (Math.Abs(this.velocity.X) >= 8f || Math.Abs(this.velocity.Y) >= 8f)
					{
						for (int n = 0; n < 2; n++)
						{
							float num23 = 0f;
							float num24 = 0f;
							if (n == 1)
							{
								num23 = this.velocity.X * 0.5f;
								num24 = this.velocity.Y * 0.5f;
							}
							int num25 = Dust.NewDust(new Vector2(this.position.X + 3f + num23, this.position.Y + 3f + num24) - this.velocity * 0.5f, this.width - 8, this.height - 8, num13, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num25].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num25].velocity *= 0.2f;
							Main.dust[num25].noGravity = true;
							if (Main.dust[num25].type == 152)
							{
								Main.dust[num25].scale *= 0.5f;
								Main.dust[num25].velocity += this.velocity * 0.1f;
							}
							else if (Main.dust[num25].type == 35)
							{
								Main.dust[num25].scale *= 0.5f;
								Main.dust[num25].velocity += this.velocity * 0.1f;
							}
							else if (Main.dust[num25].type == Dust.dustWater())
							{
								Main.dust[num25].scale *= 0.65f;
								Main.dust[num25].velocity += this.velocity * 0.1f;
							}
							if (this.type == 793 || this.type == 796)
							{
								Dust dust4 = Main.dust[num25];
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, new Vector2?(dust4.velocity), dust4.alpha, dust4.color, dust4.scale);
									dust4.velocity = Main.rand.NextVector2Circular(3f, 3f);
									dust4.noGravity = true;
								}
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, new Vector2?(dust4.velocity), dust4.alpha, dust4.color, dust4.scale);
									dust4.velocity = (6.2831855f * ((float)this.timeLeft / 20f)).ToRotationVector2() * 3f;
									dust4.noGravity = true;
								}
							}
							num25 = Dust.NewDust(new Vector2(this.position.X + 3f + num23, this.position.Y + 3f + num24) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num25].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num25].velocity *= 0.05f;
						}
					}
					if (Math.Abs(this.velocity.X) < 15f && Math.Abs(this.velocity.Y) < 15f)
					{
						this.velocity *= 1.1f;
					}
				}
				else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142 || this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 791)
				{
					int num26 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num26].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num26].velocity *= 0.2f;
					Main.dust[num26].noGravity = true;
				}
				else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144 || this.type == 778 || this.type == 782 || this.type == 795 || this.type == 798 || this.type == 801 || this.type == 786 || this.type == 789 || this.type == 792)
				{
					if ((double)this.velocity.X > -0.2 && (double)this.velocity.X < 0.2 && (double)this.velocity.Y > -0.2 && (double)this.velocity.Y < 0.2)
					{
						this.alpha += 2;
						if (this.alpha > 200)
						{
							this.alpha = 200;
						}
					}
					else
					{
						this.alpha = 0;
						int num27 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 3f) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num27].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num27].velocity *= 0.05f;
						Main.dust[num27].noGravity = true;
					}
				}
				else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
				{
					if (Main.rand.Next(25) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(this.position, this.width, this.height, 228, (0f - this.velocity.X) / 10f, (0f - this.velocity.Y) / 10f, 100, default(Color), 1f);
						dust6.noGravity = true;
						dust6.velocity *= 0f;
						dust6.scale = 1.3f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Dust dust7 = Dust.NewDustDirect(this.position, this.width, this.height, 31, (0f - this.velocity.X) / 10f, (0f - this.velocity.Y) / 10f, 100, default(Color), 1f);
						dust7.noGravity = true;
						dust7.velocity *= 0f;
						dust7.scale = 1.3f;
					}
					if (this.frameCounter == 0)
					{
						this.frameCounter = 1;
						this.frame = Main.rand.Next(4);
					}
				}
				else if (this.type != 30 && this.type != 517 && this.type != 681 && this.type != 397 && this.type != 519 && this.type != 588 && this.type != 779 && this.type != 783 && this.type != 862 && this.type != 863 && Main.rand.Next(2) == 0)
				{
					int num28 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num28].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num28].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num28].noGravity = true;
					Main.dust[num28].position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
					int num29 = 6;
					if (this.type == 773)
					{
						num29 = 59;
					}
					if (this.type == 903)
					{
						num29 = Dust.dustWater();
					}
					if (this.type == 904)
					{
						num29 = 35;
					}
					if (this.type == 905)
					{
						num29 = 152;
					}
					if (this.type == 910 || this.type == 911)
					{
						num29 = 0;
					}
					Dust dust8 = Dust.NewDustDirect(this.position, this.width, this.height, num29, 0f, 0f, 100, default(Color), 1f);
					dust8.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust8.noGravity = true;
					dust8.position = base.Center + new Vector2(0f, (float)(-(float)this.height / 2 - 6)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
				}
				else if (this.type == 681)
				{
					Dust dust9 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
					dust9.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust9.noGravity = true;
					dust9.position = base.Center + new Vector2((float)(6 * Math.Sign(this.velocity.X)), (float)(-(float)this.height / 2 - 6)).RotatedBy((double)this.rotation, default(Vector2)) * 1.1f;
				}
			}
			this.ai[0] += 1f;
			if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
			{
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X)) - 1.57f;
				}
				else
				{
					this.spriteDirection = 1;
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790)
			{
				if (this.velocity != Vector2.Zero)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144 || this.type == 778 || this.type == 782 || this.type == 795 || this.type == 798 || this.type == 801 || this.type == 786 || this.type == 789 || this.type == 792)
			{
				this.velocity.Y = this.velocity.Y + 0.2f;
				this.velocity *= 0.97f;
				if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
				{
					this.velocity.X = 0f;
				}
				if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
				{
					this.velocity.Y = 0f;
				}
			}
			else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142 || this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 791)
			{
				if (this.ai[0] > 15f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					this.velocity.Y = this.velocity.Y + 0.2f;
				}
			}
			else if (((this.type == 30 || this.type == 397 || this.type == 517 || this.type == 681 || this.type == 588 || this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863) && this.ai[0] > 10f) || (this.type != 30 && this.type != 397 && this.type != 517 && this.type != 588 && this.type != 779 && this.type != 783 && this.type != 862 && this.type != 863 && this.ai[0] > 5f))
			{
				this.ai[0] = 10f;
				if (this.velocity.Y == 0f && this.velocity.X != 0f)
				{
					this.velocity.X = this.velocity.X * 0.97f;
					if (this.type == 29 || this.type == 470 || this.type == 637)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
					if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
					{
						this.velocity.X = 0f;
						this.netUpdate = true;
					}
				}
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.type == 911)
				{
					this.velocity.X = MathHelper.Clamp(this.velocity.X, -8f, 8f);
					this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -8f, 8f);
				}
			}
			if (this.type == 519)
			{
				this.rotation += this.velocity.X * 0.06f;
				return;
			}
			if (this.type != 134 && this.type != 137 && this.type != 140 && this.type != 143 && this.type != 303 && (this.type < 338 || this.type > 341) && this.type != 776 && this.type != 780 && this.type != 793 && this.type != 796 && this.type != 799 && this.type != 784 && this.type != 787 && this.type != 790 && this.type != 803 && this.type != 804 && this.type != 808 && this.type != 809 && this.type != 810 && this.type != 805 && this.type != 806 && this.type != 807 && this.type != 930)
			{
				this.rotation += this.velocity.X * 0.1f;
			}
		}

		// Token: 0x06000D76 RID: 3446 RVA: 0x00352B9C File Offset: 0x00350D9C
		private void AI_166_Dove()
		{
			bool flag = this.type == 855;
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				this.frame = Main.rand.Next(4);
			}
			int num2 = 4;
			if (flag)
			{
				num2 = 6;
			}
			int num5 = this.frameCounter + 1;
			this.frameCounter = num5;
			if (num5 > num2)
			{
				this.frameCounter = 0;
				num5 = this.frame + 1;
				this.frame = num5;
				if (num5 > 3)
				{
					this.frame = 0;
				}
			}
			this.spriteDirection = -1;
			if (this.velocity.X > 0f)
			{
				this.spriteDirection = 1;
			}
			if (flag)
			{
				float num3 = 1f - (float)this.alpha / 255f;
				Vector3 rgb = new Vector3(1f, 0.6f, 0.1f) * num3;
				Lighting.AddLight(base.Center, rgb);
				this.rotation = this.velocity.X * 0.2f;
				if (this.velocity.Y < -1f)
				{
					this.velocity.Y = this.velocity.Y * 0.99f;
				}
				else
				{
					this.velocity.Y = this.velocity.Y + (float)Math.Sin((double)((float)(this.timeLeft % 200) / 200f * 6.2831855f)) * 0.25f;
					if (this.velocity.Y > 0.5f)
					{
						this.velocity.Y = this.velocity.Y * 0.8f;
					}
					this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -1.5f, 1.5f);
				}
				float num4 = Main.WindForVisuals;
				if (num4 == 0f)
				{
					num4 = 0.1f;
				}
				this.velocity.X = this.velocity.X + 0.0525f * num4;
				this.velocity.X = MathHelper.Clamp(this.velocity.X, -2f, 2f);
			}
			else
			{
				this.rotation = this.velocity.X * 0.15f;
				this.velocity.Y = this.velocity.Y - 0.025f;
				if (this.velocity.Y < -3f)
				{
					this.velocity.Y = -3f;
				}
				this.velocity.X = MathHelper.Clamp(this.velocity.X, -5f, 5f);
			}
			if (this.timeLeft < 90)
			{
				this.alpha += 3;
			}
			if (this.alpha >= 255)
			{
				this.Kill();
			}
		}

		// Token: 0x06000D77 RID: 3447 RVA: 0x00352E34 File Offset: 0x00351034
		private void AI_161_RapierStabs()
		{
			Player player = Main.player[this.owner];
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
			this.ai[0] += 1f;
			float opacity = Utils.GetLerpValue(0f, 7f, this.ai[0], true) * Utils.GetLerpValue(16f, 12f, this.ai[0], true);
			this.Opacity = opacity;
			base.Center = player.RotatedRelativePoint(player.MountedCenter, false, false) + this.velocity * (this.ai[0] - 1f);
			this.spriteDirection = ((Vector2.Dot(this.velocity, Vector2.UnitX) >= 0f) ? 1 : -1);
			if (this.ai[0] >= 16f)
			{
				this.Kill();
				return;
			}
			player.heldProj = this.whoAmI;
		}

		// Token: 0x06000D78 RID: 3448 RVA: 0x00352F28 File Offset: 0x00351128
		private void AI_165_Whip()
		{
			Player player = Main.player[this.owner];
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
			this.ai[0] += 1f;
			float timeToFlyOut;
			int num11;
			float num12;
			Projectile.GetWhipSettings(this, out timeToFlyOut, out num11, out num12);
			base.Center = Main.GetPlayerArmPosition(this) + this.velocity * (this.ai[0] - 1f);
			this.spriteDirection = ((Vector2.Dot(this.velocity, Vector2.UnitX) >= 0f) ? 1 : -1);
			if (this.ai[0] >= timeToFlyOut)
			{
				this.Kill();
				return;
			}
			player.heldProj = this.whoAmI;
			player.MatchItemTimeToItemAnimation();
			if (this.ai[0] == (float)((int)(timeToFlyOut / 2f)))
			{
				this.WhipPointsForCollision.Clear();
				Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
				Vector2 vector = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1];
				SoundEngine.PlaySound(SoundID.Item153, new Vector2?(vector), null);
			}
			num11 = this.type;
			switch (num11)
			{
			case 847:
			{
				float t2 = this.ai[0] / timeToFlyOut;
				if (Utils.GetLerpValue(0.1f, 0.7f, t2, true) * Utils.GetLerpValue(0.9f, 0.7f, t2, true) > 0.5f && Main.rand.Next(3) != 0)
				{
					this.WhipPointsForCollision.Clear();
					Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
					int num2 = Main.rand.Next(this.WhipPointsForCollision.Count - 10, this.WhipPointsForCollision.Count);
					Rectangle r2 = Utils.CenteredRectangle(this.WhipPointsForCollision[num2], new Vector2(30f, 30f));
					int num3 = 57;
					if (Main.rand.Next(3) == 0)
					{
						num3 = 43;
					}
					Dust dust5 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, num3, 0f, 0f, 100, Color.White, 1f);
					dust5.position = this.WhipPointsForCollision[num2];
					dust5.fadeIn = 0.3f;
					Vector2 spinningpoint = this.WhipPointsForCollision[num2] - this.WhipPointsForCollision[num2 - 1];
					dust5.noGravity = true;
					dust5.velocity *= 0.5f;
					dust5.velocity += spinningpoint.RotatedBy((double)((float)player.direction * 1.5707964f), default(Vector2));
					dust5.velocity *= 0.5f;
					return;
				}
				break;
			}
			case 848:
			{
				float t3 = this.ai[0] / timeToFlyOut;
				float num4 = Utils.GetLerpValue(0.1f, 0.7f, t3, true) * Utils.GetLerpValue(0.9f, 0.7f, t3, true);
				if (num4 > 0.1f && Main.rand.NextFloat() < num4 / 2f)
				{
					this.WhipPointsForCollision.Clear();
					Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
					Rectangle r3 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					int num5 = Dust.NewDust(r3.TopLeft(), r3.Width, r3.Height, 172, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num5].noGravity = true;
					Dust dust6 = Main.dust[num5];
					dust6.velocity.X = dust6.velocity.X / 2f;
					Dust dust7 = Main.dust[num5];
					dust7.velocity.Y = dust7.velocity.Y / 2f;
					return;
				}
				break;
			}
			case 849:
			{
				float num6 = this.ai[0] / timeToFlyOut;
				Utils.GetLerpValue(0.1f, 0.7f, num6, true);
				Utils.GetLerpValue(0.9f, 0.7f, num6, true);
				if (num6 > 0.4f && Main.rand.Next(9) != 0)
				{
					this.WhipPointsForCollision.Clear();
					Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
					Rectangle r4 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector2 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust8 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 191, 0f, 0f, 0, default(Color), 1.3f);
					dust8.noGravity = true;
					dust8.velocity += vector2 * 2f;
					if (Main.rand.Next(2) == 0)
					{
						ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
						{
							MovementVector = vector2,
							PositionInWorld = r4.Center.ToVector2()
						}, new int?(this.owner));
					}
					Lighting.AddLight(r4.Center.ToVector2(), new Vector3(0.2f, 0f, 0.4f));
					return;
				}
				break;
			}
			default:
				switch (num11)
				{
				case 912:
				{
					float t4 = this.ai[0] / timeToFlyOut;
					float num7 = Utils.GetLerpValue(0.1f, 0.7f, t4, true) * Utils.GetLerpValue(0.9f, 0.7f, t4, true);
					if (num7 > 0.1f && Main.rand.NextFloat() < num7 / 2f)
					{
						this.WhipPointsForCollision.Clear();
						Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
						Rectangle r5 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
						Vector2 vector3 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
						for (int i = 0; i < 3; i++)
						{
							Dust dust9 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 16, 0f, 0f, 0, default(Color), 1.2f);
							dust9.noGravity = true;
							dust9.velocity += vector3 * 2f;
						}
						for (int j = 0; j < 1; j++)
						{
							Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 13, 0f, 0f, 0, default(Color), 0.8f).velocity += vector3 * 2f;
						}
						for (int k = 0; k < 3; k++)
						{
							if (Main.rand.Next(2) != 0)
							{
								Dust dust10 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 261, 0f, 0f, 0, Color.Transparent, 0.8f);
								dust10.velocity += vector3 * 2f;
								dust10.velocity *= 0.3f;
								dust10.noGravity = true;
							}
						}
						Lighting.AddLight(r5.Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
						return;
					}
					break;
				}
				case 913:
				{
					float t5 = this.ai[0] / timeToFlyOut;
					float num8 = Utils.GetLerpValue(0.1f, 0.7f, t5, true) * Utils.GetLerpValue(0.9f, 0.7f, t5, true);
					if (num8 > 0.1f && Main.rand.NextFloat() < num8)
					{
						this.WhipPointsForCollision.Clear();
						Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
						Rectangle r6 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(20f, 20f));
						Vector2 vector4 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
						for (int l = 0; l < 3; l++)
						{
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(7) == 0)
								{
									Dust dust11 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 31, 0f, 0f, 0, default(Color), 1f);
									dust11.velocity.X = dust11.velocity.X / 2f;
									dust11.velocity.Y = dust11.velocity.Y / 2f;
									dust11.velocity += vector4 * 2f;
									dust11.fadeIn = 1f + Main.rand.NextFloat() * 0.6f;
									dust11.noGravity = true;
								}
								else
								{
									Dust dust2 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 6, 0f, 0f, 0, default(Color), 1.2f);
									dust2.velocity += vector4 * 2f;
									if (Main.rand.Next(3) != 0)
									{
										dust2.fadeIn = 0.7f + Main.rand.NextFloat() * 0.9f;
										dust2.scale = 0.6f;
										dust2.noGravity = true;
									}
								}
							}
						}
					}
					break;
				}
				case 914:
				{
					float t6 = this.ai[0] / timeToFlyOut;
					float num9 = Utils.GetLerpValue(0.1f, 0.7f, t6, true) * Utils.GetLerpValue(0.9f, 0.7f, t6, true);
					if (num9 > 0.1f && Main.rand.NextFloat() < num9 / 2f)
					{
						this.WhipPointsForCollision.Clear();
						Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
						Rectangle r7 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
						Vector2 vector5 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
						Dust dust12 = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 39, 0f, 0f, 0, default(Color), 1.2f);
						dust12.noGravity = (Main.rand.Next(3) == 0);
						dust12.velocity += vector5 * 2f;
						return;
					}
					break;
				}
				case 915:
				{
					float t7 = this.ai[0] / timeToFlyOut;
					if (Utils.GetLerpValue(0.1f, 0.7f, t7, true) * Utils.GetLerpValue(0.9f, 0.7f, t7, true) > 0.1f)
					{
						this.WhipPointsForCollision.Clear();
						Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
						Rectangle r8 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
						Vector2 vector6 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
						Dust dust3 = Dust.NewDustDirect(r8.TopLeft(), r8.Width, r8.Height, 267, 0f, 0f, 0, Main.hslToRgb(player.miscCounterNormalized * 9f % 1f, 1f, 0.5f, byte.MaxValue), 1.3f);
						dust3.velocity *= Main.rand.NextFloat() * 0.8f;
						dust3.noGravity = true;
						dust3.scale = 0.9f + Main.rand.NextFloat() * 0.9f;
						dust3.fadeIn = Main.rand.NextFloat() * 0.9f;
						dust3.velocity += vector6 * 2f;
						if (dust3.dustIndex != 6000)
						{
							Dust dust13 = Dust.CloneDust(dust3);
							dust13.scale /= 2f;
							dust13.fadeIn *= 0.85f;
							dust13.color = new Color(255, 255, 255, 255);
							return;
						}
					}
					break;
				}
				default:
				{
					if (num11 != 952)
					{
						return;
					}
					float t8 = this.ai[0] / timeToFlyOut;
					float num10 = Utils.GetLerpValue(0.1f, 0.7f, t8, true) * Utils.GetLerpValue(0.9f, 0.7f, t8, true);
					if (num10 > 0.15f && Main.rand.NextFloat() < num10)
					{
						this.WhipPointsForCollision.Clear();
						Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
						Rectangle r9 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
						Vector2 vector7 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
						Dust dust4 = Dust.NewDustDirect(r9.TopLeft(), r9.Width, r9.Height, 26, 0f, 0f, 0, default(Color), 0.7f);
						dust4.noGravity = (Main.rand.Next(3) == 0);
						if (dust4.noGravity)
						{
							dust4.scale += 0.4f;
						}
						dust4.velocity += vector7 * 2f;
						return;
					}
					break;
				}
				}
				break;
			}
		}

		// Token: 0x06000D79 RID: 3449 RVA: 0x00353E04 File Offset: 0x00352004
		public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
		{
			float timeToFlyOut;
			int segments;
			float rangeMultiplier;
			Projectile.GetWhipSettings(proj, out timeToFlyOut, out segments, out rangeMultiplier);
			float num = proj.ai[0] / timeToFlyOut;
			float num2 = 0.5f;
			float num3 = 1f + num2;
			float num4 = 31.415928f * (1f - num * num3) * (float)(-(float)proj.spriteDirection) / (float)segments;
			float num5 = num * num3;
			float num6 = 0f;
			if (num5 > 1f)
			{
				num6 = (num5 - 1f) / num2;
				num5 = MathHelper.Lerp(1f, 0f, num6);
			}
			float num7 = proj.ai[0] - 1f;
			Player player = Main.player[proj.owner];
			Item heldItem = Main.player[proj.owner].HeldItem;
			num7 = (float)(ContentSamples.ItemsByType[heldItem.type].useAnimation * 2) * num * player.whipRangeMultiplier;
			float num8 = proj.velocity.Length() * num7 * num5 * rangeMultiplier / (float)segments;
			float num9 = 1f;
			Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
			Vector2 vector = playerArmPosition;
			float num10 = -1.5707964f;
			Vector2 vector2 = vector;
			float num11 = 1.5707964f + 1.5707964f * (float)proj.spriteDirection;
			Vector2 vector3 = vector;
			float num12 = 1.5707964f;
			controlPoints.Add(playerArmPosition);
			for (int i = 0; i < segments; i++)
			{
				float num13 = (float)i / (float)segments;
				float num14 = num4 * num13 * num9;
				Vector2 vector4 = vector + num10.ToRotationVector2() * num8;
				Vector2 vector5 = vector3 + num12.ToRotationVector2() * (num8 * 2f);
				Vector2 vector7 = vector2 + num11.ToRotationVector2() * (num8 * 2f);
				float num15 = 1f - num5;
				float num16 = 1f - num15 * num15;
				Vector2 value = Vector2.Lerp(vector5, vector4, num16 * 0.9f + 0.1f);
				Vector2 vector6 = Vector2.Lerp(vector7, value, num16 * 0.7f + 0.3f);
				Vector2 spinningpoint = playerArmPosition + (vector6 - playerArmPosition) * new Vector2(1f, num3);
				float num17 = num6;
				num17 *= num17;
				Vector2 item = spinningpoint.RotatedBy((double)(proj.rotation + 4.712389f * num17 * (float)proj.spriteDirection), playerArmPosition);
				controlPoints.Add(item);
				num10 += num14;
				num12 += num14;
				num11 += num14;
				vector = vector4;
				vector3 = vector5;
				vector2 = vector7;
			}
		}

		// Token: 0x06000D7A RID: 3450 RVA: 0x00354074 File Offset: 0x00352274
		public static void GetWhipSettings(Projectile proj, out float timeToFlyOut, out int segments, out float rangeMultiplier)
		{
			timeToFlyOut = (float)(Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates);
			segments = proj.WhipSettings.Segments;
			rangeMultiplier = proj.WhipSettings.RangeMultiplier;
		}

		// Token: 0x06000D7B RID: 3451 RVA: 0x003540AC File Offset: 0x003522AC
		private static void VanillaWhipSettings(Projectile proj, out int segments, out float rangeMultiplier)
		{
			segments = 20;
			rangeMultiplier = 1f;
			int num = proj.type;
			if (num <= 849)
			{
				if (num == 841)
				{
					rangeMultiplier *= 0.75f;
					return;
				}
				switch (num)
				{
				case 847:
					segments = 20;
					rangeMultiplier *= 1.75f;
					return;
				case 848:
					segments = 40;
					rangeMultiplier = 1.6f;
					return;
				case 849:
					segments = 30;
					rangeMultiplier = 2.15f;
					return;
				default:
					return;
				}
			}
			else
			{
				switch (num)
				{
				case 912:
					rangeMultiplier *= 1.5f;
					return;
				case 913:
					rangeMultiplier *= 1.4f;
					return;
				case 914:
					rangeMultiplier *= 1f;
					return;
				case 915:
					segments = 40;
					rangeMultiplier = 2.2f;
					return;
				default:
					if (num != 952)
					{
						return;
					}
					rangeMultiplier *= 0.95f;
					return;
				}
			}
		}

		// Token: 0x06000D7C RID: 3452 RVA: 0x00354184 File Offset: 0x00352384
		private void AI_160_Kites()
		{
			Player player = Main.player[this.owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, false, true);
			this.timeLeft = 60;
			bool flag = false;
			if (player.CCed || player.noItems)
			{
				flag = true;
			}
			else if (player.inventory[player.selectedItem].shoot != this.type)
			{
				flag = true;
			}
			else if (player.pulley)
			{
				flag = true;
			}
			else if (player.dead)
			{
				flag = true;
			}
			if (!flag)
			{
				flag = ((player.Center - base.Center).Length() > 2000f);
			}
			if (flag)
			{
				this.Kill();
				return;
			}
			float num = 4f;
			float num2 = 500f;
			float num3 = num2 / 2f;
			if (this.owner == Main.myPlayer && this.extraUpdates == 0)
			{
				float num14 = this.ai[0];
				if (this.ai[0] == 0f)
				{
					this.ai[0] = num3;
				}
				float num4 = this.ai[0];
				if (Main.mouseRight)
				{
					num4 -= 5f;
				}
				if (Main.mouseLeft)
				{
					num4 += 5f;
				}
				this.ai[0] = MathHelper.Clamp(num4, num, num2);
				if (num14 != num4)
				{
					this.netUpdate = true;
				}
			}
			if (this.numUpdates == 1)
			{
				this.extraUpdates = 0;
			}
			int num5 = 0;
			float cloudAlpha = Main.cloudAlpha;
			float num6 = 0f;
			if (WorldGen.InAPlaceWithWind(this.position, this.width, this.height))
			{
				num6 = Main.WindForVisuals;
			}
			float num7 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(num6), true) * 0.5f;
			if (num5 != 0)
			{
				if (num5 == 1)
				{
					Vector2 vector2 = base.DirectionTo(vector);
					this.velocity = Vector2.Lerp(this.velocity, vector2 * 16f, 1f);
					if (base.Distance(vector) < 10f && this.owner == Main.myPlayer)
					{
						this.Kill();
						return;
					}
				}
			}
			else
			{
				Vector2 mouseWorld = Main.MouseWorld;
				mouseWorld = base.Center;
				mouseWorld += new Vector2(num6, (float)Math.Sin((double)Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
				Vector2 v = mouseWorld - base.Center;
				v = v.SafeNormalize(Vector2.Zero) * (3f + cloudAlpha * 7f);
				if (num7 == 0f)
				{
					v = this.velocity;
				}
				float num8 = base.Distance(mouseWorld);
				float lerpValue = Utils.GetLerpValue(5f, 10f, num8, true);
				float y = this.velocity.Y;
				if (num8 > 10f)
				{
					this.velocity = Vector2.Lerp(this.velocity, v, 0.075f * lerpValue);
				}
				this.velocity.Y = y;
				this.velocity.Y = this.velocity.Y - num7;
				this.velocity.Y = this.velocity.Y + (0.02f + num7 * 0.25f);
				this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -2f, 2f);
				if (base.Center.Y + this.velocity.Y < mouseWorld.Y)
				{
					this.velocity.Y = MathHelper.Lerp(this.velocity.Y, this.velocity.Y + num7 + 0.01f, 0.75f);
				}
				this.velocity.X = this.velocity.X * 0.98f;
				float num9 = base.Distance(vector);
				float num10 = this.ai[0];
				if (num9 > num10)
				{
					Vector2 vector3 = base.DirectionTo(vector);
					float num11 = num9 - num10;
					base.Center += vector3 * num11;
					bool flag2 = Vector2.Dot(vector3, Vector2.UnitY) < 0.8f || num7 > 0f;
					this.velocity.Y = this.velocity.Y + vector3.Y * 0.05f;
					if (flag2)
					{
						this.velocity.Y = this.velocity.Y - 0.15f;
					}
					this.velocity.X = this.velocity.X + vector3.X * 0.2f;
					if (num10 == num && this.owner == Main.myPlayer)
					{
						this.Kill();
						return;
					}
				}
			}
			this.timeLeft = 2;
			Vector2 vector4 = base.Center - vector;
			int dir = (vector4.X > 0f) ? 1 : -1;
			if (Math.Abs(vector4.X) > Math.Abs(vector4.Y) / 2f)
			{
				player.ChangeDir(dir);
			}
			Vector2 vector5 = base.DirectionTo(vector).SafeNormalize(Vector2.Zero);
			if (num7 == 0f && this.velocity.Y > -0.02f)
			{
				this.rotation *= 0.95f;
			}
			else
			{
				float num12 = (-vector5).ToRotation() + 0.7853982f;
				if (this.spriteDirection == -1)
				{
					num12 -= 1.5707964f * (float)player.direction;
				}
				this.rotation = num12 + this.velocity.X * 0.05f;
			}
			float num13 = this.velocity.Length();
			int num15 = this.type;
			if (num15 != 771)
			{
				switch (num15)
				{
				case 822:
				case 823:
				case 827:
				case 830:
				case 838:
				case 843:
				case 844:
				case 845:
				case 846:
				case 850:
				case 852:
					goto IL_5E2;
				case 824:
				case 839:
				case 840:
				case 853:
					if (num7 < 0.15f)
					{
						this.frame = 0;
						goto IL_6B1;
					}
					this.frameCounter++;
					if ((float)this.frameCounter > (1f - num7) * 10f)
					{
						this.frameCounter = 0;
						this.frame = Main.rand.Next(4);
						goto IL_6B1;
					}
					goto IL_6B1;
				case 826:
					this.frame = (int)this.ai[1];
					goto IL_6B1;
				case 828:
				case 829:
					if (num13 < 6f)
					{
						this.frame = 1;
						goto IL_6B1;
					}
					this.frame = 0;
					goto IL_6B1;
				}
				if (num13 < 3f)
				{
					this.frame = 0;
					goto IL_6B1;
				}
				if (num13 < 5f)
				{
					this.frame = 1;
					goto IL_6B1;
				}
				if (num13 < 7f)
				{
					this.frame = 2;
					goto IL_6B1;
				}
				this.frame = 3;
				goto IL_6B1;
			}
			IL_5E2:
			this.frame = 0;
			IL_6B1:
			this.spriteDirection = player.direction;
		}

		// Token: 0x06000D7D RID: 3453 RVA: 0x00354850 File Offset: 0x00352A50
		private void AI_159_PaperAirplanes()
		{
			if (this.ai[1] == 0f)
			{
				this.direction = ((this.velocity.X > 0f) ? 1 : -1);
				this.rotation = this.velocity.ToRotation();
				this.ai[1] = 1f;
				this.ai[0] = (float)(-(float)Main.rand.Next(30, 80));
				this.netUpdate = true;
			}
			if (this.wet && this.owner == Main.myPlayer)
			{
				this.Kill();
			}
			this.ai[0] += 1f;
			Vector2 vector = this.rotation.ToRotationVector2() * 8f;
			float y = (float)Math.Sin((double)(6.2831855f * (float)(Main.timeForVisualEffects % 90.0 / 90.0))) * (float)this.direction * Main.WindForVisuals;
			Vector2 v = vector + new Vector2(Main.WindForVisuals, y);
			Vector2.UnitX * (float)this.direction;
			bool flag = this.direction == Math.Sign(Main.WindForVisuals) && this.velocity.Length() > 3f;
			bool flag2 = this.ai[0] >= 20f && this.ai[0] <= 69f;
			if (this.ai[0] == 70f)
			{
				this.ai[0] = (float)(-(float)Main.rand.Next(120, 600));
			}
			bool flag3 = flag2 && flag;
			if (flag3)
			{
				float lerpValue = Utils.GetLerpValue(0f, 30f, this.ai[0], true);
				v = vector.RotatedBy((double)((float)(-(float)this.direction) * 6.2831855f * 0.02f * lerpValue), default(Vector2));
			}
			this.velocity = v.SafeNormalize(Vector2.UnitY) * this.velocity.Length();
			if (!flag3)
			{
				float num3 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
				if (this.timeLeft % 40 < 20)
				{
					this.velocity.Y = this.velocity.Y - num3;
				}
				else
				{
					this.velocity.Y = this.velocity.Y + num3;
				}
				if (this.velocity.Y < -2f)
				{
					this.velocity.Y = -2f;
				}
				if (this.velocity.Y > 2f)
				{
					this.velocity.Y = 2f;
				}
				this.velocity.X = MathHelper.Clamp(this.velocity.X + Main.WindForVisuals * 0.006f, -6f, 6f);
				if (this.velocity.X * this.oldVelocity.X < 0f)
				{
					this.direction *= -1;
					this.ai[0] = (float)(-(float)Main.rand.Next(120, 300));
					this.netUpdate = true;
				}
			}
			this.rotation = this.velocity.ToRotation();
			this.spriteDirection = this.direction;
		}

		// Token: 0x06000D7E RID: 3454 RVA: 0x00354B78 File Offset: 0x00352D78
		private void AI_158_BabyBird()
		{
			Player player = Main.player[this.owner];
			int num12;
			if (this.type == 759)
			{
				if (player.dead)
				{
					player.babyBird = false;
				}
				if (player.babyBird)
				{
					this.timeLeft = 2;
				}
				num12 = this.frameCounter + 1;
				this.frameCounter = num12;
				if (num12 >= 6)
				{
					this.frameCounter = 0;
					num12 = this.frame + 1;
					this.frame = num12;
					if (num12 >= Main.projFrames[this.type] - 1)
					{
						this.frame = 0;
					}
				}
			}
			float num = 6f;
			float num2 = 8f;
			int num3 = 800;
			float num4 = 150f;
			int attackTarget = -1;
			this.Minion_FindTargetInRange(num3, ref attackTarget, false, null);
			if (attackTarget != -1)
			{
				NPC nPC = Main.npc[attackTarget];
				if (player.Distance(nPC.Center) > (float)num3)
				{
					attackTarget = -1;
				}
			}
			if (attackTarget != -1)
			{
				if (!Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.tileCollide = true;
				}
				NPC nPC2 = Main.npc[attackTarget];
				float num5 = base.Distance(nPC2.Center);
				Rectangle rectangle;
				rectangle..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
				Rectangle value;
				value..ctor((int)nPC2.position.X, (int)nPC2.position.Y, nPC2.width, nPC2.height);
				if (rectangle.Intersects(value))
				{
					this.tileCollide = false;
					if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num2)
					{
						this.velocity *= 1.1f;
					}
					if (this.velocity.Length() > num2)
					{
						this.velocity *= num2 / this.velocity.Length();
					}
				}
				else if (num5 > num4)
				{
					Vector2 vector = base.DirectionTo(nPC2.Center);
					this.velocity = Vector2.Lerp(this.velocity, vector * num, 0.15f);
				}
				else
				{
					this.tileCollide = false;
					Vector2 vector2 = base.DirectionTo(nPC2.Center);
					this.velocity += new Vector2((float)Math.Sign(vector2.X), (float)Math.Sign(vector2.Y)) * 0.35f;
					if (this.velocity.Length() > num2)
					{
						this.velocity *= num2 / this.velocity.Length();
					}
				}
				float num6 = 0.025f;
				float num7 = (float)(this.width * 3);
				for (int i = 0; i < 1000; i++)
				{
					if (i != this.whoAmI && Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].type == this.type && Math.Abs(this.position.X - Main.projectile[i].position.X) + Math.Abs(this.position.Y - Main.projectile[i].position.Y) < num7)
					{
						if (this.position.X < Main.projectile[i].position.X)
						{
							this.velocity.X = this.velocity.X - num6;
						}
						else
						{
							this.velocity.X = this.velocity.X + num6;
						}
						if (this.position.Y < Main.projectile[i].position.Y)
						{
							this.velocity.Y = this.velocity.Y - num6;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + num6;
						}
					}
				}
				this.rotation = this.velocity.X * 0.1f;
				this.direction = ((this.velocity.X > 0f) ? 1 : -1);
				this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1);
				return;
			}
			this.tileCollide = false;
			List<int> ai158_blacklistedTargets = Projectile._ai158_blacklistedTargets;
			ai158_blacklistedTargets.Clear();
			int index;
			this.AI_GetMyGroupIndexAndFillBlackList(ai158_blacklistedTargets, out index, out num12);
			this.localAI[0] = (float)index;
			Vector2 vector3 = Projectile.AI_158_GetHomeLocation(player, index);
			float num8 = base.Distance(vector3);
			bool flag = player.gravDir > 0f && player.fullRotation == 0f && player.headRotation == 0f;
			if (num8 > 2000f)
			{
				base.Center = vector3;
				this.frame = Main.projFrames[this.type] - 1;
				this.frameCounter = 0;
				this.velocity = Vector2.Zero;
				num12 = (this.spriteDirection = player.direction);
				this.direction = num12;
				this.rotation = 0f;
				return;
			}
			if (num8 > 40f)
			{
				float num9 = num + num8 * 0.006f;
				Vector2 vector4 = base.DirectionTo(vector3);
				vector4 *= MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, num8, true));
				this.velocity = Vector2.Lerp(this.velocity, vector4 * num9, 0.025f);
				if (this.velocity.Length() > num9)
				{
					this.velocity *= num9 / this.velocity.Length();
				}
				float num10 = 0.05f;
				float num11 = (float)this.width;
				for (int j = 0; j < 1000; j++)
				{
					if (j != this.whoAmI && Main.projectile[j].active && Main.projectile[j].owner == this.owner && Main.projectile[j].type == this.type && Math.Abs(this.position.X - Main.projectile[j].position.X) + Math.Abs(this.position.Y - Main.projectile[j].position.Y) < num11)
					{
						if (this.position.X < Main.projectile[j].position.X)
						{
							this.velocity.X = this.velocity.X - num10;
						}
						else
						{
							this.velocity.X = this.velocity.X + num10;
						}
						if (this.position.Y < Main.projectile[j].position.Y)
						{
							this.velocity.Y = this.velocity.Y - num10;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + num10;
						}
					}
				}
				this.rotation = this.velocity.X * 0.04f;
				this.direction = ((this.velocity.X > 0f) ? 1 : -1);
				this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1);
				return;
			}
			if (num8 > 8f + player.velocity.Length())
			{
				Vector2 vector5 = base.DirectionTo(vector3);
				this.velocity += new Vector2((float)Math.Sign(vector5.X), (float)Math.Sign(vector5.Y)) * 0.05f;
				if (this.velocity.Length() > num)
				{
					this.velocity *= num / this.velocity.Length();
				}
				this.rotation = this.velocity.X * 0.1f;
				this.direction = ((this.velocity.X > 0f) ? 1 : -1);
				this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1);
				return;
			}
			if (flag)
			{
				base.Center = vector3;
				this.frame = Main.projFrames[this.type] - 1;
				this.frameCounter = 0;
				this.velocity = Vector2.Zero;
				num12 = (this.spriteDirection = player.direction);
				this.direction = num12;
				this.rotation = 0f;
			}
		}

		// Token: 0x06000D7F RID: 3455 RVA: 0x003553E4 File Offset: 0x003535E4
		public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			vector.Y -= 2f;
			if (master.mount.Active && master.mount.Type == 52)
			{
				vector.Y += 6f;
				vector.X -= (float)(master.direction * 10);
			}
			switch (stackedIndex % 6)
			{
			case 1:
				vector += new Vector2((float)(master.direction * 8), master.gravDir * -2f);
				break;
			case 2:
				vector += new Vector2((float)(master.direction * -10), master.gravDir * -2f);
				break;
			case 3:
			{
				Vector2 vector2 = vector;
				int direction = master.direction;
				vector = vector2 + new Vector2(0f, master.gravDir * -10f);
				break;
			}
			case 4:
				vector += new Vector2((float)(master.direction * 10), master.gravDir * -10f);
				break;
			case 5:
				vector += new Vector2((float)(master.direction * -12), master.gravDir * -10f);
				break;
			}
			vector += new Vector2(0f, master.gravDir * -16f) * (float)(stackedIndex / 6);
			Vector2 vector3 = master.RotatedRelativePoint(master.MountedCenter, false, true);
			int direction2 = master.direction;
			return (vector3 + new Vector2(0f, master.gravDir * -21f) + vector).Floor();
		}

		// Token: 0x06000D80 RID: 3456 RVA: 0x003555A8 File Offset: 0x003537A8
		public void Minion_FindTargetInRange(int startAttackRange, ref int attackTarget, bool skipIfCannotHitWithOwnBody, Func<Entity, int, bool> customEliminationCheck = null)
		{
			float num = (float)startAttackRange;
			float num2 = num;
			float num3 = num;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			float num4;
			float num5;
			bool flag;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false) && this.IsInRangeOfMeOrMyOwner(ownerMinionAttackTargetNPC, num, out num4, out num5, out flag))
			{
				attackTarget = ownerMinionAttackTargetNPC.whoAmI;
				return;
			}
			if (attackTarget >= 0)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				float myDistance2;
				float playerDistance2;
				bool closerIsMe2;
				if (nPC.CanBeChasedBy(this, false) && this.IsInRangeOfMeOrMyOwner(nPC, num, out myDistance2, out playerDistance2, out closerIsMe2) && (!skipIfCannotHitWithOwnBody || this.CanHitWithOwnBody(nPC)) && (customEliminationCheck == null || customEliminationCheck(nPC, attackTarget)))
				{
					attackTarget = i;
					float num6 = closerIsMe2 ? myDistance2 : playerDistance2;
					if (num2 > myDistance2)
					{
						num2 = myDistance2;
					}
					if (num3 > playerDistance2)
					{
						num3 = playerDistance2;
					}
					num = Math.Max(num2, num3);
				}
			}
		}

		// Token: 0x06000D81 RID: 3457 RVA: 0x0035566E File Offset: 0x0035386E
		private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget)
		{
			return true;
		}

		// Token: 0x06000D82 RID: 3458 RVA: 0x00355674 File Offset: 0x00353874
		private bool AI_067_TigerSpecialAttack()
		{
			List<NPC> list = new List<NPC>();
			Vector2 center = Main.player[this.owner].Center;
			Rectangle value = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
			int num = Main.player[this.owner].ownedProjectileCounts[831] + 1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false) && nPC.Hitbox.Intersects(value))
				{
					list.Add(nPC);
				}
			}
			if (list.Count == 0)
			{
				return false;
			}
			NPC nPC2 = list[0];
			for (int j = 1; j < list.Count; j++)
			{
				if (Vector2.Distance(nPC2.Center, center) > Vector2.Distance(list[j].Center, center))
				{
					nPC2 = list[j];
				}
			}
			list.Remove(nPC2);
			NPC nPC3 = null;
			if (list.Count > 0)
			{
				nPC3 = list[0];
				for (int k = 1; k < list.Count; k++)
				{
					if (base.Distance(nPC3.Center) > base.Distance(list[k].Center))
					{
						nPC3 = list[k];
					}
				}
				list.Remove(nPC3);
			}
			List<Vector2> list2 = new List<Vector2>();
			if (nPC3 != null)
			{
				list2.Add(nPC3.Center);
			}
			int num2 = 0;
			while (list.Count > 0 && list2.Count < num - 1)
			{
				int index = Main.rand.Next(list.Count);
				Vector2 vector = list[index].velocity * 4f * (float)(num2 + 1);
				list2.Add(list[index].Center + vector);
				list.RemoveAt(index);
				num2++;
			}
			if (nPC2 != null)
			{
				list2.Add(nPC2.Center);
			}
			if (list2.Count > 0 && Collision.SolidCollision(list2[list2.Count - 1] - base.Size / 2f, this.width, this.height))
			{
				list2.Add(center);
			}
			Vector2 vector2 = base.Center;
			float num3 = (float)Math.Min(20, 30 / list2.Count);
			float num4 = 0f;
			for (int l = 0; l < list2.Count; l++)
			{
				float num5 = 20f;
				Vector2 vector3 = list2[l];
				vector3.X += ((vector2.X < vector3.X) ? num5 : (0f - num5));
				Vector2 vector4 = vector3 - vector2;
				int num6 = (int)Math.Min((double)num3, 4.0 + Math.Ceiling((double)(vector4.Length() / 50f)));
				if (num6 < 5)
				{
					num6 = 5;
				}
				Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2, vector4, 818, this.damage, 0f, this.owner, (0f - num4) * 4f, (float)(num6 * 4), 0f);
				vector2 = vector3;
				num4 += (float)num6;
			}
			base.Center = vector2;
			this.ai[0] = 4f;
			this.ai[1] = num4;
			this.netUpdate = true;
			return true;
		}

		// Token: 0x06000D83 RID: 3459 RVA: 0x003559DC File Offset: 0x00353BDC
		private unsafe void AI_067_FreakingPirates()
		{
			Player player = Main.player[this.owner];
			if (!player.active)
			{
				this.active = false;
				return;
			}
			bool flag = this.type == 393 || this.type == 394 || this.type == 395;
			bool flag2 = this.type == 758;
			bool flag3 = this.type == 833 || this.type == 834 || this.type == 835;
			bool flag4 = this.type == 834 || this.type == 835;
			bool flag5 = this.type == 951;
			int num = 450;
			float num2 = 500f;
			float num3 = 300f;
			int num4 = 15;
			if (flag5)
			{
				if (player.dead)
				{
					player.flinxMinion = false;
				}
				if (player.flinxMinion)
				{
					this.timeLeft = 2;
				}
				num = 800;
			}
			if (flag)
			{
				if (player.dead)
				{
					player.pirateMinion = false;
				}
				if (player.pirateMinion)
				{
					this.timeLeft = 2;
				}
				num = 800;
			}
			if (flag3)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					this.timeLeft = 2;
				}
				num = 800;
				if (this.ai[0] != 4f)
				{
					if (this.velocity != Vector2.Zero && Main.rand.Next(18) == 0)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 269, 0f, 0f, 0, default(Color), 1f)];
						dust.fadeIn = 0.5f;
						dust.scale = 0.3f;
						dust.noLight = true;
						dust.velocity += this.velocity * 0.005f;
					}
					if (this.type == 833)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.5f);
					}
					if (this.type == 834)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.8f);
					}
					if (this.type == 835)
					{
						Lighting.AddLight(base.Center, Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f).ToVector3() * 1f);
					}
				}
				if (this.owner == Main.myPlayer)
				{
					if (this.localAI[0] <= 0f)
					{
						int num53 = this.type;
						int num5;
						if (num53 != 834)
						{
							if (num53 != 835)
							{
								num5 = 360;
							}
							else
							{
								num5 = 240;
							}
						}
						else
						{
							num5 = 300;
						}
						if (this.damage != 0)
						{
							bool flag6 = this.AI_067_TigerSpecialAttack();
							this.localAI[0] = (float)(flag6 ? num5 : 10);
						}
					}
					else
					{
						this.localAI[0] -= 1f;
					}
				}
			}
			if (flag2)
			{
				if (player.dead)
				{
					player.vampireFrog = false;
				}
				if (player.vampireFrog)
				{
					this.timeLeft = 2;
				}
				num = 800;
			}
			if (this.type == 500)
			{
				num2 = 200f;
				if (player.dead)
				{
					player.crimsonHeart = false;
				}
				if (player.crimsonHeart)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 653)
			{
				num2 = 300f;
				if (player.dead)
				{
					player.companionCube = false;
				}
				if (player.companionCube)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 1018)
			{
				num2 = 200f;
				if (player.dead)
				{
					player.petFlagDirtiestBlock = false;
				}
				if (player.petFlagDirtiestBlock)
				{
					this.timeLeft = 2;
				}
			}
			if (flag3 && this.ai[0] == 4f)
			{
				this.velocity = Vector2.Zero;
				this.frame = 9;
				if (flag4)
				{
					this.frame = 11;
				}
				this.ai[1] -= 1f;
				if (this.ai[1] > 0f)
				{
					return;
				}
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			Vector2 vector = player.Center;
			if (flag5)
			{
				vector.X -= (float)((45 + player.width / 2) * player.direction);
				vector.X -= (float)(this.minionPos * 30 * player.direction);
			}
			else if (flag)
			{
				vector.X -= (float)((15 + player.width / 2) * player.direction);
				vector.X -= (float)(this.minionPos * 20 * player.direction);
			}
			else if (flag3)
			{
				vector.X -= (float)((15 + player.width / 2) * player.direction);
				vector.X -= (float)(this.minionPos * 40 * player.direction);
			}
			else if (flag2)
			{
				vector.X -= (float)((35 + player.width / 2) * player.direction);
				vector.X -= (float)(this.minionPos * 40 * player.direction);
			}
			else if (this.type == 500)
			{
				vector.X -= (float)((15 + player.width / 2) * player.direction);
				vector.X -= (float)(40 * player.direction);
			}
			else if (this.type == 1018)
			{
				vector.X = player.Center.X;
			}
			else if (this.type == 653)
			{
				vector.X = player.Center.X;
			}
			if (this.type == 500)
			{
				Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
				int num6 = 6;
				if (this.frame == 0 || this.frame == 2)
				{
					num6 = 12;
				}
				int num53 = this.frameCounter + 1;
				this.frameCounter = num53;
				if (num53 >= num6)
				{
					this.frameCounter = 0;
					num53 = this.frame + 1;
					this.frame = num53;
					if (num53 >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				this.rotation += this.velocity.X / 20f;
				Vector2 vector2 = (-Vector2.UnitY).RotatedBy((double)this.rotation, default(Vector2)).RotatedBy((double)((float)this.direction * 0.2f), default(Vector2));
				int num7 = Dust.NewDust(base.Center + vector2 * 10f - new Vector2(4f), 0, 0, 5, vector2.X, vector2.Y, 0, Color.Transparent, 1f);
				Main.dust[num7].scale = 1f;
				Main.dust[num7].velocity = vector2.RotatedByRandom(0.7853981852531433) * 3.5f;
				Main.dust[num7].noGravity = true;
				Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
			}
			if (this.type == 1018)
			{
				this.rotation += this.velocity.X / 20f;
			}
			if (this.type == 653)
			{
				this.rotation += this.velocity.X / 20f;
				bool flag7 = this.owner >= 0 && this.owner < 255;
				if (flag7)
				{
					Projectile._CompanionCubeScreamCooldown[this.owner] -= 1f;
					if (Projectile._CompanionCubeScreamCooldown[this.owner] < 0f)
					{
						Projectile._CompanionCubeScreamCooldown[this.owner] = 0f;
					}
				}
				Tile tileSafely = Framing.GetTileSafely(base.Center);
				if (*tileSafely.liquid > 0 && tileSafely.lava())
				{
					this.localAI[0] += 1f;
				}
				else
				{
					this.localAI[0] -= 1f;
				}
				this.localAI[0] = MathHelper.Clamp(this.localAI[0], 0f, 20f);
				if (this.localAI[0] >= 20f)
				{
					if (flag7 && Projectile._CompanionCubeScreamCooldown[this.owner] == 0f)
					{
						Projectile._CompanionCubeScreamCooldown[this.owner] = 3600f;
						SoundStyle soundStyle = (Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59;
						SoundEngine.PlaySound(soundStyle, new Vector2?(this.position), null);
					}
					this.Kill();
				}
				if (flag7 && this.owner == Main.myPlayer && Main.netMode != 2)
				{
					Vector3 vector3 = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16).ToVector3();
					Vector3 vector4 = Lighting.GetColor((int)player.Center.X / 16, (int)player.Center.Y / 16).ToVector3();
					if (vector3.Length() < 0.15f && vector4.Length() < 0.15f)
					{
						this.localAI[1] += 1f;
					}
					else if (this.localAI[1] > 0f)
					{
						this.localAI[1] -= 1f;
					}
					this.localAI[1] = MathHelper.Clamp(this.localAI[1], -3600f, 120f);
					if (this.localAI[1] > (float)Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
					{
						if (Main.rand.Next(5) == 0)
						{
							SoundEngine.PlaySound(SoundID.Item16, new Vector2?(base.Center), null);
							this.localAI[1] = -600f;
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item1, new Vector2?(base.Center), null);
							player.Hurt(PlayerDeathReason.ByOther(6, -1), 3, 0, false, false, -1, true, 0f, 0f, 4.5f);
							player.immune = false;
							player.immuneTime = 0;
							this.localAI[1] = (float)(-300 + Main.rand.Next(30) * -10);
						}
					}
				}
			}
			bool flag8 = true;
			if (this.type == 500 || this.type == 653 || this.type == 1018)
			{
				flag8 = false;
			}
			this.shouldFallThrough = (player.position.Y + (float)player.height - 12f > this.position.Y + (float)this.height);
			this.friendly = false;
			int num8 = 0;
			int num9 = 15;
			int attackTarget = -1;
			bool flag9 = true;
			bool flag10 = this.ai[0] == 5f;
			if (flag5)
			{
				flag9 = false;
				this.friendly = true;
			}
			if (flag2)
			{
				this.friendly = true;
				num9 = 20;
				num8 = 60;
			}
			if (flag3)
			{
				flag9 = false;
				this.friendly = true;
				this.originalDamage = player.highestStormTigerGemOriginalDamage;
			}
			bool flag11 = this.ai[0] == 0f;
			if (flag3 && flag10)
			{
				flag11 = true;
			}
			if (flag11 && flag8)
			{
				this.Minion_FindTargetInRange(num, ref attackTarget, true, new Func<Entity, int, bool>(this.AI_067_CustomEliminationCheck_Pirates));
			}
			if (flag3 && flag10)
			{
				if (attackTarget < 0)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					return;
				}
				float maxDistance = (float)num;
				NPC nPC = Main.npc[attackTarget];
				vector = nPC.Center;
				float num54;
				float num55;
				bool flag16;
				if (!this.IsInRangeOfMeOrMyOwner(nPC, maxDistance, out num54, out num55, out flag16))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					return;
				}
				Point point = nPC.Top.ToTileCoordinates();
				int num10 = 0;
				int num11 = point.Y;
				while (num10 < num4)
				{
					Tile tile = Main.tile[point.X, num11];
					if (tile == null || tile.active())
					{
						break;
					}
					num10++;
					num11++;
				}
				int num12 = num4 / 2;
				if (num10 < num12)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					return;
				}
				if (base.Hitbox.Intersects(nPC.Hitbox) && this.velocity.Y >= 0f)
				{
					this.velocity.Y = -8f;
					this.velocity.X = (float)(this.direction * 10);
				}
				float num13 = 20f;
				float maxAmountAllowedToMove = 4f;
				float num14 = 40f;
				float num15 = 40f;
				Vector2 top = nPC.Top;
				float num16 = (float)Math.Cos(Main.timeForVisualEffects / (double)num14 * 6.2831854820251465);
				if (num16 > 0f)
				{
					num16 *= -1f;
				}
				num16 *= num15;
				top.Y += num16;
				Vector2 vector5 = top - base.Center;
				if (vector5.Length() > num13)
				{
					vector5 = vector5.SafeNormalize(Vector2.Zero) * num13;
				}
				this.velocity = this.velocity.MoveTowards(vector5, maxAmountAllowedToMove);
				this.frame = 8;
				if (flag4)
				{
					this.frame = 10;
				}
				this.rotation += 0.6f * (float)this.spriteDirection;
				return;
			}
			else
			{
				if (this.ai[0] == 1f)
				{
					this.tileCollide = false;
					float num17 = 0.2f;
					float num18 = 10f;
					int num19 = 200;
					if (num18 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
					{
						num18 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
					}
					Vector2 vector6 = player.Center - base.Center;
					float num56 = vector6.Length();
					if (num56 > 2000f)
					{
						this.position = player.Center - new Vector2((float)this.width, (float)this.height) / 2f;
					}
					if (num56 < (float)num19 && player.velocity.Y == 0f && this.position.Y + (float)this.height <= player.position.Y + (float)player.height && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[0] = 0f;
						this.netUpdate = true;
						if (this.velocity.Y < -6f)
						{
							this.velocity.Y = -6f;
						}
					}
					if (num56 >= 60f)
					{
						vector6.Normalize();
						vector6 *= num18;
						if (this.velocity.X < vector6.X)
						{
							this.velocity.X = this.velocity.X + num17;
							if (this.velocity.X < 0f)
							{
								this.velocity.X = this.velocity.X + num17 * 1.5f;
							}
						}
						if (this.velocity.X > vector6.X)
						{
							this.velocity.X = this.velocity.X - num17;
							if (this.velocity.X > 0f)
							{
								this.velocity.X = this.velocity.X - num17 * 1.5f;
							}
						}
						if (this.velocity.Y < vector6.Y)
						{
							this.velocity.Y = this.velocity.Y + num17;
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + num17 * 1.5f;
							}
						}
						if (this.velocity.Y > vector6.Y)
						{
							this.velocity.Y = this.velocity.Y - num17;
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - num17 * 1.5f;
							}
						}
					}
					if (this.velocity.X != 0f)
					{
						this.spriteDirection = Math.Sign(this.velocity.X);
					}
					if (flag5)
					{
						this.frameCounter++;
						if (this.frameCounter > 3)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 2 || this.frame >= Main.projFrames[this.type])
						{
							this.frame = 2;
						}
						this.rotation = this.rotation.AngleTowards(this.rotation + 0.25f * (float)this.spriteDirection, 0.25f);
					}
					if (flag)
					{
						this.frameCounter++;
						if (this.frameCounter > 3)
						{
							this.frame++;
							this.frameCounter = 0;
						}
						if (this.frame < 10 | this.frame > 13)
						{
							this.frame = 10;
						}
						this.rotation = this.velocity.X * 0.1f;
					}
					if (flag2)
					{
						int num20 = 3;
						int num53 = this.frameCounter + 1;
						this.frameCounter = num53;
						if (num53 >= num20 * 4)
						{
							this.frameCounter = 0;
						}
						this.frame = 14 + this.frameCounter / num20;
						this.rotation = this.velocity.X * 0.15f;
					}
					if (flag3)
					{
						this.frame = 8;
						if (flag4)
						{
							this.frame = 10;
						}
						this.rotation += 0.6f * (float)this.spriteDirection;
					}
					if (this.type == 1018 && Main.LocalPlayer.miscCounter % 3 == 0)
					{
						int num21 = 2;
						Dust dust2 = Main.dust[Dust.NewDust(this.position + new Vector2((float)(-(float)num21), (float)(-(float)num21)), 16 + num21 * 2, 16 + num21 * 2, 0, 0f, 0f, 0, default(Color), 0.8f)];
						dust2.velocity = -this.velocity * 0.25f;
						dust2.velocity = dust2.velocity.RotatedByRandom(0.2617993950843811);
					}
				}
				if (this.ai[0] == 2f && this.ai[1] < 0f)
				{
					this.friendly = false;
					this.ai[1] += 1f;
					if (num9 >= 0)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						this.netUpdate = true;
						return;
					}
				}
				else if (this.ai[0] == 2f)
				{
					this.spriteDirection = this.direction;
					this.rotation = 0f;
					if (flag)
					{
						this.friendly = true;
						this.frame = 4 + (int)((float)num9 - this.ai[1]) / (num9 / 3);
						if (this.velocity.Y != 0f)
						{
							this.frame += 3;
						}
					}
					if (flag2)
					{
						float num22 = ((float)num9 - this.ai[1]) / (float)num9;
						if ((double)num22 > 0.25 && (double)num22 < 0.75)
						{
							this.friendly = true;
						}
						int num23 = (int)(num22 * 5f);
						if (num23 > 2)
						{
							num23 = 4 - num23;
						}
						if (this.velocity.Y != 0f)
						{
							this.frame = 21 + num23;
						}
						else
						{
							this.frame = 18 + num23;
						}
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.8f;
						}
					}
					this.velocity.Y = this.velocity.Y + 0.4f;
					if (this.velocity.Y > 10f)
					{
						this.velocity.Y = 10f;
					}
					this.ai[1] -= 1f;
					if (this.ai[1] <= 0f)
					{
						if (num8 <= 0)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
							this.netUpdate = true;
							return;
						}
						this.ai[1] = (float)(-(float)num8);
					}
				}
				if (attackTarget >= 0)
				{
					float maxDistance2 = (float)num;
					float num24 = 20f;
					if (flag2)
					{
						num24 = 50f;
					}
					NPC nPC2 = Main.npc[attackTarget];
					Vector2 center = nPC2.Center;
					vector = center;
					float num54;
					float num55;
					bool flag16;
					if (this.IsInRangeOfMeOrMyOwner(nPC2, maxDistance2, out num55, out num54, out flag16))
					{
						this.shouldFallThrough = (nPC2.Center.Y > base.Bottom.Y);
						bool flag12 = this.velocity.Y == 0f;
						if (this.wet && this.velocity.Y > 0f && !this.shouldFallThrough)
						{
							flag12 = true;
						}
						if (center.Y < base.Center.Y - 30f && flag12)
						{
							double num57 = (double)((center.Y - base.Center.Y) * -1f);
							float num25 = 0.4f;
							float num26 = (float)Math.Sqrt(num57 * (double)2f * (double)num25);
							if (num26 > 26f)
							{
								num26 = 26f;
							}
							this.velocity.Y = 0f - num26;
						}
						if (flag9 && Vector2.Distance(base.Center, vector) < num24)
						{
							if (this.velocity.Length() > 10f)
							{
								this.velocity /= this.velocity.Length() / 10f;
							}
							this.ai[0] = 2f;
							this.ai[1] = (float)num9;
							this.netUpdate = true;
							this.direction = ((center.X - base.Center.X > 0f) ? 1 : -1);
						}
						if (flag3)
						{
							Point point2 = nPC2.Top.ToTileCoordinates();
							int num27 = 0;
							int num28 = point2.Y;
							while (num27 < num4)
							{
								Tile tile2 = Main.tile[point2.X, num28];
								if (tile2 == null || tile2.active())
								{
									break;
								}
								num27++;
								num28++;
							}
							if (num27 >= num4)
							{
								this.ai[0] = 5f;
								this.ai[1] = 0f;
								this.netUpdate = true;
								return;
							}
							if (base.Hitbox.Intersects(nPC2.Hitbox) && this.velocity.Y >= 0f)
							{
								this.velocity.Y = -4f;
								this.velocity.X = (float)(this.direction * 10);
							}
						}
					}
					if (flag2)
					{
						int num29 = 1;
						if (center.X - base.Center.X < 0f)
						{
							num29 = -1;
						}
						vector.X += (float)(20 * -(float)num29);
					}
				}
				if (this.ai[0] == 0f && attackTarget < 0)
				{
					if (Main.player[this.owner].rocketDelay2 > 0)
					{
						this.ai[0] = 1f;
						this.netUpdate = true;
					}
					Vector2 vector7 = player.Center - base.Center;
					if (vector7.Length() > 2000f)
					{
						this.position = player.Center - new Vector2((float)this.width, (float)this.height) / 2f;
					}
					else if (vector7.Length() > num2 || Math.Abs(vector7.Y) > num3)
					{
						this.ai[0] = 1f;
						this.netUpdate = true;
						if (this.velocity.Y > 0f && vector7.Y < 0f)
						{
							this.velocity.Y = 0f;
						}
						if (this.velocity.Y < 0f && vector7.Y > 0f)
						{
							this.velocity.Y = 0f;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					if (attackTarget < 0)
					{
						if (base.Distance(player.Center) > 60f && base.Distance(vector) > 60f && Math.Sign(vector.X - player.Center.X) != Math.Sign(base.Center.X - player.Center.X))
						{
							vector = player.Center;
						}
						Rectangle r = Utils.CenteredRectangle(vector, base.Size);
						int i = 0;
						while (i < 20 && !Collision.SolidCollision(r.TopLeft(), r.Width, r.Height))
						{
							r.Y += 16;
							vector.Y += 16f;
							i++;
						}
						Vector2 vector8 = Collision.TileCollision(player.Center - base.Size / 2f, vector - player.Center, this.width, this.height, false, false, 1);
						vector = player.Center - base.Size / 2f + vector8;
						if (base.Distance(vector) < 32f)
						{
							float num30 = player.Center.Distance(vector);
							if (player.Center.Distance(base.Center) < num30)
							{
								vector = base.Center;
							}
						}
						Vector2 vector9 = player.Center - vector;
						if (vector9.Length() > num2 || Math.Abs(vector9.Y) > num3)
						{
							Rectangle r2 = Utils.CenteredRectangle(player.Center, base.Size);
							Vector2 vector10 = vector - player.Center;
							Vector2 vector11 = r2.TopLeft();
							for (float num31 = 0f; num31 < 1f; num31 += 0.05f)
							{
								Vector2 vector12 = r2.TopLeft() + vector10 * num31;
								if (Collision.SolidCollision(r2.TopLeft() + vector10 * num31, r.Width, r.Height))
								{
									break;
								}
								vector11 = vector12;
							}
							vector = vector11 + base.Size / 2f;
						}
					}
					this.tileCollide = true;
					float num32 = 0.5f;
					float num33 = 4f;
					float num34 = 4f;
					float num35 = 0.1f;
					if (flag5 && attackTarget != -1)
					{
						num32 = 0.65f;
						num33 = 5.5f;
						num34 = 5.5f;
					}
					if (flag && attackTarget != -1)
					{
						num32 = 1f;
						num33 = 8f;
						num34 = 8f;
					}
					if (flag2 && attackTarget != -1)
					{
						num32 = 0.7f;
						num33 = 6f;
						num34 = 6f;
					}
					if (flag3 && attackTarget != -1)
					{
						num32 = 1f;
						num33 = 8f;
						num34 = 8f;
					}
					if (num34 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
					{
						num34 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
						num32 = 0.7f;
					}
					if (this.type == 653 || this.type == 1018)
					{
						float num36 = player.velocity.Length();
						if (num36 < 0.1f)
						{
							num36 = 0f;
						}
						if (num36 != 0f && num36 < num34)
						{
							num34 = num36;
						}
					}
					int num37 = 0;
					bool flag13 = false;
					float num38 = vector.X - base.Center.X;
					Vector2 vector13 = vector - base.Center;
					if (this.type == 1018 && Math.Abs(num38) < 50f)
					{
						this.rotation = this.rotation.AngleTowards(0f, 0.2f);
						this.velocity.X = this.velocity.X * 0.9f;
						if ((double)Math.Abs(this.velocity.X) < 0.1)
						{
							this.velocity.X = 0f;
						}
					}
					else if (this.type == 653 && Math.Abs(num38) < 150f)
					{
						this.rotation = this.rotation.AngleTowards(0f, 0.2f);
						this.velocity.X = this.velocity.X * 0.9f;
						if ((double)Math.Abs(this.velocity.X) < 0.1)
						{
							this.velocity.X = 0f;
						}
					}
					else if (Math.Abs(num38) > 5f)
					{
						if (num38 < 0f)
						{
							num37 = -1;
							if (this.velocity.X > 0f - num33)
							{
								this.velocity.X = this.velocity.X - num32;
							}
							else
							{
								this.velocity.X = this.velocity.X - num35;
							}
						}
						else
						{
							num37 = 1;
							if (this.velocity.X < num33)
							{
								this.velocity.X = this.velocity.X + num32;
							}
							else
							{
								this.velocity.X = this.velocity.X + num35;
							}
						}
						bool flag14 = true;
						if (flag)
						{
							flag14 = false;
						}
						if (this.type == 653)
						{
							flag14 = false;
						}
						if (this.type == 1018)
						{
							flag14 = false;
						}
						if (flag2 && attackTarget == -1)
						{
							flag14 = false;
						}
						if (flag3)
						{
							flag14 = (vector13.Y < -80f);
						}
						if (flag5)
						{
							flag14 = (attackTarget > -1 && Main.npc[attackTarget].Hitbox.Intersects(base.Hitbox));
						}
						if (flag14)
						{
							flag13 = true;
						}
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.9f;
						if (Math.Abs(this.velocity.X) < num32 * 2f)
						{
							this.velocity.X = 0f;
						}
					}
					bool flag15 = Math.Abs(vector13.X) >= 64f || (vector13.Y <= -48f && Math.Abs(vector13.X) >= 8f);
					if (num37 != 0 && flag15)
					{
						int num39 = (int)(this.position.X + (float)(this.width / 2)) / 16;
						int num40 = (int)this.position.Y / 16;
						num39 += num37;
						num39 += (int)this.velocity.X;
						for (int j = num40; j < num40 + this.height / 16 + 1; j++)
						{
							if (WorldGen.SolidTile(num39, j, false))
							{
								flag13 = true;
							}
						}
					}
					if (this.type == 500 && this.velocity.X != 0f)
					{
						flag13 = true;
					}
					if (this.type == 653 && Math.Abs(this.velocity.X) > 3f)
					{
						flag13 = true;
					}
					if (this.type == 1018 && Math.Abs(this.velocity.X) > 3f)
					{
						flag13 = true;
					}
					Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
					float num41 = Utils.GetLerpValue(0f, 100f, vector13.Y, true) * Utils.GetLerpValue(-2f, -6f, this.velocity.Y, true);
					if (this.velocity.Y == 0f)
					{
						if (flag13)
						{
							for (int k = 0; k < 3; k++)
							{
								int num42 = (int)(this.position.X + (float)(this.width / 2)) / 16;
								if (k == 0)
								{
									num42 = (int)this.position.X / 16;
								}
								if (k == 2)
								{
									num42 = (int)(this.position.X + (float)this.width) / 16;
								}
								int num43 = (int)(this.position.Y + (float)this.height) / 16;
								if (WorldGen.SolidTile(num42, num43, false) || Main.tile[num42, num43].halfBrick() || Main.tile[num42, num43].slope() > 0 || (TileID.Sets.Platforms[(int)(*Main.tile[num42, num43].type)] && Main.tile[num42, num43].active() && !Main.tile[num42, num43].inActive()))
								{
									try
									{
										num42 = (int)(this.position.X + (float)(this.width / 2)) / 16;
										num43 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
										num42 += num37;
										num42 += (int)this.velocity.X;
										if (!WorldGen.SolidTile(num42, num43 - 1, false) && !WorldGen.SolidTile(num42, num43 - 2, false))
										{
											this.velocity.Y = -5.1f;
										}
										else if (!WorldGen.SolidTile(num42, num43 - 2, false))
										{
											this.velocity.Y = -7.1f;
										}
										else if (WorldGen.SolidTile(num42, num43 - 5, false))
										{
											this.velocity.Y = -11.1f;
										}
										else if (WorldGen.SolidTile(num42, num43 - 4, false))
										{
											this.velocity.Y = -10.1f;
										}
										else
										{
											this.velocity.Y = -9.1f;
										}
									}
									catch
									{
										this.velocity.Y = -9.1f;
									}
								}
							}
							if (vector.Y - base.Center.Y < -48f)
							{
								float num44 = vector.Y - base.Center.Y;
								num44 *= -1f;
								if (num44 < 60f)
								{
									this.velocity.Y = -6f;
								}
								else if (num44 < 80f)
								{
									this.velocity.Y = -7f;
								}
								else if (num44 < 100f)
								{
									this.velocity.Y = -8f;
								}
								else if (num44 < 120f)
								{
									this.velocity.Y = -9f;
								}
								else if (num44 < 140f)
								{
									this.velocity.Y = -10f;
								}
								else if (num44 < 160f)
								{
									this.velocity.Y = -11f;
								}
								else if (num44 < 190f)
								{
									this.velocity.Y = -12f;
								}
								else if (num44 < 210f)
								{
									this.velocity.Y = -13f;
								}
								else if (num44 < 270f)
								{
									this.velocity.Y = -14f;
								}
								else if (num44 < 310f)
								{
									this.velocity.Y = -15f;
								}
								else
								{
									this.velocity.Y = -16f;
								}
							}
							if (this.wet && num41 == 0f)
							{
								this.velocity.Y = this.velocity.Y * 2f;
							}
						}
						if (this.type == 1018 && this.localAI[2] == 0f)
						{
							this.localAI[2] = 1f;
							for (int l = 0; l < 6; l++)
							{
								Dust dust3 = Main.dust[Dust.NewDust(this.position + this.velocity, 16, 16, 0, 0f, 0f, 0, default(Color), 0.8f)];
								dust3.velocity.X = this.velocity.X * 0.25f;
								dust3.velocity.Y = -2f + Math.Abs(this.velocity.Y) * 0.25f;
								dust3.velocity = dust3.velocity.RotatedByRandom(0.2617993950843811);
							}
						}
					}
					else if (this.type == 1018)
					{
						this.localAI[2] = 0f;
					}
					if (this.velocity.X > num34)
					{
						this.velocity.X = num34;
					}
					if (this.velocity.X < 0f - num34)
					{
						this.velocity.X = 0f - num34;
					}
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					if (this.velocity.X == 0f)
					{
						this.direction = ((player.Center.X > base.Center.X) ? 1 : -1);
					}
					if (this.velocity.X > num32 && num37 == 1)
					{
						this.direction = 1;
					}
					if (this.velocity.X < 0f - num32 && num37 == -1)
					{
						this.direction = -1;
					}
					this.spriteDirection = this.direction;
					if (flag5)
					{
						if (this.velocity.Y == 0f)
						{
							this.rotation = this.rotation.AngleTowards(0f, 0.3f);
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if (Math.Abs(this.velocity.X) >= 0.5f)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 10)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 2 || this.frame >= Main.projFrames[this.type])
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.rotation = Math.Min(4f, this.velocity.Y) * -0.1f;
							if (this.spriteDirection == -1)
							{
								this.rotation -= 6.2831855f;
							}
							this.frameCounter = 0;
							this.frame = 1;
						}
					}
					if (flag)
					{
						this.rotation = 0f;
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if (Math.Abs(this.velocity.X) >= 0.5f)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 10)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= 4)
								{
									this.frame = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.frameCounter = 0;
							this.frame = 14;
						}
					}
					if (flag2)
					{
						this.rotation = 0f;
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								int num45 = 4;
								int num53 = this.frameCounter + 1;
								this.frameCounter = num53;
								if (num53 >= 7 * num45 && Main.rand.Next(50) == 0)
								{
									this.frameCounter = 0;
								}
								int num46 = this.frameCounter / num45;
								if (num46 >= 4)
								{
									num46 = 6 - num46;
								}
								if (num46 < 0)
								{
									num46 = 0;
								}
								this.frame = 1 + num46;
							}
							else if (Math.Abs(this.velocity.X) >= 0.5f)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								int num47 = 15;
								int num48 = 8;
								if (this.frameCounter >= num48 * num47)
								{
									this.frameCounter = 0;
								}
								int num49 = this.frameCounter / num47;
								this.frame = num49 + 5;
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							if (this.velocity.Y < 0f)
							{
								if (this.frame > 9 || this.frame < 5)
								{
									this.frame = 5;
									this.frameCounter = 0;
								}
								int num53 = this.frameCounter + 1;
								this.frameCounter = num53;
								if (num53 >= 1 && this.frame < 9)
								{
									this.frame++;
									this.frameCounter = 0;
								}
							}
							else
							{
								if (this.frame > 13 || this.frame < 9)
								{
									this.frame = 9;
									this.frameCounter = 0;
								}
								int num53 = this.frameCounter + 1;
								this.frameCounter = num53;
								if (num53 >= 2 && this.frame < 11)
								{
									this.frame++;
									this.frameCounter = 0;
								}
							}
						}
					}
					if (flag3)
					{
						int num50 = 8;
						if (flag4)
						{
							num50 = 10;
						}
						this.rotation = 0f;
						if (this.velocity.Y == 0f)
						{
							if (this.velocity.X == 0f)
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							else if (Math.Abs(this.velocity.X) >= 0.5f)
							{
								this.frameCounter += (int)Math.Abs(this.velocity.X);
								this.frameCounter++;
								if (this.frameCounter > 10)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame >= num50 || this.frame < 2)
								{
									this.frame = 2;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.frameCounter = 0;
							this.frame = 1;
							if (flag4)
							{
								this.frame = 9;
							}
						}
					}
					this.velocity.Y = this.velocity.Y + (0.4f + num41 * 1f);
					if (this.velocity.Y > 10f)
					{
						this.velocity.Y = 10f;
					}
				}
				if (!flag)
				{
					return;
				}
				this.localAI[0] += 1f;
				if (this.velocity.X == 0f)
				{
					this.localAI[0] += 1f;
				}
				if (this.localAI[0] >= (float)Main.rand.Next(900, 1200))
				{
					this.localAI[0] = 0f;
					for (int m = 0; m < 6; m++)
					{
						int num51 = Dust.NewDust(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, (float)(-(float)this.direction), 1f, 0, default(Color), 1f);
						Main.dust[num51].velocity /= 2f;
						Main.dust[num51].scale = 0.8f;
					}
					int num52 = Gore.NewGore(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f, Vector2.Zero, Main.rand.Next(580, 583), 1f);
					Main.gore[num52].velocity /= 2f;
					Main.gore[num52].velocity.Y = Math.Abs(Main.gore[num52].velocity.Y);
					Main.gore[num52].velocity.X = (0f - Math.Abs(Main.gore[num52].velocity.X)) * (float)this.direction;
				}
				return;
			}
		}

		// Token: 0x06000D84 RID: 3460 RVA: 0x00358720 File Offset: 0x00356920
		private void AI_157_SharpTears()
		{
			int num = 5;
			float num2 = 1f;
			int num3 = 30;
			int num4 = 30;
			int num5 = 2;
			int num6 = 2;
			int num7 = 20;
			int num8 = 30;
			int num9 = 35;
			int maxValue = 6;
			if (this.type == 961)
			{
				num = 16;
				num2 = 0.75f;
				num3 = 5;
				num4 = 5;
				num5 = 0;
				num6 = 0;
				num7 = 10;
				num8 = 10;
				num9 = 20;
				maxValue = 5;
			}
			bool flag = this.ai[0] < (float)num7;
			bool flag2 = this.ai[0] >= (float)num8;
			bool flag3 = this.ai[0] >= (float)num9;
			this.ai[0] += 1f;
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				this.rotation = this.velocity.ToRotation();
				this.frame = Main.rand.Next(maxValue);
				for (int i = 0; i < num3; i++)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, new Vector2?(this.velocity * num2 * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat())), 0, default(Color), 1f);
					dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
				for (int j = 0; j < num4; j++)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, new Vector2?(Main.rand.NextVector2Circular(2f, 2f) + this.velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())), 0, default(Color), 1f);
					dust2.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust2.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					dust2.fadeIn = 1f;
				}
				if (this.type == 961)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsIceAttack, new Vector2?(base.Center), null);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item60, new Vector2?(base.Center), null);
				}
			}
			if (flag)
			{
				this.Opacity += 0.1f;
				this.scale = this.Opacity * this.ai[1];
				for (int k = 0; k < num5; k++)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, new Vector2?(this.velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())), 0, default(Color), 1f);
					dust3.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust3.velocity *= 0.5f;
					dust3.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag2)
			{
				this.Opacity -= 0.2f;
				for (int l = 0; l < num6; l++)
				{
					Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, new Vector2?(this.velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())), 0, default(Color), 1f);
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.velocity *= 0.5f;
					dust4.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag3)
			{
				this.Kill();
			}
			if (this.type == 756)
			{
				Lighting.AddLight(base.Center, new Vector3(0.5f, 0.1f, 0.1f) * this.scale);
			}
		}

		// Token: 0x06000D85 RID: 3461 RVA: 0x00358C08 File Offset: 0x00356E08
		public bool IsInRangeOfMeOrMyOwner(Entity entity, float maxDistance, out float myDistance, out float playerDistance, out bool closerIsMe)
		{
			myDistance = Vector2.Distance(entity.Center, base.Center);
			if (myDistance < maxDistance && !this.CanHitWithOwnBody(entity))
			{
				myDistance = float.PositiveInfinity;
			}
			playerDistance = Vector2.Distance(entity.Center, Main.player[this.owner].Center);
			if (playerDistance < maxDistance && !this.CanHitWithMeleeWeapon(entity))
			{
				playerDistance = float.PositiveInfinity;
			}
			closerIsMe = (myDistance < playerDistance);
			if (closerIsMe)
			{
				return myDistance <= maxDistance;
			}
			return playerDistance <= maxDistance;
		}

		// Token: 0x06000D86 RID: 3462 RVA: 0x00358C94 File Offset: 0x00356E94
		private void AI_156_BatOfLight()
		{
			List<int> ai156_blacklistedTargets = Projectile._ai156_blacklistedTargets;
			Player player = Main.player[this.owner];
			bool flag2 = this.type == 755;
			bool flag = this.type == 946;
			if (flag2)
			{
				if (player.dead)
				{
					player.batsOfLight = false;
				}
				if (player.batsOfLight)
				{
					this.timeLeft = 2;
				}
				DelegateMethods.v3_1 = this.AI_156_GetColor().ToVector3();
				Point point = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point.X, point.Y);
				int num3 = this.frameCounter + 1;
				this.frameCounter = num3;
				if (num3 >= 6)
				{
					this.frameCounter = 0;
					num3 = this.frame + 1;
					this.frame = num3;
					if (num3 >= Main.projFrames[this.type] - 1)
					{
						this.frame = 0;
					}
				}
				int num2 = player.direction;
				if (this.velocity.X != 0f)
				{
					num2 = Math.Sign(this.velocity.X);
				}
				this.spriteDirection = num2;
			}
			if (flag)
			{
				if (player.dead)
				{
					player.empressBlade = false;
				}
				if (player.empressBlade)
				{
					this.timeLeft = 2;
				}
				DelegateMethods.v3_1 = this.AI_156_GetColor().ToVector3();
				Point point2 = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point2.X, point2.Y);
			}
			ai156_blacklistedTargets.Clear();
			this.AI_156_Think(ai156_blacklistedTargets);
		}

		// Token: 0x06000D87 RID: 3463 RVA: 0x00358E04 File Offset: 0x00357004
		public Color AI_156_GetColor()
		{
			if (this.aiStyle != 156)
			{
				return Color.Transparent;
			}
			bool flag = this.type == 755;
			int num = this.type;
			if (flag)
			{
				return Color.Crimson;
			}
			return Color.Transparent;
		}

		// Token: 0x06000D88 RID: 3464 RVA: 0x00358E3C File Offset: 0x0035703C
		private void AI_156_Think(List<int> blacklist)
		{
			bool flag = this.type == 755;
			bool flag2 = this.type == 946;
			int num = 60;
			int num2 = num - 1;
			int num3 = num + 60;
			int num4 = num3 - 1;
			int num5 = num + 1;
			if (flag)
			{
				num = 66;
			}
			if (flag2)
			{
				num = 40;
				num2 = num - 1;
				num3 = num + 40;
				num4 = num3 - 1;
				num5 = num + 1;
			}
			Player player = Main.player[this.owner];
			if (player.active && Vector2.Distance(player.Center, base.Center) > 2000f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			if (this.ai[0] == -1f)
			{
				int index;
				int totalIndexesInGroup;
				this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index, out totalIndexesInGroup);
				Vector2 idleSpot;
				float idleRotation;
				this.AI_156_GetIdlePosition(index, totalIndexesInGroup, out idleSpot, out idleRotation);
				this.velocity = Vector2.Zero;
				base.Center = base.Center.MoveTowards(idleSpot, 32f);
				this.rotation = this.rotation.AngleLerp(idleRotation, 0.2f);
				if (base.Distance(idleSpot) < 2f)
				{
					this.ai[0] = 0f;
					this.netUpdate = true;
				}
				return;
			}
			if (this.ai[0] == 0f)
			{
				if (flag)
				{
					int index2;
					int totalIndexesInGroup2;
					this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index2, out totalIndexesInGroup2);
					Vector2 idleSpot2;
					float num26;
					this.AI_156_GetIdlePosition(index2, totalIndexesInGroup2, out idleSpot2, out num26);
					this.velocity = Vector2.Zero;
					base.Center = Vector2.SmoothStep(base.Center, idleSpot2, 0.45f);
					if (Main.rand.Next(20) == 0)
					{
						int num6 = this.AI_156_TryAttackingNPCs(blacklist, false);
						if (num6 != -1)
						{
							this.AI_156_StartAttack();
							this.ai[0] = (float)num;
							this.ai[1] = (float)num6;
							this.netUpdate = true;
							return;
						}
					}
				}
				if (!flag2)
				{
					return;
				}
				int index3;
				int totalIndexesInGroup3;
				this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index3, out totalIndexesInGroup3);
				Vector2 idleSpot3;
				float idleRotation2;
				this.AI_156_GetIdlePosition(index3, totalIndexesInGroup3, out idleSpot3, out idleRotation2);
				this.velocity = Vector2.Zero;
				base.Center = Vector2.SmoothStep(base.Center, idleSpot3, 0.45f);
				this.rotation = this.rotation.AngleLerp(idleRotation2, 0.45f);
				if (Main.rand.Next(20) == 0)
				{
					int num7 = this.AI_156_TryAttackingNPCs(blacklist, false);
					if (num7 != -1)
					{
						this.AI_156_StartAttack();
						this.ai[0] = (float)Main.rand.NextFromList(new int[]
						{
							num,
							num3
						});
						this.ai[0] = (float)num3;
						this.ai[1] = (float)num7;
						this.netUpdate = true;
					}
				}
				return;
			}
			else
			{
				if (flag)
				{
					int num8 = (int)this.ai[1];
					if (!Main.npc.IndexInRange(num8))
					{
						this.ai[0] = 0f;
						this.netUpdate = true;
						return;
					}
					NPC nPC = Main.npc[num8];
					if (!nPC.CanBeChasedBy(this, false))
					{
						this.ai[0] = 0f;
						this.netUpdate = true;
						return;
					}
					this.ai[0] -= 1f;
					if (this.ai[0] >= (float)num2)
					{
						this.velocity *= 0.8f;
						if (this.ai[0] == (float)num2)
						{
							this.localAI[0] = base.Center.X;
							this.localAI[1] = base.Center.Y;
						}
						return;
					}
					float lerpValue = Utils.GetLerpValue((float)num2, 0f, this.ai[0], true);
					Vector2 vector;
					vector..ctor(this.localAI[0], this.localAI[1]);
					if (lerpValue >= 0.5f)
					{
						vector = Main.player[this.owner].Center;
					}
					Vector2 center = nPC.Center;
					float num9 = (center - vector).ToRotation();
					float num10 = (center.X > vector.X) ? -3.1415927f : 3.1415927f;
					float num11 = num10 + (0f - num10) * lerpValue * 2f;
					Vector2 spinningpoint = num11.ToRotationVector2();
					spinningpoint.Y *= (float)Math.Sin((double)((float)this.identity * 2.3f)) * 0.5f;
					spinningpoint = spinningpoint.RotatedBy((double)num9, default(Vector2));
					float num12 = (center - vector).Length() / 2f;
					Vector2 center2 = Vector2.Lerp(vector, center, 0.5f) + spinningpoint * num12;
					base.Center = center2;
					Vector2 vector2 = MathHelper.WrapAngle(num9 + num11 + 0f).ToRotationVector2() * 10f;
					this.velocity = vector2;
					this.position -= this.velocity;
					if (this.ai[0] == 0f)
					{
						int num13 = this.AI_156_TryAttackingNPCs(blacklist, false);
						if (num13 != -1)
						{
							this.ai[0] = (float)num;
							this.ai[1] = (float)num13;
							this.AI_156_StartAttack();
							this.netUpdate = true;
							return;
						}
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
				if (!flag2)
				{
					return;
				}
				bool skipBodyCheck = true;
				int num14 = 0;
				int num15 = num2;
				int num16 = 0;
				if (this.ai[0] >= (float)num5)
				{
					num14 = 1;
					num15 = num4;
					num16 = num5;
				}
				int num17 = (int)this.ai[1];
				if (!Main.npc.IndexInRange(num17))
				{
					int num18 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
					if (num18 != -1)
					{
						this.ai[0] = (float)Main.rand.NextFromList(new int[]
						{
							num,
							num3
						});
						this.ai[1] = (float)num18;
						this.AI_156_StartAttack();
						this.netUpdate = true;
						return;
					}
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.netUpdate = true;
					return;
				}
				else
				{
					NPC nPC2 = Main.npc[num17];
					if (nPC2.CanBeChasedBy(this, false))
					{
						this.ai[0] -= 1f;
						if (this.ai[0] >= (float)num15)
						{
							this.direction = ((base.Center.X < nPC2.Center.X) ? 1 : -1);
							if (this.ai[0] == (float)num15)
							{
								this.localAI[0] = base.Center.X;
								this.localAI[1] = base.Center.Y;
							}
						}
						float lerpValue2 = Utils.GetLerpValue((float)num15, (float)num16, this.ai[0], true);
						if (num14 == 0)
						{
							Vector2 vector3;
							vector3..ctor(this.localAI[0], this.localAI[1]);
							if (lerpValue2 >= 0.5f)
							{
								vector3 = Vector2.Lerp(nPC2.Center, Main.player[this.owner].Center, 0.5f);
							}
							Vector2 center3 = nPC2.Center;
							float num19 = (center3 - vector3).ToRotation();
							float num20 = (this.direction == 1) ? -3.1415927f : 3.1415927f;
							float num21 = num20 + (0f - num20) * lerpValue2 * 2f;
							Vector2 spinningpoint2 = num21.ToRotationVector2();
							spinningpoint2.Y *= 0.5f;
							spinningpoint2.Y *= 0.8f + (float)Math.Sin((double)((float)this.identity * 2.3f)) * 0.2f;
							spinningpoint2 = spinningpoint2.RotatedBy((double)num19, default(Vector2));
							float num22 = (center3 - vector3).Length() / 2f;
							Vector2 center4 = Vector2.Lerp(vector3, center3, 0.5f) + spinningpoint2 * num22;
							base.Center = center4;
							float num23 = MathHelper.WrapAngle(num19 + num21 + 0f);
							this.rotation = num23 + 1.5707964f;
							Vector2 vector4 = num23.ToRotationVector2() * 10f;
							this.velocity = vector4;
							this.position -= this.velocity;
						}
						if (num14 == 1)
						{
							Vector2 vector5;
							vector5..ctor(this.localAI[0], this.localAI[1]);
							vector5 += new Vector2(0f, Utils.GetLerpValue(0f, 0.4f, lerpValue2, true) * -100f);
							Vector2 v = nPC2.Center - vector5;
							Vector2 vector6 = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(v.Length(), 60f, 150f);
							Vector2 value = nPC2.Center + vector6;
							float lerpValue3 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue2, true);
							float lerpValue4 = Utils.GetLerpValue(0.6f, 1f, lerpValue2, true);
							float targetAngle = v.SafeNormalize(Vector2.Zero).ToRotation() + 1.5707964f;
							this.rotation = this.rotation.AngleTowards(targetAngle, 0.62831855f);
							base.Center = Vector2.Lerp(vector5, nPC2.Center, lerpValue3);
							if (lerpValue4 > 0f)
							{
								base.Center = Vector2.Lerp(nPC2.Center, value, lerpValue4);
							}
						}
						if (this.ai[0] == (float)num16)
						{
							int num24 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
							if (num24 != -1)
							{
								this.ai[0] = (float)Main.rand.NextFromList(new int[]
								{
									num,
									num3
								});
								this.ai[1] = (float)num24;
								this.AI_156_StartAttack();
								this.netUpdate = true;
								return;
							}
							this.ai[0] = -1f;
							this.ai[1] = 0f;
							this.netUpdate = true;
						}
						return;
					}
					int num25 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
					if (num25 != -1)
					{
						this.ai[0] = (float)Main.rand.NextFromList(new int[]
						{
							num,
							num3
						});
						this.AI_156_StartAttack();
						this.ai[1] = (float)num25;
						this.netUpdate = true;
						return;
					}
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.netUpdate = true;
					return;
				}
			}
		}

		// Token: 0x06000D89 RID: 3465 RVA: 0x00359810 File Offset: 0x00357A10
		private void AI_156_StartAttack()
		{
			for (int i = 0; i < this.localNPCImmunity.Length; i++)
			{
				this.localNPCImmunity[i] = 0;
			}
		}

		// Token: 0x06000D8A RID: 3466 RVA: 0x0035983C File Offset: 0x00357A3C
		private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
		{
			Vector2 center = Main.player[this.owner].Center;
			int result = -1;
			float num = -1f;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
			{
				bool flag = true;
				if (!ownerMinionAttackTargetNPC.boss && blackListedTargets.Contains(ownerMinionAttackTargetNPC.whoAmI))
				{
					flag = false;
				}
				if (ownerMinionAttackTargetNPC.Distance(center) > 1000f)
				{
					flag = false;
				}
				if (!skipBodyCheck && !this.CanHitWithOwnBody(ownerMinionAttackTargetNPC))
				{
					flag = false;
				}
				if (flag)
				{
					return ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this, false) && (nPC.boss || !blackListedTargets.Contains(i)))
				{
					float num2 = nPC.Distance(center);
					if (num2 <= 1000f && (num2 <= num || num == -1f) && (skipBodyCheck || this.CanHitWithOwnBody(nPC)))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		// Token: 0x06000D8B RID: 3467 RVA: 0x00359930 File Offset: 0x00357B30
		private void AI_GetMyGroupIndexAndFillBlackList(List<int> blackListedTargets, out int index, out int totalIndexesInGroup)
		{
			index = 0;
			totalIndexesInGroup = 0;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == this.owner && projectile.type == this.type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
				{
					if (this.whoAmI > i)
					{
						index++;
					}
					totalIndexesInGroup++;
				}
			}
		}

		// Token: 0x06000D8C RID: 3468 RVA: 0x003599B8 File Offset: 0x00357BB8
		private void AI_156_GetIdlePosition(int stackedIndex, int totalIndexes, out Vector2 idleSpot, out float idleRotation)
		{
			Player player = Main.player[this.owner];
			bool flag2 = this.type == 755;
			bool flag = this.type == 946;
			idleRotation = 0f;
			idleSpot = Vector2.Zero;
			if (flag2)
			{
				float num2 = ((float)totalIndexes - 1f) / 2f;
				idleSpot = player.Center + -Vector2.UnitY.RotatedBy((double)(4.3982296f / (float)totalIndexes * ((float)stackedIndex - num2)), default(Vector2)) * 40f;
				idleRotation = 0f;
			}
			if (flag)
			{
				int num3 = stackedIndex + 1;
				idleRotation = (float)num3 * 6.2831855f * 0.016666668f * (float)player.direction + 1.5707964f;
				idleRotation = MathHelper.WrapAngle(idleRotation);
				int num4 = num3 % totalIndexes;
				Vector2 vector = new Vector2(0f, 0.5f).RotatedBy((double)((player.miscCounterNormalized * (2f + (float)num4) + (float)num4 * 0.5f + (float)player.direction * 1.3f) * 6.2831855f), default(Vector2)) * 4f;
				idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2((float)(player.direction * (num3 * -6 - 16)), player.gravDir * -15f);
				idleSpot += vector;
				idleRotation += 1.5707964f;
			}
		}

		// Token: 0x06000D8D RID: 3469 RVA: 0x00359B58 File Offset: 0x00357D58
		private unsafe void AI_155_MysticSnakeCoil()
		{
			if (Main.netMode != 1 && !Main.player[this.owner].active)
			{
				float num = this.ai[0];
				float y = this.position.Y;
				Point point = base.Center.ToTileCoordinates();
				Point end;
				end..ctor(point.X, (int)y / 16);
				Point start;
				start..ctor(point.X, (int)num / 16);
				this.AI_155_RemoveRope(start, end);
				this.Kill();
				return;
			}
			int num2 = 100;
			int num3 = 1800;
			if (this.ai[1] == 0f)
			{
				this.spriteDirection = ((Main.player[this.owner].Center.X <= base.Center.X) ? 1 : -1);
				this.ai[1] = 1f;
				this.velocity.Y = -5f;
			}
			if (this.ai[1] == 1f)
			{
				this.localAI[1] += 1f;
				float num4 = Utils.Remap(this.localAI[1], 15f, 30f, 0f, 1f, true);
				int num5 = (this.localAI[1] >= 60f) ? 1 : 0;
				this.velocity.Y = -3f * (1f - num4) + (float)(-32 * num5);
				this.velocity.Y = (float)((int)this.velocity.Y);
				if (this.localAI[1] == 60f)
				{
					for (int i = 0; i < 30; i++)
					{
						Dust dust = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust.velocity *= 1f;
						Dust dust2 = dust;
						dust2.velocity.X = dust2.velocity.X * 0.5f;
						dust.velocity.Y = -3f;
						dust.fadeIn = 1.2f;
						dust.noGravity = true;
						Dust dust3 = dust;
						dust3.position.X = dust3.position.X + Main.rand.NextFloatDirection() * 8f;
						dust.velocity = new Vector2(0f, -1f).RotatedBy((double)(0.7853982f * Main.rand.NextFloatDirection() * 0f), default(Vector2)) * (Main.rand.NextFloatDirection() * 9f);
						if (dust.velocity.Y < 0f)
						{
							Dust dust4 = dust;
							dust4.velocity.Y = dust4.velocity.Y * (1f + Main.rand.NextFloat() * 3f);
						}
					}
				}
				bool flag = num4 > 0f && num5 <= 0;
				if ((Main.rand.Next(6) == 0 || num5 > 0) && !flag)
				{
					Dust dust5 = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust5.velocity *= 1f;
					dust5.velocity.X = dust5.velocity.X * 0.5f;
					dust5.velocity.Y = -3f;
					dust5.fadeIn = 1.2f;
					dust5.noGravity = true;
				}
				this.alpha = Utils.Clamp<int>(this.alpha - 5, 0, 255);
				int num14 = this.frameCounter + 1;
				this.frameCounter = num14;
				if (num14 >= 12)
				{
					this.frameCounter = 0;
					num14 = this.frame + 1;
					this.frame = num14;
					if (num14 >= 4)
					{
						this.frame = 0;
					}
				}
				if (Main.myPlayer == this.owner)
				{
					float num6 = this.ai[0];
					float y2 = this.position.Y;
					Point point2 = base.Center.ToTileCoordinates();
					Point point3;
					point3..ctor(point2.X, (int)y2 / 16);
					Point point4;
					point4..ctor(point2.X, (int)num6 / 16);
					bool flag2 = point4.Y - point3.Y >= num2;
					int x = point4.X;
					if (!WorldGen.InWorld(x, point3.Y, 40) || !WorldGen.InWorld(x, point4.Y, 40))
					{
						flag2 = true;
					}
					if (!flag2)
					{
						for (int num7 = point4.Y; num7 >= point3.Y; num7--)
						{
							if (Main.tile[x, num7].active() && !Main.tileCut[(int)(*Main.tile[x, num7].type)] && *Main.tile[x, num7].type != 504)
							{
								flag2 = true;
								break;
							}
						}
					}
					if (flag2)
					{
						int num8 = 0;
						for (int num9 = point4.Y; num9 > point3.Y; num9--)
						{
							if ((WorldGen.TileEmpty(x, num9) || Main.tileCut[(int)(*Main.tile[x, num9].type)]) && WorldGen.PlaceTile(x, num9, 504, false, false, this.owner, 0))
							{
								num8++;
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 1, (float)x, (float)num9, 504f, 0, 0, 0);
								}
							}
						}
						this.timeLeft = num3;
						this.ai[1] = 2f;
						this.netUpdate = true;
						base.Top = new Vector2((float)(x * 16 + 8), (float)(point3.Y * 16 + 16));
						this.velocity = Vector2.Zero;
					}
				}
			}
			if (this.ai[1] != 2f)
			{
				return;
			}
			this.alpha = 0;
			int num15 = this.timeLeft;
			float num10 = this.ai[0];
			float y3 = this.position.Y;
			Point point5 = base.Center.ToTileCoordinates();
			Point end2;
			end2..ctor(point5.X, (int)y3 / 16);
			Point start2;
			start2..ctor(point5.X, (int)num10 / 16);
			int x2 = start2.X;
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				for (int num11 = start2.Y; num11 >= end2.Y; num11--)
				{
					Tile tile = Main.tile[x2, num11];
					if (tile.active() && *tile.type == 504)
					{
						this.AI_155_SpawnRopeIn(x2, num11);
					}
				}
			}
			else
			{
				for (int num12 = start2.Y; num12 >= end2.Y; num12--)
				{
					Tile tile2 = Main.tile[x2, num12];
					if (tile2.active() && *tile2.type == 504 && Main.rand.Next(80) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(new Vector2((float)(x2 * 16 - 6), (float)(num12 * 16)), 28, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust6.velocity *= 1f;
						dust6.velocity.X = 0f;
						dust6.fadeIn = 1.2f;
						dust6.noGravity = true;
					}
				}
			}
			if (this.timeLeft == 4)
			{
				for (int num13 = start2.Y; num13 >= end2.Y; num13--)
				{
					Tile tile3 = Main.tile[x2, num13];
					if (tile3.active() && *tile3.type == 504)
					{
						this.AI_155_SpawnRopeIn(x2, num13);
					}
				}
			}
			if (this.timeLeft > 4)
			{
				return;
			}
			if (!WorldGen.InWorld(x2, end2.Y, 20) || !WorldGen.InWorld(x2, start2.Y, 20))
			{
				this.Kill();
				return;
			}
			if (Main.myPlayer == this.owner)
			{
				this.AI_155_RemoveRope(start2, end2);
			}
			this.Kill();
		}

		// Token: 0x06000D8E RID: 3470 RVA: 0x0035A394 File Offset: 0x00358594
		private unsafe void AI_155_RemoveRope(Point start, Point end)
		{
			int x = start.X;
			for (int num = start.Y; num >= end.Y; num--)
			{
				Tile tile = Main.tile[x, num];
				if (tile.active() && *tile.type == 504)
				{
					WorldGen.KillTile(x, num, false, false, false);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)num, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x06000D8F RID: 3471 RVA: 0x0035A40C File Offset: 0x0035860C
		private void AI_155_SpawnRopeIn(int x, int y)
		{
			Vector2 vector;
			vector..ctor((float)(x * 16 + 8), (float)(y * 16 + 8));
			if (Main.rand.Next(4) != 0)
			{
				Gore gore = Gore.NewGoreDirect(vector, Vector2.Zero, Main.rand.Next(61, 64), 1f);
				gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
				Gore gore2 = gore;
				gore2.velocity.X = gore2.velocity.X + 0.1f * (float)((gore.velocity.X > 0f) ? 1 : -1);
				gore.position = vector - new Vector2(16f, 16f);
				gore.alpha = 170;
			}
			for (int i = 0; i < 5; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 31, 0f, 0f, 100, Color.Transparent, 1f).velocity *= 0.4f;
				}
				Dust dust = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 27, 0f, 0f, 100, Color.Transparent, 1.7f);
				dust.velocity *= 2f;
				dust.noGravity = true;
			}
		}

		// Token: 0x06000D90 RID: 3472 RVA: 0x0035A57C File Offset: 0x0035877C
		private void AI_154_VoidLens()
		{
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			if (this.owner == Main.myPlayer)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (i != this.whoAmI)
					{
						Projectile projectile = Main.projectile[i];
						if (projectile.active && projectile.owner == this.owner && projectile.type == this.type)
						{
							if (this.timeLeft < Main.projectile[i].timeLeft)
							{
								this.Kill();
								return;
							}
							Main.projectile[i].Kill();
						}
					}
				}
			}
			this.velocity *= 0.94f;
			this.direction = 1;
			int num = this.frameCounter + 1;
			this.frameCounter = num;
			if (num >= 5)
			{
				this.frameCounter = 0;
				num = this.frame + 1;
				this.frame = num;
				if (num >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			if (this.Opacity < 1f)
			{
				this.Opacity += 0.03f;
				if (this.Opacity > 1f)
				{
					this.Opacity = 1f;
				}
			}
			new VoidLensHelper(this).Update();
		}

		// Token: 0x06000D91 RID: 3473 RVA: 0x0035A6AC File Offset: 0x003588AC
		private void AI_153_ToiletPop()
		{
			Vector2 center = base.Center;
			float speedY = -2f;
			int num2 = 0;
			int num3;
			if (this.ai[0] == 0f)
			{
				num3 = 6;
				num2 = 1;
			}
			else
			{
				if (this.ai[0] > 10f)
				{
					this.Kill();
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					num2 = 1;
				}
				num3 = 2;
			}
			this.ai[0] += 1f;
			for (int i = 0; i < num3; i++)
			{
				Dust dust = Dust.NewDustDirect(center, 3, 6, 216, 0f, speedY, 0, default(Color), 1f);
				Dust dust2 = dust;
				dust2.velocity.X = dust2.velocity.X * 0.5f;
				dust.velocity.Y = 0f - Math.Abs(dust.velocity.Y);
				dust.position -= dust.velocity;
				dust.scale = 0.8f;
			}
			for (int j = 0; j < num2; j++)
			{
				Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583), 1f);
				gore.velocity.Y = 0f - Math.Abs(gore.velocity.Y);
			}
		}

		// Token: 0x06000D92 RID: 3474 RVA: 0x0035A830 File Offset: 0x00358A30
		private void AI_150_GolfClubHelper()
		{
			Player player = Main.player[this.owner];
			if (!player.active)
			{
				this.Kill();
				return;
			}
			if (player.gravDir == -1f)
			{
				player.SetDummyItemTime(0);
				this.Kill();
				return;
			}
			bool flag = false;
			Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && rectangle.Contains(projectile.Center.ToPoint()))
				{
					flag = true;
					break;
				}
			}
			if (!flag && this.owner == Main.myPlayer && this.ai[0] == 0f)
			{
				player.TryPlacingAGolfBallNearANearbyTee(Main.player[this.owner].Center);
			}
			if (!player.channel && this.ai[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item1, new Vector2?(player.Center), null);
				for (int j = 0; j < 1000; j++)
				{
					Projectile projectile2 = Main.projectile[j];
					Vector2 shotVector = Main.MouseWorld - projectile2.Center;
					if (projectile2.active && ProjectileID.Sets.IsAGolfBall[projectile2.type] && projectile2.owner == this.owner && GolfHelper.ValidateShot(projectile2, player, ref shotVector))
					{
						float num = Main.rand.NextFloatDirection();
						for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
						{
							Dust dust = Dust.NewDustPerfect(projectile2.Center, 31, new Vector2?((6.2831855f * num2 + num).ToRotationVector2() * 0.8f), 127, default(Color), 1f);
							dust.fadeIn = 0f;
							if (num2 % 0.2f == 0f)
							{
								dust.velocity *= 0.4f;
							}
						}
						SoundEngine.PlaySound(SoundID.Item126, new Vector2?(projectile2.Center), null);
						if (this.owner == Main.myPlayer)
						{
							GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, projectile2);
							Vector2 vector = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
							GolfHelper.HitGolfBall(projectile2, vector, shotStrength.RoughLandResistance);
							NetMessage.SendData(27, -1, -1, null, j, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 1f)
			{
				this.ai[1] += 1f;
				float num3 = (float)(player.HeldItem.useAnimation + 30);
				if (this.ai[1] >= num3)
				{
					this.Kill();
					return;
				}
				this.velocity = Vector2.Zero;
				player.ChangeDir(this.direction);
				player.heldProj = this.whoAmI;
				int num4 = player.HeldItem.useAnimation - (int)this.ai[1];
				if (num4 < 2)
				{
					num4 = 2;
				}
				player.SetDummyItemTime(num4);
			}
			if (this.ai[0] != 0f)
			{
				return;
			}
			if (this.owner == Main.myPlayer)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				if (mouseWorld != base.Center)
				{
					this.netUpdate = true;
					base.Center = mouseWorld;
				}
				if (Main.mouseRight && Main.mouseRightRelease)
				{
					this.Kill();
					player.mouseInterface = true;
					Main.blockMouse = true;
					player.SetItemTime(0);
					player.itemAnimation = 0;
					player.itemAnimationMax = 0;
					player.reuseDelay = 0;
					return;
				}
			}
			if (this.position != this.oldPosition)
			{
				if (base.Center.X - player.Center.X > 0f)
				{
					this.direction = 1;
				}
				else
				{
					this.direction = -1;
				}
			}
			this.velocity = Vector2.Zero;
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			this.ai[1] += 1f;
			int num5 = player.HeldItem.useAnimation * 4;
			if (this.ai[1] > (float)(num5 * 3))
			{
				this.ai[1] = (float)num5;
			}
			int num6 = player.HeldItem.useAnimation + Math.Min(num5, (int)this.ai[1]);
			if (num6 < 2)
			{
				num6 = 2;
			}
			player.SetDummyItemTime(num6);
		}

		// Token: 0x06000D93 RID: 3475 RVA: 0x0035ACE0 File Offset: 0x00358EE0
		public Color GetCeleb2Color()
		{
			switch ((int)this.ai[0])
			{
			case 0:
				return Color.Red;
			case 1:
				return Color.DarkOrange;
			case 2:
				return Color.Gold;
			case 3:
				return Color.LimeGreen;
			case 4:
				return Color.RoyalBlue;
			case 5:
				return new Color(80, 20, 180);
			case 6:
				return Color.HotPink;
			default:
				return Color.Transparent;
			}
		}

		// Token: 0x06000D94 RID: 3476 RVA: 0x0035AD54 File Offset: 0x00358F54
		private unsafe void AI_007_GrapplingHooks()
		{
			if (Main.player[this.owner].dead || Main.player[this.owner].stoned || Main.player[this.owner].webbed || Main.player[this.owner].frozen)
			{
				this.Kill();
				return;
			}
			Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
			Vector2 vector;
			vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
			this.rotation = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
			if (this.ai[0] == 2f && this.type == 865)
			{
				float num4 = 1.5707964f;
				int num5 = (int)Math.Round((double)(this.rotation / num4));
				this.rotation = (float)num5 * num4;
			}
			if (Main.myPlayer == this.owner)
			{
				int num6 = (int)(base.Center.X / 16f);
				int num7 = (int)(base.Center.Y / 16f);
				if (num6 > 0 && num7 > 0 && num6 < Main.maxTilesX && num7 < Main.maxTilesY && Main.tile[num6, num7].nactive() && TileID.Sets.CrackedBricks[(int)(*Main.tile[num6, num7].type)] && Main.rand.Next(16) == 0)
				{
					WorldGen.KillTile(num6, num7, false, false, false);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 20, (float)num6, (float)num7, 0f, 0, 0, 0);
					}
				}
			}
			if (num3 > 2500f)
			{
				this.Kill();
			}
			if (this.type == 256)
			{
				this.rotation = (float)Math.Atan2((double)num2, (double)num) + 3.9250002f;
			}
			if (this.type == 446)
			{
				Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 28f)
				{
					this.localAI[0] = 0f;
				}
				DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
				Vector2 center = base.Center;
				Vector2 end = mountedCenter;
				float width = 8f;
				Utils.TileActionAttempt plot;
				if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center, end, width, plot);
			}
			if (this.type == 652)
			{
				int num20 = this.frameCounter + 1;
				this.frameCounter = num20;
				if (num20 >= 7)
				{
					this.frameCounter = 0;
					num20 = this.frame + 1;
					this.frame = num20;
					if (num20 >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
			}
			if (this.type >= 646 && this.type <= 649)
			{
				Vector3 vector2 = Vector3.Zero;
				switch (this.type)
				{
				case 646:
					vector2..ctor(0.7f, 0.5f, 0.1f);
					break;
				case 647:
					vector2..ctor(0f, 0.6f, 0.7f);
					break;
				case 648:
					vector2..ctor(0.6f, 0.2f, 0.6f);
					break;
				case 649:
					vector2..ctor(0.6f, 0.6f, 0.9f);
					break;
				}
				Lighting.AddLight(mountedCenter, vector2);
				Lighting.AddLight(base.Center, vector2);
				DelegateMethods.v3_1 = vector2;
				Vector2 center2 = base.Center;
				Vector2 end2 = mountedCenter;
				float width2 = 8f;
				Utils.TileActionAttempt plot2;
				if ((plot2 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot2 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center2, end2, width2, plot2);
			}
			if (this.ai[0] == 0f)
			{
				if ((num3 > 300f && this.type == 13) || (num3 > 400f && this.type == 32) || (num3 > 440f && this.type == 73) || (num3 > 440f && this.type == 74) || (num3 > 375f && this.type == 165) || (num3 > 350f && this.type == 256) || (num3 > 500f && this.type == 315) || (num3 > 550f && this.type == 322) || (num3 > 400f && this.type == 331) || (num3 > 550f && this.type == 332) || (num3 > 400f && this.type == 372) || (num3 > 300f && this.type == 396) || (num3 > 550f && this.type >= 646 && this.type <= 649) || (num3 > 600f && this.type == 652) || (num3 > 300f && this.type == 865) || (num3 > 500f && this.type == 935) || (num3 > 480f && this.type >= 486 && this.type <= 489) || (num3 > 500f && this.type == 446))
				{
					this.ai[0] = 1f;
				}
				else if (this.type >= 230 && this.type <= 235)
				{
					int num8 = 300 + (this.type - 230) * 30;
					if (num3 > (float)num8)
					{
						this.ai[0] = 1f;
					}
				}
				else if (this.type == 753)
				{
					int num9 = 420;
					if (num3 > (float)num9)
					{
						this.ai[0] = 1f;
					}
				}
				else if (ProjectileLoader.GrappleOutOfRange(num3, this))
				{
					this.ai[0] = 1f;
				}
				Vector2 vector3 = base.Center - new Vector2(5f);
				Vector2 vector5 = base.Center + new Vector2(5f);
				Point point = (vector3 - new Vector2(16f)).ToTileCoordinates();
				Point point4 = (vector5 + new Vector2(32f)).ToTileCoordinates();
				int num10 = point.X;
				int num11 = point4.X;
				int num12 = point.Y;
				int num13 = point4.Y;
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesX)
				{
					num11 = Main.maxTilesX;
				}
				if (num12 < 0)
				{
					num12 = 0;
				}
				if (num13 > Main.maxTilesY)
				{
					num13 = Main.maxTilesY;
				}
				Player player = Main.player[this.owner];
				List<Point> list = new List<Point>();
				for (int i = 0; i < player.grapCount; i++)
				{
					Projectile projectile = Main.projectile[player.grappling[i]];
					if (projectile.aiStyle == 7 && projectile.ai[0] == 2f)
					{
						Point pt = projectile.Center.ToTileCoordinates();
						Tile tileSafely = Framing.GetTileSafely(pt);
						if (*tileSafely.type == 314 || TileID.Sets.Platforms[(int)(*tileSafely.type)])
						{
							for (int j = -2; j <= 2; j++)
							{
								for (int k = -2; k <= 2; k++)
								{
									Point point2;
									point2..ctor(pt.X + j, pt.Y + k);
									Tile tileSafely2 = Framing.GetTileSafely(point2);
									if (*tileSafely2.type == 314 || TileID.Sets.Platforms[(int)(*tileSafely2.type)])
									{
										list.Add(point2);
									}
								}
							}
						}
					}
				}
				Vector2 vector4 = default(Vector2);
				for (int l = num10; l < num11; l++)
				{
					for (int m = num12; m < num13; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = default(Tile);
						}
						vector4.X = (float)(l * 16);
						vector4.Y = (float)(m * 16);
						if (vector3.X + 10f > vector4.X && vector3.X < vector4.X + 16f && vector3.Y + 10f > vector4.Y && vector3.Y < vector4.Y + 16f)
						{
							Tile tile = Main.tile[l, m];
							if (this.AI_007_GrapplingHooks_CanTileBeLatchedOnTo(l, m) && !list.Contains(new Point(l, m)) && (this.type != 403 || *tile.type == 314) && !Main.player[this.owner].IsBlacklistedForGrappling(new Point(l, m)))
							{
								if (Main.player[this.owner].grapCount < 10)
								{
									Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
									Main.player[this.owner].grapCount++;
								}
								if (Main.myPlayer == this.owner)
								{
									int num14 = 0;
									int num15 = -1;
									int num16 = 100000;
									if (this.type == 73 || this.type == 74)
									{
										for (int n = 0; n < 1000; n++)
										{
											if (n != this.whoAmI && Main.projectile[n].active && Main.projectile[n].owner == this.owner && Main.projectile[n].aiStyle == 7 && Main.projectile[n].ai[0] == 2f)
											{
												Main.projectile[n].Kill();
											}
										}
									}
									else
									{
										int num17 = 3;
										if (this.type == 165)
										{
											num17 = 8;
										}
										if (this.type == 256)
										{
											num17 = 2;
										}
										if (this.type == 372)
										{
											num17 = 2;
										}
										if (this.type == 652)
										{
											num17 = 1;
										}
										if (this.type >= 646 && this.type <= 649)
										{
											num17 = 4;
										}
										ProjectileLoader.NumGrappleHooks(this, Main.player[this.owner], ref num17);
										for (int num18 = 0; num18 < 1000; num18++)
										{
											if (Main.projectile[num18].active && Main.projectile[num18].owner == this.owner && Main.projectile[num18].aiStyle == 7)
											{
												if (Main.projectile[num18].timeLeft < num16)
												{
													num15 = num18;
													num16 = Main.projectile[num18].timeLeft;
												}
												num14++;
											}
										}
										if (num14 > num17)
										{
											Main.projectile[num15].Kill();
										}
									}
									WorldGen.KillTile(l, m, true, true, false);
									SoundEngine.PlaySound(0, l * 16, m * 16, 1, 1f, 0f);
									this.velocity.X = 0f;
									this.velocity.Y = 0f;
									this.ai[0] = 2f;
									this.position.X = (float)(l * 16 + 8 - this.width / 2);
									this.position.Y = (float)(m * 16 + 8 - this.height / 2);
									Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(l, m);
									if (tileVisualHitbox != null)
									{
										base.Center = tileVisualHitbox.Value.Center.ToVector2();
									}
									this.damage = 0;
									this.netUpdate = true;
									if (Main.myPlayer == this.owner)
									{
										if (this.type == 935)
										{
											Main.player[this.owner].DoQueenSlimeHookTeleport(base.Center);
										}
										NetMessage.SendData(13, -1, -1, null, this.owner, 0f, 0f, 0f, 0, 0, 0);
										break;
									}
									break;
								}
							}
						}
					}
					if (this.ai[0] == 2f)
					{
						return;
					}
				}
				return;
			}
			if (this.ai[0] == 1f)
			{
				float num19 = 11f;
				if (this.type == 32)
				{
					num19 = 15f;
				}
				if (this.type == 73 || this.type == 74)
				{
					num19 = 17f;
				}
				if (this.type == 315)
				{
					num19 = 20f;
				}
				if (this.type == 322)
				{
					num19 = 22f;
				}
				if (this.type >= 230 && this.type <= 235)
				{
					num19 = 11f + (float)(this.type - 230) * 0.75f;
				}
				if (this.type == 753)
				{
					num19 = 15f;
				}
				if (this.type == 446)
				{
					num19 = 20f;
				}
				if (this.type >= 486 && this.type <= 489)
				{
					num19 = 18f;
				}
				if (this.type >= 646 && this.type <= 649)
				{
					num19 = 24f;
				}
				if (this.type == 652)
				{
					num19 = 24f;
				}
				if (this.type == 332)
				{
					num19 = 17f;
				}
				ProjectileLoader.GrappleRetreatSpeed(this, Main.player[this.owner], ref num19);
				if (num3 < 24f)
				{
					this.Kill();
				}
				num3 = num19 / num3;
				num *= num3;
				num2 *= num3;
				this.velocity.X = num;
				this.velocity.Y = num2;
				return;
			}
			if (this.ai[0] == 2f)
			{
				Point point3 = base.Center.ToTileCoordinates();
				if (Main.tile[point3.X, point3.Y] == null)
				{
					Main.tile[point3.X, point3.Y] = default(Tile);
				}
				bool flag = true;
				if (this.AI_007_GrapplingHooks_CanTileBeLatchedOnTo(point3.X, point3.Y))
				{
					flag = false;
				}
				if (flag)
				{
					this.ai[0] = 1f;
					return;
				}
				if (Main.player[this.owner].grapCount < 10)
				{
					Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
					Main.player[this.owner].grapCount++;
				}
			}
		}

		// Token: 0x06000D95 RID: 3477 RVA: 0x0035BC6C File Offset: 0x00359E6C
		private unsafe bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(int x, int y)
		{
			Tile theTile = Main.tile[x, y];
			bool vanilla = Main.tileSolid[(int)(*theTile.type)] | *theTile.type == 314 | (this.type == 865 && TileID.Sets.IsATreeTrunk[(int)(*theTile.type)]) | (this.type == 865 && *theTile.type == 323);
			vanilla &= theTile.nactive();
			bool? flag = ProjectileLoader.GrappleCanLatchOnTo(this, Main.player[this.owner], x, y);
			if (flag != null)
			{
				return flag.GetValueOrDefault();
			}
			return vanilla;
		}

		// Token: 0x06000D96 RID: 3478 RVA: 0x0035BD18 File Offset: 0x00359F18
		private void AI_147_Celeb2Rocket()
		{
			int num = 0;
			int num2 = 1;
			int num3 = 1;
			this.localAI[num] += 1f;
			this.alpha = 0;
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
			int num4 = (int)this.ai[0];
			Lighting.AddLight(base.Center, this.GetCeleb2Color().ToVector3() * 0.5f);
			switch (num4)
			{
			case 0:
				if (this.localAI[num] >= 20f)
				{
					this.velocity.Y = this.velocity.Y + 0.12f;
					this.penetrate = (this.maxPenetrate = -1);
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
				if (this.localAI[num] > 20f && this.localAI[num] % 20f == 0f)
				{
					this.AI_147_Explosion();
					return;
				}
				break;
			case 1:
				if (this.localAI[num] == 10f)
				{
					this.velocity.Y = this.velocity.Y - 10f;
				}
				if (this.localAI[num] >= 10f)
				{
					this.velocity.Y = this.velocity.Y + 0.25f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
				if (this.localAI[num] >= 10f)
				{
					this.scale += 0.015f;
					if (this.scale > 2.5f)
					{
						this.scale = 2.5f;
					}
					if (this.localAI[num] % 10f == 0f)
					{
						Vector2 velocity = this.velocity;
						for (float num5 = 0f; num5 < 1f; num5 += 0.12f)
						{
							Vector2 spinningpoint = Vector2.UnitX * -8f;
							spinningpoint += -Vector2.UnitY.RotatedBy((double)(num5 * 6.2831855f), default(Vector2)) * new Vector2(2f, 4f);
							spinningpoint = spinningpoint.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
							int num6 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, Color.Lerp(this.GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f), 1f);
							Main.dust[num6].scale = 0.9f;
							Main.dust[num6].fadeIn = 1.1f;
							Main.dust[num6].noGravity = true;
							Main.dust[num6].position = base.Center + spinningpoint;
							Main.dust[num6].velocity = -this.velocity * 0.35f + spinningpoint * 0.35f;
							Main.dust[num6].velocity *= this.scale;
							if (this.localAI[num] == 10f)
							{
								Main.dust[num6].velocity = spinningpoint.RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * 0.3f;
							}
						}
						return;
					}
				}
				break;
			case 2:
				if (this.localAI[num] >= 60f)
				{
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
				break;
			case 3:
			{
				float num7 = this.localAI[num2];
				if (num7 == 0f)
				{
					float num8 = this.velocity.Length();
					this.localAI[num2] = num8;
					num7 = num8;
				}
				if (this.localAI[num] >= 25f && this.ai[num3] == 0f)
				{
					if (this.localAI[num] >= 20f)
					{
						this.velocity.Y = this.velocity.Y + 0.15f;
					}
					if (this.velocity.Y > 16f)
					{
						this.velocity.Y = 16f;
					}
				}
				if (this.localAI[num] >= 20f)
				{
					float num9 = this.position.X;
					float num10 = this.position.Y;
					float num11 = 800f;
					bool flag = false;
					int num12 = 0;
					if (this.ai[num3] == 0f)
					{
						for (int i = 0; i < 200; i++)
						{
							if (Main.npc[i].CanBeChasedBy(this, false) && (this.ai[num3] == 0f || this.ai[num3] == (float)(i + 1)))
							{
								float num13 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
								float num14 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
								float num15 = Math.Abs(this.position.X + (float)(this.width / 2) - num13) + Math.Abs(this.position.Y + (float)(this.height / 2) - num14);
								if (num15 < num11 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
								{
									num11 = num15;
									num9 = num13;
									num10 = num14;
									flag = true;
									num12 = i;
								}
							}
						}
						if (flag)
						{
							this.ai[1] = (float)(num12 + 1);
						}
						flag = false;
					}
					if (this.ai[num3] != 0f)
					{
						int num16 = (int)(this.ai[num3] - 1f);
						if (Main.npc[num16].active && Main.npc[num16].CanBeChasedBy(this, true))
						{
							float num17 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
							float num18 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
							if (Math.Abs(this.position.X + (float)(this.width / 2) - num17) + Math.Abs(this.position.Y + (float)(this.height / 2) - num18) < 1000f)
							{
								flag = true;
								num9 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
								num10 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
							}
						}
					}
					if (!this.friendly)
					{
						flag = false;
					}
					if (flag)
					{
						float num23 = num7;
						Vector2 vector2;
						vector2..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num19 = num9 - vector2.X;
						float num20 = num10 - vector2.Y;
						float num21 = (float)Math.Sqrt((double)(num19 * num19 + num20 * num20));
						num21 = num23 / num21;
						num19 *= num21;
						num20 *= num21;
						int num22 = 8;
						this.velocity.X = (this.velocity.X * (float)(num22 - 1) + num19) / (float)num22;
						this.velocity.Y = (this.velocity.Y * (float)(num22 - 1) + num20) / (float)num22;
						return;
					}
				}
				break;
			}
			case 4:
			{
				if (this.localAI[num] == 1f && this.ai[1] == 1f)
				{
					this.localAI[num] += 45f;
				}
				float x = this.velocity.SafeNormalize(Vector2.Zero).RotatedBy((double)(this.localAI[num] * 0.06981317f), default(Vector2)).X;
				Vector2 vector3 = this.velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866, default(Vector2));
				this.position += vector3 * x * 3f;
				this.scale = 2f;
				if (this.localAI[num] >= 10f)
				{
					this.velocity.Y = this.velocity.Y + 0.04f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
				break;
			}
			case 5:
				if (this.localAI[num] >= 40f)
				{
					this.velocity.Y = this.velocity.Y + 0.08f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
					return;
				}
				break;
			case 6:
				if (this.localAI[num] >= 30f)
				{
					this.velocity.Y = this.velocity.Y + 0.1f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
				break;
			default:
				return;
			}
		}

		// Token: 0x06000D97 RID: 3479 RVA: 0x0035C6C8 File Offset: 0x0035A8C8
		private void AI_148_StarSpawner()
		{
			if (Main.dayTime && !Main.remixWorld)
			{
				this.Kill();
				return;
			}
			this.ai[0] += (float)Main.desiredWorldEventsUpdateRate;
			if (this.localAI[0] == 0f && Main.netMode != 2)
			{
				this.localAI[0] = 1f;
				if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
				{
					Star.StarFall(this.position.X);
				}
			}
			if (this.owner != Main.myPlayer || this.ai[0] < 180f)
			{
				return;
			}
			if (this.ai[1] > -1f)
			{
				this.velocity.X = this.velocity.X * 0.35f;
				if (base.Center.X < Main.player[(int)this.ai[1]].Center.X)
				{
					this.velocity.X = Math.Abs(this.velocity.X);
				}
				else
				{
					this.velocity.X = 0f - Math.Abs(this.velocity.X);
				}
			}
			Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 12, 1000, 10f, Main.myPlayer, 0f, 0f, 0f);
			this.Kill();
		}

		// Token: 0x06000D98 RID: 3480 RVA: 0x0035C858 File Offset: 0x0035AA58
		private void AI_147_Explosion()
		{
			switch ((int)this.ai[0])
			{
			case 0:
				for (int i = 0; i < 4; i++)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int j = 0; j < 20; j++)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 130, 0f, 0f, 200, default(Color), 1.2f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 3f;
					num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 130, 0f, 0f, 200, default(Color), 0.5f);
					Main.dust[num5].velocity *= 1.2f;
					Main.dust[num5].noGravity = true;
				}
				for (int k = 0; k < 1; k++)
				{
					int num6 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num6].velocity *= 0.3f;
					Gore gore = Main.gore[num6];
					gore.velocity.X = gore.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore2 = Main.gore[num6];
					gore2.velocity.Y = gore2.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				return;
			case 1:
			{
				Color celeb2Color2 = this.GetCeleb2Color();
				Vector2 center2 = base.Center;
				Main.rand.NextFloat();
				for (float num7 = 0f; num7 < 1f; num7 += 0.0125f)
				{
					Dust dust4 = Dust.NewDustPerfect(center2, 278, null, 200, Color.Lerp(celeb2Color2, Color.White, Main.rand.NextFloat() * 0.6f), 1f);
					dust4.scale = 1.1f;
					dust4.fadeIn = 1.3f;
					dust4.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust4.velocity.Y > 0f)
					{
						dust4.velocity *= 0.3f;
					}
					dust4.velocity *= 2f;
				}
				for (int l = 0; l < 3; l++)
				{
					int num8 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num8].velocity *= 0.3f;
					Gore gore3 = Main.gore[num8];
					gore3.velocity.X = gore3.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore4 = Main.gore[num8];
					gore4.velocity.Y = gore4.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				int fluff = 20;
				int distFluff = 100;
				int layerStart = 2;
				int layerEnd = 10;
				int layerJump = 2;
				this.CreateGroundExplosion(40f, fluff, distFluff, layerStart, layerEnd, layerJump);
				return;
			}
			case 2:
			{
				Vector2 center3 = base.Center;
				Color celeb2Color3 = this.GetCeleb2Color();
				float num9 = 0.05f;
				float num10 = 0.13f;
				bool flag = Main.rand.Next(4) == 0;
				if (flag)
				{
					num9 = 0.1f;
					num10 = 0.1f;
				}
				float num11 = Main.rand.NextFloatDirection();
				for (float num12 = 0f; num12 < 5f; num12 += 1f)
				{
					Vector2 spinningpoint;
					spinningpoint..ctor(0f, -100f);
					Vector2 vector4 = center3 + spinningpoint.RotatedBy((double)(num11 + num12 * 1.2566371f), default(Vector2));
					Vector2 vector5 = center3 + spinningpoint.RotatedBy((double)(num11 + (num12 + 1f) * 1.2566371f), default(Vector2));
					Vector2 vector6 = center3 + spinningpoint.RotatedBy((double)(num11 + (num12 + 0.5f) * 1.2566371f), default(Vector2)) * 0.4f;
					for (int num13 = 0; num13 < 2; num13++)
					{
						Vector2 value = vector4;
						Vector2 value2 = vector6;
						if (num13 == 1)
						{
							value = vector6;
							value2 = vector5;
						}
						for (float num14 = 0f; num14 < 1f; num14 += num10)
						{
							Vector2 vector7 = Vector2.Lerp(value, value2, num14);
							Vector2 vector8 = Vector2.Lerp(vector7, center3, 0.9f);
							Vector2 vector9 = (vector7 - vector8).SafeNormalize(Vector2.Zero);
							Dust dust7 = Dust.NewDustPerfect(vector8, 267, new Vector2?(Vector2.Zero), 0, celeb2Color3, 0.5f);
							dust7.fadeIn = 1.2f;
							dust7.noGravity = true;
							dust7.velocity = vector9 * Vector2.Distance(vector7, vector8) * num9;
						}
					}
				}
				if (flag)
				{
					for (int num15 = 0; num15 < 4; num15++)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num16 = 0; num16 < 60; num16++)
					{
						int num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 200, default(Color), 2.5f);
						Main.dust[num17].noGravity = true;
						Main.dust[num17].velocity *= 8f;
						num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 200, default(Color), 1.5f);
						Main.dust[num17].velocity *= 4.2f;
						Main.dust[num17].noGravity = true;
					}
					for (int num18 = 0; num18 < 1; num18++)
					{
						int num19 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num19].velocity *= 0.3f;
						Gore gore5 = Main.gore[num19];
						gore5.velocity.X = gore5.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
						Gore gore6 = Main.gore[num19];
						gore6.velocity.Y = gore6.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					}
					return;
				}
				for (int num20 = 0; num20 < 4; num20++)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num21 = 0; num21 < 40; num21++)
				{
					int num22 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num22].noGravity = true;
					Main.dust[num22].velocity *= 4f;
					num22 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 200, default(Color), 1.5f);
					Main.dust[num22].velocity *= 2.2f;
					Main.dust[num22].noGravity = true;
				}
				for (int num23 = 0; num23 < 1; num23++)
				{
					int num24 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num24].velocity *= 0.3f;
					Gore gore7 = Main.gore[num24];
					gore7.velocity.X = gore7.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore8 = Main.gore[num24];
					gore8.velocity.Y = gore8.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				return;
			}
			case 3:
			{
				Color celeb2Color4 = this.GetCeleb2Color();
				Vector2 center4 = base.Center;
				for (int num25 = 0; num25 < 4; num25++)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				float num26 = Main.rand.NextFloat() * 6.2831855f;
				for (int num27 = 0; num27 < 40; num27++)
				{
					Dust dust5 = Dust.NewDustPerfect(center4, 278, null, 100, Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.3f), 1f);
					dust5.scale = 1.3f * (dust5.velocity.Length() / 2f);
					dust5.fadeIn = 1.5f * (dust5.velocity.Length() / 2f);
					dust5.noGravity = true;
					dust5.velocity *= 6f;
					if (Math.Abs(dust5.velocity.X) > Math.Abs(dust5.velocity.Y))
					{
						Dust dust8 = dust5;
						dust8.velocity.Y = dust8.velocity.Y * 0.1f;
					}
					else
					{
						Dust dust9 = dust5;
						dust9.velocity.X = dust9.velocity.X * 0.1f;
					}
					dust5.velocity = dust5.velocity.RotatedBy((double)num26, default(Vector2));
				}
				for (int num28 = 0; num28 < 1; num28++)
				{
					int num29 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num29].velocity *= 0.3f;
					Gore gore9 = Main.gore[num29];
					gore9.velocity.X = gore9.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore10 = Main.gore[num29];
					gore10.velocity.Y = gore10.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				return;
			}
			case 4:
			{
				this.GetCeleb2Color();
				Vector2 center5 = base.Center;
				Main.rand.NextFloat();
				for (float num30 = 0f; num30 < 1f; num30 += 0.025f)
				{
					Dust dust6 = Dust.NewDustPerfect(center5, 132, null, 200, default(Color), 1f);
					dust6.scale = 1.1f;
					dust6.fadeIn = 1.5f;
					dust6.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust6.velocity.Y > 0f)
					{
						dust6.velocity *= 0.3f;
					}
					dust6.velocity *= 2f;
				}
				for (int num31 = 0; num31 < 3; num31++)
				{
					int num32 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num32].velocity *= 0.3f;
					Gore gore11 = Main.gore[num32];
					gore11.velocity.X = gore11.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore12 = Main.gore[num32];
					gore12.velocity.Y = gore12.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				return;
			}
			case 5:
			{
				Color celeb2Color5 = this.GetCeleb2Color();
				Vector2 center7 = base.Center;
				for (int num33 = 0; num33 < 20; num33++)
				{
					int num34 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 278, 0f, 0f, 200, Color.Lerp(celeb2Color5, Color.White, Main.rand.NextFloat() * 0.4f), 2.5f);
					Main.dust[num34].fadeIn = 1.3f;
					Main.dust[num34].scale = 1.1f;
					Main.dust[num34].velocity *= 2f;
					num34 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 200, celeb2Color5, 2.5f);
					Main.dust[num34].velocity *= 1.2f;
					Main.dust[num34].noGravity = true;
				}
				return;
			}
			case 6:
			{
				Color celeb2Color6 = this.GetCeleb2Color();
				Vector2 center6 = base.Center;
				for (int m = 0; m < 4; m++)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (float num35 = 0f; num35 < 1f; num35 += 0.015f)
				{
					Vector2 vector10 = Vector2.UnitY.RotatedBy((double)(num35 * 6.2831855f), default(Vector2)) * (1f + Main.rand.NextFloatDirection() * 0.1f);
					Dust dust10 = Dust.NewDustPerfect(center6 + vector10, 134, new Vector2?(Vector2.Zero), 0, celeb2Color6, 1f);
					dust10.scale = 1.4f;
					dust10.velocity = vector10 * 5f;
					dust10.velocity.Y = dust10.velocity.Y + -3f;
					dust10.velocity *= 2f;
				}
				for (float num36 = 0f; num36 < 1f; num36 += 0.025f)
				{
					Vector2 vector11 = Vector2.UnitY.RotatedBy((double)(num36 * 6.2831855f), default(Vector2)) * (1f + Main.rand.NextFloatDirection() * 0.2f);
					Dust dust11 = Dust.NewDustPerfect(center6 + vector11, 267, new Vector2?(Vector2.Zero), 0, celeb2Color6, 1f);
					dust11.noGravity = true;
					dust11.scale = 0.4f;
					dust11.fadeIn = 1.2f;
					dust11.velocity = vector11 * 4f;
					dust11.velocity.Y = dust11.velocity.Y + -3f;
					dust11.velocity *= 2f;
				}
				for (float num37 = 0f; num37 < 1f; num37 += 0.07f)
				{
					Vector2 vector12 = Vector2.UnitY.RotatedBy((double)(num37 * 6.2831855f), default(Vector2)) * (1f + Main.rand.NextFloatDirection() * 0.3f);
					Dust dust12 = Dust.NewDustPerfect(center6 + vector12, 267, new Vector2?(Vector2.Zero), 0, celeb2Color6, 1f);
					dust12.noGravity = true;
					dust12.scale = 0.4f;
					dust12.fadeIn = 1.3f;
					dust12.velocity = vector12 * 7f;
					dust12.velocity.Y = dust12.velocity.Y + -3f;
					dust12.velocity *= 2f;
				}
				for (int n = 0; n < 1; n++)
				{
					int num38 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num38].velocity *= 0.3f;
					Gore gore13 = Main.gore[num38];
					gore13.velocity.X = gore13.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
					Gore gore14 = Main.gore[num38];
					gore14.velocity.Y = gore14.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				return;
			}
			default:
				return;
			}
		}

		// Token: 0x06000D99 RID: 3481 RVA: 0x0035DD80 File Offset: 0x0035BF80
		private unsafe void CreateGroundExplosion(float MAX_SPREAD, int fluff, int distFluff, int layerStart, int layerEnd, int layerJump)
		{
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			point.X -= fluff;
			point.Y -= fluff;
			point2.X += fluff;
			point2.Y += fluff;
			int num = point.X / 2 + point2.X / 2;
			int num2 = this.width / 2 + distFluff;
			for (int i = layerStart; i < layerEnd; i += layerJump)
			{
				int num3 = i;
				for (int j = point.X; j <= point2.X; j++)
				{
					for (int k = point.Y; k <= point2.Y; k++)
					{
						if (!WorldGen.InWorld(j, k, 10))
						{
							return;
						}
						if (Vector2.Distance(base.Center, new Vector2((float)(j * 16), (float)(k * 16))) <= (float)num2)
						{
							Tile tileSafely = Framing.GetTileSafely(j, k);
							if (tileSafely.active() && Main.tileSolid[(int)(*tileSafely.type)] && !Main.tileSolidTop[(int)(*tileSafely.type)] && !Main.tileFrameImportant[(int)(*tileSafely.type)])
							{
								Tile tileSafely2 = Framing.GetTileSafely(j, k - 1);
								if (!tileSafely2.active() || !Main.tileSolid[(int)(*tileSafely2.type)] || Main.tileSolidTop[(int)(*tileSafely2.type)])
								{
									int num4 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, j, k);
									for (int l = 0; l < num4; l++)
									{
										Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
										dust.velocity.Y = dust.velocity.Y - (3f + (float)num3 * 1.5f);
										dust.velocity.Y = dust.velocity.Y * Main.rand.NextFloat();
										dust.scale += (float)num3 * 0.03f;
									}
									if (num3 >= 2)
									{
										for (int m = 0; m < num4 - 1; m++)
										{
											Dust dust2 = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
											dust2.velocity.Y = dust2.velocity.Y - (1f + (float)num3);
											dust2.velocity.Y = dust2.velocity.Y * Main.rand.NextFloat();
										}
									}
									if (num4 > 0 && Main.rand.Next(3) != 0)
									{
										float num5 = (float)Math.Abs(num - j) / (MAX_SPREAD / 2f);
										Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
										gore.velocity.Y = gore.velocity.Y - (0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f);
										gore.velocity.Y = gore.velocity.Y * Main.rand.NextFloat();
										gore.position = new Vector2((float)(j * 16 + 20), (float)(k * 16 + 20));
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000D9A RID: 3482 RVA: 0x0035E0A0 File Offset: 0x0035C2A0
		public void CheckUsability(Player player, ref bool currentlyUsable)
		{
			if (this.aiStyle == 160)
			{
				currentlyUsable = false;
			}
		}

		// Token: 0x06000D9B RID: 3483 RVA: 0x0035E0B4 File Offset: 0x0035C2B4
		private void AI_163_Chum()
		{
			float num = 0.05f;
			float num2 = (float)(this.width / 2);
			for (int i = 0; i < 1000; i++)
			{
				if (i != this.whoAmI && Main.projectile[i].active && Main.projectile[i].type == this.type && Math.Abs(this.position.X - Main.projectile[i].position.X) + Math.Abs(this.position.Y - Main.projectile[i].position.Y) < num2)
				{
					if (this.position.X < Main.projectile[i].position.X)
					{
						this.velocity.X = this.velocity.X - num;
					}
					else
					{
						this.velocity.X = this.velocity.X + num;
					}
					if (this.position.Y < Main.projectile[i].position.Y)
					{
						this.velocity.Y = this.velocity.Y - num;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + num;
					}
				}
			}
			if (this.wet)
			{
				this.velocity.X = this.velocity.X * 0.9f;
				int num3 = (int)(base.Center.X + (float)((this.width / 2 + 8) * this.direction)) / 16;
				int num4 = (int)(base.Center.Y / 16f);
				float num9 = this.position.Y / 16f;
				int num5 = (int)((this.position.Y + (float)this.height) / 16f);
				if (Main.tile[num3, num4] == null)
				{
					Main.tile[num3, num4] = default(Tile);
				}
				if (Main.tile[num3, num5] == null)
				{
					Main.tile[num3, num5] = default(Tile);
				}
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.5f;
				}
				num3 = (int)(base.Center.X / 16f);
				num4 = (int)(base.Center.Y / 16f);
				float num6 = this.AI_061_FishingBobber_GetWaterLine(num3, num4);
				if (base.Center.Y > num6)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
					if (this.velocity.Y < -8f)
					{
						this.velocity.Y = -8f;
					}
					if (base.Center.Y + this.velocity.Y < num6)
					{
						this.velocity.Y = num6 - base.Center.Y;
					}
				}
				else
				{
					this.velocity.Y = num6 - base.Center.Y;
				}
			}
			else
			{
				if (this.velocity.Y == 0f)
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
				this.velocity.X = this.velocity.X * 0.98f;
				this.velocity.Y = this.velocity.Y + 0.3f;
				if (this.velocity.Y > 15.9f)
				{
					this.velocity.Y = 15.9f;
				}
			}
			if (this.frameCounter == 0)
			{
				this.frameCounter = 1;
				this.frame = Main.rand.Next(4);
			}
			if (this.frameCounter < 10 && this.wet)
			{
				this.frameCounter++;
				for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
				{
					Gore gore = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1201, this.scale * 0.7f);
					gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
					if (gore.velocity.Y > 0f)
					{
						Gore gore4 = gore;
						gore4.velocity.Y = gore4.velocity.Y * -1f;
					}
				}
				for (float num8 = 0f; num8 < 2f; num8 += 1f)
				{
					Gore gore2 = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1208, this.scale * 0.7f + Main.rand.NextFloat() * 0.15f);
					gore2.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
					if (gore2.velocity.Y > 0f)
					{
						Gore gore5 = gore2;
						gore5.velocity.Y = gore5.velocity.Y * -1f;
					}
				}
			}
			this.scale = Utils.GetLerpValue(0f, 60f, (float)this.timeLeft, true);
			this.rotation += this.velocity.X * 0.14f;
			bool flag = !this.wet && this.velocity.Length() < 0.8f;
			int maxValue = this.wet ? 90 : 5;
			if (Main.rand.Next(maxValue) == 0 && !flag)
			{
				Gore gore3 = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1201, this.scale * 0.7f);
				if (this.wet)
				{
					gore3.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
				}
				else if (gore3.velocity.Y < 0f)
				{
					gore3.velocity.Y = 0f - gore3.velocity.Y;
				}
			}
			Vector2 spot = base.Center + Vector2.UnitY * 16f;
			if (this.ai[0] >= 10f && this.timeLeft > 60)
			{
				this.timeLeft = 60;
				this.netUpdate = true;
			}
			if (this.ai[0] < 10f && this.timeLeft > 60)
			{
				Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
			}
		}

		// Token: 0x06000D9C RID: 3484 RVA: 0x0035E764 File Offset: 0x0035C964
		private unsafe void ReduceRemainingChumsInPool()
		{
			int x = (int)base.Center.X / 16;
			int num = (int)base.Center.Y / 16;
			List<Tuple<int, Point>> list = new List<Tuple<int, Point>>();
			List<int> list2 = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
				{
					list.Add(new Tuple<int, Point>(i, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
				}
			}
			if (list.Count == 0)
			{
				return;
			}
			int minX;
			int maxX;
			Projectile.GetFishingPondWidth(x, num, out minX, out maxX);
			Point point = default(Point);
			for (int j = minX; j <= maxX; j++)
			{
				point.X = j;
				int num2 = num;
				while (*Main.tile[j, num2].liquid > 0 && !WorldGen.SolidTile(j, num2, false) && num2 < Main.maxTilesY - 10)
				{
					num2 = (point.Y = num2 + 1);
					for (int num3 = list.Count - 1; num3 >= 0; num3--)
					{
						if (list[num3].Item2 == point)
						{
							list2.Add(list[num3].Item1);
							list.RemoveAt(num3);
						}
					}
					if (list.Count == 0)
					{
						break;
					}
				}
				if (list.Count == 0)
				{
					break;
				}
			}
			for (int k = 0; k < list2.Count; k++)
			{
				Projectile projectile2 = Main.projectile[list2[k]];
				projectile2.ai[0] += 1f;
				projectile2.netUpdate = true;
			}
		}

		// Token: 0x06000D9D RID: 3485 RVA: 0x0035E938 File Offset: 0x0035CB38
		private void AI_061_FishingBobber()
		{
			Player player = Main.player[this.owner];
			bool flag = this.type >= 986 && this.type <= 993;
			this.timeLeft = 60;
			bool flag2 = false;
			if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
			{
				flag2 = true;
			}
			else if (player.inventory[player.selectedItem].shoot != this.type && !flag)
			{
				flag2 = true;
			}
			else if (player.pulley)
			{
				flag2 = true;
			}
			else if (player.dead)
			{
				flag2 = true;
			}
			if (flag2)
			{
				this.Kill();
				return;
			}
			if (this.ai[1] > 0f && this.localAI[1] != 0f)
			{
				this.localAI[1] = 0f;
				if (!this.lavaWet && !this.honeyWet)
				{
					this.AI_061_FishingBobber_DoASplash();
				}
			}
			if (this.ai[0] >= 1f)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[0] += 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
					if (!this.lavaWet && !this.honeyWet)
					{
						this.AI_061_FishingBobber_DoASplash();
					}
				}
				if (this.localAI[0] < 100f)
				{
					this.localAI[0] += 1f;
				}
				if (this.frameCounter == 0)
				{
					this.frameCounter = 1;
					this.ReduceRemainingChumsInPool();
				}
				this.tileCollide = false;
				int num = 10;
				Vector2 vector;
				vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num2 = player.position.X + (float)(player.width / 2) - vector.X;
				float num3 = player.position.Y + (float)(player.height / 2) - vector.Y;
				float num4 = (float)Math.Sqrt((double)(num2 * num2 + num3 * num3));
				if (num4 > 3000f)
				{
					this.Kill();
				}
				num4 = 15.9f / num4;
				num2 *= num4;
				num3 *= num4;
				this.velocity.X = (this.velocity.X * (float)(num - 1) + num2) / (float)num;
				this.velocity.Y = (this.velocity.Y * (float)(num - 1) + num3) / (float)num;
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				if (Main.myPlayer == this.owner && base.Hitbox.Intersects(player.Hitbox))
				{
					this.Kill();
				}
				return;
			}
			bool flag3 = false;
			Vector2 vector2;
			vector2..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num5 = player.position.X + (float)(player.width / 2) - vector2.X;
			float num6 = player.position.Y + (float)(player.height / 2) - vector2.Y;
			this.rotation = (float)Math.Atan2((double)num6, (double)num5) + 1.57f;
			if ((float)Math.Sqrt((double)(num5 * num5 + num6 * num6)) > 900f)
			{
				this.ai[0] = 1f;
			}
			if (this.wet)
			{
				if (this.shimmerWet)
				{
					if (Main.myPlayer == this.owner)
					{
						Main.player[this.owner].AddBuff(353, 60, true, false);
					}
					if (this.localAI[2] == 0f)
					{
						this.localAI[2] = 1f;
						SoundEngine.PlaySound(19, (int)Main.player[this.owner].position.X, (int)Main.player[this.owner].position.Y, 2, 1f, 0f);
					}
				}
				this.rotation = 0f;
				this.velocity.X = this.velocity.X * 0.9f;
				int num7 = (int)(base.Center.X + (float)((this.width / 2 + 8) * this.direction)) / 16;
				int num8 = (int)(base.Center.Y / 16f);
				float num11 = this.position.Y / 16f;
				int num9 = (int)((this.position.Y + (float)this.height) / 16f);
				if (Main.tile[num7, num8] == null)
				{
					Main.tile[num7, num8] = default(Tile);
				}
				if (Main.tile[num7, num9] == null)
				{
					Main.tile[num7, num9] = default(Tile);
				}
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.5f;
				}
				num7 = (int)(base.Center.X / 16f);
				num8 = (int)(base.Center.Y / 16f);
				float num10 = this.AI_061_FishingBobber_GetWaterLine(num7, num8);
				if (base.Center.Y > num10)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
					if (this.velocity.Y < -8f)
					{
						this.velocity.Y = -8f;
					}
					if (base.Center.Y + this.velocity.Y < num10)
					{
						this.velocity.Y = num10 - base.Center.Y;
					}
				}
				else
				{
					this.velocity.Y = num10 - base.Center.Y;
				}
				if ((double)this.velocity.Y >= -0.01 && (double)this.velocity.Y <= 0.01)
				{
					flag3 = true;
				}
			}
			else
			{
				if (this.velocity.Y == 0f)
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
				this.velocity.X = this.velocity.X * 0.98f;
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.velocity.Y > 15.9f)
				{
					this.velocity.Y = 15.9f;
				}
			}
			if (Main.myPlayer == this.owner && player.GetFishingConditions().BaitItemType == 2673)
			{
				player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
			}
			if (this.ai[1] != 0f)
			{
				flag3 = true;
			}
			if (!flag3)
			{
				return;
			}
			if (this.ai[1] == 0f && Main.myPlayer == this.owner)
			{
				int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
				if (Main.rand.Next(300) < finalFishingLevel)
				{
					this.localAI[1] += (float)Main.rand.Next(1, 3);
				}
				this.localAI[1] += (float)(finalFishingLevel / 30);
				this.localAI[1] += (float)Main.rand.Next(1, 3);
				if (Main.rand.Next(60) == 0)
				{
					this.localAI[1] += 60f;
				}
				if (this.localAI[1] > 660f)
				{
					this.localAI[1] = 0f;
					this.FishingCheck();
					return;
				}
			}
			else if (this.ai[1] < 0f)
			{
				if (this.velocity.Y == 0f || (this.honeyWet && Math.Abs(this.velocity.Y) <= 0.01f))
				{
					this.velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
					this.velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
					this.wet = false;
					this.lavaWet = false;
					this.honeyWet = false;
				}
				this.ai[1] += (float)Main.rand.Next(1, 5);
				if (this.ai[1] >= 0f)
				{
					this.ai[1] = 0f;
					this.localAI[1] = 0f;
					this.netUpdate = true;
				}
			}
		}

		// Token: 0x06000D9E RID: 3486 RVA: 0x0035F1EC File Offset: 0x0035D3EC
		private unsafe float AI_061_FishingBobber_GetWaterLine(int X, int Y)
		{
			float result = this.position.Y + (float)this.height;
			if (Main.tile[X, Y - 1] == null)
			{
				Main.tile[X, Y - 1] = default(Tile);
			}
			if (Main.tile[X, Y] == null)
			{
				Main.tile[X, Y] = default(Tile);
			}
			if (Main.tile[X, Y + 1] == null)
			{
				Main.tile[X, Y + 1] = default(Tile);
			}
			if (*Main.tile[X, Y - 1].liquid > 0)
			{
				result = (float)(Y * 16);
				result -= (float)(*Main.tile[X, Y - 1].liquid / 16);
			}
			else if (*Main.tile[X, Y].liquid > 0)
			{
				result = (float)((Y + 1) * 16);
				result -= (float)(*Main.tile[X, Y].liquid / 16);
			}
			else if (*Main.tile[X, Y + 1].liquid > 0)
			{
				result = (float)((Y + 2) * 16);
				result -= (float)(*Main.tile[X, Y + 1].liquid / 16);
			}
			return result;
		}

		// Token: 0x06000D9F RID: 3487 RVA: 0x0035F350 File Offset: 0x0035D550
		private void AI_061_FishingBobber_DoASplash()
		{
			for (int i = 0; i < 100; i++)
			{
				int num = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
				Dust dust = Main.dust[num];
				dust.velocity.Y = dust.velocity.Y - 4f;
				Dust dust2 = Main.dust[num];
				dust2.velocity.X = dust2.velocity.X * 2.5f;
				Main.dust[num].scale = 0.8f;
				Main.dust[num].alpha = 100;
				Main.dust[num].noGravity = true;
			}
			SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
		}

		// Token: 0x06000DA0 RID: 3488 RVA: 0x0035F454 File Offset: 0x0035D654
		private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
		{
			Item item = new Item();
			item.SetDefaults(itemType);
			if (itemType == 3196)
			{
				int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue = (finalFishingLevel / 20 + 3) / 2;
				int num = (finalFishingLevel / 10 + 6) / 2;
				if (Main.rand.Next(50) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(100) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(150) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(200) < finalFishingLevel)
				{
					num++;
				}
				int stack = Main.rand.Next(minValue, num + 1);
				item.stack = stack;
			}
			if (itemType == 3197)
			{
				int finalFishingLevel2 = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue2 = (finalFishingLevel2 / 4 + 15) / 2;
				int num2 = (finalFishingLevel2 / 2 + 40) / 2;
				if (Main.rand.Next(50) < finalFishingLevel2)
				{
					num2 += 6;
				}
				if (Main.rand.Next(100) < finalFishingLevel2)
				{
					num2 += 6;
				}
				if (Main.rand.Next(150) < finalFishingLevel2)
				{
					num2 += 6;
				}
				if (Main.rand.Next(200) < finalFishingLevel2)
				{
					num2 += 6;
				}
				int stack2 = Main.rand.Next(minValue2, num2 + 1);
				item.stack = stack2;
			}
			PlayerLoader.ModifyCaughtFish(thePlayer, item);
			ItemLoader.CaughtFishStack(item);
			item.newAndShiny = true;
			Item item2 = thePlayer.GetItem(this.owner, item, default(GetItemSettings));
			if (item2.stack > 0)
			{
				int number = Item.NewItem(new EntitySource_OverfullInventory(thePlayer, null), (int)this.position.X, (int)this.position.Y, this.width, this.height, itemType, item2.stack, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				item.position.X = base.Center.X - (float)(item.width / 2);
				item.position.Y = base.Center.Y - (float)(item.height / 2);
				item.active = true;
				PopupText.NewText(PopupTextContext.RegularItemPickup, item, 0, false, false);
			}
		}

		// Token: 0x06000DA1 RID: 3489 RVA: 0x0035F69C File Offset: 0x0035D89C
		private void AI_146_DD2Victory()
		{
		}

		// Token: 0x06000DA2 RID: 3490 RVA: 0x0035F6A0 File Offset: 0x0035D8A0
		private void BetsySharpnel(int npcIndex)
		{
			if (this.ai[1] != -1f && this.owner == Main.myPlayer)
			{
				Vector2 spinningpoint;
				spinningpoint..ctor(0f, 6f);
				Vector2 center = base.Center;
				float num = 0.7853982f;
				int num2 = 5;
				float num3 = (0f - num * 2f) / (float)(num2 - 1);
				for (int i = 0; i < num2; i++)
				{
					int num4 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, spinningpoint.RotatedBy((double)(num + num3 * (float)i), default(Vector2)), 710, this.damage, this.knockBack, this.owner, 0f, -1f, 0f);
					Projectile p = Main.projectile[num4];
					this.CopyLocalNPCImmunityTimes(p);
				}
			}
		}

		// Token: 0x06000DA3 RID: 3491 RVA: 0x0035F774 File Offset: 0x0035D974
		private void CopyLocalNPCImmunityTimes(Projectile p)
		{
			for (int i = 0; i < this.localNPCImmunity.Length; i++)
			{
				p.localNPCImmunity[i] = this.localNPCImmunity[i];
			}
		}

		// Token: 0x06000DA4 RID: 3492 RVA: 0x0035F7A4 File Offset: 0x0035D9A4
		private void AI_001()
		{
			if (this.type == 469 && this.wet && !this.honeyWet && !this.shimmerWet)
			{
				this.Kill();
			}
			int num243;
			if (this.type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
				Vector3 rgb = portalColor.ToVector3();
				rgb *= 0.5f;
				Lighting.AddLight(base.Center + this.velocity * 3f, rgb);
				if (this.alpha > 0 && this.alpha <= 15)
				{
					Color color = portalColor;
					color.A = byte.MaxValue;
					for (int i = 0; i < 4; i++)
					{
						Dust dust4 = Main.dust[Dust.NewDust(base.Center, 0, 0, 264, 0f, 0f, 0, default(Color), 1f)];
						dust4.position = base.Center;
						dust4.velocity = this.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
						dust4.color = color;
						dust4.scale = 1.2f;
						dust4.noLight = true;
						dust4.noGravity = true;
						dust4.customData = Main.player[this.owner];
					}
					if (this.ai[0] != 0f)
					{
						SoundEngine.PlaySound(SoundID.Item114, new Vector2?(this.position), null);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item115, new Vector2?(this.position), null);
					}
				}
				this.alpha -= 15;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				num243 = this.frameCounter + 1;
				this.frameCounter = num243;
				if (num243 >= 4)
				{
					this.frameCounter = 0;
					num243 = this.frame + 1;
					this.frame = num243;
					if (num243 >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.alpha == 0)
				{
					Color color2 = portalColor;
					color2.A = byte.MaxValue;
					Dust dust5 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263, 0f, 0f, 0, default(Color), 1f)];
					dust5.position = base.Center;
					dust5.velocity = this.velocity / 4f;
					dust5.color = color2;
					dust5.noGravity = true;
					dust5.scale = 0.6f;
				}
			}
			if (this.type == 472)
			{
				int num = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.25f;
				Main.dust[num].velocity += this.velocity * 0.75f;
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
					for (int j = 0; j < 20; j++)
					{
						num = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.25f;
						Main.dust[num].velocity += this.velocity;
						Dust dust6 = Main.dust[num];
						dust6.velocity.X = dust6.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Dust dust7 = Main.dust[num];
						dust7.velocity.Y = dust7.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					}
				}
			}
			if (this.type == 323)
			{
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 436)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
			}
			if (this.type == 467)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, new Vector2?(this.position), null);
				}
				else if (this.ai[1] == 1f && Main.netMode != 1)
				{
					int num2 = -1;
					float num3 = 2000f;
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead)
						{
							Vector2 center = Main.player[k].Center;
							float num4 = Vector2.Distance(center, base.Center);
							if ((num4 < num3 || num2 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
							{
								num3 = num4;
								num2 = k;
							}
						}
					}
					if (num3 < 20f)
					{
						this.Kill();
						return;
					}
					if (num2 != -1)
					{
						this.ai[1] = 21f;
						this.ai[0] = (float)num2;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > 20f && this.ai[1] < 200f)
				{
					this.ai[1] += 1f;
					int num5 = (int)this.ai[0];
					if (!Main.player[num5].active || Main.player[num5].dead)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						float num6 = this.velocity.ToRotation();
						Vector2 vector = Main.player[num5].Center - base.Center;
						if (vector.Length() < 20f)
						{
							this.Kill();
							return;
						}
						float targetAngle = vector.ToRotation();
						if (vector == Vector2.Zero)
						{
							targetAngle = num6;
						}
						float num7 = num6.AngleLerp(targetAngle, 0.008f);
						this.velocity = new Vector2(this.velocity.Length(), 0f).RotatedBy((double)num7, default(Vector2));
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < 20f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == 20f)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				this.localAI[0] += 1f;
				if (this.localAI[0] == 12f)
				{
					this.localAI[0] = 0f;
					for (int l = 0; l < 12; l++)
					{
						Vector2 spinningpoint = Vector2.UnitX * (float)(-(float)this.width) / 2f;
						spinningpoint += -Vector2.UnitY.RotatedBy((double)((float)l * 3.1415927f / 6f), default(Vector2)) * new Vector2(8f, 16f);
						spinningpoint = spinningpoint.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
						int num8 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num8].scale = 1.1f;
						Main.dust[num8].noGravity = true;
						Main.dust[num8].position = base.Center + spinningpoint;
						Main.dust[num8].velocity = this.velocity * 0.1f;
						Main.dust[num8].velocity = Vector2.Normalize(base.Center - this.velocity * 3f - Main.dust[num8].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num9 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num9].velocity *= 0.1f;
						Main.dust[num9].position = base.Center + vector2 * (float)this.width / 2f;
						Main.dust[num9].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int n = 0; n < 1; n++)
					{
						Vector2 vector3 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num10 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num10].velocity *= 0.3f;
						Main.dust[num10].position = base.Center + vector3 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num10].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num11 = 0; num11 < 2; num11++)
					{
						Vector2 vector4 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num12 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num12].velocity *= 0.3f;
						Main.dust[num12].noGravity = true;
						Main.dust[num12].position = base.Center + vector4 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num12].fadeIn = 1.4f;
						}
					}
				}
			}
			if (this.type == 468)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, new Vector2?(this.position), null);
				}
				else if (this.ai[1] == 1f && Main.netMode != 1)
				{
					int num13 = -1;
					float num14 = 2000f;
					for (int num15 = 0; num15 < 255; num15++)
					{
						if (Main.player[num15].active && !Main.player[num15].dead)
						{
							Vector2 center2 = Main.player[num15].Center;
							float num16 = Vector2.Distance(center2, base.Center);
							if ((num16 < num14 || num13 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
							{
								num14 = num16;
								num13 = num15;
							}
						}
					}
					if (num14 < 20f)
					{
						this.Kill();
						return;
					}
					if (num13 != -1)
					{
						this.ai[1] = 21f;
						this.ai[0] = (float)num13;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > 20f && this.ai[1] < 200f)
				{
					this.ai[1] += 1f;
					int num17 = (int)this.ai[0];
					if (!Main.player[num17].active || Main.player[num17].dead)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						float num18 = this.velocity.ToRotation();
						Vector2 vector5 = Main.player[num17].Center - base.Center;
						if (vector5.Length() < 20f)
						{
							this.Kill();
							return;
						}
						float targetAngle2 = vector5.ToRotation();
						if (vector5 == Vector2.Zero)
						{
							targetAngle2 = num18;
						}
						float num19 = num18.AngleLerp(targetAngle2, 0.01f);
						this.velocity = new Vector2(this.velocity.Length(), 0f).RotatedBy((double)num19, default(Vector2));
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < 20f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == 20f)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
				this.localAI[0] += 1f;
				if (this.localAI[0] == 12f)
				{
					this.localAI[0] = 0f;
					for (int num20 = 0; num20 < 12; num20++)
					{
						Vector2 spinningpoint2 = Vector2.UnitX * (float)(-(float)this.width) / 2f;
						spinningpoint2 += -Vector2.UnitY.RotatedBy((double)((float)num20 * 3.1415927f / 6f), default(Vector2)) * new Vector2(8f, 16f);
						spinningpoint2 = spinningpoint2.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
						int num21 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num21].scale = 1.1f;
						Main.dust[num21].noGravity = true;
						Main.dust[num21].position = base.Center + spinningpoint2;
						Main.dust[num21].velocity = this.velocity * 0.1f;
						Main.dust[num21].velocity = Vector2.Normalize(base.Center - this.velocity * 3f - Main.dust[num21].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num22 = 0; num22 < 1; num22++)
					{
						Vector2 vector6 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num23 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num23].velocity *= 0.1f;
						Main.dust[num23].position = base.Center + vector6 * (float)this.width / 2f;
						Main.dust[num23].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int num24 = 0; num24 < 1; num24++)
					{
						Vector2 vector7 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num25 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num25].velocity *= 0.3f;
						Main.dust[num25].position = base.Center + vector7 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num25].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num26 = 0; num26 < 2; num26++)
					{
						Vector2 vector8 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num27 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num27].velocity *= 0.3f;
						Main.dust[num27].noGravity = true;
						Main.dust[num27].position = base.Center + vector8 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].fadeIn = 1.4f;
						}
					}
				}
			}
			if (this.type == 634 || this.type == 635)
			{
				float num28 = 5f;
				float num29 = 250f;
				float num30 = 6f;
				Vector2 vector9;
				vector9..ctor(8f, 10f);
				float num31 = 1.2f;
				Vector3 rgb2;
				rgb2..ctor(0.7f, 0.1f, 0.5f);
				int num32 = 4 * this.MaxUpdates;
				int num33 = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					242,
					73,
					72,
					71,
					255
				});
				int num34 = 255;
				if (this.type == 635)
				{
					vector9..ctor(10f, 20f);
					num31 = 1f;
					num29 = 500f;
					num34 = 88;
					num32 = 3 * this.MaxUpdates;
					rgb2..ctor(0.4f, 0.6f, 0.9f);
					num33 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						59,
						88
					});
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					this.localAI[0] = (float)(-(float)Main.rand.Next(48));
					SoundEngine.PlaySound(SoundID.Item34, new Vector2?(this.position), null);
				}
				else if (this.ai[1] == 1f && this.owner == Main.myPlayer)
				{
					int num35 = -1;
					float num36 = num29;
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this, false))
						{
							Vector2 center3 = Main.npc[num37].Center;
							float num38 = Vector2.Distance(center3, base.Center);
							if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
							{
								num36 = num38;
								num35 = num37;
							}
						}
					}
					if (num36 < 20f)
					{
						this.Kill();
						return;
					}
					if (num35 != -1)
					{
						this.ai[1] = num28 + 1f;
						this.ai[0] = (float)num35;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] > num28)
				{
					this.ai[1] += 1f;
					int num39 = (int)this.ai[0];
					if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this, false))
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
					else
					{
						this.velocity.ToRotation();
						Vector2 vector10 = Main.npc[num39].Center - base.Center;
						if (vector10.Length() < 20f)
						{
							this.Kill();
							return;
						}
						if (vector10 != Vector2.Zero)
						{
							vector10.Normalize();
							vector10 *= num30;
						}
						float num40 = 30f;
						this.velocity = (this.velocity * (num40 - 1f) + vector10) / num40;
					}
				}
				if (this.ai[1] >= 1f && this.ai[1] < num28)
				{
					this.ai[1] += 1f;
					if (this.ai[1] == num28)
					{
						this.ai[1] = 1f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= num32)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight(base.Center, rgb2);
				this.rotation = this.velocity.ToRotation();
				this.localAI[0] += 1f;
				if (this.localAI[0] == 48f)
				{
					this.localAI[0] = 0f;
				}
				else if (this.alpha == 0)
				{
					for (int num41 = 0; num41 < 2; num41++)
					{
						Vector2 vector11 = Vector2.UnitX * -30f;
						vector11 = -Vector2.UnitY.RotatedBy((double)(this.localAI[0] * 0.1308997f + (float)num41 * 3.1415927f), default(Vector2)) * vector9 - this.rotation.ToRotationVector2() * 10f;
						int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160, default(Color), 1f);
						Main.dust[num42].scale = num31;
						Main.dust[num42].noGravity = true;
						Main.dust[num42].position = base.Center + vector11 + this.velocity * 2f;
						Main.dust[num42].velocity = Vector2.Normalize(base.Center + this.velocity * 2f * 8f - Main.dust[num42].position) * 2f + this.velocity * 2f;
					}
				}
				if (Main.rand.Next(12) == 0)
				{
					for (int num43 = 0; num43 < 1; num43++)
					{
						Vector2 vector12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num44 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num44].velocity *= 0.1f;
						Main.dust[num44].position = base.Center + vector12 * (float)this.width / 2f + this.velocity * 2f;
						Main.dust[num44].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(64) == 0)
				{
					for (int num45 = 0; num45 < 1; num45++)
					{
						Vector2 vector13 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num46 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num46].velocity *= 0.3f;
						Main.dust[num46].position = base.Center + vector13 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num47 = 0; num47 < 2; num47++)
					{
						Vector2 vector14 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num48 = Dust.NewDust(this.position, this.width, this.height, num33, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num48].velocity *= 0.3f;
						Main.dust[num48].noGravity = true;
						Main.dust[num48].position = base.Center + vector14 * (float)this.width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num48].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(12) == 0 && this.type == 634)
				{
					Vector2 vector15 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					int num49 = Dust.NewDust(this.position, this.width, this.height, num34, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num49].velocity *= 0.3f;
					Main.dust[num49].position = base.Center + vector15 * (float)this.width / 2f;
					Main.dust[num49].fadeIn = 0.9f;
					Main.dust[num49].noGravity = true;
				}
				if (Main.rand.Next(3) == 0 && this.type == 635)
				{
					Vector2 vector16 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					int num50 = Dust.NewDust(this.position, this.width, this.height, num34, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num50].velocity *= 0.3f;
					Main.dust[num50].position = base.Center + vector16 * (float)this.width / 2f;
					Main.dust[num50].fadeIn = 1.2f;
					Main.dust[num50].scale = 1.5f;
					Main.dust[num50].noGravity = true;
				}
			}
			if (this.type == 459)
			{
				this.alpha -= 30;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 3)
					{
						this.frame = 0;
					}
				}
				this.position = base.Center;
				this.scale = this.ai[1];
				this.width = (this.height = (int)(22f * this.scale));
				base.Center = this.position;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				int num51;
				if ((double)this.scale < 0.85)
				{
					num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
				}
				else
				{
					num51 = 1;
					this.penetrate = -1;
					this.maxPenetrate = -1;
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					int num53 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
					Main.dust[num53].position -= Vector2.One * 3f;
					Main.dust[num53].scale = 0.5f;
					Main.dust[num53].noGravity = true;
					Main.dust[num53].velocity = this.velocity / 3f;
					Main.dust[num53].alpha = 255 - (int)(255f * this.scale);
				}
			}
			if (this.type == 709)
			{
				this.alpha -= 30;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 3)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryShot, new Vector2?(base.Center));
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 30f)
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 442)
			{
				this.frame = 0;
				if (this.alpha != 0)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] >= 4f)
					{
						this.alpha -= 90;
						if (this.alpha < 0)
						{
							this.alpha = 0;
							this.localAI[0] = 2f;
						}
					}
				}
				if (Vector2.Distance(base.Center, new Vector2(this.ai[0], this.ai[1]) * 16f + Vector2.One * 8f) <= 16f)
				{
					this.Kill();
					return;
				}
				if (this.alpha == 0)
				{
					this.localAI[1] += 1f;
					if (this.localAI[1] >= 120f)
					{
						this.Kill();
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
					this.localAI[0] += 1f;
					if (this.localAI[0] == 3f)
					{
						this.localAI[0] = 0f;
						for (int num54 = 0; num54 < 8; num54++)
						{
							Vector2 spinningpoint3 = Vector2.UnitX * -8f;
							spinningpoint3 += -Vector2.UnitY.RotatedBy((double)((float)num54 * 3.1415927f / 4f), default(Vector2)) * new Vector2(2f, 4f);
							spinningpoint3 = spinningpoint3.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
							int num55 = Dust.NewDust(base.Center, 0, 0, 135, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num55].scale = 1.5f;
							Main.dust[num55].noGravity = true;
							Main.dust[num55].position = base.Center + spinningpoint3;
							Main.dust[num55].velocity = this.velocity * 0.66f;
						}
					}
				}
			}
			if (this.type == 440 || this.type == 449 || this.type == 606)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.type == 440)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
				}
				if (this.type == 449)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
				}
				if (this.type == 606)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
				}
				float num56 = 100f;
				float num57 = 3f;
				if (this.type == 606)
				{
					num56 = 150f;
					num57 = 5f;
				}
				if (this.ai[1] == 0f)
				{
					this.localAI[0] += num57;
					if (this.localAI[0] == num57 * 1f && this.type == 606)
					{
						for (int num58 = 0; num58 < 4; num58++)
						{
							int num59 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num59].velocity *= 0.2f;
							Main.dust[num59].velocity += this.velocity / 10f;
							Main.dust[num59].noGravity = true;
						}
					}
					if (this.localAI[0] > num56)
					{
						this.localAI[0] = num56;
					}
				}
				else
				{
					this.localAI[0] -= num57;
					if (this.localAI[0] <= 0f)
					{
						this.Kill();
						return;
					}
				}
			}
			if (this.type == 438)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
			}
			if (this.type == 593)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
				num243 = this.frameCounter + 1;
				this.frameCounter = num243;
				if (num243 >= 12)
				{
					num243 = this.frame + 1;
					this.frame = num243;
					if (num243 >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
					this.frameCounter = 0;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector17 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust8 = Main.dust[Dust.NewDust(base.Center - vector17 * 8f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
					dust8.noGravity = true;
					dust8.position = base.Center - vector17 * 8f * this.scale;
					dust8.velocity = vector17.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
					dust8.velocity = Vector2.Zero;
					dust8.scale = 0.5f + Main.rand.NextFloat();
					dust8.fadeIn = 0.5f;
				}
			}
			if (this.type == 592)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
			}
			if (this.type == 462)
			{
				int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num60].noLight = true;
				Main.dust[num60].noGravity = true;
				Main.dust[num60].velocity = this.velocity;
				Main.dust[num60].position -= Vector2.One * 4f;
				Main.dust[num60].scale = 0.8f;
				num243 = this.frameCounter + 1;
				this.frameCounter = num243;
				if (num243 >= 9)
				{
					this.frameCounter = 0;
					num243 = this.frame + 1;
					this.frame = num243;
					if (num243 >= 5)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 437)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num61 = 0; num61 < 4; num61++)
					{
						int num62 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
						Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
						Main.dust[num62].scale = 0.5f;
						Main.dust[num62].noGravity = true;
						Main.dust[num62].velocity /= 2f;
						Main.dust[num62].velocity += this.velocity * 0.66f;
					}
				}
				if (this.ai[0] < 16f)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int num64 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0f, 0, default(Color), 1f);
						Main.dust[num64].position = this.position + new Vector2((float)(((this.direction == 1) ? 1 : 0) * this.width), (float)(2 + (this.height - 4) * num63));
						Main.dust[num64].scale = 0.3f;
						Main.dust[num64].noGravity = true;
						Main.dust[num64].velocity = Vector2.Zero;
					}
				}
			}
			if (this.type == 435)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			if (this.type == 682)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.DD2_LightningBugZap, new Vector2?(this.position), null);
					for (int num65 = 0; num65 < 8; num65++)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 272, 0f, 0f, 0, default(Color), 1f);
						dust.velocity *= 1f;
						dust.velocity += this.velocity * 0.65f;
						dust.scale = 0.6f;
						dust.fadeIn = 0.8f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.position += dust.velocity * 3f;
					}
				}
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.frameCounter++;
				if (this.frameCounter >= 3)
				{
					this.frame++;
					this.frameCounter = 0;
					if (this.frame >= 4)
					{
						this.frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
			}
			if (this.type == 684)
			{
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
				this.localAI[0] += 1f;
				for (int num66 = 0; num66 < 1; num66++)
				{
					Vector2 spinningpoint4 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
					spinningpoint4 = spinningpoint4.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
					Dust dust9 = Dust.NewDustDirect(base.Center, 0, 0, 60, 0f, 0f, 0, default(Color), 1f);
					dust9.alpha = 127;
					dust9.fadeIn = 1.5f;
					dust9.scale = 1.3f;
					dust9.velocity *= 0.3f;
					dust9.position = base.Center + spinningpoint4;
					dust9.noGravity = true;
					dust9.noLight = true;
					dust9.color = new Color(255, 255, 255, 0);
				}
				Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
			}
			if (this.type == 408)
			{
				this.alpha -= 40;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.spriteDirection = this.direction;
			}
			if (this.type == 282)
			{
				int num67 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
				Main.dust[num67].scale = (float)Main.rand.Next(1, 10) * 0.1f;
				Main.dust[num67].noGravity = true;
				Main.dust[num67].fadeIn = 1.5f;
				Main.dust[num67].velocity *= 0.25f;
				Main.dust[num67].velocity += this.velocity * 0.25f;
			}
			if (this.type == 275 || this.type == 276)
			{
				this.frameCounter++;
				if (this.frameCounter > 1)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame > 1)
					{
						this.frame = 0;
					}
				}
			}
			if (this.type == 225 && Main.rand.Next(2) == 0)
			{
				int num68 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num68].noGravity = true;
				Main.dust[num68].scale = 1.3f;
				Main.dust[num68].velocity *= 0.5f;
			}
			if (this.type == 174)
			{
				if (this.alpha == 0)
				{
					int num69 = Dust.NewDust(this.oldPosition - this.velocity * 3f, this.width, this.height, 76, 0f, 0f, 50, default(Color), 1f);
					Main.dust[num69].noGravity = true;
					Main.dust[num69].noLight = true;
					Main.dust[num69].velocity *= 0.5f;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
				}
			}
			else if (this.type == 605 || this.type == 920 || this.type == 921 || this.type == 926 || this.type == 937)
			{
				if (this.type == 920 && this.frameCounter == 0)
				{
					this.frameCounter = 1;
					this.frame = Main.rand.Next(3);
				}
				if (this.type != 920 && this.type != 921 && this.alpha == 0 && Main.rand.Next(3) == 0)
				{
					int num70 = 4;
					Color newColor;
					newColor..ctor(78, 136, 255, 150);
					float num71 = 1.2f;
					bool noGravity = true;
					int num72 = 0;
					if (this.type == 921)
					{
						num70 = 243;
						newColor = default(Color);
					}
					if (this.type == 926)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
						num71 = 1.2f;
						num72 = 8;
						noGravity = (Main.rand.Next(2) == 0);
					}
					if (this.type == 937)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
					}
					int num73 = Dust.NewDust(this.position - new Vector2((float)num72, (float)num72) + this.velocity, this.width + num72 * 2, this.height + num72 * 2, num70, 0f, 0f, 50, newColor, num71);
					Main.dust[num73].velocity *= 0.3f;
					Main.dust[num73].velocity += this.velocity * 0.3f;
					Main.dust[num73].noGravity = noGravity;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.type != 937 && this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					if (this.type == 926)
					{
						SoundEngine.PlaySound(SoundID.Item155, new Vector2?(this.position), null);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item154, new Vector2?(this.position), null);
					}
				}
			}
			else if (this.type == 176)
			{
				if (this.alpha == 0)
				{
					int num74 = Dust.NewDust(this.oldPosition, this.width, this.height, 22, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num74].noGravity = true;
					Main.dust[num74].noLight = true;
					Main.dust[num74].velocity *= 0.15f;
					Main.dust[num74].fadeIn = 0.8f;
				}
				this.alpha -= 50;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
				}
			}
			if (this.type == 350)
			{
				this.alpha -= 100;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (this.alpha == 0)
				{
					int num75 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num76 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - this.velocity * 0.5f, num75 * 2, num75 * 2, 6, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num76].scale *= 1.3f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num76].velocity *= 0.2f;
						Main.dust[num76].noGravity = true;
						Main.dust[num76].noLight = true;
						Main.dust[num76].velocity += this.velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num77 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - this.velocity * 0.5f, num75 * 2, num75 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num77].fadeIn = 0.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num77].velocity *= 0.05f;
						Main.dust[num77].velocity += this.velocity * 0.25f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, new Vector2?(this.position), null);
				}
			}
			if (this.type == 325)
			{
				this.alpha -= 100;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (this.alpha == 0)
				{
					int num78 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num79 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - this.velocity * 0.5f, num78 * 2, num78 * 2, 6, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num79].scale *= 1.2f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num79].velocity *= 0.2f;
						Main.dust[num79].noGravity = true;
						Main.dust[num79].noLight = true;
						Main.dust[num79].velocity += this.velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num80 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - this.velocity * 0.5f, num78 * 2, num78 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num80].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.05f;
						Main.dust[num80].velocity *= 0.05f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, new Vector2?(this.position), null);
				}
			}
			if (this.type == 469)
			{
				this.localAI[1] += 1f;
				if (this.localAI[1] > 2f)
				{
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
			}
			else if (this.type == 83 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, new Vector2?(this.position), null);
			}
			else if (this.type == 408 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 19, 1f, 0f);
			}
			else if (this.type == 259 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, new Vector2?(this.position), null);
			}
			else if (this.type == 110 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, new Vector2?(this.position), null);
			}
			else if (this.type == 302 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, new Vector2?(this.position), null);
			}
			else if (this.type == 438 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 593 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, new Vector2?(this.position), null);
			}
			else if (this.type == 592 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 462 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				if (Main.rand.Next(2) == 0)
				{
					SoundEngine.PlaySound(SoundID.Item124, new Vector2?(this.position), null);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item125, new Vector2?(this.position), null);
				}
				Vector2 vector18 = Vector2.Normalize(this.velocity);
				int num81 = Main.rand.Next(5, 10);
				for (int num82 = 0; num82 < num81; num82++)
				{
					int num83 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
					Dust dust10 = Main.dust[num83];
					dust10.velocity.Y = dust10.velocity.Y - 1f;
					Main.dust[num83].velocity += vector18 * 2f;
					Main.dust[num83].position -= Vector2.One * 4f;
					Main.dust[num83].noGravity = true;
				}
			}
			else if (this.type == 84 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 389 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 257 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 100 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, new Vector2?(this.position), null);
			}
			else if (this.type == 98 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if (this.type == 184 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if (this.type == 980 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if (this.type == 195 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if (this.type == 275 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if (this.type == 276 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
			}
			else if ((this.type == 81 || this.type == 82) && this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item5, new Vector2?(this.position), null);
				this.ai[1] = 1f;
			}
			else if (this.type == 180 && this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item11, new Vector2?(this.position), null);
				this.ai[1] = 1f;
			}
			else if (this.type == 248 && this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
				this.ai[1] = 1f;
			}
			else if (this.type == 576 && this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, new Vector2?(this.position), null);
			}
			else if (this.type == 577 && this.soundDelay == 0)
			{
				this.soundDelay = -1;
				SoundEngine.PlaySound(SoundID.Item36, new Vector2?(this.position), null);
				for (int num84 = 0; num84 < 5; num84++)
				{
					Vector2 center4 = base.Center;
					int num85 = (num84 != 0) ? 3 : 0;
					float num86 = (num84 == 0) ? (12f + 8f * Main.rand.NextFloat()) : (12f * Main.rand.NextFloat());
					Vector2 vector19 = this.velocity.SafeNormalize(Vector2.Zero) * num86 + Main.rand.NextVector2Circular(1f, 1f) * (float)num85;
					Dust dust11 = Main.dust[Dust.NewDust(center4, 8, 8, 229, 0f, 0f, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
					dust11.noGravity = true;
					dust11.velocity = vector19;
					dust11.position = center4;
				}
			}
			else if (this.type == 710)
			{
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num87;
					if (Main.rand.Next(2) == 0)
					{
						num87 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num87].noGravity = true;
					}
					num87 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num87].noGravity = true;
					Main.dust[num87].velocity *= 2f;
					Main.dust[num87].velocity += this.velocity;
					if (this.ai[1] == -1f)
					{
						Main.dust[num87].fadeIn = 1.5f;
					}
					else
					{
						Main.dust[num87].fadeIn = 1.22f;
					}
					if (this.wet)
					{
						this.Kill();
					}
				}
			}
			else if (this.type == 639)
			{
				if (this.localAI[0] == 0f && this.localAI[1] == 0f)
				{
					this.localAI[0] = base.Center.X;
					this.localAI[1] = base.Center.Y;
					this.ai[0] = this.velocity.X;
					this.ai[1] = this.velocity.Y;
				}
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 640)
			{
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.velocity == Vector2.Zero)
				{
					this.ai[0] = 0f;
					bool flag = true;
					for (int num88 = 1; num88 < this.oldPos.Length; num88++)
					{
						if (this.oldPos[num88] != this.oldPos[0])
						{
							flag = false;
						}
					}
					if (flag)
					{
						this.Kill();
						return;
					}
					if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((this.localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num89 = 0; num89 < 2; num89++)
						{
							float num90 = this.rotation + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
							float num91 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector20;
							vector20..ctor((float)Math.Cos((double)num90) * num91, (float)Math.Sin((double)num90) * num91);
							int num92 = Dust.NewDust(base.Center, 0, 0, 229, vector20.X, vector20.Y, 0, default(Color), 1f);
							Main.dust[num92].noGravity = true;
							Main.dust[num92].scale = 1.2f;
						}
						if (Main.rand.Next(10) == 0)
						{
							Vector2 vector21 = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * ((float)Main.rand.NextDouble() - 0.5f) * (float)this.width;
							int num93 = Dust.NewDust(base.Center + vector21 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num93].velocity *= 0.5f;
							Main.dust[num93].velocity.Y = 0f - Math.Abs(Main.dust[num93].velocity.Y);
						}
					}
				}
				else if (this.numUpdates == 1)
				{
					float num94 = this.rotation + 1.5707964f + ((Main.rand.Next(2) == 1) ? -1f : 1f) * 1.5707964f;
					float num95 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
					Vector2 vector22;
					vector22..ctor((float)Math.Cos((double)num94) * num95, (float)Math.Sin((double)num94) * num95);
					int num96 = Dust.NewDust(this.position, 0, 0, 229, vector22.X, vector22.Y, 0, default(Color), 1f);
					Main.dust[num96].noGravity = true;
					Main.dust[num96].scale = 1.2f;
				}
			}
			if (this.type == 41)
			{
				int num97 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.6f);
				Main.dust[num97].noGravity = true;
				num97 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num97].noGravity = true;
			}
			else if (this.type == 55)
			{
				int num98 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num98].noGravity = true;
			}
			else if (this.type == 719)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, 0f, 0f, 0, default(Color), 0.9f).noGravity = true;
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num99 = 0; num99 < 20; num99++)
					{
						Dust dust12 = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust12.noGravity = true;
						dust12.velocity += this.velocity * 0.75f;
					}
					for (int num100 = 0; num100 < 10; num100++)
					{
						Dust dust13 = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust13.noGravity = true;
						dust13.velocity *= 2f;
					}
				}
			}
			else if (this.type == 763)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num101 = 0; num101 < 5; num101++)
					{
						Dust dust14 = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 40, 0f, 0f, 0, default(Color), 1.1f);
						dust14.noGravity = true;
						dust14.velocity *= 1.5f;
					}
				}
			}
			else if (this.type == 772)
			{
				if (Main.rand.Next(7) == 0)
				{
					for (int num102 = 0; num102 < 1; num102++)
					{
						Dust dust15 = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, Main.rand.NextFromList(new int[]
						{
							86,
							87,
							88,
							89,
							90,
							91,
							138
						}), 0f, 0f, 0, default(Color), 0.7f);
						dust15.noGravity = true;
						dust15.velocity = this.velocity * 0.6f;
						dust15.fadeIn = 0.8f;
					}
				}
			}
			else if (this.type == 374)
			{
				if (this.localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
					this.localAI[0] = 1f;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num103 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 0.9f);
					Main.dust[num103].noGravity = true;
					Main.dust[num103].velocity *= 0.5f;
				}
			}
			else if (this.type == 376)
			{
				if (this.localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item20, new Vector2?(this.position), null);
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] > 3f)
				{
					int num104 = 1;
					if (this.localAI[0] > 5f)
					{
						num104 = 2;
					}
					for (int num105 = 0; num105 < num104; num105++)
					{
						int num106 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num106].noGravity = true;
						Dust dust16 = Main.dust[num106];
						dust16.velocity.X = dust16.velocity.X * 0.3f;
						Dust dust17 = Main.dust[num106];
						dust17.velocity.Y = dust17.velocity.Y * 0.3f;
						Main.dust[num106].noLight = true;
					}
					if (this.wet && !this.lavaWet)
					{
						this.Kill();
						return;
					}
				}
			}
			else if (this.type == 91 && Main.rand.Next(2) == 0)
			{
				num243 = ((Main.rand.Next(2) != 0) ? 58 : 15);
				int num107 = Dust.NewDust(this.position, this.width, this.height, num243, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, default(Color), 0.9f);
				Main.dust[num107].velocity *= 0.25f;
			}
			if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1009 || this.type == 1011)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			num243 = this.type;
			if (num243 <= 104)
			{
				if (num243 <= 36)
				{
					if (num243 != 14 && num243 != 20 && num243 != 36)
					{
						goto IL_51C6;
					}
				}
				else if (num243 <= 89)
				{
					if (num243 - 83 > 1 && num243 != 89)
					{
						goto IL_51C6;
					}
				}
				else if (num243 != 100 && num243 != 104)
				{
					goto IL_51C6;
				}
			}
			else if (num243 <= 180)
			{
				if (num243 != 110 && num243 - 158 > 3 && num243 != 180)
				{
					goto IL_51C6;
				}
			}
			else if (num243 <= 287)
			{
				if (num243 != 279 && num243 - 283 > 4)
				{
					goto IL_51C6;
				}
			}
			else if (num243 != 389)
			{
				if (num243 - 576 > 1)
				{
					goto IL_51C6;
				}
				this.localAI[1] += 1f;
				if (this.localAI[1] <= 2f)
				{
					goto IL_51C6;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 15;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
					goto IL_51C6;
				}
				goto IL_51C6;
			}
			if (this.alpha > 0)
			{
				this.alpha -= 15;
			}
			if (this.alpha < 0)
			{
				this.alpha = 0;
			}
			IL_51C6:
			if (this.type == 484)
			{
				int num108 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num108].noGravity = true;
				Main.dust[num108].velocity *= 0.1f;
				Main.dust[num108].scale = 0.75f;
				Main.dust[num108].position = (Main.dust[num108].position + base.Center) / 2f;
				Main.dust[num108].position += this.velocity * (float)Main.rand.Next(0, 101) * 0.01f;
			}
			if (this.type == 242 || this.type == 302 || this.type == 438 || this.type == 462 || this.type == 592)
			{
				float num109 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
				if (this.alpha > 0)
				{
					this.alpha -= (int)((byte)((double)num109 * 0.9));
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 660)
			{
				DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
				Vector2 center5 = base.Center;
				Vector2 end = base.Center + this.velocity * 10f;
				float width = 8f;
				Utils.TileActionAttempt plot;
				if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center5, end, width, plot);
				if (this.alpha > 0)
				{
					SoundEngine.PlaySound(SoundID.Item9, new Vector2?(base.Center), null);
					this.alpha = 0;
					this.scale = 1.1f;
					this.frame = Main.rand.Next(14);
					float num110 = 16f;
					int num111 = 0;
					while ((float)num111 < num110)
					{
						Vector2 spinningpoint5 = Vector2.UnitX * 0f;
						spinningpoint5 += -Vector2.UnitY.RotatedBy((double)((float)num111 * (6.2831855f / num110)), default(Vector2)) * new Vector2(1f, 4f);
						spinningpoint5 = spinningpoint5.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num112 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num112].scale = 1.5f;
						Main.dust[num112].noGravity = true;
						Main.dust[num112].position = base.Center + spinningpoint5;
						Main.dust[num112].velocity = this.velocity * 0f + spinningpoint5.SafeNormalize(Vector2.UnitY) * 1f;
						num111++;
					}
				}
			}
			if (this.type == 712)
			{
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
				Vector2 center6 = base.Center;
				Vector2 end2 = base.Center + this.velocity * 10f;
				float width2 = 8f;
				Utils.TileActionAttempt plot2;
				if ((plot2 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot2 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center6, end2, width2, plot2);
				if (this.alpha == 255)
				{
					this.frame = Main.rand.Next(2) * 4;
				}
				num243 = this.frameCounter + 1;
				this.frameCounter = num243;
				if (num243 >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame == 4)
					{
						this.frame = 0;
					}
					if (this.frame >= 8)
					{
						this.frame = 4;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha = 0;
					this.scale = 1.1f;
					this.frame = Main.rand.Next(14);
					float num113 = 4f;
					int num114 = 0;
					while ((float)num114 < num113)
					{
						Vector2 spinningpoint6 = Vector2.UnitX * 0f;
						spinningpoint6 += -Vector2.UnitY.RotatedBy((double)((float)num114 * (6.2831855f / num113)), default(Vector2)) * new Vector2(1f, 4f);
						spinningpoint6 = spinningpoint6.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
						int num115 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num115].scale = 1.7f;
						Main.dust[num115].noGravity = true;
						Main.dust[num115].position = base.Center + spinningpoint6 + this.velocity.SafeNormalize(Vector2.Zero) * 50f;
						Main.dust[num115].velocity = Main.dust[num115].velocity * 2f + spinningpoint6.SafeNormalize(Vector2.UnitY) * 0.3f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
						Main.dust[num115].velocity *= 0.7f;
						Main.dust[num115].position += Main.dust[num115].velocity * 5f;
						num114++;
					}
				}
			}
			if (this.type == 661)
			{
				if (this.alpha <= 0)
				{
					for (int num116 = 0; num116 < 3; num116++)
					{
						int num117 = Dust.NewDust(this.position, this.width, this.height, 240, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num117].noGravity = true;
						Main.dust[num117].velocity *= 0.3f;
						Main.dust[num117].noLight = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 55;
					this.scale = 1.3f;
					if (this.alpha < 0)
					{
						this.alpha = 0;
						float num118 = 16f;
						int num119 = 0;
						while ((float)num119 < num118)
						{
							Vector2 spinningpoint7 = Vector2.UnitX * 0f;
							spinningpoint7 += -Vector2.UnitY.RotatedBy((double)((float)num119 * (6.2831855f / num118)), default(Vector2)) * new Vector2(1f, 4f);
							spinningpoint7 = spinningpoint7.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
							int num120 = Dust.NewDust(base.Center, 0, 0, 62, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num120].scale = 1.5f;
							Main.dust[num120].noLight = true;
							Main.dust[num120].noGravity = true;
							Main.dust[num120].position = base.Center + spinningpoint7;
							Main.dust[num120].velocity = Main.dust[num120].velocity * 4f + this.velocity * 0.3f;
							num119++;
						}
					}
				}
			}
			if (this.type == 706)
			{
				if (this.wet)
				{
					this.Kill();
					return;
				}
				if (this.localAI[1] == 0f)
				{
					this.localAI[0] = SoundEngine.PlayTrackedSound(SoundID.DD2_PhantomPhoenixShot, new Vector2?(base.Center)).ToFloat();
					this.localAI[1] += 1f;
					for (int num121 = 0; num121 < 15; num121++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust18 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								6,
								31,
								31
							}), 0f, 0f, 0, default(Color), 1f);
							dust18.noGravity = true;
							dust18.velocity *= 2.3f;
							dust18.fadeIn = 1.5f;
							dust18.noLight = true;
						}
					}
				}
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
				if (activeSound != null)
				{
					activeSound.Position = new Vector2?(base.Center);
				}
				else
				{
					float[] array = this.localAI;
					int num244 = 0;
					SlotId invalid = SlotId.Invalid;
					array[num244] = invalid.ToFloat();
				}
				if (this.alpha <= 0)
				{
					for (int num122 = 0; num122 < 2; num122++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust19 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								6,
								31,
								31
							}), 0f, 0f, 0, default(Color), 1f);
							dust19.noGravity = true;
							dust19.velocity *= 2.3f;
							dust19.fadeIn = 1.5f;
							dust19.noLight = true;
						}
					}
					Vector2 spinningpoint8 = new Vector2(0f, (float)Math.Cos((double)((float)this.frameCounter * 6.2831855f / 40f - 1.5707964f))) * 16f;
					spinningpoint8 = spinningpoint8.RotatedBy((double)this.rotation, default(Vector2));
					Vector2 vector23 = this.velocity.SafeNormalize(Vector2.Zero);
					for (int num123 = 0; num123 < 1; num123++)
					{
						Dust dust20 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, 6, 0f, 0f, 0, default(Color), 1f);
						dust20.noGravity = true;
						dust20.position = base.Center + spinningpoint8;
						dust20.velocity *= 0f;
						dust20.fadeIn = 1.4f;
						dust20.scale = 1.15f;
						dust20.noLight = true;
						dust20.position += this.velocity * 1.2f;
						dust20.velocity += vector23 * 2f;
						Dust dust21 = Dust.NewDustDirect(base.Center - base.Size / 4f, this.width / 2, this.height / 2, 6, 0f, 0f, 0, default(Color), 1f);
						dust21.noGravity = true;
						dust21.position = base.Center + spinningpoint8;
						dust21.velocity *= 0f;
						dust21.fadeIn = 1.4f;
						dust21.scale = 1.15f;
						dust21.noLight = true;
						dust21.position += this.velocity * 0.5f;
						dust21.position += this.velocity * 1.2f;
						dust21.velocity += vector23 * 2f;
					}
				}
				num243 = this.frameCounter + 1;
				this.frameCounter = num243;
				if (num243 >= 40)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 5;
				if (this.alpha > 0)
				{
					this.alpha -= 55;
					if (this.alpha < 0)
					{
						this.alpha = 0;
						float num124 = 16f;
						int num125 = 0;
						while ((float)num125 < num124)
						{
							Vector2 spinningpoint9 = Vector2.UnitX * 0f;
							spinningpoint9 += -Vector2.UnitY.RotatedBy((double)((float)num125 * (6.2831855f / num124)), default(Vector2)) * new Vector2(1f, 4f);
							spinningpoint9 = spinningpoint9.RotatedBy((double)this.velocity.ToRotation(), default(Vector2));
							int num126 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num126].scale = 1.5f;
							Main.dust[num126].noLight = true;
							Main.dust[num126].noGravity = true;
							Main.dust[num126].position = base.Center + spinningpoint9;
							Main.dust[num126].velocity = Main.dust[num126].velocity * 4f + this.velocity * 0.3f;
							num125++;
						}
					}
				}
				DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
				Vector2 center7 = base.Center;
				Vector2 end3 = base.Center + this.velocity * 4f;
				float width3 = 40f;
				Utils.TileActionAttempt plot3;
				if ((plot3 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot3 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center7, end3, width3, plot3);
			}
			if (this.type == 638)
			{
				float num127 = this.velocity.Length();
				if (this.alpha > 0)
				{
					this.alpha -= (int)((byte)((double)num127 * 0.3));
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Offset((int)this.velocity.X, (int)this.velocity.Y);
				bool flag2 = false;
				for (int num128 = 0; num128 < 200; num128++)
				{
					NPC nPC = Main.npc[num128];
					if (nPC.active && !nPC.dontTakeDamage && nPC.immune[this.owner] == 0 && this.localNPCImmunity[num128] == 0 && nPC.Hitbox.Intersects(hitbox) && !nPC.friendly)
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					int num129 = Main.rand.Next(15, 31);
					for (int num130 = 0; num130 < num129; num130++)
					{
						int num131 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
						Main.dust[num131].velocity *= 1.6f;
						Dust dust22 = Main.dust[num131];
						dust22.velocity.Y = dust22.velocity.Y - 1f;
						Main.dust[num131].velocity += this.velocity;
						Main.dust[num131].noGravity = true;
					}
				}
			}
			if (this.type == 257 || this.type == 593)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 876)
			{
				if (this.ai[1] == 0f)
				{
					this.tileCollide = true;
				}
				else
				{
					this.tileCollide = false;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 88)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 532)
			{
				this.ai[0] += 1f;
			}
			bool flag3 = true;
			bool flag4 = false;
			num243 = this.type;
			if (num243 <= 325)
			{
				if (num243 <= 161)
				{
					if (num243 <= 55)
					{
						if (num243 <= 20)
						{
							if (num243 != 5 && num243 != 14 && num243 != 20)
							{
								goto IL_672E;
							}
						}
						else if (num243 != 36 && num243 != 38 && num243 != 55)
						{
							goto IL_672E;
						}
					}
					else if (num243 <= 98)
					{
						if (num243 - 83 > 1 && num243 - 88 > 1 && num243 != 98)
						{
							goto IL_672E;
						}
					}
					else if (num243 <= 104)
					{
						if (num243 != 100 && num243 != 104)
						{
							goto IL_672E;
						}
					}
					else if (num243 != 110 && num243 - 158 > 3)
					{
						goto IL_672E;
					}
				}
				else if (num243 <= 265)
				{
					if (num243 <= 242)
					{
						if (num243 != 180 && num243 != 184 && num243 != 242)
						{
							goto IL_672E;
						}
					}
					else if (num243 <= 257)
					{
						if (num243 != 248 && num243 != 257)
						{
							goto IL_672E;
						}
					}
					else if (num243 != 259 && num243 != 265)
					{
						goto IL_672E;
					}
				}
				else if (num243 <= 287)
				{
					if (num243 != 270 && num243 != 279 && num243 - 283 > 4)
					{
						goto IL_672E;
					}
				}
				else if (num243 <= 302)
				{
					if (num243 != 299 && num243 != 302)
					{
						goto IL_672E;
					}
				}
				else if (num243 != 323 && num243 != 325)
				{
					goto IL_672E;
				}
			}
			else if (num243 <= 577)
			{
				if (num243 <= 449)
				{
					if (num243 <= 374)
					{
						if (num243 - 348 > 2 && num243 != 355 && num243 != 374)
						{
							goto IL_672E;
						}
					}
					else if (num243 <= 389)
					{
						if (num243 != 376 && num243 != 389)
						{
							goto IL_672E;
						}
					}
					else
					{
						switch (num243)
						{
						case 435:
						case 436:
						case 438:
						case 440:
						case 442:
							break;
						case 437:
						case 439:
						case 441:
							goto IL_672E;
						default:
							if (num243 != 449)
							{
								goto IL_672E;
							}
							break;
						}
					}
				}
				else if (num243 <= 469)
				{
					if (num243 != 459 && num243 != 462 && num243 - 467 > 2)
					{
						goto IL_672E;
					}
				}
				else if (num243 <= 485)
				{
					if (num243 != 472 && num243 - 483 > 2)
					{
						goto IL_672E;
					}
				}
				else if (num243 != 498 && num243 - 576 > 1)
				{
					goto IL_672E;
				}
			}
			else if (num243 <= 639)
			{
				if (num243 <= 601)
				{
					if (num243 != 585 && num243 - 592 > 1 && num243 != 601)
					{
						goto IL_672E;
					}
				}
				else if (num243 <= 616)
				{
					if (num243 != 606 && num243 != 616)
					{
						goto IL_672E;
					}
				}
				else if (num243 - 634 > 1 && num243 - 638 > 1)
				{
					goto IL_672E;
				}
			}
			else if (num243 <= 684)
			{
				if (num243 - 660 > 1 && num243 != 682 && num243 != 684)
				{
					goto IL_672E;
				}
			}
			else if (num243 <= 876)
			{
				switch (num243)
				{
				case 706:
				case 709:
				case 710:
				case 712:
					break;
				case 707:
				case 708:
				case 711:
					goto IL_672E;
				default:
					if (num243 != 876)
					{
						goto IL_672E;
					}
					break;
				}
			}
			else if (num243 - 980 > 1)
			{
				if (num243 != 1006)
				{
					goto IL_672E;
				}
				flag4 = true;
				goto IL_672E;
			}
			flag3 = false;
			IL_672E:
			if (flag3)
			{
				this.ai[0] += 1f;
			}
			if (this.type == 1006 && Main.rand.Next(8) == 0)
			{
				Dust dust23 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(4f, 4f), 306, new Vector2?(this.velocity * 1.25f), 0, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f, byte.MaxValue), 1f + Main.rand.NextFloat() * 0.4f);
				dust23.noGravity = true;
				dust23.scale += 0.05f;
				Dust dust24 = Dust.CloneDust(dust23);
				dust24.color = Color.White;
				dust24.scale -= 0.3f;
			}
			if (this.type == 270)
			{
				int num132 = (int)Player.FindClosest(base.Center, 1, 1);
				this.ai[1] += 1f;
				if (this.ai[1] < 110f && this.ai[1] > 30f)
				{
					float num133 = this.velocity.Length();
					Vector2 vector24 = Main.player[num132].Center - base.Center;
					vector24.Normalize();
					vector24 *= num133;
					this.velocity = (this.velocity * 24f + vector24) / 25f;
					this.velocity.Normalize();
					this.velocity *= num133;
				}
				if (this.velocity.Length() < 18f)
				{
					this.velocity *= 1.02f;
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
					for (int num134 = 0; num134 < 10; num134++)
					{
						int num135 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, 0, default(Color), 2f);
						Main.dust[num135].noGravity = true;
						Main.dust[num135].velocity = base.Center - Main.dust[num135].position;
						Main.dust[num135].velocity.Normalize();
						Main.dust[num135].velocity *= -5f;
						Main.dust[num135].velocity += this.velocity / 2f;
					}
				}
			}
			if (this.type == 585)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
					for (int num136 = 0; num136 < 3; num136++)
					{
						int num137 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X, this.velocity.Y, 0, default(Color), 2f);
						Main.dust[num137].noGravity = true;
						Main.dust[num137].velocity = base.Center - Main.dust[num137].position;
						Main.dust[num137].velocity.Normalize();
						Main.dust[num137].velocity *= -5f;
						Main.dust[num137].velocity += this.velocity / 2f;
						Main.dust[num137].noLight = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.frameCounter++;
				if (this.frameCounter >= 12)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 2;
				if (this.frame > 3)
				{
					this.frame = 6 - this.frame;
				}
				Vector3 vector25 = NPCID.Sets.MagicAuraColor[54].ToVector3();
				Lighting.AddLight(base.Center, vector25.X, vector25.Y, vector25.Z);
				if (Main.rand.Next(3) == 0)
				{
					int num138 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num138].position -= this.velocity * 2f;
					Main.dust[num138].noLight = true;
					Main.dust[num138].noGravity = true;
					Dust dust25 = Main.dust[num138];
					dust25.velocity.X = dust25.velocity.X * 0.3f;
					Dust dust26 = Main.dust[num138];
					dust26.velocity.Y = dust26.velocity.Y * 0.3f;
				}
			}
			if (this.type == 594)
			{
				int num139 = (int)(43f - this.ai[1]) / 13;
				if (num139 < 1)
				{
					num139 = 1;
				}
				int num140 = (this.ai[1] < 20f) ? 6 : 31;
				for (int num141 = 0; num141 < num139; num141++)
				{
					int num142 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, num140, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, default(Color), 2f);
					Main.dust[num142].position -= this.velocity * 2f;
					Main.dust[num142].noLight = true;
					Main.dust[num142].noGravity = true;
					Dust dust27 = Main.dust[num142];
					dust27.velocity.X = dust27.velocity.X * 0.3f;
					Dust dust28 = Main.dust[num142];
					dust28.velocity.Y = dust28.velocity.Y * 0.3f;
					if (num140 == 6)
					{
						Main.dust[num142].fadeIn = Main.rand.NextFloat() * 2f;
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] > (float)(43 * this.MaxUpdates))
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 622)
			{
				int num143 = 229;
				if (Main.rand.Next(3) != 0)
				{
					int num144 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, num143, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
					Main.dust[num144].position -= this.velocity * 2f;
					Main.dust[num144].noLight = true;
					Main.dust[num144].noGravity = true;
					Dust dust29 = Main.dust[num144];
					dust29.velocity.X = dust29.velocity.X * 0.3f;
					Dust dust30 = Main.dust[num144];
					dust30.velocity.Y = dust30.velocity.Y * 0.3f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] > (float)(23 * this.MaxUpdates))
				{
					this.Kill();
					return;
				}
			}
			if (this.type == 587)
			{
				Color newColor2 = Main.hslToRgb(this.ai[1], 1f, 0.5f, byte.MaxValue);
				newColor2.A = 200;
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 2f)
				{
					if (this.localAI[0] == 2f)
					{
						SoundEngine.PlaySound(SoundID.Item5, new Vector2?(this.position), null);
						for (int num145 = 0; num145 < 4; num145++)
						{
							int num146 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X, this.velocity.Y, 0, newColor2, 1.1f);
							Main.dust[num146].noGravity = true;
							Main.dust[num146].velocity = base.Center - Main.dust[num146].position;
							Main.dust[num146].velocity.Normalize();
							Main.dust[num146].velocity *= -3f;
							Main.dust[num146].velocity += this.velocity / 2f;
						}
					}
					else
					{
						this.frame++;
						if (this.frame > 2)
						{
							this.frame = 0;
						}
						for (int num147 = 0; num147 < 1; num147++)
						{
							int num148 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, newColor2, 0.9f);
							Main.dust[num148].position = base.Center;
							Main.dust[num148].noGravity = true;
							Main.dust[num148].velocity = this.velocity * 0.5f;
						}
					}
				}
			}
			if (this.type == 349)
			{
				this.frame = (int)this.ai[0];
				this.velocity.Y = this.velocity.Y + 0.2f;
				if (this.localAI[0] == 0f || this.localAI[0] == 2f)
				{
					this.scale += 0.01f;
					this.alpha -= 50;
					if (this.alpha <= 0)
					{
						this.localAI[0] = 1f;
						this.alpha = 0;
					}
				}
				else if (this.localAI[0] == 1f)
				{
					this.scale -= 0.01f;
					this.alpha += 50;
					if (this.alpha >= 255)
					{
						this.localAI[0] = 2f;
						this.alpha = 255;
					}
				}
			}
			if (this.type == 348)
			{
				if (this.localAI[1] == 0f)
				{
					this.localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
				}
				if (this.ai[0] == 0f || this.ai[0] == 2f)
				{
					this.scale += 0.01f;
					this.alpha -= 50;
					if (this.alpha <= 0)
					{
						this.ai[0] = 1f;
						this.alpha = 0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.scale -= 0.01f;
					this.alpha += 50;
					if (this.alpha >= 255)
					{
						this.ai[0] = 2f;
						this.alpha = 255;
					}
				}
			}
			if (this.type == 572)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
				}
				for (int num149 = 0; num149 < 2; num149++)
				{
					int num150 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
					Main.dust[num150].velocity *= 0.5f;
					Main.dust[num150].velocity += this.velocity;
					Main.dust[num150].velocity *= 0.5f;
					Main.dust[num150].noGravity = true;
					Main.dust[num150].scale = 1.2f;
					Main.dust[num150].position = (base.Center + this.position) / 2f;
				}
			}
			if (this.type == 577)
			{
				Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
			}
			else if (this.type == 576)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
				for (int num151 = 0; num151 < 5; num151++)
				{
					Dust dust31 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust31.velocity = Vector2.Zero;
					dust31.position -= this.velocity / 5f * (float)num151;
					dust31.noGravity = true;
					dust31.scale = 0.8f;
					dust31.noLight = true;
				}
			}
			else if (this.type == 581)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(base.Center), null);
				}
				for (int num152 = 0; num152 < 2; num152++)
				{
					int num153 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						161,
						161
					});
					Dust dust32 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num153, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust32.velocity = dust32.velocity / 4f + this.velocity / 2f;
					dust32.noGravity = true;
					dust32.scale = 1.2f;
					dust32.position = base.Center;
					dust32.noLight = true;
				}
			}
			else if (this.type == 671)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num154 = 0; num154 < 8; num154++)
					{
						int num155 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							27,
							62
						});
						Dust dust33 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num155, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust33.velocity = (Main.rand.NextFloatDirection() * 3.1415927f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
						dust33.noGravity = true;
						dust33.scale = 1.5f;
						dust33.fadeIn = 1.2f;
						dust33.position = base.Center;
						dust33.noLight = true;
					}
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num156 = 0; num156 < 2; num156++)
				{
					int num157 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						27,
						62
					});
					Dust dust34 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num157, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust34.velocity = dust34.velocity / 4f + this.velocity / 2f;
					dust34.noGravity = true;
					dust34.scale = 1.2f;
					dust34.position = base.Center;
					dust34.noLight = true;
				}
			}
			else if (this.type == 811)
			{
				if (this.localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(base.Center), null);
					this.localAI[0] = 1f;
					for (int num158 = 0; num158 < 8; num158++)
					{
						Dust dust35 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust35.velocity = (Main.rand.NextFloatDirection() * 3.1415927f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
						dust35.scale = 1.5f;
						dust35.fadeIn = 1.7f;
						dust35.position = base.Center;
					}
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num159 = 0; num159 < 2; num159++)
				{
					Dust dust36 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust36.velocity = dust36.velocity / 4f + this.velocity / 2f;
					dust36.scale = 1.2f;
					dust36.position = base.Center + Main.rand.NextFloat() * this.velocity * 2f;
				}
			}
			else if (this.type == 819)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num160 = 0; num160 < 8; num160++)
					{
						Dust dust37 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust37.velocity = (Main.rand.NextFloatDirection() * 3.1415927f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 2f;
						dust37.scale = 0.9f;
						dust37.fadeIn = 1.3f;
						dust37.position = base.Center;
					}
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num161 = 1; num161 < 6; num161++)
				{
					Dust dust38 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 100, default(Color), 1f)];
					dust38.velocity = dust38.velocity * 0.5f + this.velocity * 0.5f;
					dust38.velocity *= 0.25f;
					dust38.scale = 0.9f;
					dust38.position = base.Center - this.velocity * (float)num161 / 5f;
				}
				if (Main.rand.Next(2) == 0)
				{
					Dust dust39 = Dust.NewDustPerfect(base.Center - this.velocity * 3f, 267, new Vector2?(this.velocity * 0.5f), 0, Color.Red * (Main.rand.NextFloat() * 0.3f + 0.1f), 1f);
					dust39.noGravity = true;
					dust39.scale = 0.7f;
				}
				Lighting.AddLight(base.Center, 0.3f, 0.05f, 0.05f);
			}
			else if (this.type == 814)
			{
				if (this.localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item171, new Vector2?(base.Center), null);
					this.localAI[0] = 1f;
					for (int num162 = 0; num162 < 8; num162++)
					{
						Dust dust40 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust40.velocity = (Main.rand.NextFloatDirection() * 3.1415927f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 2f;
						dust40.scale = 0.9f;
						dust40.fadeIn = 1.1f;
						dust40.position = base.Center;
					}
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num163 = 0; num163 < 2; num163++)
				{
					Dust dust41 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust41.velocity = dust41.velocity / 4f + this.velocity / 2f;
					dust41.scale = 1.2f;
					dust41.position = base.Center + Main.rand.NextFloat() * this.velocity * 2f;
				}
				for (int num164 = 1; num164 < this.oldPos.Length; num164++)
				{
					if (this.oldPos[num164] == Vector2.Zero)
					{
						break;
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust42 = Main.dust[Dust.NewDust(this.oldPos[num164], this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust42.velocity = dust42.velocity / 4f + this.velocity / 2f;
						dust42.scale = 1.2f;
						dust42.position = this.oldPos[num164] + base.Size / 2f + Main.rand.NextFloat() * this.velocity * 2f;
					}
				}
			}
			else if (this.type == 675)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageAttack, new Vector2?(base.Center));
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 676)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, new Vector2?(base.Center), null);
				}
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				for (int num165 = 0; num165 < 2; num165++)
				{
					if (Main.rand.Next(5) != 0)
					{
						int num166 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							4,
							256
						});
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num166, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
						dust2.velocity = dust2.velocity / 4f + this.velocity / 2f;
						dust2.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
						dust2.position = base.Center;
						dust2.position += new Vector2((float)(this.width * 2), 0f).RotatedBy((double)(6.2831855f * Main.rand.NextFloat()), default(Vector2)) * Main.rand.NextFloat();
						dust2.noLight = true;
						if (dust2.type == 4)
						{
							dust2.color = new Color(80, 170, 40, 120);
						}
					}
				}
			}
			else if (this.type == 686)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballShot, new Vector2?(base.Center));
				}
				if (this.ai[0] >= 2f)
				{
					this.alpha -= 25;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust43 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
					dust43.scale *= 0.7f;
					dust43.velocity += this.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
				{
					Dust dust44 = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0f, 0f, 50, default(Color), 1f);
					dust44.scale *= 0.85f;
					dust44.velocity += this.velocity * 0.85f;
					dust44.color = Color.Purple;
				}
			}
			else if (this.type == 711)
			{
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					for (int num167 = 0; num167 < 10; num167++)
					{
						Dust dust45 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
						dust45.scale *= 0.65f;
						dust45.velocity *= 1.5f;
						dust45.velocity += this.velocity * 0.3f;
						dust45.fadeIn = 0.7f;
					}
				}
				if (this.ai[0] >= 2f)
				{
					this.alpha -= 25;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust46 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 1f);
					dust46.scale *= 0.7f;
					dust46.velocity += this.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
				{
					Dust dust47 = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0f, 0f, 50, default(Color), 1f);
					dust47.scale *= 0.85f;
					dust47.velocity += this.velocity * 0.85f;
					dust47.color = Color.Purple;
				}
			}
			if (this.type == 299)
			{
				if (this.localAI[0] == 6f)
				{
					SoundEngine.PlaySound(SoundID.Item8, new Vector2?(this.position), null);
					for (int num168 = 0; num168 < 40; num168++)
					{
						int num169 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num169].velocity *= 3f;
						Main.dust[num169].velocity += this.velocity * 0.75f;
						Main.dust[num169].scale *= 1.2f;
						Main.dust[num169].noGravity = true;
					}
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] > 6f)
				{
					for (int num170 = 0; num170 < 3; num170++)
					{
						int num171 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
						Main.dust[num171].velocity *= 0.6f;
						Main.dust[num171].scale *= 1.4f;
						Main.dust[num171].noGravity = true;
					}
				}
			}
			else if (this.type == 270 || this.type == 837)
			{
				if (this.type == 270)
				{
					this.alpha = 0;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.frame++;
				if (this.frame > 2)
				{
					this.frame = 0;
				}
				if (this.type == 270)
				{
					for (int num172 = 0; num172 < 2; num172++)
					{
						int num173 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num173].position -= this.velocity;
						Main.dust[num173].noGravity = true;
						Dust dust48 = Main.dust[num173];
						dust48.velocity.X = dust48.velocity.X * 0.3f;
						Dust dust49 = Main.dust[num173];
						dust49.velocity.Y = dust49.velocity.Y * 0.3f;
					}
				}
				else
				{
					for (int num174 = 0; num174 < 2; num174++)
					{
						int num175 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num175].position -= this.velocity * 2f;
						Main.dust[num175].noGravity = true;
						Dust dust50 = Main.dust[num175];
						dust50.velocity.X = dust50.velocity.X * 0.3f;
						Dust dust51 = Main.dust[num175];
						dust51.velocity.Y = dust51.velocity.Y * 0.3f;
					}
				}
			}
			if (this.type == 259)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 10;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			if (this.type == 265)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.alpha == 0)
				{
					int num176 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num176].noGravity = true;
					Main.dust[num176].velocity *= 0.3f;
					Main.dust[num176].velocity -= this.velocity * 0.4f;
				}
			}
			if (this.type == 355)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.alpha == 0)
				{
					int num177 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num177].noGravity = true;
					Main.dust[num177].velocity *= 0.3f;
					Main.dust[num177].velocity -= this.velocity * 0.4f;
				}
			}
			if (this.type == 981 && Main.rand.Next(6) == 0)
			{
				int num178 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 279, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num178].noLightEmittence = true;
				Main.dust[num178].noGravity = true;
				Main.dust[num178].velocity *= 0.2f;
			}
			if (this.type == 357)
			{
				if (this.alpha < 170)
				{
					for (int num179 = 0; num179 < 10; num179++)
					{
						float x = this.position.X - this.velocity.X / 10f * (float)num179;
						float y = this.position.Y - this.velocity.Y / 10f * (float)num179;
						int num180 = Dust.NewDust(new Vector2(x, y), 1, 1, 206, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num180].alpha = this.alpha;
						Main.dust[num180].position.X = x;
						Main.dust[num180].position.Y = y;
						Main.dust[num180].velocity *= 0f;
						Main.dust[num180].noGravity = true;
					}
				}
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			else if (this.type == 207 || this.type == 837)
			{
				if (this.type == 207 && this.alpha < 170)
				{
					for (int num181 = 0; num181 < 10; num181++)
					{
						float x2 = this.position.X - this.velocity.X / 10f * (float)num181;
						float y2 = this.position.Y - this.velocity.Y / 10f * (float)num181;
						int num182 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num182].alpha = this.alpha;
						Main.dust[num182].position.X = x2;
						Main.dust[num182].position.Y = y2;
						Main.dust[num182].velocity *= 0f;
						Main.dust[num182].noGravity = true;
					}
				}
				float num183 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
				float num184 = this.localAI[0];
				if (num184 == 0f)
				{
					this.localAI[0] = num183;
					num184 = num183;
				}
				if (this.alpha > 0)
				{
					this.alpha -= 25;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float num185 = this.position.X;
				float num186 = this.position.Y;
				float num187 = 300f;
				bool flag5 = false;
				int num188 = 0;
				if (this.ai[1] == 0f)
				{
					for (int num189 = 0; num189 < 200; num189++)
					{
						if (Main.npc[num189].CanBeChasedBy(this, false) && (this.ai[1] == 0f || this.ai[1] == (float)(num189 + 1)))
						{
							float num190 = Main.npc[num189].position.X + (float)(Main.npc[num189].width / 2);
							float num191 = Main.npc[num189].position.Y + (float)(Main.npc[num189].height / 2);
							float num192 = Math.Abs(this.position.X + (float)(this.width / 2) - num190) + Math.Abs(this.position.Y + (float)(this.height / 2) - num191);
							if (num192 < num187 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num189].position, Main.npc[num189].width, Main.npc[num189].height))
							{
								num187 = num192;
								num185 = num190;
								num186 = num191;
								flag5 = true;
								num188 = num189;
							}
						}
					}
					if (flag5)
					{
						this.ai[1] = (float)(num188 + 1);
					}
					flag5 = false;
				}
				if (this.ai[1] > 0f)
				{
					int num193 = (int)(this.ai[1] - 1f);
					if (Main.npc[num193].active && Main.npc[num193].CanBeChasedBy(this, true) && !Main.npc[num193].dontTakeDamage)
					{
						float num194 = Main.npc[num193].position.X + (float)(Main.npc[num193].width / 2);
						float num195 = Main.npc[num193].position.Y + (float)(Main.npc[num193].height / 2);
						if (Math.Abs(this.position.X + (float)(this.width / 2) - num194) + Math.Abs(this.position.Y + (float)(this.height / 2) - num195) < 1000f)
						{
							flag5 = true;
							num185 = Main.npc[num193].position.X + (float)(Main.npc[num193].width / 2);
							num186 = Main.npc[num193].position.Y + (float)(Main.npc[num193].height / 2);
						}
					}
					else
					{
						this.ai[1] = 0f;
					}
				}
				if (!this.friendly)
				{
					flag5 = false;
				}
				if (flag5)
				{
					float num245 = num184;
					Vector2 vector26;
					vector26..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num196 = num185 - vector26.X;
					float num197 = num186 - vector26.Y;
					float num198 = (float)Math.Sqrt((double)(num196 * num196 + num197 * num197));
					num198 = num245 / num198;
					num196 *= num198;
					num197 *= num198;
					int num199 = 8;
					if (this.type == 837)
					{
						num199 = 32;
					}
					this.velocity.X = (this.velocity.X * (float)(num199 - 1) + num196) / (float)num199;
					this.velocity.Y = (this.velocity.Y * (float)(num199 - 1) + num197) / (float)num199;
				}
			}
			else if (this.type == 81 || this.type == 91)
			{
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 20f;
					this.velocity.Y = this.velocity.Y + 0.07f;
				}
			}
			else if (this.type == 174 || this.type == 605 || this.type == 920 || this.type == 921 || this.type == 926)
			{
				if (this.ai[0] >= 5f)
				{
					this.ai[0] = 5f;
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
			}
			else if (this.type == 937)
			{
				if (this.ai[0] >= 5f)
				{
					this.ai[0] = 5f;
					this.velocity.Y = this.velocity.Y + 0.07f;
				}
			}
			else if (this.type == 962)
			{
				this.frame = (int)this.ai[1];
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					this.rotation = this.velocity.ToRotation();
					for (int num200 = 0; num200 < 5; num200++)
					{
						Dust dust52 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, new Vector2?(this.velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat())), 0, default(Color), 1f);
						dust52.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust52.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					}
					for (int num201 = 0; num201 < 5; num201++)
					{
						Dust dust53 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, new Vector2?(Main.rand.NextVector2Circular(2f, 2f) + this.velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())), 0, default(Color), 1f);
						dust53.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust53.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
						dust53.fadeIn = 1f;
					}
				}
				if (this.ai[0] >= 5f)
				{
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
			}
			else if (this.type == 337)
			{
				if (this.position.Y > Main.player[this.owner].position.Y - 300f)
				{
					this.tileCollide = true;
				}
				if ((double)this.position.Y < Main.worldSurface * 16.0)
				{
					this.tileCollide = true;
				}
				this.frame = (int)this.ai[1];
				if (Main.rand.Next(2) == 0)
				{
					int num202 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num202].velocity *= 0.5f;
					Main.dust[num202].noGravity = true;
				}
			}
			else if (this.type == 645)
			{
				if (this.ai[1] != -1f && this.position.Y > this.ai[1])
				{
					this.tileCollide = true;
				}
				if (this.position.HasNaNs())
				{
					this.Kill();
					return;
				}
				bool flag8 = WorldGen.SolidTile(Framing.GetTileSafely((int)this.position.X / 16, (int)this.position.Y / 16));
				Dust dust3 = Main.dust[Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
				dust3.position = base.Center;
				dust3.velocity = Vector2.Zero;
				dust3.noGravity = true;
				if (flag8)
				{
					dust3.noLight = true;
				}
				if (this.ai[1] == -1f)
				{
					this.ai[0] += 1f;
					this.velocity = Vector2.Zero;
					this.tileCollide = false;
					this.penetrate = -1;
					this.position = base.Center;
					this.width = (this.height = 140);
					base.Center = this.position;
					this.alpha -= 10;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					num243 = this.frameCounter + 1;
					this.frameCounter = num243;
					if (num243 >= this.MaxUpdates * 3)
					{
						this.frameCounter = 0;
						this.frame++;
					}
					if (this.ai[0] >= (float)(Main.projFrames[this.type] * this.MaxUpdates * 3))
					{
						this.Kill();
					}
					return;
				}
				this.alpha = 255;
				if (this.numUpdates == 0)
				{
					int num203 = -1;
					float num204 = 60f;
					for (int num205 = 0; num205 < 200; num205++)
					{
						NPC nPC2 = Main.npc[num205];
						if (nPC2.CanBeChasedBy(this, false))
						{
							float num206 = base.Distance(nPC2.Center);
							if (num206 < num204 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
							{
								num204 = num206;
								num203 = num205;
							}
						}
					}
					if (num203 != -1)
					{
						this.ai[0] = 0f;
						this.ai[1] = -1f;
						this.netUpdate = true;
						return;
					}
				}
			}
			else if (this.type >= 424 && this.type <= 426)
			{
				if (this.position.Y > Main.player[this.owner].position.Y - 300f)
				{
					this.tileCollide = true;
				}
				if ((double)this.position.Y < Main.worldSurface * 16.0)
				{
					this.tileCollide = true;
				}
				this.scale = this.ai[1];
				this.rotation += this.velocity.X * 2f;
				Vector2 vector27 = base.Center + Vector2.Normalize(this.velocity) * 10f;
				Dust dust54 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
				dust54.position = vector27;
				dust54.velocity = this.velocity.RotatedBy(1.5707963705062866, default(Vector2)) * 0.33f + this.velocity / 4f;
				dust54.position += this.velocity.RotatedBy(1.5707963705062866, default(Vector2));
				dust54.fadeIn = 0.5f;
				dust54.noGravity = true;
				Dust dust55 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
				dust55.position = vector27;
				dust55.velocity = this.velocity.RotatedBy(-1.5707963705062866, default(Vector2)) * 0.33f + this.velocity / 4f;
				dust55.position += this.velocity.RotatedBy(-1.5707963705062866, default(Vector2));
				dust55.fadeIn = 0.5f;
				dust55.noGravity = true;
				for (int num207 = 0; num207 < 1; num207++)
				{
					int num208 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num208].velocity *= 0.5f;
					Main.dust[num208].scale *= 1.3f;
					Main.dust[num208].fadeIn = 1f;
					Main.dust[num208].noGravity = true;
				}
			}
			else if (this.type == 344)
			{
				if (WorldGen.SolidTile((int)this.position.X / 16, (int)(this.position.Y + this.velocity.Y) / 16 + 1, false) || WorldGen.SolidTile((int)(this.position.X + (float)this.width) / 16, (int)(this.position.Y + this.velocity.Y) / 16 + 1, false))
				{
					this.Kill();
					return;
				}
				this.localAI[1] += 1f;
				if (this.localAI[1] > 5f)
				{
					this.alpha -= 50;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
				this.frame = (int)this.ai[1];
				if (this.localAI[1] >= 20f)
				{
					this.velocity.Y = this.velocity.Y + 0.15f;
					this.velocity.X = this.velocity.X * 0.96f;
				}
				if (this.localAI[1] >= 25f)
				{
					this.localAI[1] = 20f;
					Vector2 zero = Vector2.Zero;
					float num209 = 0f;
					int num210 = 60;
					for (int num211 = 0; num211 < 1000; num211++)
					{
						Projectile projectile = Main.projectile[num211];
						if (projectile.whoAmI != this.whoAmI && projectile.active && projectile.type == this.type)
						{
							Vector2 vector28 = projectile.position - this.position;
							if (vector28.Length() <= (float)num210)
							{
								num209 += 1f;
								float num212 = Utils.Remap(vector28.Length(), 0f, (float)num210, 1f, 0f, true);
								zero.X += (float)(-(float)Math.Sign(vector28.X)) * num212;
							}
						}
					}
					if (num209 > 0f)
					{
						Vector2 vector29 = zero;
						vector29.Y = 0f;
						if (vector29.X == 0f)
						{
							vector29.X = 1f;
						}
						this.velocity += vector29 * 0.25f;
					}
				}
			}
			else if (this.type == 336 || this.type == 345)
			{
				if (this.type == 345 && this.localAI[0] == 0f)
				{
					this.localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item1, new Vector2?(this.position), null);
				}
				if (this.ai[0] >= 50f)
				{
					this.ai[0] = 50f;
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
			}
			else if (this.type == 246)
			{
				this.alpha -= 20;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 60f)
				{
					this.ai[0] = 60f;
					this.velocity.Y = this.velocity.Y + 0.15f;
				}
			}
			else if (this.type == 311)
			{
				if (this.alpha > 0)
				{
					this.alpha -= 50;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 30f)
				{
					this.ai[0] = 30f;
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
					}
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
			}
			else if (this.type == 312)
			{
				if (this.ai[0] >= 5f)
				{
					this.alpha = 0;
				}
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 30f;
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
				Lighting.AddLight(base.Center, 0.6f, 0.4f, 0.3f);
			}
			else if (this.type != 239 && this.type != 264)
			{
				if (this.type == 176)
				{
					if (this.ai[0] >= 15f)
					{
						this.ai[0] = 15f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 275 || this.type == 276)
				{
					if (this.alpha > 0)
					{
						this.alpha -= 30;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.ai[0] >= 35f)
					{
						this.ai[0] = 35f;
						this.velocity.Y = this.velocity.Y + 0.025f;
					}
					if (Main.expertMode)
					{
						float num213 = 18f;
						int num214 = (int)Player.FindClosest(base.Center, 1, 1);
						Vector2 vector30 = Main.player[num214].Center - base.Center;
						vector30.Normalize();
						vector30 *= num213;
						int num215 = 70;
						this.velocity = (this.velocity * (float)(num215 - 1) + vector30) / (float)num215;
						if (this.velocity.Length() < 14f)
						{
							this.velocity.Normalize();
							this.velocity *= 14f;
						}
						this.tileCollide = false;
						if (this.timeLeft > 180)
						{
							this.timeLeft = 180;
						}
					}
				}
				else if (this.type == 172)
				{
					if (this.ai[0] >= 17f)
					{
						this.ai[0] = 17f;
						this.velocity.Y = this.velocity.Y + 0.085f;
					}
				}
				else if (this.type == 117)
				{
					if (this.ai[0] >= 35f)
					{
						this.ai[0] = 35f;
						this.velocity.Y = this.velocity.Y + 0.06f;
					}
				}
				else if (this.type == 120)
				{
					int num216 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num216].noGravity = true;
					Main.dust[num216].velocity *= 0.3f;
					if (this.ai[0] >= 30f)
					{
						this.ai[0] = 30f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 195)
				{
					int num217 = 40;
					if (this.ai[0] >= (float)num217)
					{
						this.ai[0] = (float)num217;
						this.velocity.Y = this.velocity.Y + 0.15f;
						this.tileCollide = true;
					}
					else
					{
						this.tileCollide = (this.velocity.Y > 0f);
					}
				}
				else if (this.type == 267 || this.type == 477 || this.type == 478 || this.type == 479)
				{
					this.localAI[0] += 1f;
					if (this.localAI[0] > 3f)
					{
						this.alpha = 0;
					}
					if (this.ai[0] >= 20f)
					{
						this.ai[0] = 20f;
						if (this.type != 477)
						{
							this.velocity.Y = this.velocity.Y + 0.075f;
						}
					}
					if (this.type == 479 && Main.myPlayer == this.owner)
					{
						if (this.ai[1] >= 0f)
						{
							this.maxPenetrate = (this.penetrate = -1);
						}
						else if (this.penetrate < 0)
						{
							this.maxPenetrate = (this.penetrate = 1);
						}
						if (this.ai[1] >= 0f)
						{
							this.ai[1] += 1f;
						}
						if (this.ai[1] > (float)Main.rand.Next(5, 30))
						{
							this.ai[1] = -1000f;
							float num218 = this.velocity.Length();
							Vector2 vector31 = this.velocity;
							vector31.Normalize();
							int num219 = Main.rand.Next(2, 4);
							if (Main.rand.Next(4) == 0)
							{
								num219++;
							}
							for (int num220 = 0; num220 < num219; num220++)
							{
								Vector2 vector32;
								vector32..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
								vector32.Normalize();
								vector32 += vector31 * 2f;
								vector32.Normalize();
								vector32 *= num218;
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector32.X, vector32.Y, this.type, this.damage, this.knockBack, this.owner, 0f, -1000f, 0f);
							}
						}
					}
					if (this.type == 478 && Main.myPlayer == this.owner)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > (float)Main.rand.Next(5, 20))
						{
							if (this.timeLeft > 40)
							{
								this.timeLeft -= 20;
							}
							this.ai[1] = 0f;
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0f, 0f, 0f);
						}
					}
				}
				else if (this.type == 408)
				{
					if (this.ai[0] >= 45f)
					{
						this.ai[0] = 45f;
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
				}
				else if (this.type == 616)
				{
					if (this.alpha < 170)
					{
						float num221 = 3f;
						int num222 = 0;
						while ((float)num222 < num221)
						{
							int num223 = Dust.NewDust(this.position, 1, 1, 229, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num223].position = base.Center - this.velocity / num221 * (float)num222;
							Main.dust[num223].velocity *= 0f;
							Main.dust[num223].noGravity = true;
							Main.dust[num223].alpha = 200;
							Main.dust[num223].scale = 0.5f;
							num222++;
						}
					}
					float num224 = (float)Math.Sqrt((double)(this.velocity.X * this.velocity.X + this.velocity.Y * this.velocity.Y));
					float num225 = this.localAI[0];
					if (num225 == 0f)
					{
						this.localAI[0] = num224;
						num225 = num224;
					}
					if (this.alpha > 0)
					{
						this.alpha -= 25;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					float num226 = this.position.X;
					float num227 = this.position.Y;
					float num228 = 800f;
					bool flag6 = false;
					int num229 = 0;
					this.ai[0] += 1f;
					if (this.ai[0] > 20f)
					{
						this.ai[0] -= 1f;
						if (this.ai[1] == 0f)
						{
							for (int num230 = 0; num230 < 200; num230++)
							{
								if (Main.npc[num230].CanBeChasedBy(this, false) && (this.ai[1] == 0f || this.ai[1] == (float)(num230 + 1)))
								{
									float num231 = Main.npc[num230].position.X + (float)(Main.npc[num230].width / 2);
									float num232 = Main.npc[num230].position.Y + (float)(Main.npc[num230].height / 2);
									float num233 = Math.Abs(this.position.X + (float)(this.width / 2) - num231) + Math.Abs(this.position.Y + (float)(this.height / 2) - num232);
									if (num233 < num228 && Collision.CanHit(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), 1, 1, Main.npc[num230].position, Main.npc[num230].width, Main.npc[num230].height))
									{
										num228 = num233;
										num226 = num231;
										num227 = num232;
										flag6 = true;
										num229 = num230;
									}
								}
							}
							if (flag6)
							{
								this.ai[1] = (float)(num229 + 1);
							}
							flag6 = false;
						}
						if (this.ai[1] != 0f)
						{
							int num234 = (int)(this.ai[1] - 1f);
							if (Main.npc[num234].active && Main.npc[num234].CanBeChasedBy(this, true))
							{
								float num235 = Main.npc[num234].position.X + (float)(Main.npc[num234].width / 2);
								float num236 = Main.npc[num234].position.Y + (float)(Main.npc[num234].height / 2);
								if (Math.Abs(this.position.X + (float)(this.width / 2) - num235) + Math.Abs(this.position.Y + (float)(this.height / 2) - num236) < 1000f)
								{
									flag6 = true;
									num226 = Main.npc[num234].position.X + (float)(Main.npc[num234].width / 2);
									num227 = Main.npc[num234].position.Y + (float)(Main.npc[num234].height / 2);
								}
							}
						}
						if (!this.friendly)
						{
							flag6 = false;
						}
						if (flag6)
						{
							float num246 = num225;
							Vector2 vector33;
							vector33..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num237 = num226 - vector33.X;
							float num238 = num227 - vector33.Y;
							float num239 = (float)Math.Sqrt((double)(num237 * num237 + num238 * num238));
							num239 = num246 / num239;
							num237 *= num239;
							num238 *= num239;
							int num240 = 8;
							this.velocity.X = (this.velocity.X * (float)(num240 - 1) + num237) / (float)num240;
							this.velocity.Y = (this.velocity.Y * (float)(num240 - 1) + num238) / (float)num240;
						}
					}
				}
				else if (this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685)
				{
					if (this.ai[0] > 60f)
					{
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y + 0.3f;
					}
				}
				else if (this.type == 495)
				{
					int num241 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num241].noGravity = true;
					Main.dust[num241].velocity *= 0.3f;
					if (this.ai[0] >= 30f)
					{
						this.ai[0] = 30f;
						this.velocity.Y = this.velocity.Y + 0.04f;
					}
				}
				else if (this.type == 498)
				{
					if (this.localAI[0] == 0f)
					{
						this.localAI[0] += 1f;
						SoundEngine.PlaySound(SoundID.Item17, new Vector2?(this.position), null);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 50f)
					{
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y + 0.15f;
						this.rotation += (float)this.direction * 0.5f;
					}
					else
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 437)
				{
					if (this.ai[0] >= 12f)
					{
						if (this.ai[0] >= 20f)
						{
							this.Kill();
						}
						this.alpha += 30;
					}
				}
				else if (this.type != 442 && this.type != 634 && this.type != 635 && this.type != 675)
				{
					if (this.type == 686 || this.type == 711)
					{
						if (this.ai[0] >= 10f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.ai[0] >= 20f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.ai[0] > 20f)
						{
							this.ai[0] = 20f;
						}
						this.velocity.X = this.velocity.X * 0.99f;
						if (this.velocity.Y > 32f)
						{
							this.velocity.Y = 32f;
						}
					}
					else if (this.type == 639)
					{
						if (this.timeLeft <= this.MaxUpdates * 45 - 14)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
					}
					else if (this.type == 710)
					{
						if (this.ai[0] >= 0f)
						{
							this.ai[0] += 1f;
							if (this.ai[0] >= 20f)
							{
								this.velocity.Y = this.velocity.Y + 0.2f;
								if (this.velocity.Y > 0f)
								{
									this.velocity.X = this.velocity.X * 0.98f;
								}
								if (this.velocity.Y > 12f)
								{
									this.velocity.Y = 12f;
								}
							}
						}
					}
					else if (this.ai[0] >= 15f)
					{
						this.ai[0] = 15f;
						if (flag4)
						{
							this.velocity.Y = this.velocity.Y - 0.1f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
					}
				}
			}
			if (this.type == 921 || this.type == 926 || this.type == 937)
			{
				this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
			}
			else if (this.type == 248)
			{
				if (this.velocity.X < 0f)
				{
					this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
				}
				else
				{
					this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
				}
			}
			else if (this.type == 270 || this.type == 585 || this.type == 601 || this.type == 706 || this.type == 837)
			{
				this.spriteDirection = this.direction;
				if (this.direction < 0)
				{
					this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
				}
				else
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
				}
			}
			else if (this.type == 311)
			{
				if (this.ai[1] != 0f)
				{
					this.rotation += this.velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
				}
				else
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			else if (this.type == 312)
			{
				this.rotation += this.velocity.X * 0.02f;
			}
			else if (this.type == 675)
			{
				this.rotation += this.velocity.X * 0.03f;
			}
			else if (this.type != 676)
			{
				if (this.type == 408)
				{
					this.rotation = this.velocity.ToRotation();
					if (this.direction == -1)
					{
						this.rotation += 3.1415927f;
					}
				}
				else if (this.type == 435 || this.type == 459 || this.type == 682 || this.type == 709)
				{
					this.rotation = this.velocity.ToRotation();
					if (this.direction == -1)
					{
						this.rotation += 3.1415927f;
					}
				}
				else if (this.type == 660)
				{
					this.rotation = this.velocity.ToRotation() + 0.7853982f;
				}
				else if (this.type == 662 || this.type == 685)
				{
					this.rotation = this.velocity.ToRotation() - 3.1415927f - 0.7853982f;
				}
				else if (this.type == 680 || this.type == 684 || this.type == 686 || this.type == 711 || this.type == 712)
				{
					this.rotation = this.velocity.ToRotation() + 1.5707964f;
				}
				else if (this.type == 436)
				{
					this.rotation = this.velocity.ToRotation();
					this.rotation += 3.1415927f;
					if (this.direction == -1)
					{
						this.rotation += 3.1415927f;
					}
				}
				else if (this.type == 469)
				{
					if (this.velocity.X > 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
					else
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					}
				}
				else if (this.type == 477)
				{
					if (this.localAI[1] < 5f)
					{
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
						this.localAI[1] += 1f;
					}
					else
					{
						this.rotation = (this.rotation * 2f + (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f) / 3f;
					}
				}
				else if (this.type == 532)
				{
					this.rotation += 0.2f + Math.Abs(this.velocity.X) * 0.1f;
				}
				else if (this.type == 483)
				{
					this.rotation += this.velocity.X * 0.05f;
				}
				else if (this.type == 772)
				{
					this.rotation += (float)Math.Sign(this.velocity.X) * (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.05f;
				}
				else if (this.type == 485)
				{
					Vector2 vector34;
					vector34..ctor(this.ai[0], this.ai[1]);
					this.velocity = (this.velocity * 39f + vector34) / 40f;
					int num242 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num242].noGravity = true;
					Main.dust[num242].velocity *= 0.2f;
					Main.dust[num242].position = (Main.dust[num242].position + base.Center) / 2f;
					this.frameCounter++;
					if (this.frameCounter >= 2)
					{
						this.frameCounter = 0;
						this.frame++;
						if (this.frame >= 5)
						{
							this.frame = 0;
						}
					}
					if (this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)(0f - this.velocity.Y), (double)(0f - this.velocity.X));
					}
					else
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
					}
				}
				else if (this.type == 640)
				{
					if (this.velocity != Vector2.Zero)
					{
						this.rotation = this.velocity.ToRotation() + 1.5707964f;
					}
				}
				else if (this.type == 325)
				{
					this.rotation = this.velocity.ToRotation() - 1.5707964f;
				}
				else if (this.type != 344 && this.type != 498)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				}
			}
			bool flag7 = true;
			if (this.type == 577)
			{
				flag7 = false;
			}
			if (flag7)
			{
				if (flag4 && this.velocity.Y < -16f)
				{
					this.velocity.Y = -16f;
				}
				if (this.velocity.Y > 16f)
				{
					this.velocity.Y = 16f;
				}
			}
		}

		// Token: 0x06000DA5 RID: 3493 RVA: 0x0036B8F8 File Offset: 0x00369AF8
		private unsafe void AI_010()
		{
			if (this.type == 31 && this.ai[0] != 2f)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
					Dust dust = Main.dust[num];
					dust.velocity.X = dust.velocity.X * 0.4f;
				}
			}
			else if (this.type == 39)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
					Dust dust2 = Main.dust[num2];
					dust2.velocity.X = dust2.velocity.X * 0.4f;
				}
			}
			else if (this.type >= 411 && this.type <= 414)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num3 = 9;
					if (this.type == 412 || this.type == 414)
					{
						num3 = 11;
					}
					if (this.type == 413)
					{
						num3 = 19;
					}
					int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num3, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity -= this.velocity * 0.5f;
				}
			}
			else if (this.type == 40)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
					Main.dust[num5].velocity *= 0.4f;
				}
			}
			else if (this.type == 42 || this.type == 31)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, 0f, 0, default(Color), 1f);
					Dust dust3 = Main.dust[num6];
					dust3.velocity.X = dust3.velocity.X * 0.4f;
				}
			}
			else if (this.type == 56 || this.type == 65)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 0, default(Color), 1f);
					Dust dust4 = Main.dust[num7];
					dust4.velocity.X = dust4.velocity.X * 0.4f;
				}
			}
			else if (this.type == 67 || this.type == 68)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0f, 0f, 0, default(Color), 1f);
					Dust dust5 = Main.dust[num8];
					dust5.velocity.X = dust5.velocity.X * 0.4f;
				}
			}
			else if (this.type == 71)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0f, 0f, 0, default(Color), 1f);
					Dust dust6 = Main.dust[num9];
					dust6.velocity.X = dust6.velocity.X * 0.4f;
				}
			}
			else if (this.type == 179)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num10 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149, 0f, 0f, 0, default(Color), 1f);
					Dust dust7 = Main.dust[num10];
					dust7.velocity.X = dust7.velocity.X * 0.4f;
				}
			}
			else if (this.type == 241 || this.type == 354)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num11 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, 0f, 0, default(Color), 1f);
					Dust dust8 = Main.dust[num11];
					dust8.velocity.X = dust8.velocity.X * 0.4f;
				}
			}
			else if (this.type >= 736 && this.type <= 738)
			{
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Dust.NewDust(this.position, this.width, this.height, this.type - 736 + 275, 0f, 0f, 0, default(Color), 1f);
					if (num12 >= 0)
					{
						Main.dust[num12].velocity = Main.dust[num12].velocity * 0.5f + this.velocity * 0.5f;
					}
				}
			}
			else if (this.type != 109 && Main.rand.Next(20) == 0)
			{
				Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 1f);
			}
			if (this.type >= 736 && this.type <= 738)
			{
				if (this.localAI[0] == 0f)
				{
					this.frame = Main.rand.Next(3);
					this.scale = 1f - (float)Main.rand.Next(30) * 0.01f;
				}
				this.localAI[0] += 1f;
			}
			this.tileCollide = true;
			this.localAI[1] = 0f;
			if (Main.myPlayer == this.owner && this.ai[0] == 0f)
			{
				this.tileCollide = false;
				if (Main.player[this.owner].channel && (this.type < 736 || this.type > 738) && this.type != 40)
				{
					this.localAI[1] = -1f;
					float num13 = 12f;
					Vector2 vector;
					vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num14 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
					float num15 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
					if (Main.player[this.owner].gravDir == -1f)
					{
						num15 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
					}
					float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
					num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
					if (num16 > num13)
					{
						num16 = num13 / num16;
						num14 *= num16;
						num15 *= num16;
						if (num14 != this.velocity.X || num15 != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity.X = num14;
						this.velocity.Y = num15;
					}
					else
					{
						if (num14 != this.velocity.X || num15 != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity.X = num14;
						this.velocity.Y = num15;
					}
				}
				else
				{
					this.ai[0] = 1f;
					this.netUpdate = true;
				}
			}
			if (this.ai[0] == 1f && this.type != 109)
			{
				if (this.type == 42 || this.type == 65 || this.type == 68 || this.type == 354)
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 60f)
					{
						this.ai[1] = 60f;
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
				}
				else
				{
					this.velocity.Y = this.velocity.Y + 0.41f;
				}
			}
			else if (this.ai[0] == 2f && this.type != 109)
			{
				this.velocity.Y = this.velocity.Y + 0.2f;
				if ((double)this.velocity.X < -0.04)
				{
					this.velocity.X = this.velocity.X + 0.04f;
				}
				else if ((double)this.velocity.X > 0.04)
				{
					this.velocity.X = this.velocity.X - 0.04f;
				}
				else
				{
					this.velocity.X = 0f;
				}
			}
			if (this.owner == Main.myPlayer && this.tileCollide)
			{
				for (int i = (int)(this.position.X / 16f); i <= (int)((this.position.X + (float)this.width) / 16f); i++)
				{
					for (int j = (int)(this.position.Y / 16f); j <= (int)((this.position.Y + (float)this.height) / 16f); j++)
					{
						if (WorldGen.InWorld(i, j, 0))
						{
							Tile tile = Main.tile[i, j];
							if (!(tile == null) && tile.active())
							{
								if ((*tile.type >= 185 && *tile.type <= 187) || *tile.type == 165 || *tile.type == 12 || *tile.type == 665 || *tile.type == 639 || *tile.type == 105 || *tile.type == 178)
								{
									WorldGen.KillTile(i, j, false, false, false);
								}
								else if (tile.topSlope() && !TileID.Sets.Platforms[(int)(*tile.type)])
								{
									WorldGen.SlopeTile(i, j, 0, false);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 14, (float)i, (float)j, 0f, 0, 0, 0);
									}
									this.position.Y = this.position.Y - 16f;
								}
							}
						}
					}
				}
			}
			if (this.type >= 736 && this.type <= 738)
			{
				if (this.frame == 0)
				{
					this.rotation -= 0.1f;
				}
				else if (this.frame == 1)
				{
					this.rotation += 0.1f;
				}
				else
				{
					this.rotation += 0.15f;
				}
				if (this.velocity.Y > 10f)
				{
					this.velocity.Y = 10f;
					return;
				}
			}
			else
			{
				this.rotation += 0.1f;
				if (this.velocity.Y > 10f)
				{
					this.velocity.Y = 10f;
				}
			}
		}

		// Token: 0x06000DA6 RID: 3494 RVA: 0x0036C64C File Offset: 0x0036A84C
		private unsafe void AI_026()
		{
			if (!Main.player[this.owner].active)
			{
				this.active = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			int num = 85;
			bool flag6 = this.type >= 191 && this.type <= 194;
			if (this.type == 324)
			{
				num = 120;
			}
			if (this.type == 112)
			{
				num = 100;
			}
			if (this.type == 127)
			{
				num = 50;
			}
			int num201 = this.type;
			if (num201 <= 854)
			{
				if (num201 <= 821)
				{
					if (num201 != 816 && num201 != 821)
					{
						goto IL_161;
					}
				}
				else if (num201 != 825 && num201 != 854)
				{
					goto IL_161;
				}
			}
			else if (num201 <= 891)
			{
				if (num201 - 858 > 2)
				{
					switch (num201)
					{
					case 881:
						num = 95;
						if (Main.player[this.owner].ownedProjectileCounts[881] > 0)
						{
							num = 120;
							goto IL_161;
						}
						goto IL_161;
					case 882:
					case 883:
					case 886:
					case 887:
					case 888:
						goto IL_161;
					case 884:
					case 890:
						num = 80;
						goto IL_161;
					case 885:
					case 889:
					case 891:
						break;
					default:
						goto IL_161;
					}
				}
			}
			else if (num201 != 897 && num201 - 899 > 1 && num201 != 934)
			{
				goto IL_161;
			}
			num = 95;
			IL_161:
			if (this.type == 960)
			{
				Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
				flag = true;
			}
			if (flag6)
			{
				if (this.lavaWet)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
				}
				num = 60 + 30 * this.minionPos;
			}
			else if (this.type == 266)
			{
				num = 60 + 30 * this.minionPos;
			}
			bool flag7 = this.ai[0] == -1f || this.ai[0] == -2f;
			bool flag17 = this.ai[0] == -1f;
			bool flag8 = this.ai[0] == -2f;
			if (this.type == 111)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].bunny = false;
				}
				if (Main.player[this.owner].bunny)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 112)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].penguin = false;
				}
				if (Main.player[this.owner].penguin)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 334)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].puppy = false;
				}
				if (Main.player[this.owner].puppy)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 353)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].grinch = false;
				}
				if (Main.player[this.owner].grinch)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 127)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].turtle = false;
				}
				if (Main.player[this.owner].turtle)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 175)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].eater = false;
				}
				if (Main.player[this.owner].eater)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 197)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].skeletron = false;
				}
				if (Main.player[this.owner].skeletron)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 198)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].hornet = false;
				}
				if (Main.player[this.owner].hornet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 199)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].tiki = false;
				}
				if (Main.player[this.owner].tiki)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 200)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].lizard = false;
				}
				if (Main.player[this.owner].lizard)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 208)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].parrot = false;
				}
				if (Main.player[this.owner].parrot)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 209)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].truffle = false;
				}
				if (Main.player[this.owner].truffle)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 210)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].sapling = false;
				}
				if (Main.player[this.owner].sapling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 324)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].cSapling = false;
				}
				if (Main.player[this.owner].cSapling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 313)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].spider = false;
				}
				if (Main.player[this.owner].spider)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 314)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].squashling = false;
				}
				if (Main.player[this.owner].squashling)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 211)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].wisp = false;
				}
				if (Main.player[this.owner].wisp)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 236)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].dino = false;
				}
				if (Main.player[this.owner].dino)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 499)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].babyFaceMonster = false;
				}
				if (Main.player[this.owner].babyFaceMonster)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 765)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagSugarGlider = false;
				}
				if (Main.player[this.owner].petFlagSugarGlider)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 266)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].slime = false;
				}
				if (Main.player[this.owner].slime)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 268)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].eyeSpring = false;
				}
				if (Main.player[this.owner].eyeSpring)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 269)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].snowman = false;
				}
				if (Main.player[this.owner].snowman)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 319)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].blackCat = false;
				}
				if (Main.player[this.owner].blackCat)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 380)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].zephyrfish = false;
				}
				if (Main.player[this.owner].zephyrfish)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 774)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBabyShark = false;
				}
				if (Main.player[this.owner].petFlagBabyShark)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 815)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagLilHarpy = false;
				}
				if (Main.player[this.owner].petFlagLilHarpy)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 816)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagFennecFox = false;
				}
				if (Main.player[this.owner].petFlagFennecFox)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 817)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagGlitteryButterfly = false;
				}
				if (Main.player[this.owner].petFlagGlitteryButterfly)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 821)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBabyImp = false;
				}
				if (Main.player[this.owner].petFlagBabyImp)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 825)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBabyRedPanda = false;
				}
				if (Main.player[this.owner].petFlagBabyRedPanda)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 854)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagPlantero = false;
				}
				if (Main.player[this.owner].petFlagPlantero)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 858)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagDynamiteKitten = false;
				}
				if (Main.player[this.owner].petFlagDynamiteKitten)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 859)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBabyWerewolf = false;
				}
				if (Main.player[this.owner].petFlagBabyWerewolf)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 860)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagShadowMimic = false;
				}
				if (Main.player[this.owner].petFlagShadowMimic)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 875)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagVoltBunny = false;
				}
				if (Main.player[this.owner].petFlagVoltBunny)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 881)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagKingSlimePet = false;
				}
				if (Main.player[this.owner].petFlagKingSlimePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 884)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBrainOfCthulhuPet = false;
				}
				if (Main.player[this.owner].petFlagBrainOfCthulhuPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 885)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagSkeletronPet = false;
				}
				if (Main.player[this.owner].petFlagSkeletronPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 886)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagQueenBeePet = false;
				}
				if (Main.player[this.owner].petFlagQueenBeePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 889)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagSkeletronPrimePet = false;
				}
				if (Main.player[this.owner].petFlagSkeletronPrimePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 890)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagPlanteraPet = false;
				}
				if (Main.player[this.owner].petFlagPlanteraPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 891)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagGolemPet = false;
				}
				if (Main.player[this.owner].petFlagGolemPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 892)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagDukeFishronPet = false;
				}
				if (Main.player[this.owner].petFlagDukeFishronPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 894)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagMoonLordPet = false;
				}
				if (Main.player[this.owner].petFlagMoonLordPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 897)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagEverscreamPet = false;
				}
				if (Main.player[this.owner].petFlagEverscreamPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 899)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagMartianPet = false;
				}
				if (Main.player[this.owner].petFlagMartianPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 900)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagDD2OgrePet = false;
				}
				if (Main.player[this.owner].petFlagDD2OgrePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 901)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagDD2BetsyPet = false;
				}
				if (Main.player[this.owner].petFlagDD2BetsyPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 934)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagQueenSlimePet = false;
				}
				if (Main.player[this.owner].petFlagQueenSlimePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 956)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBerniePet = false;
				}
				if (Main.player[this.owner].petFlagBerniePet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 958)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagDeerclopsPet = false;
				}
				if (Main.player[this.owner].petFlagDeerclopsPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 959)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagPigPet = false;
				}
				if (Main.player[this.owner].petFlagPigPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 960)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagChesterPet = false;
				}
				if (Main.player[this.owner].petFlagChesterPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 994)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagJunimoPet = false;
				}
				if (Main.player[this.owner].petFlagJunimoPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 998)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagBlueChickenPet = false;
				}
				if (Main.player[this.owner].petFlagBlueChickenPet)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 1003)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagSpiffo = false;
				}
				if (Main.player[this.owner].petFlagSpiffo)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 1004)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].petFlagCaveling = false;
				}
				if (Main.player[this.owner].petFlagCaveling)
				{
					this.timeLeft = 2;
				}
			}
			if (flag6)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].pygmy = false;
				}
				if (Main.player[this.owner].pygmy)
				{
					this.timeLeft = Main.rand.Next(2, 10);
				}
			}
			if (this.type >= 390 && this.type <= 392)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].spiderMinion = false;
				}
				if (Main.player[this.owner].spiderMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 398)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].miniMinotaur = false;
				}
				if (Main.player[this.owner].miniMinotaur)
				{
					this.timeLeft = 2;
				}
			}
			if (flag7)
			{
				this.timeLeft = 2;
			}
			if (flag6 || this.type == 266 || (this.type >= 390 && this.type <= 392))
			{
				num = 10;
				int num2 = 40 * (this.minionPos + 1) * Main.player[this.owner].direction;
				if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2) - (float)num + (float)num2)
				{
					flag2 = true;
				}
				else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2) + (float)num + (float)num2)
				{
					flag3 = true;
				}
			}
			else if (this.type == 891)
			{
				num = 30;
				float num3 = (float)(-50 * -(float)Main.player[this.owner].direction);
				float num4 = Main.player[this.owner].Center.X + num3;
				if (num4 < this.position.X + (float)(this.width / 2) - (float)num)
				{
					flag2 = true;
				}
				else if (num4 > this.position.X + (float)(this.width / 2) + (float)num)
				{
					flag3 = true;
				}
			}
			else if (this.type == 960 && !flag7)
			{
				num = 10;
				Player player = Main.player[this.owner];
				int num5 = (player.Center.X - base.Center.X > 0f) ? 1 : -1;
				if (player.velocity.X != 0f)
				{
					num5 = player.direction;
				}
				float num6 = (float)(-70 * num5);
				float num7 = player.Center.X + num6;
				if (num7 < base.Center.X - (float)num)
				{
					flag2 = true;
				}
				else if (num7 > base.Center.X + (float)num)
				{
					flag3 = true;
				}
			}
			else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2) - (float)num)
			{
				flag2 = true;
			}
			else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2) + (float)num)
			{
				flag3 = true;
			}
			if (flag17)
			{
				flag2 = false;
				flag3 = true;
			}
			if (flag8)
			{
				flag2 = false;
				flag3 = false;
			}
			if (this.type == 175)
			{
				float num8 = 0.1f;
				this.tileCollide = false;
				int num9 = 300;
				Vector2 vector;
				vector..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num10 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector.X;
				float num11 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector.Y;
				if (this.type == 127)
				{
					num11 = Main.player[this.owner].position.Y - vector.Y;
				}
				float num12 = (float)Math.Sqrt((double)(num10 * num10 + num11 * num11));
				float num13 = 7f;
				float num14 = 2000f;
				bool flag18 = num12 > num14;
				if (num12 < (float)num9 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num12 < 150f)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						this.velocity *= 0.99f;
					}
					num8 = 0.01f;
					if (num10 < -2f)
					{
						num10 = -2f;
					}
					if (num10 > 2f)
					{
						num10 = 2f;
					}
					if (num11 < -2f)
					{
						num11 = -2f;
					}
					if (num11 > 2f)
					{
						num11 = 2f;
					}
				}
				else
				{
					if (num12 > 300f)
					{
						num8 = 0.2f;
					}
					num12 = num13 / num12;
					num10 *= num12;
					num11 *= num12;
				}
				if (flag18)
				{
					int num15 = 17;
					for (int i = 0; i < 12; i++)
					{
						float speedX = 1f - Main.rand.NextFloat() * 2f;
						float speedY = 1f - Main.rand.NextFloat() * 2f;
						int num16 = Dust.NewDust(this.position, this.width, this.height, num15, speedX, speedY, 0, default(Color), 1f);
						Main.dust[num16].noLightEmittence = true;
						Main.dust[num16].noGravity = true;
					}
					base.Center = Main.player[this.owner].Center;
					this.velocity = Vector2.Zero;
					if (Main.myPlayer == this.owner)
					{
						this.netUpdate = true;
					}
				}
				if (Math.Abs(num10) > Math.Abs(num11) || num8 == 0.05f)
				{
					if (this.velocity.X < num10)
					{
						this.velocity.X = this.velocity.X + num8;
						if (num8 > 0.05f && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X + num8;
						}
					}
					if (this.velocity.X > num10)
					{
						this.velocity.X = this.velocity.X - num8;
						if (num8 > 0.05f && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X - num8;
						}
					}
				}
				if (Math.Abs(num10) <= Math.Abs(num11) || num8 == 0.05f)
				{
					if (this.velocity.Y < num11)
					{
						this.velocity.Y = this.velocity.Y + num8;
						if (num8 > 0.05f && this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y + num8;
						}
					}
					if (this.velocity.Y > num11)
					{
						this.velocity.Y = this.velocity.Y - num8;
						if (num8 > 0.05f && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y - num8;
						}
					}
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
				this.frameCounter++;
				if (this.frameCounter > 6)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 1)
				{
					this.frame = 0;
				}
				return;
			}
			if (this.type == 197)
			{
				float num17 = 0.1f;
				this.tileCollide = false;
				int num18 = 300;
				Vector2 vector2;
				vector2..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num19 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector2.X;
				float num20 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector2.Y;
				if (this.type == 127)
				{
					num20 = Main.player[this.owner].position.Y - vector2.Y;
				}
				float num21 = (float)Math.Sqrt((double)(num19 * num19 + num20 * num20));
				float num22 = 3f;
				if (num21 > 500f)
				{
					this.localAI[0] = 10000f;
				}
				if (this.localAI[0] >= 10000f)
				{
					num22 = 14f;
				}
				float num23 = 2000f;
				bool flag19 = num21 > num23;
				if (num21 < (float)num18 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num21 < 150f)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						this.velocity *= 0.99f;
					}
					num17 = 0.01f;
					if (num19 < -2f)
					{
						num19 = -2f;
					}
					if (num19 > 2f)
					{
						num19 = 2f;
					}
					if (num20 < -2f)
					{
						num20 = -2f;
					}
					if (num20 > 2f)
					{
						num20 = 2f;
					}
				}
				else
				{
					if (num21 > 300f)
					{
						num17 = 0.2f;
					}
					num21 = num22 / num21;
					num19 *= num21;
					num20 *= num21;
				}
				if (flag19)
				{
					int num24 = 26;
					for (int j = 0; j < 12; j++)
					{
						float speedX2 = 1f - Main.rand.NextFloat() * 2f;
						float speedY2 = 1f - Main.rand.NextFloat() * 2f;
						int num25 = Dust.NewDust(this.position, this.width, this.height, num24, speedX2, speedY2, 0, default(Color), 1f);
						Main.dust[num25].noLightEmittence = true;
						Main.dust[num25].noGravity = true;
					}
					base.Center = Main.player[this.owner].Center;
					this.velocity = Vector2.Zero;
					if (Main.myPlayer == this.owner)
					{
						this.netUpdate = true;
					}
				}
				if (this.velocity.X < num19)
				{
					this.velocity.X = this.velocity.X + num17;
					if (num17 > 0.05f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num17;
					}
				}
				if (this.velocity.X > num19)
				{
					this.velocity.X = this.velocity.X - num17;
					if (num17 > 0.05f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num17;
					}
				}
				if (this.velocity.Y < num20)
				{
					this.velocity.Y = this.velocity.Y + num17;
					if (num17 > 0.05f && this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num17;
					}
				}
				if (this.velocity.Y > num20)
				{
					this.velocity.Y = this.velocity.Y - num17;
					if (num17 > 0.05f && this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num17;
					}
				}
				this.localAI[0] += (float)Main.rand.Next(10);
				if (this.localAI[0] > 10000f)
				{
					if (this.localAI[1] == 0f)
					{
						if (this.velocity.X < 0f)
						{
							this.localAI[1] = -1f;
						}
						else
						{
							this.localAI[1] = 1f;
						}
					}
					this.rotation += 0.25f * this.localAI[1];
					if (this.localAI[0] > 12000f)
					{
						this.localAI[0] = 0f;
					}
				}
				else
				{
					this.localAI[1] = 0f;
					float num26 = this.velocity.X * 0.1f;
					if (this.rotation > num26)
					{
						this.rotation -= (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
						if (this.rotation < num26)
						{
							this.rotation = num26;
						}
					}
					if (this.rotation < num26)
					{
						this.rotation += (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * 0.01f;
						if (this.rotation > num26)
						{
							this.rotation = num26;
						}
					}
				}
				if ((double)this.rotation > 6.28)
				{
					this.rotation -= 6.28f;
				}
				if ((double)this.rotation < -6.28)
				{
					this.rotation += 6.28f;
				}
				return;
			}
			if (this.type == 198 || this.type == 380 || this.type == 774 || this.type == 815 || this.type == 817 || this.type == 886 || this.type == 892 || this.type == 894 || this.type == 901)
			{
				float num27 = 0.4f;
				if (this.type == 380)
				{
					num27 = 0.3f;
				}
				if (this.type == 774)
				{
					num27 = 0.3f;
				}
				this.tileCollide = false;
				int num28 = 100;
				float num29 = 50f;
				float num30 = 400f;
				float num31 = num30 / 2f;
				float num32 = 2000f;
				bool flag9 = false;
				Vector2 vector3;
				vector3..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num33 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector3.X;
				float num34 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector3.Y;
				if (this.type == 774)
				{
					num29 = 2f;
					float num35 = (float)Math.Sin((double)(6.2831855f * ((float)Main.player[this.owner].miscCounter / 60f)));
					float num36 = Utils.GetLerpValue(0.5f, 1f, num35, true);
					if (new Vector2(num33 - (float)(70 * Main.player[this.owner].direction), num34 - 60f).Length() > 50f)
					{
						num35 = 0f;
						num36 = 0f;
					}
					num34 += -60f + num36 * -8f + num35 * 8f;
					num33 += (float)(70 * -(float)Main.player[this.owner].direction);
				}
				else
				{
					if (this.type != 892 && this.type != 894)
					{
						num34 += (float)Main.rand.Next(-10, 21);
						num33 += (float)Main.rand.Next(-10, 21);
					}
					num33 += (float)(60 * -(float)Main.player[this.owner].direction);
					num34 -= 60f;
				}
				Vector2 vector4;
				vector4..ctor(num33, num34);
				if (this.type == 127)
				{
					num34 = Main.player[this.owner].position.Y - vector3.Y;
				}
				float num37 = (float)Math.Sqrt((double)(num33 * num33 + num34 * num34));
				float num38 = num37;
				float num39 = 14f;
				if (this.type == 380)
				{
					num39 = 6f;
				}
				if (this.type == 815 || this.type == 817)
				{
					num39 = ((num37 >= num30) ? 10f : 6f);
				}
				if (this.type == 892 || this.type == 894 || this.type == 901)
				{
					if (num37 < num31)
					{
					}
					num39 = ((num37 >= num30) ? 12f : 9f);
				}
				if (this.type == 774)
				{
					num39 = 5f;
				}
				if (num37 < (float)num28 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				if (num37 < num29)
				{
					if (Math.Abs(this.velocity.X) > 2f || Math.Abs(this.velocity.Y) > 2f)
					{
						if (this.type == 892 || this.type == 892)
						{
							this.velocity *= 0.95f;
						}
						else
						{
							this.velocity *= 0.99f;
						}
					}
					num27 = 0.01f;
				}
				else
				{
					if (this.type == 892 || this.type == 894 || this.type == 901)
					{
						if (num37 < 100f)
						{
							num27 = 0.1f;
						}
						if (num37 > num32)
						{
							flag9 = true;
						}
						else if (num37 > num30)
						{
							num27 = 0.7f;
						}
						else if (num37 > num31)
						{
							num27 = 0.5f;
						}
					}
					else if (this.type == 815 || this.type == 817)
					{
						if (num37 < 100f)
						{
							num27 = 0.1f;
						}
						if (num37 > num32)
						{
							flag9 = true;
						}
						else if (this.type != 815 && num37 > num30)
						{
							num27 = 0.5f;
						}
					}
					else if (this.type == 380)
					{
						if (num37 < 100f)
						{
							num27 = 0.1f;
						}
						if (num37 > 300f)
						{
							num27 = 0.4f;
						}
						if (num37 > num32)
						{
							flag9 = true;
						}
					}
					else if (this.type == 198 || this.type == 886)
					{
						if (num37 < 100f)
						{
							num27 = 0.1f;
						}
						if (num37 > 300f)
						{
							num27 = 0.6f;
						}
						if (num37 > num32)
						{
							flag9 = true;
						}
					}
					else if (this.type == 774)
					{
						if (num37 < 40f)
						{
							num27 = 0.1f;
						}
						if (num37 > 300f)
						{
							num27 = 0.6f;
						}
						if (num37 > num32)
						{
							flag9 = true;
						}
					}
					num37 = num39 / num37;
					num33 *= num37;
					num34 *= num37;
				}
				if (this.velocity.X < num33)
				{
					this.velocity.X = this.velocity.X + num27;
					if (num27 > 0.05f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num27;
					}
				}
				if (this.velocity.X > num33)
				{
					this.velocity.X = this.velocity.X - num27;
					if (num27 > 0.05f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num27;
					}
				}
				if (this.velocity.Y < num34)
				{
					this.velocity.Y = this.velocity.Y + num27;
					if (num27 > 0.05f && this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num27 * 2f;
					}
				}
				if (this.velocity.Y > num34)
				{
					this.velocity.Y = this.velocity.Y - num27;
					if (num27 > 0.05f && this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num27 * 2f;
					}
				}
				if ((double)this.velocity.X > 0.25)
				{
					this.direction = -1;
				}
				else if ((double)this.velocity.X < -0.25)
				{
					this.direction = 1;
				}
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.05f;
				if (flag9)
				{
					int num40 = 33;
					if (this.type == 198 || this.type == 886)
					{
						num40 = 147;
					}
					if (this.type == 815)
					{
						num40 = 31;
					}
					if (this.type == 817)
					{
						num40 = 21;
					}
					for (int k = 0; k < 12; k++)
					{
						float speedX3 = 1f - Main.rand.NextFloat() * 2f;
						float speedY3 = 1f - Main.rand.NextFloat() * 2f;
						int num41 = Dust.NewDust(this.position, this.width, this.height, num40, speedX3, speedY3, 0, default(Color), 1f);
						Main.dust[num41].noLightEmittence = true;
						Main.dust[num41].noGravity = true;
					}
					base.Center = Main.player[this.owner].Center;
					this.velocity = Vector2.Zero;
					if (Main.myPlayer == this.owner)
					{
						this.netUpdate = true;
					}
				}
				bool flag10 = false;
				int num42 = 3;
				int num43 = 0;
				int num44 = 3;
				if (this.type == 380)
				{
					num42 = 6;
				}
				if (this.type == 815)
				{
					num42 = 5;
					num43 = 0;
					num44 = 5;
					if (num38 > num30)
					{
						num43 = 6;
						num44 = 9;
					}
				}
				if (this.type == 817)
				{
					num42 = 5;
					num43 = 0;
					num44 = 2;
					flag10 = true;
				}
				if (this.type == 901)
				{
					num42 = 4;
					num43 = 0;
					num44 = 5;
					if (num38 > num30 / 2f)
					{
						num42 = 3;
						num43 = 6;
						num44 = 11;
					}
				}
				if (this.type == 892)
				{
					num42 = 6;
					num43 = 0;
					num44 = Main.projFrames[this.type] - 1;
				}
				if (this.type == 886 || this.type == 894)
				{
					num42 = 4;
					num43 = 0;
					num44 = Main.projFrames[this.type] - 1;
				}
				if (this.type == 774)
				{
					if (Main.player[this.owner].velocity.Length() < 2f && vector4.Length() < 10f)
					{
						this.direction = -Main.player[this.owner].direction;
						this.spriteDirection = this.direction;
					}
					num42 = 6;
					if (!this.wet)
					{
						num43 += 4;
						num44 += 4;
					}
					this.rotation = this.velocity.X * 0.05f + Math.Abs(this.velocity.Y * -0.05f);
				}
				if (flag10)
				{
					int num45 = num42 * (num44 - num43) * 2;
					this.frameCounter++;
					if (this.frameCounter >= num45)
					{
						this.frameCounter = 0;
					}
					this.frame = this.frameCounter / num42;
					if (this.frame > num44)
					{
						this.frame = num44 + (num44 - this.frame);
					}
					this.frame = (int)MathHelper.Clamp((float)this.frame, (float)num43, (float)num44);
					return;
				}
				num201 = this.frameCounter + 1;
				this.frameCounter = num201;
				if (num201 >= num42)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame < num43 || this.frame > num44)
					{
						this.frame = num43;
					}
				}
				return;
			}
			else if (this.type == 211)
			{
				float num46 = 0.2f;
				float num47 = 5f;
				this.tileCollide = false;
				Vector2 vector5;
				vector5..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num48 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector5.X;
				float num49 = Main.player[this.owner].position.Y + Main.player[this.owner].gfxOffY + (float)(Main.player[this.owner].height / 2) - vector5.Y;
				if (Main.player[this.owner].controlLeft)
				{
					num48 -= 120f;
				}
				else if (Main.player[this.owner].controlRight)
				{
					num48 += 120f;
				}
				if (Main.player[this.owner].controlDown)
				{
					num49 += 120f;
				}
				else
				{
					if (Main.player[this.owner].controlUp)
					{
						num49 -= 120f;
					}
					num49 -= 60f;
				}
				float num50 = (float)Math.Sqrt((double)(num48 * num48 + num49 * num49));
				if (num50 > 1000f)
				{
					this.position.X = this.position.X + num48;
					this.position.Y = this.position.Y + num49;
				}
				if (this.localAI[0] == 1f)
				{
					if (num50 < 10f)
					{
						Player player2 = Main.player[this.owner];
						if (Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y) < num47 && (player2.velocity.Y == 0f || (player2.mount.Active && player2.mount.CanFly())))
						{
							this.localAI[0] = 0f;
						}
					}
					num47 = 12f;
					if (num50 < num47)
					{
						this.velocity.X = num48;
						this.velocity.Y = num49;
					}
					else
					{
						num50 = num47 / num50;
						this.velocity.X = num48 * num50;
						this.velocity.Y = num49 * num50;
					}
					if ((double)this.velocity.X > 0.5)
					{
						this.direction = -1;
					}
					else if ((double)this.velocity.X < -0.5)
					{
						this.direction = 1;
					}
					this.spriteDirection = this.direction;
					this.rotation -= (0.2f + Math.Abs(this.velocity.X) * 0.025f) * (float)this.direction;
					this.frameCounter++;
					if (this.frameCounter > 3)
					{
						this.frame++;
						this.frameCounter = 0;
					}
					if (this.frame < 5)
					{
						this.frame = 5;
					}
					if (this.frame > 9)
					{
						this.frame = 5;
					}
					for (int l = 0; l < 2; l++)
					{
						int num51 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 4f), 14, 14, 156, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num51].velocity *= 0.2f;
						Main.dust[num51].noGravity = true;
						Main.dust[num51].scale = 1.25f;
						Main.dust[num51].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
					}
					return;
				}
				if (num50 > 200f)
				{
					this.localAI[0] = 1f;
				}
				if ((double)this.velocity.X > 0.5)
				{
					this.direction = -1;
				}
				else if ((double)this.velocity.X < -0.5)
				{
					this.direction = 1;
				}
				this.spriteDirection = this.direction;
				if (num50 < 10f)
				{
					this.velocity.X = num48;
					this.velocity.Y = num49;
					this.rotation = this.velocity.X * 0.05f;
					if (num50 < num47)
					{
						this.position += this.velocity;
						this.velocity *= 0f;
						num46 = 0f;
					}
					this.direction = -Main.player[this.owner].direction;
				}
				num50 = num47 / num50;
				num48 *= num50;
				num49 *= num50;
				if (this.velocity.X < num48)
				{
					this.velocity.X = this.velocity.X + num46;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				if (this.velocity.X > num48)
				{
					this.velocity.X = this.velocity.X - num46;
					if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
				}
				if (this.velocity.Y < num49)
				{
					this.velocity.Y = this.velocity.Y + num46;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.99f;
					}
				}
				if (this.velocity.Y > num49)
				{
					this.velocity.Y = this.velocity.Y - num46;
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.99f;
					}
				}
				if (this.velocity.X != 0f || this.velocity.Y != 0f)
				{
					this.rotation = this.velocity.X * 0.05f;
				}
				this.frameCounter++;
				if (this.frameCounter > 3)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 4)
				{
					this.frame = 0;
				}
				return;
			}
			else
			{
				if (this.type == 199)
				{
					float num52 = 0.1f;
					this.tileCollide = false;
					int num53 = 200;
					Vector2 vector6;
					vector6..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num54 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector6.X;
					float num55 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector6.Y;
					num55 -= 60f;
					num54 -= 2f;
					if (this.type == 127)
					{
						num55 = Main.player[this.owner].position.Y - vector6.Y;
					}
					float num56 = (float)Math.Sqrt((double)(num54 * num54 + num55 * num55));
					float num57 = 4f;
					float num58 = num56;
					float num59 = 2000f;
					bool flag20 = num56 > num59;
					if (num56 < (float)num53 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[0] = 0f;
						if (this.velocity.Y < -6f)
						{
							this.velocity.Y = -6f;
						}
					}
					if (num56 < 4f)
					{
						this.velocity.X = num54;
						this.velocity.Y = num55;
						num52 = 0f;
					}
					else
					{
						if (num56 > 350f)
						{
							num52 = 0.2f;
							num57 = 10f;
						}
						num56 = num57 / num56;
						num54 *= num56;
						num55 *= num56;
					}
					if (flag20)
					{
						int num60 = 2;
						for (int m = 0; m < 12; m++)
						{
							float speedX4 = 1f - Main.rand.NextFloat() * 2f;
							float speedY4 = 1f - Main.rand.NextFloat() * 2f;
							int num61 = Dust.NewDust(this.position, this.width, this.height, num60, speedX4, speedY4, 0, default(Color), 1f);
							Main.dust[num61].noLightEmittence = true;
							Main.dust[num61].noGravity = true;
						}
						base.Center = Main.player[this.owner].Center;
						this.velocity = Vector2.Zero;
						if (Main.myPlayer == this.owner)
						{
							this.netUpdate = true;
						}
					}
					if (this.velocity.X < num54)
					{
						this.velocity.X = this.velocity.X + num52;
						if (this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X + num52;
						}
					}
					if (this.velocity.X > num54)
					{
						this.velocity.X = this.velocity.X - num52;
						if (this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X - num52;
						}
					}
					if (this.velocity.Y < num55)
					{
						this.velocity.Y = this.velocity.Y + num52;
						if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y + num52;
						}
					}
					if (this.velocity.Y > num55)
					{
						this.velocity.Y = this.velocity.Y - num52;
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y - num52;
						}
					}
					this.direction = -Main.player[this.owner].direction;
					this.spriteDirection = 1;
					this.rotation = this.velocity.Y * 0.05f * (float)(-(float)this.direction);
					if (num58 >= 50f)
					{
						this.frameCounter++;
						if (this.frameCounter <= 6)
						{
							return;
						}
						this.frameCounter = 0;
						if (this.velocity.X < 0f)
						{
							if (this.frame < 2)
							{
								this.frame++;
							}
							if (this.frame > 2)
							{
								this.frame--;
								return;
							}
						}
						else
						{
							if (this.frame < 6)
							{
								this.frame++;
							}
							if (this.frame > 6)
							{
								this.frame--;
								return;
							}
						}
					}
					else
					{
						this.frameCounter++;
						if (this.frameCounter > 6)
						{
							this.frame += this.direction;
							this.frameCounter = 0;
						}
						if (this.frame > 7)
						{
							this.frame = 0;
						}
						if (this.frame < 0)
						{
							this.frame = 7;
						}
					}
					return;
				}
				if (this.type != 885 && this.type != 889)
				{
					bool flag11 = this.ai[1] == 0f;
					if (flag)
					{
						flag11 = true;
					}
					if (flag11)
					{
						int num62 = 500;
						if (this.type == 127)
						{
							num62 = 200;
						}
						if (this.type == 208)
						{
							num62 = 300;
						}
						num201 = this.type;
						if (num201 <= 860)
						{
							if (num201 <= 821)
							{
								if (num201 != 816)
								{
									if (num201 != 821)
									{
										goto IL_405B;
									}
									goto IL_4054;
								}
							}
							else if (num201 != 825 && num201 != 854 && num201 - 858 > 2)
							{
								goto IL_405B;
							}
						}
						else if (num201 <= 884)
						{
							if (num201 != 881 && num201 != 884)
							{
								goto IL_405B;
							}
						}
						else if (num201 - 890 > 1)
						{
							switch (num201)
							{
							case 897:
							case 900:
								break;
							case 898:
								goto IL_405B;
							case 899:
								goto IL_4054;
							default:
								if (num201 != 934)
								{
									goto IL_405B;
								}
								break;
							}
						}
						num62 = 400;
						goto IL_405B;
						IL_4054:
						num62 = 500;
						IL_405B:
						if (flag6 || this.type == 266 || (this.type >= 390 && this.type <= 392))
						{
							num62 += 40 * this.minionPos;
							if (this.localAI[0] > 0f)
							{
								num62 += 500;
							}
							if (this.type == 266 && this.localAI[0] > 0f)
							{
								num62 += 100;
							}
							if (this.type >= 390 && this.type <= 392 && this.localAI[0] > 0f)
							{
								num62 += 400;
							}
						}
						if (Main.player[this.owner].rocketDelay2 > 0)
						{
							this.ai[0] = 1f;
						}
						Vector2 vector7;
						vector7..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num202 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector7.X;
						float num63 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector7.Y;
						float num64 = (float)Math.Sqrt((double)(num202 * num202 + num63 * num63));
						if (!flag7)
						{
							if (num64 > 2000f)
							{
								this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
								this.position.Y = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - (float)(this.height / 2);
							}
							else if (num64 > (float)num62 || (Math.Abs(num63) > 300f && ((!flag6 && this.type != 266 && (this.type < 390 || this.type > 392)) || this.localAI[0] <= 0f)))
							{
								if (this.type != 324)
								{
									if (num63 > 0f && this.velocity.Y < 0f)
									{
										this.velocity.Y = 0f;
									}
									if (num63 < 0f && this.velocity.Y > 0f)
									{
										this.velocity.Y = 0f;
									}
								}
								this.ai[0] = 1f;
							}
						}
					}
					if ((this.type == 209 || this.type == 956) && this.ai[0] != 0f)
					{
						if (Main.player[this.owner].velocity.Y == 0f && this.alpha >= 100)
						{
							this.position.X = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - (float)(this.width / 2);
							this.position.Y = Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - (float)this.height;
							this.ai[0] = 0f;
						}
						else
						{
							this.velocity.X = 0f;
							this.velocity.Y = 0f;
							if (this.type == 956 && this.alpha < 100)
							{
								int num65 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
								Dust dust2 = Main.dust[num65];
								dust2.velocity.X = dust2.velocity.X + (Main.rand.NextFloat() - 0.5f);
								Dust dust3 = Main.dust[num65];
								dust3.velocity.Y = dust3.velocity.Y + (Main.rand.NextFloat() + 0.5f) * -1f;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num65].noGravity = true;
								}
							}
							this.alpha += 5;
							if (this.alpha > 255)
							{
								this.alpha = 255;
							}
						}
					}
					else if (this.ai[0] != 0f && !flag7)
					{
						float num66 = 0.2f;
						int num67 = 200;
						if (this.type == 127)
						{
							num67 = 100;
						}
						if (flag6 || this.type == 816 || this.type == 821 || this.type == 825 || this.type == 854 || this.type == 858 || this.type == 859 || this.type == 860)
						{
							num66 = 0.5f;
							num67 = 100;
						}
						if (this.type == 875)
						{
							num66 = 2f;
							num67 = 100;
						}
						this.tileCollide = false;
						Vector2 vector8;
						vector8..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num68 = Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - vector8.X;
						if (flag6 || this.type == 266 || (this.type >= 390 && this.type <= 392))
						{
							num68 -= (float)(40 * Main.player[this.owner].direction);
							float num69 = 700f;
							if (flag6)
							{
								num69 += 100f;
							}
							bool flag12 = false;
							int num70 = -1;
							for (int num71 = 0; num71 < 200; num71++)
							{
								if (Main.npc[num71].CanBeChasedBy(this, false))
								{
									float num72 = Main.npc[num71].position.X + (float)(Main.npc[num71].width / 2);
									float num73 = Main.npc[num71].position.Y + (float)(Main.npc[num71].height / 2);
									if (Math.Abs(Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) - num72) + Math.Abs(Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - num73) < num69)
									{
										if (Collision.CanHit(this.position, this.width, this.height, Main.npc[num71].position, Main.npc[num71].width, Main.npc[num71].height))
										{
											num70 = num71;
										}
										flag12 = true;
										break;
									}
								}
							}
							if (!flag12)
							{
								num68 -= (float)(40 * this.minionPos * Main.player[this.owner].direction);
							}
							if (flag12 && num70 >= 0)
							{
								this.ai[0] = 0f;
							}
						}
						float num74 = Main.player[this.owner].position.Y + (float)(Main.player[this.owner].height / 2) - vector8.Y;
						if (this.type == 127)
						{
							num74 = Main.player[this.owner].position.Y - vector8.Y;
						}
						float num75 = (float)Math.Sqrt((double)(num68 * num68 + num74 * num74));
						float num76 = num75;
						float num77 = 10f;
						float num78 = num75;
						if (this.type == 111)
						{
							num77 = 11f;
						}
						if (this.type == 127)
						{
							num77 = 9f;
						}
						if (this.type == 875)
						{
							num66 = 1.8f;
							num77 = 16f;
						}
						if (this.type == 324)
						{
							num77 = 20f;
						}
						if (flag6 || this.type == 816 || this.type == 821 || this.type == 825 || this.type == 854 || this.type == 858 || this.type == 859 || this.type == 860 || this.type == 956 || this.type == 958 || this.type == 959 || this.type == 960 || this.type == 994 || this.type == 998 || this.type == 1003 || this.type == 1004)
						{
							num66 = 0.4f;
							num77 = 12f;
							if (flag6)
							{
								num66 = 0.8f;
							}
							if (num77 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
							{
								num77 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
							}
						}
						if (this.type == 208 && Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y) > 4f)
						{
							num67 = -1;
						}
						if (num75 < (float)num67 && Main.player[this.owner].velocity.Y == 0f && this.position.Y + (float)this.height <= Main.player[this.owner].position.Y + (float)Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height))
						{
							this.ai[0] = 0f;
							if (this.velocity.Y < -6f)
							{
								this.velocity.Y = -6f;
							}
						}
						if (num75 < 60f)
						{
							num68 = this.velocity.X;
							num74 = this.velocity.Y;
						}
						else
						{
							num75 = num77 / num75;
							num68 *= num75;
							num74 *= num75;
						}
						if (this.type == 324)
						{
							if (num78 > 1000f)
							{
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num77 - 1.25)
								{
									this.velocity *= 1.025f;
								}
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num77 + 1.25)
								{
									this.velocity *= 0.975f;
								}
							}
							else if (num78 > 600f)
							{
								if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num77 - 1f)
								{
									this.velocity *= 1.05f;
								}
								if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > num77 + 1f)
								{
									this.velocity *= 0.95f;
								}
							}
							else if (num78 > 400f)
							{
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num77 - 0.5)
								{
									this.velocity *= 1.075f;
								}
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num77 + 0.5)
								{
									this.velocity *= 0.925f;
								}
							}
							else
							{
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num77 - 0.25)
								{
									this.velocity *= 1.1f;
								}
								if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) > (double)num77 + 0.25)
								{
									this.velocity *= 0.9f;
								}
							}
							this.velocity.X = (this.velocity.X * 34f + num68) / 35f;
							this.velocity.Y = (this.velocity.Y * 34f + num74) / 35f;
						}
						else if (this.type == 875)
						{
							if (num76 < (float)num67)
							{
								if (this.velocity.X < num68)
								{
									this.velocity.X = this.velocity.X + num66;
								}
								else if (this.velocity.X > num68)
								{
									this.velocity.X = this.velocity.X - num66;
								}
								if (this.velocity.Y < num74)
								{
									this.velocity.Y = this.velocity.Y + num66;
								}
								else if (this.velocity.Y > num74)
								{
									this.velocity.Y = this.velocity.Y - num66;
								}
							}
							else
							{
								this.velocity = Vector2.Lerp(this.velocity, new Vector2(num68, num74), 0.75f);
							}
						}
						else
						{
							if (this.velocity.X < num68)
							{
								this.velocity.X = this.velocity.X + num66;
								if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X + num66 * 1.5f;
								}
							}
							if (this.velocity.X > num68)
							{
								this.velocity.X = this.velocity.X - num66;
								if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X - num66 * 1.5f;
								}
							}
							if (this.velocity.Y < num74)
							{
								this.velocity.Y = this.velocity.Y + num66;
								if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y + num66 * 1.5f;
								}
							}
							if (this.velocity.Y > num74)
							{
								this.velocity.Y = this.velocity.Y - num66;
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y - num66 * 1.5f;
								}
							}
						}
						if (this.type == 111)
						{
							this.frame = 7;
						}
						if (flag6 && this.frame < 12)
						{
							this.frame = Main.rand.Next(12, 18);
							this.frameCounter = 0;
						}
						if (this.type != 313)
						{
							if ((double)this.velocity.X > 0.5)
							{
								this.spriteDirection = -1;
							}
							else if ((double)this.velocity.X < -0.5)
							{
								this.spriteDirection = 1;
							}
						}
						if (this.type == 112)
						{
							this.frameCounter++;
							if (this.frame < 3)
							{
								this.frame = 3;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 3;
								}
							}
							this.rotation = this.velocity.X * 0.125f;
						}
						else if (this.type == 900)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frameCounter++;
							if (this.frame < 10)
							{
								this.frame = 10;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 10;
								}
							}
							this.rotation = this.velocity.X * 0.125f;
						}
						else if (this.type == 899)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frameCounter++;
							if (this.frame < 10)
							{
								this.frame = 10;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 10;
								}
							}
							Vector2 v = this.velocity;
							v.Normalize();
							this.rotation = v.ToRotation();
							if (this.velocity.X < 0f)
							{
								this.rotation += 3.1415927f;
							}
						}
						else if (this.type == 897)
						{
							this.spriteDirection = 1;
							this.frameCounter++;
							if (this.frame < 8)
							{
								this.frame = 8;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 8;
								}
							}
							Vector2 v2 = this.velocity;
							v2.Normalize();
							this.rotation = v2.ToRotation() + 1.5707964f;
						}
						else if (this.type == 891)
						{
							this.spriteDirection = 1;
							this.frameCounter++;
							if (this.frame < 9)
							{
								this.frame = 9;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 9;
								}
							}
							Vector2 v3 = this.velocity;
							v3.Normalize();
							this.rotation = v3.ToRotation() + 1.5707964f;
						}
						else if (this.type == 890)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frameCounter++;
							if (this.frame < 9)
							{
								this.frame = 9;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 9;
								}
							}
							this.rotation = this.velocity.X * 0.025f;
						}
						else if (this.type == 884)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frameCounter++;
							if (this.frame < 9)
							{
								this.frame = 9;
								this.frameCounter = 0;
							}
							if (this.frameCounter > 3)
							{
								this.frameCounter = 0;
								this.frame++;
								if (this.frame >= Main.projFrames[this.type])
								{
									this.frame = 9;
								}
							}
							Vector2 v4 = this.velocity;
							v4.Normalize();
							this.rotation = v4.ToRotation() + 1.5707964f;
						}
						else if (this.type == 881 || this.type == 934)
						{
							int num79 = 1226;
							if (this.type == 934)
							{
								num79 = 1261;
							}
							if (this.frame < 6 || this.frame > 11)
							{
								Gore.NewGore(new Vector2(base.Center.X, this.position.Y), this.velocity * 0.5f, num79, 1f);
							}
							this.frameCounter++;
							if (this.frameCounter > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 6 || this.frame > 11)
							{
								this.frame = 6;
							}
							Vector2 v5 = this.velocity;
							v5.Normalize();
							this.rotation = v5.ToRotation() + 1.5707964f;
						}
						else if (this.type == 875)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 7 || this.frame > 10)
							{
								this.frame = 7;
							}
							Vector2 v6 = this.velocity;
							v6.Normalize();
							this.rotation = v6.ToRotation() + ((this.spriteDirection == -1) ? 0f : 3.1415927f);
						}
						else if (this.type == 825)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 21 || this.frame > 25)
							{
								this.frame = 21;
							}
							this.rotation = this.velocity.X * 0.025f;
						}
						else if (this.type == 854)
						{
							if (this.frame < 13)
							{
								Gore.NewGore(new Vector2(base.Center.X, this.position.Y), this.velocity * 0.5f, 1269, 1f);
							}
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 13 || this.frame > 18)
							{
								this.frame = 13;
							}
							Vector2 v7 = this.velocity;
							v7.Normalize();
							this.rotation = v7.ToRotation() + 1.5707964f;
						}
						else if (this.type == 858)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 10 || this.frame > 13)
							{
								this.frame = 10;
							}
							Vector2 v8 = this.velocity;
							v8.Normalize();
							this.rotation = v8.ToRotation() + ((this.spriteDirection == -1) ? 0f : 3.1415927f);
						}
						else if (this.type == 859)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 18 || this.frame > 23)
							{
								this.frame = 18;
							}
							this.rotation = this.velocity.X * 0.025f;
						}
						else if (this.type == 860)
						{
							if (this.frame < 6)
							{
								this.frame = 8;
								this.frameCounter = 0;
							}
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 13)
							{
								this.frame = 6;
							}
							Vector2 v9 = this.velocity;
							v9.Normalize();
							this.rotation = v9.ToRotation() + 1.5707964f;
						}
						else if (this.type == 816)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 11 || this.frame > 16)
							{
								this.frame = 11;
							}
							this.rotation = this.velocity.X * 0.025f;
						}
						else if (this.type == 821)
						{
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 19 || this.frame > 22)
							{
								this.frame = 19;
							}
							this.rotation = this.velocity.X * 0.025f;
						}
						else if (this.type == 958)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							if (this.frame < 13)
							{
								this.frame = 13;
								this.frameCounter = 0;
							}
							num201 = this.frameCounter + 1;
							this.frameCounter = num201;
							if (num201 > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 16)
							{
								this.frame = 13;
							}
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.4f, 0.4f);
						}
						else if (this.type == 960)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frame = 4;
							this.frameCounter = 0;
							Vector2 v10 = this.velocity;
							v10.Normalize();
							this.rotation = v10.ToRotation() + 1.5707964f;
						}
						else if (this.type == 959)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frame = 11;
							this.frameCounter = 0;
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.4f, 0.4f);
							float num80 = Vector2.Dot(this.velocity.SafeNormalize(Vector2.UnitX), new Vector2(0f, -1f));
							if (num80 > 0f && Main.rand.NextFloat() < 0.3f + num80 * 0.3f)
							{
								Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 16, this.velocity.X * 0.7f, this.velocity.Y * 1.2f, 150, default(Color), 0.6f);
								dust.noGravity = true;
								dust.fadeIn = 1f;
								dust.velocity.X = this.velocity.X * 0.3f;
								dust.position = base.Top + new Vector2(0f, -10f) + new Vector2(Main.rand.NextFloatDirection() * 30f, Main.rand.NextFloatDirection() * 10f);
								dust.velocity *= 0.7f;
								dust.position += dust.velocity * 2f;
							}
						}
						else if (this.type == 994)
						{
							this.spriteDirection = -1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = 1;
							}
							this.frameCounter++;
							if (this.frameCounter > 5)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 13 || this.frame > 15)
							{
								this.frame = 13;
							}
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.4f, 0.4f);
						}
						else if (this.type == 998)
						{
							this.spriteDirection = 1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = -1;
							}
							this.frameCounter++;
							if (this.frameCounter > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 6 || this.frame > 9)
							{
								this.frame = 6;
							}
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.4f, 0.4f);
						}
						else if (this.type == 1003)
						{
							this.spriteDirection = 1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = -1;
							}
							this.frameCounter++;
							if (this.frameCounter > 3)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 12 || this.frame > 15)
							{
								this.frame = 12;
							}
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.35f, 0.35f);
						}
						else if (this.type == 1004)
						{
							this.spriteDirection = 1;
							if (this.velocity.X > 0f)
							{
								this.spriteDirection = -1;
							}
							this.frameCounter++;
							if (this.frameCounter > 3)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 10 || this.frame > 14)
							{
								this.frame = 10;
							}
							this.rotation = MathHelper.Clamp(this.velocity.X * 0.025f, -0.35f, 0.35f);
						}
						else if (this.type == 112)
						{
							if (this.spriteDirection == -1)
							{
								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
							}
							else
							{
								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
							}
						}
						else if (this.type >= 390 && this.type <= 392)
						{
							int num81 = (int)(base.Center.X / 16f);
							int num82 = (int)(base.Center.Y / 16f);
							if (Main.tile[num81, num82] != null && *Main.tile[num81, num82].wall > 0)
							{
								this.rotation = this.velocity.ToRotation() + 1.5707964f;
								this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
								if (this.frameCounter > 5)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 7)
								{
									this.frame = 4;
								}
								if (this.frame < 4)
								{
									this.frame = 7;
								}
							}
							else
							{
								this.frameCounter++;
								if (this.frameCounter > 2)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 8 || this.frame > 10)
								{
									this.frame = 8;
								}
								this.rotation = this.velocity.X * 0.1f;
							}
						}
						else if (this.type == 334)
						{
							this.frameCounter++;
							if (this.frameCounter > 1)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 7 || this.frame > 10)
							{
								this.frame = 7;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
						else if (this.type == 353)
						{
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 10 || this.frame > 13)
							{
								this.frame = 10;
							}
							this.rotation = this.velocity.X * 0.05f;
						}
						else if (this.type == 127)
						{
							this.frameCounter += 3;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame <= 5 || this.frame > 15)
							{
								this.frame = 6;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
						else if (this.type == 269)
						{
							if (this.frame == 6)
							{
								this.frameCounter = 0;
							}
							else if (this.frame < 4 || this.frame > 6)
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							else
							{
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
							}
							this.rotation = this.velocity.X * 0.05f;
						}
						else if (this.type == 266)
						{
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 2 || this.frame > 5)
							{
								this.frame = 2;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
						else if (this.type == 324)
						{
							this.frameCounter++;
							if (this.frameCounter > 1)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 6 || this.frame > 9)
							{
								this.frame = 6;
							}
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
							Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
							for (int num83 = 0; num83 < 2; num83++)
							{
								int num84 = 4;
								int num85 = Dust.NewDust(new Vector2(base.Center.X - (float)num84, base.Center.Y - (float)num84) - this.velocity * 0f, num84 * 2, num84 * 2, 6, 0f, 0f, 100, default(Color), 1f);
								Main.dust[num85].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
								Main.dust[num85].velocity *= 0.2f;
								if (num83 == 1)
								{
									Main.dust[num85].position -= this.velocity * 0.5f;
								}
								Main.dust[num85].noGravity = true;
								num85 = Dust.NewDust(new Vector2(base.Center.X - (float)num84, base.Center.Y - (float)num84) - this.velocity * 0f, num84 * 2, num84 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
								Main.dust[num85].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
								Main.dust[num85].velocity *= 0.05f;
								if (num83 == 1)
								{
									Main.dust[num85].position -= this.velocity * 0.5f;
								}
							}
						}
						else if (this.type == 268)
						{
							this.frameCounter++;
							if (this.frameCounter > 4)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 6 || this.frame > 7)
							{
								this.frame = 6;
							}
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
						}
						else if (this.type == 200)
						{
							this.frameCounter += 3;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame <= 5 || this.frame > 9)
							{
								this.frame = 6;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
						else if (this.type == 208)
						{
							this.rotation = this.velocity.X * 0.075f;
							this.frameCounter++;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 4)
							{
								this.frame = 1;
							}
							if (this.frame < 1)
							{
								this.frame = 1;
							}
						}
						else if (this.type == 236)
						{
							this.rotation = this.velocity.Y * 0.05f * (float)this.direction;
							if (this.velocity.Y < 0f)
							{
								this.frameCounter += 2;
							}
							else
							{
								this.frameCounter++;
							}
							if (this.frameCounter >= 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 12)
							{
								this.frame = 9;
							}
							if (this.frame < 9)
							{
								this.frame = 9;
							}
						}
						else if (this.type == 499)
						{
							this.rotation = this.velocity.Y * 0.05f * (float)this.direction;
							if (this.velocity.Y < 0f)
							{
								this.frameCounter += 2;
							}
							else
							{
								this.frameCounter++;
							}
							if (this.frameCounter >= 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame >= 12)
							{
								this.frame = 8;
							}
							if (this.frame < 8)
							{
								this.frame = 8;
							}
						}
						else if (this.type == 765)
						{
							this.rotation = this.velocity.Y * 0.05f * (float)this.direction;
							this.frameCounter++;
							if (this.frameCounter >= 8)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame >= 10)
							{
								this.frame = 8;
							}
							if (this.frame < 6)
							{
								this.frame = 6;
							}
						}
						else if (this.type == 314)
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
							this.frameCounter++;
							if (this.frameCounter >= 3)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 12)
							{
								this.frame = 7;
							}
							if (this.frame < 7)
							{
								this.frame = 7;
							}
						}
						else if (this.type == 319)
						{
							this.rotation = this.velocity.X * 0.05f;
							this.frameCounter++;
							if (this.frameCounter >= 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 10)
							{
								this.frame = 6;
							}
							if (this.frame < 6)
							{
								this.frame = 6;
							}
						}
						else if (this.type == 210)
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.58f;
							this.frameCounter += 3;
							if (this.frameCounter > 6)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame > 11)
							{
								this.frame = 7;
							}
							if (this.frame < 7)
							{
								this.frame = 7;
							}
						}
						else if (this.type == 313)
						{
							this.position.Y = this.position.Y + (float)this.height;
							this.height = 54;
							this.position.Y = this.position.Y - (float)this.height;
							this.position.X = this.position.X + (float)(this.width / 2);
							this.width = 54;
							this.position.X = this.position.X - (float)(this.width / 2);
							this.rotation += this.velocity.X * 0.01f;
							this.frameCounter = 0;
							this.frame = 11;
						}
						else if (this.type == 398)
						{
							if ((double)this.velocity.X > 0.5)
							{
								this.spriteDirection = 1;
							}
							else if ((double)this.velocity.X < -0.5)
							{
								this.spriteDirection = -1;
							}
							this.frameCounter++;
							if (this.frameCounter > 1)
							{
								this.frame++;
								this.frameCounter = 0;
							}
							if (this.frame < 6 || this.frame > 9)
							{
								this.frame = 6;
							}
							this.rotation = this.velocity.X * 0.1f;
						}
						else if (this.spriteDirection == -1)
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
						}
						else
						{
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
						}
						if (!flag6 && this.type != 499 && this.type != 765 && this.type != 816 && this.type != 821 && this.type != 825 && this.type != 859 && this.type != 881 && this.type != 884 && this.type != 890 && this.type != 891 && this.type != 900 && this.type != 934 && this.type != 958 && this.type != 959 && this.type != 960 && this.type != 994 && this.type != 998 && this.type != 1003 && this.type != 1004)
						{
							if (this.type == 899)
							{
								int num86 = 6;
								if (Main.rand.Next(4) == 0)
								{
									num86 = 31;
								}
								int num87 = Dust.NewDust(base.Center + new Vector2(-8f, 0f) - this.velocity * 0.25f, 15, 15, num86, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1.3f);
								Main.dust[num87].velocity.X = Main.dust[num87].velocity.X * 0.2f;
								Main.dust[num87].velocity.Y = Main.dust[num87].velocity.Y * 0.2f - 0.2f;
								Main.dust[num87].noGravity = true;
							}
							else if (this.type == 897)
							{
								int num88 = 6;
								if (Main.rand.Next(4) == 0)
								{
									num88 = 31;
								}
								int num89 = Dust.NewDust(base.Center + new Vector2(-8f, -8f) - this.velocity * 0.25f, 15, 15, num88, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1.3f);
								Main.dust[num89].velocity.X = Main.dust[num89].velocity.X * 0.2f;
								Main.dust[num89].velocity.Y = Main.dust[num89].velocity.Y * 0.2f - 0.2f;
								Main.dust[num89].noGravity = true;
							}
							else if (this.type == 875)
							{
								if (Main.rand.Next(3) == 0)
								{
									Gore.NewGorePerfect(base.Center + new Vector2(-10f + (float)Main.rand.Next(-20, 20) * 0.5f, -10f + (float)Main.rand.Next(-20, 20) * 0.5f), this.velocity * 0.1f, 1225, 0.5f + Main.rand.NextFloat() * 1f);
									Vector2 vector9 = Main.rand.NextVector2CircularEdge(2f, 2f) + this.velocity * -0.5f;
									vector9 *= 0.5f;
									int num90 = Dust.NewDust(base.Center - this.velocity * 1.5f - new Vector2(7f, 7f), 15, 15, 226, vector9.X, vector9.Y, 0, default(Color), 0.65f);
									Main.dust[num90].noGravity = true;
								}
							}
							else if (this.type == 860)
							{
								int num91 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - 4f, this.position.Y + (float)(this.height / 2) - 4f) + this.velocity, 8, 8, 27, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1f);
								Main.dust[num91].velocity.X = Main.dust[num91].velocity.X * 0.2f;
								Main.dust[num91].velocity.Y = Main.dust[num91].velocity.Y * 0.2f - 0.2f;
								Main.dust[num91].velocity += new Vector2((float)Main.rand.Next(-10, 10) * 0.4f, (float)Main.rand.Next(-10, 10) * 0.4f) * 0.5f;
								Main.dust[num91].noGravity = true;
							}
							else if (this.type == 858)
							{
								int num92 = 6;
								if (Main.rand.Next(4) == 0)
								{
									num92 = 31;
								}
								int num93 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - 4f, this.position.Y + (float)(this.height / 2) - 4f) - this.velocity, 10, 10, num92, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1.3f);
								Main.dust[num93].velocity.X = Main.dust[num93].velocity.X * 0.2f;
								Main.dust[num93].velocity.Y = Main.dust[num93].velocity.Y * 0.2f - 0.2f;
								Main.dust[num93].noGravity = true;
							}
							else if (this.type == 112)
							{
								int num94 = 6;
								if (Main.rand.Next(4) == 0)
								{
									num94 = 31;
								}
								int num95 = Dust.NewDust(base.Center + new Vector2((float)(12 * this.spriteDirection), 4f).RotatedBy((double)this.rotation, default(Vector2)) + new Vector2(-5f, -5f), 10, 10, num94, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1.3f);
								Main.dust[num95].velocity.X = Main.dust[num95].velocity.X * 0.2f;
								Main.dust[num95].velocity.Y = Main.dust[num95].velocity.Y * 0.2f - 0.2f;
								Main.dust[num95].noGravity = true;
							}
							else if (this.type == 854)
							{
								if (Main.rand.Next(6) == 0)
								{
									Vector2 vector15 = base.Center / 16f;
									int i2 = (int)vector15.X;
									int num96 = (int)vector15.Y;
									Tile tileSafely = Framing.GetTileSafely(i2, num96 + 1);
									if (!WorldGen.SolidTile(tileSafely) && *tileSafely.liquid == 0)
									{
										Gore gore = Gore.NewGorePerfect(base.Center + new Vector2((float)Main.rand.Next(-30, 30) * 0.5f, (float)Main.rand.Next(-30, 30) * 0.5f), this.velocity * -0.2f, 910, 1f);
										gore.Frame.CurrentColumn = 0;
										gore.timeLeft = 1;
									}
								}
							}
							else if (this.type != 398 && this.type != 390 && this.type != 391 && this.type != 392 && this.type != 127 && this.type != 200 && this.type != 208 && this.type != 210 && this.type != 236 && this.type != 266 && this.type != 268 && this.type != 269 && this.type != 313 && this.type != 314 && this.type != 319 && this.type != 324 && this.type != 334 && this.type != 353)
							{
								int num97 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - 4f, this.position.Y + (float)(this.height / 2) - 4f) - this.velocity, 8, 8, 16, (0f - this.velocity.X) * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.7f);
								Main.dust[num97].velocity.X = Main.dust[num97].velocity.X * 0.2f;
								Main.dust[num97].velocity.Y = Main.dust[num97].velocity.Y * 0.2f;
								Main.dust[num97].noGravity = true;
							}
						}
					}
					else
					{
						if (flag6)
						{
							float num98 = (float)(40 * this.minionPos);
							int num99 = 30;
							int num100 = 60;
							this.localAI[0] -= 1f;
							if (this.localAI[0] < 0f)
							{
								this.localAI[0] = 0f;
							}
							if (this.ai[1] > 0f)
							{
								this.ai[1] -= 1f;
							}
							else
							{
								float num101 = this.position.X;
								float num102 = this.position.Y;
								float num103 = 100000f;
								float num104 = num103;
								int num105 = -1;
								float num106 = 20f;
								NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
								if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
								{
									float num107 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
									float num108 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
									float num109 = Math.Abs(this.position.X + (float)(this.width / 2) - num107) + Math.Abs(this.position.Y + (float)(this.height / 2) - num108);
									if (num109 < num103)
									{
										if (num105 == -1 && num109 <= num104)
										{
											num104 = num109;
											num101 = num107;
											num102 = num108;
										}
										if (Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
										{
											num103 = num109;
											num101 = num107;
											num102 = num108;
											num105 = ownerMinionAttackTargetNPC.whoAmI;
										}
									}
								}
								if (num105 == -1)
								{
									for (int num110 = 0; num110 < 200; num110++)
									{
										if (Main.npc[num110].CanBeChasedBy(this, false))
										{
											float num111 = Main.npc[num110].position.X + (float)(Main.npc[num110].width / 2);
											float num112 = Main.npc[num110].position.Y + (float)(Main.npc[num110].height / 2);
											float num113 = Math.Abs(this.position.X + (float)(this.width / 2) - num111) + Math.Abs(this.position.Y + (float)(this.height / 2) - num112);
											if (num113 < num103)
											{
												if (num105 == -1 && num113 <= num104)
												{
													num104 = num113;
													num101 = num111 + Main.npc[num110].velocity.X * num106;
													num102 = num112 + Main.npc[num110].velocity.Y * num106;
												}
												if (Collision.CanHit(this.position, this.width, this.height, Main.npc[num110].position, Main.npc[num110].width, Main.npc[num110].height))
												{
													num103 = num113;
													num101 = num111 + Main.npc[num110].velocity.X * num106;
													num102 = num112 + Main.npc[num110].velocity.Y * num106;
													num105 = num110;
												}
											}
										}
									}
								}
								if (num105 == -1 && num104 < num103)
								{
									num103 = num104;
								}
								float num114 = 400f;
								if ((double)this.position.Y > Main.worldSurface * 16.0)
								{
									num114 = 200f;
								}
								if (num103 < num114 + num98 && num105 == -1)
								{
									float num115 = num101 - (this.position.X + (float)(this.width / 2));
									if (num115 < -5f)
									{
										flag2 = true;
										flag3 = false;
									}
									else if (num115 > 5f)
									{
										flag3 = true;
										flag2 = false;
									}
								}
								else if (num105 >= 0 && num103 < 800f + num98)
								{
									this.localAI[0] = (float)num100;
									float num116 = num101 - (this.position.X + (float)(this.width / 2));
									if (num116 > 450f || num116 < -450f)
									{
										if (num116 < -50f)
										{
											flag2 = true;
											flag3 = false;
										}
										else if (num116 > 50f)
										{
											flag3 = true;
											flag2 = false;
										}
									}
									else if (this.owner == Main.myPlayer)
									{
										this.ai[1] = (float)num99;
										Vector2 vector10;
										vector10..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)(this.height / 2) - 8f);
										float num117 = num101 - vector10.X + (float)Main.rand.Next(-20, 21);
										float num118 = Math.Abs(num117) * 0.1f;
										num118 = num118 * (float)Main.rand.Next(0, 100) * 0.001f;
										float num119 = num102 - vector10.Y + (float)Main.rand.Next(-20, 21) - num118;
										float num120 = (float)Math.Sqrt((double)(num117 * num117 + num119 * num119));
										num120 = 11f / num120;
										num117 *= num120;
										num119 *= num120;
										int num121 = this.damage;
										int num122 = 195;
										int num123 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector10.X, vector10.Y, num117, num119, num122, num121, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
										Main.projectile[num123].timeLeft = 300;
										if (num117 < 0f)
										{
											this.direction = -1;
										}
										if (num117 > 0f)
										{
											this.direction = 1;
										}
										this.netUpdate = true;
									}
								}
							}
						}
						bool flag13 = false;
						Vector2 vector11 = Vector2.Zero;
						bool flag14 = false;
						if (this.type == 266 || (this.type >= 390 && this.type <= 392))
						{
							float num124 = (float)(40 * this.minionPos);
							int num125 = 60;
							this.localAI[0] -= 1f;
							if (this.localAI[0] < 0f)
							{
								this.localAI[0] = 0f;
							}
							if (this.ai[1] > 0f)
							{
								this.ai[1] -= 1f;
							}
							else
							{
								float num126 = this.position.X;
								float num127 = this.position.Y;
								float num128 = 100000f;
								float num129 = num128;
								int num130 = -1;
								NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
								if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
								{
									float x = ownerMinionAttackTargetNPC2.Center.X;
									float y = ownerMinionAttackTargetNPC2.Center.Y;
									float num131 = Math.Abs(this.position.X + (float)(this.width / 2) - x) + Math.Abs(this.position.Y + (float)(this.height / 2) - y);
									if (num131 < num128)
									{
										if (num130 == -1 && num131 <= num129)
										{
											num129 = num131;
											num126 = x;
											num127 = y;
										}
										if (Collision.CanHit(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
										{
											num128 = num131;
											num126 = x;
											num127 = y;
											num130 = ownerMinionAttackTargetNPC2.whoAmI;
										}
									}
								}
								if (num130 == -1)
								{
									for (int num132 = 0; num132 < 200; num132++)
									{
										if (Main.npc[num132].CanBeChasedBy(this, false))
										{
											float num133 = Main.npc[num132].position.X + (float)(Main.npc[num132].width / 2);
											float num134 = Main.npc[num132].position.Y + (float)(Main.npc[num132].height / 2);
											float num135 = Math.Abs(this.position.X + (float)(this.width / 2) - num133) + Math.Abs(this.position.Y + (float)(this.height / 2) - num134);
											if (num135 < num128)
											{
												if (num130 == -1 && num135 <= num129)
												{
													num129 = num135;
													num126 = num133;
													num127 = num134;
												}
												if (Collision.CanHit(this.position, this.width, this.height, Main.npc[num132].position, Main.npc[num132].width, Main.npc[num132].height))
												{
													num128 = num135;
													num126 = num133;
													num127 = num134;
													num130 = num132;
												}
											}
										}
									}
								}
								if (this.type >= 390 && this.type <= 392 && !Collision.SolidCollision(this.position, this.width, this.height))
								{
									this.tileCollide = true;
								}
								if (num130 == -1 && num129 < num128)
								{
									num128 = num129;
								}
								else if (num130 >= 0)
								{
									flag13 = true;
									vector11 = new Vector2(num126, num127) - base.Center;
									if (this.type >= 390 && this.type <= 392)
									{
										if (Main.npc[num130].position.Y > this.position.Y + (float)this.height)
										{
											int num136 = (int)(base.Center.X / 16f);
											int num137 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
											if (Main.tile[num136, num137] != null && Main.tile[num136, num137].active() && TileID.Sets.Platforms[(int)(*Main.tile[num136, num137].type)])
											{
												this.tileCollide = false;
											}
										}
										Rectangle rectangle;
										rectangle..ctor((int)this.position.X, (int)this.position.Y, this.width, this.height);
										Rectangle value;
										value..ctor((int)Main.npc[num130].position.X, (int)Main.npc[num130].position.Y, Main.npc[num130].width, Main.npc[num130].height);
										int num138 = 10;
										value.X -= num138;
										value.Y -= num138;
										value.Width += num138 * 2;
										value.Height += num138 * 2;
										if (rectangle.Intersects(value))
										{
											flag14 = true;
											Vector2 vector12 = Main.npc[num130].Center - base.Center;
											if (this.velocity.Y > 0f && vector12.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.5f;
											}
											if (this.velocity.Y < 0f && vector12.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.5f;
											}
											if (this.velocity.X > 0f && vector12.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.5f;
											}
											if (this.velocity.X < 0f && vector12.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.5f;
											}
											if (vector12.Length() > 14f)
											{
												vector12.Normalize();
												vector12 *= 14f;
											}
											this.rotation = (this.rotation * 5f + vector12.ToRotation() + 1.5707964f) / 6f;
											this.velocity = (this.velocity * 9f + vector12) / 10f;
											for (int num139 = 0; num139 < 1000; num139++)
											{
												if (this.whoAmI != num139 && this.owner == Main.projectile[num139].owner && Main.projectile[num139].type >= 390 && Main.projectile[num139].type <= 392 && (Main.projectile[num139].Center - base.Center).Length() < 15f)
												{
													float num140 = 0.5f;
													if (base.Center.Y > Main.projectile[num139].Center.Y)
													{
														Projectile projectile = Main.projectile[num139];
														projectile.velocity.Y = projectile.velocity.Y - num140;
														this.velocity.Y = this.velocity.Y + num140;
													}
													else
													{
														Projectile projectile2 = Main.projectile[num139];
														projectile2.velocity.Y = projectile2.velocity.Y + num140;
														this.velocity.Y = this.velocity.Y - num140;
													}
													if (base.Center.X > Main.projectile[num139].Center.X)
													{
														this.velocity.X = this.velocity.X + num140;
														Projectile projectile3 = Main.projectile[num139];
														projectile3.velocity.X = projectile3.velocity.X - num140;
													}
													else
													{
														this.velocity.X = this.velocity.X - num140;
														Projectile projectile4 = Main.projectile[num139];
														projectile4.velocity.Y = projectile4.velocity.Y + num140;
													}
												}
											}
										}
									}
								}
								float num141 = 300f;
								if ((double)this.position.Y > Main.worldSurface * 16.0)
								{
									num141 = 150f;
								}
								if (this.type >= 390 && this.type <= 392)
								{
									num141 = 500f;
									if ((double)this.position.Y > Main.worldSurface * 16.0)
									{
										num141 = 250f;
									}
								}
								if (num128 < num141 + num124 && num130 == -1)
								{
									float num142 = num126 - (this.position.X + (float)(this.width / 2));
									if (num142 < -5f)
									{
										flag2 = true;
										flag3 = false;
									}
									else if (num142 > 5f)
									{
										flag3 = true;
										flag2 = false;
									}
								}
								bool flag15 = false;
								if (this.type >= 390 && this.type <= 392 && this.localAI[1] > 0f)
								{
									flag15 = true;
									this.localAI[1] -= 1f;
								}
								if (num130 >= 0 && num128 < 800f + num124)
								{
									this.friendly = true;
									this.localAI[0] = (float)num125;
									float num143 = num126 - (this.position.X + (float)(this.width / 2));
									if (num143 < -10f)
									{
										flag2 = true;
										flag3 = false;
									}
									else if (num143 > 10f)
									{
										flag3 = true;
										flag2 = false;
									}
									if (num127 < base.Center.Y - 100f && num143 > -50f && num143 < 50f && this.velocity.Y == 0f)
									{
										float num144 = Math.Abs(num127 - base.Center.Y);
										if (num144 < 120f)
										{
											this.velocity.Y = -10f;
										}
										else if (num144 < 210f)
										{
											this.velocity.Y = -13f;
										}
										else if (num144 < 270f)
										{
											this.velocity.Y = -15f;
										}
										else if (num144 < 310f)
										{
											this.velocity.Y = -17f;
										}
										else if (num144 < 380f)
										{
											this.velocity.Y = -18f;
										}
									}
									if (flag15)
									{
										this.friendly = false;
										if (this.velocity.X < 0f)
										{
											flag2 = true;
										}
										else if (this.velocity.X > 0f)
										{
											flag3 = true;
										}
									}
								}
								else
								{
									this.friendly = false;
								}
							}
						}
						if (this.ai[1] != 0f)
						{
							flag2 = false;
							flag3 = false;
						}
						else if (flag6 && this.localAI[0] == 0f)
						{
							this.direction = Main.player[this.owner].direction;
						}
						else if (this.type >= 390 && this.type <= 392)
						{
							int num145 = (int)(base.Center.X / 16f);
							int num146 = (int)(base.Center.Y / 16f);
							if (Main.tile[num145, num146] != null && *Main.tile[num145, num146].wall > 0)
							{
								flag3 = (flag2 = false);
							}
						}
						if (this.type == 127)
						{
							if ((double)this.rotation > -0.1 && (double)this.rotation < 0.1)
							{
								this.rotation = 0f;
							}
							else if (this.rotation < 0f)
							{
								this.rotation += 0.1f;
							}
							else
							{
								this.rotation -= 0.1f;
							}
						}
						else if (this.type != 313 && !flag14)
						{
							this.rotation = 0f;
						}
						if (this.type < 390 || this.type > 392)
						{
							this.tileCollide = true;
						}
						float num147 = 0.08f;
						float num148 = 6.5f;
						if (this.type == 127)
						{
							num148 = 2f;
							num147 = 0.04f;
						}
						if (this.type == 112)
						{
							num148 = 6f;
							num147 = 0.06f;
						}
						if (this.type == 334)
						{
							num148 = 8f;
							num147 = 0.08f;
						}
						if (this.type == 268)
						{
							num148 = 8f;
							num147 = 0.4f;
						}
						if (this.type == 324)
						{
							num147 = 0.1f;
							num148 = 3f;
						}
						if (this.type == 858)
						{
							num147 = 0.3f;
							num148 = 7f;
						}
						if (flag6 || this.type == 266 || (this.type >= 390 && this.type <= 392) || this.type == 816 || this.type == 821 || this.type == 825 || this.type == 859 || this.type == 860 || this.type == 881 || this.type == 884 || this.type == 890 || this.type == 891 || this.type == 897 || this.type == 899 || this.type == 900 || this.type == 934 || this.type == 956 || this.type == 958 || this.type == 959 || this.type == 960 || this.type == 994 || this.type == 998 || this.type == 1003 || this.type == 1004)
						{
							num148 = 6f;
							num147 = 0.2f;
							if (num148 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
							{
								num148 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
								num147 = 0.3f;
							}
							if (flag6)
							{
								num147 *= 2f;
							}
						}
						if (this.type == 875)
						{
							num148 = 7f;
							num147 = 0.25f;
							if (num148 < Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y))
							{
								num148 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
								num147 = 0.35f;
							}
						}
						if (this.type >= 390 && this.type <= 392)
						{
							num147 *= 2f;
						}
						if (flag7)
						{
							num148 = 6f;
						}
						if (flag2)
						{
							if ((double)this.velocity.X > -3.5)
							{
								this.velocity.X = this.velocity.X - num147;
							}
							else
							{
								this.velocity.X = this.velocity.X - num147 * 0.25f;
							}
						}
						else if (flag3)
						{
							if ((double)this.velocity.X < 3.5)
							{
								this.velocity.X = this.velocity.X + num147;
							}
							else
							{
								this.velocity.X = this.velocity.X + num147 * 0.25f;
							}
						}
						else
						{
							this.velocity.X = this.velocity.X * 0.9f;
							if (this.velocity.X >= 0f - num147 && this.velocity.X <= num147)
							{
								this.velocity.X = 0f;
							}
						}
						if (this.type == 208)
						{
							this.velocity.X = this.velocity.X * 0.95f;
							if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
							{
								this.velocity.X = 0f;
							}
							flag2 = false;
							flag3 = false;
						}
						if (flag2 || flag3)
						{
							int num149 = (int)(this.position.X + (float)(this.width / 2)) / 16;
							int j2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
							if (this.type == 236)
							{
								num149 += this.direction;
							}
							if (flag2)
							{
								num149--;
							}
							if (flag3)
							{
								num149++;
							}
							num149 += (int)this.velocity.X;
							if (WorldGen.SolidTile(num149, j2, false))
							{
								flag5 = true;
							}
						}
						if (Main.player[this.owner].position.Y + (float)Main.player[this.owner].height - 8f > this.position.Y + (float)this.height)
						{
							flag4 = true;
						}
						if (this.type == 268 && this.frameCounter < 10)
						{
							flag5 = false;
						}
						if (this.type == 860 && this.velocity.X != 0f)
						{
							flag5 = true;
						}
						if ((this.type == 881 || this.type == 934) && this.velocity.X != 0f)
						{
							flag5 = true;
						}
						Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
						if (this.velocity.Y == 0f || this.type == 200)
						{
							if (!flag4 && (this.velocity.X < 0f || this.velocity.X > 0f))
							{
								int num150 = (int)(this.position.X + (float)(this.width / 2)) / 16;
								int j3 = (int)(this.position.Y + (float)(this.height / 2)) / 16 + 1;
								if (flag2)
								{
									num150--;
								}
								if (flag3)
								{
									num150++;
								}
								WorldGen.SolidTile(num150, j3, false);
							}
							if (flag5)
							{
								int num151 = (int)(this.position.X + (float)(this.width / 2)) / 16;
								int num152 = (int)(this.position.Y + (float)this.height) / 16;
								if (WorldGen.SolidTileAllowBottomSlope(num151, num152) || Main.tile[num151, num152].halfBrick() || Main.tile[num151, num152].slope() > 0 || this.type == 200)
								{
									if (this.type == 200)
									{
										this.velocity.Y = -3.1f;
									}
									else
									{
										try
										{
											num151 = (int)(this.position.X + (float)(this.width / 2)) / 16;
											num152 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
											if (flag2)
											{
												num151--;
											}
											if (flag3)
											{
												num151++;
											}
											num151 += (int)this.velocity.X;
											if (!WorldGen.SolidTile(num151, num152 - 1, false) && !WorldGen.SolidTile(num151, num152 - 2, false))
											{
												this.velocity.Y = -5.1f;
											}
											else if (!WorldGen.SolidTile(num151, num152 - 2, false))
											{
												this.velocity.Y = -7.1f;
											}
											else if (WorldGen.SolidTile(num151, num152 - 5, false))
											{
												this.velocity.Y = -11.1f;
											}
											else if (WorldGen.SolidTile(num151, num152 - 4, false))
											{
												this.velocity.Y = -10.1f;
											}
											else
											{
												this.velocity.Y = -9.1f;
											}
										}
										catch
										{
											this.velocity.Y = -9.1f;
										}
									}
									if (this.type == 127)
									{
										this.ai[0] = 1f;
									}
								}
							}
							else if (this.type == 266 && (flag2 || flag3))
							{
								this.velocity.Y = this.velocity.Y - 6f;
							}
						}
						if (this.velocity.X > num148)
						{
							this.velocity.X = num148;
						}
						if (this.velocity.X < 0f - num148)
						{
							this.velocity.X = 0f - num148;
						}
						if (this.velocity.X < 0f)
						{
							this.direction = -1;
						}
						if (this.velocity.X > 0f)
						{
							this.direction = 1;
						}
						if (this.velocity.X > num147 && flag3)
						{
							this.direction = 1;
						}
						if (this.velocity.X < 0f - num147 && flag2)
						{
							this.direction = -1;
						}
						if (this.type != 313)
						{
							if (this.direction == -1)
							{
								this.spriteDirection = 1;
							}
							if (this.direction == 1)
							{
								this.spriteDirection = -1;
							}
						}
						if (this.type == 398 || this.type == 958 || this.type == 960 || this.type == 956 || this.type == 959 || this.type == 994)
						{
							this.spriteDirection = this.direction;
						}
						bool flag16 = this.position.X - this.oldPosition.X == 0f;
						if (this.type == 956)
						{
							if (this.alpha > 0)
							{
								int num153 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
								Dust dust4 = Main.dust[num153];
								dust4.velocity.X = dust4.velocity.X + (Main.rand.NextFloat() - 0.5f);
								Dust dust5 = Main.dust[num153];
								dust5.velocity.Y = dust5.velocity.Y + (Main.rand.NextFloat() + 0.5f) * -1f;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num153].noGravity = true;
								}
								this.alpha -= 5;
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
							}
							if (this.velocity.Y != 0f)
							{
								this.frame = 10;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
							}
							else
							{
								float num154 = this.velocity.Length();
								this.frameCounter += (int)num154;
								if (this.frameCounter > 7)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 1 || this.frame > 9)
								{
									this.frame = 1;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 958)
						{
							if (this.velocity.Y != 0f)
							{
								this.localAI[0] = 0f;
								this.frame = 4;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.localAI[0] += 1f;
								if (this.localAI[0] > 200f)
								{
									this.frame = 1 + (int)(this.localAI[0] - 200f) / 6;
									if (this.localAI[0] >= 218f)
									{
										this.frame = 0;
										this.localAI[0] = (float)Main.rand.Next(100);
									}
								}
								else
								{
									this.frame = 0;
								}
							}
							else
							{
								this.localAI[0] = 0f;
								float num155 = this.velocity.Length();
								this.frameCounter += (int)num155;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 5 || this.frame > 12)
								{
									this.frame = 5;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 959)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = ((this.velocity.Y > 0f) ? 10 : 9);
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
							}
							else
							{
								float num156 = this.velocity.Length();
								this.frameCounter += (int)num156;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 1 || this.frame > 8)
								{
									this.frame = 1;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 998)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.frame = 0;
							}
							else
							{
								float num157 = this.velocity.Length();
								this.frameCounter += (int)num157;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 0 || this.frame > 5)
								{
									this.frame = 0;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 1003)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.frame = 0;
							}
							else
							{
								float num158 = this.velocity.Length();
								this.frameCounter += (int)num158;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 2 || this.frame > 11)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 1004)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.frame = 0;
							}
							else
							{
								float num159 = this.velocity.Length();
								this.frameCounter += (int)num159;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 2 || this.frame > 9)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 994)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 4;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frameCounter++;
								if (this.frameCounter > 5)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 3)
								{
									this.frame = 0;
								}
							}
							else
							{
								float num160 = this.velocity.Length();
								this.frameCounter += (int)num160;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 5 || this.frame > 12)
								{
									this.frame = 5;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 960)
						{
							Player player4 = Main.player[this.owner];
							if (this.velocity.Y != 0f)
							{
								this.localAI[0] = 0f;
								this.localAI[1] = 0f;
								this.frameCounter = 0;
								this.frame = 4;
							}
							else if (flag16)
							{
								if (!flag7)
								{
									this.spriteDirection = 1;
									if (Main.player[this.owner].Center.X < base.Center.X)
									{
										this.spriteDirection = -1;
									}
								}
								if (this.frame >= 5 && this.frame < 12)
								{
									this.frameCounter++;
									if (this.frameCounter > 3)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 12)
									{
										this.frame = 0;
									}
								}
								else if (this.Chester_IsAnyPlayerTrackingThisProjectile())
								{
									if (this.localAI[0] == 0f)
									{
										if (this.localAI[1] == 0f)
										{
											this.localAI[1] = 1f;
											this.frameCounter = 0;
										}
										this.frame = 13;
										this.frameCounter++;
										if (this.frameCounter > 6)
										{
											this.localAI[0] = 1f;
											this.frame = 14;
											this.frameCounter = 0;
										}
									}
									else
									{
										this.frameCounter++;
										if (this.frameCounter > 6)
										{
											this.frame++;
											if (this.frame > 18)
											{
												this.frame = 14;
											}
											this.frameCounter = 0;
										}
									}
								}
								else
								{
									this.localAI[0] = 0f;
									if (this.localAI[1] == 1f)
									{
										this.localAI[1] = 0f;
										this.frameCounter = 0;
									}
									if (this.frame >= 12 && this.frame <= 19)
									{
										this.frame = 19;
										this.frameCounter++;
										if (this.frameCounter > 6)
										{
											this.frame = 0;
											this.frameCounter = 0;
										}
									}
									else
									{
										this.frameCounter++;
										if (this.frameCounter >= 24)
										{
											this.frameCounter = 0;
										}
										this.frame = this.frameCounter / 6;
									}
								}
							}
							else
							{
								this.localAI[0] = 0f;
								this.localAI[1] = 0f;
								float val = this.velocity.Length();
								this.frameCounter += (int)Math.Max(2f, val);
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 5 || this.frame > 12)
								{
									this.frame = 5;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 816)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 4;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > 5)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 0 || this.frame > 3)
								{
									this.frame = 0;
								}
							}
							else
							{
								int num161 = 5;
								float num162 = this.velocity.Length();
								if (num162 > 4f)
								{
									num161 = 3;
								}
								else if (num162 > 2f)
								{
									num161 = 4;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > num161)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 4 || this.frame > 10)
								{
									this.frame = 4;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						if (this.type == 860)
						{
							if (this.velocity.Y != 0f)
							{
								this.localAI[0] = 0f;
								if (this.frame >= 5)
								{
									this.frame = 5;
									this.frameCounter = 0;
								}
								else
								{
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 5)
									{
										this.frame++;
										this.frameCounter = 0;
									}
								}
							}
							else if (Math.Abs(this.velocity.X) < 1f)
							{
								if (this.localAI[0] > 800f)
								{
									this.frameCounter++;
									if (this.frameCounter > 3)
									{
										this.frameCounter = 0;
										this.frame++;
										if (this.frame > 3)
										{
											this.frame = 3;
										}
									}
									this.localAI[0] += 1f;
									if (this.localAI[0] > 850f)
									{
										this.localAI[0] = 0f;
									}
									if (this.frame == 3 && this.localAI[0] == 820f)
									{
										for (int num163 = 0; num163 < 3 + Main.rand.Next(3); num163++)
										{
											int num164 = Gore.NewGore(new Vector2(this.position.X, base.Center.Y - 10f), Vector2.Zero, 1218, 1f);
											Main.gore[num164].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * (float)(-(float)this.spriteDirection), 0f - (2f + (float)Main.rand.Next(4) * 0.3f));
										}
									}
								}
								else if (this.frame == 0)
								{
									this.localAI[0] += 1f;
									this.frame = 0;
									this.frameCounter = 0;
								}
								else
								{
									this.localAI[0] = 0f;
									if (this.frame > 5)
									{
										this.frame = 5;
										this.frameCounter = 0;
									}
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 4)
									{
										this.frame--;
										this.frameCounter = 0;
									}
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						if (this.type == 859)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 4;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								if (this.frame == 6)
								{
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 5)
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
								}
								else if (this.frame > 3)
								{
									this.frame = 6;
									this.frameCounter = 0;
								}
								else
								{
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 5)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame < 0 || this.frame > 3)
									{
										this.frame = 0;
									}
								}
							}
							else
							{
								float num165 = this.velocity.Length();
								int num166 = 8;
								if (num165 < 3f)
								{
									num166 = 4;
								}
								if (num165 < 1f)
								{
									num166 = 2;
								}
								this.frameCounter += (int)num165;
								if (this.frameCounter > num166)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 5 || this.frame > 17)
								{
									this.frame = 5;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 858)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.frame = 0;
							}
							else
							{
								float num167 = this.velocity.Length();
								this.frameCounter += (int)num167;
								if (this.frameCounter > 3)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 2 || this.frame > 9)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 900)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.3f);
								if (this.frame < 2)
								{
									this.frame = 2;
									this.frameCounter = 0;
								}
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 9)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 899)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.3f);
								if (this.frame < 2)
								{
									this.frame = 2;
									this.frameCounter = 0;
								}
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 9)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 897)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.3f);
								if (this.frame < 2)
								{
									this.frame = 2;
									this.frameCounter = 0;
								}
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 7)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 891)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = Main.player[this.owner].direction;
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.3f);
								if (this.frame < 2)
								{
									this.frame = 2;
									this.frameCounter = 0;
								}
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 8)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 890)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								this.frame = 1;
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.3f);
								if (this.frame < 2)
								{
									this.frame = 2;
									this.frameCounter = 0;
								}
								if (this.frameCounter > 4)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 7)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 884)
						{
							this.spriteDirection = this.direction;
							if (this.velocity.Y != 0f)
							{
								if (this.velocity.Y < 0f)
								{
									this.frame = 9;
								}
								else
								{
									this.frame = 1;
								}
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = 1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = -1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.5f);
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 8)
								{
									this.frame = 2;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 881 || this.type == 934)
						{
							this.spriteDirection = 1;
							if (Main.player[this.owner].Center.X < base.Center.X)
							{
								this.spriteDirection = -1;
							}
							if (this.velocity.Y > 0f)
							{
								this.frameCounter++;
								if (this.frameCounter > 2)
								{
									this.frame++;
									if (this.frame >= 2)
									{
										this.frame = 2;
									}
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter++;
								if (this.frameCounter > 2)
								{
									this.frame++;
									if (this.frame >= 5)
									{
										this.frame = 0;
									}
									this.frameCounter = 0;
								}
							}
							else if (this.frame == 0)
							{
								this.frame = 0;
							}
							else
							{
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > 3)
								{
									this.frame++;
									if (this.frame >= 6)
									{
										this.frame = 0;
									}
									this.frameCounter = 0;
								}
							}
							if (this.wet && Main.player[this.owner].position.Y + (float)Main.player[this.owner].height < this.position.Y + (float)this.height && this.localAI[0] == 0f)
							{
								if (this.velocity.Y > -4f)
								{
									this.velocity.Y = this.velocity.Y - 0.2f;
								}
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.95f;
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.4f;
							}
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 875)
						{
							if (this.velocity.Y != 0f)
							{
								if (this.velocity.Y < 0f)
								{
									this.frame = 3;
								}
								else
								{
									this.frame = 6;
								}
								this.frameCounter = 0;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.frame = 0;
								this.frameCounter = 0;
							}
							else
							{
								this.frameCounter += 1 + (int)Math.Abs(this.velocity.X * 0.75f);
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 6)
								{
									this.frame = 0;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 854)
						{
							if (this.velocity.Y != 0f)
							{
								this.frame = 7;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > 5)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 0 || this.frame > 3)
								{
									this.frame = 0;
								}
							}
							else
							{
								int num168 = 3;
								float num169 = this.velocity.Length();
								if (num169 > 4f)
								{
									num168 = 1;
								}
								else if (num169 > 2f)
								{
									num168 = 2;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > num168)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 4 || this.frame > 12)
								{
									this.frame = 4;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 825)
						{
							if (this.velocity.Y != 0f)
							{
								this.localAI[0] = 0f;
								this.frame = 12;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								if (this.frame >= 1 && this.frame <= 2)
								{
									this.localAI[0] = 0f;
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 5)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 2)
									{
										this.frame = 0;
									}
								}
								else if (this.frame >= 3 && this.frame <= 11)
								{
									this.localAI[0] = 0f;
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 5)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 11)
									{
										this.frame = 0;
									}
								}
								else
								{
									if (this.frame == 13)
									{
										num201 = this.frameCounter + 1;
										this.frameCounter = num201;
										if (num201 > 8)
										{
											this.frame++;
											this.frameCounter = 0;
										}
										if (this.frame == 14)
										{
											this.frame = 0;
										}
									}
									if (this.frame != 0)
									{
										this.frame = 13;
									}
									else
									{
										this.frame = 0;
									}
									if (this.frame == 0)
									{
										this.localAI[0] += 1f;
										if (this.localAI[0] > 300f && Main.rand.Next(50) == 0)
										{
											num201 = Main.rand.Next(2);
											if (num201 != 0)
											{
												if (num201 == 1)
												{
													this.frame = 3;
												}
											}
											else
											{
												this.frame = 1;
											}
										}
									}
								}
							}
							else
							{
								this.localAI[0] = 0f;
								int num170 = 3;
								float num171 = this.velocity.Length();
								if (num171 > 4f)
								{
									num170 = 2;
								}
								else if (num171 > 2f)
								{
									num170 = 1;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > num170)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame < 13)
								{
									this.frame = 13;
								}
								if (this.frame > 19)
								{
									this.frame = 14;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 821)
						{
							if (this.velocity.Y != 0f)
							{
								this.localAI[0] = 0f;
								this.frame = 12;
							}
							else if (flag16)
							{
								this.spriteDirection = -1;
								if (Main.player[this.owner].Center.X < base.Center.X)
								{
									this.spriteDirection = 1;
								}
								this.localAI[0] += 1f;
								if (this.localAI[0] > 400f)
								{
									int num172 = 7;
									if (this.frame == 9)
									{
										num172 = 25;
									}
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > num172)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame < 5)
									{
										this.frame = 5;
									}
									if (this.frame > 11)
									{
										this.localAI[0] = 0f;
										this.frame = 0;
									}
								}
								else
								{
									num201 = this.frameCounter + 1;
									this.frameCounter = num201;
									if (num201 > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame < 0 || this.frame > 4)
									{
										this.frame = 0;
									}
								}
							}
							else
							{
								this.localAI[0] = 0f;
								int num173 = 4;
								float num203 = this.velocity.Length();
								if (num203 > 3f)
								{
									num173 = 3;
								}
								if (num203 > 5f)
								{
									num173 = 2;
								}
								num201 = this.frameCounter + 1;
								this.frameCounter = num201;
								if (num201 > num173)
								{
									this.frame++;
									if (num173 == 0)
									{
										this.frame++;
									}
									this.frameCounter = 0;
								}
								if (this.frame < 13 || this.frame > 18)
								{
									this.frame = 13;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (flag6)
						{
							if (this.ai[1] > 0f)
							{
								if (this.localAI[1] == 0f)
								{
									this.localAI[1] = 1f;
									this.frame = 1;
								}
								if (this.frame != 0)
								{
									this.frameCounter++;
									if (this.frameCounter > 4)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 4)
									{
										this.frame = 0;
									}
								}
							}
							else if (this.velocity.Y == 0f)
							{
								this.localAI[1] = 0f;
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame < 5)
									{
										this.frame = 5;
									}
									if (this.frame >= 11)
									{
										this.frame = 5;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							else if (this.velocity.Y > 0f)
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
							Vector2 velocity = this.velocity;
						}
						else if (this.type == 268)
						{
							if (this.velocity.Y == 0f)
							{
								if (this.frame > 5)
								{
									this.frameCounter = 0;
								}
								if (flag16)
								{
									int num174 = 3;
									this.frameCounter++;
									if (this.frameCounter < num174)
									{
										this.frame = 0;
									}
									else if (this.frameCounter < num174 * 2)
									{
										this.frame = 1;
									}
									else if (this.frameCounter < num174 * 3)
									{
										this.frame = 2;
									}
									else if (this.frameCounter < num174 * 4)
									{
										this.frame = 3;
									}
									else
									{
										this.frameCounter = num174 * 4;
									}
								}
								else
								{
									this.velocity.X = this.velocity.X * 0.8f;
									this.frameCounter++;
									int num175 = 3;
									if (this.frameCounter < num175)
									{
										this.frame = 0;
									}
									else if (this.frameCounter < num175 * 2)
									{
										this.frame = 1;
									}
									else if (this.frameCounter < num175 * 3)
									{
										this.frame = 2;
									}
									else if (this.frameCounter < num175 * 4)
									{
										this.frame = 3;
									}
									else if (flag2 || flag3)
									{
										this.velocity.X = this.velocity.X * 2f;
										this.frame = 4;
										this.velocity.Y = -6.1f;
										this.frameCounter = 0;
										for (int num176 = 0; num176 < 4; num176++)
										{
											int num177 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 4, 5, 0f, 0f, 0, default(Color), 1f);
											Main.dust[num177].velocity += this.velocity;
											Main.dust[num177].velocity *= 0.4f;
										}
									}
									else
									{
										this.frameCounter = num175 * 4;
									}
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter = 0;
								this.frame = 5;
							}
							else
							{
								this.frame = 4;
								this.frameCounter = 3;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 269)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									int num178 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 6, 76, 0f, 0f, 0, default(Color), 1f);
									Main.dust[num178].noGravity = true;
									Main.dust[num178].velocity *= 0.3f;
									Main.dust[num178].noLight = true;
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 3)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 2;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 313)
						{
							int i3 = (int)(base.Center.X / 16f);
							int num179 = (int)(base.Center.Y / 16f);
							int num180 = 0;
							Tile tileSafely2 = Framing.GetTileSafely(i3, num179);
							Tile tileSafely3 = Framing.GetTileSafely(i3, num179 - 1);
							Tile tileSafely4 = Framing.GetTileSafely(i3, num179 + 1);
							if (*tileSafely2.wall > 0)
							{
								num180++;
							}
							if (*tileSafely3.wall > 0)
							{
								num180++;
							}
							if (*tileSafely4.wall > 0)
							{
								num180++;
							}
							if (num180 > 1)
							{
								this.position.Y = this.position.Y + (float)this.height;
								this.height = 34;
								this.position.Y = this.position.Y - (float)this.height;
								this.position.X = this.position.X + (float)(this.width / 2);
								this.width = 34;
								this.position.X = this.position.X - (float)(this.width / 2);
								Vector2 vector13;
								vector13..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								float num181 = Main.player[this.owner].Center.X - vector13.X;
								float num182 = Main.player[this.owner].Center.Y - vector13.Y;
								float num183 = (float)Math.Sqrt((double)(num181 * num181 + num182 * num182));
								float num184 = 4f / num183;
								num181 *= num184;
								num182 *= num184;
								if (num183 < 120f)
								{
									this.velocity.X = this.velocity.X * 0.9f;
									this.velocity.Y = this.velocity.Y * 0.9f;
									if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < 0.1)
									{
										this.velocity *= 0f;
									}
								}
								else
								{
									this.velocity.X = (this.velocity.X * 9f + num181) / 10f;
									this.velocity.Y = (this.velocity.Y * 9f + num182) / 10f;
								}
								if (num183 >= 120f)
								{
									this.spriteDirection = this.direction;
									this.rotation = (float)Math.Atan2((double)(this.velocity.Y * (float)(-(float)this.direction)), (double)(this.velocity.X * (float)(-(float)this.direction)));
								}
								this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 10)
								{
									this.frame = 5;
								}
								if (this.frame < 5)
								{
									this.frame = 10;
								}
							}
							else
							{
								this.rotation = 0f;
								if (this.direction == -1)
								{
									this.spriteDirection = 1;
								}
								if (this.direction == 1)
								{
									this.spriteDirection = -1;
								}
								this.position.Y = this.position.Y + (float)this.height;
								this.height = 30;
								this.position.Y = this.position.Y - (float)this.height;
								this.position.X = this.position.X + (float)(this.width / 2);
								this.width = 30;
								this.position.X = this.position.X - (float)(this.width / 2);
								if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
								{
									if (flag16)
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
									else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
									{
										this.frameCounter += (int)Math.Abs(this.velocity.X);
										this.frameCounter++;
										if (this.frameCounter > 6)
										{
											this.frame++;
											this.frameCounter = 0;
										}
										if (this.frame > 3)
										{
											this.frame = 0;
										}
									}
									else
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
								}
								else
								{
									this.frameCounter = 0;
									this.frame = 4;
								}
								this.velocity.Y = this.velocity.Y + 0.4f;
								if (this.velocity.Y > 10f)
								{
									this.velocity.Y = 10f;
								}
							}
						}
						else if (this.type >= 390 && this.type <= 392)
						{
							int i4 = (int)(base.Center.X / 16f);
							int num185 = (int)(base.Center.Y / 16f);
							int num186 = 0;
							Tile tileSafely5 = Framing.GetTileSafely(i4, num185);
							Tile tileSafely6 = Framing.GetTileSafely(i4, num185 - 1);
							Tile tileSafely7 = Framing.GetTileSafely(i4, num185 + 1);
							if (*tileSafely5.wall > 0)
							{
								num186++;
							}
							if (*tileSafely6.wall > 0)
							{
								num186++;
							}
							if (*tileSafely7.wall > 0)
							{
								num186++;
							}
							if (num186 > 1)
							{
								this.position.Y = this.position.Y + (float)this.height;
								this.height = 34;
								this.position.Y = this.position.Y - (float)this.height;
								this.position.X = this.position.X + (float)(this.width / 2);
								this.width = 34;
								this.position.X = this.position.X - (float)(this.width / 2);
								float num187 = 9f;
								float num188 = (float)(40 * (this.minionPos + 1));
								Vector2 v11 = Main.player[this.owner].Center - base.Center;
								if (flag13)
								{
									v11 = vector11;
									num188 = 10f;
								}
								else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
								{
									this.ai[0] = 1f;
								}
								if (v11.Length() < num188)
								{
									this.velocity *= 0.9f;
									if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < 0.1)
									{
										this.velocity *= 0f;
									}
								}
								else if (v11.Length() < 800f || !flag13)
								{
									this.velocity = (this.velocity * 9f + v11.SafeNormalize(Vector2.Zero) * num187) / 10f;
								}
								if (v11.Length() >= num188)
								{
									this.spriteDirection = this.direction;
									this.rotation = this.velocity.ToRotation() + 1.5707964f;
								}
								else
								{
									this.rotation = v11.ToRotation() + 1.5707964f;
								}
								this.frameCounter += (int)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y));
								if (this.frameCounter > 5)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 7)
								{
									this.frame = 4;
								}
								if (this.frame < 4)
								{
									this.frame = 7;
								}
							}
							else
							{
								if (!flag14)
								{
									this.rotation = 0f;
								}
								if (this.direction == -1)
								{
									this.spriteDirection = 1;
								}
								if (this.direction == 1)
								{
									this.spriteDirection = -1;
								}
								this.position.Y = this.position.Y + (float)this.height;
								this.height = 30;
								this.position.Y = this.position.Y - (float)this.height;
								this.position.X = this.position.X + (float)(this.width / 2);
								this.width = 30;
								this.position.X = this.position.X - (float)(this.width / 2);
								if (!flag13 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
								{
									this.ai[0] = 1f;
								}
								if (!flag14 && this.frame >= 4 && this.frame <= 7)
								{
									Vector2 vector14 = Main.player[this.owner].Center - base.Center;
									if (flag13)
									{
										vector14 = vector11;
									}
									float num189 = 0f - vector14.Y;
									if (vector14.Y <= 0f)
									{
										if (num189 < 120f)
										{
											this.velocity.Y = -10f;
										}
										else if (num189 < 210f)
										{
											this.velocity.Y = -13f;
										}
										else if (num189 < 270f)
										{
											this.velocity.Y = -15f;
										}
										else if (num189 < 310f)
										{
											this.velocity.Y = -17f;
										}
										else if (num189 < 380f)
										{
											this.velocity.Y = -18f;
										}
									}
								}
								if (flag14)
								{
									this.frameCounter++;
									if (this.frameCounter > 3)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 8)
									{
										this.frame = 4;
									}
									if (this.frame <= 3)
									{
										this.frame = 7;
									}
								}
								else if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
								{
									if (flag16)
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
									else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
									{
										this.frameCounter += (int)Math.Abs(this.velocity.X);
										this.frameCounter++;
										if (this.frameCounter > 5)
										{
											this.frame++;
											this.frameCounter = 0;
										}
										if (this.frame > 2)
										{
											this.frame = 0;
										}
									}
									else
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
								}
								else
								{
									this.frameCounter = 0;
									this.frame = 3;
								}
								this.velocity.Y = this.velocity.Y + 0.4f;
								if (this.velocity.Y > 10f)
								{
									this.velocity.Y = 10f;
								}
							}
						}
						else if (this.type == 314)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 6)
									{
										this.frame = 1;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 7;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 319)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 8)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 5)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 236)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									if (this.frame < 2)
									{
										this.frame = 2;
									}
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 8)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 499)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									if (this.frame < 2)
									{
										this.frame = 2;
									}
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 8)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 765)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									if (this.frame < 1)
									{
										this.frame = 1;
									}
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 6)
									{
										this.frame = 1;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 266)
						{
							if (this.velocity.Y >= 0f && (double)this.velocity.Y <= 0.8)
							{
								if (flag16)
								{
									this.frameCounter++;
								}
								else
								{
									this.frameCounter += 3;
								}
							}
							else
							{
								this.frameCounter += 5;
							}
							if (this.frameCounter >= 20)
							{
								this.frameCounter -= 20;
								this.frame++;
							}
							if (this.frame > 1)
							{
								this.frame = 0;
							}
							if (this.wet && Main.player[this.owner].position.Y + (float)Main.player[this.owner].height < this.position.Y + (float)this.height && this.localAI[0] == 0f)
							{
								if (this.velocity.Y > -4f)
								{
									this.velocity.Y = this.velocity.Y - 0.2f;
								}
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.95f;
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.4f;
							}
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 334)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									if (this.frame > 0)
									{
										this.frameCounter += 2;
										if (this.frameCounter > 6)
										{
											this.frame++;
											this.frameCounter = 0;
										}
										if (this.frame >= 7)
										{
											this.frame = 0;
										}
									}
									else
									{
										this.frame = 0;
										this.frameCounter = 0;
									}
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs((double)this.velocity.X * 0.75);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 7 || this.frame < 1)
									{
										this.frame = 1;
									}
								}
								else if (this.frame > 0)
								{
									this.frameCounter += 2;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 7)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter = 0;
								this.frame = 2;
							}
							else if (this.velocity.Y > 0f)
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 353)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 9)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							else if (this.velocity.Y > 0f)
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 111)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 7)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y < 0f)
							{
								this.frameCounter = 0;
								this.frame = 4;
							}
							else if (this.velocity.Y > 0f)
							{
								this.frameCounter = 0;
								this.frame = 6;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 112)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 3)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y != 0f)
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 127)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 5)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frame = 0;
								this.frameCounter = 0;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 200)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 5)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.rotation = this.velocity.X * 0.1f;
								this.frameCounter++;
								if (this.velocity.Y < 0f)
								{
									this.frameCounter += 2;
								}
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 9)
								{
									this.frame = 6;
								}
								if (this.frame < 6)
								{
									this.frame = 6;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.1f;
							if (this.velocity.Y > 4f)
							{
								this.velocity.Y = 4f;
							}
						}
						else if (this.type == 208)
						{
							if (this.velocity.Y == 0f && flag16)
							{
								if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) < this.position.X + (float)(this.width / 2))
								{
									this.direction = -1;
								}
								else if (Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2) > this.position.X + (float)(this.width / 2))
								{
									this.direction = 1;
								}
								this.rotation = 0f;
								this.frame = 0;
							}
							else
							{
								this.rotation = this.velocity.X * 0.075f;
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 4)
								{
									this.frame = 1;
								}
								if (this.frame < 1)
								{
									this.frame = 1;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.1f;
							if (this.velocity.Y > 4f)
							{
								this.velocity.Y = 4f;
							}
						}
						else if (this.type == 209)
						{
							if (this.alpha > 0)
							{
								this.alpha -= 5;
								if (this.alpha < 0)
								{
									this.alpha = 0;
								}
							}
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 11)
									{
										this.frame = 2;
									}
									if (this.frame < 2)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frame = 1;
								this.frameCounter = 0;
								this.rotation = 0f;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 324)
						{
							if (this.velocity.Y == 0f)
							{
								if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 5)
									{
										this.frame = 2;
									}
									if (this.frame < 2)
									{
										this.frame = 2;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.frameCounter = 0;
								this.frame = 1;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 14f)
							{
								this.velocity.Y = 14f;
							}
						}
						else if (this.type == 210)
						{
							if (this.velocity.Y == 0f)
							{
								if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame > 6)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else
							{
								this.rotation = this.velocity.X * 0.05f;
								this.frameCounter++;
								if (this.frameCounter > 6)
								{
									this.frame++;
									this.frameCounter = 0;
								}
								if (this.frame > 11)
								{
									this.frame = 7;
								}
								if (this.frame < 7)
								{
									this.frame = 7;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
						else if (this.type == 398)
						{
							if (this.velocity.Y == 0f)
							{
								if (flag16)
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
								else if ((double)this.velocity.X < -0.8 || (double)this.velocity.X > 0.8)
								{
									this.frameCounter += (int)Math.Abs(this.velocity.X);
									this.frameCounter++;
									if (this.frameCounter > 6)
									{
										this.frame++;
										this.frameCounter = 0;
									}
									if (this.frame >= 5)
									{
										this.frame = 0;
									}
								}
								else
								{
									this.frame = 0;
									this.frameCounter = 0;
								}
							}
							else if (this.velocity.Y != 0f)
							{
								this.frameCounter = 0;
								this.frame = 5;
							}
							this.velocity.Y = this.velocity.Y + 0.4f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
						}
					}
					if (this.type == 891)
					{
						Player player5 = Main.player[this.owner];
						DelegateMethods.v3_1 = new Vector3(1f, 0.61f, 0.16f) * 1.5f;
						Vector2 center2 = base.Center;
						Vector2 end = base.Center + this.velocity * 6f;
						float width = 20f;
						Utils.TileActionAttempt plot;
						if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
						{
							plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
						}
						Utils.PlotTileLine(center2, end, width, plot);
						Vector2 left = base.Left;
						Vector2 right = base.Right;
						float width2 = 20f;
						Utils.TileActionAttempt plot2;
						if ((plot2 = Projectile.<>O.<4>__CastLightOpen) == null)
						{
							plot2 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
						}
						Utils.PlotTileLine(left, right, width2, plot2);
					}
					return;
				}
				Player player3 = Main.player[this.owner];
				float num190 = 0.15f;
				this.tileCollide = false;
				int num191 = 150;
				Vector2 center = base.Center;
				float num192 = player3.Center.X - center.X;
				float num193 = player3.Center.Y - center.Y;
				num193 -= 65f;
				num192 -= (float)(30 * player3.direction);
				float num194 = (float)Math.Sqrt((double)(num192 * num192 + num193 * num193));
				float num195 = 8f;
				float num196 = num194;
				float num197 = 2000f;
				bool flag21 = num194 > num197;
				if (num194 < (float)num191 && player3.velocity.Y == 0f && this.position.Y + (float)this.height <= player3.position.Y + (float)player3.height && !Collision.SolidCollision(this.position, this.width, this.height) && this.velocity.Y < -6f)
				{
					this.velocity.Y = -6f;
				}
				if (num194 < 10f)
				{
					this.velocity *= 0.9f;
					if (this.velocity.Length() < 0.5f)
					{
						this.velocity = Vector2.Zero;
					}
					num190 = 0f;
				}
				else
				{
					if (num194 > (float)num191)
					{
						num190 = 0.2f;
						num195 = 12f;
					}
					num194 = num195 / num194;
					num192 *= num194;
					num193 *= num194;
				}
				if (flag21)
				{
					int num198 = 234;
					if (this.type == 889)
					{
						num198 = 60;
					}
					for (int n = 0; n < 12; n++)
					{
						float speedX5 = 1f - Main.rand.NextFloat() * 2f;
						float speedY5 = 1f - Main.rand.NextFloat() * 2f;
						int num199 = Dust.NewDust(this.position, this.width, this.height, num198, speedX5, speedY5, 0, default(Color), 1f);
						Main.dust[num199].noLightEmittence = true;
						Main.dust[num199].noGravity = true;
					}
					base.Center = player3.Center;
					this.velocity = Vector2.Zero;
					if (Main.myPlayer == this.owner)
					{
						this.netUpdate = true;
					}
				}
				if (this.velocity.X < num192)
				{
					this.velocity.X = this.velocity.X + num190;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num190;
					}
				}
				if (this.velocity.X > num192)
				{
					this.velocity.X = this.velocity.X - num190;
					if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - num190;
					}
				}
				if (this.velocity.Y < num193)
				{
					this.velocity.Y = this.velocity.Y + num190;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num190;
					}
				}
				if (this.velocity.Y > num193)
				{
					this.velocity.Y = this.velocity.Y - num190;
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num190;
					}
				}
				this.direction = -player3.direction;
				this.spriteDirection = -this.direction;
				int num200 = 100;
				if (num196 >= (float)num191)
				{
					this.rotation += 0.5f;
					if (this.rotation > 6.2831855f)
					{
						this.rotation -= 6.2831855f;
					}
					this.frame = 6;
					this.frameCounter = 0;
					if (this.type == 885)
					{
						this.localAI[0] = 0f;
					}
					if (this.type == 889)
					{
						this.localAI[0] += 3f;
						if (this.localAI[0] > (float)num200)
						{
							this.localAI[0] = (float)num200;
						}
					}
					return;
				}
				this.rotation *= 0.95f;
				if (this.rotation < 0.05f)
				{
					this.rotation = 0f;
				}
				this.frameCounter++;
				if (this.type == 885)
				{
					num201 = this.frameCounter;
					if (num201 <= 20)
					{
						if (num201 != 10)
						{
							if (num201 == 20)
							{
								this.localAI[0] = 1f;
							}
						}
						else
						{
							this.localAI[0] = 0f;
						}
					}
					else if (num201 != 30)
					{
						if (num201 == 40)
						{
							this.localAI[0] = 1f;
						}
					}
					else
					{
						this.localAI[0] = 2f;
					}
				}
				if (this.type == 889)
				{
					this.localAI[0] -= 3f;
					if (this.localAI[0] < 0f)
					{
						this.localAI[0] = 0f;
					}
				}
				if (this.frameCounter % 5 == 0)
				{
					this.frame++;
					if (this.frame > 5)
					{
						this.frame = 0;
					}
				}
				if (this.frameCounter >= 40)
				{
					this.frameCounter = 0;
				}
				return;
			}
		}

		// Token: 0x06000DA7 RID: 3495 RVA: 0x0037A768 File Offset: 0x00378968
		private bool Chester_IsAnyPlayerTrackingThisProjectile()
		{
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && player.piggyBankProjTracker.IsTracking(this))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000DA8 RID: 3496 RVA: 0x0037A7A8 File Offset: 0x003789A8
		private unsafe void AI_062()
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = 20f;
			float num4 = 40f;
			float num5 = 0.69f;
			if (this.type == 963)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].abigailMinion = false;
				}
				if (Main.player[this.owner].abigailMinion)
				{
					this.timeLeft = 2;
				}
				this.originalDamage = Main.player[this.owner].highestAbigailCounterOriginalDamage;
				num2 = (float)(Main.player[this.owner].ownedProjectileCounts[970] - 1);
				num3 = Math.Max(4f, 18f - num2 * 1.75f);
				num = 1.4f;
				num4 = Math.Max(5f, num4 - num2 * 4f);
				num5 = Math.Min(1f, num5 + num2 * 0.03f);
			}
			if (this.type == 423)
			{
				num4 = 5f;
			}
			if (this.type == 373)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].hornetMinion = false;
				}
				if (Main.player[this.owner].hornetMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 375)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].impMinion = false;
				}
				if (Main.player[this.owner].impMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 407)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].sharknadoMinion = false;
				}
				if (Main.player[this.owner].sharknadoMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 423)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].UFOMinion = false;
				}
				if (Main.player[this.owner].UFOMinion)
				{
					this.timeLeft = 2;
				}
			}
			if (this.type == 613)
			{
				if (Main.player[this.owner].dead)
				{
					Main.player[this.owner].stardustMinion = false;
				}
				if (Main.player[this.owner].stardustMinion)
				{
					this.timeLeft = 2;
				}
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				if (this.localAI[1] > 0f)
				{
					this.localAI[1] -= 1f;
				}
			}
			if (this.type == 423)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[1] -= 1f;
					this.tileCollide = false;
					if (this.ai[1] > 3f)
					{
						int num6 = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
						Main.dust[num6].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
						Main.dust[num6].velocity /= 2.5f;
						Main.dust[num6].noGravity = true;
						Main.dust[num6].noLight = true;
						Main.dust[num6].frame.Y = 80;
					}
					if (this.ai[1] != 0f)
					{
						return;
					}
					this.ai[1] = 30f;
					this.ai[0] = 0f;
					this.velocity /= 5f;
					this.velocity.Y = 0f;
					this.extraUpdates = 0;
					this.numUpdates = 0;
					this.netUpdate = true;
					this.extraUpdates = 0;
					this.numUpdates = 0;
				}
				if (this.extraUpdates > 1)
				{
					this.extraUpdates = 0;
				}
				if (this.numUpdates > 1)
				{
					this.numUpdates = 0;
				}
			}
			if (this.type == 613)
			{
				if (this.ai[0] == 2f)
				{
					this.ai[1] -= 1f;
					this.tileCollide = false;
					if (this.ai[1] > 3f)
					{
						if (this.numUpdates < 20)
						{
							for (int i = 0; i < 3; i++)
							{
								Dust dust4 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
								dust4.noGravity = true;
								dust4.position = base.Center;
								dust4.velocity *= 3f;
								dust4.velocity += this.velocity * 3f;
								dust4.fadeIn = 1f;
							}
						}
						float num7 = 2f - (float)this.numUpdates / 30f;
						if (this.scale > 0f)
						{
							float num8 = 2f;
							int j = 0;
							while ((float)j < num8)
							{
								Dust dust5 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
								dust5.noGravity = true;
								dust5.position = base.Center + Vector2.UnitY.RotatedBy((double)((float)this.numUpdates * 0.10471976f + (float)this.whoAmI * 0.7853982f + 1.5707964f), default(Vector2)) * (float)(this.height / 2) - this.velocity * ((float)j / num8);
								dust5.velocity = this.velocity / 3f;
								dust5.fadeIn = num7 / 2f;
								dust5.scale = num7;
								j++;
							}
						}
					}
					if (this.ai[1] != 0f)
					{
						return;
					}
					this.ai[1] = 30f;
					this.ai[0] = 0f;
					this.velocity /= 5f;
					this.velocity.Y = 0f;
					this.extraUpdates = 0;
					this.numUpdates = 0;
					this.netUpdate = true;
					float num9 = 15f;
					int k = 0;
					while ((float)k < num9)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust.noGravity = true;
						dust.position = base.Center - this.velocity * 5f;
						dust.velocity *= 3f;
						dust.velocity += this.velocity * 3f;
						dust.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust.fadeIn = 2f;
							dust.scale = 2f;
							dust.velocity /= 8f;
						}
						k++;
					}
					int l = 0;
					while ((float)l < num9)
					{
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.position = base.Center;
						dust2.velocity *= 3f;
						dust2.velocity += this.velocity * 3f;
						dust2.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust2.fadeIn = 2f;
							dust2.scale = 2f;
							dust2.velocity /= 8f;
						}
						l++;
					}
					this.extraUpdates = 0;
					this.numUpdates = 0;
				}
				if (this.extraUpdates > 1)
				{
					this.extraUpdates = 0;
				}
				if (this.numUpdates > 1)
				{
					this.numUpdates = 0;
				}
			}
			if (this.type == 423 && this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			if (this.type == 613 && this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			float num10 = 0.05f;
			float num11 = (float)this.width;
			if (this.type == 407)
			{
				num10 = 0.1f;
				num11 *= 2f;
			}
			for (int m = 0; m < 1000; m++)
			{
				if (m != this.whoAmI && Main.projectile[m].active && Main.projectile[m].owner == this.owner && Main.projectile[m].type == this.type && Math.Abs(this.position.X - Main.projectile[m].position.X) + Math.Abs(this.position.Y - Main.projectile[m].position.Y) < num11)
				{
					if (this.position.X < Main.projectile[m].position.X)
					{
						this.velocity.X = this.velocity.X - num10;
					}
					else
					{
						this.velocity.X = this.velocity.X + num10;
					}
					if (this.position.Y < Main.projectile[m].position.Y)
					{
						this.velocity.Y = this.velocity.Y - num10;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + num10;
					}
				}
			}
			Vector2 vector = this.position;
			if (this.type == 423)
			{
			}
			if (this.type == 613)
			{
			}
			float num12 = 2000f;
			if (this.type == 963)
			{
				num12 = 700f;
			}
			bool flag = false;
			int num13 = -1;
			this.tileCollide = true;
			if (this.type == 963)
			{
				this.tileCollide = false;
			}
			if (this.type == 407)
			{
				this.tileCollide = false;
				if (Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.alpha += 20;
					if (this.alpha > 150)
					{
						this.alpha = 150;
					}
				}
				else
				{
					this.alpha -= 50;
					if (this.alpha < 60)
					{
						this.alpha = 60;
					}
				}
			}
			if (this.type == 407 || this.type == 613 || this.type == 423)
			{
				Vector2 center = Main.player[this.owner].Center;
				Vector2 vector2;
				vector2..ctor(0.5f);
				if (this.type == 423)
				{
					vector2.Y = 0f;
				}
				NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
				{
					Vector2 vector3 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * vector2;
					float num14 = num12 * 3f;
					float num15 = Vector2.Distance(vector3, center);
					if (num15 < num14 && !flag && Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num12 = num15;
						vector = vector3;
						flag = true;
						num13 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (!flag)
				{
					for (int n = 0; n < 200; n++)
					{
						NPC nPC = Main.npc[n];
						if (nPC.CanBeChasedBy(this, false))
						{
							Vector2 vector4 = nPC.position + nPC.Size * vector2;
							float num16 = Vector2.Distance(vector4, center);
							if (num16 < num12 && Collision.CanHitLine(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height))
							{
								num12 = num16;
								vector = vector4;
								flag = true;
								num13 = n;
							}
						}
					}
				}
			}
			else
			{
				NPC ownerMinionAttackTargetNPC2 = this.OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
				{
					float num17 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
					float num18 = num12 * 3f;
					if (num17 < num18 && !flag && ((this.type != 963) ? Collision.CanHitLine(this.position, this.width, this.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height) : Collision.CanHit(base.Center, 1, 1, ownerMinionAttackTargetNPC2.Center, 1, 1)))
					{
						num12 = num17;
						vector = ownerMinionAttackTargetNPC2.Center;
						flag = true;
						num13 = ownerMinionAttackTargetNPC2.whoAmI;
					}
				}
				if (!flag)
				{
					for (int num19 = 0; num19 < 200; num19++)
					{
						NPC nPC2 = Main.npc[num19];
						if (nPC2.CanBeChasedBy(this, false))
						{
							float num20 = Vector2.Distance(nPC2.Center, base.Center);
							if (num20 < num12 && ((this.type != 963) ? Collision.CanHitLine(this.position, this.width, this.height, nPC2.position, nPC2.width, nPC2.height) : Collision.CanHit(base.Center, 1, 1, nPC2.Center, 1, 1)))
							{
								num12 = num20;
								vector = nPC2.Center;
								flag = true;
								num13 = num19;
							}
						}
					}
				}
			}
			int num21 = 500;
			if (this.type == 963)
			{
				num21 = 800;
			}
			if (flag)
			{
				num21 = 1000;
			}
			if (flag && this.type == 423)
			{
				num21 = 1200;
			}
			if (flag && this.type == 613)
			{
				num21 = 1350;
			}
			Player player = Main.player[this.owner];
			if (Vector2.Distance(player.Center, base.Center) > (float)num21)
			{
				this.ai[0] = 1f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 1f)
			{
				this.tileCollide = false;
			}
			bool flag2 = false;
			if (this.type == 963)
			{
				flag2 = true;
			}
			if (flag2)
			{
				if (this.ai[0] <= 1f && this.localAI[1] <= 0f)
				{
					this.localAI[1] = -1f;
				}
				else
				{
					this.localAI[1] = Utils.Clamp<float>(this.localAI[1] + 0.05f, 0f, 1f);
					if (this.localAI[1] == 1f)
					{
						this.localAI[1] = -1f;
					}
				}
			}
			if (this.type == 963 && this.velocity.Length() > 0.1f && Main.rand.Next(1500) == 0)
			{
				SoundEngine.PlaySound(SoundID.AbigailCry, new Vector2?(base.Center), null);
			}
			bool flag3 = false;
			if (this.type == 423 || this.type == 407)
			{
				flag3 = true;
			}
			if (this.ai[0] >= 2f)
			{
				if (this.ai[0] == 2f && this.type == 963)
				{
					SoundEngine.PlaySound(SoundID.AbigailAttack, new Vector2?(base.Center), null);
				}
				this.ai[0] += 1f;
				if (flag2)
				{
					this.localAI[1] = this.ai[0] / num4;
				}
				if (!flag)
				{
					this.ai[0] += 1f;
				}
				if (this.ai[0] > num4)
				{
					this.ai[0] = 0f;
					this.netUpdate = true;
					if (flag && this.type == 963 && (vector - base.Center).Length() < 50f)
					{
						this.ai[0] = 2f;
					}
				}
				this.velocity *= num5;
			}
			else if (flag && (flag3 || this.ai[0] == 0f))
			{
				Vector2 v = vector - base.Center;
				float num22 = v.Length();
				v = v.SafeNormalize(Vector2.Zero);
				if (this.type == 423)
				{
					v = vector - Vector2.UnitY * 80f;
					int num23 = (int)v.Y / 16;
					if (num23 < 0)
					{
						num23 = 0;
					}
					Tile tile = Main.tile[(int)v.X / 16, num23];
					if (tile != null && tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
					{
						v += Vector2.UnitY * 16f;
						tile = Main.tile[(int)v.X / 16, (int)v.Y / 16];
						if (tile != null && tile.active() && Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
						{
							v += Vector2.UnitY * 16f;
						}
					}
					v -= base.Center;
					num22 = v.Length();
					v = v.SafeNormalize(Vector2.Zero);
					if (num22 > 300f && num22 <= 800f && this.localAI[0] == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)((int)(num22 / 10f));
						this.extraUpdates = (int)this.ai[1];
						this.velocity = v * 10f;
						this.localAI[0] = 60f;
						return;
					}
				}
				if (this.type == 613)
				{
					v = vector;
					Vector2 vector5 = base.Center - v;
					if (vector5 == Vector2.Zero)
					{
						vector5 = -Vector2.UnitY;
					}
					vector5 = vector5.SafeNormalize(Vector2.Zero);
					v += vector5 * 60f;
					int num24 = (int)v.Y / 16;
					if (num24 < 0)
					{
						num24 = 0;
					}
					Tile tile2 = Main.tile[(int)v.X / 16, num24];
					if (tile2 != null && tile2.active() && Main.tileSolid[(int)(*tile2.type)] && !Main.tileSolidTop[(int)(*tile2.type)])
					{
						v += Vector2.UnitY * 16f;
						tile2 = Main.tile[(int)v.X / 16, (int)v.Y / 16];
						if (tile2 != null && tile2.active() && Main.tileSolid[(int)(*tile2.type)] && !Main.tileSolidTop[(int)(*tile2.type)])
						{
							v += Vector2.UnitY * 16f;
						}
					}
					v -= base.Center;
					num22 = v.Length();
					v = v.SafeNormalize(Vector2.Zero);
					if (num22 > 400f && num22 <= 800f && this.localAI[0] == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = (float)((int)(num22 / 10f));
						this.extraUpdates = (int)this.ai[1];
						this.velocity = v * 10f;
						this.localAI[0] = 60f;
						return;
					}
				}
				if (this.type == 407)
				{
					if (num22 > 400f)
					{
						float num25 = 3f;
						v *= num25;
						this.velocity = (this.velocity * 20f + v) / 21f;
					}
					else
					{
						this.velocity *= 0.96f;
					}
				}
				if (num22 > 200f)
				{
					float num26 = 6f + num2 * num;
					v *= num26;
					float num27 = num3 * 2f;
					this.velocity.X = (this.velocity.X * num27 + v.X) / (num27 + 1f);
					this.velocity.Y = (this.velocity.Y * num27 + v.Y) / (num27 + 1f);
				}
				else if (this.type == 963)
				{
					if (num22 < 50f)
					{
						this.velocity *= 0.5f;
						this.ai[0] = 2f;
						this.netUpdate = true;
					}
					else
					{
						float num28 = 4f + num2 * num;
						v *= num28;
						this.velocity = (this.velocity * num3 + v) / (num3 + 1f);
					}
				}
				else if (this.type == 423 || this.type == 613)
				{
					if (num22 > 70f && num22 < 130f)
					{
						float num29 = 7f;
						if (num22 < 100f)
						{
							num29 = -3f;
						}
						v *= num29;
						this.velocity = (this.velocity * 20f + v) / 21f;
						if (Math.Abs(v.X) > Math.Abs(v.Y))
						{
							this.velocity.X = (this.velocity.X * 10f + v.X) / 11f;
						}
					}
					else
					{
						this.velocity *= 0.97f;
					}
				}
				else if (this.type == 375)
				{
					if (num22 < 150f)
					{
						float num30 = 4f;
						v *= 0f - num30;
						this.velocity.X = (this.velocity.X * 40f + v.X) / 41f;
						this.velocity.Y = (this.velocity.Y * 40f + v.Y) / 41f;
					}
					else
					{
						this.velocity *= 0.97f;
					}
				}
				else if (this.velocity.Y > -1f)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
				}
			}
			else
			{
				if (this.type != 963 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
				{
					this.ai[0] = 1f;
				}
				float num31 = 6f;
				if (this.ai[0] == 1f)
				{
					num31 = 15f;
				}
				if (this.type == 407)
				{
					num31 = 9f;
				}
				if (this.type == 963)
				{
					num31 *= 0.8f;
				}
				Vector2 center2 = base.Center;
				Vector2 v2 = player.Center - center2 + new Vector2(0f, -60f);
				if (this.type == 407)
				{
					v2 += new Vector2(0f, 40f);
				}
				if (this.type == 963)
				{
					v2 += new Vector2((float)(-40 * Main.player[this.owner].direction), 40f);
				}
				if (this.type == 375)
				{
					this.ai[1] = 80f;
					this.netUpdate = true;
					v2 = player.Center - center2;
					int num32 = 1;
					for (int num33 = 0; num33 < this.whoAmI; num33++)
					{
						if (Main.projectile[num33].active && Main.projectile[num33].owner == this.owner && Main.projectile[num33].type == this.type)
						{
							num32++;
						}
					}
					v2.X -= (float)(10 * Main.player[this.owner].direction);
					v2.X -= (float)(num32 * 40 * Main.player[this.owner].direction);
					v2.Y -= 10f;
				}
				float num34 = v2.Length();
				if (num34 > 200f && num31 < 9f)
				{
					num31 = 9f;
				}
				if ((this.type == 423 || this.type == 407) && num34 > 300f && num31 < 12f)
				{
					num31 = 12f;
				}
				if (this.type == 375)
				{
					num31 = (float)((int)((double)num31 * 0.75));
				}
				if (num34 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 0f;
					this.netUpdate = true;
				}
				if (num34 > 2000f)
				{
					this.position.X = Main.player[this.owner].Center.X - (float)(this.width / 2);
					this.position.Y = Main.player[this.owner].Center.Y - (float)(this.width / 2);
				}
				if (this.type == 375 || this.type == 963)
				{
					if (num34 > 10f)
					{
						v2 = v2.SafeNormalize(Vector2.Zero);
						if (num34 < 50f)
						{
							num31 /= 2f;
						}
						v2 *= num31;
						this.velocity = (this.velocity * 20f + v2) / 21f;
					}
					else
					{
						this.direction = Main.player[this.owner].direction;
						this.velocity *= 0.9f;
					}
				}
				else if (this.type == 407)
				{
					if (Math.Abs(v2.X) > 40f || Math.Abs(v2.Y) > 10f)
					{
						v2 = v2.SafeNormalize(Vector2.Zero);
						v2 *= num31;
						v2 *= new Vector2(1.25f, 0.65f);
						this.velocity = (this.velocity * 20f + v2) / 21f;
					}
					else
					{
						if (this.velocity.X == 0f && this.velocity.Y == 0f)
						{
							this.velocity.X = -0.15f;
							this.velocity.Y = -0.05f;
						}
						this.velocity *= 1.01f;
					}
				}
				else if (num34 > 70f)
				{
					v2 = v2.SafeNormalize(Vector2.Zero);
					v2 *= num31;
					this.velocity = (this.velocity * 20f + v2) / 21f;
				}
				else
				{
					if (this.velocity.X == 0f && this.velocity.Y == 0f)
					{
						this.velocity.X = -0.15f;
						this.velocity.Y = -0.05f;
					}
					this.velocity *= 1.01f;
				}
				if (num34 > 250f && (this.type == 423 || this.type == 407))
				{
					float x = Main.player[this.owner].velocity.X;
					float y = Main.player[this.owner].velocity.Y;
					if ((this.velocity.X < 0f && x >= 0f) || (this.velocity.X >= 0f && x < 0f))
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					else
					{
						this.velocity.X = this.velocity.X + x * 0.125f;
					}
					if ((this.velocity.Y < 0f && y >= 0f) || (this.velocity.Y >= 0f && y < 0f))
					{
						this.velocity.Y = this.velocity.Y * 0.95f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + y * 0.125f;
					}
					if (this.velocity.Length() > num31)
					{
						this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num31;
					}
				}
			}
			this.rotation = this.velocity.X * 0.05f;
			this.frameCounter++;
			if (this.type == 373)
			{
				if (this.frameCounter > 1)
				{
					this.frame++;
					this.frameCounter = 0;
				}
				if (this.frame > 2)
				{
					this.frame = 0;
				}
			}
			if (this.type == 963)
			{
				if (this.ai[0] >= 2f)
				{
					int num35 = 12;
					if (this.frame < 8)
					{
						this.frameCounter = 0;
					}
					this.frameCounter++;
					this.frame = this.frameCounter / num35;
					if (this.frame > 6)
					{
						this.frameCounter = 0;
						this.frame = 5;
					}
					switch (this.frame)
					{
					case 0:
					case 1:
					case 2:
						this.frame = 8 + this.frame;
						goto IL_1FEF;
					case 3:
					case 5:
					case 7:
						this.frame = 11;
						goto IL_1FEF;
					}
					this.frame = 12;
					IL_1FEF:
					if (Main.rand.Next(2) == 0)
					{
						float num36 = 1.1f + Main.rand.NextFloat() * 0.3f;
						float num37 = 1.4f + Main.rand.NextFloat() * 0.4f;
						Vector2 vector6 = Main.rand.NextVector2CircularEdge((float)this.width * num36, (0f - (float)this.height) * 0.25f * num36);
						float num38 = vector6.ToRotation() + 1.5707964f;
						int num39 = Dust.NewDust(base.Bottom + vector6, 1, 1, 303, 0f, 0f, 50, Color.GhostWhite, num37);
						Main.dust[num39].velocity = vector6 * 0.0125f + new Vector2(1f, 0f).RotatedBy((double)num38, Vector2.Zero);
						Main.dust[num39].noGravity = true;
					}
				}
				else
				{
					if (this.frame > 7)
					{
						this.frame = 0;
						this.frameCounter = 0;
					}
					if (this.frameCounter > 6)
					{
						this.frameCounter = 0;
						this.frame++;
						if (this.frame > 7)
						{
							this.frame = 0;
						}
					}
				}
			}
			if (this.type == 375)
			{
				if (this.frameCounter >= 16)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / 4;
				if (this.ai[1] > 0f && this.ai[1] < 16f)
				{
					this.frame += 4;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num40 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num40].velocity *= 0.3f;
					Main.dust[num40].noGravity = true;
					Main.dust[num40].noLight = true;
				}
			}
			if (this.type == 407)
			{
				int num41 = 2;
				if (this.frameCounter >= 6 * num41)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / num41;
				if (Main.rand.Next(5) == 0)
				{
					int num42 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 217, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num42].velocity *= 0.3f;
					Main.dust[num42].noGravity = true;
					Main.dust[num42].noLight = true;
				}
			}
			if (this.type == 423 || this.type == 613)
			{
				int num43 = 3;
				if (this.frameCounter >= 4 * num43)
				{
					this.frameCounter = 0;
				}
				this.frame = this.frameCounter / num43;
			}
			if (this.velocity.X > 0f)
			{
				this.spriteDirection = (this.direction = -1);
			}
			else if (this.velocity.X < 0f)
			{
				this.spriteDirection = (this.direction = 1);
			}
			if (this.type == 963)
			{
				this.spriteDirection = (this.direction *= -1);
				if (!flag && Math.Abs(this.velocity.X) < 0.1f)
				{
					this.spriteDirection = ((Main.player[this.owner].Center.X > base.Center.X) ? 1 : -1);
				}
			}
			if (this.type == 373)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += (float)Main.rand.Next(1, 4);
				}
				int num44 = 90;
				if (Main.player[this.owner].strongBees)
				{
					num44 = 70;
				}
				if (this.ai[1] > (float)num44)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 375)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) == 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 90f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 407)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 50f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 423)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 40f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.type == 613)
			{
				if (this.ai[1] > 0f)
				{
					this.ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						this.ai[1] += 1f;
					}
				}
				if (this.ai[1] > 60f)
				{
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
			}
			if (!flag3 && this.ai[0] != 0f)
			{
				return;
			}
			float num45 = 0f;
			int num46 = 0;
			if (this.type == 373)
			{
				num45 = 10f;
				num46 = 374;
			}
			else if (this.type == 375)
			{
				num45 = 11f;
				num46 = 376;
			}
			else if (this.type == 407)
			{
				num45 = 20f;
				num46 = 408;
			}
			else if (this.type == 423)
			{
				num45 = 4f;
				num46 = 433;
			}
			else if (this.type == 613)
			{
				num45 = 14f;
				num46 = 614;
			}
			if (!flag)
			{
				return;
			}
			if (this.type == 375)
			{
				if ((vector - base.Center).X > 0f)
				{
					this.spriteDirection = (this.direction = -1);
				}
				else if ((vector - base.Center).X < 0f)
				{
					this.spriteDirection = (this.direction = 1);
				}
			}
			if (this.type == 407 && Collision.SolidCollision(this.position, this.width, this.height))
			{
				return;
			}
			if (this.type == 423)
			{
				if (Math.Abs((vector - base.Center).ToRotation() - 1.5707964f) > 0.7853982f)
				{
					this.velocity += (vector - base.Center - Vector2.UnitY * 80f).SafeNormalize(Vector2.Zero);
				}
				if ((vector - base.Center).Length() <= 400f && this.ai[1] == 0f)
				{
					this.ai[1] += 1f;
					if (Main.myPlayer == this.owner)
					{
						Vector2 v3 = vector - base.Center;
						v3 = v3.SafeNormalize(Vector2.Zero);
						v3 *= num45;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v3.X, v3.Y, num46, this.damage, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
						this.netUpdate = true;
						return;
					}
				}
			}
			else if (this.ai[1] == 0f && this.type == 613)
			{
				if ((vector - base.Center).Length() > 500f || this.ai[1] != 0f)
				{
					return;
				}
				this.ai[1] += 1f;
				if (Main.myPlayer == this.owner)
				{
					Vector2 v4 = vector - base.Center;
					v4 = v4.SafeNormalize(Vector2.Zero);
					v4 *= num45;
					int num47 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v4.X, v4.Y, num46, this.damage, this.knockBack, Main.myPlayer, 0f, (float)num13, 0f);
					Main.projectile[num47].timeLeft = 300;
					Main.projectile[num47].netUpdate = true;
					this.velocity -= v4 / 3f;
					this.netUpdate = true;
				}
				for (int num48 = 0; num48 < 5; num48++)
				{
					int num49 = this.width / 4;
					((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
					int num50 = Dust.NewDust(base.Center - Vector2.One * (float)num49, num49 * 2, num49 * 2, 88, 0f, 0f, 0, default(Color), 1f);
					Dust dust3 = Main.dust[num50];
					Vector2 vector7 = (dust3.position - base.Center).SafeNormalize(Vector2.Zero);
					dust3.position = base.Center + vector7 * (float)num49 * this.scale - new Vector2(4f);
					if (num48 < 30)
					{
						dust3.velocity = vector7 * dust3.velocity.Length() * 2f;
					}
					else
					{
						dust3.velocity = 2f * vector7 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust3.noGravity = true;
					dust3.scale = 0.7f + Main.rand.NextFloat();
				}
				return;
			}
			else if (this.ai[1] == 0f)
			{
				Vector2 v5 = vector - base.Center;
				this.ai[1] += 1f;
				if (Main.myPlayer == this.owner)
				{
					v5 = v5.SafeNormalize(Vector2.Zero);
					v5 *= num45;
					int num51 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v5.X, v5.Y, num46, this.damage, this.knockBack, Main.myPlayer, 0f, 0f, 0f);
					Main.projectile[num51].timeLeft = 300;
					Main.projectile[num51].netUpdate = true;
					this.netUpdate = true;
				}
			}
		}

		// Token: 0x06000DA9 RID: 3497 RVA: 0x0037D3FC File Offset: 0x0037B5FC
		private void AI_075()
		{
			Player player = Main.player[this.owner];
			float num = 1.5707964f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, false, true);
			int num2 = 2;
			float num3 = 0f;
			if (this.type == 439)
			{
				this.ai[0] += 1f;
				int num4 = 0;
				if (this.ai[0] >= 40f)
				{
					num4++;
				}
				if (this.ai[0] >= 80f)
				{
					num4++;
				}
				if (this.ai[0] >= 120f)
				{
					num4++;
				}
				int num5 = 24;
				int num6 = 6;
				this.ai[1] += 1f;
				bool flag = false;
				if (this.ai[1] >= (float)(num5 - num6 * num4))
				{
					this.ai[1] = 0f;
					flag = true;
				}
				this.frameCounter += 1 + num4;
				if (this.frameCounter >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= 6)
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num5 - num6 * num4;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item91, new Vector2?(this.position), null);
					}
				}
				if (this.ai[1] == 1f && this.ai[0] != 1f)
				{
					Vector2 spinningpoint = Vector2.UnitX * 24f;
					spinningpoint = spinningpoint.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
					Vector2 vector2 = base.Center + spinningpoint;
					for (int i = 0; i < 2; i++)
					{
						int num7 = Dust.NewDust(vector2 - Vector2.One * 8f, 16, 16, 135, this.velocity.X / 2f, this.velocity.Y / 2f, 100, default(Color), 1f);
						Main.dust[num7].velocity *= 0.66f;
						Main.dust[num7].noGravity = true;
						Main.dust[num7].scale = 1.4f;
					}
				}
				if (flag && Main.myPlayer == this.owner)
				{
					if (player.channel && player.CheckMana(player.inventory[player.selectedItem], -1, true, false) && !player.noItems && !player.CCed)
					{
						float num8 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector3 = vector;
						Vector2 value = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector3;
						if (player.gravDir == -1f)
						{
							value.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector3.Y;
						}
						Vector2 vector4 = Vector2.Normalize(value);
						if (float.IsNaN(vector4.X) || float.IsNaN(vector4.Y))
						{
							vector4 = -Vector2.UnitY;
						}
						vector4 *= num8;
						if (vector4.X != this.velocity.X || vector4.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector4;
						int num9 = 440;
						float num10 = 14f;
						int num11 = 7;
						for (int j = 0; j < 2; j++)
						{
							vector3 = base.Center + new Vector2((float)Main.rand.Next(-num11, num11 + 1), (float)Main.rand.Next(-num11, num11 + 1));
							Vector2 spinningpoint2 = Vector2.Normalize(this.velocity) * num10;
							spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291, default(Vector2));
							if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
							{
								spinningpoint2 = -Vector2.UnitY;
							}
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector3.X, vector3.Y, spinningpoint2.X, spinningpoint2.Y, num9, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 445)
			{
				if (this.soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item132, new Vector2?(this.position), null);
					this.soundDelay = 23;
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 60f)
				{
					this.localAI[0] = 0f;
				}
				if (Vector2.Distance(vector, base.Center) >= 5f)
				{
					float num12 = this.localAI[0] / 60f;
					if (num12 > 0.5f)
					{
						num12 = 1f - num12;
					}
					Vector3 vector40 = new Vector3(0f, 1f, 0.7f);
					Vector3 value2;
					value2..ctor(0f, 0.7f, 1f);
					Vector3 vector5 = Vector3.Lerp(vector40, value2, 1f - num12 * 2f) * 0.5f;
					if (Vector2.Distance(vector, base.Center) >= 30f)
					{
						Vector2 vector6 = base.Center - vector;
						vector6.Normalize();
						vector6 *= Vector2.Distance(vector, base.Center) - 30f;
						DelegateMethods.v3_1 = vector5 * 0.8f;
						Vector2 start = base.Center - vector6;
						Vector2 center4 = base.Center;
						float width = 8f;
						Utils.TileActionAttempt plot;
						if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
						{
							plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
						}
						Utils.PlotTileLine(start, center4, width, plot);
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, vector5.X, vector5.Y, vector5.Z);
				}
				if (Main.myPlayer == this.owner)
				{
					if (this.localAI[1] > 0f)
					{
						this.localAI[1] -= 1f;
					}
					if (!player.channel || player.noItems || player.CCed)
					{
						this.Kill();
					}
					else if (this.localAI[1] == 0f)
					{
						Vector2 vector7 = vector;
						Vector2 value3 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector7;
						if (player.gravDir == -1f)
						{
							value3.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector7.Y;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							value3 = new Vector2((float)Player.tileTargetX, (float)Player.tileTargetY) * 16f + Vector2.One * 8f - vector7;
							this.localAI[1] = 2f;
						}
						value3 = Vector2.Lerp(value3, this.velocity, 0.7f);
						if (float.IsNaN(value3.X) || float.IsNaN(value3.Y))
						{
							value3 = -Vector2.UnitY;
						}
						float num13 = 30f;
						if (value3.Length() < num13)
						{
							value3 = Vector2.Normalize(value3) * num13;
						}
						int tileBoost = player.inventory[player.selectedItem].tileBoost;
						int num14 = -Player.tileRangeX - tileBoost + 1;
						int num15 = Player.tileRangeX + tileBoost - 1;
						int num16 = -Player.tileRangeY - tileBoost;
						int num17 = Player.tileRangeY + tileBoost - 1;
						int num18 = 12;
						bool flag2 = false;
						if (value3.X < (float)(num14 * 16 - num18))
						{
							flag2 = true;
						}
						if (value3.Y < (float)(num16 * 16 - num18))
						{
							flag2 = true;
						}
						if (value3.X > (float)(num15 * 16 + num18))
						{
							flag2 = true;
						}
						if (value3.Y > (float)(num17 * 16 + num18))
						{
							flag2 = true;
						}
						if (flag2)
						{
							Vector2 vector8 = Vector2.Normalize(value3);
							float num19 = -1f;
							if (vector8.X < 0f && ((float)(num14 * 16 - num18) / vector8.X < num19 || num19 == -1f))
							{
								num19 = (float)(num14 * 16 - num18) / vector8.X;
							}
							if (vector8.X > 0f && ((float)(num15 * 16 + num18) / vector8.X < num19 || num19 == -1f))
							{
								num19 = (float)(num15 * 16 + num18) / vector8.X;
							}
							if (vector8.Y < 0f && ((float)(num16 * 16 - num18) / vector8.Y < num19 || num19 == -1f))
							{
								num19 = (float)(num16 * 16 - num18) / vector8.Y;
							}
							if (vector8.Y > 0f && ((float)(num17 * 16 + num18) / vector8.Y < num19 || num19 == -1f))
							{
								num19 = (float)(num17 * 16 + num18) / vector8.Y;
							}
							value3 = vector8 * num19;
						}
						if (value3.X != this.velocity.X || value3.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = value3;
					}
				}
			}
			if (this.type == 460)
			{
				this.ai[0] += 1f;
				int num20 = 0;
				if (this.ai[0] >= 80f)
				{
					num20++;
				}
				if (this.ai[0] >= 180f)
				{
					num20++;
				}
				bool flag3 = false;
				float num80 = this.ai[0];
				if (this.ai[0] == 80f || this.ai[0] == 180f || (this.ai[0] > 180f && this.ai[0] % 20f == 0f))
				{
					flag3 = true;
				}
				bool flag4 = this.ai[0] >= 180f;
				int num21 = 5;
				if (!flag4)
				{
					this.ai[1] += 1f;
				}
				bool flag5 = false;
				if (this.ai[0] == 1f)
				{
					flag5 = true;
				}
				if (flag4 && this.ai[0] % 20f == 0f)
				{
					flag5 = true;
				}
				if ((!flag4 && this.ai[1] >= (float)num21) || (flag4 && this.ai[0] % 5f == 0f))
				{
					if (!flag4)
					{
						this.ai[1] = 0f;
					}
					flag5 = true;
					float num22 = player.inventory[player.selectedItem].shootSpeed * this.scale;
					Vector2 vector9 = vector;
					Vector2 value4 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector9;
					if (player.gravDir == -1f)
					{
						value4.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector9.Y;
					}
					Vector2 vector10 = Vector2.Normalize(value4);
					if (float.IsNaN(vector10.X) || float.IsNaN(vector10.Y))
					{
						vector10 = -Vector2.UnitY;
					}
					vector10 *= num22;
					if (vector10.X != this.velocity.X || vector10.Y != this.velocity.Y)
					{
						this.netUpdate = true;
					}
					this.velocity = vector10;
				}
				if (this.soundDelay <= 0 && !flag4)
				{
					this.soundDelay = num21 - num20;
					this.soundDelay *= 2;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, new Vector2?(this.position), null);
					}
				}
				if (this.ai[0] > 10f && !flag4)
				{
					Vector2 spinningpoint3 = Vector2.UnitX * 18f;
					spinningpoint3 = spinningpoint3.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
					Vector2 vector11 = base.Center + spinningpoint3;
					for (int k = 0; k < num20 + 1; k++)
					{
						int num23 = 226;
						float num24 = 0.4f;
						if (k % 2 == 1)
						{
							num23 = 226;
							num24 = 0.65f;
						}
						Vector2 vector12 = vector11 + ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2() * (12f - (float)(num20 * 2));
						int num25 = Dust.NewDust(vector12 - Vector2.One * 8f, 16, 16, num23, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Main.dust[num25].velocity = Vector2.Normalize(vector11 - vector12) * 1.5f * (10f - (float)num20 * 2f) / 10f;
						Main.dust[num25].noGravity = true;
						Main.dust[num25].scale = num24;
						Main.dust[num25].customData = player;
					}
				}
				if (flag4)
				{
					Vector2 spinningpoint4 = Vector2.UnitX * 14f;
					spinningpoint4 = spinningpoint4.RotatedBy((double)(this.rotation - 1.5707964f), default(Vector2));
					Vector2 vector13 = base.Center + spinningpoint4;
					for (int l = 0; l < 2; l++)
					{
						int num26 = 226;
						float num27 = 0.35f;
						if (l % 2 == 1)
						{
							num26 = 226;
							num27 = 0.45f;
						}
						float num28 = Main.rand.NextFloatDirection();
						Vector2 vector14 = vector13 + (this.rotation + num28 * 0.7853982f * 0.8f - 1.5707964f).ToRotationVector2() * 6f;
						int num29 = 24;
						int num30 = Dust.NewDust(vector14 - Vector2.One * (float)(num29 / 2), num29, num29, num26, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
						Main.dust[num30].velocity = (vector14 - vector13).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0f, Math.Abs(num28), true));
						Main.dust[num30].noGravity = true;
						Main.dust[num30].scale = num27;
						Main.dust[num30].customData = player;
						Main.dust[num30].fadeIn = 0.5f;
					}
				}
				if (flag5 && Main.myPlayer == this.owner)
				{
					bool flag6 = !flag3 || player.CheckMana(player.inventory[player.selectedItem], -1, true, false);
					if (player.channel && flag6 && !player.noItems && !player.CCed)
					{
						if (this.ai[0] == 180f)
						{
							Vector2 center = base.Center;
							Vector2 vector15 = Vector2.Normalize(this.velocity);
							if (float.IsNaN(vector15.X) || float.IsNaN(vector15.Y))
							{
								vector15 = -Vector2.UnitY;
							}
							int num31 = (int)((float)this.damage * 1.5f);
							int num32 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, vector15.X, vector15.Y, 461, num31, this.knockBack, this.owner, 0f, (float)this.whoAmI, 0f);
							this.ai[1] = (float)num32;
							this.netUpdate = true;
						}
						else if (flag4)
						{
							Projectile projectile = Main.projectile[(int)this.ai[1]];
							if (!projectile.active || projectile.type != 461)
							{
								this.Kill();
								return;
							}
						}
						else
						{
							bool flag7 = false;
							if (this.ai[0] == 1f)
							{
								flag7 = true;
							}
							if (this.ai[0] <= 50f && this.ai[0] % 10f == 0f)
							{
								flag7 = true;
							}
							if (this.ai[0] >= 80f && this.ai[0] < 180f && this.ai[0] % 30f == 0f)
							{
								flag7 = true;
							}
							if (flag7)
							{
								int num33 = 459;
								float num34 = 10f;
								Vector2 vector16 = base.Center;
								Vector2 vector17 = Vector2.Normalize(this.velocity) * num34;
								if (float.IsNaN(vector17.X) || float.IsNaN(vector17.Y))
								{
									vector17 = -Vector2.UnitY;
								}
								float num35 = 0.7f + (float)num20 * 0.3f;
								int num36 = (num35 < 1f) ? this.damage : ((int)((float)this.damage * 2.5f));
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector16.X, vector16.Y, vector17.X, vector17.Y, num33, num36, this.knockBack, this.owner, 0f, num35, 0f);
							}
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 633)
			{
				float num37 = 30f;
				if (this.ai[0] > 90f)
				{
					num37 = 15f;
				}
				if (this.ai[0] > 120f)
				{
					num37 = 5f;
				}
				this.damage = (int)player.GetTotalDamage(DamageClass.Magic).ApplyTo((float)player.inventory[player.selectedItem].damage);
				this.ai[0] += 1f;
				this.ai[1] += 1f;
				bool flag8 = false;
				if (this.ai[0] % num37 == 0f)
				{
					flag8 = true;
				}
				int num38 = 10;
				bool flag9 = false;
				if (this.ai[0] % num37 == 0f)
				{
					flag9 = true;
				}
				if (this.ai[1] >= 1f)
				{
					this.ai[1] = 0f;
					flag9 = true;
					if (Main.myPlayer == this.owner)
					{
						float num39 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector18 = vector;
						Vector2 value5 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector18;
						if (player.gravDir == -1f)
						{
							value5.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector18.Y;
						}
						Vector2 value6 = Vector2.Normalize(value5);
						if (float.IsNaN(value6.X) || float.IsNaN(value6.Y))
						{
							value6 = -Vector2.UnitY;
						}
						value6 = Vector2.Normalize(Vector2.Lerp(value6, Vector2.Normalize(this.velocity), 0.92f));
						value6 *= num39;
						if (value6.X != this.velocity.X || value6.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = value6;
					}
				}
				this.frameCounter++;
				int num40 = (this.ai[0] >= 120f) ? 1 : 4;
				if (this.frameCounter >= num40)
				{
					this.frameCounter = 0;
					int num81 = this.frame + 1;
					this.frame = num81;
					if (num81 >= 5)
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num38;
					this.soundDelay *= 2;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, new Vector2?(this.position), null);
					}
				}
				if (flag9 && Main.myPlayer == this.owner)
				{
					bool flag10 = !flag8 || player.CheckMana(player.inventory[player.selectedItem], -1, true, false);
					if (player.channel && flag10 && !player.noItems && !player.CCed)
					{
						if (this.ai[0] == 1f)
						{
							Vector2 center2 = base.Center;
							Vector2 vector19 = Vector2.Normalize(this.velocity);
							if (float.IsNaN(vector19.X) || float.IsNaN(vector19.Y))
							{
								vector19 = -Vector2.UnitY;
							}
							int num41 = this.damage;
							for (int m = 0; m < 6; m++)
							{
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center2.X, center2.Y, vector19.X, vector19.Y, 632, num41, this.knockBack, this.owner, (float)m, (float)this.whoAmI, 0f);
							}
							this.netUpdate = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 595)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				int num81 = this.frame + 1;
				this.frame = num81;
				if (num81 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
				this.soundDelay--;
				if (this.soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, new Vector2?(base.Center), null);
					this.soundDelay = 12;
				}
				if (Main.myPlayer == this.owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num42 = 1f;
						if (player.inventory[player.selectedItem].shoot == this.type)
						{
							num42 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						}
						Vector2 vec = Main.MouseWorld - vector;
						vec.Normalize();
						if (vec.HasNaNs())
						{
							vec = Vector2.UnitX * (float)player.direction;
						}
						vec *= num42;
						if (vec.X != this.velocity.X || vec.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vec;
					}
					else
					{
						this.Kill();
					}
				}
				Vector2 vector20 = base.Center + this.velocity * 3f;
				Lighting.AddLight(vector20, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num43 = Dust.NewDust(vector20 - base.Size / 2f, this.width, this.height, 63, this.velocity.X, this.velocity.Y, 100, default(Color), 2f);
					Main.dust[num43].noGravity = true;
					Main.dust[num43].position -= this.velocity;
				}
			}
			if (this.type == 735)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				int num81 = this.frame + 1;
				this.frame = num81;
				if (num81 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
				this.soundDelay--;
				if (this.soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, new Vector2?(base.Center), null);
					this.soundDelay = 12;
				}
				if (Main.myPlayer == this.owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num44 = 1f;
						if (player.inventory[player.selectedItem].shoot == this.type)
						{
							num44 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						}
						Vector2 vec2 = Main.MouseWorld - vector;
						vec2.Normalize();
						if (vec2.HasNaNs())
						{
							vec2 = Vector2.UnitX * (float)player.direction;
						}
						vec2 *= num44;
						if (vec2.X != this.velocity.X || vec2.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vec2;
					}
					else
					{
						this.Kill();
					}
				}
				Vector2 vector21 = base.Center + this.velocity * 3f;
				Lighting.AddLight(vector21, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num45 = Dust.NewDust(vector21 - base.Size / 2f, this.width, this.height, 302, this.velocity.X, this.velocity.Y, 100, default(Color), 2f);
					Main.dust[num45].noGravity = true;
					Main.dust[num45].position -= this.velocity;
				}
			}
			if (this.type == 927)
			{
				num = 0f;
				this.scale = this.ai[1];
				this.ai[0] += 1f;
				if (this.ai[0] >= 8f)
				{
					this.ai[0] = 0f;
				}
				num2 = 9;
				num3 = Main.rand.NextFloatDirection() * 6.2831855f * 0.05f;
				this.soundDelay--;
				if (this.soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, new Vector2?(base.Center), null);
					this.soundDelay = 6;
				}
				if (Main.myPlayer == this.owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num46 = 1f;
						if (player.inventory[player.selectedItem].shoot == this.type)
						{
							num46 = player.inventory[player.selectedItem].shootSpeed;
						}
						Vector2 vec3 = Main.MouseWorld - vector;
						vec3.Normalize();
						if (vec3.HasNaNs())
						{
							vec3 = Vector2.UnitX * (float)player.direction;
						}
						vec3 *= num46;
						if (vec3.X != this.velocity.X || vec3.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vec3;
					}
					else
					{
						this.Kill();
					}
				}
				DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
				Vector2 start2 = base.Center - this.velocity;
				Vector2 end = base.Center + this.velocity.SafeNormalize(Vector2.Zero) * 80f;
				float width2 = 16f;
				Utils.TileActionAttempt plot2;
				if ((plot2 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot2 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(start2, end, width2, plot2);
			}
			if (this.type == 600)
			{
				float num82 = this.ai[0];
				this.ai[0] += 1f;
				if (Main.myPlayer == this.owner && this.ai[0] == 1f)
				{
					float num47 = player.inventory[player.selectedItem].shootSpeed * this.scale;
					Vector2 vector22 = vector;
					Vector2 value7 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector22;
					if (player.gravDir == -1f)
					{
						value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector22.Y;
					}
					Vector2 vector23 = Vector2.Normalize(value7);
					if (float.IsNaN(vector23.X) || float.IsNaN(vector23.Y))
					{
						vector23 = -Vector2.UnitY;
					}
					vector23 *= num47;
					if (vector23.X != this.velocity.X || vector23.Y != this.velocity.Y)
					{
						this.netUpdate = true;
					}
					this.velocity = vector23;
					int num48 = 601;
					float num49 = 3f;
					vector22 = base.Center;
					Vector2 vector24 = Vector2.Normalize(this.velocity) * num49;
					if (float.IsNaN(vector24.X) || float.IsNaN(vector24.Y))
					{
						vector24 = -Vector2.UnitY;
					}
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector22.X, vector22.Y, vector24.X, vector24.Y, num48, this.damage, this.knockBack, this.owner, this.ai[1], 0f, 0f);
				}
				if (this.ai[0] >= 30f)
				{
					this.Kill();
				}
			}
			if (this.type == 611)
			{
				if (Main.netMode != 2 && this.localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item116, new Vector2?(base.Center), null);
				}
				if (this.localAI[1] > 0f)
				{
					this.localAI[1] -= 1f;
				}
				this.alpha -= 42;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.localAI[0] == 0f)
				{
					this.localAI[0] = this.velocity.ToRotation();
				}
				float num50 = (float)((this.localAI[0].ToRotationVector2().X >= 0f) ? 1 : -1);
				if (this.ai[1] <= 0f)
				{
					num50 *= -1f;
				}
				Vector2 spinningpoint5 = (num50 * (this.ai[0] / 30f * 6.2831855f - 1.5707964f)).ToRotationVector2();
				spinningpoint5.Y *= (float)Math.Sin((double)this.ai[1]);
				if (this.ai[1] <= 0f)
				{
					spinningpoint5.Y *= -1f;
				}
				spinningpoint5 = spinningpoint5.RotatedBy((double)this.localAI[0], default(Vector2));
				this.ai[0] += 1f;
				if (this.ai[0] < 30f)
				{
					this.velocity += 48f * spinningpoint5;
				}
				else
				{
					this.Kill();
				}
			}
			if (this.type == 615)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				this.ai[0] += 1f;
				int num51 = 0;
				if (this.ai[0] >= 40f)
				{
					num51++;
				}
				if (this.ai[0] >= 80f)
				{
					num51++;
				}
				if (this.ai[0] >= 120f)
				{
					num51++;
				}
				int num52 = 5;
				int num53 = 0;
				this.ai[1] -= 1f;
				bool flag11 = false;
				int num54 = -1;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)(num52 - num53 * num51);
					flag11 = true;
					if ((int)this.ai[0] / (num52 - num53 * num51) % 7 == 0)
					{
						num54 = 0;
					}
				}
				this.frameCounter += 1 + num51;
				if (this.frameCounter >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0)
				{
					this.soundDelay = num52 - num53 * num51;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item36, new Vector2?(this.position), null);
					}
				}
				if (flag11 && Main.myPlayer == this.owner)
				{
					bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
					int projToShoot = 14;
					float speed = 14f;
					int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem], false);
					float KnockBack = player.inventory[player.selectedItem].knockBack;
					if (canShoot)
					{
						int usedAmmoItemId;
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref Damage, ref KnockBack, out usedAmmoItemId, false);
						IEntitySource projectileSource_Item_WithPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
						KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
						float num55 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector25 = vector;
						Vector2 value8 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector25;
						if (player.gravDir == -1f)
						{
							value8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector25.Y;
						}
						Vector2 spinningpoint6 = Vector2.Normalize(value8);
						if (float.IsNaN(spinningpoint6.X) || float.IsNaN(spinningpoint6.Y))
						{
							spinningpoint6 = -Vector2.UnitY;
						}
						spinningpoint6 *= num55;
						spinningpoint6 = spinningpoint6.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.06544984877109528, default(Vector2));
						if (spinningpoint6.X != this.velocity.X || spinningpoint6.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = spinningpoint6;
						for (int n = 0; n < 1; n++)
						{
							Vector2 spinningpoint7 = Vector2.Normalize(this.velocity) * speed;
							spinningpoint7 = spinningpoint7.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291, default(Vector2));
							if (float.IsNaN(spinningpoint7.X) || float.IsNaN(spinningpoint7.Y))
							{
								spinningpoint7 = -Vector2.UnitY;
							}
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector25.X, vector25.Y, spinningpoint7.X, spinningpoint7.Y, projToShoot, Damage, KnockBack, this.owner, 0f, 0f, 0f);
						}
						if (num54 == 0)
						{
							projToShoot = 616;
							speed = 8f;
							for (int num56 = 0; num56 < 1; num56++)
							{
								Vector2 spinningpoint8 = Vector2.Normalize(this.velocity) * speed;
								spinningpoint8 = spinningpoint8.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583, default(Vector2));
								if (float.IsNaN(spinningpoint8.X) || float.IsNaN(spinningpoint8.Y))
								{
									spinningpoint8 = -Vector2.UnitY;
								}
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector25.X, vector25.Y, spinningpoint8.X, spinningpoint8.Y, projToShoot, Damage + 20, KnockBack * 1.25f, this.owner, 0f, 0f, 0f);
							}
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 714)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				this.ai[0] += 1f;
				int num57 = 0;
				int num58 = 8;
				int num59 = 0;
				this.ai[1] -= 1f;
				bool flag12 = false;
				int num60 = -1;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)(num58 - num59 * num57);
					flag12 = true;
					int num83 = (int)this.ai[0] / (num58 - num59 * num57);
					if (num83 % 7 == 0)
					{
					}
					num60 = num83 % 7;
				}
				float num84 = this.rotation;
				Vector2 center3 = base.Center;
				int direction = this.direction;
				Vector2 v = this.velocity;
				this.frameCounter += 1 + num57;
				if (this.frameCounter >= 4)
				{
					this.frameCounter = 0;
					this.frame++;
					if (this.frame >= Main.projFrames[this.type])
					{
						this.frame = 0;
					}
				}
				if (this.soundDelay <= 0 && Main.player[this.owner].controlUseItem)
				{
					this.soundDelay = num58 - num59 * num57;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item156, new Vector2?(this.position), null);
					}
				}
				if (flag12 && Main.myPlayer == this.owner)
				{
					bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
					int projToShoot2 = 134;
					float speed2 = 8f;
					int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem], false);
					float KnockBack2 = player.inventory[player.selectedItem].knockBack;
					if (num60 == 3)
					{
						speed2 += 1f;
					}
					if (canShoot2)
					{
						int usedAmmoItemId2;
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot2, ref speed2, ref canShoot2, ref Damage2, ref KnockBack2, out usedAmmoItemId2, false);
						KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
						IEntitySource projectileSource_Item_WithPotentialAmmo2 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId2);
						float num61 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector26 = vector;
						Vector2 value9 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector26;
						if (player.gravDir == -1f)
						{
							value9.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector26.Y;
						}
						Vector2 spinningpoint9 = Vector2.Normalize(value9);
						if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
						{
							spinningpoint9 = -Vector2.UnitY;
						}
						spinningpoint9 *= num61;
						spinningpoint9 = spinningpoint9.RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.06544984877109528) * 0.5, default(Vector2));
						if (spinningpoint9.X != this.velocity.X || spinningpoint9.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = spinningpoint9;
						for (int num62 = 0; num62 < 1; num62++)
						{
							Vector2 spinningpoint10 = Vector2.Normalize(this.velocity) * speed2;
							spinningpoint10 = spinningpoint10.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291, default(Vector2));
							if (float.IsNaN(spinningpoint10.X) || float.IsNaN(spinningpoint10.Y))
							{
								spinningpoint10 = -Vector2.UnitY;
							}
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector26.X, vector26.Y, spinningpoint10.X, spinningpoint10.Y, projToShoot2, Damage2, KnockBack2, this.owner, (float)num60, 0f, 0f);
							if (num60 == 5)
							{
								for (float num63 = -1f; num63 <= 1f; num63 += 2f)
								{
									Vector2 vector27 = spinningpoint10.RotatedBy((double)(6.2831855f * num63 * 1f / 80f), default(Vector2));
									if (float.IsNaN(spinningpoint10.X) || float.IsNaN(spinningpoint10.Y))
									{
										vector27 = -Vector2.UnitY;
									}
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector26.X, vector26.Y, vector27.X, vector27.Y, projToShoot2, Damage2, KnockBack2, this.owner, (float)num60, 0f, 0f);
								}
							}
							if (num60 == 4)
							{
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector26.X, vector26.Y, spinningpoint10.X, spinningpoint10.Y, projToShoot2, Damage2, KnockBack2, this.owner, (float)num60, 1f, 0f);
							}
						}
					}
					else
					{
						this.Kill();
					}
				}
				Vector2 vector28 = base.Center + this.velocity.ToRotation().ToRotationVector2() * 40f;
				Vector2 vector29 = center3 + v.ToRotation().ToRotationVector2() * 40f;
				Color color = Main.hslToRgb(this.ai[0] / 90f % 1f, 1f, 0.5f, byte.MaxValue);
				color.A = 120;
				int num64 = 267;
				Dust dust = Dust.NewDustPerfect(vector28, num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
				dust.color = color;
				dust.scale = 0.6f;
				dust.fadeIn = 0.9f;
				dust.noGravity = true;
				Dust dust2 = Dust.NewDustPerfect(vector28, num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
				dust2.color = color;
				dust2.scale = 0.6f;
				dust2.fadeIn = 0.7f;
				dust2.noGravity = true;
				dust2.velocity = -this.velocity.RotatedBy(2.094395160675049, default(Vector2)) / 10f;
				Dust dust3 = Dust.NewDustPerfect(vector28, num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
				dust3.color = color;
				dust3.scale = 0.6f;
				dust3.fadeIn = 0.7f;
				dust3.noGravity = true;
				dust3.velocity = -this.velocity.RotatedBy(-2.094395160675049, default(Vector2)) / 10f;
				if (vector28 != vector29)
				{
					float num65 = -1f;
					Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(vector28, vector29, 0.8f), num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
					dust4.velocity = (vector28 - vector29).SafeNormalize(Vector2.Zero) * 2f;
					dust4.color = color;
					dust4.scale = 0.6f;
					dust4.fadeIn = 0.9f;
					dust4.velocity *= num65;
					dust4.noGravity = true;
					Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(vector28, vector29, 0.5f), num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
					dust5.velocity = (vector28 - vector29).SafeNormalize(Vector2.Zero) * 2f;
					dust5.color = color;
					dust5.scale = 0.6f;
					dust5.fadeIn = 0.9f;
					dust5.velocity *= num65;
					dust5.noGravity = true;
					Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(vector28, vector29, 0.2f), num64, new Vector2?(Vector2.Zero), 0, default(Color), 1f);
					dust6.velocity = (vector28 - vector29).SafeNormalize(Vector2.Zero) * 2f;
					dust6.color = color;
					dust6.scale = 0.6f;
					dust6.fadeIn = 0.9f;
					dust6.velocity *= num65;
					dust6.noGravity = true;
				}
			}
			if (this.type == 630)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				this.ai[0] += 1f;
				int num66 = 0;
				if (this.ai[0] >= 40f)
				{
					num66++;
				}
				if (this.ai[0] >= 80f)
				{
					num66++;
				}
				if (this.ai[0] >= 120f)
				{
					num66++;
				}
				int num67 = 24;
				int num68 = 2;
				this.ai[1] -= 1f;
				bool flag13 = false;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)(num67 - num68 * num66);
					flag13 = true;
					int num85 = (int)this.ai[0] / (num67 - num68 * num66);
				}
				bool canShoot3 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.soundDelay <= 0 && canShoot3)
				{
					this.soundDelay = num67 - num68 * num66;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, new Vector2?(this.position), null);
					}
					this.localAI[0] = 12f;
				}
				player.phantasmTime = 2;
				if (flag13 && Main.myPlayer == this.owner)
				{
					int projToShoot3 = 14;
					float speed3 = 14f;
					int Damage3 = player.GetWeaponDamage(player.inventory[player.selectedItem], false);
					float KnockBack3 = player.inventory[player.selectedItem].knockBack;
					if (canShoot3)
					{
						int usedAmmoItemId3;
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot3, ref speed3, ref canShoot3, ref Damage3, ref KnockBack3, out usedAmmoItemId3, false);
						IEntitySource projectileSource_Item_WithPotentialAmmo3 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId3);
						KnockBack3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack3);
						float num69 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector30 = vector;
						Vector2 value10 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector30;
						if (player.gravDir == -1f)
						{
							value10.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector30.Y;
						}
						Vector2 vector31 = Vector2.Normalize(value10);
						if (float.IsNaN(vector31.X) || float.IsNaN(vector31.Y))
						{
							vector31 = -Vector2.UnitY;
						}
						vector31 *= num69;
						if (vector31.X != this.velocity.X || vector31.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector31 * 0.55f;
						for (int num70 = 0; num70 < 4; num70++)
						{
							Vector2 vector32 = Vector2.Normalize(this.velocity) * speed3 * (0.6f + Main.rand.NextFloat() * 0.8f);
							if (float.IsNaN(vector32.X) || float.IsNaN(vector32.Y))
							{
								vector32 = -Vector2.UnitY;
							}
							Vector2 vector33 = vector30 + Utils.RandomVector2(Main.rand, -15f, 15f);
							int num71 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo3, vector33.X, vector33.Y, vector32.X, vector32.Y, projToShoot3, Damage3, KnockBack3, this.owner, 0f, 0f, 0f);
							Main.projectile[num71].noDropItem = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			if (this.type == 705)
			{
				num = 0f;
				if (this.spriteDirection == -1)
				{
					num = 3.1415927f;
				}
				this.ai[0] += 1f;
				int itemAnimationMax = player.itemAnimationMax;
				this.ai[1] -= 1f;
				bool flag14 = false;
				if (this.ai[1] <= 0f)
				{
					this.ai[1] = (float)itemAnimationMax;
					flag14 = true;
				}
				bool canShoot4 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.soundDelay <= 0 && canShoot4)
				{
					this.soundDelay = itemAnimationMax;
					if (this.ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, new Vector2?(this.position), null);
					}
					this.localAI[0] = 12f;
				}
				if (flag14 && Main.myPlayer == this.owner)
				{
					int projToShoot4 = 14;
					float speed4 = 12f;
					int Damage4 = player.GetWeaponDamage(player.inventory[player.selectedItem], false);
					float KnockBack4 = player.inventory[player.selectedItem].knockBack;
					int num72 = 2;
					float num73 = 1.5f;
					if (canShoot4)
					{
						int usedAmmoItemId4;
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot4, ref speed4, ref canShoot4, ref Damage4, ref KnockBack4, out usedAmmoItemId4, false);
						IEntitySource projectileSource_Item_WithPotentialAmmo4 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId4);
						KnockBack4 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack4);
						if (projToShoot4 == 1)
						{
							projToShoot4 = 2;
						}
						Player player2 = player;
						int num81 = player2.phantomPhoneixCounter + 1;
						player2.phantomPhoneixCounter = num81;
						if (num81 >= 3)
						{
							player.phantomPhoneixCounter = 0;
							num72 = 1;
							Damage4 *= 2;
							num73 = 0f;
							this.ai[1] *= 1.5f;
							projToShoot4 = 706;
							speed4 = 16f;
						}
						float num74 = player.inventory[player.selectedItem].shootSpeed * this.scale;
						Vector2 vector34 = vector;
						Vector2 value11 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector34;
						if (player.gravDir == -1f)
						{
							value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector34.Y;
						}
						Vector2 vector35 = Vector2.Normalize(value11);
						if (float.IsNaN(vector35.X) || float.IsNaN(vector35.Y))
						{
							vector35 = -Vector2.UnitY;
						}
						vector35 *= num74;
						if (vector35.X != this.velocity.X || vector35.Y != this.velocity.Y)
						{
							this.netUpdate = true;
						}
						this.velocity = vector35 * 0.55f;
						for (int num75 = 0; num75 < num72; num75++)
						{
							Vector2 vector36 = Vector2.Normalize(this.velocity) * speed4;
							vector36 += Main.rand.NextVector2Square(0f - num73, num73);
							if (float.IsNaN(vector36.X) || float.IsNaN(vector36.Y))
							{
								vector36 = -Vector2.UnitY;
							}
							Vector2 vector37 = vector34;
							int num76 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo4, vector37.X, vector37.Y, vector36.X, vector36.Y, projToShoot4, Damage4, KnockBack4, this.owner, 0f, 0f, 0f);
							Main.projectile[num76].noDropItem = true;
						}
					}
					else
					{
						this.Kill();
					}
				}
			}
			this.position = player.RotatedRelativePoint(player.MountedCenter, false, false) - base.Size / 2f;
			this.rotation = this.velocity.ToRotation() + num;
			this.spriteDirection = this.direction;
			this.timeLeft = 2;
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			player.SetDummyItemTime(num2);
			player.itemRotation = MathHelper.WrapAngle((float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction)) + num3);
			if (this.type == 460 || this.type == 611)
			{
				Vector2 vector38 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
				if (player.direction != 1)
				{
					vector38.X = (float)player.bodyFrame.Width - vector38.X;
				}
				if (player.gravDir != 1f)
				{
					vector38.Y = (float)player.bodyFrame.Height - vector38.Y;
				}
				vector38 -= new Vector2((float)(player.bodyFrame.Width - player.width), (float)(player.bodyFrame.Height - 42)) / 2f;
				base.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + vector38, false, false) - this.velocity;
			}
			if (this.type == 615)
			{
				this.position.Y = this.position.Y + player.gravDir * 2f;
			}
			if (this.type == 714)
			{
				this.position.Y = this.position.Y + player.gravDir * 2f;
			}
			if (this.type == 611 && this.alpha == 0)
			{
				for (int num77 = 0; num77 < 2; num77++)
				{
					Dust dust7 = Main.dust[Dust.NewDust(this.position + this.velocity * 2f, this.width, this.height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
					dust7.noGravity = true;
					dust7.velocity *= 2f;
					dust7.velocity += this.localAI[0].ToRotationVector2();
					dust7.fadeIn = 1.5f;
				}
				float num78 = 18f;
				int num79 = 0;
				while ((float)num79 < num78)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector39 = this.position + this.velocity + this.velocity * ((float)num79 / num78);
						Dust dust8 = Main.dust[Dust.NewDust(vector39, this.width, this.height, 6, 0f, 0f, 100, Color.Transparent, 1f)];
						dust8.noGravity = true;
						dust8.fadeIn = 0.5f;
						dust8.velocity += this.localAI[0].ToRotationVector2();
						dust8.noLight = true;
					}
					num79++;
				}
			}
			if (this.type == 927)
			{
				player.itemAnimation = num2 - (int)this.ai[0];
			}
		}

		// Token: 0x06000DAA RID: 3498 RVA: 0x00380CA4 File Offset: 0x0037EEA4
		private void AI_099_1()
		{
			this.timeLeft = 6;
			bool flag = true;
			float num = 250f;
			float num2 = 0.1f;
			float num3 = 15f;
			float num4 = 12f;
			num *= 0.5f;
			num3 *= 0.8f;
			num4 *= 1.5f;
			if (this.owner == Main.myPlayer)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
			}
			if (Main.player[this.owner].yoyoString)
			{
				num += num * 0.25f + 10f;
			}
			this.rotation += 0.5f;
			if (Main.player[this.owner].dead)
			{
				this.Kill();
				return;
			}
			if (!flag)
			{
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].SetDummyItemTime(2);
				if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
				{
					Main.player[this.owner].ChangeDir(1);
					this.direction = 1;
				}
				else
				{
					Main.player[this.owner].ChangeDir(-1);
					this.direction = -1;
				}
			}
			if (this.ai[0] == 0f || this.ai[0] == 1f)
			{
				if (this.ai[0] == 1f)
				{
					num *= 0.75f;
				}
				num4 *= 0.5f;
				bool flag3 = false;
				Vector2 vector = Main.player[this.owner].Center - base.Center;
				if ((double)vector.Length() > (double)num * 0.9)
				{
					flag3 = true;
				}
				if (vector.Length() > num)
				{
					float num5 = vector.Length() - num;
					Vector2 vector2 = default(Vector2);
					vector2.X = vector.Y;
					vector2.Y = vector.X;
					vector.Normalize();
					vector *= num;
					this.position = Main.player[this.owner].Center - vector;
					this.position.X = this.position.X - (float)(this.width / 2);
					this.position.Y = this.position.Y - (float)(this.height / 2);
					float num6 = this.velocity.Length();
					this.velocity.Normalize();
					if (num5 > num6 - 1f)
					{
						num5 = num6 - 1f;
					}
					this.velocity *= num6 - num5;
					num6 = this.velocity.Length();
					Vector2 vector3;
					vector3..ctor(base.Center.X, base.Center.Y);
					Vector2 vector4;
					vector4..ctor(Main.player[this.owner].Center.X, Main.player[this.owner].Center.Y);
					if (vector3.Y < vector4.Y)
					{
						vector2.Y = Math.Abs(vector2.Y);
					}
					else if (vector3.Y > vector4.Y)
					{
						vector2.Y = 0f - Math.Abs(vector2.Y);
					}
					if (vector3.X < vector4.X)
					{
						vector2.X = Math.Abs(vector2.X);
					}
					else if (vector3.X > vector4.X)
					{
						vector2.X = 0f - Math.Abs(vector2.X);
					}
					vector2.Normalize();
					vector2 *= this.velocity.Length();
					new Vector2(vector2.X, vector2.Y);
					if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
					{
						Vector2 vector5 = this.velocity;
						vector5.Y += vector2.Y;
						vector5.Normalize();
						vector5 *= this.velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.1 || (double)Math.Abs(vector2.Y) < 0.1)
						{
							this.velocity = vector5;
						}
						else
						{
							this.velocity = (vector5 + this.velocity * 2f) / 3f;
						}
					}
					else
					{
						Vector2 vector6 = this.velocity;
						vector6.X += vector2.X;
						vector6.Normalize();
						vector6 *= this.velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.2 || (double)Math.Abs(vector2.Y) < 0.2)
						{
							this.velocity = vector6;
						}
						else
						{
							this.velocity = (vector6 + this.velocity * 2f) / 3f;
						}
					}
				}
				if (Main.myPlayer == this.owner)
				{
					if (Main.player[this.owner].channel)
					{
						Vector2 vector7;
						vector7..ctor((float)(Main.mouseX - Main.lastMouseX), (float)(Main.mouseY - Main.lastMouseY));
						if (this.velocity.X != 0f || this.velocity.Y != 0f)
						{
							if (flag)
							{
								vector7 *= -1f;
							}
							if (flag3)
							{
								if (base.Center.X < Main.player[this.owner].Center.X && vector7.X < 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.X > Main.player[this.owner].Center.X && vector7.X > 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.Y < Main.player[this.owner].Center.Y && vector7.Y < 0f)
								{
									vector7.Y = 0f;
								}
								if (base.Center.Y > Main.player[this.owner].Center.Y && vector7.Y > 0f)
								{
									vector7.Y = 0f;
								}
							}
							this.velocity += vector7 * num2;
							this.netUpdate = true;
						}
					}
					else
					{
						this.ai[0] = -1f;
						this.netUpdate = true;
					}
				}
				if (flag || this.type == 562 || this.type == 547 || this.type == 555 || this.type == 564 || this.type == 552 || this.type == 563 || this.type == 549 || this.type == 550 || this.type == 554 || this.type == 553 || this.type == 603 || this.type == 999)
				{
					float num7 = 800f;
					Vector2 vector8 = default(Vector2);
					bool flag4 = false;
					if (this.type == 549)
					{
						num7 = 200f;
					}
					if (this.type == 554)
					{
						num7 = 400f;
					}
					if (this.type == 553)
					{
						num7 = 250f;
					}
					if (this.type == 603)
					{
						num7 = 320f;
					}
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this, false))
						{
							float num8 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num9 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num10 = Math.Abs(this.position.X + (float)(this.width / 2) - num8) + Math.Abs(this.position.Y + (float)(this.height / 2) - num9);
							if (num10 < num7 && (this.type != 563 || num10 >= 200f) && Collision.CanHit(this.position, this.width, this.height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[this.owner].Center).Length() < (double)num * 0.9)
							{
								num7 = num10;
								vector8.X = num8;
								vector8.Y = num9;
								flag4 = true;
							}
						}
					}
					if (flag4)
					{
						vector8 -= base.Center;
						vector8.Normalize();
						if (this.type == 563)
						{
							vector8 *= 4f;
							this.velocity = (this.velocity * 14f + vector8) / 15f;
						}
						else if (this.type == 553)
						{
							vector8 *= 5f;
							this.velocity = (this.velocity * 12f + vector8) / 13f;
						}
						else if (this.type == 603)
						{
							vector8 *= 16f;
							this.velocity = (this.velocity * 9f + vector8) / 10f;
						}
						else if (this.type == 554)
						{
							vector8 *= 8f;
							this.velocity = (this.velocity * 6f + vector8) / 7f;
						}
						else
						{
							vector8 *= 6f;
							this.velocity = (this.velocity * 7f + vector8) / 8f;
						}
					}
				}
				if (this.velocity.Length() > num3)
				{
					this.velocity.Normalize();
					this.velocity *= num3;
				}
				if (this.velocity.Length() < num4)
				{
					this.velocity.Normalize();
					this.velocity *= num4;
				}
				return;
			}
			this.tileCollide = false;
			Vector2 vector9 = Main.player[this.owner].Center - base.Center;
			float num11 = vector9.Length();
			if (num11 < 40f || vector9.HasNaNs() || num11 > 2000f)
			{
				this.Kill();
				return;
			}
			float num12 = num3 * 1.5f;
			if (this.type == 546)
			{
				num12 *= 1.5f;
			}
			if (this.type == 554)
			{
				num12 *= 1.25f;
			}
			if (this.type == 555)
			{
				num12 *= 1.35f;
			}
			if (this.type == 562)
			{
				num12 *= 1.25f;
			}
			float num13 = 12f;
			vector9.Normalize();
			vector9 *= num12;
			this.velocity = (this.velocity * (num13 - 1f) + vector9) / num13;
		}

		// Token: 0x06000DAB RID: 3499 RVA: 0x00381938 File Offset: 0x0037FB38
		private void AI_099_2()
		{
			bool flag = false;
			for (int i = 0; i < this.whoAmI; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.owner && Main.projectile[i].type == this.type)
				{
					flag = true;
				}
			}
			if (this.owner == Main.myPlayer)
			{
				this.localAI[0] += 1f;
				if (flag)
				{
					this.localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
				}
				float num = this.localAI[0] / 60f;
				num /= (1f + Main.player[this.owner].inverseMeleeSpeed) / 2f;
				float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[this.type];
				if (num2 != -1f && num > num2)
				{
					this.ai[0] = -1f;
				}
			}
			if (this.type == 603 && this.owner == Main.myPlayer)
			{
				this.localAI[1] += 1f;
				if (this.localAI[1] >= 6f)
				{
					float num3 = 400f;
					Vector2 vector = this.velocity;
					Vector2 vector2;
					vector2..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					vector2.Normalize();
					vector2 *= (float)Main.rand.Next(10, 41) * 0.1f;
					if (Main.rand.Next(3) == 0)
					{
						vector2 *= 2f;
					}
					vector *= 0.25f;
					vector += vector2;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this, false))
						{
							float num4 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num5 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num6 = Math.Abs(this.position.X + (float)(this.width / 2) - num4) + Math.Abs(this.position.Y + (float)(this.height / 2) - num5);
							if (num6 < num3 && Collision.CanHit(this.position, this.width, this.height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num3 = num6;
								vector.X = num4;
								vector.Y = num5;
								vector -= base.Center;
								vector.Normalize();
								vector *= 8f;
							}
						}
					}
					vector *= 0.8f;
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - vector.X, base.Center.Y - vector.Y, vector.X, vector.Y, 604, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
					this.localAI[1] = 0f;
				}
			}
			bool flag2 = false;
			if (this.type >= 556 && this.type <= 561)
			{
				flag2 = true;
			}
			if (Main.player[this.owner].dead)
			{
				this.Kill();
				return;
			}
			if (!flag2 && !flag)
			{
				Main.player[this.owner].heldProj = this.whoAmI;
				Main.player[this.owner].SetDummyItemTime(2);
				if (this.position.X + (float)(this.width / 2) > Main.player[this.owner].position.X + (float)(Main.player[this.owner].width / 2))
				{
					Main.player[this.owner].ChangeDir(1);
					this.direction = 1;
				}
				else
				{
					Main.player[this.owner].ChangeDir(-1);
					this.direction = -1;
				}
			}
			if (this.velocity.HasNaNs())
			{
				this.Kill();
			}
			this.timeLeft = 6;
			float num7 = ProjectileID.Sets.YoyosMaximumRange[this.type];
			float num8 = ProjectileID.Sets.YoyosTopSpeed[this.type];
			if (this.type == 545)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num9 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num9].noGravity = true;
				}
			}
			else if (this.type == 553 && Main.rand.Next(2) == 0)
			{
				int num10 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num10].noGravity = true;
				Main.dust[num10].scale = 1.6f;
			}
			if (Main.player[this.owner].yoyoString)
			{
				num7 = num7 * 1.25f + 30f;
			}
			num7 /= (1f + Main.player[this.owner].inverseMeleeSpeed * 3f) / 4f;
			num8 /= (1f + Main.player[this.owner].inverseMeleeSpeed * 3f) / 4f;
			float num11 = 14f - num8 / 2f;
			if (num11 < 1f)
			{
				num11 = 1f;
			}
			if (num11 < 1.01f)
			{
				num11 = 1.01f;
			}
			float num12 = 5f + num8 / 2f;
			if (flag)
			{
				num12 += 20f;
			}
			if (this.ai[0] >= 0f)
			{
				if (this.velocity.Length() > num8)
				{
					this.velocity *= 0.98f;
				}
				bool flag3 = false;
				bool flag4 = false;
				Vector2 vector3 = Main.player[this.owner].Center - base.Center;
				if (vector3.Length() > num7)
				{
					flag3 = true;
					if ((double)vector3.Length() > (double)num7 * 1.3)
					{
						flag4 = true;
					}
				}
				if (this.owner == Main.myPlayer)
				{
					if (!Main.player[this.owner].channel || Main.player[this.owner].stoned || Main.player[this.owner].frozen)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
					else
					{
						Vector2 vector8 = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
						float x = vector8.X;
						float y = vector8.Y;
						Vector2 vector4 = new Vector2(x, y) - Main.player[this.owner].Center;
						if (vector4.Length() > num7)
						{
							vector4.Normalize();
							vector4 *= num7;
							vector4 = Main.player[this.owner].Center + vector4;
							x = vector4.X;
							y = vector4.Y;
						}
						if (this.ai[0] != x || this.ai[1] != y)
						{
							Vector2 vector5 = new Vector2(x, y) - Main.player[this.owner].Center;
							if (vector5.Length() > num7 - 1f)
							{
								vector5.Normalize();
								vector5 *= num7 - 1f;
								Vector2 vector9 = Main.player[this.owner].Center + vector5;
								x = vector9.X;
								y = vector9.Y;
							}
							this.ai[0] = x;
							this.ai[1] = y;
							this.netUpdate = true;
						}
					}
				}
				if (flag4 && this.owner == Main.myPlayer)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
				if (this.ai[0] >= 0f)
				{
					if (flag3)
					{
						num11 /= 2f;
						num8 *= 2f;
						if (base.Center.X > Main.player[this.owner].Center.X && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.5f;
						}
						if (base.Center.Y > Main.player[this.owner].Center.Y && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.5f;
						}
						if (base.Center.X < Main.player[this.owner].Center.X && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X * 0.5f;
						}
						if (base.Center.Y < Main.player[this.owner].Center.Y && this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.5f;
						}
					}
					Vector2 vector6 = new Vector2(this.ai[0], this.ai[1]) - base.Center;
					if (flag3)
					{
						num11 = 1f;
					}
					this.velocity.Length();
					float num13 = vector6.Length();
					if (num13 > num12)
					{
						vector6.Normalize();
						float num14 = Math.Min(num13 / 2f, num8);
						if (flag3)
						{
							num14 = Math.Min(num14, num8 / 2f);
						}
						vector6 *= num14;
						this.velocity = (this.velocity * (num11 - 1f) + vector6) / num11;
					}
					else if (flag)
					{
						if ((double)this.velocity.Length() < (double)num8 * 0.6)
						{
							vector6 = this.velocity;
							vector6.Normalize();
							vector6 *= num8 * 0.6f;
							this.velocity = (this.velocity * (num11 - 1f) + vector6) / num11;
						}
					}
					else
					{
						this.velocity *= 0.8f;
					}
					if (flag && !flag3 && (double)this.velocity.Length() < (double)num8 * 0.6)
					{
						this.velocity.Normalize();
						this.velocity *= num8 * 0.6f;
					}
				}
			}
			else
			{
				num11 = (float)((int)((double)num11 * 0.8));
				num8 *= 1.5f;
				this.tileCollide = false;
				Vector2 vector7 = Main.player[this.owner].Center - base.Center;
				float num15 = vector7.Length();
				if (num15 < num8 + 10f || num15 == 0f || num15 > 2000f)
				{
					this.Kill();
				}
				else
				{
					vector7.Normalize();
					vector7 *= num8;
					this.velocity = (this.velocity * (num11 - 1f) + vector7) / num11;
				}
			}
			this.rotation += 0.45f;
		}

		// Token: 0x06000DAC RID: 3500 RVA: 0x00382540 File Offset: 0x00380740
		private void AI_130_FlameBurstTower()
		{
			float num = 900f;
			float angleRatioMax = 1f;
			Vector2 vector = base.Center;
			int num2 = 664;
			int num3 = 12;
			float num4 = 12f;
			int num5 = 1;
			int num6 = 6;
			int num7 = 4;
			int num8 = 80;
			switch (this.type)
			{
			case 663:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
				vector = base.Bottom + new Vector2((float)(this.direction * 6), -40f);
				if ((this.localAI[0] += 1f) >= 300f)
				{
					this.localAI[0] = 0f;
				}
				Rectangle r3;
				r3..ctor((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 3, 6);
				if (this.direction == 1)
				{
					r3.X -= this.width / 4;
				}
				for (int i = 0; i < 1; i++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust5 = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
						dust5.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust5.scale = 0.4f;
						dust5.noGravity = true;
						dust5.noLight = true;
						dust5.velocity = Vector2.Zero;
						dust5.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust5.fadeIn;
					}
				}
				r3..ctor((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
				if (this.direction == -1)
				{
					r3.X -= r3.Width;
				}
				r3.X += this.direction * 4;
				r3.Y -= this.height - 10;
				for (int j = 0; j < 1; j++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust8 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6, 0f, 0f, 0, default(Color), 1f);
						dust8.fadeIn = 1f;
						dust8.scale = 1f;
						dust8.noGravity = true;
						dust8.noLight = true;
						dust8.velocity *= 2f;
					}
				}
				break;
			}
			case 665:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				num8 = 70;
				num4 += 3f;
				num6 = 8;
				num2 = 666;
				vector = base.Bottom + new Vector2((float)(this.direction * 6), -44f);
				if ((this.localAI[0] += 1f) >= 300f)
				{
					this.localAI[0] = 0f;
				}
				Rectangle r4;
				r4..ctor((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 2, 6);
				if (this.direction == 1)
				{
					r4.X -= this.width / 4;
				}
				for (int k = 0; k < 1; k++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(r4.TopLeft() + new Vector2(-2f, -2f), r4.Width + 4, r4.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
						dust6.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust6.scale = 0.4f;
						dust6.noGravity = true;
						dust6.noLight = true;
						dust6.velocity = Vector2.Zero;
						dust6.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust6.fadeIn;
					}
				}
				r4..ctor((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
				if (this.direction == -1)
				{
					r4.X -= r4.Width;
				}
				r4.X += this.direction * 4;
				r4.Y -= this.height - 10;
				for (int l = 0; l < 2; l++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust9 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 6, 0f, 0f, 0, default(Color), 1f);
						dust9.fadeIn = 1f;
						dust9.scale = 1f;
						dust9.noGravity = true;
						dust9.noLight = true;
						dust9.velocity *= 2f;
					}
				}
				break;
			}
			case 667:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				num8 = 60;
				num4 += 6f;
				num6 = 8;
				num2 = 668;
				vector = base.Bottom + new Vector2((float)(this.direction * 6), -46f);
				if ((this.localAI[0] += 1f) >= 300f)
				{
					this.localAI[0] = 0f;
				}
				Rectangle r5;
				r5..ctor((int)this.position.X + this.width / 4, (int)this.position.Y + this.height - 16, this.width / 4 * 2, 6);
				if (this.direction == 1)
				{
					r5.X -= this.width / 4;
				}
				for (int m = 0; m < 1; m++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust7 = Dust.NewDustDirect(r5.TopLeft() + new Vector2(-2f, -2f), r5.Width + 4, r5.Height + 4, 270, (float)(-(float)this.direction * 2), -2f, 200, new Color(255, 255, 255, 0), 1f);
						dust7.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust7.scale = 0.4f;
						dust7.noGravity = true;
						dust7.noLight = true;
						dust7.velocity = Vector2.Zero;
						dust7.velocity.X = (float)(-(float)this.direction) * Main.rand.NextFloat() * dust7.fadeIn;
					}
				}
				r5..ctor((int)base.Center.X, (int)base.Bottom.Y, this.width / 4, 10);
				if (this.direction == -1)
				{
					r5.X -= r5.Width;
				}
				r5.X += this.direction * 4;
				r5.Y -= this.height - 10;
				for (int n = 0; n < 3; n++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust10 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 6, 0f, 0f, 0, default(Color), 1f);
						dust10.fadeIn = 1.1f;
						dust10.scale = 1f;
						dust10.noGravity = true;
						dust10.noLight = true;
						dust10.velocity *= 2.4f;
					}
				}
				break;
			}
			}
			if (Main.player[this.owner].setApprenticeT2)
			{
				angleRatioMax = 0.1f;
				num *= 1.5f;
				num4 *= 1.4f;
			}
			if (this.ai[0] == 0f)
			{
				this.direction = (this.spriteDirection = Main.player[this.owner].direction);
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 1f)
			{
				this.frame = 0;
				bool flag = false;
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				if (flag && this.owner == Main.myPlayer)
				{
					int num9 = this.AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, true);
					if (num9 != -1)
					{
						this.direction = Math.Sign(base.DirectionTo(Main.npc[num9].Center).X);
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				this.frame = num5 + (int)(this.ai[1] / (float)num7);
				if (this.ai[1] == (float)num3)
				{
					Vector2 vector2;
					vector2..ctor((float)this.direction, 0f);
					int num10 = this.AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, false);
					if (num10 != -1)
					{
						vector2 = (Main.npc[num10].Center - vector).SafeNormalize(Vector2.UnitX * (float)this.direction);
					}
					Vector2 vector3 = vector2 * num4;
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector, vector3, num2, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
					}
				}
				if ((this.ai[1] += 1f) >= (float)(num6 * num7))
				{
					this.ai[0] = 1f;
					this.ai[1] = (float)num8;
				}
			}
			this.spriteDirection = this.direction;
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x06000DAD RID: 3501 RVA: 0x0038313C File Offset: 0x0038133C
		private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
			{
				for (int i = 0; i < 1; i++)
				{
					if (ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
					{
						float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
						if (num2 <= shot_range)
						{
							Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
							if (Math.Abs(vector.X) >= Math.Abs(vector.Y) * angleRatioMax && (canChangeDirection || (float)this.direction * vector.X >= 0f) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
							{
								num = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.CanBeChasedBy(this, false))
				{
					float num3 = Vector2.Distance(shootingSpot, nPC.Center);
					if (num3 <= shot_range)
					{
						Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if (Math.Abs(vector2.X) >= Math.Abs(vector2.Y) * angleRatioMax && (canChangeDirection || (float)this.direction * vector2.X >= 0f) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
						{
							num = j;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06000DAE RID: 3502 RVA: 0x003832E4 File Offset: 0x003814E4
		private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = this.OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
			{
				for (int i = 0; i < 1; i++)
				{
					if (ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
					{
						float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
						if (num2 <= shot_range)
						{
							Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
							if ((Math.Abs(vector.X) >= Math.Abs(vector.Y) * deadBottomAngle || vector.Y <= 0f) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
							{
								num = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.CanBeChasedBy(this, false))
				{
					float num3 = Vector2.Distance(shootingSpot, nPC.Center);
					if (num3 <= shot_range)
					{
						Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if ((Math.Abs(vector2.X) >= Math.Abs(vector2.Y) * deadBottomAngle || vector2.Y <= 0f) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
						{
							num = j;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06000DAF RID: 3503 RVA: 0x00383474 File Offset: 0x00381674
		private void AI_131_FlameBurstShot()
		{
			if (this.type != 664 && this.type != 666 && this.type != 668)
			{
				return;
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(SoundID.DD2_FlameburstTowerShot, new Vector2?(base.Center));
			}
			if (this.alpha > 0)
			{
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
			}
			int num = 1;
			if (this.type == 666)
			{
				num = 2;
			}
			if (this.type == 668)
			{
				num = 3;
			}
			for (int i = 0; i < num; i++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
					dust.noGravity = true;
					dust.velocity *= 0.3f;
					if (Main.rand.Next(1) == 0)
					{
						Dust dust2 = dust;
						dust2.velocity.Y = dust2.velocity.Y + (float)Math.Sign(dust.velocity.Y) * 1.2f;
						dust.fadeIn += 0.5f;
					}
				}
			}
			this.rotation = this.velocity.ToRotation() + 1.5707964f;
		}

		// Token: 0x06000DB0 RID: 3504 RVA: 0x0038360C File Offset: 0x0038180C
		private void AI_134_Ballista()
		{
			float shot_range = 900f;
			float deadBottomAngle = 0.75f;
			Vector2 center = base.Center;
			int num = 680;
			float num2 = 16f;
			int num3 = 1;
			int num4 = 5;
			int num5 = 5;
			if (Main.player[this.owner].setSquireT2)
			{
				num2 = 21f;
			}
			int ballistraShotDelay = Projectile.GetBallistraShotDelay(Main.player[this.owner]);
			int num6 = num5;
			if (this.type == 677)
			{
				center.Y -= 4f;
			}
			if (this.ai[0] == 0f)
			{
				this.direction = (this.spriteDirection = Main.player[this.owner].direction);
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.netUpdate = true;
				if (this.direction == -1)
				{
					this.rotation = 3.1415927f;
				}
			}
			if (this.ai[0] == 1f)
			{
				this.frame = 0;
				bool flag = false;
				if (Main.player[this.owner].ballistaPanic && this.ai[1] > 60f)
				{
					this.ai[1] = 60f;
				}
				if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3 && this.ai[1] > 30f)
				{
					this.ai[1] = 30f;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				int num7 = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num7 != -1)
				{
					Vector2 vector = (Main.npc[num7].Center - center).SafeNormalize(Vector2.UnitY);
					this.rotation = this.rotation.AngleLerp(vector.ToRotation(), 0.08f);
					if (this.rotation > 1.5707964f || this.rotation < -1.5707964f)
					{
						this.direction = -1;
					}
					else
					{
						this.direction = 1;
					}
					if (flag && this.owner == Main.myPlayer)
					{
						this.direction = Math.Sign(vector.X);
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.netUpdate = true;
					}
				}
				else
				{
					float targetAngle = 0f;
					if (this.direction == -1)
					{
						targetAngle = 3.1415927f;
					}
					this.rotation = this.rotation.AngleLerp(targetAngle, 0.05f);
				}
			}
			else if (this.ai[0] == 2f)
			{
				this.frame = num3 + (int)(this.ai[1] / (float)num5);
				if (this.ai[1] == (float)num6)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BallistaTowerShot, new Vector2?(base.Center));
					Vector2 vector2;
					vector2..ctor((float)this.direction, 0f);
					int num8 = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
					if (num8 != -1)
					{
						vector2 = (Main.npc[num8].Center - center).SafeNormalize(Vector2.UnitX * (float)this.direction);
					}
					this.rotation = vector2.ToRotation();
					if (this.rotation > 1.5707964f || this.rotation < -1.5707964f)
					{
						this.direction = -1;
					}
					else
					{
						this.direction = 1;
					}
					Vector2 vector3 = vector2 * num2;
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, vector3, num, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
					}
				}
				if ((this.ai[1] += 1f) >= (float)(num4 * num5))
				{
					this.ai[0] = 1f;
					this.ai[1] = (float)ballistraShotDelay;
				}
			}
			this.spriteDirection = this.direction;
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x06000DB1 RID: 3505 RVA: 0x00383A2C File Offset: 0x00381C2C
		public static int GetBallistraShotDelay(Player player)
		{
			int result = 160;
			if (player.setSquireT3)
			{
				result = 100;
			}
			if (player.ballistaPanic)
			{
				result = 60;
			}
			if (player.ballistaPanic && player.setSquireT3)
			{
				result = 30;
			}
			return result;
		}

		// Token: 0x06000DB2 RID: 3506 RVA: 0x00383A6C File Offset: 0x00381C6C
		private unsafe void AI_135_OgreStomp()
		{
			float num = 40f;
			if (this.type == 922)
			{
				num = 30f;
			}
			this.ai[0] += 1f;
			if (this.ai[0] > 9f)
			{
				this.Kill();
				return;
			}
			this.velocity = Vector2.Zero;
			this.position = base.Center;
			base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num, Utils.GetLerpValue(0f, 9f, this.ai[0], false));
			base.Center = this.position;
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int num2 = point.X / 2 + point2.X / 2;
			int num3 = this.width / 2;
			if ((int)this.ai[0] % 3 != 0)
			{
				return;
			}
			int num4 = (int)this.ai[0] / 3;
			for (int i = point.X; i <= point2.X; i++)
			{
				for (int j = point.Y; j <= point2.Y; j++)
				{
					if (Vector2.Distance(base.Center, new Vector2((float)(i * 16), (float)(j * 16))) <= (float)num3)
					{
						Tile tileSafely = Framing.GetTileSafely(i, j);
						if (tileSafely.active() && Main.tileSolid[(int)(*tileSafely.type)] && !Main.tileSolidTop[(int)(*tileSafely.type)] && !Main.tileFrameImportant[(int)(*tileSafely.type)])
						{
							Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
							if (!tileSafely2.active() || !Main.tileSolid[(int)(*tileSafely2.type)] || Main.tileSolidTop[(int)(*tileSafely2.type)])
							{
								int num5 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, i, j);
								for (int k = 0; k < num5; k++)
								{
									Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
									dust.velocity.Y = dust.velocity.Y - (3f + (float)num4 * 1.5f);
									dust.velocity.Y = dust.velocity.Y * Main.rand.NextFloat();
									dust.velocity.Y = dust.velocity.Y * 0.75f;
									dust.scale += (float)num4 * 0.03f;
								}
								if (num4 >= 2)
								{
									if (this.type == 922)
									{
										Color newColor = NPC.AI_121_QueenSlime_GetDustColor();
										newColor.A = 150;
										for (int l = 0; l < num5 - 1; l++)
										{
											int num6 = Dust.NewDust(this.position, 12, 12, 4, 0f, 0f, 50, newColor, 1.5f);
											Dust dust2 = Main.dust[num6];
											dust2.velocity.Y = dust2.velocity.Y - (0.1f + (float)num4 * 0.5f);
											Dust dust3 = Main.dust[num6];
											dust3.velocity.Y = dust3.velocity.Y * Main.rand.NextFloat();
											Dust dust4 = Main.dust[num6];
											dust4.velocity.X = dust4.velocity.X * (Main.rand.NextFloatDirection() * 3f);
											Main.dust[num6].position = new Vector2((float)(i * 16 + Main.rand.Next(16)), (float)(j * 16 + Main.rand.Next(16)));
											if (Main.rand.Next(3) != 0)
											{
												Main.dust[num6].velocity *= 0.5f;
												Main.dust[num6].noGravity = true;
											}
										}
									}
									else
									{
										for (int m = 0; m < num5 - 1; m++)
										{
											Dust dust5 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
											dust5.velocity.Y = dust5.velocity.Y - (1f + (float)num4);
											dust5.velocity.Y = dust5.velocity.Y * Main.rand.NextFloat();
											dust5.velocity.Y = dust5.velocity.Y * 0.75f;
										}
									}
								}
								if (num5 > 0 && Main.rand.Next(3) != 0)
								{
									float num7 = (float)Math.Abs(num2 - i) / (num / 2f);
									if (this.type == 922)
									{
										Color newColor2 = NPC.AI_121_QueenSlime_GetDustColor();
										newColor2.A = 150;
										for (int n = 0; n < 3; n++)
										{
											int num8 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 50, newColor2, 2f - (float)num4 * 0.15f + num7 * 0.5f);
											Dust dust6 = Main.dust[num8];
											dust6.velocity.Y = dust6.velocity.Y - (0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f);
											Dust dust7 = Main.dust[num8];
											dust7.velocity.Y = dust7.velocity.Y * Main.rand.NextFloat();
											Dust dust8 = Main.dust[num8];
											dust8.velocity.X = dust8.velocity.X * (Main.rand.NextFloatDirection() * 3f);
											Main.dust[num8].position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
											if (Main.rand.Next(3) != 0)
											{
												Main.dust[num8].velocity *= 0.5f;
												Main.dust[num8].noGravity = true;
											}
										}
									}
									else
									{
										Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num4 * 0.15f + num7 * 0.5f);
										gore.velocity.Y = gore.velocity.Y - (0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f);
										gore.velocity.Y = gore.velocity.Y * Main.rand.NextFloat();
										gore.position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000DB3 RID: 3507 RVA: 0x003840AC File Offset: 0x003822AC
		private void AI_136_BetsyBreath()
		{
			if (this.ai[1] < 0f || this.ai[1] > 200f)
			{
				this.Kill();
				return;
			}
			NPC nPC = Main.npc[(int)this.ai[1]];
			float num = -8f;
			Vector2 center = nPC.Center + new Vector2((110f + num) * (float)nPC.spriteDirection, 30f).RotatedBy((double)nPC.rotation, default(Vector2));
			base.Center = center;
			this.rotation = nPC.DirectionTo(base.Center).ToRotation();
			DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
			float num2 = this.ai[0] / 40f;
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			float num3 = (this.ai[0] - 38f) / 40f;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			Vector2 start = base.Center + this.rotation.ToRotationVector2() * 400f * num3;
			Vector2 end = base.Center + this.rotation.ToRotationVector2() * 400f * num2;
			float width = 16f;
			Utils.TileActionAttempt plot;
			if ((plot = Projectile.<>O.<3>__CastLight) == null)
			{
				plot = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
			}
			Utils.PlotTileLine(start, end, width, plot);
			Vector2 start2 = base.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583, default(Vector2)) * 400f * num3;
			Vector2 end2 = base.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583, default(Vector2)) * 400f * num2;
			float width2 = 16f;
			Utils.TileActionAttempt plot2;
			if ((plot2 = Projectile.<>O.<3>__CastLight) == null)
			{
				plot2 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
			}
			Utils.PlotTileLine(start2, end2, width2, plot2);
			Vector2 start3 = base.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583, default(Vector2)) * 400f * num3;
			Vector2 end3 = base.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583, default(Vector2)) * 400f * num2;
			float width3 = 16f;
			Utils.TileActionAttempt plot3;
			if ((plot3 = Projectile.<>O.<3>__CastLight) == null)
			{
				plot3 = (Projectile.<>O.<3>__CastLight = new Utils.TileActionAttempt(DelegateMethods.CastLight));
			}
			Utils.PlotTileLine(start3, end3, width3, plot3);
			if (num3 == 0f && num2 > 0.1f)
			{
				for (int i = 0; i < 3; i++)
				{
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					dust.fadeIn = 1.5f;
					dust.velocity = this.rotation.ToRotationVector2().RotatedBy((double)(Main.rand.NextFloatDirection() * 0.2617994f), default(Vector2)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
					dust.velocity += nPC.velocity * 2f;
					dust.noLight = true;
					dust.noGravity = true;
					dust.alpha = 200;
				}
			}
			if (Main.rand.Next(5) == 0 && this.ai[0] >= 15f)
			{
				Gore gore = Gore.NewGoreDirect(base.Center + this.rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
				gore.velocity *= 0.3f;
				gore.velocity += this.rotation.ToRotationVector2() * 4f;
			}
			for (int j = 0; j < 1; j++)
			{
				Dust dust2 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1f);
				dust2.fadeIn = 1.5f;
				dust2.scale = 0.4f;
				dust2.velocity = this.rotation.ToRotationVector2().RotatedBy((double)(Main.rand.NextFloatDirection() * 0.2617994f), default(Vector2)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				dust2.velocity += nPC.velocity * 2f;
				dust2.velocity *= 0.3f;
				dust2.noLight = true;
				dust2.noGravity = true;
				float num4 = Main.rand.NextFloat();
				dust2.position = Vector2.Lerp(base.Center + this.rotation.ToRotationVector2() * 400f * num3, base.Center + this.rotation.ToRotationVector2() * 400f * num2, num4);
				dust2.position += this.rotation.ToRotationVector2().RotatedBy(1.5707963705062866, default(Vector2)) * (20f + 100f * (num4 - 0.5f));
			}
			this.frameCounter++;
			this.ai[0] += 1f;
			if (this.ai[0] >= 78f)
			{
				this.Kill();
			}
		}

		// Token: 0x06000DB4 RID: 3508 RVA: 0x003846F4 File Offset: 0x003828F4
		private void AI_137_LightningAura()
		{
			int num = 10;
			int num2 = 999;
			int num3 = 30;
			int num4 = 40;
			int num5 = 4;
			this.knockBack = 0f;
			if (Main.player[this.owner].setMonkT2)
			{
				num3 -= 5;
			}
			if (Main.player[this.owner].setMonkT3)
			{
				num = 14;
				num5 = 8;
			}
			this.ai[0] += 1f;
			if (this.ai[0] >= (float)num3)
			{
				this.ai[0] = 0f;
			}
			if (this.ai[0] == 0f)
			{
				bool flag = false;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this, false) && nPC.Hitbox.Distance(base.Center) < (float)(this.width / 2) && this.Colliding(base.Hitbox, nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_LightningAuraZap, new Vector2?(base.Center));
				}
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				this.velocity = Vector2.Zero;
				Point origin = base.Center.ToTileCoordinates();
				bool flag2 = true;
				Point result;
				if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(500), new GenCondition[]
				{
					Projectile._cachedConditions_notNull,
					Projectile._cachedConditions_solid
				}), out result))
				{
					this.position.Y = this.position.Y + 16f;
					return;
				}
				Point result2;
				if (!WorldUtils.Find(new Point(result.X, result.Y - 1), Searches.Chain(new Searches.Up(num), new GenCondition[]
				{
					Projectile._cachedConditions_notNull,
					Projectile._cachedConditions_solid
				}), out result2))
				{
					result2..ctor(origin.X, origin.Y - num - 1);
				}
				int num6 = 0;
				if (flag2 && Main.tile[result.X, result.Y] != null && Main.tile[result.X, result.Y].blockType() == 1)
				{
					num6 += 8;
				}
				Vector2 center = result.ToWorldCoordinates(8f, (float)num6);
				Vector2 vector = result2.ToWorldCoordinates(8f, 0f);
				base.Size = new Vector2(1f, center.Y - vector.Y);
				if (this.height > num * 16)
				{
					this.height = num * 16;
				}
				if (this.height < num5 * 16)
				{
					this.height = num5 * 16;
				}
				this.height *= 2;
				this.width = (int)((float)this.height * 1f);
				if (this.width > num2)
				{
					this.width = num2;
				}
				base.Center = center;
			}
			int num7 = this.frameCounter + 1;
			this.frameCounter = num7;
			if (num7 >= 8)
			{
				this.frameCounter = 0;
				num7 = this.frame + 1;
				this.frame = num7;
				if (num7 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
			Vector2 start = base.Center + Vector2.UnitX * -40f;
			Vector2 end = base.Center + Vector2.UnitX * 40f;
			float width = 80f;
			Utils.TileActionAttempt plot;
			if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
			{
				plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
			}
			Utils.PlotTileLine(start, end, width, plot);
			Vector2 vector2;
			vector2..ctor(base.Top.X, this.position.Y + (float)num4);
			for (int j = 0; j < 4; j++)
			{
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector3 = Main.rand.NextVector2Unit(0f, 6.2831855f);
					if (Math.Abs(vector3.X) >= 0.12f)
					{
						Vector2 targetPosition = base.Center + vector3 * new Vector2((float)((this.height - num4) / 2));
						if (!WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16, false) && this.AI_137_CanHit(targetPosition))
						{
							Dust dust = Dust.NewDustDirect(targetPosition, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
							dust.position = targetPosition;
							dust.velocity = (vector2 - dust.position).SafeNormalize(Vector2.Zero);
							dust.scale = 0.7f;
							dust.fadeIn = 1f;
							dust.noGravity = true;
							dust.noLight = true;
						}
					}
				}
			}
			for (int k = 0; k < 0; k++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector4 = Main.rand.NextVector2Unit(0f, 6.2831855f);
					if (Math.Abs(vector4.X) >= 0.12f)
					{
						Vector2 targetPosition2 = base.Center + vector4 * new Vector2((float)((this.height - num4) / 2)) * Main.rand.NextFloat();
						if (!WorldGen.SolidTile((int)targetPosition2.X / 16, (int)targetPosition2.Y / 16, false) && this.AI_137_CanHit(targetPosition2))
						{
							Dust dust2 = Dust.NewDustDirect(targetPosition2, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
							dust2.velocity *= 0.6f;
							dust2.velocity += Vector2.UnitY * -2f;
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
			}
			for (int l = 0; l < 4; l++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(vector2 - new Vector2(8f, 0f), 16, this.height / 2 - 40, 226, 0f, 0f, 100, default(Color), 1f);
					dust3.velocity *= 0.6f;
					dust3.velocity += Vector2.UnitY * -2f;
					dust3.scale = 0.7f;
					dust3.noGravity = true;
					dust3.noLight = true;
				}
			}
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x06000DB5 RID: 3509 RVA: 0x00384DC8 File Offset: 0x00382FC8
		private void AI_138_ExplosiveTrap()
		{
			this.spriteDirection = (this.direction = 1);
			int num = 694;
			int num2 = 48;
			int explosiveTrapCooldown = Projectile.GetExplosiveTrapCooldown(Main.player[this.owner]);
			int num3 = this.type;
			if (num3 != 692)
			{
				if (num3 == 693)
				{
					num = 696;
				}
			}
			else
			{
				num = 695;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
			num3 = this.frameCounter + 1;
			this.frameCounter = num3;
			if (num3 >= 12)
			{
				this.frameCounter = 0;
				num3 = this.frame + 1;
				this.frame = num3;
				if (num3 >= Main.projFrames[this.type])
				{
					this.frame = 0;
				}
			}
			if (this.localAI[0] > 0f)
			{
				this.localAI[0] -= 1f;
			}
			if (this.localAI[0] <= 0f && this.owner == Main.myPlayer)
			{
				this.localAI[0] = 3f;
				bool flag = false;
				Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, (float)(-(float)num2)), new Vector2((float)(num2 * 3)));
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this, false) && rectangle.Intersects(nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_ExplosiveTrapExplode, null);
					this.localAI[0] = (float)explosiveTrapCooldown;
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center + new Vector2(0f, (float)(-(float)num2)), Vector2.Zero, num, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
				}
			}
			this.tileCollide = true;
			this.velocity.Y = this.velocity.Y + 0.2f;
		}

		// Token: 0x06000DB6 RID: 3510 RVA: 0x00384FC8 File Offset: 0x003831C8
		public static int GetExplosiveTrapCooldown(Player player)
		{
			int result = 90;
			if (player.setHuntressT2)
			{
				result = 60;
			}
			if (player.setHuntressT3)
			{
				result = 30;
			}
			return result;
		}

		// Token: 0x06000DB7 RID: 3511 RVA: 0x00384FF0 File Offset: 0x003831F0
		private void AI_139_ExplosiveTrapExplosion()
		{
			int num = Main.projFrames[this.type];
			int num2 = 3;
			this.alpha -= 25;
			if (this.alpha < 0)
			{
				this.alpha = 0;
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
			}
			int num3 = this.frameCounter + 1;
			this.frameCounter = num3;
			if (num3 >= num2)
			{
				this.frameCounter = 0;
				num3 = this.frame + 1;
				this.frame = num3;
				if (num3 >= num)
				{
					this.Kill();
					return;
				}
			}
			DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
			Vector2 top = base.Top;
			Vector2 bottom = base.Bottom;
			float width = 2f;
			Utils.TileActionAttempt plot;
			if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
			{
				plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
			}
			Utils.PlotTileLine(top, bottom, width, plot);
		}

		// Token: 0x06000DB8 RID: 3512 RVA: 0x003850C8 File Offset: 0x003832C8
		private void AI_140_MonkStaffT1()
		{
			float num = 50f;
			float num2 = 2f;
			float num3 = 20f;
			Player player = Main.player[this.owner];
			float num4 = -0.7853982f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, false, true);
			Vector2 vector2 = Vector2.Zero;
			if (player.dead)
			{
				this.Kill();
				return;
			}
			if (this.type == 697)
			{
				int num5 = this.damage * 3;
				int num6 = Math.Sign(this.velocity.X);
				this.velocity = new Vector2((float)num6, 0f);
				if (this.ai[0] == 0f)
				{
					this.rotation = new Vector2((float)num6, 0f - player.gravDir).ToRotation() + num4 + 3.1415927f;
					if (this.velocity.X < 0f)
					{
						this.rotation -= 1.5707964f;
					}
				}
				this.alpha -= 128;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float num16 = this.ai[0] / num;
				float num7 = 1f;
				this.ai[0] += num7;
				this.rotation += 6.2831855f * num2 / num * (float)num6;
				bool flag = this.ai[0] == (float)((int)(num / 2f));
				if (this.ai[0] >= num || (flag && !player.controlUseItem))
				{
					this.Kill();
					player.reuseDelay = 10;
				}
				else if (flag)
				{
					Vector2 mouseWorld = Main.MouseWorld;
					int num8 = (player.DirectionTo(mouseWorld).X > 0f) ? 1 : -1;
					if ((float)num8 != this.velocity.X)
					{
						player.ChangeDir(num8);
						this.velocity = new Vector2((float)num8, 0f);
						this.netUpdate = true;
						this.rotation -= 3.1415927f;
					}
				}
				float num9 = this.rotation - 0.7853982f * (float)num6;
				vector2 = (num9 + ((num6 == -1) ? 3.1415927f : 0f)).ToRotationVector2() * (this.ai[0] / num) * num3;
				Vector2 vector3 = base.Center + (num9 + ((num6 == -1) ? 3.1415927f : 0f)).ToRotationVector2() * 30f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, default(Color), 1f);
					dust.velocity = base.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
				}
				if (num16 >= 0.75f)
				{
					Dust dust2 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, default(Color), 1f);
					dust2.velocity = base.DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
					dust2.noGravity = true;
					dust2.color = new Color(20, 255, 100, 160);
				}
				if (this.ai[0] >= num - 8f && this.ai[0] < num - 2f)
				{
					for (int i = 0; i < 5; i++)
					{
						Dust dust5 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, default(Color), 1f);
						dust5.velocity *= 1.2f;
						dust5.noGravity = true;
						dust5.scale += 0.1f;
						dust5.color = new Color(20, 255, 100, 160);
					}
				}
				if (this.ai[0] == num - 3f && this.owner == Main.myPlayer)
				{
					Point point;
					if (this.localAI[1] == 1f || WorldUtils.Find(vector3.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), new GenCondition[]
					{
						Projectile._cachedConditions_notNull,
						Projectile._cachedConditions_solid
					}), out point))
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector3 + new Vector2((float)(num6 * 20), -60f), Vector2.Zero, 698, num5, 0f, this.owner, 0f, 0f, 0f);
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundImpact, new Vector2?(base.Center));
					}
					else
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundMiss, new Vector2?(base.Center));
					}
				}
			}
			if (this.type == 707)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				int num10 = Math.Sign(this.velocity.X);
				this.velocity = new Vector2((float)num10, 0f);
				if (this.ai[0] == 0f)
				{
					this.rotation = new Vector2((float)num10, 0f - player.gravDir).ToRotation() + num4 + 3.1415927f;
					if (this.velocity.X < 0f)
					{
						this.rotation -= 1.5707964f;
					}
				}
				this.alpha -= 128;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				float num17 = this.ai[0] / num;
				float num11 = 1f;
				this.ai[0] += num11;
				this.rotation += 6.2831855f * num2 / num * (float)num10;
				bool flag2 = this.ai[0] == (float)((int)(num / 2f));
				if (this.ai[0] >= num || (flag2 && !player.controlUseItem))
				{
					this.Kill();
					player.reuseDelay = 2;
				}
				else if (flag2)
				{
					Vector2 mouseWorld2 = Main.MouseWorld;
					int num12 = (player.DirectionTo(mouseWorld2).X > 0f) ? 1 : -1;
					if ((float)num12 != this.velocity.X)
					{
						player.ChangeDir(num12);
						this.velocity = new Vector2((float)num12, 0f);
						this.netUpdate = true;
						this.rotation -= 3.1415927f;
					}
				}
				if ((this.ai[0] == num11 || (this.ai[0] == (float)((int)(num / 2f)) && this.active)) && this.owner == Main.myPlayer)
				{
					Vector2 mouseWorld3 = Main.MouseWorld;
					player.DirectionTo(mouseWorld3) * 0f;
				}
				float num13 = this.rotation - 0.7853982f * (float)num10;
				vector2 = (num13 + ((num10 == -1) ? 3.1415927f : 0f)).ToRotationVector2() * (this.ai[0] / num) * num3;
				Vector2 vector4 = base.Center + (num13 + ((num10 == -1) ? 3.1415927f : 0f)).ToRotationVector2() * 30f;
				Vector2 vector5 = num13.ToRotationVector2();
				Vector2 vector6 = vector5.RotatedBy((double)(1.5707964f * (float)this.spriteDirection), default(Vector2));
				if (Main.rand.Next(2) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(vector4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, default(Color), 1f);
					dust3.velocity = base.DirectionTo(dust3.position) * 0.1f + dust3.velocity * 0.1f;
				}
				for (int j = 0; j < 4; j++)
				{
					float num14 = 1f;
					float num15 = 1f;
					switch (j)
					{
					case 1:
						num15 = -1f;
						break;
					case 2:
						num15 = 1.25f;
						num14 = 0.5f;
						break;
					case 3:
						num15 = -1.25f;
						num14 = 0.5f;
						break;
					}
					if (Main.rand.Next(6) != 0)
					{
						Dust dust4 = Dust.NewDustDirect(this.position, 0, 0, 226, 0f, 0f, 100, default(Color), 1f);
						dust4.position = base.Center + vector5 * (60f + Main.rand.NextFloat() * 20f) * num15;
						dust4.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num15 * num14;
						dust4.noGravity = true;
						dust4.noLight = true;
						dust4.scale = 0.5f;
						dust4.customData = this;
						if (Main.rand.Next(4) == 0)
						{
							dust4.noGravity = false;
						}
					}
				}
			}
			this.position = vector - base.Size / 2f;
			this.position += vector2;
			this.spriteDirection = this.direction;
			this.timeLeft = 2;
			player.ChangeDir(this.direction);
			player.heldProj = this.whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = MathHelper.WrapAngle(this.rotation);
		}

		// Token: 0x06000DB9 RID: 3513 RVA: 0x00385AD8 File Offset: 0x00383CD8
		private void AI_141_MonkStaffT1Explosion()
		{
			Point scanAreaStart = base.TopLeft.ToTileCoordinates();
			Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
			int num = scanAreaStart.X / 2;
			int num2 = scanAreaEnd.X / 2;
			int explosionRange = this.width;
			this.ai[0] += 1f;
			if (this.ai[0] > 20f)
			{
				this.Kill();
				return;
			}
			if (this.ai[0] == 1f)
			{
				bool causedShockwaves;
				this.CreateImpactExplosion(6, base.Bottom, ref scanAreaStart, ref scanAreaEnd, explosionRange, out causedShockwaves);
				this.CreateImpactExplosion2_SleepyOctopod(base.Bottom, causedShockwaves);
			}
		}

		// Token: 0x06000DBA RID: 3514 RVA: 0x00385B74 File Offset: 0x00383D74
		public unsafe void CreateImpactExplosion(int dustAmountMultiplier, Vector2 explosionOrigin, ref Point scanAreaStart, ref Point scanAreaEnd, int explosionRange, out bool causedShockwaves)
		{
			causedShockwaves = false;
			int num = 4;
			for (int i = scanAreaStart.X; i <= scanAreaEnd.X; i++)
			{
				for (int j = scanAreaStart.Y; j <= scanAreaEnd.Y; j++)
				{
					if (Vector2.Distance(explosionOrigin, new Vector2((float)(i * 16), (float)(j * 16))) <= (float)explosionRange)
					{
						Tile tileSafely = Framing.GetTileSafely(i, j);
						if (tileSafely.active() && Main.tileSolid[(int)(*tileSafely.type)] && !Main.tileSolidTop[(int)(*tileSafely.type)] && !Main.tileFrameImportant[(int)(*tileSafely.type)])
						{
							Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
							if (!tileSafely2.active() || !Main.tileSolid[(int)(*tileSafely2.type)] || Main.tileSolidTop[(int)(*tileSafely2.type)])
							{
								int num2 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, i, j) * dustAmountMultiplier;
								for (int k = 0; k < num2; k++)
								{
									Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
									dust.velocity.Y = dust.velocity.Y - (3f + (float)num * 1.5f);
									dust.velocity.Y = dust.velocity.Y * Main.rand.NextFloat();
									dust.scale += (float)num * 0.03f;
								}
								if (num >= 2)
								{
									for (int l = 0; l < num2 - 1; l++)
									{
										Dust dust2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										dust2.velocity.Y = dust2.velocity.Y - (1f + (float)num);
										dust2.velocity.Y = dust2.velocity.Y * Main.rand.NextFloat();
									}
								}
								if (num2 > 0)
								{
									causedShockwaves = true;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000DBB RID: 3515 RVA: 0x00385D38 File Offset: 0x00383F38
		private void CreateImpactExplosion2_SleepyOctopod(Vector2 explosionOrigin, bool causedShockwaves)
		{
			Vector2 spinningpoint;
			spinningpoint..ctor(7f, 0f);
			Vector2 vector;
			vector..ctor(1f, 0.7f);
			Color color;
			color..ctor(20, 255, 100, 200);
			for (float num = 0f; num < 25f; num += 1f)
			{
				Vector2 vector2 = spinningpoint.RotatedBy((double)(num * 6.2831855f / 25f), default(Vector2)) * vector;
				Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 0, default(Color), 1f);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + vector2;
				Dust dust2 = dust;
				dust2.velocity.Y = dust2.velocity.Y - 3f;
				Dust dust3 = dust;
				dust3.velocity.X = dust3.velocity.X * 0.5f;
				dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
				dust.noLight = true;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 25f; num2 += 1f)
				{
					Vector2 vector3 = spinningpoint.RotatedBy((double)(num2 * 6.2831855f / 25f), default(Vector2)) * vector;
					Dust dust4 = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0f, 0f, 0, default(Color), 1f);
					dust4.alpha = 100;
					dust4.color = color;
					dust4.position = explosionOrigin + vector3;
					dust4.velocity.Y = dust4.velocity.Y - 5f;
					dust4.velocity.X = dust4.velocity.X * 0.8f;
					dust4.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
					dust4.noLight = true;
				}
			}
		}

		// Token: 0x06000DBC RID: 3516 RVA: 0x00385F58 File Offset: 0x00384158
		public void CreateImpactExplosion2_FlailTileCollision(Vector2 explosionOrigin, bool causedShockwaves, Vector2 velocityBeforeCollision)
		{
			Vector2 spinningpoint;
			spinningpoint..ctor(7f, 0f);
			Vector2 vector;
			vector..ctor(1f, 0.7f);
			Color color = Color.White * 0.5f;
			Vector2 vector2 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
			for (float num = 0f; num < 8f; num += 1f)
			{
				Vector2 vector3 = spinningpoint.RotatedBy((double)(num * 6.2831855f / 8f), default(Vector2)) * vector;
				Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1f);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + vector3;
				Dust dust2 = dust;
				dust2.velocity.Y = dust2.velocity.Y - 0.8f;
				Dust dust3 = dust;
				dust3.velocity.X = dust3.velocity.X * 0.8f;
				dust.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
				dust.scale = 0.4f;
				dust.noLight = true;
				dust.velocity += vector2 * 2f;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 8f; num2 += 1f)
				{
					Vector2 vector4 = spinningpoint.RotatedBy((double)(num2 * 6.2831855f / 8f), default(Vector2)) * vector;
					Dust dust4 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1f);
					dust4.alpha = 100;
					dust4.color = color;
					dust4.position = explosionOrigin + vector4;
					dust4.velocity.Y = dust4.velocity.Y - 1f;
					dust4.velocity.X = dust4.velocity.X * 0.4f;
					dust4.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
					dust4.scale = 0.4f;
					dust4.noLight = true;
					dust4.velocity += vector2 * 1.5f;
				}
			}
		}

		// Token: 0x06000DBD RID: 3517 RVA: 0x003861D4 File Offset: 0x003843D4
		private void AI_142_MonkStaffT2And3()
		{
			Player player = Main.player[this.owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter, false, true);
			this.direction = player.direction;
			player.heldProj = this.whoAmI;
			base.Center = vector;
			if (player.dead)
			{
				this.Kill();
				return;
			}
			if (!player.frozen)
			{
				if (this.type == 699)
				{
					this.spriteDirection = (this.direction = player.direction);
					Vector2 vector2 = vector;
					this.alpha -= 127;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.localAI[0] > 0f)
					{
						this.localAI[0] -= 1f;
					}
					float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num2 = 1f - num;
					float num3 = this.velocity.ToRotation();
					float num4 = this.velocity.Length();
					float num5 = 22f;
					Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((double)(3.1415927f + num2 * 6.2831855f), default(Vector2)) * new Vector2(num4, this.ai[0]);
					this.position += spinningpoint.RotatedBy((double)num3, default(Vector2)) + new Vector2(num4 + num5, 0f).RotatedBy((double)num3, default(Vector2));
					Vector2 target = vector2 + spinningpoint.RotatedBy((double)num3, default(Vector2)) + new Vector2(num4 + num5 + 40f, 0f).RotatedBy((double)num3, default(Vector2));
					this.rotation = vector2.AngleTo(target) + 0.7853982f * (float)player.direction;
					if (this.spriteDirection == -1)
					{
						this.rotation += 3.1415927f;
					}
					vector2.DirectionTo(base.Center);
					Vector2 vector3 = vector2.DirectionTo(target);
					Vector2 vector4 = this.velocity.SafeNormalize(Vector2.UnitY);
					float num6 = 2f;
					int i = 0;
					while ((float)i < num6)
					{
						Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110, default(Color), 1f);
						dust.velocity = vector2.DirectionTo(dust.position) * 2f;
						dust.position = base.Center + vector4.RotatedBy((double)(num2 * 6.2831855f * 2f + (float)i / num6 * 6.2831855f), default(Vector2)) * 10f;
						dust.scale = 1f + 0.6f * Main.rand.NextFloat();
						dust.velocity += vector4 * 3f;
						dust.noGravity = true;
						i++;
					}
					for (int j = 0; j < 1; j++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110, default(Color), 1f);
							dust2.velocity = vector2.DirectionTo(dust2.position) * 2f;
							dust2.position = base.Center + vector3 * -110f;
							dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
							dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
				else if (this.type == 708)
				{
					Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
					this.spriteDirection = (this.direction = player.direction);
					this.alpha -= 127;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					float num7 = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num8 = 1f - num7;
					float num9 = this.velocity.ToRotation();
					float num10 = this.velocity.Length();
					float num11 = 22f;
					Vector2 spinningpoint2 = new Vector2(1f, 0f).RotatedBy((double)(3.1415927f + num8 * 6.2831855f), default(Vector2)) * new Vector2(num10, this.ai[0]);
					this.position += spinningpoint2.RotatedBy((double)num9, default(Vector2)) + new Vector2(num10 + num11, 0f).RotatedBy((double)num9, default(Vector2));
					Vector2 vector5 = vector + spinningpoint2.RotatedBy((double)num9, default(Vector2)) + new Vector2(num10 + num11 + 40f, 0f).RotatedBy((double)num9, default(Vector2));
					this.rotation = (vector5 - vector).SafeNormalize(Vector2.UnitX).ToRotation() + 0.7853982f * (float)player.direction;
					if (this.spriteDirection == -1)
					{
						this.rotation += 3.1415927f;
					}
					(base.Center - vector).SafeNormalize(Vector2.Zero);
					(vector5 - vector).SafeNormalize(Vector2.Zero);
					Vector2 vector6 = this.velocity.SafeNormalize(Vector2.UnitY);
					if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && this.owner == Main.myPlayer)
					{
						Vector2 vector7 = vector6 + Main.rand.NextVector2Square(-0.2f, 0.2f);
						vector7 *= 12f;
						int itemAnimation = player.itemAnimation;
						if (itemAnimation != 2)
						{
							if (itemAnimation != 6)
							{
								if (itemAnimation == 10)
								{
									vector7 = vector6.RotatedBy(0.0, default(Vector2));
								}
							}
							else
							{
								vector7 = vector6.RotatedBy(-0.3839724659919739, default(Vector2));
							}
						}
						else
						{
							vector7 = vector6.RotatedBy(0.3839724659919739, default(Vector2));
						}
						vector7 *= 10f + (float)Main.rand.Next(4);
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, vector7, 709, this.damage, 0f, this.owner, 0f, 0f, 0f);
					}
					for (int k = 0; k < 3; k += 2)
					{
						float num12 = 1f;
						float num13 = 1f;
						switch (k)
						{
						case 1:
							num13 = -1f;
							break;
						case 2:
							num13 = 1.25f;
							num12 = 0.5f;
							break;
						case 3:
							num13 = -1.25f;
							num12 = 0.5f;
							break;
						}
						if (Main.rand.Next(6) != 0)
						{
							num13 *= 1.2f;
							Dust dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 1f);
							dust3.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num13 * num12;
							dust3.noGravity = true;
							dust3.noLight = true;
							dust3.scale = 0.75f;
							dust3.fadeIn = 0.8f;
							dust3.customData = this;
							if (Main.rand.Next(3) == 0)
							{
								dust3.noGravity = false;
								dust3.fadeIn = 0f;
							}
						}
					}
				}
			}
			if (player.whoAmI == Main.myPlayer && player.itemAnimation <= 2)
			{
				this.Kill();
				player.reuseDelay = 2;
			}
		}

		// Token: 0x06000DBE RID: 3518 RVA: 0x00386A60 File Offset: 0x00384C60
		private void AI_143_MonkStaffT2Ghast()
		{
			if (this.ai[0] == 0f)
			{
				this.localAI[1] = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, new Vector2?(base.Center)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound == null)
			{
				float[] array = this.localAI;
				int num3 = 1;
				SlotId invalid = SlotId.Invalid;
				array[num3] = invalid.ToFloat();
			}
			else
			{
				activeSound.Position = new Vector2?(base.Center);
			}
			this.ai[0] += 1f;
			if (this.ai[0] > 50f)
			{
				this.alpha += 25;
				if (this.alpha > 255)
				{
					this.alpha = 255;
				}
			}
			else
			{
				this.alpha -= 25;
				if (this.alpha < 100)
				{
					this.alpha = 100;
				}
			}
			this.velocity *= 0.98f;
			int num4 = this.frameCounter + 1;
			this.frameCounter = num4;
			if (num4 >= 5)
			{
				this.frameCounter = 0;
				num4 = this.frame + 1;
				this.frame = num4;
				if (num4 >= 4)
				{
					this.frame = 0;
				}
			}
			if (this.ai[0] >= 60f)
			{
				this.Kill();
			}
			this.direction = (this.spriteDirection = ((this.velocity.X > 0f) ? 1 : -1));
			this.rotation = this.velocity.ToRotation();
			if (this.spriteDirection == -1)
			{
				this.rotation += 3.1415927f;
			}
			if (this.ai[0] >= 10f && this.ai[0] < 34f)
			{
				Vector2 vector = this.velocity.SafeNormalize(Vector2.UnitY);
				float num = this.ai[0] / 60f;
				float num2 = 2f;
				int i = 0;
				while ((float)i < num2)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110, default(Color), 1f);
					dust.velocity = vector * 2f;
					dust.position = base.Center + vector.RotatedBy((double)(num * 6.2831855f * 2f + (float)i / num2 * 6.2831855f), default(Vector2)) * 7f;
					dust.scale = 1f + 0.6f * Main.rand.NextFloat();
					dust.velocity += vector * 3f;
					dust.noGravity = true;
					i++;
				}
			}
		}

		// Token: 0x06000DBF RID: 3519 RVA: 0x00386D28 File Offset: 0x00384F28
		private void AI_144_DD2Pet()
		{
			Player player = Main.player[this.owner];
			float num = 4f;
			int num2 = 6;
			int num3 = 4;
			int num4 = Main.projFrames[this.type];
			int num5 = 0;
			float num6 = 0.08f;
			bool flag = false;
			float num7 = 0.1f;
			Vector2 vector;
			vector..ctor((float)(player.direction * 30), -20f);
			if (player.dead)
			{
				this.Kill();
				return;
			}
			bool flag2 = true;
			int num11 = this.type;
			switch (num11)
			{
			case 701:
				if (player.petFlagDD2Dragon)
				{
					this.timeLeft = 2;
				}
				break;
			case 702:
			{
				if (player.petFlagDD2Ghost)
				{
					this.timeLeft = 2;
				}
				vector.Y += (float)Math.Cos((double)(this.localAI[0] * 0.05235988f)) * 2f;
				num3 = 4;
				num2 = 10;
				flag2 = false;
				num = 6f;
				Vector2 vector2 = new Vector2((float)((this.spriteDirection == -1) ? -6 : -2), -26f).RotatedBy((double)this.rotation, default(Vector2));
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center + vector2, 4, 4, 135, 0f, 0f, 100, default(Color), 1f);
					if (Main.rand.Next(3) != 0)
					{
						dust2.noGravity = true;
						Dust dust3 = dust2;
						dust3.velocity.Y = dust3.velocity.Y - 3f;
						dust2.noLight = true;
					}
					else if (Main.rand.Next(2) != 0)
					{
						dust2.noLight = true;
					}
					dust2.velocity *= 0.5f;
					Dust dust4 = dust2;
					dust4.velocity.Y = dust4.velocity.Y - 0.9f;
					dust2.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
				Vector2 center = base.Center;
				Vector2 end = base.Center + this.velocity * 6f;
				float width = 20f;
				Utils.TileActionAttempt plot;
				if ((plot = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center, end, width, plot);
				Vector2 left = base.Left;
				Vector2 right = base.Right;
				float width2 = 20f;
				Utils.TileActionAttempt plot2;
				if ((plot2 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot2 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(left, right, width2, plot2);
				Vector2 center2 = player.Center;
				Vector2 end2 = player.Center + player.velocity * 6f;
				float width3 = 40f;
				Utils.TileActionAttempt plot3;
				if ((plot3 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot3 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(center2, end2, width3, plot3);
				Vector2 left2 = player.Left;
				Vector2 right2 = player.Right;
				float width4 = 40f;
				Utils.TileActionAttempt plot4;
				if ((plot4 = Projectile.<>O.<4>__CastLightOpen) == null)
				{
					plot4 = (Projectile.<>O.<4>__CastLightOpen = new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				Utils.PlotTileLine(left2, right2, width4, plot4);
				break;
			}
			case 703:
				if (player.petFlagDD2Gato)
				{
					this.timeLeft = 2;
				}
				vector.Y += (float)Math.Cos((double)(this.localAI[0] * 0.10471976f)) * 2f;
				num2 = 4;
				num3 = 2;
				num = 3f;
				num4 = 4;
				break;
			default:
				if (num11 == 764)
				{
					num7 = 0.025f;
					num6 = 0.04f;
					flag = true;
					this.localAI[0] += 1f;
					if (this.localAI[0] > 120f)
					{
						this.localAI[0] = 0f;
					}
					this.localAI[1] += this.velocity.X * 0.01f;
					this.localAI[1] += 0.008333334f;
					if (this.localAI[1] < -6.2831855f)
					{
						this.localAI[1] += 6.2831855f;
					}
					if (this.localAI[1] > 6.2831855f)
					{
						this.localAI[1] -= 6.2831855f;
					}
					if (this.velocity.Length() < 4f)
					{
						this.localAI[1] *= 0.9f;
						if (this.velocity.Length() > 0.1f && Main.rand.Next(30) == 0)
						{
							Dust dust5 = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 292, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1f);
							dust5.velocity *= 0.3f;
							dust5.noLightEmittence = true;
						}
					}
					else
					{
						Vector2 vector3;
						vector3..ctor((float)Main.screenWidth, (float)Main.screenHeight);
						base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector3 / 2f, vector3 + new Vector2(400f)));
						if (Main.rand.Next(15) == 0)
						{
							Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 292, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 0.9f).noLightEmittence = true;
						}
					}
					float num8 = this.localAI[0] / 120f * 2f;
					if (num8 > 1f)
					{
						num8 = 2f - num8;
					}
					this.Opacity = MathHelper.Lerp(0.4f, 0.75f, num8);
					vector.Y += (float)Math.Cos((double)(this.localAI[0] / 120f * 6.2831855f)) * 2f;
					if (player.petFlagUpbeatStar)
					{
						this.timeLeft = 2;
					}
				}
				break;
			}
			if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
			{
				vector.X += (float)(-(float)player.direction * 64);
			}
			this.direction = (this.spriteDirection = player.direction);
			Vector2 vector4 = player.MountedCenter + vector;
			float num12 = Vector2.Distance(base.Center, vector4);
			if (num12 > 1000f)
			{
				base.Center = player.Center + vector;
			}
			Vector2 vector5 = vector4 - base.Center;
			if (num12 < num)
			{
				this.velocity *= 0.25f;
			}
			if (vector5 != Vector2.Zero)
			{
				if (vector5.Length() < num * 0.5f)
				{
					this.velocity = vector5;
				}
				else
				{
					this.velocity = vector5 * num7;
				}
			}
			if (this.velocity.Length() > 6f)
			{
				float num9 = this.velocity.X * num6 + this.velocity.Y * (float)this.spriteDirection * 0.02f;
				if (Math.Abs(this.rotation - num9) >= 3.1415927f)
				{
					if (num9 < this.rotation)
					{
						this.rotation -= 6.2831855f;
					}
					else
					{
						this.rotation += 6.2831855f;
					}
				}
				float num10 = 12f;
				this.rotation = (this.rotation * (num10 - 1f) + num9) / num10;
				num11 = this.frameCounter + 1;
				this.frameCounter = num11;
				if (num11 >= num3)
				{
					this.frameCounter = 0;
					num11 = this.frame + 1;
					this.frame = num11;
					if (num11 >= num4)
					{
						this.frame = num5;
					}
				}
			}
			else
			{
				if (this.rotation > 3.1415927f)
				{
					this.rotation -= 6.2831855f;
				}
				if (this.rotation > -0.005f && this.rotation < 0.005f)
				{
					this.rotation = 0f;
				}
				else
				{
					this.rotation *= 0.96f;
				}
				num11 = this.frameCounter + 1;
				this.frameCounter = num11;
				if (num11 >= num2)
				{
					this.frameCounter = 0;
					num11 = this.frame + 1;
					this.frame = num11;
					if (num11 >= num4)
					{
						this.frame = num5;
					}
				}
			}
			if (!flag)
			{
				this.localAI[0] += 1f;
				if (this.localAI[0] > 120f)
				{
					this.localAI[0] = 0f;
				}
			}
		}

		// Token: 0x06000DC0 RID: 3520 RVA: 0x003875E8 File Offset: 0x003857E8
		private void AI_145_BookStaffStorm()
		{
			float num = 300f;
			if (this.soundDelay == 0)
			{
				this.soundDelay = -1;
				this.localAI[1] = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, new Vector2?(base.Center)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound != null)
			{
				activeSound.Position = new Vector2?(base.Center);
				activeSound.Volume = 1f - Math.Max(this.ai[0] - (num - 15f), 0f) / 15f;
			}
			else
			{
				float[] array = this.localAI;
				int num4 = 1;
				SlotId invalid = SlotId.Invalid;
				array[num4] = invalid.ToFloat();
			}
			if (this.localAI[0] >= 16f && this.ai[0] < num - 15f)
			{
				this.ai[0] = num - 15f;
			}
			this.ai[0] += 1f;
			if (this.ai[0] >= num)
			{
				this.Kill();
			}
			Vector2 top = base.Top;
			Vector2 bottom = base.Bottom;
			Vector2 vector = Vector2.Lerp(top, bottom, 0.5f);
			Vector2 vector2;
			vector2..ctor(0f, bottom.Y - top.Y);
			vector2.X = vector2.Y * 0.2f;
			int num2 = 16;
			int num3 = 160;
			for (int i = 0; i < 1; i++)
			{
				Vector2 vector3;
				vector3..ctor(base.Center.X - (float)(num2 / 2), this.position.Y + (float)this.height - (float)num3);
				if (Collision.SolidCollision(vector3, num2, num3) || Collision.WetCollision(vector3, num2, num3))
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = 0f;
					}
					if (this.velocity.Y > -4f)
					{
						this.velocity.Y = this.velocity.Y - 2f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y - 4f;
						this.localAI[0] += 2f;
					}
					if (this.velocity.Y < -16f)
					{
						this.velocity.Y = -16f;
					}
				}
				else
				{
					this.localAI[0] -= 1f;
					if (this.localAI[0] < 0f)
					{
						this.localAI[0] = 0f;
					}
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
					}
					if (this.velocity.Y < 4f)
					{
						this.velocity.Y = this.velocity.Y + 2f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + 4f;
					}
					if (this.velocity.Y > 16f)
					{
						this.velocity.Y = 16f;
					}
				}
			}
			if (this.ai[0] < num - 30f)
			{
				for (int j = 0; j < 1; j++)
				{
					float value = -1f;
					float value2 = 0.9f;
					float amount = Main.rand.NextFloat();
					Vector2 vector4;
					vector4..ctor(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value, value2, amount));
					vector4.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
					vector4.X *= -1f;
					Vector2 vector5;
					vector5..ctor(6f, 10f);
					Vector2 vector6 = vector + vector2 * vector4 * 0.5f + vector5;
					Dust dust = Main.dust[Dust.NewDust(vector6, 0, 0, 274, 0f, 0f, 0, default(Color), 1f)];
					dust.position = vector6;
					dust.fadeIn = 1.3f;
					dust.scale = 0.87f;
					dust.alpha = 211;
					if (vector4.X > -1.2f)
					{
						dust.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust.noGravity = true;
					dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
					Dust dust2 = dust;
					dust2.velocity.X = dust2.velocity.X + this.velocity.X * 2.1f;
					dust.noLight = true;
				}
			}
			Vector2 vector7 = base.Bottom + new Vector2(-25f, -25f);
			for (int k = 0; k < 4; k++)
			{
				Dust dust3 = Dust.NewDustDirect(vector7, 50, 25, 31, this.velocity.X, -2f, 100, default(Color), 1f);
				dust3.fadeIn = 1.1f;
				dust3.noGravity = true;
			}
			for (int l = 0; l < 1; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Gore gore = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					gore.timeLeft = 60;
					gore.alpha = 50;
					gore.velocity.X = gore.velocity.X + this.velocity.X;
				}
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore2 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					gore2.timeLeft = 0;
					gore2.alpha = 80;
				}
			}
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore3 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(this.velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1007,
						1008,
						1008
					}), 1f);
					gore3.timeLeft = 0;
					gore3.alpha = 80;
				}
			}
		}

		// Token: 0x06000DC1 RID: 3521 RVA: 0x00387D30 File Offset: 0x00385F30
		public bool AI_137_CanHit(Vector2 targetPosition)
		{
			if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16, false))
			{
				return false;
			}
			Vector2 vector = base.Top + Vector2.UnitY * 20f;
			bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
			if (!flag)
			{
				Vector2 v = targetPosition - vector;
				Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
				Vector2 vector2 = Vector2.Lerp(vector, targetPosition, 0.5f);
				Vector2 vector3 = vector2 + spinningpoint.RotatedBy(1.5707963705062866, default(Vector2)) * v.Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
				if (!flag)
				{
					Vector2 vector4 = vector2 + spinningpoint.RotatedBy(-1.5707963705062866, default(Vector2)) * v.Length() * 0.2f;
					if (Collision.CanHitLine(vector, 0, 0, vector4, 0, 0) && Collision.CanHitLine(vector4, 0, 0, targetPosition, 0, 0))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		// Token: 0x06000DC2 RID: 3522 RVA: 0x00387E5C File Offset: 0x0038605C
		private Point GetScarabBombDigDirectionSnap8()
		{
			Player player = Main.player[this.owner];
			Vector2 vector = base.DirectionTo(player.Center);
			Point result;
			result..ctor((vector.X <= 0f) ? 1 : -1, (vector.Y <= 0f) ? 1 : -1);
			if (Math.Abs(vector.X) > Math.Abs(vector.Y) * 2f)
			{
				result.Y = 0;
			}
			else if (Math.Abs(vector.Y) > Math.Abs(vector.X) * 2f)
			{
				result.X = 0;
			}
			return result;
		}

		// Token: 0x06000DC3 RID: 3523 RVA: 0x00387EFB File Offset: 0x003860FB
		public Color GetFirstFractalColor()
		{
			return Main.hslToRgb(this.ai[1], 1f, 0.5f, byte.MaxValue);
		}

		// Token: 0x06000DC4 RID: 3524 RVA: 0x00387F1C File Offset: 0x0038611C
		public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(Point pt, float size, Utils.TileActionAttempt plot)
		{
			Tile tile = Main.tile[pt.X, pt.Y];
			if (tile != null && tile.active() && tile.halfBrick())
			{
				int num = pt.Y - 1;
				if (num >= 0)
				{
					tile = Main.tile[pt.X, num];
					if (!WorldGen.SolidOrSlopedTile(tile))
					{
						pt.Y--;
					}
				}
			}
			DelegateMethods.v2_1 = pt.ToVector2();
			DelegateMethods.f_1 = size;
			Utils.PlotTileArea(pt.X, pt.Y, plot);
		}

		// Token: 0x06000DC5 RID: 3525 RVA: 0x00387FB2 File Offset: 0x003861B2
		public bool IsAttachedTo(NPC npc)
		{
			return this.aiStyle == 113 && this.ai[0] == 1f && this.ai[1] == (float)npc.whoAmI;
		}

		// Token: 0x06000DC6 RID: 3526 RVA: 0x00387FE4 File Offset: 0x003861E4
		private void BoulderExplosion()
		{
			int num = Main.rand.Next(2, 5);
			for (int i = 0; i < num; i++)
			{
				float num2 = 8f;
				Vector2 vector;
				vector..ctor(Main.rand.NextFloat() - 0.5f, (0f - Main.rand.NextFloat()) / 2f);
				vector.Normalize();
				vector *= num2;
				int num3 = (int)((double)this.damage * 0.75);
				int num4 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector.X, vector.Y, 1005, num3, 0f, Main.myPlayer, 0f, 0f, 0f);
				Main.projectile[num4].timeLeft = 300;
			}
		}

		// Token: 0x06000DC7 RID: 3527 RVA: 0x003880C8 File Offset: 0x003862C8
		private void SpawnWebs()
		{
			int num = 6;
			int num2 = (int)(base.Center.X / 16f);
			int num3 = (int)(base.Center.Y / 16f);
			int num4 = num2 - num;
			int num5 = num2 + num;
			int num6 = num3 - num;
			int num7 = num3 + num;
			if (num4 < 1)
			{
				num4 = 1;
			}
			if (num5 > Main.maxTilesX - 1)
			{
				num5 = Main.maxTilesX - 1;
			}
			if (num6 < 1)
			{
				num6 = 1;
			}
			if (num7 > Main.maxTilesY - 1)
			{
				num7 = Main.maxTilesY - 1;
			}
			for (int i = num4; i < num5; i++)
			{
				for (int j = num6; j < num7; j++)
				{
					if (!Main.tile[i, j].active() && Main.rand.Next(5) != 0 && Math.Abs(i - num2) * Math.Abs(i - num2) + Math.Abs(j - num3) * Math.Abs(j - num3) < num * num)
					{
						WorldGen.PlaceTile(i, j, 51, false, false, -1, 0);
						if (Main.tile[i, j].active() && Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, i, j, TileChangeType.None);
						}
					}
				}
			}
		}

		// Token: 0x06000DC8 RID: 3528 RVA: 0x00388204 File Offset: 0x00386404
		public unsafe void Kill()
		{
			if (!this.active)
			{
				return;
			}
			Main.projectileIdentity[this.owner, this.identity] = -1;
			int num = this.timeLeft;
			this.timeLeft = 0;
			bool flag = true;
			if (this.type >= 0 && ProjectileID.Sets.DontCancelChannelOnKill[this.type])
			{
				flag = false;
			}
			if (this.owner == Main.myPlayer && flag)
			{
				Main.player[this.owner].TryCancelChannel(this);
			}
			if (!ProjectileLoader.PreKill(this, num))
			{
				this.active = false;
				return;
			}
			if (Main.getGoodWorld && (this.aiStyle == 16 || ProjectileID.Sets.Explosive[this.type]))
			{
				this.TryGettingHitByOtherPlayersExplosives();
			}
			if (Main.netMode != 1 && Main.getGoodWorld)
			{
				if (this.type == 472)
				{
					this.SpawnWebs();
				}
				if (this.type == 99)
				{
					this.BoulderExplosion();
				}
			}
			if (this.type == 1020)
			{
				if (this.position.Y - (float)this.height <= (float)(16 * Main.offScreenRange) && this.owner == Main.myPlayer)
				{
					Main.Achievements.GetCondition("TO_INFINITY_AND_BEYOND", "Do").Complete();
				}
				ActiveSound activeSound3 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
				if (activeSound3 != null)
				{
					activeSound3.Stop();
				}
				SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
				Color transparent = Color.Transparent;
				int num1032;
				for (int i = 0; i < 15; i = num1032 + 1)
				{
					Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent, 0.8f);
					dust.fadeIn = 0f;
					Dust dust2 = dust;
					Dust dust334 = dust2;
					dust334.velocity *= 0.5f;
					num1032 = i;
				}
				for (int j = 0; j < 5; j = num1032 + 1)
				{
					Dust dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent, 2.5f);
					dust3.noGravity = true;
					Dust dust4 = dust3;
					Dust dust334 = dust4;
					dust334.velocity *= 2.5f;
					dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent, 1.1f);
					dust4 = dust3;
					dust334 = dust4;
					dust334.velocity *= 2f;
					dust3.noGravity = true;
					num1032 = j;
				}
				for (int k = 0; k < 3; k = num1032 + 1)
				{
					Dust dust5 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 100, transparent, 1.1f);
					Dust dust6 = dust5;
					Dust dust334 = dust6;
					dust334.velocity *= 2f;
					dust5.noGravity = true;
					num1032 = k;
				}
				for (int l = -1; l <= 1; l += 2)
				{
					for (int m = -1; m <= 1; m += 2)
					{
						if (Main.rand.Next(5) == 0)
						{
							Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
							Gore gore2 = gore;
							Gore gore64 = gore2;
							gore64.velocity *= 0.2f;
							gore2 = gore;
							gore64 = gore2;
							gore64.scale *= 0.65f;
							gore2 = gore;
							gore64 = gore2;
							gore64.velocity += new Vector2((float)l, (float)m) * 0.5f;
						}
					}
				}
			}
			else if (this.type == 949)
			{
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(base.Center), null);
				int num2 = (int)this.ai[0];
				float num3 = 20f;
				float num1033;
				for (float num4 = 0f; num4 < num3; num4 = num1033 + 1f)
				{
					Vector2 vector = this.position;
					int num5 = Dust.NewDust(vector, 4, 4, num2, 0f, 0f, 100, default(Color), 1f);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num5].noGravity = true;
					}
					Dust dust7 = Main.dust[num5];
					Dust dust334 = dust7;
					dust334.velocity *= 0.8f;
					if (num2 == 66)
					{
						Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						Main.dust[num5].noGravity = true;
					}
					num1033 = num4;
				}
			}
			else if (this.type == 985)
			{
				if (this.localAI[1] != 1f)
				{
					Color value;
					value..ctor(64, 220, 96);
					Color value2;
					value2..ctor(15, 84, 125);
					int num1032;
					for (int n = 0; n < 20; n = num1032 + 1)
					{
						float num6 = Main.rand.NextFloatDirection();
						float num7 = 1f - Math.Abs(num6);
						float f = this.rotation + num6 * 1.5707964f * 0.9f;
						Vector2 vector2 = base.Center + f.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 60f, 85f, true) * this.scale;
						float num8 = Main.rand.NextFloat();
						vector2 -= this.rotation.ToRotationVector2() * num8 * 70f * this.scale;
						Color value3 = Color.Lerp(value2, value, 1f);
						value3 = Color.Lerp(value3, Color.White, 0.5f);
						Color.Lerp(value3, Color.White, Main.rand.NextFloat() * 0.3f);
						Dust dust8 = Dust.NewDustPerfect(vector2, 107, new Vector2?(this.velocity.RotatedBy((double)(num6 * 0.7853982f), default(Vector2)) * 0.2f * Main.rand.NextFloat()), 100, default(Color), 1.4f * num7);
						Dust dust9 = dust8;
						Dust dust334 = dust9;
						dust334.position -= dust8.velocity * Main.rand.NextFloat() * 3f;
						dust9 = dust8;
						dust334 = dust9;
						dust334.scale *= 1f - num8;
						num1032 = n;
					}
					for (int num9 = 0; num9 < 10; num9 = num1032 + 1)
					{
						float num10 = Main.rand.NextFloatDirection();
						float num11 = 1f - Math.Abs(num10);
						float f2 = this.rotation + num10 * 1.5707964f * 0.9f;
						Vector2 vector3 = base.Center + f2.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 70f, 85f, true) * this.scale;
						float num12 = Main.rand.NextFloat() * 0.25f;
						vector3 -= this.rotation.ToRotationVector2() * (0.2f + num12) * 70f * this.scale;
						Color value4 = Color.Lerp(value2, value, 0.66f);
						value4 = Color.Lerp(value4, Color.White, 0.33f);
						Color.Lerp(value4, Color.White, Main.rand.NextFloat() * 0.3f);
						Dust dust10 = Dust.NewDustPerfect(vector3, 107, new Vector2?(this.velocity.RotatedBy((double)(num10 * 0.7853982f), default(Vector2)) * 0.2f * Main.rand.NextFloat()), 100, default(Color), 1.4f * num11);
						Dust dust11 = dust10;
						Dust dust334 = dust11;
						dust334.position -= dust10.velocity * Main.rand.NextFloat() * 3f;
						dust11 = dust10;
						dust334 = dust11;
						dust334.scale *= 1f - num12;
						num1032 = num9;
					}
					for (int num13 = 0; num13 < 10; num13 = num1032 + 1)
					{
						float num14 = Main.rand.NextFloatDirection();
						float num15 = 1f - Math.Abs(num14);
						float f3 = this.rotation + num14 * 1.5707964f * 0.9f;
						Vector2 vector4 = base.Center + f3.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 60f, 75f, true) * this.scale;
						float num16 = Main.rand.NextFloat() * 0.25f;
						vector4 -= this.rotation.ToRotationVector2() * (0.5f + num16) * 70f * this.scale;
						Color value5 = Color.Lerp(value2, value, 0.33f);
						value5 = Color.Lerp(value5, Color.White, 0.16f);
						Color.Lerp(value5, Color.White, Main.rand.NextFloat() * 0.3f);
						Dust dust12 = Dust.NewDustPerfect(vector4, 107, new Vector2?(this.velocity.RotatedBy((double)(num14 * 0.7853982f), default(Vector2)) * 0.2f * Main.rand.NextFloat()), 100, default(Color), 1.4f * num15);
						Dust dust13 = dust12;
						Dust dust334 = dust13;
						dust334.position -= dust12.velocity * Main.rand.NextFloat() * 3f;
						dust13 = dust12;
						dust334 = dust13;
						dust334.scale *= 1f - num16;
						num1032 = num13;
					}
				}
			}
			else if (this.type == 756)
			{
				for (float num17 = 0f; num17 < 1f; num17 += 0.025f)
				{
					Dust dust14 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale + this.velocity.SafeNormalize(Vector2.UnitY) * num17 * 200f * this.scale, 5, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 0, default(Color), 1f);
					ref float ptr = ref dust14.velocity.Y;
					ptr += -0.3f;
					Dust dust15 = dust14;
					Dust dust334 = dust15;
					dust334.velocity += this.velocity * 0.2f;
					dust14.scale = 1f;
					dust14.alpha = 100;
				}
			}
			else if (this.type == 961)
			{
				for (float num18 = 0f; num18 < 1f; num18 += 0.25f)
				{
					Dust dust16 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale + this.velocity.SafeNormalize(Vector2.UnitY) * num18 * 200f * this.scale, 16, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 0, default(Color), 1f);
					ref float ptr = ref dust16.velocity.Y;
					ptr += -0.3f;
					Dust dust17 = dust16;
					Dust dust334 = dust17;
					dust334.velocity += this.velocity * 0.2f;
					dust16.scale = 1f;
					dust16.alpha = 100;
				}
			}
			else if (this.type == 962)
			{
				int num1032;
				for (int num19 = 0; num19 < 20; num19 = num1032 + 1)
				{
					Dust dust18 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale, 16, new Vector2?(Main.rand.NextVector2Circular(2f, 2f)), 0, default(Color), 1f);
					Dust dust19 = dust18;
					Dust dust334 = dust19;
					dust334.velocity += this.velocity * 0.1f;
					dust18.scale = 1f;
					dust18.alpha = 100;
					num1032 = num19;
				}
			}
			else if (this.type == 932)
			{
				Color fairyQueenWeaponsColor = this.GetFairyQueenWeaponsColor(1f, 0f, null);
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(base.Center), null);
				Vector2 target = base.Center;
				Main.rand.NextFloat();
				int num20 = 10;
				int num1032;
				for (int num21 = 0; num21 < num20; num21 = num1032 + 1)
				{
					Vector2 vector5 = this.position - this.velocity * (float)num21;
					int num22 = Main.rand.Next(1, 3);
					float num23 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float)num20, 0f, (float)num21, true));
					if ((float)num21 >= (float)this.oldPos.Length * 0.3f)
					{
						num1032 = num22;
						num22 = num1032 - 1;
					}
					if ((float)num21 >= (float)this.oldPos.Length * 0.75f)
					{
						num22 -= 2;
					}
					vector5.DirectionTo(target).SafeNormalize(Vector2.Zero);
					target = vector5;
					float num1033;
					for (float num24 = 0f; num24 < (float)num22; num24 = num1033 + 1f)
					{
						int num25 = Dust.NewDust(vector5, this.width, this.height, 267, 0f, 0f, 0, fairyQueenWeaponsColor, 1f);
						Dust dust20 = Main.dust[num25];
						Dust dust334 = dust20;
						dust334.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num25].noGravity = true;
						Main.dust[num25].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num25].fadeIn = Main.rand.NextFloat() * 1.2f * num23;
						dust20 = Main.dust[num25];
						dust334 = dust20;
						dust334.scale *= num23;
						if (num25 != 6000)
						{
							Dust dust21 = Dust.CloneDust(num25);
							dust20 = dust21;
							dust334 = dust20;
							dust334.scale /= 2f;
							dust20 = dust21;
							dust334 = dust20;
							dust334.fadeIn *= 0.85f;
							dust21.color = new Color(255, 255, 255, 255);
						}
						num1033 = num24;
					}
					num1032 = num21;
				}
			}
			else if (this.type == 931)
			{
				Color fairyQueenWeaponsColor2 = this.GetFairyQueenWeaponsColor(1f, 0f, null);
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(base.Center), null);
				Vector2 target2 = base.Center;
				Main.rand.NextFloat();
				int num1032;
				for (int num26 = 0; num26 < this.oldPos.Length; num26 = num1032 + 1)
				{
					Vector2 vector6 = this.oldPos[num26];
					if (vector6 == Vector2.Zero)
					{
						break;
					}
					int num27 = Main.rand.Next(1, 3);
					float num28 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float)this.oldPos.Length, 0f, (float)num26, true));
					if ((float)num26 >= (float)this.oldPos.Length * 0.3f)
					{
						num1032 = num27;
						num27 = num1032 - 1;
					}
					if ((float)num26 >= (float)this.oldPos.Length * 0.75f)
					{
						num27 -= 2;
					}
					vector6.DirectionTo(target2).SafeNormalize(Vector2.Zero);
					target2 = vector6;
					float num1033;
					for (float num29 = 0f; num29 < (float)num27; num29 = num1033 + 1f)
					{
						int num30 = Dust.NewDust(vector6, this.width, this.height, 267, 0f, 0f, 0, fairyQueenWeaponsColor2, 1f);
						Dust dust22 = Main.dust[num30];
						Dust dust334 = dust22;
						dust334.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num30].noGravity = true;
						Main.dust[num30].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num30].fadeIn = Main.rand.NextFloat() * 1.2f * num28;
						dust22 = Main.dust[num30];
						dust334 = dust22;
						dust334.scale *= num28;
						if (num30 != 6000)
						{
							Dust dust23 = Dust.CloneDust(num30);
							dust22 = dust23;
							dust334 = dust22;
							dust334.scale /= 2f;
							dust22 = dust23;
							dust334 = dust22;
							dust334.fadeIn *= 0.85f;
							dust23.color = new Color(255, 255, 255, 255);
						}
						num1033 = num29;
					}
					num1032 = num26;
				}
			}
			else if (this.type == 79)
			{
				int newWidth = this.width;
				int newHeight = this.height;
				this.Resize(128, 128);
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				this.Resize(newWidth, newHeight);
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(base.Center), null);
				Vector2 target3 = base.Center;
				float num31 = Main.rand.NextFloat();
				int num1032;
				for (int num32 = 0; num32 < this.oldPos.Length; num32 = num1032 + 1)
				{
					Vector2 vector7 = this.oldPos[num32];
					if (vector7 == Vector2.Zero)
					{
						break;
					}
					Color newColor = Main.hslToRgb((num31 + Utils.GetLerpValue((float)this.oldPos.Length, 0f, (float)num32, true)) % 1f, 1f, 0.65f, byte.MaxValue);
					int num33 = Main.rand.Next(1, 4);
					float lerpValue = Utils.GetLerpValue((float)this.oldPos.Length, 0f, (float)num32, true);
					float num34 = MathHelper.Lerp(0.3f, 1f, lerpValue);
					if ((float)num32 >= (float)this.oldPos.Length * 0.3f)
					{
						num1032 = num33;
						num33 = num1032 - 1;
					}
					if ((float)num32 >= (float)this.oldPos.Length * 0.65f)
					{
						num33 -= 2;
					}
					if ((float)num32 >= (float)this.oldPos.Length * 0.85f)
					{
						num33 -= 3;
					}
					Vector2 vector8 = vector7.DirectionTo(target3).SafeNormalize(Vector2.Zero);
					target3 = vector7;
					Vector2 vector9 = base.Size / 2f;
					float num1033;
					for (float num35 = 0f; num35 < (float)num33; num35 = num1033 + 1f)
					{
						int num36 = Dust.NewDust(vector7, this.width, this.height, 267, 0f, 0f, 0, newColor, 1f);
						Dust dust24 = Main.dust[num36];
						Dust dust334 = dust24;
						dust334.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num36].noGravity = true;
						Main.dust[num36].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num36].fadeIn = Main.rand.NextFloat() * 1.2f * num34;
						dust24 = Main.dust[num36];
						dust334 = dust24;
						dust334.velocity += vector8 * 6f;
						dust24 = Main.dust[num36];
						dust334 = dust24;
						dust334.scale *= num34;
						Main.dust[num36].position = Vector2.Lerp(vector7 + vector9, Main.dust[num36].position, lerpValue);
						if (num36 != 6000)
						{
							Dust dust25 = Dust.CloneDust(num36);
							dust24 = dust25;
							dust334 = dust24;
							dust334.scale /= 2f;
							dust24 = dust25;
							dust334 = dust24;
							dust334.fadeIn *= 0.85f;
							dust25.color = new Color(255, 255, 255, 255);
						}
						num1033 = num35;
					}
					num1032 = num32;
				}
				for (float num37 = 0f; num37 < 0.5f; num37 += 0.25f)
				{
					ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings
					{
						PositionInWorld = base.Center,
						MovementVector = Vector2.UnitX.RotatedBy((double)(num37 * 6.2831855f), default(Vector2)) * 16f
					}, new int?(this.owner));
				}
				for (int num38 = 0; num38 < 14; num38 = num1032 + 1)
				{
					int num39 = Dust.NewDust(this.position, this.width, this.height, 66, 0f, 0f, 100, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f, byte.MaxValue), 1.7f);
					Main.dust[num39].noGravity = true;
					Dust dust26 = Main.dust[num39];
					Dust dust334 = dust26;
					dust334.velocity *= 3f;
					num1032 = num38;
				}
			}
			else if (this.type == 16)
			{
				int newWidth2 = this.width;
				int newHeight2 = this.height;
				this.Resize(128, 128);
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				this.Resize(newWidth2, newHeight2);
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(base.Center), null);
				Vector2 target4 = base.Center;
				int num1032;
				for (int num40 = 0; num40 < this.oldPos.Length; num40 = num1032 + 1)
				{
					Vector2 vector10 = this.oldPos[num40];
					if (vector10 == Vector2.Zero)
					{
						break;
					}
					Color newColor2 = Main.hslToRgb(0.44444445f + Main.rand.NextFloat() * 0.22222222f, 1f, 0.65f, byte.MaxValue);
					int num41 = Main.rand.Next(1, 4);
					float num42 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float)this.oldPos.Length, 0f, (float)num40, true));
					if ((float)num40 >= (float)this.oldPos.Length * 0.3f)
					{
						num1032 = num41;
						num41 = num1032 - 1;
					}
					if ((float)num40 >= (float)this.oldPos.Length * 0.75f)
					{
						num41 -= 2;
					}
					Vector2 vector11 = vector10.DirectionTo(target4).SafeNormalize(Vector2.Zero);
					target4 = vector10;
					float num1033;
					for (float num43 = 0f; num43 < (float)num41; num43 = num1033 + 1f)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num44 = Dust.NewDust(vector10, this.width, this.height, 267, 0f, 0f, 0, newColor2, 1f);
							Dust dust27 = Main.dust[num44];
							Dust dust334 = dust27;
							dust334.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num44].noGravity = true;
							Main.dust[num44].scale = Main.rand.NextFloat() * 0.8f;
							Main.dust[num44].fadeIn = Main.rand.NextFloat() * 1.2f * num42;
							dust27 = Main.dust[num44];
							dust334 = dust27;
							dust334.velocity += vector11 * 6f;
							dust27 = Main.dust[num44];
							dust334 = dust27;
							dust334.scale *= num42;
							if (num44 != 6000)
							{
								Dust dust28 = Dust.CloneDust(num44);
								dust27 = dust28;
								dust334 = dust27;
								dust334.scale /= 2f;
								dust27 = dust28;
								dust334 = dust27;
								dust334.fadeIn /= 2f;
								dust28.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust29 = Dust.NewDustDirect(vector10, this.width, this.height, 15, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
							Main.rand.Next(2);
							dust29.noGravity = true;
							Dust dust30 = dust29;
							Dust dust334 = dust30;
							dust334.velocity *= 2f;
							dust30 = dust29;
							dust334 = dust30;
							dust334.velocity += vector11 * 9f;
							dust30 = dust29;
							dust334 = dust30;
							dust334.scale *= num42;
							dust29.fadeIn = (0.6f + Main.rand.NextFloat() * 0.4f) * num42;
							dust29.noLightEmittence = (dust29.noLight = true);
						}
						num1033 = num43;
					}
					num1032 = num40;
				}
				for (int num45 = 0; num45 < 20; num45 = num1032 + 1)
				{
					Dust dust31 = Dust.NewDustDirect(this.position, this.width, this.height, 15, 0f, 0f, 0, default(Color), 1f);
					dust31.noGravity = true;
					dust31.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
					dust31.scale = 1.2f + Main.rand.NextFloat() * 0.5f;
					dust31.noLightEmittence = (dust31.noLight = true);
					Dust dust32 = dust31;
					Dust dust334 = dust32;
					dust334.velocity += this.velocity * 0.01f;
					dust32 = dust31;
					dust334 = dust32;
					dust334.position += dust31.velocity * (float)Main.rand.Next(1, 16);
					dust31 = Dust.NewDustDirect(this.position, this.width, this.height, 15, 0f, 0f, 100, default(Color), 1f);
					dust32 = dust31;
					dust334 = dust32;
					dust334.velocity *= 1.2f;
					dust31.noLightEmittence = (dust31.noLight = true);
					dust32 = dust31;
					dust334 = dust32;
					dust334.velocity += this.velocity * 0.01f;
					dust32 = dust31;
					dust334 = dust32;
					dust334.scale *= 0.8f + Main.rand.NextFloat() * 0.2f;
					dust32 = dust31;
					dust334 = dust32;
					dust334.position += dust31.velocity * (float)Main.rand.Next(1, 16);
					num1032 = num45;
				}
			}
			else if (this.type == 34)
			{
				int newWidth3 = this.width;
				int newHeight3 = this.height;
				this.Resize(96, 96);
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				this.Resize(newWidth3, newHeight3);
				SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
				Vector2 target5 = base.Center;
				int num1032;
				for (int num46 = 0; num46 < this.oldPos.Length; num46 = num1032 + 1)
				{
					Vector2 vector12 = this.oldPos[num46];
					if (vector12 == Vector2.Zero)
					{
						break;
					}
					Color newColor3 = Main.hslToRgb(Main.rand.NextFloat() * 0.11111111f, 1f, 0.5f, byte.MaxValue);
					int num47 = Main.rand.Next(1, 5);
					float num48 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float)this.oldPos.Length, 0f, (float)num46, true));
					if ((float)num46 >= (float)this.oldPos.Length * 0.3f)
					{
						num1032 = num47;
						num47 = num1032 - 1;
					}
					if ((float)num46 >= (float)this.oldPos.Length * 0.75f)
					{
						num47 -= 2;
					}
					Vector2 vector13 = vector12.DirectionTo(target5).SafeNormalize(Vector2.Zero);
					target5 = vector12;
					float num1033;
					for (float num49 = 0f; num49 < (float)num47; num49 = num1033 + 1f)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num50 = Dust.NewDust(vector12, this.width, this.height, 267, 0f, 0f, 0, newColor3, 1f);
							Dust dust33 = Main.dust[num50];
							Dust dust334 = dust33;
							dust334.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num50].noGravity = true;
							Main.dust[num50].scale = Main.rand.NextFloat() * 1f;
							Main.dust[num50].fadeIn = Main.rand.NextFloat() * 2f;
							dust33 = Main.dust[num50];
							dust334 = dust33;
							dust334.velocity += vector13 * 8f;
							dust33 = Main.dust[num50];
							dust334 = dust33;
							dust334.scale *= num48;
							if (num50 != 6000)
							{
								Dust dust34 = Dust.CloneDust(num50);
								dust33 = dust34;
								dust334 = dust33;
								dust334.scale /= 2f;
								dust33 = dust34;
								dust334 = dust33;
								dust334.fadeIn /= 2f;
								dust34.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust35 = Dust.NewDustDirect(vector12, this.width, this.height, 6, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
							Dust dust334;
							Dust dust36;
							if (Main.rand.Next(2) == 0)
							{
								dust35.noGravity = true;
								dust36 = dust35;
								dust334 = dust36;
								dust334.scale *= 2.5f;
							}
							dust36 = dust35;
							dust334 = dust36;
							dust334.velocity *= 2f;
							dust36 = dust35;
							dust334 = dust36;
							dust334.velocity += vector13 * 6f;
							dust36 = dust35;
							dust334 = dust36;
							dust334.scale *= num48;
							dust35.noLightEmittence = (dust35.noLight = true);
						}
						num1033 = num49;
					}
					num1032 = num46;
				}
				for (int num51 = 0; num51 < 20; num51 = num1032 + 1)
				{
					Dust dust37 = Dust.NewDustDirect(this.position, this.width, this.height, 6, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
					dust37.noGravity = true;
					dust37.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
					dust37.scale = 1.6f;
					dust37.fadeIn = 1.3f + Main.rand.NextFloat() * 1f;
					dust37.noLightEmittence = (dust37.noLight = true);
					Dust dust38 = dust37;
					Dust dust334 = dust38;
					dust334.velocity += this.velocity * 0.1f;
					dust37 = Dust.NewDustDirect(this.position, this.width, this.height, 6, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
					dust38 = dust37;
					dust334 = dust38;
					dust334.velocity *= 2f;
					dust37.noLightEmittence = (dust37.noLight = true);
					dust38 = dust37;
					dust334 = dust38;
					dust334.velocity += this.velocity * 0.1f;
					num1032 = num51;
				}
			}
			if (this.type == 873)
			{
				int num52 = 20;
				float num53 = 6.2831855f / (float)num52;
				float num54 = this.velocity.ToRotation();
				Color value6 = this.AI_171_GetColor();
				int num1032;
				for (int num55 = 0; num55 < num52; num55 = num1032 + 1)
				{
					Dust dust39 = Dust.NewDustPerfect(base.Center, 267, null, 0, default(Color), 1f);
					dust39.fadeIn = 1f;
					dust39.noGravity = true;
					dust39.alpha = 100;
					dust39.color = Color.Lerp(value6, Color.White, Main.rand.NextFloat() * 0.4f);
					if (num55 % 4 == 0)
					{
						dust39.velocity = num54.ToRotationVector2() * 3.2f;
						dust39.scale = 2.3f;
					}
					else if (num55 % 2 == 0)
					{
						dust39.velocity = num54.ToRotationVector2() * 1.8f;
						dust39.scale = 1.9f;
					}
					else
					{
						dust39.velocity = num54.ToRotationVector2();
						dust39.scale = 1.6f;
					}
					num54 += num53;
					Dust dust40 = dust39;
					Dust dust334 = dust40;
					dust334.velocity += this.velocity * Main.rand.NextFloat() * 0.5f;
					num1032 = num55;
				}
			}
			int num1034 = this.type;
			if (this.type == 1012)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num56 = 0; num56 < 40; num56 = num1032 + 1)
				{
					Vector2 vector14 = Vector2.UnitY.RotatedBy((double)((float)num56 * 6.2831855f), default(Vector2)) * (2f + Main.rand.NextFloat() * 0.5f);
					vector14 += this.velocity * Main.rand.NextFloat();
					Color white = Color.White;
					if (Main.rand.Next(3) == 0)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							white..ctor(226, 116, 56);
							break;
						case 1:
							white..ctor(243, 175, 93);
							break;
						case 2:
							white..ctor(254, 210, 146);
							break;
						default:
							white..ctor(176, 64, 36);
							break;
						}
						Dust dust41 = Dust.NewDustDirect(this.position + Main.rand.NextVector2Circular(18f, 18f) * this.scale, 2, 2, 284, vector14.X, vector14.Y, 0, white, Main.rand.NextFloat() * 1f + 1f);
						Dust dust42 = dust41;
						Dust dust334 = dust42;
						dust334.position -= this.velocity;
						dust41.fadeIn = 1f;
					}
					else
					{
						vector14 *= 0.3f;
						Dust dust43 = Dust.NewDustDirect(this.position + Main.rand.NextVector2Circular(18f, 18f) * this.scale, 2, 2, 138, vector14.X, vector14.Y, 0, default(Color), Main.rand.NextFloat() * 0.3f + 0.6f);
						Dust dust44 = dust43;
						Dust dust334 = dust44;
						dust334.position -= this.velocity;
					}
					num1032 = num56;
				}
			}
			if (this.type == 920)
			{
				int num1032;
				for (int num57 = 0; num57 < 6; num57 = num1032 + 1)
				{
					Vector2 vector15 = Vector2.UnitY.RotatedBy((double)((float)num57 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (2f + Main.rand.NextFloat() * 0.5f);
					int num58 = Dust.NewDust(this.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 4, 4, 4, vector15.X, vector15.Y, 80, new Color(78, 136, 255, 150), 1.5f);
					Main.dust[num58].noGravity = true;
					num1032 = num57;
				}
			}
			if (this.type == 921)
			{
				int num1032;
				for (int num59 = 0; num59 < 12; num59 = num1032 + 1)
				{
					Vector2 vector16 = Vector2.UnitY.RotatedBy((double)((float)num59 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (3f + Main.rand.NextFloat() * 0.5f);
					int num60 = Dust.NewDust(this.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 6, 6, 243, vector16.X, vector16.Y, 80, default(Color), 1.5f);
					Main.dust[num60].noGravity = true;
					num1032 = num59;
				}
			}
			if (this.type == 926)
			{
				int num1032;
				for (int num61 = 0; num61 < 22; num61 = num1032 + 1)
				{
					Vector2 vector17 = Vector2.UnitY.RotatedBy((double)((float)num61 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (3f + Main.rand.NextFloat() * 0.5f);
					int num62 = Dust.NewDust(this.position - new Vector2(8f, 8f), this.width + 16, this.height + 16, 31, vector17.X, vector17.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num62].noGravity = true;
					num1032 = num61;
				}
			}
			if (this.type == 937)
			{
				int num1032;
				for (int num63 = 0; num63 < 12; num63 = num1032 + 1)
				{
					Vector2 vector18 = Vector2.UnitY.RotatedBy((double)((float)num63 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (3f + Main.rand.NextFloat() * 0.5f);
					int num64 = Dust.NewDust(this.position - new Vector2(8f, 8f), this.width + 16, this.height + 16, 31, vector18.X, vector18.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num64].noGravity = true;
					num1032 = num63;
				}
			}
			if (this.type == 818)
			{
				for (float num65 = 0f; num65 < 1f; num65 += 0.34f)
				{
					Dust.NewDustPerfect(this.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num65 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (2f + Main.rand.NextFloat() * 0.5f)), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
				}
				for (float num66 = 0f; num66 < 1f; num66 += 0.34f)
				{
					Dust.NewDustPerfect(this.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num66 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (1f + Main.rand.NextFloat() * 0.5f)), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
				}
			}
			if (this.type == 856)
			{
				int num1032;
				for (int num67 = 0; num67 < 6; num67 = num1032 + 1)
				{
					Dust.NewDust(this.position, this.width, this.height, 58, 0f, 0f, 150, default(Color), 0.8f);
					num1032 = num67;
				}
				for (float num68 = 0f; num68 < 1f; num68 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num68 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (4f + Main.rand.NextFloat() * 2f)), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f), 1f).noGravity = true;
				}
				for (float num69 = 0f; num69 < 1f; num69 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num69 * 6.2831855f + Main.rand.NextFloat() * 6.2831855f * 0.5f), default(Vector2)) * (2f + Main.rand.NextFloat() * 1f)), 150, Color.Lerp(Color.White, Color.Orange, Main.rand.NextFloat() * 0.5f + 0.5f), 1f).noGravity = true;
				}
				Vector2 vector19;
				vector19..ctor((float)Main.screenWidth, (float)Main.screenHeight);
				if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector19 / 2f, vector19 + new Vector2(400f))))
				{
					for (int num70 = 0; num70 < 1; num70 = num1032 + 1)
					{
						Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							16
						}), 1f);
						num1032 = num70;
					}
				}
				ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.StellarTune, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center
				}, new int?(this.owner));
				this.position = base.Center;
				this.width = (this.height = 128);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
			}
			if (this.type == 818)
			{
				this.Damage();
			}
			if (this.type == 686)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballImpact, new Vector2?(base.Center));
			}
			else if (this.type == 711)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsysWrathImpact, new Vector2?(base.Center));
			}
			else if (this.type == 704)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
				if (activeSound != null)
				{
					activeSound.Volume = 0f;
					activeSound.Stop();
				}
			}
			if (this.type == 710)
			{
				this.ai[1] = -1f;
				this.position = base.Center;
				this.width = (this.height = 40);
				base.Center = this.position;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num71 = 0; num71 < 2; num71 = num1032 + 1)
				{
					int num72 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num72].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num71;
				}
				for (int num73 = 0; num73 < 10; num73 = num1032 + 1)
				{
					int num74 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num74].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num74].noGravity = true;
					Dust dust45 = Main.dust[num74];
					Dust dust334 = dust45;
					dust334.velocity *= 2f;
					num1032 = num73;
				}
				for (int num75 = 0; num75 < 5; num75 = num1032 + 1)
				{
					int num76 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num76].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num76].noGravity = true;
					Dust dust46 = Main.dust[num76];
					Dust dust334 = dust46;
					dust334.velocity *= 2f;
					num1032 = num75;
				}
			}
			else if (this.type == 711)
			{
				Rectangle hitbox = base.Hitbox;
				int num1032;
				for (int num77 = 0; num77 < this.oldPos.Length / 2; num77 += 2)
				{
					hitbox.X = (int)this.oldPos[num77].X;
					hitbox.Y = (int)this.oldPos[num77].Y;
					for (int num78 = 0; num78 < 2; num78 = num1032 + 1)
					{
						int num79 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							55,
							158
						});
						int num80 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num79, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num80].alpha = 200;
						Dust dust47 = Main.dust[num80];
						Dust dust334 = dust47;
						dust334.velocity *= 2.4f;
						dust47 = Main.dust[num80];
						dust334 = dust47;
						dust334.scale += Main.rand.NextFloat();
						dust47 = Main.dust[num80];
						dust334 = dust47;
						dust334.scale -= 0.5f;
						if (Main.dust[num80].type == 55)
						{
							Main.dust[num80].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num80].noLight = true;
						num1032 = num78;
					}
				}
				for (int num81 = 10; num81 < this.oldPos.Length; num81 += 2)
				{
					hitbox.X = (int)this.oldPos[num81].X;
					hitbox.Y = (int)this.oldPos[num81].Y;
					for (int num82 = 0; num82 < 2; num82 = num1032 + 1)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num83 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								55
							});
							int num84 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num83, (float)this.direction, -2.5f, 0, default(Color), 1f);
							Main.dust[num84].alpha = 120;
							Dust dust48 = Main.dust[num84];
							Dust dust334 = dust48;
							dust334.velocity *= 2.4f;
							dust48 = Main.dust[num84];
							dust334 = dust48;
							dust334.scale += Main.rand.NextFloat() * 0.7f;
							dust48 = Main.dust[num84];
							dust334 = dust48;
							dust334.scale -= 0.5f;
							if (Main.dust[num84].type == 55)
							{
								Main.dust[num84].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num84].noLight = true;
						}
						num1032 = num82;
					}
				}
				for (int num85 = 5; num85 < this.oldPos.Length; num85 = num1032 + 1)
				{
					hitbox.X = (int)this.oldPos[num85].X;
					hitbox.Y = (int)this.oldPos[num85].Y;
					for (int num86 = 0; num86 < 1; num86 = num1032 + 1)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num87 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								55
							});
							int num88 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num87, (float)this.direction, -2.5f, 0, default(Color), 1f);
							Main.dust[num88].alpha = 80;
							Dust dust49 = Main.dust[num88];
							Dust dust334 = dust49;
							dust334.velocity *= 0.3f;
							dust49 = Main.dust[num88];
							dust334 = dust49;
							dust334.velocity += this.velocity * 0.5f;
							dust49 = Main.dust[num88];
							dust334 = dust49;
							dust334.scale += Main.rand.NextFloat() * 0.7f;
							dust49 = Main.dust[num88];
							dust334 = dust49;
							dust334.scale -= 0.5f;
							if (Main.dust[num88].type == 55)
							{
								Main.dust[num88].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num88].noLight = true;
						}
						num1032 = num86;
					}
					num1032 = num85;
				}
				for (int num89 = 0; num89 < 20; num89 = num1032 + 1)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num90 = 228;
						Dust dust50 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num90, 0f, 0f, 0, default(Color), 1f)];
						dust50.noGravity = true;
						dust50.scale = 1.25f + Main.rand.NextFloat();
						dust50.fadeIn = 1.5f;
						Dust dust51 = dust50;
						Dust dust334 = dust51;
						dust334.velocity *= 6f;
						dust50.noLight = true;
					}
					num1032 = num89;
				}
				for (int num91 = 0; num91 < 20; num91 = num1032 + 1)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num92 = 55;
						Dust dust52 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num92, 0f, 0f, 0, default(Color), 1f)];
						dust52.noGravity = true;
						dust52.scale = 1.25f + Main.rand.NextFloat();
						dust52.fadeIn = 1.5f;
						Dust dust53 = dust52;
						Dust dust334 = dust53;
						dust334.velocity *= 6f;
						dust52.noLight = true;
						dust52.color = new Color(0, 0, 220, 128);
					}
					num1032 = num91;
				}
				if (this.owner == Main.myPlayer)
				{
					this.position = base.Center;
					base.Size = new Vector2(140f);
					base.Center = this.position;
					this.penetrate = -1;
					this.usesLocalNPCImmunity = true;
					this.localNPCHitCooldown = -1;
					this.Damage();
				}
			}
			else if (this.type == 662 || this.type == 685)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector20 = this.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector21 = this.position + vector20 * 16f;
				int num1032;
				for (int num93 = 0; num93 < 16; num93 = num1032 + 1)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector21 -= vector20 * 8f;
					}
					else
					{
						Dust dust54 = Dust.NewDustDirect(vector21, this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
						dust54.position = (dust54.position + base.Center) / 2f;
						Dust dust55 = dust54;
						Dust dust334 = dust55;
						dust334.velocity += this.oldVelocity * 0.4f;
						dust55 = dust54;
						dust334 = dust55;
						dust334.velocity *= 0.5f;
						dust54.noGravity = true;
						vector21 -= vector20 * 8f;
					}
					num1032 = num93;
				}
			}
			if (this.type == 680)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector22 = this.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector23 = this.position + vector22 * 16f;
				int num1032;
				for (int num94 = 0; num94 < 16; num94 = num1032 + 1)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector23 -= vector22 * 8f;
					}
					else
					{
						Dust dust56 = Dust.NewDustDirect(vector23, this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
						dust56.position = (dust56.position + base.Center) / 2f;
						Dust dust57 = dust56;
						Dust dust334 = dust57;
						dust334.velocity += this.oldVelocity * 0.4f;
						dust57 = dust56;
						dust334 = dust57;
						dust334.velocity *= 0.5f;
						dust56.noGravity = true;
						vector23 -= vector22 * 8f;
					}
					num1032 = num94;
				}
				Dust.NewDustDirect(this.position, this.width, this.height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
			}
			if (this.type == 664 || this.type == 666 || this.type == 668 || this.type == 706)
			{
				int num95 = 4;
				int num96 = 20;
				int num97 = 10;
				int num98 = 20;
				int num99 = 20;
				int num100 = 4;
				float num101 = 1.5f;
				int num102 = 6;
				int num103 = 6;
				if (Main.player[this.owner].setApprenticeT3)
				{
					num95 += 4;
					num99 += 10;
					num96 += 20;
					num98 += 30;
					num97 /= 2;
					num100 += 4;
					num101 += 0.5f;
					num102 += 7;
					num103 = 270;
				}
				this.position = base.Center;
				this.width = (this.height = 16 * num102);
				base.Center = this.position;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item100, new Vector2?(this.position), null);
				int num1032;
				for (int num104 = 0; num104 < num95; num104 = num1032 + 1)
				{
					int num105 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num105].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num104;
				}
				for (int num106 = 0; num106 < num96; num106 = num1032 + 1)
				{
					Dust dust58 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 2.5f);
					dust58.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 10f;
					Dust dust59 = dust58;
					Dust dust334 = dust59;
					dust334.velocity *= 16f;
					if (dust58.velocity.Y > -2f)
					{
						ref float ptr = ref dust58.velocity.Y;
						ptr *= -0.4f;
					}
					dust58.noLight = true;
					dust58.noGravity = true;
					num1032 = num106;
				}
				for (int num107 = 0; num107 < num98; num107 = num1032 + 1)
				{
					Dust dust60 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, num103, 0f, 0f, 100, default(Color), 1.5f);
					dust60.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Dust dust61 = dust60;
					Dust dust334 = dust61;
					dust334.velocity *= 2f;
					dust60.noGravity = true;
					dust60.fadeIn = num101;
					num1032 = num107;
				}
				for (int num108 = 0; num108 < num97; num108 = num1032 + 1)
				{
					int num109 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num109].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num109].noGravity = true;
					Dust dust62 = Main.dust[num109];
					Dust dust334 = dust62;
					dust334.velocity *= 3f;
					num1032 = num108;
				}
				for (int num110 = 0; num110 < num99; num110 = num1032 + 1)
				{
					int num111 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num111].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num111].noGravity = true;
					Dust dust63 = Main.dust[num111];
					Dust dust334 = dust63;
					dust334.velocity *= 3f;
					num1032 = num110;
				}
				for (int num112 = 0; num112 < num100; num112 = num1032 + 1)
				{
					int num113 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num113].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore3 = Main.gore[num113];
					Gore gore64 = gore3;
					gore64.position -= Vector2.One * 16f;
					float ptr;
					if (Main.rand.Next(2) == 0)
					{
						ptr = ref Main.gore[num113].position.Y;
						ptr -= 30f;
					}
					gore3 = Main.gore[num113];
					gore64 = gore3;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num113].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num113].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num112;
				}
			}
			else if (this.type == 681)
			{
				ref float ptr = ref this.position.X;
				ptr += (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr += (float)(this.height / 2);
				SoundEngine.PlaySound(SoundID.DD2_GoblinBomb, new Vector2?(this.position), null);
				this.width = 22;
				this.height = 22;
				ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num114 = 0; num114 < 10; num114 = num1032 + 1)
				{
					int num115 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust64 = Main.dust[num115];
					Dust dust334 = dust64;
					dust334.velocity *= 1.4f;
					num115 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust64 = Main.dust[num115];
					dust334 = dust64;
					dust334.velocity *= 1.4f;
					Main.dust[num115].noGravity = true;
					Main.dust[num115].fadeIn = 2f;
					num1032 = num114;
				}
				for (int num116 = 0; num116 < 10; num116 = num1032 + 1)
				{
					int num117 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num117].noGravity = true;
					Dust dust65 = Main.dust[num117];
					Dust dust334 = dust65;
					dust334.velocity *= 5f;
					num117 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust65 = Main.dust[num117];
					dust334 = dust65;
					dust334.velocity *= 3f;
					num1032 = num116;
				}
				int num118 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				Gore gore4 = Main.gore[num118];
				Gore gore64 = gore4;
				gore64.velocity *= 0.4f;
				ptr = ref Main.gore[num118].velocity.X;
				ptr += 1f;
				ptr = ref Main.gore[num118].velocity.Y;
				ptr += 1f;
				num118 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore4 = Main.gore[num118];
				gore64 = gore4;
				gore64.velocity *= 0.4f;
				ptr = ref Main.gore[num118].velocity.X;
				ptr -= 1f;
				ptr = ref Main.gore[num118].velocity.Y;
				ptr += 1f;
				num118 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore4 = Main.gore[num118];
				gore64 = gore4;
				gore64.velocity *= 0.4f;
				ptr = ref Main.gore[num118].velocity.X;
				ptr += 1f;
				ptr = ref Main.gore[num118].velocity.Y;
				ptr -= 1f;
				num118 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				gore4 = Main.gore[num118];
				gore64 = gore4;
				gore64.velocity *= 0.4f;
				ptr = ref Main.gore[num118].velocity.X;
				ptr -= 1f;
				ptr = ref Main.gore[num118].velocity.Y;
				ptr -= 1f;
				ptr = ref this.position.X;
				ptr += (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr += (float)(this.height / 2);
				this.width = 80;
				this.height = 80;
				ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				this.Damage();
			}
			if (this.type == 669)
			{
				SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector24;
				vector24..ctor(20f, 20f);
				int num1032;
				for (int num119 = 0; num119 < 10; num119 = num1032 + 1)
				{
					Dust dust66 = Dust.NewDustDirect(base.Center - vector24 / 2f, (int)vector24.X, (int)vector24.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
					Dust dust67 = dust66;
					Dust dust334 = dust67;
					dust334.velocity *= 1.4f;
					num1032 = num119;
				}
				for (int num120 = 0; num120 < 40; num120 = num1032 + 1)
				{
					Dust dust68 = Dust.NewDustDirect(base.Center - vector24 / 2f, (int)vector24.X, (int)vector24.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
					dust68.noGravity = true;
					Dust dust69 = dust68;
					Dust dust334 = dust69;
					dust334.velocity *= 4f;
					dust68 = Dust.NewDustDirect(base.Center - vector24 / 2f, (int)vector24.X, (int)vector24.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
					dust69 = dust68;
					dust334 = dust69;
					dust334.velocity *= 2f;
					num1032 = num120;
				}
			}
			if (Main.myPlayer == this.owner && this.bobber)
			{
				PopupText.ClearSonarText();
				if (this.localAI[2] >= 1f)
				{
					int customSonarText = (int)(this.localAI[2] - 1f);
					if (Main.popupText[customSonarText].sonar)
					{
						Main.popupText[customSonarText].active = false;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.AI_061_FishingBobber_GiveItemToPlayer(Main.player[this.owner], (int)this.ai[1]);
				}
				this.ai[1] = 0f;
			}
			if (this.type == 634 || this.type == 635)
			{
				int num121 = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					242,
					73,
					72,
					71,
					255
				});
				int num122 = 255;
				int num123 = 255;
				int num124 = 50;
				float num125 = 1.7f;
				float num126 = 0.8f;
				float num127 = 2f;
				Vector2 vector25 = (this.rotation - 1.5707964f).ToRotationVector2();
				Vector2 vector26 = vector25 * this.velocity.Length() * (float)this.MaxUpdates;
				if (this.type == 635)
				{
					num122 = 88;
					num123 = 88;
					num121 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						59,
						88
					});
					num125 = 3.7f;
					num126 = 1.5f;
					num127 = 2.2f;
					vector26 *= 0.5f;
				}
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				this.position = base.Center;
				this.width = (this.height = num124);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				int num1032;
				for (int num128 = 0; num128 < 40; num128 = num1032 + 1)
				{
					num121 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						242,
						73,
						72,
						71,
						255
					});
					if (this.type == 635)
					{
						num121 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							242,
							59,
							88
						});
					}
					int num129 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num121, 0f, 0f, 200, default(Color), num125);
					Main.dust[num129].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num129].noGravity = true;
					Dust dust70 = Main.dust[num129];
					Dust dust334 = dust70;
					dust334.velocity *= 3f;
					dust70 = Main.dust[num129];
					dust334 = dust70;
					dust334.velocity += vector26 * Main.rand.NextFloat();
					num129 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num122, 0f, 0f, 100, default(Color), num126);
					Main.dust[num129].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust70 = Main.dust[num129];
					dust334 = dust70;
					dust334.velocity *= 2f;
					Main.dust[num129].noGravity = true;
					Main.dust[num129].fadeIn = 1f;
					Main.dust[num129].color = Color.Crimson * 0.5f;
					dust70 = Main.dust[num129];
					dust334 = dust70;
					dust334.velocity += vector26 * Main.rand.NextFloat();
					num1032 = num128;
				}
				for (int num130 = 0; num130 < 20; num130 = num1032 + 1)
				{
					int num131 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num123, 0f, 0f, 0, default(Color), num127);
					Main.dust[num131].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 3f;
					Main.dust[num131].noGravity = true;
					Dust dust71 = Main.dust[num131];
					Dust dust334 = dust71;
					dust334.velocity *= 0.5f;
					dust71 = Main.dust[num131];
					dust334 = dust71;
					dust334.velocity += vector26 * (0.6f + 0.6f * Main.rand.NextFloat());
					num1032 = num130;
				}
			}
			else if (this.type == 651)
			{
				if (this.localAI[0] == 1f && this.owner == Main.myPlayer)
				{
					Player master = Main.player[this.owner];
					Point ps = new Vector2(this.ai[0], this.ai[1]).ToPoint();
					Point pe = base.Center.ToTileCoordinates();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(109, -1, -1, null, ps.X, (float)ps.Y, (float)pe.X, (float)pe.Y, (int)WiresUI.Settings.ToolMode, 0, 0);
					}
					else
					{
						Wiring.MassWireOperation(ps, pe, master);
					}
				}
			}
			else if (this.type == 641)
			{
				if (this.owner == Main.myPlayer)
				{
					int num1032;
					for (int num132 = 0; num132 < 1000; num132 = num1032 + 1)
					{
						if (Main.projectile[num132].active && Main.projectile[num132].owner == this.owner && Main.projectile[num132].type == 642)
						{
							Main.projectile[num132].Kill();
						}
						num1032 = num132;
					}
				}
			}
			else if (this.type == 643)
			{
				if (this.owner == Main.myPlayer)
				{
					int num1032;
					for (int num133 = 0; num133 < 1000; num133 = num1032 + 1)
					{
						if (Main.projectile[num133].active && Main.projectile[num133].owner == this.owner && Main.projectile[num133].type == 644)
						{
							Main.projectile[num133].Kill();
						}
						num1032 = num133;
					}
				}
			}
			else if (this.type == 645)
			{
				bool flag2 = WorldGen.SolidTile(Framing.GetTileSafely((int)this.position.X / 16, (int)this.position.Y / 16));
				int num1032;
				for (int num134 = 0; num134 < 4; num134 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num1032 = num134;
				}
				for (int num135 = 0; num135 < 4; num135 = num1032 + 1)
				{
					int num136 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num136].noGravity = true;
					Dust dust72 = Main.dust[num136];
					Dust dust334 = dust72;
					dust334.velocity *= 3f;
					if (flag2)
					{
						Main.dust[num136].noLight = true;
					}
					num136 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust72 = Main.dust[num136];
					dust334 = dust72;
					dust334.velocity *= 2f;
					Main.dust[num136].noGravity = true;
					if (flag2)
					{
						Main.dust[num136].noLight = true;
					}
					num1032 = num135;
				}
				for (int num137 = 0; num137 < 1; num137 = num1032 + 1)
				{
					int num138 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore5 = Main.gore[num138];
					Gore gore64 = gore5;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num138].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num138].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num137;
				}
			}
			else if (this.type == 636)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num139 = 0; num139 < 6; num139 += 3)
				{
					hitbox2.X = (int)this.oldPos[num139].X;
					hitbox2.Y = (int)this.oldPos[num139].Y;
					int num1032;
					for (int num140 = 0; num140 < 5; num140 = num1032 + 1)
					{
						int num141 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							259,
							158
						});
						int num142 = Dust.NewDust(hitbox2.TopLeft(), this.width, this.height, num141, 2.5f * (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num142].alpha = 200;
						Dust dust73 = Main.dust[num142];
						Dust dust334 = dust73;
						dust334.velocity *= 2.4f;
						dust73 = Main.dust[num142];
						dust334 = dust73;
						dust334.scale += Main.rand.NextFloat();
						num1032 = num140;
					}
				}
				if (Main.myPlayer == this.owner)
				{
					Projectile p = Main.projectile[Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 953, this.damage, 10f, this.owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f, 0f)];
					p.CritChance = 0;
				}
			}
			else if (this.type == 614)
			{
				int num1032;
				for (int num143 = 0; num143 < 10; num143 = num1032 + 1)
				{
					Dust dust74 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
					dust74.noGravity = true;
					Dust dust75 = dust74;
					Dust dust334 = dust75;
					dust334.velocity *= 3f;
					num1032 = num143;
				}
			}
			if (this.type == 644)
			{
				this.DoRainbowCrystalStaffExplosion();
				if (Main.myPlayer == this.owner)
				{
					this.friendly = true;
					int num144 = this.width;
					int num145 = this.height;
					int num146 = this.penetrate;
					this.position = base.Center;
					this.width = (this.height = 60);
					base.Center = this.position;
					this.penetrate = -1;
					this.maxPenetrate = -1;
					this.Damage();
					this.penetrate = num146;
					this.position = base.Center;
					this.width = num144;
					this.height = num145;
					base.Center = this.position;
				}
			}
			if (this.type == 608)
			{
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num147 = 0; num147 < 4; num147 = num1032 + 1)
				{
					int num148 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num148].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num147;
				}
				for (int num149 = 0; num149 < 30; num149 = num1032 + 1)
				{
					int num150 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num150].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num150].noGravity = true;
					Dust dust76 = Main.dust[num150];
					Dust dust334 = dust76;
					dust334.velocity *= 3f;
					Main.dust[num150].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num150 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num150].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust76 = Main.dust[num150];
					dust334 = dust76;
					dust334.velocity *= 2f;
					Main.dust[num150].noGravity = true;
					Main.dust[num150].fadeIn = 2.5f;
					Main.dust[num150].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num1032 = num149;
				}
				for (int num151 = 0; num151 < 10; num151 = num1032 + 1)
				{
					int num152 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num152].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num152].noGravity = true;
					Dust dust77 = Main.dust[num152];
					Dust dust334 = dust77;
					dust334.velocity *= 3f;
					Main.dust[num152].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
					num1032 = num151;
				}
				for (int num153 = 0; num153 < 10; num153 = num1032 + 1)
				{
					int num154 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num154].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num154].noGravity = true;
					Dust dust78 = Main.dust[num154];
					Dust dust334 = dust78;
					dust334.velocity *= 3f;
					num1032 = num153;
				}
				for (int num155 = 0; num155 < 2; num155 = num1032 + 1)
				{
					int num156 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num156].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore6 = Main.gore[num156];
					Gore gore64 = gore6;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num156].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num156].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num155;
				}
			}
			else if (this.type == 661)
			{
				this.position = base.Center;
				this.width = (this.height = 160);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				Vector2 vector27 = base.Center + Vector2.One * -20f;
				int num157 = 40;
				int num158 = num157;
				int num1032;
				for (int num159 = 0; num159 < 4; num159 = num1032 + 1)
				{
					int num160 = Dust.NewDust(vector27, num157, num158, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num160].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num157 / 2f;
					num1032 = num159;
				}
				for (int num161 = 0; num161 < 20; num161 = num1032 + 1)
				{
					int num162 = Dust.NewDust(vector27, num157, num158, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num162].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num157 / 2f;
					Main.dust[num162].noGravity = true;
					Main.dust[num162].noLight = true;
					Dust dust79 = Main.dust[num162];
					Dust dust334 = dust79;
					dust334.velocity *= 3f;
					dust79 = Main.dust[num162];
					dust334 = dust79;
					dust334.velocity += base.DirectionTo(Main.dust[num162].position) * (2f + Main.rand.NextFloat() * 4f);
					num162 = Dust.NewDust(vector27, num157, num158, 62, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num162].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num157 / 2f;
					dust79 = Main.dust[num162];
					dust334 = dust79;
					dust334.velocity *= 2f;
					Main.dust[num162].noGravity = true;
					Main.dust[num162].fadeIn = 1f;
					Main.dust[num162].color = Color.Crimson * 0.5f;
					Main.dust[num162].noLight = true;
					dust79 = Main.dust[num162];
					dust334 = dust79;
					dust334.velocity += base.DirectionTo(Main.dust[num162].position) * 8f;
					num1032 = num161;
				}
				for (int num163 = 0; num163 < 20; num163 = num1032 + 1)
				{
					int num164 = Dust.NewDust(vector27, num157, num158, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num164].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)num157 / 2f;
					Main.dust[num164].noGravity = true;
					Main.dust[num164].noLight = true;
					Dust dust80 = Main.dust[num164];
					Dust dust334 = dust80;
					dust334.velocity *= 3f;
					dust80 = Main.dust[num164];
					dust334 = dust80;
					dust334.velocity += base.DirectionTo(Main.dust[num164].position) * 2f;
					num1032 = num163;
				}
				for (int num165 = 0; num165 < 70; num165 = num1032 + 1)
				{
					int num166 = Dust.NewDust(vector27, num157, num158, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num166].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)num157 / 2f;
					Main.dust[num166].noGravity = true;
					Dust dust81 = Main.dust[num166];
					Dust dust334 = dust81;
					dust334.velocity *= 3f;
					dust81 = Main.dust[num166];
					dust334 = dust81;
					dust334.velocity += base.DirectionTo(Main.dust[num166].position) * 3f;
					num1032 = num165;
				}
			}
			else if (this.type == 617)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.maxPenetrate = -1;
				this.penetrate = -1;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num167 = 0; num167 < 4; num167 = num1032 + 1)
				{
					int num168 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num168].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num167;
				}
				for (int num169 = 0; num169 < 30; num169 = num1032 + 1)
				{
					int num170 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num170].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num170].noGravity = true;
					Dust dust82 = Main.dust[num170];
					Dust dust334 = dust82;
					dust334.velocity *= 3f;
					num170 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num170].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust82 = Main.dust[num170];
					dust334 = dust82;
					dust334.velocity *= 2f;
					Main.dust[num170].noGravity = true;
					Main.dust[num170].fadeIn = 1f;
					Main.dust[num170].color = Color.Crimson * 0.5f;
					num1032 = num169;
				}
				for (int num171 = 0; num171 < 10; num171 = num1032 + 1)
				{
					int num172 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num172].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num172].noGravity = true;
					Dust dust83 = Main.dust[num172];
					Dust dust334 = dust83;
					dust334.velocity *= 3f;
					num1032 = num171;
				}
				for (int num173 = 0; num173 < 10; num173 = num1032 + 1)
				{
					int num174 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num174].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num174].noGravity = true;
					Dust dust84 = Main.dust[num174];
					Dust dust334 = dust84;
					dust334.velocity *= 3f;
					num1032 = num173;
				}
				for (int num175 = 0; num175 < 2; num175 = num1032 + 1)
				{
					int num176 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num176].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore7 = Main.gore[num176];
					Gore gore64 = gore7;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num176].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num176].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num175;
				}
				if (Main.myPlayer == this.owner)
				{
					for (int num177 = 0; num177 < 1000; num177 = num1032 + 1)
					{
						if (Main.projectile[num177].active && Main.projectile[num177].type == 618 && Main.projectile[num177].ai[1] == (float)this.whoAmI)
						{
							Main.projectile[num177].Kill();
						}
						num1032 = num177;
					}
					int num178 = Main.rand.Next(5, 9);
					int num179 = Main.rand.Next(5, 9);
					int num180 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						86,
						90
					});
					int num181 = (num180 == 86) ? 90 : 86;
					for (int num182 = 0; num182 < num178; num182 = num1032 + 1)
					{
						Vector2 vector28 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector29;
						vector29..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector29.X == 0f && vector29.Y == 0f)
						{
							vector29..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector29.Normalize();
						if (vector29.Y > 0.2f)
						{
							ref float ptr = ref vector29.Y;
							ptr *= -1f;
						}
						vector29 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector28.X, vector28.Y, vector29.X, vector29.Y, 620, (int)((double)this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float)num180, 0f, 0f);
						num1032 = num182;
					}
					for (int num183 = 0; num183 < num179; num183 = num1032 + 1)
					{
						Vector2 vector30 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector31;
						vector31..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector31.X == 0f && vector31.Y == 0f)
						{
							vector31..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector31.Normalize();
						if (vector31.Y > 0.4f)
						{
							ref float ptr = ref vector31.Y;
							ptr *= -1f;
						}
						vector31 *= (float)Main.rand.Next(40, 81) * 0.1f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector30.X, vector30.Y, vector31.X, vector31.Y, 620, (int)((double)this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float)num181, 0f, 0f);
						num1032 = num183;
					}
				}
			}
			else if (this.type == 658)
			{
				int num1032;
				for (int num184 = 0; num184 < 10; num184 = num1032 + 1)
				{
					int num185 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 269, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust334;
					Dust dust85;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num185].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num185].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust85 = Main.dust[num185];
						dust334 = dust85;
						Dust dust335 = dust334;
						num1032 = dust334.type;
						dust335.type = num1032 + 1;
					}
					else
					{
						Main.dust[num185].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num185].noGravity = true;
					dust85 = Main.dust[num185];
					dust334 = dust85;
					dust334.velocity *= 1.25f;
					dust85 = Main.dust[num185];
					dust334 = dust85;
					dust334.velocity -= this.oldVelocity / 10f;
					num1032 = num184;
				}
			}
			else if (this.type == 620 || this.type == 618)
			{
				if (this.type == 618)
				{
					this.ai[0] = 86f;
				}
				int num1032;
				for (int num186 = 0; num186 < 10; num186 = num1032 + 1)
				{
					int num187 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int)this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust334;
					Dust dust86;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num187].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num187].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust86 = Main.dust[num187];
						dust334 = dust86;
						Dust dust336 = dust334;
						num1032 = dust334.type;
						dust336.type = num1032 + 1;
					}
					else
					{
						Main.dust[num187].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num187].noGravity = true;
					dust86 = Main.dust[num187];
					dust334 = dust86;
					dust334.velocity *= 1.25f;
					dust86 = Main.dust[num187];
					dust334 = dust86;
					dust334.velocity -= this.oldVelocity / 10f;
					num1032 = num186;
				}
			}
			else if (this.type == 619)
			{
				SoundEngine.PlaySound(SoundID.Item50, new Vector2?(this.position), null);
				int num1032;
				for (int num188 = 0; num188 < 20; num188 = num1032 + 1)
				{
					int num189 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int)this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust334;
					Dust dust87;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num189].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num189].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust87 = Main.dust[num189];
						dust334 = dust87;
						Dust dust337 = dust334;
						num1032 = dust334.type;
						dust337.type = num1032 + 1;
					}
					else
					{
						Main.dust[num189].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num189].noGravity = true;
					dust87 = Main.dust[num189];
					dust334 = dust87;
					dust334.velocity *= 2.5f;
					dust87 = Main.dust[num189];
					dust334 = dust87;
					dust334.velocity -= this.oldVelocity / 10f;
					num1032 = num188;
				}
				if (Main.myPlayer == this.owner)
				{
					int num190 = Main.rand.Next(3, 6);
					for (int num191 = 0; num191 < num190; num191 = num1032 + 1)
					{
						Vector2 vector32;
						vector32..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector32.X == 0f && vector32.Y == 0f)
						{
							vector32..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector32.Normalize();
						vector32 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.oldPosition.X + (float)(this.width / 2), this.oldPosition.Y + (float)(this.height / 2), vector32.X, vector32.Y, 620, (int)((double)this.damage * 0.8), this.knockBack * 0.8f, this.owner, this.ai[0], 0f, 0f);
						num1032 = num191;
					}
				}
			}
			if (this.type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
				Color color = portalColor;
				color.A = byte.MaxValue;
				int num1032;
				for (int num192 = 0; num192 < 6; num192 = num1032 + 1)
				{
					Vector2 vector33 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
					Dust dust88 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263, 0f, 0f, 0, default(Color), 1f)];
					dust88.position = base.Center;
					dust88.velocity = vector33 + this.velocity / 5f;
					dust88.color = color;
					dust88.scale = 2f;
					dust88.noLight = true;
					dust88.noGravity = true;
					num1032 = num192;
				}
			}
			if (this.type == 596)
			{
				this.position = base.Center;
				this.width = (this.height = 60);
				base.Center = this.position;
				int num193 = 30;
				if (Main.expertMode)
				{
					num193 = 22;
				}
				this.damage = num193;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num194 = 0; num194 < 4; num194 = num1032 + 1)
				{
					int num195 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num195].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num194;
				}
				for (int num196 = 0; num196 < 20; num196 = num1032 + 1)
				{
					int num197 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num197].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num197].noGravity = true;
					Dust dust89 = Main.dust[num197];
					Dust dust334 = dust89;
					dust334.velocity *= 2f;
					num1032 = num196;
				}
				for (int num198 = 0; num198 < 10; num198 = num1032 + 1)
				{
					int num199 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num199].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num199].noGravity = true;
					Dust dust90 = Main.dust[num199];
					Dust dust334 = dust90;
					dust334.velocity *= 2f;
					num1032 = num198;
				}
			}
			if (this.type == 659)
			{
				if (this.ai[0] >= 0f)
				{
					int num200 = 80;
					this.position = base.Center;
					this.width = (this.height = num200);
					base.Center = this.position;
					this.Damage();
					SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					int num201 = 15;
					int num202 = num201 + 15;
					int num1032;
					for (int num203 = 0; num203 < num202; num203 = num1032 + 1)
					{
						int num204 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2f + Main.rand.NextFloat() * 0.5f);
						Main.dust[num204].noGravity = true;
						if (num203 < num201)
						{
							float num205 = (float)(num203 + 1) / (float)num201 * 6.2831855f;
							Main.dust[num204].fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
							Main.dust[num204].position = base.Center;
							Main.dust[num204].velocity = Vector2.UnitY.RotatedBy((double)num205, default(Vector2)) * (5f + Main.rand.NextFloat() * 1.5f);
						}
						else
						{
							Main.dust[num204].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * Main.rand.NextFloat() * (float)this.width / 3f;
							Main.dust[num204].fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
							Dust dust91 = Main.dust[num204];
							Dust dust334 = dust91;
							dust334.velocity *= 2f;
						}
						num1032 = num203;
					}
					for (int num206 = 0; num206 < 10; num206 = num1032 + 1)
					{
						int num207 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num207].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 3f;
						Main.dust[num207].fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
						Main.dust[num207].noGravity = true;
						Dust dust92 = Main.dust[num207];
						Dust dust334 = dust92;
						dust334.velocity *= 1.5f;
						num1032 = num206;
					}
				}
			}
			else if (this.type >= 625 && this.type <= 628)
			{
				int num1032;
				for (int num208 = 0; num208 < 6; num208 = num1032 + 1)
				{
					int num209 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num209].noGravity = true;
					Main.dust[num209].noLight = true;
					num1032 = num208;
				}
			}
			if (this.type == 631)
			{
				int num210 = Main.rand.Next(5, 10);
				int num1032;
				for (int num211 = 0; num211 < num210; num211 = num1032 + 1)
				{
					int num212 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
					Dust dust93 = Main.dust[num212];
					Dust dust334 = dust93;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num212].velocity.Y;
					ptr -= 1f;
					dust93 = Main.dust[num212];
					dust334 = dust93;
					dust334.position -= Vector2.One * 4f;
					Main.dust[num212].position = Vector2.Lerp(Main.dust[num212].position, base.Center, 0.5f);
					Main.dust[num212].noGravity = true;
					num1032 = num211;
				}
			}
			if (this.type == 539)
			{
				this.position = base.Center;
				this.width = (this.height = 80);
				base.Center = this.position;
				this.Damage();
				SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 7, 1f, 0f);
				int num1032;
				for (int num213 = 0; num213 < 4; num213 = num1032 + 1)
				{
					int num214 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num214].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num213;
				}
				for (int num215 = 0; num215 < 20; num215 = num1032 + 1)
				{
					int num216 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 176, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num216].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num216].noGravity = true;
					Dust dust94 = Main.dust[num216];
					Dust dust334 = dust94;
					dust334.velocity *= 3f;
					num1032 = num215;
				}
				for (int num217 = 0; num217 < 20; num217 = num1032 + 1)
				{
					int num218 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 180, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num218].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num218].noGravity = true;
					Dust dust95 = Main.dust[num218];
					Dust dust334 = dust95;
					dust334.velocity *= 3f;
					num1032 = num217;
				}
				for (int num219 = 0; num219 < 10; num219 = num1032 + 1)
				{
					int num220 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num220].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num220].noGravity = true;
					Dust dust96 = Main.dust[num220];
					Dust dust334 = dust96;
					dust334.velocity *= 3f;
					num1032 = num219;
				}
			}
			else if (this.type == 585)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num1032;
				for (int num221 = 0; num221 < 20; num221 = num1032 + 1)
				{
					int num222 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num222].noGravity = true;
					Dust dust97 = Main.dust[num222];
					Dust dust334 = dust97;
					dust334.velocity *= 1.2f;
					Main.dust[num222].scale = 1.3f;
					dust97 = Main.dust[num222];
					dust334 = dust97;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num222 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num222].noGravity = true;
					dust97 = Main.dust[num222];
					dust334 = dust97;
					dust334.velocity *= 3f;
					num1032 = num221;
				}
			}
			else if (this.type == 590)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				int num223 = 165;
				if (this.ai[2] == 1f)
				{
					num223 = 31;
				}
				int num1032;
				for (int num224 = 0; num224 < 10; num224 = num1032 + 1)
				{
					int num225 = Dust.NewDust(this.position, this.width, this.height, num223, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust98 = Main.dust[num225];
					Dust dust334 = dust98;
					dust334.velocity *= 2f;
					Main.dust[num225].noGravity = true;
					num1032 = num224;
				}
				float num226 = 0.6f + Main.rand.NextFloat() * 0.4f;
				int num227 = 375;
				if (this.ai[2] == 1f)
				{
					num227 = 61;
				}
				int num228 = Gore.NewGore(this.position, Vector2.Zero, num227, num226);
				Gore gore8 = Main.gore[num228];
				Gore gore64 = gore8;
				gore64.velocity *= 0.3f;
				num228 = Gore.NewGore(this.position, Vector2.Zero, num227 + 1, num226);
				gore8 = Main.gore[num228];
				gore64 = gore8;
				gore64.velocity *= 0.3f;
				num228 = Gore.NewGore(this.position, Vector2.Zero, num227 + 2, num226);
				gore8 = Main.gore[num228];
				gore64 = gore8;
				gore64.velocity *= 0.3f;
			}
			else if (this.type == 587)
			{
				Color newColor4 = Main.hslToRgb(this.ai[1], 1f, 0.5f, byte.MaxValue);
				newColor4.A = 200;
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num229 = 0; num229 < 10; num229 = num1032 + 1)
				{
					int num230 = Dust.NewDust(this.position, this.width, this.height, 76, 0f, 0f, 0, newColor4, 1f);
					Main.dust[num230].noGravity = true;
					Dust dust99 = Main.dust[num230];
					Dust dust334 = dust99;
					dust334.velocity *= 1.2f;
					Main.dust[num230].scale = 0.9f;
					dust99 = Main.dust[num230];
					dust334 = dust99;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num230 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, 0f, 0f, 0, newColor4, 1.1f);
					Main.dust[num230].noGravity = true;
					dust99 = Main.dust[num230];
					dust334 = dust99;
					dust334.velocity *= 2f;
					num1032 = num229;
				}
			}
			else if (this.type == 572)
			{
				int num1032;
				for (int num231 = 0; num231 < 15; num231 = num1032 + 1)
				{
					int num232 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 1f);
					Dust dust100 = Main.dust[num232];
					Dust dust334 = dust100;
					dust334.velocity *= 3f;
					Main.dust[num232].noGravity = true;
					Main.dust[num232].scale = 1.25f;
					Main.dust[num232].position = (base.Center + this.position) / 2f;
					num1032 = num231;
				}
			}
			else if (this.type == 581)
			{
				int num1032;
				for (int num233 = 0; num233 < 30; num233 = num1032 + 1)
				{
					int num234 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						229,
						161
					});
					Dust dust101 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num234, 0f, 0f, 0, default(Color), 1f)];
					dust101.noGravity = true;
					dust101.scale = 1.25f + Main.rand.NextFloat();
					dust101.fadeIn = 0.25f;
					Dust dust102 = dust101;
					Dust dust334 = dust102;
					dust334.velocity *= 2f;
					dust101.noLight = true;
					num1032 = num233;
				}
			}
			else if (this.type == 671)
			{
				int num1032;
				for (int num235 = 0; num235 < 30; num235 = num1032 + 1)
				{
					int num236 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						27,
						62
					});
					Dust dust103 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num236, 0f, 0f, 0, default(Color), 1f)];
					dust103.noGravity = true;
					dust103.scale = 1.25f + Main.rand.NextFloat();
					dust103.fadeIn = 0.25f;
					Dust dust104 = dust103;
					Dust dust334 = dust104;
					dust334.velocity *= 2f;
					dust103.noLight = true;
					num1032 = num235;
				}
			}
			else if (this.type == 811 || this.type == 814)
			{
				int num1032;
				for (int num237 = 0; num237 < 30; num237 = num1032 + 1)
				{
					Dust dust105 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 0, default(Color), 1f)];
					dust105.scale = 1.25f + Main.rand.NextFloat();
					Dust dust106 = dust105;
					Dust dust334 = dust106;
					dust334.velocity *= 2f;
					num1032 = num237;
				}
			}
			else if (this.type == 819)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num238 = 0; num238 < 20; num238 = num1032 + 1)
				{
					Dust dust107 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 0, default(Color), 1f)];
					dust107.scale = 1f + Main.rand.NextFloat() * 0.5f;
					Dust dust108 = dust107;
					Dust dust334 = dust108;
					dust334.velocity *= 1.5f;
					num1032 = num238;
				}
			}
			else if (this.type == 675)
			{
				int num1032;
				for (int num239 = 0; num239 < 40; num239 = num1032 + 1)
				{
					int num240 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						242,
						73,
						72,
						71,
						255,
						255,
						255
					});
					Dust dust109 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num240, 0f, 0f, 0, default(Color), 1f)];
					dust109.noGravity = true;
					dust109.scale = 1.25f + Main.rand.NextFloat();
					dust109.fadeIn = 0.25f;
					Dust dust110 = dust109;
					Dust dust334 = dust110;
					dust334.velocity *= 3f;
					dust109.noLight = true;
					num1032 = num239;
				}
			}
			else if (this.type == 676)
			{
				int num1032;
				for (int num241 = 0; num241 < 120; num241 = num1032 + 1)
				{
					int num242 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						4,
						256
					});
					Dust dust111 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num242, 0f, 0f, 100, default(Color), 1f)];
					dust111.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust111.fadeIn = 0.5f;
					Dust dust112 = dust111;
					Dust dust334 = dust112;
					dust334.velocity *= 4.5f;
					dust111.noLight = true;
					if (dust111.velocity.Y > 0f)
					{
						dust112 = dust111;
						dust334 = dust112;
						dust334.velocity *= -0.5f;
					}
					if (dust111.type == 4)
					{
						dust111.color = new Color(80, 170, 40, 120);
					}
					num1032 = num241;
				}
				for (int num243 = 0; num243 < 10; num243 = num1032 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1024, 1f);
					num1032 = num243;
				}
				for (int num244 = 0; num244 < 10; num244 = num1032 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1025, 1f);
					num1032 = num244;
				}
				for (int num245 = 0; num245 < 10; num245 = num1032 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1026, 1f);
					num1032 = num245;
				}
				for (int num246 = 0; num246 < 20; num246 = num1032 + 1)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 2f), 1026, 1f);
					num1032 = num246;
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 300f && !player.creativeGodMode)
					{
						player.AddBuff(197, 900, false, false);
					}
				}
			}
			else if (this.type == 686)
			{
				Rectangle hitbox3 = base.Hitbox;
				int num1032;
				for (int num247 = 0; num247 < this.oldPos.Length / 2; num247 += 2)
				{
					hitbox3.X = (int)this.oldPos[num247].X;
					hitbox3.Y = (int)this.oldPos[num247].Y;
					for (int num248 = 0; num248 < 3; num248 = num1032 + 1)
					{
						int num249 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							55,
							158
						});
						int num250 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num249, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num250].alpha = 200;
						Dust dust113 = Main.dust[num250];
						Dust dust334 = dust113;
						dust334.velocity *= 2.4f;
						dust113 = Main.dust[num250];
						dust334 = dust113;
						dust334.scale += Main.rand.NextFloat();
						dust113 = Main.dust[num250];
						dust334 = dust113;
						dust334.scale -= 0.5f;
						if (Main.dust[num250].type == 55)
						{
							Main.dust[num250].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num250].noLight = true;
						num1032 = num248;
					}
				}
				for (int num251 = 10; num251 < this.oldPos.Length; num251 += 2)
				{
					hitbox3.X = (int)this.oldPos[num251].X;
					hitbox3.Y = (int)this.oldPos[num251].Y;
					for (int num252 = 0; num252 < 2; num252 = num1032 + 1)
					{
						int num253 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							55
						});
						int num254 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num253, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num254].alpha = 120;
						Dust dust114 = Main.dust[num254];
						Dust dust334 = dust114;
						dust334.velocity *= 2.4f;
						dust114 = Main.dust[num254];
						dust334 = dust114;
						dust334.scale += Main.rand.NextFloat() * 0.7f;
						dust114 = Main.dust[num254];
						dust334 = dust114;
						dust334.scale -= 0.5f;
						if (Main.dust[num254].type == 55)
						{
							Main.dust[num254].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num254].noLight = true;
						num1032 = num252;
					}
				}
				for (int num255 = 5; num255 < this.oldPos.Length; num255 = num1032 + 1)
				{
					hitbox3.X = (int)this.oldPos[num255].X;
					hitbox3.Y = (int)this.oldPos[num255].Y;
					for (int num256 = 0; num256 < 1; num256 = num1032 + 1)
					{
						int num257 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							55
						});
						int num258 = Dust.NewDust(hitbox3.TopLeft(), this.width, this.height, num257, (float)this.direction, -2.5f, 0, default(Color), 1f);
						Main.dust[num258].alpha = 80;
						Dust dust115 = Main.dust[num258];
						Dust dust334 = dust115;
						dust334.velocity *= 0.3f;
						dust115 = Main.dust[num258];
						dust334 = dust115;
						dust334.velocity += this.velocity * 0.5f;
						dust115 = Main.dust[num258];
						dust334 = dust115;
						dust334.scale += Main.rand.NextFloat() * 0.7f;
						dust115 = Main.dust[num258];
						dust334 = dust115;
						dust334.scale -= 0.5f;
						if (Main.dust[num258].type == 55)
						{
							Main.dust[num258].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num258].noLight = true;
						num1032 = num256;
					}
					num1032 = num255;
				}
				for (int num259 = 0; num259 < 30; num259 = num1032 + 1)
				{
					int num260 = 228;
					Dust dust116 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num260, 0f, 0f, 0, default(Color), 1f)];
					dust116.noGravity = true;
					dust116.scale = 1.25f + Main.rand.NextFloat();
					dust116.fadeIn = 1.5f;
					Dust dust117 = dust116;
					Dust dust334 = dust117;
					dust334.velocity *= 6f;
					dust116.noLight = true;
					num1032 = num259;
				}
			}
			if (this.type == 405)
			{
				SoundEngine.PlaySound(SoundID.Item54, new Vector2?(this.position), null);
				Vector2 center4 = base.Center;
				int num1032;
				for (int num261 = 0; num261 < 20; num261 = num1032 + 1)
				{
					int num262 = 10;
					int num263 = Dust.NewDust(base.Center - Vector2.One * (float)num262, num262 * 2, num262 * 2, 212, 0f, 0f, 0, default(Color), 1f);
					Dust dust118 = Main.dust[num263];
					Vector2 vector34 = Vector2.Normalize(dust118.position - base.Center);
					dust118.position = base.Center + vector34 * (float)num262 * this.scale;
					if (num261 < 30)
					{
						dust118.velocity = vector34 * dust118.velocity.Length();
					}
					else
					{
						dust118.velocity = vector34 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust118.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f, byte.MaxValue);
					dust118.color = Color.Lerp(dust118.color, Color.White, 0.3f);
					dust118.noGravity = true;
					dust118.scale = 0.7f;
					num1032 = num261;
				}
			}
			if (this.type == 501)
			{
				SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num264 = 20;
				ref float ptr = ref this.position.X;
				ptr -= (float)num264;
				ptr = ref this.position.Y;
				ptr -= (float)num264;
				this.width += num264 * 2;
				this.height += num264 * 2;
				num264 += 20;
				int num1032;
				for (int num265 = 0; num265 < 20; num265 = num1032 + 1)
				{
					int num266 = Dust.NewDust(this.position, this.width, this.height, 188, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust119 = Main.dust[num266];
					Dust dust334 = dust119;
					dust334.velocity *= 0.5f;
					num1032 = num265;
				}
				for (int num267 = 0; num267 < 5; num267 = num1032 + 1)
				{
					int num268 = Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), default(Vector2), Main.rand.Next(435, 438), 1f);
					Gore gore9 = Main.gore[num268];
					Gore gore64 = gore9;
					gore64.velocity *= 0.5f;
					switch (num267)
					{
					case 0:
						ptr = ref Main.gore[num268].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num268].velocity.Y;
						ptr += 1f;
						break;
					case 1:
						ptr = ref Main.gore[num268].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num268].velocity.Y;
						ptr += 1f;
						break;
					case 2:
						ptr = ref Main.gore[num268].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num268].velocity.Y;
						ptr -= 1f;
						break;
					default:
						ptr = ref Main.gore[num268].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num268].velocity.Y;
						ptr -= 1f;
						break;
					}
					gore9 = Main.gore[num268];
					gore64 = gore9;
					gore64.velocity *= 0.5f;
					num1032 = num267;
				}
				ptr = ref this.position.X;
				ptr -= (float)num264;
				ptr = ref this.position.Y;
				ptr -= (float)num264;
				this.width += num264 * 2;
				this.height += num264 * 2;
				this.Damage();
			}
			if (this.type == 410)
			{
				SoundEngine.PlaySound(SoundID.Item54, new Vector2?(this.position), null);
				Vector2 center5 = base.Center;
				int num1032;
				for (int num269 = 0; num269 < 10; num269 = num1032 + 1)
				{
					int num270 = (int)(10f * this.ai[1]);
					int num271 = Dust.NewDust(base.Center - Vector2.One * (float)num270, num270 * 2, num270 * 2, 212, 0f, 0f, 0, default(Color), 1f);
					Dust dust120 = Main.dust[num271];
					Vector2 vector35 = Vector2.Normalize(dust120.position - base.Center);
					dust120.position = base.Center + vector35 * (float)num270 * this.scale;
					if (num269 < 30)
					{
						dust120.velocity = vector35 * dust120.velocity.Length();
					}
					else
					{
						dust120.velocity = vector35 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust120.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f, byte.MaxValue);
					dust120.color = Color.Lerp(dust120.color, Color.White, 0.3f);
					dust120.noGravity = true;
					dust120.scale = 0.7f;
					num1032 = num269;
				}
			}
			if (this.type == 629 && Main.netMode != 1)
			{
				int num1032 = Main.npc[(int)this.ai[0]].type;
				if (num1032 <= 493)
				{
					if (num1032 != 422)
					{
						if (num1032 == 493)
						{
							if (NPC.ShieldStrengthTowerStardust != 0)
							{
								Main.npc[(int)this.ai[0]].ai[3] = 1f;
							}
							NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerStardust - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
						}
					}
					else
					{
						if (NPC.ShieldStrengthTowerVortex != 0)
						{
							Main.npc[(int)this.ai[0]].ai[3] = 1f;
						}
						NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerVortex - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
					}
				}
				else if (num1032 != 507)
				{
					if (num1032 == 517)
					{
						if (NPC.ShieldStrengthTowerSolar != 0)
						{
							Main.npc[(int)this.ai[0]].ai[3] = 1f;
						}
						NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerSolar - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
					}
				}
				else
				{
					if (NPC.ShieldStrengthTowerNebula != 0)
					{
						Main.npc[(int)this.ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerNebula - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
				}
				Main.npc[(int)this.ai[0]].netUpdate = true;
				NetMessage.SendData(101, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			if (this.aiStyle == 105 && this.owner == Main.myPlayer && this.ai[1] == 0f)
			{
				Vector2 vector36;
				vector36..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
				vector36.Normalize();
				vector36 *= 0.3f;
				Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector36.X, vector36.Y, Main.rand.Next(569, 572), this.damage, 0f, this.owner, 0f, 0f, 0f);
			}
			if (this.type == 452)
			{
				SoundEngine.PlaySound(29, (int)this.position.X, (int)this.position.Y, 103, 1f, 0f);
				this.position = base.Center;
				this.width = (this.height = 144);
				ref float ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num272 = 0; num272 < 4; num272 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num1032 = num272;
				}
				for (int num273 = 0; num273 < 40; num273 = num1032 + 1)
				{
					int num274 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num274].noGravity = true;
					Dust dust121 = Main.dust[num274];
					Dust dust334 = dust121;
					dust334.velocity *= 3f;
					num274 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust121 = Main.dust[num274];
					dust334 = dust121;
					dust334.velocity *= 2f;
					Main.dust[num274].noGravity = true;
					num1032 = num273;
				}
				for (int num275 = 0; num275 < 1; num275 = num1032 + 1)
				{
					int num276 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore10 = Main.gore[num276];
					Gore gore64 = gore10;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num276].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num276].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num275;
				}
				this.Damage();
			}
			if (this.type == 454)
			{
				SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
				this.position = base.Center;
				this.width = (this.height = 208);
				ref float ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num277 = 0; num277 < 7; num277 = num1032 + 1)
				{
					int num278 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num278].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					num1032 = num277;
				}
				for (int num279 = 0; num279 < 60; num279 = num1032 + 1)
				{
					int num280 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num280].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num280].noGravity = true;
					Dust dust122 = Main.dust[num280];
					Dust dust334 = dust122;
					dust334.velocity *= 1f;
					num280 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num280].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					dust122 = Main.dust[num280];
					dust334 = dust122;
					dust334.velocity *= 1f;
					Main.dust[num280].noGravity = true;
					num1032 = num279;
				}
				for (int num281 = 0; num281 < 3; num281 = num1032 + 1)
				{
					int num282 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore11 = Main.gore[num282];
					Gore gore64 = gore11;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num282].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num282].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num281;
				}
				this.Damage();
			}
			if (this.type == 467)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num283 = 0; num283 < 4; num283 = num1032 + 1)
				{
					int num284 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num284].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num283;
				}
				for (int num285 = 0; num285 < 30; num285 = num1032 + 1)
				{
					int num286 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num286].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num286].noGravity = true;
					Dust dust123 = Main.dust[num286];
					Dust dust334 = dust123;
					dust334.velocity *= 3f;
					num286 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num286].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust123 = Main.dust[num286];
					dust334 = dust123;
					dust334.velocity *= 2f;
					Main.dust[num286].noGravity = true;
					Main.dust[num286].fadeIn = 2.5f;
					num1032 = num285;
				}
				for (int num287 = 0; num287 < 10; num287 = num1032 + 1)
				{
					int num288 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num288].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num288].noGravity = true;
					Dust dust124 = Main.dust[num288];
					Dust dust334 = dust124;
					dust334.velocity *= 3f;
					num1032 = num287;
				}
				for (int num289 = 0; num289 < 10; num289 = num1032 + 1)
				{
					int num290 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num290].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num290].noGravity = true;
					Dust dust125 = Main.dust[num290];
					Dust dust334 = dust125;
					dust334.velocity *= 3f;
					num1032 = num289;
				}
				for (int num291 = 0; num291 < 2; num291 = num1032 + 1)
				{
					int num292 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num292].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore12 = Main.gore[num292];
					Gore gore64 = gore12;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num292].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num292].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num291;
				}
			}
			if (this.type == 468)
			{
				this.position = base.Center;
				this.width = (this.height = 176);
				base.Center = this.position;
				this.Damage();
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				for (int num293 = 0; num293 < 4; num293 = num1032 + 1)
				{
					int num294 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num294].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					num1032 = num293;
				}
				for (int num295 = 0; num295 < 20; num295 = num1032 + 1)
				{
					int num296 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num296].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Main.dust[num296].noGravity = true;
					Dust dust126 = Main.dust[num296];
					Dust dust334 = dust126;
					dust334.velocity *= 3f;
					num296 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num296].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					dust126 = Main.dust[num296];
					dust334 = dust126;
					dust334.velocity *= 2f;
					Main.dust[num296].noGravity = true;
					Main.dust[num296].fadeIn = 2.5f;
					num1032 = num295;
				}
				for (int num297 = 0; num297 < 10; num297 = num1032 + 1)
				{
					int num298 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num298].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num298].noGravity = true;
					Dust dust127 = Main.dust[num298];
					Dust dust334 = dust127;
					dust334.velocity *= 3f;
					num1032 = num297;
				}
				for (int num299 = 0; num299 < 10; num299 = num1032 + 1)
				{
					int num300 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num300].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
					Main.dust[num300].noGravity = true;
					Dust dust128 = Main.dust[num300];
					Dust dust334 = dust128;
					dust334.velocity *= 3f;
					num1032 = num299;
				}
				for (int num301 = 0; num301 < 2; num301 = num1032 + 1)
				{
					int num302 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num302].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					Gore gore13 = Main.gore[num302];
					Gore gore64 = gore13;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num302].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num302].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num301;
				}
			}
			if (this.type == 485)
			{
				int num1032;
				for (int num303 = 0; num303 < 15; num303 = num1032 + 1)
				{
					int num304 = Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num304].noGravity = true;
					Dust dust129 = Main.dust[num304];
					Dust dust334 = dust129;
					dust334.velocity -= this.oldVelocity * (float)Main.rand.Next(20, 60) * 0.01f;
					num1032 = num303;
				}
			}
			else if (this.type == 484)
			{
				int num1032;
				for (int num305 = 0; num305 < 5; num305 = num1032 + 1)
				{
					int num306 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num306].noGravity = true;
					Dust dust130 = Main.dust[num306];
					Dust dust334 = dust130;
					dust334.velocity -= this.oldVelocity / 5f;
					Main.dust[num306].scale = 0.85f;
					num1032 = num305;
				}
			}
			else if (this.type == 483)
			{
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				int num1032;
				if (this.owner == Main.myPlayer)
				{
					int num307 = Main.rand.Next(4, 8);
					int[] array = new int[num307];
					int num308 = 0;
					for (int num309 = 0; num309 < 200; num309 = num1032 + 1)
					{
						if (Main.npc[num309].CanBeChasedBy(this, true))
						{
							float num310 = base.Distance(Main.npc[num309].Center);
							if (num310 <= 2000f && Collision.CanHitLine(this.position, this.width, this.height, Main.npc[num309].position, Main.npc[num309].width, Main.npc[num309].height))
							{
								array[num308] = num309;
								num1032 = num308;
								num308 = num1032 + 1;
								if (num308 == num307)
								{
									break;
								}
							}
						}
						num1032 = num309;
					}
					if (num308 > 1)
					{
						for (int num311 = 0; num311 < 100; num311 = num1032 + 1)
						{
							int num312 = Main.rand.Next(num308);
							int num313;
							for (num313 = num312; num313 == num312; num313 = Main.rand.Next(num308))
							{
							}
							int num314 = array[num312];
							array[num312] = array[num313];
							array[num313] = num314;
							num1032 = num311;
						}
					}
					Vector2 vector37;
					vector37..ctor(-1f, -1f);
					for (int num315 = 0; num315 < num308; num315 = num1032 + 1)
					{
						Vector2 vector38 = Main.npc[array[num315]].Center - base.Center;
						vector38.Normalize();
						vector37 += vector38;
						num1032 = num315;
					}
					vector37.Normalize();
					for (int num316 = 0; num316 < num307; num316 = num1032 + 1)
					{
						float num317 = (float)Main.rand.Next(8, 15);
						Vector2 vector39;
						vector39..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						vector39.Normalize();
						if (num308 > 0)
						{
							vector39 += vector37;
							vector39.Normalize();
						}
						vector39 *= num317;
						if (num308 > 0)
						{
							num1032 = num308;
							num308 = num1032 - 1;
							vector39 = Main.npc[array[num308]].Center - base.Center;
							vector39.Normalize();
							vector39 *= num317;
						}
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector39.X, vector39.Y, 484, (int)((double)this.damage * 0.7), this.knockBack * 0.7f, this.owner, 0f, 0f, 0f);
						num1032 = num316;
					}
				}
				for (int num318 = 0; num318 < 20; num318 = num1032 + 1)
				{
					int num319 = Dust.NewDust(this.position, this.width, this.height, 78, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num319].noGravity = true;
					Dust dust131 = Main.dust[num319];
					Dust dust334 = dust131;
					dust334.velocity *= 4f;
					num1032 = num318;
				}
				for (int num320 = 0; num320 < 7; num320 = num1032 + 1)
				{
					int num321 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust132 = Main.dust[num321];
					Dust dust334 = dust132;
					dust334.velocity *= 0.9f;
					Main.dust[num321].scale = 0.9f;
					num1032 = num320;
				}
				for (int num322 = 0; num322 < 3; num322 = num1032 + 1)
				{
					int num323 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num323].noGravity = true;
					Dust dust133 = Main.dust[num323];
					Dust dust334 = dust133;
					dust334.velocity *= 3f;
					num323 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust133 = Main.dust[num323];
					dust334 = dust133;
					dust334.velocity *= 2f;
					num1032 = num322;
				}
				int num324 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
				Gore gore14 = Main.gore[num324];
				Gore gore64 = gore14;
				gore64.velocity *= 0.3f;
				ref float ptr = ref Main.gore[num324].velocity.X;
				ptr += (float)Main.rand.Next(-1, 2);
				ptr = ref Main.gore[num324].velocity.Y;
				ptr += (float)Main.rand.Next(-1, 2);
				if (this.owner == Main.myPlayer)
				{
					int num325 = 100;
					ptr = ref this.position.X;
					ptr -= (float)(num325 / 2);
					ptr = ref this.position.Y;
					ptr -= (float)(num325 / 2);
					this.width += num325;
					num1032 = this.height;
					this.height = num1032 + 1;
					this.penetrate = -1;
					this.Damage();
				}
			}
			if (this.type == 523)
			{
				SoundEngine.PlaySound(SoundID.Item54, new Vector2?(this.position), null);
				int num1032;
				for (int num326 = 0; num326 < 25; num326 = num1032 + 1)
				{
					int num327 = Dust.NewDust(this.position, this.width, this.height, 256, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num327].noGravity = true;
					Main.dust[num327].position = (Main.dust[num327].position + this.position) / 2f;
					Main.dust[num327].velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					Main.dust[num327].velocity.Normalize();
					Dust dust134 = Main.dust[num327];
					Dust dust334 = dust134;
					dust334.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
					Main.dust[num327].alpha = this.alpha;
					num1032 = num326;
				}
			}
			else if (this.type == 522)
			{
				SoundEngine.PlaySound(SoundID.Item118, new Vector2?(this.position), null);
				int num1032;
				for (int num328 = 0; num328 < 10; num328 = num1032 + 1)
				{
					int num329 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust334;
					Dust dust135;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num329].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num329].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust135 = Main.dust[num329];
						dust334 = dust135;
						Dust dust338 = dust334;
						num1032 = dust334.type;
						dust338.type = num1032 + 1;
					}
					else
					{
						Main.dust[num329].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num329].noGravity = true;
					dust135 = Main.dust[num329];
					dust334 = dust135;
					dust334.velocity *= 1.25f;
					dust135 = Main.dust[num329];
					dust334 = dust135;
					dust334.velocity -= this.oldVelocity / 10f;
					num1032 = num328;
				}
			}
			else if (this.type == 521)
			{
				SoundEngine.PlaySound(SoundID.Item110, new Vector2?(this.position), null);
				int num1032;
				for (int num330 = 0; num330 < 20; num330 = num1032 + 1)
				{
					int num331 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust334;
					Dust dust136;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num331].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num331].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust136 = Main.dust[num331];
						dust334 = dust136;
						Dust dust339 = dust334;
						num1032 = dust334.type;
						dust339.type = num1032 + 1;
					}
					else
					{
						Main.dust[num331].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num331].noGravity = true;
					dust136 = Main.dust[num331];
					dust334 = dust136;
					dust334.velocity *= 2.5f;
					dust136 = Main.dust[num331];
					dust334 = dust136;
					dust334.velocity -= this.oldVelocity / 10f;
					num1032 = num330;
				}
				if (Main.myPlayer == this.owner)
				{
					int num332 = Main.rand.Next(3, 6);
					for (int num333 = 0; num333 < num332; num333 = num1032 + 1)
					{
						Vector2 vector40;
						vector40..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						while (vector40.X == 0f && vector40.Y == 0f)
						{
							vector40..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						}
						vector40.Normalize();
						vector40 *= (float)Main.rand.Next(70, 101) * 0.1f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.oldPosition.X + (float)(this.width / 2), this.oldPosition.Y + (float)(this.height / 2), vector40.X, vector40.Y, 522, (int)((double)this.damage * 0.8), this.knockBack * 0.8f, this.owner, 0f, 0f, 0f);
						num1032 = num333;
					}
				}
			}
			if (this.type == 520)
			{
				SoundEngine.PlaySound(SoundID.Item50, new Vector2?(this.position), null);
				int num1032;
				for (int num334 = 0; num334 < 10; num334 = num1032 + 1)
				{
					int num335 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 252, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					Main.dust[num335].noGravity = true;
					Dust dust137 = Main.dust[num335];
					Dust dust334 = dust137;
					dust334.velocity -= this.oldVelocity / 3f;
					num1032 = num334;
				}
			}
			if (this.type == 459 || this.type == 709)
			{
				int num336 = 3;
				int num337 = 10;
				int num338 = 0;
				if (this.scale >= 1f)
				{
					this.position = base.Center;
					this.width = (this.height = 144);
					base.Center = this.position;
					num336 = 7;
					num337 = 30;
					num338 = 2;
					this.Damage();
				}
				int num1032;
				for (int num339 = 0; num339 < num336; num339 = num1032 + 1)
				{
					int num340 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num340].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					num1032 = num339;
				}
				for (int num341 = 0; num341 < num337; num341 = num1032 + 1)
				{
					int num342 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 226, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num342].position = new Vector2((float)(this.width / 2), 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble(), default(Vector2)) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num342].noGravity = true;
					Dust dust138 = Main.dust[num342];
					Dust dust334 = dust138;
					dust334.velocity *= 1f;
					num1032 = num341;
				}
				for (int num343 = 0; num343 < num338; num343 = num1032 + 1)
				{
					int num344 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore15 = Main.gore[num344];
					Gore gore64 = gore15;
					gore64.velocity *= 0.3f;
					ref float ptr = ref Main.gore[num344].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num344].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num343;
				}
				if (this.type == 709 && Main.myPlayer == this.owner)
				{
					Rectangle value7;
					value7..ctor((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num345 = 0; num345 < 1000; num345 = num1032 + 1)
					{
						if (num345 != this.whoAmI && Main.projectile[num345].active && Main.projectile[num345].owner == this.owner && Main.projectile[num345].type == 443 && Main.projectile[num345].getRect().Intersects(value7))
						{
							Main.projectile[num345].ai[1] = 1f;
							Main.projectile[num345].velocity = (base.Center - Main.projectile[num345].Center) / 5f;
							Main.projectile[num345].netUpdate = true;
						}
						num1032 = num345;
					}
					int num346 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, this.damage, 0f, this.owner, 0f, 0f, 0f);
					Main.projectile[num346].timeLeft = 30 * Main.rand.Next(2, 6);
					Main.projectile[num346].localAI[0] = SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryCircle, new Vector2?(base.Center)).ToFloat();
				}
			}
			if (this.owner != Main.myPlayer && this.type == 453 && Main.player[this.owner].mount.AbilityActive)
			{
				Main.player[this.owner].mount.UseAbility(Main.player[this.owner], this.position, false);
			}
			if (this.type == 441)
			{
				Main.player[this.owner].mount.StopAbilityCharge();
			}
			if (this.type == 444)
			{
				SoundEngine.PlaySound(SoundID.Item96, new Vector2?(this.position), null);
				int num347 = Main.rand.Next(5, 9);
				int num1032;
				for (int num348 = 0; num348 < num347; num348 = num1032 + 1)
				{
					int num349 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
					Dust dust139 = Main.dust[num349];
					Dust dust334 = dust139;
					dust334.velocity *= 0.8f;
					Main.dust[num349].position = Vector2.Lerp(Main.dust[num349].position, base.Center, 0.5f);
					Main.dust[num349].noGravity = true;
					num1032 = num348;
				}
				if (this.owner == Main.myPlayer)
				{
					Vector2 vector41 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
					if (Main.player[this.owner].gravDir == -1f)
					{
						vector41.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					Vector2 vector42 = Vector2.Normalize(vector41 - base.Center);
					vector42 *= this.localAI[1];
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector42.X, vector42.Y, (int)this.localAI[0], this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
				}
			}
			if (this.type == 472)
			{
				int num1032;
				for (int num350 = 0; num350 < 20; num350 = num1032 + 1)
				{
					int num351 = Dust.NewDust(this.position, this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num351].noGravity = true;
					Dust dust140 = Main.dust[num351];
					Dust dust334 = dust140;
					dust334.velocity *= 0.45f;
					dust140 = Main.dust[num351];
					dust334 = dust140;
					dust334.velocity += this.velocity * 0.9f;
					num1032 = num350;
				}
			}
			if (this.type == 639 || this.type == 640)
			{
				int num352 = Main.rand.Next(5, 10);
				int num1032;
				for (int num353 = 0; num353 < num352; num353 = num1032 + 1)
				{
					int num354 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust141 = Main.dust[num354];
					Dust dust334 = dust141;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num354].velocity.Y;
					ptr -= 1f;
					Main.dust[num354].position = Vector2.Lerp(Main.dust[num354].position, base.Center, 0.5f);
					Main.dust[num354].noGravity = true;
					num1032 = num353;
				}
				if (this.owner == Main.myPlayer && this.type == 639)
				{
					int num355 = num + 1;
					int nextSlot = Projectile.GetNextSlot();
					if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
					{
						num1032 = num355;
						num355 = num1032 + 1;
					}
					Vector2 vector43;
					vector43..ctor(this.ai[0], this.ai[1]);
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.localAI[0], this.localAI[1], vector43.X, vector43.Y, 640, this.damage, this.knockBack, this.owner, 0f, (float)num355, 0f);
				}
			}
			if (this.type == 684)
			{
				int num356 = Main.rand.Next(15, 25);
				int num1032;
				for (int num357 = 0; num357 < num356; num357 = num1032 + 1)
				{
					int num358 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
					Dust dust142 = Main.dust[num358];
					Dust dust334 = dust142;
					dust334.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
					Main.dust[num358].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
					Main.dust[num358].noLight = true;
					Main.dust[num358].noGravity = true;
					dust142 = Main.dust[num358];
					dust334 = dust142;
					dust334.position += Main.dust[num358].velocity * 4f;
					num1032 = num357;
				}
			}
			if (this.type == 435)
			{
				int num359 = Main.rand.Next(5, 10);
				int num1032;
				for (int num360 = 0; num360 < num359; num360 = num1032 + 1)
				{
					int num361 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust143 = Main.dust[num361];
					Dust dust334 = dust143;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num361].velocity.Y;
					ptr -= 1f;
					Main.dust[num361].position = Vector2.Lerp(Main.dust[num361].position, base.Center, 0.5f);
					Main.dust[num361].noGravity = true;
					num1032 = num360;
				}
			}
			if (this.type == 732)
			{
				int num362 = Main.rand.Next(5, 10);
				int num1032;
				for (int num363 = 0; num363 < num362; num363 = num1032 + 1)
				{
					int num364 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust144 = Main.dust[num364];
					Dust dust334 = dust144;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num364].velocity.Y;
					ptr -= 1f;
					Main.dust[num364].velocity = Main.dust[num364].velocity * 0.5f + this.velocity * ((float)num363 / (float)num362) * 0.7f;
					Main.dust[num364].position = Vector2.Lerp(Main.dust[num364].position, base.Center, 0.5f);
					Main.dust[num364].noGravity = true;
					num1032 = num363;
				}
			}
			if (this.type == 682)
			{
				int num365 = 22;
				int num1032;
				for (int num366 = 0; num366 < num365; num366 = num1032 + 1)
				{
					int num367 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
					Dust dust145 = Main.dust[num367];
					Dust dust334 = dust145;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num367].velocity.Y;
					ptr -= 1f;
					Main.dust[num367].position = Vector2.Lerp(Main.dust[num367].position, base.Center, 0.5f);
					num1032 = num366;
				}
			}
			if (this.type == 436)
			{
				int num368 = Main.rand.Next(5, 10);
				int num1032;
				for (int num369 = 0; num369 < num368; num369 = num1032 + 1)
				{
					int num370 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust146 = Main.dust[num370];
					Dust dust334 = dust146;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num370].velocity.Y;
					ptr -= 1f;
					Main.dust[num370].position = Vector2.Lerp(Main.dust[num370].position, base.Center, 0.5f);
					Main.dust[num370].noGravity = true;
					num1032 = num369;
				}
			}
			if (this.type == 462)
			{
				int num371 = Main.rand.Next(5, 10);
				int num1032;
				for (int num372 = 0; num372 < num371; num372 = num1032 + 1)
				{
					int num373 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust147 = Main.dust[num373];
					Dust dust334 = dust147;
					dust334.velocity *= 1.6f;
					ref float ptr = ref Main.dust[num373].velocity.Y;
					ptr -= 1f;
					dust147 = Main.dust[num373];
					dust334 = dust147;
					dust334.position -= Vector2.One * 4f;
					Main.dust[num373].position = Vector2.Lerp(Main.dust[num373].position, base.Center, 0.5f);
					Main.dust[num373].noGravity = true;
					num1032 = num372;
				}
			}
			if (this.type == 442)
			{
				SoundEngine.PlaySound(SoundID.Item94, new Vector2?(this.position), null);
				int num374 = Main.rand.Next(3, 7);
				int num1032;
				for (int num375 = 0; num375 < num374; num375 = num1032 + 1)
				{
					int num376 = Dust.NewDust(this.position, this.width, this.height, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust148 = Main.dust[num376];
					Dust dust334 = dust148;
					dust334.velocity *= 2f;
					Main.dust[num376].noGravity = true;
					num1032 = num375;
				}
				if (Main.myPlayer == this.owner)
				{
					Rectangle value8;
					value8..ctor((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num377 = 0; num377 < 1000; num377 = num1032 + 1)
					{
						if (num377 != this.whoAmI && Main.projectile[num377].active && Main.projectile[num377].owner == this.owner && Main.projectile[num377].type == 443 && Main.projectile[num377].getRect().Intersects(value8))
						{
							Main.projectile[num377].ai[1] = 1f;
							Main.projectile[num377].velocity = (base.Center - Main.projectile[num377].Center) / 5f;
							Main.projectile[num377].netUpdate = true;
						}
						num1032 = num377;
					}
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, this.damage, 0f, this.owner, 0f, 0f, 0f);
				}
			}
			if (this.type == 440)
			{
				int num378 = Main.rand.Next(3, 7);
				int num1032;
				for (int num379 = 0; num379 < num378; num379 = num1032 + 1)
				{
					int num380 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust149 = Main.dust[num380];
					Dust dust334 = dust149;
					dust334.velocity *= 2f;
					Main.dust[num380].noGravity = true;
					num1032 = num379;
				}
			}
			if (this.type == 606)
			{
				int num381 = Main.rand.Next(3, 7);
				int num1032;
				for (int num382 = 0; num382 < num381; num382 = num1032 + 1)
				{
					int num383 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
					Dust dust150 = Main.dust[num383];
					Dust dust334 = dust150;
					dust334.velocity *= 1.5f;
					Main.dust[num383].noGravity = true;
					num1032 = num382;
				}
			}
			if (this.type == 449)
			{
				int num384 = Main.rand.Next(3, 7);
				int num1032;
				for (int num385 = 0; num385 < num384; num385 = num1032 + 1)
				{
					int num386 = Dust.NewDust(base.Center - this.velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust151 = Main.dust[num386];
					Dust dust334 = dust151;
					dust334.velocity *= 2f;
					Main.dust[num386].noGravity = true;
					num1032 = num385;
				}
			}
			if (this.type == 495)
			{
				int num1032;
				for (int num387 = 0; num387 < 15; num387 = num1032 + 1)
				{
					int num388 = Dust.NewDust(base.Center, 10, 10, 27, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num388].noGravity = true;
					Dust dust152 = Main.dust[num388];
					Dust dust334 = dust152;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num1032 = num387;
				}
			}
			if (this.type == 497)
			{
				int num1032;
				for (int num389 = 0; num389 < 15; num389 = num1032 + 1)
				{
					int num390 = Dust.NewDust(base.Center, 10, 10, 27, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num390].noGravity = true;
					Dust dust153 = Main.dust[num390];
					Dust dust334 = dust153;
					dust334.velocity *= 2f;
					dust153 = Main.dust[num390];
					dust334 = dust153;
					dust334.velocity -= this.oldVelocity * 0.3f;
					dust153 = Main.dust[num390];
					dust334 = dust153;
					dust334.scale += (float)Main.rand.Next(150) * 0.001f;
					num1032 = num389;
				}
			}
			if (this.type == 448)
			{
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				this.position = base.Center;
				this.width = (this.height = 112);
				ref float ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num391 = 0; num391 < 4; num391 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num1032 = num391;
				}
				for (int num392 = 0; num392 < 40; num392 = num1032 + 1)
				{
					int num393 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num393].noGravity = true;
					Dust dust154 = Main.dust[num393];
					Dust dust334 = dust154;
					dust334.velocity *= 3f;
					num393 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 1.5f);
					dust154 = Main.dust[num393];
					dust334 = dust154;
					dust334.velocity *= 2f;
					Main.dust[num393].noGravity = true;
					num1032 = num392;
				}
				for (int num394 = 0; num394 < 1; num394 = num1032 + 1)
				{
					int num395 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore16 = Main.gore[num395];
					Gore gore64 = gore16;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num395].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num395].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num394;
				}
				this.Damage();
			}
			else if (this.type == 715 || this.type == 716 || this.type == 717 || this.type == 718)
			{
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				this.position = base.Center;
				this.width = (this.height = 128);
				if (this.type == 717 || this.type == 718)
				{
					this.width = (this.height = 240);
				}
				ref float ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				this.Damage();
				this.AI_147_Explosion();
			}
			if (this.type == 616)
			{
				SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
				this.position = base.Center;
				this.width = (this.height = 80);
				ref float ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num396 = 0; num396 < 4; num396 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num1032 = num396;
				}
				for (int num397 = 0; num397 < 40; num397 = num1032 + 1)
				{
					int num398 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num398].noGravity = true;
					Dust dust155 = Main.dust[num398];
					Dust dust334 = dust155;
					dust334.velocity *= 2f;
					num398 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0f, 0f, 200, default(Color), 1.5f);
					dust155 = Main.dust[num398];
					dust334 = dust155;
					dust334.velocity *= 1.2f;
					Main.dust[num398].noGravity = true;
					num1032 = num397;
				}
				for (int num399 = 0; num399 < 1; num399 = num1032 + 1)
				{
					int num400 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore17 = Main.gore[num400];
					Gore gore64 = gore17;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num400].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num400].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num399;
				}
				this.Damage();
			}
			if (this.type == 502)
			{
				Vector2 vector44 = new Vector2((float)this.width, (float)this.height) / 2f;
				int num1032;
				for (int num401 = 0; num401 < this.oldPos.Length; num401 = num1032 + 1)
				{
					if (!(this.oldPos[num401] == Vector2.Zero))
					{
						int num402 = Dust.NewDust(this.oldPos[num401] + vector44, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
						Main.dust[num402].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f, byte.MaxValue);
						Main.dust[num402].noGravity = true;
					}
					num1032 = num401;
				}
			}
			if (this.type == 510)
			{
				SoundEngine.PlaySound(SoundID.Item107, new Vector2?(this.position), null);
				Gore.NewGore(base.Center, -this.oldVelocity * 0.2f, 704, 1f);
				Gore.NewGore(base.Center, -this.oldVelocity * 0.2f, 705, 1f);
				if (this.owner == Main.myPlayer)
				{
					int num403 = Main.rand.Next(20, 31);
					int num1032;
					for (int num404 = 0; num404 < num403; num404 = num1032 + 1)
					{
						Vector2 vector45;
						vector45..ctor((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						vector45.Normalize();
						vector45 *= (float)Main.rand.Next(10, 201) * 0.01f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector45.X, vector45.Y, 511 + Main.rand.Next(3), this.damage, 1f, this.owner, 0f, 0f, 0f);
						num1032 = num404;
					}
				}
			}
			if (this.type == 868 || this.type == 869 || this.type == 996)
			{
				SoundEngine.PlaySound(SoundID.Item107, new Vector2?(this.position), null);
				int num1032;
				for (int num405 = 0; num405 < 15; num405 = num1032 + 1)
				{
					Dust.NewDust(this.position, this.width, this.height, 13, 0f, -2f, 0, default(Color), 1.5f);
					num1032 = num405;
				}
				if (Main.netMode != 1)
				{
					num1032 = this.type;
					if (num1032 != 868)
					{
						if (num1032 != 869)
						{
							if (num1032 == 996)
							{
								WorldGen.RandomizeMoonState(Main.rand, true);
							}
						}
						else
						{
							WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[this.owner]);
						}
					}
					else
					{
						WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, base.Center);
					}
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			else if (this.type == 836)
			{
				int num1032;
				for (int num406 = 0; num406 < 3; num406 = num1032 + 1)
				{
					int num407 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 50, Color.White, 0.8f);
					Dust dust156 = Main.dust[num407];
					Dust dust334 = dust156;
					dust334.velocity *= 0.5f;
					Main.dust[num407].noGravity = true;
					num1032 = num406;
				}
			}
			if (this.type == 408)
			{
				int num1032;
				for (int num408 = 0; num408 < 15; num408 = num1032 + 1)
				{
					int num409 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f, 0, default(Color), 1f);
					Dust dust157 = Main.dust[num409];
					Dust dust334 = dust157;
					dust334.velocity /= 2f;
					num1032 = num408;
				}
				int num410 = 10;
				int num411 = Gore.NewGore(base.Center, this.velocity * 0.8f, 584, 1f);
				Gore gore18 = Main.gore[num411];
				Gore gore64 = gore18;
				gore64.timeLeft /= num410;
				num411 = Gore.NewGore(base.Center, this.velocity * 0.9f, 585, 1f);
				gore18 = Main.gore[num411];
				gore64 = gore18;
				gore64.timeLeft /= num410;
				num411 = Gore.NewGore(base.Center, this.velocity * 1f, 586, 1f);
				gore18 = Main.gore[num411];
				gore64 = gore18;
				gore64.timeLeft /= num410;
			}
			if (this.type == 385)
			{
				SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19, 1f, 0f);
				int num412 = 36;
				int num1032;
				for (int num413 = 0; num413 < num412; num413 = num1032 + 1)
				{
					Vector2 spinningpoint = Vector2.Normalize(this.velocity) * new Vector2((float)this.width / 2f, (float)this.height) * 0.75f;
					spinningpoint = spinningpoint.RotatedBy((double)((float)(num413 - (num412 / 2 - 1)) * 6.2831855f / (float)num412), default(Vector2)) + base.Center;
					Vector2 vector46 = spinningpoint - base.Center;
					int num414 = Dust.NewDust(spinningpoint + vector46, 0, 0, 172, vector46.X * 2f, vector46.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num414].noGravity = true;
					Main.dust[num414].noLight = true;
					Main.dust[num414].velocity = vector46;
					num1032 = num413;
				}
				if (this.owner == Main.myPlayer)
				{
					if (this.ai[1] < 1f)
					{
						int num415 = Main.expertMode ? 25 : 40;
						int num416 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - (float)(this.direction * 30), base.Center.Y - 4f, (float)(-(float)this.direction) * 0.01f, 0f, 384, num415, 4f, this.owner, 16f, 15f, 0f);
						Main.projectile[num416].netUpdate = true;
					}
					else
					{
						int num417 = (int)(base.Center.Y / 16f);
						int num418 = (int)(base.Center.X / 16f);
						int num419 = 100;
						if (num418 < 10)
						{
							num418 = 10;
						}
						if (num418 > Main.maxTilesX - 10)
						{
							num418 = Main.maxTilesX - 10;
						}
						if (num417 < 10)
						{
							num417 = 10;
						}
						if (num417 > Main.maxTilesY - num419 - 10)
						{
							num417 = Main.maxTilesY - num419 - 10;
						}
						int num420 = num417 + num419;
						int num421 = num417 + 15;
						for (int num422 = num417; num422 < num420; num422 = num1032 + 1)
						{
							Tile tile = Main.tile[num418, num422];
							if (tile.active() && (Main.tileSolid[(int)(*tile.type)] || *tile.liquid != 0))
							{
								num421 = num422;
								break;
							}
							num1032 = num422;
						}
						num417 = num421;
						int num423 = Main.expertMode ? 50 : 80;
						int num424 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float)(num418 * 16 + 8), (float)(num417 * 16 - 24), 0f, 0f, 386, num423, 4f, Main.myPlayer, 16f, 24f, 0f);
						Main.projectile[num424].netUpdate = true;
					}
				}
			}
			else if (this.type >= 424 && this.type <= 426)
			{
				SoundEngine.PlaySound(SoundID.Item89, new Vector2?(this.position), null);
				ref float ptr = ref this.position.X;
				ptr += (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr += (float)(this.height / 2);
				this.width = (int)(128f * this.scale);
				this.height = (int)(128f * this.scale);
				ptr = ref this.position.X;
				ptr -= (float)(this.width / 2);
				ptr = ref this.position.Y;
				ptr -= (float)(this.height / 2);
				int num1032;
				for (int num425 = 0; num425 < 8; num425 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					num1032 = num425;
				}
				for (int num426 = 0; num426 < 32; num426 = num1032 + 1)
				{
					int num427 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num427].noGravity = true;
					Dust dust158 = Main.dust[num427];
					Dust dust334 = dust158;
					dust334.velocity *= 3f;
					num427 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust158 = Main.dust[num427];
					dust334 = dust158;
					dust334.velocity *= 2f;
					Main.dust[num427].noGravity = true;
					num1032 = num426;
				}
				for (int num428 = 0; num428 < 2; num428 = num1032 + 1)
				{
					int num429 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore19 = Main.gore[num429];
					Gore gore64 = gore19;
					gore64.velocity *= 0.3f;
					ptr = ref Main.gore[num429].velocity.X;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					ptr = ref Main.gore[num429].velocity.Y;
					ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
					num1032 = num428;
				}
				if (this.owner == Main.myPlayer)
				{
					this.localAI[1] = -1f;
					this.maxPenetrate = 0;
					this.Damage();
				}
				for (int num430 = 0; num430 < 5; num430 = num1032 + 1)
				{
					int num431 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						6,
						259,
						158
					});
					int num432 = Dust.NewDust(this.position, this.width, this.height, num431, 2.5f * (float)this.direction, -2.5f, 0, default(Color), 1f);
					Main.dust[num432].alpha = 200;
					Dust dust159 = Main.dust[num432];
					Dust dust334 = dust159;
					dust334.velocity *= 2.4f;
					dust159 = Main.dust[num432];
					dust334 = dust159;
					dust334.scale += Main.rand.NextFloat();
					num1032 = num430;
				}
			}
			if (this.type == 399)
			{
				SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector47;
				vector47..ctor(20f, 20f);
				int num1032;
				for (int num433 = 0; num433 < 5; num433 = num1032 + 1)
				{
					Dust.NewDust(base.Center - vector47 / 2f, (int)vector47.X, (int)vector47.Y, 12, 0f, 0f, 0, Color.Red, 1f);
					num1032 = num433;
				}
				for (int num434 = 0; num434 < 10; num434 = num1032 + 1)
				{
					int num435 = Dust.NewDust(base.Center - vector47 / 2f, (int)vector47.X, (int)vector47.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust160 = Main.dust[num435];
					Dust dust334 = dust160;
					dust334.velocity *= 1.4f;
					num1032 = num434;
				}
				for (int num436 = 0; num436 < 20; num436 = num1032 + 1)
				{
					int num437 = Dust.NewDust(base.Center - vector47 / 2f, (int)vector47.X, (int)vector47.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num437].noGravity = true;
					Dust dust161 = Main.dust[num437];
					Dust dust334 = dust161;
					dust334.velocity *= 5f;
					num437 = Dust.NewDust(base.Center - vector47 / 2f, (int)vector47.X, (int)vector47.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust161 = Main.dust[num437];
					dust334 = dust161;
					dust334.velocity *= 3f;
					num1032 = num436;
				}
				if (Main.myPlayer == this.owner)
				{
					for (int num438 = 0; num438 < 6; num438 = num1032 + 1)
					{
						float num439 = (0f - this.velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num440 = (0f - Math.Abs(this.velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X + num439, base.Center.Y + num440, num439, num440, 400 + Main.rand.Next(3), (int)((double)this.damage * 0.5), 0f, this.owner, 0f, 0f, 0f);
						num1032 = num438;
					}
				}
			}
			if (this.type == 384 || this.type == 386)
			{
				int num1032;
				for (int num441 = 0; num441 < 20; num441 = num1032 + 1)
				{
					int num442 = Dust.NewDust(this.position, this.width, this.height, 212, (float)(this.direction * 2), 0f, 100, default(Color), 1.4f);
					Dust dust162 = Main.dust[num442];
					dust162.color = Color.CornflowerBlue;
					dust162.color = Color.Lerp(dust162.color, Color.White, 0.3f);
					dust162.noGravity = true;
					num1032 = num441;
				}
			}
			if (this.type == 507 || this.type == 508)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector48 = this.position;
				Vector2 vector49 = this.oldVelocity;
				vector49.Normalize();
				vector48 += vector49 * 16f;
				int num1032;
				for (int num443 = 0; num443 < 20; num443 = num1032 + 1)
				{
					int num444 = Dust.NewDust(vector48, this.width, this.height, 81, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num444].position = (Main.dust[num444].position + base.Center) / 2f;
					Dust dust163 = Main.dust[num444];
					Dust dust334 = dust163;
					dust334.velocity += this.oldVelocity * 0.4f;
					dust163 = Main.dust[num444];
					dust334 = dust163;
					dust334.velocity *= 0.5f;
					Main.dust[num444].noGravity = true;
					vector48 -= vector49 * 8f;
					num1032 = num443;
				}
			}
			if (this.type == 598)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				Vector2 vector50 = this.position;
				Vector2 vector51 = (this.rotation - 1.5707964f).ToRotationVector2();
				vector50 += vector51 * 16f;
				int num1032;
				for (int num445 = 0; num445 < 20; num445 = num1032 + 1)
				{
					int num446 = Dust.NewDust(vector50, this.width, this.height, 81, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num446].position = (Main.dust[num446].position + base.Center) / 2f;
					Dust dust164 = Main.dust[num446];
					Dust dust334 = dust164;
					dust334.velocity += vector51 * 2f;
					dust164 = Main.dust[num446];
					dust334 = dust164;
					dust334.velocity *= 0.5f;
					Main.dust[num446].noGravity = true;
					vector50 -= vector51 * 8f;
					num1032 = num445;
				}
			}
			if (this.type == 971)
			{
				Vector2 vector52 = this.position;
				Vector2 vector53 = (this.rotation - 1.5707964f).ToRotationVector2();
				vector52 += vector53 * 8f;
				int num1032;
				for (int num447 = 0; num447 < 6; num447 = num1032 + 1)
				{
					int num448 = Dust.NewDust(vector52, this.width, this.height, 4, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num448].color = new Color(10, 10, 10, 150);
					Main.dust[num448].position = (Main.dust[num448].position + base.Center) / 2f;
					Dust dust165 = Main.dust[num448];
					Dust dust334 = dust165;
					dust334.velocity += vector53;
					dust165 = Main.dust[num448];
					dust334 = dust165;
					dust334.velocity *= 0.5f;
					Main.dust[num448].noGravity = true;
					vector52 -= vector53 * 4f;
					num1032 = num447;
				}
			}
			if (this.type == 1 || this.type == 81 || this.type == 98 || this.type == 980)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num449 = 0; num449 < 10; num449 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num1032 = num449;
				}
			}
			if (this.type == 336 || this.type == 345)
			{
				int num1032;
				for (int num450 = 0; num450 < 6; num450 = num1032 + 1)
				{
					int num451 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 196, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num451].noGravity = true;
					Main.dust[num451].scale = this.scale;
					num1032 = num450;
				}
			}
			if (this.type == 358)
			{
				this.velocity = this.oldVelocity * 0.2f;
				int num1032;
				for (int num452 = 0; num452 < 100; num452 = num1032 + 1)
				{
					int num453 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 211, 0f, 0f, 75, default(Color), 1.2f);
					Dust dust334;
					Dust dust166;
					if (Main.rand.Next(2) == 0)
					{
						dust166 = Main.dust[num453];
						dust334 = dust166;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust166 = Main.dust[num453];
						dust334 = dust166;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust166 = Main.dust[num453];
						dust334 = dust166;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num453].scale = 0.6f;
					}
					else
					{
						Main.dust[num453].noGravity = true;
					}
					dust166 = Main.dust[num453];
					dust334 = dust166;
					dust334.velocity *= 0.3f;
					dust166 = Main.dust[num453];
					dust334 = dust166;
					dust334.velocity += this.velocity;
					dust166 = Main.dust[num453];
					dust334 = dust166;
					dust334.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					ref float ptr = ref Main.dust[num453].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.015f;
					ptr = ref Main.dust[num453].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num453].position = base.Center;
					num1032 = num452;
				}
			}
			if (this.type == 406)
			{
				int num454 = 175;
				Color newColor5;
				newColor5..ctor(0, 80, 255, 100);
				this.velocity = this.oldVelocity * 0.2f;
				int num1032;
				for (int num455 = 0; num455 < 40; num455 = num1032 + 1)
				{
					int num456 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, num454, newColor5, 1.6f);
					Dust dust334;
					Dust dust167;
					if (Main.rand.Next(2) == 0)
					{
						dust167 = Main.dust[num456];
						dust334 = dust167;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust167 = Main.dust[num456];
						dust334 = dust167;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust167 = Main.dust[num456];
						dust334 = dust167;
						dust334.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num456].scale = 0.6f;
					}
					else
					{
						Main.dust[num456].noGravity = true;
					}
					dust167 = Main.dust[num456];
					dust334 = dust167;
					dust334.velocity *= 0.3f;
					dust167 = Main.dust[num456];
					dust334 = dust167;
					dust334.velocity += this.velocity;
					dust167 = Main.dust[num456];
					dust334 = dust167;
					dust334.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					ref float ptr = ref Main.dust[num456].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.015f;
					ptr = ref Main.dust[num456].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num456].position = base.Center;
					num1032 = num455;
				}
			}
			if (this.type == 344)
			{
				int num1032;
				for (int num457 = 0; num457 < 8; num457 = num1032 + 1)
				{
					int num458 = Dust.NewDust(this.position, this.width, this.height, 197, 0f, 0f, 50, default(Color), 1f);
					Main.dust[num458].noGravity = true;
					ref float ptr = ref Main.dust[num458].velocity.X;
					ptr *= 0.75f;
					ptr = ref Main.dust[num458].velocity.Y;
					ptr *= 0.75f;
					Dust dust168 = Main.dust[num458];
					Dust dust334 = dust168;
					dust334.velocity -= this.velocity * 0.025f;
					num1032 = num457;
				}
			}
			else if (this.type == 343)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				int num1032;
				for (int num459 = 4; num459 < 31; num459 = num1032 + 1)
				{
					float num460 = this.oldVelocity.X * (30f / (float)num459);
					float num461 = this.oldVelocity.Y * (30f / (float)num459);
					int num462 = Dust.NewDust(new Vector2(this.oldPosition.X - num460, this.oldPosition.Y - num461), 8, 8, 197, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.2f);
					Main.dust[num462].noGravity = true;
					Dust dust169 = Main.dust[num462];
					Dust dust334 = dust169;
					dust334.velocity *= 0.5f;
					num1032 = num459;
				}
			}
			else if (this.type == 349)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				int num1032;
				for (int num463 = 0; num463 < 3; num463 = num1032 + 1)
				{
					int num464 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num464].noGravity = true;
					Main.dust[num464].noLight = true;
					Main.dust[num464].scale = 0.7f;
					num1032 = num463;
				}
			}
			if (this.type == 323)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num465 = 0; num465 < 20; num465 = num1032 + 1)
				{
					int num466 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num466].noGravity = true;
						Main.dust[num466].scale = 1.3f;
						Dust dust170 = Main.dust[num466];
						Dust dust334 = dust170;
						dust334.velocity *= 1.5f;
						dust170 = Main.dust[num466];
						dust334 = dust170;
						dust334.velocity -= this.oldVelocity * 0.5f;
						dust170 = Main.dust[num466];
						dust334 = dust170;
						dust334.velocity *= 1.5f;
					}
					else
					{
						Dust dust171 = Main.dust[num466];
						Dust dust334 = dust171;
						dust334.velocity *= 0.75f;
						dust171 = Main.dust[num466];
						dust334 = dust171;
						dust334.velocity -= this.oldVelocity * 0.25f;
						Main.dust[num466].scale = 0.8f;
					}
					num1032 = num465;
				}
			}
			if (this.type == 589)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				Color newColor6 = Color.Red;
				if (this.ai[1] == 1f)
				{
					newColor6 = Color.Green;
				}
				if (this.ai[1] == 2f)
				{
					newColor6 = Color.Purple;
				}
				if (this.ai[1] == 3f)
				{
					newColor6 = Color.Gold;
				}
				if (this.ai[1] == 4f)
				{
					newColor6 = Color.White;
				}
				newColor6.A = 100;
				int num1032;
				for (int num467 = 0; num467 < 30; num467 = num1032 + 1)
				{
					int num468 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, newColor6, 1f);
					Dust dust172 = Main.dust[num468];
					Dust dust334 = dust172;
					dust334.velocity *= 1f + Main.rand.NextFloat() * 1f;
					if (num467 < 10)
					{
						Main.dust[num468].noGravity = true;
						dust172 = Main.dust[num468];
						dust334 = dust172;
						dust334.velocity *= 0.5f;
					}
					num1032 = num467;
				}
			}
			if (this.type == 346)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				int num1032;
				for (int num469 = 0; num469 < 20; num469 = num1032 + 1)
				{
					int num470 = 10;
					if (this.ai[1] == 1f)
					{
						num470 = 4;
					}
					int num471 = Dust.NewDust(this.position, this.width, this.height, num470, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num471].noGravity = true;
					num1032 = num469;
				}
			}
			if (this.type == 335)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				int num1032;
				for (int num472 = 0; num472 < 20; num472 = num1032 + 1)
				{
					int num473 = 90 - (int)this.ai[1];
					int num474 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num473, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num474].noLight = true;
					Main.dust[num474].scale = 0.8f;
					num1032 = num472;
				}
			}
			if (this.type == 318)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num475 = 0; num475 < 10; num475 = num1032 + 1)
				{
					int num476 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num476].noGravity = true;
					}
					num1032 = num475;
				}
			}
			if (this.type == 378)
			{
				int num1032;
				for (int num477 = 0; num477 < 10; num477 = num1032 + 1)
				{
					int num478 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0f, 0f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num478].noGravity = true;
					}
					num1032 = num477;
				}
			}
			else if (this.type == 311)
			{
				int num1032;
				for (int num479 = 0; num479 < 5; num479 = num1032 + 1)
				{
					int num480 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 189, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num480].scale = 0.85f;
					Main.dust[num480].noGravity = true;
					Dust dust173 = Main.dust[num480];
					Dust dust334 = dust173;
					dust334.velocity += this.velocity * 0.5f;
					num1032 = num479;
				}
			}
			else if (this.type == 316)
			{
				int num1032;
				for (int num481 = 0; num481 < 5; num481 = num1032 + 1)
				{
					int num482 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 195, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num482].scale = 0.85f;
					Main.dust[num482].noGravity = true;
					Dust dust174 = Main.dust[num482];
					Dust dust334 = dust174;
					dust334.velocity += this.velocity * 0.5f;
					num1032 = num481;
				}
			}
			else if (this.type == 184 || this.type == 195)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num483 = 0; num483 < 5; num483 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num1032 = num483;
				}
			}
			else if (this.type == 275 || this.type == 276)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num484 = 0; num484 < 5; num484 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					num1032 = num484;
				}
			}
			else if (this.type == 291)
			{
				if (this.owner == Main.myPlayer)
				{
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 292, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
				}
			}
			else if (this.type == 295)
			{
				if (this.owner == Main.myPlayer)
				{
					Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)this.damage * 0.75), this.knockBack, this.owner, 0f, 0f, 0f);
				}
			}
			else if (this.type == 270 || this.type == 837)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 27, 1f, 0f);
				if (this.type == 270)
				{
					int num1032;
					for (int num485 = 0; num485 < 20; num485 = num1032 + 1)
					{
						int num486 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num486].noGravity = true;
						Dust dust175 = Main.dust[num486];
						Dust dust334 = dust175;
						dust334.velocity *= 1.2f;
						Main.dust[num486].scale = 1.3f;
						dust175 = Main.dust[num486];
						dust334 = dust175;
						dust334.velocity -= this.oldVelocity * 0.3f;
						num486 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num486].noGravity = true;
						dust175 = Main.dust[num486];
						dust334 = dust175;
						dust334.velocity *= 3f;
						num1032 = num485;
					}
				}
				else
				{
					int num1032;
					for (int num487 = 0; num487 < 20; num487 = num1032 + 1)
					{
						int num488 = Dust.NewDust(this.position, this.width, this.height, 26, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num488].noGravity = true;
						Dust dust176 = Main.dust[num488];
						Dust dust334 = dust176;
						dust334.velocity *= 1.2f;
						Main.dust[num488].scale = 1.3f;
						dust176 = Main.dust[num488];
						dust334 = dust176;
						dust334.velocity -= this.oldVelocity * 0.3f;
						num488 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num488].noGravity = true;
						dust176 = Main.dust[num488];
						dust334 = dust176;
						dust334.velocity *= 3f;
						num1032 = num487;
					}
				}
			}
			else if (this.type == 265)
			{
				int num1032;
				for (int num489 = 0; num489 < 15; num489 = num1032 + 1)
				{
					int num490 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num490].noGravity = true;
					Dust dust177 = Main.dust[num490];
					Dust dust334 = dust177;
					dust334.velocity *= 1.2f;
					dust177 = Main.dust[num490];
					dust334 = dust177;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num1032 = num489;
				}
			}
			else if (this.type == 355)
			{
				int num1032;
				for (int num491 = 0; num491 < 15; num491 = num1032 + 1)
				{
					int num492 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num492].noGravity = true;
					Dust dust178 = Main.dust[num492];
					Dust dust334 = dust178;
					dust334.velocity *= 1.2f;
					dust178 = Main.dust[num492];
					dust334 = dust178;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num1032 = num491;
				}
			}
			else if (this.type == 304)
			{
				int num1032;
				for (int num493 = 0; num493 < 3; num493 = num1032 + 1)
				{
					int num494 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num494].noGravity = true;
					Dust dust179 = Main.dust[num494];
					Dust dust334 = dust179;
					dust334.velocity *= 1.2f;
					dust179 = Main.dust[num494];
					dust334 = dust179;
					dust334.velocity -= this.oldVelocity * 0.3f;
					num1032 = num493;
				}
			}
			else if (this.type == 263)
			{
				SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
				int num1032;
				for (int num495 = 0; num495 < 15; num495 = num1032 + 1)
				{
					int num496 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
					Main.dust[num496].noGravity = true;
					Dust dust180 = Main.dust[num496];
					Dust dust334 = dust180;
					dust334.velocity *= 2f;
					num1032 = num495;
				}
			}
			else if (this.type == 261)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num497 = 0; num497 < 15; num497 = num1032 + 1)
				{
					Dust dust181 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 148, 0f, 0f, 0, default(Color), 1f);
					Dust dust182 = dust181;
					Dust dust334 = dust182;
					dust334.velocity *= 2f;
					ref float ptr = ref dust181.velocity.Y;
					ptr -= 0.4f;
					num1032 = num497;
				}
				for (int num498 = 0; num498 < 3; num498 = num1032 + 1)
				{
					Dust dust183 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 0, default(Color), 1f);
					Dust dust184 = dust183;
					Dust dust334 = dust184;
					dust334.velocity *= 2f;
					dust183.noLight = true;
					dust184 = dust183;
					dust334 = dust184;
					dust334.scale *= 0.8f;
					ref float ptr = ref dust183.velocity.Y;
					ptr -= 0.3f;
					num1032 = num498;
				}
			}
			else if (this.type == 928)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num499 = 0; num499 < 25; num499 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, 0, Color.White, 1.3f);
					num1032 = num499;
				}
			}
			else if (this.type == 229)
			{
				int num1032;
				for (int num500 = 0; num500 < 25; num500 = num1032 + 1)
				{
					int num501 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num501].noGravity = true;
					Dust dust185 = Main.dust[num501];
					Dust dust334 = dust185;
					dust334.velocity *= 1.5f;
					Main.dust[num501].scale = 1.5f;
					num1032 = num500;
				}
			}
			else if (this.type == 239)
			{
				if (this.velocity.Y > 0f)
				{
					int num502 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 154, 0f, 0f, 0, default(Color), 1f);
					ref float ptr = ref Main.dust[num502].position.X;
					ptr -= 2f;
					Main.dust[num502].alpha = 38;
					Dust dust186 = Main.dust[num502];
					Dust dust334 = dust186;
					dust334.velocity *= 0.1f;
					dust186 = Main.dust[num502];
					dust334 = dust186;
					dust334.velocity += -this.oldVelocity * 0.25f;
					Main.dust[num502].scale = 0.95f;
				}
			}
			else if (this.type == 245)
			{
				if (this.velocity.Y > 0f)
				{
					int num503 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 114, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num503].noGravity = true;
					ref float ptr = ref Main.dust[num503].position.X;
					ptr -= 2f;
					Main.dust[num503].alpha = 38;
					Dust dust187 = Main.dust[num503];
					Dust dust334 = dust187;
					dust334.velocity *= 0.1f;
					dust187 = Main.dust[num503];
					dust334 = dust187;
					dust334.velocity += -this.oldVelocity * 0.25f;
					Main.dust[num503].scale = 0.95f;
				}
			}
			else if (this.type == 264)
			{
				if (this.velocity.Y > 0f)
				{
					int num504 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), 2, 2, 54, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num504].noGravity = true;
					ref float ptr = ref Main.dust[num504].position.X;
					ptr -= 2f;
					Main.dust[num504].alpha = 38;
					Dust dust188 = Main.dust[num504];
					Dust dust334 = dust188;
					dust334.velocity *= 0.1f;
					dust188 = Main.dust[num504];
					dust334 = dust188;
					dust334.velocity += -this.oldVelocity * 0.25f;
					Main.dust[num504].scale = 0.95f;
				}
			}
			else if (this.type == 206 || this.type == 225)
			{
				SoundEngine.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num505 = 0; num505 < 5; num505 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0f, 0f, 0, default(Color), 1f);
					num1032 = num505;
				}
			}
			else if (this.type == 227)
			{
				SoundEngine.PlaySound(6, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num506 = 0; num506 < 15; num506 = num1032 + 1)
				{
					int num507 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num507].noGravity = true;
					Dust dust189 = Main.dust[num507];
					Dust dust334 = dust189;
					dust334.velocity += this.oldVelocity * Main.rand.NextFloat();
					Main.dust[num507].scale = 1.5f;
					num1032 = num506;
				}
			}
			else if (this.type == 237 && this.owner == Main.myPlayer)
			{
				Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 238, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
			}
			else if (this.type == 243 && this.owner == Main.myPlayer)
			{
				Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 244, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
			}
			else if (this.type == 120)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num508 = 0; num508 < 10; num508 = num1032 + 1)
				{
					int num509 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
					if (num508 < 5)
					{
						Main.dust[num509].noGravity = true;
					}
					Dust dust190 = Main.dust[num509];
					Dust dust334 = dust190;
					dust334.velocity *= 0.2f;
					num1032 = num508;
				}
			}
			else if (this.type == 181 || this.type == 189 || this.type == 566)
			{
				int num1032;
				for (int num510 = 0; num510 < 6; num510 = num1032 + 1)
				{
					int num511 = Dust.NewDust(this.position, this.width, this.height, 150, this.velocity.X, this.velocity.Y, 50, default(Color), 1f);
					Main.dust[num511].noGravity = true;
					Main.dust[num511].scale = 1f;
					num1032 = num510;
				}
			}
			else if (this.type == 178)
			{
				int num1032;
				for (int num512 = 0; num512 < 85; num512 = num1032 + 1)
				{
					int num513 = Main.rand.Next(139, 143);
					int num514 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num513, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
					ref float ptr = ref Main.dust[num514].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num514].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num514].velocity.X;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num514].velocity.Y;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num514].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					ptr = ref Main.dust[num514].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust191 = Main.dust[num514];
					Dust dust334 = dust191;
					dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					num1032 = num512;
				}
				for (int num515 = 0; num515 < 40; num515 = num1032 + 1)
				{
					int num516 = Main.rand.Next(276, 283);
					int num517 = Gore.NewGore(this.position, this.velocity, num516, 1f);
					ref float ptr = ref Main.gore[num517].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num517].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num517].velocity.X;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num517].velocity.Y;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore20 = Main.gore[num517];
					Gore gore64 = gore20;
					gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					ptr = ref Main.gore[num517].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					ptr = ref Main.gore[num517].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					num1032 = num515;
				}
			}
			else if (this.type == 289)
			{
				int num1032;
				for (int num518 = 0; num518 < 30; num518 = num1032 + 1)
				{
					int num519 = Main.rand.Next(139, 143);
					int num520 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num519, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
					ref float ptr = ref Main.dust[num520].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num520].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num520].velocity.X;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num520].velocity.Y;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.dust[num520].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					ptr = ref Main.dust[num520].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust192 = Main.dust[num520];
					Dust dust334 = dust192;
					dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					num1032 = num518;
				}
				for (int num521 = 0; num521 < 15; num521 = num1032 + 1)
				{
					int num522 = Main.rand.Next(276, 283);
					int num523 = Gore.NewGore(this.position, this.velocity, num522, 1f);
					ref float ptr = ref Main.gore[num523].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num523].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num523].velocity.X;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					ptr = ref Main.gore[num523].velocity.Y;
					ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore21 = Main.gore[num523];
					Gore gore64 = gore21;
					gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					ptr = ref Main.gore[num523].velocity.X;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					ptr = ref Main.gore[num523].velocity.Y;
					ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
					num1032 = num521;
				}
			}
			else if (this.type == 475 || this.type == 505 || this.type == 506)
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.ai[1] < 10f)
				{
					Vector2 vector54;
					vector54..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num524 = 0f - this.velocity.X;
					float num525 = 0f - this.velocity.Y;
					float num526 = 1f;
					if (this.ai[0] <= 17f)
					{
						num526 = this.ai[0] / 17f;
					}
					int num527 = (int)(30f * num526);
					float num528 = 1f;
					if (this.ai[0] <= 30f)
					{
						num528 = this.ai[0] / 30f;
					}
					float num529 = 0.4f * num528;
					float num530 = num529;
					num525 += num530;
					int num1032;
					for (int num531 = 0; num531 < num527; num531 = num1032 + 1)
					{
						float num532 = (float)Math.Sqrt((double)(num524 * num524 + num525 * num525));
						float num533 = 5.6f;
						if (Math.Abs(num524) + Math.Abs(num525) < 1f)
						{
							num533 *= Math.Abs(num524) + Math.Abs(num525) / 1f;
						}
						num532 = num533 / num532;
						num524 *= num532;
						num525 *= num532;
						Math.Atan2((double)num525, (double)num524);
						int num534 = 3;
						if (this.type == 506)
						{
							num534 = 30;
						}
						if (this.type == 505)
						{
							num534 = 239;
						}
						if ((float)num531 > this.ai[1])
						{
							for (int num535 = 0; num535 < 4; num535 = num1032 + 1)
							{
								int num536 = Dust.NewDust(vector54, this.width, this.height, num534, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num536].noGravity = true;
								Dust dust193 = Main.dust[num536];
								Dust dust334 = dust193;
								dust334.velocity *= 0.3f;
								num1032 = num535;
							}
						}
						ref float ptr = ref vector54.X;
						ptr += num524;
						ptr = ref vector54.Y;
						ptr += num525;
						num524 = 0f - this.velocity.X;
						num525 = 0f - this.velocity.Y;
						num530 += num529;
						num525 += num530;
						num1032 = num531;
					}
				}
			}
			else if (this.type == 171)
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.ai[1] < 10f)
				{
					Vector2 vector55;
					vector55..ctor(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num537 = 0f - this.velocity.X;
					float num538 = 0f - this.velocity.Y;
					float num539 = 1f;
					if (this.ai[0] <= 17f)
					{
						num539 = this.ai[0] / 17f;
					}
					int num540 = (int)(30f * num539);
					float num541 = 1f;
					if (this.ai[0] <= 30f)
					{
						num541 = this.ai[0] / 30f;
					}
					float num542 = 0.4f * num541;
					float num543 = num542;
					num538 += num543;
					int num1032;
					for (int num544 = 0; num544 < num540; num544 = num1032 + 1)
					{
						float num545 = (float)Math.Sqrt((double)(num537 * num537 + num538 * num538));
						float num546 = 5.6f;
						if (Math.Abs(num537) + Math.Abs(num538) < 1f)
						{
							num546 *= Math.Abs(num537) + Math.Abs(num538) / 1f;
						}
						num545 = num546 / num545;
						num537 *= num545;
						num538 *= num545;
						Math.Atan2((double)num538, (double)num537);
						if ((float)num544 > this.ai[1])
						{
							for (int num547 = 0; num547 < 4; num547 = num1032 + 1)
							{
								int num548 = Dust.NewDust(vector55, this.width, this.height, 129, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num548].noGravity = true;
								Dust dust194 = Main.dust[num548];
								Dust dust334 = dust194;
								dust334.velocity *= 0.3f;
								num1032 = num547;
							}
						}
						ref float ptr = ref vector55.X;
						ptr += num537;
						ptr = ref vector55.Y;
						ptr += num538;
						num537 = 0f - this.velocity.X;
						num538 = 0f - this.velocity.Y;
						num543 += num542;
						num538 += num543;
						num1032 = num544;
					}
				}
			}
			else if (this.type == 117)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num549 = 0; num549 < 10; num549 = num1032 + 1)
				{
					Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 1f);
					num1032 = num549;
				}
			}
			else if (this.type == 166)
			{
				SoundEngine.PlaySound(SoundID.Item51, new Vector2?(this.position), null);
				int num1032;
				for (int num550 = 0; num550 < 10; num550 = num1032 + 1)
				{
					int num551 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num551].noGravity = true;
					Dust dust195 = Main.dust[num551];
					Dust dust334 = dust195;
					dust334.velocity -= this.oldVelocity * 0.25f;
					num1032 = num550;
				}
			}
			else if (this.type == 158)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num552 = 0; num552 < 10; num552 = num1032 + 1)
				{
					int num553 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 9, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num553].noGravity = true;
					Dust dust196 = Main.dust[num553];
					Dust dust334 = dust196;
					dust334.velocity -= this.velocity * 0.5f;
					num1032 = num552;
				}
			}
			else if (this.type == 159)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num554 = 0; num554 < 10; num554 = num1032 + 1)
				{
					int num555 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num555].noGravity = true;
					Dust dust197 = Main.dust[num555];
					Dust dust334 = dust197;
					dust334.velocity -= this.velocity * 0.5f;
					num1032 = num554;
				}
			}
			else if (this.type == 160)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num556 = 0; num556 < 10; num556 = num1032 + 1)
				{
					int num557 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 19, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num557].noGravity = true;
					Dust dust198 = Main.dust[num557];
					Dust dust334 = dust198;
					dust334.velocity -= this.velocity * 0.5f;
					num1032 = num556;
				}
			}
			else if (this.type == 161)
			{
				SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num1032;
				for (int num558 = 0; num558 < 10; num558 = num1032 + 1)
				{
					int num559 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num559].noGravity = true;
					Dust dust199 = Main.dust[num559];
					Dust dust334 = dust199;
					dust334.velocity -= this.velocity * 0.5f;
					num1032 = num558;
				}
			}
			else if (this.type >= 191 && this.type <= 194)
			{
				int num560 = Gore.NewGore(new Vector2(this.position.X - (float)(this.width / 2), this.position.Y - (float)(this.height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), this.scale);
				Gore gore22 = Main.gore[num560];
				Gore gore64 = gore22;
				gore64.velocity *= 0.1f;
			}
			else if (!Main.projPet[this.type])
			{
				if (this.type == 93)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num561 = 0; num561 < 10; num561 = num1032 + 1)
					{
						int num562 = Dust.NewDust(this.position, this.width, this.height, 57, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num562].noGravity = true;
						Main.dust[num562].fadeIn = 1f;
						ref float ptr = ref Main.dust[num562].velocity.X;
						ptr *= 2f;
						ptr = ref Main.dust[num562].velocity.Y;
						ptr *= 2f;
						ptr = ref Main.dust[num562].velocity.Y;
						ptr -= Main.rand.NextFloat() * 1.5f;
						num1032 = num561;
					}
				}
				else if (this.type == 99 || this.type == 1013 || this.type == 727 || this.type == 1014 || this.type == 1021)
				{
					int num1032 = this.type;
					short num563;
					if (num1032 <= 1013)
					{
						if (num1032 == 727)
						{
							num563 = 40;
							goto IL_1544C;
						}
						if (num1032 == 1013)
						{
							num563 = 243;
							goto IL_1544C;
						}
					}
					else
					{
						if (num1032 == 1014)
						{
							num563 = 12;
							goto IL_1544C;
						}
						if (num1032 == 1021)
						{
							num563 = 323;
							goto IL_1544C;
						}
					}
					num563 = 1;
					IL_1544C:
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					for (int num564 = 0; num564 < 30; num564 = num1032 + 1)
					{
						int num565 = Dust.NewDust(this.position, this.width, this.height, (int)num563, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust200 = Main.dust[num565];
							Dust dust334 = dust200;
							dust334.scale *= 1.4f;
						}
						this.velocity *= 1.9f;
						num1032 = num564;
					}
					if (this.type == 1014 && this.owner == Main.myPlayer)
					{
						int number = Item.NewItem(new EntitySource_Loot(this, null), this.position, base.Size, 29, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				else if (this.type == 1005)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num566 = 0; num566 < 10; num566 = num1032 + 1)
					{
						int num567 = Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust201 = Main.dust[num567];
							Dust dust334 = dust201;
							dust334.scale *= 1.1f;
						}
						this.velocity *= 1.6f;
						num1032 = num566;
					}
				}
				else if (this.type == 772)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num568 = 0; num568 < 6; num568 = num1032 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
						this.velocity *= 1.9f;
						num1032 = num568;
					}
					for (int num569 = 0; num569 < 20; num569 = num1032 + 1)
					{
						Dust dust202 = Dust.NewDustDirect(this.position, this.width, this.height, Main.rand.NextFromList(new int[]
						{
							86,
							87,
							88,
							89,
							90
						}), 0f, 0f, 0, default(Color), 0.7f);
						dust202.noGravity = true;
						Dust dust203 = dust202;
						Dust dust334 = dust203;
						dust334.velocity *= 2.9f;
						ref float ptr = ref dust202.velocity.Y;
						ptr *= 0.8f;
						dust202.fadeIn = 1.1f;
						num1032 = num569;
					}
					for (int num570 = 0; num570 < 7; num570 = num1032 + 1)
					{
						Dust dust204 = Dust.NewDustDirect(this.position, this.width, this.height, Main.rand.NextFromList(new int[]
						{
							86,
							87,
							88,
							89,
							90
						}), 0f, 0f, 0, default(Color), 0.7f);
						dust204.noGravity = true;
						Dust dust205 = dust204;
						Dust dust334 = dust205;
						dust334.velocity *= 2.9f;
						ref float ptr = ref dust204.velocity.Y;
						ptr *= 0.8f;
						dust204.fadeIn = 1.1f;
						dust204.noLight = true;
						num1032 = num570;
					}
					if (this.owner == Main.myPlayer)
					{
						this.DropGeodeGems();
					}
				}
				else if (this.type == 763)
				{
					int num1032;
					for (int num571 = 0; num571 < 4; num571 = num1032 + 1)
					{
						int num572 = Dust.NewDust(this.position, this.width, this.height, 40, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust206 = Main.dust[num572];
							Dust dust334 = dust206;
							dust334.scale *= 0.8f;
						}
						Main.dust[num572].noGravity = true;
						this.velocity *= 1.9f;
						num1032 = num571;
					}
				}
				else if (this.type == 655)
				{
					SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num573 = 0; num573 < 30; num573 = num1032 + 1)
					{
						int num574 = Dust.NewDust(this.position, this.width, this.height, 147, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust207 = Main.dust[num574];
							Dust dust334 = dust207;
							dust334.scale *= 1.4f;
						}
						this.velocity *= 1.9f;
						num1032 = num573;
					}
					if (Main.netMode != 1 && !this.wet)
					{
						int num575 = 2;
						if (Main.rand.Next(3) == 0)
						{
							num1032 = num575;
							num575 = num1032 + 1;
						}
						if (Main.rand.Next(3) == 0)
						{
							num1032 = num575;
							num575 = num1032 + 1;
						}
						if (Main.rand.Next(3) == 0)
						{
							num1032 = num575;
							num575 = num1032 + 1;
						}
						int availableAmountOfNPCsToSpawnUpToSlot = NPC.GetAvailableAmountOfNPCsToSpawnUpToSlot(num575, 100);
						for (int num576 = 0; num576 < availableAmountOfNPCsToSpawnUpToSlot; num576 = num1032 + 1)
						{
							int num577 = Main.rand.Next(210, 212);
							int num578 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, num577, 1, 0f, 0f, 0f, 0f, 255);
							Main.npc[num578].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num578].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num578].netUpdate = true;
							num1032 = num576;
						}
					}
				}
				else if (this.type == 728)
				{
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					int num1032;
					for (int num579 = 0; num579 < 7; num579 = num1032 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 0.8f);
						num1032 = num579;
					}
					for (float num580 = 0f; num580 < 1f; num580 += 0.125f)
					{
						Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num580 * 6.2831855f + Main.rand.NextFloat() * 0.5f), default(Vector2)) * (4f + Main.rand.NextFloat() * 4f)), 150, Color.CornflowerBlue, 1f).noGravity = true;
					}
					for (float num581 = 0f; num581 < 1f; num581 += 0.25f)
					{
						Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num581 * 6.2831855f + Main.rand.NextFloat() * 0.5f), default(Vector2)) * (2f + Main.rand.NextFloat() * 3f)), 150, Color.Gold, 1f).noGravity = true;
					}
					Vector2 vector56;
					vector56..ctor((float)Main.screenWidth, (float)Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector56 / 2f, vector56 + new Vector2(400f))))
					{
						for (int num582 = 0; num582 < 7; num582 = num1032 + 1)
						{
							Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * this.velocity.Length(), Utils.SelectRandom<int>(Main.rand, new int[]
							{
								16,
								17,
								17,
								17,
								17,
								17,
								17,
								17
							}), 1f);
							num1032 = num582;
						}
					}
				}
				else if (this.type == 729)
				{
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					int num1032;
					for (int num583 = 0; num583 < 10; num583 = num1032 + 1)
					{
						Dust dust208 = Dust.NewDustDirect(this.position, this.width, this.height, 279, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						dust208.noGravity = true;
						ref float ptr = ref dust208.velocity.X;
						ptr *= 2f;
						num1032 = num583;
					}
				}
				else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726 || this.type == 907)
				{
					if (this.type == 723)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num584 = 0; num584 < 10; num584 = num1032 + 1)
						{
							Dust dust209 = Dust.NewDustDirect(this.position, this.width, this.height, 88, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							dust209.noGravity = true;
							ref float ptr = ref dust209.velocity.X;
							ptr *= 2f;
							num1032 = num584;
						}
						for (int num585 = 0; num585 < 3; num585 = num1032 + 1)
						{
							Gore gore23 = Gore.NewGoreDirect(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, new int[]
							{
								16,
								17,
								17
							}), 1f);
							Gore gore24 = gore23;
							Gore gore64 = gore24;
							gore64.velocity *= 2f;
							num1032 = num585;
						}
						if (this.owner == Main.myPlayer && Main.player[this.owner].starCloakCooldown == 0)
						{
							Main.player[this.owner].starCloakCooldown = 60;
							int number2 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 4143, 1, false, 0, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else
					{
						if (this.type == 907)
						{
							SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						}
						int num1032;
						for (int num586 = 0; num586 < 10; num586 = num1032 + 1)
						{
							Dust dust210 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f)];
							if (this.type == 907)
							{
								Dust dust211 = dust210;
								Dust dust334 = dust211;
								dust334.velocity *= 0.75f;
							}
							num1032 = num586;
						}
						for (int num587 = 0; num587 < 3; num587 = num1032 + 1)
						{
							Gore gore25 = Main.gore[Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f)];
							if (this.type == 907)
							{
								Gore gore26 = gore25;
								Gore gore64 = gore26;
								gore64.velocity *= 0.5f;
							}
							num1032 = num587;
						}
					}
				}
				else if (this.type == 91 || this.type == 92)
				{
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					int num1032;
					for (int num588 = 0; num588 < 10; num588 = num1032 + 1)
					{
						Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						num1032 = num588;
					}
					for (int num589 = 0; num589 < 3; num589 = num1032 + 1)
					{
						Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
						num1032 = num589;
					}
					if ((this.type == 91 || (this.type == 92 && this.ai[0] > 0f)) && this.owner == Main.myPlayer)
					{
						float x = this.position.X + (float)Main.rand.Next(-400, 400);
						float y = this.position.Y - (float)Main.rand.Next(600, 900);
						Vector2 vector57;
						vector57..ctor(x, y);
						float num590 = this.position.X + (float)(this.width / 2) - vector57.X;
						float num591 = this.position.Y + (float)(this.height / 2) - vector57.Y;
						int num592 = 22;
						float num593 = (float)Math.Sqrt((double)(num590 * num590 + num591 * num591));
						num593 = (float)num592 / num593;
						num590 *= num593;
						num591 *= num593;
						int num594 = this.damage;
						if (this.type == 91)
						{
							num594 /= 3;
						}
						int num595 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), x, y, num590, num591, 92, num594, this.knockBack, this.owner, 0f, 0f, 0f);
						if (this.type == 91)
						{
							Main.projectile[num595].ai[1] = this.position.Y;
							Main.projectile[num595].ai[0] = 1f;
						}
						else
						{
							Main.projectile[num595].ai[1] = this.position.Y;
						}
					}
				}
				else if (this.type == 89)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num596 = 0; num596 < 5; num596 = num1032 + 1)
					{
						int num597 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 68, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num597].noGravity = true;
						Dust dust212 = Main.dust[num597];
						Dust dust334 = dust212;
						dust334.velocity *= 1.5f;
						dust212 = Main.dust[num597];
						dust334 = dust212;
						dust334.scale *= 0.9f;
						num1032 = num596;
					}
					if (this.type == 89 && this.owner == Main.myPlayer)
					{
						for (int num598 = 0; num598 < 2; num598 = num1032 + 1)
						{
							float num599 = (0f - this.velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							float num600 = (0f - this.velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + num599, this.position.Y + num600, num599, num600, 90, (int)((double)this.damage * 0.5), 0f, this.owner, 0f, 0f, 0f);
							num1032 = num598;
						}
					}
				}
				else if (this.type == 967)
				{
					SoundEngine.PlaySound(SoundID.Item45, new Vector2?(this.position), null);
					int num1032;
					for (int num601 = 0; num601 < 20; num601 = num1032 + 1)
					{
						int num602 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, 0, default(Color), 0.5f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num602].noGravity = true;
						Main.dust[num602].velocity = Main.rand.NextVector2Circular(6f, 6f);
						num1032 = num601;
					}
				}
				else if (this.type == 969)
				{
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
					if (activeSound2 != null)
					{
						activeSound2.Volume = 0f;
						activeSound2.Stop();
					}
				}
				else if (this.type == 177)
				{
					int num1032;
					for (int num603 = 0; num603 < 20; num603 = num1032 + 1)
					{
						int num604 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Dust dust213 = Main.dust[num604];
						Dust dust334 = dust213;
						dust334.velocity -= this.oldVelocity * 0.2f;
						if (Main.rand.Next(3) == 0)
						{
							dust213 = Main.dust[num604];
							dust334 = dust213;
							dust334.scale *= 0.8f;
							dust213 = Main.dust[num604];
							dust334 = dust213;
							dust334.velocity *= 0.5f;
						}
						else
						{
							Main.dust[num604].noGravity = true;
						}
						num1032 = num603;
					}
				}
				else if (this.type == 119 || this.type == 118 || this.type == 128 || this.type == 359)
				{
					int num605 = 10;
					if (this.type == 119 || this.type == 359)
					{
						num605 = 20;
					}
					SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
					int num1032;
					for (int num606 = 0; num606 < num605; num606 = num1032 + 1)
					{
						int num607 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Dust dust214 = Main.dust[num607];
							Dust dust334 = dust214;
							dust334.velocity *= 2f;
							Main.dust[num607].noGravity = true;
							dust214 = Main.dust[num607];
							dust334 = dust214;
							dust334.scale *= 1.75f;
						}
						else
						{
							Dust dust215 = Main.dust[num607];
							Dust dust334 = dust215;
							dust334.scale *= 0.5f;
						}
						num1032 = num606;
					}
				}
				else if (this.type == 309)
				{
					int num608 = 10;
					SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
					int num1032;
					for (int num609 = 0; num609 < num608; num609 = num1032 + 1)
					{
						int num610 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust216 = Main.dust[num610];
							Dust dust334 = dust216;
							dust334.velocity *= 2f;
							Main.dust[num610].noGravity = true;
							dust216 = Main.dust[num610];
							dust334 = dust216;
							dust334.scale *= 1.75f;
						}
						num1032 = num609;
					}
				}
				else if (this.type == 308)
				{
					int num611 = 80;
					SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
					int num1032;
					for (int num612 = 0; num612 < num611; num612 = num1032 + 1)
					{
						int num613 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0f, 0f, 0, default(Color), 1f);
						Dust dust217 = Main.dust[num613];
						Dust dust334 = dust217;
						dust334.velocity *= 2f;
						Main.dust[num613].noGravity = true;
						dust217 = Main.dust[num613];
						dust334 = dust217;
						dust334.scale *= 1.15f;
						num1032 = num612;
					}
				}
				else if (this.aiStyle == 29 && this.type <= 126)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num614 = this.type - 121 + 86;
					int num1032;
					for (int num615 = 0; num615 < 15; num615 = num1032 + 1)
					{
						int num616 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num614, this.oldVelocity.X, this.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num616].noGravity = true;
						Dust dust218 = Main.dust[num616];
						Dust dust334 = dust218;
						dust334.scale *= 1.25f;
						dust218 = Main.dust[num616];
						dust334 = dust218;
						dust334.velocity *= 0.5f;
						num1032 = num615;
					}
				}
				else if (this.type == 597)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num617 = 0; num617 < 15; num617 = num1032 + 1)
					{
						int num618 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 262, this.oldVelocity.X, this.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num618].noGravity = true;
						Dust dust219 = Main.dust[num618];
						Dust dust334 = dust219;
						dust334.scale *= 1.25f;
						dust219 = Main.dust[num618];
						dust334 = dust219;
						dust334.velocity *= 0.5f;
						num1032 = num617;
					}
				}
				else if (this.type == 731)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num619 = 0; num619 < 15; num619 = num1032 + 1)
					{
						Dust dust220 = Dust.NewDustDirect(this.position, this.width, this.height, 226, this.oldVelocity.X * 0.5f, this.oldVelocity.Y * 0.5f, 50, default(Color), 0.5f);
						if (Main.rand.Next(3) != 0)
						{
							dust220.noGravity = true;
							Dust dust221 = dust220;
							Dust dust334 = dust221;
							dust334.scale *= 1.5f;
							dust221 = dust220;
							dust334 = dust221;
							dust334.velocity *= 0.5f;
						}
						num1032 = num619;
					}
				}
				else if (this.type == 337)
				{
					SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
					int num1032;
					for (int num620 = 0; num620 < 10; num620 = num1032 + 1)
					{
						int num621 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num621].noGravity = true;
						num1032 = num620;
					}
				}
				else if (this.type == 379 || this.type == 377)
				{
					int num1032;
					for (int num622 = 0; num622 < 5; num622 = num1032 + 1)
					{
						int num623 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num623].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num623].noGravity = true;
						Main.dust[num623].fadeIn = 1.5f;
						Dust dust222 = Main.dust[num623];
						Dust dust334 = dust222;
						dust334.velocity *= 0.75f;
						num1032 = num622;
					}
				}
				else if (this.type == 80)
				{
					if (this.ai[0] >= 0f)
					{
						SoundEngine.PlaySound(SoundID.Item27, new Vector2?(this.position), null);
						int num1032;
						for (int num624 = 0; num624 < 10; num624 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0f, 0f, 0, default(Color), 1f);
							num1032 = num624;
						}
					}
					int num625 = (int)this.position.X / 16;
					int num626 = (int)this.position.Y / 16;
					Tile value14;
					if (Main.tile[num625, num626] == null)
					{
						int x3 = num625;
						int y9 = num626;
						value14 = default(Tile);
						Main.tile[x3, y9] = value14;
					}
					value14 = Main.tile[num625, num626];
					if (*value14.type == 127)
					{
						value14 = Main.tile[num625, num626];
						if (value14.active())
						{
							WorldGen.KillTile(num625, num626, false, false, false);
						}
					}
				}
				else if (this.type == 76 || this.type == 77 || this.type == 78)
				{
					int num1032;
					for (int num627 = 0; num627 < 5; num627 = num1032 + 1)
					{
						int num628 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 80, default(Color), 1.5f);
						Main.dust[num628].noGravity = true;
						num1032 = num627;
					}
				}
				else if (this.type == 55 || this.type == 719)
				{
					int num1032;
					for (int num629 = 0; num629 < 5; num629 = num1032 + 1)
					{
						int num630 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num630].noGravity = true;
						num1032 = num629;
					}
				}
				else if (this.type == 51 || this.type == 267)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num631 = 0; num631 < 5; num631 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 0.7f);
						num1032 = num631;
					}
				}
				else if (this.type == 478)
				{
					if (this.owner == Main.myPlayer)
					{
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0f, 0f, 0f);
					}
				}
				else if (this.type == 477 || this.type == 479)
				{
					int num1032;
					for (int num632 = 0; num632 < 5; num632 = num1032 + 1)
					{
						num1032 = num632;
					}
					Collision.HitTiles(this.position, this.velocity, this.width, this.height);
				}
				else if (this.type == 2 || this.type == 82)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num633 = 0; num633 < 10; num633 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
						num1032 = num633;
					}
				}
				else if (this.type == 474)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num634 = 0; num634 < 20; num634 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 0.9f);
						num1032 = num634;
					}
				}
				else if (this.type == 172)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num635 = 0; num635 < 20; num635 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0f, 0f, 100, default(Color), 1f);
						num1032 = num635;
					}
				}
				else if (this.type == 103)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num636 = 0; num636 < 20; num636 = num1032 + 1)
					{
						int num637 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust223 = Main.dust[num637];
							Dust dust334 = dust223;
							dust334.scale *= 2.5f;
							Main.dust[num637].noGravity = true;
							dust223 = Main.dust[num637];
							dust334 = dust223;
							dust334.velocity *= 5f;
						}
						num1032 = num636;
					}
				}
				else if (this.type == 278)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num638 = 0; num638 < 20; num638 = num1032 + 1)
					{
						int num639 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust224 = Main.dust[num639];
							Dust dust334 = dust224;
							dust334.scale *= 1.5f;
							Main.dust[num639].noGravity = true;
							dust224 = Main.dust[num639];
							dust334 = dust224;
							dust334.velocity *= 5f;
						}
						num1032 = num638;
					}
				}
				else if (this.type == 3 || this.type == 48 || this.type == 54 || this.type == 599 || this.type == 909)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num640 = 0; num640 < 10; num640 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
						num1032 = num640;
					}
				}
				else if (this.type == 330)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num641 = 0; num641 < 10; num641 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 0, default(Color), 0.75f);
						num1032 = num641;
					}
				}
				else if (this.type == 4)
				{
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					int num1032;
					for (int num642 = 0; num642 < 10; num642 = num1032 + 1)
					{
						Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 150, default(Color), 1.1f);
						num1032 = num642;
					}
				}
				else if (this.type == 5)
				{
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					int num1032;
					for (int num643 = 0; num643 < 60; num643 = num1032 + 1)
					{
						num1032 = Main.rand.Next(3);
						int num644;
						if (num1032 != 0)
						{
							if (num1032 != 1)
							{
								num644 = 58;
							}
							else
							{
								num644 = 57;
							}
						}
						else
						{
							num644 = 15;
						}
						Dust.NewDust(this.position, this.width, this.height, num644, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.5f);
						num1032 = num643;
					}
				}
				else if (this.type == 9 || this.type == 12 || this.type == 503 || this.type == 955)
				{
					SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					if (this.type == 12 || this.type == 955)
					{
						Color newColor7 = Color.CornflowerBlue;
						if (Main.tenthAnniversaryWorld && (this.type == 12 || this.type == 955))
						{
							newColor7 = Color.HotPink;
							ref Color ptr2 = ref newColor7;
							ptr2.A /= 2;
						}
						int num1032;
						for (int num645 = 0; num645 < 7; num645 = num1032 + 1)
						{
							Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 0.8f);
							num1032 = num645;
						}
						for (float num646 = 0f; num646 < 1f; num646 += 0.125f)
						{
							Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num646 * 6.2831855f + Main.rand.NextFloat() * 0.5f), default(Vector2)) * (4f + Main.rand.NextFloat() * 4f)), 150, newColor7, 1f).noGravity = true;
						}
						for (float num647 = 0f; num647 < 1f; num647 += 0.25f)
						{
							Dust.NewDustPerfect(base.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num647 * 6.2831855f + Main.rand.NextFloat() * 0.5f), default(Vector2)) * (2f + Main.rand.NextFloat() * 3f)), 150, Color.Gold, 1f).noGravity = true;
						}
						Vector2 vector58;
						vector58..ctor((float)Main.screenWidth, (float)Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector58 / 2f, vector58 + new Vector2(400f))))
						{
							for (int num648 = 0; num648 < 7; num648 = num1032 + 1)
							{
								Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * this.velocity.Length(), Utils.SelectRandom<int>(Main.rand, new int[]
								{
									16,
									17,
									17,
									17,
									17,
									17,
									17,
									17
								}), 1f);
								num1032 = num648;
							}
						}
					}
					else
					{
						int num649 = 10;
						int num650 = 3;
						if (this.type == 503)
						{
							num649 = 40;
							num650 = 2;
							this.velocity /= 2f;
						}
						int num1032;
						for (int num651 = 0; num651 < num649; num651 = num1032 + 1)
						{
							Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							num1032 = num651;
						}
						for (int num652 = 0; num652 < num650; num652 = num1032 + 1)
						{
							int num653 = Main.rand.Next(16, 18);
							if (this.type == 503)
							{
								num653 = 16;
							}
							Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), num653, 1f);
							num1032 = num652;
						}
						if (this.type == 12 && this.damage < 100)
						{
							for (int num654 = 0; num654 < 10; num654 = num1032 + 1)
							{
								Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, default(Color), 1.2f);
								num1032 = num654;
							}
							for (int num655 = 0; num655 < 3; num655 = num1032 + 1)
							{
								Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
								num1032 = num655;
							}
						}
					}
				}
				else if (this.type == 281)
				{
					if (this.ai[0] != -3f)
					{
						SoundEngine.PlaySound(4, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num656 = Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76, 1f);
						Gore gore27 = Main.gore[num656];
						Gore gore64 = gore27;
						gore64.velocity -= this.velocity * 0.5f;
						num656 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77, 1f);
						gore27 = Main.gore[num656];
						gore64 = gore27;
						gore64.velocity -= this.velocity * 0.5f;
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num657 = 0; num657 < 20; num657 = num1032 + 1)
						{
							int num658 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust225 = Main.dust[num658];
							Dust dust334 = dust225;
							dust334.velocity *= 1.4f;
							num1032 = num657;
						}
						for (int num659 = 0; num659 < 10; num659 = num1032 + 1)
						{
							int num660 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num660].noGravity = true;
							Dust dust226 = Main.dust[num660];
							Dust dust334 = dust226;
							dust334.velocity *= 5f;
							num660 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust226 = Main.dust[num660];
							dust334 = dust226;
							dust334.velocity *= 3f;
							num1032 = num659;
						}
						num656 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore27 = Main.gore[num656];
						gore64 = gore27;
						gore64.velocity *= 0.4f;
						ref float ptr = ref Main.gore[num656].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num656].velocity.Y;
						ptr += 1f;
						num656 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore27 = Main.gore[num656];
						gore64 = gore27;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num656].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num656].velocity.Y;
						ptr += 1f;
						num656 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore27 = Main.gore[num656];
						gore64 = gore27;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num656].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num656].velocity.Y;
						ptr -= 1f;
						num656 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore27 = Main.gore[num656];
						gore64 = gore27;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num656].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num656].velocity.Y;
						ptr -= 1f;
						if (this.damage > 0)
						{
							ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 128;
							this.height = 128;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
							if (this.ai[0] == -2f)
							{
								this.hostile = true;
							}
							this.Damage();
						}
					}
				}
				else if (this.type == 162)
				{
					SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					int num1032;
					for (int num661 = 0; num661 < 20; num661 = num1032 + 1)
					{
						int num662 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust227 = Main.dust[num662];
						Dust dust334 = dust227;
						dust334.velocity *= 1.4f;
						num1032 = num661;
					}
					for (int num663 = 0; num663 < 10; num663 = num1032 + 1)
					{
						int num664 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num664].noGravity = true;
						Dust dust228 = Main.dust[num664];
						Dust dust334 = dust228;
						dust334.velocity *= 5f;
						num664 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust228 = Main.dust[num664];
						dust334 = dust228;
						dust334.velocity *= 3f;
						num1032 = num663;
					}
					int num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore28 = Main.gore[num665];
					Gore gore64 = gore28;
					gore64.velocity *= 0.4f;
					ref float ptr = ref Main.gore[num665].velocity.X;
					ptr += 1f;
					ptr = ref Main.gore[num665].velocity.Y;
					ptr += 1f;
					num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore28 = Main.gore[num665];
					gore64 = gore28;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num665].velocity.X;
					ptr -= 1f;
					ptr = ref Main.gore[num665].velocity.Y;
					ptr += 1f;
					num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore28 = Main.gore[num665];
					gore64 = gore28;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num665].velocity.X;
					ptr += 1f;
					ptr = ref Main.gore[num665].velocity.Y;
					ptr -= 1f;
					num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore28 = Main.gore[num665];
					gore64 = gore28;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num665].velocity.X;
					ptr -= 1f;
					ptr = ref Main.gore[num665].velocity.Y;
					ptr -= 1f;
					ptr = ref this.position.X;
					ptr += (float)(this.width / 2);
					ptr = ref this.position.Y;
					ptr += (float)(this.height / 2);
					this.width = 128;
					this.height = 128;
					ptr = ref this.position.X;
					ptr -= (float)(this.width / 2);
					ptr = ref this.position.Y;
					ptr -= (float)(this.height / 2);
					this.Damage();
				}
				else if (this.type == 240)
				{
					SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
					int num1032;
					for (int num666 = 0; num666 < 20; num666 = num1032 + 1)
					{
						int num667 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust229 = Main.dust[num667];
						Dust dust334 = dust229;
						dust334.velocity *= 1.4f;
						num1032 = num666;
					}
					for (int num668 = 0; num668 < 10; num668 = num1032 + 1)
					{
						int num669 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num669].noGravity = true;
						Dust dust230 = Main.dust[num669];
						Dust dust334 = dust230;
						dust334.velocity *= 5f;
						num669 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust230 = Main.dust[num669];
						dust334 = dust230;
						dust334.velocity *= 3f;
						num1032 = num668;
					}
					int num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					Gore gore29 = Main.gore[num670];
					Gore gore64 = gore29;
					gore64.velocity *= 0.4f;
					ref float ptr = ref Main.gore[num670].velocity.X;
					ptr += 1f;
					ptr = ref Main.gore[num670].velocity.Y;
					ptr += 1f;
					num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore29 = Main.gore[num670];
					gore64 = gore29;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num670].velocity.X;
					ptr -= 1f;
					ptr = ref Main.gore[num670].velocity.Y;
					ptr += 1f;
					num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore29 = Main.gore[num670];
					gore64 = gore29;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num670].velocity.X;
					ptr += 1f;
					ptr = ref Main.gore[num670].velocity.Y;
					ptr -= 1f;
					num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
					gore29 = Main.gore[num670];
					gore64 = gore29;
					gore64.velocity *= 0.4f;
					ptr = ref Main.gore[num670].velocity.X;
					ptr -= 1f;
					ptr = ref Main.gore[num670].velocity.Y;
					ptr -= 1f;
					ptr = ref this.position.X;
					ptr += (float)(this.width / 2);
					ptr = ref this.position.Y;
					ptr += (float)(this.height / 2);
					this.width = 96;
					this.height = 96;
					ptr = ref this.position.X;
					ptr -= (float)(this.width / 2);
					ptr = ref this.position.Y;
					ptr -= (float)(this.height / 2);
					this.Damage();
				}
				else
				{
					int num1035 = this.type;
					if (this.type == 283 || this.type == 282)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num671 = 0; num671 < 10; num671 = num1032 + 1)
						{
							int num672 = Dust.NewDust(this.position, this.width, this.height, 171, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num672].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num672].noGravity = true;
							Main.dust[num672].fadeIn = 1.5f;
							Dust dust231 = Main.dust[num672];
							Dust dust334 = dust231;
							dust334.velocity *= 0.75f;
							num1032 = num671;
						}
					}
					else if (this.type == 284)
					{
						int num1032;
						for (int num673 = 0; num673 < 10; num673 = num1032 + 1)
						{
							int num674 = Main.rand.Next(139, 143);
							int num675 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num674, (0f - this.velocity.X) * 0.3f, (0f - this.velocity.Y) * 0.3f, 0, default(Color), 1.2f);
							ref float ptr = ref Main.dust[num675].velocity.X;
							ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.dust[num675].velocity.Y;
							ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.dust[num675].velocity.X;
							ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.dust[num675].velocity.Y;
							ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.dust[num675].velocity.X;
							ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
							ptr = ref Main.dust[num675].velocity.Y;
							ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
							Dust dust232 = Main.dust[num675];
							Dust dust334 = dust232;
							dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num1032 = num673;
						}
						for (int num676 = 0; num676 < 5; num676 = num1032 + 1)
						{
							int num677 = Main.rand.Next(276, 283);
							int num678 = Gore.NewGore(this.position, -this.velocity * 0.3f, num677, 1f);
							ref float ptr = ref Main.gore[num678].velocity.X;
							ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.gore[num678].velocity.Y;
							ptr += (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.gore[num678].velocity.X;
							ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							ptr = ref Main.gore[num678].velocity.Y;
							ptr *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Gore gore30 = Main.gore[num678];
							Gore gore64 = gore30;
							gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							ptr = ref Main.gore[num678].velocity.X;
							ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
							ptr = ref Main.gore[num678].velocity.Y;
							ptr += (float)Main.rand.Next(-50, 51) * 0.05f;
							num1032 = num676;
						}
					}
					else if (this.type == 286)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num679 = 0; num679 < 7; num679 = num1032 + 1)
						{
							int num680 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							num1032 = num679;
						}
						for (int num681 = 0; num681 < 3; num681 = num1032 + 1)
						{
							int num682 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num682].noGravity = true;
							Dust dust233 = Main.dust[num682];
							Dust dust334 = dust233;
							dust334.velocity *= 3f;
							num682 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust233 = Main.dust[num682];
							dust334 = dust233;
							dust334.velocity *= 2f;
							num1032 = num681;
						}
						int num683 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore31 = Main.gore[num683];
						Gore gore64 = gore31;
						gore64.velocity *= 0.3f;
						ref float ptr = ref Main.gore[num683].velocity.X;
						ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
						ptr = ref Main.gore[num683].velocity.Y;
						ptr += (float)Main.rand.Next(-10, 11) * 0.05f;
						if (this.owner == Main.myPlayer)
						{
							this.localAI[1] = -1f;
							this.maxPenetrate = 0;
							ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 80;
							this.height = 80;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
							this.Damage();
						}
					}
					else if (this.type == 14 || this.type == 20 || this.type == 36 || this.type == 83 || this.type == 84 || this.type == 389 || this.type == 104 || this.type == 279 || this.type == 100 || this.type == 110 || this.type == 180 || this.type == 207 || this.type == 357 || this.type == 242 || this.type == 302 || this.type == 257 || this.type == 259 || this.type == 285 || this.type == 287 || this.type == 576 || this.type == 577 || this.type == 876 || this.type == 968)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
					}
					else if (this.type == 981)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.SilverBulletSparkle, new ParticleOrchestraSettings
						{
							PositionInWorld = base.Center,
							MovementVector = Vector2.Zero
						}, new int?(this.owner));
					}
					else if (this.type == 1006)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(0, this.position, 1);
						float num684 = Main.rand.NextFloat() * 6.2831855f;
						for (float num685 = 0f; num685 < 1f; num685 += 1f)
						{
							float num686 = num684 + 6.2831855f * num685;
							Vector2 vector59 = Vector2.UnitX.RotatedBy((double)num686, default(Vector2));
							Vector2 center = base.Center;
							float num687 = 0.4f;
							ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.ShimmerArrow, new ParticleOrchestraSettings
							{
								PositionInWorld = center,
								MovementVector = vector59 * num687
							}, new int?(this.owner));
						}
					}
					else if (this.type == 660)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num688 = Main.rand.Next(4, 10);
						int num1032;
						for (int num689 = 0; num689 < num688; num689 = num1032 + 1)
						{
							int num690 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100, default(Color), 1f);
							Dust dust234 = Main.dust[num690];
							Dust dust334 = dust234;
							dust334.velocity *= 1.6f;
							ref float ptr = ref Main.dust[num690].velocity.Y;
							ptr -= 1f;
							dust234 = Main.dust[num690];
							dust334 = dust234;
							dust334.velocity += -this.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num690].scale = 2f;
							Main.dust[num690].fadeIn = 0.5f;
							Main.dust[num690].noGravity = true;
							num1032 = num689;
						}
					}
					else if (this.type == 761 || this.type == 762)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						if (this.owner == Main.myPlayer && !this.noDropItem)
						{
							int num691 = 4343;
							if (this.type == 762)
							{
								num691 = 4344;
							}
							int num692 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, num691, 1, false, 0, false, false);
							Main.item[num692].noGrabDelay = 0;
							if (Main.netMode == 1 && num692 >= 0)
							{
								NetMessage.SendData(21, -1, -1, null, num692, 1f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (this.type == 712)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num693 = Main.rand.Next(6, 12);
						int num1032;
						for (int num694 = 0; num694 < num693; num694 = num1032 + 1)
						{
							int num695 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100, default(Color), 1f);
							Dust dust235 = Main.dust[num695];
							Dust dust334 = dust235;
							dust334.velocity *= 1.6f;
							ref float ptr = ref Main.dust[num695].velocity.Y;
							ptr -= 1f;
							dust235 = Main.dust[num695];
							dust334 = dust235;
							dust334.velocity += -this.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num695].scale = 1f;
							Main.dust[num695].fadeIn = 1.5f;
							Main.dust[num695].noGravity = true;
							Main.dust[num695].color = new Color(255, 255, 255, 0) * 0.3f;
							dust235 = Main.dust[num695];
							dust334 = dust235;
							dust334.velocity *= 0.7f;
							dust235 = Main.dust[num695];
							dust334 = dust235;
							dust334.position += Main.dust[num695].velocity * 5f;
							num1032 = num694;
						}
						for (int num696 = 0; num696 < 3; num696 = num1032 + 1)
						{
							Gore gore32 = Gore.NewGoreDirect(this.position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
							Gore gore33 = gore32;
							Gore gore64 = gore33;
							gore64.velocity *= 4f;
							num1032 = num696;
						}
					}
					else if (this.type == 638)
					{
						Collision.HitTiles(this.position, this.velocity, this.width, this.height);
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num697 = Main.rand.Next(2, 5);
						int num1032;
						for (int num698 = 0; num698 < num697; num698 = num1032 + 1)
						{
							int num699 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 1f);
							Dust dust236 = Main.dust[num699];
							Dust dust334 = dust236;
							dust334.velocity *= 1.6f;
							ref float ptr = ref Main.dust[num699].velocity.Y;
							ptr -= 1f;
							dust236 = Main.dust[num699];
							dust334 = dust236;
							dust334.position -= Vector2.One * 4f;
							Main.dust[num699].position = Vector2.Lerp(Main.dust[num699].position, base.Center, 0.5f);
							Main.dust[num699].noGravity = true;
							num1032 = num698;
						}
					}
					else if (this.type == 15 || this.type == 321)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num700 = 0; num700 < 20; num700 = num1032 + 1)
						{
							int num701 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num701].noGravity = true;
							Dust dust237 = Main.dust[num701];
							Dust dust334 = dust237;
							dust334.velocity *= 2f;
							num701 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
							dust237 = Main.dust[num701];
							dust334 = dust237;
							dust334.velocity *= 2f;
							num1032 = num700;
						}
					}
					else if (this.type == 253)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num702 = 0; num702 < 20; num702 = num1032 + 1)
						{
							int num703 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num703].noGravity = true;
							Dust dust238 = Main.dust[num703];
							Dust dust334 = dust238;
							dust334.velocity *= 2f;
							num703 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f);
							dust238 = Main.dust[num703];
							dust334 = dust238;
							dust334.velocity *= 2f;
							num1032 = num702;
						}
					}
					else if (this.type == 95 || this.type == 96)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num704 = 0; num704 < 20; num704 = num1032 + 1)
						{
							int num705 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 2f * this.scale);
							Main.dust[num705].noGravity = true;
							Dust dust239 = Main.dust[num705];
							Dust dust334 = dust239;
							dust334.velocity *= 2f;
							num705 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (0f - this.velocity.X) * 0.2f, (0f - this.velocity.Y) * 0.2f, 100, default(Color), 1f * this.scale);
							dust239 = Main.dust[num705];
							dust334 = dust239;
							dust334.velocity *= 2f;
							num1032 = num704;
						}
					}
					else if (this.type == 17)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num706 = 0; num706 < 5; num706 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0f, 0f, 0, default(Color), 1f);
							num1032 = num706;
						}
					}
					else if (this.type == 31 || this.type == 42)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num707 = 0; num707 < 5; num707 = num1032 + 1)
						{
							int num708 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0f, 0f, 0, default(Color), 1f);
							Dust dust240 = Main.dust[num708];
							Dust dust334 = dust240;
							dust334.velocity *= 0.6f;
							num1032 = num707;
						}
					}
					else if (this.type >= 411 && this.type <= 414)
					{
						int num709 = 9;
						if (this.type == 412 || this.type == 414)
						{
							num709 = 11;
						}
						if (this.type == 413)
						{
							num709 = 19;
						}
						int num1032;
						for (int num710 = 0; num710 < 5; num710 = num1032 + 1)
						{
							int num711 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, num709, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
							Main.dust[num711].noGravity = true;
							Dust dust241 = Main.dust[num711];
							Dust dust334 = dust241;
							dust334.velocity -= this.velocity * 0.5f;
							num1032 = num710;
						}
					}
					else if (this.type == 109)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num712 = 0; num712 < 5; num712 = num1032 + 1)
						{
							int num713 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0f, 0f, 0, default(Color), 0.6f);
							Dust dust242 = Main.dust[num713];
							Dust dust334 = dust242;
							dust334.velocity *= 0.6f;
							num1032 = num712;
						}
					}
					else if (this.type == 39)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num714 = 0; num714 < 5; num714 = num1032 + 1)
						{
							int num715 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0f, 0f, 0, default(Color), 1f);
							Dust dust243 = Main.dust[num715];
							Dust dust334 = dust243;
							dust334.velocity *= 0.6f;
							num1032 = num714;
						}
					}
					else if (this.type == 71)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num716 = 0; num716 < 5; num716 = num1032 + 1)
						{
							int num717 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0f, 0f, 0, default(Color), 1f);
							Dust dust244 = Main.dust[num717];
							Dust dust334 = dust244;
							dust334.velocity *= 0.6f;
							num1032 = num716;
						}
					}
					else if (this.type == 179)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num718 = 0; num718 < 5; num718 = num1032 + 1)
						{
							int num719 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149, 0f, 0f, 0, default(Color), 1f);
							Dust dust245 = Main.dust[num719];
							Dust dust334 = dust245;
							dust334.velocity *= 0.6f;
							num1032 = num718;
						}
					}
					else if (this.type == 40)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num720 = 0; num720 < 5; num720 = num1032 + 1)
						{
							int num721 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0f, 0f, 0, default(Color), 1f);
							Dust dust246 = Main.dust[num721];
							Dust dust334 = dust246;
							dust334.velocity *= 0.6f;
							num1032 = num720;
						}
					}
					else if (this.type == 21 || this.type == 471 || this.type == 532)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num722 = 0; num722 < 10; num722 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0f, 0f, 0, default(Color), 0.8f);
							num1032 = num722;
						}
					}
					else if (this.type == 583)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num723 = 0; num723 < 10; num723 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
							num1032 = num723;
						}
					}
					else if (this.type == 584)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num724 = 0; num724 < 10; num724 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
							num1032 = num724;
						}
					}
					else if (this.type == 24)
					{
						int num1032;
						for (int num725 = 0; num725 < 10; num725 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 0.75f);
							num1032 = num725;
						}
					}
					else if (this.type == 27)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num726 = 0; num726 < 30; num726 = num1032 + 1)
						{
							int num727 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 1f);
							Main.dust[num727].noGravity = true;
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, default(Color), 0.5f);
							num1032 = num726;
						}
					}
					else if (this.type == 38)
					{
						int num1032;
						for (int num728 = 0; num728 < 10; num728 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 42, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, default(Color), 1f);
							num1032 = num728;
						}
					}
					else if (this.type == 44 || this.type == 45)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num729 = 0; num729 < 30; num729 = num1032 + 1)
						{
							int num730 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1.7f);
							Main.dust[num730].noGravity = true;
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, default(Color), 1f);
							num1032 = num729;
						}
					}
					else if (this.type == 41)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num731 = 0; num731 < 10; num731 = num1032 + 1)
						{
							int num732 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							num1032 = num731;
						}
						for (int num733 = 0; num733 < 5; num733 = num1032 + 1)
						{
							int num734 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num734].noGravity = true;
							Dust dust247 = Main.dust[num734];
							Dust dust334 = dust247;
							dust334.velocity *= 3f;
							num734 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust247 = Main.dust[num734];
							dust334 = dust247;
							dust334.velocity *= 2f;
							num1032 = num733;
						}
						int num735 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore34 = Main.gore[num735];
						Gore gore64 = gore34;
						gore64.velocity *= 0.4f;
						ref float ptr = ref Main.gore[num735].velocity.X;
						ptr += (float)Main.rand.Next(-10, 11) * 0.1f;
						ptr = ref Main.gore[num735].velocity.Y;
						ptr += (float)Main.rand.Next(-10, 11) * 0.1f;
						num735 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						gore34 = Main.gore[num735];
						gore64 = gore34;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num735].velocity.X;
						ptr += (float)Main.rand.Next(-10, 11) * 0.1f;
						ptr = ref Main.gore[num735].velocity.Y;
						ptr += (float)Main.rand.Next(-10, 11) * 0.1f;
						if (this.owner == Main.myPlayer)
						{
							this.penetrate = -1;
							ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 64;
							this.height = 64;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
							this.Damage();
						}
					}
					else if (this.type == 514)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num736 = 0; num736 < 10; num736 = num1032 + 1)
						{
							int num737 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.3f);
							Dust dust248 = Main.dust[num737];
							Dust dust334 = dust248;
							dust334.velocity *= 1.4f;
							num1032 = num736;
						}
						for (int num738 = 0; num738 < 6; num738 = num1032 + 1)
						{
							int num739 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.1f);
							Main.dust[num739].noGravity = true;
							Dust dust249 = Main.dust[num739];
							Dust dust334 = dust249;
							dust334.velocity *= 4.6f;
							num739 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.3f);
							dust249 = Main.dust[num739];
							dust334 = dust249;
							dust334.velocity *= 3.3f;
							if (Main.rand.Next(2) == 0)
							{
								num739 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.1f);
								dust249 = Main.dust[num739];
								dust334 = dust249;
								dust334.velocity *= 2.7f;
							}
							num1032 = num738;
						}
						if (this.owner == Main.myPlayer)
						{
							this.penetrate = -1;
							ref float ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 112;
							this.height = 112;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
							this.ai[0] = 2f;
							this.Damage();
						}
					}
					else if (this.type == 306)
					{
						SoundEngine.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num740 = 0; num740 < 20; num740 = num1032 + 1)
						{
							int num741 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Dust dust250 = Main.dust[num741];
							Dust dust334 = dust250;
							dust334.scale *= 1.1f;
							Main.dust[num741].noGravity = true;
							num1032 = num740;
						}
						for (int num742 = 0; num742 < 30; num742 = num1032 + 1)
						{
							int num743 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0f, 0f, 0, default(Color), 1f);
							Dust dust251 = Main.dust[num743];
							Dust dust334 = dust251;
							dust334.velocity *= 2.5f;
							dust251 = Main.dust[num743];
							dust334 = dust251;
							dust334.scale *= 0.8f;
							Main.dust[num743].noGravity = true;
							num1032 = num742;
						}
						if (this.owner == Main.myPlayer)
						{
							int num744 = Main.rand.Next(2, 5);
							if (Main.rand.Next(1, 101) == 100)
							{
								num744 = 15;
							}
							for (int num745 = 0; num745 < num744; num745 = num1032 + 1)
							{
								float num746 = (float)Main.rand.Next(-35, 36) * 0.02f;
								float num747 = (float)Main.rand.Next(-35, 36) * 0.02f;
								num746 *= 10f;
								num747 *= 10f;
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, num746, num747, 307, (int)((double)this.damage * 0.75), (float)((int)((double)this.knockBack * 0.35)), Main.myPlayer, 0f, 0f, 0f);
								num1032 = num745;
							}
						}
					}
					else if (this.type == 469)
					{
						if (this.owner == Main.myPlayer)
						{
							int num748 = 6;
							int num1032;
							for (int num749 = 0; num749 < num748; num749 = num1032 + 1)
							{
								if (num749 % 2 != 1 || Main.rand.Next(3) == 0)
								{
									Vector2 vector60 = this.position;
									Vector2 vector61 = this.oldVelocity;
									vector61.Normalize();
									vector61 *= 8f;
									float num750 = (float)Main.rand.Next(-35, 36) * 0.01f;
									float num751 = (float)Main.rand.Next(-35, 36) * 0.01f;
									vector60 -= vector61 * (float)num749;
									num750 += this.oldVelocity.X / 6f;
									num751 += this.oldVelocity.Y / 6f;
									int num752 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector60.X, vector60.Y, num750, num751, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage / 3), Main.player[this.owner].beeKB(0f), Main.myPlayer, 0f, 0f, 0f);
									Main.projectile[num752].magic = false;
									Main.projectile[num752].ranged = true;
									Main.projectile[num752].penetrate = 2;
								}
								num1032 = num749;
							}
						}
					}
					else if (this.type == 183)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num753 = 0; num753 < 20; num753 = num1032 + 1)
						{
							int num754 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust252 = Main.dust[num754];
							Dust dust334 = dust252;
							dust334.velocity *= 1f;
							num1032 = num753;
						}
						int num755 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						ref float ptr = ref Main.gore[num755].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num755].velocity.Y;
						ptr += 1f;
						Gore gore35 = Main.gore[num755];
						Gore gore64 = gore35;
						gore64.velocity *= 0.3f;
						num755 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						ptr = ref Main.gore[num755].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num755].velocity.Y;
						ptr += 1f;
						gore35 = Main.gore[num755];
						gore64 = gore35;
						gore64.velocity *= 0.3f;
						num755 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						ptr = ref Main.gore[num755].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num755].velocity.Y;
						ptr -= 1f;
						gore35 = Main.gore[num755];
						gore64 = gore35;
						gore64.velocity *= 0.3f;
						num755 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						ptr = ref Main.gore[num755].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num755].velocity.Y;
						ptr -= 1f;
						gore35 = Main.gore[num755];
						gore64 = gore35;
						gore64.velocity *= 0.3f;
						if (this.owner == Main.myPlayer)
						{
							int num756 = Main.rand.Next(15, 25);
							for (int num757 = 0; num757 < num756; num757 = num1032 + 1)
							{
								float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
								float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
								Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, speedX, speedY, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage), Main.player[this.owner].beeKB(0f), Main.myPlayer, 0f, 0f, 0f);
								num1032 = num757;
							}
						}
					}
					else if (this.aiStyle == 34)
					{
						if (this.owner != Main.myPlayer)
						{
							this.timeLeft = 60;
						}
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						float ptr;
						if (this.type == 167)
						{
							int num1032;
							for (int num758 = 0; num758 < 400; num758 = num1032 + 1)
							{
								float num759 = 16f;
								if (num758 < 300)
								{
									num759 = 12f;
								}
								if (num758 < 200)
								{
									num759 = 8f;
								}
								if (num758 < 100)
								{
									num759 = 4f;
								}
								int num760 = 130;
								int num761 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num760, 0f, 0f, 100, default(Color), 1f);
								float num762 = Main.dust[num761].velocity.X;
								float y2 = Main.dust[num761].velocity.Y;
								if (num762 == 0f && y2 == 0f)
								{
									num762 = 1f;
								}
								float num763 = (float)Math.Sqrt((double)(num762 * num762 + y2 * y2));
								num763 = num759 / num763;
								num762 *= num763;
								y2 *= num763;
								Dust dust253 = Main.dust[num761];
								Dust dust334 = dust253;
								dust334.velocity *= 0.5f;
								ptr = ref Main.dust[num761].velocity.X;
								ptr += num762;
								ptr = ref Main.dust[num761].velocity.Y;
								ptr += y2;
								Main.dust[num761].scale = 1.3f;
								Main.dust[num761].noGravity = true;
								num1032 = num758;
							}
						}
						if (this.type == 168)
						{
							int num1032;
							for (int num764 = 0; num764 < 400; num764 = num1032 + 1)
							{
								float num765 = 2f * ((float)num764 / 100f);
								if (num764 > 100)
								{
									num765 = 10f;
								}
								if (num764 > 250)
								{
									num765 = 13f;
								}
								int num766 = 131;
								int num767 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num766, 0f, 0f, 100, default(Color), 1f);
								float num768 = Main.dust[num767].velocity.X;
								float y3 = Main.dust[num767].velocity.Y;
								if (num768 == 0f && y3 == 0f)
								{
									num768 = 1f;
								}
								float num769 = (float)Math.Sqrt((double)(num768 * num768 + y3 * y3));
								num769 = num765 / num769;
								if (num764 <= 200)
								{
									num768 *= num769;
									y3 *= num769;
								}
								else
								{
									num768 = num768 * num769 * 1.25f;
									y3 = y3 * num769 * 0.75f;
								}
								Dust dust254 = Main.dust[num767];
								Dust dust334 = dust254;
								dust334.velocity *= 0.5f;
								ptr = ref Main.dust[num767].velocity.X;
								ptr += num768;
								ptr = ref Main.dust[num767].velocity.Y;
								ptr += y3;
								if (num764 > 100)
								{
									Main.dust[num767].scale = 1.3f;
									Main.dust[num767].noGravity = true;
								}
								num1032 = num764;
							}
						}
						if (this.type == 169)
						{
							Vector2 vector62 = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2();
							float num770 = (float)Main.rand.Next(5, 9);
							float num771 = (float)Main.rand.Next(12, 17);
							float value9 = (float)Main.rand.Next(3, 7);
							float num772 = 20f;
							int num1032;
							float num1033;
							for (float num773 = 0f; num773 < num770; num773 = num1033 + 1f)
							{
								for (int num774 = 0; num774 < 2; num774 = num1032 + 1)
								{
									Vector2 value10 = vector62.RotatedBy((double)(((num774 == 0) ? 1f : -1f) * 6.2831855f / (num770 * 2f)), default(Vector2));
									for (float num775 = 0f; num775 < num772; num775 = num1033 + 1f)
									{
										Vector2 vector63 = Vector2.Lerp(vector62, value10, num775 / num772);
										float num776 = MathHelper.Lerp(num771, value9, num775 / num772);
										int num777 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust255 = Main.dust[num777];
										Dust dust334 = dust255;
										dust334.velocity *= 0.1f;
										Main.dust[num777].noGravity = true;
										dust255 = Main.dust[num777];
										dust334 = dust255;
										dust334.velocity += vector63 * num776;
										num1033 = num775;
									}
									num1032 = num774;
								}
								vector62 = vector62.RotatedBy((double)(6.2831855f / num770), default(Vector2));
								num1033 = num773;
							}
							for (float num778 = 0f; num778 < num770; num778 = num1033 + 1f)
							{
								for (int num779 = 0; num779 < 2; num779 = num1032 + 1)
								{
									Vector2 value11 = vector62.RotatedBy((double)(((num779 == 0) ? 1f : -1f) * 6.2831855f / (num770 * 2f)), default(Vector2));
									for (float num780 = 0f; num780 < num772; num780 = num1033 + 1f)
									{
										Vector2 vector64 = Vector2.Lerp(vector62, value11, num780 / num772);
										float num781 = MathHelper.Lerp(num771, value9, num780 / num772) / 2f;
										int num782 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust256 = Main.dust[num782];
										Dust dust334 = dust256;
										dust334.velocity *= 0.1f;
										Main.dust[num782].noGravity = true;
										dust256 = Main.dust[num782];
										dust334 = dust256;
										dust334.velocity += vector64 * num781;
										num1033 = num780;
									}
									num1032 = num779;
								}
								vector62 = vector62.RotatedBy((double)(6.2831855f / num770), default(Vector2));
								num1033 = num778;
							}
							for (int num783 = 0; num783 < 100; num783 = num1032 + 1)
							{
								float num784 = num771;
								int num785 = 132;
								int num786 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num785, 0f, 0f, 100, default(Color), 1f);
								float num787 = Main.dust[num786].velocity.X;
								float y4 = Main.dust[num786].velocity.Y;
								if (num787 == 0f && y4 == 0f)
								{
									num787 = 1f;
								}
								float num788 = (float)Math.Sqrt((double)(num787 * num787 + y4 * y4));
								num788 = num784 / num788;
								num787 *= num788;
								y4 *= num788;
								Dust dust257 = Main.dust[num786];
								Dust dust334 = dust257;
								dust334.velocity *= 0.5f;
								ptr = ref Main.dust[num786].velocity.X;
								ptr += num787;
								ptr = ref Main.dust[num786].velocity.Y;
								ptr += y4;
								Main.dust[num786].scale = 1.3f;
								Main.dust[num786].noGravity = true;
								num1032 = num783;
							}
						}
						if (this.type == 170)
						{
							int num1032;
							for (int num789 = 0; num789 < 400; num789 = num1032 + 1)
							{
								int num790 = 133;
								float num791 = 16f;
								if (num789 > 100)
								{
									num791 = 11f;
								}
								if (num789 > 100)
								{
									num790 = 134;
								}
								if (num789 > 200)
								{
									num791 = 8f;
								}
								if (num789 > 200)
								{
									num790 = 133;
								}
								if (num789 > 300)
								{
									num791 = 5f;
								}
								if (num789 > 300)
								{
									num790 = 134;
								}
								int num792 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num790, 0f, 0f, 100, default(Color), 1f);
								float num793 = Main.dust[num792].velocity.X;
								float y5 = Main.dust[num792].velocity.Y;
								if (num793 == 0f && y5 == 0f)
								{
									num793 = 1f;
								}
								float num794 = (float)Math.Sqrt((double)(num793 * num793 + y5 * y5));
								num794 = num791 / num794;
								if (num789 > 300)
								{
									num793 = num793 * num794 * 0.7f;
									y5 *= num794;
								}
								else if (num789 > 200)
								{
									num793 *= num794;
									y5 = y5 * num794 * 0.7f;
								}
								else if (num789 > 100)
								{
									num793 = num793 * num794 * 0.7f;
									y5 *= num794;
								}
								else
								{
									num793 *= num794;
									y5 = y5 * num794 * 0.7f;
								}
								Dust dust258 = Main.dust[num792];
								Dust dust334 = dust258;
								dust334.velocity *= 0.5f;
								ptr = ref Main.dust[num792].velocity.X;
								ptr += num793;
								ptr = ref Main.dust[num792].velocity.Y;
								ptr += y5;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num792].scale = 1.3f;
									Main.dust[num792].noGravity = true;
								}
								num1032 = num789;
							}
						}
						if (this.type == 415)
						{
							Vector2 vector65 = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2();
							float num795 = (float)Main.rand.Next(5, 9);
							float num796 = (float)Main.rand.Next(10, 15) * 0.66f;
							float num797 = (float)Main.rand.Next(4, 7) / 2f;
							int num798 = 30;
							int num799 = 0;
							int num1032;
							while ((float)num799 < (float)num798 * num795)
							{
								if (num799 % num798 == 0)
								{
									vector65 = vector65.RotatedBy((double)(6.2831855f / num795), default(Vector2));
								}
								float num800 = MathHelper.Lerp(num797, num796, (float)(num799 % num798) / (float)num798);
								int num801 = 130;
								int num802 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num801, 0f, 0f, 100, default(Color), 1f);
								Dust dust259 = Main.dust[num802];
								Dust dust334 = dust259;
								dust334.velocity *= 0.1f;
								dust259 = Main.dust[num802];
								dust334 = dust259;
								dust334.velocity += vector65 * num800;
								Main.dust[num802].scale = 1.3f;
								Main.dust[num802].noGravity = true;
								num1032 = num799;
								num799 = num1032 + 1;
							}
							for (int num803 = 0; num803 < 100; num803 = num1032 + 1)
							{
								float num804 = num796;
								if (num803 < 30)
								{
									num804 = (num797 + num796) / 2f;
								}
								int num805 = 130;
								int num806 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num805, 0f, 0f, 100, default(Color), 1f);
								float num807 = Main.dust[num806].velocity.X;
								float y6 = Main.dust[num806].velocity.Y;
								if (num807 == 0f && y6 == 0f)
								{
									num807 = 1f;
								}
								float num808 = (float)Math.Sqrt((double)(num807 * num807 + y6 * y6));
								num808 = num804 / num808;
								num807 *= num808;
								y6 *= num808;
								Dust dust260 = Main.dust[num806];
								Dust dust334 = dust260;
								dust334.velocity *= 0.5f;
								ptr = ref Main.dust[num806].velocity.X;
								ptr += num807;
								ptr = ref Main.dust[num806].velocity.Y;
								ptr += y6;
								Main.dust[num806].scale = 1.3f;
								Main.dust[num806].noGravity = true;
								num1032 = num803;
							}
						}
						if (this.type == 416)
						{
							Vector2 vector66 = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2();
							Vector2 vector67 = vector66;
							float num809 = (float)(Main.rand.Next(3, 6) * 2);
							int num810 = 20;
							float num811 = (Main.rand.Next(2) == 0) ? 1f : -1f;
							bool flag3 = true;
							int num812 = 0;
							while ((float)num812 < (float)num810 * num809)
							{
								if (num812 % num810 == 0)
								{
									vector67 = vector67.RotatedBy((double)(num811 * (6.2831855f / num809)), default(Vector2));
									vector66 = vector67;
									flag3 = !flag3;
								}
								else
								{
									float num813 = 6.2831855f / ((float)num810 * num809);
									vector66 = vector66.RotatedBy((double)(num813 * num811 * 3f), default(Vector2));
								}
								float num814 = MathHelper.Lerp(1f, 8f, (float)(num812 % num810) / (float)num810);
								int num815 = 131;
								int num816 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num815, 0f, 0f, 100, default(Color), 1.4f);
								Dust dust261 = Main.dust[num816];
								Dust dust334 = dust261;
								dust334.velocity *= 0.1f;
								dust261 = Main.dust[num816];
								dust334 = dust261;
								dust334.velocity += vector66 * num814;
								if (flag3)
								{
									Main.dust[num816].scale = 0.9f;
								}
								Main.dust[num816].noGravity = true;
								int num1032 = num812;
								num812 = num1032 + 1;
							}
						}
						if (this.type == 417)
						{
							float num817 = (float)Main.rand.NextDouble() * 6.2831855f;
							float num818 = (float)Main.rand.NextDouble() * 6.2831855f;
							float num819 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num820 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num821 = num819;
							if (num820 > num821)
							{
								num821 = num820;
							}
							int num1032;
							for (int num822 = 0; num822 < 150; num822 = num1032 + 1)
							{
								int num823 = 132;
								float num824 = num821;
								if (num822 > 50)
								{
									num824 = num820;
								}
								if (num822 > 50)
								{
									num823 = 133;
								}
								if (num822 > 100)
								{
									num824 = num819;
								}
								if (num822 > 100)
								{
									num823 = 132;
								}
								int num825 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num823, 0f, 0f, 100, default(Color), 1f);
								Vector2 vector68 = Main.dust[num825].velocity;
								vector68.Normalize();
								vector68 *= num824;
								if (num822 > 100)
								{
									ptr = ref vector68.X;
									ptr *= 0.5f;
									vector68 = vector68.RotatedBy((double)num817, default(Vector2));
								}
								else if (num822 > 50)
								{
									ptr = ref vector68.Y;
									ptr *= 0.5f;
									vector68 = vector68.RotatedBy((double)num818, default(Vector2));
								}
								Dust dust262 = Main.dust[num825];
								Dust dust334 = dust262;
								dust334.velocity *= 0.2f;
								dust262 = Main.dust[num825];
								dust334 = dust262;
								dust334.velocity += vector68;
								if (num822 <= 200)
								{
									Main.dust[num825].scale = 1.3f;
									Main.dust[num825].noGravity = true;
								}
								num1032 = num822;
							}
						}
						if (this.type == 418)
						{
							Vector2 vector69 = ((float)Main.rand.NextDouble() * 6.2831855f).ToRotationVector2();
							float num826 = (float)Main.rand.Next(5, 12);
							float num827 = (float)Main.rand.Next(9, 14) * 0.66f;
							float num828 = (float)Main.rand.Next(2, 4) * 0.66f;
							float num829 = 15f;
							int num1032;
							float num1033;
							for (float num830 = 0f; num830 < num826; num830 = num1033 + 1f)
							{
								for (int num831 = 0; num831 < 2; num831 = num1032 + 1)
								{
									Vector2 value12 = vector69.RotatedBy((double)(((num831 == 0) ? 1f : -1f) * 6.2831855f / (num826 * 2f)), default(Vector2));
									for (float num832 = 0f; num832 < num829; num832 = num1033 + 1f)
									{
										Vector2 vector70 = Vector2.SmoothStep(vector69, value12, num832 / num829);
										float num833 = MathHelper.SmoothStep(num827, num828, num832 / num829);
										int num834 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust263 = Main.dust[num834];
										Dust dust334 = dust263;
										dust334.velocity *= 0.1f;
										Main.dust[num834].noGravity = true;
										dust263 = Main.dust[num834];
										dust334 = dust263;
										dust334.velocity += vector70 * num833;
										num1033 = num832;
									}
									num1032 = num831;
								}
								vector69 = vector69.RotatedBy((double)(6.2831855f / num826), default(Vector2));
								num1033 = num830;
							}
							for (int num835 = 0; num835 < 120; num835 = num1032 + 1)
							{
								float num836 = num827;
								int num837 = 133;
								if (num835 < 80)
								{
									num836 = num828 - 0.5f;
								}
								else
								{
									num837 = 131;
								}
								int num838 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, num837, 0f, 0f, 100, default(Color), 1f);
								float num839 = Main.dust[num838].velocity.X;
								float y7 = Main.dust[num838].velocity.Y;
								if (num839 == 0f && y7 == 0f)
								{
									num839 = 1f;
								}
								float num840 = (float)Math.Sqrt((double)(num839 * num839 + y7 * y7));
								num840 = num836 / num840;
								num839 *= num840;
								y7 *= num840;
								Dust dust264 = Main.dust[num838];
								Dust dust334 = dust264;
								dust334.velocity *= 0.2f;
								ptr = ref Main.dust[num838].velocity.X;
								ptr += num839;
								ptr = ref Main.dust[num838].velocity.Y;
								ptr += y7;
								Main.dust[num838].scale = 1.3f;
								Main.dust[num838].noGravity = true;
								num1032 = num835;
							}
						}
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 192;
						this.height = 192;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						this.penetrate = -1;
						this.Damage();
					}
					else if (this.type == 312)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						ref float ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						int num1032;
						for (int num841 = 0; num841 < 30; num841 = num1032 + 1)
						{
							int num842 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust265 = Main.dust[num842];
							Dust dust334 = dust265;
							dust334.velocity *= 1.4f;
							num1032 = num841;
						}
						for (int num843 = 0; num843 < 20; num843 = num1032 + 1)
						{
							int num844 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num844].noGravity = true;
							Dust dust266 = Main.dust[num844];
							Dust dust334 = dust266;
							dust334.velocity *= 7f;
							num844 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust266 = Main.dust[num844];
							dust334 = dust266;
							dust334.velocity *= 3f;
							num1032 = num843;
						}
						for (int num845 = 0; num845 < 2; num845 = num1032 + 1)
						{
							float num846 = 0.4f;
							if (num845 == 1)
							{
								num846 = 0.8f;
							}
							int num847 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore36 = Main.gore[num847];
							Gore gore64 = gore36;
							gore64.velocity *= num846;
							ptr = ref Main.gore[num847].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num847].velocity.Y;
							ptr += 1f;
							num847 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore36 = Main.gore[num847];
							gore64 = gore36;
							gore64.velocity *= num846;
							ptr = ref Main.gore[num847].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num847].velocity.Y;
							ptr += 1f;
							num847 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore36 = Main.gore[num847];
							gore64 = gore36;
							gore64.velocity *= num846;
							ptr = ref Main.gore[num847].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num847].velocity.Y;
							ptr -= 1f;
							num847 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore36 = Main.gore[num847];
							gore64 = gore36;
							gore64.velocity *= num846;
							ptr = ref Main.gore[num847].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num847].velocity.Y;
							ptr -= 1f;
							num1032 = num845;
						}
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 128;
						this.height = 128;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						this.Damage();
					}
					else if (this.type == 910 || this.type == 911)
					{
						this.Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						Color transparent2 = Color.Transparent;
						int num848 = 0;
						int num1032;
						for (int num849 = 0; num849 < 30; num849 = num1032 + 1)
						{
							Dust dust267 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent2, 1.5f);
							Dust dust268 = dust267;
							Dust dust334 = dust268;
							dust334.velocity *= 1.4f;
							num1032 = num849;
						}
						for (int num850 = 0; num850 < 80; num850 = num1032 + 1)
						{
							Dust dust269 = Dust.NewDustDirect(this.position, this.width, this.height, num848, 0f, 0f, 100, transparent2, 2.2f);
							dust269.noGravity = true;
							ref float ptr = ref dust269.velocity.Y;
							ptr -= 1.2f;
							Dust dust270 = dust269;
							Dust dust334 = dust270;
							dust334.velocity *= 4f;
							dust269 = Dust.NewDustDirect(this.position, this.width, this.height, num848, 0f, 0f, 100, transparent2, 1.3f);
							ptr = ref dust269.velocity.Y;
							ptr -= 1.2f;
							dust270 = dust269;
							dust334 = dust270;
							dust334.velocity *= 2f;
							num1032 = num850;
						}
						for (int num851 = 1; num851 <= 2; num851 = num1032 + 1)
						{
							for (int num852 = -1; num852 <= 1; num852 += 2)
							{
								for (int num853 = -1; num853 <= 1; num853 += 2)
								{
									Gore gore37 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore38 = gore37;
									Gore gore64 = gore38;
									gore64.velocity *= ((num851 == 1) ? 0.4f : 0.8f);
									gore38 = gore37;
									gore64 = gore38;
									gore64.velocity += new Vector2((float)num852, (float)num853);
								}
							}
							num1032 = num851;
						}
						if (Main.netMode != 1)
						{
							Point pt = base.Center.ToTileCoordinates();
							Point pt6 = pt;
							float size = 4.2f;
							Utils.TileActionAttempt plot;
							if ((plot = Projectile.<>O.<5>__SpreadDirt) == null)
							{
								plot = (Projectile.<>O.<5>__SpreadDirt = new Utils.TileActionAttempt(DelegateMethods.SpreadDirt));
							}
							this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt6, size, plot);
						}
					}
					else if (this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903)
					{
						this.Resize(22, 22);
						if (this.type == 785)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						Color transparent3 = Color.Transparent;
						int num854 = Dust.dustWater();
						int num1032;
						for (int num855 = 0; num855 < 30; num855 = num1032 + 1)
						{
							Dust dust271 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent3, 1.5f);
							Dust dust272 = dust271;
							Dust dust334 = dust272;
							dust334.velocity *= 1.4f;
							num1032 = num855;
						}
						for (int num856 = 0; num856 < 80; num856 = num1032 + 1)
						{
							Dust dust273 = Dust.NewDustDirect(this.position, this.width, this.height, num854, 0f, 0f, 100, transparent3, 2.2f);
							dust273.noGravity = true;
							ref float ptr = ref dust273.velocity.Y;
							ptr -= 1.2f;
							Dust dust274 = dust273;
							Dust dust334 = dust274;
							dust334.velocity *= 7f;
							dust273 = Dust.NewDustDirect(this.position, this.width, this.height, num854, 0f, 0f, 100, transparent3, 1.3f);
							ptr = ref dust273.velocity.Y;
							ptr -= 1.2f;
							dust274 = dust273;
							dust334 = dust274;
							dust334.velocity *= 4f;
							num1032 = num856;
						}
						for (int num857 = 1; num857 <= 2; num857 = num1032 + 1)
						{
							for (int num858 = -1; num858 <= 1; num858 += 2)
							{
								for (int num859 = -1; num859 <= 1; num859 += 2)
								{
									Gore gore39 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore40 = gore39;
									Gore gore64 = gore40;
									gore64.velocity *= ((num857 == 1) ? 0.4f : 0.8f);
									gore40 = gore39;
									gore64 = gore40;
									gore64.velocity += new Vector2((float)num858, (float)num859);
								}
							}
							num1032 = num857;
						}
						if (Main.netMode != 1)
						{
							Point pt2 = base.Center.ToTileCoordinates();
							Point pt7 = pt2;
							float size2 = 3f;
							Utils.TileActionAttempt plot2;
							if ((plot2 = Projectile.<>O.<6>__SpreadWater) == null)
							{
								plot2 = (Projectile.<>O.<6>__SpreadWater = new Utils.TileActionAttempt(DelegateMethods.SpreadWater));
							}
							this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt7, size2, plot2);
						}
					}
					else if (this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904)
					{
						this.Resize(22, 22);
						if (this.type == 788)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						Color transparent4 = Color.Transparent;
						int num860 = 35;
						int num1032;
						for (int num861 = 0; num861 < 30; num861 = num1032 + 1)
						{
							Dust dust275 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent4, 1.5f);
							Dust dust276 = dust275;
							Dust dust334 = dust276;
							dust334.velocity *= 1.4f;
							num1032 = num861;
						}
						for (int num862 = 0; num862 < 80; num862 = num1032 + 1)
						{
							Dust dust277 = Dust.NewDustDirect(this.position, this.width, this.height, num860, 0f, 0f, 100, transparent4, 1.2f);
							Dust dust278 = dust277;
							Dust dust334 = dust278;
							dust334.velocity *= 7f;
							dust277 = Dust.NewDustDirect(this.position, this.width, this.height, num860, 0f, 0f, 100, transparent4, 0.3f);
							dust278 = dust277;
							dust334 = dust278;
							dust334.velocity *= 4f;
							num1032 = num862;
						}
						for (int num863 = 1; num863 <= 2; num863 = num1032 + 1)
						{
							for (int num864 = -1; num864 <= 1; num864 += 2)
							{
								for (int num865 = -1; num865 <= 1; num865 += 2)
								{
									Gore gore41 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore42 = gore41;
									Gore gore64 = gore42;
									gore64.velocity *= ((num863 == 1) ? 0.4f : 0.8f);
									gore42 = gore41;
									gore64 = gore42;
									gore64.velocity += new Vector2((float)num864, (float)num865);
								}
							}
							num1032 = num863;
						}
						if (Main.netMode != 1)
						{
							Point pt3 = base.Center.ToTileCoordinates();
							Point pt8 = pt3;
							float size3 = 3f;
							Utils.TileActionAttempt plot3;
							if ((plot3 = Projectile.<>O.<7>__SpreadLava) == null)
							{
								plot3 = (Projectile.<>O.<7>__SpreadLava = new Utils.TileActionAttempt(DelegateMethods.SpreadLava));
							}
							this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt8, size3, plot3);
						}
					}
					else if (this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905)
					{
						this.Resize(22, 22);
						if (this.type == 791)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						Color transparent5 = Color.Transparent;
						int num866 = 152;
						int num1032;
						for (int num867 = 0; num867 < 30; num867 = num1032 + 1)
						{
							Dust dust279 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent5, 1.5f);
							Dust dust280 = dust279;
							Dust dust334 = dust280;
							dust334.velocity *= 1.4f;
							num1032 = num867;
						}
						for (int num868 = 0; num868 < 80; num868 = num1032 + 1)
						{
							Dust dust281 = Dust.NewDustDirect(this.position, this.width, this.height, num866, 0f, 0f, 100, transparent5, 2.2f);
							Dust dust282 = dust281;
							Dust dust334 = dust282;
							dust334.velocity *= 7f;
							dust281 = Dust.NewDustDirect(this.position, this.width, this.height, num866, 0f, 0f, 100, transparent5, 1.3f);
							dust282 = dust281;
							dust334 = dust282;
							dust334.velocity *= 4f;
							num1032 = num868;
						}
						for (int num869 = 1; num869 <= 2; num869 = num1032 + 1)
						{
							for (int num870 = -1; num870 <= 1; num870 += 2)
							{
								for (int num871 = -1; num871 <= 1; num871 += 2)
								{
									Gore gore43 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore44 = gore43;
									Gore gore64 = gore44;
									gore64.velocity *= ((num869 == 1) ? 0.4f : 0.8f);
									gore44 = gore43;
									gore64 = gore44;
									gore64.velocity += new Vector2((float)num870, (float)num871);
								}
							}
							num1032 = num869;
						}
						if (Main.netMode != 1)
						{
							Point pt4 = base.Center.ToTileCoordinates();
							Point pt9 = pt4;
							float size4 = 3f;
							Utils.TileActionAttempt plot4;
							if ((plot4 = Projectile.<>O.<8>__SpreadHoney) == null)
							{
								plot4 = (Projectile.<>O.<8>__SpreadHoney = new Utils.TileActionAttempt(DelegateMethods.SpreadHoney));
							}
							this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt9, size4, plot4);
						}
					}
					else if (this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906)
					{
						this.Resize(22, 22);
						if (this.type == 800)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						Color transparent6 = Color.Transparent;
						int num872 = 31;
						int num1032;
						for (int num873 = 0; num873 < 30; num873 = num1032 + 1)
						{
							Dust dust283 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent6, 1.5f);
							Dust dust284 = dust283;
							Dust dust334 = dust284;
							dust334.velocity *= 1.4f;
							num1032 = num873;
						}
						for (int num874 = 0; num874 < 80; num874 = num1032 + 1)
						{
							Dust dust285 = Dust.NewDustDirect(this.position, this.width, this.height, num872, 0f, 0f, 100, transparent6, 1.2f);
							Dust dust286 = dust285;
							Dust dust334 = dust286;
							dust334.velocity *= 7f;
							dust285 = Dust.NewDustDirect(this.position, this.width, this.height, num872, 0f, 0f, 100, transparent6, 0.3f);
							dust286 = dust285;
							dust334 = dust286;
							dust334.velocity *= 4f;
							num1032 = num874;
						}
						for (int num875 = 1; num875 <= 2; num875 = num1032 + 1)
						{
							for (int num876 = -1; num876 <= 1; num876 += 2)
							{
								for (int num877 = -1; num877 <= 1; num877 += 2)
								{
									Gore gore45 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore46 = gore45;
									Gore gore64 = gore46;
									gore64.velocity *= ((num875 == 1) ? 0.4f : 0.8f);
									gore46 = gore45;
									gore64 = gore46;
									gore64.velocity += new Vector2((float)num876, (float)num877);
								}
							}
							num1032 = num875;
						}
						if (Main.netMode != 1)
						{
							Point pt5 = base.Center.ToTileCoordinates();
							Point pt10 = pt5;
							float size5 = 3.5f;
							Utils.TileActionAttempt plot5;
							if ((plot5 = Projectile.<>O.<9>__SpreadDry) == null)
							{
								plot5 = (Projectile.<>O.<9>__SpreadDry = new Utils.TileActionAttempt(DelegateMethods.SpreadDry));
							}
							this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt10, size5, plot5);
						}
					}
					else if (this.type == 793 || this.type == 796 || this.type == 794 || this.type == 797 || this.type == 795 || this.type == 798 || this.type == 808 || this.type == 809)
					{
						if (this.type == 794 || this.type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(base.Center), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(base.Center), null);
						}
						this.Resize(50, 50);
						float num878 = 3f;
						int num1032;
						for (int num879 = 0; num879 < 50; num879 = num1032 + 1)
						{
							Dust dust287 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							dust287.velocity = (dust287.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust288 = dust287;
							Dust dust334 = dust288;
							dust334.velocity *= 2f + (float)Main.rand.Next(5) * 0.1f;
							ref float ptr = ref dust287.velocity.Y;
							ptr -= num878 * 0.5f;
							dust287.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust287.scale = 0.5f;
								dust287.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust287.color = Color.Black * 0.8f;
							}
							num1032 = num879;
						}
						for (int num880 = 0; num880 < 30; num880 = num1032 + 1)
						{
							Dust dust289 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
							dust289.noGravity = true;
							dust289.fadeIn = 1.4f;
							dust289.velocity = (dust289.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust290 = dust289;
							Dust dust334 = dust290;
							dust334.velocity *= 5.5f + (float)Main.rand.Next(61) * 0.1f;
							ref float ptr = ref dust289.velocity.Y;
							ptr -= num878 * 0.5f;
							dust289 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f);
							dust289.velocity = (dust289.position - base.Center).SafeNormalize(Vector2.Zero);
							ptr = ref dust289.velocity.Y;
							ptr -= num878 * 0.25f;
							dust290 = dust289;
							dust334 = dust290;
							dust334.velocity *= 1.5f + (float)Main.rand.Next(5) * 0.1f;
							dust289.fadeIn = 0f;
							dust289.scale = 0.6f;
							dust289 = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust289.noGravity = (num880 % 2 == 0);
							dust289.velocity = (dust289.position - base.Center).SafeNormalize(Vector2.Zero);
							dust290 = dust289;
							dust334 = dust290;
							dust334.velocity *= 3f + (float)Main.rand.Next(21) * 0.2f;
							ptr = ref dust289.velocity.Y;
							ptr -= num878 * 0.5f;
							dust289.fadeIn = 1.2f;
							if (!dust289.noGravity)
							{
								dust289.scale = 0.4f;
								dust289.fadeIn = 0f;
							}
							else
							{
								dust290 = dust289;
								dust334 = dust290;
								dust334.velocity *= 2f + (float)Main.rand.Next(5) * 0.2f;
								ptr = ref dust289.velocity.Y;
								ptr -= num878 * 0.5f;
							}
							num1032 = num880;
						}
						int num881 = 0;
						for (int num882 = 1; num882 <= 3; num882 = num1032 + 1)
						{
							float num883 = 6.2831855f * Main.rand.NextFloat();
							for (float num884 = 0f; num884 < 1f; num884 += 0.09090909f)
							{
								float f4 = 6.2831855f * num884 + num883;
								Vector2 spinningpoint2 = f4.ToRotationVector2();
								spinningpoint2 *= new Vector2(1f, 0.4f);
								spinningpoint2 = spinningpoint2.RotatedBy((double)((float)num881 - 3.1415927f), default(Vector2));
								Vector2 vector71 = ((float)num881 - 1.5707964f).ToRotationVector2();
								Vector2 vector72 = base.Center + vector71 * 16f * 0f;
								Dust dust291 = Dust.NewDustPerfect(vector72, 6, new Vector2?(spinningpoint2), 0, default(Color), 1f);
								dust291.fadeIn = 1.8f;
								dust291.noGravity = true;
								Dust dust292 = dust291;
								Dust dust334 = dust292;
								dust334.velocity *= (float)num882 * (Main.rand.NextFloat() * 2f + 0.2f);
								dust292 = dust291;
								dust334 = dust292;
								dust334.velocity += vector71 * 0.8f * (float)num882;
								dust292 = dust291;
								dust334 = dust292;
								dust334.velocity *= 2f;
							}
							num1032 = num882;
						}
						for (int num885 = 1; num885 <= 3; num885 = num1032 + 1)
						{
							for (int num886 = -1; num886 <= 1; num886 += 2)
							{
								for (int num887 = -1; num887 <= 1; num887 += 2)
								{
									Gore gore47 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore48 = gore47;
									Gore gore64 = gore48;
									gore64.velocity *= (float)num885 / 3f;
									gore48 = gore47;
									gore64 = gore48;
									gore64.velocity += new Vector2((float)num886, (float)num887);
								}
							}
							num1032 = num885;
						}
						this.Resize(10, 10);
					}
					else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
					{
						this.Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						Color transparent7 = Color.Transparent;
						int num1032;
						for (int num888 = 0; num888 < 15; num888 = num1032 + 1)
						{
							Dust dust293 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent7, 0.8f);
							dust293.fadeIn = 0f;
							Dust dust294 = dust293;
							Dust dust334 = dust294;
							dust334.velocity *= 0.5f;
							num1032 = num888;
						}
						for (int num889 = 0; num889 < 5; num889 = num1032 + 1)
						{
							Dust dust295 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent7, 2.5f);
							dust295.noGravity = true;
							Dust dust296 = dust295;
							Dust dust334 = dust296;
							dust334.velocity *= 2.5f;
							dust295 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent7, 1.1f);
							dust296 = dust295;
							dust334 = dust296;
							dust334.velocity *= 2f;
							dust295.noGravity = true;
							num1032 = num889;
						}
						for (int num890 = 0; num890 < 3; num890 = num1032 + 1)
						{
							Dust dust297 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 100, transparent7, 1.1f);
							Dust dust298 = dust297;
							Dust dust334 = dust298;
							dust334.velocity *= 2f;
							dust297.noGravity = true;
							num1032 = num890;
						}
						for (int num891 = -1; num891 <= 1; num891 += 2)
						{
							for (int num892 = -1; num892 <= 1; num892 += 2)
							{
								if (Main.rand.Next(5) == 0)
								{
									Gore gore49 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore50 = gore49;
									Gore gore64 = gore50;
									gore64.velocity *= 0.2f;
									gore50 = gore49;
									gore64 = gore50;
									gore64.scale *= 0.65f;
									gore50 = gore49;
									gore64 = gore50;
									gore64.velocity += new Vector2((float)num891, (float)num892) * 0.5f;
								}
							}
						}
					}
					else if (this.type == 776 || this.type == 780 || this.type == 777 || this.type == 781 || this.type == 778 || this.type == 782 || this.type == 803 || this.type == 804)
					{
						this.Resize(22, 22);
						if (this.type == 777 || this.type == 781)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						Color transparent8 = Color.Transparent;
						int num1032;
						for (int num893 = 0; num893 < 30; num893 = num1032 + 1)
						{
							Dust dust299 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, transparent8, 1.5f);
							Dust dust300 = dust299;
							Dust dust334 = dust300;
							dust334.velocity *= 1.4f;
							num1032 = num893;
						}
						for (int num894 = 0; num894 < 40; num894 = num1032 + 1)
						{
							Dust dust301 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent8, 3.5f);
							dust301.noGravity = true;
							Dust dust302 = dust301;
							Dust dust334 = dust302;
							dust334.velocity *= 7f;
							dust301 = Dust.NewDustDirect(this.position, this.width, this.height, 228, 0f, 0f, 100, transparent8, 1.3f);
							dust302 = dust301;
							dust334 = dust302;
							dust334.velocity *= 4f;
							dust301.noGravity = true;
							num1032 = num894;
						}
						for (int num895 = 0; num895 < 8; num895 = num1032 + 1)
						{
							Dust dust303 = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0f, 0f, 100, transparent8, 1.3f);
							Dust dust304 = dust303;
							Dust dust334 = dust304;
							dust334.velocity *= 4f;
							dust303.noGravity = true;
							num1032 = num895;
						}
						for (int num896 = 2; num896 <= 2; num896 = num1032 + 1)
						{
							for (int num897 = -1; num897 <= 1; num897 += 2)
							{
								for (int num898 = -1; num898 <= 1; num898 += 2)
								{
									Gore gore51 = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									Gore gore52 = gore51;
									Gore gore64 = gore52;
									gore64.velocity *= ((num896 == 1) ? 0.4f : 0.8f);
									gore52 = gore51;
									gore64 = gore52;
									gore64.velocity += new Vector2((float)num897, (float)num898);
								}
							}
							num1032 = num896;
						}
						if (this.owner == Main.myPlayer)
						{
							int num899 = 779;
							if (this.type == 780 || this.type == 781 || this.type == 782)
							{
								num899 = 783;
							}
							if (this.type == 803)
							{
								num899 = 862;
							}
							if (this.type == 804)
							{
								num899 = 863;
							}
							float num900 = Main.rand.NextFloat() * 6.2831855f;
							for (float num901 = 0f; num901 < 1f; num901 += 0.16666667f)
							{
								float f5 = num900 + num901 * 6.2831855f;
								Vector2 vector73 = f5.ToRotationVector2() * (4f + Main.rand.NextFloat() * 2f);
								vector73 += Vector2.UnitY * -1f;
								int num902 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center, vector73, num899, this.damage / 2, 0f, this.owner, 0f, 0f, 0f);
								Projectile projectile = Main.projectile[num902];
								Projectile projectile2 = projectile;
								Projectile projectile3 = projectile2;
								projectile3.timeLeft -= Main.rand.Next(30);
							}
						}
					}
					else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 303 || this.type == 338 || this.type == 339 || this.type == 930)
					{
						if (this.type == 30 || this.type == 133 || this.type == 136)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						ref float ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						int num1032;
						for (int num903 = 0; num903 < 30; num903 = num1032 + 1)
						{
							int num904 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust305 = Main.dust[num904];
							Dust dust334 = dust305;
							dust334.velocity *= 1.4f;
							num1032 = num903;
						}
						for (int num905 = 0; num905 < 20; num905 = num1032 + 1)
						{
							int num906 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num906].noGravity = true;
							Dust dust306 = Main.dust[num906];
							Dust dust334 = dust306;
							dust334.velocity *= 7f;
							num906 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust306 = Main.dust[num906];
							dust334 = dust306;
							dust334.velocity *= 3f;
							num1032 = num905;
						}
						for (int num907 = 0; num907 < 2; num907 = num1032 + 1)
						{
							float num908 = 0.4f;
							if (num907 == 1)
							{
								num908 = 0.8f;
							}
							int num909 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore53 = Main.gore[num909];
							Gore gore64 = gore53;
							gore64.velocity *= num908;
							ptr = ref Main.gore[num909].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num909].velocity.Y;
							ptr += 1f;
							num909 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore53 = Main.gore[num909];
							gore64 = gore53;
							gore64.velocity *= num908;
							ptr = ref Main.gore[num909].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num909].velocity.Y;
							ptr += 1f;
							num909 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore53 = Main.gore[num909];
							gore64 = gore53;
							gore64.velocity *= num908;
							ptr = ref Main.gore[num909].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num909].velocity.Y;
							ptr -= 1f;
							num909 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore53 = Main.gore[num909];
							gore64 = gore53;
							gore64.velocity *= num908;
							ptr = ref Main.gore[num909].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num909].velocity.Y;
							ptr -= 1f;
							num1032 = num907;
						}
					}
					else if (this.type == 139 || this.type == 140 || this.type == 141 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 340 || this.type == 341)
					{
						if (this.type == 139)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(this.position), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						}
						ref float ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 80;
						this.height = 80;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						int num1032;
						for (int num910 = 0; num910 < 40; num910 = num1032 + 1)
						{
							int num911 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust307 = Main.dust[num911];
							Dust dust334 = dust307;
							dust334.velocity *= 3f;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num911].scale = 0.5f;
								Main.dust[num911].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							}
							num1032 = num910;
						}
						for (int num912 = 0; num912 < 70; num912 = num1032 + 1)
						{
							int num913 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num913].noGravity = true;
							Dust dust308 = Main.dust[num913];
							Dust dust334 = dust308;
							dust334.velocity *= 5f;
							num913 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust308 = Main.dust[num913];
							dust334 = dust308;
							dust334.velocity *= 2f;
							num1032 = num912;
						}
						for (int num914 = 0; num914 < 3; num914 = num1032 + 1)
						{
							float num915 = 0.33f;
							if (num914 == 1)
							{
								num915 = 0.66f;
							}
							if (num914 == 2)
							{
								num915 = 1f;
							}
							int num916 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Gore gore54 = Main.gore[num916];
							Gore gore64 = gore54;
							gore64.velocity *= num915;
							ptr = ref Main.gore[num916].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num916].velocity.Y;
							ptr += 1f;
							num916 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore54 = Main.gore[num916];
							gore64 = gore54;
							gore64.velocity *= num915;
							ptr = ref Main.gore[num916].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num916].velocity.Y;
							ptr += 1f;
							num916 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore54 = Main.gore[num916];
							gore64 = gore54;
							gore64.velocity *= num915;
							ptr = ref Main.gore[num916].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num916].velocity.Y;
							ptr -= 1f;
							num916 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							gore54 = Main.gore[num916];
							gore64 = gore54;
							gore64.velocity *= num915;
							ptr = ref Main.gore[num916].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num916].velocity.Y;
							ptr -= 1f;
							num1032 = num914;
						}
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 10;
						this.height = 10;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
					}
					else if (this.type == 246)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num917 = 0; num917 < 10; num917 = num1032 + 1)
						{
							int num918 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust309 = Main.dust[num918];
							Dust dust334 = dust309;
							dust334.velocity *= 0.9f;
							num1032 = num917;
						}
						for (int num919 = 0; num919 < 5; num919 = num1032 + 1)
						{
							int num920 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num920].noGravity = true;
							Dust dust310 = Main.dust[num920];
							Dust dust334 = dust310;
							dust334.velocity *= 3f;
							num920 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust310 = Main.dust[num920];
							dust334 = dust310;
							dust334.velocity *= 2f;
							num1032 = num919;
						}
						int num921 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore55 = Main.gore[num921];
						Gore gore64 = gore55;
						gore64.velocity *= 0.3f;
						ref float ptr = ref Main.gore[num921].velocity.X;
						ptr += (float)Main.rand.Next(-1, 2);
						ptr = ref Main.gore[num921].velocity.Y;
						ptr += (float)Main.rand.Next(-1, 2);
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 150;
						this.height = 150;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						this.penetrate = -1;
						this.maxPenetrate = 0;
						this.Damage();
						if (this.owner == Main.myPlayer)
						{
							int num922 = Main.rand.Next(2, 6);
							for (int num923 = 0; num923 < num922; num923 = num1032 + 1)
							{
								float num924 = (float)Main.rand.Next(-100, 101);
								num924 += 0.01f;
								float num925 = (float)Main.rand.Next(-100, 101);
								num924 -= 0.01f;
								float num926 = (float)Math.Sqrt((double)(num924 * num924 + num925 * num925));
								num926 = 8f / num926;
								num924 *= num926;
								num925 *= num926;
								int num927 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X - this.oldVelocity.X, base.Center.Y - this.oldVelocity.Y, num924, num925, 249, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
								Main.projectile[num927].maxPenetrate = 0;
								num1032 = num923;
							}
						}
					}
					else if (this.type == 249)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						int num1032;
						for (int num928 = 0; num928 < 7; num928 = num1032 + 1)
						{
							int num929 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust311 = Main.dust[num929];
							Dust dust334 = dust311;
							dust334.velocity *= 0.8f;
							num1032 = num928;
						}
						for (int num930 = 0; num930 < 2; num930 = num1032 + 1)
						{
							int num931 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num931].noGravity = true;
							Dust dust312 = Main.dust[num931];
							Dust dust334 = dust312;
							dust334.velocity *= 2.5f;
							num931 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust312 = Main.dust[num931];
							dust334 = dust312;
							dust334.velocity *= 1.5f;
							num1032 = num930;
						}
						int num932 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore56 = Main.gore[num932];
						Gore gore64 = gore56;
						gore64.velocity *= 0.2f;
						ref float ptr = ref Main.gore[num932].velocity.X;
						ptr += (float)Main.rand.Next(-1, 2);
						ptr = ref Main.gore[num932].velocity.Y;
						ptr += (float)Main.rand.Next(-1, 2);
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 100;
						this.height = 100;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						this.penetrate = -1;
						this.Damage();
					}
					else if (this.type == 588)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						this.position = base.Center;
						this.width = (this.height = 22);
						base.Center = this.position;
						int num1032;
						for (int num933 = 0; num933 < 8; num933 = num1032 + 1)
						{
							int num934 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219 + Main.rand.Next(5), 0f, 0f, 0, default(Color), 1f);
							Dust dust313 = Main.dust[num934];
							Dust dust334 = dust313;
							dust334.velocity *= 1.4f;
							Main.dust[num934].fadeIn = 1f;
							Main.dust[num934].noGravity = true;
							num1032 = num933;
						}
						for (int num935 = 0; num935 < 15; num935 = num1032 + 1)
						{
							int num936 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
							Main.dust[num936].noGravity = true;
							Dust dust314 = Main.dust[num936];
							Dust dust334 = dust314;
							dust334.velocity *= 5f;
							num936 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
							dust314 = Main.dust[num936];
							dust334 = dust314;
							dust334.velocity *= 3f;
							num1032 = num935;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num937 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore57 = Main.gore[num937];
							Gore gore64 = gore57;
							gore64.velocity *= 0.4f;
							ref float ptr = ref Main.gore[num937].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num937].velocity.Y;
							ptr += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num938 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore58 = Main.gore[num938];
							Gore gore64 = gore58;
							gore64.velocity *= 0.4f;
							ref float ptr = ref Main.gore[num938].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num938].velocity.Y;
							ptr += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num939 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore59 = Main.gore[num939];
							Gore gore64 = gore59;
							gore64.velocity *= 0.4f;
							ref float ptr = ref Main.gore[num939].velocity.X;
							ptr += 1f;
							ptr = ref Main.gore[num939].velocity.Y;
							ptr -= 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num940 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(276, 283), 1f);
							Gore gore60 = Main.gore[num940];
							Gore gore64 = gore60;
							gore64.velocity *= 0.4f;
							ref float ptr = ref Main.gore[num940].velocity.X;
							ptr -= 1f;
							ptr = ref Main.gore[num940].velocity.Y;
							ptr -= 1f;
						}
					}
					else if (this.type == 773)
					{
						Player player2 = Main.player[this.owner];
						Vector2 v = base.DirectionTo(player2.Center);
						float num941 = v.ToRotation() + 1.5707964f;
						num941 += 3.1415927f;
						Point scarabBombDigDirectionSnap = this.GetScarabBombDigDirectionSnap8();
						num941 = scarabBombDigDirectionSnap.ToVector2().ToRotation() + 1.5707964f;
						if (this.type == 794 || this.type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, new Vector2?(base.Center), null);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, new Vector2?(base.Center), null);
						}
						this.Resize(80, 80);
						int num1032;
						for (int num942 = 0; num942 < 60; num942 = num1032 + 1)
						{
							Dust dust315 = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							ref float ptr = ref dust315.velocity.Y;
							ptr -= 0.5f;
							Dust dust316 = dust315;
							Dust dust334 = dust316;
							dust334.velocity *= 1.2f;
							dust315.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust315.scale = 0.5f;
								dust315.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust315.color = Color.Black * 0.8f;
							}
							num1032 = num942;
						}
						for (int num943 = 0; num943 < 30; num943 = num1032 + 1)
						{
							Dust dust317 = Dust.NewDustDirect(this.position, this.width, this.height, 59, 0f, 0f, 100, default(Color), 1f);
							dust317.noGravity = true;
							float ptr;
							if (Math.Abs(this.velocity.X) > 0.25f)
							{
								ptr = ref this.velocity.X;
								ptr *= 0.25f / Math.Abs(this.velocity.X);
							}
							ptr = ref dust317.velocity.Y;
							ptr -= 0.5f;
							dust317.fadeIn = 1.2f;
							Dust dust318 = dust317;
							Dust dust334 = dust318;
							dust334.velocity *= 8f;
							dust317.velocity = dust317.velocity.RotatedBy((double)num941, default(Vector2));
							dust317 = Dust.NewDustDirect(this.position, this.width, this.height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust318 = dust317;
							dust334 = dust318;
							dust334.velocity *= 2f;
							dust317.velocity = dust317.velocity.RotatedBy((double)num941, default(Vector2));
							ptr = ref dust317.velocity.Y;
							ptr -= 1.5f;
							dust317 = Dust.NewDustDirect(this.position, this.width, this.height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust317.noGravity = true;
							ptr = ref dust317.velocity.Y;
							ptr -= 1f;
							dust317.fadeIn = 2f;
							dust318 = dust317;
							dust334 = dust318;
							dust334.velocity *= 4f;
							dust317.velocity = dust317.velocity.RotatedBy((double)num941, default(Vector2));
							num1032 = num943;
						}
						bool flag4 = Math.Abs(scarabBombDigDirectionSnap.X) + Math.Abs(scarabBombDigDirectionSnap.Y) == 1;
						for (int num944 = 1; num944 <= 3; num944 = num1032 + 1)
						{
							float num945 = 6.2831855f * Main.rand.NextFloat();
							for (float num946 = 0f; num946 < 1f; num946 += 0.083333336f)
							{
								float f6 = 6.2831855f * num946 + num945;
								Vector2 value13 = f6.ToRotationVector2();
								value13 *= new Vector2(0.7f, 0.3f);
								Dust dust319 = Dust.NewDustPerfect(base.Center, 59, new Vector2?(value13), 0, default(Color), 1f);
								dust319.fadeIn = 2f;
								dust319.noGravity = true;
								Dust dust320 = dust319;
								Dust dust334 = dust320;
								dust334.velocity *= (float)num944 + Main.rand.NextFloat() * 0.6f;
								ref float ptr = ref dust319.velocity.Y;
								ptr -= (float)num944 * 0.8f;
								dust319.velocity = dust319.velocity.RotatedBy((double)num941, default(Vector2));
								if (flag4)
								{
									dust320 = dust319;
									dust334 = dust320;
									dust334.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 11f + 6f);
								}
								else
								{
									dust320 = dust319;
									dust334 = dust320;
									dust334.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 7f + 5f);
								}
							}
							num1032 = num944;
						}
						Vector2 vector74 = (num941 - 1.5707964f).ToRotationVector2();
						for (int num947 = 1; num947 <= 1; num947 = num1032 + 1)
						{
							for (int num948 = -1; num948 <= 1; num948 += 2)
							{
								for (int num949 = -1; num949 <= 1; num949 += 2)
								{
									Gore gore61 = Gore.NewGoreDirect(base.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64), 1f);
									gore61.velocity = gore61.velocity * 0.5f + vector74 * 3f;
									Gore gore62 = gore61;
									Gore gore64 = gore62;
									gore64.velocity += new Vector2((float)num948, (float)num949) * 0.2f;
								}
							}
							num1032 = num947;
						}
						this.Resize(10, 10);
						if (this.owner == Main.myPlayer)
						{
							Point p2 = base.Center.ToTileCoordinates();
							Vector2 vector75 = p2.ToWorldCoordinates(8f, 8f);
							bool wallSplode = false;
							int num950 = 15;
							if (scarabBombDigDirectionSnap.X == 0 || scarabBombDigDirectionSnap.Y == 0)
							{
								num950 = (int)((double)num950 * Math.Sqrt(2.0));
							}
							for (int num951 = 0; num951 < num950; num951 = num1032 + 1)
							{
								Vector2 vec = vector75 + scarabBombDigDirectionSnap.ToVector2() * 16f * (float)num951 * 1f;
								Point p3 = vec.ToTileCoordinates();
								if (this.ShouldWallExplode(p3.ToWorldCoordinates(8f, 8f), 9999, p3.X - 1, p3.X + 1, p3.Y - 1, p3.Y + 1))
								{
									wallSplode = true;
									break;
								}
								num1032 = num951;
							}
							for (int num952 = 0; num952 < num950; num952 = num1032 + 1)
							{
								Vector2 vec2 = vector75 + scarabBombDigDirectionSnap.ToVector2() * 16f * (float)num952 * 1f;
								Point p4 = vec2.ToTileCoordinates();
								this.ExplodeTiles(p4.ToWorldCoordinates(8f, 8f), 9999, p4.X - 1, p4.X + 1, p4.Y - 1, p4.Y + 1, wallSplode);
								num1032 = num952;
							}
						}
					}
					else if (this.type == 28 || this.type == 30 || this.type == 37 || this.type == 75 || this.type == 102 || this.type == 164 || this.type == 397 || this.type == 517 || this.type == 516 || this.type == 519 || this.type == 773)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						ref float ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 22;
						this.height = 22;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
						int num953 = 6;
						if (this.type == 773)
						{
							num953 = 59;
						}
						int num1032;
						for (int num954 = 0; num954 < 20; num954 = num1032 + 1)
						{
							int num955 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust321 = Main.dust[num955];
							Dust dust334 = dust321;
							dust334.velocity *= 1.4f;
							num1032 = num954;
						}
						for (int num956 = 0; num956 < 10; num956 = num1032 + 1)
						{
							int num957 = Dust.NewDust(this.position, this.width, this.height, num953, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num957].noGravity = true;
							Dust dust322 = Main.dust[num957];
							Dust dust334 = dust322;
							dust334.velocity *= 5f;
							num957 = Dust.NewDust(this.position, this.width, this.height, num953, 0f, 0f, 100, default(Color), 1.5f);
							dust322 = Main.dust[num957];
							dust334 = dust322;
							dust334.velocity *= 3f;
							num1032 = num956;
						}
						int num958 = Gore.NewGore(this.position, default(Vector2), Main.rand.Next(61, 64), 1f);
						Gore gore63 = Main.gore[num958];
						Gore gore64 = gore63;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num958].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num958].velocity.Y;
						ptr += 1f;
						num958 = Gore.NewGore(this.position, default(Vector2), Main.rand.Next(61, 64), 1f);
						gore63 = Main.gore[num958];
						gore64 = gore63;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num958].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num958].velocity.Y;
						ptr += 1f;
						num958 = Gore.NewGore(this.position, default(Vector2), Main.rand.Next(61, 64), 1f);
						gore63 = Main.gore[num958];
						gore64 = gore63;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num958].velocity.X;
						ptr += 1f;
						ptr = ref Main.gore[num958].velocity.Y;
						ptr -= 1f;
						num958 = Gore.NewGore(this.position, default(Vector2), Main.rand.Next(61, 64), 1f);
						gore63 = Main.gore[num958];
						gore64 = gore63;
						gore64.velocity *= 0.4f;
						ptr = ref Main.gore[num958].velocity.X;
						ptr -= 1f;
						ptr = ref Main.gore[num958].velocity.Y;
						ptr -= 1f;
						if (this.type == 102)
						{
							Vector2 vector76 = this.position;
							ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 128;
							this.height = 128;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
							this.damage = 40;
							this.Damage();
							this.position = vector76;
							this.width = 22;
							this.height = 22;
						}
						if (this.type == 75)
						{
							this.Resize(128, 128);
							this.damage = 60;
							this.knockBack = 8f;
							this.Damage();
							this.Resize(22, 22);
						}
					}
					else if (this.type == 29 || this.type == 108 || this.type == 470 || this.type == 637 || this.type == 1002)
					{
						SoundEngine.PlaySound(SoundID.Item14, new Vector2?(this.position), null);
						float ptr;
						if (this.type == 29)
						{
							ptr = ref this.position.X;
							ptr += (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr += (float)(this.height / 2);
							this.width = 200;
							this.height = 200;
							ptr = ref this.position.X;
							ptr -= (float)(this.width / 2);
							ptr = ref this.position.Y;
							ptr -= (float)(this.height / 2);
						}
						int num1032;
						for (int num959 = 0; num959 < 50; num959 = num1032 + 1)
						{
							int num960 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust323 = Main.dust[num960];
							Dust dust334 = dust323;
							dust334.velocity *= 1.4f;
							num1032 = num959;
						}
						for (int num961 = 0; num961 < 80; num961 = num1032 + 1)
						{
							int num962 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num962].noGravity = true;
							Dust dust324 = Main.dust[num962];
							Dust dust334 = dust324;
							dust334.velocity *= 5f;
							num962 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust324 = Main.dust[num962];
							dust334 = dust324;
							dust334.velocity *= 3f;
							num1032 = num961;
						}
						for (int num963 = 0; num963 < 2; num963 = num1032 + 1)
						{
							int num964 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num964].scale = 1.5f;
							ptr = ref Main.gore[num964].velocity.X;
							ptr += 1.5f;
							ptr = ref Main.gore[num964].velocity.Y;
							ptr += 1.5f;
							num964 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num964].scale = 1.5f;
							ptr = ref Main.gore[num964].velocity.X;
							ptr -= 1.5f;
							ptr = ref Main.gore[num964].velocity.Y;
							ptr += 1.5f;
							num964 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num964].scale = 1.5f;
							ptr = ref Main.gore[num964].velocity.X;
							ptr += 1.5f;
							ptr = ref Main.gore[num964].velocity.Y;
							ptr -= 1.5f;
							num964 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num964].scale = 1.5f;
							ptr = ref Main.gore[num964].velocity.X;
							ptr -= 1.5f;
							ptr = ref Main.gore[num964].velocity.Y;
							ptr -= 1.5f;
							num1032 = num963;
						}
						ptr = ref this.position.X;
						ptr += (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr += (float)(this.height / 2);
						this.width = 10;
						this.height = 10;
						ptr = ref this.position.X;
						ptr -= (float)(this.width / 2);
						ptr = ref this.position.Y;
						ptr -= (float)(this.height / 2);
					}
					else if (this.type == 69)
					{
						SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num965 = 0; num965 < 5; num965 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num1032 = num965;
						}
						for (int num966 = 0; num966 < 30; num966 = num1032 + 1)
						{
							int num967 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 33, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num967].alpha = 100;
							ref float ptr = ref Main.dust[num967].velocity.X;
							ptr *= 1.5f;
							Dust dust325 = Main.dust[num967];
							Dust dust334 = dust325;
							dust334.velocity *= 3f;
							num1032 = num966;
						}
					}
					else if (this.type == 70)
					{
						SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num968 = 0; num968 < 5; num968 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num1032 = num968;
						}
						for (int num969 = 0; num969 < 30; num969 = num1032 + 1)
						{
							int num970 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 52, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num970].alpha = 100;
							ref float ptr = ref Main.dust[num970].velocity.X;
							ptr *= 1.5f;
							Dust dust326 = Main.dust[num970];
							Dust dust334 = dust326;
							dust334.velocity *= 3f;
							num1032 = num969;
						}
					}
					else if (this.type == 621)
					{
						SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						int num1032;
						for (int num971 = 0; num971 < 5; num971 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num1032 = num971;
						}
						for (int num972 = 0; num972 < 30; num972 = num1032 + 1)
						{
							int num973 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 266, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num973].alpha = 100;
							ref float ptr = ref Main.dust[num973].velocity.X;
							ptr *= 1.5f;
							Dust dust327 = Main.dust[num973];
							Dust dust334 = dust327;
							dust334.velocity *= 3f;
							num1032 = num972;
						}
					}
					else if (this.type == 114 || this.type == 115)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num974 = 4; num974 < 31; num974 = num1032 + 1)
						{
							float num975 = this.oldVelocity.X * (30f / (float)num974);
							float num976 = this.oldVelocity.Y * (30f / (float)num974);
							int num977 = Dust.NewDust(new Vector2(this.position.X - num975, this.position.Y - num976), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num977].noGravity = true;
							Dust dust328 = Main.dust[num977];
							Dust dust334 = dust328;
							dust334.velocity *= 0.5f;
							num977 = Dust.NewDust(new Vector2(this.position.X - num975, this.position.Y - num976), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 0.9f);
							dust328 = Main.dust[num977];
							dust334 = dust328;
							dust334.velocity *= 0.5f;
							num1032 = num974;
						}
					}
					else if (this.type == 116)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num978 = 4; num978 < 31; num978 = num1032 + 1)
						{
							float num979 = this.oldVelocity.X * (30f / (float)num978);
							float num980 = this.oldVelocity.Y * (30f / (float)num978);
							int num981 = Dust.NewDust(new Vector2(this.position.X - num979, this.position.Y - num980), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num981].noGravity = true;
							num981 = Dust.NewDust(new Vector2(this.position.X - num979, this.position.Y - num980), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num981].noGravity = true;
							num1032 = num978;
						}
					}
					else if (this.type == 173)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num982 = 4; num982 < 24; num982 = num1032 + 1)
						{
							float num983 = this.oldVelocity.X * (30f / (float)num982);
							float num984 = this.oldVelocity.Y * (30f / (float)num982);
							num1032 = Main.rand.Next(3);
							int num985;
							if (num1032 != 0)
							{
								if (num1032 != 1)
								{
									num985 = 58;
								}
								else
								{
									num985 = 57;
								}
							}
							else
							{
								num985 = 15;
							}
							int num986 = Dust.NewDust(new Vector2(this.position.X - num983, this.position.Y - num984), 8, 8, num985, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
							Dust dust329 = Main.dust[num986];
							Dust dust334 = dust329;
							dust334.velocity *= 1.5f;
							Main.dust[num986].noGravity = true;
							num1032 = num982;
						}
					}
					else if (this.type == 132)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num987 = 4; num987 < 31; num987 = num1032 + 1)
						{
							float num988 = this.oldVelocity.X * (30f / (float)num987);
							float num989 = this.oldVelocity.Y * (30f / (float)num987);
							int num990 = Dust.NewDust(new Vector2(this.oldPosition.X - num988, this.oldPosition.Y - num989), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num990].noGravity = true;
							Dust dust330 = Main.dust[num990];
							Dust dust334 = dust330;
							dust334.velocity *= 0.5f;
							num990 = Dust.NewDust(new Vector2(this.oldPosition.X - num988, this.oldPosition.Y - num989), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.4f);
							dust330 = Main.dust[num990];
							dust334 = dust330;
							dust334.velocity *= 0.05f;
							num1032 = num987;
						}
					}
					else if (this.type == 156)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num991 = 4; num991 < 31; num991 = num1032 + 1)
						{
							float num992 = this.oldVelocity.X * (30f / (float)num991);
							float num993 = this.oldVelocity.Y * (30f / (float)num991);
							int num994 = Dust.NewDust(new Vector2(this.oldPosition.X - num992, this.oldPosition.Y - num993), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, 255, default(Color), 1.8f);
							Main.dust[num994].noGravity = true;
							Dust dust331 = Main.dust[num994];
							Dust dust334 = dust331;
							dust334.velocity *= 0.5f;
							num994 = Dust.NewDust(new Vector2(this.oldPosition.X - num992, this.oldPosition.Y - num993), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, 255, default(Color), 1.4f);
							dust331 = Main.dust[num994];
							dust334 = dust331;
							dust334.velocity *= 0.05f;
							Main.dust[num994].noGravity = true;
							num1032 = num991;
						}
					}
					else if (this.type == 157)
					{
						SoundEngine.PlaySound(SoundID.Item10, new Vector2?(this.position), null);
						int num1032;
						for (int num995 = 4; num995 < 31; num995 = num1032 + 1)
						{
							int num996 = Dust.NewDust(this.position, this.width, this.height, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num996].noGravity = true;
							Dust dust332 = Main.dust[num996];
							Dust dust334 = dust332;
							dust334.velocity *= 0.5f;
							num1032 = num995;
						}
					}
					else if (this.type == 370)
					{
						SoundEngine.PlaySound(SoundID.Item4, new Vector2?(this.position), null);
						int num1032;
						for (int num997 = 0; num997 < 5; num997 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num1032 = num997;
						}
						for (int num998 = 0; num998 < 30; num998 = num1032 + 1)
						{
							Vector2 vector77;
							vector77..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
							vector77.Normalize();
							int num999 = Gore.NewGore(base.Center + vector77 * 10f, vector77 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
							Main.gore[num999].sticky = false;
							num1032 = num998;
						}
					}
					else if (this.type == 371)
					{
						SoundEngine.PlaySound(13, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						SoundEngine.PlaySound(SoundID.Item16, new Vector2?(this.position), null);
						int num1032;
						for (int num1000 = 0; num1000 < 5; num1000 = num1032 + 1)
						{
							Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0f, 0f, 0, default(Color), 1f);
							num1032 = num1000;
						}
						for (int num1001 = 0; num1001 < 30; num1001 = num1032 + 1)
						{
							Vector2 vector78;
							vector78..ctor((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
							vector78.Normalize();
							vector78 *= 0.4f;
							int num1002 = Gore.NewGore(base.Center + vector78 * 10f, vector78 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
							Main.gore[num1002].sticky = false;
							num1032 = num1001;
						}
					}
					else if (this.type == 936)
					{
						SoundEngine.PlaySound(SoundID.Item21, new Vector2?(this.position), null);
						int num1032;
						for (int num1003 = 0; num1003 < 20; num1003 = num1032 + 1)
						{
							Color newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.7f, byte.MaxValue);
							ref Color ptr2 = ref newColor8;
							ptr2.A /= 2;
							int num1004 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 150, newColor8, 1f);
							Dust dust333 = Main.dust[num1004];
							Dust dust334 = dust333;
							dust334.velocity *= 1.5f;
							newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.5f, byte.MaxValue);
							ptr2 = ref newColor8;
							ptr2.A /= 2;
							num1004 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0f, 0f, 150, newColor8, 1.8f);
							dust333 = Main.dust[num1004];
							dust334 = dust333;
							dust334.velocity *= 3f;
							Main.dust[num1004].noGravity = true;
							num1032 = num1003;
						}
					}
				}
			}
			if (this.owner == Main.myPlayer && (this.type == 370 || this.type == 371 || this.type == 936))
			{
				float num1005 = 80f;
				int num1006 = 119;
				if (this.type == 371)
				{
					num1006 = 120;
				}
				if (this.type == 936)
				{
					num1006 = 320;
				}
				int num1032;
				for (int num1007 = 0; num1007 < 255; num1007 = num1032 + 1)
				{
					Player player3 = Main.player[num1007];
					if (player3.active && !player3.dead && Vector2.Distance(base.Center, player3.Center) < num1005)
					{
						player3.AddBuff(num1006, 1800, false, false);
					}
					num1032 = num1007;
				}
				for (int num1008 = 0; num1008 < 200; num1008 = num1032 + 1)
				{
					NPC nPC = Main.npc[num1008];
					if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num1005)
					{
						nPC.AddBuff(num1006, 1800, false);
					}
					num1032 = num1008;
				}
			}
			if (this.owner == Main.myPlayer)
			{
				if (this.type == 30 || this.type == 517 || this.type == 397 || this.type == 588)
				{
					int num1009 = 4;
					Vector2 center2 = base.Center;
					int num1010 = (int)(center2.X / 16f - (float)num1009);
					int num1011 = (int)(center2.X / 16f + (float)num1009);
					int num1012 = (int)(center2.Y / 16f - (float)num1009);
					int num1013 = (int)(center2.Y / 16f + (float)num1009);
					if (num1010 < 0)
					{
						num1010 = 0;
					}
					if (num1011 > Main.maxTilesX)
					{
						num1011 = Main.maxTilesX;
					}
					if (num1012 < 0)
					{
						num1012 = 0;
					}
					if (num1013 > Main.maxTilesY)
					{
						num1013 = Main.maxTilesY;
					}
					this.ExplodeCrackedTiles(center2, num1009, num1010, num1011, num1012, num1013);
				}
				if (this.type == 28 || this.type == 29 || this.type == 37 || this.type == 108 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 339 || this.type == 341 || this.type == 470 || this.type == 516 || this.type == 519 || this.type == 637 || this.type == 716 || this.type == 718 || this.type == 780 || this.type == 781 || this.type == 782 || this.type == 804 || this.type == 783 || this.type == 863 || this.type == 796 || this.type == 797 || this.type == 798 || this.type == 809 || (this.type == 102 && Main.getGoodWorld && !Main.remixWorld))
				{
					int num1014 = 3;
					if (this.type == 102)
					{
						num1014 = 4;
					}
					if (this.type == 28 || this.type == 37 || this.type == 516 || this.type == 519)
					{
						num1014 = 4;
					}
					if (this.type == 29 || this.type == 470 || this.type == 637 || this.type == 796 || this.type == 797 || this.type == 798 || this.type == 809)
					{
						num1014 = 7;
					}
					if (this.type == 142 || this.type == 143 || this.type == 144 || this.type == 341)
					{
						num1014 = 5;
					}
					if (this.type == 716 || this.type == 780 || this.type == 781 || this.type == 782 || this.type == 804 || this.type == 783 || this.type == 863)
					{
						num1014 = 3;
					}
					if (this.type == 718)
					{
						num1014 = 5;
					}
					if (this.type == 108)
					{
						num1014 = 10;
					}
					if (this.type == 1002)
					{
						num1014 = 10;
					}
					Vector2 center3 = this.position;
					if (this.type == 716 || this.type == 718 || this.type == 773)
					{
						center3 = base.Center;
					}
					int num1015 = num1014;
					int num1016 = num1014;
					int num1017 = (int)(center3.X / 16f - (float)num1015);
					int num1018 = (int)(center3.X / 16f + (float)num1015);
					int num1019 = (int)(center3.Y / 16f - (float)num1016);
					int num1020 = (int)(center3.Y / 16f + (float)num1016);
					if (num1017 < 0)
					{
						num1017 = 0;
					}
					if (num1018 > Main.maxTilesX)
					{
						num1018 = Main.maxTilesX;
					}
					if (num1019 < 0)
					{
						num1019 = 0;
					}
					if (num1020 > Main.maxTilesY)
					{
						num1020 = Main.maxTilesY;
					}
					bool wallSplode2 = this.ShouldWallExplode(center3, num1014, num1017, num1018, num1019, num1020);
					this.ExplodeTiles(center3, num1014, num1017, num1018, num1019, num1020, wallSplode2);
				}
				if (Main.netMode != 0)
				{
					NetMessage.SendData(29, -1, -1, null, this.identity, (float)this.owner, 0f, 0f, 0, 0, 0);
				}
				if (!this.noDropItem)
				{
					int num1021 = -1;
					if (this.type >= 736 && this.type <= 738)
					{
						SoundEngine.PlaySound(SoundID.Item127, new Vector2?(this.position), null);
						int num1032;
						for (int num1022 = 0; num1022 < 3; num1022 = num1032 + 1)
						{
							Dust.NewDust(this.position, 16, 16, this.type - 736 + 275, 0f, 0f, 0, default(Color), 1f);
							num1032 = num1022;
						}
						int num1023 = (int)(base.Center.X / 16f);
						int num1024 = (int)(base.Center.Y / 16f) + 1;
						if (Main.myPlayer == this.owner)
						{
							Tile value14 = Main.tile[num1023, num1024];
							if (value14.active())
							{
								bool[] crackedBricks = TileID.Sets.CrackedBricks;
								value14 = Main.tile[num1023, num1024];
								if (crackedBricks[(int)(*value14.type)] && Main.rand.Next(2) == 0)
								{
									WorldGen.KillTile(num1023, num1024, false, false, false);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 20, (float)num1023, (float)num1024, 0f, 0, 0, 0);
									}
								}
							}
						}
					}
					else if (this.aiStyle == 10)
					{
						int num1025 = (int)(this.position.X + (float)(this.width / 2)) / 16;
						int num1026 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
						int num1027 = 0;
						int num1028 = 2;
						ProjectileID.Sets.FallingBlockTileItemInfo data = ProjectileID.Sets.FallingBlockTileItem[this.type];
						if (data != null)
						{
							num1027 = data.TileType;
							num1028 = data.ItemType;
						}
						if (this.type == 31 && this.ai[0] == 2f)
						{
							num1028 = 0;
						}
						if (this.type == 109)
						{
							int num1029 = (int)Player.FindClosest(this.position, this.width, this.height);
							if ((double)(base.Center - Main.player[num1029].Center).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
							{
								num1027 = -1;
								num1028 = 593;
							}
						}
						Tile value14 = Main.tile[num1025, num1026];
						if (value14.nactive())
						{
							value14 = Main.tile[num1025, num1026];
							if (value14.halfBrick() && this.velocity.Y > 0f && Math.Abs(this.velocity.Y) > Math.Abs(this.velocity.X))
							{
								int num1032 = num1026;
								num1026 = num1032 - 1;
							}
						}
						value14 = Main.tile[num1025, num1026];
						if (!value14.active() && num1027 >= 0)
						{
							bool flag5 = false;
							bool flag6 = false;
							if (num1026 < Main.maxTilesY - 2)
							{
								Tile tile2 = Main.tile[num1025, num1026 + 1];
								if (tile2 != null && tile2.active())
								{
									if (tile2.active() && *tile2.type == 314)
									{
										flag6 = true;
									}
									if (tile2.active() && WorldGen.BlockBelowMakesSandFall(num1025, num1026))
									{
										flag6 = true;
									}
								}
							}
							if (!flag6)
							{
								flag5 = WorldGen.PlaceTile(num1025, num1026, num1027, false, true, -1, 0);
							}
							if (!flag6)
							{
								value14 = Main.tile[num1025, num1026];
								if (value14.active())
								{
									value14 = Main.tile[num1025, num1026];
									if ((int)(*value14.type) == num1027)
									{
										value14 = Main.tile[num1025, num1026 + 1];
										if (!value14.halfBrick())
										{
											value14 = Main.tile[num1025, num1026 + 1];
											if (value14.slope() == 0)
											{
												goto IL_26E4C;
											}
										}
										WorldGen.SlopeTile(num1025, num1026 + 1, 0, false);
										if (Main.netMode != 0)
										{
											NetMessage.SendData(17, -1, -1, null, 14, (float)num1025, (float)(num1026 + 1), 0f, 0, 0, 0);
										}
										IL_26E4C:
										if (Main.netMode != 0)
										{
											NetMessage.SendData(17, -1, -1, null, 1, (float)num1025, (float)num1026, (float)num1027, 0, 0, 0);
											goto IL_26F20;
										}
										goto IL_26F20;
									}
								}
							}
							if (!flag5 && num1028 > 0)
							{
								num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, num1028, 1, false, 0, false, false);
							}
						}
						else if (num1028 > 0)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, num1028, 1, false, 0, false, false);
						}
					}
					IL_26F20:
					if (this.type == 171)
					{
						if (this.ai[1] == 0f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 985, 1, false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 965, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
					}
					if (this.type == 475)
					{
						if (this.ai[1] == 0f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3005, 1, false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 2996, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
					}
					if (this.type == 505)
					{
						if (this.ai[1] == 0f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3079, 1, false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3077, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
					}
					if (this.type == 506)
					{
						if (this.ai[1] == 0f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3080, 1, false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
						else if (this.ai[1] < 10f)
						{
							num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3078, (int)(10f - this.ai[1]), false, 0, false, false);
							Main.item[num1021].noGrabDelay = 0;
						}
					}
					if (this.type == 12 && this.damage > 500 && !Main.remixWorld)
					{
						num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 75, 1, false, 0, false, false);
					}
					if (this.type == 155)
					{
						num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 859, 1, false, 0, false, false);
					}
					if (this.type == 861)
					{
						num1021 = Item.NewItem(this.GetItemSource_DropAsItem(), (int)this.position.X, (int)this.position.Y, this.width, this.height, 4743, 1, false, 0, false, false);
					}
					if (Main.netMode == 1 && num1021 >= 0)
					{
						NetMessage.SendData(21, -1, -1, null, num1021, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.type == 69 || this.type == 70 || this.type == 621)
				{
					int i2 = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int j2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					if (this.type == 69)
					{
						WorldGen.Convert(i2, j2, 2, 4, true, true);
					}
					if (this.type == 70)
					{
						WorldGen.Convert(i2, j2, 1, 4, true, true);
					}
					if (this.type == 621)
					{
						WorldGen.Convert(i2, j2, 4, 4, true, true);
					}
				}
				if (this.type == 378)
				{
					int num1030 = Main.rand.Next(2, 4);
					int num1032;
					if (Main.rand.Next(5) == 0)
					{
						num1032 = num1030;
						num1030 = num1032 + 1;
					}
					for (int num1031 = 0; num1031 < num1030; num1031 = num1032 + 1)
					{
						float x2 = this.velocity.X;
						float y8 = this.velocity.Y;
						x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Projectile.NewProjectile(this.GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, x2, y8, 379, this.damage, this.knockBack, this.owner, 0f, 0f, 0f);
						num1032 = num1031;
					}
				}
			}
			ProjectileLoader.OnKill(this, num);
			this.active = false;
		}

		// Token: 0x06000DC9 RID: 3529 RVA: 0x003AF7DC File Offset: 0x003AD9DC
		private void DropGeodeGems()
		{
			Projectile.DropGeodeLoot(this);
		}

		// Token: 0x06000DCA RID: 3530 RVA: 0x003AF7EF File Offset: 0x003AD9EF
		private void TryGettingHitByOtherPlayersExplosives()
		{
			if (this.owner != Main.myPlayer)
			{
				this.PrepareBombToBlow();
				this.Damage();
			}
		}

		// Token: 0x06000DCB RID: 3531 RVA: 0x003AF80C File Offset: 0x003ADA0C
		private void DoRainbowCrystalStaffExplosion()
		{
			Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
			float num = (float)Main.rand.Next(7, 13);
			Vector2 vector;
			vector..ctor(2.1f, 2f);
			Color newColor = Main.hslToRgb(this.ai[0], 1f, 0.5f, byte.MaxValue);
			newColor.A = byte.MaxValue;
			for (float num2 = 0f; num2 < num; num2 += 1f)
			{
				int num3 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
				Main.dust[num3].position = base.Center;
				Main.dust[num3].velocity = spinningpoint.RotatedBy((double)(6.2831855f * num2 / num), default(Vector2)) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].scale = 2f;
				Main.dust[num3].fadeIn = Main.rand.NextFloat() * 2f;
				if (num3 != 6000)
				{
					Dust dust = Dust.CloneDust(num3);
					dust.scale /= 2f;
					dust.fadeIn /= 2f;
					dust.color = new Color(255, 255, 255, 255);
				}
			}
			for (float num4 = 0f; num4 < num; num4 += 1f)
			{
				int num5 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
				Main.dust[num5].position = base.Center;
				Main.dust[num5].velocity = spinningpoint.RotatedBy((double)(6.2831855f * num4 / num), default(Vector2)) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num5].velocity *= Main.rand.NextFloat() * 0.8f;
				Main.dust[num5].noGravity = true;
				Main.dust[num5].scale = Main.rand.NextFloat() * 1f;
				Main.dust[num5].fadeIn = Main.rand.NextFloat() * 2f;
				if (num5 != 6000)
				{
					Dust dust2 = Dust.CloneDust(num5);
					dust2.scale /= 2f;
					dust2.fadeIn /= 2f;
					dust2.color = new Color(255, 255, 255, 255);
				}
			}
		}

		/// <summary>
		/// Determines if walls should be exploded by checking if there is an empty wall within the specified radius and bounds. Use in conjunction with <see cref="M:Terraria.Projectile.ExplodeTiles(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
		/// </summary>
		// Token: 0x06000DCC RID: 3532 RVA: 0x003AFB10 File Offset: 0x003ADD10
		public unsafe bool ShouldWallExplode(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			bool result = false;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num3 = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt((double)(num3 * num3 + num2 * num2)) < (double)radius && Main.tile[i, j] != null && *Main.tile[i, j].wall == 0)
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x06000DCD RID: 3533 RVA: 0x003AFBA4 File Offset: 0x003ADDA4
		public Color GetFloatingDaggerMinionGlowColor()
		{
			float num = (float)(this.whoAmI % 6) / 6f;
			return Main.hslToRgb(0.66f + 0.33f * num, 0.7f, 0.6f, byte.MaxValue) * 0.7f;
		}

		// Token: 0x06000DCE RID: 3534 RVA: 0x003AFBEC File Offset: 0x003ADDEC
		public unsafe bool CanExplodeTile(int x, int y)
		{
			if (Main.tileDungeon[(int)(*Main.tile[x, y].type)] || TileID.Sets.BasicChest[(int)(*Main.tile[x, y].type)])
			{
				return false;
			}
			if (!TileLoader.CanExplode(x, y))
			{
				return false;
			}
			ushort num = *Main.tile[x, y].type;
			if (num <= 111)
			{
				if (num <= 58)
				{
					if (num <= 37)
					{
						if (num == 26)
						{
							return false;
						}
						if (num != 37)
						{
							return true;
						}
					}
					else
					{
						if (num == 48)
						{
							goto IL_13D;
						}
						if (num != 58)
						{
							return true;
						}
					}
					if (!Main.hardMode)
					{
						return false;
					}
					return true;
				}
				else if (num <= 88)
				{
					if (num != 77)
					{
						if (num != 88)
						{
							return true;
						}
					}
					else
					{
						if (!Main.hardMode && y >= Main.UnderworldLayer)
						{
							return false;
						}
						return true;
					}
				}
				else if (num - 107 > 1 && num != 111)
				{
					return true;
				}
			}
			else if (num <= 226)
			{
				if (num <= 211)
				{
					if (num != 137)
					{
						if (num != 211)
						{
							return true;
						}
					}
					else
					{
						if (!NPC.downedGolemBoss && *Main.tile[x, y].frameY / 18 - 1 <= 3)
						{
							return false;
						}
						return true;
					}
				}
				else if (num - 221 > 2 && num != 226)
				{
					return true;
				}
			}
			else if (num <= 237)
			{
				if (num == 232)
				{
					goto IL_13D;
				}
				if (num != 237)
				{
					return true;
				}
			}
			else if (num != 470 && num != 475)
			{
				return true;
			}
			return false;
			IL_13D:
			if (Main.getGoodWorld)
			{
				return false;
			}
			return true;
		}

		/// <summary>
		/// Explodes tiles within a radius of the given position and within the bounds passed in. The <paramref name="wallSplode" /> parameter should be the result of <see cref="M:Terraria.Projectile.ShouldWallExplode(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> and dictates if walls will also be destroyed. This method honors the tile and wall explosion conditions.
		/// </summary>
		// Token: 0x06000DCF RID: 3535 RVA: 0x003AFD68 File Offset: 0x003ADF68
		public unsafe void ExplodeTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ, bool wallSplode)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num3 = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt((double)(num3 * num3 + num2 * num2)) < (double)radius)
					{
						bool flag = true;
						if (Main.tile[i, j] != null && Main.tile[i, j].active())
						{
							flag = this.CanExplodeTile(i, j);
							if (flag)
							{
								WorldGen.KillTile(i, j, false, false, false);
								if (!Main.tile[i, j].active() && Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
								}
							}
						}
						if (flag)
						{
							for (int k = i - 1; k <= i + 1; k++)
							{
								for (int l = j - 1; l <= j + 1; l++)
								{
									if (Main.tile[k, l] != null && *Main.tile[k, l].wall > 0 && wallSplode && WallLoader.CanExplode(k, l, (int)(*Main.tile[k, l].wall)))
									{
										WorldGen.KillWall(k, l, false);
										if (*Main.tile[k, l].wall == 0 && Main.netMode != 0)
										{
											NetMessage.SendData(17, -1, -1, null, 2, (float)k, (float)l, 0f, 0, 0, 0);
										}
									}
								}
							}
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		// Token: 0x06000DD0 RID: 3536 RVA: 0x003AFF38 File Offset: 0x003AE138
		public unsafe void ExplodeCrackedTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num3 = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt((double)(num3 * num3 + num2 * num2)) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].active() && TileID.Sets.CrackedBricks[(int)(*Main.tile[i, j].type)])
					{
						WorldGen.KillTile(i, j, false, false, false);
						if (!Main.tile[i, j].active() && Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 20, (float)i, (float)j, 0f, 0, 0, 0);
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		// Token: 0x06000DD1 RID: 3537 RVA: 0x003B003A File Offset: 0x003AE23A
		public bool TryGetContainerIndex(out int containerIndex)
		{
			containerIndex = -1;
			if (this.type == 525 || this.type == 960)
			{
				containerIndex = -2;
				return true;
			}
			if (this.type == 734)
			{
				containerIndex = -5;
				return true;
			}
			return false;
		}

		// Token: 0x06000DD2 RID: 3538 RVA: 0x003B0074 File Offset: 0x003AE274
		public bool IsInteractible()
		{
			int num = this.type;
			return num == 525 || num == 734 || num == 960;
		}

		// Token: 0x06000DD3 RID: 3539 RVA: 0x003B00A4 File Offset: 0x003AE2A4
		public Color GetAlpha(Color newColor)
		{
			Color? color3 = ProjectileLoader.GetAlpha(this, newColor);
			if (color3 != null)
			{
				return color3.GetValueOrDefault();
			}
			if (this.type == 920 || this.type == 921)
			{
				return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
			}
			if (this.type == 47 && Main.player[this.owner].wet)
			{
				return Color.White;
			}
			if (this.type == 937)
			{
				newColor.A = (byte)((float)newColor.A * 0.75f);
			}
			if (this.type == 880 || this.type == 929)
			{
				newColor.A /= 2;
			}
			if (this.type == 963)
			{
				float num = 0.85f;
				newColor *= num;
				newColor.A = (byte)((float)newColor.A * num);
				if (this.ai[0] >= 2f)
				{
					newColor.G = (byte)((float)newColor.G * 0.7f);
					newColor.B = (byte)((float)newColor.B * 0.7f);
				}
			}
			if (this.type == 1021)
			{
				return Color.White;
			}
			if (this.type == 1006)
			{
				return Color.White;
			}
			if (this.type == 981)
			{
				return Color.White;
			}
			if (this.type == 75)
			{
				return Color.Lerp(newColor, Color.White, 0.66f) * this.Opacity;
			}
			if (this.type == 969)
			{
				int num2 = 210;
				int b;
				int r;
				int g = r = (b = num2);
				if ((int)newColor.R < num2)
				{
					r = (int)newColor.R;
				}
				if ((int)newColor.G < num2)
				{
					g = (int)newColor.G;
				}
				if ((int)newColor.B < num2)
				{
					b = (int)newColor.B;
				}
				return new Color(r, g, b, 185) * this.Opacity;
			}
			if (this.type == 967)
			{
				return Color.White * this.Opacity;
			}
			if (this.type == 855)
			{
				newColor = Color.Lerp(newColor, new Color(255, 200, 60), 0.5f);
			}
			if (this.type == 933 || this.type == 1001)
			{
				newColor = Color.White * this.Opacity;
			}
			if (this.type == 270)
			{
				return new Color(255, 255, 255, (int)Utils.WrappedLerp(0f, 255f, (float)(this.timeLeft % 40) / 40f));
			}
			if (this.type == 837)
			{
				if (this.alpha > 0)
				{
					return Color.Transparent;
				}
				return new Color(255, 255, 255, 200);
			}
			else
			{
				if (this.type == 180 || this.type == 345)
				{
					return Color.Lerp(newColor, Color.White, 0.75f);
				}
				if (this.type == 586)
				{
					if (this.ai[2] == 1f)
					{
						Color value;
						value..ctor((int)(newColor.R / 2), 0, (int)newColor.G);
						float amount = (float)Math.Sin((double)(this.ai[0] % 120f * 6.2831855f / 120f)) * 0.5f + 0.5f;
						newColor = Color.Lerp(newColor, value, amount);
						return Color.Lerp(newColor, Color.Lerp(Color.White, value, amount), 0.75f);
					}
					return Color.Lerp(newColor, Color.White, 0.75f);
				}
				else
				{
					if (this.type == 764 || this.type == 856 || this.type == 857 || this.type == 864)
					{
						return Color.White;
					}
					if (this.type == 873 || this.type == 872 || this.type == 931 || this.type == 913 || this.type == 34)
					{
						return Color.White * this.Opacity;
					}
					if (this.type == 756 || this.type == 961)
					{
						return Color.Lerp(newColor, Color.Black, 0.25f);
					}
					if (this.type == 895)
					{
						return Color.White * this.Opacity;
					}
					if (this.type == 893 || this.type == 907)
					{
						return new Color(255, 255, 255, 150);
					}
					if (this.type == 833 || this.type == 834 || this.type == 835 || this.type == 912)
					{
						return Color.Lerp(newColor, Color.White, 0.25f);
					}
					if (this.type == 351 || this.type == 350)
					{
						Point point = base.Center.ToTileCoordinates();
						if (WorldGen.InWorld(point.X, point.Y, 0) && !WorldGen.SolidTile(point.X, point.Y, false))
						{
							return Color.Lerp(newColor, Color.White, 0.15f);
						}
						return Color.Lerp(newColor, Color.White, 0.05f);
					}
					else
					{
						if (this.type == 346 || this.type == 347 || this.type == 325 || this.type == 755)
						{
							return Color.Lerp(newColor, Color.White, 0.75f);
						}
						int b;
						int r;
						int g;
						if (this.type == 650)
						{
							r = (int)((double)newColor.R * 1.5);
							g = (int)((double)newColor.G * 1.5);
							b = (int)((double)newColor.B * 1.5);
							if (r > 255)
							{
							}
							if (g > 255)
							{
							}
							if (b > 255)
							{
							}
						}
						else
						{
							if (this.type == 948)
							{
								return Color.White;
							}
							if (this.type == 604 || this.type == 631)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
							}
							if (this.type == 342)
							{
								return Color.Lerp(newColor, Color.White, 0.75f) * this.Opacity;
							}
							if (this.type == 636)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 64 - this.alpha / 4);
							}
							if (this.type == 673 || this.type == 706)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 180 - this.alpha / 2 - this.alpha / 4);
							}
							if (this.type == 603 || this.type == 633)
							{
								return new Color(255, 255, 255, 200);
							}
							if (this.type == 623 || (this.type >= 625 && this.type <= 628) || this.type == 710)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
							}
							if (this.type == 645 || this.type == 643)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 127 - this.alpha / 2);
							}
							if (this.type == 611)
							{
								return new Color(255, 255, 255, 200);
							}
							if (this.type == 640 || this.type == 644 || this.type == 658)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
							}
							if (this.type == 612 || this.type == 953)
							{
								return new Color(255, 255, 255, 127);
							}
							if (this.type == 978)
							{
								return new Color(255, 255, 255, 127) * this.Opacity;
							}
							if (this.aiStyle == 105)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
							}
							if (this.type == 554)
							{
								return new Color(200, 200, 200, 200);
							}
							if (this.type == 601)
							{
								return PortalHelper.GetPortalColor(this.owner, (int)this.ai[0]);
							}
							if (this.type == 602)
							{
								Color portalColor = PortalHelper.GetPortalColor(this.owner, (int)this.ai[1]);
								portalColor.A = 227;
								return portalColor;
							}
							if (this.type == 585)
							{
								byte a = newColor.A;
								newColor = Color.Lerp(newColor, Color.White, 0.5f);
								newColor.A = a;
								return newColor;
							}
							if (this.type == 714)
							{
								byte a2 = newColor.A;
								newColor = Color.Lerp(newColor, Color.White, 0.8f);
								newColor.A = a2;
								newColor *= (float)a2 / 255f;
								return newColor;
							}
							if (this.type == 573 || this.type == 578 || this.type == 579 || this.type == 617 || this.type == 641 || this.type == 707 || this.type == 813)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
							}
							if (this.type == 490)
							{
								return Color.White;
							}
							if (this.type == 575 || this.type == 596 || this.type == 659)
							{
								if (this.timeLeft < 30)
								{
									float num3 = (float)this.timeLeft / 30f;
									this.alpha = (int)(255f - 255f * num3);
								}
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 128 - this.alpha / 2);
							}
							if (this.type == 546)
							{
								return new Color(255, 200, 255, 200);
							}
							if (this.type == 553)
							{
								return new Color(255, 255, 200, 200);
							}
							if (this.type == 540)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
							}
							if (this.type == 498)
							{
								return new Color(255, 100, 20, 200);
							}
							if (this.type == 538)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
							}
							if (this.type == 518)
							{
								float num4 = 1f - (float)this.alpha / 255f;
								return new Color((int)(200f * num4), (int)(200f * num4), (int)(200f * num4), (int)(100f * num4));
							}
							if (this.type == 518 || this.type == 595 || this.type == 735)
							{
								Color color = Color.Lerp(newColor, Color.White, 0.85f);
								color.A = 128;
								return color * (1f - (float)this.alpha / 255f);
							}
							if (this.type == 536 || this.type == 607)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 63 - this.alpha / 4);
							}
							if (this.type == 591)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 63 - this.alpha / 4);
							}
							if (this.type == 493 || this.type == 494)
							{
								return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
							}
							if (this.type == 492)
							{
								return new Color(255, 255, 255, 255);
							}
							if (this.type == 491)
							{
								return new Color(255, 255, 255, 255);
							}
							if (this.type == 485 || this.type == 502)
							{
								return new Color(255, 255, 255, 200);
							}
							if (this.type == 488)
							{
								return new Color(255, 255, 255, 255);
							}
							if (this.type == 477 || this.type == 478 || this.type == 479)
							{
								if (this.alpha == 0)
								{
									return new Color(255, 255, 255, 200);
								}
								return new Color(0, 0, 0, 0);
							}
							else
							{
								if (this.type == 473)
								{
									return new Color(255, 255, 255, 255);
								}
								if (this.type == 50 || this.type == 53 || this.type == 515 || this.type == 870)
								{
									return new Color(255, 255, 255, 0);
								}
								if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726 || this.type == 728 || this.type == 9)
								{
									return new Color(255, 255, 255, 0) * this.Opacity;
								}
								if (this.type == 92)
								{
									return new Color(255, 255, 255, 0);
								}
								if (this.type == 91)
								{
									return new Color(200, 200, 200, 0);
								}
								if (this.type == 34 || this.type == 15 || this.type == 93 || this.type == 94 || this.type == 95 || this.type == 96 || this.type == 253 || this.type == 258 || (this.type == 102 && this.alpha < 255))
								{
									return new Color(200, 200, 200, 25);
								}
								if (this.type == 465)
								{
									return new Color(255, 255, 255, 0) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 503)
								{
									Color color4 = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)this.alpha / 255f);
									Color value2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
									float amount2 = 0.25f + (float)Math.Cos((double)this.localAI[0]) * 0.25f;
									return Color.Lerp(color4, value2, amount2);
								}
								if (this.type == 467)
								{
									return new Color(255, 255, 255, 255) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 694 || this.type == 695 || this.type == 696)
								{
									return new Color(255, 255, 255, 127) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 634 || this.type == 635)
								{
									return new Color(255, 255, 255, 127) * this.Opacity;
								}
								if (this.type == 671)
								{
									return new Color(255, 255, 255, 255) * this.Opacity;
								}
								if (this.type == 664 || this.type == 666 || this.type == 668)
								{
									newColor = Color.Lerp(newColor, Color.White, 0.5f);
									return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 200) * this.Opacity;
								}
								if (this.type == 451)
								{
									return new Color(255, 255, 255, 200) * ((255f - (float)this.alpha) / 255f);
								}
								if (this.type == 684)
								{
									return new Color(255, 255, 255, 200) * ((255f - (float)this.alpha) / 255f);
								}
								if (this.type == 454 || this.type == 452)
								{
									return new Color(255, 255, 255, 255) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 464)
								{
									return new Color(255, 255, 255, 255) * ((255f - (float)this.alpha) / 255f);
								}
								if (this.type == 450)
								{
									return new Color(200, 200, 200, 255 - this.alpha);
								}
								if (this.type == 459 || this.type == 709)
								{
									return new Color(255, 255, 255, 200);
								}
								if (this.type == 447)
								{
									return new Color(255, 255, 255, 200);
								}
								if (this.type == 446)
								{
									return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 691 || this.type == 692 || this.type == 693)
								{
									return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)this.alpha / 255f);
								}
								if (this.type >= 646 && this.type <= 649)
								{
									return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 445)
								{
									return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
								}
								if (this.type == 440 || this.type == 449 || this.type == 606)
								{
									r = 255 - this.alpha;
									g = 255 - this.alpha;
									b = 255 - this.alpha;
								}
								else
								{
									if (this.type == 444)
									{
										return newColor * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 443 || this.type == 675 || this.type == 686 || this.type == 711)
									{
										return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 676)
									{
										return newColor * this.Opacity;
									}
									if (this.type == 438)
									{
										return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 592)
									{
										return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 437 || this.type == 700)
									{
										return new Color(255, 255, 255, 0) * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 964 || this.type == 965)
									{
										return new Color(255, 255, 255, 255) * this.Opacity;
									}
									if (this.type == 462)
									{
										return new Color(255, 255, 255, 128) * (1f - (float)this.alpha / 255f);
									}
									if (this.type == 352)
									{
										Color color2 = Color.Lerp(newColor, Color.White, 0.5f);
										color2.A = (byte)((float)color2.A * ((float)this.alpha / 255f));
										return new Color((int)color2.R, (int)color2.G, (int)color2.B, (int)color2.A);
									}
									if (this.type == 435 || this.type == 732 || this.type == 731)
									{
										newColor = Color.Lerp(newColor, Color.White, 0.8f);
										return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
									}
									if (this.type == 682)
									{
										newColor = Color.Lerp(newColor, Color.White, 0.8f);
										return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 127);
									}
									if (this.type == 436)
									{
										newColor = Color.Lerp(newColor, Color.White, 0.8f);
										return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
									}
									if (this.type == 409)
									{
										return new Color(250, 250, 250, 200);
									}
									if (this.type == 348 || this.type == 349)
									{
										return new Color(200, 200, 200, this.alpha);
									}
									if (this.type == 337)
									{
										return new Color(250, 250, 250, 150);
									}
									if (this.type >= 424 && this.type <= 426)
									{
										byte b2 = 150;
										if (newColor.R < b2)
										{
											newColor.R = b2;
										}
										if (newColor.G < b2)
										{
											newColor.G = b2;
										}
										if (newColor.B < b2)
										{
											newColor.B = b2;
										}
										return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 255);
									}
									if (this.type == 431 || this.type == 432)
									{
										return new Color(250, 250, 250, 255 - this.alpha);
									}
									if (this.type == 343 || this.type == 344)
									{
										float num5 = 1f - (float)this.alpha / 255f;
										return new Color((int)(250f * num5), (int)(250f * num5), (int)(250f * num5), (int)(100f * num5));
									}
									if (this.type == 332)
									{
										return new Color(255, 255, 255, 255);
									}
									if (this.type == 329)
									{
										return new Color(200, 200, 200, 50);
									}
									if (this.type >= 326 && this.type <= 328)
									{
										return Color.Transparent;
									}
									if (this.type >= 400 && this.type <= 402)
									{
										return Color.Transparent;
									}
									if (this.type == 324 && this.frame >= 6 && this.frame <= 9)
									{
										return new Color(255, 255, 255, 255);
									}
									if (this.type == 16)
									{
										return new Color(255, 255, 255, 0);
									}
									if (this.type == 321)
									{
										return new Color(200, 200, 200, 0);
									}
									if (this.type == 76 || this.type == 77 || this.type == 78)
									{
										return new Color(255, 255, 255, 0);
									}
									if (this.type == 308)
									{
										return new Color(200, 200, 255, 125);
									}
									if (this.type == 263)
									{
										if (this.timeLeft < 255)
										{
											return new Color(255, 255, 255, (int)((byte)this.timeLeft));
										}
										return new Color(255, 255, 255, 255);
									}
									else if (this.type == 274)
									{
										if (this.timeLeft < 85)
										{
											byte b3 = (byte)(this.timeLeft * 3);
											byte a3 = (byte)(100f * ((float)b3 / 255f));
											return new Color((int)b3, (int)b3, (int)b3, (int)a3);
										}
										return new Color(255, 255, 255, 100);
									}
									else
									{
										if (this.type == 5)
										{
											return new Color(255, 255, 255, 0);
										}
										if (this.type == 300)
										{
											return new Color(250, 250, 250, 50);
										}
										if (this.type == 301)
										{
											if (this.ai[0] == 1f)
											{
												return newColor;
											}
											return new Color(250, 250, 250, 50);
										}
										else
										{
											if (this.type == 712)
											{
												return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
											}
											if (this.type == 304)
											{
												return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, (int)((byte)((float)(255 - this.alpha) / 3f)));
											}
											if (this.type == 116 || this.type == 132 || this.type == 156 || this.type == 157 || this.type == 157 || this.type == 173)
											{
												if (this.localAI[1] >= 15f)
												{
													return new Color(255, 255, 255, this.alpha);
												}
												if (this.localAI[1] < 5f)
												{
													return Color.Transparent;
												}
												int num11 = (int)((this.localAI[1] - 5f) / 10f * 255f);
												return new Color(num11, num11, num11, num11);
											}
											else
											{
												if (this.type == 254)
												{
													if (this.timeLeft < 30)
													{
														float num6 = (float)this.timeLeft / 30f;
														this.alpha = (int)(255f - 255f * num6);
													}
													return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
												}
												if (this.type == 265 || this.type == 355)
												{
													if (this.alpha > 0)
													{
														return Color.Transparent;
													}
													return new Color(255, 255, 255, 0);
												}
												else if (this.type == 257)
												{
													if (this.alpha > 200)
													{
														return Color.Transparent;
													}
													return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
												}
												else if (this.type == 259)
												{
													if (this.alpha > 200)
													{
														return Color.Transparent;
													}
													return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
												}
												else
												{
													if (this.type >= 150 && this.type <= 152)
													{
														return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
													}
													if (this.type == 250)
													{
														return Color.Transparent;
													}
													if (this.type == 251)
													{
														r = 255 - this.alpha;
														g = 255 - this.alpha;
														b = 255 - this.alpha;
														return new Color(r, g, b, 0);
													}
													if (this.type == 131)
													{
														return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
													}
													if (this.type == 211)
													{
														return new Color(255, 255, 255, 0);
													}
													if (this.type == 229)
													{
														return new Color(255, 255, 255, 50);
													}
													if (this.type == 221 || this.type == 729 || this.type == 977)
													{
														return new Color(255, 255, 255, 200);
													}
													if (this.type == 20)
													{
														if (this.alpha <= 150)
														{
															return new Color(255, 255, 255, 0);
														}
														return new Color(0, 0, 0, 0);
													}
													else if (this.type == 207)
													{
														r = 255 - this.alpha;
														g = 255 - this.alpha;
														b = 255 - this.alpha;
													}
													else if (this.type == 242)
													{
														if (this.alpha < 140)
														{
															return new Color(255, 255, 255, 100);
														}
														return Color.Transparent;
													}
													else
													{
														if (this.type == 638)
														{
															return new Color(255, 255, 255, 100) * this.Opacity;
														}
														if (this.type == 660)
														{
															return new Color(150, 255, 255, 0) * this.Opacity;
														}
														if (this.type == 209)
														{
															r = (int)newColor.R - this.alpha;
															g = (int)newColor.G - this.alpha;
															b = (int)newColor.B - this.alpha / 2;
														}
														else
														{
															if (this.type == 130)
															{
																return new Color(255, 255, 255, 175);
															}
															if (this.type == 182)
															{
																return new Color(255, 255, 255, 200);
															}
															if (this.type == 226)
															{
																r = 255;
																g = 255;
																b = 255;
																float num7 = (float)Main.mouseTextColor / 200f - 0.3f;
																r = (int)((float)r * num7);
																g = (int)((float)g * num7);
																b = (int)((float)b * num7);
																r += 50;
																if (r > 255)
																{
																	r = 255;
																}
																g += 50;
																if (g > 255)
																{
																	g = 255;
																}
																b += 50;
																if (b > 255)
																{
																	b = 255;
																}
																return new Color(r, g, b, 200);
															}
															if (this.type == 227)
															{
																g = (r = (b = 255));
																float num8 = (float)Main.mouseTextColor / 100f - 1.6f;
																r = (int)((float)r * num8);
																g = (int)((float)g * num8);
																b = (int)((float)b * num8);
																int a4 = (int)(100f * num8);
																r += 50;
																if (r > 255)
																{
																	r = 255;
																}
																g += 50;
																if (g > 255)
																{
																	g = 255;
																}
																b += 50;
																if (b > 255)
																{
																	b = 255;
																}
																return new Color(r, g, b, a4);
															}
															if (this.type == 114 || this.type == 115)
															{
																if (this.localAI[1] >= 15f)
																{
																	return new Color(255, 255, 255, this.alpha);
																}
																if (this.localAI[1] < 5f)
																{
																	return Color.Transparent;
																}
																int num12 = (int)((this.localAI[1] - 5f) / 10f * 255f);
																return new Color(num12, num12, num12, num12);
															}
															else if (this.type == 83 || this.type == 88 || this.type == 89 || this.type == 90 || this.type == 100 || this.type == 104 || this.type == 279 || (this.type >= 283 && this.type <= 287) || this.type == 876)
															{
																if (this.alpha < 200)
																{
																	return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 0);
																}
																return Color.Transparent;
															}
															else
															{
																if (this.type == 34 || this.type == 35 || this.type == 15 || this.type == 19 || this.type == 44 || this.type == 45)
																{
																	return Color.White;
																}
																if (this.type == 79)
																{
																	r = Main.DiscoR;
																	g = Main.DiscoG;
																	b = Main.DiscoB;
																	return default(Color);
																}
																if (this.type == 9 || this.type == 15 || this.type == 34 || this.type == 50 || this.type == 53 || this.type == 76 || this.type == 77 || this.type == 78 || this.type == 92 || this.type == 91)
																{
																	r = (int)newColor.R - this.alpha / 3;
																	g = (int)newColor.G - this.alpha / 3;
																	b = (int)newColor.B - this.alpha / 3;
																}
																else
																{
																	if (this.type == 18)
																	{
																		return new Color(255, 255, 255, 50);
																	}
																	if (this.type == 16 || this.type == 44 || this.type == 45)
																	{
																		r = (int)newColor.R;
																		g = (int)newColor.G;
																		b = (int)newColor.B;
																	}
																	else if (this.type == 12 || this.type == 72 || this.type == 86 || this.type == 87 || this.type == 955)
																	{
																		return new Color(255, 255, 255, (int)newColor.A - this.alpha);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						float num9 = (float)(255 - this.alpha) / 255f;
						r = (int)((float)newColor.R * num9);
						g = (int)((float)newColor.G * num9);
						b = (int)((float)newColor.B * num9);
						int num10 = (int)newColor.A - this.alpha;
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num10 > 255)
						{
							num10 = 255;
						}
						return new Color(r, g, b, num10);
					}
				}
			}
		}

		// Token: 0x06000DD4 RID: 3540 RVA: 0x003B2724 File Offset: 0x003B0924
		public override string ToString()
		{
			return string.Concat(new string[]
			{
				"type:",
				this.type.ToString(),
				", name:",
				this.Name,
				", active:",
				this.active.ToString(),
				", whoAmI:",
				this.whoAmI.ToString(),
				", identity:",
				this.identity.ToString(),
				", ai0:",
				this.ai[0].ToString(),
				", uuid:",
				this.projUUID.ToString()
			});
		}

		/// <summary>
		/// The ModProjectile instance that controls the behavior of this projectile. This property is null if this is not a modded projectile.
		/// </summary>
		// Token: 0x170001B0 RID: 432
		// (get) Token: 0x06000DD5 RID: 3541 RVA: 0x003B27DD File Offset: 0x003B09DD
		// (set) Token: 0x06000DD6 RID: 3542 RVA: 0x003B27E5 File Offset: 0x003B09E5
		public ModProjectile ModProjectile { get; internal set; }

		// Token: 0x170001B1 RID: 433
		// (get) Token: 0x06000DD7 RID: 3543 RVA: 0x003B27EE File Offset: 0x003B09EE
		int IEntityWithGlobals<GlobalProjectile>.Type
		{
			get
			{
				return this.type;
			}
		}

		// Token: 0x170001B2 RID: 434
		// (get) Token: 0x06000DD8 RID: 3544 RVA: 0x003B27F6 File Offset: 0x003B09F6
		public RefReadOnlyArray<GlobalProjectile> EntityGlobals
		{
			get
			{
				return this._globals;
			}
		}

		// Token: 0x170001B3 RID: 435
		// (get) Token: 0x06000DD9 RID: 3545 RVA: 0x003B2803 File Offset: 0x003B0A03
		public EntityGlobalsEnumerator<GlobalProjectile> Globals
		{
			get
			{
				return new EntityGlobalsEnumerator<GlobalProjectile>(this);
			}
		}

		/// <summary> Gets the instance of the specified GlobalProjectile type. This will throw exceptions on failure. </summary>
		/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
		/// <exception cref="T:System.IndexOutOfRangeException" />
		// Token: 0x06000DDA RID: 3546 RVA: 0x003B280B File Offset: 0x003B0A0B
		public T GetGlobalProjectile<T>() where T : GlobalProjectile
		{
			return GlobalType<GlobalProjectile>.GetGlobal<T>(this.type, this.EntityGlobals);
		}

		/// <summary> Gets the local instance of the type of the specified GlobalProjectile instance. This will throw exceptions on failure. </summary>
		/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
		/// <exception cref="T:System.NullReferenceException" />
		// Token: 0x06000DDB RID: 3547 RVA: 0x003B2823 File Offset: 0x003B0A23
		public T GetGlobalProjectile<T>(T baseInstance) where T : GlobalProjectile
		{
			return GlobalType<GlobalProjectile>.GetGlobal<T>(this.type, this.EntityGlobals, baseInstance);
		}

		/// <summary> Gets the instance of the specified GlobalProjectile type. </summary>
		// Token: 0x06000DDC RID: 3548 RVA: 0x003B283C File Offset: 0x003B0A3C
		public bool TryGetGlobalProjectile<T>(out T result) where T : GlobalProjectile
		{
			return GlobalType<GlobalProjectile>.TryGetGlobal<T>(this.type, this.EntityGlobals, out result);
		}

		/// <summary> Safely attempts to get the local instance of the type of the specified GlobalProjectile instance. </summary>
		/// <returns> Whether or not the requested instance has been found. </returns>
		// Token: 0x06000DDD RID: 3549 RVA: 0x003B2855 File Offset: 0x003B0A55
		public bool TryGetGlobalProjectile<T>(T baseInstance, out T result) where T : GlobalProjectile
		{
			return GlobalType<GlobalProjectile>.TryGetGlobal<T>(this.type, this.EntityGlobals, baseInstance, out result);
		}

		/// <summary>
		/// <inheritdoc cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />
		/// <br /><br />This particular overload uses a Vector2 instead of X and Y to determine the actual spawn position and a Vector2 to dictate the initial velocity. The return value is the actual Projectile instance rather than the index of the spawned Projectile within the <see cref="F:Terraria.Main.projectile" /> array.
		/// <br /> A short-hand for <code> Main.projectile[Projectile.NewProjectile(...)] </code>
		/// </summary>
		// Token: 0x06000DDE RID: 3550 RVA: 0x003B2870 File Offset: 0x003B0A70
		public static Projectile NewProjectileDirect(IEntitySource spawnSource, Vector2 position, Vector2 velocity, int type, int damage, float knockback, int owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
		{
			return Main.projectile[Projectile.NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, type, damage, knockback, owner, ai0, ai1, ai2)];
		}

		/// <summary>
		/// The damage type assigned to this projectile, represented as a DamageClass.
		/// Leave blank or use DamageClass.Default to prevent damage type scaling of any kind for this projectile.
		/// Use DamageClass.Generic/Melee/Ranged/Magic/Summon/Throwing for vanilla damage types.
		/// Refer to ExampleMod for more information on how to create and use your own damage types.
		/// </summary>
		// Token: 0x170001B4 RID: 436
		// (get) Token: 0x06000DDF RID: 3551 RVA: 0x003B28AE File Offset: 0x003B0AAE
		// (set) Token: 0x06000DE0 RID: 3552 RVA: 0x003B28B6 File Offset: 0x003B0AB6
		public DamageClass DamageType
		{
			get
			{
				return this._damageClass;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentException("Projectile.DamageType cannot be null.");
				}
				this._damageClass = value;
			}
		}

		/// <summary>
		/// The number of defense points that this projectile can ignore on its own. Cannot be set to negative values. Defaults to 0.
		/// On spawn, if this projectile was fired from a weapon, this value has the total armor penetration of the weapon that made the projectile added to itself.
		/// </summary>
		// Token: 0x170001B5 RID: 437
		// (get) Token: 0x06000DE1 RID: 3553 RVA: 0x003B28CE File Offset: 0x003B0ACE
		// (set) Token: 0x06000DE2 RID: 3554 RVA: 0x003B28D6 File Offset: 0x003B0AD6
		public int ArmorPenetration
		{
			get
			{
				return this._armorPenetration;
			}
			set
			{
				this._armorPenetration = Math.Max(0, value);
			}
		}

		/// <summary>
		/// The critical strike chance modifier of this projectile. Cannot be set to negative values. Defaults to 0.
		/// On spawn, if this projectile was fired from a weapon, this value has the total critical strike chance of the weapon that made the projectile added to itself.
		/// </summary>
		// Token: 0x170001B6 RID: 438
		// (get) Token: 0x06000DE3 RID: 3555 RVA: 0x003B28E5 File Offset: 0x003B0AE5
		// (set) Token: 0x06000DE4 RID: 3556 RVA: 0x003B28ED File Offset: 0x003B0AED
		public int CritChance
		{
			get
			{
				return this._crit;
			}
			set
			{
				this._crit = Math.Max(0, value);
			}
		}

		/// <summary>
		/// The crit chance of this projectile, without any player bonuses, similar to <see cref="F:Terraria.Projectile.originalDamage" /><br />
		/// Used by <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" /> to recalculate <see cref="P:Terraria.Projectile.CritChance" /> in combination with <see cref="M:Terraria.Player.GetTotalCritChance(Terraria.ModLoader.DamageClass)" />
		/// </summary>
		// Token: 0x170001B7 RID: 439
		// (get) Token: 0x06000DE5 RID: 3557 RVA: 0x003B28FC File Offset: 0x003B0AFC
		// (set) Token: 0x06000DE6 RID: 3558 RVA: 0x003B2904 File Offset: 0x003B0B04
		public int OriginalCritChance { get; set; }

		/// <summary>
		/// The armor penetration of this projectile, without any player bonuses, similar to <see cref="F:Terraria.Projectile.originalDamage" /><br />
		/// Used by <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" /> to recalculate <see cref="P:Terraria.Projectile.ArmorPenetration" /> in combination with <see cref="M:Terraria.Player.GetTotalArmorPenetration(Terraria.ModLoader.DamageClass)" />
		/// </summary>
		// Token: 0x170001B8 RID: 440
		// (get) Token: 0x06000DE7 RID: 3559 RVA: 0x003B290D File Offset: 0x003B0B0D
		// (set) Token: 0x06000DE8 RID: 3560 RVA: 0x003B2915 File Offset: 0x003B0B15
		public int OriginalArmorPenetration { get; set; }

		/// <summary>
		/// If set <see cref="F:Terraria.Projectile.damage" /> will be recalculated based on <see cref="F:Terraria.Projectile.originalDamage" />, <see cref="P:Terraria.Projectile.DamageType" /> and the <see cref="F:Terraria.Projectile.owner" /> player, just like minions and sentries. <br />
		/// Similarly for <see cref="P:Terraria.Projectile.CritChance" /> and <see cref="P:Terraria.Projectile.ArmorPenetration" />.
		///
		/// No need to set this if <see cref="F:Terraria.Projectile.minion" /> or <see cref="F:Terraria.Projectile.sentry" /> is set.
		/// </summary>
		// Token: 0x170001B9 RID: 441
		// (get) Token: 0x06000DE9 RID: 3561 RVA: 0x003B291E File Offset: 0x003B0B1E
		// (set) Token: 0x06000DEA RID: 3562 RVA: 0x003B2926 File Offset: 0x003B0B26
		public bool ContinuouslyUpdateDamageStats { get; set; }

		// Token: 0x170001BA RID: 442
		// (get) Token: 0x06000DEB RID: 3563 RVA: 0x003B292F File Offset: 0x003B0B2F
		// (set) Token: 0x06000DEC RID: 3564 RVA: 0x003B2937 File Offset: 0x003B0B37
		[Obsolete("Use ContinuouslyUpdateDamageStats", true)]
		public bool ContinuouslyUpdateDamage
		{
			get
			{
				return this.ContinuouslyUpdateDamageStats;
			}
			set
			{
				this.ContinuouslyUpdateDamageStats = value;
			}
		}

		/// <summary>
		/// Transfers stat modifiers from the spawn source to the projectile. <br />
		/// Adds <see cref="P:Terraria.Projectile.CritChance" /> and <see cref="P:Terraria.Projectile.ArmorPenetration" /> bonuses from players (<see cref="T:Terraria.DataStructures.EntitySource_Parent" />), weapons (<see cref="T:Terraria.DataStructures.EntitySource_ItemUse" />)<br />
		/// If the source is a <see cref="T:Terraria.DataStructures.EntitySource_Parent" /> projectile, <c>CritChance</c> and <c>ArmorPenetration</c> from the parent will be added, in order to transfer the original item/player bonus values.<br /><br />
		/// <br />
		/// To support minions, sentries and <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" />, <see cref="P:Terraria.Projectile.OriginalCritChance" /> and <see cref="P:Terraria.Projectile.OriginalArmorPenetration" /> are also copied from item sources and parent projectiles.
		/// </summary>
		/// <param name="spawnSource"></param>
		// Token: 0x06000DED RID: 3565 RVA: 0x003B2940 File Offset: 0x003B0B40
		public void ApplyStatsFromSource(IEntitySource spawnSource)
		{
			this.originalDamage = this.damage;
			this.OriginalCritChance = this.CritChance;
			this.OriginalArmorPenetration = this.ArmorPenetration;
			EntitySource_Parent entitySource_Parent = spawnSource as EntitySource_Parent;
			if (entitySource_Parent != null)
			{
				Player player = entitySource_Parent.Entity as Player;
				if (player != null)
				{
					IEntitySource_WithStatsFromItem entitySource_WithStatsFromItem = spawnSource as IEntitySource_WithStatsFromItem;
					if (entitySource_WithStatsFromItem != null)
					{
						Item item = entitySource_WithStatsFromItem.Item;
						if (item != null)
						{
							this.CritChance += player.GetWeaponCrit(item);
							this.ArmorPenetration += player.GetWeaponArmorPenetration(item);
							if (item.damage >= 0)
							{
								this.originalDamage = item.damage;
							}
							this.OriginalCritChance += item.crit;
							this.OriginalArmorPenetration += item.ArmorPenetration;
							return;
						}
					}
					this.CritChance += (int)(player.GetTotalCritChance(this.DamageType) + 5E-06f);
					this.ArmorPenetration += (int)(player.GetTotalArmorPenetration(this.DamageType) + 5E-06f);
					return;
				}
			}
			entitySource_Parent = (spawnSource as EntitySource_Parent);
			if (entitySource_Parent != null)
			{
				Projectile parentProjectile = entitySource_Parent.Entity as Projectile;
				if (parentProjectile != null)
				{
					this.CritChance += parentProjectile.CritChance;
					this.ArmorPenetration += parentProjectile.ArmorPenetration;
					this.OriginalCritChance += parentProjectile.OriginalCritChance;
					this.OriginalArmorPenetration += parentProjectile.OriginalArmorPenetration;
				}
			}
		}

		/// <summary>
		/// Attempts to get the owner player of this projectile. Returns null for projectiles spawned by TownNPC (<see cref="F:Terraria.Projectile.npcProj" />) and trap projectiles (<see cref="F:Terraria.Projectile.trap" />). Returns <c>Main.player[owner]</c> otherwise.
		/// <para /> Note that this logic assumes that projectiles have the correct fields set, which might not always be true. Also note that in single player enemy projectiles are also "owned" by the player, so this alone isn't sufficient to know which projectiles were spawned by the player. Additional <see cref="F:Terraria.Projectile.friendly" /> checks would be needed for that.
		/// </summary>
		/// <param name="player"></param>
		/// <returns></returns>
		// Token: 0x06000DEE RID: 3566 RVA: 0x003B2AB4 File Offset: 0x003B0CB4
		[NullableContext(2)]
		public bool TryGetOwner([NotNullWhen(true)] out Player player)
		{
			player = null;
			if (this.npcProj || this.trap)
			{
				return false;
			}
			player = Main.player[this.owner];
			return player.active;
		}

		/// <summary>
		/// Will drop loot the same way as when <see cref="F:Terraria.ID.ProjectileID.Geode" /> is cracked open.
		/// </summary>
		/// <param name="entity">The entity the loot originates from</param>
		// Token: 0x06000DEF RID: 3567 RVA: 0x003B2AE0 File Offset: 0x003B0CE0
		public static void DropGeodeLoot(Entity entity)
		{
			Dictionary<int, ValueTuple<int, int>> dict = ItemID.Sets.GeodeDrops;
			List<int> list = dict.Keys.ToList<int>();
			int attempts = 0;
			while (attempts < 2 && list.Count > 0)
			{
				attempts++;
				int item = Main.rand.Next(list);
				list.Remove(item);
				int stack = Main.rand.Next(dict[item].Item1, dict[item].Item2);
				int num = Item.NewItem(new EntitySource_Loot(entity, null), entity.position, entity.Size, item, stack, false, 0, false, false);
				Main.item[num].noGrabDelay = 0;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		/// <inheritdoc cref="M:Terraria.Projectile.CountsAsClass(Terraria.ModLoader.DamageClass)" />
		// Token: 0x06000DF0 RID: 3568 RVA: 0x003B2BA7 File Offset: 0x003B0DA7
		public bool CountsAsClass<T>() where T : DamageClass
		{
			return this.CountsAsClass(ModContent.GetInstance<T>());
		}

		/// <summary>
		/// This is used to check if the projectile is considered to be a member of a specified <see cref="T:Terraria.ModLoader.DamageClass" />.
		/// </summary>
		/// <param name="damageClass">The DamageClass to compare with the one assigned to this projectile.</param>
		/// <returns><see langword="true" /> if this projectile's <see cref="T:Terraria.ModLoader.DamageClass" /> matches <paramref name="damageClass" />, <see langword="false" /> otherwise</returns>
		/// <seealso cref="M:Terraria.Projectile.CountsAsClass``1" />
		// Token: 0x06000DF1 RID: 3569 RVA: 0x003B2BB9 File Offset: 0x003B0DB9
		public bool CountsAsClass(DamageClass damageClass)
		{
			return DamageClassLoader.effectInheritanceCache[this.DamageType.Type, damageClass.Type];
		}

		/// <summary>
		/// Checks if the projectile is a minion, sentry, minion shot, or sentry shot. <br />
		/// </summary>
		// Token: 0x170001BB RID: 443
		// (get) Token: 0x06000DF2 RID: 3570 RVA: 0x003B2BD6 File Offset: 0x003B0DD6
		public bool IsMinionOrSentryRelated
		{
			get
			{
				return this.minion || ProjectileID.Sets.MinionShot[this.type] || this.sentry || ProjectileID.Sets.SentryShot[this.type];
			}
		}

		/// <summary>
		/// Hurts the local player if the player intersects the specified hitbox.
		/// </summary>
		/// <param name="hitbox">Typically the <see cref="P:Terraria.Entity.Hitbox" />, but any other Rectangle can be passed.</param>
		// Token: 0x06000DF3 RID: 3571 RVA: 0x003B2C04 File Offset: 0x003B0E04
		public void HurtPlayer(Rectangle hitbox)
		{
			Player targetPlayer = Main.LocalPlayer;
			if (!targetPlayer.active || targetPlayer.dead || targetPlayer.immune)
			{
				return;
			}
			if (!hitbox.Intersects(targetPlayer.Hitbox))
			{
				return;
			}
			this.direction = (targetPlayer.Center.X > base.Center.X).ToDirectionInt();
			int damageVariation = Main.DamageVar((float)this.damage, 0f - targetPlayer.luck);
			PlayerDeathReason damageSource = PlayerDeathReason.ByProjectile(this.owner, this.whoAmI);
			if (targetPlayer.Hurt(damageSource, damageVariation, this.direction, true, false, false, -1, this.IsDamageDodgable(), (float)this.ArmorPenetration) > 0.0 && !targetPlayer.dead)
			{
				this.StatusPlayer(targetPlayer.whoAmI);
			}
			if (this.trap)
			{
				targetPlayer.trapDebuffSource = true;
				if (targetPlayer.dead)
				{
					AchievementsHelper.HandleSpecialEvent(targetPlayer, 4);
				}
			}
		}

		// Token: 0x04000DB7 RID: 3511
		public static uint[][] perIDStaticNPCImmunity = new uint[(int)ProjectileID.Count][];

		// Token: 0x04000DB8 RID: 3512
		public const int SentryLifeTime = 36000;

		// Token: 0x04000DB9 RID: 3513
		public const int ArrowLifeTime = 1200;

		// Token: 0x04000DBA RID: 3514
		public float ownerHitCheckDistance = 1000f;

		/// <summary>
		/// Indicates that this is an arrow projectile. Used to apply the Phantasm and Magic Quiver effects.
		/// </summary>
		// Token: 0x04000DBB RID: 3515
		public bool arrow;

		// Token: 0x04000DBC RID: 3516
		public int numHits;

		// Token: 0x04000DBD RID: 3517
		public bool bobber;

		/// <summary>
		/// Indicates that this projectile will be synced to a joining player (by default, any projectiles active before the player joins (besides projectiles with type in <see cref="F:Terraria.Main.projPet" />) are not synced over). Example: glowsticks
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DBE RID: 3518
		public bool netImportant;

		/// <summary>
		/// Set to true if you don't want this projectile to have a chance to recover the ammo item that shot this, provided that the projectile is programmed to drop the item. For example, if you shoot the <see cref="F:Terraria.ID.ProjectileID.PaperAirplaneA" /> projectile, it will always drop the <see cref="F:Terraria.ID.ItemID.PaperAirplaneA" /> item. If your weapon shoots multiple recoverable projectiles for 1 ammo, you might want to consider setting this field to prevent infinite ammo exploits. Make sure to set this for any situation where a potentially recoverable ammo is spawned by something other than the player, such as traps and Town NPC.
		/// <para /> To implement recoverable ammo item drops, in <see cref="M:Terraria.ModLoader.ModProjectile.OnKill(System.Int32)" /> check this, <see cref="F:Terraria.Projectile.owner" />, and optionally a random chance to decide if the item should drop: <c>if (Projectile.owner == Main.myPlayer &amp;&amp; !Projectile.noDropItem)</c> See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePaperAirplaneProjectile.cs#L142">ExamplePaperAirplaneProjectile</see> for an example of this logic.
		/// <para /> Set directly on the projectile instance returned from <see cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />, not in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" />. This ensures that the weapon or source spawning the projectile decides if the ammo item will spawn, which is more compatible.
		/// <para /> Set automatically when shot from a weapon that counts as <see cref="P:Terraria.ModLoader.DamageClass.Throwing" /> and <see cref="P:Terraria.Player.AnyThrownCostReduction" /> is <see langword="true" />.
		/// <para /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DBF RID: 3519
		public bool noDropItem;

		// Token: 0x04000DC0 RID: 3520
		public static int maxAI = 3;

		// Token: 0x04000DC1 RID: 3521
		public bool counterweight;

		/// <summary>
		/// Scales how large the projectile will be drawn. Will also affect the hitbox (<see cref="F:Terraria.Entity.width" />, <see cref="F:Terraria.Entity.height" />) if assigned in SetDefaults. If changed elsewhere it will not affect the hitbox, so that will have to be adjusted manually via code in that situation if needed. <para />
		/// Due to legacy code, scale does not affect the draw origin correctly, resulting in the projectile not rotating around the hitbox center correctly nor being drawn correctly centered on the hitbox. For small changes (0.8f to 1.2f) the effect is unnoticeable, but it is advised to avoid large values unless the projectile is manually drawn with the correct approach via <see cref="M:Terraria.ModLoader.ModProjectile.PreDraw(Microsoft.Xna.Framework.Color@)" />.<para />
		/// <br /> Defaults to 1f.
		/// </summary>
		// Token: 0x04000DC2 RID: 3522
		public float scale = 1f;

		/// <summary>
		/// Rotation of the projectile. Radians not Degrees. Use <see cref="T:Microsoft.Xna.Framework.MathHelper" /> if you want to convert degrees to radians. 0 is facing right, <see cref="F:Microsoft.Xna.Framework.MathHelper.PiOver2" /> is facing down, and so on. Note that hitboxes do not rotate.
		/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#rotation">Basic Projectile Guide</see> teaches more about projectile rotation.
		/// <br /> Defaults to 0f.
		/// </summary>
		// Token: 0x04000DC3 RID: 3523
		public float rotation;

		/// <summary>
		/// The Projectile ID of this projectile. The Projectile ID is a unique number assigned to each Projectile loaded into the game. This will be equal to either an <see cref="T:Terraria.ID.ProjectileID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.ProjectileType``1" />, for example <see cref="F:Terraria.ID.ProjectileID.WoodenArrowFriendly" /> or ModContent.ProjectileType&lt;MyModProjectile&gt;(). To check if a Projectile instance is a specific Projectile, check <c>Projectile.type == ProjectileID.VanillaProjectileHere</c> or <c>Projectile.type == ModContent.ProjectileType&lt;ModdedProjectileHere&gt;()</c> in an <see langword="if" /> statement.
		/// </summary>
		// Token: 0x04000DC4 RID: 3524
		public int type;

		/// <summary>
		/// How transparent to draw this projectile. Ranges from 0 to 255. 0 is fully opaque and 255 is completely transparent. (<see cref="P:Terraria.Projectile.Opacity" /> also controls alpha and might be easier to work with in some situations.)
		/// <para /> Can be adjusted to dynamically fade in or out a projectile. One example usage is for projectiles that look odd when initially spawned on the weapon because of texture overlap. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleBullet.cs">ExampleBullet.SetDefaults</see> sets this to 255, and the projectile aiStyle of <see cref="F:Terraria.ID.ProjAIStyleID.Arrow" /> automatically decreases alpha each tick, causing the projectile to fade in quickly after being spawned.
		/// <para /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#fade-inout">Basic Projectile Guide</see> teaches more about projectile fade in and out.
		/// <para /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DC5 RID: 3525
		public int alpha;

		/// <summary>
		/// Indicates that this projectile is a sentry
		/// <br /> Defaults to <see langword="false" />.
		/// <br /> All sentries should set <see cref="F:Terraria.Projectile.timeLeft" /> to <see cref="F:Terraria.Projectile.SentryLifeTime" />.
		/// <br /> When a sentry is spawned, <see cref="M:Terraria.Player.UpdateMaxTurrets" /> should be called immediately after.
		/// </summary>
		// Token: 0x04000DC6 RID: 3526
		public bool sentry;

		// Token: 0x04000DC7 RID: 3527
		public short glowMask;

		/// <summary>
		/// The index of the player who owns this projectile. In Multiplayer, Clients "own" projectiles that they shoot, while the Server "owns" projectiles spawned by NPCs and the World.
		/// <br /> NPC <b>never</b> own projectiles, do not use owner to index into <see cref="F:Terraria.Main.npc" />. 
		/// <br /> It is very important to check <c>if (Projectile.owner == Main.myPlayer)</c> for things like dropping items or spawning projectiles in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> and some other methods because AI runs simultaneously on all Clients and the Server. This check gates some of the code that should only run on the owners computer. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePaperAirplaneProjectile.cs#L142">ExamplePaperAirplaneProjectile</see> checks owner for spawning the recovered ammo item. If you don't do this, you will run into desync bugs in your mod.
		/// <br /> Defaults to the owner parameter of Projectile.NewProjectile, which should always be set to <see cref="F:Terraria.Main.myPlayer" /> to correspond to the client that owns the projectile..
		/// </summary>
		// Token: 0x04000DC8 RID: 3528
		public int owner = 255;

		/// <summary>
		/// An array with 3 slots used for any sort of data storage, which is occasionally synced to the server. Each vanilla <see cref="T:Terraria.ID.ProjAIStyleID" /> uses these slots for different purposes. Set <see cref="F:Terraria.Projectile.netUpdate" /> to true during AI methods to manually sync. The advantage of using these 3 floats is that they are synced automatically. Using fields in your <see cref="P:Terraria.Projectile.ModProjectile" /> class will work just the same, but they might need to be synced via <see cref="M:Terraria.ModLoader.ModProjectile.SendExtraAI(System.IO.BinaryWriter)" /> and <see cref="M:Terraria.ModLoader.ModProjectile.ReceiveExtraAI(System.IO.BinaryReader)" /> if necessary.
		/// <br /> Clever use of <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values">Reference return values</see> as seen in <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Pets/ExampleLightPet/ExampleLightPetProjectile.cs#L22">ExampleLightPetProjectile.cs</see> can be used to reuse the ai array entries with readable names.
		/// <br /> Defaults to the values passed into <see cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />, usually [0, 0, 0].
		/// </summary>
		// Token: 0x04000DC9 RID: 3529
		public float[] ai = new float[Projectile.maxAI];

		/// <summary>
		/// Acts like <see cref="F:Terraria.Projectile.ai" />, but does not sync to the server. Many vanilla <see cref="T:Terraria.ID.ProjAIStyleID" /> use these slots for various purposes.
		/// <br /> Defaults to [0, 0, 0]
		/// </summary>
		// Token: 0x04000DCA RID: 3530
		public float[] localAI = new float[Projectile.maxAI];

		/// <summary>
		/// An offset from the actual position of the projectile that will be added to the draw position. Used to offset some held projectiles to match the players <see cref="F:Terraria.Player.gfxOffY" />, thereby keeping the projectile visually in sync with the player. <see cref="F:Terraria.ID.ProjectileID.Sets.HeldProjDoesNotUsePlayerGfxOffY" /> can be used to ignore that usage.
		/// </summary>
		// Token: 0x04000DCB RID: 3531
		public float gfxOffY;

		/// <summary>
		/// Has nothing to do with the speed that this projectile travels, that is dictated by AI code adjusting <see cref="F:Terraria.Entity.velocity" />. This affects how quickly <see cref="F:Terraria.Projectile.gfxOffY" /> is adjusted.
		/// </summary>
		// Token: 0x04000DCC RID: 3532
		public float stepSpeed = 1f;

		/// <summary>
		/// Selects which vanilla code to use for the AI method. Vanilla projectile AI styles are enumerated in the <see cref="T:Terraria.ID.ProjAIStyleID" /> class. Modders can use vanilla aiStyle and optionally <see cref="P:Terraria.ModLoader.ModProjectile.AIType" /> to mimic AI code already in the game. This is usually only useful as a prototyping tool since it is difficult to customize existing aiStyle code. See <see cref="P:Terraria.ModLoader.ModProjectile.AIType" /> and <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleCloneProjectile.cs">ExampleCloneProjectile</see> to see how to use vanilla ai. If you are using custom AI code, there is no need to set this field.
		/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#what-is-ai">Basic Projectile Guide</see> teaches how to use an existing aiStyle.
		/// <br /> Customizing an existing aiStyle usually requires following the <see href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-projectile-or-npc-ai-code">Vanilla Code Adaption Guide</see>.
		/// <br /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DCD RID: 3533
		public int aiStyle;

		/// <summary>
		/// Time in ticks before this projectile will naturally despawn.
		/// <br /> Each update timeLeft is decreased by 1. Once timeLeft hits 0, the Projectile will naturally despawn. The default value, 3600, is measured in ticks, which are usually 60 per seconds, so the default despawn time is about 60 seconds. Adjust this if you want the projectile to fizzle early rather than travel infinitely. Note that <see cref="F:Terraria.Projectile.extraUpdates" /> will cause it to decrease faster than normal time because Update is being called more often.
		/// <br /> Defaults to 3600.
		/// </summary>
		// Token: 0x04000DCE RID: 3534
		public int timeLeft;

		// Token: 0x04000DCF RID: 3535
		public int soundDelay;

		/// <summary>
		/// This will always be set in Projectile.NewProjectile based on the weapons damage and player stat modifiers. Modders should not set this in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" /> as it will be overwritten.
		/// </summary>
		// Token: 0x04000DD0 RID: 3536
		public int damage;

		// Token: 0x04000DD1 RID: 3537
		public int originalDamage;

		// Token: 0x04000DD2 RID: 3538
		public int spriteDirection = 1;

		/// <summary>
		/// If True, this projectile will hurt players and friendly NPCs (<see cref="F:Terraria.NPC.friendly" />)
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DD3 RID: 3539
		public bool hostile;

		// Token: 0x04000DD4 RID: 3540
		public bool reflected;

		/// <summary>
		/// This will always be set in Projectile.NewProjectile based on the weapons knockback and player stat modifiers. Modders should not set this in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" /> as it will be overwritten.
		/// </summary>
		// Token: 0x04000DD5 RID: 3541
		public float knockBack;

		/// <summary>
		/// If True, this projectile will hurt enemies (!<see cref="F:Terraria.NPC.friendly" />)
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DD6 RID: 3542
		public bool friendly;

		/// <summary>
		/// The remaining number of npc can this projectile hit before dying. (Or tile bounces). Assign this field in SetDefaults and use it in ModProjectile logic if needed. A value of -1 means the projectile will penetrate infinitely. See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePiercingProjectile.cs">ExamplePiercingProjectile</see> for more information on how penetrate influences NPC immunity frames.
		/// <br /> Defaults to 1. Used to automatically assigned a value to <see cref="F:Terraria.Projectile.maxPenetrate" /> at the end of SetDefaults.
		/// </summary>
		// Token: 0x04000DD7 RID: 3543
		public int penetrate = 1;

		// Token: 0x04000DD8 RID: 3544
		public int[] localNPCImmunity = new int[200];

		/// <summary>
		/// If true, this projectile manages it's own immunity timers for each npc.<br />
		/// Use this rather than <see cref="F:Terraria.Projectile.usesIDStaticNPCImmunity" /> if you want multiple projectiles of the same type to have a chance to attack rapidly, but don't want a single projectile to hit rapidly.<br />
		/// <see cref="F:Terraria.Projectile.localNPCHitCooldown" /> controls the cooldown timing and must be assigned a suitable value to work properly.<br />
		/// </summary>
		// Token: 0x04000DD9 RID: 3545
		public bool usesLocalNPCImmunity;

		/// <summary>
		/// If true, all projectiles of this type share an immunity cooldown for each npc.<br />
		/// Use this rather than <see cref="F:Terraria.Projectile.usesLocalNPCImmunity" /> if you want other projectile types a chance to attack the npc, but don't want projectile of the same projectile type to hit an npc rapidly.<br />
		/// <see cref="F:Terraria.Projectile.idStaticNPCHitCooldown" /> controls the cooldown timing and must be assigned a suitable value to work properly.<br />
		/// </summary>
		// Token: 0x04000DDA RID: 3546
		public bool usesIDStaticNPCImmunity;

		/// <summary>
		/// If true, this projectile will apply immunity to an npc despite having a <see cref="F:Terraria.Projectile.penetrate" /> value of 1. Used only for firework rockets in Terraria content.
		/// </summary>
		// Token: 0x04000DDB RID: 3547
		public bool appliesImmunityTimeOnSingleHits;

		/// <summary>
		/// How many npc can this projectile hit before dying. (Or tile bounces)
		/// <br /> Automatically set at the end of SetDefaults to the value of <see cref="F:Terraria.Projectile.penetrate" />.
		/// </summary>
		// Token: 0x04000DDC RID: 3548
		public int maxPenetrate = 1;

		/// <summary>
		/// The projectile's universal unique identifier, which is the same on all clients and the server. Usually used to find the same projectile on multiple clients and/or the server, e.g. <c>Projectile match = Main.projectile.FirstOrDefault(x =&gt; x.identity == identity);</c>
		/// <br /> Projectile.whoAmI indexes are not consistent between clients.
		/// </summary>
		// Token: 0x04000DDD RID: 3549
		public int identity;

		/// <summary>
		/// Set to a value above 0f to make this projectile emit a white light (higher number: more intensive light. 1f being stronger than a torch))
		/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#lighting">Basic Projectile Guide</see> teaches more about lighting, including non-white lighting, dust light, and glow behavior.
		/// <br /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DDE RID: 3550
		public float light;

		/// <summary>
		/// Set to true in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> or other suitable places to trigger the Projectile syncing code (<see cref="F:Terraria.ID.MessageID.SyncProjectile" />). This will sync position, velocity, damage, knockback, and other data about this Projectile to the server and other clients. This also includes modded data from <see cref="M:Terraria.ModLoader.ModProjectile.SendExtraAI(System.IO.BinaryWriter)" /> and <see cref="M:Terraria.ModLoader.GlobalProjectile.SendExtraAI(Terraria.Projectile,Terraria.ModLoader.IO.BitWriter,System.IO.BinaryWriter)" />.
		/// <para /> Use this to sync changes that happen only on the owners game, such as responding to player mouse and keyboard input or non-Deterministic logic such as random choices. Consulting similar Terraria aiStyle code and following that usage is usually a good idea.
		/// <para /> netUpdate only has effect for the Projectile owner. Projectiles owned by clients will sync data from the owner to the server and the server will relay that data to the other clients. Projectiles owned by the server will send their data to all clients.
		/// <para /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Netcode">Basic Netcode wiki page</see> goes into more details and links to examples.
		/// </summary>
		// Token: 0x04000DDF RID: 3551
		public bool netUpdate;

		/// <summary>
		/// Used internally to check for projectiles that spam <see cref="F:Terraria.Projectile.netUpdate" />. Don't use it yourself manually
		/// </summary>
		// Token: 0x04000DE0 RID: 3552
		public bool netUpdate2;

		// Token: 0x04000DE1 RID: 3553
		public int netSpam;

		/// <summary>
		/// Holds the value of <see cref="F:Terraria.Entity.position" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
		/// <para /> Note that <c>oldPos[0]</c> will be equal to <see cref="F:Terraria.Entity.position" /> during drawing methods, so index 0 should be skipped unless skipping vanilla drawing. Also note that they should be drawn in reverse order to layer properly. Also note that the values are from previous updates, not previous draws, which might be relevant if <see cref="F:Terraria.Projectile.extraUpdates" /> is used.
		/// </summary>
		// Token: 0x04000DE2 RID: 3554
		public Vector2[] oldPos = new Vector2[10];

		/// <summary>
		/// Holds the value of <see cref="F:Terraria.Projectile.rotation" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
		/// </summary>
		// Token: 0x04000DE3 RID: 3555
		public float[] oldRot = new float[10];

		/// <summary>
		/// Holds the value of <see cref="F:Terraria.Projectile.spriteDirection" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
		/// </summary>
		// Token: 0x04000DE4 RID: 3556
		public int[] oldSpriteDirection = new int[10];

		/// <summary>
		/// Indicates that this projectile is a minion
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DE5 RID: 3557
		public bool minion;

		/// <summary>
		/// Set to 1f on a minion to count it towards the minion limit of the summoning player (Optic Staff summons two minions at once with 0.5f each)
		/// <br /> Make sure to set <see cref="F:Terraria.ID.ItemID.Sets.StaffMinionSlotsRequired" /> for the minion summoning item to the sum of the minionSlots values of the minions that will be spawned.
		/// <br /> Defaults to 0f.
		/// </summary>
		// Token: 0x04000DE6 RID: 3558
		public float minionSlots;

		/// <summary>
		/// A number indicating the order of minions. Minion AI code typically uses this value to determine a suitable idle position that results in minions lining up neatly in relation to the player without bunching up.
		/// </summary>
		// Token: 0x04000DE7 RID: 3559
		public int minionPos;

		// Token: 0x04000DE8 RID: 3560
		public int restrikeDelay;

		/// <summary>
		/// If true, the projectile will collide with tiles, usually bouncing or killing the tile depending on <see cref="M:Terraria.ModLoader.ModProjectile.OnTileCollide(Microsoft.Xna.Framework.Vector2)" />. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleBullet.cs#L37">ExampleBullet</see> shows how to implement bounce.
		/// <br /> Defaults to <see langword="true" />.
		/// </summary>
		// Token: 0x04000DE9 RID: 3561
		public bool tileCollide;

		/// <summary>
		/// Additional update steps per tick. Useful for really fast projectiles such as <see href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-item-and-projectile-shadowbeam-staff-clone">Shadowbeam Staff</see>. If your projectile is mistakenly occasionally traveling through tiles, you may need to increase this to prevent that.
		/// <para /> Also useful as a velocity multiplier for ammo projectile. The <see href="https://terraria.wiki.gg/wiki/Velocity">Shoot Speed wiki page</see> explains how that works.
		/// <para /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DEA RID: 3562
		public int extraUpdates;

		/// <summary>
		/// If true, the projectile will have penetrate set to -1 and damage set to 0 when damaging an NPC and having penetrate reach 0. What this effectively does is keep the projectile from dying once it satisfies the penetrate limit while also making the projectile harmless, allowing it to despawn later in some other manner rather than immediately. 
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DEB RID: 3563
		public bool stopsDealingDamageAfterPenetrateHits;

		// Token: 0x04000DEC RID: 3564
		public int numUpdates;

		/// <summary>
		/// The projectile will not be affected by water.
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DED RID: 3565
		public bool ignoreWater;

		// Token: 0x04000DEE RID: 3566
		public bool isAPreviewDummy;

		/// <summary>
		/// Projectile is not drawn normally. Held projectiles (<see cref="F:Terraria.Player.heldProj" />) and projectiles specified to be drawn at specific layers (<see cref="M:Terraria.ModLoader.ModProjectile.DrawBehind(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})" />)  use this.
		/// <para /> By default this will also influence the lighting of this projectile to match the players lighting, as if it were a held projectile. Projectiles that are not held by the player should set <see cref="F:Terraria.ID.ProjectileID.Sets.DontAttachHideToAlpha" /> to true in SetStaticDefaults: <c>ProjectileID.Sets.DontAttachHideToAlpha[Type] = true;</c>
		/// <para /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DEF RID: 3567
		public bool hide;

		/// <summary>
		/// If <see langword="true" />, then this projectile will only deal damage if its owner has line of sight to the hit.
		/// <br /> Useful for melee projectiles, such as spears and shortswords.
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000DF0 RID: 3568
		public bool ownerHitCheck;

		// Token: 0x04000DF1 RID: 3569
		public bool usesOwnerMeleeHitCD;

		// Token: 0x04000DF2 RID: 3570
		public int[] playerImmune = new int[255];

		// Token: 0x04000DF3 RID: 3571
		public string miscText = "";

		// Token: 0x04000DF4 RID: 3572
		public bool coldDamage;

		/// <summary>
		/// If true, this projectile will not benefit from weapon enchantments such as flasks, frost armor, or magma stone effects. This means the projectile won't inflict associated buffs or spawn associated visuals.
		/// <para /> Defaults to false.
		/// </summary>
		// Token: 0x04000DF5 RID: 3573
		public bool noEnchantments;

		/// <summary>
		/// If true, this projectile will not have <see cref="M:Terraria.Projectile.EmitEnchantmentVisualsAt(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)" /> called automatically. This can be set to true for projectiles that wish to manually call <see cref="M:Terraria.Projectile.EmitEnchantmentVisualsAt(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)" /> in AI methods for finer control over the spawn location of enchantment visuals.
		/// <para /> Use <see cref="F:Terraria.Projectile.noEnchantments" /> instead to indicate that the projectile is not suitable for weapon enchantment effects at all and shouldn't inflict associated buffs either.
		/// <para /> Defaults to false.
		/// </summary>
		// Token: 0x04000DF6 RID: 3574
		public bool noEnchantmentVisuals;

		/// <summary>
		/// If true, this projectile was spawned by a trap tile.
		/// </summary>
		// Token: 0x04000DF7 RID: 3575
		public bool trap;

		/// <summary>
		/// If true, this projectile was spawned by a friendly Town NPC.
		/// </summary>
		// Token: 0x04000DF8 RID: 3576
		public bool npcProj;

		// Token: 0x04000DF9 RID: 3577
		public bool originatedFromActivableTile;

		/// <summary>
		/// Used as a timer to decide when to change <see cref="F:Terraria.Projectile.frame" />.
		/// <br /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DFA RID: 3578
		public int frameCounter;

		/// <summary>
		/// The frame number in the spritesheet that this projectile will be drawn with. Assign in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> based on the state of the projectile and <see cref="F:Terraria.Projectile.frameCounter" />.
		/// <br /> <see cref="F:Terraria.Main.projFrames" /> must be set in ModProjectile.SetStaticDefaults as well.
		/// <br /> Example: projectile has 4 frames, then frame can have values between 0 and 3
		/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#animationmultiple-frames">Basic Projectile Guide</see> teaches how to animate projectiles.
		/// <br /> Defaults to 0.
		/// </summary>
		// Token: 0x04000DFB RID: 3579
		public int frame;

		// Token: 0x04000DFC RID: 3580
		public bool manualDirectionChange;

		// Token: 0x04000DFD RID: 3581
		public int projUUID = -1;

		// Token: 0x04000DFE RID: 3582
		public bool decidesManualFallThrough;

		// Token: 0x04000DFF RID: 3583
		public bool shouldFallThrough;

		/// <summary>
		/// When used in conjunction with <see cref="F:Terraria.Projectile.usesLocalNPCImmunity" />, determines how many ticks must pass before this projectile can deal damage again to the same npc. A value of -1 indicates that it can only hit a specific npc once. The default value of -2 has no effect, so this must be assigned if usesLocalNPCImmunity is true.
		/// </summary>
		// Token: 0x04000E00 RID: 3584
		public int localNPCHitCooldown = -2;

		/// <summary>
		/// When used in conjunction with <see cref="F:Terraria.Projectile.usesIDStaticNPCImmunity" />, determines how many ticks must pass before any projectile of the same type can deal damage again to the same npc. This must be assigned a suitable value if usesIDStaticNPCImmunity is true.
		/// </summary>
		// Token: 0x04000E01 RID: 3585
		public int idStaticNPCHitCooldown = -1;

		// Token: 0x04000E02 RID: 3586
		public int bannerIdToRespondTo;

		// Token: 0x04000E03 RID: 3587
		private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();

		// Token: 0x04000E04 RID: 3588
		private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();

		// Token: 0x04000E05 RID: 3589
		private static Point[] _javelinsMax6 = new Point[6];

		// Token: 0x04000E06 RID: 3590
		private static Point[] _javelinsMax8 = new Point[8];

		// Token: 0x04000E07 RID: 3591
		private static Point[] _javelinsMax10 = new Point[10];

		// Token: 0x04000E08 RID: 3592
		public List<Vector2> WhipPointsForCollision = new List<Vector2>();

		// Token: 0x04000E09 RID: 3593
		private static Rectangle _lanceHitboxBounds = new Rectangle(0, 0, 300, 300);

		// Token: 0x04000E0A RID: 3594
		private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();

		// Token: 0x04000E0B RID: 3595
		private static Projectile.NPCDistanceByIndexComparator _medusaTargetComparer = new Projectile.NPCDistanceByIndexComparator();

		// Token: 0x04000E0C RID: 3596
		private static List<int> _ai164_blacklistedTargets = new List<int>();

		// Token: 0x04000E0D RID: 3597
		private static List<int> _ai158_blacklistedTargets = new List<int>();

		// Token: 0x04000E0E RID: 3598
		private static List<int> _ai156_blacklistedTargets = new List<int>();

		// Token: 0x04000E0F RID: 3599
		private static float[] _CompanionCubeScreamCooldown = new float[255];

		// Token: 0x04000E10 RID: 3600
		private string nameOverride;

		// Token: 0x04000E12 RID: 3602
		internal GlobalProjectile[] _globals;

		// Token: 0x04000E13 RID: 3603
		private DamageClass _damageClass = DamageClass.Default;

		// Token: 0x04000E14 RID: 3604
		private int _armorPenetration;

		// Token: 0x04000E15 RID: 3605
		private int _crit;

		// Token: 0x04000E19 RID: 3609
		public WhipSettings WhipSettings;

		// Token: 0x020007E3 RID: 2019
		private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
		{
			// Token: 0x06004F8A RID: 20362 RVA: 0x0067742C File Offset: 0x0067562C
			public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2)
			{
				return npcIndex1.Item2.CompareTo(npcIndex2.Item2);
			}
		}

		// Token: 0x020007E4 RID: 2020
		public struct HallowBossPelletStormInfo
		{
			// Token: 0x06004F8C RID: 20364 RVA: 0x00677455 File Offset: 0x00675655
			public float GetBulletProgress(int bulletIndex)
			{
				return this.BulletsProgressInStormStartNormalized + this.BulletsProgressInStormBonusByIndexNormalized * (float)bulletIndex;
			}

			// Token: 0x06004F8D RID: 20365 RVA: 0x00677468 File Offset: 0x00675668
			public bool IsValid(int bulletIndex)
			{
				float bulletProgress = this.GetBulletProgress(bulletIndex);
				return bulletProgress >= 0f && bulletProgress <= 1f;
			}

			// Token: 0x06004F8E RID: 20366 RVA: 0x00677494 File Offset: 0x00675694
			public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint)
			{
				return centerPoint + Vector2.UnitX.RotatedBy((double)(this.StartAngle + this.AnglePerBullet * (float)bulletIndex), default(Vector2)) * this.StormTotalRange * this.GetBulletProgress(bulletIndex);
			}

			// Token: 0x06004F8F RID: 20367 RVA: 0x006774E2 File Offset: 0x006756E2
			public Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint)
			{
				return Utils.CenteredRectangle(this.GetBulletPosition(bulletIndex, centerPoint), this.BulletSize);
			}

			// Token: 0x0400676D RID: 26477
			public float StartAngle;

			// Token: 0x0400676E RID: 26478
			public float AnglePerBullet;

			// Token: 0x0400676F RID: 26479
			public int BulletsInStorm;

			// Token: 0x04006770 RID: 26480
			public float BulletsProgressInStormStartNormalized;

			// Token: 0x04006771 RID: 26481
			public float BulletsProgressInStormBonusByIndexNormalized;

			// Token: 0x04006772 RID: 26482
			public float StormTotalRange;

			// Token: 0x04006773 RID: 26483
			public Vector2 BulletSize;
		}

		// Token: 0x020007E5 RID: 2021
		[CompilerGenerated]
		private static class <>O
		{
			// Token: 0x04006774 RID: 26484
			public static Action <0>__ResetImmunity;

			// Token: 0x04006775 RID: 26485
			public static Utils.TileActionAttempt <1>__CutTiles;

			// Token: 0x04006776 RID: 26486
			public static Utils.TileActionAttempt <2>__SpreadLightOpen_StopForSolids;

			// Token: 0x04006777 RID: 26487
			public static Utils.TileActionAttempt <3>__CastLight;

			// Token: 0x04006778 RID: 26488
			public static Utils.TileActionAttempt <4>__CastLightOpen;

			// Token: 0x04006779 RID: 26489
			public static Utils.TileActionAttempt <5>__SpreadDirt;

			// Token: 0x0400677A RID: 26490
			public static Utils.TileActionAttempt <6>__SpreadWater;

			// Token: 0x0400677B RID: 26491
			public static Utils.TileActionAttempt <7>__SpreadLava;

			// Token: 0x0400677C RID: 26492
			public static Utils.TileActionAttempt <8>__SpreadHoney;

			// Token: 0x0400677D RID: 26493
			public static Utils.TileActionAttempt <9>__SpreadDry;
		}
	}
}

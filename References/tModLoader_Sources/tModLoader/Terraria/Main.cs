using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using log4net;
using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Newtonsoft.Json.Linq;
using ReLogic.Content;
using ReLogic.Content.Sources;
using ReLogic.Graphics;
using ReLogic.Localization.IME;
using ReLogic.OS;
using ReLogic.Peripherals.RGB;
using ReLogic.Utilities;
using SDL2;
using Terraria.Achievements;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.Cinematics;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Ambience;
using Terraria.GameContent.Animations;
using Terraria.GameContent.Bestiary;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.ItemDropRules;
using Terraria.GameContent.Liquid;
using Terraria.GameContent.NetModules;
using Terraria.GameContent.Skies;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.BigProgressBar;
using Terraria.GameContent.UI.Chat;
using Terraria.GameContent.UI.Minimap;
using Terraria.GameContent.UI.ResourceSets;
using Terraria.GameContent.UI.States;
using Terraria.GameInput;
using Terraria.Graphics;
using Terraria.Graphics.CameraModifiers;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Light;
using Terraria.Graphics.Renderers;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Initializers;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ModLoader;
using Terraria.ModLoader.Config;
using Terraria.ModLoader.Core;
using Terraria.ModLoader.Default;
using Terraria.ModLoader.Engine;
using Terraria.ModLoader.IO;
using Terraria.ModLoader.UI;
using Terraria.Net;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.Social.Steam;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	// Token: 0x02000039 RID: 57
	public class Main : Game
	{
		// Token: 0x170000A5 RID: 165
		// (get) Token: 0x06000369 RID: 873 RVA: 0x000917DD File Offset: 0x0008F9DD
		// (set) Token: 0x0600036A RID: 874 RVA: 0x000917E4 File Offset: 0x0008F9E4
		public static string statusText
		{
			get
			{
				return Main._statusText;
			}
			set
			{
				Logging.LogStatusChange(value);
				Main._statusText = value;
			}
		}

		// Token: 0x170000A6 RID: 166
		// (get) Token: 0x0600036B RID: 875 RVA: 0x000917F2 File Offset: 0x0008F9F2
		// (set) Token: 0x0600036C RID: 876 RVA: 0x00091808 File Offset: 0x0008FA08
		public static UnifiedRandom rand
		{
			get
			{
				UnifiedRandom result;
				if ((result = Main._rand) == null)
				{
					result = (Main._rand = new UnifiedRandom());
				}
				return result;
			}
			set
			{
				Main._rand = value;
			}
		}

		// Token: 0x170000A7 RID: 167
		// (get) Token: 0x0600036D RID: 877 RVA: 0x00091810 File Offset: 0x0008FA10
		// (set) Token: 0x0600036E RID: 878 RVA: 0x00091817 File Offset: 0x0008FA17
		public static bool CanUpdateGameplay { get; private set; }

		// Token: 0x170000A8 RID: 168
		// (get) Token: 0x0600036F RID: 879 RVA: 0x0009181F File Offset: 0x0008FA1F
		public static Vector2 ViewPosition
		{
			get
			{
				return Main.screenPosition + Main.GameViewMatrix.Translation;
			}
		}

		// Token: 0x170000A9 RID: 169
		// (get) Token: 0x06000370 RID: 880 RVA: 0x00091835 File Offset: 0x0008FA35
		public static Vector2 ViewSize
		{
			get
			{
				return new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / Main.GameViewMatrix.Zoom;
			}
		}

		// Token: 0x170000AA RID: 170
		// (get) Token: 0x06000371 RID: 881 RVA: 0x00091857 File Offset: 0x0008FA57
		public static Matrix CurrentWantedZoomMatrix
		{
			get
			{
				return Main._currentWantedZoomMatrix;
			}
		}

		// Token: 0x170000AB RID: 171
		// (get) Token: 0x06000372 RID: 882 RVA: 0x0009185E File Offset: 0x0008FA5E
		public static Matrix UIScaleMatrix
		{
			get
			{
				return Main._uiScaleMatrix;
			}
		}

		// Token: 0x170000AC RID: 172
		// (get) Token: 0x06000373 RID: 883 RVA: 0x00091865 File Offset: 0x0008FA65
		public static float UIScaleWanted
		{
			get
			{
				return Main._uiScaleWanted;
			}
		}

		// Token: 0x170000AD RID: 173
		// (get) Token: 0x06000374 RID: 884 RVA: 0x0009186C File Offset: 0x0008FA6C
		// (set) Token: 0x06000375 RID: 885 RVA: 0x00091874 File Offset: 0x0008FA74
		public static float UIScale
		{
			get
			{
				return Main._uiScaleUsed;
			}
			set
			{
				Main._uiScaleWanted = value;
				float uIScaleMax = Main.instance.UIScaleMax;
				if (value > uIScaleMax)
				{
					value = uIScaleMax;
				}
				Main._uiScaleUsed = value;
				Main._uiScaleMatrix = Matrix.CreateScale(value, value, 1f);
				Main.chatMonitor.OnResolutionChange();
			}
		}

		// Token: 0x170000AE RID: 174
		// (get) Token: 0x06000376 RID: 886 RVA: 0x000918BC File Offset: 0x0008FABC
		public float UIScaleMax
		{
			get
			{
				float realScreenWidth = (float)PlayerInput.RealScreenWidth;
				float val3 = (float)PlayerInput.RealScreenHeight / 600f;
				float val2 = Math.Min(realScreenWidth / 800f, val3);
				return Math.Max(1f, val2);
			}
		}

		// Token: 0x170000AF RID: 175
		// (get) Token: 0x06000377 RID: 887 RVA: 0x000918F4 File Offset: 0x0008FAF4
		public static bool RenderTargetsRequired
		{
			get
			{
				return Main.GameZoomTarget > 1f || Main.GameViewMatrix.TransformationMatrix.M11 > 1f;
			}
		}

		// Token: 0x170000B0 RID: 176
		// (get) Token: 0x06000378 RID: 888 RVA: 0x0009191A File Offset: 0x0008FB1A
		public static bool IsItRaining
		{
			get
			{
				return Main.cloudAlpha > 0f;
			}
		}

		// Token: 0x170000B1 RID: 177
		// (get) Token: 0x06000379 RID: 889 RVA: 0x00091928 File Offset: 0x0008FB28
		public static bool ThickMouse
		{
			get
			{
				return Main.MouseBorderColor != Color.Transparent;
			}
		}

		// Token: 0x170000B2 RID: 178
		// (get) Token: 0x0600037A RID: 890 RVA: 0x00091939 File Offset: 0x0008FB39
		public static bool GamepadDisableCursorItemIcon
		{
			get
			{
				return PlayerInput.UsingGamepad && Main.GamepadDisableCursorItemIconInner;
			}
		}

		// Token: 0x170000B3 RID: 179
		// (get) Token: 0x0600037B RID: 891 RVA: 0x00091949 File Offset: 0x0008FB49
		public static string SavePath
		{
			get
			{
				return Program.SavePath;
			}
		}

		// Token: 0x170000B4 RID: 180
		// (get) Token: 0x0600037C RID: 892 RVA: 0x00091950 File Offset: 0x0008FB50
		public static GameModeData GameModeInfo
		{
			get
			{
				return Main._currentGameModeInfo;
			}
		}

		// Token: 0x170000B5 RID: 181
		// (get) Token: 0x0600037D RID: 893 RVA: 0x00091957 File Offset: 0x0008FB57
		// (set) Token: 0x0600037E RID: 894 RVA: 0x0009196C File Offset: 0x0008FB6C
		public static int GameMode
		{
			get
			{
				if (Main.ActiveWorldFileData == null)
				{
					return 0;
				}
				return Main.ActiveWorldFileData.GameMode;
			}
			set
			{
				GameModeData value2;
				if (Main.ActiveWorldFileData != null && Main.RegisteredGameModes.TryGetValue(value, out value2))
				{
					Main.ActiveWorldFileData.GameMode = value;
					Main._currentGameModeInfo = value2;
				}
			}
		}

		/// <summary> Returns true if any <see href="https://terraria.wiki.gg/wiki/Secret_world_seeds">secret world seed</see> is active for this world. </summary>
		// Token: 0x170000B6 RID: 182
		// (get) Token: 0x0600037F RID: 895 RVA: 0x000919A0 File Offset: 0x0008FBA0
		public static bool specialSeedWorld
		{
			get
			{
				return Main.drunkWorld || Main.getGoodWorld || Main.tenthAnniversaryWorld || Main.notTheBeesWorld || Main.dontStarveWorld || Main.remixWorld || Main.noTrapsWorld || Main.zenithWorld;
			}
		}

		/// <summary> Returns true if the world is a Master Mode world. Note that the <see cref="P:Terraria.Main.expertMode" /> will also be true. </summary>
		// Token: 0x170000B7 RID: 183
		// (get) Token: 0x06000380 RID: 896 RVA: 0x000919DC File Offset: 0x0008FBDC
		public static bool masterMode
		{
			get
			{
				if (Main.ActiveWorldFileData == null)
				{
					return false;
				}
				if (Main._overrideForMasterMode != null)
				{
					return Main._overrideForMasterMode.Value;
				}
				return (Main.getGoodWorld && Main._currentGameModeInfo.IsExpertMode) || Main._currentGameModeInfo.IsMasterMode;
			}
		}

		/// <summary> Returns true if the world is an Expert Mode world. Will be true even in Master Mode worlds. </summary>
		// Token: 0x170000B8 RID: 184
		// (get) Token: 0x06000381 RID: 897 RVA: 0x00091A28 File Offset: 0x0008FC28
		public static bool expertMode
		{
			get
			{
				if (Main.ActiveWorldFileData == null)
				{
					return false;
				}
				if (Main._overrideForExpertMode != null)
				{
					return Main._overrideForExpertMode.Value;
				}
				return Main.getGoodWorld || Main._currentGameModeInfo.IsExpertMode;
			}
		}

		// Token: 0x170000B9 RID: 185
		// (get) Token: 0x06000382 RID: 898 RVA: 0x00091A5D File Offset: 0x0008FC5D
		public static AchievementManager Achievements
		{
			get
			{
				return Main.instance._achievements;
			}
		}

		// Token: 0x170000BA RID: 186
		// (get) Token: 0x06000383 RID: 899 RVA: 0x00091A69 File Offset: 0x0008FC69
		public static AchievementAdvisor AchievementAdvisor
		{
			get
			{
				return Main.instance._achievementAdvisor;
			}
		}

		// Token: 0x170000BB RID: 187
		// (get) Token: 0x06000384 RID: 900 RVA: 0x00091A75 File Offset: 0x0008FC75
		// (set) Token: 0x06000385 RID: 901 RVA: 0x00091A7C File Offset: 0x0008FC7C
		public static ulong UnpausedUpdateSeed { get; private set; }

		// Token: 0x170000BC RID: 188
		// (get) Token: 0x06000386 RID: 902 RVA: 0x00091A84 File Offset: 0x0008FC84
		public static Effect screenShader
		{
			get
			{
				return Main.ScreenShaderRef.Value;
			}
		}

		// Token: 0x170000BD RID: 189
		// (get) Token: 0x06000387 RID: 903 RVA: 0x00091A90 File Offset: 0x0008FC90
		public static Effect pixelShader
		{
			get
			{
				return Main.PixelShaderRef.Value;
			}
		}

		// Token: 0x170000BE RID: 190
		// (get) Token: 0x06000388 RID: 904 RVA: 0x00091A9C File Offset: 0x0008FC9C
		public static Effect vertexPixelShader
		{
			get
			{
				return Main.VertexPixelShaderRef.Value;
			}
		}

		// Token: 0x170000BF RID: 191
		// (get) Token: 0x06000389 RID: 905 RVA: 0x00091AA8 File Offset: 0x0008FCA8
		public static Effect tileShader
		{
			get
			{
				return Main.TileShaderRef.Value;
			}
		}

		// Token: 0x170000C0 RID: 192
		// (get) Token: 0x0600038A RID: 906 RVA: 0x00091AB4 File Offset: 0x0008FCB4
		[Old("Transform is deprecated. Please use GameViewMatrix & GUIViewMatrix")]
		public static Matrix Transform
		{
			get
			{
				return Main.GameViewMatrix.TransformationMatrix;
			}
		}

		/// <summary>
		/// Fetches the position of the mouse cursor on the screen.<br />
		/// Useful for making things visually happen near the cursor.<br />
		/// </summary>
		// Token: 0x170000C1 RID: 193
		// (get) Token: 0x0600038B RID: 907 RVA: 0x00091AC0 File Offset: 0x0008FCC0
		public static Vector2 MouseScreen
		{
			get
			{
				return new Vector2((float)Main.mouseX, (float)Main.mouseY);
			}
		}

		/// <summary>
		/// Fetches the position of the mouse cursor in the world.<br />
		/// Useful for making things functionally happen near the cursor, such as projectile or NPC spawns.<br />
		/// </summary>
		// Token: 0x170000C2 RID: 194
		// (get) Token: 0x0600038C RID: 908 RVA: 0x00091AD4 File Offset: 0x0008FCD4
		public static Vector2 MouseWorld
		{
			get
			{
				Vector2 result = Main.MouseScreen + Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					result.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
				}
				return result;
			}
		}

		// Token: 0x170000C3 RID: 195
		// (get) Token: 0x0600038D RID: 909 RVA: 0x00091B28 File Offset: 0x0008FD28
		public static INetDiagnosticsUI ActiveNetDiagnosticsUI
		{
			get
			{
				if (Main._activeNetDiagnosticsUI == null)
				{
					INetDiagnosticsUI activeNetDiagnosticsUI;
					if (!Main.dedServ)
					{
						activeNetDiagnosticsUI = new NetDiagnosticsUI();
					}
					else
					{
						activeNetDiagnosticsUI = new EmptyDiagnosticsUI();
					}
					Main._activeNetDiagnosticsUI = activeNetDiagnosticsUI;
				}
				return Main._activeNetDiagnosticsUI;
			}
		}

		/// <summary>
		/// Counts game updates since the world was loaded. Updates even while gameplay is paused, but does not update on the main menus. Can be used to drive regular logic that doesn't need to run every update. The <see href="https://github.com/tModLoader/tModLoader/wiki/Time-and-Timers#modulo-timer">Modulo Timer section of the Time and Timers wiki page</see> has examples. <see cref="F:Terraria.Player.miscCounter" /> is a similar counter that should be used specifically for player effects.
		/// </summary>
		// Token: 0x170000C4 RID: 196
		// (get) Token: 0x0600038E RID: 910 RVA: 0x00091B5C File Offset: 0x0008FD5C
		public static uint GameUpdateCount
		{
			get
			{
				return Main._gameUpdateCount;
			}
		}

		// Token: 0x170000C5 RID: 197
		// (get) Token: 0x0600038F RID: 911 RVA: 0x00091B63 File Offset: 0x0008FD63
		public static SamplerState DefaultSamplerState
		{
			get
			{
				if (!Main.drawToScreen)
				{
					return SamplerState.PointClamp;
				}
				return SamplerState.LinearClamp;
			}
		}

		/// <summary>
		/// The y-coordinate of the top of the underworld, in tile coordinates.
		/// </summary>
		/// <remarks>Player in this layer will have <see cref="P:Terraria.Player.ZoneUnderworldHeight" /> set to <see langword="true" />.</remarks>
		// Token: 0x170000C6 RID: 198
		// (get) Token: 0x06000390 RID: 912 RVA: 0x00091B77 File Offset: 0x0008FD77
		public static int UnderworldLayer
		{
			get
			{
				return Main.maxTilesY - 200;
			}
		}

		// Token: 0x170000C7 RID: 199
		// (get) Token: 0x06000391 RID: 913 RVA: 0x00091B84 File Offset: 0x0008FD84
		public static float WindForVisuals
		{
			get
			{
				return Main.windSpeedCurrent;
			}
		}

		/// <summary>
		/// Retrieves the <see cref="T:Terraria.Player" /> object for the local user. Shorthand for <c><see cref="F:Terraria.Main.player" />[<see cref="F:Terraria.Main.myPlayer" />]</c>.<br />
		/// Many gameplay elements such as recipes, UI, TownNPC chat, and Biome logic are only executed locally, <see cref="P:Terraria.Main.LocalPlayer" /> is suitable for code relating to those situations. If the hook has a <see cref="T:Terraria.Player" /> parameter, it is likely not suitable to use <see cref="P:Terraria.Main.LocalPlayer" /> in it.
		/// </summary>
		// Token: 0x170000C8 RID: 200
		// (get) Token: 0x06000392 RID: 914 RVA: 0x00091B8B File Offset: 0x0008FD8B
		public static Player LocalPlayer
		{
			get
			{
				return Main.player[Main.myPlayer];
			}
		}

		// Token: 0x170000C9 RID: 201
		// (get) Token: 0x06000393 RID: 915 RVA: 0x00091B98 File Offset: 0x0008FD98
		public static CreativeUnlocksTracker LocalPlayerCreativeTracker
		{
			get
			{
				return Main.player[Main.myPlayer].creativeTracker;
			}
		}

		// Token: 0x170000CA RID: 202
		// (get) Token: 0x06000394 RID: 916 RVA: 0x00091BAA File Offset: 0x0008FDAA
		// (set) Token: 0x06000395 RID: 917 RVA: 0x00091BB1 File Offset: 0x0008FDB1
		public static int npcShop { get; internal set; }

		// Token: 0x170000CB RID: 203
		// (get) Token: 0x06000396 RID: 918 RVA: 0x00091BB9 File Offset: 0x0008FDB9
		public static string playerPathName
		{
			get
			{
				return Main.ActivePlayerFileData.Path;
			}
		}

		// Token: 0x170000CC RID: 204
		// (get) Token: 0x06000397 RID: 919 RVA: 0x00091BC5 File Offset: 0x0008FDC5
		public static string worldPathName
		{
			get
			{
				return Main.ActiveWorldFileData.Path;
			}
		}

		// Token: 0x170000CD RID: 205
		// (get) Token: 0x06000398 RID: 920 RVA: 0x00091BD1 File Offset: 0x0008FDD1
		public static bool SmartCursorWanted
		{
			get
			{
				if (PlayerInput.SteamDeckIsUsed && PlayerInput.SettingsForUI.CurrentCursorMode == CursorMode.Mouse)
				{
					return Main.SmartCursorWanted_Mouse;
				}
				if (PlayerInput.UsingGamepad)
				{
					return Main.SmartCursorWanted_GamePad;
				}
				return Main.SmartCursorWanted_Mouse;
			}
		}

		// Token: 0x170000CE RID: 206
		// (get) Token: 0x06000399 RID: 921 RVA: 0x00091BF9 File Offset: 0x0008FDF9
		public static bool SmartCursorIsUsed
		{
			get
			{
				return Main.SmartCursorWanted;
			}
		}

		// Token: 0x170000CF RID: 207
		// (get) Token: 0x0600039A RID: 922 RVA: 0x00091C00 File Offset: 0x0008FE00
		public static bool HasSmartInteractTarget
		{
			get
			{
				return Main.SmartInteractNPC != -1 || (Main.SmartInteractX != -1 && Main.SmartInteractY != -1) || Main.SmartInteractProj != -1;
			}
		}

		// Token: 0x170000D0 RID: 208
		// (get) Token: 0x0600039B RID: 923 RVA: 0x00091C27 File Offset: 0x0008FE27
		public static bool IsItAHappyWindyDay
		{
			get
			{
				return Main._shouldUseWindyDayMusic;
			}
		}

		// Token: 0x170000D1 RID: 209
		// (get) Token: 0x0600039C RID: 924 RVA: 0x00091C2E File Offset: 0x0008FE2E
		public static bool IsItStorming
		{
			get
			{
				return Main._shouldUseStormMusic;
			}
		}

		// Token: 0x170000D2 RID: 210
		// (get) Token: 0x0600039D RID: 925 RVA: 0x00091C35 File Offset: 0x0008FE35
		public static bool WindyEnoughForKiteDrops
		{
			get
			{
				return Math.Abs(Main.windSpeedTarget) >= Main._maxWind;
			}
		}

		// Token: 0x170000D3 RID: 211
		// (get) Token: 0x0600039E RID: 926 RVA: 0x00091C4B File Offset: 0x0008FE4B
		public static bool ShouldPVPDraw
		{
			get
			{
				return Main.netMode == 1;
			}
		}

		// Token: 0x170000D4 RID: 212
		// (get) Token: 0x0600039F RID: 927 RVA: 0x00091C55 File Offset: 0x0008FE55
		public int RecommendedEquipmentAreaPushUp
		{
			get
			{
				if (Main.player[Main.myPlayer].CanDemonHeartAccessoryBeShown())
				{
					return 610 + PlayerInput.SettingsForUI.PushEquipmentAreaUp.ToInt() * 30;
				}
				return 600;
			}
		}

		// Token: 0x170000D5 RID: 213
		// (get) Token: 0x060003A0 RID: 928 RVA: 0x00091C84 File Offset: 0x0008FE84
		public static bool ShouldDrawInfoIconsHorizontally
		{
			get
			{
				return !Main._cannotDrawAccessoriesHorizontally && (Main.mapStyle != 1 || !Main.mapEnabled || Main.screenHeight >= 820) && (Main.mapStyle == 1 || Main.screenWidth >= 855) && !PlayerInput.UsingGamepad;
			}
		}

		// Token: 0x170000D6 RID: 214
		// (get) Token: 0x060003A1 RID: 929 RVA: 0x00091CD8 File Offset: 0x0008FED8
		public static bool CanShowInfoAccs
		{
			get
			{
				return (Main.npcChatText == null || Main.npcChatText == "" || Main.player[Main.myPlayer].chest > -1) && Main.player[Main.myPlayer].sign < 0;
			}
		}

		// Token: 0x170000D7 RID: 215
		// (get) Token: 0x060003A2 RID: 930 RVA: 0x00091D25 File Offset: 0x0008FF25
		public static Point ScreenSize
		{
			get
			{
				return new Point(Main.screenWidth, Main.screenHeight);
			}
		}

		// Token: 0x170000D8 RID: 216
		// (get) Token: 0x060003A3 RID: 931 RVA: 0x00091D36 File Offset: 0x0008FF36
		public static bool IsGraphicsDeviceAvailable
		{
			get
			{
				return !Main.instance.GraphicsDevice.IsDisposed && Main.instance.GraphicsDevice.GraphicsDeviceStatus == 0;
			}
		}

		// Token: 0x14000001 RID: 1
		// (add) Token: 0x060003A4 RID: 932 RVA: 0x00091D60 File Offset: 0x0008FF60
		// (remove) Token: 0x060003A5 RID: 933 RVA: 0x00091D94 File Offset: 0x0008FF94
		public static event Action OnEnginePreload;

		// Token: 0x14000002 RID: 2
		// (add) Token: 0x060003A6 RID: 934 RVA: 0x00091DC8 File Offset: 0x0008FFC8
		// (remove) Token: 0x060003A7 RID: 935 RVA: 0x00091DFC File Offset: 0x0008FFFC
		public static event Action<Vector2> OnResolutionChanged;

		// Token: 0x14000003 RID: 3
		// (add) Token: 0x060003A8 RID: 936 RVA: 0x00091E30 File Offset: 0x00090030
		// (remove) Token: 0x060003A9 RID: 937 RVA: 0x00091E64 File Offset: 0x00090064
		public static event Action OnEngineLoad;

		// Token: 0x14000004 RID: 4
		// (add) Token: 0x060003AA RID: 938 RVA: 0x00091E98 File Offset: 0x00090098
		// (remove) Token: 0x060003AB RID: 939 RVA: 0x00091ECC File Offset: 0x000900CC
		public static event Action OnTickForThirdPartySoftwareOnly;

		// Token: 0x14000005 RID: 5
		// (add) Token: 0x060003AC RID: 940 RVA: 0x00091F00 File Offset: 0x00090100
		// (remove) Token: 0x060003AD RID: 941 RVA: 0x00091F34 File Offset: 0x00090134
		public static event Action OnTickForInternalCodeOnly;

		// Token: 0x14000006 RID: 6
		// (add) Token: 0x060003AE RID: 942 RVA: 0x00091F68 File Offset: 0x00090168
		// (remove) Token: 0x060003AF RID: 943 RVA: 0x00091F9C File Offset: 0x0009019C
		public static event Action<GameTime> OnPreDraw;

		// Token: 0x14000007 RID: 7
		// (add) Token: 0x060003B0 RID: 944 RVA: 0x00091FD0 File Offset: 0x000901D0
		// (remove) Token: 0x060003B1 RID: 945 RVA: 0x00092004 File Offset: 0x00090204
		public static event Action<GameTime> OnPostDraw;

		// Token: 0x14000008 RID: 8
		// (add) Token: 0x060003B2 RID: 946 RVA: 0x00092038 File Offset: 0x00090238
		// (remove) Token: 0x060003B3 RID: 947 RVA: 0x0009206C File Offset: 0x0009026C
		public static event Action<Vector2, float> OnPostFullscreenMapDraw;

		// Token: 0x14000009 RID: 9
		// (add) Token: 0x060003B4 RID: 948 RVA: 0x000920A0 File Offset: 0x000902A0
		// (remove) Token: 0x060003B5 RID: 949 RVA: 0x000920D4 File Offset: 0x000902D4
		public static event Action OnRenderTargetsReleased;

		// Token: 0x1400000A RID: 10
		// (add) Token: 0x060003B6 RID: 950 RVA: 0x00092108 File Offset: 0x00090308
		// (remove) Token: 0x060003B7 RID: 951 RVA: 0x0009213C File Offset: 0x0009033C
		public static event ResolutionChangeEvent OnRenderTargetsInitialized;

		// Token: 0x060003B8 RID: 952 RVA: 0x0009216F File Offset: 0x0009036F
		public static void ToggleGameplayUpdates(bool state)
		{
			Main.CanUpdateGameplay = state;
		}

		// Token: 0x060003B9 RID: 953 RVA: 0x00092177 File Offset: 0x00090377
		public static void SetRecommendedZoomContext(Matrix matrix)
		{
			Main._currentWantedZoomMatrix = matrix;
		}

		// Token: 0x060003BA RID: 954 RVA: 0x00092180 File Offset: 0x00090380
		public static void FindAnnouncementBoxStatus()
		{
			Main.AnnouncementBoxDisabled = Program.LaunchParameters.ContainsKey("-disableannouncementbox");
			string value;
			int result;
			if (Program.LaunchParameters.TryGetValue("-announcementboxrange", out value) && int.TryParse(value, out result))
			{
				Main.AnnouncementBoxRange = result;
			}
		}

		// Token: 0x060003BB RID: 955 RVA: 0x000921C4 File Offset: 0x000903C4
		public static bool CanPlayCreditsRoll()
		{
			return (!Main.gameMenu && Main.LocalPlayer.hasCreditsSceneMusicBox) || (Main.gameMenu && Main.menuMode == 3000) || CreditsRollEvent.IsEventOngoing;
		}

		// Token: 0x060003BC RID: 956 RVA: 0x000921F5 File Offset: 0x000903F5
		public static void SetCameraLerp(float lerp, int time)
		{
			Main.cameraLerp = lerp;
			Main.cameraLerpTimer = 0;
			Main.cameraLerpTimeToggle = time;
			Main.cameraGamePadLerp = false;
		}

		// Token: 0x060003BD RID: 957 RVA: 0x0009220F File Offset: 0x0009040F
		public static void SetCameraGamepadLerp(float lerp)
		{
			float num = Main.cameraLerp;
		}

		// Token: 0x060003BE RID: 958 RVA: 0x00092217 File Offset: 0x00090417
		public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = (float)Main.screenHeight - pos.Y - height;
			return pos;
		}

		// Token: 0x060003BF RID: 959 RVA: 0x00092249 File Offset: 0x00090449
		public static Point ReverseGravitySupport(Point pos, int height = 0)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = Main.screenHeight - pos.Y - height;
			return pos;
		}

		// Token: 0x060003C0 RID: 960 RVA: 0x0009227A File Offset: 0x0009047A
		public static Rectangle ReverseGravitySupport(Rectangle box)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return box;
			}
			box.Y = Main.screenHeight - box.Y - box.Height;
			return box;
		}

		// Token: 0x060003C1 RID: 961 RVA: 0x000922B0 File Offset: 0x000904B0
		public void SetMouseNPC(int index, int type)
		{
			this.mouseNPCIndex = index;
			this.mouseNPCType = type;
		}

		// Token: 0x060003C2 RID: 962 RVA: 0x000922C0 File Offset: 0x000904C0
		public void SetMouseNPC_ToHousingQuery()
		{
			this.SetMouseNPC(-1, 0);
		}

		// Token: 0x060003C3 RID: 963
		[DllImport("User32")]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

		// Token: 0x060003C4 RID: 964
		[DllImport("User32")]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		// Token: 0x060003C5 RID: 965
		[DllImport("User32")]
		private static extern int GetMenuItemCount(IntPtr hWnd);

		// Token: 0x060003C6 RID: 966
		[DllImport("kernel32.dll")]
		public static extern IntPtr LoadLibrary(string dllToLoad);

		/// <summary> The current <see href="https://terraria.wiki.gg/wiki/Moon_phase">moon phase</see> expressed as a <see cref="T:Terraria.Enums.MoonPhase" />. Use <see cref="F:Terraria.Main.moonPhase" /> to get the moon phase as an int instead. </summary>
		// Token: 0x060003C7 RID: 967 RVA: 0x000922CA File Offset: 0x000904CA
		public static MoonPhase GetMoonPhase()
		{
			return (MoonPhase)Main.moonPhase;
		}

		// Token: 0x060003C8 RID: 968 RVA: 0x000922D4 File Offset: 0x000904D4
		public static Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
		{
			float num = 10f;
			Texture2D texture2D;
			Rectangle r;
			Main.GetItemDrawFrame(itemtype, out texture2D, out r);
			Vector2 result = r.Size() / 2f;
			if (itemtype <= 2624)
			{
				if (itemtype <= 1835)
				{
					if (itemtype <= 1255)
					{
						if (itemtype == 95)
						{
							num = 6f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype == 1255)
						{
							num = 6f;
							result.Y += 0f * gravdir;
							goto IL_D7B;
						}
					}
					else
					{
						if (itemtype == 1265)
						{
							num = -8f;
							result.Y += 4f * gravdir;
							goto IL_D7B;
						}
						if (itemtype == 1295)
						{
							num = 4f;
							goto IL_D7B;
						}
						if (itemtype == 1835)
						{
							num = -2f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						}
					}
				}
				else if (itemtype <= 2272)
				{
					if (itemtype == 2269)
					{
						num = 2f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 2272)
					{
						num = 0f;
						result.Y += 4f * gravdir;
						goto IL_D7B;
					}
				}
				else
				{
					if (itemtype == 2610)
					{
						num = 0f;
						goto IL_D7B;
					}
					if (itemtype == 2623)
					{
						num = -30f;
						result.Y -= 4f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 2624)
					{
						num = 4f;
						goto IL_D7B;
					}
				}
			}
			else if (itemtype <= 3018)
			{
				if (itemtype <= 2797)
				{
					if (itemtype == 2796)
					{
						num = -28f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 2797)
					{
						num = 0f;
						goto IL_D7B;
					}
				}
				else
				{
					if (itemtype == 3007)
					{
						num = 4f;
						result.Y -= 1f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 3008)
					{
						num = -7f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 3018)
					{
						num = 2f;
						goto IL_D7B;
					}
				}
			}
			else if (itemtype <= 3350)
			{
				if (itemtype == 3029)
				{
					num = 4f;
					goto IL_D7B;
				}
				if (itemtype == 3107)
				{
					num = 4f;
					result.Y += 2f * gravdir;
					goto IL_D7B;
				}
				if (itemtype == 3350)
				{
					num = 2f;
					goto IL_D7B;
				}
			}
			else
			{
				if (itemtype == 3546)
				{
					num = -14f;
					result.Y -= 6f * gravdir;
					goto IL_D7B;
				}
				if (itemtype == 3611)
				{
					num = 2f;
					goto IL_D7B;
				}
				if (itemtype == 4381)
				{
					num = 4f;
					goto IL_D7B;
				}
			}
			if (itemtype <= 1000)
			{
				if (itemtype <= 481)
				{
					if (itemtype <= 165)
					{
						if (itemtype <= 127)
						{
							if (itemtype <= 98)
							{
								if (itemtype == 96)
								{
									num = -8f;
									result.Y += 2f * gravdir;
									goto IL_D7B;
								}
								if (itemtype != 98)
								{
									goto IL_D7B;
								}
								num = -5f;
								result.Y -= 2f * gravdir;
								goto IL_D7B;
							}
							else
							{
								if (itemtype == 126)
								{
									num = 4f;
									result.Y += 4f * gravdir;
									goto IL_D7B;
								}
								if (itemtype != 127)
								{
									goto IL_D7B;
								}
								num = 4f;
								result.Y += 2f * gravdir;
								goto IL_D7B;
							}
						}
						else if (itemtype <= 160)
						{
							if (itemtype == 157)
							{
								num = 6f;
								result.Y += 2f * gravdir;
								goto IL_D7B;
							}
							if (itemtype != 160)
							{
								goto IL_D7B;
							}
							num = -8f;
							goto IL_D7B;
						}
						else if (itemtype != 164)
						{
							if (itemtype != 165)
							{
								goto IL_D7B;
							}
							goto IL_BD8;
						}
					}
					else if (itemtype <= 272)
					{
						if (itemtype <= 219)
						{
							if (itemtype == 197)
							{
								num = -5f;
								result.Y += 4f * gravdir;
								goto IL_D7B;
							}
							if (itemtype != 219)
							{
								goto IL_D7B;
							}
						}
						else
						{
							if (itemtype == 266)
							{
								num = 0f;
								result.Y += 2f * gravdir;
								goto IL_D7B;
							}
							if (itemtype != 272)
							{
								goto IL_D7B;
							}
							goto IL_BD8;
						}
					}
					else if (itemtype <= 434)
					{
						if (itemtype == 281)
						{
							num = 6f;
							result.Y -= 6f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 434)
						{
							goto IL_D7B;
						}
						num = 0f;
						result.Y -= 2f * gravdir;
						goto IL_D7B;
					}
					else
					{
						if (itemtype - 435 > 1 && itemtype != 481)
						{
							goto IL_D7B;
						}
						goto IL_AE5;
					}
					num = 0f;
					result.Y += 2f * gravdir;
					goto IL_D7B;
					IL_BD8:
					num = 4f;
					result.Y += 4f * gravdir;
					goto IL_D7B;
				}
				if (itemtype <= 679)
				{
					if (itemtype <= 514)
					{
						if (itemtype <= 506)
						{
							if (itemtype != 494)
							{
								if (itemtype != 506)
								{
									goto IL_D7B;
								}
								num = 0f;
								result.Y -= 2f * gravdir;
								goto IL_D7B;
							}
						}
						else if (itemtype != 508)
						{
							if (itemtype != 514)
							{
								goto IL_D7B;
							}
							num = 0f;
							result.Y += 3f * gravdir;
							goto IL_D7B;
						}
						num = -2f;
						goto IL_D7B;
					}
					if (itemtype <= 534)
					{
						if (itemtype == 533)
						{
							num = -7f;
							result.Y -= 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 534)
						{
							goto IL_D7B;
						}
						num = -2f;
						result.Y += 1f * gravdir;
						goto IL_D7B;
					}
					else if (itemtype != 578)
					{
						if (itemtype != 679)
						{
							goto IL_D7B;
						}
						num = 0f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
				}
				else if (itemtype <= 800)
				{
					if (itemtype <= 760)
					{
						if (itemtype == 682)
						{
							num = 4f;
							goto IL_D7B;
						}
						switch (itemtype)
						{
						case 758:
							num -= 20f;
							result.Y += 0f * gravdir;
							goto IL_D7B;
						case 759:
							num -= 18f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						case 760:
							num -= 12f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						default:
							goto IL_D7B;
						}
					}
					else
					{
						if (itemtype == 779)
						{
							num = 0f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 800)
						{
							goto IL_D7B;
						}
						num = 4f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
				}
				else if (itemtype <= 930)
				{
					if (itemtype == 905)
					{
						num = -5f;
						result.Y += 0f * gravdir;
						goto IL_D7B;
					}
					if (itemtype != 930)
					{
						goto IL_D7B;
					}
					num = 4f;
					result.Y += 2f * gravdir;
					goto IL_D7B;
				}
				else
				{
					if (itemtype == 964)
					{
						num = 0f;
						result.Y += 0f * gravdir;
						goto IL_D7B;
					}
					if (itemtype == 986)
					{
						num = 6f;
						result.Y -= 10f * gravdir;
						goto IL_D7B;
					}
					if (itemtype != 1000)
					{
						goto IL_D7B;
					}
					num = 6f;
					result.Y += 0f * gravdir;
					goto IL_D7B;
				}
			}
			else if (itemtype <= 1782)
			{
				if (itemtype <= 1229)
				{
					if (itemtype <= 1178)
					{
						if (itemtype <= 1155)
						{
							if (itemtype == 1121)
							{
								num = 6f;
								result.Y -= 2f * gravdir;
								goto IL_D7B;
							}
							if (itemtype != 1155)
							{
								goto IL_D7B;
							}
							num = -10f;
							result.Y -= 2f * gravdir;
							goto IL_D7B;
						}
						else
						{
							if (itemtype == 1156)
							{
								num = -2f;
								goto IL_D7B;
							}
							if (itemtype != 1178)
							{
								goto IL_D7B;
							}
							num = 4f;
							result.Y += 0f * gravdir;
							goto IL_D7B;
						}
					}
					else if (itemtype <= 1194)
					{
						if (itemtype != 1187 && itemtype != 1194)
						{
							goto IL_D7B;
						}
					}
					else if (itemtype != 1201 && itemtype != 1229)
					{
						goto IL_D7B;
					}
				}
				else if (itemtype <= 1297)
				{
					if (itemtype <= 1258)
					{
						if (itemtype == 1254)
						{
							num = -6f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 1258)
						{
							goto IL_D7B;
						}
						num = 2f;
						result.Y -= 2f * gravdir;
						goto IL_D7B;
					}
					else
					{
						if (itemtype == 1260)
						{
							num = -8f;
							result.Y += 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 1297)
						{
							goto IL_D7B;
						}
						num = -8f;
						result.Y += 0f * gravdir;
						goto IL_D7B;
					}
				}
				else if (itemtype <= 1319)
				{
					if (itemtype == 1314)
					{
						num = 2f;
						goto IL_D7B;
					}
					if (itemtype != 1319)
					{
						goto IL_D7B;
					}
					num = 0f;
					result.Y += 0f * gravdir;
					goto IL_D7B;
				}
				else
				{
					if (itemtype == 1553)
					{
						num = -10f;
						result.Y -= 2f * gravdir;
						goto IL_D7B;
					}
					if (itemtype != 1782)
					{
						goto IL_D7B;
					}
					num = 0f;
					result.Y += 4f * gravdir;
					goto IL_D7B;
				}
			}
			else if (itemtype <= 2624)
			{
				if (itemtype <= 1929)
				{
					if (itemtype <= 1870)
					{
						if (itemtype == 1784)
						{
							num = 0f;
							result.Y += 4f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 1870)
						{
							goto IL_D7B;
						}
						num = -8f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
					else
					{
						if (itemtype == 1910)
						{
							num = 0f;
							result.Y -= 2f * gravdir;
							goto IL_D7B;
						}
						if (itemtype != 1929)
						{
							goto IL_D7B;
						}
						num = 0f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
				}
				else if (itemtype <= 2223)
				{
					if (itemtype == 1946)
					{
						num -= 12f;
						result.Y += 2f * gravdir;
						goto IL_D7B;
					}
					if (itemtype != 2223)
					{
						goto IL_D7B;
					}
					num = 2f;
					result.Y -= 2f * gravdir;
					goto IL_D7B;
				}
				else
				{
					if (itemtype == 2270)
					{
						num = -4f;
						goto IL_D7B;
					}
					if (itemtype != 2624)
					{
						goto IL_D7B;
					}
					num = -4f;
					goto IL_D7B;
				}
			}
			else if (itemtype <= 3870)
			{
				if (itemtype <= 3788)
				{
					if (itemtype == 2888)
					{
						num = 6f;
						goto IL_D7B;
					}
					if (itemtype != 3788)
					{
						goto IL_D7B;
					}
					num = 2f;
					result.Y += 2f * gravdir;
					goto IL_D7B;
				}
				else
				{
					if (itemtype == 3859)
					{
						num = -2f;
						goto IL_D7B;
					}
					if (itemtype != 3870)
					{
						goto IL_D7B;
					}
					num = 4f;
					result.Y += 4f * gravdir;
					goto IL_D7B;
				}
			}
			else if (itemtype <= 4703)
			{
				if (itemtype == 4060)
				{
					num = -2f;
					result.Y += 4f * gravdir;
					goto IL_D7B;
				}
				if (itemtype != 4703)
				{
					goto IL_D7B;
				}
				num = -3f;
				result.Y -= 2f * gravdir;
				goto IL_D7B;
			}
			else
			{
				if (itemtype == 4953)
				{
					num = -4f;
					goto IL_D7B;
				}
				if (itemtype == 5117)
				{
					num = -1f;
					goto IL_D7B;
				}
				if (itemtype != 5134)
				{
					goto IL_D7B;
				}
				num = 0f;
				result.Y += 2f * gravdir;
				goto IL_D7B;
			}
			IL_AE5:
			num = -2f;
			result.Y -= 2f * gravdir;
			IL_D7B:
			result.X = num;
			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
			return result;
		}

		// Token: 0x060003C9 RID: 969 RVA: 0x00093070 File Offset: 0x00091270
		public static void SetupTileMerge()
		{
			int count = (int)TileID.Count;
			Main.tileMerge = new bool[count][];
			for (int i = 0; i < Main.tileMerge.Length; i++)
			{
				Main.tileMerge[i] = new bool[count];
			}
			Main.SetupAllBlockMerge();
		}

		// Token: 0x060003CA RID: 970 RVA: 0x000930B4 File Offset: 0x000912B4
		internal static void SetupAllBlockMerge()
		{
			for (int i = 0; i < TileLoader.TileCount; i++)
			{
				bool flag = i == 10 || i == 387 || i == 541;
				bool? flag2 = TileID.Sets.BlockMergesWithMergeAllBlockOverride[i];
				if (flag2 != null)
				{
					bool mergeOverride = flag2.GetValueOrDefault();
					TileID.Sets.BlockMergesWithMergeAllBlock[i] = mergeOverride;
				}
				else
				{
					if (TileLoader.IsClosedDoor(i))
					{
						flag = true;
					}
					TileID.Sets.BlockMergesWithMergeAllBlock[i] = (!flag && Main.tileSolid[i] && !Main.tileSolidTop[i]);
				}
			}
		}

		/// <summary>
		/// Registers an animation for an item type to draw inside UI (not world or held item on player).
		/// To enable its animation in the world, use <see cref="F:Terraria.ID.ItemID.Sets.AnimatesAsSoul" /> in conjunction with this
		/// </summary>
		/// <param name="index">Item type</param>
		/// <param name="animation">Draw animation</param>
		// Token: 0x060003CB RID: 971 RVA: 0x0009313B File Offset: 0x0009133B
		public static void RegisterItemAnimation(int index, DrawAnimation animation)
		{
			if (!Main.itemAnimationsRegistered.Contains(index))
			{
				Main.itemAnimationsRegistered.Add(index);
			}
			Main.itemAnimations[index] = animation;
		}

		// Token: 0x060003CC RID: 972 RVA: 0x00093160 File Offset: 0x00091360
		public static void InitializeItemAnimations()
		{
			for (int i = 0; i < Main.itemAnimations.Length; i++)
			{
				Main.itemAnimations[i] = null;
			}
			Main.itemAnimationsRegistered.Clear();
			Main.RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4, false));
			Main.RegisterItemAnimation(3580, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(75, new DrawAnimationVertical(5, 8, false)
			{
				PingPong = true
			});
			Main.RegisterItemAnimation(575, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(547, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(520, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(548, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(521, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(549, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(3453, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(3454, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(3455, new DrawAnimationVertical(6, 4, false));
			Main.RegisterItemAnimation(4068, new DrawAnimationVertical(6, 4, false)
			{
				NotActuallyAnimating = true
			});
			Main.RegisterItemAnimation(4069, new DrawAnimationVertical(6, 4, false)
			{
				NotActuallyAnimating = true
			});
			Main.RegisterItemAnimation(4070, new DrawAnimationVertical(6, 4, false)
			{
				NotActuallyAnimating = true
			});
			for (int j = 0; j < ItemID.Sets.IsFood.Length; j++)
			{
				if (ItemID.Sets.IsFood[j])
				{
					Main.RegisterItemAnimation(j, new DrawAnimationVertical(int.MaxValue, 3, false));
				}
			}
		}

		// Token: 0x060003CD RID: 973 RVA: 0x000932E8 File Offset: 0x000914E8
		public static void AnglerQuestSwap()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			Main.anglerWhoFinishedToday.Clear();
			Main.anglerQuestFinished = false;
			bool flag = NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || Main.hardMode || NPC.downedSlimeKing || NPC.downedQueenBee;
			bool flag2 = true;
			int tryCount = 0;
			while (flag2)
			{
				if (++tryCount > 1000)
				{
					Main.anglerQuest = 0;
					Logging.tML.Warn("AnglerQuestSwap try count limit exceeded, a mod might have bad IsAnglerQuestAvailable logic");
					break;
				}
				flag2 = false;
				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2457 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2462 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2465 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2468 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2471 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2473 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2477 && !WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2480 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2483 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2484 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2485 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
				{
					flag2 = true;
				}
				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
			}
			NetMessage.SendAnglerQuest(-1);
		}

		// Token: 0x060003CE RID: 974 RVA: 0x000934A9 File Offset: 0x000916A9
		public void UpdateParticleSystems()
		{
			Main.ParticleSystem_World_OverPlayers.Update();
			Main.ParticleSystem_World_BehindPlayers.Update();
		}

		// Token: 0x060003CF RID: 975 RVA: 0x000934BF File Offset: 0x000916BF
		public static void TrySetPreparationState(Main.WorldPreparationState state)
		{
			if (state == Main.WorldPreparationState.ProcessingData)
			{
				Main._worldPreparationState = state;
			}
		}

		// Token: 0x060003D0 RID: 976 RVA: 0x000934CC File Offset: 0x000916CC
		public static void UpdateWorldPreparationState()
		{
			if (Main.netMode != 1)
			{
				Main._worldPreparationState = Main.WorldPreparationState.Ready;
				return;
			}
			if (Main.netMode == 1 && Main.gameMenu && Main._worldPreparationState == Main.WorldPreparationState.Ready)
			{
				Main._worldPreparationState = Main.WorldPreparationState.AwaitingData;
			}
			if (Main.netMode == 1 && Main._worldPreparationState == Main.WorldPreparationState.ProcessingData)
			{
				Main._worldPreparationState = Main.WorldPreparationState.Ready;
				Main.gameMenu = false;
				Main.FixUIScale();
				ChatHelper.ShowCachedMessages();
				ChatHelper.ClearDelayedMessagesCache();
			}
		}

		// Token: 0x060003D1 RID: 977 RVA: 0x00093530 File Offset: 0x00091730
		public static bool InSmartCursorHighlightArea(int x, int y, out bool actuallySelected)
		{
			actuallySelected = Main.SmartInteractTileCoordsSelected.Contains(new Point(x, y));
			return !Main.hideUI && Collision.InTileBounds(x, y, Main.TileInteractionLX, Main.TileInteractionLY, Main.TileInteractionHX, Main.TileInteractionHY) && Main.SmartInteractTileCoords.Contains(new Point(x, y));
		}

		// Token: 0x060003D2 RID: 978 RVA: 0x0009358C File Offset: 0x0009178C
		public static void LoadWorlds()
		{
			Main.WorldList.Clear();
			if (!Utils.TryCreatingDirectory(Main.WorldPath))
			{
				return;
			}
			string[] files = Directory.GetFiles(Main.WorldPath, "*.wld");
			int num = Math.Min(files.Length, Main.maxLoadWorld);
			if (Main.dedServ)
			{
				for (int i = 0; i < num; i++)
				{
					WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], false);
					if (allMetadata != null)
					{
						Main.WorldList.Add(allMetadata);
					}
					else
					{
						Main.WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
					}
				}
			}
			else
			{
				for (int j = 0; j < num; j++)
				{
					WorldFileData allMetadata2 = WorldFile.GetAllMetadata(files[j], false);
					if (allMetadata2 != null)
					{
						Main.WorldList.Add(allMetadata2);
					}
					else
					{
						Main.WorldList.Add(WorldFileData.FromInvalidWorld(files[j], false));
					}
				}
			}
			if (SocialAPI.Cloud != null)
			{
				foreach (string item in from path in SocialAPI.Cloud.GetFiles()
				where path.StartsWith(Main.CloudWorldPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".wld", StringComparison.CurrentCultureIgnoreCase)
				select path)
				{
					WorldFileData allMetadata3 = WorldFile.GetAllMetadata(item, true);
					if (allMetadata3 != null)
					{
						Main.WorldList.Add(allMetadata3);
					}
					else
					{
						Main.WorldList.Add(WorldFileData.FromInvalidWorld(item, true));
					}
				}
			}
			List<WorldFileData> worldList = Main.WorldList;
			Comparison<WorldFileData> comparison;
			if ((comparison = Main.<>O.<0>__WorldListSortMethod) == null)
			{
				comparison = (Main.<>O.<0>__WorldListSortMethod = new Comparison<WorldFileData>(Main.WorldListSortMethod));
			}
			worldList.Sort(comparison);
		}

		// Token: 0x060003D3 RID: 979 RVA: 0x00093718 File Offset: 0x00091918
		private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
		{
			if (data1 == null && data2 == null)
			{
				return 0;
			}
			if (data1 == null || data1.Name == null)
			{
				return 1;
			}
			if (data2 == null || data2.Name == null)
			{
				return -1;
			}
			return data1.Name.CompareTo(data2.Name);
		}

		// Token: 0x060003D4 RID: 980 RVA: 0x00093750 File Offset: 0x00091950
		public static void LoadPlayers()
		{
			Main.PlayerList.Clear();
			if (!Utils.TryCreatingDirectory(Main.PlayerPath))
			{
				return;
			}
			string[] files = Directory.GetFiles(Main.PlayerPath, "*.plr");
			int num = Math.Min(Main.maxLoadPlayer, files.Length);
			for (int i = 0; i < num; i++)
			{
				PlayerFileData fileData = Player.GetFileData(files[i], false);
				if (fileData != null)
				{
					Main.PlayerList.Add(fileData);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				foreach (string file in from path in SocialAPI.Cloud.GetFiles()
				where path.StartsWith(Main.CloudPlayerPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".plr", StringComparison.CurrentCultureIgnoreCase)
				select path)
				{
					PlayerFileData fileData2 = Player.GetFileData(file, true);
					if (fileData2 != null)
					{
						Main.PlayerList.Add(fileData2);
					}
				}
			}
			List<PlayerFileData> playerList = Main.PlayerList;
			Comparison<PlayerFileData> comparison;
			if ((comparison = Main.<>O.<1>__PlayerListSortMethod) == null)
			{
				comparison = (Main.<>O.<1>__PlayerListSortMethod = new Comparison<PlayerFileData>(Main.PlayerListSortMethod));
			}
			playerList.Sort(comparison);
		}

		// Token: 0x060003D5 RID: 981 RVA: 0x00093860 File Offset: 0x00091A60
		private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		// Token: 0x060003D6 RID: 982 RVA: 0x00093874 File Offset: 0x00091A74
		protected void OpenRecent()
		{
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "servers.dat"))
				{
					using (FileStream input = new FileStream(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "servers.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(input))
						{
							binaryReader.ReadInt32();
							for (int i = 0; i < 10; i++)
							{
								Main.recentWorld[i] = binaryReader.ReadString();
								Main.recentIP[i] = binaryReader.ReadString();
								Main.recentPort[i] = binaryReader.ReadInt32();
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x060003D7 RID: 983 RVA: 0x0009394C File Offset: 0x00091B4C
		public static void SaveRecent()
		{
			Utils.TryCreatingDirectory(Main.SavePath);
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "servers.dat"))
				{
					File.SetAttributes(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "servers.dat", FileAttributes.Normal);
				}
			}
			catch
			{
			}
			try
			{
				using (FileStream output = new FileStream(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "servers.dat", FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(output))
					{
						binaryWriter.Write(279);
						for (int i = 0; i < 10; i++)
						{
							binaryWriter.Write(Main.recentWorld[i]);
							binaryWriter.Write(Main.recentIP[i]);
							binaryWriter.Write(Main.recentPort[i]);
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x060003D8 RID: 984 RVA: 0x00093A64 File Offset: 0x00091C64
		public static bool SaveSettings()
		{
			Preferences configuration = Main.Configuration;
			configuration.Clear();
			configuration.Put("ResetDefaultUIScale", false);
			configuration.Put("SmartCursorToggle", Main.cSmartCursorModeIsToggleAndNotHold);
			configuration.Put("MapEnabled", Main.mapEnabled);
			configuration.Put("InvasionBarMode", Main.invasionProgressMode);
			configuration.Put("AutoSave", Main.autoSave);
			configuration.Put("AutoPause", Main.autoPause);
			configuration.Put("Language", Language.ActiveCulture.Name);
			configuration.Put("PlacementPreview", Main.placementPreview);
			configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
			configuration.Put("WorldRollbacksToKeep", Main.WorldRollingBackupsCountToKeep);
			configuration.Put("TeamNameplateDistance", Main.teamNamePlateDistance);
			configuration.Put("MultiplayerNPCSmoothingRange", Main.multiplayerNPCSmoothingRange);
			configuration.Put("VolumeSound", Main.soundVolume);
			configuration.Put("VolumeAmbient", Main.ambientVolume);
			configuration.Put("VolumeMusic", Main.musicVolume);
			configuration.Put("UnlockMusicSwap", Main.TOWMusicUnlocked);
			configuration.Put("UseExperimentalFeatures", Main.UseExperimentalFeatures);
			configuration.Put("KeyFavoriteModifier", Main.cFavoriteKey);
			configuration.Put("Fullscreen", Main.graphics.IsFullScreen);
			configuration.Put("WindowMaximized", Main.screenMaximized);
			configuration.Put("WindowBorderless", Main.screenBorderless);
			int num = Main.graphics.PreferredBackBufferWidth;
			int num2 = Main.graphics.PreferredBackBufferHeight;
			if (Main.IsInTheMiddleOfLoadingSettings)
			{
				if (Main.LastLoadedResolution.X != 0)
				{
					num = Main.LastLoadedResolution.X;
				}
				if (Main.LastLoadedResolution.Y != 0)
				{
					num2 = Main.LastLoadedResolution.Y;
				}
			}
			configuration.Put("DisplayWidth", num);
			configuration.Put("DisplayHeight", num2);
			configuration.Put("GraphicsQuality", Main.qaStyle);
			configuration.Put("BackgroundEnabled", Main.BackgroundEnabled);
			configuration.Put("FrameSkipMode", Main.FrameSkipMode);
			configuration.Put("LightingMode", Lighting.Mode);
			configuration.Put("BackgroundParallax", Main.bgScroll);
			configuration.Put("ShowItemText", Main.showItemText);
			configuration.Put("LastLaunchedVersion", 279);
			configuration.Put("ClientUUID", Main.clientUUID);
			configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			configuration.Put("SmartCursorHoldCanReleaseMidUse", Player.SmartCursorSettings.SmartCursorHoldCanReleaseMidUse);
			configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
			configuration.Put("DisableQuickTrash", ItemSlot.Options.DisableQuickTrash);
			configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
			configuration.Put("HidePasswords", Main.HidePassword);
			configuration.Put("ReverseUpDownForArmorSetBonuses", Main.ReversedUpDownArmorSetBonuses);
			configuration.Put("MouseShowBuildingGrid", Main.MouseShowBuildingGrid);
			configuration.Put("AllowUnfocusedInputOnGamepad", Main.AllowUnfocusedInputOnGamepad);
			configuration.Put("LockOnPriority", LockOnHelper.UseMode);
			configuration.Put("InvisibleCursorForGamepad", Main.InvisibleCursorForGamepad);
			configuration.Put("GamepadDisableInstructionsDisplay", Main.GamepadDisableInstructionsDisplay);
			configuration.Put("SettingsUnlock_WorldEvil", Main.SettingsUnlock_WorldEvil);
			configuration.Put("SettingsEnabled_MinersWobble", Main.SettingsEnabled_MinersWobble);
			configuration.Put("SettingBlockGamepadsEntirely", Main.SettingBlockGamepadsEntirely);
			configuration.Put("SettingsEnabled_OpaqueBoxBehindTooltips", Main.SettingsEnabled_OpaqueBoxBehindTooltips);
			configuration.Put("SettingDontScaleMainMenuUp", Main.SettingDontScaleMainMenuUp);
			configuration.Put("SettingsEnabled_TilesSwayInWind", Main.SettingsEnabled_TilesSwayInWind);
			configuration.Put("SettingsEnabled_AutoReuseAllItems", Main.SettingsEnabled_AutoReuseAllItems);
			configuration.Put("UseStormEffect", Main.UseStormEffects);
			configuration.Put("UseHeatDistortion", Main.UseHeatDistortion);
			configuration.Put("WaveQuality", Main.WaveQuality);
			configuration.Put("Support4K", Main.Support4K);
			configuration.Put("Support8K", Main.Support8K);
			configuration.Put("MouseColor", new Dictionary<string, byte>
			{
				{
					"R",
					Main.mouseColor.R
				},
				{
					"G",
					Main.mouseColor.G
				},
				{
					"B",
					Main.mouseColor.B
				}
			});
			configuration.Put("MouseBorderColor", new Dictionary<string, byte>
			{
				{
					"R",
					Main.MouseBorderColor.R
				},
				{
					"G",
					Main.MouseBorderColor.G
				},
				{
					"B",
					Main.MouseBorderColor.B
				},
				{
					"A",
					Main.MouseBorderColor.A
				}
			});
			configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
			configuration.Put("Zoom", Main.GameZoomTarget);
			configuration.Put("UIScale", Main._uiScaleWanted);
			configuration.Put("MapScale", Main.MapScale);
			configuration.Put("FlashIconForEvents", Enum.GetName(typeof(GameNotificationType), Main._flashNotificationType));
			configuration.Put("Display", Main._windowMover.ScreenDeviceName);
			configuration.Put("DisplayScreen", Main._windowMover.ScreenDeviceName);
			configuration.Put("ThrottleWhenInactive", Main.instance.InactiveSleepTime != TimeSpan.Zero);
			configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
			configuration.Put("HoverControlMode", Player.Settings.HoverControl);
			configuration.Put("WaterfallDrawLimit", Main.instance.waterfallManager.maxWaterfallCount);
			configuration.Put("DisableIntenseVisualEffects", Main.DisableIntenseVisualEffects);
			ModLoader.SaveConfiguration();
			return Main.Configuration.Save(true) && PlayerInput.Save();
		}

		// Token: 0x060003D9 RID: 985 RVA: 0x00094140 File Offset: 0x00092340
		protected void CheckBunny()
		{
			try
			{
				if (OperatingSystem.IsWindows())
				{
					RegistryKey currentUser = Registry.CurrentUser;
					currentUser = currentUser.CreateSubKey("Software\\Terraria");
					if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
					{
						Main.runningCollectorsEdition = true;
					}
				}
			}
			catch
			{
				Main.runningCollectorsEdition = false;
			}
		}

		// Token: 0x060003DA RID: 986 RVA: 0x000941B8 File Offset: 0x000923B8
		private static void TryPickingDefaultUIScale(float displayHeight)
		{
			if (Main.shouldSetDefaultUIScale)
			{
				Main.newDefaultUIScale = displayHeight / 1080f * 1.1f;
				Main.shouldSetDefaultUIScale = false;
				Main.Configuration.Put("UIScale", Main.newDefaultUIScale);
				Main.Configuration.Save(true);
			}
		}

		// Token: 0x060003DB RID: 987 RVA: 0x0009420C File Offset: 0x0009240C
		protected void LoadSettings()
		{
			if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "config.dat"))
			{
				this.OpenLegacySettings();
				if (Main.SaveSettings())
				{
					File.Delete(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "config.dat");
				}
				return;
			}
			Main.IsInTheMiddleOfLoadingSettings = true;
			Preferences configuration = Main.Configuration;
			configuration.Load();
			int currentValue = 0;
			configuration.Get<int>("LastLaunchedVersion", ref currentValue);
			bool flag = false;
			if (currentValue < 219)
			{
				flag = true;
			}
			if (!flag)
			{
				configuration.Get<bool>("ResetDefaultUIScale", ref Main.shouldSetDefaultUIScale);
				configuration.Get<bool>("Fullscreen", ref Main.startFullscreen);
				configuration.Get<bool>("WindowMaximized", ref Main.screenMaximized);
				configuration.Get<bool>("WindowBorderless", ref Main.screenBorderless);
			}
			Main.PendingBorderlessState = Main.screenBorderless;
			Main.screenBorderlessPendingResizes = (Main.screenBorderless ? 6 : 0);
			int currentValue2 = Main.graphics.PreferredBackBufferWidth;
			int currentValue3 = Main.graphics.PreferredBackBufferHeight;
			configuration.Get<int>("DisplayWidth", ref currentValue2);
			configuration.Get<int>("DisplayHeight", ref currentValue3);
			for (int i = 0; i < SDL.SDL_GetNumVideoDisplays(); i++)
			{
				int displayModeIndex = 0;
				SDL.SDL_DisplayMode sdlMode;
				while (SDL.SDL_GetDisplayMode(displayModeIndex++, i, ref sdlMode) == 0)
				{
					Main.maxScreenW = Math.Max(sdlMode.w, Main.maxScreenW);
					Main.maxScreenH = Math.Max(sdlMode.h, Main.maxScreenH);
				}
			}
			ILog tML = Logging.tML;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(25, 2);
			defaultInterpolatedStringHandler.AppendLiteral("Maximum Resolution is ");
			defaultInterpolatedStringHandler.AppendFormatted<int>(Main.maxScreenW);
			defaultInterpolatedStringHandler.AppendLiteral(" x ");
			defaultInterpolatedStringHandler.AppendFormatted<int>(Main.maxScreenH);
			tML.Info(defaultInterpolatedStringHandler.ToStringAndClear());
			Main._renderTargetMaxSize = Main.maxScreenW + 400 * Main.maxScreenW / 1920;
			Main.LastLoadedResolution = new Point(currentValue2, currentValue3);
			if (!Main.startFullscreen)
			{
				if (Main.PendingBorderlessState)
				{
					Main.screenBorderlessPendingResizes = 1;
				}
				Main.SetDisplayMode(currentValue2, currentValue3, false);
			}
			else
			{
				this.FullscreenStartup();
			}
			Main.TryPickingDefaultUIScale((float)Main.graphics.GraphicsDevice.Adapter.CurrentDisplayMode.Height);
			configuration.Get<bool>("SmartCursorToggle", ref Main.cSmartCursorModeIsToggleAndNotHold);
			configuration.Get<bool>("MapEnabled", ref Main.mapEnabled);
			configuration.Get<int>("InvasionBarMode", ref Main.invasionProgressMode);
			configuration.Get<bool>("AutoSave", ref Main.autoSave);
			configuration.Get<bool>("AutoPause", ref Main.autoPause);
			Main._needsLanguageSelect = !configuration.Contains("Language");
			string text = configuration.Get<string>("Language", "en-US");
			int result = 0;
			if (int.TryParse(text, out result))
			{
				LanguageManager.Instance.SetLanguage(result);
				this.SetTitle();
			}
			else
			{
				LanguageManager.Instance.SetLanguage(text);
				this.SetTitle();
			}
			configuration.Get<bool>("PlacementPreview", ref Main.placementPreview);
			configuration.Get<bool>("GoreVisualsAllowed", ref ChildSafety.Disabled);
			configuration.Get<bool>("DisableIntenseVisualEffects", ref Main.DisableIntenseVisualEffects);
			if (!flag)
			{
				configuration.Get<float>("VolumeSound", ref Main.soundVolume);
				configuration.Get<float>("VolumeAmbient", ref Main.ambientVolume);
				configuration.Get<float>("VolumeMusic", ref Main.musicVolume);
			}
			configuration.Get<string>("KeyFavoriteModifier", ref Main.cFavoriteKey);
			Keys result2;
			if (Enum.TryParse<Keys>(Main.cFavoriteKey, out result2))
			{
				Main.FavoriteKey = result2;
			}
			if (!flag)
			{
				configuration.Get<int>("GraphicsQuality", ref Main.qaStyle);
				configuration.Get<bool>("BackgroundEnabled", ref Main.BackgroundEnabled);
			}
			if (configuration.GetAllKeys().Contains("FrameSkip"))
			{
				bool currentValue4 = false;
				configuration.Get<bool>("FrameSkip", ref currentValue4);
				Main.terrariasFixedTiming = !currentValue4;
				if (Main.terrariasFixedTiming)
				{
					Main.FrameSkipMode = FrameSkipMode.Subtle;
				}
				else
				{
					Main.FrameSkipMode = FrameSkipMode.On;
				}
			}
			int currentValue5 = (int)Main.FrameSkipMode;
			configuration.Get<int>("FrameSkipMode", ref currentValue5);
			if (currentValue5 < 0)
			{
				currentValue5 = 0;
			}
			if (currentValue5 > 2)
			{
				currentValue5 = 2;
			}
			Main.FrameSkipMode = (FrameSkipMode)currentValue5;
			int currentValue6 = (int)Lighting.Mode;
			if (!flag)
			{
				configuration.Get<int>("LightingMode", ref currentValue6);
			}
			Lighting.Mode = (LightMode)currentValue6;
			configuration.Get<bool>("UnlockMusicSwap", ref Main.TOWMusicUnlocked);
			configuration.Get<float>("Parallax", ref Main.caveParallax);
			Main.bgScroll = (int)((1f - Main.caveParallax) * 500f);
			configuration.Get<int>("BackgroundParallax", ref Main.bgScroll);
			Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
			configuration.Get<bool>("ShowItemText", ref Main.showItemText);
			configuration.Get<string>("ClientUUID", ref Main.clientUUID);
			configuration.Get<bool>("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
			configuration.Get<bool>("UseSmartAxeAfterSmartPickaxe", ref Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			configuration.Get<bool>("SmartCursorHoldCanReleaseMidUse", ref Player.SmartCursorSettings.SmartCursorHoldCanReleaseMidUse);
			if (!flag)
			{
				configuration.Get<bool>("DisableLeftShiftTrashCan", ref ItemSlot.Options.DisableLeftShiftTrashCan);
			}
			if (!flag)
			{
				configuration.Get<bool>("DisableQuickTrash", ref ItemSlot.Options.DisableQuickTrash);
			}
			configuration.Get<bool>("HidePasswords", ref Main.HidePassword);
			configuration.Get<bool>("HighlightNewItems", ref ItemSlot.Options.HighlightNewItems);
			configuration.Get<bool>("ReverseUpDownForArmorSetBonuses", ref Main.ReversedUpDownArmorSetBonuses);
			configuration.Get<bool>("MouseShowBuildingGrid", ref Main.MouseShowBuildingGrid);
			configuration.Get<bool>("AllowUnfocusedInputOnGamepad", ref Main.AllowUnfocusedInputOnGamepad);
			configuration.Get<bool>("GamepadDisableInstructionsDisplay", ref Main.GamepadDisableInstructionsDisplay);
			configuration.Get<bool>("SettingDontScaleMainMenuUp", ref Main.SettingDontScaleMainMenuUp);
			configuration.Get<int>("WorldRollbacksToKeep", ref Main.WorldRollingBackupsCountToKeep);
			configuration.Get<int>("TeamNameplateDistance", ref Main.teamNamePlateDistance);
			if (currentValue < 230)
			{
				configuration.Get<int>("MultiplayerNPCSmoothingRange", ref Main.multiplayerNPCSmoothingRange);
			}
			configuration.Get<bool>("UseStormEffect", ref Main.UseStormEffects);
			configuration.Get<bool>("UseHeatDistortion", ref Main.UseHeatDistortion);
			configuration.Get<int>("WaveQuality", ref Main.WaveQuality);
			if (Main.WaveQuality > 3)
			{
				Main.WaveQuality = 3;
			}
			if (Main.WaveQuality < 0)
			{
				Main.WaveQuality = 0;
			}
			Dictionary<string, byte> currentValue7 = new Dictionary<string, byte>();
			configuration.Get<Dictionary<string, byte>>("MouseColor", ref currentValue7);
			byte value;
			if (currentValue7.TryGetValue("R", out value))
			{
				Main.mouseColor.R = value;
			}
			if (currentValue7.TryGetValue("G", out value))
			{
				Main.mouseColor.G = value;
			}
			if (currentValue7.TryGetValue("B", out value))
			{
				Main.mouseColor.B = value;
			}
			currentValue7.Clear();
			configuration.Get<Dictionary<string, byte>>("MouseBorderColor", ref currentValue7);
			if (currentValue7.TryGetValue("R", out value))
			{
				Main.MouseBorderColor.R = value;
			}
			if (currentValue7.TryGetValue("G", out value))
			{
				Main.MouseBorderColor.G = value;
			}
			if (currentValue7.TryGetValue("B", out value))
			{
				Main.MouseBorderColor.B = value;
			}
			if (currentValue7.TryGetValue("A", out value))
			{
				Main.MouseBorderColor.A = value;
			}
			configuration.Get<bool>("QuickLaunch", ref Main.SkipAssemblyLoad);
			if (!flag)
			{
				Main.GameZoomTarget = configuration.Get<float>("Zoom", 1f);
			}
			if (!flag)
			{
				Main.UIScale = configuration.Get<float>("UIScale", Platform.Get<IWindowService>().GetScaling());
			}
			if (Main.newDefaultUIScale > 0f)
			{
				Main.UIScale = Main.newDefaultUIScale;
				Main.newDefaultUIScale = 0f;
			}
			Main.MapScale = MathHelper.Clamp(configuration.Get<float>("MapScale", Main.InitialMapScale), 0.5f, 1f);
			int currentValue8 = -1;
			configuration.Get<int>("LockOnPriority", ref currentValue8);
			if (currentValue8 < 0)
			{
				currentValue8 = 0;
			}
			if (currentValue8 > 2)
			{
				currentValue8 = 2;
			}
			LockOnHelper.UseMode = (LockOnHelper.LockOnMode)currentValue8;
			if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
			{
				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
			}
			configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
			GameNotificationType result3;
			if (Enum.TryParse<GameNotificationType>(configuration.Get<string>("FlashIconForEvents", "All"), out result3))
			{
				Main._flashNotificationType = result3;
			}
			if (!flag)
			{
				string screenDeviceName = configuration.Get<string>("DisplayScreen", "");
				Main._windowMover.TryMovingToScreen(screenDeviceName);
				base.InactiveSleepTime = TimeSpan.FromMilliseconds((double)(configuration.Get<bool>("ThrottleWhenInactive", true) ? 20 : 0));
			}
			if (!flag)
			{
				configuration.Get<bool>("Support4K", ref Main.Support4K);
			}
			configuration.Get<bool>("UseExperimentalFeatures", ref Main.UseExperimentalFeatures);
			configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
			configuration.Get<bool>("SettingsEnabled_MinersWobble", ref Main.SettingsEnabled_MinersWobble);
			configuration.Get<bool>("SettingBlockGamepadsEntirely", ref Main.SettingBlockGamepadsEntirely);
			configuration.Get<bool>("SettingsEnabled_OpaqueBoxBehindTooltips", ref Main.SettingsEnabled_OpaqueBoxBehindTooltips);
			configuration.Get<bool>("SettingsEnabled_TilesSwayInWind", ref Main.SettingsEnabled_TilesSwayInWind);
			configuration.Get<bool>("SettingsEnabled_AutoReuseAllItems", ref Main.SettingsEnabled_AutoReuseAllItems);
			int currentValue9 = (int)DoorOpeningHelper.PreferenceSettings;
			configuration.Get<int>("DoorAutoOpeningMode", ref currentValue9);
			DoorOpeningHelper.PreferenceSettings = (DoorOpeningHelper.DoorAutoOpeningPreference)currentValue9;
			int currentValue10 = (int)Player.Settings.HoverControl;
			configuration.Get<int>("HoverControlMode", ref currentValue10);
			Player.Settings.HoverControl = (Player.Settings.HoverControlMode)currentValue10;
			if (currentValue <= 147)
			{
				Main.terrariasFixedTiming = !Main.terrariasFixedTiming;
			}
			if (currentValue <= 162)
			{
				bool currentValue11 = false;
				uint currentValue12 = 0U;
				configuration.Get<bool>("ThickMouseEdges", ref currentValue11);
				if (currentValue11)
				{
					configuration.Get<uint>("ThickMouseEdgesPackedColor", ref currentValue12);
					Main.MouseBorderColor.PackedValue = currentValue12;
					Main.mouseColor.R = configuration.Get<byte>("MouseColorR", Main.mouseColor.R);
					Main.mouseColor.G = configuration.Get<byte>("MouseColorG", Main.mouseColor.G);
					Main.mouseColor.B = configuration.Get<byte>("MouseColorB", Main.mouseColor.B);
				}
			}
			if (currentValue <= 162)
			{
				configuration.Get<string>("KeyUp", ref Main.cUp);
				configuration.Get<string>("KeyDown", ref Main.cDown);
				configuration.Get<string>("KeyLeft", ref Main.cLeft);
				configuration.Get<string>("KeyRight", ref Main.cRight);
				configuration.Get<string>("KeyJump", ref Main.cJump);
				configuration.Get<string>("KeyThrowItem", ref Main.cThrowItem);
				configuration.Get<string>("KeyInventory", ref Main.cInv);
				configuration.Get<string>("KeyQuickHeal", ref Main.cHeal);
				configuration.Get<string>("KeyQuickMana", ref Main.cMana);
				configuration.Get<string>("KeyQuickBuff", ref Main.cBuff);
				configuration.Get<string>("KeyUseHook", ref Main.cHook);
				configuration.Get<string>("KeyAutoSelect", ref Main.cTorch);
				configuration.Get<string>("KeySmartCursor", ref Main.cSmart);
				configuration.Get<string>("KeyMount", ref Main.cMount);
				configuration.Get<string>("KeyMapStyle", ref Main.cMapStyle);
				configuration.Get<string>("KeyFullscreenMap", ref Main.cMapFull);
				configuration.Get<string>("KeyMapZoomIn", ref Main.cMapZoomIn);
				configuration.Get<string>("KeyMapZoomOut", ref Main.cMapZoomOut);
				configuration.Get<string>("KeyMapAlphaUp", ref Main.cMapAlphaUp);
				configuration.Get<string>("KeyMapAlphaDown", ref Main.cMapAlphaDown);
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Up"] = new List<string>
				{
					Main.cUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Down"] = new List<string>
				{
					Main.cDown
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Left"] = new List<string>
				{
					Main.cLeft
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Right"] = new List<string>
				{
					Main.cRight
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Jump"] = new List<string>
				{
					Main.cJump
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Throw"] = new List<string>
				{
					Main.cThrowItem
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Inventory"] = new List<string>
				{
					Main.cInv
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickHeal"] = new List<string>
				{
					Main.cHeal
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMana"] = new List<string>
				{
					Main.cMana
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickBuff"] = new List<string>
				{
					Main.cBuff
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Grapple"] = new List<string>
				{
					Main.cHook
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartSelect"] = new List<string>
				{
					Main.cTorch
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartCursor"] = new List<string>
				{
					Main.cSmart
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMount"] = new List<string>
				{
					Main.cMount
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapStyle"] = new List<string>
				{
					Main.cMapStyle
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapFull"] = new List<string>
				{
					Main.cMapFull
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomIn"] = new List<string>
				{
					Main.cMapZoomIn
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomOut"] = new List<string>
				{
					Main.cMapZoomOut
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaUp"] = new List<string>
				{
					Main.cMapAlphaUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaDown"] = new List<string>
				{
					Main.cMapAlphaDown
				};
			}
			ModLoader.LoadConfiguration();
			PlayerInput.Load();
			if (currentValue < 165)
			{
				try
				{
					PlayerInput.ManageVersion_1_3();
				}
				catch (Exception)
				{
				}
			}
			Main.mouseColorSlider.SetHSL(Main.mouseColor);
			Main.mouseBorderColorSlider.SetHSL(Main.MouseBorderColor);
			Main.mouseBorderColorSlider.Alpha = (float)Main.MouseBorderColor.A / 255f;
			DateTime utcNow = DateTime.UtcNow;
			if (BuildInfo.IsPreview && ModLoader.LastPreviewFreezeNotificationSeen != BuildInfo.tMLVersion.MajorMinor())
			{
				ModLoader.PreviewFreezeNotification = true;
			}
			if (currentValue != 279 || ModLoader.LastLaunchedTModLoaderVersion != BuildInfo.tMLVersion)
			{
				ModLoader.MigrateSettings();
				Main.SaveSettings();
			}
			Main.IsInTheMiddleOfLoadingSettings = false;
		}

		// Token: 0x060003DC RID: 988 RVA: 0x00095108 File Offset: 0x00093308
		protected void OpenLegacySettings()
		{
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "config.dat"))
				{
					using (FileStream input = new FileStream(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "config.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(input))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 68)
							{
								if (num >= 67)
								{
									Main.clientUUID = binaryReader.ReadString();
								}
								bool flag = binaryReader.ReadBoolean();
								Main.mouseColor.R = binaryReader.ReadByte();
								Main.mouseColor.G = binaryReader.ReadByte();
								Main.mouseColor.B = binaryReader.ReadByte();
								Main.soundVolume = binaryReader.ReadSingle();
								if (num >= 90)
								{
									Main.ambientVolume = binaryReader.ReadSingle();
								}
								Main.musicVolume = binaryReader.ReadSingle();
								Main.cUp = binaryReader.ReadString();
								Main.cDown = binaryReader.ReadString();
								Main.cLeft = binaryReader.ReadString();
								Main.cRight = binaryReader.ReadString();
								Main.cJump = binaryReader.ReadString();
								Main.cThrowItem = binaryReader.ReadString();
								if (num >= 1)
								{
									Main.cInv = binaryReader.ReadString();
								}
								if (num >= 12)
								{
									Main.cHeal = binaryReader.ReadString();
									Main.cMana = binaryReader.ReadString();
									Main.cBuff = binaryReader.ReadString();
								}
								if (num >= 13)
								{
									Main.cHook = binaryReader.ReadString();
								}
								Main.caveParallax = binaryReader.ReadSingle();
								if (num >= 2)
								{
									Main.terrariasFixedTiming = binaryReader.ReadBoolean();
								}
								if (num >= 91)
								{
									binaryReader.ReadBoolean();
								}
								if (num >= 4)
								{
									int width = binaryReader.ReadInt32();
									int height = binaryReader.ReadInt32();
									Main.SetDisplayMode(width, height, flag);
								}
								if (num >= 8)
								{
									Main.autoSave = binaryReader.ReadBoolean();
								}
								if (num >= 9)
								{
									Main.autoPause = binaryReader.ReadBoolean();
								}
								if (num >= 19)
								{
									Main.showItemText = binaryReader.ReadBoolean();
								}
								if (num >= 30)
								{
									Main.cTorch = binaryReader.ReadString();
									Lighting.Mode = (LightMode)binaryReader.ReadByte();
									Main.qaStyle = (int)binaryReader.ReadByte();
								}
								if (num >= 37)
								{
									Main.BackgroundEnabled = binaryReader.ReadBoolean();
								}
								if (num >= 39)
								{
									byte b = binaryReader.ReadByte();
									Main._needsLanguageSelect = (b == 0);
									LanguageManager.Instance.SetLanguage((int)b);
								}
								if (num >= 46)
								{
									Main.mapEnabled = binaryReader.ReadBoolean();
									Main.cMapStyle = binaryReader.ReadString();
									Main.cMapFull = binaryReader.ReadString();
									Main.cMapZoomIn = binaryReader.ReadString();
									Main.cMapZoomOut = binaryReader.ReadString();
									Main.cMapAlphaUp = binaryReader.ReadString();
									Main.cMapAlphaDown = binaryReader.ReadString();
								}
								if (num >= 89)
								{
									binaryReader.ReadInt32();
								}
								if (num >= 100)
								{
									Main.cSmart = binaryReader.ReadString();
									Main.cSmartCursorModeIsToggleAndNotHold = binaryReader.ReadBoolean();
								}
								if (num >= 107)
								{
									Main.invasionProgressMode = (int)binaryReader.ReadByte();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								Main.SetFullScreen(flag);
							}
							binaryReader.Close();
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x060003DD RID: 989 RVA: 0x0009544C File Offset: 0x0009364C
		private static void ErasePlayer(int i)
		{
			try
			{
				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave, false);
				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave, false);
			}
			catch
			{
			}
			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
			try
			{
				string text = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
				if (text.Substring(text.Length - 1) != "." && text.Substring(text.Length - 1) != "\\" && Directory.Exists(text))
				{
					Directory.Delete(text, true);
				}
				Main.LoadPlayers();
			}
			catch
			{
			}
		}

		// Token: 0x060003DE RID: 990 RVA: 0x00095570 File Offset: 0x00093770
		private static void EraseWorld(int i)
		{
			try
			{
				if (!Main.WorldList[i].IsCloudSave)
				{
					Platform.Get<IPathService>().MoveToRecycleBin(Main.WorldList[i].Path);
					Platform.Get<IPathService>().MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
					for (int j = 2; j <= 9; j++)
					{
						Platform.Get<IPathService>().MoveToRecycleBin(Main.WorldList[i].Path + ".bak" + j.ToString());
					}
				}
				else if (SocialAPI.Cloud != null)
				{
					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
				}
				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
				Main.LoadWorlds();
			}
			catch
			{
			}
		}

		// Token: 0x060003DF RID: 991 RVA: 0x0009566C File Offset: 0x0009386C
		public static string GetPlayerPathFromName(string playerName, bool cloudSave)
		{
			string invalidFilePattern = "^(con|prn|aux|nul|com[1-9]|lpt[1-9])$";
			if (Regex.IsMatch(playerName, invalidFilePattern, RegexOptions.IgnoreCase))
			{
				playerName += "_";
			}
			char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
			string text = "";
			playerName = playerName.Replace(".", "_");
			playerName = playerName.Replace("*", "_");
			foreach (char c in playerName)
			{
				text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-').ToString();
			}
			string text2 = cloudSave ? Main.CloudPlayerPath : Main.PlayerPath;
			if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar.ToString() + text + ".plr", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + ".plr", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(string.Concat(new string[]
				{
					text2,
					Path.DirectorySeparatorChar.ToString(),
					text,
					num.ToString(),
					".plr"
				}), cloudSave))
				{
					num++;
				}
				text += num.ToString();
			}
			return text2 + Path.DirectorySeparatorChar.ToString() + text + ".plr";
		}

		// Token: 0x060003E0 RID: 992 RVA: 0x000957E0 File Offset: 0x000939E0
		public static string GetWorldPathFromName(string worldName, bool cloudSave)
		{
			string invalidFilePattern = "^(con|prn|aux|nul|com[1-9]|lpt[1-9])$";
			if (Regex.IsMatch(worldName, invalidFilePattern, RegexOptions.IgnoreCase))
			{
				worldName += "_";
			}
			char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
			string text = "";
			foreach (char c in worldName)
			{
				text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-').ToString();
			}
			text = text.Replace(".", "_");
			text = text.Replace("*", "_");
			string text2 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
			if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar.ToString() + text + ".wld", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + ".wld", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(string.Concat(new string[]
				{
					text2,
					Path.DirectorySeparatorChar.ToString(),
					text,
					num.ToString(),
					".wld"
				}), cloudSave))
				{
					num++;
				}
				text += num.ToString();
			}
			return text2 + Path.DirectorySeparatorChar.ToString() + text + ".wld";
		}

		// Token: 0x060003E1 RID: 993 RVA: 0x00095952 File Offset: 0x00093B52
		public void setServerWorldRollbacks(string rollBacksToKeep)
		{
			Main.WorldRollingBackupsCountToKeep = Convert.ToInt32(rollBacksToKeep);
		}

		// Token: 0x060003E2 RID: 994 RVA: 0x00095960 File Offset: 0x00093B60
		public void autoCreate(string worldSize)
		{
			if (worldSize == "0")
			{
				Main.autoGen = false;
				return;
			}
			if (worldSize == "1")
			{
				Main.maxTilesX = 4200;
				Main.maxTilesY = 1200;
				Main.autoGen = true;
				return;
			}
			if (worldSize == "2")
			{
				Main.maxTilesX = 6400;
				Main.maxTilesY = 1800;
				Main.autoGen = true;
				return;
			}
			if (!(worldSize == "3"))
			{
				return;
			}
			Main.maxTilesX = 8400;
			Main.maxTilesY = 2400;
			Main.autoGen = true;
		}

		// Token: 0x060003E3 RID: 995 RVA: 0x000959F9 File Offset: 0x00093BF9
		public void NewMOTD(string newMOTD)
		{
			Main.motd = newMOTD;
		}

		// Token: 0x060003E4 RID: 996 RVA: 0x00095A01 File Offset: 0x00093C01
		public static string ConvertToSafeArgument(string arg)
		{
			return Uri.EscapeDataString(arg);
		}

		// Token: 0x060003E5 RID: 997 RVA: 0x00095A09 File Offset: 0x00093C09
		public static string ConvertFromSafeArgument(string arg)
		{
			return Uri.UnescapeDataString(arg);
		}

		// Token: 0x060003E6 RID: 998 RVA: 0x00095A14 File Offset: 0x00093C14
		public void LoadDedConfig(string configPath)
		{
			if (!File.Exists(configPath))
			{
				return;
			}
			using (StreamReader streamReader = new StreamReader(configPath))
			{
				string text;
				while ((text = streamReader.ReadLine()) != null)
				{
					try
					{
						if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
						{
							string path = text.Substring(6);
							try
							{
								string text3 = Platform.Get<IPathService>().ExpandPathVariables(path);
								new FileInfo(text3);
								Main.autoGenFileLocation = text3;
								Main.ActiveWorldFileData = WorldFile.GetAllMetadata(text3, false);
								if (Main.ActiveWorldFileData == null)
								{
									Main.ActiveWorldFileData = new WorldFileData();
								}
							}
							catch
							{
								Main.ActiveWorldFileData = new WorldFileData();
							}
						}
						if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
						{
							string value = text.Substring(5);
							try
							{
								Netplay.ListenPort = Convert.ToInt32(value);
							}
							catch
							{
							}
						}
						if (text.Length > 21 && text.Substring(0, 21).ToLower() == "worldrollbackstokeep=")
						{
							string value2 = text.Substring(21);
							try
							{
								Main.WorldRollingBackupsCountToKeep = Convert.ToInt32(value2);
							}
							catch
							{
							}
						}
						if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
						{
							string value3 = text.Substring(11);
							try
							{
								int num = Convert.ToInt32(value3);
								if (num <= 255 && num >= 1)
								{
									this.SetNetPlayers(num);
								}
							}
							catch
							{
							}
						}
						if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
						{
							string value4 = text.Substring(9);
							try
							{
								int num2 = Convert.ToInt32(value4);
								if (num2 >= 0 && num2 <= 5)
								{
									Process currentProcess = Process.GetCurrentProcess();
									switch (num2)
									{
									case 0:
										currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
										break;
									case 1:
										currentProcess.PriorityClass = ProcessPriorityClass.High;
										break;
									case 2:
										currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
										break;
									case 3:
										currentProcess.PriorityClass = ProcessPriorityClass.Normal;
										break;
									case 4:
										currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
										break;
									case 5:
										currentProcess.PriorityClass = ProcessPriorityClass.Idle;
										break;
									}
								}
							}
							catch
							{
							}
						}
						if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
						{
							Netplay.ServerPassword = Main.ConvertFromSafeArgument(text.Substring(9));
						}
						if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
						{
							Main.motd = text.Substring(5);
						}
						if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
						{
							string value5 = text.Substring(5);
							LanguageManager.Instance.SetLanguage(Convert.ToInt32(value5));
						}
						if (text.Length > 9 && text.Substring(0, 9).ToLower() == "language=")
						{
							string language = text.Substring(9);
							LanguageManager.Instance.SetLanguage(language);
						}
						if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
						{
							string path2 = text.Substring(10);
							Main.WorldPath = Platform.Get<IPathService>().ExpandPathVariables(path2);
						}
						if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
						{
							Main.worldName = text.Substring(10);
						}
						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
						{
							ModOrganizer.modPath = text.Substring(8);
						}
						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
						{
							ModOrganizer.commandLineModPack = text.Substring(8);
						}
						if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
						{
							Main.AutogenSeedName = text.Substring(5);
						}
						if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
						{
							string path3 = text.Substring(8);
							Netplay.BanFilePath = Platform.Get<IPathService>().ExpandPathVariables(path3);
						}
						if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
						{
							string a = text.Substring(11);
							if (!(a == "0"))
							{
								if (!(a == "1"))
								{
									if (!(a == "2"))
									{
										if (a == "3")
										{
											Main.GameMode = 3;
										}
									}
									else
									{
										Main.GameMode = 2;
									}
								}
								else
								{
									Main.GameMode = 1;
								}
							}
							else
							{
								Main.GameMode = 0;
							}
						}
						if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
						{
							string worldSize = text.Substring(11);
							this.autoCreate(worldSize);
						}
						if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=" && text.Substring(7) == "1")
						{
							Netplay.SpamCheck = true;
						}
						if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=" && text.Substring(5) != "1")
						{
							Netplay.UseUPNP = false;
						}
						string text2 = "slowliquids=";
						if (text.Length > text2.Length && text.Substring(0, text2.Length).ToLower() == text2 && text.Substring(text2.Length) == "1")
						{
							Main.Setting_UseReducedMaxLiquids = true;
						}
						if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
						{
							string value6 = text.Substring(10);
							try
							{
								Main.npcStreamSpeed = Convert.ToInt32(value6);
							}
							catch
							{
							}
						}
						CreativePowerManager.TryListingPermissionsFrom(text);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x060003E7 RID: 999 RVA: 0x000960FC File Offset: 0x000942FC
		public void SetNetPlayers(int mPlayers)
		{
			Main.maxNetPlayers = mPlayers;
		}

		// Token: 0x060003E8 RID: 1000 RVA: 0x00096104 File Offset: 0x00094304
		public void SetWorld(string world, bool cloud)
		{
			Main.ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
			if (Main.ActiveWorldFileData == null)
			{
				Main.ActiveWorldFileData = new WorldFileData();
			}
		}

		// Token: 0x060003E9 RID: 1001 RVA: 0x00096123 File Offset: 0x00094323
		public void SetWorldName(string world)
		{
			Main.worldName = world;
		}

		// Token: 0x060003EA RID: 1002 RVA: 0x0009612B File Offset: 0x0009432B
		public void EnableAutoShutdown()
		{
			Main.autoShutdown = true;
		}

		// Token: 0x060003EB RID: 1003
		[DllImport("user32.dll")]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		// Token: 0x060003EC RID: 1004
		[DllImport("user32.dll")]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

		// Token: 0x060003ED RID: 1005 RVA: 0x00096133 File Offset: 0x00094333
		public void AutoPass()
		{
			Main.autoPass = true;
		}

		// Token: 0x060003EE RID: 1006 RVA: 0x0009613C File Offset: 0x0009433C
		public void AutoJoin(string IP, string player = null)
		{
			Main.defaultIP = IP;
			Main.getIP = IP;
			Netplay.SetRemoteIP(Main.defaultIP);
			Func<PlayerFileData, bool> <>9__1;
			ModLoader.OnSuccessfulLoad = (Action)Delegate.Combine(ModLoader.OnSuccessfulLoad, new Action(delegate()
			{
				PlayerFileData fileData2 = null;
				if (player != null)
				{
					if (File.Exists(player))
					{
						fileData2 = Player.GetFileData(player, false);
					}
					else
					{
						Main.LoadPlayers();
						IEnumerable<PlayerFileData> playerList = Main.PlayerList;
						Func<PlayerFileData, bool> predicate;
						if ((predicate = <>9__1) == null)
						{
							predicate = (<>9__1 = ((PlayerFileData p) => p.Name == player));
						}
						fileData2 = playerList.FirstOrDefault(predicate);
					}
				}
				if (fileData2 != null)
				{
					fileData2.SetAsActive();
					Main.menuMode = 10;
					Netplay.StartTcpClient();
					return;
				}
				Main.OpenPlayerSelect(delegate(PlayerFileData fileData)
				{
					fileData.SetAsActive();
					Main.menuMode = 10;
					Netplay.StartTcpClient();
				});
			}));
		}

		// Token: 0x060003EF RID: 1007 RVA: 0x0009618D File Offset: 0x0009438D
		public void AutoHost()
		{
			ModLoader.OnSuccessfulLoad = (Action)Delegate.Combine(ModLoader.OnSuccessfulLoad, new Action(delegate()
			{
				Main.menuMultiplayer = true;
				Main.menuServer = true;
				Main.ClearPendingPlayerSelectCallbacks();
				Main.menuMode = 1;
			}));
		}

		// Token: 0x060003F0 RID: 1008 RVA: 0x000961C2 File Offset: 0x000943C2
		public void loadLib(string path)
		{
			Main.libPath = path;
			Main.LoadLibrary(Main.libPath);
		}

		// Token: 0x060003F1 RID: 1009 RVA: 0x000961D5 File Offset: 0x000943D5
		public void NeverSleep()
		{
			if (Platform.IsWindows)
			{
				this.previousExecutionState = Main.NativeMethods.SetThreadExecutionState(2147483649U);
			}
		}

		// Token: 0x060003F2 RID: 1010 RVA: 0x000961EE File Offset: 0x000943EE
		public void YouCanSleepNow()
		{
			if (Platform.IsWindows && this.previousExecutionState != 0U)
			{
				Main.NativeMethods.SetThreadExecutionState(this.previousExecutionState);
			}
		}

		// Token: 0x060003F3 RID: 1011 RVA: 0x0009620C File Offset: 0x0009440C
		public void DedServ()
		{
			this.NeverSleep();
			Main.rand = new UnifiedRandom();
			if (Main.autoShutdown && !Main.showServerConsole)
			{
				string lpWindowName = Console.Title = "terraria" + Main.rand.Next(int.MaxValue).ToString();
				if (Platform.IsWindows)
				{
					IntPtr intPtr = Main.FindWindow(null, lpWindowName);
					if (intPtr != IntPtr.Zero)
					{
						Main.ShowWindow(intPtr, 0);
					}
				}
			}
			else
			{
				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.versionedName;
			}
			Main.dedServ = true;
			Main.showSplash = false;
			this.Initialize();
			bool reloadMods;
			do
			{
				ModLoader.Reload();
				this.DedServ_PostModLoad(out reloadMods);
			}
			while (reloadMods);
		}

		// Token: 0x060003F4 RID: 1012 RVA: 0x000962C0 File Offset: 0x000944C0
		private void DedServ_PostModLoad(out bool reloadMods)
		{
			reloadMods = false;
			while (Main.worldPathName == null || Main.worldPathName == "")
			{
				bool flag = true;
				while (flag)
				{
					Main.LoadWorlds();
					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
					Console.WriteLine("");
					for (int i = 0; i < Main.WorldList.Count; i++)
					{
						Console.WriteLine((i + 1).ToString() + "\t\t" + Main.WorldList[i].Name);
					}
					string textValue = Language.GetTextValue("CLI.NewWorld_Command");
					string textValue2 = Language.GetTextValue("CLI.DeleteWorld_Example");
					int num = (Math.Max(Main.newWorldName.Length, textValue2.Length) + 1) / 8 + 1;
					textValue = textValue + new string('\t', num - textValue.Length / 8) + Language.GetTextValue("CLI.NewWorld_Description");
					textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
					Console.WriteLine(textValue);
					Console.WriteLine(textValue2);
					Console.WriteLine("m\t\t" + Language.GetTextValue("tModLoader.ModsModsList"));
					Console.WriteLine("");
					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
					string text2 = Main.ReadLineInput();
					if (text2 == null)
					{
						text2 = "";
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					if (text2.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
					{
						try
						{
							int length = Language.GetTextValue("CLI.DeleteWorld_Command").Length;
							int num2 = Convert.ToInt32(text2.Substring(length + 1)) - 1;
							if (num2 < Main.WorldList.Count)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.DeleteConfirmation", Main.WorldList[num2].Name));
								Console.Write("({0}/{1}): ", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo"));
								if (Main.ReadLineInput().ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower())
								{
									Main.EraseWorld(num2);
								}
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
							continue;
						}
						catch
						{
							continue;
						}
					}
					if (text2 == "n" || text2 == "N")
					{
						bool flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.WorldSizeSmall"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.WorldSizeMedium"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.WorldSizeLarge"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseSize"));
							string value = Main.ReadLineInput();
							try
							{
								switch (Convert.ToInt32(value))
								{
								case 1:
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									flag2 = false;
									break;
								case 2:
									Main.maxTilesX = 6400;
									Main.maxTilesY = 1800;
									flag2 = false;
									break;
								case 3:
									Main.maxTilesX = 8400;
									Main.maxTilesY = 2400;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.Normal"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.Expert"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.Master"));
							Console.WriteLine("4\t" + Language.GetTextValue("UI.Creative"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseDifficulty"));
							string value2 = Main.ReadLineInput();
							try
							{
								switch (Convert.ToInt32(value2))
								{
								case 1:
									Main.GameMode = 0;
									flag2 = false;
									break;
								case 2:
									Main.GameMode = 1;
									flag2 = false;
									break;
								case 3:
									Main.GameMode = 2;
									flag2 = false;
									break;
								case 4:
									Main.GameMode = 3;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("CLI.Random"));
							Console.WriteLine("2\t" + Language.GetTextValue("CLI.Corrupt"));
							Console.WriteLine("3\t" + Language.GetTextValue("CLI.Crimson"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseEvil"));
							string value3 = Main.ReadLineInput();
							try
							{
								switch (Convert.ToInt32(value3))
								{
								case 1:
									WorldGen.WorldGenParam_Evil = -1;
									flag2 = false;
									break;
								case 2:
									WorldGen.WorldGenParam_Evil = 0;
									flag2 = false;
									break;
								case 3:
									WorldGen.WorldGenParam_Evil = 1;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
						while (flag2)
						{
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterWorldName"));
							Main.newWorldName = Main.ReadLineInput();
							if (Main.newWorldName != null && Main.newWorldName != "" && Main.newWorldName != " ")
							{
								if (Main.newWorldName.Length >= 27)
								{
									Console.WriteLine("");
									Console.WriteLine(Language.GetTextValue("CLI.WorldNameLengthTooLong", 26));
									continue;
								}
								flag2 = false;
								try
								{
									Console.Clear();
									continue;
								}
								catch
								{
									continue;
								}
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
						}
						string text3 = "";
						flag2 = true;
						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
						while (flag2)
						{
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterSeed"));
							text3 = Main.ReadLineInput();
							if (text3 != null)
							{
								if (text3.Length >= 40)
								{
									Console.WriteLine("");
									Console.WriteLine(Language.GetTextValue("CLI.SeedLengthTooLong", 39));
									continue;
								}
								flag2 = false;
								try
								{
									Console.Clear();
									continue;
								}
								catch
								{
									continue;
								}
							}
							text3 = "";
						}
						Main.worldName = Main.newWorldName;
						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.GameMode);
						text3 = text3.Trim();
						if (text3.Length == 0)
						{
							Main.ActiveWorldFileData.SetSeedToRandom();
						}
						else
						{
							Main.ActiveWorldFileData.SetSeed(text3);
						}
						UIWorldCreation.ProcessSpecialWorldSeeds(text3);
						Main.menuMode = 10;
						GenerationProgress generationProgress = new GenerationProgress();
						Task task = WorldGen.CreateNewWorld(generationProgress);
						flag2 = false;
						while (Main.menuMode == 10)
						{
							if (Main.oldStatusText != Main.statusText && !WorldGen.drunkWorldGen)
							{
								Main.oldStatusText = Main.statusText;
								Console.WriteLine(Main.statusText);
							}
						}
						try
						{
							Console.Clear();
							goto IL_896;
						}
						catch
						{
							goto IL_896;
						}
						goto IL_7EF;
						IL_896:
						if (task.IsCompleted)
						{
							continue;
						}
						IL_7EF:
						Main.statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
						if (Main.oldStatusText != Main.statusText)
						{
							Main.oldStatusText = Main.statusText;
							string value4 = Main.statusText;
							if (WorldGen.notTheBees && !WorldGen.getGoodWorldGen)
							{
								value4 = string.Format("{0:0.0%} - " + Language.GetTextValue("UI.WorldGenEasterEgg_GeneratingBees") + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
							}
							Console.WriteLine(value4);
							goto IL_896;
						}
						goto IL_896;
					}
					else if (text2 == "m" || text2 == "M")
					{
						Interface.ServerModMenu(out reloadMods);
						if (reloadMods)
						{
							return;
						}
					}
					else
					{
						try
						{
							int num3 = Convert.ToInt32(text2);
							num3--;
							if (num3 >= 0 && num3 < Main.WorldList.Count)
							{
								bool flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialMaxPlayers"));
									string text4 = Main.ReadLineInput();
									try
									{
										if (text4 == "")
										{
											text4 = "16";
										}
										int num4 = Convert.ToInt32(text4);
										if (num4 <= 255 && num4 >= 1)
										{
											this.SetNetPlayers(num4);
											flag3 = false;
										}
										flag3 = false;
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialPort"));
									string text5 = Main.ReadLineInput();
									try
									{
										if (text5 == "")
										{
											text5 = "7777";
										}
										int num5 = Convert.ToInt32(text5);
										if (num5 <= 65535)
										{
											Netplay.ListenPort = num5;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.AutomaticPortForward", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
									string text6 = Main.ReadLineInput();
									try
									{
										if (text6 == "" || text6.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.Yes").ToLower())
										{
											Netplay.UseUPNP = true;
											flag3 = false;
										}
										else if (text6.ToLower() == Language.GetTextValue("CLI.ShortNo").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.No").ToLower())
										{
											Netplay.UseUPNP = false;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.versionedName);
								Console.WriteLine("");
								Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
								Netplay.ServerPassword = Main.ReadLineInput();
								Main.ActiveWorldFileData = Main.WorldList[num3];
								flag = false;
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			Task task2 = WorldGen.serverLoadWorld();
			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
			Console.WriteLine("");
			while (!task2.IsCompleted)
			{
				if (WorldFile.LastThrownLoadException == null)
				{
					if (Main.AutogenProgress.TotalProgress != 0.0)
					{
						Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
					}
					if (Main.oldStatusText != Main.statusText)
					{
						Main.oldStatusText = Main.statusText;
						Console.WriteLine(Main.statusText);
					}
				}
			}
			try
			{
				if (WorldFile.LastThrownLoadException == null)
				{
					Console.Clear();
				}
			}
			catch
			{
			}
			Logging.ServerConsoleLine("Running engine preload...");
			Main.IsEnginePreloaded = true;
			Action onEnginePreload = Main.OnEnginePreload;
			if (onEnginePreload != null)
			{
				onEnginePreload();
			}
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				Main.WriteFancyWorldLoadErrorToConsole();
				if (!Main.autoShutdown)
				{
					Console.ReadKey();
				}
				this.YouCanSleepNow();
				return;
			}
			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
			Console.WriteLine("");
			Logging.ServerConsoleLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
			Console.WriteLine("");
			Console.Title = "Terraria Server: " + Main.worldName;
			Stopwatch stopwatch = new Stopwatch();
			if (!Main.autoShutdown || Main.showServerConsole)
			{
				Main.startDedInput();
			}
			stopwatch.Start();
			double delta = 16.666666666666668;
			double target = delta;
			Netplay.StartServer();
			Main.AddSignalTraps();
			Main.gameMenu = false;
			while (!Netplay.Disconnect)
			{
				ServerHangWatchdog.Checkin();
				if (Main.oldStatusText != Main.statusText)
				{
					Main.oldStatusText = Main.statusText;
					Console.WriteLine(Main.statusText);
				}
				if (Netplay.HasClients)
				{
					this.Update(new GameTime());
				}
				else if (Main.saveTime.IsRunning)
				{
					Main.saveTime.Stop();
				}
				if (Main.OnTickForThirdPartySoftwareOnly != null)
				{
					Main.OnTickForThirdPartySoftwareOnly();
				}
				double now = (double)stopwatch.ElapsedMilliseconds;
				double remaining = target - now;
				target += delta;
				if (target < now)
				{
					target = now + delta;
				}
				Thread.Sleep(Math.Max((int)remaining, 0));
			}
			if (Netplay.SaveOnServerExit)
			{
				Console.WriteLine(Language.GetTextValue("Net.ServerSavingOnExit"));
				WorldFile.SaveWorld();
			}
			SystemLoader.OnWorldUnload();
			this.YouCanSleepNow();
		}

		// Token: 0x060003F5 RID: 1013 RVA: 0x0009733C File Offset: 0x0009553C
		private static void WriteFancyWorldLoadErrorToConsole()
		{
			Console.WriteLine();
			if (WorldFile.LastThrownLoadException != null)
			{
				Console.WriteLine(WorldFile.LastThrownLoadException.ToString());
				return;
			}
			Console.WriteLine("The world failed to load. (Unknown reason)");
		}

		// Token: 0x060003F6 RID: 1014 RVA: 0x00097364 File Offset: 0x00095564
		public static void startDedInput()
		{
			ThreadStart start;
			if ((start = Main.<>O.<2>__startDedInputCallBack) == null)
			{
				start = (Main.<>O.<2>__startDedInputCallBack = new ThreadStart(Main.startDedInputCallBack));
			}
			new Thread(start)
			{
				IsBackground = true,
				Name = "Server Input Thread"
			}.Start();
		}

		// Token: 0x060003F7 RID: 1015 RVA: 0x000973A0 File Offset: 0x000955A0
		public static void startDedInputCallBack()
		{
			while (!Netplay.Disconnect)
			{
				string text = Console.ReadLine();
				if (text == null)
				{
					Logging.tML.Warn("Console input not connected, ignoring...");
					return;
				}
				Main.ExecuteCommand(text, new ConsoleCommandCaller());
			}
		}

		// Token: 0x060003F8 RID: 1016 RVA: 0x000973DC File Offset: 0x000955DC
		public static void ExecuteCommand(string text, CommandCaller commandCaller)
		{
			Console.Write(": ");
			string text2 = text;
			text = text.ToLower();
			try
			{
				if (text == Language.GetTextValue("CLI.Help_Command"))
				{
					Console.WriteLine(Language.GetTextValue("CLI.AvailableCommands"));
					Console.WriteLine("");
					List<string> list = new List<string>
					{
						"Help",
						"Playing",
						"Clear",
						"Exit",
						"ExitNoSave",
						"Save",
						"Kick",
						"Ban",
						"Password",
						"SetPassword",
						"Version",
						"Time",
						"Port",
						"MaxPlayers",
						"Say",
						"MOTD",
						"SetMOTD",
						"Dawn",
						"Noon",
						"Dusk",
						"Midnight",
						"Settle",
						"Seed"
					};
					int num = 0;
					for (int i = 0; i < list.Count; i++)
					{
						string text3 = Language.Exists("CLI." + list[i] + "_Example") ? Language.GetTextValue("CLI." + list[i] + "_Example") : Language.GetTextValue("CLI." + list[i] + "_Command");
						if (text3.Length > num)
						{
							num = text3.Length;
						}
					}
					List<Tuple<string, string>> modHelpList = CommandLoader.GetHelp(CommandType.Console);
					foreach (Tuple<string, string> entry in modHelpList)
					{
						if (entry.Item1.Length > num)
						{
							num = entry.Item1.Length;
						}
					}
					int num2 = (num + 1) / 8;
					for (int j = 0; j < list.Count; j++)
					{
						string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
						Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
					}
					using (List<Tuple<string, string>>.Enumerator enumerator = modHelpList.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							Tuple<string, string> entry2 = enumerator.Current;
							Console.WriteLine(entry2.Item1 + new string('\t', num2 - entry2.Item1.Length / 8) + entry2.Item2);
						}
						goto IL_C91;
					}
				}
				if (!CommandLoader.HandleCommand(text2, commandCaller))
				{
					if (text == Language.GetTextValue("CLI.Settle_Command"))
					{
						if (!Liquid.panicMode)
						{
							Liquid.StartPanic();
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.WaterIsAlreadySettling"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Dawn_Command"))
					{
						Main.dayTime = true;
						Main.time = 0.0;
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Dusk_Command"))
					{
						Main.dayTime = false;
						Main.time = 0.0;
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Noon_Command"))
					{
						Main.dayTime = true;
						Main.time = 27000.0;
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Midnight_Command"))
					{
						Main.dayTime = false;
						Main.time = 16200.0;
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.ExitNoSave_Command"))
					{
						Netplay.SaveOnServerExit = false;
						Netplay.Disconnect = true;
					}
					else if (text == Language.GetTextValue("CLI.Exit_Command"))
					{
						Netplay.Disconnect = true;
						SocialAPI.Shutdown();
					}
					else if (text == Language.GetTextValue("CLI.FPS_Command"))
					{
						if (!Main.dedServFPS)
						{
							Main.dedServFPS = true;
							Main.fpsTimer.Reset();
						}
						else
						{
							Main.dedServCount1 = 0;
							Main.dedServCount2 = 0;
							Main.dedServFPS = false;
						}
					}
					else if (text == Language.GetTextValue("CLI.Save_Command"))
					{
						WorldFile.SaveWorld();
					}
					else if (text == Language.GetTextValue("CLI.Time_Command"))
					{
						string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
						double num3 = Main.time;
						if (!Main.dayTime)
						{
							num3 += 54000.0;
						}
						num3 = num3 / 86400.0 * 24.0;
						double num4 = 7.5;
						num3 = num3 - num4 - 12.0;
						if (num3 < 0.0)
						{
							num3 += 24.0;
						}
						if (num3 >= 12.0)
						{
							textValue = Language.GetTextValue("GameUI.TimePastMorning");
						}
						int num5 = (int)num3;
						double num7 = (double)((int)((num3 - (double)num5) * 60.0));
						string text5 = string.Concat(num7);
						if (num7 < 10.0)
						{
							text5 = "0" + text5;
						}
						if (num5 > 12)
						{
							num5 -= 12;
						}
						if (num5 == 0)
						{
							num5 = 12;
						}
						Console.WriteLine(Language.GetTextValue("CLI.Time", string.Concat(new string[]
						{
							num5.ToString(),
							":",
							text5,
							" ",
							textValue
						})));
					}
					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.PlayerLimit", Main.maxNetPlayers));
					}
					else if (text == Language.GetTextValue("CLI.Port_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
					}
					else if (text == Language.GetTextValue("CLI.Version_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber) + " - " + ModLoader.versionedName);
					}
					else
					{
						if (text == Language.GetTextValue("CLI.Clear_Command"))
						{
							try
							{
								Console.Clear();
								Logging.ResetPastExceptions();
								goto IL_C91;
							}
							catch
							{
								goto IL_C91;
							}
						}
						if (text == Language.GetTextValue("CLI.Playing_Command"))
						{
							int num6 = 0;
							for (int k = 0; k < 255; k++)
							{
								if (Main.player[k].active)
								{
									num6++;
									Console.WriteLine(string.Concat(new object[]
									{
										Main.player[k].name,
										" (",
										Netplay.Clients[k].Socket.GetRemoteAddress(),
										")"
									}));
								}
							}
							if (num6 != 0)
							{
								if (num6 != 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.PlayersConnected", num6));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.OnePlayerConnected"));
								}
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
							}
						}
						else if (!(text == ""))
						{
							if (text == Language.GetTextValue("CLI.MOTD_Command"))
							{
								if (Main.motd == "")
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoMOTD", Main.worldName));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.MOTD", Main.motd));
								}
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.SetMOTD_Command") + " "))
							{
								Main.motd = text2.Substring(Language.GetTextValue("CLI.SetMOTD_Command").Length + 1);
							}
							else if (text == Language.GetTextValue("CLI.Password_Command"))
							{
								if (Netplay.ServerPassword == "")
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoPassword"));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.Password", Netplay.ServerPassword));
								}
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.SetPassword_Command") + " "))
							{
								string text6 = text2.Substring(Language.GetTextValue("CLI.SetPassword_Command").Length + 1);
								if (text6 == "")
								{
									Netplay.ServerPassword = "";
									Console.WriteLine(Language.GetTextValue("CLI.PasswordDisabled"));
								}
								else
								{
									Netplay.ServerPassword = text6;
									Console.WriteLine(Language.GetTextValue("CLI.PasswordSet", Netplay.ServerPassword));
								}
							}
							else if (text == Language.GetTextValue("CLI.Say_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Say_Command") + " "))
							{
								int length = Language.GetTextValue("CLI.Say_Command").Length;
								if (text.Length <= length + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
								}
								else
								{
									string text7 = text2.Substring(length + 1);
									Console.WriteLine(Language.GetTextValue("CLI.ServerMessage", text7));
									ChatHelper.BroadcastChatMessage(NetworkText.FromKey("CLI.ServerMessage", new object[]
									{
										text7
									}), new Color(255, 240, 20), -1);
								}
							}
							else if (text == Language.GetTextValue("CLI.Kick_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Kick_Command") + " "))
							{
								int length2 = Language.GetTextValue("CLI.Kick_Command").Length;
								if (text.Length <= length2 + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
								}
								else
								{
									string text8 = text.Substring(length2 + 1);
									text8 = text8.ToLower();
									for (int l = 0; l < 255; l++)
									{
										if (Main.player[l].active && Main.player[l].name.ToLower() == text8)
										{
											NetMessage.SendData(2, l, -1, NetworkText.FromKey("CLI.KickMessage", Array.Empty<object>()), 0, 0f, 0f, 0f, 0, 0, 0);
										}
									}
								}
							}
							else if (text == Language.GetTextValue("CLI.Seed_Command"))
							{
								if (Main.ActiveWorldFileData == null || !Main.ActiveWorldFileData.HasValidSeed)
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoValidSeed"));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.DisplaySeed", Main.ActiveWorldFileData.GetFullSeedText(false)));
								}
							}
							else if (text == Language.GetTextValue("CLI.Ban_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Ban_Command") + " "))
							{
								int length3 = Language.GetTextValue("CLI.Ban_Command").Length;
								if (text.Length <= length3 + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
								}
								else
								{
									string text9 = text.Substring(4);
									text9 = text9.ToLower();
									for (int m = 0; m < 255; m++)
									{
										if (Main.player[m].active && Main.player[m].name.ToLower() == text9)
										{
											Netplay.AddBan(m);
											NetMessage.SendData(2, m, -1, NetworkText.FromKey("CLI.BanMessage", Array.Empty<object>()), 0, 0f, 0f, 0f, 0, 0, 0);
										}
									}
								}
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
							}
						}
					}
				}
				IL_C91:;
			}
			catch
			{
				Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
			}
		}

		// Token: 0x060003F9 RID: 1017 RVA: 0x000980F4 File Offset: 0x000962F4
		private static string ReadLineInput()
		{
			string text;
			do
			{
				text = Console.ReadLine();
			}
			while (text == null);
			return text;
		}

		// Token: 0x060003FA RID: 1018 RVA: 0x0009810D File Offset: 0x0009630D
		public static bool IsFastForwardingTime()
		{
			return Main.fastForwardTimeToDawn || Main.fastForwardTimeToDusk;
		}

		// Token: 0x060003FB RID: 1019 RVA: 0x00098120 File Offset: 0x00096320
		public static void Sundialing()
		{
			if (Main.sundialCooldown == 0)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, null, Main.myPlayer, 3f, 0f, 0f, 0, 0, 0);
					return;
				}
				Main.fastForwardTimeToDawn = true;
				Main.sundialCooldown = 8;
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060003FC RID: 1020 RVA: 0x00098188 File Offset: 0x00096388
		public static void Moondialing()
		{
			if (Main.moondialCooldown == 0)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, null, Main.myPlayer, 6f, 0f, 0f, 0, 0, 0);
					return;
				}
				Main.fastForwardTimeToDusk = true;
				Main.moondialCooldown = 8;
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060003FD RID: 1021 RVA: 0x000981EE File Offset: 0x000963EE
		public static void UpdateTimeRate()
		{
			Main.UpdateTimeRate_Inner();
			SystemLoader.ModifyTimeRate(ref Main.dayRate, ref Main.desiredWorldTilesUpdateRate, ref Main.desiredWorldEventsUpdateRate);
			if (Main.dayRate > 86400.0)
			{
				Main.dayRate = 86400.0;
			}
		}

		// Token: 0x060003FE RID: 1022 RVA: 0x00098228 File Offset: 0x00096428
		public static void UpdateTimeRate_Inner()
		{
			if (Main.IsFastForwardingTime())
			{
				Main.dayRate = 60.0;
				Main.desiredWorldTilesUpdateRate = 1.0;
				Main.desiredWorldEventsUpdateRate = 60.0;
				return;
			}
			bool enabled = CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled;
			int targetTimeRate = CreativePowerManager.Instance.GetPower<CreativePowers.ModifyTimeRate>().TargetTimeRate;
			bool flag = Main.CurrentFrameFlags.SleepingPlayersCount == Main.CurrentFrameFlags.ActivePlayersCount && Main.CurrentFrameFlags.SleepingPlayersCount > 0;
			int num = targetTimeRate;
			if (!Main.gameMenu && flag)
			{
				num *= 5;
			}
			if (enabled)
			{
				num = 0;
			}
			Main.dayRate = (double)num;
			Main.desiredWorldTilesUpdateRate = (double)num;
			Main.desiredWorldEventsUpdateRate = (double)num;
			if (Main.gameMenu)
			{
				Main.dayRate = 1.0;
				Main.desiredWorldTilesUpdateRate = 1.0;
				Main.desiredWorldEventsUpdateRate = 1.0;
				Main.worldEventUpdates = 1;
			}
		}

		// Token: 0x060003FF RID: 1023 RVA: 0x00098300 File Offset: 0x00096500
		public Main() : base(Main.dedServ)
		{
			Main.instance = this;
			Main.UnpausedUpdateSeed = (ulong)((long)Guid.NewGuid().GetHashCode());
			base.Exiting += this.Main_Exiting;
			if (!Main.dedServ)
			{
				Main.Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);
				Main.Configuration.Load();
				Main.graphics = new GraphicsDeviceManager(this as Game);
				Main.graphics.GraphicsProfile = 1;
				FNALogging.GraphicsInit(Main.graphics);
			}
		}

		// Token: 0x06000400 RID: 1024 RVA: 0x000985E4 File Offset: 0x000967E4
		private static void SetDisplayMonitor()
		{
			Main.Configuration.Get<string>("Display", "");
			if (Program.IsXna)
			{
				GraphicsDeviceManager graphicsDeviceManager = Main.graphics;
				EventHandler<PreparingDeviceSettingsEventArgs> eventHandler;
				if ((eventHandler = Main.<>O.<3>__SetMonitorOnce) == null)
				{
					eventHandler = (Main.<>O.<3>__SetMonitorOnce = new EventHandler<PreparingDeviceSettingsEventArgs>(Main.SetMonitorOnce));
				}
				graphicsDeviceManager.PreparingDeviceSettings += eventHandler;
			}
		}

		// Token: 0x06000401 RID: 1025 RVA: 0x00098634 File Offset: 0x00096834
		private static void SetMonitorOnce(object sender, PreparingDeviceSettingsEventArgs e)
		{
			string displayName = Main.Configuration.Get<string>("Display", "");
			GraphicsAdapter graphicsAdapter = (from adapter in GraphicsAdapter.Adapters
			where adapter.DeviceName == displayName
			select adapter).FirstOrDefault<GraphicsAdapter>();
			if (graphicsAdapter != null)
			{
				e.GraphicsDeviceInformation.Adapter = graphicsAdapter;
			}
			GraphicsDeviceManager graphicsDeviceManager = Main.graphics;
			EventHandler<PreparingDeviceSettingsEventArgs> eventHandler;
			if ((eventHandler = Main.<>O.<3>__SetMonitorOnce) == null)
			{
				eventHandler = (Main.<>O.<3>__SetMonitorOnce = new EventHandler<PreparingDeviceSettingsEventArgs>(Main.SetMonitorOnce));
			}
			graphicsDeviceManager.PreparingDeviceSettings -= eventHandler;
		}

		// Token: 0x06000402 RID: 1026 RVA: 0x000986B1 File Offset: 0x000968B1
		protected void SetTitle()
		{
			if (!Main.dedServ)
			{
				this._cachedTitle = Lang.GetRandomGameTitle();
				Platform.Get<IWindowService>().SetUnicodeTitle(base.Window, this._cachedTitle);
				Platform.Get<IWindowService>().SetIcon(base.Window);
			}
		}

		// Token: 0x06000403 RID: 1027 RVA: 0x000986EC File Offset: 0x000968EC
		private static void SetTileValue()
		{
			Main.tileOreFinderPriority[28] = 100;
			Main.tileOreFinderPriority[407] = 150;
			Main.tileOreFinderPriority[404] = 150;
			Main.tileOreFinderPriority[7] = 200;
			Main.tileOreFinderPriority[166] = 210;
			Main.tileOreFinderPriority[6] = 220;
			Main.tileOreFinderPriority[167] = 230;
			Main.tileOreFinderPriority[9] = 240;
			Main.tileOreFinderPriority[168] = 250;
			Main.tileOreFinderPriority[8] = 260;
			Main.tileOreFinderPriority[169] = 270;
			Main.tileOreFinderPriority[22] = 300;
			Main.tileOreFinderPriority[204] = 310;
			Main.tileOreFinderPriority[37] = 400;
			Main.tileOreFinderPriority[21] = 500;
			Main.tileOreFinderPriority[467] = 500;
			Main.tileOreFinderPriority[441] = 500;
			Main.tileOreFinderPriority[468] = 500;
			Main.tileOreFinderPriority[12] = 550;
			Main.tileOreFinderPriority[665] = 550;
			Main.tileOreFinderPriority[639] = 550;
			Main.tileOreFinderPriority[107] = 600;
			Main.tileOreFinderPriority[221] = 610;
			Main.tileOreFinderPriority[108] = 620;
			Main.tileOreFinderPriority[222] = 630;
			Main.tileOreFinderPriority[111] = 640;
			Main.tileOreFinderPriority[223] = 650;
			Main.tileOreFinderPriority[129] = 675;
			Main.tileOreFinderPriority[211] = 700;
			Main.tileOreFinderPriority[227] = 750;
			Main.tileOreFinderPriority[656] = 760;
			Main.tileOreFinderPriority[236] = 810;
		}

		// Token: 0x06000404 RID: 1028 RVA: 0x000988CF File Offset: 0x00096ACF
		private static void ResetGameCounter()
		{
			Main._gameUpdateCount = 0U;
		}

		// Token: 0x06000405 RID: 1029 RVA: 0x000988D8 File Offset: 0x00096AD8
		protected override void Initialize()
		{
			this.InitTMLContentManager();
			Main.musicFade[50] = 1f;
			if (Main.dedServ)
			{
				Main.netMode = 2;
			}
			for (int i = 0; i < 10; i++)
			{
				Main.recentWorld[i] = "";
				Main.recentIP[i] = "";
				Main.recentPort[i] = 0;
			}
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			this.SetTitle();
			Main.lo = Main.rand.Next(6);
			this.waterfallManager = new WaterfallManager();
			Main._windowMover = new WindowStateController();
			Main.sittingManager = new AnchoredEntitiesCollection();
			Main.sleepingManager = new AnchoredEntitiesCollection();
			Main.gameTips = new GameTipsDisplay();
			if (Main.player[Main.myPlayer] == null)
			{
				Main.player[Main.myPlayer] = new Player();
			}
			ContentSamples.Initialize();
			PlayerInput.Initialize();
			Main.player[Main.myPlayer] = new Player();
			WorldGen.Hooks.OnWorldLoad += delegate()
			{
				Main.AmbienceServer = new AmbienceServer();
				Main.LocalGolfState = new GolfState();
				if (!Main.dedServ)
				{
					Lighting.Clear();
				}
			};
			WorldGen.AddGenPasses();
			ModContent.RunEarlyClassConstructors();
			DontStarveSeed.Initialize();
			Main.ResourceSetsManager = new PlayerResourceSetsManager();
			Main.MinimapFrameManagerInstance = new MinimapFrameManager();
			PlayerInput.OnActionableInput += delegate()
			{
				if (Main.LocalGolfState != null)
				{
					Main.LocalGolfState.CancelBallTracking();
				}
			};
			Main.SceneMetrics = new SceneMetrics();
			this.BindSettingsTo(Main.Configuration);
			if (Main.dedServ)
			{
				this.Initialize_AlmostEverything();
				Main.Configuration.Load();
				ModLoader.LoadConfiguration();
				return;
			}
			TimeLogger.Initialize();
			this.ClientInitialize();
			base.Initialize();
		}

		// Token: 0x06000406 RID: 1030 RVA: 0x00098A80 File Offset: 0x00096C80
		private void BindSettingsTo(Preferences preferences)
		{
			this.waterfallManager.BindTo(preferences);
			Main.MinimapFrameManagerInstance.BindTo(preferences);
			Main.BigBossProgressBar.BindTo(preferences);
			Main.ResourceSetsManager.BindTo(preferences);
			ChromaInitializer.BindTo(preferences);
			Terraria.Graphics.Effects.Filters.Scene.BindTo(preferences);
			if (SocialAPI.Cloud != null)
			{
				SocialAPI.Cloud.BindTo(preferences);
			}
			preferences.OnSave += this.SaveResourcePacks;
			preferences.OnLoad += this.LoadResourcePacks;
		}

		// Token: 0x06000407 RID: 1031 RVA: 0x00098B01 File Offset: 0x00096D01
		private void LoadResourcePacks(Preferences prefs)
		{
			this._lastLoadedPacks = prefs.Get<JArray>("ResourcePacks", new JArray());
		}

		// Token: 0x06000408 RID: 1032 RVA: 0x00098B1C File Offset: 0x00096D1C
		private void SaveResourcePacks(Preferences prefs)
		{
			JArray value = this._lastLoadedPacks;
			if (Main.AssetSourceController != null)
			{
				value = Main.AssetSourceController.ActiveResourcePackList.ToJson();
			}
			prefs.Put("ResourcePacks", value);
		}

		// Token: 0x06000409 RID: 1033 RVA: 0x00098B54 File Offset: 0x00096D54
		private void Initialize_AlmostEverything()
		{
			this.TilePaintSystem = new TilePaintSystemV2();
			this.TilesRenderer = new TileDrawing(this.TilePaintSystem);
			this.WallsRenderer = new WallDrawing(this.TilePaintSystem);
			CreativePowerManager.Initialize();
			Main.LocalFavoriteData.Load();
			Main.CloudFavoritesData.Load();
			this.Initialize_Entities();
			Main.FindAnnouncementBoxStatus();
			CustomCurrencyManager.Initialize();
			WingStatsInitializer.Load();
			TileObjectData.Initialize();
			Animation.Initialize();
			Chest.Initialize();
			Wiring.Initialize();
			Framing.Initialize();
			ItemRarity.Initialize();
			TileEntity.InitializeAll();
			Projectile.InitializeStaticThings();
			TorchID.Initialize();
			Main.InitializeItemAnimations();
			BestiaryDatabase bestiaryDatabase = new BestiaryDatabase();
			BestiaryDatabaseNPCsPopulator bestiaryDatabaseNPCsPopulator = new BestiaryDatabaseNPCsPopulator();
			bestiaryDatabaseNPCsPopulator.Populate(bestiaryDatabase);
			Main.BestiaryDB = bestiaryDatabase;
			ContentSamples.RebuildBestiarySortingIDsByBestiaryDatabaseContents(bestiaryDatabase);
			Main.BestiaryTracker = new BestiaryUnlocksTracker();
			ItemDropDatabase itemDropDatabase = new ItemDropDatabase();
			itemDropDatabase.Populate();
			Main.ItemDropsDB = itemDropDatabase;
			bestiaryDatabase.Merge(Main.ItemDropsDB);
			bestiaryDatabaseNPCsPopulator.AddDropOverrides(bestiaryDatabase);
			Main.PylonSystem = new TeleportPylonsSystem();
			Main.ItemDropSolver = new ItemDropResolver(itemDropDatabase);
			Main.ShopHelper = new ShopHelper();
			CreativeItemSacrificesCatalog.Instance.Initialize();
			if (!Main.dedServ)
			{
				Main.BestiaryUI = new UIBestiaryTest(Main.BestiaryDB);
				Main.ContentThatNeedsRenderTargets.Add(Main.MapPlayerRenderer);
			}
			if (!Main.dedServ)
			{
				Lighting.Initialize();
				MapHelper.Initialize();
			}
			else
			{
				Mount.Initialize();
				Minecart.Initialize();
			}
			WorldGen.RandomizeBackgrounds(Main.rand);
			if (Main.treeBGSet1[0] == 173)
			{
				WorldGen.RandomizeBackgrounds(Main.rand);
			}
			if (Main.treeBGSet1[0] == 173)
			{
				WorldGen.RandomizeBackgrounds(Main.rand);
			}
			WorldGen.RandomizeCaveBackgrounds();
			WorldGen.Hooks.Initialize();
			Action value;
			if ((value = Main.<>O.<4>__ResetGameCounter) == null)
			{
				value = (Main.<>O.<4>__ResetGameCounter = new Action(Main.ResetGameCounter));
			}
			WorldGen.Hooks.OnWorldLoad += value;
			Main.bgAlphaFrontLayer[0] = 1f;
			Main.bgAlphaFarBackLayer[0] = 1f;
			this.invBottom = 258;
			Main.Initialize_TileAndNPCData1();
			Main.Initialize_TileAndNPCData2();
			Main.Initialize_Items();
			for (int i = 1; i < (int)ProjectileID.Count; i++)
			{
				Projectile projectile = new Projectile();
				projectile.SetDefaults(i);
				if (projectile.hostile)
				{
					Main.projHostile[i] = true;
				}
				if (projectile.aiStyle == 7)
				{
					Main.projHook[i] = true;
				}
			}
			for (int j = 0; j < Recipe.maxRecipes; j++)
			{
				Main.recipe[j] = new Recipe(null);
				Main.availableRecipeY[j] = (float)(65 * j);
			}
			Recipe.SetupRecipes();
			ContentSamples.FixItemsAfterRecipesAreAdded();
			for (int k = 0; k < Liquid.maxLiquid; k++)
			{
				Main.liquid[k] = new Liquid();
			}
			for (int l = 0; l < 50000; l++)
			{
				Main.liquidBuffer[l] = new LiquidBuffer();
			}
			this.shop[0] = new Chest(false);
			this.shop[1] = new Chest(false);
			Chest.SetupTravelShop();
			Main.teamColor[0] = Color.White;
			Main.teamColor[1] = new Color(218, 59, 59);
			Main.teamColor[2] = new Color(59, 218, 85);
			Main.teamColor[3] = new Color(59, 149, 218);
			Main.teamColor[4] = new Color(242, 221, 100);
			Main.teamColor[5] = new Color(224, 100, 242);
			Netplay.Initialize();
			NetworkInitializer.Load();
			ChatInitializer.Load();
			LucyAxeMessage.Initialize();
			if (Main.menuMode == 1)
			{
				Main.LoadPlayers();
			}
			if (Main.skipMenu)
			{
				WorldGen.clearWorld();
				Main.gameMenu = false;
				Main.LoadPlayers();
				Main.PlayerList[0].SetAsActive();
				Main.LoadWorlds();
				WorldGen.GenerateWorld(new UnifiedRandom().Next(), null);
				WorldGen.EveryTileFrame();
				Main.player[Main.myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
			}
			else if (Platform.IsWindows && !Main.dedServ)
			{
				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
				int menuItemCount = Main.GetMenuItemCount(systemMenu);
				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
			}
			if (!Main.dedServ)
			{
				SoundID.FillAccessMap();
				Star.SpawnStars(-1);
				ItemSorting.SetupWhiteLists();
			}
		}

		// Token: 0x0600040A RID: 1034 RVA: 0x00098F64 File Offset: 0x00097164
		private void Initialize_Entities()
		{
			for (int i = 0; i < Main.maxMenuItems; i++)
			{
				this.menuItemScale[i] = 0.8f;
			}
			for (int j = 0; j < 6001; j++)
			{
				Main.dust[j] = new Dust();
				Main.dust[j].dustIndex = j;
			}
			for (int k = 0; k < 401; k++)
			{
				Main.item[k] = new Item();
				Main.item[k].whoAmI = k;
			}
			for (int l = 0; l < 201; l++)
			{
				Main.npc[l] = new NPC();
				Main.npc[l].whoAmI = l;
			}
			for (int m = 0; m < 256; m++)
			{
				Main.player[m] = new Player();
				Main.player[m].whoAmI = m;
			}
			for (int n = 0; n < 1001; n++)
			{
				Main.projectile[n] = new Projectile();
				Main.projectile[n].whoAmI = n;
			}
			for (int num = 0; num < 601; num++)
			{
				Main.gore[num] = new Gore();
			}
			for (int num2 = 0; num2 < Main.maxRain + 1; num2++)
			{
				Main.rain[num2] = new Rain();
			}
			for (int num3 = 0; num3 < 200; num3++)
			{
				Main.cloud[num3] = new Cloud();
			}
			for (int num4 = 0; num4 < 100; num4++)
			{
				Main.combatText[num4] = new CombatText();
			}
			for (int num5 = 0; num5 < 20; num5++)
			{
				Main.popupText[num5] = new PopupText();
			}
		}

		// Token: 0x0600040B RID: 1035 RVA: 0x0009910C File Offset: 0x0009730C
		private static void Initialize_Items()
		{
			int i = 0;
			while (i < (int)ItemID.Count)
			{
				Item item = new Item();
				item.SetDefaults(i);
				if (item.headSlot > 0)
				{
					Item.headType[item.headSlot] = item.type;
				}
				if (item.bodySlot > 0)
				{
					Item.bodyType[item.bodySlot] = item.type;
				}
				if (item.legSlot > 0)
				{
					Item.legType[item.legSlot] = item.type;
				}
				int type = item.type;
				if (type <= 2188)
				{
					if (type <= 1296)
					{
						if (type <= 726)
						{
							if (type == 683 || type == 723 || type == 726)
							{
								goto IL_1DA;
							}
						}
						else if (type - 739 <= 5 || type == 788 || type == 1296)
						{
							goto IL_1DA;
						}
					}
					else if (type <= 1446)
					{
						if (type == 1308 || type == 1326 || type - 1444 <= 2)
						{
							goto IL_1DA;
						}
					}
					else if (type <= 1827)
					{
						if (type == 1801)
						{
							goto IL_1DA;
						}
						if (type == 1827)
						{
							Item.claw[item.type] = true;
						}
					}
					else if (type - 1930 <= 1 || type == 2188)
					{
						goto IL_1DA;
					}
				}
				else if (type <= 3476)
				{
					if (type <= 3051)
					{
						if (type == 2750 || type == 3006 || type == 3051)
						{
							goto IL_1DA;
						}
					}
					else if (type - 3209 <= 1 || type == 3377 || type == 3476)
					{
						goto IL_1DA;
					}
				}
				else if (type <= 3787)
				{
					if (type == 3569 || type == 3571 || type == 3787)
					{
						goto IL_1DA;
					}
				}
				else if (type <= 3870)
				{
					if (type == 3852 || type == 3870)
					{
						goto IL_1DA;
					}
				}
				else if (type == 4062 || type == 5065)
				{
					goto IL_1DA;
				}
				IL_1F6:
				i++;
				continue;
				IL_1DA:
				Item.staff[item.type] = true;
				goto IL_1F6;
			}
		}

		// Token: 0x0600040C RID: 1036 RVA: 0x00099320 File Offset: 0x00097520
		private static void Initialize_TileAndNPCData2()
		{
			Main.critterCage = true;
			for (int i = 0; i < 3600; i++)
			{
				Main.AnimateTiles_CritterCages();
			}
			Main.critterCage = false;
			Main.tileBlockLight[549] = true;
			Main.tileBrick[477] = true;
			Main.tileSolid[477] = true;
			Main.tileBlockLight[477] = true;
			Main.tileBrick[492] = true;
			Main.tileSolid[492] = true;
			Main.tileBlockLight[492] = true;
			Main.tileSolidTop[275] = true;
			Main.tileSolidTop[280] = true;
			Main.tileSolidTop[276] = true;
			Main.tileSolidTop[277] = true;
			Main.tileSolidTop[278] = true;
			Main.tileSolidTop[279] = true;
			Main.tileSolidTop[281] = true;
			Main.tileSolidTop[605] = true;
			Main.tileSolidTop[604] = true;
			Main.tileSolidTop[603] = true;
			Main.tileSolidTop[602] = true;
			Main.tileSolidTop[601] = true;
			Main.tileSolidTop[599] = true;
			Main.tileSolidTop[600] = true;
			Main.tileSolidTop[612] = true;
			Main.tileSolidTop[611] = true;
			Main.tileSolidTop[610] = true;
			Main.tileSolidTop[609] = true;
			Main.tileSolidTop[608] = true;
			Main.tileSolidTop[606] = true;
			Main.tileSolidTop[607] = true;
			Main.tileSolidTop[558] = true;
			Main.tileSolidTop[554] = true;
			Main.tileSolidTop[553] = true;
			Main.tileSolidTop[551] = true;
			Main.tileSolidTop[550] = true;
			Main.tileSolidTop[542] = true;
			Main.tileSolidTop[413] = true;
			Main.tileSolidTop[309] = true;
			Main.tileSolidTop[297] = true;
			Main.tileSolidTop[296] = true;
			Main.tileSolidTop[645] = true;
			Main.tileSolidTop[643] = true;
			Main.tileSolidTop[644] = true;
			Main.tileSolidTop[632] = true;
			Main.tileSolidTop[640] = true;
			Main.tileSolidTop[559] = true;
			Main.tileSolidTop[414] = true;
			Main.tileSolidTop[359] = true;
			Main.tileSolidTop[358] = true;
			Main.tileSolidTop[285] = true;
			Main.tileSolidTop[286] = true;
			Main.tileSolidTop[582] = true;
			Main.tileSolidTop[555] = true;
			Main.tileSolidTop[538] = true;
			Main.tileSolidTop[533] = true;
			Main.tileSolidTop[532] = true;
			Main.tileSolidTop[394] = true;
			Main.tileSolidTop[393] = true;
			Main.tileSolidTop[392] = true;
			Main.tileSolidTop[391] = true;
			Main.tileSolidTop[339] = true;
			Main.tileSolidTop[310] = true;
			Main.tileSolidTop[299] = true;
			Main.tileSolidTop[298] = true;
			Main.tileSolidTop[629] = true;
			Main.tileSolidTop[619] = true;
			Main.tileSolidTop[556] = true;
			Main.tileSolidTop[544] = true;
			Main.tileSolidTop[364] = true;
			Main.tileSolidTop[363] = true;
			Main.tileSolidTop[362] = true;
			Main.tileSolidTop[361] = true;
			Main.tileTable[280] = true;
			Main.tileTable[275] = true;
			Main.tileTable[276] = true;
			Main.tileTable[277] = true;
			Main.tileTable[278] = true;
			Main.tileTable[279] = true;
			Main.tileTable[281] = true;
			Main.tileTable[605] = true;
			Main.tileTable[604] = true;
			Main.tileTable[603] = true;
			Main.tileTable[602] = true;
			Main.tileTable[601] = true;
			Main.tileTable[599] = true;
			Main.tileTable[600] = true;
			Main.tileTable[612] = true;
			Main.tileTable[611] = true;
			Main.tileTable[610] = true;
			Main.tileTable[609] = true;
			Main.tileTable[608] = true;
			Main.tileTable[606] = true;
			Main.tileTable[607] = true;
			Main.tileTable[558] = true;
			Main.tileTable[554] = true;
			Main.tileTable[553] = true;
			Main.tileTable[551] = true;
			Main.tileTable[550] = true;
			Main.tileTable[542] = true;
			Main.tileTable[413] = true;
			Main.tileTable[309] = true;
			Main.tileTable[297] = true;
			Main.tileTable[296] = true;
			Main.tileTable[645] = true;
			Main.tileTable[643] = true;
			Main.tileTable[644] = true;
			Main.tileTable[632] = true;
			Main.tileTable[640] = true;
			Main.tileTable[559] = true;
			Main.tileTable[414] = true;
			Main.tileTable[359] = true;
			Main.tileTable[358] = true;
			Main.tileTable[285] = true;
			Main.tileTable[286] = true;
			Main.tileTable[582] = true;
			Main.tileTable[555] = true;
			Main.tileTable[538] = true;
			Main.tileTable[533] = true;
			Main.tileTable[532] = true;
			Main.tileTable[394] = true;
			Main.tileTable[393] = true;
			Main.tileTable[392] = true;
			Main.tileTable[391] = true;
			Main.tileTable[339] = true;
			Main.tileTable[310] = true;
			Main.tileTable[299] = true;
			Main.tileTable[298] = true;
			Main.tileTable[629] = true;
			Main.tileTable[619] = true;
			Main.tileTable[556] = true;
			Main.tileTable[544] = true;
			Main.tileTable[364] = true;
			Main.tileTable[363] = true;
			Main.tileTable[362] = true;
			Main.tileTable[361] = true;
			Main.tileBrick[1] = true;
			Main.tileBrick[54] = true;
			Main.tileBrick[118] = true;
			Main.tileBrick[119] = true;
			Main.tileBrick[120] = true;
			Main.tileBrick[121] = true;
			Main.tileBrick[122] = true;
			Main.tileBrick[140] = true;
			Main.tileBrick[148] = true;
			Main.tileBrick[150] = true;
			Main.tileBrick[151] = true;
			Main.tileBrick[152] = true;
			Main.tileBrick[30] = true;
			Main.tileBrick[38] = true;
			Main.tileBrick[39] = true;
			Main.tileBrick[41] = true;
			Main.tileBrick[43] = true;
			Main.tileBrick[44] = true;
			Main.tileBrick[481] = true;
			Main.tileBrick[482] = true;
			Main.tileBrick[483] = true;
			Main.tileBrick[45] = true;
			Main.tileBrick[46] = true;
			Main.tileBrick[47] = true;
			Main.tileBrick[75] = true;
			Main.tileBrick[76] = true;
			Main.tileBrick[160] = true;
			Main.tileBrick[2] = true;
			Main.tileBrick[199] = true;
			Main.tileBrick[23] = true;
			Main.tileBrick[60] = true;
			Main.tileBrick[70] = true;
			Main.tileBrick[109] = true;
			Main.tileBrick[53] = true;
			Main.tileBrick[57] = true;
			Main.tileBrick[116] = true;
			Main.tileBrick[234] = true;
			Main.tileBrick[112] = true;
			Main.tileBrick[147] = true;
			Main.tileBrick[153] = true;
			Main.tileBrick[154] = true;
			Main.tileBrick[155] = true;
			Main.tileBrick[156] = true;
			Main.tileBrick[157] = true;
			Main.tileBrick[158] = true;
			Main.tileBrick[159] = true;
			Main.tileBrick[273] = true;
			Main.tileBrick[274] = true;
			Main.tileMergeDirt[202] = true;
			Main.tileBrick[202] = true;
			Main.tileSolid[202] = true;
			Main.tileBlockLight[202] = true;
			Main.tileMergeDirt[498] = true;
			Main.tileBrick[161] = true;
			Main.tileBlockLight[161] = true;
			Main.tileBlockLight[163] = true;
			Main.tileBlockLight[164] = true;
			Main.tileSolid[188] = true;
			Main.tileBlockLight[188] = true;
			Main.tileBrick[188] = true;
			Main.tileMergeDirt[188] = true;
			Main.tileBrick[179] = true;
			Main.tileSolid[179] = true;
			Main.tileBlockLight[179] = true;
			Main.tileMoss[179] = true;
			Main.tileBrick[381] = true;
			Main.tileSolid[381] = true;
			Main.tileBlockLight[381] = true;
			Main.tileMoss[381] = true;
			Main.tileBrick[534] = true;
			Main.tileSolid[534] = true;
			Main.tileBlockLight[534] = true;
			Main.tileMoss[534] = true;
			Main.tileBrick[536] = true;
			Main.tileSolid[536] = true;
			Main.tileBlockLight[536] = true;
			Main.tileMoss[536] = true;
			Main.tileBrick[539] = true;
			Main.tileSolid[539] = true;
			Main.tileBlockLight[539] = true;
			Main.tileMoss[539] = true;
			Main.tileBrick[625] = true;
			Main.tileSolid[625] = true;
			Main.tileBlockLight[625] = true;
			Main.tileMoss[625] = true;
			Main.tileBrick[627] = true;
			Main.tileSolid[627] = true;
			Main.tileBlockLight[627] = true;
			Main.tileMoss[627] = true;
			Main.tileBrick[180] = true;
			Main.tileSolid[180] = true;
			Main.tileBlockLight[180] = true;
			Main.tileMoss[180] = true;
			Main.tileBrick[181] = true;
			Main.tileSolid[181] = true;
			Main.tileBlockLight[181] = true;
			Main.tileMoss[181] = true;
			Main.tileBrick[182] = true;
			Main.tileSolid[182] = true;
			Main.tileBlockLight[182] = true;
			Main.tileMoss[182] = true;
			Main.tileBrick[183] = true;
			Main.tileSolid[183] = true;
			Main.tileBlockLight[183] = true;
			Main.tileMoss[183] = true;
			Main.tileBrick[512] = true;
			Main.tileSolid[512] = true;
			Main.tileBlockLight[512] = true;
			Main.tileBrick[513] = true;
			Main.tileSolid[513] = true;
			Main.tileBlockLight[513] = true;
			Main.tileBrick[514] = true;
			Main.tileSolid[514] = true;
			Main.tileBlockLight[514] = true;
			Main.tileBrick[515] = true;
			Main.tileSolid[515] = true;
			Main.tileBlockLight[515] = true;
			Main.tileBrick[516] = true;
			Main.tileSolid[516] = true;
			Main.tileBlockLight[516] = true;
			Main.tileBrick[517] = true;
			Main.tileSolid[517] = true;
			Main.tileBlockLight[517] = true;
			Main.tileLighted[517] = true;
			Main.tileBrick[687] = true;
			Main.tileSolid[687] = true;
			Main.tileBlockLight[687] = true;
			Main.tileLighted[687] = true;
			Main.tileBrick[535] = true;
			Main.tileSolid[535] = true;
			Main.tileBlockLight[535] = true;
			Main.tileLighted[535] = true;
			Main.tileBrick[689] = true;
			Main.tileSolid[689] = true;
			Main.tileBlockLight[689] = true;
			Main.tileLighted[689] = true;
			Main.tileBrick[537] = true;
			Main.tileSolid[537] = true;
			Main.tileBlockLight[537] = true;
			Main.tileLighted[537] = true;
			Main.tileBrick[690] = true;
			Main.tileSolid[690] = true;
			Main.tileBlockLight[690] = true;
			Main.tileLighted[690] = true;
			Main.tileBrick[540] = true;
			Main.tileSolid[540] = true;
			Main.tileBlockLight[540] = true;
			Main.tileLighted[540] = true;
			Main.tileBrick[688] = true;
			Main.tileSolid[688] = true;
			Main.tileBlockLight[688] = true;
			Main.tileLighted[688] = true;
			Main.tileBrick[626] = true;
			Main.tileSolid[626] = true;
			Main.tileBlockLight[626] = true;
			Main.tileLighted[626] = true;
			Main.tileBrick[691] = true;
			Main.tileSolid[691] = true;
			Main.tileBlockLight[691] = true;
			Main.tileLighted[691] = true;
			Main.tileBrick[628] = true;
			Main.tileSolid[628] = true;
			Main.tileBlockLight[628] = true;
			Main.tileLighted[628] = true;
			Main.tileBrick[692] = true;
			Main.tileSolid[692] = true;
			Main.tileBlockLight[692] = true;
			Main.tileLighted[692] = true;
			Main.tileLighted[592] = true;
			Main.tileLighted[656] = true;
			Main.tileLighted[356] = true;
			Main.tileLighted[663] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[190] = true;
			Main.tileSolid[196] = true;
			Main.tileSolid[197] = true;
			Main.tileMergeDirt[197] = true;
			Main.tileBlockLight[197] = true;
			Main.tileNoSunLight[197] = true;
			Main.tileBrick[175] = true;
			Main.tileSolid[175] = true;
			Main.tileBlockLight[175] = true;
			Main.tileBrick[176] = true;
			Main.tileSolid[176] = true;
			Main.tileBlockLight[176] = true;
			Main.tileBrick[177] = true;
			Main.tileSolid[177] = true;
			Main.tileBlockLight[177] = true;
			Main.tileBrick[225] = true;
			Main.tileBrick[229] = true;
			Main.tileShine[221] = 925;
			Main.tileShine[222] = 875;
			Main.tileShine[223] = 825;
			Main.tileShine2[221] = true;
			Main.tileShine2[222] = true;
			Main.tileShine2[223] = true;
			Main.tileMergeDirt[175] = true;
			Main.tileMergeDirt[176] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[208] = true;
			Main.tileBrick[162] = true;
			Main.tileSolid[162] = true;
			Main.tileBlockLight[162] = false;
			Main.tileBrick[163] = true;
			Main.tileSolid[163] = true;
			Main.tileBrick[164] = true;
			Main.tileSolid[164] = true;
			Main.tileShine2[6] = true;
			Main.tileShine2[7] = true;
			Main.tileShine2[8] = true;
			Main.tileShine2[9] = true;
			Main.tileShine2[166] = true;
			Main.tileShine2[167] = true;
			Main.tileShine2[168] = true;
			Main.tileShine2[169] = true;
			Main.tileShine2[12] = true;
			Main.tileShine2[21] = true;
			Main.tileShine2[467] = true;
			Main.tileShine2[441] = true;
			Main.tileShine2[468] = true;
			Main.tileShine2[22] = true;
			Main.tileShine2[25] = true;
			Main.tileShine2[45] = true;
			Main.tileShine2[46] = true;
			Main.tileShine2[47] = true;
			Main.tileShine2[63] = true;
			Main.tileShine2[64] = true;
			Main.tileShine2[65] = true;
			Main.tileShine2[66] = true;
			Main.tileShine2[67] = true;
			Main.tileShine2[68] = true;
			Main.tileShine2[566] = true;
			Main.tileShine2[107] = true;
			Main.tileShine2[108] = true;
			Main.tileShine2[111] = true;
			Main.tileShine2[121] = true;
			Main.tileShine2[122] = true;
			Main.tileShine2[117] = true;
			Main.tileShine2[211] = true;
			Main.tileShine2[682] = true;
			Main.tileShine2[681] = true;
			Main.tileShine2[680] = true;
			Main.tileShine2[685] = true;
			Main.tileShine2[686] = true;
			Main.tileShine[129] = 300;
			Main.tileNoFail[81] = true;
			Main.tileCracked[481] = true;
			Main.tileCracked[482] = true;
			Main.tileCracked[483] = true;
			Main.tileNoFail[481] = true;
			Main.tileNoFail[482] = true;
			Main.tileNoFail[483] = true;
			Main.tileNoFail[330] = true;
			Main.tileNoFail[331] = true;
			Main.tileNoFail[332] = true;
			Main.tileNoFail[333] = true;
			Main.tileNoFail[254] = true;
			Main.tileNoFail[324] = true;
			Main.tileNoFail[129] = true;
			Main.tileNoFail[192] = true;
			Main.tileHammer[26] = true;
			Main.tileHammer[31] = true;
			Main.tileAxe[5] = true;
			Main.tileAxe[72] = true;
			Main.tileAxe[80] = true;
			Main.tileAxe[488] = true;
			Main.tileAxe[323] = true;
			Main.tileAxe[596] = true;
			Main.tileAxe[616] = true;
			Main.tileAxe[634] = true;
			Main.tileAxe[589] = true;
			Main.tileAxe[584] = true;
			Main.tileAxe[588] = true;
			Main.tileAxe[586] = true;
			Main.tileAxe[587] = true;
			Main.tileAxe[585] = true;
			Main.tileAxe[583] = true;
			Main.tileBrick[59] = true;
			Main.tileBrick[234] = true;
			Main.tileSolid[234] = true;
			Main.tileMergeDirt[234] = true;
			Main.tileSand[53] = true;
			Main.tileSand[112] = true;
			Main.tileSand[116] = true;
			Main.tileSand[234] = true;
			Main.tileFrameImportant[630] = true;
			Main.tileLavaDeath[630] = true;
			Main.tileNoSunLight[630] = true;
			Main.tileFrameImportant[631] = true;
			Main.tileLavaDeath[631] = true;
			Main.tileNoSunLight[631] = true;
			Main.tileFrameImportant[571] = true;
			Main.tileLavaDeath[571] = true;
			Main.tileFrameImportant[579] = true;
			Main.tileLavaDeath[579] = true;
			Main.tileFrameImportant[591] = true;
			Main.tileLavaDeath[591] = true;
			Main.tileFrameImportant[592] = true;
			Main.tileLavaDeath[592] = false;
			Main.tileFrameImportant[538] = true;
			Main.tileLavaDeath[538] = true;
			Main.tileFrameImportant[544] = true;
			Main.tileLavaDeath[544] = true;
			Main.tileFrameImportant[629] = true;
			Main.tileLavaDeath[629] = true;
			Main.tileFrameImportant[550] = true;
			Main.tileLavaDeath[550] = true;
			Main.tileFrameImportant[551] = true;
			Main.tileLavaDeath[551] = true;
			Main.tileFrameImportant[533] = true;
			Main.tileLavaDeath[533] = true;
			Main.tileFrameImportant[553] = true;
			Main.tileLavaDeath[553] = true;
			Main.tileFrameImportant[554] = true;
			Main.tileLavaDeath[554] = true;
			Main.tileFrameImportant[555] = true;
			Main.tileLavaDeath[555] = true;
			Main.tileFrameImportant[556] = true;
			Main.tileLavaDeath[556] = true;
			Main.tileFrameImportant[558] = true;
			Main.tileLavaDeath[558] = true;
			Main.tileFrameImportant[559] = true;
			Main.tileLavaDeath[559] = true;
			Main.tileFrameImportant[599] = true;
			Main.tileLavaDeath[599] = true;
			Main.tileFrameImportant[600] = true;
			Main.tileLavaDeath[600] = true;
			Main.tileFrameImportant[601] = true;
			Main.tileLavaDeath[601] = true;
			Main.tileFrameImportant[602] = true;
			Main.tileLavaDeath[602] = true;
			Main.tileFrameImportant[603] = true;
			Main.tileLavaDeath[603] = true;
			Main.tileFrameImportant[604] = true;
			Main.tileLavaDeath[604] = true;
			Main.tileFrameImportant[605] = true;
			Main.tileLavaDeath[605] = true;
			Main.tileFrameImportant[606] = true;
			Main.tileLavaDeath[606] = true;
			Main.tileFrameImportant[607] = true;
			Main.tileLavaDeath[607] = true;
			Main.tileFrameImportant[608] = true;
			Main.tileLavaDeath[608] = true;
			Main.tileFrameImportant[609] = true;
			Main.tileLavaDeath[609] = true;
			Main.tileFrameImportant[610] = true;
			Main.tileLavaDeath[610] = true;
			Main.tileFrameImportant[611] = true;
			Main.tileLavaDeath[611] = true;
			Main.tileFrameImportant[612] = true;
			Main.tileLavaDeath[612] = true;
			Main.tileFrameImportant[632] = true;
			Main.tileLavaDeath[632] = true;
			Main.tileFrameImportant[640] = true;
			Main.tileLavaDeath[640] = true;
			Main.tileFrameImportant[643] = true;
			Main.tileLavaDeath[643] = true;
			Main.tileFrameImportant[644] = true;
			Main.tileLavaDeath[644] = true;
			Main.tileFrameImportant[645] = true;
			Main.tileLavaDeath[645] = true;
			Main.tileFrameImportant[568] = true;
			Main.tileNoAttach[568] = true;
			Main.tileLavaDeath[568] = true;
			Main.tileLighted[568] = true;
			Main.tileFrameImportant[569] = true;
			Main.tileNoAttach[569] = true;
			Main.tileLavaDeath[569] = true;
			Main.tileLighted[569] = true;
			Main.tileFrameImportant[570] = true;
			Main.tileNoAttach[570] = true;
			Main.tileLavaDeath[570] = true;
			Main.tileLighted[570] = true;
			Main.tileFrameImportant[580] = true;
			Main.tileNoAttach[580] = true;
			Main.tileLavaDeath[580] = true;
			Main.tileLighted[580] = true;
			Main.tileFrameImportant[582] = true;
			Main.tileLavaDeath[582] = true;
			Main.tileLighted[582] = true;
			Main.tileFrameImportant[619] = true;
			Main.tileLavaDeath[619] = true;
			Main.tileLighted[619] = true;
			Main.tileFrameImportant[620] = true;
			Main.tileNoAttach[620] = true;
			Main.tileLavaDeath[620] = true;
			Main.tileLighted[620] = true;
			Main.tileFrameImportant[572] = true;
			Main.tileNoAttach[572] = true;
			Main.tileLavaDeath[572] = true;
			Main.tileLighted[572] = true;
			Main.tileFrameImportant[560] = true;
			Main.tileLavaDeath[560] = true;
			Main.tileFrameImportant[564] = true;
			Main.tileNoAttach[564] = true;
			Main.tileLavaDeath[564] = true;
			Main.tileLighted[564] = true;
			Main.tileFrameImportant[567] = true;
			Main.tileLavaDeath[567] = true;
			Main.tileFrameImportant[565] = true;
			Main.tileNoAttach[565] = true;
			Main.tileLavaDeath[565] = true;
			Main.tileFrameImportant[593] = true;
			Main.tileNoAttach[593] = true;
			Main.tileLavaDeath[593] = false;
			Main.tileLighted[593] = true;
			Main.tileFrameImportant[594] = true;
			Main.tileNoAttach[594] = true;
			Main.tileLavaDeath[594] = false;
			Main.tileLighted[594] = true;
			Main.tileLighted[548] = true;
			Main.tileLighted[613] = true;
			Main.tileLighted[614] = true;
			Main.tileFrameImportant[654] = true;
			Main.tileCut[654] = true;
			Main.tileNoFail[654] = true;
			Main.tileLavaDeath[654] = true;
			Main.tileFrameImportant[518] = true;
			Main.tileCut[518] = true;
			Main.tileNoFail[518] = true;
			Main.tileFrameImportant[519] = true;
			Main.tileCut[519] = true;
			Main.tileNoFail[519] = true;
			Main.tileLighted[519] = true;
			Main.tileFrameImportant[549] = true;
			Main.tileCut[549] = true;
			Main.tileNoFail[549] = true;
			Main.tileFrameImportant[529] = true;
			Main.tileCut[529] = true;
			Main.tileNoFail[529] = true;
			Main.tileLavaDeath[529] = true;
			Main.tileFrameImportant[637] = true;
			Main.tileCut[637] = true;
			Main.tileNoFail[637] = true;
			Main.tileLavaDeath[637] = false;
			Main.tileLighted[637] = true;
			Main.tileFrameImportant[530] = true;
			Main.tileNoFail[530] = true;
			Main.tileLavaDeath[530] = true;
			Main.tileFrameImportant[233] = true;
			Main.tileFrameImportant[485] = true;
			Main.tileLighted[215] = true;
			Main.tileFrameImportant[227] = true;
			Main.tileFrameImportant[228] = true;
			Main.tileFrameImportant[231] = true;
			Main.tileCut[231] = true;
			Main.tileFrameImportant[216] = true;
			Main.tileFrameImportant[217] = true;
			Main.tileFrameImportant[218] = true;
			Main.tileFrameImportant[219] = true;
			Main.tileFrameImportant[642] = true;
			Main.tileFrameImportant[220] = true;
			Main.tileFrameImportant[338] = true;
			Main.tileFrameImportant[453] = true;
			Main.tileFrameImportant[456] = true;
			Main.tileFrameImportant[165] = true;
			Main.tileFrameImportant[209] = true;
			Main.tileFrameImportant[215] = true;
			Main.tileFrameImportant[210] = true;
			Main.tileFrameImportant[212] = true;
			Main.tileFrameImportant[207] = true;
			Main.tileFrameImportant[178] = true;
			Main.tileFrameImportant[184] = true;
			Main.tileFrameImportant[185] = true;
			Main.tileFrameImportant[186] = true;
			Main.tileFrameImportant[187] = true;
			Main.tileFrameImportant[173] = true;
			Main.tileFrameImportant[174] = true;
			Main.tileLighted[173] = true;
			Main.tileLighted[174] = true;
			Main.tileFrameImportant[139] = true;
			Main.tileLighted[160] = true;
			Main.tileLighted[149] = true;
			Main.tileFrameImportant[149] = true;
			Main.tileFrameImportant[142] = true;
			Main.tileFrameImportant[143] = true;
			Main.tileFrameImportant[144] = true;
			Main.tileStone[131] = true;
			Main.tileFrameImportant[136] = true;
			Main.tileFrameImportant[137] = true;
			Main.tileFrameImportant[138] = true;
			Main.tileFrameImportant[664] = true;
			Main.tileFrameImportant[665] = true;
			Main.tileFrameImportant[484] = true;
			Main.tileLavaDeath[484] = true;
			Main.tileNoFail[484] = true;
			Main.tileBlockLight[137] = true;
			Main.tileSolid[137] = true;
			Main.tileBlockLight[160] = true;
			Main.tileSolid[160] = true;
			Main.tileMergeDirt[160] = true;
			Main.tileBlockLight[161] = true;
			Main.tileSolid[161] = true;
			Main.tileBlockLight[145] = true;
			Main.tileSolid[145] = true;
			Main.tileMergeDirt[145] = true;
			Main.tileBlockLight[146] = true;
			Main.tileSolid[146] = true;
			Main.tileMergeDirt[146] = true;
			Main.tileBlockLight[147] = true;
			Main.tileSolid[147] = true;
			Main.tileBlockLight[148] = true;
			Main.tileSolid[148] = true;
			Main.tileMergeDirt[148] = true;
			Main.tileSolid[138] = true;
			Main.tileSolid[664] = true;
			Main.tileSolid[484] = true;
			Main.tileCut[484] = true;
			Main.tileBlockLight[140] = true;
			Main.tileSolid[140] = true;
			Main.tileBlockLight[151] = true;
			Main.tileSolid[151] = true;
			Main.tileMergeDirt[151] = true;
			Main.tileBlockLight[152] = true;
			Main.tileSolid[152] = true;
			Main.tileMergeDirt[152] = true;
			Main.tileBlockLight[153] = true;
			Main.tileSolid[153] = true;
			Main.tileMergeDirt[153] = true;
			Main.tileBlockLight[154] = true;
			Main.tileSolid[154] = true;
			Main.tileMergeDirt[154] = true;
			Main.tileBlockLight[155] = true;
			Main.tileSolid[155] = true;
			Main.tileMergeDirt[155] = true;
			Main.tileBlockLight[156] = true;
			Main.tileSolid[156] = true;
			Main.tileMergeDirt[156] = true;
			Main.tileMergeDirt[150] = true;
			Main.tileBlockLight[157] = true;
			Main.tileSolid[157] = true;
			Main.tileMergeDirt[157] = true;
			Main.tileBlockLight[158] = true;
			Main.tileSolid[158] = true;
			Main.tileMergeDirt[158] = true;
			Main.tileBlockLight[159] = true;
			Main.tileSolid[159] = true;
			Main.tileMergeDirt[159] = true;
			Main.tileFrameImportant[320] = true;
			Main.tileFrameImportant[49] = true;
			Main.tileShine[22] = 1150;
			Main.tileShine[6] = 1150;
			Main.tileShine[7] = 1100;
			Main.tileShine[8] = 1000;
			Main.tileShine[9] = 1050;
			Main.tileShine[166] = 1125;
			Main.tileShine[167] = 1075;
			Main.tileShine[168] = 1025;
			Main.tileShine[169] = 975;
			Main.tileShine[617] = 400;
			Main.tileShine[178] = 500;
			Main.tileShine2[178] = true;
			Main.tileShine[12] = 300;
			Main.tileShine[21] = 1200;
			Main.tileShine[467] = 1200;
			Main.tileShine[441] = 1200;
			Main.tileShine[468] = 1200;
			Main.tileShine[63] = 900;
			Main.tileShine[64] = 900;
			Main.tileShine[65] = 900;
			Main.tileShine[66] = 900;
			Main.tileShine[67] = 900;
			Main.tileShine[68] = 900;
			Main.tileShine[566] = 900;
			Main.tileShine[45] = 1900;
			Main.tileShine[680] = 1900;
			Main.tileShine[46] = 2000;
			Main.tileShine[681] = 2000;
			Main.tileShine[47] = 2100;
			Main.tileShine[682] = 2100;
			Main.tileShine[122] = 1800;
			Main.tileShine[686] = 1800;
			Main.tileShine[121] = 1850;
			Main.tileShine[685] = 1850;
			Main.tileShine[125] = 600;
			Main.tileShine[109] = 9000;
			Main.tileShine[110] = 9000;
			Main.tileShine[116] = 9000;
			Main.tileShine[117] = 9000;
			Main.tileShine[118] = 8000;
			Main.tileShine[107] = 950;
			Main.tileShine[108] = 900;
			Main.tileShine[111] = 850;
			Main.tileShine[211] = 500;
			Main.tileLighted[4] = true;
			Main.tileLighted[17] = true;
			Main.tileLighted[133] = true;
			Main.tileLighted[31] = true;
			Main.tileLighted[33] = true;
			Main.tileLighted[34] = true;
			Main.tileLighted[35] = true;
			Main.tileLighted[37] = true;
			Main.tileLighted[42] = true;
			Main.tileLighted[49] = true;
			Main.tileLighted[58] = true;
			Main.tileLighted[61] = true;
			Main.tileLighted[70] = true;
			Main.tileLighted[71] = true;
			Main.tileLighted[72] = true;
			Main.tileLighted[76] = true;
			Main.tileLighted[684] = true;
			Main.tileLighted[77] = true;
			Main.tileLighted[19] = true;
			Main.tileLighted[22] = true;
			Main.tileLighted[26] = true;
			Main.tileLighted[83] = true;
			Main.tileLighted[84] = true;
			Main.tileLighted[92] = true;
			Main.tileLighted[93] = true;
			Main.tileLighted[95] = true;
			Main.tileLighted[98] = true;
			Main.tileLighted[100] = true;
			Main.tileLighted[109] = true;
			Main.tileLighted[125] = true;
			Main.tileLighted[126] = true;
			Main.tileLighted[129] = true;
			Main.tileLighted[140] = true;
			Main.tileLighted[270] = true;
			Main.tileLighted[271] = true;
			Main.tileLighted[581] = true;
			Main.tileLighted[660] = true;
			Main.tileLighted[578] = true;
			Main.tileMergeDirt[1] = true;
			Main.tileMergeDirt[6] = true;
			Main.tileMergeDirt[7] = true;
			Main.tileMergeDirt[8] = true;
			Main.tileMergeDirt[9] = true;
			Main.tileMergeDirt[166] = true;
			Main.tileMergeDirt[167] = true;
			Main.tileMergeDirt[168] = true;
			Main.tileMergeDirt[169] = true;
			Main.tileMergeDirt[22] = true;
			Main.tileMergeDirt[25] = true;
			Main.tileMergeDirt[30] = true;
			Main.tileMergeDirt[37] = true;
			Main.tileMergeDirt[38] = true;
			Main.tileMergeDirt[40] = true;
			Main.tileMergeDirt[53] = true;
			Main.tileMergeDirt[56] = true;
			Main.tileMergeDirt[107] = true;
			Main.tileMergeDirt[108] = true;
			Main.tileMergeDirt[111] = true;
			Main.tileMergeDirt[112] = true;
			Main.tileMergeDirt[116] = true;
			Main.tileMergeDirt[117] = true;
			Main.tileMergeDirt[123] = true;
			Main.tileMergeDirt[140] = true;
			Main.tileMergeDirt[39] = true;
			Main.tileMergeDirt[122] = true;
			Main.tileMergeDirt[121] = true;
			Main.tileMergeDirt[120] = true;
			Main.tileMergeDirt[119] = true;
			Main.tileMergeDirt[118] = true;
			Main.tileMergeDirt[47] = true;
			Main.tileMergeDirt[46] = true;
			Main.tileMergeDirt[45] = true;
			Main.tileMergeDirt[41] = true;
			Main.tileMergeDirt[43] = true;
			Main.tileMergeDirt[44] = true;
			Main.tileMergeDirt[481] = true;
			Main.tileMergeDirt[482] = true;
			Main.tileMergeDirt[483] = true;
			Main.tileFrameImportant[380] = true;
			Main.tileFrameImportant[201] = true;
			Main.tileFrameImportant[3] = true;
			Main.tileFrameImportant[4] = true;
			Main.tileFrameImportant[5] = true;
			Main.tileFrameImportant[10] = true;
			Main.tileFrameImportant[11] = true;
			Main.tileFrameImportant[12] = true;
			Main.tileFrameImportant[13] = true;
			Main.tileFrameImportant[14] = true;
			Main.tileFrameImportant[469] = true;
			Main.tileFrameImportant[486] = true;
			Main.tileFrameImportant[488] = true;
			Main.tileFrameImportant[487] = true;
			Main.tileFrameImportant[489] = true;
			Main.tileFrameImportant[490] = true;
			Main.tileFrameImportant[15] = true;
			Main.tileFrameImportant[497] = true;
			Main.tileFrameImportant[16] = true;
			Main.tileFrameImportant[17] = true;
			Main.tileFrameImportant[18] = true;
			Main.tileFrameImportant[19] = true;
			Main.tileFrameImportant[20] = true;
			Main.tileFrameImportant[21] = true;
			Main.tileFrameImportant[467] = true;
			Main.tileFrameImportant[441] = true;
			Main.tileFrameImportant[468] = true;
			Main.tileFrameImportant[24] = true;
			Main.tileFrameImportant[26] = true;
			Main.tileFrameImportant[27] = true;
			Main.tileFrameImportant[28] = true;
			Main.tileFrameImportant[29] = true;
			Main.tileFrameImportant[31] = true;
			Main.tileFrameImportant[33] = true;
			Main.tileFrameImportant[34] = true;
			Main.tileFrameImportant[35] = true;
			Main.tileFrameImportant[42] = true;
			Main.tileFrameImportant[50] = true;
			Main.tileFrameImportant[55] = true;
			Main.tileFrameImportant[61] = true;
			Main.tileFrameImportant[71] = true;
			Main.tileFrameImportant[72] = true;
			Main.tileFrameImportant[73] = true;
			Main.tileFrameImportant[74] = true;
			Main.tileFrameImportant[77] = true;
			Main.tileFrameImportant[78] = true;
			Main.tileFrameImportant[79] = true;
			Main.tileFrameImportant[81] = true;
			Main.tileFrameImportant[82] = true;
			Main.tileFrameImportant[83] = true;
			Main.tileFrameImportant[84] = true;
			Main.tileFrameImportant[85] = true;
			Main.tileFrameImportant[86] = true;
			Main.tileFrameImportant[87] = true;
			Main.tileFrameImportant[88] = true;
			Main.tileFrameImportant[89] = true;
			Main.tileFrameImportant[90] = true;
			Main.tileFrameImportant[91] = true;
			Main.tileFrameImportant[92] = true;
			Main.tileFrameImportant[93] = true;
			Main.tileFrameImportant[94] = true;
			Main.tileFrameImportant[95] = true;
			Main.tileFrameImportant[96] = true;
			Main.tileFrameImportant[97] = true;
			Main.tileFrameImportant[98] = true;
			Main.tileFrameImportant[99] = true;
			Main.tileFrameImportant[101] = true;
			Main.tileFrameImportant[102] = true;
			Main.tileFrameImportant[103] = true;
			Main.tileFrameImportant[104] = true;
			Main.tileFrameImportant[105] = true;
			Main.tileFrameImportant[100] = true;
			Main.tileFrameImportant[106] = true;
			Main.tileFrameImportant[110] = true;
			Main.tileFrameImportant[113] = true;
			Main.tileFrameImportant[114] = true;
			Main.tileFrameImportant[125] = true;
			Main.tileFrameImportant[287] = true;
			Main.tileFrameImportant[126] = true;
			Main.tileFrameImportant[128] = true;
			Main.tileFrameImportant[129] = true;
			Main.tileFrameImportant[132] = true;
			Main.tileFrameImportant[133] = true;
			Main.tileFrameImportant[134] = true;
			Main.tileFrameImportant[135] = true;
			Main.tileFrameImportant[172] = true;
			Main.tileFrameImportant[319] = true;
			Main.tileFrameImportant[323] = true;
			Main.tileFrameImportant[335] = true;
			Main.tileFrameImportant[337] = true;
			Main.tileFrameImportant[349] = true;
			Main.tileFrameImportant[376] = true;
			Main.tileFrameImportant[378] = true;
			Main.tileFrameImportant[425] = true;
			Main.tileFrameImportant[465] = true;
			Main.tileFrameImportant[506] = true;
			Main.tileFrameImportant[510] = true;
			Main.tileFrameImportant[511] = true;
			Main.tileFrameImportant[531] = true;
			Main.tileFrameImportant[545] = true;
			Main.tileFrameImportant[547] = true;
			Main.tileFrameImportant[548] = true;
			Main.tileFrameImportant[552] = true;
			Main.tileFrameImportant[573] = true;
			Main.tileFrameImportant[613] = true;
			Main.tileFrameImportant[614] = true;
			Main.tileFrameImportant[621] = true;
			Main.tileFrameImportant[622] = true;
			Main.tileFrameImportant[623] = true;
			Main.tileFrameImportant[624] = true;
			Main.tileFrameImportant[656] = true;
			Main.tileFrameImportant[141] = true;
			Main.tileFrameImportant[270] = true;
			Main.tileFrameImportant[271] = true;
			Main.tileFrameImportant[581] = true;
			Main.tileFrameImportant[660] = true;
			Main.tileFrameImportant[314] = true;
			Main.tileSolidTop[376] = true;
			Main.tileTable[376] = true;
			Main.tileTable[380] = true;
			Main.tileFrameImportant[583] = true;
			Main.tileFrameImportant[584] = true;
			Main.tileFrameImportant[585] = true;
			Main.tileFrameImportant[586] = true;
			Main.tileFrameImportant[587] = true;
			Main.tileFrameImportant[588] = true;
			Main.tileFrameImportant[589] = true;
			Main.tileFrameImportant[590] = true;
			Main.tileNoAttach[590] = true;
			Main.tileFrameImportant[595] = true;
			Main.tileNoAttach[595] = true;
			Main.tileFrameImportant[596] = true;
			Main.tileFrameImportant[615] = true;
			Main.tileNoAttach[615] = true;
			Main.tileFrameImportant[616] = true;
			Main.tileFrameImportant[634] = true;
			Main.tileCut[201] = true;
			Main.tileCut[3] = true;
			Main.tileCut[24] = true;
			Main.tileCut[28] = true;
			Main.tileCut[32] = true;
			Main.tileCut[51] = true;
			Main.tileCut[52] = true;
			Main.tileCut[61] = true;
			Main.tileCut[62] = true;
			Main.tileCut[69] = true;
			Main.tileCut[655] = true;
			Main.tileCut[71] = true;
			Main.tileCut[73] = true;
			Main.tileCut[74] = true;
			Main.tileCut[82] = true;
			Main.tileCut[83] = true;
			Main.tileCut[84] = true;
			Main.tileCut[110] = true;
			Main.tileCut[113] = true;
			Main.tileCut[115] = true;
			Main.tileCut[184] = true;
			Main.tileCut[205] = true;
			Main.tileCut[352] = true;
			Main.tileCut[382] = true;
			Main.tileCut[528] = true;
			Main.tileLighted[528] = true;
			Main.tileCut[636] = true;
			Main.tileCut[638] = true;
			Main.tileCut[444] = true;
			Main.tileCut[485] = true;
			Main.tileAlch[82] = true;
			Main.tileAlch[83] = true;
			Main.tileAlch[84] = true;
			Main.tileSolid[127] = true;
			Main.tileSolid[130] = true;
			Main.tileBlockLight[130] = true;
			Main.tileBlockLight[131] = true;
			Main.tileNoAttach[232] = true;
			Main.tileSolid[107] = true;
			Main.tileBlockLight[107] = true;
			Main.tileSolid[108] = true;
			Main.tileBlockLight[108] = true;
			Main.tileSolid[111] = true;
			Main.tileBlockLight[111] = true;
			Main.tileSolid[109] = true;
			Main.tileBlockLight[109] = true;
			Main.tileSolid[110] = false;
			Main.tileNoAttach[110] = true;
			Main.tileNoFail[110] = true;
			Main.tileSolid[112] = true;
			Main.tileBlockLight[112] = true;
			Main.tileSolid[116] = true;
			Main.tileBlockLight[116] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[117] = true;
			Main.tileBlockLight[117] = true;
			Main.tileSolid[123] = true;
			Main.tileBlockLight[123] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[185] = true;
			Main.tileNoFail[186] = true;
			Main.tileNoFail[187] = true;
			Main.tileSolid[118] = true;
			Main.tileBlockLight[118] = true;
			Main.tileSolid[119] = true;
			Main.tileBlockLight[119] = true;
			Main.tileSolid[120] = true;
			Main.tileBlockLight[120] = true;
			Main.tileSolid[121] = true;
			Main.tileBlockLight[121] = true;
			Main.tileSolid[122] = true;
			Main.tileBlockLight[122] = true;
			Main.tileSolid[150] = true;
			Main.tileBlockLight[150] = true;
			Main.tileBlockLight[115] = true;
			Main.tileSolid[199] = true;
			Main.tileBlockLight[199] = true;
			Main.tileNoFail[162] = true;
			Main.tileSolid[0] = true;
			Main.tileBlockLight[0] = true;
			Main.tileSolid[1] = true;
			Main.tileBlockLight[1] = true;
			Main.tileSolid[2] = true;
			Main.tileBlockLight[2] = true;
			Main.tileSolid[3] = false;
			Main.tileNoAttach[3] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[201] = true;
			Main.tileSolid[4] = false;
			Main.tileNoAttach[4] = true;
			Main.tileNoFail[4] = true;
			Main.tileNoFail[24] = true;
			Main.tileSolid[5] = false;
			Main.tileSolid[6] = true;
			Main.tileBlockLight[6] = true;
			Main.tileSolid[7] = true;
			Main.tileBlockLight[7] = true;
			Main.tileSolid[8] = true;
			Main.tileBlockLight[8] = true;
			Main.tileSolid[9] = true;
			Main.tileBlockLight[9] = true;
			Main.tileSolid[166] = true;
			Main.tileBlockLight[166] = true;
			Main.tileSolid[167] = true;
			Main.tileBlockLight[167] = true;
			Main.tileSolid[168] = true;
			Main.tileBlockLight[168] = true;
			Main.tileSolid[169] = true;
			Main.tileBlockLight[169] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[10] = true;
			Main.tileNoAttach[10] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[11] = false;
			Main.tileSolidTop[19] = true;
			Main.tileSolid[19] = true;
			Main.tileSolid[22] = true;
			Main.tileSolid[23] = true;
			Main.tileSolid[25] = true;
			Main.tileSolid[30] = true;
			Main.tileNoFail[32] = true;
			Main.tileBlockLight[32] = true;
			Main.tileNoFail[352] = true;
			Main.tileBlockLight[352] = true;
			Main.tileSolid[37] = true;
			Main.tileBlockLight[37] = true;
			Main.tileSolid[38] = true;
			Main.tileBlockLight[38] = true;
			Main.tileSolid[39] = true;
			Main.tileBlockLight[39] = true;
			Main.tileSolid[40] = true;
			Main.tileBlockLight[40] = true;
			Main.tileSolid[41] = true;
			Main.tileBlockLight[41] = true;
			Main.tileSolid[43] = true;
			Main.tileBlockLight[43] = true;
			Main.tileSolid[44] = true;
			Main.tileBlockLight[44] = true;
			Main.tileSolid[481] = true;
			Main.tileBlockLight[481] = true;
			Main.tileSolid[482] = true;
			Main.tileBlockLight[482] = true;
			Main.tileSolid[483] = true;
			Main.tileBlockLight[483] = true;
			Main.tileSolid[634] = false;
			Main.tileFrameImportant[634] = true;
			Main.tileLavaDeath[634] = false;
			Main.tileBlockLight[634] = false;
			Main.tileLighted[634] = true;
			Main.tileLighted[20] = true;
			Main.tileSolid[45] = true;
			Main.tileBlockLight[45] = true;
			Main.tileSolid[46] = true;
			Main.tileBlockLight[46] = true;
			Main.tileSolid[47] = true;
			Main.tileBlockLight[47] = true;
			Main.tileSolid[48] = true;
			Main.tileSolid[53] = true;
			Main.tileBlockLight[53] = true;
			Main.tileSolid[54] = true;
			Main.tileBlockLight[52] = true;
			Main.tileBlockLight[205] = true;
			Main.tileSolid[56] = true;
			Main.tileBlockLight[56] = true;
			Main.tileSolid[57] = true;
			Main.tileBlockLight[57] = true;
			Main.tileSolid[58] = true;
			Main.tileBlockLight[58] = true;
			Main.tileBlockLight[382] = true;
			Main.tileSolid[59] = true;
			Main.tileBlockLight[59] = true;
			Main.tileSolid[60] = true;
			Main.tileBlockLight[60] = true;
			Main.tileSolid[63] = true;
			Main.tileBlockLight[63] = true;
			Main.tileStone[63] = true;
			Main.tileStone[130] = true;
			Main.tileSolid[64] = true;
			Main.tileBlockLight[64] = true;
			Main.tileStone[64] = true;
			Main.tileSolid[65] = true;
			Main.tileBlockLight[65] = true;
			Main.tileStone[65] = true;
			Main.tileSolid[66] = true;
			Main.tileBlockLight[66] = true;
			Main.tileStone[66] = true;
			Main.tileSolid[67] = true;
			Main.tileBlockLight[67] = true;
			Main.tileStone[67] = true;
			Main.tileSolid[68] = true;
			Main.tileBlockLight[68] = true;
			Main.tileStone[68] = true;
			Main.tileSolid[566] = true;
			Main.tileBlockLight[566] = true;
			Main.tileStone[566] = true;
			Main.tileSolid[75] = true;
			Main.tileBlockLight[75] = true;
			Main.tileBrick[633] = true;
			Main.tileSolid[633] = true;
			Main.tileBlockLight[633] = true;
			Main.tileLighted[633] = true;
			Main.tileSolid[76] = true;
			Main.tileBlockLight[76] = true;
			Main.tileSolid[70] = true;
			Main.tileBlockLight[70] = true;
			Main.tileSolid[661] = true;
			Main.tileBlockLight[661] = true;
			Main.tileBrick[661] = true;
			Main.tileSolid[662] = true;
			Main.tileBlockLight[662] = true;
			Main.tileBrick[662] = true;
			Main.tileNoFail[50] = true;
			Main.tileNoAttach[50] = true;
			Main.tileDungeon[41] = true;
			Main.tileDungeon[43] = true;
			Main.tileDungeon[44] = true;
			Main.tileBlockLight[30] = true;
			Main.tileBlockLight[25] = true;
			Main.tileBlockLight[23] = true;
			Main.tileBlockLight[22] = true;
			Main.tileBlockLight[62] = true;
			Main.tileSolidTop[18] = true;
			Main.tileSolidTop[14] = true;
			Main.tileSolidTop[469] = true;
			Main.tileSolidTop[16] = true;
			Main.tileSolidTop[134] = true;
			Main.tileSolidTop[114] = true;
			Main.tileNoAttach[20] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[13] = true;
			Main.tileNoAttach[14] = true;
			Main.tileNoAttach[469] = true;
			Main.tileNoAttach[486] = true;
			Main.tileNoAttach[488] = true;
			Main.tileNoAttach[487] = true;
			Main.tileNoAttach[489] = true;
			Main.tileNoAttach[490] = true;
			Main.tileNoAttach[15] = true;
			Main.tileNoAttach[497] = true;
			Main.tileNoAttach[16] = true;
			Main.tileNoAttach[134] = true;
			Main.tileNoAttach[17] = true;
			Main.tileNoAttach[18] = true;
			Main.tileNoAttach[21] = true;
			Main.tileNoAttach[467] = true;
			Main.tileNoAttach[441] = true;
			Main.tileNoAttach[468] = true;
			Main.tileNoAttach[27] = true;
			Main.tileNoAttach[114] = true;
			Main.tileTable[14] = true;
			Main.tileTable[469] = true;
			Main.tileTable[18] = true;
			Main.tileTable[19] = true;
			Main.tileTable[114] = true;
			Main.tileNoAttach[86] = true;
			Main.tileNoAttach[87] = true;
			Main.tileNoAttach[88] = true;
			Main.tileNoAttach[89] = true;
			Main.tileNoAttach[90] = true;
			Main.tileTable[101] = true;
			Main.tileNoAttach[101] = true;
			Main.tileNoAttach[102] = true;
			Main.tileNoAttach[94] = true;
			Main.tileNoAttach[95] = true;
			Main.tileNoAttach[96] = true;
			Main.tileNoAttach[97] = true;
			Main.tileNoAttach[98] = true;
			Main.tileNoAttach[99] = true;
			Main.tileTable[87] = true;
			Main.tileTable[88] = true;
			Main.tileSolidTop[87] = true;
			Main.tileSolidTop[88] = true;
			Main.tileSolidTop[101] = true;
			Main.tileNoAttach[91] = true;
			Main.tileNoAttach[92] = true;
			Main.tileNoAttach[93] = true;
			Main.tileLighted[190] = true;
			Main.tileBlockLight[192] = true;
			Main.tileWaterDeath[215] = true;
			Main.tileWaterDeath[4] = true;
			Main.tileWaterDeath[51] = true;
			Main.tileWaterDeath[93] = true;
			Main.tileWaterDeath[98] = true;
			Main.tileWaterDeath[552] = true;
			Main.tileLavaDeath[3] = true;
			Main.tileLavaDeath[5] = true;
			Main.tileLavaDeath[10] = true;
			Main.tileLavaDeath[11] = true;
			Main.tileLavaDeath[12] = true;
			Main.tileLavaDeath[13] = true;
			Main.tileLavaDeath[14] = true;
			Main.tileLavaDeath[469] = true;
			Main.tileLavaDeath[486] = true;
			Main.tileLavaDeath[488] = true;
			Main.tileLavaDeath[487] = true;
			Main.tileLavaDeath[489] = true;
			Main.tileLavaDeath[490] = true;
			Main.tileLavaDeath[15] = true;
			Main.tileLavaDeath[497] = true;
			Main.tileLavaDeath[16] = true;
			Main.tileLavaDeath[17] = true;
			Main.tileLavaDeath[18] = true;
			Main.tileLavaDeath[19] = true;
			Main.tileLavaDeath[24] = true;
			Main.tileLavaDeath[27] = true;
			Main.tileLavaDeath[28] = true;
			Main.tileLavaDeath[29] = true;
			Main.tileLavaDeath[32] = true;
			Main.tileLavaDeath[33] = true;
			Main.tileLavaDeath[34] = true;
			Main.tileLavaDeath[35] = true;
			Main.tileLavaDeath[36] = true;
			Main.tileLavaDeath[42] = true;
			Main.tileLavaDeath[49] = true;
			Main.tileLavaDeath[50] = true;
			Main.tileLavaDeath[51] = true;
			Main.tileLavaDeath[52] = true;
			Main.tileLavaDeath[55] = true;
			Main.tileLavaDeath[61] = true;
			Main.tileLavaDeath[62] = true;
			Main.tileLavaDeath[69] = true;
			Main.tileLavaDeath[655] = true;
			Main.tileLavaDeath[71] = true;
			Main.tileLavaDeath[72] = true;
			Main.tileLavaDeath[73] = true;
			Main.tileLavaDeath[74] = true;
			Main.tileLavaDeath[79] = true;
			Main.tileLavaDeath[80] = true;
			Main.tileLavaDeath[81] = true;
			Main.tileLavaDeath[86] = true;
			Main.tileLavaDeath[87] = true;
			Main.tileLavaDeath[88] = true;
			Main.tileLavaDeath[89] = true;
			Main.tileLavaDeath[90] = true;
			Main.tileLavaDeath[91] = true;
			Main.tileLavaDeath[92] = true;
			Main.tileLavaDeath[93] = true;
			Main.tileLavaDeath[94] = true;
			Main.tileLavaDeath[95] = true;
			Main.tileLavaDeath[96] = true;
			Main.tileLavaDeath[97] = true;
			Main.tileLavaDeath[98] = true;
			Main.tileLavaDeath[100] = true;
			Main.tileLavaDeath[101] = true;
			Main.tileLavaDeath[102] = true;
			Main.tileLavaDeath[103] = true;
			Main.tileLavaDeath[104] = true;
			Main.tileLavaDeath[106] = true;
			Main.tileLavaDeath[110] = true;
			Main.tileLavaDeath[113] = true;
			Main.tileLavaDeath[115] = true;
			Main.tileLavaDeath[125] = true;
			Main.tileLavaDeath[126] = true;
			Main.tileLavaDeath[128] = true;
			Main.tileLavaDeath[149] = true;
			Main.tileLavaDeath[172] = true;
			Main.tileLavaDeath[173] = true;
			Main.tileLavaDeath[174] = true;
			Main.tileLavaDeath[184] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[205] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[209] = true;
			Main.tileLavaDeath[210] = true;
			Main.tileLavaDeath[212] = true;
			Main.tileLavaDeath[213] = true;
			Main.tileLavaDeath[353] = true;
			Main.tileLavaDeath[214] = false;
			Main.tileLavaDeath[215] = true;
			Main.tileLavaDeath[216] = true;
			Main.tileLavaDeath[217] = true;
			Main.tileLavaDeath[218] = true;
			Main.tileLavaDeath[219] = true;
			Main.tileLavaDeath[642] = true;
			Main.tileLavaDeath[220] = true;
			Main.tileLavaDeath[227] = true;
			Main.tileLavaDeath[228] = true;
			Main.tileLavaDeath[233] = true;
			Main.tileLavaDeath[236] = true;
			Main.tileLavaDeath[238] = true;
			Main.tileLavaDeath[240] = true;
			Main.tileLavaDeath[241] = true;
			Main.tileLavaDeath[242] = true;
			Main.tileLavaDeath[243] = true;
			Main.tileLavaDeath[244] = true;
			Main.tileLavaDeath[245] = true;
			Main.tileLavaDeath[246] = true;
			Main.tileLavaDeath[247] = true;
			Main.tileLavaDeath[254] = true;
			Main.tileLavaDeath[269] = true;
			Main.tileLavaDeath[270] = true;
			Main.tileLavaDeath[271] = true;
			Main.tileLavaDeath[581] = true;
			Main.tileLavaDeath[660] = true;
			Main.tileLavaDeath[275] = true;
			Main.tileLavaDeath[413] = true;
			Main.tileLavaDeath[276] = true;
			Main.tileLavaDeath[277] = true;
			Main.tileLavaDeath[278] = true;
			Main.tileLavaDeath[279] = true;
			Main.tileLavaDeath[280] = true;
			Main.tileLavaDeath[281] = true;
			Main.tileLavaDeath[282] = true;
			Main.tileLavaDeath[283] = true;
			Main.tileLavaDeath[285] = true;
			Main.tileLavaDeath[286] = true;
			Main.tileLavaDeath[287] = true;
			Main.tileLavaDeath[288] = true;
			Main.tileLavaDeath[289] = true;
			Main.tileLavaDeath[290] = true;
			Main.tileLavaDeath[291] = true;
			Main.tileLavaDeath[292] = true;
			Main.tileLavaDeath[293] = true;
			Main.tileLavaDeath[294] = true;
			Main.tileLavaDeath[295] = true;
			Main.tileLavaDeath[296] = true;
			Main.tileLavaDeath[297] = true;
			Main.tileLavaDeath[298] = true;
			Main.tileLavaDeath[299] = true;
			Main.tileLavaDeath[300] = true;
			Main.tileLavaDeath[301] = true;
			Main.tileLavaDeath[302] = true;
			Main.tileLavaDeath[303] = true;
			Main.tileLavaDeath[304] = true;
			Main.tileLavaDeath[305] = true;
			Main.tileLavaDeath[306] = true;
			Main.tileLavaDeath[307] = true;
			Main.tileLavaDeath[308] = true;
			Main.tileLavaDeath[309] = true;
			Main.tileLavaDeath[310] = true;
			Main.tileLavaDeath[532] = true;
			Main.tileLavaDeath[316] = true;
			Main.tileLavaDeath[317] = true;
			Main.tileLavaDeath[318] = true;
			Main.tileLavaDeath[319] = true;
			Main.tileLavaDeath[354] = true;
			Main.tileLavaDeath[355] = true;
			Main.tileLavaDeath[499] = true;
			Main.tileLavaDeath[323] = true;
			Main.tileLavaDeath[335] = true;
			Main.tileLavaDeath[338] = true;
			Main.tileLavaDeath[339] = true;
			Main.tileLavaDeath[528] = true;
			Main.tileLavaDeath[636] = true;
			Main.tileLavaDeath[638] = false;
			Main.tileLavaDeath[352] = true;
			Main.tileLavaDeath[382] = true;
			Main.tileLavaDeath[425] = true;
			Main.tileLavaDeath[453] = true;
			Main.tileLavaDeath[456] = true;
			Main.tileLavaDeath[463] = true;
			Main.tileLavaDeath[464] = true;
			Main.tileLavaDeath[465] = true;
			Main.tileLavaDeath[485] = true;
			Main.tileLavaDeath[511] = true;
			Main.tileLavaDeath[510] = true;
			Main.tileLavaDeath[547] = true;
			Main.tileLavaDeath[548] = true;
			Main.tileLavaDeath[552] = true;
			Main.tileLavaDeath[573] = true;
			Main.tileLavaDeath[621] = true;
			Main.tileLavaDeath[622] = true;
			Main.tileLavaDeath[623] = true;
			Main.tileLavaDeath[624] = true;
			Main.tileLavaDeath[656] = true;
			Main.tileLighted[316] = true;
			Main.tileLighted[317] = true;
			Main.tileLighted[318] = true;
			Main.tileFrameImportant[493] = true;
			Main.tileLavaDeath[493] = true;
			for (int j = 0; j < (int)TileID.Count; j++)
			{
				if (Main.tileLavaDeath[j])
				{
					Main.tileObsidianKill[j] = true;
				}
			}
			Main.tileObsidianKill[546] = true;
			Main.tileObsidianKill[77] = true;
			Main.tileObsidianKill[78] = true;
			Main.tileObsidianKill[82] = true;
			Main.tileObsidianKill[83] = true;
			Main.tileObsidianKill[84] = true;
			Main.tileObsidianKill[85] = true;
			Main.tileObsidianKill[105] = true;
			Main.tileObsidianKill[129] = true;
			Main.tileObsidianKill[132] = true;
			Main.tileObsidianKill[133] = true;
			Main.tileObsidianKill[134] = true;
			Main.tileObsidianKill[135] = true;
			Main.tileObsidianKill[136] = true;
			Main.tileObsidianKill[139] = true;
			Main.tileObsidianKill[165] = true;
			Main.tileObsidianKill[178] = true;
			Main.tileObsidianKill[185] = true;
			Main.tileObsidianKill[186] = true;
			Main.tileObsidianKill[187] = true;
			Main.tileObsidianKill[231] = true;
			Main.tileObsidianKill[337] = true;
			Main.tileObsidianKill[349] = true;
			Main.tileObsidianKill[506] = true;
			Main.tileObsidianKill[314] = true;
			Main.tileSolid[384] = true;
			Main.tileBlockLight[384] = true;
			Main.tileNoFail[384] = true;
			Main.tileFrameImportant[395] = true;
			Main.tileLavaDeath[395] = true;
			Main.tileFrameImportant[520] = true;
			Main.tileLavaDeath[520] = true;
			Main.tileLavaDeath[471] = true;
			Main.tileFrameImportant[405] = true;
			Main.tileLavaDeath[405] = true;
			Main.tileSolidTop[405] = true;
			Main.tileTable[405] = true;
			Main.tileLighted[405] = true;
			Main.tileWaterDeath[405] = true;
			Main.tileFrameImportant[406] = true;
			Main.tileLavaDeath[406] = true;
			Main.tileFrameImportant[452] = true;
			Main.tileLavaDeath[452] = true;
			Main.tileFrameImportant[411] = true;
			Main.tileLavaDeath[411] = false;
			Main.tileFrameImportant[457] = true;
			Main.tileLavaDeath[457] = true;
			Main.tileFrameImportant[462] = true;
			Main.tileFrameImportant[454] = true;
			Main.tileLavaDeath[454] = true;
			Main.tileCut[454] = true;
			Main.tileFrameImportant[494] = true;
			Main.tileLavaDeath[494] = true;
			Main.tileFrameImportant[455] = true;
			Main.tileFrameImportant[412] = true;
			for (int k = 0; k < (int)WallID.Count; k++)
			{
				int num = WallID.Sets.BlendType[k];
				if (num >= 0 && num < (int)WallID.Count)
				{
					Main.wallBlend[k] = num;
				}
				else
				{
					Main.wallBlend[k] = k;
				}
			}
			Main.tileNoFail[24] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[52] = true;
			Main.tileNoFail[62] = true;
			Main.tileNoFail[32] = true;
			Main.tileNoFail[61] = true;
			Main.tileNoFail[69] = true;
			Main.tileNoFail[655] = true;
			Main.tileNoFail[73] = true;
			Main.tileNoFail[74] = true;
			Main.tileNoFail[82] = true;
			Main.tileNoFail[83] = true;
			Main.tileNoFail[84] = true;
			Main.tileNoFail[110] = true;
			Main.tileNoFail[113] = true;
			Main.tileNoFail[115] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[201] = true;
			Main.tileNoFail[205] = true;
			Main.tileNoFail[227] = true;
			Main.tileNoFail[233] = true;
			Main.tileNoFail[624] = true;
			Main.tileNoFail[352] = true;
			Main.tileNoFail[382] = true;
			Main.tileNoFail[528] = true;
			Main.tileNoFail[485] = true;
			Main.tileNoFail[636] = true;
			Main.tileNoFail[638] = true;
			Main.tileNoFail[656] = true;
			Main.tileLighted[638] = true;
			Main.tileFrameImportant[387] = true;
			Main.tileSolid[387] = true;
			Main.tileBlockLight[387] = true;
			Main.tileNoAttach[387] = true;
			Main.tileLavaDeath[387] = true;
			Main.tileFrameImportant[386] = true;
			Main.tileLavaDeath[386] = true;
			Main.tileNoSunLight[386] = true;
			Main.tileFrameImportant[388] = true;
			Main.tileSolid[388] = true;
			Main.tileBlockLight[388] = true;
			Main.tileNoAttach[388] = true;
			Main.tileLavaDeath[388] = true;
			Main.tileFrameImportant[389] = true;
			Main.tileLavaDeath[389] = true;
			Main.tileNoSunLight[389] = true;
			for (int l = 0; l < (int)TileID.Count; l++)
			{
				if (Main.tileSolid[l])
				{
					Main.tileNoSunLight[l] = true;
				}
				Main.tileFrame[l] = 0;
				Main.tileFrameCounter[l] = 0;
			}
			Main.tileNoSunLight[546] = false;
			Main.tileNoSunLight[379] = false;
			Main.tileNoSunLight[54] = false;
			Main.tileNoSunLight[328] = false;
			Main.tileNoSunLight[459] = false;
			Main.tileNoSunLight[19] = false;
			Main.tileNoSunLight[11] = true;
			Main.tileNoSunLight[189] = false;
			Main.tileNoSunLight[196] = false;
			Main.tileNoSunLight[48] = false;
			Main.tileNoSunLight[232] = false;
			Main.tileNoSunLight[460] = false;
			Main.tileNoSunLight[541] = false;
			Main.tileNoSunLight[388] = false;
			Main.AddEchoFurnitureTile(647);
			Main.AddEchoFurnitureTile(648);
			Main.AddEchoFurnitureTile(650);
			Main.AddEchoFurnitureTile(649);
			Main.AddEchoFurnitureTile(652);
			Main.AddEchoFurnitureTile(651);
			Main.tileFrameImportant[653] = true;
		}

		// Token: 0x0600040D RID: 1037 RVA: 0x0009D60B File Offset: 0x0009B80B
		private static void AddEchoFurnitureTile(int tileId)
		{
			Main.tileFrameImportant[tileId] = true;
			Main.tileNoFail[tileId] = true;
			Main.tileObsidianKill[tileId] = true;
		}

		// Token: 0x0600040E RID: 1038 RVA: 0x0009D628 File Offset: 0x0009B828
		private static void Initialize_TileAndNPCData1()
		{
			for (int i = 0; i < (int)TileID.Count; i++)
			{
				Main.tileGlowMask[i] = -1;
			}
			for (int j = 0; j < (int)ProjectileID.Count; j++)
			{
				Main.projFrames[j] = 1;
			}
			Main.projFrames[736] = 3;
			Main.projFrames[737] = 3;
			Main.projFrames[738] = 3;
			Main.projFrames[779] = 4;
			Main.projFrames[783] = 4;
			Main.projFrames[862] = 4;
			Main.projFrames[863] = 4;
			Main.projFrames[820] = 4;
			Main.projFrames[916] = 6;
			Main.projFrames[34] = 6;
			Main.projFrames[706] = 8;
			Main.projFrames[712] = 8;
			Main.projFrames[663] = 7;
			Main.projFrames[665] = 9;
			Main.projFrames[667] = 9;
			Main.projFrames[677] = 6;
			Main.projFrames[678] = 6;
			Main.projFrames[679] = 6;
			Main.projFrames[688] = 6;
			Main.projFrames[689] = 6;
			Main.projFrames[690] = 8;
			Main.projFrames[691] = 4;
			Main.projFrames[692] = 4;
			Main.projFrames[693] = 4;
			Main.projFrames[694] = 4;
			Main.projFrames[695] = 4;
			Main.projFrames[696] = 5;
			Main.projFrames[700] = 4;
			Main.projFrames[964] = 1;
			Main.projFrames[965] = 1;
			Main.projFrames[643] = 8;
			Main.projFrames[566] = 4;
			Main.projFrames[565] = 4;
			Main.projFrames[525] = 5;
			Main.projFrames[519] = 4;
			Main.projFrames[509] = 2;
			Main.projFrames[485] = 5;
			Main.projFrames[492] = 8;
			Main.projFrames[500] = 4;
			Main.projFrames[499] = 12;
			Main.projFrames[518] = 4;
			Main.projFrames[585] = 4;
			Main.projFrames[593] = 4;
			Main.projFrames[595] = 28;
			Main.projFrames[735] = 28;
			Main.projFrames[596] = 4;
			Main.projFrames[612] = 5;
			Main.projFrames[978] = 5;
			Main.projFrames[613] = 4;
			Main.projFrames[614] = 4;
			Main.projFrames[615] = 7;
			Main.projFrames[623] = 19;
			Main.projFrames[633] = 5;
			Main.projFrames[645] = 7;
			Main.projFrames[650] = 4;
			Main.projFrames[652] = 6;
			Main.projFrames[659] = 4;
			Main.projFrames[714] = 7;
			Main.projFrames[734] = 8;
			Main.projFrames[755] = 5;
			Main.projFrames[759] = 5;
			Main.projFrames[765] = 10;
			Main.projFrames[951] = 12;
			Main.projFrames[953] = 5;
			Main.projFrames[384] = 6;
			Main.projFrames[385] = 3;
			Main.projFrames[386] = 6;
			Main.projFrames[390] = 11;
			Main.projFrames[391] = 11;
			Main.projFrames[392] = 11;
			Main.projFrames[393] = 15;
			Main.projFrames[394] = 15;
			Main.projFrames[395] = 15;
			Main.projFrames[398] = 10;
			Main.projFrames[407] = 6;
			Main.projFrames[408] = 2;
			Main.projFrames[409] = 3;
			Main.projFrames[387] = 3;
			Main.projFrames[388] = 3;
			Main.projFrames[334] = 11;
			Main.projFrames[324] = 10;
			Main.projFrames[351] = 2;
			Main.projFrames[349] = 5;
			Main.projFrames[423] = 4;
			Main.projFrames[435] = 4;
			Main.projFrames[682] = 4;
			Main.projFrames[436] = 4;
			Main.projFrames[439] = 6;
			Main.projFrames[443] = 4;
			Main.projFrames[447] = 4;
			Main.projFrames[448] = 3;
			Main.projFrames[450] = 5;
			Main.projFrames[454] = 2;
			Main.projFrames[456] = 4;
			Main.projFrames[459] = 3;
			Main.projFrames[462] = 5;
			Main.projFrames[465] = 4;
			Main.projFrames[467] = 4;
			Main.projFrames[468] = 4;
			Main.projFrames[533] = 21;
			Main.projFrames[535] = 12;
			Main.projFrames[539] = 4;
			Main.projFrames[575] = 4;
			Main.projFrames[574] = 2;
			Main.projFrames[634] = 4;
			Main.projFrames[635] = 4;
			Main.projFrames[709] = 3;
			Main.projFrames[353] = 14;
			Main.projFrames[346] = 2;
			Main.projFrames[347] = 2;
			Main.projFrames[335] = 4;
			Main.projFrames[344] = 3;
			Main.projFrames[337] = 5;
			Main.projFrames[317] = 8;
			Main.projFrames[321] = 3;
			Main.projFrames[308] = 10;
			Main.projFrames[316] = 4;
			Main.projFrames[275] = 2;
			Main.projFrames[276] = 2;
			Main.projFrames[254] = 5;
			Main.projFrames[307] = 2;
			Main.projFrames[72] = 4;
			Main.projFrames[86] = 4;
			Main.projFrames[87] = 4;
			Main.projFrames[102] = 2;
			Main.projFrames[111] = 8;
			Main.projFrames[112] = 6;
			Main.projFrames[127] = 16;
			Main.projFrames[175] = 2;
			Main.projFrames[181] = 4;
			Main.projFrames[189] = 4;
			Main.projFrames[191] = 18;
			Main.projFrames[192] = 18;
			Main.projFrames[193] = 18;
			Main.projFrames[194] = 18;
			Main.projFrames[190] = 4;
			Main.projFrames[198] = 4;
			Main.projFrames[199] = 8;
			Main.projFrames[200] = 10;
			Main.projFrames[206] = 5;
			Main.projFrames[208] = 5;
			Main.projFrames[209] = 12;
			Main.projFrames[210] = 12;
			Main.projFrames[211] = 10;
			Main.projFrames[221] = 3;
			Main.projFrames[237] = 4;
			Main.projFrames[238] = 6;
			Main.projFrames[221] = 3;
			Main.projFrames[228] = 5;
			Main.projFrames[229] = 4;
			Main.projFrames[236] = 13;
			Main.projFrames[243] = 4;
			Main.projFrames[244] = 6;
			Main.projFrames[249] = 5;
			Main.projFrames[252] = 4;
			Main.projFrames[266] = 6;
			Main.projFrames[268] = 8;
			Main.projFrames[269] = 7;
			Main.projFrames[270] = 3;
			Main.projFrames[313] = 12;
			Main.projFrames[314] = 13;
			Main.projFrames[319] = 11;
			Main.projFrames[373] = 3;
			Main.projFrames[375] = 8;
			Main.projFrames[377] = 9;
			Main.projFrames[379] = 4;
			Main.projFrames[380] = 4;
			Main.projFrames[601] = 2;
			Main.projFrames[602] = 4;
			Main.projFrames[703] = 8;
			Main.projFrames[701] = 3;
			Main.projFrames[702] = 4;
			Main.projFrames[732] = 4;
			Main.projFrames[731] = 4;
			Main.projFrames[758] = 24;
			Main.projFrames[766] = 4;
			Main.projFrames[767] = 4;
			Main.projFrames[768] = 4;
			Main.projFrames[769] = 4;
			Main.projFrames[770] = 4;
			Main.projFrames[774] = 8;
			Main.projFrames[773] = 4;
			Main.projFrames[815] = 10;
			Main.projFrames[816] = 17;
			Main.projFrames[817] = 18;
			Main.projFrames[821] = 23;
			Main.projFrames[824] = 4;
			Main.projFrames[825] = 26;
			Main.projFrames[826] = 3;
			Main.projFrames[828] = 2;
			Main.projFrames[829] = 2;
			Main.projFrames[831] = 6;
			Main.projFrames[970] = 6;
			Main.projFrames[833] = 10;
			Main.projFrames[834] = 12;
			Main.projFrames[835] = 12;
			Main.projFrames[836] = 4;
			Main.projFrames[837] = 3;
			Main.projFrames[839] = 4;
			Main.projFrames[840] = 4;
			Main.projFrames[851] = 4;
			Main.projFrames[853] = 4;
			Main.projFrames[854] = 19;
			Main.projFrames[855] = 4;
			Main.projFrames[858] = 14;
			Main.projFrames[859] = 24;
			Main.projFrames[860] = 14;
			Main.projFrames[861] = 4;
			Main.projFrames[864] = 2;
			Main.projFrames[866] = 4;
			Main.projFrames[870] = 4;
			Main.projFrames[875] = 11;
			Main.projFrames[881] = 12;
			Main.projFrames[882] = 20;
			Main.projFrames[883] = 3;
			Main.projFrames[884] = 14;
			Main.projFrames[885] = 10;
			Main.projFrames[886] = 8;
			Main.projFrames[887] = 3;
			Main.projFrames[888] = 36;
			Main.projFrames[889] = 11;
			Main.projFrames[890] = 12;
			Main.projFrames[891] = 15;
			Main.projFrames[892] = 6;
			Main.projFrames[893] = 4;
			Main.projFrames[894] = 8;
			Main.projFrames[895] = 6;
			Main.projFrames[896] = 16;
			Main.projFrames[897] = 11;
			Main.projFrames[898] = 16;
			Main.projFrames[899] = 14;
			Main.projFrames[900] = 14;
			Main.projFrames[901] = 12;
			Main.projFrames[908] = 12;
			Main.projFrames[909] = 6;
			Main.projFrames[920] = 3;
			Main.projFrames[934] = 12;
			Main.projFrames[880] = 8;
			Main.projFrames[929] = 8;
			Main.projFrames[956] = 11;
			Main.projFrames[957] = 12;
			Main.projFrames[958] = 17;
			Main.projFrames[959] = 12;
			Main.projFrames[960] = 20;
			Main.projFrames[961] = 1;
			Main.projFrames[962] = 3;
			Main.projFrames[963] = 13;
			Main.projFrames[966] = 3;
			Main.projFrames[967] = 8;
			Main.projFrames[968] = 24;
			Main.projFrames[969] = 8;
			Main.projFrames[994] = 16;
			Main.projFrames[995] = 20;
			Main.projFrames[998] = 10;
			Main.projFrames[1003] = 16;
			Main.projFrames[1004] = 15;
			Main.projFrames[1014] = 11;
			Main.projPet[492] = true;
			Main.projPet[499] = true;
			Main.projPet[653] = true;
			Main.projPet[701] = true;
			Main.projPet[703] = true;
			Main.projPet[702] = true;
			Main.projPet[764] = true;
			Main.projPet[765] = true;
			Main.projPet[319] = true;
			Main.projPet[334] = true;
			Main.projPet[324] = true;
			Main.projPet[266] = true;
			Main.projPet[313] = true;
			Main.projPet[314] = true;
			Main.projPet[317] = true;
			Main.projPet[175] = true;
			Main.projPet[111] = true;
			Main.projPet[112] = true;
			Main.projPet[127] = true;
			Main.projPet[191] = true;
			Main.projPet[192] = true;
			Main.projPet[193] = true;
			Main.projPet[194] = true;
			Main.projPet[197] = true;
			Main.projPet[198] = true;
			Main.projPet[199] = true;
			Main.projPet[200] = true;
			Main.projPet[208] = true;
			Main.projPet[209] = true;
			Main.projPet[210] = true;
			Main.projPet[211] = true;
			Main.projPet[236] = true;
			Main.projPet[268] = true;
			Main.projPet[269] = true;
			Main.projPet[353] = true;
			Main.projPet[373] = true;
			Main.projPet[375] = true;
			Main.projPet[380] = true;
			Main.projPet[387] = true;
			Main.projPet[388] = true;
			Main.projPet[390] = true;
			Main.projPet[391] = true;
			Main.projPet[392] = true;
			Main.projPet[393] = true;
			Main.projPet[394] = true;
			Main.projPet[395] = true;
			Main.projPet[398] = true;
			Main.projPet[407] = true;
			Main.projPet[423] = true;
			Main.projPet[533] = true;
			Main.projPet[613] = true;
			Main.projPet[623] = true;
			Main.projPet[625] = true;
			Main.projPet[626] = true;
			Main.projPet[627] = true;
			Main.projPet[628] = true;
			Main.projPet[755] = true;
			Main.projPet[758] = true;
			Main.projPet[759] = true;
			Main.projPet[774] = true;
			Main.projPet[815] = true;
			Main.projPet[816] = true;
			Main.projPet[817] = true;
			Main.projPet[821] = true;
			Main.projPet[825] = true;
			Main.projPet[831] = true;
			Main.projPet[833] = true;
			Main.projPet[834] = true;
			Main.projPet[835] = true;
			Main.projPet[854] = true;
			Main.projPet[858] = true;
			Main.projPet[859] = true;
			Main.projPet[860] = true;
			Main.projPet[864] = true;
			Main.projPet[875] = true;
			Main.projPet[946] = true;
			Main.projPet[951] = true;
			Main.projPet[963] = true;
			Main.projPet[970] = true;
			Main.projPet[881] = true;
			Main.projPet[882] = true;
			Main.projPet[883] = true;
			Main.projPet[884] = true;
			Main.projPet[885] = true;
			Main.projPet[886] = true;
			Main.projPet[887] = true;
			Main.projPet[888] = true;
			Main.projPet[889] = true;
			Main.projPet[890] = true;
			Main.projPet[891] = true;
			Main.projPet[892] = true;
			Main.projPet[893] = true;
			Main.projPet[894] = true;
			Main.projPet[895] = true;
			Main.projPet[896] = true;
			Main.projPet[897] = true;
			Main.projPet[898] = true;
			Main.projPet[899] = true;
			Main.projPet[900] = true;
			Main.projPet[901] = true;
			Main.projPet[934] = true;
			Main.projPet[956] = true;
			Main.projPet[957] = true;
			Main.projPet[958] = true;
			Main.projPet[959] = true;
			Main.projPet[960] = true;
			Main.projPet[994] = true;
			Main.projPet[998] = true;
			Main.projPet[1003] = true;
			Main.projPet[1004] = true;
			Main.projPet[1018] = true;
			Main.tileLighted[237] = true;
			Main.tileLighted[27] = true;
			Main.tileLighted[381] = true;
			Main.tileLighted[534] = true;
			Main.tileLighted[536] = true;
			Main.tileLighted[539] = true;
			Main.tileLighted[625] = true;
			Main.tileLighted[627] = true;
			Main.tileLighted[184] = true;
			Main.tileLighted[463] = true;
			Main.tileLighted[491] = true;
			Main.slimeRainNPC[1] = true;
			Main.debuff[158] = true;
			Main.debuff[160] = true;
			Main.debuff[20] = true;
			Main.debuff[21] = true;
			Main.debuff[22] = true;
			Main.debuff[23] = true;
			Main.debuff[24] = true;
			Main.debuff[25] = true;
			Main.debuff[28] = true;
			Main.debuff[30] = true;
			Main.debuff[31] = true;
			Main.debuff[32] = true;
			Main.debuff[33] = true;
			Main.debuff[34] = true;
			Main.debuff[35] = true;
			Main.debuff[36] = true;
			Main.debuff[37] = true;
			Main.debuff[38] = true;
			Main.debuff[39] = true;
			Main.debuff[44] = true;
			Main.debuff[46] = true;
			Main.debuff[47] = true;
			Main.debuff[67] = true;
			Main.debuff[68] = true;
			Main.debuff[69] = true;
			Main.debuff[70] = true;
			Main.debuff[80] = true;
			Main.debuff[86] = true;
			Main.debuff[87] = true;
			Main.debuff[88] = true;
			Main.debuff[89] = true;
			Main.debuff[94] = true;
			Main.debuff[103] = true;
			Main.debuff[119] = true;
			Main.debuff[120] = true;
			Main.debuff[137] = true;
			Main.debuff[145] = true;
			Main.debuff[146] = true;
			Main.debuff[147] = true;
			Main.debuff[148] = true;
			Main.debuff[149] = true;
			Main.debuff[153] = true;
			Main.debuff[156] = true;
			Main.debuff[157] = true;
			Main.debuff[350] = true;
			Main.debuff[163] = true;
			Main.debuff[164] = true;
			Main.debuff[144] = true;
			Main.debuff[194] = true;
			Main.debuff[195] = true;
			Main.debuff[196] = true;
			Main.debuff[197] = true;
			Main.debuff[199] = true;
			Main.debuff[215] = true;
			Main.debuff[320] = true;
			Main.debuff[321] = true;
			Main.debuff[332] = true;
			Main.debuff[333] = true;
			Main.debuff[334] = true;
			Main.debuff[353] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[70] = true;
			Main.pvpBuff[24] = true;
			Main.pvpBuff[323] = true;
			Main.pvpBuff[31] = true;
			Main.pvpBuff[39] = true;
			Main.pvpBuff[44] = true;
			Main.pvpBuff[324] = true;
			Main.pvpBuff[69] = true;
			Main.pvpBuff[103] = true;
			Main.pvpBuff[119] = true;
			Main.pvpBuff[120] = true;
			Main.pvpBuff[137] = true;
			Main.pvpBuff[320] = true;
			Main.meleeBuff[71] = true;
			Main.meleeBuff[73] = true;
			Main.meleeBuff[74] = true;
			Main.meleeBuff[75] = true;
			Main.meleeBuff[76] = true;
			Main.meleeBuff[77] = true;
			Main.meleeBuff[78] = true;
			Main.meleeBuff[79] = true;
			Main.buffNoSave[20] = true;
			Main.buffNoSave[22] = true;
			Main.buffNoSave[23] = true;
			Main.buffNoSave[24] = true;
			Main.buffNoSave[28] = true;
			Main.buffNoSave[30] = true;
			Main.buffNoSave[31] = true;
			Main.buffNoSave[34] = true;
			Main.buffNoSave[35] = true;
			Main.buffNoSave[37] = true;
			Main.buffNoSave[38] = true;
			Main.buffNoSave[39] = true;
			Main.buffNoSave[43] = true;
			Main.buffNoSave[44] = true;
			Main.buffNoSave[46] = true;
			Main.buffNoSave[47] = true;
			Main.buffNoSave[48] = true;
			Main.buffNoSave[58] = true;
			Main.buffNoSave[59] = true;
			Main.buffNoSave[60] = true;
			Main.buffNoSave[62] = true;
			Main.buffNoSave[63] = true;
			Main.buffNoSave[64] = true;
			Main.buffNoSave[67] = true;
			Main.buffNoSave[68] = true;
			Main.buffNoSave[69] = true;
			Main.buffNoSave[70] = true;
			Main.buffNoSave[72] = true;
			Main.buffNoSave[80] = true;
			Main.buffNoSave[87] = true;
			Main.buffNoSave[158] = true;
			Main.buffNoSave[146] = true;
			Main.buffNoSave[147] = true;
			Main.buffNoSave[215] = true;
			Main.buffNoSave[88] = true;
			Main.buffNoSave[89] = true;
			Main.buffNoSave[94] = true;
			Main.buffNoSave[95] = true;
			Main.buffNoSave[96] = true;
			Main.buffNoSave[97] = true;
			Main.buffNoSave[98] = true;
			Main.buffNoSave[99] = true;
			Main.buffNoSave[100] = true;
			Main.buffNoSave[103] = true;
			Main.buffNoSave[118] = true;
			Main.buffNoSave[138] = true;
			Main.buffNoSave[167] = true;
			Main.buffNoSave[166] = true;
			Main.buffNoSave[184] = true;
			Main.buffNoSave[185] = true;
			Main.buffNoSave[211] = true;
			Main.buffNoSave[210] = true;
			Main.buffNoSave[119] = true;
			Main.buffNoSave[120] = true;
			Main.buffNoSave[90] = true;
			Main.buffNoSave[125] = true;
			Main.buffNoSave[126] = true;
			Main.buffNoSave[128] = true;
			Main.buffNoSave[129] = true;
			Main.buffNoSave[130] = true;
			Main.buffNoSave[131] = true;
			Main.buffNoSave[132] = true;
			Main.buffNoSave[133] = true;
			Main.buffNoSave[134] = true;
			Main.buffNoSave[135] = true;
			Main.buffNoSave[139] = true;
			Main.buffNoSave[140] = true;
			Main.buffNoSave[141] = true;
			Main.buffNoSave[142] = true;
			Main.buffNoSave[143] = true;
			Main.buffNoSave[137] = true;
			Main.buffNoSave[144] = true;
			Main.buffNoSave[161] = true;
			Main.buffNoSave[162] = true;
			Main.buffNoSave[163] = true;
			Main.buffNoSave[164] = true;
			Main.buffNoSave[168] = true;
			Main.buffNoSave[170] = true;
			Main.buffNoSave[171] = true;
			Main.buffNoSave[172] = true;
			Main.buffNoSave[182] = true;
			Main.buffNoSave[187] = true;
			Main.buffNoSave[188] = true;
			Main.buffNoSave[193] = true;
			Main.buffNoSave[194] = true;
			Main.buffNoSave[195] = true;
			Main.buffNoSave[196] = true;
			Main.buffNoSave[197] = true;
			Main.buffNoSave[198] = true;
			Main.buffNoSave[199] = true;
			Main.buffNoSave[205] = true;
			Main.buffNoSave[212] = true;
			Main.buffNoSave[213] = true;
			Main.buffNoSave[214] = true;
			Main.buffNoSave[230] = true;
			Main.buffNoSave[263] = true;
			Main.buffNoSave[265] = true;
			Main.buffNoSave[271] = true;
			Main.buffNoSave[322] = true;
			Main.buffNoSave[275] = true;
			Main.buffNoSave[276] = true;
			Main.buffNoSave[277] = true;
			Main.buffNoSave[278] = true;
			Main.buffNoSave[279] = true;
			Main.buffNoSave[280] = true;
			Main.buffNoSave[281] = true;
			Main.buffNoSave[282] = true;
			Main.buffNoSave[283] = true;
			Main.buffNoSave[305] = true;
			Main.buffNoSave[318] = true;
			Main.buffNoSave[342] = true;
			Main.buffNoSave[320] = true;
			Main.buffNoSave[321] = true;
			Main.buffNoSave[325] = true;
			Main.buffNoSave[335] = true;
			Main.buffNoSave[150] = true;
			Main.buffNoSave[93] = true;
			Main.buffNoSave[159] = true;
			Main.buffNoSave[29] = true;
			Main.buffNoSave[348] = true;
			Main.buffNoSave[353] = true;
			for (int k = 173; k <= 181; k++)
			{
				Main.buffNoSave[k] = true;
			}
			Main.buffNoTimeDisplay[19] = true;
			Main.buffNoTimeDisplay[27] = true;
			Main.buffNoTimeDisplay[28] = true;
			Main.buffNoTimeDisplay[34] = true;
			Main.buffNoTimeDisplay[37] = true;
			Main.buffNoTimeDisplay[38] = true;
			Main.buffNoTimeDisplay[40] = true;
			Main.buffNoTimeDisplay[41] = true;
			Main.buffNoTimeDisplay[42] = true;
			Main.buffNoTimeDisplay[43] = true;
			Main.buffNoTimeDisplay[45] = true;
			Main.buffNoTimeDisplay[49] = true;
			Main.buffNoTimeDisplay[60] = true;
			Main.buffNoTimeDisplay[62] = true;
			Main.buffNoTimeDisplay[64] = true;
			Main.buffNoTimeDisplay[68] = true;
			Main.buffNoTimeDisplay[81] = true;
			Main.buffNoTimeDisplay[82] = true;
			Main.buffNoTimeDisplay[83] = true;
			Main.buffNoTimeDisplay[90] = true;
			Main.buffNoTimeDisplay[95] = true;
			Main.buffNoTimeDisplay[96] = true;
			Main.buffNoTimeDisplay[97] = true;
			Main.buffNoTimeDisplay[98] = true;
			Main.buffNoTimeDisplay[99] = true;
			Main.buffNoTimeDisplay[100] = true;
			Main.buffNoTimeDisplay[101] = true;
			Main.buffNoTimeDisplay[102] = true;
			Main.buffNoTimeDisplay[118] = true;
			Main.buffNoTimeDisplay[138] = true;
			Main.buffNoTimeDisplay[167] = true;
			Main.buffNoTimeDisplay[166] = true;
			Main.buffNoTimeDisplay[184] = true;
			Main.buffNoTimeDisplay[185] = true;
			Main.buffNoTimeDisplay[211] = true;
			Main.buffNoTimeDisplay[210] = true;
			Main.buffNoTimeDisplay[125] = true;
			Main.buffNoTimeDisplay[126] = true;
			Main.buffNoTimeDisplay[128] = true;
			Main.buffNoTimeDisplay[129] = true;
			Main.buffNoTimeDisplay[130] = true;
			Main.buffNoTimeDisplay[131] = true;
			Main.buffNoTimeDisplay[132] = true;
			Main.buffNoTimeDisplay[133] = true;
			Main.buffNoTimeDisplay[134] = true;
			Main.buffNoTimeDisplay[135] = true;
			Main.buffNoTimeDisplay[136] = true;
			Main.buffNoTimeDisplay[139] = true;
			Main.buffNoTimeDisplay[140] = true;
			Main.buffNoTimeDisplay[141] = true;
			Main.buffNoTimeDisplay[142] = true;
			Main.buffNoTimeDisplay[143] = true;
			Main.buffNoTimeDisplay[137] = true;
			Main.buffNoTimeDisplay[200] = true;
			Main.buffNoTimeDisplay[202] = true;
			Main.buffNoTimeDisplay[201] = true;
			Main.buffNoTimeDisplay[161] = true;
			Main.buffNoTimeDisplay[162] = true;
			Main.buffNoTimeDisplay[163] = true;
			Main.buffNoTimeDisplay[168] = true;
			Main.buffNoTimeDisplay[170] = true;
			Main.buffNoTimeDisplay[171] = true;
			Main.buffNoTimeDisplay[172] = true;
			Main.buffNoTimeDisplay[182] = true;
			Main.buffNoTimeDisplay[165] = true;
			Main.buffNoTimeDisplay[186] = true;
			Main.buffNoTimeDisplay[187] = true;
			Main.buffNoTimeDisplay[188] = true;
			Main.buffNoTimeDisplay[193] = true;
			Main.buffNoTimeDisplay[199] = true;
			Main.buffNoTimeDisplay[212] = true;
			Main.buffNoTimeDisplay[213] = true;
			Main.buffNoTimeDisplay[214] = true;
			Main.buffNoTimeDisplay[216] = true;
			Main.buffNoTimeDisplay[217] = true;
			Main.buffNoTimeDisplay[219] = true;
			Main.buffNoTimeDisplay[230] = true;
			Main.buffNoTimeDisplay[258] = true;
			Main.buffNoTimeDisplay[259] = true;
			Main.buffNoTimeDisplay[260] = true;
			Main.buffNoTimeDisplay[261] = true;
			Main.buffNoTimeDisplay[262] = true;
			Main.buffNoTimeDisplay[263] = true;
			Main.buffNoTimeDisplay[264] = true;
			Main.buffNoTimeDisplay[265] = true;
			Main.buffNoTimeDisplay[266] = true;
			Main.buffNoTimeDisplay[267] = true;
			Main.buffNoTimeDisplay[268] = true;
			Main.buffNoTimeDisplay[271] = true;
			Main.buffNoTimeDisplay[322] = true;
			Main.buffNoTimeDisplay[274] = true;
			Main.buffNoTimeDisplay[275] = true;
			Main.buffNoTimeDisplay[276] = true;
			Main.buffNoTimeDisplay[277] = true;
			Main.buffNoTimeDisplay[278] = true;
			Main.buffNoTimeDisplay[279] = true;
			Main.buffNoTimeDisplay[280] = true;
			Main.buffNoTimeDisplay[281] = true;
			Main.buffNoTimeDisplay[282] = true;
			Main.buffNoTimeDisplay[283] = true;
			Main.buffNoTimeDisplay[284] = true;
			Main.buffNoTimeDisplay[285] = true;
			Main.buffNoTimeDisplay[286] = true;
			Main.buffNoTimeDisplay[287] = true;
			Main.buffNoTimeDisplay[288] = true;
			Main.buffNoTimeDisplay[289] = true;
			Main.buffNoTimeDisplay[290] = true;
			Main.buffNoTimeDisplay[291] = true;
			Main.buffNoTimeDisplay[292] = true;
			Main.buffNoTimeDisplay[293] = true;
			Main.buffNoTimeDisplay[294] = true;
			Main.buffNoTimeDisplay[295] = true;
			Main.buffNoTimeDisplay[296] = true;
			Main.buffNoTimeDisplay[297] = true;
			Main.buffNoTimeDisplay[298] = true;
			Main.buffNoTimeDisplay[299] = true;
			Main.buffNoTimeDisplay[300] = true;
			Main.buffNoTimeDisplay[301] = true;
			Main.buffNoTimeDisplay[302] = true;
			Main.buffNoTimeDisplay[303] = true;
			Main.buffNoTimeDisplay[304] = true;
			Main.buffNoTimeDisplay[305] = true;
			Main.buffNoTimeDisplay[317] = true;
			Main.buffNoTimeDisplay[318] = true;
			Main.buffNoTimeDisplay[342] = true;
			Main.buffNoTimeDisplay[320] = true;
			Main.buffNoTimeDisplay[325] = true;
			Main.buffNoTimeDisplay[335] = true;
			Main.buffNoTimeDisplay[341] = true;
			Main.buffNoTimeDisplay[327] = true;
			Main.buffNoTimeDisplay[328] = true;
			Main.buffNoTimeDisplay[329] = true;
			Main.buffNoTimeDisplay[330] = true;
			Main.buffNoTimeDisplay[331] = true;
			Main.buffNoTimeDisplay[334] = true;
			Main.buffNoTimeDisplay[345] = true;
			Main.buffNoTimeDisplay[349] = true;
			Main.buffNoTimeDisplay[351] = true;
			Main.buffNoTimeDisplay[352] = true;
			Main.buffNoTimeDisplay[354] = true;
			Main.buffNoTimeDisplay[29] = true;
			Main.buffNoTimeDisplay[159] = true;
			Main.buffNoTimeDisplay[150] = true;
			Main.buffNoTimeDisplay[93] = true;
			Main.buffNoTimeDisplay[348] = true;
			Main.buffNoTimeDisplay[353] = true;
			Main.persistentBuff[71] = true;
			Main.persistentBuff[73] = true;
			Main.persistentBuff[74] = true;
			Main.persistentBuff[75] = true;
			Main.persistentBuff[76] = true;
			Main.persistentBuff[77] = true;
			Main.persistentBuff[78] = true;
			Main.persistentBuff[79] = true;
			Main.Initialize_BuffDataFromMountData();
			Main.Initialize_TileAndNPCData1_Part2();
		}

		// Token: 0x0600040F RID: 1039 RVA: 0x0009F79C File Offset: 0x0009D99C
		internal static void Initialize_BuffDataFromMountData()
		{
			for (int i = 0; i < BuffID.Sets.BasicMountData.Length; i++)
			{
				if (BuffID.Sets.BasicMountData[i] != null)
				{
					Main.buffNoTimeDisplay[i] = true;
					Main.buffNoSave[i] = true;
				}
			}
		}

		// Token: 0x06000410 RID: 1040 RVA: 0x0009F7D4 File Offset: 0x0009D9D4
		private static void Initialize_TileAndNPCData1_Part2()
		{
			Main.vanityPet[40] = true;
			Main.vanityPet[41] = true;
			Main.vanityPet[42] = true;
			Main.vanityPet[45] = true;
			Main.vanityPet[50] = true;
			Main.vanityPet[51] = true;
			Main.vanityPet[52] = true;
			Main.vanityPet[53] = true;
			Main.vanityPet[54] = true;
			Main.vanityPet[55] = true;
			Main.vanityPet[56] = true;
			Main.vanityPet[61] = true;
			Main.vanityPet[154] = true;
			Main.vanityPet[65] = true;
			Main.vanityPet[66] = true;
			Main.vanityPet[81] = true;
			Main.vanityPet[82] = true;
			Main.vanityPet[84] = true;
			Main.vanityPet[85] = true;
			Main.vanityPet[91] = true;
			Main.vanityPet[92] = true;
			Main.vanityPet[127] = true;
			Main.vanityPet[136] = true;
			Main.vanityPet[191] = true;
			Main.vanityPet[202] = true;
			Main.vanityPet[200] = true;
			Main.vanityPet[218] = true;
			Main.vanityPet[219] = true;
			Main.vanityPet[217] = true;
			Main.vanityPet[258] = true;
			Main.vanityPet[259] = true;
			Main.vanityPet[260] = true;
			Main.vanityPet[261] = true;
			Main.vanityPet[262] = true;
			Main.vanityPet[264] = true;
			Main.vanityPet[266] = true;
			Main.vanityPet[267] = true;
			Main.vanityPet[268] = true;
			Main.vanityPet[274] = true;
			Main.vanityPet[284] = true;
			Main.vanityPet[285] = true;
			Main.vanityPet[286] = true;
			Main.vanityPet[287] = true;
			Main.vanityPet[288] = true;
			Main.vanityPet[289] = true;
			Main.vanityPet[290] = true;
			Main.vanityPet[291] = true;
			Main.vanityPet[292] = true;
			Main.vanityPet[293] = true;
			Main.vanityPet[295] = true;
			Main.vanityPet[296] = true;
			Main.vanityPet[297] = true;
			Main.vanityPet[300] = true;
			Main.vanityPet[301] = true;
			Main.vanityPet[302] = true;
			Main.vanityPet[303] = true;
			Main.vanityPet[304] = true;
			Main.vanityPet[317] = true;
			Main.vanityPet[341] = true;
			Main.vanityPet[327] = true;
			Main.vanityPet[328] = true;
			Main.vanityPet[329] = true;
			Main.vanityPet[330] = true;
			Main.vanityPet[331] = true;
			Main.vanityPet[345] = true;
			Main.vanityPet[349] = true;
			Main.vanityPet[351] = true;
			Main.vanityPet[352] = true;
			Main.vanityPet[354] = true;
			Main.lightPet[19] = true;
			Main.lightPet[155] = true;
			Main.lightPet[27] = true;
			Main.lightPet[101] = true;
			Main.lightPet[102] = true;
			Main.lightPet[57] = true;
			Main.lightPet[190] = true;
			Main.lightPet[152] = true;
			Main.lightPet[201] = true;
			Main.lightPet[294] = true;
			Main.lightPet[298] = true;
			Main.lightPet[299] = true;
			Main.tileFlame[4] = true;
			Main.tileFlame[33] = true;
			Main.tileFlame[34] = true;
			Main.tileFlame[35] = true;
			Main.tileFlame[42] = true;
			Main.tileFlame[49] = true;
			Main.tileFlame[93] = true;
			Main.tileFlame[98] = true;
			Main.tileFlame[100] = true;
			Main.tileFlame[173] = true;
			Main.tileFlame[174] = true;
			Main.tileFlame[372] = true;
			Main.tileFlame[646] = true;
			Main.tileRope[213] = true;
			Main.tileRope[214] = true;
			Main.tileRope[353] = true;
			Main.tileRope[365] = true;
			Main.tileRope[366] = true;
			Main.tileRope[504] = true;
			Main.tileRope[449] = true;
			Main.tileRope[450] = true;
			Main.tileRope[451] = true;
			Main.tilePile[330] = true;
			Main.tilePile[331] = true;
			Main.tilePile[332] = true;
			Main.tilePile[333] = true;
			for (int i = 0; i < (int)NPCID.Count; i++)
			{
				Main.npcCatchable[i] = false;
			}
			Main.npcCatchable[46] = true;
			Main.npcCatchable[55] = true;
			Main.npcCatchable[74] = true;
			Main.npcCatchable[148] = true;
			Main.npcCatchable[149] = true;
			Main.npcCatchable[297] = true;
			Main.npcCatchable[298] = true;
			Main.npcCatchable[299] = true;
			Main.npcCatchable[300] = true;
			Main.npcCatchable[355] = true;
			Main.npcCatchable[356] = true;
			Main.npcCatchable[357] = true;
			Main.npcCatchable[358] = true;
			Main.npcCatchable[359] = true;
			Main.npcCatchable[360] = true;
			Main.npcCatchable[361] = true;
			Main.npcCatchable[362] = true;
			Main.npcCatchable[363] = true;
			Main.npcCatchable[364] = true;
			Main.npcCatchable[365] = true;
			Main.npcCatchable[366] = true;
			Main.npcCatchable[367] = true;
			Main.npcCatchable[374] = true;
			Main.npcCatchable[377] = true;
			Main.npcCatchable[539] = true;
			Main.npcCatchable[538] = true;
			Main.npcCatchable[671] = true;
			Main.npcCatchable[672] = true;
			Main.npcCatchable[673] = true;
			Main.npcCatchable[674] = true;
			Main.npcCatchable[675] = true;
			Main.npcCatchable[484] = true;
			Main.npcCatchable[485] = true;
			Main.npcCatchable[486] = true;
			Main.npcCatchable[487] = true;
			Main.npcCatchable[583] = true;
			Main.npcCatchable[584] = true;
			Main.npcCatchable[585] = true;
			Main.npcCatchable[592] = true;
			Main.npcCatchable[593] = true;
			Main.npcCatchable[595] = true;
			Main.npcCatchable[596] = true;
			Main.npcCatchable[597] = true;
			Main.npcCatchable[598] = true;
			Main.npcCatchable[599] = true;
			Main.npcCatchable[600] = true;
			Main.npcCatchable[601] = true;
			Main.npcCatchable[604] = true;
			Main.npcCatchable[605] = true;
			Main.npcCatchable[602] = true;
			Main.npcCatchable[603] = true;
			Main.npcCatchable[606] = true;
			Main.npcCatchable[607] = true;
			Main.npcCatchable[608] = true;
			Main.npcCatchable[609] = true;
			Main.npcCatchable[610] = true;
			Main.npcCatchable[611] = true;
			Main.npcCatchable[612] = true;
			Main.npcCatchable[613] = true;
			Main.npcCatchable[614] = true;
			Main.npcCatchable[616] = true;
			Main.npcCatchable[617] = true;
			Main.npcCatchable[626] = true;
			Main.npcCatchable[627] = true;
			Main.npcCatchable[639] = true;
			Main.npcCatchable[640] = true;
			Main.npcCatchable[641] = true;
			Main.npcCatchable[642] = true;
			Main.npcCatchable[643] = true;
			Main.npcCatchable[644] = true;
			Main.npcCatchable[645] = true;
			Main.npcCatchable[646] = true;
			Main.npcCatchable[647] = true;
			Main.npcCatchable[648] = true;
			Main.npcCatchable[649] = true;
			Main.npcCatchable[650] = true;
			Main.npcCatchable[651] = true;
			Main.npcCatchable[652] = true;
			Main.npcCatchable[653] = true;
			Main.npcCatchable[654] = true;
			Main.npcCatchable[655] = true;
			Main.npcCatchable[661] = true;
			Main.npcCatchable[669] = true;
			Main.npcCatchable[677] = true;
			for (int j = 442; j <= 448; j++)
			{
				Main.npcCatchable[j] = true;
			}
			Main.SetTileValue();
			Main.tileSpelunker[6] = true;
			Main.tileSpelunker[7] = true;
			Main.tileSpelunker[8] = true;
			Main.tileSpelunker[9] = true;
			Main.tileSpelunker[12] = true;
			Main.tileSpelunker[21] = true;
			Main.tileSpelunker[467] = true;
			Main.tileSpelunker[441] = true;
			Main.tileSpelunker[468] = true;
			Main.tileSpelunker[28] = true;
			Main.tileSpelunker[107] = true;
			Main.tileSpelunker[108] = true;
			Main.tileSpelunker[111] = true;
			Main.tileSpelunker[63] = true;
			Main.tileSpelunker[64] = true;
			Main.tileSpelunker[65] = true;
			Main.tileSpelunker[66] = true;
			Main.tileSpelunker[67] = true;
			Main.tileSpelunker[68] = true;
			Main.tileSpelunker[566] = true;
			Main.tileSpelunker[166] = true;
			Main.tileSpelunker[167] = true;
			Main.tileSpelunker[168] = true;
			Main.tileSpelunker[169] = true;
			Main.tileSpelunker[178] = true;
			Main.tileSpelunker[211] = true;
			Main.tileSpelunker[221] = true;
			Main.tileSpelunker[222] = true;
			Main.tileSpelunker[223] = true;
			Main.tileSpelunker[236] = true;
			Main.tileSpelunker[37] = true;
			Main.tileSpelunker[407] = true;
			Main.tileSpelunker[227] = true;
			Main.tileSpelunker[84] = true;
			Main.tileSpelunker[83] = true;
			Main.tileSpelunker[404] = true;
			Main.tileSpelunker[242] = true;
			Main.tileSpelunker[240] = true;
			Main.tileSpelunker[246] = true;
			Main.tileSpelunker[245] = true;
			Main.tileSpelunker[105] = true;
			Main.tileSpelunker[349] = true;
			Main.tileSpelunker[337] = true;
			Main.tileSpelunker[531] = true;
			Main.tileSpelunker[506] = true;
			Main.tileSolid[379] = true;
			Main.tileMergeDirt[249] = true;
			Main.tileBrick[268] = true;
			Main.tileBrick[262] = true;
			Main.tileBrick[267] = true;
			Main.tileBrick[265] = true;
			Main.tileBrick[266] = true;
			Main.tileBrick[264] = true;
			Main.tileBrick[263] = true;
			Main.tileBrick[261] = true;
			Main.tileBrick[255] = true;
			Main.tileBrick[260] = true;
			Main.tileBrick[258] = true;
			Main.tileBrick[259] = true;
			Main.tileBrick[257] = true;
			Main.tileBrick[256] = true;
			Main.tileSolid[371] = true;
			Main.tileMergeDirt[371] = true;
			Main.tileBlockLight[371] = true;
			Main.tileBouncy[371] = true;
			Main.tileBouncy[448] = true;
			Main.tileBouncy[446] = true;
			Main.tileBouncy[447] = true;
			Main.tileFrameImportant[377] = true;
			Main.tileFrameImportant[373] = true;
			Main.tileFrameImportant[375] = true;
			Main.tileFrameImportant[374] = true;
			Main.tileFrameImportant[461] = true;
			Main.tileLighted[646] = true;
			Main.tileFrameImportant[646] = true;
			Main.tileWaterDeath[646] = true;
			Main.tileLavaDeath[646] = true;
			Main.tileLighted[372] = true;
			Main.tileFrameImportant[372] = true;
			Main.tileWaterDeath[372] = true;
			Main.tileLavaDeath[372] = true;
			Main.tileSolid[357] = true;
			Main.tileBrick[357] = true;
			Main.tileBrick[311] = true;
			Main.tileSolid[408] = true;
			Main.tileMergeDirt[408] = true;
			Main.tileBrick[408] = true;
			Main.tileBlockLight[408] = true;
			Main.tileSolid[409] = true;
			Main.tileBrick[409] = true;
			Main.tileBlockLight[409] = true;
			Main.tileSolid[669] = true;
			Main.tileBrick[669] = true;
			Main.tileBlockLight[669] = true;
			Main.tileSolid[670] = true;
			Main.tileBrick[670] = true;
			Main.tileBlockLight[670] = true;
			Main.tileSolid[671] = true;
			Main.tileBrick[671] = true;
			Main.tileBlockLight[671] = true;
			Main.tileSolid[672] = true;
			Main.tileBrick[672] = true;
			Main.tileBlockLight[672] = true;
			Main.tileSolid[673] = true;
			Main.tileBrick[673] = true;
			Main.tileBlockLight[673] = true;
			Main.tileSolid[674] = true;
			Main.tileBrick[674] = true;
			Main.tileBlockLight[674] = true;
			Main.tileSolid[675] = true;
			Main.tileBrick[675] = true;
			Main.tileBlockLight[675] = true;
			Main.tileSolid[676] = true;
			Main.tileBrick[676] = true;
			Main.tileBlockLight[676] = true;
			Main.tileSolid[677] = true;
			Main.tileBrick[677] = true;
			Main.tileBlockLight[677] = true;
			Main.tileMergeDirt[677] = true;
			Main.tileSolid[678] = true;
			Main.tileBrick[678] = true;
			Main.tileBlockLight[678] = true;
			Main.tileMergeDirt[678] = true;
			Main.tileSolid[679] = true;
			Main.tileBrick[679] = true;
			Main.tileBlockLight[679] = true;
			Main.tileMergeDirt[679] = true;
			Main.tileSolid[680] = true;
			Main.tileBrick[680] = true;
			Main.tileBlockLight[680] = true;
			Main.tileMergeDirt[680] = true;
			Main.tileSolid[681] = true;
			Main.tileBrick[681] = true;
			Main.tileBlockLight[681] = true;
			Main.tileMergeDirt[681] = true;
			Main.tileSolid[682] = true;
			Main.tileBrick[682] = true;
			Main.tileBlockLight[682] = true;
			Main.tileMergeDirt[682] = true;
			Main.tileSolid[683] = true;
			Main.tileBrick[683] = true;
			Main.tileBlockLight[683] = true;
			Main.tileMergeDirt[683] = true;
			Main.tileSolid[684] = true;
			Main.tileBrick[684] = true;
			Main.tileBlockLight[684] = true;
			Main.tileMergeDirt[684] = true;
			Main.tileSolid[685] = true;
			Main.tileBrick[685] = true;
			Main.tileBlockLight[685] = true;
			Main.tileMergeDirt[685] = true;
			Main.tileSolid[686] = true;
			Main.tileBrick[686] = true;
			Main.tileBlockLight[686] = true;
			Main.tileMergeDirt[686] = true;
			Main.tileSolid[666] = true;
			Main.tileBlockLight[666] = true;
			Main.tileBrick[666] = true;
			Main.tileMergeDirt[666] = true;
			Main.tileNoFail[666] = true;
			Main.tileSolid[415] = true;
			Main.tileBrick[415] = true;
			Main.tileLighted[415] = true;
			Main.tileBlockLight[415] = true;
			Main.tileSolid[416] = true;
			Main.tileBrick[416] = true;
			Main.tileLighted[416] = true;
			Main.tileBlockLight[416] = true;
			Main.tileSolid[417] = true;
			Main.tileBrick[417] = true;
			Main.tileLighted[417] = true;
			Main.tileBlockLight[417] = true;
			Main.tileSolid[418] = true;
			Main.tileBrick[418] = true;
			Main.tileLighted[418] = true;
			Main.tileBlockLight[418] = true;
			Main.tileSolid[498] = true;
			Main.tileBrick[498] = true;
			Main.tileBlockLight[498] = true;
			Main.tileBrick[37] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[232] = true;
			Main.tileSolid[311] = true;
			Main.tileBlockLight[311] = true;
			Main.tileSolid[312] = true;
			Main.tileBlockLight[313] = true;
			Main.tileSolid[313] = true;
			Main.tileBlockLight[312] = true;
			Main.tileMergeDirt[311] = true;
			Main.tileSolid[315] = true;
			Main.tileBlockLight[315] = true;
			Main.tileMergeDirt[315] = true;
			Main.tileBrick[315] = true;
			Main.tileSolid[641] = true;
			Main.tileBlockLight[641] = true;
			Main.tileMergeDirt[641] = true;
			Main.tileBrick[641] = true;
			Main.tileSolid[659] = true;
			Main.tileBlockLight[659] = true;
			Main.tileLighted[659] = true;
			Main.tileBrick[659] = true;
			Main.tileSolid[667] = true;
			Main.tileBlockLight[667] = true;
			Main.tileBrick[667] = true;
			Main.tileLighted[667] = true;
			Main.tileSolid[321] = true;
			Main.tileSolid[322] = true;
			Main.tileBlockLight[321] = true;
			Main.tileBlockLight[322] = true;
			Main.tileMergeDirt[321] = true;
			Main.tileMergeDirt[322] = true;
			Main.tileBrick[321] = true;
			Main.tileBrick[322] = true;
			Main.tileSolid[635] = true;
			Main.tileBlockLight[635] = true;
			Main.tileMergeDirt[635] = true;
			Main.tileBrick[635] = true;
			Main.tileFrameImportant[639] = true;
			Main.tileLavaDeath[639] = true;
			Main.tileSpelunker[639] = true;
			Main.tileShine[639] = 300;
			Main.tileShine2[639] = true;
			Main.tileLavaDeath[668] = true;
			Main.tileSolid[668] = true;
			Main.tileBlockLight[668] = true;
			Main.tileShine[239] = 1100;
			Main.tileSolid[239] = true;
			Main.tileSolidTop[239] = true;
			Main.tileSolid[380] = true;
			Main.tileSolidTop[380] = true;
			Main.tileFrameImportant[358] = true;
			Main.tileFrameImportant[359] = true;
			Main.tileFrameImportant[360] = true;
			Main.tileFrameImportant[361] = true;
			Main.tileFrameImportant[362] = true;
			Main.tileFrameImportant[363] = true;
			Main.tileFrameImportant[364] = true;
			Main.tileFrameImportant[391] = true;
			Main.tileLighted[391] = true;
			Main.tileFrameImportant[392] = true;
			Main.tileFrameImportant[393] = true;
			Main.tileFrameImportant[394] = true;
			Main.tileFrameImportant[542] = true;
			Main.tileFrameImportant[505] = true;
			Main.tileFrameImportant[521] = true;
			Main.tileFrameImportant[522] = true;
			Main.tileFrameImportant[523] = true;
			Main.tileFrameImportant[524] = true;
			Main.tileFrameImportant[525] = true;
			Main.tileFrameImportant[526] = true;
			Main.tileFrameImportant[527] = true;
			Main.tileFrameImportant[543] = true;
			Main.tileFrameImportant[568] = true;
			Main.tileFrameImportant[569] = true;
			Main.tileFrameImportant[570] = true;
			Main.tileFrameImportant[598] = true;
			Main.tileFrameImportant[356] = true;
			Main.tileFrameImportant[663] = true;
			Main.tileFrameImportant[334] = true;
			Main.tileFrameImportant[440] = true;
			Main.tileFrameImportant[471] = true;
			Main.tileFrameImportant[300] = true;
			Main.tileFrameImportant[301] = true;
			Main.tileFrameImportant[302] = true;
			Main.tileFrameImportant[303] = true;
			Main.tileFrameImportant[304] = true;
			Main.tileFrameImportant[305] = true;
			Main.tileFrameImportant[306] = true;
			Main.tileFrameImportant[307] = true;
			Main.tileFrameImportant[308] = true;
			Main.tileFrameImportant[354] = true;
			Main.tileLighted[354] = true;
			Main.tileFrameImportant[499] = true;
			Main.tileFrameImportant[355] = true;
			Main.tileFrameImportant[324] = true;
			Main.tileObsidianKill[324] = true;
			Main.tileLavaDeath[324] = true;
			Main.tileFrameImportant[463] = true;
			Main.tileFrameImportant[491] = true;
			Main.tileFrameImportant[464] = true;
			Main.tileFrameImportant[466] = true;
			Main.tileFrameImportant[419] = true;
			Main.tileFrameImportant[442] = true;
			Main.tileFrameImportant[443] = true;
			Main.tileFrameImportant[444] = true;
			Main.tileFrameImportant[420] = true;
			Main.tileFrameImportant[423] = true;
			Main.tileFrameImportant[424] = true;
			Main.tileFrameImportant[428] = true;
			Main.tileFrameImportant[520] = true;
			Main.tileFrameImportant[429] = true;
			Main.tileFrameImportant[445] = true;
			Main.tileFrameImportant[476] = true;
			Main.tileFrameImportant[283] = true;
			Main.tileFrameImportant[288] = true;
			Main.tileFrameImportant[289] = true;
			Main.tileFrameImportant[290] = true;
			Main.tileFrameImportant[291] = true;
			Main.tileFrameImportant[292] = true;
			Main.tileFrameImportant[293] = true;
			Main.tileFrameImportant[294] = true;
			Main.tileFrameImportant[295] = true;
			Main.tileFrameImportant[296] = true;
			Main.tileFrameImportant[297] = true;
			Main.tileFrameImportant[316] = true;
			Main.tileFrameImportant[317] = true;
			Main.tileFrameImportant[318] = true;
			Main.tileLargeFrames[284] = 1;
			Main.wallHouse[224] = true;
			Main.wallLargeFrames[224] = 2;
			Main.wallHouse[323] = true;
			Main.wallLargeFrames[323] = 2;
			Main.wallHouse[324] = true;
			Main.wallLargeFrames[324] = 2;
			Main.wallHouse[325] = true;
			Main.wallLargeFrames[325] = 2;
			Main.wallHouse[326] = true;
			Main.wallLargeFrames[326] = 2;
			Main.wallHouse[327] = true;
			Main.wallLargeFrames[327] = 2;
			Main.wallHouse[328] = true;
			Main.wallLargeFrames[328] = 2;
			Main.wallHouse[329] = true;
			Main.wallLargeFrames[329] = 2;
			Main.wallHouse[330] = true;
			Main.wallLargeFrames[330] = 2;
			Main.wallHouse[331] = true;
			Main.wallHouse[332] = true;
			Main.wallHouse[333] = true;
			Main.wallHouse[334] = true;
			Main.wallHouse[335] = true;
			Main.wallHouse[336] = true;
			Main.wallHouse[337] = true;
			Main.wallHouse[338] = true;
			Main.wallHouse[339] = true;
			Main.wallHouse[340] = true;
			Main.wallHouse[341] = true;
			Main.wallHouse[342] = true;
			Main.wallHouse[343] = true;
			Main.wallHouse[344] = true;
			Main.wallHouse[345] = true;
			Main.wallHouse[346] = true;
			Main.wallHouse[60] = true;
			Main.wallHouse[225] = true;
			Main.wallHouse[226] = true;
			Main.wallHouse[227] = true;
			Main.wallHouse[231] = true;
			Main.wallHouse[232] = true;
			Main.wallHouse[233] = true;
			Main.wallHouse[235] = true;
			Main.wallHouse[234] = true;
			Main.wallHouse[312] = true;
			Main.wallHouse[313] = true;
			Main.wallHouse[237] = true;
			Main.wallHouse[238] = true;
			Main.wallHouse[239] = true;
			Main.wallHouse[240] = true;
			Main.tileLargeFrames[409] = 2;
			Main.tileLargeFrames[669] = 2;
			Main.tileLargeFrames[670] = 2;
			Main.tileLargeFrames[671] = 2;
			Main.tileLargeFrames[672] = 2;
			Main.tileLargeFrames[673] = 2;
			Main.tileLargeFrames[674] = 2;
			Main.tileLargeFrames[675] = 2;
			Main.tileLargeFrames[676] = 2;
			Main.tileFrameImportant[410] = true;
			Main.tileFrameImportant[480] = true;
			Main.tileFrameImportant[509] = true;
			Main.tileFrameImportant[657] = true;
			Main.tileFrameImportant[658] = true;
			Main.tileLighted[658] = true;
			Main.wallHouse[173] = true;
			Main.wallHouse[183] = true;
			Main.wallHouse[179] = true;
			Main.wallLargeFrames[179] = 1;
			Main.tileSolid[367] = true;
			Main.tileBlockLight[367] = true;
			Main.tileMergeDirt[367] = true;
			Main.tileSolid[357] = true;
			Main.tileBlockLight[357] = true;
			Main.tileLargeFrames[357] = 1;
			Main.tileBlendAll[357] = true;
			Main.wallHouse[184] = true;
			Main.wallHouse[181] = true;
			Main.tileSolid[368] = true;
			Main.tileBlockLight[368] = true;
			Main.tileMergeDirt[368] = true;
			Main.tileSolid[369] = true;
			Main.tileBlockLight[369] = true;
			Main.tileBrick[369] = true;
			Main.tileMergeDirt[369] = true;
			Main.wallHouse[186] = true;
			Main.tileLargeFrames[325] = 1;
			Main.tileSolid[325] = true;
			Main.tileBlockLight[325] = true;
			Main.wallLargeFrames[146] = 1;
			Main.wallLargeFrames[147] = 1;
			Main.wallLargeFrames[167] = 1;
			Main.wallLargeFrames[185] = 2;
			Main.wallLargeFrames[274] = 2;
			Main.tileSolid[460] = true;
			Main.tileSolid[326] = true;
			Main.tileBlockLight[326] = true;
			Main.tileBrick[326] = true;
			Main.tileSolid[458] = true;
			Main.tileBlockLight[458] = true;
			Main.tileBrick[458] = true;
			Main.tileSolid[459] = true;
			Main.tileBrick[459] = true;
			Main.tileSolid[327] = true;
			Main.tileBlockLight[327] = true;
			Main.tileBrick[327] = true;
			Main.tileSolid[345] = true;
			Main.tileBlockLight[345] = true;
			Main.tileBrick[345] = true;
			Main.tileLighted[327] = true;
			Main.tileSolid[328] = true;
			Main.tileBrick[328] = true;
			Main.tileSolid[329] = true;
			Main.tileBrick[329] = true;
			Main.tileBlockLight[329] = true;
			Main.tileSolid[507] = true;
			Main.tileBlockLight[507] = true;
			Main.tileBrick[507] = true;
			Main.tileSolid[508] = true;
			Main.tileBlockLight[508] = true;
			Main.tileBrick[508] = true;
			Main.tileLighted[336] = true;
			Main.tileLighted[340] = true;
			Main.tileLighted[341] = true;
			Main.tileLighted[342] = true;
			Main.tileLighted[343] = true;
			Main.tileLighted[344] = true;
			Main.tileLighted[349] = true;
			Main.tileLighted[598] = true;
			Main.tileSolid[421] = true;
			Main.tileBlockLight[421] = true;
			Main.tileSolid[422] = true;
			Main.tileBlockLight[422] = true;
			Main.tileSolid[426] = true;
			Main.tileBlockLight[426] = true;
			Main.tileSolid[430] = true;
			Main.tileBlockLight[430] = true;
			Main.tileSolid[431] = true;
			Main.tileBlockLight[431] = true;
			Main.tileSolid[432] = true;
			Main.tileBlockLight[432] = true;
			Main.tileSolid[433] = true;
			Main.tileBlockLight[433] = true;
			Main.tileSolid[434] = true;
			Main.tileBlockLight[434] = true;
			Main.tileSolid[446] = true;
			Main.tileSolid[447] = true;
			Main.tileSolid[448] = true;
			Main.tileFrameImportant[427] = true;
			Main.tileSolidTop[427] = true;
			Main.tileSolid[427] = true;
			Main.tileNoAttach[427] = true;
			Main.tileTable[427] = true;
			Main.tileLavaDeath[427] = true;
			Main.tileNoSunLight[427] = false;
			Main.tileSolid[476] = true;
			for (int num = 435; num <= 439; num++)
			{
				Main.tileFrameImportant[num] = true;
				Main.tileSolidTop[num] = true;
				Main.tileSolid[num] = true;
				Main.tileNoAttach[num] = true;
				Main.tileTable[num] = true;
				Main.tileLavaDeath[num] = true;
				Main.tileNoSunLight[num] = false;
			}
			Main.tileSolid[284] = true;
			Main.tileBlockLight[284] = true;
			Main.tileSolid[346] = true;
			Main.tileBlockLight[346] = true;
			Main.tileLighted[346] = true;
			Main.tileShine[346] = 2000;
			Main.tileShine2[346] = true;
			Main.tileBrick[346] = true;
			Main.tileMergeDirt[346] = true;
			Main.tileSolid[347] = true;
			Main.tileBlockLight[347] = true;
			Main.tileLighted[347] = true;
			Main.tileShine[347] = 1900;
			Main.tileShine2[347] = true;
			Main.tileBrick[347] = true;
			Main.tileMergeDirt[347] = true;
			Main.tileSolid[348] = true;
			Main.tileBlockLight[348] = true;
			Main.tileLighted[348] = true;
			Main.tileShine[348] = 1800;
			Main.tileShine2[348] = true;
			Main.tileBrick[348] = true;
			Main.tileMergeDirt[348] = true;
			Main.tileSolid[350] = true;
			Main.tileBlockLight[350] = true;
			Main.tileLighted[350] = true;
			Main.tileBrick[350] = true;
			Main.tileMergeDirt[350] = true;
			Main.tileGlowMask[350] = 94;
			Main.tileGlowMask[390] = 130;
			Main.tileGlowMask[381] = 126;
			Main.tileGlowMask[517] = 258;
			Main.tileGlowMask[687] = 336;
			Main.tileGlowMask[534] = 259;
			Main.tileGlowMask[535] = 260;
			Main.tileGlowMask[689] = 338;
			Main.tileGlowMask[536] = 261;
			Main.tileGlowMask[537] = 262;
			Main.tileGlowMask[690] = 339;
			Main.tileGlowMask[539] = 263;
			Main.tileGlowMask[540] = 264;
			Main.tileGlowMask[688] = 337;
			Main.tileGlowMask[625] = 311;
			Main.tileGlowMask[626] = 312;
			Main.tileGlowMask[691] = 340;
			Main.tileGlowMask[627] = 313;
			Main.tileGlowMask[628] = 314;
			Main.tileGlowMask[692] = 341;
			Main.tileGlowMask[370] = 111;
			Main.tileGlowMask[429] = 214;
			Main.tileGlowMask[209] = 215;
			Main.tileGlowMask[445] = 214;
			Main.tileGlowMask[129] = -2;
			Main.tileGlowMask[633] = 326;
			Main.tileGlowMask[659] = 348;
			Main.tileGlowMask[667] = 349;
			Main.tileLighted[429] = true;
			Main.tileLighted[209] = true;
			Main.tileGlowMask[410] = 201;
			Main.tileGlowMask[509] = 265;
			Main.tileGlowMask[658] = 333;
			Main.tileSolid[370] = true;
			Main.tileBlockLight[370] = true;
			Main.tileLighted[370] = true;
			Main.tileShine[370] = 1900;
			Main.tileShine2[370] = true;
			Main.tileBrick[370] = true;
			Main.tileMergeDirt[370] = true;
			Main.tileContainer[21] = true;
			Main.tileContainer[467] = true;
			Main.tileContainer[88] = true;
			Main.tileContainer[470] = true;
			Main.tileContainer[475] = true;
			Main.tileSign[55] = true;
			Main.tileSign[85] = true;
			Main.tileSign[425] = true;
			Main.tileSign[573] = true;
			Main.tileSolid[383] = true;
			Main.tileBrick[383] = true;
			Main.tileBlockLight[383] = true;
			Main.tileSolid[385] = true;
			Main.tileBrick[385] = true;
			Main.tileBlockLight[385] = true;
			Main.tileSolid[472] = true;
			Main.tileBrick[472] = true;
			Main.tileMergeDirt[472] = true;
			Main.tileBlockLight[472] = true;
			Main.tileSolid[473] = true;
			Main.tileBrick[473] = true;
			Main.tileMergeDirt[473] = true;
			Main.tileBlockLight[473] = true;
			Main.tileSolid[500] = true;
			Main.tileBrick[500] = true;
			Main.tileLighted[500] = true;
			Main.tileMergeDirt[500] = true;
			Main.tileBlockLight[500] = true;
			Main.tileSolid[501] = true;
			Main.tileBrick[501] = true;
			Main.tileLighted[501] = true;
			Main.tileMergeDirt[501] = true;
			Main.tileBlockLight[501] = true;
			Main.tileSolid[502] = true;
			Main.tileBrick[502] = true;
			Main.tileLighted[502] = true;
			Main.tileMergeDirt[502] = true;
			Main.tileBlockLight[502] = true;
			Main.tileSolid[503] = true;
			Main.tileBrick[503] = true;
			Main.tileLighted[503] = true;
			Main.tileMergeDirt[503] = true;
			Main.tileBlockLight[503] = true;
			Main.tileSolid[541] = true;
			Main.tileBlockLight[541] = false;
			Main.tileSolid[546] = true;
			Main.tileBlockLight[546] = false;
			Main.tileSolid[557] = true;
			Main.tileBlockLight[557] = true;
			Main.tileSolid[474] = true;
			Main.tileBrick[474] = true;
			Main.tileMergeDirt[474] = true;
			Main.tileBlockLight[474] = true;
			Main.tileSolid[478] = true;
			Main.tileBrick[478] = true;
			Main.tileMergeDirt[478] = true;
			Main.tileBlockLight[478] = true;
			Main.tileSolid[479] = true;
			Main.tileBrick[479] = true;
			Main.tileMergeDirt[479] = true;
			Main.tileBlockLight[479] = true;
			Main.tileSolid[562] = true;
			Main.tileBrick[562] = true;
			Main.tileBlockLight[562] = true;
			Main.tileMergeDirt[562] = true;
			Main.tileSolid[563] = true;
			Main.tileBrick[563] = true;
			Main.tileBlockLight[563] = true;
			Main.tileMergeDirt[563] = true;
			Main.tileSolid[496] = true;
			Main.tileBrick[496] = true;
			Main.tileMergeDirt[496] = true;
			Main.tileBlockLight[496] = true;
			Main.tileSolid[495] = true;
			Main.tileBrick[495] = true;
			Main.tileMergeDirt[495] = true;
			Main.tileBlockLight[495] = true;
			Main.tileSolid[396] = true;
			Main.tileBlockLight[396] = true;
			Main.tileSolid[397] = true;
			Main.tileBlockLight[397] = true;
			Main.tileSolid[399] = true;
			Main.tileBlockLight[399] = true;
			Main.tileSolid[401] = true;
			Main.tileBlockLight[401] = true;
			Main.tileSolid[398] = true;
			Main.tileBlockLight[398] = true;
			Main.tileSolid[400] = true;
			Main.tileBlockLight[400] = true;
			Main.tileSolid[402] = true;
			Main.tileBlockLight[402] = true;
			Main.tileSolid[403] = true;
			Main.tileBlockLight[403] = true;
			Main.tileSolid[404] = true;
			Main.tileBlockLight[404] = true;
			Main.tileSolid[407] = true;
			Main.tileBlockLight[407] = true;
			Main.tileShine2[407] = true;
			Main.tileShine[407] = 1000;
			Main.tileFrameImportant[36] = true;
			Main.tileFrameImportant[275] = true;
			Main.tileFrameImportant[276] = true;
			Main.tileFrameImportant[277] = true;
			Main.tileFrameImportant[278] = true;
			Main.tileFrameImportant[279] = true;
			Main.tileFrameImportant[280] = true;
			Main.tileFrameImportant[281] = true;
			Main.tileFrameImportant[282] = true;
			Main.tileFrameImportant[285] = true;
			Main.tileFrameImportant[286] = true;
			Main.tileFrameImportant[414] = true;
			Main.tileFrameImportant[413] = true;
			Main.tileFrameImportant[309] = true;
			Main.tileFrameImportant[310] = true;
			Main.tileFrameImportant[339] = true;
			Main.tileFrameImportant[532] = true;
			Main.tileLighted[286] = true;
			Main.tileLighted[302] = true;
			Main.tileFrameImportant[298] = true;
			Main.tileFrameImportant[299] = true;
			Main.tileSolid[170] = true;
			Main.tileBlockLight[170] = true;
			Main.tileFrameImportant[171] = true;
			Main.tileLighted[171] = true;
			Main.tileFrameImportant[247] = true;
			Main.tileFrameImportant[245] = true;
			Main.tileFrameImportant[246] = true;
			Main.tileFrameImportant[239] = true;
			Main.tileFrameImportant[240] = true;
			Main.tileFrameImportant[241] = true;
			Main.tileFrameImportant[242] = true;
			Main.tileFrameImportant[243] = true;
			Main.tileFrameImportant[244] = true;
			Main.tileFrameImportant[254] = true;
			Main.tileSolid[221] = true;
			Main.tileBlockLight[221] = true;
			Main.tileMergeDirt[221] = true;
			Main.tileLighted[96] = true;
			Main.tileMergeDirt[250] = true;
			Main.tileSolid[272] = true;
			Main.tileBlockLight[272] = true;
			Main.tileSolid[229] = true;
			Main.tileBlockLight[229] = true;
			Main.tileMergeDirt[229] = true;
			Main.tileSolid[230] = true;
			Main.tileBlockLight[230] = true;
			Main.tileMergeDirt[230] = true;
			Main.tileSolid[222] = true;
			Main.tileBlockLight[222] = true;
			Main.tileMergeDirt[222] = true;
			Main.tileSolid[223] = true;
			Main.tileBlockLight[223] = true;
			Main.tileMergeDirt[223] = true;
			Main.tileSolid[224] = true;
			Main.tileBlockLight[224] = true;
			Main.tileFrameImportant[237] = true;
			Main.tileFrameImportant[238] = true;
			Main.tileSolid[225] = true;
			Main.tileBlockLight[225] = true;
			Main.tileBrick[225] = true;
			Main.tileSolid[226] = true;
			Main.tileBlockLight[226] = true;
			Main.tileBrick[226] = true;
			Main.tileSolid[235] = true;
			Main.tileBlockLight[235] = true;
			Main.tileFrameImportant[235] = true;
			Main.tileLighted[238] = true;
			Main.tileCut[254] = true;
			Main.tileFrameImportant[236] = true;
			Main.tileCut[236] = true;
			Main.tileSolid[191] = true;
			Main.tileBrick[191] = true;
			Main.tileBlockLight[191] = true;
			Main.tileSolid[211] = true;
			Main.tileBlockLight[211] = true;
			Main.tileSolid[208] = true;
			Main.tileBrick[208] = true;
			Main.tileBlockLight[208] = true;
			Main.tileSolid[192] = true;
			Main.tileBlockLight[192] = true;
			Main.tileSolid[193] = true;
			Main.tileBrick[193] = true;
			Main.tileBlockLight[193] = true;
			Main.tileMergeDirt[193] = true;
			Main.tileSolid[194] = true;
			Main.tileBrick[194] = true;
			Main.tileBlockLight[194] = true;
			Main.tileSolid[195] = true;
			Main.tileBrick[195] = true;
			Main.tileMergeDirt[195] = true;
			Main.tileBlockLight[195] = true;
			Main.tileBlockLight[200] = true;
			Main.tileSolid[200] = true;
			Main.tileBrick[200] = true;
			Main.tileBlockLight[203] = true;
			Main.tileSolid[203] = true;
			Main.tileMergeDirt[203] = true;
			Main.tileBlockLight[204] = true;
			Main.tileSolid[204] = true;
			Main.tileMergeDirt[204] = true;
			Main.tileBlockLight[165] = true;
			Main.tileShine2[147] = true;
			Main.tileShine2[161] = true;
			Main.tileShine2[163] = true;
			Main.tileShine2[164] = true;
			Main.tileSolid[189] = true;
			Main.tileBlockLight[51] = true;
			Main.tileLighted[204] = true;
			Main.tileShine[204] = 1150;
			Main.tileShine2[204] = true;
			Main.tileSolid[190] = true;
			Main.tileBlockLight[190] = true;
			Main.tileBrick[190] = true;
			Main.tileSolid[198] = true;
			Main.tileMergeDirt[198] = true;
			Main.tileBrick[198] = true;
			Main.tileBlockLight[198] = true;
			Main.tileSolid[206] = true;
			Main.tileBlockLight[206] = true;
			Main.tileMergeDirt[206] = true;
			Main.tileBrick[206] = true;
			Main.tileBlockLight[234] = true;
			Main.tileSolid[248] = true;
			Main.tileSolid[249] = true;
			Main.tileSolid[250] = true;
			Main.tileBrick[248] = true;
			Main.tileBrick[249] = true;
			Main.tileBrick[250] = true;
			Main.tileSolid[251] = true;
			Main.tileSolid[252] = true;
			Main.tileBrick[252] = true;
			Main.tileSolid[253] = true;
			Main.tileBrick[253] = true;
			Main.tileMergeDirt[251] = true;
			Main.tileMergeDirt[252] = true;
			Main.tileMergeDirt[253] = true;
			Main.tileBlockLight[251] = true;
			Main.tileBlockLight[252] = true;
			Main.tileBlockLight[253] = true;
			Main.tileBlockLight[248] = true;
			Main.tileBlockLight[249] = true;
			Main.tileBlockLight[250] = true;
			Main.tileLargeFrames[273] = 1;
			Main.tileSolid[273] = true;
			Main.tileBlockLight[273] = true;
			Main.tileLargeFrames[274] = 1;
			Main.tileSolid[274] = true;
			Main.tileBlockLight[274] = true;
			Main.tileLargeFrames[618] = 1;
			Main.tileSolid[618] = true;
			Main.tileBlockLight[618] = true;
			for (int num2 = 255; num2 <= 268; num2++)
			{
				Main.tileSolid[num2] = true;
				if (num2 > 261)
				{
					Main.tileLighted[num2] = true;
					Main.tileShine2[num2] = true;
				}
			}
			Main.tileFrameImportant[269] = true;
			Main.tileFrameImportant[470] = true;
			Main.tileFrameImportant[475] = true;
			Main.tileFrameImportant[390] = true;
			Main.tileFrameImportant[597] = true;
			Main.tileLighted[597] = true;
			Main.tileNoAttach[390] = true;
			Main.tileLavaDeath[390] = true;
			Main.tileLighted[390] = true;
			Main.tileFrameImportant[617] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[169] = true;
			Main.wallHouse[142] = true;
			Main.wallHouse[143] = true;
			Main.wallHouse[144] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[151] = true;
			Main.wallHouse[150] = true;
			Main.wallHouse[152] = true;
			Main.wallHouse[145] = true;
			Main.wallHouse[148] = true;
			Main.wallHouse[175] = true;
			Main.wallHouse[176] = true;
			Main.wallHouse[182] = true;
			for (int num3 = 153; num3 < 167; num3++)
			{
				Main.wallHouse[num3] = true;
			}
			Main.wallHouse[146] = true;
			Main.wallHouse[147] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[167] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[133] = true;
			Main.wallHouse[134] = true;
			Main.wallHouse[135] = true;
			Main.wallHouse[136] = true;
			Main.wallHouse[137] = true;
			Main.wallHouse[75] = true;
			Main.wallHouse[76] = true;
			Main.wallHouse[78] = true;
			Main.wallHouse[82] = true;
			Main.wallHouse[77] = true;
			Main.wallHouse[1] = true;
			Main.wallHouse[4] = true;
			Main.wallHouse[5] = true;
			Main.wallHouse[6] = true;
			Main.wallHouse[10] = true;
			Main.wallHouse[11] = true;
			Main.wallHouse[12] = true;
			Main.wallHouse[16] = true;
			Main.wallHouse[17] = true;
			Main.wallHouse[18] = true;
			Main.wallHouse[19] = true;
			Main.wallHouse[20] = true;
			Main.wallHouse[21] = true;
			Main.wallHouse[22] = true;
			Main.wallHouse[23] = true;
			Main.wallHouse[24] = true;
			Main.wallHouse[25] = true;
			Main.wallHouse[26] = true;
			Main.wallHouse[27] = true;
			Main.wallHouse[29] = true;
			Main.wallHouse[30] = true;
			Main.wallHouse[31] = true;
			Main.wallHouse[32] = true;
			Main.wallHouse[33] = true;
			Main.wallHouse[34] = true;
			Main.wallHouse[35] = true;
			Main.wallHouse[36] = true;
			Main.wallHouse[37] = true;
			Main.wallHouse[38] = true;
			Main.wallHouse[39] = true;
			Main.wallHouse[41] = true;
			Main.wallHouse[42] = true;
			Main.wallHouse[43] = true;
			Main.wallHouse[44] = true;
			Main.wallHouse[45] = true;
			Main.wallHouse[46] = true;
			Main.wallHouse[47] = true;
			Main.wallHouse[66] = true;
			Main.wallHouse[67] = true;
			Main.wallHouse[68] = true;
			Main.wallHouse[72] = true;
			Main.wallHouse[73] = true;
			Main.wallHouse[107] = true;
			Main.wallHouse[106] = true;
			Main.wallHouse[245] = true;
			Main.wallHouse[315] = true;
			Main.wallHouse[316] = true;
			Main.wallHouse[317] = true;
			Main.wallHouse[109] = true;
			Main.wallHouse[110] = true;
			Main.wallHouse[111] = true;
			Main.wallHouse[112] = true;
			Main.wallHouse[113] = true;
			Main.wallHouse[114] = true;
			Main.wallHouse[115] = true;
			Main.wallHouse[116] = true;
			Main.wallHouse[117] = true;
			Main.wallHouse[118] = true;
			Main.wallHouse[119] = true;
			Main.wallHouse[120] = true;
			Main.wallHouse[121] = true;
			Main.wallHouse[122] = true;
			Main.wallHouse[123] = true;
			Main.wallHouse[124] = true;
			Main.wallHouse[125] = true;
			Main.wallHouse[108] = true;
			Main.wallHouse[100] = true;
			Main.wallHouse[101] = true;
			Main.wallHouse[102] = true;
			Main.wallHouse[103] = true;
			Main.wallHouse[104] = true;
			Main.wallHouse[105] = true;
			Main.wallHouse[84] = true;
			Main.wallHouse[74] = true;
			Main.wallHouse[241] = true;
			Main.wallHouse[85] = true;
			Main.wallHouse[88] = true;
			Main.wallHouse[89] = true;
			Main.wallHouse[90] = true;
			Main.wallHouse[91] = true;
			Main.wallHouse[92] = true;
			Main.wallHouse[93] = true;
			Main.wallHouse[126] = true;
			Main.wallHouse[127] = true;
			Main.wallHouse[128] = true;
			Main.wallHouse[129] = true;
			Main.wallHouse[130] = true;
			Main.wallHouse[131] = true;
			Main.wallHouse[132] = true;
			Main.wallHouse[138] = true;
			Main.wallHouse[139] = true;
			Main.wallHouse[140] = true;
			Main.wallHouse[141] = true;
			Main.wallHouse[177] = true;
			Main.wallHouse[172] = true;
			Main.wallHouse[242] = true;
			Main.wallHouse[243] = true;
			Main.wallHouse[174] = true;
			Main.wallHouse[223] = true;
			Main.wallHouse[230] = true;
			Main.wallHouse[228] = true;
			Main.wallHouse[229] = true;
			Main.wallHouse[236] = true;
			Main.wallHouse[319] = true;
			Main.wallHouse[318] = true;
			Main.wallHouse[321] = true;
			Main.wallHouse[322] = true;
			Main.wallHouse[320] = true;
			Main.wallHouse[246] = true;
			Main.wallHouse[247] = true;
			Main.wallHouse[248] = true;
			Main.wallHouse[249] = true;
			Main.wallHouse[250] = true;
			Main.wallHouse[251] = true;
			Main.wallHouse[252] = true;
			Main.wallHouse[253] = true;
			Main.wallHouse[254] = true;
			Main.wallHouse[255] = true;
			Main.wallHouse[314] = true;
			Main.wallHouse[256] = true;
			Main.wallHouse[257] = true;
			Main.wallHouse[258] = true;
			Main.wallHouse[259] = true;
			Main.wallHouse[260] = true;
			Main.wallHouse[261] = true;
			Main.wallHouse[262] = true;
			Main.wallHouse[263] = true;
			Main.wallHouse[264] = true;
			Main.wallHouse[265] = true;
			Main.wallHouse[266] = true;
			Main.wallHouse[267] = true;
			Main.wallHouse[268] = true;
			Main.wallHouse[269] = true;
			Main.wallHouse[270] = true;
			Main.wallHouse[271] = true;
			Main.wallHouse[272] = true;
			Main.wallHouse[273] = true;
			Main.wallHouse[274] = true;
			Main.wallHouse[275] = true;
			Main.wallHouse[276] = true;
			Main.wallHouse[277] = true;
			Main.wallHouse[278] = true;
			Main.wallHouse[279] = true;
			Main.wallHouse[280] = true;
			Main.wallHouse[281] = true;
			Main.wallHouse[282] = true;
			Main.wallHouse[283] = true;
			Main.wallHouse[284] = true;
			Main.wallHouse[285] = true;
			Main.wallHouse[286] = true;
			Main.wallHouse[287] = true;
			Main.wallHouse[288] = true;
			Main.wallHouse[289] = true;
			Main.wallHouse[290] = true;
			Main.wallHouse[291] = true;
			Main.wallHouse[292] = true;
			Main.wallHouse[293] = true;
			Main.wallHouse[294] = true;
			Main.wallHouse[295] = true;
			Main.wallHouse[296] = true;
			Main.wallHouse[297] = true;
			Main.wallHouse[298] = true;
			Main.wallHouse[299] = true;
			Main.wallHouse[300] = true;
			Main.wallHouse[301] = true;
			Main.wallHouse[302] = true;
			Main.wallHouse[303] = true;
			Main.wallHouse[304] = true;
			Main.wallHouse[305] = true;
			Main.wallHouse[306] = true;
			Main.wallHouse[307] = true;
			Main.wallHouse[308] = true;
			Main.wallHouse[309] = true;
			Main.wallHouse[310] = true;
			Main.wallHouse[311] = true;
			Main.wallLight[0] = true;
			Main.wallLight[21] = true;
			Main.wallLight[318] = true;
			Main.wallLight[106] = true;
			Main.wallLight[317] = true;
			Main.wallLight[107] = true;
			Main.wallLight[138] = true;
			Main.wallLight[140] = true;
			Main.wallLight[141] = true;
			Main.wallLight[139] = true;
			Main.wallLight[145] = true;
			Main.wallLight[150] = true;
			Main.wallLight[152] = true;
			Main.wallLight[245] = true;
			Main.wallLight[315] = true;
			Main.wallLight[168] = true;
			for (int num4 = 0; num4 < (int)WallID.Count; num4++)
			{
				Main.wallDungeon[num4] = false;
			}
			Main.wallDungeon[7] = true;
			Main.wallDungeon[8] = true;
			Main.wallDungeon[9] = true;
			Main.wallDungeon[94] = true;
			Main.wallDungeon[95] = true;
			Main.wallDungeon[96] = true;
			Main.wallDungeon[97] = true;
			Main.wallDungeon[98] = true;
			Main.wallDungeon[99] = true;
			Main.SetupTileMerge();
		}

		// Token: 0x06000411 RID: 1041 RVA: 0x000A3058 File Offset: 0x000A1258
		private void ClientInitialize()
		{
			MessageBuffer.OnTileChangeReceived += this.OnTileChangeEvent;
			LanguageManager.Instance.OnLanguageChanged += delegate(LanguageManager <p0>)
			{
				ItemTooltip.InvalidateTooltips();
			};
			Action value;
			if ((value = Main.<>O.<5>__InvalidateTooltips) == null)
			{
				value = (Main.<>O.<5>__InvalidateTooltips = new Action(ItemTooltip.InvalidateTooltips));
			}
			PlayerInput.OnBindingChange += value;
			Main.clientUUID = Guid.NewGuid().ToString();
			FilterManager scene = Terraria.Graphics.Effects.Filters.Scene;
			Platform.Current.InitializeClientServices(base.Window.Handle);
			Platform.Get<IImeService>().AddKeyListener(delegate(char keyStroke)
			{
				if (Main.keyCount < 10)
				{
					Main.keyInt[Main.keyCount] = (int)keyStroke;
					Main.keyString[Main.keyCount] = (keyStroke.ToString() ?? "");
					Main.keyCount++;
				}
			});
			base.Window.AllowUserResizing = true;
			this.LoadSettings();
			Main.PreventUpdatingTargets = false;
			Main.SetDisplayMonitor();
			PlayerInput.CacheOriginalScreenDimensions();
			if (Main.screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
			{
				Main.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
			}
			if (Main.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
			{
				Main.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
			}
			this.UpdateDisplaySettings();
			Main.graphics.ApplyChanges();
			if (Main.OnResolutionChanged != null)
			{
				Main.OnResolutionChanged(new Vector2((float)Main.screenWidth, (float)Main.screenHeight));
			}
			this.CheckBunny();
			base.GraphicsDevice.DeviceLost += this.GraphicsDeviceLost;
			base.GraphicsDevice.DeviceReset += this.GraphicsDeviceLost;
			base.GraphicsDevice.DeviceResetting += this.GraphicsDeviceLost;
			if (Main._needsLanguageSelect)
			{
				Main.menuMode = 1212;
			}
			this._achievements = new AchievementManager();
			this._achievementAdvisor = new AchievementAdvisor();
			this.OpenRecent();
			UILinksInitializer.Load();
			Main.Chroma = new ChromaEngine();
			Main.ChromaPainter = new ChromaHotkeyPainter();
			Main.ChromaPainter.CollectBoundKeys();
			Main.CacheSupportedDisplaySizes();
			if (Main.autoJoin)
			{
				Main.LoadPlayers();
				Main.menuMode = 1;
				Main.menuMultiplayer = true;
			}
			Main.fpsTimer.Start();
		}

		// Token: 0x06000412 RID: 1042 RVA: 0x000A3288 File Offset: 0x000A1488
		private static void CacheSupportedDisplaySizes()
		{
			Main.numDisplayModes = 0;
			foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
			{
				if (supportedDisplayMode.Width >= Main.minScreenW && supportedDisplayMode.Height >= Main.minScreenH && supportedDisplayMode.Width <= Main.maxScreenW && supportedDisplayMode.Height <= Main.maxScreenH)
				{
					bool flag = true;
					for (int i = 0; i < Main.numDisplayModes; i++)
					{
						if (supportedDisplayMode.Width == Main.displayWidth[i] && supportedDisplayMode.Height == Main.displayHeight[i])
						{
							flag = false;
							break;
						}
					}
					if (flag)
					{
						Main.displayHeight[Main.numDisplayModes] = supportedDisplayMode.Height;
						Main.displayWidth[Main.numDisplayModes] = supportedDisplayMode.Width;
						Main.numDisplayModes++;
					}
				}
			}
		}

		// Token: 0x06000413 RID: 1043 RVA: 0x000A337C File Offset: 0x000A157C
		public static void LoadTestLog(string logname)
		{
		}

		// Token: 0x06000414 RID: 1044 RVA: 0x000A337E File Offset: 0x000A157E
		internal static void OnceFailedLoadingAnAsset(string assetPath, Exception e)
		{
			Logging.Terraria.Error("Failed to load asset: \"" + assetPath + "\"", e);
			FancyErrorPrinter.ShowFailedToLoadAssetError(e, assetPath);
		}

		// Token: 0x06000415 RID: 1045 RVA: 0x000A33A4 File Offset: 0x000A15A4
		protected override void LoadContent()
		{
			Asset<Texture2D>.DefaultValue = new Texture2D(base.GraphicsDevice, 1, 1)
			{
				Name = "Asynchronously-loaded Asset Dummy Texture (do not dispose or modify!)"
			};
			Asset<Texture2D>.DefaultValue.SetData<Color>(new Color[]
			{
				Color.Transparent
			});
			SoundEngine.Initialize();
			if (XnaExtensions.Get<IAssetRepository>(base.Services) == null)
			{
				AssetInitializer.CreateAssetServices(base.Services);
			}
			Main.Assets = XnaExtensions.Get<IAssetRepository>(base.Services);
			IAssetRepository assets = Main.Assets;
			FailedToLoadAssetCustomAction assetLoadFailHandler;
			if ((assetLoadFailHandler = Main.<>O.<6>__OnceFailedLoadingAnAsset) == null)
			{
				assetLoadFailHandler = (Main.<>O.<6>__OnceFailedLoadingAnAsset = new FailedToLoadAssetCustomAction(Main.OnceFailedLoadingAnAsset));
			}
			assets.AssetLoadFailHandler = assetLoadFailHandler;
			this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
			Main.ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
			Main.PixelShaderRef.Value = Main.ShaderContentManager.Load<Effect>("PixelShader");
			Main.VertexPixelShaderRef.Value = Main.ShaderContentManager.Load<Effect>("PixelShader");
			Main.TileShaderRef.Value = Main.ShaderContentManager.Load<Effect>("TileShader");
			Main.ScreenShaderRef.Value = Main.ShaderContentManager.Load<Effect>("ScreenShader");
			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
			Main.tileBatch = new TileBatch(base.GraphicsDevice);
			Main.DebugDrawer = new BasicDebugDrawer(base.GraphicsDevice);
			Main.GameViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);
			Main.BackgroundViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);
			if (SoundEngine.IsAudioSupported)
			{
				Main.audioSystem = new LegacyAudioSystem();
			}
			else
			{
				Main.audioSystem = new DisabledAudioSystem();
			}
			Main.AssetSourceController = new AssetSourceController(Main.Assets, new IContentSource[]
			{
				new XnaDirectContentSource(((TMLContentManager)base.Content).RootDirectories)
			});
			VanillaContentValidator.Instance = new VanillaContentValidator("Terraria.IO.Data.ResourcePacksDefaultInfo.tsv");
			if (SocialAPI.Workshop != null)
			{
				SocialAPI.Workshop.LoadEarlyContent();
			}
			CaptureManager.Instance = new CaptureManager();
			Main.AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList(base.Services));
			AssetInitializer.LoadSplashAssets(true);
			ChromaInitializer.Load();
			this._gameContentLoadProcess = this.LoadContent_Deferred();
			ModLoader.PrepareAssets();
		}

		// Token: 0x06000416 RID: 1046 RVA: 0x000A35D0 File Offset: 0x000A17D0
		protected IEnumerator LoadContent_Deferred()
		{
			yield return null;
			Main.IssueReporter = new GeneralIssueReporter();
			AssetInitializer.LoadAssetsWhileInInitialBlackScreen();
			yield return null;
			bool doneLoadingMusic = false;
			IEnumerator musicLoadProcedure = this.LoadMusic_InSteps();
			while (!doneLoadingMusic)
			{
				try
				{
					if (!musicLoadProcedure.MoveNext())
					{
						doneLoadingMusic = true;
					}
				}
				catch
				{
					doneLoadingMusic = true;
					Main.musicVolume = 0f;
					Main.soundVolume = 0f;
				}
				yield return null;
			}
			this._musicLoaded = true;
			Main.splashTimer.Start();
			yield return null;
			this._begunMainAsyncLoad = true;
			AssetInitializer.Load(true);
			this._artLoaded = true;
			Main.TownNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHead);
			Main.ContentThatNeedsRenderTargets.Add(Main.TownNPCHeadRenderer);
			Main.BossNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHeadBoss);
			Main.ContentThatNeedsRenderTargets.Add(Main.BossNPCHeadRenderer);
			yield break;
		}

		// Token: 0x06000417 RID: 1047 RVA: 0x000A35DF File Offset: 0x000A17DF
		private void TickLoadProcess()
		{
			this._gameContentLoadProcess.MoveNext();
		}

		// Token: 0x06000418 RID: 1048 RVA: 0x000A35F0 File Offset: 0x000A17F0
		private static void PostContentLoadInitialize()
		{
			LiquidRenderer.LoadContent();
			AchievementInitializer.Load();
			Main.AchievementAdvisor.Initialize();
			DyeInitializer.Load();
			ScreenEffectInitializer.Load();
			InGameNotificationsTracker.Initialize();
			LinkButtonsInitializer.Load();
			Main._stardewAnimation = new StardewValleyAnimation();
			Main.moonType = Main.rand.Next(9);
			Main.windSpeedCurrent = (float)Main.rand.Next(-800, 801) * 0.001f;
			Main.windSpeedTarget = Main.windSpeedCurrent;
			Main.numClouds = Main.rand.Next(200);
			Mount.Initialize();
			Minecart.Initialize();
			Main.CacheSupportedDisplaySizes();
			ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
			ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
		}

		// Token: 0x06000419 RID: 1049 RVA: 0x000A3697 File Offset: 0x000A1897
		private IEnumerator LoadMusic_InSteps()
		{
			yield return null;
			IEnumerator sub = Main.audioSystem.PrepareWaveBank();
			while (sub.MoveNext())
			{
				object obj = sub.Current;
				yield return obj;
			}
			int num;
			for (int i = 1; i < Main.maxMusic; i = num + 1)
			{
				Main.audioSystem.LoadCue(i, "Music_" + i.ToString());
				yield return null;
				num = i;
			}
			Main.audioSystem.LoadFromSources();
			yield break;
		}

		// Token: 0x0600041A RID: 1050 RVA: 0x000A369F File Offset: 0x000A189F
		protected override void UnloadContent()
		{
		}

		// Token: 0x0600041B RID: 1051 RVA: 0x000A36A4 File Offset: 0x000A18A4
		public static void CheckForMoonEventsStartingTemporarySeasons()
		{
			if (Main.netMode != 1)
			{
				bool flag2 = Main.forceHalloweenForToday;
				bool flag = Main.forceXMasForToday;
				Main.forceXMasForToday = false;
				Main.forceHalloweenForToday = false;
				int waveNumber = NPC.waveNumber;
				float waveKills = NPC.waveKills;
				if (Main.pumpkinMoon && waveNumber >= 15)
				{
					Main.forceHalloweenForToday = true;
				}
				if (Main.snowMoon && waveNumber >= 15)
				{
					Main.forceXMasForToday = true;
				}
				Color color;
				color..ctor(50, 255, 130);
				if (flag2 != Main.forceHalloweenForToday)
				{
					WorldGen.BroadcastText(NetworkText.FromKey(Main.forceHalloweenForToday ? "Misc.StartedVictoryHalloween" : "Misc.EndedVictoryHalloween", Array.Empty<object>()), color);
				}
				if (flag != Main.forceXMasForToday)
				{
					WorldGen.BroadcastText(NetworkText.FromKey(Main.forceXMasForToday ? "Misc.StartedVictoryXmas" : "Misc.EndedVictoryXmas", Array.Empty<object>()), color);
				}
			}
		}

		// Token: 0x0600041C RID: 1052 RVA: 0x000A376C File Offset: 0x000A196C
		public static void CheckForMoonEventsScoreDisplay()
		{
			if (Main.netMode != 1 && (Main.pumpkinMoon || Main.snowMoon))
			{
				Color color;
				color..ctor(175, 75, 255);
				string key = "Misc.PumpkinMoonScore";
				if (Main.snowMoon)
				{
					key = "Misc.FrostMoonScore";
				}
				WorldGen.BroadcastText(NetworkText.FromKey(key, new object[]
				{
					NPC.totalInvasionPoints
				}), color);
			}
		}

		// Token: 0x0600041D RID: 1053 RVA: 0x000A37D4 File Offset: 0x000A19D4
		public static void stopMoonEvent()
		{
			int waveNumber = NPC.waveNumber;
			float waveKills = NPC.waveKills;
			if (Main.pumpkinMoon)
			{
				Main.pumpkinMoon = false;
				if (Main.netMode != 1)
				{
					NPC.totalInvasionPoints = 0f;
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
			if (Main.snowMoon)
			{
				Main.snowMoon = false;
				if (Main.netMode != 1)
				{
					NPC.totalInvasionPoints = 0f;
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
		}

		// Token: 0x0600041E RID: 1054 RVA: 0x000A384C File Offset: 0x000A1A4C
		public static void startPumpkinMoon()
		{
			Main.pumpkinMoon = true;
			Main.snowMoon = false;
			Main.bloodMoon = false;
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			if (Main.netMode != 1)
			{
				NPC.totalInvasionPoints = 0f;
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
				{
					305
				});
				if (Main.netMode == 0)
				{
					Main.NewText(invasionWaveText.ToString(), 175, 75, byte.MaxValue);
					return;
				}
				if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(invasionWaveText, new Color(175, 75, 255), -1);
				}
			}
		}

		// Token: 0x0600041F RID: 1055 RVA: 0x000A3900 File Offset: 0x000A1B00
		public static void startSnowMoon()
		{
			Main.snowMoon = true;
			Main.pumpkinMoon = false;
			Main.bloodMoon = false;
			Main.invasionProgress = -1;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.invasionProgressIcon = 0;
			if (Main.netMode != 1)
			{
				NPC.totalInvasionPoints = 0f;
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
				{
					338,
					342
				});
				if (Main.netMode == 0)
				{
					Main.NewText(invasionWaveText.ToString(), 175, 75, byte.MaxValue);
					return;
				}
				if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(invasionWaveText, new Color(175, 75, 255), -1);
				}
			}
		}

		// Token: 0x06000420 RID: 1056 RVA: 0x000A39BC File Offset: 0x000A1BBC
		protected void UpdateAudio()
		{
			if (!SoundEngine.IsAudioSupported || !this._musicLoaded)
			{
				return;
			}
			if (!Main.dedServ && !Main.showSplash)
			{
				SoundEngine.Update();
			}
			if (Main.musicVolume == 0f)
			{
				Main.curMusic = 0;
			}
			try
			{
				if (!Main.dedServ)
				{
					bool flag = base.IsActive;
					if (!flag)
					{
						Main.audioSystem.PauseAll();
						SoundEngine.StopAmbientSounds();
					}
					else
					{
						Main.audioSystem.ResumeAll();
					}
					if (Main.drunkWorld)
					{
						Main.TOWMusicUnlocked = true;
					}
					if (Main.gameMenu)
					{
						Main.swapMusic = false;
					}
					if (Main.swapMusic)
					{
						if (Main.drunkWorld && !Main.remixWorld)
						{
							this.UpdateAudio_DecideOnNewMusic();
						}
						else
						{
							this.UpdateAudio_DecideOnTOWMusic();
						}
					}
					else if (!Main.gameMenu && Main.drunkWorld && !Main.remixWorld)
					{
						this.UpdateAudio_DecideOnTOWMusic();
					}
					else
					{
						this.UpdateAudio_DecideOnNewMusic();
					}
					if (Main.musicBox2 >= 0)
					{
						Main.SceneMetrics.ActiveMusicBox = Main.musicBox2;
					}
					if (Main.SceneMetrics.ActiveMusicBox >= 0)
					{
						if (Main.SceneMetrics.ActiveMusicBox == 0)
						{
							Main.newMusic = 1;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 1)
						{
							Main.newMusic = 2;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 2)
						{
							Main.newMusic = 3;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 4)
						{
							Main.newMusic = 4;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 5)
						{
							Main.newMusic = 5;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 3)
						{
							Main.newMusic = 6;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 6)
						{
							Main.newMusic = 7;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 7)
						{
							Main.newMusic = 8;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 9)
						{
							Main.newMusic = 9;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 8)
						{
							Main.newMusic = 10;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 11)
						{
							Main.newMusic = 11;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 10)
						{
							Main.newMusic = 12;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 12)
						{
							Main.newMusic = 13;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 13)
						{
							Main.newMusic = 14;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 14)
						{
							Main.newMusic = 15;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 15)
						{
							Main.newMusic = 16;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 16)
						{
							Main.newMusic = 17;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 17)
						{
							Main.newMusic = 18;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 18)
						{
							Main.newMusic = 19;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 19)
						{
							Main.newMusic = 20;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 20)
						{
							Main.newMusic = 21;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 21)
						{
							Main.newMusic = 22;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 22)
						{
							Main.newMusic = 23;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 23)
						{
							Main.newMusic = 24;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 24)
						{
							Main.newMusic = 25;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 25)
						{
							Main.newMusic = 26;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 26)
						{
							Main.newMusic = 27;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 27)
						{
							Main.newMusic = 29;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 28)
						{
							Main.newMusic = 30;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 29)
						{
							Main.newMusic = 31;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 30)
						{
							Main.newMusic = 32;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 31)
						{
							Main.newMusic = 33;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 32)
						{
							Main.newMusic = 38;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 33)
						{
							Main.newMusic = 37;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 34)
						{
							Main.newMusic = 35;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 35)
						{
							Main.newMusic = 36;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 36)
						{
							Main.newMusic = 34;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 37)
						{
							Main.newMusic = 39;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 38)
						{
							Main.newMusic = 40;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 39)
						{
							Main.newMusic = 41;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 40)
						{
							Main.newMusic = 44;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 41)
						{
							Main.newMusic = 48;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 42)
						{
							Main.newMusic = 42;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 43)
						{
							Main.newMusic = 43;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 44)
						{
							Main.newMusic = 46;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 45)
						{
							Main.newMusic = 47;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 46)
						{
							Main.newMusic = 49;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 47)
						{
							Main.newMusic = 51;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 48)
						{
							Main.newMusic = 52;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 49)
						{
							Main.newMusic = 53;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 50)
						{
							Main.newMusic = 54;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 51)
						{
							Main.newMusic = 55;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 52)
						{
							Main.newMusic = 56;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 53)
						{
							Main.newMusic = 57;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 54)
						{
							Main.newMusic = 58;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 55)
						{
							Main.newMusic = 59;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 56)
						{
							Main.newMusic = 60;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 57)
						{
							Main.newMusic = 61;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 58)
						{
							Main.newMusic = 62;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 59)
						{
							Main.newMusic = 63;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 60)
						{
							Main.newMusic = 64;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 61)
						{
							Main.newMusic = 65;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 62)
						{
							Main.newMusic = 66;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 63)
						{
							Main.newMusic = 67;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 64)
						{
							Main.newMusic = 68;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 65)
						{
							Main.newMusic = 69;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 66)
						{
							Main.newMusic = 70;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 67)
						{
							Main.newMusic = 71;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 68)
						{
							Main.newMusic = 72;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 69)
						{
							Main.newMusic = 73;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 70)
						{
							Main.newMusic = 74;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 71)
						{
							Main.newMusic = 75;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 72)
						{
							Main.newMusic = 76;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 73)
						{
							Main.newMusic = 77;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 74)
						{
							Main.newMusic = 78;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 75)
						{
							Main.newMusic = 79;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 76)
						{
							Main.newMusic = 80;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 77)
						{
							Main.newMusic = 81;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 78)
						{
							Main.newMusic = 82;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 79)
						{
							Main.newMusic = 83;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 80)
						{
							Main.newMusic = 84;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 81)
						{
							Main.newMusic = 85;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 82)
						{
							Main.newMusic = 86;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 83)
						{
							Main.newMusic = 87;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 84)
						{
							Main.newMusic = 88;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 85)
						{
							Main.newMusic = 89;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 86)
						{
							Main.newMusic = 90;
						}
						if (Main.SceneMetrics.ActiveMusicBox == 87)
						{
							Main.newMusic = 91;
						}
						if (Main.SceneMetrics.ActiveMusicBox >= Main.maxMusic)
						{
							Main.newMusic = Main.SceneMetrics.ActiveMusicBox;
						}
					}
					if (Main.gameMenu || Main.musicVolume == 0f)
					{
						Main.musicBox2 = -1;
						Main.SceneMetrics.ActiveMusicBox = -1;
					}
					if (Main.musicVolume == 0f)
					{
						Main.newMusic = 0;
					}
					Main.audioSystem.Update();
					Main.audioSystem.UpdateMisc();
					Main.curMusic = Main.newMusic;
					float num = 1f;
					if (NPC.MoonLordCountdown > 0)
					{
						num = (float)NPC.MoonLordCountdown / (float)NPC.MaxMoonLordCountdown;
						num *= num;
						if ((float)NPC.MoonLordCountdown > (float)NPC.MaxMoonLordCountdown * 0.2f)
						{
							num = MathHelper.Lerp(0f, 1f, num);
						}
						else
						{
							num = 0f;
							Main.curMusic = 0;
						}
						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.musicFade.Length)
						{
							Main.musicFade[Main.curMusic] = 0f;
						}
					}
					bool isMainTrackAudible = Main.musicFade[Main.curMusic] > 0.25f;
					for (int i = 1; i < Main.musicFade.Length; i++)
					{
						float num2 = Main.musicFade[i] * Main.musicVolume * num;
						if (i >= 62 && i <= 88)
						{
							num2 *= 0.9f;
						}
						else if (i == 52)
						{
							num2 *= 1.15f;
							if (num2 > 1f)
							{
								num2 = 1f;
							}
						}
						float num3 = Main.shimmerAlpha;
						if (i != 28)
						{
							if (i != 45)
							{
								float tempFade = Main.musicFade[i];
								if (i == Main.curMusic)
								{
									Main.audioSystem.UpdateCommonTrack(flag, i, num2, ref tempFade);
								}
								else
								{
									Main.audioSystem.UpdateCommonTrackTowardStopping(i, num2, ref tempFade, isMainTrackAudible);
								}
								Main.musicFade[i] = tempFade;
							}
							else
							{
								float num4 = 0.7f;
								float num5 = Math.Abs(Main.windSpeedCurrent) * num4 + (1f - num4);
								if (num3 > 0f)
								{
									num5 *= 1f - num3;
								}
								if (num5 > 1f)
								{
									num5 = 1f;
								}
								num5 *= 0.9f;
								float num6 = 20f;
								num5 *= (float)Math.Pow((double)Main.atmo, 4.0);
								if (Main.remixWorld)
								{
									if (!Main.gameMenu && Math.Abs(Main.windSpeedCurrent) >= num6 / 50f && (double)(Main.player[Main.myPlayer].position.Y / 16f) > Main.rockLayer && Main.player[Main.myPlayer].position.Y / 16f < (float)(Main.maxTilesY - 350) && !Main.player[Main.myPlayer].ZoneDungeon)
									{
										float trackVolume = Main.musicFade[i];
										Main.audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume, Main.ambientVolume * num5);
										Main.musicFade[i] = trackVolume;
									}
									else
									{
										float trackVolume2 = Main.musicFade[i];
										Main.audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume2, Main.ambientVolume * num5);
										Main.musicFade[i] = trackVolume2;
									}
								}
								else if (!Main.gameMenu && Math.Abs(Main.windSpeedCurrent) >= num6 / 50f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
								{
									float trackVolume3 = Main.musicFade[i];
									Main.audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume3, Main.ambientVolume * num5);
									Main.musicFade[i] = trackVolume3;
								}
								else
								{
									float trackVolume4 = Main.musicFade[i];
									Main.audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume4, Main.ambientVolume * num5);
									Main.musicFade[i] = trackVolume4;
								}
							}
						}
						else
						{
							float num7 = 0.5f;
							float num8 = Main.cloudAlpha / 9f * 10f * num7 + (1f - num7);
							if (num3 > 0f)
							{
								num8 *= 1f - num3;
							}
							if (num8 > 1f)
							{
								num8 = 1f;
							}
							if (Main.gameMenu)
							{
								num8 = 0f;
							}
							num8 *= (float)Math.Pow((double)Main.atmo, 4.0);
							if (Main.remixWorld)
							{
								if (Main.cloudAlpha > 0f && (double)(Main.player[Main.myPlayer].position.Y / 16f) > Main.rockLayer && Main.player[Main.myPlayer].position.Y / 16f < (float)(Main.maxTilesY - 350) && !Main.player[Main.myPlayer].ZoneSnow && !Main.player[Main.myPlayer].ZoneDungeon)
								{
									float trackVolume5 = Main.musicFade[i];
									Main.audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume5, Main.ambientVolume * num8);
									Main.musicFade[i] = trackVolume5;
								}
								else
								{
									float trackVolume6 = Main.musicFade[i];
									Main.audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume6, Main.ambientVolume * num8);
									Main.musicFade[i] = trackVolume6;
								}
							}
							else if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].ZoneSnow)
							{
								float trackVolume7 = Main.musicFade[i];
								Main.audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume7, Main.ambientVolume * num8);
								Main.musicFade[i] = trackVolume7;
							}
							else
							{
								float trackVolume8 = Main.musicFade[i];
								Main.audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume8, Main.ambientVolume * num8);
								Main.musicFade[i] = trackVolume8;
							}
						}
					}
					Main.audioSystem.UpdateAudioEngine();
					if (Main.musicError > 0)
					{
						Main.musicError--;
					}
				}
			}
			catch
			{
				Main.musicError++;
				if (Main.musicError >= 100)
				{
					Main.musicError = 0;
					Main.musicVolume = 0f;
				}
			}
		}

		// Token: 0x06000421 RID: 1057 RVA: 0x000A4804 File Offset: 0x000A2A04
		private unsafe void UpdateAudio_DecideOnTOWMusic()
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			int modMusic = -1;
			SceneEffectPriority modPriority = SceneEffectPriority.None;
			if (!Main.gameMenu)
			{
				Rectangle rectangle;
				rectangle..ctor((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active)
					{
						int num = 5000;
						int num2 = 0;
						int type = Main.npc[i].type;
						if (type <= 266)
						{
							if (type <= 127)
							{
								if (type <= 111)
								{
									if (type - 13 <= 2)
									{
										num2 = 1;
										goto IL_341;
									}
									if (type - 26 > 3 && type != 111)
									{
										goto IL_341;
									}
									goto IL_2BF;
								}
								else
								{
									if (type - 113 <= 1)
									{
										num2 = 3;
										goto IL_341;
									}
									if (type - 125 <= 1)
									{
										num2 = 2;
										goto IL_341;
									}
									if (type != 127)
									{
										goto IL_341;
									}
								}
							}
							else if (type <= 216)
							{
								if (type != 134)
								{
									if (type - 143 <= 2)
									{
										num2 = 11;
										goto IL_341;
									}
									if (type - 212 > 4)
									{
										goto IL_341;
									}
									goto IL_2DF;
								}
							}
							else if (type <= 245)
							{
								if (type == 222)
								{
									num2 = 1;
									goto IL_341;
								}
								if (type != 245)
								{
									goto IL_341;
								}
								num2 = 2;
								goto IL_341;
							}
							else
							{
								if (type - 262 <= 2)
								{
									num2 = 6;
									goto IL_341;
								}
								if (type != 266)
								{
									goto IL_341;
								}
								num2 = 1;
								goto IL_341;
							}
							num2 = 2;
						}
						else
						{
							if (type <= 491)
							{
								if (type <= 422)
								{
									if (type == 370)
									{
										num2 = 15;
										goto IL_341;
									}
									switch (type)
									{
									case 381:
									case 382:
									case 383:
									case 385:
									case 386:
									case 388:
									case 389:
									case 390:
									case 391:
									case 395:
										break;
									case 384:
									case 387:
									case 392:
									case 393:
									case 394:
									case 396:
									case 397:
										goto IL_341;
									case 398:
										num2 = 7;
										goto IL_341;
									default:
										if (type != 422)
										{
											goto IL_341;
										}
										goto IL_2FE;
									}
								}
								else if (type <= 439)
								{
									if (type != 438)
									{
										if (type != 439)
										{
											goto IL_341;
										}
										num2 = 2;
										goto IL_341;
									}
									else
									{
										if (Main.npc[i].ai[1] == 1f)
										{
											num = 1600;
											num2 = 2;
											goto IL_341;
										}
										goto IL_341;
									}
								}
								else
								{
									if (type == 471)
									{
										goto IL_2BF;
									}
									if (type != 491)
									{
										goto IL_341;
									}
									goto IL_2DF;
								}
							}
							else if (type <= 517)
							{
								if (type != 493 && type != 507 && type != 517)
								{
									goto IL_341;
								}
								goto IL_2FE;
							}
							else if (type <= 636)
							{
								if (type != 520)
								{
									if (type != 636)
									{
										goto IL_341;
									}
									num2 = 14;
									goto IL_341;
								}
							}
							else
							{
								if (type == 657)
								{
									num2 = 13;
									goto IL_341;
								}
								if (type != 668)
								{
									goto IL_341;
								}
								num2 = 16;
								goto IL_341;
							}
							num2 = 9;
							goto IL_341;
							IL_2FE:
							num2 = 10;
						}
						IL_341:
						if (Main.npc[i].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[i].type])
						{
							num2 = 12;
						}
						if (Main.remixWorld && Main.getGoodWorld && (Main.npc[i].type == 127 || Main.npc[i].type == 134 || Main.npc[i].type == 125 || Main.npc[i].type == 126))
						{
							num2 = 17;
						}
						if (num2 == 0 && Main.npc[i].boss)
						{
							num2 = 1;
						}
						if (num2 == 0 && (Main.npc[i].ModNPC == null || Main.npc[i].ModNPC.Music < 0))
						{
							goto IL_57D;
						}
						Rectangle value;
						value..ctor((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
						if (!rectangle.Intersects(value))
						{
							goto IL_57D;
						}
						if (Main.npc[i].ModNPC != null && Main.npc[i].ModNPC.Music >= 0 && (modMusic < 0 || Main.npc[i].ModNPC.SceneEffectPriority > modPriority))
						{
							modMusic = Main.npc[i].ModNPC.Music;
							modPriority = Main.npc[i].ModNPC.SceneEffectPriority;
						}
						switch (num2)
						{
						case 1:
							flag = true;
							goto IL_57D;
						case 2:
							flag3 = true;
							goto IL_57D;
						case 3:
							flag4 = true;
							goto IL_57D;
						case 4:
							flag5 = true;
							goto IL_57D;
						case 5:
							flag6 = true;
							goto IL_57D;
						case 6:
							flag7 = true;
							goto IL_57D;
						case 7:
							flag8 = true;
							goto IL_57D;
						case 8:
							flag9 = true;
							goto IL_57D;
						case 9:
							flag10 = true;
							goto IL_57D;
						case 10:
							flag11 = true;
							goto IL_57D;
						case 11:
							flag12 = true;
							goto IL_57D;
						case 12:
							flag13 = true;
							goto IL_57D;
						case 13:
							flag14 = true;
							goto IL_57D;
						case 14:
							flag15 = true;
							goto IL_57D;
						case 15:
							flag16 = true;
							goto IL_57D;
						case 16:
							flag2 = true;
							goto IL_57D;
						case 17:
							flag17 = true;
							goto IL_57D;
						default:
							goto IL_57D;
						}
						IL_2BF:
						num2 = 11;
						goto IL_341;
						IL_2DF:
						num2 = 8;
						goto IL_341;
					}
					IL_57D:;
				}
				LoaderManager.Get<SceneEffectLoader>().UpdateMusic(ref modMusic, ref modPriority);
			}
			float num5 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
			if (Main.musicVolume == 0f)
			{
				Main.newMusic = 0;
				return;
			}
			float num3 = (float)Main.maxTilesX / 4200f;
			num3 *= num3;
			float num4 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num3)) / (Main.worldSurface / 5.0));
			if (CreditsRollEvent.IsEventOngoing)
			{
				Main.newMusic = 89;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossHigh)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (Main.player[Main.myPlayer].happyFunTorchTime)
			{
				Main.newMusic = 87;
				return;
			}
			if (flag8)
			{
				Main.newMusic = 84;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossMedium)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag17)
			{
				Main.newMusic = 81;
				return;
			}
			if (flag10)
			{
				Main.newMusic = 82;
				return;
			}
			if (flag11)
			{
				Main.newMusic = 83;
				return;
			}
			if (flag7)
			{
				Main.newMusic = 85;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossLow)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag15)
			{
				Main.newMusic = 80;
				return;
			}
			if (flag16)
			{
				Main.newMusic = 80;
				return;
			}
			if (flag3)
			{
				Main.newMusic = 80;
				return;
			}
			if (flag)
			{
				Main.newMusic = 81;
				return;
			}
			if (flag4)
			{
				Main.newMusic = 87;
				return;
			}
			if (flag5)
			{
				Main.newMusic = 81;
				return;
			}
			if (flag6)
			{
				Main.newMusic = 81;
				return;
			}
			if (flag14)
			{
				Main.newMusic = 80;
				return;
			}
			if (flag2)
			{
				Main.newMusic = 80;
				return;
			}
			if (modPriority >= SceneEffectPriority.Event)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag9)
			{
				Main.newMusic = 82;
				return;
			}
			if (flag12)
			{
				Main.newMusic = 82;
				return;
			}
			if (flag13)
			{
				Main.newMusic = 82;
				return;
			}
			if (((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 || Main.remixWorld) && Main.pumpkinMoon)
			{
				Main.newMusic = 82;
				return;
			}
			if (((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 || Main.remixWorld) && Main.snowMoon)
			{
				Main.newMusic = 82;
				return;
			}
			if (modPriority >= SceneEffectPriority.Environment)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (Main.eclipse && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
			{
				Main.newMusic = 79;
				return;
			}
			if (Main.eclipse && Main.remixWorld)
			{
				Main.newMusic = 79;
				return;
			}
			if (Main.remixWorld && Main.bloodMoon && !Main.player[Main.myPlayer].ZoneCrimson && !Main.player[Main.myPlayer].ZoneCorrupt && (double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 && Main.player[Main.myPlayer].position.Y <= (float)(Main.UnderworldLayer * 16))
			{
				Main.newMusic = 79;
				return;
			}
			if (Main.remixWorld && Main.bloodMoon && Main.player[Main.myPlayer].position.Y > (float)(Main.UnderworldLayer * 16) && (double)(Main.player[Main.myPlayer].Center.X / 16f) > (double)Main.maxTilesX * 0.37 + 50.0 && (double)(Main.player[Main.myPlayer].Center.X / 16f) < (double)Main.maxTilesX * 0.63)
			{
				Main.newMusic = 79;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneShimmer)
			{
				Main.newMusic = 72;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneSandstorm)
			{
				Main.newMusic = 66;
				return;
			}
			if (Main.player[Main.myPlayer].position.Y > (float)(Main.UnderworldLayer * 16))
			{
				Main.newMusic = 71;
				return;
			}
			if (num4 < 1f)
			{
				Main.newMusic = 70;
				return;
			}
			if (modPriority >= SceneEffectPriority.BiomeHigh)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (*Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
			{
				Main.newMusic = 69;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneDungeon)
			{
				Main.newMusic = 69;
				return;
			}
			if ((Main.bgStyle == 9 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) || Main.undergroundBackground == 2)
			{
				Main.newMusic = 68;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneCorrupt)
			{
				if (Main.player[Main.myPlayer].ZoneCrimson && Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.EvilTileCount)
				{
					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						Main.newMusic = 76;
						return;
					}
					Main.newMusic = 75;
					return;
				}
				else
				{
					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						Main.newMusic = 74;
						return;
					}
					Main.newMusic = 73;
					return;
				}
			}
			else if (Main.player[Main.myPlayer].ZoneCrimson)
			{
				if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
				{
					Main.newMusic = 76;
					return;
				}
				Main.newMusic = 75;
				return;
			}
			else
			{
				if (modPriority >= SceneEffectPriority.BiomeMedium)
				{
					Main.newMusic = modMusic;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneMeteor)
				{
					Main.newMusic = 79;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneGraveyard)
				{
					Main.newMusic = 79;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneJungle)
				{
					if (Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						Main.newMusic = 70;
						return;
					}
					Main.newMusic = 86;
					return;
				}
				else if (Main.player[Main.myPlayer].ZoneSnow)
				{
					if (Main.remixWorld)
					{
						if ((double)Main.player[Main.myPlayer].position.Y >= Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 72;
							return;
						}
						if ((double)Main.player[Main.myPlayer].position.Y <= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 70;
							return;
						}
						Main.newMusic = 77;
						return;
					}
					else
					{
						if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 77;
							return;
						}
						Main.newMusic = 72;
						return;
					}
				}
				else
				{
					if (modPriority >= SceneEffectPriority.BiomeLow)
					{
						Main.newMusic = modMusic;
						return;
					}
					if ((double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16))
					{
						if (Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y >= Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
						{
							if (Main.player[Main.myPlayer].ZoneUndergroundDesert)
							{
								Main.newMusic = 66;
								return;
							}
							if (Main.cloudAlpha > 0f)
							{
								Main.newMusic = 62;
								return;
							}
							if (Main.player[Main.myPlayer].ZoneHallow)
							{
								Main.newMusic = 88;
								return;
							}
							if (Main.player[Main.myPlayer].ZoneDesert)
							{
								Main.newMusic = 66;
								return;
							}
							Main.newMusic = 62;
							return;
						}
						else
						{
							if (Main.player[Main.myPlayer].ZoneHallow)
							{
								Main.newMusic = 78;
								return;
							}
							if (Main.player[Main.myPlayer].ZoneUndergroundDesert)
							{
								Main.newMusic = 66;
								return;
							}
							Main.newMusic = 65;
							return;
						}
					}
					else if (Main.dayTime && Main.player[Main.myPlayer].ZoneHallow)
					{
						if (Main.cloudAlpha > 0f && !Main.gameMenu)
						{
							Main.newMusic = 62;
							return;
						}
						Main.newMusic = 88;
						return;
					}
					else if (Main._shouldUseStormMusic)
					{
						if (Main.bloodMoon)
						{
							Main.newMusic = 79;
							return;
						}
						Main.newMusic = 62;
						return;
					}
					else if (WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16))
					{
						if (Main.bloodMoon)
						{
							Main.newMusic = 79;
							return;
						}
						Main.newMusic = 67;
						return;
					}
					else
					{
						if (Main.player[Main.myPlayer].ZoneDesert)
						{
							Main.newMusic = 66;
							return;
						}
						if (Main.remixWorld)
						{
							Main.newMusic = 70;
							return;
						}
						if (!Main.dayTime)
						{
							if (!Main.dayTime)
							{
								if (Main.bloodMoon)
								{
									Main.newMusic = 79;
									return;
								}
								if (Main.cloudAlpha > 0f && !Main.gameMenu)
								{
									Main.newMusic = 64;
									return;
								}
								Main.newMusic = 64;
							}
							return;
						}
						if (Main.cloudAlpha > 0f && !Main.gameMenu)
						{
							Main.newMusic = 62;
							return;
						}
						Main.newMusic = 63;
						return;
					}
				}
			}
		}

		// Token: 0x06000422 RID: 1058 RVA: 0x000A5784 File Offset: 0x000A3984
		private unsafe void UpdateAudio_DecideOnNewMusic()
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = Main.LocalPlayer.townNPCs > 2f;
			bool flag19 = Main.slimeRain;
			if (Main.SceneMetrics.ShadowCandleCount > 0 || Main.LocalPlayer.inventory[Main.LocalPlayer.selectedItem].type == 5322)
			{
				flag18 = false;
			}
			float num = 0f;
			for (int i = 0; i < Main.maxMusic; i++)
			{
				if (Main.musicFade[i] > num)
				{
					num = Main.musicFade[i];
					if (num == 1f)
					{
						this.lastMusicPlayed = i;
					}
				}
			}
			if (this.lastMusicPlayed == 50)
			{
				Main.musicNoCrossFade[51] = true;
			}
			int modMusic = -1;
			SceneEffectPriority modPriority = SceneEffectPriority.None;
			if (!Main.gameMenu)
			{
				Rectangle rectangle;
				rectangle..ctor((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active)
					{
						int num2 = 5000;
						int num3 = 0;
						int num8 = Main.npc[j].type;
						if (num8 - 13 > 2 && num8 - 127 > 4)
						{
							if (NPCID.Sets.BelongsToInvasionGoblinArmy[Main.npc[j].type] && NPCID.Sets.InvasionSlotCount[Main.npc[j].type] > 0)
							{
								num3 = 11;
							}
							else if (num8 - 113 > 1 && num8 - 125 > 1)
							{
								if (num8 - 134 > 2 && (!NPCID.Sets.BelongsToInvasionFrostLegion[Main.npc[j].type] || NPCID.Sets.InvasionSlotCount[Main.npc[j].type] <= 0) && num8 != 266)
								{
									if (NPCID.Sets.BelongsToInvasionPirate[Main.npc[j].type] && NPCID.Sets.InvasionSlotCount[Main.npc[j].type] > 0)
									{
										num3 = 8;
									}
									else if (num8 != 222)
									{
										if (num8 != 245)
										{
											if (num8 - 262 > 2)
											{
												if (NPCID.Sets.BelongsToInvasionMartianMadness[Main.npc[j].type] && NPCID.Sets.InvasionSlotCount[Main.npc[j].type] > 0)
												{
													num3 = 9;
												}
												else
												{
													if (num8 <= 439)
													{
														if (num8 <= 398)
														{
															if (num8 == 370)
															{
																num3 = 15;
																goto IL_3C3;
															}
															if (num8 != 398)
															{
																goto IL_3C3;
															}
															num3 = 7;
															goto IL_3C3;
														}
														else if (num8 != 422)
														{
															if (num8 != 438)
															{
																if (num8 != 439)
																{
																	goto IL_3C3;
																}
																num3 = 4;
																goto IL_3C3;
															}
															else
															{
																if (Main.npc[j].ai[1] == 1f)
																{
																	num2 = 1600;
																	num3 = 4;
																	goto IL_3C3;
																}
																goto IL_3C3;
															}
														}
													}
													else if (num8 <= 517)
													{
														if (num8 != 493 && num8 != 507 && num8 != 517)
														{
															goto IL_3C3;
														}
													}
													else
													{
														if (num8 == 636)
														{
															num3 = 14;
															goto IL_3C3;
														}
														if (num8 == 657)
														{
															num3 = 13;
															goto IL_3C3;
														}
														if (num8 != 668)
														{
															goto IL_3C3;
														}
														num3 = 16;
														goto IL_3C3;
													}
													num3 = 10;
												}
											}
											else
											{
												num3 = 6;
											}
										}
										else
										{
											num3 = 4;
										}
									}
									else
									{
										num3 = 5;
									}
								}
								else
								{
									num3 = 3;
								}
							}
							else
							{
								num3 = 2;
							}
						}
						else
						{
							num3 = 1;
						}
						IL_3C3:
						if (NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[j].type])
						{
							num3 = 12;
						}
						if (NPCID.Sets.NoInvasionMusic[Main.npc[j].type] && NPC.GetNPCInvasionGroup(Main.npc[j].type) != 0)
						{
							num3 = 0;
						}
						if (num3 == 0 && Main.npc[j].boss)
						{
							num3 = 1;
						}
						if (Main.remixWorld && Main.getGoodWorld && (Main.npc[j].type == 127 || Main.npc[j].type == 134 || Main.npc[j].type == 125 || Main.npc[j].type == 126))
						{
							num3 = 17;
						}
						if (num3 != 0)
						{
							Rectangle value;
							value..ctor((int)(Main.npc[j].position.X + (float)(Main.npc[j].width / 2)) - num2, (int)(Main.npc[j].position.Y + (float)(Main.npc[j].height / 2)) - num2, num2 * 2, num2 * 2);
							if (rectangle.Intersects(value))
							{
								if (Main.npc[j].ModNPC != null && Main.npc[j].ModNPC.Music >= 0 && (modMusic < 0 || Main.npc[j].ModNPC.SceneEffectPriority > modPriority))
								{
									modMusic = Main.npc[j].ModNPC.Music;
									modPriority = Main.npc[j].ModNPC.SceneEffectPriority;
								}
								switch (num3)
								{
								case 1:
									flag = true;
									break;
								case 2:
									flag3 = true;
									break;
								case 3:
									flag4 = true;
									break;
								case 4:
									flag5 = true;
									break;
								case 5:
									flag6 = true;
									break;
								case 6:
									flag7 = true;
									break;
								case 7:
									flag8 = true;
									break;
								case 8:
									flag9 = true;
									break;
								case 9:
									flag10 = true;
									break;
								case 10:
									flag11 = true;
									break;
								case 11:
									flag12 = true;
									break;
								case 12:
									flag13 = true;
									break;
								case 13:
									flag14 = true;
									break;
								case 14:
									flag15 = true;
									break;
								case 15:
									flag16 = true;
									break;
								case 16:
									flag2 = true;
									break;
								case 17:
									flag17 = true;
									break;
								}
							}
						}
					}
				}
				LoaderManager.Get<SceneEffectLoader>().UpdateMusic(ref modMusic, ref modPriority);
			}
			float num9 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
			if (Main.musicVolume == 0f)
			{
				Main.newMusic = 0;
				return;
			}
			if (Main.gameMenu)
			{
				if (Main.netMode != 2)
				{
					if (WorldGen.drunkWorldGen)
					{
						if (WorldGen.remixWorldGen)
						{
							Main.newMusic = 70;
						}
						else
						{
							Main.newMusic = 60;
						}
					}
					else if (WorldGen.remixWorldGen)
					{
						Main.newMusic = 8;
					}
					else if (Main.menuMode == 3000)
					{
						Main.newMusic = 89;
					}
					else if (WorldGen.tenthAnniversaryWorldGen)
					{
						Main.newMusic = 11;
					}
					else
					{
						Main.newMusic = MenuLoader.CurrentMenu.Music;
					}
					if (Main._isAsyncLoadComplete && Main.newMusic == 50 && !Main.audioSystem.IsTrackPlaying(50))
					{
						Main.newMusic = 51;
						if (Main.musicNoCrossFade[51])
						{
							Main.musicFade[51] = 1f;
							return;
						}
					}
				}
				else
				{
					Main.newMusic = 0;
				}
				return;
			}
			float num4 = (float)Main.maxTilesX / 4200f;
			num4 *= num4;
			float num5 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num4)) / (Main.worldSurface / 5.0));
			if (CreditsRollEvent.IsEventOngoing)
			{
				Main.newMusic = 89;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossHigh)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (Main.player[Main.myPlayer].happyFunTorchTime)
			{
				Main.newMusic = 13;
				return;
			}
			if (flag8)
			{
				Main.newMusic = 38;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossMedium)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag17)
			{
				Main.newMusic = 81;
				return;
			}
			if (flag10)
			{
				Main.newMusic = 37;
				return;
			}
			if (flag11)
			{
				Main.newMusic = 34;
				return;
			}
			if (flag7)
			{
				Main.newMusic = 24;
				return;
			}
			if (modPriority >= SceneEffectPriority.BossLow)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag15)
			{
				Main.newMusic = 57;
				return;
			}
			if (flag16)
			{
				Main.newMusic = 58;
				return;
			}
			if (flag3)
			{
				Main.newMusic = 12;
				return;
			}
			if (flag)
			{
				Main.newMusic = 5;
				return;
			}
			if (flag4)
			{
				Main.newMusic = 13;
				return;
			}
			if (flag5)
			{
				Main.newMusic = 17;
				return;
			}
			if (flag6)
			{
				Main.newMusic = 25;
				return;
			}
			if (flag14)
			{
				Main.newMusic = 56;
				return;
			}
			if (flag2)
			{
				Main.newMusic = 90;
				return;
			}
			if (modPriority >= SceneEffectPriority.Event)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (flag9)
			{
				Main.newMusic = 35;
				return;
			}
			if (flag12)
			{
				Main.newMusic = 39;
				return;
			}
			if (flag13)
			{
				Main.newMusic = 41;
				return;
			}
			if (((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 || Main.remixWorld) && Main.pumpkinMoon)
			{
				Main.newMusic = 30;
				return;
			}
			if (((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 || Main.remixWorld) && Main.snowMoon)
			{
				Main.newMusic = 32;
				return;
			}
			if (modPriority >= SceneEffectPriority.Environment)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (Main.eclipse && !Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
			{
				Main.newMusic = 27;
				return;
			}
			if (Main.eclipse && Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0)
			{
				Main.newMusic = 27;
				return;
			}
			if (flag19 && !Main.player[Main.myPlayer].ZoneGraveyard && (!Main.bloodMoon || Main.dayTime) && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
			{
				Main.newMusic = 48;
				return;
			}
			if (Main.remixWorld && Main.bloodMoon && !Main.player[Main.myPlayer].ZoneCrimson && !Main.player[Main.myPlayer].ZoneCorrupt && (double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 && Main.player[Main.myPlayer].position.Y <= (float)(Main.UnderworldLayer * 16))
			{
				Main.newMusic = 2;
				return;
			}
			if (Main.remixWorld && Main.bloodMoon && Main.player[Main.myPlayer].position.Y > (float)(Main.UnderworldLayer * 16) && (double)(Main.player[Main.myPlayer].Center.X / 16f) > (double)Main.maxTilesX * 0.37 + 50.0 && (double)(Main.player[Main.myPlayer].Center.X / 16f) < (double)Main.maxTilesX * 0.63)
			{
				Main.newMusic = 2;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneShimmer)
			{
				Main.newMusic = 91;
				return;
			}
			if (flag18 && Main.dayTime && ((Main.cloudAlpha == 0f && !Main._shouldUseWindyDayMusic) || (double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) && !Main.player[Main.myPlayer].ZoneGraveyard)
			{
				Main.newMusic = 46;
				return;
			}
			if (flag18 && !Main.dayTime && ((!Main.bloodMoon && Main.cloudAlpha == 0f) || (double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) && !Main.player[Main.myPlayer].ZoneGraveyard)
			{
				Main.newMusic = 47;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneSandstorm)
			{
				Main.newMusic = 40;
				return;
			}
			if (Main.player[Main.myPlayer].position.Y > (float)(Main.UnderworldLayer * 16))
			{
				Main.newMusic = 36;
				return;
			}
			if (num5 < 1f)
			{
				Main.newMusic = (Main.dayTime ? 42 : 15);
				return;
			}
			if (modPriority >= SceneEffectPriority.BiomeHigh)
			{
				Main.newMusic = modMusic;
				return;
			}
			if (*Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
			{
				Main.newMusic = 26;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneDungeon)
			{
				Main.newMusic = 23;
				return;
			}
			if ((Main.bgStyle == 9 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) || Main.undergroundBackground == 2)
			{
				Main.newMusic = 29;
				return;
			}
			if (Main.player[Main.myPlayer].ZoneCorrupt)
			{
				if (Main.player[Main.myPlayer].ZoneCrimson && Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.EvilTileCount)
				{
					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						Main.newMusic = 33;
						return;
					}
					Main.newMusic = 16;
					return;
				}
				else
				{
					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						Main.newMusic = 10;
						return;
					}
					Main.newMusic = 8;
					return;
				}
			}
			else if (Main.player[Main.myPlayer].ZoneCrimson)
			{
				if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
				{
					Main.newMusic = 33;
					return;
				}
				Main.newMusic = 16;
				return;
			}
			else
			{
				if (modPriority >= SceneEffectPriority.BiomeMedium)
				{
					Main.newMusic = modMusic;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneMeteor)
				{
					Main.newMusic = 2;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneGraveyard)
				{
					Main.newMusic = 53;
					return;
				}
				if (Main.player[Main.myPlayer].ZoneJungle)
				{
					if (Main.remixWorld)
					{
						if ((double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 7;
							return;
						}
						if (Main.newMusic == 7 && (double)Main.player[Main.myPlayer].position.Y > (Main.rockLayer - 50.0) * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 7;
							return;
						}
						if ((double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = (Main.dayTime ? 42 : 15);
							return;
						}
						Main.newMusic = 54;
						return;
					}
					else
					{
						if ((double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 54;
							return;
						}
						if (Main.newMusic == 54 && (double)Main.player[Main.myPlayer].position.Y > (Main.rockLayer - 50.0) * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 54;
							return;
						}
						if (Main._shouldUseStormMusic && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 52;
							return;
						}
						if (Main.dayTime)
						{
							Main.newMusic = 7;
							return;
						}
						Main.newMusic = 55;
						return;
					}
				}
				else if (Main.player[Main.myPlayer].ZoneSnow)
				{
					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
					{
						if (Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
						{
							Main.newMusic = 14;
							return;
						}
						Main.newMusic = 20;
						return;
					}
					else
					{
						if (Main.remixWorld)
						{
							Main.newMusic = (Main.dayTime ? 42 : 15);
							return;
						}
						Main.newMusic = 14;
						return;
					}
				}
				else
				{
					if (modPriority >= SceneEffectPriority.BiomeLow)
					{
						Main.newMusic = modMusic;
						return;
					}
					if ((double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && (Main.remixWorld || !WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16)))
					{
						if (Main.player[Main.myPlayer].ZoneHallow)
						{
							if (Main.remixWorld && (double)Main.player[Main.myPlayer].position.Y >= Main.rockLayer * 16.0 + (double)(Main.screenHeight / 2))
							{
								Main.newMusic = 9;
								return;
							}
							Main.newMusic = 11;
							return;
						}
						else if (Main.player[Main.myPlayer].ZoneUndergroundDesert)
						{
							if ((double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
							{
								Main.newMusic = 61;
								return;
							}
							Main.newMusic = 21;
							return;
						}
						else
						{
							if (Main.ugMusic == 0)
							{
								Main.ugMusic = 4;
							}
							if (!Main.audioSystem.IsTrackPlaying(4) && !Main.audioSystem.IsTrackPlaying(31))
							{
								if (Main.musicFade[4] == 1f)
								{
									Main.musicFade[31] = 1f;
								}
								if (Main.musicFade[31] == 1f)
								{
									Main.musicFade[4] = 1f;
								}
								int num8 = Main.rand.Next(2);
								if (num8 != 0)
								{
									if (num8 == 1)
									{
										Main.ugMusic = 31;
										Main.musicFade[4] = 0f;
									}
								}
								else
								{
									Main.ugMusic = 4;
									Main.musicFade[31] = 0f;
								}
							}
							Main.newMusic = Main.ugMusic;
							if (Main.remixWorld && (double)(Main.player[Main.myPlayer].position.Y / 16f) > Main.rockLayer && Main.player[Main.myPlayer].position.Y / 16f < (float)(Main.maxTilesY - 350))
							{
								if (Main.cloudAlpha > 0f)
								{
									Main.newMusic = 19;
									return;
								}
								if (Main.player[Main.myPlayer].ZoneDesert)
								{
									Main.newMusic = 21;
									return;
								}
								if (Main._shouldUseWindyDayMusic)
								{
									Main.newMusic = 44;
									return;
								}
							}
						}
					}
					else if (Main.dayTime && Main.player[Main.myPlayer].ZoneHallow)
					{
						if (Main._shouldUseStormMusic)
						{
							Main.newMusic = 52;
							return;
						}
						if (Main.cloudAlpha > 0f && !Main.gameMenu)
						{
							Main.newMusic = 19;
							return;
						}
						if (Main._shouldUseWindyDayMusic && !Main.remixWorld)
						{
							Main.newMusic = 44;
							return;
						}
						Main.newMusic = 9;
						return;
					}
					else if (Main._shouldUseStormMusic)
					{
						if (Main.bloodMoon)
						{
							Main.newMusic = 2;
							return;
						}
						Main.newMusic = 52;
						return;
					}
					else if (WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16))
					{
						if (Main.bloodMoon)
						{
							Main.newMusic = 2;
							return;
						}
						if (!flag18)
						{
							Main.newMusic = (Main.dayTime ? 22 : 43);
							return;
						}
						if (Main.dayTime)
						{
							Main.newMusic = 46;
							return;
						}
						Main.newMusic = 47;
						return;
					}
					else if (Main.player[Main.myPlayer].ZoneDesert)
					{
						if ((double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0)
						{
							Main.newMusic = 21;
							return;
						}
						int num6 = (int)(Main.player[Main.myPlayer].Center.X / 16f);
						int num7 = (int)(Main.player[Main.myPlayer].Center.Y / 16f);
						if (WorldGen.InWorld(num6, num7, 0) && (WallID.Sets.Conversion.Sandstone[(int)(*Main.tile[num6, num7].wall)] || WallID.Sets.Conversion.HardenedSand[(int)(*Main.tile[num6, num7].wall)]))
						{
							Main.newMusic = 61;
							return;
						}
						Main.newMusic = 21;
						return;
					}
					else
					{
						if (Main.remixWorld)
						{
							Main.newMusic = (Main.dayTime ? 42 : 15);
							return;
						}
						if (Main.dayTime)
						{
							if (Main.cloudAlpha > 0f && !Main.gameMenu)
							{
								if (Main.time < 10800.0)
								{
									Main.newMusic = 59;
									return;
								}
								Main.newMusic = 19;
								return;
							}
							else
							{
								if (Main.dayMusic == 0)
								{
									Main.dayMusic = 1;
								}
								if (!Main.audioSystem.IsTrackPlaying(1) && !Main.audioSystem.IsTrackPlaying(18))
								{
									if (Main.rand.Next(2) == 0)
									{
										Main.dayMusic = 1;
									}
									else
									{
										Main.dayMusic = 18;
									}
								}
								Main.newMusic = Main.dayMusic;
								if (Main._shouldUseWindyDayMusic && !Main.remixWorld)
								{
									Main.newMusic = 44;
									return;
								}
							}
						}
						else if (!Main.dayTime)
						{
							if (Main.bloodMoon)
							{
								Main.newMusic = 2;
								return;
							}
							if (Main.cloudAlpha > 0f && !Main.gameMenu)
							{
								Main.newMusic = 19;
								return;
							}
							Main.newMusic = 3;
						}
					}
					return;
				}
			}
		}

		// Token: 0x06000423 RID: 1059 RVA: 0x000A6D78 File Offset: 0x000A4F78
		private void UpdateWindyDayState()
		{
			if (Main.cloudAlpha == 0f)
			{
				Main._shouldUseStormMusic = false;
				if (Main.time < 10800.0 || Main.time > 43200.0 || !Main.dayTime)
				{
					Main._shouldUseWindyDayMusic = false;
					return;
				}
				if (Math.Abs(Main.windSpeedTarget) < Main._minWind)
				{
					Main._shouldUseWindyDayMusic = false;
				}
				if (Math.Abs(Main.windSpeedTarget) >= Main._maxWind)
				{
					Main._shouldUseWindyDayMusic = true;
					return;
				}
			}
			else
			{
				if (Main.cloudAlpha < Main._minRain || Math.Abs(Main.windSpeedTarget) < Main._minWind)
				{
					Main._shouldUseStormMusic = false;
				}
				else if (Main.cloudAlpha >= Main._maxRain && Math.Abs(Main.windSpeedTarget) >= Main._maxWind)
				{
					Main._shouldUseStormMusic = true;
				}
				if (Main.remixWorld)
				{
					Main._shouldUseStormMusic = false;
					return;
				}
				Main._shouldUseWindyDayMusic = false;
			}
		}

		// Token: 0x06000424 RID: 1060 RVA: 0x000A6E50 File Offset: 0x000A5050
		public unsafe static void snowing()
		{
			if (Main.remixWorld)
			{
				return;
			}
			Vector2 scaledSize = Main.Camera.ScaledSize;
			Vector2 scaledPosition = Main.Camera.ScaledPosition;
			if (Main.gamePaused || Main.SceneMetrics.SnowTileCount <= 0 || ((double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16.0 && (!Main.remixWorld || (double)Main.player[Main.myPlayer].position.Y <= Main.worldSurface * 16.0)))
			{
				return;
			}
			float num = (float)Main.SceneMetrics.SnowTileCount / (float)SceneMetrics.SnowTileMax;
			num *= num;
			num *= num;
			float num2 = Main.Camera.ScaledSize.X / (float)Main.maxScreenW;
			int num3 = (int)(500f * num2);
			num3 = (int)((float)num3 * (1f + 2f * Main.cloudAlpha));
			float num4 = 1f + 50f * Main.cloudAlpha;
			bool flag = NPC.IsADeerclopsNearScreen();
			if (flag)
			{
				num /= 20f;
				num3 /= 3;
			}
			int i = 0;
			while ((float)i < num4)
			{
				try
				{
					if ((float)Main.snowDust >= (float)num3 * (Main.gfxQuality / 2f + 0.5f) + (float)num3 * 0.1f)
					{
						break;
					}
					if (Main.rand.NextFloat() < num)
					{
						int num5 = Main.rand.Next((int)scaledSize.X + 1500) - 750;
						int num6 = (int)scaledPosition.Y - Main.rand.Next(50);
						if (Main.player[Main.myPlayer].velocity.Y > 0f)
						{
							num6 -= (int)Main.player[Main.myPlayer].velocity.Y;
						}
						if (Main.rand.Next(5) == 0)
						{
							num5 = Main.rand.Next(500) - 500;
						}
						else if (Main.rand.Next(5) == 0)
						{
							num5 = Main.rand.Next(500) + (int)scaledSize.X;
						}
						if (num5 < 0 || (float)num5 > scaledSize.X)
						{
							num6 += Main.rand.Next((int)((double)scaledSize.Y * 0.8)) + (int)((double)scaledSize.Y * 0.1);
						}
						num5 += (int)scaledPosition.X;
						int num7 = num5 / 16;
						int num8 = num6 / 16;
						if (WorldGen.InWorld(num7, num8, 0) && Main.tile[num7, num8] != null && !Main.tile[num7, num8].nactive() && *Main.tile[num7, num8].wall == 0)
						{
							int num9 = Dust.NewDust(new Vector2((float)num5, (float)num6), 10, 10, 76, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
							Main.dust[num9].velocity.Y = 3f + (float)Main.rand.Next(30) * 0.1f;
							Dust dust = Main.dust[num9];
							dust.velocity.Y = dust.velocity.Y * Main.dust[num9].scale;
							if (!Main.raining)
							{
								Main.dust[num9].velocity.X = Main.windSpeedCurrent + (float)Main.rand.Next(-10, 10) * 0.1f;
								Dust dust2 = Main.dust[num9];
								dust2.velocity.X = dust2.velocity.X + Main.windSpeedCurrent * 15f;
							}
							else
							{
								Main.dust[num9].velocity.X = (float)Math.Sqrt((double)Math.Abs(Main.windSpeedCurrent)) * (float)Math.Sign(Main.windSpeedCurrent) * (Main.cloudAlpha + 0.5f) * 10f + Main.rand.NextFloat() * 0.2f - 0.1f;
								Dust dust3 = Main.dust[num9];
								dust3.velocity.Y = dust3.velocity.Y * 0.5f;
							}
							Dust dust4 = Main.dust[num9];
							dust4.velocity.Y = dust4.velocity.Y * (1f + 0.3f * Main.cloudAlpha);
							Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
							if (flag)
							{
								Main.dust[num9].scale -= 0.5f;
							}
							Main.dust[num9].velocity *= 1f + Main.cloudAlpha * 0.5f;
						}
					}
				}
				catch
				{
				}
				i++;
			}
		}

		// Token: 0x06000425 RID: 1061 RVA: 0x000A734C File Offset: 0x000A554C
		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 15 && month == 12)
			{
				Main.xMas = true;
			}
			else
			{
				Main.xMas = false;
			}
			if (Main.forceXMasForToday)
			{
				Main.xMas = true;
			}
		}

		// Token: 0x06000426 RID: 1062 RVA: 0x000A7394 File Offset: 0x000A5594
		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 10 && month == 10)
			{
				Main.halloween = true;
			}
			else if (day <= 1 && month == 11)
			{
				Main.halloween = true;
			}
			else
			{
				Main.halloween = false;
			}
			if (Main.forceHalloweenForToday)
			{
				Main.halloween = true;
			}
		}

		// Token: 0x06000427 RID: 1063 RVA: 0x000A73F0 File Offset: 0x000A55F0
		public void updateCloudLayer()
		{
			if (Main.netMode == 1 || (Main.netMode == 0 && Main.gameMenu))
			{
				return;
			}
			int num = 86400;
			int num2 = num / 24;
			float num3 = Math.Max(1f, 1f + 4f * Main.cloudAlpha);
			if (Main.cloudBGActive > 0f)
			{
				if (Main.cloudBGActive > 1f)
				{
					Main.cloudBGActive -= (float)Main.desiredWorldEventsUpdateRate / num3;
				}
				if (Main.cloudBGActive < 1f)
				{
					Main.cloudBGActive = 1f;
				}
				if (Main.cloudBGActive == 1f && Main.rand.NextDouble() <= Main.desiredWorldEventsUpdateRate / (double)((float)(num2 * 2) * num3))
				{
					Main.cloudBGActive = (float)(-(float)Main.rand.Next(num2 * 4, num * 4));
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				return;
			}
			if (Main.cloudBGActive < 0f)
			{
				Main.cloudBGActive += (float)Main.desiredWorldEventsUpdateRate * num3;
				if (Main.raining)
				{
					Main.cloudBGActive += (float)(2.0 * Main.desiredWorldEventsUpdateRate) * num3;
				}
			}
			if (Main.cloudBGActive > 0f)
			{
				Main.cloudBGActive = 0f;
			}
			if (Main.cloudBGActive == 0f && Main.rand.NextDouble() <= (double)num3 * Main.desiredWorldEventsUpdateRate / (double)(num2 * 12))
			{
				Main.cloudBGActive = (float)Main.rand.Next(num2 * 3, num * 2);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.IsItStorming)
			{
				Main.cloudBGActive = (float)Main.rand.Next(num2, num2 * 4);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000428 RID: 1064 RVA: 0x000A75DC File Offset: 0x000A57DC
		public static void TeleportEffect(Rectangle effectRect, int Style, int extraInfo = 0, float dustCountMult = 1f, TeleportationSide side = TeleportationSide.Entry, Vector2 otherPosition = default(Vector2))
		{
			switch (Style)
			{
			case 0:
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item6), effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num2 = effectRect.Width * effectRect.Height / 5;
				num2 = (int)((float)num2 * dustCountMult);
				for (int i = 0; i < num2; i++)
				{
					int num3 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 159, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num3].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (i < 10)
					{
						Main.dust[num3].scale += 0.25f;
					}
					if (i < 5)
					{
						Main.dust[num3].scale += 0.25f;
					}
				}
				return;
			}
			case 1:
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item8), effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num4 = effectRect.Width * effectRect.Height / 5;
				num4 = (int)((float)num4 * dustCountMult);
				for (int num5 = 0; num5 < num4; num5++)
				{
					int num6 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 164, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num6].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (num5 < 10)
					{
						Main.dust[num6].scale += 0.25f;
					}
					if (num5 < 5)
					{
						Main.dust[num6].scale += 0.25f;
					}
				}
				return;
			}
			case 2:
			{
				int num7 = (int)(50f * dustCountMult);
				for (int num8 = 0; num8 < num7; num8++)
				{
					Main.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Color.GhostWhite, 1.2f)].velocity *= 0.5f;
				}
				return;
			}
			case 3:
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item6), effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num9 = (int)(50f * dustCountMult);
				for (int j = 0; j < num9; j++)
				{
					int num10 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 180, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num10].noGravity = true;
					for (int k = 0; k < 5; k++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.dust[num10].velocity *= 0.75f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num10].velocity *= 2f;
						Main.dust[num10].scale *= 1.2f;
					}
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num10].velocity *= 2f;
						Main.dust[num10].scale *= 1.2f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num10].fadeIn = (float)Main.rand.Next(75, 100) * 0.01f;
						Main.dust[num10].scale = (float)Main.rand.Next(25, 75) * 0.01f;
					}
					Main.dust[num10].scale *= 0.8f;
				}
				return;
			}
			case 4:
			{
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item8), effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num11 = effectRect.Width * effectRect.Height / 5;
				num11 = (int)((float)num11 * dustCountMult);
				for (int num12 = 0; num12 < num11; num12++)
				{
					Dust dust2 = Main.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263, 0f, 0f, 0, default(Color), 1f)];
					dust2.color = PortalHelper.GetPortalColor(extraInfo);
					dust2.noLight = true;
					dust2.noGravity = true;
					dust2.scale = 1.2f;
					dust2.fadeIn = 0.4f;
					dust2.color.A = byte.MaxValue;
				}
				return;
			}
			case 5:
			{
				Vector2 position = effectRect.TopLeft();
				int num13 = (int)(100f * dustCountMult);
				for (int num14 = 0; num14 < num13; num14++)
				{
					Dust dust3 = Dust.NewDustDirect(position, effectRect.Width, effectRect.Height + 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
					dust3.velocity.Y = dust3.velocity.Y * 0f;
					dust3.velocity.Y = dust3.velocity.Y - 3.5f;
					dust3.velocity.X = dust3.velocity.X * 1.5f;
					dust3.scale = 0.8f;
					dust3.alpha = 130;
					dust3.noGravity = true;
					dust3.fadeIn = 1.2f;
				}
				SoundEngine.PlaySound(19, effectRect.Center.ToVector2(), 0);
				return;
			}
			case 6:
			case 8:
			case 12:
				break;
			case 7:
			{
				Vector2 position2 = effectRect.TopLeft();
				int num15 = (int)(50f * dustCountMult);
				for (int num16 = 0; num16 < num15; num16++)
				{
					Dust dust4 = Dust.NewDustDirect(position2, effectRect.Width, effectRect.Height + 24, 35, 0f, 0f, 0, default(Color), 1f);
					dust4.velocity.Y = dust4.velocity.Y * 0f;
					dust4.velocity.Y = dust4.velocity.Y - 3.5f;
					dust4.velocity.X = dust4.velocity.X * 1.5f;
					dust4.scale = 0.8f;
					dust4.alpha = 130;
					dust4.noGravity = true;
					dust4.fadeIn = 1.2f;
				}
				SoundEngine.PlaySound(SoundID.Item8, new Vector2?(effectRect.Center.ToVector2()), null);
				return;
			}
			case 9:
			{
				effectRect.Inflate(15, 15);
				int num17 = (int)(100f * dustCountMult);
				for (int num18 = 0; num18 < num17; num18++)
				{
					TeleportPylonsSystem.SpawnInWorldDust(extraInfo, effectRect);
				}
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item6), effectRect.Center.X, effectRect.Center.Y);
				return;
			}
			case 10:
			{
				effectRect.Inflate(15, 15);
				int num19 = (int)(60f * dustCountMult);
				Vector2 vector = otherPosition - effectRect.TopLeft();
				for (int l = 0; l < num19; l++)
				{
					float fadeIn = 0.4f + Main.rand.NextFloat();
					float scale = 0.4f + Main.rand.NextFloat();
					Color newColor = Main.hslToRgb(0.66f + Main.rand.NextFloat() * 0.24f, 1f, 0.5f, byte.MaxValue);
					Dust dust = Dust.NewDustDirect(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 267, 0f, 0f, 127, newColor, 1f);
					dust.scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (l < 10)
					{
						dust.scale += 0.25f;
					}
					if (l < 5)
					{
						dust.scale += 0.25f;
					}
					if ((float)l < (float)num19 * 0.8f)
					{
						dust.velocity += vector * 0.1f * Main.rand.NextFloat();
					}
					dust.noGravity = true;
					dust.noLight = true;
					dust.scale = scale;
					dust.fadeIn = fadeIn;
					if (dust.dustIndex != 6000)
					{
						Dust dust5 = Dust.CloneDust(dust);
						dust5.scale *= 0.65f;
						dust5.fadeIn *= 0.65f;
						dust5.color = new Color(255, 255, 255, 255);
					}
				}
				SoundEngine.PlaySound(new SoundStyle?(SoundID.Item8), effectRect.Center.X, effectRect.Center.Y);
				return;
			}
			case 11:
				for (int m = 0; m < 50; m++)
				{
					int num20 = Main.rand.Next(4);
					Color color = Color.Green;
					switch (num20)
					{
					case 0:
					case 1:
						color..ctor(100, 255, 100);
						break;
					case 2:
						color = Color.Yellow;
						break;
					case 3:
						color = Color.White;
						break;
					}
					Dust dust6 = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(effectRect), 267, null, 0, default(Color), 1f);
					dust6.noGravity = true;
					dust6.color = color;
					dust6.velocity *= 2f;
					dust6.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust6.fadeIn = 0.5f;
				}
				return;
			case 13:
				SoundEngine.PlaySound(SoundID.Item8, new Vector2?(effectRect.Center.ToVector2()), null);
				for (int n = 0; n < 21; n++)
				{
					int num21 = Dust.NewDust(Main.rand.NextVector2FromRectangle(effectRect), 2, 2, 27, 0f, 0f, 100, default(Color), (float)Main.rand.Next(1, 3));
					Main.dust[num21].velocity *= 1.75f;
					if (n % 3 == 0)
					{
						Main.dust[num21].velocity *= 1.5f;
					}
					Main.dust[num21].noLightEmittence = true;
					Main.dust[num21].noGravity = true;
				}
				break;
			default:
				return;
			}
		}

		// Token: 0x06000429 RID: 1065 RVA: 0x000A80D0 File Offset: 0x000A62D0
		public static void Ambience()
		{
			Main.ambientCounter++;
			if (Main.ambientCounter < 15)
			{
				return;
			}
			Main.ambientCounter = 0;
			Main.LocalPlayer.Center.ToPoint();
			float usedWaterVolume = MathHelper.Clamp(Main.ambientWaterfallStrength / 50f * (1f - Main.shimmerAlpha), 0f, 1f);
			Main.<Ambience>g__HandleAmbientSound|1387_0(SoundID.Waterfall, ref Main.waterfallSoundSlot, usedWaterVolume, new Vector2(Main.ambientWaterfallX, Main.ambientWaterfallY));
			float num = Math.Abs(Main.ambientLavaX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavaY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
			float num5 = Math.Abs(Main.ambientLavafallX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavafallY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
			float num2 = Main.ambientLavaX;
			float num3 = Main.ambientLavaY;
			if (num5 < num)
			{
				num2 = Main.ambientLavafallX;
				num3 = Main.ambientLavafallY;
			}
			float num4 = Main.ambientLavafallStrength + Main.ambientLavaStrength;
			float usedLavaVolume = (Main.ambientLavaStrength > 0f) ? MathHelper.Clamp(num4 / 50f, 0f, 1f) : 0f;
			Main.<Ambience>g__HandleAmbientSound|1387_0(SoundID.Lavafall, ref Main.lavafallSoundSlot, usedLavaVolume, new Vector2(num2, num3));
		}

		// Token: 0x0600042A RID: 1066 RVA: 0x000A8238 File Offset: 0x000A6438
		public static void AnimateTiles_CritterCages()
		{
			if (!Main.critterCage)
			{
				return;
			}
			for (int i = 0; i < Main.cageFrames; i++)
			{
				if (Main.bunnyCageFrame[i] == 0)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							int num = Main.rand.Next(7);
							if (num == 0)
							{
								Main.bunnyCageFrame[i] = 4;
							}
							else if (num <= 2)
							{
								Main.bunnyCageFrame[i] = 2;
							}
							else
							{
								Main.bunnyCageFrame[i] = 1;
							}
						}
						Main.bunnyCageFrameCounter[i] = 0;
					}
				}
				else if (Main.bunnyCageFrame[i] == 1)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] >= 10)
					{
						Main.bunnyCageFrameCounter[i] = 0;
						Main.bunnyCageFrame[i] = 0;
					}
				}
				else if (Main.bunnyCageFrame[i] >= 2 && Main.bunnyCageFrame[i] <= 3)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] >= 10)
					{
						Main.bunnyCageFrameCounter[i] = 0;
						Main.bunnyCageFrame[i]++;
					}
					if (Main.bunnyCageFrame[i] > 3)
					{
						Main.bunnyCageFrame[i] = 0;
					}
				}
				else if (Main.bunnyCageFrame[i] >= 4 && Main.bunnyCageFrame[i] <= 10)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] >= 5)
					{
						Main.bunnyCageFrameCounter[i] = 0;
						Main.bunnyCageFrame[i]++;
					}
				}
				else if (Main.bunnyCageFrame[i] == 11)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(7) == 0)
							{
								Main.bunnyCageFrame[i] = 13;
							}
							else
							{
								Main.bunnyCageFrame[i] = 12;
							}
						}
						Main.bunnyCageFrameCounter[i] = 0;
					}
				}
				else if (Main.bunnyCageFrame[i] == 12)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] >= 10)
					{
						Main.bunnyCageFrameCounter[i] = 0;
						Main.bunnyCageFrame[i] = 11;
					}
				}
				else if (Main.bunnyCageFrame[i] >= 13)
				{
					Main.bunnyCageFrameCounter[i]++;
					if (Main.bunnyCageFrameCounter[i] >= 5)
					{
						Main.bunnyCageFrameCounter[i] = 0;
						Main.bunnyCageFrame[i]++;
					}
					if (Main.bunnyCageFrame[i] > 21)
					{
						Main.bunnyCageFrame[i] = 0;
					}
				}
			}
			for (int j = 0; j < Main.cageFrames; j++)
			{
				if (Main.squirrelCageFrame[j] == 0)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							int num2 = Main.rand.Next(7);
							if (num2 == 0)
							{
								Main.squirrelCageFrame[j] = 4;
							}
							else if (num2 <= 2)
							{
								Main.squirrelCageFrame[j] = 2;
							}
							else
							{
								Main.squirrelCageFrame[j] = 1;
							}
						}
						Main.squirrelCageFrameCounter[j] = 0;
					}
				}
				else if (Main.squirrelCageFrame[j] == 1)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 10)
					{
						Main.squirrelCageFrameCounter[j] = 0;
						Main.squirrelCageFrame[j] = 0;
					}
				}
				else if (Main.squirrelCageFrame[j] >= 2 && Main.squirrelCageFrame[j] <= 3)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 5)
					{
						Main.squirrelCageFrameCounter[j] = 0;
						Main.squirrelCageFrame[j]++;
					}
					if (Main.squirrelCageFrame[j] > 3)
					{
						if (Main.rand.Next(5) == 0)
						{
							Main.squirrelCageFrame[j] = 0;
						}
						else
						{
							Main.squirrelCageFrame[j] = 2;
						}
					}
				}
				else if (Main.squirrelCageFrame[j] >= 4 && Main.squirrelCageFrame[j] <= 8)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 5)
					{
						Main.squirrelCageFrameCounter[j] = 0;
						Main.squirrelCageFrame[j]++;
					}
				}
				else if (Main.squirrelCageFrame[j] == 9)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							int num3 = Main.rand.Next(7);
							if (num3 == 0)
							{
								Main.squirrelCageFrame[j] = 13;
							}
							else if (num3 <= 2)
							{
								Main.squirrelCageFrame[j] = 11;
							}
							else
							{
								Main.squirrelCageFrame[j] = 10;
							}
						}
						Main.squirrelCageFrameCounter[j] = 0;
					}
				}
				else if (Main.squirrelCageFrame[j] == 10)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 10)
					{
						Main.squirrelCageFrameCounter[j] = 0;
						Main.squirrelCageFrame[j] = 9;
					}
				}
				else if (Main.squirrelCageFrame[j] == 11 || Main.squirrelCageFrame[j] == 12)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 5)
					{
						Main.squirrelCageFrame[j]++;
						if (Main.squirrelCageFrame[j] > 12)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.squirrelCageFrame[j] = 11;
							}
							else
							{
								Main.squirrelCageFrame[j] = 9;
							}
						}
						Main.squirrelCageFrameCounter[j] = 0;
					}
				}
				else if (Main.squirrelCageFrame[j] >= 13)
				{
					Main.squirrelCageFrameCounter[j]++;
					if (Main.squirrelCageFrameCounter[j] >= 5)
					{
						Main.squirrelCageFrameCounter[j] = 0;
						Main.squirrelCageFrame[j]++;
					}
					if (Main.squirrelCageFrame[j] > 17)
					{
						Main.squirrelCageFrame[j] = 0;
					}
				}
			}
			for (int k = 0; k < Main.cageFrames; k++)
			{
				if (Main.squirrelCageFrameOrange[k] == 0)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							int num4 = Main.rand.Next(7);
							if (num4 == 0)
							{
								Main.squirrelCageFrameOrange[k] = 4;
							}
							else if (num4 <= 2)
							{
								Main.squirrelCageFrameOrange[k] = 2;
							}
							else
							{
								Main.squirrelCageFrameOrange[k] = 1;
							}
						}
						Main.squirrelCageFrameCounterOrange[k] = 0;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] == 1)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 10)
					{
						Main.squirrelCageFrameCounterOrange[k] = 0;
						Main.squirrelCageFrameOrange[k] = 0;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] >= 2 && Main.squirrelCageFrameOrange[k] <= 3)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 5)
					{
						Main.squirrelCageFrameCounterOrange[k] = 0;
						Main.squirrelCageFrameOrange[k]++;
					}
					if (Main.squirrelCageFrameOrange[k] > 3)
					{
						if (Main.rand.Next(5) == 0)
						{
							Main.squirrelCageFrameOrange[k] = 0;
						}
						else
						{
							Main.squirrelCageFrameOrange[k] = 2;
						}
					}
				}
				else if (Main.squirrelCageFrameOrange[k] >= 4 && Main.squirrelCageFrameOrange[k] <= 8)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 5)
					{
						Main.squirrelCageFrameCounterOrange[k] = 0;
						Main.squirrelCageFrameOrange[k]++;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] == 9)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
					{
						if (Main.rand.Next(3) != 0)
						{
							int num5 = Main.rand.Next(7);
							if (num5 == 0)
							{
								Main.squirrelCageFrameOrange[k] = 13;
							}
							else if (num5 <= 2)
							{
								Main.squirrelCageFrameOrange[k] = 11;
							}
							else
							{
								Main.squirrelCageFrameOrange[k] = 10;
							}
						}
						Main.squirrelCageFrameCounterOrange[k] = 0;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] == 10)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 10)
					{
						Main.squirrelCageFrameCounterOrange[k] = 0;
						Main.squirrelCageFrameOrange[k] = 9;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] == 11 || Main.squirrelCageFrameOrange[k] == 12)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 5)
					{
						Main.squirrelCageFrameOrange[k]++;
						if (Main.squirrelCageFrameOrange[k] > 12)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.squirrelCageFrameOrange[k] = 11;
							}
							else
							{
								Main.squirrelCageFrameOrange[k] = 9;
							}
						}
						Main.squirrelCageFrameCounterOrange[k] = 0;
					}
				}
				else if (Main.squirrelCageFrameOrange[k] >= 13)
				{
					Main.squirrelCageFrameCounterOrange[k]++;
					if (Main.squirrelCageFrameCounterOrange[k] >= 5)
					{
						Main.squirrelCageFrameCounterOrange[k] = 0;
						Main.squirrelCageFrameOrange[k]++;
					}
					if (Main.squirrelCageFrameOrange[k] > 17)
					{
						Main.squirrelCageFrameOrange[k] = 0;
					}
				}
			}
			for (int l = 0; l < Main.cageFrames; l++)
			{
				if (Main.mallardCageFrame[l] == 0 || Main.mallardCageFrame[l] == 4)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
					{
						if ((Main.mallardCageFrame[l] == 0 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[l] == 4 && Main.rand.Next(5) == 0))
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.mallardCageFrame[l] = 5;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.mallardCageFrame[l] == 4)
								{
									Main.mallardCageFrame[l] = 0;
								}
								else
								{
									Main.mallardCageFrame[l] = 4;
								}
							}
							else
							{
								Main.mallardCageFrame[l] = 1;
							}
						}
						Main.mallardCageFrameCounter[l] = 0;
					}
				}
				else if (Main.mallardCageFrame[l] >= 1 && Main.mallardCageFrame[l] <= 3)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] >= 5)
					{
						Main.mallardCageFrameCounter[l] = 0;
						Main.mallardCageFrame[l]++;
					}
					if (Main.mallardCageFrame[l] > 3)
					{
						if (Main.rand.Next(5) == 0)
						{
							Main.mallardCageFrame[l] = 0;
						}
						else
						{
							Main.mallardCageFrame[l] = 1;
						}
					}
				}
				else if (Main.mallardCageFrame[l] >= 5 && Main.mallardCageFrame[l] <= 11)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] >= 5)
					{
						Main.mallardCageFrameCounter[l] = 0;
						Main.mallardCageFrame[l]++;
					}
				}
				else if (Main.mallardCageFrame[l] == 12 || Main.mallardCageFrame[l] == 16)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
					{
						if ((Main.mallardCageFrame[l] == 12 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[l] == 16 && Main.rand.Next(5) == 0))
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.mallardCageFrame[l] = 17;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.mallardCageFrame[l] == 16)
								{
									Main.mallardCageFrame[l] = 12;
								}
								else
								{
									Main.mallardCageFrame[l] = 16;
								}
							}
							else
							{
								Main.mallardCageFrame[l] = 13;
							}
						}
						Main.mallardCageFrameCounter[l] = 0;
					}
				}
				else if (Main.mallardCageFrame[l] >= 13 && Main.mallardCageFrame[l] <= 15)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] >= 5)
					{
						Main.mallardCageFrame[l]++;
						if (Main.mallardCageFrame[l] > 15)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.mallardCageFrame[l] = 12;
							}
							else
							{
								Main.mallardCageFrame[l] = 13;
							}
						}
						Main.mallardCageFrameCounter[l] = 0;
					}
				}
				else if (Main.mallardCageFrame[l] >= 17)
				{
					Main.mallardCageFrameCounter[l]++;
					if (Main.mallardCageFrameCounter[l] >= 5)
					{
						Main.mallardCageFrameCounter[l] = 0;
						Main.mallardCageFrame[l]++;
					}
					if (Main.mallardCageFrame[l] > 23)
					{
						Main.mallardCageFrame[l] = 0;
					}
				}
			}
			for (int m = 0; m < Main.cageFrames; m++)
			{
				if (Main.duckCageFrame[m] == 0 || Main.duckCageFrame[m] == 4)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
					{
						if ((Main.duckCageFrame[m] == 0 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[m] == 4 && Main.rand.Next(5) == 0))
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.duckCageFrame[m] = 5;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.duckCageFrame[m] == 4)
								{
									Main.duckCageFrame[m] = 0;
								}
								else
								{
									Main.duckCageFrame[m] = 4;
								}
							}
							else
							{
								Main.duckCageFrame[m] = 1;
							}
						}
						Main.duckCageFrameCounter[m] = 0;
					}
				}
				else if (Main.duckCageFrame[m] >= 1 && Main.duckCageFrame[m] <= 3)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] >= 5)
					{
						Main.duckCageFrameCounter[m] = 0;
						Main.duckCageFrame[m]++;
					}
					if (Main.duckCageFrame[m] > 3)
					{
						if (Main.rand.Next(5) == 0)
						{
							Main.duckCageFrame[m] = 0;
						}
						else
						{
							Main.duckCageFrame[m] = 1;
						}
					}
				}
				else if (Main.duckCageFrame[m] >= 5 && Main.duckCageFrame[m] <= 11)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] >= 5)
					{
						Main.duckCageFrameCounter[m] = 0;
						Main.duckCageFrame[m]++;
					}
				}
				else if (Main.duckCageFrame[m] == 12 || Main.duckCageFrame[m] == 16)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
					{
						if ((Main.duckCageFrame[m] == 12 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[m] == 16 && Main.rand.Next(5) == 0))
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.duckCageFrame[m] = 17;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.duckCageFrame[m] == 16)
								{
									Main.duckCageFrame[m] = 12;
								}
								else
								{
									Main.duckCageFrame[m] = 16;
								}
							}
							else
							{
								Main.duckCageFrame[m] = 13;
							}
						}
						Main.duckCageFrameCounter[m] = 0;
					}
				}
				else if (Main.duckCageFrame[m] >= 13 && Main.duckCageFrame[m] <= 15)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] >= 5)
					{
						Main.duckCageFrame[m]++;
						if (Main.duckCageFrame[m] > 15)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.duckCageFrame[m] = 12;
							}
							else
							{
								Main.duckCageFrame[m] = 13;
							}
						}
						Main.duckCageFrameCounter[m] = 0;
					}
				}
				else if (Main.duckCageFrame[m] >= 17)
				{
					Main.duckCageFrameCounter[m]++;
					if (Main.duckCageFrameCounter[m] >= 5)
					{
						Main.duckCageFrameCounter[m] = 0;
						Main.duckCageFrame[m]++;
					}
					if (Main.duckCageFrame[m] > 23)
					{
						Main.duckCageFrame[m] = 0;
					}
				}
			}
			for (int n = 0; n < Main.cageFrames; n++)
			{
				Main.grebeCageFrameCounter[n]++;
				bool flag = Main.grebeCageFrame[n] == 0 || Main.grebeCageFrame[n] == 7;
				bool flag10 = Main.grebeCageFrame[n] == 16 || Main.grebeCageFrame[n] == 20;
				int num6 = 5;
				if (flag)
				{
					num6 = Main.rand.Next(300, 400);
				}
				if (flag10)
				{
					num6 = Main.rand.Next(480, 600);
				}
				if (Main.grebeCageFrameCounter[n] >= num6)
				{
					Main.grebeCageFrameCounter[n] = 0;
					if (Main.grebeCageFrame[n] >= 25 && Main.grebeCageFrame[n] <= 27)
					{
						Main.grebeCageFrame[n]++;
						if (Main.grebeCageFrame[n] > 27)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.grebeCageFrame[n] = 7;
							}
							else
							{
								Main.grebeCageFrame[n] = 25;
							}
						}
					}
					else if (Main.grebeCageFrame[n] >= 22 && Main.grebeCageFrame[n] <= 24)
					{
						Main.grebeCageFrame[n]++;
						if (Main.grebeCageFrame[n] > 24)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.grebeCageFrame[n] = 0;
							}
							else
							{
								Main.grebeCageFrame[n] = 22;
							}
						}
					}
					else if (Main.grebeCageFrame[n] == 0 && Main.rand.Next(3) == 0)
					{
						Main.grebeCageFrame[n] = ((Main.rand.Next(2) == 0) ? 22 : 14);
					}
					else if (Main.grebeCageFrame[n] == 7 && Main.rand.Next(3) == 0)
					{
						Main.grebeCageFrame[n] = ((Main.rand.Next(2) == 0) ? 25 : 18);
					}
					else if (Main.grebeCageFrame[n] == 13 || Main.grebeCageFrame[n] == 17)
					{
						Main.grebeCageFrame[n] = 0;
					}
					else if (Main.grebeCageFrame[n] == 21)
					{
						Main.grebeCageFrame[n] = 7;
					}
					else
					{
						Main.grebeCageFrame[n]++;
					}
				}
			}
			for (int num7 = 0; num7 < Main.cageFrames; num7++)
			{
				Main.seagullCageFrameCounter[num7]++;
				bool flag2 = Main.seagullCageFrame[num7] == 0 || Main.seagullCageFrame[num7] == 14;
				bool flag3 = Main.seagullCageFrame[num7] >= 15 && Main.seagullCageFrame[num7] <= 18;
				bool flag11 = Main.seagullCageFrame[num7] >= 9 && Main.seagullCageFrame[num7] <= 13;
				int num8 = 6;
				if (flag2)
				{
					num8 = Main.rand.Next(180, 250);
				}
				if (flag3)
				{
					num8 = 66;
				}
				if (flag11)
				{
					num8 = 78;
				}
				if (Main.seagullCageFrameCounter[num7] >= num8)
				{
					Main.seagullCageFrameCounter[num7] = 0;
					if (Main.seagullCageFrame[num7] == 0 && Main.rand.Next(3) == 0)
					{
						Main.seagullCageFrame[num7] = 9;
					}
					else if (Main.seagullCageFrame[num7] == 14)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.seagullCageFrame[num7] = 15;
						}
						else
						{
							Main.seagullCageFrame[num7] = 19;
						}
					}
					else if (Main.seagullCageFrame[num7] == 9)
					{
						Main.seagullCageFrame[num7] = 0;
					}
					else if (Main.seagullCageFrame[num7] == 8 || Main.seagullCageFrame[num7] == 15)
					{
						Main.seagullCageFrame[num7] = 14;
					}
					else
					{
						Main.seagullCageFrame[num7]++;
						if (Main.seagullCageFrame[num7] > 26)
						{
							Main.seagullCageFrame[num7] = 0;
						}
					}
				}
				else if (Main.seagullCageFrame[num7] >= 15 && Main.seagullCageFrame[num7] <= 18)
				{
					int num9 = Main.seagullCageFrameCounter[num7] % 66;
					if (num9 > 60)
					{
						Main.seagullCageFrame[num7] = 15;
					}
					else if (num9 > 54)
					{
						Main.seagullCageFrame[num7] = 16;
					}
					else if (num9 > 48)
					{
						Main.seagullCageFrame[num7] = 17;
					}
					else if (num9 > 42)
					{
						Main.seagullCageFrame[num7] = 18;
					}
					else if (num9 > 36)
					{
						Main.seagullCageFrame[num7] = 17;
					}
					else if (num9 > 30)
					{
						Main.seagullCageFrame[num7] = 16;
					}
					else if (num9 > 24)
					{
						Main.seagullCageFrame[num7] = 17;
					}
					else if (num9 > 18)
					{
						Main.seagullCageFrame[num7] = 18;
					}
					else if (num9 > 12)
					{
						Main.seagullCageFrame[num7] = 17;
					}
					else if (num9 > 6)
					{
						Main.seagullCageFrame[num7] = 16;
					}
					else
					{
						Main.seagullCageFrame[num7] = 15;
					}
				}
				else if (Main.seagullCageFrame[num7] >= 9 && Main.seagullCageFrame[num7] <= 13)
				{
					int num10 = Main.seagullCageFrameCounter[num7] % 78;
					if (num10 > 72)
					{
						Main.seagullCageFrame[num7] = 9;
					}
					else if (num10 > 66)
					{
						Main.seagullCageFrame[num7] = 10;
					}
					else if (num10 > 60)
					{
						Main.seagullCageFrame[num7] = 11;
					}
					else if (num10 > 54)
					{
						Main.seagullCageFrame[num7] = 12;
					}
					else if (num10 > 48)
					{
						Main.seagullCageFrame[num7] = 13;
					}
					else if (num10 > 42)
					{
						Main.seagullCageFrame[num7] = 12;
					}
					else if (num10 > 36)
					{
						Main.seagullCageFrame[num7] = 11;
					}
					else if (num10 > 30)
					{
						Main.seagullCageFrame[num7] = 12;
					}
					else if (num10 > 24)
					{
						Main.seagullCageFrame[num7] = 13;
					}
					else if (num10 > 18)
					{
						Main.seagullCageFrame[num7] = 12;
					}
					else if (num10 > 12)
					{
						Main.seagullCageFrame[num7] = 11;
					}
					else if (num10 > 6)
					{
						Main.seagullCageFrame[num7] = 10;
					}
					else
					{
						Main.seagullCageFrame[num7] = 9;
					}
				}
			}
			for (int num11 = 0; num11 < Main.cageFrames; num11++)
			{
				if (Main.birdCageFrame[num11] == 0)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] > Main.rand.Next(30, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.birdCageFrame[num11] = 2;
							}
							else
							{
								Main.birdCageFrame[num11] = 1;
							}
						}
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] == 1)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
					{
						Main.birdCageFrameCounter[num11] = 0;
						Main.birdCageFrame[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] >= 2 && Main.birdCageFrame[num11] <= 5)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] >= 5)
					{
						Main.birdCageFrameCounter[num11] = 0;
						if (Main.birdCageFrame[num11] == 3 && Main.rand.Next(3) == 0)
						{
							Main.birdCageFrame[num11] = 13;
						}
						else
						{
							Main.birdCageFrame[num11]++;
						}
					}
				}
				else if (Main.birdCageFrame[num11] == 6)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] > Main.rand.Next(45, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.birdCageFrame[num11] = 7;
							}
							else if (Main.rand.Next(6) == 0)
							{
								Main.birdCageFrame[num11] = 11;
							}
						}
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] >= 7 && Main.birdCageFrame[num11] <= 10)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] >= 5)
					{
						Main.birdCageFrame[num11]++;
						if (Main.birdCageFrame[num11] > 10)
						{
							Main.birdCageFrame[num11] = 0;
						}
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] >= 11 && Main.birdCageFrame[num11] <= 13)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] >= 5)
					{
						Main.birdCageFrame[num11]++;
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] == 14)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] > Main.rand.Next(5, 600))
					{
						if (Main.rand.Next(20) == 0)
						{
							Main.birdCageFrame[num11] = 16;
						}
						else if (Main.rand.Next(20) == 0)
						{
							Main.birdCageFrame[num11] = 4;
						}
						else
						{
							Main.birdCageFrame[num11] = 15;
						}
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
				else if (Main.birdCageFrame[num11] == 15)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] >= 10)
					{
						Main.birdCageFrameCounter[num11] = 0;
						Main.birdCageFrame[num11] = 14;
					}
				}
				else if (Main.birdCageFrame[num11] >= 16 && Main.birdCageFrame[num11] <= 18)
				{
					Main.birdCageFrameCounter[num11]++;
					if (Main.birdCageFrameCounter[num11] >= 5)
					{
						Main.birdCageFrame[num11]++;
						if (Main.birdCageFrame[num11] > 18)
						{
							Main.birdCageFrame[num11] = 0;
						}
						Main.birdCageFrameCounter[num11] = 0;
					}
				}
			}
			for (int num12 = 0; num12 < Main.cageFrames; num12++)
			{
				if (Main.blueBirdCageFrame[num12] == 0)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] > Main.rand.Next(30, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.blueBirdCageFrame[num12] = 2;
							}
							else
							{
								Main.blueBirdCageFrame[num12] = 1;
							}
						}
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] == 1)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
					{
						Main.blueBirdCageFrameCounter[num12] = 0;
						Main.blueBirdCageFrame[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] >= 2 && Main.blueBirdCageFrame[num12] <= 5)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] >= 5)
					{
						Main.blueBirdCageFrameCounter[num12] = 0;
						if (Main.blueBirdCageFrame[num12] == 3 && Main.rand.Next(3) == 0)
						{
							Main.blueBirdCageFrame[num12] = 13;
						}
						else
						{
							Main.blueBirdCageFrame[num12]++;
						}
					}
				}
				else if (Main.blueBirdCageFrame[num12] == 6)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] > Main.rand.Next(45, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.blueBirdCageFrame[num12] = 7;
							}
							else if (Main.rand.Next(6) == 0)
							{
								Main.blueBirdCageFrame[num12] = 11;
							}
						}
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] >= 7 && Main.blueBirdCageFrame[num12] <= 10)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] >= 5)
					{
						Main.blueBirdCageFrame[num12]++;
						if (Main.blueBirdCageFrame[num12] > 10)
						{
							Main.blueBirdCageFrame[num12] = 0;
						}
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] >= 11 && Main.blueBirdCageFrame[num12] <= 13)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] >= 5)
					{
						Main.blueBirdCageFrame[num12]++;
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] == 14)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] > Main.rand.Next(5, 600))
					{
						if (Main.rand.Next(20) == 0)
						{
							Main.blueBirdCageFrame[num12] = 16;
						}
						else if (Main.rand.Next(20) == 0)
						{
							Main.blueBirdCageFrame[num12] = 4;
						}
						else
						{
							Main.blueBirdCageFrame[num12] = 15;
						}
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
				else if (Main.blueBirdCageFrame[num12] == 15)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] >= 10)
					{
						Main.blueBirdCageFrameCounter[num12] = 0;
						Main.blueBirdCageFrame[num12] = 14;
					}
				}
				else if (Main.blueBirdCageFrame[num12] >= 16 && Main.blueBirdCageFrame[num12] <= 18)
				{
					Main.blueBirdCageFrameCounter[num12]++;
					if (Main.blueBirdCageFrameCounter[num12] >= 5)
					{
						Main.blueBirdCageFrame[num12]++;
						if (Main.blueBirdCageFrame[num12] > 18)
						{
							Main.blueBirdCageFrame[num12] = 0;
						}
						Main.blueBirdCageFrameCounter[num12] = 0;
					}
				}
			}
			for (int num13 = 0; num13 < Main.cageFrames; num13++)
			{
				if (Main.redBirdCageFrame[num13] == 0)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] > Main.rand.Next(30, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.redBirdCageFrame[num13] = 2;
							}
							else
							{
								Main.redBirdCageFrame[num13] = 1;
							}
						}
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] == 1)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
					{
						Main.redBirdCageFrameCounter[num13] = 0;
						Main.redBirdCageFrame[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] >= 2 && Main.redBirdCageFrame[num13] <= 5)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] >= 5)
					{
						Main.redBirdCageFrameCounter[num13] = 0;
						if (Main.redBirdCageFrame[num13] == 3 && Main.rand.Next(3) == 0)
						{
							Main.redBirdCageFrame[num13] = 13;
						}
						else
						{
							Main.redBirdCageFrame[num13]++;
						}
					}
				}
				else if (Main.redBirdCageFrame[num13] == 6)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] > Main.rand.Next(45, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.redBirdCageFrame[num13] = 7;
							}
							else if (Main.rand.Next(6) == 0)
							{
								Main.redBirdCageFrame[num13] = 11;
							}
						}
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] >= 7 && Main.redBirdCageFrame[num13] <= 10)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] >= 5)
					{
						Main.redBirdCageFrame[num13]++;
						if (Main.redBirdCageFrame[num13] > 10)
						{
							Main.redBirdCageFrame[num13] = 0;
						}
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] >= 11 && Main.redBirdCageFrame[num13] <= 13)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] >= 5)
					{
						Main.redBirdCageFrame[num13]++;
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] == 14)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] > Main.rand.Next(5, 600))
					{
						if (Main.rand.Next(20) == 0)
						{
							Main.redBirdCageFrame[num13] = 16;
						}
						else if (Main.rand.Next(20) == 0)
						{
							Main.redBirdCageFrame[num13] = 4;
						}
						else
						{
							Main.redBirdCageFrame[num13] = 15;
						}
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
				else if (Main.redBirdCageFrame[num13] == 15)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] >= 10)
					{
						Main.redBirdCageFrameCounter[num13] = 0;
						Main.redBirdCageFrame[num13] = 14;
					}
				}
				else if (Main.redBirdCageFrame[num13] >= 16 && Main.redBirdCageFrame[num13] <= 18)
				{
					Main.redBirdCageFrameCounter[num13]++;
					if (Main.redBirdCageFrameCounter[num13] >= 5)
					{
						Main.redBirdCageFrame[num13]++;
						if (Main.redBirdCageFrame[num13] > 18)
						{
							Main.redBirdCageFrame[num13] = 0;
						}
						Main.redBirdCageFrameCounter[num13] = 0;
					}
				}
			}
			for (int num14 = 0; num14 < Main.cageFrames; num14++)
			{
				if (Main.macawCageFrame[num14] == 0)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > Main.rand.Next(300, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.macawCageFrame[num14] = 16;
							}
							else
							{
								Main.macawCageFrame[num14] = 1;
							}
						}
						Main.macawCageFrameCounter[num14] = 0;
					}
				}
				else if (Main.macawCageFrame[num14] >= 1 && Main.macawCageFrame[num14] <= 5)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > 5)
					{
						Main.macawCageFrameCounter[num14] = 0;
						Main.macawCageFrame[num14]++;
						if (Main.macawCageFrame[num14] > 5)
						{
							Main.macawCageFrame[num14] = 6;
						}
					}
				}
				else if (Main.macawCageFrame[num14] >= 16 && Main.macawCageFrame[num14] <= 19)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > 6)
					{
						Main.macawCageFrameCounter[num14] = 0;
						Main.macawCageFrame[num14]++;
						if (Main.macawCageFrame[num14] > 19)
						{
							Main.macawCageFrame[num14] = ((Main.rand.Next(3) != 0) ? 16 : 0);
						}
					}
				}
				else if (Main.macawCageFrame[num14] == 6)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > Main.rand.Next(300, 2700))
					{
						if (Main.rand.Next(3) != 0)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.macawCageFrame[num14] = 7;
							}
							else
							{
								Main.macawCageFrame[num14] = 11;
							}
						}
						Main.macawCageFrameCounter[num14] = 0;
					}
				}
				else if (Main.macawCageFrame[num14] >= 11 && Main.macawCageFrame[num14] <= 15)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > 5)
					{
						Main.macawCageFrameCounter[num14] = 0;
						Main.macawCageFrame[num14]++;
						if (Main.macawCageFrame[num14] > 15)
						{
							Main.macawCageFrame[num14] = 0;
						}
					}
				}
				else if (Main.macawCageFrame[num14] >= 7 && Main.macawCageFrame[num14] <= 10)
				{
					Main.macawCageFrameCounter[num14]++;
					if (Main.macawCageFrameCounter[num14] > 6)
					{
						Main.macawCageFrameCounter[num14] = 0;
						Main.macawCageFrame[num14]++;
						if (Main.macawCageFrame[num14] > 10)
						{
							Main.macawCageFrame[num14] = ((Main.rand.Next(3) == 0) ? 6 : 7);
						}
					}
				}
			}
			for (int num15 = 0; num15 < 2; num15++)
			{
				for (int num16 = 0; num16 < Main.cageFrames; num16++)
				{
					if (Main.scorpionCageFrame[num15, num16] == 0 || Main.scorpionCageFrame[num15, num16] == 7)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] > Main.rand.Next(30, 3600))
						{
							if (Main.scorpionCageFrame[num15, num16] == 7)
							{
								Main.scorpionCageFrame[num15, num16] = 0;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(7) == 0)
								{
									Main.scorpionCageFrame[num15, num16] = 1;
								}
								else if (Main.rand.Next(4) == 0)
								{
									Main.scorpionCageFrame[num15, num16] = 8;
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.scorpionCageFrame[num15, num16] = 7;
								}
								else
								{
									Main.scorpionCageFrame[num15, num16] = 14;
								}
							}
							Main.scorpionCageFrameCounter[num15, num16] = 0;
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 1 && Main.scorpionCageFrame[num15, num16] <= 2)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 10)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 8 && Main.scorpionCageFrame[num15, num16] <= 10)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 10)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] == 11)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] > Main.rand.Next(45, 5400))
						{
							if (Main.rand.Next(6) == 0)
							{
								Main.scorpionCageFrame[num15, num16] = 12;
							}
							Main.scorpionCageFrameCounter[num15, num16] = 0;
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 12 && Main.scorpionCageFrame[num15, num16] <= 13)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 10)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
							if (Main.scorpionCageFrame[num15, num16] > 13)
							{
								Main.scorpionCageFrame[num15, num16] = 0;
							}
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 14 && Main.scorpionCageFrame[num15, num16] <= 15)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 5)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
							if (Main.scorpionCageFrame[num15, num16] > 15)
							{
								Main.scorpionCageFrame[num15, num16] = 14;
							}
							if (Main.rand.Next(5) == 0)
							{
								Main.scorpionCageFrame[num15, num16] = 0;
							}
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] == 4 || Main.scorpionCageFrame[num15, num16] == 3)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] > Main.rand.Next(30, 3600))
						{
							if (Main.scorpionCageFrame[num15, num16] == 3)
							{
								Main.scorpionCageFrame[num15, num16] = 4;
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.scorpionCageFrame[num15, num16] = 5;
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.scorpionCageFrame[num15, num16] = 3;
								}
								else
								{
									Main.scorpionCageFrame[num15, num16] = 16;
								}
							}
							Main.scorpionCageFrameCounter[num15, num16] = 0;
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 5 && Main.scorpionCageFrame[num15, num16] <= 6)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 10)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
							if (Main.scorpionCageFrame[num15, num16] > 7)
							{
								Main.scorpionCageFrame[num15, num16] = 0;
							}
						}
					}
					else if (Main.scorpionCageFrame[num15, num16] >= 16 && Main.scorpionCageFrame[num15, num16] <= 17)
					{
						Main.scorpionCageFrameCounter[num15, num16]++;
						if (Main.scorpionCageFrameCounter[num15, num16] >= 5)
						{
							Main.scorpionCageFrameCounter[num15, num16] = 0;
							Main.scorpionCageFrame[num15, num16]++;
							if (Main.scorpionCageFrame[num15, num16] > 17)
							{
								Main.scorpionCageFrame[num15, num16] = 16;
							}
							if (Main.rand.Next(5) == 0)
							{
								Main.scorpionCageFrame[num15, num16] = 4;
							}
						}
					}
				}
			}
			for (int num17 = 0; num17 < Main.cageFrames; num17++)
			{
				if (Main.penguinCageFrame[num17] == 0)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] > Main.rand.Next(30, 1800))
					{
						if (Main.rand.Next(2) == 0)
						{
							if (Main.rand.Next(10) == 0)
							{
								Main.penguinCageFrame[num17] = 4;
							}
							else if (Main.rand.Next(7) == 0)
							{
								Main.penguinCageFrame[num17] = 15;
							}
							else if (Main.rand.Next(3) == 0)
							{
								Main.penguinCageFrame[num17] = 2;
							}
							else
							{
								Main.penguinCageFrame[num17] = 1;
							}
						}
						Main.penguinCageFrameCounter[num17] = 0;
					}
				}
				else if (Main.penguinCageFrame[num17] == 1)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 10)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17] = 0;
					}
				}
				else if (Main.penguinCageFrame[num17] >= 2 && Main.penguinCageFrame[num17] <= 3)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 5)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17]++;
						if (Main.penguinCageFrame[num17] > 3)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.penguinCageFrame[num17] = 0;
							}
							else
							{
								Main.penguinCageFrame[num17] = 2;
							}
						}
					}
				}
				else if (Main.penguinCageFrame[num17] >= 4 && Main.penguinCageFrame[num17] <= 6)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 10)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17]++;
					}
				}
				else if (Main.penguinCageFrame[num17] == 15)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] > Main.rand.Next(10, 1800))
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.penguinCageFrame[num17] = 0;
						}
						Main.penguinCageFrameCounter[num17] = 0;
					}
				}
				else if (Main.penguinCageFrame[num17] == 8)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] > Main.rand.Next(30, 3600))
					{
						if (Main.rand.Next(2) == 0)
						{
							if (Main.rand.Next(10) == 0)
							{
								Main.penguinCageFrame[num17] = 12;
							}
							else if (Main.rand.Next(7) == 0)
							{
								Main.penguinCageFrame[num17] = 7;
							}
							else if (Main.rand.Next(3) == 0)
							{
								Main.penguinCageFrame[num17] = 10;
							}
							else
							{
								Main.penguinCageFrame[num17] = 9;
							}
						}
						Main.penguinCageFrameCounter[num17] = 0;
					}
				}
				else if (Main.penguinCageFrame[num17] == 9)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 10)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17] = 8;
					}
				}
				else if (Main.penguinCageFrame[num17] >= 10 && Main.penguinCageFrame[num17] <= 11)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 5)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17]++;
						if (Main.penguinCageFrame[num17] > 3)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.penguinCageFrame[num17] = 8;
							}
							else
							{
								Main.penguinCageFrame[num17] = 10;
							}
						}
					}
				}
				else if (Main.penguinCageFrame[num17] >= 12 && Main.penguinCageFrame[num17] <= 14)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] >= 10)
					{
						Main.penguinCageFrameCounter[num17] = 0;
						Main.penguinCageFrame[num17]++;
					}
				}
				else if (Main.penguinCageFrame[num17] == 7)
				{
					Main.penguinCageFrameCounter[num17]++;
					if (Main.penguinCageFrameCounter[num17] > Main.rand.Next(10, 3600))
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.penguinCageFrame[num17] = 8;
						}
						Main.penguinCageFrameCounter[num17] = 0;
					}
				}
			}
			for (int num18 = 0; num18 < Main.cageFrames; num18++)
			{
				Main.turtleCageFrameCounter[num18]++;
				bool flag12 = Main.turtleCageFrame[num18] == 0 || Main.turtleCageFrame[num18] == 15 || Main.turtleCageFrame[num18] == 31;
				int num19 = 8;
				if (flag12)
				{
					num19 = Main.rand.Next(180, 250);
				}
				if (Main.turtleCageFrameCounter[num18] >= num19)
				{
					Main.turtleCageFrameCounter[num18] = 0;
					if (Main.turtleCageFrame[num18] == 29)
					{
						Main.turtleCageFrame[num18] = 0;
					}
					else if (Main.turtleCageFrame[num18] == 15 && Main.rand.Next(3) == 0)
					{
						Main.turtleCageFrame[num18] = 30;
					}
					else
					{
						Main.turtleCageFrame[num18]++;
						if (Main.turtleCageFrame[num18] > 32)
						{
							Main.turtleCageFrame[num18] = 15;
						}
					}
				}
			}
			for (int num20 = 0; num20 < Main.cageFrames; num20++)
			{
				Main.seahorseCageFrameCounter[num20]++;
				bool flag4 = Main.seahorseCageFrame[num20] == 0 || Main.seahorseCageFrame[num20] == 13;
				bool flag13 = Main.seahorseCageFrame[num20] == 4 || Main.seahorseCageFrame[num20] == 9 || Main.seahorseCageFrame[num20] == 17 || Main.seahorseCageFrame[num20] == 22;
				bool flag5 = Main.seahorseCageFrame[num20] >= 25;
				int num21 = 7;
				if (flag4)
				{
					num21 = Main.rand.Next(220, 340);
				}
				if (flag13)
				{
					num21 = 10;
				}
				if (flag5)
				{
					num21 = 6;
				}
				if (Main.seahorseCageFrameCounter[num20] >= num21)
				{
					Main.seahorseCageFrameCounter[num20] = 0;
					if (Main.seahorseCageFrame[num20] == 0 && Main.rand.Next(2) == 0)
					{
						Main.seahorseCageFrame[num20] = 25;
					}
					else if (Main.seahorseCageFrame[num20] == 24)
					{
						Main.seahorseCageFrame[num20] = 0;
					}
					else
					{
						Main.seahorseCageFrame[num20]++;
						if (Main.seahorseCageFrame[num20] > 33)
						{
							Main.seahorseCageFrame[num20] = 0;
						}
					}
				}
			}
			Main.UpdateOwlCageFrames();
			for (int num22 = 0; num22 < Main.cageFrames; num22++)
			{
				if (Main.snailCageFrame[num22] >= 0 && Main.snailCageFrame[num22] <= 13)
				{
					Main.snailCageFrameCounter[num22]++;
					if (Main.snailCageFrameCounter[num22] > Main.rand.Next(45, 3600))
					{
						if (Main.snailCageFrame[num22] == 8 && Main.rand.Next(2) == 0)
						{
							Main.snailCageFrame[num22] = 14;
						}
						else if (Main.snailCageFrame[num22] == 1 && Main.rand.Next(3) == 0)
						{
							Main.snailCageFrame[num22] = 19;
						}
						else if (Main.snailCageFrame[num22] == 1 && Main.rand.Next(3) == 0)
						{
							Main.snailCageFrame[num22] = 20;
						}
						else
						{
							Main.snailCageFrame[num22]++;
							if (Main.snailCageFrame[num22] > 13)
							{
								Main.snailCageFrame[num22] = 0;
							}
						}
						Main.snailCageFrameCounter[num22] = 0;
					}
				}
				else if (Main.snailCageFrame[num22] >= 14 && Main.snailCageFrame[num22] <= 18)
				{
					Main.snailCageFrameCounter[num22]++;
					if (Main.snailCageFrameCounter[num22] >= 5)
					{
						Main.snailCageFrameCounter[num22] = 0;
						Main.snailCageFrame[num22]++;
					}
					if (Main.snailCageFrame[num22] > 18)
					{
						Main.snailCageFrame[num22] = 20;
					}
				}
				else if (Main.snailCageFrame[num22] == 19 || Main.snailCageFrame[num22] == 20)
				{
					Main.snailCageFrameCounter[num22]++;
					if (Main.snailCageFrameCounter[num22] > Main.rand.Next(60, 7200))
					{
						Main.snailCageFrameCounter[num22] = 0;
						if (Main.rand.Next(4) == 0)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.snailCageFrame[num22] = 2;
							}
							else if (Main.snailCageFrame[num22] == 19)
							{
								Main.snailCageFrame[num22] = 20;
							}
							else
							{
								Main.snailCageFrame[num22] = 19;
							}
						}
					}
				}
			}
			for (int num23 = 0; num23 < Main.cageFrames; num23++)
			{
				if (Main.snail2CageFrame[num23] >= 0 && Main.snail2CageFrame[num23] <= 13)
				{
					Main.snail2CageFrameCounter[num23]++;
					if (Main.snail2CageFrameCounter[num23] > Main.rand.Next(30, 2700))
					{
						if (Main.snail2CageFrame[num23] == 8 && Main.rand.Next(2) == 0)
						{
							Main.snail2CageFrame[num23] = 14;
						}
						else if (Main.snail2CageFrame[num23] == 1 && Main.rand.Next(3) == 0)
						{
							Main.snail2CageFrame[num23] = 19;
						}
						else if (Main.snail2CageFrame[num23] == 1 && Main.rand.Next(3) == 0)
						{
							Main.snail2CageFrame[num23] = 20;
						}
						else
						{
							Main.snail2CageFrame[num23]++;
							if (Main.snail2CageFrame[num23] > 13)
							{
								Main.snail2CageFrame[num23] = 0;
							}
						}
						Main.snail2CageFrameCounter[num23] = 0;
					}
				}
				else if (Main.snail2CageFrame[num23] >= 14 && Main.snail2CageFrame[num23] <= 18)
				{
					Main.snail2CageFrameCounter[num23]++;
					if (Main.snail2CageFrameCounter[num23] >= 5)
					{
						Main.snail2CageFrameCounter[num23] = 0;
						Main.snail2CageFrame[num23]++;
					}
					if (Main.snail2CageFrame[num23] > 18)
					{
						Main.snail2CageFrame[num23] = 20;
					}
				}
				else if (Main.snail2CageFrame[num23] == 19 || Main.snail2CageFrame[num23] == 20)
				{
					Main.snail2CageFrameCounter[num23]++;
					if (Main.snail2CageFrameCounter[num23] > Main.rand.Next(45, 5400))
					{
						Main.snail2CageFrameCounter[num23] = 0;
						if (Main.rand.Next(4) == 0)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.snail2CageFrame[num23] = 2;
							}
							else if (Main.snail2CageFrame[num23] == 19)
							{
								Main.snail2CageFrame[num23] = 20;
							}
							else
							{
								Main.snail2CageFrame[num23] = 19;
							}
						}
					}
				}
			}
			for (int num24 = 0; num24 < Main.cageFrames; num24++)
			{
				if (Main.frogCageFrame[num24] == 0)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] > Main.rand.Next(45, 3600))
					{
						if (Main.rand.Next(10) == 0)
						{
							Main.frogCageFrame[num24] = 1;
						}
						else
						{
							Main.frogCageFrame[num24] = 12;
						}
						Main.frogCageFrameCounter[num24] = 0;
					}
				}
				else if (Main.frogCageFrame[num24] >= 1 && Main.frogCageFrame[num24] <= 5)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] >= 5)
					{
						Main.frogCageFrame[num24]++;
						Main.frogCageFrameCounter[num24] = 0;
					}
				}
				else if (Main.frogCageFrame[num24] >= 12 && Main.frogCageFrame[num24] <= 17)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] >= 5)
					{
						Main.frogCageFrameCounter[num24] = 0;
						Main.frogCageFrame[num24]++;
					}
					if (Main.frogCageFrame[num24] > 17)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.frogCageFrame[num24] = 0;
						}
						else
						{
							Main.frogCageFrame[num24] = 12;
						}
					}
				}
				else if (Main.frogCageFrame[num24] == 6)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] > Main.rand.Next(45, 3600))
					{
						if (Main.rand.Next(10) == 0)
						{
							Main.frogCageFrame[num24] = 7;
						}
						else
						{
							Main.frogCageFrame[num24] = 18;
						}
						Main.frogCageFrameCounter[num24] = 0;
					}
				}
				else if (Main.frogCageFrame[num24] >= 7 && Main.frogCageFrame[num24] <= 11)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] >= 5)
					{
						Main.frogCageFrame[num24]++;
						Main.frogCageFrameCounter[num24] = 0;
						if (Main.frogCageFrame[num24] > 11)
						{
							Main.frogCageFrame[num24] = 0;
						}
					}
				}
				else if (Main.frogCageFrame[num24] >= 18 && Main.frogCageFrame[num24] <= 23)
				{
					Main.frogCageFrameCounter[num24]++;
					if (Main.frogCageFrameCounter[num24] >= 5)
					{
						Main.frogCageFrameCounter[num24] = 0;
						Main.frogCageFrame[num24]++;
					}
					if (Main.frogCageFrame[num24] > 17)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.frogCageFrame[num24] = 6;
						}
						else
						{
							Main.frogCageFrame[num24] = 18;
						}
					}
				}
			}
			for (int num25 = 0; num25 < Main.cageFrames; num25++)
			{
				if (Main.mouseCageFrame[num25] >= 0 && Main.mouseCageFrame[num25] <= 1)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrame[num25]++;
						if (Main.mouseCageFrame[num25] > 1)
						{
							Main.mouseCageFrame[num25] = 0;
						}
						Main.mouseCageFrameCounter[num25] = 0;
						if (Main.rand.Next(15) == 0)
						{
							Main.mouseCageFrame[num25] = 4;
						}
					}
				}
				else if (Main.mouseCageFrame[num25] >= 4 && Main.mouseCageFrame[num25] <= 7)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrameCounter[num25] = 0;
						Main.mouseCageFrame[num25]++;
					}
					if (Main.mouseCageFrame[num25] > 7)
					{
						Main.mouseCageFrame[num25] = 2;
					}
				}
				else if (Main.mouseCageFrame[num25] >= 2 && Main.mouseCageFrame[num25] <= 3)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrame[num25]++;
						if (Main.mouseCageFrame[num25] > 3)
						{
							Main.mouseCageFrame[num25] = 2;
						}
						Main.mouseCageFrameCounter[num25] = 0;
						if (Main.rand.Next(15) == 0)
						{
							Main.mouseCageFrame[num25] = 8;
						}
						else if (Main.rand.Next(15) == 0)
						{
							Main.mouseCageFrame[num25] = 12;
						}
					}
				}
				else if (Main.mouseCageFrame[num25] >= 8 && Main.mouseCageFrame[num25] <= 11)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrameCounter[num25] = 0;
						Main.mouseCageFrame[num25]++;
					}
					if (Main.mouseCageFrame[num25] > 11)
					{
						Main.mouseCageFrame[num25] = 0;
					}
				}
				else if (Main.mouseCageFrame[num25] >= 12 && Main.mouseCageFrame[num25] <= 13)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrameCounter[num25] = 0;
						Main.mouseCageFrame[num25]++;
					}
				}
				else if (Main.mouseCageFrame[num25] >= 14 && Main.mouseCageFrame[num25] <= 17)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrameCounter[num25] = 0;
						Main.mouseCageFrame[num25]++;
						if (Main.mouseCageFrame[num25] > 17 && Main.rand.Next(20) != 0)
						{
							Main.mouseCageFrame[num25] = 14;
						}
					}
				}
				else if (Main.mouseCageFrame[num25] >= 18 && Main.mouseCageFrame[num25] <= 19)
				{
					Main.mouseCageFrameCounter[num25]++;
					if (Main.mouseCageFrameCounter[num25] >= 5)
					{
						Main.mouseCageFrameCounter[num25] = 0;
						Main.mouseCageFrame[num25]++;
						if (Main.mouseCageFrame[num25] > 19)
						{
							Main.mouseCageFrame[num25] = 0;
						}
					}
				}
			}
			for (int num26 = 0; num26 < Main.cageFrames; num26++)
			{
				Main.wormCageFrameCounter[num26]++;
				if (Main.wormCageFrameCounter[num26] >= Main.rand.Next(30, 91))
				{
					Main.wormCageFrameCounter[num26] = 0;
					if (Main.rand.Next(4) == 0)
					{
						Main.wormCageFrame[num26]++;
						if (Main.wormCageFrame[num26] == 9 && Main.rand.Next(2) == 0)
						{
							Main.wormCageFrame[num26] = 0;
						}
						if (Main.wormCageFrame[num26] > 18)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.wormCageFrame[num26] = 9;
							}
							else
							{
								Main.wormCageFrame[num26] = 0;
							}
						}
					}
				}
			}
			int num27 = 0;
			for (int num28 = 0; num28 < 3; num28++)
			{
				switch (num28)
				{
				case 0:
					num27 = 24;
					break;
				case 1:
					num27 = 31;
					break;
				case 2:
					num27 = 34;
					break;
				}
				for (int num29 = 0; num29 < Main.cageFrames; num29++)
				{
					ref int ptr = ref Main.slugCageFrameCounter[num28, num29];
					int num50 = ptr + 1;
					ptr = num50;
					if (num50 >= Main.rand.Next(5, 15))
					{
						Main.slugCageFrameCounter[num28, num29] = 0;
						ref int ptr2 = ref Main.slugCageFrame[num28, num29];
						num50 = ptr2 + 1;
						ptr2 = num50;
						if (num50 >= num27)
						{
							Main.slugCageFrame[num28, num29] = 0;
						}
					}
				}
			}
			for (int num30 = 0; num30 < Main.cageFrames; num30++)
			{
				if (Main.grasshopperCageFrame[num30] >= 0 && Main.grasshopperCageFrame[num30] <= 1)
				{
					Main.grasshopperCageFrameCounter[num30]++;
					if (Main.grasshopperCageFrameCounter[num30] >= 5)
					{
						Main.grasshopperCageFrame[num30]++;
						if (Main.grasshopperCageFrame[num30] > 1)
						{
							Main.grasshopperCageFrame[num30] = 0;
						}
						Main.grasshopperCageFrameCounter[num30] = 0;
						if (Main.rand.Next(15) == 0)
						{
							Main.grasshopperCageFrame[num30] = 2;
						}
					}
				}
				else if (Main.grasshopperCageFrame[num30] >= 2 && Main.grasshopperCageFrame[num30] <= 5)
				{
					Main.grasshopperCageFrameCounter[num30]++;
					if (Main.grasshopperCageFrameCounter[num30] >= 5)
					{
						Main.grasshopperCageFrameCounter[num30] = 0;
						Main.grasshopperCageFrame[num30]++;
					}
					if (Main.grasshopperCageFrame[num30] > 5)
					{
						Main.grasshopperCageFrame[num30] = 6;
					}
				}
				else if (Main.grasshopperCageFrame[num30] >= 6 && Main.grasshopperCageFrame[num30] <= 7)
				{
					Main.grasshopperCageFrameCounter[num30]++;
					if (Main.grasshopperCageFrameCounter[num30] >= 5)
					{
						Main.grasshopperCageFrame[num30]++;
						if (Main.grasshopperCageFrame[num30] > 7)
						{
							Main.grasshopperCageFrame[num30] = 6;
						}
						Main.grasshopperCageFrameCounter[num30] = 0;
						if (Main.rand.Next(15) == 0)
						{
							Main.grasshopperCageFrame[num30] = 8;
						}
					}
				}
				else if (Main.grasshopperCageFrame[num30] >= 8 && Main.grasshopperCageFrame[num30] <= 11)
				{
					Main.grasshopperCageFrameCounter[num30]++;
					if (Main.grasshopperCageFrameCounter[num30] >= 5)
					{
						Main.grasshopperCageFrameCounter[num30] = 0;
						Main.grasshopperCageFrame[num30]++;
					}
					if (Main.grasshopperCageFrame[num30] > 11)
					{
						Main.grasshopperCageFrame[num30] = 0;
					}
				}
			}
			for (int num31 = 0; num31 < Main.cageFrames; num31++)
			{
				Main.maggotCageFrameCounter[num31]++;
				bool flag14 = Main.maggotCageFrame[num31] == 0 || Main.maggotCageFrame[num31] == 6 || Main.maggotCageFrame[num31] == 18;
				int num32 = 8;
				if (flag14)
				{
					num32 = Main.rand.Next(100, 140);
				}
				if (Main.maggotCageFrameCounter[num31] >= num32)
				{
					Main.maggotCageFrameCounter[num31] = 0;
					if (Main.maggotCageFrame[num31] == 0)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.maggotCageFrame[num31] = 13;
						}
						else
						{
							Main.maggotCageFrame[num31] = 1;
						}
					}
					else if (Main.maggotCageFrame[num31] == 12)
					{
						Main.maggotCageFrame[num31] = 0;
					}
					else
					{
						Main.maggotCageFrame[num31]++;
						if (Main.maggotCageFrame[num31] > 23)
						{
							Main.maggotCageFrame[num31] = 6;
						}
					}
				}
			}
			for (int num33 = 0; num33 < Main.cageFrames; num33++)
			{
				Main.ladybugCageFrameCounter[num33]++;
				bool flag6 = Main.ladybugCageFrame[num33] == 3 || Main.ladybugCageFrame[num33] == 7 || Main.ladybugCageFrame[num33] >= 17;
				int num34 = Main.rand.Next(10, 12);
				if (Main.ladybugCageFrame[num33] == 18)
				{
					num34 = Main.rand.Next(160, 241);
				}
				else if (flag6)
				{
					num34 = Main.rand.Next(198, 206);
				}
				else if (Main.ladybugCageFrame[num33] >= 8 && Main.ladybugCageFrame[num33] <= 16)
				{
					num34 = 5;
				}
				if (Main.ladybugCageFrameCounter[num33] >= num34)
				{
					Main.ladybugCageFrameCounter[num33] = 0;
					if (Main.ladybugCageFrame[num33] < 18)
					{
						if ((Main.ladybugCageFrame[num33] == 2 || Main.ladybugCageFrame[num33] == 5) && Main.rand.Next(3) == 0)
						{
							Main.ladybugCageFrame[num33] = 17;
						}
						else if (Main.ladybugCageFrame[num33] == 3 || Main.ladybugCageFrame[num33] == 12)
						{
							int num50 = Main.rand.Next(3);
							if (num50 > 1)
							{
								if (num50 == 2)
								{
									Main.ladybugCageFrame[num33] = 13;
								}
							}
							else
							{
								Main.ladybugCageFrame[num33] = 4;
							}
						}
						else if (Main.ladybugCageFrame[num33] == 7 || Main.ladybugCageFrame[num33] == 16)
						{
							int num50 = Main.rand.Next(3);
							if (num50 > 1)
							{
								if (num50 == 2)
								{
									Main.ladybugCageFrame[num33] = 8;
								}
							}
							else
							{
								Main.ladybugCageFrame[num33] = 0;
							}
						}
						else
						{
							Main.ladybugCageFrame[num33]++;
						}
					}
					else
					{
						Main.ladybugCageFrame[num33] = ((Main.rand.Next(2) == 0) ? 13 : 4);
					}
				}
			}
			for (int num35 = 0; num35 < Main.cageFrames; num35++)
			{
				Main.ratCageFrameCounter[num35]++;
				bool flag7 = Main.ratCageFrame[num35] == 0 || Main.ratCageFrame[num35] == 4;
				bool flag15 = Main.ratCageFrame[num35] == 8 || Main.ratCageFrame[num35] == 9 || Main.ratCageFrame[num35] == 10 || Main.ratCageFrame[num35] == 11;
				bool flag8 = Main.ratCageFrame[num35] > 11;
				int num36 = 5;
				if (flag7)
				{
					num36 = Main.rand.Next(40, 70);
				}
				if (flag15)
				{
					num36 = Main.rand.Next(70, 110);
				}
				if (flag8)
				{
					num36 = 180;
				}
				if (Main.ratCageFrameCounter[num35] >= num36)
				{
					Main.ratCageFrameCounter[num35] = 0;
					if (Main.ratCageFrame[num35] == 0 && Main.rand.Next(2) == 0)
					{
						if (Main.rand.Next(3) != 0)
						{
							Main.ratCageFrame[num35] = 12;
						}
						else
						{
							Main.ratCageFrame[num35] = 8;
						}
					}
					else if (Main.ratCageFrame[num35] == 4 && Main.rand.Next(2) == 0)
					{
						Main.ratCageFrame[num35] = 10;
					}
					else if (Main.ratCageFrame[num35] == 7 || Main.ratCageFrame[num35] == 9 || Main.ratCageFrame[num35] == 12)
					{
						Main.ratCageFrame[num35] = 0;
					}
					else if (Main.ratCageFrame[num35] == 11)
					{
						Main.ratCageFrame[num35] = 4;
					}
					else
					{
						Main.ratCageFrame[num35]++;
						if (Main.ratCageFrame[num35] > 16)
						{
							Main.ratCageFrame[num35] = 0;
						}
					}
				}
				else if (Main.ratCageFrame[num35] > 11)
				{
					int num37 = Main.ratCageFrameCounter[num35] % 90;
					if (num37 > 80)
					{
						Main.ratCageFrame[num35] = 12;
					}
					else if (num37 > 70)
					{
						Main.ratCageFrame[num35] = 13;
					}
					else if (num37 > 60)
					{
						Main.ratCageFrame[num35] = 14;
					}
					else if (num37 > 50)
					{
						Main.ratCageFrame[num35] = 15;
					}
					else if (num37 > 40)
					{
						Main.ratCageFrame[num35] = 16;
					}
					else if (num37 > 30)
					{
						Main.ratCageFrame[num35] = 15;
					}
					else if (num37 > 20)
					{
						Main.ratCageFrame[num35] = 14;
					}
					else if (num37 > 10)
					{
						Main.ratCageFrame[num35] = 13;
					}
					else
					{
						Main.ratCageFrame[num35] = 12;
					}
				}
				else if (Main.ratCageFrameCounter[num35] % 10 == 0)
				{
					if (Main.ratCageFrame[num35] == 8 || Main.ratCageFrame[num35] == 10)
					{
						Main.ratCageFrame[num35]++;
					}
					else if (Main.ratCageFrame[num35] == 9 || Main.ratCageFrame[num35] == 11)
					{
						Main.ratCageFrame[num35]--;
					}
				}
			}
			for (int num38 = 0; num38 < Main.cageFrames; num38++)
			{
				Main.waterStriderCageFrameCounter[num38]++;
				bool flag9 = Main.waterStriderCageFrame[num38] == 0 || Main.waterStriderCageFrame[num38] == 8;
				bool flag16 = Main.waterStriderCageFrame[num38] == 17 || Main.waterStriderCageFrame[num38] == 20;
				int num39 = 5;
				if (flag9)
				{
					num39 = Main.rand.Next(110, 210);
				}
				if (flag16)
				{
					num39 = Main.rand.Next(150, 260);
				}
				if (Main.waterStriderCageFrameCounter[num38] >= num39)
				{
					Main.waterStriderCageFrameCounter[num38] = 0;
					if (Main.waterStriderCageFrame[num38] == 0 && Main.rand.Next(2) == 0)
					{
						Main.waterStriderCageFrame[num38] = 16;
					}
					else if (Main.waterStriderCageFrame[num38] == 8 && Main.rand.Next(2) == 0)
					{
						Main.waterStriderCageFrame[num38] = 19;
					}
					else if (Main.waterStriderCageFrame[num38] == 15 || Main.waterStriderCageFrame[num38] == 18)
					{
						Main.waterStriderCageFrame[num38] = 0;
					}
					else
					{
						Main.waterStriderCageFrame[num38]++;
						if (Main.waterStriderCageFrame[num38] > 21)
						{
							Main.waterStriderCageFrame[num38] = 8;
						}
					}
				}
			}
			Main.fairyJarFrameCounter[0]++;
			if (Main.fairyJarFrameCounter[0] > 5)
			{
				Main.fairyJarFrameCounter[0] = 0;
				Main.fairyJarFrame[0]++;
				if (Main.fairyJarFrame[0] > 11)
				{
					Main.fairyJarFrame[0] = 0;
				}
			}
			for (int num40 = 1; num40 < Main.cageFrames; num40++)
			{
				int num41 = Main.fairyJarFrame[0] + num40 % 12;
				if (num40 % 2 == 0)
				{
					num41++;
				}
				if (num40 % 5 == 0)
				{
					num41++;
				}
				if (num40 % 8 == 0)
				{
					num41++;
				}
				while (num41 >= 12)
				{
					num41 -= 12;
				}
				Main.fairyJarFrame[num40] = num41;
			}
			for (int num42 = 0; num42 < Main.cageFrames; num42++)
			{
				byte maxValue = 5;
				if (Main.fishBowlFrameMode[num42] == 1)
				{
					if (Main.rand.Next(900) == 0)
					{
						Main.fishBowlFrameMode[num42] = (byte)Main.rand.Next((int)maxValue);
					}
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= 5)
					{
						Main.fishBowlFrameCounter[num42] = 0;
						if (Main.fishBowlFrame[num42] == 10)
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.fishBowlFrame[num42] = 11;
								Main.fishBowlFrameMode[num42] = 0;
							}
							else
							{
								Main.fishBowlFrame[num42] = 1;
							}
						}
						else
						{
							Main.fishBowlFrame[num42]++;
						}
					}
				}
				else if (Main.fishBowlFrameMode[num42] == 2)
				{
					if (Main.rand.Next(3600) == 0)
					{
						Main.fishBowlFrameMode[num42] = (byte)Main.rand.Next((int)maxValue);
					}
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= 20)
					{
						Main.fishBowlFrameCounter[num42] = 0;
						if (Main.fishBowlFrame[num42] == 10)
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.fishBowlFrame[num42] = 11;
								Main.fishBowlFrameMode[num42] = 0;
							}
							else
							{
								Main.fishBowlFrame[num42] = 1;
							}
						}
						else
						{
							Main.fishBowlFrame[num42]++;
						}
					}
				}
				else if (Main.fishBowlFrameMode[num42] == 3)
				{
					if (Main.rand.Next(3600) == 0)
					{
						Main.fishBowlFrameMode[num42] = (byte)Main.rand.Next((int)maxValue);
					}
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= Main.rand.Next(5, 3600))
					{
						Main.fishBowlFrameCounter[num42] = 0;
						if (Main.fishBowlFrame[num42] == 10)
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.fishBowlFrame[num42] = 11;
								Main.fishBowlFrameMode[num42] = 0;
							}
							else
							{
								Main.fishBowlFrame[num42] = 1;
							}
						}
						else
						{
							Main.fishBowlFrame[num42]++;
						}
					}
				}
				else if (Main.fishBowlFrame[num42] <= 10)
				{
					if (Main.rand.Next(3600) == 0)
					{
						Main.fishBowlFrameMode[num42] = (byte)Main.rand.Next((int)maxValue);
					}
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= 10)
					{
						Main.fishBowlFrameCounter[num42] = 0;
						if (Main.fishBowlFrame[num42] == 10)
						{
							if (Main.rand.Next(12) == 0)
							{
								Main.fishBowlFrame[num42] = 11;
							}
							else
							{
								Main.fishBowlFrame[num42] = 1;
							}
						}
						else
						{
							Main.fishBowlFrame[num42]++;
						}
					}
				}
				else if (Main.fishBowlFrame[num42] == 12 || Main.fishBowlFrame[num42] == 13)
				{
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= 10)
					{
						Main.fishBowlFrameCounter[num42] = 0;
						Main.fishBowlFrame[num42]++;
						if (Main.fishBowlFrame[num42] > 13)
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.fishBowlFrame[num42] = 14;
							}
							else
							{
								Main.fishBowlFrame[num42] = 12;
							}
						}
					}
				}
				else if (Main.fishBowlFrame[num42] >= 11)
				{
					Main.fishBowlFrameCounter[num42]++;
					if (Main.fishBowlFrameCounter[num42] >= 10)
					{
						Main.fishBowlFrameCounter[num42] = 0;
						Main.fishBowlFrame[num42]++;
						if (Main.fishBowlFrame[num42] > 16)
						{
							Main.fishBowlFrame[num42] = 4;
						}
					}
				}
			}
			for (int num43 = 0; num43 < Main.cageFrames; num43++)
			{
				Main.lavaFishBowlFrameCounter[num43]++;
				if (Main.lavaFishBowlFrameCounter[num43] > 4 + Main.rand.Next(3))
				{
					Main.lavaFishBowlFrameCounter[num43] = 0;
					Main.lavaFishBowlFrame[num43]++;
					if (Main.lavaFishBowlFrame[num43] > 26)
					{
						Main.lavaFishBowlFrame[num43] = 0;
					}
				}
			}
			for (int num44 = 0; num44 < 9; num44++)
			{
				for (int num45 = 0; num45 < Main.cageFrames; num45++)
				{
					Main.butterflyCageFrameCounter[num44, num45]++;
					if (Main.rand.Next(3600) == 0)
					{
						Main.butterflyCageMode[num44, num45] = (byte)Main.rand.Next(5);
						if (Main.rand.Next(2) == 0)
						{
							ref byte ptr3 = ref Main.butterflyCageMode[num44, num45];
							ptr3 += 10;
						}
					}
					int num46 = Main.rand.Next(3, 16);
					if (Main.butterflyCageMode[num44, num45] == 1 || Main.butterflyCageMode[num44, num45] == 11)
					{
						num46 = 3;
					}
					if (Main.butterflyCageMode[num44, num45] == 2 || Main.butterflyCageMode[num44, num45] == 12)
					{
						num46 = 5;
					}
					if (Main.butterflyCageMode[num44, num45] == 3 || Main.butterflyCageMode[num44, num45] == 13)
					{
						num46 = 10;
					}
					if (Main.butterflyCageMode[num44, num45] == 4 || Main.butterflyCageMode[num44, num45] == 14)
					{
						num46 = 15;
					}
					if (Main.butterflyCageMode[num44, num45] >= 10)
					{
						if (Main.butterflyCageFrame[num44, num45] <= 7)
						{
							if (Main.butterflyCageFrameCounter[num44, num45] >= num46)
							{
								Main.butterflyCageFrameCounter[num44, num45] = 0;
								Main.butterflyCageFrame[num44, num45]--;
								if (Main.butterflyCageFrame[num44, num45] < 0)
								{
									Main.butterflyCageFrame[num44, num45] = 7;
								}
								if (Main.butterflyCageFrame[num44, num45] == 1 || Main.butterflyCageFrame[num44, num45] == 4 || Main.butterflyCageFrame[num44, num45] == 6)
								{
									if (Main.rand.Next(20) == 0)
									{
										Main.butterflyCageFrame[num44, num45] += 8;
									}
									else if (Main.rand.Next(6) == 0)
									{
										if (Main.butterflyCageMode[num44, num45] >= 10)
										{
											ref byte ptr4 = ref Main.butterflyCageMode[num44, num45];
											ptr4 -= 10;
										}
										else
										{
											ref byte ptr5 = ref Main.butterflyCageMode[num44, num45];
											ptr5 += 10;
										}
									}
								}
							}
						}
						else if (Main.butterflyCageFrameCounter[num44, num45] >= num46)
						{
							Main.butterflyCageFrameCounter[num44, num45] = 0;
							Main.butterflyCageFrame[num44, num45]--;
							if (Main.butterflyCageFrame[num44, num45] < 8)
							{
								Main.butterflyCageFrame[num44, num45] = 14;
							}
							if (Main.butterflyCageFrame[num44, num45] == 9 || Main.butterflyCageFrame[num44, num45] == 12 || Main.butterflyCageFrame[num44, num45] == 14)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.butterflyCageFrame[num44, num45] -= 8;
								}
								else if (Main.rand.Next(6) == 0)
								{
									if (Main.butterflyCageMode[num44, num45] >= 10)
									{
										ref byte ptr6 = ref Main.butterflyCageMode[num44, num45];
										ptr6 -= 10;
									}
									else
									{
										ref byte ptr7 = ref Main.butterflyCageMode[num44, num45];
										ptr7 += 10;
									}
								}
							}
						}
					}
					else if (Main.butterflyCageFrame[num44, num45] <= 7)
					{
						if (Main.butterflyCageFrameCounter[num44, num45] >= num46)
						{
							Main.butterflyCageFrameCounter[num44, num45] = 0;
							Main.butterflyCageFrame[num44, num45]++;
							if (Main.butterflyCageFrame[num44, num45] > 7)
							{
								Main.butterflyCageFrame[num44, num45] = 0;
							}
							if ((Main.butterflyCageFrame[num44, num45] == 1 || Main.butterflyCageFrame[num44, num45] == 4 || Main.butterflyCageFrame[num44, num45] == 6) && Main.rand.Next(10) == 0)
							{
								Main.butterflyCageFrame[num44, num45] += 8;
							}
						}
					}
					else if (Main.butterflyCageFrameCounter[num44, num45] >= num46)
					{
						Main.butterflyCageFrameCounter[num44, num45] = 0;
						Main.butterflyCageFrame[num44, num45]++;
						if (Main.butterflyCageFrame[num44, num45] > 15)
						{
							Main.butterflyCageFrame[num44, num45] = 8;
						}
						if ((Main.butterflyCageFrame[num44, num45] == 9 || Main.butterflyCageFrame[num44, num45] == 12 || Main.butterflyCageFrame[num44, num45] == 14) && Main.rand.Next(10) == 0)
						{
							Main.butterflyCageFrame[num44, num45] -= 8;
						}
					}
				}
			}
			Main.UpdateDragonflyJarFrames();
			for (int num47 = 0; num47 < 3; num47++)
			{
				for (int num48 = 0; num48 < Main.cageFrames; num48++)
				{
					Main.jellyfishCageFrameCounter[num47, num48]++;
					if (Main.jellyfishCageMode[num47, num48] == 0 && Main.rand.Next(1800) == 0)
					{
						Main.jellyfishCageMode[num47, num48] = 1;
					}
					if (Main.jellyfishCageMode[num47, num48] == 2 && Main.rand.Next(60) == 0)
					{
						Main.jellyfishCageMode[num47, num48] = 3;
					}
					int num49 = 1;
					if (Main.jellyfishCageMode[num47, num48] == 0)
					{
						num49 = Main.rand.Next(10, 20);
					}
					if (Main.jellyfishCageMode[num47, num48] == 1)
					{
						num49 = Main.rand.Next(15, 25);
					}
					if (Main.jellyfishCageMode[num47, num48] == 2)
					{
						num49 = Main.rand.Next(4, 9);
					}
					if (Main.jellyfishCageMode[num47, num48] == 3)
					{
						num49 = Main.rand.Next(15, 25);
					}
					if (Main.jellyfishCageMode[num47, num48] == 0 && Main.jellyfishCageFrame[num47, num48] <= 3 && Main.jellyfishCageFrameCounter[num47, num48] >= num49)
					{
						Main.jellyfishCageFrameCounter[num47, num48] = 0;
						Main.jellyfishCageFrame[num47, num48]++;
						if (Main.jellyfishCageFrame[num47, num48] >= 4)
						{
							Main.jellyfishCageFrame[num47, num48] = 0;
						}
					}
					if (Main.jellyfishCageMode[num47, num48] == 1 && Main.jellyfishCageFrame[num47, num48] <= 7 && Main.jellyfishCageFrameCounter[num47, num48] >= num49)
					{
						Main.jellyfishCageFrameCounter[num47, num48] = 0;
						Main.jellyfishCageFrame[num47, num48]++;
						if (Main.jellyfishCageFrame[num47, num48] >= 7)
						{
							Main.jellyfishCageMode[num47, num48] = 2;
						}
					}
					if (Main.jellyfishCageMode[num47, num48] == 2 && Main.jellyfishCageFrame[num47, num48] <= 9 && Main.jellyfishCageFrameCounter[num47, num48] >= num49)
					{
						Main.jellyfishCageFrameCounter[num47, num48] = 0;
						Main.jellyfishCageFrame[num47, num48]++;
						if (Main.jellyfishCageFrame[num47, num48] >= 9)
						{
							Main.jellyfishCageFrame[num47, num48] = 7;
						}
					}
					if (Main.jellyfishCageMode[num47, num48] == 3 && Main.jellyfishCageFrame[num47, num48] <= 10 && Main.jellyfishCageFrameCounter[num47, num48] >= num49)
					{
						Main.jellyfishCageFrameCounter[num47, num48] = 0;
						Main.jellyfishCageFrame[num47, num48]++;
						if (Main.jellyfishCageFrame[num47, num48] >= 10)
						{
							Main.jellyfishCageFrame[num47, num48] = 3;
							Main.jellyfishCageMode[num47, num48] = 0;
						}
					}
				}
			}
		}

		// Token: 0x0600042B RID: 1067 RVA: 0x000AD418 File Offset: 0x000AB618
		private static void UpdateOwlCageFrames()
		{
			for (int i = 0; i < Main.cageFrames; i++)
			{
				Main.UpdateOwlCageFrame(Main.owlCageFrame, Main.owlCageFrameCounter, i);
			}
		}

		// Token: 0x0600042C RID: 1068 RVA: 0x000AD448 File Offset: 0x000AB648
		private static void UpdateDragonflyJarFrames()
		{
			for (int i = 0; i < Main.dragonflyJarFrameCounter.GetLength(0); i++)
			{
				for (int j = 0; j < Main.cageFrames; j++)
				{
					Main.UpdateDragonflyJarFrame(Main.dragonflyJarFrame, Main.dragonflyJarFrameCounter, i, j);
				}
			}
		}

		// Token: 0x0600042D RID: 1069 RVA: 0x000AD48C File Offset: 0x000AB68C
		private static void UpdateOwlCageFrame(int[] frames, int[] frameCounters, int style)
		{
			if (frameCounters[style] % 40 != 0 || Main.rand.Next(80) == 0)
			{
				frameCounters[style]++;
			}
			if ((frameCounters[style] + 1) % 40 == 39)
			{
				frameCounters[style] = 40 * Main.rand.Next(4);
			}
			int num = frameCounters[style] % 40 / 10;
			int num2 = frameCounters[style] / 40;
			int num3 = 0;
			switch (num2)
			{
			case 0:
				if (num == 3)
				{
					num = 1;
				}
				num3 = num;
				break;
			case 1:
				if (num == 3)
				{
					num = 1;
				}
				num3 = 0;
				if (num != 0)
				{
					num3 = 8 - num;
				}
				break;
			case 2:
				num3 = 0;
				if (num != 0)
				{
					num3 = 7 + num;
				}
				break;
			case 3:
				num3 = 0;
				if (num != 0)
				{
					num3 = 11 + num;
				}
				break;
			}
			frames[style] = num3;
		}

		// Token: 0x0600042E RID: 1070 RVA: 0x000AD538 File Offset: 0x000AB738
		private static void UpdateDragonflyJarFrame(int[,] frames, int[,] frameCounters, int style, int variation)
		{
			frameCounters[style, variation]++;
			switch (frames[style, variation])
			{
			case 0:
				if (frameCounters[style, variation] >= 300 && Main.rand.Next(60) == 0)
				{
					frameCounters[style, variation] = 0;
					frames[style, variation] = Main.rand.NextFromList(new int[]
					{
						1,
						5,
						9
					});
					return;
				}
				break;
			case 1:
			case 5:
			case 9:
				if (frameCounters[style, variation] >= 100)
				{
					frameCounters[style, variation] = 0;
					if (frames[style, variation] == 1)
					{
						frames[style, variation] = Main.rand.NextFromList(new int[]
						{
							0,
							5,
							5,
							9,
							9
						});
						return;
					}
					frames[style, variation] = 1;
					return;
				}
				else if (frameCounters[style, variation] >= 6)
				{
					frameCounters[style, variation] = 0;
					frames[style, variation]++;
					return;
				}
				break;
			case 2:
			case 3:
			case 4:
			case 6:
			case 7:
			case 8:
			case 10:
			case 11:
			case 12:
			{
				int num = frames[style, variation] - 1;
				int num2 = num % 4;
				num2--;
				int num3 = frameCounters[style, variation] / 4 % 4;
				if (num3 > 2)
				{
					num3 = 4 - num3;
				}
				int num4 = num - num2 + 1 + num3;
				frames[style, variation] = num4;
				if (frameCounters[style, variation] >= 40 && Main.rand.Next(30) == 0)
				{
					frameCounters[style, variation] = 100;
					frames[style, variation] = num - num2 + 1 - 1;
				}
				break;
			}
			default:
				return;
			}
		}

		// Token: 0x0600042F RID: 1071 RVA: 0x000AD6C8 File Offset: 0x000AB8C8
		public static void DoUpdate_AnimateItemIcons()
		{
			List<int> obj = Main.itemAnimationsRegistered;
			lock (obj)
			{
				Main.DoUpdate_AnimateItemIcons_Inner();
			}
		}

		// Token: 0x06000430 RID: 1072 RVA: 0x000AD708 File Offset: 0x000AB908
		private static void DoUpdate_AnimateItemIcons_Inner()
		{
			for (int i = 0; i < Main.itemAnimationsRegistered.Count; i++)
			{
				int num = Main.itemAnimationsRegistered[i];
				if (Main.itemAnimations[num] != null)
				{
					Main.itemAnimations[num].Update();
				}
			}
		}

		// Token: 0x06000431 RID: 1073 RVA: 0x000AD74B File Offset: 0x000AB94B
		public static void QueueMainThreadAction(Action action)
		{
			Main._mainThreadActions.Enqueue(action);
		}

		// Token: 0x06000432 RID: 1074 RVA: 0x000AD758 File Offset: 0x000AB958
		private static void ConsumeAllMainThreadActions()
		{
			Action result;
			while (Main._mainThreadActions.TryDequeue(out result))
			{
				result();
			}
		}

		// Token: 0x06000433 RID: 1075 RVA: 0x000AD77C File Offset: 0x000AB97C
		protected override void Update(GameTime gameTime)
		{
			if (!Main.IsEnginePreloaded)
			{
				Main.IsEnginePreloaded = true;
				if (Main.OnEnginePreload != null)
				{
					Main.OnEnginePreload();
				}
			}
			if (!this._isDrawingOrUpdating)
			{
				this._isDrawingOrUpdating = true;
				try
				{
					this.DoUpdate(ref gameTime);
				}
				catch (Exception)
				{
				}
				CinematicManager.Instance.Update(gameTime);
				if (Main.netMode == 2)
				{
					for (int i = 0; i < 256; i++)
					{
						if (Netplay.Clients[i].Socket != null)
						{
							Netplay.Clients[i].Socket.SendQueuedPackets();
						}
					}
				}
				else if (Main.netMode == 1)
				{
					Netplay.Connection.Socket.SendQueuedPackets();
				}
				this._isDrawingOrUpdating = false;
			}
			base.Update(gameTime);
			Main.ConsumeAllMainThreadActions();
			if (Main.GameAskedToQuit)
			{
				this.QuitGame();
			}
		}

		// Token: 0x06000434 RID: 1076 RVA: 0x000AD850 File Offset: 0x000ABA50
		public void UpdateViewZoomKeys()
		{
			if (!Main.inFancyUI)
			{
				float num = 0.02f;
				if (PlayerInput.Triggers.Current.ViewZoomIn)
				{
					Main.GameZoomTarget = Utils.Clamp<float>(Main.GameZoomTarget + num, 1f, 2f);
				}
				if (PlayerInput.Triggers.Current.ViewZoomOut)
				{
					Main.GameZoomTarget = Utils.Clamp<float>(Main.GameZoomTarget - num, 1f, 2f);
				}
			}
		}

		// Token: 0x06000435 RID: 1077 RVA: 0x000AD8C4 File Offset: 0x000ABAC4
		public static void NotifyOfEvent(GameNotificationType type)
		{
			if (!Main.dedServ && !Main.instance.IsActive && Main._flashNotificationType.HasFlag(type))
			{
				Main.QueueMainThreadAction(delegate
				{
					Platform.Get<IWindowService>().StartFlashingIcon(Main.instance.Window);
				});
			}
		}

		// Token: 0x06000436 RID: 1078 RVA: 0x000AD920 File Offset: 0x000ABB20
		protected void DoUpdate(ref GameTime gameTime)
		{
			Main.gameTimeCache = gameTime;
			if (Main.showSplash)
			{
				this.UpdateAudio();
				Main.GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
				ChromaInitializer.UpdateEvents();
				Main.Chroma.Update(Main.GlobalTimeWrappedHourly);
				return;
			}
			PartySky.MultipleSkyWorkaroundFix = true;
			Main.LocalPlayer.cursorItemIconReversed = false;
			if (!Main.GlobalTimerPaused)
			{
				Main.GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
			}
			Main.UpdateCreativeGameModeOverride();
			Main.UpdateWorldPreparationState();
			if (Player.BlockInteractionWithProjectiles > 0 && !Main.mouseRight && Main.mouseRightRelease)
			{
				Player.BlockInteractionWithProjectiles--;
			}
			PlayerInput.SetZoom_UI();
			for (int num = Main.DelayedProcesses.Count - 1; num >= 0; num--)
			{
				IEnumerator enumerator = Main.DelayedProcesses[num];
				if (!enumerator.MoveNext())
				{
					Main.DelayedProcesses.Remove(enumerator);
				}
			}
			if (!Main.gameMenu || Main.menuMode != 888)
			{
				Main.MenuUI.SetState(null);
			}
			else
			{
				Main.InGameUI.SetState(null);
			}
			Main.CurrentInputTextTakerOverride = null;
			if (!Main.dedServ)
			{
				Main.AchievementAdvisor.Update();
			}
			PlayerInput.SetZoom_Unscaled();
			Main.MouseOversTryToClear();
			PlayerInput.ResetInputsOnActiveStateChange();
			if (!Main.dedServ && Main.OnTickForThirdPartySoftwareOnly != null)
			{
				Main.OnTickForThirdPartySoftwareOnly();
			}
			if (Main._hasPendingNetmodeChange)
			{
				Main.netMode = Main._targetNetMode;
				Main._hasPendingNetmodeChange = false;
			}
			if (CaptureManager.Instance.IsCapturing)
			{
				return;
			}
			if (Main.ActivePlayerFileData != null)
			{
				Main.ActivePlayerFileData.UpdatePlayTimer();
			}
			Netplay.UpdateInMainThread();
			Main.gameInactive = !base.IsActive;
			if (Main.changeTheTitle)
			{
				Main.changeTheTitle = false;
				this.SetTitle();
			}
			this._worldUpdateTimeTester.Restart();
			if (!WorldGen.gen)
			{
				WorldGen.destroyObject = false;
			}
			if (Main.gameMenu)
			{
				Main.mapFullscreen = false;
			}
			Main.UpdateSettingUnlocks();
			if (Main.dedServ)
			{
				if (Main.dedServFPS)
				{
					Main.updatesCountedForFPS++;
					if (!Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Restart();
					}
					if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
					{
						Main.dedServCount1 += Main.updatesCountedForFPS;
						Main.dedServCount2++;
						float num2 = (float)Main.dedServCount1 / (float)Main.dedServCount2;
						Console.WriteLine(Main.updatesCountedForFPS.ToString() + "  (" + num2.ToString() + ")");
						Main.updatesCountedForFPS = 0;
						Main.fpsTimer.Restart();
					}
				}
				else
				{
					if (Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Stop();
					}
					Main.updatesCountedForFPS = 0;
				}
			}
			LocalizationLoader.Update();
			MemoryTracking.InGameUpdate();
			Main.DoUpdate_AutoSave();
			if (!Main.dedServ)
			{
				ChromaInitializer.UpdateEvents();
				Main.Chroma.Update(Main.GlobalTimeWrappedHourly);
				if (Main.superFast)
				{
					base.IsFixedTimeStep = false;
					Main.graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					if (Main.FrameSkipMode == FrameSkipMode.Off || Main.FrameSkipMode == FrameSkipMode.Subtle)
					{
						if (base.IsActive)
						{
							base.IsFixedTimeStep = false;
						}
						else
						{
							base.IsFixedTimeStep = true;
						}
					}
					else
					{
						base.IsFixedTimeStep = true;
						Main.graphics.SynchronizeWithVerticalRetrace = true;
					}
					Main.graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (Main.showSplash)
				{
					return;
				}
				Main.updatesCountedForFPS++;
				if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
				{
					if ((float)Main.fpsCount >= 30f + 30f * Main.gfxQuality)
					{
						Main.gfxQuality += Main.gfxRate;
						Main.gfxRate += 0.005f;
					}
					else if ((float)Main.fpsCount < 29f + 30f * Main.gfxQuality)
					{
						Main.gfxRate = 0.01f;
						Main.gfxQuality -= 0.1f;
					}
					if (Main.gfxQuality < 0f)
					{
						Main.gfxQuality = 0f;
					}
					if (Main.gfxQuality > 1f)
					{
						Main.gfxQuality = 1f;
					}
					if (Main.maxQ && base.IsActive)
					{
						Main.gfxQuality = 1f;
						Main.maxQ = false;
					}
					Main.updateRate = Main.uCount;
					Main.frameRate = Main.fpsCount;
					Main.fpsCount = 0;
					Main.fpsTimer.Restart();
					Main.updatesCountedForFPS = 0;
					Main.drawsCountedForFPS = 0;
					Main.uCount = 0;
					if (Main.gfxQuality < 0.8f)
					{
						Main.mapTimeMax = (int)((1f - Main.gfxQuality) * 60f);
					}
					else
					{
						Main.mapTimeMax = 0;
					}
				}
				if (Main.FrameSkipMode == FrameSkipMode.Off || Main.FrameSkipMode == FrameSkipMode.Subtle)
				{
					Main.UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
					if (Main.UpdateTimeAccumulator < 0.01666666753590107 && !Main.superFast)
					{
						if (Main.FrameSkipMode == FrameSkipMode.Subtle)
						{
							Main.instance.SuppressDraw();
						}
						return;
					}
					gameTime = new GameTime(gameTime.TotalGameTime, new TimeSpan(166666L));
					Main.UpdateTimeAccumulator -= 0.01666666753590107;
					Main.UpdateTimeAccumulator = Math.Min(Main.UpdateTimeAccumulator, 0.01666666753590107);
				}
				Main.uCount++;
				Main.drawSkip = false;
				PlayerInput.AllowExecutionOfGamepadInstructions = true;
				Main.TryPlayingCreditsRoll();
				PlayerInput.SetZoom_UI();
				Main.UpdateUIStates(gameTime);
				PlayerInput.SetZoom_Unscaled();
				Terraria.Graphics.Effects.Filters.Scene.Update(gameTime);
				Overlays.Scene.Update(gameTime);
				LiquidRenderer.Instance.Update(gameTime);
				this.UpdateAudio();
				InGameNotificationsTracker.Update();
				ItemSlot.UpdateInterface();
				if (Main.teamCooldown > 0)
				{
					Main.teamCooldown--;
				}
				Main.DoUpdate_AnimateBackgrounds();
				Animation.UpdateAll();
				if (Main.qaStyle == 1)
				{
					Main.gfxQuality = 1f;
				}
				else if (Main.qaStyle == 2)
				{
					Main.gfxQuality = 0.5f;
				}
				else if (Main.qaStyle == 3)
				{
					Main.gfxQuality = 0f;
				}
				Main.maxDustToDraw = (int)(6000f * (Main.gfxQuality * 0.7f + 0.3f));
				if ((double)Main.gfxQuality < 0.9)
				{
					Main.maxDustToDraw = (int)((float)Main.maxDustToDraw * Main.gfxQuality);
				}
				if (Main.maxDustToDraw < 1000)
				{
					Main.maxDustToDraw = 1000;
				}
				Gore.goreTime = (int)(600f * Main.gfxQuality);
				if (!WorldGen.gen)
				{
					Liquid.cycles = (int)(17f - 10f * Main.gfxQuality);
					Liquid.curMaxLiquid = (int)((double)Liquid.maxLiquid * 0.25 + (double)Liquid.maxLiquid * 0.75 * (double)Main.gfxQuality);
					if (Main.Setting_UseReducedMaxLiquids)
					{
						Liquid.curMaxLiquid = (int)(2500f + 2500f * Main.gfxQuality);
					}
				}
				if (Main.superFast)
				{
					Main.graphics.SynchronizeWithVerticalRetrace = false;
					Main.drawSkip = false;
				}
				if ((double)Main.gfxQuality < 0.2)
				{
					LegacyLighting.RenderPhases = 8;
				}
				else if ((double)Main.gfxQuality < 0.4)
				{
					LegacyLighting.RenderPhases = 7;
				}
				else if ((double)Main.gfxQuality < 0.6)
				{
					LegacyLighting.RenderPhases = 6;
				}
				else if ((double)Main.gfxQuality < 0.8)
				{
					LegacyLighting.RenderPhases = 5;
				}
				else
				{
					LegacyLighting.RenderPhases = 4;
				}
				if (!WorldGen.gen && Liquid.quickSettle)
				{
					Liquid.curMaxLiquid = Liquid.maxLiquid;
					if (Main.Setting_UseReducedMaxLiquids)
					{
						Liquid.curMaxLiquid = 5000;
					}
					Liquid.cycles = 1;
				}
				if (WorldGen.tenthAnniversaryWorldGen && !Main.gameMenu)
				{
					WorldGen.tenthAnniversaryWorldGen = false;
				}
				if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
				{
					if (!Main.gameMenu)
					{
						WorldGen.drunkWorldGen = false;
						WorldGen.remixWorldGen = false;
						this.logoRotation = 0f;
						this.logoRotationSpeed = 0f;
						this.logoScale = 1f;
					}
				}
				else if (Main.gameMenu && Math.Abs(this.logoRotationSpeed) > 1000f)
				{
					this.logoRotation = 0f;
					this.logoRotationSpeed = 0f;
					this.logoScale = 1f;
				}
				Main.UpdateOldNPCShop();
				Main.hasFocus = base.IsActive;
				if (!Main.hasFocus && Main.netMode == 0)
				{
					if (!Platform.IsOSX)
					{
						base.IsMouseVisible = true;
					}
					if (Main.netMode != 2 && Main.myPlayer >= 0)
					{
						Main.player[Main.myPlayer].delayUseItem = true;
					}
					Main.mouseLeftRelease = false;
					Main.mouseRightRelease = false;
					Main.mouseMiddleRelease = false;
					Main.mouseXButton1Release = false;
					Main.mouseXButton2Release = false;
					if (Main.gameMenu)
					{
						Main.UpdateMenu();
					}
					Main.gamePaused = true;
					return;
				}
				if (!Platform.IsOSX)
				{
					base.IsMouseVisible = false;
				}
				SkyManager.Instance.Update(gameTime);
				if (!Main.gamePaused)
				{
					EmoteBubble.UpdateAll();
				}
				ScreenObstruction.Update();
				ScreenDarkness.Update();
				MoonlordDeathDrama.Update();
				Main.DoUpdate_AnimateCursorColors();
				Main.DoUpdate_AnimateTileGlows();
				this.DoUpdate_AnimateDiscoRGB();
				Main.DoUpdate_AnimateVisualPlayerAura();
				this.DoUpdate_AnimateWaterfalls();
				Main.DoUpdate_AnimateWalls();
				Main.AnimateTiles();
				Main.DoUpdate_AnimateItemIcons();
				Main.DoUpdate_F10_ToggleFPS();
				Main.DoUpdate_F9_ToggleLighting();
				Main.DoUpdate_F8_ToggleNetDiagnostics();
				Main.DoUpdate_F7_ToggleGraphicsDiagnostics();
				Main.DoUpdate_F11_ToggleUI();
				Main.DoUpdate_AltEnter_ToggleFullscreen();
				this.DoUpdate_HandleInput();
				Main.DoUpdate_HandleChat();
				Main.DoUpdate_Enter_ToggleChat();
				if ((Main.timeForVisualEffects += 1.0) >= 216000.0)
				{
					Main.timeForVisualEffects = 0.0;
				}
				if (Main.gameMenu)
				{
					Main.UpdateMenu();
					if (Main.netMode != 2)
					{
						return;
					}
					Main.gamePaused = false;
				}
				if (!Main.CanUpdateGameplay && Main.netMode != 2)
				{
					return;
				}
				Main.CheckInvasionProgressDisplay();
			}
			this.UpdateWindyDayState();
			if (Main.netMode == 2)
			{
				Main.cloudAlpha = Main.maxRaining;
			}
			bool flag2 = base.IsActive;
			if (Main.netMode == 1)
			{
				Main.TrySyncingMyPlayer();
			}
			if (Main.CanPauseGame())
			{
				Main.DoUpdate_WhilePaused();
				PlayerLoader.UpdateAutopause(Main.player[Main.myPlayer]);
				Main.gamePaused = true;
				return;
			}
			Main.gamePaused = false;
			if (Main.OnTickForInternalCodeOnly != null)
			{
				Main.OnTickForInternalCodeOnly();
			}
			if ((Main.dedServ || (Main.netMode != 1 && !Main.gameMenu && !Main.gamePaused)) && Main.AmbienceServer != null)
			{
				Main.AmbienceServer.Update();
			}
			WorldGen.BackgroundsCache.UpdateFlashValues();
			if (Main.LocalGolfState != null)
			{
				Main.LocalGolfState.Update();
			}
			if ((flag2 || Main.netMode == 1) && Main.cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (Main.netMode != 1)
			{
				this.updateCloudLayer();
			}
			if (Main.desiredWorldEventsUpdateRate > 0.0)
			{
				this._partialWorldEventUpdates += Main.desiredWorldEventsUpdateRate;
				Main.worldEventUpdates = (int)this._partialWorldEventUpdates;
				this._partialWorldEventUpdates -= (double)Main.worldEventUpdates;
				for (int i = 0; i < Main.worldEventUpdates; i++)
				{
					this.UpdateWeather(gameTime, i);
				}
			}
			Main.UnpausedUpdateSeed = Utils.RandomNextSeed(Main.UnpausedUpdateSeed);
			Main.Ambience();
			if (Main.netMode != 2)
			{
				try
				{
					Main.snowing();
				}
				catch
				{
					if (!Main.ignoreErrors)
					{
						throw;
					}
				}
				Sandstorm.EmitDust();
			}
			SystemLoader.PreUpdateEntities();
			if (Main.netMode != 2)
			{
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					Star.UpdateStars();
					Cloud.UpdateClouds();
				}
				else if (Main.shimmerAlpha > 0f)
				{
					Star.UpdateStars();
					int num3 = Main.rand.Next(Main.numStars);
					if (Main.rand.Next(90) == 0)
					{
						if (Main.star[num3] != null && !Main.star[num3].hidden && !Main.star[num3].falling)
						{
							Main.star[num3].Fall();
						}
						for (int j = 0; j < Main.numStars; j++)
						{
							if (Main.star[j].hidden)
							{
								Star.SpawnStars(j);
							}
						}
					}
				}
			}
			PortalHelper.UpdatePortalPoints();
			LucyAxeMessage.UpdateMessageCooldowns();
			if (this.ShouldUpdateEntities())
			{
				this.DoUpdateInWorld(this._worldUpdateTimeTester);
			}
			if (Main.netMode != 2)
			{
				Main.ChromaPainter.Update();
			}
		}

		// Token: 0x06000437 RID: 1079 RVA: 0x000AE4F4 File Offset: 0x000AC6F4
		internal static void UpdateCreativeGameModeOverride()
		{
			Main._overrideForExpertMode = null;
			Main._overrideForMasterMode = null;
			if (Main.gameMenu || !Main._currentGameModeInfo.IsJourneyMode)
			{
				return;
			}
			CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
			if (power.GetIsUnlocked())
			{
				float num = power.StrengthMultiplierToGiveNPCs;
				if (Main.getGoodWorld)
				{
					num += 1f;
				}
				if (num >= 2f)
				{
					Main._overrideForExpertMode = new bool?(true);
				}
				if (num >= 3f)
				{
					Main._overrideForMasterMode = new bool?(true);
				}
			}
		}

		// Token: 0x06000438 RID: 1080 RVA: 0x000AE57A File Offset: 0x000AC77A
		private static void TryPlayingCreditsRoll()
		{
			if (!Main.gameMenu && Main.CanPlayCreditsRoll() && !SkyManager.Instance["CreditsRoll"].IsActive())
			{
				SkyManager.Instance.Activate("CreditsRoll", Vector2.Zero, Array.Empty<object>());
			}
		}

		// Token: 0x06000439 RID: 1081 RVA: 0x000AE5BC File Offset: 0x000AC7BC
		private static bool CanPauseGame()
		{
			bool flag = false;
			if (Main.netMode == 0)
			{
				flag |= Main.ingameOptionsWindow;
				flag |= (Main.InGameUI.IsVisible && (Main.InGameUI.CurrentState == Main.ManageControlsMenu || Main.InGameUI.CurrentState == Main.AchievementsMenu));
				flag |= (Main.InGameUI.IsVisible && (Main.InGameUI.CurrentState == Interface.modConfigList || Main.InGameUI.CurrentState == Interface.modConfig));
				if (Main.autoPause)
				{
					flag |= Main.playerInventory;
					flag |= (Main.LocalPlayer.sign >= 0);
					flag |= Main.InGameUI.IsVisible;
				}
			}
			return flag;
		}

		// Token: 0x0600043A RID: 1082 RVA: 0x000AE67C File Offset: 0x000AC87C
		private static void DoUpdate_WhilePaused()
		{
			if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
			{
				Main.player[Main.myPlayer].controlInv = PlayerInput.Triggers.Current.Inventory;
				Main.player[Main.myPlayer].controlCreativeMenu = PlayerInput.Triggers.Current.OpenCreativePowersMenu;
				Player player = Main.player[Main.myPlayer];
				if (player.controlCreativeMenu)
				{
					if (player.releaseCreativeMenu)
					{
						player.ToggleCreativeMenu();
					}
					player.releaseCreativeMenu = false;
				}
				else
				{
					player.releaseCreativeMenu = true;
				}
				if (player.controlInv)
				{
					if (player.releaseInventory)
					{
						player.ToggleInv();
					}
					player.releaseInventory = false;
				}
				else
				{
					player.releaseInventory = true;
				}
			}
			if (Main.playerInventory)
			{
				Main.player[Main.myPlayer].RefreshInfoAccs();
				Recipe.GetThroughDelayedFindRecipes();
				if (PlayerInput.MouseInModdedUI.Count == 0)
				{
					int num = PlayerInput.ScrollWheelDelta / 120;
					bool flag = true;
					if (Main.recBigList)
					{
						int num2 = 42;
						int num3 = 340;
						int num4 = 310;
						PlayerInput.SetZoom_UI();
						int num5 = (Main.screenWidth - num4 - 280) / num2;
						int num6 = (Main.screenHeight - num3 - 20) / num2;
						if (new Rectangle(num4, num3, num5 * num2, num6 * num2).Contains(Main.MouseScreen.ToPoint()))
						{
							int num7 = Math.Sign(num);
							while (num != 0)
							{
								if (num < 0)
								{
									Main.recStart -= num5;
									if (Main.recStart < 0)
									{
										Main.recStart = 0;
									}
								}
								else
								{
									Main.recStart += num5;
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									if (Main.recStart > Main.numAvailableRecipes - num5)
									{
										Main.recStart = Main.numAvailableRecipes - num5;
									}
								}
								num -= num7;
							}
						}
						PlayerInput.SetZoom_World();
					}
					if (flag)
					{
						Main.focusRecipe += num;
						if (Main.focusRecipe > Main.numAvailableRecipes - 1)
						{
							Main.focusRecipe = Main.numAvailableRecipes - 1;
						}
						if (Main.focusRecipe < 0)
						{
							Main.focusRecipe = 0;
						}
					}
				}
				PlayerInput.MouseInModdedUI.Clear();
				Main.player[Main.myPlayer].dropItemCheck();
			}
			Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[0].headSlot;
			Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[1].bodySlot;
			Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[2].legSlot;
			if (!Main.player[Main.myPlayer].hostile)
			{
				if (Main.player[Main.myPlayer].armor[10].headSlot >= 0)
				{
					Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[10].headSlot;
				}
				if (Main.player[Main.myPlayer].armor[11].bodySlot >= 0)
				{
					Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[11].bodySlot;
				}
				if (Main.player[Main.myPlayer].armor[12].legSlot >= 0)
				{
					Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[12].legSlot;
				}
			}
			if (Main.editSign)
			{
				if (Main.player[Main.myPlayer].sign == -1)
				{
					Main.editSign = false;
				}
				else
				{
					Main.InputTextSign();
				}
			}
			else if (Main.editChest && Main.player[Main.myPlayer].chest == -1)
			{
				Main.editChest = false;
			}
			Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
			Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
			Main.player[Main.myPlayer].LookForTileInteractions();
			Main.player[Main.myPlayer].lastChest = Main.player[Main.myPlayer].chest;
			if (Main.playerInventory)
			{
				Main.player[Main.myPlayer].AdjTiles();
			}
		}

		// Token: 0x0600043B RID: 1083 RVA: 0x000AEACC File Offset: 0x000ACCCC
		private static void UpdateUIStates(GameTime gameTime)
		{
			if (Main.MenuUI != null)
			{
				Main.MenuUI.Update(gameTime);
			}
			if (Main.InGameUI != null)
			{
				Main.InGameUI.Update(gameTime);
			}
			Main.CreativeMenu.Update(gameTime);
			SystemLoader.UpdateUI(gameTime);
			PlayerInput.ScrollWheelDeltaForUI = 0;
			BossBarLoader.HandleStyle();
			if (!Main.gameMenu)
			{
				Main.BigBossProgressBar.Update();
			}
		}

		// Token: 0x0600043C RID: 1084 RVA: 0x000AEB2A File Offset: 0x000ACD2A
		private void DoDebugFunctions()
		{
		}

		// Token: 0x0600043D RID: 1085 RVA: 0x000AEB2C File Offset: 0x000ACD2C
		private void PreUpdateAllProjectiles()
		{
			this.SpelunkerProjectileHelper.OnPreUpdateAllProjectiles();
			this.ChumBucketProjectileHelper.OnPreUpdateAllProjectiles();
		}

		// Token: 0x0600043E RID: 1086 RVA: 0x000AEB44 File Offset: 0x000ACD44
		private void PostUpdateAllProjectiles()
		{
		}

		// Token: 0x0600043F RID: 1087 RVA: 0x000AEB48 File Offset: 0x000ACD48
		private static void TrySyncingMyPlayer()
		{
			Player player = Main.clientPlayer;
			bool syncedAnyInventoryContents = false;
			for (int i = 0; i < 59; i++)
			{
				if (Main.player[Main.myPlayer].inventory[i].IsNetStateDifferent(player.inventory[i]))
				{
					syncedAnyInventoryContents = true;
					NetMessage.SendData(5, -1, -1, null, Main.myPlayer, (float)(PlayerItemSlotID.Inventory0 + i), (float)Main.player[Main.myPlayer].inventory[i].prefix, 0f, 0, 0, 0);
				}
			}
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].armor, player.armor, PlayerItemSlotID.Armor0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].dye, player.dye, PlayerItemSlotID.Dye0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].miscEquips, player.miscEquips, PlayerItemSlotID.Misc0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].miscDyes, player.miscDyes, PlayerItemSlotID.MiscDye0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].bank.item, player.bank.item, PlayerItemSlotID.Bank1_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].bank2.item, player.bank2.item, PlayerItemSlotID.Bank2_0);
			if (Main.player[Main.myPlayer].trashItem.IsNetStateDifferent(player.trashItem))
			{
				syncedAnyInventoryContents = true;
				NetMessage.SendData(5, -1, -1, null, Main.myPlayer, (float)PlayerItemSlotID.TrashItem, (float)Main.player[Main.myPlayer].trashItem.prefix, 0f, 0, 0, 0);
			}
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].bank3.item, player.bank3.item, PlayerItemSlotID.Bank3_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].bank4.item, player.bank4.item, PlayerItemSlotID.Bank4_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[0].Armor, player.Loadouts[0].Armor, PlayerItemSlotID.Loadout1_Armor_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[0].Dye, player.Loadouts[0].Dye, PlayerItemSlotID.Loadout1_Dye_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[1].Armor, player.Loadouts[1].Armor, PlayerItemSlotID.Loadout2_Armor_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[1].Dye, player.Loadouts[1].Dye, PlayerItemSlotID.Loadout2_Dye_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[2].Armor, player.Loadouts[2].Armor, PlayerItemSlotID.Loadout3_Armor_0);
			Main.TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[Main.myPlayer].Loadouts[2].Dye, player.Loadouts[2].Dye, PlayerItemSlotID.Loadout3_Dye_0);
			if (Main.player[Main.myPlayer].chest != player.chest && Main.player[Main.myPlayer].chest < 0 && player.chest >= 0)
			{
				if (Main.player[Main.myPlayer].editedChestName)
				{
					if (Main.chest[player.chest] != null)
					{
						NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[player.chest].name), Main.player[Main.myPlayer].chest, 1f, 0f, 0f, 0, 0, 0);
					}
					else
					{
						NetMessage.SendData(33, -1, -1, null, Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
					}
					Main.player[Main.myPlayer].editedChestName = false;
				}
				else
				{
					NetMessage.SendData(33, -1, -1, null, Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (Main.player[Main.myPlayer].talkNPC != player.talkNPC)
			{
				NetMessage.SendData(40, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.player[Main.myPlayer].voidLensChest != player.voidLensChest | Main.player[Main.myPlayer].piggyBankProjTracker != player.piggyBankProjTracker)
			{
				NetMessage.SendData(142, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.LocalPlayer.tileEntityAnchor.interactEntityID != player.tileEntityAnchor.interactEntityID && Main.LocalPlayer.tileEntityAnchor.interactEntityID < 0)
			{
				NetMessage.SendData(122, -1, -1, null, -1, (float)Main.myPlayer, 0f, 0f, 0, 0, 0);
			}
			bool flag = false;
			if (Main.player[Main.myPlayer].zone1 != player.zone1)
			{
				flag = true;
			}
			if (Main.player[Main.myPlayer].zone2 != player.zone2)
			{
				flag = true;
			}
			if (Main.player[Main.myPlayer].zone3 != player.zone3)
			{
				flag = true;
			}
			if (Main.player[Main.myPlayer].zone4 != player.zone4)
			{
				flag = true;
			}
			if (Main.player[Main.myPlayer].zone5 != player.zone5)
			{
				flag = true;
			}
			if (!BiomeLoader.CustomBiomesMatch(Main.player[Main.myPlayer], player))
			{
				flag = true;
			}
			if (flag)
			{
				NetMessage.SendData(36, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.player[Main.myPlayer].statLife != player.statLife || Main.player[Main.myPlayer].statLifeMax != player.statLifeMax)
			{
				Main.player[Main.myPlayer].netLife = true;
			}
			if (Main.player[Main.myPlayer].netLifeTime > 0)
			{
				Main.player[Main.myPlayer].netLifeTime--;
			}
			else if (Main.player[Main.myPlayer].netLife)
			{
				Main.player[Main.myPlayer].netLife = false;
				Main.player[Main.myPlayer].netLifeTime = 60;
				NetMessage.SendData(16, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.player[Main.myPlayer].statMana != player.statMana || Main.player[Main.myPlayer].statManaMax != player.statManaMax)
			{
				Main.player[Main.myPlayer].netMana = true;
			}
			if (Main.player[Main.myPlayer].netManaTime > 0)
			{
				Main.player[Main.myPlayer].netManaTime--;
			}
			else if (Main.player[Main.myPlayer].netMana)
			{
				Main.player[Main.myPlayer].netMana = false;
				Main.player[Main.myPlayer].netManaTime = 60;
				NetMessage.SendData(42, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			bool flag2 = false;
			for (int j = 0; j < Player.maxBuffs; j++)
			{
				if (Main.player[Main.myPlayer].buffType[j] != player.buffType[j])
				{
					flag2 = true;
					break;
				}
			}
			if (flag2)
			{
				NetMessage.SendData(50, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(13, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			bool flag3 = false;
			if (Main.player[Main.myPlayer].MinionRestTargetPoint != player.MinionRestTargetPoint)
			{
				flag3 = true;
			}
			if (flag3)
			{
				NetMessage.SendData(99, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			bool flag4 = false;
			if (Main.player[Main.myPlayer].MinionAttackTargetNPC != player.MinionAttackTargetNPC)
			{
				flag4 = true;
			}
			if (flag4)
			{
				NetMessage.SendData(115, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (player.shieldRaised != Main.player[Main.myPlayer].shieldRaised)
			{
				NetMessage.SendData(13, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (syncedAnyInventoryContents)
			{
				NetMessage.SendData(138, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			PlayerLoader.SendClientChanges(Main.player[Main.myPlayer], Main.clientPlayer);
			Main.clientPlayer = Main.player[Main.myPlayer].clientClone();
		}

		// Token: 0x06000440 RID: 1088 RVA: 0x000AF46C File Offset: 0x000AD66C
		private static void TrySyncingItemArray(ref bool syncedAnyInventoryContents, Item[] my, Item[] other, int slotOffset)
		{
			for (int i = 0; i < my.Length; i++)
			{
				if (my[i].IsNetStateDifferent(other[i]))
				{
					syncedAnyInventoryContents = true;
					NetMessage.SendData(5, -1, -1, null, Main.myPlayer, (float)(slotOffset + i), (float)my[i].prefix, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000441 RID: 1089 RVA: 0x000AF4BA File Offset: 0x000AD6BA
		public bool ShouldUpdateEntities()
		{
			return Main._worldPreparationState == Main.WorldPreparationState.Ready;
		}

		// Token: 0x06000442 RID: 1090 RVA: 0x000AF4C4 File Offset: 0x000AD6C4
		private void DoUpdateInWorld(Stopwatch sw)
		{
			this.UpdateParticleSystems();
			Main.tileSolid[379] = false;
			NPCShopDatabase.Test();
			SystemLoader.PreUpdatePlayers();
			int num = 0;
			int num2 = 0;
			Main.sittingManager.ClearPlayerAnchors();
			Main.sleepingManager.ClearPlayerAnchors();
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					try
					{
						Main.player[i].Update(i);
						if (Main.player[i].active)
						{
							num++;
							if (Main.player[i].sleeping.FullyFallenAsleep)
							{
								num2++;
							}
						}
					}
					catch
					{
						if (!Main.ignoreErrors)
						{
							throw;
						}
					}
				}
			}
			Main.CurrentFrameFlags.ActivePlayersCount = num;
			Main.CurrentFrameFlags.SleepingPlayersCount = num2;
			if (Main.netMode != 2)
			{
				int num3 = Main.myPlayer;
				if (Main.player[num3].creativeGodMode)
				{
					Main.player[num3].statLife = Main.player[num3].statLifeMax2;
					Main.player[num3].statMana = Main.player[num3].statManaMax2;
					Main.player[num3].breath = Main.player[num3].breathMax;
				}
			}
			SystemLoader.PostUpdatePlayers();
			Main._gameUpdateCount += 1U;
			SystemLoader.PreUpdateNPCs();
			NPC.RevengeManager.Update();
			if (Main.netMode != 1)
			{
				if (Main.remixWorld)
				{
					NPC.SetRemixHax();
				}
				try
				{
					NPC.SpawnNPC();
				}
				catch
				{
				}
				if (Main.remixWorld)
				{
					NPC.ResetRemixHax();
				}
			}
			if (Main.netMode != 1)
			{
				PressurePlateHelper.Update();
			}
			for (int j = 0; j < 255; j++)
			{
				Main.player[j].nearbyActiveNPCs = 0f;
				Main.player[j].townNPCs = 0f;
			}
			Main.CheckBossIndexes();
			Main.sittingManager.ClearNPCAnchors();
			Main.sleepingManager.ClearNPCAnchors();
			NPC.taxCollector = false;
			NPC.ClearFoundActiveNPCs();
			NPC.UpdateFoundActiveNPCs();
			FixExploitManEaters.Update();
			if (Main.netMode != 1)
			{
				Main.BestiaryTracker.Sights.ScanWorldForFinds();
			}
			bool anyActiveBossNPC = false;
			if (NPC.offSetDelayTime > 0)
			{
				NPC.offSetDelayTime--;
			}
			if (Main.remixWorld && NPC.empressRageMode && !NPC.AnyNPCs(636))
			{
				NPC.empressRageMode = false;
			}
			if (Main.netMode != 1 && Main.afterPartyOfDoom && !BirthdayParty.PartyIsUp)
			{
				for (int k = 0; k < 200; k++)
				{
					NPC nPC = Main.npc[k];
					if (nPC.active && nPC.townNPC && nPC.type != 37 && nPC.type != 453 && nPC.type != 368)
					{
						nPC.StrikeNPCNoInteraction(9999, 10f, -nPC.direction);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(28, -1, -1, null, k, 9999f, 10f, (float)(-(float)nPC.direction), 0, 0, 0);
						}
					}
				}
				NPC.unlockedPartyGirlSpawn = false;
				NPC.unlockedPrincessSpawn = false;
				NPC.unlockedSlimeRainbowSpawn = false;
				NPC.unlockedSlimeGreenSpawn = false;
				Main.afterPartyOfDoom = false;
			}
			if (NPC.brainOfGravity >= 0 && NPC.brainOfGravity < 200 && (!Main.npc[NPC.brainOfGravity].active || Main.npc[NPC.brainOfGravity].type != 266))
			{
				NPC.brainOfGravity = -1;
			}
			int l = 0;
			while (l < 200)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.npc[l].UpdateNPC(l);
						if (Main.npc[l].active && (Main.npc[l].boss || NPCID.Sets.DangerThatPreventsOtherDangers[Main.npc[l].type]))
						{
							anyActiveBossNPC = true;
						}
						goto IL_3AC;
					}
					catch (Exception)
					{
						Main.npc[l] = new NPC();
						goto IL_3AC;
					}
					goto IL_39D;
				}
				goto IL_39D;
				IL_3AC:
				l++;
				continue;
				IL_39D:
				Main.npc[l].UpdateNPC(l);
				goto IL_3AC;
			}
			Main.CurrentFrameFlags.AnyActiveBossNPC = anyActiveBossNPC;
			SystemLoader.PostUpdateNPCs();
			SystemLoader.PreUpdateGores();
			int m = 0;
			while (m < 600)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.gore[m].Update();
						goto IL_403;
					}
					catch
					{
						Main.gore[m] = new Gore();
						goto IL_403;
					}
					goto IL_3F6;
				}
				goto IL_3F6;
				IL_403:
				m++;
				continue;
				IL_3F6:
				Main.gore[m].Update();
				goto IL_403;
			}
			SystemLoader.PostUpdateGores();
			SystemLoader.PreUpdateProjectiles();
			LockOnHelper.SetUP();
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = false;
			this.PreUpdateAllProjectiles();
			int n = 0;
			while (n < 1000)
			{
				Main.ProjectileUpdateLoopIndex = n;
				if (Main.ignoreErrors)
				{
					try
					{
						Main.projectile[n].Update(n);
						goto IL_470;
					}
					catch
					{
						Main.projectile[n] = new Projectile();
						goto IL_470;
					}
					goto IL_461;
				}
				goto IL_461;
				IL_470:
				n++;
				continue;
				IL_461:
				Main.projectile[n].Update(n);
				goto IL_470;
			}
			Main.ProjectileUpdateLoopIndex = -1;
			this.PostUpdateAllProjectiles();
			LockOnHelper.SetDOWN();
			SystemLoader.PostUpdateProjectiles();
			SystemLoader.PreUpdateItems();
			Item.numberOfNewItems = 0;
			int num4 = 0;
			while (num4 < 400)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.item[num4].UpdateItem(num4);
						goto IL_4DC;
					}
					catch
					{
						Main.item[num4] = new Item();
						goto IL_4DC;
					}
					goto IL_4CD;
				}
				goto IL_4CD;
				IL_4DC:
				num4++;
				continue;
				IL_4CD:
				Main.item[num4].UpdateItem(num4);
				goto IL_4DC;
			}
			SystemLoader.PostUpdateItems();
			SystemLoader.PreUpdateDusts();
			if (Main.ignoreErrors)
			{
				try
				{
					Dust.UpdateDust();
					goto IL_53B;
				}
				catch
				{
					for (int num5 = 0; num5 < 6000; num5++)
					{
						Main.dust[num5] = new Dust();
						Main.dust[num5].dustIndex = num5;
					}
					goto IL_53B;
				}
			}
			Dust.UpdateDust();
			IL_53B:
			SystemLoader.PostUpdateDusts();
			if (Main.netMode != 2)
			{
				CombatText.UpdateCombatText();
				PopupText.UpdateItemText();
			}
			SystemLoader.PreUpdateTime();
			if (Main.ignoreErrors)
			{
				try
				{
					Main.UpdateTime();
					goto IL_573;
				}
				catch
				{
					Main.checkForSpawns = 0;
					goto IL_573;
				}
			}
			Main.UpdateTime();
			IL_573:
			SystemLoader.PostUpdateTime();
			Main.tileSolid[379] = true;
			if (Main.gameMenu && Main.netMode != 2)
			{
				return;
			}
			if (Main.netMode != 1)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						WorldGen.UpdateWorld();
						Main.UpdateInvasion();
						goto IL_5BC;
					}
					catch
					{
						goto IL_5BC;
					}
				}
				WorldGen.UpdateWorld();
				Main.UpdateInvasion();
			}
			IL_5BC:
			if (Main.ignoreErrors)
			{
				try
				{
					if (Main.netMode == 2)
					{
						Main.UpdateServer();
					}
					if (Main.netMode == 1)
					{
						Main.UpdateClient();
					}
					goto IL_602;
				}
				catch
				{
					int num6 = Main.netMode;
					goto IL_602;
				}
			}
			if (Main.netMode == 2)
			{
				Main.UpdateServer();
			}
			if (Main.netMode == 1)
			{
				Main.UpdateClient();
			}
			IL_602:
			SystemLoader.PostUpdateEverything();
			Main.chatMonitor.Update();
			Main.upTimer = (float)sw.Elapsed.TotalMilliseconds;
			if (Main.upTimerMaxDelay > 0f)
			{
				Main.upTimerMaxDelay -= 1f;
			}
			else
			{
				Main.upTimerMax = 0f;
			}
			if (Main.upTimer > Main.upTimerMax)
			{
				Main.upTimerMax = Main.upTimer;
				Main.upTimerMaxDelay = 400f;
			}
			Chest.UpdateChestFrames();
			this._ambientWindSys.Update();
			this.TilesRenderer.Update();
			this.WallsRenderer.Update();
			if (Main.cameraLerp > 0f)
			{
				Main.cameraLerpTimer++;
				if (Main.cameraLerpTimer >= Main.cameraLerpTimeToggle)
				{
					Main.cameraLerp += (float)((Main.cameraLerpTimer - Main.cameraLerpTimeToggle) / 3 + 1) * 0.001f;
				}
				if (Main.cameraLerp > 1f)
				{
					Main.cameraLerp = 1f;
				}
			}
		}

		// Token: 0x06000443 RID: 1091 RVA: 0x000AFC3C File Offset: 0x000ADE3C
		private static void CheckBossIndexes()
		{
			if (!Main.IsNPCActiveAndOneOfTypes(Main.wofNPCIndex, new int[]
			{
				113
			}))
			{
				Main.wofNPCIndex = -1;
			}
			if (!Main.IsNPCActiveAndOneOfTypes(NPC.golemBoss, new int[]
			{
				245
			}))
			{
				NPC.golemBoss = -1;
			}
			if (!Main.IsNPCActiveAndOneOfTypes(NPC.deerclopsBoss, new int[]
			{
				668
			}))
			{
				NPC.deerclopsBoss = -1;
			}
			if (!Main.IsNPCActiveAndOneOfTypes(NPC.plantBoss, new int[]
			{
				262
			}))
			{
				NPC.plantBoss = -1;
			}
			if (!Main.IsNPCActiveAndOneOfTypes(NPC.crimsonBoss, new int[]
			{
				266
			}))
			{
				NPC.crimsonBoss = -1;
			}
		}

		// Token: 0x06000444 RID: 1092 RVA: 0x000AFCE8 File Offset: 0x000ADEE8
		public static bool IsNPCActiveAndOneOfTypes(int npcIndex, params int[] types)
		{
			if (npcIndex < 0)
			{
				return false;
			}
			NPC nPC = Main.npc[npcIndex];
			if (!nPC.active)
			{
				return false;
			}
			for (int i = 0; i < types.Length; i++)
			{
				if (nPC.type == types[i])
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000445 RID: 1093 RVA: 0x000AFD29 File Offset: 0x000ADF29
		private static void UpdateOldNPCShop()
		{
			if (Main.npcShop != Main.oldNPCShop)
			{
				Main.oldNPCShop = Main.npcShop;
				Main.shopSellbackHelper.Clear();
			}
		}

		// Token: 0x06000446 RID: 1094 RVA: 0x000AFD4C File Offset: 0x000ADF4C
		private static void DoUpdate_AnimateCursorColors()
		{
			Main.CursorColor();
			Main.mouseTextColor += (byte)Main.mouseTextColorChange;
			if (Main.mouseTextColor >= 255)
			{
				Main.mouseTextColorChange = -1;
			}
			if (Main.mouseTextColor <= 190)
			{
				Main.mouseTextColorChange = 1;
			}
			Main.masterColor += (float)Main.masterColorDir * 0.05f;
			if (Main.masterColor > 1f)
			{
				Main.masterColor = 1f;
				Main.masterColorDir = -1;
			}
			if (Main.masterColor < 0f)
			{
				Main.masterColor = 0f;
				Main.masterColorDir = 1;
			}
		}

		// Token: 0x06000447 RID: 1095 RVA: 0x000AFDE4 File Offset: 0x000ADFE4
		private static void DoUpdate_AnimateTileGlows()
		{
			Main.demonTorch += (float)Main.demonTorchDir * 0.01f;
			if (Main.demonTorch > 1f)
			{
				Main.demonTorch = 1f;
				Main.demonTorchDir = -1;
			}
			if (Main.demonTorch < 0f)
			{
				Main.demonTorch = 0f;
				Main.demonTorchDir = 1;
			}
			Main.martianLight += (float)Main.martianLightDir * 0.015f;
			if (Main.martianLight > 1f)
			{
				Main.martianLight = 1f;
				Main.martianLightDir = -1;
			}
			if (Main.martianLight < 0f)
			{
				Main.martianLight = 0f;
				Main.martianLightDir = 1;
			}
		}

		// Token: 0x06000448 RID: 1096 RVA: 0x000AFE90 File Offset: 0x000AE090
		private static void DoUpdate_Enter_ToggleChat()
		{
			if (Main.keyState.IsKeyDown(13) && !Main.keyState.IsKeyDown(164) && !Main.keyState.IsKeyDown(165) && Main.hasFocus)
			{
				if (!Main.InGameUI.IsVisible && !Main.ingameOptionsWindow && Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(27))
				{
					SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
					Main.OpenPlayerChat();
					Main.chatText = "";
				}
				Main.chatRelease = false;
				return;
			}
			Main.chatRelease = true;
		}

		// Token: 0x06000449 RID: 1097 RVA: 0x000AFF4F File Offset: 0x000AE14F
		public static void OpenPlayerChat()
		{
			if (Main.CurrentInputTextTakerOverride == null)
			{
				Main.drawingPlayerChat = true;
				Main.clrInput();
			}
		}

		// Token: 0x0600044A RID: 1098 RVA: 0x000AFF63 File Offset: 0x000AE163
		public static void ClosePlayerChat()
		{
			Main.drawingPlayerChat = false;
			PlayerInput.WritingText = false;
			Main.player[Main.myPlayer].releaseHook = false;
			Main.player[Main.myPlayer].releaseThrow = false;
		}

		// Token: 0x0600044B RID: 1099 RVA: 0x000AFF94 File Offset: 0x000AE194
		private static void DoUpdate_HandleChat()
		{
			if (Main.CurrentInputTextTakerOverride != null)
			{
				Main.drawingPlayerChat = false;
				return;
			}
			if (Main.editSign)
			{
				Main.drawingPlayerChat = false;
			}
			if (PlayerInput.UsingGamepad)
			{
				Main.drawingPlayerChat = false;
			}
			if (!Main.drawingPlayerChat)
			{
				Main.chatMonitor.ResetOffset();
				return;
			}
			int linesOffset = 0;
			if (Main.keyState.IsKeyDown(38))
			{
				linesOffset = 1;
			}
			else if (Main.keyState.IsKeyDown(40))
			{
				linesOffset = -1;
			}
			Main.chatMonitor.Offset(linesOffset);
			if (Main.keyState.IsKeyDown(27))
			{
				Main.drawingPlayerChat = false;
			}
			string text = Main.chatText;
			Main.chatText = Main.GetInputText(Main.chatText, false);
			int num = (int)((float)Main.screenWidth * (1f / Main.UIScale)) - 330;
			if (text != Main.chatText)
			{
				for (float x = ChatManager.GetStringSize(FontAssets.MouseText.Value, Main.chatText, Vector2.One, -1f).X; x > (float)num; x = ChatManager.GetStringSize(FontAssets.MouseText.Value, Main.chatText, Vector2.One, -1f).X)
				{
					int num2 = Math.Max(0, (int)(x - (float)num) / 100);
					Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1 - num2);
				}
			}
			if (text != Main.chatText)
			{
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			}
			if (!Main.inputTextEnter || !Main.chatRelease)
			{
				return;
			}
			bool handled = Main.chatText.Length > 0 && Main.chatText[0] == '/' && CommandLoader.HandleCommand(Main.chatText, new ChatCommandCaller());
			if (Main.chatText != "" && !handled)
			{
				ChatMessage message = ChatManager.Commands.CreateOutgoingMessage(Main.chatText);
				if (Main.netMode == 1)
				{
					ChatHelper.SendChatMessageFromClient(message);
				}
				else if (Main.netMode == 0)
				{
					ChatManager.Commands.ProcessIncomingMessage(message, Main.myPlayer);
				}
			}
			Main.chatText = "";
			Main.ClosePlayerChat();
			Main.chatRelease = false;
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
		}

		// Token: 0x0600044C RID: 1100 RVA: 0x000B01BE File Offset: 0x000AE3BE
		private void DoUpdate_HandleInput()
		{
			PlayerInput.UpdateInput();
			SystemLoader.PostUpdateInput();
			this.UpdateViewZoomKeys();
			PlayerInput.SetZoom_Unscaled();
			UILinkPointNavigator.Update();
			PlayerInput.CacheMousePositionForZoom();
			PlayerInput.SetZoom_MouseInWorld();
			Main.oldKeyState = Main.keyState;
			Main.keyState = Keyboard.GetState();
		}

		// Token: 0x0600044D RID: 1101 RVA: 0x000B01F8 File Offset: 0x000AE3F8
		private static void DoUpdate_AltEnter_ToggleFullscreen()
		{
			if ((Main.keyState.IsKeyDown(164) || Main.keyState.IsKeyDown(165)) && Main.keyState.IsKeyDown(13) && Main.hasFocus)
			{
				if (Main.toggleFullscreen)
				{
					Main.ToggleFullScreen();
					Main.chatRelease = false;
				}
				Main.toggleFullscreen = false;
				return;
			}
			Main.toggleFullscreen = true;
		}

		// Token: 0x0600044E RID: 1102 RVA: 0x000B025C File Offset: 0x000AE45C
		private static void DoUpdate_F11_ToggleUI()
		{
			if (Main.keyState.IsKeyDown(122))
			{
				if (Main.releaseUI)
				{
					if (Main.hideUI)
					{
						Main.hideUI = false;
					}
					else
					{
						Main.hideUI = true;
					}
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.releaseUI = false;
				return;
			}
			Main.releaseUI = true;
		}

		// Token: 0x0600044F RID: 1103 RVA: 0x000B02B8 File Offset: 0x000AE4B8
		private static void DoUpdate_F7_ToggleGraphicsDiagnostics()
		{
			if (Main.keyState.IsKeyDown(118) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
			{
				if (Main.drawRelease)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					if (Main.keyState.IsKeyDown(164) || Main.keyState.IsKeyDown(165))
					{
						TimeLogger.Start();
					}
					else if (Main.drawDiag)
					{
						Main.drawDiag = false;
					}
					else
					{
						Main.drawDiag = true;
					}
				}
				Main.drawRelease = false;
				return;
			}
			Main.drawRelease = true;
		}

		// Token: 0x06000450 RID: 1104 RVA: 0x000B0350 File Offset: 0x000AE550
		private static void DoUpdate_F8_ToggleNetDiagnostics()
		{
			if (Main.keyState.IsKeyDown(119) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
			{
				if (Main.netRelease)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					if (!Main.shouldDrawNetDiagnosticsUI && !ModNet.ShouldDrawModNetDiagnosticsUI)
					{
						Main.shouldDrawNetDiagnosticsUI = true;
					}
					else if (Main.shouldDrawNetDiagnosticsUI && !ModNet.ShouldDrawModNetDiagnosticsUI)
					{
						Main.shouldDrawNetDiagnosticsUI = false;
						ModNet.ShouldDrawModNetDiagnosticsUI = true;
					}
					else if (ModNet.ShouldDrawModNetDiagnosticsUI)
					{
						ModNet.ShouldDrawModNetDiagnosticsUI = false;
					}
				}
				Main.netRelease = false;
				return;
			}
			Main.netRelease = true;
		}

		// Token: 0x06000451 RID: 1105 RVA: 0x000B03E8 File Offset: 0x000AE5E8
		private static void DoUpdate_F9_ToggleLighting()
		{
			if (Main.keyState.PressingShift() && Main.keyState.IsKeyDown(120) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
			{
				if (Main.RGBRelease)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Lighting.NextLightMode();
				}
				Main.RGBRelease = false;
				return;
			}
			Main.RGBRelease = true;
		}

		// Token: 0x06000452 RID: 1106 RVA: 0x000B0454 File Offset: 0x000AE654
		private static void DoUpdate_F10_ToggleFPS()
		{
			if (Main.keyState.IsKeyDown(121) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
			{
				if (Main.frameRelease)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					if (Main.showFrameRate)
					{
						Main.showFrameRate = false;
					}
					else
					{
						Main.showFrameRate = true;
					}
				}
				Main.frameRelease = false;
				return;
			}
			Main.frameRelease = true;
		}

		// Token: 0x06000453 RID: 1107 RVA: 0x000B04C4 File Offset: 0x000AE6C4
		private static void AnimateTiles()
		{
			Main.tileFrameCounter[12]++;
			if (Main.tileFrameCounter[12] > 5)
			{
				Main.tileFrameCounter[12] = 0;
				Main.tileFrame[12]++;
				if (Main.tileFrame[12] >= 10)
				{
					Main.tileFrame[12] = 0;
				}
			}
			Main.tileFrameCounter[665] = Main.tileFrameCounter[12];
			Main.tileFrame[665] = Main.tileFrame[12];
			Main.tileFrameCounter[639]++;
			if (Main.tileFrameCounter[639] > 5)
			{
				Main.tileFrameCounter[639] = 0;
				Main.tileFrame[639]++;
				if (Main.tileFrame[639] >= 10)
				{
					Main.tileFrame[639] = 0;
				}
			}
			Main.tileFrameCounter[17]++;
			if (Main.tileFrameCounter[17] > 5)
			{
				Main.tileFrameCounter[17] = 0;
				Main.tileFrame[17]++;
				if (Main.tileFrame[17] >= 12)
				{
					Main.tileFrame[17] = 0;
				}
			}
			int[] array = Main.tileFrameCounter;
			int num5 = 133;
			int num6 = array[num5] + 1;
			array[num5] = num6;
			if (num6 >= 4)
			{
				Main.tileFrameCounter[133] = 0;
				int[] array2 = Main.tileFrame;
				int num7 = 133;
				num6 = array2[num7] + 1;
				array2[num7] = num6;
				if (num6 >= 6)
				{
					Main.tileFrame[133] = 0;
				}
			}
			Main.tileFrameCounter[31]++;
			if (Main.tileFrameCounter[31] > 10)
			{
				Main.tileFrameCounter[31] = 0;
				Main.tileFrame[31]++;
				if (Main.tileFrame[31] > 1)
				{
					Main.tileFrame[31] = 0;
				}
			}
			Main.tileFrameCounter[77]++;
			if (Main.tileFrameCounter[77] > 5)
			{
				Main.tileFrameCounter[77] = 0;
				Main.tileFrame[77]++;
				if (Main.tileFrame[77] >= 12)
				{
					Main.tileFrame[77] = 0;
				}
			}
			Main.tileFrameCounter[106]++;
			if (Main.tileFrameCounter[106] > 4)
			{
				Main.tileFrameCounter[106] = 0;
				Main.tileFrame[106]++;
				if (Main.tileFrame[106] >= 2)
				{
					Main.tileFrame[106] = 0;
				}
			}
			Main.tileFrameCounter[207]++;
			if (Main.tileFrameCounter[207] > 4)
			{
				Main.tileFrameCounter[207] = 0;
				Main.tileFrame[207]++;
				if (Main.tileFrame[207] >= 6)
				{
					Main.tileFrame[207] = 0;
				}
			}
			Main.tileFrameCounter[215]++;
			if (Main.tileFrameCounter[215] >= 4)
			{
				Main.tileFrameCounter[215] = 0;
				Main.tileFrame[215]++;
				if (Main.tileFrame[215] >= 8)
				{
					Main.tileFrame[215] = 0;
				}
			}
			Main.tileFrameCounter[592]++;
			if (Main.tileFrameCounter[592] >= 5)
			{
				Main.tileFrameCounter[592] = 0;
				Main.tileFrame[592]++;
				if (Main.tileFrame[592] >= 8)
				{
					Main.tileFrame[592] = 0;
				}
			}
			Main.tileFrameCounter[217]++;
			if (Main.tileFrameCounter[217] > 4)
			{
				Main.tileFrameCounter[217] = 0;
				Main.tileFrame[217]++;
				if (Main.tileFrame[217] >= 5)
				{
					Main.tileFrame[217] = 0;
				}
			}
			Main.tileFrameCounter[218]++;
			if (Main.tileFrameCounter[218] > 4)
			{
				Main.tileFrameCounter[218] = 0;
				Main.tileFrame[218]++;
				if (Main.tileFrame[218] >= 2)
				{
					Main.tileFrame[218] = 0;
				}
			}
			Main.tileFrameCounter[219]++;
			if (Main.tileFrameCounter[219] > 4)
			{
				Main.tileFrameCounter[219] = 0;
				Main.tileFrame[219]++;
				if (Main.tileFrame[219] >= 10)
				{
					Main.tileFrame[219] = 0;
				}
			}
			Main.tileFrameCounter[642]++;
			if (Main.tileFrameCounter[642] > 4)
			{
				Main.tileFrameCounter[642] = 0;
				Main.tileFrame[642]++;
				if (Main.tileFrame[642] >= 6)
				{
					Main.tileFrame[642] = 0;
				}
			}
			Main.tileFrameCounter[220]++;
			if (Main.tileFrameCounter[220] > 4)
			{
				Main.tileFrameCounter[220] = 0;
				Main.tileFrame[220]++;
				if (Main.tileFrame[220] >= 4)
				{
					Main.tileFrame[220] = 0;
				}
			}
			Main.tileFrameCounter[231]++;
			if (Main.tileFrameCounter[231] > 16)
			{
				Main.tileFrameCounter[231] = 0;
				Main.tileFrame[231]++;
				if (Main.tileFrame[231] >= 7)
				{
					Main.tileFrame[231] = 0;
				}
			}
			Main.tileFrameCounter[235]++;
			if (Main.tileFrameCounter[235] > 20)
			{
				Main.tileFrameCounter[235] = 0;
				Main.tileFrame[235]++;
				if (Main.tileFrame[235] >= 4)
				{
					Main.tileFrame[235] = 0;
				}
			}
			Main.tileFrameCounter[238]++;
			if (Main.tileFrameCounter[238] > 20)
			{
				Main.tileFrameCounter[238] = 0;
				Main.tileFrame[238]++;
				if (Main.tileFrame[238] >= 4)
				{
					Main.tileFrame[238] = 0;
				}
			}
			Main.tileFrameCounter[243]++;
			if (Main.tileFrameCounter[243] > 4)
			{
				Main.tileFrameCounter[243] = 0;
				Main.tileFrame[243]++;
				if (Main.tileFrame[243] >= 6)
				{
					Main.tileFrame[243] = 0;
				}
			}
			Main.tileFrameCounter[244]++;
			if (Main.tileFrameCounter[244] > 4)
			{
				Main.tileFrameCounter[244] = 0;
				Main.tileFrame[244]++;
				if (Main.tileFrame[244] >= 6)
				{
					Main.tileFrame[244] = 0;
				}
			}
			Main.tileFrameCounter[247]++;
			if (Main.tileFrameCounter[247] > 4)
			{
				Main.tileFrameCounter[247] = 0;
				Main.tileFrame[247]++;
				if (Main.tileFrame[247] > 7)
				{
					Main.tileFrame[247] = 0;
				}
			}
			Main.tileFrameCounter[96]++;
			if (Main.tileFrameCounter[96] > 4)
			{
				Main.tileFrameCounter[96] = 0;
				Main.tileFrame[96]++;
				if (Main.tileFrame[96] > 3)
				{
					Main.tileFrame[96] = 0;
				}
			}
			Main.tileFrameCounter[171]++;
			if (Main.tileFrameCounter[171] > 16)
			{
				Main.tileFrameCounter[171] = 0;
				Main.tileFrame[171]++;
				if (Main.tileFrame[171] > 3)
				{
					Main.tileFrame[171] = 0;
				}
			}
			Main.tileFrameCounter[270]++;
			if (Main.tileFrameCounter[270] > 8)
			{
				Main.tileFrameCounter[270] = 0;
				Main.tileFrame[270]++;
				if (Main.tileFrame[270] > 5)
				{
					Main.tileFrame[270] = 0;
				}
			}
			int num = Main.tileFrame[270];
			Main.tileFrame[271] = num;
			Main.tileFrame[581] = num;
			Main.tileFrameCounter[660]++;
			if (Main.tileFrameCounter[660] > 8)
			{
				Main.tileFrameCounter[660] = 0;
				Main.tileFrame[660]++;
				if (Main.tileFrame[660] > 4)
				{
					Main.tileFrame[660] = 0;
				}
			}
			Main.tileFrameCounter[272]++;
			if (Main.tileFrameCounter[272] >= 10)
			{
				Main.tileFrameCounter[272] = 0;
				Main.tileFrame[272]++;
				if (Main.tileFrame[272] > 1)
				{
					Main.tileFrame[272] = 0;
				}
			}
			Main.tileFrameCounter[300]++;
			if (Main.tileFrameCounter[300] >= 5)
			{
				Main.tileFrameCounter[300] = 0;
				Main.tileFrame[300]++;
				if (Main.tileFrame[300] > 6)
				{
					Main.tileFrame[300] = 0;
				}
			}
			Main.tileFrameCounter[301]++;
			if (Main.tileFrameCounter[301] >= 5)
			{
				Main.tileFrameCounter[301] = 0;
				Main.tileFrame[301]++;
				if (Main.tileFrame[301] > 7)
				{
					Main.tileFrame[301] = 0;
				}
			}
			Main.tileFrameCounter[302]++;
			if (Main.tileFrameCounter[302] >= 5)
			{
				Main.tileFrameCounter[302] = 0;
				Main.tileFrame[302]++;
				if (Main.tileFrame[302] > 3)
				{
					Main.tileFrame[302] = 0;
				}
			}
			Main.tileFrameCounter[303]++;
			if (Main.tileFrameCounter[303] >= 5)
			{
				Main.tileFrameCounter[303] = 0;
				Main.tileFrame[303]++;
				if (Main.tileFrame[303] > 4)
				{
					Main.tileFrame[303] = 0;
				}
			}
			Main.tileFrameCounter[305]++;
			if (Main.tileFrameCounter[305] >= 5)
			{
				Main.tileFrameCounter[305] = 0;
				Main.tileFrame[305]++;
				if (Main.tileFrame[305] > 11)
				{
					Main.tileFrame[305] = 0;
				}
			}
			Main.tileFrameCounter[306]++;
			if (Main.tileFrameCounter[306] >= 5)
			{
				Main.tileFrameCounter[306] = 0;
				Main.tileFrame[306]++;
				if (Main.tileFrame[306] > 11)
				{
					Main.tileFrame[306] = 0;
				}
			}
			Main.tileFrameCounter[307]++;
			if (Main.tileFrameCounter[307] >= 5)
			{
				Main.tileFrameCounter[307] = 0;
				Main.tileFrame[307]++;
				if (Main.tileFrame[307] > 1)
				{
					Main.tileFrame[307] = 0;
				}
			}
			Main.tileFrameCounter[308]++;
			if (Main.tileFrameCounter[308] >= 5)
			{
				Main.tileFrameCounter[308] = 0;
				Main.tileFrame[308]++;
				if (Main.tileFrame[308] > 7)
				{
					Main.tileFrame[308] = 0;
				}
			}
			Main.tileFrameCounter[314]++;
			if (Main.tileFrameCounter[314] >= 10)
			{
				Main.tileFrameCounter[314] = 0;
				Main.tileFrame[314]++;
				if (Main.tileFrame[314] > 4)
				{
					Main.tileFrame[314] = 0;
				}
			}
			Main.tileFrameCounter[326]++;
			if (Main.tileFrameCounter[326] >= 5)
			{
				Main.tileFrameCounter[326] = 0;
				Main.tileFrame[326]++;
				if (Main.tileFrame[326] > 7)
				{
					Main.tileFrame[326] = 0;
				}
			}
			Main.tileFrameCounter[327]++;
			if (Main.tileFrameCounter[327] >= 10)
			{
				Main.tileFrameCounter[327] = 0;
				Main.tileFrame[327]++;
				if (Main.tileFrame[327] > 7)
				{
					Main.tileFrame[327] = 0;
				}
			}
			Main.tileFrameCounter[345]++;
			if (Main.tileFrameCounter[345] >= 10)
			{
				Main.tileFrameCounter[345] = 0;
				Main.tileFrame[345]++;
				if (Main.tileFrame[345] > 7)
				{
					Main.tileFrame[345] = 0;
				}
			}
			Main.tileFrameCounter[458]++;
			if (Main.tileFrameCounter[458] >= 10)
			{
				Main.tileFrameCounter[458] = 0;
				Main.tileFrame[458]++;
				if (Main.tileFrame[458] > 7)
				{
					Main.tileFrame[458] = 0;
				}
			}
			Main.tileFrameCounter[459]++;
			if (Main.tileFrameCounter[459] >= 10)
			{
				Main.tileFrameCounter[459] = 0;
				Main.tileFrame[459]++;
				if (Main.tileFrame[459] > 7)
				{
					Main.tileFrame[459] = 0;
				}
			}
			Main.tileFrameCounter[336]++;
			if (Main.tileFrameCounter[336] >= 5)
			{
				Main.tileFrameCounter[336] = 0;
				Main.tileFrame[336]++;
				if (Main.tileFrame[336] > 3)
				{
					Main.tileFrame[336] = 0;
				}
			}
			Main.tileFrameCounter[328]++;
			if (Main.tileFrameCounter[328] >= 5)
			{
				Main.tileFrameCounter[328] = 0;
				Main.tileFrame[328]++;
				if (Main.tileFrame[328] > 7)
				{
					Main.tileFrame[328] = 0;
				}
			}
			Main.tileFrameCounter[329]++;
			if (Main.tileFrameCounter[329] >= 5)
			{
				Main.tileFrameCounter[329] = 0;
				Main.tileFrame[329]++;
				if (Main.tileFrame[329] > 7)
				{
					Main.tileFrame[329] = 0;
				}
			}
			int num2 = 20;
			int[] array3 = Main.tileFrameCounter;
			int num8 = 507;
			num6 = array3[num8] + 1;
			array3[num8] = num6;
			if (num6 >= num2 * 8)
			{
				Main.tileFrameCounter[507] = 0;
			}
			int[] array4 = Main.tileFrameCounter;
			int num9 = 508;
			num6 = array4[num9] + 1;
			array4[num9] = num6;
			if (num6 >= num2 * 8)
			{
				Main.tileFrameCounter[508] = 0;
			}
			for (int i = 340; i <= 344; i++)
			{
				Main.tileFrameCounter[i]++;
				if (Main.tileFrameCounter[i] >= 5)
				{
					Main.tileFrameCounter[i] = 0;
					Main.tileFrame[i]++;
					if (Main.tileFrame[i] > 3)
					{
						Main.tileFrame[i] = 0;
					}
				}
			}
			Main.tileFrameCounter[351]++;
			if (Main.tileFrameCounter[351] >= 5)
			{
				Main.tileFrameCounter[351] = 0;
				Main.tileFrame[351]++;
				if (Main.tileFrame[351] > 2)
				{
					Main.tileFrame[351] = 0;
				}
			}
			Main.tileFrameCounter[354]++;
			if (Main.tileFrameCounter[354] >= 5)
			{
				Main.tileFrameCounter[354] = 0;
				Main.tileFrame[354]++;
				if (Main.tileFrame[354] >= 8)
				{
					Main.tileFrame[354] = 0;
				}
			}
			Main.tileFrame[355] = Main.tileFrame[354];
			Main.tileFrameCounter[377]++;
			if (Main.tileFrameCounter[377] >= 5)
			{
				Main.tileFrameCounter[377] = 0;
				Main.tileFrame[377]++;
				if (Main.tileFrame[377] >= 4)
				{
					Main.tileFrame[377] = 0;
				}
			}
			Main.tileFrameCounter[379]++;
			if (Main.tileFrameCounter[379] >= 10)
			{
				Main.tileFrameCounter[379] = 0;
				Main.tileFrame[379]++;
				if (Main.tileFrame[379] >= 4)
				{
					Main.tileFrame[379] = 0;
				}
			}
			int[] array5 = Main.tileFrameCounter;
			int num10 = 390;
			num6 = array5[num10] + 1;
			array5[num10] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[390] = 0;
				int[] array6 = Main.tileFrame;
				int num11 = 390;
				num6 = array6[num11] + 1;
				array6[num11] = num6;
				if (num6 >= 7)
				{
					Main.tileFrame[390] = 0;
				}
			}
			int[] array7 = Main.tileFrameCounter;
			int num12 = 228;
			num6 = array7[num12] + 1;
			array7[num12] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[228] = 0;
				int[] array8 = Main.tileFrame;
				int num13 = 228;
				num6 = array8[num13] + 1;
				array8[num13] = num6;
				if (num6 >= 3)
				{
					Main.tileFrame[228] = 0;
				}
			}
			int[] array9 = Main.tileFrameCounter;
			int num14 = 405;
			num6 = array9[num14] + 1;
			array9[num14] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[405] = 0;
				int[] array10 = Main.tileFrame;
				int num15 = 405;
				num6 = array10[num15] + 1;
				array10[num15] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[405] = 0;
				}
			}
			int[] array11 = Main.tileFrameCounter;
			int num16 = 406;
			num6 = array11[num16] + 1;
			array11[num16] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[406] = 0;
				int[] array12 = Main.tileFrame;
				int num17 = 406;
				num6 = array12[num17] + 1;
				array12[num17] = num6;
				if (num6 >= 6)
				{
					Main.tileFrame[406] = 0;
				}
			}
			int[] array13 = Main.tileFrameCounter;
			int num18 = 452;
			num6 = array13[num18] + 1;
			array13[num18] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[452] = 0;
				int[] array14 = Main.tileFrame;
				int num19 = 452;
				num6 = array14[num19] + 1;
				array14[num19] = num6;
				if (num6 >= 15)
				{
					Main.tileFrame[452] = 0;
				}
			}
			int[] array15 = Main.tileFrameCounter;
			int num20 = 455;
			num6 = array15[num20] + 1;
			array15[num20] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[455] = 0;
				int[] array16 = Main.tileFrame;
				int num21 = 455;
				num6 = array16[num21] + 1;
				array16[num21] = num6;
				if (num6 >= 6)
				{
					Main.tileFrame[455] = 0;
				}
			}
			int[] array17 = Main.tileFrameCounter;
			int num22 = 499;
			num6 = array17[num22] + 1;
			array17[num22] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[499] = 0;
				int[] array18 = Main.tileFrame;
				int num23 = 499;
				num6 = array18[num23] + 1;
				array18[num23] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[499] = 0;
				}
			}
			int[] array19 = Main.tileFrameCounter;
			int num24 = 129;
			num6 = array19[num24] + 1;
			array19[num24] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[129] = 0;
				int[] array20 = Main.tileFrame;
				int num25 = 129;
				num6 = array20[num25] + 1;
				array20[num25] = num6;
				if (num6 >= 6)
				{
					Main.tileFrame[129] = 0;
				}
			}
			Main.tileFrameCounter[453] += ((!WorldGen.gen) ? Main.rand.Next(3) : 0);
			int[] array21 = Main.tileFrameCounter;
			int num26 = 453;
			num6 = array21[num26] + 1;
			array21[num26] = num6;
			if (num6 >= 60)
			{
				Main.tileFrameCounter[453] = 0;
			}
			int[] array22 = Main.tileFrame;
			int num27 = 412;
			num6 = array22[num27] + 1;
			array22[num27] = num6;
			if (num6 >= 240)
			{
				Main.tileFrame[412] = 0;
			}
			Main.tileFrameCounter[456] += ((!WorldGen.gen) ? Main.rand.Next(3) : 0);
			int[] array23 = Main.tileFrameCounter;
			int num28 = 456;
			num6 = array23[num28] + 1;
			array23[num28] = num6;
			if (num6 >= 80)
			{
				Main.tileFrameCounter[456] = 0;
			}
			int[] array24 = Main.tileFrame;
			int num29 = 456;
			num6 = array24[num29] + 1;
			array24[num29] = num6;
			if (num6 >= 240)
			{
				Main.tileFrame[456] = 0;
			}
			int[] array25 = Main.tileFrameCounter;
			int num30 = 410;
			num6 = array25[num30] + 1;
			array25[num30] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[410] = 0;
				int[] array26 = Main.tileFrame;
				int num31 = 410;
				num6 = array26[num31] + 1;
				array26[num31] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[410] = 0;
				}
			}
			int[] array27 = Main.tileFrameCounter;
			int num32 = 480;
			num6 = array27[num32] + 1;
			array27[num32] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[480] = 0;
				int[] array28 = Main.tileFrame;
				int num33 = 480;
				num6 = array28[num33] + 1;
				array28[num33] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[480] = 0;
				}
			}
			int[] array29 = Main.tileFrameCounter;
			int num34 = 509;
			num6 = array29[num34] + 1;
			array29[num34] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[509] = 0;
				int[] array30 = Main.tileFrame;
				int num35 = 509;
				num6 = array30[num35] + 1;
				array30[num35] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[509] = 0;
				}
			}
			int[] array31 = Main.tileFrameCounter;
			int num36 = 657;
			num6 = array31[num36] + 1;
			array31[num36] = num6;
			if (num6 >= 8)
			{
				Main.tileFrameCounter[657] = 0;
				int[] array32 = Main.tileFrame;
				int num37 = 657;
				num6 = array32[num37] + 1;
				array32[num37] = num6;
				if (num6 >= 8)
				{
					Main.tileFrame[657] = 0;
				}
			}
			int[] array33 = Main.tileFrameCounter;
			int num38 = 658;
			num6 = array33[num38] + 1;
			array33[num38] = num6;
			if (num6 >= 4)
			{
				Main.tileFrameCounter[658] = 0;
				int[] array34 = Main.tileFrame;
				int num39 = 658;
				num6 = array34[num39] + 1;
				array34[num39] = num6;
				if (num6 >= 10)
				{
					Main.tileFrame[658] = 0;
				}
			}
			int[] array35 = Main.tileFrameCounter;
			int num40 = 421;
			num6 = array35[num40] + 1;
			array35[num40] = num6;
			if (num6 >= 4)
			{
				Main.tileFrameCounter[421] = 0;
				int[] array36 = Main.tileFrame;
				int num41 = 421;
				num6 = array36[num41] + 1;
				array36[num41] = num6;
				if (num6 >= 4)
				{
					Main.tileFrame[421] = 0;
				}
			}
			int[] array37 = Main.tileFrameCounter;
			int num42 = 422;
			num6 = array37[num42] + 1;
			array37[num42] = num6;
			if (num6 >= 4)
			{
				Main.tileFrameCounter[422] = 0;
				int[] array38 = Main.tileFrame;
				int num43 = 422;
				num6 = array38[num43] - 1;
				array38[num43] = num6;
				if (num6 < 0)
				{
					Main.tileFrame[422] = 3;
				}
			}
			int[] array39 = Main.tileFrameCounter;
			int num44 = 463;
			num6 = array39[num44] + 1;
			array39[num44] = num6;
			if (num6 >= 10)
			{
				Main.tileFrameCounter[463] = 0;
				int[] array40 = Main.tileFrame;
				int num45 = 463;
				num6 = array40[num45] + 1;
				array40[num45] = num6;
				if (num6 >= 6)
				{
					Main.tileFrame[463] = 0;
				}
			}
			int[] array41 = Main.tileFrameCounter;
			int num46 = 464;
			num6 = array41[num46] + 1;
			array41[num46] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[464] = 0;
				int[] array42 = Main.tileFrame;
				int num47 = 464;
				num6 = array42[num47] + 1;
				array42[num47] = num6;
				if (num6 >= 23)
				{
					Main.tileFrame[464] = 0;
				}
			}
			int[] array43 = Main.tileFrameCounter;
			int num48 = 485;
			num6 = array43[num48] + 1;
			array43[num48] = num6;
			if (num6 >= 20)
			{
				Main.tileFrameCounter[485] = 0;
			}
			int[] array44 = Main.tileFrameCounter;
			int num49 = 491;
			num6 = array44[num49] + 1;
			array44[num49] = num6;
			if (num6 >= 40)
			{
				Main.tileFrameCounter[491] = 0;
			}
			int[] array45 = Main.tileFrameCounter;
			int num50 = 564;
			num6 = array45[num50] + 1;
			array45[num50] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[564] = 0;
				Main.tileFrame[564]++;
				if (Main.tileFrame[564] >= 36)
				{
					Main.tileFrame[564] = 0;
				}
			}
			int[] array46 = Main.tileFrameCounter;
			int num51 = 593;
			num6 = array46[num51] + 1;
			array46[num51] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[593] = 0;
				Main.tileFrame[593]++;
				if (Main.tileFrame[593] >= 9)
				{
					Main.tileFrame[593] = 5;
				}
			}
			int[] array47 = Main.tileFrameCounter;
			int num52 = 594;
			num6 = array47[num52] + 1;
			array47[num52] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[594] = 0;
				Main.tileFrame[594]++;
				if (Main.tileFrame[594] >= 9)
				{
					Main.tileFrame[594] = 5;
				}
			}
			int[] array48 = Main.tileFrameCounter;
			int num53 = 614;
			num6 = array48[num53] + 1;
			array48[num53] = num6;
			if (num6 >= 5)
			{
				Main.tileFrameCounter[614] = 0;
				Main.tileFrame[614]++;
				if (Main.tileFrame[614] >= 6)
				{
					Main.tileFrame[614] = 0;
				}
			}
			int[] array49 = Main.tileFrameCounter;
			int num54 = 565;
			num6 = array49[num54] + 1;
			array49[num54] = num6;
			if (num6 >= 4)
			{
				Main.tileFrameCounter[565] = 0;
				Main.tileFrame[565]++;
				if (Main.tileFrame[565] >= 5)
				{
					Main.tileFrame[565] = 0;
				}
			}
			int[] array50 = Main.tileFrameCounter;
			int num55 = 572;
			num6 = array50[num55] + 1;
			array50[num55] = num6;
			if (num6 >= 6)
			{
				Main.tileFrameCounter[572] = 0;
				int[] array51 = Main.tileFrame;
				int num56 = 572;
				num6 = array51[num56] + 1;
				array51[num56] = num6;
				if (num6 >= 4)
				{
					Main.tileFrame[572] = 0;
				}
			}
			int[] array52 = Main.tileFrameCounter;
			int num57 = 597;
			num6 = array52[num57] + 1;
			array52[num57] = num6;
			if (num6 >= 64)
			{
				Main.tileFrameCounter[597] = 0;
			}
			int num3 = (int)MathHelper.Clamp((float)Math.Floor((double)(Math.Abs(Main.WindForVisuals) * 10f)) * (float)Math.Sign(Main.WindForVisuals), -5f, 5f);
			Main.tileFrameCounter[489] += num3;
			Main.tileFrameCounter[489] %= 320;
			if (Main.tileFrameCounter[489] < 0)
			{
				Main.tileFrameCounter[489] += 320;
			}
			Main.AnimateTiles_WeatherVane();
			int num4 = (int)MathHelper.Clamp((float)Math.Floor((double)(Math.Abs(Main.WindForVisuals) * 10f)) * (float)Math.Sign(Main.WindForVisuals), -5f, 5f);
			Main.tileFrameCounter[493] += num4;
			Main.tileFrameCounter[493] %= 120;
			if (Main.tileFrameCounter[493] < 0)
			{
				Main.tileFrameCounter[493] += 120;
			}
			TileLoader.AnimateTiles();
			Main.AnimateTiles_CritterCages();
		}

		// Token: 0x06000454 RID: 1108 RVA: 0x000B2080 File Offset: 0x000B0280
		private static void AnimateTiles_WeatherVane()
		{
			int num = Math.Sign(Main.WindForVisuals);
			int num2 = (int)MathHelper.Clamp((float)Math.Floor((double)(Math.Abs(Main.WindForVisuals) * 10f)), -5f, 5f);
			int num3 = 6;
			Main.tileFrameCounter[490] += num2;
			if (Main.tileFrameCounter[490] < num3)
			{
				return;
			}
			Main.tileFrameCounter[490] -= num3 * Main.tileFrameCounter[490];
			if ((Main.tileFrame[490] != 0 || num != -1) && (Main.tileFrame[490] != 6 || num != 1))
			{
				int[] array = Main.tileFrame;
				int num4 = 490;
				int num5 = array[num4] + 1;
				array[num4] = num5;
				if (num5 >= 12)
				{
					Main.tileFrame[490] = 0;
					Main.weatherVaneBobframe = 0;
					return;
				}
			}
			else if (Main.rand.NextFloat() < Math.Abs(Main.WindForVisuals) * 0.5f && ++Main.weatherVaneBobframe == 8)
			{
				Main.weatherVaneBobframe = 0;
			}
		}

		// Token: 0x06000455 RID: 1109 RVA: 0x000B2188 File Offset: 0x000B0388
		private static void DoUpdate_AnimateWalls()
		{
			byte[] array = Main.wallFrameCounter;
			int num5 = 136;
			array[num5] += 1;
			if (Main.wallFrameCounter[136] >= 5)
			{
				Main.wallFrameCounter[136] = 0;
				byte[] array2 = Main.wallFrame;
				int num6 = 136;
				array2[num6] += 1;
				if (Main.wallFrame[136] > 7)
				{
					Main.wallFrame[136] = 0;
				}
			}
			byte[] array3 = Main.wallFrameCounter;
			int num7 = 137;
			array3[num7] += 1;
			if (Main.wallFrameCounter[137] >= 10)
			{
				Main.wallFrameCounter[137] = 0;
				byte[] array4 = Main.wallFrame;
				int num8 = 137;
				array4[num8] += 1;
				if (Main.wallFrame[137] > 7)
				{
					Main.wallFrame[137] = 0;
				}
			}
			int num = 226;
			byte[] array5 = Main.wallFrameCounter;
			int num9 = num;
			array5[num9] += 1;
			if (Main.wallFrameCounter[num] >= 10)
			{
				Main.wallFrameCounter[num] = 0;
				byte[] array6 = Main.wallFrame;
				int num10 = num;
				array6[num10] += 1;
				if (Main.wallFrame[num] > 7)
				{
					Main.wallFrame[num] = 0;
				}
			}
			num = 227;
			byte[] array7 = Main.wallFrameCounter;
			int num11 = num;
			array7[num11] += 1;
			if (Main.wallFrameCounter[num] >= 5)
			{
				Main.wallFrameCounter[num] = 0;
				byte[] array8 = Main.wallFrame;
				int num12 = num;
				array8[num12] += 1;
				if (Main.wallFrame[num] > 7)
				{
					Main.wallFrame[num] = 0;
				}
			}
			num = 225;
			byte[] array9 = Main.wallFrameCounter;
			int num13 = num;
			array9[num13] += 1;
			if (Main.wallFrameCounter[num] >= 5)
			{
				Main.wallFrameCounter[num] = 0;
				byte[] array10 = Main.wallFrame;
				int num14 = num;
				array10[num14] += 1;
				if (Main.wallFrame[num] > 1)
				{
					Main.wallFrame[num] = 0;
				}
			}
			byte[] array11 = Main.wallFrameCounter;
			int num15 = 172;
			array11[num15] += 1;
			if (Main.wallFrameCounter[172] >= 10)
			{
				Main.wallFrameCounter[172] = 0;
				byte[] array12 = Main.wallFrame;
				int num16 = 172;
				array12[num16] += 1;
				if (Main.wallFrame[172] > 7)
				{
					Main.wallFrame[172] = 0;
				}
			}
			byte[] array13 = Main.wallFrameCounter;
			int num17 = 168;
			array13[num17] += 1;
			if (Main.wallFrameCounter[168] >= 5)
			{
				Main.wallFrameCounter[168] = 0;
				byte[] array14 = Main.wallFrame;
				int num18 = 168;
				array14[num18] += 1;
				if (Main.wallFrame[168] > 7)
				{
					Main.wallFrame[168] = 0;
				}
			}
			byte[] array15 = Main.wallFrameCounter;
			int num19 = 169;
			array15[num19] += 1;
			if (Main.wallFrameCounter[169] >= 5)
			{
				Main.wallFrameCounter[169] = 0;
				byte[] array16 = Main.wallFrame;
				int num20 = 169;
				array16[num20] += 1;
				if (Main.wallFrame[169] > 7)
				{
					Main.wallFrame[169] = 0;
				}
			}
			int num2 = 20;
			byte[] array17 = Main.wallFrameCounter;
			int num21 = 242;
			byte b = array17[num21] + 1;
			array17[num21] = b;
			if ((int)b >= num2 * 8)
			{
				Main.wallFrameCounter[242] = 0;
			}
			byte[] array18 = Main.wallFrameCounter;
			int num22 = 243;
			b = array18[num22] + 1;
			array18[num22] = b;
			if ((int)b >= num2 * 8)
			{
				Main.wallFrameCounter[243] = 0;
			}
			WallLoader.AnimateWalls();
			byte[] array19 = Main.wallFrameCounter;
			int num23 = 144;
			array19[num23] += 1;
			int num3 = 5;
			int num4 = 10;
			if ((int)Main.wallFrameCounter[144] < num3)
			{
				Main.wallFrame[144] = 0;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3)
			{
				Main.wallFrame[144] = 1;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 2)
			{
				Main.wallFrame[144] = 2;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 3)
			{
				Main.wallFrame[144] = 3;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 4)
			{
				Main.wallFrame[144] = 4;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 5)
			{
				Main.wallFrame[144] = 5;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 6)
			{
				Main.wallFrame[144] = 6;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * 7)
			{
				Main.wallFrame[144] = 7;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (8 + num4))
			{
				Main.wallFrame[144] = 8;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (9 + num4))
			{
				Main.wallFrame[144] = 7;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (10 + num4))
			{
				Main.wallFrame[144] = 6;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (11 + num4))
			{
				Main.wallFrame[144] = 5;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (12 + num4))
			{
				Main.wallFrame[144] = 4;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (13 + num4))
			{
				Main.wallFrame[144] = 3;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (14 + num4))
			{
				Main.wallFrame[144] = 2;
				return;
			}
			if ((int)Main.wallFrameCounter[144] < num3 * (15 + num4))
			{
				Main.wallFrame[144] = 1;
				return;
			}
			Main.wallFrame[144] = 0;
			if ((int)Main.wallFrameCounter[144] > num3 * (16 + num4 * 2))
			{
				Main.wallFrameCounter[144] = 0;
			}
		}

		// Token: 0x06000456 RID: 1110 RVA: 0x000B26DC File Offset: 0x000B08DC
		private void DoUpdate_AnimateWaterfalls()
		{
			Main.wFrCounter += Main.windSpeedCurrent * 2f;
			if (Main.wFrCounter > 4f)
			{
				Main.wFrCounter = 0f;
				Main.wFrame += 1f;
			}
			if (Main.wFrCounter < 0f)
			{
				Main.wFrCounter = 4f;
				Main.wFrame -= 1f;
			}
			if (Main.wFrame > 16f)
			{
				Main.wFrame = 1f;
			}
			if (Main.wFrame < 1f)
			{
				Main.wFrame = 16f;
			}
			this.waterfallManager.UpdateFrame();
		}

		// Token: 0x06000457 RID: 1111 RVA: 0x000B2784 File Offset: 0x000B0984
		private static void DoUpdate_AnimateVisualPlayerAura()
		{
			if (Main.gFadeDir == 1)
			{
				Main.gFader += 0.1f;
				Main.gFade = (byte)Main.gFader;
				if (Main.gFade > 150)
				{
					Main.gFadeDir = 0;
					return;
				}
			}
			else
			{
				Main.gFader -= 0.1f;
				Main.gFade = (byte)Main.gFader;
				if (Main.gFade < 100)
				{
					Main.gFadeDir = 1;
				}
			}
		}

		// Token: 0x06000458 RID: 1112 RVA: 0x000B27F4 File Offset: 0x000B09F4
		private void DoUpdate_AnimateDiscoRGB()
		{
			int num = 7;
			if (this.DiscoStyle == 0)
			{
				Main.DiscoG += num;
				if (Main.DiscoG >= 255)
				{
					Main.DiscoG = 255;
					this.DiscoStyle++;
				}
			}
			if (this.DiscoStyle == 1)
			{
				Main.DiscoR -= num;
				if (Main.DiscoR <= 0)
				{
					Main.DiscoR = 0;
					this.DiscoStyle++;
				}
			}
			if (this.DiscoStyle == 2)
			{
				Main.DiscoB += num;
				if (Main.DiscoB >= 255)
				{
					Main.DiscoB = 255;
					this.DiscoStyle++;
				}
			}
			if (this.DiscoStyle == 3)
			{
				Main.DiscoG -= num;
				if (Main.DiscoG <= 0)
				{
					Main.DiscoG = 0;
					this.DiscoStyle++;
				}
			}
			if (this.DiscoStyle == 4)
			{
				Main.DiscoR += num;
				if (Main.DiscoR >= 255)
				{
					Main.DiscoR = 255;
					this.DiscoStyle++;
				}
			}
			if (this.DiscoStyle == 5)
			{
				Main.DiscoB -= num;
				if (Main.DiscoB <= 0)
				{
					Main.DiscoB = 0;
					this.DiscoStyle = 0;
				}
			}
		}

		// Token: 0x06000459 RID: 1113 RVA: 0x000B2939 File Offset: 0x000B0B39
		private static void DoUpdate_AnimateBackgrounds()
		{
			Main.DoUpdate_AnimateBackgrounds_UpdateForest(0, Main.treeMntBGSet1);
			Main.DoUpdate_AnimateBackgrounds_UpdateForest(10, Main.treeMntBGSet2);
			Main.DoUpdate_AnimateBackgrounds_UpdateForest(11, Main.treeMntBGSet3);
			Main.DoUpdate_AnimateBackgrounds_UpdateForest(12, Main.treeMntBGSet4);
		}

		// Token: 0x0600045A RID: 1114 RVA: 0x000B296C File Offset: 0x000B0B6C
		private static void DoUpdate_AnimateBackgrounds_UpdateForest(int bgIndex, int[] bgSet)
		{
			if (bgSet[1] == 94 || (bgSet[1] >= 114 && bgSet[1] <= 116))
			{
				Main.bgFrameCounter[bgIndex]++;
				if (Main.bgFrameCounter[bgIndex] >= 6)
				{
					Main.bgFrameCounter[bgIndex] = 0;
					Main.bgFrame[bgIndex]++;
					if (Main.bgFrame[bgIndex] >= 4)
					{
						Main.bgFrame[bgIndex] = 0;
					}
				}
				if (Main.bgFrame[bgIndex] == 0)
				{
					bgSet[1] = 94;
				}
				else if (Main.bgFrame[bgIndex] == 1)
				{
					bgSet[1] = 114;
				}
				else if (Main.bgFrame[bgIndex] == 2)
				{
					bgSet[1] = 115;
				}
				else
				{
					bgSet[1] = 116;
				}
				if (Main.bgFrame[bgIndex] == 0)
				{
					bgSet[0] = 93;
				}
				else if (Main.bgFrame[bgIndex] == 1)
				{
					bgSet[0] = 168;
				}
				else if (Main.bgFrame[bgIndex] == 2)
				{
					bgSet[0] = 169;
				}
				else
				{
					bgSet[0] = 170;
				}
			}
			if (bgSet[1] < 180 || bgSet[1] > 183)
			{
				return;
			}
			Main.bgFrameCounter[bgIndex]++;
			if (Main.bgFrameCounter[bgIndex] >= 6)
			{
				Main.bgFrameCounter[bgIndex] = 0;
				Main.bgFrame[bgIndex]++;
				if (Main.bgFrame[bgIndex] >= 4)
				{
					Main.bgFrame[bgIndex] = 0;
				}
			}
			if (Main.bgFrame[bgIndex] == 0)
			{
				bgSet[1] = 180;
				return;
			}
			if (Main.bgFrame[bgIndex] == 1)
			{
				bgSet[1] = 181;
				return;
			}
			if (Main.bgFrame[bgIndex] == 2)
			{
				bgSet[1] = 182;
				return;
			}
			bgSet[1] = 183;
		}

		// Token: 0x0600045B RID: 1115 RVA: 0x000B2AE8 File Offset: 0x000B0CE8
		private static void DoUpdate_AutoSave()
		{
			if (!Main.gameMenu && Main.netMode == 1)
			{
				if (!Main.saveTime.IsRunning)
				{
					Main.saveTime.Start();
				}
				if (Main.saveTime.ElapsedMilliseconds > 300000L)
				{
					Main.saveTime.Reset();
					WorldGen.saveToonWhilePlaying();
					return;
				}
			}
			else if (!Main.gameMenu && (Main.autoSave || Main.netMode == 2))
			{
				if (!Main.saveTime.IsRunning)
				{
					Main.saveTime.Start();
				}
				if (Main.saveTime.ElapsedMilliseconds > 600000L)
				{
					Main.saveTime.Reset();
					if (Main.netMode != 2)
					{
						WorldGen.saveToonWhilePlaying();
					}
					WorldGen.saveAndPlay();
					return;
				}
			}
			else if (Main.saveTime.IsRunning)
			{
				Main.saveTime.Stop();
			}
		}

		// Token: 0x0600045C RID: 1116 RVA: 0x000B2BB0 File Offset: 0x000B0DB0
		private static void UpdateSettingUnlocks()
		{
			if (Main.netMode != 2 && !Main.dedServ && Main.hardMode && !Main.SettingsUnlock_WorldEvil)
			{
				Main.SettingsUnlock_WorldEvil = true;
				Main.SaveSettings();
			}
		}

		// Token: 0x0600045D RID: 1117 RVA: 0x000B2BDC File Offset: 0x000B0DDC
		public static void InputTextSign()
		{
			if (!IngameFancyUI.CanShowVirtualKeyboard(1) || UIVirtualKeyboard.KeyboardContext != 1)
			{
				PlayerInput.WritingText = true;
				Main.instance.HandleIME();
				Main.npcChatText = Main.GetInputText(Main.npcChatText, true);
				if (Main.inputTextEnter)
				{
					byte[] bytes = new byte[]
					{
						10
					};
					Main.npcChatText += Encoding.ASCII.GetString(bytes);
					return;
				}
				if (Main.inputTextEscape)
				{
					Main.InputTextSignCancel();
				}
			}
		}

		// Token: 0x0600045E RID: 1118 RVA: 0x000B2C54 File Offset: 0x000B0E54
		public static void InputTextChest()
		{
			if (!IngameFancyUI.CanShowVirtualKeyboard(2) || UIVirtualKeyboard.KeyboardContext != 2)
			{
				Main.npcChatText = Main.GetInputText(Main.npcChatText, false);
				if (Main.inputTextEnter)
				{
					ChestUI.RenameChestSubmit(Main.player[Main.myPlayer]);
					return;
				}
				if (Main.inputTextEscape)
				{
					ChestUI.RenameChestCancel();
				}
			}
		}

		// Token: 0x0600045F RID: 1119 RVA: 0x000B2CA8 File Offset: 0x000B0EA8
		public static void InputTextSignCancel()
		{
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			Main.editSign = false;
			Main.blockKey = 27.ToString();
			UIVirtualKeyboard.CacheCanceledInput(1);
			if (Main.player[Main.myPlayer].sign >= 0)
			{
				Main.npcChatText = Main.sign[Main.player[Main.myPlayer].sign].text;
			}
		}

		// Token: 0x06000460 RID: 1120 RVA: 0x000B2D20 File Offset: 0x000B0F20
		private static void UpdateMenu()
		{
			if (WorldGen.drunkWorldGen)
			{
				if (WorldGen.remixWorldGen)
				{
					Main.screenPosition.X = Main.screenPosition.X - 20f;
				}
				if (WorldGen.drunkWorldGenText)
				{
					Main.numClouds = Main.rand.Next(100, 200);
					Main.statusText = string.Concat(Main.rand.Next(999999999));
					for (int i = 0; i < 3; i++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Main.statusText += Main.rand.Next(999999999).ToString();
						}
					}
				}
			}
			Main.gamePaused = false;
			Main.thunderDelay = 0;
			Main.lightning = 0f;
			Main.lightningSpeed = 0f;
			Main.GraveyardVisualIntensity = 0f;
			InGameNotificationsTracker.Clear();
			Main.playerInventory = false;
			Main.exitScale = 0.8f;
			if (Main.netMode == 0)
			{
				if (Main.instance.IsActive && Main.hasFocus && (!Main.dayTime || WorldGen.remixWorldGen) && (Main.rand.Next(12) == 0 || (WorldGen.drunkWorldGen && !Main.remixWorld)))
				{
					int num = Main.rand.Next(Main.numStars);
					if (Main.star[num] != null && !Main.star[num].hidden && !Main.star[num].falling)
					{
						Main.star[num].Fall();
					}
				}
				if (Main.gameMenu)
				{
					if (WorldGen.gen)
					{
						Main.lockMenuBGChange = true;
					}
					else if (Main.menuMode == 0)
					{
						Main.lockMenuBGChange = false;
					}
					if (!Main.lockMenuBGChange)
					{
						if (Main.dayTime)
						{
							Main.menuBGChangedDay = false;
						}
						else if (!Main.menuBGChangedDay && Main.time >= 16200.0)
						{
							Main.menuBGChangedDay = true;
							int style = WorldGen.corruptBG;
							WorldGen.RandomizeBackgrounds(Main.rand);
							if (Main.treeBGSet1[0] == 173)
							{
								WorldGen.RandomizeBackgrounds(Main.rand);
							}
							if (Main.treeBGSet1[0] == 173)
							{
								WorldGen.RandomizeBackgrounds(Main.rand);
							}
							WorldGen.setBG(1, style);
						}
						if (!Main.dayTime)
						{
							Main.menuBGChangedNight = false;
						}
						else if (!Main.menuBGChangedNight && Main.time >= 27000.0)
						{
							Main.moonType = Main.rand.Next(9);
							Main.menuBGChangedNight = true;
							int treeBG = WorldGen.treeBG1;
							WorldGen.RandomizeBackgrounds(Main.rand);
							WorldGen.setBG(0, treeBG);
						}
					}
					else
					{
						Main.menuBGChangedDay = true;
						Main.menuBGChangedNight = true;
					}
				}
				if (Main.alreadyGrabbingSunOrMoon)
				{
					return;
				}
				if (WorldGen.drunkWorldGen && !WorldGen.remixWorldGen)
				{
					Main.time -= 6.0;
					if (Main.dayTime)
					{
						Main.time -= 1000.0;
					}
					if (Main.time < 0.0)
					{
						Main.time = 32400.0;
						Main.dayTime = false;
					}
				}
				else if (Main.dayTime)
				{
					Main.time += 33.88235294117647;
				}
				else
				{
					Main.time += 30.857142857142858;
				}
				if (!Main.dayTime)
				{
					if (Main.time > 32400.0)
					{
						Main.bloodMoon = false;
						Main.time = 0.0;
						Main.dayTime = true;
						if (Main.starGame)
						{
							Main.dayTime = false;
						}
						Main.moonPhase++;
						if (Main.moonPhase >= 7)
						{
							Main.moonPhase = 0;
							return;
						}
					}
				}
				else if (Main.time > 54000.0)
				{
					Main.time = 0.0;
					Main.dayTime = false;
					return;
				}
			}
			else if (Main.netMode == 1)
			{
				Main.UpdateTime();
			}
		}

		/// <summary> Clears text input from any keys pressed since the last time <see cref="M:Terraria.Main.GetInputText(System.String,System.Boolean)" /> was called. Call when activating a menu with text input or focusing an element with text input to prevent keys pressed beforehand to be immediately captured as input. </summary>
		// Token: 0x06000461 RID: 1121 RVA: 0x000B30C2 File Offset: 0x000B12C2
		public static void clrInput()
		{
			Main.keyCount = 0;
			Main.inputTextEscape = false;
		}

		// Token: 0x06000462 RID: 1122
		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern short GetKeyState(int keyCode);

		// Token: 0x06000463 RID: 1123 RVA: 0x000B30D0 File Offset: 0x000B12D0
		public static string GetInputText(string oldString, bool allowMultiLine = false)
		{
			if (Main.dedServ)
			{
				return "";
			}
			if (!Main.hasFocus)
			{
				return oldString;
			}
			Main.inputTextEnter = false;
			Main.inputTextEscape = false;
			string text = oldString;
			string text2 = "";
			if (text == null)
			{
				text = "";
			}
			bool flag = false;
			if ((Main.inputText.IsKeyDown(162) || Main.inputText.IsKeyDown(163)) && !Main.inputText.IsKeyDown(164) && !Main.inputText.IsKeyDown(165))
			{
				if (Main.inputText.IsKeyDown(90) && !Main.oldInputText.IsKeyDown(90))
				{
					text = "";
				}
				else if (Main.inputText.IsKeyDown(88) && !Main.oldInputText.IsKeyDown(88))
				{
					Platform.Get<IClipboard>().Value = oldString;
					text = "";
				}
				else if ((Main.inputText.IsKeyDown(67) && !Main.oldInputText.IsKeyDown(67)) || (Main.inputText.IsKeyDown(45) && !Main.oldInputText.IsKeyDown(45)))
				{
					Platform.Get<IClipboard>().Value = oldString;
				}
				else if (Main.inputText.IsKeyDown(86) && !Main.oldInputText.IsKeyDown(86))
				{
					text2 = Main.PasteTextIn(allowMultiLine, text2);
				}
			}
			else
			{
				if (Main.inputText.PressingShift())
				{
					if (Main.inputText.IsKeyDown(46) && !Main.oldInputText.IsKeyDown(46))
					{
						Platform.Get<IClipboard>().Value = oldString;
						text = "";
					}
					if (Main.inputText.IsKeyDown(45) && !Main.oldInputText.IsKeyDown(45))
					{
						text2 = Main.PasteTextIn(allowMultiLine, text2);
					}
				}
				if (!Platform.IsWindows && Main.inputText.IsKeyDown(27) && !Main.oldInputText.IsKeyDown(27))
				{
					Main.inputTextEscape = true;
				}
				for (int i = 0; i < Main.keyCount; i++)
				{
					int num = Main.keyInt[i];
					string text3 = Main.keyString[i];
					if (num == 13)
					{
						Main.inputTextEnter = true;
					}
					else if (num == 27)
					{
						Main.inputTextEscape = true;
					}
					else if (num >= 32 && num != 127)
					{
						text2 += text3;
					}
				}
			}
			Main.keyCount = 0;
			text += text2;
			Main.oldInputText = Main.inputText;
			Main.inputText = Keyboard.GetState();
			Keys[] pressedKeys = Main.inputText.GetPressedKeys();
			Keys[] pressedKeys2 = Main.oldInputText.GetPressedKeys();
			if (Main.inputText.IsKeyDown(8) && Main.oldInputText.IsKeyDown(8))
			{
				Main.backSpaceRate -= 0.05f;
				if (Main.backSpaceRate < 0f)
				{
					Main.backSpaceRate = 0f;
				}
				if (Main.backSpaceCount <= 0)
				{
					Main.backSpaceCount = (int)Math.Round((double)Main.backSpaceRate);
					flag = true;
				}
				Main.backSpaceCount--;
			}
			else
			{
				Main.backSpaceRate = 7f;
				Main.backSpaceCount = 15;
			}
			for (int j = 0; j < pressedKeys.Length; j++)
			{
				bool flag2 = true;
				for (int k = 0; k < pressedKeys2.Length; k++)
				{
					if (pressedKeys[j] == pressedKeys2[k])
					{
						flag2 = false;
					}
				}
				if (string.Concat(pressedKeys[j]) == "Back" && (flag2 || flag) && text.Length > 0)
				{
					TextSnippet[] array = ChatManager.ParseMessage(text, Color.White).ToArray();
					text = ((!array[array.Length - 1].DeleteWhole) ? text.Substring(0, text.Length - 1) : text.Substring(0, text.Length - array[array.Length - 1].TextOriginal.Length));
				}
			}
			return text;
		}

		// Token: 0x06000464 RID: 1124 RVA: 0x000B347C File Offset: 0x000B167C
		private static string PasteTextIn(bool allowMultiLine, string newKeys)
		{
			newKeys = ((!allowMultiLine) ? (newKeys + Platform.Get<IClipboard>().Value) : (newKeys + Platform.Get<IClipboard>().MultiLineValue));
			return newKeys;
		}

		// Token: 0x06000465 RID: 1125 RVA: 0x000B34A6 File Offset: 0x000B16A6
		public void MouseTextHackZoom(string text, string buffTooltip = null)
		{
			this.MouseTextHackZoom(text, 0, 0, buffTooltip);
		}

		// Token: 0x06000466 RID: 1126 RVA: 0x000B34B4 File Offset: 0x000B16B4
		public void MouseTextHackZoom(string text, int itemRarity, byte diff = 0, string buffTooltip = null)
		{
			this.MouseText(text, buffTooltip, itemRarity, diff, -1, -1, -1, -1, 0, false);
		}

		// Token: 0x06000467 RID: 1127 RVA: 0x000B34D4 File Offset: 0x000B16D4
		public void MouseTextNoOverride(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
		{
			this.MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX, true);
		}

		/// <summary>
		/// Sets the tooltip text to be drawn next to the cursor. If used in conjunction with <see cref="F:Terraria.Main.HoverItem" />, an item tooltip will be shown, otherwise the text will be drawn as is with no background box. Similar to <see cref="F:Terraria.Main.hoverItemName" /> except it will still show if an item is held on the mouse.
		/// <para /> Use <see cref="M:Terraria.ModLoader.UI.UICommon.TooltipMouseText(System.String)" /> instead to draw a non-item tooltip with the hover text background boxes, if that setting is not disabled by the user.
		/// </summary>
		// Token: 0x06000468 RID: 1128 RVA: 0x000B34F8 File Offset: 0x000B16F8
		public void MouseText(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
		{
			this.MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX, false);
		}

		/// <inheritdoc cref="M:Terraria.Main.MouseText(System.String,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
		// Token: 0x06000469 RID: 1129 RVA: 0x000B351C File Offset: 0x000B171C
		public void MouseText(string cursorText, string buffTooltip, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0, bool noOverride = false)
		{
			if (!this._mouseTextCache.noOverride)
			{
				this._mouseTextCache = new Main.MouseTextCache
				{
					noOverride = noOverride,
					isValid = true,
					cursorText = cursorText,
					rare = rare,
					diff = diff,
					X = hackedMouseX,
					Y = hackedMouseY,
					hackedScreenWidth = hackedScreenWidth,
					hackedScreenHeight = hackedScreenHeight,
					buffTooltip = buffTooltip
				};
			}
		}

		// Token: 0x0600046A RID: 1130 RVA: 0x000B359C File Offset: 0x000B179C
		private void MouseTextInner(Main.MouseTextCache info)
		{
			string cursorText = info.cursorText;
			int num = info.rare;
			byte diff = info.diff;
			int x = info.X;
			int y = info.Y;
			int hackedScreenWidth = info.hackedScreenWidth;
			int hackedScreenHeight = info.hackedScreenHeight;
			if (this.mouseNPCType > -1 || cursorText == null)
			{
				return;
			}
			int X = Main.mouseX + 14;
			int Y = Main.mouseY + 14;
			if (x != -1 && y != -1)
			{
				X = x + 10;
				Y = y + 10;
			}
			if (Main.ThickMouse)
			{
				X += 6;
				Y += 6;
			}
			if (!Main.mouseItem.IsAir)
			{
				X += 34;
			}
			new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			Vector2 vector = ChatManager.GetStringSize(FontAssets.MouseText.Value, cursorText, Vector2.One, -1f);
			if (Main.HoverItem.type > 0)
			{
				this.MouseText_DrawItemTooltip(info, num, diff, X, Y);
				return;
			}
			if (info.buffTooltip != null && info.buffTooltip != "")
			{
				this.MouseText_DrawBuffTooltip(info.buffTooltip, ref X, ref Y, (int)vector.Y);
			}
			if (hackedScreenHeight != -1 && hackedScreenWidth != -1)
			{
				if ((float)X + vector.X + 4f > (float)hackedScreenWidth)
				{
					X = (int)((float)hackedScreenWidth - vector.X - 4f);
				}
				if ((float)Y + vector.Y + 4f > (float)hackedScreenHeight)
				{
					Y = (int)((float)hackedScreenHeight - vector.Y - 4f);
				}
			}
			else
			{
				if ((float)X + vector.X + 4f > (float)Main.screenWidth)
				{
					X = (int)((float)Main.screenWidth - vector.X - 4f);
				}
				if ((float)Y + vector.Y + 4f > (float)Main.screenHeight)
				{
					Y = (int)((float)Main.screenHeight - vector.Y - 4f);
				}
			}
			float num2 = (float)Main.mouseTextColor / 255f;
			Color baseColor;
			baseColor..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			if (num == -11)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(175f * num2)), (int)((byte)(0f * num2)), (int)Main.mouseTextColor);
			}
			if (num == -10)
			{
				baseColor..ctor((int)((byte)(65f * num2)), (int)((byte)(255f * num2)), (int)((byte)(110f * num2)), (int)Main.mouseTextColor);
			}
			if (num == -1)
			{
				baseColor..ctor((int)((byte)(130f * num2)), (int)((byte)(130f * num2)), (int)((byte)(130f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 1)
			{
				baseColor..ctor((int)((byte)(150f * num2)), (int)((byte)(150f * num2)), (int)((byte)(255f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 2)
			{
				baseColor..ctor((int)((byte)(150f * num2)), (int)((byte)(255f * num2)), (int)((byte)(150f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 3)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(200f * num2)), (int)((byte)(150f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 4)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(150f * num2)), (int)((byte)(150f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 5)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(150f * num2)), (int)((byte)(255f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 6)
			{
				baseColor..ctor((int)((byte)(210f * num2)), (int)((byte)(160f * num2)), (int)((byte)(255f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 7)
			{
				baseColor..ctor((int)((byte)(150f * num2)), (int)((byte)(255f * num2)), (int)((byte)(10f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 8)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(255f * num2)), (int)((byte)(10f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 9)
			{
				baseColor..ctor((int)((byte)(5f * num2)), (int)((byte)(200f * num2)), (int)((byte)(255f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 10)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(40f * num2)), (int)((byte)(100f * num2)), (int)Main.mouseTextColor);
			}
			if (num == 11)
			{
				baseColor..ctor((int)((byte)(180f * num2)), (int)((byte)(40f * num2)), (int)((byte)(255f * num2)), (int)Main.mouseTextColor);
			}
			if (num > 11)
			{
				baseColor = RarityLoader.GetRarity(num).RarityColor * num2;
			}
			if (Main.HoverItem.expert || num == -12)
			{
				baseColor..ctor((int)((byte)((float)Main.DiscoR * num2)), (int)((byte)((float)Main.DiscoG * num2)), (int)((byte)((float)Main.DiscoB * num2)), (int)Main.mouseTextColor);
			}
			if (Main.HoverItem.master || num == -13)
			{
				baseColor..ctor((int)((byte)(255f * num2)), (int)((byte)(Main.masterColor * 200f * num2)), 0, (int)Main.mouseTextColor);
			}
			if (diff == 1)
			{
				baseColor..ctor((int)((byte)((float)Main.mcColor.R * num2)), (int)((byte)((float)Main.mcColor.G * num2)), (int)((byte)((float)Main.mcColor.B * num2)), (int)Main.mouseTextColor);
			}
			if (diff == 2)
			{
				baseColor..ctor((int)((byte)((float)Main.hcColor.R * num2)), (int)((byte)((float)Main.hcColor.G * num2)), (int)((byte)((float)Main.hcColor.B * num2)), (int)Main.mouseTextColor);
			}
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, cursorText, new Vector2((float)X, (float)Y), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
		}

		// Token: 0x0600046B RID: 1131 RVA: 0x000B3B48 File Offset: 0x000B1D48
		private void MouseText_DrawItemTooltip(Main.MouseTextCache info, int rare, byte diff, int X, int Y)
		{
			bool settingsEnabled_OpaqueBoxBehindTooltips = Main.SettingsEnabled_OpaqueBoxBehindTooltips;
			Color color;
			color..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			Item hoverItem = Main.HoverItem;
			int yoyoLogo = -1;
			int researchLine = -1;
			rare = hoverItem.rare;
			float knockBack = hoverItem.knockBack;
			float num = 1f;
			if (hoverItem.melee && Main.player[Main.myPlayer].kbGlove)
			{
				num += 1f;
			}
			if (Main.player[Main.myPlayer].kbBuff)
			{
				num += 0.5f;
			}
			if (num != 1f)
			{
				hoverItem.knockBack *= num;
			}
			if (hoverItem.ranged && Main.player[Main.myPlayer].shroomiteStealth)
			{
				hoverItem.knockBack *= 1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f;
			}
			int num2 = 30;
			int numLines = 1;
			string[] array = new string[num2];
			bool[] array2 = new bool[num2];
			bool[] array3 = new bool[num2];
			for (int m = 0; m < num2; m++)
			{
				array2[m] = false;
				array3[m] = false;
			}
			string[] tooltipNames = new string[num2];
			int prefixlineIndex;
			Main.MouseText_DrawItemTooltip_GetLinesInfo(hoverItem, ref yoyoLogo, ref researchLine, knockBack, ref numLines, array, array2, array3, tooltipNames, out prefixlineIndex);
			float num3 = (float)Main.mouseTextColor / 255f;
			float num4 = num3;
			int a = (int)Main.mouseTextColor;
			if (Main.npcShop > 0 && hoverItem.value >= 0 && (hoverItem.type < 71 || hoverItem.type > 74))
			{
				long calcForSelling;
				long calcForBuying;
				Main.LocalPlayer.GetItemExpectedPrice(hoverItem, out calcForSelling, out calcForBuying);
				long num5 = (hoverItem.isAShopItem || hoverItem.buyOnce) ? calcForBuying : calcForSelling;
				if (hoverItem.shopSpecialCurrency != -1)
				{
					tooltipNames[numLines] = "SpecialPrice";
					CustomCurrencyManager.GetPriceText(hoverItem.shopSpecialCurrency, array, ref numLines, num5);
					color..ctor((int)((byte)(255f * num4)), (int)((byte)(255f * num4)), (int)((byte)(255f * num4)), a);
				}
				else if (num5 > 0L)
				{
					string text = "";
					long num6 = 0L;
					long num7 = 0L;
					long num8 = 0L;
					long num9 = 0L;
					long num10 = num5 * (long)hoverItem.stack;
					if (!hoverItem.buy)
					{
						num10 = num5 / 5L;
						if (num10 < 1L)
						{
							num10 = 1L;
						}
						long num11 = num10;
						num10 *= (long)hoverItem.stack;
						int amount = Main.shopSellbackHelper.GetAmount(hoverItem);
						if (amount > 0)
						{
							num10 += (-num11 + calcForBuying) * (long)Math.Min(amount, hoverItem.stack);
						}
					}
					if (num10 < 1L)
					{
						num10 = 1L;
					}
					if (num10 >= 1000000L)
					{
						num6 = num10 / 1000000L;
						num10 -= num6 * 1000000L;
					}
					if (num10 >= 10000L)
					{
						num7 = num10 / 10000L;
						num10 -= num7 * 10000L;
					}
					if (num10 >= 100L)
					{
						num8 = num10 / 100L;
						num10 -= num8 * 100L;
					}
					if (num10 >= 1L)
					{
						num9 = num10;
					}
					if (num6 > 0L)
					{
						text = string.Concat(new string[]
						{
							text,
							num6.ToString(),
							" ",
							Lang.inter[15].Value,
							" "
						});
					}
					if (num7 > 0L)
					{
						text = string.Concat(new string[]
						{
							text,
							num7.ToString(),
							" ",
							Lang.inter[16].Value,
							" "
						});
					}
					if (num8 > 0L)
					{
						text = string.Concat(new string[]
						{
							text,
							num8.ToString(),
							" ",
							Lang.inter[17].Value,
							" "
						});
					}
					if (num9 > 0L)
					{
						text = string.Concat(new string[]
						{
							text,
							num9.ToString(),
							" ",
							Lang.inter[18].Value,
							" "
						});
					}
					if (!hoverItem.buy)
					{
						array[numLines] = Lang.tip[49].Value + " " + text;
					}
					else
					{
						array[numLines] = Lang.tip[50].Value + " " + text;
					}
					tooltipNames[numLines] = "Price";
					numLines++;
					if (num6 > 0L)
					{
						color..ctor((int)((byte)(220f * num4)), (int)((byte)(220f * num4)), (int)((byte)(198f * num4)), a);
					}
					else if (num7 > 0L)
					{
						color..ctor((int)((byte)(224f * num4)), (int)((byte)(201f * num4)), (int)((byte)(92f * num4)), a);
					}
					else if (num8 > 0L)
					{
						color..ctor((int)((byte)(181f * num4)), (int)((byte)(192f * num4)), (int)((byte)(193f * num4)), a);
					}
					else if (num9 > 0L)
					{
						color..ctor((int)((byte)(246f * num4)), (int)((byte)(138f * num4)), (int)((byte)(96f * num4)), a);
					}
				}
				else if (hoverItem.type != 3817)
				{
					array[numLines] = Lang.tip[51].Value;
					tooltipNames[numLines] = "Price";
					numLines++;
					color..ctor((int)((byte)(120f * num4)), (int)((byte)(120f * num4)), (int)((byte)(120f * num4)), a);
				}
			}
			Vector2 zero = Vector2.Zero;
			Color?[] overrideColor;
			List<TooltipLine> lines = ItemLoader.ModifyTooltips(Main.HoverItem, ref numLines, tooltipNames, ref array, ref array2, ref array3, ref yoyoLogo, out overrideColor, prefixlineIndex);
			List<DrawableTooltipLine> drawableLines = lines.Select((TooltipLine x, int i) => new DrawableTooltipLine(x, i, 0, 0, Color.White)).ToList<DrawableTooltipLine>();
			int num12 = 0;
			for (int j = 0; j < numLines; j++)
			{
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array[j], Vector2.One, -1f);
				if (stringSize.X > zero.X)
				{
					zero.X = stringSize.X;
				}
				zero.Y += stringSize.Y + (float)num12;
			}
			if (yoyoLogo != -1)
			{
				zero.Y += 24f;
			}
			X += Main.toolTipDistance;
			Y += Main.toolTipDistance;
			int num13 = 4;
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				X += 8;
				Y += 2;
				num13 = 18;
			}
			int num14 = Main.screenWidth;
			int num15 = Main.screenHeight;
			if ((float)X + zero.X + (float)num13 > (float)num14)
			{
				X = (int)((float)num14 - zero.X - (float)num13);
			}
			if ((float)Y + zero.Y + (float)num13 > (float)num15)
			{
				Y = (int)((float)num15 - zero.Y - (float)num13);
			}
			int num16 = 0;
			num3 = (float)Main.mouseTextColor / 255f;
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				num3 = MathHelper.Lerp(num3, 1f, 1f);
				int num17 = 14;
				int num18 = 9;
				Utils.DrawInvBG(Main.spriteBatch, new Rectangle(X - num17, Y - num18, (int)zero.X + num17 * 2, (int)zero.Y + num18 + num18 / 2), new Color(23, 25, 81, 255) * 0.925f);
			}
			bool globalCanDraw = ItemLoader.PreDrawTooltip(Main.HoverItem, lines.AsReadOnly(), ref X, ref Y);
			for (int k = 0; k < numLines; k++)
			{
				drawableLines[k].OriginalX = X;
				drawableLines[k].OriginalY = Y + num16;
				if (drawableLines[k].Mod == "Terraria" && drawableLines[k].Name == "OneDropLogo")
				{
					float num19 = 1f;
					int num20 = (int)((float)Main.mouseTextColor * num19);
					Color color2 = Color.Black;
					drawableLines[k].Color = new Color(num20, num20, num20, num20);
					if (ItemLoader.PreDrawTooltipLine(Main.HoverItem, drawableLines[k], ref num12) && globalCanDraw)
					{
						for (int l = 0; l < 5; l++)
						{
							int num21 = drawableLines[k].X;
							int num22 = drawableLines[k].Y;
							if (l == 4)
							{
								color2..ctor(num20, num20, num20, num20);
							}
							switch (l)
							{
							case 0:
								num21--;
								break;
							case 1:
								num21++;
								break;
							case 2:
								num22--;
								break;
							case 3:
								num22++;
								break;
							}
							Color drawColor2 = drawableLines[k].OverrideColor ?? drawableLines[k].Color;
							Main.spriteBatch.Draw(TextureAssets.OneDropLogo.Value, new Vector2((float)num21, (float)num22), null, (l != 4) ? color2 : drawColor2, drawableLines[k].Rotation, drawableLines[k].Origin, (drawableLines[k].BaseScale.X + drawableLines[k].BaseScale.Y) / 2f, 0, 0f);
						}
					}
				}
				else
				{
					Color black = Color.Black;
					black..ctor(num4, num4, num4, num4);
					if (drawableLines[k].Mod == "Terraria" && drawableLines[k].Name == "ItemName")
					{
						if (rare == -11)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(175f * num4)), (int)((byte)(0f * num4)), a);
						}
						if (rare == -1)
						{
							black..ctor((int)((byte)(130f * num4)), (int)((byte)(130f * num4)), (int)((byte)(130f * num4)), a);
						}
						if (rare == 1)
						{
							black..ctor((int)((byte)(150f * num4)), (int)((byte)(150f * num4)), (int)((byte)(255f * num4)), a);
						}
						if (rare == 2)
						{
							black..ctor((int)((byte)(150f * num4)), (int)((byte)(255f * num4)), (int)((byte)(150f * num4)), a);
						}
						if (rare == 3)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(200f * num4)), (int)((byte)(150f * num4)), a);
						}
						if (rare == 4)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(150f * num4)), (int)((byte)(150f * num4)), a);
						}
						if (rare == 5)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(150f * num4)), (int)((byte)(255f * num4)), a);
						}
						if (rare == 6)
						{
							black..ctor((int)((byte)(210f * num4)), (int)((byte)(160f * num4)), (int)((byte)(255f * num4)), a);
						}
						if (rare == 7)
						{
							black..ctor((int)((byte)(150f * num4)), (int)((byte)(255f * num4)), (int)((byte)(10f * num4)), a);
						}
						if (rare == 8)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(255f * num4)), (int)((byte)(10f * num4)), a);
						}
						if (rare == 9)
						{
							black..ctor((int)((byte)(5f * num4)), (int)((byte)(200f * num4)), (int)((byte)(255f * num4)), a);
						}
						if (rare == 10)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(40f * num4)), (int)((byte)(100f * num4)), a);
						}
						if (rare == 11)
						{
							black..ctor((int)((byte)(180f * num4)), (int)((byte)(40f * num4)), (int)((byte)(255f * num4)), a);
						}
						if (rare > 11)
						{
							black = RarityLoader.GetRarity(rare).RarityColor * num4;
						}
						if (diff == 1)
						{
							black..ctor((int)((byte)((float)Main.mcColor.R * num4)), (int)((byte)((float)Main.mcColor.G * num4)), (int)((byte)((float)Main.mcColor.B * num4)), a);
						}
						if (diff == 2)
						{
							black..ctor((int)((byte)((float)Main.hcColor.R * num4)), (int)((byte)((float)Main.hcColor.G * num4)), (int)((byte)((float)Main.hcColor.B * num4)), a);
						}
						if (hoverItem.expert || rare == -12)
						{
							black..ctor((int)((byte)((float)Main.DiscoR * num4)), (int)((byte)((float)Main.DiscoG * num4)), (int)((byte)((float)Main.DiscoB * num4)), a);
						}
						if (hoverItem.master || rare == -13)
						{
							black..ctor((int)((byte)(255f * num4)), (int)((byte)(Main.masterColor * 200f * num4)), 0, a);
						}
					}
					else if (array2[k])
					{
						black = ((!array3[k]) ? new Color((int)((byte)(120f * num4)), (int)((byte)(190f * num4)), (int)((byte)(120f * num4)), a) : new Color((int)((byte)(190f * num4)), (int)((byte)(120f * num4)), (int)((byte)(120f * num4)), a));
					}
					else if (drawableLines[k].Mod == "Terraria" && drawableLines[k].Name == "Price")
					{
						black = color;
					}
					if (drawableLines[k].Mod == "Terraria" && drawableLines[k].Name == "JourneyResearch")
					{
						black = Colors.JourneyMode;
					}
					drawableLines[k].Color = black;
					Color realLineColor = black;
					if (overrideColor[k] != null)
					{
						realLineColor = overrideColor[k].Value * num4;
						drawableLines[k].OverrideColor = new Color?(realLineColor);
					}
					if (ItemLoader.PreDrawTooltipLine(Main.HoverItem, drawableLines[k], ref num12) && globalCanDraw)
					{
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, drawableLines[k].Font, drawableLines[k].Text, new Vector2((float)drawableLines[k].X, (float)drawableLines[k].Y), realLineColor, drawableLines[k].Rotation, drawableLines[k].Origin, drawableLines[k].BaseScale, drawableLines[k].MaxWidth, drawableLines[k].Spread);
					}
				}
				ItemLoader.PostDrawTooltipLine(Main.HoverItem, drawableLines[k]);
				num16 += (int)(FontAssets.MouseText.Value.MeasureString(drawableLines[k].Text).Y + (float)num12);
			}
			ItemLoader.PostDrawTooltip(Main.HoverItem, drawableLines.AsReadOnly());
		}

		// Token: 0x0600046C RID: 1132 RVA: 0x000B4A0C File Offset: 0x000B2C0C
		public static void MouseText_DrawItemTooltip_GetLinesInfo(Item item, ref int yoyoLogo, ref int researchLine, float oldKB, ref int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine, string[] toolTipNames, out int prefixlineIndex)
		{
			prefixlineIndex = -1;
			toolTipLine[0] = item.HoverName;
			toolTipNames[0] = "ItemName";
			if (item.favorited)
			{
				int j = numLines;
				numLines = j + 1;
				toolTipLine[j] = Lang.tip[56].Value;
				toolTipNames[numLines - 1] = "Favorite";
				j = numLines;
				numLines = j + 1;
				toolTipLine[j] = Lang.tip[57].Value;
				toolTipNames[numLines - 1] = "FavoriteDesc";
				if (Main.LocalPlayer.chest != -1)
				{
					bool flag;
					Item[] chestinv;
					ChestUI.GetContainerUsageInfo(out flag, out chestinv);
					if (ChestUI.IsBlockedFromTransferIntoChest(item, chestinv))
					{
						j = numLines;
						numLines = j + 1;
						toolTipLine[j] = Language.GetTextValue("UI.ItemCannotBePlacedInsideItself");
						toolTipNames[numLines - 1] = "NoTransfer";
					}
				}
			}
			if (item.social)
			{
				toolTipLine[numLines] = Lang.tip[0].Value;
				toolTipNames[numLines] = "Social";
				numLines++;
				toolTipLine[numLines] = Lang.tip[1].Value;
				toolTipNames[numLines] = "SocialDesc";
				numLines++;
			}
			else
			{
				if (item.damage > 0 && (!item.notAmmo || item.useStyle != 0) && (item.type < 71 || item.type > 74 || Main.player[Main.myPlayer].HasItem(905)) && item.DamageType.ShowStatTooltipLine(Main.player[Main.myPlayer], "Damage"))
				{
					LocalizedText tip;
					if (item.DamageType != null)
					{
						bool addLeadingSpace = !(item.DamageType is VanillaDamageClass);
						string key = "";
						string str = addLeadingSpace ? " " : "";
						LocalizedText displayName = item.DamageType.DisplayName;
						tip = new LocalizedText(key, str + ((displayName != null) ? displayName.ToString() : null));
					}
					else
					{
						tip = Lang.tip[55];
					}
					int damage = Main.player[Main.myPlayer].GetWeaponDamage(item, true);
					toolTipLine[numLines] = damage.ToString() + tip.Value;
					toolTipNames[numLines] = "Damage";
					numLines++;
					if (item.DamageType.UseStandardCritCalcs && item.DamageType.ShowStatTooltipLine(Main.player[Main.myPlayer], "CritChance"))
					{
						int crit = Main.player[Main.myPlayer].GetWeaponCrit(item);
						if (crit > 0)
						{
							toolTipLine[numLines] = crit.ToString() + Lang.tip[5].Value;
							toolTipNames[numLines] = "CritChance";
							numLines++;
						}
					}
					if (item.useStyle != 0 && item.DamageType.ShowStatTooltipLine(Main.player[Main.myPlayer], "Speed"))
					{
						if (item.useAnimation <= 8)
						{
							toolTipLine[numLines] = Lang.tip[6].Value;
						}
						else if (item.useAnimation <= 20)
						{
							toolTipLine[numLines] = Lang.tip[7].Value;
						}
						else if (item.useAnimation <= 25)
						{
							toolTipLine[numLines] = Lang.tip[8].Value;
						}
						else if (item.useAnimation <= 30)
						{
							toolTipLine[numLines] = Lang.tip[9].Value;
						}
						else if (item.useAnimation <= 35)
						{
							toolTipLine[numLines] = Lang.tip[10].Value;
						}
						else if (item.useAnimation <= 45)
						{
							toolTipLine[numLines] = Lang.tip[11].Value;
						}
						else if (item.useAnimation <= 55)
						{
							toolTipLine[numLines] = Lang.tip[12].Value;
						}
						else
						{
							toolTipLine[numLines] = Lang.tip[13].Value;
						}
						toolTipNames[numLines] = "Speed";
						numLines++;
						if (item.DamageType == DamageClass.MeleeNoSpeed || ItemID.Sets.BonusAttackSpeedMultiplier[item.type] == 0f)
						{
							if (ModLoader.attackSpeedScalingTooltipVisibility == 0)
							{
								toolTipLine[numLines] = Language.GetTextValue("tModLoader.NoAttackSpeedScaling");
								toolTipNames[numLines] = "NoSpeedScaling";
								numLines++;
							}
						}
						else if (ItemID.Sets.BonusAttackSpeedMultiplier[item.type] != 1f && ModLoader.attackSpeedScalingTooltipVisibility <= 1)
						{
							int attackSpeedScaling = (int)(ItemID.Sets.BonusAttackSpeedMultiplier[item.type] * 100f);
							toolTipLine[numLines] = Language.GetTextValue("tModLoader.SpecialAttackSpeedScaling", attackSpeedScaling);
							toolTipNames[numLines] = "SpecialSpeedScaling";
							numLines++;
						}
					}
					if (item.DamageType.ShowStatTooltipLine(Main.player[Main.myPlayer], "Knockback"))
					{
						float num6 = Main.player[Main.myPlayer].GetWeaponKnockback(item, item.knockBack);
						if (num6 == 0f)
						{
							toolTipLine[numLines] = Lang.tip[14].Value;
						}
						else if ((double)num6 <= 1.5)
						{
							toolTipLine[numLines] = Lang.tip[15].Value;
						}
						else if (num6 <= 3f)
						{
							toolTipLine[numLines] = Lang.tip[16].Value;
						}
						else if (num6 <= 4f)
						{
							toolTipLine[numLines] = Lang.tip[17].Value;
						}
						else if (num6 <= 6f)
						{
							toolTipLine[numLines] = Lang.tip[18].Value;
						}
						else if (num6 <= 7f)
						{
							toolTipLine[numLines] = Lang.tip[19].Value;
						}
						else if (num6 <= 9f)
						{
							toolTipLine[numLines] = Lang.tip[20].Value;
						}
						else if (num6 <= 11f)
						{
							toolTipLine[numLines] = Lang.tip[21].Value;
						}
						else
						{
							toolTipLine[numLines] = Lang.tip[22].Value;
						}
						toolTipNames[numLines] = "Knockback";
						numLines++;
					}
				}
				if (item.fishingPole > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("GameUI.PrecentFishingPower", item.fishingPole);
					toolTipNames[numLines] = "FishingPower";
					numLines++;
					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitRequired");
					toolTipNames[numLines] = "NeedsBait";
					numLines++;
				}
				if (item.bait > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitPower", item.bait);
					toolTipNames[numLines] = "BaitPower";
					numLines++;
				}
				if (item.headSlot > 0 || item.bodySlot > 0 || item.legSlot > 0 || item.accessory || Main.projHook[item.shoot] || item.mountType != -1 || (item.buffType > 0 && (Main.lightPet[item.buffType] || Main.vanityPet[item.buffType])))
				{
					if ((item.type == 854 || item.type == 3035) && Main.npcShop > 0)
					{
						toolTipLine[numLines] = Lang.tip[60].Value;
					}
					else
					{
						toolTipLine[numLines] = Lang.tip[23].Value;
					}
					toolTipNames[numLines] = "Equipable";
					numLines++;
				}
				if (item.tileWand > 0)
				{
					toolTipLine[numLines] = Lang.tip[52].Value + Lang.GetItemNameValue(item.tileWand);
					toolTipNames[numLines] = "WandConsumes";
					numLines++;
				}
				if (item.questItem)
				{
					toolTipLine[numLines] = Lang.inter[65].Value;
					toolTipNames[numLines] = "Quest";
					numLines++;
				}
				if (item.vanity)
				{
					toolTipLine[numLines] = Lang.tip[24].Value;
					toolTipNames[numLines] = "Vanity";
					numLines++;
				}
				if (item.defense > 0)
				{
					toolTipLine[numLines] = item.defense.ToString() + Lang.tip[25].Value;
					toolTipNames[numLines] = "Defense";
					numLines++;
				}
				if (item.pick > 0)
				{
					toolTipLine[numLines] = item.pick.ToString() + Lang.tip[26].Value;
					toolTipNames[numLines] = "PickPower";
					numLines++;
				}
				if (item.axe > 0)
				{
					toolTipLine[numLines] = (item.axe * 5).ToString() + Lang.tip[27].Value;
					toolTipNames[numLines] = "AxePower";
					numLines++;
				}
				if (item.hammer > 0)
				{
					toolTipLine[numLines] = item.hammer.ToString() + Lang.tip[28].Value;
					toolTipNames[numLines] = "HammerPower";
					numLines++;
				}
				if (item.tileBoost != 0)
				{
					int tileBoost = item.tileBoost;
					if (tileBoost > 0)
					{
						toolTipLine[numLines] = "+" + tileBoost.ToString() + Lang.tip[54].Value;
					}
					else
					{
						toolTipLine[numLines] = tileBoost.ToString() + Lang.tip[54].Value;
					}
					toolTipNames[numLines] = "TileBoost";
					numLines++;
				}
				if (item.healLife > 0)
				{
					if (item.type == 3001)
					{
						int healLife = item.healLife;
						int num7 = 120;
						toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLifeRange", healLife, num7);
					}
					else
					{
						toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLife", Main.player[Main.myPlayer].GetHealLife(item, false));
					}
					toolTipNames[numLines] = "HealLife";
					numLines++;
				}
				if (item.healMana > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresMana", Main.player[Main.myPlayer].GetHealMana(item, false));
					toolTipNames[numLines] = "HealMana";
					numLines++;
				}
				if (item.mana > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.UsesMana", Main.player[Main.myPlayer].GetManaCost(item));
					toolTipNames[numLines] = "UseMana";
					numLines++;
				}
				if (item.createWall > 0 || item.createTile > -1)
				{
					if (item.type != 213 && item.type != 5295 && item.tileWand < 1)
					{
						toolTipLine[numLines] = Lang.tip[33].Value;
						toolTipNames[numLines] = "Placeable";
						numLines++;
					}
				}
				else if (item.ammo > 0 && !item.notAmmo)
				{
					toolTipLine[numLines] = Lang.tip[34].Value;
					toolTipNames[numLines] = "Ammo";
					numLines++;
				}
				else if (item.consumable && !item.chlorophyteExtractinatorConsumable)
				{
					toolTipLine[numLines] = Lang.tip[35].Value;
					toolTipNames[numLines] = "Consumable";
					numLines++;
				}
				if (item.material)
				{
					toolTipLine[numLines] = Lang.tip[36].Value;
					toolTipNames[numLines] = "Material";
					numLines++;
				}
				if (item.ToolTip != null)
				{
					for (int i = 0; i < item.ToolTip.Lines; i++)
					{
						if (i == 0 && ItemID.Sets.UsesCursedByPlanteraTooltip[item.type] && !NPC.downedPlantBoss)
						{
							toolTipLine[numLines] = Lang.tip[59].Value;
							toolTipNames[numLines] = "Tooltip" + i.ToString();
							numLines++;
						}
						else
						{
							toolTipLine[numLines] = item.ToolTip.GetLine(i);
							toolTipNames[numLines] = "Tooltip" + i.ToString();
							numLines++;
						}
					}
				}
				if (Main.tenthAnniversaryWorld && item.type == 238)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.WizardHatDuringAnniversary");
					numLines++;
				}
				if (Main.getGoodWorld && Main.remixWorld)
				{
					if (item.type == 556 || item.type == 557 || item.type == 544)
					{
						numLines--;
						toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.MechSummonDuringEverything");
						numLines++;
					}
				}
				else if (item.type == 5334)
				{
					numLines--;
					toolTipLine[numLines] = "";
					numLines--;
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.MechdusaSummonNotDuringEverything");
					numLines++;
				}
				if ((item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
				{
					toolTipLine[numLines] = Lang.misc[104].Value;
					toolTipNames[numLines] = "EtherianManaWarning";
					numLines++;
				}
				if (item.buffType > 0 && BuffID.Sets.IsWellFed[item.buffType] && Main.expertMode)
				{
					toolTipLine[numLines] = Lang.misc[40].Value;
					toolTipNames[numLines] = "WellFedExpert";
					numLines++;
				}
				if (item.buffTime > 0)
				{
					string text = (item.buffTime / 60 < 60) ? Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)item.buffTime / 60.0)) : Language.GetTextValue("CommonItemTooltip.MinuteDuration", Math.Round((double)(item.buffTime / 60) / 60.0));
					toolTipNames[numLines] = "BuffTime";
					toolTipLine[numLines] = text;
					numLines++;
				}
				if (item.type == 3262 || item.type == 3282 || item.type == 3283 || item.type == 3284 || item.type == 3285 || item.type == 3286 || item.type == 3316 || item.type == 3315 || item.type == 3317 || item.type == 3291 || item.type == 3389)
				{
					toolTipLine[numLines] = " ";
					yoyoLogo = numLines;
					toolTipNames[numLines] = "OneDropLogo";
					numLines++;
				}
				if (item.prefix > 0)
				{
					Item item2 = Main.tooltipPrefixComparisonItem;
					if (item2 == null || item2.netID != item.netID)
					{
						item2 = new Item();
						item2.netDefaults(item.netID);
					}
					if (item2.damage != item.damage)
					{
						double num8 = (double)((float)item.damage - (float)item2.damage);
						num8 = num8 / (double)item2.damage * 100.0;
						num8 = Math.Round(num8);
						if (num8 > 0.0)
						{
							toolTipLine[numLines] = "+" + num8.ToString() + Lang.tip[39].Value;
						}
						else
						{
							toolTipLine[numLines] = num8.ToString() + Lang.tip[39].Value;
						}
						if (num8 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixDamage";
						numLines++;
					}
					if (item2.useAnimation != item.useAnimation)
					{
						double num9 = (double)((float)item.useAnimation - (float)item2.useAnimation);
						num9 = num9 / (double)item2.useAnimation * 100.0;
						num9 = Math.Round(num9);
						num9 *= -1.0;
						if (num9 > 0.0)
						{
							toolTipLine[numLines] = "+" + num9.ToString() + Lang.tip[40].Value;
						}
						else
						{
							toolTipLine[numLines] = num9.ToString() + Lang.tip[40].Value;
						}
						if (num9 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixSpeed";
						numLines++;
					}
					if (item2.crit != item.crit)
					{
						double num10 = (double)((float)item.crit - (float)item2.crit);
						if (num10 > 0.0)
						{
							toolTipLine[numLines] = "+" + num10.ToString() + Lang.tip[41].Value;
						}
						else
						{
							toolTipLine[numLines] = num10.ToString() + Lang.tip[41].Value;
						}
						if (num10 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixCritChance";
						numLines++;
					}
					if (item2.mana != item.mana)
					{
						double num11 = (double)((float)item.mana - (float)item2.mana);
						num11 = num11 / (double)item2.mana * 100.0;
						num11 = Math.Round(num11);
						if (num11 > 0.0)
						{
							toolTipLine[numLines] = "+" + num11.ToString() + Lang.tip[42].Value;
						}
						else
						{
							toolTipLine[numLines] = num11.ToString() + Lang.tip[42].Value;
						}
						if (num11 > 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixUseMana";
						numLines++;
					}
					if (item2.scale != item.scale)
					{
						double num12 = (double)(item.scale - item2.scale);
						num12 = num12 / (double)item2.scale * 100.0;
						num12 = Math.Round(num12);
						if (num12 > 0.0)
						{
							toolTipLine[numLines] = "+" + num12.ToString() + Lang.tip[43].Value;
						}
						else
						{
							toolTipLine[numLines] = num12.ToString() + Lang.tip[43].Value;
						}
						if (num12 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixSize";
						numLines++;
					}
					if (item2.shootSpeed != item.shootSpeed)
					{
						double num13 = (double)(item.shootSpeed - item2.shootSpeed);
						num13 = num13 / (double)item2.shootSpeed * 100.0;
						num13 = Math.Round(num13);
						if (num13 > 0.0)
						{
							toolTipLine[numLines] = "+" + num13.ToString() + Lang.tip[44].Value;
						}
						else
						{
							toolTipLine[numLines] = num13.ToString() + Lang.tip[44].Value;
						}
						if (num13 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixShootSpeed";
						numLines++;
					}
					if (item2.knockBack != oldKB)
					{
						double num14 = (double)(oldKB - item2.knockBack);
						num14 = num14 / (double)item2.knockBack * 100.0;
						num14 = Math.Round(num14);
						if (num14 > 0.0)
						{
							toolTipLine[numLines] = "+" + num14.ToString() + Lang.tip[45].Value;
						}
						else
						{
							toolTipLine[numLines] = num14.ToString() + Lang.tip[45].Value;
						}
						if (num14 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixKnockback";
						numLines++;
					}
					if (item.prefix == 62)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDefense";
						numLines++;
					}
					if (item.prefix == 63)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDefense";
						numLines++;
					}
					if (item.prefix == 64)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDefense";
						numLines++;
					}
					if (item.prefix == 65)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDefense";
						numLines++;
					}
					if (item.prefix == 66)
					{
						toolTipLine[numLines] = "+20 " + Lang.tip[31].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMaxMana";
						numLines++;
					}
					if (item.prefix == 67)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[5].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccCritChance";
						numLines++;
					}
					if (item.prefix == 68)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[5].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccCritChance";
						numLines++;
					}
					if (item.prefix == 69)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDamage";
						numLines++;
					}
					if (item.prefix == 70)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDamage";
						numLines++;
					}
					if (item.prefix == 71)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDamage";
						numLines++;
					}
					if (item.prefix == 72)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccDamage";
						numLines++;
					}
					if (item.prefix == 73)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMoveSpeed";
						numLines++;
					}
					if (item.prefix == 74)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMoveSpeed";
						numLines++;
					}
					if (item.prefix == 75)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMoveSpeed";
						numLines++;
					}
					if (item.prefix == 76)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMoveSpeed";
						numLines++;
					}
					if (item.prefix == 77)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMeleeSpeed";
						numLines++;
					}
					if (item.prefix == 78)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMeleeSpeed";
						numLines++;
					}
					if (item.prefix == 79)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMeleeSpeed";
						numLines++;
					}
					if (item.prefix == 80)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						toolTipNames[numLines] = "PrefixAccMeleeSpeed";
						numLines++;
					}
					prefixlineIndex = numLines;
				}
				if (item.wornArmor && Main.player[Main.myPlayer].setBonus != "")
				{
					toolTipLine[numLines] = Lang.tip[48].Value + " " + Main.player[Main.myPlayer].setBonus;
					toolTipNames[numLines] = "SetBonus";
					numLines++;
				}
			}
			if (item.expert)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.Expert");
				toolTipNames[numLines] = "Expert";
				numLines++;
			}
			if (item.master)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.Master");
				toolTipNames[numLines] = "Master";
				numLines++;
			}
			int amountNeeded;
			if ((item.tooltipContext == 0 || item.tooltipContext == 2 || item.tooltipContext == 1 || item.tooltipContext == 3 || item.tooltipContext == 4 || item.tooltipContext == 32 || item.tooltipContext == 15 || item.tooltipContext == 6 || item.tooltipContext == 22 || item.tooltipContext == 7 || item.tooltipContext == 5) && Main.LocalPlayer.difficulty == 3 && CreativeItemSacrificesCatalog.Instance.TryGetSacrificeCountCapToUnlockInfiniteItems(item.type, out amountNeeded))
			{
				int sacrificeCount = Main.LocalPlayerCreativeTracker.ItemSacrifices.GetSacrificeCount(item.type);
				if (amountNeeded - sacrificeCount > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.CreativeSacrificeNeeded", amountNeeded - sacrificeCount);
					researchLine = numLines;
					toolTipNames[numLines] = "JourneyResearch";
					numLines++;
				}
			}
			if (item.StatsModifiedBy.Count > 0)
			{
				if (Main.keyState.PressingShift())
				{
					string modNames = string.Join(", ", from m in item.StatsModifiedBy
					select m.DisplayName);
					toolTipLine[numLines] = Language.GetTextValue("tModLoader.ModifiedByMods") + modNames;
				}
				else
				{
					toolTipLine[numLines] = Language.GetTextValue("tModLoader.ModifiedByModsHoldSHIFT");
				}
				toolTipNames[numLines] = "ModifiedByMods";
				numLines++;
			}
			string bestiaryNotes = item.BestiaryNotes;
			if (!string.IsNullOrWhiteSpace(bestiaryNotes))
			{
				foreach (string text2 in bestiaryNotes.Split('\n', StringSplitOptions.None))
				{
					int num15 = numLines;
					numLines = num15 + 1;
					toolTipLine[num15] = text2;
					toolTipNames[numLines - 1] = "BestiaryNotes";
				}
			}
		}

		// Token: 0x0600046D RID: 1133 RVA: 0x000B65B4 File Offset: 0x000B47B4
		private void MouseText_DrawBuffTooltip(string buffString, ref int X, ref int Y, int buffNameHeight)
		{
			Point p;
			p..ctor(X, Y);
			int num = 220;
			int num2 = 72;
			int num3 = -1;
			float num4 = 1f;
			List<Vector2> list = new List<Vector2>();
			Vector2 vector = ChatManager.GetStringSize(FontAssets.MouseText.Value, buffString, Vector2.One, -1f);
			list.Add(vector);
			int num5 = (int)((float)(Main.screenHeight - Y - 24 - num2) * num4) / 20;
			if (num5 < 1)
			{
				num5 = 1;
			}
			if (Main.bannerMouseOver)
			{
				int num6 = 0;
				for (int i = 0; i < NPCLoader.NPCCount; i++)
				{
					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].HasNPCBannerBuff(i))
					{
						num6++;
						string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
						Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(nPCNameValue);
						int num7 = X;
						int num8 = Y + (int)vector2.Y + num6 * 20 + 10;
						int num9 = 0;
						int num10 = num6 / num5;
						for (int j = 0; j < num10; j++)
						{
							num9++;
							num7 += num;
							num8 -= num5 * 20;
						}
						if ((float)(num7 - 24 - num) > (float)Main.screenWidth * num4)
						{
							num3 = num6;
							break;
						}
						list.Add(new Vector2((float)num7, (float)num8) + vector2 - p.ToVector2());
					}
				}
			}
			BuffLoader.CustomBuffTipSize(buffString, list);
			Vector2 zero = Vector2.Zero;
			foreach (Vector2 item in list)
			{
				if (zero.X < item.X)
				{
					zero.X = item.X;
				}
				if (zero.Y < item.Y)
				{
					zero.Y = item.Y;
				}
			}
			if ((float)X + zero.X + 24f > (float)Main.screenWidth * num4)
			{
				X = (int)((float)Main.screenWidth * num4 - zero.X - 24f);
			}
			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight * num4)
			{
				Y = (int)((float)Main.screenHeight * num4 - zero.Y - 4f);
			}
			Color color;
			color..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 255);
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, buffString, new Vector2((float)X, (float)(Y + buffNameHeight)), color, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
			if (!Main.bannerMouseOver)
			{
				return;
			}
			int num11 = 0;
			for (int k = 0; k < NPCLoader.NPCCount; k++)
			{
				if (Item.BannerToNPC(k) != 0 && Main.player[Main.myPlayer].HasNPCBannerBuff(k))
				{
					num11++;
					bool flag = false;
					for (int l = 0; l < 5; l++)
					{
						int num12 = X;
						int num13 = Y + (int)vector.Y + num11 * 20 + 10;
						int num14 = (num11 - 1) / num5;
						num12 += num * num14;
						num13 -= num5 * 20 * num14;
						string text = Lang.GetNPCNameValue(Item.BannerToNPC(k));
						if (num3 == num11)
						{
							text = Language.GetTextValue("UI.Ellipsis");
							flag = true;
						}
						Color color2 = Color.Black;
						switch (l)
						{
						case 0:
							num12 -= 2;
							break;
						case 1:
							num12 += 2;
							break;
						case 2:
							num13 -= 2;
							break;
						case 3:
							num13 += 2;
							break;
						default:
						{
							float num15 = (float)Main.mouseTextColor / 255f;
							color2..ctor((int)((byte)(80f * num15)), (int)((byte)(255f * num15)), (int)((byte)(120f * num15)), (int)Main.mouseTextColor);
							break;
						}
						}
						DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)num12, (float)num13), color2, 0f, default(Vector2), 1f, 0, 0f);
					}
					if (flag)
					{
						break;
					}
				}
			}
			BuffLoader.DrawCustomBuffTip(buffString, Main.spriteBatch, X, Y + (int)FontAssets.MouseText.Value.MeasureString(buffString).Y);
		}

		// Token: 0x0600046E RID: 1134 RVA: 0x000B6A10 File Offset: 0x000B4C10
		protected void DrawFPS()
		{
			if (Main.showFrameRate)
			{
				string text2 = string.Concat(Main.frameRate) + " (" + (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer).ToString() + ")" + " (" + ((int)(Main.gfxQuality * 100f)).ToString() + "%)" + " " + Main.debugWords;
				int num = 4;
				if (!Main.gameMenu)
				{
					num = Main.screenHeight - 24;
				}
				Vector2 position;
				position..ctor(4f, (float)num);
				Vector2 origin;
				origin..ctor(0f, 0f);
				Vector2 vector = FontAssets.MouseText.Value.MeasureString(text2);
				if (PlayerInput.SettingsForUI.ShowGamepadHints && !Main.gameMenu)
				{
					position.X = (float)(Main.screenWidth - 4) - vector.X;
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text2, position, new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, origin, 1f, 0, 0f);
			}
		}

		// Token: 0x0600046F RID: 1135 RVA: 0x000B6B38 File Offset: 0x000B4D38
		public static void DrawGamepadInstructions()
		{
			if (Main.drawingPlayerChat || !PlayerInput.SettingsForUI.ShowGamepadHints)
			{
				return;
			}
			string text = PlayerInput.ComposeInstructionsForGamepad();
			PlayerInput.AllowExecutionOfGamepadInstructions = false;
			if (!Main.GamepadDisableInstructionsDisplay && text.Length > 0 && (!Main.player[Main.myPlayer].dead || Main.gameMenu))
			{
				float num = 35f;
				float num2 = 1f;
				Vector2 baseScale;
				baseScale..ctor(num2);
				if (Main.gameMenu)
				{
					num = 90f;
				}
				if (Main.menuMode == 0)
				{
					num += 55f;
				}
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, text, new Vector2(1f), -1f);
				float t = num2;
				Utils.Swap<float>(ref GlyphTagHandler.GlyphsScale, ref t);
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2(12f, (float)Main.screenHeight - num) - stringSize * new Vector2(0f, 0f), Color.White, 0f, Vector2.Zero, baseScale, -1f, num2 * 2f);
				Utils.Swap<float>(ref GlyphTagHandler.GlyphsScale, ref t);
			}
		}

		// Token: 0x06000470 RID: 1136 RVA: 0x000B6C60 File Offset: 0x000B4E60
		public static Color shine(Color newColor, int type)
		{
			int num = (int)newColor.R;
			int num2 = (int)newColor.G;
			int num3 = (int)newColor.B;
			float num4 = 0.6f;
			if (type <= 164)
			{
				if (type > 117)
				{
					if (type != 147)
					{
						switch (type)
						{
						case 161:
							break;
						case 162:
							goto IL_2E3;
						case 163:
							num = (int)((float)newColor.R * 1.05f);
							num2 = (int)((float)newColor.G * 1.1f);
							num3 = (int)((double)newColor.B * 1.15);
							goto IL_322;
						case 164:
							num = (int)((float)newColor.R * 1.1f);
							num2 = (int)((float)newColor.G * 1.1f);
							num3 = (int)((double)newColor.B * 1.2);
							goto IL_322;
						default:
							goto IL_2E3;
						}
					}
					num = (int)((float)newColor.R * 1.1f);
					num2 = (int)((float)newColor.G * 1.12f);
					num3 = (int)((double)newColor.B * 1.15);
					goto IL_322;
				}
				if (type == 25)
				{
					num = (int)((float)newColor.R * 0.95f);
					num2 = (int)((float)newColor.G * 0.85f);
					num3 = (int)((double)newColor.B * 1.1);
					goto IL_322;
				}
				if (type == 117)
				{
					num = (int)((float)newColor.R * 1.1f);
					num2 = (int)((float)newColor.G * 1f);
					num3 = (int)((double)newColor.B * 1.2);
					goto IL_322;
				}
			}
			else if (type <= 186)
			{
				if (type == 178)
				{
					num4 = 0.5f;
					num = (int)((float)newColor.R * (1f + num4));
					num2 = (int)((float)newColor.G * (1f + num4));
					num3 = (int)((float)newColor.B * (1f + num4));
					goto IL_322;
				}
				if (type - 185 <= 1)
				{
					num4 = 0.3f;
					num = (int)((float)newColor.R * (1f + num4));
					num2 = (int)((float)newColor.G * (1f + num4));
					num3 = (int)((float)newColor.B * (1f + num4));
					goto IL_322;
				}
			}
			else
			{
				if (type == 204)
				{
					num4 = 0.3f + (float)Main.mouseTextColor / 300f;
					num = (int)((float)newColor.R * (1.3f * num4));
					if (num > 255)
					{
						num = 255;
					}
					return new Color(num, num2, num3, 255);
				}
				if (type == 211)
				{
					num4 = 0.3f + (float)Main.mouseTextColor / 300f;
					num2 = (int)((float)newColor.G * (1.5f * num4));
					num3 = (int)((float)newColor.B * (1.1f * num4));
					goto IL_322;
				}
				if (type - 262 <= 6)
				{
					num3 += 100;
					num += 100;
					num2 += 100;
					goto IL_322;
				}
			}
			IL_2E3:
			if (Main.tileShine2[type])
			{
				num = (int)((float)newColor.R * (1f + num4));
				num2 = (int)((float)newColor.G * (1f + num4));
				num3 = (int)((float)newColor.B * (1f + num4));
			}
			IL_322:
			float num5 = Main.shimmerAlpha;
			if (num5 > 0f)
			{
				num = (int)((float)num * (1f - num5) + (float)num * Main.shimmerShine.X * num5);
				num2 = (int)((float)num2 * (1f - num5) + (float)num2 * Main.shimmerShine.Y * num5);
				num3 = (int)((float)num3 * (1f - num5) + (float)num3 * Main.shimmerShine.Z * num5);
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			newColor.R = (byte)num;
			newColor.G = (byte)num2;
			newColor.B = (byte)num3;
			return new Color((int)((byte)num), (int)((byte)num2), (int)((byte)num3), (int)newColor.A);
		}

		// Token: 0x06000471 RID: 1137 RVA: 0x000B7050 File Offset: 0x000B5250
		public static void shine(ref Vector3 newColor, int type)
		{
			float num = 0.6f;
			if (type <= 164)
			{
				if (type > 117)
				{
					if (type != 147)
					{
						switch (type)
						{
						case 161:
							break;
						case 162:
							goto IL_294;
						case 163:
							newColor.X *= 1.05f;
							newColor.Y *= 1.1f;
							newColor.Z *= 1.15f;
							goto IL_2D0;
						case 164:
							newColor.X *= 1.1f;
							newColor.Y *= 1.1f;
							newColor.Z *= 1.2f;
							goto IL_2D0;
						default:
							goto IL_294;
						}
					}
					newColor.X *= 1.1f;
					newColor.Y *= 1.12f;
					newColor.Z *= 1.15f;
					goto IL_2D0;
				}
				if (type == 25)
				{
					newColor.X *= 0.95f;
					newColor.Y *= 0.85f;
					newColor.Z *= 1.1f;
					goto IL_2D0;
				}
				if (type == 117)
				{
					newColor.X *= 1.1f;
					newColor.Z *= 1.2f;
					goto IL_2D0;
				}
			}
			else if (type <= 186)
			{
				if (type == 178)
				{
					num = 0.5f;
					newColor.X *= 1f + num;
					newColor.Y *= 1f + num;
					newColor.Z *= 1f + num;
					goto IL_2D0;
				}
				if (type - 185 <= 1)
				{
					num = 0.3f;
					newColor.X *= 1f + num;
					newColor.Y *= 1f + num;
					newColor.Z *= 1f + num;
					goto IL_2D0;
				}
			}
			else
			{
				if (type == 204)
				{
					num = 0.3f + (float)Main.mouseTextColor / 300f;
					newColor.X *= 1.3f * num;
					goto IL_2D0;
				}
				if (type == 211)
				{
					num = 0.3f + (float)Main.mouseTextColor / 300f;
					newColor.Y *= 1.5f * num;
					newColor.Z *= 1.1f * num;
					goto IL_2D0;
				}
				if (type - 262 <= 6)
				{
					newColor.X += 0.39f;
					newColor.Y += 0.39f;
					newColor.Z += 0.39f;
					goto IL_2D0;
				}
			}
			IL_294:
			if (Main.tileShine2[type])
			{
				newColor.X *= 1f + num;
				newColor.Y *= 1f + num;
				newColor.Z *= 1f + num;
			}
			IL_2D0:
			float num2 = Main.shimmerAlpha;
			if (num2 > 0f)
			{
				Main.shimmerShine.X = 1.2f;
				Main.shimmerShine.Y = 1f;
				Main.shimmerShine.Z = 1.6f;
				newColor.X = newColor.X * (1f - num2) + newColor.X * Main.shimmerShine.X * num2;
				newColor.Y = newColor.Y * (1f - num2) + newColor.Y * Main.shimmerShine.Y * num2;
				newColor.Z = newColor.Z * (1f - num2) + newColor.Z * Main.shimmerShine.Z * num2;
				if (newColor.X > 1f)
				{
					newColor.X = 1f;
				}
				if (newColor.Y > 1f)
				{
					newColor.Y = 1f;
				}
				if (newColor.Z > 1f)
				{
					newColor.Z = 1f;
				}
			}
		}

		// Token: 0x06000472 RID: 1138 RVA: 0x000B742B File Offset: 0x000B562B
		private void DrawTileEntities(bool solidLayer, bool overRenderTargets, bool intoRenderTargets)
		{
			this.TilesRenderer.PostDrawTiles(solidLayer, overRenderTargets, intoRenderTargets);
		}

		// Token: 0x06000473 RID: 1139 RVA: 0x000B743B File Offset: 0x000B563B
		public void ClearCachedTileDraws()
		{
			this.TilesRenderer.ClearCachedTileDraws(false);
			this.TilesRenderer.ClearCachedTileDraws(true);
		}

		// Token: 0x06000474 RID: 1140 RVA: 0x000B7458 File Offset: 0x000B5658
		public void ResetAllContentBasedRenderTargets()
		{
			this.TilePaintSystem.Reset();
			for (int i = 0; i < Main.ContentThatNeedsRenderTargets.Count; i++)
			{
				Main.ContentThatNeedsRenderTargets[i].Reset();
			}
		}

		// Token: 0x06000475 RID: 1141 RVA: 0x000B7495 File Offset: 0x000B5695
		internal unsafe static bool IsTileSpelunkable(int tileX, int tileY, Tile t)
		{
			return Main.IsTileSpelunkable(tileX, tileY, *t.type, *t.frameX, *t.frameY);
		}

		// Token: 0x06000476 RID: 1142 RVA: 0x000B74B8 File Offset: 0x000B56B8
		internal static bool IsTileSpelunkable(int tileX, int tileY, ushort typeCache, short tileFrameX, short tileFrameY)
		{
			bool? modded = TileLoader.IsTileSpelunkable(tileX, tileY, (int)typeCache);
			if (modded != null)
			{
				return modded.Value;
			}
			return Main.tileSpelunker[(int)typeCache] || (typeCache == 185 && tileFrameY == 18 && tileFrameX >= 576 && tileFrameX <= 882) || (typeCache == 186 && tileFrameX >= 864 && tileFrameX <= 1170);
		}

		// Token: 0x06000477 RID: 1143 RVA: 0x000B7525 File Offset: 0x000B5725
		internal unsafe static bool IsTileBiomeSightable(int tileX, int tileY, Tile t, ref Color sightColor)
		{
			return Main.IsTileBiomeSightable(tileX, tileY, *t.type, *t.frameX, *t.frameY, ref sightColor);
		}

		// Token: 0x06000478 RID: 1144 RVA: 0x000B7548 File Offset: 0x000B5748
		internal static bool IsTileBiomeSightable(int tileX, int tileY, ushort type, short tileFrameX, short tileFrameY, ref Color sightColor)
		{
			bool? modded = TileLoader.IsTileBiomeSightable(tileX, tileY, (int)type, ref sightColor);
			if (modded != null)
			{
				return modded.Value;
			}
			if (TileID.Sets.CorruptBiomeSight[(int)type] || (Main.remixWorld && type == 474))
			{
				sightColor = new Color(200, 100, 240);
				return true;
			}
			if (TileID.Sets.CrimsonBiomeSight[(int)type] || (Main.remixWorld && type == 195))
			{
				sightColor = new Color(255, 100, 100);
				return true;
			}
			if (TileID.Sets.HallowBiomeSight[(int)type])
			{
				sightColor = new Color(255, 160, 240);
				return true;
			}
			return false;
		}

		// Token: 0x06000479 RID: 1145 RVA: 0x000B75F9 File Offset: 0x000B57F9
		protected void DrawTiles(bool solidLayer, bool forRenderTargets, bool intoRenderTargets, int waterStyleOverride = -1)
		{
			this.TilesRenderer.Draw(solidLayer, forRenderTargets, intoRenderTargets, waterStyleOverride);
		}

		// Token: 0x0600047A RID: 1146 RVA: 0x000B760C File Offset: 0x000B580C
		protected void DrawGoreBehind()
		{
			for (int i = 0; i < 600; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					bool flag = false;
					bool flag2 = GoreID.Sets.DrawBehind[Main.gore[i].type];
					if (!flag2)
					{
						bool flag3 = GoreID.Sets.LiquidDroplet[Main.gore[i].type];
						if (flag3)
						{
							byte frame = Main.gore[i].frame;
							bool flag4 = frame < 7 || frame > 9;
							flag3 = flag4;
						}
						flag2 = flag3;
					}
					if (flag2)
					{
						flag = true;
					}
					if (flag)
					{
						this.LoadGore(Main.gore[i].type);
						if (Main.gore[i].Frame.ColumnCount > 1 || Main.gore[i].Frame.RowCount > 1)
						{
							Rectangle sourceRectangle = Main.gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[Main.gore[i].type].Value);
							Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
							Main.spriteBatch.Draw(TextureAssets.Gore[Main.gore[i].type].Value, new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(sourceRectangle.Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + Main.gore[i].drawOffset, new Rectangle?(sourceRectangle), alpha, Main.gore[i].rotation, new Vector2((float)(sourceRectangle.Width / 2), (float)(sourceRectangle.Height / 2)), Main.gore[i].scale, 0, 0f);
						}
						else
						{
							Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)TextureAssets.Gore[Main.gore[i].type].Width() * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)TextureAssets.Gore[Main.gore[i].type].Height() * 0.5) / 16.0)));
							Main.spriteBatch.Draw(TextureAssets.Gore[Main.gore[i].type].Value, new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(TextureAssets.Gore[Main.gore[i].type].Width() / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(TextureAssets.Gore[Main.gore[i].type].Height() / 2)) + Main.gore[i].drawOffset, new Rectangle?(new Rectangle(0, 0, TextureAssets.Gore[Main.gore[i].type].Width(), TextureAssets.Gore[Main.gore[i].type].Height())), alpha2, Main.gore[i].rotation, new Vector2((float)(TextureAssets.Gore[Main.gore[i].type].Width() / 2), (float)(TextureAssets.Gore[Main.gore[i].type].Height() / 2)), Main.gore[i].scale, 0, 0f);
						}
					}
				}
			}
		}

		// Token: 0x0600047B RID: 1147 RVA: 0x000B7A18 File Offset: 0x000B5C18
		protected void DrawGore()
		{
			Main.drawBackGore = false;
			for (int i = 0; i < 600; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					bool flag = GoreID.Sets.DrawBehind[Main.gore[i].type];
					if (!flag)
					{
						bool flag2 = GoreID.Sets.LiquidDroplet[Main.gore[i].type];
						if (flag2)
						{
							byte frame = Main.gore[i].frame;
							bool flag3 = frame < 7 || frame > 9;
							flag2 = flag3;
						}
						flag = flag2;
					}
					if (flag)
					{
						Main.drawBackGore = true;
					}
					else
					{
						this.LoadGore(Main.gore[i].type);
						if (Main.gore[i].Frame.ColumnCount > 1 || Main.gore[i].Frame.RowCount > 1)
						{
							Rectangle sourceRectangle = Main.gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[Main.gore[i].type].Value);
							Vector2 vector;
							vector..ctor(0f, 0f);
							if (Main.gore[i].type == 1217)
							{
								vector.Y += 4f;
							}
							vector += Main.gore[i].drawOffset;
							Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
							Main.spriteBatch.Draw(TextureAssets.Gore[Main.gore[i].type].Value, new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(sourceRectangle.Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + vector, new Rectangle?(sourceRectangle), alpha, Main.gore[i].rotation, new Vector2((float)(sourceRectangle.Width / 2), (float)(sourceRectangle.Height / 2)), Main.gore[i].scale, 0, 0f);
						}
						else
						{
							Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)TextureAssets.Gore[Main.gore[i].type].Width() * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)TextureAssets.Gore[Main.gore[i].type].Height() * 0.5) / 16.0)));
							Main.spriteBatch.Draw(TextureAssets.Gore[Main.gore[i].type].Value, new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(TextureAssets.Gore[Main.gore[i].type].Width() / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(TextureAssets.Gore[Main.gore[i].type].Height() / 2)) + Main.gore[i].drawOffset, new Rectangle?(new Rectangle(0, 0, TextureAssets.Gore[Main.gore[i].type].Width(), TextureAssets.Gore[Main.gore[i].type].Height())), alpha2, Main.gore[i].rotation, new Vector2((float)(TextureAssets.Gore[Main.gore[i].type].Width() / 2), (float)(TextureAssets.Gore[Main.gore[i].type].Height() / 2)), Main.gore[i].scale, 0, 0f);
						}
					}
				}
			}
			TimeLogger.DetailedDrawTime(24);
		}

		/// <summary>
		/// Draws a small health bar.
		/// <br /> <see cref="F:Terraria.Main.spriteBatch" /> should <strong>already be started</strong> before calling this method.
		/// </summary>
		/// <param name="X">The x-coordinate of the health bar in world coordinates.</param>
		/// <param name="Y">The y-coordinate of the health bar in world coordinates.</param>
		/// <param name="Health">
		/// The current health displayed. The health bar is drawn <c><paramref name="Health" /> / <paramref name="MaxHealth" /></c> percent full.
		/// <br /> If <c><paramref name="Health" /> &lt;= 0</c>, no health bar is drawn.
		/// <br /> If <c><paramref name="Health" /> &gt; <paramref name="MaxHealth" /></c>, the health bar will not exceed max capacity.
		/// </param>
		/// <param name="MaxHealth">The maximum health displayed. The health bar is drawn <c><paramref name="Health" /> / <paramref name="MaxHealth" /></c> percent full.</param>
		/// <param name="alpha">The opacity of the healthbar, where <c>0f</c> is transparent and <c>1f</c> is opaque.</param>
		/// <param name="scale">The visual scale of the health bar.</param>
		/// <param name="noFlip">If <see langword="true" />, then the health bar will not adjust its y-position for players with reversed gravity.</param>
		// Token: 0x0600047C RID: 1148 RVA: 0x000B7E70 File Offset: 0x000B6070
		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f, bool noFlip = false)
		{
			if (Health <= 0)
			{
				return;
			}
			float num = (float)Health / (float)MaxHealth;
			if (num > 1f)
			{
				num = 1f;
			}
			int num2 = (int)(36f * num);
			float num3 = X - 18f * scale;
			float num4 = Y;
			if (Main.player[Main.myPlayer].gravDir == -1f && !noFlip)
			{
				num4 -= Main.screenPosition.Y;
				num4 = Main.screenPosition.Y + (float)Main.screenHeight - num4;
			}
			float num5 = 0f;
			float num6 = 255f;
			num -= 0.1f;
			float num7;
			float num8;
			if ((double)num > 0.5)
			{
				num7 = 255f;
				num8 = 255f * (1f - num) * 2f;
			}
			else
			{
				num7 = 255f * num * 2f;
				num8 = 255f;
			}
			float num9 = 0.95f;
			num8 = num8 * alpha * num9;
			num7 = num7 * alpha * num9;
			num6 = num6 * alpha * num9;
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			if (num8 > 255f)
			{
				num8 = 255f;
			}
			if (num7 < 0f)
			{
				num7 = 0f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			Color color;
			color..ctor((int)((byte)num8), (int)((byte)num7), (int)((byte)num5), (int)((byte)num6));
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num2 < 34)
			{
				if (num2 < 36)
				{
					Main.spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(2, 0, 2, TextureAssets.Hb2.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
				}
				if (num2 < 34)
				{
					Main.spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - Main.screenPosition.X + (float)(num2 + 2) * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(num2 + 2, 0, 36 - num2 - 2, TextureAssets.Hb2.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
				}
				if (num2 > 2)
				{
					Main.spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, num2 - 2, TextureAssets.Hb1.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
				}
				Main.spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - Main.screenPosition.X + (float)(num2 - 2) * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(32, 0, 2, TextureAssets.Hb1.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
				return;
			}
			if (num2 < 36)
			{
				Main.spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(num2, 0, 36 - num2, TextureAssets.Hb2.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
			}
			Main.spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, num2, TextureAssets.Hb1.Height())), color, 0f, new Vector2(0f, 0f), scale, 0, 0f);
		}

		// Token: 0x0600047D RID: 1149 RVA: 0x000B8298 File Offset: 0x000B6498
		public static float NPCAddHeight(NPC theNPC)
		{
			float num = 0f;
			if (theNPC.type == 125)
			{
				num = 30f;
			}
			else if (theNPC.ModNPC != null)
			{
				num = theNPC.ModNPC.DrawOffsetY;
			}
			else if (theNPC.type == 54)
			{
				num = 2f;
			}
			else if (theNPC.type == 205)
			{
				num = 8f;
			}
			else if (theNPC.type == 182)
			{
				num = 24f;
			}
			else if (theNPC.type == 178)
			{
				num = 2f;
			}
			else if (theNPC.type == 126)
			{
				num = 30f;
			}
			else if (theNPC.type == 6 || theNPC.type == 173)
			{
				num = 26f;
			}
			else if (theNPC.type == 94)
			{
				num = 14f;
			}
			else if (theNPC.type == 7 || theNPC.type == 8 || theNPC.type == 9)
			{
				num = 13f;
			}
			else if (theNPC.type == 98 || theNPC.type == 99 || theNPC.type == 100)
			{
				num = 13f;
			}
			else if (theNPC.type == 95 || theNPC.type == 96 || theNPC.type == 97)
			{
				num = 13f;
			}
			else if (theNPC.type == 10 || theNPC.type == 11 || theNPC.type == 12)
			{
				num = 8f;
			}
			else if (theNPC.type == 13 || theNPC.type == 14 || theNPC.type == 15)
			{
				num = 26f;
			}
			else if (theNPC.type == 175)
			{
				num = 4f;
			}
			else if (theNPC.type == 520)
			{
				num = 2f;
			}
			else if (theNPC.type >= 412 && theNPC.type <= 414)
			{
				num = 18f;
			}
			else if (theNPC.type == 48)
			{
				num = 32f;
			}
			else if (theNPC.type == 49 || theNPC.type == 51)
			{
				num = 4f;
			}
			else if (theNPC.type == 60)
			{
				num = 10f;
			}
			else if (theNPC.type == 62 || theNPC.type == 66 || theNPC.type == 156)
			{
				num = 14f;
			}
			else if (theNPC.type == 63 || theNPC.type == 64 || theNPC.type == 103)
			{
				num = 4f;
			}
			else if (theNPC.type == 65)
			{
				num = 5f;
			}
			else if (theNPC.type == 69)
			{
				num = 4f;
			}
			else if (theNPC.type == 70)
			{
				num = -4f;
			}
			else if (theNPC.type == 72)
			{
				num = -2f;
			}
			else if (theNPC.type == 83 || theNPC.type == 84)
			{
				num = 20f;
			}
			else if (theNPC.type == 150 || theNPC.type == 151 || theNPC.type == 158)
			{
				num = 10f;
			}
			else if (theNPC.type == 152)
			{
				num = 6f;
			}
			else if (theNPC.type == 153 || theNPC.type == 154)
			{
				num = 2f;
			}
			else if (theNPC.type == 165 || theNPC.type == 237 || theNPC.type == 238 || theNPC.type == 240 || theNPC.type == 531)
			{
				num = 10f;
			}
			else if (theNPC.type == 39 || theNPC.type == 40 || theNPC.type == 41)
			{
				num = 26f;
			}
			else if (theNPC.type >= 87 && theNPC.type <= 92)
			{
				num = 56f;
			}
			else if (theNPC.type >= 134 && theNPC.type <= 136)
			{
				num = 30f;
			}
			else if (theNPC.type == 169)
			{
				num = 8f;
			}
			else if (theNPC.type == 174)
			{
				num = 6f;
			}
			else if (theNPC.type == 369)
			{
				num = 2f;
			}
			else if (theNPC.type == 376)
			{
				num = 6f;
			}
			else if (theNPC.type == 579)
			{
				num = -2f;
			}
			else if (theNPC.type == 613 || theNPC.type == 612)
			{
				num = 2f;
			}
			switch (theNPC.type)
			{
			case 269:
			case 270:
			case 271:
			case 274:
			case 277:
				num -= 2f;
				break;
			}
			if (theNPC.townNPC && theNPC.ai[0] == 5f)
			{
				num -= 4f;
				if (theNPC.type == 637 || theNPC.type == 656 || NPCID.Sets.IsTownSlime[theNPC.type])
				{
					num -= 10f;
				}
			}
			if (theNPC.type == 671 || theNPC.type == 672 || theNPC.type == 673 || theNPC.type == 674 || theNPC.type == 675)
			{
				num += 10f;
			}
			return num * theNPC.scale;
		}

		// Token: 0x0600047E RID: 1150 RVA: 0x000B8844 File Offset: 0x000B6A44
		protected void DrawProjectiles()
		{
			PlayerInput.SetZoom_MouseInWorld();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			int num = 0;
			Main.CurrentDrawnEntity = null;
			Main.CurrentDrawnEntityShader = 0;
			if (Main.ignoreErrors)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].type > 0 && !Main.projectile[i].hide)
					{
						num++;
						try
						{
							this.DrawProj(i);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
							Main.projectile[i].active = false;
						}
					}
				}
			}
			else
			{
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].type > 0 && !Main.projectile[j].hide)
					{
						this.DrawProj(j);
					}
				}
			}
			Main.CurrentDrawnEntity = null;
			Main.CurrentDrawnEntityShader = 0;
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(20);
		}

		// Token: 0x0600047F RID: 1151 RVA: 0x000B8960 File Offset: 0x000B6B60
		public static int GetProjectileDesiredShader(Projectile proj)
		{
			int result = 0;
			if (proj.minion && proj.owner != 255)
			{
				result = Main.player[proj.owner].cMinion;
			}
			if (Main.projHook[proj.type] && proj.owner != 255)
			{
				result = Main.player[proj.owner].cGrapple;
			}
			if (Main.projPet[proj.type] && !proj.minion && proj.owner != 255 && proj.damage == 0 && !ProjectileID.Sets.LightPet[proj.type])
			{
				result = Main.player[proj.owner].cPet;
			}
			if (!proj.minion && proj.owner != 255 && proj.damage == 0 && ProjectileID.Sets.LightPet[proj.type])
			{
				result = Main.player[proj.owner].cLight;
			}
			if (proj.owner != 255)
			{
				int type = proj.type;
				if (type != 623)
				{
					if (type == 818)
					{
						return Main.player[proj.owner].cMinion;
					}
					if (type != 1020)
					{
						return result;
					}
				}
				result = Main.player[proj.owner].cPet;
			}
			return result;
		}

		// Token: 0x06000480 RID: 1152 RVA: 0x000B8AA0 File Offset: 0x000B6CA0
		private void RefreshPlayerDrawOrder()
		{
			this._playersThatDrawBehindNPCs.Clear();
			this._playersThatDrawAfterProjectiles.Clear();
			if (Main.gameMenu)
			{
				return;
			}
			Player player;
			for (int i = 0; i < 255; i++)
			{
				player = Main.player[i];
				if (i != Main.myPlayer && player.active && !player.outOfRange)
				{
					if (player.isLockedToATile)
					{
						this._playersThatDrawBehindNPCs.Add(player);
					}
					else
					{
						this._playersThatDrawAfterProjectiles.Add(player);
					}
				}
			}
			player = Main.LocalPlayer;
			if (player.isLockedToATile)
			{
				this._playersThatDrawBehindNPCs.Add(player);
				return;
			}
			this._playersThatDrawAfterProjectiles.Add(player);
		}

		// Token: 0x06000481 RID: 1153 RVA: 0x000B8B48 File Offset: 0x000B6D48
		protected void DrawPlayers_BehindNPCs()
		{
			Main.PotionOfReturnRenderer.DrawPlayers(Main.Camera, from p in this._playersThatDrawBehindNPCs
			where p.PotionOfReturnOriginalUsePosition != null
			select p);
			Main.PlayerRenderer.DrawPlayers(Main.Camera, this._playersThatDrawBehindNPCs);
		}

		// Token: 0x06000482 RID: 1154 RVA: 0x000B8BA4 File Offset: 0x000B6DA4
		protected void DrawPlayers_AfterProjectiles()
		{
			Main.PotionOfReturnRenderer.DrawPlayers(Main.Camera, from p in this._playersThatDrawAfterProjectiles
			where p.PotionOfReturnOriginalUsePosition != null
			select p);
			Main.PlayerRenderer.DrawPlayers(Main.Camera, this._playersThatDrawAfterProjectiles);
		}

		// Token: 0x06000483 RID: 1155 RVA: 0x000B8C00 File Offset: 0x000B6E00
		protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Color passedColor)
		{
			Texture2D value = TextureAssets.Extra[78].Value;
			Vector2 origin;
			origin..ctor(68f, 94f);
			Rectangle value2 = value.Frame(1, 8, 0, frameNumber, 0, 0);
			Vector2 position = worldPosition - Main.screenPosition;
			passedColor *= opacity;
			spriteBatch.Draw(value, position, new Rectangle?(value2), passedColor, 0f, origin, scale, 0, 0f);
		}

		// Token: 0x06000484 RID: 1156 RVA: 0x000B8C70 File Offset: 0x000B6E70
		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Rectangle rectangle;
			rectangle..ctor((int)Main.screenPosition.X - 800, (int)Main.screenPosition.Y - 800, Main.screenWidth + 1600, Main.screenHeight + 1600);
			for (int num = 199; num >= 0; num--)
			{
				try
				{
					if (Main.npc[num].active && Main.npc[num].type > 0 && !Main.npc[num].hide)
					{
						Main.npc[num].position += Main.npc[num].netOffset;
						if (Main.npc[num].behindTiles == behindTiles)
						{
							if (Main.npc[num].type == 125 || Main.npc[num].type == 126)
							{
								if (!NPC.IsMechQueenUp && !flag)
								{
									flag = true;
									for (int i = 0; i < 200; i++)
									{
										if (Main.npc[i].active && num != i && (Main.npc[i].type == 125 || Main.npc[i].type == 126))
										{
											float scale = Main.npc[i].scale;
											float x = Main.npc[i].Center.X;
											float num2 = Main.npc[i].Bottom.Y - (float)Main.npc[i].height * 0.5f * scale;
											float x2 = Main.npc[num].Center.X;
											float y = Main.npc[num].Bottom.Y - (float)Main.npc[num].height * 0.5f * scale;
											Vector2 vector;
											vector..ctor(x2, y);
											float num3 = x - vector.X;
											float num4 = num2 - vector.Y;
											float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
											bool flag2 = true;
											float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
											if (num5 > 2000f)
											{
												flag2 = false;
											}
											float num6 = 40f * scale;
											while (flag2)
											{
												num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
												if (num5 < num6)
												{
													flag2 = false;
												}
												else
												{
													num5 = (float)TextureAssets.Chain12.Height() * scale / num5;
													num3 *= num5;
													num4 *= num5;
													vector.X += num3;
													vector.Y += num4;
													num3 = x - vector.X;
													num4 = num2 - vector.Y;
													Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
													Main.spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height())), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), scale, 0, 0f);
												}
											}
										}
									}
								}
							}
							else if (Main.npc[num].type == 263 && Main.npc[num].aiStyle == 52 && NPC.plantBoss >= 0)
							{
								Vector2 vector2;
								vector2..ctor(Main.npc[num].position.X + (float)(Main.npc[num].width / 2), Main.npc[num].position.Y + (float)(Main.npc[num].height / 2));
								float num7 = Main.npc[NPC.plantBoss].Center.X - vector2.X;
								float num8 = Main.npc[NPC.plantBoss].Center.Y - vector2.Y;
								float rotation2 = (float)Math.Atan2((double)num8, (double)num7) - 1.57f;
								bool flag3 = true;
								while (flag3)
								{
									int num9 = 16;
									int num10 = 32;
									float num11 = (float)Math.Sqrt((double)(num7 * num7 + num8 * num8));
									if (num11 < (float)num10)
									{
										num9 = (int)num11 - num10 + num9;
										flag3 = false;
									}
									num11 = (float)num9 / num11;
									num7 *= num11;
									num8 *= num11;
									vector2.X += num7;
									vector2.Y += num8;
									num7 = Main.npc[NPC.plantBoss].Center.X - vector2.X + Main.npc[NPC.plantBoss].netOffset.X;
									num8 = Main.npc[NPC.plantBoss].Center.Y - vector2.Y + Main.npc[NPC.plantBoss].netOffset.Y;
									Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
									Main.spriteBatch.Draw(TextureAssets.Chain26.Value, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain26.Width(), num9)), color2, rotation2, new Vector2((float)TextureAssets.Chain26.Width() * 0.5f, (float)TextureAssets.Chain26.Height() * 0.5f), 1f, 0, 0f);
								}
							}
							else if (Main.npc[num].type == 264 && Main.npc[num].aiStyle == 53 && NPC.plantBoss >= 0)
							{
								int num12 = NPC.plantBoss;
								if (Main.npc[num].ai[3] > 0f)
								{
									num12 = (int)Main.npc[num].ai[3] - 1;
								}
								Vector2 vector3;
								vector3..ctor(Main.npc[num].position.X + (float)(Main.npc[num].width / 2), Main.npc[num].position.Y + (float)(Main.npc[num].height / 2));
								float num13 = Main.npc[num12].Center.X - vector3.X;
								float num14 = Main.npc[num12].Center.Y - vector3.Y;
								float rotation3 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
								bool flag4 = true;
								while (flag4)
								{
									int num15 = 16;
									int num16 = 32;
									float num17 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
									if (num17 < (float)num16)
									{
										num15 = (int)num17 - num16 + num15;
										flag4 = false;
									}
									num17 = (float)num15 / num17;
									num13 *= num17;
									num14 *= num17;
									vector3.X += num13;
									vector3.Y += num14;
									num13 = Main.npc[num12].Center.X - vector3.X + Main.npc[num12].netOffset.X;
									num14 = Main.npc[num12].Center.Y - vector3.Y + Main.npc[num12].netOffset.Y;
									Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
									Main.spriteBatch.Draw(TextureAssets.Chain27.Value, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain27.Width(), num15)), color3, rotation3, new Vector2((float)TextureAssets.Chain27.Width() * 0.5f, (float)TextureAssets.Chain27.Height() * 0.5f), 1f, 0, 0f);
								}
							}
							if (NPCID.Sets.MustAlwaysDraw[Main.npc[num].type] || rectangle.Intersects(new Rectangle((int)Main.npc[num].position.X, (int)Main.npc[num].position.Y, Main.npc[num].width, Main.npc[num].height)))
							{
								this.DrawNPCCheckAlt(Main.npc[num]);
								this.DrawNPC(num, behindTiles);
							}
						}
						Main.npc[num].position -= Main.npc[num].netOffset;
					}
				}
				catch
				{
					Main.npc[num].active = false;
				}
			}
		}

		// Token: 0x06000485 RID: 1157 RVA: 0x000B9574 File Offset: 0x000B7774
		public void DrawNPCCheckAlt(NPC n)
		{
			ITownNPCProfile profile;
			if (TownNPCProfiles.Instance.GetProfile(n, out profile))
			{
				TextureAssets.Npc[n.type] = profile.GetTextureNPCShouldUse(n);
			}
		}

		// Token: 0x06000486 RID: 1158 RVA: 0x000B95A4 File Offset: 0x000B77A4
		public void DrawNPC(int iNPCIndex, bool behindTiles)
		{
			NPC rCurrentNPC = Main.npc[iNPCIndex];
			Vector2 screenPos = Main.screenPosition;
			this.DrawNPCDirect(Main.spriteBatch, rCurrentNPC, behindTiles, screenPos);
		}

		// Token: 0x06000487 RID: 1159 RVA: 0x000B95D0 File Offset: 0x000B77D0
		public void DrawNPCDirect_QueenSlimeWings(NPC rCurrentNPC, SpriteBatch mySpriteBatch, Vector2 screenPos, Vector2 drawCenter, Color originColor)
		{
			Texture2D value = TextureAssets.Extra[185].Value;
			Rectangle rectangle = value.Frame(1, 4, 0, (int)rCurrentNPC.localAI[3] / 6, 0, 0);
			float scale = 0.8f;
			for (int i = 0; i < 2; i++)
			{
				float x = 1f;
				float num = 0f;
				SpriteEffects effects = 0;
				if (i == 1)
				{
					x = 0f;
					num = 0f - num + 2f;
					effects = 1;
				}
				Vector2 origin = rectangle.Size() * new Vector2(x, 0.5f);
				Vector2 vector;
				vector..ctor(drawCenter.X + num, drawCenter.Y);
				if (rCurrentNPC.rotation != 0f)
				{
					vector = vector.RotatedBy((double)rCurrentNPC.rotation, rCurrentNPC.Bottom);
				}
				vector -= screenPos;
				float num2 = MathHelper.Clamp(rCurrentNPC.velocity.Y, -6f, 6f) * -0.1f;
				if (i == 0)
				{
					num2 *= -1f;
				}
				mySpriteBatch.Draw(value, vector, new Rectangle?(rectangle), originColor, rCurrentNPC.rotation + num2, origin, scale, effects, 0f);
			}
		}

		// Token: 0x06000488 RID: 1160 RVA: 0x000B9700 File Offset: 0x000B7900
		public void DrawNPCDirect(SpriteBatch mySpriteBatch, NPC rCurrentNPC, bool behindTiles, Vector2 screenPos)
		{
			int type = rCurrentNPC.type;
			rCurrentNPC.SetFrameSize();
			if (rCurrentNPC.realLife == -1 && rCurrentNPC.life >= rCurrentNPC.lifeMax && !rCurrentNPC.boss)
			{
				bool flag = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0)).ToVector3().Length() > 0.4325f;
				bool flag2 = false;
				if (LockOnHelper.AimedTarget == rCurrentNPC)
				{
					flag2 = true;
				}
				else if (rCurrentNPC.Distance(Main.player[Main.myPlayer].Center) < 350f && flag)
				{
					flag2 = true;
				}
				if (flag2 && rCurrentNPC.lifeMax < 5)
				{
					flag2 = false;
				}
				if (flag2 && rCurrentNPC.aiStyle == 25 && rCurrentNPC.ai[0] == 0f)
				{
					flag2 = false;
				}
				if (flag2)
				{
					rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver + 0.025f, 0f, 1f);
				}
				else
				{
					rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
				}
			}
			else
			{
				rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
			}
			if (type == 1 && rCurrentNPC.ai[0] == -999f)
			{
				return;
			}
			if (type == 101)
			{
				bool flag3 = true;
				Vector2 vector;
				vector..ctor(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
				float num2 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
				float rotation = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num3 = 0.75f;
					int height = 28;
					float num4 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					if (num4 < 28f * num3)
					{
						height = (int)num4 - 40 + 28;
						flag4 = false;
					}
					num4 = 20f * num3 / num4;
					num *= num4;
					num2 *= num4;
					vector.X += num;
					vector.Y += num2;
					num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
					num2 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
					Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						color = rCurrentNPC.GetBestiaryEntryColor();
					}
					if (!flag3)
					{
						flag3 = true;
						mySpriteBatch.Draw(TextureAssets.Chain10.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain10.Width(), height)), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num3, 0, 0f);
					}
					else
					{
						flag3 = false;
						mySpriteBatch.Draw(TextureAssets.Chain11.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain10.Width(), height)), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num3, 0, 0f);
					}
				}
			}
			else if (rCurrentNPC.aiStyle == 13)
			{
				Vector2 vector2;
				vector2..ctor(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num5 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
				float num6 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
				float rotation2 = (float)Math.Atan2((double)num6, (double)num5) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					int num7 = 28;
					int num8 = 40;
					if (type == 259 || type == 260)
					{
						num8 = 20;
						num7 = 12;
					}
					float num9 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
					if (num9 < (float)num8)
					{
						num7 = (int)num9 - num8 + num7;
						flag5 = false;
					}
					num9 = (float)num7 / num9;
					num5 *= num9;
					num6 *= num9;
					vector2.X += num5;
					vector2.Y += num6;
					num5 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
					num6 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
					Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						color2 = rCurrentNPC.GetBestiaryEntryColor();
					}
					if (type == 259 || type == 260)
					{
						color2.B = byte.MaxValue;
						if (color2.R < 100)
						{
							color2.R = 100;
						}
						if (color2.G < 150)
						{
							color2.G = 150;
						}
					}
					if (type <= 175)
					{
						if (type == 56)
						{
							mySpriteBatch.Draw(TextureAssets.Chain5.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain4.Width(), num7)), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, 0, 0f);
							continue;
						}
						if (type == 175)
						{
							mySpriteBatch.Draw(TextureAssets.Chain14.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain14.Width(), num7)), color2, rotation2, new Vector2((float)TextureAssets.Chain14.Width() * 0.5f, (float)TextureAssets.Chain14.Height() * 0.5f), 1f, 0, 0f);
							continue;
						}
					}
					else
					{
						if (type == 259)
						{
							mySpriteBatch.Draw(TextureAssets.Chain24.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain24.Width(), num7)), color2, rotation2, new Vector2((float)TextureAssets.Chain24.Width() * 0.5f, (float)TextureAssets.Chain24.Height() * 0.5f), 1f, 0, 0f);
							continue;
						}
						if (type == 260)
						{
							mySpriteBatch.Draw(TextureAssets.Chain25.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain25.Width(), num7)), color2, rotation2, new Vector2((float)TextureAssets.Chain25.Width() * 0.5f, (float)TextureAssets.Chain25.Height() * 0.5f), 1f, 0, 0f);
							continue;
						}
					}
					mySpriteBatch.Draw(TextureAssets.Chain4.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain4.Width(), num7)), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, 0, 0f);
				}
			}
			if (type == 327)
			{
				float rotation3 = 0f;
				Vector2 vector3;
				vector3..ctor(rCurrentNPC.Center.X, rCurrentNPC.Center.Y + 80f);
				int num10 = (int)rCurrentNPC.localAI[1];
				Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.PumpkingCloak.Value, new Vector2(vector3.X - screenPos.X, vector3.Y - screenPos.Y), new Rectangle?(new Rectangle(0, TextureAssets.PumpkingCloak.Height() / 5 * num10, TextureAssets.PumpkingCloak.Width(), TextureAssets.PumpkingCloak.Height() / 5)), color3, rotation3, new Vector2((float)TextureAssets.PumpkingCloak.Width() * 0.5f, (float)TextureAssets.PumpkingCloak.Height() * 0.5f / 5f), 1f, 0, 0f);
			}
			if (type == 328)
			{
				Vector2 vector4;
				vector4..ctor(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int i = 0; i < 2; i++)
				{
					float num11 = Main.npc[(int)rCurrentNPC.ai[1]].position.X + (float)(Main.npc[(int)rCurrentNPC.ai[1]].width / 2) - vector4.X;
					float num12 = Main.npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(Main.npc[(int)rCurrentNPC.ai[1]].height / 2) - 30f - vector4.Y;
					float num13;
					if (i == 0)
					{
						num11 -= 200f * rCurrentNPC.ai[0];
						num12 += 130f;
						num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
						num13 = 92f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					else
					{
						num11 -= 50f * rCurrentNPC.ai[0];
						num12 += 80f;
						num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
						num13 = 60f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					float rotation4 = (float)Math.Atan2((double)num12, (double)num11) - 1.57f;
					Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.PumpkingArm.Value, new Vector2(vector4.X - screenPos.X, vector4.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.PumpkingArm.Width(), TextureAssets.PumpkingArm.Height())), color4, rotation4, new Vector2((float)TextureAssets.PumpkingArm.Width() * 0.5f, (float)TextureAssets.PumpkingArm.Height() * 0.5f), 1f, 0, 0f);
					if (i == 0)
					{
						vector4.X += num11 * num13 / 2f;
						vector4.Y += num12 * num13 / 2f;
					}
				}
			}
			if (type == 36)
			{
				Vector2 vector5;
				vector5..ctor(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int j = 0; j < 2; j++)
				{
					float num14 = Main.npc[(int)rCurrentNPC.ai[1]].position.X + (float)(Main.npc[(int)rCurrentNPC.ai[1]].width / 2) - vector5.X;
					float num15 = Main.npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(Main.npc[(int)rCurrentNPC.ai[1]].height / 2) - vector5.Y;
					float num16;
					if (j == 0)
					{
						num14 -= 200f * rCurrentNPC.ai[0];
						num15 += 130f;
						num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
						num16 = 92f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					else
					{
						num14 -= 50f * rCurrentNPC.ai[0];
						num15 += 80f;
						num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
						num16 = 60f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					float rotation5 = (float)Math.Atan2((double)num15, (double)num14) - 1.57f;
					Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.BoneArm.Value, new Vector2(vector5.X - screenPos.X, vector5.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height())), color5, rotation5, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, 0, 0f);
					if (j == 0)
					{
						vector5.X += num14 * num16 / 2f;
						vector5.Y += num15 * num16 / 2f;
					}
					else if (base.IsActive)
					{
						vector5.X += num14 * num16 - 16f;
						vector5.Y += num15 * num16 - 6f;
						int num17 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 5, num14 * 0.02f, num15 * 0.02f, 0, default(Color), 2f);
						Main.dust[num17].noGravity = true;
					}
				}
			}
			if (rCurrentNPC.aiStyle == 47)
			{
				float scale = rCurrentNPC.scale;
				Vector2 vector6;
				vector6..ctor(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
				Vector2 center = rCurrentNPC.Center;
				if (NPC.golemBoss != -1)
				{
					center = Main.npc[NPC.golemBoss].Center;
				}
				float num18 = center.X - vector6.X;
				float num19 = center.Y - vector6.Y;
				num19 -= 7f * scale;
				num18 = ((type != 247) ? (num18 + 66f * scale) : (num18 - 70f * scale));
				float rotation6 = (float)Math.Atan2((double)num19, (double)num18) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num20 = (float)Math.Sqrt((double)(num18 * num18 + num19 * num19));
					if (num20 < 16f)
					{
						flag6 = false;
					}
					else
					{
						num20 = 16f * scale / num20;
						num18 *= num20;
						num19 *= num20;
						vector6.X += num18;
						vector6.Y += num19;
						num18 = center.X - vector6.X;
						num19 = center.Y - vector6.Y;
						num19 -= 7f * scale;
						num18 = ((type != 247) ? (num18 + 66f * scale) : (num18 - 70f * scale));
						if (Main.getGoodWorld)
						{
							num19 += 8f;
						}
						Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
						mySpriteBatch.Draw(TextureAssets.Chain21.Value, new Vector2(vector6.X - screenPos.X, vector6.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain21.Width(), TextureAssets.Chain21.Height())), color6, rotation6, new Vector2((float)TextureAssets.Chain21.Width() * 0.5f, (float)TextureAssets.Chain21.Height() * 0.5f), scale, 0, 0f);
					}
				}
			}
			if (rCurrentNPC.aiStyle >= 33 && rCurrentNPC.aiStyle <= 36)
			{
				Vector2 vector7;
				vector7..ctor(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int k = 0; k < 2; k++)
				{
					float num21 = Main.npc[(int)rCurrentNPC.ai[1]].position.X + (float)(Main.npc[(int)rCurrentNPC.ai[1]].width / 2) - vector7.X;
					float num22 = Main.npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(Main.npc[(int)rCurrentNPC.ai[1]].height / 2) - vector7.Y;
					float num23;
					if (k == 0)
					{
						num21 -= 200f * rCurrentNPC.ai[0];
						num22 += 130f;
						num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
						num23 = 92f / num23;
						vector7.X += num21 * num23;
						vector7.Y += num22 * num23;
					}
					else
					{
						num21 -= 50f * rCurrentNPC.ai[0];
						num22 += 80f;
						num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
						num23 = 60f / num23;
						vector7.X += num21 * num23;
						vector7.Y += num22 * num23;
					}
					float rotation7 = (float)Math.Atan2((double)num22, (double)num21) - 1.57f;
					Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.BoneArm2.Value, new Vector2(vector7.X - screenPos.X, vector7.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height())), color7, rotation7, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, 0, 0f);
					if (k == 0)
					{
						vector7.X += num21 * num23 / 2f;
						vector7.Y += num22 * num23 / 2f;
					}
					else if (base.IsActive)
					{
						vector7.X += num21 * num23 - 16f;
						vector7.Y += num22 * num23 - 6f;
						int num24 = Dust.NewDust(new Vector2(vector7.X, vector7.Y), 30, 10, 6, num21 * 0.02f, num22 * 0.02f, 0, default(Color), 2.5f);
						Main.dust[num24].noGravity = true;
					}
				}
			}
			if (rCurrentNPC.aiStyle == 20)
			{
				Vector2 vector8;
				vector8..ctor(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num25 = rCurrentNPC.ai[1] - vector8.X;
				float num26 = rCurrentNPC.ai[2] - vector8.Y;
				float num27 = rCurrentNPC.rotation = (float)Math.Atan2((double)num26, (double)num25) - 1.57f;
				bool flag7 = true;
				while (flag7)
				{
					int height2 = 12;
					float num28 = (float)Math.Sqrt((double)(num25 * num25 + num26 * num26));
					if (num28 < 20f)
					{
						height2 = (int)num28 - 20 + 12;
						flag7 = false;
					}
					num28 = 12f / num28;
					num25 *= num28;
					num26 *= num28;
					vector8.X += num25;
					vector8.Y += num26;
					num25 = rCurrentNPC.ai[1] - vector8.X;
					num26 = rCurrentNPC.ai[2] - vector8.Y;
					Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.Chain.Value, new Vector2(vector8.X - screenPos.X, vector8.Y - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain.Width(), height2)), color8, num27, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, 0, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.SpikeBase.Value, new Vector2(rCurrentNPC.ai[1] - screenPos.X, rCurrentNPC.ai[2] - screenPos.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.SpikeBase.Width(), TextureAssets.SpikeBase.Height())), Lighting.GetColor((int)rCurrentNPC.ai[1] / 16, (int)(rCurrentNPC.ai[2] / 16f)), num27 - 0.75f, new Vector2((float)TextureAssets.SpikeBase.Width() * 0.5f, (float)TextureAssets.SpikeBase.Height() * 0.5f), 1f, 0, 0f);
			}
			Color npcColor = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0));
			if (rCurrentNPC.IsABestiaryIconDummy)
			{
				npcColor = rCurrentNPC.GetBestiaryEntryColor();
			}
			if (type >= 277 && type <= 280)
			{
				if (npcColor.R < 255)
				{
					npcColor.R = byte.MaxValue;
				}
				if (npcColor.G < 175)
				{
					npcColor.G = 175;
				}
			}
			if (type == -4)
			{
				int r = (int)npcColor.R;
				int g = (int)npcColor.G;
				int b = (int)npcColor.B;
				r *= 2;
				if (r > 255)
				{
					r = 255;
				}
				g *= 2;
				if (g > 255)
				{
					g = 255;
				}
				b *= 2;
				if (b > 255)
				{
					b = 255;
				}
				npcColor..ctor(r, g, b);
			}
			if (behindTiles && type != 113 && type != 114)
			{
				int num32 = (int)((rCurrentNPC.position.X - 8f) / 16f);
				int num29 = (int)((rCurrentNPC.position.X + (float)rCurrentNPC.width + 8f) / 16f);
				int num30 = (int)((rCurrentNPC.position.Y - 8f) / 16f);
				int num31 = (int)((rCurrentNPC.position.Y + (float)rCurrentNPC.height + 8f) / 16f);
				for (int l = num32; l <= num29; l++)
				{
					for (int m = num30; m <= num31; m++)
					{
						if (Lighting.Brightness(l, m) == 0f)
						{
							npcColor = Color.Black;
						}
					}
				}
			}
			NPCLoader.DrawEffects(rCurrentNPC, ref npcColor);
			if (NPCLoader.PreDraw(rCurrentNPC, Main.spriteBatch, screenPos, npcColor))
			{
				this.DrawNPCDirect_Inner(Main.spriteBatch, rCurrentNPC, behindTiles, screenPos, ref npcColor);
			}
			NPCLoader.PostDraw(rCurrentNPC, Main.spriteBatch, screenPos, npcColor);
		}

		// Token: 0x06000489 RID: 1161 RVA: 0x000BAFFC File Offset: 0x000B91FC
		private void DrawNPCDirect_Inner(SpriteBatch mySpriteBatch, NPC rCurrentNPC, bool behindTiles, Vector2 screenPos, ref Color npcColor)
		{
			int type = rCurrentNPC.type;
			npcColor = rCurrentNPC.GetNPCColorTintedByBuffs(npcColor);
			if (type == 50)
			{
				Vector2 zero = Vector2.Zero;
				float num33 = 0f;
				zero.Y -= rCurrentNPC.velocity.Y;
				zero.X -= rCurrentNPC.velocity.X * 2f;
				num33 += rCurrentNPC.velocity.X * 0.05f;
				if (rCurrentNPC.frame.Y == 120)
				{
					zero.Y += 2f;
				}
				if (rCurrentNPC.frame.Y == 360)
				{
					zero.Y -= 2f;
				}
				if (rCurrentNPC.frame.Y == 480)
				{
					zero.Y -= 6f;
				}
				mySpriteBatch.Draw(TextureAssets.Ninja.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Ninja.Width(), TextureAssets.Ninja.Height())), npcColor, num33, new Vector2((float)(TextureAssets.Ninja.Width() / 2), (float)(TextureAssets.Ninja.Height() / 2)), 1f, 0, 0f);
			}
			if (type == 71)
			{
				Vector2 zero2 = Vector2.Zero;
				float num34 = 0f;
				zero2.Y -= rCurrentNPC.velocity.Y * 0.3f;
				zero2.X -= rCurrentNPC.velocity.X * 0.6f;
				num34 += rCurrentNPC.velocity.X * 0.09f;
				if (rCurrentNPC.frame.Y == 120)
				{
					zero2.Y += 2f;
				}
				if (rCurrentNPC.frame.Y == 360)
				{
					zero2.Y -= 2f;
				}
				if (rCurrentNPC.frame.Y == 480)
				{
					zero2.Y -= 6f;
				}
				Texture2D itemTexture;
				Rectangle rectangle;
				Main.GetItemDrawFrame(327, out itemTexture, out rectangle);
				mySpriteBatch.Draw(itemTexture, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero2.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero2.Y), new Rectangle?(rectangle), npcColor, num34, rectangle.Size() / 2f, 1f, 0, 0f);
			}
			if (type == 69)
			{
				mySpriteBatch.Draw(TextureAssets.AntLion.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height + 14f), new Rectangle?(new Rectangle(0, 0, TextureAssets.AntLion.Width(), TextureAssets.AntLion.Height())), npcColor, (0f - rCurrentNPC.rotation) * 0.3f, new Vector2((float)(TextureAssets.AntLion.Width() / 2), (float)(TextureAssets.AntLion.Height() / 2)), 1f, 0, 0f);
			}
			if (type == 1 && rCurrentNPC.ai[1] > 0f)
			{
				Main.DrawNPC_SlimeItem(rCurrentNPC, type, npcColor, 0f);
			}
			float num35 = 0f;
			float num36 = Main.NPCAddHeight(rCurrentNPC);
			Vector2 halfSize;
			halfSize..ctor((float)(TextureAssets.Npc[type].Width() / 2), (float)(TextureAssets.Npc[type].Height() / Main.npcFrameCount[type] / 2));
			if (type == 108 || type == 124 || type == 625)
			{
				num35 = 2f;
			}
			else if (type == 357)
			{
				num35 = rCurrentNPC.localAI[0];
			}
			else if (type == 467)
			{
				num35 = 7f;
			}
			else if (type == 537)
			{
				num35 = 2f;
			}
			else if (type == 581)
			{
				num35 = -6f;
			}
			else if (type == 490)
			{
				num35 = 4f;
			}
			else if (type == 484)
			{
				num35 = 2f;
			}
			else if (type == 483)
			{
				num35 = 14f;
			}
			else if (type == 477)
			{
				num36 = 22f;
			}
			else if (type == 478)
			{
				num35 -= 2f;
			}
			else if (type == 606)
			{
				num35 -= 2f;
			}
			else if (type == 612 || type == 613)
			{
				num35 -= 2f;
			}
			else if (type == 469 && rCurrentNPC.ai[2] == 1f)
			{
				num35 = 14f;
			}
			else if (type <= 103)
			{
				if (type <= 64)
				{
					if (type == 4)
					{
						halfSize..ctor(55f, 107f);
						goto IL_6AE;
					}
					if (type - 63 > 1)
					{
						goto IL_6AE;
					}
				}
				else
				{
					if (type == 69)
					{
						halfSize.Y += 8f;
						goto IL_6AE;
					}
					if (type != 103)
					{
						goto IL_6AE;
					}
				}
				halfSize.Y += 4f;
			}
			else if (type <= 126)
			{
				if (type != 125)
				{
					if (type == 126)
					{
						halfSize..ctor(55f, 107f);
					}
				}
				else
				{
					halfSize..ctor(55f, 107f);
				}
			}
			else
			{
				switch (type)
				{
				case 262:
					halfSize.Y = 77f;
					num36 += 26f;
					break;
				case 263:
				case 265:
				case 267:
					break;
				case 264:
					halfSize.Y = 21f;
					num36 += 2f;
					break;
				case 266:
					num36 += 50f * rCurrentNPC.scale;
					break;
				case 268:
					num36 += 16f;
					break;
				default:
					if (type != 288)
					{
						if (type - 626 <= 1)
						{
							if (rCurrentNPC.wet)
							{
								num35 = -2f;
								halfSize = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2(0f, -4f);
							}
							else
							{
								num35 = 2f;
							}
						}
					}
					else
					{
						num36 += 6f;
					}
					break;
				}
			}
			IL_6AE:
			if (rCurrentNPC.aiStyle == 10 || type == 72)
			{
				npcColor = Color.White;
			}
			SpriteEffects spriteEffects = 0;
			if (rCurrentNPC.spriteDirection == 1)
			{
				spriteEffects = 1;
			}
			if (type == 124 && rCurrentNPC.localAI[0] == 0f)
			{
				int num37 = 0;
				if (rCurrentNPC.frame.Y > 56)
				{
					num37 += 4;
				}
				num37 += rCurrentNPC.frame.Y / 56;
				if (num37 >= Main.OffsetsPlayerHeadgear.Length)
				{
					num37 = 0;
				}
				float y = Main.OffsetsPlayerHeadgear[num37].Y;
				this.LoadProjectile(582);
				Texture2D value = TextureAssets.Projectile[582].Value;
				if (rCurrentNPC.townNpcVariationIndex == 1)
				{
					value = TextureAssets.Extra[263].Value;
				}
				Vector2 position = rCurrentNPC.Center - screenPos;
				position -= new Vector2((float)value.Width, (float)(value.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position += new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY + y);
				position += new Vector2((float)(-(float)rCurrentNPC.spriteDirection * 2), -2f);
				mySpriteBatch.Draw(value, position, null, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, value.Size() * new Vector2(0f, 0.5f), rCurrentNPC.scale, spriteEffects, 0f);
			}
			if (type <= 521)
			{
				if (type - 426 <= 2 || type == 521)
				{
					goto IL_1149C;
				}
			}
			else if (type == 523 || type - 541 <= 4 || type == 581)
			{
				goto IL_1149C;
			}
			if (type != 546 && type != 552 && type != 553 && type != 554 && type != 561 && type != 562 && type != 563 && type != 555 && type != 556 && type != 557 && type != 558 && type != 559 && type != 560 && type != 574 && type != 575 && type != 568 && type != 569 && type != 572 && type != 573 && type != 566 && type != 567 && type != 570 && type != 578 && type != 571 && type != 583 && type != 584 && type != 585 && type != 618 && type != 620 && type != 661)
			{
				if (type <= 551)
				{
					if (type <= 459)
					{
						if (type == 371 || type - 454 <= 5)
						{
							goto IL_2697;
						}
					}
					else
					{
						if (type == 548)
						{
							Texture2D value2 = TextureAssets.Npc[type].Value;
							Vector2 vector15 = rCurrentNPC.Bottom - screenPos;
							Rectangle rectangle2 = value2.Frame(1, 1, 0, 0, 0, 0);
							Vector2 origin3 = rectangle2.Size() / 2f;
							origin3.Y += 30f;
							origin3.Y += 8f;
							origin3.X -= 1f;
							Color white = Color.White;
							float amount = 0f;
							float amount2 = 0f;
							int num38 = 0;
							float num39 = 0f;
							float num40 = 0f;
							Color newColor = npcColor;
							for (int num41 = 0; num41 < num38; num41++)
							{
								Color value3 = npcColor;
								value3 = Color.Lerp(value3, white, amount);
								value3 = rCurrentNPC.GetAlpha(value3);
								value3 = Color.Lerp(value3, white, amount2);
								value3 *= 1f - num39;
								Vector2 position2 = vector15;
								position2 -= new Vector2((float)value2.Width, (float)(value2.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position2 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								position2 += ((float)num41 / (float)num38 * 6.2831855f).ToRotationVector2() * num40 * num39;
								mySpriteBatch.Draw(value2, position2, new Rectangle?(rectangle2), value3, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							}
							Color alpha = rCurrentNPC.GetAlpha(newColor);
							num38 = 4;
							num40 = 4f;
							num39 = 0.625f + (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 0.75f + 3.1415927f)) * 0.125f;
							for (int num42 = 0; num42 < num38; num42++)
							{
								Color color12 = alpha;
								color12.A = 0;
								color12 *= 1f - num39;
								Vector2 position3 = vector15;
								position3 -= new Vector2((float)value2.Width, (float)(value2.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position3 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								position3 += ((float)num42 / (float)num38 * 6.2831855f).ToRotationVector2() * num40 * num39;
								mySpriteBatch.Draw(value2, position3, new Rectangle?(rectangle2), color12, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							}
							mySpriteBatch.Draw(value2, vector15, new Rectangle?(rectangle2), alpha, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							if (rCurrentNPC.ai[1] == 2f)
							{
								float num43 = Math.Min(1f, rCurrentNPC.ai[0] / 120f);
								mySpriteBatch.Draw(value2, vector15, new Rectangle?(rectangle2), new Color(1f, 1f, 1f, 0f) * num43, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
								float progress = MathHelper.Clamp(rCurrentNPC.ai[0] / 450f, 0f, 1f);
								if (!Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].IsActive())
								{
									Terraria.Graphics.Effects.Filters.Scene.Activate("CrystalWin", rCurrentNPC.Center, Array.Empty<object>());
								}
								else
								{
									Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseProgress(progress);
								}
								Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseTargetPosition(rCurrentNPC.Center);
							}
							num38 = 4;
							num40 = 4f;
							num39 = 0.625f + (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 0.75f)) * 0.125f;
							for (int num44 = 0; num44 < num38; num44++)
							{
								Color color13 = alpha;
								color13.A = 0;
								color13 *= 0.3f;
								color13 *= 1f - num39;
								Vector2 position4 = vector15;
								position4 -= new Vector2((float)value2.Width, (float)(value2.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position4 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								position4 += ((float)num44 / (float)num38 * 6.2831855f).ToRotationVector2() * num40 * num39;
								mySpriteBatch.Draw(value2, position4, new Rectangle?(rectangle2), color13, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							}
							if (rCurrentNPC.alpha < 255)
							{
								float num45 = Main.GlobalTimeWrappedHourly % 3f / 3f;
								float num46 = num45;
								if (num46 > 0.5f)
								{
									num46 = 1f - num45;
								}
								if (num46 < 0f)
								{
									num46 = 0f;
								}
								float num47 = (num45 + 0.5f) % 1f;
								float num48 = num47;
								if (num48 > 0.5f)
								{
									num48 = 1f - num47;
								}
								if (num48 < 0f)
								{
									num48 = 0f;
								}
								value2 = TextureAssets.GlowMask[239].Value;
								rectangle2 = value2.Frame(1, 1, 0, 0, 0, 0);
								origin3 = rectangle2.Size() / 2f;
								Vector2 position5 = vector15 + new Vector2(0f, -40f);
								Color color14;
								color14..ctor(140, 50, 255, 0);
								color14 *= 0.6f;
								mySpriteBatch.Draw(value2, position5, new Rectangle?(rectangle2), color14, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f, spriteEffects ^ 1, 0f);
								num39 = 1f + num45 * 0.75f;
								mySpriteBatch.Draw(value2, position5, new Rectangle?(rectangle2), color14 * num46, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f * num39, spriteEffects ^ 1, 0f);
								num39 = 1f + num47 * 0.75f;
								mySpriteBatch.Draw(value2, position5, new Rectangle?(rectangle2), color14 * num48, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f * num39, spriteEffects ^ 1, 0f);
								value2 = TextureAssets.Extra[89].Value;
								rectangle2 = value2.Frame(1, 1, 0, 0, 0, 0);
								origin3 = rectangle2.Size() / 2f;
								Vector2 scale2 = new Vector2(0.75f, 1f + num39) * 1.5f;
								num39 = 1f + num47 * 0.75f;
								if (rCurrentNPC.dontTakeDamageFromHostiles)
								{
									scale2.Y *= 0.6f;
								}
								position5.Y -= 6f;
								mySpriteBatch.Draw(value2, position5, new Rectangle?(rectangle2), color14 * num48, rCurrentNPC.rotation + 1.5707964f, origin3, scale2, spriteEffects ^ 1, 0f);
								mySpriteBatch.Draw(value2, position5, new Rectangle?(rectangle2), Color.Lerp(color14, Color.White, 0.5f), rCurrentNPC.rotation + 1.5707964f, origin3, 1.5f, spriteEffects ^ 1, 0f);
							}
							return;
						}
						if (type == 551)
						{
							Texture2D value4 = TextureAssets.Npc[type].Value;
							Vector2 vector16 = rCurrentNPC.Center - screenPos;
							Rectangle frame = rCurrentNPC.frame;
							frame.Size() / 2f;
							SpriteEffects spriteEffects2 = spriteEffects ^ 1;
							float rotation8 = rCurrentNPC.rotation;
							Color color15 = npcColor;
							Color color16 = Color.Lerp(color15, Color.White, 0.6f);
							color16.A = 66;
							Vector2 vector75 = new Vector2(171f, 44f);
							Vector2 vector17;
							vector17..ctor(230f, 52f);
							Vector2 vector18 = Vector2.Lerp(vector75, vector17, 0.5f) + new Vector2(-50f, 30f);
							int num49 = (int)rCurrentNPC.localAI[0] / 4;
							Vector2 spinningpoint = vector75 - vector18;
							Vector2 spinningpoint2 = vector17 - vector18;
							Texture2D value5 = TextureAssets.Extra[82].Value;
							if (spriteEffects2.HasFlag(1))
							{
								spinningpoint2.X *= -1f;
							}
							Rectangle value6 = value5.Frame(2, 5, num49 / 5, num49 % 5, 0, 0);
							Vector2 origin4;
							origin4..ctor(16f, 176f);
							if (spriteEffects2.HasFlag(1))
							{
								origin4.X = (float)value6.Width - origin4.X;
							}
							if (spriteEffects2.HasFlag(1))
							{
								vector18.X = (float)frame.Width - vector18.X;
							}
							Texture2D value7 = TextureAssets.Extra[81].Value;
							if (spriteEffects2.HasFlag(1))
							{
								spinningpoint.X *= -1f;
							}
							Rectangle value8 = value7.Frame(2, 5, num49 / 5, num49 % 5, 0, 0);
							Vector2 origin5;
							origin5..ctor(215f, 170f);
							if (spriteEffects2.HasFlag(1))
							{
								origin5.X = (float)value8.Width - origin5.X;
							}
							float lerpValue = Utils.GetLerpValue(0f, 30f, rCurrentNPC.localAI[1], true);
							if (lerpValue == 1f)
							{
								lerpValue = Utils.GetLerpValue(60f, 30f, rCurrentNPC.localAI[1], true);
							}
							lerpValue = 2f;
							Vector2 vector19 = rCurrentNPC.Size / 2f - screenPos;
							int num50 = -3;
							int num51 = 0;
							byte b2 = 2;
							for (int i = 9; i > num51; i += num50)
							{
								Vector2 vector20 = rCurrentNPC.oldPos[i] + vector19;
								float num52 = rCurrentNPC.oldRot[i];
								Color color17 = color15 * (1f - (float)i / 10f) * 0.35f;
								color17.A /= b2;
								mySpriteBatch.Draw(value5, vector20 + spinningpoint2.RotatedBy((double)num52, default(Vector2)), new Rectangle?(value6), color17, num52, origin4, 1f, spriteEffects2, 0f);
								mySpriteBatch.Draw(value4, vector20, new Rectangle?(frame), color17, num52, vector18, 1f, spriteEffects2, 0f);
								mySpriteBatch.Draw(value7, vector20 + spinningpoint.RotatedBy((double)num52, default(Vector2)), new Rectangle?(value8), color17, num52, origin5, 1f, spriteEffects2, 0f);
							}
							mySpriteBatch.Draw(value5, vector16 + spinningpoint2.RotatedBy((double)rotation8, default(Vector2)), new Rectangle?(value6), color15, rotation8, origin4, 1f, spriteEffects2, 0f);
							mySpriteBatch.Draw(value4, vector16, new Rectangle?(frame), color15, rotation8, vector18, 1f, spriteEffects2, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[226].Value, vector16, new Rectangle?(frame), color16 * (0.7f + 0.3f * lerpValue), rotation8, vector18, 1f, spriteEffects2, 0f);
							mySpriteBatch.Draw(value7, vector16 + spinningpoint.RotatedBy((double)rotation8, default(Vector2)), new Rectangle?(value8), color15, rotation8, origin5, 1f, spriteEffects2, 0f);
							return;
						}
					}
				}
				else if (type <= 577)
				{
					if (type - 564 <= 1)
					{
						Texture2D value9 = TextureAssets.Npc[type].Value;
						Vector2 vector21 = rCurrentNPC.Bottom - screenPos;
						Rectangle rectangle3 = value9.Frame(5, 9, rCurrentNPC.frame.Y / 9, rCurrentNPC.frame.Y % 9, 0, 0);
						Vector2 origin6 = rectangle3.Size() * new Vector2(0.5f, 1f);
						origin6.Y -= 10f;
						int num53 = 52;
						if (rCurrentNPC.spriteDirection == 1)
						{
							origin6.X = (float)num53;
						}
						else
						{
							origin6.X = (float)(rectangle3.Width - num53);
						}
						Color value10 = Color.White;
						float amount3 = 0f;
						float amount4 = 0f;
						int num54 = 0;
						float num55 = 0f;
						float num56 = 0f;
						Color color18 = npcColor;
						if (rCurrentNPC.localAI[3] < 60f)
						{
							float num57 = rCurrentNPC.localAI[3] / 60f;
							num54 = 3;
							num55 = 1f - num57 * num57;
							num56 = 8f;
							value10..ctor(127, 0, 255, 0);
							amount4 = 1f;
							color18 = Color.Lerp(Color.Transparent, color18, num57 * num57);
						}
						for (int num58 = 0; num58 < num54; num58++)
						{
							Color value11 = npcColor;
							value11 = Color.Lerp(value11, value10, amount3);
							value11 = rCurrentNPC.GetAlpha(value11);
							value11 = Color.Lerp(value11, value10, amount4);
							value11 *= 1f - num55;
							Vector2 position6 = vector21;
							position6 -= new Vector2((float)value9.Width, (float)(value9.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position6 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							position6 += ((float)num58 / (float)num54 * 6.2831855f).ToRotationVector2() * num56 * num55;
							mySpriteBatch.Draw(value9, position6, new Rectangle?(rectangle3), value11, rCurrentNPC.rotation, origin6, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						}
						Color alpha2 = rCurrentNPC.GetAlpha(color18);
						num54 = 4;
						num56 = 4f;
						num55 = 0.625f + (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 0.75f + 3.1415927f)) * 0.125f;
						for (int num59 = 0; num59 < num54; num59++)
						{
							Color color19 = alpha2;
							color19 *= 1f - num55;
							Vector2 position7 = vector21;
							position7 -= new Vector2((float)value9.Width, (float)(value9.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position7 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							position7 += ((float)num59 / (float)num54 * 6.2831855f).ToRotationVector2() * num56 * num55;
							mySpriteBatch.Draw(value9, position7, new Rectangle?(rectangle3), color19, rCurrentNPC.rotation, origin6, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						}
						mySpriteBatch.Draw(value9, vector21, new Rectangle?(rectangle3), alpha2, rCurrentNPC.rotation, origin6, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						if (rCurrentNPC.Opacity > 0f)
						{
							Color white2 = Color.White;
							white2.A /= 2;
							white2 *= rCurrentNPC.Opacity;
							mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, vector21, new Rectangle?(rectangle3), white2, rCurrentNPC.rotation, origin6, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							num54 = 4;
							num56 = 4f;
							num55 = 0.5f + (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 0.75f)) * 0.5f;
							for (int num60 = 0; num60 < num54; num60++)
							{
								Color color20 = white2 * 0.35f;
								color20 *= 1f - num55;
								Vector2 position8 = vector21;
								position8 -= new Vector2((float)value9.Width, (float)(value9.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position8 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								position8 += ((float)num60 / (float)num54 * 6.2831855f).ToRotationVector2() * num56 * num55;
								mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, position8, new Rectangle?(rectangle3), color20, rCurrentNPC.rotation, origin6, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							}
						}
						return;
					}
					if (type - 576 <= 1)
					{
						Texture2D value12 = TextureAssets.Npc[type].Value;
						Vector2 vector22 = rCurrentNPC.Bottom - screenPos;
						Rectangle rectangle4 = value12.Frame(5, 10, rCurrentNPC.frame.Y / 10, rCurrentNPC.frame.Y % 10, 0, 0);
						Vector2 origin7 = rectangle4.Size() * new Vector2(0.5f, 1f);
						origin7.Y -= 4f;
						int num61 = 94;
						if (rCurrentNPC.spriteDirection == 1)
						{
							origin7.X = (float)num61;
						}
						else
						{
							origin7.X = (float)(rectangle4.Width - num61);
						}
						Color value13 = Color.White;
						float amount5 = 0f;
						float amount6 = 0f;
						int num62 = 0;
						float num63 = 0f;
						Color color21 = npcColor;
						if (rCurrentNPC.localAI[3] < 60f)
						{
							float num64 = rCurrentNPC.localAI[3] / 60f;
							num62 = 3;
							num63 = 1f - num64 * num64;
							value13..ctor(127, 0, 255, 0);
							amount6 = 1f;
							color21 = Color.Lerp(Color.Transparent, color21, num64 * num64);
						}
						for (int num65 = 0; num65 < num62; num65++)
						{
							Color value14 = npcColor;
							value14 = Color.Lerp(value14, value13, amount5);
							value14 = rCurrentNPC.GetAlpha(value14);
							value14 = Color.Lerp(value14, value13, amount6);
							value14 *= 1f - num63;
							Vector2 position9 = vector22;
							position9 -= new Vector2((float)value12.Width, (float)(value12.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position9 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value12, position9, new Rectangle?(rectangle4), value14, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						}
						mySpriteBatch.Draw(value12, vector22, new Rectangle?(rectangle4), rCurrentNPC.GetAlpha(color21), rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						return;
					}
				}
				else
				{
					if (type == 594)
					{
						Texture2D value15 = TextureAssets.Npc[type].Value;
						Vector2 position10 = rCurrentNPC.Top - screenPos;
						Rectangle rectangle5 = value15.Frame(8, 1, rCurrentNPC.frame.Y, 0, 0, 0);
						Rectangle value16 = value15.Frame(8, 1, 0, 0, 0, 0);
						Vector2 origin8 = rectangle5.Size() * new Vector2(0.5f, 0f);
						Color color22 = npcColor;
						float scale3 = 1f;
						NPC nPC = rCurrentNPC.AI_113_WindyBalloon_GetSlaveNPC();
						if (nPC != null)
						{
							scale3 = nPC.scale;
							if (nPC.ai[1] > 0f)
							{
								Main.DrawNPC_SlimeItem(nPC, nPC.type, color22, rCurrentNPC.rotation);
							}
							mySpriteBatch.Draw(value15, position10, new Rectangle?(value16), nPC.GetAlpha(color22), rCurrentNPC.rotation, origin8, scale3, spriteEffects, 0f);
							mySpriteBatch.Draw(value15, position10, new Rectangle?(value16), nPC.GetColor(color22), rCurrentNPC.rotation, origin8, scale3, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(value15, position10, new Rectangle?(rectangle5), rCurrentNPC.GetAlpha(color22), rCurrentNPC.rotation, origin8, scale3, spriteEffects, 0f);
						return;
					}
					if (type == 657)
					{
						Texture2D value17 = TextureAssets.Npc[type].Value;
						Vector2 position11 = rCurrentNPC.Bottom - screenPos;
						position11.Y += 2f;
						int num66 = Main.npcFrameCount[rCurrentNPC.type];
						int num67 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
						Rectangle rectangle6 = value17.Frame(2, 16, num67 / num66, num67 % num66, 0, 0);
						rectangle6.Inflate(0, -2);
						Vector2 origin9 = rectangle6.Size() * new Vector2(0.5f, 1f);
						Color color23 = Color.Lerp(Color.White, npcColor, 0.5f);
						if (rCurrentNPC.life <= rCurrentNPC.lifeMax / 2)
						{
							this.DrawNPCDirect_QueenSlimeWings(rCurrentNPC, mySpriteBatch, screenPos, rCurrentNPC.Center, color23);
						}
						Texture2D value18 = TextureAssets.Extra[186].Value;
						Rectangle rectangle7 = value18.Frame(1, 1, 0, 0, 0, 0);
						Vector2 origin10 = rectangle7.Size() * new Vector2(0.5f, 0.5f);
						Vector2 vector23;
						vector23..ctor(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
						float num68 = 0f;
						switch (num67)
						{
						case 1:
						case 6:
							num68 -= 10f;
							break;
						case 3:
						case 5:
							num68 += 10f;
							break;
						case 4:
						case 12:
						case 13:
						case 14:
						case 15:
							num68 += 18f;
							break;
						case 7:
						case 8:
							num68 -= 14f;
							break;
						case 9:
							num68 -= 16f;
							break;
						case 10:
							num68 -= 18f;
							break;
						case 11:
							num68 += 20f;
							break;
						case 20:
							num68 -= 14f;
							break;
						case 21:
						case 23:
							num68 -= 18f;
							break;
						case 22:
							num68 -= 22f;
							break;
						}
						vector23.Y += num68;
						if (rCurrentNPC.rotation != 0f)
						{
							vector23 = vector23.RotatedBy((double)rCurrentNPC.rotation, rCurrentNPC.Bottom);
						}
						vector23 -= screenPos;
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
						}
						GameShaders.Misc["QueenSlime"].Apply(null);
						if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.velocity.Y != 0f)
						{
							float num69 = 1f;
							if (rCurrentNPC.ai[2] == 1f)
							{
								num69 = 6f;
							}
							for (int num70 = 7; num70 >= 0; num70--)
							{
								float num71 = 1f - (float)num70 / 8f;
								Vector2 vector24 = rCurrentNPC.oldPos[num70] + new Vector2((float)rCurrentNPC.width * 0.5f, (float)rCurrentNPC.height);
								vector24 -= (rCurrentNPC.Bottom - Vector2.Lerp(vector24, rCurrentNPC.Bottom, 0.75f)) * num69;
								vector24 -= screenPos;
								Color color24 = color23 * num71;
								mySpriteBatch.Draw(value17, vector24, new Rectangle?(rectangle6), color24, rCurrentNPC.rotation, origin9, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
							}
						}
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
						}
						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
						mySpriteBatch.Draw(value18, vector23, new Rectangle?(rectangle7), color23, rCurrentNPC.rotation, origin10, 1f, spriteEffects ^ 1, 0f);
						GameShaders.Misc["QueenSlime"].Apply(null);
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
						}
						DrawData value19 = new DrawData(value17, position11, new Rectangle?(rectangle6), rCurrentNPC.GetAlpha(color23), rCurrentNPC.rotation, origin9, rCurrentNPC.scale, spriteEffects ^ 1, 0f);
						GameShaders.Misc["QueenSlime"].Apply(new DrawData?(value19));
						value19.Draw(mySpriteBatch);
						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
						}
						Texture2D value20 = TextureAssets.Extra[177].Value;
						rectangle6 = value20.Frame(1, 1, 0, 0, 0, 0);
						origin9 = rectangle6.Size() * new Vector2(0.5f, 0.5f);
						position11..ctor(rCurrentNPC.Center.X, rCurrentNPC.Top.Y - (float)rectangle6.Bottom + 44f);
						float num72 = 0f;
						switch (num67)
						{
						case 1:
							num72 -= 10f;
							break;
						case 3:
						case 5:
						case 6:
							num72 += 10f;
							break;
						case 4:
						case 12:
						case 13:
						case 14:
						case 15:
							num72 += 18f;
							break;
						case 7:
						case 8:
							num72 -= 14f;
							break;
						case 9:
							num72 -= 16f;
							break;
						case 10:
							num72 -= 18f;
							break;
						case 11:
							num72 += 20f;
							break;
						case 20:
							num72 -= 14f;
							break;
						case 21:
						case 23:
							num72 -= 18f;
							break;
						case 22:
							num72 -= 22f;
							break;
						}
						position11.Y += num72;
						if (rCurrentNPC.rotation != 0f)
						{
							position11 = position11.RotatedBy((double)rCurrentNPC.rotation, rCurrentNPC.Bottom);
						}
						position11 -= screenPos;
						mySpriteBatch.Draw(value20, position11, new Rectangle?(rectangle6), color23, rCurrentNPC.rotation, origin9, 1f, spriteEffects ^ 1, 0f);
						return;
					}
					if (type == 686)
					{
						Texture2D value21 = TextureAssets.Npc[type].Value;
						Vector2 position12 = rCurrentNPC.Top - screenPos;
						Rectangle rectangle8 = value21.Frame(1, 1, 0, 0, 0, 0);
						Vector2 origin11 = rectangle8.Size() * new Vector2(0.5f, 0f);
						Color newColor2 = npcColor;
						mySpriteBatch.Draw(value21, position12, new Rectangle?(rectangle8), rCurrentNPC.GetAlpha(newColor2), rCurrentNPC.rotation, origin11, rCurrentNPC.scale, spriteEffects, 0f);
						return;
					}
				}
				if (type < 621 || type > 623)
				{
					if (type <= 440)
					{
						if (type <= 370)
						{
							if (type <= 92)
							{
								if (type - 83 > 1)
								{
									if (type - 87 > 5)
									{
										goto IL_50D4;
									}
									Color alpha3 = rCurrentNPC.GetAlpha(npcColor);
									byte b3 = (Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3;
									if (alpha3.R < b3)
									{
										alpha3.R = b3;
									}
									if (alpha3.G < b3)
									{
										alpha3.G = b3;
									}
									if (alpha3.B < b3)
									{
										alpha3.B = b3;
									}
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), alpha3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									return;
								}
							}
							else if (type != 179)
							{
								if (type != 370)
								{
									goto IL_50D4;
								}
								goto IL_3D1A;
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						if (type <= 395)
						{
							if (type - 372 > 1)
							{
								if (type - 392 > 3)
								{
									goto IL_50D4;
								}
								Texture2D value22 = TextureAssets.Npc[type].Value;
								Vector2 vec = rCurrentNPC.Center - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY;
								vec = vec.Floor();
								float num73 = 0f;
								if (type == 393)
								{
									num73 = -8f;
								}
								mySpriteBatch.Draw(value22, vec, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num73, rCurrentNPC.scale, spriteEffects, 0f);
								if (type == 392)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[48].Value, vec, new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num73, rCurrentNPC.scale, spriteEffects, 0f);
								}
								if (type == 395)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[49].Value, vec, new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num73, rCurrentNPC.scale, spriteEffects, 0f);
								}
								if (type == 394)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[50].Value, vec, new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num73, rCurrentNPC.scale, spriteEffects, 0f);
									return;
								}
								return;
							}
						}
						else
						{
							if (type == 402)
							{
								this.LoadNPC(403);
								this.LoadNPC(404);
								Texture2D value23 = TextureAssets.Npc[rCurrentNPC.type].Value;
								Vector2 vector25 = rCurrentNPC.Center - screenPos;
								vector25 -= new Vector2((float)value23.Width, (float)(value23.Height / Main.npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
								vector25 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								int num74 = 0;
								float num75 = 2f / (float)rCurrentNPC.oldPos.Length * 0.7f;
								float num76 = 600f;
								float num77 = num76 - 30f;
								float num78 = Utils.Remap(rCurrentNPC.ai[2], 0f, num76, 0f, 1f, true);
								float num79 = 1f - Utils.Remap(num78, 0.5f, num77 / num76, 0f, 1f, true) * Utils.Remap(num78, num77 / num76, 1f, 1f, 0f, true);
								int num80 = rCurrentNPC.oldPos.Length - 1;
								while ((float)num80 >= 1f)
								{
									for (int num81 = 0; num81 < 2; num81++)
									{
										value23 = ((num74 != 0) ? TextureAssets.Npc[403].Value : TextureAssets.Npc[404].Value);
										Vector2 position13 = vector25 + rCurrentNPC.oldPos[num80] - rCurrentNPC.position;
										float rotation9 = rCurrentNPC.oldRot[num80];
										if (num80 >= 1 && num81 == 1)
										{
											Vector2 vector26 = Vector2.Lerp(rCurrentNPC.oldPos[num80], rCurrentNPC.oldPos[num80 - 1], 0.5f) - rCurrentNPC.oldPos[num80];
											rotation9 = MathHelper.WrapAngle(rCurrentNPC.oldRot[num80 - 1] * 0.5f + rCurrentNPC.oldRot[num80] * 0.5f);
											position13 += vector26;
										}
										float scale4 = rCurrentNPC.scale;
										mySpriteBatch.Draw(value23, position13, null, rCurrentNPC.GetAlpha(npcColor) * (0.8f - num75 * (float)num80 / 2f) * num79, rotation9, halfSize, scale4, spriteEffects, 0f);
										value23 = ((num74 != 0) ? TextureAssets.GlowMask[133].Value : TextureAssets.GlowMask[134].Value);
										mySpriteBatch.Draw(value23, position13, null, new Color(255, 255, 255, 0) * (1f - num75 * (float)num80 / 2f) * num79, rotation9, halfSize, scale4, spriteEffects, 0f);
										num74++;
									}
									num80 -= 2;
								}
								value23 = TextureAssets.Npc[rCurrentNPC.type].Value;
								mySpriteBatch.Draw(value23, vector25, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								value23 = TextureAssets.GlowMask[135].Value;
								mySpriteBatch.Draw(value23, vector25, new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0) * num79, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								Main.DrawPrettyStarSparkle(Utils.Remap(rCurrentNPC.ai[2], 0f, num76, 0f, 1f, true), 0, vector25, new Color(255, 255, 255, 0), Color.CornflowerBlue, num78, 0.5f, num77 / num76, num77 / num76, 1f, 6.2831855f * num78, new Vector2(2f, 2f), new Vector2(2f, 2f));
								return;
							}
							if (type == 422)
							{
								goto IL_2D12;
							}
							if (type - 439 > 1)
							{
								goto IL_50D4;
							}
							int num303 = rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
							Texture2D value24 = TextureAssets.Npc[type].Value;
							Texture2D value25 = TextureAssets.Extra[30].Value;
							Rectangle rectangle9 = value25.Frame(1, 1, 0, 0, 0, 0);
							rectangle9.Height /= 2;
							if (num303 >= 4)
							{
								rectangle9.Y += rectangle9.Height;
							}
							Color white3 = Color.White;
							float amount7 = 0f;
							Color color25 = npcColor;
							int num82 = 0;
							int num83 = 0;
							int num84 = 0;
							if (rCurrentNPC.ai[0] == -1f)
							{
								if (rCurrentNPC.ai[1] >= 320f && rCurrentNPC.ai[1] < 960f)
								{
									white3 = Color.White;
									amount7 = 0.5f;
									num82 = 6;
									num83 = 2;
									num84 = 1;
								}
							}
							else if (rCurrentNPC.ai[0] == 1f)
							{
								white3 = Color.White;
								amount7 = 0.5f;
								num82 = 4;
								num83 = 2;
								num84 = 1;
							}
							else
							{
								color25 = npcColor;
							}
							for (int num85 = num84; num85 < num82; num85 += num83)
							{
								Vector2[] oldPos = rCurrentNPC.oldPos;
								Color value26 = color25;
								value26 = Color.Lerp(value26, white3, amount7);
								value26 = rCurrentNPC.GetAlpha(value26);
								value26 *= (float)(num82 - num85) / (float)num82;
								value26.A = 100;
								Vector2 position14 = rCurrentNPC.oldPos[num85] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
								position14 -= rectangle9.Size() * rCurrentNPC.scale / 2f;
								position14 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								mySpriteBatch.Draw(value25, position14, new Rectangle?(rectangle9), value26, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							int num86 = 0;
							float num87 = 0f;
							float num88 = 0f;
							if (rCurrentNPC.ai[0] == 5f && rCurrentNPC.ai[1] >= 0f && rCurrentNPC.ai[1] < 30f)
							{
								num86 = 4;
								num87 = 1f - (float)Math.Cos((double)((rCurrentNPC.ai[1] - 0f) / 30f * 3.1415927f));
								num87 /= 2f;
								num88 = 70f;
							}
							for (int num89 = 0; num89 < num86; num89++)
							{
								Color value27 = npcColor;
								value27 = Color.Lerp(value27, white3, amount7);
								value27 = rCurrentNPC.GetAlpha(value27);
								value27 *= 1f - num87;
								Vector2 position15 = rCurrentNPC.Center + ((float)num89 / (float)num86 * 6.2831855f + rCurrentNPC.rotation).ToRotationVector2() * num88 * num87 - screenPos;
								position15 -= new Vector2((float)value24.Width, (float)(value24.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position15 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								mySpriteBatch.Draw(value25, position15, new Rectangle?(rectangle9), value27, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							Vector2 position16 = rCurrentNPC.Center - screenPos;
							position16 -= new Vector2((float)value24.Width, (float)(value24.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position16 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value24, position16, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						IL_3D1A:
						Texture2D value28 = TextureAssets.Npc[type].Value;
						Color value29 = Color.White;
						float amount8 = 0f;
						bool flag12 = type == 370 && rCurrentNPC.ai[0] > 4f;
						bool flag17 = type == 370 && rCurrentNPC.ai[0] > 9f;
						int num90 = 120;
						int num91 = 60;
						Color color26 = npcColor;
						if (flag17)
						{
							npcColor = Main.buffColor(npcColor, 0.4f, 0.8f, 0.4f, 1f);
						}
						else if (flag12)
						{
							npcColor = Main.buffColor(npcColor, 0.5f, 0.7f, 0.5f, 1f);
						}
						else if (type == 370 && rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num90)
						{
							float num92 = rCurrentNPC.ai[2] - (float)num90;
							num92 /= (float)num91;
							npcColor = Main.buffColor(npcColor, 1f - 0.5f * num92, 1f - 0.3f * num92, 1f - 0.5f * num92, 1f);
						}
						int num93 = 10;
						int num94 = 2;
						if (type != 370)
						{
							if (type - 372 <= 1)
							{
								if (rCurrentNPC.ai[0] == 1f)
								{
									value29 = Color.Blue;
									amount8 = 0.5f;
								}
							}
						}
						else
						{
							if (rCurrentNPC.ai[0] == -1f)
							{
								num93 = 0;
							}
							if (rCurrentNPC.ai[0] == 0f || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 10f)
							{
								num93 = 7;
							}
							if (rCurrentNPC.ai[0] == 1f)
							{
								value29 = Color.Blue;
								amount8 = 0.5f;
							}
							else
							{
								color26 = npcColor;
							}
						}
						for (int num95 = 1; num95 < num93; num95 += num94)
						{
							Vector2[] oldPos2 = rCurrentNPC.oldPos;
							Color value30 = color26;
							value30 = Color.Lerp(value30, value29, amount8);
							value30 = rCurrentNPC.GetAlpha(value30);
							value30 *= (float)(num93 - num95) / 15f;
							Vector2 position17 = rCurrentNPC.oldPos[num95] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
							position17 -= new Vector2((float)value28.Width, (float)(value28.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position17 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value28, position17, new Rectangle?(rCurrentNPC.frame), value30, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						int num96 = 0;
						float num97 = 0f;
						float num98 = 0f;
						if (type == 370)
						{
							if (rCurrentNPC.ai[0] == -1f)
							{
								num96 = 0;
							}
							if (rCurrentNPC.ai[0] == 3f || rCurrentNPC.ai[0] == 8f)
							{
								int num99 = 60;
								int num100 = 30;
								if (rCurrentNPC.ai[2] > (float)num99)
								{
									num96 = 6;
									num97 = 1f - (float)Math.Cos((double)((rCurrentNPC.ai[2] - (float)num99) / (float)num100 * 6.2831855f));
									num97 /= 3f;
									num98 = 40f;
								}
							}
							if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num90)
							{
								num96 = 6;
								num97 = 1f - (float)Math.Cos((double)((rCurrentNPC.ai[2] - (float)num90) / (float)num91 * 6.2831855f));
								num97 /= 3f;
								num98 = 60f;
							}
							if (rCurrentNPC.ai[0] == 9f && rCurrentNPC.ai[2] > (float)num90)
							{
								num96 = 6;
								num97 = 1f - (float)Math.Cos((double)((rCurrentNPC.ai[2] - (float)num90) / (float)num91 * 6.2831855f));
								num97 /= 3f;
								num98 = 60f;
							}
							if (rCurrentNPC.ai[0] == 12f)
							{
								num96 = 6;
								num97 = 1f - (float)Math.Cos((double)(rCurrentNPC.ai[2] / 30f * 6.2831855f));
								num97 /= 3f;
								num98 = 20f;
							}
						}
						for (int num101 = 0; num101 < num96; num101++)
						{
							Color value31 = npcColor;
							value31 = Color.Lerp(value31, value29, amount8);
							value31 = rCurrentNPC.GetAlpha(value31);
							value31 *= 1f - num97;
							Vector2 position18 = rCurrentNPC.Center + ((float)num101 / (float)num96 * 6.2831855f + rCurrentNPC.rotation).ToRotationVector2() * num98 * num97 - screenPos;
							position18 -= new Vector2((float)value28.Width, (float)(value28.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position18 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value28, position18, new Rectangle?(rCurrentNPC.frame), value31, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						Vector2 position19 = rCurrentNPC.Center - screenPos;
						position19 -= new Vector2((float)value28.Width, (float)(value28.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position19 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value28, position19, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						if (type == 370 && rCurrentNPC.ai[0] >= 4f)
						{
							value28 = TextureAssets.DukeFishron.Value;
							Color color27 = Color.Lerp(Color.White, Color.Yellow, 0.5f);
							value29 = Color.Yellow;
							amount8 = 1f;
							num97 = 0.5f;
							num98 = 10f;
							num94 = 1;
							if (rCurrentNPC.ai[0] == 4f)
							{
								float num102 = rCurrentNPC.ai[2] - (float)num90;
								num102 /= (float)num91;
								value29 *= num102;
								color27 *= num102;
							}
							if (rCurrentNPC.ai[0] == 12f)
							{
								float num103 = rCurrentNPC.ai[2];
								num103 /= 30f;
								if (num103 > 0.5f)
								{
									num103 = 1f - num103;
								}
								num103 *= 2f;
								num103 = 1f - num103;
								value29 *= num103;
								color27 *= num103;
							}
							for (int num104 = 1; num104 < num93; num104 += num94)
							{
								Vector2[] oldPos3 = rCurrentNPC.oldPos;
								Color value32 = color27;
								value32 = Color.Lerp(value32, value29, amount8);
								value32 *= (float)(num93 - num104) / 15f;
								Vector2 position20 = rCurrentNPC.oldPos[num104] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
								position20 -= new Vector2((float)value28.Width, (float)(value28.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position20 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								mySpriteBatch.Draw(value28, position20, new Rectangle?(rCurrentNPC.frame), value32, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							for (int num105 = 1; num105 < num96; num105++)
							{
								Color value33 = color27;
								value33 = Color.Lerp(value33, value29, amount8);
								value33 = rCurrentNPC.GetAlpha(value33);
								value33 *= 1f - num97;
								Vector2 position21 = rCurrentNPC.Center + ((float)num105 / (float)num96 * 6.2831855f + rCurrentNPC.rotation).ToRotationVector2() * num98 * num97 - screenPos;
								position21 -= new Vector2((float)value28.Width, (float)(value28.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
								position21 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
								mySpriteBatch.Draw(value28, position21, new Rectangle?(rCurrentNPC.frame), value33, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							mySpriteBatch.Draw(value28, position19, new Rectangle?(rCurrentNPC.frame), color27, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						return;
					}
					else if (type <= 519)
					{
						if (type <= 493)
						{
							if (type == 488)
							{
								return;
							}
							if (type != 493)
							{
								goto IL_50D4;
							}
						}
						else if (type != 507 && type != 517)
						{
							if (type != 519)
							{
								goto IL_50D4;
							}
							Texture2D value34 = TextureAssets.Npc[rCurrentNPC.type].Value;
							Vector2 vector27 = rCurrentNPC.Center - screenPos;
							vector27 -= new Vector2((float)value34.Width, (float)(value34.Height / Main.npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
							vector27 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							value34 = TextureAssets.Npc[rCurrentNPC.type].Value;
							mySpriteBatch.Draw(value34, vector27, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							int num106 = 0;
							float num107 = 1f / (float)rCurrentNPC.oldPos.Length * 0.7f;
							int num108 = rCurrentNPC.oldPos.Length - 1;
							while ((float)num108 >= 0f)
							{
								float num109 = (float)(rCurrentNPC.oldPos.Length - num108) / (float)rCurrentNPC.oldPos.Length;
								Color pink = Color.Pink;
								pink *= 1f - num107 * (float)num108 / 1f;
								pink.A = (byte)((float)pink.A * (1f - num109));
								mySpriteBatch.Draw(value34, vector27 + rCurrentNPC.oldPos[num108] - rCurrentNPC.position, null, pink, rCurrentNPC.oldRot[num108], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.3f, 1.1f, num109), spriteEffects, 0f);
								num106++;
								num108--;
							}
							return;
						}
					}
					else if (type <= 549)
					{
						if (type == 522)
						{
							Texture2D value35 = TextureAssets.Npc[rCurrentNPC.type].Value;
							Vector2 vector28 = rCurrentNPC.Center - screenPos;
							vector28 -= new Vector2((float)value35.Width, (float)(value35.Height / Main.npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
							vector28 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
							int num110 = 0;
							float num111 = 1f / (float)rCurrentNPC.oldPos.Length * 1.1f;
							int num112 = rCurrentNPC.oldPos.Length - 1;
							while ((float)num112 >= 0f)
							{
								float num113 = (float)(rCurrentNPC.oldPos.Length - num112) / (float)rCurrentNPC.oldPos.Length;
								Color white4 = Color.White;
								white4 *= 1f - num111 * (float)num112 / 1f;
								white4.A = (byte)((float)white4.A * (1f - num113));
								mySpriteBatch.Draw(value35, vector28 + rCurrentNPC.oldPos[num112] - rCurrentNPC.position, null, white4, rCurrentNPC.oldRot[num112], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.8f, 0.3f, num113), spriteEffects, 0f);
								num110++;
								num112--;
							}
							value35 = TextureAssets.Extra[57].Value;
							mySpriteBatch.Draw(value35, vector28, null, new Color(255, 255, 255, 0), 0f, value35.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						if (type != 549)
						{
							goto IL_50D4;
						}
						Texture2D value36 = TextureAssets.Npc[type].Value;
						Vector2 vector29 = rCurrentNPC.Center - screenPos;
						Rectangle frame2 = rCurrentNPC.frame;
						Vector2 origin12;
						origin12..ctor(70f, 127f);
						origin12.Y += 8f;
						Vector2 scale5;
						scale5..ctor(rCurrentNPC.scale);
						float num114 = rCurrentNPC.localAI[0];
						if (num114 < 120f)
						{
							scale5 *= num114 / 240f + 0.5f;
						}
						Color alpha4 = rCurrentNPC.GetAlpha(npcColor);
						float lerpValue2 = Utils.GetLerpValue(0f, 120f, num114, true);
						float num115 = MathHelper.Lerp(32f, 0f, lerpValue2);
						Color color28 = alpha4;
						color28.A = (byte)MathHelper.Lerp((float)color28.A, 0f, lerpValue2);
						color28 *= lerpValue2;
						if (num114 >= 120f)
						{
							color28 = alpha4;
						}
						mySpriteBatch.Draw(value36, vector29, new Rectangle?(frame2), color28, rCurrentNPC.rotation, origin12, scale5, spriteEffects, 0f);
						float y2 = (((rCurrentNPC.ai[0] + 54f) % 180f - 120f) / 180f * 2f * 6.2831855f).ToRotationVector2().Y;
						if (num114 >= 120f)
						{
							num115 = y2 * 0f;
							color28.A = (byte)((float)color28.A * 0.5f);
							color28 *= y2 / 2f + 0.5f;
							float num116 = 1f;
							for (float num117 = 0f; num117 < num116; num117 += 1f)
							{
								mySpriteBatch.Draw(value36, vector29 + (6.2831855f / num116 * num117).ToRotationVector2() * num115, new Rectangle?(frame2), color28, rCurrentNPC.rotation, origin12, scale5, spriteEffects, 0f);
							}
						}
						float num118 = rCurrentNPC.ai[0] / 180f - 0.76f;
						if (num118 < 0f)
						{
							num118 += 1f;
						}
						float num119 = 0f;
						float num120 = 0f;
						float num121 = 0.6f;
						float num122 = 0.8f;
						if (num118 >= num121 && num118 <= num122)
						{
							num119 = Utils.GetLerpValue(num121, num122, num118, false);
							num120 = MathHelper.Lerp(0.75f, 0.85f, num119);
						}
						num121 = num122;
						num122 = num121 + 0.13f;
						if (num118 >= num121 && num118 <= num122)
						{
							num119 = 1f - Utils.GetLerpValue(num121, num122, num118, false);
							num120 = MathHelper.Lerp(1.3f, 0.85f, num119);
						}
						Vector2 vector30;
						vector30..ctor(0f, -150f);
						int frameNumber = frame2.Y / frame2.Height;
						float num123 = MathHelper.Clamp((num114 - 100f) / 40f, 0f, 1f);
						this.DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector30, 0.75f * num123, 0.75f, frameNumber, Color.White);
						this.DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector30, 0.75f * num123, 0.75f, frameNumber, new Color(255, 255, 255, 127) * (y2 / 2f + 0.5f));
						if (num119 > 0f && num120 > 0f)
						{
							this.DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector30, num119 * 0.5f, num120, frameNumber, new Color(255, 255, 255, 127));
						}
						if (num114 < 120f)
						{
							float num124 = 6.2831855f * lerpValue2 * (float)Math.Pow((double)lerpValue2, 2.0) * 2f + lerpValue2;
							color28.A = (byte)((float)alpha4.A * (float)Math.Pow((double)lerpValue2, 2.0) * 0.5f);
							float num125 = 3f;
							for (float num126 = 0f; num126 < num125; num126 += 1f)
							{
								mySpriteBatch.Draw(value36, vector29 + (num124 + 6.2831855f / num125 * num126).ToRotationVector2() * num115, new Rectangle?(frame2), color28, rCurrentNPC.rotation, origin12, scale5, spriteEffects, 0f);
							}
							return;
						}
						return;
					}
					else
					{
						if (type == 636)
						{
							Main.DrawNPCDirect_HallowBoss(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
							return;
						}
						if (type == 668)
						{
							Main.DrawNPCDirect_Deerclops(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
							return;
						}
						if (type != 677)
						{
							goto IL_50D4;
						}
						Main.DrawNPCDirect_Faeling(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
						return;
					}
					IL_2D12:
					Texture2D value37 = TextureAssets.Npc[type].Value;
					Vector2 vector31 = rCurrentNPC.Center - screenPos;
					Vector2 vector32 = vector31 - new Vector2(300f, 310f);
					vector31 -= new Vector2((float)value37.Width, (float)(value37.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					vector31 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value37, vector31, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					Color color50;
					if (type <= 493)
					{
						if (type != 422)
						{
							if (type == 493)
							{
								value37 = TextureAssets.GlowMask[132].Value;
								float num304 = 4f;
								color50 = rCurrentNPC.GetAlpha(npcColor);
								float num127 = num304 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 4f;
								for (int num128 = 0; num128 < 4; num128++)
								{
									mySpriteBatch.Draw(value37, vector31 + rCurrentNPC.velocity.RotatedBy((double)((float)num128 * 1.5707964f), default(Vector2)) * num127, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
						}
						else
						{
							value37 = TextureAssets.GlowMask[149].Value;
							float num305 = 4f;
							color50 = rCurrentNPC.GetAlpha(npcColor);
							float num129 = num305 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num130 = 0; num130 < 4; num130++)
							{
								mySpriteBatch.Draw(value37, vector31 + rCurrentNPC.velocity.RotatedBy((double)((float)num130 * 1.5707964f), default(Vector2)) * num129, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else if (type != 507)
					{
						if (type == 517)
						{
							value37 = TextureAssets.GlowMask[162].Value;
							float num306 = 2f;
							color50 = rCurrentNPC.GetAlpha(npcColor);
							float num131 = num306 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 9f;
							for (int num132 = 0; num132 < 4; num132++)
							{
								mySpriteBatch.Draw(value37, vector31 + rCurrentNPC.velocity.RotatedBy((double)((float)num132 * 1.5707964f), default(Vector2)) * num131 + Vector2.UnitX * 2f, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else
					{
						value37 = TextureAssets.GlowMask[143].Value;
						float num307 = 4f;
						color50 = rCurrentNPC.GetAlpha(npcColor);
						float num133 = num307 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 4f;
						for (int num134 = 0; num134 < 4; num134++)
						{
							mySpriteBatch.Draw(value37, vector31 + rCurrentNPC.velocity.RotatedBy((double)((float)num134 * 1.5707964f), default(Vector2)) * num133, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					int num135 = 0;
					string key = "";
					if (type <= 493)
					{
						if (type != 422)
						{
							if (type == 493)
							{
								num135 = NPC.ShieldStrengthTowerStardust;
								key = "Stardust";
							}
						}
						else
						{
							num135 = NPC.ShieldStrengthTowerVortex;
							key = "Vortex";
						}
					}
					else if (type != 507)
					{
						if (type == 517)
						{
							num135 = NPC.ShieldStrengthTowerSolar;
							key = "Solar";
						}
					}
					else
					{
						num135 = NPC.ShieldStrengthTowerNebula;
						key = "Nebula";
					}
					float num136 = (float)num135 / (float)NPC.ShieldStrengthTowerMax;
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						return;
					}
					if (num135 > 0)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
						float num137 = 0f;
						if (rCurrentNPC.ai[3] > 0f && rCurrentNPC.ai[3] <= 30f)
						{
							num137 = 1f - rCurrentNPC.ai[3] / 30f;
						}
						Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(1f + num137).UseProgress(0f);
						DrawData value38 = new DrawData(Main.Assets.Request<Texture2D>("Images/Misc/Perlin").Value, vector32 + new Vector2(300f, 300f), new Rectangle?(new Rectangle(0, 0, 600, 600)), Color.White * (num136 * 0.8f + 0.2f), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num137 * 0.05f), spriteEffects, 0f);
						GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num137 * 0.5f));
						GameShaders.Misc["ForceField"].Apply(new DrawData?(value38));
						value38.Draw(mySpriteBatch);
						mySpriteBatch.End();
						mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
						return;
					}
					if (rCurrentNPC.ai[3] > 0f)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
						float num138 = rCurrentNPC.ai[3] / 120f;
						float num139 = Math.Min(rCurrentNPC.ai[3] / 30f, 1f);
						Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num138) + 1f).UseProgress(num138);
						DrawData value39 = new DrawData(Main.Assets.Request<Texture2D>("Images/Misc/Perlin").Value, vector32 + new Vector2(300f, 300f), new Rectangle?(new Rectangle(0, 0, 600, 600)), new Color(new Vector4(1f - (float)Math.Sqrt((double)num139))), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num139), spriteEffects, 0f);
						GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
						GameShaders.Misc["ForceField"].Apply(new DrawData?(value39));
						value39.Draw(mySpriteBatch);
						mySpriteBatch.End();
						mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
						return;
					}
					Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
					return;
					IL_50D4:
					if (type <= 384)
					{
						if (type != 94)
						{
							if (type == 384)
							{
								return;
							}
						}
						else
						{
							for (int num140 = 1; num140 < 6; num140 += 2)
							{
								Vector2[] oldPos4 = rCurrentNPC.oldPos;
								Color alpha5 = rCurrentNPC.GetAlpha(npcColor);
								alpha5.R = (byte)((int)alpha5.R * (10 - num140) / 15);
								alpha5.G = (byte)((int)alpha5.G * (10 - num140) / 15);
								alpha5.B = (byte)((int)alpha5.B * (10 - num140) / 15);
								alpha5.A = (byte)((int)alpha5.A * (10 - num140) / 15);
								alpha5 = rCurrentNPC.GetShimmerColor(alpha5);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num140].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num140].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), alpha5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else
					{
						switch (type)
						{
						case 396:
						{
							Texture2D value40 = TextureAssets.Npc[type].Value;
							Vector2 origin13;
							origin13..ctor(191f, 130f);
							Texture2D value41 = TextureAssets.Extra[18].Value;
							Texture2D value42 = TextureAssets.Extra[19].Value;
							Vector2 vector33;
							vector33..ctor(19f, 34f);
							Vector2 vector34;
							vector34..ctor(27f, 59f);
							Vector2 vector35;
							vector35..ctor(0f, 0f);
							Texture2D value43 = TextureAssets.Extra[25].Value;
							Vector2 vector36 = new Vector2(0f, 214f).RotatedBy((double)rCurrentNPC.rotation, default(Vector2));
							Rectangle rectangle10 = value43.Frame(1, 1, 0, 0, 0, 0);
							rectangle10.Height /= 3;
							rectangle10.Y += rectangle10.Height * (int)(rCurrentNPC.localAI[2] / 7f);
							Texture2D value44 = TextureAssets.Extra[29].Value;
							Vector2 vector37 = new Vector2(0f, 4f).RotatedBy((double)rCurrentNPC.rotation, default(Vector2));
							Rectangle rectangle11 = value44.Frame(1, 1, 0, 0, 0, 0);
							rectangle11.Height /= 4;
							rectangle11.Y += rectangle11.Height * (int)(rCurrentNPC.localAI[3] / 5f);
							Texture2D value45 = TextureAssets.Extra[26].Value;
							Rectangle value46 = value45.Frame(1, 1, 0, 0, 0, 0);
							value46.Height /= 4;
							Vector2 center4 = Main.npc[(int)rCurrentNPC.ai[3]].Center;
							Point point2 = rCurrentNPC.Center.ToTileCoordinates();
							Color alpha6 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Color.White, 0.3f));
							if (rCurrentNPC.ai[0] < 0f)
							{
								int num141 = (int)rCurrentNPC.ai[1];
								num141 /= 8;
								value46.Y += value46.Height * num141;
								mySpriteBatch.Draw(value45, rCurrentNPC.Center - screenPos, new Rectangle?(value46), alpha6, rCurrentNPC.rotation, vector33 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
							}
							else
							{
								mySpriteBatch.Draw(value41, rCurrentNPC.Center - screenPos, null, alpha6, rCurrentNPC.rotation, vector33, 1f, spriteEffects, 0f);
								Vector2 vector38 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector34 * rCurrentNPC.localAI[1]);
								mySpriteBatch.Draw(value42, rCurrentNPC.Center - screenPos + vector38 + vector35, null, alpha6, rCurrentNPC.rotation, new Vector2((float)value42.Width, (float)value42.Height) / 2f, 1f, 0, 0f);
							}
							mySpriteBatch.Draw(value40, rCurrentNPC.Center - screenPos, new Rectangle?(rCurrentNPC.frame), alpha6, rCurrentNPC.rotation, origin13, 1f, spriteEffects, 0f);
							mySpriteBatch.Draw(value44, (rCurrentNPC.Center - screenPos + vector37).Floor(), new Rectangle?(rectangle11), alpha6, rCurrentNPC.rotation, rectangle11.Size() / 2f, 1f, spriteEffects, 0f);
							mySpriteBatch.Draw(value43, (rCurrentNPC.Center - screenPos + vector36).Floor(), new Rectangle?(rectangle10), alpha6, rCurrentNPC.rotation, rectangle10.Size() / 2f, 1f, spriteEffects, 0f);
							return;
						}
						case 397:
						{
							Texture2D value47 = TextureAssets.Npc[type].Value;
							float num142 = 0.5f;
							Vector2 vector39;
							vector39..ctor(220f, -60f);
							Vector2 vector40;
							vector40..ctor(0f, 76f);
							Texture2D value48 = TextureAssets.Extra[15].Value;
							Vector2 vector76 = new Vector2(60f, 30f);
							float num143 = 340f;
							Vector2 center5 = Main.npc[(int)rCurrentNPC.ai[3]].Center;
							Point point3 = rCurrentNPC.Center.ToTileCoordinates();
							Color alpha7 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Color.White, 0.3f));
							bool flag13 = rCurrentNPC.ai[2] == 0f;
							Vector2 vector41;
							vector41..ctor((float)((!flag13) ? 1 : -1), 1f);
							Vector2 origin14;
							origin14..ctor(120f, 180f);
							if (!flag13)
							{
								origin14.X = (float)value47.Width - origin14.X;
							}
							Texture2D value49 = TextureAssets.Extra[17].Value;
							Texture2D value50 = TextureAssets.Extra[19].Value;
							Vector2 vector42;
							vector42..ctor(26f, 42f);
							if (!flag13)
							{
								vector42.X = (float)value49.Width - vector42.X;
							}
							Vector2 vector43;
							vector43..ctor(30f, 66f);
							Vector2 vector44;
							vector44..ctor(1f * (0f - vector41.X), 3f);
							Texture2D value51 = TextureAssets.Extra[26].Value;
							Rectangle value52 = value51.Frame(1, 1, 0, 0, 0, 0);
							value52.Height /= 4;
							Vector2 vector77 = center5 + vector39 * vector41;
							Vector2 vector45 = rCurrentNPC.Center + vector40;
							Vector2 v = vector77 - vector45;
							v *= 1f - num142;
							Vector2 origin15 = vector76;
							if (!flag13)
							{
								origin15.X = (float)value48.Width - origin15.X;
							}
							float num144 = (float)Math.Acos((double)(v.Length() / num143)) * (0f - vector41.X);
							mySpriteBatch.Draw(value48, vector45 - screenPos, null, alpha7, v.ToRotation() + num144 - 1.5707964f, origin15, 1f, spriteEffects, 0f);
							if (rCurrentNPC.ai[0] == -2f)
							{
								int num145 = (int)rCurrentNPC.ai[1];
								num145 /= 8;
								value52.Y += value52.Height * num145;
								mySpriteBatch.Draw(value51, rCurrentNPC.Center - screenPos, new Rectangle?(value52), alpha7, 0f, vector42 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
							}
							else
							{
								mySpriteBatch.Draw(value49, rCurrentNPC.Center - screenPos, null, alpha7, 0f, vector42, 1f, spriteEffects, 0f);
								Vector2 vector46 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector43 * rCurrentNPC.localAI[1]);
								mySpriteBatch.Draw(value50, rCurrentNPC.Center - screenPos + vector46 + vector44, null, alpha7, 0f, new Vector2((float)value50.Width, (float)value50.Height) / 2f, 1f, 0, 0f);
							}
							mySpriteBatch.Draw(value47, rCurrentNPC.Center - screenPos, new Rectangle?(rCurrentNPC.frame), alpha7, 0f, origin14, 1f, spriteEffects, 0f);
							return;
						}
						case 398:
						{
							bool flag14 = false;
							Texture2D value53 = TextureAssets.Npc[type].Value;
							Texture2D value54 = TextureAssets.Extra[16].Value;
							Texture2D value55 = TextureAssets.Extra[14].Value;
							float num146 = 340f;
							float num147 = 0.5f;
							Vector2 vector47;
							vector47..ctor(220f, -60f);
							Vector2 vector48;
							vector48..ctor(76f, 66f);
							Texture2D value56 = TextureAssets.Extra[13].Value;
							Vector2 origin16;
							origin16..ctor((float)value56.Width, 278f);
							Vector2 origin17;
							origin17..ctor(0f, 278f);
							Vector2 vector49;
							vector49..ctor(0f, 76f);
							Vector2 center2 = rCurrentNPC.Center;
							Point point4 = (rCurrentNPC.Center + new Vector2(0f, -150f)).ToTileCoordinates();
							Color alpha8 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Color.White, 0.3f));
							for (int num148 = 0; num148 < 2; num148++)
							{
								bool flag15 = num148 == 0;
								Vector2 vector50;
								vector50..ctor((float)((!flag15) ? 1 : -1), 1f);
								int num149 = -1;
								for (int num150 = 0; num150 < 200; num150++)
								{
									if (Main.npc[num150].active && Main.npc[num150].type == 397 && Main.npc[num150].ai[2] == (float)num148 && Main.npc[num150].ai[3] == (float)rCurrentNPC.whoAmI)
									{
										num149 = num150;
										break;
									}
								}
								if (num149 != -1)
								{
									Vector2 vector51 = center2 + vector47 * vector50;
									Vector2 vector52 = (Main.npc[num149].Center + vector49 - vector51) * num147;
									if (flag14)
									{
										Dust[] array = Main.dust;
										Vector2 position38 = vector51 + vector52;
										int width = 0;
										int height = 0;
										int type2 = 6;
										float speedX = 0f;
										float speedY = 0f;
										int alpha14 = 0;
										color50 = default(Color);
										array[Dust.NewDust(position38, width, height, type2, speedX, speedY, alpha14, color50, 1f)].noGravity = true;
									}
									float num151 = (float)Math.Acos((double)(vector52.Length() / num146)) * (0f - vector50.X);
									SpriteEffects effects = (!flag15) ? 1 : 0;
									Vector2 origin18 = vector48;
									if (!flag15)
									{
										origin18.X = (float)value55.Width - origin18.X;
									}
									mySpriteBatch.Draw(value55, vector51 - screenPos, null, alpha8, vector52.ToRotation() - num151 - 1.5707964f, origin18, 1f, effects, 0f);
									if (flag14)
									{
										Dust[] array2 = Main.dust;
										Vector2 position39 = vector51;
										int width2 = 0;
										int height2 = 0;
										int type3 = 6;
										float speedX2 = 0f;
										float speedY2 = 0f;
										int alpha15 = 0;
										color50 = default(Color);
										array2[Dust.NewDust(position39, width2, height2, type3, speedX2, speedY2, alpha15, color50, 1f)].noGravity = true;
									}
									if (flag14)
									{
										Dust[] array3 = Main.dust;
										Vector2 position40 = center2;
										int width3 = 0;
										int height3 = 0;
										int type4 = 6;
										float speedX3 = 0f;
										float speedY3 = 0f;
										int alpha16 = 0;
										color50 = default(Color);
										array3[Dust.NewDust(position40, width3, height3, type4, speedX3, speedY3, alpha16, color50, 1f)].noGravity = true;
									}
									if (flag14)
									{
										Dust[] array4 = Main.dust;
										Vector2 position41 = vector51 + new Vector2(0f, num146).RotatedBy((double)(vector52.ToRotation() - num151 - 1.5707964f), default(Vector2));
										int width4 = 0;
										int height4 = 0;
										int type5 = 6;
										float speedX4 = 0f;
										float speedY4 = 0f;
										int alpha17 = 0;
										color50 = default(Color);
										array4[Dust.NewDust(position41, width4, height4, type5, speedX4, speedY4, alpha17, color50, 1f)].noGravity = true;
									}
								}
							}
							mySpriteBatch.Draw(value56, center2 - screenPos, null, alpha8, 0f, origin16, 1f, 0, 0f);
							mySpriteBatch.Draw(value56, center2 - screenPos, null, alpha8, 0f, origin17, 1f, 1, 0f);
							mySpriteBatch.Draw(value54, center2 - screenPos, null, alpha8, 0f, new Vector2(112f, 101f), 1f, 0, 0f);
							mySpriteBatch.Draw(value53, center2 - screenPos, new Rectangle?(rCurrentNPC.frame), alpha8, 0f, rCurrentNPC.frame.Size() / 2f, 1f, 0, 0f);
							return;
						}
						case 399:
						{
							Texture2D value57 = TextureAssets.Npc[type].Value;
							(rCurrentNPC.position - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY).Floor();
							float num152 = 5f;
							int num153 = 0;
							while ((float)num153 < num152)
							{
								float num154 = 1f - (Main.GlobalTimeWrappedHourly + (float)num153) % num152 / num152;
								Color color29 = Color.LimeGreen;
								if (rCurrentNPC.ai[0] == 1f)
								{
									color29 = Color.Lerp(Color.LimeGreen, Color.Red, MathHelper.Clamp(rCurrentNPC.ai[1] / 20f, 0f, 1f));
								}
								if (rCurrentNPC.ai[0] == 2f)
								{
									color29 = Color.Red;
								}
								color29 *= 1f - num154;
								color29.A = 0;
								for (int num155 = 0; num155 < 2; num155++)
								{
									mySpriteBatch.Draw(TextureAssets.Extra[27].Value, rCurrentNPC.Center - screenPos + Vector2.UnitY * (rCurrentNPC.gfxOffY - 4f + 6f), null, color29, 1.5707964f, new Vector2(10f, 48f), num154 * 4f, 0, 0f);
								}
								num153++;
							}
							mySpriteBatch.Draw(value57, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value57 = TextureAssets.GlowMask[100].Value;
							mySpriteBatch.Draw(value57, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value57 = TextureAssets.Extra[20].Value;
							Rectangle value58 = value57.Frame(1, 4, 0, (int)rCurrentNPC.ai[0] + 1, 0, 0);
							Vector2 position22;
							position22..ctor(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)value57.Width * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY + 18f + 6f);
							mySpriteBatch.Draw(value57, position22, new Rectangle?(value58), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value57 = TextureAssets.GlowMask[101].Value;
							mySpriteBatch.Draw(value57, position22, new Rectangle?(value58), new Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						case 400:
						{
							Texture2D value59 = TextureAssets.Npc[type].Value;
							Texture2D value60 = TextureAssets.Extra[19].Value;
							Vector2 origin19;
							origin19..ctor(40f, 40f);
							Vector2 vector53;
							vector53..ctor(30f, 30f);
							Vector2 center6 = rCurrentNPC.Center;
							Point point5 = rCurrentNPC.Center.ToTileCoordinates();
							Color alpha9 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point5.X, point5.Y), Color.White, 0.3f));
							mySpriteBatch.Draw(value59, rCurrentNPC.Center - screenPos, new Rectangle?(rCurrentNPC.frame), alpha9, rCurrentNPC.rotation, origin19, 1f, spriteEffects, 0f);
							Vector2 vector54 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector53 * rCurrentNPC.localAI[1]);
							mySpriteBatch.Draw(value60, rCurrentNPC.Center - screenPos + vector54, null, alpha9, rCurrentNPC.rotation, value60.Size() / 2f, rCurrentNPC.localAI[2], 0, 0f);
							return;
						}
						default:
							if (type == 416)
							{
								int num156 = -1;
								int num157 = (int)rCurrentNPC.ai[0];
								Vector2 position23 = rCurrentNPC.position;
								Vector2 spinningpoint3 = Vector2.Zero;
								if (Main.npc[num157].active && Main.npc[num157].type == 415)
								{
									num156 = num157;
								}
								if (num156 != -1)
								{
									Vector2 position24 = rCurrentNPC.position;
									rCurrentNPC.Bottom = Main.npc[num156].Bottom;
									position23 = rCurrentNPC.position;
									rCurrentNPC.position = position24;
									rCurrentNPC.gfxOffY = Main.npc[num156].gfxOffY;
									spinningpoint3 = Main.npc[num156].velocity;
								}
								Rectangle frame3 = rCurrentNPC.frame;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position23.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position23.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame3), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								Color color51 = rCurrentNPC.color;
								color50 = default(Color);
								if (color51 != color50)
								{
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position23.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position23.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame3), rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position23 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								float num308 = 0.5f;
								color50 = rCurrentNPC.GetAlpha(npcColor);
								float num158 = num308 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
								for (int num159 = 0; num159 < 4; num159++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position23 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + spinningpoint3.RotatedBy((double)((float)num159 * 1.5707964f), default(Vector2)) * num158, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								return;
							}
							if (type == 491)
							{
								Texture2D value61 = TextureAssets.Npc[rCurrentNPC.type].Value;
								Rectangle frame4 = rCurrentNPC.frame;
								Vector2 origin20 = frame4.OriginFlip(new Vector2(208f, 460f), spriteEffects);
								Vector2 vector55 = rCurrentNPC.Center - screenPos;
								Vector2 vector56;
								vector56..ctor((float)((!spriteEffects.HasFlag(1)) ? 1 : -1), 1f);
								Color alpha10 = rCurrentNPC.GetAlpha(npcColor);
								mySpriteBatch.Draw(value61, vector55, new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								int num160 = (int)rCurrentNPC.localAI[3] / 8;
								value61 = TextureAssets.Extra[40].Value;
								frame4 = value61.Frame(1, 4, 0, num160 % 4, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 1f);
								mySpriteBatch.Draw(value61, vector55 + (new Vector2(102f, -384f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								value61 = TextureAssets.Extra[41].Value;
								frame4 = value61.Frame(1, 8, 0, num160 % 8, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
								for (int num161 = 0; num161 < 5; num161++)
								{
									mySpriteBatch.Draw(value61, vector55 + (new Vector2((float)(-96 + 34 * num161), 40f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								}
								value61 = TextureAssets.Extra[42].Value;
								frame4 = value61.Frame(1, 4, 0, num160 % 4, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f);
								for (int num162 = 0; num162 < 2; num162++)
								{
									mySpriteBatch.Draw(value61, vector55 + (new Vector2((float)(158 - 106 * num162), -302f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								}
								value61 = TextureAssets.Extra[43].Value;
								frame4 = value61.Frame(1, 4, 0, num160 % 4, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f);
								for (int num163 = 0; num163 < 2; num163++)
								{
									mySpriteBatch.Draw(value61, vector55 + (new Vector2((float)(42 - 178 * num163), -444f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								}
								value61 = TextureAssets.Extra[44].Value;
								frame4 = value61.Frame(1, 4, 0, num160 % 4, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f);
								mySpriteBatch.Draw(value61, vector55 + (new Vector2(-134f, -302f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								value61 = TextureAssets.Extra[45].Value;
								frame4 = value61.Frame(1, 4, 0, (2 + num160) % 4, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f);
								mySpriteBatch.Draw(value61, vector55 + (new Vector2(-60f, -330f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
								this.LoadNPC(492);
								if (!TextureAssets.Npc[492].IsLoaded)
								{
									return;
								}
								value61 = TextureAssets.Npc[492].Value;
								frame4 = value61.Frame(1, 9, 0, 0, 0, 0);
								origin20 = frame4.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
								for (int num164 = 0; num164 < 4; num164++)
								{
									int num165 = (int)rCurrentNPC.ai[num164];
									if (num165 >= 0)
									{
										frame4.Y = Main.npc[num165].frame.Y;
										mySpriteBatch.Draw(value61, vector55 + (new Vector2((float)(-122 + 68 * num164), -20f) * vector56).RotatedBy((double)rCurrentNPC.rotation, default(Vector2)), new Rectangle?(frame4), alpha10, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								return;
							}
							break;
						}
					}
					if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || (type == 139 && rCurrentNPC.ai[3] == 0f) || type == 140)
					{
						for (int num166 = 9; num166 >= 0; num166 -= 2)
						{
							Vector2[] oldPos5 = rCurrentNPC.oldPos;
							Color alpha11 = rCurrentNPC.GetAlpha(npcColor);
							alpha11.R = (byte)((int)alpha11.R * (10 - num166) / 20);
							alpha11.G = (byte)((int)alpha11.G * (10 - num166) / 20);
							alpha11.B = (byte)((int)alpha11.B * (10 - num166) / 20);
							alpha11.A = (byte)((int)alpha11.A * (10 - num166) / 20);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num166].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num166].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), alpha11, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					if (type == 417 && rCurrentNPC.ai[0] >= 6f && rCurrentNPC.ai[0] <= 6f)
					{
						for (int num167 = 5; num167 >= 0; num167--)
						{
							Vector2[] oldPos6 = rCurrentNPC.oldPos;
							Color alpha12 = rCurrentNPC.GetAlpha(npcColor);
							alpha12.R = (byte)((int)alpha12.R * (10 - num167) / 20);
							alpha12.G = (byte)((int)alpha12.G * (10 - num167) / 20);
							alpha12.B = (byte)((int)alpha12.B * (10 - num167) / 20);
							alpha12.A = (byte)((int)alpha12.A * (10 - num167) / 20);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num167].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num167].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), alpha12, rCurrentNPC.oldRot[num167], halfSize, MathHelper.Lerp(0.5f, 1f, (5f - (float)num167) / 6f), spriteEffects, 0f);
						}
					}
					if (type == 419 && rCurrentNPC.ai[2] <= -9f)
					{
						int num168 = TextureAssets.GlowMask[154].Height() / Main.npcFrameCount[type];
						int num169 = rCurrentNPC.frame.Y / num168;
						for (int num170 = 6; num170 >= 0; num170--)
						{
							Vector2[] oldPos7 = rCurrentNPC.oldPos;
							Color white5 = Color.White;
							white5.R = (byte)(255 * (10 - num170) / 20);
							white5.G = (byte)(255 * (10 - num170) / 20);
							white5.B = (byte)(255 * (10 - num170) / 20);
							white5.A = 0;
							Rectangle frame5 = rCurrentNPC.frame;
							int num171 = (num169 - 3 - num170) % 3;
							if (num171 < 0)
							{
								num171 += 3;
							}
							num171 += 5;
							frame5.Y = num168 * num171;
							mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, new Vector2(rCurrentNPC.oldPos[num170].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num170].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(frame5), white5, rCurrentNPC.oldRot[num170], halfSize, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num170) / 10f), spriteEffects, 0f);
						}
					}
					if (type == 418 && (rCurrentNPC.ai[0] == 2f || rCurrentNPC.ai[0] == 4f))
					{
						Texture2D value62 = TextureAssets.Extra[55].Value;
						Vector2 origin21;
						origin21..ctor((float)(value62.Width / 2), (float)(value62.Height / 8 + 14));
						int num172 = (int)rCurrentNPC.ai[1] / 2;
						float num173 = -1.5707964f * (float)rCurrentNPC.spriteDirection;
						float num174 = rCurrentNPC.ai[1] / 45f;
						if (num174 > 1f)
						{
							num174 = 1f;
						}
						num172 %= 4;
						for (int num175 = 6; num175 >= 0; num175--)
						{
							Vector2[] oldPos8 = rCurrentNPC.oldPos;
							Color value63 = Color.Lerp(Color.Gold, Color.OrangeRed, num174);
							value63 = Color.Lerp(value63, Color.Blue, (float)num175 / 12f);
							value63.A = (byte)(64f * num174);
							value63.R = (byte)((int)value63.R * (10 - num175) / 20);
							value63.G = (byte)((int)value63.G * (10 - num175) / 20);
							value63.B = (byte)((int)value63.B * (10 - num175) / 20);
							value63.A = (byte)((int)value63.A * (10 - num175) / 20);
							value63 *= num174;
							int num176 = (num172 - num175) % 4;
							if (num176 < 0)
							{
								num176 += 4;
							}
							Rectangle value64 = value62.Frame(1, 4, 0, num176, 0, 0);
							mySpriteBatch.Draw(value62, new Vector2(rCurrentNPC.oldPos[num175].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num175].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(value64), value63, rCurrentNPC.oldRot[num175] + num173, origin21, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num175) / 10f), spriteEffects, 0f);
						}
					}
					if (type == 516)
					{
						int num177 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
						int num178 = rCurrentNPC.frame.Y / num177;
						for (int num179 = 6; num179 >= 0; num179--)
						{
							Vector2[] oldPos9 = rCurrentNPC.oldPos;
							Color white6 = Color.White;
							white6.R = (byte)(255 * (10 - num179) / 20);
							white6.G = (byte)(255 * (10 - num179) / 20);
							white6.B = (byte)(255 * (10 - num179) / 20);
							white6.A = (byte)(255 * (10 - num179) / 20);
							white6 = Color.Lerp(white6, Color.Transparent, (float)num179 / 6f);
							Rectangle frame6 = rCurrentNPC.frame;
							int num180 = (num178 - 4 - num179) % 4;
							if (num180 < 0)
							{
								num180 += 4;
							}
							frame6.Y = num177 * num180;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num179].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num179].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(frame6), white6, rCurrentNPC.rotation, halfSize, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num179) / 10f), spriteEffects, 0f);
						}
					}
					if (rCurrentNPC.type == 390 && rCurrentNPC.IsABestiaryIconDummy)
					{
						this.LoadNPC(391);
						Texture2D value65 = TextureAssets.Npc[391].Value;
						Rectangle value66 = value65.Frame(1, Main.npcFrameCount[391], 0, (int)rCurrentNPC.localAI[3], 0, 0);
						Vector2 vector57;
						vector57..ctor((float)(-(float)rCurrentNPC.width - 8), 10f);
						mySpriteBatch.Draw(value65, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY) + vector57, new Rectangle?(value66), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					Rectangle frame7 = rCurrentNPC.frame;
					if (type == 182 || type == 289)
					{
						frame7.Height -= 2;
					}
					if (type - 420 > 1 && type - 423 > 1)
					{
						if (type == 662)
						{
							float num181 = 4f + 2f * (float)Math.Cos((double)(6.2831855f * Main.GlobalTimeWrappedHourly));
							Vector2 spinningpoint4 = Vector2.UnitX * num181;
							Color color30 = Color.Cyan * (num181 / 12f) * 0.4f;
							color30.A /= 4;
							for (float num182 = 0.9f; num182 >= 0f; num182 -= 0.125f)
							{
								Vector2 vector58 = rCurrentNPC.position - rCurrentNPC.velocity * 10f * num182;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector58.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector58.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), color30 * (1f - num182), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							for (float num183 = 0f; num183 < 6.2831855f; num183 += 1.5707964f)
							{
								Vector2 vector59 = rCurrentNPC.position + spinningpoint4.RotatedBy((double)num183, default(Vector2));
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector59.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector59.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), color30, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else
					{
						float num184 = 9f + 3f * (float)Math.Cos((double)(6.2831855f * Main.GlobalTimeWrappedHourly));
						Vector2 spinningpoint5 = Vector2.UnitX * num184;
						Color color31 = Color.Teal * (num184 / 12f) * 0.8f;
						color31.A /= 2;
						for (float num185 = 0f; num185 < 6.2831855f; num185 += 1.5707964f)
						{
							Vector2 vector60 = rCurrentNPC.position + spinningpoint5.RotatedBy((double)num185, default(Vector2));
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector60.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector60.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), color31, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					if (rCurrentNPC.aiStyle == 7)
					{
						this.DrawNPCExtras(rCurrentNPC, true, num36, num35, npcColor, halfSize, spriteEffects, screenPos);
					}
					if (type == 346 && (double)rCurrentNPC.life < (double)rCurrentNPC.lifeMax * 0.5)
					{
						mySpriteBatch.Draw(TextureAssets.SantaTank.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 356)
					{
						frame7.Height--;
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 360)
					{
						float num186 = 0f;
						if (rCurrentNPC.ai[2] == 0f)
						{
							if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
							{
								num36 = 2f;
							}
							if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num186 = 1f;
							}
							if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num186 = -1f;
							}
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num186, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 655)
					{
						float num187 = 0f;
						if (rCurrentNPC.ai[2] == 0f)
						{
							if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
							{
								num36 = 2f;
							}
							if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num187 = 1f;
							}
							if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num187 = -1f;
							}
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num187, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(Color.Orange), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 266 && rCurrentNPC.life < rCurrentNPC.lifeMax && (Main.expertMode || Main.getGoodWorld))
					{
						Color alpha13 = rCurrentNPC.GetAlpha(npcColor);
						float num188 = 1f - (float)rCurrentNPC.life / (float)rCurrentNPC.lifeMax;
						if (Main.expertMode)
						{
							num188 *= 2f;
						}
						num188 *= num188;
						if (Main.getGoodWorld)
						{
							num188 = 1f;
						}
						num188 = MathHelper.Clamp(num188, 0f, 1f);
						alpha13.R = (byte)((float)alpha13.R * num188);
						alpha13.G = (byte)((float)alpha13.G * num188);
						alpha13.B = (byte)((float)alpha13.B * num188);
						alpha13.A = (byte)((float)alpha13.A * num188);
						for (int num189 = 0; num189 < 4; num189++)
						{
							Vector2 position25 = rCurrentNPC.position;
							float num190 = Math.Abs(rCurrentNPC.Center.X - Main.player[Main.myPlayer].Center.X);
							float num191 = Math.Abs(rCurrentNPC.Center.Y - Main.player[Main.myPlayer].Center.Y);
							if (num189 == 0 || num189 == 2)
							{
								position25.X = Main.player[Main.myPlayer].Center.X + num190;
							}
							else
							{
								position25.X = Main.player[Main.myPlayer].Center.X - num190;
							}
							position25.X -= (float)(rCurrentNPC.width / 2);
							if (num189 == 0 || num189 == 1)
							{
								position25.Y = Main.player[Main.myPlayer].Center.Y + num191;
							}
							else
							{
								position25.Y = Main.player[Main.myPlayer].Center.Y - num191;
							}
							position25.Y -= (float)(rCurrentNPC.height / 2);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position25.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position25.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), alpha13, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 421 && rCurrentNPC.ai[0] == 5f)
					{
						Player player = Main.player[rCurrentNPC.target];
						if (player.gravDir == -1f)
						{
							spriteEffects |= 2;
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame7.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame7.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else
					{
						if (type <= 518)
						{
							if (type != 267)
							{
								if (type == 518)
								{
									Vector2 vector61;
									vector61..ctor(-10f, 0f);
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + vector61, rCurrentNPC.scale, spriteEffects, 0f);
									Color color52 = rCurrentNPC.color;
									color50 = default(Color);
									if (color52 != color50)
									{
										mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize + vector61, rCurrentNPC.scale, spriteEffects, 0f);
										goto IL_A28D;
									}
									goto IL_A28D;
								}
							}
							else
							{
								Vector2 position26 = rCurrentNPC.Center + new Vector2(0f, num36 + num35 + rCurrentNPC.gfxOffY) - screenPos;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, position26, new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								Color color53 = rCurrentNPC.color;
								color50 = default(Color);
								if (color53 != color50)
								{
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, position26, new Rectangle?(frame7), rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									goto IL_A28D;
								}
								goto IL_A28D;
							}
						}
						else if (type != 676 && type != 681)
						{
							if (type == 685)
							{
								Vector2 scale6;
								scale6..ctor(rCurrentNPC.scale);
								float num192 = rCurrentNPC.rotation;
								int num193 = 9;
								Vector2 vector62 = rCurrentNPC.oldPos[num193];
								if (vector62 != Vector2.Zero && rCurrentNPC.velocity.Y == 0f)
								{
									Vector2 position27 = rCurrentNPC.position;
									Vector2 vector63 = vector62 - position27;
									float num194 = (float)Math.Sin((double)(vector63.X / 30f * 6.2831855f));
									float num195 = (float)Math.Sin((double)(vector63.Y / 30f * 6.2831855f));
									float num196 = Utils.Remap(vector63.Length(), 0f, 30f, 0f, 1f, true);
									scale6.X += num194 * num196 * 0.25f;
									scale6.Y += num195 * num196 * 0.25f;
									float num197 = (float)Math.Sin((double)(Utils.Remap(vector63.Length(), 0f, 20f, 0f, 1f, true) * 6.2831855f));
									num192 += num197 * 0.7853982f * 0.1f * (float)rCurrentNPC.spriteDirection;
								}
								Vector2 vector64;
								vector64..ctor(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - 2f - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY);
								if (rCurrentNPC.velocity.Y == 0f)
								{
									vector64 = vector64.Floor();
									int num198 = 2;
									float num199 = vector64.X % 16f;
									if (num199 < (float)num198)
									{
										vector64.X -= num199;
									}
									if (num199 > (float)(16 - num198))
									{
										vector64.X += 16f - num199;
									}
								}
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, vector64, new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), num192, halfSize, scale6, spriteEffects, 0f);
								goto IL_A28D;
							}
						}
						else
						{
							if (!rCurrentNPC.IsABestiaryIconDummy)
							{
								mySpriteBatch.End();
								mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
							}
							DrawData value67 = new DrawData(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							GameShaders.Misc["RainbowTownSlime"].Apply(new DrawData?(value67));
							value67.Draw(mySpriteBatch);
							Main.pixelShader.CurrentTechnique.Passes[0].Apply();
							if (!rCurrentNPC.IsABestiaryIconDummy)
							{
								mySpriteBatch.End();
								mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
								goto IL_A28D;
							}
							goto IL_A28D;
						}
						if (rCurrentNPC.aiStyle == 7 && rCurrentNPC.ai[0] == 25f)
						{
							int num200 = type;
							float num201 = Utils.Remap(rCurrentNPC.ai[1], 0f, 60f, 0f, 1f, true);
							mySpriteBatch.End();
							mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
							Texture2D value83 = TextureAssets.Npc[num200].Value;
							Vector2 position42 = new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY);
							Rectangle? sourceRect = new Rectangle?(frame7);
							Color color54 = Color.White * Utils.Remap(num201, 0f, 1f, 0f, 1f, true);
							color50 = rCurrentNPC.GetAlpha(npcColor);
							DrawData drawData = new DrawData(value83, position42, sourceRect, color54 * ((float)color50.A / 255f), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							drawData.shader = ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex;
							GameShaders.Armor.Apply(ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex, rCurrentNPC, new DrawData?(drawData));
							float num202 = Utils.Remap(rCurrentNPC.ai[1], 45f, 90f, 0f, 1f, true);
							for (float num203 = 0f; num203 < 1f; num203 += 0.16666667f)
							{
								DrawData drawData2 = drawData;
								drawData2.color = Main.hslToRgb(num203, 0.9f, 0.65f, byte.MaxValue) * num202 * 0.5f;
								drawData2.position += ((Main.GlobalTimeWrappedHourly + num203) * 6.2831855f).ToRotationVector2() * 4f * num202;
								drawData2.Draw(mySpriteBatch);
							}
							drawData.Draw(mySpriteBatch);
							Main.pixelShader.CurrentTechnique.Passes[0].Apply();
							Color drawColor;
							drawColor..ctor(255, 255, 255, 0);
							float num204 = (float)Math.Sin(Main.timeForVisualEffects * 6.2831854820251465 / 20.0);
							Main.DrawPrettyStarSparkle(num201, 0, drawData.position, drawColor, Main.hslToRgb(Main.GlobalTimeWrappedHourly % 1f, 1f, 0.65f, 127), Utils.Remap(rCurrentNPC.ai[1], 30f, 60f, 0f, 30f, true), 0f, 30f, 30f, 36f, 0f, new Vector2(1.5f, 2.5f) * (1f + num204 * 0.025f), new Vector2(2f, 2f));
							Main.DrawPrettyStarSparkle(num201, 0, drawData.position, drawColor, Main.hslToRgb(Main.GlobalTimeWrappedHourly % 1f, 1f, 0.65f, 127), Utils.Remap(rCurrentNPC.ai[1], 30f, 60f, 0f, 30f, true), 0f, 30f, 30f, 36f, 0.7853982f, new Vector2(2.5f, 2.5f) * (1f + num204 * 0.025f), new Vector2(1f, 1f));
							mySpriteBatch.End();
							mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
						}
						else
						{
							int num205 = type;
							if (NPC.IsMechQueenUp && num205 == 134)
							{
								num205 = 136;
								this.LoadNPC(num205);
							}
							mySpriteBatch.Draw(TextureAssets.Npc[num205].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							Color color55 = rCurrentNPC.color;
							color50 = default(Color);
							if (color55 != color50)
							{
								mySpriteBatch.Draw(TextureAssets.Npc[num205].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					IL_A28D:
					if (rCurrentNPC.confused)
					{
						mySpriteBatch.Draw(TextureAssets.Confuse.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 - (float)TextureAssets.Confuse.Height() - 20f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Confuse.Width(), TextureAssets.Confuse.Height())), rCurrentNPC.GetShimmerColor(new Color(250, 250, 250, 70)), rCurrentNPC.velocity.X * -0.05f, new Vector2((float)(TextureAssets.Confuse.Width() / 2), (float)(TextureAssets.Confuse.Height() / 2)), Main.essScale + 0.2f, 0, 0f);
					}
					if (type == 247 || type == 248)
					{
						Vector2 vector65;
						vector65..ctor(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY);
						Texture2D value68 = TextureAssets.Npc[type].Value;
						if (rCurrentNPC.ai[0] == 1f)
						{
							for (int num206 = 0; num206 < 3; num206++)
							{
								int num207 = num206 * 5;
								int num208 = num207 + 15;
								float num209 = Utils.Remap(rCurrentNPC.ai[1], (float)num207, (float)num208, 0f, 1f, true);
								if (num209 != 0f)
								{
									float num210 = Utils.Remap(num209, 0f, 1f, 2f, 1.1f + 0.1f * (float)num206, true);
									float num211 = num209;
									color50 = new Color(255, 255, 255, 0) * num211;
									mySpriteBatch.Draw(value68, vector65, new Rectangle?(frame7), color50, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num210, spriteEffects, 0f);
								}
							}
						}
						if (rCurrentNPC.ai[0] == 2f)
						{
							Color color32 = new Color(255, 255, 255, 0) * Utils.Remap(rCurrentNPC.ai[1], 0f, 30f, 1f, 0f, true);
							for (int num212 = 0; num212 < 3; num212++)
							{
								float num213 = 1f;
								Vector2 position28 = vector65 + rCurrentNPC.velocity * (float)num212 * -2f;
								float num214 = Utils.Remap((float)num212, 0f, 3f, 1f, 0f, true);
								mySpriteBatch.Draw(value68, position28, new Rectangle?(frame7), color32 * num214, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num213, spriteEffects, 0f);
							}
							for (int num215 = 0; num215 < 3; num215++)
							{
								float num216 = 1.1f + 0.1f * (float)num215;
								mySpriteBatch.Draw(value68, vector65, new Rectangle?(frame7), color32, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num216, spriteEffects, 0f);
							}
						}
					}
					if (type >= 639 && type <= 645)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[286].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type >= 646 && type <= 652)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[287].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), rCurrentNPC.GetAlpha(Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type >= 134 && type <= 136 && npcColor != Color.Black)
					{
						mySpriteBatch.Draw(TextureAssets.Dest[type - 134].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0) * (1f - (float)rCurrentNPC.alpha / 255f), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 125)
					{
						mySpriteBatch.Draw(TextureAssets.EyeLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 139)
					{
						mySpriteBatch.Draw(TextureAssets.Probe.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 127)
					{
						if (NPC.IsMechQueenUp)
						{
							rCurrentNPC.whoAmI = rCurrentNPC.whoAmI;
							for (int num217 = 0; num217 < 200; num217++)
							{
								if (Main.npc[num217].active && (Main.npc[num217].type == 125 || Main.npc[num217].type == 126))
								{
									float scale7 = Main.npc[num217].scale;
									float x = Main.npc[num217].Center.X;
									float y3 = Main.npc[num217].Center.Y;
									Vector2 mechQueenCenter = rCurrentNPC.GetMechQueenCenter();
									Vector2 vector66;
									vector66..ctor((float)((Main.npc[num217].type == 125) ? -18 : 20), -18f);
									vector66 = vector66.RotatedBy((double)rCurrentNPC.rotation, default(Vector2));
									Vector2 vector67 = mechQueenCenter + vector66;
									float num218 = x - vector67.X;
									float num219 = y3 - vector67.Y;
									float rotation10 = (float)Math.Atan2((double)num219, (double)num218) - 1.57f;
									bool flag16 = true;
									float num220 = (float)Math.Sqrt((double)(num218 * num218 + num219 * num219));
									if (num220 > 2000f)
									{
										flag16 = false;
									}
									float num221 = 40f * scale7;
									while (flag16)
									{
										num220 = (float)Math.Sqrt((double)(num218 * num218 + num219 * num219));
										if (num220 < num221)
										{
											flag16 = false;
										}
										else
										{
											num220 = (float)TextureAssets.Chain12.Height() * scale7 / num220;
											num218 *= num220;
											num219 *= num220;
											Color color33 = Lighting.GetColor((int)vector67.X / 16, (int)(vector67.Y / 16f));
											Main.spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector67.X - Main.screenPosition.X, vector67.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height())), color33, rotation10, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, 0f), scale7, 0, 0f);
											vector67.X += num218;
											vector67.Y += num219;
											num218 = x - vector67.X;
											num219 = y3 - vector67.Y;
										}
									}
								}
							}
						}
						else
						{
							mySpriteBatch.Draw(TextureAssets.BoneEyes.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 131)
					{
						mySpriteBatch.Draw(TextureAssets.BoneLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 120)
					{
						for (int num222 = 1; num222 < rCurrentNPC.oldPos.Length; num222++)
						{
							Vector2[] oldPos10 = rCurrentNPC.oldPos;
							Color newColor3 = default(Color);
							newColor3.R = (byte)(150 * (10 - num222) / 15);
							newColor3.G = (byte)(100 * (10 - num222) / 15);
							newColor3.B = (byte)(150 * (10 - num222) / 15);
							newColor3.A = (byte)(50 * (10 - num222) / 15);
							newColor3 = rCurrentNPC.GetShimmerColor(newColor3);
							mySpriteBatch.Draw(TextureAssets.Chaos.Value, new Vector2(rCurrentNPC.oldPos[num222].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num222].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), newColor3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 137 || type == 138)
					{
						for (int num223 = 1; num223 < rCurrentNPC.oldPos.Length; num223++)
						{
							Vector2[] oldPos11 = rCurrentNPC.oldPos;
							Color newColor4 = default(Color);
							newColor4.R = (byte)(150 * (10 - num223) / 15);
							newColor4.G = (byte)(100 * (10 - num223) / 15);
							newColor4.B = (byte)(150 * (10 - num223) / 15);
							newColor4.A = (byte)(50 * (10 - num223) / 15);
							newColor4 = rCurrentNPC.GetShimmerColor(newColor4);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num223].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num223].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), newColor4, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 327)
					{
						mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num224 = 1; num224 < 10; num224++)
						{
							Color color34;
							color34..ctor(110 - num224 * 10, 110 - num224 * 10, 110 - num224 * 10, 110 - num224 * 10);
							Vector2 vector68;
							vector68..ctor((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
							mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36) + vector68, new Rectangle?(rCurrentNPC.frame), color34, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 325)
					{
						mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num225 = 1; num225 < 10; num225++)
						{
							Color color35;
							color35..ctor(110 - num225 * 10, 110 - num225 * 10, 110 - num225 * 10, 110 - num225 * 10);
							Vector2 vector69;
							vector69..ctor((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
							mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36) + vector69, new Rectangle?(rCurrentNPC.frame), color35, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 345)
					{
						mySpriteBatch.Draw(TextureAssets.IceQueen.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num226 = 1; num226 < 5; num226++)
						{
							color50..ctor(100 - num226 * 10, 100 - num226 * 10, 100 - num226 * 10, 100 - num226 * 10);
							mySpriteBatch.Draw(TextureAssets.IceQueen.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36) - rCurrentNPC.velocity * (float)num226 * 0.2f, new Rectangle?(rCurrentNPC.frame), color50, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 355)
					{
						mySpriteBatch.Draw(TextureAssets.Firefly.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 358)
					{
						mySpriteBatch.Draw(TextureAssets.Lightningbug.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 654)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[290].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 653)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[288].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 82)
					{
						mySpriteBatch.Draw(TextureAssets.WraithEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num227 = 1; num227 < 10; num227++)
						{
							color50..ctor(110 - num227 * 10, 110 - num227 * 10, 110 - num227 * 10, 110 - num227 * 10);
							mySpriteBatch.Draw(TextureAssets.WraithEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36) - rCurrentNPC.velocity * (float)num227 * 0.5f, new Rectangle?(rCurrentNPC.frame), color50, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 253)
					{
						mySpriteBatch.Draw(TextureAssets.ReaperEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num228 = 1; num228 < 20; num228++)
						{
							color50..ctor(210 - num228 * 20, 210 - num228 * 20, 210 - num228 * 20, 210 - num228 * 20);
							mySpriteBatch.Draw(TextureAssets.ReaperEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num36) - rCurrentNPC.velocity * (float)num228 * 0.5f, new Rectangle?(rCurrentNPC.frame), color50, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 245 && rCurrentNPC.alpha == 0 && !Main.getGoodWorld)
					{
						color50..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
						mySpriteBatch.Draw(TextureAssets.Golem[3].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), color50, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 246 && !Main.getGoodWorld)
					{
						Color color36;
						color36..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
						if (rCurrentNPC.frame.Y < 222)
						{
							if (!Main.getGoodWorld)
							{
								mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 27f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2)), color36, 0f, default(Vector2), 1f, 0, 0f);
							}
							Rectangle value69 = frame7;
							value69.Y = 0;
							mySpriteBatch.Draw(TextureAssets.Extra[107].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(value69), color36, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (!Main.getGoodWorld && rCurrentNPC.frame.Y < 444)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X + 26f, rCurrentNPC.Center.Y - screenPos.Y - 28f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4)), color36, 0f, default(Vector2), 1f, 0, 0f);
						}
						else if (!Main.getGoodWorld)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 38f, rCurrentNPC.Center.Y - screenPos.Y - 28f), new Rectangle?(new Rectangle(0, TextureAssets.Golem[2].Height() / 2, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4)), color36, 0f, default(Vector2), 1f, 0, 0f);
						}
					}
					else if (type == 249 && !Main.getGoodWorld)
					{
						Color color37;
						color37..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
						if (!Main.getGoodWorld)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 47f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2)), color37, 0f, default(Vector2), 1f, 0, 0f);
						}
						int num229 = (int)rCurrentNPC.frameCounter / 4;
						Texture2D value70 = TextureAssets.Extra[106].Value;
						Rectangle value71 = value70.Frame(1, 8, 0, 0, 0, 0);
						Color white10 = Color.White;
						value71.Y += value71.Height * 2 * num229 + frame7.Y;
						mySpriteBatch.Draw(value70, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(value71), color37, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value70 = TextureAssets.Extra[107].Value;
						value71 = frame7;
						mySpriteBatch.Draw(value70, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(value71), color37, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 383)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[11].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						if (rCurrentNPC.ai[2] != 0f && Main.npc[(int)rCurrentNPC.ai[2] - 1].active && Main.npc[(int)rCurrentNPC.ai[2] - 1].type == 384)
						{
							float num309 = rCurrentNPC.ai[2];
							mySpriteBatch.Draw(TextureAssets.Npc[384].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), null, new Color(100, 100, 100, 0), rCurrentNPC.rotation, new Vector2((float)TextureAssets.Npc[384].Width(), (float)TextureAssets.Npc[384].Height()) / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 381)
					{
						Vector2 zero3 = Vector2.Zero;
						Vector2 origin22 = Vector2.Zero;
						int num230 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
						int num231 = rCurrentNPC.frame.Y / num230;
						Rectangle value72;
						value72..ctor(0, 0, 32, 42);
						switch (num231)
						{
						case 0:
							zero3 += new Vector2(8f, 32f);
							break;
						case 1:
							zero3 += new Vector2(6f, 72f);
							break;
						case 2:
							zero3 += new Vector2(8f, 126f);
							break;
						case 3:
							zero3 += new Vector2(6f, 174f);
							break;
						case 4:
							zero3 += new Vector2(6f, 224f);
							break;
						case 5:
							zero3 += new Vector2(8f, 272f);
							break;
						case 6:
							zero3 += new Vector2(10f, 318f);
							break;
						case 7:
							zero3 += new Vector2(14f, 366f);
							break;
						case 8:
							zero3 += new Vector2(10f, 414f);
							break;
						}
						zero3.Y -= (float)(num230 * num231);
						zero3 -= halfSize;
						int num232 = 2;
						if (rCurrentNPC.ai[2] > 0f)
						{
							num232 = (int)rCurrentNPC.ai[2] - 1;
						}
						if (rCurrentNPC.velocity.Y != 0f)
						{
							num232 = 3;
						}
						value72.Y += 44 * num232;
						switch (num232)
						{
						case 0:
							origin22..ctor(10f, 18f);
							break;
						case 1:
							origin22..ctor(8f, 20f);
							break;
						case 2:
							origin22..ctor(8f, 20f);
							break;
						case 3:
							origin22..ctor(8f, 20f);
							break;
						case 4:
							origin22..ctor(6f, 18f);
							break;
						}
						if (spriteEffects.HasFlag(1))
						{
							zero3.X *= -1f;
							origin22.X = (float)value72.Width - origin22.X;
						}
						zero3 += rCurrentNPC.Center;
						zero3 -= screenPos;
						zero3.Y += rCurrentNPC.gfxOffY;
						mySpriteBatch.Draw(TextureAssets.Extra[0].Value, zero3, new Rectangle?(value72), npcColor, rCurrentNPC.rotation, origin22, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[24].Value, zero3, new Rectangle?(value72), new Color(255, 255, 255, 0), rCurrentNPC.rotation, origin22, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 382)
					{
						Vector2 zero4 = Vector2.Zero;
						Vector2 origin23 = Vector2.Zero;
						int num233 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
						int num234 = rCurrentNPC.frame.Y / num233;
						Rectangle value73;
						value73..ctor(0, 0, 30, 42);
						switch (num234)
						{
						case 0:
							zero4 += new Vector2(8f, 30f);
							break;
						case 1:
							zero4 += new Vector2(6f, 68f);
							break;
						case 2:
							zero4 += new Vector2(8f, 120f);
							break;
						case 3:
							zero4 += new Vector2(6f, 166f);
							break;
						case 4:
							zero4 += new Vector2(6f, 214f);
							break;
						case 5:
							zero4 += new Vector2(8f, 260f);
							break;
						case 6:
							zero4 += new Vector2(14f, 304f);
							break;
						case 7:
							zero4 += new Vector2(14f, 350f);
							break;
						case 8:
							zero4 += new Vector2(10f, 396f);
							break;
						}
						zero4.Y -= (float)(num233 * num234);
						zero4 -= halfSize;
						int num235 = 2;
						if (rCurrentNPC.ai[2] > 0f)
						{
							num235 = (int)rCurrentNPC.ai[2] - 1;
						}
						if (rCurrentNPC.velocity.Y != 0f)
						{
							num235 = 3;
						}
						value73.Y += 44 * num235;
						switch (num235)
						{
						case 0:
							origin23..ctor(10f, 18f);
							break;
						case 1:
							origin23..ctor(8f, 20f);
							break;
						case 2:
							origin23..ctor(8f, 20f);
							break;
						case 3:
							origin23..ctor(8f, 20f);
							break;
						case 4:
							origin23..ctor(6f, 18f);
							break;
						}
						if (spriteEffects.HasFlag(1))
						{
							zero4.X *= -1f;
							origin23.X = (float)value73.Width - origin23.X;
						}
						zero4 += rCurrentNPC.Center;
						zero4 -= screenPos;
						zero4.Y += rCurrentNPC.gfxOffY;
						mySpriteBatch.Draw(TextureAssets.Extra[1].Value, zero4, new Rectangle?(value73), npcColor, rCurrentNPC.rotation, origin23, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 520)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[164].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						Vector2 zero5 = Vector2.Zero;
						Vector2 origin24;
						origin24..ctor(4f, 4f);
						int num236 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
						int num310 = rCurrentNPC.frame.Y / num236;
						if (spriteEffects.HasFlag(1))
						{
							zero5.X *= -1f;
							origin24.X = (float)TextureAssets.Extra[56].Width() - origin24.X;
						}
						zero5 += rCurrentNPC.Top + new Vector2(0f, 20f);
						zero5 -= screenPos;
						zero5.Y += rCurrentNPC.gfxOffY;
						float num237 = rCurrentNPC.localAI[3];
						if (spriteEffects.HasFlag(1))
						{
							num237 += 3.1415927f;
						}
						mySpriteBatch.Draw(TextureAssets.Extra[56].Value, zero5, null, npcColor, num237, origin24, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[165].Value, zero5, null, new Color(255, 255, 255, 0), num237, origin24, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 386)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[31].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 387)
					{
						Color color38 = new Color(1f, 1f, 1f, 1f) * 0.75f;
						if (rCurrentNPC.ai[0] > 0f)
						{
							float amount9 = (rCurrentNPC.ai[0] + 1f) / 60f;
							color38 = Color.Lerp(color38, Color.White, amount9);
							color38.A = (byte)MathHelper.Lerp((float)color38.A, 0f, amount9);
						}
						color38 *= (255f - (float)rCurrentNPC.alpha) / 255f;
						mySpriteBatch.Draw(TextureAssets.GlowMask[32].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), color38, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 388)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[33].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 389)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[34].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 4 && rCurrentNPC.ai[1] >= 4f && rCurrentNPC.ai[0] == 3f)
					{
						for (int num238 = 1; num238 < rCurrentNPC.oldPos.Length; num238++)
						{
							Vector2[] oldPos12 = rCurrentNPC.oldPos;
							Color color39 = npcColor;
							color39.R = (byte)(0.5 * (double)color39.R * (double)(10 - num238) / 20.0);
							color39.G = (byte)(0.5 * (double)color39.G * (double)(10 - num238) / 20.0);
							color39.B = (byte)(0.5 * (double)color39.B * (double)(10 - num238) / 20.0);
							color39.A = (byte)(0.5 * (double)color39.A * (double)(10 - num238) / 20.0);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num238].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num238].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), color39, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 437)
					{
						Color white7 = Color.White;
						white7.A = 200;
						mySpriteBatch.Draw(TextureAssets.GlowMask[109].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), new Rectangle?(frame7), white7, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[108].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + num35 + rCurrentNPC.gfxOffY), null, white7, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 471 && rCurrentNPC.ai[3] < 0f)
					{
						for (int num239 = 1; num239 < rCurrentNPC.oldPos.Length; num239++)
						{
							Vector2[] oldPos13 = rCurrentNPC.oldPos;
							Color color40 = npcColor;
							color40.R = (byte)(0.5 * (double)color40.R * (double)(10 - num239) / 20.0);
							color40.G = (byte)(0.5 * (double)color40.G * (double)(10 - num239) / 20.0);
							color40.B = (byte)(0.5 * (double)color40.B * (double)(10 - num239) / 20.0);
							color40.A = (byte)(0.5 * (double)color40.A * (double)(10 - num239) / 20.0);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num239].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num239].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), color40, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 477 && rCurrentNPC.velocity.Length() > 9f)
					{
						for (int num240 = 1; num240 < rCurrentNPC.oldPos.Length; num240++)
						{
							Vector2[] oldPos14 = rCurrentNPC.oldPos;
							Color color41 = npcColor;
							color41.R = (byte)(0.5 * (double)color41.R * (double)(10 - num240) / 20.0);
							color41.G = (byte)(0.5 * (double)color41.G * (double)(10 - num240) / 20.0);
							color41.B = (byte)(0.5 * (double)color41.B * (double)(10 - num240) / 20.0);
							color41.A = (byte)(0.5 * (double)color41.A * (double)(10 - num240) / 20.0);
							Rectangle frame8 = rCurrentNPC.frame;
							int num241 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
							frame8.Y -= num241 * num240;
							while (frame8.Y < 0)
							{
								frame8.Y += num241 * Main.npcFrameCount[type];
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num240].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num240].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(frame8), color41, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					if (type == 479 && (double)rCurrentNPC.velocity.Length() > 6.5)
					{
						for (int num242 = 1; num242 < rCurrentNPC.oldPos.Length; num242++)
						{
							Vector2[] oldPos15 = rCurrentNPC.oldPos;
							Color color42 = npcColor;
							color42.R = (byte)(0.5 * (double)color42.R * (double)(10 - num242) / 20.0);
							color42.G = (byte)(0.5 * (double)color42.G * (double)(10 - num242) / 20.0);
							color42.B = (byte)(0.5 * (double)color42.B * (double)(10 - num242) / 20.0);
							color42.A = (byte)(0.5 * (double)color42.A * (double)(10 - num242) / 20.0);
							Rectangle frame9 = rCurrentNPC.frame;
							int num243 = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
							frame9.Y -= num243 * num242;
							while (frame9.Y < 0)
							{
								frame9.Y += num243 * Main.npcFrameCount[type];
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num242].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num242].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(frame9), color42, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 472)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[110].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (rCurrentNPC.aiStyle == 87)
					{
						if ((int)rCurrentNPC.ai[0] == 4 || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 6f)
						{
							for (int num244 = 1; num244 < rCurrentNPC.oldPos.Length; num244++)
							{
								Vector2[] oldPos16 = rCurrentNPC.oldPos;
								Color newColor5 = npcColor;
								newColor5.R = (byte)(0.5 * (double)newColor5.R * (double)(10 - num244) / 20.0);
								newColor5.G = (byte)(0.5 * (double)newColor5.G * (double)(10 - num244) / 20.0);
								newColor5.B = (byte)(0.5 * (double)newColor5.B * (double)(10 - num244) / 20.0);
								newColor5.A = (byte)(0.5 * (double)newColor5.A * (double)(10 - num244) / 20.0);
								newColor5 = rCurrentNPC.GetShimmerColor(newColor5);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num244].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num244].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36), new Rectangle?(rCurrentNPC.frame), newColor5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else if (type != 50)
					{
						switch (type)
						{
						case 405:
							mySpriteBatch.Draw(TextureAssets.GlowMask[141].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 406:
							mySpriteBatch.Draw(TextureAssets.GlowMask[142].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 407:
							mySpriteBatch.Draw(TextureAssets.GlowMask[139].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 409:
							mySpriteBatch.Draw(TextureAssets.GlowMask[138].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 410:
							mySpriteBatch.Draw(TextureAssets.GlowMask[137].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 411:
							mySpriteBatch.Draw(TextureAssets.GlowMask[136].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 412:
						case 413:
						case 414:
						{
							Color color43;
							color43..ctor(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0);
							int num245 = 157 + type - 412;
							if (type == 414 && rCurrentNPC.localAI[2] != 0f)
							{
								int num246 = (int)rCurrentNPC.localAI[2];
								if (rCurrentNPC.localAI[2] < 0f)
								{
									num246 = 128 + (int)rCurrentNPC.localAI[2];
								}
								int num247 = 255 - num246;
								color43..ctor(num247, num246, num246, num247);
							}
							mySpriteBatch.Draw(TextureAssets.GlowMask[num245].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), color43, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						}
						case 418:
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							float num311 = 0.25f;
							color50 = rCurrentNPC.GetAlpha(npcColor);
							float num248 = num311 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
							for (int num249 = 0; num249 < 4; num249++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num249 * 1.5707964f), default(Vector2)) * num248, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							goto IL_11479;
						}
						case 420:
							mySpriteBatch.Draw(TextureAssets.GlowMask[147].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 421:
							mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 423:
							mySpriteBatch.Draw(TextureAssets.GlowMask[145].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 424:
							mySpriteBatch.Draw(TextureAssets.GlowMask[144].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						case 425:
						{
							Vector2 vector70 = rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(TextureAssets.GlowMask[150].Value, vector70, new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							Vector2 drawpos = vector70 + new Vector2((float)(27 * -(float)rCurrentNPC.spriteDirection), 0f);
							float num250 = rCurrentNPC.ai[3];
							Main.DrawPrettyStarSparkle(Utils.Remap(num250, 0f, 15f, 0f, 1f, true), 0, drawpos, new Color(255, 255, 255, 0), Color.Green, num250, 0f, 30f, 30f, 36f, 0f, new Vector2(3f, 1.5f), new Vector2(2f, 2f));
							goto IL_11479;
						}
						case 429:
							mySpriteBatch.Draw(TextureAssets.GlowMask[151].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							goto IL_11479;
						}
						if (type <= 346)
						{
							if (type <= 209)
							{
								if (type != 160)
								{
									if (type == 209)
									{
										Texture2D texture2D = (rCurrentNPC.townNpcVariationIndex != 1) ? TextureAssets.GlowMask[167].Value : ((rCurrentNPC.altTexture != 1) ? TextureAssets.GlowMask[350].Value : TextureAssets.GlowMask[351].Value);
										mySpriteBatch.Draw(texture2D, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								else
								{
									Texture2D texture2D2 = (rCurrentNPC.townNpcVariationIndex != 1) ? TextureAssets.GlowMask[166].Value : TextureAssets.GlowMask[352].Value;
									mySpriteBatch.Draw(texture2D2, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							else if (type != 315)
							{
								if (type != 344)
								{
									if (type == 346)
									{
										float num251 = 4f;
										for (int num252 = 0; num252 < 4; num252++)
										{
											mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((double)((float)num252 * 1.5707964f), default(Vector2)) * num251, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
										}
										mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								else
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[253].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 100) * 0.5f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							else
							{
								float num253 = 2f;
								for (int num254 = 0; num254 < 4; num254++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((double)((float)num254 * 1.5707964f), default(Vector2)) * num253, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 200), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type <= 516)
						{
							switch (type)
							{
							case 415:
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								float num312 = 0.5f;
								color50 = rCurrentNPC.GetAlpha(npcColor);
								float num255 = num312 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
								for (int num256 = 0; num256 < 4; num256++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num256 * 1.5707964f), default(Vector2)) * num255, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								break;
							}
							case 416:
							case 418:
								break;
							case 417:
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								float num313 = 0.25f;
								color50 = rCurrentNPC.GetAlpha(npcColor);
								float num257 = num313 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
								for (int num258 = 0; num258 < 4; num258++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num258 * 1.5707964f), default(Vector2)) * num257, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								break;
							}
							case 419:
								mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								if (rCurrentNPC.ai[2] >= -6f)
								{
									float num314 = 0.5f;
									color50 = rCurrentNPC.GetAlpha(npcColor);
									float num259 = num314 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
									for (int num260 = 0; num260 < 4; num260++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num260 * 1.5707964f), default(Vector2)) * num259, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								else
								{
									float num261 = 4f;
									for (int num262 = 0; num262 < 4; num262++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((double)((float)num262 * 1.5707964f), default(Vector2)) * num261, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								break;
							default:
								if (type == 516)
								{
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									float num315 = 0.5f;
									color50 = rCurrentNPC.GetAlpha(npcColor);
									float num263 = num315 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
									for (int num264 = 0; num264 < 4; num264++)
									{
										mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num264 * 1.5707964f), default(Vector2)) * num263, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
								}
								break;
							}
						}
						else if (type != 518)
						{
							switch (type)
							{
							case 525:
								mySpriteBatch.Draw(TextureAssets.GlowMask[169].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 526:
								mySpriteBatch.Draw(TextureAssets.GlowMask[170].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 527:
								mySpriteBatch.Draw(TextureAssets.GlowMask[171].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							default:
								if (type == 533)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[172].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								break;
							}
						}
						else
						{
							Vector2 vector71;
							vector71..ctor(-10f, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize + vector71, rCurrentNPC.scale, spriteEffects, 0f);
							float num316 = 0.5f;
							color50 = rCurrentNPC.GetAlpha(npcColor);
							float num265 = num316 + (color50.ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
							for (int num266 = 0; num266 < 4; num266++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((double)((float)num266 * 1.5707964f), default(Vector2)) * num265, new Rectangle?(rCurrentNPC.frame), new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize + vector71, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else
					{
						Texture2D value74 = TextureAssets.Extra[39].Value;
						Vector2 center3 = rCurrentNPC.Center;
						float num267 = 0f;
						switch (rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]))
						{
						case 0:
							num267 = 2f;
							break;
						case 1:
							num267 = -6f;
							break;
						case 2:
							num267 = 2f;
							break;
						case 3:
							num267 = 10f;
							break;
						case 4:
							num267 = 2f;
							break;
						case 5:
							num267 = 0f;
							break;
						}
						center3.Y += rCurrentNPC.gfxOffY - (70f - num267) * rCurrentNPC.scale;
						mySpriteBatch.Draw(value74, center3 - screenPos, null, npcColor, 0f, value74.Size() / 2f, 1f, spriteEffects, 0f);
					}
					IL_11479:
					if (rCurrentNPC.aiStyle == 7)
					{
						this.DrawNPCExtras(rCurrentNPC, false, num36, num35, npcColor, halfSize, spriteEffects, screenPos);
						return;
					}
					return;
				}
				IL_2697:
				Texture2D value75 = TextureAssets.Npc[type].Value;
				Vector2 position29 = rCurrentNPC.Center - screenPos;
				position29 -= new Vector2((float)value75.Width, (float)(value75.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position29 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value75, position29, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				return;
			}
			IL_1149C:
			Texture2D value76 = TextureAssets.Npc[type].Value;
			Color color44 = Color.White;
			float amount10 = 0f;
			float amount11 = 0f;
			int num268 = 0;
			int num269 = 0;
			int num270 = 1;
			int num271 = 15;
			int num272 = 0;
			float scale8 = rCurrentNPC.scale;
			float value77 = rCurrentNPC.scale;
			int num273 = 0;
			float num274 = 0f;
			float num275 = 0f;
			float num276 = 0f;
			Color color45 = npcColor;
			Vector2 origin25 = halfSize;
			if (type <= 581)
			{
				if (type != 426)
				{
					if (type != 427)
					{
						switch (type)
						{
						case 521:
							num268 = 10;
							num269 = 2;
							num271 = num268;
							num272 = 1;
							value77 = 0.3f;
							break;
						case 523:
							num273 = 3;
							num275 = 10f * rCurrentNPC.scale;
							amount10 = 0.5f;
							amount11 = 0.8f;
							color44 = Color.HotPink;
							color44.A = 128;
							num276 = rCurrentNPC.localAI[0];
							num274 = rCurrentNPC.localAI[1];
							break;
						case 541:
							num273 = 4;
							num275 = 6f;
							num274 = (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 2.4f / 2.4f * 6.2831855f)) / 2f + 0.5f;
							color44 = Color.Gold;
							amount10 = 0.5f;
							break;
						case 542:
						case 543:
						case 544:
						case 545:
							num268 = 6;
							num269 = 3;
							num271 = num268 * 2;
							break;
						case 546:
							num268 = 8;
							num269 = 2;
							num271 = num268 * 3;
							break;
						case 552:
						case 553:
						case 554:
						case 555:
						case 556:
						case 557:
						case 561:
						case 562:
						case 563:
						case 568:
						case 569:
						case 570:
						case 571:
						case 572:
						case 573:
							num268 = 0;
							if (type == 561 || type == 562 || type == 563)
							{
								num36 = -8f;
							}
							if (type == 555 || type == 556 || type == 557)
							{
								num36 = -5f;
							}
							if (type == 572 || type == 573)
							{
								num36 = -4f;
							}
							if (type == 570 || type == 571)
							{
								spriteEffects ^= 1;
								num36 = -2f;
							}
							if (type == 568 || type == 569)
							{
								spriteEffects ^= 1;
								num36 = -3f;
								num273 = 4;
								num275 = 4f;
								num274 = (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 1.5f / 1.5f * 6.2831855f)) / 6f + 0.75f;
								color44 = Color.HotPink;
								color44.A = 127;
								amount10 = 0.5f;
							}
							if (rCurrentNPC.localAI[3] < 60f)
							{
								float num277 = rCurrentNPC.localAI[3] / 60f;
								num273 = 3;
								num274 = 1f - num277 * num277;
								num275 = 8f;
								color44..ctor(127, 0, 255, 0);
								amount11 = 1f;
								color45 = Color.Lerp(Color.Transparent, color45, num277 * num277);
							}
							break;
						case 558:
						case 559:
						case 560:
						case 574:
						case 575:
							if (rCurrentNPC.ai[0] != 2f)
							{
								num268 = 0;
							}
							else
							{
								num268 = 6;
								num269 = 2;
								num271 = num268 * 3;
								num272 = 1;
							}
							break;
						case 566:
						case 567:
						case 578:
							num268 = 0;
							num36 = -2f;
							break;
						case 581:
							num268 = 6;
							num269 = 2;
							num271 = num268 * 3;
							break;
						}
					}
					else
					{
						num268 = 8;
						num269 = 2;
						num271 = num268 * 3;
					}
				}
				else
				{
					num273 = 4;
					num275 = 4f;
					num274 = (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 1.2f / 1.2f * 6.2831855f)) / 2f + 0.5f;
					color44 = Color.Turquoise;
					amount10 = 0.5f;
					num268 = 6;
					num269 = 2;
					num271 = num268;
				}
			}
			else if (type != 618)
			{
				if (type != 620)
				{
					if (type == 661)
					{
						num273 = 6;
						num275 = 6f;
						num274 = (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 2.4f / 2.4f * 6.2831855f)) / 2f + 0.5f;
						num274 = MathHelper.Max(num274, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], true));
						amount10 = 0.5f;
					}
				}
				else
				{
					num36 = -9f;
					origin25 = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2((float)(-4 * rCurrentNPC.spriteDirection), 0f);
					num273 = 4;
					num275 = 6f;
					num274 = (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 2.4f / 2.4f * 6.2831855f)) / 2f + 0.5f;
					color44 = Color.Gold;
					amount10 = 0.5f;
					num268 = 6;
					num269 = 2;
					num271 = num268 * 3;
					num272 = 1;
				}
			}
			else
			{
				float num278 = 90f;
				float num279 = 180f;
				if (rCurrentNPC.ai[0] == 1f && rCurrentNPC.ai[1] < num278)
				{
					int num280 = 3;
					float num281 = num278 / (float)num280;
					float num317 = rCurrentNPC.ai[1] % num281 / num281;
					num273 = 6;
					num275 = 15f;
					num274 = num317 * 0.8f + 0.2f;
				}
				if (rCurrentNPC.ai[0] == 3f && rCurrentNPC.ai[1] < num279)
				{
					int num282 = 1;
					float num283 = num279 / (float)num282;
					float num284 = rCurrentNPC.ai[1] % num283 / num283;
					num273 = 4;
					num275 = 25f;
					num274 = num284;
					Vector2 vector72 = rCurrentNPC.scale * new Vector2(1f, 0.5f + num284 * 0.75f);
					Texture2D value78 = TextureAssets.Extra[59].Value;
					Rectangle rectangle12 = value78.Frame(1, 1, 0, 0, 0, 0);
					Vector2 origin26 = rectangle12.Size() * new Vector2(0.5f, 0.5f);
					for (int num285 = 0; num285 < num273; num285++)
					{
						Color white8 = Color.White;
						white8 *= Utils.GetLerpValue(0f, 0.5f, num274, false) * Utils.GetLerpValue(1f, 0.5f, num274, false) * 0.25f;
						white8.A = 0;
						white8.G = 0;
						white8.B = 0;
						float num286 = (float)num285 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276;
						Vector2 position30 = rCurrentNPC.Center + num286.ToRotationVector2() * num275 * num274 - screenPos;
						position30 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position30 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value78, position30, new Rectangle?(rectangle12), white8, num286, origin26, vector72 * 1.8f, spriteEffects, 0f);
					}
					for (int num287 = 0; num287 < num273; num287++)
					{
						Color white9 = Color.White;
						white9 *= Utils.GetLerpValue(0f, 0.5f, num274, false) * Utils.GetLerpValue(1f, 0.5f, num274, false) * 0.25f;
						white9.A = 0;
						float num288 = (float)num287 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276;
						Vector2 position31 = rCurrentNPC.Center + num288.ToRotationVector2() * num275 * num274 - screenPos;
						position31 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position31 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value78, position31, new Rectangle?(rectangle12), white9, num288, origin26, vector72 * 1.5f, spriteEffects, 0f);
					}
				}
			}
			for (int num289 = num270; num289 < num268; num289 += num269)
			{
				Vector2[] oldPos17 = rCurrentNPC.oldPos;
				Color value79 = color45;
				value79 = Color.Lerp(value79, color44, amount10);
				value79 = rCurrentNPC.GetAlpha(value79);
				value79 *= (float)(num268 - num289) / (float)num271;
				float rotation11 = rCurrentNPC.rotation;
				if (num272 == 1)
				{
					float num318 = rCurrentNPC.oldRot[num289];
				}
				float scale9 = MathHelper.Lerp(scale8, value77, 1f - (float)(num268 - num289) / (float)num271);
				Vector2 position32 = rCurrentNPC.oldPos[num289] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
				position32 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position32 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value76, position32, new Rectangle?(rCurrentNPC.frame), value79, rCurrentNPC.rotation, halfSize, scale9, spriteEffects, 0f);
			}
			for (int num290 = 0; num290 < num273; num290++)
			{
				Color value80 = npcColor;
				value80 = Color.Lerp(value80, color44, amount10);
				value80 = rCurrentNPC.GetAlpha(value80);
				value80 = Color.Lerp(value80, color44, amount11);
				value80 *= 1f - num274;
				Vector2 position33 = rCurrentNPC.Center + ((float)num290 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276).ToRotationVector2() * num275 * num274 - screenPos;
				position33 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position33 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value76, position33, new Rectangle?(rCurrentNPC.frame), value80, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, spriteEffects, 0f);
			}
			Vector2 vector73 = rCurrentNPC.Center - screenPos;
			vector73 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
			vector73 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
			mySpriteBatch.Draw(value76, vector73, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(color45), rCurrentNPC.rotation, origin25, rCurrentNPC.scale, spriteEffects, 0f);
			if (type != 426)
			{
				if (type == 427)
				{
					mySpriteBatch.Draw(TextureAssets.GlowMask[152].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
			}
			else
			{
				mySpriteBatch.Draw(TextureAssets.GlowMask[153].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-(float)TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-(float)TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)Main.npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num36 + rCurrentNPC.gfxOffY), new Rectangle?(rCurrentNPC.frame), new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if (type == 541)
			{
				Color color46 = new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(Color.Gold);
				for (int num291 = 0; num291 < num273; num291++)
				{
					Color newColor6 = color46;
					newColor6 = rCurrentNPC.GetAlpha(newColor6);
					newColor6 *= 1f - num274;
					Vector2 position34 = rCurrentNPC.Center + ((float)num291 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276).ToRotationVector2() * (4f * num274 + 2f) - screenPos;
					position34 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position34 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, position34, new Rectangle?(rCurrentNPC.frame), newColor6, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, vector73, new Rectangle?(rCurrentNPC.frame), color46, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if (type == 661)
			{
				num276 = MathHelper.Lerp(0f, 3f, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], true));
				for (int num292 = 0; num292 < num273; num292++)
				{
					Color newColor7 = new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(Main.hslToRgb((Main.GlobalTimeWrappedHourly + (float)num292 / (float)num273) % 1f, 1f, 0.5f, byte.MaxValue));
					newColor7 = rCurrentNPC.GetAlpha(newColor7);
					newColor7 *= 1f - num274 * 0.5f;
					newColor7.A = 0;
					float num293 = 2f + rCurrentNPC.ai[2];
					Vector2 position35 = rCurrentNPC.Center + ((float)num292 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276).ToRotationVector2() * (num293 * num274 + 2f) - screenPos;
					position35 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position35 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value76, position35, new Rectangle?(rCurrentNPC.frame), newColor7, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(value76, vector73, new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 0) * 0.1f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if ((type == 568 || type == 569) && rCurrentNPC.localAI[3] >= 60f)
			{
				Color color47 = new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(color44);
				for (int num294 = 0; num294 < num273; num294++)
				{
					Color newColor8 = color47;
					newColor8 = rCurrentNPC.GetAlpha(newColor8);
					newColor8 *= 1f - num274;
					Vector2 position36 = rCurrentNPC.Center + ((float)num294 / (float)num273 * 6.2831855f + rCurrentNPC.rotation + num276).ToRotationVector2() * (4f * num274 + 2f) - screenPos;
					position36 -= new Vector2((float)value76.Width, (float)(value76.Height / Main.npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position36 += halfSize * rCurrentNPC.scale + new Vector2(0f, num35 + num36 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, position36, new Rectangle?(rCurrentNPC.frame), newColor8, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, vector73, new Rectangle?(rCurrentNPC.frame), color47, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				float num295 = rCurrentNPC.localAI[0];
				if (num295 > 0f)
				{
					byte a = (byte)((Math.Cos((double)(num295 * 6.2831855f / 60f)) * 0.5 + 0.5) * 32.0 + 0.0);
					Color color48 = new Color(180, 90, 255, (int)a) * 0.75f;
					float num296 = 1f;
					if (num295 < 60f)
					{
						float lerpValue3 = Utils.GetLerpValue(0f, 60f, num295, false);
						color48 *= lerpValue3;
						num296 = MathHelper.Lerp(1f, 0.5f, 1f - lerpValue3 * lerpValue3);
					}
					Texture2D value81 = TextureAssets.Extra[89].Value;
					Vector2 origin27 = value81.Size() / 2f;
					Vector2 scale10;
					scale10..ctor(num296);
					float num297 = num295 * 0.0041887905f;
					float num298 = 1.5707964f;
					scale10.Y *= 1f;
					scale10.X *= 1f;
					for (float num299 = 0f; num299 < 16f; num299 += 1f)
					{
						float num300 = num297 + 6.2831855f * (num299 / 16f);
						Vector2 position37 = rCurrentNPC.Center - screenPos + num300.ToRotationVector2() * 400f * num296;
						mySpriteBatch.Draw(value81, position37, null, color48, num300 + 1.5707964f + num298, origin27, scale10, 0, 0f);
					}
				}
			}
			if (type == 546)
			{
				mySpriteBatch.Draw(TextureAssets.Extra[76].Value, vector73, new Rectangle?(rCurrentNPC.frame), new Color(255, 255, 255, 200), MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if ((type == 566 || type == 567) && rCurrentNPC.localAI[3] >= 115f)
			{
				int frameY = (int)(Main.GlobalTimeWrappedHourly % 0.5f / 0.5f * 4f);
				Texture2D value82 = TextureAssets.Extra[80].Value;
				Rectangle rectangle13 = value82.Frame(1, 4, 0, frameY, 0, 0);
				Vector2 vector74 = new Vector2((float)(rCurrentNPC.spriteDirection * 8), -26f) * rCurrentNPC.scale;
				int num301 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
				int num302 = 0;
				switch (num301)
				{
				case 0:
					num302 = 6;
					break;
				case 1:
					num302 = 4;
					break;
				case 2:
					num302 = 2;
					break;
				case 3:
					num302 = 6;
					break;
				case 4:
					num302 = 8;
					break;
				case 5:
					num302 = 6;
					break;
				case 6:
					num302 = 4;
					break;
				case 7:
					num302 = 6;
					break;
				case 8:
					num302 = 2;
					break;
				}
				Color color49;
				color49..ctor(255, 255, 255, 130);
				vector74.Y += (float)num302;
				mySpriteBatch.Draw(value82, vector73 + vector74 * rCurrentNPC.scale, new Rectangle?(rectangle13), color49, MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), rectangle13.Size() / 2f, rCurrentNPC.scale * 0.7f, spriteEffects ^ 1, 0f);
			}
			if (type == 618)
			{
				mySpriteBatch.Draw(TextureAssets.Extra[129].Value, vector73, new Rectangle?(rCurrentNPC.frame), rCurrentNPC.GetAlpha(color45), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
		}

		// Token: 0x0600048A RID: 1162 RVA: 0x000CE288 File Offset: 0x000CC488
		private static void DrawNPCDirect_Deerclops(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			Texture2D value = TextureAssets.Npc[typeCache].Value;
			Vector2 vector = rCurrentNPC.Bottom - screenPos;
			Rectangle rectangle = value.Frame(5, 5, rCurrentNPC.frame.Y / 5, rCurrentNPC.frame.Y % 5, 2, 2);
			Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
			origin.Y -= 4f;
			int num = 106;
			if (rCurrentNPC.spriteDirection == 1)
			{
				origin.X = (float)num;
			}
			else
			{
				origin.X = (float)(rectangle.Width - num);
			}
			Color value2 = Color.White;
			float amount = 0f;
			float amount2 = 0f;
			int num2 = 0;
			float num3 = 0f;
			float num4 = 0f;
			float num5 = 10f;
			Color color = npcColor;
			if (rCurrentNPC.localAI[3] > 0f)
			{
				float num6 = rCurrentNPC.localAI[3] / 36f;
				num2 = 2;
				num3 = num6 * num6;
				num4 = 20f;
				value2 = new Color(80, 0, 0, 255) * 0.5f;
				amount2 = 1f;
				color = Color.Lerp(Color.Transparent, color, 1f - num6 * num6);
			}
			for (int i = 0; i < num2; i++)
			{
				Color value3 = npcColor;
				value3 = Color.Lerp(value3, value2, amount);
				value3 = rCurrentNPC.GetAlpha(value3);
				value3 = Color.Lerp(value3, value2, amount2);
				value3 *= 1f - num3 * 0.5f;
				Vector2 vector2 = vector;
				mySpriteBatch.Draw(value, vector2 + new Vector2(0f, 1f).RotatedBy((double)((float)i * 6.2831855f / (float)num2 + Main.GlobalTimeWrappedHourly * num5), default(Vector2)) * num3 * num4, new Rectangle?(rectangle), value3, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect ^ 1, 0f);
			}
			Color color2 = rCurrentNPC.GetAlpha(color);
			Color value4;
			value4..ctor(50, 0, 160);
			float num7 = 0f;
			if (rCurrentNPC.localAI[3] > 0f)
			{
				float amount3 = Utils.Remap(rCurrentNPC.localAI[3], 0f, 20f, 0f, 1f, true);
				color2 = Color.Lerp(color2, value4, amount3);
			}
			if (rCurrentNPC.ai[0] == 7f || rCurrentNPC.ai[0] == 8f)
			{
				num7 = Utils.Remap(rCurrentNPC.ai[1], 20f, 60f, 0f, 2f, true);
				if (num7 > 1f)
				{
					num7 = 2f - num7;
				}
				color2 = Color.Lerp(color2, value4, num7);
				color2 *= 1f - num7;
				float num8 = 5f;
				int j = 0;
				while ((float)j < num8)
				{
					Vector2 vector3 = vector;
					float num9 = num7 * num7;
					float num10 = 80f * num9;
					float num11 = 80f * num9 + (float)(30 * j) * num9;
					Vector2 vector4 = Vector2.UnitX.RotatedBy((double)((float)j * 6.2831855f / num8 + Main.GlobalTimeWrappedHourly * 6f), default(Vector2)) * num10;
					Vector2 vector5 = Vector2.UnitX.RotatedBy((double)((float)j * 6.2831855f / num8 + Main.GlobalTimeWrappedHourly * 3f * ((float)j * 0.5f)), default(Vector2)) * num11;
					mySpriteBatch.Draw(value, vector3 + vector4 + vector5, new Rectangle?(rectangle), color2 * 0.5f, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect ^ 1, 0f);
					j++;
				}
			}
			mySpriteBatch.Draw(value, vector, new Rectangle?(rectangle), color2, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect ^ 1, 0f);
			if (rCurrentNPC.localAI[3] > 0f)
			{
				Texture2D value5 = TextureAssets.Extra[245].Value;
				float num12 = Utils.Remap(rCurrentNPC.localAI[3], 0f, 20f, 0f, 1f, true);
				Color color3 = new Color(255, 30, 30, 66) * rCurrentNPC.Opacity * num12 * 0.25f * (1f - num7);
				for (int k = 0; k < num2; k++)
				{
					Vector2 vector6 = vector;
					mySpriteBatch.Draw(value5, vector6 + new Vector2(0f, 1f).RotatedBy((double)((float)k * 6.2831855f / (float)num2 + Main.GlobalTimeWrappedHourly * num5), default(Vector2)) * num3 * 4f, new Rectangle?(rectangle), color3, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect ^ 1, 0f);
				}
			}
		}

		// Token: 0x0600048B RID: 1163 RVA: 0x000CE7A0 File Offset: 0x000CC9A0
		private static void DrawNPCDirect_DeerclopsLeg(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			Rectangle? sourceRectangle = null;
			int num = 0;
			int num2 = 0;
			mySpriteBatch.Draw(TextureAssets.Npc[typeCache].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[typeCache].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[typeCache].Height() * rCurrentNPC.scale / (float)Main.npcFrameCount[typeCache] + 4f + halfSize.Y * rCurrentNPC.scale + (float)num2 + (float)num + rCurrentNPC.gfxOffY), sourceRectangle, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
		}

		// Token: 0x0600048C RID: 1164 RVA: 0x000CE898 File Offset: 0x000CCA98
		private static void DrawNPCDirect_Faeling(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			Texture2D value = TextureAssets.Npc[typeCache].Value;
			Vector2 vector = rCurrentNPC.Center - screenPos;
			int num = 5;
			int horizontalFrames = 4;
			float num2 = ((float)rCurrentNPC.whoAmI * 0.11f + (float)Main.timeForVisualEffects / 360f) % 1f;
			Color color = Main.hslToRgb(num2, 1f, 0.65f, byte.MaxValue);
			color.A /= 2;
			float rotation = rCurrentNPC.rotation;
			Rectangle rectangle = value.Frame(horizontalFrames, num, 0, rCurrentNPC.frame.Y, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float scale = rCurrentNPC.scale;
			Rectangle value2 = value.Frame(horizontalFrames, num, 2, 0, 0, 0);
			Color color2 = new Color(255, 255, 255, 0) * 1f;
			int num3 = rCurrentNPC.oldPos.Length;
			int num4 = num3 - 1 - 5;
			int num5 = 5;
			int num6 = 3;
			float num7 = 32f;
			float num8 = 16f;
			float fromMax = new Vector2(num7, num8).Length();
			float num9 = Utils.Remap(Vector2.Distance(rCurrentNPC.oldPos[num4], rCurrentNPC.position), 0f, fromMax, 0f, 100f, true);
			num9 = (float)((int)num9 / 5);
			num9 *= 5f;
			num9 /= 100f;
			num8 *= num9;
			num7 *= num9;
			float num10 = 9f;
			float num11 = 0.5f;
			float num12 = 3.1415927f;
			for (int num13 = num4; num13 >= num5; num13 -= num6)
			{
				Vector2 vector2 = rCurrentNPC.oldPos[num13] - rCurrentNPC.position;
				float num14 = Utils.Remap((float)num13, 0f, (float)num3, 1f, 0f, true);
				float num15 = 1f - num14;
				Vector2 spinningpoint = new Vector2((float)Math.Sin((double)((float)rCurrentNPC.whoAmI / 17f) + Main.timeForVisualEffects / (double)num10 + (double)(num14 * 2f * 6.2831855f)) * num8, 0f - num7) * num15;
				vector2 += spinningpoint.RotatedBy((double)num12, default(Vector2));
				Color color3 = Main.hslToRgb((num2 + num15 * num11) % 1f, 1f, 0.5f, byte.MaxValue);
				color3.A = 0;
				mySpriteBatch.Draw(value, vector + vector2, new Rectangle?(value2), color3 * num14 * 0.16f, rotation, origin, scale * Utils.Remap(num14 * num14, 0f, 1f, 0f, 2.5f, true), npcSpriteEffect, 0f);
			}
			mySpriteBatch.Draw(value, vector, new Rectangle?(value2), color2, rotation, origin, scale, npcSpriteEffect, 0f);
			Rectangle value3 = value.Frame(horizontalFrames, num, 1, rCurrentNPC.frame.Y, 0, 0);
			Color white = Color.White;
			white.A /= 2;
			mySpriteBatch.Draw(value, vector, new Rectangle?(value3), white, rotation, origin, scale, npcSpriteEffect, 0f);
			mySpriteBatch.Draw(value, vector, new Rectangle?(rectangle), color, rotation, origin, scale, npcSpriteEffect, 0f);
			float num16 = MathHelper.Clamp((float)Math.Sin(Main.timeForVisualEffects / 60.0) * 0.3f + 0.3f, 0f, 1f);
			float num17 = 0.8f + (float)Math.Sin(Main.timeForVisualEffects / 15.0 * 6.2831854820251465) * 0.3f;
			Rectangle value4 = value.Frame(horizontalFrames, num, 3, rCurrentNPC.whoAmI % num, 0, 0);
			Color color4 = Color.Lerp(color, new Color(255, 255, 255, 0), 0.5f) * num16;
			mySpriteBatch.Draw(value, vector, new Rectangle?(value4), color4, rotation, origin, scale * num17, 0, 0f);
			Rectangle value5 = value.Frame(horizontalFrames, num, 3, 1, 0, 0);
			Color color5 = Color.Lerp(color, new Color(255, 255, 255, 0), 0.5f) * num16;
			mySpriteBatch.Draw(value, vector, new Rectangle?(value5), color5, rotation, origin, scale * num17, 0, 0f);
		}

		// Token: 0x0600048D RID: 1165 RVA: 0x000CED08 File Offset: 0x000CCF08
		private static void DrawNPCDirect_HallowBoss(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			Texture2D value = TextureAssets.Npc[typeCache].Value;
			Vector2 vector = rCurrentNPC.Center - screenPos;
			bool flag = rCurrentNPC.AI_120_HallowBoss_IsInPhase2();
			int num = (int)rCurrentNPC.ai[0];
			Texture2D value2 = TextureAssets.Extra[159].Value;
			Rectangle rectangle = value2.Frame(1, 11, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 11, 0, 0);
			Color color = rCurrentNPC.GetAlpha(npcColor);
			Texture2D value3 = TextureAssets.Extra[158].Value;
			Texture2D value4 = TextureAssets.Extra[160].Value;
			Texture2D value5 = TextureAssets.Extra[157].Value;
			int armFrame_Count;
			int armFrameToUseLeft;
			int armFrameToUseRight;
			Main.DrawNPCDirect_GetHallowBossArmFrame(rCurrentNPC, out armFrame_Count, out armFrameToUseLeft, out armFrameToUseRight);
			Rectangle rectangle2 = value3.Frame(1, armFrame_Count, 0, armFrameToUseLeft, 0, 0);
			Rectangle rectangle3 = value4.Frame(1, armFrame_Count, 0, armFrameToUseRight, 0, 0);
			Vector2 origin = rectangle2.Size() / 2f;
			Vector2 origin2 = rectangle3.Size() / 2f;
			int num2 = 0;
			int num3 = 0;
			if (armFrameToUseLeft == 5)
			{
				num2 = 1;
			}
			if (armFrameToUseRight == 5)
			{
				num3 = 1;
			}
			float num4 = 1f;
			int num5 = 0;
			int num6 = 0;
			float num7 = 0f;
			float num8 = 0f;
			float num9 = 0f;
			if (num == 8 || num == 9)
			{
				num7 = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(90f, 30f, rCurrentNPC.ai[1], true);
				num8 = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(90f, 70f, rCurrentNPC.ai[1], true);
				num9 = Utils.GetLerpValue(0f, 15f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(45f, 30f, rCurrentNPC.ai[1], true);
				color = Color.Lerp(color, Color.White, num7);
				num4 *= 1f - num9;
				num5 = 4;
				num6 = 3;
			}
			if (num == 10)
			{
				num7 = Utils.GetLerpValue(30f, 90f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(165f, 90f, rCurrentNPC.ai[1], true);
				num8 = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], true);
				num9 = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], true);
				color = Color.Lerp(color, Color.White, num7);
				num4 *= 1f - num9;
				num6 = 4;
			}
			if (num6 + num5 > 0)
			{
				for (int i = -num6; i <= num6 + num5; i++)
				{
					if (i != 0)
					{
						Color color2 = Color.White;
						Vector2 position = vector;
						if (num == 8 || num == 9)
						{
							float hue = ((float)i + 5f) / 10f;
							float num10 = 200f;
							float num11 = (float)Main.timeForVisualEffects / 60f;
							Matrix matrix = Matrix.CreateRotationX((num11 - 0.3f + (float)i * 0.1f) * 0.7f * 6.2831855f) * Matrix.CreateRotationY((num11 - 0.8f + (float)i * 0.3f) * 0.7f * 6.2831855f) * Matrix.CreateRotationZ((num11 + (float)i * 0.5f) * 0.1f * 6.2831855f);
							Vector3 vector2 = Vector3.Transform(Vector3.Forward, matrix);
							num10 += Utils.GetLerpValue(-1f, 1f, vector2.Z, true) * 150f;
							Vector2 spinningpoint = new Vector2(vector2.X, vector2.Y) * num10 * num7;
							float lerpValue = Utils.GetLerpValue(90f, 0f, rCurrentNPC.ai[1], true);
							color2 = Main.hslToRgb(hue, 1f, MathHelper.Lerp(0.5f, 1f, lerpValue), byte.MaxValue) * 0.8f * num8;
							color2.A /= 3;
							position += spinningpoint.RotatedBy((double)(rCurrentNPC.ai[1] / 180f * 6.2831855f), default(Vector2));
						}
						if (num == 10)
						{
							if (rCurrentNPC.ai[1] >= 90f)
							{
								float num12 = (float)Main.timeForVisualEffects / 90f;
								int num13 = i;
								if (num13 < 0)
								{
									num13++;
								}
								Vector2 vector3 = (((float)num13 + 0.5f) * 0.7853982f + 6.2831855f * num12).ToRotationVector2();
								position += vector3 * new Vector2(600f * num7, 150f * num7);
							}
							else
							{
								position += 200f * new Vector2((float)i, 0f) * num7;
							}
							color2 = Color.White * 0.8f * num8 * num4;
							color2.A /= 3;
						}
						if (i > num6)
						{
							float lerpValue2 = Utils.GetLerpValue(30f, 70f, rCurrentNPC.ai[1], true);
							if (lerpValue2 == 0f)
							{
								goto IL_712;
							}
							position = vector + rCurrentNPC.velocity * -3f * ((float)i - 4f) * lerpValue2;
							color2 *= 1f - num9;
						}
						mySpriteBatch.Draw(value2, position, new Rectangle?(rectangle), color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
						mySpriteBatch.Draw(value5, position, new Rectangle?(rectangle), color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
						if (flag)
						{
							Texture2D value6 = TextureAssets.Extra[187].Value;
							Rectangle value7 = value6.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8, 0, 0);
							mySpriteBatch.Draw(value6, position, new Rectangle?(value7), color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
						}
						mySpriteBatch.Draw(value, position, new Rectangle?(rCurrentNPC.frame), color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
						for (int j = 0; j < 2; j++)
						{
							if (j == num2)
							{
								mySpriteBatch.Draw(value3, position, new Rectangle?(rectangle2), color2, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
							}
							if (j == num3)
							{
								mySpriteBatch.Draw(value4, position, new Rectangle?(rectangle3), color2, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
							}
						}
					}
					IL_712:;
				}
			}
			color *= num4;
			mySpriteBatch.Draw(value2, vector, new Rectangle?(rectangle), color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
			if (!rCurrentNPC.IsABestiaryIconDummy)
			{
				mySpriteBatch.End();
				mySpriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
			}
			DrawData value8 = new DrawData(value5, vector, new Rectangle?(rectangle), color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
			GameShaders.Misc["HallowBoss"].Apply(new DrawData?(value8));
			value8.Draw(mySpriteBatch);
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			if (!rCurrentNPC.IsABestiaryIconDummy)
			{
				mySpriteBatch.End();
				mySpriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			}
			float num14 = (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 0.5f)) * 0.5f + 0.5f;
			Color color3 = Main.hslToRgb((num14 * 0.08f + 0.6f) % 1f, 1f, 0.5f, byte.MaxValue);
			color3.A = 0;
			color3 *= 0.6f;
			if (NPC.ShouldEmpressBeEnraged())
			{
				color3 = Main.OurFavoriteColor;
				color3.A = 0;
				color3 *= 0.3f;
			}
			color3 *= num4 * rCurrentNPC.Opacity;
			if (flag)
			{
				Texture2D value9 = TextureAssets.Extra[187].Value;
				Rectangle value10 = value9.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8, 0, 0);
				mySpriteBatch.Draw(value9, vector, new Rectangle?(value10), color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				for (float num15 = 0f; num15 < 1f; num15 += 0.25f)
				{
					Vector2 vector4 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy((double)(num15 * 6.2831855f + 0.7853982f), default(Vector2)) * MathHelper.Lerp(2f, 8f, num14);
					mySpriteBatch.Draw(value9, vector + vector4, new Rectangle?(value10), color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
			mySpriteBatch.Draw(value, vector, new Rectangle?(rCurrentNPC.frame), color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
			if (flag)
			{
				Texture2D value11 = TextureAssets.Extra[188].Value;
				for (float num16 = 0f; num16 < 1f; num16 += 0.25f)
				{
					Vector2 vector5 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy((double)(num16 * 6.2831855f + 0.7853982f), default(Vector2)) * MathHelper.Lerp(2f, 8f, num14);
					mySpriteBatch.Draw(value11, vector + vector5, null, color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
			for (int k = 0; k < 2; k++)
			{
				if (k == num2)
				{
					mySpriteBatch.Draw(value3, vector, new Rectangle?(rectangle2), color, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
				if (k == num3)
				{
					mySpriteBatch.Draw(value4, vector, new Rectangle?(rectangle3), color, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
		}

		// Token: 0x0600048E RID: 1166 RVA: 0x000CF834 File Offset: 0x000CDA34
		private static void DrawNPCDirect_GetHallowBossArmFrame(NPC rCurrentNPC, out int armFrame_Count, out int armFrameToUseLeft, out int armFrameToUseRight)
		{
			int num = 0;
			int num2 = 1;
			int num3 = 2;
			int num4 = 3;
			int num5 = 4;
			int num6 = 5;
			int num7 = 6;
			armFrame_Count = 7;
			armFrameToUseLeft = num;
			armFrameToUseRight = num;
			float num8 = rCurrentNPC.ai[1];
			switch ((int)rCurrentNPC.ai[0])
			{
			case 0:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 106f) ? num2 : ((num8 >= 110f) ? num : num3)));
				return;
			case 1:
			case 3:
				break;
			case 2:
			case 11:
			{
				int num9 = (num8 < 5f) ? num3 : ((num8 >= 65f) ? num3 : num4);
				armFrameToUseLeft = num9;
				return;
			}
			case 4:
			case 10:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 6f) ? num3 : ((num8 >= 54f) ? num3 : num4)));
				return;
			case 5:
			{
				int num9 = (num8 < 6f) ? num3 : ((num8 >= 54f) ? num3 : num4);
				armFrameToUseRight = num9;
				return;
			}
			case 6:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 6f) ? num3 : ((num8 < 174f) ? num4 : ((num8 >= 180f) ? num : num3))));
				return;
			case 7:
			{
				bool isExpertMode = Main.GameModeInfo.IsExpertMode;
				int num10 = isExpertMode ? 40 : 60;
				int num11 = 0;
				int num12 = 5;
				if (num8 < (float)(num11 + num12))
				{
					armFrameToUseLeft = num3;
					return;
				}
				num11 += num12;
				if (num8 < (float)(num11 + num10 - num12))
				{
					armFrameToUseLeft = num4;
					return;
				}
				num11 += num10 - num12;
				if (num8 < (float)(num11 + num12))
				{
					armFrameToUseLeft = num4;
					armFrameToUseRight = num3;
					return;
				}
				num11 += num12;
				if (num8 < (float)(num11 + num10 - num12))
				{
					armFrameToUseLeft = num4;
					armFrameToUseRight = num4;
					return;
				}
				num11 += num10 - num12;
				if (num8 < (float)(num11 + num10))
				{
					armFrameToUseLeft = num5;
					armFrameToUseRight = num4;
					return;
				}
				num11 += num10;
				if (num8 < (float)(num11 + num10))
				{
					armFrameToUseLeft = num5;
					armFrameToUseRight = num5;
					return;
				}
				num11 += num10;
				if (isExpertMode)
				{
					if (num8 < (float)(num11 + num12))
					{
						armFrameToUseLeft = num4;
						armFrameToUseRight = num5;
						return;
					}
					num11 += num12;
					if (num8 < (float)(num11 + num10 - num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num5;
						return;
					}
					num11 += num10 - num12;
					if (num8 < (float)(num11 + num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num4;
						return;
					}
					num11 += num12;
					if (num8 < (float)(num11 + num10 - num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num2;
						return;
					}
					num11 += num10 - num12;
				}
				if (num8 >= (float)num11)
				{
					armFrameToUseLeft = num3;
					armFrameToUseRight = num3;
				}
				break;
			}
			case 8:
			case 9:
			{
				int num9 = (num8 < 10f) ? num3 : ((num8 < 20f) ? num4 : ((num8 >= 30f) ? num6 : num3));
				int num13 = num9;
				int num14 = num9;
				int num15 = (int)rCurrentNPC.ai[3];
				int num16 = -1;
				if (num8 < 30f)
				{
					if (num15 == -1 * num16)
					{
						num14 = num2;
					}
					if (num15 == num16)
					{
						num13 = num2;
					}
				}
				int num17 = num6;
				int num18 = num7;
				if (num15 == num16 && num14 == num17)
				{
					num14 = num18;
				}
				if (num15 == -1 * num16 && num13 == num17)
				{
					num13 = num18;
				}
				armFrameToUseLeft = num14;
				armFrameToUseRight = num13;
				return;
			}
			default:
				return;
			}
		}

		// Token: 0x0600048F RID: 1167 RVA: 0x000CFB28 File Offset: 0x000CDD28
		private static void DrawNPC_SlimeItem(NPC rCurrentNPC, int typeCache, Color npcColor, float addedRotation)
		{
			int num11 = (int)rCurrentNPC.ai[1];
			float num2 = 1f;
			float num3 = 22f * rCurrentNPC.scale;
			float num4 = 18f * rCurrentNPC.scale;
			Texture2D itemTexture;
			Rectangle rectangle;
			Main.GetItemDrawFrame(num11, out itemTexture, out rectangle);
			float num5 = (float)rectangle.Width;
			float num6 = (float)rectangle.Height;
			bool flag = (int)rCurrentNPC.ai[0] == -999;
			if (flag)
			{
				num3 = 14f * rCurrentNPC.scale;
				num4 = 14f * rCurrentNPC.scale;
			}
			if (num5 > num3)
			{
				num2 *= num3 / num5;
				num5 *= num2;
				num6 *= num2;
			}
			if (num6 > num4)
			{
				num2 *= num4 / num6;
				num5 *= num2;
				num6 *= num2;
			}
			float num7 = -1f;
			float num8 = 1f;
			int num9 = rCurrentNPC.frame.Y / (TextureAssets.Npc[typeCache].Height() / Main.npcFrameCount[typeCache]);
			num8 -= (float)num9;
			num7 += (float)(num9 * 2);
			float num10 = 0.2f;
			num10 -= 0.3f * (float)num9;
			if (flag)
			{
				num10 = 0f;
				num8 -= 6f;
				num7 -= num5 * addedRotation;
			}
			if (num11 == 75)
			{
				npcColor..ctor(255, 255, 255, 0);
				num10 *= 0.3f;
				num8 -= 2f;
			}
			npcColor = rCurrentNPC.GetShimmerColor(npcColor);
			Main.spriteBatch.Draw(itemTexture, new Vector2(rCurrentNPC.Center.X - Main.screenPosition.X + num7, rCurrentNPC.Center.Y - Main.screenPosition.Y + rCurrentNPC.gfxOffY + num8), new Rectangle?(rectangle), npcColor, num10, rectangle.Size() / 2f, num2, 0, 0f);
		}

		/// <summary>
		/// Gets the texture and frame of the given item type (<see cref="F:Terraria.Item.type" />).
		/// </summary>
		/// <param name="item">The item type to use.</param>
		/// <param name="itemTexture">The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> in <see cref="F:Terraria.GameContent.TextureAssets.Item" /> of <paramref name="item" />.</param>
		/// <param name="itemFrame">The <see cref="T:Microsoft.Xna.Framework.Rectangle" /> covering this item's current frame on <paramref name="itemTexture" />.</param>
		// Token: 0x06000490 RID: 1168 RVA: 0x000CFCF0 File Offset: 0x000CDEF0
		public static void GetItemDrawFrame(int item, out Texture2D itemTexture, out Rectangle itemFrame)
		{
			Main.instance.LoadItem(item);
			itemTexture = TextureAssets.Item[item].Value;
			if (Main.itemAnimations[item] != null)
			{
				itemFrame = Main.itemAnimations[item].GetFrame(itemTexture, -1);
				return;
			}
			itemFrame = itemTexture.Frame(1, 1, 0, 0, 0, 0);
		}

		// Token: 0x06000491 RID: 1169 RVA: 0x000CFD48 File Offset: 0x000CDF48
		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect, Vector2 screenPosition)
		{
			if (!beforeDraw && n.UsesPartyHat())
			{
				int num = n.frame.Y / n.frame.Height;
				int[] array = NPCID.Sets.TownNPCsFramingGroups[NPCID.Sets.NPCFramingGroup[n.type]];
				if (num >= array.Length)
				{
					num = 0;
				}
				Texture2D value = TextureAssets.Extra[72].Value;
				int num2 = 0;
				switch (n.GetPartyHatColor())
				{
				case PartyHatColor.Pink:
					num2 = 16;
					break;
				case PartyHatColor.Cyan:
					num2 = 17;
					break;
				case PartyHatColor.Purple:
					num2 = 18;
					break;
				case PartyHatColor.White:
					num2 = 19;
					break;
				}
				Rectangle rectangle = value.Frame(20, 1, num2 % 20, 0, 0, 0);
				rectangle.Width -= 2;
				rectangle.Height -= 2;
				int num3 = 0;
				int num4 = 0;
				int num5 = n.spriteDirection;
				if (n.type == 663)
				{
					num3 = 1;
				}
				if (n.type == 637)
				{
					num3 = 6;
					switch (num)
					{
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
						num3 += 2;
						break;
					case 19:
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
						num3 -= 2;
						break;
					}
				}
				if (n.type == 638)
				{
					num3 = 12;
				}
				if (n.type == 656)
				{
					num3 = 6;
					if (num - 1 > 2)
					{
						if (num != 8)
						{
							if (num - 18 <= 7)
							{
								num3 -= 4;
							}
						}
						else
						{
							num3 -= 2;
						}
					}
					else
					{
						num3 -= 2;
					}
				}
				int type;
				if (NPCID.Sets.IsTownSlime[n.type])
				{
					num5 *= -1;
					type = n.type;
					if (type != 670)
					{
						switch (type)
						{
						case 679:
							break;
						default:
							num3 = 1;
							break;
						case 681:
							num3 = -2;
							break;
						case 682:
							num3 = -1;
							num4 = 2;
							break;
						case 683:
							num3 = -1;
							num4 = -2;
							break;
						case 684:
							num3 = -4;
							break;
						}
					}
					else
					{
						num3 = -1;
					}
				}
				if (n.IsShimmerVariant)
				{
					type = n.type;
					if (type > 124)
					{
						if (type <= 178)
						{
							if (type == 160)
							{
								num4 = -2;
								goto IL_2B4;
							}
							if (type != 178)
							{
								goto IL_2B4;
							}
						}
						else
						{
							if (type - 208 <= 1 || type == 227)
							{
								goto IL_2B0;
							}
							if (type != 228)
							{
								goto IL_2B4;
							}
						}
						num3 = -4;
						num4 = -4;
						goto IL_2B4;
					}
					if (type <= 54)
					{
						if (type == 38)
						{
							num3 += 2;
							num4 = -2;
							goto IL_2B4;
						}
						if (type != 54)
						{
							goto IL_2B4;
						}
						num4 = -6;
						goto IL_2B4;
					}
					else
					{
						if (type == 107)
						{
							num3 = 2;
							num4 = -6;
							goto IL_2B4;
						}
						if (type != 108 && type != 124)
						{
							goto IL_2B4;
						}
					}
					IL_2B0:
					num4 = -4;
				}
				IL_2B4:
				Vector2 vector = n.Top + new Vector2((float)(-2 * num5), n.gfxOffY);
				vector.X += (float)(num3 * num5);
				vector.Y += (float)array[num];
				vector.Y += (float)num4;
				vector.Y += (float)NPCID.Sets.HatOffsetY[n.type];
				int num6 = 0;
				if (n.ai[0] == 5f)
				{
					num6 = -4;
					if (n.type == 38)
					{
						num6 = -8;
					}
					if (n.type == 124)
					{
						num6 = -2;
					}
					if (n.type == 550)
					{
						num6 = -4;
					}
					if (n.type == 588)
					{
						num6 = -4;
					}
					if (n.type == 108 || n.type == 178)
					{
						num6 = -6;
					}
					if (n.type == 637)
					{
						num6 = -12;
					}
					if (n.type == 663)
					{
						num6 = -8;
					}
				}
				vector.Y += (float)num6;
				if (n.type == 229 && n.ai[0] == 12f)
				{
					vector.X -= (float)(num5 * 4);
				}
				if (n.type == 550 && n.ai[0] == 5f)
				{
					vector.X += (float)(num5 * 7);
				}
				Vector2 origin = rectangle.Size() - new Vector2((float)(rectangle.Width / 2), 12f);
				int num7 = 0;
				type = n.type;
				if (type <= 209)
				{
					if (type <= 54)
					{
						if (type <= 22)
						{
							if (type - 17 > 3 && type != 22)
							{
								goto IL_596;
							}
							goto IL_588;
						}
						else if (type - 37 > 1 && type != 54)
						{
							goto IL_596;
						}
					}
					else if (type <= 124)
					{
						if (type - 107 > 1)
						{
							if (type != 124)
							{
								goto IL_596;
							}
							goto IL_588;
						}
					}
					else if (type != 160)
					{
						if (type == 178)
						{
							goto IL_593;
						}
						switch (type)
						{
						case 207:
						case 209:
							break;
						case 208:
							goto IL_593;
						default:
							goto IL_596;
						}
					}
					num7 = -3;
					goto IL_596;
				}
				if (type <= 588)
				{
					if (type <= 353)
					{
						switch (type)
						{
						case 227:
							num7 = -4;
							goto IL_596;
						case 228:
							num7 = -2;
							goto IL_596;
						case 229:
							break;
						default:
							if (type != 353)
							{
								goto IL_596;
							}
							break;
						}
					}
					else
					{
						if (type == 369)
						{
							goto IL_593;
						}
						if (type == 550)
						{
							num7 = -4;
							goto IL_596;
						}
						if (type != 588)
						{
							goto IL_596;
						}
						num7 = 0;
						goto IL_596;
					}
				}
				else if (type <= 638)
				{
					if (type != 633 && type - 637 > 1)
					{
						goto IL_596;
					}
				}
				else if (type != 656 && type != 670 && type - 678 > 6)
				{
					goto IL_596;
				}
				IL_588:
				num7 = -1;
				goto IL_596;
				IL_593:
				num7 = 1;
				IL_596:
				vector.X += (float)(num7 * num5);
				vector.X += (float)(4 * num5);
				SpriteEffects spriteEffects = npcSpriteEffect;
				if (NPCID.Sets.IsTownSlime[n.type])
				{
					spriteEffects ^= 1;
				}
				float num8 = 1f;
				if (n.shimmerTransparency > 0f)
				{
					num8 *= 1f - n.shimmerTransparency;
				}
				NPCLoader.PartyHatPosition(n, ref vector, ref spriteEffects);
				Main.spriteBatch.Draw(value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Rectangle?(rectangle), npcColor * n.Opacity * num8, 0f, origin, n.scale, spriteEffects, 0f);
			}
			if (!beforeDraw && n.type == 681)
			{
				Main.spriteBatch.Draw(TextureAssets.Extra[250].Value, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Rectangle?(n.frame), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
			{
				if (n.type == 228 || n.type == 229 || n.type == 209)
				{
					return;
				}
				float num21 = n.ai[2];
				Vector2 vector2 = Main.OffsetsNPCOffhand[2];
				if (n.spriteDirection == 1)
				{
					vector2.X *= -1f;
				}
				Vector2 vector3 = n.Bottom - vector2;
				if (n.type == 22 && n.ai[2] > -0.1f)
				{
					vector3.Y += 4f;
				}
				if (n.type == 368 && Main.hardMode && n.ai[2] > -0.1f)
				{
					vector3.Y += 4f;
				}
				if (n.type == 368 && !Main.hardMode && n.ai[2] < -0.1f)
				{
					vector3.Y -= 8f;
				}
				float rotation = num21 * 1.5707964f * (float)n.spriteDirection;
				float num9 = 1f;
				int itemtype = 0;
				int num10 = 4;
				if (n.type == 19)
				{
					itemtype = (Main.hardMode ? 98 : 95);
					if (Main.hardMode)
					{
						vector3.X -= (float)(10 * n.direction);
						vector3.Y += 4f;
					}
				}
				else if (n.type == 22)
				{
					itemtype = 39;
					num10 = 18;
				}
				else if (n.type == 178)
				{
					itemtype = 434;
				}
				else if (n.type == 227)
				{
					itemtype = 3350;
					num10 = 16;
					num9 = 0.85f;
				}
				else if (n.type == 368)
				{
					itemtype = (Main.hardMode ? 2223 : 2269);
					if (Main.hardMode)
					{
						num10 = 18;
					}
					else
					{
						if (n.ai[2] < -0.1f)
						{
							num10 = 28;
						}
						num9 = 0.75f;
					}
				}
				Vector2 vector11 = Main.DrawPlayerItemPos(1f, itemtype);
				Texture2D itemTexture;
				Rectangle value2;
				Main.GetItemDrawFrame(itemtype, out itemTexture, out value2);
				int num11 = (int)vector11.X - num10;
				NPCLoader.DrawTownAttackGun(n, ref itemTexture, ref value2, ref num9, ref num11);
				Vector2 origin2;
				origin2..ctor((float)(-(float)num11), (float)(value2.Height / 2));
				if (n.spriteDirection == -1)
				{
					origin2..ctor((float)(value2.Width + num11), (float)(value2.Height / 2));
				}
				Main.spriteBatch.Draw(itemTexture, new Vector2((float)((int)(vector3.X - screenPosition.X)), (float)((int)(vector3.Y - screenPosition.Y))), new Rectangle?(value2), npcColor, rotation, origin2, n.scale * num9, npcSpriteEffect ^ 1, 0f);
				if (n.type == 22 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D value3 = TextureAssets.Extra[52].Value;
					if (n.IsShimmerVariant)
					{
						value3 = TextureAssets.Extra[264].Value;
					}
					Rectangle value4 = value3.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / Main.npcFrameCount[n.type]) - 21, 0, 0);
					Main.spriteBatch.Draw(value3, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Rectangle?(value4), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
				else if (n.type == 368 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D value5 = TextureAssets.Extra[53].Value;
					if (n.IsShimmerVariant)
					{
						value5 = TextureAssets.Extra[265].Value;
					}
					Rectangle value6 = value5.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / Main.npcFrameCount[n.type]) - 21, 0, 0);
					Main.spriteBatch.Draw(value5, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Rectangle?(value6), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
			}
			if (NPCID.Sets.AttackType[n.type] == 2 && (n.ai[0] == 14f || (n.ai[0] == 24f && n.frameCounter < 240.0)) && !beforeDraw)
			{
				Texture2D value7 = TextureAssets.Extra[51].Value;
				Vector2 vector4 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
				Rectangle rectangle2 = value7.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12, 0, 0);
				Vector2 origin3 = rectangle2.Size() * new Vector2(0.5f, 1f);
				Main.spriteBatch.Draw(value7, new Vector2((float)((int)(vector4.X - screenPosition.X)), (float)((int)(vector4.Y - screenPosition.Y))), new Rectangle?(rectangle2), n.GetMagicAuraColor(), 0f, origin3, n.scale, npcSpriteEffect ^ 1, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
			{
				int num12 = 32;
				float num13 = 0f;
				Vector2 zero = Vector2.Zero;
				short num14 = 4;
				if (n.type == 207)
				{
					num14 = 3349;
					num13 = 0.15f;
					if (beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 353)
				{
					num14 = 3352;
					num13 = 0.15f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 441)
				{
					num14 = 3351;
					num12 = 28;
					num13 = 0.1f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				Texture2D itemTexture2;
				Rectangle rectangle3;
				Main.GetItemDrawFrame((int)num14, out itemTexture2, out rectangle3);
				NPCLoader.DrawTownAttackSwing(n, ref itemTexture2, ref rectangle3, ref num12, ref num13, ref zero);
				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num12, num12);
				Vector2 vector5 = swingStats.Item1 + (swingStats.Item1 - n.Center) * num13 + zero;
				Vector2 origin4 = rectangle3.Size() * new Vector2(n.spriteDirection != 1, 1f);
				Main.spriteBatch.Draw(itemTexture2, new Vector2((float)((int)(vector5.X - screenPosition.X)), (float)((int)(vector5.Y - screenPosition.Y))), new Rectangle?(rectangle3), n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, npcSpriteEffect ^ 1, 0f);
			}
			if (n.type == 550 && n.ai[0] == 18f)
			{
				if (beforeDraw)
				{
					return;
				}
				Main.instance.LoadItem(353);
				Texture2D value8 = TextureAssets.Item[353].Value;
				int num15 = 32;
				float num16 = 0.15f;
				Vector2 zero2 = Vector2.Zero;
				Rectangle rectangle4 = value8.Frame(1, 3, 0, 1, 0, 0);
				int num17 = (int)n.ai[2];
				if (num17 >= 0 && num17 < 255)
				{
					Player player = Main.player[num17];
					bool flag = player.HeldItem.type == 353 && player.direction == Math.Sign(n.Center.X - player.Center.X);
					float num22 = player.Hitbox.Distance(n.Center);
					float num18 = n.localAI[3];
					if (num22 < 46f && flag)
					{
						n.localAI[3] = 1f;
						if (n.localAI[3] != num18)
						{
							Vector2 vector6 = n.Center + new Vector2((float)(n.spriteDirection * 30), -6f);
							Vector2 vector7;
							vector7..ctor(10f, 10f);
							for (int i = 0; i < 30; i++)
							{
								Dust dust = Dust.NewDustDirect(vector6 - vector7 / 2f, (int)vector7.X, (int)vector7.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.7f);
								dust.noGravity = true;
								dust.velocity *= 1f;
								Dust.NewDustDirect(vector6 - vector7 / 2f, (int)vector7.X, (int)vector7.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.6f).velocity *= 2f;
							}
						}
					}
					else if (n.localAI[3] == 1f)
					{
						n.localAI[3] = 2f;
					}
				}
				Tuple<Vector2, float> swingStats2 = n.GetSwingStats(40, 12, n.spriteDirection, num15, num15);
				Vector2 vector8 = swingStats2.Item1 + (swingStats2.Item1 - n.Center) * num16 + zero2;
				Vector2 origin5 = rectangle4.Size() * new Vector2(n.spriteDirection != 1, 1f);
				Main.spriteBatch.Draw(value8, new Vector2((float)((int)(vector8.X - screenPosition.X)), (float)((int)(vector8.Y - screenPosition.Y))), new Rectangle?(rectangle4), n.GetAlpha(npcColor), swingStats2.Item2, origin5, n.scale, npcSpriteEffect ^ 1, 0f);
			}
			if (beforeDraw || n.ai[0] != 23f)
			{
				return;
			}
			int num19 = (int)n.ai[2];
			if (num19 <= 0 || num19 > (int)ItemID.Count)
			{
				return;
			}
			Texture2D itemTexture3;
			Rectangle rectangle5;
			Main.GetItemDrawFrame(num19, out itemTexture3, out rectangle5);
			int num20 = ((int)n.frameCounter < 6) ? 1 : 2;
			if (n.ai[1] < 6f)
			{
				num20 = 1;
			}
			if (num20 == 0)
			{
				return;
			}
			Vector2 vector9 = Vector2.Zero;
			if (num20 == 1)
			{
				vector9..ctor(10f, 6f);
			}
			if (num20 == 2)
			{
				vector9..ctor(16f, 0f);
			}
			if (!npcSpriteEffect.HasFlag(1))
			{
				vector9.X *= -1f;
			}
			if (n.type == 369)
			{
				vector9.X *= 0.5f;
				vector9.Y += 4f;
			}
			if (n.type == 453)
			{
				vector9.Y += 8f;
			}
			if (n.type == 550)
			{
				if (num19 == 353)
				{
					rectangle5 = itemTexture3.Frame(1, 3, 0, 1, 0, 0);
				}
				vector9.Y += 6f;
			}
			Vector2 vector10 = n.Center + vector9;
			Vector2 origin6 = rectangle5.Size() * new Vector2(n.spriteDirection != 1, 1f);
			Vector2 position;
			position..ctor((float)((int)(vector10.X - screenPosition.X)), (float)((int)(vector10.Y - screenPosition.Y)));
			Color alpha = n.GetAlpha(npcColor);
			Main.spriteBatch.Draw(itemTexture3, position, new Rectangle?(rectangle5), alpha, 0f, origin6, n.scale, npcSpriteEffect ^ 1, 0f);
		}

		// Token: 0x06000492 RID: 1170 RVA: 0x000D129C File Offset: 0x000CF49C
		private void DrawProj_LightsBane(Projectile proj)
		{
			Main.spriteBatch.End();
			if (Main._multiplyBlendState == null)
			{
				BlendState alphaBlend = BlendState.AlphaBlend;
				BlendState additive = BlendState.Additive;
				Main._multiplyBlendState = new BlendState
				{
					ColorBlendFunction = 2,
					ColorDestinationBlend = 0,
					ColorSourceBlend = 4,
					AlphaBlendFunction = 2,
					AlphaDestinationBlend = 0,
					AlphaSourceBlend = 4
				};
			}
			BlendState multiplyBlendState = Main._multiplyBlendState;
			Main.spriteBatch.Begin(0, multiplyBlendState, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			Vector2 position = proj.Center - Main.screenPosition;
			this.LoadProjectile(proj.type);
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 13, 0, proj.frame, 0, 0);
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = new Vector2(0.7f, 0.7f) * proj.scale;
			float num = Utils.Remap((float)proj.frame, 0f, 3f, 0f, 1f, true) * Utils.Remap((float)proj.frame, 4f, 12f, 1f, 0f, true);
			Rectangle value = asset.Frame(1, 13, 0, 12, 0, 0);
			Vector2 origin = vector + new Vector2(0f, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(value), Color.White * 0.3f * num, proj.rotation, origin, new Vector2(1f, 6f) * vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(value), Color.White * 0.3f * num, proj.rotation, origin, new Vector2(2f, 2f) * vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.White, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.White, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.White, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.White, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.Additive, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.Magenta, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.Magenta, proj.rotation, vector, vector2, 0, 0f);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
		}

		// Token: 0x06000493 RID: 1171 RVA: 0x000D1604 File Offset: 0x000CF804
		private void DrawProj_NightsEdge(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = proj.localAI[0] / proj.ai[1];
			float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f, true) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f, true);
			float num4 = 0.975f;
			float fromValue = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f, true);
			Color color;
			color..ctor(40, 20, 60);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * fromValue * num3, proj.rotation + proj.ai[0] * 0.7853982f * -1f * (1f - num2), origin, num * num4, effects, 0f);
			Color color2;
			color2..ctor(80, 40, 180);
			Color color3 = Color.White * num3 * 0.5f;
			color3.A = (byte)((float)color3.A * (1f - fromValue));
			Color color4 = color3 * fromValue * 0.5f;
			color4.G = (byte)((float)color4.G * fromValue);
			color4.R = (byte)((float)color4.R * (0.25f + fromValue * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color4 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), new Color(80, 30, 160) * fromValue * num3 * 0.3f, proj.rotation, origin, num * 0.8f, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * fromValue * num3 * 0.7f, proj.rotation, origin, num * num4, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.3f * num3 * (1f - fromValue * 0.7f), proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Vector2 drawpos = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, 1.5707964f, true) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * num3 * 0.5f, color2, num2, 0f, 0.5f, 0.5f, 1f, 0.7853982f, new Vector2(2f, 2f), Vector2.One);
		}

		// Token: 0x06000494 RID: 1172 RVA: 0x000D1A04 File Offset: 0x000CFC04
		private void DrawProj_Excalibur(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = proj.localAI[0] / proj.ai[1];
			float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f, true) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f, true);
			float num4 = 0.975f;
			float fromValue = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f, true);
			Color color;
			color..ctor(180, 160, 60);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * fromValue * num3, proj.rotation + proj.ai[0] * 0.7853982f * -1f * (1f - num2), origin, num, effects, 0f);
			Color color2;
			color2..ctor(255, 240, 150);
			Color color3;
			color3..ctor(255, 255, 80);
			Color color4 = Color.White * num3 * 0.5f;
			color4.A = (byte)((float)color4.A * (1f - fromValue));
			Color color5 = color4 * fromValue * 0.5f;
			color5.G = (byte)((float)color5.G * fromValue);
			color5.B = (byte)((float)color5.R * (0.25f + fromValue * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
			for (float num5 = 0f; num5 < 8f; num5 += 1f)
			{
				float num6 = proj.rotation + proj.ai[0] * num5 * -6.2831855f * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0];
				Vector2 drawpos = vector + num6.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
				float num7 = num5 / 9f;
				Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * num3 * num7, color3, num2, 0f, 0.5f, 0.5f, 1f, num6, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f, true)) * num, Vector2.One * num);
			}
			Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f, true)) * num, Vector2.One * num);
		}

		// Token: 0x06000495 RID: 1173 RVA: 0x000D2000 File Offset: 0x000D0200
		private void DrawProj_TheHorsemansBlade(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = proj.localAI[0] / proj.ai[1];
			float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f, true) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f, true);
			float num4 = 0.975f;
			float fromValue = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f, true);
			Color color;
			color..ctor(193, 43, 43);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * fromValue * num3, proj.rotation + proj.ai[0] * 0.7853982f * -1f * (1f - num2), origin, num, effects, 0f);
			Color color2;
			color2..ctor(247, 115, 0);
			Color color3;
			color3..ctor(255, 202, 130);
			Color color4 = Color.White * num3 * 0.5f;
			color4.A = (byte)((float)color4.A * (1f - fromValue));
			Color color5 = color4 * fromValue * 0.5f;
			color5.G = (byte)((float)color5.G * fromValue);
			color5.B = (byte)((float)color5.R * (0.25f + fromValue * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
			for (float num5 = 0f; num5 < 8f; num5 += 1f)
			{
				float num6 = proj.rotation + proj.ai[0] * num5 * -6.2831855f * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0];
				Vector2 drawpos = vector + num6.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
				float num7 = num5 / 9f;
				Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * num3 * num7, color3, num2, 0f, 0.5f, 0.5f, 1f, num6, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f, true)) * num, Vector2.One * num);
			}
			Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0.7853982f, new Vector2(Utils.Remap(num2, 0f, 1f, 4f, 1f, true)) * num, Vector2.One * num);
		}

		// Token: 0x06000496 RID: 1174 RVA: 0x000D25F0 File Offset: 0x000D07F0
		private void DrawProj_TrueExcalibur(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = proj.localAI[0] / proj.ai[1];
			float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f, true) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f, true);
			float num4 = 0.975f;
			float amount = num3;
			float fromValue = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f, true);
			Color color = Color.Lerp(new Color(180, 50, 90), new Color(180, 30, 60), amount);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * fromValue * num3, proj.rotation + proj.ai[0] * 0.7853982f * -1f * (1f - num2), origin, num, effects, 0f);
			Color color2 = Color.Lerp(new Color(255, 240, 150), new Color(255, 60, 170), amount);
			Color color3 = Color.Lerp(new Color(255, 255, 80), new Color(255, 60, 190), amount);
			Color color4 = Color.White * num3 * 0.5f;
			color4.A = (byte)((float)color4.A * (1f - fromValue));
			Color color5 = color4 * fromValue * 0.5f;
			color5.G = (byte)((float)color5.G * fromValue);
			color5.B = (byte)((float)color5.R * (0.25f + fromValue * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
			float num5 = num * 0.75f;
			for (float num6 = 0f; num6 < 12f; num6 += 1f)
			{
				float num7 = proj.rotation + proj.ai[0] * num6 * -6.2831855f * 0.025f + Utils.Remap(num2, 0f, 0.6f, 0f, 0.95504415f, true) * proj.ai[0];
				Vector2 drawpos = vector + num7.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
				float num8 = num6 / 12f;
				Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * num3 * num8, color3, num2, 0f, 0.5f, 0.5f, 1f, num7, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f, true)) * num5, Vector2.One * num5);
			}
			Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 0.6f, 0f, 0.95504415f, true) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f, true)) * num5, Vector2.One * num5);
		}

		// Token: 0x06000497 RID: 1175 RVA: 0x000D2C3C File Offset: 0x000D0E3C
		private void DrawProj_TrueNightsEdge(Projectile proj)
		{
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = 0.975f;
			float fromValue = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f, true);
			float num3 = MathHelper.Min(0.15f + fromValue * 0.85f, Utils.Remap(proj.localAI[0], 30f, 96f, 1f, 0f, true));
			proj.Size / 2f;
			float num4 = 2f;
			for (float num5 = num4; num5 >= 0f; num5 -= 1f)
			{
				if (!(proj.oldPos[(int)num5] == Vector2.Zero))
				{
					Vector2 vector = proj.Center - proj.velocity * 0.5f * num5;
					float num6 = proj.oldRot[(int)num5] + proj.ai[0] * 6.2831855f * 0.1f * (0f - num5);
					Vector2 position = vector - Main.screenPosition;
					float num7 = 1f - num5 / num4;
					float num8 = proj.Opacity * num7 * num7 * 0.85f;
					float amount = proj.Opacity * proj.Opacity;
					Color color = Color.Lerp(new Color(40, 20, 60, 120), new Color(80, 160, 50, 120), amount);
					Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), color * num3 * num8, num6 + proj.ai[0] * 0.7853982f * -1f, origin, num * num2, effects, 0f);
					Color color2 = Color.Lerp(new Color(80, 40, 180), new Color(155, 255, 100), amount);
					Color color3 = Color.White * num8 * 0.5f;
					color3.A = (byte)((float)color3.A * (1f - num3));
					Color color4 = color3 * num3 * 0.5f;
					color4.G = (byte)((float)color4.G * num3);
					color4.R = (byte)((float)color4.R * (0.25f + num3 * 0.75f));
					float num9 = 3f;
					for (float num10 = -6.2831855f + 6.2831855f / num9; num10 < 0f; num10 += 6.2831855f / num9)
					{
						float num11 = Utils.Remap(num10, -6.2831855f, 0f, 0f, 0.5f, true);
						Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), color4 * 0.15f * num11, num6 + proj.ai[0] * 0.01f + num10, origin, num, effects, 0f);
						Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.Lerp(new Color(80, 30, 160), new Color(200, 255, 0), amount) * fromValue * num8 * num11, num6 + num10, origin, num * 0.8f, effects, 0f);
						Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), color2 * fromValue * num8 * MathHelper.Lerp(0.05f, 0.4f, fromValue) * num11, num6 + num10, origin, num * num2, effects, 0f);
						Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * MathHelper.Lerp(0.05f, 0.5f, fromValue) * num8 * num11, num6 + num10, origin, num, effects, 0f);
					}
					Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), color4 * 0.15f, num6 + proj.ai[0] * 0.01f, origin, num, effects, 0f);
					Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), Color.Lerp(new Color(80, 30, 160), new Color(200, 255, 0), amount) * num3 * num8, num6, origin, num * 0.8f, effects, 0f);
					Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(rectangle), color2 * fromValue * num8 * MathHelper.Lerp(0.05f, 0.4f, num3), num6, origin, num * num2, effects, 0f);
					Main.spriteBatch.Draw(asset.Value, position, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * MathHelper.Lerp(0.05f, 0.5f, num3) * num8, num6, origin, num, effects, 0f);
				}
			}
			float num12 = 1f - proj.localAI[0] * 1f / 80f;
			if (num12 < 0.5f)
			{
				num12 = 0.5f;
			}
			Vector2 drawpos = proj.Center - Main.screenPosition + (proj.rotation + 0.47123894f * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num * num12;
			float num13 = MathHelper.Min(num3, MathHelper.Lerp(1f, fromValue, Utils.Remap(proj.localAI[0], 0f, 80f, 0f, 1f, true)));
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * proj.Opacity * 0.5f * num13, new Color(150, 255, 100) * num13, proj.Opacity, 0f, 1f, 1f, 2f, 0.7853982f, new Vector2(2f, 2f), Vector2.One);
		}

		// Token: 0x06000498 RID: 1176 RVA: 0x000D3340 File Offset: 0x000D1540
		private void DrawProj_TerraBlade2(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float num = proj.scale * 1.1f;
			SpriteEffects effects = (proj.ai[0] < 0f) ? 2 : 0;
			float num2 = proj.localAI[0] / proj.ai[1];
			float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f, true) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f, true);
			float num4 = 0.975f;
			float num5 = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			num5 = 0.5f + num5 * 0.5f;
			num5 = Utils.Remap(num5, 0.2f, 1f, 0f, 1f, true);
			Color color;
			color..ctor(45, 124, 205);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * num5 * num3, proj.rotation + proj.ai[0] * 0.7853982f * -1f * (1f - num2), origin, num * 0.95f, effects, 0f);
			Color color2;
			color2..ctor(181, 230, 29);
			Color color3;
			color3..ctor(34, 177, 76);
			Color color4 = Color.White * num3 * 0.5f;
			color4.A = (byte)((float)color4.A * (1f - num5));
			Color color5 = color4 * num5 * 0.5f;
			color5.G = (byte)((float)color5.G * num5);
			color5.B = (byte)((float)color5.R * (0.25f + num5 * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * num5 * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * num5 * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
			for (float num6 = 0f; num6 < 12f; num6 += 1f)
			{
				float num7 = proj.rotation + proj.ai[0] * (num6 - 2f) * -6.2831855f * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0];
				Vector2 drawpos = vector + num7.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
				float num8 = num6 / 12f;
				Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * num3 * num8, color3, num2, 0f, 0.5f, 0.5f, 1f, num7, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f, true)) * num, Vector2.One * num);
			}
			Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, 0.7853982f, true) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f, true)) * num, Vector2.One * num * 1.5f);
		}

		// Token: 0x06000499 RID: 1177 RVA: 0x000D3958 File Offset: 0x000D1B58
		private void DrawProj_TerraBlade2Shot(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Rectangle rectangle = asset.Frame(1, 4, 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			float scale = proj.scale;
			SpriteEffects spriteEffects = (proj.ai[0] < 0f) ? 2 : 0;
			SpriteEffects effects = spriteEffects ^ 2;
			float num = Utils.Remap(proj.localAI[0], 0f, proj.ai[1] + 30f, 0f, 1f, true);
			float opacity = proj.Opacity;
			float num2 = 0.975f;
			float num3 = Lighting.GetColor(proj.Center.ToTileCoordinates()).ToVector3().Length() / (float)Math.Sqrt(3.0);
			num3 = 0.5f + num3 * 0.5f;
			num3 = Utils.Remap(num3, 0.2f, 1f, 0f, 1f, true);
			Color color;
			color..ctor(45, 124, 205);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * num3 * opacity, proj.rotation + proj.ai[0] * 0.7853982f * 0.5f * -1f * (1f - num), origin, scale * 0.95f, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color * num3 * opacity, proj.rotation + proj.ai[0] * 0.7853982f * 0.5f * 1f * (1f - num), origin, scale * 0.95f, effects, 0f);
			Color color2;
			color2..ctor(181, 230, 29);
			Color color3;
			color3..ctor(34, 177, 76);
			Color color4 = Color.White * opacity * 0.5f;
			color4.A = (byte)((float)color4.A * (1f - num3));
			Color color5 = color4 * num3 * 0.5f;
			color5.G = (byte)((float)color5.G * num3);
			color5.B = (byte)((float)color5.R * (0.25f + num3 * 0.75f));
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, scale, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color5 * 0.15f, proj.rotation + proj.ai[0] * -0.01f, origin, scale, effects, 0f);
			float num4 = 1f - num;
			float num5 = 0.25f;
			float num6 = 0.15f;
			float num7 = 0.05f;
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * num3 * opacity * 0.3f, proj.rotation + proj.ai[0] * num5 * num4, origin, scale, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color3 * num3 * opacity * 0.3f, proj.rotation + (0f - proj.ai[0]) * num5 * num4, origin, scale, effects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(rectangle), color2 * num3 * opacity * 0.5f, proj.rotation + proj.ai[0] * num6 * num4, origin, scale * num2, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.6f * opacity, proj.rotation + proj.ai[0] * num7 * num4, origin, scale, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.5f * opacity, proj.rotation + proj.ai[0] * -0.05f, origin, scale * 0.8f, spriteEffects, 0f);
			Main.spriteBatch.Draw(asset.Value, vector, new Rectangle?(asset.Frame(1, 4, 0, 3, 0, 0)), Color.White * 0.4f * opacity, proj.rotation + proj.ai[0] * -0.1f, origin, scale * 0.6f, spriteEffects, 0f);
			for (float num8 = -9f; num8 < 9f; num8 += 1f)
			{
				float num9 = proj.rotation + proj.ai[0] * num8 * -6.2831855f * 0.025f;
				Vector2 drawpos = vector + num9.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * scale;
				float num10 = Math.Abs(num8) / 9f;
				Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos, new Color(255, 255, 255, 0) * opacity * num10, color3, num, 0f, 0.5f, 0.5f, 1f, num9, new Vector2(0f, Utils.Remap(num, 0f, 1f, 3f, 0f, true)) * scale, Vector2.One * scale);
			}
			for (float num11 = -1f; num11 <= 1f; num11 += 0.5f)
			{
				if (num11 != 0f)
				{
					Vector2 drawpos2 = vector + (proj.rotation + num11 * 3.1415927f * 0.75f * num).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * scale;
					float num12 = Utils.Remap(Math.Abs(num11), 0f, 1f, 1f, 0.5f, true);
					Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 0.75f, 0.7853982f, new Vector2(Utils.Remap(num, 0f, 1f, 4f, 1f, true)) * scale * num12, Vector2.One * scale * num12);
					Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos2, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 0.75f, 0f, new Vector2(2f, Utils.Remap(num, 0f, 1f, 4f, 1f, true)) * scale * num12, Vector2.One * scale * num12);
				}
			}
			Vector2 drawpos3 = vector + proj.rotation.ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * scale;
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos3, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 1f, 0.7853982f, new Vector2(Utils.Remap(num, 0f, 1f, 4f, 1f, true)) * scale, Vector2.One * scale * 1.5f);
			Main.DrawPrettyStarSparkle(proj.Opacity, 0, drawpos3, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num, 0f, 1f, 4f, 1f, true)) * scale, Vector2.One * scale * 1.5f);
		}

		// Token: 0x0600049A RID: 1178 RVA: 0x000D4294 File Offset: 0x000D2494
		public void DrawProj(int i)
		{
			int num = ProjectileID.Sets.DrawScreenCheckFluff[Main.projectile[i].type];
			if (new Rectangle((int)Main.Camera.ScaledPosition.X - num, (int)Main.Camera.ScaledPosition.Y - num, (int)Main.Camera.ScaledSize.X + num * 2, (int)Main.Camera.ScaledSize.Y + num * 2).Intersects(Main.projectile[i].Hitbox))
			{
				Projectile proj = Main.projectile[i];
				this.DrawProjDirect(proj);
			}
		}

		// Token: 0x0600049B RID: 1179 RVA: 0x000D432C File Offset: 0x000D252C
		private void DrawContinuousTrail(Projectile proj)
		{
			Color color;
			color..ctor(255, 255, 255, 255);
			bool flag = Main.player[proj.owner].cPet == 0;
			Main.DrawTrail(proj, new Vector2(10f, 2f), flag ? new Color(177, 255, 32, 127) : color);
			Main.DrawTrail(proj, new Vector2(-10f, 2f), flag ? new Color(177, 255, 32, 127) : color);
		}

		// Token: 0x0600049C RID: 1180 RVA: 0x000D43C8 File Offset: 0x000D25C8
		private static void DrawTrail(Projectile proj, Vector2 rotatableOffsetFromCenter, Color baseColor)
		{
			Vector2 vector = proj.Size / 2f;
			Texture2D value = TextureAssets.MagicPixel.Value;
			Rectangle value2;
			value2..ctor(0, 0, 1, 1);
			Vector2[] oldPos = proj.oldPos;
			float[] oldRot = proj.oldRot;
			int num = oldPos.Length;
			for (int num2 = num - 1; num2 > 0; num2--)
			{
				if (!(oldPos[num2] == Vector2.Zero))
				{
					Vector2 vector2 = oldPos[num2] + vector + rotatableOffsetFromCenter.RotatedBy((double)oldRot[num2], default(Vector2));
					Vector2 v = oldPos[num2 - 1] + vector + rotatableOffsetFromCenter.RotatedBy((double)oldRot[num2 - 1], default(Vector2)) - vector2;
					float y = v.Length();
					float num3 = v.ToRotation();
					float num4 = Utils.Remap((float)num2, 0f, (float)num, 1f, 0f, true);
					Main.EntitySpriteDraw(value, vector2 - Main.screenPosition, new Rectangle?(value2), baseColor * num4, num3 + 1.5707964f, new Vector2((float)value2.Width / 2f, (float)value2.Height), new Vector2(4f, y), 0, 0f);
				}
			}
		}

		// Token: 0x0600049D RID: 1181 RVA: 0x000D4523 File Offset: 0x000D2723
		public void DrawProjDirect(Projectile proj)
		{
			this.PrepareDrawnProjectileDrawing(proj);
			this.DrawProj_Inner(proj);
		}

		// Token: 0x0600049E RID: 1182 RVA: 0x000D4534 File Offset: 0x000D2734
		private void DrawProj_DrawVoidLens(Projectile proj, ref bool earlyReturn)
		{
			if (proj.type == 734)
			{
				VoidLensHelper voidLensHelper = new VoidLensHelper(proj);
				this._voidLensData.Clear();
				int selectionMode = Main.TryInteractingWithVoidLens(proj);
				voidLensHelper.DrawToDrawData(this._voidLensData, selectionMode);
				foreach (DrawData data in this._voidLensData)
				{
					Main.EntitySpriteDraw(data);
				}
				return;
			}
			earlyReturn = false;
		}

		// Token: 0x0600049F RID: 1183 RVA: 0x000D45C0 File Offset: 0x000D27C0
		private void DrawProj_Inner(Projectile proj)
		{
			float polePosX = 0f;
			float polePosY = 0f;
			this.LoadProjectile(proj.type);
			Vector2 mountedCenter = Main.player[proj.owner].MountedCenter;
			if (Main.player[proj.owner].mount.Active && Main.player[proj.owner].mount.Type == 52)
			{
				mountedCenter += new Vector2((float)(Main.player[proj.owner].direction * 14), -10f);
			}
			if (ProjectileLoader.PreDrawExtras(proj))
			{
				this.DrawProj_DrawYoyoString(proj, mountedCenter);
				this.DrawProj_DrawExtras(proj, mountedCenter, ref polePosX, ref polePosY);
			}
			this.DrawProj_Inner_DoDrawProj(proj, mountedCenter, polePosX, polePosY);
		}

		// Token: 0x060004A0 RID: 1184 RVA: 0x000D4678 File Offset: 0x000D2878
		private void DrawProj_DrawYoyoString(Projectile proj, Vector2 mountedCenter)
		{
			if (proj.aiStyle == 99)
			{
				Vector2 vector = mountedCenter;
				vector.Y += Main.player[proj.owner].gfxOffY;
				float num = proj.Center.X - vector.X;
				float num2 = proj.Center.Y - vector.Y;
				Math.Sqrt((double)(num * num + num2 * num2));
				float num3 = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
				if (!proj.counterweight)
				{
					int num4 = -1;
					if (proj.position.X + (float)(proj.width / 2) < Main.player[proj.owner].position.X + (float)(Main.player[proj.owner].width / 2))
					{
						num4 = 1;
					}
					num4 *= -1;
					Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(num2 * (float)num4), (double)(num * (float)num4));
				}
				bool flag = true;
				bool flag2 = true;
				if (num == 0f && num2 == 0f)
				{
					flag = false;
				}
				else
				{
					float num5 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					num5 = 12f / num5;
					num *= num5;
					num2 *= num5;
					vector.X -= num * 0.1f;
					vector.Y -= num2 * 0.1f;
					num = proj.position.X + (float)proj.width * 0.5f - vector.X;
					num2 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
				}
				while (flag)
				{
					float num6 = 12f;
					float num7 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					float num8 = num7;
					if (float.IsNaN(num7) || float.IsNaN(num8))
					{
						flag = false;
					}
					else
					{
						if (num7 < 20f)
						{
							num6 = num7 - 8f;
							flag = false;
						}
						num7 = 12f / num7;
						num *= num7;
						num2 *= num7;
						if (flag2)
						{
							flag2 = false;
						}
						else
						{
							vector.X += num;
							vector.Y += num2;
						}
						num = proj.position.X + (float)proj.width * 0.5f - vector.X;
						num2 = proj.position.Y + (float)proj.height * 0.1f - vector.Y;
						if (num8 > 12f)
						{
							float num9 = 0.3f;
							float num10 = Math.Abs(proj.velocity.X) + Math.Abs(proj.velocity.Y);
							if (num10 > 16f)
							{
								num10 = 16f;
							}
							num10 = 1f - num10 / 16f;
							num9 *= num10;
							num10 = num8 / 80f;
							if (num10 > 1f)
							{
								num10 = 1f;
							}
							num9 *= num10;
							if (num9 < 0f)
							{
								num9 = 0f;
							}
							num9 *= num10;
							num9 *= 0.5f;
							if (num2 > 0f)
							{
								num2 *= 1f + num9;
								num *= 1f - num9;
							}
							else
							{
								num10 = Math.Abs(proj.velocity.X) / 3f;
								if (num10 > 1f)
								{
									num10 = 1f;
								}
								num10 -= 0.5f;
								num9 *= num10;
								if (num9 > 0f)
								{
									num9 *= 2f;
								}
								num2 *= 1f + num9;
								num *= 1f - num9;
							}
						}
						num3 = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
						Color white = Color.White;
						white.A = (byte)((float)white.A * 0.4f);
						white = Main.TryApplyingPlayerStringColor(Main.player[proj.owner].stringColor, white);
						float num11 = 0.5f;
						white = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), white);
						Color color;
						color..ctor((int)((byte)((float)white.R * num11)), (int)((byte)((float)white.G * num11)), (int)((byte)((float)white.B * num11)), (int)((byte)((float)white.A * num11)));
						Main.EntitySpriteDraw(TextureAssets.FishingLine.Value, new Vector2(vector.X - Main.screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, vector.Y - Main.screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f) - new Vector2(6f, 0f), new Rectangle?(new Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num6)), color, num3, new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), 1f, 0, 0f);
					}
				}
			}
		}

		// Token: 0x060004A1 RID: 1185 RVA: 0x000D4B5C File Offset: 0x000D2D5C
		private void DrawProj_DrawSpecialProjs(Projectile proj, ref bool earlyReturn)
		{
			if (proj.aiStyle == 160)
			{
				this.DrawKite(proj);
				return;
			}
			if (proj.aiStyle == 165)
			{
				this.DrawWhip(proj);
				return;
			}
			if (proj.type == 879 || proj.type == 877 || proj.type == 878)
			{
				proj.position.Y = proj.position.Y - Main.player[proj.owner].gfxOffY;
			}
			if (proj.aiStyle == 174)
			{
				this.DrawMultisegmentPet(proj);
				return;
			}
			if (proj.type == 1020)
			{
				this.DrawContinuousTrail(proj);
			}
			bool flag3 = true;
			int type = proj.type;
			if (type <= 974)
			{
				if (type == 919)
				{
					this.DrawProj_FairyQueenLance(proj);
					goto IL_18C;
				}
				if (type == 932)
				{
					this.DrawProj_FairyQueenRangedItemShot(proj);
					goto IL_18C;
				}
				switch (type)
				{
				case 972:
					this.DrawProj_NightsEdge(proj);
					goto IL_18C;
				case 973:
					this.DrawProj_TrueNightsEdge(proj);
					goto IL_18C;
				case 974:
					this.DrawProj_LightsBane(proj);
					goto IL_18C;
				}
			}
			else
			{
				switch (type)
				{
				case 982:
					this.DrawProj_Excalibur(proj);
					goto IL_18C;
				case 983:
					this.DrawProj_TrueExcalibur(proj);
					goto IL_18C;
				case 984:
					this.DrawProj_TerraBlade2(proj);
					goto IL_18C;
				case 985:
					this.DrawProj_TerraBlade2Shot(proj);
					goto IL_18C;
				default:
					if (type == 995)
					{
						Main._stardewAnimation.Draw(Main.spriteBatch, (int)proj.ai[0], proj.Center - Main.screenPosition);
						flag3 = false;
						goto IL_18C;
					}
					if (type == 997)
					{
						this.DrawProj_TheHorsemansBlade(proj);
						goto IL_18C;
					}
					break;
				}
			}
			flag3 = false;
			IL_18C:
			if (flag3)
			{
				return;
			}
			if (proj.type == 34)
			{
				default(FlameLashDrawer).Draw(proj);
			}
			if (proj.type == 16)
			{
				default(MagicMissileDrawer).Draw(proj);
			}
			if (proj.type == 106)
			{
				default(LightDiscDrawer).Draw(proj);
			}
			if (proj.type == 933)
			{
				default(FinalFractalHelper).Draw(proj);
			}
			if (proj.type == 79)
			{
				default(RainbowRodDrawer).Draw(proj);
			}
			if (proj.type == 946)
			{
				EmpressBladeDrawer empressBladeDrawer = default(EmpressBladeDrawer);
				float num12 = Main.GlobalTimeWrappedHourly % 3f / 3f;
				Player player = Main.player[proj.owner];
				float num13 = MathHelper.Max(1f, (float)player.maxMinions);
				float num14 = (float)proj.identity % num13 / num13 + num12;
				Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0f, 0f, new float?(num14 % 1f));
				Color fairyQueenWeaponsColor2 = proj.GetFairyQueenWeaponsColor(0f, 0f, new float?((num14 + 0.5f) % 1f));
				empressBladeDrawer.ColorStart = fairyQueenWeaponsColor;
				empressBladeDrawer.ColorEnd = fairyQueenWeaponsColor2;
				empressBladeDrawer.Draw(proj);
				this.DrawProj_EmpressBlade(proj, num14);
				return;
			}
			if (proj.type == 927)
			{
				this.DrawProj_PiercingStarlight(proj);
				return;
			}
			if (proj.type == 917)
			{
				this.DrawProj_CoolWhipMinion(proj);
				return;
			}
			if (proj.type == 923)
			{
				Vector2 position = proj.Center - Main.screenPosition;
				Texture2D value = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle = value.Frame(1, 2, 0, 0, 0, 0);
				Rectangle value2 = value.Frame(1, 2, 0, 1, 0, 0);
				Vector2 origin = rectangle.Size() * new Vector2(0.03f, 0.5f);
				float num15 = 180f;
				float num23 = proj.ai[0] / 6.2831855f + proj.localAI[0] / num15;
				float num16 = Utils.GetLerpValue(0f, 30f, proj.localAI[0], true) * Utils.GetLerpValue(num15, num15 - 30f, proj.localAI[0], true);
				Color color2 = Main.hslToRgb(num23 % 1f, 1f, 1f, byte.MaxValue) * num16;
				float lerpValue = Utils.GetLerpValue(40f, 60f, proj.localAI[0], true);
				Vector2 vector2 = new Vector2(1f, MathHelper.Lerp(0.25f, 0.7f, lerpValue)) * proj.scale;
				Color value3 = Main.hslToRgb((num23 + 0.3f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.66f, lerpValue), byte.MaxValue) * num16;
				if (NPC.ShouldEmpressBeEnraged())
				{
					value3 = Main.OurFavoriteColor * num16;
				}
				value3 = Color.Lerp(value3, Color.White, 0.1f);
				value3.A /= 2;
				Main.spriteBatch.Draw(value, position, new Rectangle?(value2), value3, proj.rotation, origin, vector2 * 1.2f, 0, 0f);
				Color value4 = Main.hslToRgb((num23 + 0.15f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.5f, lerpValue), byte.MaxValue) * num16;
				if (NPC.ShouldEmpressBeEnraged())
				{
					value4 = Main.OurFavoriteColor * num16;
				}
				value4 = Color.Lerp(value4, Color.White, 0.1f);
				value4.A /= 2;
				Main.spriteBatch.Draw(value, position, new Rectangle?(value2), value4, proj.rotation, origin, vector2 * 1.1f, 0, 0f);
				Main.spriteBatch.Draw(value, position, new Rectangle?(rectangle), color2 * 0.5f, proj.rotation, origin, vector2, 0, 0f);
				Main.spriteBatch.Draw(value, position, new Rectangle?(value2), color2 * lerpValue, proj.rotation, origin, vector2, 0, 0f);
				return;
			}
			if (proj.type == 950)
			{
				Vector2 position2 = proj.Center - Main.screenPosition;
				Texture2D value5 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle2 = value5.Frame(1, 1, 0, 0, 0, 0);
				Vector2 origin2 = rectangle2.Size() * new Vector2(0.5f, 0.5f);
				Color color3 = new Color(255, 255, 255, 0) * proj.Opacity;
				float hue = (proj.ai[2] == 1f) ? 0.96f : 0.92f;
				if (proj.ai[2] == 1f)
				{
					color3 = new Color(255, 0, 30, 180) * proj.Opacity;
				}
				Color color4 = Main.hslToRgb(hue, 1f, 0.5f, byte.MaxValue) * proj.Opacity;
				color4.A = 0;
				color3 *= 0.6f;
				color4 *= 0.6f;
				float scale = proj.scale;
				float num17 = proj.localAI[0];
				Main.spriteBatch.Draw(value5, position2, new Rectangle?(rectangle2), color3, proj.rotation, origin2, num17, 0, 0f);
				Main.spriteBatch.Draw(value5, position2, new Rectangle?(rectangle2), color4, proj.rotation, origin2, num17 * 0.95f, 0, 0f);
				Main.spriteBatch.Draw(value5, position2, new Rectangle?(rectangle2), color3, proj.rotation, origin2, scale, 0, 0f);
				Main.spriteBatch.Draw(value5, position2, new Rectangle?(rectangle2), color4, proj.rotation, origin2, scale * 0.95f, 0, 0f);
				return;
			}
			if (proj.type == 888)
			{
				this.DrawTwinsPet(proj);
				return;
			}
			if (proj.type == 874)
			{
				this.DrawMurderAurora(proj);
				return;
			}
			if (proj.type == 871)
			{
				Texture2D value6 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle3 = value6.Frame(1, 4, 0, 0, 0, 0);
				Vector2 origin3 = rectangle3.Size() / 2f;
				Color color5 = Color.White * proj.Opacity;
				SpriteEffects effects = 0;
				color5.A /= 2;
				Color color6 = proj.AI_171_GetColor();
				color6.A /= 2;
				float num18 = proj.scale * 1.3f;
				float num19 = 1f;
				int num20 = proj.AI_172_GetPelletStormsCount();
				bool flag4 = false;
				float num21 = float.PositiveInfinity;
				for (int i = 0; i < num20; i++)
				{
					Projectile.HallowBossPelletStormInfo hallowBossPelletStormInfo = proj.AI_172_GetPelletStormInfo(i);
					for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
					{
						float bulletProgress = hallowBossPelletStormInfo.GetBulletProgress(j);
						if (bulletProgress < num21)
						{
							num21 = bulletProgress;
						}
						if (hallowBossPelletStormInfo.IsValid(j))
						{
							if (i == num20 - 1 && bulletProgress > 0f)
							{
								flag4 = true;
							}
							rectangle3 = value6.Frame(1, 4, 0, (int)((double)(j + i * 6) + Main.timeForVisualEffects / 4.0) % 4, 0, 0);
							float num22 = Utils.GetLerpValue(0f, 0.1f, bulletProgress, true) * Utils.GetLerpValue(1f, 0.8f, bulletProgress, true);
							Vector2 bulletPosition = hallowBossPelletStormInfo.GetBulletPosition(j, proj.Center);
							Main.EntitySpriteDraw(value6, bulletPosition - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle3), color6 * num22, proj.rotation, origin3, num18 * num19, effects, 0f);
							Main.EntitySpriteDraw(value6, bulletPosition - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle3), color5 * num22, proj.rotation, origin3, proj.scale * num19, effects, 0f);
						}
					}
				}
				if (!flag4 && num21 <= 1f)
				{
					Main.EntitySpriteDraw(value6, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle3), color6, proj.rotation, origin3, num18, effects, 0f);
					Main.EntitySpriteDraw(value6, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle3), color5, proj.rotation, origin3, proj.scale, effects, 0f);
				}
				return;
			}
			earlyReturn = false;
		}

		// Token: 0x060004A2 RID: 1186 RVA: 0x000D55E8 File Offset: 0x000D37E8
		private void DrawProj_DrawExtras(Projectile proj, Vector2 mountedCenter, ref float polePosX, ref float polePosY)
		{
			if (proj.bobber && Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].holdStyle != 0)
			{
				Main.DrawProj_FishingLine(proj, ref polePosX, ref polePosY, mountedCenter);
				return;
			}
			if (proj.type == 32)
			{
				Vector2 vector3;
				vector3..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
				float num24 = mountedCenter.X - vector3.X;
				float num25 = mountedCenter.Y - vector3.Y;
				float rotation = (float)Math.Atan2((double)num25, (double)num24) - 1.57f;
				bool flag5 = true;
				if (num24 == 0f && num25 == 0f)
				{
					flag5 = false;
				}
				else
				{
					float num26 = (float)Math.Sqrt((double)(num24 * num24 + num25 * num25));
					num26 = 8f / num26;
					num24 *= num26;
					num25 *= num26;
					vector3.X -= num24;
					vector3.Y -= num25;
					num24 = mountedCenter.X - vector3.X;
					num25 = mountedCenter.Y - vector3.Y;
				}
				while (flag5)
				{
					float num27 = (float)Math.Sqrt((double)(num24 * num24 + num25 * num25));
					if (num27 < 28f)
					{
						flag5 = false;
					}
					else if (float.IsNaN(num27))
					{
						flag5 = false;
					}
					else
					{
						num27 = 28f / num27;
						num24 *= num27;
						num25 *= num27;
						vector3.X += num24;
						vector3.Y += num25;
						num24 = mountedCenter.X - vector3.X;
						num25 = mountedCenter.Y - vector3.Y;
						Color color7 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
						Main.EntitySpriteDraw(TextureAssets.Chain5.Value, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain5.Width(), TextureAssets.Chain5.Height())), color7, rotation, new Vector2((float)TextureAssets.Chain5.Width() * 0.5f, (float)TextureAssets.Chain5.Height() * 0.5f), 1f, 0, 0f);
					}
				}
				return;
			}
			if (proj.type == 73)
			{
				Vector2 vector4;
				vector4..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
				float num28 = mountedCenter.X - vector4.X;
				float num29 = mountedCenter.Y - vector4.Y;
				float rotation2 = (float)Math.Atan2((double)num29, (double)num28) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num30 = (float)Math.Sqrt((double)(num28 * num28 + num29 * num29));
					if (num30 < 25f)
					{
						flag6 = false;
					}
					else if (float.IsNaN(num30))
					{
						flag6 = false;
					}
					else
					{
						num30 = 12f / num30;
						num28 *= num30;
						num29 *= num30;
						vector4.X += num28;
						vector4.Y += num29;
						num28 = mountedCenter.X - vector4.X;
						num29 = mountedCenter.Y - vector4.Y;
						Color color8 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
						Main.EntitySpriteDraw(TextureAssets.Chain8.Value, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height())), color8, rotation2, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, 0, 0f);
					}
				}
				return;
			}
			if (proj.type == 186)
			{
				Vector2 vector5;
				vector5..ctor(proj.localAI[0], proj.localAI[1]);
				float num31 = Vector2.Distance(proj.Center, vector5) - proj.velocity.Length();
				float num32 = (float)TextureAssets.Chain17.Height() - num31;
				if (num31 > 0f && proj.ai[1] > 0f)
				{
					Color color9 = Lighting.GetColor((int)proj.position.X / 16, (int)proj.position.Y / 16);
					Main.EntitySpriteDraw(TextureAssets.Chain17.Value, vector5 - Main.screenPosition, new Rectangle?(new Rectangle(0, (int)num32, TextureAssets.Chain17.Width(), (int)num31)), color9, proj.rotation, new Vector2((float)(TextureAssets.Chain17.Width() / 2), 0f), 1f, 0, 0f);
					return;
				}
			}
			else
			{
				if (proj.type == 74)
				{
					Vector2 vector6;
					vector6..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num33 = mountedCenter.X - vector6.X;
					float num34 = mountedCenter.Y - vector6.Y;
					float rotation3 = (float)Math.Atan2((double)num34, (double)num33) - 1.57f;
					bool flag7 = true;
					while (flag7)
					{
						float num35 = (float)Math.Sqrt((double)(num33 * num33 + num34 * num34));
						if (num35 < 25f)
						{
							flag7 = false;
						}
						else if (float.IsNaN(num35))
						{
							flag7 = false;
						}
						else
						{
							num35 = 12f / num35;
							num33 *= num35;
							num34 *= num35;
							vector6.X += num33;
							vector6.Y += num34;
							num33 = mountedCenter.X - vector6.X;
							num34 = mountedCenter.Y - vector6.Y;
							Color color10 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain9.Value, new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height())), color10, rotation3, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 171)
				{
					Vector2 vector7;
					vector7..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num36 = 0f - proj.velocity.X;
					float num37 = 0f - proj.velocity.Y;
					float num38 = 1f;
					if (proj.ai[0] <= 17f)
					{
						num38 = proj.ai[0] / 17f;
					}
					int num39 = (int)(30f * num38);
					float num40 = 1f;
					if (proj.ai[0] <= 30f)
					{
						num40 = proj.ai[0] / 30f;
					}
					float num41 = 0.4f * num40;
					float num42 = num41;
					num37 += num42;
					Vector2[] array = new Vector2[num39];
					float[] array2 = new float[num39];
					for (int i = 0; i < num39; i++)
					{
						float num43 = (float)Math.Sqrt((double)(num36 * num36 + num37 * num37));
						float num44 = 5.6f;
						if (Math.Abs(num36) + Math.Abs(num37) < 1f)
						{
							num44 *= Math.Abs(num36) + Math.Abs(num37) / 1f;
						}
						num43 = num44 / num43;
						num36 *= num43;
						num37 *= num43;
						float num45 = (float)Math.Atan2((double)num37, (double)num36) - 1.57f;
						array[i].X = vector7.X;
						array[i].Y = vector7.Y;
						array2[i] = num45;
						vector7.X += num36;
						vector7.Y += num37;
						num36 = 0f - proj.velocity.X;
						num37 = 0f - proj.velocity.Y;
						num42 += num41;
						num37 += num42;
					}
					for (int num46 = num39 - 1; num46 >= 0; num46--)
					{
						vector7.X = array[num46].X;
						vector7.Y = array[num46].Y;
						float rotation4 = array2[num46];
						Color color11 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
						Main.EntitySpriteDraw(TextureAssets.Chain16.Value, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain16.Width(), TextureAssets.Chain16.Height())), color11, rotation4, new Vector2((float)TextureAssets.Chain16.Width() * 0.5f, (float)TextureAssets.Chain16.Height() * 0.5f), 0.8f, 0, 0f);
					}
					return;
				}
				if (proj.type == 475)
				{
					Vector2 vector8;
					vector8..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num47 = 0f - proj.velocity.X;
					float num48 = 0f - proj.velocity.Y;
					float num49 = 1f;
					if (proj.ai[0] <= 17f)
					{
						num49 = proj.ai[0] / 17f;
					}
					int num50 = (int)(30f * num49);
					float num51 = 1f;
					if (proj.ai[0] <= 30f)
					{
						num51 = proj.ai[0] / 30f;
					}
					float num52 = 0.4f * num51;
					float num53 = num52;
					num48 += num53;
					Vector2[] array3 = new Vector2[num50];
					float[] array4 = new float[num50];
					for (int j = 0; j < num50; j++)
					{
						float num54 = (float)Math.Sqrt((double)(num47 * num47 + num48 * num48));
						float num55 = 5.6f;
						if (Math.Abs(num47) + Math.Abs(num48) < 1f)
						{
							num55 *= Math.Abs(num47) + Math.Abs(num48) / 1f;
						}
						num54 = num55 / num54;
						num47 *= num54;
						num48 *= num54;
						float num56 = (float)Math.Atan2((double)num48, (double)num47) - 1.57f;
						array3[j].X = vector8.X;
						array3[j].Y = vector8.Y;
						array4[j] = num56;
						vector8.X += num47;
						vector8.Y += num48;
						num47 = 0f - proj.velocity.X;
						num48 = 0f - proj.velocity.Y;
						num53 += num52;
						num48 += num53;
					}
					int num57 = 0;
					for (int num58 = num50 - 1; num58 >= 0; num58--)
					{
						vector8.X = array3[num58].X;
						vector8.Y = array3[num58].Y;
						float rotation5 = array4[num58];
						Color color12 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
						if (num57 % 2 == 0)
						{
							Main.EntitySpriteDraw(TextureAssets.Chain38.Value, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain38.Width(), TextureAssets.Chain38.Height())), color12, rotation5, new Vector2((float)TextureAssets.Chain38.Width() * 0.5f, (float)TextureAssets.Chain38.Height() * 0.5f), 0.8f, 0, 0f);
						}
						else
						{
							Main.EntitySpriteDraw(TextureAssets.Chain39.Value, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain39.Width(), TextureAssets.Chain39.Height())), color12, rotation5, new Vector2((float)TextureAssets.Chain39.Width() * 0.5f, (float)TextureAssets.Chain39.Height() * 0.5f), 0.8f, 0, 0f);
						}
						num57++;
					}
					return;
				}
				if (proj.type == 505 || proj.type == 506)
				{
					Vector2 vector9;
					vector9..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num59 = 0f - proj.velocity.X;
					float num60 = 0f - proj.velocity.Y;
					float num61 = 1f;
					if (proj.ai[0] <= 17f)
					{
						num61 = proj.ai[0] / 17f;
					}
					int num62 = (int)(30f * num61);
					float num63 = 1f;
					if (proj.ai[0] <= 30f)
					{
						num63 = proj.ai[0] / 30f;
					}
					float num64 = 0.4f * num63;
					float num65 = num64;
					num60 += num65;
					Vector2[] array5 = new Vector2[num62];
					float[] array6 = new float[num62];
					for (int k = 0; k < num62; k++)
					{
						float num66 = (float)Math.Sqrt((double)(num59 * num59 + num60 * num60));
						float num67 = 5.6f;
						if (Math.Abs(num59) + Math.Abs(num60) < 1f)
						{
							num67 *= Math.Abs(num59) + Math.Abs(num60) / 1f;
						}
						num66 = num67 / num66;
						num59 *= num66;
						num60 *= num66;
						float num68 = (float)Math.Atan2((double)num60, (double)num59) - 1.57f;
						array5[k].X = vector9.X;
						array5[k].Y = vector9.Y;
						array6[k] = num68;
						vector9.X += num59;
						vector9.Y += num60;
						num59 = 0f - proj.velocity.X;
						num60 = 0f - proj.velocity.Y;
						num65 += num64;
						num60 += num65;
					}
					int num69 = 0;
					for (int num70 = num62 - 1; num70 >= 0; num70--)
					{
						vector9.X = array5[num70].X;
						vector9.Y = array5[num70].Y;
						float rotation6 = array6[num70];
						Color color13 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
						int num71 = 4;
						if (proj.type == 506)
						{
							num71 = 6;
						}
						num71 += num69 % 2;
						Main.EntitySpriteDraw(TextureAssets.Chains[num71].Value, new Vector2(vector9.X - Main.screenPosition.X, vector9.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chains[num71].Width(), TextureAssets.Chains[num71].Height())), color13, rotation6, new Vector2((float)TextureAssets.Chains[num71].Width() * 0.5f, (float)TextureAssets.Chains[num71].Height() * 0.5f), 0.8f, 0, 0f);
						num69++;
					}
					return;
				}
				if (proj.type == 165)
				{
					Vector2 vector10;
					vector10..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num72 = mountedCenter.X - vector10.X;
					float num73 = mountedCenter.Y - vector10.Y;
					float rotation7 = (float)Math.Atan2((double)num73, (double)num72) - 1.57f;
					bool flag8 = true;
					while (flag8)
					{
						float num74 = (float)Math.Sqrt((double)(num72 * num72 + num73 * num73));
						if (num74 < 25f)
						{
							flag8 = false;
						}
						else if (float.IsNaN(num74))
						{
							flag8 = false;
						}
						else
						{
							num74 = 24f / num74;
							num72 *= num74;
							num73 *= num74;
							vector10.X += num72;
							vector10.Y += num73;
							num72 = mountedCenter.X - vector10.X;
							num73 = mountedCenter.Y - vector10.Y;
							Color color14 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain15.Value, new Vector2(vector10.X - Main.screenPosition.X, vector10.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain15.Width(), TextureAssets.Chain15.Height())), color14, rotation7, new Vector2((float)TextureAssets.Chain15.Width() * 0.5f, (float)TextureAssets.Chain15.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type >= 230 && proj.type <= 235)
				{
					int num75 = proj.type - 229;
					Vector2 vector11;
					vector11..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num76 = mountedCenter.X - vector11.X;
					float num77 = mountedCenter.Y - vector11.Y;
					float rotation8 = (float)Math.Atan2((double)num77, (double)num76) - 1.57f;
					bool flag9 = true;
					while (flag9)
					{
						float num78 = (float)Math.Sqrt((double)(num76 * num76 + num77 * num77));
						if (num78 < 25f)
						{
							flag9 = false;
						}
						else if (float.IsNaN(num78))
						{
							flag9 = false;
						}
						else
						{
							num78 = (float)TextureAssets.GemChain[num75].Height() / num78;
							num76 *= num78;
							num77 *= num78;
							vector11.X += num76;
							vector11.Y += num77;
							num76 = mountedCenter.X - vector11.X;
							num77 = mountedCenter.Y - vector11.Y;
							Color color15 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.GemChain[num75].Value, new Vector2(vector11.X - Main.screenPosition.X, vector11.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.GemChain[num75].Width(), TextureAssets.GemChain[num75].Height())), color15, rotation8, new Vector2((float)TextureAssets.GemChain[num75].Width() * 0.5f, (float)TextureAssets.GemChain[num75].Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 753)
				{
					Vector2 vector12;
					vector12..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num79 = mountedCenter.X - vector12.X;
					float num80 = mountedCenter.Y - vector12.Y;
					float rotation9 = (float)Math.Atan2((double)num80, (double)num79) - 1.57f;
					bool flag10 = true;
					Texture2D value7 = TextureAssets.Extra[95].Value;
					while (flag10)
					{
						float num81 = (float)Math.Sqrt((double)(num79 * num79 + num80 * num80));
						if (num81 < 25f)
						{
							flag10 = false;
						}
						else if (float.IsNaN(num81))
						{
							flag10 = false;
						}
						else
						{
							num81 = (float)value7.Height / num81;
							num79 *= num81;
							num80 *= num81;
							vector12.X += num79;
							vector12.Y += num80;
							num79 = mountedCenter.X - vector12.X;
							num80 = mountedCenter.Y - vector12.Y;
							Color color16 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
							Main.EntitySpriteDraw(value7, new Vector2(vector12.X - Main.screenPosition.X, vector12.Y - Main.screenPosition.Y), null, color16, rotation9, value7.Size() / 2f, 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 865)
				{
					Vector2 vector13;
					vector13..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num82 = mountedCenter.X - vector13.X;
					float num83 = mountedCenter.Y - vector13.Y;
					float rotation10 = (float)Math.Atan2((double)num83, (double)num82) - 1.57f;
					bool flag11 = true;
					bool flag12 = true;
					Texture2D value8 = TextureAssets.Extra[154].Value;
					while (flag11)
					{
						float num84 = (float)Math.Sqrt((double)(num82 * num82 + num83 * num83));
						if (num84 < 25f)
						{
							flag11 = false;
						}
						else if (float.IsNaN(num84))
						{
							flag11 = false;
						}
						else
						{
							num84 = (float)value8.Height / num84;
							num82 *= num84;
							num83 *= num84;
							vector13.X += num82;
							vector13.Y += num83;
							num82 = mountedCenter.X - vector13.X;
							num83 = mountedCenter.Y - vector13.Y;
							if (!flag12)
							{
								Color color17 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
								Main.EntitySpriteDraw(value8, new Vector2(vector13.X - Main.screenPosition.X, vector13.Y - Main.screenPosition.Y), null, color17, rotation10, value8.Size() / 2f, 1f, 0, 0f);
							}
							flag12 = false;
						}
					}
					return;
				}
				if (proj.type == 935)
				{
					Vector2 vector14;
					vector14..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num85 = mountedCenter.X - vector14.X;
					float num86 = mountedCenter.Y - vector14.Y;
					float rotation11 = (float)Math.Atan2((double)num86, (double)num85) - 1.57f;
					bool flag13 = true;
					bool flag14 = true;
					Texture2D value9 = TextureAssets.Extra[208].Value;
					while (flag13)
					{
						float num87 = (float)Math.Sqrt((double)(num85 * num85 + num86 * num86));
						if (num87 < 8f)
						{
							flag13 = false;
						}
						else if (float.IsNaN(num87))
						{
							flag13 = false;
						}
						else
						{
							num87 = (float)value9.Height / num87;
							num85 *= num87;
							num86 *= num87;
							vector14.X += num85;
							vector14.Y += num86;
							num85 = mountedCenter.X - vector14.X;
							num86 = mountedCenter.Y - vector14.Y;
							if (!flag14)
							{
								Color color18 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
								Main.EntitySpriteDraw(value9, new Vector2(vector14.X - Main.screenPosition.X, vector14.Y - Main.screenPosition.Y), null, color18, rotation11, value9.Size() / 2f, 1f, 0, 0f);
							}
							flag14 = false;
						}
					}
					return;
				}
				if (proj.type == 256)
				{
					Vector2 vector15;
					vector15..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num88 = mountedCenter.X - vector15.X;
					float num89 = mountedCenter.Y - vector15.Y;
					float num90 = (float)Math.Atan2((double)num89, (double)num88) - 1.57f;
					bool flag15 = true;
					while (flag15)
					{
						float num91 = (float)Math.Sqrt((double)(num88 * num88 + num89 * num89));
						if (num91 < 26f)
						{
							flag15 = false;
						}
						else if (float.IsNaN(num91))
						{
							flag15 = false;
						}
						else
						{
							num91 = 26f / num91;
							num88 *= num91;
							num89 *= num91;
							vector15.X += num88;
							vector15.Y += num89;
							num88 = Main.player[proj.owner].position.X + (float)(Main.player[proj.owner].width / 2) - vector15.X;
							num89 = Main.player[proj.owner].position.Y + (float)(Main.player[proj.owner].height / 2) - vector15.Y;
							Color color19 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain20.Value, new Vector2(vector15.X - Main.screenPosition.X, vector15.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain20.Width(), TextureAssets.Chain20.Height())), color19, num90 - 0.785f, new Vector2((float)TextureAssets.Chain20.Width() * 0.5f, (float)TextureAssets.Chain20.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 322)
				{
					Vector2 vector16;
					vector16..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num92 = mountedCenter.X - vector16.X;
					float num93 = mountedCenter.Y - vector16.Y;
					float rotation12 = (float)Math.Atan2((double)num93, (double)num92) - 1.57f;
					bool flag16 = true;
					while (flag16)
					{
						float num94 = (float)Math.Sqrt((double)(num92 * num92 + num93 * num93));
						if (num94 < 22f)
						{
							flag16 = false;
						}
						else if (float.IsNaN(num94))
						{
							flag16 = false;
						}
						else
						{
							num94 = 22f / num94;
							num92 *= num94;
							num93 *= num94;
							vector16.X += num92;
							vector16.Y += num93;
							num92 = mountedCenter.X - vector16.X;
							num93 = mountedCenter.Y - vector16.Y;
							Color color20 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain29.Value, new Vector2(vector16.X - Main.screenPosition.X, vector16.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain29.Width(), TextureAssets.Chain29.Height())), color20, rotation12, new Vector2((float)TextureAssets.Chain29.Width() * 0.5f, (float)TextureAssets.Chain29.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 315)
				{
					Vector2 vector17;
					vector17..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num95 = mountedCenter.X - vector17.X;
					float num96 = mountedCenter.Y - vector17.Y;
					float rotation13 = (float)Math.Atan2((double)num96, (double)num95) - 1.57f;
					bool flag17 = true;
					while (flag17)
					{
						float num97 = (float)Math.Sqrt((double)(num95 * num95 + num96 * num96));
						if (num97 < 50f)
						{
							flag17 = false;
						}
						else if (float.IsNaN(num97))
						{
							flag17 = false;
						}
						else
						{
							num97 = 40f / num97;
							num95 *= num97;
							num96 *= num97;
							vector17.X += num95;
							vector17.Y += num96;
							num95 = mountedCenter.X - vector17.X;
							num96 = mountedCenter.Y - vector17.Y;
							Color color21 = Lighting.GetColor((int)vector17.X / 16, (int)(vector17.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain28.Value, new Vector2(vector17.X - Main.screenPosition.X, vector17.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain28.Width(), TextureAssets.Chain28.Height())), color21, rotation13, new Vector2((float)TextureAssets.Chain28.Width() * 0.5f, (float)TextureAssets.Chain28.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 331)
				{
					Vector2 vector18;
					vector18..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num98 = mountedCenter.X - vector18.X;
					float num99 = mountedCenter.Y - vector18.Y;
					float rotation14 = (float)Math.Atan2((double)num99, (double)num98) - 1.57f;
					bool flag18 = true;
					while (flag18)
					{
						float num100 = (float)Math.Sqrt((double)(num98 * num98 + num99 * num99));
						if (num100 < 30f)
						{
							flag18 = false;
						}
						else if (float.IsNaN(num100))
						{
							flag18 = false;
						}
						else
						{
							num100 = 24f / num100;
							num98 *= num100;
							num99 *= num100;
							vector18.X += num98;
							vector18.Y += num99;
							num98 = mountedCenter.X - vector18.X;
							num99 = mountedCenter.Y - vector18.Y;
							Color color22 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain30.Value, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain30.Width(), TextureAssets.Chain30.Height())), color22, rotation14, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)TextureAssets.Chain30.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 332)
				{
					int num101 = 0;
					Vector2 vector19;
					vector19..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num102 = mountedCenter.X - vector19.X;
					float num103 = mountedCenter.Y - vector19.Y;
					float rotation15 = (float)Math.Atan2((double)num103, (double)num102) - 1.57f;
					bool flag19 = true;
					while (flag19)
					{
						float num104 = (float)Math.Sqrt((double)(num102 * num102 + num103 * num103));
						if (num104 < 30f)
						{
							flag19 = false;
						}
						else if (float.IsNaN(num104))
						{
							flag19 = false;
						}
						else
						{
							int i2 = (int)vector19.X / 16;
							int j2 = (int)vector19.Y / 16;
							if (num101 == 0)
							{
								Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
							}
							if (num101 == 1)
							{
								Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
							}
							if (num101 == 2)
							{
								Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
							}
							if (num101 == 3)
							{
								Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
							}
							num104 = 16f / num104;
							num102 *= num104;
							num103 *= num104;
							vector19.X += num102;
							vector19.Y += num103;
							num102 = mountedCenter.X - vector19.X;
							num103 = mountedCenter.Y - vector19.Y;
							Color color23 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain31.Value, new Vector2(vector19.X - Main.screenPosition.X, vector19.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, TextureAssets.Chain31.Height() / 4 * num101, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4)), color23, rotation15, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)(TextureAssets.Chain30.Height() / 8)), 1f, 0, 0f);
							Main.EntitySpriteDraw(TextureAssets.Chain32.Value, new Vector2(vector19.X - Main.screenPosition.X, vector19.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, TextureAssets.Chain31.Height() / 4 * num101, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4)), new Color(200, 200, 200, 0), rotation15, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)(TextureAssets.Chain30.Height() / 8)), 1f, 0, 0f);
							num101++;
							if (num101 > 3)
							{
								num101 = 0;
							}
						}
					}
					return;
				}
				if (proj.type == 372 || proj.type == 383 || proj.type == 396 || proj.type == 403 || proj.type == 404 || proj.type == 446 || (proj.type >= 486 && proj.type <= 489) || (proj.type >= 646 && proj.type <= 649) || proj.type == 652)
				{
					Texture2D texture2D = null;
					Color color24 = Color.Transparent;
					Texture2D value10 = TextureAssets.Chain33.Value;
					if (proj.type == 383)
					{
						value10 = TextureAssets.Chain34.Value;
					}
					if (proj.type == 396)
					{
						value10 = TextureAssets.Chain35.Value;
					}
					if (proj.type == 403)
					{
						value10 = TextureAssets.Chain36.Value;
					}
					if (proj.type == 404)
					{
						value10 = TextureAssets.Chain37.Value;
					}
					if (proj.type == 446)
					{
						value10 = TextureAssets.Extra[3].Value;
					}
					if (proj.type >= 486 && proj.type <= 489)
					{
						value10 = TextureAssets.Chains[proj.type - 486].Value;
					}
					if (proj.type >= 646 && proj.type <= 649)
					{
						value10 = TextureAssets.Chains[proj.type - 646 + 8].Value;
						texture2D = TextureAssets.Chains[proj.type - 646 + 12].Value;
						color24..ctor(255, 255, 255, 127);
					}
					if (proj.type == 652)
					{
						value10 = TextureAssets.Chains[16].Value;
					}
					Vector2 center = proj.Center;
					Rectangle? sourceRectangle = null;
					Vector2 origin4;
					origin4..ctor((float)value10.Width * 0.5f, (float)value10.Height * 0.5f);
					float num105 = (float)value10.Height;
					float num106 = 0f;
					if (proj.type == 446)
					{
						int num107 = 7;
						int num108 = (int)proj.localAI[0] / num107;
						sourceRectangle = new Rectangle?(new Rectangle(0, value10.Height / 4 * num108, value10.Width, value10.Height / 4));
						origin4.Y /= 4f;
						num105 /= 4f;
					}
					int type = proj.type;
					if (type <= 446)
					{
						if (type != 383)
						{
							if (type == 446)
							{
								num106 = 20f;
							}
						}
						else
						{
							num106 = 14f;
						}
					}
					else if (type != 487)
					{
						if (type == 489)
						{
							num106 = 10f;
						}
					}
					else
					{
						num106 = 8f;
					}
					if (num106 != 0f)
					{
						float num109 = -1.57f;
						Vector2 vector20;
						vector20..ctor((float)Math.Cos((double)(proj.rotation + num109)), (float)Math.Sin((double)(proj.rotation + num109)));
						center -= vector20 * num106;
						vector20 = mountedCenter - center;
						vector20.Normalize();
						center -= vector20 * num105 / 2f;
					}
					Vector2 vector21 = mountedCenter - center;
					float rotation16 = (float)Math.Atan2((double)vector21.Y, (double)vector21.X) - 1.57f;
					bool flag20 = true;
					if (float.IsNaN(center.X) && float.IsNaN(center.Y))
					{
						flag20 = false;
					}
					if (float.IsNaN(vector21.X) && float.IsNaN(vector21.Y))
					{
						flag20 = false;
					}
					while (flag20)
					{
						if (vector21.Length() < num105 + 1f)
						{
							flag20 = false;
						}
						else
						{
							Vector2 vector22 = vector21;
							vector22.Normalize();
							center += vector22 * num105;
							vector21 = mountedCenter - center;
							Color color25 = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
							if (proj.type == 396)
							{
								color25 *= (float)(255 - proj.alpha) / 255f;
							}
							if (proj.type == 446)
							{
								color25 = proj.GetAlpha(color25);
							}
							if (proj.type == 488)
							{
								Lighting.AddLight(center, 0.2f, 0f, 0.175f);
								color25..ctor(255, 255, 255, 255);
							}
							if (proj.type >= 646 && proj.type <= 649)
							{
								color25 = proj.GetAlpha(color25);
							}
							Main.EntitySpriteDraw(value10, center - Main.screenPosition, sourceRectangle, color25, rotation16, origin4, 1f, 0, 0f);
							if (texture2D != null)
							{
								Main.EntitySpriteDraw(texture2D, center - Main.screenPosition, sourceRectangle, color24, rotation16, origin4, 1f, 0, 0f);
							}
						}
					}
					return;
				}
				if (proj.aiStyle == 7)
				{
					Vector2 vector23;
					vector23..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
					float num110 = mountedCenter.X - vector23.X;
					float num111 = mountedCenter.Y - vector23.Y;
					float rotation17 = (float)Math.Atan2((double)num111, (double)num110) - 1.57f;
					bool flag21 = true;
					while (flag21)
					{
						float num112 = (float)Math.Sqrt((double)(num110 * num110 + num111 * num111));
						if (num112 < 25f)
						{
							flag21 = false;
						}
						else if (float.IsNaN(num112))
						{
							flag21 = false;
						}
						else
						{
							num112 = 12f / num112;
							num110 *= num112;
							num111 *= num112;
							vector23.X += num110;
							vector23.Y += num111;
							num110 = mountedCenter.X - vector23.X;
							num111 = mountedCenter.Y - vector23.Y;
							Color color26 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector23.X - Main.screenPosition.X, vector23.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height())), color26, rotation17, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 262)
				{
					float x = proj.Center.X;
					float y = proj.Center.Y;
					float x2 = proj.velocity.X;
					float y2 = proj.velocity.Y;
					float num113 = (float)Math.Sqrt((double)(x2 * x2 + y2 * y2));
					num113 = 4f / num113;
					if (proj.ai[0] == 0f)
					{
						x -= proj.velocity.X * num113;
						y -= proj.velocity.Y * num113;
					}
					else
					{
						x += proj.velocity.X * num113;
						y += proj.velocity.Y * num113;
					}
					Vector2 vector24;
					vector24..ctor(x, y);
					x2 = mountedCenter.X - vector24.X;
					y2 = mountedCenter.Y - vector24.Y;
					float rotation18 = (float)Math.Atan2((double)y2, (double)x2) - 1.57f;
					if (proj.alpha == 0)
					{
						int num114 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num114 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y2 * (float)num114), (double)(x2 * (float)num114));
						}
						else
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y2 * (float)num114), (double)(x2 * (float)num114));
						}
					}
					bool flag22 = true;
					while (flag22)
					{
						float num115 = (float)Math.Sqrt((double)(x2 * x2 + y2 * y2));
						if (num115 < 25f)
						{
							flag22 = false;
						}
						else if (float.IsNaN(num115))
						{
							flag22 = false;
						}
						else
						{
							num115 = 12f / num115;
							x2 *= num115;
							y2 *= num115;
							vector24.X += x2;
							vector24.Y += y2;
							x2 = mountedCenter.X - vector24.X;
							y2 = mountedCenter.Y - vector24.Y;
							Color color27 = Lighting.GetColor((int)vector24.X / 16, (int)(vector24.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain22.Value, new Vector2(vector24.X - Main.screenPosition.X, vector24.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain22.Width(), TextureAssets.Chain22.Height())), color27, rotation18, new Vector2((float)TextureAssets.Chain22.Width() * 0.5f, (float)TextureAssets.Chain22.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 273)
				{
					float x3 = proj.Center.X;
					float y3 = proj.Center.Y;
					float x4 = proj.velocity.X;
					float y4 = proj.velocity.Y;
					float num116 = (float)Math.Sqrt((double)(x4 * x4 + y4 * y4));
					num116 = 4f / num116;
					if (proj.ai[0] == 0f)
					{
						x3 -= proj.velocity.X * num116;
						y3 -= proj.velocity.Y * num116;
					}
					else
					{
						x3 += proj.velocity.X * num116;
						y3 += proj.velocity.Y * num116;
					}
					Vector2 vector25;
					vector25..ctor(x3, y3);
					x4 = mountedCenter.X - vector25.X;
					y4 = mountedCenter.Y - vector25.Y;
					float rotation19 = (float)Math.Atan2((double)y4, (double)x4) - 1.57f;
					if (proj.alpha == 0)
					{
						int num117 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num117 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y4 * (float)num117), (double)(x4 * (float)num117));
						}
						else
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y4 * (float)num117), (double)(x4 * (float)num117));
						}
					}
					bool flag23 = true;
					while (flag23)
					{
						float num118 = (float)Math.Sqrt((double)(x4 * x4 + y4 * y4));
						if (num118 < 25f)
						{
							flag23 = false;
						}
						else if (float.IsNaN(num118))
						{
							flag23 = false;
						}
						else
						{
							num118 = 12f / num118;
							x4 *= num118;
							y4 *= num118;
							vector25.X += x4;
							vector25.Y += y4;
							x4 = mountedCenter.X - vector25.X;
							y4 = mountedCenter.Y - vector25.Y;
							Color color28 = Lighting.GetColor((int)vector25.X / 16, (int)(vector25.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain23.Value, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain23.Width(), TextureAssets.Chain23.Height())), color28, rotation19, new Vector2((float)TextureAssets.Chain23.Width() * 0.5f, (float)TextureAssets.Chain23.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 481)
				{
					float x5 = proj.Center.X;
					float y5 = proj.Center.Y;
					float x6 = proj.velocity.X;
					float y6 = proj.velocity.Y;
					float num119 = (float)Math.Sqrt((double)(x6 * x6 + y6 * y6));
					num119 = 4f / num119;
					if (proj.ai[0] == 0f)
					{
						x5 -= proj.velocity.X * num119;
						y5 -= proj.velocity.Y * num119;
					}
					else
					{
						x5 += proj.velocity.X * num119;
						y5 += proj.velocity.Y * num119;
					}
					Vector2 origin5;
					origin5..ctor(x5, y5);
					x6 = mountedCenter.X - origin5.X;
					y6 = mountedCenter.Y - origin5.Y;
					float rotation20 = (float)Math.Atan2((double)y6, (double)x6) - 1.57f;
					if (proj.alpha == 0)
					{
						int num120 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num120 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y6 * (float)num120), (double)(x6 * (float)num120));
						}
						else
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y6 * (float)num120), (double)(x6 * (float)num120));
						}
					}
					bool flag24 = true;
					while (flag24)
					{
						float num121 = 0.85f;
						float num122 = origin5.Distance(mountedCenter);
						float num123 = num122;
						if ((double)num122 < (double)TextureAssets.Chain40.Height() * 1.5)
						{
							flag24 = false;
						}
						else if (float.IsNaN(num122))
						{
							flag24 = false;
						}
						else
						{
							num122 = (float)TextureAssets.Chain40.Height() * num121 / num122;
							x6 *= num122;
							y6 *= num122;
							origin5.X += x6;
							origin5.Y += y6;
							x6 = mountedCenter.X - origin5.X;
							y6 = mountedCenter.Y - origin5.Y;
							if (num123 > (float)(TextureAssets.Chain40.Height() * 2))
							{
								for (int l = 0; l < 2; l++)
								{
									float num124 = 0.75f;
									float num125 = (l != 0) ? Math.Abs(Main.player[proj.owner].velocity.Y) : Math.Abs(Main.player[proj.owner].velocity.X);
									if (num125 > 10f)
									{
										num125 = 10f;
									}
									num125 /= 10f;
									num124 *= num125;
									num125 = num123 / 80f;
									if (num125 > 1f)
									{
										num125 = 1f;
									}
									num124 *= num125;
									if (num124 < 0f)
									{
										num124 = 0f;
									}
									if (!float.IsNaN(num124))
									{
										if (l == 0)
										{
											if (Main.player[proj.owner].velocity.X < 0f && proj.Center.X < mountedCenter.X)
											{
												y6 *= 1f - num124;
											}
											if (Main.player[proj.owner].velocity.X > 0f && proj.Center.X > mountedCenter.X)
											{
												y6 *= 1f - num124;
											}
										}
										else
										{
											if (Main.player[proj.owner].velocity.Y < 0f && proj.Center.Y < mountedCenter.Y)
											{
												x6 *= 1f - num124;
											}
											if (Main.player[proj.owner].velocity.Y > 0f && proj.Center.Y > mountedCenter.Y)
											{
												x6 *= 1f - num124;
											}
										}
									}
								}
							}
							Color color29 = Lighting.GetColor((int)origin5.X / 16, (int)(origin5.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain40.Value, new Vector2(origin5.X - Main.screenPosition.X, origin5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain40.Width(), TextureAssets.Chain40.Height())), color29, rotation20, new Vector2((float)TextureAssets.Chain40.Width() * 0.5f, (float)TextureAssets.Chain40.Height() * 0.5f), num121, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 271)
				{
					float x7 = proj.Center.X;
					float y7 = proj.Center.Y;
					float x8 = proj.velocity.X;
					float y8 = proj.velocity.Y;
					float num126 = (float)Math.Sqrt((double)(x8 * x8 + y8 * y8));
					num126 = 4f / num126;
					if (proj.ai[0] == 0f)
					{
						x7 -= proj.velocity.X * num126;
						y7 -= proj.velocity.Y * num126;
					}
					else
					{
						x7 += proj.velocity.X * num126;
						y7 += proj.velocity.Y * num126;
					}
					Vector2 vector26;
					vector26..ctor(x7, y7);
					x8 = mountedCenter.X - vector26.X;
					y8 = mountedCenter.Y - vector26.Y;
					float rotation21 = (float)Math.Atan2((double)y8, (double)x8) - 1.57f;
					if (proj.alpha == 0)
					{
						int num127 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num127 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y8 * (float)num127), (double)(x8 * (float)num127));
						}
						else
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y8 * (float)num127), (double)(x8 * (float)num127));
						}
					}
					bool flag25 = true;
					while (flag25)
					{
						float num128 = (float)Math.Sqrt((double)(x8 * x8 + y8 * y8));
						if (num128 < 25f)
						{
							flag25 = false;
						}
						else if (float.IsNaN(num128))
						{
							flag25 = false;
						}
						else
						{
							num128 = 12f / num128;
							x8 *= num128;
							y8 *= num128;
							vector26.X += x8;
							vector26.Y += y8;
							x8 = mountedCenter.X - vector26.X;
							y8 = mountedCenter.Y - vector26.Y;
							Color color30 = Lighting.GetColor((int)vector26.X / 16, (int)(vector26.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain18.Value, new Vector2(vector26.X - Main.screenPosition.X, vector26.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain18.Width(), TextureAssets.Chain18.Height())), color30, rotation21, new Vector2((float)TextureAssets.Chain18.Width() * 0.5f, (float)TextureAssets.Chain18.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.aiStyle == 13)
				{
					float num129 = proj.position.X + 8f;
					float num130 = proj.position.Y + 2f;
					float x9 = proj.velocity.X;
					float num131 = proj.velocity.Y;
					if (x9 == 0f && num131 == 0f)
					{
						num131 = 0.0001f;
					}
					float num132 = (float)Math.Sqrt((double)(x9 * x9 + num131 * num131));
					num132 = 20f / num132;
					if (proj.ai[0] == 0f)
					{
						num129 -= proj.velocity.X * num132;
						num130 -= proj.velocity.Y * num132;
					}
					else
					{
						num129 += proj.velocity.X * num132;
						num130 += proj.velocity.Y * num132;
					}
					Vector2 vector27;
					vector27..ctor(num129, num130);
					x9 = mountedCenter.X - vector27.X;
					num131 = mountedCenter.Y - vector27.Y;
					float rotation22 = (float)Math.Atan2((double)num131, (double)x9) - 1.57f;
					if (proj.alpha == 0)
					{
						int num133 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num133 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(num131 * (float)num133), (double)(x9 * (float)num133));
						}
						else
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(num131 * (float)num133), (double)(x9 * (float)num133));
						}
					}
					bool flag26 = true;
					while (flag26)
					{
						float num134 = (float)Math.Sqrt((double)(x9 * x9 + num131 * num131));
						if (num134 < 25f)
						{
							flag26 = false;
						}
						else if (float.IsNaN(num134))
						{
							flag26 = false;
						}
						else
						{
							num134 = 12f / num134;
							x9 *= num134;
							num131 *= num134;
							vector27.X += x9;
							vector27.Y += num131;
							x9 = mountedCenter.X - vector27.X;
							num131 = mountedCenter.Y - vector27.Y;
							Color color31 = Lighting.GetColor((int)vector27.X / 16, (int)(vector27.Y / 16f));
							Main.EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector27.X - Main.screenPosition.X, vector27.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height())), color31, rotation22, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, 0, 0f);
						}
					}
					return;
				}
				if (proj.type == 190)
				{
					float x10 = proj.position.X + (float)(proj.width / 2);
					float y9 = proj.position.Y + (float)(proj.height / 2);
					float x11 = proj.velocity.X;
					float y10 = proj.velocity.Y;
					Math.Sqrt((double)(x11 * x11 + y10 * y10));
					Vector2 vector28;
					vector28..ctor(x10, y9);
					x11 = mountedCenter.X - vector28.X;
					y10 = mountedCenter.Y + Main.player[proj.owner].gfxOffY - vector28.Y;
					Math.Atan2((double)y10, (double)x11);
					if (proj.alpha == 0)
					{
						int num135 = -1;
						if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
						{
							num135 = 1;
						}
						if (Main.player[proj.owner].direction == 1)
						{
							Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y10 * (float)num135), (double)(x11 * (float)num135));
							return;
						}
						Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(y10 * (float)num135), (double)(x11 * (float)num135));
						return;
					}
				}
				else if (proj.aiStyle == 15)
				{
					Main.DrawProj_FlailChains(proj, mountedCenter);
				}
			}
		}

		// Token: 0x060004A3 RID: 1187 RVA: 0x000D9218 File Offset: 0x000D7418
		private void DrawProj_Inner_DoDrawProj(Projectile proj, Vector2 mountedCenter, float polePosX, float polePosY)
		{
			Color projectileColor = Lighting.GetColor((int)((double)proj.position.X + (double)proj.width * 0.5) / 16, (int)(((double)proj.position.Y + (double)proj.height * 0.5) / 16.0));
			if (proj.hide && !ProjectileID.Sets.DontAttachHideToAlpha[proj.type])
			{
				projectileColor = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
			}
			if (proj.type == 14)
			{
				projectileColor = Color.White;
			}
			if (ProjectileLoader.PreDraw(proj, ref projectileColor))
			{
				bool earlyReturn = true;
				this.DrawProj_DrawVoidLens(proj, ref earlyReturn);
				if (!earlyReturn)
				{
					earlyReturn = true;
					this.DrawProj_DrawSpecialProjs(proj, ref earlyReturn);
					if (!earlyReturn)
					{
						this.DrawProj_DrawNormalProjs(proj, polePosX, polePosY, mountedCenter, ref projectileColor);
					}
				}
			}
			ProjectileLoader.PostDraw(proj, projectileColor);
		}

		// Token: 0x060004A4 RID: 1188 RVA: 0x000D92F4 File Offset: 0x000D74F4
		private void DrawProj_DrawNormalProjs(Projectile proj, float polePosX, float polePosY, Vector2 mountedCenter, ref Color projectileColor)
		{
			int num136 = 0;
			int num137 = 0;
			if (proj.type == 175)
			{
				num136 = 10;
			}
			if (proj.type == 392)
			{
				num136 = -2;
			}
			if (proj.type == 499)
			{
				num136 = 12;
			}
			if (proj.type == 765)
			{
				num136 = 22;
				num137 = -16;
			}
			if (proj.type == 966)
			{
				num136 = -26;
				num137 = -6;
			}
			if (proj.bobber)
			{
				num136 = 8;
			}
			if (proj.type == 519)
			{
				num136 = 6;
				num137 -= 6;
			}
			if (proj.type == 520)
			{
				num136 = 12;
			}
			if (proj.type == 492)
			{
				num137 -= 4;
				num136 += 5;
			}
			if (proj.type == 498)
			{
				num136 = 6;
			}
			if (proj.type == 489)
			{
				num136 = -2;
			}
			if (proj.type == 486)
			{
				num136 = -6;
			}
			if (proj.type == 525)
			{
				num136 = 5;
			}
			if (proj.type == 488)
			{
				num137 -= 8;
			}
			if (proj.type == 373)
			{
				num137 = -10;
				num136 = 6;
			}
			if (proj.type == 375)
			{
				num137 = -11;
				num136 = 12;
			}
			if (proj.type == 423)
			{
				num137 = -5;
			}
			if (proj.type == 346)
			{
				num136 = 4;
			}
			if (proj.type == 331)
			{
				num137 = -4;
			}
			if (proj.type == 254)
			{
				num136 = 3;
			}
			if (proj.type == 273)
			{
				num137 = 2;
			}
			if (proj.type == 335)
			{
				num136 = 6;
			}
			if (proj.type == 162)
			{
				num136 = 1;
				num137 = 1;
			}
			if (proj.type == 377)
			{
				num136 = -6;
			}
			if (proj.type == 353)
			{
				num136 = 36;
				num137 = -12;
			}
			if (proj.type == 324)
			{
				num136 = 22;
				num137 = -6;
			}
			if (proj.type == 266)
			{
				num136 = 10;
				num137 = -10;
			}
			if (proj.type == 319)
			{
				num136 = 10;
				num137 = -12;
			}
			if (proj.type == 315)
			{
				num136 = -13;
				num137 = -6;
			}
			if (proj.type == 313 && proj.height != 54)
			{
				num137 = -12;
				num136 = 20;
			}
			if (proj.type == 314)
			{
				num137 = -8;
				num136 = 0;
			}
			if (proj.type == 269)
			{
				num136 = 18;
				num137 = -14;
			}
			if (proj.type == 268)
			{
				num136 = 22;
				num137 = -2;
			}
			if (proj.type == 18)
			{
				num136 = 3;
				num137 = 3;
			}
			if (proj.type == 16)
			{
				num136 = 6;
			}
			if (proj.type == 17 || proj.type == 31)
			{
				num136 = 2;
			}
			if (proj.type == 25 || proj.type == 26 || proj.type == 35 || proj.type == 63 || proj.type == 154)
			{
				num136 = 6;
				num137 -= 6;
			}
			if (proj.type == 947 || proj.type == 948)
			{
				num136 = 4;
				num137 -= 4;
			}
			if (proj.type == 28 || proj.type == 37 || proj.type == 75)
			{
				num136 = 8;
			}
			if (proj.type == 29 || proj.type == 470 || proj.type == 637)
			{
				num136 = 11;
			}
			if (proj.type == 43)
			{
				num136 = 4;
			}
			if (proj.type == 208)
			{
				num136 = 2;
				num137 -= 12;
			}
			if (proj.type == 209)
			{
				num136 = 4;
				num137 -= 8;
			}
			if (proj.type == 210)
			{
				num136 = 2;
				num137 -= 22;
			}
			if (proj.type == 251)
			{
				num136 = 18;
				num137 -= 10;
			}
			if (proj.type == 163 || proj.type == 310 || proj.type == 1009 || proj.type == 1010 || proj.type == 1011 || proj.type == 1008)
			{
				num136 = 10;
			}
			if (proj.type == 69 || proj.type == 70)
			{
				num136 = 4;
				num137 = 4;
			}
			float num138 = (float)(TextureAssets.Projectile[proj.type].Width() - proj.width) * 0.5f + (float)proj.width * 0.5f;
			if (proj.type == 50 || proj.type == 53 || proj.type == 515 || proj.type == 870)
			{
				num137 = -8;
			}
			if (proj.type == 473)
			{
				num137 = -6;
				num136 = 2;
			}
			if (proj.type == 72 || proj.type == 86 || proj.type == 87)
			{
				num137 = -16;
				num136 = 8;
			}
			if (proj.type == 74)
			{
				num137 = -6;
			}
			if (proj.type == 99 || proj.type == 727 || proj.type == 1013 || proj.type == 1014)
			{
				num136 = 1;
			}
			if (proj.type == 655)
			{
				num136 = 1;
			}
			if (proj.type == 111)
			{
				num136 = 18;
				num137 = -16;
			}
			if (proj.type == 875)
			{
				num136 = 16;
				num137 = -16;
			}
			if (proj.type == 881)
			{
				num136 = 14;
				num137 = -8;
			}
			if (proj.type == 934)
			{
				num136 = 14;
				num137 = -20;
			}
			if (proj.type == 934)
			{
				num136 = 14;
				num137 = -20;
			}
			if (proj.type == 884)
			{
				num136 = 16;
				num137 = -12;
			}
			if (proj.type == 890)
			{
				num136 = 26;
				num137 = -9;
			}
			if (proj.type == 891)
			{
				num136 = 30;
				num137 = -12;
			}
			if (proj.type == 897)
			{
				num136 = 38;
				num137 = -13;
			}
			if (proj.type == 899)
			{
				num136 = 28;
				num137 = -12;
			}
			if (proj.type == 900)
			{
				num136 = 54;
				num137 = -30;
			}
			if (proj.type == 334)
			{
				num137 = -18;
				num136 = 8;
			}
			if (proj.type == 816)
			{
				num137 = -19;
				num136 = 6;
			}
			if (proj.type == 821)
			{
				num137 = -10;
				num136 = 6;
			}
			if (proj.type == 825)
			{
				num137 = -19;
				num136 = 14;
			}
			if (proj.type == 854)
			{
				num137 = -14;
				num136 = 10;
			}
			if (proj.type == 858)
			{
				num137 = -8;
				num136 = 16;
			}
			if (proj.type == 859)
			{
				num137 = -8;
				num136 = 8;
			}
			if (proj.type == 860)
			{
				num137 = -8;
				num136 = 34;
			}
			if (proj.type == 958)
			{
				num137 = -20;
				num136 = 48;
			}
			if (proj.type == 960)
			{
				num137 = -14;
				num136 = 24;
			}
			if (proj.type == 956)
			{
				num137 = -12;
				num136 = 16;
			}
			if (proj.type == 959)
			{
				num137 = -14 + ((proj.spriteDirection == -1) ? -8 : 0);
				num136 = 40;
			}
			if (proj.type == 994)
			{
				num137 = -10;
				num136 = 18;
			}
			if (proj.type == 998)
			{
				num137 = -10;
				num136 = 14;
			}
			if (proj.type == 1003)
			{
				num137 = -18 + ((proj.spriteDirection == 1) ? 8 : 0);
				num136 = 22;
			}
			if (proj.type == 1004)
			{
				num137 = -18 + ((proj.spriteDirection == 1) ? 6 : 0);
				num136 = 26;
			}
			if (proj.type == 200)
			{
				num136 = 12;
				num137 = -12;
			}
			if (proj.type == 211)
			{
				num136 = 14;
				num137 = 0;
			}
			if (proj.type == 236)
			{
				num136 = 30;
				num137 = -14;
			}
			if (proj.type >= 191 && proj.type <= 194)
			{
				num136 = 26;
				num137 = ((proj.direction != 1) ? -22 : -10);
			}
			if (proj.type >= 390 && proj.type <= 392)
			{
				num137 = 4 * proj.direction;
			}
			if (proj.type == 112)
			{
				num136 = 14;
				num137 = -8 + 4 * proj.spriteDirection;
			}
			int type3 = proj.type;
			if (proj.type == 517 || proj.type == 681)
			{
				num136 = 6;
			}
			if (proj.type == 516)
			{
				num136 = 6;
			}
			if (proj.type == 127)
			{
				num136 = 8;
			}
			if (proj.type == 155)
			{
				num136 = 3;
				num137 = 3;
			}
			if (proj.type == 397)
			{
				num138 -= 1f;
				num136 = -2;
				num137 = -2;
			}
			if (proj.type == 398)
			{
				num136 = 8;
			}
			ProjectileLoader.DrawOffset(proj, ref num137, ref num136, ref num138);
			SpriteEffects dir = 0;
			if (proj.spriteDirection == -1)
			{
				dir = 1;
			}
			if (proj.type == 681 && proj.velocity.X > 0f)
			{
				dir ^= 1;
			}
			if (proj.type == 221)
			{
				for (int num139 = 1; num139 < 10; num139++)
				{
					float num140 = proj.velocity.X * (float)num139 * 0.5f;
					float num141 = proj.velocity.Y * (float)num139 * 0.5f;
					Color alpha = proj.GetAlpha(projectileColor);
					float num142 = 0f;
					if (num139 == 1)
					{
						num142 = 0.9f;
					}
					if (num139 == 2)
					{
						num142 = 0.8f;
					}
					if (num139 == 3)
					{
						num142 = 0.7f;
					}
					if (num139 == 4)
					{
						num142 = 0.6f;
					}
					if (num139 == 5)
					{
						num142 = 0.5f;
					}
					if (num139 == 6)
					{
						num142 = 0.4f;
					}
					if (num139 == 7)
					{
						num142 = 0.3f;
					}
					if (num139 == 8)
					{
						num142 = 0.2f;
					}
					if (num139 == 9)
					{
						num142 = 0.1f;
					}
					alpha.R = (byte)((float)alpha.R * num142);
					alpha.G = (byte)((float)alpha.G * num142);
					alpha.B = (byte)((float)alpha.B * num142);
					alpha.A = (byte)((float)alpha.A * num142);
					int num143 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
					int y11 = num143 * proj.frame;
					Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num140, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num141), new Rectangle?(new Rectangle(0, y11, TextureAssets.Projectile[proj.type].Width(), num143)), alpha, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
			}
			if (proj.type == 408 || proj.type == 435 || proj.type == 436 || proj.type == 438 || proj.type == 452 || proj.type == 454 || proj.type == 459 || proj.type == 462 || proj.type == 503 || proj.type == 532 || proj.type == 533 || proj.type == 573 || proj.type == 582 || proj.type == 585 || proj.type == 592 || proj.type == 601 || proj.type == 636 || proj.type == 638 || proj.type == 640 || proj.type == 639 || proj.type == 424 || proj.type == 425 || proj.type == 426 || proj.type == 660 || proj.type == 661 || proj.type == 671 || proj.type == 664 || proj.type == 666 || proj.type == 668 || proj.type == 675 || proj.type == 680 || proj.type == 682 || proj.type == 684 || proj.type == 686 || proj.type == 700 || proj.type == 706 || proj.type == 709 || proj.type == 710 || proj.type == 711 || proj.type == 261 || ProjectileID.Sets.IsAGolfBall[proj.type] || proj.type == 729 || proj.type == 732 || proj.type == 731 || proj.type == 755 || proj.type == 811 || proj.type == 814 || proj.type == 819 || proj.type == 864 || proj.type == 873 || proj.type == 872 || proj.type == 833 || proj.type == 834 || proj.type == 835 || proj.type == 818 || proj.type == 902 || proj.type == 894 || proj.type == 901 || proj.type == 909 || proj.type == 916 || proj.type == 931 || proj.type == 933 || proj.type == 964 || proj.type == 965 || proj.type == 977 || proj.type == 976 || proj.type == 1001)
			{
				Texture2D value11 = TextureAssets.Projectile[proj.type].Value;
				int num144 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
				int y12 = num144 * proj.frame;
				Rectangle rectangle4;
				rectangle4..ctor(0, y12, value11.Width, num144);
				Vector2 origin6 = rectangle4.Size() / 2f;
				Vector2 zero = Vector2.Zero;
				float num145 = 0f;
				if (proj.type == 503)
				{
					origin6.Y = 70f;
				}
				if (proj.type == 686 || proj.type == 711)
				{
					origin6.Y = (float)(rectangle4.Height - 70);
				}
				if (proj.type == 438)
				{
					rectangle4.Y = 0;
				}
				if (proj.type == 452)
				{
					rectangle4.Y = 0;
				}
				if (proj.type == 408)
				{
					rectangle4.Y = num144;
				}
				if (proj.type == 636)
				{
					origin6.Y = 10f;
				}
				if (proj.type == 638)
				{
					origin6.Y = 2f;
				}
				if (proj.type == 640 || proj.type == 639 || proj.type == 710)
				{
					origin6.Y = 5f;
				}
				if (proj.type == 700)
				{
					origin6.X = (float)((proj.spriteDirection == 1) ? (rectangle4.Width - 20) : 20);
				}
				if (proj.type == 965 || proj.type == 964)
				{
					origin6.X = (float)((proj.spriteDirection == 1) ? (rectangle4.Width - 20) : 20);
				}
				if (proj.type == 872)
				{
					rectangle4.Width /= 2;
					origin6.X /= 2f;
				}
				if (proj.type == 933)
				{
					int num146 = (int)proj.ai[1];
					if (TextureAssets.Item.IndexInRange(num146))
					{
						Main.instance.LoadItem(num146);
						value11 = TextureAssets.Item[num146].Value;
						rectangle4 = value11.Frame(1, 1, 0, 0, 0, 0);
						origin6 = rectangle4.Size() / 2f;
						num145 = -0.7853982f * (float)proj.spriteDirection;
					}
				}
				if (proj.type == 833 && proj.frame != 8)
				{
					zero.Y += (float)(proj.height / 2);
					origin6 = rectangle4.Size() * new Vector2(0.5f, 1f);
					origin6.Y -= 4f;
					origin6.X -= (float)(7 * dir.HasFlag(1).ToDirectionInt());
				}
				if ((proj.type == 834 || proj.type == 835) && proj.frame != 10)
				{
					zero.Y += (float)(proj.height / 2);
					origin6 = rectangle4.Size() * new Vector2(0.5f, 1f);
					origin6.Y -= 4f;
					origin6.X -= (float)(2 * dir.HasFlag(1).ToDirectionInt());
				}
				int num147 = 8;
				int num148 = 2;
				int num149 = 1;
				float value12 = 1f;
				float num150 = 15f;
				float num151 = 0f;
				Rectangle value13 = rectangle4;
				UnifiedRandom unifiedRandom = null;
				if (proj.type == 909)
				{
					num149 = 5;
					num147 = 0;
					num148 = -1;
				}
				else if (proj.type == 503)
				{
					num147 = 9;
					num148 = 3;
					value12 = 0.5f;
				}
				else if (proj.type == 261)
				{
					num149 = 18;
					num147 = 0;
					num148 = -2;
					value12 = 1.3f;
				}
				else if (proj.type == 833 || proj.type == 834 || proj.type == 835)
				{
					num149 = 6;
					num147 = 0;
					num148 = -1;
					value12 = 1.5f;
				}
				else if (proj.type == 818)
				{
					num149 = 18;
					num147 = 0;
					num148 = -2;
					value12 = 1f;
				}
				else if (proj.type == 729)
				{
					num149 = 18;
					num147 = 0;
					num148 = -2;
					value12 = 1.3f;
				}
				else if (proj.type == 977)
				{
					num149 = 18;
					num147 = 0;
					num148 = -2;
					value12 = 1.3f;
				}
				else if (proj.type == 1001)
				{
					num149 = 10;
					num147 = 0;
					num148 = -2;
					value12 = 1.3f;
					dir = ((proj.spriteDirection != 1) ? 2 : 0);
				}
				else if (proj.type == 976)
				{
					num149 = 18;
					num147 = 0;
					num148 = -3;
					value12 = 1.3f;
					rectangle4..ctor(0, 20 * proj.frame, 32, 18);
					value13 = rectangle4;
					origin6 = rectangle4.Size() / 2f;
				}
				else if (proj.type == 686 || proj.type == 711)
				{
					num149 = 19;
					num147 = 0;
					num148 = -3;
					value12 = 0.5f;
				}
				else if (ProjectileID.Sets.IsAGolfBall[proj.type])
				{
					num149 = 0;
					num147 = 0;
					num148 = -1;
					value12 = 2f;
				}
				else if (proj.type == 671)
				{
					num149 = 5;
					num147 = 0;
					num148 = -1;
					value12 = 2.6f;
				}
				else if (proj.type == 811)
				{
					num149 = 5;
					num147 = 0;
					num148 = -1;
					value12 = 2.6f;
					projectileColor = Color.Lerp(projectileColor, Color.White, Utils.Remap(proj.ai[0], 0f, 15f, 1f, 0.3f, true));
				}
				else if (proj.type == 814)
				{
					num149 = 18;
					num147 = 0;
					num148 = -1;
					value12 = 1f;
					projectileColor = Color.Lerp(projectileColor, Color.White, 0.35f);
				}
				else if (proj.type == 755)
				{
					num149 = 5;
					num147 = 0;
					num148 = -1;
					value12 = 2.6f;
				}
				else if (proj.type == 700)
				{
					num147 = 5;
					num148 = 1;
					value12 = 2.6f;
				}
				else if (proj.type == 965 || proj.type == 964)
				{
					num147 = 5;
					num148 = 1;
					value12 = 2.6f;
				}
				else if (proj.type == 731)
				{
					num149 = 19;
					num147 = 0;
					num148 = -1;
					value12 = 0.5f;
				}
				else if (proj.type == 864)
				{
					num149 = 12;
					num147 = 0;
					num148 = -1;
					value12 = 1.4f;
					value13.Y += value13.Height;
				}
				else if (proj.type == 916)
				{
					num149 = 19;
					num147 = 0;
					num148 = -1;
					value12 = 1.4f;
					value13.Y += value13.Height;
					unifiedRandom = Main._tempSeededRandom;
					unifiedRandom.SetSeed(proj.timeLeft);
				}
				else if (proj.type == 873)
				{
					num149 = 39;
					num150 = 40f;
					num147 = 0;
					num148 = -1;
					value12 = 1.4f;
				}
				else if (proj.type == 931)
				{
					num149 = 19;
					num150 = 20f;
					num147 = 0;
					num148 = -1;
					value12 = 0.7f;
				}
				else if (proj.type == 933)
				{
					num149 = 60;
					num150 = 60f;
					num147 = 0;
					num148 = -15;
					value12 = 1f;
				}
				else if (proj.type == 872)
				{
					num149 = 79;
					num150 = 10f;
					num147 = 0;
					num148 = -1;
					value12 = 1f;
					value13.X += value13.Width;
				}
				else if (proj.type == 664 || proj.type == 666 || proj.type == 668)
				{
					num147 = 8;
					num148 = 2;
					value12 = 0.4f;
				}
				else if (proj.type == 582 || proj.type == 902)
				{
					if (proj.ai[2] == 1f)
					{
						value11 = TextureAssets.Extra[263].Value;
					}
					num147 = 10;
					num148 = 2;
					value12 = 0.7f;
					num151 = 0.2f;
				}
				else if (proj.type == 675)
				{
					num147 = 5;
					num148 = 1;
					value12 = 0.4f;
				}
				else if (proj.type == 638)
				{
					num147 = 5;
					num148 = 1;
					value12 = 1f;
				}
				else if (proj.type == 660)
				{
					num147 = 3;
					num148 = 1;
					value12 = 8f;
					rectangle4..ctor(38 * proj.frame, 0, 38, 38);
					value13 = rectangle4;
					origin6 = rectangle4.Size() / 2f;
				}
				else if (proj.type == 684)
				{
					num147 = 8;
					num148 = 1;
					value12 = 0.75f;
				}
				else if (proj.type == 639)
				{
					num147 = 10;
					num148 = 1;
					value12 = 1f;
				}
				else if (proj.type == 710)
				{
					num149 = 9;
					num147 = 0;
					num148 = -2;
					value12 = 0.5f;
				}
				else if (proj.type == 640)
				{
					num147 = 20;
					num148 = 1;
					value12 = 1f;
				}
				else if (proj.type == 436)
				{
					num148 = 2;
					value12 = 0.5f;
				}
				else if (proj.type == 424 || proj.type == 425 || proj.type == 426)
				{
					num147 = 10;
					num148 = 2;
					value12 = 0.6f;
				}
				else if (proj.type == 438)
				{
					num147 = 10;
					num148 = 2;
					value12 = 1f;
				}
				else if (proj.type == 452)
				{
					num147 = 10;
					num148 = 3;
					value12 = 0.5f;
				}
				else if (proj.type == 454)
				{
					num147 = 5;
					num148 = 1;
					value12 = 0.2f;
				}
				else if (proj.type == 462)
				{
					num147 = 7;
					num148 = 1;
					value12 = 0.2f;
				}
				else if (proj.type == 661)
				{
					num147 = 0;
					num148 = 1;
					value12 = 0.5f;
				}
				else if (proj.type == 706)
				{
					num149 = 9;
					num147 = 0;
					num148 = -2;
					value12 = 0.5f;
				}
				else if (proj.type == 585)
				{
					num147 = 7;
					num148 = 1;
					value12 = 0.2f;
				}
				else if (proj.type == 459)
				{
					num147 = (int)(proj.scale * 8f);
					num148 = num147 / 4;
					if (num148 < 1)
					{
						num148 = 1;
					}
					value12 = 0.3f;
				}
				else if (proj.type == 709)
				{
					num147 = 8;
					num148 = num147 / 4;
					if (num148 < 1)
					{
						num148 = 1;
					}
					value12 = 0.5f;
				}
				else if (proj.type == 532)
				{
					num147 = 10;
					num148 = 1;
					value12 = 0.7f;
					num151 = 0.2f;
				}
				else if (proj.type == 592)
				{
					num147 = 10;
					num148 = 2;
					value12 = 1f;
				}
				else if (proj.type == 601)
				{
					num147 = 8;
					num148 = 1;
					value12 = 0.3f;
				}
				else if (proj.type == 636)
				{
					num147 = 20;
					num148 = 3;
					value12 = 0.5f;
				}
				else if (proj.type == 680)
				{
					num147 = 9;
					num148 = 3;
					value12 = 0.5f;
				}
				else if (proj.type == 533)
				{
					if (proj.ai[0] >= 6f && proj.ai[0] <= 8f)
					{
						num147 = ((proj.ai[0] == 6f) ? 8 : 4);
						num148 = 1;
						if (proj.ai[0] != 7f)
						{
							num151 = 0.2f;
						}
					}
					else
					{
						num148 = (num147 = 0);
					}
				}
				int num152 = num149;
				Color color107;
				while ((num148 > 0 && num152 < num147) || (num148 < 0 && num152 > num147))
				{
					if (num152 < proj.oldPos.Length)
					{
						Color color32 = projectileColor;
						if (proj.type == 408 || proj.type == 435 || proj.type == 682 || proj.type == 732 || proj.type == 731)
						{
							color32 = Color.Lerp(color32, Color.Blue, 0.5f);
						}
						else if (proj.type == 436)
						{
							color32 = Color.Lerp(color32, Color.LimeGreen, 0.5f);
						}
						else if (proj.type >= 424 && proj.type <= 426)
						{
							color32 = Color.Lerp(color32, Color.Red, 0.5f);
						}
						else if (proj.type == 640 || proj.type == 639)
						{
							color32.A = 127;
						}
						else if (proj.type == 671)
						{
							color32 = Color.Lerp(color32, Color.Purple, (float)num152 / (float)num147);
						}
						else if (proj.type == 811)
						{
							color32 = Color.Lerp(color32, Color.Crimson * 0.5f, (float)num152 / (float)num147);
						}
						else if (proj.type == 814)
						{
							color32 = Color.Lerp(color32, color32 * 0.5f, (float)num152 / (float)num147);
						}
						else if (proj.type == 261)
						{
							color32 = Color.Lerp(color32, new Color(60, 60, 60, 60), (float)num152 / (float)num147);
						}
						else if (ProjectileID.Sets.IsAGolfBall[proj.type])
						{
							color32 = Color.Lerp(color32, new Color(255, 230, 40, 20), (float)num152 / (float)num147);
						}
						color32 = proj.GetAlpha(color32);
						if (proj.type == 438)
						{
							color32.G /= (byte)num152;
							color32.B /= (byte)num152;
						}
						else if (proj.type == 755)
						{
							color32 = proj.AI_156_GetColor();
						}
						else if (proj.type == 873)
						{
							color32 = proj.AI_171_GetColor();
							color32.A /= 2;
							color32 *= Utils.GetLerpValue(0f, 20f, (float)proj.timeLeft, true);
						}
						else if (proj.type == 931)
						{
							color32 = proj.GetFairyQueenWeaponsColor(0.5f, 0f, null);
							color32 *= Utils.GetLerpValue(0f, 20f, (float)proj.timeLeft, true);
						}
						else if (proj.type == 872)
						{
							color32 = proj.AI_173_GetColor();
							color32 *= 0.4f;
							color32.A = (byte)((float)color32.A * 0.6f);
							if (num152 > 80)
							{
								color32 *= 0.15f * Utils.GetLerpValue(120f, 80f, (float)num152, true);
							}
						}
						else if (proj.type == 864)
						{
							color32 = proj.GetFloatingDaggerMinionGlowColor();
							color32.A /= 4;
						}
						else if (proj.type == 682)
						{
							color32.G /= (byte)num152;
						}
						else if (proj.type == 686)
						{
							if (proj.oldPos[num152] == Vector2.Zero)
							{
								goto IL_2530;
							}
							float num153 = (float)num152 / (float)num149;
							color32 = ((num153 >= 0.5f) ? Color.Lerp(Color.Purple, Color.Black, Utils.GetLerpValue(0.5f, 1f, num153, false)) : Color.Lerp(color32, Color.Purple, Utils.GetLerpValue(0f, 0.5f, num153, false)));
						}
						else if (proj.type == 711)
						{
							if (proj.oldPos[num152] == Vector2.Zero)
							{
								goto IL_2530;
							}
							float num154 = (float)num152 / (float)num149;
							color32 = ((num154 >= 0.5f) ? Color.Lerp(new Color(128, 0, 255, 180), Color.Black, Utils.GetLerpValue(0.5f, 1f, num154, false)) : Color.Lerp(color32, new Color(128, 0, 255, 180), Utils.GetLerpValue(0f, 0.5f, num154, false)));
						}
						else if (proj.type == 684)
						{
							if (num152 == 1)
							{
								color32.B /= 2;
								color32.G /= 2;
								color32.A /= 2;
							}
							color32.B /= (byte)num152;
							color32.G /= (byte)num152;
							color32.A /= (byte)num152;
						}
						else if (proj.type == 706 || proj.type == 710)
						{
							color32.B /= (byte)num152;
							color32.G /= (byte)num152;
							color32.A /= (byte)num152;
						}
						else if (proj.type == 818)
						{
							float num155 = 0.3f;
							float num156 = Utils.GetLerpValue(0f, num155, proj.ai[0], true) * Utils.GetLerpValue(1f, 1f - num155, proj.ai[0], true);
							Utils.GetLerpValue(0f, (float)(num148 * -3), (float)num152, true);
							Utils.GetLerpValue((float)num149, (float)(num149 + num148 * 3), (float)num152, true);
							Color value14;
							value14..ctor(255, 255, 255, 0);
							Color ourFavoriteColor = Main.OurFavoriteColor;
							ourFavoriteColor.A = 0;
							ourFavoriteColor *= num156;
							color32 = Color.Lerp(ourFavoriteColor, value14, num156);
						}
						else if (proj.type == 833 || proj.type == 834 || proj.type == 835)
						{
							float lerpValue2 = Utils.GetLerpValue(0f, 6f, proj.velocity.Length(), true);
							color32 = Color.Lerp(color32, Color.White, lerpValue2 * 0.5f);
							color32.A = 0;
							color32 *= lerpValue2;
						}
						else if (proj.type == 592)
						{
							color32.R /= (byte)num152;
							color32.G /= (byte)num152;
						}
						else if (proj.type == 640)
						{
							color32.R /= (byte)num152;
							color32.A /= (byte)num152;
						}
						else if (proj.type >= 424 && proj.type <= 426)
						{
							color32.B /= (byte)num152;
							color32.G /= (byte)num152;
							color32.A /= (byte)num152;
						}
						else if (proj.type == 964 || proj.type == 965)
						{
							color32 = Color.Black * proj.Opacity;
						}
						float num157 = (float)(num147 - num152);
						if (num148 < 0)
						{
							num157 = (float)(num149 - num152);
						}
						color32 *= num157 / ((float)ProjectileID.Sets.TrailCacheLength[proj.type] * 1.5f);
						Vector2 vector29 = proj.oldPos[num152];
						float num158 = proj.rotation;
						SpriteEffects effects2 = dir;
						if (ProjectileID.Sets.TrailingMode[proj.type] == 2 || ProjectileID.Sets.TrailingMode[proj.type] == 3 || ProjectileID.Sets.TrailingMode[proj.type] == 4)
						{
							num158 = proj.oldRot[num152];
							effects2 = ((proj.oldSpriteDirection[num152] == -1) ? 1 : 0);
						}
						if (!(vector29 == Vector2.Zero))
						{
							if (proj.type == 916)
							{
								value13.Y += value13.Height;
								value13.Y %= value13.Height * Main.projFrames[proj.type];
								float num451 = num157 / ((float)ProjectileID.Sets.TrailCacheLength[proj.type] * 1.5f);
								Color color33;
								color33..ctor(0, 0, 0, 255);
								int num159 = unifiedRandom.Next(3);
								if (num159 == 2 || num159 == 1)
								{
									color33 = Color.Lerp(new Color(106, 90, 205, 127), Color.Black, 0.2f + 0.8f * unifiedRandom.NextFloat());
								}
								color32 = color33;
								float num160 = num157 / (float)ProjectileID.Sets.TrailCacheLength[proj.type];
								num160 = Utils.GetLerpValue(0f, (float)ProjectileID.Sets.TrailCacheLength[proj.type] * 0.75f, num157, true);
								color32 *= num160;
								vector29 += unifiedRandom.NextVector2Circular(8f, 8f);
							}
							if (proj.type == 976)
							{
								int num161 = value13.Height + 2;
								value13.Y += num161;
								value13.Y %= num161 * 7;
								Color color106 = color32;
								color107 = Lighting.GetColor((vector29 + zero + proj.Size / 2f).ToTileCoordinates());
								color32 = color106 * (color107.ToVector3().Length() / 1.74f);
							}
							if (proj.type == 933)
							{
								float t = proj.localAI[0] - (float)num152;
								float num162 = Utils.GetLerpValue(0f, 20f, t, true) * Utils.GetLerpValue(68f, 60f, t, true);
								float lerpValue3 = Utils.GetLerpValue(0f, (float)ProjectileID.Sets.TrailCacheLength[proj.type], num157, true);
								color32 = Color.White * lerpValue3 * proj.Opacity * num162;
							}
							Vector2 position3 = vector29 + zero + proj.Size / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
							Main.EntitySpriteDraw(value11, position3, new Rectangle?(value13), color32, num158 + num145 + proj.rotation * num151 * (float)(num152 - 1) * (float)(-(float)dir.HasFlag(1).ToDirectionInt()), origin6, MathHelper.Lerp(proj.scale, value12, (float)num152 / num150), effects2, 0f);
						}
					}
					IL_2530:
					num152 += num148;
				}
				if (proj.type == 661)
				{
					Color color34;
					color34..ctor(120, 40, 222, 120);
					for (int num163 = 0; num163 < 4; num163++)
					{
						Texture2D value108 = TextureAssets.Extra[75].Value;
						Vector2 vector116 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
						Vector2 spinningpoint12 = proj.rotation.ToRotationVector2();
						double radians = (double)(1.5707964f * (float)num163);
						Vector2 vector117 = default(Vector2);
						Main.EntitySpriteDraw(value108, vector116 + spinningpoint12.RotatedBy(radians, vector117) * 4f, new Rectangle?(rectangle4), color34, proj.rotation, origin6, proj.scale, dir, 0f);
					}
				}
				if (proj.type == 864)
				{
					Color floatingDaggerMinionGlowColor = proj.GetFloatingDaggerMinionGlowColor();
					floatingDaggerMinionGlowColor.A /= 4;
					Rectangle value15 = rectangle4;
					value15.Y += value15.Height;
					for (int num164 = 0; num164 < 4; num164++)
					{
						Texture2D texture = value11;
						Vector2 vector118 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
						Vector2 spinningpoint13 = proj.rotation.ToRotationVector2();
						double radians2 = (double)(1.5707964f * (float)num164);
						Vector2 vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture, vector118 + spinningpoint13.RotatedBy(radians2, vector117) * 2f, new Rectangle?(value15), floatingDaggerMinionGlowColor, proj.rotation, origin6, proj.scale, dir, 0f);
					}
				}
				if (proj.type == 873 || proj.type == 931)
				{
					Color color35 = proj.AI_171_GetColor() * 0.5f;
					color35.A = 0;
					if (proj.type == 931)
					{
						color35 = proj.GetFairyQueenWeaponsColor(0f, 0f, null);
					}
					Vector2 vector30 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
					Main.EntitySpriteDraw(value11, vector30, new Rectangle?(rectangle4), color35, proj.rotation, origin6, proj.scale * 0.9f, dir, 0f);
					Texture2D value109 = TextureAssets.Extra[98].Value;
					Color color36 = color35;
					Vector2 origin7 = value109.Size() / 2f;
					Color color37 = color35 * 0.5f;
					float num165 = Utils.GetLerpValue(15f, 30f, (float)proj.timeLeft, true) * Utils.GetLerpValue(240f, 200f, (float)proj.timeLeft, true) * (1f + 0.2f * (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly % 30f / 0.5f * 6.2831855f * 3f))) * 0.8f;
					Vector2 vector31 = new Vector2(0.5f, 5f) * num165;
					Vector2 vector32 = new Vector2(0.5f, 2f) * num165;
					color36 *= num165;
					color37 *= num165;
					int num166 = 0;
					Vector2 position4 = vector30 + proj.velocity.SafeNormalize(Vector2.Zero) * MathHelper.Lerp(0.5f, 1f, proj.localAI[0] / 60f) * (float)num166;
					if (proj.type == 931)
					{
						vector31 *= 0.4f;
						vector32 *= 0.4f;
					}
					Vector2 position27 = position4;
					Rectangle? sourceRectangle6 = null;
					Main.EntitySpriteDraw(value109, position27, sourceRectangle6, color36, 1.5707964f, origin7, vector31, dir, 0f);
					Vector2 position28 = position4;
					sourceRectangle6 = null;
					Main.EntitySpriteDraw(value109, position28, sourceRectangle6, color36, 0f, origin7, vector32, dir, 0f);
					Vector2 position29 = position4;
					sourceRectangle6 = null;
					Main.EntitySpriteDraw(value109, position29, sourceRectangle6, color37, 1.5707964f, origin7, vector31 * 0.6f, dir, 0f);
					Vector2 position30 = position4;
					sourceRectangle6 = null;
					Main.EntitySpriteDraw(value109, position30, sourceRectangle6, color37, 0f, origin7, vector32 * 0.6f, dir, 0f);
				}
				if (proj.type == 755)
				{
					Color color38 = proj.AI_156_GetColor();
					color38.A = 120;
					for (int num167 = 0; num167 < 4; num167++)
					{
						Texture2D texture2 = value11;
						Vector2 vector119 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
						Vector2 spinningpoint14 = proj.rotation.ToRotationVector2();
						double radians3 = (double)(1.5707964f * (float)num167);
						Vector2 vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture2, vector119 + spinningpoint14.RotatedBy(radians3, vector117) * 2f, new Rectangle?(rectangle4), color38, proj.rotation, origin6, proj.scale, dir, 0f);
					}
				}
				else if (proj.type == 684)
				{
					float x12 = (proj.localAI[0] * 6.2831855f / 30f).ToRotationVector2().X;
					Color color39;
					color39..ctor(220, 40, 30, 40);
					color39 *= 0.75f + 0.25f * x12;
					for (int num168 = 0; num168 < 8; num168++)
					{
						Texture2D texture3 = value11;
						Vector2 vector120 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
						Vector2 spinningpoint15 = proj.rotation.ToRotationVector2();
						double radians4 = (double)(0.7853982f * (float)num168);
						Vector2 vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture3, vector120 + spinningpoint15.RotatedBy(radians4, vector117) * (4f + 1f * x12), new Rectangle?(rectangle4), color39, proj.rotation, origin6, proj.scale, dir, 0f);
					}
				}
				else if (ProjectileID.Sets.IsAGolfBall[proj.type])
				{
					Player player2 = Main.player[proj.owner];
					bool flag27 = GolfHelper.IsPlayerHoldingClub(player2);
					bool flag28 = false;
					if (flag27)
					{
						flag28 |= (player2.ownedProjectileCounts[722] > 0 && player2.itemAnimation >= player2.itemAnimationMax);
						flag28 |= (player2.itemAnimation == 0);
						flag28 &= (player2.velocity.Y == 0f);
					}
					Vector2 shotVector = Main.MouseWorld - proj.Center;
					if (proj.owner == Main.myPlayer && flag27 && flag28 && GolfHelper.IsGolfBallResting(proj) && GolfHelper.ValidateShot(proj, player2, ref shotVector))
					{
						projectileColor = Color.White;
						Projectile projectile = null;
						for (int num169 = 0; num169 < 1000; num169++)
						{
							Projectile projectile2 = Main.projectile[num169];
							if (projectile2.active && projectile2.owner == player2.whoAmI && projectile2.type == 722)
							{
								projectile = projectile2;
								break;
							}
						}
						if (projectile != null)
						{
							GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(projectile, proj);
							Vector2 impactVelocity = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
							if (impactVelocity.Length() > 0.05f)
							{
								GolfHelper.DrawPredictionLine(proj, impactVelocity, shotStrength.RelativeStrength, shotStrength.RoughLandResistance);
							}
						}
					}
					if (!GolfHelper.IsGolfBallResting(proj))
					{
						Color golfTrailColor = Projectile.GetGolfTrailColor(proj);
						float num170 = proj.velocity.Length() / 16f;
						if (num170 > 1f)
						{
							num170 = 1f;
						}
						golfTrailColor *= num170;
						if (proj.oldPos[4] != Vector2.Zero)
						{
							projectileColor = Color.White;
							for (float num171 = 0f; num171 <= 1f; num171 += 0.04f)
							{
								Main.EntitySpriteDraw(value11, Vector2.Lerp(proj.oldPos[4], proj.position, num171) + proj.Size / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), golfTrailColor * num171, proj.rotation, origin6, proj.scale * MathHelper.Lerp(0.7f, 1.5f, num171), dir, 0f);
							}
						}
						Main.EntitySpriteDraw(value11, proj.position + proj.Size / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), golfTrailColor, proj.rotation, origin6, proj.scale * 1.5f, dir, 0f);
					}
				}
				if (proj.type == 964 || proj.type == 965)
				{
					Color color40 = Color.Violet;
					if (proj.type == 965)
					{
						color40 = Color.Lerp(Color.Red, Color.White, 0.5f);
					}
					Color color41 = color40 * 0.5f * proj.Opacity;
					float num172 = (float)((proj.type == 964) ? 60 : 30);
					for (int num173 = 0; num173 < 4; num173++)
					{
						Texture2D texture4 = value11;
						Vector2 vector121 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
						Vector2 spinningpoint16 = proj.rotation.ToRotationVector2();
						double radians5 = (double)(proj.ai[0] / num172 * 6.2831855f + 1.5707964f * (float)num173);
						Vector2 vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture4, vector121 + spinningpoint16.RotatedBy(radians5, vector117) * 6f, new Rectangle?(rectangle4), color41, proj.rotation, origin6, proj.scale, dir, 0f);
					}
				}
				Color color42 = proj.GetAlpha(projectileColor);
				float num174 = proj.scale;
				float rotation23 = proj.rotation + num145;
				if (proj.type == 640)
				{
					color42 = Color.Transparent;
				}
				if (proj.type == 684)
				{
					color42.A = 127;
				}
				if (proj.type == 873)
				{
					color42.A /= 2;
				}
				if (proj.type == 931)
				{
					color42.A /= 2;
				}
				if (proj.type == 872)
				{
					color42 = new Color(255, 255, 255, 0) * proj.Opacity;
					num174 *= 0.9f;
				}
				if (proj.type == 818)
				{
					color42 = Color.Transparent;
				}
				if (proj.type == 916)
				{
					color42 = Color.Black;
				}
				if (proj.type == 964 || proj.type == 965)
				{
					color42 = Color.Black * proj.Opacity;
				}
				if (proj.type == 933)
				{
					float t2 = proj.localAI[0];
					float num175 = Utils.GetLerpValue(0f, 20f, t2, true) * Utils.GetLerpValue(68f, 60f, t2, true);
					color42 *= num175;
				}
				Main.EntitySpriteDraw(value11, proj.Center + zero - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), color42, rotation23, origin6, num174, dir, 0f);
				if (proj.type == 894)
				{
					float num176 = Utils.WrappedLerp(0.6f, 1f, (float)((int)Main.timeForVisualEffects % 70) / 70f);
					color107..ctor(num176, num176, num176, 150f);
					Main.EntitySpriteDraw(TextureAssets.GlowMask[282].Value, proj.Center + zero - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), color107, proj.rotation, origin6, proj.scale, dir, 0f);
				}
				if (proj.type == 503)
				{
					Main.EntitySpriteDraw(TextureAssets.Extra[36].Value, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), Color.White, proj.localAI[0], origin6, proj.scale, dir, 0f);
				}
				else if (proj.type == 533)
				{
					Main.EntitySpriteDraw(TextureAssets.GlowMask[128].Value, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), Color.White * 0.3f, proj.rotation, origin6, proj.scale, dir, 0f);
				}
				else if (proj.type == 261)
				{
					float num177 = 0.7f;
					float num178 = proj.velocity.Length();
					if (num178 < 0.3f && proj.velocity.Y == 0f)
					{
						num177 = Utils.GetLerpValue(0.02f, 0.3f, num178, true) * 0.7f;
					}
					Main.EntitySpriteDraw(TextureAssets.GlowMask[252].Value, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), Color.White * num177, proj.rotation, origin6, proj.scale, dir, 0f);
				}
				else if (proj.type == 601)
				{
					Color white2 = Color.White;
					white2.A = 0;
					Main.EntitySpriteDraw(value11, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), white2, proj.rotation, origin6, proj.scale * 0.7f, dir, 0f);
				}
				else if (ProjectileID.Sets.IsAGolfBall[proj.type] && GolfHelper.IsGolfBallResting(proj) && GolfHelper.IsPlayerHoldingClub(Main.LocalPlayer) && GolfHelper.IsGolfShotValid(proj, Main.LocalPlayer) && proj.owner == Main.myPlayer)
				{
					Main.EntitySpriteDraw(TextureAssets.GolfBallOutline.Value, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), Color.White, proj.rotation, origin6, proj.scale, dir, 0f);
				}
				if (proj.type == 933)
				{
					float t3 = proj.localAI[0];
					float num179 = Utils.GetLerpValue(0f, 20f, t3, true) * Utils.GetLerpValue(68f, 60f, t3, true);
					Main.EntitySpriteDraw(value11, proj.Center + zero - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle4), new Color(255, 255, 255, 127) * proj.Opacity * num179, rotation23, origin6, num174 * 1.25f, dir, 0f);
					FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)proj.ai[1]);
					Color trailColor = finalFractalProfile.trailColor;
					trailColor.A /= 2;
					Main.DrawPrettyStarSparkle(proj.Opacity, dir, proj.Center + zero - Main.screenPosition + new Vector2(0f, proj.gfxOffY) + (proj.rotation - 1.5707964f).ToRotationVector2() * finalFractalProfile.trailWidth, Color.White * num179, trailColor * num179, proj.localAI[0], 15f, 30f, 30f, 45f, 0f, new Vector2(5f, 2f), Vector2.One);
					return;
				}
			}
			else if (proj.type == 672)
			{
				Vector2 position5 = proj.Center - Main.screenPosition;
				if (proj.localAI[1] == 0f)
				{
					position5.Y += 60f;
					float num180 = proj.localAI[0] / 120f;
					for (int num181 = 0; num181 < 4; num181++)
					{
						float value16 = num180 * 2f - (float)num181 / 3f;
						value16 = MathHelper.Clamp(value16, 0f, 1f);
						float num182 = 1f - MathHelper.Clamp((num180 - 0.8f) / 0.2f, 0f, 1f);
						Texture2D value110 = TextureAssets.MagicPixel.Value;
						Vector2 position31 = position5;
						Rectangle? sourceRectangle6 = null;
						Main.EntitySpriteDraw(value110, position31, sourceRectangle6, new Color(0.4f, 0.17f, 0.4f, 0f) * (value16 * num182) * 1.3f, 0f, new Vector2((float)TextureAssets.MagicPixel.Width() / 2f, (float)TextureAssets.MagicPixel.Height()), new Vector2((float)Math.Sqrt((double)value16) * 100f, value16 * 2f), 0, 0f);
					}
					return;
				}
				if (proj.localAI[1] == 1f)
				{
					float num452 = proj.localAI[0] / 300f;
					float num183 = Math.Min(1f, proj.localAI[0] / 30f);
					int num184 = (int)(Main.GlobalTimeWrappedHourly * 10f) % 8;
					this.DrawElderEye(Main.spriteBatch, proj.Center, 1f, 1f, num184, Color.White * num183);
					this.DrawElderEye(Main.spriteBatch, proj.Center, 1f, 1f, (num184 + 1) % 8, new Color(0.2f, 0.2f, 0.2f, 0f) * num183);
					return;
				}
				if (proj.localAI[1] == 2f)
				{
					int num185 = (int)(Main.GlobalTimeWrappedHourly * 10f) % 8;
					this.DrawElderEye(Main.spriteBatch, proj.Center, 1f, 1f, num185, Color.White);
					this.DrawElderEye(Main.spriteBatch, proj.Center, 1f, 1f, (num185 + 1) % 8, new Color(0.2f, 0.2f, 0.2f, 0f));
					return;
				}
			}
			else
			{
				if (proj.type == 713)
				{
					return;
				}
				if (proj.type == 754)
				{
					Texture2D value17 = TextureAssets.Projectile[proj.type].Value;
					Rectangle rectangle5 = value17.Frame(5, 2, proj.frame, 0, 0, 0);
					rectangle5.Width -= 2;
					rectangle5.Height -= 2;
					Vector2 origin8;
					origin8..ctor((float)(rectangle5.Width / 2), 0f);
					float y13 = proj.position.Y;
					float num186 = proj.ai[0] + 8f + 2f - (float)rectangle5.Height + 2f;
					Color alpha2 = proj.GetAlpha(projectileColor);
					Vector2 top = proj.Top;
					if (proj.ai[1] == 2f)
					{
						rectangle5 = value17.Frame(5, 2, 4, 0, 0, 0);
						rectangle5.Width -= 2;
						rectangle5.Height -= 2;
						origin8..ctor((float)(rectangle5.Width / 2), 0f);
						alpha2 = proj.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle5.Width / 2)) / 16, (int)((num186 - 2f + (float)(rectangle5.Height / 2)) / 16f)));
						Main.EntitySpriteDraw(value17, new Vector2(top.X, num186 - 2f) - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle5), alpha2, proj.rotation, origin8, proj.scale, dir, 0f);
						return;
					}
					for (float num187 = y13; num187 < num186; num187 += (float)rectangle5.Height)
					{
						Vector2 vector33 = top;
						vector33.Y = num187;
						Rectangle value18 = rectangle5;
						float num188 = num186 - num187;
						if (num188 < (float)value18.Height)
						{
							value18.Height = (int)num188;
						}
						alpha2 = proj.GetAlpha(Lighting.GetColor((int)(vector33.X + (float)(value18.Width / 2)) / 16, (int)((vector33.Y + (float)(value18.Height / 2)) / 16f)));
						Main.EntitySpriteDraw(value17, vector33 - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(value18), alpha2, proj.rotation, origin8, proj.scale, dir, 0f);
						if (rectangle5.Y == 0)
						{
							rectangle5.Y += rectangle5.Height + 2;
						}
					}
					rectangle5 = value17.Frame(5, 2, 4, 0, 0, 0);
					rectangle5.Width -= 2;
					rectangle5.Height -= 2;
					origin8..ctor((float)(rectangle5.Width / 2), 0f);
					alpha2 = proj.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle5.Width / 2)) / 16, (int)((num186 - 2f + (float)(rectangle5.Height / 2)) / 16f)));
					Main.EntitySpriteDraw(value17, new Vector2(top.X, num186 - 2f) - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle5), alpha2, proj.rotation, origin8, proj.scale, dir, 0f);
					return;
				}
				else
				{
					Vector2 vector117;
					if (proj.type == 12 || proj.type == 728 || proj.type == 955)
					{
						Texture2D value19 = TextureAssets.Projectile[proj.type].Value;
						Rectangle rectangle6;
						rectangle6..ctor(0, 0, value19.Width, value19.Height);
						Vector2 origin9 = rectangle6.Size() / 2f;
						Color alpha3 = proj.GetAlpha(projectileColor);
						Texture2D value20 = TextureAssets.Extra[91].Value;
						Rectangle value21 = value20.Frame(1, 1, 0, 0, 0, 0);
						Vector2 origin10;
						origin10..ctor((float)value21.Width / 2f, 10f);
						Vector2 vector34;
						vector34..ctor(0f, proj.gfxOffY);
						Vector2 spinningpoint;
						spinningpoint..ctor(0f, -10f);
						float num189 = (float)Main.timeForVisualEffects / 60f;
						Vector2 vector35 = proj.Center + proj.velocity;
						Color color43 = Color.Blue * 0.2f;
						Color color44 = Color.White * 0.5f;
						color44.A = 0;
						float num190 = 0f;
						if (Main.tenthAnniversaryWorld)
						{
							color43 = Color.HotPink * 0.3f;
							color44 = Color.White * 0.75f;
							color44.A = 0;
							num190 = -0.1f;
						}
						if (proj.type == 728)
						{
							color43 = Color.Orange * 0.2f;
							color44 = Color.Gold * 0.5f;
							color44.A = 50;
							num190 = -0.2f;
						}
						Color color45 = color43;
						color45.A = 0;
						Color color46 = color43;
						color46.A = 0;
						Color color47 = color43;
						color47.A = 0;
						Texture2D texture5 = value20;
						Vector2 vector122 = vector35 - Main.screenPosition + vector34;
						Vector2 spinningpoint17 = spinningpoint;
						double radians6 = (double)(6.2831855f * num189);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture5, vector122 + spinningpoint17.RotatedBy(radians6, vector117), new Rectangle?(value21), color45, proj.velocity.ToRotation() + 1.5707964f, origin10, 1.5f + num190, 0, 0f);
						Texture2D texture6 = value20;
						Vector2 vector123 = vector35 - Main.screenPosition + vector34;
						Vector2 spinningpoint18 = spinningpoint;
						double radians7 = (double)(6.2831855f * num189 + 2.0943952f);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture6, vector123 + spinningpoint18.RotatedBy(radians7, vector117), new Rectangle?(value21), color46, proj.velocity.ToRotation() + 1.5707964f, origin10, 1.1f + num190, 0, 0f);
						Texture2D texture7 = value20;
						Vector2 vector124 = vector35 - Main.screenPosition + vector34;
						Vector2 spinningpoint19 = spinningpoint;
						double radians8 = (double)(6.2831855f * num189 + 4.1887903f);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture7, vector124 + spinningpoint19.RotatedBy(radians8, vector117), new Rectangle?(value21), color47, proj.velocity.ToRotation() + 1.5707964f, origin10, 1.3f + num190, 0, 0f);
						Vector2 vector36 = proj.Center - proj.velocity * 0.5f;
						for (float num191 = 0f; num191 < 1f; num191 += 0.5f)
						{
							float num192 = num189 % 0.5f / 0.5f;
							num192 = (num192 + num191) % 1f;
							float num193 = num192 * 2f;
							if (num193 > 1f)
							{
								num193 = 2f - num193;
							}
							Main.EntitySpriteDraw(value20, vector36 - Main.screenPosition + vector34, new Rectangle?(value21), color44 * num193, proj.velocity.ToRotation() + 1.5707964f, origin10, 0.3f + num192 * 0.5f, 0, 0f);
						}
						Main.EntitySpriteDraw(value19, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle6), alpha3, proj.rotation, origin9, proj.scale + 0.1f, dir, 0f);
						return;
					}
					Color color107;
					if (proj.type == 756)
					{
						Texture2D value111 = TextureAssets.Projectile[proj.type].Value;
						Rectangle value22 = value111.Frame(1, 6, 0, proj.frame, 0, 0);
						Vector2 origin11;
						origin11..ctor(16f, (float)(value22.Height / 2));
						Color alpha4 = proj.GetAlpha(projectileColor);
						Vector2 scale2;
						scale2..ctor(proj.scale);
						float lerpValue4 = Utils.GetLerpValue(35f, 30f, proj.ai[0], true);
						scale2.Y *= lerpValue4;
						Vector4 vector37 = projectileColor.ToVector4();
						color107 = new Color(67, 17, 17);
						Vector4 vector38 = color107.ToVector4();
						vector38 *= vector37;
						Texture2D value112 = TextureAssets.Extra[98].Value;
						Vector2 position32 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY) - proj.velocity * proj.scale * 0.5f;
						Rectangle? sourceRectangle6 = null;
						Main.EntitySpriteDraw(value112, position32, sourceRectangle6, proj.GetAlpha(new Color(vector38.X, vector38.Y, vector38.Z, vector38.W)) * 1f, proj.rotation + 1.5707964f, TextureAssets.Extra[98].Value.Size() / 2f, proj.scale * 0.9f, dir, 0f);
						Main.EntitySpriteDraw(value111, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(value22), alpha4, proj.rotation, origin11, scale2, dir, 0f);
						return;
					}
					if (proj.type == 961)
					{
						Texture2D value23 = TextureAssets.Projectile[proj.type].Value;
						Rectangle value24 = value23.Frame(1, 5, 0, proj.frame, 0, 0);
						Vector2 origin12;
						origin12..ctor(16f, (float)(value24.Height / 2));
						Color alpha5 = proj.GetAlpha(projectileColor);
						Vector2 vector39;
						vector39..ctor(proj.scale);
						float lerpValue5 = Utils.GetLerpValue(30f, 25f, proj.ai[0], true);
						vector39.Y *= lerpValue5;
						Vector4 vector40 = projectileColor.ToVector4();
						color107 = new Color(67, 17, 17);
						Vector4 vector41 = color107.ToVector4();
						vector41 *= vector40;
						Texture2D value113 = TextureAssets.Extra[98].Value;
						Vector2 position33 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY) - proj.velocity * proj.scale * 0.5f;
						Rectangle? sourceRectangle6 = null;
						Main.EntitySpriteDraw(value113, position33, sourceRectangle6, proj.GetAlpha(new Color(vector41.X, vector41.Y, vector41.Z, vector41.W)) * 1f, proj.rotation + 1.5707964f, TextureAssets.Extra[98].Value.Size() / 2f, proj.scale * 0.9f, dir, 0f);
						Color color48 = proj.GetAlpha(Color.White) * Utils.Remap(proj.ai[0], 0f, 20f, 0.5f, 0f, true);
						color48.A = 0;
						for (int num194 = 0; num194 < 4; num194++)
						{
							Texture2D texture8 = value23;
							Vector2 vector125 = proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY);
							Vector2 spinningpoint20 = proj.rotation.ToRotationVector2();
							double radians9 = (double)(1.5707964f * (float)num194);
							vector117 = default(Vector2);
							Main.EntitySpriteDraw(texture8, vector125 + spinningpoint20.RotatedBy(radians9, vector117) * 2f * vector39, new Rectangle?(value24), color48, proj.rotation, origin12, vector39, dir, 0f);
						}
						Main.EntitySpriteDraw(value23, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(value24), alpha5, proj.rotation, origin12, vector39, dir, 0f);
						return;
					}
					if (proj.type == 723 || proj.type == 726 || proj.type == 725 || proj.type == 724 || proj.type == 9)
					{
						Texture2D value25 = TextureAssets.Projectile[proj.type].Value;
						Rectangle rectangle7;
						rectangle7..ctor(0, 0, value25.Width, value25.Height);
						Vector2 origin13 = rectangle7.Size() / 2f;
						Color color49 = proj.GetAlpha(projectileColor);
						Texture2D value26 = TextureAssets.Extra[91].Value;
						Rectangle value27 = value26.Frame(1, 1, 0, 0, 0, 0);
						Vector2 origin14;
						origin14..ctor((float)value27.Width / 2f, 10f);
						Color.White * 0.2f;
						Vector2 vector42;
						vector42..ctor(0f, proj.gfxOffY);
						Vector2 spinningpoint2;
						spinningpoint2..ctor(0f, -5f);
						float num195 = (float)Main.timeForVisualEffects / 60f;
						Vector2 vector43 = proj.Center + proj.velocity;
						float num196 = 1.5f;
						float num197 = 1.1f;
						float num198 = 1.3f;
						Color color50 = Color.Blue * 0.1f;
						Color color51 = Color.White * 0.3f;
						color51.A = 0;
						byte a = 0;
						float num199 = 1f;
						bool flag29 = true;
						float num200 = proj.scale + 0.1f;
						if (proj.type == 726)
						{
							Color color108 = new Color(180, 20, 255);
							color50 = color108 * 0.3f;
							color51 = color108 * 0.3f;
							a = 60;
							float num201 = 0.6f;
							num196 -= num201;
							num197 -= num201;
							num198 -= num201;
						}
						if (proj.type == 725)
						{
							Color color109 = new Color(255, 80, 255);
							Color value28;
							value28..ctor(255, 255, 0);
							color50 = Color.Lerp(color109, value28, 0.2f) * 0.3f;
							color51 = Color.Lerp(color109, value28, 0.8f) * 0.4f;
							a = 50;
							float num202 = 0.5f;
							num196 -= num202;
							num197 -= num202;
							num198 -= num202;
						}
						if (proj.type == 724)
						{
							Color.Lerp(Color.Black, Color.Orange, 0.75f);
							Color color52 = Color.Lerp(Color.Black, Color.Yellow, 0.5f);
							Color color110 = Color.Orange * 0.75f;
							color52 = Color.Yellow * 0.5f;
							color50 = Color.Lerp(color110, color52, 0.2f) * 0.3f;
							color51 = Color.Lerp(color110, color52, 0.8f) * 0.4f;
							a = 0;
							float num203 = 0.5f;
							num196 -= num203;
							num197 -= num203;
							num198 -= num203;
						}
						if (proj.type == 9)
						{
							num196 = 0.9f;
							num197 = 0f;
							num198 = 0f;
							flag29 = false;
							spinningpoint2 = Vector2.Zero;
							vector42 += proj.velocity.SafeNormalize(Vector2.Zero) * 8f;
							num199 *= 0.75f;
							vector43 -= proj.velocity;
							Color value29;
							value29..ctor(194, 22, 134);
							value29 *= 0.75f;
							value29.A /= 2;
							Color value30 = Color.Lerp(Color.Gold, Color.White, 0.5f);
							value30.A /= 4;
							value30 *= 0.85f;
							value30 *= 0.75f;
							Color gold = Color.Gold;
							gold.A = 180;
							Color value31;
							value31..ctor(194, 22, 134, 127);
							Color value32 = new Color(180, 20, 255) * 0.75f * 0.3f;
							Color value33 = new Color(255, 255, 255, 0) * 0.5f * 0.3f;
							float num204 = 0.5f;
							float num205 = proj.rotation * num204 % 6.2831855f;
							if (num205 < 0f)
							{
								num205 += 6.2831855f;
							}
							num205 /= 6.2831855f;
							float num206 = Utils.Remap(num205, 0.15f, 0.5f, 0f, 1f, true) * Utils.Remap(num205, 0.5f, 0.85f, 1f, 0f, true);
							num206 = 1f - num206;
							color49 = Color.Lerp(gold, value31, num206);
							color50 = Color.Lerp(value29, value32, num206);
							color51 = Color.Lerp(value30, value33, num206);
							num200 += num206 * 0.2f;
						}
						Color color53 = color50;
						Color color54 = color50;
						Color color55 = color50;
						if (flag29)
						{
							color53.A = a;
							color54.A = a;
							color55.A = a;
						}
						Texture2D texture9 = value26;
						Vector2 vector126 = vector43 - Main.screenPosition + vector42;
						Vector2 spinningpoint21 = spinningpoint2;
						double radians10 = (double)(6.2831855f * num195);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture9, vector126 + spinningpoint21.RotatedBy(radians10, vector117), new Rectangle?(value27), color53, proj.velocity.ToRotation() + 1.5707964f, origin14, num196, 0, 0f);
						Texture2D texture10 = value26;
						Vector2 vector127 = vector43 - Main.screenPosition + vector42;
						Vector2 spinningpoint22 = spinningpoint2;
						double radians11 = (double)(6.2831855f * num195 + 2.0943952f);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture10, vector127 + spinningpoint22.RotatedBy(radians11, vector117), new Rectangle?(value27), color54, proj.velocity.ToRotation() + 1.5707964f, origin14, num197, 0, 0f);
						Texture2D texture11 = value26;
						Vector2 vector128 = vector43 - Main.screenPosition + vector42;
						Vector2 spinningpoint23 = spinningpoint2;
						double radians12 = (double)(6.2831855f * num195 + 4.1887903f);
						vector117 = default(Vector2);
						Main.EntitySpriteDraw(texture11, vector128 + spinningpoint23.RotatedBy(radians12, vector117), new Rectangle?(value27), color55, proj.velocity.ToRotation() + 1.5707964f, origin14, num198, 0, 0f);
						Vector2 vector44 = proj.Center - proj.velocity * 0.5f;
						for (float num207 = 0f; num207 < 1f; num207 += 0.5f)
						{
							float num208 = num195 % 0.5f / 0.5f;
							num208 = (num208 + num207) % 1f;
							float num209 = num208 * 2f;
							if (num209 > 1f)
							{
								num209 = 2f - num209;
							}
							Main.EntitySpriteDraw(value26, vector44 - Main.screenPosition + vector42, new Rectangle?(value27), color51 * num209, proj.velocity.ToRotation() + 1.5707964f, origin14, (0.5f + num208 * 0.5f) * num199, 0, 0f);
						}
						Main.EntitySpriteDraw(value25, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(rectangle7), color49, proj.rotation, origin13, num200, dir, 0f);
						return;
					}
					if (proj.type == 674)
					{
						Texture2D value114 = TextureAssets.Extra[60].Value;
						Vector2 origin15;
						origin15..ctor(66f, 86f);
						Vector2 position6 = proj.Center - Main.screenPosition;
						Vector2 one = Vector2.One;
						one = new Vector2(4f, 1f) * 1.4f;
						Color color56;
						color56..ctor(115, 0, 155, 0);
						Color color57;
						color57..ctor(255, 180, 255, 0);
						float num210 = 0f;
						if (proj.ai[0] < 30f)
						{
							num210 = Utils.GetLerpValue(0f, 30f, proj.ai[0], true);
						}
						else if (proj.ai[0] < 40f)
						{
							num210 = 1f + Utils.GetLerpValue(30f, 40f, proj.ai[0], true);
						}
						Vector2 vector45;
						vector45..ctor(1f, 1f);
						Vector2 vector46;
						vector46..ctor(0.8f, 2f);
						if (num210 < 1f)
						{
							vector45.X *= num210;
						}
						one *= num210;
						if (num210 < 1f)
						{
							color56 *= num210;
							color57 *= num210;
						}
						if (num210 > 1.5f)
						{
							float lerpValue6 = Utils.GetLerpValue(2f, 1.5f, num210, true);
							color56 *= lerpValue6;
							color57 *= lerpValue6;
						}
						float num211 = 0.42f;
						color56 *= num211;
						color57 *= num211;
						Vector2 position34 = position6;
						Rectangle? sourceRectangle6 = null;
						Main.EntitySpriteDraw(value114, position34, sourceRectangle6, color56, 0f, origin15, one * vector45, 0, 0f);
						Vector2 position35 = position6;
						sourceRectangle6 = null;
						Main.EntitySpriteDraw(value114, position35, sourceRectangle6, color57, 0f, origin15, one * vector46, 0, 0f);
						Texture2D value115 = TextureAssets.Extra[59].Value;
						Vector2 position36 = position6;
						sourceRectangle6 = null;
						Main.EntitySpriteDraw(value115, position36, sourceRectangle6, color56, 0f, origin15, one * vector45 * new Vector2(1f, 0.3f), 0, 0f);
						return;
					}
					if (proj.type == 440 || proj.type == 449 || proj.type == 606)
					{
						Rectangle value34;
						value34..ctor((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 500, Main.screenWidth + 1000, Main.screenHeight + 1000);
						if (proj.getRect().Intersects(value34))
						{
							Vector2 vector47;
							vector47..ctor(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY);
							float num212 = 100f;
							float num213 = 3f;
							if (proj.type == 606)
							{
								num212 = 150f;
								num213 = 3f;
							}
							if (proj.ai[1] == 1f)
							{
								num212 = (float)((int)proj.localAI[0]);
							}
							for (int num214 = 1; num214 <= (int)proj.localAI[0]; num214++)
							{
								Vector2 vector48 = Vector2.Normalize(proj.velocity) * (float)num214 * num213;
								Color alpha6 = proj.GetAlpha(projectileColor);
								alpha6 *= (num212 - (float)num214) / num212;
								alpha6.A = 0;
								Texture2D value116 = TextureAssets.Projectile[proj.type].Value;
								Vector2 position37 = vector47 - vector48;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value116, position37, sourceRectangle6, alpha6, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
							}
						}
						return;
					}
					if (proj.type == 85)
					{
						Main.DrawProj_Flamethrower(proj);
						return;
					}
					if (proj.type == 687)
					{
						Vector2 center2 = proj.Center;
						center2 -= Main.screenPosition;
						float num215 = 40f;
						float num216 = num215 * 2f;
						float num217 = (float)proj.frameCounter / num215;
						Texture2D value35 = TextureAssets.Projectile[proj.type].Value;
						Color transparent = Color.Transparent;
						Color color58;
						color58..ctor(255, 255, 255, 0);
						Color color59;
						color59..ctor(180, 30, 30, 200);
						Color color60;
						color60..ctor(0, 0, 0, 30);
						ulong seed = 1UL;
						for (float num218 = 0f; num218 < 15f; num218 += 1f)
						{
							float num219 = Utils.RandomFloat(ref seed) * 0.25f - 0.125f;
							Vector2 vector49 = (proj.rotation + num219).ToRotationVector2();
							Vector2 value36 = center2 + vector49 * 400f;
							float num220 = num217 + num218 * 0.06666667f;
							int num221 = (int)(num220 / 0.06666667f);
							num220 %= 1f;
							if ((num220 <= num217 % 1f || (float)proj.frameCounter >= num215) && (num220 >= num217 % 1f || (float)proj.frameCounter < num216 - num215))
							{
								transparent = ((num220 < 0.1f) ? Color.Lerp(Color.Transparent, color58, Utils.GetLerpValue(0f, 0.1f, num220, true)) : ((num220 < 0.35f) ? color58 : ((num220 < 0.7f) ? Color.Lerp(color58, color59, Utils.GetLerpValue(0.35f, 0.7f, num220, true)) : ((num220 < 0.9f) ? Color.Lerp(color59, color60, Utils.GetLerpValue(0.7f, 0.9f, num220, true)) : ((num220 >= 1f) ? Color.Transparent : Color.Lerp(color60, Color.Transparent, Utils.GetLerpValue(0.9f, 1f, num220, true)))))));
								float num222 = 0.9f + num220 * 0.8f;
								num222 *= num222;
								num222 *= 0.8f;
								Vector2 position7 = Vector2.SmoothStep(center2, value36, num220);
								Rectangle rectangle8 = value35.Frame(1, 7, 0, (int)(num220 * 7f), 0, 0);
								Main.EntitySpriteDraw(value35, position7, new Rectangle?(rectangle8), transparent, proj.rotation + 6.2831855f * (num220 + Main.GlobalTimeWrappedHourly * 1.2f) * 0.2f + (float)num221 * 1.2566371f, rectangle8.Size() / 2f, num222, 0, 0f);
							}
						}
						return;
					}
					if (proj.type == 651)
					{
						if (proj.owner != Main.myPlayer)
						{
							return;
						}
						Player player3 = Main.player[proj.owner];
						Point point = new Vector2(proj.ai[0], proj.ai[1]).ToPoint();
						Point point2 = proj.Center.ToTileCoordinates();
						Color color61;
						color61..ctor(255, 255, 255, 0);
						Color color62;
						color62..ctor(127, 127, 127, 0);
						int num223 = 1;
						float num224 = 0f;
						WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
						bool flag30 = toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator);
						if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Red))
						{
							num224 += 1f;
							color62 = Color.Lerp(color62, Color.Red, 1f / num224);
						}
						if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue))
						{
							num224 += 1f;
							color62 = Color.Lerp(color62, Color.Blue, 1f / num224);
						}
						if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green))
						{
							num224 += 1f;
							color62 = Color.Lerp(color62, new Color(0, 255, 0), 1f / num224);
						}
						if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow))
						{
							num224 += 1f;
							color62 = Color.Lerp(color62, new Color(255, 255, 0), 1f / num224);
						}
						if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
						{
							color61..ctor(50, 50, 50, 255);
						}
						color62.A = 0;
						if (point == point2)
						{
							Vector2 position8 = point2.ToVector2() * 16f - Main.screenPosition;
							Rectangle value37;
							value37..ctor(0, 0, 16, 16);
							if (flag30)
							{
								Texture2D value117 = TextureAssets.WireUi[11].Value;
								Vector2 position38 = position8;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value117, position38, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position8, new Rectangle?(value37), color62, 0f, Vector2.Zero, 1f, 0, 0f);
							value37.Y = 18;
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position8, new Rectangle?(value37), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							return;
						}
						if (point.X == point2.X)
						{
							int num225 = point2.Y - point.Y;
							int num226 = Math.Sign(num225);
							Vector2 position9 = point.ToVector2() * 16f - Main.screenPosition;
							Rectangle value38;
							value38..ctor((num225 * num223 > 0) ? 72 : 18, 0, 16, 16);
							if (flag30)
							{
								Texture2D value118 = TextureAssets.WireUi[11].Value;
								Vector2 position39 = position9;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value118, position39, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color62, 0f, Vector2.Zero, 1f, 0, 0f);
							value38.Y = 18;
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							for (int num227 = point.Y + num226; num227 != point2.Y; num227 += num226)
							{
								position9 = new Vector2((float)(point.X * 16), (float)(num227 * 16)) - Main.screenPosition;
								value38.Y = 0;
								value38.X = 90;
								if (flag30)
								{
									Texture2D value119 = TextureAssets.WireUi[11].Value;
									Vector2 position40 = position9;
									Rectangle? sourceRectangle6 = null;
									Main.EntitySpriteDraw(value119, position40, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
								}
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color62, 0f, Vector2.Zero, 1f, 0, 0f);
								value38.Y = 18;
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							position9 = point2.ToVector2() * 16f - Main.screenPosition;
							value38..ctor((num225 * num223 > 0) ? 18 : 72, 0, 16, 16);
							if (flag30)
							{
								Texture2D value120 = TextureAssets.WireUi[11].Value;
								Vector2 position41 = position9;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value120, position41, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color62, 0f, Vector2.Zero, 1f, 0, 0f);
							value38.Y = 18;
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position9, new Rectangle?(value38), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							return;
						}
						if (point.Y == point2.Y)
						{
							int num228 = point2.X - point.X;
							int num229 = Math.Sign(num228);
							Vector2 position10 = point.ToVector2() * 16f - Main.screenPosition;
							Rectangle value39;
							value39..ctor((num228 > 0) ? 36 : 144, 0, 16, 16);
							if (flag30)
							{
								Texture2D value121 = TextureAssets.WireUi[11].Value;
								Vector2 position42 = position10;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value121, position42, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color62, 0f, Vector2.Zero, 1f, 0, 0f);
							value39.Y = 18;
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							for (int num230 = point.X + num229; num230 != point2.X; num230 += num229)
							{
								position10 = new Vector2((float)(num230 * 16), (float)(point.Y * 16)) - Main.screenPosition;
								value39.Y = 0;
								value39.X = 180;
								if (flag30)
								{
									Texture2D value122 = TextureAssets.WireUi[11].Value;
									Vector2 position43 = position10;
									Rectangle? sourceRectangle6 = null;
									Main.EntitySpriteDraw(value122, position43, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
								}
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color62, 0f, Vector2.Zero, 1f, 0, 0f);
								value39.Y = 18;
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							position10 = point2.ToVector2() * 16f - Main.screenPosition;
							value39..ctor((num228 > 0) ? 144 : 36, 0, 16, 16);
							if (flag30)
							{
								Texture2D value123 = TextureAssets.WireUi[11].Value;
								Vector2 position44 = position10;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(value123, position44, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color62, 0f, Vector2.Zero, 1f, 0, 0f);
							value39.Y = 18;
							Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, new Rectangle?(value39), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							return;
						}
						Math.Abs(point.X - point2.X);
						Math.Abs(point.Y - point2.Y);
						int num231 = Math.Sign(point2.X - point.X);
						int num232 = Math.Sign(point2.Y - point.Y);
						Point p = default(Point);
						bool flag31 = false;
						bool flag32 = player3.direction == 1;
						int num233;
						int num234;
						int num235;
						if (flag32)
						{
							p.X = point.X;
							num233 = point.Y;
							num234 = point2.Y;
							num235 = num232;
						}
						else
						{
							p.Y = point.Y;
							num233 = point.X;
							num234 = point2.X;
							num235 = num231;
						}
						Vector2 position11 = point.ToVector2() * 16f - Main.screenPosition;
						Rectangle value40;
						value40..ctor(0, 0, 16, 16);
						if (!flag32)
						{
							value40.X = ((num235 > 0) ? 36 : 144);
						}
						else
						{
							value40.X = ((num235 > 0) ? 72 : 18);
						}
						if (flag30)
						{
							Texture2D value124 = TextureAssets.WireUi[11].Value;
							Vector2 position45 = position11;
							Rectangle? sourceRectangle6 = null;
							Main.EntitySpriteDraw(value124, position45, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
						}
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color62, 0f, Vector2.Zero, 1f, 0, 0f);
						value40.Y = 18;
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color61, 0f, Vector2.Zero, 1f, 0, 0f);
						int num236 = num233 + num235;
						while (num236 != num234 && !flag31)
						{
							if (flag32)
							{
								p.Y = num236;
							}
							else
							{
								p.X = num236;
							}
							if (WorldGen.InWorld(p.X, p.Y, 1) && Main.tile[p.X, p.Y] != null)
							{
								position11 = p.ToVector2() * 16f - Main.screenPosition;
								value40.Y = 0;
								if (!flag32)
								{
									value40.X = 180;
								}
								else
								{
									value40.X = 90;
								}
								if (flag30)
								{
									Texture2D value125 = TextureAssets.WireUi[11].Value;
									Vector2 position46 = position11;
									Rectangle? sourceRectangle6 = null;
									Main.EntitySpriteDraw(value125, position46, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
								}
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color62, 0f, Vector2.Zero, 1f, 0, 0f);
								value40.Y = 18;
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							num236 += num235;
						}
						if (flag32)
						{
							p.Y = point2.Y;
							num233 = point.X;
							num234 = point2.X;
							num235 = num231;
						}
						else
						{
							p.X = point2.X;
							num233 = point.Y;
							num234 = point2.Y;
							num235 = num232;
						}
						position11 = p.ToVector2() * 16f - Main.screenPosition;
						value40..ctor(0, 0, 16, 16);
						if (!flag32)
						{
							value40.X += ((num231 > 0) ? 144 : 36);
							value40.X += ((num232 * num223 > 0) ? 72 : 18);
						}
						else
						{
							value40.X += ((num231 > 0) ? 36 : 144);
							value40.X += ((num232 * num223 > 0) ? 18 : 72);
						}
						if (flag30)
						{
							Texture2D value126 = TextureAssets.WireUi[11].Value;
							Vector2 position47 = position11;
							Rectangle? sourceRectangle6 = null;
							Main.EntitySpriteDraw(value126, position47, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
						}
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color62, 0f, Vector2.Zero, 1f, 0, 0f);
						value40.Y = 18;
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color61, 0f, Vector2.Zero, 1f, 0, 0f);
						int num237 = num233 + num235;
						while (num237 != num234 && !flag31)
						{
							if (!flag32)
							{
								p.Y = num237;
							}
							else
							{
								p.X = num237;
							}
							if (WorldGen.InWorld(p.X, p.Y, 1) && Main.tile[p.X, p.Y] != null)
							{
								position11 = p.ToVector2() * 16f - Main.screenPosition;
								value40.Y = 0;
								if (!flag32)
								{
									value40.X = 90;
								}
								else
								{
									value40.X = 180;
								}
								if (flag30)
								{
									Texture2D value127 = TextureAssets.WireUi[11].Value;
									Vector2 position48 = position11;
									Rectangle? sourceRectangle6 = null;
									Main.EntitySpriteDraw(value127, position48, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
								}
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color62, 0f, Vector2.Zero, 1f, 0, 0f);
								value40.Y = 18;
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color61, 0f, Vector2.Zero, 1f, 0, 0f);
							}
							num237 += num235;
						}
						position11 = point2.ToVector2() * 16f - Main.screenPosition;
						value40..ctor(0, 0, 16, 16);
						if (!flag32)
						{
							value40.X += ((num232 * num223 > 0) ? 18 : 72);
						}
						else
						{
							value40.X += ((num231 > 0) ? 144 : 36);
						}
						if (flag30)
						{
							Texture2D value128 = TextureAssets.WireUi[11].Value;
							Vector2 position49 = position11;
							Rectangle? sourceRectangle6 = null;
							Main.EntitySpriteDraw(value128, position49, sourceRectangle6, color61, 0f, Vector2.Zero, 1f, 0, 0f);
						}
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color62, 0f, Vector2.Zero, 1f, 0, 0f);
						value40.Y = 18;
						Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, new Rectangle?(value40), color61, 0f, Vector2.Zero, 1f, 0, 0f);
						return;
					}
					else
					{
						if (proj.type == 586)
						{
							float num238 = 300f;
							if (proj.ai[0] >= 100f)
							{
								num238 = MathHelper.Lerp(300f, 600f, (proj.ai[0] - 100f) / 200f);
							}
							if (num238 > 600f)
							{
								num238 = 600f;
							}
							if (proj.ai[0] >= 500f)
							{
								num238 = MathHelper.Lerp(600f, 1200f, (proj.ai[0] - 500f) / 100f);
							}
							float rotation24 = proj.rotation;
							Texture2D value41 = TextureAssets.Projectile[proj.type].Value;
							int num239 = (int)(proj.ai[0] / 6f);
							Vector2 spinningpoint3;
							spinningpoint3..ctor(0f, 0f - num238);
							int num240 = 0;
							while ((float)num240 < 10f)
							{
								Rectangle rectangle9 = value41.Frame(1, 5, 0, (num239 + num240) % 5, 0, 0);
								float num241 = rotation24 + 0.62831855f * (float)num240;
								Vector2 spinningpoint24 = spinningpoint3;
								double radians13 = (double)num241;
								vector117 = default(Vector2);
								Vector2 vector50 = spinningpoint24.RotatedBy(radians13, vector117) / 3f + proj.Center;
								Color alpha7 = proj.GetAlpha(Lighting.GetColor(vector50.ToTileCoordinates()));
								alpha7.A /= 2;
								Main.EntitySpriteDraw(value41, vector50 - Main.screenPosition, new Rectangle?(rectangle9), alpha7, num241, rectangle9.Size() / 2f, proj.scale, 0, 0f);
								num240++;
							}
							int num242 = 0;
							while ((float)num242 < 20f)
							{
								Rectangle rectangle10 = value41.Frame(1, 5, 0, (num239 + num242) % 5, 0, 0);
								float num243 = 0f - rotation24 + 0.31415927f * (float)num242;
								num243 *= 2f;
								Vector2 spinningpoint25 = spinningpoint3;
								double radians14 = (double)num243;
								vector117 = default(Vector2);
								Vector2 vector51 = spinningpoint25.RotatedBy(radians14, vector117) + proj.Center;
								Color alpha8 = proj.GetAlpha(Lighting.GetColor(vector51.ToTileCoordinates()));
								alpha8.A /= 2;
								Main.EntitySpriteDraw(value41, vector51 - Main.screenPosition, new Rectangle?(rectangle10), alpha8, num243, rectangle10.Size() / 2f, proj.scale, 0, 0f);
								num242++;
							}
							return;
						}
						if (proj.type == 536 || proj.type == 607)
						{
							Texture2D value42 = TextureAssets.Projectile[proj.type].Value;
							Vector2 position12 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
							vector117..ctor(1f, proj.velocity.Length() / (float)value42.Height);
							Texture2D texture12 = value42;
							Vector2 position50 = position12;
							Rectangle? sourceRectangle6 = null;
							Main.EntitySpriteDraw(texture12, position50, sourceRectangle6, proj.GetAlpha(projectileColor), proj.rotation, value42.Frame(1, 1, 0, 0, 0, 0).Bottom(), vector117, dir, 0f);
							return;
						}
						if (proj.type == 591)
						{
							Texture2D value43 = TextureAssets.Projectile[proj.type].Value;
							Vector2 position13 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
							Vector2 scale3;
							scale3..ctor(1f, proj.velocity.Length() / (float)value43.Height);
							this.LoadNPC(139);
							Texture2D value44 = TextureAssets.Npc[139].Value;
							bool flag38 = proj.velocity.X >= 0f;
							float rotation25 = proj.velocity.ToRotation() + 3.1415927f;
							SpriteEffects effects3 = flag38 ? 2 : 0;
							float fromValue = 1f - proj.Opacity;
							float num244 = Utils.Remap(fromValue, 0f, 0.2f, 0f, 1f, true) * Utils.Remap(fromValue, 0.2f, 1f, 1f, 0f, true);
							Texture2D texture13 = value44;
							Vector2 position51 = position13;
							Rectangle? sourceRectangle6 = null;
							Main.EntitySpriteDraw(texture13, position51, sourceRectangle6, projectileColor * num244, rotation25, value44.Size() / 2f, 0.65f, effects3, 0f);
							Color color63 = new Color(255, 189, 163, 127) * num244;
							Color color64 = new Color(255, 21, 21, 127) * num244;
							Rectangle rectangle11 = value43.Frame(2, 1, 0, 0, 0, 0);
							Vector2 origin16 = rectangle11.Bottom();
							Main.EntitySpriteDraw(value43, position13, new Rectangle?(rectangle11), color63, proj.rotation, origin16, scale3, dir, 0f);
							rectangle11 = value43.Frame(2, 1, 1, 0, 0, 0);
							Main.EntitySpriteDraw(value43, position13, new Rectangle?(rectangle11), color64, proj.rotation, origin16, scale3, dir, 0f);
							return;
						}
						if (proj.type == 688 || proj.type == 689 || proj.type == 690)
						{
							Texture2D value45 = TextureAssets.Projectile[proj.type].Value;
							Vector2 position14 = proj.Top + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
							Rectangle rectangle12 = value45.Frame(1, Main.projFrames[proj.type], 0, proj.frame, 0, 0);
							Vector2 origin17 = rectangle12.Size() * new Vector2(0.5f, 0f);
							Color color65 = Color.Lerp(proj.GetAlpha(projectileColor), Color.White, 0.5f);
							Color color66 = color65;
							color66.A = 127;
							Texture2D texture2D2 = null;
							Texture2D texture2D3 = null;
							switch (proj.type)
							{
							case 688:
								texture2D2 = TextureAssets.GlowMask[228].Value;
								texture2D3 = TextureAssets.Extra[86].Value;
								break;
							case 689:
								texture2D2 = TextureAssets.GlowMask[229].Value;
								texture2D3 = TextureAssets.Extra[87].Value;
								break;
							case 690:
								texture2D2 = TextureAssets.GlowMask[230].Value;
								texture2D3 = TextureAssets.Extra[88].Value;
								break;
							}
							Main.EntitySpriteDraw(value45, position14, new Rectangle?(rectangle12), color65, proj.rotation, origin17, proj.scale, dir, 0f);
							if (texture2D2 != null)
							{
								Main.EntitySpriteDraw(texture2D2, position14, new Rectangle?(rectangle12), color66, proj.rotation, origin17, proj.scale, dir, 0f);
							}
							if (texture2D3 != null)
							{
								Vector2 position15 = proj.Center + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
								rectangle12 = texture2D3.Frame(1, 1, 0, 0, 0, 0);
								origin17 = rectangle12.Size() * new Vector2(0.5f, 1f);
								origin17.Y -= 2f;
								Main.EntitySpriteDraw(texture2D3, position15, new Rectangle?(rectangle12), color65, proj.rotation, origin17, proj.scale, dir, 0f);
							}
							return;
						}
						if (proj.type == 694 || proj.type == 695 || proj.type == 696)
						{
							Texture2D value129 = TextureAssets.Projectile[proj.type].Value;
							Vector2 position16 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
							Rectangle rectangle13 = value129.Frame(1, Main.projFrames[proj.type], 0, proj.frame, 0, 0);
							Vector2 origin18 = rectangle13.Size() * new Vector2(0.5f, 1f);
							origin18.Y -= 8f;
							if (proj.type - 694 <= 1)
							{
								origin18.X += 3f;
							}
							Color color67 = Color.Lerp(proj.GetAlpha(projectileColor), Color.White, 0f);
							Main.EntitySpriteDraw(value129, position16, new Rectangle?(rectangle13), color67, proj.rotation, origin18, proj.scale, dir, 0f);
							Main.EntitySpriteDraw(value129, position16, new Rectangle?(rectangle13), color67 * 0.3f, proj.rotation, origin18, proj.scale * 1.1f, dir, 0f);
							return;
						}
						if (proj.type == 409)
						{
							Texture2D value46 = TextureAssets.Projectile[proj.type].Value;
							int num245 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
							int y14 = num245 * proj.frame;
							int num246 = 10;
							int num247 = 2;
							float value47 = 0.5f;
							for (int num248 = 1; num248 < num246; num248 += num247)
							{
								Vector2[] oldPos = proj.oldPos;
								Color newColor = projectileColor;
								newColor = proj.GetAlpha(newColor);
								newColor *= (float)(num246 - num248) / 15f;
								proj.oldPos[num248] - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
								Main.EntitySpriteDraw(value46, proj.oldPos[num248] + new Vector2((float)proj.width, (float)proj.height) / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y14, value46.Width, num245)), newColor, proj.rotation, new Vector2((float)value46.Width / 2f, (float)num245 / 2f), MathHelper.Lerp(proj.scale, value47, (float)num248 / 15f), dir, 0f);
							}
							Main.EntitySpriteDraw(value46, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y14, value46.Width, num245)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value46.Width / 2f, (float)num245 / 2f), proj.scale, dir, 0f);
							return;
						}
						if (proj.type == 437)
						{
							Texture2D value48 = TextureAssets.Projectile[proj.type].Value;
							int num249 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
							int y15 = num249 * proj.frame;
							int num250 = 10;
							int num251 = 2;
							float value49 = 0.2f;
							for (int num252 = 1; num252 < num250; num252 += num251)
							{
								Vector2[] oldPos2 = proj.oldPos;
								Color newColor2 = projectileColor;
								newColor2 = proj.GetAlpha(newColor2);
								newColor2 *= (float)(num250 - num252) / 15f;
								proj.oldPos[num252] - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
								Main.EntitySpriteDraw(value48, proj.oldPos[num252] + new Vector2((float)proj.width, (float)proj.height) / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y15, value48.Width, num249)), newColor2, proj.rotation, new Vector2((float)value48.Width / 2f, (float)num249 / 2f), MathHelper.Lerp(proj.scale, value49, (float)num252 / 15f), dir, 0f);
							}
							Main.EntitySpriteDraw(value48, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y15, value48.Width, num249)), Color.White, proj.rotation, new Vector2((float)value48.Width / 2f, (float)num249 / 2f), proj.scale + 0.2f, dir, 0f);
							Main.EntitySpriteDraw(value48, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y15, value48.Width, num249)), proj.GetAlpha(Color.White), proj.rotation, new Vector2((float)value48.Width / 2f, (float)num249 / 2f), proj.scale + 0.2f, dir, 0f);
							return;
						}
						if (proj.type == 384 || proj.type == 386)
						{
							Texture2D value50 = TextureAssets.Projectile[proj.type].Value;
							int num253 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
							int y16 = num253 * proj.frame;
							Main.EntitySpriteDraw(value50, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y16, value50.Width, num253)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value50.Width / 2f, (float)num253 / 2f), proj.scale, dir, 0f);
							return;
						}
						if (proj.type == 439 || proj.type == 460 || proj.type == 600 || proj.type == 615 || proj.type == 630 || proj.type == 633 || proj.type == 705 || proj.type == 714)
						{
							Texture2D value51 = TextureAssets.Projectile[proj.type].Value;
							if (Main.player[proj.owner].gravDir == -1f)
							{
								if (proj.type == 705)
								{
									dir |= 2;
								}
								if (proj.type == 615 || proj.type == 714)
								{
									if (Main.player[proj.owner].direction == 1)
									{
										dir = 2;
									}
									else if (Main.player[proj.owner].direction == -1)
									{
										dir = 3;
									}
								}
								else if (proj.type == 600 || proj.type == 439)
								{
									if (Main.player[proj.owner].direction == 1)
									{
										dir = 1;
									}
									else if (Main.player[proj.owner].direction == -1)
									{
										dir = 0;
									}
								}
							}
							int num254 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
							int y17 = num254 * proj.frame;
							Vector2 vector52 = (proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition).Floor();
							float num255 = 1f;
							if (Main.player[proj.owner].shroomiteStealth && Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].ranged)
							{
								float num256 = Main.player[proj.owner].stealth;
								if ((double)num256 < 0.03)
								{
									num256 = 0.03f;
								}
								float num453 = (1f + num256 * 10f) / 11f;
								projectileColor *= num256;
								num255 = num256;
							}
							if (Main.player[proj.owner].setVortex && Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].ranged)
							{
								float num257 = Main.player[proj.owner].stealth;
								if ((double)num257 < 0.03)
								{
									num257 = 0.03f;
								}
								float num454 = (1f + num257 * 10f) / 11f;
								projectileColor = projectileColor.MultiplyRGBA(new Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num257)));
								num255 = num257;
							}
							if (proj.type == 714)
							{
								y17 = 0;
								Main.instance.LoadItem(3930);
								value51 = TextureAssets.Item[3930].Value;
							}
							Main.EntitySpriteDraw(value51, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
							if (proj.type == 439)
							{
								Main.EntitySpriteDraw(TextureAssets.GlowMask[35].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), new Color(255, 255, 255, 0) * num255, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
								return;
							}
							if (proj.type == 714)
							{
								y17 = num254 * proj.frame;
								Color color68 = Main.hslToRgb(proj.ai[0] / 90f % 1f, 1f, 0.5f, byte.MaxValue);
								color68.A = 120;
								Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), color68 * num255, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
								return;
							}
							if (proj.type == 615)
							{
								Main.EntitySpriteDraw(TextureAssets.GlowMask[192].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
								return;
							}
							if (proj.type == 630)
							{
								Main.EntitySpriteDraw(TextureAssets.GlowMask[200].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
								if (proj.localAI[0] > 0f)
								{
									int frameY = 6 - (int)(proj.localAI[0] / 1f);
									value51 = TextureAssets.Extra[65].Value;
									Main.EntitySpriteDraw(value51, vector52 + Vector2.Normalize(proj.velocity) * 2f, new Rectangle?(value51.Frame(1, 6, 0, frameY, 0, 0)), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)(dir.HasFlag(1) ? value51.Width : 0), (float)num254 / 2f - 2f), proj.scale, dir, 0f);
									return;
								}
							}
							else
							{
								if (proj.type == 600)
								{
									Color portalColor = PortalHelper.GetPortalColor(proj.owner, (int)proj.ai[1]);
									portalColor.A = 70;
									Main.EntitySpriteDraw(TextureAssets.GlowMask[173].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), portalColor, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
									return;
								}
								if (proj.type == 460)
								{
									if (Math.Abs(proj.rotation - 1.5707964f) > 1.5707964f)
									{
										dir |= 2;
									}
									Main.EntitySpriteDraw(TextureAssets.GlowMask[102].Value, vector52, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), new Color(255, 255, 255, 0), proj.rotation - 1.5707964f, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
									if (proj.ai[0] > 180f && Main.projectile[(int)proj.ai[1]].type == 461)
									{
										this.DrawProj((int)proj.ai[1]);
										return;
									}
								}
								else if (proj.type == 633)
								{
									float num258 = (float)Math.Cos((double)(6.2831855f * (proj.ai[0] / 30f))) * 2f + 2f;
									if (proj.ai[0] > 120f)
									{
										num258 = 4f;
									}
									for (float num259 = 0f; num259 < 4f; num259 += 1f)
									{
										Texture2D texture14 = value51;
										Vector2 vector129 = vector52;
										Vector2 unitY = Vector2.UnitY;
										double radians15 = (double)(num259 * 6.2831855f / 4f);
										vector117 = default(Vector2);
										Main.EntitySpriteDraw(texture14, vector129 + unitY.RotatedBy(radians15, vector117) * num258, new Rectangle?(new Rectangle(0, y17, value51.Width, num254)), proj.GetAlpha(projectileColor).MultiplyRGBA(new Color(255, 255, 255, 0)) * 0.03f, proj.rotation, new Vector2((float)value51.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
									}
								}
							}
							return;
						}
						else
						{
							if (proj.type == 442)
							{
								Texture2D value52 = TextureAssets.Projectile[proj.type].Value;
								int num260 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
								int y18 = num260 * proj.frame;
								Vector2 position17 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
								Main.EntitySpriteDraw(value52, position17, new Rectangle?(new Rectangle(0, y18, value52.Width, num260)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value52.Width / 2f, (float)num260 / 2f), proj.scale, dir, 0f);
								Main.EntitySpriteDraw(TextureAssets.GlowMask[37].Value, position17, new Rectangle?(new Rectangle(0, y18, value52.Width, num260)), new Color(255, 255, 255, 0) * (1f - (float)proj.alpha / 255f), proj.rotation, new Vector2((float)value52.Width / 2f, (float)num260 / 2f), proj.scale, dir, 0f);
								return;
							}
							if (proj.type == 447)
							{
								Texture2D value53 = TextureAssets.Projectile[proj.type].Value;
								Texture2D value54 = TextureAssets.Extra[4].Value;
								int num261 = value53.Height / Main.projFrames[proj.type];
								int y19 = num261 * proj.frame;
								int num262 = value54.Height / Main.projFrames[proj.type];
								int num263 = num262 * proj.frame;
								Rectangle value55;
								value55..ctor(0, num263, value54.Width, num262);
								Vector2 vector53 = proj.position + new Vector2((float)proj.width, 0f) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
								Main.EntitySpriteDraw(TextureAssets.Extra[4].Value, vector53, new Rectangle?(value55), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(value54.Width / 2), 0f), proj.scale, dir, 0f);
								int num264 = proj.height - num261 - 14;
								if (num264 < 0)
								{
									num264 = 0;
								}
								if (num264 > 0)
								{
									if (num263 == num262 * 3)
									{
										num263 = num262 * 2;
									}
									Main.EntitySpriteDraw(TextureAssets.Extra[4].Value, vector53 + Vector2.UnitY * (float)(num262 - 1), new Rectangle?(new Rectangle(0, num263 + num262 - 1, value54.Width, 1)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(value54.Width / 2), 0f), new Vector2(1f, (float)num264), dir, 0f);
								}
								value55.Width = value53.Width;
								value55.Y = y19;
								Main.EntitySpriteDraw(value53, vector53 + Vector2.UnitY * (float)(num262 - 1 + num264), new Rectangle?(value55), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value53.Width / 2f, 0f), proj.scale, dir, 0f);
								return;
							}
							if (proj.type == 455)
							{
								if (proj.velocity == Vector2.Zero)
								{
									return;
								}
								Texture2D value56 = TextureAssets.Projectile[proj.type].Value;
								Texture2D value57 = TextureAssets.Extra[21].Value;
								Texture2D value58 = TextureAssets.Extra[22].Value;
								float num265 = proj.localAI[1];
								Color color69 = new Color(255, 255, 255, 0) * 0.9f;
								Texture2D texture15 = value56;
								Vector2 position52 = proj.Center - Main.screenPosition;
								Rectangle? sourceRectangle6 = null;
								Main.EntitySpriteDraw(texture15, position52, sourceRectangle6, color69, proj.rotation, value56.Size() / 2f, proj.scale, 0, 0f);
								num265 -= (float)(value56.Height / 2 + value58.Height) * proj.scale;
								Vector2 center3 = proj.Center;
								center3 += proj.velocity * proj.scale * (float)value56.Height / 2f;
								if (num265 > 0f)
								{
									float num266 = 0f;
									Rectangle value59;
									value59..ctor(0, 16 * (proj.timeLeft / 3 % 5), value57.Width, 16);
									while (num266 + 1f < num265)
									{
										if (num265 - num266 < (float)value59.Height)
										{
											value59.Height = (int)(num265 - num266);
										}
										Main.EntitySpriteDraw(value57, center3 - Main.screenPosition, new Rectangle?(value59), color69, proj.rotation, new Vector2((float)(value59.Width / 2), 0f), proj.scale, 0, 0f);
										num266 += (float)value59.Height * proj.scale;
										center3 += proj.velocity * (float)value59.Height * proj.scale;
										value59.Y += 16;
										if (value59.Y + value59.Height > value57.Height)
										{
											value59.Y = 0;
										}
									}
								}
								Texture2D texture16 = value58;
								Vector2 position53 = center3 - Main.screenPosition;
								sourceRectangle6 = null;
								Main.EntitySpriteDraw(texture16, position53, sourceRectangle6, color69, proj.rotation, value58.Frame(1, 1, 0, 0, 0, 0).Top(), proj.scale, 0, 0f);
								return;
							}
							else if (proj.type == 461)
							{
								if (proj.velocity == Vector2.Zero)
								{
									return;
								}
								Texture2D value60 = TextureAssets.Projectile[proj.type].Value;
								float num267 = proj.localAI[1];
								Color color70 = new Color(255, 255, 255, 0) * 0.9f;
								Rectangle rectangle14;
								rectangle14..ctor(0, 0, value60.Width, 22);
								Vector2 vector54;
								vector54..ctor(0f, Main.player[proj.owner].gfxOffY);
								Main.EntitySpriteDraw(value60, proj.Center.Floor() - Main.screenPosition + vector54, new Rectangle?(rectangle14), color70, proj.rotation, rectangle14.Size() / 2f, proj.scale, 0, 0f);
								num267 -= 33f * proj.scale;
								Vector2 vector55 = proj.Center.Floor();
								vector55 += proj.velocity * proj.scale * 10.5f;
								rectangle14..ctor(0, 25, value60.Width, 28);
								if (num267 > 0f)
								{
									float num268 = 0f;
									while (num268 + 1f < num267)
									{
										if (num267 - num268 < (float)rectangle14.Height)
										{
											rectangle14.Height = (int)(num267 - num268);
										}
										Main.EntitySpriteDraw(value60, vector55 - Main.screenPosition + vector54, new Rectangle?(rectangle14), color70, proj.rotation, new Vector2((float)(rectangle14.Width / 2), 0f), proj.scale, 0, 0f);
										num268 += (float)rectangle14.Height * proj.scale;
										vector55 += proj.velocity * (float)rectangle14.Height * proj.scale;
									}
								}
								Rectangle? sourceRectangle6 = new Rectangle?(new Rectangle(0, 56, value60.Width, 22));
								Main.EntitySpriteDraw(value60, vector55 - Main.screenPosition + vector54, sourceRectangle6, color70, proj.rotation, value60.Frame(1, 1, 0, 0, 0, 0).Top(), proj.scale, 0, 0f);
								return;
							}
							else
							{
								if (proj.type == 632)
								{
									if (!(proj.velocity == Vector2.Zero))
									{
										Texture2D value61 = TextureAssets.Projectile[proj.type].Value;
										float num269 = proj.localAI[1];
										float laserLuminance = 0.5f;
										float laserAlphaMultiplier = 0f;
										Color color71 = Main.hslToRgb(proj.GetLastPrismHue(proj.ai[0], ref laserLuminance, ref laserAlphaMultiplier), 1f, laserLuminance, byte.MaxValue);
										color71.A = (byte)((float)color71.A * laserAlphaMultiplier);
										Vector2 vector56 = proj.Center.Floor();
										vector56 += proj.velocity * proj.scale * 10.5f;
										num269 -= proj.scale * 14.5f * proj.scale;
										Vector2 vector57;
										vector57..ctor(proj.scale);
										DelegateMethods.f_1 = 1f;
										DelegateMethods.c_1 = color71 * 0.75f * proj.Opacity;
										proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
										SpriteBatch sb = Main.spriteBatch;
										Texture2D tex = value61;
										Vector2 start5 = vector56 - Main.screenPosition;
										Vector2 end5 = vector56 + proj.velocity * num269 - Main.screenPosition;
										Vector2 scale15 = vector57;
										Utils.LaserLineFraming framing;
										if ((framing = Main.<>O.<7>__RainbowLaserDraw) == null)
										{
											framing = (Main.<>O.<7>__RainbowLaserDraw = new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
										}
										Utils.DrawLaser(sb, tex, start5, end5, scale15, framing);
										DelegateMethods.c_1 = new Color(255, 255, 255, 127) * 0.75f * proj.Opacity;
										SpriteBatch sb2 = Main.spriteBatch;
										Texture2D tex2 = value61;
										Vector2 start6 = vector56 - Main.screenPosition;
										Vector2 end6 = vector56 + proj.velocity * num269 - Main.screenPosition;
										Vector2 scale16 = vector57 / 2f;
										Utils.LaserLineFraming framing2;
										if ((framing2 = Main.<>O.<7>__RainbowLaserDraw) == null)
										{
											framing2 = (Main.<>O.<7>__RainbowLaserDraw = new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
										}
										Utils.DrawLaser(sb2, tex2, start6, end6, scale16, framing2);
									}
									return;
								}
								if (proj.type == 642)
								{
									if (!(proj.velocity == Vector2.Zero))
									{
										Texture2D value62 = TextureAssets.Projectile[proj.type].Value;
										float num270 = proj.localAI[1];
										Color c_ = new Color(255, 255, 255, 127);
										Vector2 vector58 = proj.Center.Floor();
										num270 -= proj.scale * 10.5f;
										Vector2 vector59;
										vector59..ctor(proj.scale);
										DelegateMethods.f_1 = 1f;
										DelegateMethods.c_1 = c_;
										DelegateMethods.i_1 = 54000 - (int)Main.time / 2;
										proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
										SpriteBatch sb3 = Main.spriteBatch;
										Texture2D tex3 = value62;
										Vector2 start7 = vector58 - Main.screenPosition;
										Vector2 end7 = vector58 + proj.velocity * num270 - Main.screenPosition;
										Vector2 scale17 = vector59;
										Utils.LaserLineFraming framing3;
										if ((framing3 = Main.<>O.<8>__TurretLaserDraw) == null)
										{
											framing3 = (Main.<>O.<8>__TurretLaserDraw = new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
										}
										Utils.DrawLaser(sb3, tex3, start7, end7, scale17, framing3);
										DelegateMethods.c_1 = new Color(255, 255, 255, 127) * 0.75f * proj.Opacity;
										SpriteBatch sb4 = Main.spriteBatch;
										Texture2D tex4 = value62;
										Vector2 start8 = vector58 - Main.screenPosition;
										Vector2 end8 = vector58 + proj.velocity * num270 - Main.screenPosition;
										Vector2 scale18 = vector59 / 2f;
										Utils.LaserLineFraming framing4;
										if ((framing4 = Main.<>O.<8>__TurretLaserDraw) == null)
										{
											framing4 = (Main.<>O.<8>__TurretLaserDraw = new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
										}
										Utils.DrawLaser(sb4, tex4, start8, end8, scale18, framing4);
									}
									return;
								}
								if (proj.type == 611)
								{
									proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
									Texture2D value63 = TextureAssets.Projectile[proj.type].Value;
									Color alpha9 = proj.GetAlpha(projectileColor);
									if (proj.velocity == Vector2.Zero)
									{
										return;
									}
									float num271 = proj.velocity.Length() + 16f;
									bool flag33 = num271 < 100f;
									Vector2 vector60 = Vector2.Normalize(proj.velocity);
									Rectangle rectangle15;
									rectangle15..ctor(0, 2, value63.Width, 40);
									Vector2 vector61;
									vector61..ctor(0f, Main.player[proj.owner].gfxOffY);
									float rotation26 = proj.rotation + 3.1415927f;
									Main.EntitySpriteDraw(value63, proj.Center.Floor() - Main.screenPosition + vector61, new Rectangle?(rectangle15), alpha9, rotation26, rectangle15.Size() / 2f - Vector2.UnitY * 4f, proj.scale, 0, 0f);
									num271 -= 40f * proj.scale;
									Vector2 vector62 = proj.Center.Floor();
									vector62 += vector60 * proj.scale * 24f;
									rectangle15..ctor(0, 68, value63.Width, 18);
									if (num271 > 0f)
									{
										float num272 = 0f;
										while (num272 + 1f < num271)
										{
											if (num271 - num272 < (float)rectangle15.Height)
											{
												rectangle15.Height = (int)(num271 - num272);
											}
											Main.EntitySpriteDraw(value63, vector62 - Main.screenPosition + vector61, new Rectangle?(rectangle15), alpha9, rotation26, new Vector2((float)(rectangle15.Width / 2), 0f), proj.scale, 0, 0f);
											num272 += (float)rectangle15.Height * proj.scale;
											vector62 += vector60 * (float)rectangle15.Height * proj.scale;
										}
									}
									Vector2 vector63 = vector62;
									vector62 = proj.Center.Floor();
									vector62 += vector60 * proj.scale * 24f;
									rectangle15..ctor(0, 46, value63.Width, 18);
									int num273 = 18;
									if (flag33)
									{
										num273 = 9;
									}
									float num274 = num271;
									if (num271 > 0f)
									{
										float num275 = 0f;
										float num276 = num274 / (float)num273;
										num275 += num276 * 0.25f;
										vector62 += vector60 * num276 * 0.25f;
										for (int num277 = 0; num277 < num273; num277++)
										{
											float num278 = num276;
											if (num277 == 0)
											{
												num278 *= 0.75f;
											}
											Main.EntitySpriteDraw(value63, vector62 - Main.screenPosition + vector61, new Rectangle?(rectangle15), alpha9, rotation26, new Vector2((float)(rectangle15.Width / 2), 0f), proj.scale, 0, 0f);
											num275 += num278;
											vector62 += vector60 * num278;
										}
									}
									Rectangle? sourceRectangle6 = new Rectangle?(new Rectangle(0, 90, value63.Width, 48));
									Main.EntitySpriteDraw(value63, vector63 - Main.screenPosition + vector61, sourceRectangle6, alpha9, rotation26, value63.Frame(1, 1, 0, 0, 0, 0).Top(), proj.scale, 0, 0f);
									return;
								}
								else if (proj.type == 537)
								{
									if (proj.velocity == Vector2.Zero)
									{
										return;
									}
									Texture2D value64 = TextureAssets.Projectile[proj.type].Value;
									float num279 = proj.localAI[1];
									float fromValue2 = Utils.Remap(proj.localAI[0], 20f, 30f, 0f, 1f, true) * Utils.Remap(proj.localAI[0], 60f, 90f, 1f, 0f, true);
									float toMax = 1.5f;
									float num280 = Utils.Remap(fromValue2, 0f, 1f, 0.25f, toMax, true);
									Color color72 = new Color(255, 255, 255, 0) * 0.9f;
									Rectangle rectangle16;
									rectangle16..ctor(0, 0, value64.Width, 22);
									Vector2 vector64;
									vector64..ctor(0f, Main.npc[(int)proj.ai[1]].gfxOffY);
									Main.EntitySpriteDraw(value64, proj.Center.Floor() - Main.screenPosition + vector64, new Rectangle?(rectangle16), color72, proj.rotation, rectangle16.Size() / 2f, num280, 0, 0f);
									num279 -= 33f * proj.scale;
									Vector2 vector65 = proj.Center.Floor();
									vector65 += proj.velocity * num280 * 10.5f;
									rectangle16..ctor(0, 25, value64.Width, 28);
									if (num279 > 0f)
									{
										float num281 = 0f;
										while (num281 + 1f < num279)
										{
											if (num279 - num281 < (float)rectangle16.Height)
											{
												rectangle16.Height = (int)(num279 - num281);
											}
											Main.EntitySpriteDraw(value64, vector65 - Main.screenPosition + vector64, new Rectangle?(rectangle16), color72, proj.rotation, new Vector2((float)(rectangle16.Width / 2), 0f), num280, 0, 0f);
											num281 += (float)rectangle16.Height * num280;
											vector65 += proj.velocity * (float)rectangle16.Height * num280;
										}
									}
									Rectangle? sourceRectangle6 = new Rectangle?(new Rectangle(0, 56, value64.Width, 22));
									Main.EntitySpriteDraw(value64, vector65 - Main.screenPosition + vector64, sourceRectangle6, color72, proj.rotation, value64.Frame(1, 1, 0, 0, 0, 0).Top(), num280, 0, 0f);
									return;
								}
								else
								{
									if (proj.type == 456)
									{
										Texture2D value130 = TextureAssets.Projectile[proj.type].Value;
										Texture2D value65 = TextureAssets.Extra[23].Value;
										Texture2D value66 = TextureAssets.Extra[24].Value;
										Vector2 vector66;
										vector66..ctor(0f, 216f);
										Vector2 value67 = Main.npc[(int)Math.Abs(proj.ai[0]) - 1].Center - proj.Center + vector66;
										float num282 = value67.Length();
										Vector2 vector67 = Vector2.Normalize(value67);
										Rectangle rectangle17 = value130.Frame(1, 1, 0, 0, 0, 0);
										rectangle17.Height /= 4;
										rectangle17.Y += proj.frame * rectangle17.Height;
										color107 = proj.GetAlpha(Color.Lerp(projectileColor, Color.White, 0.3f));
										Main.EntitySpriteDraw(value130, proj.Center - Main.screenPosition, new Rectangle?(rectangle17), color107, proj.rotation, rectangle17.Size() / 2f, proj.scale, 0, 0f);
										num282 -= (float)(rectangle17.Height / 2 + value66.Height) * proj.scale;
										Vector2 center4 = proj.Center;
										center4 += vector67 * proj.scale * (float)rectangle17.Height / 2f;
										if (num282 > 0f)
										{
											float num283 = 0f;
											Rectangle rectangle18;
											rectangle18..ctor(0, 0, value65.Width, value65.Height);
											while (num283 + 1f < num282)
											{
												if (num282 - num283 < (float)rectangle18.Height)
												{
													rectangle18.Height = (int)(num282 - num283);
												}
												Point point3 = center4.ToTileCoordinates();
												Color color73 = Lighting.GetColor(point3.X, point3.Y);
												color73 = Color.Lerp(color73, Color.White, 0.3f);
												Main.EntitySpriteDraw(value65, center4 - Main.screenPosition, new Rectangle?(rectangle18), proj.GetAlpha(color73), proj.rotation, rectangle18.Bottom(), proj.scale, 0, 0f);
												num283 += (float)rectangle18.Height * proj.scale;
												center4 += vector67 * (float)rectangle18.Height * proj.scale;
											}
										}
										Point point4 = center4.ToTileCoordinates();
										Color color74 = Lighting.GetColor(point4.X, point4.Y);
										color74 = Color.Lerp(color74, Color.White, 0.3f);
										Rectangle value68 = value66.Frame(1, 1, 0, 0, 0, 0);
										if (num282 < 0f)
										{
											value68.Height += (int)num282;
										}
										Main.EntitySpriteDraw(value66, center4 - Main.screenPosition, new Rectangle?(value68), color74, proj.rotation, new Vector2((float)value68.Width / 2f, (float)value68.Height), proj.scale, 0, 0f);
										return;
									}
									if (proj.type == 443)
									{
										Texture2D value69 = TextureAssets.Projectile[proj.type].Value;
										float num284 = 30f;
										float num285 = num284 * 4f;
										float num286 = 6.2831855f * proj.ai[0] / num284;
										float num287 = 6.2831855f * proj.ai[0] / num285;
										Vector2 unitY2 = Vector2.UnitY;
										double radians16 = (double)num286;
										vector117 = default(Vector2);
										Vector2 vector68 = -unitY2.RotatedBy(radians16, vector117);
										float scale4 = 0.75f + vector68.Y * 0.25f;
										float scale5 = 0.8f - vector68.Y * 0.2f;
										int num288 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
										int y20 = num288 * proj.frame;
										Vector2 position18 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
										Main.EntitySpriteDraw(value69, position18, new Rectangle?(new Rectangle(0, y20, value69.Width, num288)), proj.GetAlpha(projectileColor), proj.rotation + num287, new Vector2((float)value69.Width / 2f, (float)num288 / 2f), scale4, dir, 0f);
										Main.EntitySpriteDraw(value69, position18, new Rectangle?(new Rectangle(0, y20, value69.Width, num288)), proj.GetAlpha(projectileColor), proj.rotation + (6.2831855f - num287), new Vector2((float)value69.Width / 2f, (float)num288 / 2f), scale5, dir, 0f);
										return;
									}
									if (proj.type == 656 || proj.type == 657)
									{
										float num289 = 900f;
										if (proj.type == 657)
										{
											num289 = 300f;
										}
										float num290 = 15f;
										float num291 = 15f;
										float num292 = proj.ai[0];
										float num293 = MathHelper.Clamp(num292 / 30f, 0f, 1f);
										if (num292 > num289 - 60f)
										{
											num293 = MathHelper.Lerp(1f, 0f, (num292 - (num289 - 60f)) / 60f);
										}
										Point point5 = proj.Center.ToTileCoordinates();
										int topY;
										int bottomY;
										Collision.ExpandVertically(point5.X, point5.Y, out topY, out bottomY, (int)num290, (int)num291);
										topY++;
										bottomY--;
										float num294 = 0.2f;
										Vector2 value70 = new Vector2((float)point5.X, (float)topY) * 16f + new Vector2(8f);
										Vector2 value71 = new Vector2((float)point5.X, (float)bottomY) * 16f + new Vector2(8f);
										Vector2.Lerp(value70, value71, 0.5f);
										Vector2 vector69;
										vector69..ctor(0f, value71.Y - value70.Y);
										vector69.X = vector69.Y * num294;
										new Vector2(value70.X - vector69.X / 2f, value70.Y);
										Texture2D value72 = TextureAssets.Projectile[proj.type].Value;
										Rectangle rectangle19 = value72.Frame(1, 1, 0, 0, 0, 0);
										Vector2 origin19 = rectangle19.Size() / 2f;
										float num295 = -0.06283186f * num292;
										Vector2 unitY3 = Vector2.UnitY;
										double radians17 = (double)(num292 * 0.1f);
										vector117 = default(Vector2);
										Vector2 spinningpoint4 = unitY3.RotatedBy(radians17, vector117);
										float num296 = 0f;
										float num297 = 5.1f;
										Color value73;
										value73..ctor(212, 192, 100);
										for (float num298 = (float)((int)value71.Y); num298 > (float)((int)value70.Y); num298 -= num297)
										{
											num296 += num297;
											float num299 = num296 / vector69.Y;
											float num300 = num296 * 6.2831855f / -20f;
											float num301 = num299 - 0.15f;
											Vector2 spinningpoint26 = spinningpoint4;
											double radians18 = (double)num300;
											vector117 = default(Vector2);
											Vector2 position19 = spinningpoint26.RotatedBy(radians18, vector117);
											Vector2 vector70;
											vector70..ctor(0f, num299 + 1f);
											vector70.X = vector70.Y * num294;
											Color color75 = Color.Lerp(Color.Transparent, value73, num299 * 2f);
											if (num299 > 0.5f)
											{
												color75 = Color.Lerp(Color.Transparent, value73, 2f - num299 * 2f);
											}
											color75.A = (byte)((float)color75.A * 0.5f);
											color75 *= num293;
											position19 *= vector70 * 100f;
											position19.Y = 0f;
											position19.X = 0f;
											position19 += new Vector2(value71.X, num298) - Main.screenPosition;
											Main.EntitySpriteDraw(value72, position19, new Rectangle?(rectangle19), color75, num295 + num300, origin19, 1f + num301, 0, 0f);
										}
										return;
									}
									if (proj.type == 704)
									{
										float num302 = 300f;
										float num303 = proj.ai[0];
										float num304 = MathHelper.Clamp(num303 / 30f, 0f, 1f);
										if (num303 > num302 - 60f)
										{
											num304 = MathHelper.Lerp(1f, 0f, (num303 - (num302 - 60f)) / 60f);
										}
										float num305 = 0.2f;
										Vector2 top2 = proj.Top;
										Vector2 bottom = proj.Bottom;
										Vector2.Lerp(top2, bottom, 0.5f);
										Vector2 vector71;
										vector71..ctor(0f, bottom.Y - top2.Y);
										vector71.X = vector71.Y * num305;
										new Vector2(top2.X - vector71.X / 2f, top2.Y);
										Texture2D value74 = TextureAssets.Projectile[proj.type].Value;
										Rectangle rectangle20 = value74.Frame(1, 1, 0, 0, 0, 0);
										Vector2 origin20 = rectangle20.Size() / 2f;
										float num306 = -0.15707964f * num303 * (float)((proj.velocity.X <= 0f) ? 1 : -1);
										SpriteEffects effects4 = (proj.velocity.X > 0f) ? 2 : 0;
										bool flag34 = proj.velocity.X > 0f;
										Vector2 unitY4 = Vector2.UnitY;
										double radians19 = (double)(num303 * 0.14f);
										vector117 = default(Vector2);
										Vector2 spinningpoint5 = unitY4.RotatedBy(radians19, vector117);
										float num307 = 0f;
										float num308 = 5.01f + num303 / 150f * -0.9f;
										if (num308 < 4.11f)
										{
											num308 = 4.11f;
										}
										Color value75;
										value75..ctor(160, 140, 100, 127);
										Color color76;
										color76..ctor(140, 160, 255, 127);
										float num309 = num303 % 60f;
										if (num309 < 30f)
										{
											color76 *= Utils.GetLerpValue(22f, 30f, num309, true);
										}
										else
										{
											color76 *= Utils.GetLerpValue(38f, 30f, num309, true);
										}
										bool flag35 = color76 != Color.Transparent;
										for (float num310 = (float)((int)bottom.Y); num310 > (float)((int)top2.Y); num310 -= num308)
										{
											num307 += num308;
											float num311 = num307 / vector71.Y;
											float num312 = num307 * 6.2831855f / -20f;
											if (flag34)
											{
												num312 *= -1f;
											}
											float num313 = num311 - 0.35f;
											Vector2 spinningpoint27 = spinningpoint5;
											double radians20 = (double)num312;
											vector117 = default(Vector2);
											Vector2 position20 = spinningpoint27.RotatedBy(radians20, vector117);
											Vector2 vector72;
											vector72..ctor(0f, num311 + 1f);
											vector72.X = vector72.Y * num305;
											Color color77 = Color.Lerp(Color.Transparent, value75, num311 * 2f);
											if (num311 > 0.5f)
											{
												color77 = Color.Lerp(Color.Transparent, value75, 2f - num311 * 2f);
											}
											color77.A = (byte)((float)color77.A * 0.5f);
											color77 *= num304;
											position20 *= vector72 * 100f;
											position20.Y = 0f;
											position20.X = 0f;
											position20 += new Vector2(bottom.X, num310) - Main.screenPosition;
											if (flag35)
											{
												Color color78 = Color.Lerp(Color.Transparent, color76, num311 * 2f);
												if (num311 > 0.5f)
												{
													color78 = Color.Lerp(Color.Transparent, color76, 2f - num311 * 2f);
												}
												color78.A = (byte)((float)color78.A * 0.5f);
												color78 *= num304;
												Main.EntitySpriteDraw(value74, position20, new Rectangle?(rectangle20), color78, num306 + num312, origin20, (1f + num313) * 0.8f, effects4, 0f);
											}
											Main.EntitySpriteDraw(value74, position20, new Rectangle?(rectangle20), color77, num306 + num312, origin20, 1f + num313, effects4, 0f);
										}
										return;
									}
									if (proj.type == 444 || proj.type == 446 || proj.type == 490 || proj.type == 464 || proj.type == 502 || proj.type == 538 || proj.type == 540 || proj.type == 579 || proj.type == 578 || proj.type == 813 || proj.type == 583 || proj.type == 584 || proj.type == 616 || proj.type == 617 || proj.type == 618 || proj.type == 641 || (proj.type >= 646 && proj.type <= 649) || proj.type == 653 || proj.type == 186 || proj.type == 662 || proj.type == 685 || proj.type == 673 || proj.type == 676 || proj.type == 697 || proj.type == 699 || proj.type == 707 || proj.type == 708 || proj.type == 719 || proj.type == 761 || proj.type == 762 || proj.type == 763 || proj.type == 772 || proj.type == 802 || proj.type == 842 || proj.type == 865 || proj.type == 921 || proj.type == 926 || proj.type == 757 || proj.type == 25 || proj.type == 35 || proj.type == 63 || proj.type == 154 || proj.type == 247 || proj.type == 26 || proj.type == 928 || proj.type == 16 || proj.type == 34 || proj.type == 79 || proj.type == 936 || proj.type == 937 || proj.type == 938 || proj.type == 939 || proj.type == 940 || proj.type == 941 || proj.type == 942 || proj.type == 943 || proj.type == 944 || proj.type == 945 || proj.type == 971 || proj.type == 975 || proj.type == 1000 || proj.type == 1012 || proj.type == 1018 || proj.type == 1020 || (((proj.type >= 776 && proj.type <= 801) || (proj.type >= 803 && proj.type <= 810)) && proj.type != 779 && proj.type != 783 && proj.type != 862 && proj.type != 863))
									{
										Vector2 vector73 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
										Texture2D value76 = TextureAssets.Projectile[proj.type].Value;
										Color color79 = proj.GetAlpha(projectileColor);
										Vector2 origin21 = new Vector2((float)value76.Width, (float)value76.Height) / 2f;
										float num314 = proj.rotation;
										Vector2 vector74 = Vector2.One * proj.scale;
										Rectangle? sourceRectangle5 = null;
										if (proj.type == 446)
										{
											origin21.Y = 4f;
										}
										if (proj.type == 1020)
										{
											origin21.Y = 14f;
										}
										if (proj.type == 865)
										{
											vector73 += new Vector2(1f, -1f);
											dir = ((proj.DirectionFrom(Main.player[proj.owner].Center).SafeNormalize(Vector2.Zero).X > 0f) ? 1 : 0);
										}
										if (proj.type == 16)
										{
											float lerpValue7 = Utils.GetLerpValue(0f, 8f, proj.velocity.Length(), true);
											num314 *= lerpValue7;
											vector74 *= 0.6f;
											vector74.Y *= MathHelper.Lerp(1f, 0.8f, lerpValue7);
											vector74.X *= MathHelper.Lerp(1f, 1.5f, lerpValue7);
										}
										if (proj.type == 34)
										{
											float lerpValue8 = Utils.GetLerpValue(0f, 8f, proj.velocity.Length(), true);
											num314 *= lerpValue8;
											vector74.X *= MathHelper.Lerp(1f, 0.8f, lerpValue8);
											num314 += -1.5707964f * lerpValue8;
											sourceRectangle5 = new Rectangle?(value76.Frame(1, Main.projFrames[proj.type], 0, proj.frame, 0, 0));
											origin21 = sourceRectangle5.Value.Size() / 2f;
											vector73 -= proj.velocity * 1f;
											vector73 = proj.oldPos[0] + proj.Size / 2f - Main.screenPosition - proj.velocity / 2f;
										}
										if (proj.type == 79)
										{
											num314 = 0f;
											vector74 *= Utils.GetLerpValue(32f, 0f, proj.position.Distance(proj.oldPos[12]), true);
											color79..ctor(255, 255, 255, 0);
										}
										if (proj.type == 761 || proj.type == 762)
										{
											dir = ((proj.spriteDirection <= 0) ? 2 : 0);
										}
										if (proj.type == 662 || proj.type == 685)
										{
											origin21..ctor(6f, 6f);
										}
										if (proj.type == 699 || proj.type == 708)
										{
											Player player4 = Main.player[proj.owner];
											origin21..ctor((proj.spriteDirection == 1) ? ((float)value76.Width - -8f) : -8f, (player4.gravDir == 1f) ? -8f : ((float)value76.Height - -8f));
											if (player4.gravDir == -1f)
											{
												dir |= 2;
												num314 += 1.5707964f * (float)(-(float)proj.spriteDirection);
											}
										}
										if (proj.type == 938 || proj.type == 939 || proj.type == 940 || proj.type == 941 || proj.type == 942 || proj.type == 943 || proj.type == 944 || proj.type == 945)
										{
											num314 -= 0.7853982f * (float)proj.spriteDirection;
										}
										if (proj.type == 502)
										{
											this.LoadProjectile(250);
											Texture2D value77 = TextureAssets.Projectile[250].Value;
											Vector2 origin22;
											origin22..ctor((float)(value77.Width / 2), 0f);
											Vector2 vector75 = new Vector2((float)proj.width, (float)proj.height) / 2f;
											Color white3 = Color.White;
											white3.A = 127;
											for (int num315 = proj.oldPos.Length - 1; num315 > 0; num315--)
											{
												Vector2 vector76 = proj.oldPos[num315] + vector75;
												if (!(vector76 == vector75))
												{
													Vector2 vector77 = proj.oldPos[num315 - 1] + vector75;
													float rotation27 = (vector77 - vector76).ToRotation() - 1.5707964f;
													Vector2 scale6;
													scale6..ctor(1f, Vector2.Distance(vector76, vector77) / (float)value77.Height);
													Color color80 = white3 * (1f - (float)num315 / (float)proj.oldPos.Length);
													Texture2D texture17 = value77;
													Vector2 position54 = vector76 - Main.screenPosition;
													Rectangle? sourceRectangle6 = null;
													Main.EntitySpriteDraw(texture17, position54, sourceRectangle6, color80, rotation27, origin22, scale6, dir, 0f);
												}
											}
										}
										else if (proj.type == 540 && proj.velocity != Vector2.Zero)
										{
											float num316 = 0f;
											if (proj.ai[0] >= 10f)
											{
												num316 = (proj.ai[0] - 10f) / 10f;
											}
											if (proj.ai[0] >= 20f)
											{
												num316 = (20f - proj.ai[0]) / 10f;
											}
											if (num316 > 1f)
											{
												num316 = 1f;
											}
											if (num316 < 0f)
											{
												num316 = 0f;
											}
											if (num316 != 0f)
											{
												Texture2D value78 = TextureAssets.Extra[47].Value;
												Vector2 origin23;
												origin23..ctor((float)(value78.Width / 2), 0f);
												Color color81 = color79 * num316 * 0.7f;
												Vector2 position21 = proj.Center - Main.screenPosition;
												Vector2 vector78 = proj.velocity.ToRotation().ToRotationVector2() * (float)value76.Width / 3f;
												vector78 = Vector2.Zero;
												position21 += vector78;
												float rotation28 = proj.velocity.ToRotation() - 1.5707964f;
												Vector2 scale7;
												scale7..ctor(1f, (proj.velocity.Length() - vector78.Length() * 2f) / (float)value78.Height);
												Texture2D texture18 = value78;
												Vector2 position55 = position21;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture18, position55, sourceRectangle6, color81, rotation28, origin23, scale7, 0, 0f);
											}
										}
										if (proj.type == 578 || proj.type == 579 || proj.type == 641 || proj.type == 813)
										{
											Color color82 = color79 * 0.8f;
											color82.A /= 2;
											Color color83 = Color.Lerp(color79, Color.Black, 0.5f);
											color83.A = color79.A;
											float num317 = 0.95f + (proj.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
											color83 *= num317;
											float scale8 = 0.6f + proj.scale * 0.6f * num317;
											Texture2D value79 = TextureAssets.Extra[50].Value;
											bool flag36 = true;
											if (proj.type == 813)
											{
												flag36 = false;
												value79 = TextureAssets.Extra[131].Value;
											}
											Vector2 origin24 = value79.Size() / 2f;
											Texture2D texture19 = value79;
											Vector2 position56 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture19, position56, sourceRectangle6, color83, 0f - num314 + 0.35f, origin24, scale8, dir ^ 1, 0f);
											Texture2D texture20 = value79;
											Vector2 position57 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture20, position57, sourceRectangle6, color79, 0f - num314, origin24, proj.scale, dir ^ 1, 0f);
											if (flag36)
											{
												Texture2D texture21 = value76;
												Vector2 position58 = vector73;
												sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture21, position58, sourceRectangle6, color82, (0f - num314) * 0.7f, origin21, proj.scale, dir ^ 1, 0f);
											}
											Texture2D texture22 = value79;
											Vector2 position59 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture22, position59, sourceRectangle6, color79 * 0.8f, num314 * 0.5f, origin24, proj.scale * 0.9f, dir, 0f);
											color79.A = 0;
											if (proj.type == 813)
											{
												num314 = 0f;
											}
										}
										if (proj.type == 617)
										{
											Color color84 = color79 * 0.8f;
											color84.A /= 2;
											Color color85 = Color.Lerp(color79, Color.Black, 0.5f);
											color85.A = color79.A;
											float num318 = 0.95f + (proj.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
											color85 *= num318;
											float scale9 = 0.6f + proj.scale * 0.6f * num318;
											Texture2D value131 = TextureAssets.Extra[50].Value;
											Vector2 position60 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(value131, position60, sourceRectangle6, color85, 0f - proj.rotation + 0.35f, origin21, scale9, dir ^ 1, 0f);
											Texture2D value132 = TextureAssets.Extra[50].Value;
											Vector2 position61 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(value132, position61, sourceRectangle6, color79, 0f - proj.rotation, origin21, proj.scale, dir ^ 1, 0f);
											Texture2D texture23 = value76;
											Vector2 position62 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture23, position62, sourceRectangle6, color84, (0f - proj.rotation) * 0.7f, origin21, proj.scale, dir ^ 1, 0f);
											Texture2D value133 = TextureAssets.Extra[50].Value;
											Vector2 position63 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(value133, position63, sourceRectangle6, color79 * 0.8f, proj.rotation * 0.5f, origin21, proj.scale * 0.9f, dir, 0f);
											color79.A = 0;
										}
										if (proj.type == 757 || proj.type == 25 || proj.type == 35 || proj.type == 63 || proj.type == 154 || proj.type == 247 || proj.type == 26)
										{
											if (proj.ai[0] == 1f)
											{
												Color color86 = color79;
												color86.A = 127;
												color86 *= 0.5f;
												int num319 = (int)proj.ai[1];
												if (num319 > 5)
												{
													num319 = 5;
												}
												for (float num320 = 1f; num320 >= 0f; num320 -= 0.125f)
												{
													float num321 = 1f - num320;
													Vector2 vector79 = proj.velocity * (float)(-(float)num319) * num320;
													Texture2D texture24 = value76;
													Vector2 position64 = vector73 + vector79;
													Rectangle? sourceRectangle6 = null;
													Main.EntitySpriteDraw(texture24, position64, sourceRectangle6, color86 * num321, num314, origin21, proj.scale * 1.15f * MathHelper.Lerp(0.5f, 1f, num321), dir, 0f);
												}
											}
										}
										else if (proj.type == 79)
										{
											Vector2 scale10 = vector74 * 1.4f;
											Vector2 spinningpoint28 = new Vector2(2f * scale10.X + (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly * 6.2831855f)) * 0.4f, 0f);
											double radians21 = (double)(num314 + Main.GlobalTimeWrappedHourly * 6.2831855f);
											vector117 = default(Vector2);
											Vector2 spinningpoint6 = spinningpoint28.RotatedBy(radians21, vector117);
											Rectangle? sourceRectangle6;
											for (float num322 = 0f; num322 < 1f; num322 += 0.16666667f)
											{
												Color color87 = Main.hslToRgb(num322, 1f, 0.5f, byte.MaxValue) * 0.3f;
												color87.A = 0;
												Texture2D texture25 = value76;
												Vector2 vector130 = vector73;
												Vector2 spinningpoint29 = spinningpoint6;
												double radians22 = (double)(num322 * 6.2831855f);
												vector117 = default(Vector2);
												Vector2 position65 = vector130 + spinningpoint29.RotatedBy(radians22, vector117);
												sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture25, position65, sourceRectangle6, color87, num314, origin21, scale10, dir, 0f);
											}
											Texture2D texture26 = value76;
											Vector2 position66 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture26, position66, sourceRectangle6, color79, num314, origin21, vector74, dir, 0f);
										}
										if (!(false | (proj.type == 464 && proj.ai[1] != 1f)))
										{
											Main.EntitySpriteDraw(value76, vector73, sourceRectangle5, color79, num314, origin21, vector74, dir, 0f);
										}
										if (proj.type == 464 && proj.ai[1] != 1f)
										{
											value76 = TextureAssets.Extra[35].Value;
											Rectangle rectangle21 = value76.Frame(1, 3, 0, 0, 0, 0);
											origin21 = rectangle21.Size() / 2f;
											Vector2 spinningpoint30 = new Vector2(0f, -720f);
											double radians23 = (double)proj.velocity.ToRotation();
											vector117 = default(Vector2);
											Vector2 vector131 = spinningpoint30.RotatedBy(radians23, vector117);
											float num323 = proj.ai[0] % 45f / 45f;
											Vector2 spinningpoint7 = vector131 * num323;
											for (int num324 = 0; num324 < 6; num324++)
											{
												float num325 = (float)num324 * 6.2831855f / 6f;
												Vector2 center6 = proj.Center;
												Vector2 spinningpoint31 = spinningpoint7;
												double radians24 = (double)num325;
												vector117 = default(Vector2);
												Vector2 vector80 = center6 + spinningpoint31.RotatedBy(radians24, vector117);
												Main.EntitySpriteDraw(value76, vector80 - Main.screenPosition, new Rectangle?(rectangle21), color79, num325 + proj.velocity.ToRotation() + 3.1415927f, origin21, proj.scale, dir, 0f);
												rectangle21.Y += rectangle21.Height;
												if (rectangle21.Y >= value76.Height)
												{
													rectangle21.Y = 0;
												}
											}
											return;
										}
										if (proj.type == 490)
										{
											Texture2D value134 = TextureAssets.Extra[34].Value;
											Vector2 position67 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(value134, position67, sourceRectangle6, color79, 0f - proj.rotation, TextureAssets.Extra[34].Value.Size() / 2f, proj.scale, dir, 0f);
											Texture2D texture27 = value76;
											Vector2 position68 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture27, position68, sourceRectangle6, color79, proj.rotation, origin21, proj.scale * 0.42f, dir, 0f);
											Texture2D value135 = TextureAssets.Extra[34].Value;
											Vector2 position69 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(value135, position69, sourceRectangle6, color79, 0f - proj.rotation, TextureAssets.Extra[34].Value.Size() / 2f, proj.scale * 0.42f, dir, 0f);
											return;
										}
										if (proj.type == 616)
										{
											value76 = TextureAssets.GlowMask[193].Value;
											Texture2D texture28 = value76;
											Vector2 position70 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture28, position70, sourceRectangle6, new Color(127, 127, 127, 0), proj.rotation, origin21, proj.scale, dir, 0f);
											return;
										}
										if (proj.type >= 646 && proj.type <= 649)
										{
											value76 = TextureAssets.GlowMask[203 + proj.type - 646].Value;
											Texture2D texture29 = value76;
											Vector2 position71 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture29, position71, sourceRectangle6, new Color(255, 255, 255, 127), proj.rotation, origin21, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 699)
										{
											value76 = TextureAssets.GlowMask[231].Value;
											Texture2D texture30 = value76;
											Vector2 position72 = vector73;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture30, position72, sourceRectangle6, new Color(255, 255, 255, 127), num314, origin21, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 707 || proj.type == 708)
										{
											float num326 = 0.5f;
											value76 = TextureAssets.GlowMask[232].Value;
											Rectangle value80 = value76.Frame(1, 3, 0, (int)(proj.ai[0] % 9f) / 3, 0, 0);
											if (proj.type == 708)
											{
												value80 = value76.Frame(1, 3, 0, Main.player[proj.owner].itemAnimation % 9 / 3, 0, 0);
												num326 = 0.75f;
											}
											Color color88 = new Color(255, 255, 255, 127) * num326;
											Vector2 spinningpoint32 = new Vector2(2f, 0f);
											double radians25 = (double)proj.rotation;
											vector117 = default(Vector2);
											Vector2 spinningpoint8 = spinningpoint32.RotatedBy(radians25, vector117);
											for (float num327 = 0f; num327 < 4f; num327 += 1f)
											{
												Texture2D texture31 = value76;
												Vector2 vector132 = vector73;
												Vector2 spinningpoint33 = spinningpoint8;
												double radians26 = (double)(num327 * 1.5707964f);
												vector117 = default(Vector2);
												Main.EntitySpriteDraw(texture31, vector132 + spinningpoint33.RotatedBy(radians26, vector117), new Rectangle?(value80), color88 * 0.5f, proj.rotation, origin21, proj.scale, dir, 0f);
											}
											Main.EntitySpriteDraw(value76, vector73, new Rectangle?(value80), color88, proj.rotation, origin21, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 719)
										{
											float num328 = 0.3f;
											Color color89 = new Color(80, 80, 80, 255) * num328;
											float num329 = proj.scale * 1.5f;
											Vector2 spinningpoint34 = new Vector2(2f * num329, 0f);
											double radians27 = (double)proj.rotation;
											vector117 = default(Vector2);
											Vector2 spinningpoint9 = spinningpoint34.RotatedBy(radians27, vector117);
											Rectangle? sourceRectangle6;
											for (float num330 = 0f; num330 < 4f; num330 += 1f)
											{
												Texture2D texture32 = value76;
												Vector2 position73 = vector73 + -proj.velocity * num330 * 1.25f;
												sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture32, position73, sourceRectangle6, color89 * 0.7f, proj.rotation, origin21, num329, dir, 0f);
											}
											for (float num331 = 0f; num331 < 3f; num331 += 1f)
											{
												Texture2D texture33 = value76;
												Vector2 vector133 = vector73;
												Vector2 spinningpoint35 = spinningpoint9;
												double radians28 = (double)(num331 * 1.5707964f);
												vector117 = default(Vector2);
												Vector2 position74 = vector133 + spinningpoint35.RotatedBy(radians28, vector117);
												sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture33, position74, sourceRectangle6, color89 * 0.9f, proj.rotation, origin21, num329, dir, 0f);
											}
											Texture2D texture34 = value76;
											Vector2 position75 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture34, position75, sourceRectangle6, color79, proj.rotation, origin21, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 16)
										{
											Color color90;
											color90..ctor(80, 80, 80, 0);
											Vector2 scale11 = vector74 + vector74 * (float)Math.Cos((double)(Main.GlobalTimeWrappedHourly * 6.2831855f)) * 0.4f;
											Vector2 spinningpoint36 = new Vector2(2f * scale11.X, 0f);
											double radians29 = (double)num314;
											vector117 = default(Vector2);
											Vector2 spinningpoint10 = spinningpoint36.RotatedBy(radians29, vector117);
											Rectangle? sourceRectangle6;
											for (float num332 = 0f; num332 < 1f; num332 += 0.25f)
											{
												Texture2D texture35 = value76;
												Vector2 vector134 = vector73;
												Vector2 spinningpoint37 = spinningpoint10;
												double radians30 = (double)(num332 * 6.2831855f);
												vector117 = default(Vector2);
												Vector2 position76 = vector134 + spinningpoint37.RotatedBy(radians30, vector117);
												sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture35, position76, sourceRectangle6, color90, num314, origin21, scale11, dir, 0f);
											}
											Texture2D texture36 = value76;
											Vector2 position77 = vector73;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture36, position77, sourceRectangle6, color79, num314, origin21, vector74, dir, 0f);
											return;
										}
										if (proj.type == 34)
										{
											float lerpValue9 = Utils.GetLerpValue(0f, 6f, proj.localAI[0], true);
											Color color91 = new Color(255, 255, 255, 127) * 0.75f;
											Vector2 scale12;
											scale12..ctor(lerpValue9);
											Vector2 spinningpoint38 = new Vector2(4f * scale12.X, 0f);
											double radians31 = (double)num314;
											vector117 = default(Vector2);
											Vector2 spinningpoint11 = spinningpoint38.RotatedBy(radians31, vector117);
											for (float num333 = 0f; num333 < 1f; num333 += 0.25f)
											{
												Texture2D texture37 = value76;
												Vector2 vector135 = vector73;
												Vector2 spinningpoint39 = spinningpoint11;
												double radians32 = (double)(num333 * 6.2831855f);
												vector117 = default(Vector2);
												Main.EntitySpriteDraw(texture37, vector135 + spinningpoint39.RotatedBy(radians32, vector117), sourceRectangle5, color91, num314, origin21, scale12, dir, 0f);
											}
										}
										return;
									}
									else if (proj.type == 465 || proj.type == 467 || proj.type == 468 || proj.type == 500 || proj.type == 518 || proj.type == 535 || proj.type == 539 || proj.type == 575 || proj.type == 574 || proj.type == 589 || proj.type == 590 || proj.type == 593 || proj.type == 602 || proj.type == 596 || proj.type == 612 || proj.type == 953 || proj.type == 613 || proj.type == 614 || proj.type == 623 || proj.type == 625 || proj.type == 626 || proj.type == 627 || proj.type == 628 || proj.type == 634 || proj.type == 635 || proj.type == 643 || proj.type == 644 || proj.type == 645 || proj.type == 650 || proj.type == 652 || proj.type == 658 || proj.type == 659 || proj.type == 663 || proj.type == 665 || proj.type == 667 || proj.type == 677 || proj.type == 678 || proj.type == 679 || proj.type == 691 || proj.type == 692 || proj.type == 693 || proj.type == 702 || proj.type == 703 || proj.type == 701 || proj.type == 712 || proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718 || proj.type == 758 || proj.type == 759 || proj.type == 764 || proj.type == 779 || proj.type == 783 || proj.type == 773 || proj.type == 820 || proj.type == 831 || proj.type == 970 || proj.type == 836 || proj.type == 851 || proj.type == 855 || proj.type == 856 || proj.type == 857 || proj.type == 861 || proj.type == 862 || proj.type == 863 || proj.type == 866 || proj.type == 870 || proj.type == 882 || proj.type == 885 || proj.type == 889 || proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 903 || proj.type == 904 || proj.type == 905 || proj.type == 906 || proj.type == 908 || proj.type == 910 || proj.type == 911 || proj.type == 951 || proj.type == 957 || proj.type == 962 || proj.type == 963 || proj.type == 967 || proj.type == 968 || proj.type == 978 || proj.type == 995 || proj.type == 886 || proj.type == 892)
									{
										Vector2 vector81 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
										Texture2D texture2D4 = TextureAssets.Projectile[proj.type].Value;
										Rectangle rectangle22 = texture2D4.Frame(1, Main.projFrames[proj.type], 0, proj.frame, 0, 0);
										if (proj.type == 963)
										{
											rectangle22 = texture2D4.Frame(4, Main.projFrames[proj.type], 0, proj.frame, 0, 0);
										}
										if (proj.type == 957)
										{
											int horizontalFrames = 3;
											int frameX = proj.frame / Main.projFrames[proj.type];
											int frameY2 = proj.frame % Main.projFrames[proj.type];
											rectangle22 = texture2D4.Frame(horizontalFrames, Main.projFrames[proj.type], frameX, frameY2, 0, 0);
										}
										if (proj.type == 962)
										{
											int verticalFrames = 4;
											int frameY3 = proj.frame / Main.projFrames[proj.type];
											int frameX2 = proj.frame % Main.projFrames[proj.type];
											rectangle22 = texture2D4.Frame(Main.projFrames[proj.type], verticalFrames, frameX2, frameY3, 0, 0);
										}
										Color color92 = proj.GetAlpha(projectileColor);
										if (proj.type == 623 && Main.CurrentDrawnEntityShader != 0)
										{
											color92.A = 127;
										}
										if (proj.type == 995)
										{
											float timeSinceFall;
											float fall;
											Projectile.AI_192_GetJuminoFall(proj, out timeSinceFall, out fall);
											vector81.Y -= 4f;
											vector81.Y += fall;
											float amount = Utils.Remap(timeSinceFall, 0f, 10f, 1f, 0f, true);
											color92 = Color.Lerp(color92, Color.White * proj.Opacity, amount);
										}
										Vector2 origin25 = rectangle22.Size() / 2f;
										if (proj.type == 703)
										{
											rectangle22.Height -= 2;
										}
										if (proj.type == 957)
										{
											float num334 = (float)(Math.Cos((double)((float)Main.mouseTextColor / 255f * 6.2831855f * 2f)) * 4.0);
											num334 *= Math.Max(0f, Math.Min(1f, proj.localAI[0] / 100f));
											float num335 = 0f;
											if (proj.frame > Main.projFrames[proj.type] * 2)
											{
												switch (proj.frame % Main.projFrames[proj.type])
												{
												case 5:
												case 11:
													num335 = 2f;
													break;
												case 6:
												case 10:
													num335 = 6f;
													break;
												case 7:
													num335 = 8f;
													break;
												case 8:
												case 9:
													num335 = 10f;
													break;
												}
											}
											vector81.Y += -2f + num334 + num335;
										}
										if (proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 963)
										{
											float num336 = 2f;
											if (proj.isAPreviewDummy)
											{
												num336 = 0.5f;
											}
											vector81.Y += 0f - num336 + (float)(Math.Cos((double)((float)Main.mouseTextColor / 255f * 6.2831855f * 2f)) * (double)(num336 * 2f));
										}
										if (proj.type == 963 && proj.localAI[1] >= 0f)
										{
											float num337 = proj.localAI[1];
											float num338 = 1f - num337;
											Color color93 = proj.GetAlpha(new Color(255, 220, 220)) * num338 * num338 * 0.8f;
											color93.A = 0;
											short num339 = 536;
											this.LoadProjectile((int)num339);
											Texture2D value81 = TextureAssets.Projectile[(int)num339].Value;
											Vector2 origin26 = value81.Size() * new Vector2(0.5f, 1f);
											float num340 = 9f;
											float num341 = proj.velocity.ToRotation();
											if (proj.velocity.Length() < 0.1f)
											{
												num341 = ((proj.direction == 1) ? 0f : 3.1415927f);
											}
											Vector2 value82 = (num341 + 1.5707964f).ToRotationVector2();
											int num342 = 0;
											while ((float)num342 < num340)
											{
												float num343 = (float)((num342 % 2 != 0) ? 1 : -1);
												float num344 = ((float)num342 + 1f) * num343 * 0.2f * (0.2f + 2f * num337) + num341 + 1.5707964f;
												float num345 = Utils.Remap(Vector2.Dot(num344.ToRotationVector2(), value82), -1f, 1f, 0f, 1f, true);
												float num346 = proj.scale * (0.15f + 0.6f * (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly + (float)num342 * 0.739f))) * num345;
												Texture2D texture38 = value81;
												Vector2 vector136 = vector81;
												Vector2 spinningpoint40 = proj.rotation.ToRotationVector2();
												double radians33 = (double)(6.2831855f * (1f / num340) * (float)num342 + Main.GlobalTimeWrappedHourly);
												vector117 = default(Vector2);
												Vector2 position78 = vector136 + spinningpoint40.RotatedBy(radians33, vector117) * 4f * proj.scale;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture38, position78, sourceRectangle6, color93 * num345, num344, origin26, new Vector2(num346 * 1.5f, num346), 0, 0f);
												num342++;
											}
										}
										if (proj.type == 962)
										{
											float num347 = Utils.Remap(proj.ai[0], 0f, 30f, 1f, 0f, true);
											Color color94 = proj.GetAlpha(Color.White) * num347 * num347 * 0.3f;
											color94.A = 0;
											for (int num348 = 0; num348 < 4; num348++)
											{
												Texture2D texture39 = texture2D4;
												Vector2 vector137 = vector81;
												Vector2 spinningpoint41 = proj.rotation.ToRotationVector2();
												double radians34 = (double)(1.5707964f * (float)num348);
												vector117 = default(Vector2);
												Main.EntitySpriteDraw(texture39, vector137 + spinningpoint41.RotatedBy(radians34, vector117) * 2f * proj.scale, new Rectangle?(rectangle22), color94, proj.rotation, origin25, proj.scale, dir, 0f);
											}
										}
										if (proj.type == 855)
										{
											float y21 = (Main.GlobalTimeWrappedHourly % 6f / 6f * 6.2831855f).ToRotationVector2().Y;
											float num349 = y21 * 0.3f + 0.7f;
											Color color95 = color92 * num349 * 0.3f;
											for (int num350 = 0; num350 < 4; num350++)
											{
												float x13 = 0f;
												float y22 = 0f;
												switch (num350)
												{
												case 0:
													x13 = 4f;
													break;
												case 1:
													x13 = -4f;
													break;
												case 2:
													y22 = 4f;
													break;
												case 3:
													y22 = -4f;
													break;
												}
												Vector2 spinningpoint42 = new Vector2(x13, y22);
												double radians35 = (double)proj.rotation;
												vector117 = default(Vector2);
												Vector2 vector82 = spinningpoint42.RotatedBy(radians35, vector117) * y21;
												Main.spriteBatch.Draw(texture2D4, vector81 + vector82, new Rectangle?(rectangle22), color95, proj.rotation, rectangle22.Size() / 2f, 1f, 0, 0f);
											}
										}
										else if (proj.type == 908)
										{
											PlayerTitaniumStormBuffTextureContent playerTitaniumStormBuff = TextureAssets.RenderTargets.PlayerTitaniumStormBuff;
											vector81 += (Main.GlobalTimeWrappedHourly * 8f + (float)proj.whoAmI).ToRotationVector2() * 4f;
											playerTitaniumStormBuff.Request();
											if (playerTitaniumStormBuff.IsReady)
											{
												texture2D4 = playerTitaniumStormBuff.GetTarget();
											}
											rectangle22 = texture2D4.Frame(Main.projFrames[proj.type], 1, proj.frame, 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
										}
										else if (proj.type == 764)
										{
											this.DrawProjWithStarryTrail(proj, projectileColor, dir);
										}
										else if (proj.type == 856)
										{
											this.DrawProjWithStarryTrail(proj, projectileColor, dir);
										}
										else if (proj.type == 857)
										{
											this.DrawProjWithStarryTrail(proj, projectileColor, dir);
											color92 = Color.White * proj.Opacity * 0.9f;
											color92.A /= 2;
											rectangle22 = texture2D4.Frame(15, 1, proj.frame, 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
											Main.DrawPrettyStarSparkle(proj.Opacity, dir, vector81, color92, proj.GetFirstFractalColor(), proj.localAI[0], 15f, 30f, 30f, 45f, 0f, new Vector2(5f, 2f), Vector2.One);
										}
										else if (proj.type == 539)
										{
											if (proj.ai[0] >= 210f)
											{
												float num351 = proj.ai[0] - 210f;
												num351 /= 20f;
												if (num351 > 1f)
												{
													num351 = 1f;
												}
												Texture2D value136 = TextureAssets.Extra[46].Value;
												Vector2 position79 = vector81;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(value136, position79, sourceRectangle6, new Color(255, 255, 255, 128) * num351, proj.rotation, new Vector2(17f, 22f), proj.scale, dir, 0f);
											}
										}
										else if (proj.type == 773)
										{
											origin25.Y = (float)(rectangle22.Height - 12);
										}
										else if (proj.type == 866)
										{
											origin25.X += 14f;
										}
										else if (proj.type == 759)
										{
											origin25.Y = (float)(rectangle22.Height - 2);
											origin25.X += (float)(dir.HasFlag(1) ? 1 : -1);
										}
										else if (proj.type == 758)
										{
											vector81.Y += (float)(proj.height / 2);
											origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
											origin25.Y -= 4f;
										}
										else if (proj.type == 951)
										{
											vector81.Y += (float)(proj.height / 2);
											vector81.Y -= (float)rectangle22.Height * 0.5f;
											vector81.Y += 4f;
											origin25 = rectangle22.Size() * new Vector2(0.5f, 0.5f);
										}
										else if (proj.type == 833)
										{
											if (proj.frame != 8)
											{
												vector81.Y += (float)(proj.height / 2);
												origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
												origin25.Y -= 4f;
												origin25.X -= (float)(7 * dir.HasFlag(1).ToDirectionInt());
											}
										}
										else if (proj.type == 834 || proj.type == 835)
										{
											if (proj.frame != 10)
											{
												vector81.Y += (float)(proj.height / 2);
												origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
												origin25.Y -= 4f;
												origin25.X -= (float)(2 * dir.HasFlag(1).ToDirectionInt());
											}
										}
										else if (proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718)
										{
											rectangle22 = texture2D4.Frame(3, 1, 0, 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
											int num352 = (int)proj.ai[0];
											Vector2 origin27;
											origin27..ctor((float)(rectangle22.Width / 2), 0f);
											Vector2 vector83 = proj.Size / 2f;
											Color celeb2Color = proj.GetCeleb2Color();
											celeb2Color.A = 127;
											celeb2Color *= 0.8f;
											Rectangle value83 = rectangle22;
											value83.X += value83.Width * 2;
											for (int num353 = proj.oldPos.Length - 1; num353 > 0; num353--)
											{
												Vector2 vector84 = proj.oldPos[num353] + vector83;
												if (!(vector84 == vector83))
												{
													Vector2 value84 = proj.oldPos[num353 - 1] + vector83;
													float num354 = proj.oldRot[num353];
													Vector2 scale13;
													scale13..ctor(Vector2.Distance(vector84, value84) / (float)rectangle22.Width, 1f);
													Color color96 = celeb2Color * (1f - (float)num353 / (float)proj.oldPos.Length);
													if (num352 != 2)
													{
														if (num352 == 5)
														{
															scale13 *= 0.5f;
														}
													}
													else
													{
														Vector2 vector85 = num354.ToRotationVector2();
														int num355 = num353 + proj.timeLeft;
														if (num355 < 0)
														{
															num355 += 20 * (num355 / -20) + 20;
														}
														num355 %= 20;
														float num356 = 0f;
														scale13 *= 0.6f;
														switch (num355)
														{
														case 1:
															num356 = 1f;
															break;
														case 2:
															num356 = 2f;
															break;
														case 3:
															num356 = 3f;
															break;
														case 4:
															num356 = 2f;
															break;
														case 5:
															num356 = 1f;
															break;
														case 7:
															num356 = -1f;
															break;
														case 8:
															num356 = -2f;
															break;
														case 9:
															num356 = -3f;
															break;
														case 10:
															num356 = -2f;
															break;
														case 11:
															num356 = -1f;
															break;
														}
														vector84 += vector85 * num356 * 4f;
													}
													Main.EntitySpriteDraw(texture2D4, vector84 - Main.screenPosition, new Rectangle?(value83), color96, num354, origin27, scale13, dir, 0f);
												}
											}
										}
										else if (proj.type == 663 || proj.type == 665 || proj.type == 667)
										{
											vector81 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
											origin25.Y -= 2f;
											origin25.Y -= 2f;
										}
										else if (proj.type == 691 || proj.type == 692 || proj.type == 693)
										{
											vector81 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
											origin25.Y -= 2f;
											origin25.Y -= 2f;
										}
										else if (proj.type == 677 || proj.type == 678 || proj.type == 679)
										{
											if (proj.spriteDirection == -1)
											{
												dir ^= 3;
											}
											Texture2D value85 = TextureAssets.Extra[83].Value;
											if (proj.type == 678)
											{
												value85 = TextureAssets.Extra[84].Value;
											}
											if (proj.type == 679)
											{
												value85 = TextureAssets.Extra[85].Value;
											}
											Vector2 position22 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											Vector2 origin28 = value85.Size() * new Vector2(0.5f, 1f);
											origin28.Y -= 2f;
											Texture2D texture40 = value85;
											Vector2 position80 = position22;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture40, position80, sourceRectangle6, color92, 0f, origin28, 1f, dir & 1, 0f);
											origin25.X += (float)dir.HasFlag(1).ToDirectionInt();
											vector81.Y += 1f;
											vector81.Y += 2f;
											if (proj.type == 678)
											{
												vector81.Y += -4f;
											}
											if (proj.type == 679)
											{
												vector81.Y -= 2f;
												if (!dir.HasFlag(2))
												{
													origin25.Y += 4f;
												}
												else
												{
													origin25.Y -= 4f;
												}
												origin25.X += (float)(dir.HasFlag(1).ToDirectionInt() * 4);
											}
										}
										else if (proj.type == 602)
										{
											origin25.X = (float)(rectangle22.Width - 6);
											origin25.Y -= 1f;
											rectangle22.Height -= 2;
										}
										else if (proj.type == 589)
										{
											rectangle22 = texture2D4.Frame(5, 1, (int)proj.ai[1], 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
										}
										else if (proj.type == 590)
										{
											if (proj.ai[2] == 1f && proj.frame < 3)
											{
												proj.frame = 3;
											}
											rectangle22 = texture2D4.Frame(6, 1, proj.frame, 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
										}
										else if (proj.type == 836)
										{
											rectangle22 = texture2D4.Frame(4, 1, proj.frame, 0, 0, 0);
											origin25 = rectangle22.Size() / 2f;
										}
										else if (proj.type == 650 || proj.type == 882 || proj.type == 888 || proj.type == 894 || proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 901 || proj.type == 957)
										{
											origin25.Y -= 4f;
										}
										else if (proj.type == 623)
										{
											if (!Main.gamePaused && proj.ai[0] == 2f)
											{
												vector81 += Main.rand.NextVector2Circular(2f, 2f);
											}
											if (Main.CurrentDrawnEntityShader == 0)
											{
												color92.A /= 2;
											}
										}
										else if (proj.type >= 625 && proj.type <= 628)
										{
											color92.A /= 2;
										}
										else if (proj.type == 644)
										{
											Color color97 = Main.hslToRgb(proj.ai[0], 1f, 0.5f, byte.MaxValue).MultiplyRGBA(new Color(255, 255, 255, 0));
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color97, proj.rotation, origin25, proj.scale * 2f, dir, 0f);
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color97, 0f, origin25, proj.scale * 2f, dir, 0f);
											if (proj.ai[1] != -1f && proj.Opacity > 0.3f)
											{
												Vector2 vector86 = Main.projectile[(int)proj.ai[1]].Center - proj.Center;
												Vector2 vector87;
												vector87..ctor(1f, vector86.Length() / (float)texture2D4.Height);
												float rotation29 = vector86.ToRotation() + 1.5707964f;
												float value86 = MathHelper.Distance(30f, proj.localAI[1]) / 20f;
												value86 = MathHelper.Clamp(value86, 0f, 1f);
												if (value86 > 0f)
												{
													Main.EntitySpriteDraw(texture2D4, vector81 + vector86 / 2f, new Rectangle?(rectangle22), color97 * value86, rotation29, origin25, vector87, dir, 0f);
													Main.EntitySpriteDraw(texture2D4, vector81 + vector86 / 2f, new Rectangle?(rectangle22), color92 * value86, rotation29, origin25, vector87 / 2f, dir, 0f);
												}
											}
										}
										else if (proj.type == 658)
										{
											Color color98 = Main.hslToRgb(0.136f, 1f, 0.5f, byte.MaxValue).MultiplyRGBA(new Color(255, 255, 255, 0));
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color98, 0f, origin25, new Vector2(1f, 5f) * proj.scale * 2f, dir, 0f);
										}
										Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color92, proj.rotation, origin25, proj.scale, dir, 0f);
										if (proj.type == 896)
										{
											Texture2D value87 = TextureAssets.GlowMask[278].Value;
											Color color99;
											color99..ctor(150, 150, 150, 100);
											for (int num357 = 0; num357 < 2; num357++)
											{
												Vector2 position23 = vector81 + new Vector2((float)Main.rand.Next(-10, 11) * 0.1f, (float)Main.rand.Next(-10, 11) * 0.1f);
												Main.EntitySpriteDraw(value87, position23, new Rectangle?(rectangle22), color99, proj.rotation, origin25, proj.scale, dir, 0f);
											}
											Main.EntitySpriteDraw(value87, vector81, new Rectangle?(rectangle22), Color.White, proj.rotation, origin25, proj.scale, dir, 0f);
										}
										if (proj.type == 889)
										{
											Texture2D value88 = TextureAssets.GlowMask[276].Value;
											Color color100 = Color.White * (float)Main.mouseTextColor;
											Main.EntitySpriteDraw(value88, vector81, new Rectangle?(rectangle22), color100, proj.rotation, origin25, proj.scale, dir, 0f);
											if (!proj.isAPreviewDummy)
											{
												for (int num358 = 0; num358 < 4; num358++)
												{
													int num359 = 28;
													int num360 = 7 + num358;
													float num361 = 100f;
													bool flag37 = num360 == 8;
													Rectangle value89 = texture2D4.Frame(1, Main.projFrames[proj.type], 0, num360, 0, 0);
													Vector2 value90 = vector81;
													Vector2 vector88 = vector81;
													SpriteEffects effects5 = 0;
													float num362 = Main.GlobalTimeWrappedHourly * 2f;
													switch (num358)
													{
													case 1:
														num362 += 1.5707964f;
														break;
													case 2:
														num362 += 3.1415927f;
														break;
													case 3:
														num362 += 4.712389f;
														break;
													}
													num362 *= 3f;
													float num363 = num362;
													vector88 += num362.ToRotationVector2() * (float)num359;
													if (proj.localAI[0] == num361)
													{
														Main.EntitySpriteDraw(texture2D4, vector88, new Rectangle?(value89), color92, num363, origin25, proj.scale, effects5, 0f);
														if (flag37)
														{
															Main.EntitySpriteDraw(value88, vector88, new Rectangle?(value89), color100, num363, origin25, proj.scale, effects5, 0f);
														}
													}
													else
													{
														Vector2 vector89 = new Vector2((float)num359, -16f) + proj.velocity * 1.5f;
														float num364 = 4f;
														float num365 = -0.35f;
														switch (num358)
														{
														case 1:
															vector89.X *= -1f;
															effects5 = 1;
															num365 = 0.35f;
															num364 = -3f;
															break;
														case 2:
															vector89.Y = 16f;
															num365 = 0.35f;
															num364 = 2f;
															break;
														case 3:
															vector89.X *= -1f;
															vector89.Y = 16f;
															effects5 = 1;
															num365 = -0.35f;
															num364 = -1f;
															break;
														}
														vector89 += (Main.GlobalTimeWrappedHourly * num364).ToRotationVector2() * 4f;
														value90 += vector89;
														float num366 = proj.localAI[0] / num361;
														value90 = Vector2.Lerp(value90, vector88, num366);
														num363 = ((num366 > 0.5f) ? num362 : num365);
														Main.EntitySpriteDraw(texture2D4, value90, new Rectangle?(value89), color92, num363, origin25, proj.scale, effects5, 0f);
														if (flag37)
														{
															Main.EntitySpriteDraw(value88, value90, new Rectangle?(value89), color100, num363, origin25, proj.scale, effects5, 0f);
														}
													}
												}
											}
										}
										if (proj.type == 885 && !proj.isAPreviewDummy)
										{
											for (int num367 = 0; num367 < 2; num367++)
											{
												SpriteEffects effects6 = 0;
												int num368 = -30;
												if (num367 == 1)
												{
													num368 = 30;
													effects6 = 1;
												}
												int num369 = (int)proj.localAI[0];
												if (proj.frame == 6)
												{
													num369 = 0;
												}
												else if (num367 == 1)
												{
													num369 = 2 - num369;
												}
												num369 += 7;
												Rectangle value91 = texture2D4.Frame(1, Main.projFrames[proj.type], 0, num369, 0, 0);
												Vector2 position24 = vector81 + new Vector2((float)num368, 0f);
												Vector2 vector90 = (Main.GlobalTimeWrappedHourly * 2f).ToRotationVector2() * 4f;
												vector90 += proj.velocity * -1.5f;
												Vector2 vector91 = (Main.GlobalTimeWrappedHourly * 1f).ToRotationVector2() * 3f;
												if (num367 == 1)
												{
													position24 += vector90 + vector91;
												}
												else
												{
													position24 -= vector90;
												}
												Main.EntitySpriteDraw(texture2D4, position24, new Rectangle?(value91), color92, 0f, origin25, proj.scale, effects6, 0f);
											}
										}
										if (proj.type == 535)
										{
											for (int num370 = 0; num370 < 1000; num370++)
											{
												if (Main.projectile[num370].active && Main.projectile[num370].owner == proj.owner && Main.projectile[num370].type == 536)
												{
													this.DrawProj(num370);
												}
											}
											return;
										}
										if (proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718)
										{
											rectangle22.X += rectangle22.Width;
											Color celeb2Color2 = proj.GetCeleb2Color();
											celeb2Color2.A = 80;
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), celeb2Color2, proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 702)
										{
											Texture2D value92 = TextureAssets.Flames[5].Value;
											Vector2 origin29 = value92.Size() / 2f;
											Vector2 spinningpoint43 = new Vector2((float)(5 * proj.spriteDirection), -10f);
											double radians36 = (double)proj.rotation;
											vector117 = default(Vector2);
											Vector2 vector92 = spinningpoint43.RotatedBy(radians36, vector117);
											ulong seed2 = (ulong)(proj.localAI[0] / 4f);
											for (int num371 = 0; num371 < 5; num371++)
											{
												Color color101;
												color101..ctor(100, 100, 100, 0);
												float x14 = (float)Utils.RandomInt(ref seed2, -10, 11) * 0.15f;
												float y23 = (float)Utils.RandomInt(ref seed2, -10, 1) * 0.35f;
												Texture2D texture41 = value92;
												Vector2 position81 = vector81 + vector92 + new Vector2(x14, y23);
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture41, position81, sourceRectangle6, color101, proj.rotation, origin29, 1f, dir, 0f);
											}
											return;
										}
										if (proj.type == 663 || proj.type == 665 || proj.type == 667)
										{
											Texture2D value93 = TextureAssets.GlowMask[221].Value;
											int type4 = proj.type;
											if (type4 != 665)
											{
												if (type4 == 667)
												{
													value93 = TextureAssets.GlowMask[223].Value;
												}
											}
											else
											{
												value93 = TextureAssets.GlowMask[222].Value;
											}
											float num372 = (proj.localAI[0] / 100f * 6.2831855f).ToRotationVector2().X * 1f + 1f;
											Color color102 = new Color(140, 100, 40, 0) * (num372 / 4f + 0.5f) * 1f;
											for (float num373 = 0f; num373 < 4f; num373 += 1f)
											{
												Main.EntitySpriteDraw(value93, vector81 + (num373 * 1.5707964f).ToRotationVector2() * num372, new Rectangle?(rectangle22), color102, proj.rotation, origin25, proj.scale, dir, 0f);
											}
											return;
										}
										if (proj.type == 644)
										{
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color92, 0f, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 963)
										{
											int num455 = Main.player[proj.owner].ownedProjectileCounts[970] - 1;
											int num374 = (num455 + 3) % 3;
											int num375 = num455 / 3;
											Vector3 vector93 = Main.rgbToHsl(new Color(250, 150, 180));
											vector93..ctor(0f, 1f, 0.6f);
											if (num375 == 1)
											{
												vector93 = Main.rgbToHsl(Color.HotPink);
												vector93.Z += 0.1f;
												vector93.X -= 0.05f;
											}
											vector93.X = (vector93.X - (float)num375 * 0.13f + 1f) % 1f;
											Color oldColor = Main.hslToRgb(vector93);
											Color color103 = Lighting.GetColor((int)(proj.Center.X / 16f), (int)(proj.Center.Y / 16f), oldColor);
											rectangle22.X += rectangle22.Width * (1 + num374);
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color103, proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 773 && proj.velocity.Length() == 0f)
										{
											Texture2D value137 = TextureAssets.GlowMask[266].Value;
											color107 = Color.White * (float)Main.mouseTextColor;
											Main.EntitySpriteDraw(value137, vector81, new Rectangle?(rectangle22), color107, proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 658)
										{
											Main.EntitySpriteDraw(texture2D4, vector81, new Rectangle?(rectangle22), color92, 0f, origin25, new Vector2(1f, 8f) * proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 602)
										{
											texture2D4 = TextureAssets.Extra[60].Value;
											Color color104 = color92;
											color104.A = 0;
											color104 *= 0.3f;
											origin25 = texture2D4.Size() / 2f;
											Texture2D texture42 = texture2D4;
											Vector2 position82 = vector81;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture42, position82, sourceRectangle6, color104, proj.rotation - 1.5707964f, origin25, proj.scale, dir, 0f);
											texture2D4 = TextureAssets.Extra[59].Value;
											color104 = color92;
											color104.A = 0;
											color104 *= 0.13f;
											origin25 = texture2D4.Size() / 2f;
											Texture2D texture43 = texture2D4;
											Vector2 position83 = vector81;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture43, position83, sourceRectangle6, color104, proj.rotation - 1.5707964f, origin25, proj.scale * 0.9f, dir, 0f);
											return;
										}
										if (proj.type == 539)
										{
											Main.EntitySpriteDraw(TextureAssets.GlowMask[140].Value, vector81, new Rectangle?(rectangle22), new Color(255, 255, 255, 0), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 613)
										{
											Main.EntitySpriteDraw(TextureAssets.GlowMask[189].Value, vector81, new Rectangle?(rectangle22), new Color(128 - proj.alpha / 2, 128 - proj.alpha / 2, 128 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 614)
										{
											Main.EntitySpriteDraw(TextureAssets.GlowMask[190].Value, vector81, new Rectangle?(rectangle22), new Color(128 - proj.alpha / 2, 128 - proj.alpha / 2, 128 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 574)
										{
											Main.EntitySpriteDraw(TextureAssets.GlowMask[148].Value, vector81, new Rectangle?(rectangle22), new Color(255, 255, 255, 0), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 691 || proj.type == 692 || proj.type == 693)
										{
											Texture2D value94 = TextureAssets.GlowMask[235].Value;
											int type4 = proj.type;
											if (type4 != 692)
											{
												if (type4 == 693)
												{
													value94 = TextureAssets.GlowMask[237].Value;
												}
											}
											else
											{
												value94 = TextureAssets.GlowMask[236].Value;
											}
											Main.EntitySpriteDraw(value94, vector81, new Rectangle?(rectangle22), new Color(255, 255, 255, 127), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 590)
										{
											Main.EntitySpriteDraw(TextureAssets.GlowMask[168].Value, vector81, new Rectangle?(rectangle22), new Color(127 - proj.alpha / 2, 127 - proj.alpha / 2, 127 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 623 || (proj.type >= 625 && proj.type <= 628))
										{
											if (Main.player[proj.owner].ghostFade != 0f)
											{
												float num376 = Main.player[proj.owner].ghostFade * 5f;
												for (float num377 = 0f; num377 < 4f; num377 += 1f)
												{
													Texture2D texture44 = texture2D4;
													Vector2 vector138 = vector81;
													Vector2 unitY5 = Vector2.UnitY;
													double radians37 = (double)(num377 * 6.2831855f / 4f);
													vector117 = default(Vector2);
													Main.EntitySpriteDraw(texture44, vector138 + unitY5.RotatedBy(radians37, vector117) * num376, new Rectangle?(rectangle22), color92 * 0.1f, proj.rotation, origin25, proj.scale, dir, 0f);
												}
											}
											if (proj.type == 623 && proj.ai[0] == 2f && proj.frame >= 14)
											{
												this.DrawProj_StardustGuardianPunching(proj);
												return;
											}
										}
										else
										{
											if (proj.type == 643)
											{
												float num378 = (float)Math.Cos((double)(6.2831855f * (proj.localAI[0] / 60f))) + 3f + 3f;
												for (float num379 = 0f; num379 < 4f; num379 += 1f)
												{
													Texture2D texture45 = texture2D4;
													Vector2 vector139 = vector81;
													Vector2 unitY6 = Vector2.UnitY;
													double radians38 = (double)(num379 * 1.5707964f);
													vector117 = default(Vector2);
													Main.EntitySpriteDraw(texture45, vector139 + unitY6.RotatedBy(radians38, vector117) * num378, new Rectangle?(rectangle22), color92 * 0.2f, proj.rotation, origin25, proj.scale, dir, 0f);
												}
												return;
											}
											if (proj.type == 650)
											{
												float num456 = (float)((int)(proj.localAI[0] / 6.2831855f));
												float f = proj.localAI[0] % 6.2831855f - 3.1415927f;
												float num380 = (float)Math.IEEERemainder((double)proj.localAI[1], 1.0);
												if (num380 < 0f)
												{
													num380 += 1f;
												}
												int num381 = (int)Math.Floor((double)proj.localAI[1]);
												float num382 = 5f;
												float num383 = 1f + (float)num381 * 0.02f;
												if (num456 == 1f)
												{
													num382 = 7f;
												}
												Vector2 vector94 = f.ToRotationVector2() * num380 * num382 * proj.scale;
												texture2D4 = TextureAssets.Extra[66].Value;
												Texture2D texture46 = texture2D4;
												Vector2 position84 = vector81 + vector94;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture46, position84, sourceRectangle6, color92, proj.rotation, texture2D4.Size() / 2f, num383, 0, 0f);
											}
										}
										return;
									}
									else
									{
										if (proj.type == 466)
										{
											Vector2 end = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											Texture2D value95 = TextureAssets.Extra[33].Value;
											proj.GetAlpha(projectileColor);
											Vector2 vector95 = new Vector2(proj.scale) / 2f;
											for (int num384 = 0; num384 < 3; num384++)
											{
												if (num384 != 0)
												{
													if (num384 != 1)
													{
														vector95 = new Vector2(proj.scale) * 0.2f;
														DelegateMethods.c_1 = new Color(255, 255, 255, 0) * 0.5f;
													}
													else
													{
														vector95 = new Vector2(proj.scale) * 0.4f;
														DelegateMethods.c_1 = new Color(113, 251, 255, 0) * 0.5f;
													}
												}
												else
												{
													vector95 = new Vector2(proj.scale) * 0.6f;
													DelegateMethods.c_1 = new Color(115, 204, 219, 0) * 0.5f;
												}
												DelegateMethods.f_1 = 1f;
												for (int num385 = proj.oldPos.Length - 1; num385 > 0; num385--)
												{
													if (!(proj.oldPos[num385] == Vector2.Zero))
													{
														Vector2 start = proj.oldPos[num385] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
														Vector2 end2 = proj.oldPos[num385 - 1] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
														SpriteBatch sb5 = Main.spriteBatch;
														Texture2D tex5 = value95;
														Vector2 start9 = start;
														Vector2 end9 = end2;
														Vector2 scale19 = vector95;
														Utils.LaserLineFraming framing5;
														if ((framing5 = Main.<>O.<9>__LightningLaserDraw) == null)
														{
															framing5 = (Main.<>O.<9>__LightningLaserDraw = new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
														}
														Utils.DrawLaser(sb5, tex5, start9, end9, scale19, framing5);
													}
												}
												if (proj.oldPos[0] != Vector2.Zero)
												{
													DelegateMethods.f_1 = 1f;
													Vector2 start2 = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
													SpriteBatch sb6 = Main.spriteBatch;
													Texture2D tex6 = value95;
													Vector2 start10 = start2;
													Vector2 end10 = end;
													Vector2 scale20 = vector95;
													Utils.LaserLineFraming framing6;
													if ((framing6 = Main.<>O.<9>__LightningLaserDraw) == null)
													{
														framing6 = (Main.<>O.<9>__LightningLaserDraw = new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
													}
													Utils.DrawLaser(sb6, tex6, start10, end10, scale20, framing6);
												}
											}
											return;
										}
										if (proj.type == 580)
										{
											Vector2 end3 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											Texture2D value96 = TextureAssets.Extra[33].Value;
											proj.GetAlpha(projectileColor);
											Vector2 vector96 = new Vector2(proj.scale) / 2f;
											for (int num386 = 0; num386 < 2; num386++)
											{
												float num387 = (proj.localAI[1] == -1f || proj.localAI[1] == 1f) ? -0.2f : 0f;
												if (num386 == 0)
												{
													vector96 = new Vector2(proj.scale) * (0.5f + num387);
													DelegateMethods.c_1 = new Color(115, 244, 219, 0) * 0.5f;
												}
												else
												{
													vector96 = new Vector2(proj.scale) * (0.3f + num387);
													DelegateMethods.c_1 = new Color(255, 255, 255, 0) * 0.5f;
												}
												DelegateMethods.f_1 = 1f;
												for (int num388 = proj.oldPos.Length - 1; num388 > 0; num388--)
												{
													if (!(proj.oldPos[num388] == Vector2.Zero))
													{
														Vector2 start3 = proj.oldPos[num388] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
														Vector2 end4 = proj.oldPos[num388 - 1] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
														SpriteBatch sb7 = Main.spriteBatch;
														Texture2D tex7 = value96;
														Vector2 start11 = start3;
														Vector2 end11 = end4;
														Vector2 scale21 = vector96;
														Utils.LaserLineFraming framing7;
														if ((framing7 = Main.<>O.<9>__LightningLaserDraw) == null)
														{
															framing7 = (Main.<>O.<9>__LightningLaserDraw = new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
														}
														Utils.DrawLaser(sb7, tex7, start11, end11, scale21, framing7);
													}
												}
												if (proj.oldPos[0] != Vector2.Zero)
												{
													DelegateMethods.f_1 = 1f;
													Vector2 start4 = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
													SpriteBatch sb8 = Main.spriteBatch;
													Texture2D tex8 = value96;
													Vector2 start12 = start4;
													Vector2 end12 = end3;
													Vector2 scale22 = vector96;
													Utils.LaserLineFraming framing8;
													if ((framing8 = Main.<>O.<9>__LightningLaserDraw) == null)
													{
														framing8 = (Main.<>O.<9>__LightningLaserDraw = new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
													}
													Utils.DrawLaser(sb8, tex8, start12, end12, scale22, framing8);
												}
											}
											return;
										}
										if (proj.type == 445)
										{
											if (Main.player[proj.owner].gravDir == -1f)
											{
												dir |= 2;
											}
											Vector2 vector97 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - Main.screenPosition;
											Texture2D value97 = TextureAssets.Projectile[proj.type].Value;
											Color alpha10 = proj.GetAlpha(projectileColor);
											Vector2 vector98 = Main.player[proj.owner].RotatedRelativePoint(mountedCenter, false, true) + Vector2.UnitY * Main.player[proj.owner].gfxOffY;
											Vector2 vector99 = vector97 + Main.screenPosition - vector98;
											Vector2 vector100 = Vector2.Normalize(vector99);
											float num389 = vector99.Length();
											float num390 = vector99.ToRotation() + 1.5707964f;
											float num391 = -5f;
											float num392 = num391 + 30f;
											new Vector2(2f, num389 - num392);
											Vector2 vector101 = Vector2.Lerp(vector97 + Main.screenPosition, vector98 + vector100 * num392, 0.5f);
											Vector2 unitY7 = Vector2.UnitY;
											double radians39 = (double)(proj.localAI[0] / 60f * 3.1415927f);
											vector117 = default(Vector2);
											Vector2 vector102 = -unitY7.RotatedBy(radians39, vector117);
											Vector2[] array8 = new Vector2[4];
											array8[0] = vector102;
											int num457 = 1;
											Vector2 spinningpoint44 = vector102;
											double radians40 = 1.5707963705062866;
											vector117 = default(Vector2);
											array8[num457] = spinningpoint44.RotatedBy(radians40, vector117);
											int num458 = 2;
											Vector2 spinningpoint45 = vector102;
											double radians41 = 3.1415927410125732;
											vector117 = default(Vector2);
											array8[num458] = spinningpoint45.RotatedBy(radians41, vector117);
											int num459 = 3;
											Vector2 spinningpoint46 = vector102;
											double radians42 = 4.71238899230957;
											vector117 = default(Vector2);
											array8[num459] = spinningpoint46.RotatedBy(radians42, vector117);
											Vector2[] array7 = array8;
											if (num389 > num392)
											{
												for (int num393 = 0; num393 < 2; num393++)
												{
													Color white4 = Color.White;
													if (num393 % 2 == 0)
													{
														white4 = Color.LimeGreen;
														white4.A = 128;
														white4 *= 0.5f;
													}
													else
													{
														white4 = Color.CornflowerBlue;
														white4.A = 128;
														white4 *= 0.5f;
													}
													Vector2 spinningpoint47 = new Vector2(array7[num393].X, 0f);
													double radians43 = (double)num390;
													vector117 = default(Vector2);
													Vector2 vector103 = spinningpoint47.RotatedBy(radians43, vector117) * 4f;
													Main.EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector101 - Main.screenPosition + vector103, new Rectangle?(new Rectangle(0, 0, 1, 1)), white4, num390, Vector2.One / 2f, new Vector2(2f, num389 - num392), dir, 0f);
												}
											}
											int type2 = Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].type;
											Main.instance.LoadItem(type2);
											Texture2D value98 = TextureAssets.Item[type2].Value;
											Color color105 = Lighting.GetColor((int)vector98.X / 16, (int)vector98.Y / 16);
											Texture2D texture47 = value98;
											Vector2 position85 = vector98 - Main.screenPosition + vector100 * num391;
											Rectangle? sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture47, position85, sourceRectangle6, color105, proj.rotation + 1.5707964f + ((dir == null || dir == 2) ? 3.1415927f : 0f), new Vector2((float)((dir != null && dir != 2) ? value98.Width : 0), (float)value98.Height / 2f) + Vector2.UnitY * 1f, Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].scale, dir, 0f);
											Texture2D value138 = TextureAssets.GlowMask[39].Value;
											Vector2 position86 = vector98 - Main.screenPosition + vector100 * num391;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(value138, position86, sourceRectangle6, new Color(255, 255, 255, 0), proj.rotation + 1.5707964f + ((dir == null || dir == 2) ? 3.1415927f : 0f), new Vector2((float)((dir != null && dir != 2) ? value98.Width : 0), (float)value98.Height / 2f) + Vector2.UnitY * 1f, Main.player[proj.owner].inventory[Main.player[proj.owner].selectedItem].scale, dir, 0f);
											if (num389 > num392)
											{
												for (int num394 = 2; num394 < 4; num394++)
												{
													Color white5 = Color.White;
													if (num394 % 2 == 0)
													{
														white5 = Color.LimeGreen;
														white5.A = 128;
														white5 *= 0.5f;
													}
													else
													{
														white5 = Color.CornflowerBlue;
														white5.A = 128;
														white5 *= 0.5f;
													}
													Vector2 spinningpoint48 = new Vector2(array7[num394].X, 0f);
													double radians44 = (double)num390;
													vector117 = default(Vector2);
													Vector2 vector104 = spinningpoint48.RotatedBy(radians44, vector117) * 4f;
													Main.EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector101 - Main.screenPosition + vector104, new Rectangle?(new Rectangle(0, 0, 1, 1)), white5, num390, Vector2.One / 2f, new Vector2(2f, num389 - num392), dir, 0f);
												}
											}
											float num395 = proj.localAI[0] / 60f;
											if (num395 > 0.5f)
											{
												num395 = 1f - num395;
											}
											Texture2D texture48 = value97;
											Vector2 position87 = vector97;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(texture48, position87, sourceRectangle6, alpha10 * num395 * 2f, proj.rotation, new Vector2((float)value97.Width, (float)value97.Height) / 2f, proj.scale, dir, 0f);
											Texture2D value139 = TextureAssets.GlowMask[40].Value;
											Vector2 position88 = vector97;
											sourceRectangle6 = null;
											Main.EntitySpriteDraw(value139, position88, sourceRectangle6, alpha10 * (0.5f - num395) * 2f, proj.rotation, new Vector2((float)value97.Width, (float)value97.Height) / 2f, proj.scale, dir, 0f);
											return;
										}
										if ((proj.type >= 393 && proj.type <= 395) || proj.type == 398 || proj.type == 423 || proj.type == 450)
										{
											Texture2D value99 = TextureAssets.Projectile[proj.type].Value;
											int num396 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
											int y24 = num396 * proj.frame;
											Main.EntitySpriteDraw(value99, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY - 2f), new Rectangle?(new Rectangle(0, y24, value99.Width, num396)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value99.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
											if (proj.type == 398)
											{
												value99 = TextureAssets.MiniMinotaur.Value;
												Main.EntitySpriteDraw(value99, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY - 2f), new Rectangle?(new Rectangle(0, y24, value99.Width, num396)), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2((float)value99.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
											}
											if (proj.type == 423)
											{
												value99 = TextureAssets.GlowMask[0].Value;
												Main.EntitySpriteDraw(value99, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY - 2f), new Rectangle?(new Rectangle(0, y24, value99.Width, num396)), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2((float)value99.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
											}
											return;
										}
										if (proj.type == 385)
										{
											Texture2D value100 = TextureAssets.Projectile[proj.type].Value;
											int num397 = value100.Height / Main.projFrames[proj.type];
											int y25 = num397 * proj.frame;
											int num398 = 8;
											int num399 = 2;
											float value101 = 0.4f;
											for (int num400 = 1; num400 < num398; num400 += num399)
											{
												Vector2[] oldPos3 = proj.oldPos;
												Color newColor3 = projectileColor;
												newColor3 = proj.GetAlpha(newColor3);
												newColor3 *= (float)(num398 - num400) / 15f;
												Color alpha11 = proj.GetAlpha(projectileColor);
												proj.oldPos[num400] - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
												Main.EntitySpriteDraw(value100, proj.oldPos[num400] + new Vector2((float)proj.width, (float)proj.height) / 2f - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y25, value100.Width, num397)), Color.Lerp(alpha11, newColor3, 0.3f), proj.rotation, new Vector2((float)value100.Width / 2f, (float)num397 / 2f), MathHelper.Lerp(proj.scale, value101, (float)num400 / 15f), dir, 0f);
											}
											Main.EntitySpriteDraw(value100, proj.Center - Main.screenPosition + new Vector2(0f, proj.gfxOffY), new Rectangle?(new Rectangle(0, y25, value100.Width, num397)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value100.Width / 2f, (float)num397 / 2f), proj.scale, dir, 0f);
											return;
										}
										if (proj.type == 388)
										{
											Texture2D value102 = TextureAssets.Projectile[proj.type].Value;
											int num401 = value102.Height / Main.projFrames[proj.type];
											int y26 = num401 * proj.frame;
											int num402;
											int num403;
											if (proj.ai[0] == 2f)
											{
												num402 = 10;
												num403 = 1;
											}
											else
											{
												num402 = 3;
												num403 = 1;
											}
											for (int num404 = 1; num404 < num402; num404 += num403)
											{
												Vector2[] oldPos4 = proj.oldPos;
												Color newColor4 = projectileColor;
												newColor4 = proj.GetAlpha(newColor4);
												newColor4 *= (float)(num402 - num404) / 15f;
												Vector2 position25 = proj.oldPos[num404] - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
												Main.EntitySpriteDraw(value102, position25, new Rectangle?(new Rectangle(0, y26, value102.Width, num401)), newColor4, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											Main.EntitySpriteDraw(value102, proj.position - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y26, value102.Width, num401)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											return;
										}
										if (Main.projFrames[proj.type] > 1)
										{
											int num405 = TextureAssets.Projectile[proj.type].Height() / Main.projFrames[proj.type];
											int y27 = num405 * proj.frame;
											if (proj.type == 111)
											{
												int r = (int)Main.player[proj.owner].shirtColor.R;
												int g = (int)Main.player[proj.owner].shirtColor.G;
												int b = (int)Main.player[proj.owner].shirtColor.B;
												color107..ctor((int)((byte)r), (int)((byte)g), (int)((byte)b));
												projectileColor = Lighting.GetColor((int)((double)proj.position.X + (double)proj.width * 0.5) / 16, (int)(((double)proj.position.Y + (double)proj.height * 0.5) / 16.0), color107);
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405)), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												return;
											}
											Color alpha12 = proj.GetAlpha(projectileColor);
											if (proj.type == 211 && Main.CurrentDrawnEntityShader != 0)
											{
												alpha12.A = 127;
											}
											if (proj.type == 344)
											{
												float num406 = MathHelper.Min(60f, proj.ai[0]) / 2f;
												for (float num407 = 0.9f; num407 > 0f; num407 -= 0.25f)
												{
													Vector2 vector105 = num407 * (proj.velocity * 0.33f) * num406;
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) - vector105, new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), alpha12 * (1f - num407) * 0.75f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * (0.4f + (1f - num407) * 0.6f), dir, 0f);
												}
											}
											if (proj.type == 920 || proj.type == 921)
											{
												for (float num408 = 0.25f; num408 < 1f; num408 += 0.5f)
												{
													Vector2 vector106 = num408 * proj.velocity * 4f;
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) - vector106, new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), alpha12 * (1f - num408) * 0.75f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
											}
											Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), alpha12, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											if (proj.type == 966)
											{
												Vector2 vector107;
												vector107..ctor(0f, -30f);
												vector107.Y += -1f + (float)(Math.Cos((double)((float)Main.mouseTextColor / 255f * 6.2831855f * 2f)) * 2.0);
												Vector2 vector108;
												vector108..ctor(-1f, -1f);
												float num409 = 3f;
												Vector2 vector109 = proj.Center + vector107;
												Vector2 vector110 = proj.Center;
												int num410 = (int)proj.ai[1];
												if (num410 >= 0)
												{
													if (Main.npc[num410].active)
													{
														vector110 = Main.npc[num410].Center;
													}
													else
													{
														num410 = -1;
													}
												}
												if (num410 <= -1)
												{
													Player player5 = Main.player[proj.owner];
													vector110 = ((!player5.dead) ? player5.Center : (vector109 + new Vector2(2f, 0f)));
												}
												vector108 += (vector110 - vector109).SafeNormalize(Vector2.Zero) * num409;
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector107, new Rectangle?(new Rectangle(0, num405, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), alpha12, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector107 + vector108, new Rectangle?(new Rectangle(0, num405 * 2, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), alpha12, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											ModProjectile modProjectile = proj.ModProjectile;
											Asset<Texture2D> glowTexture;
											if (modProjectile != null && ModContent.RequestIfExists<Texture2D>(modProjectile.GlowTexture, out glowTexture, 1))
											{
												Main.EntitySpriteDraw(glowTexture.Value, proj.position - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type == 335)
											{
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), new Color(100, 100, 100, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type == 897 || proj.type == 899)
											{
												int num411 = 279;
												if (proj.type == 899)
												{
													num411 = 281;
												}
												Main.EntitySpriteDraw(TextureAssets.GlowMask[num411].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), Color.White, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type == 891)
											{
												float num412 = Utils.WrappedLerp(0.6f, 1f, (float)((int)Main.timeForVisualEffects % 100) / 100f);
												color107..ctor(num412, num412, num412, 150f);
												Main.EntitySpriteDraw(TextureAssets.GlowMask[277].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), color107, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type == 595)
											{
												Player player6 = Main.player[proj.owner];
												if (player6.active && player6.body == 208)
												{
													for (float num413 = 0f; num413 <= 1f; num413 += 0.2f)
													{
														Color underShirtColor = player6.underShirtColor;
														underShirtColor.A = (byte)(120f * (1f - num413 * 0.5f));
														Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), underShirtColor, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * MathHelper.Lerp(0.8f, 1.3f, num413), dir, 0f);
													}
												}
											}
											if (proj.type == 387)
											{
												Main.EntitySpriteDraw(TextureAssets.EyeLaserSmall.Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405)), new Color(255, 255, 255, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type != 525 && proj.type != 960)
											{
												return;
											}
											int num414 = Main.TryInteractingWithMoneyTrough(proj);
											if (num414 == 0)
											{
												return;
											}
											int num415 = (int)((projectileColor.R + projectileColor.G + projectileColor.B) / 3);
											if (num415 > 10)
											{
												int num416 = 94;
												if (proj.type == 960)
												{
													num416 = 244;
												}
												Color selectionGlowColor = Colors.GetSelectionGlowColor(num414 == 2, num415);
												Main.EntitySpriteDraw(TextureAssets.Extra[num416].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1)), selectionGlowColor, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), 1f, dir, 0f);
											}
											return;
										}
										else
										{
											if (proj.type == 383 || proj.type == 399)
											{
												Texture2D value103 = TextureAssets.Projectile[proj.type].Value;
												Texture2D texture49 = value103;
												Vector2 position89 = proj.Center - Main.screenPosition;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(texture49, position89, sourceRectangle6, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value103.Width, (float)value103.Height) / 2f, proj.scale, dir, 0f);
												return;
											}
											if (proj.type == 157 || proj.type == 378)
											{
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + (float)(proj.width / 2), proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2)), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
												return;
											}
											if (proj.type == 306)
											{
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + (float)(proj.width / 2), proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2)), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
												return;
											}
											if (proj.type == 256)
											{
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + (float)(proj.width / 2), proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2)), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
												return;
											}
											if (proj.aiStyle == 27)
											{
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + (float)(proj.width / 2), proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2)), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)TextureAssets.Projectile[proj.type].Width(), 0f), proj.scale, dir, 0f);
												return;
											}
											if (proj.aiStyle == 19)
											{
												Main.DrawProj_Spear(proj, ref projectileColor, ref dir);
												return;
											}
											if (proj.type == 451)
											{
												Texture2D value140 = TextureAssets.Projectile[proj.type].Value;
												Vector2 position90 = proj.Center - Main.screenPosition;
												Rectangle? sourceRectangle6 = null;
												Main.EntitySpriteDraw(value140, position90, sourceRectangle6, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)TextureAssets.Projectile[proj.type].Width(), 0f), proj.scale, dir, 0f);
												return;
											}
											if (proj.type == 434)
											{
												Vector2 vector111;
												vector111..ctor(proj.ai[0], proj.ai[1]);
												Vector2 v = proj.position - vector111;
												float num417 = (float)Math.Sqrt((double)(v.X * v.X + v.Y * v.Y));
												new Vector2(4f, num417);
												float rotation30 = v.ToRotation() + 1.5707964f;
												Vector2 vector112 = Vector2.Lerp(proj.position, vector111, 0.5f);
												Color red = Color.Red;
												red.A = 0;
												Color white6 = Color.White;
												red *= proj.localAI[0];
												white6 *= proj.localAI[0];
												float num418 = (float)Math.Sqrt((double)(proj.damage / 50));
												Main.EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector112 - Main.screenPosition, new Rectangle?(new Rectangle(0, 0, 1, 1)), red, rotation30, Vector2.One / 2f, new Vector2(2f * num418, num417 + 8f), dir, 0f);
												Main.EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector112 - Main.screenPosition, new Rectangle?(new Rectangle(0, 0, 1, 1)), red, rotation30, Vector2.One / 2f, new Vector2(4f * num418, num417), dir, 0f);
												Main.EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector112 - Main.screenPosition, new Rectangle?(new Rectangle(0, 0, 1, 1)), white6, rotation30, Vector2.One / 2f, new Vector2(2f * num418, num417), dir, 0f);
												return;
											}
											if (proj.type == 94 && proj.ai[1] > 6f)
											{
												for (int num419 = 0; num419 < 10; num419++)
												{
													Color alpha13 = proj.GetAlpha(projectileColor);
													float num420 = (float)(9 - num419) / 9f;
													alpha13.R = (byte)((float)alpha13.R * num420);
													alpha13.G = (byte)((float)alpha13.G * num420);
													alpha13.B = (byte)((float)alpha13.B * num420);
													alpha13.A = (byte)((float)alpha13.A * num420);
													float num421 = (float)(9 - num419) / 9f;
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.oldPos[num419].X - Main.screenPosition.X + num138 + (float)num137, proj.oldPos[num419].Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha13, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num421 * proj.scale, dir, 0f);
												}
											}
											if (proj.type == 301)
											{
												for (int num422 = 0; num422 < 10; num422++)
												{
													Color alpha14 = proj.GetAlpha(projectileColor);
													float num423 = (float)(9 - num422) / 9f;
													alpha14.R = (byte)((float)alpha14.R * num423);
													alpha14.G = (byte)((float)alpha14.G * num423);
													alpha14.B = (byte)((float)alpha14.B * num423);
													alpha14.A = (byte)((float)alpha14.A * num423);
													float num424 = (float)(9 - num422) / 9f;
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.oldPos[num422].X - Main.screenPosition.X + num138 + (float)num137, proj.oldPos[num422].Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha14, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num424 * proj.scale, dir, 0f);
												}
											}
											if (proj.type == 323 && proj.alpha == 0)
											{
												for (int num425 = 1; num425 < 8; num425++)
												{
													float num426 = proj.velocity.X * (float)num425;
													float num427 = proj.velocity.Y * (float)num425;
													Color alpha15 = proj.GetAlpha(projectileColor);
													float num428 = 0f;
													if (num425 == 1)
													{
														num428 = 0.7f;
													}
													if (num425 == 2)
													{
														num428 = 0.6f;
													}
													if (num425 == 3)
													{
														num428 = 0.5f;
													}
													if (num425 == 4)
													{
														num428 = 0.4f;
													}
													if (num425 == 5)
													{
														num428 = 0.3f;
													}
													if (num425 == 6)
													{
														num428 = 0.2f;
													}
													if (num425 == 7)
													{
														num428 = 0.1f;
													}
													alpha15.R = (byte)((float)alpha15.R * num428);
													alpha15.G = (byte)((float)alpha15.G * num428);
													alpha15.B = (byte)((float)alpha15.B * num428);
													alpha15.A = (byte)((float)alpha15.A * num428);
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num426, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num427), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha15, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num428 + 0.2f, dir, 0f);
												}
											}
											if (proj.type == 117 && proj.ai[0] > 3f)
											{
												for (int num429 = 1; num429 < 5; num429++)
												{
													float num430 = proj.velocity.X * (float)num429;
													float num431 = proj.velocity.Y * (float)num429;
													Color alpha16 = proj.GetAlpha(projectileColor);
													float num432 = 0f;
													if (num429 == 1)
													{
														num432 = 0.4f;
													}
													if (num429 == 2)
													{
														num432 = 0.3f;
													}
													if (num429 == 3)
													{
														num432 = 0.2f;
													}
													if (num429 == 4)
													{
														num432 = 0.1f;
													}
													alpha16.R = (byte)((float)alpha16.R * num432);
													alpha16.G = (byte)((float)alpha16.G * num432);
													alpha16.B = (byte)((float)alpha16.B * num432);
													alpha16.A = (byte)((float)alpha16.A * num432);
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num430, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num431), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha16, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
											}
											if (proj.bobber)
											{
												if (proj.ai[1] > 0f && proj.ai[0] == 1f)
												{
													int num433 = (int)proj.ai[1];
													Vector2 center5 = proj.Center;
													float rotation31 = proj.rotation;
													Vector2 vector113 = center5;
													float num434 = polePosX - vector113.X;
													float num435 = polePosY - vector113.Y;
													rotation31 = (float)Math.Atan2((double)num435, (double)num434);
													if (proj.velocity.X > 0f)
													{
														dir = 0;
														rotation31 = (float)Math.Atan2((double)num435, (double)num434);
														rotation31 += 0.785f;
														if (proj.ai[1] == 2342f)
														{
															rotation31 -= 0.785f;
														}
													}
													else
													{
														dir = 1;
														rotation31 = (float)Math.Atan2((double)(0f - num435), (double)(0f - num434));
														rotation31 -= 0.785f;
														if (proj.ai[1] == 2342f)
														{
															rotation31 += 0.785f;
														}
													}
													Main.instance.LoadItem(num433);
													Texture2D value104 = TextureAssets.Item[num433].Value;
													Rectangle value105 = value104.Frame(1, 1, 0, 0, 0, 0);
													if (ItemID.Sets.IsFood[num433] && Main.itemAnimations[num433] != null)
													{
														value105 = Main.itemAnimations[num433].GetFrame(value104, 0);
													}
													Main.EntitySpriteDraw(value104, new Vector2(center5.X - Main.screenPosition.X, center5.Y - Main.screenPosition.Y), new Rectangle?(value105), projectileColor, rotation31, new Vector2((float)(value105.Width / 2), (float)(value105.Height / 2)), proj.scale, dir, 0f);
												}
												else if (proj.ai[0] <= 1f)
												{
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
													if (proj.glowMask != -1)
													{
														Texture2D value106 = TextureAssets.GlowMask[(int)proj.glowMask].Value;
														Color newColor5 = Color.White;
														if (proj.type == 993)
														{
															newColor5..ctor(Main.DiscoR, Main.DiscoG, Main.DiscoB);
														}
														Main.EntitySpriteDraw(value106, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, value106.Width, value106.Height)), proj.GetAlpha(newColor5), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
													}
												}
											}
											else
											{
												if (proj.ownerHitCheck && Main.player[proj.owner].gravDir == -1f)
												{
													if (Main.player[proj.owner].direction == 1)
													{
														dir = 1;
													}
													else if (Main.player[proj.owner].direction == -1)
													{
														dir = 0;
													}
												}
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												if (proj.glowMask != -1)
												{
													Main.EntitySpriteDraw(TextureAssets.GlowMask[(int)proj.glowMask].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
												if (proj.type == 473)
												{
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), new Color(255, 255, 0, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
												if (proj.type >= 511 && proj.type <= 513)
												{
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), proj.GetAlpha(projectileColor) * 0.25f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * (1f + proj.Opacity * 1.75f), dir, 0f);
												}
												ModProjectile modProjectile2 = proj.ModProjectile;
												Asset<Texture2D> glowTexture2;
												if (modProjectile2 != null && ModContent.RequestIfExists<Texture2D>(modProjectile2.GlowTexture, out glowTexture2, 2))
												{
													Main.EntitySpriteDraw(glowTexture2.Value, proj.position - Main.screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
												if (proj.type == 312)
												{
													ulong seed3 = Main.TileFrameSeed;
													for (int num436 = 0; num436 < 4; num436++)
													{
														Vector2 vector114;
														vector114..ctor((float)Utils.RandomInt(ref seed3, -2, 3), (float)Utils.RandomInt(ref seed3, -2, 3));
														Main.EntitySpriteDraw(TextureAssets.GlowMask[(int)proj.glowMask].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector114, new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), new Color(255, 255, 255, 255) * 0.2f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
													}
												}
											}
											if (proj.type == 106)
											{
												Texture2D value141 = TextureAssets.LightDisc.Value;
												Vector2 position26;
												position26..ctor(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2));
												Rectangle value107 = value141.Frame(1, 1, 0, 0, 0, 0);
												Main.EntitySpriteDraw(value141, position26, new Rectangle?(value107), new Color(200, 200, 200, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
											if (proj.type >= 326 && proj.type <= 328)
											{
												ulong seed4 = Main.TileFrameSeed;
												for (int num437 = 0; num437 < 4; num437++)
												{
													Vector2 vector115;
													vector115..ctor((float)Utils.RandomInt(ref seed4, -2, 3), (float)Utils.RandomInt(ref seed4, -2, 3));
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2)) + vector115 - proj.velocity * 0.25f * (float)num437, new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), new Color(120, 120, 120, 60) * 1f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale - (float)num437 * 0.2f, dir, 0f);
												}
											}
											if (proj.type == 554 || proj.type == 603)
											{
												for (int num438 = 1; num438 < 5; num438++)
												{
													float num439 = proj.velocity.X * (float)num438 * 0.5f;
													float num440 = proj.velocity.Y * (float)num438 * 0.5f;
													Color alpha17 = proj.GetAlpha(projectileColor);
													float num441 = 0f;
													if (num438 == 1)
													{
														num441 = 0.4f;
													}
													if (num438 == 2)
													{
														num441 = 0.3f;
													}
													if (num438 == 3)
													{
														num441 = 0.2f;
													}
													if (num438 == 4)
													{
														num441 = 0.1f;
													}
													alpha17.R = (byte)((float)alpha17.R * num441);
													alpha17.G = (byte)((float)alpha17.G * num441);
													alpha17.B = (byte)((float)alpha17.B * num441);
													alpha17.A = (byte)((float)alpha17.A * num441);
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num439, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num440), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha17, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
												}
												return;
											}
											if (proj.type == 604)
											{
												int num442 = (int)proj.ai[1] + 1;
												if (num442 > 7)
												{
													num442 = 7;
												}
												for (int num443 = 1; num443 < num442; num443++)
												{
													float num444 = proj.velocity.X * (float)num443 * 1.5f;
													float num445 = proj.velocity.Y * (float)num443 * 1.5f;
													Color alpha18 = proj.GetAlpha(projectileColor);
													if (num443 == 1)
													{
													}
													if (num443 == 2)
													{
													}
													if (num443 == 3)
													{
													}
													if (num443 == 4)
													{
													}
													float num446 = 0.4f - (float)num443 * 0.06f;
													num446 *= 1f - (float)proj.alpha / 255f;
													alpha18.R = (byte)((float)alpha18.R * num446);
													alpha18.G = (byte)((float)alpha18.G * num446);
													alpha18.B = (byte)((float)alpha18.B * num446);
													alpha18.A = (byte)((float)alpha18.A * num446 / 2f);
													float scale14 = proj.scale;
													scale14 -= (float)num443 * 0.1f;
													Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num444, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num445), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha18, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), scale14, dir, 0f);
												}
												return;
											}
											if (proj.type != 553)
											{
												return;
											}
											for (int num447 = 1; num447 < 5; num447++)
											{
												float num448 = proj.velocity.X * (float)num447 * 0.4f;
												float num449 = proj.velocity.Y * (float)num447 * 0.4f;
												Color alpha19 = proj.GetAlpha(projectileColor);
												float num450 = 0f;
												if (num447 == 1)
												{
													num450 = 0.4f;
												}
												if (num447 == 2)
												{
													num450 = 0.3f;
												}
												if (num447 == 3)
												{
													num450 = 0.2f;
												}
												if (num447 == 4)
												{
													num450 = 0.1f;
												}
												alpha19.R = (byte)((float)alpha19.R * num450);
												alpha19.G = (byte)((float)alpha19.G * num450);
												alpha19.B = (byte)((float)alpha19.B * num450);
												alpha19.A = (byte)((float)alpha19.A * num450);
												Main.EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - Main.screenPosition.X + num138 + (float)num137 - num448, proj.position.Y - Main.screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num449), new Rectangle?(new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height())), alpha19, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060004A5 RID: 1189 RVA: 0x000EDF0C File Offset: 0x000EC10C
		private static void DrawProj_Flamethrower(Projectile proj)
		{
			bool flag = proj.ai[0] == 1f;
			float num = 60f;
			float num2 = 12f;
			float fromMax = num + num2;
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Color transparent = Color.Transparent;
			Color color;
			color..ctor(255, 80, 20, 200);
			Color color2;
			color2..ctor(255, 255, 20, 70);
			Color color3 = Color.Lerp(new Color(255, 80, 20, 100), color2, 0.25f);
			Color color4;
			color4..ctor(80, 80, 80, 100);
			float num3 = 0.35f;
			float num4 = 0.7f;
			float num5 = 0.85f;
			float num6 = (proj.localAI[0] > num - 10f) ? 0.175f : 0.2f;
			if (flag)
			{
				color..ctor(95, 120, 255, 200);
				color2..ctor(50, 180, 255, 70);
				color3..ctor(95, 160, 255, 100);
				color4..ctor(33, 125, 202, 100);
			}
			int verticalFrames = 7;
			float num7 = Utils.Remap(proj.localAI[0], num, fromMax, 1f, 0f, true);
			float num8 = Math.Min(proj.localAI[0], 20f);
			float num9 = Utils.Remap(proj.localAI[0], 0f, fromMax, 0f, 1f, true);
			float num10 = Utils.Remap(num9, 0.2f, 0.5f, 0.25f, 1f, true);
			Rectangle rectangle = (!flag) ? value.Frame(1, verticalFrames, 0, 3, 0, 0) : value.Frame(1, verticalFrames, 0, (int)Utils.Remap(num9, 0.5f, 1f, 3f, 5f, true), 0, 0);
			if (num9 >= 1f)
			{
				return;
			}
			for (int i = 0; i < 2; i++)
			{
				for (float num11 = 1f; num11 >= 0f; num11 -= num6)
				{
					Color color7 = (num9 < 0.1f) ? Color.Lerp(Color.Transparent, color, Utils.GetLerpValue(0f, 0.1f, num9, true)) : ((num9 < 0.2f) ? Color.Lerp(color, color2, Utils.GetLerpValue(0.1f, 0.2f, num9, true)) : ((num9 < num3) ? color2 : ((num9 < num4) ? Color.Lerp(color2, color3, Utils.GetLerpValue(num3, num4, num9, true)) : ((num9 < num5) ? Color.Lerp(color3, color4, Utils.GetLerpValue(num4, num5, num9, true)) : ((num9 >= 1f) ? Color.Transparent : Color.Lerp(color4, Color.Transparent, Utils.GetLerpValue(num5, 1f, num9, true)))))));
					float num12 = (1f - num11) * Utils.Remap(num9, 0f, 0.2f, 0f, 1f, true);
					Vector2 vector = proj.Center - Main.screenPosition + proj.velocity * (0f - num8) * num11;
					Color color5 = color7 * num12;
					Color color6 = color5;
					if (!flag)
					{
						color6.G /= 2;
						color6.B /= 2;
						color6.A = (byte)Math.Min((float)color5.A + 80f * num12, 255f);
						Utils.Remap(proj.localAI[0], 20f, fromMax, 0f, 1f, true);
					}
					float num13 = 1f / num6 * (num11 + 1f);
					float num14 = proj.rotation + num11 * 1.5707964f + Main.GlobalTimeWrappedHourly * num13 * 2f;
					float num15 = proj.rotation - num11 * 1.5707964f - Main.GlobalTimeWrappedHourly * num13 * 2f;
					if (i != 0)
					{
						if (i == 1)
						{
							if (!flag)
							{
								Main.EntitySpriteDraw(value, vector + proj.velocity * (0f - num8) * num6 * 0.2f, new Rectangle?(rectangle), color5 * num7 * 0.25f, num14 + 1.5707964f, rectangle.Size() / 2f, num10 * 0.75f, 0, 0f);
								Main.EntitySpriteDraw(value, vector, new Rectangle?(rectangle), color5 * num7, num15 + 1.5707964f, rectangle.Size() / 2f, num10 * 0.75f, 0, 0f);
							}
						}
					}
					else
					{
						Main.EntitySpriteDraw(value, vector + proj.velocity * (0f - num8) * num6 * 0.5f, new Rectangle?(rectangle), color6 * num7 * 0.25f, num14 + 0.7853982f, rectangle.Size() / 2f, num10, 0, 0f);
						Main.EntitySpriteDraw(value, vector, new Rectangle?(rectangle), color6 * num7, num15, rectangle.Size() / 2f, num10, 0, 0f);
					}
				}
			}
		}

		// Token: 0x060004A6 RID: 1190 RVA: 0x000EE470 File Offset: 0x000EC670
		private static void DrawProj_Spear(Projectile proj, ref Color projectileColor, ref SpriteEffects dir)
		{
			dir = 0;
			float num = (float)Math.Atan2((double)proj.velocity.Y, (double)proj.velocity.X) + 2.355f;
			Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
			Player player = Main.player[proj.owner];
			Rectangle value = asset.Frame(1, 1, 0, 0, 0, 0);
			Rectangle rect = proj.getRect();
			Vector2 vector = Vector2.Zero;
			if (player.direction > 0)
			{
				dir = 1;
				vector.X = (float)asset.Width();
				num -= 1.5707964f;
			}
			if (player.gravDir == -1f)
			{
				if (proj.direction == 1)
				{
					dir = 3;
					vector..ctor((float)asset.Width(), (float)asset.Height());
					num -= 1.5707964f;
				}
				else if (proj.direction == -1)
				{
					dir = 2;
					vector..ctor(0f, (float)asset.Height());
					num += 1.5707964f;
				}
			}
			Vector2.Lerp(vector, value.Center.ToVector2(), 0.25f);
			float num2 = 0f;
			Vector2 vector2 = proj.Center + new Vector2(0f, proj.gfxOffY);
			Rectangle extensionBox;
			if (proj.AI_019_Spears_GetExtensionHitbox(out extensionBox))
			{
				Vector2 value2 = player.RotatedRelativePoint(player.MountedCenter, false, false);
				float num3 = extensionBox.Size().Length() / proj.Hitbox.Size().Length();
				new Color(255, 255, 255, 0) * 1f;
				float num4 = Utils.Remap((float)player.itemAnimation, (float)player.itemAnimationMax, (float)player.itemAnimationMax / 3f, 0f, 1f, true);
				float num5 = Utils.Remap(num4, 0f, 0.3f, 0f, 1f, true) * Utils.Remap(num4, 0.3f, 1f, 1f, 0f, true);
				num5 = 1f - (1f - num5) * (1f - num5);
				Vector2 vector3 = extensionBox.Center.ToVector2() + new Vector2(0f, proj.gfxOffY);
				Vector2.Lerp(value2, vector3, 1.1f);
				Texture2D value3 = TextureAssets.Extra[98].Value;
				Vector2 origin = value3.Size() / 2f;
				Color color = new Color(255, 255, 255, 0) * 0.5f;
				int type = proj.type;
				if (type <= 105)
				{
					if (type != 46)
					{
						if (type == 105)
						{
							color..ctor(255, 220, 80, 0);
						}
					}
					else
					{
						color..ctor(180, 80, 255, 0);
					}
				}
				else if (type != 153)
				{
					if (type == 342)
					{
						color..ctor(80, 140, 255, 0);
					}
				}
				else
				{
					color..ctor(255, 50, 30, 15);
				}
				float num6 = num - 0.7853982f * (float)proj.spriteDirection;
				if (player.gravDir < 0f)
				{
					num6 -= 1.5707964f * (float)proj.spriteDirection;
				}
				Main.EntitySpriteDraw(value3, Vector2.Lerp(vector3, vector2, 0.5f) - Main.screenPosition, null, color * num5, num6, origin, new Vector2(num5 * num3, num3) * proj.scale * num3, dir, 0f);
				Main.EntitySpriteDraw(value3, Vector2.Lerp(vector3, vector2, 1f) - Main.screenPosition, null, color * num5, num6, origin, new Vector2(num5 * num3, num3 * 1.5f) * proj.scale * num3, dir, 0f);
				Main.EntitySpriteDraw(value3, Vector2.Lerp(value2, vector2, num4 * 1.5f - 0.5f) - Main.screenPosition + new Vector2(0f, 2f), null, color * num5, num6, origin, new Vector2(num5 * num3 * 1f * num5, num3 * 2f * num5) * proj.scale * num3, dir, 0f);
				for (float num7 = 0.4f; num7 <= 1f; num7 += 0.1f)
				{
					Vector2 vector4 = Vector2.Lerp(value2, vector3, num7 + 0.2f);
					Main.EntitySpriteDraw(value3, vector4 - Main.screenPosition + new Vector2(0f, 2f), null, color * num5 * 0.75f * num7, num6, origin, new Vector2(num5 * num3 * 1f * num5, num3 * 2f * num5) * proj.scale * num3, dir, 0f);
				}
				extensionBox.Offset((int)(0f - Main.screenPosition.X), (int)(0f - Main.screenPosition.Y));
			}
			Main.EntitySpriteDraw(asset.Value, vector2 - Main.screenPosition, new Rectangle?(value), proj.GetAlpha(projectileColor), num, vector, proj.scale, dir, 0f);
			rect.Offset((int)(0f - Main.screenPosition.X), (int)(0f - Main.screenPosition.Y));
			Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, rect, Color.White * num2);
		}

		// Token: 0x060004A7 RID: 1191 RVA: 0x000EEA58 File Offset: 0x000ECC58
		private static void DrawPrettyStarSparkle(float opacity, SpriteEffects dir, Vector2 drawpos, Color drawColor, Color shineColor, float flareCounter, float fadeInStart, float fadeInEnd, float fadeOutStart, float fadeOutEnd, float rotation, Vector2 scale, Vector2 fatness)
		{
			Texture2D value = TextureAssets.Extra[98].Value;
			Color color = shineColor * opacity * 0.5f;
			color.A = 0;
			Vector2 origin = value.Size() / 2f;
			Color color2 = drawColor * 0.5f;
			float num = Utils.GetLerpValue(fadeInStart, fadeInEnd, flareCounter, true) * Utils.GetLerpValue(fadeOutEnd, fadeOutStart, flareCounter, true);
			Vector2 vector = new Vector2(fatness.X * 0.5f, scale.X) * num;
			Vector2 vector2 = new Vector2(fatness.Y * 0.5f, scale.Y) * num;
			color *= num;
			color2 *= num;
			Main.EntitySpriteDraw(value, drawpos, null, color, 1.5707964f + rotation, origin, vector, dir, 0f);
			Main.EntitySpriteDraw(value, drawpos, null, color, 0f + rotation, origin, vector2, dir, 0f);
			Main.EntitySpriteDraw(value, drawpos, null, color2, 1.5707964f + rotation, origin, vector * 0.6f, dir, 0f);
			Main.EntitySpriteDraw(value, drawpos, null, color2, 0f + rotation, origin, vector2 * 0.6f, dir, 0f);
		}

		// Token: 0x060004A8 RID: 1192 RVA: 0x000EEBB8 File Offset: 0x000ECDB8
		private static void DrawProj_FlailChains(Projectile proj, Vector2 mountedCenter)
		{
			Player player = Main.player[proj.owner];
			Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
			playerArmPosition -= Vector2.UnitY * player.gfxOffY;
			Rectangle? sourceRectangle = null;
			float num = 0f;
			int type = proj.type;
			Asset<Texture2D> asset;
			if (type <= 154)
			{
				if (type <= 35)
				{
					if (type == 25)
					{
						asset = TextureAssets.Chain2;
						goto IL_104;
					}
					if (type == 35)
					{
						asset = TextureAssets.Chain6;
						goto IL_104;
					}
				}
				else
				{
					if (type == 63)
					{
						asset = TextureAssets.Chain7;
						goto IL_104;
					}
					if (type == 154)
					{
						asset = TextureAssets.Chain13;
						goto IL_104;
					}
				}
			}
			else if (type <= 757)
			{
				if (type == 247)
				{
					asset = TextureAssets.Chain19;
					goto IL_104;
				}
				if (type == 757)
				{
					asset = TextureAssets.Extra[99];
					sourceRectangle = new Rectangle?(asset.Frame(1, 6, 0, 0, 0, 0));
					num = -2f;
					goto IL_104;
				}
			}
			else
			{
				if (type == 947)
				{
					asset = TextureAssets.Chain41;
					goto IL_104;
				}
				if (type == 948)
				{
					asset = TextureAssets.Chain43;
					goto IL_104;
				}
			}
			asset = TextureAssets.Chain3;
			IL_104:
			Vector2 origin = (sourceRectangle != null) ? (sourceRectangle.Value.Size() / 2f) : (asset.Size() / 2f);
			Vector2 center = proj.Center;
			Vector2 v = playerArmPosition.MoveTowards(center, 4f) - center;
			Vector2 vector = v.SafeNormalize(Vector2.Zero);
			float num2 = (float)((sourceRectangle != null) ? sourceRectangle.Value.Height : asset.Height()) + num;
			float rotation = vector.ToRotation() + 1.5707964f;
			int num3 = 0;
			float num4 = v.Length() + num2 / 2f;
			int num5 = 0;
			while (num4 > 0f)
			{
				Color color = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
				type = proj.type;
				if (type != 757)
				{
					if (type == 948)
					{
						if (num5 >= 6)
						{
							asset = TextureAssets.Chain41;
						}
						else if (num5 >= 4)
						{
							asset = TextureAssets.Chain42;
							byte b = 140;
							if (color.R < b)
							{
								color.R = b;
							}
							if (color.G < b)
							{
								color.G = b;
							}
							if (color.B < b)
							{
								color.B = b;
							}
						}
						else
						{
							color = Color.White;
						}
						num5++;
					}
				}
				else
				{
					sourceRectangle = new Rectangle?(asset.Frame(1, 6, 0, num3 % 6, 0, 0));
				}
				Main.spriteBatch.Draw(asset.Value, center - Main.screenPosition, sourceRectangle, color, rotation, origin, 1f, 0, 0f);
				center += vector * num2;
				num3++;
				num4 -= num2;
			}
		}

		// Token: 0x060004A9 RID: 1193 RVA: 0x000EEE98 File Offset: 0x000ED098
		private static void DrawProj_FlailChains_Old(Projectile proj, Vector2 mountedCenter)
		{
			Vector2 vector;
			vector..ctor(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float rotation = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
			if (proj.alpha == 0)
			{
				int num3 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num3 = 1;
				}
				if (Main.player[proj.owner].direction == 1)
				{
					Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(num2 * (float)num3), (double)(num * (float)num3));
				}
				else
				{
					Main.player[proj.owner].itemRotation = (float)Math.Atan2((double)(num2 * (float)num3), (double)(num * (float)num3));
				}
			}
			bool flag = true;
			int num4 = 0;
			int num5 = 25;
			if (proj.type == 757)
			{
				num5 = 12;
			}
			while (flag)
			{
				float num6 = (float)Math.Sqrt((double)(num * num + num2 * num2));
				if (num6 < (float)num5)
				{
					flag = false;
				}
				else if (float.IsNaN(num6))
				{
					flag = false;
				}
				else
				{
					num6 = ((proj.type == 154 || proj.type == 247) ? (18f / num6) : ((proj.type != 757) ? (12f / num6) : (16f / num6)));
					num *= num6;
					num2 *= num6;
					vector.X += num;
					vector.Y += num2;
					num = mountedCenter.X - vector.X;
					num2 = mountedCenter.Y - vector.Y;
					Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (proj.type == 25)
					{
						Main.EntitySpriteDraw(TextureAssets.Chain2.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain2.Width(), TextureAssets.Chain2.Height())), color, rotation, new Vector2((float)TextureAssets.Chain2.Width() * 0.5f, (float)TextureAssets.Chain2.Height() * 0.5f), 1f, 0, 0f);
					}
					else if (proj.type == 35)
					{
						Main.EntitySpriteDraw(TextureAssets.Chain6.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain6.Width(), TextureAssets.Chain6.Height())), color, rotation, new Vector2((float)TextureAssets.Chain6.Width() * 0.5f, (float)TextureAssets.Chain6.Height() * 0.5f), 1f, 0, 0f);
					}
					else if (proj.type == 757)
					{
						Texture2D value = TextureAssets.Extra[99].Value;
						Rectangle r = value.Frame(1, 6, 0, num4 % 6, 0, 0);
						Main.EntitySpriteDraw(value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(value.Frame(1, 6, 0, num4 % 6, 0, 0)), color, rotation, r.Size() / 2f, 1f, 0, 0f);
					}
					else if (proj.type == 247)
					{
						Main.EntitySpriteDraw(TextureAssets.Chain19.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain19.Width(), TextureAssets.Chain19.Height())), color, rotation, new Vector2((float)TextureAssets.Chain19.Width() * 0.5f, (float)TextureAssets.Chain19.Height() * 0.5f), 1f, 0, 0f);
					}
					else if (proj.type == 63)
					{
						Main.EntitySpriteDraw(TextureAssets.Chain7.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain7.Width(), TextureAssets.Chain7.Height())), color, rotation, new Vector2((float)TextureAssets.Chain7.Width() * 0.5f, (float)TextureAssets.Chain7.Height() * 0.5f), 1f, 0, 0f);
					}
					else if (proj.type == 154)
					{
						Main.EntitySpriteDraw(TextureAssets.Chain13.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain13.Width(), TextureAssets.Chain13.Height())), color, rotation, new Vector2((float)TextureAssets.Chain13.Width() * 0.5f, (float)TextureAssets.Chain13.Height() * 0.5f), 1f, 0, 0f);
					}
					else
					{
						Main.EntitySpriteDraw(TextureAssets.Chain3.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain3.Width(), TextureAssets.Chain3.Height())), color, rotation, new Vector2((float)TextureAssets.Chain3.Width() * 0.5f, (float)TextureAssets.Chain3.Height() * 0.5f), 1f, 0, 0f);
					}
				}
				num4++;
			}
		}

		// Token: 0x060004AA RID: 1194 RVA: 0x000EF4D0 File Offset: 0x000ED6D0
		private static Color TryApplyingPlayerStringColor(int playerStringColor, Color stringColor)
		{
			if (playerStringColor > 0)
			{
				stringColor = WorldGen.paintColor(playerStringColor);
				if (stringColor.R < 75)
				{
					stringColor.R = 75;
				}
				if (stringColor.G < 75)
				{
					stringColor.G = 75;
				}
				if (stringColor.B < 75)
				{
					stringColor.B = 75;
				}
				if (playerStringColor <= 13)
				{
					if (playerStringColor != 0)
					{
						if (playerStringColor != 13)
						{
							goto IL_BA;
						}
						stringColor..ctor(20, 20, 20);
						goto IL_BA;
					}
				}
				else if (playerStringColor != 14)
				{
					if (playerStringColor == 27)
					{
						stringColor..ctor(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						goto IL_BA;
					}
					if (playerStringColor != 28)
					{
						goto IL_BA;
					}
					stringColor..ctor(163, 116, 91);
					goto IL_BA;
				}
				stringColor..ctor(200, 200, 200);
				IL_BA:
				stringColor.A = (byte)((float)stringColor.A * 0.4f);
			}
			return stringColor;
		}

		// Token: 0x060004AB RID: 1195 RVA: 0x000EF5B0 File Offset: 0x000ED7B0
		private static void DrawProj_FishingLine(Projectile proj, ref float polePosX, ref float polePosY, Vector2 mountedCenter)
		{
			Player player = Main.player[proj.owner];
			polePosX = mountedCenter.X;
			polePosY = mountedCenter.Y;
			polePosY += player.gfxOffY;
			if (player.mount.Active && player.mount.Type == 52)
			{
				polePosX -= (float)(player.direction * 14);
				polePosY -= -10f;
			}
			int type = player.inventory[player.selectedItem].type;
			Color stringColor;
			stringColor..ctor(200, 200, 200, 100);
			if (type == 2294)
			{
				stringColor..ctor(100, 180, 230, 100);
			}
			if (type == 2295)
			{
				stringColor..ctor(250, 90, 70, 100);
			}
			if (type == 2293)
			{
				stringColor..ctor(203, 190, 210, 100);
			}
			if (type == 2421)
			{
				stringColor..ctor(183, 77, 112, 100);
			}
			if (type == 2422)
			{
				stringColor..ctor(255, 226, 116, 100);
			}
			if (type == 4325)
			{
				stringColor..ctor(200, 100, 100, 100);
			}
			if (type == 4442)
			{
				stringColor..ctor(100, 100, 200, 100);
			}
			ProjectileLoader.ModifyFishingLine(proj, ref polePosX, ref polePosY, ref stringColor);
			ItemLoader.ModifyFishingLine(proj, ref polePosX, ref polePosY, ref stringColor);
			stringColor = Main.TryApplyingPlayerStringColor(Main.player[proj.owner].stringColor, stringColor);
			float gravDir = Main.player[proj.owner].gravDir;
			if (type <= 2421)
			{
				switch (type)
				{
				case 2289:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 36f * gravDir;
					break;
				case 2290:
					break;
				case 2291:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 34f * gravDir;
					break;
				case 2292:
					polePosX += (float)(46 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 34f * gravDir;
					break;
				case 2293:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 34f * gravDir;
					break;
				case 2294:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 30f * gravDir;
					break;
				case 2295:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 30f * gravDir;
					break;
				case 2296:
					polePosX += (float)(43 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 30f * gravDir;
					break;
				default:
					if (type == 2421)
					{
						polePosX += (float)(47 * Main.player[proj.owner].direction);
						if (Main.player[proj.owner].direction < 0)
						{
							polePosX -= 13f;
						}
						polePosY -= 36f * gravDir;
					}
					break;
				}
			}
			else if (type != 2422)
			{
				if (type != 4325)
				{
					if (type == 4442)
					{
						polePosX += (float)(44 * Main.player[proj.owner].direction);
						if (Main.player[proj.owner].direction < 0)
						{
							polePosX -= 13f;
						}
						polePosY -= 32f * gravDir;
					}
				}
				else
				{
					polePosX += (float)(44 * Main.player[proj.owner].direction);
					if (Main.player[proj.owner].direction < 0)
					{
						polePosX -= 13f;
					}
					polePosY -= 32f * gravDir;
				}
			}
			else
			{
				polePosX += (float)(47 * Main.player[proj.owner].direction);
				if (Main.player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 32f * gravDir;
			}
			if (gravDir == -1f)
			{
				polePosY -= 12f;
			}
			Vector2 vector;
			vector..ctor(polePosX, polePosY);
			vector = Main.player[proj.owner].RotatedRelativePoint(vector + new Vector2(8f), false, true) - new Vector2(8f);
			float num = proj.position.X + (float)proj.width * 0.5f - vector.X;
			float num2 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
			Math.Sqrt((double)(num * num + num2 * num2));
			float num3 = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
			bool flag = true;
			if (num == 0f && num2 == 0f)
			{
				flag = false;
			}
			else
			{
				float num4 = (float)Math.Sqrt((double)(num * num + num2 * num2));
				num4 = 12f / num4;
				num *= num4;
				num2 *= num4;
				vector.X -= num;
				vector.Y -= num2;
				num = proj.position.X + (float)proj.width * 0.5f - vector.X;
				num2 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
			}
			while (flag)
			{
				float num5 = 12f;
				float num6 = (float)Math.Sqrt((double)(num * num + num2 * num2));
				float num7 = num6;
				if (float.IsNaN(num6) || float.IsNaN(num7))
				{
					flag = false;
				}
				else
				{
					if (num6 < 20f)
					{
						num5 = num6 - 8f;
						flag = false;
					}
					num6 = 12f / num6;
					num *= num6;
					num2 *= num6;
					vector.X += num;
					vector.Y += num2;
					num = proj.position.X + (float)proj.width * 0.5f - vector.X;
					num2 = proj.position.Y + (float)proj.height * 0.1f - vector.Y;
					if (num7 > 12f)
					{
						float num8 = 0.3f;
						float num9 = Math.Abs(proj.velocity.X) + Math.Abs(proj.velocity.Y);
						if (num9 > 16f)
						{
							num9 = 16f;
						}
						num9 = 1f - num9 / 16f;
						num8 *= num9;
						num9 = num7 / 80f;
						if (num9 > 1f)
						{
							num9 = 1f;
						}
						num8 *= num9;
						if (num8 < 0f)
						{
							num8 = 0f;
						}
						num9 = 1f - proj.localAI[0] / 100f;
						num8 *= num9;
						if (num2 > 0f)
						{
							num2 *= 1f + num8;
							num *= 1f - num8;
						}
						else
						{
							num9 = Math.Abs(proj.velocity.X) / 3f;
							if (num9 > 1f)
							{
								num9 = 1f;
							}
							num9 -= 0.5f;
							num8 *= num9;
							if (num8 > 0f)
							{
								num8 *= 2f;
							}
							num2 *= 1f + num8;
							num *= 1f - num8;
						}
					}
					num3 = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
					Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), stringColor);
					Main.EntitySpriteDraw(TextureAssets.FishingLine.Value, new Vector2(vector.X - Main.screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, vector.Y - Main.screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f), new Rectangle?(new Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num5)), color, num3, new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), 1f, 0, 0f);
				}
			}
		}

		// Token: 0x060004AC RID: 1196 RVA: 0x000EFF10 File Offset: 0x000EE110
		private void DrawProj_StardustGuardianPunching(Projectile proj)
		{
			if (!Main.gamePaused)
			{
				int num = 6;
				Texture2D value = TextureAssets.Extra[46].Value;
				int num2 = 20;
				Vector2 vector = proj.Center - proj.rotation.ToRotationVector2() * (float)num2 * (float)proj.spriteDirection;
				for (int i = 0; i < num; i++)
				{
					float num3 = Main.rand.NextFloat();
					float num4 = Utils.GetLerpValue(0f, 0.3f, num3, true) * Utils.GetLerpValue(1f, 0.5f, num3, true);
					float amount = Utils.GetLerpValue(0f, 0.3f, num3, true) * Utils.GetLerpValue(1f, 0.5f, num3, true);
					float num5 = MathHelper.Lerp(0.6f, 1f, amount);
					Color color;
					color..ctor(255, 255, 255, 127);
					color *= num4 * 0.5f;
					Vector2 origin = value.Size() / 2f;
					Color color2 = Color.White * num4;
					color2.A /= 2;
					Color color3 = color2 * 0.5f;
					float num6 = 1f;
					float num7 = 1f + Main.rand.NextFloat() * 0.5f;
					float num8 = Main.rand.NextFloatDirection();
					Vector2 vector2 = new Vector2(0.8f) * num7 * num6 * num5;
					float num9 = 20f + MathHelper.Lerp(0f, 20f, num3) + num7 * 16f;
					float num10 = proj.rotation + ((proj.direction == 1) ? 0f : 3.1415927f) + num8 * 6.2831855f * 0.04f;
					float rotation = num10 + 1.5707964f;
					Vector2 position = vector + num10.ToRotationVector2() * num9 + Main.rand.NextVector2Circular(20f, 20f) - Main.screenPosition;
					color *= num6;
					color3 *= num6;
					SpriteEffects effects = 0;
					Main.spriteBatch.Draw(value, position, null, color, rotation, origin, vector2, effects, 0f);
					Main.spriteBatch.Draw(value, position, null, color3, rotation, origin, vector2 * 0.8f, effects, 0f);
				}
			}
		}

		// Token: 0x060004AD RID: 1197 RVA: 0x000F019C File Offset: 0x000EE39C
		private void DrawProj_PiercingStarlight(Projectile proj)
		{
			float num = proj.ai[1];
			if (num == 0f)
			{
				num = 1f;
			}
			int num2 = (int)Math.Ceiling((double)(3f * num));
			this.LoadProjectile(proj.type);
			this.LoadItem(4923);
			int num3 = 2;
			Vector2 vector = proj.Center - proj.rotation.ToRotationVector2() * (float)num3;
			for (int i = 0; i < 1; i++)
			{
				float num4 = Main.rand.NextFloat();
				float num5 = Utils.GetLerpValue(0f, 0.3f, num4, true) * Utils.GetLerpValue(1f, 0.5f, num4, true);
				Color color = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates())) * num5;
				Texture2D value = TextureAssets.Item[4923].Value;
				Vector2 origin = value.Size() / 2f;
				float num6 = Main.rand.NextFloatDirection();
				float num7 = 8f + MathHelper.Lerp(0f, 20f, num4) + Main.rand.NextFloat() * 6f;
				float num8 = proj.rotation + num6 * 6.2831855f * 0.04f;
				float num9 = num8 + 0.7853982f;
				Vector2 position = vector + num8.ToRotationVector2() * num7 + Main.rand.NextVector2Circular(8f, 8f) - Main.screenPosition;
				SpriteEffects spriteEffects = 0;
				if (proj.rotation < -1.5707964f || proj.rotation > 1.5707964f)
				{
					num9 += 1.5707964f;
					spriteEffects |= 1;
				}
				Main.spriteBatch.Draw(value, position, null, color, num9, origin, 1f, spriteEffects, 0f);
			}
			for (int j = 0; j < num2; j++)
			{
				float num10 = Main.rand.NextFloat();
				float num11 = Utils.GetLerpValue(0f, 0.3f, num10, true) * Utils.GetLerpValue(1f, 0.5f, num10, true);
				float amount = Utils.GetLerpValue(0f, 0.3f, num10, true) * Utils.GetLerpValue(1f, 0.5f, num10, true);
				float num12 = MathHelper.Lerp(0.6f, 1f, amount);
				Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.25f, 0f, new float?((Main.rand.NextFloat() * 0.33f + Main.GlobalTimeWrappedHourly) % 1f));
				Texture2D value2 = TextureAssets.Projectile[proj.type].Value;
				Color color2 = fairyQueenWeaponsColor;
				color2 *= num11 * 0.5f;
				Vector2 origin2 = value2.Size() / 2f;
				Color color3 = Color.White * num11;
				color3.A /= 2;
				Color color4 = color3 * 0.5f;
				float num13 = 1f;
				float num14 = (num - 1f) / 2f;
				float num15 = Main.rand.NextFloat() * 2f * num;
				num15 += num14;
				float num16 = Main.rand.NextFloatDirection();
				Vector2 vector2 = new Vector2(2.8f + num15 * (1f + num14), 1f) * num13 * num12;
				float value3 = 50f * num;
				Vector2 vector3 = proj.rotation.ToRotationVector2() * (float)((j >= 1) ? 56 : 0);
				float num17 = 0.03f - (float)j * 0.012f;
				num17 /= num;
				float num18 = 30f + MathHelper.Lerp(0f, value3, num10) + num15 * 16f;
				float num19 = proj.rotation + num16 * 6.2831855f * num17;
				float rotation = num19;
				Vector2 position2 = vector + num19.ToRotationVector2() * num18 + Main.rand.NextVector2Circular(20f, 20f) + vector3 - Main.screenPosition;
				color2 *= num13;
				color4 *= num13;
				SpriteEffects effects = 0;
				Main.spriteBatch.Draw(value2, position2, null, color2, rotation, origin2, vector2, effects, 0f);
				Main.spriteBatch.Draw(value2, position2, null, color4, rotation, origin2, vector2 * 0.6f, effects, 0f);
			}
		}

		// Token: 0x060004AE RID: 1198 RVA: 0x000F0620 File Offset: 0x000EE820
		private void DrawProj_FairyQueenLance(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			int num = 40;
			int num2 = 180 * num;
			num2 /= 2;
			Color color = proj.AI_171_GetColor();
			Color color2 = color;
			color.A = 0;
			color2.A /= 2;
			Texture2D value = TextureAssets.Extra[178].Value;
			Vector2 origin = value.Frame(1, 1, 0, 0, 0, 0).Size() * new Vector2(0f, 0.5f);
			Vector2 scale;
			scale..ctor((float)(num2 / value.Width), 2f);
			Vector2 scale2;
			scale2..ctor((float)(num2 / value.Width) * 0.5f, 2f);
			Color color3 = color * Utils.GetLerpValue(60f, 55f, proj.localAI[0], true) * Utils.GetLerpValue(0f, 10f, proj.localAI[0], true);
			Main.spriteBatch.Draw(value, vector, null, color3, proj.rotation, origin, scale2, 0, 0f);
			Main.spriteBatch.Draw(value, vector, null, color3 * 0.3f, proj.rotation, origin, scale, 0, 0f);
			Texture2D value2 = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin2 = value2.Frame(1, 1, 0, 0, 0, 0).Size() / 2f;
			Color color4 = Color.White * Utils.GetLerpValue(0f, 20f, proj.localAI[0], true);
			color4.A /= 2;
			float num3 = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(55f, 60f, proj.localAI[0], true));
			float lerpValue = Utils.GetLerpValue(10f, 60f, proj.localAI[0], false);
			if (lerpValue > 0f)
			{
				float lerpValue2 = Utils.GetLerpValue(0f, 1f, proj.velocity.Length(), true);
				for (float num4 = 1f; num4 > 0f; num4 -= 0.16666667f)
				{
					Vector2 vector2 = proj.rotation.ToRotationVector2() * -120f * num4 * lerpValue2;
					Main.spriteBatch.Draw(value2, vector + vector2, null, color * lerpValue * (1f - num4), proj.rotation, origin2, num3, 0, 0f);
					Main.spriteBatch.Draw(value2, vector + vector2, null, new Color(255, 255, 255, 0) * 0.15f * lerpValue * (1f - num4), proj.rotation, origin2, num3 * 0.85f, 0, 0f);
				}
				for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
				{
					Vector2 vector3 = (num5 * 6.2831855f + proj.rotation).ToRotationVector2() * 2f * num3;
					Main.spriteBatch.Draw(value2, vector + vector3, null, color2 * lerpValue, proj.rotation, origin2, num3, 0, 0f);
				}
				Main.spriteBatch.Draw(value2, vector, null, color2 * lerpValue, proj.rotation, origin2, num3 * 1.1f, 0, 0f);
			}
			Main.spriteBatch.Draw(value2, vector, null, color4, proj.rotation, origin2, num3, 0, 0f);
		}

		// Token: 0x060004AF RID: 1199 RVA: 0x000F0A10 File Offset: 0x000EEC10
		private void DrawProj_FairyQueenRangedItemShot(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0f, 0f, null);
			Color fairyQueenWeaponsColor2 = proj.GetFairyQueenWeaponsColor(0.5f, 0f, null);
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Frame(1, 1, 0, 0, 0, 0).Size() / 2f;
			Color color = Color.White * proj.Opacity;
			color.A /= 2;
			float num = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(0f, 5f, proj.ai[0], true));
			float opacity = proj.Opacity;
			if (opacity > 0f)
			{
				float lerpValue = Utils.GetLerpValue(0f, 1f, proj.velocity.Length(), true);
				for (float num2 = 0f; num2 < 1f; num2 += 0.16666667f)
				{
					Vector2 vector2 = proj.rotation.ToRotationVector2() * -120f * num2 * lerpValue;
					Main.spriteBatch.Draw(value, vector + vector2, null, fairyQueenWeaponsColor * opacity * (1f - num2), proj.rotation, origin, num, 0, 0f);
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					Vector2 vector3 = (num3 * 6.2831855f + proj.rotation).ToRotationVector2() * 4f * num;
					Main.spriteBatch.Draw(value, vector + vector3, null, fairyQueenWeaponsColor2 * opacity, proj.rotation, origin, num, 0, 0f);
				}
			}
			Main.spriteBatch.Draw(value, vector, null, color, proj.rotation, origin, num, 0, 0f);
		}

		// Token: 0x060004B0 RID: 1200 RVA: 0x000F0C34 File Offset: 0x000EEE34
		private void DrawProj_EmpressBlade(Projectile proj, float hueOverride)
		{
			Main.CurrentDrawnEntityShader = -1;
			this.PrepareDrawnProjectileDrawing(proj);
			Vector2 vector = proj.Center - Main.screenPosition;
			proj.GetFairyQueenWeaponsColor(0f, 0f, new float?(hueOverride));
			Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.5f, 0f, new float?(hueOverride));
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Frame(1, 1, 0, 0, 0, 0).Size() / 2f;
			Color color = Color.White * proj.Opacity;
			color.A = (byte)((float)color.A * 0.7f);
			fairyQueenWeaponsColor.A /= 2;
			float scale = proj.scale;
			float num = proj.rotation - 1.5707964f;
			float num2 = proj.Opacity * 0.3f;
			if (num2 > 0f)
			{
				float lerpValue = Utils.GetLerpValue(60f, 50f, proj.ai[0], true);
				float num3 = Utils.GetLerpValue(70f, 50f, proj.ai[0], true) * Utils.GetLerpValue(40f, 45f, proj.ai[0], true);
				for (float num4 = 0f; num4 < 1f; num4 += 0.16666667f)
				{
					Vector2 vector2 = num.ToRotationVector2() * -120f * num4 * lerpValue;
					Main.EntitySpriteDraw(value, vector + vector2, null, fairyQueenWeaponsColor * num2 * (1f - num4) * num3, num, origin, scale * 1.5f, 0, 0f);
				}
				for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
				{
					Vector2 vector3 = (num5 * 6.2831855f + num).ToRotationVector2() * 4f * scale;
					Main.EntitySpriteDraw(value, vector + vector3, null, fairyQueenWeaponsColor * num2, num, origin, scale, 0, 0f);
				}
			}
			Main.EntitySpriteDraw(value, vector, null, color, num, origin, scale, 0, 0f);
			Main.EntitySpriteDraw(value, vector, null, fairyQueenWeaponsColor * num2 * 0.5f, num, origin, scale, 0, 0f);
		}

		// Token: 0x060004B1 RID: 1201 RVA: 0x000F0EA8 File Offset: 0x000EF0A8
		private void DrawProj_CoolWhipMinion(Projectile proj)
		{
			Vector2 vector = proj.Center - Main.screenPosition;
			Color color = Color.White * 0.5f;
			color.A = 0;
			Color color2 = color;
			color2.A = 127;
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Frame(1, 1, 0, 0, 0, 0).Size() / 2f;
			Color color3 = Color.White * proj.Opacity;
			color3.A /= 2;
			int num = 1;
			float opacity = proj.Opacity;
			if (opacity > 0f)
			{
				for (float num2 = 0f; num2 < 4f; num2 += 1f)
				{
					Vector2 vector2 = proj.velocity * (0f - num2);
					Main.spriteBatch.Draw(value, vector + vector2, null, color * opacity * ((4f - num2) / 4f), proj.rotation, origin, (float)num, 0, 0f);
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					Vector2 vector3 = (num3 * 6.2831855f + proj.rotation).ToRotationVector2() * 4f * (float)num;
					Main.spriteBatch.Draw(value, vector + vector3, null, color2 * opacity, proj.rotation, origin, (float)num, 0, 0f);
				}
			}
			Main.spriteBatch.Draw(value, vector, null, color3, proj.rotation, origin, (float)num, 0, 0f);
		}

		// Token: 0x060004B2 RID: 1202 RVA: 0x000F1070 File Offset: 0x000EF270
		private void DrawMurderAurora(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Size() / 2f;
			float num = Main.GlobalTimeWrappedHourly % 10f / 10f;
			Vector2 vector = proj.Center - Main.screenPosition;
			float[] array = new float[15];
			float[] array2 = new float[15];
			float[] array3 = new float[15];
			float[] array4 = new float[15];
			float[] array5 = new float[15];
			int num2 = 210;
			float num3 = Utils.GetLerpValue(0f, 60f, (float)proj.timeLeft, true) * Utils.GetLerpValue((float)num2, (float)(num2 - 60), (float)proj.timeLeft, true);
			float amount = Utils.GetLerpValue(0f, 60f, (float)proj.timeLeft, true) * Utils.GetLerpValue((float)num2, 90f, (float)proj.timeLeft, true);
			amount = MathHelper.Lerp(0.2f, 0.5f, amount);
			float num9 = 800f / (float)value.Width;
			float num4 = num9 * 0.8f;
			float num5 = (num9 - num4) / 15f;
			float num6 = 30f;
			float num7 = 300f;
			Vector2 vector2;
			vector2..ctor(3f, 6f);
			for (int i = 0; i < 15; i++)
			{
				float num10 = (float)(i + 1) / 50f;
				float num8 = (float)Math.Sin((double)(num * 6.2831855f + 1.5707964f + (float)i / 2f));
				array[i] = num8 * (num7 - (float)i * 3f);
				array2[i] = (float)Math.Sin((double)(num * 6.2831855f * 2f + 1.0471976f + (float)i)) * num6;
				array2[i] -= (float)i * 3f;
				array3[i] = (float)i / 15f * 2f + num;
				array3[i] = (num8 * 0.5f + 0.5f) * 0.6f + num;
				array4[i] = (float)(1.0 - Math.Pow((double)(1f * (float)i / 15f), 2.0));
				array5[i] = num4 + (float)(i + 1) * num5;
				array5[i] *= 0.3f;
				Color color = Main.hslToRgb(array3[i] % 1f, 1f, 0.5f, byte.MaxValue) * num3 * amount;
				color.A /= 4;
				float rotation = 1.5707964f + num8 * 0.7853982f * -0.3f + 3.1415927f * (float)i;
				Main.EntitySpriteDraw(value, vector + new Vector2(array[i], array2[i]), null, color, rotation, origin, new Vector2(array5[i], array5[i]) * vector2, 0, 0f);
			}
		}

		// Token: 0x060004B3 RID: 1203 RVA: 0x000F136C File Offset: 0x000EF56C
		private void DrawWhip(Projectile proj)
		{
			List<Vector2> list = new List<Vector2>();
			Projectile.FillWhipControlPoints(proj, list);
			Texture2D value = TextureAssets.FishingLine.Value;
			Rectangle value2 = value.Frame(1, 1, 0, 0, 0, 0);
			Vector2 origin;
			origin..ctor((float)(value2.Width / 2), 2f);
			Color originalColor = Color.White;
			int type = proj.type;
			switch (type)
			{
			case 847:
				originalColor = Color.OrangeRed;
				break;
			case 848:
				originalColor = Color.DarkBlue;
				break;
			case 849:
				originalColor = Color.SlateBlue;
				originalColor = Color.Black;
				break;
			default:
				switch (type)
				{
				case 912:
					originalColor = Color.LightBlue;
					break;
				case 913:
					originalColor = Color.Firebrick;
					break;
				case 914:
					originalColor = Color.ForestGreen;
					break;
				case 915:
					originalColor = Color.White;
					break;
				default:
					if (type == 952)
					{
						originalColor = Color.Tan;
					}
					break;
				}
				break;
			}
			Vector2 vector = list[0];
			for (int i = 0; i < list.Count - 1; i++)
			{
				Vector2 vector2 = list[i];
				Vector2 vector3 = list[i + 1] - vector2;
				float rotation = vector3.ToRotation() - 1.5707964f;
				Color color = Lighting.GetColor(vector2.ToTileCoordinates(), originalColor);
				Vector2 scale;
				scale..ctor(1f, (vector3.Length() + 2f) / (float)value2.Height);
				Main.spriteBatch.Draw(value, vector - Main.screenPosition, new Rectangle?(value2), color, rotation, origin, scale, 0, 0f);
				vector += vector3;
			}
			type = proj.type;
			if (type <= 849)
			{
				if (type == 841)
				{
					vector = Main.DrawWhip_WhipBland(proj, list);
					return;
				}
				switch (type)
				{
				case 847:
					vector = Main.DrawWhip_WhipSword(proj, list);
					return;
				case 848:
					vector = Main.DrawWhip_WhipMace(proj, list);
					return;
				case 849:
					vector = Main.DrawWhip_WhipScythe(proj, list);
					return;
				default:
					return;
				}
			}
			else
			{
				switch (type)
				{
				case 912:
					vector = Main.DrawWhip_CoolWhip(proj, list);
					return;
				case 913:
					vector = Main.DrawWhip_FireWhip(proj, list);
					return;
				case 914:
					vector = Main.DrawWhip_ThornWhip(proj, list);
					return;
				case 915:
					vector = Main.DrawWhip_RainbowWhip(proj, list);
					return;
				default:
					if (type != 952)
					{
						return;
					}
					vector = Main.DrawWhip_BoneWhip(proj, list);
					return;
				}
			}
		}

		// Token: 0x060004B4 RID: 1204 RVA: 0x000F15BC File Offset: 0x000EF7BC
		public static Vector2 DrawWhip_BoneWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				if (i != 0)
				{
					if (i != 19)
					{
						rectangle.Y = height * (1 + i % 3);
					}
					else
					{
						rectangle.Y = height * 4;
					}
				}
				else
				{
					origin.Y -= 4f;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, 1f, 0, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004B5 RID: 1205 RVA: 0x000F16EC File Offset: 0x000EF8EC
		public static Vector2 DrawWhip_CoolWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				if (i != 0)
				{
					switch (i)
					{
					case 3:
					case 5:
					case 7:
						rectangle.Y = height;
						goto IL_F0;
					case 9:
					case 11:
					case 13:
						rectangle.Y = height * 2;
						goto IL_F0;
					case 15:
					case 17:
						rectangle.Y = height * 3;
						goto IL_F0;
					case 19:
						rectangle.Y = height * 4;
						goto IL_F0;
					}
					flag = false;
				}
				else
				{
					origin.Y -= 4f;
				}
				IL_F0:
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), alpha, rotation, origin, 1f, 0, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004B6 RID: 1206 RVA: 0x000F1880 File Offset: 0x000EFA80
		public static Vector2 DrawWhip_FireWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				if (i != 0)
				{
					switch (i)
					{
					case 3:
					case 5:
					case 7:
						rectangle.Y = height;
						goto IL_F0;
					case 9:
					case 11:
					case 13:
						rectangle.Y = height * 2;
						goto IL_F0;
					case 15:
					case 17:
						rectangle.Y = height * 3;
						goto IL_F0;
					case 19:
						rectangle.Y = height * 4;
						goto IL_F0;
					}
					flag = false;
				}
				else
				{
					origin.Y -= 4f;
				}
				IL_F0:
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), alpha, rotation, origin, 1f, 0, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004B7 RID: 1207 RVA: 0x000F1A14 File Offset: 0x000EFC14
		public static Vector2 DrawWhip_RainbowWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			float miscCounterNormalized = Main.player[proj.owner].miscCounterNormalized;
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				if (i != 0)
				{
					if (i != 39)
					{
						flag = (i % 2 == 0);
						rectangle.Y = height * (1 + i % 3);
					}
					else
					{
						rectangle.Y = height * 4;
					}
				}
				else
				{
					origin.Y -= 4f;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					Color color = Main.hslToRgb((miscCounterNormalized * 5f + (float)i * 0.05f) % 1f, 1f, 0.5f, byte.MaxValue);
					Color color2 = color;
					float lerpValue = Utils.GetLerpValue((float)(controlPoints.Count - 10), (float)(controlPoints.Count - 2), (float)i, true);
					float num = MathHelper.Lerp(1f, 1f, lerpValue);
					color2.A /= 2;
					color2.A = (byte)((float)color2.A * lerpValue);
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color3 = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), Color.Lerp(color3, color2, 0.5f), rotation, origin, num, 0, 0f);
					color2.A = 0;
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color2 * 0.1f, rotation, origin, num * 1.2f, 0, 0f);
					if (i == 39)
					{
						color2 = color;
						color2.A = 127;
						Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color2 * 0.3f, rotation, origin, num * 1.4f, 0, 0f);
					}
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004B8 RID: 1208 RVA: 0x000F1C84 File Offset: 0x000EFE84
		public static Vector2 DrawWhip_ThornWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				float scale = 1f;
				if (i != 0)
				{
					if (i != 19)
					{
						rectangle.Y = height * (1 + i % 3);
						scale = 0.8f;
					}
					else
					{
						rectangle.Y = height * 4;
						scale = 1.1f;
					}
				}
				else
				{
					origin.Y -= 4f;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, scale, 0, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004B9 RID: 1209 RVA: 0x000F1DC4 File Offset: 0x000EFFC4
		public static Vector2 DrawWhip_WhipSword(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				if (i != 0)
				{
					switch (i)
					{
					case 3:
					case 5:
					case 7:
						rectangle.Y = height;
						goto IL_F0;
					case 9:
					case 11:
					case 13:
						rectangle.Y = height * 2;
						goto IL_F0;
					case 15:
					case 17:
						rectangle.Y = height * 3;
						goto IL_F0;
					case 19:
						rectangle.Y = height * 4;
						goto IL_F0;
					}
					flag = false;
				}
				else
				{
					origin.Y -= 4f;
				}
				IL_F0:
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, 1f, 0, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004BA RID: 1210 RVA: 0x000F1F50 File Offset: 0x000F0150
		public static Vector2 DrawWhip_WhipMace(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = 0;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= 1;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = false;
				Vector2 origin = vector;
				float scale = 1f;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else if (i % 2 == 0)
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					float timeToFlyOut;
					int num2;
					float num3;
					Projectile.GetWhipSettings(proj, out timeToFlyOut, out num2, out num3);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, true) * Utils.GetLerpValue(0.9f, 0.7f, t, true);
					scale = MathHelper.Lerp(0.5f, 2f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004BB RID: 1211 RVA: 0x000F2110 File Offset: 0x000F0310
		public static Vector2 DrawWhip_WhipScythe(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = 0;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= 1;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = false;
				Vector2 origin = vector;
				float scale = 1f;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else if (i % 2 == 0)
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					float timeToFlyOut;
					int num2;
					float num3;
					Projectile.GetWhipSettings(proj, out timeToFlyOut, out num2, out num3);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, true) * Utils.GetLerpValue(0.9f, 0.7f, t, true);
					scale = MathHelper.Lerp(0.5f, 1.5f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004BC RID: 1212 RVA: 0x000F22D0 File Offset: 0x000F04D0
		public static Vector2 DrawWhip_WhipBland(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = 0;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= 1;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 5, 0, 0, 0, 0);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				Vector2 origin = vector;
				float scale = 1f;
				bool flag;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					float timeToFlyOut;
					int num2;
					float num3;
					Projectile.GetWhipSettings(proj, out timeToFlyOut, out num2, out num3);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, true) * Utils.GetLerpValue(0.9f, 0.7f, t, true);
					scale = MathHelper.Lerp(0.5f, 1.5f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - 1.5707964f;
					Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					Main.spriteBatch.Draw(value, vector2 - Main.screenPosition, new Rectangle?(rectangle), color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		// Token: 0x060004BD RID: 1213 RVA: 0x000F248C File Offset: 0x000F068C
		private void DrawTwinsPet(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			SpriteEffects effects = (proj.spriteDirection != 1) ? 1 : 0;
			Rectangle rectangle = value.Frame(1, Main.projFrames[proj.type], 0, proj.frame, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 vector = proj.Center - Main.screenPosition;
			Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
			float num = 18f;
			if (proj.isAPreviewDummy)
			{
				num = 8f;
			}
			Vector2 position = vector + (Main.GlobalTimeWrappedHourly * 2f).ToRotationVector2() * num;
			Main.EntitySpriteDraw(value, position, new Rectangle?(rectangle), alpha, proj.rotation, origin, proj.scale, effects, 0f);
			position = vector - (Main.GlobalTimeWrappedHourly * 2f).ToRotationVector2() * num;
			rectangle = value.Frame(1, Main.projFrames[proj.type], 0, proj.frame + 18, 0, 0);
			Main.EntitySpriteDraw(value, position, new Rectangle?(rectangle), alpha, proj.rotation, origin, proj.scale, effects, 0f);
		}

		// Token: 0x060004BE RID: 1214 RVA: 0x000F25C8 File Offset: 0x000F07C8
		private void DrawMultisegmentPet(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Texture2D texture2D = null;
			if (proj.type == 887)
			{
				texture2D = TextureAssets.GlowMask[275].Value;
			}
			int num = 5;
			int num2 = 16;
			int type = proj.type;
			if (type != 883)
			{
				if (type != 887)
				{
					if (type == 893)
					{
						num = 8;
						num2 = 20;
					}
				}
				else
				{
					num = 6;
					num2 = 16;
				}
			}
			else
			{
				num = 5;
				num2 = 16;
			}
			SpriteEffects effects = (proj.spriteDirection != 1) ? 1 : 0;
			Rectangle rectangle = value.Frame(1, Main.projFrames[proj.type], 0, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 position = proj.Center - Main.screenPosition;
			Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
			Color color = Color.White * ((float)Main.mouseTextColor / 255f);
			Vector2 vector = proj.Center;
			int num3 = 1;
			int num4 = Main.projFrames[proj.type] - 1;
			for (int i = 1; i < num; i++)
			{
				int frameY = num3;
				if (i == num - 1)
				{
					frameY = num4;
				}
				else if (proj.type == 893 && i != 2 && i != 5)
				{
					frameY = 2;
				}
				Rectangle value2 = value.Frame(1, Main.projFrames[proj.type], 0, frameY, 0, 0);
				Vector2 vector2 = proj.oldPos[i * 10] + proj.Size / 2f;
				float num5 = (vector - vector2).ToRotation();
				vector2 = vector - new Vector2((float)num2, 0f).RotatedBy((double)num5, Vector2.Zero);
				num5 = (vector - vector2).ToRotation() + 1.5707964f;
				Vector2 position2 = vector2 - Main.screenPosition;
				SpriteEffects effects2 = (vector2.X >= vector.X) ? 1 : 0;
				vector = vector2;
				Main.EntitySpriteDraw(value, position2, new Rectangle?(value2), proj.GetAlpha(Lighting.GetColor(vector2.ToTileCoordinates())), num5, origin, proj.scale, effects2, 0f);
				if (texture2D != null)
				{
					Main.EntitySpriteDraw(texture2D, position2, new Rectangle?(value2), proj.GetAlpha(color), num5, origin, proj.scale, effects2, 0f);
				}
			}
			Main.EntitySpriteDraw(value, position, new Rectangle?(rectangle), alpha, proj.rotation, origin, proj.scale, effects, 0f);
			if (texture2D != null)
			{
				Main.EntitySpriteDraw(texture2D, position, new Rectangle?(rectangle), color, proj.rotation, origin, proj.scale, effects, 0f);
			}
		}

		// Token: 0x060004BF RID: 1215 RVA: 0x000F287C File Offset: 0x000F0A7C
		private void DrawKite(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Texture2D value2 = TextureAssets.Extra[103].Value;
			int num = 15;
			float num2 = 0f;
			int num3 = 10;
			int num4 = 5;
			float num5 = 10f;
			float num6 = 0f;
			int num7 = -14;
			int num8 = -2;
			int num9 = -1;
			int num10 = -1;
			int num11 = 8;
			int num12 = 0;
			int num13 = 1;
			int num14 = 0;
			int num15 = 0;
			bool flag = true;
			bool flag2 = false;
			int type = proj.type;
			if (type - 766 > 4)
			{
				if (type != 771)
				{
					switch (type)
					{
					case 822:
						value2 = TextureAssets.Extra[132].Value;
						num = 7;
						num12 = 7;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 7;
						num5 = 22f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num7 = -20;
						num8 = -6;
						num11 = 12;
						break;
					case 823:
					case 846:
						value2 = TextureAssets.Extra[133].Value;
						if (proj.type == 846)
						{
							value2 = TextureAssets.Extra[146].Value;
						}
						num = 6;
						num12 = 6;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 6;
						num5 = 40f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num7 = -16;
						num8 = -10;
						num11 = 30;
						break;
					case 824:
					case 826:
					case 839:
					case 840:
					case 853:
						num13 = 0;
						break;
					case 827:
					case 844:
						value2 = TextureAssets.Extra[135].Value;
						if (proj.type == 844)
						{
							value2 = TextureAssets.Extra[144].Value;
						}
						num = 4;
						num12 = 3;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 16;
						num5 = 10f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num8 = -4;
						num4 = 4;
						flag2 = true;
						break;
					case 828:
					case 829:
						value2 = TextureAssets.Extra[136].Value;
						if (proj.type == 829)
						{
							value2 = TextureAssets.Extra[137].Value;
						}
						num = 2;
						num12 = 1;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 6;
						num5 = 10f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num11 = 10;
						num8 = -4;
						num13 = 3;
						flag = false;
						flag2 = true;
						break;
					case 830:
					case 838:
						value2 = TextureAssets.Extra[138].Value;
						if (proj.type == 838)
						{
							value2 = TextureAssets.Extra[139].Value;
						}
						num = 3;
						num12 = 3;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 3;
						num5 = 60f;
						num10 = 40;
						num9 = 3;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num11 = 50;
						num8 = -20;
						num14 = -10;
						break;
					case 843:
						value2 = TextureAssets.Extra[140].Value;
						num = 2;
						num12 = 2;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 2;
						num5 = 30f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num11 = 20;
						num8 = -16;
						num14 = -10;
						break;
					case 845:
						value2 = TextureAssets.Extra[145].Value;
						num = 3;
						num12 = 3;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 3;
						num5 = 42f;
						num10 = 50;
						num9 = 2;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num11 = 30;
						num8 = -8;
						num14 = -10;
						break;
					case 850:
						value2 = TextureAssets.Extra[147].Value;
						num = 8;
						num12 = 8;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 8;
						num5 = 22f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num7 = -20;
						num8 = -38;
						num11 = 12;
						num14 = 6;
						num15 = 2;
						flag = false;
						break;
					case 852:
						value2 = TextureAssets.Extra[148].Value;
						num = 2;
						num12 = 1;
						num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
						num3 = 6;
						num5 = 10f;
						num6 += 0.2617994f * (float)proj.spriteDirection;
						num11 = 10;
						num8 = -4;
						num13 = 4;
						flag = false;
						flag2 = true;
						break;
					}
				}
				else
				{
					value2 = TextureAssets.Extra[104].Value;
					num = 12;
					num12 = 12;
					num2 = ((proj.spriteDirection == 1) ? 1.5707964f : -1.5707964f);
					num3 = 12;
					num5 = 22f;
					num6 += 0.3926991f * (float)proj.spriteDirection;
					num7 = -8;
					num8 = -6;
					num9 = 10;
					num10 = 8;
					num11 = 12;
				}
			}
			else
			{
				num12 = (proj.type - 766) * 3 + 3;
			}
			SpriteEffects effects = (proj.spriteDirection != 1) ? 1 : 0;
			Rectangle rectangle = value.Frame(Main.projFrames[proj.type], 1, proj.frame, 0, 0, 0);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 position = proj.Center - Main.screenPosition;
			Color color = Lighting.GetColor(proj.Center.ToTileCoordinates());
			Color alpha = proj.GetAlpha(color);
			Texture2D value3 = TextureAssets.FishingLine.Value;
			Rectangle value4 = value3.Frame(1, 1, 0, 0, 0, 0);
			Vector2 origin2;
			origin2..ctor((float)(value4.Width / 2), 2f);
			Rectangle rectangle2 = value2.Frame(num, 1, 0, 0, 0, 0);
			int width = rectangle2.Width;
			rectangle2.Width -= 2;
			Vector2 origin3 = rectangle2.Size() / 2f;
			rectangle2.X = width * (num - 1);
			Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
			Vector2 center = proj.Center;
			Vector2.Distance(center, playerArmPosition);
			float num16 = 12f;
			(playerArmPosition - center).SafeNormalize(Vector2.Zero) * num16;
			Vector2 vector = playerArmPosition;
			Vector2 vector2 = center - vector;
			Vector2 velocity = proj.velocity;
			if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
			{
				Utils.Swap<float>(ref velocity.X, ref velocity.Y);
			}
			float num17 = vector2.Length();
			float num18 = 16f;
			float num19 = 80f;
			bool flag3 = true;
			if (num17 == 0f)
			{
				flag3 = false;
			}
			else
			{
				vector2 *= 12f / num17;
				vector -= vector2;
				vector2 = center - vector;
			}
			while (flag3)
			{
				float num20 = 12f;
				float num21 = vector2.Length();
				float num22 = num21;
				if (float.IsNaN(num21) || num21 == 0f)
				{
					flag3 = false;
				}
				else
				{
					if (num21 < 20f)
					{
						num20 = num21 - 8f;
						flag3 = false;
					}
					num21 = 12f / num21;
					vector2 *= num21;
					vector += vector2;
					vector2 = center - vector;
					if (num22 > 12f)
					{
						float num23 = 0.3f;
						float num24 = Math.Abs(velocity.X) + Math.Abs(velocity.Y);
						if (num24 > num18)
						{
							num24 = num18;
						}
						num24 = 1f - num24 / num18;
						num23 *= num24;
						num24 = num22 / num19;
						if (num24 > 1f)
						{
							num24 = 1f;
						}
						num23 *= num24;
						if (num23 < 0f)
						{
							num23 = 0f;
						}
						num24 = 1f;
						num23 *= num24;
						if (vector2.Y > 0f)
						{
							vector2.Y *= 1f + num23;
							vector2.X *= 1f - num23;
						}
						else
						{
							num24 = Math.Abs(velocity.X) / 3f;
							if (num24 > 1f)
							{
								num24 = 1f;
							}
							num24 -= 0.5f;
							num23 *= num24;
							if (num23 > 0f)
							{
								num23 *= 2f;
							}
							vector2.Y *= 1f + num23;
							vector2.X *= 1f - num23;
						}
					}
					float rotation = vector2.ToRotation() - 1.5707964f;
					if (!flag3)
					{
						value4.Height = (int)num20;
					}
					Color color2 = Lighting.GetColor(center.ToTileCoordinates());
					Main.EntitySpriteDraw(value3, vector - Main.screenPosition, new Rectangle?(value4), color2, rotation, origin2, 1f, 0, 0f);
				}
			}
			Vector2 vector3 = proj.Size / 2f;
			float num25 = Math.Abs(Main.WindForVisuals);
			float num26 = MathHelper.Lerp(0.5f, 1f, num25);
			float num27 = num25;
			if (vector2.Y >= -0.02f && vector2.Y < 1f)
			{
				num27 = Utils.GetLerpValue(0.2f, 0.5f, num25, true);
			}
			int num28 = num4;
			int num29 = num3 + 1;
			for (int i = 0; i < num13; i++)
			{
				rectangle2.X = width * (num - 1);
				List<Vector2> list = new List<Vector2>();
				Vector2 vector4 = new Vector2(num26 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(Main.timeForVisualEffects / 300.0 * 6.2831854820251465) * num27) * 2f;
				float num30 = (float)(num7 + num14);
				float num31 = (float)(num8 + num15);
				switch (i)
				{
				case 1:
					vector4 = new Vector2(num26 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(Main.timeForVisualEffects / 300.0 * 6.2831854820251465) * num27 + 0.5f) * 2f;
					num30 -= 8f;
					num31 -= 8f;
					break;
				case 2:
					vector4 = new Vector2(num26 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(Main.timeForVisualEffects / 300.0 * 6.2831854820251465) * num27 + 1f) * 2f;
					num30 -= 4f;
					num31 -= 4f;
					break;
				case 3:
					vector4 = new Vector2(num26 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(Main.timeForVisualEffects / 300.0 * 6.2831854820251465) * num27 + 1.5f) * 2f;
					num30 -= 12f;
					num31 -= 12f;
					break;
				}
				Vector2 vector5 = proj.Center + new Vector2(((float)rectangle.Width * 0.5f + num30) * (float)proj.spriteDirection, num31).RotatedBy((double)(proj.rotation + num6), default(Vector2));
				list.Add(vector5);
				int num32 = num28;
				int num33 = 1;
				while (num32 < num29 * num28)
				{
					if (num9 != -1 && num9 == num33)
					{
						num5 = (float)num10;
					}
					Vector2 vector6 = proj.oldPos[num32];
					if (vector6.X == 0f && vector6.Y == 0f)
					{
						list.Add(vector5);
					}
					else
					{
						vector6 += vector3 + new Vector2(((float)rectangle.Width * 0.5f + num30) * (float)proj.oldSpriteDirection[num32], num31).RotatedBy((double)(proj.oldRot[num32] + num6), default(Vector2));
						vector6 += vector4 * (float)(num33 + 1);
						Vector2 vector7 = vector5 - vector6;
						float num34 = vector7.Length();
						if (num34 > num5)
						{
							vector7 *= num5 / num34;
						}
						vector6 = vector5 - vector7;
						list.Add(vector6);
						vector5 = vector6;
					}
					num32 += num28;
					num33++;
				}
				if (flag)
				{
					Rectangle value5 = value3.Frame(1, 1, 0, 0, 0, 0);
					for (int num35 = list.Count - 2; num35 >= 0; num35--)
					{
						Vector2 vector8 = list[num35];
						Vector2 v = list[num35 + 1] - vector8;
						float num36 = v.Length();
						if (num36 >= 2f)
						{
							float rotation2 = v.ToRotation() - 1.5707964f;
							Main.EntitySpriteDraw(value3, vector8 - Main.screenPosition, new Rectangle?(value5), alpha, rotation2, origin2, new Vector2(1f, num36 / (float)value5.Height), 0, 0f);
						}
					}
				}
				for (int num37 = list.Count - 2; num37 >= 0; num37--)
				{
					Vector2 vector9 = list[num37];
					Vector2 vector10 = list[num37 + 1];
					Vector2 v2 = vector10 - vector9;
					v2.Length();
					float rotation3 = v2.ToRotation() - 1.5707964f + num2;
					Main.EntitySpriteDraw(value2, vector10 - Main.screenPosition, new Rectangle?(rectangle2), alpha, rotation3, origin3, proj.scale, effects, 0f);
					rectangle2.X -= width;
					if (rectangle2.X < 0)
					{
						int num38 = num12;
						if (flag2)
						{
							num38--;
						}
						rectangle2.X = num38 * width;
					}
				}
			}
			Main.EntitySpriteDraw(value, position, new Rectangle?(rectangle), alpha, proj.rotation + num6, origin, proj.scale, effects, 0f);
		}

		// Token: 0x060004C0 RID: 1216 RVA: 0x000F3688 File Offset: 0x000F1888
		public static Vector2 GetPlayerArmPosition(Projectile proj)
		{
			Player player = Main.player[proj.owner];
			Vector2 vector = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				vector.X = (float)player.bodyFrame.Width - vector.X;
			}
			if (player.gravDir != 1f)
			{
				vector.Y = (float)player.bodyFrame.Height - vector.Y;
			}
			vector -= new Vector2((float)(player.bodyFrame.Width - player.width), (float)(player.bodyFrame.Height - 42)) / 2f;
			Vector2 pos = player.MountedCenter - new Vector2(20f, 42f) / 2f + vector + Vector2.UnitY * player.gfxOffY;
			if (player.mount.Active && player.mount.Type == 52)
			{
				pos.Y -= (float)player.mount.PlayerOffsetHitbox;
				pos += new Vector2((float)(12 * player.direction), -12f);
			}
			return player.RotatedRelativePoint(pos, false, true);
		}

		// Token: 0x060004C1 RID: 1217 RVA: 0x000F37E0 File Offset: 0x000F19E0
		private void DrawProjWithStarryTrail(Projectile proj, Color projectileColor, SpriteEffects dir)
		{
			Color color;
			color..ctor(255, 255, 255, (int)projectileColor.A - proj.alpha);
			Vector2 vector = proj.velocity;
			Color color2 = Color.Blue * 0.1f;
			Vector2 spinningpoint;
			spinningpoint..ctor(0f, -4f);
			float num = 0f;
			float t = vector.Length();
			float num2 = Utils.GetLerpValue(3f, 5f, t, true);
			bool flag = true;
			if (proj.type == 856 || proj.type == 857)
			{
				vector = proj.position - proj.oldPos[1];
				float num3 = vector.Length();
				if (num3 == 0f)
				{
					vector = Vector2.UnitY;
				}
				else
				{
					vector *= 5f / num3;
				}
				Vector2 origin;
				origin..ctor(proj.ai[0], proj.ai[1]);
				Vector2 center = Main.player[proj.owner].Center;
				float lerpValue = Utils.GetLerpValue(0f, 120f, origin.Distance(center), true);
				float num4 = 90f;
				if (proj.type == 857)
				{
					num4 = 60f;
					flag = false;
				}
				float lerpValue2 = Utils.GetLerpValue(num4, num4 * 0.8333333f, proj.localAI[0], true);
				float lerpValue3 = Utils.GetLerpValue(0f, 120f, proj.Center.Distance(center), true);
				lerpValue *= lerpValue3;
				lerpValue2 *= Utils.GetLerpValue(0f, 15f, proj.localAI[0], true);
				color2 = Color.HotPink * 0.15f * (lerpValue2 * lerpValue);
				if (proj.type == 857)
				{
					color2 = proj.GetFirstFractalColor() * 0.15f * (lerpValue2 * lerpValue);
				}
				spinningpoint..ctor(0f, -2f);
				float lerpValue4 = Utils.GetLerpValue(num4, num4 * 0.6666667f, proj.localAI[0], true);
				lerpValue4 *= Utils.GetLerpValue(0f, 20f, proj.localAI[0], true);
				num = -0.3f * (1f - lerpValue4);
				num += -1f * Utils.GetLerpValue(15f, 0f, proj.localAI[0], true);
				num *= lerpValue;
				num2 = lerpValue2 * lerpValue;
			}
			Vector2 vector5 = proj.Center + vector;
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			new Rectangle(0, 0, value.Width, value.Height).Size() / 2f;
			Texture2D value2 = TextureAssets.Extra[91].Value;
			Rectangle value3 = value2.Frame(1, 1, 0, 0, 0, 0);
			Vector2 origin2;
			origin2..ctor((float)value3.Width / 2f, 10f);
			Color.Cyan * 0.5f * num2;
			Vector2 vector2;
			vector2..ctor(0f, proj.gfxOffY);
			float num5 = (float)Main.timeForVisualEffects / 60f;
			Vector2 vector3 = vector5 + vector * 0.5f;
			Color color3 = Color.White * 0.5f * num2;
			color3.A = 0;
			Color color4 = color2 * num2;
			color4.A = 0;
			Color color5 = color2 * num2;
			color5.A = 0;
			Color color6 = color2 * num2;
			color6.A = 0;
			float num6 = vector.ToRotation();
			Main.EntitySpriteDraw(value2, vector3 - Main.screenPosition + vector2 + spinningpoint.RotatedBy((double)(6.2831855f * num5), default(Vector2)), new Rectangle?(value3), color4, num6 + 1.5707964f, origin2, 1.5f + num, 0, 0f);
			Main.EntitySpriteDraw(value2, vector3 - Main.screenPosition + vector2 + spinningpoint.RotatedBy((double)(6.2831855f * num5 + 2.0943952f), default(Vector2)), new Rectangle?(value3), color5, num6 + 1.5707964f, origin2, 1.1f + num, 0, 0f);
			Main.EntitySpriteDraw(value2, vector3 - Main.screenPosition + vector2 + spinningpoint.RotatedBy((double)(6.2831855f * num5 + 4.1887903f), default(Vector2)), new Rectangle?(value3), color6, num6 + 1.5707964f, origin2, 1.3f + num, 0, 0f);
			Vector2 vector4 = vector5 - vector * 0.5f;
			for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
			{
				float num8 = num5 % 0.5f / 0.5f;
				num8 = (num8 + num7) % 1f;
				float num9 = num8 * 2f;
				if (num9 > 1f)
				{
					num9 = 2f - num9;
				}
				Main.EntitySpriteDraw(value2, vector4 - Main.screenPosition + vector2, new Rectangle?(value3), color3 * num9, num6 + 1.5707964f, origin2, 0.3f + num8 * 0.5f, 0, 0f);
			}
			if (flag)
			{
				float rotation = proj.rotation + proj.localAI[1];
				float num10 = (float)Main.timeForVisualEffects / 240f;
				float globalTimeWrappedHourly2 = Main.GlobalTimeWrappedHourly;
				float globalTimeWrappedHourly = Main.GlobalTimeWrappedHourly;
				globalTimeWrappedHourly %= 5f;
				globalTimeWrappedHourly /= 2.5f;
				if (globalTimeWrappedHourly >= 1f)
				{
					globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
				}
				globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
				Vector2 position = proj.Center - Main.screenPosition;
				Main.instance.LoadItem(75);
				Texture2D value4 = TextureAssets.Item[75].Value;
				Rectangle rectangle = value4.Frame(1, 8, 0, 0, 0, 0);
				Vector2 origin3 = rectangle.Size() / 2f;
				Main.EntitySpriteDraw(value4, position, new Rectangle?(rectangle), color, rotation, origin3, proj.scale, 0, 0f);
			}
		}

		// Token: 0x060004C2 RID: 1218 RVA: 0x000F3E10 File Offset: 0x000F2010
		private static int TryInteractingWithVoidLens(Projectile proj)
		{
			if (Main.gamePaused || Main.gameMenu)
			{
				return 0;
			}
			bool flag = !Main.SmartCursorIsUsed && !PlayerInput.UsingGamepad;
			Player localPlayer = Main.LocalPlayer;
			Point point = proj.Center.ToTileCoordinates();
			Vector2 compareSpot = localPlayer.Center;
			if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, ref compareSpot))
			{
				return 0;
			}
			Matrix matrix = Matrix.Invert(Main.GameViewMatrix.ZoomMatrix);
			Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen, 0f);
			Vector2.Transform(Main.screenPosition, matrix);
			Vector2 v = Vector2.Transform(vector, matrix) + Main.screenPosition;
			bool flag2 = proj.Hitbox.Contains(v.ToPoint());
			if (!((flag2 || Main.SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
			{
				if (!flag)
				{
					return 1;
				}
				return 0;
			}
			else
			{
				Main.HasInteractibleObjectThatIsNotATile = true;
				if (flag2)
				{
					localPlayer.noThrow = 2;
					localPlayer.cursorItemIconEnabled = true;
					localPlayer.cursorItemIconID = 4131;
				}
				if (PlayerInput.UsingGamepad)
				{
					localPlayer.GamepadEnableGrappleCooldown();
				}
				if (Main.mouseRight && Main.mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
				{
					Main.mouseRightRelease = false;
					localPlayer.tileInteractAttempted = true;
					localPlayer.tileInteractionHappened = true;
					localPlayer.releaseUseTile = false;
					if (localPlayer.chest == -5)
					{
						localPlayer.chest = -1;
						SoundEngine.PlaySound(SoundID.Item130, null, null);
						Recipe.FindRecipes(false);
					}
					else if (localPlayer.disableVoidBag < 0)
					{
						localPlayer.chest = -5;
						for (int i = 0; i < 40; i++)
						{
							ItemSlot.SetGlow(i, -1f, true);
						}
						localPlayer.voidLensChest.Set(proj);
						localPlayer.chestX = point.X;
						localPlayer.chestY = point.Y;
						localPlayer.SetTalkNPC(-1, false);
						Main.SetNPCShopIndex(0);
						Main.playerInventory = true;
						SoundEngine.PlaySound(SoundID.Item130, null, null);
						Recipe.FindRecipes(false);
					}
				}
				if (!Main.SmartCursorIsUsed && !PlayerInput.UsingGamepad)
				{
					return 0;
				}
				if (!flag)
				{
					return 2;
				}
				return 0;
			}
		}

		// Token: 0x060004C3 RID: 1219 RVA: 0x000F401C File Offset: 0x000F221C
		private static int TryInteractingWithMoneyTrough(Projectile proj)
		{
			if (Main.gamePaused || Main.gameMenu)
			{
				return 0;
			}
			bool flag = !Main.SmartCursorIsUsed && !PlayerInput.UsingGamepad;
			Player localPlayer = Main.LocalPlayer;
			Point point = proj.Center.ToTileCoordinates();
			Vector2 compareSpot = localPlayer.Center;
			if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, ref compareSpot))
			{
				return 0;
			}
			Matrix matrix = Matrix.Invert(Main.GameViewMatrix.ZoomMatrix);
			Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen, 0f);
			Vector2.Transform(Main.screenPosition, matrix);
			Vector2 v = Vector2.Transform(vector, matrix) + Main.screenPosition;
			bool flag2 = proj.Hitbox.Contains(v.ToPoint());
			if (!((flag2 || Main.SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
			{
				if (!flag)
				{
					return 1;
				}
				return 0;
			}
			else
			{
				Main.HasInteractibleObjectThatIsNotATile = true;
				if (flag2)
				{
					localPlayer.noThrow = 2;
					localPlayer.cursorItemIconEnabled = true;
					localPlayer.cursorItemIconID = 3213;
					if (proj.type == 960)
					{
						localPlayer.cursorItemIconID = 5098;
					}
				}
				if (PlayerInput.UsingGamepad)
				{
					localPlayer.GamepadEnableGrappleCooldown();
				}
				if (Main.mouseRight && Main.mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
				{
					Main.mouseRightRelease = false;
					localPlayer.tileInteractAttempted = true;
					localPlayer.tileInteractionHappened = true;
					localPlayer.releaseUseTile = false;
					if (localPlayer.chest == -2)
					{
						localPlayer.chest = -1;
						Main.PlayInteractiveProjectileOpenCloseSound(proj.type, false);
						Recipe.FindRecipes(false);
					}
					else
					{
						localPlayer.chest = -2;
						for (int i = 0; i < 40; i++)
						{
							ItemSlot.SetGlow(i, -1f, true);
						}
						localPlayer.piggyBankProjTracker.Set(proj);
						localPlayer.chestX = point.X;
						localPlayer.chestY = point.Y;
						localPlayer.SetTalkNPC(-1, false);
						Main.SetNPCShopIndex(0);
						Main.playerInventory = true;
						Main.PlayInteractiveProjectileOpenCloseSound(proj.type, true);
						Recipe.FindRecipes(false);
					}
				}
				if (!Main.SmartCursorIsUsed && !PlayerInput.UsingGamepad)
				{
					return 0;
				}
				if (!flag)
				{
					return 2;
				}
				return 0;
			}
		}

		// Token: 0x060004C4 RID: 1220 RVA: 0x000F4220 File Offset: 0x000F2420
		public static void PlayInteractiveProjectileOpenCloseSound(int projType, bool open)
		{
			if (projType == 525)
			{
				SoundEngine.PlaySound(SoundID.Item59, null, null);
				return;
			}
			if (projType != 960)
			{
				return;
			}
			SoundStyle soundStyle = open ? SoundID.ChesterOpen : SoundID.ChesterClose;
			SoundEngine.PlaySound(soundStyle, null, null);
		}

		// Token: 0x060004C5 RID: 1221 RVA: 0x000F4278 File Offset: 0x000F2478
		public static void PrintTimedMessage(string message, params object[] arguments)
		{
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(1, 2);
			defaultInterpolatedStringHandler.AppendFormatted<int>((int)Main.time);
			defaultInterpolatedStringHandler.AppendLiteral(" ");
			defaultInterpolatedStringHandler.AppendFormatted(string.Format(message, arguments));
			Console.WriteLine(defaultInterpolatedStringHandler.ToStringAndClear());
		}

		// Token: 0x060004C6 RID: 1222 RVA: 0x000F42C4 File Offset: 0x000F24C4
		private static void TryInteractingWithMoneyTrough2(Projectile proj)
		{
			if (Main.gamePaused && !Main.gameMenu)
			{
				return;
			}
			Vector2 vector = proj.position - Main.screenPosition;
			if ((float)Main.mouseX <= vector.X || (float)Main.mouseX >= vector.X + (float)proj.width || (float)Main.mouseY <= vector.Y || (float)Main.mouseY >= vector.Y + (float)proj.height)
			{
				return;
			}
			int num = (int)(Main.player[Main.myPlayer].Center.X / 16f);
			int num2 = (int)(Main.player[Main.myPlayer].Center.Y / 16f);
			int num3 = (int)proj.Center.X / 16;
			int num4 = (int)proj.Center.Y / 16;
			int lastTileRangeX = Main.player[Main.myPlayer].lastTileRangeX;
			int lastTileRangeY = Main.player[Main.myPlayer].lastTileRangeY;
			if (num < num3 - lastTileRangeX || num > num3 + lastTileRangeX + 1 || num2 < num4 - lastTileRangeY || num2 > num4 + lastTileRangeY + 1)
			{
				return;
			}
			Player localPlayer = Main.LocalPlayer;
			Main.player[Main.myPlayer].noThrow = 2;
			Main.player[Main.myPlayer].cursorItemIconEnabled = true;
			Main.player[Main.myPlayer].cursorItemIconID = 3213;
			if (PlayerInput.UsingGamepad)
			{
				Main.player[Main.myPlayer].GamepadEnableGrappleCooldown();
			}
			if (Main.mouseRight && Main.mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
			{
				Main.mouseRightRelease = false;
				localPlayer.tileInteractAttempted = true;
				localPlayer.tileInteractionHappened = true;
				localPlayer.releaseUseTile = false;
				if (Main.player[Main.myPlayer].chest == -2)
				{
					SoundEngine.PlaySound(SoundID.Item59, null, null);
					Main.player[Main.myPlayer].chest = -1;
					Recipe.FindRecipes(false);
					return;
				}
				Main.player[Main.myPlayer].piggyBankProjTracker.Set(proj);
				Main.player[Main.myPlayer].chest = -2;
				Main.player[Main.myPlayer].chestX = (int)(proj.Center.X / 16f);
				Main.player[Main.myPlayer].chestY = (int)(proj.Center.Y / 16f);
				Main.player[Main.myPlayer].SetTalkNPC(-1, false);
				Main.SetNPCShopIndex(0);
				Main.playerInventory = true;
				SoundEngine.PlaySound(SoundID.Item59, null, null);
				Recipe.FindRecipes(false);
			}
		}

		// Token: 0x060004C7 RID: 1223 RVA: 0x000F4558 File Offset: 0x000F2758
		public void PrepareDrawnProjectileDrawing(Projectile proj)
		{
			Main.CurrentDrawnEntity = proj;
			int projectileDesiredShader = Main.GetProjectileDesiredShader(proj);
			Matrix value = Main.Transform;
			if (proj.isAPreviewDummy)
			{
				value = Main.UIScaleMatrix;
			}
			this.PrepareDrawnEntityDrawing(proj, projectileDesiredShader, new Matrix?(value));
		}

		// Token: 0x060004C8 RID: 1224 RVA: 0x000F4594 File Offset: 0x000F2794
		public void PrepareDrawnEntityDrawing(Entity entity, int intendedShader, Matrix? overrideMatrix)
		{
			Main.CurrentDrawnEntity = entity;
			Matrix transformMatrix = Main.Transform;
			if (overrideMatrix != null)
			{
				transformMatrix = overrideMatrix.Value;
			}
			if (intendedShader != 0)
			{
				if (Main.CurrentDrawnEntityShader == 0 || Main.CurrentDrawnEntityShader == -1)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, base.GraphicsDevice.RasterizerState, null, transformMatrix);
				}
			}
			else if (Main.CurrentDrawnEntityShader != 0 && Main.CurrentDrawnEntityShader != -1)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, base.GraphicsDevice.RasterizerState, null, transformMatrix);
			}
			Main.CurrentDrawnEntityShader = intendedShader;
		}

		// Token: 0x060004C9 RID: 1225 RVA: 0x000F464C File Offset: 0x000F284C
		public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float worthless = 0f)
		{
			Main.EntitySpriteDraw(texture, position, sourceRectangle, color, rotation, origin, new Vector2(scale), effects, worthless);
		}

		// Token: 0x060004CA RID: 1226 RVA: 0x000F4674 File Offset: 0x000F2874
		public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float worthless = 0f)
		{
			if (Main.CurrentDrawnEntityShader > 0)
			{
				DrawData value = new DrawData(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
				GameShaders.Armor.Apply(Main.CurrentDrawnEntityShader, Main.CurrentDrawnEntity, new DrawData?(value));
				value.Draw(Main.spriteBatch);
				return;
			}
			Main.spriteBatch.Draw(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
		}

		// Token: 0x060004CB RID: 1227 RVA: 0x000F46DD File Offset: 0x000F28DD
		public static void EntitySpriteDraw(DrawData data)
		{
			if (Main.CurrentDrawnEntityShader > 0)
			{
				GameShaders.Armor.Apply(Main.CurrentDrawnEntityShader, Main.CurrentDrawnEntity, new DrawData?(data));
				data.Draw(Main.spriteBatch);
				return;
			}
			data.Draw(Main.spriteBatch);
		}

		// Token: 0x060004CC RID: 1228 RVA: 0x000F471C File Offset: 0x000F291C
		public static Color buffColor(Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)newColor.R * R);
			newColor.G = (byte)((float)newColor.G * G);
			newColor.B = (byte)((float)newColor.B * B);
			newColor.A = (byte)((float)newColor.A * A);
			return newColor;
		}

		// Token: 0x060004CD RID: 1229 RVA: 0x000F4774 File Offset: 0x000F2974
		protected void CacheNPCDraws()
		{
			this.DrawCacheNPCsMoonMoon.Clear();
			this.DrawCacheNPCsOverPlayers.Clear();
			this.DrawCacheNPCProjectiles.Clear();
			this.DrawCacheNPCsBehindNonSolidTiles.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 398 && Main.npc[i].ai[0] >= 0f)
					{
						int num = i;
						int num2 = -1;
						int num3 = -1;
						int num4 = -1;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].ai[3] == (float)num)
							{
								if (num2 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 0f)
								{
									num2 = j;
								}
								if (num3 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 1f)
								{
									num3 = j;
								}
								if (num4 == -1 && Main.npc[j].type == 396)
								{
									num4 = j;
								}
								if (num2 != -1 && num3 != -1 && num4 != -1)
								{
									break;
								}
							}
						}
						if (num2 != -1 && num3 != -1 && num4 != -1)
						{
							this.DrawCacheNPCsMoonMoon.Add(num);
							if (num2 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num2);
							}
							if (num3 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num3);
							}
							if (num4 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num4);
							}
						}
					}
					else if (Main.npc[i].type == 421 && Main.npc[i].ai[0] == 5f)
					{
						this.DrawCacheNPCsOverPlayers.Add(i);
					}
					else if (Main.npc[i].type == 516 || Main.npc[i].type == 519)
					{
						this.DrawCacheNPCProjectiles.Add(i);
					}
					else if (Main.npc[i].type == 548)
					{
						this.DrawCacheNPCsBehindNonSolidTiles.Add(i);
					}
					NPCLoader.DrawBehind(Main.npc[i], i);
				}
			}
		}

		// Token: 0x060004CE RID: 1230 RVA: 0x000F49CC File Offset: 0x000F2BCC
		protected void CacheProjDraws()
		{
			this.DrawCacheProjsBehindNPCsAndTiles.Clear();
			this.DrawCacheProjsBehindNPCs.Clear();
			this.DrawCacheProjsBehindProjectiles.Clear();
			this.DrawCacheProjsOverWiresUI.Clear();
			this.DrawCacheProjsOverPlayers.Clear();
			this.DrawCacheFirstFractals.Clear();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active)
				{
					if (Main.projectile[i].type == 857)
					{
						this.DrawCacheFirstFractals.Add(i);
					}
					if (Main.projectile[i].type == 578 || Main.projectile[i].type == 579 || Main.projectile[i].type == 641 || Main.projectile[i].type == 617 || Main.projectile[i].type == 813)
					{
						this.DrawCacheProjsBehindNPCsAndTiles.Add(i);
					}
					if (Main.projectile[i].type == 625 || Main.projectile[i].type == 626 || Main.projectile[i].type == 627 || Main.projectile[i].type == 628 || Main.projectile[i].type == 525 || Main.projectile[i].type == 960 || Main.projectile[i].type == 734 || Main.projectile[i].type == 946 || (Main.projectile[i].type == 908 && Main.projectile[i].localAI[0] <= 0f))
					{
						this.DrawCacheProjsBehindProjectiles.Add(i);
					}
					if (Main.projectile[i].type == 759 || (Main.projectile[i].type == 908 && Main.projectile[i].localAI[0] > 0f))
					{
						this.DrawCacheProjsOverPlayers.Add(i);
					}
					if (Main.projectile[i].type == 651)
					{
						this.DrawCacheProjsOverWiresUI.Add(i);
					}
					if (Main.projectile[i].type == 673 || Main.projectile[i].type == 674 || Main.projectile[i].type == 691 || Main.projectile[i].type == 692 || Main.projectile[i].type == 693 || Main.projectile[i].type == 923)
					{
						this.DrawCacheProjsBehindNPCs.Add(i);
					}
					if (Main.projectile[i].type == 636 || Main.projectile[i].type == 598 || Main.projectile[i].type == 971)
					{
						bool flag = true;
						if (Main.projectile[i].ai[0] == 1f)
						{
							int num = (int)Main.projectile[i].ai[1];
							if (num >= 0 && num < 200 && Main.npc[num].active && Main.npc[num].type != 492)
							{
								if (Main.npc[num].behindTiles)
								{
									this.DrawCacheProjsBehindNPCsAndTiles.Add(i);
								}
								else
								{
									this.DrawCacheProjsBehindNPCs.Add(i);
								}
								flag = false;
							}
						}
						if (flag)
						{
							this.DrawCacheProjsBehindProjectiles.Add(i);
						}
					}
					ProjectileLoader.DrawBehind(Main.projectile[i], i, this.DrawCacheProjsBehindNPCsAndTiles, this.DrawCacheProjsBehindNPCs, this.DrawCacheProjsBehindProjectiles, this.DrawCacheProjsOverPlayers, this.DrawCacheProjsOverWiresUI);
				}
			}
		}

		// Token: 0x060004CF RID: 1231 RVA: 0x000F4D7C File Offset: 0x000F2F7C
		protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
		{
			for (int i = 0; i < npcCache.Count; i++)
			{
				try
				{
					this.DrawNPC(npcCache[i], behindTiles);
				}
				catch
				{
					Main.npc[npcCache[i]].active = false;
				}
			}
		}

		// Token: 0x060004D0 RID: 1232 RVA: 0x000F4DD4 File Offset: 0x000F2FD4
		protected void DrawCachedProjs(List<int> projCache, bool startSpriteBatch = true)
		{
			if (startSpriteBatch)
			{
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			}
			Main.CurrentDrawnEntity = null;
			Main.CurrentDrawnEntityShader = 0;
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					this.DrawProj(projCache[i]);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					Main.projectile[projCache[i]].active = false;
				}
			}
			Main.CurrentDrawnEntity = null;
			Main.CurrentDrawnEntityShader = 0;
			if (startSpriteBatch)
			{
				Main.spriteBatch.End();
			}
		}

		// Token: 0x060004D1 RID: 1233 RVA: 0x000F4E7C File Offset: 0x000F307C
		protected void DrawSuperSpecialProjectiles(List<int> projCache, bool startSpriteBatch = true)
		{
			if (startSpriteBatch)
			{
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			}
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					int num = projCache[i];
					Projectile projectile = Main.projectile[num];
					int owner = projectile.owner;
					Player other = Main.player[owner];
					if (Main.playerVisualClone[owner] == null)
					{
						Main.playerVisualClone[owner] = new Player();
					}
					Player player = Main.playerVisualClone[owner];
					player.CopyVisuals(other);
					player.isFirstFractalAfterImage = true;
					player.firstFractalAfterImageOpacity = projectile.Opacity * 1f;
					player.ResetEffects();
					player.ResetVisibleAccessories();
					player.UpdateDyes();
					player.DisplayDollUpdate();
					player.UpdateSocialShadow();
					player.itemAnimationMax = 60;
					player.itemAnimation = (int)projectile.localAI[0];
					player.itemRotation = projectile.velocity.ToRotation();
					player.heldProj = num;
					player.Center = projectile.Center - projectile.velocity.SafeNormalize(Vector2.Zero) * 42f;
					player.direction = ((projectile.velocity.X > 0f) ? 1 : -1);
					player.itemRotation = (float)Math.Atan2((double)(projectile.velocity.Y * (float)player.direction), (double)(projectile.velocity.X * (float)player.direction));
					player.velocity.Y = 0.01f;
					player.wingFrame = 2;
					player.PlayerFrame();
					player.socialIgnoreLight = true;
					Main.PlayerRenderer.DrawPlayer(Main.Camera, player, player.position, 0f, player.fullRotationOrigin, 0f, 1f);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					Main.projectile[projCache[i]].active = false;
				}
			}
			if (startSpriteBatch)
			{
				Main.spriteBatch.End();
			}
		}

		// Token: 0x060004D2 RID: 1234 RVA: 0x000F509C File Offset: 0x000F329C
		protected void SortDrawCacheWorms()
		{
			this.SortBabyBirdProjectiles(this.DrawCacheProjsOverPlayers);
			this.SortStardustDragonProjectiles(this.DrawCacheProjsBehindProjectiles);
		}

		// Token: 0x060004D3 RID: 1235 RVA: 0x000F50B8 File Offset: 0x000F32B8
		private void SortBabyBirdProjectiles(List<int> list)
		{
			List<int> list2 = new List<int>();
			for (int num = list.Count - 1; num >= 0; num--)
			{
				int num2 = list[num];
				if (Main.projectile[num2].type == 759)
				{
					list2.Add(num2);
					list.RemoveAt(num);
					Projectile projectile = Main.projectile[num2];
					Player master = Main.player[projectile.owner];
					int stackedIndex = (int)projectile.localAI[0];
					if (projectile.frame == Main.projFrames[projectile.type] - 1)
					{
						projectile.Center = Projectile.AI_158_GetHomeLocation(master, stackedIndex);
						projectile.velocity = Vector2.Zero;
					}
				}
			}
			list.AddRange(list2);
			list2.Clear();
		}

		// Token: 0x060004D4 RID: 1236 RVA: 0x000F5168 File Offset: 0x000F3368
		private void SortStardustDragonProjectiles(List<int> list)
		{
			List<List<int>> list2 = new List<List<int>>();
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.projectile[num].type == 628)
				{
					list.Remove(num);
					List<int> list3 = new List<int>();
					list3.Insert(0, num);
					int byUUID = Projectile.GetByUUID(Main.projectile[num].owner, Main.projectile[num].ai[0]);
					while (byUUID >= 0 && !list3.Contains(byUUID) && Main.projectile[byUUID].active && Main.projectile[byUUID].type >= 625 && Main.projectile[byUUID].type <= 627)
					{
						list3.Add(byUUID);
						list.Remove(byUUID);
						byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
					}
					List<int> list4 = new List<int>();
					for (int num2 = list3.Count - 2; num2 >= 0; num2--)
					{
						list4.Add(list3[num2]);
					}
					list4.Add(list3[list3.Count - 1]);
					list2.Add(list4);
					i = -1;
				}
			}
			List<int> list5 = new List<int>(list);
			list2.Add(list5);
			list.Clear();
			for (int j = 0; j < list2.Count; j++)
			{
				for (int k = 0; k < list2[j].Count; k++)
				{
					list.Add(list2[j][k]);
				}
			}
			for (int l = 0; l < list.Count; l++)
			{
				Projectile projectile = Main.projectile[list[l]];
				int byUUID2 = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
				if (projectile.type >= 626 && projectile.type <= 628 && byUUID2 >= 0 && ProjectileID.Sets.StardustDragon[Main.projectile[byUUID2].type])
				{
					Vector2 vector = Main.projectile[byUUID2].Center - projectile.Center;
					if (vector != Vector2.Zero)
					{
						float num5 = Main.projectile[byUUID2].scale * 16f;
						float num3 = vector.Length();
						float num4 = num5 - num3;
						if (num4 != 0f)
						{
							projectile.Center += Vector2.Normalize(vector) * (0f - num4);
						}
					}
				}
			}
		}

		// Token: 0x060004D5 RID: 1237 RVA: 0x000F540C File Offset: 0x000F360C
		protected void DrawWoF()
		{
			if (Main.wofNPCIndex < 0 || !Main.npc[Main.wofNPCIndex].active || Main.npc[Main.wofNPCIndex].life <= 0)
			{
				return;
			}
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].tongued && !Main.player[i].dead)
				{
					Main.DrawWOFTongueToPlayer(i);
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].aiStyle == 29)
				{
					Main.DrawWOFRopeToTheHungry(j);
				}
			}
			Main.DrawWOFBody();
		}

		// Token: 0x060004D6 RID: 1238 RVA: 0x000F54C0 File Offset: 0x000F36C0
		private static void DrawWOFBody()
		{
			int num = TextureAssets.Wof.Height() / 3;
			float num2 = (float)Main.wofDrawAreaTop;
			float num3 = (float)Main.wofDrawAreaBottom;
			num3 = Main.screenPosition.Y + (float)Main.screenHeight;
			float num4 = (float)((int)((num2 - Main.screenPosition.Y) / (float)num) + 1);
			if (num4 > 12f)
			{
				return;
			}
			float num5 = num4 * (float)num;
			if (num5 > 0f)
			{
				num2 -= num5;
			}
			float num6 = Main.npc[Main.wofNPCIndex].position.X;
			if (Main.npc[Main.wofNPCIndex].direction > 0)
			{
				num6 -= 80f;
			}
			SpriteEffects effects = 0;
			if (Main.npc[Main.wofNPCIndex].spriteDirection == 1)
			{
				effects = 1;
			}
			int num7 = Main.wofDrawFrameIndex / 6 * num;
			if (!Main.gamePaused && ++Main.wofDrawFrameIndex >= 18)
			{
				Main.wofDrawFrameIndex = 0;
			}
			float num8 = num3 - num2;
			int i = (int)num2;
			while ((float)i < num3)
			{
				num8 = num3 - (float)i;
				if (num8 > (float)num)
				{
					num8 = (float)num;
				}
				int j = 0;
				while ((float)j < num8)
				{
					int x = (int)(num6 + (float)(TextureAssets.Wof.Width() / 2)) / 16;
					int y = (i + j) / 16;
					Main.spriteBatch.Draw(TextureAssets.Wof.Value, new Vector2(num6 - Main.screenPosition.X, (float)(i + j) - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, num7 + j, TextureAssets.Wof.Width(), 16)), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects, 0f);
					j += 16;
				}
				i += num;
			}
		}

		// Token: 0x060004D7 RID: 1239 RVA: 0x000F5680 File Offset: 0x000F3880
		private static void DrawWOFRopeToTheHungry(int i)
		{
			float num = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2);
			float y = Main.npc[Main.wofNPCIndex].position.Y;
			float num2 = (float)(Main.wofDrawAreaBottom - Main.wofDrawAreaTop);
			bool flag = false;
			if (Main.npc[i].frameCounter > 7.0)
			{
				flag = true;
			}
			y = (float)Main.wofDrawAreaTop + num2 * Main.npc[i].ai[0];
			float scale = Main.npc[i].scale;
			float x = Main.npc[i].Center.X;
			float y2 = Main.npc[i].Bottom.Y - (float)Main.npc[i].height * 0.5f * scale;
			Vector2 vector;
			vector..ctor(x, y2);
			vector += Main.npc[i].netOffset;
			float num3 = num - vector.X;
			float num4 = y - vector.Y;
			float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
			bool flag2 = true;
			while (flag2)
			{
				SpriteEffects effects = 0;
				if (flag)
				{
					effects = 1;
					flag = false;
				}
				else
				{
					flag = true;
				}
				int height = 28;
				int num5 = (int)(40f * scale);
				float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
				if (num6 < (float)num5)
				{
					height = (int)num6 - num5 + 28;
					flag2 = false;
				}
				num6 = 28f * scale / num6;
				num3 *= num6;
				num4 *= num6;
				vector.X += num3;
				vector.Y += num4;
				num3 = num - vector.X;
				num4 = y - vector.Y;
				Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
				Main.spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain4.Width(), height)), color, rotation, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), scale, effects, 0f);
			}
		}

		// Token: 0x060004D8 RID: 1240 RVA: 0x000F58EC File Offset: 0x000F3AEC
		private static void DrawWOFTongueToPlayer(int i)
		{
			float num = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2);
			float num2 = Main.npc[Main.wofNPCIndex].position.Y + (float)(Main.npc[Main.wofNPCIndex].height / 2);
			Vector2 vector;
			vector..ctor(Main.player[i].position.X + (float)Main.player[i].width * 0.5f, Main.player[i].position.Y + (float)Main.player[i].height * 0.5f);
			float num3 = num - vector.X;
			float num4 = num2 - vector.Y;
			float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
			bool flag = true;
			while (flag)
			{
				float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
				if (num5 < 40f)
				{
					flag = false;
				}
				else
				{
					num5 = (float)TextureAssets.Chain12.Height() / num5;
					num3 *= num5;
					num4 *= num5;
					vector.X += num3;
					vector.Y += num4;
					num3 = num - vector.X;
					num4 = num2 - vector.Y;
					Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					Main.spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height())), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), 1f, 0, 0f);
				}
			}
		}

		// Token: 0x060004D9 RID: 1241 RVA: 0x000F5AF0 File Offset: 0x000F3CF0
		public static Color quickAlpha(Color oldColor, float Alpha)
		{
			Color result = oldColor;
			result.R = (byte)((float)result.R * Alpha);
			result.G = (byte)((float)result.G * Alpha);
			result.B = (byte)((float)result.B * Alpha);
			result.A = (byte)((float)result.A * Alpha);
			return result;
		}

		// Token: 0x060004DA RID: 1242 RVA: 0x000F5B48 File Offset: 0x000F3D48
		private void DrawItem_GetBasics(Item item, int slot, out Texture2D texture, out Rectangle frame, out Rectangle glowmaskFrame)
		{
			this.LoadItem(item.type);
			if (ItemID.Sets.AnimatesAsSoul[item.type] || ItemID.Sets.NebulaPickup[item.type])
			{
				this.DrawItem_AnimateSlot(slot, Main.itemAnimations[item.type].TicksPerFrame, Main.itemAnimations[item.type].FrameCount);
				texture = TextureAssets.Item[item.type].Value;
			}
			else if (ItemID.Sets.IsFood[item.type])
			{
				texture = TextureAssets.Item[item.type].Value;
			}
			else
			{
				int type = item.type;
				if (type <= 75)
				{
					if (type - 71 <= 3)
					{
						int num = item.type - 71;
						texture = TextureAssets.Coin[num].Value;
						this.DrawItem_AnimateSlot(slot, 6, 8);
						frame = (glowmaskFrame = Main._coinOnWorldAnimation.GetFrame(texture, Main.itemFrameCounter[slot]));
						return;
					}
					if (type == 75)
					{
						texture = TextureAssets.Item[item.type].Value;
						this.DrawItem_AnimateSlot(slot, Main.itemAnimations[item.type].TicksPerFrame, Main.itemAnimations[item.type].FrameCount * 2 - 1);
						goto IL_1E8;
					}
				}
				else
				{
					if (type == 3858)
					{
						texture = TextureAssets.Item[item.type].Value;
						this.DrawItem_AnimateSlot(slot, 5, 3);
						frame = texture.Frame(1, 1, 0, 0, 0, 0);
						glowmaskFrame = TextureAssets.GlowMask[233].Value.Frame(1, 3, 0, Main.itemFrameCounter[slot] / 5, 0, 0);
						glowmaskFrame.Height -= 2;
						return;
					}
					if (type - 5358 <= 3)
					{
						this.LoadItem(5437);
						texture = TextureAssets.Item[5437].Value;
						goto IL_1E8;
					}
				}
				texture = TextureAssets.Item[item.type].Value;
			}
			IL_1E8:
			if (Main.itemAnimations[item.type] != null)
			{
				frame = (glowmaskFrame = Main.itemAnimations[item.type].GetFrame(texture, Main.itemFrameCounter[slot]));
				return;
			}
			frame = (glowmaskFrame = texture.Frame(1, 1, 0, 0, 0, 0));
		}

		// Token: 0x060004DB RID: 1243 RVA: 0x000F5D98 File Offset: 0x000F3F98
		private void DrawItem_AnimateSlot(int slot, int gameFramesPerSpriteFrame, int spriteFramesAmount)
		{
			int[] array = Main.itemFrameCounter;
			int num = array[slot] + 1;
			array[slot] = num;
			if (num >= gameFramesPerSpriteFrame * spriteFramesAmount)
			{
				Main.itemFrameCounter[slot] = 0;
			}
		}

		// Token: 0x060004DC RID: 1244 RVA: 0x000F5DC8 File Offset: 0x000F3FC8
		protected void DrawItem(Item item, int whoami)
		{
			if (!item.active || item.IsAir)
			{
				return;
			}
			Main.instance.LoadItem(item.type);
			Texture2D texture;
			Rectangle frame;
			Rectangle glowmaskFrame;
			this.DrawItem_GetBasics(item, whoami, out texture, out frame, out glowmaskFrame);
			Vector2 vector = frame.Size() / 2f;
			Vector2 vector2;
			vector2..ctor((float)(item.width / 2) - vector.X, (float)(item.height - frame.Height));
			Vector2 vector3 = item.position - Main.screenPosition + vector + vector2;
			float num = item.velocity.X * 0.2f;
			if (item.shimmered)
			{
				num = 0f;
			}
			float scale = 1f;
			Color color = Lighting.GetColor(item.Center.ToTileCoordinates());
			Color currentColor = item.GetAlpha(color);
			if (item.shimmered)
			{
				currentColor.R = (byte)(255f * (1f - item.shimmerTime));
				currentColor.G = (byte)(255f * (1f - item.shimmerTime));
				currentColor.B = (byte)(255f * (1f - item.shimmerTime));
				currentColor.A = (byte)(255f * (1f - item.shimmerTime));
			}
			else if (item.shimmerTime > 0f)
			{
				currentColor.R = (byte)((float)currentColor.R * (1f - item.shimmerTime));
				currentColor.G = (byte)((float)currentColor.G * (1f - item.shimmerTime));
				currentColor.B = (byte)((float)currentColor.B * (1f - item.shimmerTime));
				currentColor.A = (byte)((float)currentColor.A * (1f - item.shimmerTime));
			}
			ItemSlot.GetItemLight(ref currentColor, ref scale, item, false);
			if (ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, currentColor, ref num, ref scale, whoami))
			{
				int num2 = (int)item.glowMask;
				if (!Main.gamePaused && base.IsActive && (item.IsACoin || item.type == 58 || item.type == 109) && color.R > 60 && (float)Main.rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 10f < (float)(color.R / 50))
				{
					int type = 43;
					Color newColor = Color.White;
					int alpha = 254;
					float scale2 = 0.5f;
					if (item.IsACoin)
					{
						newColor = default(Color);
						alpha = 0;
						scale2 = 1f;
					}
					switch (item.type)
					{
					case 71:
						type = 244;
						break;
					case 72:
						type = 245;
						break;
					case 73:
						type = 246;
						break;
					case 74:
						type = 247;
						break;
					}
					int num3 = Dust.NewDust(item.position, item.width, item.height, type, 0f, 0f, alpha, newColor, scale2);
					Main.dust[num3].velocity *= 0f;
				}
				if (ItemID.Sets.BossBag[item.type])
				{
					float num4 = (float)item.timeSinceItemSpawned / 240f + Main.GlobalTimeWrappedHourly * 0.04f;
					float globalTimeWrappedHourly = Main.GlobalTimeWrappedHourly;
					globalTimeWrappedHourly %= 4f;
					globalTimeWrappedHourly /= 2f;
					if (globalTimeWrappedHourly >= 1f)
					{
						globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
					}
					globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
					for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
					{
						Main.spriteBatch.Draw(texture, vector3 + new Vector2(0f, 8f).RotatedBy((double)((num5 + num4) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly, new Rectangle?(frame), new Color(90, 70, 255, 50), num, vector, scale, 0, 0f);
					}
					for (float num6 = 0f; num6 < 1f; num6 += 0.34f)
					{
						Main.spriteBatch.Draw(texture, vector3 + new Vector2(0f, 4f).RotatedBy((double)((num6 + num4) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly, new Rectangle?(frame), new Color(140, 120, 255, 77), num, vector, scale, 0, 0f);
					}
				}
				else if (item.type == 75)
				{
					float num7 = (float)item.timeSinceItemSpawned / 240f + Main.GlobalTimeWrappedHourly * 0.04f;
					float globalTimeWrappedHourly2 = Main.GlobalTimeWrappedHourly;
					globalTimeWrappedHourly2 %= 5f;
					globalTimeWrappedHourly2 /= 2.5f;
					if (globalTimeWrappedHourly2 >= 1f)
					{
						globalTimeWrappedHourly2 = 2f - globalTimeWrappedHourly2;
					}
					globalTimeWrappedHourly2 = globalTimeWrappedHourly2 * 0.5f + 0.5f;
					for (float num8 = 0f; num8 < 1f; num8 += 0.25f)
					{
						Main.spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + new Vector2(0f, 8f).RotatedBy((double)((num8 + num7) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly2, new Rectangle?(frame), new Color(50, 50, 255, 50), num, vector, scale, 0, 0f);
					}
					for (float num9 = 0f; num9 < 1f; num9 += 0.34f)
					{
						Main.spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + new Vector2(0f, 4f).RotatedBy((double)((num9 + num7) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly2, new Rectangle?(frame), new Color(120, 120, 255, 127), num, vector, scale, 0, 0f);
					}
				}
				else if (item.type == 4143)
				{
					float num10 = (float)item.timeSinceItemSpawned / 240f + Main.GlobalTimeWrappedHourly * 0.04f;
					float globalTimeWrappedHourly3 = Main.GlobalTimeWrappedHourly;
					globalTimeWrappedHourly3 %= 5f;
					globalTimeWrappedHourly3 /= 2.5f;
					if (globalTimeWrappedHourly3 >= 1f)
					{
						globalTimeWrappedHourly3 = 2f - globalTimeWrappedHourly3;
					}
					globalTimeWrappedHourly3 = globalTimeWrappedHourly3 * 0.5f + 0.5f;
					for (float num11 = 0f; num11 < 1f; num11 += 0.34f)
					{
						Main.spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + new Vector2(0f, 8f).RotatedBy((double)((num11 + num10) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly3, new Rectangle?(frame), new Color(30, 30, 155, 60), num, vector, scale, 0, 0f);
					}
					for (float num12 = 0f; num12 < 1f; num12 += 0.34f)
					{
						Main.spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + new Vector2(0f, 4f).RotatedBy((double)((num12 + num10) * 6.2831855f), default(Vector2)) * globalTimeWrappedHourly3, new Rectangle?(frame), new Color(60, 60, 127, 57), num, vector, scale, 0, 0f);
					}
					Main.spriteBatch.Draw(texture, vector3, new Rectangle?(frame), new Color(255, 255, 255, 128), num, vector, scale, 0, 0f);
				}
				if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
				{
					currentColor = ((item.shimmerTime <= 0f) ? new Color(250, 250, 250, (int)(Main.mouseTextColor / 2)) : new Color((int)(250f * (1f - item.shimmerTime)), (int)(250f * (1f - item.shimmerTime)), (int)(250f * (1f - item.shimmerTime)), (int)((float)(Main.mouseTextColor / 2) * (1f - item.shimmerTime))));
					scale = (float)Main.mouseTextColor / 1000f + 0.8f;
				}
				if (item.type == 3779)
				{
					num2 = -1;
				}
				Main.spriteBatch.Draw(texture, vector3, new Rectangle?(frame), currentColor, num, vector, scale, 0, 0f);
				if (item.shimmered)
				{
					Main.spriteBatch.Draw(texture, vector3, new Rectangle?(frame), new Color((int)currentColor.R, (int)currentColor.G, (int)currentColor.B, 0), num, vector, scale, 0, 0f);
				}
				if (item.color != Color.Transparent)
				{
					Main.spriteBatch.Draw(texture, vector3, new Rectangle?(frame), item.GetColor(color), num, vector, scale, 0, 0f);
				}
				if (num2 != -1)
				{
					Color color2;
					color2..ctor(250, 250, 250, item.alpha);
					if (item.type == 5146)
					{
						color2..ctor(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					}
					Main.spriteBatch.Draw(TextureAssets.GlowMask[num2].Value, vector3, new Rectangle?(frame), color2, num, vector, scale, 0, 0f);
				}
				if (ItemID.Sets.TrapSigned[item.type])
				{
					Main.spriteBatch.Draw(TextureAssets.Wire.Value, vector3 + frame.Size().RotatedBy((double)num, default(Vector2)) * 0.45f * item.scale, new Rectangle?(new Rectangle(4, 58, 8, 8)), currentColor, 0f, new Vector2(4f), 1f, 0, 0f);
				}
				if (item.type == 3858)
				{
					Main.spriteBatch.Draw(TextureAssets.GlowMask[233].Value, vector3, new Rectangle?(glowmaskFrame), new Color(255, 255, 255, 63) * 0.75f, num, glowmaskFrame.Size() / 2f, scale, 0, 0f);
				}
				if (ItemID.Sets.DrawUnsafeIndicator[item.type])
				{
					Vector2 vector4 = new Vector2(-4f, -4f) * scale;
					Texture2D value = TextureAssets.Extra[258].Value;
					Rectangle rectangle = value.Frame(1, 1, 0, 0, 0, 0);
					Main.spriteBatch.Draw(value, vector3 + vector4 + frame.Size().RotatedBy((double)num, default(Vector2)) * 0.45f * item.scale, new Rectangle?(rectangle), currentColor, num, rectangle.Size() / 2f, 1f, 0, 0f);
				}
			}
			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, currentColor, num, scale, whoami);
		}

		// Token: 0x060004DD RID: 1245 RVA: 0x000F6960 File Offset: 0x000F4B60
		public void DrawItems()
		{
			for (int i = 0; i < 400; i++)
			{
				this.DrawItem(Main.item[i], i);
			}
		}

		// Token: 0x060004DE RID: 1246 RVA: 0x000F698C File Offset: 0x000F4B8C
		protected void DrawRain()
		{
			bool flag = base.IsActive || Main.netMode == 1;
			Rectangle value;
			value..ctor(0, 0, 2, 40);
			Texture2D value2 = TextureAssets.Rain.Value;
			Vector2 zero = Vector2.Zero;
			for (int i = 0; i < Main.maxRain; i++)
			{
				Rain rain = Main.rain[i];
				if (rain.active)
				{
					value.X = (int)(rain.type * 4);
					Color color = Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f;
					if (Main.shimmerAlpha > 0f)
					{
						color *= 1f - Main.shimmerAlpha;
					}
					if (rain.waterStyle < 15)
					{
						value2 = TextureAssets.Rain.Value;
						goto IL_F1;
					}
					value2 = LoaderManager.Get<WaterStylesLoader>().Get((int)rain.waterStyle).GetRainTexture().Value;
					if (value2 != null)
					{
						goto IL_F1;
					}
					IL_12A:
					if (flag)
					{
						rain.Update();
						goto IL_134;
					}
					goto IL_134;
					IL_F1:
					Main.spriteBatch.Draw(value2, rain.position - Main.screenPosition, new Rectangle?(value), color, rain.rotation, zero, rain.scale, 0, 0f);
					goto IL_12A;
				}
				IL_134:;
			}
			TimeLogger.DetailedDrawTime(23);
		}

		// Token: 0x060004DF RID: 1247 RVA: 0x000F6AE8 File Offset: 0x000F4CE8
		protected void DrawDust()
		{
			Rectangle rectangle;
			rectangle..ctor((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 50, Main.screenWidth + 1000, Main.screenHeight + 100);
			rectangle..ctor((int)Main.screenPosition.X - 1000, (int)Main.screenPosition.Y - 1050, Main.screenWidth + 2000, Main.screenHeight + 2100);
			Rectangle rectangle2 = rectangle;
			ArmorShaderData armorShaderData = null;
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
			for (int i = 0; i < Main.maxDustToDraw; i++)
			{
				Dust dust = Main.dust[i];
				if (dust.active)
				{
					if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226 || dust.type == 278)
					{
						rectangle = rectangle2;
					}
					if (new Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
					{
						float scale = dust.GetVisualScale();
						if (dust.shader != armorShaderData)
						{
							Main.spriteBatch.End();
							armorShaderData = dust.shader;
							if (armorShaderData == null)
							{
								Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
							}
							else
							{
								Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
								dust.shader.Apply(null, null);
							}
						}
						if (dust.type >= 130 && dust.type <= 134)
						{
							float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num *= 0.3f;
							num *= 10f;
							if (num > 10f)
							{
								num = 10f;
							}
							int j = 0;
							while ((float)j < num)
							{
								Vector2 velocity = dust.velocity;
								Vector2 vector = dust.position - velocity * (float)j;
								float scale2 = dust.scale * (1f - (float)j / 10f);
								Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color = dust.GetAlpha(color);
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector - Main.screenPosition, new Rectangle?(dust.frame), color, dust.rotation, new Vector2(4f, 4f), scale2, 0, 0f);
								j++;
							}
						}
						else if (dust.type == 278)
						{
							float num2 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num2 *= 0.3f;
							num2 *= 10f;
							if (num2 > 10f)
							{
								num2 = 10f;
							}
							Vector2 origin;
							origin..ctor(4f, 4f);
							int k = 0;
							while ((float)k < num2)
							{
								Vector2 velocity2 = dust.velocity;
								Vector2 vector2 = dust.position - velocity2 * (float)k;
								float scale3 = dust.scale * (1f - (float)k / 10f);
								Color color2 = Lighting.GetColor((int)(dust.position.X + 4f) / 16, (int)(dust.position.Y + 4f) / 16);
								color2 = dust.GetAlpha(color2);
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector2 - Main.screenPosition, new Rectangle?(dust.frame), color2, dust.rotation, origin, scale3, 0, 0f);
								k++;
							}
						}
						else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
						{
							float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num3 *= 0.3f;
							num3 *= 10f;
							if (num3 > 10f)
							{
								num3 = 10f;
							}
							int l = 0;
							while ((float)l < num3)
							{
								Vector2 velocity3 = dust.velocity;
								Vector2 vector3 = dust.position - velocity3 * (float)l;
								float scale4 = dust.scale * (1f - (float)l / 10f);
								Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color3 = dust.GetAlpha(color3);
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector3 - Main.screenPosition, new Rectangle?(dust.frame), color3, dust.rotation, new Vector2(4f, 4f), scale4, 0, 0f);
								l++;
							}
						}
						else if (dust.type == 264 && dust.fadeIn == 0f)
						{
							float num4 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num4 *= 10f;
							if (num4 > 10f)
							{
								num4 = 10f;
							}
							int m = 0;
							while ((float)m < num4)
							{
								Vector2 velocity4 = dust.velocity;
								Vector2 vector4 = dust.position - velocity4 * (float)m;
								float scale5 = dust.scale * (1f - (float)m / 10f);
								Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color4 = dust.GetAlpha(color4) * 0.3f;
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector4 - Main.screenPosition, new Rectangle?(dust.frame), color4, dust.rotation, new Vector2(5f), scale5, 0, 0f);
								color4 = dust.GetColor(color4);
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector4 - Main.screenPosition, new Rectangle?(dust.frame), color4, dust.rotation, new Vector2(5f), scale5, 0, 0f);
								m++;
							}
						}
						else if ((dust.type == 226 || dust.type == 272) && dust.fadeIn == 0f)
						{
							float num5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num5 *= 0.3f;
							num5 *= 10f;
							if (num5 > 10f)
							{
								num5 = 10f;
							}
							int n = 0;
							while ((float)n < num5)
							{
								Vector2 velocity5 = dust.velocity;
								Vector2 vector5 = dust.position - velocity5 * (float)n;
								float scale6 = dust.scale * (1f - (float)n / 10f);
								Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color5 = dust.GetAlpha(color5);
								Main.spriteBatch.Draw(TextureAssets.Dust.Value, vector5 - Main.screenPosition, new Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale6, 0, 0f);
								n++;
							}
						}
						Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						if (dust.type == 6 || dust.type == 15 || (dust.type >= 59 && dust.type <= 64))
						{
							newColor = Color.White;
						}
						newColor = dust.GetAlpha(newColor);
						if (dust.type == 213)
						{
							scale = 1f;
						}
						ModDust modDust = DustLoader.GetDust(dust.type);
						if (modDust != null)
						{
							if (modDust.PreDraw(dust))
							{
								modDust.Draw(dust, newColor, scale);
							}
							if (newColor == Color.Black)
							{
								dust.active = false;
							}
						}
						else
						{
							Main.spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - Main.screenPosition, new Rectangle?(dust.frame), newColor, dust.GetVisualRotation(), new Vector2(4f, 4f), scale, 0, 0f);
							if (dust.color.PackedValue != 0U)
							{
								Color color6 = dust.GetColor(newColor);
								if (color6.PackedValue != 0U)
								{
									Main.spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - Main.screenPosition, new Rectangle?(dust.frame), color6, dust.GetVisualRotation(), new Vector2(4f, 4f), scale, 0, 0f);
								}
							}
							if (newColor == Color.Black)
							{
								dust.active = false;
							}
						}
					}
					else
					{
						dust.active = false;
					}
				}
			}
			Main.spriteBatch.End();
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			TimeLogger.DetailedDrawTime(25);
		}

		// Token: 0x060004E0 RID: 1248 RVA: 0x000F75B8 File Offset: 0x000F57B8
		private static void HelpText()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].ConsumedLifeCrystals > 0)
			{
				flag = true;
			}
			bool flag2 = false;
			if (Main.player[Main.myPlayer].ConsumedManaCrystals > 0)
			{
				flag2 = true;
			}
			bool flag3 = true;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			for (int i = 0; i < 58; i++)
			{
				if (Main.player[Main.myPlayer].inventory[i].pick > 0 && Main.player[Main.myPlayer].inventory[i].Name != "Copper Pickaxe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].axe > 0 && Main.player[Main.myPlayer].inventory[i].Name != "Copper Axe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].hammer > 0)
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 11 || Main.player[Main.myPlayer].inventory[i].type == 12 || Main.player[Main.myPlayer].inventory[i].type == 13 || Main.player[Main.myPlayer].inventory[i].type == 14 || Main.player[Main.myPlayer].inventory[i].type == 699 || Main.player[Main.myPlayer].inventory[i].type == 700 || Main.player[Main.myPlayer].inventory[i].type == 701 || Main.player[Main.myPlayer].inventory[i].type == 702)
				{
					flag4 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 19 || Main.player[Main.myPlayer].inventory[i].type == 20 || Main.player[Main.myPlayer].inventory[i].type == 21 || Main.player[Main.myPlayer].inventory[i].type == 22 || Main.player[Main.myPlayer].inventory[i].type == 703 || Main.player[Main.myPlayer].inventory[i].type == 704 || Main.player[Main.myPlayer].inventory[i].type == 705 || Main.player[Main.myPlayer].inventory[i].type == 706)
				{
					flag5 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 75)
				{
					flag6 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 38)
				{
					flag7 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 68 || Main.player[Main.myPlayer].inventory[i].type == 70 || Main.player[Main.myPlayer].inventory[i].type == 1330 || Main.player[Main.myPlayer].inventory[i].type == 1331 || Main.player[Main.myPlayer].inventory[i].type == 67 || Main.player[Main.myPlayer].inventory[i].type == 2886)
				{
					flag8 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 84 || Main.player[Main.myPlayer].inventory[i].type == 1236 || Main.player[Main.myPlayer].inventory[i].type == 1237 || Main.player[Main.myPlayer].inventory[i].type == 1238 || Main.player[Main.myPlayer].inventory[i].type == 1239 || Main.player[Main.myPlayer].inventory[i].type == 1240 || Main.player[Main.myPlayer].inventory[i].type == 1241 || Main.player[Main.myPlayer].inventory[i].type == 939 || Main.player[Main.myPlayer].inventory[i].type == 1273 || Main.player[Main.myPlayer].inventory[i].type == 2585 || Main.player[Main.myPlayer].inventory[i].type == 2360 || Main.player[Main.myPlayer].inventory[i].type == 185 || Main.player[Main.myPlayer].inventory[i].type == 1800 || Main.player[Main.myPlayer].inventory[i].type == 1915)
				{
					flag9 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 3347)
				{
					flag10 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 174)
				{
					flag11 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 1141)
				{
					flag12 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 1533 || Main.player[Main.myPlayer].inventory[i].type == 1534 || Main.player[Main.myPlayer].inventory[i].type == 1535 || Main.player[Main.myPlayer].inventory[i].type == 1536 || Main.player[Main.myPlayer].inventory[i].type == 1537 || Main.player[Main.myPlayer].inventory[i].type == 4714)
				{
					flag13 = true;
				}
			}
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = false;
			bool flag19 = false;
			bool flag20 = false;
			bool flag21 = false;
			bool flag22 = false;
			bool flag23 = false;
			bool flag24 = false;
			bool flag25 = false;
			bool flag26 = false;
			bool flag27 = false;
			bool flag28 = false;
			bool flag29 = false;
			bool flag30 = false;
			bool flag31 = false;
			bool flag32 = false;
			bool flag33 = false;
			bool flag34 = false;
			bool flag35 = false;
			bool flag36 = false;
			bool flag37 = false;
			bool flag38 = false;
			int num = 0;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					if (Main.npc[j].townNPC && Main.npc[j].type != 37)
					{
						num++;
					}
					if (Main.npc[j].type == 17)
					{
						flag14 = true;
					}
					if (Main.npc[j].type == 18)
					{
						flag15 = true;
					}
					if (Main.npc[j].type == 19)
					{
						flag17 = true;
					}
					if (Main.npc[j].type == 20)
					{
						flag16 = true;
					}
					if (Main.npc[j].type == 54)
					{
						flag22 = true;
					}
					if (Main.npc[j].type == 124)
					{
						flag19 = true;
					}
					if (Main.npc[j].type == 38)
					{
						flag18 = true;
					}
					if (Main.npc[j].type == 108)
					{
						flag20 = true;
					}
					if (Main.npc[j].type == 107)
					{
						flag21 = true;
					}
					if (Main.npc[j].type == 228)
					{
						flag23 = true;
					}
					if (Main.npc[j].type == 178)
					{
						flag24 = true;
					}
					if (Main.npc[j].type == 209)
					{
						flag25 = true;
					}
					if (Main.npc[j].type == 353)
					{
						flag26 = true;
					}
					if (Main.npc[j].type == 633)
					{
						flag38 = true;
					}
					if (Main.npc[j].type == 369)
					{
						flag27 = true;
					}
					if (Main.npc[j].type == 441)
					{
						flag28 = true;
					}
					if (Main.npc[j].type == 229)
					{
						flag29 = true;
					}
					if (Main.npc[j].type == 207)
					{
						flag30 = true;
					}
					if (Main.npc[j].type == 160)
					{
						flag31 = true;
					}
					if (Main.npc[j].type == 588)
					{
						flag32 = true;
					}
					if (Main.npc[j].type == 227)
					{
						flag33 = true;
					}
					if (Main.npc[j].type == 208)
					{
						flag34 = true;
					}
					if (Main.npc[j].type == 550)
					{
						flag35 = true;
					}
					if (Main.npc[j].type == 368)
					{
						flag36 = true;
					}
					if (Main.npc[j].type == 453)
					{
						flag37 = true;
					}
				}
			}
			object obj = Lang.CreateDialogSubstitutionObject(null);
			LocalizedText text;
			for (;;)
			{
				Main.helpText++;
				if (Language.Exists("GuideHelpText.Help_" + Main.helpText.ToString()))
				{
					text = Language.GetText("GuideHelpText.Help_" + Main.helpText.ToString());
					if (text.CanFormatWith(obj))
					{
						break;
					}
				}
				if (flag3)
				{
					if (Main.helpText == 1)
					{
						goto Block_83;
					}
					if (Main.helpText == 2)
					{
						goto Block_84;
					}
					if (Main.helpText == 3)
					{
						goto Block_85;
					}
					if (Main.helpText == 4)
					{
						goto Block_86;
					}
					if (Main.helpText == 5)
					{
						goto Block_87;
					}
					if (Main.helpText == 6)
					{
						goto Block_88;
					}
				}
				if (flag3 && !flag4 && !flag5 && Main.helpText == 11)
				{
					goto Block_92;
				}
				if (flag3 && flag4 && !flag5)
				{
					if (Main.helpText == 21)
					{
						goto Block_95;
					}
					if (Main.helpText == 22)
					{
						goto Block_96;
					}
				}
				if (flag3 && flag5)
				{
					if (Main.helpText == 31)
					{
						goto Block_98;
					}
					if (Main.helpText == 32)
					{
						goto Block_99;
					}
				}
				if (!flag && Main.helpText == 41)
				{
					goto Block_101;
				}
				if (!flag2 && Main.helpText == 42)
				{
					goto Block_103;
				}
				if (!flag2 && !flag6 && Main.helpText == 43)
				{
					goto Block_106;
				}
				if (!flag14 && !flag15)
				{
					if (Main.helpText == 51)
					{
						goto Block_109;
					}
					if (Main.helpText == 52)
					{
						goto Block_110;
					}
					if (Main.helpText == 53)
					{
						goto Block_111;
					}
					if (Main.helpText == 54)
					{
						goto Block_112;
					}
					if (Main.helpText == 55)
					{
						goto Block_113;
					}
				}
				if (!flag14 && Main.helpText == 61)
				{
					goto Block_115;
				}
				if (!flag15 && Main.helpText == 62)
				{
					goto Block_117;
				}
				if (!flag17 && Main.helpText == 63)
				{
					goto Block_119;
				}
				if (!flag16 && Main.helpText == 64)
				{
					goto Block_121;
				}
				if (!flag19 && Main.helpText == 65 && NPC.downedBoss3)
				{
					goto Block_124;
				}
				if (!flag22 && Main.helpText == 66 && NPC.downedBoss3)
				{
					goto Block_127;
				}
				if (!flag18 && Main.helpText == 67)
				{
					goto Block_129;
				}
				if (!flag21 && NPC.downedBoss2 && Main.helpText == 68)
				{
					goto Block_132;
				}
				if (!flag20 && Main.hardMode && Main.helpText == 69)
				{
					goto Block_135;
				}
				if (!flag23 && Main.helpText == 70 && NPC.downedBoss2)
				{
					goto Block_138;
				}
				if (!flag24 && Main.helpText == 71 && Main.hardMode)
				{
					goto Block_141;
				}
				if (!flag25 && Main.helpText == 72 && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
				{
					goto Block_146;
				}
				if (!flag26 && Main.helpText == 73)
				{
					goto Block_148;
				}
				if (!flag27 && Main.helpText == 74)
				{
					goto Block_150;
				}
				if (!flag28 && Main.helpText == 75 && Main.hardMode)
				{
					goto Block_153;
				}
				if (!flag29 && Main.helpText == 76 && Main.hardMode)
				{
					goto Block_156;
				}
				if (!flag30 && Main.helpText == 77)
				{
					goto Block_158;
				}
				if (!flag31 && Main.helpText == 78 && Main.hardMode)
				{
					goto Block_161;
				}
				if (!flag32 && Main.helpText == 79)
				{
					goto Block_163;
				}
				if (!flag33 && Main.helpText == 80 && num >= 5)
				{
					goto Block_166;
				}
				if (!flag34 && Main.helpText == 81 && num >= 11)
				{
					goto Block_169;
				}
				if (!flag35 && NPC.downedBoss2 && Main.helpText == 82)
				{
					goto Block_172;
				}
				if (!flag36 && Main.helpText == 83 && flag14)
				{
					goto Block_174;
				}
				if (!flag37 && Main.helpText == 84 && !Main.hardMode)
				{
					goto Block_177;
				}
				if (!flag38 && Main.helpText == 85 && !Main.hardMode)
				{
					goto Block_180;
				}
				if (flag7 && !WorldGen.crimson && Main.helpText == 100)
				{
					goto Block_183;
				}
				if (flag8 && Main.helpText == 101)
				{
					goto Block_185;
				}
				if ((flag7 || flag8) && Main.helpText == 102)
				{
					goto Block_188;
				}
				if (flag7 && WorldGen.crimson && Main.helpText == 103)
				{
					goto Block_192;
				}
				if (!flag9 && Main.LocalPlayer.miscEquips[4].IsAir && Main.helpText == 201 && !Main.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					goto Block_198;
				}
				if (Main.helpText == 202 && !Main.hardMode && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 2)
				{
					goto Block_201;
				}
				if (Main.helpText == 203 && Main.hardMode && NPC.downedMechBossAny)
				{
					goto Block_204;
				}
				if (Main.helpText == 204 && !NPC.downedGoblins && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 5 && WorldGen.shadowOrbSmashed)
				{
					goto Block_208;
				}
				if (Main.helpText == 205 && Main.hardMode && !NPC.downedPirates && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 5)
				{
					goto Block_212;
				}
				if (Main.helpText == 206 && Main.hardMode && NPC.downedGolemBoss && !NPC.downedMartians)
				{
					goto Block_216;
				}
				if (Main.helpText == 207 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3))
				{
					goto IL_1198;
				}
				if (Main.helpText == 208 && !Main.hardMode)
				{
					goto Block_221;
				}
				if (Main.helpText == 209 && !Main.hardMode)
				{
					goto Block_223;
				}
				if (Main.helpText == 210 && !Main.hardMode)
				{
					goto Block_225;
				}
				if (Main.helpText == 211 && !Main.hardMode)
				{
					goto Block_227;
				}
				if (Main.helpText == 212 && !Main.hardMode)
				{
					goto Block_229;
				}
				if (Main.helpText == 213 && !Main.hardMode)
				{
					goto Block_231;
				}
				if (Main.helpText == 214 && !Main.hardMode && (flag4 || flag5))
				{
					goto Block_234;
				}
				if (Main.helpText == 215 && Main.LocalPlayer.anglerQuestsFinished < 1)
				{
					goto Block_236;
				}
				if (Main.helpText == 216 && !Main.hardMode)
				{
					goto Block_238;
				}
				if (Main.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_241;
				}
				if (Main.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_244;
				}
				if (Main.helpText == 1002 && !NPC.downedBoss2)
				{
					goto Block_246;
				}
				if (Main.helpText == 1050 && !NPC.downedBoss1 && Main.player[Main.myPlayer].ConsumedLifeCrystals < 5)
				{
					goto Block_250;
				}
				if (Main.helpText == 1051 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statDefense <= 10)
				{
					goto Block_253;
				}
				if (Main.helpText == 1052 && !NPC.downedBoss1 && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 5 && Main.player[Main.myPlayer].statDefense > 10)
				{
					goto Block_257;
				}
				if (Main.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].ConsumedLifeCrystals < 10)
				{
					goto Block_262;
				}
				if (Main.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 10)
				{
					goto Block_267;
				}
				if (Main.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 10)
				{
					goto Block_272;
				}
				if (Main.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					goto Block_276;
				}
				if (Main.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].ConsumedLifeCrystals < 15)
				{
					goto Block_282;
				}
				if (Main.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].ConsumedLifeCrystals == 15)
				{
					goto Block_288;
				}
				if (Main.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].ConsumedLifeCrystals == 15)
				{
					goto Block_294;
				}
				if (Main.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].ConsumedLifeCrystals == 15)
				{
					goto Block_300;
				}
				if (Main.helpText == 1061 && Main.hardMode && !NPC.downedPlantBoss)
				{
					goto Block_303;
				}
				if (Main.helpText == 1062 && Main.hardMode && !NPC.downedPlantBoss)
				{
					goto Block_307;
				}
				if (Main.helpText == 1140 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 10)
				{
					goto Block_312;
				}
				if (Main.helpText == 1141 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 10)
				{
					goto Block_317;
				}
				if (Main.helpText == 1142 && NPC.downedBoss2 && !Main.hardMode)
				{
					goto Block_320;
				}
				if (Main.helpText == 1143 && NPC.downedBoss2 && !NPC.downedQueenBee && Main.player[Main.myPlayer].ConsumedLifeCrystals >= 10)
				{
					goto Block_324;
				}
				if (Main.helpText == 1144 && flag10)
				{
					goto Block_325;
				}
				if (Main.helpText == 1145 && flag11 && !Main.hardMode)
				{
					goto Block_327;
				}
				if (Main.helpText == 1146 && Main.hardMode && Main.player[Main.myPlayer].wingsLogic == 0 && !Main.LocalPlayer.mount.Active && !NPC.downedPlantBoss)
				{
					goto Block_332;
				}
				if (Main.helpText == 1147 && Main.hardMode && WorldGen.SavedOreTiers.Adamantite == 111 && !NPC.downedMechBossAny)
				{
					goto Block_336;
				}
				if (Main.helpText == 1148 && Main.hardMode && WorldGen.SavedOreTiers.Adamantite == 223 && !NPC.downedMechBossAny)
				{
					goto Block_340;
				}
				if (Main.helpText == 1149 && Main.hardMode && NPC.downedMechBossAny && Main.player[Main.myPlayer].ConsumedLifeCrystals == 15 && Main.player[Main.myPlayer].ConsumedLifeFruit < 20)
				{
					goto Block_345;
				}
				if (Main.helpText == 1150 && Main.hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && !NPC.downedPlantBoss)
				{
					goto Block_351;
				}
				if (Main.helpText == 1151 && Main.hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && flag12)
				{
					goto Block_355;
				}
				if (Main.helpText == 1152 && Main.hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && !flag12)
				{
					goto Block_360;
				}
				if (Main.helpText == 1153 && Main.hardMode && flag13)
				{
					goto Block_362;
				}
				if (Main.helpText == 1154 && Main.hardMode && !NPC.downedFishron)
				{
					goto Block_365;
				}
				if (Main.helpText == 1155 && Main.hardMode && NPC.downedGolemBoss && !NPC.downedHalloweenTree && !NPC.downedHalloweenKing)
				{
					goto Block_370;
				}
				if (Main.helpText == 1156 && Main.hardMode && NPC.downedGolemBoss && !NPC.downedChristmasIceQueen && !NPC.downedChristmasTree && !NPC.downedChristmasSantank)
				{
					goto Block_376;
				}
				if (Main.helpText == 1157 && Main.hardMode && NPC.downedGolemBoss && NPC.AnyNPCs(437) && !NPC.downedMoonlord)
				{
					goto Block_381;
				}
				if (Main.helpText == 1158 && Main.hardMode && NPC.LunarApocalypseIsUp && !NPC.downedMoonlord)
				{
					goto Block_385;
				}
				if (Main.helpText == 1159 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedDeerclops)
				{
					goto IL_1B4E;
				}
				if (Main.helpText > 1200)
				{
					Main.helpText = 0;
				}
			}
			Main.npcChatText = text.FormatWith(obj);
			return;
			Block_83:
			Main.npcChatText = Lang.dialog(177, false);
			return;
			Block_84:
			Main.npcChatText = Lang.dialog(178, false);
			return;
			Block_85:
			Main.npcChatText = Lang.dialog(179, false);
			return;
			Block_86:
			Main.npcChatText = Lang.dialog(180, false);
			return;
			Block_87:
			Main.npcChatText = Lang.dialog(181, false);
			return;
			Block_88:
			Main.npcChatText = Lang.dialog(182, false);
			return;
			Block_92:
			Main.npcChatText = Lang.dialog(183, false);
			return;
			Block_95:
			Main.npcChatText = Lang.dialog(184, false);
			return;
			Block_96:
			Main.npcChatText = Lang.dialog(185, false);
			return;
			Block_98:
			Main.npcChatText = Lang.dialog(186, false);
			return;
			Block_99:
			Main.npcChatText = Lang.dialog(187, false);
			return;
			Block_101:
			Main.npcChatText = Lang.dialog(188, false);
			return;
			Block_103:
			Main.npcChatText = Lang.dialog(189, false);
			return;
			Block_106:
			Main.npcChatText = Lang.dialog(190, false);
			return;
			Block_109:
			Main.npcChatText = Lang.dialog(191, false);
			return;
			Block_110:
			Main.npcChatText = Lang.dialog(192, false);
			return;
			Block_111:
			Main.npcChatText = Lang.dialog(193, false);
			return;
			Block_112:
			Main.npcChatText = Lang.dialog(194, false);
			return;
			Block_113:
			Main.npcChatText = Language.GetTextValue("GuideHelpText.Help_1065");
			return;
			Block_115:
			Main.npcChatText = Lang.dialog(195, false);
			return;
			Block_117:
			Main.npcChatText = Lang.dialog(196, false);
			return;
			Block_119:
			Main.npcChatText = Lang.dialog(197, false);
			return;
			Block_121:
			Main.npcChatText = Lang.dialog(198, false);
			return;
			Block_124:
			Main.npcChatText = Lang.dialog(199, false);
			return;
			Block_127:
			Main.npcChatText = Lang.dialog(200, false);
			return;
			Block_129:
			Main.npcChatText = Lang.dialog(201, false);
			return;
			Block_132:
			Main.npcChatText = Lang.dialog(202, false);
			return;
			Block_135:
			Main.npcChatText = Lang.dialog(203, false);
			return;
			Block_138:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1100");
			return;
			Block_141:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1101");
			return;
			Block_146:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1102");
			return;
			Block_148:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1103");
			return;
			Block_150:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1104");
			return;
			Block_153:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1105");
			return;
			Block_156:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1106");
			return;
			Block_158:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1107");
			return;
			Block_161:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1108");
			return;
			Block_163:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1109");
			return;
			Block_166:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1110");
			return;
			Block_169:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1111");
			return;
			Block_172:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1112");
			return;
			Block_174:
			Main.npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1113", obj);
			return;
			Block_177:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1114");
			return;
			Block_180:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1115");
			return;
			Block_183:
			Main.npcChatText = Lang.dialog(204, false);
			return;
			Block_185:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205, false);
			return;
			Block_188:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206, false);
			return;
			Block_192:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1159");
			return;
			Block_198:
			Main.npcChatText = Lang.dialog(207, false);
			return;
			Block_201:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1120");
			return;
			Block_204:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1121");
			return;
			Block_208:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1122");
			return;
			Block_212:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1123");
			return;
			Block_216:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1124");
			return;
			IL_1198:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1125");
			return;
			Block_221:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1130");
			return;
			Block_223:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1131");
			return;
			Block_225:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1132");
			return;
			Block_227:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1133");
			return;
			Block_229:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1134");
			return;
			Block_231:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1135");
			return;
			Block_234:
			Main.npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1136", obj);
			return;
			Block_236:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1137");
			return;
			Block_238:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1138");
			return;
			Block_241:
			Main.npcChatText = Lang.dialog(208, false);
			return;
			Block_244:
			Main.npcChatText = Lang.dialog(209, false);
			return;
			Block_246:
			if (WorldGen.crimson)
			{
				Main.npcChatText = Lang.dialog(331, false);
				return;
			}
			Main.npcChatText = Lang.dialog(210, false);
			return;
			Block_250:
			Main.npcChatText = Lang.dialog(211, false);
			return;
			Block_253:
			Main.npcChatText = Lang.dialog(212, false);
			return;
			Block_257:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 404 : 213, false);
			return;
			Block_262:
			Main.npcChatText = Lang.dialog(214, false);
			return;
			Block_267:
			Main.npcChatText = Lang.dialog(215, false);
			return;
			Block_272:
			Main.npcChatText = Lang.dialog(216, false);
			return;
			Block_276:
			Main.npcChatText = Lang.dialog(217, false);
			return;
			Block_282:
			Main.npcChatText = Lang.dialog(218, false);
			return;
			Block_288:
			Main.npcChatText = Lang.dialog(219, false);
			return;
			Block_294:
			Main.npcChatText = Lang.dialog(220, false);
			return;
			Block_300:
			Main.npcChatText = Lang.dialog(221, false);
			return;
			Block_303:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222, false);
			return;
			Block_307:
			Main.npcChatText = Lang.dialog(223, false);
			return;
			Block_312:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1140");
			return;
			Block_317:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1141");
			return;
			Block_320:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1142");
			return;
			Block_324:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1143");
			return;
			Block_325:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1144");
			return;
			Block_327:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1145");
			return;
			Block_332:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1146");
			return;
			Block_336:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1147");
			return;
			Block_340:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1148");
			return;
			Block_345:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1149");
			return;
			Block_351:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1150");
			return;
			Block_355:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1151");
			return;
			Block_360:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1152");
			return;
			Block_362:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1153");
			return;
			Block_365:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1154");
			return;
			Block_370:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1155");
			return;
			Block_376:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1156");
			return;
			Block_381:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1157");
			return;
			Block_385:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1158");
			return;
			IL_1B4E:
			Main.npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1160");
		}

		// Token: 0x060004E1 RID: 1249 RVA: 0x000F9124 File Offset: 0x000F7324
		protected void GUIChatDrawInner()
		{
			if (Main.player[Main.myPlayer].talkNPC < 0 && Main.player[Main.myPlayer].sign == -1)
			{
				Main.npcChatText = "";
				return;
			}
			Color color;
			color..ctor(200, 200, 200, 200);
			int num = (int)((Main.mouseTextColor * 2 + byte.MaxValue) / 3);
			Color color2;
			color2..ctor(num, num, num, num);
			bool flag = Main.InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
			string textValue = Main.npcChatText;
			object obj = Main.player[Main.myPlayer].talkNPC != -1 && Main.CanDryadPlayStardewAnimation(Main.LocalPlayer, Main.npc[Main.player[Main.myPlayer].talkNPC]);
			if (Main.player[Main.myPlayer].talkNPC != -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].ai[0] == 24f && NPC.RerollDryadText == 2)
			{
				NPC.RerollDryadText = 1;
			}
			object obj2 = obj;
			if (obj2 != null && NPC.RerollDryadText == 1 && Main.npc[Main.player[Main.myPlayer].talkNPC].ai[0] != 24f && Main.player[Main.myPlayer].talkNPC != -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].active && Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
			{
				NPC.RerollDryadText = 0;
				Main.npcChatText = Main.npc[Main.player[Main.myPlayer].talkNPC].GetChat();
				NPC.PreventJojaColaDialog = true;
			}
			if (obj2 != null && !NPC.PreventJojaColaDialog)
			{
				textValue = Language.GetTextValue("StardewTalk.PlayerHasColaAndIsHoldingIt");
			}
			int talkNPC = Main.player[Main.myPlayer].talkNPC;
			this._textDisplayCache.PrepareCache(textValue, color2);
			List<List<TextSnippet>> textLines = this._textDisplayCache.TextLines;
			int amountOfLines = this._textDisplayCache.AmountOfLines;
			bool flag2 = false;
			if (Main.editSign)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				if (this.textBlinkerState == 1)
				{
					flag2 = true;
					textLines[amountOfLines - 1].Add(new TextSnippet("|", Color.White, 1f));
				}
				Main.instance.DrawWindowsIMEPanel(new Vector2((float)(Main.screenWidth / 2), 90f), 0.5f);
			}
			Main.spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2((float)(Main.screenWidth / 2 - TextureAssets.ChatBack.Width() / 2), 100f), new Rectangle?(new Rectangle(0, 0, TextureAssets.ChatBack.Width(), (amountOfLines + 1) * 30)), color, 0f, default(Vector2), 1f, 0, 0f);
			Main.spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2((float)(Main.screenWidth / 2 - TextureAssets.ChatBack.Width() / 2), (float)(100 + (amountOfLines + 1) * 30)), new Rectangle?(new Rectangle(0, TextureAssets.ChatBack.Height() - 30, TextureAssets.ChatBack.Width(), 30)), color, 0f, default(Vector2), 1f, 0, 0f);
			TextSnippet hoveredSnippet = null;
			for (int i = 0; i < amountOfLines; i++)
			{
				List<TextSnippet> text = textLines[i];
				int hoveredSnippetNum;
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text.ToArray(), new Vector2((float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30)), 0f, color2, Color.Black, Vector2.Zero, Vector2.One, out hoveredSnippetNum, -1f, 2f);
				if (hoveredSnippetNum > -1)
				{
					hoveredSnippet = text[hoveredSnippetNum];
				}
			}
			if (flag2)
			{
				textLines[amountOfLines - 1].RemoveAt(textLines[amountOfLines - 1].Count - 1);
			}
			if (hoveredSnippet != null)
			{
				hoveredSnippet.OnHover();
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					hoveredSnippet.OnClick();
				}
			}
			Rectangle rectangle;
			rectangle..ctor(Main.screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100, TextureAssets.ChatBack.Width(), (amountOfLines + 2) * 30);
			int num2 = 120 + amountOfLines * 30 + 30;
			num2 -= 235;
			UIVirtualKeyboard.ShouldHideText = !PlayerInput.SettingsForUI.ShowGamepadHints;
			if (!PlayerInput.UsingGamepad)
			{
				num2 = 9999;
			}
			UIVirtualKeyboard.OffsetDown = num2;
			if (Main.npcChatCornerItem != 0)
			{
				Vector2 position;
				position..ctor((float)(Main.screenWidth / 2 + TextureAssets.ChatBack.Width() / 2), (float)(100 + (amountOfLines + 1) * 30 + 30));
				position -= Vector2.One * 8f;
				Item item = new Item();
				item.netDefaults(Main.npcChatCornerItem);
				float num3 = 1f;
				Texture2D itemTexture;
				Rectangle rectangle2;
				Main.GetItemDrawFrame(item.type, out itemTexture, out rectangle2);
				if (rectangle2.Width > 32 || rectangle2.Height > 32)
				{
					num3 = ((rectangle2.Width <= rectangle2.Height) ? (32f / (float)rectangle2.Height) : (32f / (float)rectangle2.Width));
				}
				Main.spriteBatch.Draw(itemTexture, position, new Rectangle?(rectangle2), item.GetAlpha(Color.White), 0f, rectangle2.Size(), num3, 0, 0f);
				if (item.color != default(Color))
				{
					Main.spriteBatch.Draw(itemTexture, position, new Rectangle?(rectangle2), item.GetColor(item.color), 0f, rectangle2.Size(), num3, 0, 0f);
				}
				if (new Rectangle((int)position.X - (int)((float)rectangle2.Width * num3), (int)position.Y - (int)((float)rectangle2.Height * num3), (int)((float)rectangle2.Width * num3), (int)((float)rectangle2.Height * num3)).Contains(new Point(Main.mouseX, Main.mouseY)))
				{
					Main.cursorOverride = 2;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						if (!Main.drawingPlayerChat)
						{
							Main.OpenPlayerChat();
						}
						if (ChatManager.AddChatText(FontAssets.MouseText.Value, ItemTagHandler.GenerateTag(item), Vector2.One))
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
					}
					this.MouseText(item.Name, -11, 0, -1, -1, -1, -1, 0);
				}
			}
			num = (int)Main.mouseTextColor;
			color2..ctor(num, (int)((double)num / 1.1), num / 2, num);
			string focusText = "";
			string focusText2 = "";
			int num4 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLife;
			for (int j = 0; j < Player.maxBuffs; j++)
			{
				int num5 = Main.player[Main.myPlayer].buffType[j];
				if (Main.debuff[num5] && Main.player[Main.myPlayer].buffTime[j] > 60 && (num5 < 0 || !BuffID.Sets.NurseCannotRemoveDebuff[num5]))
				{
					num4 += 100;
				}
			}
			int health = Main.LocalPlayer.statLifeMax2 - Main.LocalPlayer.statLife;
			bool removeDebuffs = true;
			string reason = "";
			bool canHeal = true;
			if (NPC.downedGolemBoss)
			{
				num4 *= 200;
			}
			else if (NPC.downedPlantBoss)
			{
				num4 *= 150;
			}
			else if (NPC.downedMechBossAny)
			{
				num4 *= 100;
			}
			else if (Main.hardMode)
			{
				num4 *= 60;
			}
			else if (NPC.downedBoss3 || NPC.downedQueenBee)
			{
				num4 *= 25;
			}
			else if (NPC.downedBoss2)
			{
				num4 *= 10;
			}
			else if (NPC.downedBoss1)
			{
				num4 *= 3;
			}
			if (Main.expertMode)
			{
				num4 *= 2;
			}
			num4 = (int)((double)num4 * Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
			string text2 = null;
			string text3 = null;
			if (Main.player[Main.myPlayer].sign > -1)
			{
				focusText = ((!Main.editSign) ? Lang.inter[48].Value : Lang.inter[47].Value);
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Lang.inter[49].Value;
				if (Main.CanDryadPlayStardewAnimation(Main.LocalPlayer, Main.npc[Main.player[Main.myPlayer].talkNPC]))
				{
					focusText2 = Language.GetTextValue("StardewTalk.GiveColaButtonText");
				}
			}
			else if (NPCID.Sets.IsTownPet[Main.npc[Main.player[Main.myPlayer].talkNPC].type])
			{
				focusText = Language.GetTextValue("UI.PetTheAnimal");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
			{
				focusText = Lang.inter[28].Value;
				if (Main.hardMode)
				{
					focusText2 = Lang.inter[107].Value;
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Language.GetTextValue("UI.BartenderHelp");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 588)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 633)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 663)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Language.GetTextValue("GameUI.HairStyle");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 369)
			{
				focusText = Lang.inter[64].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
			{
				focusText = Lang.inter[28].Value;
				if (Main.TOWMusicUnlocked)
				{
					focusText2 = Language.GetTextValue("GameUI.Music");
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Language.GetTextValue("GameUI.PainterDecor");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
			{
				focusText = Lang.inter[28].Value;
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
				{
					focusText2 = Lang.inter[19].Value;
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
			{
				if (!Main.IsItDay())
				{
					focusText = Lang.inter[50].Value;
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
			{
				focusText = Lang.inter[51].Value;
				focusText2 = Lang.inter[25].Value;
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
			{
				if (Main.player[Main.myPlayer].taxMoney <= 0)
				{
					focusText = Lang.inter[89].Value;
				}
				else
				{
					string text4 = "";
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int num9 = 0;
					int taxMoney = Main.player[Main.myPlayer].taxMoney;
					taxMoney = (int)((double)taxMoney / Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
					if (taxMoney < 0)
					{
						taxMoney = 0;
					}
					num4 = taxMoney;
					if (taxMoney >= 1000000)
					{
						num6 = taxMoney / 1000000;
						taxMoney -= num6 * 1000000;
					}
					if (taxMoney >= 10000)
					{
						num7 = taxMoney / 10000;
						taxMoney -= num7 * 10000;
					}
					if (taxMoney >= 100)
					{
						num8 = taxMoney / 100;
						taxMoney -= num8 * 100;
					}
					if (taxMoney >= 1)
					{
						num9 = taxMoney;
					}
					if (num6 > 0)
					{
						text4 = string.Concat(new string[]
						{
							text4,
							num6.ToString(),
							" ",
							Lang.inter[15].Value,
							" "
						});
					}
					if (num7 > 0)
					{
						text4 = string.Concat(new string[]
						{
							text4,
							num7.ToString(),
							" ",
							Lang.inter[16].Value,
							" "
						});
					}
					if (num8 > 0)
					{
						text4 = string.Concat(new string[]
						{
							text4,
							num8.ToString(),
							" ",
							Lang.inter[17].Value,
							" "
						});
					}
					if (num9 > 0)
					{
						text4 = string.Concat(new string[]
						{
							text4,
							num9.ToString(),
							" ",
							Lang.inter[18].Value,
							" "
						});
					}
					float num10 = (float)Main.mouseTextColor / 255f;
					if (num6 > 0)
					{
						color2..ctor((int)((byte)(220f * num10)), (int)((byte)(220f * num10)), (int)((byte)(198f * num10)), (int)Main.mouseTextColor);
					}
					else if (num7 > 0)
					{
						color2..ctor((int)((byte)(224f * num10)), (int)((byte)(201f * num10)), (int)((byte)(92f * num10)), (int)Main.mouseTextColor);
					}
					else if (num8 > 0)
					{
						color2..ctor((int)((byte)(181f * num10)), (int)((byte)(192f * num10)), (int)((byte)(193f * num10)), (int)Main.mouseTextColor);
					}
					else if (num9 > 0)
					{
						color2..ctor((int)((byte)(246f * num10)), (int)((byte)(138f * num10)), (int)((byte)(96f * num10)), (int)Main.mouseTextColor);
					}
					if (text4 == "")
					{
						focusText = Lang.inter[89].Value;
					}
					else
					{
						text4 = text4.Substring(0, text4.Length - 1);
						focusText = Lang.inter[89].Value + " (" + text4 + ")";
					}
					focusText = Lang.inter[89].Value;
					text3 = focusText;
					text2 = "";
					for (int k = 0; k < focusText.Length; k++)
					{
						text2 += " ";
					}
					focusText = focusText + text2 + "        ";
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
			{
				string text5 = "";
				int num11 = 0;
				int num12 = 0;
				int num13 = 0;
				int num14 = 0;
				int num15 = num4;
				if (num15 > 0 && num15 < 1)
				{
					num15 = 1;
				}
				reason = Language.GetTextValue("tModLoader.DefaultNurseCantHealChat");
				canHeal = PlayerLoader.ModifyNurseHeal(Main.player[Main.myPlayer], Main.LocalPlayer.TalkNPC, ref health, ref removeDebuffs, ref reason);
				PlayerLoader.ModifyNursePrice(Main.player[Main.myPlayer], Main.LocalPlayer.TalkNPC, health, removeDebuffs, ref num15);
				if (num15 < 0)
				{
					num15 = 0;
				}
				num4 = num15;
				if (num15 >= 1000000)
				{
					num11 = num15 / 1000000;
					num15 -= num11 * 1000000;
				}
				if (num15 >= 10000)
				{
					num12 = num15 / 10000;
					num15 -= num12 * 10000;
				}
				if (num15 >= 100)
				{
					num13 = num15 / 100;
					num15 -= num13 * 100;
				}
				if (num15 >= 1)
				{
					num14 = num15;
				}
				if (num11 > 0)
				{
					text5 = string.Concat(new string[]
					{
						text5,
						num11.ToString(),
						" ",
						Lang.inter[15].Value,
						" "
					});
				}
				if (num12 > 0)
				{
					text5 = string.Concat(new string[]
					{
						text5,
						num12.ToString(),
						" ",
						Lang.inter[16].Value,
						" "
					});
				}
				if (num13 > 0)
				{
					text5 = string.Concat(new string[]
					{
						text5,
						num13.ToString(),
						" ",
						Lang.inter[17].Value,
						" "
					});
				}
				if (num14 > 0)
				{
					text5 = string.Concat(new string[]
					{
						text5,
						num14.ToString(),
						" ",
						Lang.inter[18].Value,
						" "
					});
				}
				float num16 = (float)Main.mouseTextColor / 255f;
				if (num11 > 0)
				{
					color2..ctor((int)((byte)(220f * num16)), (int)((byte)(220f * num16)), (int)((byte)(198f * num16)), (int)Main.mouseTextColor);
				}
				else if (num12 > 0)
				{
					color2..ctor((int)((byte)(224f * num16)), (int)((byte)(201f * num16)), (int)((byte)(92f * num16)), (int)Main.mouseTextColor);
				}
				else if (num13 > 0)
				{
					color2..ctor((int)((byte)(181f * num16)), (int)((byte)(192f * num16)), (int)((byte)(193f * num16)), (int)Main.mouseTextColor);
				}
				else if (num14 > 0)
				{
					color2..ctor((int)((byte)(246f * num16)), (int)((byte)(138f * num16)), (int)((byte)(96f * num16)), (int)Main.mouseTextColor);
				}
				if (text5 == "")
				{
					focusText = Lang.inter[54].Value;
				}
				else
				{
					text5 = text5.Substring(0, text5.Length - 1);
					focusText = Lang.inter[54].Value + " (" + text5 + ")";
				}
			}
			NPCLoader.SetChatButtons(ref focusText, ref focusText2);
			if (!flag)
			{
				Main.DrawNPCChatButtons(num, color2, amountOfLines, focusText, focusText2);
				if (text2 != null)
				{
					float num17 = (float)(130 + amountOfLines * 30);
					float num18 = (float)(180 + (Main.screenWidth - 800) / 2);
					num18 += ChatManager.GetStringSize(FontAssets.MouseText.Value, text3, new Vector2(0.9f), -1f).X - 20f;
					int taxMoney2 = Main.player[Main.myPlayer].taxMoney;
					taxMoney2 = (int)((double)taxMoney2 / Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
					ItemSlot.DrawMoney(Main.spriteBatch, "", num18, num17 - 40f, Utils.CoinsSplit((long)taxMoney2), true);
				}
			}
			if (PlayerInput.IgnoreMouseInterface)
			{
				return;
			}
			if (rectangle.Contains(new Point(Main.mouseX, Main.mouseY)))
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			if (!Main.mouseLeft || !Main.mouseLeftRelease || !rectangle.Contains(new Point(Main.mouseX, Main.mouseY)))
			{
				return;
			}
			Main.mouseLeftRelease = false;
			Main.player[Main.myPlayer].releaseUseItem = false;
			Main.player[Main.myPlayer].mouseInterface = true;
			if (Main.npcChatFocus1)
			{
				Main.CloseNPCChatOrSign();
				return;
			}
			if (Main.npcChatFocus2)
			{
				if (Main.player[Main.myPlayer].sign != -1)
				{
					if (Main.editSign)
					{
						Main.SubmitSignText();
						return;
					}
					IngameFancyUI.OpenVirtualKeyboard(1);
					return;
				}
				else
				{
					if (NPCID.Sets.IsTownPet[Main.npc[Main.player[Main.myPlayer].talkNPC].type])
					{
						Main.player[Main.myPlayer].PetAnimal(Main.player[Main.myPlayer].talkNPC);
						return;
					}
					if (!NPCLoader.PreChatButtonClicked(true))
					{
						return;
					}
					NPCLoader.OnChatButtonClicked(true);
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 369)
					{
						Main.npcChatCornerItem = 0;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						bool flag3 = false;
						if (!Main.anglerQuestFinished && !Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
						{
							int num19 = Main.player[Main.myPlayer].FindItem(Main.anglerQuestItemNetIDs[Main.anglerQuest]);
							if (num19 != -1)
							{
								Main.player[Main.myPlayer].inventory[num19].stack--;
								if (Main.player[Main.myPlayer].inventory[num19].stack <= 0)
								{
									Main.player[Main.myPlayer].inventory[num19] = new Item();
								}
								flag3 = true;
								SoundEngine.PlaySound(24, -1, -1, 1, 1f, 0f);
								Main.player[Main.myPlayer].anglerQuestsFinished++;
								Main.player[Main.myPlayer].GetAnglerReward(Main.npc[Main.player[Main.myPlayer].talkNPC], Main.anglerQuestItemNetIDs[Main.anglerQuest]);
							}
						}
						Main.npcChatText = Lang.AnglerQuestChat(flag3);
						if (flag3)
						{
							Main.anglerQuestFinished = true;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(75, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
							}
							else
							{
								Main.anglerWhoFinishedToday.Add(Main.player[Main.myPlayer].name);
							}
							AchievementsHelper.HandleAnglerService();
							return;
						}
					}
					else
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17)
						{
							this.OpenShop(1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19)
						{
							this.OpenShop(2);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124)
						{
							this.OpenShop(8);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142)
						{
							this.OpenShop(9);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
						{
							if (Main.netMode == 0)
							{
								NPC.SpawnSkeletron(Main.myPlayer);
							}
							else
							{
								NetMessage.SendData(51, -1, -1, null, Main.myPlayer, 1f, 0f, 0f, 0, 0, 0);
							}
							Main.npcChatText = "";
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
						{
							this.OpenShop(3);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38)
						{
							this.OpenShop(4);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54)
						{
							this.OpenShop(5);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
						{
							this.OpenShop(6);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108)
						{
							this.OpenShop(7);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160)
						{
							this.OpenShop(10);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178)
						{
							this.OpenShop(11);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
						{
							this.OpenShop(12);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
						{
							this.OpenShop(13);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209)
						{
							this.OpenShop(14);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
						{
							this.OpenShop(15);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228)
						{
							this.OpenShop(16);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
						{
							this.OpenShop(17);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
						{
							this.OpenShop(18);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
						{
							this.OpenShop(19);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
						{
							this.OpenShop(20);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
						{
							this.OpenShop(21);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 588)
						{
							this.OpenShop(22);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 633)
						{
							this.OpenShop(23);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 663)
						{
							this.OpenShop(24);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.HelpText();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
						{
							if (Main.player[Main.myPlayer].taxMoney > 0)
							{
								int taxMoney3 = Main.player[Main.myPlayer].taxMoney;
								taxMoney3 = (int)((double)taxMoney3 / Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
								while (taxMoney3 > 0)
								{
									EntitySource_Gift source = new EntitySource_Gift(Main.npc[Main.player[Main.myPlayer].talkNPC], null);
									if (taxMoney3 > 1000000)
									{
										int num20 = taxMoney3 / 1000000;
										taxMoney3 -= 1000000 * num20;
										int number = Item.NewItem(source, (int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 74, num20, false, 0, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
										}
									}
									else if (taxMoney3 > 10000)
									{
										int num21 = taxMoney3 / 10000;
										taxMoney3 -= 10000 * num21;
										int number2 = Item.NewItem(source, (int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 73, num21, false, 0, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
										}
									}
									else if (taxMoney3 > 100)
									{
										int num22 = taxMoney3 / 100;
										taxMoney3 -= 100 * num22;
										int number3 = Item.NewItem(source, (int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 72, num22, false, 0, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
										}
									}
									else
									{
										int num23 = taxMoney3;
										if (num23 < 1)
										{
											num23 = 1;
										}
										taxMoney3 -= num23;
										int number4 = Item.NewItem(source, (int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 71, num23, false, 0, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
										}
									}
								}
								Main.npcChatText = Lang.dialog(Main.rand.Next(380, 382), false);
								Main.player[Main.myPlayer].taxMoney = 0;
								return;
							}
							Main.npcChatText = Lang.dialog(Main.rand.Next(390, 401), false);
							return;
						}
						else
						{
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type != 18)
							{
								return;
							}
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (num4 > 0)
							{
								if (!canHeal)
								{
									Main.npcChatText = reason;
									return;
								}
								if (Main.player[Main.myPlayer].BuyItem((long)num4, -1))
								{
									AchievementsHelper.HandleNurseService(num4);
									SoundEngine.PlaySound(SoundID.Item4, null, null);
									Main.player[Main.myPlayer].HealEffect(health, true);
									if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.25)
									{
										Main.npcChatText = Lang.dialog(227, false);
									}
									else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.5)
									{
										Main.npcChatText = Lang.dialog(228, false);
									}
									else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.75)
									{
										Main.npcChatText = Lang.dialog(229, false);
									}
									else
									{
										Main.npcChatText = Lang.dialog(230, false);
									}
									Main.player[Main.myPlayer].statLife += health;
									if (removeDebuffs)
									{
										for (int l = 0; l < Player.maxBuffs; l++)
										{
											int num24 = Main.player[Main.myPlayer].buffType[l];
											if (Main.debuff[num24] && Main.player[Main.myPlayer].buffTime[l] > 0 && (num24 < 0 || !BuffID.Sets.NurseCannotRemoveDebuff[num24]))
											{
												Main.player[Main.myPlayer].DelBuff(l);
												l = -1;
											}
										}
									}
									PlayerLoader.PostNurseHeal(Main.LocalPlayer, Main.LocalPlayer.TalkNPC, health, removeDebuffs, num4);
									return;
								}
								int num27 = Main.rand.Next(3);
								if (num27 == 0)
								{
									Main.npcChatText = Lang.dialog(52, false);
								}
								if (num27 == 1)
								{
									Main.npcChatText = Lang.dialog(53, false);
								}
								if (num27 == 2)
								{
									Main.npcChatText = Lang.dialog(54, false);
									return;
								}
							}
							else
							{
								int num25 = Main.rand.Next(3);
								if (!ChildSafety.Disabled)
								{
									num25 = Main.rand.Next(1, 3);
								}
								switch (num25)
								{
								case 0:
									Main.npcChatText = Lang.dialog(55, false);
									return;
								case 1:
									Main.npcChatText = Lang.dialog(56, false);
									return;
								case 2:
									Main.npcChatText = Lang.dialog(57, false);
									return;
								default:
									return;
								}
							}
						}
					}
				}
			}
			else
			{
				if (Main.npcChatFocus4)
				{
					Main.npcChatCornerItem = 0;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.npcChatText = Main.player[Main.myPlayer].currentShoppingSettings.HappinessReport;
					return;
				}
				if (!Main.npcChatFocus3 || Main.player[Main.myPlayer].talkNPC < 0)
				{
					return;
				}
				if (!NPCLoader.PreChatButtonClicked(false))
				{
					return;
				}
				NPCLoader.OnChatButtonClicked(false);
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					bool worldIsEntirelyPure;
					Main.npcChatText = Lang.GetDryadWorldStatusDialog(out worldIsEntirelyPure);
					if (Main.CanDryadPlayStardewAnimation(Main.LocalPlayer, Main.npc[Main.player[Main.myPlayer].talkNPC]))
					{
						NPC.PreventJojaColaDialog = true;
						NPC.RerollDryadText = 2;
						Main.LocalPlayer.ConsumeItem(5275, true, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(144, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
						}
						else
						{
							NPC.HaveDryadDoStardewAnimation();
						}
						Main.npcChatText = Language.GetTextValue("StardewTalk.PlayerGivesCola");
					}
					else if (worldIsEntirelyPure)
					{
						AchievementsHelper.HandleSpecialEvent(Main.player[Main.myPlayer], 27);
					}
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.npcChatText = Language.GetTextValue("PartyGirlSpecialText.Music" + Main.rand.Next(1, 4).ToString());
					Main.swapMusic = !Main.swapMusic;
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
				{
					Main.playerInventory = true;
					Main.npcChatText = "";
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.InGuideCraftMenu = true;
					UILinkPointNavigator.GoToDefaultPage(0);
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
				{
					Main.playerInventory = true;
					Main.npcChatText = "";
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.InReforgeMenu = true;
					UILinkPointNavigator.GoToDefaultPage(0);
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
				{
					Main.OpenHairWindow();
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
				{
					Main.npcChatCornerItem = 0;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					bool gotDye = false;
					int num26 = Main.player[Main.myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
					if (num26 != -1)
					{
						Main.player[Main.myPlayer].inventory[num26].stack--;
						if (Main.player[Main.myPlayer].inventory[num26].stack <= 0)
						{
							Main.player[Main.myPlayer].inventory[num26] = new Item();
						}
						gotDye = true;
						SoundEngine.PlaySound(24, -1, -1, 1, 1f, 0f);
						Main.player[Main.myPlayer].GetDyeTraderReward(Main.npc[Main.player[Main.myPlayer].talkNPC]);
					}
					Main.npcChatText = Lang.DyeTraderQuestChat(gotDye);
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.HelpText();
					Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
					return;
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
				{
					this.OpenShop(25);
				}
			}
		}

		// Token: 0x060004E2 RID: 1250 RVA: 0x000FB84C File Offset: 0x000F9A4C
		public static bool CanDryadPlayStardewAnimation(Player player, NPC npc)
		{
			Item heldItem = player.HeldItem;
			return !heldItem.IsAir && heldItem.type == 5275 && npc.ai[0] != 24f;
		}

		// Token: 0x060004E3 RID: 1251 RVA: 0x000FB88C File Offset: 0x000F9A8C
		private void OpenShop(int shopIndex)
		{
			Main.playerInventory = true;
			Main.stackSplit = 9999;
			Main.npcChatText = "";
			Main.SetNPCShopIndex(1);
			this.shop[Main.npcShop].SetupShop(shopIndex);
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
		}

		// Token: 0x060004E4 RID: 1252 RVA: 0x000FB8E0 File Offset: 0x000F9AE0
		public static void SetNPCShopIndex(int index)
		{
			Main.npcShop = index;
		}

		// Token: 0x060004E5 RID: 1253 RVA: 0x000FB8E8 File Offset: 0x000F9AE8
		private static void DrawNPCChatButtons(int superColor, Color chatColor, int numLines, string focusText, string focusText3)
		{
			float y = (float)(130 + numLines * 30);
			int num = 180 + (Main.screenWidth - 800) / 2;
			Vector2 vec;
			vec..ctor((float)Main.mouseX, (float)Main.mouseY);
			Player player = Main.player[Main.myPlayer];
			Vector2 vector7 = new Vector2((float)num, y);
			DynamicSpriteFont value = FontAssets.MouseText.Value;
			Vector2 vector2 = vector7;
			Vector2 vector3;
			vector3..ctor(0.9f);
			Vector2 stringSize = ChatManager.GetStringSize(value, focusText, vector3, -1f);
			Color baseColor = chatColor;
			Color black = Color.Black;
			Vector2 vector4;
			vector4..ctor(1f);
			Color brown = Color.Brown;
			float num2 = 1.2f;
			if (stringSize.X > 260f)
			{
				vector4.X *= 260f / stringSize.X;
			}
			if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = true;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = false;
			}
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, value, focusText, vector2 + stringSize * vector4 * 0.5f, baseColor, (!Main.npcChatFocus2) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4, -1f, 2f);
			if (focusText.Length > 0)
			{
				UILinkPointNavigator.SetPosition(2500, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsLeft = true;
			}
			Vector2 vector5;
			vector5..ctor((float)num + stringSize.X * vector4.X + 30f, y);
			string text = Lang.inter[52].Value;
			value = FontAssets.MouseText.Value;
			vector2 = vector5;
			vector3..ctor(0.9f);
			stringSize = ChatManager.GetStringSize(value, text, vector3, -1f);
			baseColor..ctor(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
			vector4..ctor(1f);
			if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = true;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = false;
			}
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!Main.npcChatFocus1) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4, -1f, 2f);
			if (text.Length > 0)
			{
				UILinkPointNavigator.SetPosition(2501, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsMiddle = true;
			}
			if (string.IsNullOrWhiteSpace(focusText3))
			{
				Main.npcChatFocus3 = false;
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = false;
			}
			else
			{
				Vector2 vector6;
				vector6..ctor(vector5.X + stringSize.X * vector4.X + 30f, y);
				value = FontAssets.MouseText.Value;
				vector2 = vector6;
				vector3..ctor(0.9f);
				stringSize = ChatManager.GetStringSize(value, focusText3, vector3, -1f);
				baseColor = chatColor;
				vector4..ctor(1f);
				vector5.X = vector6.X;
				if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
				{
					player.mouseInterface = true;
					player.releaseUseItem = false;
					vector3 *= num2;
					if (!Main.npcChatFocus3)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus3 = true;
				}
				else
				{
					if (Main.npcChatFocus3)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus3 = false;
				}
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, value, focusText3, vector2 + stringSize * vector4 * 0.5f, baseColor, (!Main.npcChatFocus3) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4, -1f, 2f);
				UILinkPointNavigator.SetPosition(2502, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = true;
			}
			if (Main.remixWorld)
			{
				return;
			}
			if (Main.player[Main.myPlayer].currentShoppingSettings.HappinessReport == "")
			{
				Main.npcChatFocus4 = false;
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = false;
				return;
			}
			string textValue = Language.GetTextValue("UI.NPCCheckHappiness");
			Vector2 vector8 = new Vector2(vector5.X + stringSize.X * vector4.X + 30f, y);
			text = textValue;
			value = FontAssets.MouseText.Value;
			vector2 = vector8;
			vector3..ctor(0.9f);
			stringSize = ChatManager.GetStringSize(value, text, vector3, -1f);
			baseColor..ctor(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
			vector4..ctor(1f);
			if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!Main.npcChatFocus4)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus4 = true;
			}
			else
			{
				if (Main.npcChatFocus4)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus4 = false;
			}
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!Main.npcChatFocus4) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4, -1f, 2f);
			UILinkPointNavigator.SetPosition(2503, vector2 + stringSize * 0.5f);
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = true;
		}

		// Token: 0x060004E6 RID: 1254 RVA: 0x000FBFCC File Offset: 0x000FA1CC
		public static void CloseNPCChatOrSign()
		{
			Main.player[Main.myPlayer].sign = -1;
			Main.editSign = false;
			Main.player[Main.myPlayer].SetTalkNPC(-1, false);
			Main.npcChatCornerItem = 0;
			Main.npcChatText = "";
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			Main.player[Main.myPlayer].releaseMount = false;
		}

		// Token: 0x060004E7 RID: 1255 RVA: 0x000FC038 File Offset: 0x000FA238
		public static void SubmitSignText()
		{
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			int num = Main.player[Main.myPlayer].sign;
			Sign.TextSign(num, Main.npcChatText);
			Main.editSign = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(47, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060004E8 RID: 1256 RVA: 0x000FC0A1 File Offset: 0x000FA2A1
		private int NPCBannerSorter(int npcIndex1, int npcIndex2)
		{
			return -Main.npc[npcIndex1].housingCategory.CompareTo(Main.npc[npcIndex2].housingCategory);
		}

		// Token: 0x060004E9 RID: 1257 RVA: 0x000FC0C4 File Offset: 0x000FA2C4
		protected unsafe void DrawNPCHousesInWorld()
		{
			this._npcsWithBannersToDraw.Clear();
			this._occupantsListToDrawNPCHouses.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && !Main.npc[i].homeless && Main.npc[i].homeTileX > 0 && Main.npc[i].homeTileY > 0 && Main.npc[i].type != 37)
				{
					this._npcsWithBannersToDraw.Add(i);
				}
			}
			this._npcsWithBannersToDraw.Sort(new Comparison<int>(this.NPCBannerSorter));
			for (int j = 0; j < this._npcsWithBannersToDraw.Count; j++)
			{
				int num = this._npcsWithBannersToDraw[j];
				NPC nPC = Main.npc[num];
				if (nPC.active && nPC.townNPC && !nPC.homeless && nPC.homeTileX > 0 && nPC.homeTileY > 0 && nPC.type != 37)
				{
					int num2 = 0;
					int housingCategory = nPC.housingCategory;
					int homeTileX = nPC.homeTileX;
					int num3 = nPC.homeTileY - 1;
					WorldGen.TownManager.AddOccupantsToList(homeTileX, num3 + 1, this._occupantsListToDrawNPCHouses);
					if (this._occupantsListToDrawNPCHouses.Contains(nPC.type))
					{
						num2 = 1;
					}
					int num4 = 0;
					for (int num5 = this._npcsWithBannersToDraw.Count - 1; num5 > j; num5--)
					{
						int num6 = this._npcsWithBannersToDraw[num5];
						if (Main.npc[num6].homeTileX == homeTileX && Main.npc[num6].homeTileY == num3 + 1)
						{
							num4++;
						}
					}
					int num7 = num4 * 26;
					if (!(Main.tile[homeTileX, num3] == null))
					{
						bool flag = false;
						while (!Main.tile[homeTileX, num3].active() || !Main.tileSolid[(int)(*Main.tile[homeTileX, num3].type)])
						{
							num3--;
							if (num3 < 10)
							{
								break;
							}
							if (Main.tile[homeTileX, num3] == null)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							int num8 = 8;
							int num9 = 18;
							if (*Main.tile[homeTileX, num3].type == 19)
							{
								num9 -= 8;
							}
							num3++;
							int num10 = 0;
							float num11 = (float)(num3 * 16);
							num11 += (float)num7;
							SpriteEffects effects = 0;
							Texture2D value = TextureAssets.HouseBanner.Value;
							Rectangle value2 = value.Frame(2, 2, 0, 0, 0, 0);
							if (num2 > 0)
							{
								value2.X += value2.Width * num2;
							}
							if (housingCategory > 0)
							{
								value2.Y += value2.Height * housingCategory;
							}
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								num11 -= Main.screenPosition.Y;
								num11 = Main.screenPosition.Y + (float)Main.screenHeight - num11;
								num11 -= (float)value2.Height;
								effects = 2;
								num10 = 4;
							}
							Main.spriteBatch.Draw(value, new Vector2((float)(homeTileX * 16 - (int)Main.screenPosition.X + num8), num11 - (float)((int)Main.screenPosition.Y) + (float)num9 + (float)num10), new Rectangle?(value2), Lighting.GetColor(homeTileX, num3), 0f, new Vector2((float)(value2.Width / 2), (float)(value2.Height / 2)), 1f, effects, 0f);
							int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(nPC);
							float scale = 1f;
							float num12 = (TextureAssets.NpcHead[headIndexSafe].Width() <= TextureAssets.NpcHead[headIndexSafe].Height()) ? ((float)TextureAssets.NpcHead[headIndexSafe].Height()) : ((float)TextureAssets.NpcHead[headIndexSafe].Width());
							if (num12 > 24f)
							{
								scale = 24f / num12;
							}
							Main.spriteBatch.Draw(TextureAssets.NpcHead[headIndexSafe].Value, new Vector2((float)(homeTileX * 16 - (int)Main.screenPosition.X + num8), num11 - (float)((int)Main.screenPosition.Y) + (float)num9 + 2f), new Rectangle?(new Rectangle(0, 0, TextureAssets.NpcHead[headIndexSafe].Width(), TextureAssets.NpcHead[headIndexSafe].Height())), Lighting.GetColor(homeTileX, num3), 0f, new Vector2((float)(TextureAssets.NpcHead[headIndexSafe].Width() / 2), (float)(TextureAssets.NpcHead[headIndexSafe].Height() / 2)), scale, effects, 0f);
							homeTileX = homeTileX * 16 - (int)Main.screenPosition.X + num8 - value2.Width / 2;
							num3 = (int)num11 - (int)Main.screenPosition.Y + 4;
							int num13 = -8;
							if (Main.mouseX >= homeTileX && Main.mouseX <= homeTileX + value2.Width && Main.mouseY >= num3 && Main.mouseY <= num3 + value2.Height + num13)
							{
								string nPCHouseBannerText = Lang.GetNPCHouseBannerText(nPC, num2);
								this.MouseText(nPCHouseBannerText, 0, 0, -1, -1, -1, -1, 0);
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									Main.mouseRightRelease = false;
									WorldGen.kickOut(num);
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060004EA RID: 1258 RVA: 0x000FC638 File Offset: 0x000FA838
		public void DrawWindowsIMEPanel(Vector2 position, float xAnchor = 0f)
		{
			if (!Platform.Get<IImeService>().IsCandidateListVisible)
			{
				return;
			}
			List<string> list = new List<string>();
			for (uint num = 0U; num < Platform.Get<IImeService>().CandidateCount; num += 1U)
			{
				string candidate = Platform.Get<IImeService>().GetCandidate(num);
				list.Add(candidate);
			}
			if (list.Count == 0)
			{
				return;
			}
			uint selectedCandidate = Platform.Get<IImeService>().SelectedCandidate;
			DynamicSpriteFont value = FontAssets.MouseText.Value;
			float num2 = 0.85f;
			float num3 = 14f;
			float num4 = 0f;
			int num5 = 32;
			num4 += num3;
			string text = "{0,2}: {1}";
			string text2 = "  ";
			for (int i = 0; i < list.Count; i++)
			{
				int num6 = i + 1;
				string text3 = text;
				if (i < list.Count - 1)
				{
					text3 += text2;
				}
				num4 += value.MeasureString(string.Format(text3, num6, list[i])).X * num2;
				num4 += num3;
			}
			Vector2 vector;
			vector..ctor(num4 * (0f - xAnchor), 0f);
			Utils.DrawSettings2Panel(Main.spriteBatch, position + vector + new Vector2(0f, (float)(-(float)num5)), num4, new Color(63, 65, 151, 255) * 0.785f);
			Vector2 pos = position + new Vector2(10f, (float)(-(float)num5 / 2)) + vector;
			uint num7 = 0U;
			while ((ulong)num7 < (ulong)((long)list.Count))
			{
				Color color = Color.Gray;
				if (num7 == selectedCandidate)
				{
					color = Color.White;
				}
				uint num8 = num7 + 1U;
				string text4 = text;
				if ((ulong)num7 < (ulong)((long)(list.Count - 1)))
				{
					text4 += text2;
				}
				string text5 = string.Format(text4, num8, list[(int)num7]);
				Vector2 vector2 = value.MeasureString(text5) * num2;
				Utils.DrawBorderString(Main.spriteBatch, text5, pos, color, num2, 0f, 0.4f, -1);
				pos.X += vector2.X + num3;
				num7 += 1U;
			}
		}

		// Token: 0x060004EB RID: 1259 RVA: 0x000FC85E File Offset: 0x000FAA5E
		public void HandleIME()
		{
			if (this._imeToggle != PlayerInput.WritingText)
			{
				this._imeToggle = PlayerInput.WritingText;
				if (this._imeToggle)
				{
					Platform.Get<IImeService>().Enable();
					return;
				}
				Platform.Get<IImeService>().Disable();
			}
		}

		// Token: 0x060004EC RID: 1260 RVA: 0x000FC898 File Offset: 0x000FAA98
		protected void DrawPlayerChat()
		{
			TextSnippet[] array = null;
			if (Main.drawingPlayerChat)
			{
				PlayerInput.WritingText = true;
			}
			this.HandleIME();
			if (Main.drawingPlayerChat)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				string text = Main.chatText;
				if (Main.screenWidth > 800)
				{
					int num = Main.screenWidth - 300;
					int num2 = 78;
					Main.spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(0, 0, TextureAssets.TextBack.Width() - 100, TextureAssets.TextBack.Height())), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, 0, 0f);
					num -= 400;
					num2 += 400;
					while (num > 0)
					{
						if (num > 300)
						{
							Main.spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(100, 0, TextureAssets.TextBack.Width() - 200, TextureAssets.TextBack.Height())), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, 0, 0f);
							num -= 300;
							num2 += 300;
						}
						else
						{
							Main.spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(TextureAssets.TextBack.Width() - num, 0, TextureAssets.TextBack.Width() - (TextureAssets.TextBack.Width() - num), TextureAssets.TextBack.Height())), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, 0, 0f);
							num = 0;
						}
					}
				}
				else
				{
					Main.spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(78f, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(0, 0, TextureAssets.TextBack.Width(), TextureAssets.TextBack.Height())), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, 0, 0f);
				}
				int hoveredSnippet = -1;
				List<TextSnippet> list = ChatManager.ParseMessage(text, Color.White);
				string compositionString = Platform.Get<IImeService>().CompositionString;
				if (compositionString != null && compositionString.Length > 0)
				{
					list.Add(new TextSnippet(compositionString, new Color(255, 240, 20), 1f));
				}
				if (this.textBlinkerState == 1)
				{
					list.Add(new TextSnippet("|", Color.White, 1f));
				}
				array = list.ToArray();
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, array, new Vector2(88f, (float)(Main.screenHeight - 30)), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f, 2f);
				if (hoveredSnippet > -1)
				{
					array[hoveredSnippet].OnHover();
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						array[hoveredSnippet].OnClick();
					}
				}
			}
			Main.chatMonitor.DrawChat(Main.drawingPlayerChat);
			if (Main.drawingPlayerChat && array != null)
			{
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array, Vector2.Zero, -1f);
				this.DrawWindowsIMEPanel(new Vector2(88f, (float)(Main.screenHeight - 30)) + new Vector2(stringSize.X + 10f, -6f), 0f);
			}
			TimeLogger.DetailedDrawTime(10);
		}

		// Token: 0x060004ED RID: 1261 RVA: 0x000FCC94 File Offset: 0x000FAE94
		protected unsafe void DrawInventory()
		{
			Recipe.GetThroughDelayedFindRecipes();
			if (Main.ShouldPVPDraw)
			{
				Main.DrawPVPIcons();
			}
			int num = 0;
			int num2 = 0;
			int num3 = Main.screenWidth;
			int num4 = 0;
			int num5 = Main.screenWidth;
			int num6 = 0;
			Vector2 vector;
			vector..ctor((float)num, (float)num2);
			new Vector2((float)num3, (float)num4);
			new Vector2((float)num5, (float)num6);
			Main.DrawBestiaryIcon(num, num2);
			Main.DrawEmoteBubblesButton(num, num2);
			Main.DrawTrashItemSlot(num, num2);
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[4].Value, new Vector2(40f, 0f) + vector, new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, 0, 0f);
			Main.inventoryScale = 0.85f;
			if (Main.mouseX > 20 && Main.mouseX < (int)(20f + 560f * Main.inventoryScale) && Main.mouseY > 20 && Main.mouseY < (int)(20f + 280f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 5; j++)
				{
					int num7 = (int)(20f + (float)(i * 56) * Main.inventoryScale) + num;
					int num8 = (int)(20f + (float)(j * 56) * Main.inventoryScale) + num2;
					int num9 = i + j * 10;
					new Color(100, 100, 100, 100);
					if (Main.mouseX >= num7 && (float)Main.mouseX <= (float)num7 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num8 && (float)Main.mouseY <= (float)num8 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 0, num9);
						if (Main.player[Main.myPlayer].inventoryChestStack[num9] && (Main.player[Main.myPlayer].inventory[num9].type == 0 || Main.player[Main.myPlayer].inventory[num9].stack == 0))
						{
							Main.player[Main.myPlayer].inventoryChestStack[num9] = false;
						}
						if (!Main.player[Main.myPlayer].inventoryChestStack[num9])
						{
							ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 0, num9);
							ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 0, num9);
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								Recipe.FindRecipes(false);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 0, num9);
					}
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 0, num9, new Vector2((float)num7, (float)num8), default(Color));
				}
			}
			int activeToggles = BuilderToggleLoader.ActiveBuilderToggles();
			bool pushSideToolsUp = activeToggles / 12 != BuilderToggleLoader.BuilderTogglePage || activeToggles % 12 >= 10;
			if (!PlayerInput.UsingGamepad)
			{
				this.DrawHotbarLockIcon(num, num2, pushSideToolsUp);
			}
			ItemSlot.DrawRadialDpad(Main.spriteBatch, new Vector2(20f) + new Vector2(56f * Main.inventoryScale * 10f, 56f * Main.inventoryScale * 5f) + new Vector2(26f, 70f) + vector);
			if (this._achievementAdvisor.CanDrawAboveCoins)
			{
				int num10 = (int)(20f + 560f * Main.inventoryScale) + num;
				int num11 = (int)(20f + 0f * Main.inventoryScale) + num2;
				this._achievementAdvisor.DrawOneAchievement(Main.spriteBatch, new Vector2((float)num10, (float)num11) + new Vector2(5f), true);
			}
			if (Main.mapEnabled)
			{
				bool flag = false;
				int num12 = num3 - 440;
				int num13 = 40 + num4;
				if (Main.screenWidth < 940)
				{
					flag = true;
				}
				if (flag)
				{
					num12 = num5 - 40;
					num13 = num6 - 200;
				}
				int num14 = 0;
				for (int k = 0; k < 4; k++)
				{
					int num15 = num12 + k * 32 - num14;
					int num16 = num13;
					if (flag)
					{
						num15 = num12;
						num16 = num13 + k * 32 - num14;
					}
					int num17 = k;
					int num18 = 120;
					if (k > 0 && Main.mapStyle == k - 1)
					{
						num18 = 200;
					}
					if (Main.mouseX >= num15 && Main.mouseX <= num15 + 32 && Main.mouseY >= num16 && Main.mouseY <= num16 + 30 && !PlayerInput.IgnoreMouseInterface)
					{
						num18 = 255;
						num17 += 4;
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (k == 0)
							{
								Main.playerInventory = false;
								Main.player[Main.myPlayer].SetTalkNPC(-1, false);
								Main.npcChatCornerItem = 0;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.mapFullscreenScale = 2.5f;
								Main.mapFullscreen = true;
								Main.resetMapFull = true;
							}
							if (k == 1)
							{
								Main.mapStyle = 0;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							if (k == 2)
							{
								Main.mapStyle = 1;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							if (k == 3)
							{
								Main.mapStyle = 2;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
						}
					}
					Main.spriteBatch.Draw(TextureAssets.MapIcon[num17].Value, new Vector2((float)num15, (float)num16), new Rectangle?(new Rectangle(0, 0, TextureAssets.MapIcon[num17].Width(), TextureAssets.MapIcon[num17].Height())), new Color(num18, num18, num18, num18), 0f, default(Vector2), 1f, 0, 0f);
				}
			}
			if (Main.armorHide)
			{
				Main.armorAlpha -= 0.1f;
				if (Main.armorAlpha < 0f)
				{
					Main.armorAlpha = 0f;
				}
			}
			else
			{
				Main.armorAlpha += 0.025f;
				if (Main.armorAlpha > 1f)
				{
					Main.armorAlpha = 1f;
				}
			}
			new Color((int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)));
			Main.armorHide = false;
			int num19 = 8 + Main.player[Main.myPlayer].GetAmountOfExtraAccessorySlotsToShow();
			int num20 = 174 + Main.mH;
			int num21 = 950;
			Main._cannotDrawAccessoriesHorizontally = false;
			if (Main.screenHeight < num21 && num19 >= 10)
			{
				num20 -= (int)(56f * Main.inventoryScale * (float)(num19 - 9));
				Main._cannotDrawAccessoriesHorizontally = true;
			}
			int num22 = Main.DrawPageIcons(num20 - 32);
			if (num22 > -1)
			{
				Main.HoverItem = new Item();
				switch (num22)
				{
				case 1:
					Main.hoverItemName = Lang.inter[80].Value;
					break;
				case 2:
					Main.hoverItemName = Lang.inter[79].Value;
					break;
				case 3:
					Main.hoverItemName = (Main.CaptureModeDisabled ? Lang.inter[115].Value : Lang.inter[81].Value);
					break;
				}
			}
			if (Main.EquipPage == 2)
			{
				Point value;
				value..ctor(Main.mouseX, Main.mouseY);
				Rectangle r;
				r..ctor(0, 0, (int)((float)TextureAssets.InventoryBack.Width() * Main.inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * Main.inventoryScale));
				Item[] inv = Main.player[Main.myPlayer].miscEquips;
				int num23 = Main.screenWidth - 92;
				int num24 = Main.mH + 174;
				for (int l = 0; l < 2; l++)
				{
					if (l != 0)
					{
						if (l == 1)
						{
							inv = Main.player[Main.myPlayer].miscDyes;
						}
					}
					else
					{
						inv = Main.player[Main.myPlayer].miscEquips;
					}
					r.X = num23 + l * -47;
					for (int m = 0; m < 5; m++)
					{
						int context = 0;
						int num25 = -1;
						bool flag2 = false;
						switch (m)
						{
						case 0:
							context = 19;
							num25 = 0;
							break;
						case 1:
							context = 20;
							num25 = 1;
							break;
						case 2:
							context = 18;
							flag2 = Main.player[Main.myPlayer].unlockedSuperCart;
							break;
						case 3:
							context = 17;
							break;
						case 4:
							context = 16;
							break;
						}
						if (l == 1)
						{
							context = 33;
							num25 = -1;
							flag2 = false;
						}
						r.Y = num24 + m * 47;
						bool flag3 = false;
						Texture2D value2 = TextureAssets.InventoryTickOn.Value;
						Rectangle r2;
						r2..ctor(r.Left + 34, r.Top - 2, value2.Width, value2.Height);
						int num26 = 0;
						if (num25 != -1)
						{
							if (Main.player[Main.myPlayer].hideMisc[num25])
							{
								value2 = TextureAssets.InventoryTickOff.Value;
							}
							if (r2.Contains(value) && !PlayerInput.IgnoreMouseInterface)
							{
								Main.player[Main.myPlayer].mouseInterface = true;
								flag3 = true;
								if (Main.mouseLeft && Main.mouseLeftRelease)
								{
									if (num25 == 0)
									{
										Main.player[Main.myPlayer].TogglePet();
									}
									if (num25 == 1)
									{
										Main.player[Main.myPlayer].ToggleLight();
									}
									Main.mouseLeftRelease = false;
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(4, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
									}
								}
								num26 = ((!Main.player[Main.myPlayer].hideMisc[num25]) ? 1 : 2);
							}
						}
						if (flag2)
						{
							value2 = TextureAssets.Extra[255].Value;
							if (!Main.player[Main.myPlayer].enabledSuperCart)
							{
								value2 = TextureAssets.Extra[256].Value;
							}
							r2..ctor(r2.X + r2.Width / 2, r2.Y + r2.Height / 2, r2.Width, r2.Height);
							r2.Offset(-r2.Width / 2, -r2.Height / 2);
							if (r2.Contains(value) && !PlayerInput.IgnoreMouseInterface)
							{
								Main.player[Main.myPlayer].mouseInterface = true;
								flag3 = true;
								if (Main.mouseLeft && Main.mouseLeftRelease)
								{
									Main.player[Main.myPlayer].enabledSuperCart = !Main.player[Main.myPlayer].enabledSuperCart;
									Main.mouseLeftRelease = false;
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(4, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
									}
								}
								num26 = ((!Main.player[Main.myPlayer].enabledSuperCart) ? 1 : 2);
							}
						}
						if (r.Contains(value) && !flag3 && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.armorHide = true;
							ItemSlot.Handle(inv, context, m);
						}
						ItemSlot.Draw(Main.spriteBatch, inv, context, m, r.TopLeft(), default(Color));
						if (num25 != -1)
						{
							Main.spriteBatch.Draw(value2, r2.TopLeft(), Color.White * 0.7f);
							if (num26 > 0)
							{
								Main.HoverItem = new Item();
								Main.hoverItemName = Lang.inter[58 + num26].Value;
							}
						}
						if (flag2)
						{
							Main.spriteBatch.Draw(value2, r2.TopLeft(), Color.White);
							if (num26 > 0)
							{
								Main.HoverItem = new Item();
								Main.hoverItemName = Language.GetTextValue((num26 == 1) ? "GameUI.SuperCartDisabled" : "GameUI.SuperCartEnabled");
							}
						}
					}
				}
				num24 += 247;
				num23 += 8;
				int num27 = -1;
				int num28 = 0;
				int num29 = 3;
				int num30 = 260;
				if (Main.screenHeight > 630 + num30 * (Main.mapStyle == 1).ToInt())
				{
					num29++;
				}
				if (Main.screenHeight > 680 + num30 * (Main.mapStyle == 1).ToInt())
				{
					num29++;
				}
				if (Main.screenHeight > 730 + num30 * (Main.mapStyle == 1).ToInt())
				{
					num29++;
				}
				int num31 = 46;
				for (int n = 0; n < Player.maxBuffs; n++)
				{
					if (Main.player[Main.myPlayer].buffType[n] != 0)
					{
						int num32 = num28 / num29;
						int num33 = num28 % num29;
						Point point;
						point..ctor(num23 + num32 * -num31, num24 + num33 * num31);
						num27 = Main.DrawBuffIcon(num27, n, point.X, point.Y);
						UILinkPointNavigator.SetPosition(9000 + num28, new Vector2((float)(point.X + 30), (float)(point.Y + 30)));
						num28++;
						if (Main.buffAlpha[n] < 0.65f)
						{
							Main.buffAlpha[n] = 0.65f;
						}
					}
				}
				UILinkPointNavigator.Shortcuts.BUFFS_DRAWN = num28;
				UILinkPointNavigator.Shortcuts.BUFFS_PER_COLUMN = num29;
				if (num27 >= 0)
				{
					int num34 = Main.player[Main.myPlayer].buffType[num27];
					if (num34 > 0)
					{
						string buffName = Lang.GetBuffName(num34);
						string buffTooltip = Main.GetBuffTooltip(Main.player[Main.myPlayer], num34);
						if (num34 == 147)
						{
							Main.bannerMouseOver = true;
						}
						int rare = 0;
						if (Main.meleeBuff[num34])
						{
							rare = -10;
						}
						BuffLoader.ModifyBuffText(num34, ref buffName, ref buffTooltip, ref rare);
						this.MouseTextHackZoom(buffName, rare, 0, buffTooltip);
					}
				}
			}
			else if (Main.EquipPage == 1)
			{
				this.DrawNPCHousesInUI();
			}
			else if (Main.EquipPage == 0)
			{
				int num35 = 4;
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > num20 && Main.mouseY < (int)((float)num20 + 448f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				float num36 = Main.inventoryScale;
				bool flag4 = false;
				int num37 = num19 - 1;
				bool flag5 = Main.LocalPlayer.CanDemonHeartAccessoryBeShown();
				bool flag6 = Main.LocalPlayer.CanMasterModeAccessoryBeShown();
				if (Main._settingsButtonIsPushedToSide)
				{
					num37--;
				}
				Color color = Main.inventoryBack;
				Color color2;
				color2..ctor(80, 80, 80, 80);
				Main.DrawLoadoutButtons(num20, flag5, flag6);
				int num38 = -1;
				for (int num39 = 0; num39 < 3; num39++)
				{
					if ((num39 != 8 || flag5) && (num39 != 9 || flag6))
					{
						num38++;
						bool flag7 = Main.LocalPlayer.IsItemSlotUnlockedAndUsable(num39);
						if (!flag7)
						{
							flag4 = true;
						}
						int num40 = Main.screenWidth - 64 - 28;
						int num41 = (int)((float)num20 + (float)(num38 * 56) * Main.inventoryScale);
						new Color(100, 100, 100, 100);
						int num42 = Main.screenWidth - 58;
						int num43 = (int)((float)(num20 - 2) + (float)(num38 * 56) * Main.inventoryScale);
						int context2 = 8;
						if (num39 > 2)
						{
							num41 += num35;
							num43 += num35;
							context2 = 10;
						}
						Texture2D value3 = TextureAssets.InventoryTickOn.Value;
						if (Main.player[Main.myPlayer].hideVisibleAccessory[num39])
						{
							value3 = TextureAssets.InventoryTickOff.Value;
						}
						Rectangle rectangle;
						rectangle..ctor(num42, num43, value3.Width, value3.Height);
						int num44 = 0;
						if (num39 > 2 && rectangle.Contains(new Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeft && Main.mouseLeftRelease)
							{
								Main.player[Main.myPlayer].hideVisibleAccessory[num39] = !Main.player[Main.myPlayer].hideVisibleAccessory[num39];
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							num44 = ((!Main.player[Main.myPlayer].hideVisibleAccessory[num39]) ? 1 : 2);
						}
						else if (Main.mouseX >= num40 && (float)Main.mouseX <= (float)num40 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num41 && (float)Main.mouseY <= (float)num41 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.armorHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, context2, num39);
							if (flag7 || Main.mouseItem.IsAir)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, context2, num39);
							}
							ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context2, num39);
						}
						if (flag4)
						{
							Main.inventoryBack = color2;
						}
						ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context2, num39, new Vector2((float)num40, (float)num41), default(Color));
						if (num39 > 2)
						{
							Main.spriteBatch.Draw(value3, new Vector2((float)num42, (float)num43), Color.White * 0.7f);
							if (num44 > 0)
							{
								Main.HoverItem = new Item();
								Main.hoverItemName = Lang.inter[58 + num44].Value;
							}
						}
					}
				}
				Main.inventoryBack = color;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > num20 && Main.mouseY < (int)((float)num20 + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				num38 = -1;
				for (int num45 = 10; num45 < 13; num45++)
				{
					if ((num45 != 18 || flag5) && (num45 != 19 || flag6))
					{
						num38++;
						bool flag13 = Main.LocalPlayer.IsItemSlotUnlockedAndUsable(num45);
						flag4 = !flag13;
						bool flag8 = !flag13 && !Main.mouseItem.IsAir;
						int num46 = Main.screenWidth - 64 - 28 - 47;
						int num47 = (int)((float)num20 + (float)(num38 * 56) * Main.inventoryScale);
						new Color(100, 100, 100, 100);
						if (num45 > 12)
						{
							num47 += num35;
						}
						int context3 = 9;
						if (num45 > 12)
						{
							context3 = 11;
						}
						if (Main.mouseX >= num46 && (float)Main.mouseX <= (float)num46 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num47 && (float)Main.mouseY <= (float)num47 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.armorHide = true;
							ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, context3, num45);
							if (!flag8)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, context3, num45);
								ItemSlot.RightClick(Main.player[Main.myPlayer].armor, context3, num45);
							}
							ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context3, num45);
						}
						if (flag4)
						{
							Main.inventoryBack = color2;
						}
						ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context3, num45, new Vector2((float)num46, (float)num47), default(Color));
					}
				}
				Main.inventoryBack = color;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > num20 && Main.mouseY < (int)((float)num20 + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				num38 = -1;
				for (int num48 = 0; num48 < 3; num48++)
				{
					if ((num48 != 8 || flag5) && (num48 != 9 || flag6))
					{
						num38++;
						bool flag14 = Main.LocalPlayer.IsItemSlotUnlockedAndUsable(num48);
						flag4 = !flag14;
						bool flag9 = !flag14 && !Main.mouseItem.IsAir;
						int num49 = Main.screenWidth - 64 - 28 - 47 - 47;
						int num50 = (int)((float)num20 + (float)(num38 * 56) * Main.inventoryScale);
						new Color(100, 100, 100, 100);
						if (num48 > 2)
						{
							num50 += num35;
						}
						if (Main.mouseX >= num49 && (float)Main.mouseX <= (float)num49 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num50 && (float)Main.mouseY <= (float)num50 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.armorHide = true;
							ItemSlot.OverrideHover(Main.player[Main.myPlayer].dye, 12, num48);
							if (!flag9)
							{
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									ItemSlot.RightClick(Main.player[Main.myPlayer].dye, 12, num48);
								}
								ItemSlot.LeftClick(Main.player[Main.myPlayer].dye, 12, num48);
							}
							ItemSlot.MouseHover(Main.player[Main.myPlayer].dye, 12, num48);
						}
						if (flag4)
						{
							Main.inventoryBack = color2;
						}
						ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].dye, 12, num48, new Vector2((float)num49, (float)num50), default(Color));
					}
				}
				Main.inventoryBack = color;
				Vector2 defPos = AccessorySlotLoader.DefenseIconPosition;
				Main.DrawDefenseCounter((int)defPos.X, (int)defPos.Y);
				if (!this._achievementAdvisor.CanDrawAboveCoins)
				{
					Vector2 achievePos;
					achievePos..ctor(defPos.X - 10f - 47f - 47f - 14f - 14f, defPos.Y - 56f * Main.inventoryScale * 0.5f);
					this._achievementAdvisor.DrawOneAchievement(Main.spriteBatch, achievePos, false);
					UILinkPointNavigator.SetPosition(1570, achievePos + new Vector2(20f) * Main.inventoryScale);
				}
				Main.inventoryBack = color;
				Main.inventoryScale = num36;
			}
			LoaderManager.Get<AccessorySlotLoader>().DrawAccSlots(num20);
			int num51 = (Main.screenHeight - 600) / 2;
			int num52 = (int)((float)Main.screenHeight / 600f * 250f);
			if (Main.screenHeight < 700)
			{
				num51 = (Main.screenHeight - 508) / 2;
				num52 = (int)((float)Main.screenHeight / 600f * 200f);
			}
			else if (Main.screenHeight < 850)
			{
				num52 = (int)((float)Main.screenHeight / 600f * 225f);
			}
			if (Main.craftingHide)
			{
				Main.craftingAlpha -= 0.1f;
				if (Main.craftingAlpha < 0f)
				{
					Main.craftingAlpha = 0f;
				}
			}
			else
			{
				Main.craftingAlpha += 0.025f;
				if (Main.craftingAlpha > 1f)
				{
					Main.craftingAlpha = 1f;
				}
			}
			Color color3;
			color3..ctor((int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)));
			Main.craftingHide = false;
			if (Main.InReforgeMenu)
			{
				if (Main.mouseReforge)
				{
					if (Main.reforgeScale < 1f)
					{
						Main.reforgeScale += 0.02f;
					}
				}
				else if (Main.reforgeScale > 1f)
				{
					Main.reforgeScale -= 0.02f;
				}
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InGuideCraftMenu)
				{
					Main.InReforgeMenu = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes(false);
				}
				else
				{
					int num53 = 50;
					int num54 = 270;
					string text = Lang.inter[46].Value + ": ";
					if (Main.reforgeItem.type > 0)
					{
						int num55 = Main.reforgeItem.value;
						num55 *= Main.reforgeItem.stack;
						bool canApplyDiscount = true;
						if (ItemLoader.ReforgePrice(Main.reforgeItem, ref num55, ref canApplyDiscount))
						{
							if (canApplyDiscount && Main.LocalPlayer.discountAvailable)
							{
								num55 = (int)((double)num55 * 0.8);
							}
							num55 = (int)((double)num55 * Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
							num55 /= 3;
						}
						string text2 = "";
						int num56 = 0;
						int num57 = 0;
						int num58 = 0;
						int num59 = 0;
						int num60 = num55;
						if (num60 < 1)
						{
							num60 = 1;
						}
						if (num60 >= 1000000)
						{
							num56 = num60 / 1000000;
							num60 -= num56 * 1000000;
						}
						if (num60 >= 10000)
						{
							num57 = num60 / 10000;
							num60 -= num57 * 10000;
						}
						if (num60 >= 100)
						{
							num58 = num60 / 100;
							num60 -= num58 * 100;
						}
						if (num60 >= 1)
						{
							num59 = num60;
						}
						if (num56 > 0)
						{
							text2 = string.Concat(new string[]
							{
								text2,
								"[c/",
								Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
								":",
								num56.ToString(),
								" ",
								Lang.inter[15].Value,
								"] "
							});
						}
						if (num57 > 0)
						{
							text2 = string.Concat(new string[]
							{
								text2,
								"[c/",
								Colors.AlphaDarken(Colors.CoinGold).Hex3(),
								":",
								num57.ToString(),
								" ",
								Lang.inter[16].Value,
								"] "
							});
						}
						if (num58 > 0)
						{
							text2 = string.Concat(new string[]
							{
								text2,
								"[c/",
								Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
								":",
								num58.ToString(),
								" ",
								Lang.inter[17].Value,
								"] "
							});
						}
						if (num59 > 0)
						{
							text2 = string.Concat(new string[]
							{
								text2,
								"[c/",
								Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
								":",
								num59.ToString(),
								" ",
								Lang.inter[18].Value,
								"] "
							});
						}
						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num53 + 130), (float)this.invBottom, true);
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text2, new Vector2((float)(num53 + 50) + FontAssets.MouseText.Value.MeasureString(text).X, (float)num54), Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
						int num61 = num53 + 70;
						int num62 = num54 + 40;
						object obj = Main.mouseX > num61 - 15 && Main.mouseX < num61 + 15 && Main.mouseY > num62 - 15 && Main.mouseY < num62 + 15 && !PlayerInput.IgnoreMouseInterface;
						Texture2D value4 = TextureAssets.Reforge[0].Value;
						object obj2 = obj;
						if (obj2 != null)
						{
							value4 = TextureAssets.Reforge[1].Value;
						}
						Main.spriteBatch.Draw(value4, new Vector2((float)num61, (float)num62), null, Color.White, 0f, value4.Size() / 2f, Main.reforgeScale, 0, 0f);
						UILinkPointNavigator.SetPosition(304, new Vector2((float)num61, (float)num62) + value4.Size() / 4f);
						if (obj2 != null)
						{
							Main.hoverItemName = Lang.inter[19].Value;
							if (!Main.mouseReforge)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							Main.mouseReforge = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].CanAfford((long)num55, -1) && ItemLoader.CanReforge(Main.reforgeItem))
							{
								Main.player[Main.myPlayer].BuyItem((long)num55, -1);
								ItemLoader.PreReforge(Main.reforgeItem);
								Main.reforgeItem.ResetPrefix();
								Main.reforgeItem.Prefix(-2);
								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
								ItemLoader.PostReforge(Main.reforgeItem);
								PopupText.NewText(PopupTextContext.ItemReforge, Main.reforgeItem, Main.reforgeItem.stack, true, false);
								SoundEngine.PlaySound(SoundID.Item37, null, null);
							}
						}
						else
						{
							Main.mouseReforge = false;
						}
					}
					else
					{
						text = Lang.inter[20].Value;
					}
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(num53 + 50), (float)num54), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, Vector2.Zero, Vector2.One, -1f, 2f);
					if (Main.mouseX >= num53 && (float)Main.mouseX <= (float)num53 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num54 && (float)Main.mouseY <= (float)num54 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						ItemSlot.LeftClick(ref Main.reforgeItem, 5);
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Recipe.FindRecipes(false);
						}
						ItemSlot.RightClick(ref Main.reforgeItem, 5);
						ItemSlot.MouseHover(ref Main.reforgeItem, 5);
					}
					ItemSlot.Draw(Main.spriteBatch, ref Main.reforgeItem, 5, new Vector2((float)num53, (float)num54), default(Color));
				}
			}
			else if (Main.InGuideCraftMenu)
			{
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InReforgeMenu)
				{
					Main.InGuideCraftMenu = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes(false);
				}
				else
				{
					int inventoryX;
					int inventoryY;
					Main.DrawGuideCraftText(num51, color3, out inventoryX, out inventoryY);
					new Color(100, 100, 100, 100);
					if (Main.mouseX >= inventoryX && (float)Main.mouseX <= (float)inventoryX + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= inventoryY && (float)Main.mouseY <= (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						ItemSlot.OverrideHover(ref Main.guideItem, 7);
						ItemSlot.LeftClick(ref Main.guideItem, 7);
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Recipe.FindRecipes(false);
						}
						ItemSlot.RightClick(ref Main.guideItem, 7);
						ItemSlot.MouseHover(ref Main.guideItem, 7);
					}
					ItemSlot.Draw(Main.spriteBatch, ref Main.guideItem, 7, new Vector2((float)inventoryX, (float)inventoryY), default(Color));
				}
			}
			Main.CreativeMenu.Draw(Main.spriteBatch);
			bool flag10 = Main.CreativeMenu.Enabled && !Main.CreativeMenu.Blocked;
			flag10 |= Main.hidePlayerCraftingMenu;
			if (!Main.InReforgeMenu && !Main.LocalPlayer.tileEntityAnchor.InUse && !flag10)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				if (Main.numAvailableRecipes > 0)
				{
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[25].Value, new Vector2(76f, (float)(414 + num51)), color3, 0f, default(Vector2), 1f, 0, 0f);
				}
				for (int num63 = 0; num63 < Recipe.maxRecipes; num63++)
				{
					Main.inventoryScale = 100f / (Math.Abs(Main.availableRecipeY[num63]) + 100f);
					if ((double)Main.inventoryScale < 0.75)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.recFastScroll)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.availableRecipeY[num63] < (float)((num63 - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[num63] == 0f && !Main.recFastScroll)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.availableRecipeY[num63] += 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[num63] += 130000f;
						}
						if (Main.availableRecipeY[num63] > (float)((num63 - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[num63] = (float)((num63 - Main.focusRecipe) * 65);
						}
					}
					else if (Main.availableRecipeY[num63] > (float)((num63 - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[num63] == 0f && !Main.recFastScroll)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.availableRecipeY[num63] -= 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[num63] -= 130000f;
						}
						if (Main.availableRecipeY[num63] < (float)((num63 - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[num63] = (float)((num63 - Main.focusRecipe) * 65);
						}
					}
					else
					{
						Main.recFastScroll = false;
					}
					if (num63 < Main.numAvailableRecipes && Math.Abs(Main.availableRecipeY[num63]) <= (float)num52)
					{
						int num64 = (int)(46f - 26f * Main.inventoryScale);
						int num65 = (int)(410f + Main.availableRecipeY[num63] * Main.inventoryScale - 30f * Main.inventoryScale + (float)num51);
						double num66 = (double)(Main.inventoryBack.A + 50);
						double num67 = 255.0;
						if (Math.Abs(Main.availableRecipeY[num63]) > (float)num52 - 100f)
						{
							num66 = (double)(150f * (100f - (Math.Abs(Main.availableRecipeY[num63]) - ((float)num52 - 100f)))) * 0.01;
							num67 = (double)(255f * (100f - (Math.Abs(Main.availableRecipeY[num63]) - ((float)num52 - 100f)))) * 0.01;
						}
						new Color((int)((byte)num66), (int)((byte)num66), (int)((byte)num66), (int)((byte)num66));
						Color lightColor;
						lightColor..ctor((int)((byte)num67), (int)((byte)num67), (int)((byte)num67), (int)((byte)num67));
						if (!Main.LocalPlayer.creativeInterface && Main.mouseX >= num64 && (float)Main.mouseX <= (float)num64 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num65 && (float)Main.mouseY <= (float)num65 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.HoverOverCraftingItemButton(num63);
						}
						if (Main.numAvailableRecipes > 0)
						{
							num66 -= 50.0;
							if (num66 < 0.0)
							{
								num66 = 0.0;
							}
							if (num63 == Main.focusRecipe)
							{
								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 0;
								if (PlayerInput.SettingsForUI.HighlightThingsForMouse)
								{
									ItemSlot.DrawGoldBGForCraftingMaterial = true;
								}
							}
							else
							{
								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
							}
							Color color4 = Main.inventoryBack;
							Main.inventoryBack = new Color((int)((byte)num66), (int)((byte)num66), (int)((byte)num66), (int)((byte)num66));
							ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num63]].createItem, 22, new Vector2((float)num64, (float)num65), lightColor);
							Main.inventoryBack = color4;
						}
					}
				}
				if (Main.numAvailableRecipes > 0)
				{
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
					for (int num68 = 0; num68 < Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem.Count; num68++)
					{
						if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num68].type == 0)
						{
							UILinkPointNavigator.Shortcuts.CRAFT_CurrentIngredientsCount = num68 + 1;
							break;
						}
						int num69 = 80 + num68 * 40;
						int num70 = 380 + num51;
						double num71 = (double)(Main.inventoryBack.A + 50);
						Color white = Color.White;
						Color white2 = Color.White;
						num71 = (double)((float)(Main.inventoryBack.A + 50) - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						double num72 = (double)(255f - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						if (num71 < 0.0)
						{
							num71 = 0.0;
						}
						if (num72 < 0.0)
						{
							num72 = 0.0;
						}
						white.R = (byte)num71;
						white.G = (byte)num71;
						white.B = (byte)num71;
						white.A = (byte)num71;
						white2.R = (byte)num72;
						white2.G = (byte)num72;
						white2.B = (byte)num72;
						white2.A = (byte)num72;
						Main.inventoryScale = 0.6f;
						if (num71 == 0.0)
						{
							break;
						}
						if (Main.mouseX >= num69 && (float)Main.mouseX <= (float)num69 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num70 && (float)Main.mouseY <= (float)num70 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.craftingHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.SetRecipeMaterialDisplayName(num68);
						}
						num71 -= 50.0;
						if (num71 < 0.0)
						{
							num71 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num68;
						Color color5 = Main.inventoryBack;
						Main.inventoryBack = new Color((int)((byte)num71), (int)((byte)num71), (int)((byte)num71), (int)((byte)num71));
						Item tempItem = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num68];
						ItemSlot.Draw(Main.spriteBatch, ref tempItem, 22, new Vector2((float)num69, (float)num70), default(Color));
						Main.inventoryBack = color5;
					}
				}
				if (Main.numAvailableRecipes == 0)
				{
					Main.recBigList = false;
				}
				else
				{
					int num73 = 94;
					int num74 = 450 + num51;
					if (Main.InGuideCraftMenu)
					{
						num74 -= 150;
					}
					bool flag11 = Main.mouseX > num73 - 15 && Main.mouseX < num73 + 15 && Main.mouseY > num74 - 15 && Main.mouseY < num74 + 15 && !PlayerInput.IgnoreMouseInterface;
					int num75 = Main.recBigList.ToInt() * 2 + flag11.ToInt();
					Main.spriteBatch.Draw(TextureAssets.CraftToggle[num75].Value, new Vector2((float)num73, (float)num74), null, Color.White, 0f, TextureAssets.CraftToggle[num75].Value.Size() / 2f, 1f, 0, 0f);
					if (flag11)
					{
						this.MouseText(Language.GetTextValue("GameUI.CraftingWindow"), 0, 0, -1, -1, -1, -1, 0);
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (!Main.recBigList)
							{
								Main.recBigList = true;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							else
							{
								Main.recBigList = false;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
						}
					}
				}
			}
			Main.hidePlayerCraftingMenu = false;
			if (Main.recBigList && !flag10)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				int num76 = 42;
				if ((double)Main.inventoryScale < 0.75)
				{
					Main.inventoryScale = 0.75f;
				}
				int num77 = 340;
				int num78 = 310;
				int num79 = (Main.screenWidth - num78 - 280) / num76;
				int num80 = (Main.screenHeight - num77 - 20) / num76;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerRow = num79;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerColumn = num80;
				int num81 = 0;
				int num82 = 0;
				int num83 = num78;
				int num84 = num77;
				int num85 = num78 - 20;
				int num86 = num77 + 2;
				if (Main.recStart > Main.numAvailableRecipes - num79 * num80)
				{
					Main.recStart = Main.numAvailableRecipes - num79 * num80;
					if (Main.recStart < 0)
					{
						Main.recStart = 0;
					}
				}
				if (Main.recStart > 0)
				{
					if (Main.mouseX >= num85 && Main.mouseX <= num85 + TextureAssets.CraftUpButton.Width() && Main.mouseY >= num86 && Main.mouseY <= num86 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart -= num79;
							if (Main.recStart < 0)
							{
								Main.recStart = 0;
							}
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
						}
					}
					Main.spriteBatch.Draw(TextureAssets.CraftUpButton.Value, new Vector2((float)num85, (float)num86), new Rectangle?(new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.recStart < Main.numAvailableRecipes - num79 * num80)
				{
					num86 += 20;
					if (Main.mouseX >= num85 && Main.mouseX <= num85 + TextureAssets.CraftUpButton.Width() && Main.mouseY >= num86 && Main.mouseY <= num86 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart += num79;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.recStart > Main.numAvailableRecipes - num79)
							{
								Main.recStart = Main.numAvailableRecipes - num79;
							}
							Main.mouseLeftRelease = false;
						}
					}
					Main.spriteBatch.Draw(TextureAssets.CraftDownButton.Value, new Vector2((float)num85, (float)num86), new Rectangle?(new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				int num87 = Main.recStart;
				while (num87 < Recipe.maxRecipes && num87 < Main.numAvailableRecipes)
				{
					int num88 = num83;
					int num89 = num84;
					double num90 = (double)(Main.inventoryBack.A + 50);
					double num91 = 255.0;
					new Color((int)((byte)num90), (int)((byte)num90), (int)((byte)num90), (int)((byte)num90));
					new Color((int)((byte)num91), (int)((byte)num91), (int)((byte)num91), (int)((byte)num91));
					if (Main.mouseX >= num88 && (float)Main.mouseX <= (float)num88 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num89 && (float)Main.mouseY <= (float)num89 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.focusRecipe = num87;
							Main.recFastScroll = true;
							Main.recBigList = false;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							if (PlayerInput.UsingGamepadUI)
							{
								UILinkPointNavigator.ChangePage(9);
								Main.LockCraftingForThisCraftClickDuration();
							}
						}
						Main.craftingHide = true;
						Main.HoverItem = Main.recipe[Main.availableRecipe[num87]].createItem.Clone();
						ItemSlot.MouseHover(22);
						Main.hoverItemName = Main.recipe[Main.availableRecipe[num87]].createItem.Name;
						if (Main.recipe[Main.availableRecipe[num87]].createItem.stack > 1)
						{
							Main.hoverItemName = Main.hoverItemName + " (" + Main.recipe[Main.availableRecipe[num87]].createItem.stack.ToString() + ")";
						}
					}
					if (Main.numAvailableRecipes > 0)
					{
						num90 -= 50.0;
						if (num90 < 0.0)
						{
							num90 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = num87 - Main.recStart;
						Color color6 = Main.inventoryBack;
						Main.inventoryBack = new Color((int)((byte)num90), (int)((byte)num90), (int)((byte)num90), (int)((byte)num90));
						ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num87]].createItem, 22, new Vector2((float)num88, (float)num89), default(Color));
						Main.inventoryBack = color6;
					}
					num83 += num76;
					num81++;
					if (num81 >= num79)
					{
						num83 = num78;
						num84 += num76;
						num81 = 0;
						num82++;
						if (num82 >= num80)
						{
							break;
						}
					}
					num87++;
				}
			}
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString("Coins");
			Vector2 vector3 = FontAssets.MouseText.Value.MeasureString(Lang.inter[26].Value);
			float num92 = vector2.X / vector3.X;
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[26].Value, new Vector2(496f, 84f + (vector2.Y - vector2.Y * num92) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num92, 0, 0f);
			Main.inventoryScale = 0.6f;
			for (int num93 = 0; num93 < 4; num93++)
			{
				int num94 = 497;
				int num95 = (int)(85f + (float)(num93 * 56) * Main.inventoryScale + 20f);
				int slot = num93 + 50;
				new Color(100, 100, 100, 100);
				if (Main.mouseX >= num94 && (float)Main.mouseX <= (float)num94 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num95 && (float)Main.mouseY <= (float)num95 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 1, slot);
					ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 1, slot);
					ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 1, slot);
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Recipe.FindRecipes(false);
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 1, slot);
				}
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 1, slot, new Vector2((float)num94, (float)num95), default(Color));
			}
			Vector2 vector4 = FontAssets.MouseText.Value.MeasureString("Ammo");
			Vector2 vector5 = FontAssets.MouseText.Value.MeasureString(Lang.inter[27].Value);
			float num96 = vector4.X / vector5.X;
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[27].Value, new Vector2(532f, 84f + (vector4.Y - vector4.Y * num96) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num96, 0, 0f);
			Main.inventoryScale = 0.6f;
			for (int num97 = 0; num97 < 4; num97++)
			{
				int num98 = 534;
				int num99 = (int)(85f + (float)(num97 * 56) * Main.inventoryScale + 20f);
				int slot2 = 54 + num97;
				new Color(100, 100, 100, 100);
				if (Main.mouseX >= num98 && (float)Main.mouseX <= (float)num98 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num99 && (float)Main.mouseY <= (float)num99 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 2, slot2);
					ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 2, slot2);
					ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 2, slot2);
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Recipe.FindRecipes(false);
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 2, slot2);
				}
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 2, slot2, new Vector2((float)num98, (float)num99), default(Color));
			}
			if (Main.npcShop > 0 && (!Main.playerInventory || Main.player[Main.myPlayer].talkNPC == -1))
			{
				Main.SetNPCShopIndex(0);
			}
			if (Main.npcShop > 0 && !Main.recBigList)
			{
				Utils.DrawBorderStringFourWay(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[28].Value, 504f, (float)this.invBottom, Color.White * ((float)Main.mouseTextColor / 255f), Color.Black, Vector2.Zero, 1f);
				ItemSlot.DrawSavings(Main.spriteBatch, 504f, (float)this.invBottom, false);
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num100 = 0; num100 < 10; num100++)
				{
					for (int num101 = 0; num101 < 4; num101++)
					{
						int num102 = (int)(73f + (float)(num100 * 56) * Main.inventoryScale);
						int num103 = (int)((float)this.invBottom + (float)(num101 * 56) * Main.inventoryScale);
						int slot3 = num100 + num101 * 10;
						new Color(100, 100, 100, 100);
						if (Main.mouseX >= num102 && (float)Main.mouseX <= (float)num102 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num103 && (float)Main.mouseY <= (float)num103 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							ItemSlot.OverrideHover(this.shop[Main.npcShop].item, 15, slot3);
							Main.player[Main.myPlayer].mouseInterface = true;
							ItemSlot.LeftClick(this.shop[Main.npcShop].item, 15, slot3);
							ItemSlot.RightClick(this.shop[Main.npcShop].item, 15, slot3);
							ItemSlot.MouseHover(this.shop[Main.npcShop].item, 15, slot3);
						}
						ItemSlot.Draw(Main.spriteBatch, this.shop[Main.npcShop].item, 15, slot3, new Vector2((float)num102, (float)num103), default(Color));
					}
				}
			}
			if (Main.player[Main.myPlayer].chest > -1 && !Main.tileContainer[(int)(*Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].type)])
			{
				Main.player[Main.myPlayer].chest = -1;
				Recipe.FindRecipes(false);
			}
			int offsetDown = 0;
			UIVirtualKeyboard.ShouldHideText = !PlayerInput.SettingsForUI.ShowGamepadHints;
			if (!PlayerInput.UsingGamepad)
			{
				offsetDown = 9999;
			}
			UIVirtualKeyboard.OffsetDown = offsetDown;
			ChestUI.Draw(Main.spriteBatch);
			TileEntity tileEntity = Main.LocalPlayer.tileEntityAnchor.GetTileEntity();
			if (tileEntity != null)
			{
				tileEntity.OnInventoryDraw(Main.LocalPlayer, Main.spriteBatch);
			}
			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
			{
				int num104 = 0;
				int num105 = 498;
				int num106 = 244;
				int num107 = TextureAssets.ChestStack[num104].Width();
				int num108 = TextureAssets.ChestStack[num104].Height();
				UILinkPointNavigator.SetPosition(301, new Vector2((float)num105 + (float)num107 * 0.75f, (float)num106 + (float)num108 * 0.75f));
				if (Main.mouseX >= num105 && Main.mouseX <= num105 + num107 && Main.mouseY >= num106 && Main.mouseY <= num106 + num108 && !PlayerInput.IgnoreMouseInterface)
				{
					num104 = 1;
					if (!Main.allChestStackHover)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.allChestStackHover = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.mouseLeftRelease = false;
						Main.player[Main.myPlayer].QuickStackAllChests();
						Recipe.FindRecipes(false);
					}
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				else if (Main.allChestStackHover)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.allChestStackHover = false;
				}
				Main.spriteBatch.Draw(TextureAssets.ChestStack[num104].Value, new Vector2((float)num105, (float)num106), new Rectangle?(new Rectangle(0, 0, TextureAssets.ChestStack[num104].Width(), TextureAssets.ChestStack[num104].Height())), Color.White, 0f, default(Vector2), 1f, 0, 0f);
				if (!Main.mouseText && num104 == 1)
				{
					this.MouseText(Language.GetTextValue("GameUI.QuickStackToNearby"), 0, 0, -1, -1, -1, -1, 0);
				}
			}
			if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0)
			{
				return;
			}
			int num109 = 0;
			int num110 = 534;
			int num111 = 244;
			int num112 = 30;
			int num113 = 30;
			UILinkPointNavigator.SetPosition(302, new Vector2((float)num110 + (float)num112 * 0.75f, (float)num111 + (float)num113 * 0.75f));
			bool flag12 = false;
			if (Main.mouseX >= num110 && Main.mouseX <= num110 + num112 && Main.mouseY >= num111 && Main.mouseY <= num111 + num113 && !PlayerInput.IgnoreMouseInterface)
			{
				num109 = 1;
				flag12 = true;
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					ItemSorting.SortInventory();
					Recipe.FindRecipes(false);
				}
			}
			if (flag12 != Main.inventorySortMouseOver)
			{
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				Main.inventorySortMouseOver = flag12;
			}
			Texture2D value5 = TextureAssets.InventorySort[(Main.inventorySortMouseOver > false) ? 1 : 0].Value;
			Main.spriteBatch.Draw(value5, new Vector2((float)num110, (float)num111), null, Color.White, 0f, default(Vector2), 1f, 0, 0f);
			if (!Main.mouseText && num109 == 1)
			{
				this.MouseText(Language.GetTextValue("GameUI.SortInventory"), 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x060004EE RID: 1262 RVA: 0x001006E8 File Offset: 0x000FE8E8
		private static void DrawLoadoutButtons(int inventoryTop, bool demonHeartSlotAvailable, bool masterModeSlotAvailable)
		{
			int num = 10;
			Player player = Main.player[Main.myPlayer];
			if (!demonHeartSlotAvailable)
			{
				num--;
			}
			if (!masterModeSlotAvailable)
			{
				num--;
			}
			int x = Main.screenWidth - 58 + 14;
			int num2 = (int)((float)(inventoryTop - 2) + 0f * Main.inventoryScale);
			int num3 = (int)((float)(inventoryTop - 2) + (float)(num * 56) * Main.inventoryScale);
			Texture2D value = TextureAssets.Extra[259].Value;
			Rectangle rectangle;
			rectangle..ctor(x, num2 + 2, 4, num3 - num2);
			ItemSlot.GetLoadoutColor(player.CurrentLoadoutIndex);
			int num4 = player.Loadouts.Length;
			int num5 = 32;
			int num6 = 4;
			int num7 = -1;
			DynamicSpriteFont value2 = FontAssets.ItemStack.Value;
			for (int i = 0; i < num4; i++)
			{
				Rectangle rectangle2;
				rectangle2..ctor(rectangle.X + rectangle.Width, rectangle.Y + (num5 + num6) * i, 32, num5);
				Color loadoutColor = ItemSlot.GetLoadoutColor(i);
				EquipmentLoadout equipmentLoadout = player.Loadouts[i];
				int frameX = (i == player.CurrentLoadoutIndex) ? 1 : 0;
				bool flag = false;
				if (rectangle2.Contains(Main.MouseScreen.ToPoint()))
				{
					flag = true;
					loadoutColor = Color.Lerp(loadoutColor, Color.White, 0.8f);
					player.mouseInterface = true;
					if (!Main.mouseText)
					{
						Main.instance.MouseText(Language.GetTextValue("UI.Loadout" + (i + 1).ToString()), 0, 0, -1, -1, -1, -1, 0);
						Main.mouseText = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						player.TrySwitchingLoadout(i);
					}
				}
				Rectangle rectangle3 = value.Frame(3, 3, frameX, i, 0, 0);
				Main.spriteBatch.Draw(value, rectangle2.Center.ToVector2(), new Rectangle?(rectangle3), Color.White, 0f, rectangle3.Size() / 2f, 1f, 0, 0f);
				if (flag)
				{
					rectangle3 = value.Frame(3, 3, 2, i, 0, 0);
					Main.spriteBatch.Draw(value, rectangle2.Center.ToVector2(), new Rectangle?(rectangle3), Main.OurFavoriteColor, 0f, rectangle3.Size() / 2f, 1f, 0, 0f);
				}
				UILinkPointNavigator.SetPosition(312 + i, rectangle2.Center.ToVector2());
			}
			if (Main._lastHoveredLoadoutIndex != num7)
			{
				Main._lastHoveredLoadoutIndex = num7;
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			}
		}

		// Token: 0x060004EF RID: 1263 RVA: 0x00100960 File Offset: 0x000FEB60
		private void DrawNPCHousesInUI()
		{
			UILinkPointNavigator.Shortcuts.NPCS_LastHovered = -2;
			if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num = 0;
			string text = "";
			int num2 = 0;
			int num3 = 0;
			this._npcTypesThatAlreadyDrewAHead.Clear();
			for (int i = 0; i < this._npcIndexWhoHoldsHeadIndex.Length; i++)
			{
				this._npcIndexWhoHoldsHeadIndex[i] = -1;
			}
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && !this._npcTypesThatAlreadyDrewAHead.Contains(Main.npc[j].type))
				{
					ModNPC modNPC = Main.npc[j].ModNPC;
					if (!(((modNPC != null) ? new bool?(modNPC.TownNPCStayingHomeless) : null) ?? false))
					{
						int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(Main.npc[j]);
						if (headIndexSafe > 0 && !NPCHeadID.Sets.CannotBeDrawnInHousingUI[headIndexSafe] && this._npcIndexWhoHoldsHeadIndex[headIndexSafe] == -1)
						{
							this._npcIndexWhoHoldsHeadIndex[headIndexSafe] = j;
							this._npcTypesThatAlreadyDrewAHead.Add(Main.npc[j].type);
						}
					}
				}
			}
			Main.hidePVPIcons = false;
			int num4 = 0;
			int num5 = 0;
			UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = 1;
			for (int k = 0; k < TextureAssets.NpcHead.Length; k++)
			{
				if (k == 0 || this._npcIndexWhoHoldsHeadIndex[k] != -1)
				{
					int num6 = this._npcIndexWhoHoldsHeadIndex[k];
					int num7 = Main.screenWidth - 64 - 28 + num3;
					int num8 = (int)((float)(174 + Main.mH) + (float)(num * 56) * Main.inventoryScale) + num2;
					Color color;
					color..ctor(100, 100, 100, 100);
					if (num8 > Main.screenHeight - 80)
					{
						num3 -= 48;
						num2 -= num8 - (174 + Main.mH);
						num7 = Main.screenWidth - 64 - 28 + num3;
						num8 = (int)((float)(174 + Main.mH) + (float)(num * 56) * Main.inventoryScale) + num2;
						UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = num5;
						if (num3 <= -144)
						{
							Main.hidePVPIcons = true;
						}
						num5 = 0;
					}
					if (Main.mouseX >= num7 && (float)Main.mouseX <= (float)num7 + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num8 && (float)Main.mouseY <= (float)num8 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale)
					{
						UILinkPointNavigator.Shortcuts.NPCS_LastHovered = num6;
						Main.mouseText = true;
						text = ((k != 0) ? Main.npc[num6].FullName : Lang.inter[8].Value);
						if (!PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && !PlayerInput.UsingGamepadUI && Main.mouseItem.type == 0)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (k == 0)
								{
									this.SetMouseNPC_ToHousingQuery();
								}
								else
								{
									this.SetMouseNPC(num6, Main.npc[num6].type);
								}
								Main.mouseLeftRelease = false;
							}
						}
					}
					UILinkPointNavigator.SetPosition(600 + num, new Vector2((float)num7, (float)num8) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
					Texture2D value = TextureAssets.InventoryBack11.Value;
					Color white = Main.inventoryBack;
					if (UILinkPointNavigator.CurrentPoint - 600 == num)
					{
						value = TextureAssets.InventoryBack14.Value;
						white = Color.White;
					}
					Main.spriteBatch.Draw(value, new Vector2((float)num7, (float)num8), null, white, 0f, default(Vector2), Main.inventoryScale, 0, 0f);
					color = Color.White;
					int num9 = k;
					float scale = 1f;
					float num10 = (TextureAssets.NpcHead[num9].Width() <= TextureAssets.NpcHead[num9].Height()) ? ((float)TextureAssets.NpcHead[num9].Height()) : ((float)TextureAssets.NpcHead[num9].Width());
					if (num10 > 36f)
					{
						scale = 36f / num10;
					}
					Main.spriteBatch.Draw(TextureAssets.NpcHead[num9].Value, new Vector2((float)num7 + 26f * Main.inventoryScale, (float)num8 + 26f * Main.inventoryScale), null, color, 0f, new Vector2((float)(TextureAssets.NpcHead[num9].Width() / 2), (float)(TextureAssets.NpcHead[num9].Height() / 2)), scale, 0, 0f);
					num++;
					num4++;
					num5++;
				}
			}
			UILinkPointNavigator.Shortcuts.NPCS_IconsTotal = num4;
			if (text != "" && Main.mouseItem.type == 0)
			{
				this.MouseText(text, 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x060004F0 RID: 1264 RVA: 0x00100EA4 File Offset: 0x000FF0A4
		private static void DrawDefenseCounter(int inventoryX, int inventoryY)
		{
			Vector2 vector;
			vector..ctor((float)(inventoryX - 10 - 47 - 47 - 14), (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * 0.5f);
			Main.spriteBatch.Draw(TextureAssets.Extra[58].Value, vector, null, Color.White, 0f, TextureAssets.Extra[58].Value.Size() / 2f, Main.inventoryScale, 0, 0f);
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(Main.player[Main.myPlayer].statDefense.ToString());
			ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, Main.player[Main.myPlayer].statDefense.ToString(), vector - vector2 * 0.5f * Main.inventoryScale, Color.White, 0f, Vector2.Zero, new Vector2(Main.inventoryScale), -1f, 2f);
			if (Utils.CenteredRectangle(vector, TextureAssets.Extra[58].Value.Size()).Contains(new Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				Player.DefenseStat statDefense = Main.player[Main.myPlayer].statDefense;
				string value = statDefense.ToString() + " " + Lang.inter[10].Value;
				if (!string.IsNullOrEmpty(value))
				{
					Main.hoverItemName = value;
				}
			}
			UILinkPointNavigator.SetPosition(1557, vector + TextureAssets.Extra[58].Value.Size() * Main.inventoryScale / 4f);
		}

		// Token: 0x060004F1 RID: 1265 RVA: 0x0010108C File Offset: 0x000FF28C
		private static void DrawGuideCraftText(int adjY, Color craftingTipColor, out int inventoryX, out int inventoryY)
		{
			inventoryX = 73;
			inventoryY = 331;
			inventoryY += adjY;
			Main._requiredObjecsForCraftingText.Clear();
			string text;
			if (Main.guideItem.IsAir)
			{
				text = Lang.inter[24].Value;
			}
			else
			{
				text = Lang.inter[21].Value + " " + Main.guideItem.Name;
				Recipe recipe = Main.recipe[Main.availableRecipe[Main.focusRecipe]];
				for (int i = 0; i < recipe.requiredTile.Count; i++)
				{
					int num = recipe.requiredTile[i];
					if (num == -1)
					{
						break;
					}
					int requiredTileStyle = Recipe.GetRequiredTileStyle(num);
					string mapObjectName = Lang.GetMapObjectName(MapHelper.TileToLookup(num, requiredTileStyle));
					Main._requiredObjecsForCraftingText.Add(mapObjectName);
				}
				if (recipe.needWater)
				{
					Main._requiredObjecsForCraftingText.Add(Lang.inter[53].Value);
				}
				if (recipe.needHoney)
				{
					Main._requiredObjecsForCraftingText.Add(Lang.inter[58].Value);
				}
				if (recipe.needLava)
				{
					Main._requiredObjecsForCraftingText.Add(Lang.inter[56].Value);
				}
				if (recipe.needSnowBiome)
				{
					Main._requiredObjecsForCraftingText.Add(Lang.inter[123].Value);
				}
				if (recipe.needGraveyardBiome)
				{
					Main._requiredObjecsForCraftingText.Add(Lang.inter[124].Value);
				}
				Main._requiredObjecsForCraftingText.AddRange(from x in recipe.Conditions
				select x.Description.Value);
				if (Main._requiredObjecsForCraftingText.Count == 0)
				{
					string value = Lang.inter[23].Value;
					Main._requiredObjecsForCraftingText.Add(value);
				}
			}
			Color color;
			color..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			Vector2 vector;
			vector..ctor((float)(inventoryX + 50), (float)(inventoryY + 12));
			DynamicSpriteFont value2 = FontAssets.MouseText.Value;
			if (Main._requiredObjecsForCraftingText.Count > 0)
			{
				vector.Y -= 14f;
				Vector2 position = vector + new Vector2(0f, 26f);
				Color color2 = color;
				string value3 = Lang.inter[22].Value;
				string text2 = string.Join(", ", Main._requiredObjecsForCraftingText);
				string text3 = value3 + " " + text2;
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, value2, text3, position, color2, 0f, Vector2.Zero, 1f, 0, 0f);
			}
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, value2, text, vector, color, 0f, Vector2.Zero, 1f, 0, 0f);
		}

		// Token: 0x060004F2 RID: 1266 RVA: 0x00101340 File Offset: 0x000FF540
		private static void DrawGuideCraftText_Old(int adjY, Color craftingTipColor, out int inventoryX, out int inventoryY)
		{
			inventoryX = 73;
			inventoryY = 331;
			inventoryY += adjY;
			int num = 0;
			int num2 = 0;
			inventoryX += num;
			inventoryY += num2;
			string text;
			if (Main.guideItem.type > 0)
			{
				text = Lang.inter[21].Value + " " + Main.guideItem.Name;
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[22].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				int num3 = Main.focusRecipe;
				int num4 = 0;
				int i = 0;
				while (i < Main.recipe[Main.availableRecipe[num3]].requiredTile.Count)
				{
					int num5 = (i + 1) * 26;
					if (Main.recipe[Main.availableRecipe[num3]].requiredTile[i] == -1)
					{
						if (i == 0 && !Main.recipe[Main.availableRecipe[num3]].needWater && !Main.recipe[Main.availableRecipe[num3]].needHoney && !Main.recipe[Main.availableRecipe[num3]].needLava && !Main.recipe[Main.availableRecipe[num3]].needSnowBiome && !Main.recipe[Main.availableRecipe[num3]].needGraveyardBiome)
						{
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[23].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num5)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
							break;
						}
						break;
					}
					else
					{
						num4++;
						int num6 = Main.recipe[Main.availableRecipe[num3]].requiredTile[i];
						DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.GetMapObjectName(MapHelper.TileToLookup(num6, Recipe.GetRequiredTileStyle(num6))), new Vector2((float)inventoryX, (float)(inventoryY + 118 + num5)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
						i++;
					}
				}
				if (Main.recipe[Main.availableRecipe[num3]].needWater)
				{
					int num7 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[53].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num7)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.recipe[Main.availableRecipe[num3]].needHoney)
				{
					int num8 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[58].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num8)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.recipe[Main.availableRecipe[num3]].needLava)
				{
					int num9 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[56].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num9)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.recipe[Main.availableRecipe[num3]].needSnowBiome)
				{
					int num10 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[123].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num10)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.recipe[Main.availableRecipe[num3]].needGraveyardBiome)
				{
					int num11 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Lang.inter[124].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num11)), craftingTipColor, 0f, default(Vector2), 1f, 0, 0f);
				}
			}
			else
			{
				text = Lang.inter[24].Value;
			}
			inventoryX -= num;
			inventoryY -= num2;
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(inventoryX + 50), (float)(inventoryY + 12)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, 0, 0f);
		}

		// Token: 0x060004F3 RID: 1267 RVA: 0x0010180E File Offset: 0x000FFA0E
		public static void LockCraftingForThisCraftClickDuration()
		{
			Main._preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
		}

		// Token: 0x060004F4 RID: 1268 RVA: 0x00101818 File Offset: 0x000FFA18
		private static void HoverOverCraftingItemButton(int recipeIndex)
		{
			Recipe recipe = Main.recipe[Main.availableRecipe[recipeIndex]];
			Main.player[Main.myPlayer].mouseInterface = true;
			bool flag = (Main.mouseLeftRelease && Main.mouseLeft) || (Main.mouseRightRelease && Main.mouseRight);
			bool flag2 = Main.mouseLeft || Main.mouseRight;
			if (Main.focusRecipe == recipeIndex && Main.guideItem.IsAir)
			{
				bool flag3 = Main.LocalPlayer.ItemTimeIsZero && Main.LocalPlayer.itemAnimation == 0 && !Main.player[Main.myPlayer].HasLockedInventory() && !Main._preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;
				bool flag6 = Main._currentRecipeBeingCrafted != -1 && Main._currentRecipeBeingCrafted != Main.availableRecipe[recipeIndex];
				bool flag4 = Main._currentRecipeBeingCrafted != -1 && Main.recipe[Main._currentRecipeBeingCrafted].createItem.maxStack == 1;
				bool flag5 = flag6 || flag4;
				if (flag2 && !flag5 && flag3 && Main.stackSplit <= 1)
				{
					bool usingGamepad = PlayerInput.UsingGamepad;
					bool movedAnItemToAllowCrafting;
					bool flag7 = Main.TryAllowingToCraftRecipe(recipe, usingGamepad, out movedAnItemToAllowCrafting);
					if (movedAnItemToAllowCrafting)
					{
						Main._preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
					}
					if (flag7 && !movedAnItemToAllowCrafting)
					{
						if (Main._currentRecipeBeingCrafted == -1)
						{
							Main._currentRecipeBeingCrafted = Main.availableRecipe[recipeIndex];
						}
						ItemSlot.RefreshStackSplitCooldown();
						Main.CraftItem(recipe);
					}
				}
			}
			else if (flag)
			{
				Main.focusRecipe = recipeIndex;
				Main.stackSplit = 15;
				Main._preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
			}
			Main.craftingHide = true;
			Main.HoverItem = recipe.createItem.Clone();
			ItemSlot.MouseHover(22);
			Main.hoverItemName = recipe.createItem.Name;
			if (recipe.createItem.stack > 1)
			{
				Main.hoverItemName = Main.hoverItemName + " (" + recipe.createItem.stack.ToString() + ")";
			}
			if (!flag2)
			{
				Main._preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = false;
				Main._currentRecipeBeingCrafted = -1;
			}
		}

		// Token: 0x060004F5 RID: 1269 RVA: 0x001019F0 File Offset: 0x000FFBF0
		private static bool TryAllowingToCraftRecipe(Recipe currentRecipe, bool tryFittingItemInInventoryToAllowCrafting, out bool movedAnItemToAllowCrafting)
		{
			movedAnItemToAllowCrafting = false;
			if (Main.mouseItem.IsAir)
			{
				return true;
			}
			if (Main.mouseItem.maxStack > 1 && Main.mouseItem.AllowReforgeForStackableItem && Main.mouseItem.prefix > 0)
			{
				return false;
			}
			if (Main.mouseItem.IsTheSameAs(currentRecipe.createItem) && Main.mouseItem.stack + currentRecipe.createItem.stack <= Main.mouseItem.maxStack)
			{
				return true;
			}
			if (tryFittingItemInInventoryToAllowCrafting && Main.LocalPlayer.ItemSpace(Main.mouseItem).CanTakeItemToPersonalInventory)
			{
				Main.mouseItem = Main.LocalPlayer.GetItem(Main.myPlayer, Main.mouseItem, GetItemSettings.InventoryUIToInventorySettingsShowAsNew);
				if (Main.mouseItem.IsAir)
				{
					movedAnItemToAllowCrafting = true;
					return true;
				}
				if (Main.mouseItem.IsTheSameAs(currentRecipe.createItem) && Main.mouseItem.stack + currentRecipe.createItem.stack <= Main.mouseItem.maxStack)
				{
					movedAnItemToAllowCrafting = true;
					return true;
				}
			}
			return false;
		}

		// Token: 0x060004F6 RID: 1270 RVA: 0x00101AF4 File Offset: 0x000FFCF4
		private static void DrawTrashItemSlot(int pivotTopLeftX, int pivotTopLeftY)
		{
			Main.inventoryScale = 0.85f;
			int num = 448 + pivotTopLeftX;
			int num2 = 258 + pivotTopLeftY;
			if ((Main.player[Main.myPlayer].chest != -1 || Main.npcShop > 0) && !Main.recBigList)
			{
				num2 += 168;
				Main.inventoryScale = 0.755f;
				num += 5;
			}
			else if ((Main.player[Main.myPlayer].chest == -1 || Main.npcShop == -1) && Main.trashSlotOffset != Point16.Zero)
			{
				num += (int)Main.trashSlotOffset.X;
				num2 += (int)Main.trashSlotOffset.Y;
				Main.inventoryScale = 0.755f;
			}
			new Color(150, 150, 150, 150);
			if (Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * Main.inventoryScale && Main.mouseY >= num2 && (float)Main.mouseY <= (float)num2 + (float)TextureAssets.InventoryBack.Height() * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				ItemSlot.LeftClick(ref Main.player[Main.myPlayer].trashItem, 6);
				if (Main.mouseLeftRelease && Main.mouseLeft)
				{
					Recipe.FindRecipes(false);
				}
				ItemSlot.MouseHover(ref Main.player[Main.myPlayer].trashItem, 6);
			}
			ItemSlot.Draw(Main.spriteBatch, ref Main.player[Main.myPlayer].trashItem, 6, new Vector2((float)num, (float)num2), default(Color));
		}

		// Token: 0x060004F7 RID: 1271 RVA: 0x00101C90 File Offset: 0x000FFE90
		private static void DrawEmoteBubblesButton(int pivotTopLeftX, int pivotTopLeftY)
		{
			Main.inventoryScale = 0.85f;
			int num = (int)((float)(450 + pivotTopLeftX) - 56f * Main.inventoryScale);
			int num2 = 258 + pivotTopLeftY;
			int num3 = 244;
			int width = 30;
			int num4 = 30;
			num = 534;
			num2 = num3 + num4 + 4;
			if ((Main.player[Main.myPlayer].chest != -1 || Main.npcShop > 0) && !Main.recBigList)
			{
				num2 += 168;
				Main.inventoryScale = 0.755f;
				num += 5;
				num3 += 24;
			}
			if (Main.editChest)
			{
				num2 += 24;
			}
			Rectangle rectangle;
			rectangle..ctor(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * Main.inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * Main.inventoryScale));
			rectangle..ctor(num, num2, width, num4);
			bool flag = false;
			if (rectangle.Contains(new Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				flag = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.player[Main.myPlayer].SetTalkNPC(-1, false);
					Main.npcChatCornerItem = 0;
					Main.npcChatText = "";
					Main.mouseLeftRelease = false;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					IngameFancyUI.OpenUIState(new UIEmotesMenu());
				}
			}
			Texture2D value = TextureAssets.EmoteMenuButton.Value;
			Vector2 position = rectangle.Center.ToVector2();
			Rectangle rectangle2 = value.Frame(2, 1, (flag > false) ? 1 : 0, 0, 0, 0);
			rectangle2.Width -= 2;
			rectangle2.Height -= 2;
			Vector2 origin = rectangle2.Size() / 2f;
			Color white = Color.White;
			Main.spriteBatch.Draw(value, position, new Rectangle?(rectangle2), white, 0f, origin, 1f, 0, 0f);
			UILinkPointNavigator.SetPosition(309, position);
			if (!Main.mouseText && flag)
			{
				Main.instance.MouseText(Language.GetTextValue("GameUI.Emote"), 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x060004F8 RID: 1272 RVA: 0x00101EA8 File Offset: 0x001000A8
		private static void DrawBestiaryIcon(int pivotTopLeftX, int pivotTopLeftY)
		{
			Main.inventoryScale = 0.85f;
			int num = (int)((float)(450 + pivotTopLeftX) - 56f * Main.inventoryScale * 2f);
			int num2 = 258 + pivotTopLeftY;
			int width = 30;
			int num3 = 30;
			int num4 = 244;
			num = 498;
			num2 = num4 + num3 + 4;
			if ((Main.player[Main.myPlayer].chest != -1 || Main.npcShop > 0) && !Main.recBigList)
			{
				num2 += 168;
				Main.inventoryScale = 0.755f;
				num += 5;
				num4 += 24;
			}
			if (Main.editChest)
			{
				num2 += 24;
			}
			Rectangle rectangle;
			rectangle..ctor(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * Main.inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * Main.inventoryScale));
			rectangle..ctor(num, num2, width, num3);
			bool flag = false;
			if (rectangle.Contains(new Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				flag = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.player[Main.myPlayer].SetTalkNPC(-1, false);
					Main.npcChatCornerItem = 0;
					Main.npcChatText = "";
					Main.mouseLeftRelease = false;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					IngameFancyUI.OpenUIState(Main.BestiaryUI);
					Main.BestiaryUI.OnOpenPage();
				}
			}
			Texture2D value = TextureAssets.BestiaryMenuButton.Value;
			Vector2 position = rectangle.Center.ToVector2();
			Rectangle rectangle2 = value.Frame(2, 1, (flag > false) ? 1 : 0, 0, 0, 0);
			rectangle2.Width -= 2;
			rectangle2.Height -= 2;
			Vector2 origin = rectangle2.Size() / 2f;
			Color white = Color.White;
			Main.spriteBatch.Draw(value, position, new Rectangle?(rectangle2), white, 0f, origin, 1f, 0, 0f);
			UILinkPointNavigator.SetPosition(310, position);
			if (!Main.mouseText && flag)
			{
				Main.instance.MouseText(Language.GetTextValue("GameUI.Bestiary"), 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x060004F9 RID: 1273 RVA: 0x001020D8 File Offset: 0x001002D8
		private static void SetRecipeMaterialDisplayName(int i)
		{
			Main.HoverItem = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].Clone();
			ItemSlot.MouseHover(22);
			Main.hoverItemName = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].Name;
			string theText;
			if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].ProcessGroupsForText(Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type, out theText))
			{
				Main.HoverItem.SetNameOverride(theText);
			}
			if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyIronBar && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type == 22)
			{
				Main.HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(22));
			}
			else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyWood && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type == 9)
			{
				Main.HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(9));
			}
			else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anySand && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type == 169)
			{
				Main.HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(169));
			}
			else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyFragment && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type == 3458)
			{
				Main.HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[51].Value);
			}
			else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyPressurePlate && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].type == 542)
			{
				Main.HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[38].Value);
			}
			if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].stack > 1)
			{
				Main.hoverItemName = Main.hoverItemName + " (" + Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[i].stack.ToString() + ")";
			}
		}

		// Token: 0x060004FA RID: 1274 RVA: 0x00102404 File Offset: 0x00100604
		private void DrawHotbarLockIcon(int pivotTopLeftX, int pivotTopLeftY, bool pushSideToolsUp)
		{
			int num = 21 + pivotTopLeftY;
			Player player = Main.player[Main.myPlayer];
			if (pushSideToolsUp)
			{
				num = pivotTopLeftY;
			}
			float num2 = 0.9f;
			Texture2D value = TextureAssets.HbLock[(!Main.player[Main.myPlayer].hbLocked) ? 1 : 0].Value;
			Rectangle value2 = value.Frame(2, 1, 0, 0, 0, 0);
			bool flag = false;
			if (Main.mouseX > pivotTopLeftX && (float)Main.mouseX < (float)pivotTopLeftX + (float)value2.Width * num2 && Main.mouseY > num && (float)Main.mouseY < (float)num + (float)value2.Height * num2)
			{
				flag = true;
				Main.player[Main.myPlayer].mouseInterface = true;
				if (!Main.player[Main.myPlayer].hbLocked)
				{
					this.MouseText(Lang.inter[5].Value, 0, 0, -1, -1, -1, -1, 0);
				}
				else
				{
					this.MouseText(Lang.inter[6].Value, 0, 0, -1, -1, -1, -1, 0);
				}
				Main.mouseText = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					SoundEngine.PlaySound(22, -1, -1, 1, 1f, 0f);
					Main.player[Main.myPlayer].hbLocked = !Main.player[Main.myPlayer].hbLocked;
				}
			}
			Main.spriteBatch.Draw(value, new Vector2((float)pivotTopLeftX, (float)num), new Rectangle?(value2), Color.White, 0f, default(Vector2), num2, 0, 0f);
			if (flag)
			{
				Main.spriteBatch.Draw(value, new Vector2((float)pivotTopLeftX, (float)num), new Rectangle?(value.Frame(2, 1, 1, 0, 0, 0)), Main.OurFavoriteColor, 0f, default(Vector2), num2, 0, 0f);
			}
		}

		// Token: 0x060004FB RID: 1275 RVA: 0x001025C0 File Offset: 0x001007C0
		public static void CraftItem(Recipe r)
		{
			if (Main.mouseItem.stack > 0 && !ItemLoader.CanStack(Main.mouseItem, r.createItem))
			{
				return;
			}
			Item crafted = r.createItem.Clone();
			crafted.Prefix(-1);
			r.Create();
			RecipeLoader.OnCraft(crafted, r, Main.mouseItem);
			if (Main.mouseItem.stack > 0)
			{
				int num;
				ItemLoader.StackItems(Main.mouseItem, crafted, out num, false, null);
			}
			else
			{
				Main.mouseItem = crafted;
			}
			Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
			Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
			PopupText.NewText(PopupTextContext.ItemCraft, Main.mouseItem, r.createItem.stack, false, false);
			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
			{
				SoundEngine.PlaySound(7, -1, -1, 1, 1f, 0f);
			}
		}

		// Token: 0x060004FC RID: 1276 RVA: 0x00102714 File Offset: 0x00100914
		private static void DrawPVPIcons()
		{
			if (Main.EquipPage == 1)
			{
				if (Main.hidePVPIcons)
				{
					return;
				}
			}
			else
			{
				Main.hidePVPIcons = false;
			}
			Main.inventoryScale = 0.6f;
			int num = (int)(52f * Main.inventoryScale);
			int num2 = 707 - num * 4 + Main.screenWidth - 800;
			int num3 = 114 + Main.mH + num * 2 + num / 2 - 12;
			if (Main.EquipPage == 2)
			{
				num2 += num + num / 2;
			}
			int num4 = Main.player[Main.myPlayer].hostile ? 2 : 0;
			if (Main.mouseX > num2 - 7 && Main.mouseX < num2 + 25 && Main.mouseY > num3 - 2 && Main.mouseY < num3 + 37 && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.teamCooldown == 0)
				{
					num4++;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease && Main.teamCooldown == 0)
				{
					Main.teamCooldown = Main.teamCooldownLen;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.player[Main.myPlayer].hostile = !Main.player[Main.myPlayer].hostile;
					NetMessage.SendData(30, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			Rectangle rectangle = TextureAssets.Pvp[0].Frame(4, 6, 0, 0, 0, 0);
			rectangle.Location = new Point(rectangle.Width * num4, rectangle.Height * Main.player[Main.myPlayer].team);
			rectangle.Width -= 2;
			rectangle.Height--;
			Main.spriteBatch.Draw(TextureAssets.Pvp[0].Value, new Vector2((float)(num2 - 10), (float)num3), new Rectangle?(rectangle), Color.White, 0f, Vector2.Zero, Vector2.One, 0, 0f);
			UILinkPointNavigator.SetPosition(1550, new Vector2((float)(num2 - 10), (float)num3) + rectangle.Size() * 0.75f);
			num3 += 60;
			num2 -= 10;
			rectangle = TextureAssets.Pvp[1].Frame(6, 1, 0, 0, 0, 0);
			Rectangle r = rectangle;
			for (int i = 0; i < 6; i++)
			{
				r.Location = new Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
				rectangle.X = rectangle.Width * i;
				bool flag = false;
				if (r.Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.teamCooldown == 0)
					{
						flag = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease && Main.player[Main.myPlayer].team != i && Main.teamCooldown == 0)
					{
						if (!Main.player[Main.myPlayer].TeamChangeAllowed())
						{
							Main.NewText(Lang.misc[84].Value, byte.MaxValue, 240, 20);
						}
						else
						{
							Main.teamCooldown = Main.teamCooldownLen;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.player[Main.myPlayer].team = i;
							NetMessage.SendData(45, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				r.Width = rectangle.Width - 2;
				if (flag)
				{
					Main.spriteBatch.Draw(TextureAssets.Pvp[2].Value, r.Location.ToVector2() + new Vector2(-2f), Color.White);
				}
				Rectangle value = rectangle;
				value.Width -= 2;
				Main.spriteBatch.Draw(TextureAssets.Pvp[1].Value, r.Location.ToVector2(), new Rectangle?(value), Color.White);
				UILinkPointNavigator.SetPosition(1550 + i + 1, r.Location.ToVector2() + r.Size() * 0.75f);
			}
		}

		// Token: 0x060004FD RID: 1277 RVA: 0x00102B54 File Offset: 0x00100D54
		private static int DrawPageIcons(int yPos)
		{
			int num = -1;
			Vector2 vector;
			vector..ctor((float)(Main.screenWidth - 162), (float)yPos);
			vector.X += 82f;
			Texture2D value = TextureAssets.EquipPage[(Main.EquipPage == 2) ? 3 : 2].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && (Main.mouseItem.stack < 1 || Main.mouseItem.dye > 0))
			{
				num = 2;
			}
			if (num == 2)
			{
				Main.spriteBatch.Draw(TextureAssets.EquipPage[6].Value, vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, 0, 0f);
			}
			Main.spriteBatch.Draw(value, vector, null, Color.White, 0f, Vector2.Zero, 0.9f, 0, 0f);
			UILinkPointNavigator.SetPosition(305, vector + value.Size() * 0.75f);
			vector.X -= 48f;
			value = TextureAssets.EquipPage[(Main.EquipPage == 1) ? 5 : 4].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 1;
			}
			if (num == 1)
			{
				Main.spriteBatch.Draw(TextureAssets.EquipPage[7].Value, vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, 0, 0f);
			}
			Main.spriteBatch.Draw(value, vector, null, Color.White, 0f, Vector2.Zero, 0.9f, 0, 0f);
			UILinkPointNavigator.SetPosition(306, vector + value.Size() * 0.75f);
			vector.X -= 48f;
			value = TextureAssets.EquipPage[(Main.EquipPage == 3) ? 10 : 8].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 3;
			}
			if (num == 3 && !Main.CaptureModeDisabled)
			{
				Main.spriteBatch.Draw(TextureAssets.EquipPage[9].Value, vector, null, Main.OurFavoriteColor, 0f, Vector2.Zero, 0.9f, 0, 0f);
			}
			Main.spriteBatch.Draw(value, vector, null, Main.CaptureModeDisabled ? Color.Red : Color.White, 0f, Vector2.Zero, 0.9f, 0, 0f);
			UILinkPointNavigator.SetPosition(307, vector + value.Size() * 0.75f);
			if (num != -1)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					bool flag = true;
					if (num == 3)
					{
						if (Main.CaptureModeDisabled)
						{
							flag = false;
						}
						else if (PlayerInput.UsingGamepad)
						{
							CaptureInterface.QuickScreenshot();
						}
						else
						{
							CaptureManager.Instance.Active = true;
							Main.blockMouse = true;
						}
					}
					else if (Main.EquipPageSelected != num)
					{
						Main.EquipPageSelected = num;
					}
					else
					{
						Main.EquipPageSelected = 0;
					}
					if (flag)
					{
						SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
					}
				}
			}
			ItemSlot.SelectEquipPage(Main.mouseItem);
			if (Main.EquipPage == -1)
			{
				Main.EquipPage = Main.EquipPageSelected;
			}
			return num;
		}

		// Token: 0x060004FE RID: 1278 RVA: 0x00102F04 File Offset: 0x00101104
		public void DrawMouseOver()
		{
			PlayerInput.SetZoom_Unscaled();
			PlayerInput.SetZoom_MouseInWorld();
			Rectangle mouseRectangle;
			mouseRectangle..ctor((int)((float)Main.mouseX + Main.screenPosition.X), (int)((float)Main.mouseY + Main.screenPosition.Y), 1, 1);
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				mouseRectangle.Y = (int)Main.screenPosition.Y + Main.screenHeight - Main.mouseY;
			}
			PlayerInput.SetZoom_UI();
			if (!Main.LocalPlayer.ghost)
			{
				Main.ResourceSetsManager.TryToHoverOverResources();
			}
			Main.AchievementAdvisor.DrawMouseHover();
			IngameOptions.MouseOver();
			IngameFancyUI.MouseOver();
			if (!Main.mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (Main.item[i].active)
					{
						Rectangle drawHitbox = Item.GetDrawHitbox(Main.item[i].type, null);
						Vector2 bottom = Main.item[i].Bottom;
						Rectangle value;
						value..ctor((int)(bottom.X - (float)drawHitbox.Width * 0.5f), (int)(bottom.Y - (float)drawHitbox.Height), drawHitbox.Width, drawHitbox.Height);
						if (mouseRectangle.Intersects(value))
						{
							Main.player[Main.myPlayer].cursorItemIconEnabled = false;
							string text = Main.item[i].AffixName();
							if (Main.item[i].stack > 1)
							{
								text = text + " (" + Main.item[i].stack.ToString() + ")";
							}
							if (Main.item[i].playerIndexTheItemIsReservedFor < 255 && Main.showItemOwner)
							{
								text = text + " <" + Main.player[Main.item[i].playerIndexTheItemIsReservedFor].name + ">";
							}
							Main.rare = Main.item[i].rare;
							if (Main.item[i].expert)
							{
								Main.rare = -12;
							}
							if (Main.item[i].master)
							{
								Main.rare = -13;
							}
							this.MouseTextHackZoom(text, Main.rare, 0, null);
							Main.mouseText = true;
							break;
						}
					}
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.myPlayer != j && !Main.player[j].dead && !Main.player[j].ShouldNotDraw && (double)Main.player[j].stealth > 0.5)
				{
					Rectangle value2;
					value2..ctor((int)((double)Main.player[j].position.X + (double)Main.player[j].width * 0.5 - 16.0), (int)(Main.player[j].position.Y + (float)Main.player[j].height - 48f), 32, 48);
					if (!Main.mouseText && mouseRectangle.Intersects(value2))
					{
						Main.player[Main.myPlayer].cursorItemIconEnabled = false;
						int num = Main.player[j].statLife;
						if (num < 0)
						{
							num = 0;
						}
						string text2 = string.Concat(new string[]
						{
							Main.player[j].name,
							": ",
							num.ToString(),
							"/",
							Main.player[j].statLifeMax2.ToString()
						});
						if (Main.player[j].hostile)
						{
							text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
						}
						this.MouseTextHackZoom(text2, 0, Main.player[j].difficulty, null);
						Main.mouseText = true;
					}
				}
			}
			Main.HoveringOverAnNPC = false;
			if (!Main.mouseText)
			{
				this.HoverOverNPCs(mouseRectangle);
			}
			if (!Main.mouseText && Main.signHover != -1 && Main.sign[Main.signHover] != null && !Main.player[Main.myPlayer].mouseInterface && !string.IsNullOrWhiteSpace(Main.sign[Main.signHover].text))
			{
				int lineAmount;
				string[] array = Utils.WordwrapString(Main.sign[Main.signHover].text, FontAssets.MouseText.Value, 460, 10, out lineAmount);
				lineAmount++;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, null, null, null, null, null, Main._uiScaleMatrix);
				PlayerInput.SetZoom_UI();
				int num2 = Main.screenWidth;
				int num3 = Main.screenHeight;
				int num4 = Main.mouseX;
				int num5 = Main.mouseY;
				PlayerInput.SetZoom_UI();
				PlayerInput.SetZoom_Test();
				float num6 = 0f;
				for (int k = 0; k < lineAmount; k++)
				{
					float x = FontAssets.MouseText.Value.MeasureString(array[k]).X;
					if (num6 < x)
					{
						num6 = x;
					}
				}
				if (num6 > 460f)
				{
					num6 = 460f;
				}
				bool settingsEnabled_OpaqueBoxBehindTooltips = Main.SettingsEnabled_OpaqueBoxBehindTooltips;
				Vector2 vector = new Vector2((float)num4, (float)num5) + new Vector2(16f);
				if (settingsEnabled_OpaqueBoxBehindTooltips)
				{
					vector += new Vector2(8f, 2f);
				}
				if (vector.Y > (float)(num3 - 30 * lineAmount))
				{
					vector.Y = (float)(num3 - 30 * lineAmount);
				}
				if (vector.X > (float)num2 - num6)
				{
					vector.X = (float)num2 - num6;
				}
				Color color;
				color..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				if (settingsEnabled_OpaqueBoxBehindTooltips)
				{
					color = Color.Lerp(color, Color.White, 1f);
					int num7 = 10;
					int num8 = 5;
					Utils.DrawInvBG(Main.spriteBatch, new Rectangle((int)vector.X - num7, (int)vector.Y - num8, (int)num6 + num7 * 2, 30 * lineAmount + num8 + num8 / 2), new Color(23, 25, 81, 255) * 0.925f * 0.85f);
				}
				for (int l = 0; l < lineAmount; l++)
				{
					Utils.DrawBorderStringFourWay(Main.spriteBatch, FontAssets.MouseText.Value, array[l], vector.X, vector.Y + (float)(l * 30), color, Color.Black, Vector2.Zero, 1f);
				}
				Main.mouseText = true;
			}
			PlayerInput.SetZoom_UI();
		}

		// Token: 0x060004FF RID: 1279 RVA: 0x00103578 File Offset: 0x00101778
		private void HoverOverNPCs(Rectangle mouseRectangle)
		{
			Player player = Main.player[Main.myPlayer];
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.ShowNameOnHover && (nPC.active & (nPC.shimmerTransparency == 0f || nPC.CanApplyHunterPotionEffects())))
				{
					int type = nPC.type;
					this.LoadNPC(type);
					nPC.position += nPC.netOffset;
					Rectangle value;
					value..ctor((int)nPC.Bottom.X - nPC.frame.Width / 2, (int)nPC.Bottom.Y - nPC.frame.Height, nPC.frame.Width, nPC.frame.Height);
					if (nPC.type >= 87 && nPC.type <= 92)
					{
						value..ctor((int)((double)nPC.position.X + (double)nPC.width * 0.5 - 32.0), (int)((double)nPC.position.Y + (double)nPC.height * 0.5 - 32.0), 64, 64);
					}
					NPCLoader.ModifyHoverBoundingBox(nPC, ref value);
					bool flag = mouseRectangle.Intersects(value);
					bool flag2 = flag || (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == i);
					if (flag2 && ((nPC.type != 85 && nPC.type != 341 && nPC.type != 629 && nPC.aiStyle != 87) || nPC.ai[0] != 0f) && nPC.type != 488)
					{
						if (nPC.type == 685)
						{
							player.cursorItemIconEnabled = true;
							player.cursorItemIconID = 327;
							player.cursorItemIconText = "";
							player.noThrow = 2;
							if (!player.dead)
							{
								PlayerInput.SetZoom_MouseInWorld();
								if (Main.mouseRight && Main.npcChatRelease)
								{
									Main.npcChatRelease = false;
									if (PlayerInput.UsingGamepad)
									{
										player.releaseInventory = false;
									}
									if (player.talkNPC != i && !player.tileInteractionHappened && Main.TryFreeingElderSlime(i))
									{
										NPC.TransformElderSlime(i);
										SoundEngine.PlaySound(22, -1, -1, 1, 1f, 0f);
									}
								}
							}
						}
						else
						{
							bool flag3 = Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == i;
							bool vanillaCanChat = false;
							if (nPC.townNPC || nPC.type == 105 || nPC.type == 106 || nPC.type == 123 || nPC.type == 354 || nPC.type == 376 || nPC.type == 579 || nPC.type == 453 || nPC.type == 589)
							{
								vanillaCanChat = true;
							}
							if (NPCLoader.CanChat(nPC).GetValueOrDefault(vanillaCanChat))
							{
								Rectangle rectangle;
								rectangle..ctor((int)(player.position.X + (float)(player.width / 2) - (float)(Player.tileRangeX * 16)), (int)(player.position.Y + (float)(player.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
								Rectangle value2;
								value2..ctor((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height);
								if (rectangle.Intersects(value2))
								{
									flag3 = true;
								}
							}
							if (player.ownedProjectileCounts[651] > 0)
							{
								flag3 = false;
							}
							if (flag3 && !player.dead)
							{
								PlayerInput.SetZoom_MouseInWorld();
								Main.HoveringOverAnNPC = true;
								this.currentNPCShowingChatBubble = i;
								if (Main.mouseRight && Main.npcChatRelease)
								{
									Main.npcChatRelease = false;
									if (PlayerInput.UsingGamepad)
									{
										player.releaseInventory = false;
									}
									if (player.talkNPC != i && !player.tileInteractionHappened)
									{
										Main.CancelHairWindow();
										Main.SetNPCShopIndex(0);
										Main.InGuideCraftMenu = false;
										player.dropItemCheck();
										Main.npcChatCornerItem = 0;
										player.sign = -1;
										Main.editSign = false;
										player.SetTalkNPC(i, false);
										Main.playerInventory = false;
										player.chest = -1;
										Recipe.FindRecipes(false);
										Main.npcChatText = nPC.GetChat();
										SoundEngine.PlaySound(24, -1, -1, 1, 1f, 0f);
									}
								}
							}
							if (flag && !player.mouseInterface)
							{
								player.cursorItemIconEnabled = false;
								string text = nPC.GivenOrTypeName;
								int num = i;
								if (nPC.realLife >= 0)
								{
									num = nPC.realLife;
								}
								if (Main.npc[num].lifeMax > 1 && !Main.npc[num].dontTakeDamage)
								{
									text = string.Concat(new string[]
									{
										text,
										": ",
										Main.npc[num].life.ToString(),
										"/",
										Main.npc[num].lifeMax.ToString()
									});
								}
								this.MouseTextHackZoom(text, null);
								Main.mouseText = true;
								nPC.position -= nPC.netOffset;
								return;
							}
							if (flag2)
							{
								nPC.position -= nPC.netOffset;
								return;
							}
						}
					}
					nPC.position -= nPC.netOffset;
				}
			}
		}

		// Token: 0x06000500 RID: 1280 RVA: 0x00103AF0 File Offset: 0x00101CF0
		private static bool TryFreeingElderSlime(int npcIndex)
		{
			Player player = Main.player[Main.myPlayer];
			short type = 327;
			bool inVoidBag = false;
			int num = player.FindItemInInventoryOrOpenVoidBag((int)type, out inVoidBag);
			if (num == -1)
			{
				return false;
			}
			Item item = (!inVoidBag) ? player.inventory[num] : player.bank4.item[num];
			Item item2 = item;
			int num2 = item2.stack - 1;
			item2.stack = num2;
			if (num2 <= 0)
			{
				item.TurnToAir(false);
			}
			Recipe.FindRecipes(false);
			return true;
		}

		// Token: 0x06000501 RID: 1281 RVA: 0x00103B68 File Offset: 0x00101D68
		private static void DrawNPCChatBubble(int i)
		{
			int num = -(Main.npc[i].width / 2 + 8);
			float num2 = Main.npc[i].position.Y - (float)TextureAssets.Chat.Height() - (float)((int)Main.screenPosition.Y);
			if (Main.npc[i].type == 637 && Main.npc[i].ai[0] == 5f)
			{
				num2 -= 18f;
			}
			SpriteEffects spriteEffects = 0;
			if (Main.npc[i].spriteDirection == -1)
			{
				spriteEffects = 1;
				num = Main.npc[i].width / 2 + 8;
			}
			if (Main.player[Main.myPlayer].gravDir != 1f)
			{
				spriteEffects |= 2;
				num2 = (float)Main.screenHeight - num2 - (float)TextureAssets.Chat.Height();
			}
			Vector2 position;
			position..ctor(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - Main.screenPosition.X - (float)(TextureAssets.Chat.Width() / 2) - (float)num, num2);
			NPCLoader.ChatBubblePosition(Main.npc[i], ref position, ref spriteEffects);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, null, SamplerState.PointClamp, null, null, null, Main.GameViewMatrix.ZoomMatrix);
			PlayerInput.SetZoom_UI();
			Main.spriteBatch.Draw(TextureAssets.Chat.Value, position, new Rectangle?(new Rectangle(0, 0, TextureAssets.Chat.Width(), TextureAssets.Chat.Height())), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, null, null, null, null, null, Main._uiScaleMatrix);
		}

		// Token: 0x06000502 RID: 1282 RVA: 0x00103D40 File Offset: 0x00101F40
		public void GUIBarsDraw()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.GUIBarsDrawInner();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.GUIBarsDrawInner();
		}

		// Token: 0x06000503 RID: 1283 RVA: 0x00103D7C File Offset: 0x00101F7C
		protected void GUIBarsDrawInner()
		{
			Main.ResourceSetsManager.Draw();
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
			Main.DrawInterface_Resources_Breath();
			Main.DrawInterface_Resources_ClearBuffs();
			if (!Main.ingameOptionsWindow && !Main.playerInventory && !Main.inFancyUI)
			{
				this.DrawInterface_Resources_Buffs();
			}
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, null, null, null, null, null, Main.UIScaleMatrix);
		}

		// Token: 0x06000504 RID: 1284 RVA: 0x00103E06 File Offset: 0x00102006
		public static void DrawInterface_Resources_ClearBuffs()
		{
			Main.buffString = "";
			Main.bannerMouseOver = false;
			if (!Main.recBigList)
			{
				Main.recStart = 0;
			}
		}

		// Token: 0x06000505 RID: 1285 RVA: 0x00103E28 File Offset: 0x00102028
		public void DrawInterface_Resources_Buffs()
		{
			Main.recBigList = false;
			int num = -1;
			int num2 = 11;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (Main.player[Main.myPlayer].buffType[i] > 0)
				{
					int num6 = Main.player[Main.myPlayer].buffType[i];
					int x = 32 + i * 38;
					int num3 = 76;
					int num4 = i;
					while (num4 >= num2)
					{
						num4 -= num2;
						x = 32 + num4 * 38;
						num3 += 50;
					}
					num = Main.DrawBuffIcon(num, i, x, num3);
				}
				else
				{
					Main.buffAlpha[i] = 0.4f;
				}
			}
			if (num < 0)
			{
				return;
			}
			int num5 = Main.player[Main.myPlayer].buffType[num];
			if (num5 > 0)
			{
				string buffName = Lang.GetBuffName(num5);
				string buffTooltip = Main.GetBuffTooltip(Main.player[Main.myPlayer], num5);
				if (num5 == 147)
				{
					Main.bannerMouseOver = true;
				}
				int rare = 0;
				if (Main.meleeBuff[num5])
				{
					rare = -10;
				}
				BuffLoader.ModifyBuffText(num5, ref buffName, ref buffTooltip, ref rare);
				this.MouseTextHackZoom(buffName, rare, 0, buffTooltip);
			}
		}

		// Token: 0x06000506 RID: 1286 RVA: 0x00103F30 File Offset: 0x00102130
		public static string GetBuffTooltip(Player player, int buffType)
		{
			string text = Lang.GetBuffDescription(buffType);
			if (buffType <= 94)
			{
				if (buffType != 26)
				{
					if (buffType == 94)
					{
						text = text + ((int)(player.manaSickReduction * 100f) + 1).ToString() + "%";
					}
				}
				else if (Main.expertMode)
				{
					text = Language.GetTextValue("BuffDescription.WellFed_Expert");
				}
			}
			else if (buffType != 206)
			{
				if (buffType == 207)
				{
					if (Main.expertMode)
					{
						text = Language.GetTextValue("BuffDescription.WellFed3_Expert");
					}
				}
			}
			else if (Main.expertMode)
			{
				text = Language.GetTextValue("BuffDescription.WellFed2_Expert");
			}
			return text;
		}

		/// <summary>
		/// Checks if the buff at index <paramref name="buffSlotOnPlayer" /> is allowed to draw a "remaining time" text, and sets <paramref name="buffTimeValue" /> to it.
		/// <para>Check <paramref name="buffTimeValue" /> &gt; 2 afterwards if you want to mirror text draw logic.</para>
		/// </summary>
		/// <param name="buffSlotOnPlayer">The index for buffType and buffTime</param>
		/// <param name="buffTimeValue">The "remaining time" in ticks</param>
		/// <returns><see langword="true" /> if <paramref name="buffTimeValue" /> is set, otherwise <see langword="false" /></returns>
		// Token: 0x06000507 RID: 1287 RVA: 0x00103FC8 File Offset: 0x001021C8
		public static bool TryGetBuffTime(int buffSlotOnPlayer, out int buffTimeValue)
		{
			int num = Main.player[Main.myPlayer].buffType[buffSlotOnPlayer];
			buffTimeValue = 0;
			if (!Main.vanityPet[num] && !Main.lightPet[num] && !Main.buffNoTimeDisplay[num] && (!Main.player[Main.myPlayer].honeyWet || num != 48) && (!Main.player[Main.myPlayer].wet || !Main.expertMode || num != 46))
			{
				buffTimeValue = Main.player[Main.myPlayer].buffTime[buffSlotOnPlayer];
				return true;
			}
			return false;
		}

		/// <summary>
		/// Draws the buff icon corresponding to the buff in Main.LocalPlayer.buffType[<paramref name="buffSlotOnPlayer" />].
		/// <para>Calls TML hooks related to drawing and clicking.</para>
		/// <para>Has two exclusive contexts: Below the accessory slots (Main.EquipPage == 2), and regular under-the-inventory.</para>
		/// </summary>
		/// <param name="drawBuffText">The return from a previous DrawBuffIcon call, -1 if first drawn buff</param>
		/// <param name="buffSlotOnPlayer">The index for buffType and buffTime</param>
		/// <param name="x">Top-left draw position on the x-axis</param>
		/// <param name="y">Top-left draw position on the y-axis</param>
		/// <returns>The index of the currently mouseovered buff icon, equal to <paramref name="buffSlotOnPlayer" /> if it's currently mouseovered, -1 otherwise</returns>
		// Token: 0x06000508 RID: 1288 RVA: 0x00104054 File Offset: 0x00102254
		public static int DrawBuffIcon(int drawBuffText, int buffSlotOnPlayer, int x, int y)
		{
			int num = Main.player[Main.myPlayer].buffType[buffSlotOnPlayer];
			if (num == 0)
			{
				return drawBuffText;
			}
			Color color;
			color..ctor(Main.buffAlpha[buffSlotOnPlayer], Main.buffAlpha[buffSlotOnPlayer], Main.buffAlpha[buffSlotOnPlayer], Main.buffAlpha[buffSlotOnPlayer]);
			Asset<Texture2D> asset = TextureAssets.Buff[num];
			Texture2D texture = asset.Value;
			Vector2 drawPosition;
			drawPosition..ctor((float)x, (float)y);
			int width = asset.Width();
			int height = asset.Height();
			Vector2 textPosition;
			textPosition..ctor((float)x, (float)(y + height));
			Rectangle sourceRectangle;
			sourceRectangle..ctor(0, 0, width, height);
			Rectangle mouseRectangle;
			mouseRectangle..ctor(x, y, width, height);
			Color drawColor = color;
			BuffDrawParams drawParams = new BuffDrawParams(texture, drawPosition, textPosition, sourceRectangle, mouseRectangle, drawColor);
			bool flag2 = !BuffLoader.PreDraw(Main.spriteBatch, num, buffSlotOnPlayer, ref drawParams);
			BuffDrawParams buffDrawParams = drawParams;
			Texture2D texture2D;
			Vector2 vector;
			Vector2 vector2;
			Rectangle rectangle;
			Rectangle rectangle2;
			Color color2;
			buffDrawParams.Deconstruct(out texture2D, out vector, out vector2, out rectangle, out rectangle2, out color2);
			texture = texture2D;
			drawPosition = vector;
			textPosition = vector2;
			sourceRectangle = rectangle;
			mouseRectangle = rectangle2;
			drawColor = color2;
			if (!flag2)
			{
				SpriteBatch spriteBatch = Main.spriteBatch;
				Texture2D texture2D2 = texture;
				Vector2 vector3 = drawPosition;
				Rectangle? rectangle3 = new Rectangle?(sourceRectangle);
				Color color3 = drawColor;
				float num2 = 0f;
				vector2 = default(Vector2);
				spriteBatch.Draw(texture2D2, vector3, rectangle3, color3, num2, vector2, 1f, 0, 0f);
			}
			BuffLoader.PostDraw(Main.spriteBatch, num, buffSlotOnPlayer, drawParams);
			int buffTimeValue;
			if (Main.TryGetBuffTime(buffSlotOnPlayer, out buffTimeValue) && buffTimeValue > 2)
			{
				string text = Lang.LocalizedDuration(new TimeSpan(0, 0, buffTimeValue / 60), true, false);
				SpriteBatch spriteBatch2 = Main.spriteBatch;
				DynamicSpriteFont value = FontAssets.ItemStack.Value;
				string text2 = text;
				Vector2 vector4 = textPosition;
				Color color4 = color;
				float num3 = 0f;
				vector2 = default(Vector2);
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch2, value, text2, vector4, color4, num3, vector2, 0.8f, 0, 0f);
			}
			if (mouseRectangle.Contains(new Point(Main.mouseX, Main.mouseY)))
			{
				drawBuffText = buffSlotOnPlayer;
				Main.buffAlpha[buffSlotOnPlayer] += 0.1f;
				bool flag = Main.mouseRight && Main.mouseRightRelease;
				if (PlayerInput.UsingGamepad)
				{
					flag = (Main.mouseLeft && Main.mouseLeftRelease && Main.playerInventory);
					if (Main.playerInventory)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
					}
				}
				else
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				if (flag)
				{
					flag &= BuffLoader.RightClick(num, buffSlotOnPlayer);
				}
				if (flag)
				{
					Main.TryRemovingBuff(buffSlotOnPlayer, num);
				}
			}
			else
			{
				Main.buffAlpha[buffSlotOnPlayer] -= 0.05f;
			}
			if (Main.buffAlpha[buffSlotOnPlayer] > 1f)
			{
				Main.buffAlpha[buffSlotOnPlayer] = 1f;
			}
			else if ((double)Main.buffAlpha[buffSlotOnPlayer] < 0.4)
			{
				Main.buffAlpha[buffSlotOnPlayer] = 0.4f;
			}
			if (PlayerInput.UsingGamepad && !Main.playerInventory)
			{
				drawBuffText = -1;
			}
			return drawBuffText;
		}

		/// <summary>
		/// Calls Player.DelBuff with index i after checking Main.debuff of buff type b. Will toggle Player.hideMisc for pet and light pet.
		/// </summary>
		/// <param name="i">The index for buffType and buffTime</param>
		/// <param name="b">The buff type</param>
		// Token: 0x06000509 RID: 1289 RVA: 0x001042E0 File Offset: 0x001024E0
		public static void TryRemovingBuff(int i, int b)
		{
			bool flag = false;
			if (!Main.debuff[b] && b != 60 && b != 151)
			{
				if (Main.player[Main.myPlayer].mount.Active && Main.player[Main.myPlayer].mount.CheckBuff(b))
				{
					Main.player[Main.myPlayer].mount.Dismount(Main.player[Main.myPlayer]);
					flag = true;
				}
				Main.TryRemovingBuff_CheckBuffHideMisc(0, b);
				Main.TryRemovingBuff_CheckBuffHideMisc(1, b);
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				if (!flag)
				{
					Main.player[Main.myPlayer].DelBuff(i);
				}
			}
		}

		// Token: 0x0600050A RID: 1290 RVA: 0x00104398 File Offset: 0x00102598
		public static void TryRemovingBuff_CheckBuffHideMisc(int slot, int buffID)
		{
			if (!Main.player[Main.myPlayer].hideMisc[slot])
			{
				bool flag = Main.player[Main.myPlayer].miscEquips[slot].buffType == buffID;
				if (!flag && (buffID == 102 || buffID == 101))
				{
					flag = (Main.player[Main.myPlayer].miscEquips[slot].buffType == 27);
				}
				if (flag)
				{
					Main.player[Main.myPlayer].hideMisc[slot] = true;
				}
			}
		}

		// Token: 0x0600050B RID: 1291 RVA: 0x0010441C File Offset: 0x0010261C
		private static void DrawInterface_Resources_Breath()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].dead)
			{
				return;
			}
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].lavaWet)
			{
				flag = true;
			}
			else if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].breath == Main.player[Main.myPlayer].breathMax)
			{
				flag = true;
			}
			Vector2 vector = Main.player[Main.myPlayer].Top + new Vector2(0f, Main.player[Main.myPlayer].gfxOffY);
			if (Main.playerInventory && Main.screenHeight < 1000)
			{
				vector.Y += (float)(Main.player[Main.myPlayer].height - 20);
			}
			vector = Vector2.Transform(vector - Main.screenPosition, Main.GameViewMatrix.ZoomMatrix);
			if (!Main.playerInventory || Main.screenHeight >= 1000)
			{
				vector.Y -= 100f;
			}
			vector /= Main.UIScale;
			if (Main.ingameOptionsWindow || Main.InGameUI.IsVisible)
			{
				vector..ctor((float)(Main.screenWidth / 2), (float)(Main.screenHeight / 2 + 236));
				if (Main.InGameUI.IsVisible)
				{
					vector.Y = (float)(Main.screenHeight - 64);
				}
			}
			if (Main.player[Main.myPlayer].breath < Main.player[Main.myPlayer].breathMax && !Main.player[Main.myPlayer].ghost && !flag)
			{
				int num13 = Main.player[Main.myPlayer].breathMax / 20;
				int num = 20;
				for (int i = 1; i < Main.player[Main.myPlayer].breathMax / num + 1; i++)
				{
					float num2 = 1f;
					int num3;
					if (Main.player[Main.myPlayer].breath >= i * num)
					{
						num3 = 255;
					}
					else
					{
						float num4 = (float)(Main.player[Main.myPlayer].breath - (i - 1) * num) / (float)num;
						num3 = (int)(30f + 225f * num4);
						if (num3 < 30)
						{
							num3 = 30;
						}
						num2 = num4 / 4f + 0.75f;
						if ((double)num2 < 0.75)
						{
							num2 = 0.75f;
						}
					}
					int num5 = 0;
					int num6 = 0;
					if (i > 10)
					{
						num5 -= 260;
						num6 += 26;
					}
					Main.spriteBatch.Draw(TextureAssets.Bubble.Value, vector + new Vector2((float)(26 * (i - 1) + num5) - 125f, 32f + ((float)TextureAssets.Bubble.Height() - (float)TextureAssets.Bubble.Height() * num2) / 2f + (float)num6), new Rectangle?(new Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height())), new Color(num3, num3, num3, num3), 0f, default(Vector2), num2, 0, 0f);
				}
			}
			if (Main.player[Main.myPlayer].lavaTime >= Main.player[Main.myPlayer].lavaMax || Main.player[Main.myPlayer].ghost || !flag)
			{
				return;
			}
			int num7 = Main.player[Main.myPlayer].lavaMax / 10;
			int num14 = Main.player[Main.myPlayer].breathMax / num7;
			for (int j = 1; j < Main.player[Main.myPlayer].lavaMax / num7 + 1; j++)
			{
				float num8 = 1f;
				int num9;
				if (Main.player[Main.myPlayer].lavaTime >= j * num7)
				{
					num9 = 255;
				}
				else
				{
					float num10 = (float)(Main.player[Main.myPlayer].lavaTime - (j - 1) * num7) / (float)num7;
					num9 = (int)(30f + 225f * num10);
					if (num9 < 30)
					{
						num9 = 30;
					}
					num8 = num10 / 4f + 0.75f;
					if ((double)num8 < 0.75)
					{
						num8 = 0.75f;
					}
				}
				int num11 = 0;
				int num12 = 0;
				if (j > 10)
				{
					num11 -= 260;
					num12 += 26;
				}
				Main.spriteBatch.Draw(TextureAssets.Flame.Value, vector + new Vector2((float)(26 * (j - 1) + num11) - 125f, 32f + ((float)TextureAssets.Flame.Height() - (float)TextureAssets.Flame.Height() * num8) / 2f + (float)num12), new Rectangle?(new Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height())), new Color(num9, num9, num9, num9), 0f, default(Vector2), num8, 0, 0f);
			}
		}

		// Token: 0x0600050C RID: 1292 RVA: 0x0010494C File Offset: 0x00102B4C
		private static void DrawInterface_Resources_GolfPower()
		{
			Projectile projectile = null;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile2 = Main.projectile[i];
				if (projectile2.active && projectile2.owner == Main.myPlayer && projectile2.type == 722)
				{
					projectile = projectile2;
					break;
				}
			}
			if (projectile == null)
			{
				return;
			}
			Projectile projectile3 = GolfHelper.FindGolfBallForHelper(projectile);
			if (projectile3 != null)
			{
				float relativeStrength = GolfHelper.CalculateShotStrength(projectile, projectile3).RelativeStrength;
				if (relativeStrength >= 0.001f)
				{
					Vector2 position = Main.LocalPlayer.Bottom - Main.Camera.ScaledPosition;
					position *= Main.GameViewMatrix.Zoom;
					position /= Main.UIScale;
					position.X -= 27f;
					position.Y += 14f;
					Main.spriteBatch.Draw(TextureAssets.GolfSwingBarPanel.Value, position, null, Color.White);
					Main.spriteBatch.Draw(TextureAssets.GolfSwingBarFill.Value, position, new Rectangle?(new Rectangle(0, 0, (int)(54f * relativeStrength), 14)), Color.White);
				}
			}
		}

		// Token: 0x0600050D RID: 1293 RVA: 0x00104A78 File Offset: 0x00102C78
		private static void DrawInterface_GolfBallIndicator()
		{
			if (!Item.IsAGolfingItem(Main.LocalPlayer.HeldItem))
			{
				return;
			}
			Projectile lastHitBall = Main.LocalGolfState.GetLastHitBall();
			if (lastHitBall != null && GolfHelper.IsGolfBallResting(lastHitBall))
			{
				Vector2 vector = lastHitBall.Top - Main.Camera.ScaledPosition;
				vector *= Main.GameViewMatrix.Zoom;
				vector /= Main.UIScale;
				float num = MathHelper.Clamp(((Main.LocalPlayer.position - lastHitBall.position).Length() - 150f) / 50f, 0f, 1f);
				Vector2 vector2 = Vector2.Clamp(vector, new Vector2(20f), Main.Camera.UnscaledSize - new Vector2(20f));
				float num2 = 0f;
				if (vector2 != vector)
				{
					num2 = (vector2 - vector).ToRotation() + 1.5707964f;
				}
				vector2 -= (num2 + 1.5707964f).ToRotationVector2() * (((float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 4f)) * 0.5f + 0.5f) * 5f + 14f);
				Texture2D value = TextureAssets.GolfBallArrow.Value;
				Rectangle rectangle = value.Frame(2, 1, 0, 0, 0, 0);
				Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
				Rectangle value2 = value.Frame(2, 1, 1, 0, 0, 0);
				Main.spriteBatch.Draw(TextureAssets.GolfBallArrowShadow.Value, vector2 + new Vector2(-4f, 4f) * 1.5f, new Rectangle?(rectangle), Color.White * num, num2, origin, 1.5f, 0, 0f);
				float amount = (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 4f)) * 0.5f + 0.5f;
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					Main.spriteBatch.Draw(value, vector2 + (6.2831855f * num3 + num2).ToRotationVector2() * MathHelper.Lerp(2f, 2f, amount), new Rectangle?(value2), Color.Black * num * MathHelper.Lerp(1f, 1f, amount), num2, origin, 1.5f, 0, 0f);
				}
				for (float num4 = 0f; num4 < 1f; num4 += 0.25f)
				{
					Main.spriteBatch.Draw(value, vector2 + (6.2831855f * num4 + num2).ToRotationVector2() * MathHelper.Lerp(0f, 0f, amount), new Rectangle?(value2), Color.White * num * MathHelper.Lerp(0.8f, 0.8f, amount), num2, origin, 1.5f, 0, 0f);
				}
				Main.spriteBatch.Draw(value, vector2, new Rectangle?(rectangle), Main.mouseColor * num, num2, origin, 1.5f, 0, 0f);
			}
		}

		// Token: 0x0600050E RID: 1294 RVA: 0x00104DB8 File Offset: 0x00102FB8
		protected void GUIHotbarDrawInner()
		{
			if (Main.playerInventory || Main.player[Main.myPlayer].ghost)
			{
				return;
			}
			string text = Lang.inter[37].Value;
			if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].Name != null && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].Name != "")
			{
				text = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].AffixName();
			}
			Vector2 vector;
			vector..ctor(236f - (FontAssets.MouseText.Value.MeasureString(text) / 2f).X, 0f);
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, vector, new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, 0, 0f);
			int num = 20;
			for (int i = 0; i < 10; i++)
			{
				if (i == Main.player[Main.myPlayer].selectedItem)
				{
					if (Main.hotbarScale[i] < 1f)
					{
						Main.hotbarScale[i] += 0.05f;
					}
				}
				else if ((double)Main.hotbarScale[i] > 0.75)
				{
					Main.hotbarScale[i] -= 0.05f;
				}
				float num2 = Main.hotbarScale[i];
				int num3 = (int)(20f + 22f * (1f - num2));
				int a = (int)(75f + 150f * num2);
				Color lightColor;
				lightColor..ctor(255, 255, 255, a);
				if (!Main.player[Main.myPlayer].hbLocked && !PlayerInput.IgnoreMouseInterface && Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * Main.hotbarScale[i] && Main.mouseY >= num3 && (float)Main.mouseY <= (float)num3 + (float)TextureAssets.InventoryBack.Height() * Main.hotbarScale[i] && !Main.player[Main.myPlayer].channel)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					Main.player[Main.myPlayer].cursorItemIconEnabled = false;
					if (Main.mouseLeft && !Main.player[Main.myPlayer].hbLocked && !Main.blockMouse)
					{
						Main.player[Main.myPlayer].changeItem = i;
					}
					Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
					if (Main.player[Main.myPlayer].inventory[i].stack > 1)
					{
						Main.hoverItemName = Main.hoverItemName + " (" + Main.player[Main.myPlayer].inventory[i].stack.ToString() + ")";
					}
					Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
				}
				float num6 = Main.inventoryScale;
				Main.inventoryScale = num2;
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
				Main.inventoryScale = num6;
				num += (int)((float)TextureAssets.InventoryBack.Width() * Main.hotbarScale[i]) + 4;
			}
			int selectedItem = Main.player[Main.myPlayer].selectedItem;
			if (selectedItem >= 10 && (selectedItem != 58 || Main.mouseItem.type > 0))
			{
				float num4 = 1f;
				int num5 = (int)(20f + 22f * (1f - num4));
				int a2 = (int)(75f + 150f * num4);
				Color lightColor2;
				lightColor2..ctor(255, 255, 255, a2);
				float num7 = Main.inventoryScale;
				Main.inventoryScale = num4;
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, selectedItem, new Vector2((float)num, (float)num5), lightColor2);
				Main.inventoryScale = num7;
			}
		}

		// Token: 0x0600050F RID: 1295 RVA: 0x00105224 File Offset: 0x00103424
		public static void OpenHairWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.oldHairStyle = Main.player[Main.myPlayer].hair;
			Main.oldHairColor = Main.player[Main.myPlayer].hairColor;
			Main.hairWindow = true;
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
		}

		// Token: 0x06000510 RID: 1296 RVA: 0x001052A4 File Offset: 0x001034A4
		public static void CancelHairWindow()
		{
			if (Main.hairWindow)
			{
				Main.player[Main.myPlayer].hair = Main.oldHairStyle;
				Main.player[Main.myPlayer].hairColor = Main.oldHairColor;
				Main.hairWindow = false;
				if (Main.player[Main.myPlayer].talkNPC > -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
				{
					Main.player[Main.myPlayer].SetTalkNPC(-1, false);
				}
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
		}

		// Token: 0x06000511 RID: 1297 RVA: 0x00105348 File Offset: 0x00103548
		public static void BuyHairWindow()
		{
			SoundEngine.PlaySound(18, -1, -1, 1, 1f, 0f);
			Main.hairWindow = false;
			Main.player[Main.myPlayer].SetTalkNPC(-1, false);
			Main.npcChatCornerItem = 0;
			NetMessage.SendData(4, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		// Token: 0x06000512 RID: 1298 RVA: 0x001053A8 File Offset: 0x001035A8
		public static int UnlockedMaxHair()
		{
			int num = 154;
			if (NPC.downedMartians)
			{
				num += 10;
			}
			if (NPC.downedMartians && NPC.downedMoonlord)
			{
				num++;
			}
			return num;
		}

		// Token: 0x06000513 RID: 1299 RVA: 0x001053DC File Offset: 0x001035DC
		protected void DrawHairWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InGuideCraftMenu)
			{
				Main.CancelHairWindow();
				return;
			}
			if (!Main.hairstylesUpdatedForThisInteraction)
			{
				Main.hairstylesUpdatedForThisInteraction = true;
				Main.Hairstyles.UpdateUnlocks();
			}
			int count = Main.Hairstyles.AvailableHairstyles.Count;
			int num = Main.screenHeight / 2 + 60;
			int num2 = Main.screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2;
			int num3 = num + 42;
			int num4 = num2 + 22;
			int num5 = num2 + 234;
			int num6 = num + 18;
			Main.selColor = Main.player[Main.myPlayer].hairColor;
			Main.spriteBatch.Draw(TextureAssets.HairStyleBack.Value, new Vector2((float)num2, (float)num), new Rectangle?(new Rectangle(0, 0, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
			if (new Rectangle(num2, num, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(Main.MouseScreen.ToPoint()))
			{
				int num7 = PlayerInput.ScrollWheelDelta / 120;
				num7 = -num7;
				int num8 = Math.Sign(num7);
				while (num7 != 0)
				{
					if (num7 < 0)
					{
						Main.hairStart -= 5;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					else
					{
						Main.hairStart += 5;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					num7 -= num8;
				}
			}
			if (Main.mouseX > num2 && Main.mouseX < num2 + TextureAssets.HairStyleBack.Width() && Main.mouseY > num && Main.mouseY < num + TextureAssets.HairStyleBack.Height())
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num9 = num5 - 18;
			int num10 = num6 + 74;
			if (Main.hairStart > 1)
			{
				if (Main.mouseX >= num9 && Main.mouseX <= num9 + TextureAssets.CraftUpButton.Width() && Main.mouseY >= num10 && Main.mouseY <= num10 + TextureAssets.CraftUpButton.Height())
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart -= 15;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
				Main.spriteBatch.Draw(TextureAssets.ScrollLeftButton.Value, new Vector2((float)num9, (float)num10), new Rectangle?(new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
			}
			if (Main.hairStart + 15 < count)
			{
				num9 += 296;
				if (Main.mouseX >= num9 && Main.mouseX <= num9 + TextureAssets.CraftUpButton.Width() && Main.mouseY >= num10 && Main.mouseY <= num10 + TextureAssets.CraftUpButton.Height())
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart += 15;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
				Main.spriteBatch.Draw(TextureAssets.ScrollRightButton.Value, new Vector2((float)num9, (float)num10), new Rectangle?(new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
			}
			if (Main.hairStart + 15 >= count)
			{
				Main.hairStart = count - 15;
			}
			if (Main.hairStart < 0)
			{
				Main.hairStart = 0;
			}
			int num11 = 0;
			if (Main.oldHairStyle != Main.player[Main.myPlayer].hair)
			{
				num11 += 100000;
			}
			if (Main.oldHairColor != Main.player[Main.myPlayer].hairColor)
			{
				num11 += 20000;
			}
			num11 = (int)((double)num11 * Main.player[Main.myPlayer].currentShoppingSettings.PriceAdjustment);
			num11 = (int)Math.Round((double)((float)num11 / 10000f)) * 10000;
			string text2 = "";
			int num12 = 0;
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = num11;
			if (num16 < 0)
			{
				num16 = 0;
			}
			num11 = num16;
			if (num16 >= 1000000)
			{
				num12 = num16 / 1000000;
				num16 -= num12 * 1000000;
			}
			if (num16 >= 10000)
			{
				num13 = num16 / 10000;
				num16 -= num13 * 10000;
			}
			if (num16 >= 100)
			{
				num14 = num16 / 100;
				num16 -= num14 * 100;
			}
			if (num16 >= 1)
			{
				num15 = num16;
			}
			if (num12 > 0)
			{
				text2 = string.Concat(new string[]
				{
					text2,
					num12.ToString(),
					" ",
					Lang.inter[15].Value,
					" "
				});
			}
			if (num13 > 0)
			{
				text2 = string.Concat(new string[]
				{
					text2,
					num13.ToString(),
					" ",
					Lang.inter[16].Value,
					" "
				});
			}
			if (num14 > 0)
			{
				text2 = string.Concat(new string[]
				{
					text2,
					num14.ToString(),
					" ",
					Lang.inter[17].Value,
					" "
				});
			}
			if (num15 > 0)
			{
				text2 = string.Concat(new string[]
				{
					text2,
					num15.ToString(),
					" ",
					Lang.inter[18].Value,
					" "
				});
			}
			string text3 = Language.GetTextValue("GameUI.BuyWithValue", text2);
			if (num11 == 0)
			{
				text3 = Language.GetTextValue("GameUI.Buy");
			}
			int num17 = (int)((Main.mouseTextColor * 2 + byte.MaxValue) / 3);
			Color color;
			color..ctor(num17, (int)((double)num17 / 1.1), num17 / 2, num17);
			float scale = 0.9f;
			string text4 = text3;
			int num18 = num2 + 18;
			int num19 = num + 156;
			bool flag = false;
			if (num11 > 0)
			{
				ItemSlot.DrawSavings(Main.spriteBatch, (float)num18, (float)(num19 - 70), true);
			}
			if (num11 > 0 && Main.mouseX > num18 && (float)Main.mouseX < (float)num18 + FontAssets.MouseText.Value.MeasureString(text4).X && Main.mouseY > num19 && (float)Main.mouseY < (float)num19 + FontAssets.MouseText.Value.MeasureString(text4).Y)
			{
				flag = true;
				scale = 1.1f;
				if (!Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = false;
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(text4);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2603, new Vector2((float)num18, (float)num19) + vector);
			for (int i = 0; i < 5; i++)
			{
				int num20 = num18;
				int num21 = num19;
				Color color2 = Color.Black;
				if (flag)
				{
					color2 = Color.Brown;
				}
				if (i == 0)
				{
					num20 -= 2;
				}
				if (i == 1)
				{
					num20 += 2;
				}
				if (i == 2)
				{
					num21 -= 2;
				}
				if (i == 3)
				{
					num21 += 2;
				}
				if (i == 4)
				{
					color2 = ((num11 != 0) ? color : new Color(100, 100, 100));
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text4, new Vector2((float)num20 + vector.X, (float)num21 + vector.Y), color2, 0f, vector, scale, 0, 0f);
			}
			scale = 0.9f;
			string textValue = Language.GetTextValue("GameUI.Cancel");
			num18 += 130;
			flag = false;
			if (Main.mouseX > num18 && (float)Main.mouseX < (float)num18 + FontAssets.MouseText.Value.MeasureString(textValue).X && Main.mouseY > num19 && (float)Main.mouseY < (float)num19 + FontAssets.MouseText.Value.MeasureString(textValue).Y)
			{
				flag = true;
				scale = 1.1f;
				if (!Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = false;
			}
			vector = FontAssets.MouseText.Value.MeasureString(textValue);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2604, new Vector2((float)num18, (float)num19) + vector);
			for (int j = 0; j < 5; j++)
			{
				int num22 = num18;
				int num23 = num19;
				Color color3 = Color.Black;
				if (flag)
				{
					color3 = Color.Brown;
				}
				if (j == 0)
				{
					num22 -= 2;
				}
				if (j == 1)
				{
					num22 += 2;
				}
				if (j == 2)
				{
					num23 -= 2;
				}
				if (j == 3)
				{
					num23 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)num22 + vector.X, (float)num23 + vector.Y), color3, 0f, vector, scale, 0, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					if (Main.player[Main.myPlayer].BuyItem((long)num11, -1))
					{
						Main.BuyHairWindow();
						return;
					}
				}
				else if (Main.npcChatFocus2)
				{
					Main.CancelHairWindow();
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num24 = 167;
			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
			float num25 = vector3.X;
			float num26 = vector3.Y;
			float z = vector3.Z;
			float num27 = (float)Main.selColor.A / 255f;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f || Main.aBar == -1f)
			{
				Main.hBar = num25;
				Main.sBar = num26;
				Main.lBar = z;
				Main.aBar = (float)Main.selColor.A / 255f;
			}
			else
			{
				num25 = Main.hBar;
				num26 = Main.sBar;
				z = Main.lBar;
				Main.aBar = num27;
			}
			UILinkPointNavigator.SetPosition(2600, new Vector2((float)num4, (float)num3) + TextureAssets.Hue.Value.Size() / 2f);
			Main.spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num4, (float)num3), Color.White);
			if ((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 1)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num4, (float)num3), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * Main.hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num25 = (float)(Main.mouseX - num4);
				num25 /= (float)TextureAssets.Hue.Width();
				if (num25 < 0f)
				{
					num25 = 0f;
				}
				if (num25 > 1f)
				{
					num25 = 1f;
				}
				Main.hBar = num25;
			}
			num3 += 26;
			UILinkPointNavigator.SetPosition(2601, new Vector2((float)num4, (float)num3) + TextureAssets.ColorBar.Value.Size() / 2f);
			Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num4, (float)num3), Color.White);
			for (int k = 0; k <= num24; k++)
			{
				float saturation = (float)k / (float)num24;
				Color color4 = Main.hslToRgb(num25, saturation, z, byte.MaxValue);
				Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num4 + k + 5), (float)(num3 + 4)), color4);
			}
			if ((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 2)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num4, (float)num3), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * Main.sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num26 = (float)(Main.mouseX - num4);
				num26 /= (float)TextureAssets.Hue.Width();
				if (num26 < 0f)
				{
					num26 = 0f;
				}
				if (num26 > 1f)
				{
					num26 = 1f;
				}
				Main.sBar = num26;
			}
			num3 += 26;
			UILinkPointNavigator.SetPosition(2602, new Vector2((float)num4, (float)num3) + TextureAssets.ColorBar.Value.Size() / 2f);
			Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num4, (float)num3), Color.White);
			float num28 = 0.15f;
			for (int l = 0; l <= num24; l++)
			{
				float luminosity = (float)l / (float)num24;
				Color color5 = Main.hslToRgb(num25, num26, luminosity, byte.MaxValue);
				Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num4 + l + 5), (float)(num3 + 4)), color5);
			}
			if ((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 3)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num4, (float)num3), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * ((Main.lBar - num28) / (1f - num28)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				z = (float)(Main.mouseX - num4);
				z /= (float)TextureAssets.Hue.Width();
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = z * (1f - num28) + num28;
				Main.lBar = z;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar, byte.MaxValue);
			Main.player[Main.myPlayer].hairColor = Main.selColor;
			int num29 = num5;
			int num30 = num6;
			int num34 = Main.hairStart;
			int num31 = 0;
			int num32 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num33 = Main.Hairstyles.AvailableHairstyles[Main.hairStart + m];
				UILinkPointNavigator.SetPosition(2605 + m, new Vector2((float)num29, (float)num30) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
				if (Main.player[Main.myPlayer].hair == num33)
				{
					Main.spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2((float)num29, (float)num30), new Rectangle?(new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2((float)num29, (float)num30), new Rectangle?(new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.mouseX > num29 && Main.mouseX < num29 + TextureAssets.InventoryBack.Width() && Main.mouseY > num30 && Main.mouseY < num30 + TextureAssets.InventoryBack.Height())
				{
					Asset<Texture2D> asset = Main.Assets.Request<Texture2D>("Images/UI/PanelBorder");
					Utils.DrawSplicedPanel(Main.spriteBatch, asset.Value, num29, num30, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height(), asset.Width() / 2 - 1, asset.Width() / 2 - 1, asset.Height() / 2 - 1, asset.Height() / 2 - 1, Main.OurFavoriteColor);
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.mouseLeftRelease = false;
						Main.player[Main.myPlayer].hair = num33;
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
				this.LoadHair(num33);
				float x = (float)(num29 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.PlayerHair[num33].Width() / 2);
				float y = (float)(num30 + 4);
				Main.spriteBatch.Draw(TextureAssets.Players[num31, 0].Value, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, TextureAssets.PlayerHair[num33].Width(), 56)), Main.player[Main.myPlayer].skinColor, 0f, default(Vector2), 1f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.Players[num31, 1].Value, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, TextureAssets.PlayerHair[num33].Width(), 56)), new Color(255, 255, 255, 255), 0f, default(Vector2), 1f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.Players[num31, 2].Value, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, TextureAssets.PlayerHair[num33].Width(), 56)), Main.player[Main.myPlayer].eyeColor, 0f, default(Vector2), 1f, 0, 0f);
				Vector2 vector2 = Main.player[Main.myPlayer].GetHairDrawOffset(num33, false) * Main.player[Main.myPlayer].Directions;
				Main.spriteBatch.Draw(TextureAssets.PlayerHair[num33].Value, new Vector2(x, y) + vector2, new Rectangle?(new Rectangle(0, 0, TextureAssets.PlayerHair[num33].Width(), 56)), Main.selColor, 0f, default(Vector2), 1f, 0, 0f);
				num32++;
				num29 += 56;
				if (num32 >= 5)
				{
					num32 = 0;
					num29 = num5;
					num30 += 56;
				}
			}
		}

		// Token: 0x06000514 RID: 1300 RVA: 0x00106A04 File Offset: 0x00104C04
		public static void OpenClothesWindow()
		{
			if (Main.clothesWindow)
			{
				Main.CancelClothesWindow(false);
				return;
			}
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.clothesWindow = true;
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			Main.selClothes = 0;
			Main.oldClothesColor[0] = Main.player[Main.myPlayer].shirtColor;
			Main.oldClothesColor[1] = Main.player[Main.myPlayer].underShirtColor;
			Main.oldClothesColor[2] = Main.player[Main.myPlayer].pantsColor;
			Main.oldClothesColor[3] = Main.player[Main.myPlayer].shoeColor;
			Main.oldClothesColor[4] = Main.player[Main.myPlayer].eyeColor;
			Main.oldClothesColor[5] = Main.player[Main.myPlayer].skinColor;
			if (Main.dresserInterfaceDummy == null)
			{
				Main.dresserInterfaceDummy = new Player();
			}
			Main.oldClothesStyle = Main.player[Main.myPlayer].skinVariant;
		}

		// Token: 0x06000515 RID: 1301 RVA: 0x00106B38 File Offset: 0x00104D38
		public static void CancelClothesWindow(bool quiet = false)
		{
			if (Main.clothesWindow)
			{
				Main.clothesWindow = false;
				if (!quiet)
				{
					SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
				}
				Main.player[Main.myPlayer].shirtColor = Main.oldClothesColor[0];
				Main.player[Main.myPlayer].underShirtColor = Main.oldClothesColor[1];
				Main.player[Main.myPlayer].pantsColor = Main.oldClothesColor[2];
				Main.player[Main.myPlayer].shoeColor = Main.oldClothesColor[3];
				Main.player[Main.myPlayer].eyeColor = Main.oldClothesColor[4];
				Main.player[Main.myPlayer].skinColor = Main.oldClothesColor[5];
				Main.dresserInterfaceDummy.skinVariant = Main.oldClothesStyle;
				Main.dresserInterfaceDummy.Male = Main.player[Main.myPlayer].Male;
				Main.player[Main.myPlayer].skinVariant = Main.dresserInterfaceDummy.skinVariant;
			}
		}

		// Token: 0x06000516 RID: 1302 RVA: 0x00106C54 File Offset: 0x00104E54
		public static void SaveClothesWindow()
		{
			SoundEngine.PlaySound(7, -1, -1, 1, 1f, 0f);
			Main.clothesWindow = false;
			NetMessage.SendData(4, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		// Token: 0x06000517 RID: 1303 RVA: 0x00106C9C File Offset: 0x00104E9C
		protected void DrawClothesWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC != -1 || Main.InGuideCraftMenu)
			{
				Main.CancelClothesWindow(false);
				return;
			}
			if (!Main.LocalPlayer.IsInInteractionRangeToMultiTileHitbox(Main.interactedDresserTopLeftX, Main.interactedDresserTopLeftY) || !Main.tile[Main.interactedDresserTopLeftX, Main.interactedDresserTopLeftY].active())
			{
				Main.CancelClothesWindow(false);
				return;
			}
			int num = 477;
			int num2 = num / 2;
			num2 = 180;
			num = 511;
			num -= num / 2 - num2 - 26;
			int num3 = Main.screenHeight / 2 + 60;
			int num4 = Main.screenWidth / 2 - num / 2;
			int num5 = num3 + 32;
			int num6 = num4 + 22;
			num5 -= 16;
			int num7 = num4 + num - num2;
			int num8 = num3 + 18;
			if (Main.selClothes == 0)
			{
				Main.selColor = Main.player[Main.myPlayer].shirtColor;
			}
			if (Main.selClothes == 1)
			{
				Main.selColor = Main.player[Main.myPlayer].underShirtColor;
			}
			if (Main.selClothes == 2)
			{
				Main.selColor = Main.player[Main.myPlayer].pantsColor;
			}
			if (Main.selClothes == 3)
			{
				Main.selColor = Main.player[Main.myPlayer].shoeColor;
			}
			if (Main.selClothes == 4)
			{
				Main.selColor = Main.player[Main.myPlayer].eyeColor;
			}
			if (Main.selClothes == 5)
			{
				Main.selColor = Main.player[Main.myPlayer].skinColor;
			}
			Utils.DrawInvBG(Main.spriteBatch, new Rectangle(num4, num3, num, 133), default(Color));
			if (!PlayerInput.IgnoreMouseInterface && Main.mouseX > num4 && Main.mouseX < num4 + TextureAssets.ClothesStyleBack.Width() && Main.mouseY > num3 && Main.mouseY < num3 + TextureAssets.ClothesStyleBack.Height())
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			Vector2 vector;
			vector..ctor((float)(num4 + num / 2 - 16 - 28), (float)(num3 + 66 + Main.dresserInterfaceDummy.height / 2 - 20));
			vector.Y += 18f;
			vector.X += 58f;
			Rectangle r;
			r..ctor((int)vector.X - Main.dresserInterfaceDummy.width / 2 - 15, (int)vector.Y - Main.dresserInterfaceDummy.height - 33, Main.dresserInterfaceDummy.width + 30, Main.dresserInterfaceDummy.height + 66);
			bool flag = r.Contains(Main.MouseScreen.ToPoint());
			int num9 = Main.selClothes;
			int num10 = (int)((Main.mouseTextColor * 2 + byte.MaxValue) / 3);
			Color color;
			color..ctor(num10, (int)((double)num10 / 1.1), num10 / 2, num10);
			float num11 = 0.9f;
			string textValue = Language.GetTextValue("GameUI.Change");
			int num12 = num4 + num - num2 + 22;
			num12 = num4 + 22;
			int num13 = num3 + 94;
			bool flag2 = false;
			if (Main.oldClothesColor[0] != Main.player[Main.myPlayer].shirtColor || Main.oldClothesColor[1] != Main.player[Main.myPlayer].underShirtColor || Main.oldClothesColor[2] != Main.player[Main.myPlayer].pantsColor || Main.oldClothesColor[3] != Main.player[Main.myPlayer].shoeColor || Main.oldClothesColor[4] != Main.player[Main.myPlayer].eyeColor || Main.oldClothesColor[5] != Main.player[Main.myPlayer].skinColor || Main.oldClothesStyle != Main.player[Main.myPlayer].skinVariant)
			{
				flag2 = true;
			}
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(textValue);
			bool flag3 = false;
			UILinkPointNavigator.SetPosition(2803, new Vector2((float)num12, (float)num13) + vector2 * num11 * 0.5f);
			if (flag2 && Main.mouseX > num12 && (float)Main.mouseX < (float)num12 + vector2.X && Main.mouseY > num13 && (float)Main.mouseY < (float)num13 + vector2.Y)
			{
				flag3 = true;
				num11 = 1.1f;
				if (!Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num14 = num12;
				int num15 = num13;
				Color color2 = Color.Black;
				if (flag3)
				{
					color2 = Color.Brown;
				}
				if (i == 0)
				{
					num14 -= 2;
				}
				if (i == 1)
				{
					num14 += 2;
				}
				if (i == 2)
				{
					num15 -= 2;
				}
				if (i == 3)
				{
					num15 += 2;
				}
				if (i == 4)
				{
					color2 = (flag2 ? color : new Color(100, 100, 100));
				}
				Vector2 origin = FontAssets.MouseText.Value.MeasureString(textValue);
				origin *= 0.5f;
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)num14 + origin.X, (float)num15 + origin.Y), color2, 0f, origin, num11, 0, 0f);
			}
			num11 = 0.9f;
			string textValue2 = Language.GetTextValue("GameUI.Cancel");
			num12 += 130;
			bool flag4 = false;
			vector2 = FontAssets.MouseText.Value.MeasureString(textValue2);
			UILinkPointNavigator.SetPosition(2804, new Vector2((float)num12, (float)num13) + vector2 * num11 * 0.5f);
			if (Main.mouseX > num12 && (float)Main.mouseX < (float)num12 + vector2.X && Main.mouseY > num13 && (float)Main.mouseY < (float)num13 + vector2.Y)
			{
				flag4 = true;
				num11 = 1.1f;
				if (!Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num16 = num12;
				int num17 = num13;
				Color color3 = Color.Black;
				if (flag4)
				{
					color3 = Color.Brown;
				}
				if (j == 0)
				{
					num16 -= 2;
				}
				if (j == 1)
				{
					num16 += 2;
				}
				if (j == 2)
				{
					num17 -= 2;
				}
				if (j == 3)
				{
					num17 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(textValue2);
				origin2 *= 0.5f;
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, textValue2, new Vector2((float)num16 + origin2.X, (float)num17 + origin2.Y), color3, 0f, origin2, num11, 0, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					Main.SaveClothesWindow();
					return;
				}
				if (Main.npcChatFocus2)
				{
					Main.CancelClothesWindow(false);
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num18 = 167;
			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
			float num19 = vector3.X;
			float num20 = vector3.Y;
			float z = vector3.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = num19;
				Main.sBar = num20;
				Main.lBar = z;
			}
			else
			{
				num19 = Main.hBar;
				num20 = Main.sBar;
				z = Main.lBar;
			}
			Main.spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num6, (float)num5), Color.White);
			if ((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 1)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num6, (float)num5), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * Main.hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num19 = (float)(Main.mouseX - num6);
				num19 /= (float)TextureAssets.Hue.Width();
				if (num19 < 0f)
				{
					num19 = 0f;
				}
				if (num19 > 1f)
				{
					num19 = 1f;
				}
				Main.hBar = num19;
			}
			UILinkPointNavigator.SetPosition(2800, new Vector2((float)num6, (float)num5) + TextureAssets.Hue.Value.Size() / 2f);
			num5 += 26;
			Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num6, (float)num5), Color.White);
			for (int k = 0; k <= num18; k++)
			{
				float saturation = (float)k / (float)num18;
				Color color4 = Main.hslToRgb(num19, saturation, z, byte.MaxValue);
				Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num6 + k + 5), (float)(num5 + 4)), color4);
			}
			if ((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 2)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num6, (float)num5), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * Main.sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num20 = (float)(Main.mouseX - num6);
				num20 /= (float)TextureAssets.Hue.Width();
				if (num20 < 0f)
				{
					num20 = 0f;
				}
				if (num20 > 1f)
				{
					num20 = 1f;
				}
				Main.sBar = num20;
			}
			UILinkPointNavigator.SetPosition(2801, new Vector2((float)num6, (float)num5) + TextureAssets.Hue.Value.Size() / 2f);
			num5 += 26;
			Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num6, (float)num5), Color.White);
			float num21 = 0.15f;
			for (int l = 0; l <= num18; l++)
			{
				float luminosity = (float)l / (float)num18;
				Color color5 = Main.hslToRgb(num19, num20, luminosity, byte.MaxValue);
				Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num6 + l + 5), (float)(num5 + 4)), color5);
			}
			if ((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 3)
			{
				Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num6, (float)num5), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * ((Main.lBar - num21) / (1f - num21)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + TextureAssets.Hue.Height() + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				z = (float)(Main.mouseX - num6);
				z /= (float)TextureAssets.Hue.Width();
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = z * (1f - num21) + num21;
				Main.lBar = z;
			}
			UILinkPointNavigator.SetPosition(2802, new Vector2((float)num6, (float)num5) + TextureAssets.Hue.Value.Size() / 2f);
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar, byte.MaxValue);
			if (Main.selClothes == 0)
			{
				Main.player[Main.myPlayer].shirtColor = Main.selColor;
			}
			if (Main.selClothes == 1)
			{
				Main.player[Main.myPlayer].underShirtColor = Main.selColor;
			}
			if (Main.selClothes == 2)
			{
				Main.player[Main.myPlayer].pantsColor = Main.selColor;
			}
			if (Main.selClothes == 3)
			{
				Main.player[Main.myPlayer].shoeColor = Main.selColor;
			}
			if (Main.selClothes == 4)
			{
				Main.player[Main.myPlayer].eyeColor = Main.selColor;
			}
			if (Main.selClothes == 5)
			{
				Main.player[Main.myPlayer].skinColor = Main.selColor;
			}
			int num22 = num7;
			int num23 = num8;
			num23 -= 8;
			for (int m = 0; m < 6; m++)
			{
				if (num9 == m)
				{
					Main.spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2((float)num22, (float)num23), new Rectangle?(new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2((float)num22, (float)num23), new Rectangle?(new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height())), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, 0, 0f);
				}
				if (Main.mouseX > num22 && Main.mouseX < num22 + TextureAssets.InventoryBack.Width() && Main.mouseY > num23 && Main.mouseY < num23 + TextureAssets.InventoryBack.Height() && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.selClothes = m;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.hBar = -1f;
					Main.lBar = -1f;
					Main.sBar = -1f;
				}
				float x = (float)(num22 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.Clothes[m].Width() / 2);
				float y = (float)(num23 + TextureAssets.InventoryBack.Height() / 2 - TextureAssets.Clothes[m].Height() / 2);
				Color color6 = Color.White;
				if (m == 0)
				{
					color6 = Main.player[Main.myPlayer].shirtColor;
				}
				if (m == 1)
				{
					color6 = Main.player[Main.myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					color6 = Main.player[Main.myPlayer].pantsColor;
				}
				if (m == 3)
				{
					color6 = Main.player[Main.myPlayer].shoeColor;
				}
				if (m == 4)
				{
					color6 = Main.player[Main.myPlayer].eyeColor;
				}
				if (m == 5)
				{
					color6 = Main.player[Main.myPlayer].skinColor;
				}
				Main.spriteBatch.Draw(TextureAssets.Clothes[m].Value, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, TextureAssets.Clothes[m].Width(), TextureAssets.Clothes[m].Height())), color6, 0f, default(Vector2), 1f, 0, 0f);
				if (m == 4)
				{
					Texture2D value = Main.Assets.Request<Texture2D>("Images/UI/CharCreation/ColorEyeBack").Value;
					Main.spriteBatch.Draw(value, new Vector2(x, y), new Rectangle?(value.Frame(1, 1, 0, 0, 0, 0)), Color.White, 0f, default(Vector2), 1f, 0, 0f);
				}
				UILinkPointNavigator.SetPosition(2806 + m, new Vector2(x, y) + TextureAssets.Clothes[m].Value.Size() * 0.75f);
				num22 += 56;
				if (m == 1)
				{
					num22 -= 112;
					num23 += 56;
				}
				if (m == 3)
				{
					num23 -= 56;
				}
				if (m == 4)
				{
					num23 += 56;
					num22 -= 56;
				}
			}
			Main.dresserInterfaceDummy.skinVariant = Main.player[Main.myPlayer].skinVariant;
			Main.dresserInterfaceDummy.eyeColor = Main.player[Main.myPlayer].eyeColor;
			Main.dresserInterfaceDummy.hairColor = Main.player[Main.myPlayer].hairColor;
			Main.dresserInterfaceDummy.hair = Main.player[Main.myPlayer].hair;
			Main.dresserInterfaceDummy.skinColor = Main.player[Main.myPlayer].skinColor;
			Main.dresserInterfaceDummy.shirtColor = Main.player[Main.myPlayer].shirtColor;
			Main.dresserInterfaceDummy.underShirtColor = Main.player[Main.myPlayer].underShirtColor;
			Main.dresserInterfaceDummy.shoeColor = Main.player[Main.myPlayer].shoeColor;
			Main.dresserInterfaceDummy.pantsColor = Main.player[Main.myPlayer].pantsColor;
			Main.dresserInterfaceDummy.Bottom = Main.screenPosition + vector;
			Main.dresserInterfaceDummy.direction = -1;
			Main.dresserInterfaceDummy.gravDir = 1f;
			Main.dresserInterfaceDummy.PlayerFrame();
			Main.dresserInterfaceDummy.socialIgnoreLight = true;
			Color c = new Color(46, 106, 98) * 0.6f;
			if (flag)
			{
				c = new Color(46, 106, 98) * 2f * 0.6f;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.CycleClothingStyle(Main.player[Main.myPlayer]);
				}
			}
			UILinkPointNavigator.SetPosition(2805, r.Center.ToVector2());
			Utils.DrawInvBG(Main.spriteBatch, r, c);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(1, null, null, null, null, null, Main.UIScaleMatrix);
			Main.PlayerRenderer.DrawPlayer(Main.Camera, Main.dresserInterfaceDummy, Main.dresserInterfaceDummy.position, Main.dresserInterfaceDummy.fullRotation, Main.dresserInterfaceDummy.fullRotationOrigin, 0f, 1f);
		}

		// Token: 0x06000518 RID: 1304 RVA: 0x0010818E File Offset: 0x0010638E
		private void DrawInterface_Tests()
		{
		}

		// Token: 0x06000519 RID: 1305 RVA: 0x00108190 File Offset: 0x00106390
		private void SetupDrawInterfaceLayers()
		{
			if (this._needToSetupDrawInterfaceLayers)
			{
				this._needToSetupDrawInterfaceLayers = false;
				this._gameInterfaceLayers = new List<GameInterfaceLayer>();
				List<GameInterfaceLayer> gameInterfaceLayers = this._gameInterfaceLayers;
				GameInterfaceLayer[] array = new GameInterfaceLayer[43];
				array[0] = new LegacyGameInterfaceLayer("Vanilla: Interface Logic 1", delegate()
				{
					Main.DrawInterface_0_InterfaceLogic1();
					return true;
				}, InterfaceScaleType.Game);
				array[1] = new LegacyGameInterfaceLayer("Vanilla: MP Player Names", delegate()
				{
					Main.DrawInterface_20_MultiplayerPlayerNames();
					return true;
				}, InterfaceScaleType.Game);
				array[2] = new LegacyGameInterfaceLayer("Vanilla: Emote Bubbles", delegate()
				{
					Main.DrawInterface_1_1_DrawEmoteBubblesInWorld();
					return true;
				}, InterfaceScaleType.Game);
				array[3] = new LegacyGameInterfaceLayer("Vanilla: Entity Markers", delegate()
				{
					Main.DrawInterface_1_2_DrawEntityMarkersInWorld();
					return true;
				}, InterfaceScaleType.Game);
				array[4] = new LegacyGameInterfaceLayer("Vanilla: Smart Cursor Targets", delegate()
				{
					Main.DrawInterface_2_SmartCursorTargets();
					return true;
				}, InterfaceScaleType.Game);
				array[5] = new LegacyGameInterfaceLayer("Vanilla: Laser Ruler", delegate()
				{
					Main.DrawInterface_3_LaserRuler();
					return true;
				}, InterfaceScaleType.Game);
				array[6] = new LegacyGameInterfaceLayer("Vanilla: Ruler", delegate()
				{
					Main.DrawInterface_4_Ruler();
					return true;
				}, InterfaceScaleType.Game);
				array[7] = new LegacyGameInterfaceLayer("Vanilla: Gamepad Lock On", delegate()
				{
					Main.DrawInterface_5_GamepadLockOn();
					return true;
				}, InterfaceScaleType.Game);
				array[8] = new LegacyGameInterfaceLayer("Vanilla: Tile Grid Option", delegate()
				{
					Main.DrawInterface_6_TileGridOption();
					return true;
				}, InterfaceScaleType.Game);
				array[9] = new LegacyGameInterfaceLayer("Vanilla: Town NPC House Banners", delegate()
				{
					this.DrawInterface_7_TownNPCHouseBanners();
					return true;
				}, InterfaceScaleType.Game);
				int num = 10;
				string name = "Vanilla: Hide UI Toggle";
				GameInterfaceDrawMethod drawMethod;
				if ((drawMethod = Main.<>O.<10>__DrawInterface_8_CheckF11UIHideToggle) == null)
				{
					drawMethod = (Main.<>O.<10>__DrawInterface_8_CheckF11UIHideToggle = new GameInterfaceDrawMethod(Main.DrawInterface_8_CheckF11UIHideToggle));
				}
				array[num] = new LegacyGameInterfaceLayer(name, drawMethod, InterfaceScaleType.UI);
				array[11] = new LegacyGameInterfaceLayer("Vanilla: Wire Selection", delegate()
				{
					Main.DrawInterface_9_WireSelection();
					return true;
				}, InterfaceScaleType.UI);
				int num2 = 12;
				string name2 = "Vanilla: Capture Manager Check";
				GameInterfaceDrawMethod drawMethod2;
				if ((drawMethod2 = Main.<>O.<11>__DrawInterface_10_CheckCaptureManager) == null)
				{
					drawMethod2 = (Main.<>O.<11>__DrawInterface_10_CheckCaptureManager = new GameInterfaceDrawMethod(Main.DrawInterface_10_CheckCaptureManager));
				}
				array[num2] = new LegacyGameInterfaceLayer(name2, drawMethod2, InterfaceScaleType.Game);
				array[13] = new LegacyGameInterfaceLayer("Vanilla: Ingame Options", new GameInterfaceDrawMethod(this.DrawInterface_11_IngameOptionsMenu), InterfaceScaleType.UI);
				int num3 = 14;
				string name3 = "Vanilla: Fancy UI";
				GameInterfaceDrawMethod drawMethod3;
				if ((drawMethod3 = Main.<>O.<12>__DrawInterface_12_IngameFancyUI) == null)
				{
					drawMethod3 = (Main.<>O.<12>__DrawInterface_12_IngameFancyUI = new GameInterfaceDrawMethod(Main.DrawInterface_12_IngameFancyUI));
				}
				array[num3] = new LegacyGameInterfaceLayer(name3, drawMethod3, InterfaceScaleType.UI);
				array[15] = new LegacyGameInterfaceLayer("Vanilla: Achievement Complete Popups", delegate()
				{
					Main.DrawInterface_13_AchievementCompletePopups();
					return true;
				}, InterfaceScaleType.UI);
				array[16] = new LegacyGameInterfaceLayer("Vanilla: Entity Health Bars", delegate()
				{
					this.DrawInterface_14_EntityHealthBars();
					return true;
				}, InterfaceScaleType.Game);
				array[17] = new LegacyGameInterfaceLayer("Vanilla: Invasion Progress Bars", delegate()
				{
					Main.DrawInterface_15_InvasionProgressBars();
					return true;
				}, InterfaceScaleType.UI);
				array[18] = new LegacyGameInterfaceLayer("Vanilla: Map / Minimap", delegate()
				{
					this.DrawInterface_16_MapOrMinimap();
					return true;
				}, InterfaceScaleType.UI);
				array[19] = new LegacyGameInterfaceLayer("Vanilla: Diagnose Net", delegate()
				{
					Main.DrawInterface_17_DiagnoseNet();
					return true;
				}, InterfaceScaleType.UI);
				array[20] = new LegacyGameInterfaceLayer("Vanilla: Diagnose Video", delegate()
				{
					Main.DrawInterface_18_DiagnoseVideo();
					return true;
				}, InterfaceScaleType.UI);
				array[21] = new LegacyGameInterfaceLayer("Vanilla: Sign Tile Bubble", delegate()
				{
					Main.DrawInterface_19_SignTileBubble();
					return true;
				}, InterfaceScaleType.Game);
				array[22] = new LegacyGameInterfaceLayer("Vanilla: Hair Window", delegate()
				{
					this.DrawInterface_21_HairWindow();
					return true;
				}, InterfaceScaleType.UI);
				array[23] = new LegacyGameInterfaceLayer("Vanilla: Dresser Window", delegate()
				{
					this.DrawInterface_22_DresserWindow();
					return true;
				}, InterfaceScaleType.UI);
				array[24] = new LegacyGameInterfaceLayer("Vanilla: NPC / Sign Dialog", delegate()
				{
					this.DrawInterface_23_NPCSignsDialog();
					return true;
				}, InterfaceScaleType.UI);
				array[25] = new LegacyGameInterfaceLayer("Vanilla: Interface Logic 2", delegate()
				{
					Main.DrawInterface_24_InterfaceLogic2();
					return true;
				}, InterfaceScaleType.Game);
				array[26] = new LegacyGameInterfaceLayer("Vanilla: Resource Bars", delegate()
				{
					this.DrawInterface_25_ResourceBars();
					return true;
				}, InterfaceScaleType.UI);
				array[27] = new LegacyGameInterfaceLayer("Vanilla: Interface Logic 3", delegate()
				{
					Main.DrawInterface_26_InterfaceLogic3();
					return true;
				}, InterfaceScaleType.Game);
				array[28] = new LegacyGameInterfaceLayer("Vanilla: Inventory", delegate()
				{
					this.DrawInterface_27_Inventory();
					return true;
				}, InterfaceScaleType.UI);
				array[29] = new LegacyGameInterfaceLayer("Vanilla: Info Accessories Bar", delegate()
				{
					this.DrawInterface_28_InfoAccs();
					return true;
				}, InterfaceScaleType.UI);
				array[30] = new LegacyGameInterfaceLayer("Vanilla: Settings Button", delegate()
				{
					Main.DrawInterface_29_SettingsButton();
					return true;
				}, InterfaceScaleType.UI);
				array[31] = new LegacyGameInterfaceLayer("Vanilla: Hotbar", delegate()
				{
					this.DrawInterface_30_Hotbar();
					return true;
				}, InterfaceScaleType.UI);
				array[32] = new LegacyGameInterfaceLayer("Vanilla: Builder Accessories Bar", delegate()
				{
					this.DrawInterface_31_BuilderAccToggles();
					return true;
				}, InterfaceScaleType.UI);
				array[33] = new LegacyGameInterfaceLayer("Vanilla: Radial Hotbars", delegate()
				{
					Main.DrawInterface_32_GamepadRadialHotbars();
					return true;
				}, InterfaceScaleType.UI);
				array[34] = new LegacyGameInterfaceLayer("Vanilla: Mouse Text", delegate()
				{
					this.DrawInterface_33_MouseText();
					return true;
				}, InterfaceScaleType.UI);
				array[35] = new LegacyGameInterfaceLayer("Vanilla: Player Chat", delegate()
				{
					this.DrawInterface_34_PlayerChat();
					return true;
				}, InterfaceScaleType.UI);
				array[36] = new LegacyGameInterfaceLayer("Vanilla: Death Text", delegate()
				{
					Main.DrawInterface_35_YouDied();
					return true;
				}, InterfaceScaleType.UI);
				array[37] = new LegacyGameInterfaceLayer("Vanilla: Cursor", delegate()
				{
					Main.DrawInterface_36_Cursor();
					return true;
				}, InterfaceScaleType.UI);
				array[38] = new LegacyGameInterfaceLayer("Vanilla: Debug Stuff", delegate()
				{
					Main.DrawInterface_37_DebugStuff();
					return true;
				}, InterfaceScaleType.UI);
				array[39] = new LegacyGameInterfaceLayer("Vanilla: Mouse Item / NPC Head", delegate()
				{
					this.DrawInterface_38_MouseCarriedObject();
					return true;
				}, InterfaceScaleType.UI);
				array[40] = new LegacyGameInterfaceLayer("Vanilla: Mouse Over", delegate()
				{
					this.DrawInterface_39_MouseOver();
					return true;
				}, InterfaceScaleType.Game);
				array[41] = new LegacyGameInterfaceLayer("Vanilla: Interact Item Icon", delegate()
				{
					this.DrawInterface_40_InteractItemIcon();
					return true;
				}, InterfaceScaleType.UI);
				array[42] = new LegacyGameInterfaceLayer("Vanilla: Interface Logic 4", delegate()
				{
					Main.DrawInterface_41_InterfaceLogic4();
					return true;
				}, InterfaceScaleType.UI);
				gameInterfaceLayers.AddRange(array);
			}
		}

		// Token: 0x0600051A RID: 1306 RVA: 0x00108830 File Offset: 0x00106A30
		protected void DrawInterface(GameTime gameTime)
		{
			Main._drawInterfaceGameTime = gameTime;
			if (this._needToSetupDrawInterfaceLayers)
			{
				this.SetupDrawInterfaceLayers();
			}
			PlayerInput.SetZoom_UI();
			List<GameInterfaceLayer> list = new List<GameInterfaceLayer>(this._gameInterfaceLayers);
			SystemLoader.ModifyInterfaceLayers(list);
			using (List<GameInterfaceLayer>.Enumerator enumerator = list.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (!enumerator.Current.Draw())
					{
						break;
					}
				}
			}
			PlayerInput.SetZoom_World();
		}

		// Token: 0x0600051B RID: 1307 RVA: 0x001088B0 File Offset: 0x00106AB0
		private static void DrawWallOfCopperShortswords()
		{
			UnifiedRandom r = new UnifiedRandom(5000);
			Texture2D value = TextureAssets.Cloud[28].Value;
			Vector2 vector = Main.ScreenSize.ToVector2();
			Main.spriteBatch.Begin();
			for (int i = 0; i < 20000; i++)
			{
				Vector2 vector2 = r.NextVector2Square(-0.1f, 1.1f);
				vector2.X -= 0.1f;
				vector2.X += Main.GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
				vector2.Y -= Main.GlobalTimeWrappedHourly % 10f / 10f;
				if (vector2.Y < -0.2f)
				{
					vector2.Y += 1.4f;
				}
				if (vector2.X > 1.1f)
				{
					vector2.X -= 1.2f;
				}
				Vector2 position = vector2 * vector;
				Main.spriteBatch.Draw(value, position, Color.White);
			}
			Main.spriteBatch.End();
		}

		// Token: 0x0600051C RID: 1308 RVA: 0x001089C4 File Offset: 0x00106BC4
		private static void DrawWallOfBoulders()
		{
			UnifiedRandom r = new UnifiedRandom(5000);
			Main.instance.LoadProjectile(99);
			Texture2D value = TextureAssets.Projectile[99].Value;
			Vector2 vector = Main.ScreenSize.ToVector2();
			Main.spriteBatch.Begin();
			for (int i = 0; i < 20000; i++)
			{
				Vector2 vector2 = r.NextVector2Square(-0.1f, 1.1f);
				vector2.X *= 0.1f;
				vector2.X -= 0.1f;
				vector2.X += Main.GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
				vector2.Y -= Main.GlobalTimeWrappedHourly % 10f / 10f;
				if (vector2.Y < -0.2f)
				{
					vector2.Y += 1.4f;
				}
				if (vector2.X > 1.1f)
				{
					vector2.X -= 1.2f;
				}
				Vector2 position = vector2 * vector;
				Main.spriteBatch.Draw(value, position, Color.White);
			}
			Main.spriteBatch.End();
		}

		// Token: 0x0600051D RID: 1309 RVA: 0x00108AF3 File Offset: 0x00106CF3
		private static void DrawInterface_41_InterfaceLogic4()
		{
			if (Main.mouseRight)
			{
				Main.npcChatRelease = false;
			}
			else
			{
				Main.npcChatRelease = true;
			}
			Main._MouseOversCanClear = true;
			Main.DrawPendingMouseText();
			Main.cursorOverride = -1;
		}

		// Token: 0x0600051E RID: 1310 RVA: 0x00108B1C File Offset: 0x00106D1C
		private static void DrawPendingMouseText()
		{
			Main.DrawGamepadInstructions();
			if (Main.instance._mouseTextCache.isValid)
			{
				Main.instance.MouseTextInner(Main.instance._mouseTextCache);
				Main.DrawInterface_36_Cursor();
				Main.instance._mouseTextCache.isValid = false;
				Main.instance._mouseTextCache.noOverride = false;
			}
		}

		// Token: 0x0600051F RID: 1311 RVA: 0x00108B78 File Offset: 0x00106D78
		private void DrawInterface_40_InteractItemIcon()
		{
			if (Main.HoveringOverAnNPC || Main.LocalPlayer.mouseInterface)
			{
				return;
			}
			Item item = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem];
			int num = item.type;
			if (Main.player[Main.myPlayer].UsingBiomeTorches)
			{
				if (num != 8)
				{
					if (num == 966)
					{
						num = Main.player[Main.myPlayer].BiomeCampfireHoldStyle(num);
					}
				}
				else
				{
					num = Main.player[Main.myPlayer].BiomeTorchHoldStyle(num);
				}
			}
			if (Main.player[Main.myPlayer].cursorItemIconID != 0)
			{
				num = Main.player[Main.myPlayer].cursorItemIconID;
			}
			bool flag = Main.player[Main.myPlayer].cursorItemIconEnabled && (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type > 0 || Main.player[Main.myPlayer].cursorItemIconID != 0);
			Main.ItemIconCacheVerification();
			bool flag2 = Main._itemIconCacheTime > 0 && Main.mouseItem.type < 1;
			if (!flag && !flag2)
			{
				return;
			}
			int t = Main._itemIconCacheSelectedItemID;
			if (!flag)
			{
				Utils.Swap<int>(ref t, ref Main.player[Main.myPlayer].cursorItemIconID);
			}
			Color currentColor = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetAlpha(Color.White);
			Color color = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetColor(Color.White);
			if (Main.player[Main.myPlayer].cursorItemIconID != 0)
			{
				currentColor = Color.White;
				color = default(Color);
			}
			if (Main.player[Main.myPlayer].cursorItemIconID == 269)
			{
				currentColor = Main.player[Main.myPlayer].shirtColor;
			}
			float num2 = Main.cursorScale;
			ItemSlot.GetItemLight(ref currentColor, num, false);
			SpriteEffects effects = 0;
			if (Main.player[Main.myPlayer].cursorItemIconReversed)
			{
				effects = 1;
			}
			if (num > 0)
			{
				int num3 = 10 + Main.player[Main.myPlayer].cursorItemIconPush;
				Main.instance.LoadItem(num);
				Main.spriteBatch.Draw(TextureAssets.Item[num].Value, new Vector2((float)(Main.mouseX + num3), (float)(Main.mouseY + num3)), new Rectangle?(Item.GetDrawHitbox(num, null)), currentColor, 0f, default(Vector2), num2, effects, 0f);
				Item ammoItem;
				Color ammoColor;
				float ammoScale;
				Vector2 ammoOffset;
				if (num == item.type && this.TryGetAmmo(item, out ammoItem, out ammoColor, out ammoScale, out ammoOffset))
				{
					float scale = num2 * ammoScale;
					int type = ammoItem.type;
					Color alpha = ammoItem.GetAlpha(ammoColor);
					Main.instance.LoadItem(type);
					Main.spriteBatch.Draw(TextureAssets.Item[type].Value, new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)) + ammoOffset, new Rectangle?(Item.GetDrawHitbox(type, null)), alpha, 0f, default(Vector2), scale, effects, 0f);
				}
			}
			if (Main.player[Main.myPlayer].cursorItemIconText != "")
			{
				this.MouseText(Main.player[Main.myPlayer].cursorItemIconText, 0, 0, -1, -1, -1, -1, 0);
			}
			if (Main.player[Main.myPlayer].cursorItemIconID == 0 && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].color != default(Color))
			{
				Main.instance.LoadItem(Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type);
				Main.spriteBatch.Draw(TextureAssets.Item[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Value, new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Rectangle?(Item.GetDrawHitbox(Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type, null)), color, 0f, default(Vector2), num2, 0, 0f);
			}
			if (!flag)
			{
				Utils.Swap<int>(ref t, ref Main.player[Main.myPlayer].cursorItemIconID);
			}
		}

		// Token: 0x06000520 RID: 1312 RVA: 0x00109024 File Offset: 0x00107224
		private bool TryGetAmmo(Item sourceItem, out Item ammoItem, out Color ammoColor, out float ammoScale, out Vector2 ammoOffset)
		{
			ammoItem = null;
			ammoColor = Color.White;
			ammoScale = 0.8f;
			ammoOffset = Vector2.Zero;
			int type = sourceItem.type;
			if (type == 1071 || type == 1543 || type == 1072 || type == 1544)
			{
				int num = 22;
				int num2 = 22;
				if (type == 1072 || type == 1544)
				{
					num = 28;
					num2 = 28;
				}
				ammoOffset = new Vector2((float)num, (float)num2);
				ammoItem = Main.player[Main.myPlayer].FindPaintOrCoating();
				return ammoItem != null;
			}
			FlexibleTileWand flexibleTileWand = sourceItem.GetFlexibleTileWand();
			FlexibleTileWand.PlacementOption placementOption;
			if (flexibleTileWand != null && flexibleTileWand.TryGetPlacementOption(Main.LocalPlayer, Player.FlexibleWandRandomSeed, Player.FlexibleWandCycleOffset, out placementOption, out ammoItem))
			{
				ammoOffset = new Vector2(28f, 28f);
				return true;
			}
			return false;
		}

		// Token: 0x06000521 RID: 1313 RVA: 0x001090FC File Offset: 0x001072FC
		private void DrawInterface_39_MouseOver()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawMouseOver();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawMouseOver();
		}

		// Token: 0x06000522 RID: 1314 RVA: 0x00109138 File Offset: 0x00107338
		private void DrawInterface_38_MouseCarriedObject()
		{
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				this.SetMouseNPC(-1, -1);
				Main.player[Main.myPlayer].cursorItemIconEnabled = false;
				Main.player[Main.myPlayer].cursorItemIconID = 0;
				Main.mouseText = true;
				float num5 = Main.inventoryScale;
				Main.inventoryScale = Main.cursorScale;
				ItemSlot.Draw(Main.spriteBatch, ref Main.mouseItem, 21, new Vector2((float)Main.mouseX, (float)Main.mouseY), default(Color));
				Main.inventoryScale = num5;
				return;
			}
			if (this.mouseNPCType <= -1)
			{
				return;
			}
			float num2 = 1f;
			num2 *= Main.cursorScale;
			if (this.mouseNPCIndex >= 0)
			{
				NPC nPC = Main.npc[this.mouseNPCIndex];
				if (!nPC.active || nPC.type != this.mouseNPCType)
				{
					this.SetMouseNPC_ToHousingQuery();
				}
			}
			int type = this.mouseNPCType;
			int num3 = (this.mouseNPCIndex >= 0) ? TownNPCProfiles.GetHeadIndexSafe(Main.npc[this.mouseNPCIndex]) : NPC.TypeToDefaultHeadIndex(type);
			Texture2D value = TextureAssets.NpcHead[num3].Value;
			Main.spriteBatch.Draw(value, new Vector2((float)Main.mouseX + 26f * num2 - (float)value.Width * 0.5f * num2, (float)Main.mouseY + 26f * num2 - (float)value.Height * 0.5f * num2), null, Color.White, 0f, default(Vector2), num2, 0, 0f);
			if (PlayerInput.IgnoreMouseInterface)
			{
				return;
			}
			Main.player[Main.myPlayer].mouseInterface = true;
			Main.mouseText = false;
			if (Main.mouseRight && Main.mouseRightRelease)
			{
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				this.SetMouseNPC(-1, -1);
			}
			if (!Main.mouseLeft || !Main.mouseLeftRelease)
			{
				return;
			}
			if (this.mouseNPCType == 0)
			{
				PlayerInput.SetZoom_Unscaled();
				PlayerInput.SetZoom_MouseInWorld();
				int x3 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
				int y = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					y = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
				}
				PlayerInput.SetZoom_Unscaled();
				int i = -1;
				if (WorldGen.MoveTownNPC(x3, y, i))
				{
					Main.NewText(Lang.inter[39].Value, byte.MaxValue, 240, 20);
				}
				return;
			}
			int num4 = this.mouseNPCIndex;
			if (num4 >= 0)
			{
				PlayerInput.SetZoom_Unscaled();
				PlayerInput.SetZoom_MouseInWorld();
				int x2 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
				int y2 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
				PlayerInput.SetZoom_Unscaled();
				if (WorldGen.MoveTownNPC(x2, y2, num4))
				{
					this.SetMouseNPC(-1, -1);
					WorldGen.moveRoom(x2, y2, num4);
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
			}
		}

		// Token: 0x06000523 RID: 1315 RVA: 0x00109457 File Offset: 0x00107657
		private static void DrawInterface_37_DebugStuff()
		{
		}

		// Token: 0x06000524 RID: 1316 RVA: 0x0010945C File Offset: 0x0010765C
		private static void DrawInterface_36_Cursor()
		{
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
			if (Main.cursorOverride != -1)
			{
				Color color;
				color..ctor((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				Color white = Main.cursorColor;
				bool flag = true;
				bool flag2 = true;
				float rotation = 0f;
				Vector2 vector = default(Vector2);
				float num = 1f;
				if (Main.cursorOverride == 2)
				{
					flag = false;
					white = Color.White;
					num = 0.7f;
					vector..ctor(0.1f);
				}
				switch (Main.cursorOverride)
				{
				case 2:
					flag = false;
					white = Color.White;
					num = 0.7f;
					vector..ctor(0.1f);
					break;
				case 3:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
					flag = false;
					white = Color.White;
					break;
				}
				if (flag)
				{
					Main.spriteBatch.Draw(TextureAssets.Cursors[Main.cursorOverride].Value, new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), null, color, rotation, vector * TextureAssets.Cursors[Main.cursorOverride].Value.Size(), Main.cursorScale * 1.1f * num, 0, 0f);
				}
				if (flag2)
				{
					Main.spriteBatch.Draw(TextureAssets.Cursors[Main.cursorOverride].Value, new Vector2((float)Main.mouseX, (float)Main.mouseY), null, white, rotation, vector * TextureAssets.Cursors[Main.cursorOverride].Value.Size(), Main.cursorScale * num, 0, 0f);
					return;
				}
			}
			else
			{
				if (Main.SmartCursorIsUsed)
				{
					Main.DrawCursor(Main.DrawThickCursor(true), true);
					return;
				}
				Main.DrawCursor(Main.DrawThickCursor(false), false);
			}
		}

		// Token: 0x06000525 RID: 1317 RVA: 0x00109688 File Offset: 0x00107888
		private static void DrawInterface_35_YouDied()
		{
			if (Main.player[Main.myPlayer].dead)
			{
				float num = -60f;
				string value = Lang.inter[38].Value;
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, value, new Vector2((float)(Main.screenWidth / 2) - FontAssets.DeathText.Value.MeasureString(value).X / 2f, (float)(Main.screenHeight / 2) + num), Main.player[Main.myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), 1f, 0, 0f);
				if (Main.player[Main.myPlayer].lostCoins > 0L)
				{
					num += 50f;
					string textValue = Language.GetTextValue("Game.DroppedCoins", Main.player[Main.myPlayer].lostCoinString);
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)(Main.screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue).X / 2f, (float)(Main.screenHeight / 2) + num), Main.player[Main.myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), 1f, 0, 0f);
				}
				num += (float)((Main.player[Main.myPlayer].lostCoins > 0L) ? 24 : 50);
				num += 20f;
				float num2 = 0.7f;
				string textValue2 = Language.GetTextValue("Game.RespawnInSuffix", ((float)((int)(1f + (float)Main.player[Main.myPlayer].respawnTimer / 60f))).ToString());
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, textValue2, new Vector2((float)(Main.screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue2).X * num2 / 2f, (float)(Main.screenHeight / 2) + num), Main.player[Main.myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), num2, 0, 0f);
			}
		}

		// Token: 0x06000526 RID: 1318 RVA: 0x001098C0 File Offset: 0x00107AC0
		private void DrawInterface_34_PlayerChat()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawPlayerChat();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawPlayerChat();
		}

		// Token: 0x06000527 RID: 1319 RVA: 0x001098FC File Offset: 0x00107AFC
		private void DrawInterface_33_MouseText()
		{
			SystemLoader.PostDrawInterface(Main.spriteBatch);
			if (Main.mouseItem.stack <= 0)
			{
				Main.mouseItem.type = 0;
			}
			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
			{
				Main.player[Main.myPlayer].cursorItemIconEnabled = false;
				if (Main.SettingsEnabled_OpaqueBoxBehindTooltips)
				{
					this.MouseText(Main.hoverItemName, Main.rare, 0, Main.mouseX + 6, Main.mouseY + 6, -1, -1, 0);
				}
				else
				{
					this.MouseText(Main.hoverItemName, Main.rare, 0, -1, -1, -1, -1, 0);
				}
				Main.mouseText = true;
			}
			if (Main.LocalPlayer.rulerLine && Main.LocalPlayer.builderAccStatus[0] == 0 && Main.LocalPlayer.velocity.Length() <= 6f)
			{
				int num = Math.Abs(Main.rulerLineDisplayValues.X) + 1;
				int num2 = Math.Abs(Main.rulerLineDisplayValues.Y) + 1;
				if (num > 1 || num2 > 1)
				{
					Utils.DrawBorderString(Main.spriteBatch, num.ToString() + "x" + num2.ToString(), Main.MouseScreen + new Vector2(16f, 0f), new Color(0.24f, 0.8f, 0.9f, 1f), Main.GameZoomTarget, 0f, 0.8f, -1);
				}
			}
			this.DrawInterface_InstrumentMouseText();
		}

		// Token: 0x06000528 RID: 1320 RVA: 0x00109A78 File Offset: 0x00107C78
		private void DrawInterface_InstrumentMouseText()
		{
			Player localPlayer = Main.LocalPlayer;
			if (this._mouseTextCache.isValid || Main.signHover > -1 || localPlayer.cursorItemIconID > 0 || localPlayer.selectedItem == 58 || (localPlayer.rulerLine && localPlayer.builderAccStatus[0] == 0) || localPlayer.mouseInterface)
			{
				this.instrumentMouseFixHack = 3;
				return;
			}
			if (this.instrumentMouseFixHack > 0)
			{
				this.instrumentMouseFixHack -= 1;
				return;
			}
			int type = localPlayer.inventory[localPlayer.selectedItem].type;
			if (type == 4057 || type == 4372 || type == 4715 || type == 4673)
			{
				float musicDist = localPlayer.musicDist;
				string text;
				if (type == 4673)
				{
					int num = 10;
					float num2 = 1f / (float)num;
					text = ((musicDist > num2 * 9f) ? "GameUI.DrumCymbol" : ((musicDist > num2 * 8f) ? "GameUI.DrumCymbol1" : ((musicDist > num2 * 7f) ? "GameUI.DrumHiHat" : ((musicDist > num2 * 6f) ? "GameUI.DrumClosedHiHat" : ((musicDist > num2 * 5f) ? "GameUI.DrumFloorTom" : ((musicDist > num2 * 4f) ? "GameUI.DrumTamaSnare" : ((musicDist > num2 * 3f) ? "GameUI.DrumTomHigh" : ((musicDist > num2 * 2f) ? "GameUI.DrumTomMid" : ((musicDist <= num2 * 1f) ? "GameUI.DrumKick" : "GameUI.DrumTomLow")))))))));
				}
				else
				{
					int num3 = 6;
					float num4 = 1f / (float)num3;
					text = ((musicDist > num4 * 5f) ? "GameUI.GuitarEm" : ((musicDist > num4 * 4f) ? "GameUI.GuitarD" : ((musicDist > num4 * 3f) ? "GameUI.GuitarC" : ((musicDist > num4 * 2f) ? "GameUI.GuitarBm" : ((musicDist <= num4 * 1f) ? "GameUI.GuitarG" : "GameUI.GuitarAm")))));
				}
				this.MouseText(Language.GetTextValue(Language.GetTextValue(text)), 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x06000529 RID: 1321 RVA: 0x00109C84 File Offset: 0x00107E84
		private static void DrawInterface_32_GamepadRadialHotbars()
		{
			ItemSlot.DrawRadialCircular(Main.spriteBatch, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f, Main.LocalPlayer.CircularRadial, Main.LocalPlayer.inventory);
			ItemSlot.DrawRadialQuicks(Main.spriteBatch, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
		}

		// Token: 0x0600052A RID: 1322 RVA: 0x00109CEF File Offset: 0x00107EEF
		private void DrawInterface_31_BuilderAccToggles()
		{
			this.DrawBuilderAccToggles(new Vector2(10f, 77f));
		}

		// Token: 0x0600052B RID: 1323 RVA: 0x00109D08 File Offset: 0x00107F08
		public static void DrawInterface_29_SettingsButton()
		{
			Main._settingsButtonIsPushedToSide = false;
			if (Main.playerInventory || Main.ingameOptionsWindow || Main.player[Main.myPlayer].ghost || Main.player[Main.myPlayer].dead)
			{
				string value = Lang.inter[62].Value;
				string textSizeMatcher = "Settings";
				int num = Main.screenWidth - 110;
				int num2 = Main.screenHeight - 20;
				int num3 = 620;
				int num4 = 870;
				int amountOfExtraAccessorySlotsToShow = Main.player[Main.myPlayer].GetAmountOfExtraAccessorySlotsToShow();
				if (amountOfExtraAccessorySlotsToShow > 1)
				{
					int num5 = (int)(56f * Main.inventoryScale * (float)(amountOfExtraAccessorySlotsToShow - 1));
					num3 += num5;
					num4 += num5;
				}
				Action action;
				if ((action = Main.<>O.<13>__Open) == null)
				{
					action = (Main.<>O.<13>__Open = new Action(IngameOptions.Open));
				}
				Action clickAction = action;
				if (Main.ingameOptionsWindow)
				{
					Action action2;
					if ((action2 = Main.<>O.<14>__Close) == null)
					{
						action2 = (Main.<>O.<14>__Close = new Action(IngameOptions.Close));
					}
					clickAction = action2;
				}
				Main.DrawSettingButton(ref Main.mouseExit, ref Main.exitScale, num, num2, value, textSizeMatcher, clickAction);
			}
		}

		// Token: 0x0600052C RID: 1324 RVA: 0x00109E14 File Offset: 0x00108014
		public static void DrawSettingButton(ref bool mouseOver, ref float scale, int posX, int posY, string text, string textSizeMatcher, Action clickAction)
		{
			Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(textSizeMatcher);
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(text);
			Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(text);
			float num = vector4.X / vector2.X;
			if (mouseOver)
			{
				if ((double)scale < 0.96)
				{
					scale += 0.02f;
				}
			}
			else if ((double)scale > 0.8)
			{
				scale -= 0.02f;
			}
			UILinkPointNavigator.SetPosition(308, new Vector2((float)posX, (float)posY));
			for (int i = 0; i < 5; i++)
			{
				int num2 = 0;
				int num3 = 0;
				Color color = Color.Black;
				if (i == 0)
				{
					num2 = -2;
				}
				if (i == 1)
				{
					num2 = 2;
				}
				if (i == 2)
				{
					num3 = -2;
				}
				if (i == 3)
				{
					num3 = 2;
				}
				if (i == 4)
				{
					color = Color.White;
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, text, new Vector2((float)(posX + num2), (float)(posY + num3)), color, 0f, new Vector2(vector3.X / 2f, vector3.Y / 2f), (scale - 0.2f) * num, 0, 0f);
			}
			if ((float)Main.mouseX > (float)posX - vector3.X / 2f && (float)Main.mouseX < (float)posX + vector3.X / 2f && (float)Main.mouseY > (float)posY - vector3.Y / 2f && (float)Main.mouseY < (float)posY + vector3.Y / 2f - 10f && !Main.LocalPlayer.mouseInterface)
			{
				if (!PlayerInput.IgnoreMouseInterface)
				{
					if (!mouseOver)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					mouseOver = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						mouseOver = false;
						scale = 0.8f;
						clickAction();
						return;
					}
				}
			}
			else
			{
				mouseOver = false;
			}
		}

		// Token: 0x0600052D RID: 1325 RVA: 0x0010A017 File Offset: 0x00108217
		private void DrawInterface_28_InfoAccs()
		{
			float num = Main.inventoryScale;
			Main.inventoryScale = 0.6f;
			this.DrawInfoAccs();
			Main.inventoryScale = num;
		}

		// Token: 0x0600052E RID: 1326 RVA: 0x0010A033 File Offset: 0x00108233
		private void HackForGamepadInputHell()
		{
			if (PlayerInput.SettingsForUI.ShowGamepadHints)
			{
				PlayerInput.ComposeInstructionsForGamepad();
				PlayerInput.AllowExecutionOfGamepadInstructions = false;
			}
		}

		// Token: 0x0600052F RID: 1327 RVA: 0x0010A048 File Offset: 0x00108248
		private void DrawInterface_27_Inventory()
		{
			this.HackForGamepadInputHell();
			if (Main.playerInventory)
			{
				if (Main.player[Main.myPlayer].chest != -1)
				{
					Main.CreativeMenu.CloseMenu();
				}
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawInventory();
						return;
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
						return;
					}
				}
				this.DrawInventory();
				return;
			}
			Main.CreativeMenu.CloseMenu();
			Main.recFastScroll = true;
			this.SetMouseNPC(-1, -1);
			Main.EquipPage = 0;
		}

		// Token: 0x06000530 RID: 1328 RVA: 0x0010A0CC File Offset: 0x001082CC
		private static void DrawInterface_26_InterfaceLogic3()
		{
			bool flag = Main.playerInventory;
			if (Main.player[Main.myPlayer].dead)
			{
				Main.playerInventory = false;
			}
			if (!Main.playerInventory)
			{
				Main.player[Main.myPlayer].chest = -1;
				Main.InGuideCraftMenu = false;
				Main.InReforgeMenu = false;
				if (flag)
				{
					Recipe.FindRecipes(false);
				}
			}
			Main.hoverItemName = "";
		}

		// Token: 0x06000531 RID: 1329 RVA: 0x0010A12E File Offset: 0x0010832E
		private void DrawInterface_25_ResourceBars()
		{
			this.GUIBarsDraw();
		}

		// Token: 0x06000532 RID: 1330 RVA: 0x0010A138 File Offset: 0x00108338
		private static void DrawInterface_24_InterfaceLogic2()
		{
			Main.invAlpha += Main.invDir * 0.2f;
			if (Main.invAlpha > 240f)
			{
				Main.invAlpha = 240f;
				Main.invDir = -1f;
			}
			if (Main.invAlpha < 180f)
			{
				Main.invAlpha = 180f;
				Main.invDir = 1f;
			}
			Main.inventoryBack = new Color((int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha));
			Main.mouseText = false;
			Main.rare = 0;
		}

		// Token: 0x06000533 RID: 1331 RVA: 0x0010A1C9 File Offset: 0x001083C9
		private void DrawInterface_23_NPCSignsDialog()
		{
			this.GUIChatDraw();
		}

		// Token: 0x06000534 RID: 1332 RVA: 0x0010A1D1 File Offset: 0x001083D1
		private void DrawInterface_22_DresserWindow()
		{
			if (Main.clothesWindow)
			{
				this.DrawClothesWindow();
			}
		}

		// Token: 0x06000535 RID: 1333 RVA: 0x0010A1E0 File Offset: 0x001083E0
		private void DrawInterface_21_HairWindow()
		{
			if (Main.hairWindow)
			{
				this.DrawHairWindow();
				return;
			}
			Main.hairstylesUpdatedForThisInteraction = false;
		}

		// Token: 0x06000536 RID: 1334 RVA: 0x0010A1F6 File Offset: 0x001083F6
		private static void DrawInterface_20_MultiplayerPlayerNames()
		{
			Main.ActiveClosePlayersTeamOverlay.Draw();
		}

		// Token: 0x06000537 RID: 1335 RVA: 0x0010A204 File Offset: 0x00108404
		private static void DrawInterface_19_SignTileBubble()
		{
			if (Main.signBubble)
			{
				int num = (int)((float)Main.signX - Main.screenPosition.X);
				int num2 = (int)((float)Main.signY - Main.screenPosition.Y);
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					num2 = Main.screenHeight - (int)((float)Main.signY - Main.screenPosition.Y) - 32;
				}
				SpriteEffects effects = 0;
				if ((float)Main.signX > Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width)
				{
					effects = 1;
					num += -8 - TextureAssets.Chat2.Width();
				}
				else
				{
					num += 8;
				}
				num2 -= 22;
				Main.spriteBatch.Draw(TextureAssets.Chat2.Value, new Vector2((float)num, (float)num2), new Rectangle?(new Rectangle(0, 0, TextureAssets.Chat2.Width(), TextureAssets.Chat2.Height())), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
				Main.signBubble = false;
			}
		}

		// Token: 0x06000538 RID: 1336 RVA: 0x0010A338 File Offset: 0x00108538
		private static void DrawInterface_18_DiagnoseVideo()
		{
			if (!Main.drawDiag)
			{
				return;
			}
			if (PlayerInput.UsingGamepad)
			{
				for (int i = 0; i < 2; i++)
				{
					string text = "";
					int num = 20;
					int num2 = 160;
					num2 += i * 16;
					if (i == 0)
					{
						text = "Gamepad Left Thumbstick  : " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickLeft.X.ToString("P2"), PlayerInput.GamepadThumbstickLeft.Y.ToString("P2"));
					}
					if (i == 1)
					{
						text = "Gamepad Right Thumbstick: " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickRight.X.ToString("P2"), PlayerInput.GamepadThumbstickRight.Y.ToString("P2"));
					}
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)num, (float)num2), Color.White, 0f, default(Vector2), 1f, 0, 0f);
				}
			}
			for (int j = 0; j < 7; j++)
			{
				string text2 = "";
				int num3 = 20;
				int num4 = 220;
				num4 += j * 16;
				if (j == 0)
				{
					text2 = "Solid Tiles:";
				}
				if (j == 1)
				{
					text2 = "Misc. Tiles:";
				}
				if (j == 2)
				{
					text2 = "Walls Tiles:";
				}
				if (j == 3)
				{
					text2 = "Background Tiles:";
				}
				if (j == 4)
				{
					text2 = "Water Tiles:";
				}
				if (j == 5)
				{
					text2 = "Black Tiles:";
				}
				if (j == 6)
				{
					text2 = "Total Render:";
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text2, new Vector2((float)num3, (float)num4), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler;
			for (int k = 0; k < 7; k++)
			{
				int num5 = 180;
				int num6 = 220;
				num6 += k * 16;
				float num7 = (k != 6) ? TimeLogger.GetDrawTime(k) : TimeLogger.GetDrawTotal();
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(num7, "F2");
				defaultInterpolatedStringHandler.AppendLiteral("ms");
				string text3 = defaultInterpolatedStringHandler.ToStringAndClear();
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text3, new Vector2((float)num5, (float)num6), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			for (int l = 0; l < 6; l++)
			{
				string text4 = "";
				int num8 = 20;
				int num9 = 346;
				num9 += l * 16;
				if (l == 0)
				{
					text4 = "Lighting Init:";
				}
				if (l == 1)
				{
					text4 = "Lighting Phase #1:";
				}
				if (l == 2)
				{
					text4 = "Lighting Phase #2:";
				}
				if (l == 3)
				{
					text4 = "Lighting Phase #3";
				}
				if (l == 4)
				{
					text4 = "Lighting Phase #4";
				}
				if (l == 5)
				{
					text4 = "Total Lighting:";
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text4, new Vector2((float)num8, (float)num9), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			for (int m = 0; m < 6; m++)
			{
				int num10 = 180;
				int num11 = 346;
				num11 += m * 16;
				float num12 = (m != 5) ? TimeLogger.GetLightingTime(m) : TimeLogger.GetLightingTotal();
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(num12, "F2");
				defaultInterpolatedStringHandler.AppendLiteral("ms");
				string text5 = defaultInterpolatedStringHandler.ToStringAndClear();
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text5, new Vector2((float)num10, (float)num11), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			int num13 = 5;
			for (int n = 0; n < num13; n++)
			{
				int num14 = 20;
				int num15 = 456;
				num15 += n * 16;
				string text6 = "Render #" + n.ToString() + ":";
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text6, new Vector2((float)num14, (float)num15), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			for (int num16 = 0; num16 < num13; num16++)
			{
				int num17 = 180;
				int num18 = 456;
				num18 += num16 * 16;
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(TimeLogger.GetRenderTime(num16), "F2");
				defaultInterpolatedStringHandler.AppendLiteral("ms");
				string text7 = defaultInterpolatedStringHandler.ToStringAndClear();
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text7, new Vector2((float)num17, (float)num18), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			for (int num19 = 0; num19 < num13; num19++)
			{
				int num20 = 230;
				int num21 = 456;
				num21 += num19 * 16;
				num20 += 10;
				defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
				defaultInterpolatedStringHandler.AppendFormatted<float>(TimeLogger.GetRenderMax(num19), "F2");
				defaultInterpolatedStringHandler.AppendLiteral("ms");
				string text8 = defaultInterpolatedStringHandler.ToStringAndClear();
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text8, new Vector2((float)num20, (float)num21), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			}
			int num22 = 20;
			int num23 = 456 + 16 * num13 + 16;
			string text9 = "Update:";
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text9, new Vector2((float)num22, (float)num23), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			num22 = 180;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(Main.upTimer, "F2");
			defaultInterpolatedStringHandler.AppendLiteral("ms");
			text9 = defaultInterpolatedStringHandler.ToStringAndClear();
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text9, new Vector2((float)num22, (float)num23), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			num22 = 240;
			defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(2, 1);
			defaultInterpolatedStringHandler.AppendFormatted<float>(Main.upTimerMax, "F2");
			defaultInterpolatedStringHandler.AppendLiteral("ms");
			text9 = defaultInterpolatedStringHandler.ToStringAndClear();
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text9, new Vector2((float)num22, (float)num23), Color.White, 0f, default(Vector2), 1f, 0, 0f);
			DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, Language.GetTextValue("tModLoader.PressXToClose", 118), new Vector2(20f, (float)(num23 + 32)), Color.White, 0f, default(Vector2), 1f, 0, 0f);
		}

		// Token: 0x06000539 RID: 1337 RVA: 0x0010AAAC File Offset: 0x00108CAC
		private static void DrawInterface_17_DiagnoseNet()
		{
			if (ModNet.ShouldDrawModNetDiagnosticsUI)
			{
				ModNet.ModNetDiagnosticsUI.Draw(Main.spriteBatch);
				return;
			}
			if (Main.shouldDrawNetDiagnosticsUI)
			{
				Main.ActiveNetDiagnosticsUI.Draw(Main.spriteBatch);
			}
		}

		// Token: 0x0600053A RID: 1338 RVA: 0x0010AADC File Offset: 0x00108CDC
		private void DrawInterface_16_MapOrMinimap()
		{
			Main.mH = 0;
			if (!Main.mapEnabled)
			{
				return;
			}
			if (!Main.mapFullscreen && Main.mapStyle == 1)
			{
				Main.mH = 256;
				try
				{
					this.DrawMap(new GameTime());
				}
				catch (Exception e)
				{
					if (!Main.ignoreErrors)
					{
						throw;
					}
					TimeLogger.DrawException(e);
				}
			}
			PlayerInput.SetZoom_UI();
			if (Main.mH + this.RecommendedEquipmentAreaPushUp > Main.screenHeight)
			{
				Main.mH = Main.screenHeight - this.RecommendedEquipmentAreaPushUp;
			}
		}

		// Token: 0x0600053B RID: 1339 RVA: 0x0010AB68 File Offset: 0x00108D68
		private static void DrawInterface_15_InvasionProgressBars()
		{
			Main.DrawInvasionProgress();
			if (Main.HealthBarDrawSettings != 0)
			{
				Main.BigBossProgressBar.Draw(Main.spriteBatch);
			}
		}

		// Token: 0x0600053C RID: 1340 RVA: 0x0010AB88 File Offset: 0x00108D88
		private void DrawInterface_14_EntityHealthBars()
		{
			if (Main.HealthBarDrawSettings == 0)
			{
				return;
			}
			int num = -1;
			if (PlayerInput.UsingGamepad)
			{
				Player localPlayer = Main.LocalPlayer;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if ((nPC.life == nPC.lifeMax || nPC.dontTakeDamage) && !nPC.dontTakeDamage && nPC.nameOver > 0f && (num == -1 || nPC.Distance(localPlayer.Center) < Main.npc[num].Distance(localPlayer.Center)))
					{
						num = i;
					}
				}
			}
			bool flag = false;
			for (int num2 = 199; num2 >= 0; num2--)
			{
				if (Main.npc[num2].active && Main.npc[num2].type > 0 && Main.npc[num2].shimmerTransparency == 0f)
				{
					Main.npc[num2].position += Main.npc[num2].netOffset;
					if (Main.npc[num2].life != Main.npc[num2].lifeMax && !Main.npc[num2].dontTakeDamage)
					{
						float scale = 1f;
						int type = Main.npc[num2].type;
						if (type == 4)
						{
							scale = 1.5f;
						}
						if (type == 35)
						{
							scale = 1.5f;
						}
						if (type == 36)
						{
							scale = 1.5f;
						}
						if (type == 50)
						{
							scale = 1.5f;
						}
						if (type == 113)
						{
							scale = 1.5f;
						}
						if (type == 114)
						{
							scale = 1.5f;
						}
						if (type == 125)
						{
							scale = 1.5f;
						}
						if (type == 126)
						{
							scale = 1.5f;
						}
						if (type == 127)
						{
							scale = 1.5f;
						}
						if (type == 128)
						{
							scale = 1.5f;
						}
						if (type == 129)
						{
							scale = 1.5f;
						}
						if (type == 130)
						{
							scale = 1.5f;
						}
						if (type == 131)
						{
							scale = 1.5f;
						}
						if (type == 222)
						{
							scale = 1.5f;
						}
						if (type >= 245 && type <= 249)
						{
							scale = 1.5f;
						}
						if (type == 262)
						{
							scale = 1.5f;
						}
						if (type == 266)
						{
							scale = 1.5f;
						}
						if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
						{
							scale = 1.5f;
						}
						if (type == 87)
						{
							scale = 1.5f;
						}
						if (type == 510 || type == 454 || type == 621)
						{
							scale = 1.5f;
						}
						if (type == 439 || type == 370)
						{
							scale = 1.5f;
						}
						float num3 = 10f;
						if (Main.HealthBarDrawSettings == 2)
						{
							num3 -= 34f;
						}
						if (!NPCLoader.DrawHealthBar(Main.npc[num2], ref scale))
						{
							Main.npc[num2].position -= Main.npc[num2].netOffset;
							goto IL_CE9;
						}
						if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[num2].ai[0] != 5f))
						{
							if (type >= 134 && type <= 136)
							{
								scale = 1.5f;
								if (!flag)
								{
									flag = true;
									Vector2 vector = default(Vector2);
									float num4 = 999999f;
									for (int j = 0; j < 200; j++)
									{
										if (Main.npc[j].active && Main.npc[j].type >= 134 && Main.npc[j].type <= 136)
										{
											Vector2 vector2 = Main.player[Main.myPlayer].Center - Main.npc[j].Center;
											if (vector2.Length() < num4 && Collision.CanHit(Main.player[Main.myPlayer].Center, 1, 1, Main.npc[j].Center, 1, 1))
											{
												num4 = vector2.Length();
												vector = Main.npc[j].position;
											}
										}
									}
									if (num4 < (float)Main.screenWidth)
									{
										if (Main.destroyerHB.X < 100f && Main.destroyerHB.Y < 100f)
										{
											Main.destroyerHB = vector;
										}
										else
										{
											Main.destroyerHB = (Main.destroyerHB * 49f + vector) / 50f;
										}
										vector = Main.destroyerHB;
										int num5 = num2;
										if (type != 134 && Main.npc[num2].realLife != -1)
										{
											num5 = Main.npc[num2].realLife;
										}
										float num6 = Lighting.Brightness((int)((Main.npc[num2].position.X + (float)(Main.npc[num2].width / 2)) / 16f), (int)((Main.npc[num2].position.Y + (float)(Main.npc[num2].height / 2) + Main.npc[num2].gfxOffY) / 16f));
										num6 = (num6 + 1f) / 2f;
										this.DrawHealthBar(vector.X + (float)(Main.npc[num2].width / 2), vector.Y + (float)(Main.npc[num2].height / 2), Main.npc[num5].life, Main.npc[num5].lifeMax, num6, scale, false);
									}
									else
									{
										Main.destroyerHB = new Vector2(0f, 0f);
									}
								}
							}
							else
							{
								switch (type)
								{
								case 7:
									this.DrawInterface_Healthbar_Worm(Main.npc[num2], 9, scale);
									break;
								case 8:
								case 9:
								case 11:
								case 12:
									break;
								case 10:
									this.DrawInterface_Healthbar_Worm(Main.npc[num2], 12, scale);
									break;
								default:
									switch (type)
									{
									case 87:
										this.DrawInterface_Healthbar_Worm(Main.npc[num2], 92, scale);
										goto IL_BC8;
									case 88:
									case 89:
									case 90:
									case 91:
									case 92:
									case 96:
									case 97:
										goto IL_BC8;
									case 95:
										this.DrawInterface_Healthbar_Worm(Main.npc[num2], 97, scale);
										goto IL_BC8;
									}
									if (type <= 100)
									{
										if (type <= 41)
										{
											if (type == 39)
											{
												this.DrawInterface_Healthbar_Worm(Main.npc[num2], 41, scale);
												break;
											}
											if (type - 40 <= 1)
											{
												break;
											}
										}
										else
										{
											if (type == 98)
											{
												this.DrawInterface_Healthbar_Worm(Main.npc[num2], 100, scale);
												break;
											}
											if (type - 99 <= 1)
											{
												break;
											}
										}
									}
									else if (type <= 414)
									{
										if (type == 412)
										{
											this.DrawInterface_Healthbar_Worm(Main.npc[num2], 414, scale);
											break;
										}
										if (type - 413 <= 1)
										{
											break;
										}
									}
									else
									{
										if (type == 454)
										{
											this.DrawInterface_Healthbar_Worm(Main.npc[num2], 459, scale);
											break;
										}
										if (type - 455 <= 4)
										{
											break;
										}
									}
									if (type <= 119)
									{
										if (type == 117)
										{
											this.DrawInterface_Healthbar_Worm(Main.npc[num2], 119, scale);
											break;
										}
										if (type - 118 <= 1)
										{
											break;
										}
									}
									else
									{
										switch (type)
										{
										case 510:
											this.DrawInterface_Healthbar_Worm(Main.npc[num2], 512, scale);
											goto IL_BC8;
										case 511:
										case 512:
										case 514:
										case 515:
											goto IL_BC8;
										case 513:
											this.DrawInterface_Healthbar_Worm(Main.npc[num2], 515, scale);
											goto IL_BC8;
										default:
											if (type == 621)
											{
												this.DrawInterface_Healthbar_Worm(Main.npc[num2], 623, scale);
												goto IL_BC8;
											}
											if (type - 622 <= 1)
											{
												goto IL_BC8;
											}
											break;
										}
									}
									if (Main.HealthBarDrawSettings == 1)
									{
										num3 += Main.NPCAddHeight(Main.npc[num2]);
										this.DrawHealthBar(Main.npc[num2].position.X + (float)(Main.npc[num2].width / 2), Main.npc[num2].position.Y + (float)Main.npc[num2].height + num3 + Main.npc[num2].gfxOffY, Main.npc[num2].life, Main.npc[num2].lifeMax, Lighting.Brightness((int)((Main.npc[num2].position.X + (float)(Main.npc[num2].width / 2)) / 16f), (int)((Main.npc[num2].position.Y + (float)(Main.npc[num2].height / 2) + Main.npc[num2].gfxOffY) / 16f)), scale, false);
									}
									else if (Main.HealthBarDrawSettings == 2)
									{
										num3 -= Main.NPCAddHeight(Main.npc[num2]) / 2f;
										this.DrawHealthBar(Main.npc[num2].position.X + (float)(Main.npc[num2].width / 2), Main.npc[num2].position.Y + num3 + Main.npc[num2].gfxOffY, Main.npc[num2].life, Main.npc[num2].lifeMax, Lighting.Brightness((int)((Main.npc[num2].position.X + (float)(Main.npc[num2].width / 2)) / 16f), (int)((Main.npc[num2].position.Y + (float)(Main.npc[num2].height / 2) + Main.npc[num2].gfxOffY) / 16f)), scale, false);
									}
									break;
								}
							}
						}
					}
					else if (!Main.npc[num2].dontTakeDamage && Main.npc[num2].nameOver > 0f && PlayerInput.UsingGamepad && num2 == num)
					{
						Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, Main.npc[num2].GivenOrTypeName, Vector2.One, -1f);
						Vector2 vector3 = Main.npc[num2].Bottom - Main.screenPosition + new Vector2(0f, 10f);
						int num11;
						Vector2 pos;
						if (NPC.GetNPCLocation(num2, true, true, out num11, out pos))
						{
							vector3 = pos - Main.screenPosition + new Vector2(0f, (float)(10 + Main.npc[num2].height / 2));
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								vector3 = Main.ReverseGravitySupport(vector3, (float)(-(float)Main.npc[num2].height - 20));
							}
							Vector2 origin = stringSize * new Vector2(0.5f, 0f);
							ChatManager.DrawColorCodedStringShadow(Main.spriteBatch, FontAssets.MouseText.Value, Main.npc[num2].GivenOrTypeName, vector3, Color.Black * Main.npc[num2].nameOver * 0.5f, 0f, origin, Vector2.One, -1f, 2f);
							ChatManager.DrawColorCodedString(Main.spriteBatch, FontAssets.MouseText.Value, Main.npc[num2].GivenOrTypeName, vector3, Color.White * Main.npc[num2].nameOver, 0f, origin, Vector2.One, -1f, false);
						}
					}
					IL_BC8:
					if (Main.npc[num2].type == 548 && !Main.npc[num2].dontTakeDamageFromHostiles && DD2Event.TimeLeftBetweenWaves > 0 && !Main.hideUI)
					{
						Vector2 position = Main.npc[num2].Bottom - Main.screenPosition + new Vector2(0f, -100f);
						int num7 = DD2Event.TimeLeftBetweenWaves / 60;
						DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(0, 1);
						defaultInterpolatedStringHandler.AppendFormatted<int>(num7);
						string text = defaultInterpolatedStringHandler.ToStringAndClear();
						DynamicSpriteFont value = FontAssets.MouseText.Value;
						float num8 = 1f;
						Vector2 origin2 = value.MeasureString(text) * num8 * new Vector2(0.5f, 0.5f);
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, value, text, position, Color.White, 0f, origin2, Vector2.One * num8, -1f, 2f);
					}
					Main.npc[num2].position -= Main.npc[num2].netOffset;
				}
				IL_CE9:;
			}
			for (int k = 0; k < 255; k++)
			{
				if (k != Main.myPlayer && Main.player[k].active && !Main.player[k].ghost && !Main.player[k].dead && !Main.player[k].invis && Main.player[k].statLife != Main.player[k].statLifeMax2)
				{
					if (Main.HealthBarDrawSettings == 1)
					{
						int num9 = 10;
						this.DrawHealthBar(Main.player[k].position.X + (float)(Main.player[k].width / 2), Main.player[k].position.Y + (float)Main.player[k].height + (float)num9 + Main.player[k].gfxOffY, Main.player[k].statLife, Main.player[k].statLifeMax2, Main.player[k].stealth * Lighting.Brightness((int)((Main.player[k].position.X + (float)(Main.player[k].width / 2)) / 16f), (int)((Main.player[k].position.Y + (float)(Main.player[k].height / 2) + Main.player[k].gfxOffY) / 16f)), 1f, false);
					}
					else if (Main.HealthBarDrawSettings == 2)
					{
						int num10 = -20;
						this.DrawHealthBar(Main.player[k].position.X + (float)(Main.player[k].width / 2), Main.player[k].position.Y + (float)num10 + Main.player[k].gfxOffY, Main.player[k].statLife, Main.player[k].statLifeMax2, Main.player[k].stealth * Lighting.Brightness((int)((Main.player[k].position.X + (float)(Main.player[k].width / 2)) / 16f), (int)((Main.player[k].position.Y + (float)(Main.player[k].height / 2) + Main.player[k].gfxOffY) / 16f)), 1f, false);
					}
				}
			}
		}

		// Token: 0x0600053D RID: 1341 RVA: 0x0010BB10 File Offset: 0x00109D10
		private void DrawInterface_Healthbar_Worm(NPC head, int tailID, float scale)
		{
			NPC nPC = head;
			for (int i = head.whoAmI + 1; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == tailID)
				{
					nPC = Main.npc[i];
					break;
				}
			}
			Vector2 vector = (head.position + nPC.position) / 2f;
			this.DrawHealthBar(vector.X + (float)(head.width / 2), vector.Y + (float)(head.height / 2), head.life, head.lifeMax, Lighting.Brightness((int)((head.position.X + (float)(head.width / 2)) / 16f), (int)((head.position.Y + (float)(head.height / 2) + head.gfxOffY) / 16f)), scale, false);
		}

		// Token: 0x0600053E RID: 1342 RVA: 0x0010BBF1 File Offset: 0x00109DF1
		private static void DrawInterface_13_AchievementCompletePopups()
		{
			InGameNotificationsTracker.DrawInGame(Main.spriteBatch);
		}

		// Token: 0x0600053F RID: 1343 RVA: 0x0010BC00 File Offset: 0x00109E00
		private static bool DrawInterface_12_IngameFancyUI()
		{
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
			Main.InGameUI.Draw(Main.spriteBatch, Main._drawInterfaceGameTime);
			bool result = true;
			if (Main.inFancyUI && !IngameFancyUI.Draw(Main.spriteBatch, Main._drawInterfaceGameTime))
			{
				result = false;
				Main.DrawPendingMouseText();
			}
			return result;
		}

		// Token: 0x06000540 RID: 1344 RVA: 0x0010BC74 File Offset: 0x00109E74
		private bool DrawInterface_11_IngameOptionsMenu()
		{
			bool result = true;
			if (Main.ingameOptionsWindow)
			{
				this.DrawInterface_16_MapOrMinimap();
				PlayerInput.SetZoom_UI();
				Matrix uIScaleMatrix = Main.UIScaleMatrix;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, null, null, null, null, null, uIScaleMatrix);
				IngameOptions.Draw(this, Main.spriteBatch);
				this.DrawInterface_40_InteractItemIcon();
				Main.DrawPendingMouseText();
				result = false;
				Main._MouseOversCanClear = true;
			}
			return result;
		}

		// Token: 0x06000541 RID: 1345 RVA: 0x0010BCD8 File Offset: 0x00109ED8
		private static bool DrawInterface_8_CheckF11UIHideToggle()
		{
			bool result = true;
			if (Main.hideUI)
			{
				Main.maxQ = true;
				result = false;
				Main._MouseOversCanClear = true;
				Main.DrawPendingMouseText();
			}
			return result;
		}

		// Token: 0x06000542 RID: 1346 RVA: 0x0010BD04 File Offset: 0x00109F04
		private static bool DrawInterface_10_CheckCaptureManager()
		{
			bool result = true;
			PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled_MouseInWorld);
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(Main.spriteBatch);
				result = false;
				Main._MouseOversCanClear = true;
				PlayerInput.SetZoom_UI();
				Matrix uIScaleMatrix = Main.UIScaleMatrix;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, null, null, null, null, null, uIScaleMatrix);
				Main.DrawPendingMouseText();
			}
			return result;
		}

		// Token: 0x06000543 RID: 1347 RVA: 0x0010BD72 File Offset: 0x00109F72
		private static void DrawInterface_9_WireSelection()
		{
			if (!Main.hideUI)
			{
				Main.DrawInterface_Resources_GolfPower();
				Main.DrawInterface_GolfBallIndicator();
			}
			WiresUI.HandleWiresUI(Main.spriteBatch);
		}

		// Token: 0x06000544 RID: 1348 RVA: 0x0010BD8F File Offset: 0x00109F8F
		private static void DrawInterface_0_InterfaceLogic1()
		{
			if (Main.player[Main.myPlayer].selectedItem == 58 && Main.player[Main.myPlayer].itemAnimation > 0)
			{
				Main.mouseLeftRelease = false;
			}
		}

		// Token: 0x06000545 RID: 1349 RVA: 0x0010BDC0 File Offset: 0x00109FC0
		private void DrawInterface_7_TownNPCHouseBanners()
		{
			if (Main.EquipPage != 1 && (!UILinkPointNavigator.Shortcuts.NPCS_IconsDisplay || !PlayerInput.UsingGamepad))
			{
				return;
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawNPCHousesInWorld();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawNPCHousesInWorld();
		}

		// Token: 0x06000546 RID: 1350 RVA: 0x0010BE10 File Offset: 0x0010A010
		private static void DrawInterface_6_TileGridOption()
		{
			bool flag = Main.MouseShowBuildingGrid && !Main.SmartCursorIsUsed;
			if (PlayerInput.UsingGamepad && !Main.SmartCursorIsUsed)
			{
				bool usingGamepadUI = PlayerInput.UsingGamepadUI;
			}
			if (flag && !Main.player[Main.myPlayer].dead && !PlayerInput.CursorIsBusy)
			{
				float num = Main.player[Main.myPlayer].velocity.Length();
				float num2 = 6f;
				float value = MathHelper.Lerp(0f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
				Main.MouseBuildingGridAlpha = MathHelper.Lerp(Main.MouseBuildingGridAlpha, value, 0.2f);
				value = Main.MouseBuildingGridAlpha;
				if (value > 0f)
				{
					Vector2 position = Main.MouseWorld.ToTileCoordinates().ToVector2() * 16f;
					new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
					bool flag2 = Main.drawToScreen;
					position -= Main.screenPosition;
					position += new Vector2(8f);
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						position.Y = (float)Main.screenHeight - position.Y;
					}
					Texture2D value2 = TextureAssets.CursorRadial.Value;
					Main.spriteBatch.Draw(value2, position, null, Color.White * 0.5f * value, 0f, value2.Size() / 2f, 1f, 0, 0f);
					return;
				}
			}
			else
			{
				Main.MouseBuildingGridAlpha = MathHelper.Clamp(Main.MouseBuildingGridAlpha - 0.05f, 0f, 1f);
			}
		}

		// Token: 0x06000547 RID: 1351 RVA: 0x0010BFC4 File Offset: 0x0010A1C4
		private static void DrawInterface_5_GamepadLockOn()
		{
			LockOnHelper.Draw(Main.spriteBatch);
		}

		// Token: 0x06000548 RID: 1352 RVA: 0x0010BFD0 File Offset: 0x0010A1D0
		private static void DrawInterface_4_Ruler()
		{
			if (!Main.player[Main.myPlayer].rulerLine || Main.player[Main.myPlayer].builderAccStatus[0] != 0)
			{
				return;
			}
			float num = Main.player[Main.myPlayer].velocity.Length();
			float num2 = 6f;
			float num3 = 2f;
			if (num > num2)
			{
				return;
			}
			float num4 = 1f;
			if (num >= num3)
			{
				num4 = 1f - (num - num3) / num2;
			}
			int num5 = 1;
			if ((float)Main.mouseX + Main.screenPosition.X < Main.player[Main.myPlayer].Center.X)
			{
				num5 = -1;
			}
			int num6 = (int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2)) / 16;
			int num7 = (int)(Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - 2f) / 16;
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				num7--;
			}
			Vector2 mouseWorld = Main.MouseWorld;
			if (Math.Abs(num6 - (int)(Main.MouseWorld.X / 16f)) > 0)
			{
				num6 += num5;
			}
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				mouseWorld.Y += 16f;
			}
			mouseWorld /= 16f;
			new Vector2((float)num6, (float)num7);
			int num8 = (int)mouseWorld.X - num6;
			int num9 = (int)mouseWorld.Y - num7;
			Math.Abs(num8);
			Math.Abs(num9);
			Main.rulerLineDisplayValues.X = num8;
			Main.rulerLineDisplayValues.Y = num9;
			if (num8 == 0 && num9 == 0)
			{
				return;
			}
			Texture2D value = TextureAssets.Extra[2].Value;
			Rectangle value2;
			value2..ctor(0, 0, 16, 16);
			int num10 = num6;
			int num11 = num7;
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				num11--;
			}
			float r = 0.24f;
			float g = 0.8f;
			float b = 0.9f;
			float a = 1f;
			float num12 = 0.8f;
			Color color = new Color(r, g, b, a) * num12 * num4;
			Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)num10, (float)num11) * 16f - Main.screenPosition, 16f), new Rectangle?(value2), color, 0f, Vector2.Zero, 1f, 0, 0f);
			if (num8 != 0)
			{
				int num13 = Math.Sign(num8);
				value2.Y = ((num13 == 1) ? 16 : 32);
				while (num8 != 0)
				{
					num8 -= num13;
					num10 += num13;
					if (num8 == 0)
					{
						value2.Y = 0;
					}
					color = new Color(r, g, b, a) * num12 * num4;
					Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)num10, (float)num11) * 16f - Main.screenPosition, 16f), new Rectangle?(value2), color, 0f, Vector2.Zero, 1f, 0, 0f);
				}
			}
			if (num9 == 0)
			{
				return;
			}
			int num14 = Math.Sign(num9);
			value2.Y = ((num14 == 1) ? 48 : 64);
			while (num9 != 0)
			{
				num9 -= num14;
				num11 += num14;
				if (num9 == 0)
				{
					value2.Y = 0;
				}
				color = new Color(r, g, b, a) * num12 * num4;
				Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)num10, (float)num11) * 16f - Main.screenPosition, 16f), new Rectangle?(value2), color, 0f, Vector2.Zero, 1f, 0, 0f);
			}
		}

		// Token: 0x06000549 RID: 1353 RVA: 0x0010C3E4 File Offset: 0x0010A5E4
		private static void DrawInterface_3_LaserRuler()
		{
			if (!Main.player[Main.myPlayer].rulerGrid || Main.player[Main.myPlayer].builderAccStatus[1] != 0)
			{
				return;
			}
			float num = Main.player[Main.myPlayer].velocity.Length();
			num = Vector2.Distance(Main.player[Main.myPlayer].position, Main.player[Main.myPlayer].shadowPos[2]);
			float num2 = 6f;
			Texture2D value = TextureAssets.Extra[68].Value;
			float num3 = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
			Vector2 vec = Main.screenPosition;
			vec += new Vector2(-50f);
			vec = vec.ToTileCoordinates().ToVector2() * 16f;
			int num4 = (Main.screenWidth + 100) / 16;
			int num5 = (Main.screenHeight + 100) / 16;
			Point point = Main.MouseWorld.ToTileCoordinates();
			point.X -= (int)vec.X / 16;
			point.Y -= (int)vec.Y / 16;
			Color color = new Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * num3;
			Color color2 = new Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * num3;
			Rectangle value2;
			value2..ctor(0, 18, 18, 18);
			vec -= Vector2.One;
			for (int i = 0; i < num4; i++)
			{
				for (int j = 0; j < num5; j++)
				{
					Color color3 = color;
					Vector2 zero = Vector2.Zero;
					if (i != point.X && j != point.Y)
					{
						if (i != point.X + 1)
						{
							value2.X = 0;
							value2.Width = 16;
						}
						else
						{
							value2.X = 2;
							value2.Width = 14;
							zero.X = 2f;
						}
						if (j != point.Y + 1)
						{
							value2.Y = 18;
							value2.Height = 16;
						}
						else
						{
							value2.Y = 2;
							value2.Height = 14;
							zero.Y = 2f;
						}
						Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)i, (float)j) * 16f - Main.screenPosition + vec + zero, 16f), new Rectangle?(value2), color3, 0f, Vector2.Zero, 1f, 0, 0f);
					}
				}
			}
			value2..ctor(0, 0, 16, 18);
			for (int k = 0; k < num4; k++)
			{
				if (k == point.X)
				{
					Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Main.screenPosition + vec, 16f), new Rectangle?(new Rectangle(0, 0, 16, 16)), color2, 0f, Vector2.Zero, 1f, 0, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Main.screenPosition + vec, 16f), new Rectangle?(value2), color2, 0f, Vector2.Zero, 1f, 0, 0f);
				}
			}
			value2..ctor(0, 0, 18, 16);
			for (int l = 0; l < num5; l++)
			{
				if (l != point.Y)
				{
					Main.spriteBatch.Draw(value, Main.ReverseGravitySupport(new Vector2((float)point.X, (float)l) * 16f - Main.screenPosition + vec, 16f), new Rectangle?(value2), color2, 0f, Vector2.Zero, 1f, 0, 0f);
				}
			}
		}

		// Token: 0x0600054A RID: 1354 RVA: 0x0010C839 File Offset: 0x0010AA39
		private static void DrawInterface_2_SmartCursorTargets()
		{
			Main.DrawSmartCursor();
		}

		// Token: 0x0600054B RID: 1355 RVA: 0x0010C840 File Offset: 0x0010AA40
		private static void DrawInterface_1_1_DrawEmoteBubblesInWorld()
		{
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, null, SamplerState.PointClamp, null, null, null, Main.GameViewMatrix.ZoomMatrix);
			EmoteBubble.DrawAll(Main.spriteBatch);
			if (Main.instance.currentNPCShowingChatBubble != -1)
			{
				Main.DrawNPCChatBubble(Main.instance.currentNPCShowingChatBubble);
			}
			Main.instance.currentNPCShowingChatBubble = -1;
		}

		// Token: 0x0600054C RID: 1356 RVA: 0x0010C8A8 File Offset: 0x0010AAA8
		private static void DrawInterface_1_2_DrawEntityMarkersInWorld()
		{
			Player localPlayer = Main.LocalPlayer;
			if (localPlayer.dead || !localPlayer.HeldItem.summon)
			{
				return;
			}
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, null, SamplerState.PointClamp, null, null, null, Main.GameViewMatrix.ZoomMatrix);
			Texture2D value = TextureAssets.Extra[199].Value;
			Vector2 zero = Vector2.Zero;
			int minionAttackTargetNPC = localPlayer.MinionAttackTargetNPC;
			Rectangle value2;
			value2..ctor((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.Hitbox.Intersects(value2))
				{
					Vector2 vector = nPC.Center - Main.screenPosition;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						vector.Y = (float)Main.screenHeight - vector.Y;
					}
					Vector2 position = vector + zero;
					if (i == minionAttackTargetNPC)
					{
						int frameY = (int)(Main.GlobalTimeWrappedHourly * 10f) % 4;
						Rectangle rectangle = value.Frame(1, 4, 0, frameY, 0, -2);
						Vector2 origin = rectangle.Size() / 2f;
						Color color = Color.White * 0.7f;
						color.A /= 2;
						Main.spriteBatch.Draw(value, position, new Rectangle?(rectangle), color, 0f, origin, 1f, 0, 0f);
					}
				}
			}
		}

		// Token: 0x0600054D RID: 1357 RVA: 0x0010CA4F File Offset: 0x0010AC4F
		private static void MouseOversTryToClear()
		{
			if (Main._MouseOversCanClear)
			{
				Main._MouseOversCanClear = false;
				Main.MouseOversClear();
			}
		}

		// Token: 0x0600054E RID: 1358 RVA: 0x0010CA64 File Offset: 0x0010AC64
		private static void MouseOversClear()
		{
			Main.player[Main.myPlayer].cursorItemIconEnabled = false;
			Main.player[Main.myPlayer].cursorItemIconID = 0;
			Main.player[Main.myPlayer].cursorItemIconText = string.Empty;
			Main.player[Main.myPlayer].cursorItemIconPush = 0;
			Main.signHover = -1;
		}

		// Token: 0x0600054F RID: 1359 RVA: 0x0010CABF File Offset: 0x0010ACBF
		public static void ItemIconCacheUpdate(int selectedItemID)
		{
			Main._itemIconCacheScreenPosition = Main.MouseScreen;
			Main._itemIconCacheSelectedItemID = selectedItemID;
			Main._itemIconCacheTime = 10;
		}

		// Token: 0x06000550 RID: 1360 RVA: 0x0010CAD8 File Offset: 0x0010ACD8
		public static void ItemIconCacheVerification()
		{
			if (Main._itemIconCacheTime > 0)
			{
				float num = Vector2.Distance(Main._itemIconCacheScreenPosition, Main.MouseScreen);
				if (num != 0f)
				{
					Main._itemIconCacheTime--;
				}
				if (num > 4f)
				{
					Main._itemIconCacheTime = 0;
				}
				if (Main._itemIconCacheSelectedItemID != Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type)
				{
					Main._itemIconCacheTime = 0;
				}
			}
		}

		// Token: 0x06000551 RID: 1361 RVA: 0x0010CB50 File Offset: 0x0010AD50
		public static void DrawWallOfFish()
		{
			List<int> list = new List<int>();
			for (int i = 2297; i <= 2321; i++)
			{
				list.Add(i);
			}
			for (int j = 2450; j <= 2488; j++)
			{
				list.Add(j);
			}
			for (int k = 0; k < 5; k++)
			{
				float num = 10f;
				Vector2 vector;
				vector..ctor((float)Main.screenWidth / num * (Main.GlobalTimeWrappedHourly % num), -100f);
				vector.X += (float)(14 * k);
				vector.Y += (float)(k % 2 * 14);
				int num2 = 30 * k;
				while (vector.Y < (float)(Main.screenHeight + 100))
				{
					if (++num2 >= list.Count)
					{
						num2 = 0;
					}
					vector.Y += 26f;
					Main.instance.LoadItem(list[num2]);
					Texture2D value = TextureAssets.Item[list[num2]].Value;
					Point point = (vector + Main.screenPosition).ToTileCoordinates();
					Main.spriteBatch.Draw(value, vector, null, Lighting.GetColor(point.X, point.Y), 0.7853982f, value.Size() / 2f, 1f, 0, 0f);
				}
			}
		}

		// Token: 0x06000552 RID: 1362 RVA: 0x0010CCBC File Offset: 0x0010AEBC
		public static void DrawWallOfStars()
		{
			bool flag = true;
			if (flag)
			{
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			}
			int num = Projectile.NewProjectile(Projectile.GetNoneSource(), Vector2.Zero, Vector2.UnitX, 12, 0, 0f, Main.myPlayer, 0f, 0f, 0f);
			Projectile projectile = Main.projectile[num];
			for (int i = 0; i < 5; i++)
			{
				float num2 = 10f;
				Vector2 vector;
				vector..ctor((float)Main.screenWidth / num2 * (Main.GlobalTimeWrappedHourly % num2), -100f);
				vector.X += (float)(14 * i);
				vector.Y += (float)(i % 2 * 14);
				while (vector.Y < (float)(Main.screenHeight + 100))
				{
					vector.Y += 26f;
					projectile.position = Vector2.One * 10f;
					projectile.velocity = Vector2.UnitX * 10f;
					projectile.rotation = Main.GlobalTimeWrappedHourly * 6.2831855f;
					projectile.Update(num);
					projectile.position = vector + Main.screenPosition;
					Main.instance.DrawProj(num);
				}
			}
			projectile.position = Vector2.One * 10f;
			projectile.Kill();
			if (flag)
			{
				Main.spriteBatch.End();
			}
		}

		// Token: 0x06000553 RID: 1363 RVA: 0x0010CE34 File Offset: 0x0010B034
		private static void DrawSmartCursor()
		{
			if (Main.SmartCursorShowing && !Main.player[Main.myPlayer].dead)
			{
				Vector2 vector = new Vector2((float)Main.SmartCursorX, (float)Main.SmartCursorY) * 16f;
				new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				bool flag = Main.drawToScreen;
				vector -= Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
				}
				Color newColor = Lighting.GetColor(Main.SmartCursorX, Main.SmartCursorY) * 1f;
				Rectangle value;
				value..ctor(0, 0, 1, 1);
				float r = 1f;
				float g = 0.9f;
				float b = 0.1f;
				float a = 1f;
				float num = 0.6f;
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				b = 0.3f;
				g = 0.95f;
				num = (a = 1f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), 0, 0f);
			}
		}

		// Token: 0x06000554 RID: 1364 RVA: 0x0010D204 File Offset: 0x0010B404
		private static void DrawSmartInteract()
		{
			if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1 && Main.SmartInteractProj == -1 && !Main.player[Main.myPlayer].dead)
			{
				Vector2 vector = new Vector2((float)Main.SmartInteractX, (float)Main.SmartInteractY) * 16f;
				new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				bool flag = Main.drawToScreen;
				vector -= Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
				}
				Color newColor = Lighting.GetColor(Main.SmartInteractX, Main.SmartInteractY) * 1f;
				Rectangle value;
				value..ctor(0, 0, 1, 1);
				float r = 0.1f;
				float g = 0.9f;
				float b = 1f;
				float a = 1f;
				float num = 0.6f;
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, 0, 0f);
				r = 0.3f;
				g = 0.95f;
				num = (a = 1f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, new Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), 0, 0f);
			}
		}

		// Token: 0x06000555 RID: 1365 RVA: 0x0010D5EC File Offset: 0x0010B7EC
		private void DrawInterface_30_Hotbar()
		{
			try
			{
				this.GUIHotbarDrawInner();
			}
			catch (Exception e)
			{
				if (!Main.ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
		}

		// Token: 0x06000556 RID: 1366 RVA: 0x0010D624 File Offset: 0x0010B824
		public void GUIChatDraw()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
					{
						this.GUIChatDrawInner();
					}
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
			{
				this.GUIChatDrawInner();
			}
		}

		// Token: 0x06000557 RID: 1367 RVA: 0x0010D6B4 File Offset: 0x0010B8B4
		public static void DrawItemIcon(SpriteBatch spriteBatch, Item theItem, Vector2 screenPositionForItemCenter, Color itemLightColor, float sizeLimit)
		{
			Texture2D itemTexture;
			Rectangle frame;
			Main.GetItemDrawFrame(theItem.type, out itemTexture, out frame);
			Color itemLight;
			float finalDrawScale;
			ItemSlot.DrawItem_GetColorAndScale(theItem, theItem.scale, ref itemLightColor, sizeLimit, ref frame, out itemLight, out finalDrawScale);
			spriteBatch.Draw(itemTexture, screenPositionForItemCenter, new Rectangle?(frame), itemLight, 0f, frame.Size() / 2f, finalDrawScale, 0, 0f);
			if (theItem.color != Color.Transparent)
			{
				spriteBatch.Draw(itemTexture, screenPositionForItemCenter, new Rectangle?(frame), theItem.GetColor(itemLightColor), 0f, frame.Size() / 2f, finalDrawScale, 0, 0f);
			}
		}

		// Token: 0x06000558 RID: 1368 RVA: 0x0010D754 File Offset: 0x0010B954
		private unsafe void DrawInfoAccs()
		{
			if (!Main.CanShowInfoAccs)
			{
				return;
			}
			int num2 = -10;
			int num3 = 0;
			string text = "";
			float num4 = 215f;
			int startX = 0;
			if (GameCulture.FromCultureName(GameCulture.CultureName.Russian).IsActive)
			{
				startX = -50;
				num4 += 50f;
			}
			Color color;
			color..ctor(100, 100, 100, (int)Main.mouseTextColor);
			int startingDisplay;
			int endingDisplay;
			Main.InfoDisplayPageHandler(startX, ref text, out startingDisplay, out endingDisplay);
			int showableCount = 0;
			for (int i = 0; i < InfoDisplayLoader.InfoDisplayCount; i++)
			{
				string text2 = "";
				string text3 = "";
				Color infoTextColor;
				infoTextColor..ctor((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				Color infoTextShadowColor = Color.Black;
				InfoDisplay info = InfoDisplayLoader.InfoDisplays[i];
				if (InfoDisplayLoader.Active(info) && (!Main.player[Main.myPlayer].hideInfo[info.Type] || Main.playerInventory))
				{
					showableCount++;
					if (showableCount > startingDisplay)
					{
						int num5;
						if (info == InfoDisplay.Watches)
						{
							num5 = 0;
							text3 = Lang.inter[95].Value;
							string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
							double num6 = Main.time;
							if (!Main.dayTime)
							{
								num6 += 54000.0;
							}
							num6 = num6 / 86400.0 * 24.0;
							double num7 = 7.5;
							num6 = num6 - num7 - 12.0;
							if (num6 < 0.0)
							{
								num6 += 24.0;
							}
							if (num6 >= 12.0)
							{
								textValue = Language.GetTextValue("GameUI.TimePastMorning");
							}
							int num8 = (int)num6;
							double num9 = num6 - (double)num8;
							num9 = (double)((int)(num9 * 60.0));
							string text4 = string.Concat(num9);
							if (num9 < 10.0)
							{
								text4 = "0" + text4;
							}
							if (num8 > 12)
							{
								num8 -= 12;
							}
							if (num8 == 0)
							{
								num8 = 12;
							}
							if (Main.player[Main.myPlayer].accWatch == 1)
							{
								text4 = "00";
							}
							else if (Main.player[Main.myPlayer].accWatch == 2)
							{
								text4 = ((num9 >= 30.0) ? "30" : "00");
							}
							text2 = string.Concat(new string[]
							{
								num8.ToString(),
								":",
								text4,
								" ",
								textValue
							});
						}
						else if (info == InfoDisplay.WeatherRadio)
						{
							num5 = 1;
							text3 = Lang.inter[96].Value;
							text2 = (Main.IsItStorming ? Language.GetTextValue("GameUI.Storm") : (((double)Main.maxRaining > 0.6) ? Language.GetTextValue("GameUI.HeavyRain") : (((double)Main.maxRaining >= 0.2) ? Language.GetTextValue("GameUI.Rain") : ((Main.maxRaining > 0f) ? Language.GetTextValue("GameUI.LightRain") : ((Main.cloudBGActive > 0f) ? Language.GetTextValue("GameUI.Overcast") : ((Main.numClouds > 90) ? Language.GetTextValue("GameUI.MostlyCloudy") : ((Main.numClouds > 55) ? Language.GetTextValue("GameUI.Cloudy") : ((Main.numClouds <= 15) ? Language.GetTextValue("GameUI.Clear") : Language.GetTextValue("GameUI.PartlyCloudy")))))))));
							int num10 = (int)(Main.windSpeedCurrent * 50f);
							if (num10 < 0)
							{
								text2 += Language.GetTextValue("GameUI.EastWind", Math.Abs(num10));
							}
							else if (num10 > 0)
							{
								text2 += Language.GetTextValue("GameUI.WestWind", num10);
							}
							if (Sandstorm.Happening)
							{
								if (Main.GlobalTimeWrappedHourly % 10f >= 5f)
								{
									text2 = Language.GetTextValue("GameUI.Sandstorm");
								}
								text2 += " +";
							}
						}
						else if (info == InfoDisplay.Sextant)
						{
							num5 = ((Main.bloodMoon && !Main.dayTime) ? 8 : ((!Main.eclipse || !Main.dayTime) ? 7 : 8));
							text3 = Lang.inter[102].Value;
							if (Main.moonPhase == 0)
							{
								text2 = Language.GetTextValue("GameUI.FullMoon");
							}
							else if (Main.moonPhase == 1)
							{
								text2 = Language.GetTextValue("GameUI.WaningGibbous");
							}
							else if (Main.moonPhase == 2)
							{
								text2 = Language.GetTextValue("GameUI.ThirdQuarter");
							}
							else if (Main.moonPhase == 3)
							{
								text2 = Language.GetTextValue("GameUI.WaningCrescent");
							}
							else if (Main.moonPhase == 4)
							{
								text2 = Language.GetTextValue("GameUI.NewMoon");
							}
							else if (Main.moonPhase == 5)
							{
								text2 = Language.GetTextValue("GameUI.WaxingCrescent");
							}
							else if (Main.moonPhase == 6)
							{
								text2 = Language.GetTextValue("GameUI.FirstQuarter");
							}
							else if (Main.moonPhase == 7)
							{
								text2 = Language.GetTextValue("GameUI.WaxingGibbous");
							}
						}
						else if (info == InfoDisplay.FishFinder)
						{
							bool flag13 = false;
							num5 = 2;
							text3 = Lang.inter[97].Value;
							for (int j = 0; j < 1000; j++)
							{
								if (Main.projectile[j].active && Main.projectile[j].owner == Main.myPlayer && Main.projectile[j].bobber)
								{
									flag13 = true;
									break;
								}
							}
							if (flag13)
							{
								text2 = Main.player[Main.myPlayer].displayedFishingInfo;
							}
							else
							{
								PlayerFishingConditions fishingConditions = Main.player[Main.myPlayer].GetFishingConditions();
								text2 = ((fishingConditions.BaitItemType != 2673) ? (Main.player[Main.myPlayer].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fishingConditions.FinalFishingLevel)) : Language.GetTextValue("GameUI.FishingWarning"));
							}
						}
						else if (info == InfoDisplay.MetalDetector)
						{
							num5 = 10;
							text3 = Lang.inter[104].Value;
							if (Main.SceneMetrics.bestOre <= 0)
							{
								text2 = Language.GetTextValue("GameUI.NoTreasureNearby");
								infoTextColor = color;
							}
							else
							{
								int baseOption = 0;
								int num11 = Main.SceneMetrics.bestOre;
								if (Main.SceneMetrics.ClosestOrePosition != null)
								{
									Point value = Main.SceneMetrics.ClosestOrePosition.Value;
									Tile tileSafely = Framing.GetTileSafely(value);
									if (tileSafely.active())
									{
										MapHelper.GetTileBaseOption(value.X, value.Y, (int)(*tileSafely.type), tileSafely, ref baseOption);
										num11 = (int)(*tileSafely.type);
										if (TileID.Sets.BasicChest[num11] || TileID.Sets.BasicChestFake[num11])
										{
											baseOption = 0;
										}
									}
								}
								text2 = Language.GetTextValue("GameUI.OreDetected", Lang.GetMapObjectName(MapHelper.TileToLookup(num11, baseOption)));
							}
						}
						else if (info == InfoDisplay.LifeformAnalyzer)
						{
							num5 = 11;
							text3 = Lang.inter[105].Value;
							int num12 = 1300;
							int num13 = 0;
							int num14 = -1;
							if (Main.player[Main.myPlayer].accCritterGuideCounter <= 0)
							{
								Main.player[Main.myPlayer].accCritterGuideCounter = 15;
								for (int k = 0; k < 200; k++)
								{
									if (Main.npc[k].active && Main.npc[k].rarity > num13 && (Main.npc[k].Center - Main.player[Main.myPlayer].Center).Length() < (float)num12)
									{
										num14 = k;
										num13 = Main.npc[k].rarity;
									}
								}
								Main.player[Main.myPlayer].accCritterGuideNumber = (byte)num14;
							}
							else
							{
								Player player = Main.player[Main.myPlayer];
								player.accCritterGuideCounter -= 1;
								num14 = (int)Main.player[Main.myPlayer].accCritterGuideNumber;
							}
							if (num14 >= 0 && num14 < 200 && Main.npc[num14].active && Main.npc[num14].rarity > 0)
							{
								text2 = Main.npc[num14].GivenOrTypeName;
								this.DrawInfoAccs_AdjustInfoTextColorsForNPC(Main.npc[num14], ref infoTextColor, ref infoTextShadowColor);
							}
							else
							{
								text2 = Language.GetTextValue("GameUI.NoRareCreatures");
								infoTextColor = color;
							}
						}
						else if (info == InfoDisplay.Radar)
						{
							num5 = 5;
							text3 = Lang.inter[100].Value;
							int num15 = 2000;
							if (Main.player[Main.myPlayer].accThirdEyeCounter == 0)
							{
								Main.player[Main.myPlayer].accThirdEyeNumber = 0;
								Main.player[Main.myPlayer].accThirdEyeCounter = 15;
								for (int l = 0; l < 200; l++)
								{
									if (Main.npc[l].active && !Main.npc[l].friendly && Main.npc[l].damage > 0 && Main.npc[l].lifeMax > 5 && !Main.npc[l].dontCountMe && (Main.npc[l].Center - Main.player[Main.myPlayer].Center).Length() < (float)num15)
									{
										Player player2 = Main.player[Main.myPlayer];
										player2.accThirdEyeNumber += 1;
									}
								}
							}
							else
							{
								Player player3 = Main.player[Main.myPlayer];
								player3.accThirdEyeCounter -= 1;
							}
							if (Main.player[Main.myPlayer].accThirdEyeNumber != 0)
							{
								text2 = ((Main.player[Main.myPlayer].accThirdEyeNumber != 1) ? Language.GetTextValue("GameUI.EnemiesNearby", Main.player[Main.myPlayer].accThirdEyeNumber) : Language.GetTextValue("GameUI.OneEnemyNearby"));
							}
							else
							{
								text2 = Language.GetTextValue("GameUI.NoEnemiesNearby");
								infoTextColor = color;
							}
						}
						else if (info == InfoDisplay.TallyCounter)
						{
							num5 = 6;
							text3 = Lang.inter[101].Value;
							int lastCreatureHit = Main.player[Main.myPlayer].lastCreatureHit;
							if (lastCreatureHit <= 0)
							{
								text2 = Language.GetTextValue("GameUI.NoKillCount");
								infoTextColor = color;
							}
							else
							{
								text2 = Lang.GetNPCNameValue(Item.BannerToNPC(lastCreatureHit)) + ": " + NPC.killCount[lastCreatureHit].ToString();
							}
						}
						else if (info == InfoDisplay.DPSMeter)
						{
							num5 = 12;
							text3 = Lang.inter[106].Value;
							Main.player[Main.myPlayer].checkDPSTime();
							if (Main.player[Main.myPlayer].getDPS() == 0)
							{
								text2 = Language.GetTextValue("GameUI.NoDPS");
								infoTextColor = color;
							}
							else
							{
								text2 = Language.GetTextValue("GameUI.DPS", Main.player[Main.myPlayer].getDPS());
							}
						}
						else if (info == InfoDisplay.Stopwatch)
						{
							num5 = 9;
							text3 = Lang.inter[103].Value;
							Vector2 vector = Main.player[Main.myPlayer].velocity + Main.player[Main.myPlayer].instantMovementAccumulatedThisFrame;
							if (Main.player[Main.myPlayer].mount.Active && Main.player[Main.myPlayer].mount.IsConsideredASlimeMount && Main.player[Main.myPlayer].velocity.Y != 0f && !Main.player[Main.myPlayer].SlimeDontHyperJump)
							{
								vector.Y += Main.player[Main.myPlayer].velocity.Y;
							}
							int num16 = (int)(1f + vector.Length() * 6f);
							if (num16 > Main.player[Main.myPlayer].speedSlice.Length)
							{
								num16 = Main.player[Main.myPlayer].speedSlice.Length;
							}
							float num17 = 0f;
							for (int num18 = num16 - 1; num18 > 0; num18--)
							{
								Main.player[Main.myPlayer].speedSlice[num18] = Main.player[Main.myPlayer].speedSlice[num18 - 1];
							}
							Main.player[Main.myPlayer].speedSlice[0] = vector.Length();
							for (int m = 0; m < Main.player[Main.myPlayer].speedSlice.Length; m++)
							{
								if (m < num16)
								{
									num17 += Main.player[Main.myPlayer].speedSlice[m];
								}
								else
								{
									Main.player[Main.myPlayer].speedSlice[m] = num17 / (float)num16;
								}
							}
							num17 /= (float)num16;
							int num19 = 42240;
							int num20 = 216000;
							float num21 = num17 * (float)num20 / (float)num19;
							if (!Main.player[Main.myPlayer].merman && !Main.player[Main.myPlayer].ignoreWater)
							{
								if (Main.player[Main.myPlayer].honeyWet)
								{
									num21 /= 4f;
								}
								else if (Main.player[Main.myPlayer].wet)
								{
									num21 /= 2f;
								}
							}
							text2 = Language.GetTextValue("GameUI.Speed", Math.Round((double)num21));
						}
						else if (info == InfoDisplay.Compass)
						{
							num5 = 3;
							text3 = Lang.inter[98].Value;
							int num22 = (int)((Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2)) * 2f / 16f - (float)Main.maxTilesX);
							text2 = ((num22 > 0) ? Language.GetTextValue("GameUI.CompassEast", num22) : ((num22 >= 0) ? Language.GetTextValue("GameUI.CompassCenter") : Language.GetTextValue("GameUI.CompassWest", -num22)));
						}
						else if (info == InfoDisplay.DepthMeter)
						{
							num5 = 4;
							text3 = Lang.inter[99].Value;
							int num23 = (int)((double)((Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height) * 2f / 16f) - Main.worldSurface * 2.0);
							float num24 = (float)Main.maxTilesX / 4200f;
							num24 *= num24;
							int num25 = 1200;
							float num26 = (float)((double)(Main.player[Main.myPlayer].Center.Y / 16f - (65f + 10f * num24)) / (Main.worldSurface / 5.0));
							string text5 = (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 204) * 16)) ? Language.GetTextValue("GameUI.LayerUnderworld") : (((double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 + (double)(num25 / 2) + 16.0) ? Language.GetTextValue("GameUI.LayerCaverns") : ((num23 > 0) ? Language.GetTextValue("GameUI.LayerUnderground") : ((num26 < 1f) ? Language.GetTextValue("GameUI.LayerSpace") : Language.GetTextValue("GameUI.LayerSurface"))));
							num23 = Math.Abs(num23);
							text2 = ((num23 != 0) ? Language.GetTextValue("GameUI.Depth", num23) : Language.GetTextValue("GameUI.DepthLevel")) + " " + text5;
						}
						else
						{
							num5 = info.Type;
							text2 = info.DisplayValue(ref infoTextColor, ref infoTextShadowColor);
							text3 = info.DisplayName.ToString();
						}
						InfoDisplayLoader.ModifyDisplayValue(info, ref text2);
						InfoDisplayLoader.ModifyDisplayName(info, ref text3);
						InfoDisplayLoader.ModifyDisplayColor(info, ref infoTextColor, ref infoTextShadowColor);
						InfoDisplayLoader.ModifyDisplayParameters(info, ref text2, ref text3, ref infoTextColor, ref infoTextShadowColor);
						if (text2 != "")
						{
							ref int drawnCount = ref num3;
							int X;
							int Y;
							Main.GetInfoAccIconPosition(num3, startX, out X, out Y);
							if (num5 >= 0)
							{
								int num27 = 22;
								if (Main.screenHeight < 650)
								{
									num27 = 20;
								}
								Vector2 vector2;
								vector2..ctor((float)X, (float)(Y + 74 + num27 * num3 + 52));
								int num28 = info.Type;
								Texture2D icon = ModContent.Request<Texture2D>(info.Texture, 2).Value;
								Texture2D iconHover = ModContent.Request<Texture2D>(info.HoverTexture, 2).Value;
								Color color2 = Color.White;
								bool flag14 = false;
								if (Main.playerInventory)
								{
									vector2..ctor((float)X, (float)Y);
									if ((float)Main.mouseX >= vector2.X && (float)Main.mouseY >= vector2.Y && (float)Main.mouseX <= vector2.X + (float)icon.Width && (float)Main.mouseY <= vector2.Y + (float)icon.Height && !PlayerInput.IgnoreMouseInterface)
									{
										flag14 = true;
										Main.player[Main.myPlayer].mouseInterface = true;
										if (Main.mouseLeft && Main.mouseLeftRelease)
										{
											SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
											Main.mouseLeftRelease = false;
											Main.player[Main.myPlayer].hideInfo[num28] = !Main.player[Main.myPlayer].hideInfo[num28];
										}
										if (!Main.mouseText)
										{
											text = text3;
											Main.mouseText = true;
										}
									}
									if (Main.player[Main.myPlayer].hideInfo[num28])
									{
										color2..ctor(80, 80, 80, 70);
									}
								}
								else if ((float)Main.mouseX >= vector2.X && (float)Main.mouseY >= vector2.Y && (float)Main.mouseX <= vector2.X + (float)icon.Width && (float)Main.mouseY <= vector2.Y + (float)icon.Height && !Main.mouseText)
								{
									num2 = drawnCount;
									text = text3;
									Main.mouseText = true;
								}
								if (drawnCount <= InfoDisplayLoader.DefaultDisplayCount)
								{
									UILinkPointNavigator.SetPosition(1558 + drawnCount - 1, vector2 + icon.Size() * 0.75f);
								}
								Main.spriteBatch.Draw(icon, vector2, new Rectangle?(new Rectangle(0, 0, icon.Width, icon.Height)), color2, 0f, default(Vector2), 1f, 0, 0f);
								if (flag14)
								{
									Main.spriteBatch.Draw(iconHover, vector2 - Vector2.One * 2f, null, Main.OurFavoriteColor, 0f, default(Vector2), 1f, 0, 0f);
								}
								X += 20;
							}
							UILinkPointNavigator.Shortcuts.INFOACCCOUNT = num3;
							if (!Main.playerInventory)
							{
								Vector2 scale;
								scale..ctor(1f);
								Vector2 vector3 = FontAssets.MouseText.Value.MeasureString(text2);
								if (vector3.X > num4)
								{
									scale.X = num4 / vector3.X;
								}
								if (scale.X < 0.58f)
								{
									scale.Y = 1f - scale.X / 3f;
								}
								for (int n = 0; n < 5; n++)
								{
									int num29 = 0;
									int num30 = 0;
									Color color3 = infoTextShadowColor;
									if (n == 0)
									{
										num29 = -2;
									}
									if (n == 1)
									{
										num29 = 2;
									}
									if (n == 2)
									{
										num30 = -2;
									}
									if (n == 3)
									{
										num30 = 2;
									}
									if (n == 4)
									{
										color3 = infoTextColor;
									}
									if (drawnCount > num2 && drawnCount < num2 + 2)
									{
										color3..ctor((int)(color3.R / 3), (int)(color3.G / 3), (int)(color3.B / 3), (int)(color3.A / 3));
									}
									int num31 = 22;
									if (Main.screenHeight < 650)
									{
										num31 = 20;
									}
									DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text2, new Vector2((float)(X + num29), (float)(Y + 74 + num31 * drawnCount + num30 + 48)), color3, 0f, default(Vector2), scale, 0, 0f);
								}
							}
							drawnCount++;
							if (drawnCount >= endingDisplay - startingDisplay)
							{
								break;
							}
						}
					}
				}
			}
			if (!string.IsNullOrEmpty(text))
			{
				if (Main.playerInventory)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				this.MouseText(text, 0, 0, -1, -1, -1, -1, 0);
			}
		}

		// Token: 0x06000559 RID: 1369 RVA: 0x0010EB6C File Offset: 0x0010CD6C
		private void DrawInfoAccs_AdjustInfoTextColorsForNPC(NPC npc, ref Color infoTextColor, ref Color infoTextShadowColor)
		{
			for (int i = 0; i < NPCID.Sets.GoldCrittersCollection.Count; i++)
			{
				int num = NPCID.Sets.GoldCrittersCollection[i];
				if (npc.type == num)
				{
					infoTextColor = Main.OurFavoriteColor;
					infoTextShadowColor = infoTextColor * 0.1f;
					byte a = infoTextShadowColor.A = Main.mouseTextColor;
					infoTextColor.A = a;
					return;
				}
			}
		}

		// Token: 0x0600055A RID: 1370 RVA: 0x0010EBDC File Offset: 0x0010CDDC
		private static void GetInfoAccIconPosition(int drawnCount, int StartX, out int X, out int Y)
		{
			if (!Main.playerInventory)
			{
				X = Main.screenWidth - 280;
				Y = -32;
				if (Main.mapStyle == 1 && Main.mapEnabled)
				{
					Y += 261;
				}
			}
			else if (Main.ShouldDrawInfoIconsHorizontally)
			{
				X = Main.screenWidth - 280 + 20 * (drawnCount % 12) - 10;
				Y = 94 + 20 * (drawnCount / 12);
				if (Main.mapStyle == 1 && Main.mapEnabled)
				{
					Y += 261;
				}
			}
			else
			{
				int num = (int)(52f * Main.inventoryScale);
				float num2 = 0.85f;
				int num3 = (int)(52f * num2);
				int nPCS_IconsPerColumn = UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn;
				int npcs_IconsTotal = UILinkPointNavigator.Shortcuts.NPCS_IconsTotal;
				int num4 = (int)Math.Ceiling((double)((float)npcs_IconsTotal / (float)nPCS_IconsPerColumn));
				int num5 = npcs_IconsTotal - Math.Max(0, (num4 - 1) * nPCS_IconsPerColumn);
				int num6 = nPCS_IconsPerColumn - num5;
				int num7 = Math.Max(0, num4 - 4);
				if (num4 >= 4 && num6 < 5)
				{
					num7++;
				}
				int num8 = num7 * (num3 + 4);
				if (Main.EquipPage != 1)
				{
					num8 = 0;
				}
				X = 697 - num * 4 + Main.screenWidth - 800 + 20 * (drawnCount % 2) - num8;
				Y = 114 + Main.mH + num * 7 + num / 2 + 20 * (drawnCount / 2) + 8 * (drawnCount / 4) - 20;
				if (Main.EquipPage == 2)
				{
					X += num + num / 2;
					Y -= num;
				}
			}
			X += StartX;
		}

		// Token: 0x0600055B RID: 1371 RVA: 0x0010ED4E File Offset: 0x0010CF4E
		private void DrawBuilderAccToggles(Vector2 start)
		{
			if (!Main.playerInventory)
			{
				return;
			}
			string.IsNullOrEmpty(Main.npcChatText);
			if (Main.player[Main.myPlayer].sign >= 0)
			{
				return;
			}
			this.DrawBuilderAccToggles_Inner(start);
		}

		// Token: 0x0600055C RID: 1372 RVA: 0x0010ED80 File Offset: 0x0010CF80
		private static void GetBuilderAccsCountToShow(Player plr, out int blockReplaceIcons, out int torchGodIcons, out int totalDrawnIcons)
		{
			blockReplaceIcons = 1;
			torchGodIcons = ((plr.unlockedBiomeTorches > false) ? 1 : 0);
			totalDrawnIcons = plr.InfoAccMechShowWires.ToInt() * 6 + plr.rulerLine.ToInt() + plr.rulerGrid.ToInt() + plr.autoActuator.ToInt() + plr.autoPaint.ToInt() + blockReplaceIcons + torchGodIcons;
		}

		// Token: 0x0600055D RID: 1373 RVA: 0x0010EDE0 File Offset: 0x0010CFE0
		public static void CheckInvasionProgressDisplay()
		{
			if (Main.invasionProgressMode != 2)
			{
				Main.invasionProgressNearInvasion = false;
				return;
			}
			bool flag = false;
			Player player = Main.player[Main.myPlayer];
			Rectangle rectangle;
			rectangle..ctor((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
			int num = 5000;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num2 = 0;
					int type = Main.npc[i].type;
					if (type <= 216)
					{
						if (type <= 111)
						{
							if (type - 26 <= 3 || type == 111)
							{
								num2 = 4;
							}
						}
						else if (type - 143 > 2)
						{
							if (type - 212 <= 4)
							{
								goto IL_28C;
							}
						}
						else
						{
							num2 = 5;
						}
					}
					else if (type <= 395)
					{
						switch (type)
						{
						case 305:
						case 306:
						case 307:
						case 308:
						case 309:
						case 310:
						case 311:
						case 312:
						case 313:
						case 314:
						case 315:
						case 325:
						case 326:
						case 327:
						case 329:
						case 330:
							num2 = 2;
							break;
						case 316:
						case 317:
						case 318:
						case 319:
						case 320:
						case 321:
						case 322:
						case 323:
						case 324:
						case 328:
						case 331:
						case 332:
						case 333:
						case 334:
						case 335:
						case 336:
						case 337:
							break;
						case 338:
						case 339:
						case 340:
						case 341:
						case 342:
						case 343:
						case 344:
						case 345:
						case 346:
						case 347:
						case 348:
						case 349:
						case 350:
							num2 = 1;
							break;
						default:
							switch (type)
							{
							case 381:
							case 382:
							case 383:
							case 385:
							case 386:
							case 388:
							case 389:
							case 390:
							case 391:
							case 395:
								num2 = 7;
								break;
							}
							break;
						}
					}
					else
					{
						if (type == 491)
						{
							goto IL_28C;
						}
						switch (type)
						{
						case 548:
						case 549:
						case 551:
						case 552:
						case 553:
						case 554:
						case 555:
						case 556:
						case 557:
						case 558:
						case 559:
						case 560:
						case 561:
						case 562:
						case 563:
						case 564:
						case 565:
						case 568:
						case 569:
						case 570:
						case 571:
						case 572:
						case 573:
						case 574:
						case 575:
						case 576:
						case 577:
						case 578:
							num2 = 3;
							break;
						}
					}
					IL_299:
					if (num2 == 0 || (num2 == 1 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.snowMoon)) || (num2 == 2 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.pumpkinMoon)) || (num2 == 3 && !DD2Event.Ongoing) || (num2 > 3 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.invasionType != num2 - 3)))
					{
						goto IL_3B6;
					}
					Rectangle value;
					value..ctor((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
					if (rectangle.Intersects(value))
					{
						flag = true;
						break;
					}
					goto IL_3B6;
					IL_28C:
					num2 = 6;
					goto IL_299;
				}
				IL_3B6:;
			}
			Main.invasionProgressNearInvasion = flag;
			if (!flag || Main.invasionProgressIcon != 0)
			{
				return;
			}
			int waveNumber = NPC.waveNumber;
			if (Main.snowMoon)
			{
				int progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[waveNumber];
				Main.ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, waveNumber);
				return;
			}
			if (Main.pumpkinMoon)
			{
				int progressMax2 = NPC.MoonEventRequiredPointsPerWaveLookup[waveNumber];
				Main.ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, waveNumber);
				return;
			}
			if (DD2Event.Ongoing)
			{
				DD2Event.ReportEventProgress();
				return;
			}
			int progressMax3 = 1;
			if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
			{
				progressMax3 = Main.invasionSizeStart;
			}
			Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, progressMax3, num2, 0);
		}

		// Token: 0x0600055E RID: 1374 RVA: 0x0010F24C File Offset: 0x0010D44C
		public static void SyncAnInvasion(int toWho)
		{
			int waveNumber = NPC.waveNumber;
			if (Main.snowMoon)
			{
				int num = (new int[]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				})[waveNumber];
				NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, (float)num, 1f, (float)waveNumber, 0, 0, 0);
				return;
			}
			if (Main.pumpkinMoon)
			{
				int num2 = (new int[]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				})[waveNumber];
				NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, (float)num2, 2f, (float)waveNumber, 0, 0, 0);
				return;
			}
			if (DD2Event.Ongoing)
			{
				DD2Event.SyncInvasionProgress(toWho);
				return;
			}
			if (Main.invasionType > 0)
			{
				int num3 = 1;
				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
				{
					num3 = Main.invasionSizeStart;
				}
				NetMessage.SendData(78, toWho, -1, null, Main.invasionSizeStart - Main.invasionSize, (float)num3, (float)(Main.invasionType + 3), 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600055F RID: 1375 RVA: 0x0010F324 File Offset: 0x0010D524
		public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
		{
			Main.invasionProgress = progress;
			Main.invasionProgressMax = progressMax;
			Main.invasionProgressIcon = icon;
			Main.invasionProgressWave = progressWave;
			Main.invasionProgressDisplayLeft = 160;
		}

		// Token: 0x06000560 RID: 1376 RVA: 0x0010F348 File Offset: 0x0010D548
		public static void DrawInvasionProgress()
		{
			if (Main.invasionProgress == -1)
			{
				return;
			}
			if (Main.invasionProgressMode == 2 && Main.invasionProgressNearInvasion && Main.invasionProgressDisplayLeft < 160)
			{
				Main.invasionProgressDisplayLeft = 160;
			}
			if (!Main.gamePaused && Main.invasionProgressDisplayLeft > 0)
			{
				Main.invasionProgressDisplayLeft--;
			}
			if (Main.invasionProgressDisplayLeft > 0)
			{
				Main.invasionProgressAlpha += 0.05f;
			}
			else
			{
				Main.invasionProgressAlpha -= 0.05f;
			}
			if (Main.invasionProgressMode == 0)
			{
				Main.invasionProgressDisplayLeft = 0;
				Main.invasionProgressAlpha = 0f;
			}
			if (Main.invasionProgressAlpha < 0f)
			{
				Main.invasionProgressAlpha = 0f;
			}
			if (Main.invasionProgressAlpha > 1f)
			{
				Main.invasionProgressAlpha = 1f;
			}
			if (Main.invasionProgressAlpha <= 0f)
			{
				return;
			}
			float num = 0.5f + Main.invasionProgressAlpha * 0.5f;
			Texture2D value = TextureAssets.Extra[9].Value;
			string text = "";
			Color c = Color.White;
			if (Main.invasionProgressIcon == 1)
			{
				value = TextureAssets.Extra[8].Value;
				text = Lang.inter[83].Value;
				c = new Color(64, 109, 164) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 2)
			{
				value = TextureAssets.Extra[12].Value;
				text = Lang.inter[84].Value;
				c = new Color(112, 86, 114) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 3)
			{
				value = TextureAssets.Extra[79].Value;
				text = Language.GetTextValue("DungeonDefenders2.InvasionProgressTitle");
				c = new Color(88, 0, 160) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 7)
			{
				value = TextureAssets.Extra[10].Value;
				text = Lang.inter[85].Value;
				c = new Color(165, 160, 155) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 6)
			{
				value = TextureAssets.Extra[11].Value;
				text = Lang.inter[86].Value;
				c = new Color(148, 122, 72) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 5)
			{
				value = TextureAssets.Extra[7].Value;
				text = Lang.inter[87].Value;
				c = new Color(173, 135, 140) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 4)
			{
				value = TextureAssets.Extra[9].Value;
				text = Lang.inter[88].Value;
				c = new Color(94, 72, 131) * 0.5f;
			}
			if (Main.invasionProgressWave > 0)
			{
				int num2 = (int)(200f * num);
				int num3 = (int)(45f * num);
				Vector2 vector;
				vector..ctor((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Rectangle r4;
				r4..ctor((int)vector.X - num2 / 2, (int)vector.Y - num3 / 2, num2, num3);
				Utils.DrawInvBG(Main.spriteBatch, r4, new Color(63, 65, 151, 255) * 0.785f);
				string key = "Game.WaveMessage";
				object arg = (Main.invasionProgressMax != 0) ? (((int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax)).ToString() + "%") : Language.GetTextValue("Game.InvasionPoints", Main.invasionProgress);
				string text2 = Language.GetTextValue(key, Main.invasionProgressWave, arg);
				Texture2D value2 = TextureAssets.ColorBar.Value;
				Texture2D value4 = TextureAssets.ColorBlip.Value;
				float num4 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
				if (Main.invasionProgressMax == 0)
				{
					num4 = 1f;
				}
				float num5 = 169f * num;
				float num6 = 8f * num;
				Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
				Utils.DrawBorderString(Main.spriteBatch, text2, vector2, Color.White * Main.invasionProgressAlpha, num, 0.5f, 1f, -1);
				Main.spriteBatch.Draw(value2, vector, null, Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(value2.Width / 2), 0f), num, 0, 0f);
				vector2 += Vector2.UnitX * (num4 - 0.5f) * num5;
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Rectangle?(new Rectangle(0, 0, 1, 1)), new Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num5 * num4, num6), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Rectangle?(new Rectangle(0, 0, 1, 1)), new Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num6), 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Rectangle?(new Rectangle(0, 0, 1, 1)), Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num5 * (1f - num4), num6), 0, 0f);
			}
			else
			{
				int num7 = (int)(200f * num);
				int num8 = (int)(45f * num);
				Vector2 vector3;
				vector3..ctor((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Rectangle r4;
				r4..ctor((int)vector3.X - num7 / 2, (int)vector3.Y - num8 / 2, num7, num8);
				Utils.DrawInvBG(Main.spriteBatch, r4, new Color(63, 65, 151, 255) * 0.785f);
				string text3 = (Main.invasionProgressMax != 0) ? (((int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax)).ToString() + "%") : Main.invasionProgress.ToString();
				text3 = Language.GetTextValue("Game.WaveCleared", text3);
				Texture2D value3 = TextureAssets.ColorBar.Value;
				Texture2D value5 = TextureAssets.ColorBlip.Value;
				if (Main.invasionProgressMax != 0)
				{
					Main.spriteBatch.Draw(value3, vector3, null, Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(value3.Width / 2), 0f), num, 0, 0f);
					float num9 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
					Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(text3);
					float num10 = num;
					if (vector4.Y > 22f)
					{
						num10 *= 22f / vector4.Y;
					}
					float num11 = 169f * num;
					float num12 = 8f * num;
					Vector2 vector5 = vector3 + Vector2.UnitY * num12 + Vector2.UnitX * 1f;
					Utils.DrawBorderString(Main.spriteBatch, text3, vector5 + new Vector2(0f, -4f), Color.White * Main.invasionProgressAlpha, num10, 0.5f, 1f, -1);
					vector5 += Vector2.UnitX * (num9 - 0.5f) * num11;
					Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Rectangle?(new Rectangle(0, 0, 1, 1)), new Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num11 * num9, num12), 0, 0f);
					Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Rectangle?(new Rectangle(0, 0, 1, 1)), new Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num12), 0, 0f);
					Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Rectangle?(new Rectangle(0, 0, 1, 1)), Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num11 * (1f - num9), num12), 0, 0f);
				}
			}
			Vector2 vector6 = FontAssets.MouseText.Value.MeasureString(text);
			float num13 = 120f;
			if (vector6.X > 200f)
			{
				num13 += vector6.X - 200f;
			}
			Rectangle r3 = Utils.CenteredRectangle(new Vector2((float)Main.screenWidth - num13, (float)(Main.screenHeight - 80)), (vector6 + new Vector2((float)(value.Width + 12), 6f)) * num);
			Utils.DrawInvBG(Main.spriteBatch, r3, c);
			Main.spriteBatch.Draw(value, r3.Left() + Vector2.UnitX * num * 8f, null, Color.White * Main.invasionProgressAlpha, 0f, new Vector2(0f, (float)(value.Height / 2)), num * 0.8f, 0, 0f);
			Utils.DrawBorderString(Main.spriteBatch, text, r3.Right() + Vector2.UnitX * num * -22f, Color.White * Main.invasionProgressAlpha, num * 0.9f, 1f, 0.4f, -1);
		}

		// Token: 0x06000561 RID: 1377 RVA: 0x0010FDC3 File Offset: 0x0010DFC3
		protected void QuitGame()
		{
			Main.SaveSettings();
			if (!Main.dedServ)
			{
				SocialAPI.Shutdown();
			}
			Main.Assets.TransferCompletedAssets();
			base.Exit();
		}

		// Token: 0x06000562 RID: 1378 RVA: 0x0010FDE8 File Offset: 0x0010DFE8
		private void Main_Exiting(object sender, EventArgs e)
		{
			Main.TryDisposingEverything();
		}

		// Token: 0x06000563 RID: 1379 RVA: 0x0010FDEF File Offset: 0x0010DFEF
		private static void TryDisposingEverything()
		{
			ChromaInitializer.DisableAllDeviceGroups();
			SteamedWraps.OnGameExitCleanup();
			TerrariaSteamClient.Shutdown();
			CaptureManager.Instance.Dispose();
			Main.audioSystem.Dispose();
		}

		// Token: 0x06000564 RID: 1380 RVA: 0x0010FE14 File Offset: 0x0010E014
		protected Color randColor()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (num + num3 + num2 <= 150)
			{
				num = Main.rand.Next(256);
				num2 = Main.rand.Next(256);
				num3 = Main.rand.Next(256);
			}
			return new Color(num, num2, num3, 255);
		}

		// Token: 0x06000565 RID: 1381 RVA: 0x0010FE72 File Offset: 0x0010E072
		public static Color hslToRgb(Vector3 hslVector)
		{
			return Main.hslToRgb(hslVector.X, hslVector.Y, hslVector.Z, byte.MaxValue);
		}

		/// <summary>
		/// Converts a "Hue, Saturation, and Luminance" (HSL) representation (<see href="https://en.wikipedia.org/wiki/HSL_and_HSV">HSL Wikipedia page</see>) of a color  to a <see cref="T:Microsoft.Xna.Framework.Color" />. Input values should range from 0f to 1f. This differs from other representations of HSL, where the hue is denoted as a degree from 0 to 360, so divide by 360f if converting from that representation. A fully saturated color can be retrieved using 1f for <paramref name="Saturation" /> and 0.5f for <paramref name="Luminosity" />.
		/// <para /> This is most commonly used to smoothly transition between colors by passing in hue values that are the result of interpolating between values. Doing math using an HSL representation of a Color is often easier than doing math on an RGB representation of a Color.
		/// <para /> This example generated a random fully saturated color: <c>Color color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);</c>
		/// <para /> This example generates a color based on the projectile rotation:
		/// <code>float hue = Projectile.rotation / MathHelper.TwoPi;
		/// Color color = Main.hslToRgb(hue, 1f, 0.5f);</code>
		/// </summary>
		// Token: 0x06000566 RID: 1382 RVA: 0x0010FE90 File Offset: 0x0010E090
		public static Color hslToRgb(float Hue, float Saturation, float Luminosity, byte a = 255)
		{
			byte r;
			byte g;
			byte b;
			if (Saturation == 0f)
			{
				r = (byte)Math.Round((double)Luminosity * 255.0);
				g = (byte)Math.Round((double)Luminosity * 255.0);
				b = (byte)Math.Round((double)Luminosity * 255.0);
			}
			else
			{
				double num3 = (double)Hue;
				double num2 = ((double)Luminosity >= 0.5) ? ((double)(Luminosity + Saturation - Luminosity * Saturation)) : ((double)Luminosity * (1.0 + (double)Saturation));
				double t = 2.0 * (double)Luminosity - num2;
				double c = num3 + 0.3333333333333333;
				double c2 = num3;
				double c3 = num3 - 0.3333333333333333;
				c = Main.hue2rgb(c, t, num2);
				c2 = Main.hue2rgb(c2, t, num2);
				double num4 = Main.hue2rgb(c3, t, num2);
				r = (byte)Math.Round(c * 255.0);
				g = (byte)Math.Round(c2 * 255.0);
				b = (byte)Math.Round(num4 * 255.0);
			}
			return new Color((int)r, (int)g, (int)b, (int)a);
		}

		// Token: 0x06000567 RID: 1383 RVA: 0x0010FF98 File Offset: 0x0010E198
		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0.0)
			{
				c += 1.0;
			}
			if (c > 1.0)
			{
				c -= 1.0;
			}
			if (6.0 * c < 1.0)
			{
				return t1 + (t2 - t1) * 6.0 * c;
			}
			if (2.0 * c < 1.0)
			{
				return t2;
			}
			if (3.0 * c < 2.0)
			{
				return t1 + (t2 - t1) * (0.6666666666666666 - c) * 6.0;
			}
			return t1;
		}

		// Token: 0x06000568 RID: 1384 RVA: 0x0011004C File Offset: 0x0010E24C
		public static Vector3 rgbToHsl(Color newColor)
		{
			float num = (float)newColor.R;
			float num2 = (float)newColor.G;
			float num3 = (float)newColor.B;
			num /= 255f;
			num2 /= 255f;
			num3 /= 255f;
			float val = Math.Max(num, num2);
			val = Math.Max(val, num3);
			float val2 = Math.Min(num, num2);
			val2 = Math.Min(val2, num3);
			float num4 = 0f;
			float num5 = (val + val2) / 2f;
			float y;
			if (val == val2)
			{
				y = (num4 = 0f);
			}
			else
			{
				float num6 = val - val2;
				y = (((double)num5 > 0.5) ? (num6 / (2f - val - val2)) : (num6 / (val + val2)));
				if (val == num)
				{
					num4 = (num2 - num3) / num6 + (float)((num2 < num3) ? 6 : 0);
				}
				if (val == num2)
				{
					num4 = (num3 - num) / num6 + 2f;
				}
				if (val == num3)
				{
					num4 = (num - num2) / num6 + 4f;
				}
				num4 /= 6f;
			}
			return new Vector3(num4, y, num5);
		}

		// Token: 0x06000569 RID: 1385 RVA: 0x00110150 File Offset: 0x0010E350
		public static void DrawCursor(Vector2 bonus, bool smart = false)
		{
			if (Main.gameMenu && Main.alreadyGrabbingSunOrMoon)
			{
				return;
			}
			if (Main.player[Main.myPlayer].dead || Main.player[Main.myPlayer].mouseInterface)
			{
				Main.ClearSmartInteract();
				Main.TileInteractionLX = (Main.TileInteractionHX = (Main.TileInteractionLY = (Main.TileInteractionHY = -1)));
			}
			Color color = Main.cursorColor;
			if (!Main.gameMenu && Main.LocalPlayer.hasRainbowCursor)
			{
				color = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.25f % 1f, 1f, 0.5f, byte.MaxValue);
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			if (!PlayerInput.SettingsForUI.ShowGamepadCursor)
			{
				int num5 = smart.ToInt();
				Main.spriteBatch.Draw(TextureAssets.Cursors[num5].Value, new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus + Vector2.One, null, new Color((int)((float)color.R * 0.2f), (int)((float)color.G * 0.2f), (int)((float)color.B * 0.2f), (int)((float)color.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.Cursors[num5].Value, new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, default(Vector2), Main.cursorScale, 0, 0f);
				return;
			}
			if ((Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu) || PlayerInput.InvisibleGamepadInMenus)
			{
				return;
			}
			Vector2 t;
			t..ctor((float)Main.mouseX, (float)Main.mouseY);
			Vector2 t2 = Vector2.Zero;
			bool flag2 = Main.SmartCursorIsUsed;
			if (flag2)
			{
				PlayerInput.smartSelectPointer.UpdateCenter(Main.ScreenSize.ToVector2() / 2f);
				t2 = PlayerInput.smartSelectPointer.GetPointerPosition();
				if (Vector2.Distance(t2, t) < 1f)
				{
					flag2 = false;
				}
				else
				{
					Utils.Swap<Vector2>(ref t, ref t2);
				}
			}
			float num6 = 1f;
			if (flag2)
			{
				num6 = 0.3f;
				color = Color.White * Main.GamepadCursorAlpha;
				int num7 = 17;
				int frameX = 0;
				Main.spriteBatch.Draw(TextureAssets.Cursors[num7].Value, t2 + bonus, new Rectangle?(TextureAssets.Cursors[num7].Frame(1, 1, frameX, 0, 0, 0)), color, 1.5707964f * Main.GlobalTimeWrappedHourly, TextureAssets.Cursors[num7].Frame(1, 1, frameX, 0, 0, 0).Size() / 2f, Main.cursorScale, 0, 0f);
			}
			if (smart && !flag)
			{
				color = Color.White * Main.GamepadCursorAlpha * num6;
				int num8 = 13;
				int frameX2 = 0;
				Main.spriteBatch.Draw(TextureAssets.Cursors[num8].Value, t + bonus, new Rectangle?(TextureAssets.Cursors[num8].Frame(2, 1, frameX2, 0, 0, 0)), color, 0f, TextureAssets.Cursors[num8].Frame(2, 1, frameX2, 0, 0, 0).Size() / 2f, Main.cursorScale, 0, 0f);
				return;
			}
			color = Color.White;
			int num9 = 15;
			Main.spriteBatch.Draw(TextureAssets.Cursors[num9].Value, new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, TextureAssets.Cursors[num9].Value.Size() / 2f, Main.cursorScale, 0, 0f);
		}

		// Token: 0x0600056A RID: 1386 RVA: 0x00110546 File Offset: 0x0010E746
		public static void ClearSmartInteract()
		{
			Main.SmartInteractShowingGenuine = false;
			Main.SmartInteractShowingFake = false;
			Main.SmartInteractNPC = -1;
			Main.SmartInteractProj = -1;
			Main.SmartInteractTileCoords.Clear();
			Main.SmartInteractTileCoordsSelected.Clear();
		}

		// Token: 0x0600056B RID: 1387 RVA: 0x00110574 File Offset: 0x0010E774
		public static Vector2 DrawThickCursor(bool smart = false)
		{
			if (!Main.ThickMouse)
			{
				return Vector2.Zero;
			}
			bool showGamepadCursor = PlayerInput.SettingsForUI.ShowGamepadCursor;
			if (Main.gameMenu && Main.alreadyGrabbingSunOrMoon)
			{
				return Vector2.Zero;
			}
			if (showGamepadCursor && PlayerInput.InvisibleGamepadInMenus)
			{
				return Vector2.Zero;
			}
			if (showGamepadCursor && Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu)
			{
				return Vector2.Zero;
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			Color mouseBorderColor = Main.MouseBorderColor;
			int num = 11;
			num += smart.ToInt();
			for (int i = 0; i < 4; i++)
			{
				Vector2 vector = Vector2.Zero;
				switch (i)
				{
				case 0:
					vector..ctor(0f, 1f);
					break;
				case 1:
					vector..ctor(1f, 0f);
					break;
				case 2:
					vector..ctor(0f, -1f);
					break;
				case 3:
					vector..ctor(-1f, 0f);
					break;
				}
				vector *= 1f;
				vector += Vector2.One * 2f;
				Vector2 origin;
				origin..ctor(2f);
				Rectangle? sourceRectangle = null;
				float scale = Main.cursorScale * 1.1f;
				if (showGamepadCursor)
				{
					if (smart && !flag)
					{
						num = 13;
						int frameX = 0;
						vector = Vector2.One;
						sourceRectangle = new Rectangle?(TextureAssets.Cursors[num].Frame(2, 1, frameX, 0, 0, 0));
						origin = TextureAssets.Cursors[num].Frame(2, 1, frameX, 0, 0, 0).Size() / 2f;
						mouseBorderColor *= Main.GamepadCursorAlpha;
					}
					else
					{
						num = 15;
						vector = Vector2.One;
						origin = TextureAssets.Cursors[num].Value.Size() / 2f;
					}
				}
				Main.spriteBatch.Draw(TextureAssets.Cursors[num].Value, new Vector2((float)Main.mouseX, (float)Main.mouseY) + vector, sourceRectangle, mouseBorderColor, 0f, origin, scale, 0, 0f);
			}
			return new Vector2(2f);
		}

		// Token: 0x0600056C RID: 1388 RVA: 0x001107B1 File Offset: 0x0010E9B1
		private void OnCharacterNamed(string text)
		{
			Main.PendingPlayer.name = text.Trim();
			PlayerFileData.CreateAndSave(Main.PendingPlayer);
			Main.LoadPlayers();
			Main.menuMode = 1;
		}

		// Token: 0x0600056D RID: 1389 RVA: 0x001107D9 File Offset: 0x0010E9D9
		private void OnSeedSelected(string text)
		{
			text = text.Trim();
			if (text.Length == 0)
			{
				Main.ActiveWorldFileData.SetSeedToRandom();
			}
			else
			{
				Main.ActiveWorldFileData.SetSeed(text);
			}
			Main.menuMode = 10;
			WorldGen.CreateNewWorld(null);
		}

		// Token: 0x0600056E RID: 1390 RVA: 0x00110810 File Offset: 0x0010EA10
		private void OnWorldNamed(string text)
		{
			Main.menuMode = 10;
			Main.worldName = text.Trim();
			Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.GameMode);
			Main.menuMode = 5000;
		}

		// Token: 0x0600056F RID: 1391 RVA: 0x00110861 File Offset: 0x0010EA61
		private static Action CreateGoToMenuEvent(int menu)
		{
			return delegate()
			{
				Main.menuMode = menu;
				UILinkPointNavigator.Shortcuts.FANCYUI_SPECIAL_INSTRUCTIONS = 0;
			};
		}

		// Token: 0x06000570 RID: 1392 RVA: 0x0011087A File Offset: 0x0010EA7A
		public static void GoToWorldSelect()
		{
			Main.menuMode = 888;
			Main.MenuUI.SetState(Main._worldSelectMenu);
		}

		// Token: 0x06000571 RID: 1393 RVA: 0x00110895 File Offset: 0x0010EA95
		public static void StartClientGameplay()
		{
			Main.menuMode = 10;
			Netplay.StartTcpClient();
		}

		// Token: 0x06000572 RID: 1394 RVA: 0x001108A3 File Offset: 0x0010EAA3
		public static void ReleaseHostAndPlayProcess()
		{
			if (Main.tServer != null)
			{
				Main.tServer = null;
			}
		}

		// Token: 0x06000573 RID: 1395 RVA: 0x001108B4 File Offset: 0x0010EAB4
		private string SanitizePathArgument(string argumentName, string argumentPath)
		{
			string input = Regex.Replace(argumentPath, "(\\\\*)\"", "$1$1\\\"");
			string text = "\"" + Regex.Replace(input, "(\\\\+)$", "$1$1") + "\"";
			return " -" + argumentName + " " + text;
		}

		// Token: 0x06000574 RID: 1396 RVA: 0x00110904 File Offset: 0x0010EB04
		protected void DrawMenu(GameTime gameTime)
		{
			if (!Main.IsEngineLoaded)
			{
				Main.IsEngineLoaded = true;
				if (Main.OnEngineLoad != null)
				{
					Main.OnEngineLoad();
				}
			}
			GamepadMainMenuHandler.Update();
			GamepadMainMenuHandler.MenuItemPositions.Clear();
			int num = Main.menuMode;
			if (Main.menuMode <= 1 && Main.slimeRain)
			{
				Main.StopSlimeRain(true);
			}
			Main.render = false;
			Main.SceneMetrics.Reset();
			Main.drawingPlayerChat = false;
			Main.chatMonitor.Clear();
			Main.screenLastPosition = Main.screenPosition;
			Main.screenPosition.Y = (float)(Main.worldSurface * 16.0 - (double)Main.screenHeight);
			Main.MenuXMovement = 4f;
			if (Main.alreadyGrabbingSunOrMoon && !this.playOldTile && MenuLoader.CurrentMenu == MenuLoader.MenuJourneysEnd)
			{
				this.playOldTile = true;
				MenuLoader.ActivateOldVanillaMenu();
				if (Main.starGame)
				{
					this.playOldTile = false;
				}
			}
			Main.screenPosition.X = Main.screenPosition.X + Main.MenuXMovement;
			if (Main.screenPosition.X > 2.1474835E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			if (Main.screenPosition.X < -2.1474835E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			Star.UpdateStars();
			Cloud.UpdateClouds();
			this.DrawFPS();
			Main.background = 0;
			byte b = (byte.MaxValue + Main.tileColor.R * 2) / 3;
			Color color;
			color..ctor((int)b, (int)b, (int)b, 255);
			if (WorldGen.remixWorldGen)
			{
				this.logoRotation += this.logoRotationSpeed * 4E-05f;
				if ((double)this.logoRotation < 3.04)
				{
					this.logoRotation += this.logoRotationSpeed * 0.0016f;
					if (this.logoRotationSpeed < 0f)
					{
						this.logoRotationSpeed = 0f;
					}
				}
				if ((double)this.logoRotation > 3.22)
				{
					this.logoRotationDirection = -1f;
				}
				else if ((double)this.logoRotation < 3.06)
				{
					this.logoRotationDirection = 1f;
				}
				if (this.logoRotationSpeed < 20f && this.logoRotationDirection == 1f)
				{
					this.logoRotationSpeed += 1f;
				}
				else if (this.logoRotationSpeed > -20f && this.logoRotationDirection == -1f)
				{
					this.logoRotationSpeed -= 1f;
				}
				this.logoScale += this.logoScaleSpeed * 9E-05f;
				if (this.logoScale > 1f)
				{
					this.logoScaleDirection = -1f;
				}
				else if (this.logoScale < 0.9f)
				{
					this.logoScaleDirection = 1f;
				}
				if (this.logoScaleSpeed < 50f && this.logoScaleDirection == 1f)
				{
					this.logoScaleSpeed += 1f;
				}
				else if (this.logoScaleSpeed > -50f && this.logoScaleDirection == -1f)
				{
					this.logoScaleSpeed -= 1f;
				}
			}
			else if (WorldGen.drunkWorldGen)
			{
				this.logoRotation += this.logoRotationSpeed * 4E-06f;
				if (this.logoRotationSpeed > 0f)
				{
					this.logoRotationSpeed += 1500f;
				}
				else
				{
					this.logoRotationSpeed -= 1500f;
				}
				this.logoScale -= 0.05f;
				if (this.logoScale < 0f)
				{
					this.logoScale = 0f;
				}
			}
			else
			{
				if ((double)this.logoRotation > 0.09)
				{
					this.logoRotation += this.logoRotationSpeed * 0.0016f;
					if (this.logoRotationSpeed > 0f)
					{
						this.logoRotationSpeed = 0f;
					}
				}
				this.logoRotation += this.logoRotationSpeed * 4E-06f;
				if ((double)this.logoRotation > 0.08)
				{
					this.logoRotationDirection = -1f;
				}
				else if ((double)this.logoRotation < -0.08)
				{
					this.logoRotationDirection = 1f;
				}
				if (this.logoRotationSpeed < 20f && this.logoRotationDirection == 1f)
				{
					this.logoRotationSpeed += 1f;
				}
				else if (this.logoRotationSpeed > -20f && this.logoRotationDirection == -1f)
				{
					this.logoRotationSpeed -= 1f;
				}
				this.logoScale += this.logoScaleSpeed * 9E-06f;
				if ((double)this.logoScale > 1.35)
				{
					this.logoScaleDirection = -1f;
				}
				else if (this.logoScale < 1f)
				{
					this.logoScaleDirection = 1f;
				}
				if (this.logoScaleSpeed < 50f && this.logoScaleDirection == 1f)
				{
					this.logoScaleSpeed += 1f;
				}
				else if (this.logoScaleSpeed > -50f && this.logoScaleDirection == -1f)
				{
					this.logoScaleSpeed -= 1f;
				}
			}
			MenuLoader.UpdateAndDrawModMenu(Main.spriteBatch, gameTime, color, this.logoRotation, this.logoScale);
			Color color2;
			color2..ctor((int)((byte)((float)color.R * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoA / 255f))));
			Color color3;
			color3..ctor((int)((byte)((float)color.R * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoB / 255f))));
			if (MenuLoader.MenuOldVanilla.IsSelected)
			{
				Main.spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height())), color2, this.logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), this.logoScale, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height())), color3, this.logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), this.logoScale, 0, 0f);
			}
			else if (MenuLoader.MenuJourneysEnd.IsSelected)
			{
				Main.spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height())), color2, this.logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), this.logoScale, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height())), color3, this.logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), this.logoScale, 0, 0f);
			}
			if (Main.dayTime && !WorldGen.remixWorldGen)
			{
				Main.LogoA += 2;
				if (Main.LogoA > 255)
				{
					Main.LogoA = 255;
				}
				Main.LogoB--;
				if (Main.LogoB < 0)
				{
					Main.LogoB = 0;
				}
			}
			else
			{
				Main.LogoB += 2;
				if (Main.LogoB > 255)
				{
					Main.LogoB = 255;
				}
				Main.LogoA--;
				if (Main.LogoA < 0)
				{
					Main.LogoA = 0;
					Main.LogoT = true;
				}
			}
			int num2 = 250;
			int num3 = Main.screenWidth / 2;
			int num4 = 80;
			int num5 = 0;
			int num6 = Main.menuMode;
			int num7 = 0;
			int num8 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int num9 = 0;
			bool[] array = new bool[Main.maxMenuItems];
			bool[] array2 = new bool[Main.maxMenuItems];
			bool[] array3 = new bool[Main.maxMenuItems];
			int[] array4 = new int[Main.maxMenuItems];
			int[] array5 = new int[Main.maxMenuItems];
			byte[] array6 = new byte[Main.maxMenuItems];
			float[] array7 = new float[Main.maxMenuItems];
			bool[] array8 = new bool[Main.maxMenuItems];
			bool flag4 = false;
			bool flag5 = UILinkPointNavigator.Shortcuts.BackButtonInUse && !UILinkPointNavigator.Shortcuts.BackButtonLock;
			for (int i = 0; i < Main.maxMenuItems; i++)
			{
				array[i] = false;
				array2[i] = false;
				array4[i] = 0;
				array5[i] = 0;
				array7[i] = 1f;
			}
			string[] array9 = new string[Main.maxMenuItems];
			if (Main.menuMode == -1)
			{
				Main.menuMode = 0;
			}
			if (Program.LoadedEverything)
			{
				GamepadMainMenuHandler.CanRun = true;
				if (Main.menuMode == 1212)
				{
					array9[0] = Lang.menu[102].Value;
					num4 = 50;
					num2 = 200;
					num4 = 33;
					num2 = 200;
					array4[0] = -20;
					array4[1] = 25;
					array4[2] = 25;
					array4[3] = 25;
					array4[4] = 25;
					array4[5] = 25;
					array4[6] = 25;
					array4[7] = 25;
					array4[8] = 25;
					array4[9] = 25;
					array[0] = true;
					array9[1] = Language.GetTextValue("Language.English");
					array9[2] = Language.GetTextValue("Language.German");
					array9[3] = Language.GetTextValue("Language.Italian");
					array9[4] = Language.GetTextValue("Language.French");
					array9[5] = Language.GetTextValue("Language.Spanish");
					array9[6] = Language.GetTextValue("Language.Russian");
					array9[7] = Language.GetTextValue("Language.Chinese");
					array9[8] = Language.GetTextValue("Language.Portuguese");
					array9[9] = Language.GetTextValue("Language.Polish");
					num5 = 10;
					for (int j = 0; j < num5; j++)
					{
						array7[j] = 0.75f;
					}
					array7[0] = 1f;
					if (this.selectedMenu >= 1)
					{
						Main.changeTheTitle = true;
						LanguageManager.Instance.SetLanguage(this.selectedMenu);
						Main.menuMode = 10002;
						SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.SaveSettings();
					}
				}
				else if (Main.menuMode == 1213)
				{
					array9[0] = Lang.menu[102].Value;
					array[0] = true;
					array9[1] = Language.GetTextValue("Language.English");
					array9[2] = Language.GetTextValue("Language.German");
					array9[3] = Language.GetTextValue("Language.Italian");
					array9[4] = Language.GetTextValue("Language.French");
					array9[5] = Language.GetTextValue("Language.Spanish");
					array9[6] = Language.GetTextValue("Language.Russian");
					array9[7] = Language.GetTextValue("Language.Chinese");
					array9[8] = Language.GetTextValue("Language.Portuguese");
					array9[9] = Language.GetTextValue("Language.Polish");
					array9[10] = Lang.menu[5].Value;
					num5 = 11;
					if (this.selectedMenu == 10 || flag5)
					{
						flag5 = false;
						Main.menuMode = 11;
						SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
					else if (this.selectedMenu >= 1)
					{
						Main.changeTheTitle = true;
						LanguageManager.Instance.SetLanguage(this.selectedMenu);
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.SaveSettings();
					}
					num4 = 33;
					num2 = 200;
					array4[0] = -20;
					array4[10] = 10;
					for (int k = 0; k < num5; k++)
					{
						array7[k] = 0.75f;
					}
					array7[0] = 0.85f;
					array7[10] = 0.95f;
				}
				else if (Main.netMode == 2)
				{
					bool flag6 = true;
					for (int l = 0; l < 8; l++)
					{
						if (l < 255)
						{
							try
							{
								array9[l] = Netplay.Clients[l].StatusText;
								if (Netplay.Clients[l].IsActive && Main.showSpam)
								{
									string[] array12 = array9;
									int num112 = l;
									array12[num112] = array12[num112] + " (" + NetMessage.buffer[l].spamCount.ToString() + ")";
								}
							}
							catch
							{
								array9[l] = "";
							}
							array[l] = true;
							if (array9[l] != "" && array9[l] != null)
							{
								flag6 = false;
							}
						}
					}
					if (flag6)
					{
						array9[0] = Lang.menu[0].Value;
						array9[1] = Lang.menu[1].Value + Netplay.ListenPort.ToString() + ".";
					}
					num5 = 11;
					array9[9] = Main.statusText;
					array[9] = true;
					num2 = 170;
					num4 = 30;
					array4[10] = 20;
					array4[10] = 40;
					array9[10] = Lang.menu[2].Value;
					if (this.selectedMenu == 10 || flag5)
					{
						flag5 = false;
						Netplay.Disconnect = true;
						SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 31)
				{
					if (PlayerInput.SettingsForUI.ShowGamepadHints)
					{
						string value = Lang.menu[3].Value;
						string serverPassword = Netplay.ServerPassword;
						UIVirtualKeyboard.KeyboardSubmitEvent submitAction;
						if ((submitAction = Main.<>O.<15>__OnSubmitServerPasswordFromRequest) == null)
						{
							submitAction = (Main.<>O.<15>__OnSubmitServerPasswordFromRequest = new UIVirtualKeyboard.KeyboardSubmitEvent(Main.OnSubmitServerPasswordFromRequest));
						}
						Action cancelAction;
						if ((cancelAction = Main.<>O.<16>__CanceledGivingServerPassword) == null)
						{
							cancelAction = (Main.<>O.<16>__CanceledGivingServerPassword = new Action(Main.CanceledGivingServerPassword));
						}
						UIVirtualKeyboard uIVirtualKeyboard = new UIVirtualKeyboard(value, serverPassword, submitAction, cancelAction, 0, true);
						uIVirtualKeyboard.HideContents = Main.HidePassword;
						UserInterface.ActiveInstance.SetState(uIVirtualKeyboard);
						Main.menuMode = 888;
					}
					string serverPassword2 = Netplay.ServerPassword;
					PlayerInput.WritingText = true;
					Main.instance.HandleIME();
					Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword, false);
					if (serverPassword2 != Netplay.ServerPassword)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					array9[0] = Lang.menu[3].Value;
					this.textBlinkerCount++;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState == 0)
						{
							this.textBlinkerState = 1;
						}
						else
						{
							this.textBlinkerState = 0;
						}
						this.textBlinkerCount = 0;
					}
					array9[1] = Netplay.ServerPassword;
					if (Main.HidePassword)
					{
						array9[1] = "";
						for (int m = 0; m < Netplay.ServerPassword.Length; m++)
						{
							string[] array13 = array9;
							int num113 = 1;
							array13[num113] += "*";
						}
					}
					if (this.textBlinkerState == 1)
					{
						string[] array14 = array9;
						int num114 = 1;
						array14[num114] += "|";
						array5[1] = 1;
					}
					else
					{
						string[] array15 = array9;
						int num115 = 1;
						array15[num115] += " ";
					}
					array[0] = true;
					array[1] = true;
					array4[1] = -20;
					array4[2] = 20;
					array9[2] = Lang.menu[4].Value;
					array9[3] = Lang.menu[5].Value;
					num5 = 4;
					if (this.selectedMenu == 3 || flag5)
					{
						flag5 = false;
						Main.CanceledGivingServerPassword();
					}
					else if (this.selectedMenu == 2 || Main.inputTextEnter)
					{
						Main.OnSubmitServerPasswordFromRequest();
					}
				}
				else
				{
					if ((Main.netMode == 1 && Main.menuMode < 10000 && Main.menuMode != 888) || Main.menuMode == 14)
					{
						num5 = 2;
						array9[0] = Main.statusText;
						array[0] = true;
						num2 = 300;
						int num10 = Main.statusText.Split('\n', StringSplitOptions.None).Length - 1;
						array7[0] = 1f - (float)num10 * 0.04f;
						array4[0] = num10 * -18;
						array4[1] = num10 * 28;
						array9[1] = Lang.menu[6].Value;
						Main.gameTips.Update();
						Main.gameTips.Draw();
						if (this.selectedMenu != 1 && !flag5)
						{
							goto IL_5F25;
						}
						flag5 = false;
						Netplay.InvalidateAllOngoingIPSetAttempts();
						Netplay.Disconnect = true;
						Netplay.Connection.Socket.Close();
						SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 0;
						Main.netMode = 0;
						if (Main.tServer == null)
						{
							goto IL_5F25;
						}
						try
						{
							Main.tServer.Kill();
							Main.tServer = null;
							goto IL_5F25;
						}
						catch
						{
							goto IL_5F25;
						}
					}
					if (Main.menuMode == 882)
					{
						num5 = 2;
						array[0] = true;
						num2 = 300;
						array9[0] = Main.statusText;
						array9[1] = Lang.menu[6].Value;
						if (this.selectedMenu == 1 || flag5)
						{
							flag5 = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.netMode = 0;
							if (SocialAPI.Network != null)
							{
								SocialAPI.Network.CancelJoin();
							}
						}
					}
					else if (Main.menuMode == 30)
					{
						if (PlayerInput.SettingsForUI.ShowGamepadHints)
						{
							string value2 = Lang.menu[7].Value;
							string serverPassword3 = Netplay.ServerPassword;
							UIVirtualKeyboard.KeyboardSubmitEvent submitAction2 = new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnSubmitServerPassword);
							Action cancelAction2;
							if ((cancelAction2 = Main.<>O.<17>__ExitServerPasswordMenu) == null)
							{
								cancelAction2 = (Main.<>O.<17>__ExitServerPasswordMenu = new Action(Main.ExitServerPasswordMenu));
							}
							UIVirtualKeyboard uIVirtualKeyboard2 = new UIVirtualKeyboard(value2, serverPassword3, submitAction2, cancelAction2, 0, true);
							uIVirtualKeyboard2.HideContents = Main.HidePassword;
							UserInterface.ActiveInstance.SetState(uIVirtualKeyboard2);
							Main.menuMode = 888;
						}
						string serverPassword4 = Netplay.ServerPassword;
						PlayerInput.WritingText = true;
						Main.instance.HandleIME();
						Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword, false);
						if (serverPassword4 != Netplay.ServerPassword)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						array9[0] = Lang.menu[7].Value;
						this.textBlinkerCount++;
						if (this.textBlinkerCount >= 20)
						{
							if (this.textBlinkerState == 0)
							{
								this.textBlinkerState = 1;
							}
							else
							{
								this.textBlinkerState = 0;
							}
							this.textBlinkerCount = 0;
						}
						array9[1] = Netplay.ServerPassword;
						if (Main.HidePassword)
						{
							array9[1] = "";
							for (int n = 0; n < Netplay.ServerPassword.Length; n++)
							{
								string[] array16 = array9;
								int num116 = 1;
								array16[num116] += "*";
							}
						}
						if (this.textBlinkerState == 1)
						{
							string[] array17 = array9;
							int num117 = 1;
							array17[num117] += "|";
							array5[1] = 1;
						}
						else
						{
							string[] array18 = array9;
							int num118 = 1;
							array18[num118] += " ";
						}
						array[0] = true;
						array[1] = true;
						array4[1] = -20;
						array4[2] = 20;
						array9[2] = Lang.menu[4].Value;
						array9[3] = Lang.menu[5].Value;
						num5 = 4;
						if (this.selectedMenu == 3 || flag5)
						{
							flag5 = false;
							Main.ExitServerPasswordMenu();
						}
						else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
						{
							this.OnSubmitServerPassword();
						}
					}
					else if (Main.menuMode == 889)
					{
						num2 = 200;
						num4 = 60;
						array4[1] = 30;
						array4[2] = 30;
						array4[3] = 30;
						array4[4] = 70;
						array4[5] = 70;
						num5 = 6;
						int serverConsoleToggleId = num5++;
						array4[serverConsoleToggleId] = 70;
						array9[serverConsoleToggleId] = Language.GetTextValue(Main.showServerConsole ? "tModLoader.MPShowServerConsoleYes" : "tModLoader.MPShowServerConsoleNo");
						array7[serverConsoleToggleId] = 0.5f;
						array9[0] = Lang.menu[135].Value;
						array9[4] = Lang.menu[144].Value;
						array9[5] = Lang.menu[5].Value;
						array[0] = true;
						if (!Main.MenuServerMode.HasFlag(ServerMode.Lobby))
						{
							Main.MenuServerMode = ServerMode.None;
							array[2] = true;
							array[3] = true;
							array9[1] = Lang.menu[136].Value;
							array9[2] = "";
							array9[3] = "";
						}
						else
						{
							array9[1] = Lang.menu[137].Value;
							if (Main.MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
							{
								array9[2] = Lang.menu[139].Value;
								if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
								{
									array9[3] = Lang.menu[143].Value;
								}
								else
								{
									array9[3] = Lang.menu[142].Value;
								}
							}
							else
							{
								array9[2] = Lang.menu[138].Value;
								if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
								{
									array9[3] = Lang.menu[141].Value;
								}
								else
								{
									array9[3] = Lang.menu[140].Value;
								}
							}
						}
						if (flag5)
						{
							flag5 = false;
							this.selectedMenu = 5;
						}
						switch (this.selectedMenu)
						{
						case 1:
							Main.MenuServerMode ^= ServerMode.Lobby;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							break;
						case 2:
							Main.MenuServerMode ^= ServerMode.FriendsCanJoin;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							break;
						case 3:
							Main.MenuServerMode ^= ServerMode.FriendsOfFriends;
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							break;
						case 4:
							Main.clrInput();
							Netplay.ServerPassword = "";
							Main.GetInputText("", false);
							Main.autoPass = false;
							Main.menuMode = 30;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							break;
						case 5:
							Main.menuMode = 6;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							break;
						default:
							if (this.selectedMenu == serverConsoleToggleId)
							{
								Main.showServerConsole = !Main.showServerConsole;
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							break;
						}
					}
					else if (Main.menuMode == 15)
					{
						num5 = 2;
						array9[0] = Main.statusText;
						array[0] = true;
						num2 = 80;
						num4 = 400;
						array9[1] = Lang.menu[5].Value;
						if (this.selectedMenu == 1 || flag5)
						{
							flag5 = false;
							Netplay.Disconnect = true;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.netMode = 0;
						}
					}
					else if (Main.menuMode == 200)
					{
						num5 = 3;
						array9[0] = Lang.menu[9].Value;
						array[0] = true;
						num2 -= 30;
						array4[1] = 70;
						array4[2] = 50;
						array9[1] = Lang.menu[10].Value;
						array9[2] = Lang.menu[6].Value;
						if (WorldIO.customDataFail != null)
						{
							array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
							num5 = 4;
							array4[3] = 50;
							array9[3] = Language.GetTextValue("tModLoader.OpenLogs");
						}
						if (this.selectedMenu == 3)
						{
							Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
							SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
							Utils.OpenFolder(Logging.LogDir);
						}
						if (this.selectedMenu == 1)
						{
							if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
							{
								FileUtilities.Move(Main.worldPathName, Main.worldPathName + ".bad", Main.ActiveWorldFileData.IsCloudSave, true, false);
								FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true, false);
								WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								WorldGen.playWorld();
								Main.menuMode = 10;
							}
							else
							{
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 0;
								Main.netMode = 0;
							}
						}
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.netMode = 0;
						}
					}
					else if (Main.menuMode == 201)
					{
						num5 = 3;
						array9[0] = Lang.menu[9].Value;
						array[0] = true;
						array[1] = true;
						num2 -= 30;
						array4[1] = -30;
						array4[2] = 50;
						array9[1] = Lang.menu[11].Value;
						array9[2] = Lang.menu[5].Value;
						if (WorldIO.customDataFail != null)
						{
							array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
							num5 = 4;
							array4[3] = 50;
							array9[3] = Language.GetTextValue("tModLoader.OpenLogs");
						}
						if (this.selectedMenu == 3)
						{
							Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
							SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
							Utils.OpenFolder(Logging.LogDir);
						}
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.netMode = 0;
						}
					}
					else if (Main.menuMode == 10)
					{
						num5 = 1;
						array9[0] = Main.statusText;
						array[0] = true;
						num2 = 300;
						Main.gameTips.Update();
						Main.gameTips.Draw();
					}
					else if (Main.menuMode == 100)
					{
						num5 = 1;
						array9[0] = Main.statusText;
						array[0] = true;
						num2 = 300;
					}
					else if (Main.menuMode == 0)
					{
						Main._blockFancyUIWhileLoading = false;
						Main._pendingCharacterSelect = null;
						DD2Event.Ongoing = false;
						Main.eclipse = false;
						Main.pumpkinMoon = false;
						Main.snowMoon = false;
						Main.ServerSideCharacter = false;
						Main.menuMultiplayer = false;
						Main.menuServer = false;
						Main.netMode = 0;
						Main.ClearVisualPostProcessEffects();
						int num11 = 0;
						num2 = 220;
						num5 = 7;
						num4 = 52;
						array9[num11] = Lang.menu[12].Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.ClearPendingPlayerSelectCallbacks();
							Main.menuMode = 1;
							Main.PrepareLoadedModsAndConfigsForSingleplayer();
						}
						num11++;
						array9[num11] = Lang.menu[13].Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 12;
						}
						num11++;
						array9[num11] = Lang.menu[131].Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 888;
							Main.MenuUI.SetState(Main.AchievementsMenu);
						}
						num11++;
						array9[num11] = Language.GetText("UI.Workshop").Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 888;
							UIWorkshopHub uIWorkshopHub = new UIWorkshopHub(null);
							uIWorkshopHub.EnterHub();
							Main.MenuUI.SetState(uIWorkshopHub);
						}
						num11++;
						Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num2, ref num4, ref num11, ref num5);
						array9[num11] = Lang.menu[14].Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 11;
						}
						num11++;
						array9[num11] = Language.GetText("UI.Credits").Value;
						if (this.selectedMenu == num11)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 3000;
							SkyManager.Instance.Activate("CreditsRoll", default(Vector2), Array.Empty<object>());
						}
						num11++;
						array9[num11] = Lang.menu[15].Value;
						if (this.selectedMenu == num11)
						{
							Main.GameAskedToQuit = true;
						}
						num11++;
						if (Interface.pendingErrorMessages.Count > 0)
						{
							Interface.errorMessage.Show(Interface.pendingErrorMessages.Pop(), 0, null, "", false, false, null);
						}
					}
					else if (Main.menuMode == 1)
					{
						Main.OpenCharacterSelectUI();
					}
					else if (Main.menuMode == 2)
					{
						flag4 = true;
						if (this.selectedMenu == 0)
						{
							Main.menuMode = 17;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.hairColor;
						}
						if (this.selectedMenu == 1)
						{
							Main.menuMode = 18;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.eyeColor;
						}
						if (this.selectedMenu == 2)
						{
							Main.menuMode = 19;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.skinColor;
						}
						if (this.selectedMenu == 3)
						{
							Main.menuMode = 20;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
						}
						array9[0] = Lang.menu[18].Value;
						array9[1] = Lang.menu[19].Value;
						array9[2] = Lang.menu[20].Value;
						array9[3] = Lang.menu[21].Value;
						num2 = 220;
						for (int num12 = 0; num12 < 9; num12++)
						{
							if (num12 < 6)
							{
								array7[num12] = 0.75f;
							}
							else
							{
								array7[num12] = 0.9f;
							}
						}
						num4 = 38;
						array4[6] = 6;
						array4[7] = 12;
						array4[8] = 18;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 176;
						if (Main.PendingPlayer.Male)
						{
							array9[4] = Lang.menu[22].Value;
						}
						else
						{
							array9[4] = Lang.menu[23].Value;
						}
						if (this.selectedMenu == 4)
						{
							if (Main.PendingPlayer.Male)
							{
								SoundEngine.PlaySound(20, -1, -1, 1, 1f, 0f);
								Main.PendingPlayer.Male = false;
							}
							else
							{
								SoundEngine.PlaySound(1, -1, -1, 1, 1f, 0f);
								Main.PendingPlayer.Male = true;
							}
						}
						if (Main.PendingPlayer.difficulty == 2)
						{
							array9[5] = Lang.menu[24].Value;
							array6[5] = Main.PendingPlayer.difficulty;
						}
						else if (Main.PendingPlayer.difficulty == 1)
						{
							array9[5] = Lang.menu[25].Value;
							array6[5] = Main.PendingPlayer.difficulty;
						}
						else
						{
							array9[5] = Lang.menu[26].Value;
						}
						if (this.selectedMenu == 5)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 222;
						}
						if (this.selectedMenu == 7)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.hair = Main.rand.Next(51);
							Main.PendingPlayer.eyeColor = this.randColor();
							while ((int)(Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B) > 300)
							{
								Main.PendingPlayer.eyeColor = this.randColor();
							}
							Main.PendingPlayer.hairColor = this.randColor();
							Main.PendingPlayer.pantsColor = this.randColor();
							Main.PendingPlayer.shirtColor = this.randColor();
							Main.PendingPlayer.shoeColor = this.randColor();
							Main.PendingPlayer.skinColor = this.randColor();
							float num13 = (float)Main.rand.Next(60, 120) * 0.01f;
							if (num13 > 1f)
							{
								num13 = 1f;
							}
							Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num13);
							Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num13);
							Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num13);
							Main.PendingPlayer.underShirtColor = this.randColor();
							int num14 = Main.PendingPlayer.hair + 1;
							if (num14 == 5 || num14 == 6 || num14 == 7 || num14 == 10 || num14 == 12 || num14 == 19 || num14 == 22 || num14 == 23 || num14 == 26 || num14 == 27 || num14 == 30 || num14 == 33)
							{
								Main.PendingPlayer.Male = false;
							}
							else
							{
								Main.PendingPlayer.Male = true;
							}
							Main.PendingPlayer.skinVariant = Main.rand.Next(PlayerVariantID.Count);
						}
						array9[7] = Lang.menu[27].Value;
						array9[6] = Lang.menu[28].Value;
						array9[8] = Lang.menu[5].Value;
						num5 = 9;
						if (this.selectedMenu == 8 || flag5)
						{
							flag5 = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
						else if (this.selectedMenu == 6)
						{
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.name = "";
							Main.menuMode = 3;
							Main.clrInput();
						}
					}
					else if (Main.menuMode == 222)
					{
						if (this.focusMenu == 3)
						{
							array9[0] = Lang.menu[29].Value;
						}
						else if (this.focusMenu == 2)
						{
							array9[0] = Lang.menu[30].Value;
						}
						else if (this.focusMenu == 1)
						{
							array9[0] = Lang.menu[31].Value;
						}
						else
						{
							array9[0] = Lang.menu[32].Value;
						}
						num4 = 50;
						array4[1] = 25;
						array4[2] = 25;
						array4[3] = 25;
						array[0] = true;
						array9[1] = Lang.menu[26].Value;
						array9[2] = Lang.menu[25].Value;
						array6[2] = 1;
						array9[3] = Lang.menu[24].Value;
						array6[3] = 2;
						num5 = 4;
						if (this.selectedMenu == 1)
						{
							Main.PendingPlayer.difficulty = 0;
							Main.menuMode = 2;
						}
						else if (this.selectedMenu == 2)
						{
							Main.menuMode = 2;
							Main.PendingPlayer.difficulty = 1;
						}
						else if (this.selectedMenu == 3)
						{
							Main.PendingPlayer.difficulty = 2;
							Main.menuMode = 2;
						}
					}
					else if (Main.menuMode == 20)
					{
						flag4 = true;
						if (this.selectedMenu == 0)
						{
							Main.menuMode = 21;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.shirtColor;
						}
						if (this.selectedMenu == 1)
						{
							Main.menuMode = 22;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.underShirtColor;
						}
						if (this.selectedMenu == 2)
						{
							Main.menuMode = 23;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.PendingPlayer.pantsColor;
						}
						if (this.selectedMenu == 3)
						{
							Main.selColor = Main.PendingPlayer.shoeColor;
							Main.menuMode = 24;
							SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
						}
						if (this.selectedMenu == 5 || flag5)
						{
							flag5 = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 2;
						}
						if (this.selectedMenu == 4)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.CycleClothingStyle(Main.PendingPlayer);
						}
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						num2 = 260;
						num4 = 50;
						num5 = 6;
						array9[0] = Lang.menu[33].Value;
						array9[1] = Lang.menu[34].Value;
						array9[2] = Lang.menu[35].Value;
						array9[3] = Lang.menu[36].Value;
						array9[4] = Lang.menu[127].Value;
						array9[5] = Lang.menu[5].Value;
						array4[5] = 20;
					}
					else if (Main.menuMode == 17)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 390;
						num2 = 260;
						num4 = 60;
						Main.PendingPlayer.hairColor = Main.selColor;
						num5 = 3;
						array9[0] = Lang.menu[37].Value + " " + (Main.PendingPlayer.hair + 1).ToString();
						array9[1] = Lang.menu[38].Value;
						array[1] = true;
						array4[2] = 150;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						int num15 = 51;
						if (this.focusMenu == 0)
						{
							UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 9;
						}
						if (this.selectedMenu == 0)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.hair++;
							if (Main.PendingPlayer.hair >= num15)
							{
								Main.PendingPlayer.hair = 0;
							}
						}
						else if (this.selectedMenu2 == 0)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.hair--;
							if (Main.PendingPlayer.hair < 0)
							{
								Main.PendingPlayer.hair = num15 - 1;
							}
						}
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 2;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 18)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.eyeColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[39].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 2;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 19)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.skinColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[40].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 2;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 21)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.shirtColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[41].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 20;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 22)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.underShirtColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[42].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 20;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 23)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.pantsColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[43].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 20;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 24)
					{
						flag4 = true;
						num7 = Main.screenWidth / 2 - 16;
						num8 = 210;
						flag = true;
						num9 = 370;
						num2 = 240;
						num4 = 60;
						Main.PendingPlayer.shoeColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[44].Value;
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5].Value;
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 20;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 3)
					{
						UIVirtualKeyboard uIVirtualKeyboard3 = new UIVirtualKeyboard(Lang.menu[45].Value, "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnCharacterNamed), Main.CreateGoToMenuEvent(2), 0, false);
						uIVirtualKeyboard3.SetMaxInputLength(20);
						Main.menuMode = 888;
						Main.MenuUI.SetState(uIVirtualKeyboard3);
					}
					else if (Main.menuMode != 4)
					{
						if (Main.menuMode == 5)
						{
							array9[0] = Lang.menu[46].Value + " " + Main.PlayerList[Main.selectedPlayer].Player.name + "?";
							array[0] = true;
							array9[1] = Lang.menu[104].Value;
							array9[2] = Lang.menu[105].Value;
							num5 = 3;
							if (this.selectedMenu == 1)
							{
								Main.ErasePlayer(Main.selectedPlayer);
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1;
							}
							else if (this.selectedMenu == 2 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1;
							}
						}
						else if (Main.menuMode == 6)
						{
							Main.menuMode = 888;
							Main.MenuUI.SetState(Main._worldSelectMenu);
						}
						else if (Main.menuMode == -7)
						{
							num2 = 200;
							num4 = 60;
							array4[2] = 30;
							array4[3] = 30;
							array4[4] = 30;
							array6[3] = 1;
							array6[4] = 2;
							array4[5] = 70;
							if (this.focusMenu == 2)
							{
								array9[1] = Language.GetTextValue("UI.WorldDescriptionNormal");
							}
							else if (this.focusMenu == 3)
							{
								array9[1] = Language.GetTextValue("UI.WorldDescriptionExpert");
							}
							else if (this.focusMenu == 4)
							{
								array9[1] = Language.GetTextValue("UI.WorldDescriptionMaster");
							}
							array9[0] = Lang.menu[32].Value;
							array[0] = true;
							array[1] = true;
							array9[2] = Language.GetTextValue("UI.Normal");
							array9[3] = Language.GetTextValue("UI.Expert");
							array9[4] = Language.GetTextValue("UI.Master");
							array9[5] = Language.GetTextValue("UI.Back");
							num5 = 6;
							if (this.selectedMenu == 2)
							{
								Main.GameMode = 0;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
								if (Main.SettingsUnlock_WorldEvil)
								{
									Main.menuMode = -71;
								}
							}
							else if (this.selectedMenu == 3)
							{
								Main.GameMode = 1;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
								if (Main.SettingsUnlock_WorldEvil)
								{
									Main.menuMode = -71;
								}
							}
							else if (this.selectedMenu == 4)
							{
								Main.GameMode = 2;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
								if (Main.SettingsUnlock_WorldEvil)
								{
									Main.menuMode = -71;
								}
							}
							else if (this.selectedMenu == 5 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 16;
							}
							Main.clrInput();
						}
						else if (Main.menuMode == -71)
						{
							num2 = 200;
							num4 = 60;
							array4[1] = 30;
							array4[2] = 30;
							array4[3] = 30;
							array4[4] = 70;
							num5 = 5;
							int num16 = 0;
							array9[num16] = Lang.misc[100].Value;
							array[num16] = true;
							num16++;
							array9[num16] = Lang.misc[101].Value;
							if (this.selectedMenu == num16)
							{
								WorldGen.WorldGenParam_Evil = 0;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
							}
							num16++;
							array9[num16] = Lang.misc[102].Value;
							if (this.selectedMenu == num16)
							{
								WorldGen.WorldGenParam_Evil = 1;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
							}
							num16++;
							array9[num16] = Lang.misc[103].Value;
							if (this.selectedMenu == num16)
							{
								WorldGen.WorldGenParam_Evil = -1;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 7;
							}
							num16++;
							array9[num16] = Language.GetTextValue("UI.Back");
							if (this.selectedMenu == num16 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = -7;
							}
							num16++;
							Main.clrInput();
						}
						else if (Main.menuMode == 7)
						{
							Main.menuMode = 888;
							Main.MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48].Value, "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnWorldNamed), Main.CreateGoToMenuEvent(-7), 0, false));
						}
						else if (Main.menuMode == 5000)
						{
							Main.menuMode = 888;
							Main.MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnSeedSelected), Main.CreateGoToMenuEvent(7), 0, true));
						}
						else if (Main.menuMode == 8)
						{
							num2 = 180;
							num4 = 40;
							num5 = 8;
							array4[7] += 30;
							for (int num17 = 0; num17 < num5; num17++)
							{
								array7[num17] = 0.8f;
							}
							array9[7] = Lang.menu[5].Value;
							for (int num18 = 0; num18 < 7; num18++)
							{
								if (num18 < Main.WorldList.Count)
								{
									array9[num18] = Main.WorldList[num18 + Main.menuSkip].Name;
									if (Main.WorldList[num18 + Main.menuSkip].GameMode == 1)
									{
										array6[num18] = 1;
									}
									else if (Main.WorldList[num18 + Main.menuSkip].GameMode == 2)
									{
										array6[num18] = 2;
									}
								}
								else
								{
									array9[num18] = null;
								}
							}
							if (Main.WorldList.Count > 7 + Main.menuSkip)
							{
								array9[6] = Language.GetTextValue("UI.More");
								array9[6] = "▼";
								array7[6] = 0.6f;
								array4[6] += 8;
								this.menuWide[6] = true;
							}
							if (Main.menuSkip > 0)
							{
								array9[0] = "▲";
								array7[0] = 0.6f;
								array4[0] += 8;
								this.menuWide[0] = true;
							}
							if (this.selectedMenu == 0 && Main.menuSkip > 0)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.menuSkip -= 5;
								if (Main.menuSkip < 0)
								{
									Main.menuSkip = 0;
								}
							}
							else if (this.selectedMenu == 6 && Main.menuSkip < Main.WorldList.Count - 7)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.menuSkip += 5;
								if (Main.menuSkip >= Main.PlayerList.Count - 7)
								{
									Main.menuSkip = Main.WorldList.Count - 7;
								}
							}
							else if (this.selectedMenu == 7 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 6;
							}
							else if (this.selectedMenu >= 0)
							{
								Main.selectedWorld = this.selectedMenu + Main.menuSkip;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 9;
							}
						}
						else if (Main.menuMode == 9)
						{
							array9[0] = Lang.menu[46].Value + " " + Main.WorldList[Main.selectedWorld].Name + "?";
							array[0] = true;
							array9[1] = Lang.menu[104].Value;
							array9[2] = Lang.menu[105].Value;
							num5 = 3;
							if (this.selectedMenu == 1)
							{
								Main.EraseWorld(Main.selectedWorld);
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 6;
							}
							else if (this.selectedMenu == 2 || flag5)
							{
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 6;
							}
						}
						else if (Main.menuMode == 3000)
						{
							num5 = 1;
							num2 = 500;
							array7[0] = 0.9f;
							array9[0] = Lang.menu[5].Value;
							if (this.selectedMenu == 0 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 0;
							}
						}
						else if (Main.menuMode == 11)
						{
							num2 = 210;
							num4 = 37;
							num5 = 8;
							num5++;
							array4[num5 - 1] = 8;
							for (int num19 = 0; num19 < num5; num19++)
							{
								array7[num19] = 0.75f;
							}
							int num20 = 0;
							array9[num20] = Lang.menu[114].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 112;
							}
							num20++;
							array9[num20] = Lang.menu[210].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1112;
							}
							num20++;
							array9[num20] = Lang.menu[63].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1111;
							}
							num20++;
							array9[num20] = Lang.menu[65].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 26;
							}
							num20++;
							array9[num20] = Lang.menu[218].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1125;
							}
							num20++;
							array9[num20] = Lang.menu[219].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1127;
							}
							num20++;
							array9[num20] = Lang.menu[103].Value;
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1213;
							}
							num20++;
							array9[num20] = Language.GetTextValue("tModLoader.tModLoaderSettings");
							if (this.selectedMenu == num20)
							{
								SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
								Main.menuMode = 10017;
							}
							num20++;
							array9[num20] = Lang.menu[5].Value;
							if (this.selectedMenu == num20 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 0;
								Main.SaveSettings();
							}
						}
						else if (Main.menuMode == 112)
						{
							num2 = 250;
							num4 = 52;
							num5 = 5;
							array4[num5 - 1] = 18;
							for (int num21 = 0; num21 < num5; num21++)
							{
								array7[num21] = 0.78f;
							}
							int num22 = 0;
							if (Main.autoSave)
							{
								array9[num22] = Lang.menu[67].Value;
							}
							else
							{
								array9[num22] = Lang.menu[68].Value;
							}
							if (this.selectedMenu == num22)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.autoSave)
								{
									Main.autoSave = false;
								}
								else
								{
									Main.autoSave = true;
								}
							}
							num22++;
							if (Main.autoPause)
							{
								array9[num22] = Lang.menu[69].Value;
							}
							else
							{
								array9[num22] = Lang.menu[70].Value;
							}
							if (this.selectedMenu == num22)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.autoPause)
								{
									Main.autoPause = false;
								}
								else
								{
									Main.autoPause = true;
								}
							}
							num22++;
							if (Main.mapEnabled)
							{
								array9[num22] = Lang.menu[112].Value;
							}
							else
							{
								array9[num22] = Lang.menu[113].Value;
							}
							if (this.selectedMenu == num22)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.mapEnabled)
								{
									Main.mapEnabled = false;
								}
								else
								{
									Main.mapEnabled = true;
								}
							}
							num22++;
							array9[num22] = (Main.HidePassword ? Lang.menu[212].Value : Lang.menu[211].Value);
							if (this.selectedMenu == num22)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.HidePassword = !Main.HidePassword;
							}
							num22++;
							array9[num22] = Lang.menu[5].Value;
							if (this.selectedMenu == num22 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 1112)
						{
							num2 = 210;
							num4 = 32;
							num5 = 10;
							num5++;
							array4[num5 - 1] = 18;
							for (int num23 = 0; num23 < num5; num23++)
							{
								array7[num23] = 0.7f;
							}
							int num24 = 0;
							if (Main.showItemText)
							{
								array9[num24] = Lang.menu[71].Value;
							}
							else
							{
								array9[num24] = Lang.menu[72].Value;
							}
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.showItemText)
								{
									Main.showItemText = false;
								}
								else
								{
									Main.showItemText = true;
								}
							}
							num24++;
							array9[num24] = Lang.menu[123].Value + " " + Lang.menu[124 + Main.invasionProgressMode].Value;
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.invasionProgressMode++;
								if (Main.invasionProgressMode >= 3)
								{
									Main.invasionProgressMode = 0;
								}
							}
							num24++;
							array9[num24] = (Main.placementPreview ? Lang.menu[128].Value : Lang.menu[129].Value);
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.placementPreview = !Main.placementPreview;
							}
							num24++;
							array9[num24] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117].Value : Lang.inter[116].Value);
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
							}
							num24++;
							array9[num24] = (Main.MouseShowBuildingGrid ? Lang.menu[229].Value : Lang.menu[230].Value);
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.MouseShowBuildingGrid = !Main.MouseShowBuildingGrid;
							}
							num24++;
							array9[num24] = (Main.GamepadDisableInstructionsDisplay ? Lang.menu[241].Value : Lang.menu[242].Value);
							if (this.selectedMenu == num24)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.GamepadDisableInstructionsDisplay = !Main.GamepadDisableInstructionsDisplay;
							}
							num24++;
							string textValue = Language.GetTextValue("UI.MinimapFrame_" + Main.MinimapFrameManagerInstance.ActiveSelectionKeyName);
							array9[num24] = Language.GetTextValue("UI.SelectMapBorder", textValue);
							if (this.selectedMenu == num24)
							{
								Main.MinimapFrameManagerInstance.CycleSelection();
							}
							num24++;
							string textValue2 = Main.ResourceSetsManager.ActiveSet.DisplayedName;
							array9[num24] = Language.GetTextValue("UI.SelectHealthStyle", textValue2);
							if (this.selectedMenu == num24)
							{
								Main.ResourceSetsManager.CycleResourceSet();
							}
							num24++;
							array9[num24] = Language.GetTextValue(BigProgressBarSystem.ShowText ? "UI.ShowBossLifeTextOn" : "UI.ShowBossLifeTextOff");
							if (this.selectedMenu == num24)
							{
								BigProgressBarSystem.ToggleShowText();
							}
							num24++;
							Action onClick;
							array9[num24] = BossBarLoader.InsertMenu(out onClick);
							if (this.selectedMenu == num24)
							{
								onClick();
							}
							num24++;
							array9[num24] = Lang.menu[5].Value;
							if (this.selectedMenu == num24 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 1111)
						{
							Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
							int num25 = 0;
							array9[num25] = Lang.menu[51].Value;
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 111;
							}
							num25++;
							array9[num25] = Lang.menu[52].Value;
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 28;
							}
							num25++;
							array9[num25] = Lang.menu[(int)(247 + Main.FrameSkipMode)].Value;
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.CycleFrameSkipMode();
							}
							num25++;
							array9[num25] = Language.GetTextValue("UI.LightMode_" + Lighting.Mode.ToString());
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Lighting.NextLightMode();
							}
							num25++;
							switch (Main.qaStyle)
							{
							case 0:
								array9[num25] = Lang.menu[59].Value;
								break;
							case 1:
								array9[num25] = Lang.menu[60].Value;
								break;
							case 2:
								array9[num25] = Lang.menu[61].Value;
								break;
							default:
								array9[num25] = Lang.menu[62].Value;
								break;
							}
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (++Main.qaStyle > 3)
								{
									Main.qaStyle = 0;
								}
							}
							num25++;
							array9[num25] = (Main.BackgroundEnabled ? Lang.menu[100].Value : Lang.menu[101].Value);
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.BackgroundEnabled = !Main.BackgroundEnabled;
							}
							num25++;
							array9[num25] = (ChildSafety.Disabled ? Lang.menu[132].Value : Lang.menu[133].Value);
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								ChildSafety.Disabled = !ChildSafety.Disabled;
							}
							num25++;
							array9[num25] = (Main.SettingsEnabled_MinersWobble ? Lang.menu[250].Value : Lang.menu[251].Value);
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.SettingsEnabled_MinersWobble = !Main.SettingsEnabled_MinersWobble;
							}
							num25++;
							array9[num25] = (Main.SettingsEnabled_TilesSwayInWind ? Language.GetTextValue("UI.TilesSwayInWindOn") : Language.GetTextValue("UI.TilesSwayInWindOff"));
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.SettingsEnabled_TilesSwayInWind = !Main.SettingsEnabled_TilesSwayInWind;
							}
							num25++;
							array9[num25] = Language.GetTextValue("UI.Effects");
							if (this.selectedMenu == num25)
							{
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 2008;
							}
							int num26 = num25;
							int num27 = num26;
							array9[num27] = Lang.menu[5].Value;
							array4[num27] = 8;
							if (this.selectedMenu == num27 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.SaveSettings();
								Main.menuMode = 11;
							}
							num2 = 186;
							num4 = 30;
							num5 = num27 + 1;
							for (int num28 = 0; num28 < num26; num28++)
							{
								array7[num28] = 0.6f;
							}
						}
						else if (Main.menuMode == 2008)
						{
							num2 = 240;
							num4 = 60;
							num5 = 6;
							array9[0] = "";
							array9[1] = Language.GetTextValue("UI.Effects");
							array[1] = true;
							array4[1] = 10;
							array9[2] = Language.GetTextValue("GameUI.StormEffects", Main.UseStormEffects ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
							array7[2] = 0.8f;
							array9[3] = Language.GetTextValue("GameUI.HeatDistortion", Main.UseHeatDistortion ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
							array7[3] = 0.8f;
							string textValue3;
							switch (Main.WaveQuality)
							{
							case 1:
								textValue3 = Language.GetTextValue("GameUI.QualityLow");
								break;
							case 2:
								textValue3 = Language.GetTextValue("GameUI.QualityMedium");
								break;
							case 3:
								textValue3 = Language.GetTextValue("GameUI.QualityHigh");
								break;
							default:
								textValue3 = Language.GetTextValue("GameUI.QualityOff");
								break;
							}
							array9[4] = Language.GetTextValue("GameUI.WaveQuality", textValue3);
							array7[4] = 0.8f;
							array9[5] = Lang.menu[5].Value;
							if (this.selectedMenu == 2)
							{
								Main.UseStormEffects = !Main.UseStormEffects;
							}
							if (this.selectedMenu == 3)
							{
								Main.UseHeatDistortion = !Main.UseHeatDistortion;
							}
							if (this.selectedMenu == 4)
							{
								Main.WaveQuality = (Main.WaveQuality + 1) % 4;
							}
							if (this.selectedMenu == 5 || flag5)
							{
								flag5 = false;
								Main.menuMode = 1111;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 111)
						{
							for (int num29 = 0; num29 < 9; num29++)
							{
								array7[num29] = 0.85f;
							}
							num2 = 210;
							num4 = 55;
							int num30 = 0;
							array9[num30] = string.Concat(new string[]
							{
								Lang.menu[73].Value,
								": ",
								Main.PendingResolutionWidth.ToString(),
								"x",
								Main.PendingResolutionHeight.ToString()
							});
							if (this.selectedMenu == num30 || this.selectedMenu2 == num30)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								int num31 = 0;
								for (int num32 = 0; num32 < Main.numDisplayModes; num32++)
								{
									if (Main.displayWidth[num32] == Main.PendingResolutionWidth && Main.BorderedHeight(Main.displayHeight[num32], Main.graphics.IsFullScreen) == Main.PendingResolutionHeight)
									{
										num31 = num32;
										break;
									}
								}
								num31 = Utils.Repeat(num31 + ((this.selectedMenu == num30) ? 1 : -1), Main.numDisplayModes);
								Main.PendingResolutionWidth = Main.displayWidth[num31];
								Main.PendingResolutionHeight = Main.BorderedHeight(Main.displayHeight[num31], Main.graphics.IsFullScreen);
							}
							num30++;
							if (Main.IsBorderlessDisplayAvailable())
							{
								array9[num30] = Lang.menu[Main.PendingBorderlessState ? 245 : 246].Value;
								if (this.selectedMenu == num30)
								{
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									Main.PendingBorderlessState = !Main.PendingBorderlessState;
								}
								num30++;
							}
							array9[num30] = (Main.graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
							if (this.selectedMenu == num30)
							{
								Main.ToggleFullScreen();
							}
							num30++;
							array4[num30] = 100;
							array9[num30] = Lang.menu[134].Value;
							if (this.selectedMenu == num30)
							{
								if (Main.graphics.IsFullScreen || Main.PendingBorderlessState != Main.screenBorderless || Main.PendingResolutionWidth != Main.screenWidth || Main.PendingResolutionHeight != Main.screenHeight)
								{
									Main.screenBorderless = Main.PendingBorderlessState;
									Main.screenBorderlessPendingResizes = (Main.screenBorderless ? 6 : 0);
									Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
								}
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1111;
							}
							num30++;
							array9[num30] = Lang.menu[5].Value;
							array4[num30] = 100;
							if (this.selectedMenu == num30 || flag5)
							{
								flag5 = false;
								Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
								Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
								Main.PendingBorderlessState = Main.screenBorderless;
								Main.menuMode = 1111;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							num30++;
							num5 = num30;
						}
						else if (Main.menuMode == 1125)
						{
							num2 = 232;
							num4 = 38;
							num5 = 7;
							array4[num5 - 1] = 18;
							for (int num33 = 0; num33 < num5; num33++)
							{
								array7[num33] = 0.73f;
							}
							int num34 = 0;
							array9[num34] = Lang.menu[64].Value;
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.selColor = Main.mouseColor;
								Main.mouseColorSlider.SetHSL(Main.mouseColor);
								Main.menuMode = 25;
							}
							num34++;
							array9[num34] = Lang.menu[217].Value;
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.selColor = Main.MouseBorderColor;
								Main.mouseBorderColorSlider.SetHSL(Main.mouseColor);
								Main.menuMode = 252;
							}
							num34++;
							array9[num34] = (Main.cSmartCursorModeIsToggleAndNotHold ? Lang.menu[121].Value : Lang.menu[122].Value);
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.cSmartCursorModeIsToggleAndNotHold = !Main.cSmartCursorModeIsToggleAndNotHold;
							}
							num34++;
							array9[num34] = (Player.SmartCursorSettings.SmartAxeAfterPickaxe ? Lang.menu[214].Value : Lang.menu[213].Value);
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Player.SmartCursorSettings.SmartAxeAfterPickaxe = !Player.SmartCursorSettings.SmartAxeAfterPickaxe;
							}
							num34++;
							array9[num34] = (Player.SmartCursorSettings.SmartBlocksEnabled ? Lang.menu[215].Value : Lang.menu[216].Value);
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
							}
							num34++;
							switch (LockOnHelper.UseMode)
							{
							case LockOnHelper.LockOnMode.FocusTarget:
								array9[num34] = Lang.menu[232].Value;
								break;
							case LockOnHelper.LockOnMode.TargetClosest:
								array9[num34] = Lang.menu[233].Value;
								break;
							case LockOnHelper.LockOnMode.ThreeDS:
								array9[num34] = Lang.menu[234].Value;
								break;
							}
							if (this.selectedMenu == num34)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								LockOnHelper.CycleUseModes();
							}
							num34++;
							array9[num34] = Lang.menu[5].Value;
							if (this.selectedMenu == num34 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 25)
						{
							flag = true;
							num9 = 320;
							num2 = 200;
							num4 = 10;
							Main.mouseColor = Main.selColor;
							Main.mouseColorSlider.SetHSL(Main.mouseColor);
							num5 = 3;
							array9[0] = "";
							array9[1] = Lang.menu[64].Value;
							array[1] = true;
							array4[2] = 250;
							array4[1] = 10;
							array9[2] = Lang.menu[5].Value;
							if (this.selectedMenu == 2 || flag5)
							{
								flag5 = false;
								Main.menuMode = 1125;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 252)
						{
							flag = true;
							num9 = 320;
							num2 = 200;
							num4 = 10;
							Main.MouseBorderColor = Main.selColor;
							Main.mouseBorderColorSlider.SetHSL(Main.mouseColor);
							num5 = 3;
							array9[0] = "";
							array9[1] = Lang.menu[217].Value;
							array[1] = true;
							array4[2] = 250;
							array4[1] = 10;
							array9[2] = Lang.menu[5].Value;
							if (this.selectedMenu == 2 || flag5)
							{
								flag5 = false;
								Main.menuMode = 1125;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 26)
						{
							flag2 = true;
							num2 = 200;
							num4 = 10;
							num5 = 3;
							array9[0] = "";
							array9[1] = Lang.menu[65].Value;
							array[1] = true;
							array4[2] = 250;
							array4[1] = 10;
							array9[2] = Lang.menu[5].Value;
							if (this.selectedMenu == 2 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 28)
						{
							Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
							flag3 = true;
							num2 = 240;
							num4 = 60;
							num5 = 3;
							array9[0] = "";
							array9[1] = Lang.menu[52].Value;
							array[1] = true;
							array4[2] = 170;
							array4[1] = 10;
							array9[2] = Lang.menu[5].Value;
							if (this.selectedMenu == 2 || flag5)
							{
								flag5 = false;
								Main.menuMode = 1111;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 272727)
						{
							num2 = 200;
							num4 = 30;
							num5 = 14;
							string[] array19 = new string[12];
							array19[0] = Main.cMapStyle;
							array19[1] = Main.cMapFull;
							array19[2] = Main.cMapZoomIn;
							array19[3] = Main.cMapZoomOut;
							array19[4] = Main.cMapAlphaUp;
							array19[5] = Main.cMapAlphaDown;
							string[] array10 = array19;
							if (Main.setKey >= 0)
							{
								array10[Main.setKey] = "_";
							}
							array9[0] = Lang.menu[106].Value + array10[0];
							array9[1] = Lang.menu[107].Value + array10[1];
							array9[2] = Lang.menu[108].Value + array10[2];
							array9[3] = Lang.menu[109].Value + array10[3];
							array9[4] = Lang.menu[110].Value + array10[4];
							array9[5] = Lang.menu[111].Value + array10[5];
							for (int num35 = 0; num35 < 6; num35++)
							{
								array8[num35] = true;
								array7[num35] = 0.55f;
								array5[num35] = -140;
							}
							array7[6] = 0.8f;
							array7[6] = 0.8f;
							array4[6] = 6;
							array9[6] = Lang.menu[86].Value;
							array4[7] = 16;
							array9[7] = Lang.menu[5].Value;
							if (this.selectedMenu == 7 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else if (this.selectedMenu == 6)
							{
								Main.cMapStyle = "Tab";
								Main.cMapFull = "M";
								Main.cMapZoomIn = "Add";
								Main.cMapZoomOut = "Subtract";
								Main.cMapAlphaUp = "PageUp";
								Main.cMapAlphaDown = "PageDown";
								Main.setKey = -1;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else if (this.selectedMenu >= 0)
							{
								Main.setKey = this.selectedMenu;
							}
							if (Main.setKey >= 0)
							{
								List<Keys> pressedKeys = PlayerInput.GetPressedKeys();
								if (pressedKeys.Count > 0)
								{
									string text = string.Concat(pressedKeys[0]);
									if (text != "None")
									{
										if (Main.setKey == 0)
										{
											Main.cMapStyle = text;
										}
										if (Main.setKey == 1)
										{
											Main.cMapFull = text;
										}
										if (Main.setKey == 2)
										{
											Main.cMapZoomIn = text;
										}
										if (Main.setKey == 3)
										{
											Main.cMapZoomOut = text;
										}
										if (Main.setKey == 4)
										{
											Main.cMapAlphaUp = text;
										}
										if (Main.setKey == 5)
										{
											Main.cMapAlphaDown = text;
										}
										Main.setKey = -1;
									}
								}
							}
						}
						else if (Main.menuMode == 27)
						{
							num2 = 176;
							num4 = 22;
							num5 = 16;
							string[] array11 = new string[]
							{
								Main.cUp,
								Main.cDown,
								Main.cLeft,
								Main.cRight,
								Main.cJump,
								Main.cThrowItem,
								Main.cInv,
								Main.cHeal,
								Main.cMana,
								Main.cBuff,
								Main.cHook,
								Main.cTorch,
								Main.cSmart,
								Main.cMount
							};
							if (Main.setKey >= 0)
							{
								array11[Main.setKey] = "_";
							}
							array9[0] = Lang.menu[74].Value + array11[0];
							array9[1] = Lang.menu[75].Value + array11[1];
							array9[2] = Lang.menu[76].Value + array11[2];
							array9[3] = Lang.menu[77].Value + array11[3];
							array9[4] = Lang.menu[78].Value + array11[4];
							array9[5] = Lang.menu[79].Value + array11[5];
							array9[6] = Lang.menu[80].Value + array11[6];
							array9[7] = Lang.menu[81].Value + array11[7];
							array9[8] = Lang.menu[82].Value + array11[8];
							array9[9] = Lang.menu[83].Value + array11[9];
							array9[10] = Lang.menu[84].Value + array11[10];
							array9[11] = Lang.menu[85].Value + array11[11];
							array9[12] = Lang.menu[120].Value + array11[12];
							array9[13] = Lang.menu[130].Value + array11[13];
							for (int num36 = 0; num36 < 14; num36++)
							{
								array8[num36] = true;
								array7[num36] = 0.45f;
								array5[num36] = -80;
							}
							array7[14] = 0.8f;
							array4[14] = 6;
							array9[14] = Lang.menu[86].Value;
							array7[15] = 0.8f;
							array4[15] = 16;
							array9[15] = Lang.menu[5].Value;
							if (this.selectedMenu == 15 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else if (this.selectedMenu == 14)
							{
								Main.ResetKeyBindings();
								Main.setKey = -1;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else if (this.selectedMenu >= 0)
							{
								Main.setKey = this.selectedMenu;
							}
							if (Main.setKey >= 0)
							{
								List<Keys> pressedKeys2 = PlayerInput.GetPressedKeys();
								if (pressedKeys2.Count > 0)
								{
									string text2 = string.Concat(pressedKeys2[0]);
									if (text2 != "None")
									{
										if (Main.setKey == 0)
										{
											Main.cUp = text2;
										}
										if (Main.setKey == 1)
										{
											Main.cDown = text2;
										}
										if (Main.setKey == 2)
										{
											Main.cLeft = text2;
										}
										if (Main.setKey == 3)
										{
											Main.cRight = text2;
										}
										if (Main.setKey == 4)
										{
											Main.cJump = text2;
										}
										if (Main.setKey == 5)
										{
											Main.cThrowItem = text2;
										}
										if (Main.setKey == 6)
										{
											Main.cInv = text2;
										}
										if (Main.setKey == 7)
										{
											Main.cHeal = text2;
										}
										if (Main.setKey == 8)
										{
											Main.cMana = text2;
										}
										if (Main.setKey == 9)
										{
											Main.cBuff = text2;
										}
										if (Main.setKey == 10)
										{
											Main.cHook = text2;
										}
										if (Main.setKey == 11)
										{
											Main.cTorch = text2;
										}
										if (Main.setKey == 12)
										{
											Main.cSmart = text2;
										}
										if (Main.setKey == 13)
										{
											Main.cMount = text2;
										}
										Main.setKey = -1;
									}
								}
							}
						}
						else if (Main.menuMode == 1127)
						{
							num2 = 250;
							num4 = 52;
							num5 = 4;
							array4[num5 - 1] = 18;
							for (int num37 = 0; num37 < num5; num37++)
							{
								array7[num37] = 0.78f;
							}
							int num38 = 0;
							array9[num38] = (Main.ReversedUpDownArmorSetBonuses ? Lang.menu[220].Value : Lang.menu[221].Value);
							if (this.selectedMenu == num38)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.ReversedUpDownArmorSetBonuses = !Main.ReversedUpDownArmorSetBonuses;
							}
							num38++;
							if (ItemSlot.Options.DisableQuickTrash)
							{
								array9[num38] = Lang.menu[253].Value;
							}
							else
							{
								array9[num38] = (ItemSlot.Options.DisableLeftShiftTrashCan ? Lang.menu[224].Value : Lang.menu[223].Value);
							}
							if (this.selectedMenu == num38)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (ItemSlot.Options.DisableQuickTrash)
								{
									ItemSlot.Options.DisableQuickTrash = false;
									ItemSlot.Options.DisableLeftShiftTrashCan = true;
								}
								else if (ItemSlot.Options.DisableLeftShiftTrashCan)
								{
									ItemSlot.Options.DisableLeftShiftTrashCan = false;
								}
								else
								{
									ItemSlot.Options.DisableQuickTrash = true;
									ItemSlot.Options.DisableLeftShiftTrashCan = false;
								}
							}
							num38++;
							array9[num38] = Lang.menu[222].Value;
							if (this.selectedMenu == num38)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.menuMode = 888;
								Main.MenuUI.SetState(Main.ManageControlsMenu);
							}
							num38++;
							array9[num38] = Lang.menu[5].Value;
							if (this.selectedMenu == num38 || flag5)
							{
								flag5 = false;
								Main.menuMode = 11;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
						}
						else if (Main.menuMode == 12)
						{
							int num39 = (SocialAPI.Network != null) ? 1 : 0;
							Main.menuServer = false;
							array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87].Value;
							array9[1] = Lang.menu[145].Value;
							array9[1 + num39] = Lang.menu[88].Value;
							array9[2 + num39] = Lang.menu[5].Value;
							if (this.selectedMenu == 0)
							{
								Main.LoadPlayers();
								Main.menuMultiplayer = true;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.ClearPendingPlayerSelectCallbacks();
								Main.menuMode = 1;
							}
							else if (this.selectedMenu == 1 + num39)
							{
								Main.LoadPlayers();
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								Main.ClearPendingPlayerSelectCallbacks();
								Main.menuMode = 1;
								Main.menuMultiplayer = true;
								Main.menuServer = true;
							}
							else if (this.selectedMenu == 1)
							{
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								SocialAPI.Friends.OpenJoinInterface();
							}
							else if (this.selectedMenu == 2 + num39 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 0;
							}
							num5 = 3 + num39;
						}
						else if (Main.menuMode == 13)
						{
							if (PlayerInput.SettingsForUI.ShowGamepadHints)
							{
								num2 = 180;
								num4 = 30;
								int num40 = 0;
								array9[num40] = Lang.menu[89].Value.Replace(":", "");
								if (this.selectedMenu == num40)
								{
									string value3 = Lang.menu[89].Value;
									string startingText = Main.getIP;
									UIVirtualKeyboard.KeyboardSubmitEvent submitAction3;
									if ((submitAction3 = Main.<>O.<18>__OnSubmitServerIP) == null)
									{
										submitAction3 = (Main.<>O.<18>__OnSubmitServerIP = new UIVirtualKeyboard.KeyboardSubmitEvent(Main.OnSubmitServerIP));
									}
									UIVirtualKeyboard state = new UIVirtualKeyboard(value3, startingText, submitAction3, Main.CreateGoToMenuEvent(13), 0, true);
									UserInterface.ActiveInstance.SetState(state);
									Main.menuMode = 888;
								}
								array7[num40] = 0.6f;
								array4[num40] = 40;
								num40++;
								for (int num41 = 0; num41 <= 6; num41++)
								{
									if (Main.recentWorld[num41] != null && Main.recentWorld[num41] != "")
									{
										array9[num40] = string.Concat(new string[]
										{
											Main.recentWorld[num41],
											" (",
											Main.recentIP[num41],
											":",
											Main.recentPort[num41].ToString(),
											")"
										});
									}
									else
									{
										array9[num40] = "";
										array[num40] = true;
									}
									array7[num40] = 0.6f;
									array4[num40] = 40;
									if (this.selectedMenu == num40)
									{
										Main.autoPass = false;
										Netplay.ListenPort = Main.recentPort[num41];
										Main.getIP = Main.recentIP[num41];
										string remoteAddress = Main.getIP;
										Action successCallBack;
										if ((successCallBack = Main.<>O.<19>__StartClientGameplay) == null)
										{
											successCallBack = (Main.<>O.<19>__StartClientGameplay = new Action(Main.StartClientGameplay));
										}
										Netplay.SetRemoteIPAsync(remoteAddress, successCallBack);
										Main.menuMode = 14;
										Main.statusText = Language.GetTextValue("Net.ConnectingTo", Main.getIP);
									}
									num40++;
								}
								array4[num40] = 64;
								array9[num40] = Lang.menu[5].Value;
								if (this.selectedMenu == num40 || flag5)
								{
									flag5 = false;
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
									Main.menuMode = 1;
								}
								num40++;
								num5 = num40;
							}
							else
							{
								string a = Main.getIP;
								PlayerInput.WritingText = true;
								Main.instance.HandleIME();
								Main.getIP = Main.GetInputText(Main.getIP, false);
								if (a != Main.getIP)
								{
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								num5 = 11;
								num2 = 180;
								num4 = 30;
								array9[0] = Lang.menu[89].Value;
								array[0] = true;
								array9[1] = Main.getIP;
								array4[1] = 19;
								if (this.textBlinkerState == 1)
								{
									string[] array20 = array9;
									int num119 = 1;
									array20[num119] += "|";
									array5[1] = 1;
								}
								else
								{
									string[] array21 = array9;
									int num120 = 1;
									array21[num120] += " ";
								}
								array[1] = true;
								array4[9] = 44;
								array9[9] = Lang.menu[4].Value;
								array2[9] = true;
								if (Main.getIP != "")
								{
									if (Main.getIP.Substring(0, 1) == " ")
									{
										Main.getIP = "";
									}
									for (int num42 = 0; num42 < Main.getIP.Length; num42++)
									{
										if (Main.getIP != " ")
										{
											array2[9] = false;
										}
									}
								}
								array4[10] = 64;
								array9[10] = Lang.menu[5].Value;
								for (int num43 = 2; num43 <= 8; num43++)
								{
									int num44 = num43 - 2;
									if (Main.recentWorld[num44] != null && Main.recentWorld[num44] != "")
									{
										array9[num43] = string.Concat(new string[]
										{
											Main.recentWorld[num44],
											" (",
											Main.recentIP[num44],
											":",
											Main.recentPort[num44].ToString(),
											")"
										});
									}
									else
									{
										array9[num43] = "";
										array[num43] = true;
									}
									array7[num43] = 0.6f;
									array4[num43] = 40;
								}
								if (this.selectedMenu >= 2 && this.selectedMenu < 9)
								{
									Main.autoPass = false;
									int num45 = this.selectedMenu - 2;
									Netplay.ListenPort = Main.recentPort[num45];
									Main.getIP = Main.recentIP[num45];
									string remoteAddress2 = Main.getIP;
									Action successCallBack2;
									if ((successCallBack2 = Main.<>O.<19>__StartClientGameplay) == null)
									{
										successCallBack2 = (Main.<>O.<19>__StartClientGameplay = new Action(Main.StartClientGameplay));
									}
									Netplay.SetRemoteIPAsync(remoteAddress2, successCallBack2);
									Main.menuMode = 14;
									Main.statusText = Language.GetTextValue("Net.ConnectingTo", Main.getIP);
								}
								if (this.selectedMenu == 10 || flag5)
								{
									flag5 = false;
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
									Main.menuMode = 1;
								}
								if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
								{
									Main.OnSubmitServerIP(Main.getIP);
								}
								this.textBlinkerCount++;
								if (this.textBlinkerCount >= 20)
								{
									if (this.textBlinkerState == 0)
									{
										this.textBlinkerState = 1;
									}
									else
									{
										this.textBlinkerState = 0;
									}
									this.textBlinkerCount = 0;
								}
							}
						}
						else if (Main.menuMode == 131)
						{
							if (PlayerInput.SettingsForUI.ShowGamepadHints)
							{
								string value4 = Lang.menu[90].Value;
								string startingText2 = Main.getPort;
								UIVirtualKeyboard.KeyboardSubmitEvent submitAction4;
								if ((submitAction4 = Main.<>O.<20>__OnSubmitServerPort) == null)
								{
									submitAction4 = (Main.<>O.<20>__OnSubmitServerPort = new UIVirtualKeyboard.KeyboardSubmitEvent(Main.OnSubmitServerPort));
								}
								UIVirtualKeyboard uIVirtualKeyboard4 = new UIVirtualKeyboard(value4, startingText2, submitAction4, Main.CreateGoToMenuEvent(13), 0, true);
								UIVirtualKeyboard uivirtualKeyboard = uIVirtualKeyboard4;
								Func<string, bool> customTextValidationForUpdate;
								if ((customTextValidationForUpdate = Main.<>O.<21>__IsGoodPortAddress) == null)
								{
									customTextValidationForUpdate = (Main.<>O.<21>__IsGoodPortAddress = new Func<string, bool>(Main.IsGoodPortAddress));
								}
								uivirtualKeyboard.CustomTextValidationForUpdate = customTextValidationForUpdate;
								UIVirtualKeyboard uivirtualKeyboard2 = uIVirtualKeyboard4;
								Func<string, bool> customTextValidationForSubmit;
								if ((customTextValidationForSubmit = Main.<>O.<21>__IsGoodPortAddress) == null)
								{
									customTextValidationForSubmit = (Main.<>O.<21>__IsGoodPortAddress = new Func<string, bool>(Main.IsGoodPortAddress));
								}
								uivirtualKeyboard2.CustomTextValidationForSubmit = customTextValidationForSubmit;
								UserInterface.ActiveInstance.SetState(uIVirtualKeyboard4);
								Main.menuMode = 888;
							}
							PlayerInput.WritingText = true;
							Main.instance.HandleIME();
							string a2 = Main.getPort;
							Main.getPort = Main.GetInputText(Main.getPort, false);
							if (a2 != Main.getPort)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							array9[0] = Lang.menu[90].Value;
							array2[2] = true;
							if (Main.getPort != "")
							{
								bool flag7 = false;
								try
								{
									int num46 = Convert.ToInt32(Main.getPort);
									if (num46 > 0 && num46 <= 65535)
									{
										flag7 = true;
									}
								}
								catch
								{
								}
								if (flag7)
								{
									array2[2] = false;
								}
							}
							this.textBlinkerCount++;
							if (this.textBlinkerCount >= 20)
							{
								if (this.textBlinkerState == 0)
								{
									this.textBlinkerState = 1;
								}
								else
								{
									this.textBlinkerState = 0;
								}
								this.textBlinkerCount = 0;
							}
							array9[1] = Main.getPort;
							if (this.textBlinkerState == 1)
							{
								string[] array22 = array9;
								int num121 = 1;
								array22[num121] += "|";
								array5[1] = 1;
							}
							else
							{
								string[] array23 = array9;
								int num122 = 1;
								array23[num122] += " ";
							}
							array[0] = true;
							array[1] = true;
							array4[1] = -20;
							array4[2] = 20;
							array9[2] = Lang.menu[4].Value;
							array9[3] = Lang.menu[5].Value;
							num5 = 4;
							if (this.selectedMenu == 3 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 1;
							}
							if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
							{
								Main.OnSubmitServerPort(Main.getPort);
							}
						}
						else if (Main.menuMode == 16)
						{
							num2 = 200;
							num4 = 60;
							array4[1] = 30;
							array4[2] = 30;
							array4[3] = 30;
							array4[4] = 70;
							array9[0] = Lang.menu[91].Value;
							array[0] = true;
							array9[1] = Lang.menu[92].Value;
							array9[2] = Lang.menu[93].Value;
							array9[3] = Lang.menu[94].Value;
							array9[4] = Lang.menu[5].Value;
							num5 = 5;
							if (this.selectedMenu == 4 || flag5)
							{
								flag5 = false;
								Main.menuMode = 6;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else if (this.selectedMenu > 0)
							{
								if (this.selectedMenu == 1)
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
								}
								else if (this.selectedMenu == 2)
								{
									Main.maxTilesX = 6400;
									Main.maxTilesY = 1800;
								}
								else
								{
									Main.maxTilesX = 8400;
									Main.maxTilesY = 8400;
								}
								Main.clrInput();
								Main.menuMode = -7;
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								WorldGen.setWorldSize();
							}
						}
						else if (Main.menuMode == 1000000)
						{
							num5 = 2;
							array9[0] = Main.statusText;
							array[0] = true;
							num2 = 220;
							num4 = 250;
							array9[1] = Lang.menu[5].Value;
							if (this.selectedMenu == 1 || flag5)
							{
								flag5 = false;
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								Main.menuMode = 6;
								Main.netMode = 0;
							}
						}
						else if (Main.menuMode == 1000001)
						{
							num5 = 2;
							array9[0] = Main.statusText;
							array[0] = true;
							num2 = 220;
							num4 = 250;
							RejectionMenuInfo rejectionMenuInfo = this.RejectionMenuInfo;
							if (rejectionMenuInfo != null)
							{
								array9[0] = rejectionMenuInfo.TextToShow;
							}
							array9[1] = Lang.menu[5].Value;
							if (this.selectedMenu == 1 || flag5)
							{
								flag5 = false;
								ReturnFromRejectionMenuAction returnFromRejectionMenuAction = null;
								if (this.RejectionMenuInfo != null)
								{
									returnFromRejectionMenuAction = this.RejectionMenuInfo.ExitAction;
								}
								if (returnFromRejectionMenuAction != null)
								{
									returnFromRejectionMenuAction();
								}
								else
								{
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
									Main.menuMode = 0;
									Main.netMode = 0;
								}
							}
						}
						else
						{
							Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
						}
					}
				}
			}
			else
			{
				array9[0] = string.Format("{0}  {1}", Language.GetTextValue("UI.LoadingCode"), Program.LoadedPercentage.ToString("P0"));
				if (!ModLoader.skipLoad)
				{
					array9[1] = "Click to skip loading mods";
					array7[1] = 0.5f;
					num5 = 2;
					if (this.selectedMenu == 1)
					{
						ModLoader.skipLoad = true;
					}
				}
			}
			IL_5F25:
			if (Main.menuMode == 888)
			{
				if (!Main._blockFancyUIWhileLoading)
				{
					Main.MenuUI.Draw(Main.spriteBatch, gameTime);
				}
			}
			else
			{
				Main.MenuUI.SetState(null);
			}
			if (UILinkPointNavigator.Shortcuts.BackButtonInUse && !flag5)
			{
				UILinkPointNavigator.Shortcuts.BackButtonLock = true;
			}
			int num47 = this.focusMenu;
			if (Main.menuMode != num6)
			{
				if (Main.menuMode == 10 || Main.netMode == 1 || Main.menuMode == 14)
				{
					Main.gameTips.ClearTips();
				}
				Main.blockMouse = true;
				Main.menuSkip = 0;
				num5 = 0;
				if (PlayerInput.UsingGamepad && Main.InvisibleCursorForGamepad)
				{
					num47 = (this.focusMenu = -1);
					Main.mouseX = (Main.mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
				}
				for (int num48 = 0; num48 < Main.maxMenuItems; num48++)
				{
					this.menuItemScale[num48] = 0.8f;
				}
			}
			if (!Main.mouseLeft)
			{
				Main.blockMouse = true;
			}
			this.selectedMenu = -1;
			this.selectedMenu2 = -1;
			this.focusMenu = -1;
			bool flag8 = Main.mouseLeft && !PlayerInput.UsingGamepad;
			if (!flag)
			{
				this.grabColorSlider = 0;
				Main.hBar = -1f;
				Main.sBar = -1f;
				Main.lBar = -1f;
				Main.aBar = -1f;
			}
			if (flag)
			{
				if (!Main.mouseLeft)
				{
					this.grabColorSlider = 0;
					Main.blockMouse = false;
				}
				int num49 = Main.focusColor;
				Main.focusColor = 0;
				int num50 = num9;
				int num51 = Main.screenWidth / 2 - TextureAssets.Hue.Width() / 2;
				int num52 = 167;
				Vector3 vector6 = Main.rgbToHsl(Main.selColor);
				float num53 = vector6.X;
				float num54 = vector6.Y;
				float luminosity = vector6.Z;
				float num55 = (float)Main.selColor.A / 255f;
				if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f || Main.aBar == -1f)
				{
					Main.hBar = num53;
					Main.sBar = num54;
					Main.lBar = luminosity;
					Main.aBar = num55;
				}
				else
				{
					num53 = Main.hBar;
					num54 = Main.sBar;
					luminosity = Main.lBar;
					num55 = Main.aBar;
				}
				Main.spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num51, (float)num50), Color.White);
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
				{
					Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num51, (float)num50), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num51 + (float)(TextureAssets.Hue.Width() - 2) * Main.hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num50 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
				{
					Main.focusColor = 1;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 5;
					if (flag8 && !Main.blockMouse)
					{
						this.grabColorSlider = 1;
						num53 = (float)(Main.mouseX - num51);
						num53 /= (float)TextureAssets.Hue.Width();
						if (num53 < 0f)
						{
							num53 = 0f;
						}
						if (num53 > 1f)
						{
							num53 = 1f;
						}
						Main.hBar = num53;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num51, (float)num50) + TextureAssets.ColorBar.Value.Size() / 2f);
				num50 += 26;
				Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num51, (float)num50), Color.White);
				for (int num56 = 0; num56 <= num52; num56++)
				{
					float saturation = (float)num56 / (float)num52;
					Color color4 = Main.hslToRgb(num53, saturation, luminosity, byte.MaxValue);
					Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num51 + num56 + 5), (float)(num50 + 4)), color4);
				}
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
				{
					Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num51, (float)num50), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num51 + (float)(TextureAssets.Hue.Width() - 2) * Main.sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num50 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
				{
					Main.focusColor = 2;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 6;
					if (flag8 && !Main.blockMouse)
					{
						this.grabColorSlider = 2;
						num54 = (float)(Main.mouseX - num51);
						num54 /= (float)TextureAssets.Hue.Width();
						if (num54 < 0f)
						{
							num54 = 0f;
						}
						if (num54 > 1f)
						{
							num54 = 1f;
						}
						Main.sBar = num54;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num51, (float)num50) + TextureAssets.ColorBar.Value.Size() / 2f);
				num50 += 26;
				Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num51, (float)num50), Color.White);
				float num57 = 0.15f;
				if (Main.menuMode == 252)
				{
					num57 = 0f;
				}
				for (int num58 = 0; num58 <= num52; num58++)
				{
					float luminosity2 = (float)num58 / (float)num52;
					Color color5 = Main.hslToRgb(num53, num54, luminosity2, byte.MaxValue);
					Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num51 + num58 + 5), (float)(num50 + 4)), color5);
				}
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
				{
					Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num51, (float)num50), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num51 + (float)(TextureAssets.Hue.Width() - 2) * ((Main.lBar - num57) / (1f - num57)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num50 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
				if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
				{
					Main.focusColor = 3;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 7;
					if (flag8 && !Main.blockMouse)
					{
						this.grabColorSlider = 3;
						luminosity = (float)(Main.mouseX - num51);
						luminosity /= (float)TextureAssets.Hue.Width();
						if (luminosity < 0f)
						{
							luminosity = 0f;
						}
						if (luminosity > 1f)
						{
							luminosity = 1f;
						}
						luminosity = (Main.lBar = luminosity * (1f - num57) + num57);
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num51, (float)num50) + TextureAssets.ColorBar.Value.Size() / 2f);
				bool flag9 = false;
				if (Main.menuMode == 252)
				{
					num50 += 26;
					flag9 = true;
					Main.spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num51, (float)num50), Color.White);
					Color color6 = Main.hslToRgb(num53, num54, luminosity, byte.MaxValue);
					for (int num59 = 0; num59 <= num52; num59++)
					{
						float num60 = (float)num59 / (float)num52;
						Color color7 = color6 * num60;
						Main.spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num51 + num59 + 5), (float)(num50 + 4)), color7);
					}
					if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
					{
						Main.spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num51, (float)num50), Main.OurFavoriteColor);
					}
					Main.spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num51 + (float)(TextureAssets.Hue.Width() - 2) * Main.aBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num50 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
					if ((Main.mouseX > num51 - 4 && Main.mouseX < num51 + TextureAssets.Hue.Width() + 4 && Main.mouseY > num50 - 4 && Main.mouseY < num50 + TextureAssets.Hue.Height() + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
					{
						Main.focusColor = 4;
						UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 8;
						if (Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 4;
							num55 = (float)(Main.mouseX - num51);
							num55 /= (float)TextureAssets.Hue.Width();
							if (num55 < 0f)
							{
								num55 = 0f;
							}
							if (num55 > 1f)
							{
								num55 = 1f;
							}
							Main.aBar = num55;
						}
					}
					GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num51, (float)num50) + TextureAssets.ColorBar.Value.Size() / 2f);
				}
				if (num49 != Main.focusColor)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar, byte.MaxValue);
				if (flag9)
				{
					Main.selColor.A = (byte)(Main.aBar * 255f);
				}
			}
			else if (flag)
			{
				string text3 = "";
				for (int num61 = 0; num61 < 6; num61++)
				{
					int num62 = num9;
					int num63 = 370 + Main.screenWidth / 2 - 400;
					if (num61 == 0)
					{
						text3 = Lang.menu[95].Value;
					}
					if (num61 == 1)
					{
						text3 = Lang.menu[96].Value;
						num62 += 30;
					}
					if (num61 == 2)
					{
						text3 = Lang.menu[97].Value;
						num62 += 60;
					}
					if (num61 == 3)
					{
						text3 = string.Concat(Main.selColor.R);
						num63 += 90;
					}
					if (num61 == 4)
					{
						text3 = string.Concat(Main.selColor.G);
						num63 += 90;
						num62 += 30;
					}
					if (num61 == 5)
					{
						text3 = string.Concat(Main.selColor.B);
						num63 += 90;
						num62 += 60;
					}
					for (int num64 = 0; num64 < 5; num64++)
					{
						Color color8 = Color.Black;
						if (num64 == 4)
						{
							color8 = color;
							color8.R = (byte.MaxValue + color8.R) / 2;
							color8.G = (byte.MaxValue + color8.R) / 2;
							color8.B = (byte.MaxValue + color8.R) / 2;
						}
						int num65 = 255;
						int num66 = (int)color8.R - (255 - num65);
						if (num66 < 0)
						{
							num66 = 0;
						}
						color8..ctor((int)((byte)num66), (int)((byte)num66), (int)((byte)num66), (int)((byte)num65));
						int num67 = 0;
						int num68 = 0;
						if (num64 == 0)
						{
							num67 = -2;
						}
						if (num64 == 1)
						{
							num67 = 2;
						}
						if (num64 == 2)
						{
							num68 = -2;
						}
						if (num64 == 3)
						{
							num68 = 2;
						}
						DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, text3, new Vector2((float)(num63 + num67), (float)(num62 + num68)), color8, 0f, default(Vector2), 0.5f, 0, 0f);
					}
				}
				bool flag10 = false;
				for (int num69 = 0; num69 < 2; num69++)
				{
					for (int num70 = 0; num70 < 3; num70++)
					{
						int num71 = num9 + num70 * 30 - 12;
						int num72 = 360 + Main.screenWidth / 2 - 400;
						float scale = 0.9f;
						if (num69 == 0)
						{
							num72 -= 70;
							num71 += 2;
						}
						else
						{
							num72 -= 40;
						}
						text3 = "-";
						if (num69 == 1)
						{
							text3 = "+";
						}
						Vector2 vector2;
						vector2..ctor(24f, 24f);
						int num73 = 142;
						if (Main.mouseX > num72 && (float)Main.mouseX < (float)num72 + vector2.X && Main.mouseY > num71 + 13 && (float)Main.mouseY < (float)(num71 + 13) + vector2.Y)
						{
							if (Main.focusColor != (num69 + 1) * (num70 + 10))
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							Main.focusColor = (num69 + 1) * (num70 + 10);
							flag10 = true;
							num73 = 255;
							if (Main.mouseLeft)
							{
								if (Main.colorDelay <= 1)
								{
									if (Main.colorDelay == 0)
									{
										Main.colorDelay = 40;
									}
									else
									{
										Main.colorDelay = 3;
									}
									int num74 = num69;
									if (num69 == 0)
									{
										num74 = -1;
										if (Main.selColor.R + Main.selColor.G + Main.selColor.B <= 150)
										{
											num74 = 0;
										}
									}
									if (num70 == 0 && (int)Main.selColor.R + num74 >= 0 && (int)Main.selColor.R + num74 <= 255)
									{
										Main.selColor.R = (byte)((int)Main.selColor.R + num74);
									}
									if (num70 == 1 && (int)Main.selColor.G + num74 >= 0 && (int)Main.selColor.G + num74 <= 255)
									{
										Main.selColor.G = (byte)((int)Main.selColor.G + num74);
									}
									if (num70 == 2 && (int)Main.selColor.B + num74 >= 0 && (int)Main.selColor.B + num74 <= 255)
									{
										Main.selColor.B = (byte)((int)Main.selColor.B + num74);
									}
								}
								Main.colorDelay--;
							}
							else
							{
								Main.colorDelay = 0;
							}
						}
						for (int num75 = 0; num75 < 5; num75++)
						{
							Color color9 = Color.Black;
							if (num75 == 4)
							{
								color9 = color;
								color9.R = (byte.MaxValue + color9.R) / 2;
								color9.G = (byte.MaxValue + color9.R) / 2;
								color9.B = (byte.MaxValue + color9.R) / 2;
							}
							int num76 = (int)color9.R - (255 - num73);
							if (num76 < 0)
							{
								num76 = 0;
							}
							color9..ctor((int)((byte)num76), (int)((byte)num76), (int)((byte)num76), (int)((byte)num73));
							int num77 = 0;
							int num78 = 0;
							if (num75 == 0)
							{
								num77 = -2;
							}
							if (num75 == 1)
							{
								num77 = 2;
							}
							if (num75 == 2)
							{
								num78 = -2;
							}
							if (num75 == 3)
							{
								num78 = 2;
							}
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, text3, new Vector2((float)(num72 + num77), (float)(num71 + num78)), color9, 0f, default(Vector2), scale, 0, 0f);
						}
					}
				}
				if (!flag10)
				{
					Main.focusColor = 0;
					Main.colorDelay = 0;
				}
			}
			if (flag2)
			{
				float x = (float)(Main.screenWidth / 2 - 40 + 37);
				int num79 = 320;
				string text4 = "";
				for (int num80 = 0; num80 < 6; num80++)
				{
					int num81 = num79;
					int num82 = 370 + Main.screenWidth / 2 - 400 + 37;
					switch (num80)
					{
					case 0:
						text4 = Lang.menu[98].Value;
						num81 += 30;
						break;
					case 1:
						text4 = Lang.menu[99].Value;
						break;
					case 2:
						text4 = Lang.menu[119].Value;
						num81 += 60;
						break;
					case 3:
						text4 = Math.Round((double)(Main.musicVolume * 100f)).ToString() + "%";
						num82 += 90;
						break;
					case 4:
						text4 = Math.Round((double)(Main.soundVolume * 100f)).ToString() + "%";
						num82 += 90;
						num81 += 30;
						break;
					case 5:
						text4 = Math.Round((double)(Main.ambientVolume * 100f)).ToString() + "%";
						num82 += 90;
						num81 += 60;
						break;
					}
					Color color10 = color;
					color10.R = (byte.MaxValue + color10.R) / 2;
					color10.G = (byte.MaxValue + color10.R) / 2;
					color10.B = (byte.MaxValue + color10.R) / 2;
					int num83 = 255;
					int num84 = (int)color10.R - (255 - num83);
					if (num84 < 0)
					{
						num84 = 0;
					}
					Color textColor;
					textColor..ctor((int)((byte)num84), (int)((byte)num84), (int)((byte)num84), (int)((byte)num83));
					Utils.DrawBorderStringFourWay(Main.spriteBatch, FontAssets.DeathText.Value, text4, (float)num82, (float)num81, textColor, Color.Black, Vector2.Zero, 0.5f);
				}
				int rightHover = IngameOptions.rightHover;
				IngameOptions.rightHover = -1;
				if (!Main.mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2(x, (float)(num79 - 18 + 30));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num85 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume, 0, null);
				if (IngameOptions.inBar || IngameOptions.rightLock == 3)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 2;
					IngameOptions.rightHover = 3;
					if (flag8 && IngameOptions.rightLock == 3)
					{
						Main.musicVolume = num85;
					}
				}
				IngameOptions.valuePosition = new Vector2(x, (float)(num79 - 18 + 60));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num86 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume, 0, null);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 3;
					IngameOptions.rightHover = 2;
					if (flag8 && IngameOptions.rightLock == 2)
					{
						Main.soundVolume = num86;
					}
				}
				IngameOptions.valuePosition = new Vector2(x, (float)(num79 - 18 + 90));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num87 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume, 0, null);
				if (IngameOptions.inBar || IngameOptions.rightLock == 4)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 4;
					IngameOptions.rightHover = 4;
					if (flag8 && IngameOptions.rightLock == 4)
					{
						Main.ambientVolume = num87;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
				if (IngameOptions.rightHover != rightHover)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
			}
			if (flag3)
			{
				int num88 = 400;
				string text5 = "";
				for (int num89 = 0; num89 < 4; num89++)
				{
					int num90 = num88;
					int num91 = 370 + Main.screenWidth / 2 - 400;
					if (num89 == 0)
					{
						text5 = Lang.menu[52].Value + ": " + Main.bgScroll.ToString();
					}
					for (int num92 = 0; num92 < 5; num92++)
					{
						Color color11 = Color.Black;
						if (num92 == 4)
						{
							color11 = color;
							color11.R = (byte.MaxValue + color11.R) / 2;
							color11.G = (byte.MaxValue + color11.R) / 2;
							color11.B = (byte.MaxValue + color11.R) / 2;
						}
						int num93 = 255;
						int num94 = (int)color11.R - (255 - num93);
						if (num94 < 0)
						{
							num94 = 0;
						}
						color11..ctor((int)((byte)num94), (int)((byte)num94), (int)((byte)num94), (int)((byte)num93));
						int num95 = 0;
						int num96 = 0;
						if (num92 == 0)
						{
							num95 = -2;
						}
						if (num92 == 1)
						{
							num95 = 2;
						}
						if (num92 == 2)
						{
							num96 = -2;
						}
						if (num92 == 3)
						{
							num96 = 2;
						}
						DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, text5, new Vector2((float)(num91 + num95), (float)(num90 + num96)), color11, 0f, default(Vector2), 0.5f, 0, 0f);
					}
				}
				IngameOptions.rightHover = -1;
				if (!Main.mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num88 + 12));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num97 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f, 0, null);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 1;
					IngameOptions.rightHover = 2;
					if (flag8 && IngameOptions.rightLock == 2)
					{
						Main.bgScroll = (int)(num97 * 100f);
						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
			}
			bool flag11 = false;
			for (int num98 = 0; num98 < num5; num98++)
			{
				if (array9[num98] != null)
				{
					Vector2 origin = FontAssets.DeathText.Value.MeasureString(array9[num98]);
					origin.X *= 0.5f;
					origin.Y *= 0.5f;
					for (int num99 = 0; num99 < 5; num99++)
					{
						Color color12 = Color.Black;
						if (num99 == 4)
						{
							switch (array6[num98])
							{
							case 0:
								color12 = color;
								break;
							case 1:
								color12 = Main.mcColor;
								break;
							case 2:
								color12 = Main.hcColor;
								break;
							case 3:
								color12 = Main.highVersionColor;
								break;
							case 4:
							case 5:
							case 6:
								color12 = Main.errorColor;
								break;
							default:
								color12 = color;
								break;
							}
							color12.R = (byte.MaxValue + color12.R) / 2;
							color12.G = (byte.MaxValue + color12.G) / 2;
							color12.B = (byte.MaxValue + color12.B) / 2;
						}
						int num100 = (int)(255f * (this.menuItemScale[num98] * 2f - 1f));
						if (array[num98])
						{
							num100 = 255;
						}
						int num101 = (int)color12.R - (255 - num100);
						if (num101 < 0)
						{
							num101 = 0;
						}
						int num102 = (int)color12.G - (255 - num100);
						if (num102 < 0)
						{
							num102 = 0;
						}
						int num103 = (int)color12.B - (255 - num100);
						if (num103 < 0)
						{
							num103 = 0;
						}
						if (num47 == num98 && num99 == 4)
						{
							float num104 = (float)num100 / 255f;
							num101 = (int)((float)num101 * (1f - num104) + 255f * num104);
							num102 = (int)((float)num102 * (1f - num104) + 215f * num104);
							num103 = (int)((float)num103 * (1f - num104) + 0f * num104);
						}
						color12..ctor((int)((byte)num101), (int)((byte)num102), (int)((byte)num103), (int)((byte)num100));
						if (array3[num98])
						{
							if (num99 == 4)
							{
								color12.R = (byte)((int)(color12.R * Main.mouseTextColor) / 300);
								color12.G = (byte)((int)(color12.G * Main.mouseTextColor) / 300);
								color12.B = (byte)((int)(color12.B * Main.mouseTextColor) / 300);
								color12.A = (byte)((int)(color12.A * Main.mouseTextColor) / 300);
							}
							else
							{
								color12.A -= Main.mouseTextColor / 5;
							}
						}
						int num105 = 0;
						int num106 = 0;
						if (num99 == 0)
						{
							num105 = -2;
						}
						if (num99 == 1)
						{
							num105 = 2;
						}
						if (num99 == 2)
						{
							num106 = -2;
						}
						if (num99 == 3)
						{
							num106 = 2;
						}
						float num107 = this.menuItemScale[num98];
						if (Main.menuMode == 15 && num98 == 0)
						{
							num107 *= 0.35f;
						}
						else if (Main.menuMode == 1000000 && num98 == 0)
						{
							num107 *= 0.75f;
						}
						else if (Main.netMode == 2)
						{
							num107 *= 0.5f;
						}
						num107 *= array7[num98];
						if (!array8[num98])
						{
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, array9[num98], new Vector2((float)(num3 + num105 + array5[num98]), (float)(num2 + num4 * num98 + num106) + origin.Y * array7[num98] + (float)array4[num98]), color12, 0f, origin, num107, 0, 0f);
						}
						else
						{
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.DeathText.Value, array9[num98], new Vector2((float)(num3 + num105 + array5[num98]), (float)(num2 + num4 * num98 + num106) + origin.Y * array7[num98] + (float)array4[num98]), color12, 0f, new Vector2(0f, origin.Y), num107, 0, 0f);
						}
					}
					if (!array[num98] && !array2[num98])
					{
						GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)(num3 + array5[num98]), (float)(num2 + num4 * num98) + origin.Y * array7[num98] + (float)array4[num98]));
					}
					if (!array8[num98])
					{
						int num108 = 0;
						this.menuWide[num98] = false;
						Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(array9[num98]) * array7[num98];
						if ((float)Main.mouseX > (float)num3 - vector3.X * 0.5f + (float)array5[num98] - (float)num108 && (float)Main.mouseX < (float)num3 + vector3.X * 0.5f * array7[num98] + (float)array5[num98] + (float)num108 && Main.mouseY > num2 + num4 * num98 + array4[num98] && (float)Main.mouseY < (float)(num2 + num4 * num98 + array4[num98]) + 50f * array7[num98] && Main.hasFocus)
						{
							this.focusMenu = num98;
							if (array[num98] || array2[num98])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num47 != this.focusMenu)
								{
									flag11 = true;
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = num98;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = num98;
								}
							}
						}
					}
					else
					{
						Vector2 vector4 = FontAssets.DeathText.Value.MeasureString(array9[num98]) * array7[num98];
						if (Main.mouseX > num3 + array5[num98] && (float)Main.mouseX < (float)num3 + vector4.X + (float)array5[num98] && Main.mouseY > num2 + num4 * num98 + array4[num98] && (float)Main.mouseY < (float)(num2 + num4 * num98 + array4[num98]) + 50f * array7[num98] && Main.hasFocus)
						{
							this.focusMenu = num98;
							if (array[num98] || array2[num98])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num47 != this.focusMenu)
								{
									flag11 = true;
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = num98;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = num98;
								}
							}
						}
					}
				}
			}
			if (flag11 && num47 != this.focusMenu)
			{
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			}
			if (GamepadMainMenuHandler.MenuItemPositions.Count == 0)
			{
				Vector2 vector5 = new Vector2((float)Math.Cos((double)(Main.GlobalTimeWrappedHourly * 6.2831855f)), (float)Math.Sin((double)(Main.GlobalTimeWrappedHourly * 6.2831855f * 2f))) * new Vector2(30f, 15f) + Vector2.UnitY * 20f;
				UILinkPointNavigator.SetPosition(2000, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f + vector5);
			}
			for (int num109 = 0; num109 < Main.maxMenuItems; num109++)
			{
				if (num109 == this.focusMenu)
				{
					if (this.menuItemScale[num109] < 1f)
					{
						this.menuItemScale[num109] += 0.02f;
					}
					if (this.menuItemScale[num109] > 1f)
					{
						this.menuItemScale[num109] = 1f;
					}
				}
				else if ((double)this.menuItemScale[num109] > 0.8)
				{
					this.menuItemScale[num109] -= 0.02f;
				}
			}
			if (flag4)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
				Player pendingPlayer = Main.PendingPlayer;
				pendingPlayer.PlayerFrame();
				pendingPlayer.position.X = (float)num7 + Main.screenPosition.X;
				pendingPlayer.position.Y = (float)num8 + Main.screenPosition.Y;
				Main.PlayerRenderer.DrawPlayer(Main.Camera, pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero, 0f, 1f);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
			}
			float num110 = 0f;
			if (!WorldGen.drunkWorldGen && Main.menuMode == 0)
			{
				Main.DrawSocialMediaButtons(color, num110);
				num110 += 32f;
				Main.DrawtModLoaderSocialMediaButtons(color, num110);
			}
			if (!WorldGen.drunkWorldGen)
			{
				Main.DrawVersionNumber(color, num110);
				num110 += 20f;
			}
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
			Main.WorkshopPublishingIndicator.Draw(Main.spriteBatch);
			Main.IssueReporterIndicator.Draw(Main.spriteBatch);
			Main.DrawCursor(Main.DrawThickCursor(false), false);
			Main.DrawPendingMouseText();
			if (Main.fadeCounter > 0)
			{
				Color white = Color.White;
				Main.fadeCounter--;
				float num111 = (float)Main.fadeCounter / 120f * 255f;
				if (this.quickSplash)
				{
					num111 = (float)Main.fadeCounter / 75f * 255f;
				}
				byte b2 = (byte)num111;
				white..ctor((int)b2, (int)b2, (int)b2, (int)b2);
				Main.spriteBatch.Draw(TextureAssets.Fade.Value, new Rectangle(-5, -5, Main.screenWidth + 10, Main.screenHeight + 10), white);
			}
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
			}
			else
			{
				Main.mouseLeftRelease = true;
			}
			if (Main.mouseRight)
			{
				Main.mouseRightRelease = false;
			}
			else
			{
				Main.mouseRightRelease = true;
			}
			if (Main.mouseMiddle)
			{
				Main.mouseMiddleRelease = false;
			}
			else
			{
				Main.mouseMiddleRelease = true;
			}
			if (Main.mouseXButton1)
			{
				Main.mouseXButton1Release = false;
			}
			else
			{
				Main.mouseXButton1Release = true;
			}
			if (Main.mouseXButton2)
			{
				Main.mouseXButton2Release = false;
			}
			else
			{
				Main.mouseXButton2Release = true;
			}
			if (Main.menuMode == num)
			{
				GamepadMainMenuHandler.LastDrew = num;
			}
		}

		// Token: 0x06000575 RID: 1397 RVA: 0x001189D0 File Offset: 0x00116BD0
		public static void CycleFrameSkipMode()
		{
			int frameSkipMode = (int)Main.FrameSkipMode;
			frameSkipMode++;
			if (frameSkipMode < 0 || frameSkipMode > 2)
			{
				frameSkipMode = 0;
			}
			Main.FrameSkipMode = (FrameSkipMode)frameSkipMode;
		}

		// Token: 0x06000576 RID: 1398 RVA: 0x001189F7 File Offset: 0x00116BF7
		private static void OnSubmitServerPasswordFromRequest(string passwordCandidate)
		{
			Netplay.ServerPassword = passwordCandidate;
			Main.OnSubmitServerPasswordFromRequest();
		}

		// Token: 0x06000577 RID: 1399 RVA: 0x00118A04 File Offset: 0x00116C04
		private static void OnSubmitServerPasswordFromRequest()
		{
			NetMessage.SendData(38, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			Main.menuMode = 14;
		}

		// Token: 0x06000578 RID: 1400 RVA: 0x00118A35 File Offset: 0x00116C35
		private static void CanceledGivingServerPassword()
		{
			SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			Main.menuMode = 0;
			Netplay.Disconnect = true;
			Netplay.ServerPassword = "";
		}

		// Token: 0x06000579 RID: 1401 RVA: 0x00118A62 File Offset: 0x00116C62
		private void OnSubmitServerPassword(string passwordCandidate)
		{
			Netplay.ServerPassword = passwordCandidate;
			this.OnSubmitServerPassword();
		}

		// Token: 0x0600057A RID: 1402 RVA: 0x00118A70 File Offset: 0x00116C70
		private void OnSubmitServerPassword()
		{
			string text = "-autoshutdown -password \"" + Main.ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId.ToString();
			if (Platform.IsLinux)
			{
				text = ((IntPtr.Size != 8) ? (text + " -x86") : (text + " -x64"));
			}
			text = ((!Main.ActiveWorldFileData.IsCloudSave) ? (text + this.SanitizePathArgument("world", Main.worldPathName)) : (text + this.SanitizePathArgument("cloudworld", Main.worldPathName)));
			text = text + " -worldrollbackstokeep " + Main.WorldRollingBackupsCountToKeep.ToString();
			text = text + " -modpath \"" + ModOrganizer.modPath + "\"";
			string tmlsavedirectory;
			string savedirectory;
			if (Program.LaunchParameters.TryGetValue("-tmlsavedirectory", out tmlsavedirectory))
			{
				text = text + " -tmlsavedirectory \"" + tmlsavedirectory + "\"";
			}
			else if (Program.LaunchParameters.TryGetValue("-savedirectory", out savedirectory))
			{
				text = text + " -savedirectory \"" + savedirectory + "\"";
			}
			if (Main.showServerConsole)
			{
				text += " -showserverconsole";
			}
			Main.tServer = new Process();
			Main.tServer.StartInfo.FileName = Environment.ProcessPath;
			Main.tServer.StartInfo.Arguments = "tModLoader.dll -server " + text;
			if (Main.libPath != "")
			{
				ProcessStartInfo startInfo = Main.tServer.StartInfo;
				startInfo.Arguments = startInfo.Arguments + " -loadlib " + Main.libPath;
			}
			Main.tServer.StartInfo.UseShellExecute = true;
			if (!Main.showServerConsole)
			{
				Main.tServer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			}
			if (SocialAPI.Network != null)
			{
				SocialAPI.Network.LaunchLocalServer(Main.tServer, Main.MenuServerMode);
			}
			else
			{
				Main.tServer.Start();
			}
			Netplay.SetRemoteIP("127.0.0.1");
			Main.autoPass = true;
			Main.statusText = Lang.menu[8].Value;
			Netplay.StartTcpClient();
			Main.menuMode = 10;
		}

		// Token: 0x0600057B RID: 1403 RVA: 0x00118C7E File Offset: 0x00116E7E
		private static void ExitServerPasswordMenu()
		{
			if (SocialAPI.Network != null)
			{
				Main.menuMode = 889;
			}
			else
			{
				Main.menuMode = 6;
			}
			Netplay.ServerPassword = "";
		}

		// Token: 0x0600057C RID: 1404 RVA: 0x00118CA4 File Offset: 0x00116EA4
		private static bool IsGoodPortAddress(string text)
		{
			if (string.IsNullOrWhiteSpace(text))
			{
				return false;
			}
			ushort result = 0;
			return ushort.TryParse(text, out result);
		}

		// Token: 0x0600057D RID: 1405 RVA: 0x00118CCC File Offset: 0x00116ECC
		private static void OnSubmitServerPort(string candidatePort)
		{
			Netplay.ListenPort = (int)ushort.Parse(candidatePort);
			Main.autoPass = false;
			string remoteAddress = Main.getIP;
			Action successCallBack;
			if ((successCallBack = Main.<>O.<19>__StartClientGameplay) == null)
			{
				successCallBack = (Main.<>O.<19>__StartClientGameplay = new Action(Main.StartClientGameplay));
			}
			Netplay.SetRemoteIPAsync(remoteAddress, successCallBack);
			Main.menuMode = 14;
			Main.statusText = Language.GetTextValue("Net.ConnectingTo", Main.getIP);
		}

		// Token: 0x0600057E RID: 1406 RVA: 0x00118D2A File Offset: 0x00116F2A
		public static void OnSubmitServerIP(string inputText)
		{
			Main.getIP = inputText;
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
			Main.menuMode = 131;
			Main.clrInput();
		}

		// Token: 0x0600057F RID: 1407 RVA: 0x00118D58 File Offset: 0x00116F58
		private static void DrawSocialMediaButtons(Color menuColor, float upBump)
		{
			List<TitleLinkButton> titleLinks = Main.TitleLinks;
			Vector2 anchorPosition;
			anchorPosition..ctor(18f, (float)(Main.screenHeight - 26) - upBump);
			for (int i = 0; i < titleLinks.Count; i++)
			{
				titleLinks[i].Draw(Main.spriteBatch, anchorPosition);
				anchorPosition.X += 30f;
			}
		}

		// Token: 0x06000580 RID: 1408 RVA: 0x00118DB8 File Offset: 0x00116FB8
		private static void DrawVersionNumber(Color menuColor, float upBump)
		{
			string supportMessage = Language.GetTextValue("tModLoader.PatreonSupport");
			string patreonShortURL = "patreon.com/tModLoader";
			bool showPatreon = SocialAPI.Mode != SocialMode.Steam;
			Language.GetTextValue("tModLoader.MenuModsEnabled", Math.Max(0, ModLoader.Mods.Length - 1));
			string text = string.Concat(new string[]
			{
				ModLoader.versionedName,
				showPatreon ? (Environment.NewLine + supportMessage) : "",
				(Main.menuMode == 0) ? Environment.NewLine : "",
				Environment.NewLine,
				"Terraria ",
				Main.versionNumber
			});
			Vector2 origin = FontAssets.MouseText.Value.MeasureString(text);
			origin.X *= 0.5f;
			origin.Y *= 0.5f;
			for (int i = 0; i < 5; i++)
			{
				Color color = Color.Black;
				if (i == 4)
				{
					color = menuColor;
					color.R = (byte.MaxValue + color.R) / 2;
					color.G = (byte.MaxValue + color.R) / 2;
					color.B = (byte.MaxValue + color.R) / 2;
				}
				color.A = (byte)((float)color.A * 0.3f);
				int num = 0;
				int num2 = 0;
				if (i == 0)
				{
					num = -2;
				}
				if (i == 1)
				{
					num = 2;
				}
				if (i == 2)
				{
					num2 = -2;
				}
				if (i == 3)
				{
					num2 = 2;
				}
				DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2(origin.X + (float)num + 10f, (float)Main.screenHeight - origin.Y + (float)num2 - 2f - upBump), color, 0f, origin, 1f, 0, 0f);
				if (Main.menuMode == 0)
				{
					string developerModeText = Language.GetTextValue("tModLoader.SwitchVersionInfoButton");
					Vector2 textSize = FontAssets.MouseText.Value.MeasureString(developerModeText);
					Vector2 pos;
					pos..ctor((float)Main.screenWidth - 10f + (float)num, (float)Main.screenHeight - 2f + (float)num2);
					Color d_color = color;
					float scale = 1.2f;
					if (i == 4)
					{
						Rectangle rect;
						rect..ctor((int)(pos.X - textSize.X * scale), (int)(pos.Y - textSize.Y * scale), (int)(textSize.X * scale), (int)(textSize.Y * scale));
						bool flag = rect.Contains(Main.mouseX, Main.mouseY);
						d_color = (flag ? Main.highVersionColor : d_color);
						if (flag && Main.mouseLeftRelease && Main.mouseLeft)
						{
							SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
							Utils.OpenToURL("https://github.com/tModLoader/tModLoader/wiki/tModLoader-guide-for-players#beta-branches");
						}
					}
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, developerModeText, pos, d_color, 0f, textSize, 1.2f, 0, 0f);
				}
				if (showPatreon)
				{
					DynamicSpriteFont font = FontAssets.MouseText.Value;
					Vector2 patreonOrigin = font.MeasureString(supportMessage);
					Vector2 urlSize = font.MeasureString(patreonShortURL);
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, font, patreonShortURL, new Vector2(patreonOrigin.X + (float)num + 10f, (float)Main.screenHeight - patreonOrigin.Y + (float)num2 - 2f - (float)((int)upBump)), color, 0f, Vector2.Zero, 1f, 0, 0f);
					if (i == 4 && Main.mouseLeftRelease && Main.mouseLeft && new Rectangle((int)patreonOrigin.X + 10, Main.screenHeight - (int)urlSize.Y - 2 - (int)upBump, (int)urlSize.X, (int)patreonOrigin.Y).Contains(new Point(Main.mouseX, Main.mouseY)) && Main.hasFocus)
					{
						SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
						Utils.OpenToURL("https://www.patreon.com/tModLoader");
					}
				}
				if (ModOrganizer.ModPackActive != null)
				{
					DynamicSpriteFont font2 = FontAssets.MouseText.Value;
					string modpackText = Language.GetTextValue("tModLoader.CurrentModPack", Path.GetFileNameWithoutExtension(ModOrganizer.ModPackActive));
					Vector2 packOrigin = font2.MeasureString(modpackText);
					DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, font2, modpackText, new Vector2(packOrigin.X + (float)num + 10f, (float)Main.screenHeight - packOrigin.Y + (float)num2 - 2f - (float)((int)upBump)), color, 0f, Vector2.Zero, 1f, 0, 0f);
				}
			}
			Main.HandleNews(menuColor);
		}

		// Token: 0x06000581 RID: 1409 RVA: 0x00119248 File Offset: 0x00117448
		private static void ClearVisualPostProcessEffects()
		{
			for (int i = 0; i < 13; i++)
			{
				string key = "";
				switch (i)
				{
				case 0:
					key = "Solar";
					break;
				case 1:
					key = "Vortex";
					break;
				case 2:
					key = "Nebula";
					break;
				case 3:
					key = "Stardust";
					break;
				case 4:
					key = "MoonLord";
					break;
				case 5:
					key = "MonolithSolar";
					break;
				case 6:
					key = "MonolithVortex";
					break;
				case 7:
					key = "MonolithNebula";
					break;
				case 8:
					key = "MonolithStardust";
					break;
				case 9:
					key = "Blizzard";
					break;
				case 10:
					key = "HeatDistortion";
					break;
				case 11:
					key = "Sandstorm";
					break;
				case 12:
					key = "MonolithMoonLord";
					break;
				}
				if (SkyManager.Instance[key] != null && SkyManager.Instance[key].IsActive())
				{
					SkyManager.Instance[key].Deactivate(Array.Empty<object>());
				}
				if (Overlays.Scene[key] != null && Overlays.Scene[key].IsVisible())
				{
					Overlays.Scene[key].Deactivate(Array.Empty<object>());
				}
				if (Terraria.Graphics.Effects.Filters.Scene[key] != null && Terraria.Graphics.Effects.Filters.Scene[key].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene[key].Deactivate(Array.Empty<object>());
				}
			}
			if (Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate(Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["Graveyard"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["Graveyard"].Deactivate(Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["Sepia"].Deactivate(Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate(Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].Deactivate(Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["WaterDistortion"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene["WaterDistortion"].Deactivate(Array.Empty<object>());
			}
			if (SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance["Martian"].Deactivate(Array.Empty<object>());
			}
			if (SkyManager.Instance["Party"].IsActive())
			{
				SkyManager.Instance["Party"].Deactivate(Array.Empty<object>());
			}
			if (SkyManager.Instance["Slime"].IsActive())
			{
				SkyManager.Instance["Slime"].Deactivate(Array.Empty<object>());
			}
			if (SkyManager.Instance["Ambience"].IsActive())
			{
				SkyManager.Instance["Ambience"].Deactivate(Array.Empty<object>());
			}
			Main.slimeRain = false;
			Main.slimeRainTime = 0.0;
			Main.slimeWarningTime = 0;
			BirthdayParty.WorldClear();
			LanternNight.WorldClear();
			Sandstorm.WorldClear();
			CreditsRollEvent.Reset();
			Main.maxRaining = 0f;
			Main.raining = false;
			Terraria.Graphics.Effects.Filters.Scene.DeactivateAll();
			SkyManager.Instance.DeactivateAll();
		}

		// Token: 0x06000582 RID: 1410 RVA: 0x001195D4 File Offset: 0x001177D4
		private static void PostDrawMenu(Point screenSizeCache, Point screenSizeCacheAfterScaling)
		{
			if (Main.ScreenSize == screenSizeCacheAfterScaling)
			{
				Main.screenPosition.Y = Main.screenPosition.Y - (float)(screenSizeCache.Y - Main.screenHeight);
			}
		}

		// Token: 0x06000583 RID: 1411 RVA: 0x00119600 File Offset: 0x00117800
		private void PreDrawMenu(out Point screenSizeCache, out Point screenSizeCacheAfterScaling)
		{
			float uiScaleWanted = Main._uiScaleWanted;
			float num = (float)Main.screenHeight / 900f;
			if (num < 1f)
			{
				num = 1f;
			}
			if (Main.SettingDontScaleMainMenuUp)
			{
				num = 1f;
			}
			screenSizeCache = Main.ScreenSize;
			Main.UIScale = num;
			PlayerInput.SetZoom_UI();
			screenSizeCacheAfterScaling = Main.ScreenSize;
			if (this._needsMenuUIRecalculation)
			{
				this._needsMenuUIRecalculation = false;
				Main.MenuUI.Recalculate();
			}
			Main._uiScaleWanted = uiScaleWanted;
		}

		// Token: 0x06000584 RID: 1412 RVA: 0x0011967C File Offset: 0x0011787C
		private static bool IsBorderlessDisplayAvailable()
		{
			bool result = false;
			if (Platform.IsWindows)
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06000585 RID: 1413 RVA: 0x00119695 File Offset: 0x00117895
		public static void OpenCharacterSelectUI()
		{
			Main.menuMode = 888;
			Main.MenuUI.SetState(Main._characterSelectMenu);
		}

		// Token: 0x06000586 RID: 1414 RVA: 0x001196B0 File Offset: 0x001178B0
		public static void OpenReportsMenu()
		{
			List<IProvideReports> list = new List<IProvideReports>();
			list.Add(Main.IssueReporter);
			if (SocialAPI.Workshop != null)
			{
				list.Add(SocialAPI.Workshop.IssueReporter);
			}
			UIReportsPage state = new UIReportsPage(Main.MenuUI.CurrentState, Main.menuMode, list);
			Main.menuMode = 888;
			Main.MenuUI.SetState(state);
		}

		// Token: 0x06000587 RID: 1415 RVA: 0x00119710 File Offset: 0x00117910
		public static void OpenWorldSelectUI()
		{
			Main.menuMode = 888;
			Main.MenuUI.SetState(Main._worldSelectMenu);
		}

		// Token: 0x06000588 RID: 1416 RVA: 0x0011972B File Offset: 0x0011792B
		public static void OpenResourcePacksMenu(UIState uiStateToGoBackTo)
		{
			Main.menuMode = 888;
			Main.MenuUI.SetState(new UIResourcePackSelectionMenu(uiStateToGoBackTo, Main.AssetSourceController, AssetInitializer.CreateResourcePackList(Main.instance.Services)));
		}

		// Token: 0x06000589 RID: 1417 RVA: 0x0011975B File Offset: 0x0011795B
		private static void CycleClothingStyle(Player plr)
		{
			Main.CycleClothingStyle_Inner(plr);
			while (!Main.IsValidPlayerStyle(plr))
			{
				Main.CycleClothingStyle_Inner(plr);
			}
		}

		// Token: 0x0600058A RID: 1418 RVA: 0x00119773 File Offset: 0x00117973
		private static bool IsValidPlayerStyle(Player plr)
		{
			return plr.skinVariant - 10 > 1;
		}

		// Token: 0x0600058B RID: 1419 RVA: 0x00119784 File Offset: 0x00117984
		private static void CycleClothingStyle_Inner(Player plr)
		{
			if (plr.Male)
			{
				int num = 0;
				int[] variantOrderMale = PlayerVariantID.Sets.VariantOrderMale;
				for (int i = 0; i < variantOrderMale.Length; i++)
				{
					if (variantOrderMale[i] == plr.skinVariant)
					{
						num = i;
						break;
					}
				}
				if (num == variantOrderMale.Length - 1)
				{
					plr.skinVariant = variantOrderMale[0];
					return;
				}
				plr.skinVariant = variantOrderMale[num + 1];
				return;
			}
			else
			{
				int num2 = 0;
				int[] variantOrderFemale = PlayerVariantID.Sets.VariantOrderFemale;
				for (int j = 0; j < variantOrderFemale.Length; j++)
				{
					if (variantOrderFemale[j] == plr.skinVariant)
					{
						num2 = j;
						break;
					}
				}
				if (num2 == variantOrderFemale.Length - 1)
				{
					plr.skinVariant = variantOrderFemale[0];
					return;
				}
				plr.skinVariant = variantOrderFemale[num2 + 1];
				return;
			}
		}

		// Token: 0x0600058C RID: 1420 RVA: 0x0011982C File Offset: 0x00117A2C
		public static void ResetKeyBindings()
		{
			Main.cUp = "W";
			Main.cDown = "S";
			Main.cLeft = "A";
			Main.cRight = "D";
			Main.cJump = "Space";
			Main.cThrowItem = "T";
			Main.cInv = "Escape";
			Main.cHeal = "H";
			Main.cMana = "J";
			Main.cBuff = "B";
			Main.cHook = "E";
			Main.cTorch = "LeftShift";
			Main.cSmart = "LeftControl";
			Main.cMount = "R";
		}

		// Token: 0x0600058D RID: 1421 RVA: 0x001198C8 File Offset: 0x00117AC8
		public static void CursorColor()
		{
			Main.cursorAlpha += (float)Main.cursorColorDirection * 0.015f;
			if (Main.cursorAlpha >= 1f)
			{
				Main.cursorAlpha = 1f;
				Main.cursorColorDirection = -1;
			}
			if ((double)Main.cursorAlpha <= 0.6)
			{
				Main.cursorAlpha = 0.6f;
				Main.cursorColorDirection = 1;
			}
			float num = Main.cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)Main.mouseColor.R * Main.cursorAlpha);
			byte g = (byte)((float)Main.mouseColor.G * Main.cursorAlpha);
			byte b = (byte)((float)Main.mouseColor.B * Main.cursorAlpha);
			byte a = (byte)(255f * num);
			Main.cursorColor = new Color((int)r, (int)g, (int)b, (int)a);
			Main.cursorScale = Main.cursorAlpha * 0.3f + 0.7f + 0.1f;
		}

		// Token: 0x0600058E RID: 1422 RVA: 0x001199AC File Offset: 0x00117BAC
		protected void DrawSplash(GameTime gameTime)
		{
			int num = 10000;
			base.GraphicsDevice.Clear(Color.Black);
			base.Draw(gameTime);
			this.TickLoadProcess();
			long num2 = Main.splashTimer.ElapsedMilliseconds;
			if (Main.musicVolume == 0f)
			{
				this.quickSplash = true;
				num2 = 999999L;
				num = 0;
			}
			if (Main.Assets.PendingAssets == 0 && this._musicLoaded && this._artLoaded && Program.LoadedEverything)
			{
				Main._isAsyncLoadComplete = true;
			}
			Main.spriteBatch.Begin();
			this.splashCounter++;
			Color white = Color.White;
			byte b = 0;
			if (this.quickSplash)
			{
				if (this.splashCounter <= 75)
				{
					b = (byte)((float)this.splashCounter / 75f * 255f);
				}
				else if (this.splashCounter <= 125)
				{
					b = byte.MaxValue;
				}
				else if (this.splashCounter <= 200)
				{
					if (!Main._isAsyncLoadComplete)
					{
						this.splashCounter = 125;
					}
					b = (byte)((float)(75 - (this.splashCounter - 125)) / 75f * 255f);
				}
				else
				{
					this.Initialize_AlmostEverything();
					Main.PostContentLoadInitialize();
					Main.showSplash = false;
					Main.fadeCounter = 75;
					Main.splashTimer.Stop();
				}
			}
			else
			{
				int num3 = 90;
				int num4 = 410;
				int num5 = 620;
				int num6 = 60;
				if (this.splashCounter >= num3)
				{
					if (this.splashCounter <= num4)
					{
						float num7 = (float)(this.splashCounter - num3) / (float)(num4 - num3);
						num7 *= num7 * num7 * num7;
						num7 *= 255f;
						b = (byte)num7;
					}
					else if (this.splashCounter <= num5)
					{
						b = byte.MaxValue;
						if (this.splashCounter >= num5 - num6)
						{
							b = (byte)((float)(num6 - (this.splashCounter - (num5 - num6))) / (float)num6 * 255f);
						}
					}
					else if (!Main._isAsyncLoadComplete)
					{
						b = 0;
						num = 1;
					}
					else
					{
						this.Initialize_AlmostEverything();
						Main.PostContentLoadInitialize();
						Main.showSplash = false;
						Main.fadeCounter = 120;
						Main.splashTimer.Stop();
					}
				}
			}
			white..ctor((int)b, (int)b, (int)b, (int)b);
			Asset<Texture2D> splashTextureLegoBack = TextureAssets.SplashTextureLegoBack;
			if (splashTextureLegoBack.Width() > 0 && splashTextureLegoBack.Height() > 0)
			{
				Vector2 vector = new Vector2((float)Main.screenWidth / (float)splashTextureLegoBack.Width(), (float)Main.screenHeight / (float)splashTextureLegoBack.Height());
				splashTextureLegoBack.Size() / 2f;
				Vector2 position = new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f;
				Vector2 scale = vector;
				if (scale.X > scale.Y)
				{
					scale.X = scale.Y;
				}
				else
				{
					scale.Y = scale.X;
				}
				Vector2 scale2 = vector;
				if (scale2.X < scale2.Y)
				{
					scale2.X = scale2.Y;
				}
				else
				{
					scale2.Y = scale2.X;
				}
				Main.spriteBatch.Draw(splashTextureLegoBack.Value, position, null, white, 0f, splashTextureLegoBack.Size() / 2f, scale2, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.SplashTextureLegoTree.Value, Main.ScreenSize.ToVector2(), null, white, 0f, TextureAssets.SplashTextureLegoTree.Size(), scale, 0, 0f);
				Main.spriteBatch.Draw(TextureAssets.SplashTextureLegoFront.Value, position, null, white, 0f, TextureAssets.SplashTextureLegoFront.Size() / 2f, scale, 0, 0f);
			}
			int num8 = 70;
			if (num == 1)
			{
				this.DrawSplash_LoadingFlower(Color.White);
			}
			else if (num2 > (long)num)
			{
				this.DrawSplash_LoadingFlower(white);
			}
			this._splashFrameCount += 1f;
			if (this._splashFrameCount >= (float)num8)
			{
				this._splashFrameCount = 0f;
			}
			Main.spriteBatch.End();
		}

		// Token: 0x0600058F RID: 1423 RVA: 0x00119DB0 File Offset: 0x00117FB0
		private void DrawSplash_LoadingFlower(Color splashColor)
		{
			float val = (float)Main.screenWidth / Main.MinimumZoomComparerX;
			float val2 = (float)Main.screenHeight / Main.MinimumZoomComparerY;
			float num = Math.Max(Math.Max(1f, val), val2);
			Texture2D value = TextureAssets.LoadingSunflower.Value;
			int num2 = 3;
			int num3 = 19;
			Vector2 position = new Vector2((float)(Main.screenWidth / 2), (float)Main.screenHeight) - new Vector2(0f, 50f) * num;
			int num4 = (int)this._splashFrameCount / num2;
			if (num4 >= num3)
			{
				num4 = 0;
			}
			Rectangle rectangle = value.Frame(1, num3, 0, (num4 + 10) % num3, 0, 0);
			float rotation = 0f;
			Vector2 origin = rectangle.Size() / 2f;
			Main.spriteBatch.Draw(value, position, new Rectangle?(rectangle), splashColor, rotation, origin, num, 0, 0f);
		}

		// Token: 0x06000590 RID: 1424 RVA: 0x00119E90 File Offset: 0x00118090
		private void DrawSplash_LoadingStar(Color splashColor)
		{
			int num = 4;
			Vector2 position = new Vector2((float)Main.screenWidth, (float)Main.screenHeight) - new Vector2(30f);
			int num2 = (int)this._splashFrameCount / num;
			if (num2 >= 15)
			{
				num2 = 0;
			}
			if (num2 >= 8)
			{
				num2 = 14 - num2;
			}
			Rectangle rectangle = TextureAssets.Item[75].Frame(1, 8, 0, num2, 0, 0);
			rectangle.Height -= 2;
			float rotation = 0f;
			Vector2 origin = rectangle.Size() / 2f;
			origin.Y += 2f;
			Main.spriteBatch.Draw(TextureAssets.Item[75].Value, position, new Rectangle?(rectangle), splashColor, rotation, origin, 1f, 0, 0f);
		}

		// Token: 0x06000591 RID: 1425 RVA: 0x00119F54 File Offset: 0x00118154
		protected void DrawUnderworldBackground(bool flat)
		{
			if (Main.screenPosition.Y + (float)Main.screenHeight >= (float)(Main.maxTilesY - 220) * 16f)
			{
				Vector2 screenOffset = Main.screenPosition + new Vector2((float)(Main.screenWidth >> 1), (float)(Main.screenHeight >> 1));
				float pushUp = (Main.GameViewMatrix.Zoom.Y - 1f) * 0.5f * 200f;
				SkyManager.Instance.ResetDepthTracker();
				for (int num = 4; num >= 0; num--)
				{
					Main.DrawUnderworldBackgroudLayer(flat, screenOffset, pushUp, num);
				}
				if (!Main.mapFullscreen)
				{
					SkyManager.Instance.DrawRemainingDepth(Main.spriteBatch);
				}
				this.DrawSurfaceBG_DrawChangeOverlay(12);
			}
		}

		// Token: 0x06000592 RID: 1426 RVA: 0x0011A008 File Offset: 0x00118208
		private static void DrawUnderworldBackgroudLayer(bool flat, Vector2 screenOffset, float pushUp, int layerTextureIndex)
		{
			int num = Main.underworldBG[layerTextureIndex];
			Asset<Texture2D> asset = TextureAssets.Underworld[num];
			if (!asset.IsLoaded)
			{
				Main.Assets.Request<Texture2D>(asset.Name);
			}
			Texture2D value = asset.Value;
			Vector2 vec = new Vector2((float)value.Width, (float)value.Height) * 0.5f;
			float num2 = flat ? 1f : ((float)(layerTextureIndex * 2) + 3f);
			Vector2 vector;
			vector..ctor(1f / num2);
			Rectangle value2;
			value2..ctor(0, 0, value.Width, value.Height);
			float num3 = 1.3f;
			Vector2 zero = Vector2.Zero;
			int num4 = 0;
			switch (num)
			{
			case 1:
			{
				int num5 = (int)(Main.GlobalTimeWrappedHourly * 8f) % 4;
				value2..ctor((num5 >> 1) * (value.Width >> 1), num5 % 2 * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += 175f;
				break;
			}
			case 2:
				zero.Y += 100f;
				break;
			case 3:
				zero.Y += 75f;
				break;
			case 4:
				num3 = 0.5f;
				zero.Y -= 0f;
				break;
			case 5:
				zero.Y += (float)num4;
				break;
			case 6:
			{
				int num6 = (int)(Main.GlobalTimeWrappedHourly * 8f) % 4;
				value2..ctor(num6 % 2 * (value.Width >> 1), (num6 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += (float)num4;
				zero.Y += -60f;
				break;
			}
			case 7:
			{
				int num7 = (int)(Main.GlobalTimeWrappedHourly * 8f) % 4;
				value2..ctor(num7 % 2 * (value.Width >> 1), (num7 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += (float)num4;
				zero.X -= 400f;
				zero.Y += 90f;
				break;
			}
			case 8:
			{
				int num8 = (int)(Main.GlobalTimeWrappedHourly * 8f) % 4;
				value2..ctor(num8 % 2 * (value.Width >> 1), (num8 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += (float)num4;
				zero.Y += 90f;
				break;
			}
			case 9:
				zero.Y += (float)num4;
				zero.Y -= 30f;
				break;
			case 10:
				zero.Y += 250f * num2;
				break;
			case 11:
				zero.Y += 100f * num2;
				break;
			case 12:
				zero.Y += 20f * num2;
				break;
			case 13:
			{
				zero.Y += 20f * num2;
				int num9 = (int)(Main.GlobalTimeWrappedHourly * 8f) % 4;
				value2..ctor(num9 % 2 * (value.Width >> 1), (num9 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				break;
			}
			}
			if (flat)
			{
				num3 *= 1.5f;
			}
			vec *= num3;
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / vector.X);
			if (flat)
			{
				zero.Y += (float)(TextureAssets.Underworld[0].Height() >> 1) * 1.3f - vec.Y;
			}
			zero.Y -= pushUp;
			float num10 = num3 * (float)value2.Width;
			int num11 = (int)((float)((int)(screenOffset.X * vector.X - vec.X + zero.X - (float)(Main.screenWidth >> 1))) / num10);
			vec = vec.Floor();
			int num12 = (int)Math.Ceiling((double)((float)Main.screenWidth / num10));
			int num13 = (int)(num3 * ((float)(value2.Width - 1) / vector.X));
			Vector2 vec2 = (new Vector2((float)((num11 - 2) * num13), (float)Main.UnderworldLayer * 16f) + vec - screenOffset) * vector + screenOffset - Main.screenPosition - vec + zero;
			vec2 = vec2.Floor();
			while (vec2.X + num10 < 0f)
			{
				num11++;
				vec2.X += num10;
			}
			for (int i = num11 - 2; i <= num11 + 4 + num12; i++)
			{
				Main.spriteBatch.Draw(value, vec2, new Rectangle?(value2), Color.White, 0f, Vector2.Zero, num3, 0, 0f);
				if (layerTextureIndex == 0)
				{
					int num14 = (int)(vec2.Y + (float)value2.Height * num3);
					Main.spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle((int)vec2.X, num14, (int)((float)value2.Width * num3), Math.Max(0, Main.screenHeight - num14)), new Color(11, 3, 7));
				}
				vec2.X += num10;
			}
		}

		// Token: 0x06000593 RID: 1427 RVA: 0x0011A5D4 File Offset: 0x001187D4
		protected void DrawBackground()
		{
			float num = Main.shimmerAlpha;
			if (num == 1f)
			{
				Main.ugBackTransition = 0f;
				return;
			}
			if (!Main.BackgroundEnabled)
			{
				this.OldDrawBackground();
				return;
			}
			Color[] slices = new Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			double num2 = (double)(Main.maxTilesY - 330);
			double num3 = (double)((int)((num2 - Main.worldSurface) / 6.0) * 6);
			num2 = Main.worldSurface + num3 - 5.0;
			int num4 = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num5 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num6 = 128;
			Vector2 vector = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			Vector3 vector2;
			vector2..ctor(0.9f);
			float num7 = MathHelper.Clamp((Main.screenPosition.Y - (float)Main.worldSurface * 16f) / 300f, 0f, 1f);
			float globalBrightness = Lighting.GlobalBrightness;
			Lighting.GlobalBrightness = globalBrightness * (1f - num7) + 1f * num7;
			float value = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
			value = MathHelper.Clamp(value, 0f, 1f);
			int num8 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int modBG;
			SceneEffectPriority priority;
			LoaderManager.Get<UndergroundBackgroundStylesLoader>().ChooseStyle(out modBG, out priority);
			int num9 = 3;
			num9 = ((num8 <= Main.caveBackX[0]) ? Main.caveBackStyle[0] : ((num8 <= Main.caveBackX[1]) ? Main.caveBackStyle[1] : ((num8 > Main.caveBackX[2]) ? Main.caveBackStyle[3] : Main.caveBackStyle[2])));
			num9 += 3;
			if (priority == SceneEffectPriority.BiomeLow)
			{
				num9 = modBG;
			}
			if (Main.SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (Main.screenPosition.Y + (float)Main.screenHeight + 1200f) / 16f < (float)(Main.maxTilesY - 250))
			{
				num9 = 1;
			}
			if (Main.SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
			{
				if (num9 == 1)
				{
					if (Main.SceneMetrics.JungleTileCount > Main.SceneMetrics.SnowTileCount)
					{
						num9 = 11;
					}
				}
				else
				{
					num9 = 11;
				}
			}
			if (priority == SceneEffectPriority.BiomeMedium)
			{
				num9 = modBG;
			}
			if (WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenHeight / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16))
			{
				num9 = (Main.player[Main.myPlayer].ZoneCorrupt ? 19 : (Main.player[Main.myPlayer].ZoneCrimson ? 21 : ((!Main.player[Main.myPlayer].ZoneHallow) ? 18 : 20)));
			}
			else if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 60.0 && (double)(Main.screenPosition.Y / 16f) < num2 - 60.0)
			{
				if (Main.player[Main.myPlayer].ZoneSnow)
				{
					if (Main.player[Main.myPlayer].ZoneCorrupt)
					{
						num9 = 15;
					}
					else if (Main.player[Main.myPlayer].ZoneCrimson)
					{
						num9 = 16;
					}
					else if (Main.player[Main.myPlayer].ZoneHallow)
					{
						num9 = 17;
					}
				}
				else if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num9 = 12;
				}
				else if (Main.player[Main.myPlayer].ZoneCrimson)
				{
					num9 = 13;
				}
				else if (Main.player[Main.myPlayer].ZoneHallow)
				{
					num9 = 14;
				}
			}
			if (Main.player[Main.myPlayer].ZoneGlowshroom)
			{
				num9 = 2;
			}
			if (priority >= SceneEffectPriority.BiomeHigh)
			{
				num9 = modBG;
			}
			if (GlobalBackgroundStyleLoader.loaded)
			{
				GlobalBackgroundStyleLoader.DelegateChooseUndergroundBackgroundStyle[] hookChooseUndergroundBackgroundStyle = GlobalBackgroundStyleLoader.HookChooseUndergroundBackgroundStyle;
				for (int num72 = 0; num72 < hookChooseUndergroundBackgroundStyle.Length; num72++)
				{
					hookChooseUndergroundBackgroundStyle[num72](ref num9);
				}
			}
			if (num9 != Main.undergroundBackground)
			{
				Main.oldUndergroundBackground = Main.undergroundBackground;
				Main.undergroundBackground = num9;
				Main.ugBackTransition = 1f;
			}
			if (num > 0f)
			{
				Main.ugBackTransition = 0f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition -= 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] array = new int[7];
			int[] array2 = new int[7];
			for (int i = 0; i < 2; i++)
			{
				int num10 = Main.undergroundBackground;
				if (i == 1)
				{
					num10 = Main.oldUndergroundBackground;
				}
				int[] array3 = new int[7];
				switch (num10)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (Main.iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (Main.iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = 128 + Main.hellBackStyle;
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + Main.hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + Main.hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + Main.hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + Main.hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + Main.hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + Main.hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + Main.hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + Main.hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + Main.hellBackStyle;
					break;
				case 11:
					if (Main.jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + Main.hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + Main.hellBackStyle;
					}
					break;
				case 12:
				case 13:
				case 14:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[4] = 128 + Main.hellBackStyle;
					switch (num10)
					{
					case 12:
						array3[3] = 193 + Main.worldID % 4;
						break;
					case 13:
						array3[3] = 188 + Main.worldID % 5;
						break;
					case 14:
						array3[3] = 197 + Main.worldID % 3;
						break;
					}
					break;
				default:
					if (num10 >= 15 && num10 <= 17)
					{
						array3[0] = 40;
						array3[1] = 33;
						array3[2] = 34;
						array3[4] = 128 + Main.hellBackStyle;
						switch (num10)
						{
						case 15:
							array3[3] = 200;
							break;
						case 16:
							array3[3] = 201 + Main.worldID % 2;
							break;
						case 17:
							array3[3] = 203 + Main.worldID % 4;
							break;
						}
					}
					else
					{
						switch (num10)
						{
						case 18:
							array3[0] = 290;
							array3[1] = 291;
							break;
						case 19:
							array3[0] = 292;
							array3[1] = 293;
							break;
						case 20:
							array3[0] = 294;
							array3[1] = 295;
							break;
						case 21:
							array3[0] = 296;
							array3[1] = 297;
							break;
						}
					}
					break;
				}
				if (Main.hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				array3[6] = 185 + Main.hellBackStyle;
				LoaderManager.Get<UndergroundBackgroundStylesLoader>().FillTextureArray(num10, array3);
				this.LoadBackground(array3[0]);
				this.LoadBackground(array3[1]);
				this.LoadBackground(array3[2]);
				this.LoadBackground(array3[3]);
				this.LoadBackground(array3[4]);
				this.LoadBackground(array3[5]);
				this.LoadBackground(array3[6]);
				if (i == 0)
				{
					for (int j = 0; j < 7; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 7; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			globalBrightness = 1.2f - 0.2f * value;
			float x = vector2.X;
			float y = vector2.Y;
			float z = vector2.Z;
			num6 = TextureAssets.Background[array[0]].Width() - 32;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
			this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
			this.bgTopY = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num6 / 16; m++)
				{
					int num11 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
					if (num11 == -8)
					{
						num11 = 8;
					}
					float num73 = (float)(this.bgStartX + num6 * l + m * 16 + 8);
					float num12 = (float)this.bgTopY;
					Color color = Lighting.GetColor((int)((num73 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num12) / 16f));
					color.R = (byte)((float)color.R * x);
					color.G = (byte)((float)color.G * y);
					color.B = (byte)((float)color.B * z);
					if (num > 0f)
					{
						color *= 1f - num;
					}
					Main.spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2((float)(this.bgStartX + num6 * l + 16 * m + num11), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * m + num11 + 16, 0, 16, 16)), color);
				}
			}
			if (Main.ugBackTransition > 0f)
			{
				num6 = TextureAssets.Background[array2[0]].Width() - 32;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int num13 = 0; num13 < num6 / 16; num13++)
					{
						int num14 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
						if (num14 == -8)
						{
							num14 = 8;
						}
						float num74 = (float)(this.bgStartX + num6 * n + num13 * 16 + 8);
						float num15 = (float)this.bgTopY;
						Color color2 = Lighting.GetColor((int)((num74 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num15) / 16f));
						color2.R = (byte)((float)color2.R * x);
						color2.G = (byte)((float)color2.G * y);
						color2.B = (byte)((float)color2.B * z);
						Color color3 = color2;
						color3.R = (byte)((float)color3.R * Main.ugBackTransition);
						color3.G = (byte)((float)color3.G * Main.ugBackTransition);
						color3.B = (byte)((float)color3.B * Main.ugBackTransition);
						color3.A = (byte)((float)color3.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2((float)(this.bgStartX + num6 * n + 16 * num13 + num14), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num13 + num14 + 16, 0, 16, 16)), color3);
					}
				}
			}
			bool flag = false;
			bool flag2 = false;
			this.bgTopY = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				num6 = TextureAssets.Background[array[1]].Width() - 32;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
				if (Main.worldSurface * 16.0 < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16.0 < (double)(Main.Camera.ScaledPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag2 = true;
				}
				int num16 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num16 == -8)
				{
					num16 = 8;
				}
				for (int num17 = 0; num17 < this.bgLoops; num17++)
				{
					for (int num18 = 0; num18 < this.bgLoopsY; num18++)
					{
						for (int num19 = 0; num19 < num6 / 16; num19++)
						{
							for (int num20 = 0; num20 < 6; num20++)
							{
								float num75 = (float)(this.bgStartY + num18 * 96 + num20 * 16 + 8);
								int num21 = (int)(((float)(this.bgStartX + num6 * num17 + num19 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num22 = (int)((num75 + Main.screenPosition.Y) / 16f);
								Color color4 = Lighting.GetColor(num21, num22);
								if (WorldGen.InWorld(num21, num22, 0))
								{
									if (Main.tile[num21, num22] == null)
									{
										Main.tile[num21, num22] = default(Tile);
									}
									if (num == 0f && (color4.R > 0 || color4.G > 0 || color4.B > 0))
									{
										if (!Main.drawToScreen)
										{
											VertexColors vertices;
											Lighting.GetCornerColors(num21, num22, out vertices, 1f);
											vertices.BottomLeftColor = new Color(vertices.BottomLeftColor.ToVector3() * vector2);
											vertices.BottomRightColor = new Color(vertices.BottomRightColor.ToVector3() * vector2);
											Main.tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num16 + 16, 16 * num20, 16, 16)), vertices, Vector2.Zero, 1f, 0);
										}
										else
										{
											if (((int)color4.R > num4 || (double)color4.G > (double)num4 * 1.1 || (double)color4.B > (double)num4 * 1.2) && !Main.tile[num21, num22].active() && Main.WallLightAt(num21, num22) && Main.ugBackTransition == 0f)
											{
												Lighting.GetColor9Slice(num21, num22, ref slices);
												try
												{
													for (int num23 = 0; num23 < 9; num23++)
													{
														int num24 = 0;
														int num25 = 0;
														int width = 4;
														int height = 4;
														Color color5 = color4;
														Color color6 = color4;
														switch (num23)
														{
														case 0:
															if (!Main.tile[num21 - 1, num22 - 1].active())
															{
																color6 = slices[num23];
															}
															break;
														case 1:
															width = 8;
															num24 = 4;
															if (!Main.tile[num21, num22 - 1].active())
															{
																color6 = slices[num23];
															}
															break;
														case 2:
															num24 = 12;
															if (!Main.tile[num21 + 1, num22 - 1].active())
															{
																color6 = slices[num23];
															}
															break;
														case 3:
															height = 8;
															num25 = 4;
															if (!Main.tile[num21 - 1, num22].active())
															{
																color6 = slices[num23];
															}
															break;
														case 4:
															width = 8;
															height = 8;
															num24 = 4;
															num25 = 4;
															break;
														case 5:
															num24 = 12;
															num25 = 4;
															height = 8;
															if (!Main.tile[num21 + 1, num22].active())
															{
																color6 = slices[num23];
															}
															break;
														case 6:
															num25 = 12;
															if (!Main.tile[num21 - 1, num22 + 1].active())
															{
																color6 = slices[num23];
															}
															break;
														case 7:
															width = 8;
															height = 4;
															num24 = 4;
															num25 = 12;
															if (!Main.tile[num21, num22 + 1].active())
															{
																color6 = slices[num23];
															}
															break;
														case 8:
															num24 = 12;
															num25 = 12;
															if (!Main.tile[num21 + 1, num22 + 1].active())
															{
																color6 = slices[num23];
															}
															break;
														}
														color5.R = (color4.R + color6.R) / 2;
														color5.G = (color4.G + color6.G) / 2;
														color5.B = (color4.B + color6.B) / 2;
														color5.R = (byte)((float)color5.R * x);
														color5.G = (byte)((float)color5.G * y);
														color5.B = (byte)((float)color5.B * z);
														Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num24 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20 + num25)) + vector, new Rectangle?(new Rectangle(16 * num19 + num24 + num16 + 16, 16 * num20 + num25, width, height)), color5);
														if (Main.ugBackTransition > 0f)
														{
															Color color7 = color5;
															color7.R = (byte)((float)color7.R * Main.ugBackTransition);
															color7.G = (byte)((float)color7.G * Main.ugBackTransition);
															color7.B = (byte)((float)color7.B * Main.ugBackTransition);
															color7.A = (byte)((float)color7.A * Main.ugBackTransition);
															Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num24 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20 + num25)) + vector, new Rectangle?(new Rectangle(16 * num19 + num24 + num16 + 16, 16 * num20 + num25, width, height)), color7);
														}
													}
													goto IL_1C65;
												}
												catch
												{
													color4.R = (byte)((float)color4.R * x);
													color4.G = (byte)((float)color4.G * y);
													color4.B = (byte)((float)color4.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num16 + 16, 16 * num20, 16, 16)), color4);
													goto IL_1C65;
												}
											}
											if (((int)color4.R > num5 || (double)color4.G > (double)num5 * 1.1 || (double)color4.B > (double)num5 * 1.2) && Main.ugBackTransition == 0f)
											{
												Lighting.GetColor4Slice(num21, num22, ref slices);
												for (int num26 = 0; num26 < 4; num26++)
												{
													int num27 = 0;
													int num28 = 0;
													Color color8 = color4;
													Color color9 = slices[num26];
													switch (num26)
													{
													case 1:
														num27 = 8;
														break;
													case 2:
														num28 = 8;
														break;
													case 3:
														num27 = 8;
														num28 = 8;
														break;
													}
													color8.R = (color4.R + color9.R) / 2;
													color8.G = (color4.G + color9.G) / 2;
													color8.B = (color4.B + color9.B) / 2;
													color8.R = (byte)((float)color8.R * x);
													color8.G = (byte)((float)color8.G * y);
													color8.B = (byte)((float)color8.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num27 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20 + num28)) + vector, new Rectangle?(new Rectangle(16 * num19 + num27 + num16 + 16, 16 * num20 + num28, 8, 8)), color8);
													if (Main.ugBackTransition > 0f)
													{
														Color color10 = color8;
														color10.R = (byte)((float)color10.R * Main.ugBackTransition);
														color10.G = (byte)((float)color10.G * Main.ugBackTransition);
														color10.B = (byte)((float)color10.B * Main.ugBackTransition);
														color10.A = (byte)((float)color10.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num27 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20 + num28)) + vector, new Rectangle?(new Rectangle(16 * num19 + num27 + num16 + 16, 16 * num20 + num28, 8, 8)), color10);
													}
												}
											}
											else
											{
												color4.R = (byte)((float)color4.R * x);
												color4.G = (byte)((float)color4.G * y);
												color4.B = (byte)((float)color4.B * z);
												Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num16 + 16, 16 * num20, 16, 16)), color4);
												if (Main.ugBackTransition > 0f)
												{
													Color color11 = color4;
													color11.R = (byte)((float)color11.R * Main.ugBackTransition);
													color11.G = (byte)((float)color11.G * Main.ugBackTransition);
													color11.B = (byte)((float)color11.B * Main.ugBackTransition);
													color11.A = (byte)((float)color11.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num16 + 16, 16 * num20, 16, 16)), color11);
												}
											}
										}
									}
									else
									{
										color4.R = (byte)((float)color4.R * x);
										color4.G = (byte)((float)color4.G * y);
										color4.B = (byte)((float)color4.B * z);
										if (num > 0f)
										{
											color4 *= 1f - num;
										}
										Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num6 * num17 + 16 * num19 + num16), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num16 + 16, 16 * num20, 16, 16)), color4);
									}
								}
								IL_1C65:;
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					num6 = TextureAssets.Background[array2[1]].Width() - 32;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
					num16 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
					if (num16 == -8)
					{
						num16 = 8;
					}
					for (int num29 = 0; num29 < this.bgLoops; num29++)
					{
						for (int num30 = 0; num30 < this.bgLoopsY; num30++)
						{
							for (int num31 = 0; num31 < num6 / 16; num31++)
							{
								for (int num32 = 0; num32 < 6; num32++)
								{
									float num76 = (float)(this.bgStartY + num30 * 96 + num32 * 16 + 8);
									int num33 = (int)(((float)(this.bgStartX + num6 * num29 + num31 * 16 + 8) + Main.screenPosition.X) / 16f);
									int num34 = (int)((num76 + Main.screenPosition.Y) / 16f);
									if (WorldGen.InWorld(num33, num34, 0))
									{
										Color color12 = Lighting.GetColor(num33, num34);
										if (Main.tile[num33, num34] == null)
										{
											Main.tile[num33, num34] = default(Tile);
										}
										if (color12.R > 0 || color12.G > 0 || color12.B > 0)
										{
											VertexColors vertices2;
											Lighting.GetCornerColors(num33, num34, out vertices2, Main.ugBackTransition);
											byte a = (byte)(255f * Main.ugBackTransition);
											vertices2.BottomLeftColor.A = a;
											vertices2.BottomRightColor.A = a;
											vertices2.TopLeftColor.A = a;
											vertices2.TopRightColor.A = a;
											Main.tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num6 * num29 + 16 * num31 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num30 + 16 * num32)) + vector, new Rectangle?(new Rectangle(16 * num31 + num16 + 16, 16 * num32, 16, 16)), vertices2, Vector2.Zero, 1f, 0);
										}
									}
								}
							}
						}
					}
				}
				num6 = 128;
				if (flag2)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
					this.bgTopY = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTopY > -32)
					{
						for (int num35 = 0; num35 < this.bgLoops; num35++)
						{
							for (int num36 = 0; num36 < num6 / 16; num36++)
							{
								float num77 = (float)(this.bgStartX + num6 * num35 + num36 * 16 + 8);
								float num37 = (float)this.bgTopY;
								Color color13 = Lighting.GetColor((int)((num77 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num37) / 16f));
								color13.R = (byte)((float)color13.R * x);
								color13.G = (byte)((float)color13.G * y);
								color13.B = (byte)((float)color13.B * z);
								if (num > 0f)
								{
									color13 *= 1f - num;
								}
								Main.spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2((float)(this.bgStartX + num6 * num35 + 16 * num36 + num16), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num36 + num16 + 16, 0, 16, 16)), color13);
								if (Main.ugBackTransition > 0f)
								{
									Color color14 = color13;
									color14.R = (byte)((float)color14.R * Main.ugBackTransition);
									color14.G = (byte)((float)color14.G * Main.ugBackTransition);
									color14.B = (byte)((float)color14.B * Main.ugBackTransition);
									color14.A = (byte)((float)color14.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2((float)(this.bgStartX + num6 * num35 + 16 * num36 + num16), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num36 + num16 + 16, 0, 16, 16)), color14);
								}
							}
						}
					}
				}
			}
			if (num2 * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight) && (!Main.remixWorld || Main.maxTilesX >= 5000))
			{
				int y2 = 0;
				int x2 = 0;
				int num38 = Main.screenHeight + 200;
				int width2 = Main.screenWidth + 100;
				if ((float)Main.UnderworldLayer * 16f < Main.screenPosition.Y + (float)Main.screenHeight)
				{
					int num39 = (int)(this.hellBlackBoxBottom - Main.screenPosition.Y + vector.Y);
					if (num38 > num39)
					{
						num38 = num39;
					}
				}
				Main.spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle(x2, y2, width2, num38), new Color(0, 0, 0));
			}
			this.hellBlackBoxBottom = Main.screenPosition.Y + (float)Main.screenHeight + 100f;
			this.bgTopY = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
				if (Main.rockLayer * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num2 * 16.0 < (double)(Main.screenPosition.Y + (float)Main.screenHeight))
				{
					this.bgLoopsY = (int)(num2 * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				int num40 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num40 == -8)
				{
					num40 = 8;
				}
				for (int num41 = 0; num41 < this.bgLoops; num41++)
				{
					for (int num42 = 0; num42 < this.bgLoopsY; num42++)
					{
						for (int num43 = 0; num43 < num6 / 16; num43++)
						{
							for (int num44 = 0; num44 < 6; num44++)
							{
								float num78 = (float)(this.bgStartY + num42 * 96 + num44 * 16 + 8);
								int num45 = (int)(((float)(this.bgStartX + num6 * num41 + num43 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num46 = (int)((num78 + Main.screenPosition.Y) / 16f);
								if (WorldGen.InWorld(num45, num46, 1))
								{
									Color color15 = Lighting.GetColor(num45, num46);
									if ((Main.ShouldDrawBackgroundTileAt(num45, num46) || color15.R == 0 || color15.G == 0 || color15.B == 0) && (color15.R > 0 || color15.G > 0 || color15.B > 0) && (Main.WallLightAt(num45, num46) || Main.caveParallax != 0f))
									{
										if (num == 0f && Lighting.NotRetro && color15.R < 230 && color15.G < 230 && color15.B < 230 && Main.ugBackTransition == 0f)
										{
											if (((int)color15.R > num4 || (double)color15.G > (double)num4 * 1.1 || (double)color15.B > (double)num4 * 1.2) && !Main.tile[num45, num46].active())
											{
												Lighting.GetColor9Slice(num45, num46, ref slices);
												for (int num47 = 0; num47 < 9; num47++)
												{
													int num48 = 0;
													int num49 = 0;
													int width3 = 4;
													int height2 = 4;
													Color color16 = color15;
													Color color17 = color15;
													switch (num47)
													{
													case 0:
														if (!Main.tile[num45 - 1, num46 - 1].active())
														{
															color17 = slices[num47];
														}
														break;
													case 1:
														width3 = 8;
														num48 = 4;
														if (!Main.tile[num45, num46 - 1].active())
														{
															color17 = slices[num47];
														}
														break;
													case 2:
														num48 = 12;
														if (!Main.tile[num45 + 1, num46 - 1].active())
														{
															color17 = slices[num47];
														}
														break;
													case 3:
														height2 = 8;
														num49 = 4;
														if (!Main.tile[num45 - 1, num46].active())
														{
															color17 = slices[num47];
														}
														break;
													case 4:
														width3 = 8;
														height2 = 8;
														num48 = 4;
														num49 = 4;
														break;
													case 5:
														num48 = 12;
														num49 = 4;
														height2 = 8;
														if (!Main.tile[num45 + 1, num46].active())
														{
															color17 = slices[num47];
														}
														break;
													case 6:
														num49 = 12;
														if (!Main.tile[num45 - 1, num46 + 1].active())
														{
															color17 = slices[num47];
														}
														break;
													case 7:
														width3 = 8;
														height2 = 4;
														num48 = 4;
														num49 = 12;
														if (!Main.tile[num45, num46 + 1].active())
														{
															color17 = slices[num47];
														}
														break;
													case 8:
														num48 = 12;
														num49 = 12;
														if (!Main.tile[num45 + 1, num46 + 1].active())
														{
															color17 = slices[num47];
														}
														break;
													}
													color16.R = (color15.R + color17.R) / 2;
													color16.G = (color15.G + color17.G) / 2;
													color16.B = (color15.B + color17.B) / 2;
													color16.R = (byte)((float)color16.R * x);
													color16.G = (byte)((float)color16.G * y);
													color16.B = (byte)((float)color16.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num48 + num40), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num42 + 16 * num44 + num49)) + vector, new Rectangle?(new Rectangle(16 * num43 + num48 + num40 + 16, 16 * num44 + num49, width3, height2)), color16);
													if (Main.ugBackTransition > 0f)
													{
														Color color18 = color16;
														color18.R = (byte)((float)color18.R * Main.ugBackTransition);
														color18.G = (byte)((float)color18.G * Main.ugBackTransition);
														color18.B = (byte)((float)color18.B * Main.ugBackTransition);
														color18.A = (byte)((float)color18.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num48 + num40), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num42 + 16 * num44 + num49)) + vector, new Rectangle?(new Rectangle(16 * num43 + num48 + num40 + 16, 16 * num44 + num49, width3, height2)), color18);
													}
												}
											}
											else if ((int)color15.R > num5 || (double)color15.G > (double)num5 * 1.1 || (double)color15.B > (double)num5 * 1.2)
											{
												Lighting.GetColor4Slice(num45, num46, ref slices);
												for (int num50 = 0; num50 < 4; num50++)
												{
													int num51 = 0;
													int num52 = 0;
													Color color19 = color15;
													Color color20 = slices[num50];
													switch (num50)
													{
													case 1:
														num51 = 8;
														break;
													case 2:
														num52 = 8;
														break;
													case 3:
														num51 = 8;
														num52 = 8;
														break;
													}
													color19.R = (color15.R + color20.R) / 2;
													color19.G = (color15.G + color20.G) / 2;
													color19.B = (color15.B + color20.B) / 2;
													color19.R = (byte)((float)color19.R * x);
													color19.G = (byte)((float)color19.G * y);
													color19.B = (byte)((float)color19.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num51 + num40), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num42 + 16 * num44 + num52)) + vector, new Rectangle?(new Rectangle(16 * num43 + num51 + num40 + 16, 16 * num44 + num52, 8, 8)), color19);
													if (Main.ugBackTransition > 0f)
													{
														Color color21 = color19;
														color21.R = (byte)((float)color21.R * Main.ugBackTransition);
														color21.G = (byte)((float)color21.G * Main.ugBackTransition);
														color21.B = (byte)((float)color21.B * Main.ugBackTransition);
														color21.A = (byte)((float)color21.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num51 + num40), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num42 + 16 * num44 + num52)) + vector, new Rectangle?(new Rectangle(16 * num43 + num51 + num40 + 16, 16 * num44 + num52, 8, 8)), color21);
													}
												}
											}
											else
											{
												color15.R = (byte)((float)color15.R * x);
												color15.G = (byte)((float)color15.G * y);
												color15.B = (byte)((float)color15.B * z);
												Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num40), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num42 + 16 * num44)) + vector, new Rectangle?(new Rectangle(16 * num43 + num40 + 16, 16 * num44, 16, 16)), color15);
												if (Main.ugBackTransition > 0f)
												{
													Color color22 = color15;
													color22.R = (byte)((float)color22.R * Main.ugBackTransition);
													color22.G = (byte)((float)color22.G * Main.ugBackTransition);
													color22.B = (byte)((float)color22.B * Main.ugBackTransition);
													color22.A = (byte)((float)color22.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num40), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num42 + 16 * num44)) + vector, new Rectangle?(new Rectangle(16 * num43 + num40 + 16, 16 * num44, 16, 16)), color22);
												}
											}
										}
										else
										{
											color15.R = (byte)((float)color15.R * x);
											color15.G = (byte)((float)color15.G * y);
											color15.B = (byte)((float)color15.B * z);
											if (num > 0f)
											{
												color15 *= 1f - num;
											}
											Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num40), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num42 + 16 * num44)) + vector, new Rectangle?(new Rectangle(16 * num43 + num40 + 16, 16 * num44, 16, 16)), color15);
											if (Main.ugBackTransition > 0f)
											{
												Color color23 = color15;
												color23.R = (byte)((float)color23.R * Main.ugBackTransition);
												color23.G = (byte)((float)color23.G * Main.ugBackTransition);
												color23.B = (byte)((float)color23.B * Main.ugBackTransition);
												color23.A = (byte)((float)color23.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num6 * num41 + 16 * num43 + num40), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num42 + 16 * num44)) + vector, new Rectangle?(new Rectangle(16 * num43 + num40 + 16, 16 * num44, 16, 16)), color23);
											}
										}
									}
								}
							}
						}
					}
				}
				num6 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
					this.bgTopY = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num53 = 0; num53 < this.bgLoops; num53++)
					{
						for (int num54 = 0; num54 < num6 / 16; num54++)
						{
							float num79 = (float)(this.bgStartX + num6 * num53 + num54 * 16 + 8);
							float num55 = (float)this.bgTopY;
							Color color24 = Lighting.GetColor((int)((num79 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num55) / 16f));
							color24.R = (byte)((float)color24.R * x);
							color24.G = (byte)((float)color24.G * y);
							color24.B = (byte)((float)color24.B * z);
							Main.spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2((float)(this.bgStartX + num6 * num53 + 16 * num54 + num40), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num54 + num40 + 16, Main.magmaBGFrame * 16, 16, 16)), color24);
							if (Main.ugBackTransition > 0f)
							{
								Color color25 = color24;
								color25.R = (byte)((float)color25.R * Main.ugBackTransition);
								color25.G = (byte)((float)color25.G * Main.ugBackTransition);
								color25.B = (byte)((float)color25.B * Main.ugBackTransition);
								color25.A = (byte)((float)color25.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2((float)(this.bgStartX + num6 * num53 + 16 * num54 + num40), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num54 + num40 + 16, Main.magmaBGFrame * 16, 16, 16)), color25);
							}
						}
					}
				}
			}
			this.bgTopY = (int)((float)((int)num2 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			bool flag3 = false;
			if (num2 * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight))
			{
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
				if (num2 * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if ((float)Main.UnderworldLayer * 16f < Main.screenPosition.Y + (float)Main.screenHeight)
				{
					this.bgLoopsY = (int)Math.Ceiling((double)(((float)Main.UnderworldLayer * 16f - Main.screenPosition.Y - (float)this.bgStartY) / (float)Main.backgroundHeight[2]));
					flag3 = true;
				}
				num4 = (int)((double)num4 * 1.5);
				num5 = (int)((double)num5 * 1.5);
				int num56 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num56 == -8)
				{
					num56 = 8;
				}
				for (int num57 = 0; num57 < this.bgLoops; num57++)
				{
					for (int num58 = 0; num58 < this.bgLoopsY; num58++)
					{
						for (int num59 = 0; num59 < num6 / 16; num59++)
						{
							for (int num60 = 0; num60 < 6; num60++)
							{
								float num80 = (float)(this.bgStartY + num58 * 96 + num60 * 16 + 8);
								int num61 = (int)(((float)(this.bgStartX + num6 * num57 + num59 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num62 = (int)((num80 + Main.screenPosition.Y) / 16f);
								if (WorldGen.InWorld(num61, num62, 1))
								{
									Color color26 = Lighting.GetColor(num61, num62);
									if ((Main.ShouldDrawBackgroundTileAt(num61, num62) || color26.R == 0 || color26.G == 0 || color26.B == 0) && (color26.R > 0 || color26.G > 0 || color26.B > 0 || num62 > Main.maxTilesY - 300) && (Main.WallLightAt(num61, num62) || Main.caveParallax != 0f))
									{
										if (Lighting.NotRetro && color26.R < 230 && color26.G < 230 && color26.B < 230)
										{
											if (((int)color26.R > num4 || (double)color26.G > (double)num4 * 1.1 || (double)color26.B > (double)num4 * 1.2) && !Main.tile[num61, num62].active())
											{
												Lighting.GetColor9Slice(num61, num62, ref slices);
												for (int num63 = 0; num63 < 9; num63++)
												{
													int num64 = 0;
													int num65 = 0;
													int width4 = 4;
													int height3 = 4;
													Color color27 = color26;
													Color color28 = color26;
													switch (num63)
													{
													case 0:
														if (!Main.tile[num61 - 1, num62 - 1].active())
														{
															color28 = slices[num63];
														}
														break;
													case 1:
														width4 = 8;
														num64 = 4;
														if (!Main.tile[num61, num62 - 1].active())
														{
															color28 = slices[num63];
														}
														break;
													case 2:
														num64 = 12;
														if (!Main.tile[num61 + 1, num62 - 1].active())
														{
															color28 = slices[num63];
														}
														break;
													case 3:
														height3 = 8;
														num65 = 4;
														if (!Main.tile[num61 - 1, num62].active())
														{
															color28 = slices[num63];
														}
														break;
													case 4:
														width4 = 8;
														height3 = 8;
														num64 = 4;
														num65 = 4;
														break;
													case 5:
														num64 = 12;
														num65 = 4;
														height3 = 8;
														if (!Main.tile[num61 + 1, num62].active())
														{
															color28 = slices[num63];
														}
														break;
													case 6:
														num65 = 12;
														if (!Main.tile[num61 - 1, num62 + 1].active())
														{
															color28 = slices[num63];
														}
														break;
													case 7:
														width4 = 8;
														height3 = 4;
														num64 = 4;
														num65 = 12;
														if (!Main.tile[num61, num62 + 1].active())
														{
															color28 = slices[num63];
														}
														break;
													case 8:
														num64 = 12;
														num65 = 12;
														if (!Main.tile[num61 + 1, num62 + 1].active())
														{
															color28 = slices[num63];
														}
														break;
													}
													color27.R = (color26.R + color28.R) / 2;
													color27.G = (color26.G + color28.G) / 2;
													color27.B = (color26.B + color28.B) / 2;
													color27.R = (byte)((float)color27.R * x);
													color27.G = (byte)((float)color27.G * y);
													color27.B = (byte)((float)color27.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num6 * num57 + 16 * num59 + num64 + num56), (float)(this.bgStartY + Main.backgroundHeight[2] * num58 + 16 * num60 + num65)) + vector, new Rectangle?(new Rectangle(16 * num59 + num64 + num56 + 16, 16 * num60 + Main.backgroundHeight[2] * Main.magmaBGFrame + num65, width4, height3)), color27, 0f, default(Vector2), 1f, 0, 0f);
												}
											}
											else if ((int)color26.R > num5 || (double)color26.G > (double)num5 * 1.1 || (double)color26.B > (double)num5 * 1.2)
											{
												Lighting.GetColor4Slice(num61, num62, ref slices);
												for (int num66 = 0; num66 < 4; num66++)
												{
													int num67 = 0;
													int num68 = 0;
													Color color29 = color26;
													Color color30 = slices[num66];
													switch (num66)
													{
													case 1:
														num67 = 8;
														break;
													case 2:
														num68 = 8;
														break;
													case 3:
														num67 = 8;
														num68 = 8;
														break;
													}
													color29.R = (color26.R + color30.R) / 2;
													color29.G = (color26.G + color30.G) / 2;
													color29.B = (color26.B + color30.B) / 2;
													color29.R = (byte)((float)color29.R * x);
													color29.G = (byte)((float)color29.G * y);
													color29.B = (byte)((float)color29.B * z);
													Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num6 * num57 + 16 * num59 + num67 + num56), (float)(this.bgStartY + Main.backgroundHeight[2] * num58 + 16 * num60 + num68)) + vector, new Rectangle?(new Rectangle(16 * num59 + num67 + num56 + 16, 16 * num60 + Main.backgroundHeight[2] * Main.magmaBGFrame + num68, 8, 8)), color29, 0f, default(Vector2), 1f, 0, 0f);
												}
											}
											else
											{
												color26.R = (byte)((float)color26.R * x);
												color26.G = (byte)((float)color26.G * y);
												color26.B = (byte)((float)color26.B * z);
												Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num6 * num57 + 16 * num59 + num56), (float)(this.bgStartY + Main.backgroundHeight[2] * num58 + 16 * num60)) + vector, new Rectangle?(new Rectangle(16 * num59 + num56 + 16, 16 * num60 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color26, 0f, default(Vector2), 1f, 0, 0f);
											}
										}
										else
										{
											color26.R = (byte)((float)color26.R * x);
											color26.G = (byte)((float)color26.G * y);
											color26.B = (byte)((float)color26.B * z);
											Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num6 * num57 + 16 * num59 + num56), (float)(this.bgStartY + Main.backgroundHeight[2] * num58 + 16 * num60)) + vector, new Rectangle?(new Rectangle(16 * num59 + num56 + 16, 16 * num60 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color26, 0f, default(Vector2), 1f, 0, 0f);
										}
									}
								}
							}
						}
					}
				}
				if (flag3)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num6 + (double)Main.screenPosition.X * this.bgParallax, (double)num6) - (double)(num6 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num6 + 2;
					this.bgTopY = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					this.hellBlackBoxBottom = (float)this.bgTopY + Main.screenPosition.Y;
					for (int num69 = 0; num69 < this.bgLoops; num69++)
					{
						for (int num70 = 0; num70 < num6 / 16; num70++)
						{
							float num81 = (float)(this.bgStartX + num6 * num69 + num70 * 16 + 8);
							float num71 = (float)this.bgTopY;
							Color color31 = Lighting.GetColor((int)((num81 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num71) / 16f));
							color31.R = (byte)((float)color31.R * x);
							color31.G = (byte)((float)color31.G * y);
							color31.B = (byte)((float)color31.B * z);
							Main.spriteBatch.Draw(TextureAssets.Background[array[6]].Value, new Vector2((float)(this.bgStartX + num6 * num69 + 16 * num70 + num56), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num70 + num56 + 16, Main.magmaBGFrame * 16, 16, 16)), color31);
							if (Main.ugBackTransition > 0f)
							{
								Color color32 = color31;
								color32.R = (byte)((float)color32.R * Main.ugBackTransition);
								color32.G = (byte)((float)color32.G * Main.ugBackTransition);
								color32.B = (byte)((float)color32.B * Main.ugBackTransition);
								color32.A = (byte)((float)color32.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(TextureAssets.Background[array2[6]].Value, new Vector2((float)(this.bgStartX + num6 * num69 + 16 * num70 + num56), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num70 + num56 + 16, Main.magmaBGFrame * 16, 16, 16)), color32);
							}
						}
					}
				}
			}
			Lighting.GlobalBrightness = globalBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		// Token: 0x06000594 RID: 1428 RVA: 0x0011E610 File Offset: 0x0011C810
		public static Point GetScreenOverdrawOffset()
		{
			return (Main.Camera.ScaledPosition - Main.Camera.UnscaledPosition).ToTileCoordinates();
		}

		// Token: 0x06000595 RID: 1429 RVA: 0x0011E630 File Offset: 0x0011C830
		protected void OldDrawBackground()
		{
			Color[] slices = new Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num2 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num3 = 128;
			Vector2 vector;
			vector..ctor((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				vector = Vector2.Zero;
			}
			float num6;
			float num5;
			float num4 = num5 = (num6 = 0.9f);
			float num7 = 0f;
			if (Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.EvilTileCount && Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.HolyTileCount)
			{
				num7 = (float)Main.SceneMetrics.BloodTileCount;
			}
			else if (Main.SceneMetrics.HolyTileCount > Main.SceneMetrics.EvilTileCount)
			{
				num7 = (float)Main.SceneMetrics.HolyTileCount;
			}
			else if (Main.SceneMetrics.EvilTileCount > Main.SceneMetrics.HolyTileCount)
			{
				num7 = (float)Main.SceneMetrics.EvilTileCount;
			}
			num7 = MathHelper.Clamp(num7 / 800f, 0f, 1f);
			float num8 = (float)((double)Main.screenPosition.Y - Main.worldSurface * 16.0) / 300f;
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			else if (num8 > 1f)
			{
				num8 = 1f;
			}
			float num9 = 1f * (1f - num8) + num6 * num8;
			float globalBrightness = Lighting.GlobalBrightness;
			Lighting.GlobalBrightness = globalBrightness * (1f - num8) + 1f * num8;
			float value = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
			value = MathHelper.Clamp(value, 0f, 1f);
			if (Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.EvilTileCount && Main.SceneMetrics.BloodTileCount > Main.SceneMetrics.HolyTileCount)
			{
				num6 = 1f * num7 + num6 * (1f - num7);
				num4 = 0.55f * num7 + num4 * (1f - num7);
				num5 = 0.5f * num7 + num5 * (1f - num7);
			}
			else if (Main.SceneMetrics.EvilTileCount > 0)
			{
				num6 = 0.8f * num7 + num6 * (1f - num7);
				num4 = 0.75f * num7 + num4 * (1f - num7);
				num5 = 1.1f * num7 + num5 * (1f - num7);
			}
			else if (Main.SceneMetrics.HolyTileCount > 0)
			{
				num6 = 1f * num7 + num6 * (1f - num7);
				num4 = 0.7f * num7 + num4 * (1f - num7);
				num5 = 0.9f * num7 + num5 * (1f - num7);
			}
			num6 = 1f * (num9 - value) + num6 * value;
			num4 = 1f * (num9 - value) + num4 * value;
			num5 = 1f * (num9 - value) + num5 * value;
			int num10 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num11 = (num10 <= Main.caveBackX[0]) ? Main.caveBackStyle[0] : ((num10 <= Main.caveBackX[1]) ? Main.caveBackStyle[1] : ((num10 > Main.caveBackX[2]) ? Main.caveBackStyle[3] : Main.caveBackStyle[2]));
			num11 += 3;
			if (Main.SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num11 = 1;
			}
			if (Main.SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
			{
				if (num11 == 1)
				{
					if (Main.SceneMetrics.JungleTileCount > Main.SceneMetrics.SnowTileCount)
					{
						num11 = 11;
					}
				}
				else
				{
					num11 = 11;
				}
			}
			if (Main.SceneMetrics.EnoughTilesForGlowingMushroom)
			{
				num11 = 2;
			}
			if (num11 != Main.undergroundBackground)
			{
				Main.oldUndergroundBackground = Main.undergroundBackground;
				Main.undergroundBackground = num11;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition -= 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] array = new int[6];
			int[] array2 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num12 = Main.undergroundBackground;
				if (i == 1)
				{
					num12 = Main.oldUndergroundBackground;
				}
				int[] array3 = new int[6];
				switch (num12)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (Main.iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (Main.iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = array3[3];
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + Main.hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + Main.hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + Main.hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + Main.hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + Main.hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + Main.hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + Main.hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + Main.hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + Main.hellBackStyle;
					break;
				case 11:
					if (Main.jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + Main.hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + Main.hellBackStyle;
					}
					break;
				}
				if (Main.hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				this.LoadBackground(array3[0]);
				this.LoadBackground(array3[1]);
				this.LoadBackground(array3[2]);
				this.LoadBackground(array3[3]);
				this.LoadBackground(array3[4]);
				this.LoadBackground(array3[5]);
				if (i == 0)
				{
					for (int j = 0; j < 6; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			globalBrightness = 1.2f * (1f - value) + 1f * value;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
			this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
			this.bgTopY = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num3 / 16; m++)
				{
					int num13 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
					if (num13 == -8)
					{
						num13 = 8;
					}
					float num67 = (float)(this.bgStartX + num3 * l + m * 16 + 8);
					float num14 = (float)this.bgTopY;
					Color color = Lighting.GetColor((int)((num67 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num14) / 16f));
					color.R = (byte)((float)color.R * num6);
					color.G = (byte)((float)color.G * num4);
					color.B = (byte)((float)color.B * num5);
					Main.spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2((float)(this.bgStartX + num3 * l + 16 * m + num13), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * m + num13 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Color color2 = color;
						color2.R = (byte)((float)color2.R * Main.ugBackTransition);
						color2.G = (byte)((float)color2.G * Main.ugBackTransition);
						color2.B = (byte)((float)color2.B * Main.ugBackTransition);
						color2.A = (byte)((float)color2.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2((float)(this.bgStartX + num3 * l + 16 * m + num13), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * m + num13 + 16, 0, 16, 16)), color2);
					}
				}
			}
			double num15 = (double)(Main.maxTilesY - 230);
			double num16 = (double)((int)((num15 - Main.worldSurface) / 6.0) * 6);
			num15 = Main.worldSurface + num16 - 5.0;
			bool flag = false;
			bool flag2 = false;
			this.bgTopY = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
				if (Main.worldSurface * 16.0 < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16.0 < (double)(Main.Camera.ScaledPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag2 = true;
				}
				int num17 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num17 == -8)
				{
					num17 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int num18 = 0; num18 < this.bgLoopsY; num18++)
					{
						for (int num19 = 0; num19 < num3 / 16; num19++)
						{
							for (int num20 = 0; num20 < 6; num20++)
							{
								float num68 = (float)(this.bgStartY + num18 * 96 + num20 * 16 + 8);
								int num21 = (int)(((float)(this.bgStartX + num3 * n + num19 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num22 = (int)((num68 + Main.screenPosition.Y) / 16f);
								Color color3 = Lighting.GetColor(num21, num22);
								if (Main.tile[num21, num22] == null)
								{
									Main.tile[num21, num22] = default(Tile);
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!Main.drawToScreen)
									{
										VertexColors vertices;
										Lighting.GetCornerColors(num21, num22, out vertices, 1f);
										Main.tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num17), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num17 + 16, 16 * num20, 16, 16)), vertices, Vector2.Zero, 1f, 0);
									}
									else
									{
										if (((int)color3.R > num || (double)color3.G > (double)num * 1.1 || (double)color3.B > (double)num * 1.2) && !Main.tile[num21, num22].active() && Main.WallLightAt(num21, num22) && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor9Slice(num21, num22, ref slices);
											try
											{
												for (int num23 = 0; num23 < 9; num23++)
												{
													int num24 = 0;
													int num25 = 0;
													int width = 4;
													int height = 4;
													Color color4 = color3;
													Color color5 = color3;
													switch (num23)
													{
													case 0:
														if (!Main.tile[num21 - 1, num22 - 1].active())
														{
															color5 = slices[num23];
														}
														break;
													case 1:
														width = 8;
														num24 = 4;
														if (!Main.tile[num21, num22 - 1].active())
														{
															color5 = slices[num23];
														}
														break;
													case 2:
														num24 = 12;
														if (!Main.tile[num21 + 1, num22 - 1].active())
														{
															color5 = slices[num23];
														}
														break;
													case 3:
														height = 8;
														num25 = 4;
														if (!Main.tile[num21 - 1, num22].active())
														{
															color5 = slices[num23];
														}
														break;
													case 4:
														width = 8;
														height = 8;
														num24 = 4;
														num25 = 4;
														break;
													case 5:
														num24 = 12;
														num25 = 4;
														height = 8;
														if (!Main.tile[num21 + 1, num22].active())
														{
															color5 = slices[num23];
														}
														break;
													case 6:
														num25 = 12;
														if (!Main.tile[num21 - 1, num22 + 1].active())
														{
															color5 = slices[num23];
														}
														break;
													case 7:
														width = 8;
														height = 4;
														num24 = 4;
														num25 = 12;
														if (!Main.tile[num21, num22 + 1].active())
														{
															color5 = slices[num23];
														}
														break;
													case 8:
														num24 = 12;
														num25 = 12;
														if (!Main.tile[num21 + 1, num22 + 1].active())
														{
															color5 = slices[num23];
														}
														break;
													}
													color4.R = (color3.R + color5.R) / 2;
													color4.G = (color3.G + color5.G) / 2;
													color4.B = (color3.B + color5.B) / 2;
													color4.R = (byte)((float)color4.R * num6);
													color4.G = (byte)((float)color4.G * num4);
													color4.B = (byte)((float)color4.B * num5);
													Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num24 + num17), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20 + num25)) + vector, new Rectangle?(new Rectangle(16 * num19 + num24 + num17 + 16, 16 * num20 + num25, width, height)), color4);
													if (Main.ugBackTransition > 0f)
													{
														Color color6 = color4;
														color6.R = (byte)((float)color6.R * Main.ugBackTransition);
														color6.G = (byte)((float)color6.G * Main.ugBackTransition);
														color6.B = (byte)((float)color6.B * Main.ugBackTransition);
														color6.A = (byte)((float)color6.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num24 + num17), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20 + num25)) + vector, new Rectangle?(new Rectangle(16 * num19 + num24 + num17 + 16, 16 * num20 + num25, width, height)), color6);
													}
												}
												goto IL_18B1;
											}
											catch
											{
												color3.R = (byte)((float)color3.R * num6);
												color3.G = (byte)((float)color3.G * num4);
												color3.B = (byte)((float)color3.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num17), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num17 + 16, 16 * num20, 16, 16)), color3);
												goto IL_18B1;
											}
										}
										if (((int)color3.R > num2 || (double)color3.G > (double)num2 * 1.1 || (double)color3.B > (double)num2 * 1.2) && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor4Slice(num21, num22, ref slices);
											for (int num26 = 0; num26 < 4; num26++)
											{
												int num27 = 0;
												int num28 = 0;
												Color color7 = color3;
												Color color8 = slices[num26];
												switch (num26)
												{
												case 1:
													num27 = 8;
													break;
												case 2:
													num28 = 8;
													break;
												case 3:
													num27 = 8;
													num28 = 8;
													break;
												}
												color7.R = (color3.R + color8.R) / 2;
												color7.G = (color3.G + color8.G) / 2;
												color7.B = (color3.B + color8.B) / 2;
												color7.R = (byte)((float)color7.R * num6);
												color7.G = (byte)((float)color7.G * num4);
												color7.B = (byte)((float)color7.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num27 + num17), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20 + num28)) + vector, new Rectangle?(new Rectangle(16 * num19 + num27 + num17 + 16, 16 * num20 + num28, 8, 8)), color7);
												if (Main.ugBackTransition > 0f)
												{
													Color color9 = color7;
													color9.R = (byte)((float)color9.R * Main.ugBackTransition);
													color9.G = (byte)((float)color9.G * Main.ugBackTransition);
													color9.B = (byte)((float)color9.B * Main.ugBackTransition);
													color9.A = (byte)((float)color9.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num27 + num17), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20 + num28)) + vector, new Rectangle?(new Rectangle(16 * num19 + num27 + num17 + 16, 16 * num20 + num28, 8, 8)), color9);
												}
											}
										}
										else
										{
											color3.R = (byte)((float)color3.R * num6);
											color3.G = (byte)((float)color3.G * num4);
											color3.B = (byte)((float)color3.B * num5);
											Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num17), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num17 + 16, 16 * num20, 16, 16)), color3);
											if (Main.ugBackTransition > 0f)
											{
												Color color10 = color3;
												color10.R = (byte)((float)color10.R * Main.ugBackTransition);
												color10.G = (byte)((float)color10.G * Main.ugBackTransition);
												color10.B = (byte)((float)color10.B * Main.ugBackTransition);
												color10.A = (byte)((float)color10.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num17), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num17 + 16, 16 * num20, 16, 16)), color10);
											}
										}
									}
								}
								else
								{
									color3.R = (byte)((float)color3.R * num6);
									color3.G = (byte)((float)color3.G * num4);
									color3.B = (byte)((float)color3.B * num5);
									Main.spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(this.bgStartX + num3 * n + 16 * num19 + num17), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num18 + 16 * num20)) + vector, new Rectangle?(new Rectangle(16 * num19 + num17 + 16, 16 * num20, 16, 16)), color3);
								}
								IL_18B1:;
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					for (int num29 = 0; num29 < this.bgLoops; num29++)
					{
						for (int num30 = 0; num30 < this.bgLoopsY; num30++)
						{
							for (int num31 = 0; num31 < num3 / 16; num31++)
							{
								for (int num32 = 0; num32 < 6; num32++)
								{
									float num69 = (float)(this.bgStartY + num30 * 96 + num32 * 16 + 8);
									int num33 = (int)(((float)(this.bgStartX + num3 * num29 + num31 * 16 + 8) + Main.screenPosition.X) / 16f);
									int num34 = (int)((num69 + Main.screenPosition.Y) / 16f);
									Color color11 = Lighting.GetColor(num33, num34);
									if (Main.tile[num33, num34] == null)
									{
										Main.tile[num33, num34] = default(Tile);
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										VertexColors vertices2;
										Lighting.GetCornerColors(num33, num34, out vertices2, Main.ugBackTransition);
										byte a = (byte)(255f * Main.ugBackTransition);
										vertices2.BottomLeftColor.A = a;
										vertices2.BottomRightColor.A = a;
										vertices2.TopLeftColor.A = a;
										vertices2.TopRightColor.A = a;
										Main.tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(this.bgStartX + num3 * num29 + 16 * num31 + num17), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num30 + 16 * num32)) + vector, new Rectangle?(new Rectangle(16 * num31 + num17 + 16, 16 * num32, 16, 16)), vertices2, Vector2.Zero, 1f, 0);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
					this.bgTopY = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTopY > -32)
					{
						for (int num35 = 0; num35 < this.bgLoops; num35++)
						{
							for (int num36 = 0; num36 < num3 / 16; num36++)
							{
								float num70 = (float)(this.bgStartX + num3 * num35 + num36 * 16 + 8);
								float num37 = (float)this.bgTopY;
								Color color12 = Lighting.GetColor((int)((num70 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num37) / 16f));
								color12.R = (byte)((float)color12.R * num6);
								color12.G = (byte)((float)color12.G * num4);
								color12.B = (byte)((float)color12.B * num5);
								Main.spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2((float)(this.bgStartX + num3 * num35 + 16 * num36 + num17), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num36 + num17 + 16, 0, 16, 16)), color12);
								if (Main.ugBackTransition > 0f)
								{
									Color color13 = color12;
									color13.R = (byte)((float)color13.R * Main.ugBackTransition);
									color13.G = (byte)((float)color13.G * Main.ugBackTransition);
									color13.B = (byte)((float)color13.B * Main.ugBackTransition);
									color13.A = (byte)((float)color13.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2((float)(this.bgStartX + num3 * num35 + 16 * num36 + num17), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num36 + num17 + 16, 0, 16, 16)), color13);
								}
							}
						}
					}
				}
			}
			this.bgTopY = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
				if (Main.rockLayer * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num15 * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num15 * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				int num38 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num38 == -8)
				{
					num38 = 8;
				}
				for (int num39 = 0; num39 < this.bgLoops; num39++)
				{
					for (int num40 = 0; num40 < this.bgLoopsY; num40++)
					{
						for (int num41 = 0; num41 < num3 / 16; num41++)
						{
							for (int num42 = 0; num42 < 6; num42++)
							{
								float num71 = (float)(this.bgStartY + num40 * 96 + num42 * 16 + 8);
								int num43 = (int)(((float)(this.bgStartX + num3 * num39 + num41 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num44 = (int)((num71 + Main.screenPosition.Y) / 16f);
								Color color14 = Lighting.GetColor(num43, num44);
								if ((Main.ShouldDrawBackgroundTileAt(num43, num44) || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Main.WallLightAt(num43, num44) || Main.caveParallax != 0f))
								{
									if (Lighting.NotRetro && color14.R < 230 && color14.G < 230 && color14.B < 230 && Main.ugBackTransition == 0f)
									{
										if (((int)color14.R > num || (double)color14.G > (double)num * 1.1 || (double)color14.B > (double)num * 1.2) && !Main.tile[num43, num44].active())
										{
											Lighting.GetColor9Slice(num43, num44, ref slices);
											for (int num45 = 0; num45 < 9; num45++)
											{
												int num46 = 0;
												int num47 = 0;
												int width2 = 4;
												int height2 = 4;
												Color color15 = color14;
												Color color16 = color14;
												switch (num45)
												{
												case 0:
													if (!Main.tile[num43 - 1, num44 - 1].active())
													{
														color16 = slices[num45];
													}
													break;
												case 1:
													width2 = 8;
													num46 = 4;
													if (!Main.tile[num43, num44 - 1].active())
													{
														color16 = slices[num45];
													}
													break;
												case 2:
													num46 = 12;
													if (!Main.tile[num43 + 1, num44 - 1].active())
													{
														color16 = slices[num45];
													}
													break;
												case 3:
													height2 = 8;
													num47 = 4;
													if (!Main.tile[num43 - 1, num44].active())
													{
														color16 = slices[num45];
													}
													break;
												case 4:
													width2 = 8;
													height2 = 8;
													num46 = 4;
													num47 = 4;
													break;
												case 5:
													num46 = 12;
													num47 = 4;
													height2 = 8;
													if (!Main.tile[num43 + 1, num44].active())
													{
														color16 = slices[num45];
													}
													break;
												case 6:
													num47 = 12;
													if (!Main.tile[num43 - 1, num44 + 1].active())
													{
														color16 = slices[num45];
													}
													break;
												case 7:
													width2 = 8;
													height2 = 4;
													num46 = 4;
													num47 = 12;
													if (!Main.tile[num43, num44 + 1].active())
													{
														color16 = slices[num45];
													}
													break;
												case 8:
													num46 = 12;
													num47 = 12;
													if (!Main.tile[num43 + 1, num44 + 1].active())
													{
														color16 = slices[num45];
													}
													break;
												}
												color15.R = (color14.R + color16.R) / 2;
												color15.G = (color14.G + color16.G) / 2;
												color15.B = (color14.B + color16.B) / 2;
												color15.R = (byte)((float)color15.R * num6);
												color15.G = (byte)((float)color15.G * num4);
												color15.B = (byte)((float)color15.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num46 + num38), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num40 + 16 * num42 + num47)) + vector, new Rectangle?(new Rectangle(16 * num41 + num46 + num38 + 16, 16 * num42 + num47, width2, height2)), color15);
												if (Main.ugBackTransition > 0f)
												{
													Color color17 = color15;
													color17.R = (byte)((float)color17.R * Main.ugBackTransition);
													color17.G = (byte)((float)color17.G * Main.ugBackTransition);
													color17.B = (byte)((float)color17.B * Main.ugBackTransition);
													color17.A = (byte)((float)color17.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num46 + num38), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num40 + 16 * num42 + num47)) + vector, new Rectangle?(new Rectangle(16 * num41 + num46 + num38 + 16, 16 * num42 + num47, width2, height2)), color17);
												}
											}
										}
										else if ((int)color14.R > num2 || (double)color14.G > (double)num2 * 1.1 || (double)color14.B > (double)num2 * 1.2)
										{
											Lighting.GetColor4Slice(num43, num44, ref slices);
											for (int num48 = 0; num48 < 4; num48++)
											{
												int num49 = 0;
												int num50 = 0;
												Color color18 = color14;
												Color color19 = slices[num48];
												switch (num48)
												{
												case 1:
													num49 = 8;
													break;
												case 2:
													num50 = 8;
													break;
												case 3:
													num49 = 8;
													num50 = 8;
													break;
												}
												color18.R = (color14.R + color19.R) / 2;
												color18.G = (color14.G + color19.G) / 2;
												color18.B = (color14.B + color19.B) / 2;
												color18.R = (byte)((float)color18.R * num6);
												color18.G = (byte)((float)color18.G * num4);
												color18.B = (byte)((float)color18.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num49 + num38), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num40 + 16 * num42 + num50)) + vector, new Rectangle?(new Rectangle(16 * num41 + num49 + num38 + 16, 16 * num42 + num50, 8, 8)), color18);
												if (Main.ugBackTransition > 0f)
												{
													Color color20 = color18;
													color20.R = (byte)((float)color20.R * Main.ugBackTransition);
													color20.G = (byte)((float)color20.G * Main.ugBackTransition);
													color20.B = (byte)((float)color20.B * Main.ugBackTransition);
													color20.A = (byte)((float)color20.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num49 + num38), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num40 + 16 * num42 + num50)) + vector, new Rectangle?(new Rectangle(16 * num41 + num49 + num38 + 16, 16 * num42 + num50, 8, 8)), color20);
												}
											}
										}
										else
										{
											color14.R = (byte)((float)color14.R * num6);
											color14.G = (byte)((float)color14.G * num4);
											color14.B = (byte)((float)color14.B * num5);
											Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num38), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num40 + 16 * num42)) + vector, new Rectangle?(new Rectangle(16 * num41 + num38 + 16, 16 * num42, 16, 16)), color14);
											if (Main.ugBackTransition > 0f)
											{
												Color color21 = color14;
												color21.R = (byte)((float)color21.R * Main.ugBackTransition);
												color21.G = (byte)((float)color21.G * Main.ugBackTransition);
												color21.B = (byte)((float)color21.B * Main.ugBackTransition);
												color21.A = (byte)((float)color21.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num38), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num40 + 16 * num42)) + vector, new Rectangle?(new Rectangle(16 * num41 + num38 + 16, 16 * num42, 16, 16)), color21);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)color14.R * num6);
										color14.G = (byte)((float)color14.G * num4);
										color14.B = (byte)((float)color14.B * num5);
										Main.spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num38), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num40 + 16 * num42)) + vector, new Rectangle?(new Rectangle(16 * num41 + num38 + 16, 16 * num42, 16, 16)), color14);
										if (Main.ugBackTransition > 0f)
										{
											Color color22 = color14;
											color22.R = (byte)((float)color22.R * Main.ugBackTransition);
											color22.G = (byte)((float)color22.G * Main.ugBackTransition);
											color22.B = (byte)((float)color22.B * Main.ugBackTransition);
											color22.A = (byte)((float)color22.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(this.bgStartX + num3 * num39 + 16 * num41 + num38), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num40 + 16 * num42)) + vector, new Rectangle?(new Rectangle(16 * num41 + num38 + 16, 16 * num42, 16, 16)), color22);
										}
									}
								}
							}
						}
					}
				}
				num3 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
					this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
					this.bgTopY = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num51 = 0; num51 < this.bgLoops; num51++)
					{
						for (int num52 = 0; num52 < num3 / 16; num52++)
						{
							float num72 = (float)(this.bgStartX + num3 * num51 + num52 * 16 + 8);
							float num53 = (float)this.bgTopY;
							Color color23 = Lighting.GetColor((int)((num72 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num53) / 16f));
							color23.R = (byte)((float)color23.R * num6);
							color23.G = (byte)((float)color23.G * num4);
							color23.B = (byte)((float)color23.B * num5);
							Main.spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2((float)(this.bgStartX + num3 * num51 + 16 * num52 + num38), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num52 + num38 + 16, Main.magmaBGFrame * 16, 16, 16)), color23);
							if (Main.ugBackTransition > 0f)
							{
								Color color24 = color23;
								color24.R = (byte)((float)color24.R * Main.ugBackTransition);
								color24.G = (byte)((float)color24.G * Main.ugBackTransition);
								color24.B = (byte)((float)color24.B * Main.ugBackTransition);
								color24.A = (byte)((float)color24.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2((float)(this.bgStartX + num3 * num51 + 16 * num52 + num38), (float)this.bgTopY) + vector, new Rectangle?(new Rectangle(16 * num52 + num38 + 16, Main.magmaBGFrame * 16, 16, 16)), color24);
							}
						}
					}
				}
			}
			this.bgTopY = (int)((float)((int)num15 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			if (num15 * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)vector.X;
				this.bgLoops = (Main.screenWidth + (int)vector.X * 2) / num3 + 2;
				if (num15 * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTopY, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTopY;
					this.bgLoopsY = (Main.screenHeight - this.bgTopY + (int)vector.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num2 = (int)((double)num2 * 1.5);
				int num54 = (int)((float)Math.Round((double)(0f - (float)Math.IEEERemainder((double)((float)this.bgStartX + Main.screenPosition.X), 16.0))));
				if (num54 == -8)
				{
					num54 = 8;
				}
				for (int num55 = 0; num55 < this.bgLoops; num55++)
				{
					for (int num56 = 0; num56 < this.bgLoopsY; num56++)
					{
						for (int num57 = 0; num57 < num3 / 16; num57++)
						{
							for (int num58 = 0; num58 < 6; num58++)
							{
								float num73 = (float)(this.bgStartY + num56 * 96 + num58 * 16 + 8);
								int num59 = (int)(((float)(this.bgStartX + num3 * num55 + num57 * 16 + 8) + Main.screenPosition.X) / 16f);
								int num60 = (int)((num73 + Main.screenPosition.Y) / 16f);
								Color color25 = Lighting.GetColor(num59, num60);
								if ((Main.ShouldDrawBackgroundTileAt(num59, num60) || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0) && (Main.WallLightAt(num59, num60) || Main.caveParallax != 0f))
								{
									if (Lighting.NotRetro && color25.R < 230 && color25.G < 230 && color25.B < 230)
									{
										if (((int)color25.R > num || (double)color25.G > (double)num * 1.1 || (double)color25.B > (double)num * 1.2) && !Main.tile[num59, num60].active())
										{
											Lighting.GetColor9Slice(num59, num60, ref slices);
											for (int num61 = 0; num61 < 9; num61++)
											{
												int num62 = 0;
												int num63 = 0;
												int width3 = 4;
												int height3 = 4;
												Color color26 = color25;
												Color color27 = color25;
												switch (num61)
												{
												case 0:
													if (!Main.tile[num59 - 1, num60 - 1].active())
													{
														color27 = slices[num61];
													}
													break;
												case 1:
													width3 = 8;
													num62 = 4;
													if (!Main.tile[num59, num60 - 1].active())
													{
														color27 = slices[num61];
													}
													break;
												case 2:
													num62 = 12;
													if (!Main.tile[num59 + 1, num60 - 1].active())
													{
														color27 = slices[num61];
													}
													break;
												case 3:
													height3 = 8;
													num63 = 4;
													if (!Main.tile[num59 - 1, num60].active())
													{
														color27 = slices[num61];
													}
													break;
												case 4:
													width3 = 8;
													height3 = 8;
													num62 = 4;
													num63 = 4;
													break;
												case 5:
													num62 = 12;
													num63 = 4;
													height3 = 8;
													if (!Main.tile[num59 + 1, num60].active())
													{
														color27 = slices[num61];
													}
													break;
												case 6:
													num63 = 12;
													if (!Main.tile[num59 - 1, num60 + 1].active())
													{
														color27 = slices[num61];
													}
													break;
												case 7:
													width3 = 8;
													height3 = 4;
													num62 = 4;
													num63 = 12;
													if (!Main.tile[num59, num60 + 1].active())
													{
														color27 = slices[num61];
													}
													break;
												case 8:
													num62 = 12;
													num63 = 12;
													if (!Main.tile[num59 + 1, num60 + 1].active())
													{
														color27 = slices[num61];
													}
													break;
												}
												color26.R = (color25.R + color27.R) / 2;
												color26.G = (color25.G + color27.G) / 2;
												color26.B = (color25.B + color27.B) / 2;
												color26.R = (byte)((float)color26.R * num6);
												color26.G = (byte)((float)color26.G * num4);
												color26.B = (byte)((float)color26.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num3 * num55 + 16 * num57 + num62 + num54), (float)(this.bgStartY + Main.backgroundHeight[2] * num56 + 16 * num58 + num63)) + vector, new Rectangle?(new Rectangle(16 * num57 + num62 + num54 + 16, 16 * num58 + Main.backgroundHeight[2] * Main.magmaBGFrame + num63, width3, height3)), color26, 0f, default(Vector2), 1f, 0, 0f);
											}
										}
										else if ((int)color25.R > num2 || (double)color25.G > (double)num2 * 1.1 || (double)color25.B > (double)num2 * 1.2)
										{
											Lighting.GetColor4Slice(num59, num60, ref slices);
											for (int num64 = 0; num64 < 4; num64++)
											{
												int num65 = 0;
												int num66 = 0;
												Color color28 = color25;
												Color color29 = slices[num64];
												switch (num64)
												{
												case 1:
													num65 = 8;
													break;
												case 2:
													num66 = 8;
													break;
												case 3:
													num65 = 8;
													num66 = 8;
													break;
												}
												color28.R = (color25.R + color29.R) / 2;
												color28.G = (color25.G + color29.G) / 2;
												color28.B = (color25.B + color29.B) / 2;
												color28.R = (byte)((float)color28.R * num6);
												color28.G = (byte)((float)color28.G * num4);
												color28.B = (byte)((float)color28.B * num5);
												Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num3 * num55 + 16 * num57 + num65 + num54), (float)(this.bgStartY + Main.backgroundHeight[2] * num56 + 16 * num58 + num66)) + vector, new Rectangle?(new Rectangle(16 * num57 + num65 + num54 + 16, 16 * num58 + Main.backgroundHeight[2] * Main.magmaBGFrame + num66, 8, 8)), color28, 0f, default(Vector2), 1f, 0, 0f);
											}
										}
										else
										{
											color25.R = (byte)((float)color25.R * num6);
											color25.G = (byte)((float)color25.G * num4);
											color25.B = (byte)((float)color25.B * num5);
											Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num3 * num55 + 16 * num57 + num54), (float)(this.bgStartY + Main.backgroundHeight[2] * num56 + 16 * num58)) + vector, new Rectangle?(new Rectangle(16 * num57 + num54 + 16, 16 * num58 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, 0, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)color25.R * num6);
										color25.G = (byte)((float)color25.G * num4);
										color25.B = (byte)((float)color25.B * num5);
										Main.spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(this.bgStartX + num3 * num55 + 16 * num57 + num54), (float)(this.bgStartY + Main.backgroundHeight[2] * num56 + 16 * num58)) + vector, new Rectangle?(new Rectangle(16 * num57 + num54 + 16, 16 * num58 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, 0, 0f);
									}
								}
							}
						}
					}
				}
			}
			Lighting.GlobalBrightness = globalBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		// Token: 0x06000596 RID: 1430 RVA: 0x00121DC0 File Offset: 0x0011FFC0
		private static bool ShouldDrawBackgroundTileAt(int i, int j)
		{
			if (Main.tile[i, j] == null)
			{
				Main.tile[i, j] = default(Tile);
			}
			if (Main.caveParallax != 0f)
			{
				if (Main.tile[i - 1, j] == null)
				{
					Main.tile[i - 1, j] = default(Tile);
				}
				if (Main.tile[i + 1, j] == null)
				{
					Main.tile[i + 1, j] = default(Tile);
				}
				if (Main.WallLightAt(i, j) || Main.WallLightAt(i - 1, j) || Main.WallLightAt(i + 1, j))
				{
					return true;
				}
			}
			else if (Main.WallLightAt(i, j))
			{
				return true;
			}
			return false;
		}

		// Token: 0x06000597 RID: 1431 RVA: 0x00121E89 File Offset: 0x00120089
		public static bool WallLightAt(int i, int j)
		{
			return Main.WallLightAt(i, j, Main.ShouldShowInvisibleWalls());
		}

		// Token: 0x06000598 RID: 1432 RVA: 0x00121E98 File Offset: 0x00120098
		public unsafe static bool WallLightAt(int i, int j, bool showInvisibleWalls)
		{
			Tile tile = Main.tile[i, j];
			return Main.wallLight[(int)(*tile.wall)] || (!showInvisibleWalls && tile.invisibleWall());
		}

		// Token: 0x06000599 RID: 1433 RVA: 0x00121ED0 File Offset: 0x001200D0
		protected void RenderBackground()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
			base.GraphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.DrawWaters(true);
			}
			catch
			{
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
			base.GraphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawBackground();
					goto IL_BA;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_BA;
				}
			}
			this.DrawBackground();
			IL_BA:
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(33);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		// Token: 0x0600059A RID: 1434 RVA: 0x00121FE0 File Offset: 0x001201E0
		protected void DrawToMap()
		{
			if (!Main.mapEnabled)
			{
				return;
			}
			int num = Main.maxTilesX / Main.textureMaxWidth;
			int num2 = Main.maxTilesY / Main.textureMaxHeight;
			for (int i = 0; i <= num; i++)
			{
				for (int j = 0; j <= num2; j++)
				{
					if (!this.checkMap(i, j))
					{
						return;
					}
				}
			}
			if (Main.clearMap)
			{
				for (int k = 0; k <= num; k++)
				{
					for (int l = 0; l <= num2; l++)
					{
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[k, l]);
						base.GraphicsDevice.Clear(Color.Transparent);
						base.GraphicsDevice.SetRenderTarget(null);
					}
				}
				Main.clearMap = false;
			}
			int num3 = -1;
			int num4 = -1;
			bool flag = false;
			int num5 = 0;
			int num6 = Main.mapMinY;
			int num7 = Main.mapMinY;
			int num8 = Main.mapMaxY;
			int num9 = Main.mapMaxY;
			int num10 = 1;
			if (Main.mapMinY / Main.textureMaxHeight != Main.mapMaxY / Main.textureMaxHeight)
			{
				num8 = Main.textureMaxHeight;
				num7 = Main.textureMaxHeight;
				num10 = 2;
			}
			for (int m = 0; m < num10; m++)
			{
				if (m != 0)
				{
					if (m == 1)
					{
						Main.mapMinY = num7;
						Main.mapMaxY = num9;
					}
				}
				else
				{
					Main.mapMinY = num6;
					Main.mapMaxY = num8;
				}
				if (Main.mapMinX < 0)
				{
					Main.mapMinX = 0;
				}
				if (Main.mapMinX >= Main.maxTilesX)
				{
					Main.mapMinX = Main.maxTilesX - 1;
				}
				if (Main.mapMinY < 0)
				{
					Main.mapMinY = 0;
				}
				if (Main.mapMinY >= Main.maxTilesY)
				{
					Main.mapMinY = Main.maxTilesY - 1;
				}
				for (int n = Main.mapMinX; n < Main.mapMaxX; n++)
				{
					for (int num11 = Main.mapMinY; num11 < Main.mapMaxY; num11++)
					{
						MapTile mapTile = Main.Map[n, num11];
						if (mapTile.IsChanged && !this.mapTarget[n / Main.textureMaxWidth, num11 / Main.textureMaxHeight].IsContentLost)
						{
							num5++;
							if (num5 < Main.maxMapUpdates)
							{
								if (Main.loadMap)
								{
									Main.loadMapLastX = n;
								}
								Main.Map.ConsumeUpdate(n, num11);
								int num12 = n / Main.textureMaxWidth;
								int num13 = num11 / Main.textureMaxHeight;
								if (num12 != num3 || num13 != num4)
								{
									num3 = num12;
									num4 = num13;
									if (flag)
									{
										Main.spriteBatch.End();
										base.GraphicsDevice.SetRenderTarget(null);
									}
									flag = true;
									base.GraphicsDevice.SetRenderTarget(this.mapTarget[num12, num13]);
									Main.spriteBatch.Begin();
								}
								int num14 = n - num12 * Main.textureMaxWidth;
								int num15 = num11 - num13 * Main.textureMaxHeight;
								Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
								int num16 = 1;
								int num17 = 1;
								int num18 = num11 + 1;
								while (num18 < Main.mapMaxY)
								{
									MapTile mapTile2;
									MapTile other = mapTile2 = Main.Map[n, num18];
									if (!mapTile2.IsChanged || !mapTile.Equals(ref other) || num18 / Main.textureMaxHeight != num13)
									{
										break;
									}
									Main.Map.ConsumeUpdate(n, num18);
									num16++;
									num18++;
									num11++;
								}
								if (num16 == 1)
								{
									for (num18 = n + 1; num18 < Main.mapMaxX; num18++)
									{
										MapTile mapTile3;
										MapTile other2 = mapTile3 = Main.Map[num18, num11];
										if (!mapTile3.IsChanged || !mapTile.Equals(ref other2) || num18 / Main.textureMaxWidth != num12)
										{
											break;
										}
										Main.Map.ConsumeUpdate(num18, num11);
										num17++;
									}
								}
								Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2((float)num14, (float)num15), new Rectangle?(new Rectangle(0, 0, num17, num16)), mapTileXnaColor, 0f, default(Vector2), 1f, 0, 0f);
							}
						}
					}
				}
			}
			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
			{
				int num20 = (int)MapHelper.updateTileX[num19];
				int num21 = (int)MapHelper.updateTileY[num19];
				MapTile mapTile4 = Main.Map[num20, num21];
				if (mapTile4.IsChanged)
				{
					Main.Map.ConsumeUpdate(num20, num21);
					int num22 = num20 / Main.textureMaxWidth;
					int num23 = num21 / Main.textureMaxHeight;
					if (num22 != num3 || num23 != num4)
					{
						num3 = num22;
						num4 = num23;
						if (flag)
						{
							Main.spriteBatch.End();
							base.GraphicsDevice.SetRenderTarget(null);
						}
						flag = true;
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[num22, num23]);
						Main.spriteBatch.Begin();
					}
					int num24 = num20 - num22 * Main.textureMaxWidth;
					int num25 = num21 - num23 * Main.textureMaxHeight;
					Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile4);
					Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2((float)num24, (float)num25), new Rectangle?(new Rectangle(0, 0, 1, 1)), mapTileXnaColor2, 0f, default(Vector2), 1f, 0, 0f);
				}
			}
			MapHelper.numUpdateTile = 0;
			if (flag)
			{
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
			Main.mapReady = true;
			Main.loadMapLastX = 0;
			Main.loadMap = false;
			Main.loadMapLock = false;
		}

		// Token: 0x0600059B RID: 1435 RVA: 0x00122528 File Offset: 0x00120728
		protected void DrawToMap_Section(int secX, int secY)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			Color[] mapColorCacheArray = Main._mapColorCacheArray;
			int num = secX * 200;
			int num2 = num + 200;
			int num3 = secY * 150;
			int num4 = num3 + 150;
			int num5 = num / Main.textureMaxWidth;
			int num6 = num3 / Main.textureMaxHeight;
			int num7 = num % Main.textureMaxWidth;
			int num8 = num3 % Main.textureMaxHeight;
			if (!this.checkMap(num5, num6))
			{
				return;
			}
			int num9 = 0;
			Color transparent = Color.Transparent;
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					MapTile mapTile = Main.Map[j, i];
					mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
					num9++;
				}
			}
			try
			{
				base.GraphicsDevice.SetRenderTarget(this.mapTarget[num5, num6]);
			}
			catch (ObjectDisposedException)
			{
				Main.initMap[num5, num6] = false;
				return;
			}
			Main.spriteBatch.Begin(1, BlendState.AlphaBlend);
			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			this.mapSectionTexture.SetData<Color>(mapColorCacheArray, 0, mapColorCacheArray.Length);
			double totalMilliseconds2 = stopwatch.Elapsed.TotalMilliseconds;
			double totalMilliseconds3 = stopwatch.Elapsed.TotalMilliseconds;
			Main.spriteBatch.Draw(this.mapSectionTexture, new Vector2((float)num7, (float)num8), Color.White);
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			double totalMilliseconds4 = stopwatch.Elapsed.TotalMilliseconds;
			stopwatch.Stop();
		}

		// Token: 0x0600059C RID: 1436 RVA: 0x001226C8 File Offset: 0x001208C8
		public static string ValueToCoins(long value)
		{
			long num = value;
			long num2 = 0L;
			long num3 = 0L;
			long num4 = 0L;
			while (num >= 1000000L)
			{
				num -= 1000000L;
				num2 += 1L;
			}
			while (num >= 10000L)
			{
				num -= 10000L;
				num3 += 1L;
			}
			while (num >= 100L)
			{
				num -= 100L;
				num4 += 1L;
			}
			long num5 = num;
			string text = "";
			if (num2 > 0L)
			{
				text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Platinum").ToLower());
			}
			if (num3 > 0L)
			{
				text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Gold").ToLower());
			}
			if (num4 > 0L)
			{
				text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Silver").ToLower());
			}
			if (num5 > 0L)
			{
				text += string.Format("{0} {1} ", num5, Language.GetTextValue("Currency.Copper").ToLower());
			}
			if (text.Length > 0)
			{
				text = text.Substring(0, text.Length - 1);
			}
			return text;
		}

		// Token: 0x0600059D RID: 1437 RVA: 0x00122808 File Offset: 0x00120A08
		private static void UpdateMinimapAnchors()
		{
			int num = 240;
			int num2 = 240;
			Main._minimapTopRightAnchorOffsetTowardsLeft = 292;
			Main._minimapTopRightAnchorOffsetTowardsBottom = 90;
			Main._minimapTopRightAnchorOffsetTowardsLeft = (int)((float)(52 + num / 2) + Main.MapScale * (float)num / 2f);
			Main._minimapTopRightAnchorOffsetTowardsBottom = (int)((float)(90 + num2 / 2) - Main.MapScale * (float)num2 / 2f);
			Main._minimapTopRightAnchorOffsetTowardsLeft = 52 + (int)(240f * Main.MapScale);
			Main._minimapTopRightAnchorOffsetTowardsBottom = 90;
		}

		// Token: 0x0600059E RID: 1438 RVA: 0x00122888 File Offset: 0x00120A88
		protected unsafe void DrawMap(GameTime gameTime)
		{
			string text = "";
			if (!Main.mapEnabled || !Main.mapReady)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = num;
			float num4 = num2;
			float num5 = 2f;
			byte b = byte.MaxValue;
			int num136 = Main.maxTilesX / Main.textureMaxWidth;
			int num6 = Main.maxTilesY / Main.textureMaxHeight;
			float num7 = (float)Lighting.OffScreenTiles;
			float num8 = (float)Lighting.OffScreenTiles;
			float num9 = (float)(Main.maxTilesX - Lighting.OffScreenTiles - 1);
			float num10 = (float)(Main.maxTilesY - Lighting.OffScreenTiles - 42);
			float num11 = 0f;
			float num12 = 0f;
			num7 = 10f;
			num8 = 10f;
			num9 = (float)(Main.maxTilesX - 10);
			num10 = (float)(Main.maxTilesY - 10);
			for (int i = 0; i < this.mapTarget.GetLength(0); i++)
			{
				for (int j = 0; j < this.mapTarget.GetLength(1); j++)
				{
					if (this.mapTarget[i, j] != null)
					{
						if (this.mapTarget[i, j].IsContentLost && !Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = true;
							Main.refreshMap = true;
							Main.clearMap = true;
						}
						else if (!this.mapTarget[i, j].IsContentLost && Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = false;
						}
					}
				}
			}
			num = 200f;
			num2 = 300f;
			float num13 = 0f;
			float num14 = 0f;
			float num15 = num9 - 1f;
			float num16 = num10 - 1f;
			num5 = (Main.mapFullscreen ? Main.mapFullscreenScale : ((Main.mapStyle != 1) ? Main.mapOverlayScale : Main.mapMinimapScale));
			bool flag = false;
			float mapScale = Main.MapScale;
			float num17 = 1f / mapScale;
			int num18 = Main.mouseX;
			int num19 = Main.mouseY;
			Matrix uIScaleMatrix = Main.UIScaleMatrix;
			Matrix transformMatrix = uIScaleMatrix;
			Matrix transformMatrix2 = uIScaleMatrix;
			Matrix matrix = Matrix.CreateScale(mapScale);
			int num20 = -1;
			if (Main.mapStyle != 1)
			{
				transformMatrix = Matrix.Identity;
			}
			if (Main.mapFullscreen)
			{
				transformMatrix = Matrix.Identity;
			}
			if (!Main.mapFullscreen && Main.mapStyle == 1)
			{
				transformMatrix *= matrix;
				transformMatrix2 *= matrix;
			}
			if (!Main.mapFullscreen)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
				if (num5 > 1f)
				{
					flag = true;
				}
			}
			if (Main.mapFullscreen)
			{
				if (Main.mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
				{
					if (Main.mouseLeftRelease)
					{
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
					}
					else
					{
						float num21 = (float)Main.mouseX - Main.grabMapX;
						float num22 = (float)Main.mouseY - Main.grabMapY;
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
						num21 *= 0.06255f;
						num22 *= 0.06255f;
						Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - num21 * (16f / Main.mapFullscreenScale);
						Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - num22 * (16f / Main.mapFullscreenScale);
					}
				}
				Main.player[Main.myPlayer].mouseInterface = true;
				float num23 = (float)Main.screenWidth / (float)Main.maxTilesX * 0.599f;
				if (Main.mapFullscreenScale < num23)
				{
					Main.mapFullscreenScale = num23;
				}
				if (Main.mapFullscreenScale > 31.2f)
				{
					Main.mapFullscreenScale = 31.18f;
				}
				num5 = Main.mapFullscreenScale;
				b = byte.MaxValue;
				if (Main.mapFullscreenPos.X < num7)
				{
					Main.mapFullscreenPos.X = num7;
				}
				if (Main.mapFullscreenPos.X > num9)
				{
					Main.mapFullscreenPos.X = num9;
				}
				if (Main.mapFullscreenPos.Y < num8)
				{
					Main.mapFullscreenPos.Y = num8;
				}
				if (Main.mapFullscreenPos.Y > num10)
				{
					Main.mapFullscreenPos.Y = num10;
				}
				float num24 = Main.mapFullscreenPos.X;
				float num25 = Main.mapFullscreenPos.Y;
				if (Main.resetMapFull)
				{
					Main.resetMapFull = false;
					num24 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
					num25 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
					Main.mapFullscreenPos.X = num24;
					Main.mapFullscreenPos.Y = num25;
				}
				num24 *= num5;
				num25 *= num5;
				num = 0f - num24 + (float)(Main.screenWidth / 2);
				num2 = 0f - num25 + (float)(Main.screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
				float num26 = (float)(Main.maxTilesX / 840);
				num26 *= Main.mapFullscreenScale;
				float num27 = num;
				float num28 = num2;
				float num29 = (float)TextureAssets.Map.Width();
				float num30 = (float)TextureAssets.Map.Height();
				if (Main.maxTilesX == 8400)
				{
					num26 *= 0.999f;
					num27 -= 40.6f * num26;
					num28 = num2 - 5f * num26;
					num29 -= 8.045f;
					num29 *= num26;
					num30 += 0.12f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 1f;
					}
				}
				else if (Main.maxTilesX == 6400)
				{
					num26 *= 1.09f;
					num27 -= 38.8f * num26;
					num28 = num2 - 3.85f * num26;
					num29 -= 13.6f;
					num29 *= num26;
					num30 -= 6.92f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 2f;
					}
				}
				else if (Main.maxTilesX == 6300)
				{
					num26 *= 1.09f;
					num27 -= 39.8f * num26;
					num28 = num2 - 4.08f * num26;
					num29 -= 26.69f;
					num29 *= num26;
					num30 -= 6.92f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 2f;
					}
				}
				else if (Main.maxTilesX == 4200)
				{
					num26 *= 0.998f;
					num27 -= 37.3f * num26;
					num28 -= 1.7f * num26;
					num29 -= 16f;
					num29 *= num26;
					num30 -= 8.31f;
					num30 *= num26;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				Main.DrawMapFullscreenBackground(Main.screenPosition, Main.screenWidth, Main.screenHeight);
				int x = (int)(num + Main.mapFullscreenScale * 10f);
				int y = (int)(num2 + Main.mapFullscreenScale * 10f);
				int width = (int)((float)(Main.maxTilesX - 40) * Main.mapFullscreenScale);
				int height = (int)((float)(Main.maxTilesY - 40) * Main.mapFullscreenScale);
				Rectangle destinationRectangle;
				destinationRectangle..ctor(x, y, width, height);
				Main.spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, new Rectangle?(new Rectangle(40, 4, 848, 240)), Color.White);
				int edgeWidth = (int)(40f * Main.mapFullscreenScale * 5f);
				int edgeHeight = (int)(4f * Main.mapFullscreenScale * 5f);
				destinationRectangle..ctor(x - edgeWidth, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
				Main.spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, new Rectangle?(new Rectangle(0, 0, 40, 248)), Color.White);
				destinationRectangle..ctor(x + width, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
				Main.spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, new Rectangle?(new Rectangle(888, 0, 40, 248)), Color.White);
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					double totalSeconds = gameTime.TotalGameTime.TotalSeconds;
					if (totalSeconds - Main._lastPingMouseDownTime < 0.5 && Vector2.Distance(Main.MouseScreen, Main._lastPingMousePosition) < 2f)
					{
						Main.TriggerPing((Main.MouseScreen - new Vector2(num - 10f * num5, num2 - 10f * num5)) / num5);
					}
					Main._lastPingMouseDownTime = totalSeconds;
					Main._lastPingMousePosition = Main.MouseScreen;
				}
				if (num5 < 1f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					flag = false;
				}
			}
			else if (Main.mapStyle == 1)
			{
				Main.UpdateMinimapAnchors();
				Main.miniMapWidth = 240;
				Main.miniMapHeight = 240;
				Main.miniMapX = Main.screenWidth - Main._minimapTopRightAnchorOffsetTowardsLeft;
				Main.miniMapY = Main._minimapTopRightAnchorOffsetTowardsBottom;
				Main.miniMapX = (int)((float)Main.miniMapX * num17);
				Main.miniMapY = (int)((float)Main.miniMapY * num17);
				Main.mouseX = (int)((float)Main.mouseX * num17);
				Main.mouseY = (int)((float)Main.mouseY * num17);
				float num137 = (float)Main.miniMapHeight / (float)Main.maxTilesY;
				if ((double)Main.mapMinimapScale < 0.2)
				{
					Main.mapMinimapScale = 0.2f;
				}
				if (Main.mapMinimapScale > 3f)
				{
					Main.mapMinimapScale = 3f;
				}
				if ((double)Main.mapMinimapAlpha < 0.01)
				{
					Main.mapMinimapAlpha = 0.01f;
				}
				if (Main.mapMinimapAlpha > 1f)
				{
					Main.mapMinimapAlpha = 1f;
				}
				num5 = Main.mapMinimapScale;
				b = (byte)(255f * Main.mapMinimapAlpha);
				num = (float)Main.miniMapX;
				num2 = (float)Main.miniMapY;
				num3 = num;
				num4 = num2;
				float num31 = (Main.screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f;
				float num32 = (Main.screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f;
				num11 = (0f - (num31 - (float)((int)((Main.screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f)))) * num5;
				num12 = (0f - (num32 - (float)((int)((Main.screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f)))) * num5;
				num15 = (float)Main.miniMapWidth / num5;
				num16 = (float)Main.miniMapHeight / num5;
				num13 = (float)((int)num31) - num15 / 2f;
				num14 = (float)((int)num32) - num16 / 2f;
				int num138 = Main.maxTilesY;
				float num33 = num3 - 6f;
				float num34 = num4 - 6f;
				Main.MinimapFrameManagerInstance.DrawTo(Main.spriteBatch, new Vector2(num33 + 10f, num34 + 10f));
			}
			else if (Main.mapStyle == 2)
			{
				float num35 = (float)Main.screenWidth / (float)Main.maxTilesX;
				if (Main.mapOverlayScale < num35)
				{
					Main.mapOverlayScale = num35;
				}
				if (Main.mapOverlayScale > 16f * Main.GameViewMatrix.Zoom.X)
				{
					Main.mapOverlayScale = 16f * Main.GameViewMatrix.Zoom.X;
				}
				if ((double)Main.mapOverlayAlpha < 0.01)
				{
					Main.mapOverlayAlpha = 0.01f;
				}
				if (Main.mapOverlayAlpha > 1f)
				{
					Main.mapOverlayAlpha = 1f;
				}
				num5 = Main.mapOverlayScale;
				b = (byte)(255f * Main.mapOverlayAlpha);
				int num139 = Main.maxTilesX;
				int num140 = Main.maxTilesY;
				float num36 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
				float num141 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
				num36 *= num5;
				float num37 = num141 * num5;
				num = 0f - num36 + (float)(Main.screenWidth / 2);
				num2 = 0f - num37 + (float)(Main.screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
			}
			if (Main.mapStyle == 1 && !Main.mapFullscreen)
			{
				if (num13 < num7)
				{
					num -= (num13 - num7) * num5;
				}
				if (num14 < num8)
				{
					num2 -= (num14 - num8) * num5;
				}
			}
			num15 = num13 + num15;
			num16 = num14 + num16;
			if (num13 > num7)
			{
				num7 = num13;
			}
			if (num14 > num8)
			{
				num8 = num14;
			}
			if (num15 < num9)
			{
				num9 = num15;
			}
			if (num16 < num10)
			{
				num10 = num16;
			}
			float num38 = (float)Main.textureMaxWidth * num5;
			float num39 = (float)Main.textureMaxHeight * num5;
			float num40 = num;
			float num41 = 0f;
			for (int k = 0; k <= Main.mapTargetX - 1; k++)
			{
				if ((float)((k + 1) * Main.textureMaxWidth) > num7 && (float)(k * Main.textureMaxWidth) < num7 + num9)
				{
					for (int l = 0; l <= num6; l++)
					{
						if ((float)((l + 1) * Main.textureMaxHeight) > num8 && (float)(l * Main.textureMaxHeight) < num8 + num10)
						{
							float num42 = num + (float)((int)((float)k * num38));
							float num43 = num2 + (float)((int)((float)l * num39));
							float num44 = (float)(k * Main.textureMaxWidth);
							float num45 = (float)(l * Main.textureMaxHeight);
							float num46 = 0f;
							float num47 = 0f;
							if (num44 < num7)
							{
								num46 = num7 - num44;
							}
							else
							{
								num42 -= num7 * num5;
							}
							if (num45 < num8)
							{
								num47 = num8 - num45;
								num43 = num2;
							}
							else
							{
								num43 -= num8 * num5;
							}
							num42 = num40;
							float num48 = (float)Main.textureMaxWidth;
							float num49 = (float)Main.textureMaxHeight;
							float num50 = (float)((k + 1) * Main.textureMaxWidth);
							float num51 = (float)((l + 1) * Main.textureMaxHeight);
							if (num50 >= num9)
							{
								num48 -= num50 - num9;
							}
							if (num51 >= num10)
							{
								num49 -= num51 - num10;
							}
							num42 += num11;
							num43 += num12;
							if (num48 > num46)
							{
								Rectangle value;
								value..ctor((int)num46, (int)num47, (int)num48 - (int)num46, (int)num49 - (int)num47);
								Main.spriteBatch.Draw(this.mapTarget[k, l], new Vector2(num42, num43), new Rectangle?(value), new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num5, 0, 0f);
							}
							num41 = (float)((int)num48 - (int)num46) * num5;
						}
						if (l == num6)
						{
							num40 += num41;
						}
					}
				}
			}
			if (flag)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
			}
			if (!Main.mapFullscreen)
			{
				if (Main.mapStyle == 2)
				{
					float num52 = (num5 * 0.2f * 2f + 1f) / 3f;
					if (num52 > 1f)
					{
						num52 = 1f;
					}
					num52 *= Main.UIScale;
					Main.MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num52, ref text);
					CoinLossRevengeSystem.RevengeMarker revengeMarker = NPC.RevengeManager.DrawMapIcons(Main.spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num52, ref text);
					this.DrawMiscMapIcons(Main.spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num52, ref text);
					Main.spriteBatch.End();
					if (revengeMarker != null)
					{
						Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
						try
						{
							revengeMarker.UseMouseOver(Main.spriteBatch, ref text, num52);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
						}
						Main.spriteBatch.End();
					}
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
					try
					{
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].active && Main.npc[m].townNPC)
							{
								int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(Main.npc[m]);
								if (headIndexSafe > 0)
								{
									SpriteEffects dir = 0;
									if (Main.npc[m].direction > 0)
									{
										dir = 1;
									}
									float num53 = (Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f * num5;
									float num54 = (Main.npc[m].position.Y + (float)(Main.npc[m].height / 2)) / 16f * num5;
									num53 += num;
									num54 += num2;
									num53 -= 10f * num5;
									num54 -= 10f * num5;
									Main.DrawNPCHeadFriendly(Main.npc[m], b, num52, dir, headIndexSafe, num53, num54);
								}
							}
							if (Main.npc[m].active && Main.npc[m].GetBossHeadTextureIndex() != -1)
							{
								float bossHeadRotation = Main.npc[m].GetBossHeadRotation();
								SpriteEffects bossHeadSpriteEffects = Main.npc[m].GetBossHeadSpriteEffects();
								Vector2 vector = Main.npc[m].Center + new Vector2(0f, Main.npc[m].gfxOffY);
								if (Main.npc[m].type == 134)
								{
									Vector2 center = Main.npc[m].Center;
									int num55 = 1;
									int num56 = (int)Main.npc[m].ai[0];
									while (num55 < 15 && Main.npc[num56].active && Main.npc[num56].type >= 134 && Main.npc[num56].type <= 136)
									{
										num55++;
										center += Main.npc[num56].Center;
										num56 = (int)Main.npc[num56].ai[0];
									}
									center /= (float)num55;
									vector = center;
								}
								int bossHeadTextureIndex = Main.npc[m].GetBossHeadTextureIndex();
								float num57 = vector.X / 16f * num5;
								float num58 = vector.Y / 16f * num5;
								num57 += num;
								num58 += num2;
								num57 -= 10f * num5;
								num58 -= 10f * num5;
								Main.DrawNPCHeadBoss(Main.npc[m], b, num52, bossHeadRotation, bossHeadSpriteEffects, bossHeadTextureIndex, num57, num58);
							}
						}
					}
					catch (Exception e2)
					{
						TimeLogger.DrawException(e2);
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
					for (int n = 0; n < 255; n++)
					{
						if (Main.player[n].active && !Main.player[n].dead && n != Main.myPlayer && ((!Main.player[Main.myPlayer].hostile && !Main.player[n].hostile) || (Main.player[Main.myPlayer].team == Main.player[n].team && Main.player[n].team != 0) || n == Main.myPlayer))
						{
							float num59 = (Main.player[n].position.X + (float)(Main.player[n].width / 2)) / 16f * num5;
							float num60 = Main.player[n].position.Y / 16f * num5;
							num59 += num;
							num60 += num2;
							num59 -= 6f;
							num60 -= 2f;
							num60 -= 2f - num5 / 5f * 2f;
							num59 -= 10f * num5;
							num60 -= 10f * num5;
							Color playerHeadBordersColor = Main.GetPlayerHeadBordersColor(Main.player[n]);
							Main.MapPlayerRenderer.DrawPlayerHead(Main.Camera, Main.player[n], new Vector2(num59, num60), (float)b / 255f, num52, playerHeadBordersColor);
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
				}
				if (Main.mapStyle == 1)
				{
					float num61 = (num5 * 0.25f * 2f + 1f) / 3f;
					if (num61 > 1f)
					{
						num61 = 1f;
					}
					Main.MapIcons.Draw(new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Rectangle?(new Rectangle(Main.miniMapX, Main.miniMapY, Main.miniMapWidth, Main.miniMapHeight)), num5, num61, ref text);
					CoinLossRevengeSystem.RevengeMarker revengeMarker = NPC.RevengeManager.DrawMapIcons(Main.spriteBatch, new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Rectangle?(new Rectangle(Main.miniMapX, Main.miniMapY, Main.miniMapWidth, Main.miniMapHeight)), num5, num61, ref text);
					this.DrawMiscMapIcons(Main.spriteBatch, new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Rectangle?(new Rectangle(Main.miniMapX, Main.miniMapY, Main.miniMapWidth, Main.miniMapHeight)), num5, num61, ref text);
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					for (int num62 = 0; num62 < 200; num62++)
					{
						if (Main.npc[num62].active && Main.npc[num62].townNPC)
						{
							int headIndexSafe2 = TownNPCProfiles.GetHeadIndexSafe(Main.npc[num62]);
							if (headIndexSafe2 > 0)
							{
								SpriteEffects dir2 = 0;
								if (Main.npc[num62].direction > 0)
								{
									dir2 = 1;
								}
								float num63 = ((Main.npc[num62].position.X + (float)Main.npc[num62].width / 2f) / 16f - num13) * num5;
								float num64 = ((Main.npc[num62].position.Y + Main.npc[num62].gfxOffY + (float)Main.npc[num62].height / 2f) / 16f - num14) * num5;
								num63 += num3;
								num64 += num4;
								num64 -= 2f * num5 / 5f;
								num63 += num11;
								num64 += num12;
								if (num63 > (float)(Main.miniMapX + 12) && num63 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num64 > (float)(Main.miniMapY + 10) && num64 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
								{
									float num65 = num63 - (float)(TextureAssets.NpcHead[headIndexSafe2].Width() / 2) * num61;
									float num66 = num64 - (float)(TextureAssets.NpcHead[headIndexSafe2].Height() / 2) * num61;
									float num67 = num65 + (float)TextureAssets.NpcHead[headIndexSafe2].Width() * num61;
									float num68 = num66 + (float)TextureAssets.NpcHead[headIndexSafe2].Height() * num61;
									if ((float)Main.mouseX >= num65 && (float)Main.mouseX <= num67 && (float)Main.mouseY >= num66 && (float)Main.mouseY <= num68)
									{
										text = Main.npc[num62].FullName;
									}
									Main.DrawNPCHeadFriendly(Main.npc[num62], b, num61, dir2, headIndexSafe2, num63, num64);
								}
							}
						}
						if (Main.npc[num62].active && Main.npc[num62].GetBossHeadTextureIndex() != -1)
						{
							float bossHeadRotation2 = Main.npc[num62].GetBossHeadRotation();
							SpriteEffects bossHeadSpriteEffects2 = Main.npc[num62].GetBossHeadSpriteEffects();
							Vector2 vector2 = Main.npc[num62].Center + new Vector2(0f, Main.npc[num62].gfxOffY);
							if (Main.npc[num62].type == 134)
							{
								Vector2 center2 = Main.npc[num62].Center;
								int num69 = 1;
								int num70 = (int)Main.npc[num62].ai[0];
								while (num69 < 15 && Main.npc[num70].active && Main.npc[num70].type >= 134 && Main.npc[num70].type <= 136)
								{
									num69++;
									center2 += Main.npc[num70].Center;
									num70 = (int)Main.npc[num70].ai[0];
								}
								center2 /= (float)num69;
								vector2 = center2;
							}
							int bossHeadTextureIndex2 = Main.npc[num62].GetBossHeadTextureIndex();
							float num71 = (vector2.X / 16f - num13) * num5;
							float num72 = (vector2.Y / 16f - num14) * num5;
							num71 += num3;
							num72 += num4;
							num72 -= 2f * num5 / 5f;
							num71 += num11;
							num72 += num12;
							if (num71 > (float)(Main.miniMapX + 12) && num71 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num72 > (float)(Main.miniMapY + 10) && num72 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								float num73 = num71 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() / 2) * num61;
								float num74 = num72 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() / 2) * num61;
								float num75 = num73 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() * num61;
								float num76 = num74 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() * num61;
								if ((float)Main.mouseX >= num73 && (float)Main.mouseX <= num75 && (float)Main.mouseY >= num74 && (float)Main.mouseY <= num76)
								{
									text = Main.npc[num62].GivenOrTypeName;
								}
								Main.DrawNPCHeadBoss(Main.npc[num62], b, num61, bossHeadRotation2, bossHeadSpriteEffects2, bossHeadTextureIndex2, num71, num72);
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					for (int num77 = 0; num77 < 255; num77++)
					{
						if (Main.player[num77].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num77].hostile) || (Main.player[Main.myPlayer].team == Main.player[num77].team && Main.player[num77].team != 0) || num77 == Main.myPlayer))
						{
							float num78 = ((Main.player[num77].position.X + (float)(Main.player[num77].width / 2)) / 16f - num13) * num5;
							float num79 = ((Main.player[num77].position.Y + Main.player[num77].gfxOffY + (float)(Main.player[num77].height / 2)) / 16f - num14) * num5;
							num78 += num3;
							num79 += num4;
							num78 -= 6f;
							num79 -= 6f;
							num79 -= 2f - num5 / 5f * 2f;
							num78 += num11;
							num79 += num12;
							if (!Main.player[num77].dead && num78 > (float)(Main.miniMapX + 6) && num78 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num79 > (float)(Main.miniMapY + 6) && num79 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								Color playerHeadBordersColor2 = Main.GetPlayerHeadBordersColor(Main.player[num77]);
								Main.MapPlayerRenderer.DrawPlayerHead(Main.Camera, Main.player[num77], new Vector2(num78, num79), (float)b / 255f, num61, playerHeadBordersColor2);
								if (num77 != Main.myPlayer)
								{
									float num80 = num78 + 4f - 14f * num61;
									float num81 = num79 + 2f - 14f * num61;
									float num82 = num80 + 28f * num61;
									float num83 = num81 + 28f * num61;
									if ((float)Main.mouseX >= num80 && (float)Main.mouseX <= num82 && (float)Main.mouseY >= num81 && (float)Main.mouseY <= num83)
									{
										text = Main.player[num77].name;
									}
								}
							}
							if (Main.player[num77].showLastDeath)
							{
								num78 = (Main.player[num77].lastDeathPostion.X / 16f - num13) * num5;
								num79 = (Main.player[num77].lastDeathPostion.Y / 16f - num14) * num5;
								num78 += num3;
								num79 += num4;
								num79 -= 2f - num5 / 5f * 2f;
								num78 += num11;
								num79 += num12;
								if (num78 > (float)(Main.miniMapX + 8) && num78 < (float)(Main.miniMapX + Main.miniMapWidth - 18) && num79 > (float)(Main.miniMapY + 8) && num79 < (float)(Main.miniMapY + Main.miniMapHeight - 16))
								{
									Main.spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num78, num79), new Rectangle?(new Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height())), Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), num61, 0, 0f);
									float num84 = num78 + 4f - 14f * num61;
									float num85 = num79 + 2f - 14f * num61;
									num84 -= 4f;
									num85 -= 4f;
									float num86 = num84 + 28f * num61;
									float num87 = num85 + 28f * num61;
									if ((float)Main.mouseX >= num84 && (float)Main.mouseX <= num86 && (float)Main.mouseY >= num85 && (float)Main.mouseY <= num87)
									{
										num20 = num77;
									}
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					Main.MinimapFrameManagerInstance.DrawForeground(Main.spriteBatch);
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
					if (num20 != -1)
					{
						TimeSpan timeSpan = DateTime.Now - Main.player[num20].lastDeathTime;
						text = Language.GetTextValue("Game.PlayerDeathTime", Main.player[num20].name, Lang.LocalizedDuration(timeSpan, false, false));
					}
					else if (revengeMarker != null)
					{
						revengeMarker.UseMouseOver(Main.spriteBatch, ref text, 1f);
					}
				}
			}
			if (Main.mapFullscreen)
			{
				int num88 = (int)((0f - num + (float)Main.mouseX) / num5 + num7);
				int num89 = (int)((0f - num2 + (float)Main.mouseY) / num5 + num8);
				bool flag2 = false;
				if ((float)num88 < num7)
				{
					flag2 = true;
				}
				if ((float)num88 >= num9)
				{
					flag2 = true;
				}
				if ((float)num89 < num8)
				{
					flag2 = true;
				}
				if ((float)num89 >= num10)
				{
					flag2 = true;
				}
				if (!flag2 && Main.Map[num88, num89].Light > 40)
				{
					int type = (int)Main.Map[num88, num89].Type;
					int num90 = (int)MapHelper.tileLookup[21];
					int num91 = (int)MapHelper.tileLookup[441];
					int num92 = MapHelper.tileOptionCounts[21];
					int num93 = (int)MapHelper.tileLookup[467];
					int num94 = (int)MapHelper.tileLookup[468];
					int num95 = MapHelper.tileOptionCounts[467];
					int num96 = (int)MapHelper.tileLookup[88];
					int num97 = MapHelper.tileOptionCounts[88];
					LocalizedText[] chestType = Lang.chestType;
					LocalizedText[] chestType2 = Lang.chestType2;
					if (type >= num90 && type < num90 + num92)
					{
						Tile tile = Main.tile[num88, num89];
						if (tile != null)
						{
							int num98 = num88;
							int num99 = num89;
							if (*tile.frameX % 36 != 0)
							{
								num98--;
							}
							if (*tile.frameY % 36 != 0)
							{
								num99--;
							}
							text = Main.DrawMap_FindChestName(chestType, tile, num98, num99, 36);
						}
					}
					else if (type >= num93 && type < num93 + num95)
					{
						Tile tile2 = Main.tile[num88, num89];
						if (tile2 != null)
						{
							int num100 = num88;
							int num101 = num89;
							if (*tile2.frameX % 36 != 0)
							{
								num100--;
							}
							if (*tile2.frameY % 36 != 0)
							{
								num101--;
							}
							text = Main.DrawMap_FindChestName(chestType2, tile2, num100, num101, 36);
						}
					}
					else if (type >= num91 && type < num91 + num92)
					{
						Tile tile3 = Main.tile[num88, num89];
						if (tile3 != null)
						{
							int num102 = num88;
							int num103 = num89;
							if (*tile3.frameX % 36 != 0)
							{
								num102--;
							}
							if (*tile3.frameY % 36 != 0)
							{
								num103--;
							}
							text = chestType[(int)(*tile3.frameX / 36)].Value;
						}
					}
					else if (type >= num94 && type < num94 + num95)
					{
						Tile tile4 = Main.tile[num88, num89];
						if (tile4 != null)
						{
							int num104 = num88;
							int num105 = num89;
							if (*tile4.frameX % 36 != 0)
							{
								num104--;
							}
							if (*tile4.frameY % 36 != 0)
							{
								num105--;
							}
							text = chestType2[(int)(*tile4.frameX / 36)].Value;
						}
					}
					else if (type >= num96 && type < num96 + num97)
					{
						Tile tile5 = Main.tile[num88, num89];
						if (tile5 != null)
						{
							int num106 = num89;
							int x2 = num88 - (int)(*tile5.frameX % 54 / 18);
							if (*tile5.frameY % 36 != 0)
							{
								num106--;
							}
							int num107 = Chest.FindChest(x2, num106);
							text = ((num107 < 0) ? Lang.dresserType[0].Value : ((!(Main.chest[num107].name != "")) ? Lang.dresserType[(int)(*tile5.frameX / 54)].Value : (Lang.dresserType[(int)(*tile5.frameX / 54)].Value + ": " + Main.chest[num107].name)));
						}
					}
					else
					{
						text = Lang._mapLegendCache.FromTile(Main.Map[num88, num89], num88, num89);
					}
				}
				float num108 = (num5 * 0.25f * 2f + 1f) / 3f;
				if (num108 > 1f)
				{
				}
				num108 = Main.UIScale;
				CoinLossRevengeSystem.RevengeMarker revengeMarker = NPC.RevengeManager.DrawMapIcons(Main.spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num108, ref text);
				this.DrawMiscMapIcons(Main.spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num108, ref text);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend);
				for (int num109 = 0; num109 < 200; num109++)
				{
					if (Main.npc[num109].active && Main.npc[num109].townNPC)
					{
						int headIndexSafe3 = TownNPCProfiles.GetHeadIndexSafe(Main.npc[num109]);
						if (headIndexSafe3 > 0)
						{
							SpriteEffects dir3 = 0;
							if (Main.npc[num109].direction > 0)
							{
								dir3 = 1;
							}
							float num110 = (Main.npc[num109].position.X + (float)(Main.npc[num109].width / 2)) / 16f * num5;
							float num111 = (Main.npc[num109].position.Y + Main.npc[num109].gfxOffY + (float)(Main.npc[num109].height / 2)) / 16f * num5;
							num110 += num;
							num111 += num2;
							num110 -= 10f * num5;
							num111 -= 10f * num5;
							float num112 = num110 - (float)(TextureAssets.NpcHead[headIndexSafe3].Width() / 2) * num108;
							float num113 = num111 - (float)(TextureAssets.NpcHead[headIndexSafe3].Height() / 2) * num108;
							float num114 = num112 + (float)TextureAssets.NpcHead[headIndexSafe3].Width() * num108;
							float num115 = num113 + (float)TextureAssets.NpcHead[headIndexSafe3].Height() * num108;
							if ((float)Main.mouseX >= num112 && (float)Main.mouseX <= num114 && (float)Main.mouseY >= num113 && (float)Main.mouseY <= num115)
							{
								text = Main.npc[num109].FullName;
							}
							Main.DrawNPCHeadFriendly(Main.npc[num109], b, num108, dir3, headIndexSafe3, num110, num111);
						}
					}
					if (Main.npc[num109].active && Main.npc[num109].GetBossHeadTextureIndex() != -1)
					{
						float bossHeadRotation3 = Main.npc[num109].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects3 = Main.npc[num109].GetBossHeadSpriteEffects();
						Vector2 vector3 = Main.npc[num109].Center + new Vector2(0f, Main.npc[num109].gfxOffY);
						if (Main.npc[num109].type == 134)
						{
							Vector2 center3 = Main.npc[num109].Center;
							int num116 = 1;
							int num117 = (int)Main.npc[num109].ai[0];
							while (num116 < 15 && Main.npc[num117].active && Main.npc[num117].type >= 134 && Main.npc[num117].type <= 136)
							{
								num116++;
								center3 += Main.npc[num117].Center;
								num117 = (int)Main.npc[num117].ai[0];
							}
							center3 /= (float)num116;
							vector3 = center3;
						}
						int bossHeadTextureIndex3 = Main.npc[num109].GetBossHeadTextureIndex();
						float num118 = vector3.X / 16f * num5;
						float num119 = vector3.Y / 16f * num5;
						num118 += num;
						num119 += num2;
						num118 -= 10f * num5;
						num119 -= 10f * num5;
						Main.DrawNPCHeadBoss(Main.npc[num109], b, num108, bossHeadRotation3, bossHeadSpriteEffects3, bossHeadTextureIndex3, num118, num119);
						float num120 = num118 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() / 2) * num108;
						float num121 = num119 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() / 2) * num108;
						float num122 = num120 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() * num108;
						float num123 = num121 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() * num108;
						if ((float)Main.mouseX >= num120 && (float)Main.mouseX <= num122 && (float)Main.mouseY >= num121 && (float)Main.mouseY <= num123)
						{
							text = Main.npc[num109].GivenOrTypeName;
						}
					}
				}
				bool flag3 = false;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend);
				for (int num124 = 0; num124 < 255; num124++)
				{
					if (Main.player[num124].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num124].hostile) || (Main.player[Main.myPlayer].team == Main.player[num124].team && Main.player[num124].team != 0) || num124 == Main.myPlayer) && Main.player[num124].showLastDeath && Main.DrawPlayerDeathMarker(num, num2, num5, num13, num14, num108, num124))
					{
						num20 = num124;
					}
				}
				if (num20 != -1)
				{
					TimeSpan timeSpan2 = DateTime.Now - Main.player[num20].lastDeathTime;
					text = Language.GetTextValue("Game.PlayerDeathTime", Main.player[num20].name, Lang.LocalizedDuration(timeSpan2, false, false));
				}
				else if (revengeMarker != null)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
					revengeMarker.UseMouseOver(Main.spriteBatch, ref text, num108);
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(1, BlendState.AlphaBlend);
				}
				for (int num125 = 0; num125 < 255; num125++)
				{
					if (Main.player[num125].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num125].hostile) || (Main.player[Main.myPlayer].team == Main.player[num125].team && Main.player[num125].team != 0) || num125 == Main.myPlayer))
					{
						float num126 = ((Main.player[num125].position.X + (float)(Main.player[num125].width / 2)) / 16f - num13) * num5;
						float num127 = ((Main.player[num125].position.Y + Main.player[num125].gfxOffY + (float)(Main.player[num125].height / 2)) / 16f - num14) * num5;
						num126 += num;
						num127 += num2;
						num126 -= 6f;
						num127 -= 2f;
						num127 -= 2f - num5 / 5f * 2f;
						num126 -= 10f * num5;
						num127 -= 10f * num5;
						float num128 = num126 + 4f - 14f * num108;
						float num129 = num127 + 2f - 14f * num108;
						float num130 = num128 + 28f * num108;
						float num131 = num129 + 28f * num108;
						if (!Main.player[num125].dead)
						{
							Color playerHeadBordersColor3 = Main.GetPlayerHeadBordersColor(Main.player[num125]);
							Main.MapPlayerRenderer.DrawPlayerHead(Main.Camera, Main.player[num125], new Vector2(num126, num127), (float)b / 255f, num108, playerHeadBordersColor3);
							if ((float)Main.mouseX >= num128 && (float)Main.mouseX <= num130 && (float)Main.mouseY >= num129 && (float)Main.mouseY <= num131)
							{
								text = Main.player[num125].name;
								if (num125 != Main.myPlayer && Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[num125].team && Main.netMode == 1 && Main.player[Main.myPlayer].HasUnityPotion() && !flag3 && !Main.cancelWormHole)
								{
									flag3 = true;
									if (!this.unityMouseOver)
									{
										SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									}
									this.unityMouseOver = true;
									playerHeadBordersColor3 = Main.OurFavoriteColor;
									Main.MapPlayerRenderer.DrawPlayerHead(Main.Camera, Main.player[num125], new Vector2(num126, num127), 1f, num108 + 0.5f, playerHeadBordersColor3);
									text = Language.GetTextValue("Game.TeleportTo", Main.player[num125].name);
									if (Main.mouseLeft && Main.mouseLeftRelease)
									{
										Main.mouseLeftRelease = false;
										Main.mapFullscreen = false;
										Main.player[Main.myPlayer].UnityTeleport(Main.player[num125].position);
										Main.player[Main.myPlayer].TakeUnityPotion();
									}
								}
							}
						}
					}
				}
				Main.cancelWormHole = false;
				Main.MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num108, ref text);
				if (!flag3 && this.unityMouseOver)
				{
					this.unityMouseOver = false;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
				PlayerInput.SetZoom_UI();
				int num132 = 10;
				int num133 = Main.screenHeight - 40;
				if (Main.showFrameRate)
				{
					num133 -= 15;
				}
				int num134 = 0;
				int num135 = 130;
				if (Main.mouseX >= num132 && Main.mouseX <= num132 + 32 && Main.mouseY >= num133 && Main.mouseY <= num133 + 30)
				{
					num135 = 255;
					num134 += 4;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.mapFullscreen = false;
					}
				}
				Main.spriteBatch.Draw(TextureAssets.MapIcon[num134].Value, new Vector2((float)num132, (float)num133), new Rectangle?(new Rectangle(0, 0, TextureAssets.MapIcon[num134].Width(), TextureAssets.MapIcon[num134].Height())), new Color(num135, num135, num135, num135), 0f, default(Vector2), 1f, 0, 0f);
				SystemLoader.PostDrawFullscreenMap(ref text);
				Main.DrawCursor(Main.DrawThickCursor(false), false);
			}
			Main.mouseX = num18;
			Main.mouseY = num19;
			float t = 3f;
			Utils.Swap<float>(ref t, ref Main.inventoryScale);
			if (text != "")
			{
				this.MouseText(text, 0, 0, -1, -1, -1, -1, 0);
			}
			Utils.Swap<float>(ref t, ref Main.inventoryScale);
			Main.spriteBatch.End();
			try
			{
				if (num13 < num7)
				{
					num += (num13 - num7) * num5;
				}
				if (num14 < num8)
				{
					num2 += (num14 - num8) * num5;
				}
				if (Main.mapFullscreen && Main.OnPostFullscreenMapDraw != null)
				{
					Main.OnPostFullscreenMapDraw(new Vector2(num, num2), num5);
				}
			}
			catch (Exception e3)
			{
				TimeLogger.DrawException(e3);
			}
			Main.spriteBatch.Begin();
			PlayerInput.SetZoom_Unscaled();
			TimeLogger.DetailedDrawTime(9);
		}

		// Token: 0x0600059F RID: 1439 RVA: 0x00125774 File Offset: 0x00123974
		private unsafe static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
		{
			Asset<Texture2D> modTexture;
			if (ModContent.RequestIfExists<Texture2D>(Main.LocalPlayer.CurrentSceneEffect.mapBackground, out modTexture, 1))
			{
				ModSceneEffect mapBackgroundSceneEffect = Main.LocalPlayer.CurrentSceneEffect.mapBackgroundSceneEffect;
				Color modMapColor = ((double)screenPosition.Y <= Main.worldSurface * 16.0) ? Main.ColorOfTheSkies : Color.White;
				if (mapBackgroundSceneEffect != null && mapBackgroundSceneEffect.MapBackgroundFullbright)
				{
					modMapColor = Color.White;
				}
				if (mapBackgroundSceneEffect != null)
				{
					mapBackgroundSceneEffect.MapBackgroundColor(ref modMapColor);
				}
				Main.spriteBatch.Draw(modTexture.Value, new Rectangle(0, 0, screenWidth, screenHeight), modMapColor);
				return;
			}
			Asset<Texture2D> asset = TextureAssets.MapBGs[0];
			int num = -1;
			Color color = Color.White;
			if (Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)] == null)
			{
				return;
			}
			int wall = (int)(*Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall);
			if (screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
			{
				num = 2;
			}
			else if (Main.player[Main.myPlayer].ZoneDungeon)
			{
				num = 4;
			}
			else if (wall == 87)
			{
				num = 13;
			}
			else if ((double)screenPosition.Y > Main.worldSurface * 16.0)
			{
				if (wall <= 86)
				{
					if (wall == 62)
					{
						goto IL_1FC;
					}
					if (wall != 86)
					{
						goto IL_204;
					}
				}
				else if (wall != 108)
				{
					switch (wall)
					{
					case 178:
					case 183:
						num = 17;
						goto IL_4DA;
					case 179:
					case 181:
					case 182:
						goto IL_204;
					case 180:
					case 184:
						num = 16;
						goto IL_4DA;
					default:
						if (wall != 263)
						{
							goto IL_204;
						}
						goto IL_1FC;
					}
				}
				num = 15;
				goto IL_4DA;
				IL_1FC:
				num = 18;
				goto IL_4DA;
				IL_204:
				num = ((!Main.player[Main.myPlayer].ZoneGlowshroom) ? ((!Main.player[Main.myPlayer].ZoneCorrupt) ? ((!Main.player[Main.myPlayer].ZoneCrimson) ? ((!Main.player[Main.myPlayer].ZoneHallow) ? ((!Main.player[Main.myPlayer].ZoneSnow) ? ((!Main.player[Main.myPlayer].ZoneJungle) ? ((!Main.player[Main.myPlayer].ZoneDesert) ? ((!Main.player[Main.myPlayer].ZoneRockLayerHeight) ? 1 : 31) : 14) : 12) : 3) : ((!Main.player[Main.myPlayer].ZoneDesert) ? ((!Main.player[Main.myPlayer].ZoneSnow) ? 21 : 35) : 41)) : ((!Main.player[Main.myPlayer].ZoneDesert) ? ((!Main.player[Main.myPlayer].ZoneSnow) ? 23 : 34) : 40)) : ((!Main.player[Main.myPlayer].ZoneDesert) ? ((!Main.player[Main.myPlayer].ZoneSnow) ? 22 : 33) : 39)) : 20);
			}
			else if (Main.player[Main.myPlayer].ZoneGlowshroom)
			{
				num = 19;
			}
			else
			{
				color = Main.ColorOfTheSkies;
				int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
				if (Main.player[Main.myPlayer].ZoneSkyHeight)
				{
					num = 32;
				}
				else if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num = ((!Main.player[Main.myPlayer].ZoneDesert) ? 5 : 36);
				}
				else if (Main.player[Main.myPlayer].ZoneCrimson)
				{
					num = ((!Main.player[Main.myPlayer].ZoneDesert) ? 6 : 37);
				}
				else if (Main.player[Main.myPlayer].ZoneHallow)
				{
					num = ((!Main.player[Main.myPlayer].ZoneDesert) ? 7 : 38);
				}
				else if ((double)(screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num2 < 380 || num2 > Main.maxTilesX - 380))
				{
					num = 10;
				}
				else if (Main.player[Main.myPlayer].ZoneSnow)
				{
					num = 11;
				}
				else if (Main.player[Main.myPlayer].ZoneJungle)
				{
					num = 8;
				}
				else if (Main.player[Main.myPlayer].ZoneDesert)
				{
					num = 9;
				}
				else if (Main.bloodMoon)
				{
					color *= 2f;
					num = 25;
				}
				else if (Main.player[Main.myPlayer].ZoneGraveyard)
				{
					num = 26;
				}
			}
			IL_4DA:
			if (num > -1)
			{
				asset = TextureAssets.MapBGs[num];
			}
			Main.spriteBatch.Draw(asset.Value, new Rectangle(0, 0, screenWidth, screenHeight), color);
		}

		// Token: 0x060005A0 RID: 1440 RVA: 0x00125C84 File Offset: 0x00123E84
		private static bool DrawPlayerDeathMarker(float X, float Y, float scale, float left, float top, float headScale, int i)
		{
			float num = (Main.player[i].lastDeathPostion.X / 16f - left) * scale;
			float num2 = (Main.player[i].lastDeathPostion.Y / 16f - top) * scale;
			num += X;
			num2 += Y;
			num2 -= 2f - scale / 5f * 2f;
			num -= 10f * scale;
			num2 -= 10f * scale;
			Main.spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num, num2), new Rectangle?(new Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height())), Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), headScale, 0, 0f);
			float num3 = num + 4f - 14f * headScale;
			float num4 = num2 + 2f - 14f * headScale;
			float num5 = num3 + 28f * headScale;
			float num6 = num4 + 28f * headScale;
			return (float)Main.mouseX >= num3 && (float)Main.mouseX <= num5 && (float)Main.mouseY >= num4 && (float)Main.mouseY <= num6;
		}

		// Token: 0x060005A1 RID: 1441 RVA: 0x00125DD7 File Offset: 0x00123FD7
		private void DrawMiscMapIcons(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
		{
			this.DrawMapIcons_PotionOfReturnHomePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
			this.DrawMapIcons_PotionOfReturnAppearAfterUsePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
			this.DrawMapIcons_LastGolfballHit(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
		}

		// Token: 0x060005A2 RID: 1442 RVA: 0x00125E0C File Offset: 0x0012400C
		private void DrawMapIcons_PotionOfReturnAppearAfterUsePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
		{
			Vector2? potionOfReturnOriginalUsePosition = Main.LocalPlayer.PotionOfReturnOriginalUsePosition;
			if (potionOfReturnOriginalUsePosition == null)
			{
				return;
			}
			Vector2? vector = potionOfReturnOriginalUsePosition;
			Vector2 vector2;
			vector2..ctor(0f, (float)(-(float)Main.LocalPlayer.height / 2));
			Vector2 vec = (vector + vector2).Value / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec.Floor();
			if (mapRect == null || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[173].Value;
				Rectangle rectangle = value.Frame(1, 1, 0, 0, 0, 0);
				spriteBatch.Draw(value, vec, new Rectangle?(rectangle), Color.White, 0f, rectangle.Size() / 2f, drawScale, 0, 0f);
				if (Utils.CenteredRectangle(vec, rectangle.Size() * drawScale).Contains(Main.MouseScreen.ToPoint()))
				{
					mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnExitPortal");
					Main.MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		// Token: 0x060005A3 RID: 1443 RVA: 0x00125F7C File Offset: 0x0012417C
		private void DrawMapIcons_PotionOfReturnHomePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
		{
			Vector2? potionOfReturnHomePosition = Main.LocalPlayer.PotionOfReturnHomePosition;
			if (potionOfReturnHomePosition == null)
			{
				return;
			}
			Vector2? vector = potionOfReturnHomePosition;
			Vector2 vector2;
			vector2..ctor(0f, (float)(-(float)Main.LocalPlayer.height / 2));
			Vector2 vec = (vector + vector2).Value / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec.Floor();
			if (mapRect == null || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[175].Value;
				Rectangle rectangle = value.Frame(1, 1, 0, 0, 0, 0);
				spriteBatch.Draw(value, vec, new Rectangle?(rectangle), Color.White, 0f, rectangle.Size() / 2f, drawScale, 0, 0f);
				if (Utils.CenteredRectangle(vec, rectangle.Size() * drawScale).Contains(Main.MouseScreen.ToPoint()))
				{
					mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnHomePortal");
					Main.MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		// Token: 0x060005A4 RID: 1444 RVA: 0x001260EC File Offset: 0x001242EC
		private void DrawMapIcons_LastGolfballHit(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
		{
			Projectile lastHitBall = Main.LocalGolfState.GetLastHitBall();
			if (lastHitBall == null)
			{
				return;
			}
			Vector2 vec = lastHitBall.Center / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec.Floor();
			if (mapRect == null || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[176].Value;
				Rectangle rectangle = value.Frame(1, 1, 0, 0, 0, 0);
				spriteBatch.Draw(value, vec, new Rectangle?(rectangle), Color.White, 0f, rectangle.Size() / 2f, drawScale, 0, 0f);
				Rectangle rectangle2 = Utils.CenteredRectangle(vec, rectangle.Size() * drawScale);
				this.LoadProjectile(lastHitBall.type);
				value = TextureAssets.Projectile[lastHitBall.type].Value;
				rectangle = value.Frame(1, 1, 0, 0, 0, 0);
				spriteBatch.Draw(value, vec, new Rectangle?(rectangle), Color.White, 0f, rectangle.Size() / 2f, drawScale, 0, 0f);
				if (rectangle2.Contains(Main.MouseScreen.ToPoint()))
				{
					mouseTextString = lastHitBall.Name;
					Main.MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		// Token: 0x060005A5 RID: 1445 RVA: 0x00126264 File Offset: 0x00124464
		public static void TriggerPing(Vector2 position)
		{
			if (!Main.dedServ)
			{
				Main.Pings.Add(position);
				if (Main.netMode == 1)
				{
					NetManager.Instance.SendToServer(NetPingModule.Serialize(position));
				}
			}
		}

		// Token: 0x060005A6 RID: 1446 RVA: 0x00126290 File Offset: 0x00124490
		private static void DrawNPCHeadFriendly(Entity theNPC, byte alpha, float headScale, SpriteEffects dir, int townHeadId, float x, float y)
		{
			Main.TownNPCHeadRenderer.DrawWithOutlines(theNPC, townHeadId, new Vector2(x, y), new Color((int)alpha, (int)alpha, (int)alpha, (int)alpha), 0f, headScale, dir);
		}

		// Token: 0x060005A7 RID: 1447 RVA: 0x001262B8 File Offset: 0x001244B8
		private static void DrawNPCHeadBoss(Entity theNPC, byte alpha, float headScale, float rotation, SpriteEffects effects, int bossHeadId, float x, float y)
		{
			Main.BossNPCHeadRenderer.DrawWithOutlines(theNPC, bossHeadId, new Vector2(x, y), new Color((int)alpha, (int)alpha, (int)alpha, (int)alpha), rotation, headScale, effects);
		}

		// Token: 0x060005A8 RID: 1448 RVA: 0x001262E0 File Offset: 0x001244E0
		private static void DrawWithOutlines(Entity entity, Texture2D tex, Vector2 position, Rectangle? rect, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects)
		{
			float num = 2f * scale;
			Color white = Color.White;
			int colorOnlyShaderIndex = ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex;
			DrawData value = new DrawData(tex, position, rect, color, rotation, origin, scale, effects, 0f);
			GameShaders.Armor.Apply(colorOnlyShaderIndex, entity, new DrawData?(value));
			Color black = Color.Black;
			black *= (float)color.A / 255f;
			black *= (float)color.A / 255f;
			Color color2 = white;
			color2 *= (float)color.A / 255f;
			color2 *= (float)color.A / 255f;
			int num2 = 2;
			Vector2 vector;
			for (int i = -num2; i <= num2; i++)
			{
				for (int j = -num2; j <= num2; j++)
				{
					if (Math.Abs(i) + Math.Abs(j) == num2)
					{
						vector = new Vector2((float)i * num, (float)j * num).RotatedBy((double)rotation, default(Vector2));
						Main.spriteBatch.Draw(tex, position + vector, rect, black, rotation, origin, scale, effects, 0f);
					}
				}
			}
			num2 = 1;
			vector = Vector2.Zero;
			for (int k = -num2; k <= num2; k++)
			{
				for (int l = -num2; l <= num2; l++)
				{
					if (Math.Abs(k) + Math.Abs(l) == num2)
					{
						vector = new Vector2((float)k * num, (float)l * num).RotatedBy((double)rotation, default(Vector2));
						Main.spriteBatch.Draw(tex, position + vector, rect, color2, rotation, origin, scale, effects, 0f);
					}
				}
			}
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			Main.spriteBatch.Draw(tex, position, rect, color, rotation, origin, scale, effects, 0f);
		}

		// Token: 0x060005A9 RID: 1449 RVA: 0x001264CC File Offset: 0x001246CC
		public static Color GetPlayerHeadBordersColor(Player plr)
		{
			if (plr.ghost || plr.dead)
			{
				return Color.Transparent;
			}
			if (plr.whoAmI == Main.myPlayer)
			{
				return Main.teamColor[plr.team];
			}
			if (plr.hostile && (plr.team != Main.LocalPlayer.team || plr.team == 0))
			{
				return Color.Transparent;
			}
			return Main.teamColor[plr.team];
		}

		// Token: 0x060005AA RID: 1450 RVA: 0x00126548 File Offset: 0x00124748
		private unsafe static string DrawMap_FindChestName(LocalizedText[] chestNames, Tile chestTile, int x, int y, int fullTileWidth = 36)
		{
			int num = Chest.FindChestByGuessing(x, y);
			if (num < 0)
			{
				return chestNames[0].Value;
			}
			if (Main.chest[num].name != "")
			{
				return chestNames[(int)(*chestTile.frameX) / fullTileWidth] + ": " + Main.chest[num].name;
			}
			return chestNames[(int)(*chestTile.frameX) / fullTileWidth].Value;
		}

		// Token: 0x060005AB RID: 1451 RVA: 0x001265B8 File Offset: 0x001247B8
		public void DrawSimpleSurfaceBackground(Vector2 areaPosition, int areaWidth, int areaHeight)
		{
			float num = (float)(Main.worldSurface + 1.0) * 16f;
			float num2 = Math.Min(areaPosition.Y + (float)areaHeight, num) - areaPosition.Y;
			float y = areaPosition.Y;
			float num3 = areaPosition.Y + num2;
			Vector4 vector = Main.ColorOfTheSkies.ToVector4();
			Vector4 value = new Color(53, 43, 243).ToVector4() * vector;
			Vector4 value2 = new Color(132, 170, 248).ToVector4() * vector;
			Color color;
			color..ctor(Vector4.Lerp(value, value2, y / num));
			Color color2;
			color2..ctor(Vector4.Lerp(value, value2, num3 / num));
			VertexColors colors = default(VertexColors);
			colors.TopLeftColor = color;
			colors.TopRightColor = color;
			colors.BottomLeftColor = color2;
			colors.BottomRightColor = color2;
			Main.tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, 0f, (float)areaWidth, num2), colors);
			float num4 = (float)areaHeight - num2;
			if (num4 > 0f)
			{
				colors.TopLeftColor = Color.Black;
				colors.TopRightColor = Color.Black;
				colors.BottomLeftColor = Color.Black;
				colors.BottomRightColor = Color.Black;
				Main.tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, num2, (float)areaWidth, num4), colors);
			}
		}

		// Token: 0x060005AC RID: 1452 RVA: 0x00126734 File Offset: 0x00124934
		public void DrawCapture(Rectangle area, CaptureSettings settings)
		{
			float[] array = Main.bgAlphaFrontLayer;
			Main.bgAlphaFrontLayer = new float[array.Length];
			float[] array2 = Main.bgAlphaFarBackLayer;
			Main.bgAlphaFarBackLayer = new float[array2.Length];
			this.UpdateBGVisibility_BackLayer(new int?(settings.Biome.BackgroundIndex), new float?(1f));
			this.UpdateBGVisibility_FrontLayer(new int?(settings.Biome.BackgroundIndex), new float?(1f));
			float[] array3 = Main.liquidAlpha.ToArray<float>();
			int holyTileCount = Main.SceneMetrics.HolyTileCount;
			Main.SceneMetrics.HolyTileCount = ((settings.Biome.BackgroundIndex == 6) ? SceneMetrics.HallowTileMax : 0);
			int num = Main.offScreenRange;
			Main.offScreenRange = 0;
			SpriteViewMatrix gameViewMatrix = Main.GameViewMatrix;
			Main.GameViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);
			Main.Rasterizer = RasterizerState.CullCounterClockwise;
			bool captureEntities = settings.CaptureEntities;
			bool captureBackground = settings.CaptureBackground;
			CaptureBiome biome = settings.Biome;
			Vector2 vector = Main.screenPosition;
			int num2 = Main.screenWidth;
			int num3 = Main.screenHeight;
			float num4 = Main.cloudAlpha;
			bool captureMech = settings.CaptureMech;
			Main.screenWidth = area.Width << 4;
			Main.screenHeight = area.Height << 4;
			Main.screenPosition = new Vector2((float)(area.X * 16), (float)(area.Y * 16));
			Main.cloudAlpha = 0f;
			for (int i = 0; i <= 10; i++)
			{
				if (i != 1)
				{
					Main.liquidAlpha[i] = ((i == biome.WaterStyle) ? 1f : 0f);
				}
			}
			int x = area.X;
			int y = area.Y;
			int num5 = area.X + Main.screenWidth / 16;
			int num6 = area.Y + Main.screenHeight / 16;
			float num7 = (float)(biome.TileColor == CaptureBiome.TileColorStyle.Mushroom).ToInt();
			Color sunColor;
			Color moonColor;
			Main.SetBackColor(new Main.InfoToSetBackColor
			{
				isInGameMenuOrIsServer = (Main.gameMenu || Main.netMode == 2),
				CorruptionBiomeInfluence = (float)(biome.TileColor == CaptureBiome.TileColorStyle.Corrupt).ToInt(),
				CrimsonBiomeInfluence = (float)(biome.TileColor == CaptureBiome.TileColorStyle.Crimson).ToInt(),
				JungleBiomeInfluence = (float)(biome.TileColor == CaptureBiome.TileColorStyle.Jungle).ToInt(),
				MushroomBiomeInfluence = num7,
				GraveyardInfluence = Main.GraveyardVisualIntensity,
				BloodMoonActive = (biome.WaterStyle == 9),
				LanternNightActive = LanternNight.LanternsUp
			}, out sunColor, out moonColor);
			Main.ApplyColorOfTheSkiesToTiles();
			Main.ColorOfSurfaceBackgroundsBase = (Main.ColorOfSurfaceBackgroundsModified = Main.ColorOfTheSkies);
			bool flag = Main.mapEnabled;
			Main.mapEnabled = false;
			Lighting.Initialize();
			Main.renderCount = 99;
			for (int j = 0; j < 4; j++)
			{
				Lighting.LightTiles(x, num5, y, num6);
			}
			Main.mapEnabled = flag;
			if ((float)(settings.Area.X * 16) <= vector.X - 16f || (float)(settings.Area.Y * 16) <= vector.Y - 16f || (float)((settings.Area.X + settings.Area.Width) * 16) >= vector.X + (float)num2 + 16f || (float)((settings.Area.Y + settings.Area.Height) * 16) >= vector.Y + (float)num3 + 16f)
			{
				for (int k = 0; k < Main.dust.Length; k++)
				{
					if (Main.dust[k].active && Main.dust[k].type == 76)
					{
						Main.dust[k].active = false;
					}
				}
			}
			Vector2 vector2 = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			int val = (int)((Main.screenPosition.X - vector2.X) / 16f - 1f);
			int val2 = (int)((Main.screenPosition.X + (float)Main.screenWidth + vector2.X) / 16f) + 2;
			int val3 = (int)((Main.screenPosition.Y - vector2.Y) / 16f - 1f);
			int val4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + vector2.Y) / 16f) + 5;
			vector2 -= Main.screenPosition;
			val = Math.Max(val, 5) - 2;
			val3 = Math.Max(val3, 5);
			val2 = Math.Min(val2, Main.maxTilesX - 5) + 2;
			val4 = Math.Min(val4, Main.maxTilesY - 5) + 4;
			Rectangle drawArea;
			drawArea..ctor(val, val3, val2 - val, val4 - val3);
			LiquidRenderer.Instance.PrepareDraw(drawArea);
			WorldGen.SectionTileFrameWithCheck(x, y, num5, num6);
			Main.SceneArea sceneArea = default(Main.SceneArea);
			if (captureBackground)
			{
				Matrix transform = Main.Transform;
				int num8 = Main.screenHeight;
				int num9 = Main.screenWidth;
				Vector2 vector3 = Main.screenPosition;
				bool flag2 = Main.mapFullscreen;
				Main.mapFullscreen = false;
				float num10 = this.scAdj;
				Vector2 vector4;
				vector4..ctor((float)num2, (float)num3);
				Vector2 vector5 = new Vector2((float)(settings.Area.Width * 16), (float)(settings.Area.Height * 16)) / vector4;
				vector5.X = Math.Max(1f, vector5.X);
				vector5.Y = Math.Max(1f, vector5.Y);
				Vector2[] array4 = new Vector2[Main.numClouds];
				for (int l = 0; l < Main.numClouds; l++)
				{
					array4[l] = Main.cloud[l].position;
					Main.cloud[l].position *= vector5;
				}
				if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
				{
					this.scAdj = 0f;
					float num11 = 2048f;
					float num12 = MathHelper.Clamp((float)settings.Area.Height * 16f / num11, 1f, 3f);
					Main.screenWidth = settings.Area.Width * 16;
					Main.screenHeight = Math.Min(2048, settings.Area.Height * 16);
					Main.screenPosition.X = (float)(settings.Area.X * 16);
					Main.screenPosition.Y = (float)(settings.Area.Y * 16);
					Main.screenPosition.Y = Main.screenPosition.Y + Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Main.worldSurface) * 16f - num11 * num12);
					transform *= Matrix.CreateScale(num12);
					transform.Translation += new Vector3((float)((settings.Area.X - area.X) * 16), (float)((settings.Area.Y - area.Y) * 16), 0f);
					transform.Translation += new Vector3(0f, Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Main.worldSurface) * 16f - num11 * num12) / num12, 0f);
				}
				else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num2 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num3 + 16f)
				{
					Main.screenPosition = vector;
					Main.screenWidth = num2;
					Main.screenHeight = num3;
					transform.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
				}
				Vector2 areaPosition;
				areaPosition..ctor((float)(area.X * 16), (float)(area.Y * 16));
				int areaWidth = area.Width * 16;
				int areaHeight = area.Height * 16;
				Main.tileBatch.Begin();
				this.DrawSimpleSurfaceBackground(areaPosition, areaWidth, areaHeight);
				Main.tileBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, null, transform);
				int num13 = Main.screenWidth;
				int num14 = Main.screenHeight;
				Vector2 zero = Vector2.Zero;
				if (num13 < 800)
				{
					int num15 = 800 - num13;
					zero.X -= (float)num15 * 0.5f;
					num13 = 800;
				}
				if (num14 < 600)
				{
					int num16 = 600 - num14;
					zero.Y -= (float)num16 * 0.5f;
					num14 = 600;
				}
				Main.SceneArea sceneArea2 = new Main.SceneArea
				{
					bgTopY = 0,
					totalWidth = (float)num13,
					totalHeight = (float)num14,
					SceneLocalScreenPositionOffset = zero
				};
				sceneArea = sceneArea2;
				if (Main.shimmerAlpha != 1f)
				{
					this.DrawStarsInBackground(sceneArea2, false);
				}
				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2.0)
				{
					this.DrawSunAndMoon(sceneArea2, moonColor, sunColor, num7);
				}
				this.DrawSurfaceBG();
				Main.spriteBatch.End();
				for (int m = 0; m < Main.numClouds; m++)
				{
					Main.cloud[m].position = array4[m];
				}
				this.scAdj = num10;
				Main.mapFullscreen = flag2;
				Main.screenWidth = num9;
				Main.screenHeight = num8;
				Main.screenPosition = vector3;
			}
			if (captureBackground)
			{
				Main.spriteBatch.Begin();
				this.DrawUnderworldBackground(true);
				Main.spriteBatch.End();
			}
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.CacheNPCDraws();
				this.CacheProjDraws();
				this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
				Main.spriteBatch.End();
			}
			if (Main.shimmerAlpha > 0f && captureBackground)
			{
				Main.spriteBatch.Begin();
				Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, Vector2.Zero, null, Color.Black * Main.shimmerAlpha, 0f, Vector2.Zero, new Vector2(Main.Camera.UnscaledSize.X + (float)(Main.offScreenRange * 2), Main.Camera.UnscaledSize.Y + (float)(Main.offScreenRange * 2)), 0, 0f);
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawBlack(true);
			Main.tileBatch.End();
			Main.spriteBatch.End();
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.DrawLiquid(true, Main.waterStyle, 1f, true);
			}
			else
			{
				this.DrawLiquid(true, Main.bloodMoon ? 9 : biome.WaterStyle, 1f, true);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			if (Main.shimmerAlpha > 0f && captureBackground)
			{
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null);
				PlayerInput.SetZoom_Unscaled();
				this.DrawStarsInBackground(sceneArea, true);
				Main.spriteBatch.End();
				PlayerInput.SetDesiredZoomContext(ZoomContext.World);
			}
			if (captureBackground)
			{
				Main.tileBatch.Begin();
				Main.spriteBatch.Begin();
				this.DrawBackground();
				Main.tileBatch.End();
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawWalls();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.DrawWoF();
				Main.spriteBatch.End();
			}
			if (Main.drawBackGore && captureEntities)
			{
				Main.spriteBatch.Begin();
				this.DrawGoreBehind();
				Main.spriteBatch.End();
				Main.drawBackGore = true;
			}
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
				MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
				Main.spriteBatch.End();
			}
			bool flag3 = false;
			bool intoRenderTargets = false;
			bool intoRenderTargets2 = false;
			this.TilesRenderer.SpecificHacksForCapture();
			this.TilesRenderer.PreDrawTiles(false, flag3, intoRenderTargets2);
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
			int waterStyleOverride = Main.bloodMoon ? 9 : biome.WaterStyle;
			if (biome == null)
			{
				this.DrawTiles(false, flag3, intoRenderTargets, -1);
			}
			else
			{
				this.DrawTiles(false, flag3, intoRenderTargets, waterStyleOverride);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawTileEntities(false, flag3, intoRenderTargets);
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				Main.tileBatch.Begin();
				this.waterfallManager.FindWaterfalls(true);
				this.waterfallManager.Draw(Main.spriteBatch);
				Main.tileBatch.End();
				Main.spriteBatch.End();
			}
			if (captureEntities)
			{
				this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
				Main.spriteBatch.Begin();
				this.DrawNPCs(true);
				Main.spriteBatch.End();
			}
			this.TilesRenderer.PreDrawTiles(true, flag3, intoRenderTargets2);
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.DrawTiles(true, flag3, intoRenderTargets, -1);
			}
			else
			{
				this.DrawTiles(true, flag3, intoRenderTargets, waterStyleOverride);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawTileEntities(true, flag3, intoRenderTargets);
			if (captureEntities)
			{
				this.DrawPlayers_BehindNPCs();
				this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
				Main.spriteBatch.Begin();
				this.DrawNPCs(false);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
				Main.spriteBatch.End();
				this.DrawSuperSpecialProjectiles(this.DrawCacheFirstFractals, true);
				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
				this.DrawProjectiles();
				this.DrawPlayers_AfterProjectiles();
				this.DrawCachedProjs(this.DrawCacheProjsOverPlayers, true);
				Main.spriteBatch.Begin();
				this.DrawCachedNPCs(this.DrawCacheNPCsOverPlayers, false);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawItems();
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawRain();
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawGore();
				Main.spriteBatch.End();
				this.DrawDust();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.DrawLiquid(false, Main.waterStyle, 1f, true);
			}
			else
			{
				this.DrawLiquid(false, biome.WaterStyle, 1f, true);
			}
			if (captureMech)
			{
				this.DrawWires();
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, true);
			if (Main.mapEnabled)
			{
				Main.spriteBatch.Begin();
				for (int n = area.X; n < area.X + area.Width; n++)
				{
					for (int num17 = area.Y; num17 < area.Y + area.Height; num17++)
					{
						if (!Main.Map.IsRevealed(n, num17))
						{
							Main.spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2((float)n * 16f, (float)num17 * 16f) - Main.screenPosition, Color.Black);
						}
					}
				}
				Main.spriteBatch.End();
			}
			Main.renderCount = 99;
			Main.screenWidth = num2;
			Main.screenHeight = num3;
			Main.screenPosition = vector;
			Main.liquidAlpha = array3;
			Main.offScreenRange = num;
			Main.cloudAlpha = num4;
			Main.bgAlphaFrontLayer = array;
			Main.bgAlphaFarBackLayer = array2;
			Main.SceneMetrics.HolyTileCount = holyTileCount;
			Lighting.Initialize();
			Main.GameViewMatrix = gameViewMatrix;
		}

		// Token: 0x060005AD RID: 1453 RVA: 0x001277C8 File Offset: 0x001259C8
		protected void RenderTiles()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			this.RenderBlack();
			base.GraphicsDevice.SetRenderTarget(this.tileTarget);
			base.GraphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.TilesRenderer.PreDrawTiles(true, false, true);
				this.DrawTiles(true, false, true, -1);
			}
			catch (Exception e)
			{
				if (!Main.ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawTileEntities(true, false, true);
			TimeLogger.DetailedDrawTime(28);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		// Token: 0x060005AE RID: 1454 RVA: 0x00127888 File Offset: 0x00125A88
		protected void RenderTiles2()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.tile2Target);
			base.GraphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.TilesRenderer.PreDrawTiles(false, false, true);
				this.DrawTiles(false, false, true, -1);
			}
			catch (Exception e)
			{
				if (!Main.ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawTileEntities(false, false, true);
			TimeLogger.DetailedDrawTime(29);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		// Token: 0x060005AF RID: 1455 RVA: 0x00127944 File Offset: 0x00125B44
		protected void RenderWater()
		{
			if (!Main.drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(Main.waterTarget);
				base.GraphicsDevice.Clear(Color.Transparent);
				Main.spriteBatch.Begin();
				try
				{
					this.DrawWaters(false);
				}
				catch
				{
				}
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				TimeLogger.DetailedDrawTime(31);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		// Token: 0x060005B0 RID: 1456 RVA: 0x001279C0 File Offset: 0x00125BC0
		public static int CalculateWaterStyle(bool ignoreFountains = false)
		{
			if (Main.SceneMetrics.ActiveFountainColor >= 0 && !ignoreFountains)
			{
				return Main.SceneMetrics.ActiveFountainColor;
			}
			if (Main.bloodMoon && !Main.dayTime)
			{
				return 9;
			}
			switch (Main.bgStyle)
			{
			case 1:
				return 2;
			case 2:
				if (Main.remixWorld)
				{
					return 6;
				}
				if ((double)(Main.player[Main.myPlayer].position.Y / 16f) > Main.worldSurface)
				{
					return 12;
				}
				return 6;
			case 3:
				return 3;
			case 4:
				return 13;
			case 5:
				if (Main.SceneMetrics.EvilTileCount > Main.SceneMetrics.HolyTileCount && Main.SceneMetrics.EvilTileCount > Main.SceneMetrics.BloodTileCount)
				{
					return 2;
				}
				if (Main.SceneMetrics.HolyTileCount > Main.SceneMetrics.BloodTileCount)
				{
					return 4;
				}
				return 10;
			case 6:
				return 4;
			case 7:
				return 5;
			case 8:
				return 10;
			default:
			{
				int waterStyle;
				SceneEffectPriority priority;
				LoaderManager.Get<WaterStylesLoader>().ChooseStyle(out waterStyle, out priority);
				if (priority >= SceneEffectPriority.BiomeLow)
				{
					return waterStyle;
				}
				if (Main.remixWorld)
				{
					if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer)
					{
						return 7;
					}
					if ((double)(Main.screenPosition.Y / 16f) > Main.worldSurface)
					{
						return 8;
					}
				}
				else if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 40.0)
				{
					if (Main.player[Main.myPlayer].ZoneGlowshroom)
					{
						return 7;
					}
					return 8;
				}
				else if ((double)(Main.screenPosition.Y / 16f) > Main.worldSurface)
				{
					return 7;
				}
				return 0;
			}
			}
		}

		// Token: 0x060005B1 RID: 1457 RVA: 0x00127B56 File Offset: 0x00125D56
		public static bool IsLiquidStyleWater(int liquidStyle)
		{
			if (liquidStyle != 1)
			{
				return liquidStyle != 11;
			}
			return liquidStyle >= 15;
		}

		// Token: 0x060005B2 RID: 1458 RVA: 0x00127B70 File Offset: 0x00125D70
		private void DrawWaters(bool isBackground = false)
		{
			Main.drewLava = false;
			if (!isBackground)
			{
				Main.waterStyle = Main.CalculateWaterStyle(false);
				for (int i = 0; i < 15; i++)
				{
					if (Main.IsLiquidStyleWater(Main.waterStyle))
					{
						if (Main.waterStyle != i)
						{
							Main.liquidAlpha[i] = Math.Max(Main.liquidAlpha[i] - 0.2f, 0f);
						}
						else
						{
							Main.liquidAlpha[i] = Math.Min(Main.liquidAlpha[i] + 0.2f, 1f);
						}
					}
				}
				LoaderManager.Get<WaterStylesLoader>().UpdateLiquidAlphas();
			}
			if (!Main.drawToScreen && !isBackground)
			{
				Vector2 vector = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				int val = (int)((Main.Camera.ScaledPosition.X - vector.X) / 16f - 1f);
				int val2 = (int)((Main.Camera.ScaledPosition.X + Main.Camera.ScaledSize.X + vector.X) / 16f) + 2;
				int val3 = (int)((Main.Camera.ScaledPosition.Y - vector.Y) / 16f - 1f);
				int val4 = (int)((Main.Camera.ScaledPosition.Y + Main.Camera.ScaledSize.Y + vector.Y) / 16f) + 5;
				val = Math.Max(val, 5) - 2;
				val3 = Math.Max(val3, 5);
				val2 = Math.Min(val2, Main.maxTilesX - 5) + 2;
				val4 = Math.Min(val4, Main.maxTilesY - 5) + 4;
				Rectangle drawArea;
				drawArea..ctor(val, val3, val2 - val, val4 - val3);
				LiquidRenderer.Instance.PrepareDraw(drawArea);
			}
			bool flag = false;
			for (int j = 0; j < LoaderManager.Get<WaterStylesLoader>().TotalCount; j++)
			{
				if (Main.IsLiquidStyleWater(j) && Main.liquidAlpha[j] > 0f && j != Main.waterStyle)
				{
					this.DrawLiquid(isBackground, j, isBackground ? 1f : Main.liquidAlpha[j], false);
					flag = true;
				}
			}
			this.DrawLiquid(isBackground, Main.waterStyle, flag ? Main.liquidAlpha[Main.waterStyle] : 1f, true);
		}

		// Token: 0x060005B3 RID: 1459 RVA: 0x00127DA8 File Offset: 0x00125FA8
		protected internal void DrawLiquid(bool bg = false, int waterStyle = 0, float Alpha = 1f, bool drawSinglePassLiquids = true)
		{
			if (!Lighting.NotRetro)
			{
				this.oldDrawWater(bg, waterStyle, Alpha);
				return;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 drawOffset = (Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange)) - Main.screenPosition;
			if (bg)
			{
				this.TilesRenderer.DrawLiquidBehindTiles(waterStyle);
			}
			LiquidRenderer.Instance.DrawNormalLiquids(Main.spriteBatch, drawOffset, waterStyle, Alpha, bg);
			if (drawSinglePassLiquids)
			{
				LiquidRenderer.Instance.DrawShimmer(Main.spriteBatch, drawOffset, bg);
			}
			if (!bg)
			{
				TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
			}
		}

		// Token: 0x060005B4 RID: 1460 RVA: 0x00127E4C File Offset: 0x0012604C
		public unsafe static void DrawTileInWater(Vector2 drawOffset, int x, int y)
		{
			if (Main.tile[x, y] != null && Main.tile[x, y].active() && *Main.tile[x, y].type == 518)
			{
				Main.instance.LoadTiles((int)(*Main.tile[x, y].type));
				Tile tile = Main.tile[x, y];
				int num = (int)(*tile.liquid / 16);
				num -= 3;
				if (WorldGen.SolidTile(x, y - 1, false) && num > 8)
				{
					num = 8;
				}
				Rectangle value;
				value..ctor((int)(*tile.frameX), (int)(*tile.frameY), 16, 16);
				Main.spriteBatch.Draw(TextureAssets.Tile[(int)(*tile.type)].Value, new Vector2((float)(x * 16), (float)(y * 16 - num)) + drawOffset, new Rectangle?(value), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, 0, 0f);
			}
		}

		// Token: 0x060005B5 RID: 1461 RVA: 0x00127F6C File Offset: 0x0012616C
		public unsafe void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			float num = 0f;
			float num2 = 99999f;
			float num3 = 99999f;
			int num4 = -1;
			int num5 = -1;
			Vector2 vector;
			vector..ctor((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				vector = Vector2.Zero;
			}
			new Color[4];
			int num6 = (int)(255f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			float num33 = Main.gfxQuality;
			float num34 = Main.gfxQuality;
			int num7 = (int)((Main.screenPosition.X - vector.X) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.X + (float)Main.screenWidth + vector.X) / 16f) + 2;
			int num9 = (int)((Main.screenPosition.Y - vector.Y) / 16f - 1f);
			int num10 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + vector.Y) / 16f) + 5;
			if (num7 < 5)
			{
				num7 = 5;
			}
			if (num8 > Main.maxTilesX - 5)
			{
				num8 = Main.maxTilesX - 5;
			}
			if (num9 < 5)
			{
				num9 = 5;
			}
			if (num10 > Main.maxTilesY - 5)
			{
				num10 = Main.maxTilesY - 5;
			}
			for (int i = num9; i < num10 + 4; i++)
			{
				for (int j = num7 - 2; j < num8 + 2; j++)
				{
					if (Main.tile[j, i] == null)
					{
						Main.tile[j, i] = default(Tile);
					}
					if (*Main.tile[j, i].liquid > 0 && (!Main.tile[j, i].nactive() || !Main.tileSolid[(int)(*Main.tile[j, i].type)] || Main.tileSolidTop[(int)(*Main.tile[j, i].type)]) && (Lighting.Brightness(j, i) > 0f || bg))
					{
						Color color = Lighting.GetColor(j, i);
						float num11 = (float)(256 - (int)(*Main.tile[j, i].liquid));
						num11 /= 32f;
						bool flag = false;
						int num12 = 0;
						if (Main.tile[j, i].lava())
						{
							if (Main.drewLava)
							{
								goto IL_12EC;
							}
							float num13 = Math.Abs((float)(j * 16 + 8) - (Main.screenPosition.X + (float)(Main.screenWidth / 2)));
							float num14 = Math.Abs((float)(i * 16 + 8) - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
							if (num13 < (float)(Main.screenWidth * 2) && num14 < (float)(Main.screenHeight * 2))
							{
								float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
								float num16 = 1f - num15 / ((float)Main.screenWidth * 0.75f);
								if (num16 > 0f)
								{
									num += num16;
								}
							}
							if (num13 < num2)
							{
								num2 = num13;
								num4 = j * 16 + 8;
							}
							if (num14 < num3)
							{
								num3 = num13;
								num5 = i * 16 + 8;
							}
							num12 = 1;
						}
						else if (Main.tile[j, i].honey())
						{
							num12 = 11;
						}
						else if (Main.tile[j, i].shimmer())
						{
							num12 = 14;
							flag = true;
						}
						if (num12 == 0)
						{
							num12 = Style;
						}
						if ((num12 != 1 && num12 != 11) || !Main.drewLava)
						{
							float num17 = 0.5f;
							if (bg)
							{
								num17 = 1f;
							}
							if (num12 != 1 && num12 != 11)
							{
								num17 *= Alpha;
							}
							Main.DrawTileInWater(-Main.screenPosition + vector, j, i);
							Vector2 vector2;
							vector2..ctor((float)(j * 16), (float)(i * 16 + (int)num11 * 2));
							Rectangle value;
							value..ctor(0, 0, 16, 16 - (int)num11 * 2);
							bool flag2 = true;
							if (*Main.tile[j, i + 1].liquid < 245 && (!Main.tile[j, i + 1].nactive() || !Main.tileSolid[(int)(*Main.tile[j, i + 1].type)] || Main.tileSolidTop[(int)(*Main.tile[j, i + 1].type)]))
							{
								float num18 = (float)(256 - (int)(*Main.tile[j, i + 1].liquid));
								num18 /= 32f;
								num17 = 0.5f * (8f - num11) / 4f;
								if ((double)num17 > 0.55)
								{
									num17 = 0.55f;
								}
								if ((double)num17 < 0.35)
								{
									num17 = 0.35f;
								}
								float num19 = num11 / 2f;
								if (*Main.tile[j, i + 1].liquid < 200)
								{
									if (bg)
									{
										goto IL_12EC;
									}
									if (*Main.tile[j, i - 1].liquid > 0 && *Main.tile[j, i - 1].liquid > 0)
									{
										value..ctor(0, 4, 16, 16);
										num17 = 0.5f;
									}
									else if (*Main.tile[j, i - 1].liquid > 0)
									{
										vector2..ctor((float)(j * 16), (float)(i * 16 + 4));
										value..ctor(0, 4, 16, 12);
										num17 = 0.5f;
									}
									else if (*Main.tile[j, i + 1].liquid > 0)
									{
										vector2..ctor((float)(j * 16), (float)(i * 16 + (int)num11 * 2 + (int)num18 * 2));
										value..ctor(0, 4, 16, 16 - (int)num11 * 2);
									}
									else
									{
										vector2..ctor((float)(j * 16 + (int)num19), (float)(i * 16 + (int)num19 * 2 + (int)num18 * 2));
										value..ctor(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
									}
								}
								else
								{
									num17 = 0.5f;
									value..ctor(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
								}
							}
							else if (*Main.tile[j, i - 1].liquid > 32)
							{
								value..ctor(0, 4, value.Width, value.Height);
							}
							else if (num11 < 1f && Main.tile[j, i - 1].nactive() && Main.tileSolid[(int)(*Main.tile[j, i - 1].type)] && !Main.tileSolidTop[(int)(*Main.tile[j, i - 1].type)])
							{
								vector2..ctor((float)(j * 16), (float)(i * 16));
								value..ctor(0, 4, 16, 16);
							}
							else
							{
								int k = i + 1;
								while (k < i + 6 && (!Main.tile[j, k].nactive() || !Main.tileSolid[(int)(*Main.tile[j, k].type)] || Main.tileSolidTop[(int)(*Main.tile[j, k].type)]))
								{
									if (*Main.tile[j, k].liquid < 200)
									{
										flag2 = false;
										break;
									}
									k++;
								}
								if (!flag2)
								{
									num17 = 0.5f;
									value..ctor(0, 4, 16, 16);
								}
								else if (*Main.tile[j, i - 1].liquid > 0)
								{
									value..ctor(0, 2, value.Width, value.Height);
								}
							}
							if ((color.R > 20 || color.B > 20 || color.G > 20) && value.Y < 4)
							{
								int num20 = (int)color.R;
								if ((int)color.G > num20)
								{
									num20 = (int)color.G;
								}
								if ((int)color.B > num20)
								{
									num20 = (int)color.B;
								}
								num20 /= 30;
								if (Main.rand.Next(20000) < num20)
								{
									Color newColor;
									newColor..ctor(255, 255, 255);
									if (Main.tile[j, i].honey())
									{
										newColor..ctor(255, 255, 50);
									}
									int num21 = Dust.NewDust(new Vector2((float)(j * 16), vector2.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
									Main.dust[num21].velocity *= 0f;
								}
							}
							if (Main.tile[j, i].honey())
							{
								num17 *= 1.6f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
							}
							if (Main.tile[j, i].lava())
							{
								num17 *= 1.8f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
								if (base.IsActive && !Main.gamePaused && Dust.lavaBubbles < 200)
								{
									if (*Main.tile[j, i].liquid > 200 && Main.rand.Next(700) == 0)
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35, 0f, 0f, 0, default(Color), 1f);
									}
									if (value.Y == 0 && Main.rand.Next(350) == 0)
									{
										int num22 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Color), 1.5f);
										Main.dust[num22].velocity *= 0.8f;
										Dust dust = Main.dust[num22];
										dust.velocity.X = dust.velocity.X * 2f;
										Dust dust2 = Main.dust[num22];
										dust2.velocity.Y = dust2.velocity.Y - (float)Main.rand.Next(1, 7) * 0.1f;
										if (Main.rand.Next(10) == 0)
										{
											Dust dust3 = Main.dust[num22];
											dust3.velocity.Y = dust3.velocity.Y * (float)Main.rand.Next(2, 5);
										}
										Main.dust[num22].noGravity = true;
									}
								}
							}
							float num23 = (float)color.R * num17;
							float num24 = (float)color.G * num17;
							float num25 = (float)color.B * num17;
							float num26 = (float)color.A * num17;
							color..ctor((int)((byte)num23), (int)((byte)num24), (int)((byte)num25), (int)((byte)num26));
							if (flag)
							{
								color..ctor(color.ToVector4() * LiquidRenderer.GetShimmerBaseColor((float)j, (float)i));
							}
							if (Lighting.NotRetro && !bg)
							{
								Color color2 = color;
								if (num12 != 1 && ((double)color2.R > (double)num6 * 0.6 || (double)color2.G > (double)num6 * 0.65 || (double)color2.B > (double)num6 * 0.7))
								{
									for (int l = 0; l < 4; l++)
									{
										int num27 = 0;
										int num28 = 0;
										int width = 8;
										int height = 8;
										Color color3 = color2;
										Color color4 = Lighting.GetColor(j, i);
										if (l == 0)
										{
											color4 = Lighting.GetColor(j - 1, i - 1);
											if (value.Height < 8)
											{
												height = value.Height;
											}
										}
										if (l == 1)
										{
											color4 = Lighting.GetColor(j + 1, i - 1);
											num27 = 8;
											if (value.Height < 8)
											{
												height = value.Height;
											}
										}
										if (l == 2)
										{
											color4 = Lighting.GetColor(j - 1, i + 1);
											num28 = 8;
											height = 8 - (16 - value.Height);
										}
										if (l == 3)
										{
											color4 = Lighting.GetColor(j + 1, i + 1);
											num27 = 8;
											num28 = 8;
											height = 8 - (16 - value.Height);
										}
										num23 = (float)color4.R * num17;
										num24 = (float)color4.G * num17;
										num25 = (float)color4.B * num17;
										num26 = (float)color4.A * num17;
										color4..ctor((int)((byte)num23), (int)((byte)num24), (int)((byte)num25), (int)((byte)num26));
										color3.R = (color2.R * 3 + color4.R * 2) / 5;
										color3.G = (color2.G * 3 + color4.G * 2) / 5;
										color3.B = (color2.B * 3 + color4.B * 2) / 5;
										color3.A = (color2.A * 3 + color4.A * 2) / 5;
										if (flag)
										{
											color3..ctor(color3.ToVector4() * LiquidRenderer.GetShimmerBaseColor((float)j, (float)i));
										}
										Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + new Vector2((float)num27, (float)num28) + vector, new Rectangle?(new Rectangle(value.X + num27, value.Y + num28, width, height)), color3, 0f, default(Vector2), 1f, 0, 0f);
										if (flag)
										{
											Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + new Vector2((float)num27, (float)num28) + vector, new Rectangle?(new Rectangle(value.X + num27, value.Y + num28 + 36, width, height)), LiquidRenderer.GetShimmerGlitterColor(flag2, (float)j, (float)i), 0f, default(Vector2), 1f, 0, 0f);
										}
									}
								}
								else
								{
									Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(value), color, 0f, default(Vector2), 1f, 0, 0f);
									if (flag)
									{
										value.Y += 36;
										Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(value), LiquidRenderer.GetShimmerGlitterColor(flag2, (float)j, (float)i), 0f, default(Vector2), 1f, 0, 0f);
									}
								}
							}
							else
							{
								if (value.Y < 4)
								{
									value.X += (int)(Main.wFrame * 18f);
								}
								Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(value), color, 0f, default(Vector2), 1f, 0, 0f);
								if (flag)
								{
									value.Y += 36;
									Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(value), LiquidRenderer.GetShimmerGlitterColor(flag2, (float)j, (float)i), 0f, default(Vector2), 1f, 0, 0f);
								}
							}
							if (Main.tile[j, i + 1].halfBrick())
							{
								color = Lighting.GetColor(j, i + 1);
								num23 = (float)color.R * num17;
								num24 = (float)color.G * num17;
								num25 = (float)color.B * num17;
								num26 = (float)color.A * num17;
								color..ctor((int)((byte)num23), (int)((byte)num24), (int)((byte)num25), (int)((byte)num26));
								if (flag)
								{
									color..ctor(color.ToVector4() * LiquidRenderer.GetShimmerBaseColor((float)j, (float)i));
								}
								vector2..ctor((float)(j * 16), (float)(i * 16 + 16));
								Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(new Rectangle(0, 4, 16, 8)), color, 0f, default(Vector2), 1f, 0, 0f);
								if (flag)
								{
									Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(new Rectangle(0, 40, 16, 8)), LiquidRenderer.GetShimmerGlitterColor(flag2, (float)j, (float)i), 0f, default(Vector2), 1f, 0, 0f);
								}
								float num29 = 6f;
								float num30 = 0.75f;
								if (num12 == 1 || num12 == 11)
								{
									num29 = 4f;
									num30 = 0.5f;
								}
								int m = 0;
								while ((float)m < num29)
								{
									int num31 = i + 2 + m;
									if (WorldGen.SolidTile(j, num31, false))
									{
										break;
									}
									float num32 = 1f - (float)m / num29;
									num32 *= num30;
									vector2..ctor((float)(j * 16), (float)(num31 * 16 - 2));
									Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(new Rectangle(0, 18, 16, 16)), color * num32, 0f, default(Vector2), 1f, 0, 0f);
									if (flag)
									{
										Main.spriteBatch.Draw(TextureAssets.Liquid[num12].Value, vector2 - Main.screenPosition + vector, new Rectangle?(new Rectangle(0, 54, 16, 16)), LiquidRenderer.GetShimmerGlitterColor(flag2, (float)j, (float)i) * num32, 0f, default(Vector2), 1f, 0, 0f);
									}
									m++;
								}
							}
						}
					}
					IL_12EC:;
				}
			}
			if (!Main.drewLava)
			{
				Main.ambientLavaX = (float)num4;
				Main.ambientLavaY = (float)num5;
				Main.ambientLavaStrength = num;
			}
			Main.drewLava = true;
		}

		// Token: 0x060005B6 RID: 1462 RVA: 0x001292AC File Offset: 0x001274AC
		protected unsafe bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			if (tile.active())
			{
				if ((int)(*tile.type) < TileID.Sets.DrawsWalls.Length && TileID.Sets.DrawsWalls[(int)(*tile.type)])
				{
					return false;
				}
				if (Main.tileSolid[(int)(*tile.type)] && !Main.tileSolidTop[(int)(*tile.type)])
				{
					int frameX = (int)(*tile.frameX);
					int frameY = (int)(*tile.frameY);
					if (Main.tileLargeFrames[(int)(*tile.type)] > 0)
					{
						if (frameY == 18 || frameY == 108)
						{
							if (frameX >= 18 && frameX <= 54)
							{
								return true;
							}
							if (frameX >= 108 && frameX <= 144)
							{
								return true;
							}
						}
					}
					else if (frameY == 18)
					{
						if (frameX >= 18 && frameX <= 54)
						{
							return true;
						}
						if (frameX >= 108 && frameX <= 144)
						{
							return true;
						}
					}
					else if (frameY >= 90 && frameY <= 196)
					{
						if (frameX <= 70)
						{
							return true;
						}
						if (frameX >= 144 && frameX <= 232)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x060005B7 RID: 1463 RVA: 0x00129414 File Offset: 0x00127614
		protected unsafe void DrawBlack(bool force = false)
		{
			if (Main.shimmerAlpha == 1f)
			{
				return;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 vector = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			int num = (int)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
			float num2 = (float)((double)num * 0.4) / 255f;
			if (Lighting.Mode == LightMode.Retro)
			{
				num2 = (float)(Main.tileColor.R - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			else if (Lighting.Mode == LightMode.Trippy)
			{
				num2 = (float)(num - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			Point screenOverdrawOffset = Main.GetScreenOverdrawOffset();
			Point point;
			point..ctor(-Main.offScreenRange / 16 + screenOverdrawOffset.X, -Main.offScreenRange / 16 + screenOverdrawOffset.Y);
			int num3 = (int)((Main.screenPosition.X - vector.X) / 16f - 1f) + point.X;
			int num4 = (int)((Main.screenPosition.X + (float)Main.screenWidth + vector.X) / 16f) + 2 - point.X;
			int num5 = (int)((Main.screenPosition.Y - vector.Y) / 16f - 1f) + point.Y;
			int num6 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + vector.Y) / 16f) + 5 - point.Y;
			if (num3 < 0)
			{
				num3 = point.X;
			}
			if (num4 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX - point.X;
			}
			if (num5 < 0)
			{
				num5 = point.Y;
			}
			if (num6 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY - point.Y;
			}
			if (!force)
			{
				if (num5 < Main.maxTilesY / 2)
				{
					num6 = Math.Min(num6, (int)Main.worldSurface + 1);
					num5 = Math.Min(num5, (int)Main.worldSurface + 1);
				}
				else
				{
					num6 = Math.Max(num6, Main.UnderworldLayer);
					num5 = Math.Max(num5, Main.UnderworldLayer);
				}
			}
			bool flag = Main.ShouldShowInvisibleWalls();
			for (int i = num5; i < num6; i++)
			{
				bool flag2 = i >= Main.UnderworldLayer;
				if (flag2)
				{
					num2 = 0.2f;
				}
				for (int j = num3; j < num4; j++)
				{
					int num7 = j;
					while (j < num4)
					{
						if (!WorldGen.InWorld(j, i, 0))
						{
							return;
						}
						if (Main.tile[j, i] == null)
						{
							Main.tile[j, i] = default(Tile);
						}
						Tile tile = Main.tile[j, i];
						float num8 = Lighting.Brightness(j, i);
						num8 = (float)Math.Floor((double)(num8 * 255f)) / 255f;
						byte b = *tile.liquid;
						bool flag5 = num8 <= num2 && ((!flag2 && b < 250) || WorldGen.SolidTile(tile) || (b >= 200 && num8 == 0f));
						bool flag3 = tile.active() && Main.tileBlockLight[(int)(*tile.type)] && (!tile.invisibleBlock() || flag);
						bool flag4 = !WallID.Sets.Transparent[(int)(*tile.wall)] && (!tile.invisibleWall() || flag);
						if (!flag5 || (!flag4 && !flag3) || (!Main.drawToScreen && LiquidRenderer.Instance.HasFullWater(j, i) && *tile.wall == 0 && !tile.halfBrick() && (double)i > Main.worldSurface))
						{
							break;
						}
						j++;
					}
					if (j - num7 > 0)
					{
						Main.spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2((float)(num7 << 4), (float)(i << 4)) - Main.screenPosition + vector, new Rectangle?(new Rectangle(0, 0, j - num7 << 4, 16)), Color.Black);
					}
				}
			}
			TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
		}

		// Token: 0x060005B8 RID: 1464 RVA: 0x00129859 File Offset: 0x00127A59
		public static bool ShouldShowInvisibleWalls()
		{
			return Main.SceneMetrics.EchoMonolith || Main.LocalPlayer.CanSeeInvisibleBlocks;
		}

		// Token: 0x060005B9 RID: 1465 RVA: 0x00129874 File Offset: 0x00127A74
		protected void RenderBlack()
		{
			if (!Main.drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(this.blackTarget);
				base.GraphicsDevice.DepthStencilState = new DepthStencilState
				{
					DepthBufferEnable = true
				};
				base.GraphicsDevice.Clear(Color.Transparent);
				Main.spriteBatch.Begin();
				this.DrawBlack(false);
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				TimeLogger.DetailedDrawTime(30);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		// Token: 0x060005BA RID: 1466 RVA: 0x001298F3 File Offset: 0x00127AF3
		protected void DrawWalls()
		{
			this.WallsRenderer.DrawWalls();
		}

		// Token: 0x060005BB RID: 1467 RVA: 0x00129900 File Offset: 0x00127B00
		protected void RenderWalls()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.wallTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend);
			Main.tileBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawWalls();
					goto IL_76;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_76;
				}
			}
			this.DrawWalls();
			IL_76:
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(32);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		// Token: 0x060005BC RID: 1468 RVA: 0x001299C0 File Offset: 0x00127BC0
		protected void ReleaseTargets()
		{
			try
			{
				if (!Main.dedServ)
				{
					Main.offScreenRange = 0;
					Main.targetSet = false;
					if (Main.waterTarget != null)
					{
						Main.waterTarget.Dispose();
					}
					if (this.backWaterTarget != null)
					{
						this.backWaterTarget.Dispose();
					}
					if (this.blackTarget != null)
					{
						this.blackTarget.Dispose();
					}
					if (this.tileTarget != null)
					{
						this.tileTarget.Dispose();
					}
					if (this.tile2Target != null)
					{
						this.tile2Target.Dispose();
					}
					if (this.wallTarget != null)
					{
						this.wallTarget.Dispose();
					}
					if (Main.screenTarget != null)
					{
						Main.screenTarget.Dispose();
					}
					if (Main.screenTargetSwap != null)
					{
						Main.screenTargetSwap.Dispose();
					}
					if (this.backgroundTarget != null)
					{
						this.backgroundTarget.Dispose();
					}
					if (Main.OnRenderTargetsReleased != null)
					{
						Main.OnRenderTargetsReleased();
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x060005BD RID: 1469 RVA: 0x00129AB0 File Offset: 0x00127CB0
		protected bool checkMap(int i, int j)
		{
			if (this.mapTarget[i, j] == null || this.mapTarget[i, j].IsDisposed)
			{
				Main.initMap[i, j] = false;
			}
			if (!Main.initMap[i, j])
			{
				try
				{
					int width = Main.textureMaxWidth;
					int height = Main.textureMaxHeight;
					if (i == Main.mapTargetX - 1)
					{
						width = 400;
					}
					if (j == Main.mapTargetY - 1)
					{
						height = 600;
					}
					this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0, 0, 1);
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < Main.mapTargetX; k++)
					{
						for (int l = 0; l < Main.mapTargetY; l++)
						{
							try
							{
								Main.initMap[k, l] = false;
								this.mapTarget[k, l].Dispose();
							}
							catch
							{
							}
						}
					}
					return false;
				}
				Main.initMap[i, j] = true;
				return true;
			}
			return true;
		}

		// Token: 0x060005BE RID: 1470 RVA: 0x00129BD8 File Offset: 0x00127DD8
		protected void InitMap()
		{
			int num = Main.mapTargetX;
			int num2 = Main.mapTargetY;
			if (!Main.mapEnabled)
			{
				return;
			}
			try
			{
				for (int i = 0; i < num; i++)
				{
					for (int j = 0; j < num2; j++)
					{
						this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Main.textureMaxWidth, Main.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0, 0, 1);
					}
				}
				Main.mapInit = true;
			}
			catch
			{
				Main.mapEnabled = false;
				for (int k = 0; k < num; k++)
				{
					for (int l = 0; l < num2; l++)
					{
						try
						{
							if (this.mapTarget[k, l] != null)
							{
								this.mapTarget[k, l].Dispose();
							}
						}
						catch
						{
						}
					}
				}
			}
		}

		// Token: 0x060005BF RID: 1471 RVA: 0x00129CC0 File Offset: 0x00127EC0
		protected void InitTargets()
		{
			if (!Main.PreventUpdatingTargets)
			{
				this.UpdateDisplaySettings();
			}
			this.InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
		}

		// Token: 0x060005C0 RID: 1472 RVA: 0x00129CF8 File Offset: 0x00127EF8
		protected void EnsureRenderTargetContent()
		{
			if (Main.waterTarget == null || Main.waterTarget.IsContentLost || this.backWaterTarget == null || this.backWaterTarget.IsContentLost || this.blackTarget == null || this.blackTarget.IsContentLost || this.tileTarget == null || this.tileTarget.IsContentLost || this.tile2Target == null || this.tile2Target.IsContentLost || this.wallTarget == null || this.wallTarget.IsContentLost || this.backgroundTarget == null || this.backgroundTarget.IsContentLost || Main.screenTarget == null || Main.screenTarget.IsContentLost || Main.screenTargetSwap == null || Main.screenTargetSwap.IsContentLost)
			{
				this.InitTargets();
			}
		}

		// Token: 0x060005C1 RID: 1473 RVA: 0x00129DD4 File Offset: 0x00127FD4
		protected void InitTargets(int width, int height)
		{
			this.ReleaseTargets();
			Main.offScreenRange = 192;
			if (width + Main.offScreenRange * 2 > Main._renderTargetMaxSize)
			{
				Main.offScreenRange = (Main._renderTargetMaxSize - width) / 2;
			}
			width += Main.offScreenRange * 2;
			height += Main.offScreenRange * 2;
			try
			{
				if (!Main.dedServ)
				{
					Main.targetSet = true;
					Main.waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					Main.screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					Main.screenTargetSwap = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, 0);
					if (Main.OnRenderTargetsInitialized != null)
					{
						Main.OnRenderTargetsInitialized(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
					}
				}
			}
			catch
			{
				Lighting.Mode = LightMode.Retro;
				Main.mapEnabled = false;
				Main.SaveSettings();
				try
				{
					this.ReleaseTargets();
				}
				catch
				{
				}
			}
		}

		// Token: 0x060005C2 RID: 1474 RVA: 0x0012A044 File Offset: 0x00128244
		protected unsafe void DrawWires()
		{
			Rectangle value;
			value..ctor(0, 0, 16, 16);
			Vector2 zero = Vector2.Zero;
			this.DrawWiresSpecialTiles.Clear();
			bool flag = !WiresUI.Settings.HideWires;
			float num = 1f;
			if (WiresUI.Settings.HideWires)
			{
				num = 0.5f;
			}
			int num2 = 1;
			int num3 = 1;
			int num4 = 1;
			int num5 = 1;
			int num6 = 1;
			if (Main.player[Main.myPlayer].InfoAccMechShowWires)
			{
				int[] builderAccStatus = Main.player[Main.myPlayer].builderAccStatus;
				num2 = builderAccStatus[4];
				num3 = builderAccStatus[5];
				num4 = builderAccStatus[6];
				num5 = builderAccStatus[7];
				num6 = builderAccStatus[9];
			}
			float num17 = Main.gfxQuality;
			float num18 = Main.gfxQuality;
			Vector2 zero2 = Vector2.Zero;
			if (Main.drawToScreen)
			{
				zero2 = Vector2.Zero;
			}
			int num7 = (int)((Main.screenPosition.X - zero2.X) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero2.X) / 16f) + 2;
			int num9 = (int)((Main.screenPosition.Y - zero2.Y) / 16f - 1f);
			int num10 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero2.Y) / 16f) + 5;
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesX)
			{
				num8 = Main.maxTilesX;
			}
			if (num9 < 0)
			{
				num9 = 0;
			}
			if (num10 > Main.maxTilesY)
			{
				num10 = Main.maxTilesY;
			}
			Point screenOverdrawOffset = Main.GetScreenOverdrawOffset();
			for (int i = num9 + screenOverdrawOffset.Y; i < num10 - screenOverdrawOffset.Y; i++)
			{
				for (int j = num7 + screenOverdrawOffset.X; j < num8 - screenOverdrawOffset.X; j++)
				{
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					float num11 = 0f;
					Tile tile = Main.tile[j, i];
					if (flag && Main.player[Main.myPlayer].CanDoWireStuffHere(j, i))
					{
						int num12 = 0;
						if (tile.active())
						{
							if (*tile.type == 424)
							{
								switch (*tile.frameX / 18)
								{
								case 0:
									num12 += 72;
									break;
								case 1:
									num12 += 144;
									break;
								case 2:
									num12 += 216;
									break;
								}
							}
							else if (*tile.type == 445)
							{
								num12 += 72;
							}
						}
						if (tile.wire())
						{
							num11 += 1f;
							int num13 = 0;
							if (Main.tile[j, i - 1].wire())
							{
								num13 += 18;
								flag4 = true;
							}
							if (Main.tile[j + 1, i].wire())
							{
								num13 += 36;
								flag3 = true;
							}
							if (Main.tile[j, i + 1].wire())
							{
								num13 += 72;
								flag5 = true;
							}
							if (Main.tile[j - 1, i].wire())
							{
								num13 += 144;
								flag2 = true;
							}
							value.Y = num12;
							value.X = num13;
							Color color = Lighting.GetColor(j, i);
							switch (num2)
							{
							case 0:
								color = Color.White;
								break;
							case 2:
								color *= 0.5f;
								break;
							case 3:
								color = Color.Transparent;
								break;
							}
							if (color == Color.Transparent)
							{
								num11 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(value), color, 0f, zero, 1f, 0, 0f);
							}
						}
						if (tile.wire2())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num11 += 1f;
							int num14 = 0;
							if (Main.tile[j, i - 1].wire2())
							{
								num14 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire2())
							{
								num14 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire2())
							{
								num14 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire2())
							{
								num14 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num11 > 1f)
							{
								flag10 = true;
							}
							value.Y = num12 + 18;
							value.X = num14;
							Color color2 = Lighting.GetColor(j, i);
							switch (num3)
							{
							case 0:
								color2 = Color.White;
								break;
							case 2:
								color2 *= 0.5f;
								break;
							case 3:
								color2 = Color.Transparent;
								break;
							}
							if (color2 == Color.Transparent)
							{
								num11 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(value), color2 * (1f / num11), 0f, zero, 1f, 0, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(18, value.Y, 16, 6)), color2, 0f, zero, 1f, 0, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Rectangle?(new Rectangle(72, value.Y + 10, 16, 6)), color2, 0f, zero, 1f, 0, 0f);
									}
									flag5 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Rectangle?(new Rectangle(46, value.Y, 6, 16)), color2, 0f, zero, 1f, 0, 0f);
									}
									flag3 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(144, value.Y, 6, 16)), color2, 0f, zero, 1f, 0, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire3())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num11 += 1f;
							int num15 = 0;
							if (Main.tile[j, i - 1].wire3())
							{
								num15 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire3())
							{
								num15 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire3())
							{
								num15 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire3())
							{
								num15 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num11 > 1f)
							{
								flag10 = true;
							}
							value.Y = num12 + 36;
							value.X = num15;
							Color color3 = Lighting.GetColor(j, i);
							switch (num4)
							{
							case 0:
								color3 = Color.White;
								break;
							case 2:
								color3 *= 0.5f;
								break;
							case 3:
								color3 = Color.Transparent;
								break;
							}
							if (color3 == Color.Transparent)
							{
								num11 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(value), color3 * (1f / num11), 0f, zero, 1f, 0, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(18, value.Y, 16, 6)), color3, 0f, zero, 1f, 0, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Rectangle?(new Rectangle(72, value.Y + 10, 16, 6)), color3, 0f, zero, 1f, 0, 0f);
									}
									flag5 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Rectangle?(new Rectangle(46, value.Y, 6, 16)), color3, 0f, zero, 1f, 0, 0f);
									}
									flag3 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(144, value.Y, 6, 16)), color3, 0f, zero, 1f, 0, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire4())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num11 += 1f;
							int num16 = 0;
							if (Main.tile[j, i - 1].wire4())
							{
								num16 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire4())
							{
								num16 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire4())
							{
								num16 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire4())
							{
								num16 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num11 > 1f)
							{
								flag10 = true;
							}
							value.Y = num12 + 54;
							value.X = num16;
							Color color4 = Lighting.GetColor(j, i);
							switch (num5)
							{
							case 0:
								color4 = Color.White;
								break;
							case 2:
								color4 *= 0.5f;
								break;
							case 3:
								color4 = Color.Transparent;
								break;
							}
							if (color4 == Color.Transparent)
							{
								num11 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(value), color4 * (1f / num11), 0f, zero, 1f, 0, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(18, value.Y, 16, 6)), color4, 0f, zero, 1f, 0, 0f);
									}
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Rectangle?(new Rectangle(72, value.Y + 10, 16, 6)), color4, 0f, zero, 1f, 0, 0f);
									}
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Rectangle?(new Rectangle(46, value.Y, 6, 16)), color4, 0f, zero, 1f, 0, 0f);
									}
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(144, value.Y, 6, 16)), color4, 0f, zero, 1f, 0, 0f);
									}
								}
							}
						}
					}
					if (Main.tile[j, i].actuator() && (Lighting.Brightness(j, i) > 0f || num6 == 0))
					{
						Color color5 = Lighting.GetColor(j, i);
						switch (num6)
						{
						case 0:
							color5 = Color.White;
							break;
						case 2:
							color5 *= 0.5f;
							break;
						case 3:
							color5 = Color.Transparent;
							break;
						}
						Main.spriteBatch.Draw(TextureAssets.Actuator.Value, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Rectangle?(new Rectangle(0, 0, TextureAssets.Actuator.Width(), TextureAssets.Actuator.Height())), color5 * num, 0f, default(Vector2), 1f, 0, 0f);
					}
					if (tile.active() && *tile.type == 423 && *tile.frameY == 36)
					{
						this.DrawWiresSpecialTiles.Add(Tuple.Create<int, int, ushort>(j, i, *tile.type));
					}
				}
			}
			for (int k = 0; k < this.DrawWiresSpecialTiles.Count; k++)
			{
				Tuple<int, int, ushort> tuple = this.DrawWiresSpecialTiles[k];
				if (tuple.Item3 == 423)
				{
					Vector2 start = new Vector2((float)(tuple.Item1 * 16 - 32 - 1), (float)(tuple.Item2 * 16 - 160 - 1)) + zero2;
					Vector2 end = new Vector2((float)(tuple.Item1 * 16 + 48 + 1), (float)(tuple.Item2 * 16 + 1)) + zero2;
					Utils.DrawRectangle(Main.spriteBatch, start, end, Color.LightSeaGreen, Color.LightSeaGreen, 2f);
				}
			}
			TimeLogger.DetailedDrawTime(34);
		}

		// Token: 0x060005C3 RID: 1475 RVA: 0x0012B21C File Offset: 0x0012941C
		public static int ConvertPaintIdToTileShaderIndex(int paintIndexOnTile, bool isUsedForPaintingGrass, bool useWallShaderHacks)
		{
			if (paintIndexOnTile == 31)
			{
				return 0;
			}
			if (paintIndexOnTile == 30 && useWallShaderHacks)
			{
				return 43;
			}
			if (paintIndexOnTile >= 28)
			{
				return paintIndexOnTile + 12;
			}
			if (isUsedForPaintingGrass && paintIndexOnTile >= 1 && paintIndexOnTile <= 12)
			{
				return paintIndexOnTile + 27;
			}
			return paintIndexOnTile;
		}

		// Token: 0x060005C4 RID: 1476 RVA: 0x0012B250 File Offset: 0x00129450
		public static void ResetWindCounter(bool resetExtreme = false)
		{
			FastRandom fastRandom = FastRandom.CreateWithRandomSeed();
			Main.windCounter = fastRandom.Next(900, 2701);
			if (resetExtreme)
			{
				Main.extremeWindCounter = fastRandom.Next(10, 31);
			}
		}

		// Token: 0x060005C5 RID: 1477 RVA: 0x0012B28C File Offset: 0x0012948C
		public static void NewLightning()
		{
			if (!Main.DisableIntenseVisualEffects && Main.shimmerAlpha <= 0f)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.thunderDelay = Main.rand.Next(1, 31);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.thunderDelay = Main.rand.Next(31, 121);
				}
				else
				{
					Main.thunderDelay = Main.rand.Next(11, 61);
				}
				Main.thunderDistance = Main.thunderDelay;
				Main.lightningDecay = Main.rand.NextFloat() * 0.05f + 0.008f;
				Main.lightningSpeed = Main.rand.NextFloat() * 0.05f + 0.05f;
			}
		}

		// Token: 0x060005C6 RID: 1478 RVA: 0x0012B348 File Offset: 0x00129548
		public void UpdateWeather(GameTime gameTime, int currentDayRateIteration)
		{
			if (Main.netMode != 2 && currentDayRateIteration == 0)
			{
				bool flag = base.IsActive;
				if (Main.thunderDelay > 0)
				{
					Main.thunderDelay--;
					if (Main.thunderDelay == 0)
					{
						Vector2 center = Main.player[Main.myPlayer].Center;
						float num = (float)(Main.thunderDistance * 15);
						if (Main.rand.Next(2) == 0)
						{
							num *= -1f;
						}
						center.X += num;
						int num2 = (int)(Main.worldSurface * 16.0) - 500;
						if (center.Y > (float)num2)
						{
							center.Y = (float)num2;
						}
						if (flag)
						{
							SoundEngine.PlaySound(43, center, 1);
						}
					}
				}
				if (Main.lightningSpeed > 0f)
				{
					Main.lightning += Main.lightningSpeed;
					if (Main.lightning >= 1f)
					{
						Main.lightning = 1f;
						Main.lightningSpeed = 0f;
					}
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
				}
				else if (Main.lightning > 0f)
				{
					Main.lightning -= Main.lightningDecay;
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
				}
				else if (Main.thunderDelay <= 0 && (double)Main.player[Main.myPlayer].position.Y < Main.rockLayer * 16.0 && Main.atmo == 1f && !Main.remixWorld)
				{
					if (Main.IsItStorming)
					{
						float num3 = 600f;
						float num4 = 1600f;
						if ((double)Main.maxRaining > 0.8)
						{
							num3 *= 0.6f;
							num4 *= 0.8f;
						}
						if ((double)Main.maxRaining > 0.7)
						{
							num3 *= 0.7f;
							num4 *= 0.9f;
						}
						if ((double)Main.maxRaining > 0.6)
						{
							num3 *= 0.8f;
							num4 *= 0.95f;
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.7)
						{
							num3 *= 0.6f;
							num4 *= 0.8f;
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.6)
						{
							num3 *= 0.7f;
							num4 *= 0.9f;
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.5)
						{
							num3 *= 0.8f;
							num4 *= 0.95f;
						}
						float num5 = (float)Main.rand.Next((int)num3, (int)num4);
						num5 *= (1f - Main.maxRaining + 1f) / 2f;
						num5 *= (1f - Main.windSpeedTarget + 1f) / 2f;
						if (Main.rand.Next((int)num5) == 0)
						{
							Main.NewLightning();
						}
					}
					else if ((double)Main.GraveyardVisualIntensity >= 0.9)
					{
						int maxValue = 120;
						if (Main.rand.Next(maxValue) == 0)
						{
							Main.NewLightning();
						}
					}
				}
			}
			float num6 = 0.8f;
			float num7 = 0.0003f;
			float num8 = Main.windSpeedTarget * (1f + 0.5555556f * Main.maxRaining);
			num7 += Math.Abs(num8 - Main.windSpeedCurrent) * 0.0015f;
			if (Main.windSpeedCurrent < num8)
			{
				Main.windSpeedCurrent += num7;
				if (Main.windSpeedCurrent > num8)
				{
					Main.windSpeedCurrent = num8;
				}
			}
			else if (Main.windSpeedCurrent > num8)
			{
				Main.windSpeedCurrent -= num7;
				if (Main.windSpeedCurrent < num8)
				{
					Main.windSpeedCurrent = num8;
				}
			}
			if (Main.netMode == 1 || (Main.netMode != 2 && Main.gameMenu))
			{
				return;
			}
			if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeWindDirectionAndStrength>().Enabled)
			{
				if (LanternNight.LanternsUp)
				{
					return;
				}
				Main.windCounter--;
				if (Main.windCounter <= 0)
				{
					float num9 = 1f;
					if (Main.windSpeedTarget < 0f)
					{
						num9 = -1f;
					}
					if (Main.rand.Next(4) == 0)
					{
						Main.windSpeedTarget += (float)Main.rand.Next(-25, 26) * 0.001f;
					}
					else if (Main.rand.Next(2) == 0)
					{
						Main.windSpeedTarget += (float)Main.rand.Next(-50, 51) * 0.001f;
					}
					else
					{
						Main.windSpeedTarget += (float)Main.rand.Next(-100, 101) * 0.001f;
					}
					Main.extremeWindCounter--;
					if (Main.extremeWindCounter <= 0)
					{
						Main.ResetWindCounter(true);
						if (Main.rand.Next(30) < 13)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.windSpeedTarget = 0f;
								Main.windCounter = Main.rand.Next(7200, 28801);
							}
							else
							{
								Main.windSpeedTarget = (float)Main.rand.Next(-200, 201) * 0.001f;
							}
						}
						else if (Main.rand.Next(20) < 13)
						{
							Main.windSpeedTarget = (float)Main.rand.Next(-400, 401) * 0.001f;
						}
						else
						{
							Main.windSpeedTarget = (float)Main.rand.Next(-850, 851) * 0.001f;
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.3)
						{
							Main.extremeWindCounter += Main.rand.Next(5, 11);
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.5)
						{
							Main.extremeWindCounter += Main.rand.Next(10, 21);
						}
						if ((double)Math.Abs(Main.windSpeedTarget) > 0.7)
						{
							Main.extremeWindCounter += Main.rand.Next(15, 31);
						}
					}
					else
					{
						Main.ResetWindCounter(false);
					}
					if (Main.rand.Next(3) != 0 && ((num9 < 0f && Main.windSpeedTarget > 0f) || (num9 > 0f && Main.windSpeedTarget < 0f)))
					{
						Main.windSpeedTarget *= -1f;
					}
				}
				if (Main.windSpeedTarget > num6)
				{
					Main.windSpeedTarget = num6;
				}
				if (Main.windSpeedTarget < 0f - num6)
				{
					Main.windSpeedTarget = 0f - num6;
				}
			}
			if (Main.rand.Next(60) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(-1, 2);
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudBGAlpha)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1300) < 25f * (1f - Main.cloudBGAlpha))
			{
				Main.numCloudsTemp--;
			}
			if ((float)Main.rand.Next(1000) < 200f * Main.cloudAlpha && Main.numCloudsTemp < 100)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudAlpha)
			{
				Main.numCloudsTemp++;
			}
			if (Main.numCloudsTemp > 66 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp -= Main.rand.Next(1, 3);
			}
			if (Main.numCloudsTemp < 50 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(1, 3);
			}
			if (Main.cloudBGActive <= 0f && Main.numCloudsTemp > 100 && Main.cloudAlpha == 0f)
			{
				Main.numCloudsTemp = 100;
			}
			if (Main.numCloudsTemp < -20)
			{
				Main.numCloudsTemp = -20;
			}
			if (Main.cloudAlpha > 0f && (float)Main.numClouds < 200f * Main.cloudAlpha)
			{
				while ((float)Main.numClouds < 200f * Main.cloudAlpha)
				{
					Main.numClouds += Main.rand.Next(30);
					if (Main.numClouds > 200)
					{
						Main.numClouds = 200;
					}
					if (Main.numCloudsTemp < Main.numClouds)
					{
						Main.numCloudsTemp = Main.numClouds;
					}
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			Main.weatherCounter--;
			if (Main.weatherCounter > 0)
			{
				return;
			}
			if (Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.numCloudsTemp += Main.rand.Next(250);
				}
				else
				{
					Main.numCloudsTemp += Main.rand.Next(100);
				}
			}
			if (Main.numCloudsTemp < 0)
			{
				Main.numCloudsTemp = 0;
			}
			if (Main.numCloudsTemp > 200)
			{
				Main.numCloudsTemp = 200;
			}
			Main.numClouds = Main.numCloudsTemp;
			Main.weatherCounter = Main.rand.Next(3600, 10800);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060005C7 RID: 1479 RVA: 0x0012BCC8 File Offset: 0x00129EC8
		public void LoadBackground(int i)
		{
			if (i >= 0 && TextureAssets.Background[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Background[i].Name);
				Main.backgroundWidth[i] = TextureAssets.Background[i].Width();
				Main.backgroundHeight[i] = TextureAssets.Background[i].Height();
				if (i <= 235)
				{
					if (i - 219 > 2 && i != 235)
					{
						return;
					}
				}
				else if (i - 271 > 2 && i != 281)
				{
					return;
				}
				Main.backgroundWidth[i] /= 2;
				Main.backgroundHeight[i] /= 2;
			}
		}

		/// <summary>
		/// Loads the item texture if needed. All modded item textures are already loaded during mod loading so this is only needed before accessing vanilla item textures.
		/// <para /> Use <see cref="F:Terraria.GameContent.TextureAssets.Item" /> to access the item texture: <c>TextureAssets.Item[Type].Value</c>
		/// </summary>
		/// <param name="i"></param>
		// Token: 0x060005C8 RID: 1480 RVA: 0x0012BD77 File Offset: 0x00129F77
		public void LoadItem(int i)
		{
			if (TextureAssets.Item[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Item[i].Name);
			}
		}

		/// <summary>
		/// Loads the NPC texture if needed. All modded NPC textures are already loaded during mod loading so this is only needed before accessing vanilla NPC textures.
		/// <para /> Use <see cref="F:Terraria.GameContent.TextureAssets.Npc" /> to access the NPC texture: <c>TextureAssets.Npc[Type].Value</c>
		/// </summary>
		/// <param name="i"></param>
		// Token: 0x060005C9 RID: 1481 RVA: 0x0012BD9E File Offset: 0x00129F9E
		public void LoadNPC(int i)
		{
			if (TextureAssets.Npc[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Npc[i].Name);
			}
		}

		/// <summary>
		/// Loads the projectile texture if needed. All modded projectile textures are already loaded during mod loading so this is only needed before accessing vanilla projectile textures.
		/// <para /> Use <see cref="F:Terraria.GameContent.TextureAssets.Projectile" /> to access the projectile texture: <c>TextureAssets.Projectile[Type].Value</c>
		/// </summary>
		/// <param name="i"></param>
		// Token: 0x060005CA RID: 1482 RVA: 0x0012BDC5 File Offset: 0x00129FC5
		public void LoadProjectile(int i)
		{
			if (TextureAssets.Projectile[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Projectile[i].Name);
			}
		}

		// Token: 0x060005CB RID: 1483 RVA: 0x0012BDEC File Offset: 0x00129FEC
		public void LoadGore(int i)
		{
			if (TextureAssets.Gore[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Gore[i].Name);
			}
		}

		/// <summary>
		/// Loads the wall texture if needed. All modded wall textures are already loaded during mod loading so this is only needed before accessing vanilla wall textures.
		/// <para /> Use <see cref="F:Terraria.GameContent.TextureAssets.Wall" /> to access the tile texture: <c>TextureAssets.Wall[Type].Value</c>
		/// </summary>
		/// <param name="i"></param>
		// Token: 0x060005CC RID: 1484 RVA: 0x0012BE13 File Offset: 0x0012A013
		public void LoadWall(int i)
		{
			if (TextureAssets.Wall[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Wall[i].Name);
			}
		}

		/// <summary>
		/// Loads the tile texture if needed. All modded tile textures are already loaded during mod loading so this is only needed before accessing vanilla tile textures.
		/// <para /> Use <see cref="F:Terraria.GameContent.TextureAssets.Tile" /> to access the tile texture: <c>TextureAssets.Tile[Type].Value</c>
		/// </summary>
		/// <param name="i"></param>
		// Token: 0x060005CD RID: 1485 RVA: 0x0012BE3A File Offset: 0x0012A03A
		public void LoadTiles(int i)
		{
			if (TextureAssets.Tile[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Tile[i].Name);
			}
		}

		// Token: 0x060005CE RID: 1486 RVA: 0x0012BE64 File Offset: 0x0012A064
		public void LoadItemFlames(int i)
		{
			if (TextureAssets.ItemFlame[i].State == null)
			{
				try
				{
					Main.Assets.Request<Texture2D>(TextureAssets.ItemFlame[i].Name);
				}
				catch
				{
				}
			}
		}

		// Token: 0x060005CF RID: 1487 RVA: 0x0012BEAC File Offset: 0x0012A0AC
		public void LoadWings(int i)
		{
			if (TextureAssets.Wings[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.Wings[i].Name);
			}
		}

		// Token: 0x060005D0 RID: 1488 RVA: 0x0012BED3 File Offset: 0x0012A0D3
		public void LoadHair(int i)
		{
			if (TextureAssets.PlayerHair[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.PlayerHair[i].Name);
				Main.Assets.Request<Texture2D>(TextureAssets.PlayerHairAlt[i].Name);
			}
		}

		// Token: 0x060005D1 RID: 1489 RVA: 0x0012BF11 File Offset: 0x0012A111
		public void LoadArmorHead(int i)
		{
			if (TextureAssets.ArmorHead[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.ArmorHead[i].Name);
			}
		}

		// Token: 0x060005D2 RID: 1490 RVA: 0x0012BF38 File Offset: 0x0012A138
		public void LoadArmorBody(int i)
		{
			if (ArmorIDs.Body.Sets.UsesNewFramingCode[i])
			{
				if (TextureAssets.ArmorBodyComposite[i].State == null)
				{
					Main.Assets.Request<Texture2D>(TextureAssets.ArmorBodyComposite[i].Name);
					return;
				}
			}
			else if (TextureAssets.ArmorBody[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.FemaleBody[i].Name);
				Main.Assets.Request<Texture2D>(TextureAssets.ArmorBody[i].Name);
				Main.Assets.Request<Texture2D>(TextureAssets.ArmorArm[i].Name);
			}
		}

		// Token: 0x060005D3 RID: 1491 RVA: 0x0012BFC7 File Offset: 0x0012A1C7
		public void LoadArmorLegs(int i)
		{
			if (TextureAssets.ArmorLeg[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.ArmorLeg[i].Name);
			}
		}

		// Token: 0x060005D4 RID: 1492 RVA: 0x0012BFF0 File Offset: 0x0012A1F0
		public void LoadAccHandsOn(int i)
		{
			bool flag = !ArmorIDs.HandOn.Sets.UsesNewFramingCode[i];
			if (ArmorIDs.HandOn.Sets.UsesOldFramingTexturesForWalking[i])
			{
				flag = true;
			}
			if (flag && TextureAssets.AccHandsOn[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccHandsOn[i].Name);
			}
			if (ArmorIDs.HandOn.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOnComposite[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccHandsOnComposite[i].Name);
			}
		}

		// Token: 0x060005D5 RID: 1493 RVA: 0x0012C06C File Offset: 0x0012A26C
		public void LoadAccHandsOff(int i)
		{
			if (!ArmorIDs.HandOff.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOff[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccHandsOff[i].Name);
			}
			if (ArmorIDs.HandOff.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOffComposite[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccHandsOffComposite[i].Name);
			}
		}

		// Token: 0x060005D6 RID: 1494 RVA: 0x0012C0D5 File Offset: 0x0012A2D5
		public void LoadAccBack(int i)
		{
			if (TextureAssets.AccBack[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccBack[i].Name);
			}
		}

		// Token: 0x060005D7 RID: 1495 RVA: 0x0012C0FC File Offset: 0x0012A2FC
		public void LoadAccFront(int i)
		{
			if (TextureAssets.AccFront[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccFront[i].Name);
			}
		}

		// Token: 0x060005D8 RID: 1496 RVA: 0x0012C123 File Offset: 0x0012A323
		public void LoadAccShoes(int i)
		{
			if (TextureAssets.AccShoes[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccShoes[i].Name);
			}
		}

		// Token: 0x060005D9 RID: 1497 RVA: 0x0012C14A File Offset: 0x0012A34A
		public void LoadAccWaist(int i)
		{
			if (TextureAssets.AccWaist[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccWaist[i].Name);
			}
		}

		// Token: 0x060005DA RID: 1498 RVA: 0x0012C171 File Offset: 0x0012A371
		public void LoadAccShield(int i)
		{
			if (TextureAssets.AccShield[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccShield[i].Name);
			}
		}

		// Token: 0x060005DB RID: 1499 RVA: 0x0012C198 File Offset: 0x0012A398
		public void LoadAccNeck(int i)
		{
			if (TextureAssets.AccNeck[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccNeck[i].Name);
			}
		}

		// Token: 0x060005DC RID: 1500 RVA: 0x0012C1BF File Offset: 0x0012A3BF
		public void LoadAccFace(int i)
		{
			if (TextureAssets.AccFace[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccFace[i].Name);
			}
		}

		// Token: 0x060005DD RID: 1501 RVA: 0x0012C1E6 File Offset: 0x0012A3E6
		public void LoadAccBalloon(int i)
		{
			if (TextureAssets.AccBalloon[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccBalloon[i].Name);
			}
		}

		// Token: 0x060005DE RID: 1502 RVA: 0x0012C20D File Offset: 0x0012A40D
		public void LoadAccBeard(int i)
		{
			if (TextureAssets.AccBeard[i].State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.AccBeard[i].Name);
			}
		}

		// Token: 0x060005DF RID: 1503 RVA: 0x0012C234 File Offset: 0x0012A434
		public void LoadFlameRing()
		{
			if (TextureAssets.FlameRing.State == null)
			{
				Main.Assets.Request<Texture2D>(TextureAssets.FlameRing.Name);
			}
		}

		// Token: 0x060005E0 RID: 1504 RVA: 0x0012C258 File Offset: 0x0012A458
		protected void DrawSurfaceBG()
		{
			bool flag = false;
			if ((!Main.remixWorld || (Main.gameMenu && !WorldGen.remixWorldGen)) && (!WorldGen.remixWorldGen || !WorldGen.drunkWorldGen))
			{
				flag = true;
			}
			if (Main.mapFullscreen)
			{
				flag = false;
			}
			Color colorOfSurfaceBackgroundsBase = Main.ColorOfSurfaceBackgroundsBase;
			int num = 30;
			if (Main.gameMenu)
			{
				num = 0;
			}
			if (WorldGen.drunkWorldGen)
			{
				num = -180;
			}
			float num2 = (float)Main.worldSurface;
			if (num2 == 0f)
			{
				num2 = 1f;
			}
			Vector2 vector = Main.screenPosition;
			float num3 = Main.screenPosition.Y + (float)(Main.screenHeight / 2) - 600f;
			double num4 = (double)((num3 - this.screenOff / 2f) / (num2 * 16f));
			num4 = (double)(0f - MathHelper.Lerp((float)num4, 1f, 0f));
			num4 = (double)((0f - num3 + this.screenOff / 2f) / (num2 * 16f));
			float num5 = 2f;
			int num6 = 0;
			float num7 = SkyManager.Instance.ProcessCloudAlpha() * Main.atmo;
			if (flag && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.cloud[i].active && Main.cloud[i].scale < 1f)
					{
						Color color = Main.cloud[i].cloudColor(Main.ColorOfTheSkies);
						float num8 = Main.cloud[i].scale * 0.8f;
						float num9 = (Main.cloud[i].scale + 1f) / 2f * 0.9f;
						color.R = (byte)((float)color.R * num8);
						color.G = (byte)((float)color.G * num9);
						float num10 = Main.cloud[i].position.Y * ((float)Main.screenHeight / 600f);
						num10 = Main.cloud[i].position.Y + (float)((int)(num4 * 750.0 + 830.0)) + (float)((int)this.scAdj) + (float)num6;
						Main.<DrawSurfaceBG>g__DrawCloud|1826_0(i, color * num7, num10);
					}
				}
			}
			if (Main.invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Activate("Martian", default(Vector2), Array.Empty<object>());
			}
			else if (Main.invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Deactivate("Martian", Array.Empty<object>());
			}
			SkyManager.Instance.ResetDepthTracker();
			this.bgParallax = 0.15;
			int num11 = -180;
			bool flag2 = true;
			int num12 = 0;
			if (Main.gameMenu)
			{
				num12 -= num11;
			}
			num6 = num12;
			num6 += num;
			if (!WorldGen.drunkWorldGen && flag && (double)(Main.screenPosition.Y / 16f) <= Main.worldSurface + 10.0)
			{
				if (Main.BackgroundEnabled)
				{
					if (Main.cloudBGActive > 0f)
					{
						Main.cloudBGAlpha += 0.0005f * (float)Main.desiredWorldEventsUpdateRate;
						if (Main.cloudBGAlpha > 1f)
						{
							Main.cloudBGAlpha = 1f;
						}
					}
					else
					{
						Main.cloudBGAlpha -= 0.0005f * (float)Main.desiredWorldEventsUpdateRate;
						if (Main.cloudBGAlpha < 0f)
						{
							Main.cloudBGAlpha = 0f;
						}
					}
					if (Main.cloudBGAlpha > 0f)
					{
						this.LoadBackground(Main.cloudBG[0]);
						this.LoadBackground(Main.cloudBG[1]);
						float num13 = Main.cloudBGAlpha;
						if (num13 > 1f)
						{
							num13 = 1f;
						}
						Main.bgScale = 1.65f;
						this.bgParallax = 0.09000000357627869;
						if (base.IsActive && !Main.gamePaused)
						{
							Main.cloudBGX[0] += Main.windSpeedCurrent * (float)this.bgParallax * 9f * (float)Main.desiredWorldEventsUpdateRate;
						}
						if (Main.cloudBGX[0] > (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale)
						{
							Main.cloudBGX[0] -= (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						if (Main.cloudBGX[0] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[0]]) * Main.bgScale)
						{
							Main.cloudBGX[0] += (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						float num14 = (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						this.bgTopY = (int)(num4 * 900.0 + 600.0) + (int)this.scAdj + num6;
						if (Main.gameMenu)
						{
							this.bgTopY = -150 + num6;
						}
						this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)num14) - (double)(num14 / 2f) - (double)num14);
						this.bgStartX += (int)Main.cloudBGX[0];
						this.bgLoops = Main.screenWidth / (int)num14 + 2 + 2;
						Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num13;
						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
						for (int j = 0; j < this.bgLoops; j++)
						{
							Main.spriteBatch.Draw(TextureAssets.Background[Main.cloudBG[0]].Value, new Vector2((float)this.bgStartX + num14 * (float)j, (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[0]], Main.backgroundHeight[Main.cloudBG[0]])), Main.ColorOfSurfaceBackgroundsModified * num7, 0f, default(Vector2), Main.bgScale, 0, 0f);
						}
						num13 = Main.cloudBGAlpha * 1.5f;
						if (num13 > 1f)
						{
							num13 = 1f;
						}
						Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num13;
						Main.bgScale = 1.85f;
						this.bgParallax = 0.12;
						if (base.IsActive && !Main.gamePaused)
						{
							Main.cloudBGX[1] += Main.windSpeedCurrent * (float)this.bgParallax * 9f * (float)Main.desiredWorldEventsUpdateRate;
						}
						if (Main.cloudBGX[1] > (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale)
						{
							Main.cloudBGX[1] -= (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						if (Main.cloudBGX[1] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[1]]) * Main.bgScale)
						{
							Main.cloudBGX[1] += (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						num14 = (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						this.bgTopY = (int)(num4 * 1100.0 + 750.0) + (int)this.scAdj + num6;
						if (Main.gameMenu)
						{
							this.bgTopY = -50 + num6;
						}
						this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)num14) - (double)(num14 / 2f) - (double)num14);
						this.bgStartX += (int)Main.cloudBGX[1];
						this.bgLoops = Main.screenWidth / (int)num14 + 2 + 2;
						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
						for (int k = 0; k < this.bgLoops; k++)
						{
							Main.spriteBatch.Draw(TextureAssets.Background[Main.cloudBG[1]].Value, new Vector2((float)this.bgStartX + num14 * (float)k, (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[1]], Main.backgroundHeight[Main.cloudBG[1]])), Main.ColorOfSurfaceBackgroundsModified * num7, 0f, default(Vector2), Main.bgScale, 0, 0f);
						}
					}
					this.DrawSurfaceBG_BackMountainsStep1(num4, num5, num6);
				}
				this.cTop = (float)(this.bgTopY - 50);
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int l = 0; l < 200; l++)
					{
						if (Main.cloud[l].active && (double)Main.cloud[l].scale < 1.15 && Main.cloud[l].scale >= 1f)
						{
							Color color2 = Main.cloud[l].cloudColor(Main.ColorOfTheSkies);
							if (Main.atmo < 1f)
							{
								color2 *= Main.atmo;
							}
							float num15 = Main.cloud[l].position.Y * ((float)Main.screenHeight / 600f);
							float num16 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num16 < 0f)
							{
								num16 = 0f;
							}
							if (num16 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.<DrawSurfaceBG>g__DrawCloud|1826_0(l, color2 * num7, num15 + this.cTop + 200f);
						}
					}
				}
				if (Main.SceneMetrics.HolyTileCount > 0 && Main.BackgroundEnabled)
				{
					this.bgParallax = 0.17;
					Main.bgScale = 1.1f;
					this.bgTopY = (int)(num4 * 1400.0 + 900.0) + (int)this.scAdj + num6;
					this.SetBackgroundOffsets(18, num4, num6);
					Main.bgScale *= num5;
					Main.bgWidthScaled = (int)((double)(2100f * Main.bgScale) * 1.05);
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
					this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
					if (Main.gameMenu)
					{
						this.bgTopY = 230 + num6;
						this.bgStartX -= 500;
					}
					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
					Color color3 = colorOfSurfaceBackgroundsBase;
					float num17 = (float)(Main.SceneMetrics.HolyTileCount - SceneMetrics.HallowTileThreshold) / (float)(SceneMetrics.HallowTileMax - SceneMetrics.HallowTileThreshold);
					if (num17 > 0.5f)
					{
						num17 = 0.5f;
					}
					else if (num17 < 0f)
					{
						num17 = 0f;
					}
					color3.R = (byte)((float)color3.R * num17);
					color3.G = (byte)((float)color3.G * num17);
					color3.B = (byte)((float)color3.B * num17);
					color3.A = (byte)((float)color3.A * num17 * 0.8f);
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						this.LoadBackground(18);
						this.LoadBackground(19);
						for (int m = 0; m < this.bgLoops; m++)
						{
							Main.spriteBatch.Draw(TextureAssets.Background[18].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * m), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[18], Main.backgroundHeight[18])), color3, 0f, default(Vector2), Main.bgScale, 0, 0f);
							Main.spriteBatch.Draw(TextureAssets.Background[19].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * m + 1900), (float)(this.bgTopY + 100)), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[19], Main.backgroundHeight[19])), color3, 0f, default(Vector2), Main.bgScale * 0.9f, 0, 0f);
						}
					}
				}
				if (Main.treeMntBGSet1[1] > -1)
				{
					this.LoadBackground(Main.treeMntBGSet1[1]);
					this.bgParallax = 0.2;
					Main.bgScale = 1.15f;
					Main.bgScale *= num5;
					int num18 = Main.backgroundWidth[Main.treeMntBGSet1[1]];
					if (num18 == 0)
					{
						num18 = 1;
					}
					Main.bgWidthScaled = (int)((float)num18 * Main.bgScale);
					this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
					this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
					if (Main.treeMntBGSet1[1] == 172)
					{
						this.bgLoops++;
					}
					this.bgTopY = (int)(num4 * 1400.0 + 1260.0) + (int)this.scAdj + num6;
				}
				if (Main.BackgroundEnabled)
				{
					this.DrawSurfaceBG_BackMountainsStep2(num6);
				}
				this.cTop = (float)this.bgTopY * 1.01f - 150f;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int n = 0; n < 200; n++)
					{
						if (Main.cloud[n].active && Main.cloud[n].scale >= 1.15f)
						{
							Color color4 = Main.cloud[n].cloudColor(Main.ColorOfTheSkies);
							if (Main.atmo < 1f)
							{
								color4 *= Main.atmo;
							}
							float num19 = Main.cloud[n].position.Y * ((float)Main.screenHeight / 600f) - 100f;
							float num20 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num20 < 0f)
							{
								num20 = 0f;
							}
							if (num20 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.<DrawSurfaceBG>g__DrawCloud|1826_0(n, color4 * num7, num19 + this.cTop);
						}
					}
				}
			}
			if (flag2)
			{
				num6 += num11;
			}
			if (flag)
			{
				for (int num21 = 0; num21 < Main.bgAlphaFrontLayer.Length; num21++)
				{
					if (Main.BackgroundEnabled)
					{
						Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFrontLayer[num21];
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 0)
						{
							this.DrawSurfaceBG_Forest(num4, num5, num6, Main.treeBGSet1);
							this.DrawSurfaceBG_DrawChangeOverlay(0);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 10)
						{
							this.DrawSurfaceBG_Forest(num4, num5, num6, Main.treeBGSet2);
							this.DrawSurfaceBG_DrawChangeOverlay(1);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 11)
						{
							this.DrawSurfaceBG_Forest(num4, num5, num6, Main.treeBGSet3);
							this.DrawSurfaceBG_DrawChangeOverlay(2);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 12)
						{
							this.DrawSurfaceBG_Forest(num4, num5, num6, Main.treeBGSet4);
							this.DrawSurfaceBG_DrawChangeOverlay(3);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 1)
						{
							int[] bgTexIndexes = Main.corruptBG;
							this.DrawSurfaceBG_Corrupt(num4, num5, num6, bgTexIndexes);
							this.DrawSurfaceBG_DrawChangeOverlay(4);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 2)
						{
							int[] bgTexIndexes2 = Main.desertBG;
							this.DrawSurfaceBG_Desert(num4, num5, num6, bgTexIndexes2);
							this.DrawSurfaceBG_DrawChangeOverlay(9);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 3)
						{
							int[] bgTexIndexes3 = Main.jungleBG;
							this.DrawSurfaceBG_Jungle(num4, num5, num6, bgTexIndexes3);
							this.DrawSurfaceBG_DrawChangeOverlay(5);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 4)
						{
							this.DrawSurfaceBG_DrawChangeOverlay(10);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 5)
						{
							this.DrawSurfaceBG_GoodEvilDesert(num4, num5, num6);
							this.DrawSurfaceBG_DrawChangeOverlay(9);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 6)
						{
							int[] bgTexIndexes4 = Main.hallowBG;
							this.DrawSurfaceBG_Hallow(num4, num5, num6, bgTexIndexes4);
							this.DrawSurfaceBG_DrawChangeOverlay(7);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 7)
						{
							int[] bgTexIndexes5 = Main.snowBG;
							this.DrawSurfaceBG_Snow(num4, num5, num6, bgTexIndexes5);
							this.DrawSurfaceBG_DrawChangeOverlay(6);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 8)
						{
							int[] bgTexIndexes6 = Main.crimsonBG;
							this.DrawSurfaceBG_Crimson(num4, num5, num6, bgTexIndexes6);
							this.DrawSurfaceBG_DrawChangeOverlay(8);
						}
						if (Main.bgAlphaFrontLayer[num21] > 0f && num21 == 9)
						{
							int[] bgTexIndexes7 = Main.mushroomBG;
							this.DrawSurfaceBG_Mushroom(num4, num5, num6, bgTexIndexes7);
							this.DrawSurfaceBG_DrawChangeOverlay(11);
						}
						if (num21 >= 14)
						{
							LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawCloseBackground(num21);
						}
					}
				}
			}
			if (flag2)
			{
				num6 -= num11;
			}
			float num22 = Main.DrawSurfaceBG_GetFogPower();
			if (flag && num22 > 0f && !Main.gameMenu && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				this.bgParallax = 0.1;
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
				this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
				this.bgStartY = 0;
				this.bgLoopsY = 0;
				this.bgTopY = (int)((double)(0f - Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
				Texture2D value = TextureAssets.Background[49].Value;
				for (int num23 = 0; num23 < this.bgLoops; num23++)
				{
					this.bgStartX = 0;
					Color color5 = Main.ColorOfTheSkies * num22 * Main.atmo;
					int height = Math.Max(Main.screenHeight + 210, value.Height);
					Main.spriteBatch.Draw(value, new Rectangle(this.bgStartX + value.Width * num23, this.bgTopY, value.Width, height), color5);
				}
			}
			if (!Main.mapFullscreen)
			{
				SkyManager.Instance.DrawRemainingDepth(Main.spriteBatch);
			}
		}

		// Token: 0x060005E1 RID: 1505 RVA: 0x0012D5D7 File Offset: 0x0012B7D7
		private static float DrawSurfaceBG_GetFogPower()
		{
			return Math.Max(Main.cloudAlpha, Main.GraveyardVisualIntensity * 0.92f);
		}

		// Token: 0x060005E2 RID: 1506 RVA: 0x0012D5F0 File Offset: 0x0012B7F0
		private void DrawSurfaceBG_DrawBackMountainsLayer(int bgTextureIndex)
		{
			if (bgTextureIndex >= 0)
			{
				this.LoadBackground(bgTextureIndex);
				int num = this.DrawSurfaceBG_GetLayerYOffset(bgTextureIndex);
				this.bgTopY += num;
				for (int i = 0; i < this.bgLoops; i++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTextureIndex].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), this.GetBackgroundRect(bgTextureIndex), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
				this.bgTopY -= num;
			}
		}

		// Token: 0x060005E3 RID: 1507 RVA: 0x0012D698 File Offset: 0x0012B898
		private int DrawSurfaceBG_GetLayerYOffset(int bgTextureIndex)
		{
			if (bgTextureIndex <= 183)
			{
				if (bgTextureIndex != 59)
				{
					if (bgTextureIndex != 93)
					{
						switch (bgTextureIndex)
						{
						case 168:
						case 169:
						case 170:
							break;
						case 171:
							return -100;
						case 172:
							return 130;
						case 173:
						case 174:
						case 175:
						case 178:
							return 0;
						case 176:
							return -760;
						case 177:
							return -200;
						case 179:
							return -100;
						case 180:
						case 181:
						case 182:
						case 183:
							return -350;
						default:
							return 0;
						}
					}
					return -50;
				}
				return -550;
			}
			else if (bgTextureIndex <= 247)
			{
				if (bgTextureIndex == 246)
				{
					return -150;
				}
				if (bgTextureIndex == 247)
				{
					return -150;
				}
			}
			else
			{
				if (bgTextureIndex == 263)
				{
					return -700;
				}
				switch (bgTextureIndex)
				{
				case 269:
					return -100;
				case 270:
					return -50;
				case 271:
					return -300;
				case 272:
					return -380;
				case 277:
					return -260;
				case 278:
					return -120;
				case 280:
					return -170;
				case 281:
					return -300;
				case 283:
					return -800;
				}
			}
			return 0;
		}

		// Token: 0x060005E4 RID: 1508 RVA: 0x0012D7EA File Offset: 0x0012B9EA
		private float GetForestToForestBackgroundLerperValue()
		{
			return (Main.GlobalTimeWrappedHourly * 1.5707964f).ToRotationVector2().X * 0.5f + 0.5f;
		}

		// Token: 0x060005E5 RID: 1509 RVA: 0x0012D810 File Offset: 0x0012BA10
		private void DrawSurfaceBG_BackMountainsStep1(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
		{
			Color colorOfSurfaceBackgroundsBase = Main.ColorOfSurfaceBackgroundsBase;
			Main.bgScale = 1f;
			this.bgTopY = (int)(backgroundTopMagicNumber * 1300.0 + 1090.0) + (int)this.scAdj + pushBGTopHack;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.bgParallax = 0.15;
			Main.bgWidthScaled = (int)(1024f * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.bgWidthScaled == 0)
			{
				Main.bgWidthScaled = 1024;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if (Main.gameMenu)
			{
				this.bgTopY = 100 + pushBGTopHack;
			}
			if ((double)Main.screenPosition.Y >= Main.worldSurface * 16.0 + 16.0)
			{
				return;
			}
			if (Main.bgAlphaFarBackLayer[0] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[0];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet1[0]);
			}
			if (Main.bgAlphaFarBackLayer[10] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[10];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet2[0]);
			}
			if (Main.bgAlphaFarBackLayer[11] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[11];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet3[0]);
			}
			if (Main.bgAlphaFarBackLayer[12] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[12];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet4[0]);
			}
			if (Main.bgAlphaFarBackLayer[1] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[1];
				if (WorldGen.desertBG != 4)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(23);
				}
			}
			if (Main.bgAlphaFarBackLayer[2] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[2];
				this.DrawSurfaceBG_DrawBackMountainsLayer(24);
			}
			if (Main.bgAlphaFarBackLayer[4] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[4];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.snowMntBG[0]);
			}
			if (Main.bgAlphaFarBackLayer[5] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[5];
				if (WorldGen.crimsonBG != 5)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(24);
				}
			}
			if (Main.bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[6];
				this.DrawSurfaceBG_DrawBackMountainsLayer(246);
			}
			LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawFarTexture();
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
		}

		// Token: 0x060005E6 RID: 1510 RVA: 0x0012DAF0 File Offset: 0x0012BCF0
		private void DrawSurfaceBG_BackMountainsStep2(int pushBGTopHack)
		{
			if (Main.gameMenu)
			{
				this.bgTopY = 230 + pushBGTopHack;
				this.bgStartX -= 500;
			}
			Color colorOfSurfaceBackgroundsBase = Main.ColorOfSurfaceBackgroundsBase;
			this.UpdateOceanWaterLineForAmbience();
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			if ((double)Main.screenPosition.Y >= Main.worldSurface * 16.0 + 16.0)
			{
				return;
			}
			if (Main.bgAlphaFarBackLayer[0] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[0];
				if (Main.treeMntBGSet1[1] > -1)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet1[1]);
				}
			}
			if (Main.bgAlphaFarBackLayer[1] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[1];
				if (WorldGen.desertBG != 4)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(22);
				}
			}
			if (Main.bgAlphaFarBackLayer[2] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[2];
				this.DrawSurfaceBG_DrawBackMountainsLayer(25);
			}
			if (Main.bgAlphaFarBackLayer[3] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[3];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.oceanBG);
			}
			if (Main.bgAlphaFarBackLayer[4] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[4];
				this.DrawSurfaceBG_DrawBackMountainsLayer(Main.snowMntBG[1]);
			}
			if (Main.bgAlphaFarBackLayer[5] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[5];
				if (WorldGen.crimsonBG != 5)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(42);
				}
			}
			if (Main.bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[6];
				this.DrawSurfaceBG_DrawBackMountainsLayer(247);
			}
			if (Main.bgAlphaFarBackLayer[10] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[10];
				if (Main.treeMntBGSet2[1] > -1)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet2[1]);
				}
			}
			if (Main.bgAlphaFarBackLayer[11] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[11];
				if (Main.treeMntBGSet3[1] > -1)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet3[1]);
				}
			}
			if (Main.bgAlphaFarBackLayer[12] > 0f)
			{
				Main.ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * Main.bgAlphaFarBackLayer[12];
				if (Main.treeMntBGSet4[1] > -1)
				{
					this.DrawSurfaceBG_DrawBackMountainsLayer(Main.treeMntBGSet4[1]);
				}
			}
			LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawMiddleTexture();
		}

		// Token: 0x060005E7 RID: 1511 RVA: 0x0012DD74 File Offset: 0x0012BF74
		private void UpdateOceanWaterLineForAmbience()
		{
			int num = this.DrawSurfaceBG_GetLayerYOffset(Main.oceanBG);
			int num2 = 0;
			int num3 = Main.oceanBG;
			if (num3 <= 111)
			{
				if (num3 != 28 && num3 - 110 > 1)
				{
					goto IL_43;
				}
			}
			else if (num3 - 209 > 1)
			{
				if (num3 != 283)
				{
					goto IL_43;
				}
				num2 = 124;
				goto IL_43;
			}
			num2 = 102;
			IL_43:
			float yScreenPosition = (float)(this.bgTopY + num) + (float)num2 * Main.bgScale;
			AmbientSkyDrawCache.Instance.SetOceanLineInfo(yScreenPosition, Main.bgAlphaFarBackLayer[3]);
		}

		// Token: 0x060005E8 RID: 1512 RVA: 0x0012DDEC File Offset: 0x0012BFEC
		private void DrawSurfaceBG_Mushroom(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			Vector3 vector;
			vector..ctor(0.1f, 0.15f, 0.3f);
			Vector3 vector2;
			vector2..ctor(0.1f, 0.175f, 0.3f);
			Vector3 vector3;
			vector3..ctor(0.125f, 0.2f, 0.3f);
			float num = 0.5f;
			float num2 = 0.625f;
			float num3 = 0.75f;
			vector *= 3f;
			vector2 *= 3f;
			vector3 *= 3f;
			float num4 = (float)Main.ColorOfSurfaceBackgroundsModified.A / 255f;
			Color colorOfSurfaceBackgroundsModified = Main.ColorOfSurfaceBackgroundsModified;
			float num5 = (float)Main.rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
			float x = vector.X;
			float num6 = vector.Y + num5 / 2f;
			float num7 = vector.Z + num5;
			x *= 255f;
			num6 *= 255f;
			num7 *= 255f;
			x *= num * num4;
			num6 *= num * num4;
			num7 *= num * num4;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			Main.bgScale = 1.25f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[0]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
			this.bgParallax = 0.4;
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1400.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 320 + pushBGTopHack;
			}
			if (Main.bgWidthScaled != 0)
			{
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			}
			if (TextureAssets.Background[bgTexIndexes[0]].Value == null)
			{
				return;
			}
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < this.bgLoops; i++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[0]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			colorOfSurfaceBackgroundsModified = Main.ColorOfSurfaceBackgroundsModified;
			num5 = (float)Main.rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
			x = vector2.X;
			num6 = vector2.Y + num5 / 2f;
			num7 = vector2.Z + num5;
			x *= 255f;
			num6 *= 255f;
			num7 *= 255f;
			x *= num2 * num4;
			num6 *= num2 * num4;
			num7 *= num2 * num4;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			Main.bgScale = 1.32f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[1]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
			this.bgParallax = 0.43;
			this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1675.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 400 + pushBGTopHack;
				this.bgStartX -= 80;
			}
			if (Main.bgWidthScaled == 0)
			{
				return;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < this.bgLoops; j++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[1]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			colorOfSurfaceBackgroundsModified = Main.ColorOfSurfaceBackgroundsModified;
			num5 = (float)Main.rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - (int)Main.mouseTextColor) / 3000f;
			x = vector3.X;
			num6 = vector3.Y + num5 / 2f;
			num7 = vector3.Z + num5;
			x *= 255f * num4 * num3;
			num6 *= 255f * num4 * num3;
			num7 *= 255f * num4 * num3;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			Main.bgScale = 1.36f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			this.bgParallax = 0.49;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 1950.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			if (Main.bgWidthScaled == 0)
			{
				return;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[2]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
		}

		// Token: 0x060005E9 RID: 1513 RVA: 0x0012E6B8 File Offset: 0x0012C8B8
		private void DrawSurfaceBG_Crimson(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > -1)
			{
				Main.bgScale = 1.25f;
				this.bgParallax = 0.4;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[0]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (bgTexIndexes[0] == 105)
				{
					this.bgTopY += 50;
				}
				if (bgTexIndexes[0] == 174)
				{
					this.bgTopY -= 350;
				}
				if (Main.gameMenu)
				{
					this.bgTopY = 320 + pushBGTopHack;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[0]], Main.backgroundHeight[bgTexIndexes[0]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > -1)
			{
				Main.bgScale = 1.31f;
				this.bgParallax = 0.43;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[1]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 400 + pushBGTopHack;
					this.bgStartX -= 80;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < this.bgLoops; j++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[1]], Main.backgroundHeight[bgTexIndexes[1]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			Main.bgScale = 1.34f;
			this.bgParallax = 0.49;
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if (bgTexIndexes[2] == 175)
			{
				this.bgStartX -= 1000;
				this.bgTopY -= 400;
				this.bgLoops++;
			}
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[2]], Main.backgroundHeight[bgTexIndexes[2]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005EA RID: 1514 RVA: 0x0012EC44 File Offset: 0x0012CE44
		private void DrawSurfaceBG_Snow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] >= 0)
			{
				Main.bgScale = 1.25f;
				this.bgParallax = 0.4;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[0]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 320 + pushBGTopHack;
				}
				this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[0]], Main.backgroundHeight[bgTexIndexes[0]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[1] >= 0)
			{
				Main.bgScale = 1.31f;
				this.bgParallax = 0.43;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[1]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 400 + pushBGTopHack;
					this.bgStartX -= 80;
				}
				this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < this.bgLoops; j++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[1]], Main.backgroundHeight[bgTexIndexes[1]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[2] < 0)
			{
				return;
			}
			Main.bgScale = 1.34f;
			this.bgParallax = 0.49;
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[2]], Main.backgroundHeight[bgTexIndexes[2]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005EB RID: 1515 RVA: 0x0012F1AC File Offset: 0x0012D3AC
		private void SetBackgroundOffsets(int backgroundID, double backgroundTopMagicNumber, int pushBGTopHack)
		{
			int num = 0;
			int num2 = 0;
			if (backgroundID != 18)
			{
				switch (backgroundID)
				{
				case 207:
					this.bgParallax = 0.32;
					break;
				case 219:
					this.bgParallax = 0.25;
					break;
				case 220:
					this.bgParallax = 0.34;
					break;
				case 221:
					this.bgParallax = 0.43;
					break;
				case 222:
					num = 1800;
					num2 = 1400;
					break;
				case 223:
					num = 2150;
					num2 = 1850;
					break;
				case 224:
					num = 2500;
					num2 = 2400;
					break;
				case 234:
					this.bgParallax = 0.23;
					num = 1700;
					num2 = 1150;
					break;
				case 235:
					this.bgParallax = 0.33;
					num = 1950;
					num2 = 1550;
					break;
				case 236:
					this.bgParallax = 0.41;
					num = 2100;
					num2 = 2000;
					break;
				case 237:
					num = 1800;
					num2 = 1500;
					break;
				case 238:
					num = 1950;
					num2 = 1500;
					break;
				case 239:
					num = 2100;
					num2 = 1900;
					break;
				case 240:
					Main.bgScale = 1.15f;
					this.bgParallax = 0.3;
					num = 1800;
					num2 = 1500;
					break;
				case 241:
					Main.bgScale = 1.21f;
					this.bgParallax = 0.43;
					num = 1950;
					num2 = 1300;
					break;
				case 242:
					Main.bgScale = 1.34f;
					this.bgParallax = 0.49;
					num = 2100;
					num2 = 1400;
					break;
				case 243:
					Main.bgScale = 1.15f;
					this.bgParallax = 0.25;
					num = 1800;
					num2 = 1400;
					break;
				case 244:
					Main.bgScale = 1.21f;
					this.bgParallax = 0.35;
					num = 1950;
					num2 = 1550;
					break;
				case 245:
					Main.bgScale = 1.24f;
					this.bgParallax = 0.45;
					num = 2100;
					num2 = 1650;
					break;
				case 248:
					Main.bgScale = 1.3f;
					this.bgParallax = 0.37;
					num = 1800;
					num2 = 1100;
					break;
				case 249:
					Main.bgScale = 1.4f;
					this.bgParallax = 0.43;
					num = 1950;
					num2 = 1200;
					break;
				case 250:
					Main.bgScale = 1.7f;
					this.bgParallax = 0.49;
					num = 2000;
					num2 = 1000;
					break;
				case 255:
					Main.bgScale = 1.15f;
					this.bgParallax = 0.25;
					num = 1800;
					num2 = 1450;
					break;
				case 256:
					Main.bgScale = 1.21f;
					this.bgParallax = 0.32;
					num = 1950;
					num2 = 1550;
					break;
				case 257:
					Main.bgScale = 1.34f;
					this.bgParallax = 0.4;
					num = 2100;
					num2 = 1550;
					break;
				case 258:
					Main.bgScale = 1.25f;
					this.bgParallax = 0.23;
					num = 1800;
					num2 = 850;
					break;
				case 259:
					Main.bgScale = 1.31f;
					this.bgParallax = 0.33;
					num = 1950;
					num2 = 1500;
					break;
				case 260:
					Main.bgScale = 1.34f;
					this.bgParallax = 0.4;
					num = 2100;
					num2 = 1650;
					break;
				case 261:
					this.bgParallax = 0.27;
					break;
				case 262:
					this.bgParallax = 0.4;
					break;
				case 263:
					Main.bgScale = 1.25f;
					this.bgParallax = 0.23;
					num = 1800;
					num2 = 1450;
					break;
				case 264:
					Main.bgScale = 1.31f;
					this.bgParallax = 0.33;
					num = 1950;
					num2 = 1700;
					break;
				case 265:
					Main.bgScale = 1.34f;
					this.bgParallax = 0.4;
					num = 2100;
					num2 = 2000;
					break;
				case 266:
					Main.bgScale = 1.31f;
					this.bgParallax = 0.33;
					num = 1950;
					num2 = 1600;
					break;
				case 267:
					Main.bgScale = 1.25f;
					this.bgParallax = 0.23;
					num = 1700;
					num2 = 1300;
					break;
				case 268:
					Main.bgScale = 1.34f;
					this.bgParallax = 0.41;
					num = 2100;
					num2 = 1850;
					break;
				case 273:
					this.bgParallax = 0.49000000953674316;
					num = 2100;
					num2 = 1560;
					break;
				case 279:
					Main.bgScale = 2.5f;
					this.bgParallax = 0.3499999940395355;
					num = 1850;
					num2 = 1750;
					break;
				case 282:
					Main.bgScale = 2.6f;
					this.bgParallax = 0.25;
					num = 1800;
					num2 = 1340;
					break;
				case 284:
					this.bgParallax = 0.23;
					num = 1600;
					num2 = 900;
					break;
				case 285:
					this.bgParallax = 0.36;
					num = 1900;
					num2 = 960;
					break;
				case 286:
					this.bgParallax = 0.42;
					num = 2100;
					num2 = 1200;
					break;
				case 287:
					this.bgParallax = 0.21;
					num = 1700;
					num2 = 1560;
					break;
				case 288:
					this.bgParallax = 0.33;
					num = 1950;
					num2 = 1730;
					break;
				case 289:
					this.bgParallax = 0.41;
					num = 2100;
					num2 = 1400;
					break;
				}
			}
			else if (WorldGen.hallowBG == 3)
			{
				this.bgParallax = 0.17;
				Main.bgScale = 1.1f;
				num = 1400;
				num2 = 1100;
			}
			if (num != 0 || num2 != 0)
			{
				this.bgTopY = (int)(backgroundTopMagicNumber * (double)num + (double)num2) + (int)this.scAdj + pushBGTopHack;
			}
		}

		// Token: 0x060005EC RID: 1516 RVA: 0x0012F948 File Offset: 0x0012DB48
		private void DrawSurfaceBG_Hallow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > 0)
			{
				Main.bgScale = 1.25f;
				this.bgParallax = 0.4;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[0]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1.2f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 320 + pushBGTopHack;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[0]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > 0)
			{
				Main.bgScale = 1.31f;
				this.bgParallax = 0.43;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[1]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 400 + pushBGTopHack;
					this.bgStartX -= 80;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < this.bgLoops; j++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[1]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[2] <= 0)
			{
				return;
			}
			Main.bgScale = 1.34f;
			this.bgParallax = 0.49;
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[2]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005ED RID: 1517 RVA: 0x0012FE20 File Offset: 0x0012E020
		private void DrawSurfaceBG_GoodEvilDesert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
		{
			this.LoadBackground(26);
			Main.bgScale = 1.25f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[26] * Main.bgScale);
			this.bgParallax = 0.37;
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
			if (Main.gameMenu)
			{
				this.bgTopY = 320 + pushBGTopHack;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < this.bgLoops; i++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[26].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[26], Main.backgroundHeight[26])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			Main.bgScale = 1.34f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(27);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[27] * Main.bgScale);
			this.bgParallax = 0.49;
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)this.scAdj + pushBGTopHack;
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < this.bgLoops; j++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[27].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[27], Main.backgroundHeight[27])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005EE RID: 1518 RVA: 0x00130148 File Offset: 0x0012E348
		private void DrawSurfaceBG_Jungle(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			this.LoadBackground(bgTexIndexes[0]);
			Main.bgScale = 1.25f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
			this.bgParallax = 0.4;
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1660.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 320 + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 59)
			{
				this.bgTopY -= 200;
			}
			this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < this.bgLoops; i++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[0]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			this.LoadBackground(bgTexIndexes[1]);
			Main.bgScale = 1.31f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
			this.bgParallax = 0.43;
			this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1840.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 400 + pushBGTopHack;
				this.bgStartX -= 80;
			}
			if (bgTexIndexes[1] == 60)
			{
				this.bgTopY -= 175;
			}
			this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < this.bgLoops; j++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[1]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 1, 0f);
				}
			}
			Main.bgScale = 1.34f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			this.bgParallax = 0.49;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2060.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			if (bgTexIndexes[2] == 61)
			{
				this.bgTopY -= 150;
			}
			this.bgTopY += this.DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[2]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005EF RID: 1519 RVA: 0x001306BC File Offset: 0x0012E8BC
		private void DrawSurfaceBG_Desert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > 0)
			{
				Main.bgScale = 1.25f;
				this.bgParallax = 0.37;
				this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				this.LoadBackground(bgTexIndexes[0]);
				Main.bgScale *= bgGlobalScaleMultiplier;
				float num = (float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale;
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)num) - (double)(num / 2f));
				if (Main.gameMenu)
				{
					this.bgTopY = 320 + pushBGTopHack;
				}
				this.bgLoops = Main.screenWidth / (int)num + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)this.bgStartX + num * (float)i, (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[0]], Main.backgroundHeight[bgTexIndexes[0]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > 0)
			{
				Main.bgScale = 1.34f;
				this.bgParallax = 0.49;
				this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)this.scAdj + pushBGTopHack;
				this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.LoadBackground(bgTexIndexes[1]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (Main.gameMenu)
				{
					this.bgTopY = 480 + pushBGTopHack;
					this.bgStartX -= 120;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < this.bgLoops; j++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[1]], Main.backgroundHeight[bgTexIndexes[1]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
					}
				}
			}
			if (bgTexIndexes[2] <= 0)
			{
				return;
			}
			Main.bgScale = 1.34f;
			this.bgParallax = 0.49;
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[2]], Main.backgroundHeight[bgTexIndexes[2]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005F0 RID: 1520 RVA: 0x00130BD8 File Offset: 0x0012EDD8
		private void DrawSurfaceBG_DrawChangeOverlay(int backgroundAreaId)
		{
			Texture2D value = TextureAssets.MagicPixel.Value;
			float flashPower = WorldGen.BackgroundsCache.GetFlashPower(backgroundAreaId);
			Color color = Color.Black * flashPower;
			Main.spriteBatch.Draw(value, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), color);
		}

		// Token: 0x060005F1 RID: 1521 RVA: 0x00130C28 File Offset: 0x0012EE28
		private void DrawSurfaceBG_Corrupt(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			Main.bgScale = 1.25f;
			this.bgParallax = 0.4;
			this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[0]);
			if (Main.backgroundWidth[bgTexIndexes[0]] == 0 || Main.backgroundHeight[bgTexIndexes[0]] == 0)
			{
				return;
			}
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 320 + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 56)
			{
				this.bgTopY -= 100;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < this.bgLoops; i++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[0]], Main.backgroundHeight[bgTexIndexes[0]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
			Main.bgScale = 1.31f;
			this.bgParallax = 0.43;
			this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[1]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 400 + pushBGTopHack;
				this.bgStartX -= 80;
			}
			if (bgTexIndexes[0] == 56)
			{
				this.bgTopY -= 100;
			}
			if (Main.bgWidthScaled == 0)
			{
				Main.bgWidthScaled = 1;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				try
				{
					Texture2D value = TextureAssets.Background[bgTexIndexes[1]].Value;
					if (value != null)
					{
						for (int j = 0; j < this.bgLoops; j++)
						{
							Main.spriteBatch.Draw(value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[1]], Main.backgroundHeight[bgTexIndexes[1]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 1, 0f);
						}
					}
				}
				catch
				{
					this.LoadBackground(bgTexIndexes[1]);
				}
			}
			Main.bgScale = 1.34f;
			this.bgParallax = 0.49;
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)this.scAdj + pushBGTopHack;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			if (Main.bgWidthScaled == 0)
			{
				Main.bgWidthScaled = 150;
			}
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			if (bgTexIndexes[0] == 56)
			{
				this.bgTopY -= 100;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[bgTexIndexes[2]], Main.backgroundHeight[bgTexIndexes[2]])), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005F2 RID: 1522 RVA: 0x001311D8 File Offset: 0x0012F3D8
		private Rectangle? GetBackgroundRect(int backgroundTextureIndex)
		{
			Rectangle rectangle;
			rectangle..ctor(0, 0, 1, 1);
			int num;
			if (backgroundTextureIndex <= 235)
			{
				if (backgroundTextureIndex - 219 > 2)
				{
					if (backgroundTextureIndex != 235)
					{
						goto IL_DE;
					}
					num = (int)(this.GetBackgroundCounter() / 20U % 4U);
					rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2, 0, 0);
					rectangle.Inflate(0, -2);
					return new Rectangle?(rectangle);
				}
			}
			else if (backgroundTextureIndex - 271 > 2)
			{
				if (backgroundTextureIndex != 281)
				{
					goto IL_DE;
				}
				num = (int)(this.GetBackgroundCounter() / 5U % 4U);
				rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2, 0, 0);
				rectangle.Inflate(0, -2);
				return new Rectangle?(rectangle);
			}
			num = (int)(this.GetBackgroundCounter() / 15U % 4U);
			rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2, 0, 0);
			rectangle.Inflate(0, -2);
			return new Rectangle?(rectangle);
			IL_DE:
			return null;
		}

		// Token: 0x060005F3 RID: 1523 RVA: 0x001312CC File Offset: 0x0012F4CC
		private uint GetBackgroundCounter()
		{
			if (!Main.gameMenu)
			{
				return Main.GameUpdateCount;
			}
			return (uint)(Main.GlobalTimeWrappedHourly * 40f);
		}

		// Token: 0x060005F4 RID: 1524 RVA: 0x001312E8 File Offset: 0x0012F4E8
		private void DrawSurfaceBG_Forest(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			Main.bgScale = 1.25f;
			this.bgParallax = 0.4;
			this.bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)this.scAdj + pushBGTopHack;
			if (bgTexIndexes[0] == 91)
			{
				this.bgParallax = 0.27000001072883606;
				Main.bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 173)
			{
				this.bgParallax = 0.25;
				Main.bgScale = 1.3f;
			}
			if (bgTexIndexes[0] == 178)
			{
				this.bgParallax = 0.30000001192092896;
				Main.bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 184)
			{
				this.bgParallax = 0.25;
				Main.bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 282)
			{
				Main.bgScale = 1.4f;
			}
			this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			Main.bgScale *= bgGlobalScaleMultiplier;
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			if (bgTexIndexes[0] >= 0)
			{
				this.SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				this.LoadBackground(bgTexIndexes[0]);
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[0]] * Main.bgScale);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				if (bgTexIndexes[0] == 91)
				{
					this.bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)this.scAdj + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 173)
				{
					this.bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)this.scAdj + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 184)
				{
					this.bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)this.scAdj + pushBGTopHack;
				}
				if (Main.gameMenu)
				{
					this.bgTopY = 320 + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 50)
				{
					this.bgTopY -= 50;
				}
				if (bgTexIndexes[0] == 53)
				{
					this.bgTopY -= 100;
				}
				if (bgTexIndexes[0] == 91)
				{
					this.bgTopY += 200;
				}
				if (bgTexIndexes[0] == 173)
				{
					this.bgTopY += 200;
				}
				if (bgTexIndexes[0] == 178)
				{
					this.bgTopY += 75;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						if (bgTexIndexes[0] != -1)
						{
							Asset<Texture2D> asset = TextureAssets.Background[bgTexIndexes[0]];
							if (bgTexIndexes[0] == 173)
							{
								int num2 = (int)(this.GetBackgroundCounter() / 10U);
								num2 %= 4;
								int num3 = 251 + num2;
								this.LoadBackground(num3);
								asset = TextureAssets.Background[num3];
							}
							if (asset.Value != null)
							{
								Main.spriteBatch.Draw(asset.Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * i), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[0]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
							}
						}
					}
				}
			}
			if (bgTexIndexes[1] >= 0)
			{
				this.LoadBackground(bgTexIndexes[1]);
				Main.bgScale = 1.31f;
				Main.bgScale *= bgGlobalScaleMultiplier;
				Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[1]] * Main.bgScale);
				if (Main.bgWidthScaled == 0)
				{
					Main.bgWidthScaled = 1;
				}
				this.bgParallax = 0.43;
				this.SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
				this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
				this.bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)this.scAdj + pushBGTopHack;
				if (Main.gameMenu)
				{
					this.bgTopY = 400 + pushBGTopHack;
					this.bgStartX -= 80;
				}
				if (bgTexIndexes[1] == 51)
				{
					this.bgTopY -= 50;
				}
				if (bgTexIndexes[1] == 54)
				{
					this.bgTopY -= 100;
				}
				this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < this.bgLoops; j++)
					{
						Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * j), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[1]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 1, 0f);
					}
				}
			}
			if (bgTexIndexes[2] < 0)
			{
				return;
			}
			this.LoadBackground(bgTexIndexes[2]);
			Main.bgScale = 1.34f;
			Main.bgScale *= bgGlobalScaleMultiplier;
			this.bgParallax = 0.49;
			this.SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
			if (bgTexIndexes[0] == 91)
			{
				Main.bgScale = 1.3f;
				Main.bgScale *= bgGlobalScaleMultiplier;
				this.bgParallax = 0.42;
			}
			if (bgTexIndexes[2] < 0 && WorldGen.drunkWorldGen)
			{
				return;
			}
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[bgTexIndexes[2]] * Main.bgScale);
			if (Main.bgWidthScaled == 0)
			{
				Main.bgWidthScaled = 1;
			}
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgWidthScaled) - (double)(Main.bgWidthScaled / 2));
			this.bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)this.scAdj + pushBGTopHack;
			if (Main.gameMenu)
			{
				this.bgTopY = 480 + pushBGTopHack;
				this.bgStartX -= 120;
			}
			if (bgTexIndexes[2] == 52)
			{
				this.bgTopY -= 50;
			}
			if (bgTexIndexes[2] == 55)
			{
				this.bgTopY -= 100;
			}
			if (bgTexIndexes[2] == 92)
			{
				this.bgTopY += 150;
			}
			this.bgLoops = Main.screenWidth / Main.bgWidthScaled + 2;
			if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < this.bgLoops; k++)
				{
					Main.spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(this.bgStartX + Main.bgWidthScaled * k), (float)this.bgTopY), this.GetBackgroundRect(bgTexIndexes[2]), Main.ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), Main.bgScale, 0, 0f);
				}
			}
		}

		// Token: 0x060005F5 RID: 1525 RVA: 0x00131AA4 File Offset: 0x0012FCA4
		private void DrawBackgroundBlackFill()
		{
			float value = (float)(Main.worldSurface + 2.0) * 16f - Main.screenPosition.Y;
			float value2 = (float)Main.maxTilesY * 16f - 2880f - (Main.screenPosition.Y + (float)Main.screenHeight);
			value = MathHelper.Clamp(value, 0f, (float)Main.screenHeight);
			value2 = MathHelper.Clamp(value2, 0f, (float)Main.screenHeight);
			if (value2 - value > 0f)
			{
				Main.spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle(0, (int)value, Main.screenWidth, (int)(value2 - value)), Color.Black);
			}
		}

		// Token: 0x060005F6 RID: 1526 RVA: 0x00131B50 File Offset: 0x0012FD50
		public unsafe void DrawTileCracks(int crackType, HitTile hitter)
		{
			Vector2 vector;
			vector..ctor((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				vector = Vector2.Zero;
			}
			bool flag = Main.ShouldShowInvisibleWalls();
			for (int i = 0; i < hitter.data.Length; i++)
			{
				if (hitter.data[i].type == crackType)
				{
					int damage = hitter.data[i].damage;
					if (damage >= 20)
					{
						int x = hitter.data[i].X;
						int y = hitter.data[i].Y;
						if (WorldGen.InWorld(x, y, 0))
						{
							bool flag2 = Main.tile[x, y] != null;
							if (flag2 && crackType == 1)
							{
								flag2 = (flag2 && Main.tile[x, y].active() && (flag || !Main.tile[x, y].invisibleBlock()));
							}
							if (flag2 && crackType == 2)
							{
								flag2 = (flag2 && *Main.tile[x, y].wall != 0 && (flag || !Main.tile[x, y].invisibleWall()));
							}
							if (flag2)
							{
								bool flag3 = false;
								bool flag4 = false;
								if (TileLoader.IsClosedDoor(Main.tile[x, y]))
								{
									flag3 = false;
								}
								else if (Main.tileSolid[(int)(*Main.tile[x, y].type)] && !Main.tileSolidTop[(int)(*Main.tile[x, y].type)])
								{
									flag3 = true;
								}
								else if (WorldGen.IsTreeType((int)(*Main.tile[x, y].type)))
								{
									flag4 = true;
									int num = (int)(*Main.tile[x, y].frameX / 22);
									int num2 = (int)(*Main.tile[x, y].frameY / 22);
									if (num2 < 9)
									{
										flag3 = (((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && (num != 5 || num2 < 6 || num2 > 8));
									}
								}
								else if (*Main.tile[x, y].type == 72)
								{
									flag4 = true;
									if (*Main.tile[x, y].frameX <= 34)
									{
										flag3 = true;
									}
								}
								if (flag3 && Main.tile[x, y].slope() == 0 && !Main.tile[x, y].halfBrick())
								{
									int num3 = 0;
									if (damage >= 80)
									{
										num3 = 3;
									}
									else if (damage >= 60)
									{
										num3 = 2;
									}
									else if (damage >= 40)
									{
										num3 = 1;
									}
									else if (damage >= 20)
									{
										num3 = 0;
									}
									Rectangle value;
									value..ctor(hitter.data[i].crackStyle * 18, num3 * 18, 16, 16);
									if (flag4)
									{
										value.X = (4 + hitter.data[i].crackStyle / 2) * 18;
									}
									Main.spriteBatch.Draw(TextureAssets.TileCrack.Value, new Vector2((float)(x * 16 - (int)Main.screenPosition.X), (float)(y * 16 - (int)Main.screenPosition.Y)) + vector, new Rectangle?(value), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, 0, 0f);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060005F7 RID: 1527 RVA: 0x00131F10 File Offset: 0x00130110
		private static void CheckMonoliths()
		{
			if (Main.dedServ)
			{
				return;
			}
			bool flag = Main.player[Main.myPlayer].ZoneTowerVortex || Main.player[Main.myPlayer].ZoneTowerNebula || Main.player[Main.myPlayer].ZoneTowerStardust || Main.player[Main.myPlayer].ZoneTowerSolar;
			bool stardustMonolithShader = Main.player[Main.myPlayer].stardustMonolithShader;
			bool nebulaMonolithShader = Main.player[Main.myPlayer].nebulaMonolithShader;
			bool vortexMonolithShader = Main.player[Main.myPlayer].vortexMonolithShader;
			bool solarMonolithShader = Main.player[Main.myPlayer].solarMonolithShader;
			bool moonLordMonolithShader = Main.player[Main.myPlayer].moonLordMonolithShader;
			for (int i = 0; i < Main.MonolithFilterNames.Length; i++)
			{
				bool flag2 = !flag && i == Main.SceneMetrics.ActiveMonolithType;
				if ((i == 0 && vortexMonolithShader) || (i == 1 && nebulaMonolithShader) || (i == 2 && stardustMonolithShader) || (i == 3 && solarMonolithShader) || (i == 4 && moonLordMonolithShader))
				{
					flag2 = true;
				}
				if (flag2)
				{
					if (!Terraria.Graphics.Effects.Filters.Scene[Main.MonolithFilterNames[i]].IsActive())
					{
						Terraria.Graphics.Effects.Filters.Scene.Activate(Main.MonolithFilterNames[i], default(Vector2), Array.Empty<object>());
					}
					if (!SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Activate(Main.MonolithSkyNames[i], default(Vector2), Array.Empty<object>());
					}
				}
				else
				{
					if (Terraria.Graphics.Effects.Filters.Scene[Main.MonolithFilterNames[i]].IsActive())
					{
						Terraria.Graphics.Effects.Filters.Scene.Deactivate(Main.MonolithFilterNames[i], Array.Empty<object>());
					}
					if (SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Deactivate(Main.MonolithSkyNames[i], Array.Empty<object>());
					}
				}
			}
		}

		// Token: 0x060005F8 RID: 1528 RVA: 0x00132109 File Offset: 0x00130309
		private void GraphicsDeviceLost(object sender, EventArgs evt)
		{
		}

		// Token: 0x060005F9 RID: 1529 RVA: 0x0013210C File Offset: 0x0013030C
		protected override void Draw(GameTime gameTime)
		{
			try
			{
				this.Draw_Inner(gameTime);
			}
			catch (Exception e)
			{
				Logging.Terraria.Error(e);
				throw;
			}
		}

		// Token: 0x060005FA RID: 1530 RVA: 0x00132140 File Offset: 0x00130340
		private void Draw_Inner(GameTime gameTime)
		{
			if (!this._isDrawingOrUpdating && Main.IsGraphicsDeviceAvailable)
			{
				this._isDrawingOrUpdating = true;
				this.EnsureRenderTargetContent();
				this.DoDraw(gameTime);
				if (Main.OnPostDraw != null)
				{
					Main.OnPostDraw(gameTime);
				}
				Main.Assets.TransferCompletedAssets();
				ModContent.TransferCompletedAssets();
				this._isDrawingOrUpdating = false;
			}
		}

		// Token: 0x060005FB RID: 1531 RVA: 0x0013219C File Offset: 0x0013039C
		private void DoDraw(GameTime gameTime)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			if (Main.showSplash)
			{
				this.DrawSplash(gameTime);
				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			if (Main._drawCycleCounter == 0UL)
			{
				Main.TileFrameSeed = Utils.RandomNextSeed(Main.TileFrameSeed);
			}
			Main._drawCycleCounter = (Main._drawCycleCounter + 1UL) % 5UL;
			Main.MenuUI.IsVisible = (Main.gameMenu && Main.menuMode == 888);
			Main.InGameUI.IsVisible = (!Main.gameMenu && Main.InGameUI.CurrentState != null);
			PlayerInput.UpdateMainMouse();
			this.RefreshPlayerDrawOrder();
			CaptureManager.Instance.DrawTick();
			TimeLogger.NewDrawFrame();
			if (!Main.gameMenu)
			{
				this.TilesRenderer.PreparePaintForTilesOnScreen();
			}
			for (int i = 0; i < Main.ContentThatNeedsRenderTargets.Count; i++)
			{
				Main.ContentThatNeedsRenderTargets[i].PrepareRenderTarget(base.GraphicsDevice, Main.spriteBatch);
			}
			this.TilePaintSystem.PrepareAllRequests();
			TimeLogger.DetailedDrawTime(0);
			if (Main.loadMap)
			{
				Main.refreshMap = false;
				this.DrawToMap();
				TimeLogger.DetailedDrawTime(1);
			}
			if (Lighting.UpdateEveryFrame)
			{
				Main.drawToScreen = true;
			}
			else
			{
				Main.drawToScreen = false;
			}
			if (Main.drawToScreen && Main.targetSet)
			{
				this.ReleaseTargets();
			}
			if (!Main.drawToScreen && !Main.targetSet)
			{
				this.InitTargets();
			}
			Main.fpsCount++;
			if (!base.IsActive)
			{
				Main.maxQ = true;
			}
			if (!Main.dedServ)
			{
				this.UpdateDisplaySettings();
				if (Main.OnPreDraw != null)
				{
					Main.OnPreDraw(gameTime);
				}
			}
			Main.drawsCountedForFPS++;
			Main.screenLastPosition = Main.screenPosition;
			if (Main.stackSplit == 0)
			{
				Main.timesTriedToFastStack = 0;
				Main.stackCounter = 0;
				Main.stackDelay = 7;
				Main.superFastStack = 0;
			}
			else
			{
				Main.stackCounter++;
				int num = (Main.stackDelay == 7) ? 30 : ((Main.stackDelay == 6) ? 25 : ((Main.stackDelay == 5) ? 20 : ((Main.stackDelay == 4) ? 15 : ((Main.stackDelay != 3) ? 5 : 10))));
				if (Main.stackCounter >= num)
				{
					Main.stackDelay--;
					if (Main.stackDelay < 2)
					{
						Main.stackDelay = 2;
						Main.superFastStack++;
					}
					if (Main.timesTriedToFastStack < 10)
					{
						Main.superFastStack = 0;
					}
					Main.timesTriedToFastStack++;
					Main.stackCounter = 0;
				}
			}
			if (Main.myPlayer >= 0)
			{
				Main.player[Main.myPlayer].lastMouseInterface = Main.player[Main.myPlayer].mouseInterface;
				Main.player[Main.myPlayer].mouseInterface = false;
			}
			if (Main.mapTime > 0)
			{
				Main.mapTime--;
			}
			if (Main.gameMenu)
			{
				Main.mapTime = Main.mapTimeMax;
			}
			Main.HoverItem = new Item();
			Main.DoDraw_UpdateCameraPosition();
			Main.CheckMonoliths();
			Main.sunCircle += 0.01f;
			if ((double)Main.sunCircle > 6.285)
			{
				Main.sunCircle -= 6.285f;
			}
			TimeLogger.DetailedDrawReset();
			if (!Main.gameMenu)
			{
				this.waterfallManager.FindWaterfalls(false);
				TimeLogger.DetailedDrawTime(2);
				if (Main.renderNow)
				{
					Main.screenLastPosition = Main.screenPosition;
					Main.renderNow = false;
					Main.renderCount = 99;
					this.Draw(gameTime);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					this.RenderTiles();
					Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderBackground();
					Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWalls();
					Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderTiles2();
					Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWater();
					Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					Main.renderCount = 99;
				}
				else
				{
					if (Main.renderCount == 3)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == ((Lighting.LegacyEngine.Mode == 0) ? 2 : 3))
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == ((Lighting.LegacyEngine.Mode == 0) ? 0 : 3))
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 1)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
				if (Main.render && !Main.gameMenu)
				{
					if (Math.Abs(Main.sceneTilePos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTilePos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneTile2Pos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTile2Pos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneBackgroundPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneBackgroundPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWallPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWallPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWaterPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWaterPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
			}
			if (!Main.loadMap)
			{
				if (!Main.gameMenu)
				{
					TimeLogger.DetailedDrawReset();
					Stopwatch stopwatch2 = new Stopwatch();
					stopwatch2.Start();
					int num2 = 0;
					int x;
					int y;
					while (stopwatch2.ElapsedMilliseconds < 5L && Main.sectionManager.GetNextMapDraw(Main.player[Main.myPlayer].position, out x, out y))
					{
						this.DrawToMap_Section(x, y);
						num2++;
					}
					TimeLogger.DetailedDrawTime(3);
				}
				if (Main.updateMap)
				{
					if (base.IsActive || Main.netMode == 1)
					{
						if (Main.refreshMap)
						{
							Main.refreshMap = false;
							Main.sectionManager.ClearMapDraw();
						}
						this.DrawToMap();
						Main.updateMap = false;
					}
					else if (MapHelper.numUpdateTile > 0)
					{
						this.DrawToMap();
					}
					TimeLogger.DetailedDrawTime(4);
				}
			}
			this.bgParallax = 0.1;
			this.bgStartX = (int)(0.0 - Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
			this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
			this.bgStartY = 0;
			this.bgLoopsY = 0;
			this.bgTopY = (int)((double)(0f - Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTopY = -200;
			}
			double num3 = Main.desiredWorldEventsUpdateRate;
			float num4 = 0.0005f * (float)num3;
			if (Main.gameMenu)
			{
				num4 *= 20f;
			}
			if (Main.raining)
			{
				if (Main.cloudAlpha > Main.maxRaining)
				{
					Main.cloudAlpha -= num4;
					if (Main.cloudAlpha < Main.maxRaining)
					{
						Main.cloudAlpha = Main.maxRaining;
					}
				}
				else if (Main.cloudAlpha < Main.maxRaining)
				{
					Main.cloudAlpha += num4;
					if (Main.cloudAlpha > Main.maxRaining)
					{
						Main.cloudAlpha = Main.maxRaining;
					}
				}
			}
			else
			{
				Main.cloudAlpha -= num4;
				if (Main.cloudAlpha < 0f)
				{
					Main.cloudAlpha = 0f;
				}
			}
			if (Main.gameMenu || Main.netMode == 2)
			{
				Main.bgDelay = 1000;
				Main.SceneMetrics.EvilTileCount = (int)(Main.bgAlphaFrontLayer[1] * (float)SceneMetrics.CorruptionTileMax);
			}
			Color moonColor = Color.White;
			Color sunColor = Color.White;
			float num5 = (float)(Main.SceneMetrics.MushroomTileCount / SceneMetrics.MushroomTileMax);
			float num6 = Main.SmoothedMushroomLightInfluence;
			if (num5 > 0f)
			{
				if (num5 > num6)
				{
					num6 += 0.01f;
				}
				if (num5 < num6)
				{
					num6 -= 0.01f;
				}
			}
			else
			{
				num6 -= 0.02f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 1f)
			{
				num6 = 1f;
			}
			Main.SmoothedMushroomLightInfluence = num6;
			Main.SetBackColor(new Main.InfoToSetBackColor
			{
				isInGameMenuOrIsServer = (Main.gameMenu || Main.netMode == 2),
				CorruptionBiomeInfluence = (float)Main.SceneMetrics.EvilTileCount / (float)SceneMetrics.CorruptionTileMax,
				CrimsonBiomeInfluence = (float)Main.SceneMetrics.BloodTileCount / (float)SceneMetrics.CrimsonTileMax,
				JungleBiomeInfluence = (float)Main.SceneMetrics.JungleTileCount / (float)SceneMetrics.JungleTileMax,
				MushroomBiomeInfluence = Main.SmoothedMushroomLightInfluence,
				GraveyardInfluence = Main.GraveyardVisualIntensity,
				BloodMoonActive = (Main.bloodMoon || Main.SceneMetrics.BloodMoonMonolith),
				LanternNightActive = LanternNight.LanternsUp
			}, out sunColor, out moonColor);
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTopY = 0;
			}
			Main.ApplyColorOfTheSkiesToTiles();
			Main.UpdateAtmosphereTransparencyToSkyColor();
			base.GraphicsDevice.Clear(Color.Black);
			base.Draw(gameTime);
			float val = (float)Main.screenWidth / (ModLoader.removeForcedMinimumZoom ? 8192f : Main.MinimumZoomComparerX);
			float val2 = (float)Main.screenHeight / (ModLoader.removeForcedMinimumZoom ? 8192f : Main.MinimumZoomComparerY);
			Main.ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
			Main.GameViewMatrix.Effects = ((!Main.gameMenu && Main.player[Main.myPlayer].gravDir != 1f) ? 2 : 0);
			Main.BackgroundViewMatrix.Effects = Main.GameViewMatrix.Effects;
			Main.BackgroundViewMatrix.Zoom = new Vector2(Main.ForcedMinimumZoom);
			Main.GameViewMatrix.Zoom = new Vector2(Main.ForcedMinimumZoom * MathHelper.Clamp(Main.GameZoomTarget, 1f, 2f));
			SystemLoader.ModifyTransformMatrix(ref Main.GameViewMatrix);
			if (Main.gameMenu || Main.player[Main.myPlayer].gravDir == 1f)
			{
				Main.Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				Main.Rasterizer = RasterizerState.CullClockwise;
			}
			bool flag = Main.gameMenu;
			if (Main.dontStarveWorld && WorldGen.generatingWorld)
			{
				if (!Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene.Activate("Sepia", default(Vector2), Array.Empty<object>());
				}
				flag = false;
			}
			else if (flag && Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene.Deactivate("Sepia", Array.Empty<object>());
			}
			if (Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsInUse())
			{
				flag = false;
			}
			bool flag2 = !Main.drawToScreen && Main.netMode != 2 && !flag && !Main.mapFullscreen && Lighting.NotRetro && Terraria.Graphics.Effects.Filters.Scene.CanCapture();
			if (flag2)
			{
				Terraria.Graphics.Effects.Filters.Scene.BeginCapture(Main.screenTarget, Color.Black);
			}
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.BackgroundViewMatrix.TransformationMatrix);
			TimeLogger.DetailedDrawReset();
			Main.SceneArea sceneArea2 = new Main.SceneArea
			{
				bgTopY = this.bgTopY,
				totalHeight = (float)Main.screenHeight,
				totalWidth = (float)Main.screenWidth,
				SceneLocalScreenPositionOffset = Vector2.Zero
			};
			if (!Main.mapFullscreen)
			{
				this.unityMouseOver = false;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					Asset<Texture2D> asset = TextureAssets.Background[Main.background];
					Rectangle destinationRectangle;
					destinationRectangle..ctor(this.bgStartX, this.bgTopY, asset.Width(), Math.Max(Main.screenHeight, asset.Height()));
					if (destinationRectangle.Bottom < asset.Height())
					{
						int num7 = asset.Height() - destinationRectangle.Bottom;
						destinationRectangle.Height += num7;
					}
					for (int j = 0; j < this.bgLoops; j++)
					{
						destinationRectangle.X = this.bgStartX + asset.Width() * j;
						Main.spriteBatch.Draw(asset.Value, destinationRectangle, Main.ColorOfTheSkies);
					}
					TimeLogger.DetailedDrawTime(6);
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.BackgroundViewMatrix.EffectMatrix);
				if (Main.shimmerAlpha != 1f)
				{
					this.DrawStarsInBackground(sceneArea2, false);
				}
				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2.0)
				{
					this.DrawSunAndMoon(sceneArea2, moonColor, sunColor, num6);
				}
				TimeLogger.DetailedDrawTime(7);
			}
			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Sky, false);
			Main.spriteBatch.End();
			Vector2 vector3 = Main.screenPosition;
			int num19 = Main.screenWidth;
			int num8 = Main.screenHeight;
			Main.screenWidth = (int)((float)Main.screenWidth / Main.BackgroundViewMatrix.Zoom.X);
			Main.screenHeight = (int)((float)Main.screenHeight / Main.BackgroundViewMatrix.Zoom.Y);
			Main.screenPosition += Main.BackgroundViewMatrix.Translation;
			Matrix transformationMatrix = Main.BackgroundViewMatrix.TransformationMatrix;
			transformationMatrix.Translation -= Main.BackgroundViewMatrix.ZoomMatrix.Translation * new Vector3(1f, Main.BackgroundViewMatrix.Effects.HasFlag(2) ? -1f : 1f, 1f);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Main.Rasterizer, null, transformationMatrix);
			Main.CurrentFrameFlags.Hacks.CurrentBackgroundMatrixForCreditsRoll = transformationMatrix;
			this.DrawBG();
			Main.screenWidth = num19;
			Main.screenHeight = num8;
			Main.screenPosition = vector3;
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Main.Rasterizer, null, Main.GameViewMatrix.TransformationMatrix);
			this.DrawBackgroundBlackFill();
			Main.spriteBatch.End();
			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Landscape, true);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Main.Rasterizer, null, Main.UIScaleMatrix);
			if (Main.gameMenu || Main.netMode == 2)
			{
				Main.spriteBatch.End();
				Point screenSizeCache;
				Point screenSizeCacheAfterScaling;
				this.PreDrawMenu(out screenSizeCache, out screenSizeCacheAfterScaling);
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Main.Rasterizer, null, Main.UIScaleMatrix);
				this.DrawMenu(gameTime);
				Main.PostDrawMenu(screenSizeCache, screenSizeCacheAfterScaling);
				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				if (flag2)
				{
					Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, Main.screenTarget, Main.screenTargetSwap, Color.Black);
				}
				return;
			}
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			this.DoLightTiles();
			TimeLogger.DetailedDrawReset();
			if (!Main.mapFullscreen)
			{
				if (Main.shimmerAlpha > 0f)
				{
					Main.spriteBatch.Draw(TextureAssets.MagicPixel.Value, Vector2.Zero, null, Color.Black * Main.shimmerAlpha, 0f, Vector2.Zero, new Vector2(Main.Camera.UnscaledSize.X + (float)(Main.offScreenRange * 2), Main.Camera.UnscaledSize.Y + (float)(Main.offScreenRange * 2)), 0, 0f);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.InWorldUI, false);
				Color white = Color.White;
				if (Main.drawToScreen)
				{
					this.DrawWaters(true);
				}
				else
				{
					Main.spriteBatch.Draw(this.backWaterTarget, Main.sceneBackgroundPos - Main.screenPosition, Color.White);
					TimeLogger.DetailedDrawTime(11);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.BackgroundWater, false);
				float x2 = (Main.sceneBackgroundPos.X - Main.screenPosition.X + (float)Main.offScreenRange) * Main.caveParallax - (float)Main.offScreenRange;
				if (Main.shimmerAlpha > 0f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null);
					PlayerInput.SetZoom_Unscaled();
					this.DrawStarsInBackground(sceneArea2, true);
					Main.spriteBatch.End();
					PlayerInput.SetDesiredZoomContext(ZoomContext.World);
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				}
				if (Main.drawToScreen)
				{
					Main.tileBatch.Begin();
					this.DrawBackground();
					Main.tileBatch.End();
				}
				else
				{
					Main.spriteBatch.Draw(this.backgroundTarget, new Vector2(x2, Main.sceneBackgroundPos.Y - Main.screenPosition.Y), Color.White);
					TimeLogger.DetailedDrawTime(12);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Background, false);
				ScreenDarkness.DrawBack(Main.spriteBatch);
				Main.magmaBGFrameCounter++;
				if (Main.magmaBGFrameCounter >= 8)
				{
					Main.magmaBGFrameCounter = 0;
					Main.magmaBGFrame++;
					if (Main.magmaBGFrame >= 3)
					{
						Main.magmaBGFrame = 0;
					}
				}
				this.DoDraw_WallsTilesNPCs();
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.TilesAndNPCs, false);
				if (!Main.mapFullscreen && Main.mapStyle == 2)
				{
					try
					{
						this.DrawMap(gameTime);
					}
					catch (Exception e)
					{
						if (!Main.ignoreErrors)
						{
							throw;
						}
						TimeLogger.DrawException(e);
					}
				}
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				SystemLoader.PostDrawTiles();
				TimeLogger.DetailedDrawTime(35);
				Main.HasInteractibleObjectThatIsNotATile = false;
				this.SortDrawCacheWorms();
				this.DrawSuperSpecialProjectiles(this.DrawCacheFirstFractals, true);
				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
				this.DrawProjectiles();
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				Main.ParticleSystem_World_BehindPlayers.Settings.AnchorPosition = -Main.screenPosition;
				Main.ParticleSystem_World_BehindPlayers.Draw(Main.spriteBatch);
				Main.spriteBatch.End();
				this.DrawPlayers_AfterProjectiles();
				this.DrawCachedProjs(this.DrawCacheProjsOverPlayers, true);
				Main.spriteBatch.Begin(1, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				Main.ParticleSystem_World_OverPlayers.Settings.AnchorPosition = -Main.screenPosition;
				Main.ParticleSystem_World_OverPlayers.Draw(Main.spriteBatch);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				this.DrawCachedNPCs(this.DrawCacheNPCsOverPlayers, false);
				if (!Main.gamePaused)
				{
					Main.essScale += (float)Main.essDir * 0.01f;
					if (Main.essScale > 1f)
					{
						Main.essDir = -1;
						Main.essScale = 1f;
					}
					if ((double)Main.essScale < 0.7)
					{
						Main.essDir = 1;
						Main.essScale = 0.7f;
					}
				}
				this.DrawItems();
				TimeLogger.DetailedDrawTime(22);
				this.DrawRain();
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawGore();
						goto IL_1882;
					}
					catch (Exception e2)
					{
						TimeLogger.DrawException(e2);
						goto IL_1882;
					}
				}
				this.DrawGore();
				IL_1882:
				Main.spriteBatch.End();
				this.DrawDust();
				Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Entities, false);
				if (Main.drawToScreen)
				{
					this.DrawWaters(false);
					if (WiresUI.Settings.DrawWires)
					{
						this.DrawWires();
					}
				}
				else
				{
					Main.spriteBatch.Draw(Main.waterTarget, Main.sceneWaterPos - Main.screenPosition, Color.White);
					if (WiresUI.Settings.DrawWires)
					{
						this.DrawWires();
					}
					TimeLogger.DetailedDrawTime(26);
				}
				if (Main.shimmerAlpha > 0f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null, Main.BackgroundViewMatrix.EffectMatrix);
					PlayerInput.SetZoom_Unscaled();
					this.DrawStarsInForeground(sceneArea2);
					Main.spriteBatch.End();
					PlayerInput.SetDesiredZoomContext(ZoomContext.World);
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.ForegroundWater, false);
				this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, false);
				this.DrawInfernoRings();
				ScreenDarkness.DrawFront(Main.spriteBatch);
				MoonlordDeathDrama.DrawWhite(Main.spriteBatch);
				ScreenObstruction.Draw(Main.spriteBatch);
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.All, true);
				if (flag2)
				{
					Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, Main.screenTarget, Main.screenTargetSwap, Color.Black);
				}
				TimeLogger.DetailedDrawTime(36);
				if (!Main.hideUI)
				{
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null, Main.UIScaleMatrix);
					TimeLogger.DetailedDrawReset();
					this.DrawPlayerChatBubbles();
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null, Main.GameViewMatrix.ZoomMatrix);
					float targetScale = CombatText.TargetScale;
					for (int k = 0; k < 100; k++)
					{
						if (Main.combatText[k].active)
						{
							int num9 = 0;
							if (Main.combatText[k].crit)
							{
								num9 = 1;
							}
							Vector2 vector2 = FontAssets.CombatText[num9].Value.MeasureString(Main.combatText[k].text);
							Vector2 origin;
							origin..ctor(vector2.X * 0.5f, vector2.Y * 0.5f);
							float num10 = Main.combatText[k].scale / targetScale;
							float num11 = (float)Main.combatText[k].color.R;
							float num12 = (float)Main.combatText[k].color.G;
							float num13 = (float)Main.combatText[k].color.B;
							float num14 = (float)Main.combatText[k].color.A;
							num11 *= num10 * Main.combatText[k].alpha * 0.3f;
							num13 *= num10 * Main.combatText[k].alpha * 0.3f;
							num12 *= num10 * Main.combatText[k].alpha * 0.3f;
							num14 *= num10 * Main.combatText[k].alpha;
							Color color;
							color..ctor((int)num11, (int)num12, (int)num13, (int)num14);
							for (int l = 0; l < 5; l++)
							{
								float num15 = 0f;
								float num16 = 0f;
								switch (l)
								{
								case 0:
									num15 -= targetScale;
									break;
								case 1:
									num15 += targetScale;
									break;
								case 2:
									num16 -= targetScale;
									break;
								case 3:
									num16 += targetScale;
									break;
								default:
									num11 = (float)Main.combatText[k].color.R * num10 * Main.combatText[k].alpha;
									num13 = (float)Main.combatText[k].color.B * num10 * Main.combatText[k].alpha;
									num12 = (float)Main.combatText[k].color.G * num10 * Main.combatText[k].alpha;
									num14 = (float)Main.combatText[k].color.A * num10 * Main.combatText[k].alpha;
									color..ctor((int)num11, (int)num12, (int)num13, (int)num14);
									break;
								}
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									float num17 = Main.combatText[k].position.Y - Main.screenPosition.Y;
									num17 = (float)Main.screenHeight - num17;
									DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.CombatText[num9].Value, Main.combatText[k].text, new Vector2(Main.combatText[k].position.X - Main.screenPosition.X + num15 + origin.X, num17 + num16 + origin.Y), color, Main.combatText[k].rotation, origin, Main.combatText[k].scale, 0, 0f);
								}
								else
								{
									DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.CombatText[num9].Value, Main.combatText[k].text, new Vector2(Main.combatText[k].position.X - Main.screenPosition.X + num15 + origin.X, Main.combatText[k].position.Y - Main.screenPosition.Y + num16 + origin.Y), color, Main.combatText[k].rotation, origin, Main.combatText[k].scale, 0, 0f);
								}
							}
						}
					}
					targetScale = PopupText.TargetScale;
					if (targetScale == 0f)
					{
						targetScale = 1f;
					}
					Main.DrawItemTextPopups(targetScale);
					PlayerInput.SetZoom_UI();
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null, Main.UIScaleMatrix);
					Main.DrawNetplayStatusText();
					this.DrawFPS();
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null, Main.GameViewMatrix.ZoomMatrix);
					PlayerInput.SetZoom_World();
					if (Main.BlackFadeIn > 0)
					{
						if (Main.BlackFadeIn < 0)
						{
							Main.BlackFadeIn = 0;
						}
						int num18 = Main.BlackFadeIn;
						if (num18 > 255)
						{
							num18 = 255;
						}
						Main.BlackFadeIn -= 25;
						Main.spriteBatch.Draw(TextureAssets.SplashTexture16x9.Value, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Color(0, 0, 0, num18));
					}
					Main.spriteBatch.End();
					if (!Main.mapFullscreen)
					{
						if (Main.ignoreErrors)
						{
							try
							{
								this.DrawInterface(gameTime);
								goto IL_1F80;
							}
							catch (Exception e3)
							{
								TimeLogger.DrawException(e3);
								goto IL_1F80;
							}
						}
						this.DrawInterface(gameTime);
					}
					IL_1F80:
					TimeLogger.DetailedDrawTime(27);
				}
				else
				{
					Main.maxQ = true;
				}
				TimeLogger.DetailedDrawTime(37);
				if (Main.mouseLeft)
				{
					Main.mouseLeftRelease = false;
				}
				else
				{
					Main.mouseLeftRelease = true;
				}
				if (Main.mouseRight)
				{
					Main.mouseRightRelease = false;
				}
				else
				{
					Main.mouseRightRelease = true;
				}
				if (Main.mouseMiddle)
				{
					Main.mouseMiddleRelease = false;
				}
				else
				{
					Main.mouseMiddleRelease = true;
				}
				if (Main.mouseXButton1)
				{
					Main.mouseXButton1Release = false;
				}
				else
				{
					Main.mouseXButton1Release = true;
				}
				if (Main.mouseXButton2)
				{
					Main.mouseXButton2Release = false;
				}
				else
				{
					Main.mouseXButton2Release = true;
				}
				if (!PlayerInput.Triggers.Current.MouseRight && !PlayerInput.Triggers.Current.MouseLeft && !Main.preventStackSplitReset)
				{
					Main.stackSplit = 0;
				}
				if (Main.stackSplit > 0)
				{
					Main.stackSplit--;
					if (Main.stackSplit == 0)
					{
						Main.preventStackSplitReset = false;
					}
				}
				TimeLogger.RenderTime(Main.renderCount, stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			if (Main.player[Main.myPlayer].talkNPC >= 0 || Main.player[Main.myPlayer].sign >= 0 || (Main.playerInventory && !CaptureManager.Instance.Active))
			{
				Main.player[Main.myPlayer].ToggleInv();
			}
			this.DrawMap(gameTime);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.SamplerStateForCursor, null, null, null, Main.UIScaleMatrix);
			PlayerInput.SetZoom_UI();
			this.DrawFPS();
			this.DrawPlayerChat();
			Main.DrawPendingMouseText();
			Main.DrawCursor(Main.DrawThickCursor(false), false);
			PlayerInput.SetZoom_Unscaled();
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, null, null, null);
			TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
			PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled);
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(Main.spriteBatch);
			}
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
				return;
			}
			Main.mouseLeftRelease = true;
		}

		// Token: 0x060005FC RID: 1532 RVA: 0x00134240 File Offset: 0x00132440
		private static void DrawItemTextPopups(float scaleTarget)
		{
			for (int i = 0; i < 20; i++)
			{
				PopupText popupText = Main.popupText[i];
				if (popupText.active)
				{
					string text = popupText.name;
					if (popupText.stack > 1L)
					{
						text = text + " (" + popupText.stack.ToString() + ")";
					}
					Vector2 vector = FontAssets.MouseText.Value.MeasureString(text);
					Vector2 origin;
					origin..ctor(vector.X * 0.5f, vector.Y * 0.5f);
					float num = popupText.scale / scaleTarget;
					int num2 = (int)(255f - 255f * num);
					float num3 = (float)popupText.color.R;
					float num4 = (float)popupText.color.G;
					float num5 = (float)popupText.color.B;
					float num6 = (float)popupText.color.A;
					num3 *= num * popupText.alpha * 0.3f;
					num5 *= num * popupText.alpha * 0.3f;
					num4 *= num * popupText.alpha * 0.3f;
					num6 *= num * popupText.alpha;
					Color color;
					color..ctor((int)num3, (int)num4, (int)num5, (int)num6);
					Color color2 = Color.Black;
					float num7 = 1f;
					Texture2D texture2D = null;
					PopupTextContext context = popupText.context;
					if (context != PopupTextContext.ItemPickupToVoidContainer)
					{
						if (context == PopupTextContext.SonarAlert)
						{
							color2 = Color.Blue * 0.4f;
							if (popupText.npcNetID != 0)
							{
								color2 = Color.Red * 0.4f;
							}
							num7 = 1f;
						}
					}
					else
					{
						color2 = new Color(127, 20, 255) * 0.4f;
						num7 = 0.8f;
					}
					float num8 = (float)num2 / 255f;
					for (int j = 0; j < 5; j++)
					{
						color = color2;
						float num9 = 0f;
						float num10 = 0f;
						switch (j)
						{
						case 0:
							num9 -= scaleTarget * 2f;
							break;
						case 1:
							num9 += scaleTarget * 2f;
							break;
						case 2:
							num10 -= scaleTarget * 2f;
							break;
						case 3:
							num10 += scaleTarget * 2f;
							break;
						default:
							color = popupText.color * num * popupText.alpha * num7;
							break;
						}
						if (j < 4)
						{
							num6 = (float)popupText.color.A * num * popupText.alpha;
							color..ctor(0, 0, 0, (int)num6);
						}
						if (color2 != Color.Black && j < 4)
						{
							num9 *= 1.3f + 1.3f * num8;
							num10 *= 1.3f + 1.3f * num8;
						}
						float num11 = popupText.position.Y - Main.screenPosition.Y + num10;
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							num11 = (float)Main.screenHeight - num11;
						}
						if (color2 != Color.Black && j < 4)
						{
							Color color3 = color2;
							color3.A = (byte)MathHelper.Lerp(60f, 127f, Utils.GetLerpValue(0f, 255f, num6, true));
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - Main.screenPosition.X + num9 + origin.X, num11 + origin.Y), Color.Lerp(color, color3, 0.5f), popupText.rotation, origin, popupText.scale, 0, 0f);
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - Main.screenPosition.X + num9 + origin.X, num11 + origin.Y), color3, popupText.rotation, origin, popupText.scale, 0, 0f);
						}
						else
						{
							DynamicSpriteFontExtensionMethods.DrawString(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - Main.screenPosition.X + num9 + origin.X, num11 + origin.Y), color, popupText.rotation, origin, popupText.scale, 0, 0f);
						}
						if (texture2D != null)
						{
							float scale = (1.3f - num8) * popupText.scale * 0.7f;
							Vector2 vector2;
							vector2..ctor(popupText.position.X - Main.screenPosition.X + num9 + origin.X, num11 + origin.Y);
							Color color4 = color2 * 0.6f;
							if (j == 4)
							{
								color4 = Color.White * 0.6f;
							}
							color4.A = (byte)((float)color4.A * 0.5f);
							int num12 = 25;
							Main.spriteBatch.Draw(texture2D, vector2 + new Vector2(origin.X * -0.5f - (float)num12 - texture2D.Size().X / 2f, 0f), null, color4 * popupText.scale, 0f, texture2D.Size() / 2f, scale, 0, 0f);
							Main.spriteBatch.Draw(texture2D, vector2 + new Vector2(origin.X * 0.5f + (float)num12 + texture2D.Size().X / 2f, 0f), null, color4 * popupText.scale, 0f, texture2D.Size() / 2f, scale, 0, 0f);
						}
					}
				}
			}
		}

		// Token: 0x060005FD RID: 1533 RVA: 0x00134820 File Offset: 0x00132A20
		private static void DoDraw_UpdateCameraPosition()
		{
			Vector3 vector;
			vector..ctor(1f, 1f, 1f);
			Vector3 vector2 = Vector3.One / vector;
			if (Main.gameMenu || Main.netMode == 2)
			{
				return;
			}
			int num = 21;
			if (Main.cameraX != 0f && !Main.player[Main.myPlayer].pulley)
			{
				Main.cameraX = 0f;
			}
			if (Main.cameraX > 0f)
			{
				Main.cameraX -= 1f;
				if (Main.cameraX < 0f)
				{
					Main.cameraX = 0f;
				}
			}
			if (Main.cameraX < 0f)
			{
				Main.cameraX += 1f;
				if (Main.cameraX > 0f)
				{
					Main.cameraX = 0f;
				}
			}
			Vector2 value = Main.screenPosition;
			Main.screenPosition.X = Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width * 0.5f - (float)(Main.screenWidth / 2) * vector2.X + Main.cameraX;
			Main.screenPosition.Y = Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - (float)num - (float)(Main.screenHeight / 2) * vector2.Y + Main.player[Main.myPlayer].gfxOffY;
			Vector2 vector3 = Vector2.Zero;
			float num2 = 0f;
			float num3 = 0f;
			float num4 = 36f;
			bool flag = false;
			Vector2 vector4 = Vector2.Zero;
			if (!Main.player[Main.myPlayer].dead)
			{
				Vector2 cameraPosition;
				if (Main.DroneCameraTracker.TryTracking(out cameraPosition))
				{
					vector3 = cameraPosition - Main.LocalPlayer.Center;
					if (Main.LocalPlayer.gravDir == -1f)
					{
						vector3.Y *= -1f;
					}
					vector4 = vector3;
					vector3 = Main.CurrentPan * 0.87f + vector3 * 0.13f;
					flag = true;
					Main._cameraPanHasBlackTransition = true;
				}
				else if (Main.LocalGolfState != null && (Main.LocalGolfState.ShouldCameraTrackBallLastKnownLocation || Main.LocalGolfState.IsTrackingBall))
				{
					if (Main.LocalGolfState.IsTrackingBall)
					{
						Projectile lastHitBall = Main.LocalGolfState.GetLastHitBall();
						vector3 = lastHitBall.Center - Main.LocalPlayer.Center;
						vector4 = vector3;
						Main._cameraPanHasBlackTransition = true;
						if (lastHitBall.velocity.Length() > 20f)
						{
							num4 *= 2f;
						}
						vector3 = Main.CurrentPan * 0.87f + vector3 * 0.13f;
						flag = true;
					}
					else if (Main.LocalGolfState.ShouldCameraTrackBallLastKnownLocation)
					{
						Vector2? lastBallLocation = Main.LocalGolfState.GetLastBallLocation();
						if (lastBallLocation != null)
						{
							vector3 = lastBallLocation.Value - Main.LocalPlayer.Center;
							vector4 = vector3;
							Main._cameraPanHasBlackTransition = true;
							vector3 = Main.CurrentPan * 0.87f + vector3 * 0.13f;
							flag = true;
						}
					}
				}
				else if ((Main.player[Main.myPlayer].noThrow <= 0 && !Main.player[Main.myPlayer].lastMouseInterface) || !(Main.CurrentPan == Vector2.Zero))
				{
					if (PlayerInput.UsingGamepad)
					{
						Player player = Main.player[Main.myPlayer];
						if (PlayerInput.GamepadThumbstickRight.Length() != 0f || !Main.SmartCursorIsUsed)
						{
							float num5 = -1f;
							if (player.inventory[player.selectedItem].type == 1254 && player.scope)
							{
								num5 = 0.8f;
							}
							else if (player.inventory[player.selectedItem].type == 1254)
							{
								num5 = 0.6666667f;
							}
							else if (player.inventory[player.selectedItem].type == 1299)
							{
								num5 = 0.6666667f;
							}
							else if (player.scope)
							{
								num5 = 0.5f;
							}
							PlayerLoader.ModifyZoom(Main.LocalPlayer, ref num5);
							Vector2 vector5 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
							num4 = 48f;
							if (vector5 != Vector2.Zero && num5 != -1f)
							{
								Vector2 vector6 = new Vector2((float)Main.screenWidth, (float)Main.screenHeight) * 0.5f * vector5 * num5;
								vector3.X = vector6.X;
								vector3.Y = vector6.Y;
								flag = true;
							}
						}
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num6 = Main.mouseX;
						int num7 = Main.mouseY;
						if (num6 > Main.screenWidth)
						{
							num6 = Main.screenWidth;
						}
						if (num6 < 0)
						{
							num6 = 0;
						}
						if (num7 > Main.screenHeight)
						{
							num7 = Main.screenHeight;
						}
						if (num7 < 0)
						{
							num7 = 0;
						}
						float zoom = 0.8f;
						PlayerLoader.ModifyZoom(Main.LocalPlayer, ref zoom);
						vector3.X = (float)(num6 - Main.screenWidth / 2) * zoom;
						vector3.Y = (float)(num7 - Main.screenHeight / 2) * zoom;
						flag = true;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
					{
						int num8 = Main.mouseX;
						int num9 = Main.mouseY;
						if (num8 > Main.screenWidth)
						{
							num8 = Main.screenWidth;
						}
						if (num8 < 0)
						{
							num8 = 0;
						}
						if (num9 > Main.screenHeight)
						{
							num9 = Main.screenHeight;
						}
						if (num9 < 0)
						{
							num9 = 0;
						}
						float zoom2 = 0.6666667f;
						PlayerLoader.ModifyZoom(Main.LocalPlayer, ref zoom2);
						vector3.X = (float)(num8 - Main.screenWidth / 2) * zoom2;
						vector3.Y = (float)(num9 - Main.screenHeight / 2) * zoom2;
						flag = true;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
					{
						int num10 = Main.mouseX;
						int num11 = Main.mouseY;
						if (num10 > Main.screenWidth)
						{
							num10 = Main.screenWidth;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num11 > Main.screenHeight)
						{
							num11 = Main.screenHeight;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						float zoom3 = 0.6666667f;
						PlayerLoader.ModifyZoom(Main.LocalPlayer, ref zoom3);
						vector3.X = (float)(num10 - Main.screenWidth / 2) * zoom3;
						vector3.Y = (float)(num11 - Main.screenHeight / 2) * zoom3;
						flag = true;
					}
					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num12 = Main.mouseX;
						int num13 = Main.mouseY;
						if (num12 > Main.screenWidth)
						{
							num12 = Main.screenWidth;
						}
						if (num12 < 0)
						{
							num12 = 0;
						}
						if (num13 > Main.screenHeight)
						{
							num13 = Main.screenHeight;
						}
						if (num13 < 0)
						{
							num13 = 0;
						}
						float zoom4 = 0.5f;
						PlayerLoader.ModifyZoom(Main.player[Main.myPlayer], ref zoom4);
						vector3.X = (float)(num12 - Main.screenWidth / 2) * zoom4;
						vector3.Y = (float)(num13 - Main.screenHeight / 2) * zoom4;
						flag = true;
					}
					else
					{
						float zoom5 = -1f;
						PlayerLoader.ModifyZoom(Main.LocalPlayer, ref zoom5);
						if (zoom5 != -1f)
						{
							int mouseXClamped = Utils.Clamp<int>(Main.mouseX, 0, Main.screenWidth);
							int mouseYClamped = Utils.Clamp<int>(Main.mouseY, 0, Main.screenHeight);
							vector3.X = (float)(mouseXClamped - Main.screenWidth / 2) * zoom5;
							vector3.Y = (float)(mouseYClamped - Main.screenHeight / 2) * zoom5;
							flag = true;
						}
					}
				}
			}
			if (float.IsNaN(Main.CurrentPan.X))
			{
				Main.CurrentPan.X = 0f;
			}
			if (float.IsNaN(Main.CurrentPan.Y))
			{
				Main.CurrentPan.Y = 0f;
			}
			Vector2 value2 = vector3 - Main.CurrentPan;
			float num14 = value2.Length();
			float amount = 1f;
			if (num3 > num2 + 0.0001f)
			{
				amount = MathHelper.Clamp((num14 - num2) / (num3 - num2), 0f, 1f);
			}
			float value3 = MathHelper.SmoothStep(0f, num14, amount);
			value3 = MathHelper.Clamp(value3, 0f, num4);
			if (Main.CurrentPan == Vector2.Zero && Main._cameraPanHasBlackTransition && vector4 != Vector2.Zero)
			{
				Vector2 vector7 = vector4 - Main.CurrentPan;
				float num19 = Math.Abs(vector7.X);
				float num15 = Math.Abs(vector7.Y);
				float num16 = vector7.Length();
				if ((num19 >= (float)(Main.screenWidth / 2) || num15 >= (float)(Main.screenHeight / 2)) && num16 >= new Vector2((float)Main.screenWidth, (float)Main.screenHeight).Length() / 2f + 100f)
				{
					Main.renderNow = true;
					Main.CurrentPan = vector4;
					Main._cameraPanHasBlackTransition = false;
					NPC.ResetNetOffsets();
					Main.BlackFadeIn = 255;
					if (Main.mapTime < 5)
					{
						Main.mapTime = 5;
					}
					Main.maxQ = true;
					Lighting.Clear();
					Main.instantBGTransitionCounter = 10;
					Main.LocalPlayer.ForceUpdateBiomes();
				}
			}
			if (vector3 == Vector2.Zero && !flag)
			{
				float num20 = Math.Abs(value2.X);
				float num17 = Math.Abs(value2.Y);
				float num18 = value2.Length();
				if (num20 >= (float)(Main.screenWidth / 2) || num17 >= (float)(Main.screenHeight / 2))
				{
					Main.renderNow = true;
					Main.CurrentPan *= 0.9f;
					if (Main._cameraPanHasBlackTransition && num18 >= new Vector2((float)Main.screenWidth, (float)Main.screenHeight).Length() / 2f + 100f)
					{
						Main._cameraPanHasBlackTransition = false;
						NPC.ResetNetOffsets();
						Main.BlackFadeIn = 255;
						if (Main.mapTime < 5)
						{
							Main.mapTime = 5;
						}
						Main.maxQ = true;
						Lighting.Clear();
						Main.CurrentPan = Vector2.Zero;
						Main.instantBGTransitionCounter = 10;
						Main.LocalPlayer.ForceUpdateBiomes();
					}
				}
				else if (value3 > 0.0001f)
				{
					Main.CurrentPan += Vector2.Normalize(value2) * value3;
				}
			}
			else if (value3 > 0.0001f)
			{
				Main.CurrentPan += Vector2.Normalize(value2) * value3;
			}
			Main.screenPosition.X = Main.screenPosition.X + Main.CurrentPan.X;
			Main.screenPosition.Y = Main.screenPosition.Y + Main.CurrentPan.Y * Main.player[Main.myPlayer].gravDir;
			if (Main.cameraLerp > 0f)
			{
				if (Vector2.Distance(value, Main.screenPosition) - Main.player[Main.myPlayer].velocity.Length() < 0.25f || (Main.cameraGamePadLerp && !PlayerInput.UsingGamepad))
				{
					Main.cameraLerp = 0f;
					Main.cameraGamePadLerp = false;
				}
				else
				{
					Main.screenPosition = Vector2.Lerp(value, Main.screenPosition, Main.cameraLerp);
				}
			}
			Main.instance.CameraModifiers.ApplyTo(ref Main.screenPosition);
			PlayerLoader.ModifyScreenPosition(Main.LocalPlayer);
			SystemLoader.ModifyScreenPosition();
			Main.screenPosition.X = (float)((int)Main.screenPosition.X);
			Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
			Main.ClampScreenPositionToWorld();
		}

		/// <summary>
		/// Similar to <see cref="F:Terraria.Main.dayTime" />, but always returns false in <see cref="F:Terraria.Main.remixWorld" /> worlds. This should be used instead of <see cref="F:Terraria.Main.dayTime" /> for logic taking into account the state of the world rather the specific hour. Some examples include boss spawners and boss despawn behaviors.
		/// </summary>
		// Token: 0x060005FE RID: 1534 RVA: 0x00135451 File Offset: 0x00133651
		public static bool IsItDay()
		{
			return !Main.remixWorld && Main.dayTime;
		}

		// Token: 0x060005FF RID: 1535 RVA: 0x00135464 File Offset: 0x00133664
		public static double starGameMath(double value = 1.0)
		{
			if (!Main.starGame)
			{
				return 1.0;
			}
			double num = (double)Main.starsHit / 200.0;
			if (num > 1.0)
			{
				num = 1.0;
			}
			return 1.0 + num * value;
		}

		// Token: 0x06000600 RID: 1536 RVA: 0x001354B8 File Offset: 0x001336B8
		private void DrawSunAndMoon(Main.SceneArea sceneArea, Color moonColor, Color sunColor, float tempMushroomInfluence)
		{
			Texture2D value = TextureAssets.Sun.Value;
			int num = Main.moonType;
			if (!TextureAssets.Moon.IndexInRange(num))
			{
				num = Utils.Clamp<int>(num, 0, 8);
			}
			Texture2D value2 = TextureAssets.Moon[num].Value;
			if (Main.gameMenu)
			{
				ModMenu currentMenu = MenuLoader.CurrentMenu;
				Asset<Texture2D> sunTexture = currentMenu.SunTexture;
				value = (((sunTexture != null) ? sunTexture.Value : null) ?? value);
				Asset<Texture2D> moonTexture = currentMenu.MoonTexture;
				value2 = (((moonTexture != null) ? moonTexture.Value : null) ?? value2);
			}
			int num2 = sceneArea.bgTopY;
			int num3 = (int)(Main.time / 54000.0 * (double)(sceneArea.totalWidth + (float)(value.Width * 2))) - value.Width;
			int num4 = 0;
			float num5 = 1f;
			float rotation = (float)(Main.time / 54000.0) * 2f - 7.3f;
			int num6 = (int)(Main.time / 32400.0 * (double)(sceneArea.totalWidth + (float)(value2.Width * 2))) - value2.Width;
			int num7 = 0;
			float num8 = 1f;
			float num9 = (float)(Main.time / 32400.0) * 2f - 7.3f;
			if (Main.dayTime)
			{
				double num10;
				if (Main.time < 27000.0)
				{
					num10 = Math.Pow(1.0 - Main.time / 54000.0 * 2.0, 2.0);
					num4 = (int)((double)num2 + num10 * 250.0 + 180.0);
				}
				else
				{
					num10 = Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0);
					num4 = (int)((double)num2 + num10 * 250.0 + 180.0);
				}
				num5 = (float)(1.2 - num10 * 0.4);
			}
			else
			{
				double num11;
				if (Main.time < 16200.0)
				{
					num11 = Math.Pow(1.0 - Main.time / 32400.0 * 2.0, 2.0);
					num7 = (int)((double)num2 + num11 * 250.0 + 180.0);
				}
				else
				{
					num11 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
					num7 = (int)((double)num2 + num11 * 250.0 + 180.0);
				}
				num8 = (float)(1.2 - num11 * 0.4);
			}
			num5 *= Main.ForcedMinimumZoom;
			num8 *= Main.ForcedMinimumZoom;
			if (Main.starGame)
			{
				if (WorldGen.generatingWorld)
				{
					Main.alreadyGrabbingSunOrMoon = true;
					if (Main.rand.Next(60) == 0)
					{
						for (int i = 0; i < Main.numStars; i++)
						{
							if (Main.star[i].hidden)
							{
								Star.SpawnStars(i);
							}
						}
					}
					if (Main.dayTime)
					{
						Main.dayTime = false;
						Main.time = 0.0;
					}
				}
				else
				{
					Main.starGame = false;
				}
			}
			else
			{
				Main.starsHit = 0;
			}
			if (Main.dayTime)
			{
				if ((Main.remixWorld && !Main.gameMenu) || WorldGen.remixWorldGen)
				{
					return;
				}
				num5 *= 1.1f;
				float num12 = 1f - tempMushroomInfluence;
				num12 -= Main.cloudAlpha * 1.5f * Main.atmo;
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				Color color;
				color..ctor((int)((byte)(255f * num12)), (int)((byte)((float)sunColor.G * num12)), (int)((byte)((float)sunColor.B * num12)), (int)((byte)(255f * num12)));
				Color color2;
				color2..ctor((int)((byte)((float)sunColor.R * num12)), (int)((byte)((float)sunColor.G * num12)), (int)((byte)((float)sunColor.B * num12)), (int)((byte)((float)sunColor.B * num12)));
				bool flag = false;
				if (Main.eclipse)
				{
					value = TextureAssets.Sun3.Value;
					flag = true;
				}
				else if (!Main.gameMenu && Main.player[Main.myPlayer].head == 12)
				{
					value = TextureAssets.Sun2.Value;
					flag = true;
				}
				if (flag)
				{
					color2..ctor((int)((byte)((float)sunColor.R * num12)), (int)((byte)((float)sunColor.G * num12)), (int)((byte)((float)sunColor.B * num12)), (int)((byte)((float)(sunColor.B - 60) * num12)));
				}
				Vector2 origin = value.Size() / 2f;
				Vector2 position = new Vector2((float)num3, (float)(num4 + (int)Main.sunModY)) + sceneArea.SceneLocalScreenPositionOffset;
				Main.spriteBatch.Draw(value, position, null, color, rotation, origin, num5, 0, 0f);
				Main.spriteBatch.Draw(value, position, null, color2, rotation, origin, num5, 0, 0f);
			}
			if (!Main.dayTime)
			{
				float num13 = 1f - Main.cloudAlpha * 1.5f * Main.atmo;
				if (num13 < 0f)
				{
					num13 = 0f;
				}
				moonColor *= num13;
				Vector2 position2 = new Vector2((float)num6, (float)(num7 + (int)Main.moonModY)) + sceneArea.SceneLocalScreenPositionOffset;
				if (WorldGen.drunkWorldGen)
				{
					Main.spriteBatch.Draw(TextureAssets.SmileyMoon.Value, position2, new Rectangle?(new Rectangle(0, 0, TextureAssets.SmileyMoon.Width(), TextureAssets.SmileyMoon.Height())), moonColor, num9 / 2f + 3.1415927f, new Vector2((float)(TextureAssets.SmileyMoon.Width() / 2), (float)(TextureAssets.SmileyMoon.Width() / 2)), num8, 0, 0f);
				}
				else if (Main.pumpkinMoon)
				{
					Main.spriteBatch.Draw(TextureAssets.PumpkinMoon.Value, position2, new Rectangle?(new Rectangle(0, TextureAssets.PumpkinMoon.Width() * Main.moonPhase, TextureAssets.PumpkinMoon.Width(), TextureAssets.PumpkinMoon.Width())), moonColor, num9, new Vector2((float)(TextureAssets.PumpkinMoon.Width() / 2), (float)(TextureAssets.PumpkinMoon.Width() / 2)), num8, 0, 0f);
				}
				else if (Main.snowMoon)
				{
					Main.spriteBatch.Draw(TextureAssets.SnowMoon.Value, position2, new Rectangle?(new Rectangle(0, TextureAssets.SnowMoon.Width() * Main.moonPhase, TextureAssets.SnowMoon.Width(), TextureAssets.SnowMoon.Width())), moonColor, num9, new Vector2((float)(TextureAssets.SnowMoon.Width() / 2), (float)(TextureAssets.SnowMoon.Width() / 2)), num8, 0, 0f);
				}
				else if (value2 != TextureAssets.Moon[num].Value)
				{
					Main.spriteBatch.Draw(value2, position2, new Rectangle?(new Rectangle(0, 0, value2.Width, value2.Width)), moonColor, num9, new Vector2((float)(value2.Width / 2)), num8, 0, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(TextureAssets.Moon[num].Value, position2, new Rectangle?(new Rectangle(0, TextureAssets.Moon[num].Width() * Main.moonPhase, TextureAssets.Moon[num].Width(), TextureAssets.Moon[num].Width())), moonColor, num9, new Vector2((float)(TextureAssets.Moon[num].Width() / 2), (float)(TextureAssets.Moon[num].Width() / 2)), num8, 0, 0f);
				}
			}
			Rectangle value3 = (!Main.dayTime) ? new Rectangle((int)((double)num6 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num8), (int)((double)num7 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num8 + (double)Main.moonModY), (int)((float)TextureAssets.Moon[num].Width() * num8), (int)((float)TextureAssets.Moon[num].Width() * num8)) : new Rectangle((int)((double)num3 - (double)TextureAssets.Sun.Width() * 0.5 * (double)num5), (int)((double)num4 - (double)TextureAssets.Sun.Height() * 0.5 * (double)num5 + (double)Main.sunModY), (int)((float)TextureAssets.Sun.Width() * num5), (int)((float)TextureAssets.Sun.Width() * num5));
			value3.Offset((int)sceneArea.SceneLocalScreenPositionOffset.X, (int)sceneArea.SceneLocalScreenPositionOffset.Y);
			Rectangle rectangle;
			rectangle..ctor(Main.mouseX, Main.mouseY, 1, 1);
			Main.sunModY = (short)((double)Main.sunModY * 0.999);
			Main.moonModY = (short)((double)Main.moonModY * 0.999);
			if (!Main.gameMenu || Main.netMode == 1)
			{
				return;
			}
			if (rectangle.Intersects(value3) || Main.alreadyGrabbingSunOrMoon)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			if ((!Main.mouseLeft && !Main.starGame) || !Main.hasFocus)
			{
				Main.alreadyGrabbingSunOrMoon = false;
				return;
			}
			if (!rectangle.Intersects(value3) && !Main.alreadyGrabbingSunOrMoon)
			{
				return;
			}
			if (Main.dayTime)
			{
				Main.time = 54000.0 * (double)((float)(Main.mouseX + TextureAssets.Sun.Width()) / ((float)Main.screenWidth + (float)(TextureAssets.Sun.Width() * 2)));
				Main.sunModY = (short)(Main.mouseY - num4);
				if (Main.time > 53990.0)
				{
					Main.time = 53990.0;
				}
			}
			else
			{
				Main.time = 32400.0 * (double)((float)(Main.mouseX + TextureAssets.Moon[num].Width()) / ((float)Main.screenWidth + (float)(TextureAssets.Moon[num].Width() * 2)));
				Main.moonModY = (short)(Main.mouseY - num7);
				if (Main.time > 32390.0)
				{
					Main.time = 32390.0;
				}
			}
			if (Main.time < 10.0)
			{
				Main.time = 10.0;
			}
			Main.alreadyGrabbingSunOrMoon = true;
		}

		// Token: 0x06000601 RID: 1537 RVA: 0x00135EF8 File Offset: 0x001340F8
		private void DrawStarsInBackground(Main.SceneArea sceneArea, bool artificial)
		{
			if (Main.netMode == 2 || ((double)Main.screenPosition.Y >= Main.worldSurface * 16.0 + 16.0 && Main.shimmerAlpha == 0f))
			{
				return;
			}
			float num = 1f;
			if (Main.GraveyardVisualIntensity > 0f)
			{
				float num2 = 1f - Main.GraveyardVisualIntensity * 1.4f;
				if (num2 <= 0f)
				{
					return;
				}
				num *= num2;
			}
			Color colorOfTheSkies = Main.ColorOfTheSkies;
			if (Main.shimmerAlpha > 0f)
			{
				colorOfTheSkies *= 1f - Main.shimmerAlpha;
			}
			if (Main.remixWorld || 255f * (1f - Main.cloudAlpha * Main.atmo) - (float)colorOfTheSkies.R - 25f > 0f)
			{
				for (int i = 0; i < Main.numStars; i++)
				{
					this.DrawStar(ref sceneArea, num, colorOfTheSkies, i, Main.star[i], artificial, false);
				}
			}
		}

		// Token: 0x06000602 RID: 1538 RVA: 0x00135FED File Offset: 0x001341ED
		private void DrawStarsInForeground(Main.SceneArea sceneArea)
		{
		}

		// Token: 0x06000603 RID: 1539 RVA: 0x00135FF0 File Offset: 0x001341F0
		private void DrawStar(ref Main.SceneArea sceneArea, float starOpacity, Color bgColorForStars, int i, Star theStar, bool artificial, bool foreground = false)
		{
			if (theStar == null || theStar.hidden)
			{
				return;
			}
			float num = Main.shimmerAlpha;
			Color color = default(Color);
			float num2 = 1f - theStar.fadeIn;
			int num3 = (int)((float)(byte.MaxValue - bgColorForStars.R - 100) * theStar.twinkle * num2);
			int num4 = (int)((float)(byte.MaxValue - bgColorForStars.G - 100) * theStar.twinkle * num2);
			int num5 = (int)((float)(byte.MaxValue - bgColorForStars.B - 100) * theStar.twinkle * num2);
			num3 = (num3 + num5 + num4) / 3;
			if (num3 <= 0)
			{
				return;
			}
			num3 = (int)((double)num3 * 1.4);
			if (num3 > 255)
			{
				num3 = 255;
			}
			num4 = num3;
			num5 = num3;
			color.R = (byte)num3;
			color.G = (byte)num4;
			color.B = (byte)num5;
			color *= starOpacity;
			if (num > 0f)
			{
				Color value = color;
				if (i % 3 == 0)
				{
					value.G = (byte)((float)color.G * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
				}
				else if (i % 3 == 1)
				{
					value.B = (byte)((float)color.B * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
				}
				else if (i % 3 == 2)
				{
					value.R = (byte)((float)color.R * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
				}
				color = Color.Lerp(color, value, num);
				if (artificial)
				{
					color *= num;
				}
				else
				{
					color *= 1f - num;
				}
			}
			Vector2 vector = new Vector2(theStar.position.X / 1920f, theStar.position.Y / 1200f) * new Vector2(sceneArea.totalWidth, sceneArea.totalHeight) + new Vector2(0f, (float)sceneArea.bgTopY) + sceneArea.SceneLocalScreenPositionOffset;
			if (!theStar.falling)
			{
				if (vector.X < 0f)
				{
					vector.X += (float)Main.screenWidth;
				}
				if (vector.X > (float)Main.screenWidth)
				{
					vector.X -= (float)Main.screenWidth;
				}
				if (vector.Y < 0f)
				{
					vector.Y += (float)Main.screenHeight;
				}
				if (vector.Y > (float)Main.screenHeight)
				{
					vector.Y -= (float)Main.screenHeight;
				}
			}
			if (foreground)
			{
				Vector2 vector3 = vector / Main.ScreenSize.ToVector2();
				float fromMax = 0.35f;
				float num6 = Utils.Remap(Vector2.Distance(vector3, new Vector2(0.5f, 0.5f)), 0f, fromMax, 0f, 1f, true);
				color *= num6;
				Color color2 = Lighting.GetColor((vector + Main.screenPosition).ToTileCoordinates());
				float num7 = (float)Math.Max(Math.Max(color2.R, color2.G), color2.B) / 255f;
				color *= 1f - num7;
			}
			Texture2D value2 = TextureAssets.Star[theStar.type].Value;
			Vector2 origin = value2.Size() / 2f;
			if (theStar.falling)
			{
				theStar.fadeIn = 0f;
				double num8 = theStar.fallTime;
				float num9 = 30f;
				if ((float)num8 > num9)
				{
					num8 = (double)((int)num9);
				}
				int j = 1;
				while ((double)j < num8)
				{
					Vector2 vector2 = theStar.fallSpeed * (float)j * 0.4f;
					float num10 = theStar.scale * (1f - (float)j * 1f / num9);
					Color color3 = color;
					float rotation = theStar.rotation;
					color3 *= 1f - (float)j * 1f / num9;
					Main.spriteBatch.Draw(value2, vector - vector2, null, color3, theStar.rotation, origin, num10 * theStar.twinkle * Main.ForcedMinimumZoom, 0, 0f);
					j++;
				}
				if (Main.starGame && theStar.fallSpeed.Y > 0f && Vector2.Distance(new Vector2((float)Main.mouseX, (float)Main.mouseY), vector) < 70f)
				{
					Main.starsHit++;
					theStar.fallSpeed = vector - new Vector2((float)Main.mouseX, (float)Main.mouseY);
					theStar.fallSpeed.Normalize();
					theStar.fallSpeed *= 10f;
					if (theStar.fallSpeed.Y > 0f)
					{
						theStar.fallSpeed.Y = theStar.fallSpeed.Y * -1f;
					}
					SoundEngine.PlaySound(38, -1, -1, 1, 1f, 0f);
					SoundEngine.PlaySound(37, -1, -1, 1, 1f, 0f);
				}
			}
			Main.spriteBatch.Draw(value2, vector, null, color, theStar.rotation, origin, theStar.scale * theStar.twinkle * Main.ForcedMinimumZoom, 0, 0f);
		}

		// Token: 0x06000604 RID: 1540 RVA: 0x0013656C File Offset: 0x0013476C
		private static void ApplyColorOfTheSkiesToTiles()
		{
			Color colorOfTheSkies = Main.ColorOfTheSkies;
			Main.tileColor.A = byte.MaxValue;
			Main.tileColor.R = (colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.R * 7) / 10;
			Main.tileColor.G = (colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.G * 7) / 10;
			Main.tileColor.B = (colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.B * 7) / 10;
			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
			SystemLoader.ModifySunLightColor(ref Main.tileColor, ref Main.ColorOfTheSkies);
		}

		// Token: 0x06000605 RID: 1541 RVA: 0x00136640 File Offset: 0x00134840
		private static void UpdateAtmosphereTransparencyToSkyColor()
		{
			float num = (float)Main.maxTilesX / 4200f;
			num *= num;
			Main.atmo = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num)) / (Main.worldSurface / 5.0));
			if (Main.atmo < 0f)
			{
				Main.atmo = 0f;
			}
			if (Main.atmo > 1f)
			{
				Main.atmo = 1f;
			}
			if (Main.gameMenu || Main.netMode == 2)
			{
				Main.atmo = 1f;
			}
			Color colorOfTheSkies = Main.ColorOfTheSkies;
			colorOfTheSkies.R = (byte)((float)colorOfTheSkies.R * Main.atmo);
			colorOfTheSkies.G = (byte)((float)colorOfTheSkies.G * Main.atmo);
			colorOfTheSkies.B = (byte)((float)colorOfTheSkies.B * Main.atmo);
			if ((double)Main.atmo <= 0.01)
			{
				colorOfTheSkies = Color.Transparent;
			}
			Main.ColorOfTheSkies = colorOfTheSkies;
		}

		// Token: 0x06000606 RID: 1542 RVA: 0x00136746 File Offset: 0x00134946
		private void Debug_PrettifyMap()
		{
		}

		// Token: 0x06000607 RID: 1543 RVA: 0x00136748 File Offset: 0x00134948
		private static void DrawNetplayStatusText()
		{
			if (Main.netMode == 1 && !string.IsNullOrWhiteSpace(Netplay.Connection.StatusText))
			{
				string text = Netplay.Connection.StatusText;
				if (!Netplay.Connection.HideStatusTextPercent)
				{
					text = text + ": " + ((int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f)).ToString() + "%";
				}
				if (Main._netplayStatusTextSnippets == null || Main._oldNetplayStatusText != text)
				{
					Main._netplayStatusTextSnippets = ChatManager.ParseMessage(text, Color.White).ToArray();
					Main._oldNetplayStatusText = text;
				}
				Vector2 position;
				position..ctor(628f - ChatManager.GetStringSize(FontAssets.MouseText.Value, Main._netplayStatusTextSnippets, Vector2.One, -1f).X * 0.5f + (float)(Main.screenWidth - 800), 84f);
				int hoveredSnippet;
				if (Netplay.Connection.StatusTextHasShadows)
				{
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, Main._netplayStatusTextSnippets, position, 0f, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f, 2f);
					return;
				}
				ChatManager.DrawColorCodedString(Main.spriteBatch, FontAssets.MouseText.Value, Main._netplayStatusTextSnippets, position, new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f, false);
			}
		}

		// Token: 0x06000608 RID: 1544 RVA: 0x001368C8 File Offset: 0x00134AC8
		private void DrawPlayerChatBubbles()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].chatOverhead.timeLeft > 0 && !Main.player[i].dead)
				{
					Vector2 messageSize = Main.player[i].chatOverhead.messageSize;
					Vector2 vec = Main.player[i].Top.ToScreenPosition();
					vec.Y -= messageSize.Y + 2f;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						vec.Y += 2f;
					}
					vec.X -= messageSize.X / 2f;
					vec.Y += Main.player[i].gfxOffY;
					vec = vec.Floor();
					int hoveredSnippet = 0;
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, Main.player[i].chatOverhead.snippets, vec, 0f, Main.player[i].chatOverhead.color, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f, 2f);
				}
			}
		}

		// Token: 0x06000609 RID: 1545 RVA: 0x00136A10 File Offset: 0x00134C10
		private void DrawRainInMenu()
		{
			bool flag = base.IsActive;
			Rectangle[] array = new Rectangle[6];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = new Rectangle(i * 4, 0, 2, 40);
			}
			Color color = Main.ColorOfTheSkies * 0.85f;
			for (int j = 0; j < Main.maxRain; j++)
			{
				if (Main.rain[j].active)
				{
					Rain rain = Main.rain[j];
					Main.spriteBatch.Draw(TextureAssets.Rain.Value, rain.position - Main.screenPosition, new Rectangle?(array[(int)rain.type]), color, rain.rotation, Vector2.Zero, rain.scale, 0, 0f);
					if (flag)
					{
						rain.Update();
					}
				}
			}
		}

		// Token: 0x0600060A RID: 1546 RVA: 0x00136AE8 File Offset: 0x00134CE8
		private void DoDraw_WallsTilesNPCs()
		{
			try
			{
				this.CacheNPCDraws();
				this.CacheProjDraws();
				this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
				this.DoDraw_WallsAndBlacks();
				this.DrawWoF();
				this.DrawBackGore();
				MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
				MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
				this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
				this.DoDraw_Tiles_NonSolid();
				Main.tileBatch.Begin(Main.Rasterizer, Main.Transform);
				this.DoDraw_Waterfalls();
				Main.tileBatch.End();
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			Main.spriteBatch.End();
			try
			{
				bool detectCreature = Main.player[Main.myPlayer].detectCreature;
				if (!detectCreature)
				{
					this.DoDraw_DrawNPCsBehindTiles();
				}
				this.DoDraw_Tiles_Solid();
				if (detectCreature)
				{
					this.DoDraw_DrawNPCsBehindTiles();
				}
				this.DrawPlayers_BehindNPCs();
				this.DoDraw_DrawNPCsOverTiles();
				TimeLogger.DetailedDrawReset();
			}
			catch (Exception e2)
			{
				TimeLogger.DrawException(e2);
			}
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
		}

		// Token: 0x0600060B RID: 1547 RVA: 0x00136C00 File Offset: 0x00134E00
		private void DoDraw_Waterfalls()
		{
			this.waterfallManager.Draw(Main.spriteBatch);
			TimeLogger.DetailedDrawTime(16);
		}

		// Token: 0x0600060C RID: 1548 RVA: 0x00136C1C File Offset: 0x00134E1C
		private void DoDraw_Tiles_Solid()
		{
			this.TilesRenderer.PreDrawTiles(true, !Main.drawToScreen, false);
			Main.tileBatch.Begin(Main.Rasterizer, Main.Transform);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			try
			{
				if (Main.drawToScreen)
				{
					this.DrawTiles(true, !Main.drawToScreen, false, -1);
				}
				else
				{
					Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Color.White);
					TimeLogger.DetailedDrawTime(17);
				}
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawTileEntities(true, !Main.drawToScreen, false);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			try
			{
				Main.player[Main.myPlayer].hitReplace.DrawFreshAnimations(Main.spriteBatch);
				Main.player[Main.myPlayer].hitTile.DrawFreshAnimations(Main.spriteBatch);
			}
			catch (Exception e2)
			{
				TimeLogger.DrawException(e2);
			}
			Main.spriteBatch.End();
		}

		// Token: 0x0600060D RID: 1549 RVA: 0x00136D74 File Offset: 0x00134F74
		private void DoDraw_Tiles_NonSolid()
		{
			this.TilesRenderer.PreDrawTiles(false, !Main.drawToScreen, false);
			if (Main.drawToScreen)
			{
				this.DrawTiles(false, !Main.drawToScreen, false, -1);
				TimeLogger.DetailedDrawReset();
			}
			else
			{
				Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Color.White);
				TimeLogger.DetailedDrawTime(15);
			}
			Main.spriteBatch.End();
			try
			{
				this.DrawTileEntities(false, !Main.drawToScreen, false);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
		}

		// Token: 0x0600060E RID: 1550 RVA: 0x00136E38 File Offset: 0x00135038
		private void DoDraw_DrawNPCsOverTiles()
		{
			this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			try
			{
				this.DrawNPCs(false);
				this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
				TimeLogger.DetailedDrawTime(19);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			Main.spriteBatch.End();
		}

		// Token: 0x0600060F RID: 1551 RVA: 0x00136EB8 File Offset: 0x001350B8
		private void DoDraw_DrawNPCsBehindTiles()
		{
			this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
			Main.spriteBatch.Begin(0, BlendState.AlphaBlend, Main.DefaultSamplerState, DepthStencilState.None, Main.Rasterizer, null, Main.Transform);
			try
			{
				this.DrawNPCs(true);
				TimeLogger.DetailedDrawTime(18);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			Main.spriteBatch.End();
		}

		// Token: 0x06000610 RID: 1552 RVA: 0x00136F28 File Offset: 0x00135128
		private void DrawBackGore()
		{
			if (!Main.drawBackGore)
			{
				return;
			}
			Main.drawBackGore = false;
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawGoreBehind();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawGoreBehind();
		}

		// Token: 0x06000611 RID: 1553 RVA: 0x00136F70 File Offset: 0x00135170
		private void DoDraw_WallsAndBlacks()
		{
			if (Main.drawToScreen)
			{
				this.DrawBlack(false);
				Main.tileBatch.Begin();
				this.DrawWalls();
				Main.tileBatch.End();
			}
			else
			{
				Main.spriteBatch.Draw(this.blackTarget, Main.sceneTilePos - Main.screenPosition, Color.White);
				TimeLogger.DetailedDrawTime(13);
				Main.spriteBatch.Draw(this.wallTarget, Main.sceneWallPos - Main.screenPosition, Color.White);
				TimeLogger.DetailedDrawTime(14);
			}
			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Walls, false);
		}

		// Token: 0x06000612 RID: 1554 RVA: 0x00137010 File Offset: 0x00135210
		private static void SetBackColor(Main.InfoToSetBackColor info, out Color sunColor, out Color moonColor)
		{
			double num = Main.time;
			Color bgColorToSet = Color.White;
			sunColor = Color.White;
			moonColor = Color.White;
			bool isInGameMenuOrIsServer = info.isInGameMenuOrIsServer;
			if (Main.dayTime)
			{
				if (num < 13500.0)
				{
					float num2 = (float)(num / 13500.0);
					sunColor.R = (byte)(num2 * 200f + 55f);
					sunColor.G = (byte)(num2 * 180f + 75f);
					sunColor.B = (byte)(num2 * 250f + 5f);
					bgColorToSet.R = (byte)(num2 * 230f + 25f);
					bgColorToSet.G = (byte)(num2 * 220f + 35f);
					bgColorToSet.B = (byte)(num2 * 220f + 35f);
				}
				if (num > 45900.0)
				{
					float num2 = (float)(1.0 - (num / 54000.0 - 0.85) * 6.666666666666667);
					sunColor.R = (byte)(num2 * 120f + 55f);
					sunColor.G = (byte)(num2 * 100f + 25f);
					sunColor.B = (byte)(num2 * 120f + 55f);
					bgColorToSet.R = (byte)(num2 * 200f + 35f);
					bgColorToSet.G = (byte)(num2 * 85f + 35f);
					bgColorToSet.B = (byte)(num2 * 135f + 35f);
				}
				else if (num > 37800.0)
				{
					float num2 = (float)(1.0 - (num / 54000.0 - 0.7) * 6.666666666666667);
					sunColor.R = (byte)(num2 * 80f + 175f);
					sunColor.G = (byte)(num2 * 130f + 125f);
					sunColor.B = (byte)(num2 * 100f + 155f);
					bgColorToSet.R = (byte)(num2 * 20f + 235f);
					bgColorToSet.G = (byte)(num2 * 135f + 120f);
					bgColorToSet.B = (byte)(num2 * 85f + 170f);
				}
			}
			if (!Main.dayTime)
			{
				if (info.BloodMoonActive)
				{
					if (num < 16200.0)
					{
						float num2 = (float)(1.0 - num / 16200.0);
						moonColor.R = (byte)(num2 * 10f + 205f);
						moonColor.G = (byte)(num2 * 170f + 55f);
						moonColor.B = (byte)(num2 * 200f + 55f);
						bgColorToSet.R = (byte)(40f - num2 * 40f + 35f);
						bgColorToSet.G = (byte)(num2 * 20f + 15f);
						bgColorToSet.B = (byte)(num2 * 20f + 15f);
					}
					else if (num >= 16200.0)
					{
						float num2 = (float)((num / 32400.0 - 0.5) * 2.0);
						moonColor.R = (byte)(num2 * 50f + 205f);
						moonColor.G = (byte)(num2 * 100f + 155f);
						moonColor.B = (byte)(num2 * 100f + 155f);
						moonColor.R = (byte)(num2 * 10f + 205f);
						moonColor.G = (byte)(num2 * 170f + 55f);
						moonColor.B = (byte)(num2 * 200f + 55f);
						bgColorToSet.R = (byte)(40f - num2 * 40f + 35f);
						bgColorToSet.G = (byte)(num2 * 20f + 15f);
						bgColorToSet.B = (byte)(num2 * 20f + 15f);
					}
				}
				else if (num < 16200.0)
				{
					float num2 = (float)(1.0 - num / 16200.0);
					moonColor.R = (byte)(num2 * 10f + 205f);
					moonColor.G = (byte)(num2 * 70f + 155f);
					moonColor.B = (byte)(num2 * 100f + 155f);
					bgColorToSet.R = (byte)(num2 * 30f + 5f);
					bgColorToSet.G = (byte)(num2 * 30f + 5f);
					bgColorToSet.B = (byte)(num2 * 30f + 5f);
				}
				else if (num >= 16200.0)
				{
					float num2 = (float)((num / 32400.0 - 0.5) * 2.0);
					moonColor.R = (byte)(num2 * 50f + 205f);
					moonColor.G = (byte)(num2 * 100f + 155f);
					moonColor.B = (byte)(num2 * 100f + 155f);
					bgColorToSet.R = (byte)(num2 * 20f + 5f);
					bgColorToSet.G = (byte)(num2 * 30f + 5f);
					bgColorToSet.B = (byte)(num2 * 30f + 5f);
				}
				if (Main.dontStarveWorld)
				{
					DontStarveSeed.ModifyNightColor(ref bgColorToSet, ref moonColor);
				}
			}
			if (Main.cloudAlpha > 0f && !Main.remixWorld)
			{
				float num3 = 1f - Main.cloudAlpha * 0.9f * Main.atmo;
				bgColorToSet.R = (byte)((float)bgColorToSet.R * num3);
				bgColorToSet.G = (byte)((float)bgColorToSet.G * num3);
				bgColorToSet.B = (byte)((float)bgColorToSet.B * num3);
			}
			if (info.GraveyardInfluence > 0f && !Main.remixWorld)
			{
				float num4 = 1f - info.GraveyardInfluence * 0.6f;
				bgColorToSet.R = (byte)((float)bgColorToSet.R * num4);
				bgColorToSet.G = (byte)((float)bgColorToSet.G * num4);
				bgColorToSet.B = (byte)((float)bgColorToSet.B * num4);
			}
			if (isInGameMenuOrIsServer && !Main.dayTime)
			{
				bgColorToSet.R = 35;
				bgColorToSet.G = 35;
				bgColorToSet.B = 35;
			}
			if (info.CorruptionBiomeInfluence > 0f)
			{
				float num5 = info.CorruptionBiomeInfluence;
				if (num5 > 1f)
				{
					num5 = 1f;
				}
				int r = (int)bgColorToSet.R;
				int g = (int)bgColorToSet.G;
				int b = (int)bgColorToSet.B;
				r -= (int)(90f * num5 * ((float)bgColorToSet.R / 255f));
				g -= (int)(140f * num5 * ((float)bgColorToSet.G / 255f));
				b -= (int)(70f * num5 * ((float)bgColorToSet.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r, ref g, ref b);
				bgColorToSet.R = (byte)r;
				bgColorToSet.G = (byte)g;
				bgColorToSet.B = (byte)b;
				r = (int)sunColor.R;
				g = (int)sunColor.G;
				b = (int)sunColor.B;
				r -= (int)(100f * num5 * ((float)sunColor.R / 255f));
				g -= (int)(100f * num5 * ((float)sunColor.G / 255f));
				b -= (int)(0f * num5 * ((float)sunColor.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				sunColor.R = (byte)r;
				sunColor.G = (byte)g;
				sunColor.B = (byte)b;
			}
			if (info.CrimsonBiomeInfluence > 0f)
			{
				float num6 = info.CrimsonBiomeInfluence;
				if (num6 > 1f)
				{
					num6 = 1f;
				}
				int r2 = (int)bgColorToSet.R;
				int g2 = (int)bgColorToSet.G;
				int b2 = (int)bgColorToSet.B;
				r2 -= (int)(40f * num6 * ((float)bgColorToSet.G / 255f));
				g2 -= (int)(110f * num6 * ((float)bgColorToSet.G / 255f));
				b2 -= (int)(140f * num6 * ((float)bgColorToSet.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r2, ref g2, ref b2);
				bgColorToSet.R = (byte)r2;
				bgColorToSet.G = (byte)g2;
				bgColorToSet.B = (byte)b2;
				r2 = (int)sunColor.R;
				g2 = (int)sunColor.G;
				b2 = (int)sunColor.B;
				g2 -= (int)(90f * num6 * ((float)sunColor.G / 255f));
				b2 -= (int)(110f * num6 * ((float)sunColor.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				sunColor.R = (byte)r2;
				sunColor.G = (byte)g2;
				sunColor.B = (byte)b2;
			}
			if (info.JungleBiomeInfluence > 0f)
			{
				float num7 = info.JungleBiomeInfluence;
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				int r3 = (int)bgColorToSet.R;
				int G = (int)bgColorToSet.G;
				int b3 = (int)bgColorToSet.B;
				r3 -= (int)(40f * num7 * ((float)bgColorToSet.R / 255f));
				b3 -= (int)(70f * num7 * ((float)bgColorToSet.B / 255f));
				if (G > 255)
				{
					G = 255;
				}
				if (G < 15)
				{
					G = 15;
				}
				if (r3 > 255)
				{
					r3 = 255;
				}
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r3, ref G, ref b3);
				bgColorToSet.R = (byte)r3;
				bgColorToSet.G = (byte)G;
				bgColorToSet.B = (byte)b3;
				r3 = (int)sunColor.R;
				G = (int)sunColor.G;
				b3 = (int)sunColor.B;
				r3 -= (int)(30f * num7 * ((float)sunColor.R / 255f));
				b3 -= (int)(10f * num7 * ((float)sunColor.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (G < 15)
				{
					G = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				sunColor.R = (byte)r3;
				sunColor.G = (byte)G;
				sunColor.B = (byte)b3;
			}
			if (info.MushroomBiomeInfluence > 0f)
			{
				float mushroomBiomeInfluence = info.MushroomBiomeInfluence;
				int r4 = (int)bgColorToSet.R;
				int g3 = (int)bgColorToSet.G;
				int b4 = (int)bgColorToSet.B;
				g3 -= (int)(250f * mushroomBiomeInfluence * ((float)bgColorToSet.G / 255f));
				r4 -= (int)(250f * mushroomBiomeInfluence * ((float)bgColorToSet.R / 255f));
				b4 -= (int)(250f * mushroomBiomeInfluence * ((float)bgColorToSet.B / 255f));
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r4, ref g3, ref b4);
				bgColorToSet.R = (byte)r4;
				bgColorToSet.G = (byte)g3;
				bgColorToSet.B = (byte)b4;
				r4 = (int)sunColor.R;
				g3 = (int)sunColor.G;
				b4 = (int)sunColor.B;
				g3 -= (int)(10f * mushroomBiomeInfluence * ((float)sunColor.G / 255f));
				r4 -= (int)(30f * mushroomBiomeInfluence * ((float)sunColor.R / 255f));
				b4 -= (int)(10f * mushroomBiomeInfluence * ((float)sunColor.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				sunColor.R = (byte)r4;
				sunColor.G = (byte)g3;
				sunColor.B = (byte)b4;
				r4 = (int)moonColor.R;
				g3 = (int)moonColor.G;
				b4 = (int)moonColor.B;
				g3 -= (int)(140f * mushroomBiomeInfluence * ((float)moonColor.R / 255f));
				r4 -= (int)(170f * mushroomBiomeInfluence * ((float)moonColor.G / 255f));
				b4 -= (int)(190f * mushroomBiomeInfluence * ((float)moonColor.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				moonColor.R = (byte)r4;
				moonColor.G = (byte)g3;
				moonColor.B = (byte)b4;
			}
			byte minimalLight = 15;
			switch (Main.GetMoonPhase())
			{
			case MoonPhase.Full:
				minimalLight = 19;
				break;
			case MoonPhase.ThreeQuartersAtLeft:
			case MoonPhase.ThreeQuartersAtRight:
				minimalLight = 17;
				break;
			case MoonPhase.HalfAtLeft:
			case MoonPhase.HalfAtRight:
				minimalLight = 15;
				break;
			case MoonPhase.QuarterAtLeft:
			case MoonPhase.QuarterAtRight:
				minimalLight = 13;
				break;
			case MoonPhase.Empty:
				minimalLight = 11;
				break;
			}
			if (Main.dontStarveWorld)
			{
				DontStarveSeed.ModifyMinimumLightColorAtNight(ref minimalLight);
			}
			if (bgColorToSet.R < minimalLight)
			{
				bgColorToSet.R = minimalLight;
			}
			if (bgColorToSet.G < minimalLight)
			{
				bgColorToSet.G = minimalLight;
			}
			if (bgColorToSet.B < minimalLight)
			{
				bgColorToSet.B = minimalLight;
			}
			if (info.BloodMoonActive)
			{
				if (bgColorToSet.R < 25)
				{
					bgColorToSet.R = 25;
				}
				if (bgColorToSet.G < 25)
				{
					bgColorToSet.G = 25;
				}
				if (bgColorToSet.B < 25)
				{
					bgColorToSet.B = 25;
				}
			}
			if (Main.eclipse && Main.dayTime)
			{
				float num8 = 1242f;
				Main.eclipseLight = (float)(num / (double)num8);
				if (Main.eclipseLight > 1f)
				{
					Main.eclipseLight = 1f;
				}
			}
			else if (Main.eclipseLight > 0f)
			{
				Main.eclipseLight -= 0.01f;
				if (Main.eclipseLight < 0f)
				{
					Main.eclipseLight = 0f;
				}
			}
			if (Main.eclipseLight > 0f)
			{
				float num9 = 1f - 0.925f * Main.eclipseLight;
				float num10 = 1f - 0.96f * Main.eclipseLight;
				float num11 = 1f - 1f * Main.eclipseLight;
				int num12 = (int)((float)bgColorToSet.R * num9);
				int num13 = (int)((float)bgColorToSet.G * num10);
				int num14 = (int)((float)bgColorToSet.B * num11);
				bgColorToSet.R = (byte)num12;
				bgColorToSet.G = (byte)num13;
				bgColorToSet.B = (byte)num14;
				sunColor.R = byte.MaxValue;
				sunColor.G = 127;
				sunColor.B = 67;
				if (bgColorToSet.R < 20)
				{
					bgColorToSet.R = 20;
				}
				if (bgColorToSet.G < 10)
				{
					bgColorToSet.G = 10;
				}
				if (!Lighting.NotRetro)
				{
					if (bgColorToSet.R < 20)
					{
						bgColorToSet.R = 20;
					}
					if (bgColorToSet.G < 14)
					{
						bgColorToSet.G = 14;
					}
					if (bgColorToSet.B < 6)
					{
						bgColorToSet.B = 6;
					}
				}
			}
			if ((Main.remixWorld && !Main.gameMenu) || WorldGen.remixWorldGen)
			{
				bgColorToSet.R = 1;
				bgColorToSet.G = 1;
				bgColorToSet.B = 1;
			}
			if (Main.lightning > 0f)
			{
				float value = (float)bgColorToSet.R / 255f;
				float value2 = (float)bgColorToSet.G / 255f;
				float value3 = (float)bgColorToSet.B / 255f;
				value = MathHelper.Lerp(value, 1f, Main.lightning);
				value2 = MathHelper.Lerp(value2, 1f, Main.lightning);
				value3 = MathHelper.Lerp(value3, 1f, Main.lightning);
				bgColorToSet.R = (byte)(value * 255f);
				bgColorToSet.G = (byte)(value2 * 255f);
				bgColorToSet.B = (byte)(value3 * 255f);
			}
			if (!info.BloodMoonActive)
			{
				moonColor = Color.White;
			}
			Main.ColorOfTheSkies = bgColorToSet;
		}

		// Token: 0x06000613 RID: 1555 RVA: 0x00138018 File Offset: 0x00136218
		private void DoLightTiles()
		{
			Main.GetAreaToLight(out this.firstTileX, out this.lastTileX, out this.firstTileY, out this.lastTileY);
			if (!Main.drawSkip)
			{
				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
			}
		}

		// Token: 0x06000614 RID: 1556 RVA: 0x00138068 File Offset: 0x00136268
		public static void GetAreaToLight(out int firstTileX, out int lastTileX, out int firstTileY, out int lastTileY)
		{
			Vector2 vector = Main.Camera.ScaledPosition;
			Vector2 vector2 = Main.Camera.ScaledSize;
			if (!Lighting.UsingNewLighting)
			{
				vector = Main.Camera.UnscaledPosition;
				vector2 = Main.Camera.UnscaledSize;
			}
			firstTileX = (int)Math.Floor((double)(vector.X / 16f)) - 1;
			lastTileX = (int)Math.Floor((double)((vector.X + vector2.X) / 16f)) + 2;
			firstTileY = (int)Math.Floor((double)(vector.Y / 16f)) - 1;
			lastTileY = (int)Math.Floor((double)((vector.Y + vector2.Y) / 16f)) + 2;
		}

		// Token: 0x06000615 RID: 1557 RVA: 0x00138114 File Offset: 0x00136314
		private static void ClampScreenPositionToWorld()
		{
			Vector2 input = new Vector2(Main.leftWorld + 656f, Main.topWorld + 656f) - Main.GameViewMatrix.Translation;
			Vector2 input2 = new Vector2(Main.rightWorld - (float)Main.screenWidth / Main.GameViewMatrix.Zoom.X - 672f, Main.bottomWorld - (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y - 672f) - Main.GameViewMatrix.Translation;
			input = Utils.Round(input);
			input2 = Utils.Round(input2);
			Main.screenPosition = Vector2.Clamp(Main.screenPosition, input, input2);
		}

		// Token: 0x06000616 RID: 1558 RVA: 0x001381C4 File Offset: 0x001363C4
		private void DrawBG()
		{
			float num = (float)Math.Min(PlayerInput.RealScreenHeight, Main.LogicCheckScreenHeight);
			float num2 = Main.screenPosition.Y + (float)(Main.screenHeight / 2) - num / 2f;
			this.scAdj = (float)(Main.worldSurface * 16.0) / (num2 + num);
			float num3 = (float)Main.maxTilesY * 0.15f * 16f;
			num3 -= num2;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			num3 *= 0.00025f;
			float num4 = num3 * num3;
			this.scAdj *= 0.45f - num4;
			if (Main.maxTilesY <= 1200)
			{
				this.scAdj *= -500f;
			}
			else if (Main.maxTilesY <= 1800)
			{
				this.scAdj *= -300f;
			}
			else
			{
				this.scAdj *= -150f;
			}
			float num5 = (float)Main.screenHeight;
			this.screenOff = num5 - 600f;
			this.bgTopY = (int)((double)(0f - Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1200.0 + 1190.0) + (int)this.scAdj;
			this.cTop = (float)(this.bgTopY - 50);
			if (Main.resetClouds)
			{
				Cloud.resetClouds();
				Main.resetClouds = false;
			}
			Main.bgScale = 1f;
			Main.bgWidthScaled = (int)((float)Main.backgroundWidth[Main.treeMntBGSet1[0]] * Main.bgScale);
			Main.ColorOfSurfaceBackgroundsModified = Main.ColorOfTheSkies;
			Main.ColorOfSurfaceBackgroundsBase = Main.ColorOfTheSkies;
			int preferredBGStyleForPlayer = Main.GetPreferredBGStyleForPlayer();
			int num6 = 30;
			Main.backgroundLayerTransitionSpeed = 0.05f;
			if (preferredBGStyleForPlayer == 0)
			{
				num6 = 60;
			}
			if (Main.bgDelay < 0)
			{
				Main.bgDelay++;
			}
			else if (preferredBGStyleForPlayer != Main.bgStyle)
			{
				Main.bgDelay++;
				if (Main.bgDelay > num6)
				{
					Main.bgDelay = -60;
					Main.bgStyle = preferredBGStyleForPlayer;
					if (preferredBGStyleForPlayer == 0)
					{
						Main.bgDelay = 0;
					}
				}
			}
			else if (Main.bgDelay > 0)
			{
				Main.bgDelay--;
			}
			if (Main.gameMenu)
			{
				Main.backgroundLayerTransitionSpeed = 0.02f;
				if (!Main.dayTime)
				{
					Main.bgStyle = 1;
				}
				else
				{
					Main.bgStyle = 0;
				}
				preferredBGStyleForPlayer = Main.bgStyle;
				if (WorldGen.drunkWorldGen)
				{
					Main.bgStyle = 9;
				}
				ModSurfaceBackgroundStyle menuBackgroundStyle = MenuLoader.CurrentMenu.MenuBackgroundStyle;
				if (menuBackgroundStyle != null)
				{
					Main.bgStyle = menuBackgroundStyle.Slot;
				}
			}
			if (Main.instantBGTransitionCounter > 0)
			{
				Main.instantBGTransitionCounter--;
				Main.bgStyle = preferredBGStyleForPlayer;
				Main.backgroundLayerTransitionSpeed = 1f;
			}
			this.UpdateBGVisibility_BackLayer(null, null);
			this.UpdateBGVisibility_FrontLayer(null, null);
			LoaderManager.Get<SurfaceBackgroundStylesLoader>().ModifyFarFades(Main.bgStyle, Main.bgAlphaFrontLayer, Main.backgroundLayerTransitionSpeed);
			try
			{
				this.DrawSurfaceBG();
				if (Main.BackgroundEnabled)
				{
					this.DrawUnderworldBackground(false);
				}
			}
			catch (Exception ex)
			{
				if (!Main.ignoreErrors)
				{
					throw ex;
				}
				TimeLogger.DrawException(ex);
			}
			TimeLogger.DetailedDrawTime(8);
		}

		// Token: 0x06000617 RID: 1559 RVA: 0x001384FC File Offset: 0x001366FC
		private void UpdateBGVisibility_FrontLayer(int? targetBiomeOverride, float? transitionAmountOverride)
		{
			int value = Main.bgStyle;
			if (targetBiomeOverride != null)
			{
				value = targetBiomeOverride.Value;
			}
			float value2 = Main.backgroundLayerTransitionSpeed;
			if (transitionAmountOverride != null)
			{
				value2 = transitionAmountOverride.Value;
			}
			for (int i = 0; i < Main.bgAlphaFrontLayer.Length; i++)
			{
				if (value == i)
				{
					Main.bgAlphaFrontLayer[i] += value2;
					if (Main.bgAlphaFrontLayer[i] > 1f)
					{
						Main.bgAlphaFrontLayer[i] = 1f;
					}
				}
				else
				{
					Main.bgAlphaFrontLayer[i] -= value2;
					if (Main.bgAlphaFrontLayer[i] < 0f)
					{
						Main.bgAlphaFrontLayer[i] = 0f;
					}
				}
			}
		}

		// Token: 0x06000618 RID: 1560 RVA: 0x001385A4 File Offset: 0x001367A4
		private void UpdateBGVisibility_BackLayer(int? targetBiomeOverride, float? transitionAmountOverride)
		{
			int value = Main.bgStyle;
			if (targetBiomeOverride != null)
			{
				value = targetBiomeOverride.Value;
			}
			float num = Main.backgroundLayerTransitionSpeed;
			if (transitionAmountOverride != null)
			{
				float value2 = transitionAmountOverride.Value;
			}
			switch (value)
			{
			case 1:
			case 5:
				this.DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
				return;
			case 2:
				this.DrawBG_ModifyBGFarBackLayerAlpha(1, null, transitionAmountOverride);
				return;
			case 3:
				if (WorldGen.jungleBG == 5)
				{
					this.DrawBG_ModifyBGFarBackLayerAlpha(13, null, transitionAmountOverride);
					return;
				}
				this.DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
				return;
			case 4:
				this.DrawBG_ModifyBGFarBackLayerAlpha(3, null, transitionAmountOverride);
				return;
			case 6:
				if (WorldGen.hallowBG == 3)
				{
					this.DrawBG_ModifyBGFarBackLayerAlpha(6, null, transitionAmountOverride);
					return;
				}
				this.DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
				return;
			case 7:
				this.DrawBG_ModifyBGFarBackLayerAlpha(4, null, transitionAmountOverride);
				return;
			case 8:
				this.DrawBG_ModifyBGFarBackLayerAlpha(5, null, transitionAmountOverride);
				return;
			case 9:
				this.DrawBG_ModifyBGFarBackLayerAlpha(0, new int?(6), transitionAmountOverride);
				return;
			case 10:
			case 11:
			case 12:
				this.DrawBG_ModifyBGFarBackLayerAlpha(value, null, transitionAmountOverride);
				return;
			default:
				if (value >= 14)
				{
					this.DrawBG_ModifyBGFarBackLayerAlpha(value, null, transitionAmountOverride);
					return;
				}
				this.DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
				return;
			}
		}

		// Token: 0x06000619 RID: 1561 RVA: 0x00138718 File Offset: 0x00136918
		public static int GetPreferredBGStyleForPlayer()
		{
			int num = Main.bgStyle;
			int num2 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int modBG;
			SceneEffectPriority priority;
			LoaderManager.Get<SurfaceBackgroundStylesLoader>().ChooseStyle(out modBG, out priority);
			if (priority >= SceneEffectPriority.BiomeHigh)
			{
				num = modBG;
			}
			else if (WorldGen.oceanDepths((int)(Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16, (int)(Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16))
			{
				num = (Main.player[Main.myPlayer].ZoneHallow ? 6 : (Main.player[Main.myPlayer].ZoneCorrupt ? ((Main.SceneMetrics.BloodTileCount <= Main.SceneMetrics.EvilTileCount) ? 1 : 8) : (Main.player[Main.myPlayer].ZoneCrimson ? 8 : ((Main.SceneMetrics.HoneyBlockCount <= 400) ? 4 : 3))));
			}
			else if (Main.player[Main.myPlayer].ZoneGlowshroom)
			{
				num = 9;
			}
			else if (Main.player[Main.myPlayer].ZoneDesert)
			{
				num = (Main.player[Main.myPlayer].ZoneCorrupt ? 5 : (Main.player[Main.myPlayer].ZoneCrimson ? 5 : ((!Main.player[Main.myPlayer].ZoneHallow) ? 2 : 5)));
			}
			else if (Main.player[Main.myPlayer].ZoneHallow)
			{
				num = 6;
			}
			else if (Main.player[Main.myPlayer].ZoneCorrupt)
			{
				num = ((Main.SceneMetrics.BloodTileCount <= Main.SceneMetrics.EvilTileCount) ? 1 : 8);
			}
			else if (Main.player[Main.myPlayer].ZoneCrimson)
			{
				num = 8;
			}
			else if (priority >= SceneEffectPriority.BiomeMedium)
			{
				num = modBG;
			}
			else if (Main.player[Main.myPlayer].ZoneJungle)
			{
				num = 3;
			}
			else if (Main.player[Main.myPlayer].ZoneSnow)
			{
				num = 7;
			}
			else if (priority >= SceneEffectPriority.BiomeLow)
			{
				num = modBG;
			}
			else
			{
				num = 0;
				if (num2 >= Main.treeX[0])
				{
					if (WorldGen.treeBG1 != WorldGen.treeBG2 && num2 < Main.treeX[1])
					{
						num = 10;
					}
					else if (WorldGen.treeBG1 != WorldGen.treeBG3 && num2 < Main.treeX[2])
					{
						num = 11;
					}
					else if (WorldGen.treeBG1 != WorldGen.treeBG4)
					{
						num = 12;
					}
				}
			}
			if (GlobalBackgroundStyleLoader.loaded)
			{
				GlobalBackgroundStyleLoader.DelegateChooseSurfaceBackgroundStyle[] hookChooseSurfaceBackgroundStyle = GlobalBackgroundStyleLoader.HookChooseSurfaceBackgroundStyle;
				for (int i = 0; i < hookChooseSurfaceBackgroundStyle.Length; i++)
				{
					hookChooseSurfaceBackgroundStyle[i](ref num);
				}
			}
			return num;
		}

		// Token: 0x0600061A RID: 1562 RVA: 0x0013899C File Offset: 0x00136B9C
		private void DrawBG_ModifyBGFarBackLayerAlpha(int desiredBG, int? desiredBG2 = null, float? transitionAmountOverride = null)
		{
			float value = Main.backgroundLayerTransitionSpeed;
			if (transitionAmountOverride != null)
			{
				value = transitionAmountOverride.Value;
			}
			for (int i = 0; i < Main.bgAlphaFarBackLayer.Length; i++)
			{
				bool flag = desiredBG == i;
				bool flag2 = flag;
				bool flag3;
				if (desiredBG2 != null)
				{
					int? num = desiredBG2;
					int num2 = i;
					flag3 = (num.GetValueOrDefault() == num2 & num != null);
				}
				else
				{
					flag3 = false;
				}
				flag = (flag2 || flag3);
				Main.bgAlphaFarBackLayer[i] = MathHelper.Clamp(Main.bgAlphaFarBackLayer[i] + (flag ? value : (0f - value)), 0f, 1f);
			}
		}

		// Token: 0x0600061B RID: 1563 RVA: 0x00138A2C File Offset: 0x00136C2C
		public void DrawInfernoRings()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].outOfRange && Main.player[i].inferno && !Main.player[i].dead)
				{
					this.LoadFlameRing();
					float num2 = 0.1f;
					float num3 = 0.9f;
					if (!Main.gamePaused && base.IsActive)
					{
						Main.player[i].flameRingScale += 0.004f;
					}
					float num4;
					if (Main.player[i].flameRingScale < 1f)
					{
						num4 = Main.player[i].flameRingScale;
					}
					else
					{
						Main.player[i].flameRingScale = 0.8f;
						num4 = Main.player[i].flameRingScale;
					}
					if (!Main.gamePaused && base.IsActive)
					{
						Main.player[i].flameRingRot += 0.05f;
					}
					if (Main.player[i].flameRingRot > 6.2831855f)
					{
						Main.player[i].flameRingRot -= 6.2831855f;
					}
					if (Main.player[i].flameRingRot < -6.2831855f)
					{
						Main.player[i].flameRingRot += 6.2831855f;
					}
					for (int j = 0; j < 3; j++)
					{
						float num5 = num4 + num2 * (float)j;
						if (num5 > 1f)
						{
							num5 -= num2 * 2f;
						}
						float num6 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num5 - num3) * 10f);
						Main.spriteBatch.Draw(TextureAssets.FlameRing.Value, Main.player[i].Center - Main.screenPosition, new Rectangle?(new Rectangle(0, 400 * j, 400, 400)), new Color(num6, num6, num6, num6 / 2f), Main.player[i].flameRingRot + 1.0471976f * (float)j, new Vector2(200f, 200f), num5, 0, 0f);
					}
				}
			}
		}

		// Token: 0x0600061C RID: 1564 RVA: 0x00138C6A File Offset: 0x00136E6A
		private static void UpdateInvasion()
		{
			SystemLoader.PreUpdateInvasions();
			Main.UpdateInvasion_Inner();
			SystemLoader.PostUpdateInvasions();
		}

		// Token: 0x0600061D RID: 1565 RVA: 0x00138C7C File Offset: 0x00136E7C
		private static void UpdateInvasion_Inner()
		{
			if (Main.invasionType <= 0)
			{
				return;
			}
			if (Main.invasionSize <= 0)
			{
				if (Main.invasionType == 1)
				{
					NPC.SetEventFlagCleared(ref NPC.downedGoblins, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					}
					AchievementsHelper.NotifyProgressionEvent(10);
				}
				else if (Main.invasionType == 2)
				{
					NPC.SetEventFlagCleared(ref NPC.downedFrost, 1);
					AchievementsHelper.NotifyProgressionEvent(12);
				}
				else if (Main.invasionType == 3)
				{
					NPC.SetEventFlagCleared(ref NPC.downedPirates, 2);
					AchievementsHelper.NotifyProgressionEvent(11);
				}
				else if (Main.invasionType == 4)
				{
					NPC.SetEventFlagCleared(ref NPC.downedMartians, 3);
					AchievementsHelper.NotifyProgressionEvent(13);
				}
				Main.InvasionWarning();
				Main.invasionType = 0;
				Main.invasionDelay = 0;
			}
			if (Main.invasionX == (double)Main.spawnTileX)
			{
				return;
			}
			double num = Main.desiredWorldEventsUpdateRate;
			if (num < 0.0)
			{
				num = 0.0;
			}
			if (Main.invasionX > (double)Main.spawnTileX)
			{
				Main.invasionX -= num;
				if (Main.invasionX <= (double)Main.spawnTileX)
				{
					Main.invasionX = (double)Main.spawnTileX;
					Main.InvasionWarning();
				}
				else if (num > 0.0)
				{
					Main.invasionWarn--;
				}
			}
			else if (Main.invasionX < (double)Main.spawnTileX)
			{
				Main.invasionX += num;
				if (Main.invasionX >= (double)Main.spawnTileX)
				{
					Main.invasionX = (double)Main.spawnTileX;
					Main.InvasionWarning();
				}
				else if (num > 0.0)
				{
					Main.invasionWarn--;
				}
			}
			if (Main.invasionWarn <= 0)
			{
				Main.invasionWarn = 3600;
				Main.InvasionWarning();
			}
		}

		// Token: 0x0600061E RID: 1566 RVA: 0x00138E24 File Offset: 0x00137024
		private static void InvasionWarning()
		{
			LocalizedText empty = LocalizedText.Empty;
			empty = ((Main.invasionSize <= 0) ? ((Main.invasionType == 2) ? Lang.misc[4] : ((Main.invasionType == 3) ? Lang.misc[24] : ((Main.invasionType != 4) ? Lang.misc[0] : Lang.misc[42]))) : ((Main.invasionX < (double)Main.spawnTileX) ? ((Main.invasionType == 2) ? Lang.misc[5] : ((Main.invasionType == 3) ? Lang.misc[25] : ((Main.invasionType != 4) ? Lang.misc[1] : LocalizedText.Empty))) : ((Main.invasionX > (double)Main.spawnTileX) ? ((Main.invasionType == 2) ? Lang.misc[6] : ((Main.invasionType == 3) ? Lang.misc[26] : ((Main.invasionType != 4) ? Lang.misc[2] : LocalizedText.Empty))) : ((Main.invasionType == 2) ? Lang.misc[7] : ((Main.invasionType == 3) ? Lang.misc[27] : ((Main.invasionType != 4) ? Lang.misc[3] : Lang.misc[41]))))));
			if (Main.netMode == 0)
			{
				Main.NewText(empty.ToString(), 175, 75, byte.MaxValue);
				return;
			}
			if (Main.netMode == 2 && empty.Value != "")
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(empty.Key, Array.Empty<object>()), new Color(175, 75, 255), -1);
			}
		}

		// Token: 0x0600061F RID: 1567 RVA: 0x00138FD0 File Offset: 0x001371D0
		public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
		{
			if (Main.invasionType != 0)
			{
				return false;
			}
			if (Main.invasionDelay != 0 && !ignoreDelay)
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].ConsumedLifeCrystals >= 5)
				{
					num++;
				}
			}
			return num > 0;
		}

		// Token: 0x06000620 RID: 1568 RVA: 0x0013902C File Offset: 0x0013722C
		public static void StartInvasion(int type = 1)
		{
			if (Main.invasionType != 0 && Main.invasionSize == 0)
			{
				Main.invasionType = 0;
			}
			if (Main.invasionType != 0)
			{
				return;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].ConsumedLifeCrystals >= 5)
				{
					num++;
				}
			}
			if (num > 0)
			{
				Main.invasionType = type;
				Main.invasionSize = 80 + 40 * num;
				if (type == 3)
				{
					Main.invasionSize += 40 + 20 * num;
				}
				if (type == 4)
				{
					Main.invasionSize = 160 + 40 * num;
				}
				Main.invasionSizeStart = Main.invasionSize;
				Main.invasionProgress = 0;
				Main.invasionProgressIcon = type + 3;
				Main.invasionProgressWave = 0;
				Main.invasionProgressMax = Main.invasionSizeStart;
				Main.invasionWarn = 0;
				if (type == 4)
				{
					Main.invasionX = (double)(Main.spawnTileX - 1);
					Main.invasionWarn = 2;
					return;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.invasionX = 0.0;
					return;
				}
				Main.invasionX = (double)Main.maxTilesX;
			}
		}

		// Token: 0x06000621 RID: 1569 RVA: 0x00139138 File Offset: 0x00137338
		public static void FakeLoadInvasionStart()
		{
			int num = 0;
			int num2 = 0;
			switch (Main.invasionType)
			{
			case 1:
			case 2:
				num = 80;
				num2 = 40;
				break;
			case 3:
				num = 120;
				num2 = 60;
				break;
			case 4:
				num = 160;
				num2 = 40;
				break;
			}
			int num3 = (int)Math.Ceiling((double)((float)(Main.invasionSize - num) / (float)num2));
			Main.invasionSizeStart = num;
			if (num3 > 0)
			{
				Main.invasionSizeStart += num3 * num2;
			}
		}

		// Token: 0x06000622 RID: 1570 RVA: 0x001391B0 File Offset: 0x001373B0
		private static void UpdateClient()
		{
			if (Main.myPlayer == 255)
			{
				Netplay.Disconnect = true;
			}
			Main.netPlayCounter++;
			if (Main.netPlayCounter > 3600)
			{
				Main.netPlayCounter = 0;
			}
			if (Main.netPlayCounter % 420 == 0)
			{
				NetMessage.SendData(13, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.netPlayCounter % 900 == 0)
			{
				NetMessage.SendData(36, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(16, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(40, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Netplay.Connection.IsActive)
			{
				Netplay.Connection.TimeOutTimer++;
				if (!Main.stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
				{
					Main.statusText = Lang.inter[43].Value;
					Netplay.Disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].playerIndexTheItemIsReservedFor == Main.myPlayer)
				{
					Main.item[i].FindOwner(i);
				}
			}
		}

		// Token: 0x06000623 RID: 1571 RVA: 0x00139318 File Offset: 0x00137518
		private static void UpdateServer()
		{
			Main.netPlayCounter++;
			if (Main.netPlayCounter % 3600 == 0)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				Main.netPlayCounter = 0;
			}
			for (int i = 0; i < Main.maxNetPlayers; i++)
			{
				if (Main.player[i].active && Netplay.Clients[i].IsActive)
				{
					Netplay.Clients[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 900.0) == 0.0)
			{
				bool flag = true;
				int num = Main.lastItemUpdate;
				int num2 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num2++;
					if (!Main.item[num].active || Main.item[num].playerIndexTheItemIsReservedFor == 255)
					{
						NetMessage.SendData(21, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
					}
					if (num2 >= Main.maxItemUpdates || num == Main.lastItemUpdate)
					{
						flag = false;
					}
				}
				Main.lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				Item item = Main.item[j];
				if (item.active && (item.playerIndexTheItemIsReservedFor == 255 || !Main.player[item.playerIndexTheItemIsReservedFor].active))
				{
					item.FindOwner(j);
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (Netplay.Clients[k].IsActive)
				{
					Netplay.Clients[k].TimeOutTimer++;
					if (Netplay.Clients[k].State == 0)
					{
						Netplay.Clients[k].TimeOutTimer += 3;
					}
					if (!Main.stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
					{
						Netplay.Clients[k].SetPendingTermination("Timeout");
						Netplay.Clients[k].PendingTerminationApproved = true;
					}
				}
				if (Main.player[k].active)
				{
					RemoteClient.CheckSection(k, Main.player[k].position, 1);
				}
			}
		}

		/// <inheritdoc cref="M:Terraria.Main.NewText(System.String,System.Byte,System.Byte,System.Byte)" />
		// Token: 0x06000624 RID: 1572 RVA: 0x00139544 File Offset: 0x00137744
		public static void NewText(object o, Color? color = null)
		{
			Color c = color ?? Color.White;
			Main.NewText(o.ToString(), c.R, c.G, c.B);
		}

		/// <summary>
		/// Spawns chat text on the local client. Does nothing on the server. <para />
		/// To send chat text from the server, use one of the following:<br />
		/// • <see cref="M:Terraria.Chat.ChatHelper.BroadcastChatMessage(Terraria.Localization.NetworkText,Microsoft.Xna.Framework.Color,System.Int32)" /> sends a message from the server to be displayed in chat for all clients. <br />
		/// • <see cref="M:Terraria.Chat.ChatHelper.SendChatMessageToClient(Terraria.Localization.NetworkText,Microsoft.Xna.Framework.Color,System.Int32)" /> sends a message from the server to be displayed in chat for a specific client. <para />
		/// For floating text, such as damage, see <see cref="T:Terraria.CombatText" /> <br />
		/// <VariousTextOptionsSummary>
		///         <br />Summary of options to display text to the user:<br />
		///         • <see cref="M:Terraria.Main.NewText(System.String,System.Byte,System.Byte,System.Byte)" /> to display a message in chat. <br />
		///         • <see cref="T:Terraria.CombatText" /> to display floating damage numbers in-game. Used for damage and healing numbers. <br />
		///         • <see cref="T:Terraria.PopupText" /> to display non-overlapping floating in-game text. Used for reforge and item pickup messages. <br />
		///     </VariousTextOptionsSummary>
		/// </summary>
		// Token: 0x06000625 RID: 1573 RVA: 0x0013958B File Offset: 0x0013778B
		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255)
		{
			Main.chatMonitor.NewText(newText, R, G, B);
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
		}

		// Token: 0x06000626 RID: 1574 RVA: 0x001395B0 File Offset: 0x001377B0
		public static void NewTextMultiline(string text, bool force = false, Color c = default(Color), int WidthLimit = -1)
		{
			Main.chatMonitor.NewTextMultiline(text, force, c, WidthLimit);
			SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
		}

		/// <summary>
		/// Stops rain. Should be called on the server (netMode != client) - vanilla syncs it using <see cref="M:Terraria.Main.SyncRain" />.
		/// <br>You can also call this on the client to update visuals immediately, assuming it was called serverside as well (Journey Mode rain slider does this).</br>
		/// </summary>
		// Token: 0x06000627 RID: 1575 RVA: 0x001395D5 File Offset: 0x001377D5
		public static void StopRain()
		{
			Main.rainTime = 0.0;
			Main.raining = false;
			Main.maxRaining = 0f;
		}

		/// <summary>
		/// Starts rain for a random amount of time. Should be called on the server (netMode != client) - vanilla syncs it using <see cref="M:Terraria.Main.SyncRain" />.
		/// <br>You can also call this on the client to update visuals immediately, assuming it was/will be called serverside as well (Journey Mode rain slider does this).</br>
		/// </summary>
		// Token: 0x06000628 RID: 1576 RVA: 0x001395F8 File Offset: 0x001377F8
		public static void StartRain()
		{
			int num = 86400;
			int num2 = num / 24;
			int num3 = Main.rand.Next(num2 * 8, num);
			if (Main.rand.Next(3) == 0)
			{
				num3 += Main.rand.Next(0, num2);
			}
			if (Main.rand.Next(4) == 0)
			{
				num3 += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(5) == 0)
			{
				num3 += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(6) == 0)
			{
				num3 += Main.rand.Next(0, num2 * 3);
			}
			if (Main.rand.Next(7) == 0)
			{
				num3 += Main.rand.Next(0, num2 * 4);
			}
			if (Main.rand.Next(8) == 0)
			{
				num3 += Main.rand.Next(0, num2 * 5);
			}
			float num4 = 1f;
			if (Main.rand.Next(2) == 0)
			{
				num4 += 0.05f;
			}
			if (Main.rand.Next(3) == 0)
			{
				num4 += 0.1f;
			}
			if (Main.rand.Next(4) == 0)
			{
				num4 += 0.15f;
			}
			if (Main.rand.Next(5) == 0)
			{
				num4 += 0.2f;
			}
			Main.rainTime = (double)((int)((float)num3 * num4));
			Main.ChangeRain();
			Main.raining = true;
		}

		// Token: 0x06000629 RID: 1577 RVA: 0x00139744 File Offset: 0x00137944
		private static void ChangeRain()
		{
			Main.maxRaining = ((Main.cloudBGActive >= 1f || (double)Main.numClouds > 150.0) ? ((Main.rand.Next(3) != 0) ? ((float)Main.rand.Next(40, 91) * 0.01f) : ((float)Main.rand.Next(20, 91) * 0.01f)) : (((double)Main.numClouds > 100.0) ? ((Main.rand.Next(3) != 0) ? ((float)Main.rand.Next(20, 61) * 0.01f) : ((float)Main.rand.Next(10, 71) * 0.01f)) : ((Main.rand.Next(3) != 0) ? ((float)Main.rand.Next(5, 31) * 0.01f) : ((float)Main.rand.Next(5, 41) * 0.01f))));
		}

		// Token: 0x0600062A RID: 1578 RVA: 0x0013983C File Offset: 0x00137A3C
		public static void StartSlimeRain(bool announce = true)
		{
			if (Main.remixWorld || Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 54000.0;
				Main.slimeRain = true;
				SkyManager.Instance.Activate("Slime", default(Vector2), Array.Empty<object>());
				return;
			}
			if (Main.raining)
			{
				return;
			}
			if (Main.slimeRainTime <= 0.0)
			{
				Main.slimeRainTime = (double)Main.rand.Next(32400, 54000);
			}
			Main.slimeRain = true;
			Main.slimeRainKillCount = 0;
			if (Main.netMode == 0)
			{
				SkyManager.Instance.Activate("Slime", default(Vector2), Array.Empty<object>());
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
					return;
				}
			}
			else if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600062B RID: 1579 RVA: 0x00139930 File Offset: 0x00137B30
		public static void StopSlimeRain(bool announce = true)
		{
			if (!Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 0.0;
				Main.slimeRain = false;
				SkyManager.Instance.Deactivate("Slime", Array.Empty<object>());
				return;
			}
			int num = 604800;
			if (Main.hardMode)
			{
				num *= 2;
			}
			Main.slimeRainTime = (double)(-(double)Main.rand.Next(3024, 6048) * 100);
			Main.slimeRain = false;
			if (Main.netMode == 0)
			{
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
				}
				SkyManager.Instance.Deactivate("Slime", Array.Empty<object>());
				return;
			}
			if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600062C RID: 1580 RVA: 0x00139A00 File Offset: 0x00137C00
		private static void UpdateTime()
		{
			if (LanternNight.LanternsUp)
			{
				Main.cloudBGActive = 0f;
				if (Main.numClouds > 30)
				{
					Main.numClouds = 30;
				}
			}
			if (Main.ladyBugRainBoost > 0.0)
			{
				Main.ladyBugRainBoost -= Main.desiredWorldEventsUpdateRate;
			}
			if (Main.pumpkinMoon)
			{
				Main.bloodMoon = false;
				Main.snowMoon = false;
			}
			if (Main.snowMoon)
			{
				Main.bloodMoon = false;
			}
			if ((Main.netMode != 1 && !Main.gameMenu) || Main.netMode == 2)
			{
				if (Main.slimeRainTime > 0.0)
				{
					Main.slimeRainTime -= Main.desiredWorldEventsUpdateRate;
					if (Main.slimeRainTime <= 0.0)
					{
						Main.StopSlimeRain(true);
					}
				}
				else if (Main.slimeRainTime < 0.0)
				{
					Main.slimeRainTime += Main.desiredWorldEventsUpdateRate;
					if (Main.slimeRainTime > 0.0)
					{
						Main.slimeRainTime = 0.0;
					}
				}
				if (Main.raining)
				{
					if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled)
					{
						if (LanternNight.LanternsUp)
						{
							Main.StopRain();
						}
						else
						{
							Main.rainTime -= Main.desiredWorldEventsUpdateRate;
							if (Main.desiredWorldEventsUpdateRate > 0.0)
							{
								double num = 86400.0 / Main.desiredWorldEventsUpdateRate / 24.0;
								if (Main.rainTime <= 0.0)
								{
									Main.StopRain();
								}
								else if (Main.rand.NextDouble() <= 1.0 / (num * 2.0))
								{
									Main.ChangeRain();
								}
							}
						}
					}
				}
				else if (!Main.slimeRain && !LanternNight.LanternsUp && !LanternNight.NextNightIsLanternNight)
				{
					double num2 = 86400.0 / Main.desiredWorldEventsUpdateRate;
					if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled && Main.desiredWorldEventsUpdateRate != 0.0)
					{
						if (Main.rand.NextDouble() <= 1.0 / (num2 * 5.75))
						{
							Main.StartRain();
						}
						else if (Main.cloudBGActive >= 1f && Main.rand.NextDouble() <= 1.0 / (num2 * 4.25))
						{
							Main.StartRain();
						}
						else if (Main.ladyBugRainBoost > 0.0 && Main.rand.NextDouble() <= 1.0 / num2)
						{
							Main.StartRain();
						}
					}
					if (!Main.raining && !NPC.BusyWithAnyInvasionOfSorts() && Main.dayTime && Main.time < 27000.0 && Main.desiredWorldEventsUpdateRate > 0.0)
					{
						double num3 = 450000.00000000006 / Main.desiredWorldEventsUpdateRate;
						if (!NPC.downedSlimeKing)
						{
							num3 /= 2.0;
						}
						if (Main.hardMode)
						{
							num3 *= 1.5;
						}
						bool flag = Main.AnyPlayerReadyToFightKingSlime();
						if (!flag)
						{
							num3 *= 5.0;
						}
						if (num3 > 0.0 && (flag || Main.expertMode) && Main.rand.NextDouble() <= 1.0 / num3)
						{
							Main.StartSlimeRain(true);
						}
					}
				}
			}
			if (Main.maxRaining != Main.oldMaxRaining)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
				Main.oldMaxRaining = Main.maxRaining;
			}
			Main.UpdateTimeRate();
			double num4 = Main.time;
			Main.time += Main.dayRate;
			CultistRitual.UpdateTime();
			BirthdayParty.UpdateTime();
			LanternNight.UpdateTime();
			Sandstorm.UpdateTime();
			DD2Event.UpdateTime();
			CreditsRollEvent.UpdateTime();
			WorldGen.mysticLogsEvent.UpdateTime();
			Main.PylonSystem.Update();
			if (!Main.dedServ)
			{
				if (NPC.MoonLordCountdown > 0)
				{
					float num5 = MathHelper.Clamp((float)Math.Sin((double)((float)NPC.MoonLordCountdown / 60f * 0.5f)) * 2f, 0f, 1f);
					num5 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / (float)NPC.MaxMoonLordCountdown);
					if (!Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
					{
						Terraria.Graphics.Effects.Filters.Scene.Activate("MoonLordShake", Main.player[Main.myPlayer].position, Array.Empty<object>());
					}
					Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num5);
				}
				else if (Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene.Deactivate("MoonLordShake", Array.Empty<object>());
				}
			}
			if (NPC.MoonLordCountdown > 0)
			{
				NPC.MoonLordCountdown--;
				if (NPC.MoonLordCountdown <= 0 && Main.netMode != 1)
				{
					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(Main.maxTilesX / 2), (float)Main.worldSurface / 2f) * 16f, 0, 0), 398);
				}
			}
			if (NPC.taxCollector && Main.netMode != 2 && !Main.gameMenu)
			{
				Main.player[Main.myPlayer].taxTimer += Main.dayRate;
				if (Main.player[Main.myPlayer].taxTimer >= Player.taxRate)
				{
					Main.player[Main.myPlayer].taxTimer -= Player.taxRate;
					Main.player[Main.myPlayer].CollectTaxes();
				}
			}
			if (Main.netMode != 1)
			{
				Main.UpdateSlimeRainWarning();
			}
			if (Main.netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!Main.dayTime || Main.time > 48600.0)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else if (!Main.IsFastForwardingTime() && Main.dayTime && Main.time < 27000.0 && Main.rand.NextDouble() < Main.dayRate / 108000.0)
				{
					int num6 = 0;
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && Main.npc[i].townNPC && Main.npc[i].type != 37 && Main.npc[i].type != 453)
						{
							num6++;
						}
					}
					if (num6 >= 2)
					{
						WorldGen.SpawnTravelNPC();
					}
				}
				NPC.travelNPC = false;
			}
			bool stopEvents = Main.ShouldNormalEventsBeAbleToStart();
			if (!Main.dayTime)
			{
				Main.eclipse = false;
				if (!Main.IsFastForwardingTime() && !stopEvents)
				{
					if (WorldGen.spawnEye && Main.netMode != 1 && Main.time > 4860.0)
					{
						for (int j = 0; j < 255; j++)
						{
							if (Main.player[j].active && !Main.player[j].dead && ((double)Main.player[j].position.Y < Main.worldSurface * 16.0 || Main.remixWorld))
							{
								NPC.SpawnOnPlayer(j, 4);
								WorldGen.spawnEye = false;
								break;
							}
						}
					}
					if (WorldGen.spawnHardBoss > 0 && Main.netMode != 1 && Main.time > 4860.0)
					{
						bool flag2 = false;
						for (int k = 0; k < 200; k++)
						{
							if (Main.npc[k].active && Main.npc[k].boss)
							{
								flag2 = true;
							}
						}
						if (!flag2)
						{
							int l = 0;
							while (l < 255)
							{
								if (Main.player[l].active && !Main.player[l].dead && ((double)Main.player[l].position.Y < Main.worldSurface * 16.0 || Main.remixWorld))
								{
									if (Main.remixWorld && Main.getGoodWorld)
									{
										NPC.SpawnMechQueen(l);
										break;
									}
									if (WorldGen.spawnHardBoss == 1)
									{
										NPC.SpawnOnPlayer(l, 134);
										break;
									}
									if (WorldGen.spawnHardBoss == 2)
									{
										NPC.SpawnOnPlayer(l, 125);
										NPC.SpawnOnPlayer(l, 126);
										break;
									}
									if (WorldGen.spawnHardBoss == 3)
									{
										NPC.SpawnOnPlayer(l, 127);
										break;
									}
									break;
								}
								else
								{
									l++;
								}
							}
						}
						WorldGen.spawnHardBoss = 0;
					}
					if (Main.netMode != 1)
					{
						double num7 = 16200.0;
						bool flag4 = num4 < num7 && Main.time >= num7;
						bool flag3 = Main.raining;
						if (flag4 && flag3 && (!NPC.downedDeerclops || Main.rand.Next(4) == 0))
						{
							for (int m = 0; m < 255; m++)
							{
								Player player = Main.player[m];
								if (player.active && !player.dead && (double)player.position.Y < Main.worldSurface * 16.0 && player.ZoneSnow && player.townNPCs <= 0f && (player.statLifeMax2 >= 200 || player.statDefense >= 9) && !NPC.AnyDanger(false, false))
								{
									NPC.SpawnOnPlayer(m, 668);
									break;
								}
							}
						}
					}
				}
				if (Main.time > 32400.0)
				{
					Main.UpdateTime_StartDay(ref stopEvents);
				}
				Main.HandleMeteorFall();
				return;
			}
			WorldGen.spawnHardBoss = 0;
			WorldGen.spawnEye = false;
			Main.bloodMoon = false;
			Main.stopMoonEvent();
			if (Main.time > 54000.0)
			{
				Main.UpdateTime_StartNight(ref stopEvents);
			}
			Main.UpdateTime_SpawnTownNPCs();
		}

		// Token: 0x0600062D RID: 1581 RVA: 0x0013A3B8 File Offset: 0x001385B8
		public static bool AnyPlayerReadyToFightKingSlime()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].ConsumedLifeCrystals > 2 && Main.player[i].statDefense > 8)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600062E RID: 1582 RVA: 0x0013A40C File Offset: 0x0013860C
		public static void SkipToTime(int timeToSet, bool setIsDayTime)
		{
			double num = Main.time;
			bool flag = Main.dayTime;
			while (setIsDayTime != Main.dayTime)
			{
				bool stopEvents = Main.ShouldNormalEventsBeAbleToStart();
				if (Main.dayTime)
				{
					Main.UpdateTime_StartNight(ref stopEvents);
				}
				else
				{
					Main.UpdateTime_StartDay(ref stopEvents);
				}
			}
			Main.time = (double)timeToSet;
			if (Main.netMode == 2)
			{
				NetMessage.TrySendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600062F RID: 1583 RVA: 0x0013A478 File Offset: 0x00138678
		public static bool ShouldNormalEventsBeAbleToStart()
		{
			return NPC.LunarApocalypseIsUp || NPC.AnyNPCs(398) || NPC.MoonLordCountdown > 0 || LanternNight.LanternsUp;
		}

		// Token: 0x06000630 RID: 1584 RVA: 0x0013A49C File Offset: 0x0013869C
		public static void UpdateTime_StartNight(ref bool stopEvents)
		{
			if (Main.fastForwardTimeToDusk)
			{
				Main.fastForwardTimeToDusk = false;
				Main.UpdateTimeRate();
			}
			if (Main.moondialCooldown > 0)
			{
				Main.moondialCooldown--;
			}
			NPC.ResetBadgerHatTime();
			NPC.freeCake = false;
			Star.NightSetup();
			NPC.setFireFlyChance();
			BirthdayParty.CheckNight();
			LanternNight.CheckNight();
			WorldGen.mysticLogsEvent.StartNight();
			WorldGen.prioritizedTownNPCType = 0;
			Main.checkForSpawns = 0;
			if (Main.rand.Next(50) == 0 && Main.netMode != 1 && NPC.downedBoss2)
			{
				WorldGen.spawnMeteor = true;
			}
			if (LanternNight.LanternsUp)
			{
				stopEvents = true;
			}
			if (Main.eclipse && Main.netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(3);
			}
			Main.eclipse = false;
			if (Main.netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(0);
			}
			if (!Main.IsFastForwardingTime() && !stopEvents)
			{
				if (!NPC.downedBoss1 && Main.netMode != 1)
				{
					bool flag = false;
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && Main.player[i].ConsumedLifeCrystals >= 5 && Main.player[i].statDefense > 10)
						{
							flag = true;
							break;
						}
					}
					if (flag && Main.rand.Next(3) == 0)
					{
						int num = 0;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].townNPC)
							{
								num++;
							}
						}
						if (num >= 4)
						{
							WorldGen.spawnEye = true;
							if (Main.netMode == 0)
							{
								Main.NewText(Lang.misc[9].Value, 50, byte.MaxValue, 130);
							}
							else if (Main.netMode == 2)
							{
								ChatHelper.BroadcastChatMessage(Lang.misc[9].ToNetworkText(), new Color(50, 255, 130), -1);
							}
						}
					}
				}
				if (Main.netMode != 1 && !Main.pumpkinMoon && !DD2Event.Ongoing && !Main.snowMoon && WorldGen.altarCount > 0 && Main.hardMode && !WorldGen.spawnEye && Main.rand.Next(10) == 0)
				{
					bool flag2 = false;
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active && Main.npc[k].boss)
						{
							flag2 = true;
						}
					}
					if (!flag2 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
					{
						if (Main.remixWorld && Main.getGoodWorld)
						{
							if (Main.rand.Next(2) == 0)
							{
								WorldGen.spawnHardBoss = Main.rand.Next(3) + 1;
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[108].Value, 50, byte.MaxValue, 130);
								}
								else if (Main.netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[108].ToNetworkText(), new Color(50, 255, 130), -1);
								}
							}
						}
						else
						{
							int l = 0;
							while (l < 1000)
							{
								int num2 = Main.rand.Next(3) + 1;
								if (num2 == 1 && !NPC.downedMechBoss1)
								{
									WorldGen.spawnHardBoss = num2;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[28].Value, 50, byte.MaxValue, 130);
										break;
									}
									if (Main.netMode == 2)
									{
										ChatHelper.BroadcastChatMessage(Lang.misc[28].ToNetworkText(), new Color(50, 255, 130), -1);
										break;
									}
									break;
								}
								else if (num2 == 2 && !NPC.downedMechBoss2)
								{
									WorldGen.spawnHardBoss = num2;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[29].Value, 50, byte.MaxValue, 130);
										break;
									}
									if (Main.netMode == 2)
									{
										ChatHelper.BroadcastChatMessage(Lang.misc[29].ToNetworkText(), new Color(50, 255, 130), -1);
										break;
									}
									break;
								}
								else if (num2 == 3 && !NPC.downedMechBoss3)
								{
									WorldGen.spawnHardBoss = num2;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[30].Value, 50, byte.MaxValue, 130);
										break;
									}
									if (Main.netMode == 2)
									{
										ChatHelper.BroadcastChatMessage(Lang.misc[30].ToNetworkText(), new Color(50, 255, 130), -1);
										break;
									}
									break;
								}
								else
								{
									l++;
								}
							}
						}
					}
				}
				int maxValue = 9;
				if (Main.tenthAnniversaryWorld)
				{
					maxValue = 6;
				}
				if (!WorldGen.spawnEye && Main.moonPhase != 4 && Main.rand.Next(maxValue) == 0 && Main.netMode != 1)
				{
					for (int m = 0; m < 255; m++)
					{
						if (Main.player[m].active && Main.player[m].ConsumedLifeCrystals > 1)
						{
							Main.bloodMoon = true;
							break;
						}
					}
					if (Main.bloodMoon)
					{
						Main.sundialCooldown = 0;
						Main.moondialCooldown = 0;
						AchievementsHelper.NotifyProgressionEvent(4);
						if (Main.netMode == 0)
						{
							Main.NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
						}
						else if (Main.netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(Lang.misc[8].ToNetworkText(), new Color(50, 255, 130), -1);
						}
					}
				}
			}
			Main.time = 0.0;
			Main.dayTime = false;
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x06000631 RID: 1585 RVA: 0x0013AA40 File Offset: 0x00138C40
		public static void UpdateTime_StartDay(ref bool stopEvents)
		{
			WorldGen.ResetTreeShakes();
			if (Main.fastForwardTimeToDawn)
			{
				Main.fastForwardTimeToDawn = false;
				Main.UpdateTimeRate();
			}
			Main.AnglerQuestSwap();
			BirthdayParty.CheckMorning();
			LanternNight.CheckMorning();
			if (Main.invasionDelay > 0)
			{
				Main.invasionDelay--;
			}
			WorldGen.prioritizedTownNPCType = 0;
			Main.checkForSpawns = 0;
			Main.time = 0.0;
			if (Main.bloodMoon && Main.netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(5);
			}
			Main.bloodMoon = false;
			Main.CheckForMoonEventsScoreDisplay();
			Main.CheckForMoonEventsStartingTemporarySeasons();
			Main.checkXMas();
			Main.checkHalloween();
			Main.stopMoonEvent();
			Main.dayTime = true;
			if (Main.sundialCooldown > 0)
			{
				Main.sundialCooldown--;
			}
			Main.moonPhase++;
			if (Main.moonPhase >= 8)
			{
				Main.moonPhase = 0;
			}
			if (Main.drunkWorld && Main.netMode != 1)
			{
				WorldGen.crimson = !WorldGen.crimson;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.netMode == 1)
			{
				return;
			}
			AchievementsHelper.NotifyProgressionEvent(1);
			if (stopEvents)
			{
				return;
			}
			if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(20) == 0)
			{
				Main.sundialCooldown = 0;
				Main.moondialCooldown = 0;
				Main.eclipse = true;
				AchievementsHelper.NotifyProgressionEvent(2);
				if (Main.eclipse)
				{
					if (Main.remixWorld)
					{
						if (Main.netMode == 0)
						{
							Main.NewText(Lang.misc[106].Value, 50, byte.MaxValue, 130);
						}
						else if (Main.netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(Lang.misc[106].ToNetworkText(), new Color(50, 255, 130), -1);
						}
					}
					else if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(Lang.misc[20].ToNetworkText(), new Color(50, 255, 130), -1);
					}
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				if (Main.snowMoon || Main.pumpkinMoon || DD2Event.Ongoing)
				{
					return;
				}
				if (WorldGen.shadowOrbSmashed)
				{
					if (!NPC.downedGoblins)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.StartInvasion(1);
						}
					}
					else if ((Main.hardMode && Main.rand.Next(60) == 0) || (!Main.hardMode && Main.rand.Next(30) == 0))
					{
						Main.StartInvasion(1);
					}
				}
				if (Main.invasionType == 0 && Main.hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && Main.rand.Next(60) == 0) || (!NPC.downedPirates && Main.rand.Next(30) == 0)))
				{
					Main.StartInvasion(3);
				}
			}
		}

		// Token: 0x06000632 RID: 1586 RVA: 0x0013AD30 File Offset: 0x00138F30
		private static void HandleMeteorFall()
		{
			if (Main.netMode != 1 && WorldGen.spawnMeteor)
			{
				if (Main.time < 15000.0)
				{
					Main._canShowMeteorFall = true;
				}
				else
				{
					if (Main._canShowMeteorFall && Main.time <= 16200.0)
					{
						Main.AmbienceServer.ForceEntitySpawn(new AmbienceServer.AmbienceSpawnInfo
						{
							skyEntityType = SkyEntityType.Meteor,
							targetPlayer = -1
						});
					}
					Main._canShowMeteorFall = false;
				}
			}
			if (Main.time > 16200.0 && WorldGen.spawnMeteor)
			{
				WorldGen.spawnMeteor = false;
				WorldGen.dropMeteor();
			}
		}

		// Token: 0x06000633 RID: 1587 RVA: 0x0013ADC8 File Offset: 0x00138FC8
		private static void UpdateSlimeRainWarning()
		{
			if (Main.slimeWarningTime <= 0)
			{
				return;
			}
			Main.slimeWarningTime--;
			if (Main.slimeWarningTime > 0)
			{
				return;
			}
			if (Main.netMode == 0)
			{
				if (Main.slimeRainTime > 0.0)
				{
					Main.NewText(Lang.gen[74].Value, 50, byte.MaxValue, 130);
					return;
				}
				Main.NewText(Lang.gen[75].Value, 50, byte.MaxValue, 130);
				return;
			}
			else
			{
				if (Main.slimeRainTime > 0.0)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[74].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
					return;
				}
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[75].Key, Array.Empty<object>()), new Color(50, 255, 130), -1);
				return;
			}
		}

		// Token: 0x06000634 RID: 1588 RVA: 0x0013AEB8 File Offset: 0x001390B8
		public static BestiaryUnlockProgressReport GetBestiaryProgressReport()
		{
			List<BestiaryEntry> vanillaEntries = Main.BestiaryDB.GetBestiaryEntriesByMod(null);
			BestiaryUnlockProgressReport result = default(BestiaryUnlockProgressReport);
			result.EntriesTotal = vanillaEntries.Count;
			result.CompletionAmountTotal = (float)vanillaEntries.Count((BestiaryEntry e) => e.UIInfoProvider.GetEntryUICollectionInfo().UnlockState > BestiaryEntryUnlockState.NotKnownAtAll_0);
			return result;
		}

		// Token: 0x06000635 RID: 1589 RVA: 0x0013AF14 File Offset: 0x00139114
		private static void UpdateTime_SpawnTownNPCs()
		{
			double worldUpdateRate = WorldGen.GetWorldUpdateRate();
			if (Main.netMode == 1 || worldUpdateRate <= 0.0)
			{
				return;
			}
			Main.checkForSpawns++;
			if ((double)Main.checkForSpawns < 7200.0 / worldUpdateRate)
			{
				return;
			}
			Main.checkForSpawns = 0;
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					num++;
				}
			}
			for (int j = 0; j < Main.townNPCCanSpawn.Length; j++)
			{
				Main.townNPCCanSpawn[j] = false;
			}
			WorldGen.prioritizedTownNPCType = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			int num6 = 0;
			int num7 = 0;
			int num8 = 0;
			int num9 = 0;
			int num10 = 0;
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = 0;
			int num17 = 0;
			int num18 = 0;
			int num19 = 0;
			int num20 = 0;
			int num21 = 0;
			int num22 = 0;
			int num23 = 0;
			int num24 = 0;
			int num25 = 0;
			int num26 = 0;
			int num27 = 0;
			int num28 = 0;
			int num29 = 0;
			int num30 = 0;
			int num31 = 0;
			int num32 = 0;
			int num33 = 0;
			int num34 = 0;
			int num35 = 0;
			int num36 = 0;
			int num37 = 0;
			int num38 = 0;
			int num39 = 0;
			int num40 = 0;
			for (int k = 0; k < 200; k++)
			{
				if (Main.npc[k].active && Main.npc[k].townNPC)
				{
					if (Main.npc[k].type != 368 && Main.npc[k].type != 37 && Main.npc[k].type != 453 && !Main.npc[k].homeless)
					{
						WorldGen.QuickFindHome(k);
					}
					if (Main.npc[k].type == 37)
					{
						num7++;
					}
					if (Main.npc[k].type == 17)
					{
						num2++;
					}
					if (Main.npc[k].type == 18)
					{
						num3++;
					}
					if (Main.npc[k].type == 19)
					{
						num5++;
					}
					if (Main.npc[k].type == 20)
					{
						num4++;
					}
					if (Main.npc[k].type == 22)
					{
						num6++;
					}
					if (Main.npc[k].type == 38)
					{
						num8++;
					}
					if (Main.npc[k].type == 54)
					{
						num9++;
					}
					if (Main.npc[k].type == 107)
					{
						num11++;
					}
					if (Main.npc[k].type == 108)
					{
						num10++;
					}
					if (Main.npc[k].type == 124)
					{
						num12++;
					}
					if (Main.npc[k].type == 142)
					{
						num13++;
					}
					if (Main.npc[k].type == 160)
					{
						num14++;
					}
					if (Main.npc[k].type == 178)
					{
						num15++;
					}
					if (Main.npc[k].type == 207)
					{
						num16++;
					}
					if (Main.npc[k].type == 208)
					{
						num17++;
					}
					if (Main.npc[k].type == 209)
					{
						num18++;
					}
					if (Main.npc[k].type == 227)
					{
						num19++;
					}
					if (Main.npc[k].type == 228)
					{
						num20++;
					}
					if (Main.npc[k].type == 229)
					{
						num21++;
					}
					if (Main.npc[k].type == 353)
					{
						num22++;
					}
					if (Main.npc[k].type == 369)
					{
						num23++;
					}
					if (Main.npc[k].type == 441)
					{
						num24++;
					}
					if (Main.npc[k].type == 550)
					{
						num25++;
					}
					if (Main.npc[k].type == 588)
					{
						num26++;
					}
					if (Main.npc[k].type == 633)
					{
						num27++;
					}
					if (Main.npc[k].type == 637)
					{
						num28++;
					}
					if (Main.npc[k].type == 638)
					{
						num29++;
					}
					if (Main.npc[k].type == 656)
					{
						num30++;
					}
					if (Main.npc[k].type == 670)
					{
						num31++;
					}
					if (Main.npc[k].type == 678)
					{
						num32++;
					}
					if (Main.npc[k].type == 679)
					{
						num33++;
					}
					if (Main.npc[k].type == 680)
					{
						num34++;
					}
					if (Main.npc[k].type == 681)
					{
						num35++;
					}
					if (Main.npc[k].type == 682)
					{
						num36++;
					}
					if (Main.npc[k].type == 683)
					{
						num37++;
					}
					if (Main.npc[k].type == 684)
					{
						num38++;
					}
					if (Main.npc[k].type == 663)
					{
						num39++;
					}
					num40++;
				}
			}
			if (WorldGen.prioritizedTownNPCType == 0)
			{
				bool flag = NPC.SpawnAllowed_Merchant();
				bool flag2 = NPC.SpawnAllowed_ArmsDealer();
				bool flag3 = NPC.SpawnAllowed_Nurse();
				bool flag4 = NPC.SpawnAllowed_DyeTrader();
				bool flag5 = NPC.SpawnAllowed_Demolitionist();
				BestiaryUnlockProgressReport bestiaryProgressReport = Main.GetBestiaryProgressReport();
				if (!NPC.downedBoss3 && num7 == 0)
				{
					int num41 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num41].homeless = false;
					Main.npc[num41].homeTileX = Main.dungeonX;
					Main.npc[num41].homeTileY = Main.dungeonY;
				}
				bool flag6 = false;
				if (Main.rand.Next(40) == 0)
				{
					flag6 = true;
				}
				bool flag7 = flag6 && num40 >= 14;
				if (NPC.unlockedPartyGirlSpawn)
				{
					flag7 = true;
				}
				bool flag8 = BirthdayParty.GenuineParty;
				if (NPC.unlockedSlimeGreenSpawn)
				{
					flag8 = true;
				}
				if (num6 < 1)
				{
					Main.townNPCCanSpawn[22] = true;
				}
				if (flag && num2 < 1)
				{
					Main.townNPCCanSpawn[17] = true;
				}
				if (flag3 && num3 < 1 && num2 > 0)
				{
					Main.townNPCCanSpawn[18] = true;
				}
				if (flag2 && num5 < 1)
				{
					Main.townNPCCanSpawn[19] = true;
				}
				if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num4 < 1)
				{
					Main.townNPCCanSpawn[20] = true;
				}
				if (flag5 && num2 > 0 && num8 < 1)
				{
					Main.townNPCCanSpawn[38] = true;
				}
				if (NPC.savedStylist && num22 < 1)
				{
					Main.townNPCCanSpawn[353] = true;
				}
				if (NPC.savedAngler && num23 < 1)
				{
					Main.townNPCCanSpawn[369] = true;
				}
				if (NPC.downedBoss3 && num9 < 1)
				{
					Main.townNPCCanSpawn[54] = true;
				}
				if (NPC.savedGoblin && num11 < 1)
				{
					Main.townNPCCanSpawn[107] = true;
				}
				if (NPC.savedTaxCollector && num24 < 1)
				{
					Main.townNPCCanSpawn[441] = true;
				}
				if (NPC.savedWizard && num10 < 1)
				{
					Main.townNPCCanSpawn[108] = true;
				}
				if (NPC.savedMech && num12 < 1)
				{
					Main.townNPCCanSpawn[124] = true;
				}
				if (NPC.downedFrost && num13 < 1 && Main.xMas)
				{
					Main.townNPCCanSpawn[142] = true;
				}
				if (((Main.tenthAnniversaryWorld && !Main.remixWorld) || NPC.downedMechBossAny) && num15 < 1)
				{
					Main.townNPCCanSpawn[178] = true;
				}
				if (flag4 && num16 < 1 && num40 >= 4)
				{
					Main.townNPCCanSpawn[207] = true;
				}
				if (NPC.downedQueenBee && num20 < 1)
				{
					Main.townNPCCanSpawn[228] = true;
				}
				if (NPC.downedPirates && num21 < 1)
				{
					Main.townNPCCanSpawn[229] = true;
				}
				if (num14 < 1 && Main.hardMode)
				{
					Main.townNPCCanSpawn[160] = true;
				}
				if (Main.hardMode && NPC.downedPlantBoss && num18 < 1)
				{
					Main.townNPCCanSpawn[209] = true;
				}
				if (num40 >= 8 && num19 < 1)
				{
					Main.townNPCCanSpawn[227] = true;
				}
				if (flag7 && num17 < 1)
				{
					Main.townNPCCanSpawn[208] = true;
				}
				if (NPC.savedBartender && num25 < 1)
				{
					Main.townNPCCanSpawn[550] = true;
				}
				if (NPC.savedGolfer && num26 < 1)
				{
					Main.townNPCCanSpawn[588] = true;
				}
				if (bestiaryProgressReport.CompletionPercent >= 0.1f && num27 < 1)
				{
					Main.townNPCCanSpawn[633] = true;
				}
				if (NPC.boughtCat && num28 < 1)
				{
					Main.townNPCCanSpawn[637] = true;
				}
				if (NPC.boughtDog && num29 < 1)
				{
					Main.townNPCCanSpawn[638] = true;
				}
				if (NPC.boughtBunny && num30 < 1)
				{
					Main.townNPCCanSpawn[656] = true;
				}
				if (NPC.unlockedSlimeBlueSpawn && num31 < 1)
				{
					Main.townNPCCanSpawn[670] = true;
				}
				if (flag8 && num32 < 1)
				{
					Main.townNPCCanSpawn[678] = true;
				}
				if (NPC.unlockedSlimeOldSpawn && num33 < 1)
				{
					Main.townNPCCanSpawn[679] = true;
				}
				if (NPC.unlockedSlimePurpleSpawn && num34 < 1)
				{
					Main.townNPCCanSpawn[680] = true;
				}
				if (NPC.unlockedSlimeRainbowSpawn && num35 < 1)
				{
					Main.townNPCCanSpawn[681] = true;
				}
				if (NPC.unlockedSlimeRedSpawn && num36 < 1)
				{
					Main.townNPCCanSpawn[682] = true;
				}
				if (NPC.unlockedSlimeYellowSpawn && num37 < 1)
				{
					Main.townNPCCanSpawn[683] = true;
				}
				if (NPC.unlockedSlimeCopperSpawn && num38 < 1)
				{
					Main.townNPCCanSpawn[684] = true;
				}
				bool flag9 = num2 > 0 && num3 > 0 && num4 > 0 && num5 > 0 && num6 > 0 && num8 > 0 && num9 > 0 && num10 > 0 && num11 > 0 && num12 > 0 && num14 > 0 && num15 > 0 && num16 > 0 && num17 > 0 && num18 > 0 && num19 > 0 && num20 > 0 && num21 > 0 && num22 > 0 && num23 > 0 && num24 > 0 && num25 > 0 && num26 > 0 && num27 > 0;
				if (Main.tenthAnniversaryWorld && !Main.remixWorld)
				{
					flag9 = true;
				}
				if (NPC.unlockedPrincessSpawn)
				{
					flag9 = true;
				}
				if (flag9 && num39 < 1)
				{
					Main.townNPCCanSpawn[663] = true;
				}
				int num42 = WorldGen.prioritizedTownNPCType;
				if (num42 == 0 && NPC.boughtCat && num28 < 1)
				{
					num42 = 637;
				}
				if (num42 == 0 && NPC.boughtDog && num29 < 1)
				{
					num42 = 638;
				}
				if (num42 == 0 && NPC.boughtBunny && num30 < 1)
				{
					num42 = 656;
				}
				if (num42 == 0 && NPC.unlockedSlimeBlueSpawn && num31 < 1)
				{
					num42 = 670;
				}
				if (num42 == 0 && flag8 && num32 < 1)
				{
					num42 = 678;
				}
				if (num42 == 0 && NPC.unlockedSlimeOldSpawn && num33 < 1)
				{
					num42 = 679;
				}
				if (num42 == 0 && NPC.unlockedSlimePurpleSpawn && num34 < 1)
				{
					num42 = 680;
				}
				if (num42 == 0 && NPC.unlockedSlimeRainbowSpawn && num35 < 1)
				{
					num42 = 681;
				}
				if (num42 == 0 && NPC.unlockedSlimeRedSpawn && num36 < 1)
				{
					num42 = 682;
				}
				if (num42 == 0 && NPC.unlockedSlimeYellowSpawn && num37 < 1)
				{
					num42 = 683;
				}
				if (num42 == 0 && NPC.unlockedSlimeCopperSpawn && num38 < 1)
				{
					num42 = 684;
				}
				if (num42 == 0 && num6 < 1)
				{
					num42 = 22;
				}
				if (num42 == 0 && flag && num2 < 1)
				{
					num42 = 17;
				}
				if (num42 == 0 && flag3 && num3 < 1 && num2 > 0)
				{
					num42 = 18;
				}
				if (num42 == 0 && flag2 && num5 < 1)
				{
					num42 = 19;
				}
				if (num42 == 0 && NPC.savedGoblin && num11 < 1)
				{
					num42 = 107;
				}
				if (num42 == 0 && NPC.savedTaxCollector && num24 < 1)
				{
					num42 = 441;
				}
				if (num42 == 0 && NPC.savedWizard && num10 < 1)
				{
					num42 = 108;
				}
				if (num42 == 0 && Main.hardMode && num14 < 1)
				{
					num42 = 160;
				}
				if (num42 == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num4 < 1)
				{
					num42 = 20;
				}
				if (num42 == 0 && flag5 && num2 > 0 && num8 < 1)
				{
					num42 = 38;
				}
				if (num42 == 0 && NPC.downedQueenBee && num20 < 1)
				{
					num42 = 228;
				}
				if (num42 == 0 && NPC.downedMechBossAny && num15 < 1)
				{
					num42 = 178;
				}
				if (num42 == 0 && NPC.savedMech && num12 < 1)
				{
					num42 = 124;
				}
				if (num42 == 0 && NPC.savedAngler && num23 < 1)
				{
					num42 = 369;
				}
				if (num42 == 0 && Main.hardMode && NPC.downedPlantBoss && num18 < 1)
				{
					num42 = 209;
				}
				if (num42 == 0 && NPC.downedPirates && num21 < 1)
				{
					num42 = 229;
				}
				if (num42 == 0 && NPC.downedBoss3 && num9 < 1)
				{
					num42 = 54;
				}
				if (num42 == 0 && NPC.savedStylist && num22 < 1)
				{
					num42 = 353;
				}
				if (num42 == 0 && num40 >= 4 && flag4 && num16 < 1)
				{
					num42 = 207;
				}
				if (num42 == 0 && num40 >= 8 && num19 < 1)
				{
					num42 = 227;
				}
				if (num42 == 0 && flag7 && num17 < 1)
				{
					num42 = 208;
				}
				if (num42 == 0 && NPC.downedFrost && num13 < 1 && Main.xMas)
				{
					num42 = 142;
				}
				if (num42 == 0 && NPC.savedBartender && num25 < 1)
				{
					num42 = 550;
				}
				if (num42 == 0 && NPC.savedGolfer && num26 < 1)
				{
					num42 = 588;
				}
				if (num42 == 0 && bestiaryProgressReport.CompletionPercent >= 0.1f && num27 < 1)
				{
					num42 = 633;
				}
				if (num42 == 0 && flag9 && num39 < 1)
				{
					num42 = 663;
				}
				WorldGen.prioritizedTownNPCType = num42;
			}
			NPCLoader.CanTownNPCSpawn(num40);
		}

		/// <summary>
		/// Multiplies the input damage by a random value between <c>0.85f</c> and <c>1.15f</c>.
		/// </summary>
		/// <param name="dmg">The damage to vary.</param>
		/// <param name="luck">
		/// How lucky the damager is, in the range [-1f, 1f].
		/// <br /> If <c><paramref name="luck" /> &gt; 0f</c>, there is a <c><paramref name="luck" /></c>% chance that damage variation is rerolled, with the higher value being used.
		/// <br /> If <c><paramref name="luck" /> &lt; 0f</c>, there is a <c>-<paramref name="luck" /></c>% chance that damage variation is rerolled, with the lower value being used.
		/// </param>
		/// <returns>The varied damage value, rounded to the nearest integer.</returns>
		// Token: 0x06000636 RID: 1590 RVA: 0x0013BCD0 File Offset: 0x00139ED0
		public static int DamageVar(float dmg, float luck = 0f)
		{
			return Main.DamageVar(dmg, Main.DefaultDamageVariationPercent, luck);
		}

		// Token: 0x06000637 RID: 1591 RVA: 0x0013BCE0 File Offset: 0x00139EE0
		public static int DamageVar(float dmg, int percent, float luck = 0f)
		{
			float num = dmg * (1f + (float)Main.rand.Next(-percent, percent + 1) * 0.01f);
			if (luck > 0f)
			{
				if (Main.rand.NextFloat() < luck)
				{
					float num2 = dmg * (1f + (float)Main.rand.Next(-percent, percent + 1) * 0.01f);
					if (num2 > num)
					{
						num = num2;
					}
				}
			}
			else if (luck < 0f && Main.rand.NextFloat() < 0f - luck)
			{
				float num3 = dmg * (1f + (float)Main.rand.Next(-percent, percent + 1) * 0.01f);
				if (num3 < num)
				{
					num = num3;
				}
			}
			return (int)Math.Round((double)num);
		}

		// Token: 0x06000638 RID: 1592 RVA: 0x0013BD90 File Offset: 0x00139F90
		public void OnTileChangeEvent(int x, int y, int count, TileChangeType eventType)
		{
			WorldGen.PlayLiquidChangeSound(eventType, x, y, count);
		}

		// Token: 0x06000639 RID: 1593 RVA: 0x0013BD9C File Offset: 0x00139F9C
		public static void ClearPendingPlayerSelectCallbacks()
		{
			Main._pendingCharacterSelect = null;
		}

		// Token: 0x0600063A RID: 1594 RVA: 0x0013BDA4 File Offset: 0x00139FA4
		public static void SelectPlayer(PlayerFileData data)
		{
			if (Main._pendingCharacterSelect != null)
			{
				Main._pendingCharacterSelect(data);
				Main._pendingCharacterSelect = null;
				return;
			}
			if (!Main.menuMultiplayer)
			{
				Main.ServerSideCharacter = false;
				Main.myPlayer = 0;
				data.SetAsActive();
				Main.player[Main.myPlayer].position = Vector2.Zero;
				Main.LoadWorlds();
				SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
				Main.menuMode = 6;
				return;
			}
			Main.ServerSideCharacter = false;
			data.SetAsActive();
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
			if (Main.autoJoin)
			{
				if (Netplay.SetRemoteIP(Main.getIP))
				{
					Main.menuMode = 10;
					Netplay.StartTcpClient();
				}
				Main.autoJoin = false;
				return;
			}
			if (Main.menuServer)
			{
				Main.LoadWorlds();
				Main.menuMode = 6;
				return;
			}
			Main.menuMode = 13;
			Main.clrInput();
		}

		// Token: 0x0600063B RID: 1595 RVA: 0x0013BE7F File Offset: 0x0013A07F
		public static void ToggleFullScreen()
		{
			Main.SetFullScreen(!Main.graphics.IsFullScreen);
		}

		// Token: 0x0600063C RID: 1596 RVA: 0x0013BE93 File Offset: 0x0013A093
		public static void SetFullScreen(bool fullscreen)
		{
			Main.SetDisplayMode(Main.PendingResolutionWidth, Main.BorderedHeight(Main.PendingResolutionHeight, fullscreen), fullscreen);
		}

		// Token: 0x0600063D RID: 1597 RVA: 0x0013BEAB File Offset: 0x0013A0AB
		public static void SetResolution(int width, int height)
		{
			Main.SetDisplayMode(width, height, Main.graphics.IsFullScreen);
		}

		// Token: 0x0600063E RID: 1598 RVA: 0x0013BEC0 File Offset: 0x0013A0C0
		public static void SetDisplayMode(int width, int height, bool fullscreen)
		{
			Main.screenMaximized = false;
			Main.screenMaximized = false;
			bool flag2 = false;
			int num3;
			int num4;
			if (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen || fullscreen)
			{
				if (PlayerInput.SteamDeckIsUsed && !fullscreen && !Main.graphics.IsFullScreen)
				{
					width = 1280;
					height = 800;
					Main.TryPickingDefaultUIScale(800f);
				}
				if (width > Main.maxScreenW)
				{
					float num5 = (float)height / (float)width;
					width = Main.maxScreenW;
					height = (int)(num5 * (float)width);
				}
				if (height > Main.maxScreenH)
				{
					float num6 = (float)width / (float)height;
					height = Main.maxScreenH;
					width = (int)(num6 * (float)height);
				}
				if (!Main.graphics.IsFullScreen)
				{
					num3 = Math.Max(Main.graphics.PreferredBackBufferWidth, Main.graphics.GraphicsDevice.Viewport.Width);
					num4 = Math.Max(Main.graphics.PreferredBackBufferHeight, Main.graphics.GraphicsDevice.Viewport.Height);
					if (num3 != Main.graphics.PreferredBackBufferWidth || num4 != Main.graphics.PreferredBackBufferHeight)
					{
						flag2 = true;
					}
				}
				else
				{
					num3 = Main.graphics.PreferredBackBufferWidth;
					num4 = Main.graphics.PreferredBackBufferHeight;
				}
			}
			else
			{
				PlayerInput.RawMouseScale = Vector2.One;
				width = Math.Min(width, Main.maxScreenW);
				height = Math.Min(height, Main.maxScreenH);
				num3 = Main.graphics.GraphicsDevice.Viewport.Width;
				num4 = Main.graphics.GraphicsDevice.Viewport.Height;
				flag2 = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width || Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
			}
			width = Math.Max(width, Main.minScreenW);
			height = Math.Max(height, Main.minScreenH);
			if (Main.graphics.IsFullScreen != fullscreen)
			{
				Main.graphics.PreferredBackBufferWidth = width;
				Main.graphics.PreferredBackBufferHeight = height;
				Main.graphics.ApplyChanges();
				Main.graphics.ToggleFullScreen();
			}
			if (width != num3 || height != num4 || flag2)
			{
				Main.mapTime = 0;
				if (Main.gamePaused)
				{
					Main.renderNow = true;
				}
				Main.screenWidth = width;
				Main.screenHeight = height;
				Main.graphics.PreferredBackBufferWidth = Main.screenWidth;
				Main.graphics.PreferredBackBufferHeight = Main.screenHeight;
				if (width != num3 || height != num4)
				{
					Main.graphics.ApplyChanges();
				}
				PlayerInput.CacheOriginalScreenDimensions();
				Main.FixUIScale();
				if (Main.OnResolutionChanged != null)
				{
					Main.OnResolutionChanged(new Vector2((float)Main.screenWidth, (float)Main.screenHeight));
				}
				Main.PendingResolutionWidth = Main.screenWidth;
				Main.PendingResolutionHeight = Main.screenHeight;
				PlayerInput.CacheOriginalScreenDimensions();
				Lighting.Initialize();
				if (!Main.drawToScreen && !Main._isResizingAndRemakingTargets)
				{
					Main._isResizingAndRemakingTargets = true;
					Main.instance.InitTargets();
					Main._isResizingAndRemakingTargets = false;
				}
				UserInterface.ActiveInstance.Recalculate();
				Main.instance._needsMenuUIRecalculation = true;
				Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
				Main.chatMonitor.OnResolutionChange();
			}
			if (!Main.graphics.SynchronizeWithVerticalRetrace)
			{
				Main.graphics.SynchronizeWithVerticalRetrace = true;
				Main.graphics.ApplyChanges();
			}
		}

		// Token: 0x0600063F RID: 1599 RVA: 0x0013C217 File Offset: 0x0013A417
		public static void FixUIScale()
		{
			Main.UIScale = Main.UIScaleWanted;
		}

		// Token: 0x06000640 RID: 1600 RVA: 0x0013C224 File Offset: 0x0013A424
		public void FullscreenStartup()
		{
			Main.startFullscreen = false;
			int currentValue = Main.graphics.PreferredBackBufferWidth;
			int currentValue2 = Main.graphics.PreferredBackBufferHeight;
			Main.Configuration.Get<int>("DisplayWidth", ref currentValue);
			Main.Configuration.Get<int>("DisplayHeight", ref currentValue2);
			Main.SetDisplayMode(currentValue, currentValue2, true);
		}

		// Token: 0x06000641 RID: 1601 RVA: 0x0013C278 File Offset: 0x0013A478
		public void UpdateDisplaySettings()
		{
			if (Main.startFullscreen)
			{
				this.FullscreenStartup();
			}
			Main.SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
		}

		// Token: 0x06000642 RID: 1602 RVA: 0x0013C2C0 File Offset: 0x0013A4C0
		public static void OpenPlayerSelect(Main.OnPlayerSelected method)
		{
			if ((Main.gameMenu && (Main.menuMode == 10 || Main.menuMode == 14)) || WorldGen.gen)
			{
				return;
			}
			if (!Main.gameMenu)
			{
				WorldGen.SaveAndQuit(delegate
				{
					Main.menuMode = 888;
					Main._blockFancyUIWhileLoading = true;
					Main.LoadPlayers();
					Main.MenuUI.SetState(Main._characterSelectMenu);
					Main._blockFancyUIWhileLoading = false;
					Main._pendingCharacterSelect = method;
				});
				return;
			}
			Main.menuMode = 888;
			Main._blockFancyUIWhileLoading = true;
			Main.LoadPlayers();
			Main.MenuUI.SetState(Main._characterSelectMenu);
			Main._blockFancyUIWhileLoading = false;
			Main._pendingCharacterSelect = method;
		}

		// Token: 0x06000643 RID: 1603 RVA: 0x0013C34B File Offset: 0x0013A54B
		public static void SwitchNetMode(int mode)
		{
			if (mode >= 0 && mode <= 2)
			{
				Main._targetNetMode = mode;
				Main._hasPendingNetmodeChange = true;
			}
		}

		// Token: 0x06000644 RID: 1604 RVA: 0x0013C361 File Offset: 0x0013A561
		public static void WeGameRequireExitGame()
		{
			Main.GameAskedToQuit = true;
		}

		/// <summary>
		/// A color that cycles through the colors like Rainbow Brick does.
		/// </summary>
		// Token: 0x170000D9 RID: 217
		// (get) Token: 0x06000645 RID: 1605 RVA: 0x0013C369 File Offset: 0x0013A569
		public static Color DiscoColor
		{
			get
			{
				return new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
			}
		}

		/// <summary>
		/// The typical pulsing white color used for much of the text shown in-game.
		/// </summary>
		// Token: 0x170000DA RID: 218
		// (get) Token: 0x06000646 RID: 1606 RVA: 0x0013C37F File Offset: 0x0013A57F
		public static Color MouseTextColorReal
		{
			get
			{
				return new Color((float)Main.mouseTextColor / 255f, (float)Main.mouseTextColor / 255f, (float)Main.mouseTextColor / 255f, (float)Main.mouseTextColor / 255f);
			}
		}

		// Token: 0x170000DB RID: 219
		// (get) Token: 0x06000647 RID: 1607 RVA: 0x0013C3B6 File Offset: 0x0013A5B6
		public static bool PlayerLoaded
		{
			get
			{
				return Main.CurrentFrameFlags.ActivePlayersCount > 0;
			}
		}

		// Token: 0x06000648 RID: 1608 RVA: 0x0013C3C0 File Offset: 0x0013A5C0
		private static int BorderedHeight(int height, bool state)
		{
			return (int)((double)height * (state ? 1.0 : 0.95625));
		}

		/// <summary>
		/// A replacement for `Main.LocalPlayer` which respects whichever player is currently running hooks on the main thread.
		/// This works in the player select screen, and in multiplayer (when other players are updating)
		/// </summary>
		// Token: 0x170000DC RID: 220
		// (get) Token: 0x06000649 RID: 1609 RVA: 0x0013C3DD File Offset: 0x0013A5DD
		public static Player CurrentPlayer
		{
			get
			{
				return Main._currentPlayerOverride ?? Main.LocalPlayer;
			}
		}

		/// <summary>
		/// Use to iterate over active players. Game logic is usually only interested in <see cref="F:Terraria.Entity.active" /> elements, this iterator facilitates that usage and allows for simpler and more readable code.
		/// <para /> Typically used in a foreach statement:
		/// <code>foreach (var player in Main.ActivePlayers) {
		///     // Code
		/// }
		/// </code>
		/// This is equivalent to the less convenient approach:
		/// <code>
		/// for (int i = 0; i &lt; Main.maxPlayers; i++) {
		///     var player = Main.player[i];
		///     if (!player.active)
		///         continue;
		///     // Code
		/// }
		/// </code>
		/// Note that if the index of the Player in the <see cref="F:Terraria.Main.player" /> array is needed, <see cref="F:Terraria.Entity.whoAmI" /> can be used.
		/// </summary>
		// Token: 0x170000DD RID: 221
		// (get) Token: 0x0600064A RID: 1610 RVA: 0x0013C3ED File Offset: 0x0013A5ED
		public static ActiveEntityIterator<Player> ActivePlayers
		{
			get
			{
				return new ActiveEntityIterator<Player>(Main.player.AsSpan(0, 255));
			}
		}

		/// <summary>
		/// Use to iterate over active players. Game logic is usually only interested in <see cref="F:Terraria.Entity.active" /> elements, this iterator facilitates that usage and allows for simpler and more readable code.
		/// <para /> Typically used in a foreach statement:
		/// <code>foreach (var npc in Main.ActiveNPCs) {
		///     // Code
		/// }
		/// </code>
		/// This is equivalent to the less convenient approach:
		/// <code>
		/// for (int i = 0; i &lt; Main.maxNPCs; i++) {
		///     var npc = Main.npc[i];
		///     if (!npc.active)
		///         continue;
		///     // Code
		/// }
		/// </code>
		/// Note that if the index of the NPC in the <see cref="F:Terraria.Main.npc" /> array is needed, <see cref="F:Terraria.Entity.whoAmI" /> can be used.
		/// </summary>
		// Token: 0x170000DE RID: 222
		// (get) Token: 0x0600064B RID: 1611 RVA: 0x0013C409 File Offset: 0x0013A609
		public static ActiveEntityIterator<NPC> ActiveNPCs
		{
			get
			{
				return new ActiveEntityIterator<NPC>(Main.npc.AsSpan(0, Main.maxNPCs));
			}
		}

		/// <summary>
		/// Use to iterate over active projectiles. Game logic is usually only interested in <see cref="F:Terraria.Entity.active" /> elements, this iterator facilitates that usage and allows for simpler and more readable code.
		/// <para /> Typically used in a foreach statement:
		/// <code>foreach (var projectile in Main.ActiveProjectiles) {
		///     // Code
		/// }
		/// </code>
		/// This is equivalent to the less convenient approach:
		/// <code>
		/// for (int i = 0; i &lt; Main.maxProjectiles; i++) {
		///     var projectile = Main.projectile[i];
		///     if (!projectile.active)
		///         continue;
		///     // Code
		/// }
		/// </code>
		/// Note that if the index of the Projectile in the <see cref="F:Terraria.Main.projectile" /> array is needed, <see cref="F:Terraria.Entity.whoAmI" /> can be used.
		/// </summary>
		// Token: 0x170000DF RID: 223
		// (get) Token: 0x0600064C RID: 1612 RVA: 0x0013C425 File Offset: 0x0013A625
		public static ActiveEntityIterator<Projectile> ActiveProjectiles
		{
			get
			{
				return new ActiveEntityIterator<Projectile>(Main.projectile.AsSpan(0, Main.maxProjectiles));
			}
		}

		/// <summary>
		/// Use to iterate over active items. Game logic is usually only interested in <see cref="F:Terraria.Entity.active" /> elements, this iterator facilitates that usage and allows for simpler and more readable code.
		/// <para /> Typically used in a foreach statement:
		/// <code>foreach (var item in Main.ActiveItems) {
		///     // Code
		/// }
		/// </code>
		/// This is equivalent to the less convenient approach:
		/// <code>
		/// for (int i = 0; i &lt; Main.maxItems; i++) {
		///     var item = Main.item[i];
		///     if (!item.active)
		///         continue;
		///     // Code
		/// }
		/// </code>
		/// Note that if the index of the Item in the <see cref="F:Terraria.Main.item" /> array is needed, <see cref="F:Terraria.Entity.whoAmI" /> can <b>not</b> be used. This will be fixed in 1.4.5, but for now the for loop approach would have to be used instead.
		/// </summary>
		// Token: 0x170000E0 RID: 224
		// (get) Token: 0x0600064D RID: 1613 RVA: 0x0013C441 File Offset: 0x0013A641
		public static ActiveEntityIterator<Item> ActiveItems
		{
			get
			{
				return new ActiveEntityIterator<Item>(Main.item.AsSpan(0, Main.maxItems));
			}
		}

		/// <summary>
		/// Checks if a tile at the given coordinates counts towards tile coloring from the Spelunker buff, and is detected by various pets.
		/// </summary>
		// Token: 0x0600064E RID: 1614 RVA: 0x0013C460 File Offset: 0x0013A660
		public unsafe static bool IsTileSpelunkable(int tileX, int tileY)
		{
			Tile tile = Main.tile[tileX, tileY];
			return Main.IsTileSpelunkable(tileX, tileY, *tile.type, *tile.frameX, *tile.frameY);
		}

		/// <summary>
		/// Checks if a tile at the given coordinates counts towards tile coloring from the Biome Sight buff.
		/// </summary>
		// Token: 0x0600064F RID: 1615 RVA: 0x0013C49C File Offset: 0x0013A69C
		public unsafe static bool IsTileBiomeSightable(int tileX, int tileY, ref Color sightColor)
		{
			Tile tile = Main.tile[tileX, tileY];
			return Main.IsTileBiomeSightable(tileX, tileY, *tile.type, *tile.frameX, *tile.frameY, ref sightColor);
		}

		// Token: 0x06000650 RID: 1616 RVA: 0x0013C4D8 File Offset: 0x0013A6D8
		public static void InfoDisplayPageHandler(int startX, ref string mouseText, out int startingDisplay, out int endingDisplay)
		{
			startingDisplay = 0;
			endingDisplay = InfoDisplayLoader.InfoDisplayCount;
			if (!Main.playerInventory)
			{
				return;
			}
			int activeDisplays = InfoDisplayLoader.ActiveDisplays();
			InfoDisplayLoader.InfoDisplayPage = Utils.Clamp<int>(InfoDisplayLoader.InfoDisplayPage, 0, (activeDisplays - 1) / 12);
			if (activeDisplays > 12)
			{
				startingDisplay = 12 * InfoDisplayLoader.InfoDisplayPage;
				endingDisplay = Utils.Clamp<int>(startingDisplay + 12, startingDisplay, activeDisplays);
				Texture2D buttonTexture = UICommon.InfoDisplayPageArrowTexture.Value;
				bool hovering = false;
				int X;
				int Y;
				Main.GetInfoAccIconPosition(11, startX, out X, out Y);
				Vector2 buttonPosition;
				buttonPosition..ctor((float)X, (float)(Y + 20));
				if ((float)Main.mouseX >= buttonPosition.X && (float)Main.mouseY >= buttonPosition.Y && (float)Main.mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)Main.mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
				{
					hovering = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.mouseLeftRelease = false;
						if (InfoDisplayLoader.ActivePages() != InfoDisplayLoader.InfoDisplayPage + 1)
						{
							InfoDisplayLoader.InfoDisplayPage++;
						}
						else
						{
							InfoDisplayLoader.InfoDisplayPage = 0;
						}
					}
					if (!Main.mouseText)
					{
						mouseText = ((InfoDisplayLoader.ActivePages() != InfoDisplayLoader.InfoDisplayPage + 1) ? Language.GetTextValue("tModLoader.NextInfoAccPage") : Language.GetTextValue("tModLoader.FirstInfoAccPage"));
						Main.mouseText = true;
					}
				}
				Main.spriteBatch.Draw(buttonTexture, buttonPosition, new Rectangle?(new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height)), Color.White, 0f, default(Vector2), 1f, 0, 0f);
				if (hovering)
				{
					Main.spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition - Vector2.One * 2f, null, Main.OurFavoriteColor, 0f, default(Vector2), 1f, 0, 0f);
				}
				hovering = false;
				int num;
				Main.GetInfoAccIconPosition(0, startX, out X, out num);
				buttonPosition..ctor((float)X, (float)(Y + 20));
				if ((float)Main.mouseX >= buttonPosition.X && (float)Main.mouseY >= buttonPosition.Y && (float)Main.mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)Main.mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
				{
					hovering = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.mouseLeftRelease = false;
						if (InfoDisplayLoader.InfoDisplayPage != 0)
						{
							InfoDisplayLoader.InfoDisplayPage--;
						}
						else
						{
							InfoDisplayLoader.InfoDisplayPage = InfoDisplayLoader.ActivePages() - 1;
						}
					}
					if (!Main.mouseText)
					{
						mouseText = ((InfoDisplayLoader.InfoDisplayPage != 0) ? Language.GetTextValue("tModLoader.PreviousInfoAccPage") : Language.GetTextValue("tModLoader.LastInfoAccPage"));
						Main.mouseText = true;
					}
				}
				Main.spriteBatch.Draw(buttonTexture, buttonPosition, new Rectangle?(new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height)), Color.White, 0f, default(Vector2), 1f, 1, 0f);
				if (hovering)
				{
					Main.spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition - Vector2.One * 2f, null, Main.OurFavoriteColor, 0f, default(Vector2), 1f, 0, 0f);
				}
			}
		}

		// Token: 0x06000651 RID: 1617 RVA: 0x0013C890 File Offset: 0x0013AA90
		public static void BuilderTogglePageHandler(int startY, int activeToggles, out bool moveDownForButton, out int startIndex, out int endIndex)
		{
			startIndex = 0;
			endIndex = activeToggles;
			moveDownForButton = false;
			string text = "";
			if (activeToggles > 12)
			{
				startIndex = 12 * BuilderToggleLoader.BuilderTogglePage;
				if (activeToggles - startIndex < 12)
				{
					endIndex = activeToggles;
				}
				else if (startIndex == 0)
				{
					endIndex = startIndex + 12;
				}
				else
				{
					endIndex = startIndex + 11;
				}
				Texture2D buttonTexture = UICommon.InfoDisplayPageArrowTexture.Value;
				bool hover = false;
				Vector2 buttonPosition;
				buttonPosition..ctor(3f, (float)startY - 6f);
				if (BuilderToggleLoader.BuilderTogglePage != 0)
				{
					moveDownForButton = true;
					Main.spriteBatch.Draw(buttonTexture, buttonPosition + new Vector2(0f, 13f), new Rectangle?(new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height)), Color.White, -1.5707964f, default(Vector2), 1f, 0, 0f);
					if ((float)Main.mouseX >= buttonPosition.X && (float)Main.mouseY >= buttonPosition.Y && (float)Main.mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)Main.mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
					{
						hover = true;
						Main.player[Main.myPlayer].mouseInterface = true;
						text = Language.GetTextValue("tModLoader.PreviousInfoAccPage");
						Main.mouseText = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							SoundEngine.PlaySound(SoundID.MenuTick, null, null);
							Main.mouseLeftRelease = false;
							if (BuilderToggleLoader.BuilderTogglePage > 0)
							{
								BuilderToggleLoader.BuilderTogglePage--;
							}
						}
						Main.spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition + new Vector2(0f, 17f) - Vector2.One * 2f, null, Main.OurFavoriteColor, -1.5707964f, default(Vector2), 1f, 0, 0f);
					}
				}
				buttonPosition..ctor(3f, (float)startY + (float)(endIndex - startIndex + (BuilderToggleLoader.BuilderTogglePage != 0).ToInt()) * 24f - 6f);
				if (BuilderToggleLoader.BuilderTogglePage != activeToggles / 12)
				{
					Main.spriteBatch.Draw(buttonTexture, buttonPosition + new Vector2(0f, 12f), new Rectangle?(new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height)), Color.White, 1.5707964f, new Vector2((float)buttonTexture.Width, (float)buttonTexture.Height), 1f, 0, 0f);
					if ((float)Main.mouseX >= buttonPosition.X && (float)Main.mouseY >= buttonPosition.Y && (float)Main.mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)Main.mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
					{
						hover = true;
						Main.player[Main.myPlayer].mouseInterface = true;
						text = Language.GetTextValue("tModLoader.NextInfoAccPage");
						Main.mouseText = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							SoundEngine.PlaySound(SoundID.MenuTick, null, null);
							Main.mouseLeftRelease = false;
							if (BuilderToggleLoader.BuilderTogglePage < activeToggles / 12)
							{
								BuilderToggleLoader.BuilderTogglePage++;
							}
						}
						Main.spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition + new Vector2(4f, 12f) - Vector2.One * 2f, null, Main.OurFavoriteColor, 1.5707964f, new Vector2((float)buttonTexture.Width, (float)buttonTexture.Height), 1f, 0, 0f);
					}
				}
				if (Main.mouseText && hover)
				{
					float colorByte = (float)Main.mouseTextColor / 255f;
					Color textColor;
					textColor..ctor(colorByte, colorByte, colorByte);
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(Main.mouseX + 14), (float)(Main.mouseY + 14)), textColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
					Main.mouseText = false;
				}
			}
		}

		// Token: 0x06000652 RID: 1618 RVA: 0x0013CCD8 File Offset: 0x0013AED8
		private void DrawBuilderAccToggles_Inner(Vector2 start)
		{
			Player player = Main.player[Main.myPlayer];
			int[] builderAccStatus = player.builderAccStatus;
			List<BuilderToggle> activeToggles = BuilderToggleLoader.ActiveBuilderTogglesList();
			bool shiftHotbarLock = activeToggles.Count / 12 != BuilderToggleLoader.BuilderTogglePage || activeToggles.Count % 12 >= 10;
			Vector2 startPosition = start - new Vector2(0f, (float)(shiftHotbarLock ? 42 : 21));
			bool moveDownForButton;
			int startIndex;
			int endIndex;
			Main.BuilderTogglePageHandler((int)startPosition.Y, activeToggles.Count, out moveDownForButton, out startIndex, out endIndex);
			for (int i = startIndex; i < endIndex; i++)
			{
				BuilderToggle builderToggle = activeToggles[i];
				Texture2D texture = ModContent.Request<Texture2D>(builderToggle.Texture, 2).Value;
				Rectangle rectangle;
				rectangle..ctor(0, 0, texture.Width, texture.Height);
				Color color = builderToggle.DisplayColorTexture_Obsolete();
				Vector2 position = startPosition + new Vector2(0f, (float)(moveDownForButton ? 24 : 0)) + new Vector2(0f, (float)(i % 12 * 24));
				string text = builderToggle.DisplayValue();
				int numberOfStates = builderToggle.NumberOfStates;
				int toggleType = builderToggle.Type;
				bool hover = Utils.CenteredRectangle(position, new Vector2(14f)).Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
				bool flag = hover && Main.mouseLeft && Main.mouseLeftRelease;
				bool rightClick = hover && Main.mouseRight && Main.mouseRightRelease;
				Vector2 hoverDrawPosition = position;
				float scale = 1f;
				SpriteEffects spriteEffects = 0;
				BuilderToggleDrawParams builderToggleDrawParams = new BuilderToggleDrawParams
				{
					Texture = texture,
					Position = position,
					Frame = rectangle,
					Color = color,
					Scale = scale,
					SpriteEffects = spriteEffects
				};
				BuilderToggleDrawParams drawParams = builderToggleDrawParams;
				if (builderToggle.Draw(Main.spriteBatch, ref drawParams))
				{
					Main.spriteBatch.Draw(drawParams.Texture, drawParams.Position, new Rectangle?(drawParams.Frame), drawParams.Color, 0f, drawParams.Frame.Size() / 2f, drawParams.Scale, drawParams.SpriteEffects, 0f);
				}
				if (hover)
				{
					player.mouseInterface = true;
					Main.mouseText = true;
					Texture2D iconHover = ModContent.Request<Texture2D>(builderToggle.HoverTexture, 2).Value;
					Rectangle hoverRectangle;
					hoverRectangle..ctor(0, 0, iconHover.Width, iconHover.Height);
					Color hoverColor = Main.OurFavoriteColor;
					float hoverScale = 1f;
					SpriteEffects hoverSpriteEffects = 0;
					builderToggleDrawParams = new BuilderToggleDrawParams
					{
						Texture = iconHover,
						Position = hoverDrawPosition,
						Frame = hoverRectangle,
						Color = hoverColor,
						Scale = hoverScale,
						SpriteEffects = hoverSpriteEffects
					};
					drawParams = builderToggleDrawParams;
					if (builderToggle.DrawHover(Main.spriteBatch, ref drawParams))
					{
						Main.spriteBatch.Draw(drawParams.Texture, drawParams.Position, new Rectangle?(drawParams.Frame), drawParams.Color, 0f, drawParams.Frame.Size() / 2f, drawParams.Scale, drawParams.SpriteEffects, 0f);
					}
				}
				if (flag)
				{
					SoundStyle? sound = new SoundStyle?(SoundID.MenuTick);
					if (builderToggle.OnLeftClick(ref sound))
					{
						builderAccStatus[toggleType] = (builderAccStatus[toggleType] + 1) % numberOfStates;
						SoundEngine.PlaySound(sound, null);
					}
					Main.mouseLeftRelease = false;
				}
				if (rightClick)
				{
					builderToggle.OnRightClick();
					Main.mouseRightRelease = false;
				}
				UILinkPointNavigator.SetPosition(6000 + i % 12, position + rectangle.Size() * 0.15f);
				if (Main.mouseText && hover && Main.HoverItem.type <= 0)
				{
					float colorByte = (float)Main.mouseTextColor / 255f;
					Color textColor;
					textColor..ctor(colorByte, colorByte, colorByte);
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(Main.mouseX + 14), (float)(Main.mouseY + 14)), textColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
					Main.mouseText = false;
				}
			}
			UILinkPointNavigator.Shortcuts.BUILDERACCCOUNT = endIndex - startIndex;
		}

		/// <summary>
		/// Syncs rain state if <see cref="M:Terraria.Main.StartRain" /> or <see cref="M:Terraria.Main.StopRain" /> were called in the same tick and caused a change to <seealso cref="F:Terraria.Main.maxRaining" />.
		/// <br>Can be called on any side, but only the server will actually sync it.</br>
		/// </summary>
		// Token: 0x06000653 RID: 1619 RVA: 0x0013D114 File Offset: 0x0013B314
		public static void SyncRain()
		{
			if (Main.maxRaining != Main.oldMaxRaining)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
				}
				Main.oldMaxRaining = Main.maxRaining;
			}
		}

		// Token: 0x06000654 RID: 1620 RVA: 0x0013D15C File Offset: 0x0013B35C
		internal void InitTMLContentManager()
		{
			if (Main.dedServ)
			{
				return;
			}
			string vanillaContentFolder;
			if (SocialAPI.Mode == SocialMode.Steam)
			{
				vanillaContentFolder = Path.Combine(Steam.GetSteamTerrariaInstallDir(), "Content");
			}
			else if (InstallVerifier.DistributionPlatform == DistributionPlatform.GoG)
			{
				vanillaContentFolder = Path.Combine(Path.GetDirectoryName(InstallVerifier.vanillaExePath), "Content");
				Logging.tML.Info("Content folder of Terraria GOG Install Location assumed to be: " + Path.GetFullPath(vanillaContentFolder));
			}
			else
			{
				vanillaContentFolder = (Platform.IsOSX ? "../Terraria/Terraria.app/Contents/Resources/Content" : "../Terraria/Content");
				if (!Directory.Exists(vanillaContentFolder))
				{
					vanillaContentFolder = (Platform.IsOSX ? "../Terraria.app/Contents/Resources/Content" : "../Content");
				}
			}
			if (!Directory.Exists(vanillaContentFolder))
			{
				ErrorReporting.FatalExit(Language.GetTextValue("tModLoader.ContentFolderNotFound"));
			}
			if (!File.Exists(Path.Combine(vanillaContentFolder, "Images", "Projectile_651.xnb")))
			{
				Utils.OpenToURL("https://github.com/tModLoader/tModLoader/wiki/Basic-tModLoader-Usage-FAQ#terraria-is-out-of-date-or-terraria-is-on-a-legacy-version");
				ErrorReporting.FatalExit(Language.GetTextValue("tModLoader.TerrariaLegacyBranchMessage"));
			}
			if (!File.Exists(Path.Combine(vanillaContentFolder, "Images", "Projectile_981.xnb")))
			{
				Utils.OpenToURL("https://github.com/tModLoader/tModLoader/wiki/Basic-tModLoader-Usage-FAQ#terraria-is-out-of-date-or-terraria-is-on-a-legacy-version");
				ErrorReporting.FatalExit(Language.GetTextValue("tModLoader.TerrariaOutOfDateMessage"));
			}
			TMLContentManager localOverrideContentManager = null;
			if (Directory.Exists(Path.Combine("Content", "Images")))
			{
				localOverrideContentManager = new TMLContentManager(base.Content.ServiceProvider, "Content", null);
			}
			base.Content = new TMLContentManager(base.Content.ServiceProvider, vanillaContentFolder, localOverrideContentManager);
		}

		// Token: 0x06000655 RID: 1621 RVA: 0x0013D2B4 File Offset: 0x0013B4B4
		private static void DrawtModLoaderSocialMediaButtons(Color menuColor, float upBump)
		{
			List<TitleLinkButton> titleLinks = Main.tModLoaderTitleLinks;
			Vector2 anchorPosition;
			anchorPosition..ctor(18f, (float)(Main.screenHeight - 26 - 22) - upBump);
			for (int i = 0; i < titleLinks.Count; i++)
			{
				titleLinks[i].Draw(Main.spriteBatch, anchorPosition);
				anchorPosition.X += 30f;
			}
		}

		/// <summary>
		/// Wait for an action to be performed on the main thread.
		/// </summary>
		/// <param name="action"></param>
		// Token: 0x06000656 RID: 1622 RVA: 0x0013D314 File Offset: 0x0013B514
		public static Task RunOnMainThread(Action action)
		{
			TaskCompletionSource tcs = new TaskCompletionSource();
			Main.QueueMainThreadAction(delegate
			{
				action();
				tcs.SetResult();
			});
			return tcs.Task;
		}

		/// <summary>
		/// Wait for an action to be performed on the main thread.
		/// </summary>
		/// <param name="func"></param>
		// Token: 0x06000657 RID: 1623 RVA: 0x0013D348 File Offset: 0x0013B548
		public static Task<T> RunOnMainThread<T>(Func<T> func)
		{
			TaskCompletionSource<T> tcs = new TaskCompletionSource<T>();
			Main.QueueMainThreadAction(delegate
			{
				tcs.SetResult(func());
			});
			return tcs.Task;
		}

		// Token: 0x06000658 RID: 1624 RVA: 0x0013D37C File Offset: 0x0013B57C
		public static void AddSignalTraps()
		{
			PosixSignal signal = PosixSignal.SIGINT;
			Action<PosixSignalContext> handler;
			if ((handler = Main.<>O.<22>__Handle) == null)
			{
				handler = (Main.<>O.<22>__Handle = new Action<PosixSignalContext>(Main.<AddSignalTraps>g__Handle|1977_0));
			}
			Main.SIGINTHandler = PosixSignalRegistration.Create(signal, handler);
			PosixSignal signal2 = PosixSignal.SIGTERM;
			Action<PosixSignalContext> handler2;
			if ((handler2 = Main.<>O.<22>__Handle) == null)
			{
				handler2 = (Main.<>O.<22>__Handle = new Action<PosixSignalContext>(Main.<AddSignalTraps>g__Handle|1977_0));
			}
			Main.SIGTERMHandler = PosixSignalRegistration.Create(signal2, handler2);
		}

		// Token: 0x06000659 RID: 1625 RVA: 0x0013D3D8 File Offset: 0x0013B5D8
		private static void HandleNews(Color menuColor)
		{
			if (Main.menuMode == 0)
			{
				if (!Main.newsChecked)
				{
					Main.newsText = Language.GetTextValue("tModLoader.LatestNewsChecking");
					Main.newsChecked = true;
					Main.client.GetStringAsync("https://api.steampowered.com/ISteamNews/GetNewsForApp/v2/?appid=1281930&count=1&feeds=steam_community_announcements").ContinueWith(delegate(Task<string> response)
					{
						if (!response.IsCompletedSuccessfully || response.Exception != null)
						{
							Main.newsText = Language.GetTextValue("tModLoader.LatestNewsOffline");
							return;
						}
						JObject jobject = JObject.Parse(response.Result);
						Main.newsText = (string)jobject["appnews"]["newsitems"][0]["title"];
						Main.newsURL = (string)jobject["appnews"]["newsitems"][0]["url"];
						int newsTimestamp = (int)jobject["appnews"]["newsitems"][0]["date"];
						if (newsTimestamp != ModLoader.LatestNewsTimestamp)
						{
							Main.newsIsNew = true;
							ModLoader.LatestNewsTimestamp = newsTimestamp;
							Main.SaveSettings();
						}
					});
					return;
				}
				string latestNewsText = Language.GetTextValue("tModLoader.LatestNews", Main.newsText);
				float newsScale = 1.2f;
				if (Main.newsIsNew)
				{
					menuColor = Main.DiscoColor;
				}
				Vector2 newsScales;
				newsScales..ctor(newsScale);
				Vector2 newsPosition;
				newsPosition..ctor((float)Main.screenWidth - 10f, (float)Main.screenHeight - 38f);
				Vector2 newsSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, latestNewsText, newsScales, -1f);
				Rectangle newsRect;
				newsRect..ctor((int)(newsPosition.X - newsSize.X), (int)(newsPosition.Y - newsSize.Y), (int)newsSize.X, (int)newsSize.Y);
				bool flag = newsRect.Contains(Main.mouseX, Main.mouseY);
				Color newsColor = (flag && Main.newsURL != null) ? Main.highVersionColor : menuColor;
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, FontAssets.MouseText.Value, latestNewsText, newsPosition - newsSize, newsColor, 0f, Vector2.Zero, newsScales, -1f, 2f);
				if (flag && Main.mouseLeftRelease && Main.mouseLeft && Main.hasFocus && Main.newsURL != null)
				{
					SoundEngine.PlaySound(SoundID.MenuOpen, null, null);
					Utils.OpenToURL(Main.newsURL);
					Main.newsIsNew = false;
				}
			}
		}

		// Token: 0x0600065A RID: 1626 RVA: 0x0013D578 File Offset: 0x0013B778
		private static void PrepareLoadedModsAndConfigsForSingleplayer()
		{
			bool needsReload = false;
			List<ReloadRequiredExplanation> reloadRequiredExplanationEntries = new List<ReloadRequiredExplanation>();
			IEnumerable<LocalMod> normalModsToLoad = ModOrganizer.RecheckVersionsToLoad();
			Mod[] mods = ModLoader.Mods;
			for (int i = 0; i < mods.Length; i++)
			{
				Mod loadedMod = mods[i];
				if (!(loadedMod is ModLoaderMod) && loadedMod.File != null)
				{
					LocalMod normalMod = normalModsToLoad.First((LocalMod mod) => mod.Name == loadedMod.Name);
					if (normalMod.modFile.path != loadedMod.File.path)
					{
						reloadRequiredExplanationEntries.Add(new ReloadRequiredExplanation(1, normalMod.Name, normalMod, Language.GetTextValue("tModLoader.ReloadRequiredExplanationSwitchVersion", "FFFACD", normalMod.Version, loadedMod.Version)));
						needsReload = true;
					}
				}
			}
			List<Mod> modsWithChangedConfigs;
			if (ConfigManager.AnyModNeedsReloadCheckOnly(out modsWithChangedConfigs))
			{
				needsReload = true;
				using (List<Mod>.Enumerator enumerator = modsWithChangedConfigs.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Mod mod = enumerator.Current;
						LocalMod localMod2 = normalModsToLoad.First((LocalMod localMod) => localMod.Name == mod.Name);
						reloadRequiredExplanationEntries.Add(new ReloadRequiredExplanation(5, mod.Name, localMod2, Language.GetTextValue("tModLoader.ReloadRequiredExplanationConfigChangedRestore", "DDA0DD")));
					}
				}
			}
			if (needsReload)
			{
				string continueButtonText = Language.GetTextValue("tModLoader.ReloadRequiredReloadAndContinue");
				Interface.serverModsDifferMessage.Show(Language.GetTextValue("tModLoader.ReloadRequiredSinglePlayerMessage", continueButtonText), 0, null, continueButtonText, delegate
				{
					ModLoader.OnSuccessfulLoad = (Action)Delegate.Combine(ModLoader.OnSuccessfulLoad, new Action(delegate()
					{
						Main.menuMode = 1;
					}));
					ModLoader.Reload();
				}, Language.GetTextValue("tModLoader.ModConfigBack"), delegate
				{
				}, reloadRequiredExplanationEntries);
				return;
			}
			ConfigManager.LoadAll();
			ConfigManager.OnChangedAll();
		}

		// Token: 0x0600065C RID: 1628 RVA: 0x0013F96C File Offset: 0x0013DB6C
		[CompilerGenerated]
		internal static void <Ambience>g__HandleAmbientSound|1387_0(in SoundStyle soundStyle, ref SlotId slot, float volume, Vector2 position)
		{
			ActiveSound activeSound;
			SoundEngine.TryGetActiveSound(slot, out activeSound);
			if (volume > 0f)
			{
				if (activeSound == null)
				{
					slot = SoundEngine.PlaySound(soundStyle, new Vector2?(position), null);
					if (!SoundEngine.TryGetActiveSound(slot, out activeSound))
					{
						return;
					}
				}
				activeSound.Volume = volume;
				activeSound.Position = new Vector2?(position);
				return;
			}
			if (activeSound != null)
			{
				activeSound.Stop();
				slot = SlotId.Invalid;
			}
		}

		// Token: 0x0600066D RID: 1645 RVA: 0x0013FA70 File Offset: 0x0013DC70
		[CompilerGenerated]
		internal static void <DrawSurfaceBG>g__DrawCloud|1826_0(int cloudIndex, Color color, float yOffset)
		{
			Cloud cloud = Main.cloud[cloudIndex];
			Asset<Texture2D> texture = TextureAssets.Cloud[cloud.type];
			Vector2 position;
			position..ctor(cloud.position.X + (float)texture.Width() * 0.5f, yOffset + (float)texture.Height() * 0.5f);
			Rectangle sourceRectangle;
			sourceRectangle..ctor(0, 0, texture.Width(), texture.Height());
			float rotation = cloud.rotation;
			Vector2 origin;
			origin..ctor((float)texture.Width() * 0.5f, (float)texture.Height() * 0.5f);
			float scale = cloud.scale;
			SpriteEffects effects = cloud.spriteDir;
			DrawData drawData = new DrawData(texture.Value, position, new Rectangle?(sourceRectangle), color, rotation, origin, scale, effects, 0f);
			ModCloud modCloud = cloud.ModCloud;
			if (modCloud != null && !modCloud.Draw(Main.spriteBatch, cloud, cloudIndex, ref drawData))
			{
				return;
			}
			drawData.Draw(Main.spriteBatch);
		}

		// Token: 0x0600066E RID: 1646 RVA: 0x0013FB60 File Offset: 0x0013DD60
		[CompilerGenerated]
		internal static void <AddSignalTraps>g__Handle|1977_0(PosixSignalContext ctx)
		{
			ctx.Cancel = true;
			ILog tML = Logging.tML;
			DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(26, 1);
			defaultInterpolatedStringHandler.AppendLiteral("Signal ");
			defaultInterpolatedStringHandler.AppendFormatted<PosixSignal>(ctx.Signal);
			defaultInterpolatedStringHandler.AppendLiteral(", Closing Server...");
			tML.Info(defaultInterpolatedStringHandler.ToStringAndClear());
			Netplay.Disconnect = true;
		}

		// Token: 0x040002F4 RID: 756
		private const string versionStringBecauseTheyreTheSame = "v1.4.4.9";

		// Token: 0x040002F5 RID: 757
		public const int curRelease = 279;

		// Token: 0x040002F6 RID: 758
		public const string assemblyVersionNumber = "1.4.4.9";

		// Token: 0x040002F7 RID: 759
		public const string copyrightText = "Copyright © 2022 Re-Logic";

		// Token: 0x040002F8 RID: 760
		public const ulong WorldGeneratorVersion = 1198295875585UL;

		// Token: 0x040002F9 RID: 761
		public static int mapDelay = 2;

		// Token: 0x040002FA RID: 762
		public static IAssetRepository Assets;

		// Token: 0x040002FB RID: 763
		public static AssetSourceController AssetSourceController;

		// Token: 0x040002FC RID: 764
		private volatile bool _musicLoaded;

		// Token: 0x040002FD RID: 765
		private volatile bool _artLoaded;

		// Token: 0x040002FE RID: 766
		private volatile bool _begunMainAsyncLoad;

		// Token: 0x040002FF RID: 767
		public static int CurrentDrawnEntityShader;

		// Token: 0x04000300 RID: 768
		public static Entity CurrentDrawnEntity;

		// Token: 0x04000301 RID: 769
		private static bool GameAskedToQuit = false;

		// Token: 0x04000302 RID: 770
		public static float ForcedMinimumZoom = 1f;

		// Token: 0x04000303 RID: 771
		public static SpriteViewMatrix GameViewMatrix;

		// Token: 0x04000304 RID: 772
		public static SpriteViewMatrix BackgroundViewMatrix;

		// Token: 0x04000305 RID: 773
		private static Matrix _currentWantedZoomMatrix;

		// Token: 0x04000306 RID: 774
		private static Matrix _uiScaleMatrix;

		// Token: 0x04000307 RID: 775
		private static float _uiScaleWanted = 1f;

		// Token: 0x04000308 RID: 776
		private static float _uiScaleUsed = 1f;

		// Token: 0x04000309 RID: 777
		public static float GameZoomTarget = 1f;

		// Token: 0x0400030A RID: 778
		public static bool LightingEveryFrame = true;

		// Token: 0x0400030B RID: 779
		public static bool SettingsUnlock_WorldEvil;

		// Token: 0x0400030C RID: 780
		public static bool SettingsEnabled_MinersWobble = true;

		// Token: 0x0400030D RID: 781
		public static bool SettingsEnabled_AutoReuseAllItems = false;

		// Token: 0x0400030E RID: 782
		public static bool SettingBlockGamepadsEntirely;

		// Token: 0x0400030F RID: 783
		public static bool SettingDontScaleMainMenuUp;

		// Token: 0x04000310 RID: 784
		public static bool SettingsEnabled_OpaqueBoxBehindTooltips = true;

		// Token: 0x04000311 RID: 785
		public static bool SettingMusicReplayDelayEnabled = false;

		// Token: 0x04000312 RID: 786
		public static bool HidePassword;

		// Token: 0x04000313 RID: 787
		public static bool ReversedUpDownArmorSetBonuses;

		// Token: 0x04000314 RID: 788
		public static Color MouseBorderColor = new Color(64, 64, 64, 64);

		// Token: 0x04000315 RID: 789
		public static bool MouseShowBuildingGrid;

		// Token: 0x04000316 RID: 790
		public static bool AllowUnfocusedInputOnGamepad;

		// Token: 0x04000317 RID: 791
		public static bool InvisibleCursorForGamepad = true;

		// Token: 0x04000318 RID: 792
		public static bool GamepadDisableCursorItemIconInner = true;

		// Token: 0x04000319 RID: 793
		public static bool GamepadDisableInstructionsDisplay;

		// Token: 0x0400031A RID: 794
		public static bool CrouchingEnabled = false;

		// Token: 0x0400031B RID: 795
		private static GameNotificationType _flashNotificationType = GameNotificationType.All;

		// Token: 0x0400031C RID: 796
		public static float MouseBuildingGridAlpha;

		// Token: 0x0400031D RID: 797
		public static bool CaptureModeDisabled = false;

		// Token: 0x0400031E RID: 798
		public bool unityMouseOver;

		// Token: 0x0400031F RID: 799
		public static Main instance;

		// Token: 0x04000320 RID: 800
		public static ChromaEngine Chroma;

		// Token: 0x04000321 RID: 801
		public static ChromaHotkeyPainter ChromaPainter;

		// Token: 0x04000322 RID: 802
		public static Camera Camera = new Camera();

		// Token: 0x04000323 RID: 803
		public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();

		// Token: 0x04000324 RID: 804
		public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();

		// Token: 0x04000325 RID: 805
		public static MapHeadRenderer MapPlayerRenderer = new MapHeadRenderer();

		// Token: 0x04000326 RID: 806
		public static NPCHeadRenderer TownNPCHeadRenderer = null;

		// Token: 0x04000327 RID: 807
		public static NPCHeadRenderer BossNPCHeadRenderer = null;

		// Token: 0x04000328 RID: 808
		public static List<TitleLinkButton> TitleLinks = new List<TitleLinkButton>();

		// Token: 0x04000329 RID: 809
		public static string versionNumber = "v1.4.4.9";

		// Token: 0x0400032A RID: 810
		public static string versionNumber2 = "v1.4.4.9";

		// Token: 0x0400032B RID: 811
		public static bool AnnouncementBoxDisabled;

		// Token: 0x0400032C RID: 812
		public static int AnnouncementBoxRange = -1;

		// Token: 0x0400032D RID: 813
		public static string AutogenSeedName;

		// Token: 0x0400032E RID: 814
		private static GameModeData _currentGameModeInfo = GameModeData.NormalMode;

		// Token: 0x0400032F RID: 815
		public static Dictionary<int, GameModeData> RegisteredGameModes = new Dictionary<int, GameModeData>
		{
			{
				0,
				GameModeData.NormalMode
			},
			{
				1,
				GameModeData.ExpertMode
			},
			{
				2,
				GameModeData.MasterMode
			},
			{
				3,
				GameModeData.CreativeMode
			}
		};

		// Token: 0x04000330 RID: 816
		private static bool? _overrideForExpertMode = null;

		// Token: 0x04000331 RID: 817
		private static bool? _overrideForMasterMode = null;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/Drunk_world">Drunk world</see> secret world seed. See also <see cref="F:Terraria.WorldGen.drunkWorldGen" />.
		/// <br /><br /> See <see cref="F:Terraria.Main.swapMusic" /> for information about the Otherworld soundtrack toggle. </summary>
		// Token: 0x04000332 RID: 818
		public static bool drunkWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/For_the_worthy">For the worthy</see> secret world seed. See also <see cref="F:Terraria.WorldGen.getGoodWorldGen" />. </summary>
		// Token: 0x04000333 RID: 819
		public static bool getGoodWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/Celebrationmk10">Celebrationmk10</see> secret world seed. See also <see cref="F:Terraria.WorldGen.tenthAnniversaryWorldGen" />. </summary>
		// Token: 0x04000334 RID: 820
		public static bool tenthAnniversaryWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/The_Constant">The Constant</see> secret world seed. See also <see cref="F:Terraria.WorldGen.dontStarveWorldGen" />. </summary>
		// Token: 0x04000335 RID: 821
		public static bool dontStarveWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/Not_the_bees">Not the bees</see> secret world seed. See also <see cref="F:Terraria.WorldGen.notTheBees" />. </summary>
		// Token: 0x04000336 RID: 822
		public static bool notTheBeesWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/Don%27t_dig_up">Don't dig up (aka Remix)</see> secret world seed. See also <see cref="F:Terraria.WorldGen.remixWorldGen" />. </summary>
		// Token: 0x04000337 RID: 823
		public static bool remixWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/No_traps">No traps</see> secret world seed. See also <see cref="F:Terraria.WorldGen.noTrapsWorldGen" />. </summary>
		// Token: 0x04000338 RID: 824
		public static bool noTrapsWorld = false;

		/// <summary> If true, the world was generated with the <see href="https://terraria.wiki.gg/wiki/Get_fixed_boi">Get fixed boi (aka Zenith)</see> secret world seed. This seed combines multiple secret seeds. Note that the other secret world seed bools inherited by this seed will be set as well, so there is no need to specifically check both those bools and this bool. See also <see cref="F:Terraria.WorldGen.everythingWorldGen" />. </summary>
		// Token: 0x04000339 RID: 825
		public static bool zenithWorld = false;

		// Token: 0x0400033A RID: 826
		public static Vector2 destroyerHB = new Vector2(0f, 0f);

		// Token: 0x0400033B RID: 827
		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);

		// Token: 0x0400033C RID: 828
		public static FavoritesFile CloudFavoritesData = new FavoritesFile("ModLoader/favorites.json", true);

		// Token: 0x0400033D RID: 829
		public static FileMetadata WorldFileMetadata;

		// Token: 0x0400033E RID: 830
		public static FileMetadata MapFileMetadata;

		// Token: 0x0400033F RID: 831
		public static PingMapLayer Pings = new PingMapLayer();

		// Token: 0x04000340 RID: 832
		public static MapIconOverlay MapIcons = new MapIconOverlay().AddLayer(new SpawnMapLayer()).AddLayer(new TeleportPylonsMapLayer()).AddLayer(Main.Pings);

		// Token: 0x04000341 RID: 833
		public static CreativeUI CreativeMenu = new CreativeUI();

		// Token: 0x04000342 RID: 834
		private static Vector2 _lastPingMousePosition = Vector2.Zero;

		// Token: 0x04000343 RID: 835
		private static double _lastPingMouseDownTime = 0.0;

		// Token: 0x04000344 RID: 836
		private AchievementManager _achievements;

		// Token: 0x04000345 RID: 837
		private AchievementAdvisor _achievementAdvisor;

		// Token: 0x04000346 RID: 838
		public static BigProgressBarSystem BigBossProgressBar = new BigProgressBarSystem();

		// Token: 0x04000347 RID: 839
		public static UserInterface MenuUI = new UserInterface();

		/// <summary>
		/// Used for non-gameplay in-game fullscreen UI which hide all other UI. Some examples include the bestiary, emote menu, and settings menus.
		/// <para /> Modders can use <see cref="M:Terraria.UI.IngameFancyUI.OpenUIState(Terraria.UI.UIState)" /> to easily display a fullscreen UI without needing to manage updating or drawing a <see cref="T:Terraria.UI.UserInterface" />.
		/// </summary>
		// Token: 0x04000348 RID: 840
		public static UserInterface InGameUI = new UserInterface();

		// Token: 0x04000349 RID: 841
		private static Main.OnPlayerSelected _pendingCharacterSelect;

		// Token: 0x0400034A RID: 842
		public static bool drawBackGore;

		// Token: 0x0400034B RID: 843
		public static ulong LobbyId = 0UL;

		// Token: 0x0400034C RID: 844
		private static Color[] _mapColorCacheArray = new Color[30000];

		// Token: 0x0400034D RID: 845
		public WaterfallManager waterfallManager;

		// Token: 0x0400034E RID: 846
		public static WorldSections sectionManager;

		// Token: 0x0400034F RID: 847
		public static bool ServerSideCharacter;

		// Token: 0x04000350 RID: 848
		public static string clientUUID;

		// Token: 0x04000351 RID: 849
		public static bool ContentLoaded = false;

		// Token: 0x04000352 RID: 850
		private static int toolTipDistance = 6;

		// Token: 0x04000353 RID: 851
		public static float GlobalTimeWrappedHourly;

		// Token: 0x04000354 RID: 852
		public static bool GlobalTimerPaused = false;

		// Token: 0x04000355 RID: 853
		public static GameTime gameTimeCache = new GameTime();

		// Token: 0x04000356 RID: 854
		public static ulong TileFrameSeed = (ulong)((long)Guid.NewGuid().GetHashCode());

		// Token: 0x04000357 RID: 855
		private static ulong _drawCycleCounter;

		// Token: 0x04000358 RID: 856
		public static ContentManager ShaderContentManager;

		// Token: 0x04000359 RID: 857
		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();

		// Token: 0x0400035A RID: 858
		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();

		// Token: 0x0400035B RID: 859
		public static Ref<Effect> TileShaderRef = new Ref<Effect>();

		// Token: 0x0400035C RID: 860
		public static Ref<Effect> VertexPixelShaderRef = new Ref<Effect>();

		// Token: 0x0400035D RID: 861
		public static int WaveQuality = 3;

		// Token: 0x0400035E RID: 862
		public static bool UseStormEffects = true;

		// Token: 0x0400035F RID: 863
		public static bool UseHeatDistortion = true;

		// Token: 0x04000360 RID: 864
		public static List<IEnumerator> DelayedProcesses = new List<IEnumerator>();

		// Token: 0x04000361 RID: 865
		public static int npcStreamSpeed = 30;

		// Token: 0x04000362 RID: 866
		public static int musicError;

		// Token: 0x04000363 RID: 867
		public static bool dedServFPS;

		// Token: 0x04000364 RID: 868
		public static int dedServCount1;

		// Token: 0x04000365 RID: 869
		public static int dedServCount2;

		// Token: 0x04000366 RID: 870
		public static bool superFast = false;

		// Token: 0x04000367 RID: 871
		public static readonly int offLimitBorderTiles = 40;

		// Token: 0x04000368 RID: 872
		public static readonly int maxMusic = 92;

		// Token: 0x04000369 RID: 873
		public const int MaxBannerTypes = 290;

		// Token: 0x0400036A RID: 874
		public static readonly int maxBackgrounds = 298;

		// Token: 0x0400036B RID: 875
		public const int MaxShopIDs = 100;

		// Token: 0x0400036C RID: 876
		private static float cameraLerp;

		// Token: 0x0400036D RID: 877
		private static int cameraLerpTimer;

		// Token: 0x0400036E RID: 878
		private static int cameraLerpTimeToggle;

		// Token: 0x0400036F RID: 879
		private static bool cameraGamePadLerp;

		// Token: 0x04000370 RID: 880
		public static Vector2[] OffsetsNPCOffhand = new Vector2[]
		{
			new Vector2(14f, 34f),
			new Vector2(14f, 32f),
			new Vector2(14f, 26f),
			new Vector2(14f, 22f),
			new Vector2(14f, 18f)
		};

		// Token: 0x04000371 RID: 881
		public static Vector2[] OffsetsPlayerOffhand = new Vector2[]
		{
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 18f),
			new Vector2(14f, 20f),
			new Vector2(16f, 4f),
			new Vector2(16f, 16f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(14f, 14f),
			new Vector2(14f, 14f),
			new Vector2(12f, 14f),
			new Vector2(14f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f)
		};

		// Token: 0x04000372 RID: 882
		public static Vector2[] OffsetsPlayerOnhand = new Vector2[]
		{
			new Vector2(6f, 19f),
			new Vector2(5f, 10f),
			new Vector2(12f, 10f),
			new Vector2(13f, 17f),
			new Vector2(12f, 19f),
			new Vector2(5f, 10f),
			new Vector2(7f, 17f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(8f, 17f),
			new Vector2(9f, 16f),
			new Vector2(9f, 12f),
			new Vector2(8f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f)
		};

		// Token: 0x04000373 RID: 883
		public static Vector2[] OffsetsPlayerHeadgear = new Vector2[]
		{
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f)
		};

		// Token: 0x04000374 RID: 884
		public static Vector2 CurrentPan = Vector2.Zero;

		// Token: 0x04000375 RID: 885
		public static float sunCircle;

		// Token: 0x04000376 RID: 886
		public static int BlackFadeIn;

		// Token: 0x04000377 RID: 887
		public static bool noWindowBorder = false;

		// Token: 0x04000378 RID: 888
		public static RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

		// Token: 0x04000379 RID: 889
		private string _cachedTitle;

		// Token: 0x0400037A RID: 890
		public static int undergroundBackground;

		// Token: 0x0400037B RID: 891
		public static int oldUndergroundBackground;

		// Token: 0x0400037C RID: 892
		public static bool skipMenu = false;

		// Token: 0x0400037D RID: 893
		public static bool verboseNetplay = false;

		// Token: 0x0400037E RID: 894
		public static bool stopTimeOuts = false;

		// Token: 0x0400037F RID: 895
		public static bool showSpam = false;

		// Token: 0x04000380 RID: 896
		public static bool showItemOwner = false;

		// Token: 0x04000381 RID: 897
		public static bool[] townNPCCanSpawn = new bool[(int)NPCID.Count];

		// Token: 0x04000382 RID: 898
		public static int musicBox2 = -1;

		// Token: 0x04000383 RID: 899
		public static int musicBoxNotModifiedByVolume = -1;

		// Token: 0x04000384 RID: 900
		public static byte HealthBarDrawSettings = 1;

		// Token: 0x04000385 RID: 901
		public static bool runningCollectorsEdition;

		// Token: 0x04000386 RID: 902
		public static float wFrCounter;

		// Token: 0x04000387 RID: 903
		public static float wFrame;

		// Token: 0x04000388 RID: 904
		public static float upTimer;

		// Token: 0x04000389 RID: 905
		public static float upTimerMax;

		// Token: 0x0400038A RID: 906
		public static float upTimerMaxDelay;

		// Token: 0x0400038B RID: 907
		public static bool drawDiag;

		// Token: 0x0400038C RID: 908
		public static bool drawRelease;

		// Token: 0x0400038D RID: 909
		public static bool drawBetterDebug;

		// Token: 0x0400038E RID: 910
		public static bool betterDebugRelease;

		// Token: 0x0400038F RID: 911
		public static bool renderNow;

		// Token: 0x04000390 RID: 912
		public static bool drawToScreen;

		// Token: 0x04000391 RID: 913
		public static bool targetSet;

		// Token: 0x04000392 RID: 914
		public static int mouseX;

		// Token: 0x04000393 RID: 915
		public static int mouseY;

		// Token: 0x04000394 RID: 916
		public static int lastMouseX;

		// Token: 0x04000395 RID: 917
		public static int lastMouseY;

		// Token: 0x04000396 RID: 918
		private static ConcurrentQueue<Action> _mainThreadActions = new ConcurrentQueue<Action>();

		// Token: 0x04000397 RID: 919
		public static bool mouseLeft;

		// Token: 0x04000398 RID: 920
		public static bool mouseRight;

		// Token: 0x04000399 RID: 921
		public static bool isMouseLeftConsumedByUI = false;

		// Token: 0x0400039A RID: 922
		public static float essScale = 1f;

		// Token: 0x0400039B RID: 923
		public static int essDir = -1;

		// Token: 0x0400039C RID: 924
		public static float[] cloudBGX = new float[2];

		// Token: 0x0400039D RID: 925
		public static float cloudBGAlpha;

		// Token: 0x0400039E RID: 926
		public static float cloudBGActive;

		// Token: 0x0400039F RID: 927
		public static int[] cloudBG = new int[]
		{
			112,
			113
		};

		// Token: 0x040003A0 RID: 928
		public static int[] treeMntBGSet1 = new int[2];

		// Token: 0x040003A1 RID: 929
		public static int[] treeMntBGSet2 = new int[2];

		// Token: 0x040003A2 RID: 930
		public static int[] treeMntBGSet3 = new int[2];

		// Token: 0x040003A3 RID: 931
		public static int[] treeMntBGSet4 = new int[2];

		// Token: 0x040003A4 RID: 932
		public static int[] treeBGSet1 = new int[3];

		// Token: 0x040003A5 RID: 933
		public static int[] treeBGSet2 = new int[3];

		// Token: 0x040003A6 RID: 934
		public static int[] treeBGSet3 = new int[3];

		// Token: 0x040003A7 RID: 935
		public static int[] treeBGSet4 = new int[3];

		// Token: 0x040003A8 RID: 936
		public static int[] corruptBG = new int[3];

		// Token: 0x040003A9 RID: 937
		public static int[] jungleBG = new int[3];

		// Token: 0x040003AA RID: 938
		public static int[] snowMntBG = new int[2];

		// Token: 0x040003AB RID: 939
		public static int[] snowBG = new int[3];

		// Token: 0x040003AC RID: 940
		public static int[] hallowBG = new int[3];

		// Token: 0x040003AD RID: 941
		public static int[] crimsonBG = new int[3];

		// Token: 0x040003AE RID: 942
		public static int[] desertBG = new int[3];

		// Token: 0x040003AF RID: 943
		public static int[] mushroomBG = new int[3];

		// Token: 0x040003B0 RID: 944
		public static int oceanBG;

		// Token: 0x040003B1 RID: 945
		public static int[] underworldBG = new int[5];

		// Token: 0x040003B2 RID: 946
		public static int[] treeX = new int[4];

		// Token: 0x040003B3 RID: 947
		public static int[] treeStyle = new int[4];

		// Token: 0x040003B4 RID: 948
		public static int[] caveBackX = new int[4];

		// Token: 0x040003B5 RID: 949
		public static int[] caveBackStyle = new int[4];

		// Token: 0x040003B6 RID: 950
		public static int iceBackStyle;

		// Token: 0x040003B7 RID: 951
		public static int hellBackStyle;

		// Token: 0x040003B8 RID: 952
		public static int jungleBackStyle;

		// Token: 0x040003B9 RID: 953
		public static string debugWords = "";

		// Token: 0x040003BA RID: 954
		public static bool gamePad = false;

		/// <summary> If true the <see href="https://terraria.wiki.gg/wiki/Christmas">Christmas</see> seasonal event is currently active. </summary>
		// Token: 0x040003BB RID: 955
		public static bool xMas;

		/// <summary> If true the <see href="https://terraria.wiki.gg/wiki/Halloween">Halloween</see> seasonal event is currently active. </summary>
		// Token: 0x040003BC RID: 956
		public static bool halloween;

		// Token: 0x040003BD RID: 957
		public static bool forceXMasForToday;

		// Token: 0x040003BE RID: 958
		public static bool forceHalloweenForToday;

		// Token: 0x040003BF RID: 959
		public static bool DisableIntenseVisualEffects = false;

		// Token: 0x040003C0 RID: 960
		public static int snowDust = 0;

		// Token: 0x040003C1 RID: 961
		public static bool changeTheTitle;

		// Token: 0x040003C2 RID: 962
		public static bool hairWindow;

		// Token: 0x040003C3 RID: 963
		public static bool clothesWindow;

		// Token: 0x040003C4 RID: 964
		public static bool ingameOptionsWindow = false;

		// Token: 0x040003C5 RID: 965
		public static bool inFancyUI = false;

		// Token: 0x040003C6 RID: 966
		public static int keyCount;

		// Token: 0x040003C7 RID: 967
		public static string[] keyString = new string[10];

		// Token: 0x040003C8 RID: 968
		public static int[] keyInt = new int[10];

		// Token: 0x040003C9 RID: 969
		public static byte gFade;

		// Token: 0x040003CA RID: 970
		public static float gFader;

		// Token: 0x040003CB RID: 971
		public static byte gFadeDir = 1;

		// Token: 0x040003CC RID: 972
		public static bool shouldDrawNetDiagnosticsUI;

		// Token: 0x040003CD RID: 973
		private static INetDiagnosticsUI _activeNetDiagnosticsUI;

		// Token: 0x040003CE RID: 974
		public static IMultiplayerClosePlayersOverlay ActiveClosePlayersTeamOverlay = new NewMultiplayerClosePlayersOverlay();

		// Token: 0x040003CF RID: 975
		public static double UpdateTimeAccumulator;

		// Token: 0x040003D0 RID: 976
		public static bool drawSkip;

		// Token: 0x040003D1 RID: 977
		public static int fpsCount;

		// Token: 0x040003D2 RID: 978
		public static Stopwatch fpsTimer = new Stopwatch();

		// Token: 0x040003D3 RID: 979
		public bool gammaTest;

		// Token: 0x040003D4 RID: 980
		private const bool USE_ASYNC_LOAD = true;

		// Token: 0x040003D5 RID: 981
		private static bool _isAsyncLoadComplete;

		// Token: 0x040003D6 RID: 982
		public static bool showSplash = true;

		// Token: 0x040003D7 RID: 983
		public static bool ignoreErrors = true;

		// Token: 0x040003D8 RID: 984
		public static string defaultIP = "";

		/// <summary>
		/// The rate at which <see cref="F:Terraria.Main.time" /> updates per tick.
		/// <br /> Can be modified using <see cref="M:Terraria.ModLoader.ModSystem.ModifyTimeRate(System.Double@,System.Double@,System.Double@)" />. Capped at <c>86,400.0</c>.
		/// </summary>
		// Token: 0x040003D9 RID: 985
		public static double dayRate = 1.0;

		// Token: 0x040003DA RID: 986
		public static double desiredWorldTilesUpdateRate = 1.0;

		// Token: 0x040003DB RID: 987
		public static int maxScreenW = 1920;

		// Token: 0x040003DC RID: 988
		public static int maxScreenH = 1200;

		// Token: 0x040003DD RID: 989
		public static int minScreenW = 800;

		// Token: 0x040003DE RID: 990
		public static int minScreenH = 720;

		// Token: 0x040003DF RID: 991
		public static float iS = 1f;

		// Token: 0x040003E0 RID: 992
		public static bool render;

		// Token: 0x040003E1 RID: 993
		public static int qaStyle;

		// Token: 0x040003E2 RID: 994
		public static int buffScanAreaWidth = (Main.maxScreenW + 800) / 16 - 1;

		// Token: 0x040003E3 RID: 995
		public static int buffScanAreaHeight = (Main.maxScreenH + 800) / 16 - 1;

		// Token: 0x040003E4 RID: 996
		public static float musicPitch = 0f;

		// Token: 0x040003E5 RID: 997
		public static bool[] projHostile = new bool[(int)ProjectileID.Count];

		// Token: 0x040003E6 RID: 998
		public static bool[] projHook = new bool[(int)ProjectileID.Count];

		/// <summary>
		/// Indexed by <see cref="T:Terraria.ID.BuffID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.BuffID" />, then that buff can be applied to players by other players in PvP.
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x040003E7 RID: 999
		public static bool[] pvpBuff = new bool[BuffID.Count];

		/// <summary>
		/// Allows status effects for which this is set to true to persist after the afflicted player's death.<br />
		/// Defaults to <see langword="false" />; all vanilla flask effects have their entries here set to true.<br />
		/// </summary>
		// Token: 0x040003E8 RID: 1000
		public static bool[] persistentBuff = new bool[BuffID.Count];

		/// <summary>
		/// Categorizes status effects for which this is set to true as being from vanity pets, preventing them from overlapping with other vanity pet status effects.<br />
		/// Defaults to <see langword="false" />; all vanilla vanity pets have their entries here set to true.<br />
		/// </summary>
		// Token: 0x040003E9 RID: 1001
		public static bool[] vanityPet = new bool[BuffID.Count];

		/// <summary>
		/// Categorizes status effects for which this is set to true as being tied to a light pet, preventing them from overlapping with other light pet status effects.<br />
		/// Defaults to <see langword="false" />; all vanilla light pets have their entries here set to true.<br />
		/// </summary>
		// Token: 0x040003EA RID: 1002
		public static bool[] lightPet = new bool[BuffID.Count];

		/// <summary>
		/// Categorizes status effects for which this is set to true as being from flasks, preventing them from overlapping with other flask status effects.<br />
		/// Defaults to <see langword="false" />; all vanilla flask effects have their entries here set to true.<br />
		/// </summary>
		// Token: 0x040003EB RID: 1003
		public static bool[] meleeBuff = new bool[BuffID.Count];

		/// <summary>
		/// Categorizes status effects for which this is set to true as being debuffs instead of buffs.<br />
		/// This has multiple effects on gameplay:<br />
		/// - the Nurse can remove the status effect when healing the afflicted player (to prevent this, refer to <see cref="F:Terraria.ID.BuffID.Sets.NurseCannotRemoveDebuff" />)<br />
		/// - the status effect cannot be cleared from overflowing the status effect cap (buffs will be cleared instead)<br />
		/// - the status effect cannot be cleared by right-clicking it (which can be done for all other status effect types)<br />
		/// Defaults to false; all vanilla debuffs have their entries here set to true.<br />
		/// </summary>
		// Token: 0x040003EC RID: 1004
		public static bool[] debuff = new bool[BuffID.Count];

		/// <summary>
		/// Indexed by <see cref="T:Terraria.ID.BuffID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.BuffID" />, then that buff will not be saved when exiting a world.
		/// <br /> Vanilla sets this for DoT effects (<see cref="F:Terraria.ID.BuffID.Poisoned" />), short item buffs (<see cref="F:Terraria.ID.BuffID.Panic" />), mount buffs, and conditionally-applied buffs (<see cref="F:Terraria.ID.BuffID.Campfire" />, <see cref="F:Terraria.ID.BuffID.Werewolf" />).
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x040003ED RID: 1005
		public static bool[] buffNoSave = new bool[BuffID.Count];

		/// <summary>
		/// Prevents status effects which have their entries set to true from displaying the amount of time they have left.<br />
		/// Defaults to false; most, if not all, status effects which have their entries set to true here are related to mounts, pets, and summons.<br />
		/// </summary>
		// Token: 0x040003EE RID: 1006
		public static bool[] buffNoTimeDisplay = new bool[BuffID.Count];

		// Token: 0x040003EF RID: 1007
		public static bool[] buffDoubleApply = new bool[BuffID.Count];

		// Token: 0x040003F0 RID: 1008
		public static int maxMP = 10;

		// Token: 0x040003F1 RID: 1009
		public static string[] recentWorld = new string[Main.maxMP];

		// Token: 0x040003F2 RID: 1010
		public static string[] recentIP = new string[Main.maxMP];

		// Token: 0x040003F3 RID: 1011
		public static int[] recentPort = new int[Main.maxMP];

		// Token: 0x040003F4 RID: 1012
		public static bool shortRender = true;

		// Token: 0x040003F5 RID: 1013
		public static bool BackgroundEnabled = true;

		// Token: 0x040003F6 RID: 1014
		public static int instantBGTransitionCounter = 2;

		// Token: 0x040003F7 RID: 1015
		public static int bgDelay;

		// Token: 0x040003F8 RID: 1016
		public static int bgStyle;

		// Token: 0x040003F9 RID: 1017
		internal const int BG_STYLES_COUNT = 14;

		// Token: 0x040003FA RID: 1018
		public static float[] bgAlphaFrontLayer = new float[14];

		// Token: 0x040003FB RID: 1019
		public static float[] bgAlphaFarBackLayer = new float[14];

		// Token: 0x040003FC RID: 1020
		public static int[] bgFrame = new int[14];

		// Token: 0x040003FD RID: 1021
		public static int[] bgFrameCounter = new int[14];

		// Token: 0x040003FE RID: 1022
		public static int EquipPage;

		// Token: 0x040003FF RID: 1023
		public static int EquipPageSelected;

		// Token: 0x04000400 RID: 1024
		public int mouseNPCIndex = -1;

		// Token: 0x04000401 RID: 1025
		public int mouseNPCType = -1;

		// Token: 0x04000402 RID: 1026
		public static int wofNPCIndex = -1;

		// Token: 0x04000403 RID: 1027
		public static int wofDrawAreaTop;

		// Token: 0x04000404 RID: 1028
		public static int wofDrawAreaBottom;

		// Token: 0x04000405 RID: 1029
		public static int wofDrawFrameIndex;

		// Token: 0x04000406 RID: 1030
		public static int offScreenRange = 200;

		// Token: 0x04000407 RID: 1031
		public RenderTarget2D backWaterTarget;

		// Token: 0x04000408 RID: 1032
		public static RenderTarget2D waterTarget;

		// Token: 0x04000409 RID: 1033
		public RenderTarget2D tileTarget;

		// Token: 0x0400040A RID: 1034
		public RenderTarget2D blackTarget;

		// Token: 0x0400040B RID: 1035
		public RenderTarget2D tile2Target;

		// Token: 0x0400040C RID: 1036
		public RenderTarget2D wallTarget;

		// Token: 0x0400040D RID: 1037
		public RenderTarget2D backgroundTarget;

		// Token: 0x0400040E RID: 1038
		public static RenderTarget2D screenTarget;

		// Token: 0x0400040F RID: 1039
		public static RenderTarget2D screenTargetSwap;

		// Token: 0x04000410 RID: 1040
		public static int maxMapUpdates = 250000;

		// Token: 0x04000411 RID: 1041
		public static bool refreshMap;

		// Token: 0x04000412 RID: 1042
		public static int loadMapLastX;

		// Token: 0x04000413 RID: 1043
		public static bool loadMapLock;

		// Token: 0x04000414 RID: 1044
		public static bool loadMap;

		// Token: 0x04000415 RID: 1045
		public static bool mapReady;

		// Token: 0x04000416 RID: 1046
		public static int textureMaxWidth = 2000;

		// Token: 0x04000417 RID: 1047
		public static int textureMaxHeight = 1800;

		// Token: 0x04000418 RID: 1048
		public static bool updateMap;

		// Token: 0x04000419 RID: 1049
		public static int mapMinX = 0;

		// Token: 0x0400041A RID: 1050
		public static int mapMaxX = 0;

		// Token: 0x0400041B RID: 1051
		public static int mapMinY;

		// Token: 0x0400041C RID: 1052
		public static int mapMaxY;

		// Token: 0x0400041D RID: 1053
		public static int mapTimeMax = 30;

		// Token: 0x0400041E RID: 1054
		public static int mapTime = Main.mapTimeMax;

		// Token: 0x0400041F RID: 1055
		public static bool clearMap;

		// Token: 0x04000420 RID: 1056
		public static int mapTargetX = 5;

		// Token: 0x04000421 RID: 1057
		public static int mapTargetY = 2;

		// Token: 0x04000422 RID: 1058
		public RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];

		// Token: 0x04000423 RID: 1059
		public RenderTarget2D mapSectionTexture;

		// Token: 0x04000424 RID: 1060
		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];

		// Token: 0x04000425 RID: 1061
		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];

		// Token: 0x04000426 RID: 1062
		public const int numInfoIcons = 13;

		// Token: 0x04000427 RID: 1063
		public static Color OurFavoriteColor = new Color(255, 231, 69);

		// Token: 0x04000428 RID: 1064
		public static bool mapInit;

		// Token: 0x04000429 RID: 1065
		public static bool mapEnabled = true;

		/// <summary>
		/// Dictates how the non-<see cref="F:Terraria.Main.mapFullscreen" /> map is displayed.
		/// <para /> Can be one of the following values/modes:
		/// <br /><b>0:</b> The minimap has been hidden.
		/// <br /><b>1:</b> The minimap is visible.
		/// <br /><b>2:</b> The overlay map is visible.
		/// </summary>
		// Token: 0x0400042A RID: 1066
		public static int mapStyle = 1;

		// Token: 0x0400042B RID: 1067
		public static float grabMapX;

		// Token: 0x0400042C RID: 1068
		public static float grabMapY;

		// Token: 0x0400042D RID: 1069
		public static int miniMapX;

		// Token: 0x0400042E RID: 1070
		public static int miniMapY;

		// Token: 0x0400042F RID: 1071
		public static int miniMapWidth;

		// Token: 0x04000430 RID: 1072
		public static int miniMapHeight;

		// Token: 0x04000431 RID: 1073
		public static float mapMinimapDefaultScale = 1.05f;

		// Token: 0x04000432 RID: 1074
		public static float mapMinimapScale = Main.mapMinimapDefaultScale;

		// Token: 0x04000433 RID: 1075
		public static float mapMinimapAlpha = 1f;

		// Token: 0x04000434 RID: 1076
		public static float mapOverlayScale = 2.5f;

		// Token: 0x04000435 RID: 1077
		public static float mapOverlayAlpha = 0.35f;

		/// <summary>
		/// If true, the map is currently in fullscreen mode. See also <see cref="F:Terraria.Main.mapStyle" />, note that the overlay map does not count as the fullscreen map.
		/// </summary>
		// Token: 0x04000436 RID: 1078
		public static bool mapFullscreen;

		// Token: 0x04000437 RID: 1079
		public static bool resetMapFull;

		// Token: 0x04000438 RID: 1080
		public static float mapFullscreenScale = 4f;

		// Token: 0x04000439 RID: 1081
		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);

		// Token: 0x0400043A RID: 1082
		private static bool IsEnginePreloaded;

		// Token: 0x0400043B RID: 1083
		private static bool IsEngineLoaded;

		// Token: 0x0400043C RID: 1084
		private static uint _gameUpdateCount;

		// Token: 0x0400043D RID: 1085
		public static bool SkipAssemblyLoad;

		// Token: 0x0400043E RID: 1086
		private int firstTileX;

		// Token: 0x0400043F RID: 1087
		private int lastTileX;

		// Token: 0x04000440 RID: 1088
		private int firstTileY;

		// Token: 0x04000441 RID: 1089
		private int lastTileY;

		// Token: 0x04000442 RID: 1090
		internal double bgParallax;

		// Token: 0x04000443 RID: 1091
		internal int bgStartX;

		// Token: 0x04000444 RID: 1092
		internal int bgLoops;

		// Token: 0x04000445 RID: 1093
		private int bgStartY;

		// Token: 0x04000446 RID: 1094
		private int bgLoopsY;

		// Token: 0x04000447 RID: 1095
		internal int bgTopY;

		// Token: 0x04000448 RID: 1096
		public static int renderCount = 99;

		// Token: 0x04000449 RID: 1097
		private const int MF_BYPOSITION = 1024;

		// Token: 0x0400044A RID: 1098
		public static GraphicsDeviceManager graphics;

		// Token: 0x0400044B RID: 1099
		public static SpriteBatch spriteBatch;

		// Token: 0x0400044C RID: 1100
		public static TileBatch tileBatch;

		// Token: 0x0400044D RID: 1101
		public static BasicDebugDrawer DebugDrawer;

		// Token: 0x0400044E RID: 1102
		public static SamplerState SamplerStateForCursor = SamplerState.LinearClamp;

		// Token: 0x0400044F RID: 1103
		public static GenerationProgress AutogenProgress = new GenerationProgress();

		// Token: 0x04000450 RID: 1104
		internal static Process tServer;

		// Token: 0x04000451 RID: 1105
		private static Stopwatch saveTime = new Stopwatch();

		// Token: 0x04000452 RID: 1106
		public static KeyboardState keyState;

		// Token: 0x04000453 RID: 1107
		public static KeyboardState oldKeyState;

		// Token: 0x04000454 RID: 1108
		public static Color mcColor = new Color(1f, 0.6f, 0f);

		// Token: 0x04000455 RID: 1109
		public static Color hcColor = new Color(1f, 0.15f, 0.1f);

		// Token: 0x04000456 RID: 1110
		public static Color creativeModeColor = Color.Lerp(Color.HotPink, Color.White, 0.1f);

		// Token: 0x04000457 RID: 1111
		public static Color legendaryModeColor = Color.LimeGreen;

		// Token: 0x04000458 RID: 1112
		public static Color highVersionColor = new Color(255, 255, 0);

		// Token: 0x04000459 RID: 1113
		public static Color errorColor = new Color(255, 0, 0);

		// Token: 0x0400045A RID: 1114
		public static bool craftingHide;

		// Token: 0x0400045B RID: 1115
		public static bool armorHide;

		// Token: 0x0400045C RID: 1116
		public static float shimmerAlpha = 0f;

		// Token: 0x0400045D RID: 1117
		public static float shimmerDarken = 0f;

		// Token: 0x0400045E RID: 1118
		public static float shimmerBrightenDelay = 0f;

		// Token: 0x0400045F RID: 1119
		public static float craftingAlpha = 1f;

		// Token: 0x04000460 RID: 1120
		public static float armorAlpha = 1f;

		// Token: 0x04000461 RID: 1121
		public static float[] buffAlpha = new float[BuffID.Count];

		// Token: 0x04000462 RID: 1122
		public static bool afterPartyOfDoom = false;

		/// <summary>
		/// True if the world is in hard mode. This doubles as an indicator if <see cref="F:Terraria.ID.NPCID.WallofFlesh" /> has been defeated since they are tied together.
		/// </summary>
		// Token: 0x04000463 RID: 1123
		public static bool hardMode;

		// Token: 0x04000464 RID: 1124
		public float chestLootScale = 1f;

		// Token: 0x04000465 RID: 1125
		public bool chestLootHover;

		// Token: 0x04000466 RID: 1126
		public float chestStackScale = 1f;

		// Token: 0x04000467 RID: 1127
		public bool chestStackHover;

		// Token: 0x04000468 RID: 1128
		public float chestDepositScale = 1f;

		// Token: 0x04000469 RID: 1129
		public bool chestDepositHover;

		// Token: 0x0400046A RID: 1130
		public float chestRenameScale = 1f;

		// Token: 0x0400046B RID: 1131
		public bool chestRenameHover;

		// Token: 0x0400046C RID: 1132
		public float chestCancelScale = 1f;

		// Token: 0x0400046D RID: 1133
		public bool chestCancelHover;

		// Token: 0x0400046E RID: 1134
		public static Vector2 sceneWaterPos = Vector2.Zero;

		// Token: 0x0400046F RID: 1135
		public static Vector2 sceneTilePos = Vector2.Zero;

		// Token: 0x04000470 RID: 1136
		public static Vector2 sceneTile2Pos = Vector2.Zero;

		// Token: 0x04000471 RID: 1137
		public static Vector2 sceneWallPos = Vector2.Zero;

		// Token: 0x04000472 RID: 1138
		public static Vector2 sceneBackgroundPos = Vector2.Zero;

		// Token: 0x04000473 RID: 1139
		public static bool maxQ = true;

		// Token: 0x04000474 RID: 1140
		public static float gfxQuality = 1f;

		// Token: 0x04000475 RID: 1141
		public static float gfxRate = 0.01f;

		// Token: 0x04000476 RID: 1142
		public int DiscoStyle;

		// Token: 0x04000477 RID: 1143
		public static int DiscoR = 255;

		// Token: 0x04000478 RID: 1144
		public static int DiscoB;

		// Token: 0x04000479 RID: 1145
		public static int DiscoG;

		// Token: 0x0400047A RID: 1146
		public static int teamCooldown;

		// Token: 0x0400047B RID: 1147
		public static int teamCooldownLen = 300;

		// Token: 0x0400047C RID: 1148
		public static bool gamePaused;

		// Token: 0x0400047D RID: 1149
		public static bool gameInactive;

		// Token: 0x0400047E RID: 1150
		public static int updatesCountedForFPS;

		// Token: 0x0400047F RID: 1151
		public static int drawsCountedForFPS;

		// Token: 0x04000480 RID: 1152
		public static int uCount;

		// Token: 0x04000481 RID: 1153
		public static int updateRate;

		// Token: 0x04000482 RID: 1154
		public static int frameRate;

		// Token: 0x04000483 RID: 1155
		public static bool RGBRelease;

		// Token: 0x04000484 RID: 1156
		public static bool qRelease = false;

		// Token: 0x04000485 RID: 1157
		public static bool netRelease;

		// Token: 0x04000486 RID: 1158
		public static bool frameRelease;

		// Token: 0x04000487 RID: 1159
		public static bool showFrameRate = false;

		// Token: 0x04000488 RID: 1160
		public static int magmaBGFrame;

		// Token: 0x04000489 RID: 1161
		public static int magmaBGFrameCounter;

		// Token: 0x0400048A RID: 1162
		public static int saveTimer = 0;

		// Token: 0x0400048B RID: 1163
		public static bool autoJoin;

		// Token: 0x0400048C RID: 1164
		public static bool serverStarting = false;

		// Token: 0x0400048D RID: 1165
		public static float leftWorld = 0f;

		// Token: 0x0400048E RID: 1166
		public static float rightWorld = 134400f;

		// Token: 0x0400048F RID: 1167
		public static float topWorld = 0f;

		// Token: 0x04000490 RID: 1168
		public static float bottomWorld = 38400f;

		/// <summary>
		/// The width of the currently-loaded world in tiles.
		/// </summary>
		// Token: 0x04000491 RID: 1169
		public static int maxTilesX = (int)Main.rightWorld / 16 + 1;

		/// <summary>
		/// The height of the currently-loaded world in tiles.
		/// </summary>
		// Token: 0x04000492 RID: 1170
		public static int maxTilesY = (int)Main.bottomWorld / 16 + 1;

		// Token: 0x04000493 RID: 1171
		public const int sectionWidth = 200;

		// Token: 0x04000494 RID: 1172
		public const int sectionHeight = 150;

		// Token: 0x04000495 RID: 1173
		public static int maxSectionsX = Main.maxTilesX / 200;

		// Token: 0x04000496 RID: 1174
		public static int maxSectionsY = Main.maxTilesY / 150;

		// Token: 0x04000497 RID: 1175
		public const int maxDust = 6000;

		// Token: 0x04000498 RID: 1176
		public static int maxDustToDraw = 6000;

		// Token: 0x04000499 RID: 1177
		public const int maxCombatText = 100;

		// Token: 0x0400049A RID: 1178
		public const int maxItemText = 20;

		// Token: 0x0400049B RID: 1179
		public const int maxPlayers = 255;

		// Token: 0x0400049C RID: 1180
		public static int maxNetPlayers = 255;

		// Token: 0x0400049D RID: 1181
		public static readonly int maxChests = 8000;

		// Token: 0x0400049E RID: 1182
		public static readonly int maxItems = 400;

		// Token: 0x0400049F RID: 1183
		public static readonly int maxProjectiles = 1000;

		// Token: 0x040004A0 RID: 1184
		public static readonly int maxNPCs = 200;

		// Token: 0x040004A1 RID: 1185
		internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();

		// Token: 0x040004A2 RID: 1186
		internal static UIWorldSelect _worldSelectMenu = new UIWorldSelect();

		// Token: 0x040004A3 RID: 1187
		public static UIManageControls ManageControlsMenu = new UIManageControls();

		// Token: 0x040004A4 RID: 1188
		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();

		// Token: 0x040004A5 RID: 1189
		public static int maxRain = 750;

		// Token: 0x040004A6 RID: 1190
		public static int slimeWarningTime;

		// Token: 0x040004A7 RID: 1191
		public static int slimeWarningDelay = 420;

		// Token: 0x040004A8 RID: 1192
		public static float slimeRainNPCSlots = 0.65f;

		// Token: 0x040004A9 RID: 1193
		public static bool[] slimeRainNPC = new bool[(int)NPCID.Count];

		// Token: 0x040004AA RID: 1194
		public static double slimeRainTime;

		// Token: 0x040004AB RID: 1195
		public static bool slimeRain;

		// Token: 0x040004AC RID: 1196
		public static int slimeRainKillCount;

		// Token: 0x040004AD RID: 1197
		private const double slimeRainMaxTime = 54000.0;

		// Token: 0x040004AE RID: 1198
		private const double slimeRainMinTime = 32400.0;

		// Token: 0x040004AF RID: 1199
		private const double slimeRainMaxDelay = 604800.0;

		// Token: 0x040004B0 RID: 1200
		private const double slimeRainMinDelay = 302400.0;

		// Token: 0x040004B1 RID: 1201
		private const double LeinforsBalanceRequestForSlimeRainChance = 1.0416666666666667;

		// Token: 0x040004B2 RID: 1202
		private const double slimeRainChance = 450000.00000000006;

		// Token: 0x040004B3 RID: 1203
		public const int maxGore = 600;

		// Token: 0x040004B4 RID: 1204
		public const int InventoryItemSlotsStart = 0;

		// Token: 0x040004B5 RID: 1205
		public const int InventoryItemSlotsCount = 50;

		// Token: 0x040004B6 RID: 1206
		public const int InventoryCoinSlotsStart = 50;

		// Token: 0x040004B7 RID: 1207
		public const int InventoryCoinSlotsCount = 4;

		// Token: 0x040004B8 RID: 1208
		public const int InventoryAmmoSlotsStart = 54;

		// Token: 0x040004B9 RID: 1209
		public const int InventoryAmmoSlotsCount = 4;

		// Token: 0x040004BA RID: 1210
		public const int InventorySlotsTotal = 58;

		// Token: 0x040004BB RID: 1211
		public int invBottom = 210;

		// Token: 0x040004BC RID: 1212
		public const int maxLiquidTypes = 15;

		// Token: 0x040004BD RID: 1213
		public static float cameraX;

		// Token: 0x040004BE RID: 1214
		public static bool drewLava;

		// Token: 0x040004BF RID: 1215
		public static float[] liquidAlpha = new float[15];

		// Token: 0x040004C0 RID: 1216
		public static int waterStyle;

		// Token: 0x040004C1 RID: 1217
		public static int WorldRollingBackupsCountToKeep = 2;

		// Token: 0x040004C2 RID: 1218
		private static bool TOWMusicUnlocked = false;

		/// <summary>
		/// If true, the local player has visited the Party Girl and selected <see href="https://terraria.wiki.gg/wiki/Party_Girl#Music_toggle">the "Music" option</see> to toggle the music between the normal soundtrack and the Otherworld soundtrack.
		/// <br /><br /> Check <c>if (!Main.swapMusic == Main.drunkWorld &amp;&amp; !Main.remixWorld)</c> when setting <see cref="P:Terraria.ModLoader.ModNPC.Music" /> or <see cref="P:Terraria.ModLoader.ModSceneEffect.Music" /> if you want to play alternate music when the Otherworld soundtrack is enabled.
		/// </summary>
		// Token: 0x040004C3 RID: 1219
		public static bool swapMusic = false;

		// Token: 0x040004C4 RID: 1220
		public static float caveParallax = 0.88f;

		// Token: 0x040004C5 RID: 1221
		public static int dungeonX;

		// Token: 0x040004C6 RID: 1222
		public static int dungeonY;

		// Token: 0x040004C7 RID: 1223
		public static Liquid[] liquid = new Liquid[Liquid.maxLiquid];

		// Token: 0x040004C8 RID: 1224
		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[50000];

		/// <summary> True on the server process, false on the client. Use this to selectively run code on server or client, such as loading texture assets.
		/// <para /> <see cref="F:Terraria.Main.dedServ" /> is the same as <c><see cref="F:Terraria.Main.netMode" /> == <see cref="F:Terraria.ID.NetmodeID.Server" /></c>. </summary>
		// Token: 0x040004C9 RID: 1225
		public static bool dedServ;

		// Token: 0x040004CA RID: 1226
		public static int spamCount = 0;

		// Token: 0x040004CB RID: 1227
		public static int curMusic;

		// Token: 0x040004CC RID: 1228
		public static int dayMusic;

		// Token: 0x040004CD RID: 1229
		public static int ugMusic;

		// Token: 0x040004CE RID: 1230
		public static int newMusic;

		// Token: 0x040004CF RID: 1231
		public static bool showItemText = true;

		// Token: 0x040004D0 RID: 1232
		public static bool autoSave = true;

		// Token: 0x040004D1 RID: 1233
		public static bool validateSaves = true;

		// Token: 0x040004D2 RID: 1234
		public static bool bannerMouseOver;

		// Token: 0x040004D3 RID: 1235
		public static string buffString = "";

		// Token: 0x040004D4 RID: 1236
		public static string libPath = "";

		// Token: 0x040004D5 RID: 1237
		public static int lo;

		// Token: 0x040004D6 RID: 1238
		public static int LogoA = 255;

		// Token: 0x040004D7 RID: 1239
		public static int LogoB;

		// Token: 0x040004D8 RID: 1240
		public static bool LogoT;

		// Token: 0x040004D9 RID: 1241
		private static string _statusText = "";

		// Token: 0x040004DA RID: 1242
		public static string worldName = "";

		// Token: 0x040004DB RID: 1243
		public static int worldID;

		// Token: 0x040004DC RID: 1244
		public static int background;

		// Token: 0x040004DD RID: 1245
		public static int caveBackground = 0;

		// Token: 0x040004DE RID: 1246
		public static float ugBackTransition;

		// Token: 0x040004DF RID: 1247
		public static Color tileColor;

		/// <summary>
		/// The y-coordinate of the top of the dirt layer, in tile coordinates. Corresponds to 0' on the Depth Meter.
		/// </summary>
		/// <remarks>Players under the surface will have <see cref="P:Terraria.Player.ZoneDirtLayerHeight" /> set to <see langword="true" />.</remarks>
		// Token: 0x040004E0 RID: 1248
		public static double worldSurface;

		/// <summary>
		/// The y-coordinate of the top of the caverns layer, in tile coordinates.
		/// </summary>
		/// <remarks>Players in this layer will have <see cref="P:Terraria.Player.ZoneRockLayerHeight" /> set to <see langword="true" />.</remarks>
		// Token: 0x040004E1 RID: 1249
		public static double rockLayer;

		// Token: 0x040004E2 RID: 1250
		public static Color[] teamColor = new Color[6];

		// Token: 0x040004E3 RID: 1251
		public const double dayLength = 54000.0;

		// Token: 0x040004E4 RID: 1252
		public const double nightLength = 32400.0;

		/// <summary>
		/// True during the day hours (4:30 AM to 7:30 PM), false during night hours (7:30 PM to 4:30 AM). In conjunction with <see cref="F:Terraria.Main.time" /> these represent the in-game time of the world.
		/// <para /> Note that <see cref="M:Terraria.Main.IsItDay" /> additionally takes into account the constant night state of <see cref="F:Terraria.Main.remixWorld" /> worlds and should be used instead for logic taking into account the state of the world rather the specific hour. Some examples include boss spawners and boss despawn behaviors.
		/// </summary>
		// Token: 0x040004E5 RID: 1253
		public static bool dayTime = true;

		/// <summary>
		/// The time that has passed since it last became day/night.
		/// <br /> Increased by <see cref="F:Terraria.Main.dayRate" /> every tick.
		/// <br /> If it is <see cref="F:Terraria.Main.dayTime" />, this caps at <see cref="F:Terraria.Main.dayLength" />. Otherwise, this caps at <see cref="F:Terraria.Main.nightLength" />.
		/// </summary>
		/// <remarks>
		/// If you need 24-hour time, use <see cref="M:Terraria.Utils.GetDayTimeAs24FloatStartingFromMidnight" />.
		/// </remarks>
		// Token: 0x040004E6 RID: 1254
		public static double time = 13500.0;

		// Token: 0x040004E7 RID: 1255
		public static double timeForVisualEffects;

		/// <summary> The current <see href="https://terraria.wiki.gg/wiki/Moon_phase">moon phase</see> expressed as an int. Use <see cref="M:Terraria.Main.GetMoonPhase" /> to get the moon phase as a <see cref="T:Terraria.Enums.MoonPhase" /> instead. </summary>
		// Token: 0x040004E8 RID: 1256
		public static int moonPhase;

		// Token: 0x040004E9 RID: 1257
		public static short sunModY;

		// Token: 0x040004EA RID: 1258
		public static short moonModY;

		// Token: 0x040004EB RID: 1259
		public static bool alreadyGrabbingSunOrMoon;

		/// <summary> If true a <see href="https://terraria.wiki.gg/wiki/Blood_Moon">Blood Moon</see> is currently happening. </summary>
		// Token: 0x040004EC RID: 1260
		public static bool bloodMoon;

		/// <summary> If true a <see href="https://terraria.wiki.gg/wiki/Pumpkin_Moon">Pumpkin Moon</see> is currently happening. </summary>
		// Token: 0x040004ED RID: 1261
		public static bool pumpkinMoon;

		/// <summary> If true a <see href="https://terraria.wiki.gg/wiki/Frost_Moon">Frost Moon</see> is currently happening. </summary>
		// Token: 0x040004EE RID: 1262
		public static bool snowMoon;

		// Token: 0x040004EF RID: 1263
		public static float cloudAlpha;

		// Token: 0x040004F0 RID: 1264
		public static float maxRaining;

		// Token: 0x040004F1 RID: 1265
		public static float oldMaxRaining;

		// Token: 0x040004F2 RID: 1266
		public static double rainTime;

		// Token: 0x040004F3 RID: 1267
		public static bool raining;

		/// <summary> If true a <see href="https://terraria.wiki.gg/wiki/Solar_Eclipse">Solar Eclipse</see> is currently happening. </summary>
		// Token: 0x040004F4 RID: 1268
		public static bool eclipse;

		// Token: 0x040004F5 RID: 1269
		public static float eclipseLight;

		// Token: 0x040004F6 RID: 1270
		public static int checkForSpawns;

		// Token: 0x040004F7 RID: 1271
		public static int helpText;

		// Token: 0x040004F8 RID: 1272
		public static int BartenderHelpTextIndex = 0;

		// Token: 0x040004F9 RID: 1273
		public static bool autoGen;

		// Token: 0x040004FA RID: 1274
		public static bool autoPause = false;

		/// <summary>
		/// Indicates how many frames of animation are in each projectile type spritesheet.<br />
		/// Use <see cref="F:Terraria.Projectile.frame" /> to animate the projectile.<br />
		/// The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#animationmultiple-frames">Basic Projectile Guide</see> teaches how to animate projectiles.<br />
		/// Indexed by <see cref="F:Terraria.Projectile.type" />. Defaults to 1.
		/// </summary>
		// Token: 0x040004FB RID: 1275
		public static int[] projFrames = new int[(int)ProjectileID.Count];

		/// <summary>
		/// Indicates that a projectile type is a pet or minion projectile.
		/// <para /> Affects various things such as applying the appropriate dye/shader, syncing the projectile in multiplayer, minion contact damage, and more.
		/// </summary>
		// Token: 0x040004FC RID: 1276
		public static bool[] projPet = new bool[(int)ProjectileID.Count];

		// Token: 0x040004FD RID: 1277
		public static float demonTorch = 1f;

		// Token: 0x040004FE RID: 1278
		public static int demonTorchDir = 1;

		// Token: 0x040004FF RID: 1279
		public static float martianLight = 1f;

		// Token: 0x04000500 RID: 1280
		public static int martianLightDir = 1;

		// Token: 0x04000501 RID: 1281
		public static float masterColor = 1f;

		// Token: 0x04000502 RID: 1282
		public static int masterColorDir = 1;

		// Token: 0x04000503 RID: 1283
		public static bool placementPreview = true;

		// Token: 0x04000504 RID: 1284
		public static SceneMetrics SceneMetrics;

		// Token: 0x04000505 RID: 1285
		public const int maxStars = 400;

		// Token: 0x04000506 RID: 1286
		public static int numStars;

		// Token: 0x04000507 RID: 1287
		public const int maxStarTypes = 4;

		// Token: 0x04000508 RID: 1288
		public const int maxClouds = 200;

		// Token: 0x04000509 RID: 1289
		public static int weatherCounter;

		// Token: 0x0400050A RID: 1290
		public static int numClouds = 200;

		// Token: 0x0400050B RID: 1291
		public static int numCloudsTemp = Main.numClouds;

		// Token: 0x0400050C RID: 1292
		public static float windSpeedCurrent;

		// Token: 0x0400050D RID: 1293
		public static float windSpeedTarget;

		// Token: 0x0400050E RID: 1294
		public static int windCounter;

		// Token: 0x0400050F RID: 1295
		public static int extremeWindCounter;

		// Token: 0x04000510 RID: 1296
		public static bool windPhysics = false;

		// Token: 0x04000511 RID: 1297
		public static float windPhysicsStrength = 0.1f;

		// Token: 0x04000512 RID: 1298
		public static bool SettingsEnabled_TilesSwayInWind = true;

		// Token: 0x04000513 RID: 1299
		public static Cloud[] cloud = new Cloud[200];

		// Token: 0x04000514 RID: 1300
		public static bool resetClouds = true;

		// Token: 0x04000515 RID: 1301
		public static float SmoothedMushroomLightInfluence;

		// Token: 0x04000516 RID: 1302
		public static int fadeCounter;

		// Token: 0x04000517 RID: 1303
		public static float invAlpha = 1f;

		// Token: 0x04000518 RID: 1304
		public static float invDir = 1f;

		// Token: 0x04000519 RID: 1305
		[ThreadStatic]
		public static UnifiedRandom _rand;

		// Token: 0x0400051A RID: 1306
		public static bool allChestStackHover;

		// Token: 0x0400051B RID: 1307
		public static bool inventorySortMouseOver;

		// Token: 0x0400051C RID: 1308
		public static float GraveyardVisualIntensity;

		// Token: 0x0400051D RID: 1309
		public const int maxMoons = 9;

		// Token: 0x0400051E RID: 1310
		public static int moonType = 0;

		// Token: 0x0400051F RID: 1311
		public const int numTileColors = 32;

		// Token: 0x04000520 RID: 1312
		public const int numTreeStyles = 32;

		// Token: 0x04000521 RID: 1313
		public const int numberOfHairstyles = 165;

		// Token: 0x04000522 RID: 1314
		public const int maxHairStyles = 165;

		// Token: 0x04000523 RID: 1315
		public const int maxCharSelectHair = 51;

		// Token: 0x04000524 RID: 1316
		public const int maxHairOfStylistDefault = 123;

		// Token: 0x04000525 RID: 1317
		public static bool UseExperimentalFeatures;

		// Token: 0x04000526 RID: 1318
		public static string DefaultSeed = "";

		// Token: 0x04000527 RID: 1319
		public static IAudioSystem audioSystem;

		// Token: 0x04000528 RID: 1320
		public static bool[] musicNoCrossFade = new bool[Main.maxMusic];

		// Token: 0x04000529 RID: 1321
		public static float[] musicFade = new float[Main.maxMusic];

		// Token: 0x0400052A RID: 1322
		public static float musicVolume = 1f;

		// Token: 0x0400052B RID: 1323
		public static float ambientVolume = 1f;

		// Token: 0x0400052C RID: 1324
		public static float soundVolume = 1f;

		// Token: 0x0400052D RID: 1325
		public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;

		/// <summary>
		/// Indexed by <see cref="T:Terraria.ID.TileID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.TileID" />, then that tile produces light.
		/// <br /> You can set the light color for tile using <see cref="M:Terraria.ModLoader.ModBlockType.ModifyLight(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)" /> or <see cref="M:Terraria.ModLoader.GlobalBlockType.ModifyLight(System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)" />.
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x0400052E RID: 1326
		public static bool[] tileLighted = new bool[(int)TileID.Count];

		/// <summary>
		/// Indexed by <see cref="T:Terraria.ID.TileID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.TileID" />, then that tile has frames for merging with <see cref="F:Terraria.ID.TileID.Dirt" />.
		/// <br /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x0400052F RID: 1327
		public static bool[] tileMergeDirt = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, Tiles of the indexed Tile Type will be destroyed by weapons and projectiles. These tiles will also be destroyed when placing a tile at it's location, see also <see cref="F:Terraria.ID.TileID.Sets.BreakableWhenPlacing" />, which is limited to breaking this tile only by tile placement. <see cref="M:Terraria.ModLoader.ModProjectile.CanCutTiles" /> can be used to customize if a projectile should destroy tiles with this property.
		/// <br /><br /> Defaults to false.
		/// </summary>
		// Token: 0x04000530 RID: 1328
		public static bool[] tileCut = new bool[(int)TileID.Count];

		// Token: 0x04000531 RID: 1329
		public static bool[] tileAlch = new bool[(int)TileID.Count];

		/// <summary>
		/// How rarely tiny ambient dust appear from this tile. Larger values mean less frequently
		/// </summary>
		// Token: 0x04000532 RID: 1330
		public static int[] tileShine = new int[(int)TileID.Count];

		/// <summary>
		/// If true, the tile will be drawn to be slightly more bright. 
		/// </summary>
		// Token: 0x04000533 RID: 1331
		public static bool[] tileShine2 = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, the wall is considered "safe" for enemy spawning purposes.
		/// </summary>
		// Token: 0x04000534 RID: 1332
		public static bool[] wallHouse = new bool[(int)WallID.Count];

		// Token: 0x04000535 RID: 1333
		public static bool[] wallDungeon = new bool[(int)WallID.Count];

		/// <summary>
		/// If true, light flows in from the background, such as fences and glass.
		/// </summary>
		// Token: 0x04000536 RID: 1334
		public static bool[] wallLight = new bool[(int)WallID.Count];

		/// <summary>
		/// Set to a wall type to "blend" with that wall. All walls sharing the same value are considered to be the same wall type when blending. By default, a faint black line is drawn between walls of different types to transition between them. Walls that blend will not have this line drawn. 
		/// <br /><br /> This is most commonly used to blend safe and unsafe wall variants, although there are some exceptions. All variants that should blend together should set this to a common shared base variant. The base variant does not need to set this. For example, <see cref="F:Terraria.ID.WallID.GreenDungeonUnsafe" />, <see cref="F:Terraria.ID.WallID.GreenDungeonTileUnsafe" />, and <see cref="F:Terraria.ID.WallID.GreenDungeonSlabUnsafe" /> all set this to <see cref="F:Terraria.ID.WallID.GreenDungeon" /> allowing all 4 wall types to be considered to be <see cref="F:Terraria.ID.WallID.GreenDungeon" /> and blend together.
		/// <br /><br /> Defaults to it's own wall type, meaning it does not blend with any other wall (unless another wall is set to this wall's type.
		/// </summary>
		// Token: 0x04000537 RID: 1335
		public static int[] wallBlend = new int[(int)WallID.Count];

		// Token: 0x04000538 RID: 1336
		public static bool[] tileStone = new bool[(int)TileID.Count];

		/// <summary>
		/// If true for the given tile type, tiles of the type are mined using an axe instead of pickaxe.
		/// <para /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x04000539 RID: 1337
		public static bool[] tileAxe = new bool[(int)TileID.Count];

		// Token: 0x0400053A RID: 1338
		public static bool[] tileHammer = new bool[(int)TileID.Count];

		/// <summary>
		/// If true for the given tile type, tiles of the type will be destroyed if in contact with water. <see cref="P:Terraria.ObjectData.TileObjectData.WaterDeath" /> supersedes this if a <see cref="T:Terraria.ObjectData.TileObjectData" /> is available.
		/// </summary>
		// Token: 0x0400053B RID: 1339
		public static bool[] tileWaterDeath = new bool[(int)TileID.Count];

		/// <summary>
		/// If true for the given tile type, tiles of the type will be destroyed if in contact with lava. <see cref="P:Terraria.ObjectData.TileObjectData.LavaDeath" /> supersedes this if a <see cref="T:Terraria.ObjectData.TileObjectData" /> is available. Use <see cref="F:Terraria.Main.tileObsidianKill" /> instead if the tile should only be killed by obsidian forming over it.
		/// <para /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x0400053C RID: 1340
		public static bool[] tileLavaDeath = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, this tile type will be considered a table for the purposes of tile placement. Tiles such as <see cref="F:Terraria.ID.TileID.Tables" /> and <see cref="F:Terraria.ID.TileID.WorkBenches" /> set this. Some tiles such as <see cref="F:Terraria.ID.TileID.PiggyBank" />, <see cref="F:Terraria.ID.TileID.Bowls" />, and <see cref="F:Terraria.ID.TileID.Candles" /> can only be placed on tiles designated as a Table.
		/// <para /> Note that a separate system is used for counting a tile as a table for housing purposes. Use <c>AddToArray(ref TileID.Sets.RoomNeeds.CountsAsTable);</c> in a ModTile class to designate the tile as a table.
		/// </summary>
		// Token: 0x0400053D RID: 1341
		public static bool[] tileTable = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, light is blocked by this tile and the light values will decrease as it passes through. Most <see cref="F:Terraria.Main.tileSolid" /> tiles will set this to true. <see cref="F:Terraria.ID.TileID.Glass" /> is an example of a tile that is solid but doesn't block light.
		/// </summary>
		// Token: 0x0400053E RID: 1342
		public static bool[] tileBlockLight = new bool[(int)TileID.Count];

		// Token: 0x0400053F RID: 1343
		public static bool[] tileNoSunLight = new bool[(int)TileID.Count];

		// Token: 0x04000540 RID: 1344
		public static bool[] tileDungeon = new bool[(int)TileID.Count];

		/// <summary>
		/// If true for the given tile type, tiles will be drawn much brighter and give off additional dust if the player is under the effects of the Spelunker buff, magic lantern, or similar effect. 
		/// </summary>
		// Token: 0x04000541 RID: 1345
		public static bool[] tileSpelunker = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, this tile can be stood on despite not being <see cref="F:Terraria.Main.tileSolid" />. The player can pass down through the tile by pressing down. <see cref="F:Terraria.ID.TileID.Tables" />, <see cref="F:Terraria.ID.TileID.Anvils" />, and <see cref="F:Terraria.ID.TileID.Platforms" /> are some example.
		/// </summary>
		// Token: 0x04000542 RID: 1346
		public static bool[] tileSolidTop = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, this tile will be solid (unless <see cref="F:Terraria.Main.tileSolidTop" /> is also true). Projectiles will collide with it and NPC and Players can stand on it and collide with it. Typical terrain tiles such as <see cref="F:Terraria.ID.TileID.Stone" /> and <see cref="F:Terraria.ID.TileID.Demonite" /> set this. Other examples include <see cref="F:Terraria.ID.TileID.ClosedDoor" /> and <see cref="F:Terraria.ID.TileID.Boulder" />
		/// <para /> The <see href="https://terraria.wiki.gg/wiki/Placement">wiki</see> refers to tiles with tileSolid set to true as "solid" tiles and those with tileSolid set to false as "background" tiles.
		/// </summary>
		// Token: 0x04000543 RID: 1347
		public static bool[] tileSolid = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, this tile negates <see href="https://terraria.wiki.gg/wiki/Fall_damage#Tiles">fall damage</see> and causes the player to bounce when landed on. Vanilla entries include PinkSlimeBlock, SillyBalloonPink, SillyBalloonPurple, and SillyBalloonGreen. Defaults to false.
		/// <para /> See also <see cref="F:Terraria.ID.TileID.Sets.NegatesFallDamage" />.
		/// </summary>
		// Token: 0x04000544 RID: 1348
		public static bool[] tileBouncy = new bool[(int)TileID.Count];

		/// <summary>
		/// The priority of this tile in relation to the Metal Detector. The tile with the highest priority in range will show the corresponding map entry. The <see href="https://terraria.wiki.gg/wiki/Metal_Detector">Metal Detector wiki page</see> lists existing values to use as reference. <see href="https://terraria.wiki.gg/wiki/Fairies">Fairies</see> leading to treasure also take this into account.
		/// </summary>
		// Token: 0x04000545 RID: 1349
		public static short[] tileOreFinderPriority = new short[(int)TileID.Count];

		/// <summary>
		/// When set to 1 or 2, this tile will use a tiled pattern for the tile variation rather than the random <see cref="P:Terraria.Tile.TileFrameNumber" /> choice (The info below counts from 1 rather than 0 for illustrative purposes). Only applicable to terrain/framed tiles. Defaults to 0.
		/// <para /> A value of 1 results in a 3x4 pattern used by Smoothe Marble Block (<see cref="F:Terraria.ID.TileID.MarbleBlock" />) and others: <code>2 4 2
		/// 1 3 1
		/// 2 2 4
		/// 1 1 3 </code>
		/// <para /> A value of 2 results in a 2x2 pattern used by Lunar Rust Brick (<see cref="F:Terraria.ID.TileID.LunarBrick" />) and others:<code>1 2
		/// 3 4 </code>
		/// The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Tile#custom-tile-variation">Basic Tile wiki guide</see> has diagrams of these options.
		/// </summary>
		// Token: 0x04000546 RID: 1350
		public static byte[] tileLargeFrames = new byte[(int)TileID.Count];

		/// <summary>
		/// When set to 1 or 2, this wall will use a tiled pattern for the wall variation rather than the random <see cref="P:Terraria.Tile.WallFrameNumber" /> choice (The info below counts from 1 rather than 0 for illustrative purposes). Defaults to 0.
		/// <para /> A value of 1 ("Phlebas") results in a 3x4 pattern used by Copper Plating Wall (<see cref="F:Terraria.ID.WallID.CopperPlating" />) and others: <code>2 4 2
		/// 1 3 1
		/// 2 2 4
		/// 1 1 3 </code>
		/// <para /> A value of 2 ("Lazure") results in a 2x2 pattern used by Lunar Brick Wall (<see cref="F:Terraria.ID.WallID.LunarBrickWall" />) and others:<code>1 2
		/// 3 4 </code>
		/// The <see href="https://github.com/tModLoader/tModLoader/wiki/Wall#texture">Wall wiki guide</see> has diagrams of these options.
		/// </summary>
		// Token: 0x04000547 RID: 1351
		public static byte[] wallLargeFrames = new byte[(int)WallID.Count];

		// Token: 0x04000548 RID: 1352
		public static bool[] tileRope = new bool[(int)TileID.Count];

		// Token: 0x04000549 RID: 1353
		public static bool[] tileBrick = new bool[(int)TileID.Count];

		// Token: 0x0400054A RID: 1354
		public static bool[] tileMoss = new bool[(int)TileID.Count];

		/// <summary>
		/// If true, tiles can't be attached to this tile. Furniture tiles typically set this. A good rule of thumb is to set this to true if placing a torch on this tile would look strange. 
		/// </summary>
		// Token: 0x0400054B RID: 1355
		public static bool[] tileNoAttach = new bool[(int)TileID.Count];

		// Token: 0x0400054C RID: 1356
		public static bool[] tileNoFail = new bool[(int)TileID.Count];

		// Token: 0x0400054D RID: 1357
		public static bool[] tileCracked = new bool[(int)TileID.Count];

		/// <summary>
		/// If true for the given tile type, tiles of the type will be destroyed if obsidian would generate at it's location because of lava and water mixing. Automatically set to true if <see cref="F:Terraria.Main.tileLavaDeath" /> is true. Many tiles are immune to lava but break if obsidian kills it, such as Statues and Anvils.
		/// <para /> Defaults to <see langword="false" />.
		/// </summary>
		// Token: 0x0400054E RID: 1358
		public static bool[] tileObsidianKill = new bool[(int)TileID.Count];

		/// <summary> Set to true if this is not a typical Terrain tile. Terrain tiles are 1x1 tiles that automatically adjust their frame values to nearby tiles. They don't have a TileObjectData.
		/// <br /> All non-1x1 tiles should set this to true. All 1x1 tiles that have a TileObjectData or that should preserve frame data should set this to true. </summary>
		// Token: 0x0400054F RID: 1359
		public static bool[] tileFrameImportant = new bool[(int)TileID.Count];

		// Token: 0x04000550 RID: 1360
		public static bool[] tilePile = new bool[(int)TileID.Count];

		// Token: 0x04000551 RID: 1361
		public static bool[] tileBlendAll = new bool[(int)TileID.Count];

		// Token: 0x04000552 RID: 1362
		public static short[] tileGlowMask = new short[(int)TileID.Count];

		/// <summary>
		/// Indicates that this tile contains items. All chests and dressers need to set this to save and load chest contents. <see cref="F:Terraria.ID.TileID.Sets.IsAContainer" /> should also be set in tandem.
		/// </summary>
		// Token: 0x04000553 RID: 1363
		public static bool[] tileContainer = new bool[(int)TileID.Count];

		/// <summary>
		/// Indicates that a tile is a "sign" and will be paired with a <see cref="T:Terraria.Sign" /> instance. Right click, hover, saving, and network syncing behaviors are all handled automatically. Note that signs are expected to be 2x2 tiles with pixel dimensions 36x36 and will likely not work correctly for other dimensions.
		/// <para /> Be sure to also set <see cref="F:Terraria.ID.TileID.Sets.TileInteractRead" />.
		/// <para /> Defaults to false.
		/// </summary>
		// Token: 0x04000554 RID: 1364
		public static bool[] tileSign = new bool[(int)TileID.Count];

		// Token: 0x04000555 RID: 1365
		public static bool[][] tileMerge = new bool[(int)TileID.Count][];

		// Token: 0x04000556 RID: 1366
		public static int cageFrames = 25;

		// Token: 0x04000557 RID: 1367
		public static bool critterCage;

		// Token: 0x04000558 RID: 1368
		public static int[] bunnyCageFrame = new int[Main.cageFrames];

		// Token: 0x04000559 RID: 1369
		public static int[] bunnyCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400055A RID: 1370
		public static int[] squirrelCageFrame = new int[Main.cageFrames];

		// Token: 0x0400055B RID: 1371
		public static int[] squirrelCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400055C RID: 1372
		public static int[] squirrelCageFrameOrange = new int[Main.cageFrames];

		// Token: 0x0400055D RID: 1373
		public static int[] squirrelCageFrameCounterOrange = new int[Main.cageFrames];

		// Token: 0x0400055E RID: 1374
		public static int[] mallardCageFrame = new int[Main.cageFrames];

		// Token: 0x0400055F RID: 1375
		public static int[] mallardCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000560 RID: 1376
		public static int[] duckCageFrame = new int[Main.cageFrames];

		// Token: 0x04000561 RID: 1377
		public static int[] duckCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000562 RID: 1378
		public static int[] grebeCageFrame = new int[Main.cageFrames];

		// Token: 0x04000563 RID: 1379
		public static int[] grebeCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000564 RID: 1380
		public static int[] seagullCageFrame = new int[Main.cageFrames];

		// Token: 0x04000565 RID: 1381
		public static int[] seagullCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000566 RID: 1382
		public static int[] birdCageFrame = new int[Main.cageFrames];

		// Token: 0x04000567 RID: 1383
		public static int[] birdCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000568 RID: 1384
		public static int[] redBirdCageFrame = new int[Main.cageFrames];

		// Token: 0x04000569 RID: 1385
		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400056A RID: 1386
		public static int[] blueBirdCageFrame = new int[Main.cageFrames];

		// Token: 0x0400056B RID: 1387
		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400056C RID: 1388
		public static int[] macawCageFrame = new int[Main.cageFrames];

		// Token: 0x0400056D RID: 1389
		public static int[] macawCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400056E RID: 1390
		public static byte[,] butterflyCageMode = new byte[9, Main.cageFrames];

		// Token: 0x0400056F RID: 1391
		public static int[,] butterflyCageFrame = new int[9, Main.cageFrames];

		// Token: 0x04000570 RID: 1392
		public static int[,] butterflyCageFrameCounter = new int[9, Main.cageFrames];

		// Token: 0x04000571 RID: 1393
		public static int[,] dragonflyJarFrameCounter = new int[7, Main.cageFrames];

		// Token: 0x04000572 RID: 1394
		public static int[,] dragonflyJarFrame = new int[7, Main.cageFrames];

		// Token: 0x04000573 RID: 1395
		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];

		// Token: 0x04000574 RID: 1396
		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];

		// Token: 0x04000575 RID: 1397
		public static int[] snailCageFrame = new int[Main.cageFrames];

		// Token: 0x04000576 RID: 1398
		public static int[] snailCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000577 RID: 1399
		public static int[] snail2CageFrame = new int[Main.cageFrames];

		// Token: 0x04000578 RID: 1400
		public static int[] snail2CageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000579 RID: 1401
		public static byte[] fishBowlFrameMode = new byte[Main.cageFrames];

		// Token: 0x0400057A RID: 1402
		public static int[] fishBowlFrame = new int[Main.cageFrames];

		// Token: 0x0400057B RID: 1403
		public static int[] fishBowlFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400057C RID: 1404
		public static int[] lavaFishBowlFrame = new int[Main.cageFrames];

		// Token: 0x0400057D RID: 1405
		public static int[] lavaFishBowlFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400057E RID: 1406
		public static int[] frogCageFrame = new int[Main.cageFrames];

		// Token: 0x0400057F RID: 1407
		public static int[] frogCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000580 RID: 1408
		public static int[] mouseCageFrame = new int[Main.cageFrames];

		// Token: 0x04000581 RID: 1409
		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000582 RID: 1410
		public static int[] turtleCageFrame = new int[Main.cageFrames];

		// Token: 0x04000583 RID: 1411
		public static int[] turtleCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000584 RID: 1412
		public static int[] fairyJarFrame = new int[Main.cageFrames];

		// Token: 0x04000585 RID: 1413
		public static int[] fairyJarFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000586 RID: 1414
		public static byte[,] jellyfishCageMode = new byte[3, Main.cageFrames];

		// Token: 0x04000587 RID: 1415
		public static int[,] jellyfishCageFrame = new int[3, Main.cageFrames];

		// Token: 0x04000588 RID: 1416
		public static int[,] jellyfishCageFrameCounter = new int[3, Main.cageFrames];

		// Token: 0x04000589 RID: 1417
		public static int[] wormCageFrame = new int[Main.cageFrames];

		// Token: 0x0400058A RID: 1418
		public static int[] wormCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400058B RID: 1419
		public static int[] maggotCageFrame = new int[Main.cageFrames];

		// Token: 0x0400058C RID: 1420
		public static int[] maggotCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400058D RID: 1421
		public static int[] ratCageFrame = new int[Main.cageFrames];

		// Token: 0x0400058E RID: 1422
		public static int[] ratCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400058F RID: 1423
		public static int[] ladybugCageFrame = new int[Main.cageFrames];

		// Token: 0x04000590 RID: 1424
		public static int[] ladybugCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000591 RID: 1425
		public static int[] penguinCageFrame = new int[Main.cageFrames];

		// Token: 0x04000592 RID: 1426
		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000593 RID: 1427
		public static int[] waterStriderCageFrame = new int[Main.cageFrames];

		// Token: 0x04000594 RID: 1428
		public static int[] waterStriderCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000595 RID: 1429
		public static int[] seahorseCageFrame = new int[Main.cageFrames];

		// Token: 0x04000596 RID: 1430
		public static int[] seahorseCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x04000597 RID: 1431
		public static int[,] slugCageFrame = new int[3, Main.cageFrames];

		// Token: 0x04000598 RID: 1432
		public static int[,] slugCageFrameCounter = new int[3, Main.cageFrames];

		// Token: 0x04000599 RID: 1433
		public static int[] owlCageFrame = new int[Main.cageFrames];

		// Token: 0x0400059A RID: 1434
		public static int[] owlCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400059B RID: 1435
		public static int[] grasshopperCageFrame = new int[Main.cageFrames];

		// Token: 0x0400059C RID: 1436
		public static int[] grasshopperCageFrameCounter = new int[Main.cageFrames];

		// Token: 0x0400059D RID: 1437
		public static bool[] tileSand = new bool[(int)TileID.Count];

		/// <summary>If true, indicates that a tile has a flame texture that will draw over the tile. Modded tiles should not use this. <see cref="M:Terraria.ModLoader.ModBlockType.PostDraw(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> can be used to manually draw a flame texture.</summary>
		// Token: 0x0400059E RID: 1438
		public static bool[] tileFlame = new bool[(int)TileID.Count];

		/// <summary>
		/// Used to denote an NPC as being catchable by bug nets and similar.<br />
		/// Contrary to its name, this array isn't actually used for catching logic at all.<br />
		/// It is instead used to determine if an NPC can be released back into the world after being caught.<br />
		/// These NPC will be forced <see cref="F:Terraria.NPC.friendly" /> for 1.5 seconds if naturally spawned.<br />
		/// </summary>
		// Token: 0x0400059F RID: 1439
		public static bool[] npcCatchable = new bool[(int)NPCID.Count];

		/// <summary>
		/// Tracks the current animation frame for a specific tile type. This value is shared for all tiles of the type. The frame parameter in <see cref="M:Terraria.ModLoader.ModTile.AnimateTile(System.Int32@,System.Int32@)" /> is equivalent to this value. Animation variation for a specific tile can be done with <see cref="M:Terraria.ModLoader.ModTile.AnimateIndividualTile(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)" />.
		/// </summary>
		// Token: 0x040005A0 RID: 1440
		public static int[] tileFrame = new int[(int)TileID.Count];

		/// <summary>
		/// Used to time how long the current animation frame for a specific tile type has been shown. This value is shared for all tiles of the type. The frameCounter parameter in <see cref="M:Terraria.ModLoader.ModTile.AnimateTile(System.Int32@,System.Int32@)" /> is equivalent to this value.
		/// </summary>
		// Token: 0x040005A1 RID: 1441
		public static int[] tileFrameCounter = new int[(int)TileID.Count];

		// Token: 0x040005A2 RID: 1442
		public static byte[] wallFrame = new byte[(int)WallID.Count];

		// Token: 0x040005A3 RID: 1443
		public static byte[] wallFrameCounter = new byte[(int)WallID.Count];

		// Token: 0x040005A4 RID: 1444
		public static int[] backgroundWidth = new int[Main.maxBackgrounds];

		// Token: 0x040005A5 RID: 1445
		public static int[] backgroundHeight = new int[Main.maxBackgrounds];

		// Token: 0x040005A6 RID: 1446
		public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();

		// Token: 0x040005A7 RID: 1447
		public static bool tilesLoaded = false;

		// Token: 0x040005A8 RID: 1448
		public static WorldMap Map;

		// Token: 0x040005A9 RID: 1449
		public static Tilemap tile = new Tilemap((ushort)Main.maxTilesX, (ushort)Main.maxTilesY);

		// Token: 0x040005AA RID: 1450
		public static Dust[] dust = new Dust[6001];

		// Token: 0x040005AB RID: 1451
		public static Star[] star = new Star[400];

		/// <summary>
		/// Contains all the <see cref="T:Terraria.Item" />s in the game world. Items should only be spawned via <see cref="M:Terraria.Item.NewItem(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)" /> or similar methods. <see cref="M:Terraria.Player.QuickSpawnItem(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32)" /> is an option that is safe to call from client code.
		/// <para /> Only entries in this array that are <see cref="F:Terraria.Entity.active" /> are relevant. The last entry is a dummy entry used for overflow and should not be accessed.
		/// <para /> Modders seeking to run logic on all items should use <see cref="P:Terraria.Main.ActiveItems" /> to iterate over the Main.item entries to easily account for inactive entries and the dummy entry.
		/// </summary>
		// Token: 0x040005AC RID: 1452
		public static Item[] item = new Item[401];

		// Token: 0x040005AD RID: 1453
		public static int[] timeItemSlotCannotBeReusedFor = new int[401];

		/// <summary>
		/// Contains all the <see cref="T:Terraria.NPC" />s in the game world. NPC are spawned via the <see cref="M:Terraria.NPC.NewNPC(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)" /> method.
		/// <para /> Only entries in this array that are <see cref="F:Terraria.Entity.active" /> are relevant. Each NPC has an <see cref="F:Terraria.Entity.whoAmI" /> corresponding to their index within Main.npc. The last entry is a dummy entry used for overflow and should not be accessed.
		/// <para /> Modders seeking to run logic on all NPCs should use <see cref="P:Terraria.Main.ActiveNPCs" /> to iterate over the Main.npc entries to easily account for inactive entries and the dummy entry.
		/// </summary>
		// Token: 0x040005AE RID: 1454
		public static NPC[] npc = new NPC[201];

		// Token: 0x040005AF RID: 1455
		public static Gore[] gore = new Gore[601];

		// Token: 0x040005B0 RID: 1456
		public static Rain[] rain = new Rain[Main.maxRain + 1];

		/// <summary>
		/// Contains all the <see cref="T:Terraria.Projectile" />s in the game world. Projectiles should only be spawned via <see cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" /> or similar methods. Projectile ordering is <b>not</b> consistent between multiplayer clients.
		/// <para /> Only entries in this array that are <see cref="F:Terraria.Entity.active" /> are relevant. Each projectile has a <see cref="F:Terraria.Entity.whoAmI" /> corresponding to their index within Main.projectile. The last entry is a dummy entry used for overflow and should not be accessed.
		/// <para /> Modders seeking to run logic on all projectiles should use <see cref="P:Terraria.Main.ActiveProjectiles" /> to iterate over the Main.projectile entries to easily account for inactive entries and the dummy entry.
		/// </summary>
		// Token: 0x040005B1 RID: 1457
		public static Projectile[] projectile = new Projectile[1001];

		// Token: 0x040005B2 RID: 1458
		public static int[,] projectileIdentity = new int[256, 1001];

		// Token: 0x040005B3 RID: 1459
		public static CombatText[] combatText = new CombatText[100];

		// Token: 0x040005B4 RID: 1460
		public static PopupText[] popupText = new PopupText[20];

		/// <summary>
		/// Contains all the placed chests in the world. This includes dressers and chests, but not player storage such as piggy bank and safe. 
		/// </summary>
		// Token: 0x040005B5 RID: 1461
		public static Chest[] chest = new Chest[8000];

		/// <summary>
		/// Contains all the signs in the world. There can be at most 1000 signs in the world.
		/// </summary>
		// Token: 0x040005B6 RID: 1462
		public static Sign[] sign = new Sign[1000];

		// Token: 0x040005B7 RID: 1463
		public static int[] itemFrame = new int[401];

		// Token: 0x040005B8 RID: 1464
		public static int[] itemFrameCounter = new int[401];

		// Token: 0x040005B9 RID: 1465
		public static DrawAnimation[] itemAnimations = new DrawAnimation[(int)ItemID.Count];

		// Token: 0x040005BA RID: 1466
		private static DrawAnimation _coinOnWorldAnimation = new DrawAnimationVertical(6, 8, false);

		// Token: 0x040005BB RID: 1467
		private static DrawAnimation _monkStaffT3OnWorldAnimation = new DrawAnimationVertical(5, 3, false);

		// Token: 0x040005BC RID: 1468
		public static List<int> itemAnimationsRegistered = new List<int>();

		/// <summary>
		/// The position of the top left corner of the screen in world coordinates. Modify in <see cref="M:Terraria.ModLoader.ModSystem.ModifyScreenPosition" /> or <see cref="M:Terraria.ModLoader.ModPlayer.ModifyScreenPosition" />. Also consider using <c>Main.instance.CameraModifiers.Add(CameraModifier);</c> as shown in ExampleMods MinionBossBody for screen shakes.<br /><br />
		/// When manually drawing, subtracting Main.screenPosition from the world position of the thing being drawn will result in the correct screen coordinates for use in <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.Draw methods. When drawing tiles or walls, an additional offset calculated as <c>Vector2 zero = Main.drawToScreen? Vector2.Zero : new Vector2(Main.offScreenRange, Main.offScreenRange);</c> needs to be added to the coordinates.
		/// </summary>
		// Token: 0x040005BD RID: 1469
		public static Vector2 screenPosition;

		// Token: 0x040005BE RID: 1470
		public static Vector2 screenLastPosition;

		// Token: 0x040005BF RID: 1471
		public static int screenWidth = 1152;

		// Token: 0x040005C0 RID: 1472
		public static int screenHeight = 864;

		// Token: 0x040005C1 RID: 1473
		public static bool screenMaximized = true;

		// Token: 0x040005C2 RID: 1474
		public static bool screenBorderless = true;

		// Token: 0x040005C3 RID: 1475
		public static int screenBorderlessPendingResizes;

		// Token: 0x040005C4 RID: 1476
		public static int teamNamePlateDistance = 2000;

		// Token: 0x040005C5 RID: 1477
		public static int multiplayerNPCSmoothingRange = 300;

		// Token: 0x040005C6 RID: 1478
		public static bool Setting_UseReducedMaxLiquids = false;

		// Token: 0x040005C7 RID: 1479
		public static int PlayerOverheadChatMessageDisplayTime = 400;

		// Token: 0x040005C8 RID: 1480
		public static object CurrentInputTextTakerOverride;

		// Token: 0x040005C9 RID: 1481
		public static bool drawingPlayerChat;

		// Token: 0x040005CA RID: 1482
		public static bool chatRelease;

		// Token: 0x040005CB RID: 1483
		public static string chatText = "";

		// Token: 0x040005CC RID: 1484
		public static bool inputTextEnter;

		// Token: 0x040005CD RID: 1485
		public static bool inputTextEscape;

		// Token: 0x040005CE RID: 1486
		public static float[] hotbarScale = new float[]
		{
			1f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f
		};

		/// <summary>
		/// A value that oscillates between 190 and 255. It is used to drive the slight pulsing color effect seen in much of the text shown in-game. The value is used to create <see cref="T:Microsoft.Xna.Framework.Color" />s by passing in this value as either all 4 parameters or just the alpha parameter.<br /><br />
		/// <see cref="P:Terraria.Main.MouseTextColorReal" /> can be used to access the typical pulsing white <see cref="T:Microsoft.Xna.Framework.Color" /> value.
		/// </summary>
		// Token: 0x040005CF RID: 1487
		public static byte mouseTextColor;

		// Token: 0x040005D0 RID: 1488
		public static int mouseTextColorChange = 1;

		// Token: 0x040005D1 RID: 1489
		public static bool mouseLeftRelease;

		// Token: 0x040005D2 RID: 1490
		public static bool mouseRightRelease;

		/// <summary> Indicates if the full player inventory is currently showing. </summary>
		// Token: 0x040005D3 RID: 1491
		public static bool playerInventory;

		// Token: 0x040005D4 RID: 1492
		public static int stackSplit;

		// Token: 0x040005D5 RID: 1493
		public static bool preventStackSplitReset;

		// Token: 0x040005D6 RID: 1494
		public static int stackCounter;

		// Token: 0x040005D7 RID: 1495
		public static int timesTriedToFastStack;

		// Token: 0x040005D8 RID: 1496
		public static int stackDelay = 7;

		// Token: 0x040005D9 RID: 1497
		public static int superFastStack;

		/// <summary> The item currently being carried by the mouse. </summary>
		// Token: 0x040005DA RID: 1498
		public static Item mouseItem = new Item();

		// Token: 0x040005DB RID: 1499
		public static Item guideItem = new Item();

		// Token: 0x040005DC RID: 1500
		public static Item reforgeItem = new Item();

		// Token: 0x040005DD RID: 1501
		public static float inventoryScale = 0.75f;

		// Token: 0x040005DE RID: 1502
		public static bool hasFocus;

		// Token: 0x040005DF RID: 1503
		public static Point rulerLineDisplayValues = default(Point);

		// Token: 0x040005E0 RID: 1504
		public static bool recFastScroll;

		// Token: 0x040005E1 RID: 1505
		public static bool recBigList;

		// Token: 0x040005E2 RID: 1506
		public static int recStart;

		/// <summary>
		/// Contains all the <see cref="T:Terraria.Recipe" /> in the game. Be sure to read <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Recipes">the Basic Recipes wiki page</see> to learn how to create and edit recipes.
		/// <para /> Modders should not attempt to manually edit Main.recipe, doing so will break things. Recipes can be disabled or edited but should not be removed. Recipe ordering can be done through the sort methods, such as <see cref="M:Terraria.Recipe.SortBefore(Terraria.Recipe)" />. Main.recipe is populated during mod loading and should not be changed in-game. Dynamic recipe availability is done through recipe conditions. 
		/// </summary>
		// Token: 0x040005E3 RID: 1507
		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];

		/// <summary>
		/// Contains recipe indexes (<see cref="P:Terraria.Recipe.RecipeIndex" />) of the recipes currently being shown in the UI, either for crafting or a Guide query.
		/// </summary>
		// Token: 0x040005E4 RID: 1508
		public static int[] availableRecipe = new int[Recipe.maxRecipes];

		// Token: 0x040005E5 RID: 1509
		public static float[] availableRecipeY = new float[Recipe.maxRecipes];

		/// <summary>
		/// The count of Recipes being shown. The length of <see cref="F:Terraria.Main.availableRecipe" />.
		/// </summary>
		// Token: 0x040005E6 RID: 1510
		public static int numAvailableRecipes;

		/// <summary>
		/// An index into <see cref="F:Terraria.Main.availableRecipe" /> indicating the currently selected Recipe.
		/// </summary>
		// Token: 0x040005E7 RID: 1511
		public static int focusRecipe;

		/// <summary>
		/// The index in <see cref="F:Terraria.Main.player" /> of this client's Player.
		/// <br /> If this is <c>255</c>, this client is the server.
		/// <para /> <see cref="P:Terraria.Main.LocalPlayer" /> is shorthand for <c>Main.player[Main.myPlayer]</c> and retrieves the local Player object.
		/// </summary>
		// Token: 0x040005E8 RID: 1512
		public static int myPlayer;

		/// <summary>
		/// Contains all the <see cref="T:Terraria.Player" />s in the game world.
		/// <para /> Only entries in this array that are <see cref="F:Terraria.Entity.active" /> are relevant. Each player has a <see cref="F:Terraria.Entity.whoAmI" /> corresponding to their index within Main.player. <see cref="F:Terraria.Main.myPlayer" /> is the index of the local player as well. The last entry is a dummy entry used for server operations and should not be accessed.
		/// <para /> Modders seeking to run logic on all players should use <see cref="P:Terraria.Main.ActivePlayers" /> to iterate over the Main.player entries to easily account for inactive entries and the dummy entry.
		/// </summary>
		// Token: 0x040005E9 RID: 1513
		public static Player[] player = new Player[256];

		// Token: 0x040005EA RID: 1514
		public static Player[] playerVisualClone = new Player[256];

		// Token: 0x040005EB RID: 1515
		public static bool[] countsAsHostForGameplay = new bool[256];

		/// <summary>
		/// The x tile coordinate of the default spawn location of the world. Players without a bed spawn point (<see cref="F:Terraria.Player.SpawnX" />) will spawn at this location and invasions will target this location.
		/// </summary>
		// Token: 0x040005EC RID: 1516
		public static int spawnTileX;

		/// <summary>
		/// The y tile coordinate of the default spawn location of the world. Players without a bed spawn point (<see cref="F:Terraria.Player.SpawnY" />) will spawn at this location and invasions will target this location.
		/// </summary>
		// Token: 0x040005ED RID: 1517
		public static int spawnTileY;

		// Token: 0x040005EE RID: 1518
		public static bool npcChatRelease;

		// Token: 0x040005EF RID: 1519
		public static bool editSign;

		// Token: 0x040005F0 RID: 1520
		public static bool editChest;

		// Token: 0x040005F1 RID: 1521
		public static bool blockInput = false;

		// Token: 0x040005F2 RID: 1522
		public static string blockKey = 0.ToString();

		// Token: 0x040005F3 RID: 1523
		public static string defaultChestName = string.Empty;

		// Token: 0x040005F4 RID: 1524
		public static string npcChatText = "";

		// Token: 0x040005F5 RID: 1525
		public static bool npcChatFocus1;

		// Token: 0x040005F6 RID: 1526
		public static bool npcChatFocus2;

		// Token: 0x040005F7 RID: 1527
		public static bool npcChatFocus3;

		// Token: 0x040005F8 RID: 1528
		public static bool npcChatFocus4;

		// Token: 0x040005F9 RID: 1529
		public static int oldNPCShop;

		/// <summary>
		/// The item type of the item icon to display at the bottom right corner of the NPC chat window. The Angler uses this functionality to display the fishing quest fish item, but it can be used to show any item. Assign during <see cref="M:Terraria.ModLoader.ModNPC.GetChat" />. Defaults to 0.
		/// </summary>
		// Token: 0x040005FA RID: 1530
		public static int npcChatCornerItem;

		// Token: 0x040005FB RID: 1531
		public Chest[] shop = new Chest[2];

		// Token: 0x040005FC RID: 1532
		public static ItemShopSellbackHelper shopSellbackHelper = new ItemShopSellbackHelper();

		// Token: 0x040005FD RID: 1533
		public static int[] travelShop = new int[40];

		// Token: 0x040005FE RID: 1534
		public static List<string> anglerWhoFinishedToday = new List<string>();

		// Token: 0x040005FF RID: 1535
		public static bool anglerQuestFinished;

		/// <summary> The index of the current Angler Quest item within <see cref="F:Terraria.Main.anglerQuestItemNetIDs" />. </summary>
		// Token: 0x04000600 RID: 1536
		public static int anglerQuest;

		/// <summary> The Angler Quest item options. The current quest is contained in <see cref="F:Terraria.Main.anglerQuest" />. </summary>
		// Token: 0x04000601 RID: 1537
		public static int[] anglerQuestItemNetIDs = new int[]
		{
			2450,
			2451,
			2452,
			2453,
			2454,
			2455,
			2456,
			2457,
			2458,
			2459,
			2460,
			2461,
			2462,
			2463,
			2464,
			2465,
			2466,
			2467,
			2468,
			2469,
			2470,
			2471,
			2472,
			2473,
			2474,
			2475,
			2476,
			2477,
			2478,
			2479,
			2480,
			2481,
			2482,
			2483,
			2484,
			2485,
			2486,
			2487,
			2488,
			4393,
			4394
		};

		// Token: 0x04000602 RID: 1538
		public static AmbienceServer AmbienceServer;

		// Token: 0x04000603 RID: 1539
		public static ItemDropDatabase ItemDropsDB;

		// Token: 0x04000604 RID: 1540
		public static BestiaryDatabase BestiaryDB;

		// Token: 0x04000605 RID: 1541
		public static ItemDropResolver ItemDropSolver;

		// Token: 0x04000606 RID: 1542
		public static BestiaryUnlocksTracker BestiaryTracker;

		// Token: 0x04000607 RID: 1543
		public static UIBestiaryTest BestiaryUI;

		// Token: 0x04000608 RID: 1544
		public static TeleportPylonsSystem PylonSystem;

		// Token: 0x04000609 RID: 1545
		public static ShopHelper ShopHelper;

		// Token: 0x0400060A RID: 1546
		public static GolfState LocalGolfState = new GolfState();

		// Token: 0x0400060B RID: 1547
		public static DroneCameraTracker DroneCameraTracker = new DroneCameraTracker();

		// Token: 0x0400060C RID: 1548
		public static WorkshopPublishingIndicator WorkshopPublishingIndicator = new WorkshopPublishingIndicator();

		// Token: 0x0400060D RID: 1549
		public static IssueReportsIndicator IssueReporterIndicator = new IssueReportsIndicator();

		// Token: 0x0400060E RID: 1550
		public static bool Support4K = true;

		// Token: 0x0400060F RID: 1551
		public static float MinimumZoomComparerX = 1920f;

		// Token: 0x04000610 RID: 1552
		public static float MinimumZoomComparerY = 1200f;

		// Token: 0x04000611 RID: 1553
		private static int _renderTargetMaxSize = 2048;

		// Token: 0x04000612 RID: 1554
		private static GraphicsProfile _selectedGraphicsProfile = (!Program.IsXna) ? 1 : 0;

		// Token: 0x04000613 RID: 1555
		private static GraphicsProfile _currentGraphicsProfile = Main._selectedGraphicsProfile;

		// Token: 0x04000614 RID: 1556
		public static int LogicCheckScreenWidth = 1920;

		// Token: 0x04000615 RID: 1557
		public static int LogicCheckScreenHeight = 1200;

		// Token: 0x04000616 RID: 1558
		private static Main.WorldPreparationState _worldPreparationState = Main.WorldPreparationState.AwaitingData;

		// Token: 0x04000617 RID: 1559
		public static float temporaryGUIScaleSlider = -1f;

		// Token: 0x04000618 RID: 1560
		public static bool temporaryGUIScaleSliderUpdate = false;

		// Token: 0x04000619 RID: 1561
		public static bool InGuideCraftMenu;

		// Token: 0x0400061A RID: 1562
		public static bool InReforgeMenu;

		/// <summary>
		/// The item to be displayed as an item tooltip. Set to a <see cref="M:Terraria.Item.Clone" /> of an existing item instance. Needs to be set in conjunction with <see cref="F:Terraria.Main.hoverItemName" /> to work, although the <see cref="P:Terraria.Item.HoverName" /> will actually be shown. Use <see cref="M:Terraria.Item.SetNameOverride(System.String)" /> to customize the item name shown.
		/// </summary>
		// Token: 0x0400061B RID: 1563
		public static Item HoverItem = new Item();

		// Token: 0x0400061C RID: 1564
		private static int backSpaceCount;

		// Token: 0x0400061D RID: 1565
		private static float backSpaceRate;

		// Token: 0x0400061E RID: 1566
		public static string motd = "";

		// Token: 0x0400061F RID: 1567
		public static bool toggleFullscreen;

		// Token: 0x04000620 RID: 1568
		public static int numDisplayModes;

		// Token: 0x04000621 RID: 1569
		public static int[] displayWidth = new int[99];

		// Token: 0x04000622 RID: 1570
		public static int[] displayHeight = new int[99];

		/// <summary>
		/// If true, the game is currently in the main menus. If false the game is in the game world.
		/// </summary>
		// Token: 0x04000623 RID: 1571
		public static bool gameMenu = true;

		// Token: 0x04000624 RID: 1572
		public static bool menuBGChangedDay = false;

		// Token: 0x04000625 RID: 1573
		public static bool menuBGChangedNight = false;

		// Token: 0x04000626 RID: 1574
		public static bool lockMenuBGChange = false;

		// Token: 0x04000627 RID: 1575
		private static int maxLoadPlayer = 1000;

		// Token: 0x04000628 RID: 1576
		private static int maxLoadWorld = 1000;

		// Token: 0x04000629 RID: 1577
		public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();

		// Token: 0x0400062A RID: 1578
		public static PlayerFileData ActivePlayerFileData = new PlayerFileData();

		// Token: 0x0400062B RID: 1579
		public static Player PendingPlayer = null;

		// Token: 0x0400062C RID: 1580
		public static List<WorldFileData> WorldList = new List<WorldFileData>();

		// Token: 0x0400062D RID: 1581
		public static WorldFileData ActiveWorldFileData = new WorldFileData();

		// Token: 0x0400062E RID: 1582
		public static string WorldPath = Path.Combine(Main.SavePath, "Worlds");

		// Token: 0x0400062F RID: 1583
		public static string CloudWorldPath = Program.SaveFolderName + "/worlds";

		// Token: 0x04000630 RID: 1584
		public static string PlayerPath = Path.Combine(Main.SavePath, "Players");

		// Token: 0x04000631 RID: 1585
		public static string CloudPlayerPath = Program.SaveFolderName + "/players";

		// Token: 0x04000632 RID: 1586
		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "config.json", false, false);

		// Token: 0x04000633 RID: 1587
		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "input profiles.json", false, false);

		// Token: 0x04000634 RID: 1588
		public static KeyboardState inputText;

		// Token: 0x04000635 RID: 1589
		public static KeyboardState oldInputText;

		// Token: 0x04000636 RID: 1590
		public static int PendingResolutionWidth = 800;

		// Token: 0x04000637 RID: 1591
		public static int PendingResolutionHeight = 600;

		// Token: 0x04000638 RID: 1592
		public static bool PendingBorderlessState;

		/// <summary>
		/// If not 0, an invasion event is currently active:
		/// <br /> If 1 (<see cref="F:Terraria.ID.InvasionID.GoblinArmy" />), a <see href="https://terraria.wiki.gg/wiki/Goblin_Army">Goblin Army</see> is happening.
		/// <br /> If 2 (<see cref="F:Terraria.ID.InvasionID.SnowLegion" />), a <see href="https://terraria.wiki.gg/wiki/Frost_Legion">Frost Legion</see> is happening.
		/// <br /> If 3 (<see cref="F:Terraria.ID.InvasionID.PirateInvasion" />), a <see href="https://terraria.wiki.gg/wiki/Pirate_Invasion">Pirate Invasion</see> is happening.
		/// <br /> If 4 (<see cref="F:Terraria.ID.InvasionID.MartianMadness" />), a <see href="https://terraria.wiki.gg/wiki/Martian_Madness">Martian Madness</see> is happening.
		/// </summary>
		// Token: 0x04000639 RID: 1593
		public static int invasionType;

		// Token: 0x0400063A RID: 1594
		public static double invasionX;

		// Token: 0x0400063B RID: 1595
		public static int invasionSize;

		// Token: 0x0400063C RID: 1596
		public static int invasionDelay;

		// Token: 0x0400063D RID: 1597
		public static int invasionWarn;

		// Token: 0x0400063E RID: 1598
		public static int invasionSizeStart;

		// Token: 0x0400063F RID: 1599
		public static bool invasionProgressNearInvasion;

		// Token: 0x04000640 RID: 1600
		public static int invasionProgressMode = 2;

		// Token: 0x04000641 RID: 1601
		public static int invasionProgressIcon;

		// Token: 0x04000642 RID: 1602
		public static int invasionProgress;

		// Token: 0x04000643 RID: 1603
		public static int invasionProgressMax;

		// Token: 0x04000644 RID: 1604
		public static int invasionProgressWave;

		// Token: 0x04000645 RID: 1605
		public static int invasionProgressDisplayLeft;

		// Token: 0x04000646 RID: 1606
		public static float invasionProgressAlpha;

		// Token: 0x04000647 RID: 1607
		public static bool HasInteractibleObjectThatIsNotATile = false;

		// Token: 0x04000648 RID: 1608
		public int currentNPCShowingChatBubble = -1;

		/// <summary>
		/// The number of animation frames this NPC's texture has. ModNPC should use <see cref="M:Terraria.ModLoader.ModNPC.FindFrame(System.Int32)" /> to adjust <c>NPC.frame.Y</c> to change the drawn frame.
		/// </summary>
		// Token: 0x04000649 RID: 1609
		public static int[] npcFrameCount = new int[]
		{
			1,
			2,
			2,
			3,
			6,
			2,
			2,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			2,
			25,
			23,
			25,
			21,
			15,
			26,
			2,
			10,
			1,
			16,
			16,
			16,
			3,
			1,
			15,
			3,
			1,
			3,
			1,
			1,
			21,
			25,
			1,
			1,
			1,
			3,
			3,
			15,
			3,
			7,
			7,
			6,
			5,
			6,
			5,
			3,
			3,
			23,
			6,
			3,
			6,
			6,
			2,
			5,
			6,
			5,
			7,
			7,
			4,
			5,
			8,
			1,
			5,
			1,
			2,
			4,
			16,
			5,
			4,
			4,
			15,
			16,
			16,
			16,
			2,
			4,
			6,
			6,
			18,
			16,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			3,
			1,
			1,
			1,
			1,
			1,
			1,
			5,
			6,
			7,
			16,
			1,
			1,
			25,
			23,
			12,
			20,
			21,
			1,
			2,
			2,
			3,
			6,
			1,
			1,
			1,
			15,
			4,
			11,
			1,
			23,
			6,
			6,
			6,
			1,
			2,
			2,
			1,
			3,
			4,
			1,
			2,
			1,
			4,
			2,
			1,
			15,
			3,
			25,
			4,
			5,
			7,
			3,
			2,
			12,
			12,
			4,
			4,
			4,
			8,
			8,
			13,
			5,
			6,
			4,
			15,
			23,
			3,
			15,
			8,
			5,
			4,
			13,
			15,
			12,
			4,
			14,
			14,
			3,
			2,
			5,
			3,
			2,
			3,
			23,
			5,
			14,
			16,
			5,
			2,
			2,
			12,
			3,
			3,
			3,
			3,
			2,
			2,
			2,
			2,
			2,
			7,
			14,
			15,
			16,
			8,
			3,
			15,
			15,
			16,
			2,
			3,
			20,
			25,
			23,
			26,
			4,
			4,
			16,
			16,
			20,
			20,
			20,
			2,
			2,
			2,
			2,
			8,
			12,
			3,
			4,
			2,
			4,
			25,
			26,
			26,
			6,
			3,
			3,
			3,
			3,
			3,
			5,
			4,
			4,
			5,
			4,
			6,
			7,
			15,
			4,
			7,
			6,
			1,
			1,
			2,
			4,
			3,
			5,
			3,
			3,
			3,
			4,
			5,
			6,
			4,
			2,
			1,
			8,
			4,
			4,
			1,
			8,
			1,
			4,
			15,
			15,
			15,
			15,
			15,
			15,
			16,
			15,
			15,
			15,
			15,
			15,
			3,
			3,
			3,
			3,
			3,
			3,
			16,
			3,
			6,
			12,
			21,
			21,
			20,
			16,
			15,
			15,
			5,
			5,
			6,
			6,
			5,
			2,
			7,
			2,
			6,
			6,
			6,
			6,
			6,
			15,
			15,
			15,
			15,
			15,
			11,
			4,
			2,
			2,
			3,
			3,
			3,
			16,
			15,
			16,
			10,
			14,
			12,
			1,
			10,
			8,
			3,
			3,
			2,
			2,
			2,
			2,
			7,
			15,
			15,
			15,
			6,
			3,
			10,
			10,
			6,
			9,
			8,
			9,
			8,
			20,
			10,
			6,
			23,
			1,
			4,
			24,
			2,
			4,
			6,
			6,
			13,
			15,
			15,
			15,
			15,
			4,
			4,
			26,
			23,
			8,
			2,
			4,
			4,
			4,
			4,
			2,
			2,
			4,
			12,
			12,
			9,
			9,
			9,
			1,
			9,
			11,
			2,
			2,
			9,
			5,
			6,
			4,
			18,
			8,
			11,
			1,
			4,
			5,
			8,
			4,
			1,
			1,
			1,
			1,
			4,
			2,
			5,
			4,
			11,
			5,
			11,
			1,
			1,
			1,
			10,
			10,
			15,
			8,
			17,
			6,
			6,
			1,
			12,
			12,
			13,
			15,
			9,
			5,
			10,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			4,
			4,
			16,
			16,
			25,
			5,
			7,
			3,
			13,
			2,
			6,
			2,
			19,
			19,
			19,
			20,
			26,
			3,
			1,
			1,
			1,
			1,
			1,
			16,
			21,
			9,
			16,
			7,
			6,
			18,
			13,
			20,
			12,
			12,
			20,
			6,
			14,
			14,
			14,
			14,
			6,
			1,
			3,
			25,
			19,
			20,
			22,
			2,
			4,
			4,
			4,
			11,
			9,
			8,
			1,
			9,
			1,
			8,
			8,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			1,
			6,
			9,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			1,
			10,
			1,
			8,
			4,
			1,
			5,
			8,
			8,
			8,
			8,
			9,
			9,
			5,
			4,
			8,
			16,
			8,
			2,
			3,
			3,
			6,
			6,
			7,
			13,
			4,
			4,
			4,
			4,
			1,
			1,
			1,
			8,
			25,
			11,
			14,
			14,
			14,
			17,
			17,
			17,
			5,
			5,
			5,
			14,
			14,
			14,
			9,
			9,
			9,
			9,
			17,
			17,
			16,
			16,
			18,
			18,
			10,
			10,
			10,
			10,
			4,
			1,
			6,
			9,
			6,
			4,
			4,
			4,
			14,
			4,
			25,
			13,
			3,
			7,
			6,
			6,
			1,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			15,
			15,
			8,
			8,
			2,
			6,
			15,
			15,
			6,
			13,
			5,
			5,
			7,
			5,
			14,
			14,
			4,
			6,
			21,
			1,
			1,
			1,
			11,
			12,
			6,
			6,
			17,
			6,
			16,
			21,
			16,
			23,
			5,
			16,
			2,
			28,
			28,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			3,
			4,
			6,
			27,
			16,
			2,
			2,
			4,
			3,
			4,
			23,
			6,
			1,
			1,
			2,
			8,
			8,
			14,
			6,
			6,
			6,
			6,
			6,
			2,
			4,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			1,
			1,
			13
		};

		// Token: 0x0400064A RID: 1610
		public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();

		// Token: 0x0400064B RID: 1611
		public static bool mouseExit;

		// Token: 0x0400064C RID: 1612
		public static float exitScale = 0.8f;

		// Token: 0x0400064D RID: 1613
		public static bool mouseReforge;

		// Token: 0x0400064E RID: 1614
		public static float reforgeScale = 0.8f;

		/// <summary>
		/// Used internally for network syncing. Use <see cref="P:Terraria.Main.LocalPlayer" /> to access the player for the local user.
		/// </summary>
		// Token: 0x0400064F RID: 1615
		public static Player clientPlayer = new Player();

		// Token: 0x04000650 RID: 1616
		public static string getIP = Main.defaultIP;

		// Token: 0x04000651 RID: 1617
		public static string getPort = Convert.ToString(Netplay.ListenPort);

		// Token: 0x04000652 RID: 1618
		public static bool menuMultiplayer;

		// Token: 0x04000653 RID: 1619
		public static bool menuServer;

		/// <summary>
		/// Denotes the current network mode: <b>0</b> for single player client, <b>1</b> for multiplayer client, and <b>2</b> for server.<br />
		/// Using <see cref="T:Terraria.ID.NetmodeID" /> entries instead of 0, 1, and 2 will greatly enhance code readability.<br />
		/// Modders must properly use netMode to selectively run code, such as code affecting the game world. Following examples in ExampleMod and Terraria code as well as reading the <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Netcode">Basic Netcode guide</see> are the best way to learn how to use netMode correctly.<br />
		/// <see cref="F:Terraria.Main.dedServ" /> is the same as <c><see cref="F:Terraria.Main.netMode" /> == <see cref="F:Terraria.ID.NetmodeID.Server" /></c>
		/// </summary>
		// Token: 0x04000654 RID: 1620
		public static int netMode;

		// Token: 0x04000655 RID: 1621
		private static int _targetNetMode;

		// Token: 0x04000656 RID: 1622
		private static bool _hasPendingNetmodeChange;

		// Token: 0x04000657 RID: 1623
		public const int MaxTimeout = 120;

		// Token: 0x04000658 RID: 1624
		public static int netPlayCounter;

		// Token: 0x04000659 RID: 1625
		public static int lastNPCUpdate;

		// Token: 0x0400065A RID: 1626
		public static int lastItemUpdate;

		// Token: 0x0400065B RID: 1627
		public static int maxNPCUpdates = 5;

		// Token: 0x0400065C RID: 1628
		public static int maxItemUpdates = 5;

		// Token: 0x0400065D RID: 1629
		public static string cUp = "W";

		// Token: 0x0400065E RID: 1630
		public static string cLeft = "A";

		// Token: 0x0400065F RID: 1631
		public static string cDown = "S";

		// Token: 0x04000660 RID: 1632
		public static string cRight = "D";

		// Token: 0x04000661 RID: 1633
		public static string cJump = "Space";

		// Token: 0x04000662 RID: 1634
		public static string cThrowItem = "T";

		// Token: 0x04000663 RID: 1635
		public static string cHeal = "H";

		// Token: 0x04000664 RID: 1636
		public static string cMana = "J";

		// Token: 0x04000665 RID: 1637
		public static string cBuff = "B";

		// Token: 0x04000666 RID: 1638
		public static string cHook = "E";

		// Token: 0x04000667 RID: 1639
		public static string cTorch = "LeftShift";

		// Token: 0x04000668 RID: 1640
		public static string cInv = "Escape";

		// Token: 0x04000669 RID: 1641
		public static string cSmart = "LeftControl";

		// Token: 0x0400066A RID: 1642
		public static string cMount = "R";

		// Token: 0x0400066B RID: 1643
		public static string cFavoriteKey = "LeftAlt";

		// Token: 0x0400066C RID: 1644
		public static bool cSmartCursorModeIsToggleAndNotHold = true;

		// Token: 0x0400066D RID: 1645
		public static bool SmartCursorWanted_Mouse = false;

		// Token: 0x0400066E RID: 1646
		public static bool SmartCursorWanted_GamePad = false;

		// Token: 0x0400066F RID: 1647
		public static bool SmartCursorShowing = false;

		// Token: 0x04000670 RID: 1648
		public static int SmartCursorX;

		// Token: 0x04000671 RID: 1649
		public static int SmartCursorY;

		// Token: 0x04000672 RID: 1650
		public static bool SmartInteractShowingGenuine;

		// Token: 0x04000673 RID: 1651
		public static bool SmartInteractShowingFake;

		/// <summary>
		/// The tile coordinate of the tile location currently being targeted by the local player's cursor for interaction/right click purposes, assuming the smart cursor feature is enabled and a tile is being targeted by it. Will be -1 if a tile isn't being smart interacted with. Since this takes into account the smart cursor feature, it isn't necessarily the tile directly under the cursor. For left clicks, see <see cref="F:Terraria.Player.tileTargetX" />
		/// </summary>
		// Token: 0x04000674 RID: 1652
		public static int SmartInteractX;

		/// <inheritdoc cref="F:Terraria.Main.SmartInteractX" />
		// Token: 0x04000675 RID: 1653
		public static int SmartInteractY;

		// Token: 0x04000676 RID: 1654
		public static int SmartInteractNPC;

		// Token: 0x04000677 RID: 1655
		public static int SmartInteractProj;

		// Token: 0x04000678 RID: 1656
		public static bool SmartInteractPotionOfReturn;

		// Token: 0x04000679 RID: 1657
		public static List<Point> SmartInteractTileCoords = new List<Point>();

		// Token: 0x0400067A RID: 1658
		public static List<Point> SmartInteractTileCoordsSelected = new List<Point>();

		// Token: 0x0400067B RID: 1659
		public static int TileInteractionLX = -1;

		// Token: 0x0400067C RID: 1660
		public static int TileInteractionLY = -1;

		// Token: 0x0400067D RID: 1661
		public static int TileInteractionHX = -1;

		// Token: 0x0400067E RID: 1662
		public static int TileInteractionHY = -1;

		// Token: 0x0400067F RID: 1663
		public static int cursorOverride = -1;

		// Token: 0x04000680 RID: 1664
		public static int signHover = -1;

		// Token: 0x04000681 RID: 1665
		public static string cMapZoomIn = "Add";

		// Token: 0x04000682 RID: 1666
		public static string cMapZoomOut = "Subtract";

		// Token: 0x04000683 RID: 1667
		public static string cMapAlphaUp = "PageUp";

		// Token: 0x04000684 RID: 1668
		public static string cMapAlphaDown = "PageDown";

		// Token: 0x04000685 RID: 1669
		public static string cMapFull = "M";

		// Token: 0x04000686 RID: 1670
		public static string cMapStyle = "Tab";

		// Token: 0x04000687 RID: 1671
		public static Keys FavoriteKey = 164;

		// Token: 0x04000688 RID: 1672
		public static ColorSlidersSet mouseColorSlider = new ColorSlidersSet();

		// Token: 0x04000689 RID: 1673
		public static ColorSlidersSet mouseBorderColorSlider = new ColorSlidersSet();

		// Token: 0x0400068A RID: 1674
		public static Color mouseColor = new Color(255, 50, 95);

		// Token: 0x0400068B RID: 1675
		public static Color cursorColor = Color.White;

		// Token: 0x0400068C RID: 1676
		public static int cursorColorDirection = 1;

		// Token: 0x0400068D RID: 1677
		public static float cursorAlpha;

		// Token: 0x0400068E RID: 1678
		public static float cursorScale;

		// Token: 0x0400068F RID: 1679
		public static bool signBubble;

		// Token: 0x04000690 RID: 1680
		public static int signX = 0;

		// Token: 0x04000691 RID: 1681
		public static int signY = 0;

		// Token: 0x04000692 RID: 1682
		public static bool hideUI;

		// Token: 0x04000693 RID: 1683
		public static bool releaseUI;

		// Token: 0x04000694 RID: 1684
		public static FrameSkipMode FrameSkipMode = FrameSkipMode.Subtle;

		// Token: 0x04000695 RID: 1685
		public static bool terrariasFixedTiming = true;

		// Token: 0x04000696 RID: 1686
		private int splashCounter;

		// Token: 0x04000697 RID: 1687
		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

		// Token: 0x04000698 RID: 1688
		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

		// Token: 0x04000699 RID: 1689
		public List<int> DrawCacheNPCProjectiles = new List<int>(200);

		// Token: 0x0400069A RID: 1690
		public List<int> DrawCacheNPCsBehindNonSolidTiles = new List<int>(200);

		// Token: 0x0400069B RID: 1691
		public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);

		// Token: 0x0400069C RID: 1692
		public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);

		// Token: 0x0400069D RID: 1693
		public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);

		// Token: 0x0400069E RID: 1694
		public List<int> DrawCacheProjsOverWiresUI = new List<int>(1000);

		// Token: 0x0400069F RID: 1695
		public List<int> DrawCacheProjsOverPlayers = new List<int>(1000);

		// Token: 0x040006A0 RID: 1696
		public List<int> DrawCacheFirstFractals = new List<int>(1000);

		// Token: 0x040006A1 RID: 1697
		public static ParticleRenderer ParticleSystem_World_OverPlayers = new ParticleRenderer();

		// Token: 0x040006A2 RID: 1698
		public static ParticleRenderer ParticleSystem_World_BehindPlayers = new ParticleRenderer();

		// Token: 0x040006A3 RID: 1699
		private static WindowStateController _windowMover;

		// Token: 0x040006A4 RID: 1700
		public static AnchoredEntitiesCollection sittingManager;

		// Token: 0x040006A5 RID: 1701
		public static AnchoredEntitiesCollection sleepingManager;

		// Token: 0x040006A6 RID: 1702
		public static MinimapFrameManager MinimapFrameManagerInstance;

		// Token: 0x040006A7 RID: 1703
		public static PlayerResourceSetsManager ResourceSetsManager;

		// Token: 0x040006A8 RID: 1704
		private static bool shouldSetDefaultUIScale = true;

		// Token: 0x040006A9 RID: 1705
		private static float newDefaultUIScale = 0f;

		// Token: 0x040006AA RID: 1706
		public static bool IsInTheMiddleOfLoadingSettings;

		// Token: 0x040006AB RID: 1707
		public static Point LastLoadedResolution;

		// Token: 0x040006AC RID: 1708
		public static bool startFullscreen = false;

		// Token: 0x040006AD RID: 1709
		public static string oldStatusText = "";

		// Token: 0x040006AE RID: 1710
		public static string autoGenFileLocation = null;

		// Token: 0x040006AF RID: 1711
		public static bool autoShutdown;

		// Token: 0x040006B0 RID: 1712
		private uint previousExecutionState;

		// Token: 0x040006B1 RID: 1713
		public static bool fastForwardTimeToDawn;

		// Token: 0x040006B2 RID: 1714
		public static int sundialCooldown;

		// Token: 0x040006B3 RID: 1715
		public static bool fastForwardTimeToDusk;

		// Token: 0x040006B4 RID: 1716
		public static int moondialCooldown;

		// Token: 0x040006B5 RID: 1717
		private static Stopwatch splashTimer = new Stopwatch();

		// Token: 0x040006B6 RID: 1718
		public static GeneralIssueReporter IssueReporter;

		// Token: 0x040006B7 RID: 1719
		private JArray _lastLoadedPacks;

		// Token: 0x040006B8 RID: 1720
		public static bool PreventUpdatingTargets = true;

		// Token: 0x040006B9 RID: 1721
		private IEnumerator _gameContentLoadProcess;

		// Token: 0x040006BA RID: 1722
		public static bool _shouldUseWindyDayMusic = false;

		// Token: 0x040006BB RID: 1723
		public static bool _shouldUseStormMusic = false;

		// Token: 0x040006BC RID: 1724
		private int lastMusicPlayed = -1;

		// Token: 0x040006BD RID: 1725
		public bool playOldTile;

		// Token: 0x040006BE RID: 1726
		private static float _minWind = 0.34f;

		// Token: 0x040006BF RID: 1727
		private static float _maxWind = 0.4f;

		// Token: 0x040006C0 RID: 1728
		private static float _minRain = 0.4f;

		// Token: 0x040006C1 RID: 1729
		private static float _maxRain = 0.5f;

		// Token: 0x040006C2 RID: 1730
		public static float ambientWaterfallX = -1f;

		// Token: 0x040006C3 RID: 1731
		public static float ambientWaterfallY = -1f;

		// Token: 0x040006C4 RID: 1732
		public static float ambientWaterfallStrength = 0f;

		// Token: 0x040006C5 RID: 1733
		public static float ambientLavafallX = -1f;

		// Token: 0x040006C6 RID: 1734
		public static float ambientLavafallY = -1f;

		// Token: 0x040006C7 RID: 1735
		public static float ambientLavafallStrength = 0f;

		// Token: 0x040006C8 RID: 1736
		public static float ambientLavaX = -1f;

		// Token: 0x040006C9 RID: 1737
		public static float ambientLavaY = -1f;

		// Token: 0x040006CA RID: 1738
		public static float ambientLavaStrength;

		// Token: 0x040006CB RID: 1739
		public static int ambientCounter;

		// Token: 0x040006CC RID: 1740
		public static IChatMonitor chatMonitor = new RemadeChatMonitor();

		// Token: 0x040006CD RID: 1741
		public static int ProjectileUpdateLoopIndex = -1;

		// Token: 0x040006CE RID: 1742
		public static GameTipsDisplay gameTips;

		// Token: 0x040006CF RID: 1743
		private Stopwatch _worldUpdateTimeTester = new Stopwatch();

		// Token: 0x040006D0 RID: 1744
		public SpelunkerProjectileHelper SpelunkerProjectileHelper = new SpelunkerProjectileHelper();

		// Token: 0x040006D1 RID: 1745
		public ChumBucketProjectileHelper ChumBucketProjectileHelper = new ChumBucketProjectileHelper();

		// Token: 0x040006D2 RID: 1746
		public static int weatherVaneBobframe = 0;

		// Token: 0x040006D3 RID: 1747
		private float logoRotation;

		// Token: 0x040006D4 RID: 1748
		private float logoRotationDirection = -1f;

		// Token: 0x040006D5 RID: 1749
		private float logoRotationSpeed = 1f;

		// Token: 0x040006D6 RID: 1750
		private float logoScale = 1f;

		// Token: 0x040006D7 RID: 1751
		private float logoScaleDirection = 1f;

		// Token: 0x040006D8 RID: 1752
		private float logoScaleSpeed = 1f;

		// Token: 0x040006D9 RID: 1753
		private static int maxMenuItems = 16;

		// Token: 0x040006DA RID: 1754
		private float[] menuItemScale = new float[Main.maxMenuItems];

		// Token: 0x040006DB RID: 1755
		private int focusMenu = -1;

		// Token: 0x040006DC RID: 1756
		private int selectedMenu = -1;

		// Token: 0x040006DD RID: 1757
		private int selectedMenu2 = -1;

		// Token: 0x040006DE RID: 1758
		public static int selectedPlayer = 0;

		// Token: 0x040006DF RID: 1759
		public static int selectedWorld;

		// Token: 0x040006E0 RID: 1760
		public static int menuMode = 10002;

		// Token: 0x040006E1 RID: 1761
		public static int menuSkip;

		// Token: 0x040006E2 RID: 1762
		private static bool _needsLanguageSelect = true;

		// Token: 0x040006E3 RID: 1763
		public static Item tooltipPrefixComparisonItem = new Item();

		// Token: 0x040006E4 RID: 1764
		private Main.MouseTextCache _mouseTextCache;

		// Token: 0x040006E5 RID: 1765
		public int textBlinkerCount;

		// Token: 0x040006E6 RID: 1766
		public int textBlinkerState;

		// Token: 0x040006E7 RID: 1767
		public static string newWorldName = "";

		// Token: 0x040006E8 RID: 1768
		private static Vector3 shimmerShine = new Vector3(1f, 0.5f, 1f);

		// Token: 0x040006E9 RID: 1769
		public static int[] specX = new int[1000];

		// Token: 0x040006EA RID: 1770
		public static int[] specY = new int[1000];

		// Token: 0x040006EB RID: 1771
		public TilePaintSystemV2 TilePaintSystem;

		// Token: 0x040006EC RID: 1772
		public TileDrawing TilesRenderer;

		// Token: 0x040006ED RID: 1773
		public WallDrawing WallsRenderer;

		// Token: 0x040006EE RID: 1774
		private AmbientWindSystem _ambientWindSys = new AmbientWindSystem();

		// Token: 0x040006EF RID: 1775
		private List<Player> _playersThatDrawBehindNPCs = new List<Player>(255);

		// Token: 0x040006F0 RID: 1776
		private List<Player> _playersThatDrawAfterProjectiles = new List<Player>(255);

		// Token: 0x040006F1 RID: 1777
		private List<DrawData> _voidLensData = new List<DrawData>();

		// Token: 0x040006F2 RID: 1778
		private List<DrawData> _voidLensDataSillouette = new List<DrawData>();

		// Token: 0x040006F3 RID: 1779
		private List<DrawData> _voidLensDataSillouette2 = new List<DrawData>();

		// Token: 0x040006F4 RID: 1780
		private static BlendState _multiplyBlendState = null;

		// Token: 0x040006F5 RID: 1781
		private static StardewValleyAnimation _stardewAnimation;

		// Token: 0x040006F6 RID: 1782
		private static UnifiedRandom _tempSeededRandom = new UnifiedRandom();

		// Token: 0x040006F7 RID: 1783
		private Main.TextDisplayCache _textDisplayCache = new Main.TextDisplayCache();

		// Token: 0x040006F8 RID: 1784
		private List<int> _occupantsListToDrawNPCHouses = new List<int>();

		// Token: 0x040006F9 RID: 1785
		private List<int> _npcsWithBannersToDraw = new List<int>();

		// Token: 0x040006FA RID: 1786
		private bool _imeToggle;

		// Token: 0x040006FB RID: 1787
		private static int _lastHoveredLoadoutIndex = -1;

		// Token: 0x040006FC RID: 1788
		private List<int> _npcTypesThatAlreadyDrewAHead = new List<int>();

		// Token: 0x040006FD RID: 1789
		internal int[] _npcIndexWhoHoldsHeadIndex = new int[NPCHeadID.Count];

		// Token: 0x040006FE RID: 1790
		private static List<string> _requiredObjecsForCraftingText = new List<string>();

		// Token: 0x040006FF RID: 1791
		private static bool _preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;

		// Token: 0x04000700 RID: 1792
		private static int _currentRecipeBeingCrafted = -1;

		// Token: 0x04000701 RID: 1793
		private static bool hidePVPIcons = false;

		// Token: 0x04000702 RID: 1794
		public static bool HoveringOverAnNPC;

		/// <summary>
		/// Sets the tooltip text to be drawn next to the cursor. Will be ignored if <see cref="F:Terraria.Main.mouseItem" /> is not air, meaning the player is holding an item on the mouse. If used in conjunction with <see cref="F:Terraria.Main.HoverItem" />, an item tooltip will be shown, otherwise the text will be drawn as is with no background box. Similar to <see cref="M:Terraria.Main.MouseText(System.String,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> except it won't show if an item is held on the mouse.
		/// <para /> Use <see cref="M:Terraria.ModLoader.UI.UICommon.TooltipMouseText(System.String)" /> instead to draw a non-item tooltip with the hover text background boxes, if that setting is not disabled by the user.
		/// </summary>
		// Token: 0x04000703 RID: 1795
		public static string hoverItemName = "";

		// Token: 0x04000704 RID: 1796
		public static Color inventoryBack = new Color(220, 220, 220, 220);

		// Token: 0x04000705 RID: 1797
		public static bool mouseText;

		// Token: 0x04000706 RID: 1798
		private static int mH;

		// Token: 0x04000707 RID: 1799
		public static int rare;

		// Token: 0x04000708 RID: 1800
		public static int hairStart;

		// Token: 0x04000709 RID: 1801
		private static int oldHairStyle;

		// Token: 0x0400070A RID: 1802
		private static Color oldHairColor;

		// Token: 0x0400070B RID: 1803
		public static int selClothes;

		// Token: 0x0400070C RID: 1804
		private static Color[] oldClothesColor = new Color[6];

		// Token: 0x0400070D RID: 1805
		private static int oldClothesStyle;

		// Token: 0x0400070E RID: 1806
		public static int interactedDresserTopLeftX;

		// Token: 0x0400070F RID: 1807
		public static int interactedDresserTopLeftY;

		// Token: 0x04000710 RID: 1808
		public static Player dresserInterfaceDummy;

		// Token: 0x04000711 RID: 1809
		private bool _needToSetupDrawInterfaceLayers = true;

		// Token: 0x04000712 RID: 1810
		private List<GameInterfaceLayer> _gameInterfaceLayers;

		// Token: 0x04000713 RID: 1811
		public static GameTime _drawInterfaceGameTime;

		// Token: 0x04000714 RID: 1812
		private byte instrumentMouseFixHack;

		// Token: 0x04000715 RID: 1813
		private static bool _settingsButtonIsPushedToSide;

		// Token: 0x04000716 RID: 1814
		private static bool _MouseOversCanClear;

		// Token: 0x04000717 RID: 1815
		private static Vector2 _itemIconCacheScreenPosition;

		// Token: 0x04000718 RID: 1816
		private static int _itemIconCacheSelectedItemID;

		// Token: 0x04000719 RID: 1817
		private static int _itemIconCacheTime;

		// Token: 0x0400071A RID: 1818
		private static bool _cannotDrawAccessoriesHorizontally = false;

		// Token: 0x0400071B RID: 1819
		public static Color selColor = Color.White;

		// Token: 0x0400071C RID: 1820
		public static int focusColor;

		// Token: 0x0400071D RID: 1821
		public static int colorDelay;

		// Token: 0x0400071E RID: 1822
		public static int setKey = -1;

		// Token: 0x0400071F RID: 1823
		public static int bgScroll;

		// Token: 0x04000720 RID: 1824
		public static bool autoPass;

		// Token: 0x04000721 RID: 1825
		public static int menuFocus = 0;

		// Token: 0x04000722 RID: 1826
		public static float hBar = -1f;

		// Token: 0x04000723 RID: 1827
		public static float sBar = -1f;

		// Token: 0x04000724 RID: 1828
		public static float lBar = 1f;

		// Token: 0x04000725 RID: 1829
		public static float aBar = 1f;

		// Token: 0x04000726 RID: 1830
		private int grabColorSlider;

		// Token: 0x04000727 RID: 1831
		public static bool blockMouse;

		// Token: 0x04000728 RID: 1832
		private static bool _blockFancyUIWhileLoading;

		// Token: 0x04000729 RID: 1833
		private bool[] menuWide = new bool[100];

		// Token: 0x0400072A RID: 1834
		public static float GamepadCursorAlpha = 0f;

		// Token: 0x0400072B RID: 1835
		private bool _needsMenuUIRecalculation;

		// Token: 0x0400072C RID: 1836
		public static float MenuXMovement = 0f;

		// Token: 0x0400072D RID: 1837
		public RejectionMenuInfo RejectionMenuInfo;

		// Token: 0x0400072E RID: 1838
		private float _splashFrameCount;

		// Token: 0x0400072F RID: 1839
		private bool quickSplash;

		// Token: 0x04000730 RID: 1840
		private float hellBlackBoxBottom;

		// Token: 0x04000731 RID: 1841
		public static float InitialMapScale = 1f;

		// Token: 0x04000732 RID: 1842
		public static float MapScale = 1f;

		// Token: 0x04000733 RID: 1843
		private static int _minimapTopRightAnchorOffsetTowardsLeft = 52;

		// Token: 0x04000734 RID: 1844
		private static int _minimapTopRightAnchorOffsetTowardsBottom = 90;

		// Token: 0x04000735 RID: 1845
		public static bool cancelWormHole = false;

		// Token: 0x04000736 RID: 1846
		private static VertexColors _glowPaintColors = new VertexColors(Color.White);

		// Token: 0x04000737 RID: 1847
		protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();

		// Token: 0x04000738 RID: 1848
		public static float lightning;

		// Token: 0x04000739 RID: 1849
		private static float lightningDecay = 1f;

		// Token: 0x0400073A RID: 1850
		private static float lightningSpeed = 0f;

		// Token: 0x0400073B RID: 1851
		private static int thunderDelay;

		// Token: 0x0400073C RID: 1852
		public static int thunderDistance;

		// Token: 0x0400073D RID: 1853
		private static string[] MonolithFilterNames = new string[]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar",
			"MonolithMoonLord"
		};

		// Token: 0x0400073E RID: 1854
		private static string[] MonolithSkyNames = new string[]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar",
			"MonolithMoonLord"
		};

		// Token: 0x0400073F RID: 1855
		private static float backgroundLayerTransitionSpeed = 0.05f;

		// Token: 0x04000740 RID: 1856
		public static float atmo;

		// Token: 0x04000741 RID: 1857
		internal static float bgScale = 1f;

		// Token: 0x04000742 RID: 1858
		internal static int bgWidthScaled = (int)(1024f * Main.bgScale);

		// Token: 0x04000743 RID: 1859
		public static Color ColorOfTheSkies;

		// Token: 0x04000744 RID: 1860
		internal static Color ColorOfSurfaceBackgroundsBase = Color.White;

		// Token: 0x04000745 RID: 1861
		internal static Color ColorOfSurfaceBackgroundsModified = Color.White;

		// Token: 0x04000746 RID: 1862
		internal float screenOff;

		// Token: 0x04000747 RID: 1863
		internal float scAdj;

		// Token: 0x04000748 RID: 1864
		private float cTop;

		// Token: 0x04000749 RID: 1865
		private bool _isDrawingOrUpdating;

		// Token: 0x0400074A RID: 1866
		public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();

		// Token: 0x0400074B RID: 1867
		private static bool _cameraPanHasBlackTransition = false;

		// Token: 0x0400074C RID: 1868
		public CameraModifierStack CameraModifiers = new CameraModifierStack();

		// Token: 0x0400074D RID: 1869
		public static bool starGame = false;

		// Token: 0x0400074E RID: 1870
		public static int starsHit = 0;

		// Token: 0x0400074F RID: 1871
		private static string _oldNetplayStatusText;

		// Token: 0x04000750 RID: 1872
		private static TextSnippet[] _netplayStatusTextSnippets;

		// Token: 0x04000751 RID: 1873
		public static double ladyBugRainBoost = 0.0;

		// Token: 0x04000752 RID: 1874
		private static bool _canShowMeteorFall;

		// Token: 0x04000753 RID: 1875
		private static bool _isResizingAndRemakingTargets = false;

		// Token: 0x04000761 RID: 1889
		private static SlotId waterfallSoundSlot;

		// Token: 0x04000762 RID: 1890
		private static SlotId lavafallSoundSlot;

		// Token: 0x04000763 RID: 1891
		public static int DefaultDamageVariationPercent = 15;

		// Token: 0x04000764 RID: 1892
		public static int soundError;

		// Token: 0x04000765 RID: 1893
		public static int ambientError;

		// Token: 0x04000766 RID: 1894
		public static bool mouseMiddle;

		// Token: 0x04000767 RID: 1895
		public static bool mouseXButton1;

		// Token: 0x04000768 RID: 1896
		public static bool mouseXButton2;

		// Token: 0x04000769 RID: 1897
		public static bool mouseMiddleRelease;

		// Token: 0x0400076A RID: 1898
		public static bool mouseXButton1Release;

		// Token: 0x0400076B RID: 1899
		public static bool mouseXButton2Release;

		// Token: 0x0400076C RID: 1900
		public static Point16 trashSlotOffset;

		// Token: 0x0400076D RID: 1901
		public static bool hidePlayerCraftingMenu;

		// Token: 0x0400076E RID: 1902
		public static bool showServerConsole;

		// Token: 0x0400076F RID: 1903
		public static bool Support8K = true;

		// Token: 0x04000770 RID: 1904
		public static double desiredWorldEventsUpdateRate = 1.0;

		/// <summary>
		/// Representation that dictates the actual amount of "world event updates" that happen in a given GAME tick. This number increases/decreases in direct tandem with
		/// <seealso cref="F:Terraria.Main.desiredWorldEventsUpdateRate" />.
		/// </summary>
		// Token: 0x04000771 RID: 1905
		public static int worldEventUpdates;

		// Token: 0x04000772 RID: 1906
		private double _partialWorldEventUpdates;

		// Token: 0x04000773 RID: 1907
		public static List<TitleLinkButton> tModLoaderTitleLinks = new List<TitleLinkButton>();

		// Token: 0x04000774 RID: 1908
		private static readonly HttpClient client = new HttpClient();

		// Token: 0x04000775 RID: 1909
		private static bool hairstylesUpdatedForThisInteraction;

		// Token: 0x04000776 RID: 1910
		private static Player _currentPlayerOverride;

		// Token: 0x04000777 RID: 1911
		private static PosixSignalRegistration SIGINTHandler;

		// Token: 0x04000778 RID: 1912
		private static PosixSignalRegistration SIGTERMHandler;

		// Token: 0x04000779 RID: 1913
		private static string newsText = "???";

		// Token: 0x0400077A RID: 1914
		private static string newsURL = null;

		// Token: 0x0400077B RID: 1915
		private static bool newsChecked = false;

		// Token: 0x0400077C RID: 1916
		private static bool newsIsNew = false;

		// Token: 0x0200079E RID: 1950
		// (Invoke) Token: 0x06004EA4 RID: 20132
		public delegate void OnPlayerSelected(PlayerFileData player);

		// Token: 0x0200079F RID: 1951
		public static class CurrentFrameFlags
		{
			// Token: 0x040065C6 RID: 26054
			public static int ActivePlayersCount;

			// Token: 0x040065C7 RID: 26055
			public static int SleepingPlayersCount;

			// Token: 0x040065C8 RID: 26056
			public static bool AnyActiveBossNPC;

			// Token: 0x040065C9 RID: 26057
			public static bool HadAnActiveInteractibleProjectile;

			// Token: 0x02000DD5 RID: 3541
			public static class Hacks
			{
				// Token: 0x04007BB0 RID: 31664
				public static Matrix CurrentBackgroundMatrixForCreditsRoll;
			}
		}

		// Token: 0x020007A0 RID: 1952
		public enum WorldPreparationState
		{
			// Token: 0x040065CB RID: 26059
			AwaitingData,
			// Token: 0x040065CC RID: 26060
			ProcessingData,
			// Token: 0x040065CD RID: 26061
			Ready
		}

		// Token: 0x020007A1 RID: 1953
		internal static class NativeMethods
		{
			// Token: 0x06004EA7 RID: 20135
			[DllImport("kernel32.dll")]
			public static extern uint SetThreadExecutionState(uint esFlags);

			// Token: 0x040065CE RID: 26062
			public const uint ES_CONTINUOUS = 2147483648U;

			// Token: 0x040065CF RID: 26063
			public const uint ES_SYSTEM_REQUIRED = 1U;
		}

		// Token: 0x020007A2 RID: 1954
		private struct MouseTextCache
		{
			// Token: 0x040065D0 RID: 26064
			public bool noOverride;

			// Token: 0x040065D1 RID: 26065
			public bool isValid;

			// Token: 0x040065D2 RID: 26066
			public string cursorText;

			// Token: 0x040065D3 RID: 26067
			public int rare;

			// Token: 0x040065D4 RID: 26068
			public byte diff;

			// Token: 0x040065D5 RID: 26069
			public int X;

			// Token: 0x040065D6 RID: 26070
			public int Y;

			// Token: 0x040065D7 RID: 26071
			public int hackedScreenWidth;

			// Token: 0x040065D8 RID: 26072
			public int hackedScreenHeight;

			// Token: 0x040065D9 RID: 26073
			public string buffTooltip;
		}

		// Token: 0x020007A3 RID: 1955
		protected class TextDisplayCache
		{
			// Token: 0x17000895 RID: 2197
			// (get) Token: 0x06004EA8 RID: 20136 RVA: 0x00675366 File Offset: 0x00673566
			// (set) Token: 0x06004EA9 RID: 20137 RVA: 0x0067536E File Offset: 0x0067356E
			public List<List<TextSnippet>> TextLines { get; private set; }

			// Token: 0x17000896 RID: 2198
			// (get) Token: 0x06004EAA RID: 20138 RVA: 0x00675377 File Offset: 0x00673577
			// (set) Token: 0x06004EAB RID: 20139 RVA: 0x0067537F File Offset: 0x0067357F
			public int AmountOfLines { get; private set; }

			// Token: 0x06004EAC RID: 20140 RVA: 0x00675388 File Offset: 0x00673588
			public void PrepareCache(string text, Color baseColor)
			{
				if (Main.screenWidth != this._lastScreenWidth | Main.screenHeight != this._lastScreenHeight | this._originalText != text | PlayerInput.CurrentInputMode != this._lastInputMode | this.originalColor != baseColor)
				{
					this._lastScreenWidth = Main.screenWidth;
					this._lastScreenHeight = Main.screenHeight;
					this._originalText = text;
					this._lastInputMode = PlayerInput.CurrentInputMode;
					text = Lang.SupportGlyphs(text);
					this.originalColor = baseColor;
					this.TextLines = Utils.WordwrapStringSmart(text, baseColor, FontAssets.MouseText.Value, 460, 10);
					this.AmountOfLines = this.TextLines.Count;
				}
			}

			// Token: 0x040065DA RID: 26074
			private string _originalText;

			// Token: 0x040065DB RID: 26075
			private int _lastScreenWidth;

			// Token: 0x040065DC RID: 26076
			private int _lastScreenHeight;

			// Token: 0x040065DD RID: 26077
			private InputMode _lastInputMode;

			// Token: 0x040065DE RID: 26078
			private Color originalColor;
		}

		// Token: 0x020007A4 RID: 1956
		public struct SceneArea
		{
			// Token: 0x040065E1 RID: 26081
			public Vector2 SceneLocalScreenPositionOffset;

			// Token: 0x040065E2 RID: 26082
			public float totalWidth;

			// Token: 0x040065E3 RID: 26083
			public float totalHeight;

			// Token: 0x040065E4 RID: 26084
			public int bgTopY;
		}

		// Token: 0x020007A5 RID: 1957
		public struct InfoToSetBackColor
		{
			// Token: 0x040065E5 RID: 26085
			public bool isInGameMenuOrIsServer;

			// Token: 0x040065E6 RID: 26086
			public float CorruptionBiomeInfluence;

			// Token: 0x040065E7 RID: 26087
			public float CrimsonBiomeInfluence;

			// Token: 0x040065E8 RID: 26088
			public float JungleBiomeInfluence;

			// Token: 0x040065E9 RID: 26089
			public float MushroomBiomeInfluence;

			// Token: 0x040065EA RID: 26090
			public float GraveyardInfluence;

			// Token: 0x040065EB RID: 26091
			public bool BloodMoonActive;

			// Token: 0x040065EC RID: 26092
			public bool LanternNightActive;
		}

		// Token: 0x020007A6 RID: 1958
		[CompilerFeatureRequired("RefStructs")]
		public ref struct CurrentPlayerOverride
		{
			// Token: 0x06004EAE RID: 20142 RVA: 0x00675451 File Offset: 0x00673651
			public CurrentPlayerOverride(Player player)
			{
				this._prevPlayer = Main._currentPlayerOverride;
				Main._currentPlayerOverride = player;
			}

			// Token: 0x06004EAF RID: 20143 RVA: 0x00675464 File Offset: 0x00673664
			public void Dispose()
			{
				Main._currentPlayerOverride = this._prevPlayer;
			}

			// Token: 0x040065ED RID: 26093
			private Player _prevPlayer;
		}

		// Token: 0x020007A7 RID: 1959
		[CompilerGenerated]
		private static class <>O
		{
			// Token: 0x040065EE RID: 26094
			public static Comparison<WorldFileData> <0>__WorldListSortMethod;

			// Token: 0x040065EF RID: 26095
			public static Comparison<PlayerFileData> <1>__PlayerListSortMethod;

			// Token: 0x040065F0 RID: 26096
			public static ThreadStart <2>__startDedInputCallBack;

			// Token: 0x040065F1 RID: 26097
			public static EventHandler<PreparingDeviceSettingsEventArgs> <3>__SetMonitorOnce;

			// Token: 0x040065F2 RID: 26098
			public static Action <4>__ResetGameCounter;

			// Token: 0x040065F3 RID: 26099
			public static Action <5>__InvalidateTooltips;

			// Token: 0x040065F4 RID: 26100
			public static FailedToLoadAssetCustomAction <6>__OnceFailedLoadingAnAsset;

			// Token: 0x040065F5 RID: 26101
			public static Utils.LaserLineFraming <7>__RainbowLaserDraw;

			// Token: 0x040065F6 RID: 26102
			public static Utils.LaserLineFraming <8>__TurretLaserDraw;

			// Token: 0x040065F7 RID: 26103
			public static Utils.LaserLineFraming <9>__LightningLaserDraw;

			// Token: 0x040065F8 RID: 26104
			public static GameInterfaceDrawMethod <10>__DrawInterface_8_CheckF11UIHideToggle;

			// Token: 0x040065F9 RID: 26105
			public static GameInterfaceDrawMethod <11>__DrawInterface_10_CheckCaptureManager;

			// Token: 0x040065FA RID: 26106
			public static GameInterfaceDrawMethod <12>__DrawInterface_12_IngameFancyUI;

			// Token: 0x040065FB RID: 26107
			public static Action <13>__Open;

			// Token: 0x040065FC RID: 26108
			public static Action <14>__Close;

			// Token: 0x040065FD RID: 26109
			public static UIVirtualKeyboard.KeyboardSubmitEvent <15>__OnSubmitServerPasswordFromRequest;

			// Token: 0x040065FE RID: 26110
			public static Action <16>__CanceledGivingServerPassword;

			// Token: 0x040065FF RID: 26111
			public static Action <17>__ExitServerPasswordMenu;

			// Token: 0x04006600 RID: 26112
			public static UIVirtualKeyboard.KeyboardSubmitEvent <18>__OnSubmitServerIP;

			// Token: 0x04006601 RID: 26113
			public static Action <19>__StartClientGameplay;

			// Token: 0x04006602 RID: 26114
			public static UIVirtualKeyboard.KeyboardSubmitEvent <20>__OnSubmitServerPort;

			// Token: 0x04006603 RID: 26115
			public static Func<string, bool> <21>__IsGoodPortAddress;

			// Token: 0x04006604 RID: 26116
			[Nullable(new byte[]
			{
				0,
				1
			})]
			public static Action<PosixSignalContext> <22>__Handle;
		}
	}
}

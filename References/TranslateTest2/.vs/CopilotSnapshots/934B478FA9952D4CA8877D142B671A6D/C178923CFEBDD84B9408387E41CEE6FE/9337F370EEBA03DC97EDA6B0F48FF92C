// Decompiled with JetBrains decompiler
// Type: SummonerPrefix.Prefixes.Blessing
// Assembly: SummonerPrefix, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8925F543-424F-4302-A9BE-42DFABB73BB2
// Assembly location: D:\dorad\Documents\My Games\Terraria\tModLoader\ModReader\SummonerPrefix\SummonerPrefix.dll

using System;
using System.Collections.Generic;
using Terraria;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using TranslateTest2.Core;

namespace TranslateTest2.Prefixes
{
    public class Blessing : ModPrefix
    {
        // デフォルト値（ローカリゼーションで上書き可能）
        private static readonly float DefaultBonus = 1f;
        private static readonly int DefaultRange = 420;
        
        // ローカリゼーションから値を取得（キャッシュ付き）
        private static float? _cachedBonus = null;
        private static int? _cachedRange = null;
        
        public static float Bonus 
        {
            get
            {
                if (_cachedBonus == null)
                {
                    _cachedBonus = LocalizedValues.GetPrefixFloat("Blessing", "Bonus", DefaultBonus);
                    LocalizedValues.LogPrefixValue("Blessing", "Bonus", DefaultBonus, _cachedBonus.Value);
                }
                return _cachedBonus.Value;
            }
        }
        
        public static int range 
        {
            get
            {
                if (_cachedRange == null)
                {
                    _cachedRange = LocalizedValues.GetPrefixInt("Blessing", "Range", DefaultRange);
                    if (_cachedRange != DefaultRange)
                    {
                        TranslateTest2.Instance?.Logger?.Info(
                            $"Prefix Blessing.Range: {DefaultRange} -> {_cachedRange.Value} (from localization)");
                    }
                }
                return _cachedRange.Value;
            }
        }

        public override PrefixCategory Category => PrefixCategory.Magic;

        public override float RollChance(Item item) => 0.5f;

        public override bool CanRoll(Item item) => item.shoot > ProjectileID.None && item.isMinionSummonItem();

        public override void SetStats(
            ref float damageMult,
            ref float knockbackMult,
            ref float useTimeMult,
            ref float scaleMult,
            ref float shootSpeedMult,
            ref float manaMult,
            ref int critBonus)
        {
        }

        public override void ModifyValue(ref float valueMult) => valueMult *= 2.5f;

        public override void Apply(Item item)
        {
            // Blessing効果はプロジェクタイル生成時にSPGlobalProjで判定されるため、
            // ここでGlobalItemプロパティを設定する必要がある
            item.global().blessing = true;
        }

        public override IEnumerable<TooltipLine> GetTooltipLines(Item item)
        {
            yield return new TooltipLine(Mod, "PrefixBlessingDescription", 
                $"範囲内で +{(Bonus * 3f):0} 防御力, +{(Bonus * 5f):0} ライフ再生, +{(Bonus * 2f * 100):0}% ダメージ")
            {
                IsModifier = true,
                IsModifierBad = false
            };
        }

        // ローカリゼーション変更時にキャッシュをクリアする静的メソッド
        public static void ClearCache()
        {
            _cachedBonus = null;
            _cachedRange = null;
        }
    }
}
using System;
using System.Collections.Generic;
using Terraria;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using TranslateTest2.Core;

namespace TranslateTest2.Prefixes
{
    public class Affable : ModPrefix
    {
        // デフォルト値（ローカリゼーションで上書き可能）
        private static readonly float DefaultMinionSlotMult = 0.8f;
        
        // ローカリゼーションから値を取得（キャッシュ付き）
        private static float? _cachedMinionSlotMult = null;
        public static float MinionSlotMult 
        {
            get
            {
                if (_cachedMinionSlotMult == null)
                {
                    _cachedMinionSlotMult = LocalizedValues.GetPrefixFloat("Affable", "MinionSlotMult", DefaultMinionSlotMult);
                    LocalizedValues.LogPrefixValue("Affable", "MinionSlotMult", DefaultMinionSlotMult, _cachedMinionSlotMult.Value);
                }
                return _cachedMinionSlotMult.Value;
            }
        }

        public override PrefixCategory Category => PrefixCategory.Magic;

        public override float RollChance(Item item) => 1f;

        public override bool CanRoll(Item item) => item.shoot > ProjectileID.None && item.isMinionSummonItem();

        public override void SetStats(
            ref float damageMult,
            ref float knockbackMult,
            ref float useTimeMult,
            ref float scaleMult,
            ref float shootSpeedMult,
            ref float manaMult,
            ref int critBonus)
        {
        }

        public override void ModifyValue(ref float valueMult) => valueMult *= 1.2f;

        public override void Apply(Item item) => item.global().MinionSlotMult = MinionSlotMult;

        public override IEnumerable<TooltipLine> GetTooltipLines(Item item)
        {
            float slotReduction = (1f - MinionSlotMult) * 100f;
            
            // Calculate actual slot reduction for this specific item
            Projectile projectile = new Projectile();
            projectile.SetDefaults(item.shoot);
            float actualReduction = projectile.minionSlots * (1f - MinionSlotMult);
            
            yield return new TooltipLine(Mod, "PrefixAffableDescription", 
                $"-{slotReduction:0}% 召喚スロット使用量 (-{actualReduction:0.1f} スロット)")
            {
                IsModifier = true,
                IsModifierBad = false
            };
        }

        // ローカリゼーション変更時にキャッシュをクリアする静的メソッド
        public static void ClearCache()
        {
            _cachedMinionSlotMult = null;
        }
    }
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Items;
using Terraria.GameContent.ObjectInteractions;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameInput;
using Terraria.Graphics;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	// Token: 0x02000041 RID: 65
	public class Player : Entity, IFixLoadedData
	{
		// Token: 0x170000D4 RID: 212
		// (get) Token: 0x06000673 RID: 1651 RVA: 0x002C08DC File Offset: 0x002BEADC
		public Vector2 BlehOldPositionFixer
		{
			get
			{
				return -Vector2.UnitY;
			}
		}

		// Token: 0x170000D5 RID: 213
		// (get) Token: 0x06000674 RID: 1652 RVA: 0x002C08E8 File Offset: 0x002BEAE8
		public float HeightOffsetVisual
		{
			get
			{
				if (this.mount.Active)
				{
					return (float)this.mount.PlayerOffset;
				}
				if (this.portableStoolInfo.IsInUse)
				{
					return (float)this.portableStoolInfo.VisualYOffset;
				}
				return 0f;
			}
		}

		// Token: 0x170000D6 RID: 214
		// (get) Token: 0x06000675 RID: 1653 RVA: 0x002C0924 File Offset: 0x002BEB24
		public float HeightOffsetHitboxCenter
		{
			get
			{
				if (this.mount.Active)
				{
					return (float)this.mount.PlayerOffsetHitbox;
				}
				if (this.portableStoolInfo.IsInUse)
				{
					return (float)(this.portableStoolInfo.HeightBoost - this.portableStoolInfo.VisualYOffset);
				}
				return 0f;
			}
		}

		// Token: 0x170000D7 RID: 215
		// (get) Token: 0x06000676 RID: 1654 RVA: 0x002C0976 File Offset: 0x002BEB76
		public float MountXOffset
		{
			get
			{
				if (this.mount.Active)
				{
					return (float)this.mount.PlayerXOFfset;
				}
				return 0f;
			}
		}

		// Token: 0x170000D8 RID: 216
		// (get) Token: 0x06000677 RID: 1655 RVA: 0x002C0997 File Offset: 0x002BEB97
		public int HeightOffsetBoost
		{
			get
			{
				if (this.mount.Active)
				{
					return this.mount.HeightBoost;
				}
				if (this.portableStoolInfo.IsInUse)
				{
					return this.portableStoolInfo.HeightBoost;
				}
				return 0;
			}
		}

		// Token: 0x170000D9 RID: 217
		// (get) Token: 0x06000678 RID: 1656 RVA: 0x002C09CC File Offset: 0x002BEBCC
		public int HeightMapOffset
		{
			get
			{
				if (this.mount.Active)
				{
					return this.mount.PlayerHeadOffset;
				}
				if (this.portableStoolInfo.IsInUse)
				{
					return this.portableStoolInfo.HeightBoost;
				}
				return 0;
			}
		}

		// Token: 0x170000DA RID: 218
		// (get) Token: 0x06000679 RID: 1657 RVA: 0x002C0A04 File Offset: 0x002BEC04
		public Rectangle HitboxForBestiaryNearbyCheck
		{
			get
			{
				Rectangle result = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
				result.Inflate(300, 200);
				return result;
			}
		}

		// Token: 0x170000DB RID: 219
		// (get) Token: 0x0600067A RID: 1658 RVA: 0x002C0A4E File Offset: 0x002BEC4E
		public bool IsStandingStillForSpecialEffects
		{
			get
			{
				return (double)Math.Abs(this.velocity.X) < 0.05 && (double)Math.Abs(this.velocity.Y) < 0.05;
			}
		}

		// Token: 0x170000DC RID: 220
		// (get) Token: 0x0600067B RID: 1659 RVA: 0x002C0A8A File Offset: 0x002BEC8A
		// (set) Token: 0x0600067C RID: 1660 RVA: 0x002C0ABE File Offset: 0x002BECBE
		public Vector2 MountedCenter
		{
			get
			{
				return new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + 21f + this.HeightOffsetHitboxCenter);
			}
			set
			{
				this.position = new Vector2(value.X - (float)(this.width / 2), value.Y - 21f - this.HeightOffsetHitboxCenter);
			}
		}

		// Token: 0x0600067D RID: 1661 RVA: 0x002C0AF0 File Offset: 0x002BECF0
		public void RotateRelativePoint(ref float x, ref float y)
		{
			Vector2 vector = this.RotatedRelativePoint(new Vector2(x, y), false, true);
			x = vector.X;
			y = vector.Y;
		}

		// Token: 0x0600067E RID: 1662 RVA: 0x002C0B20 File Offset: 0x002BED20
		public Vector2 RotatedRelativePointOld(Vector2 pos, bool rotateForward = true)
		{
			Vector2 value = this.position + this.fullRotationOrigin;
			Matrix matrix = Matrix.CreateRotationZ(this.fullRotation * (float)rotateForward.ToInt());
			pos -= this.position + this.fullRotationOrigin;
			pos = Vector2.Transform(pos, matrix);
			return pos + value;
		}

		// Token: 0x0600067F RID: 1663 RVA: 0x002C0B7C File Offset: 0x002BED7C
		public Vector2 RotatedRelativePoint(Vector2 pos, bool reverseRotation = false, bool addGfxOffY = true)
		{
			float num = reverseRotation ? (-this.fullRotation) : this.fullRotation;
			if (this.sleeping.isSleeping)
			{
				num = 0f;
			}
			Vector2 vector = base.Bottom + new Vector2(0f, this.gfxOffY);
			int num2 = this.mount.PlayerOffset / 2 + 4;
			Vector2 value = new Vector2(0f, (float)(-(float)num2)) + new Vector2(0f, (float)num2).RotatedBy((double)num, default(Vector2));
			if (addGfxOffY)
			{
				pos.Y += this.gfxOffY;
			}
			pos = vector + (pos - vector).RotatedBy((double)num, default(Vector2)) + value;
			if (this.sleeping.isSleeping)
			{
				Vector2 value2;
				this.sleeping.GetSleepingOffsetInfo(this, out value2);
				pos += value2;
			}
			if (this.sitting.isSitting)
			{
				Vector2 value3;
				float y;
				this.sitting.GetSittingOffsetInfo(this, out value3, out y);
				pos += value3 + new Vector2(0f, y);
			}
			return pos;
		}

		// Token: 0x170000DD RID: 221
		// (get) Token: 0x06000680 RID: 1664 RVA: 0x002C0CA3 File Offset: 0x002BEEA3
		public bool TileReplacementEnabled
		{
			get
			{
				return this.builderAccStatus[10] == 0;
			}
		}

		// Token: 0x170000DE RID: 222
		// (get) Token: 0x06000681 RID: 1665 RVA: 0x002C0CB1 File Offset: 0x002BEEB1
		public override Vector2 VisualPosition
		{
			get
			{
				return this.position + new Vector2(0f, this.gfxOffY);
			}
		}

		// Token: 0x170000DF RID: 223
		// (get) Token: 0x06000682 RID: 1666 RVA: 0x002C0CCE File Offset: 0x002BEECE
		public bool CCed
		{
			get
			{
				return this.frozen || this.webbed || this.stoned;
			}
		}

		// Token: 0x06000683 RID: 1667 RVA: 0x002C0CE8 File Offset: 0x002BEEE8
		public bool CanDemonHeartAccessoryBeShown()
		{
			return this.IsItemSlotUnlockedAndUsable(8) || this.armor[8].type > 0 || this.armor[18].type > 0 || this.dye[8].type > 0;
		}

		// Token: 0x06000684 RID: 1668 RVA: 0x002C0D28 File Offset: 0x002BEF28
		public bool CanMasterModeAccessoryBeShown()
		{
			return this.IsItemSlotUnlockedAndUsable(9) || this.armor[9].type > 0 || this.armor[19].type > 0 || this.dye[9].type > 0;
		}

		// Token: 0x06000685 RID: 1669 RVA: 0x002C0D74 File Offset: 0x002BEF74
		public int GetAmountOfExtraAccessorySlotsToShow()
		{
			int num = 0;
			if (this.CanDemonHeartAccessoryBeShown())
			{
				num++;
			}
			if (this.CanMasterModeAccessoryBeShown())
			{
				num++;
			}
			return num;
		}

		// Token: 0x170000E0 RID: 224
		// (get) Token: 0x06000686 RID: 1670 RVA: 0x002C0D9C File Offset: 0x002BEF9C
		public float miscCounterNormalized
		{
			get
			{
				return (float)this.miscCounter / 300f;
			}
		}

		// Token: 0x170000E1 RID: 225
		// (get) Token: 0x06000687 RID: 1671 RVA: 0x002C0DAB File Offset: 0x002BEFAB
		// (set) Token: 0x06000688 RID: 1672 RVA: 0x002C0DB9 File Offset: 0x002BEFB9
		public bool Male
		{
			get
			{
				return PlayerVariantID.Sets.Male[this.skinVariant];
			}
			set
			{
				if (value)
				{
					if (!this.Male)
					{
						this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
						return;
					}
				}
				else if (this.Male)
				{
					this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
				}
			}
		}

		// Token: 0x170000E2 RID: 226
		// (get) Token: 0x06000689 RID: 1673 RVA: 0x002C0DF3 File Offset: 0x002BEFF3
		// (set) Token: 0x0600068A RID: 1674 RVA: 0x002C0E01 File Offset: 0x002BF001
		public bool ZoneDungeon
		{
			get
			{
				return this.zone1[0];
			}
			set
			{
				this.zone1[0] = value;
			}
		}

		// Token: 0x170000E3 RID: 227
		// (get) Token: 0x0600068B RID: 1675 RVA: 0x002C0E10 File Offset: 0x002BF010
		// (set) Token: 0x0600068C RID: 1676 RVA: 0x002C0E1E File Offset: 0x002BF01E
		public bool ZoneCorrupt
		{
			get
			{
				return this.zone1[1];
			}
			set
			{
				this.zone1[1] = value;
			}
		}

		// Token: 0x170000E4 RID: 228
		// (get) Token: 0x0600068D RID: 1677 RVA: 0x002C0E2D File Offset: 0x002BF02D
		// (set) Token: 0x0600068E RID: 1678 RVA: 0x002C0E3B File Offset: 0x002BF03B
		public bool ZoneHallow
		{
			get
			{
				return this.zone1[2];
			}
			set
			{
				this.zone1[2] = value;
			}
		}

		// Token: 0x170000E5 RID: 229
		// (get) Token: 0x0600068F RID: 1679 RVA: 0x002C0E4A File Offset: 0x002BF04A
		// (set) Token: 0x06000690 RID: 1680 RVA: 0x002C0E58 File Offset: 0x002BF058
		public bool ZoneMeteor
		{
			get
			{
				return this.zone1[3];
			}
			set
			{
				this.zone1[3] = value;
			}
		}

		// Token: 0x170000E6 RID: 230
		// (get) Token: 0x06000691 RID: 1681 RVA: 0x002C0E67 File Offset: 0x002BF067
		// (set) Token: 0x06000692 RID: 1682 RVA: 0x002C0E75 File Offset: 0x002BF075
		public bool ZoneJungle
		{
			get
			{
				return this.zone1[4];
			}
			set
			{
				this.zone1[4] = value;
			}
		}

		// Token: 0x170000E7 RID: 231
		// (get) Token: 0x06000693 RID: 1683 RVA: 0x002C0E84 File Offset: 0x002BF084
		// (set) Token: 0x06000694 RID: 1684 RVA: 0x002C0E92 File Offset: 0x002BF092
		public bool ZoneSnow
		{
			get
			{
				return this.zone1[5];
			}
			set
			{
				this.zone1[5] = value;
			}
		}

		// Token: 0x170000E8 RID: 232
		// (get) Token: 0x06000695 RID: 1685 RVA: 0x002C0EA1 File Offset: 0x002BF0A1
		// (set) Token: 0x06000696 RID: 1686 RVA: 0x002C0EAF File Offset: 0x002BF0AF
		public bool ZoneCrimson
		{
			get
			{
				return this.zone1[6];
			}
			set
			{
				this.zone1[6] = value;
			}
		}

		// Token: 0x170000E9 RID: 233
		// (get) Token: 0x06000697 RID: 1687 RVA: 0x002C0EBE File Offset: 0x002BF0BE
		// (set) Token: 0x06000698 RID: 1688 RVA: 0x002C0ECC File Offset: 0x002BF0CC
		public bool ZoneWaterCandle
		{
			get
			{
				return this.zone1[7];
			}
			set
			{
				this.zone1[7] = value;
			}
		}

		// Token: 0x170000EA RID: 234
		// (get) Token: 0x06000699 RID: 1689 RVA: 0x002C0EDB File Offset: 0x002BF0DB
		// (set) Token: 0x0600069A RID: 1690 RVA: 0x002C0EE9 File Offset: 0x002BF0E9
		public bool ZonePeaceCandle
		{
			get
			{
				return this.zone2[0];
			}
			set
			{
				this.zone2[0] = value;
			}
		}

		// Token: 0x170000EB RID: 235
		// (get) Token: 0x0600069B RID: 1691 RVA: 0x002C0EF8 File Offset: 0x002BF0F8
		// (set) Token: 0x0600069C RID: 1692 RVA: 0x002C0F06 File Offset: 0x002BF106
		public bool ZoneTowerSolar
		{
			get
			{
				return this.zone2[1];
			}
			set
			{
				this.zone2[1] = value;
			}
		}

		// Token: 0x170000EC RID: 236
		// (get) Token: 0x0600069D RID: 1693 RVA: 0x002C0F15 File Offset: 0x002BF115
		// (set) Token: 0x0600069E RID: 1694 RVA: 0x002C0F23 File Offset: 0x002BF123
		public bool ZoneTowerVortex
		{
			get
			{
				return this.zone2[2];
			}
			set
			{
				this.zone2[2] = value;
			}
		}

		// Token: 0x170000ED RID: 237
		// (get) Token: 0x0600069F RID: 1695 RVA: 0x002C0F32 File Offset: 0x002BF132
		// (set) Token: 0x060006A0 RID: 1696 RVA: 0x002C0F40 File Offset: 0x002BF140
		public bool ZoneTowerNebula
		{
			get
			{
				return this.zone2[3];
			}
			set
			{
				this.zone2[3] = value;
			}
		}

		// Token: 0x170000EE RID: 238
		// (get) Token: 0x060006A1 RID: 1697 RVA: 0x002C0F4F File Offset: 0x002BF14F
		// (set) Token: 0x060006A2 RID: 1698 RVA: 0x002C0F5D File Offset: 0x002BF15D
		public bool ZoneTowerStardust
		{
			get
			{
				return this.zone2[4];
			}
			set
			{
				this.zone2[4] = value;
			}
		}

		// Token: 0x170000EF RID: 239
		// (get) Token: 0x060006A3 RID: 1699 RVA: 0x002C0F6C File Offset: 0x002BF16C
		// (set) Token: 0x060006A4 RID: 1700 RVA: 0x002C0F7A File Offset: 0x002BF17A
		public bool ZoneDesert
		{
			get
			{
				return this.zone2[5];
			}
			set
			{
				this.zone2[5] = value;
			}
		}

		// Token: 0x170000F0 RID: 240
		// (get) Token: 0x060006A5 RID: 1701 RVA: 0x002C0F89 File Offset: 0x002BF189
		// (set) Token: 0x060006A6 RID: 1702 RVA: 0x002C0F97 File Offset: 0x002BF197
		public bool ZoneGlowshroom
		{
			get
			{
				return this.zone2[6];
			}
			set
			{
				this.zone2[6] = value;
			}
		}

		// Token: 0x170000F1 RID: 241
		// (get) Token: 0x060006A7 RID: 1703 RVA: 0x002C0FA6 File Offset: 0x002BF1A6
		// (set) Token: 0x060006A8 RID: 1704 RVA: 0x002C0FB4 File Offset: 0x002BF1B4
		public bool ZoneUndergroundDesert
		{
			get
			{
				return this.zone2[7];
			}
			set
			{
				this.zone2[7] = value;
			}
		}

		// Token: 0x170000F2 RID: 242
		// (get) Token: 0x060006A9 RID: 1705 RVA: 0x002C0FC3 File Offset: 0x002BF1C3
		// (set) Token: 0x060006AA RID: 1706 RVA: 0x002C0FD1 File Offset: 0x002BF1D1
		public bool ZoneSkyHeight
		{
			get
			{
				return this.zone3[0];
			}
			set
			{
				this.zone3[0] = value;
			}
		}

		// Token: 0x170000F3 RID: 243
		// (get) Token: 0x060006AB RID: 1707 RVA: 0x002C0FE0 File Offset: 0x002BF1E0
		// (set) Token: 0x060006AC RID: 1708 RVA: 0x002C0FEE File Offset: 0x002BF1EE
		public bool ZoneOverworldHeight
		{
			get
			{
				return this.zone3[1];
			}
			set
			{
				this.zone3[1] = value;
			}
		}

		// Token: 0x170000F4 RID: 244
		// (get) Token: 0x060006AD RID: 1709 RVA: 0x002C0FFD File Offset: 0x002BF1FD
		// (set) Token: 0x060006AE RID: 1710 RVA: 0x002C100B File Offset: 0x002BF20B
		public bool ZoneDirtLayerHeight
		{
			get
			{
				return this.zone3[2];
			}
			set
			{
				this.zone3[2] = value;
			}
		}

		// Token: 0x170000F5 RID: 245
		// (get) Token: 0x060006AF RID: 1711 RVA: 0x002C101A File Offset: 0x002BF21A
		// (set) Token: 0x060006B0 RID: 1712 RVA: 0x002C1028 File Offset: 0x002BF228
		public bool ZoneRockLayerHeight
		{
			get
			{
				return this.zone3[3];
			}
			set
			{
				this.zone3[3] = value;
			}
		}

		// Token: 0x170000F6 RID: 246
		// (get) Token: 0x060006B1 RID: 1713 RVA: 0x002C1037 File Offset: 0x002BF237
		// (set) Token: 0x060006B2 RID: 1714 RVA: 0x002C1045 File Offset: 0x002BF245
		public bool ZoneUnderworldHeight
		{
			get
			{
				return this.zone3[4];
			}
			set
			{
				this.zone3[4] = value;
			}
		}

		// Token: 0x170000F7 RID: 247
		// (get) Token: 0x060006B3 RID: 1715 RVA: 0x002C1054 File Offset: 0x002BF254
		// (set) Token: 0x060006B4 RID: 1716 RVA: 0x002C1062 File Offset: 0x002BF262
		public bool ZoneBeach
		{
			get
			{
				return this.zone3[5];
			}
			set
			{
				this.zone3[5] = value;
			}
		}

		// Token: 0x170000F8 RID: 248
		// (get) Token: 0x060006B5 RID: 1717 RVA: 0x002C1071 File Offset: 0x002BF271
		// (set) Token: 0x060006B6 RID: 1718 RVA: 0x002C107F File Offset: 0x002BF27F
		public bool ZoneRain
		{
			get
			{
				return this.zone3[6];
			}
			set
			{
				this.zone3[6] = value;
			}
		}

		// Token: 0x170000F9 RID: 249
		// (get) Token: 0x060006B7 RID: 1719 RVA: 0x002C108E File Offset: 0x002BF28E
		// (set) Token: 0x060006B8 RID: 1720 RVA: 0x002C109C File Offset: 0x002BF29C
		public bool ZoneSandstorm
		{
			get
			{
				return this.zone3[7];
			}
			set
			{
				this.zone3[7] = value;
			}
		}

		// Token: 0x170000FA RID: 250
		// (get) Token: 0x060006B9 RID: 1721 RVA: 0x002C10AB File Offset: 0x002BF2AB
		// (set) Token: 0x060006BA RID: 1722 RVA: 0x002C10B9 File Offset: 0x002BF2B9
		public bool ZoneOldOneArmy
		{
			get
			{
				return this.zone4[0];
			}
			set
			{
				this.zone4[0] = value;
			}
		}

		// Token: 0x170000FB RID: 251
		// (get) Token: 0x060006BB RID: 1723 RVA: 0x002C10C8 File Offset: 0x002BF2C8
		// (set) Token: 0x060006BC RID: 1724 RVA: 0x002C10D6 File Offset: 0x002BF2D6
		public bool ZoneGranite
		{
			get
			{
				return this.zone4[1];
			}
			set
			{
				this.zone4[1] = value;
			}
		}

		// Token: 0x170000FC RID: 252
		// (get) Token: 0x060006BD RID: 1725 RVA: 0x002C10E5 File Offset: 0x002BF2E5
		// (set) Token: 0x060006BE RID: 1726 RVA: 0x002C10F3 File Offset: 0x002BF2F3
		public bool ZoneMarble
		{
			get
			{
				return this.zone4[2];
			}
			set
			{
				this.zone4[2] = value;
			}
		}

		// Token: 0x170000FD RID: 253
		// (get) Token: 0x060006BF RID: 1727 RVA: 0x002C1102 File Offset: 0x002BF302
		// (set) Token: 0x060006C0 RID: 1728 RVA: 0x002C1110 File Offset: 0x002BF310
		public bool ZoneHive
		{
			get
			{
				return this.zone4[3];
			}
			set
			{
				this.zone4[3] = value;
			}
		}

		// Token: 0x170000FE RID: 254
		// (get) Token: 0x060006C1 RID: 1729 RVA: 0x002C111F File Offset: 0x002BF31F
		// (set) Token: 0x060006C2 RID: 1730 RVA: 0x002C112D File Offset: 0x002BF32D
		public bool ZoneGemCave
		{
			get
			{
				return this.zone4[4];
			}
			set
			{
				this.zone4[4] = value;
			}
		}

		// Token: 0x170000FF RID: 255
		// (get) Token: 0x060006C3 RID: 1731 RVA: 0x002C113C File Offset: 0x002BF33C
		// (set) Token: 0x060006C4 RID: 1732 RVA: 0x002C114A File Offset: 0x002BF34A
		public bool ZoneLihzhardTemple
		{
			get
			{
				return this.zone4[5];
			}
			set
			{
				this.zone4[5] = value;
			}
		}

		// Token: 0x17000100 RID: 256
		// (get) Token: 0x060006C5 RID: 1733 RVA: 0x002C1159 File Offset: 0x002BF359
		// (set) Token: 0x060006C6 RID: 1734 RVA: 0x002C1167 File Offset: 0x002BF367
		public bool ZoneGraveyard
		{
			get
			{
				return this.zone4[6];
			}
			set
			{
				this.zone4[6] = value;
			}
		}

		// Token: 0x17000101 RID: 257
		// (get) Token: 0x060006C7 RID: 1735 RVA: 0x002C1176 File Offset: 0x002BF376
		// (set) Token: 0x060006C8 RID: 1736 RVA: 0x002C1184 File Offset: 0x002BF384
		public bool ZoneShadowCandle
		{
			get
			{
				return this.zone4[7];
			}
			set
			{
				this.zone4[7] = value;
			}
		}

		// Token: 0x17000102 RID: 258
		// (get) Token: 0x060006C9 RID: 1737 RVA: 0x002C1193 File Offset: 0x002BF393
		// (set) Token: 0x060006CA RID: 1738 RVA: 0x002C11A1 File Offset: 0x002BF3A1
		public bool ZoneShimmer
		{
			get
			{
				return this.zone5[0];
			}
			set
			{
				this.zone5[0] = value;
			}
		}

		// Token: 0x17000103 RID: 259
		// (get) Token: 0x060006CB RID: 1739 RVA: 0x002C11B0 File Offset: 0x002BF3B0
		public bool ShoppingZone_AnyBiome
		{
			get
			{
				return this.ZoneDungeon || this.ZoneCorrupt || this.ZoneCrimson || this.ZoneGlowshroom || this.ZoneHallow || this.ZoneJungle || this.ZoneSnow || this.ZoneBeach || this.ZoneDesert;
			}
		}

		// Token: 0x17000104 RID: 260
		// (get) Token: 0x060006CC RID: 1740 RVA: 0x002C1205 File Offset: 0x002BF405
		public bool ShoppingZone_BelowSurface
		{
			get
			{
				return (double)this.position.Y > Main.worldSurface * 16.0;
			}
		}

		// Token: 0x17000105 RID: 261
		// (get) Token: 0x060006CD RID: 1741 RVA: 0x002C1224 File Offset: 0x002BF424
		public bool ShoppingZone_Forest
		{
			get
			{
				return !this.ShoppingZone_AnyBiome && !this.ShoppingZone_BelowSurface;
			}
		}

		// Token: 0x17000106 RID: 262
		// (get) Token: 0x060006CE RID: 1742 RVA: 0x002C1239 File Offset: 0x002BF439
		public Vector2 Directions
		{
			get
			{
				return new Vector2((float)this.direction, this.gravDir);
			}
		}

		// Token: 0x17000107 RID: 263
		// (get) Token: 0x060006CF RID: 1743 RVA: 0x002C124D File Offset: 0x002BF44D
		public Item HeldItem
		{
			get
			{
				return this.inventory[this.selectedItem];
			}
		}

		// Token: 0x17000108 RID: 264
		// (get) Token: 0x060006D0 RID: 1744 RVA: 0x002C125C File Offset: 0x002BF45C
		public int breathCDMax
		{
			get
			{
				int num = 7;
				if (this.inventory[this.selectedItem].type == 186 && this.itemAnimation == 0)
				{
					num *= 2;
				}
				if (this.accDivingHelm)
				{
					num *= 6;
				}
				return num;
			}
		}

		// Token: 0x17000109 RID: 265
		// (get) Token: 0x060006D1 RID: 1745 RVA: 0x002C129D File Offset: 0x002BF49D
		public bool ShouldFloatInWater
		{
			get
			{
				return this.canFloatInWater && !this.controlDown && (!this.mount.Active || this.mount.Type == 37);
			}
		}

		// Token: 0x1700010A RID: 266
		// (get) Token: 0x060006D2 RID: 1746 RVA: 0x002C12CF File Offset: 0x002BF4CF
		public bool CanBeTalkedTo
		{
			get
			{
				return this.active && !this.dead && !this.ShouldNotDraw && this.stealth == 1f;
			}
		}

		// Token: 0x1700010B RID: 267
		// (get) Token: 0x060006D3 RID: 1747 RVA: 0x002C12F8 File Offset: 0x002BF4F8
		// (set) Token: 0x060006D4 RID: 1748 RVA: 0x002C1306 File Offset: 0x002BF506
		public bool IsVoidVaultEnabled
		{
			get
			{
				return this.voidVaultInfo[0];
			}
			set
			{
				this.voidVaultInfo[0] = value;
			}
		}

		// Token: 0x1700010C RID: 268
		// (get) Token: 0x060006D5 RID: 1749 RVA: 0x002C1315 File Offset: 0x002BF515
		public bool DeadOrGhost
		{
			get
			{
				return this.dead || this.ghost;
			}
		}

		// Token: 0x1700010D RID: 269
		// (get) Token: 0x060006D6 RID: 1750 RVA: 0x002C1327 File Offset: 0x002BF527
		public bool TryingToHoverUp
		{
			get
			{
				return this.controlUp || this.tryKeepingHoveringUp;
			}
		}

		// Token: 0x1700010E RID: 270
		// (get) Token: 0x060006D7 RID: 1751 RVA: 0x002C1339 File Offset: 0x002BF539
		public bool TryingToHoverDown
		{
			get
			{
				return this.controlDown || this.tryKeepingHoveringDown;
			}
		}

		// Token: 0x1700010F RID: 271
		// (get) Token: 0x060006D8 RID: 1752 RVA: 0x002C134B File Offset: 0x002BF54B
		public Vector2 DefaultSize
		{
			get
			{
				return new Vector2(20f, 42f);
			}
		}

		// Token: 0x060006D9 RID: 1753 RVA: 0x002C135C File Offset: 0x002BF55C
		public EntityShadowInfo GetAdvancedShadow(int shadowIndex)
		{
			if (shadowIndex > this.availableAdvancedShadowsCount)
			{
				shadowIndex = this.availableAdvancedShadowsCount;
			}
			int num = (this._lastAddedAvancedShadow - shadowIndex).ModulusPositive(60);
			return this._advancedShadows[num];
		}

		// Token: 0x060006DA RID: 1754 RVA: 0x002C1398 File Offset: 0x002BF598
		public void UpdateAdvancedShadows()
		{
			this.availableAdvancedShadowsCount++;
			if (this.availableAdvancedShadowsCount > 60)
			{
				this.availableAdvancedShadowsCount = 60;
			}
			int num = this._lastAddedAvancedShadow + 1;
			this._lastAddedAvancedShadow = num;
			if (num >= 60)
			{
				this._lastAddedAvancedShadow = 0;
			}
			this._advancedShadows[this._lastAddedAvancedShadow].CopyPlayer(this);
		}

		// Token: 0x060006DB RID: 1755 RVA: 0x002C13F8 File Offset: 0x002BF5F8
		public void ResetAdvancedShadows()
		{
			this.availableAdvancedShadowsCount = 0;
		}

		// Token: 0x060006DC RID: 1756 RVA: 0x002C1401 File Offset: 0x002BF601
		public void SetCompositeArmFront(bool enabled, Player.CompositeArmStretchAmount stretch, float rotation)
		{
			if (this.gravDir == -1f)
			{
				rotation = -rotation;
			}
			this.compositeFrontArm = new Player.CompositeArmData(enabled, stretch, rotation);
		}

		// Token: 0x060006DD RID: 1757 RVA: 0x002C1422 File Offset: 0x002BF622
		public void SetCompositeArmBack(bool enabled, Player.CompositeArmStretchAmount stretch, float rotation)
		{
			if (this.gravDir == -1f)
			{
				rotation = -rotation;
			}
			this.compositeBackArm = new Player.CompositeArmData(enabled, stretch, rotation);
		}

		// Token: 0x17000110 RID: 272
		// (get) Token: 0x060006DE RID: 1758 RVA: 0x002C1443 File Offset: 0x002BF643
		// (set) Token: 0x060006DF RID: 1759 RVA: 0x002C145B File Offset: 0x002BF65B
		public bool UsingBiomeTorches
		{
			get
			{
				return this.unlockedBiomeTorches && this.builderAccStatus[11] == 0;
			}
			set
			{
				this.builderAccStatus[11] = (value ? 0 : 1);
			}
		}

		// Token: 0x17000111 RID: 273
		// (get) Token: 0x060006E0 RID: 1760 RVA: 0x002C146D File Offset: 0x002BF66D
		// (set) Token: 0x060006E1 RID: 1761 RVA: 0x002C147F File Offset: 0x002BF67F
		public bool UsingSuperCart
		{
			get
			{
				return this.unlockedSuperCart && this.enabledSuperCart;
			}
			set
			{
				this.enabledSuperCart = value;
			}
		}

		// Token: 0x17000112 RID: 274
		// (get) Token: 0x060006E2 RID: 1762 RVA: 0x002C1488 File Offset: 0x002BF688
		public float bowEffectiveDamage
		{
			get
			{
				return (this.rangedDamage / this.rangedMultDamage + this.arrowDamageAdditiveStack) * this.rangedMultDamage * this.arrowDamage;
			}
		}

		// Token: 0x17000113 RID: 275
		// (get) Token: 0x060006E3 RID: 1763 RVA: 0x002C14AC File Offset: 0x002BF6AC
		public float gunEffectiveDamage
		{
			get
			{
				return this.rangedDamage * this.bulletDamage;
			}
		}

		// Token: 0x17000114 RID: 276
		// (get) Token: 0x060006E4 RID: 1764 RVA: 0x002C14BB File Offset: 0x002BF6BB
		public float specialistEffectiveDamage
		{
			get
			{
				return this.rangedDamage * this.rocketDamage;
			}
		}

		// Token: 0x17000115 RID: 277
		// (get) Token: 0x060006E5 RID: 1765 RVA: 0x002C14CA File Offset: 0x002BF6CA
		public bool ShouldNotDraw
		{
			get
			{
				return this.invis && this.itemAnimation == 0 && !this.isDisplayDollOrInanimate && !this.isHatRackDoll;
			}
		}

		// Token: 0x17000116 RID: 278
		// (get) Token: 0x060006E6 RID: 1766 RVA: 0x002C14F1 File Offset: 0x002BF6F1
		// (set) Token: 0x060006E7 RID: 1767 RVA: 0x002C14F9 File Offset: 0x002BF6F9
		public int talkNPC { get; private set; }

		// Token: 0x17000117 RID: 279
		// (get) Token: 0x060006E8 RID: 1768 RVA: 0x002C1502 File Offset: 0x002BF702
		public bool isLockedToATile
		{
			get
			{
				return this.sitting.isSitting || this.sleeping.isSleeping;
			}
		}

		// Token: 0x060006E9 RID: 1769 RVA: 0x002C1520 File Offset: 0x002BF720
		public void SetTalkNPC(int npcIndex, bool fromNet = false)
		{
			this.talkNPC = npcIndex;
			if (Main.netMode != 1 && npcIndex >= 0 && npcIndex < 200)
			{
				Main.BestiaryTracker.Chats.RegisterChatStartWith(Main.npc[npcIndex]);
			}
			if (this.talkNPC == -1)
			{
				this.currentShoppingSettings = ShoppingSettings.NotInShop;
			}
			else
			{
				this.currentShoppingSettings = Main.ShopHelper.GetShoppingSettings(this, Main.npc[this.talkNPC]);
			}
			if (this.currentShoppingSettings.PriceAdjustment <= 0.8199999928474426)
			{
				AchievementsHelper.HandleSpecialEvent(this, 20);
			}
		}

		// Token: 0x17000118 RID: 280
		// (get) Token: 0x060006EA RID: 1770 RVA: 0x002C15AF File Offset: 0x002BF7AF
		public bool PortalPhysicsEnabled
		{
			get
			{
				return this._portalPhysicsTime > 0 && !this.mount.Active;
			}
		}

		// Token: 0x17000119 RID: 281
		// (get) Token: 0x060006EB RID: 1771 RVA: 0x002C15CC File Offset: 0x002BF7CC
		public bool MountFishronSpecial
		{
			get
			{
				return this.statLife < this.statLifeMax2 / 2 || (this.wet && !this.lavaWet && !this.honeyWet) || this.dripping || this.MountFishronSpecialCounter > 0f || (Main.raining && WorldGen.InAPlaceWithWind(this.position, this.width, this.height));
			}
		}

		// Token: 0x1700011A RID: 282
		// (get) Token: 0x060006EC RID: 1772 RVA: 0x002C1638 File Offset: 0x002BF838
		public bool HasMinionRestTarget
		{
			get
			{
				return this.MinionRestTargetPoint != Vector2.Zero;
			}
		}

		// Token: 0x1700011B RID: 283
		// (get) Token: 0x060006ED RID: 1773 RVA: 0x002C164A File Offset: 0x002BF84A
		public bool HasMinionAttackTargetNPC
		{
			get
			{
				return this.MinionAttackTargetNPC != -1;
			}
		}

		// Token: 0x1700011C RID: 284
		// (get) Token: 0x060006EE RID: 1774 RVA: 0x002C1658 File Offset: 0x002BF858
		public bool ItemTimeIsZero
		{
			get
			{
				return this.itemTime == 0;
			}
		}

		// Token: 0x060006EF RID: 1775 RVA: 0x002C1663 File Offset: 0x002BF863
		public void SetItemTime(int frames)
		{
			this.itemTime = frames;
			this.itemTimeMax = frames;
		}

		// Token: 0x060006F0 RID: 1776 RVA: 0x002C1673 File Offset: 0x002BF873
		public void ApplyItemTime(Item sItem)
		{
			this.SetItemTime(sItem.useTime);
		}

		// Token: 0x060006F1 RID: 1777 RVA: 0x002C1681 File Offset: 0x002BF881
		public void ApplyItemTime(Item sItem, float multiplier)
		{
			this.SetItemTime((int)((float)sItem.useTime * multiplier));
		}

		// Token: 0x060006F2 RID: 1778 RVA: 0x002C1693 File Offset: 0x002BF893
		public void SetDummyItemTime(int frames)
		{
			this.itemAnimation = frames;
			this.itemTime = frames;
			this.itemTimeMax = frames + 1;
		}

		// Token: 0x1700011D RID: 285
		// (get) Token: 0x060006F3 RID: 1779 RVA: 0x002C16AC File Offset: 0x002BF8AC
		public bool ItemAnimationJustStarted
		{
			get
			{
				return this.itemAnimation == this.itemAnimationMax - 1;
			}
		}

		// Token: 0x060006F4 RID: 1780 RVA: 0x002C16BE File Offset: 0x002BF8BE
		private void SetItemAnimation(int frames)
		{
			this.itemAnimation = frames;
			this.itemAnimationMax = frames;
		}

		// Token: 0x060006F5 RID: 1781 RVA: 0x002C16D0 File Offset: 0x002BF8D0
		private void ApplyItemAnimation(Item sItem)
		{
			int num = 0;
			if (sItem.autoReuse && sItem.reuseDelay == 0 && sItem.useTime <= sItem.useAnimation && sItem.shoot > 0 && sItem.useStyle == 5)
			{
				num = 1;
			}
			if (sItem.melee)
			{
				this.SetItemAnimation((int)((float)sItem.useAnimation * this.meleeSpeed));
			}
			else if (sItem.summon && ItemID.Sets.SummonerWeaponThatScalesWithAttackSpeed[sItem.type])
			{
				this.SetItemAnimation((int)((float)sItem.useAnimation * this.summonerWeaponSpeedBonus * this.whipUseTimeMultiplier));
			}
			else if (sItem.createTile >= 0)
			{
				this.SetItemAnimation((int)((float)sItem.useAnimation * this.tileSpeed));
			}
			else if (sItem.createWall >= 0)
			{
				this.SetItemAnimation((int)((float)sItem.useAnimation * this.wallSpeed));
			}
			else
			{
				this.SetItemAnimation(sItem.useAnimation + num);
			}
			this.reuseDelay = sItem.reuseDelay;
		}

		// Token: 0x060006F6 RID: 1782 RVA: 0x002C17C1 File Offset: 0x002BF9C1
		public void MatchItemTimeToItemAnimation()
		{
			this.itemTime = this.itemAnimation;
		}

		// Token: 0x060006F7 RID: 1783 RVA: 0x002C17CF File Offset: 0x002BF9CF
		public bool InOpposingTeam(Player otherPlayer)
		{
			return this.hostile && otherPlayer.hostile && (otherPlayer.team == 0 || otherPlayer.team != this.team);
		}

		// Token: 0x060006F8 RID: 1784 RVA: 0x0003266D File Offset: 0x0003086D
		public bool TeamChangeAllowed()
		{
			return true;
		}

		// Token: 0x060006F9 RID: 1785 RVA: 0x002C1800 File Offset: 0x002BFA00
		public void HealEffect(int healAmount, bool broadcast = true)
		{
			CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealLife, healAmount, false, false);
			if (broadcast && Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(35, -1, -1, null, this.whoAmI, (float)healAmount, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060006FA RID: 1786 RVA: 0x002C187C File Offset: 0x002BFA7C
		public void ManaEffect(int manaAmount)
		{
			CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealMana, manaAmount, false, false);
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(43, -1, -1, null, this.whoAmI, (float)manaAmount, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060006FB RID: 1787 RVA: 0x002C18F4 File Offset: 0x002BFAF4
		public void InterruptItemUsageIfOverTile(int tileTypeToBeOver)
		{
			Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
			if (tile != null && tile.active() && (int)tile.type == tileTypeToBeOver)
			{
				Main.blockMouse = true;
			}
		}

		// Token: 0x060006FC RID: 1788 RVA: 0x002C1930 File Offset: 0x002BFB30
		public Vector2 GetHairDrawOffset(int hairID, bool hatHair)
		{
			Vector2 zero = Vector2.Zero;
			if (!hatHair && hairID == 163)
			{
				return new Vector2(0f, -2f) * this.Directions;
			}
			if (hairID == 164)
			{
				return new Vector2(-2f, 0f) * this.Directions;
			}
			return zero;
		}

		// Token: 0x060006FD RID: 1789 RVA: 0x002C1990 File Offset: 0x002BFB90
		public Vector2 GetHelmetDrawOffset()
		{
			Vector2 vector = Vector2.Zero;
			if (this.head == 270)
			{
				vector = new Vector2(-10f, 0f) * this.Directions;
				if (this.direction == -1)
				{
					vector.X -= 2f;
				}
			}
			else if (this.head == 268)
			{
				vector = new Vector2(0f, -6f) * this.Directions;
			}
			else if (this.head == 222)
			{
				float y = 0f;
				if (this.hair == 15 || this.hair == 76 || this.hair == 108)
				{
					y = 4f;
				}
				vector = new Vector2(0f, y) * this.Directions;
			}
			else if (this.head == 272)
			{
				if (this.hair == 15 || this.hair == 76 || this.hair == 108)
				{
					vector = new Vector2(0f, 4f) * this.Directions;
				}
			}
			else if (this.head == 275)
			{
				vector = new Vector2(0f, -4f) * this.Directions;
			}
			vector = this.GetHelmetOffsetAddonFromFaceHead(vector);
			return vector;
		}

		// Token: 0x060006FE RID: 1790 RVA: 0x002C1AE4 File Offset: 0x002BFCE4
		public Vector2 GetBeardDrawOffsetFromHelmet()
		{
			Vector2 zero = Vector2.Zero;
			int num = this.head;
			switch (num)
			{
			case 146:
			case 150:
			case 152:
				zero = new Vector2((float)(2 * this.direction), 0f);
				break;
			case 147:
			case 149:
			case 151:
				break;
			case 148:
				zero = new Vector2((float)(2 * this.direction), 0f);
				break;
			default:
				if (num == 165)
				{
					zero = new Vector2((float)(8 * this.direction), 0f);
				}
				break;
			}
			return zero;
		}

		// Token: 0x060006FF RID: 1791 RVA: 0x002C1B74 File Offset: 0x002BFD74
		public Vector2 GetFaceHeadOffsetFromHelmet()
		{
			Vector2 zero = Vector2.Zero;
			if (this.faceHead == 12 || this.faceHead == 13 || this.faceHead == 10 || this.faceHead == 11 || this.faceHead == 17 || this.faceHead == 18 || this.faceHead == 15 || this.faceHead == 16)
			{
				int num = this.head;
				if (num != 20)
				{
					if (num == 196)
					{
						zero = new Vector2(2f, 0f);
						goto IL_96;
					}
					if (num != 221)
					{
						goto IL_96;
					}
				}
				zero = new Vector2(0f, -2f);
			}
			IL_96:
			return zero * this.Directions;
		}

		// Token: 0x06000700 RID: 1792 RVA: 0x002C1C28 File Offset: 0x002BFE28
		public Vector2 GetHelmetOffsetAddonFromFaceHead(Vector2 headOffset)
		{
			if (this.faceHead == 12 || this.faceHead == 13 || this.faceHead == 10 || this.faceHead == 11 || this.faceHead == 17 || this.faceHead == 18 || this.faceHead == 15 || this.faceHead == 16)
			{
				int num = this.head;
				if (num <= 97)
				{
					if (num <= 26)
					{
						if (num <= 21)
						{
							if (num != 16 && num != 21)
							{
								return headOffset;
							}
							goto IL_160;
						}
						else
						{
							if (num == 24)
							{
								goto IL_160;
							}
							if (num != 26)
							{
								return headOffset;
							}
						}
					}
					else if (num <= 67)
					{
						if (num != 51)
						{
							switch (num)
							{
							case 59:
							case 64:
								goto IL_187;
							case 60:
								break;
							case 61:
							case 62:
							case 63:
							case 66:
								return headOffset;
							case 65:
							case 67:
								goto IL_160;
							default:
								return headOffset;
							}
						}
					}
					else if (num != 81)
					{
						if (num - 94 <= 2)
						{
							goto IL_160;
						}
						if (num != 97)
						{
							return headOffset;
						}
						return headOffset + new Vector2(-2f, 0f) * this.Directions;
					}
					return headOffset + new Vector2(2f, -2f) * this.Directions;
				}
				if (num <= 159)
				{
					if (num <= 117)
					{
						if (num == 106)
						{
							goto IL_187;
						}
						if (num != 117)
						{
							return headOffset;
						}
						return headOffset + new Vector2(-4f, 0f) * this.Directions;
					}
					else
					{
						if (num == 138)
						{
							goto IL_187;
						}
						if (num != 159)
						{
							return headOffset;
						}
					}
				}
				else if (num <= 220)
				{
					if (num != 181 && num != 220)
					{
						return headOffset;
					}
					goto IL_187;
				}
				else if (num != 222 && num != 231 && num != 250)
				{
					return headOffset;
				}
				IL_160:
				return headOffset + new Vector2(2f, 0f) * this.Directions;
				IL_187:
				headOffset += new Vector2(0f, -2f) * this.Directions;
			}
			return headOffset;
		}

		// Token: 0x06000701 RID: 1793 RVA: 0x002C1E4C File Offset: 0x002C004C
		public Vector2 GetLegsDrawOffset()
		{
			Vector2 result = Vector2.Zero;
			if (this.legs == 226)
			{
				result = new Vector2(-6f, 0f) * this.Directions;
			}
			return result;
		}

		// Token: 0x06000702 RID: 1794 RVA: 0x002C1E88 File Offset: 0x002C0088
		public void AccumulateGolfingScore(int score)
		{
			int num = score;
			if (this.golferScoreAccumulated + num > 1000000000)
			{
				num = 1000000000 - this.golferScoreAccumulated;
			}
			this.golferScoreAccumulated += num;
		}

		// Token: 0x06000703 RID: 1795 RVA: 0x002C1EC4 File Offset: 0x002C00C4
		public static byte FindClosest(Vector2 Position, int Width, int Height)
		{
			byte result = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					result = (byte)i;
					break;
				}
			}
			float num = -1f;
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && !Main.player[j].dead)
				{
					float num2 = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - (Position.X + (float)(Width / 2))) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - (Position.Y + (float)(Height / 2)));
					if (num == -1f || num2 < num)
					{
						num = num2;
						result = (byte)j;
					}
				}
			}
			return result;
		}

		// Token: 0x06000704 RID: 1796 RVA: 0x002C1FAC File Offset: 0x002C01AC
		public void ToggleInv()
		{
			bool grappleAndInteractAreShared = PlayerInput.GrappleAndInteractAreShared;
			if (Main.mapFullscreen)
			{
				Main.mapFullscreen = false;
				this.releaseInventory = false;
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
				if (PlayerInput.GrappleAndInteractAreShared)
				{
					this.LockGamepadTileInteractions();
				}
			}
			else if (PlayerInput.InBuildingMode)
			{
				PlayerInput.ExitBuildingMode();
			}
			else if (Main.ingameOptionsWindow)
			{
				if (PlayerInput.UsingGamepadUI && UILinkPointNavigator.CurrentPage == 1002)
				{
					UILinkPointNavigator.ChangePage(1001);
				}
				else
				{
					IngameOptions.Close();
				}
			}
			else if (Main.inFancyUI)
			{
				IngameFancyUI.Close();
			}
			else if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Active = false;
			}
			else if (this.talkNPC >= 0)
			{
				this.SetTalkNPC(-1, false);
				Main.npcChatCornerItem = 0;
				Main.npcChatText = "";
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
				if (PlayerInput.UsingGamepad)
				{
					Main.npcChatRelease = false;
				}
			}
			else if (this.sign >= 0)
			{
				this.sign = -1;
				Main.editSign = false;
				Main.npcChatText = "";
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			else if (Main.clothesWindow)
			{
				Main.CancelClothesWindow(false);
			}
			else if (!Main.playerInventory)
			{
				Player.OpenInventory();
			}
			else
			{
				Main.playerInventory = false;
				if (this.channel && Main.mouseItem != null && !Main.mouseItem.IsAir)
				{
					this.channel = false;
				}
				this.tileEntityAnchor.Clear();
				if (!PlayerInput.UsingGamepad)
				{
					Main.EquipPageSelected = 0;
				}
				else
				{
					PlayerInput.NavigatorUnCachePosition();
					Main.GamepadCursorAlpha = 0f;
					Player.BlockInteractionWithProjectiles = 3;
					if (PlayerInput.GrappleAndInteractAreShared)
					{
						this.LockGamepadTileInteractions();
					}
				}
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
				if (ItemSlot.Options.HighlightNewItems)
				{
					Item[] array = this.inventory;
					for (int i = 0; i < array.Length; i++)
					{
						array[i].newAndShiny = false;
					}
				}
				if (PlayerInput.UsingGamepad)
				{
					Main.npcChatRelease = false;
					this.tileInteractionHappened = true;
					this.releaseInventory = false;
					Main.mouseRight = true;
				}
			}
			if (grappleAndInteractAreShared)
			{
				this.GamepadEnableGrappleCooldown();
			}
		}

		// Token: 0x06000705 RID: 1797 RVA: 0x002C21DE File Offset: 0x002C03DE
		private static void OpenInventory()
		{
			Recipe.FindRecipes(false);
			Main.playerInventory = true;
			Main.EquipPageSelected = 0;
			SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
		}

		// Token: 0x06000706 RID: 1798 RVA: 0x002C2208 File Offset: 0x002C0408
		public void ToggleCreativeMenu()
		{
			if (this.dead)
			{
				return;
			}
			if (this.difficulty != 3)
			{
				return;
			}
			bool flag = false;
			if (Main.mapFullscreen)
			{
				Main.mapFullscreen = false;
				flag = true;
			}
			if (PlayerInput.InBuildingMode)
			{
				PlayerInput.ExitBuildingMode();
			}
			if (Main.ingameOptionsWindow)
			{
				IngameOptions.Close();
			}
			if (Main.inFancyUI)
			{
				IngameFancyUI.Close();
			}
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Active = false;
			}
			if (this.talkNPC >= 0)
			{
				this.SetTalkNPC(-1, false);
				Main.npcChatCornerItem = 0;
				Main.npcChatText = "";
				flag = true;
				if (PlayerInput.UsingGamepad)
				{
					Main.npcChatRelease = false;
				}
			}
			if (this.sign >= 0)
			{
				this.sign = -1;
				Main.editSign = false;
				Main.npcChatText = "";
				flag = true;
			}
			else if (Main.clothesWindow)
			{
				Main.CancelClothesWindow(false);
			}
			if (this.tileEntityAnchor.InUse)
			{
				Recipe.FindRecipes(false);
				this.tileEntityAnchor.Clear();
				flag = true;
			}
			if (flag)
			{
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			if (!Main.playerInventory)
			{
				Player.OpenInventory();
			}
			Main.CreativeMenu.ToggleMenu();
		}

		// Token: 0x06000707 RID: 1799 RVA: 0x002C2324 File Offset: 0x002C0524
		public void dropItemCheck()
		{
			if (!Main.playerInventory)
			{
				this.noThrow = 0;
			}
			if (this.noThrow > 0)
			{
				this.noThrow--;
			}
			GetItemSettings getItemInDropItemCheck = GetItemSettings.GetItemInDropItemCheck;
			if (!Main.InGuideCraftMenu && Main.guideItem.type > 0)
			{
				Main.guideItem.position = base.Center;
				Item item = this.GetItem(this.whoAmI, Main.guideItem, getItemInDropItemCheck);
				if (item.stack > 0)
				{
					int num = Item.NewItem(this.GetItemSource_Misc(4), (int)this.position.X, (int)this.position.Y, this.width, this.height, item.type, item.stack, false, (int)Main.guideItem.prefix, true, false);
					Main.item[num].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.guideItem = new Item();
			}
			if (!Main.InReforgeMenu && Main.reforgeItem.type > 0)
			{
				Main.reforgeItem.position = base.Center;
				Item item2 = this.GetItem(this.whoAmI, Main.reforgeItem, getItemInDropItemCheck);
				if (item2.stack > 0)
				{
					int num2 = Item.NewItem(this.GetItemSource_Misc(4), (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, (int)Main.reforgeItem.prefix, true, false);
					Main.item[num2].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num2, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.reforgeItem = new Item();
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.inventory[58] = Main.mouseItem.Clone();
			}
			bool flag = true;
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				if (!Main.gamePaused)
				{
					Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
					Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
					if (this.gravDir == -1f)
					{
						Player.tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
					}
				}
				if (this.selectedItem != 58)
				{
					this.oldSelectItem = this.selectedItem;
				}
				this.selectedItem = 58;
				flag = false;
			}
			if (flag && this.selectedItem == 58 && this.ItemTimeIsZero && this.itemAnimation == 0)
			{
				this.selectedItem = this.oldSelectItem;
			}
			if (Main.mouseItem.type > 0 && !Main.playerInventory)
			{
				Main.mouseItem.position = base.Center;
				Item item3 = this.GetItem(this.whoAmI, Main.mouseItem, getItemInDropItemCheck);
				if (item3.stack > 0)
				{
					int num3 = Item.NewItem(this.GetItemSource_Misc(4), (int)this.position.X, (int)this.position.Y, this.width, this.height, item3.type, item3.stack, false, (int)Main.mouseItem.prefix, true, false);
					Main.item[num3].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num3, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.mouseItem = new Item();
				this.inventory[58] = new Item();
				Recipe.FindRecipes(false);
			}
			if (((this.controlThrow && this.releaseThrow && !this.inventory[this.selectedItem].favorited && this.inventory[this.selectedItem].type > 0 && !Main.drawingPlayerChat) || (((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)) && this.noThrow <= 0)
			{
				this.DropSelectedItem();
			}
			if (Main.gamePaused && this.selectedItem == 58)
			{
				this.selectedItem = this.oldSelectItem;
			}
		}

		// Token: 0x06000708 RID: 1800 RVA: 0x002C2788 File Offset: 0x002C0988
		public void DropSelectedItem()
		{
			if (Main.mouseItem != null && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				this.DropSelectedItem(58, ref this.inventory[58]);
				return;
			}
			this.DropSelectedItem(this.selectedItem, ref this.inventory[this.selectedItem]);
		}

		// Token: 0x06000709 RID: 1801 RVA: 0x002C27EC File Offset: 0x002C09EC
		public void DropSelectedItem(int slot, ref Item theItemWeDrop)
		{
			bool flag = false;
			if (theItemWeDrop.favorited)
			{
				theItemWeDrop = this.GetItem(this.whoAmI, theItemWeDrop, GetItemSettings.GetItemInDropItemCheck);
				if (slot == 58)
				{
					Main.mouseItem = theItemWeDrop;
				}
				Recipe.FindRecipes(false);
				if (theItemWeDrop.type == 0)
				{
					flag = true;
				}
			}
			if (flag)
			{
				return;
			}
			Item item = new Item();
			if (((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				item = theItemWeDrop;
				theItemWeDrop = Main.mouseItem;
				this.delayUseItem = true;
				this.controlUseItem = false;
			}
			if (this.whoAmI == Main.myPlayer && theItemWeDrop.type == 5095)
			{
				LucyAxeMessage.Create(LucyAxeMessage.MessageSource.ThrownAway, base.Top, new Vector2((float)(this.direction * 7), -2f));
			}
			int num = Item.NewItem(this.GetItemSource_Misc(4), (int)this.position.X, (int)this.position.Y, this.width, this.height, theItemWeDrop.type, 1, false, 0, false, false);
			theItemWeDrop.position = Main.item[num].position;
			Main.item[num] = theItemWeDrop;
			theItemWeDrop = new Item();
			if (slot == 58)
			{
				Main.mouseItem = new Item();
			}
			Item item2 = Main.item[num];
			if (Main.netMode == 0)
			{
				item2.noGrabDelay = 100;
			}
			item2.velocity.Y = -2f;
			item2.velocity.X = (float)(4 * this.direction) + this.velocity.X;
			item2.favorited = false;
			item2.newAndShiny = false;
			if (((Main.mouseRight && !this.mouseInterface) || !Main.playerInventory) && Main.mouseItem.type > 0)
			{
				theItemWeDrop = item;
				Main.mouseItem = new Item();
			}
			else
			{
				this.SetItemAnimation(10);
				this.JustDroppedAnItem = true;
				this.DropSelectedItem_InterruptActionsThatUseAnimations();
			}
			Recipe.FindRecipes(false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600070A RID: 1802 RVA: 0x002C2A00 File Offset: 0x002C0C00
		public void PlayDroppedItemAnimation(int time)
		{
			this.nonTorch = this.selectedItem;
			int num = 58;
			this.inventory[num].TurnToAir(false);
			this.selectedItem = num;
			this.JustDroppedAnItem = true;
			this.SetItemAnimation(time);
			this.SetItemTime(time);
			this.DropSelectedItem_InterruptActionsThatUseAnimations();
		}

		// Token: 0x0600070B RID: 1803 RVA: 0x002C2A4C File Offset: 0x002C0C4C
		private void DropSelectedItem_InterruptActionsThatUseAnimations()
		{
			if (this.heldProj >= 0)
			{
				Projectile projectile = Main.projectile[this.heldProj];
				if (projectile.active && projectile.owner == this.whoAmI)
				{
					projectile.Kill();
				}
			}
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile2 = Main.projectile[i];
				if (projectile2.active && projectile2.owner == this.whoAmI && (projectile2.aiStyle == 61 || projectile2.aiStyle == 160))
				{
					projectile2.Kill();
				}
			}
		}

		// Token: 0x0600070C RID: 1804 RVA: 0x002C2AD8 File Offset: 0x002C0CD8
		public int FindBuffIndex(int type)
		{
			if (this.buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffTime[i] >= 1 && this.buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x0600070D RID: 1805 RVA: 0x002C2B1C File Offset: 0x002C0D1C
		public void AddBuff(int type, int timeToAdd, bool quiet = true, bool foodHack = false)
		{
			if (this.buffImmune[type])
			{
				return;
			}
			bool flag = !quiet && Main.netMode == 1 && Main.pvpBuff[type] && Main.myPlayer != this.whoAmI;
			if (!flag && BuffID.Sets.IsFedState[type])
			{
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (BuffID.Sets.IsFedState[this.buffType[i]])
					{
						this.DelBuff(i);
					}
				}
			}
			int num = this.AddBuff_DetermineBuffTimeToAdd(type, timeToAdd);
			if (this.AddBuff_TryUpdatingExistingBuffTime(type, num))
			{
				return;
			}
			if (!quiet && Main.netMode == 1)
			{
				NetMessage.SendData(55, -1, -1, null, this.whoAmI, (float)type, (float)num, 0f, 0, 0, 0);
				if (flag)
				{
					return;
				}
			}
			this.AddBuff_RemoveOldPetBuffsOfMatchingType(type);
			this.AddBuff_RemoveOldMeleeBuffsOfMatchingType(type);
			this.AddBuff_ActuallyTryToAddTheBuff(type, num);
		}

		// Token: 0x0600070E RID: 1806 RVA: 0x002C2BE8 File Offset: 0x002C0DE8
		private bool AddBuff_ActuallyTryToAddTheBuff(int type, int time)
		{
			int num = -1;
			while (num == -1)
			{
				int num2 = -1;
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (!Main.debuff[this.buffType[i]])
					{
						num2 = i;
						break;
					}
				}
				if (num2 == -1)
				{
					return false;
				}
				for (int j = num2; j < Player.maxBuffs; j++)
				{
					if (this.buffType[j] == 0)
					{
						num = j;
						break;
					}
				}
				if (num == -1)
				{
					this.DelBuff(num2);
				}
			}
			this.buffType[num] = type;
			this.buffTime[num] = time;
			return true;
		}

		// Token: 0x0600070F RID: 1807 RVA: 0x002C2C68 File Offset: 0x002C0E68
		private void AddBuff_RemoveOldMeleeBuffsOfMatchingType(int type)
		{
			if (Main.meleeBuff[type])
			{
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (this.buffType[i] != type && Main.meleeBuff[this.buffType[i]])
					{
						this.DelBuff(i);
						i--;
					}
				}
			}
		}

		// Token: 0x06000710 RID: 1808 RVA: 0x002C2CB4 File Offset: 0x002C0EB4
		private void AddBuff_RemoveOldPetBuffsOfMatchingType(int type)
		{
			if (Main.lightPet[type])
			{
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (Main.lightPet[this.buffType[i]])
					{
						this.DelBuff(i);
					}
				}
			}
			if (Main.vanityPet[type])
			{
				for (int j = 0; j < Player.maxBuffs; j++)
				{
					if (Main.vanityPet[this.buffType[j]])
					{
						this.DelBuff(j);
					}
				}
			}
		}

		// Token: 0x06000711 RID: 1809 RVA: 0x002C2D24 File Offset: 0x002C0F24
		private bool AddBuff_TryUpdatingExistingBuffTime(int type, int time)
		{
			bool result = false;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[i] == type)
				{
					if (type == 94)
					{
						this.buffTime[i] += time;
						if (this.buffTime[i] > Player.manaSickTimeMax)
						{
							this.buffTime[i] = Player.manaSickTimeMax;
						}
					}
					else if (this.buffTime[i] < time)
					{
						this.buffTime[i] = time;
					}
					result = true;
					break;
				}
			}
			return result;
		}

		// Token: 0x06000712 RID: 1810 RVA: 0x002C2D9C File Offset: 0x002C0F9C
		private int AddBuff_DetermineBuffTimeToAdd(int type, int time1)
		{
			int num = time1;
			if (Main.expertMode && this.whoAmI == Main.myPlayer && (type == 20 || type == 22 || type == 23 || type == 24 || type == 30 || type == 31 || type == 32 || type == 33 || type == 35 || type == 36 || type == 39 || type == 44 || type == 46 || type == 47 || type == 69 || type == 70 || type == 80))
			{
				float debuffTimeMultiplier = Main.GameModeInfo.DebuffTimeMultiplier;
				if (Main.GameModeInfo.IsJourneyMode)
				{
					if (Main.masterMode)
					{
						debuffTimeMultiplier = Main.RegisteredGameModes[2].DebuffTimeMultiplier;
					}
					else if (Main.expertMode)
					{
						debuffTimeMultiplier = Main.RegisteredGameModes[1].DebuffTimeMultiplier;
					}
				}
				num = (int)(debuffTimeMultiplier * (float)num);
			}
			return num;
		}

		// Token: 0x06000713 RID: 1811 RVA: 0x002C2E6C File Offset: 0x002C106C
		public void DelBuff(int b)
		{
			this.buffTime[b] = 0;
			this.buffType[b] = 0;
			int num = 0;
			for (int i = 0; i < Player.maxBuffs - 1; i++)
			{
				if (this.buffTime[i] != 0 && this.buffType[i] != 0)
				{
					if (num < i)
					{
						this.buffTime[num] = this.buffTime[i];
						this.buffType[num] = this.buffType[i];
						this.buffTime[i] = 0;
						this.buffType[i] = 0;
					}
					num++;
				}
			}
		}

		// Token: 0x06000714 RID: 1812 RVA: 0x002C2EF0 File Offset: 0x002C10F0
		public void ClearBuff(int type)
		{
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[i] == type)
				{
					this.DelBuff(i);
				}
			}
		}

		// Token: 0x06000715 RID: 1813 RVA: 0x002C2F20 File Offset: 0x002C1120
		public int CountBuffs()
		{
			int num = 0;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[num] > 0)
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06000716 RID: 1814 RVA: 0x002C2F50 File Offset: 0x002C1150
		public void QuickHeal()
		{
			if (this.cursed || this.CCed || this.dead)
			{
				return;
			}
			if (this.statLife == this.statLifeMax2 || this.potionDelay > 0)
			{
				return;
			}
			Item item = this.QuickHeal_GetItemToUse();
			if (item == null)
			{
				return;
			}
			if (!this.ItemCheck_CheckCanUse(item))
			{
				return;
			}
			SoundEngine.PlaySound(item.UseSound, this.position);
			if (item.potion)
			{
				this.ApplyPotionDelay(item);
			}
			this.ApplyLifeAndOrMana(item);
			if (item.type == 5)
			{
				this.TryToResetHungerToNeutral();
			}
			if (item.buffType > 0)
			{
				int num = item.buffTime;
				if (num == 0)
				{
					num = 3600;
				}
				this.AddBuff(item.buffType, num, true, false);
			}
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir(false);
			}
			if (Main.myPlayer == this.whoAmI && item.type == 126 && this.breath == 0)
			{
				AchievementsHelper.HandleSpecialEvent(this, 25);
			}
			Recipe.FindRecipes(false);
		}

		// Token: 0x06000717 RID: 1815 RVA: 0x002C3050 File Offset: 0x002C1250
		public Item QuickHeal_GetItemToUse()
		{
			int num = this.statLifeMax2 - this.statLife;
			Item result = null;
			int num2 = -this.statLifeMax2;
			int num3 = 58;
			if (this.useVoidBag())
			{
				num3 = 98;
			}
			for (int i = 0; i < num3; i++)
			{
				Item item;
				if (i < 58)
				{
					item = this.inventory[i];
				}
				else
				{
					item = this.bank4.item[i - 58];
				}
				if (item.stack > 0 && item.type > 0 && item.potion && item.healLife > 0)
				{
					int num4 = item.healLife - num;
					if (item.type == 227 && num4 < 0)
					{
						num4 += 30;
						if (num4 > 0)
						{
							num4 = 0;
						}
					}
					if (num2 < 0)
					{
						if (num4 > num2)
						{
							result = item;
							num2 = num4;
						}
					}
					else if (num4 < num2 && num4 >= 0)
					{
						result = item;
						num2 = num4;
					}
				}
			}
			return result;
		}

		// Token: 0x06000718 RID: 1816 RVA: 0x002C3138 File Offset: 0x002C1338
		public void QuickMana()
		{
			if (this.cursed || this.CCed || this.dead)
			{
				return;
			}
			if (this.statMana == this.statManaMax2)
			{
				return;
			}
			Item item = this.QuickMana_GetItemToUse();
			if (item == null)
			{
				return;
			}
			if (!this.ItemCheck_CheckCanUse(item))
			{
				return;
			}
			SoundEngine.PlaySound(item.UseSound, this.position);
			if (item.potion)
			{
				this.ApplyPotionDelay(item);
			}
			this.ApplyLifeAndOrMana(item);
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir(false);
			}
			Recipe.FindRecipes(false);
		}

		// Token: 0x06000719 RID: 1817 RVA: 0x002C31D0 File Offset: 0x002C13D0
		public Item QuickMana_GetItemToUse()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].type > 0 && this.inventory[i].healMana > 0 && (this.potionDelay == 0 || !this.inventory[i].potion))
				{
					return this.inventory[i];
				}
			}
			if (this.useVoidBag())
			{
				for (int j = 0; j < 40; j++)
				{
					if (this.bank4.item[j].stack > 0 && this.bank4.item[j].type > 0 && this.bank4.item[j].healMana > 0 && (this.potionDelay == 0 || !this.bank4.item[j].potion))
					{
						return this.bank4.item[j];
					}
				}
			}
			return null;
		}

		// Token: 0x0600071A RID: 1818 RVA: 0x002C32BC File Offset: 0x002C14BC
		public void TrySwitchingLoadout(int loadoutIndex)
		{
			bool flag = this.itemTime > 0 || this.itemAnimation > 0;
			if (this.whoAmI == Main.myPlayer && (flag || this.CCed || this.dead))
			{
				return;
			}
			if (loadoutIndex == this.CurrentLoadoutIndex)
			{
				return;
			}
			if (loadoutIndex < 0 || loadoutIndex >= this.Loadouts.Length)
			{
				return;
			}
			this.Loadouts[this.CurrentLoadoutIndex].Swap(this);
			this.Loadouts[loadoutIndex].Swap(this);
			this.CurrentLoadoutIndex = loadoutIndex;
			if (this.whoAmI == Main.myPlayer)
			{
				this.CloneLoadouts(Main.clientPlayer);
				Main.mouseLeftRelease = false;
				ItemSlot.RecordLoadoutChange();
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				NetMessage.TrySendData(147, -1, -1, null, this.whoAmI, (float)loadoutIndex, 0f, 0f, 0, 0, 0);
				ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.LoadoutChange, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					UniqueInfoPiece = loadoutIndex
				}, new int?(this.whoAmI));
			}
		}

		// Token: 0x0600071B RID: 1819 RVA: 0x002C33D0 File Offset: 0x002C15D0
		public void QuickBuff()
		{
			if (this.cursed || this.CCed || this.dead)
			{
				return;
			}
			LegacySoundStyle legacySoundStyle = null;
			if (this.CountBuffs() == Player.maxBuffs)
			{
				return;
			}
			Item item = this.QuickBuff_PickBestFoodItem();
			if (item != null && this.ItemCheck_CheckCanUse(item))
			{
				legacySoundStyle = item.UseSound;
				int num = item.buffTime;
				if (num == 0)
				{
					num = 3600;
				}
				this.AddBuff(item.buffType, num, true, false);
				if (item.consumable)
				{
					item.stack--;
					if (item.stack <= 0)
					{
						item.TurnToAir(false);
					}
				}
			}
			if (this.CountBuffs() != Player.maxBuffs)
			{
				int num2 = 58;
				if (this.useVoidBag())
				{
					num2 = 98;
				}
				for (int i = 0; i < num2; i++)
				{
					Item item2;
					if (i < 58)
					{
						item2 = this.inventory[i];
					}
					else
					{
						item2 = this.bank4.item[i - 58];
					}
					if (item2.stack > 0 && item2.type > 0 && item2.buffType > 0 && !item2.summon && this.ItemCheck_CheckCanUse(item2))
					{
						int num3 = item2.buffType;
						bool flag = this.QuickBuff_ShouldBotherUsingThisBuff(num3);
						if (item2.mana > 0 && flag)
						{
							if (this.statMana >= (int)((float)item2.mana * this.manaCost))
							{
								this.manaRegenDelay = (float)((int)this.maxRegenDelay);
								this.statMana -= (int)((float)item2.mana * this.manaCost);
							}
							else
							{
								flag = false;
							}
						}
						if (this.whoAmI == Main.myPlayer && item2.type == 603 && !Main.runningCollectorsEdition)
						{
							flag = false;
						}
						if (num3 == 27)
						{
							num3 = Main.rand.Next(3);
							if (num3 == 0)
							{
								num3 = 27;
							}
							if (num3 == 1)
							{
								num3 = 101;
							}
							if (num3 == 2)
							{
								num3 = 102;
							}
						}
						if (flag)
						{
							legacySoundStyle = item2.UseSound;
							int num4 = item2.buffTime;
							if (num4 == 0)
							{
								num4 = 3600;
							}
							this.AddBuff(num3, num4, true, false);
							if (item2.consumable)
							{
								item2.stack--;
								if (item2.stack <= 0)
								{
									item2.TurnToAir(false);
								}
							}
							if (this.CountBuffs() == Player.maxBuffs)
							{
								break;
							}
						}
					}
				}
			}
			if (legacySoundStyle != null)
			{
				SoundEngine.PlaySound(legacySoundStyle, this.position);
				Recipe.FindRecipes(false);
			}
		}

		// Token: 0x0600071C RID: 1820 RVA: 0x002C3634 File Offset: 0x002C1834
		private Item QuickBuff_PickBestFoodItem()
		{
			int num = 0;
			Item item = null;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffTime[i] >= 1)
				{
					int num2 = this.QuickBuff_FindFoodPriority(this.buffType[i]);
					if (num <= num2)
					{
						num = num2 + 1;
					}
				}
			}
			for (int j = 0; j < 58; j++)
			{
				Item item2 = this.inventory[j];
				if (!item2.IsAir)
				{
					int num3 = this.QuickBuff_FindFoodPriority(item2.buffType);
					if (num3 >= num && (item == null || item.buffTime < item2.buffTime || num3 > num))
					{
						item = item2;
						num = num3;
					}
				}
			}
			if (this.useVoidBag())
			{
				for (int k = 0; k < 40; k++)
				{
					Item item3 = this.bank4.item[k];
					if (!item3.IsAir)
					{
						int num4 = this.QuickBuff_FindFoodPriority(item3.buffType);
						if (num4 >= num && (item == null || item.buffTime < item3.buffTime || num4 > num))
						{
							item = item3;
							num = num4;
						}
					}
				}
			}
			return item;
		}

		// Token: 0x0600071D RID: 1821 RVA: 0x002C3731 File Offset: 0x002C1931
		private int QuickBuff_FindFoodPriority(int buffType)
		{
			if (buffType == 26)
			{
				return 1;
			}
			if (buffType == 206)
			{
				return 2;
			}
			if (buffType != 207)
			{
				return 0;
			}
			return 3;
		}

		// Token: 0x0600071E RID: 1822 RVA: 0x002C3754 File Offset: 0x002C1954
		private bool QuickBuff_ShouldBotherUsingThisBuff(int attemptedType)
		{
			bool result = true;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (attemptedType == 27 && (this.buffType[i] == 27 || this.buffType[i] == 101 || this.buffType[i] == 102))
				{
					result = false;
					break;
				}
				if (BuffID.Sets.IsWellFed[attemptedType] && BuffID.Sets.IsWellFed[this.buffType[i]])
				{
					result = false;
					break;
				}
				if (this.buffType[i] == attemptedType)
				{
					result = false;
					break;
				}
				if (Main.meleeBuff[attemptedType] && Main.meleeBuff[this.buffType[i]])
				{
					result = false;
					break;
				}
			}
			if (Main.lightPet[attemptedType] || Main.vanityPet[attemptedType])
			{
				for (int j = 0; j < Player.maxBuffs; j++)
				{
					if (Main.lightPet[this.buffType[j]] && Main.lightPet[attemptedType])
					{
						result = false;
					}
					if (Main.vanityPet[this.buffType[j]] && Main.vanityPet[attemptedType])
					{
						result = false;
					}
				}
			}
			return result;
		}

		// Token: 0x0600071F RID: 1823 RVA: 0x002C3848 File Offset: 0x002C1A48
		public void QuickMount()
		{
			if (this.mount.Active)
			{
				this.mount.Dismount(this);
				return;
			}
			if (this.frozen || this.tongued || this.webbed || this.stoned || this.gravDir == -1f || this.dead)
			{
				return;
			}
			if (this.noItems)
			{
				return;
			}
			Item item = this.QuickMount_GetItemToUse();
			if (item != null && item.mountType != -1 && this.mount.CanMount(item.mountType, this) && this.ItemCheck_CheckCanUse(item))
			{
				if (!this.QuickMinecartSnap())
				{
					this.mount.SetMount(item.mountType, this, false);
					if (item.UseSound != null)
					{
						SoundEngine.PlaySound(item.UseSound, base.Center);
						return;
					}
				}
			}
			else
			{
				this.QuickMinecart();
			}
		}

		// Token: 0x06000720 RID: 1824 RVA: 0x002C391C File Offset: 0x002C1B1C
		public bool CanFitSpace(int heightBoost)
		{
			int num = 42 + heightBoost;
			return Collision.IsClearSpotTest(this.position + new Vector2(0f, (float)(this.height - num)) + this.velocity, 16f, this.width, num, true, true, 1, true, false);
		}

		// Token: 0x06000721 RID: 1825 RVA: 0x002C3970 File Offset: 0x002C1B70
		private void QuickMinecart()
		{
			int num = 0;
			int value = (int)(this.position.X / 16f) - Player.tileRangeX - num + 1;
			int num2 = (int)((this.position.X + (float)this.width) / 16f) + Player.tileRangeX + num - 1;
			int num3 = (int)(this.position.Y / 16f) - Player.tileRangeY - num + 1;
			int num4 = (int)((this.position.Y + (float)this.height) / 16f) + Player.tileRangeY + num - 2;
			float num5 = (float)Utils.Clamp<int>(value, 10, Main.maxTilesX - 10);
			num2 = Utils.Clamp<int>(num2, 10, Main.maxTilesX - 10);
			num3 = Utils.Clamp<int>(num3, 10, Main.maxTilesY - 10);
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
			List<Point> tilesIn = Collision.GetTilesIn(new Vector2(num5, (float)num3) * 16f, new Vector2((float)(num2 + 1), (float)(num4 + 1)) * 16f);
			if (tilesIn.Count > 0)
			{
				Point? point = null;
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < tilesIn.Count; i++)
				{
					Point point2 = tilesIn[i];
					Tile tileSafely = Framing.GetTileSafely(point2.X, point2.Y);
					if (tileSafely.active() && tileSafely.type == 314)
					{
						Vector2 vector = tilesIn[i].ToVector2() * 16f + new Vector2(8f);
						if (point == null || (base.Distance(vector) < base.Distance(point.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector, 0, 0)))
						{
							point = new Point?(tilesIn[i]);
						}
					}
				}
				if (point != null)
				{
					this.LaunchMinecartHook(point.Value.X, point.Value.Y);
				}
			}
		}

		// Token: 0x06000722 RID: 1826 RVA: 0x002C3B9C File Offset: 0x002C1D9C
		private bool QuickMinecartSnap()
		{
			bool result = false;
			List<Point> tilesIn = Collision.GetTilesIn(base.TopLeft - new Vector2(24f), base.BottomRight + new Vector2(24f));
			if (tilesIn.Count > 0)
			{
				Point? point = null;
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < tilesIn.Count; i++)
				{
					Point point2 = tilesIn[i];
					Tile tileSafely = Framing.GetTileSafely(point2.X, point2.Y);
					if (tileSafely.active() && tileSafely.type == 314)
					{
						Vector2 vector = tilesIn[i].ToVector2() * 16f + new Vector2(8f);
						if (point == null || (base.Distance(vector) < base.Distance(point.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector, 0, 0)))
						{
							point = new Point?(tilesIn[i]);
						}
					}
				}
				if (point != null)
				{
					this.LaunchMinecartHook(point.Value.X, point.Value.Y);
					result = true;
				}
			}
			return result;
		}

		// Token: 0x06000723 RID: 1827 RVA: 0x002C3CF8 File Offset: 0x002C1EF8
		public Item QuickMount_GetItemToUse()
		{
			Item item = null;
			if (item == null && this.miscEquips[3].mountType != -1 && !MountID.Sets.Cart[this.miscEquips[3].mountType])
			{
				item = this.miscEquips[3];
			}
			if (item == null)
			{
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].mountType != -1 && !MountID.Sets.Cart[this.inventory[i].mountType])
					{
						item = this.inventory[i];
						break;
					}
				}
			}
			return item;
		}

		// Token: 0x06000724 RID: 1828 RVA: 0x002C3D79 File Offset: 0x002C1F79
		public void ClearGrapplingBlacklist()
		{
			this._blackListedTileCoordsForGrappling.Clear();
		}

		// Token: 0x06000725 RID: 1829 RVA: 0x002C3D86 File Offset: 0x002C1F86
		public bool IsBlacklistedForGrappling(Point p)
		{
			return this._blackListedTileCoordsForGrappling.Contains(p);
		}

		// Token: 0x06000726 RID: 1830 RVA: 0x002C3D94 File Offset: 0x002C1F94
		public void UpdateBlacklistedTilesForGrappling()
		{
			this.ClearGrapplingBlacklist();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].aiStyle == 7 && Main.projectile[i].ai[0] == 2f)
				{
					Point point = Main.projectile[i].Center.ToTileCoordinates();
					for (int j = -1; j <= 1; j++)
					{
						for (int k = -1; k <= 1; k++)
						{
							if (!WorldGen.SolidTile(point.X + j, point.Y + k, false))
							{
								this._blackListedTileCoordsForGrappling.Add(new Point(point.X + j, point.Y + k));
							}
						}
					}
				}
			}
		}

		// Token: 0x06000727 RID: 1831 RVA: 0x002C3E6C File Offset: 0x002C206C
		public void QuickGrapple()
		{
			if (this.frozen || this.tongued || this.webbed || this.stoned || this.dead)
			{
				return;
			}
			if (PlayerInput.GrappleAndInteractAreShared)
			{
				if (Main.HoveringOverAnNPC)
				{
					return;
				}
				if (Main.SmartInteractShowingGenuine || Main.SmartInteractShowingFake)
				{
					return;
				}
				if (this._quickGrappleCooldown > 0 && !Main.mapFullscreen)
				{
					return;
				}
				if (WiresUI.Settings.DrawToolModeUI && PlayerInput.UsingGamepad)
				{
					return;
				}
				bool flag = this.controlUseTile;
				bool flag2 = this.releaseUseTile;
				if (!flag && !flag2)
				{
					return;
				}
				Tile tileSafely = Framing.GetTileSafely(Player.tileTargetX, Player.tileTargetY);
				if (tileSafely.active() && (tileSafely.type == 4 || tileSafely.type == 33 || tileSafely.type == 372 || tileSafely.type == 174 || tileSafely.type == 646 || tileSafely.type == 49))
				{
					return;
				}
				if (this.inventory[this.selectedItem].type == 3384 && PlayerInput.UsingGamepad)
				{
					return;
				}
			}
			if (this.noItems)
			{
				return;
			}
			if (this.mount.Active)
			{
				this.mount.Dismount(this);
			}
			Item item = this.QuickGrapple_GetItemToUse();
			if (item == null)
			{
				return;
			}
			if (!this.ItemCheck_CheckCanUse(item))
			{
				return;
			}
			if (item.shoot == 73)
			{
				int num = 0;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && (Main.projectile[i].type == 73 || Main.projectile[i].type == 74))
					{
						num++;
					}
				}
				if (num > 1)
				{
					item = null;
				}
			}
			else if (item.shoot == 165)
			{
				int num2 = 0;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].owner == Main.myPlayer && Main.projectile[j].type == 165)
					{
						num2++;
					}
				}
				if (num2 > 8)
				{
					item = null;
				}
			}
			else if (item.shoot == 372)
			{
				int num3 = 0;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == 372)
					{
						num3++;
					}
				}
				if (num3 > 2)
				{
					item = null;
				}
			}
			else if (item.shoot == 652)
			{
				int num4 = 0;
				for (int l = 0; l < 1000; l++)
				{
					if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == 652)
					{
						num4++;
					}
				}
				if (num4 > 1)
				{
					item = null;
				}
			}
			else if (item.type == 3572)
			{
				int num5 = 0;
				bool flag3 = false;
				for (int m = 0; m < 1000; m++)
				{
					if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type >= 646 && Main.projectile[m].type <= 649)
					{
						num5++;
						if (Main.projectile[m].ai[0] == 2f)
						{
							flag3 = true;
						}
					}
				}
				if (num5 > 4 || (!flag3 && num5 > 3))
				{
					item = null;
				}
			}
			else
			{
				for (int n = 0; n < 1000; n++)
				{
					if (Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type == item.shoot && Main.projectile[n].ai[0] != 2f)
					{
						item = null;
						break;
					}
				}
			}
			if (item != null)
			{
				this.UpdateBlacklistedTilesForGrappling();
				SoundEngine.PlaySound(item.UseSound, this.position);
				if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
				{
					NetMessage.SendData(51, -1, -1, null, this.whoAmI, 2f, 0f, 0f, 0, 0, 0);
				}
				int num6 = item.shoot;
				float shootSpeed = item.shootSpeed;
				int damage = item.damage;
				float knockBack = item.knockBack;
				if (num6 == 13 || num6 == 32 || num6 == 315 || (num6 >= 230 && num6 <= 235) || num6 == 331 || num6 == 753 || num6 == 865 || num6 == 935)
				{
					this.grappling[0] = -1;
					this.grapCount = 0;
					for (int num7 = 0; num7 < 1000; num7++)
					{
						if (Main.projectile[num7].active && Main.projectile[num7].owner == this.whoAmI)
						{
							int type = Main.projectile[num7].type;
							if (type <= 315)
							{
								if (type != 13 && type - 230 > 5 && type != 315)
								{
									goto IL_577;
								}
							}
							else if (type <= 753)
							{
								if (type != 331 && type != 753)
								{
									goto IL_577;
								}
							}
							else if (type != 865 && type != 935)
							{
								goto IL_577;
							}
							Main.projectile[num7].Kill();
						}
						IL_577:;
					}
				}
				if (num6 == 256)
				{
					int num8 = 0;
					int num9 = -1;
					int num10 = 100000;
					for (int num11 = 0; num11 < 1000; num11++)
					{
						if (Main.projectile[num11].active && Main.projectile[num11].owner == this.whoAmI && Main.projectile[num11].type == 256)
						{
							num8++;
							if (Main.projectile[num11].timeLeft < num10)
							{
								num9 = num11;
								num10 = Main.projectile[num11].timeLeft;
							}
						}
					}
					if (num8 > 1)
					{
						Main.projectile[num9].Kill();
					}
				}
				if (num6 == 652)
				{
					int num12 = 0;
					int num13 = -1;
					int num14 = 100000;
					for (int num15 = 0; num15 < 1000; num15++)
					{
						if (Main.projectile[num15].active && Main.projectile[num15].owner == this.whoAmI && Main.projectile[num15].type == 652)
						{
							num12++;
							if (Main.projectile[num15].timeLeft < num14)
							{
								num13 = num15;
								num14 = Main.projectile[num15].timeLeft;
							}
						}
					}
					if (num12 > 1)
					{
						Main.projectile[num13].Kill();
					}
				}
				if (num6 == 73)
				{
					for (int num16 = 0; num16 < 1000; num16++)
					{
						if (Main.projectile[num16].active && Main.projectile[num16].owner == this.whoAmI && Main.projectile[num16].type == 73)
						{
							num6 = 74;
						}
					}
				}
				if (item.type == 3572)
				{
					int num17 = -1;
					int num18 = -1;
					for (int num19 = 0; num19 < 1000; num19++)
					{
						Projectile projectile = Main.projectile[num19];
						if (projectile.active && projectile.owner == this.whoAmI && projectile.type >= 646 && projectile.type <= 649 && (num18 == -1 || num18 < projectile.timeLeft))
						{
							num17 = projectile.type;
							num18 = projectile.timeLeft;
						}
					}
					if (num17 != -1)
					{
						switch (num17)
						{
						case 646:
							num6 = 647;
							goto IL_7EE;
						case 647:
							num6 = 648;
							goto IL_7EE;
						case 648:
							num6 = 649;
							goto IL_7EE;
						case 649:
							break;
						default:
							goto IL_7EE;
						}
					}
					num6 = 646;
				}
				IL_7EE:
				Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num20 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num21 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (this.gravDir == -1f)
				{
					num21 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num22 = (float)Math.Sqrt((double)(num20 * num20 + num21 * num21));
				if ((float.IsNaN(num20) && float.IsNaN(num21)) || (num20 == 0f && num21 == 0f))
				{
					num20 = (float)this.direction;
					num21 = 0f;
					num22 = shootSpeed;
				}
				else
				{
					num22 = shootSpeed / num22;
				}
				num20 *= num22;
				num21 *= num22;
				Projectile.NewProjectile(this.GetProjectileSource_Item(item), vector.X, vector.Y, num20, num21, num6, damage, knockBack, this.whoAmI, 0f, 0f, 0f);
			}
		}

		// Token: 0x06000728 RID: 1832 RVA: 0x002C47A4 File Offset: 0x002C29A4
		public Item QuickGrapple_GetItemToUse()
		{
			Item item = null;
			if (Main.projHook[this.miscEquips[4].shoot])
			{
				item = this.miscEquips[4];
			}
			if (item == null)
			{
				for (int i = 0; i < 58; i++)
				{
					if (Main.projHook[this.inventory[i].shoot])
					{
						item = this.inventory[i];
						break;
					}
				}
			}
			return item;
		}

		// Token: 0x06000729 RID: 1833 RVA: 0x002C4804 File Offset: 0x002C2A04
		public void StatusToNPC(int type, int i)
		{
			if (this.meleeEnchant > 0)
			{
				if (this.meleeEnchant == 1)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
				}
				if (this.meleeEnchant == 2)
				{
					Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
				}
				if (this.meleeEnchant == 3)
				{
					Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
				}
				if (this.meleeEnchant == 5)
				{
					Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
				}
				if (this.meleeEnchant == 6)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
				}
				if (this.meleeEnchant == 8)
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
				}
				if (this.meleeEnchant == 4)
				{
					Main.npc[i].AddBuff(72, 120, false);
				}
			}
			if (this.frostBurn)
			{
				Main.npc[i].AddBuff(324, 60 * Main.rand.Next(5, 15), false);
			}
			if (this.magmaStone)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(323, 360, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(323, 240, false);
				}
				else
				{
					Main.npc[i].AddBuff(323, 120, false);
				}
			}
			if (type == 3211)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(5, 10), false);
			}
			if (type == 5129)
			{
				Main.npc[i].AddBuff(120, 300, false);
			}
			if (type == 121)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 3823)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(323, 300, false);
					return;
				}
			}
			else if (type == 5382)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[i].AddBuff(323, 300, false);
					return;
				}
			}
			else if (type == 122)
			{
				if (Main.rand.Next(10) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 190)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(20, 420, false);
					return;
				}
			}
			else if (type == 217)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 1123 && Main.rand.Next(10) != 0)
			{
				Main.npc[i].AddBuff(31, 120, false);
			}
		}

		// Token: 0x0600072A RID: 1834 RVA: 0x002C4B2C File Offset: 0x002C2D2C
		public void StatusToPlayerPvP(int type, int i)
		{
			if (this.meleeEnchant > 0)
			{
				if (this.meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false, false);
				}
				if (this.meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false, false);
				}
				if (this.meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false, false);
				}
				if (this.meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false, false);
				}
				if (this.meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false, false);
				}
				if (this.meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false, false);
				}
			}
			if (this.frostBurn)
			{
				Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), false, false);
			}
			if (this.magmaStone)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.player[i].AddBuff(323, 360, false, false);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(323, 120, false, false);
				}
				else
				{
					Main.player[i].AddBuff(323, 60, false, false);
				}
			}
			if (type == 5129)
			{
				Main.player[i].AddBuff(120, 300, false, false);
			}
			if (type == 121)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 180, false, false);
					return;
				}
			}
			else if (type == 3823)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(323, 300, false, false);
					return;
				}
			}
			else if (type == 5382)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(323, 300, false, false);
					return;
				}
			}
			else if (type == 122)
			{
				if (Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(24, 180, false, false);
					return;
				}
			}
			else if (type == 190)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 420, false, false);
					return;
				}
			}
			else if (type == 217)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, false, false);
					return;
				}
			}
			else if (type == 1123 && Main.rand.Next(9) != 0)
			{
				Main.player[i].AddBuff(31, 120, false, false);
			}
		}

		// Token: 0x0600072B RID: 1835 RVA: 0x002C4E20 File Offset: 0x002C3020
		public void Ghost()
		{
			this.immune = false;
			this.immuneAlpha = 0;
			if (Main.hasFocus && this.whoAmI == Main.myPlayer)
			{
				this.controlUp = false;
				this.controlLeft = false;
				this.controlDown = false;
				this.controlRight = false;
				this.controlJump = false;
				if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
				{
					PlayerInput.Triggers.Current.CopyInto(this);
					this.TrySyncingInput();
					this.TryOpeningInGameOptionsBasedOnInput();
				}
			}
			float num = 7f;
			float num2 = 0.2f;
			if (this.controlUp || this.controlJump)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.9f;
				}
				this.velocity.Y = this.velocity.Y - num2;
				if (this.velocity.Y < -num)
				{
					this.velocity.Y = -num;
				}
			}
			else if (this.controlDown)
			{
				if (this.velocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.9f;
				}
				this.velocity.Y = this.velocity.Y + num2;
				if (this.velocity.Y > num)
				{
					this.velocity.Y = num;
				}
			}
			else if ((double)this.velocity.Y < -0.1 || (double)this.velocity.Y > 0.1)
			{
				this.velocity.Y = this.velocity.Y * 0.9f;
			}
			else
			{
				this.velocity.Y = 0f;
			}
			if (this.controlLeft && !this.controlRight)
			{
				if (this.velocity.X > 0f)
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
				this.velocity.X = this.velocity.X - num2;
				if (this.velocity.X < -num)
				{
					this.velocity.X = -num;
				}
			}
			else if (this.controlRight && !this.controlLeft)
			{
				if (this.velocity.X < 0f)
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
				this.velocity.X = this.velocity.X + num2;
				if (this.velocity.X > num)
				{
					this.velocity.X = num;
				}
			}
			else if (this.velocity.X < -num2 || this.velocity.X > num2)
			{
				this.velocity.X = this.velocity.X * 0.9f;
			}
			else
			{
				this.velocity.X = 0f;
			}
			this.position += this.velocity;
			this.ghostFrameCounter++;
			if (this.velocity.X < 0f)
			{
				this.direction = -1;
			}
			else if (this.velocity.X > 0f)
			{
				this.direction = 1;
			}
			if (this.ghostFrameCounter >= 8)
			{
				this.ghostFrameCounter = 0;
				this.ghostFrame++;
				if (this.ghostFrame >= 4)
				{
					this.ghostFrame = 0;
				}
			}
			if (this.position.X < Main.leftWorld + (float)(Lighting.OffScreenTiles * 16) + 16f)
			{
				this.position.X = Main.leftWorld + (float)(Lighting.OffScreenTiles * 16) + 16f;
				this.velocity.X = 0f;
			}
			if (this.position.X + (float)this.width > Main.rightWorld - (float)(Lighting.OffScreenTiles * 16) - 32f)
			{
				this.position.X = Main.rightWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)this.width;
				this.velocity.X = 0f;
			}
			if (this.position.Y < Main.topWorld + (float)(Lighting.OffScreenTiles * 16) + 16f)
			{
				this.position.Y = Main.topWorld + (float)(Lighting.OffScreenTiles * 16) + 16f;
				if ((double)this.velocity.Y < -0.1)
				{
					this.velocity.Y = -0.1f;
				}
			}
			if (this.position.Y > Main.bottomWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)this.height)
			{
				this.position.Y = Main.bottomWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)this.height;
				this.velocity.Y = 0f;
			}
		}

		// Token: 0x0600072C RID: 1836 RVA: 0x002C52E4 File Offset: 0x002C34E4
		private void TrySyncingInput()
		{
			if (Main.netMode == 1)
			{
				bool flag = false;
				Player clientPlayer = Main.clientPlayer;
				if (this.controlUp != clientPlayer.controlUp)
				{
					flag = true;
				}
				if (this.controlDown != clientPlayer.controlDown)
				{
					flag = true;
				}
				if (this.controlLeft != clientPlayer.controlLeft)
				{
					flag = true;
				}
				if (this.controlRight != clientPlayer.controlRight)
				{
					flag = true;
				}
				if (this.controlJump != clientPlayer.controlJump)
				{
					flag = true;
				}
				if (this.controlUseItem != clientPlayer.controlUseItem)
				{
					flag = true;
				}
				if (this.selectedItem != clientPlayer.selectedItem)
				{
					flag = true;
				}
				if (this.autoReuseAllWeapons != clientPlayer.autoReuseAllWeapons)
				{
					flag = true;
				}
				if (this.controlDownHold != clientPlayer.controlDownHold)
				{
					flag = true;
				}
				if (this.isOperatingAnotherEntity != clientPlayer.isOperatingAnotherEntity)
				{
					flag = true;
				}
				if (flag)
				{
					NetMessage.SendData(13, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x0600072D RID: 1837 RVA: 0x002C53C8 File Offset: 0x002C35C8
		public void OnHit(float x, float y, Entity victim)
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			bool flag = victim is NPC && (((NPC)victim).type == 488 || ((NPC)victim).SpawnedFromStatue);
			if (this.titaniumStormCooldown > 0)
			{
				flag = true;
			}
			if (victim is NPC)
			{
				Main.BigBossProgressBar.TryTracking(victim.whoAmI);
			}
			if (this.onHitTitaniumStorm && !flag)
			{
				this.titaniumStormCooldown = 10;
				this.AddBuff(306, 600, true, false);
				if (this.ownedProjectileCounts[908] < 7)
				{
					this.ownedProjectileCounts[908]++;
					Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 4), base.Center, Vector2.Zero, 908, 50, 15f, this.whoAmI, 0f, 0f, 0f);
				}
			}
			if (this.onHitDodge && this.shadowDodgeTimer == 0)
			{
				this.AddBuff(59, 1800, true, false);
			}
			if (this.onHitRegen)
			{
				this.AddBuff(58, 300, true, false);
			}
			if (this.stardustMinion && victim is NPC)
			{
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == this.whoAmI && projectile.type == 613 && projectile.localAI[1] <= 0f && Main.rand.Next(2) == 0)
					{
						Vector2 vector = new Vector2(x, y) - projectile.Center;
						if (vector.Length() > 0f)
						{
							vector.Normalize();
						}
						vector *= 20f;
						Projectile.NewProjectile(Projectile.InheritSource(projectile), projectile.Center.X, projectile.Center.Y, vector.X, vector.Y, 614, projectile.damage / 3, 0f, projectile.owner, 0f, (float)victim.whoAmI, 0f);
						projectile.localAI[1] = (float)(30 + Main.rand.Next(4) * 10);
					}
				}
			}
			if (this.onHitPetal && this.petalTimer == 0)
			{
				this.petalTimer = 20;
				float num = this.position.X + (float)(this.width / 2);
				int direction = this.direction;
				float num2 = Main.screenPosition.X;
				if (direction < 0)
				{
					num2 += (float)Main.screenWidth;
				}
				float num3 = Main.screenPosition.Y;
				num3 += (float)Main.rand.Next(Main.screenHeight);
				Vector2 vector2 = new Vector2(num2, num3);
				float num4 = x - vector2.X;
				float num5 = y - vector2.Y;
				num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
				num5 += (float)Main.rand.Next(-50, 51) * 0.1f;
				float num6 = (float)24;
				float num7 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
				num7 = num6 / num7;
				num4 *= num7;
				num5 *= num7;
				Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 5), num2, num3, num4, num5, 221, 36, 0f, this.whoAmI, 0f, 0f, 0f);
			}
			if (this.crystalLeaf && this.petalTimer == 0)
			{
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].owner == this.whoAmI && Main.projectile[j].type == 226)
					{
						this.petalTimer = 50;
						float num8 = 12f;
						Vector2 vector3 = new Vector2(Main.projectile[j].position.X + (float)this.width * 0.5f, Main.projectile[j].position.Y + (float)this.height * 0.5f);
						float num9 = x - vector3.X;
						float num10 = y - vector3.Y;
						float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
						int num12 = 180;
						float num13 = num8 * (float)num12;
						if (num11 < num13)
						{
							num11 = num8 / num11;
							num9 *= num11;
							num10 *= num11;
							Utils.ChaseResults chaseResults = Utils.GetChaseResults(Main.projectile[j].Center, num8 * (float)num12, victim.Center, victim.velocity);
							if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= 180f)
							{
								Vector2 vector4 = chaseResults.ChaserVelocity / (float)num12;
								num9 = vector4.X;
								num10 = vector4.Y;
							}
							Projectile.NewProjectile(this.GetProjectileSource_SetBonus(6), Main.projectile[j].Center.X - 4f, Main.projectile[j].Center.Y, num9, num10, 227, Player.crystalLeafDamage, (float)Player.crystalLeafKB, this.whoAmI, 0f, 0f, 0f);
							return;
						}
					}
				}
			}
		}

		// Token: 0x0600072E RID: 1838 RVA: 0x002C5908 File Offset: 0x002C3B08
		public void OpenPresent(int itemType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(itemType);
			if (Main.rand.Next(15) == 0 && Main.hardMode)
			{
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 602, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(30) == 0)
			{
				int number2 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1922, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(400) == 0)
			{
				int number3 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1927, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number4 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1870, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
				}
				number4 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 97, Main.rand.Next(30, 61), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number5 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1909, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number6 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1917, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number6, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number7 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1915, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number7, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number8 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1918, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number8, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number9 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1921, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number9, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(300) == 0)
			{
				int number10 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1923, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number10, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(40) == 0)
			{
				int number11 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1907, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number11, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				int number12 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1908, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number12, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(15) == 0)
			{
				int num = Main.rand.Next(5);
				if (num == 0)
				{
					int number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1932, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1933, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1934, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 1)
				{
					int number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1935, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1936, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1937, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 2)
				{
					int number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1940, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1941, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1942, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 3)
				{
					int number16 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1938, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number16, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 4)
				{
					int number17 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1939, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number17, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (Main.rand.Next(7) == 0)
			{
				int num2 = Main.rand.Next(3);
				if (num2 == 0)
				{
					num2 = 1911;
				}
				if (num2 == 1)
				{
					num2 = 1919;
				}
				if (num2 == 2)
				{
					num2 = 1920;
				}
				int number18 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num2, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number18, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(8) == 0)
			{
				int number19 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1912, Main.rand.Next(1, 4), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number19, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(9) == 0)
			{
				int number20 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1913, Main.rand.Next(20, 41), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number20, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int num3 = Main.rand.Next(3);
				if (num3 == 0)
				{
					int number21 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1872, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number21, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num3 == 1)
				{
					int number22 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 586, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number22, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else
				{
					int number23 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 591, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number23, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600072F RID: 1839 RVA: 0x002C65FC File Offset: 0x002C47FC
		public void OpenLegacyPresent(int itemType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(itemType);
			int num = Main.rand.Next(14);
			if (num == 0 && Main.hardMode)
			{
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 602, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (num <= 7)
			{
				int number2 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 586, Main.rand.Next(20, 50), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int number3 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 591, Main.rand.Next(20, 50), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000730 RID: 1840 RVA: 0x002C6760 File Offset: 0x002C4960
		public void QuickSpawnItem(IEntitySource source, int item, int stack = 1)
		{
			int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item, stack, false, -1, false, false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x06000731 RID: 1841 RVA: 0x002C67C4 File Offset: 0x002C49C4
		public void OpenBossBag(int type)
		{
			GameModeData gameModeInfo = Main.GameModeInfo;
			float strength = 1f;
			if (gameModeInfo.IsJourneyMode)
			{
				CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
				if (power != null && power.GetIsUnlocked())
				{
					strength = power.StrengthMultiplierToGiveNPCs;
				}
			}
			NPCStrengthHelper npcstrengthHelper = new NPCStrengthHelper(gameModeInfo, strength, Main.getGoodWorld);
			bool flag = npcstrengthHelper.IsMasterMode || Main.masterMode;
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(type);
			if (type == 3318)
			{
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2430, 1);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2493, 1);
				}
				int num = Main.rand.Next(256, 259);
				int num2;
				for (num2 = Main.rand.Next(256, 259); num2 == num; num2 = Main.rand.Next(256, 259))
				{
				}
				this.QuickSpawnItem(itemSource_OpenItem, num, 1);
				this.QuickSpawnItem(itemSource_OpenItem, num2, 1);
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2610, 1);
				}
				else
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2585, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 998, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 3090, 1);
			}
			else if (type == 3319)
			{
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2112, 1);
				}
				if (Main.rand.Next(30) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1299, 1);
				}
				if (WorldGen.crimson)
				{
					int num3 = Main.rand.Next(20) + 10;
					num3 += Main.rand.Next(20) + 10;
					num3 += Main.rand.Next(20) + 10;
					this.QuickSpawnItem(itemSource_OpenItem, 880, num3);
					num3 = Main.rand.Next(3) + 1;
					this.QuickSpawnItem(itemSource_OpenItem, 2171, num3);
				}
				else
				{
					int num4 = Main.rand.Next(20) + 10;
					num4 += Main.rand.Next(20) + 10;
					num4 += Main.rand.Next(20) + 10;
					this.QuickSpawnItem(itemSource_OpenItem, 56, num4);
					num4 = Main.rand.Next(3) + 1;
					this.QuickSpawnItem(itemSource_OpenItem, 59, num4);
					num4 = Main.rand.Next(30) + 20;
					this.QuickSpawnItem(itemSource_OpenItem, 47, num4);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 3097, 1);
			}
			else if (type == 3320)
			{
				int stack = Main.rand.Next(15, 30);
				if (flag)
				{
					stack = Main.rand.Next(110, 136);
					this.QuickSpawnItem(itemSource_OpenItem, 56, stack);
				}
				else
				{
					stack = Main.rand.Next(80, 111);
					this.QuickSpawnItem(itemSource_OpenItem, 56, stack);
				}
				if (flag)
				{
					stack = Main.rand.Next(30, 51);
					this.QuickSpawnItem(itemSource_OpenItem, 86, stack);
				}
				else
				{
					stack = Main.rand.Next(20, 41);
					this.QuickSpawnItem(itemSource_OpenItem, 86, stack);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 994, 1);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2111, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 3224, 1);
			}
			else if (type == 3321)
			{
				int stack2 = Main.rand.Next(20, 46);
				if (flag)
				{
					stack2 = Main.rand.Next(110, 136);
					this.QuickSpawnItem(itemSource_OpenItem, 880, stack2);
				}
				else
				{
					stack2 = Main.rand.Next(80, 111);
					this.QuickSpawnItem(itemSource_OpenItem, 880, stack2);
				}
				if (flag)
				{
					stack2 = Main.rand.Next(30, 51);
					this.QuickSpawnItem(itemSource_OpenItem, 1329, stack2);
				}
				else
				{
					stack2 = Main.rand.Next(20, 41);
					this.QuickSpawnItem(itemSource_OpenItem, 1329, stack2);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2104, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3060, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 3223, 1);
			}
			else if (type == 3322)
			{
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2108, 1);
				}
				int num5 = Main.rand.Next(3);
				if (num5 == 0)
				{
					num5 = 1121;
				}
				else if (num5 == 1)
				{
					num5 = 1123;
				}
				else if (num5 == 2)
				{
					num5 = 2888;
				}
				this.QuickSpawnItem(itemSource_OpenItem, num5, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 3333, 1);
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1132, 1);
				}
				if (Main.rand.Next(9) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1170, 1);
				}
				if (Main.rand.Next(9) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2502, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 1129, 1);
				this.QuickSpawnItem(itemSource_OpenItem, Main.rand.Next(842, 845), 1);
				this.QuickSpawnItem(itemSource_OpenItem, 1130, Main.rand.Next(10, 30));
				this.QuickSpawnItem(itemSource_OpenItem, 2431, Main.rand.Next(17, 30));
			}
			else if (type == 3323)
			{
				this.QuickSpawnItem(itemSource_OpenItem, 3245, 1);
				int num6 = Main.rand.Next(3);
				if (num6 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1281, 1);
				}
				else if (num6 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1273, 1);
				}
				else
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1313, 1);
				}
			}
			else if (type == 3324)
			{
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2105, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 367, 1);
				if (!this.extraAccessory)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3335, 1);
				}
				int num7 = Main.rand.Next(4);
				if (num7 == 3)
				{
					num7 = 2998;
				}
				else
				{
					num7 = 489 + num7;
				}
				this.QuickSpawnItem(itemSource_OpenItem, num7, 1);
				int num8 = Main.rand.Next(4);
				if (num8 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 514, 1);
				}
				else if (num8 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 426, 1);
				}
				else if (num8 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 434, 1);
				}
				else if (num8 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4912, 1);
				}
			}
			else if (type == 3325)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2113, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 548, Main.rand.Next(25, 41));
				this.QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(itemSource_OpenItem, 3355, 1);
			}
			else if (type == 3326)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2106, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 549, Main.rand.Next(25, 41));
				this.QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(itemSource_OpenItem, 3354, 1);
			}
			else if (type == 3327)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2107, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 547, Main.rand.Next(25, 41));
				this.QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(itemSource_OpenItem, 3356, 1);
			}
			else if (type == 3328)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2109, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 1141, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 3336, 1);
				if (Main.rand.Next(15) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1182, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1305, 1);
				}
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1157, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3021, 1);
				}
				int num9 = Main.rand.Next(7);
				if (num9 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 758, 1);
					this.QuickSpawnItem(itemSource_OpenItem, 771, Main.rand.Next(50, 150));
				}
				else if (num9 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1255, 1);
				}
				else if (num9 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 788, 1);
				}
				else if (num9 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1178, 1);
				}
				else if (num9 == 4)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1259, 1);
				}
				else if (num9 == 5)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1155, 1);
				}
				else if (num9 == 6)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3018, 1);
				}
			}
			else if (type == 3329)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				this.QuickSpawnItem(itemSource_OpenItem, 3337, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2110, 1);
				}
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1294, 1);
				}
				int num10 = Main.rand.Next(7);
				if (num10 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1258, 1);
					this.QuickSpawnItem(itemSource_OpenItem, 1261, Main.rand.Next(60, 100));
				}
				else if (num10 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1122, 1);
				}
				else if (num10 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 899, 1);
				}
				else if (num10 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1248, 1);
				}
				else if (num10 == 4)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1295, 1);
				}
				else if (num10 == 5)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1296, 1);
				}
				else
				{
					this.QuickSpawnItem(itemSource_OpenItem, 1297, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 2218, Main.rand.Next(18, 24));
			}
			else if (type == 3330)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				this.QuickSpawnItem(itemSource_OpenItem, 3367, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2588, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2609, 1);
				}
				int num11 = Main.rand.Next(5);
				if (num11 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2611, 1);
				}
				else if (num11 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2624, 1);
				}
				else if (num11 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2622, 1);
				}
				else if (num11 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 2621, 1);
				}
				else if (num11 == 4)
				{
					if (Main.remixWorld)
					{
						this.QuickSpawnItem(itemSource_OpenItem, 157, 1);
					}
					else
					{
						this.QuickSpawnItem(itemSource_OpenItem, 2623, 1);
					}
				}
			}
			else if (type == 3331)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3372, 1);
				}
			}
			else if (type == 3860)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3863, 1);
				}
				int num12 = Main.rand.Next(4);
				if (num12 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3859, 1);
				}
				else if (num12 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3827, 1);
				}
				else if (num12 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3870, 1);
				}
				else
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3858, 1);
				}
				if (Main.rand.Next(4) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3883, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 3817, Main.rand.Next(30, 50));
			}
			else if (type == 4782)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				this.QuickSpawnItem(itemSource_OpenItem, 4989, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4784, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4823, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4715, 1);
				}
				if (Main.rand.Next(4) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4778, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5075, 1);
				}
				int num13 = Main.rand.Next(4);
				if (num13 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4923, 1);
				}
				else if (num13 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4952, 1);
				}
				else if (num13 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4953, 1);
				}
				else if (num13 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4914, 1);
				}
			}
			else if (type == 4957)
			{
				this.QuickSpawnItem(itemSource_OpenItem, 4987, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 4986, Main.rand.Next(25, 75));
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4959, 1);
				}
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4981, 1);
				}
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4758, 1);
				}
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4980, 1);
				}
				int num14 = Main.rand.Next(4982, 4985);
				int num15 = Main.rand.Next(4982, 4985);
				while (num15 == num14)
				{
					num14 = Main.rand.Next(4982, 4985);
				}
				this.QuickSpawnItem(itemSource_OpenItem, num14, 1);
				this.QuickSpawnItem(itemSource_OpenItem, num15, 1);
			}
			if (type == 5111)
			{
				this.QuickSpawnItem(itemSource_OpenItem, 5100, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5109, 1);
				}
				if (Main.rand.Next(14) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5385, 1);
				}
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5098, 1);
				}
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5101, 1);
				}
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5113, 1);
				}
				int num16 = Main.rand.Next(4);
				if (num16 == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5117, 1);
				}
				else if (num16 == 1)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5118, 1);
				}
				else if (num16 == 2)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5119, 1);
				}
				else if (num16 == 3)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 5095, 1);
				}
			}
			else if (type == 3332)
			{
				this.TryGettingDevArmor(itemSource_OpenItem);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3373, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4469, 1);
				}
				if (!this.HasItem(3384))
				{
					this.QuickSpawnItem(itemSource_OpenItem, 3384, 1);
				}
				this.QuickSpawnItem(itemSource_OpenItem, 3460, Main.rand.Next(90, 111));
				this.QuickSpawnItem(itemSource_OpenItem, 1131, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 3577, 1);
				this.QuickSpawnItem(itemSource_OpenItem, 4954, 1);
				List<int> list = new List<int>
				{
					3063,
					3389,
					3065,
					1553,
					3930,
					3541,
					3570,
					3571,
					3569
				};
				for (int i = 0; i < 2; i++)
				{
					int index = Main.rand.Next(list.Count);
					int item = list[index];
					this.QuickSpawnItem(itemSource_OpenItem, item, 1);
					list.RemoveAt(index);
				}
			}
			int num17 = -1;
			if (type == 3318)
			{
				num17 = 50;
			}
			if (type == 3319)
			{
				num17 = 4;
			}
			if (type == 3320)
			{
				num17 = 13;
			}
			if (type == 3321)
			{
				num17 = 266;
			}
			if (type == 3322)
			{
				num17 = 222;
			}
			if (type == 3323)
			{
				num17 = 35;
			}
			if (type == 3324)
			{
				num17 = 113;
			}
			if (type == 3325)
			{
				num17 = 134;
			}
			if (type == 3326)
			{
				num17 = 125;
			}
			if (type == 3327)
			{
				num17 = 127;
			}
			if (type == 3328)
			{
				num17 = 262;
			}
			if (type == 3329)
			{
				num17 = 245;
			}
			if (type == 3330)
			{
				num17 = 370;
			}
			if (type == 3331)
			{
				num17 = 439;
			}
			if (type == 3332)
			{
				num17 = 398;
			}
			if (type == 3860)
			{
				num17 = 551;
			}
			if (type == 3861)
			{
				num17 = 576;
			}
			if (type == 3862)
			{
				num17 = 564;
			}
			if (type == 4782)
			{
				num17 = 636;
			}
			if (type == 4957)
			{
				num17 = 657;
			}
			if (type == 5111)
			{
				num17 = 668;
			}
			if (num17 > 0)
			{
				NPC npc = new NPC();
				npc.SetDefaults(num17, default(NPCSpawnParams));
				float num18 = npc.value;
				num18 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				if (Main.rand.Next(5) == 0)
				{
					num18 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
				}
				if (Main.rand.Next(10) == 0)
				{
					num18 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
				}
				if (Main.rand.Next(15) == 0)
				{
					num18 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
				}
				if (Main.rand.Next(20) == 0)
				{
					num18 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
				}
				while ((int)num18 > 0)
				{
					if (num18 > 1000000f)
					{
						int num19 = (int)(num18 / 1000000f);
						num18 -= (float)(1000000 * num19);
						this.QuickSpawnItem(itemSource_OpenItem, 74, num19);
					}
					else if (num18 > 10000f)
					{
						int num20 = (int)(num18 / 10000f);
						num18 -= (float)(10000 * num20);
						this.QuickSpawnItem(itemSource_OpenItem, 73, num20);
					}
					else if (num18 > 100f)
					{
						int num21 = (int)(num18 / 100f);
						num18 -= (float)(100 * num21);
						this.QuickSpawnItem(itemSource_OpenItem, 72, num21);
					}
					else
					{
						int num22 = (int)num18;
						if (num22 < 1)
						{
							num22 = 1;
						}
						num18 -= (float)num22;
						this.QuickSpawnItem(itemSource_OpenItem, 71, num22);
					}
				}
			}
		}

		// Token: 0x06000732 RID: 1842 RVA: 0x002C7C0C File Offset: 0x002C5E0C
		private void TryGettingDevArmor(IEntitySource source)
		{
			if (Main.rand.Next(Main.tenthAnniversaryWorld ? 8 : 16) != 0)
			{
				return;
			}
			switch (Main.rand.Next(18))
			{
			case 0:
				this.QuickSpawnItem(source, 666, 1);
				this.QuickSpawnItem(source, 667, 1);
				this.QuickSpawnItem(source, 668, 1);
				this.QuickSpawnItem(source, 665, 1);
				this.QuickSpawnItem(source, 3287, 1);
				return;
			case 1:
				this.QuickSpawnItem(source, 1554, 1);
				this.QuickSpawnItem(source, 1555, 1);
				this.QuickSpawnItem(source, 1556, 1);
				this.QuickSpawnItem(source, 1586, 1);
				return;
			case 2:
				this.QuickSpawnItem(source, 1554, 1);
				this.QuickSpawnItem(source, 1587, 1);
				this.QuickSpawnItem(source, 1588, 1);
				this.QuickSpawnItem(source, 1586, 1);
				return;
			case 3:
				this.QuickSpawnItem(source, 1557, 1);
				this.QuickSpawnItem(source, 1558, 1);
				this.QuickSpawnItem(source, 1559, 1);
				this.QuickSpawnItem(source, 1585, 1);
				return;
			case 4:
				this.QuickSpawnItem(source, 1560, 1);
				this.QuickSpawnItem(source, 1561, 1);
				this.QuickSpawnItem(source, 1562, 1);
				this.QuickSpawnItem(source, 1584, 1);
				return;
			case 5:
				this.QuickSpawnItem(source, 1563, 1);
				this.QuickSpawnItem(source, 1564, 1);
				this.QuickSpawnItem(source, 1565, 1);
				this.QuickSpawnItem(source, 3582, 1);
				return;
			case 6:
				this.QuickSpawnItem(source, 1566, 1);
				this.QuickSpawnItem(source, 1567, 1);
				this.QuickSpawnItem(source, 1568, 1);
				return;
			case 7:
				this.QuickSpawnItem(source, 1580, 1);
				this.QuickSpawnItem(source, 1581, 1);
				this.QuickSpawnItem(source, 1582, 1);
				this.QuickSpawnItem(source, 1583, 1);
				return;
			case 8:
				this.QuickSpawnItem(source, 3226, 1);
				this.QuickSpawnItem(source, 3227, 1);
				this.QuickSpawnItem(source, 3228, 1);
				this.QuickSpawnItem(source, 3288, 1);
				return;
			case 9:
				this.QuickSpawnItem(source, 3583, 1);
				this.QuickSpawnItem(source, 3581, 1);
				this.QuickSpawnItem(source, 3578, 1);
				this.QuickSpawnItem(source, 3579, 1);
				this.QuickSpawnItem(source, 3580, 1);
				return;
			case 10:
				this.QuickSpawnItem(source, 3585, 1);
				this.QuickSpawnItem(source, 3586, 1);
				this.QuickSpawnItem(source, 3587, 1);
				this.QuickSpawnItem(source, 3588, 1);
				this.QuickSpawnItem(source, 3024, 4);
				return;
			case 11:
				this.QuickSpawnItem(source, 3589, 1);
				this.QuickSpawnItem(source, 3590, 1);
				this.QuickSpawnItem(source, 3591, 1);
				this.QuickSpawnItem(source, 3592, 1);
				this.QuickSpawnItem(source, 3599, 4);
				return;
			case 12:
				this.QuickSpawnItem(source, 3368, 1);
				this.QuickSpawnItem(source, 3921, 1);
				this.QuickSpawnItem(source, 3922, 1);
				this.QuickSpawnItem(source, 3923, 1);
				this.QuickSpawnItem(source, 3924, 1);
				return;
			case 13:
				this.QuickSpawnItem(source, 3925, 1);
				this.QuickSpawnItem(source, 3926, 1);
				this.QuickSpawnItem(source, 3927, 1);
				this.QuickSpawnItem(source, 3928, 1);
				this.QuickSpawnItem(source, 3929, 1);
				return;
			case 14:
				this.QuickSpawnItem(source, 4732, 1);
				this.QuickSpawnItem(source, 4733, 1);
				this.QuickSpawnItem(source, 4734, 1);
				this.QuickSpawnItem(source, 4730, 1);
				return;
			case 15:
				this.QuickSpawnItem(source, 4747, 1);
				this.QuickSpawnItem(source, 4748, 1);
				this.QuickSpawnItem(source, 4749, 1);
				this.QuickSpawnItem(source, 4746, 1);
				return;
			case 16:
				this.QuickSpawnItem(source, 4751, 1);
				this.QuickSpawnItem(source, 4752, 1);
				this.QuickSpawnItem(source, 4753, 1);
				this.QuickSpawnItem(source, 4750, 1);
				return;
			case 17:
				this.QuickSpawnItem(source, 4755, 1);
				this.QuickSpawnItem(source, 4756, 1);
				this.QuickSpawnItem(source, 4757, 1);
				this.QuickSpawnItem(source, 4754, 1);
				return;
			default:
				return;
			}
		}

		// Token: 0x06000733 RID: 1843 RVA: 0x002C8088 File Offset: 0x002C6288
		public void OpenFishingCrate(int crateItemID)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(crateItemID);
			bool flag = ItemID.Sets.IsFishingCrateHardmode[crateItemID];
			if (crateItemID == 2334 || crateItemID == 3979)
			{
				bool flag2 = true;
				while (flag2)
				{
					if (flag && flag2 && Main.rand.Next(200) == 0)
					{
						int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(40) == 0)
					{
						int type = 3200;
						int stack = 1;
						int number2 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type, stack, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(40) == 0)
					{
						int type2 = 3201;
						int stack2 = 1;
						int number3 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type2, stack2, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag && flag2 && Main.rand.Next(25) == 0)
					{
						int type3 = 2424;
						int stack3 = 1;
						int number4 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type3, stack3, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(20) == 0)
					{
						int num = Main.rand.Next(5);
						if (num == 0)
						{
							num = 285;
						}
						else if (num == 1)
						{
							num = 953;
						}
						else if (num == 2)
						{
							num = 4341;
						}
						else if (num == 3)
						{
							num = 3068;
						}
						else if (num == 4)
						{
							num = 3084;
						}
						int number5 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (!flag && flag2 && Main.rand.Next(50) == 0)
					{
						int type4 = 997;
						int stack4 = 1;
						int number6 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type4, stack4, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number6, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int type5;
						int stack5;
						if (Main.rand.Next(3) == 0)
						{
							type5 = 73;
							stack5 = Main.rand.Next(1, 6);
						}
						else
						{
							type5 = 72;
							stack5 = Main.rand.Next(20, 91);
						}
						int number7 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type5, stack5, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number7, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int num2 = Main.rand.Next(4);
						if (num2 == 0)
						{
							num2 = 12;
						}
						else if (num2 == 1)
						{
							num2 = 699;
						}
						else if (num2 == 2)
						{
							num2 = 11;
						}
						else if (num2 == 3)
						{
							num2 = 700;
						}
						if (Main.rand.Next(2) == 0 && flag)
						{
							num2 = Main.rand.Next(2);
							if (num2 == 0)
							{
								num2 = 364;
							}
							else if (num2 == 1)
							{
								num2 = 1104;
							}
						}
						int stack6 = Main.rand.Next(4, 16);
						int number8 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num2, stack6, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number8, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					else if (Main.rand.Next(8) == 0)
					{
						int num3 = Main.rand.Next(4);
						if (num3 == 0)
						{
							num3 = 20;
						}
						else if (num3 == 1)
						{
							num3 = 703;
						}
						else if (num3 == 2)
						{
							num3 = 22;
						}
						else if (num3 == 3)
						{
							num3 = 704;
						}
						else if (num3 == 4)
						{
							num3 = 21;
						}
						else if (num3 == 5)
						{
							num3 = 705;
						}
						else if (num3 == 6)
						{
							num3 = 19;
						}
						else if (num3 == 7)
						{
							num3 = 706;
						}
						int stack7 = Main.rand.Next(2, 6);
						if (Main.rand.Next(2) == 0 && flag)
						{
							num3 = Main.rand.Next(2);
							if (num3 == 0)
							{
								num3 = 381;
							}
							else if (num3 == 1)
							{
								num3 = 1184;
							}
							else if (num3 == 2)
							{
								num3 = 382;
							}
							else if (num3 == 3)
							{
								num3 = 1191;
							}
							else if (num3 == 4)
							{
								num3 = 391;
							}
							else if (num3 == 5)
							{
								num3 = 1198;
							}
							stack7 = Main.rand.Next(2, 4);
						}
						int number9 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num3, stack7, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number9, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int num4 = Main.rand.Next(10);
						if (num4 == 0)
						{
							num4 = 288;
						}
						else if (num4 == 1)
						{
							num4 = 290;
						}
						else if (num4 == 2)
						{
							num4 = 292;
						}
						else if (num4 == 3)
						{
							num4 = 299;
						}
						else if (num4 == 4)
						{
							num4 = 298;
						}
						else if (num4 == 5)
						{
							num4 = 304;
						}
						else if (num4 == 6)
						{
							num4 = 291;
						}
						else if (num4 == 7)
						{
							num4 = 2322;
						}
						else if (num4 == 8)
						{
							num4 = 2323;
						}
						else if (num4 == 9)
						{
							num4 = 2329;
						}
						int stack8 = Main.rand.Next(1, 4);
						int number10 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num4, stack8, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number10, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int num5 = Main.rand.Next(2);
					if (num5 == 0)
					{
						num5 = 28;
					}
					else if (num5 == 1)
					{
						num5 = 110;
					}
					int stack9 = Main.rand.Next(5, 16);
					int number11 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num5, stack9, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number11, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int type6;
					if (Main.rand.Next(3) == 0)
					{
						type6 = 2675;
					}
					else
					{
						type6 = 2674;
					}
					int stack10 = Main.rand.Next(1, 5);
					int number12 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type6, stack10, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number12, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (crateItemID == 2335 || crateItemID == 3980)
			{
				bool flag3 = true;
				while (flag3)
				{
					if (flag && flag3 && Main.rand.Next(60) == 0)
					{
						int number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(25) == 0)
					{
						int type7 = 2501;
						int stack11 = 1;
						int number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type7, stack11, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(20) == 0)
					{
						int type8 = 2587;
						int stack12 = 1;
						int number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type8, stack12, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(15) == 0)
					{
						int type9 = 2608;
						int stack13 = 1;
						int number16 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type9, stack13, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number16, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(20) == 0)
					{
						int type10 = 3200;
						int stack14 = 1;
						int number17 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type10, stack14, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number17, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(20) == 0)
					{
						int type11 = 3201;
						int stack15 = 1;
						int number18 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type11, stack15, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number18, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int type12 = 73;
						int stack16 = Main.rand.Next(5, 11);
						int number19 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type12, stack16, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number19, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num6 = Main.rand.Next(6);
						if (num6 == 0)
						{
							num6 = 12;
						}
						else if (num6 == 1)
						{
							num6 = 699;
						}
						else if (num6 == 2)
						{
							num6 = 11;
						}
						else if (num6 == 3)
						{
							num6 = 700;
						}
						else if (num6 == 4)
						{
							num6 = 14;
						}
						else if (num6 == 5)
						{
							num6 = 701;
						}
						if (Main.rand.Next(2) == 0 && flag)
						{
							num6 = Main.rand.Next(4);
							if (num6 == 0)
							{
								num6 = 364;
							}
							else if (num6 == 1)
							{
								num6 = 1104;
							}
							else if (num6 == 2)
							{
								num6 = 365;
							}
							else if (num6 == 3)
							{
								num6 = 1105;
							}
						}
						int stack17 = Main.rand.Next(12, 22);
						int number20 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num6, stack17, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number20, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					else if (Main.rand.Next(4) == 0)
					{
						int num7 = Main.rand.Next(6);
						if (num7 == 0)
						{
							num7 = 20;
						}
						else if (num7 == 1)
						{
							num7 = 703;
						}
						else if (num7 == 2)
						{
							num7 = 22;
						}
						else if (num7 == 3)
						{
							num7 = 704;
						}
						else if (num7 == 4)
						{
							num7 = 21;
						}
						else if (num7 == 5)
						{
							num7 = 705;
						}
						int num8 = Main.rand.Next(4, 8);
						if (Main.rand.Next(3) != 0 && flag)
						{
							num7 = Main.rand.Next(4);
							if (num7 == 0)
							{
								num7 = 381;
							}
							else if (num7 == 1)
							{
								num7 = 1184;
							}
							else if (num7 == 2)
							{
								num7 = 382;
							}
							else if (num7 == 3)
							{
								num7 = 1191;
							}
							num8 -= Main.rand.Next(2);
						}
						int number21 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num7, num8, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number21, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num9 = Main.rand.Next(8);
						if (num9 == 0)
						{
							num9 = 288;
						}
						else if (num9 == 1)
						{
							num9 = 296;
						}
						else if (num9 == 2)
						{
							num9 = 304;
						}
						else if (num9 == 3)
						{
							num9 = 305;
						}
						else if (num9 == 4)
						{
							num9 = 2322;
						}
						else if (num9 == 5)
						{
							num9 = 2323;
						}
						else if (num9 == 6)
						{
							num9 = 2324;
						}
						else if (num9 == 7)
						{
							num9 = 2327;
						}
						int stack18 = Main.rand.Next(2, 5);
						int number22 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num9, stack18, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number22, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type13 = Main.rand.Next(188, 190);
					int stack19 = Main.rand.Next(5, 16);
					int number23 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type13, stack19, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number23, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type14;
					if (Main.rand.Next(3) == 0)
					{
						type14 = 2676;
					}
					else
					{
						type14 = 2675;
					}
					int stack20 = Main.rand.Next(2, 5);
					int number24 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type14, stack20, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number24, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (crateItemID == 2336 || crateItemID == 3981)
			{
				bool flag4 = true;
				while (flag4)
				{
					if (flag && flag4 && Main.rand.Next(20) == 0)
					{
						int number25 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number25, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (flag4 && Main.rand.Next(8) == 0)
					{
						int type15 = 29;
						int stack21 = 1;
						int number26 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type15, stack21, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number26, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (flag4 && Main.rand.Next(10) == 0)
					{
						int type16 = 2491;
						int stack22 = 1;
						int number27 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type16, stack22, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number27, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (Main.rand.Next(3) == 0)
					{
						int type17 = 73;
						int stack23 = Main.rand.Next(8, 21);
						int number28 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type17, stack23, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number28, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num10 = Main.rand.Next(4);
						if (num10 == 0)
						{
							num10 = 14;
						}
						else if (num10 == 1)
						{
							num10 = 701;
						}
						else if (num10 == 2)
						{
							num10 = 13;
						}
						else if (num10 == 3)
						{
							num10 = 702;
						}
						if (Main.rand.Next(2) == 0 && flag)
						{
							num10 = Main.rand.Next(4);
							if (num10 == 0)
							{
								num10 = 365;
							}
							else if (num10 == 1)
							{
								num10 = 1105;
							}
							else if (num10 == 2)
							{
								num10 = 366;
							}
							else if (num10 == 3)
							{
								num10 = 1106;
							}
						}
						int stack24 = Main.rand.Next(25, 35);
						int number29 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num10, stack24, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number29, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					else if (Main.rand.Next(3) == 0)
					{
						int num11 = Main.rand.Next(4);
						if (num11 == 0)
						{
							num11 = 21;
						}
						else if (num11 == 1)
						{
							num11 = 19;
						}
						else if (num11 == 2)
						{
							num11 = 705;
						}
						else if (num11 == 3)
						{
							num11 = 706;
						}
						if (Main.rand.Next(3) != 0 && flag)
						{
							num11 = Main.rand.Next(4);
							if (num11 == 0)
							{
								num11 = 382;
							}
							else if (num11 == 1)
							{
								num11 = 391;
							}
							else if (num11 == 2)
							{
								num11 = 1191;
							}
							else if (num11 == 3)
							{
								num11 = 1198;
							}
						}
						int stack25 = Main.rand.Next(8, 12);
						int number30 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num11, stack25, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number30, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int num12 = Main.rand.Next(5);
					if (num12 == 0)
					{
						num12 = 288;
					}
					else if (num12 == 1)
					{
						num12 = 296;
					}
					else if (num12 == 2)
					{
						num12 = 305;
					}
					else if (num12 == 3)
					{
						num12 = 2322;
					}
					else if (num12 == 4)
					{
						num12 = 2323;
					}
					int stack26 = Main.rand.Next(2, 6);
					int number31 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num12, stack26, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number31, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type18 = Main.rand.Next(188, 190);
					int stack27 = Main.rand.Next(5, 21);
					int number32 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type18, stack27, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number32, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) != 0)
				{
					int type19 = 2676;
					int stack28 = Main.rand.Next(3, 8);
					int number33 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type19, stack28, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number33, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(30) == 0 && !flag)
				{
					int number34 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 989, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number34, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(15) == 0 && flag)
				{
					int number35 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 989, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number35, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else
			{
				int maxValue = 1;
				bool flag5 = true;
				while (flag5)
				{
					if ((crateItemID == 5002 || crateItemID == 5003) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int num13 = Main.rand.Next(4);
						if (Main.rand.Next(10) == 0)
						{
							num13 = 863;
						}
						else if (num13 == 0)
						{
							num13 = 186;
						}
						else if (num13 == 1)
						{
							num13 = 4404;
						}
						else if (num13 == 2)
						{
							num13 = 277;
						}
						else
						{
							num13 = 187;
						}
						int number36 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num13, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number36, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if ((crateItemID == 3203 || crateItemID == 3982) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int num14 = Main.rand.Next(5);
						if (num14 == 0)
						{
							num14 = 162;
						}
						else if (num14 == 1)
						{
							num14 = 111;
						}
						else if (num14 == 2)
						{
							num14 = 96;
						}
						else if (num14 == 3)
						{
							num14 = 115;
						}
						else
						{
							num14 = 64;
						}
						int number37 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num14, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number37, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if ((crateItemID == 3204 || crateItemID == 3983) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int num15 = Main.rand.Next(5);
						if (num15 == 0)
						{
							num15 = 800;
						}
						else if (num15 == 1)
						{
							num15 = 802;
						}
						else if (num15 == 2)
						{
							num15 = 1256;
						}
						else if (num15 == 3)
						{
							num15 = 1290;
						}
						else
						{
							num15 = 3062;
						}
						int number38 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num15, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number38, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if ((crateItemID == 3205 || crateItemID == 3984) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int type20 = 3085;
						int number39 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type20, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number39, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
						if (Main.rand.Next(2) == 0)
						{
							number39 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 149, Main.rand.Next(5, 16), false, -1, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number39, 1f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					if ((crateItemID == 3206 || crateItemID == 3985) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int num16 = Main.rand.Next(4);
						if (num16 == 0)
						{
							num16 = 158;
						}
						else if (num16 == 1)
						{
							num16 = 65;
						}
						else if (num16 == 2)
						{
							num16 = 159;
						}
						else
						{
							num16 = 2219;
						}
						int number40 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num16, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number40, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if ((crateItemID == 3208 || crateItemID == 3987) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						if (Main.rand.Next(20) == 0)
						{
							int type21 = Main.rand.Next(5);
							type21 = 3017;
							int number41 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type21, 1, false, -1, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number41, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
						else
						{
							int num17 = Main.rand.Next(5);
							if (num17 == 0)
							{
								num17 = 212;
							}
							else if (num17 == 1)
							{
								num17 = 964;
							}
							else if (num17 == 2)
							{
								num17 = 211;
							}
							else if (num17 == 3)
							{
								num17 = 213;
							}
							else
							{
								num17 = 2292;
							}
							int number42 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num17, 1, false, -1, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number42, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
					}
					if ((crateItemID == 4405 || crateItemID == 4406) && flag5 && Main.rand.Next(maxValue) == 0)
					{
						int num18 = Main.rand.Next(6);
						if (num18 == 0)
						{
							num18 = 670;
						}
						else if (num18 == 1)
						{
							num18 = 724;
						}
						else if (num18 == 2)
						{
							num18 = 950;
						}
						else if (num18 == 3)
						{
							if (Main.remixWorld)
							{
								num18 = 725;
							}
							else
							{
								num18 = 1319;
							}
						}
						else if (num18 == 4)
						{
							num18 = 987;
						}
						else
						{
							num18 = 1579;
						}
						int number43 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num18, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number43, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if (crateItemID == 4407 || crateItemID == 4408)
					{
						if (flag5 && Main.rand.Next(maxValue) == 0)
						{
							int num19 = Main.rand.Next(8);
							if (num19 == 0)
							{
								num19 = 4056;
							}
							else if (num19 == 1)
							{
								num19 = 4442;
							}
							else if (num19 == 2)
							{
								num19 = 4055;
							}
							else if (num19 == 3)
							{
								num19 = 4061;
							}
							else if (num19 == 4)
							{
								num19 = 4062;
							}
							else if (num19 == 5)
							{
								num19 = 4276;
							}
							else if (num19 == 6)
							{
								num19 = 4262;
							}
							else
							{
								num19 = 4263;
							}
							int number44 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num19, 1, false, -1, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number44, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
						if (Main.rand.Next(4) == 0)
						{
							int type22 = 4423;
							int stack29 = Main.rand.Next(4, 7);
							int number45 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type22, stack29, false, 0, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number45, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
						if (Main.rand.Next(2) == 0)
						{
							int type23 = 3380;
							int stack30 = Main.rand.Next(10, 17);
							int number46 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type23, stack30, false, 0, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number46, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
						if (Main.rand.Next(35) == 0)
						{
							int type24 = 857;
							int number47 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type24, 1, false, 0, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number47, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
					}
					if (crateItemID == 4877 || crateItemID == 4878)
					{
						if (flag5 && Main.rand.Next(maxValue) == 0)
						{
							if (Main.rand.Next(20) == 0)
							{
								int type25 = Main.rand.Next(5);
								type25 = 906;
								int number48 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type25, 1, false, -1, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number48, 1f, 0f, 0f, 0, 0, 0);
								}
							}
							else
							{
								int num20 = Main.rand.Next(5);
								if (num20 == 0)
								{
									num20 = 4822;
								}
								else if (num20 == 1)
								{
									num20 = 4828;
								}
								else if (num20 == 2)
								{
									num20 = 4880;
								}
								else if (num20 == 3)
								{
									num20 = 4881;
								}
								else
								{
									num20 = 4868;
								}
								int number49 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num20, 1, false, -1, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number49, 1f, 0f, 0f, 0, 0, 0);
								}
							}
							if (Main.rand.Next(4) == 0)
							{
								int type26 = 4858;
								int stack31 = 2;
								int number50 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type26, stack31, false, 0, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number50, 1f, 0f, 0f, 0, 0, 0);
								}
							}
						}
						int type27 = 4879;
						int number51 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type27, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number51, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
						if (Main.rand.Next(3) == 0)
						{
							int type28 = 4824;
							int stack32 = Main.rand.Next(7, 11);
							int number52 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type28, stack32, false, 0, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number52, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
						if (Main.rand.Next(2) == 0)
						{
							int type29 = Main.rand.Next(5);
							switch (type29)
							{
							case 0:
								type29 = 4902;
								break;
							case 1:
								type29 = 4903;
								break;
							case 2:
								type29 = 4904;
								break;
							case 3:
								type29 = 4905;
								break;
							case 4:
								type29 = 4906;
								break;
							}
							int number53 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type29, 1, false, -1, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number53, 1f, 0f, 0f, 0, 0, 0);
							}
							flag5 = false;
						}
					}
					if (Main.rand.Next(4) == 0)
					{
						int type30 = 73;
						int stack33 = Main.rand.Next(5, 13);
						int number54 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type30, stack33, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number54, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int num21 = Main.rand.Next(8);
						if (num21 == 0)
						{
							num21 = 12;
						}
						else if (num21 == 1)
						{
							num21 = 699;
						}
						else if (num21 == 2)
						{
							num21 = 11;
						}
						else if (num21 == 3)
						{
							num21 = 700;
						}
						else if (num21 == 4)
						{
							num21 = 14;
						}
						else if (num21 == 5)
						{
							num21 = 701;
						}
						else if (num21 == 6)
						{
							num21 = 13;
						}
						else if (num21 == 7)
						{
							num21 = 702;
						}
						if (Main.rand.Next(2) == 0 && flag)
						{
							num21 = Main.rand.Next(6);
							if (num21 == 0)
							{
								num21 = 364;
							}
							else if (num21 == 1)
							{
								num21 = 1104;
							}
							else if (num21 == 2)
							{
								num21 = 365;
							}
							else if (num21 == 3)
							{
								num21 = 1105;
							}
							else if (num21 == 4)
							{
								num21 = 366;
							}
							else if (num21 == 5)
							{
								num21 = 1106;
							}
						}
						int stack34 = Main.rand.Next(20, 36);
						int number55 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num21, stack34, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number55, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num22 = Main.rand.Next(6);
						if (num22 == 0)
						{
							num22 = 22;
						}
						else if (num22 == 1)
						{
							num22 = 21;
						}
						else if (num22 == 2)
						{
							num22 = 19;
						}
						else if (num22 == 3)
						{
							num22 = 704;
						}
						else if (num22 == 4)
						{
							num22 = 705;
						}
						else if (num22 == 5)
						{
							num22 = 706;
						}
						int num23 = Main.rand.Next(6, 17);
						if (Main.rand.Next(3) != 0 && flag)
						{
							num22 = Main.rand.Next(6);
							if (num22 == 0)
							{
								num22 = 381;
							}
							else if (num22 == 1)
							{
								num22 = 382;
							}
							else if (num22 == 2)
							{
								num22 = 391;
							}
							else if (num22 == 3)
							{
								num22 = 1184;
							}
							else if (num22 == 4)
							{
								num22 = 1191;
							}
							else if (num22 == 5)
							{
								num22 = 1198;
							}
							num23 -= Main.rand.Next(2);
						}
						int number56 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num22, num23, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number56, 1f, 0f, 0f, 0, 0, 0);
						}
						flag5 = false;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					int num24 = Main.rand.Next(6);
					if (num24 == 0)
					{
						num24 = 288;
					}
					else if (num24 == 1)
					{
						num24 = 296;
					}
					else if (num24 == 2)
					{
						num24 = 304;
					}
					else if (num24 == 3)
					{
						num24 = 305;
					}
					else if (num24 == 4)
					{
						num24 = 2322;
					}
					else if (num24 == 5)
					{
						num24 = 2323;
					}
					int stack35 = Main.rand.Next(2, 5);
					int number57 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num24, stack35, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number57, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type31 = Main.rand.Next(188, 190);
					int stack36 = Main.rand.Next(5, 18);
					int number58 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type31, stack36, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number58, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type32;
					if (Main.rand.Next(2) == 0)
					{
						type32 = 2676;
					}
					else
					{
						type32 = 2675;
					}
					int stack37 = Main.rand.Next(2, 7);
					int number59 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type32, stack37, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number59, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (crateItemID == 5002 || crateItemID == 5003)
				{
					if (Main.rand.Next(3) == 0)
					{
						int type33 = 4090;
						int stack38 = Main.rand.Next(20, 51);
						int number60 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type33, stack38, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number60, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(10) == 0)
					{
						int type34 = 4460;
						int number61 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type34, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number61, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(10) == 0)
					{
						int type35 = 4425;
						int number62 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type35, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number62, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (crateItemID == 3208 || crateItemID == 3987)
				{
					if (Main.rand.Next(3) == 0)
					{
						int type36 = 4564;
						int stack39 = Main.rand.Next(20, 51);
						int number63 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type36, stack39, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number63, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(20) == 0)
					{
						int type37 = 753;
						int number64 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type37, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number64, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if ((crateItemID == 4405 || crateItemID == 4406) && Main.rand.Next(20) == 0)
				{
					int type38 = 669;
					int number65 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type38, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number65, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (crateItemID == 3206 || crateItemID == 3985)
				{
					if (Main.rand.Next(2) == 0)
					{
						int type39 = 751;
						int stack40 = Main.rand.Next(50, 101);
						int number66 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type39, stack40, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number66, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num25 = Main.rand.Next(6);
						if (num25 == 0)
						{
							num25 = 5226;
						}
						else if (num25 == 1)
						{
							num25 = 5254;
						}
						else if (num25 == 2)
						{
							num25 = 5238;
						}
						else if (num25 == 3)
						{
							num25 = 5258;
						}
						else if (num25 == 4)
						{
							num25 = 5255;
						}
						else if (num25 == 5)
						{
							num25 = 5388;
						}
						num25 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num25, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num25, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(40) == 0)
					{
						int type40 = 4978;
						int number67 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type40, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number67, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (crateItemID == 4877 || crateItemID == 4878)
				{
					if (Main.rand.Next(20) == 0)
					{
						int type41 = 4443;
						int number68 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type41, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number68, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(20) == 0)
					{
						int type42 = 4737;
						int number69 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type42, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number69, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(20) == 0)
					{
						int type43 = 4551;
						int number70 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type43, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number70, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (flag && (crateItemID == 3982 || crateItemID == 3986 || crateItemID == 3983))
				{
					if (Main.rand.Next(2) == 0)
					{
						int type44 = 521;
						if (crateItemID == 3986)
						{
							type44 = 520;
						}
						int stack41 = Main.rand.Next(2, 6);
						int number71 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type44, stack41, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number71, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int type45 = 522;
						int stack42 = Main.rand.Next(2, 6);
						if (crateItemID == 3983)
						{
							type45 = 1332;
						}
						else if (crateItemID == 3986)
						{
							type45 = 502;
							stack42 = Main.rand.Next(4, 11);
						}
						int number72 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type45, stack42, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number72, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
		}

		// Token: 0x06000734 RID: 1844 RVA: 0x002CB0D0 File Offset: 0x002C92D0
		public int CountItem(int type, int stopCountingAt = 0)
		{
			int num = 0;
			for (int num2 = 0; num2 != 58; num2++)
			{
				if (this.inventory[num2].stack > 0 && this.inventory[num2].type == type)
				{
					num += this.inventory[num2].stack;
					if (num >= stopCountingAt)
					{
						return num;
					}
				}
			}
			return num;
		}

		// Token: 0x06000735 RID: 1845 RVA: 0x002CB124 File Offset: 0x002C9324
		public bool ConsumeItem(int type, bool reverseOrder = false, bool includeVoidBag = false)
		{
			int num = 0;
			int num2 = 58;
			int num3 = 1;
			if (reverseOrder)
			{
				num = 57;
				num2 = -1;
				num3 = -1;
			}
			for (int num4 = num; num4 != num2; num4 += num3)
			{
				if (this.inventory[num4].stack > 0 && this.inventory[num4].type == type)
				{
					this.inventory[num4].stack--;
					if (this.inventory[num4].stack <= 0)
					{
						this.inventory[num4].SetDefaults(0);
					}
					return true;
				}
			}
			if (!includeVoidBag || !this.useVoidBag())
			{
				return false;
			}
			int num5 = this.FindItem(type, this.bank4.item);
			if (num5 == -1)
			{
				return false;
			}
			Item item = this.bank4.item[num5];
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir(false);
			}
			return true;
		}

		// Token: 0x06000736 RID: 1846 RVA: 0x002CB200 File Offset: 0x002C9400
		public void OpenShadowLockbox(int boxType)
		{
			bool flag = true;
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(boxType);
			while (flag)
			{
				flag = false;
				int type = (int)Main.rand.NextFromList(new short[]
				{
					274,
					220,
					112,
					218,
					3019
				});
				if (Main.remixWorld)
				{
					type = (int)Main.rand.NextFromList(new short[]
					{
						274,
						220,
						683,
						218,
						3019
					});
				}
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, -1, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
				if (Main.rand.Next(5) == 0)
				{
					number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 5010, 1, false, -1, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x06000737 RID: 1847 RVA: 0x002CB320 File Offset: 0x002C9520
		public void OpenLockBox(int lockboxItemType)
		{
			bool flag = true;
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(lockboxItemType);
			while (flag)
			{
				flag = false;
				int num = Main.rand.Next(7);
				int type;
				if (num == 1)
				{
					type = 3317;
				}
				else if (num == 2)
				{
					type = 155;
				}
				else if (num == 3)
				{
					type = 156;
				}
				else if (num == 4)
				{
					if (Main.remixWorld)
					{
						type = 2623;
					}
					else
					{
						type = 157;
					}
				}
				else if (num == 5)
				{
					type = 163;
				}
				else if (num == 6)
				{
					type = 113;
				}
				else
				{
					type = 164;
				}
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, -1, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
				if (Main.rand.Next(3) == 0)
				{
					int number2 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 329, 1, false, -1, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x06000738 RID: 1848 RVA: 0x002CB470 File Offset: 0x002C9670
		public void OpenHerbBag(int bagType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(bagType);
			int num = Main.rand.Next(2, 5);
			if (Main.rand.Next(3) == 0)
			{
				num++;
			}
			for (int i = 0; i < num; i++)
			{
				int num2 = Main.rand.Next(14);
				if (num2 == 0)
				{
					num2 = 313;
				}
				if (num2 == 1)
				{
					num2 = 314;
				}
				if (num2 == 2)
				{
					num2 = 315;
				}
				if (num2 == 3)
				{
					num2 = 317;
				}
				if (num2 == 4)
				{
					num2 = 316;
				}
				if (num2 == 5)
				{
					num2 = 318;
				}
				if (num2 == 6)
				{
					num2 = 2358;
				}
				if (num2 == 7)
				{
					num2 = 307;
				}
				if (num2 == 8)
				{
					num2 = 308;
				}
				if (num2 == 9)
				{
					num2 = 309;
				}
				if (num2 == 10)
				{
					num2 = 311;
				}
				if (num2 == 11)
				{
					num2 = 310;
				}
				if (num2 == 12)
				{
					num2 = 312;
				}
				if (num2 == 13)
				{
					num2 = 2357;
				}
				int num3 = Main.rand.Next(2, 5);
				if (Main.rand.Next(3) == 0)
				{
					num3 += Main.rand.Next(1, 5);
				}
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, num2, num3, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000739 RID: 1849 RVA: 0x002CB5D8 File Offset: 0x002C97D8
		public void OpenCanofWorms(int sourceItemType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(sourceItemType);
			this.QuickSpawnItem(itemSource_OpenItem, 2002, Main.rand.Next(5, 9));
			if (Main.rand.Next(10) < 3)
			{
				this.QuickSpawnItem(itemSource_OpenItem, 3191, Main.rand.Next(1, 3));
			}
			if (Main.rand.Next(20) == 0)
			{
				this.QuickSpawnItem(itemSource_OpenItem, 2895, 1);
			}
		}

		// Token: 0x0600073A RID: 1850 RVA: 0x002CB648 File Offset: 0x002C9848
		public void OpenOyster(int sourceItemType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(sourceItemType);
			if (Main.rand.Next(5) == 0)
			{
				if (Main.rand.Next(15) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4414, 1);
				}
				else if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4413, 1);
				}
				else
				{
					this.QuickSpawnItem(itemSource_OpenItem, 4412, 1);
				}
			}
			this.QuickSpawnItem(itemSource_OpenItem, 4411, 1);
		}

		// Token: 0x0600073B RID: 1851 RVA: 0x002CB6C0 File Offset: 0x002C98C0
		public void OpenGoodieBag(int itemType)
		{
			IEntitySource itemSource_OpenItem = this.GetItemSource_OpenItem(itemType);
			if (Main.rand.Next(150) == 0)
			{
				int number = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1810, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number2 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1800, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(4) == 0)
			{
				int number3 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1809, Main.rand.Next(10, 41), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				int number4 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(1846, 1851), 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int num = Main.rand.Next(19);
				if (num == 0)
				{
					int number5 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1749, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
					}
					number5 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1750, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
					}
					number5 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1751, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 1)
				{
					int number6 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1746, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number6, 1f, 0f, 0f, 0, 0, 0);
					}
					number6 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1747, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number6, 1f, 0f, 0f, 0, 0, 0);
					}
					number6 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1748, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number6, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 2)
				{
					int number7 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1752, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number7, 1f, 0f, 0f, 0, 0, 0);
					}
					number7 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1753, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number7, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 3)
				{
					int number8 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1767, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number8, 1f, 0f, 0f, 0, 0, 0);
					}
					number8 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1768, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number8, 1f, 0f, 0f, 0, 0, 0);
					}
					number8 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1769, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number8, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 4)
				{
					int number9 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1770, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number9, 1f, 0f, 0f, 0, 0, 0);
					}
					number9 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1771, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number9, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 5)
				{
					int number10 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1772, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number10, 1f, 0f, 0f, 0, 0, 0);
					}
					number10 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1773, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number10, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 6)
				{
					int number11 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1754, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number11, 1f, 0f, 0f, 0, 0, 0);
					}
					number11 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1755, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number11, 1f, 0f, 0f, 0, 0, 0);
					}
					number11 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1756, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number11, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 7)
				{
					int number12 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1757, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number12, 1f, 0f, 0f, 0, 0, 0);
					}
					number12 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1758, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number12, 1f, 0f, 0f, 0, 0, 0);
					}
					number12 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1759, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number12, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 8)
				{
					int number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1760, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1761, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1762, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 9)
				{
					int number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1763, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1764, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1765, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 10)
				{
					int number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1766, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1775, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1776, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 11)
				{
					int number16 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1777, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number16, 1f, 0f, 0f, 0, 0, 0);
					}
					number16 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1778, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number16, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 12)
				{
					int number17 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1779, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number17, 1f, 0f, 0f, 0, 0, 0);
					}
					number17 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1780, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number17, 1f, 0f, 0f, 0, 0, 0);
					}
					number17 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1781, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number17, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 13)
				{
					int number18 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1819, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number18, 1f, 0f, 0f, 0, 0, 0);
					}
					number18 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1820, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number18, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 14)
				{
					int number19 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1821, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number19, 1f, 0f, 0f, 0, 0, 0);
					}
					number19 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1822, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number19, 1f, 0f, 0f, 0, 0, 0);
					}
					number19 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1823, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number19, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 15)
				{
					int number20 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1824, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number20, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 16)
				{
					int number21 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1838, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number21, 1f, 0f, 0f, 0, 0, 0);
					}
					number21 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1839, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number21, 1f, 0f, 0f, 0, 0, 0);
					}
					number21 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1840, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number21, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 17)
				{
					int number22 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1841, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number22, 1f, 0f, 0f, 0, 0, 0);
					}
					number22 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1842, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number22, 1f, 0f, 0f, 0, 0, 0);
					}
					number22 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1843, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number22, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 18)
				{
					int number23 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1851, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number23, 1f, 0f, 0f, 0, 0, 0);
					}
					number23 = Item.NewItem(itemSource_OpenItem, (int)this.position.X, (int)this.position.Y, this.width, this.height, 1852, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number23, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600073C RID: 1852 RVA: 0x002CCB38 File Offset: 0x002CAD38
		public void UpdateDyes()
		{
			this.cShieldFallback = -1;
			this.cHead = (this.cBody = (this.cLegs = (this.cHandOn = (this.cHandOff = (this.cBack = (this.cFront = (this.cShoe = (this.cWaist = (this.cShield = (this.cNeck = (this.cFace = (this.cFaceHead = (this.cFaceFlower = (this.cBalloon = (this.cBalloon = (this.cWings = (this.cCarpet = (this.cFloatingTube = (this.cBackpack = (this.cTail = 0))))))))))))))))))));
			this.cGrapple = (this.cMount = (this.cMinecart = (this.cPet = (this.cLight = (this.cYorai = (this.cPortableStool = (this.cUnicornHorn = (this.cAngelHalo = (this.cBeard = (this.cMinion = (this.cLeinShampoo = (this.cFlameWaker = 0))))))))))));
			this.skinDyePacked = 0;
			this.cHead = (int)this.dye[0].dye;
			this.cBody = (int)this.dye[1].dye;
			this.cLegs = (int)this.dye[2].dye;
			if (this.wearsRobe)
			{
				this.cLegs = this.cBody;
			}
			this.cPet = (int)this.miscDyes[0].dye;
			this.cLight = (int)this.miscDyes[1].dye;
			this.cMinecart = (int)this.miscDyes[2].dye;
			this.cMount = (int)this.miscDyes[3].dye;
			this.cGrapple = (int)this.miscDyes[4].dye;
			for (int i = 0; i < 20; i++)
			{
				if (this.IsItemSlotUnlockedAndUsable(i))
				{
					int num = i % 10;
					this.UpdateItemDye(i < 10, this.hideVisibleAccessory[num], this.armor[i], this.dye[num]);
				}
			}
			this.cYorai = this.cPet;
		}

		// Token: 0x0600073D RID: 1853 RVA: 0x002CCD78 File Offset: 0x002CAF78
		private void UpdateItemDye(bool isNotInVanitySlot, bool isSetToHidden, Item armorItem, Item dyeItem)
		{
			if (armorItem.IsAir)
			{
				return;
			}
			bool flag = armorItem.wingSlot > 0 || armorItem.type == 934 || armorItem.type == 4341 || armorItem.type == 5126 || armorItem.type == 4563 || armorItem.type == 1987;
			bool flag2 = isNotInVanitySlot && isSetToHidden;
			if (armorItem.shieldSlot > 0 && (int)armorItem.shieldSlot < ArmorIDs.Shield.Count && (this.cShieldFallback == -1 || !flag2))
			{
				this.cShieldFallback = (int)dyeItem.dye;
			}
			if (flag || !flag2)
			{
				if (armorItem.handOnSlot > 0 && (int)armorItem.handOnSlot < ArmorIDs.HandOn.Count)
				{
					this.cHandOn = (int)dyeItem.dye;
				}
				if (armorItem.handOffSlot > 0 && (int)armorItem.handOffSlot < ArmorIDs.HandOff.Count)
				{
					this.cHandOff = (int)dyeItem.dye;
				}
				if (armorItem.backSlot > 0 && (int)armorItem.backSlot < ArmorIDs.Back.Count)
				{
					if (ArmorIDs.Back.Sets.DrawInBackpackLayer[(int)armorItem.backSlot])
					{
						this.cBackpack = (int)dyeItem.dye;
					}
					else if (ArmorIDs.Back.Sets.DrawInTailLayer[(int)armorItem.backSlot])
					{
						this.cTail = (int)dyeItem.dye;
					}
					else
					{
						this.cBack = (int)dyeItem.dye;
					}
				}
				if (armorItem.frontSlot > 0 && (int)armorItem.frontSlot < ArmorIDs.Front.Count)
				{
					this.cFront = (int)dyeItem.dye;
				}
				if (armorItem.shoeSlot > 0 && (int)armorItem.shoeSlot < ArmorIDs.Shoe.Count)
				{
					if (armorItem.type == 4822 || armorItem.type == 4874)
					{
						this.cFlameWaker = (int)dyeItem.dye;
					}
					else
					{
						this.cShoe = (int)dyeItem.dye;
					}
				}
				if (armorItem.waistSlot > 0 && (int)armorItem.waistSlot < ArmorIDs.Waist.Count)
				{
					this.cWaist = (int)dyeItem.dye;
				}
				if (armorItem.shieldSlot > 0 && (int)armorItem.shieldSlot < ArmorIDs.Shield.Count)
				{
					this.cShield = (int)dyeItem.dye;
				}
				if (armorItem.neckSlot > 0 && (int)armorItem.neckSlot < ArmorIDs.Neck.Count)
				{
					this.cNeck = (int)dyeItem.dye;
				}
				if (armorItem.faceSlot > 0 && armorItem.faceSlot < ArmorIDs.Face.Count)
				{
					if (ArmorIDs.Face.Sets.DrawInFaceHeadLayer[(int)armorItem.faceSlot])
					{
						this.cFaceHead = (int)dyeItem.dye;
					}
					else if (ArmorIDs.Face.Sets.DrawInFaceFlowerLayer[(int)armorItem.faceSlot])
					{
						this.cFaceFlower = (int)dyeItem.dye;
					}
					else
					{
						this.cFace = (int)dyeItem.dye;
					}
				}
				if (armorItem.beardSlot > 0 && armorItem.beardSlot < ArmorIDs.Beard.Count)
				{
					this.cBeard = (int)dyeItem.dye;
				}
				if (armorItem.balloonSlot > 0 && (int)armorItem.balloonSlot < ArmorIDs.Balloon.Count)
				{
					if (ArmorIDs.Balloon.Sets.DrawInFrontOfBackArmLayer[(int)armorItem.balloonSlot])
					{
						this.cBalloonFront = (int)dyeItem.dye;
					}
					else
					{
						this.cBalloon = (int)dyeItem.dye;
					}
				}
				if (armorItem.wingSlot > 0 && (int)armorItem.wingSlot < ArmorIDs.Wing.Count)
				{
					this.cWings = (int)dyeItem.dye;
				}
				if (armorItem.type == 934)
				{
					this.cCarpet = (int)dyeItem.dye;
				}
				if (armorItem.type == 4404)
				{
					this.cFloatingTube = (int)dyeItem.dye;
				}
				if (armorItem.type == 4341 || armorItem.type == 5126)
				{
					this.cPortableStool = (int)dyeItem.dye;
				}
				if (armorItem.type == 4563)
				{
					this.cUnicornHorn = (int)dyeItem.dye;
				}
				if (armorItem.type == 1987)
				{
					this.cAngelHalo = (int)dyeItem.dye;
				}
				if (armorItem.type == 4762)
				{
					this.cMinion = (int)dyeItem.dye;
				}
				if (armorItem.type == 3929)
				{
					this.cLeinShampoo = (int)dyeItem.dye;
				}
			}
		}

		// Token: 0x0600073E RID: 1854 RVA: 0x002CD140 File Offset: 0x002CB340
		public int ArmorSetDye()
		{
			switch (Main.rand.Next(3))
			{
			case 0:
				return this.cHead;
			case 1:
				return this.cBody;
			case 2:
				return this.cLegs;
			default:
				return this.cBody;
			}
		}

		// Token: 0x0600073F RID: 1855 RVA: 0x002CD188 File Offset: 0x002CB388
		public IEntitySource GetProjectileSource_Buff(int buffIndex)
		{
			int buffId = this.buffType[buffIndex];
			return new EntitySource_Buff(this, buffId, buffIndex);
		}

		// Token: 0x06000740 RID: 1856 RVA: 0x002CD1A6 File Offset: 0x002CB3A6
		public IEntitySource GetProjectileSource_Item(Item item)
		{
			return new EntitySource_ItemUse(this, item);
		}

		// Token: 0x06000741 RID: 1857 RVA: 0x002CD1AF File Offset: 0x002CB3AF
		public IEntitySource GetItemSource_OpenItem(int itemType)
		{
			return new EntitySource_ItemOpen(this, itemType);
		}

		// Token: 0x06000742 RID: 1858 RVA: 0x002CD1B8 File Offset: 0x002CB3B8
		public IEntitySource GetItemSource_Death()
		{
			return new EntitySource_ByItemSourceId(this, 3);
		}

		// Token: 0x06000743 RID: 1859 RVA: 0x0024FD76 File Offset: 0x0024DF76
		public IEntitySource GetItemSource_Misc(int itemSourceId)
		{
			return new EntitySource_ByItemSourceId(this, itemSourceId);
		}

		// Token: 0x06000744 RID: 1860 RVA: 0x002CD1C1 File Offset: 0x002CB3C1
		public IEntitySource GetProjectileSource_Item_WithPotentialAmmo(Item item, int ammoItemId)
		{
			return new EntitySource_ItemUse_WithAmmo(this, item, ammoItemId);
		}

		// Token: 0x06000745 RID: 1861 RVA: 0x002CD1CB File Offset: 0x002CB3CB
		public IEntitySource GetProjectileSource_SetBonus(int projectileSourceId)
		{
			return new EntitySource_ByProjectileSourceId(projectileSourceId);
		}

		// Token: 0x06000746 RID: 1862 RVA: 0x0006AA02 File Offset: 0x00068C02
		public IEntitySource GetProjectileSource_OnHit(Entity victim, int projectileSourceId)
		{
			return new EntitySource_OnHit_ByProjectileSourceID(this, victim, projectileSourceId);
		}

		// Token: 0x06000747 RID: 1863 RVA: 0x002CD1D3 File Offset: 0x002CB3D3
		public IEntitySource GetProjectileSource_OnHurt(Entity attacker, int projectileSourceId)
		{
			return new EntitySource_OnHit_ByProjectileSourceID(attacker, this, projectileSourceId);
		}

		// Token: 0x06000748 RID: 1864 RVA: 0x002CD1A6 File Offset: 0x002CB3A6
		public IEntitySource GetProjectileSource_Accessory(Item item)
		{
			return new EntitySource_ItemUse(this, item);
		}

		// Token: 0x06000749 RID: 1865 RVA: 0x002CD1CB File Offset: 0x002CB3CB
		public IEntitySource GetProjectileSource_Misc(int projectileSourceId)
		{
			return new EntitySource_ByProjectileSourceId(projectileSourceId);
		}

		// Token: 0x0600074A RID: 1866 RVA: 0x002CD1DD File Offset: 0x002CB3DD
		public IEntitySource GetProjectileSource_TileInteraction(int tileCoordsX, int tileCoordsY)
		{
			return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
		}

		// Token: 0x0600074B RID: 1867 RVA: 0x002CD1DD File Offset: 0x002CB3DD
		public IEntitySource GetItemSource_TileInteraction(int tileCoordsX, int tileCoordsY)
		{
			return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
		}

		// Token: 0x0600074C RID: 1868 RVA: 0x002CD1DD File Offset: 0x002CB3DD
		public IEntitySource GetNPCSource_TileInteraction(int tileCoordsX, int tileCoordsY)
		{
			return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
		}

		// Token: 0x0600074D RID: 1869 RVA: 0x0006AA0C File Offset: 0x00068C0C
		public IEntitySource GetItemSource_OnHit(Entity victim, int itemSourceId)
		{
			return new EntitySource_OnHit_ByItemSourceID(this, victim, itemSourceId);
		}

		// Token: 0x0600074E RID: 1870 RVA: 0x002CD1E8 File Offset: 0x002CB3E8
		public void UpdateBuffs(int i)
		{
			if (this.soulDrain > 0 && this.whoAmI == Main.myPlayer)
			{
				this.AddBuff(151, 2, true, false);
			}
			if (Main.dontStarveWorld)
			{
				this.UpdateStarvingState(true);
			}
			for (int j = 0; j < Player.maxBuffs; j++)
			{
				if (this.buffType[j] > 0 && this.buffTime[j] > 0)
				{
					if (this.whoAmI == Main.myPlayer && !BuffID.Sets.TimeLeftDoesNotDecrease[this.buffType[j]])
					{
						this.buffTime[j]--;
					}
					if (this.buffType[j] == 1)
					{
						this.lavaImmune = true;
						this.fireWalk = true;
						this.buffImmune[24] = true;
					}
					else if (BuffID.Sets.BasicMountData[this.buffType[j]] != null)
					{
						BuffID.Sets.BuffMountData buffMountData = BuffID.Sets.BasicMountData[this.buffType[j]];
						this.mount.SetMount(buffMountData.mountID, this, buffMountData.faceLeft);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 158)
					{
						this.manaRegenDelayBonus += 0.5f;
						this.manaRegenBonus += 10;
					}
					else if (this.buffType[j] == 159 && this.inventory[this.selectedItem].melee)
					{
						this.armorPenetration += 12;
					}
					else if (this.buffType[j] == 192)
					{
						this.pickSpeed -= 0.2f;
						this.moveSpeed += 0.2f;
					}
					else if (this.buffType[j] == 321)
					{
						int num = 10;
						this.meleeCrit += num;
						this.rangedCrit += num;
						this.magicCrit += num;
						this.minionDamage += (float)num / 100f;
					}
					else if (this.buffType[j] == 2)
					{
						this.lifeRegen += 4;
					}
					else if (this.buffType[j] == 3)
					{
						this.moveSpeed += 0.25f;
					}
					else if (this.buffType[j] == 4)
					{
						this.gills = true;
					}
					else if (this.buffType[j] == 5)
					{
						this.statDefense += 8;
					}
					else if (this.buffType[j] == 6)
					{
						this.manaRegenBuff = true;
					}
					else if (this.buffType[j] == 7)
					{
						this.magicDamage += 0.2f;
					}
					else if (this.buffType[j] == 8)
					{
						this.slowFall = true;
					}
					else if (this.buffType[j] == 9)
					{
						this.findTreasure = true;
					}
					else if (this.buffType[j] == 343)
					{
						this.biomeSight = true;
					}
					else if (this.buffType[j] == 10)
					{
						this.invis = true;
					}
					else if (this.buffType[j] == 11)
					{
						Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.8f, 0.95f, 1f);
					}
					else if (this.buffType[j] == 12)
					{
						this.nightVision = true;
					}
					else if (this.buffType[j] == 13)
					{
						this.enemySpawns = true;
					}
					else if (this.buffType[j] == 14)
					{
						if (this.thorns < 1f)
						{
							this.thorns = 1f;
						}
					}
					else if (this.buffType[j] == 15)
					{
						this.waterWalk = true;
					}
					else if (this.buffType[j] == 16)
					{
						this.archery = true;
					}
					else if (this.buffType[j] == 17)
					{
						this.detectCreature = true;
					}
					else if (this.buffType[j] == 18)
					{
						this.gravControl = true;
					}
					else if (this.buffType[j] == 30)
					{
						this.bleed = true;
					}
					else if (this.buffType[j] == 31)
					{
						this.confused = true;
					}
					else if (this.buffType[j] == 32)
					{
						this.slow = true;
					}
					else if (this.buffType[j] == 35)
					{
						this.silence = true;
					}
					else if (this.buffType[j] == 160)
					{
						this.dazed = true;
					}
					else if (this.buffType[j] == 46)
					{
						this.chilled = true;
					}
					else if (this.buffType[j] == 47)
					{
						this.frozen = true;
					}
					else if (this.buffType[j] == 156)
					{
						this.stoned = true;
					}
					else if (this.buffType[j] == 69)
					{
						this.ichor = true;
						this.statDefense -= 15;
					}
					else if (this.buffType[j] == 36)
					{
						this.brokenArmor = true;
					}
					else if (this.buffType[j] == 48)
					{
						this.honey = true;
					}
					else if (this.buffType[j] == 59)
					{
						this.shadowDodge = true;
					}
					else if (this.buffType[j] == 93)
					{
						this.ammoBox = true;
					}
					else if (this.buffType[j] == 58)
					{
						this.palladiumRegen = true;
					}
					else if (this.buffType[j] == 306)
					{
						this.hasTitaniumStormBuff = true;
					}
					else if (this.buffType[j] == 88)
					{
						this.chaosState = true;
					}
					else if (this.buffType[j] == 215)
					{
						this.statDefense += 5;
					}
					else if (this.buffType[j] == 311)
					{
						this.summonerWeaponSpeedBonus += 0.35f;
					}
					else if (this.buffType[j] == 308)
					{
						this.summonerWeaponSpeedBonus += 0.25f;
					}
					else if (this.buffType[j] == 314)
					{
						this.summonerWeaponSpeedBonus += 0.12f;
					}
					else if (this.buffType[j] == 312)
					{
						this.coolWhipBuff = true;
					}
					else if (this.buffType[j] == 63)
					{
						this.moveSpeed += 1f;
					}
					else if (this.buffType[j] == 104)
					{
						this.pickSpeed -= 0.25f;
					}
					else if (this.buffType[j] == 105)
					{
						this.lifeMagnet = true;
					}
					else if (this.buffType[j] == 106)
					{
						this.calmed = true;
					}
					else if (this.buffType[j] == 121)
					{
						this.fishingSkill += 15;
					}
					else if (this.buffType[j] == 122)
					{
						this.sonarPotion = true;
					}
					else if (this.buffType[j] == 123)
					{
						this.cratePotion = true;
					}
					else if (this.buffType[j] == 107)
					{
						this.tileSpeed += 0.25f;
						this.wallSpeed += 0.25f;
						this.blockRange++;
					}
					else if (this.buffType[j] == 108)
					{
						this.kbBuff = true;
					}
					else if (this.buffType[j] == 109)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
					}
					else if (this.buffType[j] == 110)
					{
						this.maxMinions++;
					}
					else if (this.buffType[j] == 150)
					{
						this.maxMinions++;
					}
					else if (this.buffType[j] == 348)
					{
						this.maxTurrets++;
					}
					else if (this.buffType[j] == 111)
					{
						this.dangerSense = true;
					}
					else if (this.buffType[j] == 112)
					{
						this.ammoPotion = true;
					}
					else if (this.buffType[j] == 113)
					{
						this.lifeForce = true;
						this.statLifeMax2 += this.statLifeMax / 5 / 20 * 20;
					}
					else if (this.buffType[j] == 114)
					{
						this.endurance += 0.1f;
					}
					else if (this.buffType[j] == 115)
					{
						this.meleeCrit += 10;
						this.rangedCrit += 10;
						this.magicCrit += 10;
					}
					else if (this.buffType[j] == 116)
					{
						this.inferno = true;
						Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.65f, 0.4f, 0.1f);
						int num2 = 323;
						float num3 = 200f;
						bool flag = this.infernoCounter % 60 == 0;
						int damage = 20;
						if (this.whoAmI == Main.myPlayer)
						{
							for (int k = 0; k < 200; k++)
							{
								NPC npc = Main.npc[k];
								if (npc.active && !npc.friendly && npc.damage > 0 && !npc.dontTakeDamage && !npc.buffImmune[num2] && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc, null) && Vector2.Distance(base.Center, npc.Center) <= num3)
								{
									if (npc.FindBuffIndex(num2) == -1)
									{
										npc.AddBuff(num2, 120, false);
									}
									if (flag)
									{
										this.ApplyDamageToNPC(npc, damage, 0f, 0, false);
									}
								}
							}
							if (this.hostile)
							{
								for (int l = 0; l < 255; l++)
								{
									Player player = Main.player[l];
									if (player != this && player.active && !player.dead && player.hostile && !player.buffImmune[num2] && (player.team != this.team || player.team == 0) && Vector2.Distance(base.Center, player.Center) <= num3)
									{
										if (player.FindBuffIndex(num2) == -1)
										{
											player.AddBuff(num2, 120, true, false);
										}
										if (flag)
										{
											player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0, true, false, false, -1, true);
											if (Main.netMode != 0)
											{
												PlayerDeathReason reason = PlayerDeathReason.ByOther(16);
												NetMessage.SendPlayerHurt(l, reason, damage, 0, false, true, -1, -1, -1);
											}
										}
									}
								}
							}
						}
					}
					else if (this.buffType[j] == 117)
					{
						this.meleeDamage += 0.1f;
						this.rangedDamage += 0.1f;
						this.magicDamage += 0.1f;
						this.minionDamage += 0.1f;
					}
					else if (this.buffType[j] == 119)
					{
						this.loveStruck = true;
					}
					else if (this.buffType[j] == 120)
					{
						this.stinky = true;
					}
					else if (this.buffType[j] == 124)
					{
						this.resistCold = true;
					}
					else if (this.buffType[j] == 257)
					{
						if (Main.myPlayer == this.whoAmI)
						{
							if (this.buffTime[j] > 36000)
							{
								this.luckPotion = 3;
							}
							else if (this.buffTime[j] > 18000)
							{
								this.luckPotion = 2;
							}
							else
							{
								this.luckPotion = 1;
							}
						}
					}
					else if (this.buffType[j] == 165)
					{
						this.lifeRegen += 6;
						this.statDefense += 8;
						this.dryadWard = true;
						if (this.thorns < 1f)
						{
							this.thorns += 0.5f;
						}
					}
					else if (this.buffType[j] == 144)
					{
						this.electrified = true;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
					}
					else if (this.buffType[j] == 94)
					{
						this.manaSick = true;
						this.manaSickReduction = Player.manaSickLessDmg * ((float)this.buffTime[j] / (float)Player.manaSickTime);
					}
					else if (this.buffType[j] >= 95 && this.buffType[j] <= 97)
					{
						this.buffTime[j] = 5;
						int num4 = (int)((byte)(1 + this.buffType[j] - 95));
						if (this.beetleOrbs > 0 && this.beetleOrbs != num4)
						{
							if (this.beetleOrbs > num4)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int m = 0; m < Player.maxBuffs; m++)
								{
									if (this.buffType[m] >= 95 && this.buffType[m] <= 95 + num4 - 1)
									{
										this.DelBuff(m);
										m--;
									}
								}
							}
						}
						this.beetleOrbs = num4;
						if (!this.beetleDefense)
						{
							this.beetleOrbs = 0;
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.beetleBuff = true;
						}
					}
					else if (this.buffType[j] >= 170 && this.buffType[j] <= 172)
					{
						this.buffTime[j] = 5;
						int num5 = (int)((byte)(1 + this.buffType[j] - 170));
						if (this.solarShields > 0 && this.solarShields != num5)
						{
							if (this.solarShields > num5)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int n = 0; n < Player.maxBuffs; n++)
								{
									if (this.buffType[n] >= 170 && this.buffType[n] <= 170 + num5 - 1)
									{
										this.DelBuff(n);
										n--;
									}
								}
							}
						}
						this.solarShields = num5;
						if (!this.setSolar)
						{
							this.solarShields = 0;
							this.DelBuff(j);
							j--;
						}
					}
					else if (this.buffType[j] >= 98 && this.buffType[j] <= 100)
					{
						int num6 = (int)((byte)(1 + this.buffType[j] - 98));
						if (this.beetleOrbs > 0 && this.beetleOrbs != num6)
						{
							if (this.beetleOrbs > num6)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int num7 = 0; num7 < Player.maxBuffs; num7++)
								{
									if (this.buffType[num7] >= 98 && this.buffType[num7] <= 98 + num6 - 1)
									{
										this.DelBuff(num7);
										num7--;
									}
								}
							}
						}
						this.beetleOrbs = num6;
						this.meleeDamage += 0.1f * (float)this.beetleOrbs;
						this.meleeSpeed += 0.1f * (float)this.beetleOrbs;
						if (!this.beetleOffense)
						{
							this.beetleOrbs = 0;
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.beetleBuff = true;
						}
					}
					else if (this.buffType[j] >= 176 && this.buffType[j] <= 178)
					{
						int num8 = this.nebulaLevelMana;
						int num9 = (int)((byte)(1 + this.buffType[j] - 176));
						if (num8 > 0 && num8 != num9)
						{
							if (num8 > num9)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int num10 = 0; num10 < Player.maxBuffs; num10++)
								{
									if (this.buffType[num10] >= 176 && this.buffType[num10] <= 178 + num9 - 1)
									{
										this.DelBuff(num10);
										num10--;
									}
								}
							}
						}
						this.nebulaLevelMana = num9;
						if (this.buffTime[j] == 2 && this.nebulaLevelMana > 1)
						{
							this.nebulaLevelMana--;
							this.buffType[j]--;
							this.buffTime[j] = 480;
						}
					}
					else if (this.buffType[j] >= 173 && this.buffType[j] <= 175)
					{
						int num11 = this.nebulaLevelLife;
						int num12 = (int)((byte)(1 + this.buffType[j] - 173));
						if (num11 > 0 && num11 != num12)
						{
							if (num11 > num12)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int num13 = 0; num13 < Player.maxBuffs; num13++)
								{
									if (this.buffType[num13] >= 173 && this.buffType[num13] <= 175 + num12 - 1)
									{
										this.DelBuff(num13);
										num13--;
									}
								}
							}
						}
						this.nebulaLevelLife = num12;
						if (this.buffTime[j] == 2 && this.nebulaLevelLife > 1)
						{
							this.nebulaLevelLife--;
							this.buffType[j]--;
							this.buffTime[j] = 480;
						}
						this.lifeRegen += 6 * this.nebulaLevelLife;
					}
					else if (this.buffType[j] >= 179 && this.buffType[j] <= 181)
					{
						int num14 = this.nebulaLevelDamage;
						int num15 = (int)((byte)(1 + this.buffType[j] - 179));
						if (num14 > 0 && num14 != num15)
						{
							if (num14 > num15)
							{
								this.DelBuff(j);
								j--;
							}
							else
							{
								for (int num16 = 0; num16 < Player.maxBuffs; num16++)
								{
									if (this.buffType[num16] >= 179 && this.buffType[num16] <= 181 + num15 - 1)
									{
										this.DelBuff(num16);
										num16--;
									}
								}
							}
						}
						this.nebulaLevelDamage = num15;
						if (this.buffTime[j] == 2 && this.nebulaLevelDamage > 1)
						{
							this.nebulaLevelDamage--;
							this.buffType[j]--;
							this.buffTime[j] = 480;
						}
						float num17 = 0.15f * (float)this.nebulaLevelDamage;
						this.meleeDamage += num17;
						this.rangedDamage += num17;
						this.magicDamage += num17;
						this.minionDamage += num17;
					}
					else if (this.buffType[j] == 62)
					{
						if ((double)this.statLife <= (double)this.statLifeMax2 * 0.5)
						{
							Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.1f, 0.2f, 0.45f);
							this.iceBarrier = true;
							this.endurance += 0.25f;
							this.iceBarrierFrameCounter += 1;
							if (this.iceBarrierFrameCounter > 2)
							{
								this.iceBarrierFrameCounter = 0;
								this.iceBarrierFrame += 1;
								if (this.iceBarrierFrame >= 12)
								{
									this.iceBarrierFrame = 0;
								}
							}
						}
						else
						{
							this.DelBuff(j);
							j--;
						}
					}
					else if (this.buffType[j] == 49)
					{
						for (int num18 = 191; num18 <= 194; num18++)
						{
							if (this.ownedProjectileCounts[num18] > 0)
							{
								this.pygmy = true;
							}
						}
						if (!this.pygmy)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 83)
					{
						if (this.ownedProjectileCounts[317] > 0)
						{
							this.raven = true;
						}
						if (!this.raven)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 64)
					{
						if (this.ownedProjectileCounts[266] > 0)
						{
							this.slime = true;
						}
						if (!this.slime)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 125)
					{
						if (this.ownedProjectileCounts[373] > 0)
						{
							this.hornetMinion = true;
						}
						if (!this.hornetMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 126)
					{
						if (this.ownedProjectileCounts[375] > 0)
						{
							this.impMinion = true;
						}
						if (!this.impMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 133)
					{
						if (this.ownedProjectileCounts[390] > 0 || this.ownedProjectileCounts[391] > 0 || this.ownedProjectileCounts[392] > 0)
						{
							this.spiderMinion = true;
						}
						if (!this.spiderMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 134)
					{
						if (this.ownedProjectileCounts[387] > 0 || this.ownedProjectileCounts[388] > 0)
						{
							this.twinsMinion = true;
						}
						if (!this.twinsMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 135)
					{
						if (this.ownedProjectileCounts[393] > 0 || this.ownedProjectileCounts[394] > 0 || this.ownedProjectileCounts[395] > 0)
						{
							this.pirateMinion = true;
						}
						if (!this.pirateMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 214)
					{
						if (this.ownedProjectileCounts[758] > 0)
						{
							this.vampireFrog = true;
						}
						if (!this.vampireFrog)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 139)
					{
						if (this.ownedProjectileCounts[407] > 0)
						{
							this.sharknadoMinion = true;
						}
						if (!this.sharknadoMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 140)
					{
						if (this.ownedProjectileCounts[423] > 0)
						{
							this.UFOMinion = true;
						}
						if (!this.UFOMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 182)
					{
						if (this.ownedProjectileCounts[613] > 0)
						{
							this.stardustMinion = true;
						}
						if (!this.stardustMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 213)
					{
						if (this.ownedProjectileCounts[755] > 0)
						{
							this.batsOfLight = true;
						}
						if (!this.batsOfLight)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 216)
					{
						bool flag2 = true;
						if (this.ownedProjectileCounts[759] > 0)
						{
							this.babyBird = true;
						}
						else if (this.whoAmI == Main.myPlayer)
						{
							if (this.numMinions < this.maxMinions)
							{
								int num19 = this.FindItem(4281);
								if (num19 != -1)
								{
									Item item = this.inventory[num19];
									int num20 = Projectile.NewProjectile(this.GetProjectileSource_Item(item), base.Top, Vector2.Zero, item.shoot, item.damage, item.knockBack, this.whoAmI, 0f, 0f, 0f);
									Main.projectile[num20].originalDamage = item.damage;
									this.babyBird = true;
								}
							}
							if (!this.babyBird)
							{
								this.DelBuff(j);
								j--;
								flag2 = false;
							}
						}
						if (flag2)
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 325)
					{
						if (this.ownedProjectileCounts[951] > 0)
						{
							this.flinxMinion = true;
						}
						if (!this.flinxMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 335)
					{
						if (this.ownedProjectileCounts[970] > 0)
						{
							this.abigailMinion = true;
						}
						if (!this.abigailMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							this.UpdateAbigailStatus();
						}
					}
					else if (this.buffType[j] == 263)
					{
						if (this.ownedProjectileCounts[831] > 0)
						{
							this.stormTiger = true;
						}
						if (!this.stormTiger)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							this.UpdateStormTigerStatus();
						}
					}
					else if (this.buffType[j] == 271)
					{
						if (this.ownedProjectileCounts[864] > 0)
						{
							this.smolstar = true;
						}
						if (!this.smolstar)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 322)
					{
						if (this.ownedProjectileCounts[946] > 0)
						{
							this.empressBlade = true;
						}
						if (!this.empressBlade)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 187)
					{
						if (this.ownedProjectileCounts[623] > 0)
						{
							this.stardustGuardian = true;
						}
						if (!this.stardustGuardian)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 188)
					{
						if (this.ownedProjectileCounts[625] > 0)
						{
							this.stardustDragon = true;
						}
						if (!this.stardustDragon)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 161)
					{
						if (this.ownedProjectileCounts[533] > 0)
						{
							this.DeadlySphereMinion = true;
						}
						if (!this.DeadlySphereMinion)
						{
							this.DelBuff(j);
							j--;
						}
						else
						{
							this.buffTime[j] = 18000;
						}
					}
					else if (this.buffType[j] == 90)
					{
						this.mount.SetMount(0, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 128)
					{
						this.mount.SetMount(1, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 129)
					{
						this.mount.SetMount(2, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 130)
					{
						this.mount.SetMount(3, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 131)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.mount.SetMount(4, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 132)
					{
						this.mount.SetMount(5, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 168)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.mount.SetMount(12, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 141)
					{
						this.mount.SetMount(7, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 142)
					{
						this.mount.SetMount(8, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 143)
					{
						this.mount.SetMount(9, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 162)
					{
						this.mount.SetMount(10, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 193)
					{
						this.mount.SetMount(14, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 212)
					{
						this.mount.SetMount(17, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 230)
					{
						this.mount.SetMount(23, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 265)
					{
						this.canFloatInWater = true;
						this.accFlipper = true;
						this.mount.SetMount(37, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 275)
					{
						this.mount.SetMount(40, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 276)
					{
						this.mount.SetMount(41, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 277)
					{
						this.mount.SetMount(42, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 278)
					{
						this.mount.SetMount(43, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 279)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.mount.SetMount(44, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 280)
					{
						this.mount.SetMount(45, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 281)
					{
						this.mount.SetMount(46, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 282)
					{
						this.mount.SetMount(47, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 283)
					{
						this.mount.SetMount(48, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 305)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.lavaImmune = true;
						this.mount.SetMount(49, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 318)
					{
						this.mount.SetMount(50, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 342)
					{
						this.mount.SetMount(52, this, false);
						this.buffTime[j] = 10;
					}
					else if (this.buffType[j] == 37)
					{
						if (Main.wofNPCIndex >= 0 && Main.npc[Main.wofNPCIndex].type == 113)
						{
							this.gross = true;
							this.buffTime[j] = 10;
						}
						else
						{
							this.DelBuff(j);
							j--;
						}
					}
					else if (this.buffType[j] == 38)
					{
						this.buffTime[j] = 10;
						this.tongued = true;
					}
					else if (this.buffType[j] == 146)
					{
						this.moveSpeed += 0.1f;
						this.moveSpeed *= 1.1f;
						this.sunflower = true;
					}
					else if (this.buffType[j] == 19)
					{
						this.buffTime[j] = 18000;
						this.lightOrb = true;
						bool flag3 = true;
						if (this.ownedProjectileCounts[18] > 0)
						{
							flag3 = false;
						}
						if (flag3 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 18, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 155)
					{
						this.buffTime[j] = 18000;
						this.crimsonHeart = true;
						bool flag4 = true;
						if (this.ownedProjectileCounts[500] > 0)
						{
							flag4 = false;
						}
						if (flag4 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 500, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 191)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.companionCube, 653, 18000);
					}
					else if (this.buffType[j] == 202)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDD2Dragon, 701, 18000);
					}
					else if (this.buffType[j] == 217)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagUpbeatStar, 764, 18000);
					}
					else if (this.buffType[j] == 219)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBabyShark, 774, 18000);
					}
					else if (this.buffType[j] == 258)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagLilHarpy, 815, 18000);
					}
					else if (this.buffType[j] == 259)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagFennecFox, 816, 18000);
					}
					else if (this.buffType[j] == 260)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagGlitteryButterfly, 817, 18000);
					}
					else if (this.buffType[j] == 261)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBabyImp, 821, 18000);
					}
					else if (this.buffType[j] == 262)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBabyRedPanda, 825, 18000);
					}
					else if (this.buffType[j] == 264)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagPlantero, 854, 18000);
					}
					else if (this.buffType[j] == 266)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDynamiteKitten, 858, 18000);
					}
					else if (this.buffType[j] == 267)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBabyWerewolf, 859, 18000);
					}
					else if (this.buffType[j] == 268)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagShadowMimic, 860, 18000);
					}
					else if (this.buffType[j] == 274)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagVoltBunny, 875, 18000);
					}
					else if (this.buffType[j] == 284)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagKingSlimePet, 881, 18000);
					}
					else if (this.buffType[j] == 285)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagEyeOfCthulhuPet, 882, 18000);
					}
					else if (this.buffType[j] == 286)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagEaterOfWorldsPet, 883, 18000);
					}
					else if (this.buffType[j] == 287)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBrainOfCthulhuPet, 884, 18000);
					}
					else if (this.buffType[j] == 288)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagSkeletronPet, 885, 18000);
					}
					else if (this.buffType[j] == 289)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagQueenBeePet, 886, 18000);
					}
					else if (this.buffType[j] == 290)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDestroyerPet, 887, 18000);
					}
					else if (this.buffType[j] == 291)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagTwinsPet, 888, 18000);
					}
					else if (this.buffType[j] == 292)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagSkeletronPrimePet, 889, 18000);
					}
					else if (this.buffType[j] == 293)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagPlanteraPet, 890, 18000);
					}
					else if (this.buffType[j] == 294)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagGolemPet, 891, 18000);
					}
					else if (this.buffType[j] == 295)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDukeFishronPet, 892, 18000);
					}
					else if (this.buffType[j] == 296)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagLunaticCultistPet, 893, 18000);
					}
					else if (this.buffType[j] == 297)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagMoonLordPet, 894, 18000);
					}
					else if (this.buffType[j] == 298)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagFairyQueenPet, 895, 18000);
					}
					else if (this.buffType[j] == 299)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagPumpkingPet, 896, 18000);
					}
					else if (this.buffType[j] == 300)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagEverscreamPet, 897, 18000);
					}
					else if (this.buffType[j] == 301)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagIceQueenPet, 898, 18000);
					}
					else if (this.buffType[j] == 302)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagMartianPet, 899, 18000);
					}
					else if (this.buffType[j] == 303)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDD2OgrePet, 900, 18000);
					}
					else if (this.buffType[j] == 304)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDD2BetsyPet, 901, 18000);
					}
					else if (this.buffType[j] == 317)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagQueenSlimePet, 934, 18000);
					}
					else if (this.buffType[j] == 327)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBerniePet, 956, 18000);
					}
					else if (this.buffType[j] == 328)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagGlommerPet, 957, 18000);
					}
					else if (this.buffType[j] == 329)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDeerclopsPet, 958, 18000);
					}
					else if (this.buffType[j] == 330)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagPigPet, 959, 18000);
					}
					else if (this.buffType[j] == 331)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagChesterPet, 960, 18000);
					}
					else if (this.buffType[j] == 341)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagKingSlimePet, 881, 18000);
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagQueenSlimePet, 934, 18000);
					}
					else if (this.buffType[j] == 345)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagJunimoPet, 994, 18000);
					}
					else if (this.buffType[j] == 349)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagBlueChickenPet, 998, 18000);
					}
					else if (this.buffType[j] == 351)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagSpiffo, 1003, 18000);
					}
					else if (this.buffType[j] == 352)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagCaveling, 1004, 18000);
					}
					else if (this.buffType[j] == 354)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDirtiestBlock, 1018, 18000);
					}
					else if (this.buffType[j] == 200)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDD2Gato, 703, 18000);
					}
					else if (this.buffType[j] == 201)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagDD2Ghost, 702, 18000);
					}
					else if (this.buffType[j] == 218)
					{
						this.BuffHandle_SpawnPetIfNeededAndSetTime(j, ref this.petFlagSugarGlider, 765, 18000);
					}
					else if (this.buffType[j] == 190)
					{
						this.buffTime[j] = 18000;
						this.suspiciouslookingTentacle = true;
						bool flag5 = true;
						if (this.ownedProjectileCounts[650] > 0)
						{
							flag5 = false;
						}
						if (flag5 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 650, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 27 || this.buffType[j] == 101 || this.buffType[j] == 102)
					{
						this.buffTime[j] = 18000;
						bool flag6 = true;
						int num21 = 72;
						if (this.buffType[j] == 27)
						{
							this.blueFairy = true;
						}
						if (this.buffType[j] == 101)
						{
							num21 = 86;
							this.redFairy = true;
						}
						if (this.buffType[j] == 102)
						{
							num21 = 87;
							this.greenFairy = true;
						}
						if (this.head == 45 && this.body == 26 && this.legs == 25)
						{
							num21 = 72;
						}
						if (this.ownedProjectileCounts[num21] > 0)
						{
							flag6 = false;
						}
						if (flag6 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, num21, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 40)
					{
						this.buffTime[j] = 18000;
						this.bunny = true;
						bool flag7 = true;
						if (this.ownedProjectileCounts[111] > 0)
						{
							flag7 = false;
						}
						if (flag7 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 111, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 148)
					{
						this.rabid = true;
						if (Main.rand.Next(1200) == 0)
						{
							int num22 = Main.rand.Next(6);
							float num23 = (float)Main.rand.Next(60, 100) * 0.01f;
							if (num22 == 0)
							{
								this.AddBuff(22, (int)(60f * num23 * 3f), true, false);
							}
							else if (num22 == 1)
							{
								this.AddBuff(23, (int)(60f * num23 * 0.75f), true, false);
							}
							else if (num22 == 2)
							{
								this.AddBuff(31, (int)(60f * num23 * 1.5f), true, false);
							}
							else if (num22 == 3)
							{
								this.AddBuff(32, (int)(60f * num23 * 3.5f), true, false);
							}
							else if (num22 == 4)
							{
								this.AddBuff(33, (int)(60f * num23 * 5f), true, false);
							}
							else if (num22 == 5)
							{
								this.AddBuff(35, (int)(60f * num23 * 1f), true, false);
							}
						}
						this.meleeDamage += 0.2f;
						this.magicDamage += 0.2f;
						this.rangedDamage += 0.2f;
						this.minionDamage += 0.2f;
					}
					else if (this.buffType[j] == 41)
					{
						this.buffTime[j] = 18000;
						this.penguin = true;
						bool flag8 = true;
						if (this.ownedProjectileCounts[112] > 0)
						{
							flag8 = false;
						}
						if (flag8 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 112, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 152)
					{
						this.buffTime[j] = 18000;
						this.magicLantern = true;
						if (this.ownedProjectileCounts[492] == 0 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 492, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 91)
					{
						this.buffTime[j] = 18000;
						this.puppy = true;
						bool flag9 = true;
						if (this.ownedProjectileCounts[334] > 0)
						{
							flag9 = false;
						}
						if (flag9 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 334, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 92)
					{
						this.buffTime[j] = 18000;
						this.grinch = true;
						bool flag10 = true;
						if (this.ownedProjectileCounts[353] > 0)
						{
							flag10 = false;
						}
						if (flag10 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 353, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 84)
					{
						this.buffTime[j] = 18000;
						this.blackCat = true;
						bool flag11 = true;
						if (this.ownedProjectileCounts[319] > 0)
						{
							flag11 = false;
						}
						if (flag11 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 319, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 61)
					{
						this.buffTime[j] = 18000;
						this.dino = true;
						bool flag12 = true;
						if (this.ownedProjectileCounts[236] > 0)
						{
							flag12 = false;
						}
						if (flag12 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 236, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 154)
					{
						this.buffTime[j] = 18000;
						this.babyFaceMonster = true;
						bool flag13 = true;
						if (this.ownedProjectileCounts[499] > 0)
						{
							flag13 = false;
						}
						if (flag13 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 499, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 65)
					{
						this.buffTime[j] = 18000;
						this.eyeSpring = true;
						bool flag14 = true;
						if (this.ownedProjectileCounts[268] > 0)
						{
							flag14 = false;
						}
						if (flag14 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 268, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 66)
					{
						this.buffTime[j] = 18000;
						this.snowman = true;
						bool flag15 = true;
						if (this.ownedProjectileCounts[269] > 0)
						{
							flag15 = false;
						}
						if (flag15 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 269, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 42)
					{
						this.buffTime[j] = 18000;
						this.turtle = true;
						bool flag16 = true;
						if (this.ownedProjectileCounts[127] > 0)
						{
							flag16 = false;
						}
						if (flag16 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 127, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 45)
					{
						this.buffTime[j] = 18000;
						this.eater = true;
						bool flag17 = true;
						if (this.ownedProjectileCounts[175] > 0)
						{
							flag17 = false;
						}
						if (flag17 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 175, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 50)
					{
						this.buffTime[j] = 18000;
						this.skeletron = true;
						bool flag18 = true;
						if (this.ownedProjectileCounts[197] > 0)
						{
							flag18 = false;
						}
						if (flag18 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 197, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 51)
					{
						this.buffTime[j] = 18000;
						this.hornet = true;
						bool flag19 = true;
						if (this.ownedProjectileCounts[198] > 0)
						{
							flag19 = false;
						}
						if (flag19 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 198, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 52)
					{
						this.buffTime[j] = 18000;
						this.tiki = true;
						bool flag20 = true;
						if (this.ownedProjectileCounts[199] > 0)
						{
							flag20 = false;
						}
						if (flag20 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 199, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 53)
					{
						this.buffTime[j] = 18000;
						this.lizard = true;
						bool flag21 = true;
						if (this.ownedProjectileCounts[200] > 0)
						{
							flag21 = false;
						}
						if (flag21 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 200, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 54)
					{
						this.buffTime[j] = 18000;
						this.parrot = true;
						bool flag22 = true;
						if (this.ownedProjectileCounts[208] > 0)
						{
							flag22 = false;
						}
						if (flag22 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 208, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 55)
					{
						this.buffTime[j] = 18000;
						this.truffle = true;
						bool flag23 = true;
						if (this.ownedProjectileCounts[209] > 0)
						{
							flag23 = false;
						}
						if (flag23 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 209, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 56)
					{
						this.buffTime[j] = 18000;
						this.sapling = true;
						bool flag24 = true;
						if (this.ownedProjectileCounts[210] > 0)
						{
							flag24 = false;
						}
						if (flag24 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 210, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 85)
					{
						this.buffTime[j] = 18000;
						this.cSapling = true;
						bool flag25 = true;
						if (this.ownedProjectileCounts[324] > 0)
						{
							flag25 = false;
						}
						if (flag25 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 324, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 81)
					{
						this.buffTime[j] = 18000;
						this.spider = true;
						bool flag26 = true;
						if (this.ownedProjectileCounts[313] > 0)
						{
							flag26 = false;
						}
						if (flag26 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 313, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 82)
					{
						this.buffTime[j] = 18000;
						this.squashling = true;
						bool flag27 = true;
						if (this.ownedProjectileCounts[314] > 0)
						{
							flag27 = false;
						}
						if (flag27 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 314, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 57)
					{
						this.buffTime[j] = 18000;
						this.wisp = true;
						bool flag28 = true;
						if (this.ownedProjectileCounts[211] > 0)
						{
							flag28 = false;
						}
						if (flag28 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 211, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 60)
					{
						this.buffTime[j] = 18000;
						this.crystalLeaf = true;
						bool flag29 = true;
						for (int num24 = 0; num24 < 1000; num24++)
						{
							if (Main.projectile[num24].active && Main.projectile[num24].owner == this.whoAmI && Main.projectile[num24].type == 226)
							{
								if (!flag29)
								{
									Main.projectile[num24].Kill();
								}
								flag29 = false;
							}
						}
						if (flag29 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 226, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 127)
					{
						this.buffTime[j] = 18000;
						this.zephyrfish = true;
						bool flag30 = true;
						if (this.ownedProjectileCounts[380] > 0)
						{
							flag30 = false;
						}
						if (flag30 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 380, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 136)
					{
						this.buffTime[j] = 18000;
						this.miniMinotaur = true;
						bool flag31 = true;
						if (this.ownedProjectileCounts[398] > 0)
						{
							flag31 = false;
						}
						if (flag31 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Buff(j), this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 398, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
					}
					else if (this.buffType[j] == 70)
					{
						this.venom = true;
					}
					else if (this.buffType[j] == 20)
					{
						this.poisoned = true;
					}
					else if (this.buffType[j] == 21)
					{
						this.potionDelay = this.buffTime[j];
					}
					else if (this.buffType[j] == 22)
					{
						this.blind = true;
					}
					else if (this.buffType[j] == 80)
					{
						this.blackout = true;
					}
					else if (this.buffType[j] == 23)
					{
						this.noItems = true;
						this.cursed = true;
					}
					else if (this.buffType[j] == 24)
					{
						this.onFire = true;
					}
					else if (this.buffType[j] == 103)
					{
						this.dripping = true;
					}
					else if (this.buffType[j] == 137)
					{
						this.drippingSlime = true;
					}
					else if (this.buffType[j] == 320)
					{
						this.drippingSparkleSlime = true;
					}
					else if (this.buffType[j] == 67)
					{
						this.burned = true;
					}
					else if (this.buffType[j] == 68)
					{
						this.suffocating = true;
					}
					else if (this.buffType[j] == 39)
					{
						this.onFire2 = true;
					}
					else if (this.buffType[j] == 323)
					{
						this.onFire3 = true;
					}
					else if (this.buffType[j] == 44)
					{
						this.onFrostBurn = true;
					}
					else if (this.buffType[j] == 324)
					{
						this.onFrostBurn2 = true;
					}
					else if (this.buffType[j] == 353)
					{
						this.shimmering = true;
						this.frozen = true;
						this.fallStart = (int)(this.position.Y / 16f);
						if (Main.myPlayer == this.whoAmI)
						{
							if (this.position.Y / 16f > (float)Main.UnderworldLayer)
							{
								if (Main.myPlayer == this.whoAmI)
								{
									this.DelBuff(j);
								}
							}
							else if (this.shimmerWet)
							{
								this.buffTime[j] = 60;
							}
							else
							{
								bool flag32 = false;
								int num25 = (int)(this.position.X / 16f);
								while ((float)num25 <= (this.position.X + (float)this.width) / 16f)
								{
									int num26 = (int)(this.position.Y / 16f);
									while ((float)num26 <= (this.position.Y + (float)this.height) / 16f)
									{
										if (WorldGen.SolidTile3(num25, num26))
										{
											flag32 = true;
										}
										num26++;
									}
									num25++;
								}
								if (flag32)
								{
									this.buffTime[j] = 6;
								}
								else
								{
									this.DelBuff(j);
								}
							}
						}
					}
					else if (this.buffType[j] == 163)
					{
						this.headcovered = true;
						this.bleed = true;
					}
					else if (this.buffType[j] == 164)
					{
						this.vortexDebuff = true;
					}
					else if (this.buffType[j] == 194)
					{
						this.windPushed = true;
					}
					else if (this.buffType[j] == 195)
					{
						this.witheredArmor = true;
					}
					else if (this.buffType[j] == 205)
					{
						this.ballistaPanic = true;
					}
					else if (this.buffType[j] == 196)
					{
						this.witheredWeapon = true;
					}
					else if (this.buffType[j] == 197)
					{
						this.slowOgreSpit = true;
					}
					else if (this.buffType[j] == 198)
					{
						this.parryDamageBuff = true;
					}
					else if (this.buffType[j] == 145)
					{
						this.moonLeech = true;
					}
					else if (this.buffType[j] == 149)
					{
						this.webbed = true;
						if (this.velocity.Y != 0f)
						{
							this.velocity = new Vector2(0f, 1E-06f);
						}
						else
						{
							this.velocity = Vector2.Zero;
						}
						Player.jumpHeight = 0;
						this.gravity = 0f;
						this.moveSpeed = 0f;
						this.dash = 0;
						this.dashType = 0;
						this.noKnockback = true;
						this.RemoveAllGrapplingHooks();
					}
					else if (this.buffType[j] == 43)
					{
						this.defendedByPaladin = true;
					}
					else if (this.buffType[j] == 29)
					{
						this.magicCrit += 2;
						this.magicDamage += 0.05f;
						this.statManaMax2 += 20;
						this.manaCost -= 0.02f;
					}
					else if (this.buffType[j] == 28)
					{
						if (!Main.dayTime && this.wolfAcc && !this.merman)
						{
							this.lifeRegen++;
							this.wereWolf = true;
							this.meleeCrit += 2;
							this.meleeDamage += 0.051f;
							this.meleeSpeed += 0.051f;
							this.statDefense += 3;
							this.moveSpeed += 0.05f;
						}
						else
						{
							this.DelBuff(j);
							j--;
						}
					}
					else if (this.buffType[j] == 33)
					{
						this.meleeDamage -= 0.051f;
						this.meleeSpeed -= 0.051f;
						this.statDefense -= 4;
						this.moveSpeed -= 0.1f;
					}
					else if (this.buffType[j] == 25)
					{
						this.tipsy = true;
						this.statDefense -= 4;
						this.meleeCrit += 2;
						this.meleeDamage += 0.1f;
						this.meleeSpeed += 0.1f;
					}
					else if (this.buffType[j] == 26)
					{
						this.wellFed = true;
						this.statDefense += 2;
						this.meleeCrit += 2;
						this.meleeDamage += 0.05f;
						this.meleeSpeed += 0.05f;
						this.magicCrit += 2;
						this.magicDamage += 0.05f;
						this.rangedCrit += 2;
						this.rangedDamage += 0.05f;
						this.minionDamage += 0.05f;
						this.minionKB += 0.5f;
						this.moveSpeed += 0.2f;
						this.pickSpeed -= 0.05f;
					}
					else if (this.buffType[j] == 206)
					{
						this.wellFed = true;
						this.statDefense += 3;
						this.meleeCrit += 3;
						this.meleeDamage += 0.075f;
						this.meleeSpeed += 0.075f;
						this.magicCrit += 3;
						this.magicDamage += 0.075f;
						this.rangedCrit += 3;
						this.rangedDamage += 0.075f;
						this.minionDamage += 0.075f;
						this.minionKB += 0.75f;
						this.moveSpeed += 0.3f;
						this.pickSpeed -= 0.1f;
					}
					else if (this.buffType[j] == 207)
					{
						this.wellFed = true;
						this.statDefense += 4;
						this.meleeCrit += 4;
						this.meleeDamage += 0.1f;
						this.meleeSpeed += 0.1f;
						this.magicCrit += 4;
						this.magicDamage += 0.1f;
						this.rangedCrit += 4;
						this.rangedDamage += 0.1f;
						this.minionDamage += 0.1f;
						this.minionKB += 1f;
						this.moveSpeed += 0.4f;
						this.pickSpeed -= 0.15f;
					}
					else if (this.buffType[j] == 333)
					{
						this.hungry = true;
						this.statDefense -= 2;
						this.meleeCrit -= 2;
						this.meleeDamage -= 0.05f;
						this.meleeSpeed -= 0.05f;
						this.magicCrit -= 2;
						this.magicDamage -= 0.05f;
						this.rangedCrit -= 2;
						this.rangedDamage -= 0.05f;
						this.minionDamage -= 0.05f;
						this.minionKB -= 0.5f;
						this.pickSpeed += 0.05f;
					}
					else if (this.buffType[j] == 334)
					{
						this.starving = true;
						this.statDefense -= 4;
						this.meleeCrit -= 4;
						this.meleeDamage -= 0.1f;
						this.meleeSpeed -= 0.1f;
						this.magicCrit -= 4;
						this.magicDamage -= 0.1f;
						this.rangedCrit -= 4;
						this.rangedDamage -= 0.1f;
						this.minionDamage -= 0.1f;
						this.minionKB -= 1f;
						this.pickSpeed += 0.15f;
					}
					else if (this.buffType[j] == 336)
					{
						this.heartyMeal = true;
					}
					else if (this.buffType[j] == 71)
					{
						this.meleeEnchant = 1;
					}
					else if (this.buffType[j] == 73)
					{
						this.meleeEnchant = 2;
					}
					else if (this.buffType[j] == 74)
					{
						this.meleeEnchant = 3;
					}
					else if (this.buffType[j] == 75)
					{
						this.meleeEnchant = 4;
					}
					else if (this.buffType[j] == 76)
					{
						this.meleeEnchant = 5;
					}
					else if (this.buffType[j] == 77)
					{
						this.meleeEnchant = 6;
					}
					else if (this.buffType[j] == 78)
					{
						this.meleeEnchant = 7;
					}
					else if (this.buffType[j] == 79)
					{
						this.meleeEnchant = 8;
					}
				}
			}
			this.UpdateHungerBuffs();
			if (this.whoAmI == Main.myPlayer && this.luckPotion != this.oldLuckPotion)
			{
				this.luckNeedsSync = true;
				this.oldLuckPotion = this.luckPotion;
			}
		}

		// Token: 0x0600074F RID: 1871 RVA: 0x002D1E14 File Offset: 0x002D0014
		public void TryToResetHungerToNeutral()
		{
			bool flag = false;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[i] > 0 && this.buffTime[i] > 0 && (this.buffType[i] == 332 || this.buffType[i] == 333 || this.buffType[i] == 334))
				{
					this.buffTime[i] = 0;
					flag = true;
				}
			}
			if (flag)
			{
				this.UpdateHungerBuffs();
			}
		}

		// Token: 0x06000750 RID: 1872 RVA: 0x002D1E8C File Offset: 0x002D008C
		public void UpdateHungerBuffs()
		{
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[i] > 0 && this.buffTime[i] > 0)
				{
					if (this.buffType[i] == 332)
					{
						if (this.buffTime[i] <= 2 && this.whoAmI == Main.myPlayer)
						{
							if (Main.remixWorld && Main.dontStarveWorld)
							{
								this.AddBuff(333, 28800, true, false);
							}
							else
							{
								this.AddBuff(333, 18000, true, false);
							}
							EmoteBubble.MakeLocalPlayerEmote(147);
						}
						if (!Main.dontStarveWorld)
						{
							this.buffTime[i] = 0;
						}
					}
					else if (this.buffType[i] == 333)
					{
						if (this.buffTime[i] <= 2 && this.whoAmI == Main.myPlayer)
						{
							if (Main.remixWorld && Main.dontStarveWorld)
							{
								this.AddBuff(334, 5, true, false);
							}
							else
							{
								this.AddBuff(334, 5, true, false);
							}
							EmoteBubble.MakeLocalPlayerEmote(148);
						}
						if (!Main.dontStarveWorld)
						{
							this.buffTime[i] = 0;
						}
					}
					else if (this.buffType[i] == 334 && !Main.dontStarveWorld)
					{
						this.buffTime[i] = 0;
					}
				}
			}
		}

		// Token: 0x06000751 RID: 1873 RVA: 0x002D1FD8 File Offset: 0x002D01D8
		public void UpdateStarvingState(bool withEmote)
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			bool flag = false;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffTime[i] > 0 && BuffID.Sets.IsFedState[this.buffType[i]])
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				if (Main.remixWorld && Main.dontStarveWorld)
				{
					this.AddBuff(332, 28800, true, false);
				}
				else
				{
					this.AddBuff(332, 18000, true, false);
				}
				if (withEmote)
				{
					EmoteBubble.MakeLocalPlayerEmote(146);
				}
			}
		}

		// Token: 0x06000752 RID: 1874 RVA: 0x002D2068 File Offset: 0x002D0268
		private void UpdateProjectileCaches(int i)
		{
			for (int j = 0; j < 1000; j++)
			{
				if (Main.projectile[j].active && Main.projectile[j].owner == i)
				{
					this.ownedProjectileCounts[Main.projectile[j].type]++;
					int type = Main.projectile[j].type;
					if (type != 831)
					{
						if (type == 970)
						{
							int originalDamage = Main.projectile[j].originalDamage;
							if (this.highestAbigailCounterOriginalDamage < originalDamage)
							{
								this.highestAbigailCounterOriginalDamage = originalDamage;
							}
						}
					}
					else
					{
						int originalDamage2 = Main.projectile[j].originalDamage;
						if (this.highestStormTigerGemOriginalDamage < originalDamage2)
						{
							this.highestStormTigerGemOriginalDamage = originalDamage2;
						}
					}
				}
			}
		}

		// Token: 0x06000753 RID: 1875 RVA: 0x002D2124 File Offset: 0x002D0324
		private void ResetProjectileCaches()
		{
			this.highestStormTigerGemOriginalDamage = 0;
			this.highestAbigailCounterOriginalDamage = 0;
			for (int i = 0; i < this.ownedProjectileCounts.Length; i++)
			{
				this.ownedProjectileCounts[i] = 0;
			}
		}

		// Token: 0x06000754 RID: 1876 RVA: 0x002D215B File Offset: 0x002D035B
		public void BuffHandle_SpawnPetIfNeededAndSetTime(int buffIndex, ref bool petBool, int petProjID, int buffTimeToGive = 18000)
		{
			this.buffTime[buffIndex] = buffTimeToGive;
			this.BuffHandle_SpawnPetIfNeeded(ref petBool, petProjID, buffIndex);
		}

		// Token: 0x06000755 RID: 1877 RVA: 0x002D2170 File Offset: 0x002D0370
		public void BuffHandle_SpawnPetIfNeeded(ref bool petBool, int petProjID, int buffIndex)
		{
			petBool = true;
			bool flag = true;
			if (this.ownedProjectileCounts[petProjID] > 0)
			{
				flag = false;
			}
			Vector2 vector = base.Center;
			if (this.buffType[buffIndex] == 341)
			{
				float num = 10f;
				if (petProjID == 934)
				{
					vector += new Vector2(num * (float)this.direction, 0f);
				}
				else
				{
					vector -= new Vector2(num * (float)this.direction, 0f);
				}
			}
			if (flag && this.whoAmI == Main.myPlayer)
			{
				Projectile.NewProjectile(this.GetProjectileSource_Buff(buffIndex), vector.X, vector.Y, 0f, 0f, petProjID, 0, 0f, this.whoAmI, 0f, 0f, 0f);
			}
		}

		// Token: 0x06000756 RID: 1878 RVA: 0x002D2238 File Offset: 0x002D0438
		private void UpdateAbigailStatus()
		{
			int num = 963;
			if (this.ownedProjectileCounts[970] < 1)
			{
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == this.whoAmI && projectile.type == num)
					{
						projectile.Kill();
					}
				}
				return;
			}
			if (this.ownedProjectileCounts[num] < 1)
			{
				Projectile.NewProjectile(this.GetProjectileSource_Misc(14), base.Center, Vector2.Zero, num, 0, 0f, this.whoAmI, 0f, 0f, 0f);
			}
		}

		// Token: 0x06000757 RID: 1879 RVA: 0x002D22DC File Offset: 0x002D04DC
		private void UpdateStormTigerStatus()
		{
			int num;
			switch (this.GetDesiredStormTigerMinionRank())
			{
			case 1:
				num = 833;
				break;
			case 2:
				num = 834;
				break;
			case 3:
				num = 835;
				break;
			default:
				num = -1;
				break;
			}
			bool flag = false;
			if (num == -1)
			{
				flag = true;
			}
			for (int i = 0; i < ProjectileID.Sets.StormTigerIds.Length; i++)
			{
				int num2 = ProjectileID.Sets.StormTigerIds[i];
				if (num2 != num && this.ownedProjectileCounts[num2] >= 1)
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				for (int j = 0; j < 1000; j++)
				{
					Projectile projectile = Main.projectile[j];
					if (projectile.active && projectile.owner == this.whoAmI && projectile.type != num && ProjectileID.Sets.StormTiger[projectile.type])
					{
						projectile.Kill();
					}
				}
				return;
			}
			if (this.ownedProjectileCounts[num] < 1)
			{
				int num3 = Projectile.NewProjectile(this.GetProjectileSource_Misc(13), base.Center, Vector2.Zero, num, 0, 0f, this.whoAmI, 0f, 1f, 0f);
				Main.projectile[num3].localAI[0] = 60f;
			}
		}

		// Token: 0x06000758 RID: 1880 RVA: 0x002D2408 File Offset: 0x002D0608
		private int GetDesiredStormTigerMinionRank()
		{
			int result = 0;
			int num = this.ownedProjectileCounts[831];
			if (num > 0)
			{
				result = 1;
			}
			if (num > 3)
			{
				result = 2;
			}
			if (num > 6)
			{
				result = 3;
			}
			return result;
		}

		// Token: 0x06000759 RID: 1881 RVA: 0x002D2438 File Offset: 0x002D0638
		public void Counterweight(Vector2 hitPos, int dmg, float kb)
		{
			if (!this.yoyoGlove && this.counterWeight <= 0)
			{
				return;
			}
			int num = -1;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI)
				{
					if (Main.projectile[i].counterweight)
					{
						num3++;
					}
					else if (Main.projectile[i].aiStyle == 99)
					{
						num2++;
						num = i;
					}
				}
			}
			if (this.yoyoGlove && num2 < 2)
			{
				if (num >= 0)
				{
					Vector2 vector = hitPos - base.Center;
					vector.Normalize();
					vector *= 16f;
					Projectile.NewProjectile(Projectile.InheritSource(Main.projectile[num]), base.Center.X, base.Center.Y, vector.X, vector.Y, Main.projectile[num].type, Main.projectile[num].damage, Main.projectile[num].knockBack, this.whoAmI, 1f, 0f, 0f);
					return;
				}
			}
			else if (num3 < num2)
			{
				Vector2 vector2 = hitPos - base.Center;
				vector2.Normalize();
				vector2 *= 16f;
				float knockBack = (kb + 6f) / 2f;
				IEntitySource spawnSource = Projectile.InheritSource(Main.projectile[num]);
				if (num3 > 0)
				{
					Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, vector2.X, vector2.Y, this.counterWeight, (int)((double)dmg * 0.8), knockBack, this.whoAmI, 1f, 0f, 0f);
					return;
				}
				Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, vector2.X, vector2.Y, this.counterWeight, (int)((double)dmg * 0.8), knockBack, this.whoAmI, 0f, 0f, 0f);
			}
		}

		// Token: 0x0600075A RID: 1882 RVA: 0x002D265D File Offset: 0x002D085D
		public int beeType()
		{
			if (this.strongBees && Main.rand.Next(2) == 0)
			{
				this.makeStrongBee = true;
				return 566;
			}
			this.makeStrongBee = false;
			return 181;
		}

		// Token: 0x0600075B RID: 1883 RVA: 0x002D268D File Offset: 0x002D088D
		public int beeDamage(int dmg)
		{
			if (this.makeStrongBee)
			{
				return dmg + Main.rand.Next(1, 4);
			}
			return dmg + Main.rand.Next(2);
		}

		// Token: 0x0600075C RID: 1884 RVA: 0x002D26B3 File Offset: 0x002D08B3
		public float beeKB(float KB)
		{
			if (this.makeStrongBee)
			{
				return 0.5f + KB * 1.1f;
			}
			return KB;
		}

		// Token: 0x0600075D RID: 1885 RVA: 0x002D26CC File Offset: 0x002D08CC
		public void Yoraiz0rEye()
		{
			int num = 0;
			num += this.bodyFrame.Y / 56;
			if (num >= Main.OffsetsPlayerHeadgear.Length)
			{
				num = 0;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[num];
			vector *= this.Directions;
			Vector2 vector2 = new Vector2((float)(this.width / 2), (float)(this.height / 2)) + vector + (this.MountedCenter - base.Center);
			Vector2 value;
			float y;
			this.sitting.GetSittingOffsetInfo(this, out value, out y);
			vector2 += value + new Vector2(0f, y);
			if (this.face == 19)
			{
				vector2.Y -= 5f * this.gravDir;
			}
			if (this.head == 276)
			{
				vector2.X += 2.5f * (float)this.direction;
			}
			if (this.mount.Active && this.mount.Type == 52)
			{
				vector2.X += 14f * (float)this.direction;
				vector2.Y -= 2f * this.gravDir;
			}
			float y2 = -11.5f * this.gravDir;
			Vector2 vector3 = new Vector2((float)(3 * this.direction - ((this.direction == 1) ? 1 : 0)), y2) + Vector2.UnitY * this.gfxOffY + vector2;
			Vector2 vector4 = new Vector2((float)(3 * this.shadowDirection[1] - ((this.direction == 1) ? 1 : 0)), y2) + vector2;
			Vector2 vector5 = Vector2.Zero;
			if (this.mount.Active && this.mount.Cart)
			{
				int num2 = Math.Sign(this.velocity.X);
				if (num2 == 0)
				{
					num2 = this.direction;
				}
				vector5 = new Vector2(MathHelper.Lerp(0f, -8f, this.fullRotation / 0.7853982f), MathHelper.Lerp(0f, 2f, Math.Abs(this.fullRotation / 0.7853982f))).RotatedBy((double)this.fullRotation, default(Vector2));
				if (num2 == Math.Sign(this.fullRotation))
				{
					vector5 *= MathHelper.Lerp(1f, 0.6f, Math.Abs(this.fullRotation / 0.7853982f));
				}
			}
			if (this.fullRotation != 0f)
			{
				vector3 = vector3.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				vector4 = vector4.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
			}
			float num3 = 0f;
			Vector2 vector6 = this.position + vector3 + vector5;
			Vector2 vector7 = this.oldPosition + vector4 + vector5;
			vector7.Y -= num3 / 2f;
			vector6.Y -= num3 / 2f;
			float num4 = 1f;
			switch (this.yoraiz0rEye % 10)
			{
			case 1:
				return;
			case 2:
				num4 = 0.5f;
				break;
			case 3:
				num4 = 0.625f;
				break;
			case 4:
				num4 = 0.75f;
				break;
			case 5:
				num4 = 0.875f;
				break;
			case 6:
				num4 = 1f;
				break;
			case 7:
				num4 = 1.1f;
				break;
			}
			if (this.yoraiz0rEye < 7)
			{
				DelegateMethods.v3_1 = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f, byte.MaxValue).ToVector3() * 0.5f * num4;
				if (this.velocity != Vector2.Zero)
				{
					Utils.PlotTileLine(base.Center, base.Center + this.velocity * 2f, 4f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
				else
				{
					Utils.PlotTileLine(base.Left, base.Right, 4f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
				}
			}
			int num5 = (int)Vector2.Distance(vector6, vector7) / 3 + 1;
			if (Vector2.Distance(vector6, vector7) % 3f != 0f)
			{
				num5++;
			}
			for (float num6 = 1f; num6 <= (float)num5; num6 += 1f)
			{
				Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 182, 0f, 0f, 0, default(Color), 1f)];
				dust.position = Vector2.Lerp(vector7, vector6, num6 / (float)num5);
				dust.noGravity = true;
				dust.velocity = Vector2.Zero;
				dust.customData = this;
				dust.scale = num4;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cYorai, this);
			}
		}

		// Token: 0x0600075E RID: 1886 RVA: 0x002D2BD0 File Offset: 0x002D0DD0
		public bool IsItemSlotUnlockedAndUsable(int slot)
		{
			if (slot <= 9)
			{
				if (slot == 8)
				{
					goto IL_1C;
				}
				if (slot == 9)
				{
					goto IL_38;
				}
			}
			else
			{
				if (slot == 18)
				{
					goto IL_1C;
				}
				if (slot == 19)
				{
					goto IL_38;
				}
			}
			return true;
			IL_1C:
			bool result = this.extraAccessory;
			if (!Main.expertMode && !Main.gameMenu)
			{
				result = false;
			}
			return result;
			IL_38:
			bool result2 = true;
			if (!Main.masterMode && !Main.gameMenu)
			{
				result2 = false;
			}
			return result2;
		}

		// Token: 0x0600075F RID: 1887 RVA: 0x002D2C2C File Offset: 0x002D0E2C
		public void RefreshInfoAccs()
		{
			bool flag = false;
			this.accWatch = 0;
			this.accCompass = 0;
			this.accDepthMeter = 0;
			this.accFishFinder = false;
			this.accWeatherRadio = false;
			this.accCalendar = false;
			this.accThirdEye = false;
			this.accJarOfSouls = false;
			this.accCritterGuide = false;
			this.accStopwatch = false;
			this.accOreFinder = false;
			this.accDreamCatcher = false;
			for (int i = 0; i < 58; i++)
			{
				int type = this.inventory[i].type;
				this.RefreshInfoAccsFromItemType(type);
				if (type == 4131)
				{
					flag = true;
				}
			}
			for (int j = 0; j < 10; j++)
			{
				int type2 = this.armor[j].type;
				this.RefreshInfoAccsFromItemType(type2);
			}
			if (flag)
			{
				for (int k = 0; k < 40; k++)
				{
					int type3 = this.bank4.item[k].type;
					if (type3 < 0 || type3 > (int)ItemID.Count || ItemID.Sets.WorksInVoidBag[type3])
					{
						this.RefreshInfoAccsFromItemType(type3);
					}
				}
			}
			this.RefreshInfoAccsFromTeamPlayers();
		}

		// Token: 0x06000760 RID: 1888 RVA: 0x002D2D30 File Offset: 0x002D0F30
		public void RefreshInfoAccsFromTeamPlayers()
		{
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				for (int i = 0; i < 255; i++)
				{
					if (i != this.whoAmI && Main.player[i].active && !Main.player[i].dead && Main.player[i].team == this.team && Main.player[i].team != 0)
					{
						int num = 800;
						if ((Main.player[i].Center - base.Center).Length() < (float)num)
						{
							if (Main.player[i].accWatch > this.accWatch)
							{
								this.accWatch = Main.player[i].accWatch;
							}
							if (Main.player[i].accCompass > this.accCompass)
							{
								this.accCompass = Main.player[i].accCompass;
							}
							if (Main.player[i].accDepthMeter > this.accDepthMeter)
							{
								this.accDepthMeter = Main.player[i].accDepthMeter;
							}
							if (Main.player[i].accFishFinder)
							{
								this.accFishFinder = true;
							}
							if (Main.player[i].accWeatherRadio)
							{
								this.accWeatherRadio = true;
							}
							if (Main.player[i].accThirdEye)
							{
								this.accThirdEye = true;
							}
							if (Main.player[i].accJarOfSouls)
							{
								this.accJarOfSouls = true;
							}
							if (Main.player[i].accCalendar)
							{
								this.accCalendar = true;
							}
							if (Main.player[i].accStopwatch)
							{
								this.accStopwatch = true;
							}
							if (Main.player[i].accOreFinder)
							{
								this.accOreFinder = true;
							}
							if (Main.player[i].accCritterGuide)
							{
								this.accCritterGuide = true;
							}
							if (Main.player[i].accDreamCatcher)
							{
								this.accDreamCatcher = true;
							}
							if (Main.player[i].hasLuck_LuckyHorseshoe)
							{
								this.hasLuck_LuckyHorseshoe = true;
							}
							if (Main.player[i].hasLuck_LuckyCoin)
							{
								this.hasLuck_LuckyCoin = true;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000761 RID: 1889 RVA: 0x002D2F4C File Offset: 0x002D114C
		public void RefreshInfoAccsFromItemType(int accType)
		{
			if ((accType == 15 || accType == 707) && this.accWatch < 1)
			{
				this.accWatch = 1;
			}
			if ((accType == 16 || accType == 708) && this.accWatch < 2)
			{
				this.accWatch = 2;
			}
			if ((accType == 17 || accType == 709) && this.accWatch < 3)
			{
				this.accWatch = 3;
			}
			if (accType == 393)
			{
				this.accCompass = 1;
			}
			if (accType == 18)
			{
				this.accDepthMeter = 1;
			}
			if (accType == 395 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accWatch = 3;
				this.accDepthMeter = 1;
				this.accCompass = 1;
			}
			if (accType == 3120 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accFishFinder = true;
			}
			if (accType == 3037 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accWeatherRadio = true;
			}
			if (accType == 3096 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accCalendar = true;
			}
			if (accType == 3084 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accThirdEye = true;
			}
			if (accType == 3095 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accJarOfSouls = true;
			}
			if (accType == 3118 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accCritterGuide = true;
			}
			if (accType == 3099 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accStopwatch = true;
			}
			if (accType == 3102 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accOreFinder = true;
			}
			if (accType == 3119 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
			{
				this.accDreamCatcher = true;
			}
		}

		// Token: 0x06000762 RID: 1890 RVA: 0x002D3298 File Offset: 0x002D1498
		public void RefreshMechanicalAccsFromItemType(int accType)
		{
			if (accType == 3619 || accType == 3611)
			{
				this.InfoAccMechShowWires = true;
			}
			if (accType == 486 || accType == 3611)
			{
				this.rulerLine = true;
			}
			if (accType == 2799 || accType == 3611)
			{
				this.rulerGrid = true;
			}
			if (accType == 2216 || accType == 3061 || accType == 5126)
			{
				this.autoPaint = true;
			}
			if (accType == 3624)
			{
				this.autoActuator = true;
			}
			if (accType == 4346)
			{
				this.preventAllItemPickups = true;
			}
			if (accType == 4767 || accType == 5323)
			{
				this.dontHurtCritters = true;
			}
			if (accType == 5309 || accType == 5323)
			{
				this.dontHurtNature = true;
			}
			if (accType == 5095)
			{
				this.hasLucyTheAxe = true;
			}
		}

		// Token: 0x06000763 RID: 1891 RVA: 0x002D3364 File Offset: 0x002D1564
		public void UpdatePermanentBoosters()
		{
			if (this.usedAegisFruit)
			{
				this.statDefense += 4;
			}
			if (this.usedGummyWorm)
			{
				this.fishingSkill += 3;
			}
			if (this.usedAmbrosia)
			{
				this.pickSpeed -= 0.05f;
				this.tileSpeed += 0.05f;
				this.wallSpeed += 0.05f;
			}
		}

		// Token: 0x06000764 RID: 1892 RVA: 0x002D33DC File Offset: 0x002D15DC
		private bool UpdateEquips_CanItemGrantBenefits(int itemSlot, Item item)
		{
			switch (itemSlot)
			{
			case 0:
				return item.headSlot > -1;
			case 1:
				return item.bodySlot > -1;
			case 2:
				return item.legSlot > -1;
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
				return item.accessory;
			default:
				return true;
			}
		}

		// Token: 0x06000765 RID: 1893 RVA: 0x002D3440 File Offset: 0x002D1640
		public void UpdateEquips(int i)
		{
			if (this.inventory[this.selectedItem].type == 277 && (!this.mount.Active || !this.mount.Cart))
			{
				this.trident = true;
			}
			bool flag = false;
			for (int j = 0; j < 58; j++)
			{
				int type = this.inventory[j].type;
				this.RefreshInfoAccsFromItemType(type);
				this.RefreshMechanicalAccsFromItemType(type);
				if (type == 4743)
				{
					this.hasFootball = true;
				}
				if (type == 4131)
				{
					flag = true;
				}
			}
			if (this.inventory[58].type == 4743)
			{
				this.hasFootball = true;
			}
			for (int k = 0; k < 10; k++)
			{
				Item item = this.armor[k];
				if (!item.IsAir && this.IsItemSlotUnlockedAndUsable(k) && (!item.expertOnly || Main.expertMode) && this.UpdateEquips_CanItemGrantBenefits(k, item))
				{
					if (item.accessory)
					{
						this.GrantPrefixBenefits(item);
					}
					this.GrantArmorBenefits(item);
				}
			}
			if (flag)
			{
				for (int l = 0; l < 40; l++)
				{
					int type2 = this.bank4.item[l].type;
					if (type2 < 0 || type2 > (int)ItemID.Count || ItemID.Sets.WorksInVoidBag[type2])
					{
						this.RefreshInfoAccsFromItemType(type2);
						this.RefreshMechanicalAccsFromItemType(type2);
					}
				}
			}
			this.equippedAnyWallSpeedAcc = false;
			this.equippedAnyTileSpeedAcc = false;
			this.equippedAnyTileRangeAcc = false;
			if (this.whoAmI == Main.myPlayer)
			{
				Main.musicBoxNotModifiedByVolume = -1;
			}
			for (int m = 3; m < 10; m++)
			{
				if (this.IsItemSlotUnlockedAndUsable(m))
				{
					this.ApplyEquipFunctional(m, this.armor[m]);
				}
			}
			if (this.accFishingBobber)
			{
				this.fishingSkill += 10;
			}
			if (this.skyStoneEffects)
			{
				this.lifeRegen += 2;
				this.statDefense += 4;
				this.meleeSpeed += 0.1f;
				this.meleeDamage += 0.1f;
				this.meleeCrit += 2;
				this.rangedDamage += 0.1f;
				this.rangedCrit += 2;
				this.magicDamage += 0.1f;
				this.magicCrit += 2;
				this.pickSpeed -= 0.15f;
				this.minionDamage += 0.1f;
				this.minionKB += 0.5f;
			}
			if (this.dd2Accessory)
			{
				this.minionDamage += 0.1f;
				this.maxTurrets++;
			}
			for (int n = 3; n < 10; n++)
			{
				if (this.armor[n].wingSlot > 0 && this.IsItemSlotUnlockedAndUsable(n))
				{
					if (!this.hideVisibleAccessory[n] || (this.velocity.Y != 0f && !this.mount.Active))
					{
						this.wings = (int)this.armor[n].wingSlot;
					}
					this.wingsLogic = (int)this.armor[n].wingSlot;
				}
			}
			for (int num = 13; num < 20; num++)
			{
				if (this.IsItemSlotUnlockedAndUsable(num))
				{
					this.ApplyEquipVanity(num, this.armor[num]);
				}
			}
			if (this.wet && this.ShouldFloatInWater)
			{
				this.accFlipper = true;
			}
			if (this.whoAmI == Main.myPlayer && Main.SceneMetrics.HasClock && this.accWatch < 3)
			{
				this.accWatch++;
			}
			if (this.equippedAnyTileSpeedAcc && this.inventory[this.selectedItem].createTile != 4)
			{
				this.tileSpeed += 0.5f;
			}
			if (this.chiselSpeed)
			{
				this.pickSpeed -= 0.25f;
			}
			if (this.equippedAnyWallSpeedAcc)
			{
				this.wallSpeed += 0.5f;
			}
			if (this.equippedAnyTileRangeAcc && this.whoAmI == Main.myPlayer)
			{
				Player.tileRangeX += 3;
				Player.tileRangeY += 2;
			}
			if (!this.accThirdEye)
			{
				this.accThirdEyeCounter = 0;
			}
			this.RefreshInfoAccsFromTeamPlayers();
			if (this.whoAmI == Main.myPlayer && this.hasLuck_LuckyHorseshoe)
			{
				this.equipmentBasedLuckBonus += 0.05f;
			}
			if (this.whoAmI == Main.myPlayer && this.hasLuck_LuckyCoin)
			{
				this.equipmentBasedLuckBonus += 0.05f;
			}
			if (!this.accDreamCatcher && this.dpsStarted)
			{
				this.dpsStarted = false;
				this.dpsEnd = DateTime.Now;
			}
			if (this.HeldItem.type == 4760 && this.ownedProjectileCounts[866] < 1)
			{
				this.hasRaisableShield = true;
			}
			int num2 = 0;
			int num3 = 10 + num2;
			if (this.armor[num2].type == 5101 || this.armor[num3].type == 5101)
			{
				this.DoEyebrellaRainEffect();
				this.eyebrellaCloud = true;
			}
			if (this.lastEquipmentBasedLuckBonus != this.equipmentBasedLuckBonus)
			{
				this.lastEquipmentBasedLuckBonus = this.equipmentBasedLuckBonus;
				this.luckNeedsSync = true;
			}
		}

		// Token: 0x06000766 RID: 1894 RVA: 0x002D3990 File Offset: 0x002D1B90
		private void GrantArmorBenefits(Item armorPiece)
		{
			int type = armorPiece.type;
			this.RefreshInfoAccsFromItemType(type);
			this.RefreshMechanicalAccsFromItemType(type);
			if (armorPiece.type == 3017 || armorPiece.type == 3993)
			{
				this.flowerBoots = true;
				if (this.whoAmI == Main.myPlayer)
				{
					this.DoBootsEffect(new Utils.TileActionAttempt(this.DoBootsEffect_PlaceFlowersOnTile));
				}
			}
			if (armorPiece.type == 5001)
			{
				this.moveSpeed += 0.25f;
				this.moonLordLegs = true;
			}
			this.statDefense += armorPiece.defense;
			this.lifeRegen += armorPiece.lifeRegen;
			if (armorPiece.shieldSlot > 0)
			{
				this.hasRaisableShield = true;
			}
			int type2 = armorPiece.type;
			switch (type2)
			{
			case 3797:
				this.maxTurrets++;
				this.manaCost -= 0.1f;
				this.magicDamage += 0.1f;
				break;
			case 3798:
				this.magicDamage += 0.1f;
				this.minionDamage += 0.2f;
				break;
			case 3799:
				this.minionDamage += 0.1f;
				this.magicCrit += 20;
				this.moveSpeed += 0.2f;
				break;
			case 3800:
				this.maxTurrets++;
				this.lifeRegen += 4;
				break;
			case 3801:
				this.meleeDamage += 0.15f;
				this.minionDamage += 0.15f;
				break;
			case 3802:
				this.minionDamage += 0.15f;
				this.meleeCrit += 15;
				this.moveSpeed += 0.15f;
				break;
			case 3803:
				this.maxTurrets++;
				this.rangedCrit += 10;
				break;
			case 3804:
				this.rangedDamage += 0.2f;
				this.minionDamage += 0.2f;
				this.huntressAmmoCost90 = true;
				break;
			case 3805:
				this.minionDamage += 0.1f;
				this.moveSpeed += 0.2f;
				break;
			case 3806:
				this.maxTurrets++;
				this.meleeSpeed += 0.2f;
				break;
			case 3807:
				this.meleeDamage += 0.2f;
				this.minionDamage += 0.2f;
				break;
			case 3808:
				this.minionDamage += 0.1f;
				this.meleeCrit += 15;
				this.moveSpeed += 0.2f;
				break;
			default:
				switch (type2)
				{
				case 3871:
					this.maxTurrets += 2;
					this.meleeDamage += 0.1f;
					this.minionDamage += 0.1f;
					break;
				case 3872:
					this.minionDamage += 0.3f;
					this.lifeRegen += 8;
					break;
				case 3873:
					this.minionDamage += 0.2f;
					this.meleeCrit += 20;
					this.moveSpeed += 0.2f;
					break;
				case 3874:
					this.maxTurrets += 2;
					this.magicDamage += 0.15f;
					this.minionDamage += 0.15f;
					break;
				case 3875:
					this.minionDamage += 0.25f;
					this.magicDamage += 0.1f;
					this.manaCost -= 0.15f;
					break;
				case 3876:
					this.minionDamage += 0.2f;
					this.magicCrit += 25;
					this.moveSpeed += 0.2f;
					break;
				case 3877:
					this.maxTurrets += 2;
					this.minionDamage += 0.1f;
					this.rangedCrit += 10;
					break;
				case 3878:
					this.minionDamage += 0.25f;
					this.rangedDamage += 0.25f;
					this.ammoCost80 = true;
					break;
				case 3879:
					this.minionDamage += 0.25f;
					this.rangedCrit += 10;
					this.moveSpeed += 0.2f;
					break;
				case 3880:
					this.maxTurrets += 2;
					this.minionDamage += 0.2f;
					this.meleeDamage += 0.2f;
					break;
				case 3881:
					this.meleeSpeed += 0.2f;
					this.meleeCrit += 5;
					this.minionDamage += 0.2f;
					break;
				case 3882:
					this.minionDamage += 0.2f;
					this.meleeCrit += 20;
					this.moveSpeed += 0.3f;
					break;
				}
				break;
			}
			if (armorPiece.type == 5100)
			{
				this.SpawnHallucination(armorPiece);
			}
			if (armorPiece.type == 268)
			{
				this.accDivingHelm = true;
			}
			if (armorPiece.type == 238)
			{
				this.magicDamage += 0.05f;
				if (Main.tenthAnniversaryWorld)
				{
					this.maxMinions++;
				}
			}
			if (armorPiece.type == 3770)
			{
				this.slowFall = true;
			}
			if (armorPiece.type == 4404)
			{
				this.canFloatInWater = true;
			}
			if (armorPiece.type == 3776)
			{
				this.magicDamage += 0.15f;
				this.minionDamage += 0.15f;
			}
			if (armorPiece.type == 3777)
			{
				this.statManaMax2 += 40;
				this.minionDamage += 0.1f;
				this.maxMinions++;
			}
			if (armorPiece.type == 3778)
			{
				this.statManaMax2 += 40;
				this.magicDamage += 0.1f;
				this.maxMinions++;
			}
			if (armorPiece.type == 3212)
			{
				this.armorPenetration += 5;
			}
			if (armorPiece.type == 2277)
			{
				this.magicDamage += 0.05f;
				this.meleeDamage += 0.05f;
				this.rangedDamage += 0.05f;
				this.minionDamage += 0.05f;
				this.magicCrit += 5;
				this.rangedCrit += 5;
				this.meleeCrit += 5;
				this.meleeSpeed += 0.1f;
				this.moveSpeed += 0.1f;
			}
			if (armorPiece.type == 2279)
			{
				this.magicDamage += 0.06f;
				this.magicCrit += 6;
				this.manaCost -= 0.1f;
			}
			if (armorPiece.type == 3109 || armorPiece.type == 4008)
			{
				this.nightVision = true;
			}
			if (armorPiece.type == 256 || armorPiece.type == 257 || armorPiece.type == 258)
			{
				this.rangedCrit += 3;
				this.meleeCrit += 3;
				this.magicCrit += 3;
			}
			if (armorPiece.type == 3374)
			{
				this.rangedCrit += 4;
			}
			if (armorPiece.type == 3375)
			{
				this.rangedDamage += 0.05f;
			}
			if (armorPiece.type == 3376)
			{
				this.rangedCrit += 4;
			}
			if (armorPiece.type == 151 || armorPiece.type == 959 || armorPiece.type == 152 || armorPiece.type == 153)
			{
				this.rangedDamage += 0.05f;
			}
			if (armorPiece.type == 2275)
			{
				this.magicDamage += 0.06f;
				this.magicCrit += 6;
			}
			if (armorPiece.type == 123 || armorPiece.type == 124 || armorPiece.type == 125)
			{
				this.magicDamage += 0.09f;
			}
			if (armorPiece.type == 228 || armorPiece.type == 960)
			{
				this.statManaMax2 += 40;
				this.magicCrit += 6;
			}
			if (armorPiece.type == 229 || armorPiece.type == 961)
			{
				this.statManaMax2 += 20;
				this.magicDamage += 0.06f;
			}
			if (armorPiece.type == 230 || armorPiece.type == 962)
			{
				this.statManaMax2 += 20;
				this.magicCrit += 6;
			}
			if (armorPiece.type == 100 || armorPiece.type == 101 || armorPiece.type == 102)
			{
				this.magicCrit += 5;
				this.meleeCrit += 5;
				this.rangedCrit += 5;
			}
			if (armorPiece.type == 956 || armorPiece.type == 957 || armorPiece.type == 958)
			{
				this.magicCrit += 5;
				this.meleeCrit += 5;
				this.rangedCrit += 5;
			}
			if (armorPiece.type == 792 || armorPiece.type == 793 || armorPiece.type == 794)
			{
				this.meleeDamage += 0.03f;
				this.rangedDamage += 0.03f;
				this.magicDamage += 0.03f;
				this.minionDamage += 0.03f;
			}
			if (armorPiece.type == 231)
			{
				this.meleeCrit += 7;
			}
			if (armorPiece.type == 232)
			{
				this.meleeDamage += 0.07f;
			}
			if (armorPiece.type == 233)
			{
				this.meleeSpeed += 0.07f;
			}
			if (armorPiece.type == 371)
			{
				this.magicCrit += 9;
				this.magicDamage += 0.1f;
				this.statManaMax2 += 40;
			}
			if (armorPiece.type == 372)
			{
				this.moveSpeed += 0.1f;
				this.meleeDamage += 0.15f;
			}
			if (armorPiece.type == 373)
			{
				this.rangedDamage += 0.1f;
				this.rangedCrit += 10;
			}
			if (armorPiece.type == 374)
			{
				this.magicCrit += 5;
				this.meleeCrit += 5;
				this.rangedCrit += 5;
			}
			if (armorPiece.type == 375)
			{
				this.rangedDamage += 0.03f;
				this.meleeDamage += 0.03f;
				this.magicDamage += 0.03f;
				this.minionDamage += 0.03f;
				this.moveSpeed += 0.1f;
			}
			if (armorPiece.type == 376)
			{
				this.magicDamage += 0.15f;
				this.statManaMax2 += 60;
			}
			if (armorPiece.type == 377)
			{
				this.meleeCrit += 8;
				this.meleeDamage += 0.1f;
			}
			if (armorPiece.type == 378)
			{
				this.rangedDamage += 0.12f;
				this.rangedCrit += 7;
			}
			if (armorPiece.type == 379)
			{
				this.rangedDamage += 0.07f;
				this.meleeDamage += 0.07f;
				this.magicDamage += 0.07f;
				this.minionDamage += 0.07f;
			}
			if (armorPiece.type == 380)
			{
				this.magicCrit += 10;
				this.meleeCrit += 10;
				this.rangedCrit += 10;
			}
			if (armorPiece.type >= 2367 && armorPiece.type <= 2369)
			{
				this.fishingSkill += 5;
			}
			if (armorPiece.type == 400)
			{
				this.magicDamage += 0.12f;
				this.magicCrit += 12;
				this.statManaMax2 += 80;
			}
			if (armorPiece.type == 401)
			{
				this.meleeCrit += 7;
				this.meleeDamage += 0.14f;
			}
			if (armorPiece.type == 402)
			{
				this.rangedDamage += 0.14f;
				this.rangedCrit += 10;
			}
			if (armorPiece.type == 403)
			{
				this.rangedDamage += 0.08f;
				this.meleeDamage += 0.08f;
				this.magicDamage += 0.08f;
				this.minionDamage += 0.08f;
			}
			if (armorPiece.type == 404)
			{
				this.magicCrit += 7;
				this.meleeCrit += 7;
				this.rangedCrit += 7;
				this.moveSpeed += 0.05f;
			}
			if (armorPiece.type == 1205)
			{
				this.meleeDamage += 0.12f;
				this.meleeSpeed += 0.12f;
			}
			if (armorPiece.type == 1206)
			{
				this.rangedDamage += 0.09f;
				this.rangedCrit += 9;
			}
			if (armorPiece.type == 1207)
			{
				this.magicDamage += 0.09f;
				this.magicCrit += 9;
				this.statManaMax2 += 60;
			}
			if (armorPiece.type == 1208)
			{
				this.meleeDamage += 0.03f;
				this.rangedDamage += 0.03f;
				this.magicDamage += 0.03f;
				this.minionDamage += 0.03f;
				this.magicCrit += 2;
				this.meleeCrit += 2;
				this.rangedCrit += 2;
			}
			if (armorPiece.type == 1209)
			{
				this.meleeDamage += 0.02f;
				this.rangedDamage += 0.02f;
				this.magicDamage += 0.02f;
				this.minionDamage += 0.02f;
				this.magicCrit++;
				this.meleeCrit++;
				this.rangedCrit++;
			}
			if (armorPiece.type == 1210)
			{
				this.meleeDamage += 0.11f;
				this.meleeSpeed += 0.11f;
				this.moveSpeed += 0.07f;
			}
			if (armorPiece.type == 1211)
			{
				this.rangedCrit += 15;
				this.moveSpeed += 0.08f;
			}
			if (armorPiece.type == 1212)
			{
				this.magicCrit += 18;
				this.statManaMax2 += 80;
			}
			if (armorPiece.type == 1213)
			{
				this.magicCrit += 6;
				this.meleeCrit += 6;
				this.rangedCrit += 6;
			}
			if (armorPiece.type == 1214)
			{
				this.moveSpeed += 0.11f;
				this.meleeDamage += 0.08f;
				this.rangedDamage += 0.08f;
				this.magicDamage += 0.08f;
				this.minionDamage += 0.08f;
			}
			if (armorPiece.type == 1215)
			{
				this.meleeDamage += 0.09f;
				this.meleeCrit += 9;
				this.meleeSpeed += 0.09f;
			}
			if (armorPiece.type == 1216)
			{
				this.rangedDamage += 0.16f;
				this.rangedCrit += 7;
			}
			if (armorPiece.type == 1217)
			{
				this.magicDamage += 0.16f;
				this.magicCrit += 7;
				this.statManaMax2 += 100;
			}
			if (armorPiece.type == 1218)
			{
				this.meleeDamage += 0.04f;
				this.rangedDamage += 0.04f;
				this.magicDamage += 0.04f;
				this.minionDamage += 0.04f;
				this.magicCrit += 3;
				this.meleeCrit += 3;
				this.rangedCrit += 3;
			}
			if (armorPiece.type == 1219)
			{
				this.meleeDamage += 0.03f;
				this.rangedDamage += 0.03f;
				this.magicDamage += 0.03f;
				this.minionDamage += 0.03f;
				this.magicCrit += 3;
				this.meleeCrit += 3;
				this.rangedCrit += 3;
				this.moveSpeed += 0.06f;
			}
			if (armorPiece.type == 558 || armorPiece.type == 4898)
			{
				this.magicDamage += 0.12f;
				this.magicCrit += 12;
				this.statManaMax2 += 100;
			}
			if (armorPiece.type == 559 || armorPiece.type == 4896)
			{
				this.meleeCrit += 10;
				this.meleeDamage += 0.1f;
				this.meleeSpeed += 0.1f;
			}
			if (armorPiece.type == 553 || armorPiece.type == 4897)
			{
				this.rangedDamage += 0.15f;
				this.rangedCrit += 8;
			}
			if (armorPiece.type == 4873 || armorPiece.type == 4899)
			{
				this.minionDamage += 0.1f;
				this.maxMinions++;
			}
			if (armorPiece.type == 551 || armorPiece.type == 4900)
			{
				this.magicCrit += 7;
				this.meleeCrit += 7;
				this.rangedCrit += 7;
			}
			if (armorPiece.type == 552 || armorPiece.type == 4901)
			{
				this.rangedDamage += 0.07f;
				this.meleeDamage += 0.07f;
				this.magicDamage += 0.07f;
				this.minionDamage += 0.07f;
				this.moveSpeed += 0.08f;
			}
			if (armorPiece.type == 4982)
			{
				this.rangedCrit += 5;
				this.meleeCrit += 5;
				this.magicCrit += 5;
				this.manaCost -= 0.1f;
			}
			if (armorPiece.type == 4983)
			{
				this.rangedDamage += 0.05f;
				this.meleeDamage += 0.05f;
				this.magicDamage += 0.05f;
				this.minionDamage += 0.05f;
				this.huntressAmmoCost90 = true;
			}
			if (armorPiece.type == 4984)
			{
				this.meleeSpeed += 0.1f;
				this.moveSpeed += 0.2f;
			}
			if (armorPiece.type == 1001)
			{
				this.meleeDamage += 0.16f;
				this.meleeCrit += 6;
			}
			if (armorPiece.type == 1002)
			{
				this.rangedDamage += 0.16f;
				this.chloroAmmoCost80 = true;
			}
			if (armorPiece.type == 1003)
			{
				this.statManaMax2 += 80;
				this.manaCost -= 0.17f;
				this.magicDamage += 0.16f;
			}
			if (armorPiece.type == 1004)
			{
				this.meleeDamage += 0.05f;
				this.magicDamage += 0.05f;
				this.rangedDamage += 0.05f;
				this.minionDamage += 0.05f;
				this.magicCrit += 7;
				this.meleeCrit += 7;
				this.rangedCrit += 7;
			}
			if (armorPiece.type == 1005)
			{
				this.magicCrit += 8;
				this.meleeCrit += 8;
				this.rangedCrit += 8;
				this.moveSpeed += 0.05f;
			}
			if (armorPiece.type == 2189)
			{
				this.statManaMax2 += 60;
				this.manaCost -= 0.13f;
				this.magicDamage += 0.1f;
				this.magicCrit += 10;
			}
			if (armorPiece.type == 1504)
			{
				this.magicDamage += 0.07f;
				this.magicCrit += 7;
			}
			if (armorPiece.type == 1505)
			{
				this.magicDamage += 0.08f;
				this.moveSpeed += 0.08f;
			}
			if (armorPiece.type == 1546)
			{
				this.rangedCrit += 5;
				this.arrowDamage *= 1.15f;
			}
			if (armorPiece.type == 1547)
			{
				this.rangedCrit += 5;
				this.bulletDamage *= 1.15f;
			}
			if (armorPiece.type == 1548)
			{
				this.rangedCrit += 5;
				this.rocketDamage *= 1.15f;
			}
			if (armorPiece.type == 1549)
			{
				this.rangedCrit += 13;
				this.rangedDamage += 0.13f;
				this.ammoCost80 = true;
			}
			if (armorPiece.type == 1550)
			{
				this.rangedCrit += 7;
				this.moveSpeed += 0.12f;
			}
			if (armorPiece.type == 1282)
			{
				this.statManaMax2 += 20;
				this.manaCost -= 0.05f;
			}
			if (armorPiece.type == 1283)
			{
				this.statManaMax2 += 40;
				this.manaCost -= 0.07f;
			}
			if (armorPiece.type == 1284)
			{
				this.statManaMax2 += 40;
				this.manaCost -= 0.09f;
			}
			if (armorPiece.type == 1285)
			{
				this.statManaMax2 += 60;
				this.manaCost -= 0.11f;
			}
			if (armorPiece.type == 1286 || armorPiece.type == 4256)
			{
				this.statManaMax2 += 60;
				this.manaCost -= 0.13f;
			}
			if (armorPiece.type == 1287)
			{
				this.statManaMax2 += 80;
				this.manaCost -= 0.15f;
			}
			if (armorPiece.type == 1316 || armorPiece.type == 1317 || armorPiece.type == 1318)
			{
				this.aggro += 250;
			}
			if (armorPiece.type == 1316)
			{
				this.meleeDamage += 0.06f;
			}
			if (armorPiece.type == 1317)
			{
				this.meleeDamage += 0.08f;
				this.meleeCrit += 8;
			}
			if (armorPiece.type == 1318)
			{
				this.meleeCrit += 4;
			}
			if (armorPiece.type == 2199 || armorPiece.type == 2202)
			{
				this.aggro += 250;
			}
			if (armorPiece.type == 2201)
			{
				this.aggro += 400;
			}
			if (armorPiece.type == 2199)
			{
				this.meleeDamage += 0.06f;
			}
			if (armorPiece.type == 2200)
			{
				this.meleeDamage += 0.08f;
				this.meleeCrit += 8;
				this.meleeSpeed += 0.06f;
				this.moveSpeed += 0.06f;
			}
			if (armorPiece.type == 2201)
			{
				this.meleeDamage += 0.05f;
				this.meleeCrit += 5;
			}
			if (armorPiece.type == 2202)
			{
				this.meleeSpeed += 0.06f;
				this.moveSpeed += 0.06f;
			}
			if (armorPiece.type == 684)
			{
				this.rangedDamage += 0.16f;
				this.meleeDamage += 0.16f;
			}
			if (armorPiece.type == 685)
			{
				this.meleeCrit += 11;
				this.rangedCrit += 11;
			}
			if (armorPiece.type == 686)
			{
				this.moveSpeed += 0.08f;
				this.meleeSpeed += 0.1f;
			}
			if (armorPiece.type == 5068)
			{
				this.maxMinions++;
				this.minionDamage += 0.05f;
			}
			if (armorPiece.type == 2361)
			{
				this.maxMinions++;
				this.minionDamage += 0.04f;
			}
			if (armorPiece.type == 2362)
			{
				this.maxMinions++;
				this.minionDamage += 0.04f;
			}
			if (armorPiece.type == 2363)
			{
				this.minionDamage += 0.05f;
			}
			if (armorPiece.type == 3266)
			{
				this.minionDamage += 0.08f;
			}
			if (armorPiece.type == 3267)
			{
				this.maxMinions++;
			}
			if (armorPiece.type == 3268)
			{
				this.minionDamage += 0.08f;
			}
			if (armorPiece.type == 410)
			{
				this.pickSpeed -= 0.1f;
			}
			if (armorPiece.type == 411)
			{
				this.pickSpeed -= 0.1f;
			}
			if (armorPiece.type >= 1158 && armorPiece.type <= 1161)
			{
				this.maxMinions++;
			}
			if (armorPiece.type == 1159)
			{
				this.whipRangeMultiplier += 0.1f;
			}
			if (armorPiece.type >= 1159 && armorPiece.type <= 1161)
			{
				this.minionDamage += 0.1f;
			}
			if (armorPiece.type >= 2370 && armorPiece.type <= 2371)
			{
				this.minionDamage += 0.05f;
				this.maxMinions++;
			}
			if (armorPiece.type == 2372)
			{
				this.minionDamage += 0.06f;
				this.maxMinions++;
			}
			if (armorPiece.type == 3381)
			{
				this.maxMinions++;
				this.maxTurrets++;
				this.minionDamage += 0.22f;
			}
			if (armorPiece.type == 3382 || armorPiece.type == 3383)
			{
				this.maxMinions += 2;
				this.whipRangeMultiplier += 0.15f;
				this.minionDamage += 0.22f;
			}
			if (armorPiece.type == 2763)
			{
				this.aggro += 300;
				this.meleeCrit += 26;
				this.lifeRegen += 2;
			}
			if (armorPiece.type == 2764)
			{
				this.aggro += 300;
				this.meleeDamage += 0.29f;
				this.lifeRegen += 2;
			}
			if (armorPiece.type == 2765)
			{
				this.aggro += 300;
				this.meleeSpeed += 0.15f;
				this.moveSpeed += 0.15f;
				this.lifeRegen += 2;
			}
			if (armorPiece.type == 2757)
			{
				this.rangedCrit += 7;
				this.rangedDamage += 0.16f;
			}
			if (armorPiece.type == 2758)
			{
				this.ammoCost75 = true;
				this.rangedCrit += 12;
				this.rangedDamage += 0.12f;
			}
			if (armorPiece.type == 2759)
			{
				this.rangedCrit += 8;
				this.rangedDamage += 0.08f;
				this.moveSpeed += 0.1f;
			}
			if (armorPiece.type == 2760)
			{
				this.statManaMax2 += 60;
				this.manaCost -= 0.15f;
				this.magicCrit += 7;
				this.magicDamage += 0.07f;
			}
			if (armorPiece.type == 2761)
			{
				this.magicDamage += 0.09f;
				this.magicCrit += 9;
			}
			if (armorPiece.type == 2762)
			{
				this.moveSpeed += 0.1f;
				this.magicDamage += 0.1f;
			}
			if (armorPiece.type == 1832)
			{
				this.maxMinions++;
				this.minionDamage += 0.11f;
			}
			if (armorPiece.type == 1833)
			{
				this.maxMinions += 2;
				this.minionDamage += 0.11f;
			}
			if (armorPiece.type == 1834)
			{
				this.moveSpeed += 0.2f;
				this.maxMinions++;
				this.minionDamage += 0.11f;
			}
		}

		// Token: 0x06000767 RID: 1895 RVA: 0x002D5B84 File Offset: 0x002D3D84
		private void GrantPrefixBenefits(Item item)
		{
			if (item.prefix == 62)
			{
				this.statDefense++;
			}
			if (item.prefix == 63)
			{
				this.statDefense += 2;
			}
			if (item.prefix == 64)
			{
				this.statDefense += 3;
			}
			if (item.prefix == 65)
			{
				this.statDefense += 4;
			}
			if (item.prefix == 66)
			{
				this.statManaMax2 += 20;
			}
			if (item.prefix == 67)
			{
				this.meleeCrit += 2;
				this.rangedCrit += 2;
				this.magicCrit += 2;
			}
			if (item.prefix == 68)
			{
				this.meleeCrit += 4;
				this.rangedCrit += 4;
				this.magicCrit += 4;
			}
			if (item.prefix == 69)
			{
				this.meleeDamage += 0.01f;
				this.rangedDamage += 0.01f;
				this.magicDamage += 0.01f;
				this.minionDamage += 0.01f;
			}
			if (item.prefix == 70)
			{
				this.meleeDamage += 0.02f;
				this.rangedDamage += 0.02f;
				this.magicDamage += 0.02f;
				this.minionDamage += 0.02f;
			}
			if (item.prefix == 71)
			{
				this.meleeDamage += 0.03f;
				this.rangedDamage += 0.03f;
				this.magicDamage += 0.03f;
				this.minionDamage += 0.03f;
			}
			if (item.prefix == 72)
			{
				this.meleeDamage += 0.04f;
				this.rangedDamage += 0.04f;
				this.magicDamage += 0.04f;
				this.minionDamage += 0.04f;
			}
			if (item.prefix == 73)
			{
				this.moveSpeed += 0.01f;
			}
			if (item.prefix == 74)
			{
				this.moveSpeed += 0.02f;
			}
			if (item.prefix == 75)
			{
				this.moveSpeed += 0.03f;
			}
			if (item.prefix == 76)
			{
				this.moveSpeed += 0.04f;
			}
			if (item.prefix == 77)
			{
				this.meleeSpeed += 0.01f;
			}
			if (item.prefix == 78)
			{
				this.meleeSpeed += 0.02f;
			}
			if (item.prefix == 79)
			{
				this.meleeSpeed += 0.03f;
			}
			if (item.prefix == 80)
			{
				this.meleeSpeed += 0.04f;
			}
		}

		// Token: 0x06000768 RID: 1896 RVA: 0x002D5E9C File Offset: 0x002D409C
		private void SpawnHallucination(Item item)
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			this.insanityShadowCooldown = Utils.Clamp<int>(this.insanityShadowCooldown - 1, 0, 100);
			if (this.insanityShadowCooldown > 0)
			{
				return;
			}
			this.insanityShadowCooldown = Main.rand.Next(20, 101);
			float num = 500f;
			int damage = 18;
			Player._hallucinationCandidates.Clear();
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.CanBeChasedBy(this, false) && base.Distance(npc.Center) <= num && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
				{
					Player._hallucinationCandidates.Add(npc);
				}
			}
			if (Player._hallucinationCandidates.Count == 0)
			{
				return;
			}
			Vector2 position;
			Vector2 velocity;
			float ai;
			float ai2;
			Projectile.RandomizeInsanityShadowFor(Main.rand.NextFromCollection(Player._hallucinationCandidates), false, out position, out velocity, out ai, out ai2);
			Projectile.NewProjectile(new EntitySource_ItemUse(this, item), position, velocity, 964, damage, 0f, this.whoAmI, ai, ai2, 0f);
		}

		// Token: 0x06000769 RID: 1897 RVA: 0x002D5FC4 File Offset: 0x002D41C4
		public void DoBootsEffect(Utils.TileActionAttempt theEffectMethod)
		{
			if (this.miscCounter % 2 == 0 && this.velocity.Y == 0f && this.grappling[0] == -1 && this.velocity.X != 0f)
			{
				int x = (int)base.Center.X / 16;
				int y = (int)(this.position.Y + (float)this.height - 1f) / 16;
				theEffectMethod(x, y);
			}
		}

		// Token: 0x0600076A RID: 1898 RVA: 0x002D6044 File Offset: 0x002D4244
		public bool DoBootsEffect_PlaceFlamesOnTile(int X, int Y)
		{
			Tile tile = Main.tile[X, Y + 1];
			if (tile == null || !tile.active() || tile.liquid > 0 || !WorldGen.SolidTileAllowBottomSlope(X, Y + 1))
			{
				return false;
			}
			ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.FlameWaders, new ParticleOrchestraSettings
			{
				PositionInWorld = new Vector2((float)(X * 16 + 8), (float)(Y * 16 + 16))
			}, new int?(this.whoAmI));
			return true;
		}

		// Token: 0x0600076B RID: 1899 RVA: 0x002D60B8 File Offset: 0x002D42B8
		public bool DoBootsEffect_PlaceFlowersOnTile(int X, int Y)
		{
			Tile tile = Main.tile[X, Y];
			if (tile == null)
			{
				return false;
			}
			if (!tile.active() && tile.liquid == 0 && Main.tile[X, Y + 1] != null && WorldGen.SolidTile(X, Y + 1, false))
			{
				tile.frameY = 0;
				tile.slope(0);
				tile.halfBrick(false);
				if (Main.tile[X, Y + 1].type == 2 || Main.tile[X, Y + 1].type == 477)
				{
					int num = Main.rand.NextFromList(new int[]
					{
						6,
						7,
						9,
						10,
						11,
						12,
						13,
						14,
						15,
						16,
						17,
						18,
						19,
						20,
						21,
						24,
						27,
						30,
						33,
						36,
						39,
						42
					});
					if (num <= 30)
					{
						if (num <= 24)
						{
							if (num != 21 && num != 24)
							{
								goto IL_FA;
							}
						}
						else if (num != 27 && num != 30)
						{
							goto IL_FA;
						}
					}
					else if (num <= 36)
					{
						if (num != 33 && num != 36)
						{
							goto IL_FA;
						}
					}
					else if (num != 39 && num != 42)
					{
						goto IL_FA;
					}
					num += Main.rand.Next(3);
					IL_FA:
					tile.active(true);
					tile.type = 3;
					tile.frameX = (short)(num * 18);
					tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, X, Y, TileChangeType.None);
					}
					return true;
				}
				if (Main.tile[X, Y + 1].type == 109 || Main.tile[X, Y + 1].type == 492)
				{
					if (Main.rand.Next(2) == 0)
					{
						tile.active(true);
						tile.type = 110;
						tile.frameX = (short)(18 * Main.rand.Next(4, 7));
						tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
						while (tile.frameX == 90)
						{
							tile.frameX = (short)(18 * Main.rand.Next(4, 7));
						}
					}
					else
					{
						tile.active(true);
						tile.type = 113;
						tile.frameX = (short)(18 * Main.rand.Next(2, 8));
						tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
						while (tile.frameX == 90)
						{
							tile.frameX = (short)(18 * Main.rand.Next(2, 8));
						}
					}
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, X, Y, TileChangeType.None);
					}
					return true;
				}
				if (Main.tile[X, Y + 1].type == 60)
				{
					tile.active(true);
					tile.type = 74;
					tile.frameX = (short)(18 * Main.rand.Next(9, 17));
					tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, X, Y, TileChangeType.None);
					}
					return true;
				}
				if (Main.tile[X, Y + 1].type == 633)
				{
					tile.active(true);
					tile.type = 637;
					tile.frameX = (short)(18 * Main.rand.Next(6, 11));
					tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, X, Y, TileChangeType.None);
					}
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600076C RID: 1900 RVA: 0x002D63DC File Offset: 0x002D45DC
		private void ApplyEquipVanity(int itemSlot, Item currentItem)
		{
			int type = currentItem.type;
			if (currentItem.wingSlot > 0)
			{
				this.wings = (int)currentItem.wingSlot;
			}
			if (type == 861 || type == 3110 || type == 485)
			{
				this.hideWolf = false;
				this.forceWerewolf = true;
			}
			if (type <= 4318)
			{
				switch (type)
				{
				case 3536:
					this.vortexMonolithShader = true;
					break;
				case 3537:
					this.nebulaMonolithShader = true;
					break;
				case 3538:
					this.stardustMonolithShader = true;
					break;
				case 3539:
					this.solarMonolithShader = true;
					break;
				default:
					if (type != 4054)
					{
						if (type == 4318)
						{
							this.moonLordMonolithShader = true;
						}
					}
					else
					{
						this.bloodMoonMonolithShader = true;
					}
					break;
				}
			}
			else if (type != 5345)
			{
				if (type != 5347)
				{
					if (type == 5452)
					{
						this.remoteVisionForDrone = true;
					}
				}
				else
				{
					this.shimmerMonolithShader = true;
				}
			}
			else
			{
				this.CanSeeInvisibleBlocks = true;
			}
			if (type == 5113)
			{
				this.dontStarveShader = !this.dontStarveShader;
			}
			if (((this.wet && !this.lavaWet && (!this.mount.Active || !this.mount.IsConsideredASlimeMount)) || !this.forceWerewolf) && (type == 861 || type == 3110 || type == 497))
			{
				this.hideMerman = false;
				this.forceMerman = true;
			}
			if ((!this.mount.Active || this.mount.Type != 47) && (type == 4822 || type == 4874))
			{
				this.DoBootsEffect(new Utils.TileActionAttempt(this.DoBootsEffect_PlaceFlamesOnTile));
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.ApplyMusicBox(currentItem);
			}
			this.UpdateBootVisualEffects(currentItem);
			this.UpdateFishingBobber(currentItem);
		}

		// Token: 0x0600076D RID: 1901 RVA: 0x002D65A0 File Offset: 0x002D47A0
		private void DoEyebrellaRainEffect()
		{
			if (Main.netMode == 2 || Main.dedServ || Main.rand.Next(4) != 0)
			{
				return;
			}
			Vector2 vector = this.MountedCenter - new Vector2(0f, (float)this.height * 0.5f) + new Vector2((-0.5f + Main.rand.NextFloat()) * (float)(this.width + 18), -30f);
			int num = (int)(vector.X / 16f);
			int num2 = (int)(vector.Y / 16f);
			if (!WorldGen.InWorld(num, num2, 0))
			{
				return;
			}
			Tile tile = Main.tile[num, num2];
			if (tile == null)
			{
				return;
			}
			if (WorldGen.SolidTile3(tile) || tile.liquid > 0)
			{
				return;
			}
			Vector2 velocity = new Vector2(Main.windSpeedCurrent * 3f, 9f);
			Rain.NewRainForced(vector, velocity);
		}

		// Token: 0x0600076E RID: 1902 RVA: 0x002D6684 File Offset: 0x002D4884
		public WingStats GetWingStats(int wingID)
		{
			if (wingID <= 0 || wingID >= ArmorIDs.Wing.Sets.Stats.Length)
			{
				return default(WingStats);
			}
			return ArmorIDs.Wing.Sets.Stats[wingID];
		}

		// Token: 0x0600076F RID: 1903 RVA: 0x002D66B4 File Offset: 0x002D48B4
		private void ApplyEquipFunctional(int itemSlot, Item currentItem)
		{
			if (currentItem.expertOnly && !Main.expertMode)
			{
				return;
			}
			if (currentItem.type == 3810 || currentItem.type == 3809 || currentItem.type == 3812 || currentItem.type == 3811)
			{
				this.dd2Accessory = true;
			}
			if (!this.hideVisibleAccessory[itemSlot])
			{
				this.UpdateBootVisualEffects(currentItem);
				this.UpdateFishingBobber(currentItem);
			}
			int type = currentItem.type;
			if (type <= 4056)
			{
				if (type <= 4007)
				{
					if (type != 3245)
					{
						switch (type)
						{
						case 3990:
							this.accRunSpeed = 6f;
							this.autoJump = true;
							this.jumpSpeedBoost += 1.6f;
							this.extraFall += 10;
							break;
						case 3991:
							this.manaFlower = true;
							this.manaCost -= 0.08f;
							this.aggro -= 400;
							break;
						case 3992:
							this.kbGlove = true;
							this.autoReuseGlove = true;
							this.meleeScaleGlove = true;
							this.meleeSpeed += 0.12f;
							this.aggro += 400;
							break;
						case 3993:
							this.accRunSpeed = 6f;
							this.rocketBoots = (this.vanityRocketBoots = 2);
							break;
						case 3994:
							this.autoJump = true;
							this.jumpSpeedBoost += 1.6f;
							this.extraFall += 10;
							this.accFlipper = true;
							break;
						case 3995:
							this.autoJump = true;
							this.jumpSpeedBoost += 1.6f;
							this.extraFall += 10;
							this.accFlipper = true;
							this.spikedBoots += 2;
							break;
						case 3996:
							this.autoJump = true;
							this.jumpSpeedBoost += 1.6f;
							this.extraFall += 10;
							this.spikedBoots += 2;
							break;
						case 3998:
							this.aggro += 400;
							break;
						case 3999:
							this.fireWalk = true;
							break;
						case 4000:
							this.manaFlower = true;
							this.manaCost -= 0.08f;
							this.manaMagnet = true;
							break;
						case 4001:
							this.manaFlower = true;
							this.manaCost -= 0.08f;
							this.starCloakItem = currentItem;
							this.starCloakItem_manaCloakOverrideItem = currentItem;
							break;
						case 4002:
							this.magicQuiver = true;
							this.arrowDamageAdditiveStack += 0.1f;
							this.hasMoltenQuiver = true;
							break;
						case 4003:
							this.fireWalk = true;
							this.lavaRose = true;
							break;
						case 4004:
							this.fireWalk = true;
							this.lavaRose = true;
							break;
						case 4005:
							this.rangedCrit += 10;
							this.rangedDamage += 0.1f;
							this.aggro -= 400;
							break;
						case 4006:
							this.aggro -= 400;
							this.magicQuiver = true;
							this.arrowDamageAdditiveStack += 0.1f;
							break;
						case 4007:
							this.honeyCombItem = currentItem;
							this.armorPenetration += 5;
							break;
						}
					}
					else
					{
						this.boneGloveItem = currentItem;
					}
				}
				else if (type != 4038)
				{
					if (type != 4055)
					{
						if (type == 4056)
						{
							this.chiselSpeed = true;
						}
					}
					else
					{
						this.accRunSpeed = 6f;
						this.desertBoots = true;
					}
				}
				else
				{
					this.fireWalk = true;
				}
			}
			else
			{
				if (type <= 4409)
				{
					if (type != 4341)
					{
						if (type != 4409)
						{
							goto IL_4F5;
						}
						this.CanSeeInvisibleBlocks = true;
						goto IL_4F5;
					}
				}
				else
				{
					if (type == 5010)
					{
						this.treasureMagnet = true;
						goto IL_4F5;
					}
					if (type == 5107)
					{
						this.hasMagiluminescence = true;
						this.MountedCenter.ToTileCoordinates();
						DelegateMethods.v3_1 = new Vector3(0.9f, 0.8f, 0.5f);
						Utils.PlotTileLine(base.Center, base.Center + this.velocity * 6f, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
						Utils.PlotTileLine(base.Left, base.Right, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
						goto IL_4F5;
					}
					if (type != 5126)
					{
						goto IL_4F5;
					}
				}
				this.portableStoolInfo.SetStats(26, 26, 26);
			}
			IL_4F5:
			if (currentItem.type == 3015)
			{
				this.aggro -= 400;
				this.meleeCrit += 5;
				this.magicCrit += 5;
				this.rangedCrit += 5;
				this.meleeDamage += 0.05f;
				this.magicDamage += 0.05f;
				this.rangedDamage += 0.05f;
				this.minionDamage += 0.05f;
			}
			if (currentItem.type == 3016)
			{
				this.aggro += 400;
			}
			if (currentItem.type == 2373)
			{
				this.accFishingLine = true;
			}
			if (currentItem.type == 2374)
			{
				this.fishingSkill += 10;
			}
			if (currentItem.type == 5139 || currentItem.type == 5144 || currentItem.type == 5142 || currentItem.type == 5141 || currentItem.type == 5146 || currentItem.type == 5140 || currentItem.type == 5145 || currentItem.type == 5143)
			{
				this.accFishingBobber = true;
			}
			if (currentItem.type == 2375)
			{
				this.accTackleBox = true;
			}
			if (currentItem.type == 4881)
			{
				this.accLavaFishing = true;
			}
			if (currentItem.type == 3721)
			{
				this.accFishingLine = true;
				this.accTackleBox = true;
				this.fishingSkill += 10;
			}
			if (currentItem.type == 5064)
			{
				this.accFishingLine = true;
				this.accTackleBox = true;
				this.fishingSkill += 10;
				this.accLavaFishing = true;
			}
			if (currentItem.type == 3090)
			{
				this.npcTypeNoAggro[1] = true;
				this.npcTypeNoAggro[16] = true;
				this.npcTypeNoAggro[59] = true;
				this.npcTypeNoAggro[71] = true;
				this.npcTypeNoAggro[81] = true;
				this.npcTypeNoAggro[138] = true;
				this.npcTypeNoAggro[121] = true;
				this.npcTypeNoAggro[122] = true;
				this.npcTypeNoAggro[141] = true;
				this.npcTypeNoAggro[147] = true;
				this.npcTypeNoAggro[183] = true;
				this.npcTypeNoAggro[184] = true;
				this.npcTypeNoAggro[204] = true;
				this.npcTypeNoAggro[225] = true;
				this.npcTypeNoAggro[244] = true;
				this.npcTypeNoAggro[302] = true;
				this.npcTypeNoAggro[333] = true;
				this.npcTypeNoAggro[335] = true;
				this.npcTypeNoAggro[334] = true;
				this.npcTypeNoAggro[336] = true;
				this.npcTypeNoAggro[537] = true;
				this.npcTypeNoAggro[676] = true;
				this.npcTypeNoAggro[667] = true;
			}
			if (currentItem.stringColor > 0)
			{
				this.yoyoString = true;
			}
			if (currentItem.type == 3366)
			{
				this.counterWeight = 556 + Main.rand.Next(6);
				this.yoyoGlove = true;
				this.yoyoString = true;
			}
			if (currentItem.type >= 3309 && currentItem.type <= 3314)
			{
				this.counterWeight = 556 + currentItem.type - 3309;
			}
			if (currentItem.type == 3334)
			{
				this.yoyoGlove = true;
			}
			if (currentItem.type == 3337)
			{
				this.shinyStone = true;
			}
			if (currentItem.type == 4989)
			{
				this.empressBrooch = true;
				this.moveSpeed += 0.075f;
			}
			if (currentItem.type == 3336)
			{
				this.SporeSac(currentItem);
				this.sporeSac = true;
			}
			if (currentItem.type == 4987)
			{
				this.VolatileGelatin(currentItem);
				this.volatileGelatin = true;
			}
			type = currentItem.type;
			if (type <= 4054)
			{
				switch (type)
				{
				case 3536:
					this.vortexMonolithShader = true;
					break;
				case 3537:
					this.nebulaMonolithShader = true;
					break;
				case 3538:
					this.stardustMonolithShader = true;
					break;
				case 3539:
					this.solarMonolithShader = true;
					break;
				default:
					if (type == 4054)
					{
						this.bloodMoonMonolithShader = true;
					}
					break;
				}
			}
			else if (type != 4318)
			{
				if (type != 5345)
				{
					if (type == 5347)
					{
						this.shimmerMonolithShader = true;
					}
				}
				else
				{
					this.CanSeeInvisibleBlocks = true;
				}
			}
			else
			{
				this.moonLordMonolithShader = true;
			}
			if (currentItem.type == 5113)
			{
				this.dontStarveShader = !this.dontStarveShader;
			}
			if (currentItem.type == 2423)
			{
				this.autoJump = true;
				this.jumpSpeedBoost += 1.6f;
				this.extraFall += 10;
			}
			if (currentItem.type == 857)
			{
				this.hasJumpOption_Sandstorm = true;
			}
			if (currentItem.type == 983)
			{
				this.hasJumpOption_Sandstorm = true;
				this.jumpBoost = true;
			}
			if (currentItem.type == 987)
			{
				this.hasJumpOption_Blizzard = true;
			}
			if (currentItem.type == 1163)
			{
				this.hasJumpOption_Blizzard = true;
				this.jumpBoost = true;
			}
			if (currentItem.type == 1724)
			{
				this.hasJumpOption_Fart = true;
			}
			if (currentItem.type == 1863)
			{
				this.hasJumpOption_Fart = true;
				this.jumpBoost = true;
			}
			if (currentItem.type == 1164)
			{
				this.hasJumpOption_Cloud = true;
				this.hasJumpOption_Sandstorm = true;
				this.hasJumpOption_Blizzard = true;
				this.jumpBoost = true;
			}
			if (currentItem.type == 5331)
			{
				this.hasJumpOption_Cloud = true;
				this.hasJumpOption_Sandstorm = true;
				this.hasJumpOption_Blizzard = true;
				this.jumpBoost = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 1250)
			{
				this.jumpBoost = true;
				this.hasJumpOption_Cloud = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 1252)
			{
				this.hasJumpOption_Sandstorm = true;
				this.jumpBoost = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 1251)
			{
				this.hasJumpOption_Blizzard = true;
				this.jumpBoost = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 3250)
			{
				this.hasJumpOption_Fart = true;
				this.jumpBoost = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 3252)
			{
				this.hasJumpOption_Sail = true;
				this.jumpBoost = true;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 3251)
			{
				this.jumpBoost = true;
				this.honeyCombItem = currentItem;
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 1249)
			{
				this.jumpBoost = true;
				this.honeyCombItem = currentItem;
			}
			if (currentItem.type == 3241)
			{
				this.jumpBoost = true;
				this.hasJumpOption_Sail = true;
			}
			if ((currentItem.type == 1253 || currentItem.type == 3997) && (double)this.statLife <= (double)this.statLifeMax2 * 0.5)
			{
				this.AddBuff(62, 5, true, false);
			}
			if (currentItem.type == 1290)
			{
				this.panic = true;
			}
			if ((currentItem.type == 1300 || currentItem.type == 1858 || currentItem.type == 4005) && (this.inventory[this.selectedItem].useAmmo == AmmoID.Bullet || this.inventory[this.selectedItem].useAmmo == AmmoID.CandyCorn || this.inventory[this.selectedItem].useAmmo == AmmoID.Stake || this.inventory[this.selectedItem].useAmmo == 23 || this.inventory[this.selectedItem].useAmmo == AmmoID.Solution))
			{
				this.scope = true;
			}
			if (currentItem.type == 1858)
			{
				this.rangedCrit += 10;
				this.rangedDamage += 0.1f;
			}
			if (currentItem.type == 1301)
			{
				this.meleeCrit += 8;
				this.rangedCrit += 8;
				this.magicCrit += 8;
				this.meleeDamage += 0.1f;
				this.rangedDamage += 0.1f;
				this.magicDamage += 0.1f;
				this.minionDamage += 0.1f;
			}
			if (currentItem.type == 111)
			{
				this.statManaMax2 += 20;
			}
			if (currentItem.type == 982)
			{
				this.statManaMax2 += 20;
				this.manaRegenDelayBonus += 1f;
				this.manaRegenBonus += 25;
			}
			if (currentItem.type == 1595)
			{
				this.statManaMax2 += 20;
				this.magicCuffs = true;
			}
			if (currentItem.type == 2219)
			{
				this.manaMagnet = true;
			}
			if (currentItem.type == 2220)
			{
				this.manaMagnet = true;
				this.magicDamage += 0.15f;
			}
			if (currentItem.type == 2221)
			{
				this.manaMagnet = true;
				this.statManaMax2 += 20;
				this.magicCuffs = true;
			}
			if (this.whoAmI == Main.myPlayer && currentItem.type == 1923)
			{
				Player.tileRangeX++;
				Player.tileRangeY++;
			}
			if (currentItem.type == 1247)
			{
				this.starCloakItem = currentItem;
				this.honeyCombItem = currentItem;
				this.starCloakItem_beeCloakOverrideItem = currentItem;
			}
			if (currentItem.type == 1248)
			{
				this.meleeCrit += 10;
				this.rangedCrit += 10;
				this.magicCrit += 10;
			}
			if (currentItem.type == 854)
			{
				this.discountEquipped = true;
			}
			if (currentItem.type == 855)
			{
				this.hasLuckyCoin = true;
				this.hasLuck_LuckyCoin = true;
			}
			if (currentItem.type == 3033)
			{
				this.goldRing = true;
			}
			if (currentItem.type == 3034)
			{
				this.goldRing = true;
				this.hasLuckyCoin = true;
				this.hasLuck_LuckyCoin = true;
			}
			if (currentItem.type == 3035)
			{
				this.goldRing = true;
				this.hasLuckyCoin = true;
				this.hasLuck_LuckyCoin = true;
				this.discountEquipped = true;
			}
			if (currentItem.type == 53)
			{
				this.hasJumpOption_Cloud = true;
			}
			if (currentItem.type == 3201)
			{
				this.hasJumpOption_Sail = true;
			}
			if (currentItem.type == 54)
			{
				this.accRunSpeed = 6f;
			}
			if (currentItem.type == 3068)
			{
				this.cordage = true;
			}
			if (currentItem.type == 1579)
			{
				this.accRunSpeed = 6f;
			}
			if (currentItem.type == 3200)
			{
				this.accRunSpeed = 6f;
			}
			if (currentItem.type == 128)
			{
				this.rocketBoots = (this.vanityRocketBoots = 1);
			}
			if (currentItem.type == 156)
			{
				this.noKnockback = true;
			}
			if (currentItem.type == 158)
			{
				this.noFallDmg = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 934)
			{
				this.carpet = true;
			}
			if (currentItem.type == 953)
			{
				this.spikedBoots++;
			}
			if (currentItem.type == 975)
			{
				this.spikedBoots++;
			}
			if (currentItem.type == 976)
			{
				this.spikedBoots += 2;
			}
			if (currentItem.type == 977)
			{
				this.dashType = 1;
			}
			if (currentItem.type == 3097)
			{
				this.dashType = 2;
			}
			if (currentItem.type == 963)
			{
				this.blackBelt = true;
			}
			if (currentItem.type == 984)
			{
				this.blackBelt = true;
				this.dashType = 1;
				this.spikedBoots = 2;
			}
			if (currentItem.type == 1131)
			{
				this.gravControl2 = true;
			}
			if (currentItem.type == 1132)
			{
				this.honeyCombItem = currentItem;
			}
			if (currentItem.type == 1578)
			{
				this.honeyCombItem = currentItem;
				this.panic = true;
			}
			if (currentItem.type == 3224)
			{
				this.endurance += 0.17f;
			}
			if (currentItem.type == 3223)
			{
				this.brainOfConfusionItem = currentItem;
			}
			if (currentItem.type == 950)
			{
				this.iceSkate = true;
			}
			if (currentItem.type == 159)
			{
				this.jumpBoost = true;
			}
			if (currentItem.type == 3225)
			{
				this.jumpBoost = true;
			}
			if (currentItem.type == 187)
			{
				this.accFlipper = true;
			}
			if (currentItem.type == 211)
			{
				this.autoReuseGlove = true;
				this.meleeSpeed += 0.12f;
			}
			if (currentItem.type == 223)
			{
				this.manaCost -= 0.06f;
			}
			if (currentItem.type == 285)
			{
				this.moveSpeed += 0.05f;
			}
			if (currentItem.type == 212)
			{
				this.moveSpeed += 0.1f;
			}
			if (currentItem.type == 267)
			{
				this.killGuide = true;
			}
			if (currentItem.type == 1307)
			{
				this.killClothier = true;
			}
			if (currentItem.type == 193)
			{
				this.fireWalk = true;
			}
			if (currentItem.type == 861)
			{
				this.accMerman = true;
				this.wolfAcc = true;
				if (this.hideVisibleAccessory[itemSlot])
				{
					this.hideMerman = true;
					this.hideWolf = true;
				}
			}
			if (currentItem.type == 862)
			{
				this.starCloakItem = currentItem;
				this.longInvince = true;
				this.starCloakItem_starVeilOverrideItem = currentItem;
			}
			if (currentItem.type == 860)
			{
				this.pStone = true;
			}
			if (currentItem.type == 863)
			{
				this.waterWalk2 = true;
			}
			if (currentItem.type == 907)
			{
				this.waterWalk2 = true;
				this.fireWalk = true;
			}
			if (currentItem.type == 5044)
			{
				this.hasCreditsSceneMusicBox = true;
			}
			if (currentItem.type == 908 || currentItem.type == 5000)
			{
				this.waterWalk = true;
				this.fireWalk = true;
				this.lavaMax += 420;
				this.lavaRose = true;
			}
			if ((!this.mount.Active || this.mount.Type != 47) && !this.hideVisibleAccessory[itemSlot] && (currentItem.type == 4822 || currentItem.type == 4874))
			{
				this.DoBootsEffect(new Utils.TileActionAttempt(this.DoBootsEffect_PlaceFlamesOnTile));
			}
			if (currentItem.type == 906 || currentItem.type == 4038 || currentItem.type == 3999 || currentItem.type == 4003)
			{
				this.lavaMax += 420;
			}
			if (currentItem.type == 485)
			{
				this.wolfAcc = true;
				if (this.hideVisibleAccessory[itemSlot])
				{
					this.hideWolf = true;
				}
			}
			if (currentItem.type == 486)
			{
				this.rulerLine = true;
			}
			if (currentItem.type == 2799)
			{
				this.rulerGrid = true;
			}
			if (currentItem.type == 394)
			{
				this.accFlipper = true;
				this.accDivingHelm = true;
			}
			if (currentItem.type == 396)
			{
				this.noFallDmg = true;
				this.fireWalk = true;
				this.hasLuck_LuckyHorseshoe = true;
			}
			if (currentItem.type == 397)
			{
				this.noKnockback = true;
				this.fireWalk = true;
			}
			if (currentItem.type == 399)
			{
				this.jumpBoost = true;
				this.hasJumpOption_Cloud = true;
			}
			if (currentItem.type == 405)
			{
				this.accRunSpeed = 6f;
				this.rocketBoots = (this.vanityRocketBoots = 2);
			}
			if (currentItem.type == 1303)
			{
				if (!this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.225f, 0.05f, 0.15f);
				}
				if (this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 1.8f, 0.4f, 1.2f);
				}
			}
			if (currentItem.type == 1860)
			{
				this.accFlipper = true;
				this.accDivingHelm = true;
				if (!this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.225f, 0.05f, 0.15f);
				}
				if (this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 1.8f, 0.4f, 1.2f);
				}
			}
			if (currentItem.type == 1861)
			{
				this.arcticDivingGear = true;
				this.accFlipper = true;
				this.accDivingHelm = true;
				this.iceSkate = true;
				if (!this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.05f, 0.15f, 0.225f);
				}
				if (this.wet)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 1.2f, 1.8f);
				}
			}
			if (currentItem.type == 2214)
			{
				this.equippedAnyTileSpeedAcc = true;
			}
			if (currentItem.type == 2215)
			{
				this.equippedAnyTileRangeAcc = true;
			}
			if (currentItem.type == 2216)
			{
				this.autoPaint = true;
			}
			if (currentItem.type == 2217)
			{
				this.equippedAnyWallSpeedAcc = true;
			}
			if (currentItem.type == 3061)
			{
				this.equippedAnyWallSpeedAcc = true;
				this.equippedAnyTileSpeedAcc = true;
				this.autoPaint = true;
				this.equippedAnyTileRangeAcc = true;
			}
			if (currentItem.type == 5126)
			{
				this.equippedAnyWallSpeedAcc = true;
				this.equippedAnyTileSpeedAcc = true;
				this.autoPaint = true;
				this.equippedAnyTileRangeAcc = true;
				this.treasureMagnet = true;
				this.chiselSpeed = true;
			}
			if (currentItem.type == 3624)
			{
				this.autoActuator = true;
			}
			if (currentItem.type == 897)
			{
				this.kbGlove = true;
				this.autoReuseGlove = true;
				this.meleeScaleGlove = true;
				this.meleeSpeed += 0.12f;
			}
			if (currentItem.type == 1343)
			{
				this.kbGlove = true;
				this.autoReuseGlove = true;
				this.meleeScaleGlove = true;
				this.meleeSpeed += 0.12f;
				this.meleeDamage += 0.12f;
				this.magmaStone = true;
			}
			if (currentItem.type == 1167)
			{
				this.minionKB += 2f;
				this.minionDamage += 0.15f;
			}
			if (currentItem.type == 1864)
			{
				this.minionKB += 2f;
				this.minionDamage += 0.15f;
				this.maxMinions++;
			}
			if (currentItem.type == 1845)
			{
				this.minionDamage += 0.1f;
				this.maxMinions++;
			}
			if (currentItem.type == 1321)
			{
				this.magicQuiver = true;
				this.arrowDamageAdditiveStack += 0.1f;
			}
			if (currentItem.type == 1322)
			{
				this.magmaStone = true;
			}
			if (currentItem.type == 1323)
			{
				this.lavaRose = true;
			}
			if (currentItem.type == 3333)
			{
				this.strongBees = true;
			}
			if (currentItem.type == 938 || currentItem.type == 3997 || currentItem.type == 3998)
			{
				this.noKnockback = true;
				if ((float)this.statLife > (float)this.statLifeMax2 * 0.25f)
				{
					this.hasPaladinShield = true;
					if (this.whoAmI != Main.myPlayer && this.miscCounter % 10 == 0)
					{
						int myPlayer = Main.myPlayer;
						if (Main.player[myPlayer].team == this.team && this.team != 0)
						{
							float num = this.position.X - Main.player[myPlayer].position.X;
							float num2 = this.position.Y - Main.player[myPlayer].position.Y;
							if ((float)Math.Sqrt((double)(num * num + num2 * num2)) < 800f)
							{
								Main.player[myPlayer].AddBuff(43, 20, true, false);
							}
						}
					}
				}
			}
			if (currentItem.type == 936)
			{
				this.kbGlove = true;
				this.autoReuseGlove = true;
				this.meleeScaleGlove = true;
				this.meleeSpeed += 0.12f;
				this.meleeDamage += 0.12f;
			}
			if (currentItem.type == 898)
			{
				this.accRunSpeed = 6.75f;
				this.rocketBoots = (this.vanityRocketBoots = 2);
				this.moveSpeed += 0.08f;
			}
			if (currentItem.type == 1862)
			{
				this.accRunSpeed = 6.75f;
				this.rocketBoots = (this.vanityRocketBoots = 3);
				this.moveSpeed += 0.08f;
				this.iceSkate = true;
			}
			if (currentItem.type == 5000)
			{
				this.accRunSpeed = 6.75f;
				this.rocketBoots = (this.vanityRocketBoots = 4);
				this.moveSpeed += 0.08f;
				this.iceSkate = true;
			}
			if (currentItem.type == 4874)
			{
				this.accRunSpeed = 6f;
				this.rocketBoots = (this.vanityRocketBoots = 5);
			}
			if (currentItem.type == 3110)
			{
				this.accMerman = true;
				this.wolfAcc = true;
				if (this.hideVisibleAccessory[itemSlot])
				{
					this.hideMerman = true;
					this.hideWolf = true;
				}
			}
			if (currentItem.type == 1865 || currentItem.type == 3110)
			{
				this.skyStoneEffects = true;
			}
			if (currentItem.type == 899 && Main.dayTime)
			{
				this.skyStoneEffects = true;
			}
			if (currentItem.type == 900 && (!Main.dayTime || Main.eclipse))
			{
				this.skyStoneEffects = true;
			}
			if (currentItem.type == 407)
			{
				this.blockRange++;
			}
			if (currentItem.type == 489)
			{
				this.magicDamage += 0.15f;
			}
			if (currentItem.type == 490)
			{
				this.meleeDamage += 0.15f;
			}
			if (currentItem.type == 491)
			{
				this.rangedDamage += 0.15f;
			}
			if (currentItem.type == 2998)
			{
				this.minionDamage += 0.15f;
			}
			if (currentItem.type == 935)
			{
				this.magicDamage += 0.12f;
				this.meleeDamage += 0.12f;
				this.rangedDamage += 0.12f;
				this.minionDamage += 0.12f;
			}
			if (currentItem.wingSlot != -1)
			{
				this.wingTimeMax = this.GetWingStats((int)currentItem.wingSlot).FlyTime;
			}
			if (currentItem.wingSlot == 26)
			{
				this.ignoreWater = true;
			}
			if (currentItem.type == 5452)
			{
				this.remoteVisionForDrone = true;
			}
			if (currentItem.type == 885)
			{
				this.buffImmune[30] = true;
			}
			if (currentItem.type == 886)
			{
				this.buffImmune[36] = true;
			}
			if (currentItem.type == 887)
			{
				this.buffImmune[20] = true;
			}
			if (currentItem.type == 888)
			{
				this.buffImmune[22] = true;
			}
			if (currentItem.type == 889)
			{
				this.buffImmune[32] = true;
			}
			if (currentItem.type == 890)
			{
				this.buffImmune[35] = true;
			}
			if (currentItem.type == 891)
			{
				this.buffImmune[23] = true;
			}
			if (currentItem.type == 892)
			{
				this.buffImmune[33] = true;
			}
			if (currentItem.type == 893)
			{
				this.buffImmune[31] = true;
			}
			if (currentItem.type == 3781)
			{
				this.buffImmune[156] = true;
			}
			if (currentItem.type == 901)
			{
				this.buffImmune[33] = true;
				this.buffImmune[36] = true;
			}
			if (currentItem.type == 902)
			{
				this.buffImmune[30] = true;
				this.buffImmune[20] = true;
			}
			if (currentItem.type == 903)
			{
				this.buffImmune[32] = true;
				this.buffImmune[31] = true;
			}
			if (currentItem.type == 904)
			{
				this.buffImmune[35] = true;
				this.buffImmune[23] = true;
			}
			if (currentItem.type == 5354)
			{
				this.buffImmune[22] = true;
				this.buffImmune[156] = true;
			}
			if (currentItem.type == 5355 && !this.controlDownHold)
			{
				this.shimmerImmune = true;
			}
			if (currentItem.type == 1921)
			{
				this.buffImmune[46] = true;
				this.buffImmune[47] = true;
			}
			if (currentItem.type == 1612)
			{
				this.buffImmune[33] = true;
				this.buffImmune[36] = true;
				this.buffImmune[30] = true;
				this.buffImmune[20] = true;
				this.buffImmune[32] = true;
				this.buffImmune[31] = true;
				this.buffImmune[35] = true;
				this.buffImmune[23] = true;
				this.buffImmune[22] = true;
				this.buffImmune[156] = true;
			}
			if (currentItem.type == 1613)
			{
				this.buffImmune[46] = true;
				this.noKnockback = true;
				this.fireWalk = true;
				this.buffImmune[33] = true;
				this.buffImmune[36] = true;
				this.buffImmune[30] = true;
				this.buffImmune[20] = true;
				this.buffImmune[32] = true;
				this.buffImmune[31] = true;
				this.buffImmune[35] = true;
				this.buffImmune[23] = true;
				this.buffImmune[22] = true;
				this.buffImmune[156] = true;
			}
			if (currentItem.type == 497)
			{
				this.accMerman = true;
				if (this.hideVisibleAccessory[itemSlot])
				{
					this.hideMerman = true;
				}
			}
			if (currentItem.type == 535)
			{
				this.pStone = true;
			}
			if (currentItem.type == 536)
			{
				this.kbGlove = true;
				this.meleeScaleGlove = true;
			}
			if (currentItem.type == 532)
			{
				this.starCloakItem = currentItem;
			}
			if (currentItem.type == 554)
			{
				this.longInvince = true;
			}
			if (currentItem.type == 555)
			{
				this.manaFlower = true;
				this.manaCost -= 0.08f;
			}
			if (Main.myPlayer == this.whoAmI)
			{
				if (currentItem.type == 5104 || currentItem.type == 5105)
				{
					this.ApplyWilsonBeard(currentItem);
				}
				else if (currentItem.type == 576 && Main.rand.Next(540) == 0 && Main.curMusic > 0 && Main.curMusic <= Main.maxMusic)
				{
					SoundEngine.PlaySound(SoundID.Item166, base.Center);
					int num3 = -1;
					if (Main.curMusic == 1)
					{
						num3 = 0;
					}
					if (Main.curMusic == 2)
					{
						num3 = 1;
					}
					if (Main.curMusic == 3)
					{
						num3 = 2;
					}
					if (Main.curMusic == 4)
					{
						num3 = 4;
					}
					if (Main.curMusic == 5)
					{
						num3 = 5;
					}
					if (Main.curMusic == 6)
					{
						num3 = 3;
					}
					if (Main.curMusic == 7)
					{
						num3 = 6;
					}
					if (Main.curMusic == 8)
					{
						num3 = 7;
					}
					if (Main.curMusic == 9)
					{
						num3 = 9;
					}
					if (Main.curMusic == 10)
					{
						num3 = 8;
					}
					if (Main.curMusic == 11)
					{
						num3 = 11;
					}
					if (Main.curMusic == 12)
					{
						num3 = 10;
					}
					if (Main.curMusic == 13)
					{
						num3 = 12;
					}
					if (Main.curMusic == 28)
					{
						currentItem.SetDefaults(1963);
					}
					else if (Main.curMusic == 29)
					{
						currentItem.SetDefaults(1610);
					}
					else if (Main.curMusic == 30)
					{
						currentItem.SetDefaults(1963);
					}
					else if (Main.curMusic == 31)
					{
						currentItem.SetDefaults(1964);
					}
					else if (Main.curMusic == 32)
					{
						currentItem.SetDefaults(1965);
					}
					else if (Main.curMusic == 33)
					{
						currentItem.SetDefaults(2742);
					}
					else if (Main.curMusic == 34)
					{
						currentItem.SetDefaults(3370);
					}
					else if (Main.curMusic == 35)
					{
						currentItem.SetDefaults(3236);
					}
					else if (Main.curMusic == 36)
					{
						currentItem.SetDefaults(3237);
					}
					else if (Main.curMusic == 37)
					{
						currentItem.SetDefaults(3235);
					}
					else if (Main.curMusic == 38)
					{
						currentItem.SetDefaults(3044);
					}
					else if (Main.curMusic == 39)
					{
						currentItem.SetDefaults(3371);
					}
					else if (Main.curMusic == 40)
					{
						currentItem.SetDefaults(3796);
					}
					else if (Main.curMusic == 41)
					{
						currentItem.SetDefaults(3869);
					}
					else if (Main.curMusic == 42)
					{
						currentItem.SetDefaults(4079);
					}
					else if (Main.curMusic == 43)
					{
						currentItem.SetDefaults(4077);
					}
					else if (Main.curMusic == 44)
					{
						currentItem.SetDefaults(4082);
					}
					else if (Main.curMusic == 46)
					{
						currentItem.SetDefaults(4080);
					}
					else if (Main.curMusic == 47)
					{
						currentItem.SetDefaults(4081);
					}
					else if (Main.curMusic == 48)
					{
						currentItem.SetDefaults(4078);
					}
					else if (Main.curMusic == 49)
					{
						currentItem.SetDefaults(4237);
					}
					else if (Main.curMusic == 51)
					{
						currentItem.SetDefaults(4356);
					}
					else if (Main.curMusic == 52)
					{
						currentItem.SetDefaults(4357);
					}
					else if (Main.curMusic == 53)
					{
						currentItem.SetDefaults(4358);
					}
					else if (Main.curMusic == 54)
					{
						currentItem.SetDefaults(4421);
					}
					else if (Main.curMusic == 55)
					{
						currentItem.SetDefaults(4606);
					}
					else if (Main.curMusic == 56)
					{
						currentItem.SetDefaults(4979);
					}
					else if (Main.curMusic == 57)
					{
						currentItem.SetDefaults(4985);
					}
					else if (Main.curMusic == 58)
					{
						currentItem.SetDefaults(4990);
					}
					else if (Main.curMusic == 59)
					{
						currentItem.SetDefaults(4991);
					}
					else if (Main.curMusic == 60)
					{
						currentItem.SetDefaults(4992);
					}
					else if (Main.curMusic == 61)
					{
						currentItem.SetDefaults(5006);
					}
					else if (Main.curMusic == 62)
					{
						currentItem.SetDefaults(5014);
					}
					else if (Main.curMusic == 63)
					{
						currentItem.SetDefaults(5015);
					}
					else if (Main.curMusic == 64)
					{
						currentItem.SetDefaults(5016);
					}
					else if (Main.curMusic == 65)
					{
						currentItem.SetDefaults(5017);
					}
					else if (Main.curMusic == 66)
					{
						currentItem.SetDefaults(5018);
					}
					else if (Main.curMusic == 67)
					{
						currentItem.SetDefaults(5019);
					}
					else if (Main.curMusic == 68)
					{
						currentItem.SetDefaults(5020);
					}
					else if (Main.curMusic == 69)
					{
						currentItem.SetDefaults(5021);
					}
					else if (Main.curMusic == 70)
					{
						currentItem.SetDefaults(5022);
					}
					else if (Main.curMusic == 71)
					{
						currentItem.SetDefaults(5023);
					}
					else if (Main.curMusic == 72)
					{
						currentItem.SetDefaults(5024);
					}
					else if (Main.curMusic == 73)
					{
						currentItem.SetDefaults(5025);
					}
					else if (Main.curMusic == 74)
					{
						currentItem.SetDefaults(5026);
					}
					else if (Main.curMusic == 75)
					{
						currentItem.SetDefaults(5027);
					}
					else if (Main.curMusic == 76)
					{
						currentItem.SetDefaults(5028);
					}
					else if (Main.curMusic == 77)
					{
						currentItem.SetDefaults(5029);
					}
					else if (Main.curMusic == 78)
					{
						currentItem.SetDefaults(5030);
					}
					else if (Main.curMusic == 79)
					{
						currentItem.SetDefaults(5031);
					}
					else if (Main.curMusic == 80)
					{
						currentItem.SetDefaults(5032);
					}
					else if (Main.curMusic == 81)
					{
						currentItem.SetDefaults(5033);
					}
					else if (Main.curMusic == 82)
					{
						currentItem.SetDefaults(5034);
					}
					else if (Main.curMusic == 83)
					{
						currentItem.SetDefaults(5035);
					}
					else if (Main.curMusic == 84)
					{
						currentItem.SetDefaults(5036);
					}
					else if (Main.curMusic == 85)
					{
						currentItem.SetDefaults(5037);
					}
					else if (Main.curMusic == 86)
					{
						currentItem.SetDefaults(5038);
					}
					else if (Main.curMusic == 87)
					{
						currentItem.SetDefaults(5039);
					}
					else if (Main.curMusic == 88)
					{
						currentItem.SetDefaults(5040);
					}
					else if (Main.curMusic == 89)
					{
						currentItem.SetDefaults(5044);
					}
					else if (Main.curMusic == 90)
					{
						currentItem.SetDefaults(5112);
					}
					else if (Main.curMusic == 91)
					{
						currentItem.SetDefaults(5362);
					}
					else if (Main.curMusic > 13)
					{
						currentItem.SetDefaults(1596 + Main.curMusic - 14);
					}
					else if (num3 != -1)
					{
						currentItem.SetDefaults(num3 + 562);
					}
				}
				this.ApplyMusicBox(currentItem);
			}
		}

		// Token: 0x06000770 RID: 1904 RVA: 0x002D8E5C File Offset: 0x002D705C
		private void ApplyWilsonBeard(Item currentItem)
		{
			this.beardGrowthTimer++;
			if (this.beardGrowthTimer < 43200 || Main.rand.Next(540) != 0)
			{
				return;
			}
			this.beardGrowthTimer = 0;
			short defaults = 5105;
			if (currentItem.type == 5105)
			{
				defaults = 5106;
			}
			SoundEngine.PlaySound(SoundID.Item60, base.Center);
			currentItem.SetDefaults((int)defaults);
		}

		// Token: 0x06000771 RID: 1905 RVA: 0x002D8ED0 File Offset: 0x002D70D0
		private void ApplyMusicBox(Item currentItem)
		{
			if (currentItem.type >= 562 && currentItem.type <= 574)
			{
				Main.musicBox2 = currentItem.type - 562;
			}
			if (currentItem.type >= 1596 && currentItem.type <= 1609)
			{
				Main.musicBox2 = currentItem.type - 1596 + 13;
			}
			if (currentItem.type == 1610)
			{
				Main.musicBox2 = 27;
			}
			if (currentItem.type == 1963)
			{
				Main.musicBox2 = 28;
			}
			if (currentItem.type == 1964)
			{
				Main.musicBox2 = 29;
			}
			if (currentItem.type == 1965)
			{
				Main.musicBox2 = 30;
			}
			if (currentItem.type == 2742)
			{
				Main.musicBox2 = 31;
			}
			if (currentItem.type == 3044)
			{
				Main.musicBox2 = 32;
			}
			if (currentItem.type == 3235)
			{
				Main.musicBox2 = 33;
			}
			if (currentItem.type == 3236)
			{
				Main.musicBox2 = 34;
			}
			if (currentItem.type == 3237)
			{
				Main.musicBox2 = 35;
			}
			if (currentItem.type == 3370)
			{
				Main.musicBox2 = 36;
			}
			if (currentItem.type == 3371)
			{
				Main.musicBox2 = 37;
			}
			if (currentItem.type == 3796)
			{
				Main.musicBox2 = 38;
			}
			if (currentItem.type == 3869)
			{
				Main.musicBox2 = 39;
			}
			if (currentItem.type == 4082)
			{
				Main.musicBox2 = 40;
			}
			if (currentItem.type == 4078)
			{
				Main.musicBox2 = 41;
			}
			if (currentItem.type == 4079)
			{
				Main.musicBox2 = 42;
			}
			if (currentItem.type == 4077)
			{
				Main.musicBox2 = 43;
			}
			if (currentItem.type == 4080)
			{
				Main.musicBox2 = 44;
			}
			if (currentItem.type == 4081)
			{
				Main.musicBox2 = 45;
			}
			if (currentItem.type == 4237)
			{
				Main.musicBox2 = 46;
			}
			if (currentItem.type == 4356)
			{
				Main.musicBox2 = 47;
			}
			if (currentItem.type == 4357)
			{
				Main.musicBox2 = 48;
			}
			if (currentItem.type == 4358)
			{
				Main.musicBox2 = 49;
			}
			if (currentItem.type == 4421)
			{
				Main.musicBox2 = 50;
			}
			if (currentItem.type == 4606)
			{
				Main.musicBox2 = 51;
			}
			if (currentItem.type == 4979)
			{
				Main.musicBox2 = 52;
			}
			if (currentItem.type == 4985)
			{
				Main.musicBox2 = 53;
			}
			if (currentItem.type == 4990)
			{
				Main.musicBox2 = 54;
			}
			if (currentItem.type == 4991)
			{
				Main.musicBox2 = 55;
			}
			if (currentItem.type == 4992)
			{
				Main.musicBox2 = 56;
			}
			if (currentItem.type == 5006)
			{
				Main.musicBox2 = 57;
			}
			if (currentItem.type == 5014)
			{
				Main.musicBox2 = 58;
			}
			if (currentItem.type == 5015)
			{
				Main.musicBox2 = 59;
			}
			if (currentItem.type == 5016)
			{
				Main.musicBox2 = 60;
			}
			if (currentItem.type == 5017)
			{
				Main.musicBox2 = 61;
			}
			if (currentItem.type == 5018)
			{
				Main.musicBox2 = 62;
			}
			if (currentItem.type == 5019)
			{
				Main.musicBox2 = 63;
			}
			if (currentItem.type == 5020)
			{
				Main.musicBox2 = 64;
			}
			if (currentItem.type == 5021)
			{
				Main.musicBox2 = 65;
			}
			if (currentItem.type == 5022)
			{
				Main.musicBox2 = 66;
			}
			if (currentItem.type == 5023)
			{
				Main.musicBox2 = 67;
			}
			if (currentItem.type == 5024)
			{
				Main.musicBox2 = 68;
			}
			if (currentItem.type == 5025)
			{
				Main.musicBox2 = 69;
			}
			if (currentItem.type == 5026)
			{
				Main.musicBox2 = 70;
			}
			if (currentItem.type == 5027)
			{
				Main.musicBox2 = 71;
			}
			if (currentItem.type == 5028)
			{
				Main.musicBox2 = 72;
			}
			if (currentItem.type == 5029)
			{
				Main.musicBox2 = 73;
			}
			if (currentItem.type == 5030)
			{
				Main.musicBox2 = 74;
			}
			if (currentItem.type == 5031)
			{
				Main.musicBox2 = 75;
			}
			if (currentItem.type == 5032)
			{
				Main.musicBox2 = 76;
			}
			if (currentItem.type == 5033)
			{
				Main.musicBox2 = 77;
			}
			if (currentItem.type == 5034)
			{
				Main.musicBox2 = 78;
			}
			if (currentItem.type == 5035)
			{
				Main.musicBox2 = 79;
			}
			if (currentItem.type == 5036)
			{
				Main.musicBox2 = 80;
			}
			if (currentItem.type == 5037)
			{
				Main.musicBox2 = 81;
			}
			if (currentItem.type == 5038)
			{
				Main.musicBox2 = 82;
			}
			if (currentItem.type == 5039)
			{
				Main.musicBox2 = 83;
			}
			if (currentItem.type == 5040)
			{
				Main.musicBox2 = 84;
			}
			if (currentItem.type == 5044)
			{
				Main.musicBox2 = 85;
			}
			if (currentItem.type == 5112)
			{
				Main.musicBox2 = 86;
			}
			if (currentItem.type == 5362)
			{
				Main.musicBox2 = 87;
			}
			Main.musicBoxNotModifiedByVolume = Main.musicBox2;
		}

		// Token: 0x06000772 RID: 1906 RVA: 0x002D9404 File Offset: 0x002D7604
		public void UpdateArmorSets(int i)
		{
			this.setBonus = "";
			if (this.body == 67 && this.legs == 56 && this.head >= 103 && this.head <= 105)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Shroomite");
				this.shroomiteStealth = true;
			}
			if ((this.head == 52 && this.body == 32 && this.legs == 31) || (this.head == 53 && this.body == 33 && this.legs == 32) || (this.head == 54 && this.body == 34 && this.legs == 33) || (this.head == 55 && this.body == 35 && this.legs == 34) || (this.head == 71 && this.body == 47 && this.legs == 43) || (this.head == 166 && this.body == 173 && this.legs == 108) || (this.head == 167 && this.body == 174 && this.legs == 109))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Wood");
				this.statDefense++;
			}
			if (this.head == 278 && this.body == 246 && this.legs == 234)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.AshWood");
				this.ashWoodBonus = true;
			}
			if ((this.head == 1 && this.body == 1 && this.legs == 1) || ((this.head == 72 || this.head == 2) && this.body == 2 && this.legs == 2) || (this.head == 47 && this.body == 28 && this.legs == 27))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier1");
				this.statDefense += 2;
			}
			if ((this.head == 3 && this.body == 3 && this.legs == 3) || ((this.head == 73 || this.head == 4) && this.body == 4 && this.legs == 4) || (this.head == 48 && this.body == 29 && this.legs == 28) || (this.head == 49 && this.body == 30 && this.legs == 29))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier2");
				this.statDefense += 3;
			}
			if (this.head == 50 && this.body == 31 && this.legs == 30)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Platinum");
				this.statDefense += 4;
			}
			if (this.head == 112 && this.body == 75 && this.legs == 64)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Pumpkin");
				this.meleeDamage += 0.1f;
				this.magicDamage += 0.1f;
				this.rangedDamage += 0.1f;
				this.minionDamage += 0.1f;
			}
			if (this.head == 180 && this.body == 182 && this.legs == 122)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Gladiator");
				this.noKnockback = true;
			}
			if (this.head == 22 && this.body == 14 && this.legs == 14)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Ninja");
				this.moveSpeed += 0.2f;
			}
			if (this.head == 188 && this.body == 189 && this.legs == 129)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Fossil");
				this.ammoCost80 = true;
			}
			if ((this.head == 75 || this.head == 7) && this.body == 7 && this.legs == 7)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Bone");
				this.rangedCrit += 10;
			}
			if (this.head == 157 && this.body == 105 && this.legs == 98)
			{
				int num = 0;
				this.setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDamage");
				this.beetleOffense = true;
				this.beetleCounter -= 3f;
				this.beetleCounter -= (float)(this.beetleCountdown / 20);
				this.beetleCountdown++;
				if (this.beetleCounter < 0f)
				{
					this.beetleCounter = 0f;
				}
				int num2 = 400;
				int num3 = 1200;
				int num4 = 3600;
				if (this.beetleCounter > (float)(num2 + num3 + num4 + num3))
				{
					this.beetleCounter = (float)(num2 + num3 + num4 + num3);
				}
				if (this.beetleCounter > (float)(num2 + num3 + num4))
				{
					this.AddBuff(100, 5, false, false);
					num = 3;
				}
				else if (this.beetleCounter > (float)(num2 + num3))
				{
					this.AddBuff(99, 5, false, false);
					num = 2;
				}
				else if (this.beetleCounter > (float)num2)
				{
					this.AddBuff(98, 5, false, false);
					num = 1;
				}
				if (num < this.beetleOrbs)
				{
					this.beetleCountdown = 0;
				}
				else if (num > this.beetleOrbs)
				{
					this.beetleCounter += 200f;
				}
				if (num != this.beetleOrbs && this.beetleOrbs > 0)
				{
					for (int j = 0; j < Player.maxBuffs; j++)
					{
						if (this.buffType[j] >= 98 && this.buffType[j] <= 100 && this.buffType[j] != 97 + num)
						{
							this.DelBuff(j);
						}
					}
				}
			}
			else if (this.head == 157 && this.body == 106 && this.legs == 98)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDefense");
				this.beetleDefense = true;
				this.beetleCounter += 1f;
				int num5 = 180;
				if (this.beetleCounter >= (float)num5)
				{
					if (this.beetleOrbs > 0 && this.beetleOrbs < 3)
					{
						for (int k = 0; k < Player.maxBuffs; k++)
						{
							if (this.buffType[k] >= 95 && this.buffType[k] <= 96)
							{
								this.DelBuff(k);
							}
						}
					}
					if (this.beetleOrbs < 3)
					{
						this.AddBuff(95 + this.beetleOrbs, 5, false, false);
						this.beetleCounter = 0f;
					}
					else
					{
						this.beetleCounter = (float)num5;
					}
				}
			}
			if (!this.beetleDefense && !this.beetleOffense)
			{
				this.beetleCounter = 0f;
			}
			else
			{
				this.beetleFrameCounter++;
				if (this.beetleFrameCounter >= 1)
				{
					this.beetleFrameCounter = 0;
					this.beetleFrame++;
					if (this.beetleFrame > 2)
					{
						this.beetleFrame = 0;
					}
				}
				for (int l = this.beetleOrbs; l < 3; l++)
				{
					this.beetlePos[l].X = 0f;
					this.beetlePos[l].Y = 0f;
				}
				for (int m = 0; m < this.beetleOrbs; m++)
				{
					this.beetlePos[m] += this.beetleVel[m];
					Vector2[] array = this.beetleVel;
					int num6 = m;
					array[num6].X = array[num6].X + (float)Main.rand.Next(-100, 101) * 0.005f;
					Vector2[] array2 = this.beetleVel;
					int num7 = m;
					array2[num7].Y = array2[num7].Y + (float)Main.rand.Next(-100, 101) * 0.005f;
					float num8 = this.beetlePos[m].X;
					float num9 = this.beetlePos[m].Y;
					float num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
					if (num10 > 100f)
					{
						num10 = 20f / num10;
						num8 *= -num10;
						num9 *= -num10;
						int num11 = 10;
						this.beetleVel[m].X = (this.beetleVel[m].X * (float)(num11 - 1) + num8) / (float)num11;
						this.beetleVel[m].Y = (this.beetleVel[m].Y * (float)(num11 - 1) + num9) / (float)num11;
					}
					else if (num10 > 30f)
					{
						num10 = 10f / num10;
						num8 *= -num10;
						num9 *= -num10;
						int num12 = 20;
						this.beetleVel[m].X = (this.beetleVel[m].X * (float)(num12 - 1) + num8) / (float)num12;
						this.beetleVel[m].Y = (this.beetleVel[m].Y * (float)(num12 - 1) + num9) / (float)num12;
					}
					num8 = this.beetleVel[m].X;
					num9 = this.beetleVel[m].Y;
					num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
					if (num10 > 2f)
					{
						this.beetleVel[m] *= 0.9f;
					}
					this.beetlePos[m] -= this.velocity * 0.25f;
				}
			}
			if (this.head == 14 && ((this.body >= 58 && this.body <= 63) || this.body == 167 || this.body == 213))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Wizard");
				this.magicCrit += 10;
			}
			if (this.head == 159 && ((this.body >= 58 && this.body <= 63) || this.body == 167 || this.body == 213))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.MagicHat");
				this.statManaMax2 += 60;
			}
			if ((this.head == 5 || this.head == 74) && (this.body == 5 || this.body == 48) && (this.legs == 5 || this.legs == 44))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.ShadowScale");
				this.shadowArmor = true;
			}
			if (this.head == 57 && this.body == 37 && this.legs == 35)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Crimson");
				this.crimsonRegen = true;
			}
			if (this.head == 101 && this.body == 66 && this.legs == 55)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.SpectreHealing");
				this.ghostHeal = true;
				this.magicDamage -= 0.4f;
			}
			if (this.head == 156 && this.body == 66 && this.legs == 55)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.SpectreDamage");
				this.ghostHurt = true;
			}
			if (this.head == 6 && this.body == 6 && this.legs == 6)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Meteor");
				this.spaceGun = true;
			}
			if (this.head == 46 && this.body == 27 && this.legs == 26)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Frost");
				this.frostBurn = true;
				this.meleeDamage += 0.1f;
				this.rangedDamage += 0.1f;
			}
			if ((this.head == 76 || this.head == 8) && (this.body == 49 || this.body == 8) && (this.legs == 45 || this.legs == 8))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Jungle");
				this.manaCost -= 0.16f;
			}
			if (this.head == 9 && this.body == 9 && this.legs == 9)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Molten");
				this.meleeDamage += 0.1f;
				this.buffImmune[24] = true;
			}
			if ((this.head == 58 || this.head == 77) && (this.body == 38 || this.body == 50) && (this.legs == 36 || this.legs == 46))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Snow");
				this.buffImmune[46] = true;
				this.buffImmune[47] = true;
			}
			if (this.head == 11 && this.body == 20 && this.legs == 19)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Mining");
				this.pickSpeed -= 0.1f;
			}
			if (this.head == 216 && this.body == 20 && this.legs == 19)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Mining");
				this.pickSpeed -= 0.1f;
			}
			if (this.head == 78 && this.body == 51 && this.legs == 47)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.ChlorophyteMelee");
				this.AddBuff(60, 18000, true, false);
				this.endurance += 0.05f;
			}
			else if ((this.head == 80 || this.head == 79) && this.body == 51 && this.legs == 47)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Chlorophyte");
				this.AddBuff(60, 18000, true, false);
			}
			else if (this.crystalLeaf)
			{
				for (int n = 0; n < Player.maxBuffs; n++)
				{
					if (this.buffType[n] == 60)
					{
						this.DelBuff(n);
					}
				}
			}
			if (this.head == 161 && this.body == 169 && this.legs == 104)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Angler");
				this.anglerSetSpawnReduction = true;
			}
			if (this.head == 70 && this.body == 46 && this.legs == 42)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Cactus");
				this.cactusThorns = true;
			}
			if (this.head == 99 && this.body == 65 && this.legs == 54)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Turtle");
				this.endurance += 0.15f;
				this.thorns = 1f;
				this.turtleThorns = true;
			}
			if (this.body == 17 && this.legs == 16)
			{
				if (this.head == 29)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltCaster");
					this.manaCost -= 0.14f;
				}
				else if (this.head == 30)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltMelee");
					this.meleeSpeed += 0.15f;
				}
				else if (this.head == 31)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltRanged");
					this.ammoCost80 = true;
				}
			}
			if (this.body == 18 && this.legs == 17)
			{
				if (this.head == 32)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilCaster");
					this.manaCost -= 0.17f;
				}
				else if (this.head == 33)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilMelee");
					this.meleeCrit += 10;
				}
				else if (this.head == 34)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilRanged");
					this.ammoCost80 = true;
				}
			}
			if (this.body == 19 && this.legs == 18)
			{
				if (this.head == 35)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteCaster");
					this.manaCost -= 0.19f;
				}
				else if (this.head == 36)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteMelee");
					this.meleeSpeed += 0.2f;
					this.moveSpeed += 0.2f;
				}
				else if (this.head == 37)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteRanged");
					this.ammoCost75 = true;
				}
			}
			if (this.body == 54 && this.legs == 49 && (this.head == 83 || this.head == 84 || this.head == 85))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Palladium");
				this.onHitRegen = true;
			}
			if (this.body == 55 && this.legs == 50 && (this.head == 86 || this.head == 87 || this.head == 88))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Orichalcum");
				this.onHitPetal = true;
			}
			if (this.body == 56 && this.legs == 51)
			{
				bool flag = false;
				if (this.head == 91)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
					flag = true;
				}
				else if (this.head == 89)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
					flag = true;
				}
				else if (this.head == 90)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
					flag = true;
				}
				if (flag)
				{
					this.onHitTitaniumStorm = true;
				}
			}
			if ((this.body == 24 || this.body == 229) && (this.legs == 23 || this.legs == 212) && (this.head == 42 || this.head == 41 || this.head == 43 || this.head == 254 || this.head == 257 || this.head == 256 || this.head == 255 || this.head == 258))
			{
				if (this.head == 254 || this.head == 258)
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.HallowedSummoner");
					this.maxMinions += 2;
				}
				else
				{
					this.setBonus = Language.GetTextValue("ArmorSetBonus.Hallowed");
				}
				this.onHitDodge = true;
			}
			if (this.head == 261 && this.body == 230 && this.legs == 213)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.CrystalNinja");
				this.rangedDamage += 0.1f;
				this.meleeDamage += 0.1f;
				this.magicDamage += 0.1f;
				this.minionDamage += 0.1f;
				this.rangedCrit += 10;
				this.meleeCrit += 10;
				this.magicCrit += 10;
				this.dashType = 5;
			}
			if (this.head == 82 && this.body == 53 && this.legs == 48)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Tiki");
				this.maxMinions++;
				this.whipRangeMultiplier += 0.2f;
			}
			if (this.head == 134 && this.body == 95 && this.legs == 79)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Spooky");
				this.minionDamage += 0.25f;
			}
			if (this.head == 160 && this.body == 168 && this.legs == 103)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Bee");
				this.minionDamage += 0.1f;
				if (this.itemAnimation > 0 && this.inventory[this.selectedItem].type == 1121)
				{
					AchievementsHelper.HandleSpecialEvent(this, 3);
				}
			}
			if (this.head == 162 && this.body == 170 && this.legs == 105)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Spider");
				this.minionDamage += 0.12f;
			}
			if (this.head == 171 && this.body == 177 && this.legs == 112)
			{
				this.endurance += 0.12f;
				this.setSolar = true;
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Solar");
				this.solarCounter++;
				int num13 = 180;
				if (this.solarCounter >= num13)
				{
					if (this.solarShields > 0 && this.solarShields < 3)
					{
						for (int num14 = 0; num14 < Player.maxBuffs; num14++)
						{
							if (this.buffType[num14] >= 170 && this.buffType[num14] <= 171)
							{
								this.DelBuff(num14);
							}
						}
					}
					if (this.solarShields < 3)
					{
						this.AddBuff(170 + this.solarShields, 5, false, false);
						for (int num15 = 0; num15 < 16; num15++)
						{
							Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f)];
							dust.noGravity = true;
							dust.scale = 1.7f;
							dust.fadeIn = 0.5f;
							dust.velocity *= 5f;
							dust.shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						}
						this.solarCounter = 0;
					}
					else
					{
						this.solarCounter = num13;
					}
				}
				for (int num16 = this.solarShields; num16 < 3; num16++)
				{
					this.solarShieldPos[num16] = Vector2.Zero;
				}
				for (int num17 = 0; num17 < this.solarShields; num17++)
				{
					this.solarShieldPos[num17] += this.solarShieldVel[num17];
					Vector2 value = ((float)this.miscCounter / 100f * 6.2831855f + (float)num17 * (6.2831855f / (float)this.solarShields)).ToRotationVector2() * 6f;
					value.X = (float)(this.direction * 20);
					if (this.mount.Active && this.mount.Type == 52)
					{
						value.X = (float)(this.direction * 50);
					}
					this.solarShieldVel[num17] = (value - this.solarShieldPos[num17]) * 0.2f;
				}
				if (this.dashDelay >= 0)
				{
					this.solarDashing = false;
					this.solarDashConsumedFlare = false;
				}
				bool flag2 = this.solarDashing && this.dashDelay < 0;
				if (this.solarShields > 0 || flag2)
				{
					this.dashType = 3;
				}
			}
			else
			{
				this.solarCounter = 0;
			}
			if (this.head == 169 && this.body == 175 && this.legs == 110)
			{
				this.setVortex = true;
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Vortex", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
			}
			else
			{
				this.vortexStealthActive = false;
			}
			if (this.head == 170 && this.body == 176 && this.legs == 111)
			{
				if (this.nebulaCD > 0)
				{
					this.nebulaCD--;
				}
				this.setNebula = true;
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Nebula");
			}
			if (this.head == 189 && this.body == 190 && this.legs == 130)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Stardust", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
				this.setStardust = true;
				if (this.whoAmI == Main.myPlayer)
				{
					if (this.FindBuffIndex(187) == -1)
					{
						this.AddBuff(187, 3600, true, false);
					}
					if (this.ownedProjectileCounts[623] < 1)
					{
						int num18 = 10;
						int num19 = 30;
						int num20 = Projectile.NewProjectile(this.GetProjectileSource_SetBonus(7), base.Center.X, base.Center.Y, 0f, -1f, 623, num19, (float)num18, Main.myPlayer, 0f, 0f, 0f);
						Main.projectile[num20].originalDamage = num19;
					}
				}
			}
			else if (this.FindBuffIndex(187) != -1)
			{
				this.DelBuff(this.FindBuffIndex(187));
			}
			if (this.head == 200 && this.body == 198 && this.legs == 142)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.Forbidden", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
				this.setForbidden = true;
				this.UpdateForbiddenSetLock();
				Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.2f);
			}
			if (this.head == 204 && this.body == 201 && this.legs == 145)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier2");
				this.setSquireT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 203 && this.body == 200 && this.legs == 144)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier2");
				this.setApprenticeT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 205 && this.body == 202 && (this.legs == 147 || this.legs == 146))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier2");
				this.setHuntressT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 206 && this.body == 203 && this.legs == 148)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier2");
				this.setMonkT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 210 && this.body == 204 && this.legs == 152)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier3");
				this.setSquireT3 = true;
				this.setSquireT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 211 && this.body == 205 && this.legs == 153)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier3");
				this.setApprenticeT3 = true;
				this.setApprenticeT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 212 && this.body == 206 && (this.legs == 154 || this.legs == 155))
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier3");
				this.setHuntressT3 = true;
				this.setHuntressT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 213 && this.body == 207 && this.legs == 156)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier3");
				this.setMonkT3 = true;
				this.setMonkT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 185 && this.body == 187 && this.legs == 127)
			{
				this.setBonus = Language.GetTextValue("ArmorSetBonus.ObsidianOutlaw");
				this.minionDamage += 0.15f;
				this.whipRangeMultiplier += 0.3f;
				float num21 = 1.15f;
				float num22 = 1f / num21;
				this.whipUseTimeMultiplier *= num22;
			}
			this.ApplyArmorSoundAndDustChanges();
		}

		// Token: 0x06000773 RID: 1907 RVA: 0x002DB164 File Offset: 0x002D9364
		public void UpdateSocialShadow()
		{
			for (int i = 2; i > 0; i--)
			{
				this.shadowDirection[i] = this.shadowDirection[i - 1];
			}
			this.shadowDirection[0] = this.direction;
			this.shadowCount++;
			if (this.shadowCount == 1)
			{
				this.shadowPos[2] = this.shadowPos[1];
				this.shadowRotation[2] = this.shadowRotation[1];
				this.shadowOrigin[2] = this.shadowOrigin[1];
				return;
			}
			if (this.shadowCount == 2)
			{
				this.shadowPos[1] = this.shadowPos[0];
				this.shadowRotation[1] = this.shadowRotation[0];
				this.shadowOrigin[1] = this.shadowOrigin[0];
				return;
			}
			if (this.shadowCount >= 3)
			{
				this.shadowCount = 0;
				this.shadowPos[0] = this.position;
				Vector2[] array = this.shadowPos;
				int num = 0;
				array[num].Y = array[num].Y + this.gfxOffY;
				this.shadowRotation[0] = this.fullRotation;
				this.shadowOrigin[0] = this.fullRotationOrigin;
			}
		}

		// Token: 0x06000774 RID: 1908 RVA: 0x002DB29C File Offset: 0x002D949C
		public void UpdateTeleportVisuals()
		{
			if (this.teleportTime > 0f)
			{
				if (this.teleportStyle == 0)
				{
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime * 2f)
					{
						int num = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 159, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num].scale = this.teleportTime * 1.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 1.1f;
					}
				}
				else if (this.teleportStyle == 1)
				{
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						int num2 = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 164, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num2].scale = this.teleportTime * 1.5f;
						Main.dust[num2].noGravity = true;
						Main.dust[num2].velocity *= 1.1f;
					}
				}
				else if (this.teleportStyle == 2)
				{
					this.teleportTime = 0.005f;
				}
				else if (this.teleportStyle == 3)
				{
					this.teleportTime = 0.005f;
				}
				else if (this.teleportStyle == 4)
				{
					this.teleportTime -= 0.02f;
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263, 0f, 0f, 0, default(Color), 1f)];
						dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
						dust.noLight = true;
						dust.noGravity = true;
						dust.scale = 1.2f;
						dust.fadeIn = 0.4f;
					}
				}
				else if (this.teleportStyle == 9)
				{
					Rectangle hitbox = base.Hitbox;
					hitbox.Inflate(5, 5);
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						TeleportPylonsSystem.SpawnInWorldDust(this.lastTeleportPylonStyleUsed, hitbox);
					}
				}
				this.teleportTime -= 0.005f;
			}
		}

		// Token: 0x06000775 RID: 1909 RVA: 0x002DB580 File Offset: 0x002D9780
		private void UpdateGraveyard(bool now = false)
		{
			float lerpValue = Utils.GetLerpValue((float)SceneMetrics.GraveyardTileMin, (float)SceneMetrics.GraveyardTileMax, (float)Main.SceneMetrics.GraveyardTileCount, true);
			if (now)
			{
				this.graveImmediateTime = 30;
			}
			if (this.graveImmediateTime > 0)
			{
				this.graveImmediateTime--;
				Main.GraveyardVisualIntensity = lerpValue;
				return;
			}
			if (Main.GraveyardVisualIntensity < lerpValue)
			{
				Main.GraveyardVisualIntensity += 0.02f;
				if (Main.GraveyardVisualIntensity > lerpValue)
				{
					Main.GraveyardVisualIntensity = lerpValue;
					return;
				}
			}
			else if (Main.GraveyardVisualIntensity > lerpValue)
			{
				Main.GraveyardVisualIntensity -= 0.01f;
				if (Main.GraveyardVisualIntensity < lerpValue)
				{
					Main.GraveyardVisualIntensity = lerpValue;
				}
			}
		}

		// Token: 0x06000776 RID: 1910 RVA: 0x002DB624 File Offset: 0x002D9824
		public void ForceUpdateBiomes()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			int num;
			int num2;
			int num3;
			int num4;
			Main.GetAreaToLight(out num, out num2, out num3, out num4);
			Rectangle value = new Rectangle(num, num3, num2 - num, num4 - num3);
			int num5 = 28;
			value.Inflate(num5, num5);
			Main.SceneMetrics.ScanAndExportToMain(new SceneMetricsScanSettings
			{
				VisualScanArea = new Rectangle?(value),
				BiomeScanCenterPositionInWorld = new Vector2?(base.Center),
				ScanOreFinderData = this.accOreFinder
			});
			this.UpdateBiomes();
		}

		// Token: 0x06000777 RID: 1911 RVA: 0x002DB6B4 File Offset: 0x002D98B4
		public bool CanSeeShimmerEffects()
		{
			return Main.SceneMetrics.ShimmerMonolithState != 2 && (this.ZoneShimmer || (this.shimmerMonolithShader || Main.SceneMetrics.ShimmerMonolithState == 1) || ((double)(Main.screenPosition.Y / 16f) > Main.worldSurface + 50.0 && Main.screenPosition.Y / 16f < (float)(Main.maxTilesY - 330 - 100) && this.shimmering));
		}

		// Token: 0x06000778 RID: 1912 RVA: 0x002DB744 File Offset: 0x002D9944
		public void UpdateBiomes()
		{
			Point point = base.Center.ToTileCoordinates();
			this.ZoneDungeon = false;
			if (Main.SceneMetrics.DungeonTileCount >= 250 && (double)base.Center.Y > Main.worldSurface * 16.0)
			{
				int num = (int)base.Center.X / 16;
				int num2 = (int)base.Center.Y / 16;
				if (Main.tile[num, num2] != null && Main.wallDungeon[(int)Main.tile[num, num2].wall])
				{
					this.ZoneDungeon = true;
				}
			}
			this.ZoneLihzhardTemple = false;
			int num3 = (int)base.Center.X / 16;
			int num4 = (int)base.Center.Y / 16;
			if (Main.tile[num3, num4] != null && Main.tile[num3, num4].wall == 87)
			{
				this.ZoneLihzhardTemple = true;
			}
			Tile tileSafely = Framing.GetTileSafely(base.Center);
			if (tileSafely != null)
			{
				this.behindBackWall = (tileSafely.wall > 0);
			}
			if (this.behindBackWall && this.ZoneDesert && (double)base.Center.Y > Main.worldSurface)
			{
				if (WallID.Sets.Conversion.Sandstone[(int)tileSafely.wall] || WallID.Sets.Conversion.HardenedSand[(int)tileSafely.wall])
				{
					this.ZoneUndergroundDesert = true;
				}
			}
			else
			{
				this.ZoneUndergroundDesert = false;
			}
			if (this.behindBackWall && (tileSafely.wall == 184 || tileSafely.wall == 180))
			{
				this.ZoneGranite = true;
			}
			else
			{
				this.ZoneGranite = false;
			}
			if (this.behindBackWall && (tileSafely.wall == 183 || tileSafely.wall == 178))
			{
				this.ZoneMarble = true;
			}
			else
			{
				this.ZoneMarble = false;
			}
			if (this.behindBackWall && (tileSafely.wall == 108 || tileSafely.wall == 86))
			{
				this.ZoneHive = true;
			}
			else
			{
				this.ZoneHive = false;
			}
			if (this.behindBackWall && tileSafely.wall >= 48 && tileSafely.wall <= 53)
			{
				this.ZoneGemCave = true;
			}
			else
			{
				this.ZoneGemCave = false;
			}
			bool flag = (double)(Main.screenPosition.Y / 16f) > Main.worldSurface + 50.0 && Main.screenPosition.Y / 16f < (float)(Main.maxTilesY - 330 - 100);
			this.ZoneShimmer = (Main.SceneMetrics.EnoughTilesForShimmer && flag);
			this.ZoneCorrupt = Main.SceneMetrics.EnoughTilesForCorruption;
			this.ZoneCrimson = Main.SceneMetrics.EnoughTilesForCrimson;
			this.ZoneHallow = Main.SceneMetrics.EnoughTilesForHallow;
			this.ZoneJungle = (Main.SceneMetrics.EnoughTilesForJungle && this.position.Y / 16f < (float)Main.UnderworldLayer);
			this.ZoneSnow = Main.SceneMetrics.EnoughTilesForSnow;
			this.ZoneDesert = Main.SceneMetrics.EnoughTilesForDesert;
			this.ZoneGlowshroom = Main.SceneMetrics.EnoughTilesForGlowingMushroom;
			this.ZoneMeteor = Main.SceneMetrics.EnoughTilesForMeteor;
			this.ZoneWaterCandle = (Main.SceneMetrics.WaterCandleCount > 0);
			this.ZonePeaceCandle = (Main.SceneMetrics.PeaceCandleCount > 0);
			this.ZoneShadowCandle = (Main.SceneMetrics.ShadowCandleCount > 0);
			this.ZoneGraveyard = Main.SceneMetrics.EnoughTilesForGraveyard;
			this.UpdateGraveyard(false);
			if (this.HasGardenGnomeNearby != Main.SceneMetrics.HasGardenGnome)
			{
				this.luckNeedsSync = true;
				this.HasGardenGnomeNearby = Main.SceneMetrics.HasGardenGnome;
			}
			this.ZoneUnderworldHeight = (point.Y > Main.UnderworldLayer);
			this.ZoneRockLayerHeight = (point.Y <= Main.UnderworldLayer && (double)point.Y > Main.rockLayer);
			this.ZoneDirtLayerHeight = ((double)point.Y <= Main.rockLayer && (double)point.Y > Main.worldSurface);
			this.ZoneOverworldHeight = ((double)point.Y <= Main.worldSurface && (double)point.Y > Main.worldSurface * 0.3499999940395355);
			this.ZoneSkyHeight = ((double)point.Y <= Main.worldSurface * 0.3499999940395355);
			this.ZoneBeach = WorldGen.oceanDepths(point.X, point.Y);
			this.ZoneRain = (Main.raining && (double)point.Y <= Main.worldSurface);
			if (Main.remixWorld)
			{
				this.ZoneSandstorm = ((double)point.Y >= Main.rockLayer && this.ZoneDesert && !this.ZoneBeach && Sandstorm.Happening);
			}
			else
			{
				this.ZoneSandstorm = ((double)point.Y <= Main.worldSurface && this.ZoneDesert && !this.ZoneBeach && Sandstorm.Happening);
			}
			this.ZoneTowerSolar = (this.ZoneTowerVortex = (this.ZoneTowerNebula = (this.ZoneTowerStardust = false)));
			this.ZoneOldOneArmy = false;
			Vector2 value = Vector2.Zero;
			Vector2 value2 = Vector2.Zero;
			Vector2 value3 = Vector2.Zero;
			Vector2 value4 = Vector2.Zero;
			Vector2 zero = Vector2.Zero;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 493)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerStardust = true;
							value4 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 507)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerNebula = true;
							value3 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 422)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerVortex = true;
							value2 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 517)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerSolar = true;
							value = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 549 && base.Distance(Main.npc[i].Center) <= 4000f)
					{
						this.ZoneOldOneArmy = true;
						value = Main.npc[i].Center;
					}
				}
			}
			float num5 = 1f;
			float num6 = 1f;
			float num7 = Main.shimmerAlpha;
			if (this.CanSeeShimmerEffects())
			{
				num5 *= 1f;
				num6 *= 0.7f;
				if (num7 < 1f)
				{
					num7 += 0.025f;
					if (num7 > 1f)
					{
						num7 = 1f;
					}
				}
				if (num7 >= 0.5f)
				{
					Main.shimmerDarken = MathHelper.Clamp(Main.shimmerDarken + 0.025f, 0f, 1f);
					Main.shimmerBrightenDelay = 4f;
				}
			}
			else if (num7 > 0f)
			{
				Main.shimmerDarken = MathHelper.Clamp(Main.shimmerDarken - 0.05f, 0f, 1f);
				if (Main.shimmerDarken == 0f && Main.shimmerBrightenDelay > 0f)
				{
					Main.shimmerBrightenDelay -= 1f;
				}
				if (Main.shimmerBrightenDelay == 0f)
				{
					num7 -= 0.05f;
				}
				if (num7 < 0f)
				{
					num7 = 0f;
				}
			}
			Main.shimmerAlpha = num7;
			if (Main.getGoodWorld)
			{
				bool flag2 = false;
				int num8 = NPC.FindFirstNPC(245);
				if (num8 >= 0 && Vector2.Distance(base.Center, Main.npc[num8].Center) < 2000f)
				{
					flag2 = true;
				}
				if (flag2)
				{
					num5 *= 0.6f;
					num6 *= 0.6f;
				}
				else if (this.ZoneLihzhardTemple)
				{
					num5 *= 0.88f;
					num6 *= 0.88f;
				}
				else if (this.ZoneDungeon)
				{
					num5 *= 0.94f;
					num6 *= 0.94f;
				}
			}
			if (num5 != Player.airLightDecay)
			{
				if (Player.airLightDecay >= num5)
				{
					Player.airLightDecay -= 0.005f;
					if (Player.airLightDecay < num5)
					{
						Player.airLightDecay = num5;
					}
				}
				else
				{
					Player.airLightDecay += 0.005f;
					if (Player.airLightDecay > num5)
					{
						Player.airLightDecay = num5;
					}
				}
			}
			if (num6 != Player.solidLightDecay)
			{
				if (Player.solidLightDecay >= num6)
				{
					Player.solidLightDecay -= 0.005f;
					if (Player.solidLightDecay < num6)
					{
						Player.solidLightDecay = num6;
					}
				}
				else
				{
					Player.solidLightDecay += 0.005f;
					if (Player.solidLightDecay > num6)
					{
						Player.solidLightDecay = num6;
					}
				}
			}
			bool flag3 = this.ZoneRain && this.ZoneSnow;
			if (Main.remixWorld)
			{
				flag3 = ((double)(this.position.Y / 16f) > Main.worldSurface && Main.raining && this.ZoneSnow);
			}
			bool flag4 = point.Y > Main.maxTilesY - 320;
			bool flag5 = this.ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380);
			this.ManageSpecialBiomeVisuals("Stardust", this.ZoneTowerStardust, value4 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Nebula", this.ZoneTowerNebula, value3 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Vortex", this.ZoneTowerVortex, value2 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Solar", this.ZoneTowerSolar, value - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("MoonLord", NPC.AnyNPCs(398), default(Vector2));
			this.ManageSpecialBiomeVisuals("BloodMoon", Main.bloodMoon || Main.SceneMetrics.BloodMoonMonolith || this.bloodMoonMonolithShader, default(Vector2));
			this.ManageSpecialBiomeVisuals("Blizzard", Main.UseStormEffects && flag3, default(Vector2));
			this.ManageSpecialBiomeVisuals("HeatDistortion", Main.UseHeatDistortion && (flag4 || ((double)point.Y < Main.worldSurface && this.ZoneDesert && !flag5 && !Main.raining && !Filters.Scene["Sandstorm"].IsActive())), default(Vector2));
			if (Main.GraveyardVisualIntensity > 0f)
			{
				if (!Filters.Scene["Graveyard"].IsActive())
				{
					Filters.Scene.Activate("Graveyard", default(Vector2), new object[0]);
				}
				else
				{
					Filters.Scene["Graveyard"].GetShader().UseTargetPosition(base.Center);
					float progress = MathHelper.Lerp(0f, 0.75f, Main.GraveyardVisualIntensity);
					Filters.Scene["Graveyard"].GetShader().UseProgress(progress);
					Filters.Scene["Graveyard"].GetShader().UseIntensity(1.2f);
				}
			}
			else if (Filters.Scene["Graveyard"].IsActive())
			{
				Filters.Scene.Deactivate("Graveyard", new object[0]);
			}
			if (!Filters.Scene["Sepia"].IsActive() && this.dontStarveShader)
			{
				Filters.Scene.Activate("Sepia", default(Vector2), new object[0]);
			}
			else if (Filters.Scene["Sepia"].IsActive() && !this.dontStarveShader)
			{
				Filters.Scene.Deactivate("Sepia", new object[0]);
			}
			if (!Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality > 0)
			{
				Filters.Scene.Activate("WaterDistortion", default(Vector2), new object[0]);
			}
			else if (Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality == 0)
			{
				Filters.Scene.Deactivate("WaterDistortion", new object[0]);
			}
			if (Filters.Scene["WaterDistortion"].IsActive())
			{
				float num9 = (float)Main.maxTilesX * 0.5f - Math.Abs((float)point.X - (float)Main.maxTilesX * 0.5f);
				float num10 = 1f;
				float num11 = Math.Abs(Main.windSpeedCurrent);
				num10 += num11 * 1.25f;
				float num12 = MathHelper.Clamp(Main.maxRaining, 0f, 1f);
				num10 += num12 * 1.25f;
				float num13 = -(MathHelper.Clamp((num9 - 380f) / 100f, 0f, 1f) * 0.5f - 0.25f);
				num10 += num13;
				float num14 = 1f - MathHelper.Clamp(3f * ((float)((double)point.Y - Main.worldSurface) / (float)(Main.rockLayer - Main.worldSurface)), 0f, 1f);
				num10 *= num14;
				float num15 = 0.9f - MathHelper.Clamp((float)(Main.maxTilesY - point.Y - 200) / 300f, 0f, 1f) * 0.9f;
				num10 += num15;
				num10 += (1f - num14) * 0.75f;
				num10 = MathHelper.Clamp(num10, 0f, 2.5f);
				Filters.Scene["WaterDistortion"].GetShader().UseIntensity(num10);
			}
			if (flag4)
			{
				float num16 = (float)(point.Y - (Main.maxTilesY - 320)) / 120f;
				num16 = Math.Min(1f, num16) * 2f;
				Filters.Scene["HeatDistortion"].GetShader().UseIntensity(num16);
			}
			this._shaderObstructionInternalValue = Utils.Clamp<float>(this._shaderObstructionInternalValue + (float)this.behindBackWall.ToDirectionInt() * -0.005f, -0.1f, 1.1f);
			this._stormShaderObstruction = Utils.Clamp<float>(this._shaderObstructionInternalValue, 0f, 1f);
			if (Filters.Scene["Sandstorm"].IsActive())
			{
				Filters.Scene["Sandstorm"].GetShader().UseIntensity(this._stormShaderObstruction * 0.4f * Math.Min(1f, Sandstorm.Severity));
				Filters.Scene["Sandstorm"].GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * this._stormShaderObstruction);
				((SimpleOverlay)Overlays.Scene["Sandstorm"]).GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * (1f - this._stormShaderObstruction));
			}
			else if (this.ZoneDesert && !flag5 && !Main.raining && !flag4)
			{
				Vector3 vector = Main.tileColor.ToVector3();
				float num17 = (vector.X + vector.Y + vector.Z) / 3f;
				float num18 = this._stormShaderObstruction * 4f * Math.Max(0f, 0.5f - Main.cloudAlpha) * num17;
				Filters.Scene["HeatDistortion"].GetShader().UseIntensity(num18);
				if (num18 <= 0f)
				{
					Filters.Scene["HeatDistortion"].IsHidden = true;
				}
				else
				{
					Filters.Scene["HeatDistortion"].IsHidden = false;
				}
			}
			if (!Player.disabledBlizzardGraphic)
			{
				try
				{
					if (flag3)
					{
						float cloudAlpha = Main.cloudAlpha;
						if (Main.remixWorld)
						{
							Main.cloudAlpha = 0.4f;
						}
						bool value5 = NPC.IsADeerclopsNearScreen();
						this._deerclopsBlizzardSmoothedEffect = MathHelper.Clamp(this._deerclopsBlizzardSmoothedEffect + (float)value5.ToDirectionInt() * 0.0033333334f, 0f, 1f);
						float num19 = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
						float num20 = this._stormShaderObstruction * 0.4f * Math.Min(1f, Main.cloudAlpha * 2f) * 0.9f + 0.1f;
						num20 = MathHelper.Lerp(num20, num20 * 0.5f, this._deerclopsBlizzardSmoothedEffect);
						num19 = MathHelper.Lerp(num19, num19 * 0.5f, this._deerclopsBlizzardSmoothedEffect);
						Filters.Scene["Blizzard"].GetShader().UseIntensity(num20);
						Filters.Scene["Blizzard"].GetShader().UseOpacity(num19);
						((SimpleOverlay)Overlays.Scene["Blizzard"]).GetShader().UseOpacity(1f - num19);
						if (Main.remixWorld)
						{
							Main.cloudAlpha = cloudAlpha;
						}
					}
				}
				catch
				{
					Player.disabledBlizzardGraphic = true;
				}
			}
			if (!Player.disabledBlizzardSound)
			{
				try
				{
					if (flag3)
					{
						bool activeSound = SoundEngine.GetActiveSound(Player._strongBlizzardSound) != null;
						ActiveSound activeSound2 = SoundEngine.GetActiveSound(Player._insideBlizzardSound);
						if (!activeSound)
						{
							Player._strongBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardStrongLoop);
						}
						if (activeSound2 == null)
						{
							Player._insideBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
						}
						SoundEngine.GetActiveSound(Player._strongBlizzardSound);
						activeSound2 = SoundEngine.GetActiveSound(Player._insideBlizzardSound);
					}
					if (flag3)
					{
						Player._blizzardSoundVolume = Math.Min(Player._blizzardSoundVolume + 0.01f, 1f);
					}
					else
					{
						Player._blizzardSoundVolume = Math.Max(Player._blizzardSoundVolume - 0.01f, 0f);
					}
					float num21 = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
					ActiveSound activeSound3 = SoundEngine.GetActiveSound(Player._strongBlizzardSound);
					ActiveSound activeSound4 = SoundEngine.GetActiveSound(Player._insideBlizzardSound);
					if (Player._blizzardSoundVolume > 0f)
					{
						if (activeSound3 == null)
						{
							Player._strongBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardStrongLoop);
							activeSound3 = SoundEngine.GetActiveSound(Player._strongBlizzardSound);
						}
						activeSound3.Volume = num21 * Player._blizzardSoundVolume;
						if (activeSound4 == null)
						{
							Player._insideBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
							activeSound4 = SoundEngine.GetActiveSound(Player._insideBlizzardSound);
						}
						activeSound4.Volume = (1f - num21) * Player._blizzardSoundVolume;
					}
					else
					{
						if (activeSound3 != null)
						{
							activeSound3.Volume = 0f;
						}
						else
						{
							Player._strongBlizzardSound = SlotId.Invalid;
						}
						if (activeSound4 != null)
						{
							activeSound4.Volume = 0f;
						}
						else
						{
							Player._insideBlizzardSound = SlotId.Invalid;
						}
					}
				}
				catch
				{
					Player.disabledBlizzardSound = true;
				}
			}
			if (!this.dead)
			{
				Point point2 = base.Center.ToTileCoordinates();
				if (WorldGen.InWorld(point2.X, point2.Y, 1))
				{
					int num22 = 0;
					if (Main.tile[point2.X, point2.Y] != null)
					{
						num22 = (int)Main.tile[point2.X, point2.Y].wall;
					}
					if (num22 != 62)
					{
						if (num22 == 86)
						{
							AchievementsHelper.HandleSpecialEvent(this, 12);
						}
					}
					else
					{
						AchievementsHelper.HandleSpecialEvent(this, 13);
					}
				}
				if (this._funkytownAchievementCheckCooldown > 0)
				{
					this._funkytownAchievementCheckCooldown--;
				}
				if (Main.specialSeedWorld)
				{
					AchievementsHelper.HandleSpecialEvent(this, 26);
				}
				if (this.position.Y / 16f > (float)Main.UnderworldLayer)
				{
					AchievementsHelper.HandleSpecialEvent(this, 14);
					return;
				}
				if (this._funkytownAchievementCheckCooldown == 0 && (double)(this.position.Y / 16f) < Main.worldSurface && this.ZoneGlowshroom)
				{
					AchievementsHelper.HandleSpecialEvent(this, 15);
					return;
				}
				if (this._funkytownAchievementCheckCooldown == 0 && this.ZoneGraveyard)
				{
					AchievementsHelper.HandleSpecialEvent(this, 18);
					return;
				}
			}
			else
			{
				this._funkytownAchievementCheckCooldown = 100;
			}
		}

		// Token: 0x06000779 RID: 1913 RVA: 0x002DCBC8 File Offset: 0x002DADC8
		private void TrySpawningFaelings()
		{
			if (!this._wasInShimmerZone && this.ZoneShimmer && Main.netMode != 1)
			{
				NPC.SpawnFaelings(this.whoAmI);
			}
			this._wasInShimmerZone = this.ZoneShimmer;
		}

		// Token: 0x0600077A RID: 1914 RVA: 0x002DCBFC File Offset: 0x002DADFC
		public void ManageSpecialBiomeVisuals(string biomeName, bool inZone, Vector2 activationSource = default(Vector2))
		{
			if (SkyManager.Instance[biomeName] != null && inZone != SkyManager.Instance[biomeName].IsActive())
			{
				if (inZone)
				{
					SkyManager.Instance.Activate(biomeName, activationSource, new object[0]);
				}
				else
				{
					SkyManager.Instance.Deactivate(biomeName, new object[0]);
				}
			}
			if (inZone != Filters.Scene[biomeName].IsActive())
			{
				if (inZone)
				{
					Filters.Scene.Activate(biomeName, activationSource, new object[0]);
				}
				else
				{
					Filters.Scene[biomeName].Deactivate(new object[0]);
				}
			}
			else if (inZone)
			{
				Filters.Scene[biomeName].GetShader().UseTargetPosition(activationSource);
			}
			if (Overlays.Scene[biomeName] != null && inZone != (Overlays.Scene[biomeName].Mode != OverlayMode.Inactive))
			{
				if (inZone)
				{
					Overlays.Scene.Activate(biomeName, activationSource, new object[0]);
					return;
				}
				Overlays.Scene[biomeName].Deactivate(new object[0]);
			}
		}

		// Token: 0x0600077B RID: 1915 RVA: 0x002DCD04 File Offset: 0x002DAF04
		public void GetHairSettings(out bool fullHair, out bool hatHair, out bool hideHair, out bool backHairDraw, out bool drawsBackHairWithoutHeadgear)
		{
			fullHair = (hatHair = (hideHair = (drawsBackHairWithoutHeadgear = false)));
			int num = this.head;
			if (num <= 121)
			{
				if (num <= 69)
				{
					if (num <= 29)
					{
						if (num != 0)
						{
							switch (num)
							{
							case 10:
							case 12:
							case 28:
								goto IL_3A8;
							case 11:
							case 17:
							case 19:
							case 20:
							case 22:
							case 23:
							case 27:
								goto IL_3B0;
							case 13:
							case 14:
							case 15:
							case 16:
							case 18:
							case 21:
							case 24:
							case 25:
							case 26:
							case 29:
								goto IL_3AD;
							default:
								goto IL_3B0;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 40:
						case 44:
							goto IL_3AD;
						case 41:
						case 43:
							goto IL_3B0;
						case 42:
							goto IL_3A8;
						default:
							switch (num)
							{
							case 51:
							case 56:
							case 59:
							case 60:
							case 63:
							case 64:
							case 65:
							case 67:
							case 68:
							case 69:
								goto IL_3AD;
							case 52:
							case 53:
							case 54:
							case 55:
							case 57:
							case 58:
							case 61:
							case 66:
								goto IL_3B0;
							case 62:
								goto IL_3A8;
							default:
								goto IL_3B0;
							}
							break;
						}
					}
				}
				else if (num <= 100)
				{
					if (num == 81)
					{
						goto IL_3AD;
					}
					switch (num)
					{
					case 92:
					case 94:
					case 95:
					case 100:
						goto IL_3AD;
					case 93:
					case 96:
					case 98:
					case 99:
						goto IL_3B0;
					case 97:
						goto IL_3A8;
					default:
						goto IL_3B0;
					}
				}
				else
				{
					if (num == 106)
					{
						goto IL_3A8;
					}
					switch (num)
					{
					case 113:
					case 116:
					case 119:
						goto IL_3A8;
					case 114:
					case 121:
						goto IL_3AD;
					case 115:
					case 117:
					case 118:
					case 120:
						goto IL_3B0;
					default:
						goto IL_3B0;
					}
				}
			}
			else if (num <= 145)
			{
				if (num <= 140)
				{
					if (num == 126)
					{
						goto IL_3AD;
					}
					switch (num)
					{
					case 130:
					case 136:
					case 140:
						goto IL_3AD;
					case 131:
					case 132:
					case 134:
					case 135:
					case 137:
						goto IL_3B0;
					case 133:
					case 138:
					case 139:
						goto IL_3A8;
					default:
						goto IL_3B0;
					}
				}
				else
				{
					if (num != 143 && num != 145)
					{
						goto IL_3B0;
					}
					goto IL_3AD;
				}
			}
			else if (num <= 184)
			{
				switch (num)
				{
				case 158:
				case 159:
				case 161:
					goto IL_3AD;
				case 160:
				case 162:
					goto IL_3B0;
				case 163:
					goto IL_3A8;
				default:
					switch (num)
					{
					case 178:
					case 181:
						goto IL_3A8;
					case 179:
					case 180:
					case 183:
						goto IL_3B0;
					case 182:
					case 184:
						goto IL_3AD;
					default:
						goto IL_3B0;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 190:
				case 195:
				case 215:
				case 216:
				case 219:
				case 223:
				case 226:
				case 227:
				case 231:
				case 233:
				case 234:
					goto IL_3AD;
				case 191:
				case 198:
				case 217:
				case 218:
				case 220:
				case 222:
				case 224:
				case 225:
				case 228:
				case 229:
				case 230:
				case 232:
				case 235:
				case 238:
				case 242:
				case 243:
				case 244:
				case 245:
					goto IL_3A8;
				case 192:
				case 193:
				case 194:
				case 196:
				case 197:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 209:
				case 210:
				case 211:
				case 212:
				case 213:
				case 214:
				case 221:
				case 236:
				case 237:
				case 239:
				case 240:
				case 241:
					goto IL_3B0;
				default:
					switch (num)
					{
					case 259:
						break;
					case 260:
					case 261:
					case 266:
					case 268:
					case 269:
					case 270:
					case 271:
					case 276:
					case 278:
						goto IL_3B0;
					case 262:
					case 263:
					case 264:
					case 265:
					case 267:
					case 275:
					case 279:
					case 280:
					case 281:
						goto IL_3AD;
					case 272:
					case 273:
					case 274:
					case 277:
						goto IL_3A8;
					default:
						goto IL_3B0;
					}
					break;
				}
			}
			drawsBackHairWithoutHeadgear = true;
			goto IL_3B0;
			IL_3A8:
			fullHair = true;
			goto IL_3B0;
			IL_3AD:
			hatHair = true;
			IL_3B0:
			if (this.face > -1 && ArmorIDs.Face.Sets.PreventHairDraw[(int)this.face])
			{
				hideHair = true;
			}
			if (this.faceHead > -1 && this.head != 0)
			{
				hideHair = true;
			}
			int num2 = this.hair;
			backHairDraw = (num2 > 50 && (num2 < 56 || num2 > 63) && (num2 < 74 || num2 > 77) && (num2 < 88 || num2 > 89) && num2 != 100 && num2 != 104 && num2 != 112 && num2 < 116);
			if (num2 == 133 || num2 == 134 || num2 == 146 || num2 == 162 || num2 == 6)
			{
				backHairDraw = true;
			}
		}

		// Token: 0x0600077C RID: 1916 RVA: 0x002DD15C File Offset: 0x002DB35C
		public void UpdateDead()
		{
			this.shimmerUnstuckHelper.Clear();
			this.timeShimmering = 0;
			this.forcedGravity = 0;
			this._portalPhysicsTime = 0;
			this.MountFishronSpecialCounter = 0f;
			this.gem = -1;
			this.ownedLargeGems = 0;
			this.brainOfConfusionDodgeAnimationCounter = 0;
			this.ResetFloorFlags();
			this.wings = 0;
			this.wingsLogic = 0;
			this.ResetVisibleAccessories();
			this.poisoned = false;
			this.venom = false;
			this.onFire = false;
			this.dripping = false;
			this.drippingSlime = false;
			this.drippingSparkleSlime = false;
			this.hungry = false;
			this.heartyMeal = false;
			this.starving = false;
			this.burned = false;
			this.suffocating = false;
			this.onFire2 = false;
			this.onFire3 = false;
			this.onFrostBurn = false;
			this.onFrostBurn2 = false;
			this.shimmering = false;
			this.blind = false;
			this.blackout = false;
			this.loveStruck = false;
			this.dryadWard = false;
			this.stinky = false;
			this.resistCold = false;
			this.electrified = false;
			this.moonLeech = false;
			this.headcovered = false;
			this.vortexDebuff = false;
			this.windPushed = false;
			this.setForbidden = false;
			this.setMonkT3 = false;
			this.setHuntressT3 = false;
			this.setApprenticeT3 = false;
			this.setSquireT3 = false;
			this.setForbiddenCooldownLocked = false;
			this.setSolar = (this.setVortex = (this.setNebula = (this.setStardust = false)));
			this.nebulaLevelDamage = (this.nebulaLevelLife = (this.nebulaLevelMana = 0));
			this.trapDebuffSource = false;
			this.yoraiz0rEye = 0;
			this.yoraiz0rDarkness = false;
			this.hasFloatingTube = false;
			this.hasUnicornHorn = false;
			this.hasAngelHalo = false;
			this.hasRainbowCursor = false;
			this.leinforsHair = false;
			this.overrideFishingBobber = -1;
			this.gravDir = 1f;
			for (int i = 0; i < Player.maxBuffs; i++)
			{
				if (this.buffType[i] <= 0 || !Main.persistentBuff[this.buffType[i]])
				{
					this.buffTime[i] = 0;
					this.buffType[i] = 0;
				}
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Main.npcChatText = "";
				Main.editSign = false;
				Main.npcChatCornerItem = 0;
			}
			this.numMinions = 0;
			this.grappling[0] = -1;
			this.grappling[1] = -1;
			this.grappling[2] = -1;
			this.sign = -1;
			this.SetTalkNPC(-1, false);
			this.statLife = 0;
			this.channel = false;
			this.potionDelay = 0;
			this.chest = -1;
			this.tileEntityAnchor.Clear();
			this.changeItem = -1;
			this.itemAnimation = 0;
			this.immuneAlpha += 2;
			if (this.immuneAlpha > 255)
			{
				this.immuneAlpha = 255;
			}
			this.headPosition += this.headVelocity;
			this.bodyPosition += this.bodyVelocity;
			this.legPosition += this.legVelocity;
			this.headRotation += this.headVelocity.X * 0.1f;
			this.bodyRotation += this.bodyVelocity.X * 0.1f;
			this.legRotation += this.legVelocity.X * 0.1f;
			this.headVelocity.Y = this.headVelocity.Y + 0.1f;
			this.bodyVelocity.Y = this.bodyVelocity.Y + 0.1f;
			this.legVelocity.Y = this.legVelocity.Y + 0.1f;
			this.headVelocity.X = this.headVelocity.X * 0.99f;
			this.bodyVelocity.X = this.bodyVelocity.X * 0.99f;
			this.legVelocity.X = this.legVelocity.X * 0.99f;
			for (int j = 0; j < this.npcTypeNoAggro.Length; j++)
			{
				this.npcTypeNoAggro[j] = false;
			}
			if (this.difficulty == 2)
			{
				if (this.respawnTimer > 0)
				{
					this.respawnTimer = Utils.Clamp<int>(this.respawnTimer - 1, 0, 3600);
				}
				else if (this.whoAmI == Main.myPlayer || Main.netMode == 2)
				{
					this.ghost = true;
				}
			}
			else
			{
				this.respawnTimer = Utils.Clamp<int>(this.respawnTimer - 1, 0, 3600);
				if (this.respawnTimer <= 0 && Main.myPlayer == this.whoAmI)
				{
					if (Main.mouseItem.type > 0)
					{
						Main.playerInventory = true;
					}
					this.Spawn(PlayerSpawnContext.ReviveFromDeath);
				}
			}
			if (this.whoAmI == Main.myPlayer && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
			{
				PlayerInput.Triggers.Current.CopyInto(this);
				this.TryOpeningInGameOptionsBasedOnInput();
			}
		}

		// Token: 0x0600077D RID: 1917 RVA: 0x002DD626 File Offset: 0x002DB826
		private void TryOpeningInGameOptionsBasedOnInput()
		{
			if (this.controlInv)
			{
				if (this.releaseInventory)
				{
					this.releaseInventory = false;
					if (Main.ingameOptionsWindow)
					{
						IngameOptions.Close();
						return;
					}
					IngameOptions.Open();
					return;
				}
			}
			else
			{
				this.releaseInventory = true;
			}
		}

		// Token: 0x0600077E RID: 1918 RVA: 0x002DD65C File Offset: 0x002DB85C
		public void UpdatePet(int i)
		{
			if (i != Main.myPlayer)
			{
				return;
			}
			if (this.miscEquips[0].buffType < 1 || this.miscEquips[0].stack < 1)
			{
				return;
			}
			int num = this.miscEquips[0].buffType;
			if (!Main.vanityPet[num] && !Main.lightPet[num])
			{
				return;
			}
			if (this.hideMisc[0])
			{
				return;
			}
			if (this.miscEquips[0].type == 603 && !Main.runningCollectorsEdition)
			{
				return;
			}
			if (this.FindBuffIndex(num) == -1)
			{
				this.AddBuff(num, 3600, true, false);
				SoundEngine.PlaySound(this.miscEquips[0].UseSound, this.position);
			}
		}

		// Token: 0x0600077F RID: 1919 RVA: 0x002DD710 File Offset: 0x002DB910
		public void UpdatePetLight(int i)
		{
			if (i != Main.myPlayer)
			{
				return;
			}
			if (this.miscEquips[1].buffType < 1 || this.miscEquips[1].stack < 1)
			{
				return;
			}
			int num = this.miscEquips[1].buffType;
			if (!Main.vanityPet[num] && !Main.lightPet[num])
			{
				return;
			}
			if (this.hideMisc[1])
			{
				return;
			}
			if (this.miscEquips[1].type == 603 && !Main.runningCollectorsEdition)
			{
				return;
			}
			int num2 = this.FindBuffIndex(num);
			if (num == 27 && num2 == -1)
			{
				num2 = this.FindBuffIndex(102);
			}
			if (num == 27 && num2 == -1)
			{
				num2 = this.FindBuffIndex(101);
			}
			if (num2 == -1)
			{
				if (num == 27)
				{
					num = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						27,
						102,
						101
					});
				}
				this.AddBuff(num, 3600, true, false);
				SoundEngine.PlaySound(this.miscEquips[1].UseSound, this.position);
			}
		}

		// Token: 0x06000780 RID: 1920 RVA: 0x002DD80B File Offset: 0x002DBA0B
		public void TogglePet()
		{
			this.hideMisc[0] = !this.hideMisc[0];
			if (this.hideMisc[0])
			{
				this.ClearBuff(this.miscEquips[0].buffType);
			}
		}

		// Token: 0x06000781 RID: 1921 RVA: 0x002DD84C File Offset: 0x002DBA4C
		public void ToggleLight()
		{
			this.hideMisc[1] = !this.hideMisc[1];
			if (this.hideMisc[1])
			{
				this.ClearBuff(this.miscEquips[1].buffType);
				if (this.miscEquips[1].buffType == 27)
				{
					this.ClearBuff(102);
					this.ClearBuff(101);
				}
			}
		}

		// Token: 0x06000782 RID: 1922 RVA: 0x002DD8B8 File Offset: 0x002DBAB8
		public bool IsWithinSnappngRangeToTile(int x, int y, int distanceInPixels)
		{
			return (new Vector2((float)(x * 16 + 8), (float)(y * 16 + 8)) - new Vector2(base.Center.X, base.Bottom.Y - 16f)).Length() <= (float)distanceInPixels;
		}

		// Token: 0x06000783 RID: 1923 RVA: 0x002DD910 File Offset: 0x002DBB10
		public void SmartInteractLookup()
		{
			Main.ClearSmartInteract();
			if (UILinkPointNavigator.InUse || (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC))
			{
				Main.SmartInteractTileCoordsSelected.Clear();
			}
			bool showGamepadHints = PlayerInput.SettingsForUI.ShowGamepadHints;
			bool flag = showGamepadHints || Main.SmartCursorIsUsed;
			if (!flag && !showGamepadHints)
			{
				Player._smartInteractSys.Clear();
				return;
			}
			Vector2 mousevec;
			int lx;
			int hx;
			int ly;
			int hy;
			this.SmartInteractLookup_PrepareCommonlyUsedInfo(out mousevec, out lx, out hx, out ly, out hy);
			Player._smartInteractSys.RunQuery(new SmartInteractScanSettings
			{
				DemandOnlyZeroDistanceTargets = (PlayerInput.SettingsForUI.ShowGamepadHints && !Main.SmartCursorIsUsed),
				FullInteraction = flag,
				HX = hx,
				HY = hy,
				LX = lx,
				LY = ly,
				mousevec = mousevec,
				player = this
			});
		}

		// Token: 0x06000784 RID: 1924 RVA: 0x002DD9DC File Offset: 0x002DBBDC
		private void SmartInteractLookup_PrepareCommonlyUsedInfo(out Vector2 mousevec, out int LX, out int HX, out int LY, out int HY)
		{
			mousevec = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
			int num = 0;
			LX = (int)(this.position.X / 16f) - Player.tileRangeX - num + 1;
			HX = (int)((this.position.X + (float)this.width) / 16f) + Player.tileRangeX + num - 1;
			LY = (int)(this.position.Y / 16f) - Player.tileRangeY - num + 1;
			HY = (int)((this.position.Y + (float)this.height) / 16f) + Player.tileRangeY + num - 2;
			LX = Utils.Clamp<int>(LX, 10, Main.maxTilesX - 10);
			HX = Utils.Clamp<int>(HX, 10, Main.maxTilesX - 10);
			LY = Utils.Clamp<int>(LY, 10, Main.maxTilesY - 10);
			HY = Utils.Clamp<int>(HY, 10, Main.maxTilesY - 10);
		}

		// Token: 0x06000785 RID: 1925 RVA: 0x002DDAE4 File Offset: 0x002DBCE4
		public void SmartSelectLookup()
		{
			if (this.mouseInterface)
			{
				this.controlTorch = false;
			}
			if (this.controlTorch && this.itemAnimation == 0)
			{
				int tX;
				int tY;
				PlayerInput.smartSelectPointer.SmartSelectLookup_GetTargetTile(this, out tX, out tY);
				int num;
				bool wetTile;
				this.SmartSelect_GetToolStrategy(tX, tY, out num, out wetTile);
				if (PlayerInput.UsingGamepad && this._lastSmartCursorToolStrategy != -1)
				{
					num = this._lastSmartCursorToolStrategy;
				}
				if (num == 0 || num == 4)
				{
					float num2 = Math.Abs((float)Main.mouseX + Main.screenPosition.X - (this.position.X + (float)(this.width / 2)));
					float num3 = Math.Abs((float)Main.mouseY + Main.screenPosition.Y - (this.position.Y + (float)(this.height / 2))) * 1.3f;
					if ((float)Math.Sqrt((double)(num2 * num2 + num3 * num3)) > 200f)
					{
						num = 5;
					}
				}
				this.SmartSelect_PickToolForStrategy(tX, tY, num, wetTile);
				this._lastSmartCursorToolStrategy = num;
				return;
			}
			if (this.itemAnimation == 0 && this.DpadRadial.SelectedItem != -1 && this.inventory[this.DpadRadial.SelectedItem].stack > 0)
			{
				if (this.nonTorch == -1)
				{
					this.nonTorch = this.selectedItem;
				}
				this.selectedItem = this.DpadRadial.SelectedItem;
				this._lastSmartCursorToolStrategy = -1;
				return;
			}
			if (this.itemAnimation == 0 && this.CircularRadial.SelectedItem != -1 && this.inventory[this.CircularRadial.SelectedItem].stack > 0)
			{
				if (this.nonTorch == -1)
				{
					this.nonTorch = this.selectedItem;
				}
				this.selectedItem = this.CircularRadial.SelectedItem;
				this._lastSmartCursorToolStrategy = -1;
				return;
			}
			if (this.nonTorch > -1 && this.itemAnimation == 0)
			{
				this.selectedItem = this.nonTorch;
				this.nonTorch = -1;
				this._lastSmartCursorToolStrategy = -1;
			}
		}

		// Token: 0x06000786 RID: 1926 RVA: 0x002DDCC0 File Offset: 0x002DBEC0
		private void SmartSelectLookup_GetTargetTile(out int tX, out int tY)
		{
			tX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
			tY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
			if (this.gravDir == -1f)
			{
				tY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
			}
		}

		// Token: 0x06000787 RID: 1927 RVA: 0x002DDD30 File Offset: 0x002DBF30
		private void SmartSelect_PickToolForStrategy(int tX, int tY, int toolStrategy, bool wetTile)
		{
			for (int i = 0; i < 50; i++)
			{
				int type = this.inventory[i].type;
				if (toolStrategy == 0)
				{
					if (ItemID.Sets.Torches[type])
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
					if (type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776)
					{
						this.SmartSelect_SelectItem(i);
					}
				}
				else if (toolStrategy == 1)
				{
					if (this.inventory[i].hammer > 0)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 2)
				{
					if (this.inventory[i].axe > 0)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 3)
				{
					if (this.inventory[i].pick > 0)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 4)
				{
					if (this.inventory[i].type != 282 && this.inventory[i].type != 286 && this.inventory[i].type != 3002 && this.inventory[i].type != 3112 && this.inventory[i].type != 4776 && this.inventory[i].type != 930 && ItemID.Sets.Torches[type] && !ItemID.Sets.WaterTorches[type])
					{
						if (this.nonTorch == -1)
						{
							this.nonTorch = this.selectedItem;
						}
						if (this.inventory[this.selectedItem].createTile != 4)
						{
							this.selectedItem = i;
						}
					}
					else
					{
						if ((type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776) && wetTile)
						{
							this.SmartSelect_SelectItem(i);
							return;
						}
						if (type == 930 && wetTile)
						{
							bool flag = false;
							for (int j = 57; j >= 0; j--)
							{
								if (this.inventory[j].ammo == this.inventory[i].useAmmo && this.inventory[j].stack > 0)
								{
									flag = true;
									break;
								}
							}
							if (flag)
							{
								this.SmartSelect_SelectItem(i);
								return;
							}
						}
						else if (ItemID.Sets.WaterTorches[type])
						{
							this.SmartSelect_SelectItem(i);
							return;
						}
					}
				}
				else if (toolStrategy == 5)
				{
					if (ItemID.Sets.Torches[type])
					{
						if (this.nonTorch == -1)
						{
							this.nonTorch = this.selectedItem;
						}
						if (this.inventory[this.selectedItem].createTile != 4)
						{
							this.selectedItem = i;
						}
					}
					else if (type == 930)
					{
						bool flag2 = false;
						for (int k = 57; k >= 0; k--)
						{
							if (this.inventory[k].ammo == this.inventory[i].useAmmo && this.inventory[k].stack > 0)
							{
								flag2 = true;
								break;
							}
						}
						if (flag2)
						{
							this.SmartSelect_SelectItem(i);
							return;
						}
					}
					else if (type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 6)
				{
					int num = (int)(Main.tile[tX, tY].frameX / 72);
					int num2 = -1;
					switch (num)
					{
					case 0:
						num2 = 929;
						break;
					case 1:
						num2 = 1338;
						break;
					case 2:
						num2 = 1345;
						break;
					}
					if (type == num2)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 7)
				{
					ItemTrader itemTrader = Player.TryGettingItemTraderFromBlock(Main.tile[tX, tY]);
					ItemTrader.TradeOption tradeOption;
					if (itemTrader != null && itemTrader.TryGetTradeOption(this.inventory[i], out tradeOption))
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
					if (ItemID.Sets.ExtractinatorMode[type] >= 0)
					{
						this.SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (toolStrategy == 8 && ItemID.Sets.IsPaintScraper[type])
				{
					this.SmartSelect_SelectItem(i);
					return;
				}
			}
		}

		// Token: 0x06000788 RID: 1928 RVA: 0x002DE10E File Offset: 0x002DC30E
		private void SmartSelect_SelectItem(int t)
		{
			if (this.nonTorch == -1)
			{
				this.nonTorch = this.selectedItem;
			}
			this.selectedItem = t;
		}

		// Token: 0x06000789 RID: 1929 RVA: 0x002DE12C File Offset: 0x002DC32C
		private void SmartSelect_GetToolStrategy(int tX, int tY, out int toolStrategy, out bool wetTile)
		{
			toolStrategy = 0;
			bool flag = false;
			wetTile = false;
			try
			{
				int num = 0;
				int num2 = 0;
				if (this.position.X / 16f >= (float)tX)
				{
					num = (int)(this.position.X / 16f) - tX;
				}
				if ((this.position.X + (float)this.width) / 16f <= (float)tX)
				{
					num = tX - (int)((this.position.X + (float)this.width) / 16f);
				}
				if (this.position.Y / 16f >= (float)tY)
				{
					num2 = (int)(this.position.Y / 16f) - tY;
				}
				if ((this.position.Y + (float)this.height) / 16f <= (float)tY)
				{
					num2 = tY - (int)((this.position.Y + (float)this.height) / 16f);
				}
				int num3;
				int num4;
				int num5;
				int num6;
				int num7;
				int num8;
				this.SmartSelect_GetAvailableToolRanges(out num3, out num4, out num5, out num6, out num7, out num8);
				wetTile = (Main.tile[tX, tY].liquid > 0);
				if (Main.tile[tX, tY].active())
				{
					int type = (int)Main.tile[tX, tY].type;
					if ((type == 219 || type == 642) && num <= num7 + Player.tileRangeX && num2 <= num7 + Player.tileRangeY)
					{
						toolStrategy = 7;
						flag = true;
					}
					else if (type == 209 && num <= num6 + Player.tileRangeX && num2 <= num6 + Player.tileRangeY)
					{
						toolStrategy = 6;
						flag = true;
					}
					else if (Main.tileHammer[type] && num <= num5 + Player.tileRangeX && num2 <= num5 + Player.tileRangeY)
					{
						toolStrategy = 1;
						flag = true;
					}
					else if (Main.tileAxe[type] && num <= num4 + Player.tileRangeX && num2 <= num4 + Player.tileRangeY)
					{
						toolStrategy = 2;
						flag = true;
					}
					else if (type == 184 && num <= num8 + Player.tileRangeX && num2 <= num8 + Player.tileRangeY)
					{
						toolStrategy = 8;
						flag = true;
					}
					else if (num <= num3 + Player.tileRangeX && num2 <= num3 + Player.tileRangeY)
					{
						toolStrategy = 3;
						flag = true;
					}
				}
				else if (wetTile && this.wet)
				{
					toolStrategy = 4;
					flag = true;
				}
			}
			catch
			{
			}
			if (!flag && this.wet)
			{
				toolStrategy = 4;
			}
		}

		// Token: 0x0600078A RID: 1930 RVA: 0x002DE38C File Offset: 0x002DC58C
		private void SmartSelect_GetAvailableToolRanges(out int pickRange, out int axeRange, out int hammerRange, out int cannonRange, out int extractItemRange, out int paintScraperRange)
		{
			pickRange = -10;
			axeRange = -10;
			hammerRange = -10;
			cannonRange = -10;
			extractItemRange = -10;
			paintScraperRange = -10;
			for (int i = 0; i < 50; i++)
			{
				if (this.inventory[i].pick > 0 && pickRange == -10)
				{
					pickRange = this.inventory[i].tileBoost;
				}
				if (this.inventory[i].axe > 0 && axeRange == -10)
				{
					axeRange = this.inventory[i].tileBoost;
				}
				if (this.inventory[i].hammer > 0 && hammerRange == -10)
				{
					hammerRange = this.inventory[i].tileBoost;
				}
				if ((this.inventory[i].type == 929 || this.inventory[i].type == 1338 || this.inventory[i].type == 1345) && cannonRange == -10)
				{
					cannonRange = this.inventory[i].tileBoost;
				}
				if (ItemID.Sets.IsPaintScraper[this.inventory[i].type] && paintScraperRange == -10)
				{
					paintScraperRange = this.inventory[i].tileBoost;
				}
				if (ItemID.Sets.ExtractinatorMode[this.inventory[i].type] != -1 && extractItemRange == -10)
				{
					extractItemRange = this.inventory[i].tileBoost;
				}
			}
		}

		// Token: 0x0600078B RID: 1931 RVA: 0x002DE4E4 File Offset: 0x002DC6E4
		private void EndOngoingTorchGodEvent()
		{
			if (!this.happyFunTorchTime)
			{
				return;
			}
			this.RelightTorches();
			this.happyFunTorchTime = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600078C RID: 1932 RVA: 0x002DE530 File Offset: 0x002DC730
		private void TryRecalculatingTorchLuck()
		{
			if (this.happyFunTorchTime)
			{
				this.luckyTorchCounter = 0;
				this.TorchAttack();
				return;
			}
			if (this.torchGodCooldown > 0)
			{
				this.torchGodCooldown--;
			}
			bool flag = false;
			Vector2 nextTorchLuckCheckCenter = this._nextTorchLuckCheckCenter;
			if (flag | (double)nextTorchLuckCheckCenter.Y < Main.worldSurface * 16.0 | this.dead)
			{
				this.UpdateTorchLuck_ConsumeCountersAndCalculate();
				return;
			}
			int num = 1;
			int num2 = 40;
			int num3 = (int)nextTorchLuckCheckCenter.Y / 16 - num2;
			int num4 = (int)nextTorchLuckCheckCenter.X / 16 - num2;
			int num5 = (int)nextTorchLuckCheckCenter.X / 16 + num2;
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesX - 10);
			num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesX - 10);
			for (int i = 0; i < num; i++)
			{
				int num6 = num3 + i + this.luckyTorchCounter * num;
				if (num6 >= 10 && num6 <= Main.maxTilesY - 10)
				{
					for (int j = num4; j <= num5; j++)
					{
						Tile tile = Main.tile[j, num6];
						if (tile == null)
						{
							return;
						}
						if (tile.active() && tile.type == 4 && tile.frameX >= 0 && tile.frameY >= 0)
						{
							if (tile.frameX < 66)
							{
								this.nearbyTorches++;
							}
							int num7 = (int)(tile.frameY / 22);
							if (num7 < (int)TorchID.Count)
							{
								this.nearbyTorch[num7] = true;
								if (num7 == 17 && (tile.liquid == 0 || tile.liquidType() != 0))
								{
									this.dryCoralTorch = true;
								}
							}
						}
					}
					if (num6 >= (int)nextTorchLuckCheckCenter.Y / 16 + num2)
					{
						this.UpdateTorchLuck_ConsumeCountersAndCalculate();
						return;
					}
				}
			}
			this.luckyTorchCounter++;
		}

		// Token: 0x0600078D RID: 1933 RVA: 0x002DE6FC File Offset: 0x002DC8FC
		private void RelightTorches()
		{
			this.torchGodCooldown = 3600;
			for (int i = 0; i < this.numberOfTorchAttacksMade; i++)
			{
				int num = this.unlitTorchX[i];
				int num2 = this.unlitTorchY[i];
				if (Main.tile[num, num2].type == 4 && Main.tile[num, num2].frameX >= 66)
				{
					Tile tile = Main.tile[num, num2];
					tile.frameX -= 66;
					NetMessage.SendTileSquare(-1, num, num2, TileChangeType.None);
				}
			}
		}

		// Token: 0x0600078E RID: 1934 RVA: 0x002DE784 File Offset: 0x002DC984
		private void TorchAttack()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if ((double)this.position.Y < Main.worldSurface * 16.0)
			{
				this.EndOngoingTorchGodEvent();
				return;
			}
			this.AddBuff(80, 2, true, false);
			this.torchFunTimer++;
			if (this.torchFunTimer <= 20)
			{
				return;
			}
			this.torchFunTimer = 0;
			int num = 0;
			int num2 = 100;
			int value = (int)base.Center.X / 16 - num2;
			int num3 = (int)base.Center.X / 16 + num2;
			int num4 = (int)base.Center.Y / 16 - num2;
			int num5 = (int)base.Center.Y / 16 + num2;
			int num6 = Utils.Clamp<int>(value, 10, Main.maxTilesX - 10);
			num3 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
			num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
			for (int i = num6; i <= num3; i++)
			{
				for (int j = num4; j <= num5; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && (tile.active() & tile.type == 4) && tile.frameX < 66)
					{
						Player._torchAttackPosX[num] = i;
						Player._torchAttackPosY[num] = j;
						num++;
						if (num >= Player._torchAttackPosX.Length)
						{
							break;
						}
					}
				}
				if (num >= Player._torchAttackPosX.Length)
				{
					break;
				}
			}
			if (num == 0 || this.numberOfTorchAttacksMade >= Player.maxTorchAttacks)
			{
				this.RelightTorches();
				this.happyFunTorchTime = false;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				if (this.numberOfTorchAttacksMade >= 95)
				{
					int number = Item.NewItem(new EntitySource_ByItemSourceId(this, 6), (int)this.position.X, (int)this.position.Y, this.width, this.height, 5043, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (num > 0)
			{
				int num7 = Main.rand.Next(num);
				int num8 = Player._torchAttackPosX[num7];
				int num9 = Player._torchAttackPosY[num7];
				if (Main.tile[num8, num9].type == 4 && Main.tile[num8, num9].frameX < 66)
				{
					float scaleFactor = 8f;
					int num10 = 20;
					if (num10 < 10)
					{
						num10 = 10;
					}
					int num11 = (int)MathHelper.Clamp((float)(Main.tile[num8, num9].frameY / 22), 0f, (float)(TorchID.Count - 1));
					num11 = TorchID.Dust[num11];
					Tile tile2 = Main.tile[num8, num9];
					tile2.frameX += 66;
					this.unlitTorchX[this.numberOfTorchAttacksMade] = num8;
					this.unlitTorchY[this.numberOfTorchAttacksMade] = num9;
					this.numberOfTorchAttacksMade++;
					NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
					Vector2 vector = new Vector2((float)(num8 * 16 + 8), (float)(num9 * 16));
					Vector2 vector2 = base.Center - vector;
					float num12 = vector2.Length();
					vector2.Normalize();
					vector2 *= scaleFactor;
					int num13 = Projectile.NewProjectile(this.GetProjectileSource_Misc(10), vector, vector2, 949, num10, 1f, this.whoAmI, (float)num11, num12, 0f);
					Main.projectile[num13].ai[0] = (float)num11;
					Main.projectile[num13].ai[1] = num12;
					Main.projectile[num13].netUpdate = true;
					if ((num == 1 && this.numberOfTorchAttacksMade >= 95) || this.numberOfTorchAttacksMade >= Player.maxTorchAttacks)
					{
						this.torchFunTimer = -180;
					}
				}
			}
		}

		// Token: 0x0600078F RID: 1935 RVA: 0x002DEB78 File Offset: 0x002DCD78
		private void UpdateTorchLuck_ConsumeCountersAndCalculate()
		{
			this.luckyTorchCounter = 0;
			this.torchLuck = 0f;
			this._nextTorchLuckCheckCenter = base.Center;
			if (this.inventory[this.selectedItem].createTile == 4 && this.inventory[this.selectedItem].placeStyle < (int)TorchID.Count)
			{
				this.nearbyTorch[this.inventory[this.selectedItem].placeStyle] = true;
			}
			float num = 0f;
			float num2 = 0f;
			if (!this.ZoneDungeon && !this.ZoneLihzhardTemple)
			{
				if (this.nearbyTorch[9])
				{
					if (this.ZoneSnow)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[16])
				{
					if (this.ZoneDesert)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[17])
				{
					if (WorldGen.oceanDepths((int)base.Center.X / 16, (int)base.Center.Y / 16))
					{
						num2 += 1f;
					}
					else if (this.dryCoralTorch)
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[21])
				{
					if (this.ZoneJungle)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[22])
				{
					if (this.ZoneGlowshroom)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[18])
				{
					if (this.ZoneCorrupt)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[8] && this.ZoneCorrupt)
				{
					num2 += 1f;
				}
				if (this.nearbyTorch[19])
				{
					if (this.ZoneCrimson)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[11] && this.ZoneCrimson)
				{
					num2 += 1f;
				}
				if (this.nearbyTorch[20])
				{
					if (this.ZoneHallow)
					{
						num2 += 1f;
					}
					else
					{
						num += 1f;
					}
				}
				if (this.nearbyTorch[13] && !this.ZoneSnow && !this.ZoneDesert && !this.ZoneCorrupt && !this.ZoneCrimson && !this.ZoneHallow && !this.ZoneJungle)
				{
					num2 += 0.5f;
				}
				if (this.nearbyTorch[0])
				{
					if (this.ZoneSnow)
					{
						num += 2f;
					}
					else if (this.ZoneDesert || this.ZoneCorrupt || this.ZoneCrimson || this.ZoneHallow)
					{
						num += 0.5f;
					}
				}
			}
			if (num2 >= 1f)
			{
				this.torchLuck += 1f;
			}
			else if (num2 > 0f)
			{
				this.torchLuck += 0.5f;
			}
			if (num >= 2f)
			{
				this.torchLuck += -1.5f;
			}
			else if (num >= 1f)
			{
				this.torchLuck += -1f;
			}
			else if (num > 0f)
			{
				this.torchLuck += -0.5f;
			}
			this.dryCoralTorch = false;
			for (int i = 0; i < (int)TorchID.Count; i++)
			{
				this.nearbyTorch[i] = false;
			}
			if (this.torchLuck < 0f)
			{
				this.torchLuck = 0f;
			}
			if (this.torchGodCooldown <= 0 && !this.unlockedBiomeTorches && this.nearbyTorches > 100 && !this.happyFunTorchTime && (double)this.position.Y > Main.worldSurface * 16.0)
			{
				bool flag = false;
				for (int j = 0; j < this.inventory.Length; j++)
				{
					if (this.inventory[j].type == 5043)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					this.happyFunTorchTime = true;
					this.numberOfTorchAttacksMade = 0;
				}
			}
			this.nearbyTorches = 0;
		}

		// Token: 0x06000790 RID: 1936 RVA: 0x002DEF60 File Offset: 0x002DD160
		public void AddCoinLuck(Vector2 coinPosition, int coinAmount)
		{
			if (!this.dead && Vector2.Distance(coinPosition, base.Center) < 1000f)
			{
				this.coinLuck += (float)coinAmount;
				if (this.coinLuck > 1000000f)
				{
					this.coinLuck = 1000000f;
				}
				this.luckNeedsSync = true;
			}
		}

		// Token: 0x06000791 RID: 1937 RVA: 0x002DEFB6 File Offset: 0x002DD1B6
		private void UpdateCoinLuck()
		{
			if (this.coinLuck <= 0f)
			{
				return;
			}
			this.coinLuck *= 0.9999f;
			if ((double)this.coinLuck < 0.25)
			{
				this.coinLuck = 0f;
			}
		}

		// Token: 0x06000792 RID: 1938 RVA: 0x002DEFF8 File Offset: 0x002DD1F8
		private float CalculateCoinLuck()
		{
			if (this.coinLuck == 0f)
			{
				return 0f;
			}
			if (this.coinLuck > 249000f)
			{
				return 0.2f;
			}
			if (this.coinLuck > 24900f)
			{
				return 0.175f;
			}
			if (this.coinLuck > 24900f)
			{
				return 0.175f;
			}
			if (this.coinLuck > 2490f)
			{
				return 0.15f;
			}
			if (this.coinLuck > 249f)
			{
				return 0.125f;
			}
			if ((double)this.coinLuck > 24.9)
			{
				return 0.1f;
			}
			if ((double)this.coinLuck > 2.49)
			{
				return 0.075f;
			}
			if ((double)this.coinLuck > 0.249)
			{
				return 0.05f;
			}
			return 0.025f;
		}

		// Token: 0x1700011E RID: 286
		// (get) Token: 0x06000793 RID: 1939 RVA: 0x002DF0C4 File Offset: 0x002DD2C4
		public float NormalizedLuck
		{
			get
			{
				float value = 0f;
				if (this.luck > 0f)
				{
					value = this.luck / this.luckMaximumCap;
				}
				else if (this.luck < 0f)
				{
					value = -(this.luck / this.luckMinimumCap);
				}
				return MathHelper.Clamp(value, -1f, 1f);
			}
		}

		// Token: 0x06000794 RID: 1940 RVA: 0x002DF120 File Offset: 0x002DD320
		private float GetLadyBugLuck()
		{
			if (this.ladyBugLuckTimeLeft > 0)
			{
				return (float)this.ladyBugLuckTimeLeft / (float)NPC.ladyBugGoodLuckTime;
			}
			if (this.ladyBugLuckTimeLeft < 0)
			{
				return -(float)this.ladyBugLuckTimeLeft / (float)NPC.ladyBugBadLuckTime;
			}
			return 0f;
		}

		// Token: 0x06000795 RID: 1941 RVA: 0x002DF158 File Offset: 0x002DD358
		public static float GetClosestPlayersLuck(Point Position)
		{
			return Main.player[(int)Player.FindClosest(new Vector2((float)(Position.X * 16), (float)(Position.Y * 16)), 1, 1)].luck;
		}

		// Token: 0x06000796 RID: 1942 RVA: 0x002DF185 File Offset: 0x002DD385
		public static float GetClosestPlayersLuck(Vector2 Position)
		{
			return Main.player[(int)Player.FindClosest(Position, 1, 1)].luck;
		}

		// Token: 0x06000797 RID: 1943 RVA: 0x002DF19C File Offset: 0x002DD39C
		public int RollLuck(int range)
		{
			if (this.luck > 0f && Main.rand.NextFloat() < this.luck)
			{
				return Main.rand.Next(Main.rand.Next(range / 2, range));
			}
			if (this.luck < 0f && Main.rand.NextFloat() < -this.luck)
			{
				return Main.rand.Next(Main.rand.Next(range, range * 2));
			}
			return Main.rand.Next(range);
		}

		// Token: 0x06000798 RID: 1944 RVA: 0x002DF225 File Offset: 0x002DD425
		public static float GetClosestRollLuck(Vector2 position, int range)
		{
			return (float)Main.player[(int)Player.FindClosest(position, 1, 1)].RollLuck(range);
		}

		// Token: 0x06000799 RID: 1945 RVA: 0x002DF23C File Offset: 0x002DD43C
		public static float GetClosestRollLuck(int x, int y, int range)
		{
			return (float)Main.player[(int)Player.FindClosest(new Vector2((float)(x * 16), (float)(y * 16)), 1, 1)].RollLuck(range);
		}

		// Token: 0x0600079A RID: 1946 RVA: 0x002DF264 File Offset: 0x002DD464
		public void ResetEffects()
		{
			if (this.extraAccessory && (Main.expertMode || Main.gameMenu))
			{
				this.extraAccessorySlots = 1;
			}
			else
			{
				this.extraAccessorySlots = 0;
			}
			if (this.shimmering)
			{
				this.shimmerTransparency += 0.015f;
				if (this.shimmerTransparency > 0.8f)
				{
					this.shimmerTransparency = 0.8f;
				}
			}
			else if (this.shimmerTransparency > 0f)
			{
				if (this.shimmerTransparency == 0.8f)
				{
					SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 3, 1f, 0f);
				}
				this.shimmerTransparency -= 0.015f;
				if (this.shimmerTransparency < 0f)
				{
					this.shimmerTransparency = 0f;
				}
			}
			this.shimmering = false;
			this.fairyBoots = false;
			this.hellfireTreads = false;
			this.moonLordLegs = false;
			this.flowerBoots = false;
			this.arcticDivingGear = false;
			this.noBuilding = false;
			this.strongBees = false;
			this.armorPenetration = 0;
			this.ashWoodBonus = false;
			this.shroomiteStealth = false;
			this.statDefense = 0;
			this.accWatch = 0;
			this.accCompass = 0;
			this.accDepthMeter = 0;
			this.accDivingHelm = false;
			this.canFloatInWater = false;
			this.lifeRegen = 0;
			this.manaCost = 1f;
			this.meleeSpeed = 1f;
			this.meleeDamage = 1f;
			this.rangedDamage = 1f;
			this.rangedMultDamage = 1f;
			this.magicDamage = 1f;
			this.minionDamage = 1f;
			this.summonerWeaponSpeedBonus = 0f;
			this.meleeCrit = 4;
			this.rangedCrit = 4;
			this.magicCrit = 4;
			this.hasFootball = false;
			this.drawingFootball = false;
			this.minionKB = 0f;
			this.moveSpeed = 1f;
			this.boneArmor = false;
			this.honey = false;
			this.frostArmor = false;
			this.rocketBoots = 0;
			this.vanityRocketBoots = 0;
			this.fireWalk = false;
			this.noKnockback = false;
			this.jumpBoost = false;
			this.frogLegJumpBoost = false;
			this.skyStoneEffects = false;
			this.noFallDmg = false;
			this.accFlipper = false;
			this.spawnMax = false;
			this.spaceGun = false;
			this.killGuide = false;
			this.killClothier = false;
			this.lavaImmune = false;
			this.gills = false;
			this.slowFall = false;
			this.findTreasure = false;
			this.biomeSight = false;
			this.invis = false;
			this.nightVision = false;
			this.enemySpawns = false;
			this.hasTitaniumStormBuff = false;
			this.thorns = 0f;
			this.aggro = 0;
			this.waterWalk = false;
			this.waterWalk2 = false;
			this.detectCreature = false;
			this.gravControl = false;
			if (this.forcedGravity > 0)
			{
				this.forcedGravity--;
			}
			this.honeyCombItem = null;
			this.gravControl2 = false;
			this.statLifeMax2 = this.statLifeMax;
			this.statManaMax2 = this.statManaMax;
			this.chloroAmmoCost80 = false;
			this.huntressAmmoCost90 = false;
			this.ammoCost80 = false;
			this.ammoCost75 = false;
			this.manaRegenBuff = false;
			this.hasCreditsSceneMusicBox = false;
			this.arrowDamage = 1f;
			this.arrowDamageAdditiveStack = 0f;
			this.bulletDamage = 1f;
			this.rocketDamage = 1f;
			this.coolWhipBuff = false;
			this.yoraiz0rEye = 0;
			this.yoraiz0rDarkness = false;
			this.hasFloatingTube = false;
			this.hasUnicornHorn = false;
			this.hasAngelHalo = false;
			this.hasRainbowCursor = false;
			this.leinforsHair = false;
			this.overrideFishingBobber = -1;
			this.suspiciouslookingTentacle = false;
			this.crimsonHeart = false;
			this.lightOrb = false;
			this.blueFairy = false;
			this.redFairy = false;
			this.greenFairy = false;
			this.wisp = false;
			this.bunny = false;
			this.turtle = false;
			this.eater = false;
			this.trident = false;
			this.skeletron = false;
			this.hornet = false;
			this.zephyrfish = false;
			this.tiki = false;
			this.lizard = false;
			this.parrot = false;
			this.sapling = false;
			this.cSapling = false;
			this.truffle = false;
			this.yoyoGlove = false;
			this.counterWeight = 0;
			this.stringColor = 0;
			this.yoyoString = false;
			this.shadowDodge = false;
			this.palladiumRegen = false;
			this.chaosState = false;
			this.onHitDodge = false;
			this.onHitRegen = false;
			this.onHitPetal = false;
			this.iceBarrier = false;
			this.onHitTitaniumStorm = false;
			this.maxMinions = 1;
			this.maxTurrets = 1;
			this.ammoBox = false;
			this.ammoPotion = false;
			this.penguin = false;
			this.sporeSac = false;
			this.shinyStone = false;
			this.empressBrooch = false;
			this.volatileGelatin = false;
			this.hasMagiluminescence = false;
			this.shadowArmor = false;
			if (Main.dontStarveWorld && Main.remixWorld)
			{
				this.dontStarveShader = false;
			}
			else
			{
				this.dontStarveShader = Main.dontStarveWorld;
			}
			this.eyebrellaCloud = false;
			this.stardustMonolithShader = false;
			this.nebulaMonolithShader = false;
			this.vortexMonolithShader = false;
			this.solarMonolithShader = false;
			this.moonLordMonolithShader = false;
			this.bloodMoonMonolithShader = false;
			this.shimmerMonolithShader = false;
			this.dd2Accessory = false;
			this.magicLantern = false;
			this.rabid = false;
			this.sunflower = false;
			this.wellFed = false;
			this.inferno = false;
			this.manaMagnet = false;
			this.lifeMagnet = false;
			this.treasureMagnet = false;
			this.chiselSpeed = false;
			this.lifeForce = false;
			this.dangerSense = false;
			this.endurance = 0f;
			this.whipRangeMultiplier = 1f;
			this.whipUseTimeMultiplier = 1f;
			this.calmed = false;
			this.beetleOrbs = 0;
			this.beetleBuff = false;
			this.miniMinotaur = false;
			this.goldRing = false;
			this.solarShields = 0;
			this.GoingDownWithGrapple = false;
			this.fishingSkill = 0;
			this.cratePotion = false;
			this.sonarPotion = false;
			this.accTackleBox = false;
			this.accFishingBobber = false;
			this.accFishingLine = false;
			this.accLavaFishing = false;
			this.accFishFinder = false;
			this.accWeatherRadio = false;
			this.accThirdEye = false;
			this.InfoAccMechShowWires = false;
			this.accJarOfSouls = false;
			this.accCalendar = false;
			this.accStopwatch = false;
			this.accOreFinder = false;
			this.accCritterGuide = false;
			this.accDreamCatcher = false;
			this.wallSpeed = 1f;
			this.tileSpeed = 1f;
			this.autoPaint = false;
			this.autoActuator = false;
			this.petFlagKingSlimePet = false;
			this.petFlagEyeOfCthulhuPet = false;
			this.petFlagEaterOfWorldsPet = false;
			this.petFlagBrainOfCthulhuPet = false;
			this.petFlagSkeletronPet = false;
			this.petFlagQueenBeePet = false;
			this.petFlagDestroyerPet = false;
			this.petFlagTwinsPet = false;
			this.petFlagSkeletronPrimePet = false;
			this.petFlagPlanteraPet = false;
			this.petFlagGolemPet = false;
			this.petFlagDukeFishronPet = false;
			this.petFlagLunaticCultistPet = false;
			this.petFlagMoonLordPet = false;
			this.petFlagFairyQueenPet = false;
			this.petFlagPumpkingPet = false;
			this.petFlagEverscreamPet = false;
			this.petFlagIceQueenPet = false;
			this.petFlagMartianPet = false;
			this.petFlagDD2OgrePet = false;
			this.petFlagDD2BetsyPet = false;
			this.petFlagQueenSlimePet = false;
			this.petFlagVoltBunny = false;
			this.petFlagShadowMimic = false;
			this.petFlagBabyWerewolf = false;
			this.petFlagDynamiteKitten = false;
			this.petFlagPlantero = false;
			this.petFlagBabyRedPanda = false;
			this.petFlagLilHarpy = false;
			this.petFlagFennecFox = false;
			this.petFlagGlitteryButterfly = false;
			this.petFlagBabyImp = false;
			this.petFlagBabyShark = false;
			this.petFlagUpbeatStar = false;
			this.petFlagDD2Gato = false;
			this.petFlagDD2Dragon = false;
			this.petFlagDD2Ghost = false;
			this.petFlagBerniePet = false;
			this.petFlagGlommerPet = false;
			this.petFlagDeerclopsPet = false;
			this.petFlagPigPet = false;
			this.petFlagChesterPet = false;
			this.petFlagJunimoPet = false;
			this.petFlagBlueChickenPet = false;
			this.petFlagSpiffo = false;
			this.petFlagCaveling = false;
			this.petFlagDirtiestBlock = false;
			this.companionCube = false;
			this.petFlagSugarGlider = false;
			this.babyFaceMonster = false;
			this.manaSick = false;
			this.puppy = false;
			this.grinch = false;
			this.blackCat = false;
			this.spider = false;
			this.squashling = false;
			this.magicCuffs = false;
			this.coldDash = false;
			this.desertDash = false;
			this.desertBoots = false;
			this.sailDash = false;
			this.cordage = false;
			this.magicQuiver = false;
			this.shimmerImmune = false;
			this.hasMoltenQuiver = false;
			this.magmaStone = false;
			this.hasRaisableShield = false;
			this.lavaRose = false;
			this.eyeSpring = false;
			this.snowman = false;
			this.scope = false;
			this.panic = false;
			this.brainOfConfusionItem = null;
			this.dino = false;
			this.crystalLeaf = false;
			this.pygmy = false;
			this.raven = false;
			this.slime = false;
			this.hornetMinion = false;
			this.impMinion = false;
			this.twinsMinion = false;
			this.spiderMinion = false;
			this.pirateMinion = false;
			this.sharknadoMinion = false;
			this.stardustMinion = false;
			this.batsOfLight = false;
			this.babyBird = false;
			this.stormTiger = false;
			this.flinxMinion = false;
			this.abigailMinion = false;
			this.smolstar = false;
			this.empressBlade = false;
			this.stardustGuardian = false;
			this.stardustDragon = false;
			this.UFOMinion = false;
			this.DeadlySphereMinion = false;
			this.chilled = false;
			this.tipsy = false;
			this.dazed = false;
			this.frozen = false;
			this.stoned = false;
			this.webbed = false;
			this.ichor = false;
			this.manaRegenBonus = 0;
			this.manaRegenDelayBonus = 0f;
			this.carpet = false;
			this.iceSkate = false;
			this.dashType = 0;
			this.spikedBoots = 0;
			this.blackBelt = false;
			this.lavaMax = 0;
			this.archery = false;
			this.poisoned = false;
			this.venom = false;
			this.blind = false;
			this.blackout = false;
			this.onFire = false;
			this.dripping = false;
			this.hungry = false;
			this.heartyMeal = false;
			this.starving = false;
			this.drippingSlime = false;
			this.drippingSparkleSlime = false;
			this.burned = false;
			this.suffocating = false;
			this.onFire2 = false;
			this.onFire3 = false;
			this.onFrostBurn = false;
			this.onFrostBurn2 = false;
			this.frostBurn = false;
			this.noItems = false;
			this.cursed = false;
			this.blockRange = 0;
			this.pickSpeed = 1f;
			this.wereWolf = false;
			this.rulerGrid = false;
			this.rulerLine = true;
			this.bleed = false;
			this.confused = false;
			this.witheredArmor = false;
			this.witheredWeapon = false;
			this.parryDamageBuff = false;
			this.slowOgreSpit = false;
			this.wings = 0;
			this.wingsLogic = 0;
			this.wingTimeMax = 0;
			this.brokenArmor = false;
			this.silence = false;
			this.slow = false;
			this.gross = false;
			this.tongued = false;
			this.kbGlove = false;
			this.autoReuseGlove = false;
			this.meleeScaleGlove = false;
			this.remoteVisionForDrone = false;
			this.kbBuff = false;
			this.starCloakItem = null;
			this.starCloakItem_manaCloakOverrideItem = null;
			this.starCloakItem_starVeilOverrideItem = null;
			this.starCloakItem_beeCloakOverrideItem = null;
			this.longInvince = false;
			this.pStone = false;
			this.manaFlower = false;
			this.crimsonRegen = false;
			this.ghostHeal = false;
			this.ghostHurt = false;
			this.turtleArmor = false;
			this.turtleThorns = false;
			this.cactusThorns = false;
			this.spiderArmor = false;
			this.anglerSetSpawnReduction = false;
			this.loveStruck = false;
			this.stinky = false;
			this.dryadWard = false;
			this.resistCold = false;
			this.electrified = false;
			this.moonLeech = false;
			this.headcovered = false;
			this.vortexDebuff = false;
			this.windPushed = false;
			this.ballistaPanic = false;
			this.vampireFrog = false;
			this.CanSeeInvisibleBlocks = false;
			this.setVortex = (this.setNebula = (this.setStardust = false));
			this.setForbidden = false;
			this.setHuntressT3 = false;
			this.setSquireT3 = false;
			this.setMonkT3 = false;
			this.setApprenticeT3 = false;
			this.setHuntressT2 = false;
			this.setSquireT2 = false;
			this.setMonkT2 = false;
			this.setApprenticeT2 = false;
			this.setForbiddenCooldownLocked = false;
			this.nebulaLevelDamage = (this.nebulaLevelLife = (this.nebulaLevelMana = 0));
			this.ignoreWater = false;
			this.meleeEnchant = 0;
			this.discountEquipped = false;
			this.hasLuckyCoin = false;
			this.boneGloveItem = null;
			this.hasLuck_LuckyCoin = false;
			this.hasLuck_LuckyHorseshoe = false;
			this.hasJumpOption_Cloud = false;
			this.hasJumpOption_Sail = false;
			this.hasJumpOption_Sandstorm = false;
			this.hasJumpOption_Blizzard = false;
			this.hasJumpOption_Fart = false;
			this.hasJumpOption_Unicorn = false;
			this.hasJumpOption_Santank = false;
			this.hasJumpOption_WallOfFleshGoat = false;
			this.hasJumpOption_Basilisk = false;
			this.defendedByPaladin = false;
			this.hasPaladinShield = false;
			this.hasLucyTheAxe = false;
			this.preventAllItemPickups = false;
			this.dontHurtCritters = false;
			this.dontHurtNature = false;
			this.portableStoolInfo.Reset();
			this.ResizeHitbox();
			this.autoJump = false;
			this.justJumped = false;
			this.jumpSpeedBoost = 0f;
			this.extraFall = 0;
			this.creativeGodMode = false;
			if (this.phantasmTime > 0)
			{
				this.phantasmTime--;
			}
			if (this.brainOfConfusionDodgeAnimationCounter > 0)
			{
				this.brainOfConfusionDodgeAnimationCounter--;
			}
			if (this.wireOperationsCooldown > 0)
			{
				this.wireOperationsCooldown--;
			}
			if (this.releaseUseItem)
			{
				this.ActuationRodLock = false;
			}
			for (int i = 0; i < this.npcTypeNoAggro.Length; i++)
			{
				this.npcTypeNoAggro[i] = false;
			}
			this.ResetProjectileCaches();
			if (this.whoAmI == Main.myPlayer && !this.isDisplayDollOrInanimate)
			{
				this.equipmentBasedLuckBonus = 0f;
				this.luckPotion = 0;
				Player.tileRangeX = 5;
				Player.tileRangeY = 4;
				if (Main.GameModeInfo.IsJourneyMode)
				{
					CreativePowers.FarPlacementRangePower power = CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>();
					if (power.GetIsUnlocked() && power.IsEnabledForPlayer(this.whoAmI))
					{
						Player.tileRangeX *= 2;
						Player.tileRangeY *= 2;
						Player.tileRangeX += 8;
						Player.tileRangeY += 8;
					}
				}
			}
			this.mount.CheckMountBuff(this);
		}

		// Token: 0x0600079B RID: 1947 RVA: 0x002E0028 File Offset: 0x002DE228
		private void UpdateLadyBugLuckTime()
		{
			if (this.ladyBugLuckTimeLeft > 0)
			{
				this.ladyBugLuckTimeLeft -= Main.dayRate;
				if (this.ladyBugLuckTimeLeft < 0)
				{
					this.ladyBugLuckTimeLeft = 0;
					return;
				}
			}
			else if (this.ladyBugLuckTimeLeft < 0)
			{
				this.ladyBugLuckTimeLeft += Main.dayRate;
				if (this.ladyBugLuckTimeLeft > 0)
				{
					this.ladyBugLuckTimeLeft = 0;
				}
			}
		}

		// Token: 0x0600079C RID: 1948 RVA: 0x002E008C File Offset: 0x002DE28C
		public void UpdateImmunity()
		{
			if (this.immune)
			{
				this.immuneTime--;
				if (this.immuneTime <= 0)
				{
					this.immune = false;
					this.immuneNoBlink = false;
				}
				if (this.immuneNoBlink)
				{
					this.immuneAlpha = 0;
				}
				else
				{
					this.immuneAlpha += this.immuneAlphaDirection * 50;
					if (this.immuneAlpha <= 50)
					{
						this.immuneAlphaDirection = 1;
					}
					else if (this.immuneAlpha >= 205)
					{
						this.immuneAlphaDirection = -1;
					}
				}
			}
			else
			{
				this.immuneAlpha = 0;
			}
			for (int i = 0; i < this.hurtCooldowns.Length; i++)
			{
				if (this.hurtCooldowns[i] > 0)
				{
					this.hurtCooldowns[i]--;
				}
			}
		}

		// Token: 0x0600079D RID: 1949 RVA: 0x002E014C File Offset: 0x002DE34C
		private void TryToPoop()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (!this.wellFed)
			{
				return;
			}
			int maxValue = 600;
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			int num = 3;
			int num2 = this.FindBuffIndex(207);
			if (num2 == -1)
			{
				num = 2;
				num2 = this.FindBuffIndex(206);
			}
			if (num2 == -1)
			{
				num = 1;
				num2 = this.FindBuffIndex(26);
			}
			if (num2 == -1)
			{
				return;
			}
			int num3 = this.buffTime[num2];
			this.DelBuff(num2);
			int stack = Utils.Clamp<int>(num3 / 3600 * num, num, 999);
			Vector2 mountedCenter = this.MountedCenter;
			ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.Digestion, new ParticleOrchestraSettings
			{
				PositionInWorld = mountedCenter,
				MovementVector = new Vector2((float)(-(float)this.direction), 0f)
			}, new int?(this.whoAmI));
			int num4 = Item.NewItem(this.GetItemSource_Misc(9), mountedCenter, Vector2.Zero, 5395, stack, false, 0, true, false);
			if (Main.netMode == 0)
			{
				Main.item[num4].noGrabDelay = 100;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num4, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600079E RID: 1950 RVA: 0x002E0280 File Offset: 0x002DE480
		public void UpdateLifeRegen()
		{
			bool flag = false;
			if (this.shinyStone && this.IsStandingStillForSpecialEffects && this.itemAnimation == 0)
			{
				flag = true;
			}
			if (this.poisoned)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 4;
			}
			if (this.venom)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 30;
			}
			if (this.onFire)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 8;
			}
			if (this.onFire3)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 8;
			}
			if (this.onFrostBurn)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 16;
			}
			if (this.onFrostBurn2)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 16;
			}
			if (this.onFire2)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 24;
			}
			if (this.burned)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 60;
				this.moveSpeed *= 0.5f;
			}
			if (this.suffocating)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 40;
			}
			if (this.electrified)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 8;
				if (this.controlLeft || this.controlRight)
				{
					this.lifeRegen -= 32;
				}
			}
			if (this.tongued && Main.expertMode)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0f;
				this.lifeRegen -= 100;
			}
			if (this.honey && this.lifeRegen < 0)
			{
				this.lifeRegen += 4;
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
			}
			if (this.lifeRegen < 0 && this.nebulaLevelLife > 0)
			{
				this.lifeRegen = 0;
			}
			if (flag && this.lifeRegen < 0)
			{
				this.lifeRegen /= 2;
			}
			this.lifeRegenTime += 1f;
			if (this.usedAegisCrystal)
			{
				this.lifeRegenTime += 0.2f;
			}
			if (this.crimsonRegen)
			{
				this.lifeRegenTime += 1f;
			}
			if (this.soulDrain > 0)
			{
				this.lifeRegenTime += 2f;
			}
			if (flag)
			{
				if (this.lifeRegenTime > 90f && this.lifeRegenTime < 1800f)
				{
					this.lifeRegenTime = 1800f;
				}
				this.lifeRegenTime += 4f;
				this.lifeRegen += 4;
			}
			if (this.honey)
			{
				this.lifeRegenTime += 2f;
				this.lifeRegen += 2;
			}
			if (this.starving)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				if (this.lifeRegenCount > 0)
				{
					this.lifeRegenCount = 0;
				}
				if (this.lifeRegenTime > 0f)
				{
					this.lifeRegenTime = 0f;
				}
				int num = 3000;
				int num2 = 120 * this.statLifeMax2 / num;
				if (num2 < 4)
				{
					num2 = 4;
				}
				this.lifeRegen = -num2;
			}
			if (this.soulDrain > 0)
			{
				int num3 = (5 + this.soulDrain) / 2;
				this.lifeRegenTime += (float)num3;
				this.lifeRegen += num3;
			}
			if (this.heartyMeal)
			{
				int num4 = 3 * 120 / 60;
				this.lifeRegen += num4;
			}
			if (this.whoAmI == Main.myPlayer && Main.SceneMetrics.HasCampfire)
			{
				this.lifeRegen++;
			}
			if (this.whoAmI == Main.myPlayer && Main.SceneMetrics.HasHeartLantern)
			{
				this.lifeRegen += 2;
			}
			if (this.bleed)
			{
				this.lifeRegenTime = 0f;
			}
			float num5 = 0f;
			if (this.lifeRegenTime >= 300f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 600f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 900f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 1200f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 1500f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 1800f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 2400f)
			{
				num5 += 1f;
			}
			if (this.lifeRegenTime >= 3000f)
			{
				num5 += 1f;
			}
			if (flag)
			{
				float num6 = this.lifeRegenTime - 3000f;
				num6 /= 300f;
				if (num6 > 0f)
				{
					if (num6 > 30f)
					{
						num6 = 30f;
					}
					num5 += num6;
				}
			}
			else if (this.lifeRegenTime >= 3600f)
			{
				num5 += 1f;
				this.lifeRegenTime = 3600f;
			}
			if (this.sitting.isSitting || this.sleeping.isSleeping)
			{
				this.lifeRegenTime += 3f;
				num5 *= 1.3f;
			}
			if (this.sitting.isSitting && this.sitting.details.IsAToilet)
			{
				this.TryToPoop();
			}
			if (this.velocity.X == 0f || this.grappling[0] > 0)
			{
				num5 *= 1.25f;
			}
			else
			{
				num5 *= 0.5f;
			}
			if (this.crimsonRegen)
			{
				num5 *= 1.5f;
			}
			if (this.shinyStone)
			{
				num5 *= 1.1f;
			}
			if (this.whoAmI == Main.myPlayer && Main.SceneMetrics.HasCampfire)
			{
				num5 *= 1.1f;
			}
			if (Main.expertMode && !this.wellFed)
			{
				if (this.shinyStone)
				{
					num5 *= 0.75f;
				}
				else
				{
					num5 /= 2f;
				}
			}
			if (this.rabid)
			{
				if (this.shinyStone)
				{
					num5 *= 0.75f;
				}
				else
				{
					num5 /= 2f;
				}
			}
			float num7 = (float)this.statLifeMax2 / 400f * 0.85f + 0.15f;
			num5 *= num7;
			this.lifeRegen += (int)Math.Round((double)num5);
			this.lifeRegenCount += this.lifeRegen;
			if (this.palladiumRegen)
			{
				this.lifeRegenCount += 4;
			}
			if (flag && this.lifeRegen > 0 && this.statLife < this.statLifeMax2)
			{
				this.lifeRegenCount++;
				if (flag && ((float)Main.rand.Next(30000) < this.lifeRegenTime || Main.rand.Next(30) == 0))
				{
					int num8 = Dust.NewDust(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 0.5f);
					Main.dust[num8].noGravity = true;
					Main.dust[num8].velocity *= 0.75f;
					Main.dust[num8].fadeIn = 1.3f;
					Vector2 vector = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					vector.Normalize();
					vector *= (float)Main.rand.Next(50, 100) * 0.04f;
					Main.dust[num8].velocity = vector;
					vector.Normalize();
					vector *= 34f;
					Main.dust[num8].position = base.Center - vector;
				}
			}
			while (this.lifeRegenCount >= 120)
			{
				this.lifeRegenCount -= 120;
				if (this.statLife < this.statLifeMax2)
				{
					this.statLife++;
					if (this.crimsonRegen)
					{
						for (int i = 0; i < 10; i++)
						{
							int num9 = Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 175, default(Color), 1.75f);
							Main.dust[num9].noGravity = true;
							Main.dust[num9].velocity *= 0.75f;
							int num10 = Main.rand.Next(-40, 41);
							int num11 = Main.rand.Next(-40, 41);
							Dust dust = Main.dust[num9];
							dust.position.X = dust.position.X + (float)num10;
							Dust dust2 = Main.dust[num9];
							dust2.position.Y = dust2.position.Y + (float)num11;
							Main.dust[num9].velocity.X = (float)(-(float)num10) * 0.075f;
							Main.dust[num9].velocity.Y = (float)(-(float)num11) * 0.075f;
						}
					}
				}
				if (this.statLife > this.statLifeMax2)
				{
					this.statLife = this.statLifeMax2;
				}
			}
			if (!this.burned && !this.suffocating)
			{
				if (!this.tongued || !Main.expertMode)
				{
					if (this.starving)
					{
						int num12 = this.statLifeMax2 / 50;
						if (num12 < 2)
						{
							num12 = 2;
						}
						int num13 = (this.ZoneDesert || this.ZoneSnow) ? (num12 * 2) : num12;
						int num14 = 120 * num12;
						while (this.lifeRegenCount <= -num14)
						{
							this.lifeRegenCount += num14;
							this.statLife -= num13;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, num13, false, true);
							if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
							{
								this.KillMe(PlayerDeathReason.ByOther(18), 10.0, 0, false);
							}
						}
						return;
					}
					while (this.lifeRegenCount <= -120)
					{
						if (this.lifeRegenCount <= -480)
						{
							this.lifeRegenCount += 480;
							this.statLife -= 4;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, 4, false, true);
						}
						else if (this.lifeRegenCount <= -360)
						{
							this.lifeRegenCount += 360;
							this.statLife -= 3;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, 3, false, true);
						}
						else if (this.lifeRegenCount <= -240)
						{
							this.lifeRegenCount += 240;
							this.statLife -= 2;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, 2, false, true);
						}
						else
						{
							this.lifeRegenCount += 120;
							this.statLife--;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, 1, false, true);
						}
						if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
						{
							if (this.poisoned || this.venom)
							{
								this.KillMe(PlayerDeathReason.ByOther(9), 10.0, 0, false);
							}
							else if (this.electrified)
							{
								this.KillMe(PlayerDeathReason.ByOther(10), 10.0, 0, false);
							}
							else
							{
								this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
							}
						}
					}
					return;
				}
			}
			while (this.lifeRegenCount <= -600)
			{
				this.lifeRegenCount += 600;
				this.statLife -= 5;
				CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, 5, false, true);
				if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
				{
					if (this.suffocating)
					{
						this.KillMe(PlayerDeathReason.ByOther(7), 10.0, 0, false);
					}
					else if (this.tongued)
					{
						this.KillMe(PlayerDeathReason.ByOther(12), 10.0, 0, false);
					}
					else
					{
						this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
					}
				}
			}
		}

		// Token: 0x0600079F RID: 1951 RVA: 0x002E1080 File Offset: 0x002DF280
		public void UpdateManaRegen()
		{
			if (this.nebulaLevelMana > 0)
			{
				int num = 6;
				this.nebulaManaCounter += this.nebulaLevelMana;
				if (this.nebulaManaCounter >= num)
				{
					this.nebulaManaCounter -= num;
					this.statMana++;
					if (this.statMana >= this.statManaMax2)
					{
						this.statMana = this.statManaMax2;
					}
				}
			}
			else
			{
				this.nebulaManaCounter = 0;
			}
			if (this.manaRegenDelay > 0f)
			{
				this.manaRegenDelay -= 1f;
				this.manaRegenDelay -= this.manaRegenDelayBonus;
				if (this.IsStandingStillForSpecialEffects || this.grappling[0] >= 0 || this.manaRegenBuff)
				{
					this.manaRegenDelay -= 1f;
				}
				if (this.usedArcaneCrystal)
				{
					this.manaRegenDelay -= 0.05f;
				}
			}
			if (this.manaRegenBuff && this.manaRegenDelay > 20f)
			{
				this.manaRegenDelay = 20f;
			}
			if (this.manaRegenDelay <= 0f)
			{
				this.manaRegenDelay = 0f;
				this.manaRegen = this.statManaMax2 / 3 + 1 + this.manaRegenBonus;
				if (this.IsStandingStillForSpecialEffects || this.grappling[0] >= 0 || this.manaRegenBuff)
				{
					this.manaRegen += this.statManaMax2 / 3;
				}
				if (this.usedArcaneCrystal)
				{
					this.manaRegen += this.statManaMax2 / 50;
				}
				float num2 = (float)this.statMana / (float)this.statManaMax2 * 0.8f + 0.2f;
				if (this.manaRegenBuff)
				{
					num2 = 1f;
				}
				this.manaRegen = (int)((double)((float)this.manaRegen * num2) * 1.15);
			}
			else
			{
				this.manaRegen = 0;
			}
			this.manaRegenCount += this.manaRegen;
			while (this.manaRegenCount >= 120)
			{
				bool flag = false;
				this.manaRegenCount -= 120;
				if (this.statMana < this.statManaMax2)
				{
					this.statMana++;
					flag = true;
				}
				if (this.statMana >= this.statManaMax2)
				{
					if (this.whoAmI == Main.myPlayer && flag)
					{
						SoundEngine.PlaySound(25, -1, -1, 1, 1f, 0f);
						for (int i = 0; i < 5; i++)
						{
							int num3 = Dust.NewDust(this.position, this.width, this.height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
							Main.dust[num3].noLight = true;
							Main.dust[num3].noGravity = true;
							Main.dust[num3].velocity *= 0.5f;
						}
					}
					this.statMana = this.statManaMax2;
				}
			}
		}

		// Token: 0x060007A0 RID: 1952 RVA: 0x002E1388 File Offset: 0x002DF588
		public void UpdateJumpHeight()
		{
			if (this.mount.Active)
			{
				Player.jumpHeight = this.mount.JumpHeight(this.velocity.X);
				Player.jumpSpeed = this.mount.JumpSpeed(this.velocity.X);
			}
			else
			{
				if (this.jumpBoost)
				{
					Player.jumpHeight = 20;
					Player.jumpSpeed = 6.51f;
				}
				if (this.empressBrooch)
				{
					this.jumpSpeedBoost += 1.8f;
				}
				if (this.frogLegJumpBoost)
				{
					this.jumpSpeedBoost += 2.4f;
					this.extraFall += 15;
				}
				if (this.moonLordLegs)
				{
					this.jumpSpeedBoost += 1.8f;
					this.extraFall += 10;
					Player.jumpHeight++;
				}
				if (this.wereWolf)
				{
					Player.jumpHeight += 2;
					Player.jumpSpeed += 0.2f;
				}
				if (this.portableStoolInfo.IsInUse)
				{
					Player.jumpHeight += 5;
				}
				Player.jumpSpeed += this.jumpSpeedBoost;
			}
			if (this.sticky)
			{
				Player.jumpHeight /= 10;
				Player.jumpSpeed /= 5f;
			}
			if (this.dazed)
			{
				Player.jumpHeight /= 5;
				Player.jumpSpeed /= 2f;
			}
		}

		// Token: 0x060007A1 RID: 1953 RVA: 0x002E1508 File Offset: 0x002DF708
		public void FindPulley()
		{
			if (this.portableStoolInfo.IsInUse)
			{
				return;
			}
			if (this.controlUp || this.controlDown)
			{
				int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num2 = (int)(this.position.Y - 8f) / 16;
				if (WorldGen.IsRope(num, num2))
				{
					float num3 = this.position.Y;
					if (Main.tile[num, num2 - 1] == null)
					{
						Main.tile[num, num2 - 1] = new Tile();
					}
					if (Main.tile[num, num2 + 1] == null)
					{
						Main.tile[num, num2 + 1] = new Tile();
					}
					if ((!Main.tile[num, num2 - 1].active() || !Main.tileRope[(int)Main.tile[num, num2 - 1].type]) && (!Main.tile[num, num2 + 1].active() || !Main.tileRope[(int)Main.tile[num, num2 + 1].type]))
					{
						num3 = (float)(num2 * 16 + 22);
					}
					float num4 = (float)(num * 16 + 8 - this.width / 2 + 6 * this.direction);
					int num5 = num * 16 + 8 - this.width / 2 + 6;
					int num6 = num * 16 + 8 - this.width / 2;
					int num7 = num * 16 + 8 - this.width / 2 + -6;
					int num8 = 1;
					float num9 = Math.Abs(this.position.X - (float)num5);
					if (Math.Abs(this.position.X - (float)num6) < num9)
					{
						num8 = 2;
						num9 = Math.Abs(this.position.X - (float)num6);
					}
					if (Math.Abs(this.position.X - (float)num7) < num9)
					{
						num8 = 3;
						num9 = Math.Abs(this.position.X - (float)num7);
					}
					if (num8 == 1)
					{
						num4 = (float)num5;
						this.pulleyDir = 2;
						this.direction = 1;
					}
					if (num8 == 2)
					{
						num4 = (float)num6;
						this.pulleyDir = 1;
					}
					if (num8 == 3)
					{
						num4 = (float)num7;
						this.pulleyDir = 2;
						this.direction = -1;
					}
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
						return;
					}
					num4 = (float)num5;
					this.pulleyDir = 2;
					this.direction = 1;
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
						return;
					}
					num4 = (float)num7;
					this.pulleyDir = 2;
					this.direction = -1;
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
					}
				}
			}
		}

		// Token: 0x060007A2 RID: 1954 RVA: 0x002E1920 File Offset: 0x002DFB20
		public void HorizontalMovement()
		{
			if (this.chilled)
			{
				this.accRunSpeed = this.maxRunSpeed;
			}
			bool flag = (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange;
			bool flag2 = this.controlLeft || this.controlRight;
			float num = (this.accRunSpeed + this.maxRunSpeed) / 2f;
			float num2 = 0f;
			bool flag3 = false;
			if (flag2 && this.mount.Active && this.mount.Type == 43 && this.velocity.Y == 0f && !this.controlJump)
			{
				SoundEngine.PlaySound(SoundID.Item168, base.Center);
				float num3 = Player.jumpSpeed * this.gravDir * 0.5f;
				if (num3 < 2f)
				{
					num3 = 2f;
				}
				num3 += 0.01f;
				this.velocity.Y = -num3;
				this.jump = Player.jumpHeight;
				this.fullRotation = 0f;
				return;
			}
			if (this.windPushed && !this.isLockedToATile && (!this.mount.Active || this.velocity.Y != 0f || !flag2))
			{
				num2 = (float)Math.Sign(Main.windSpeedCurrent) * 0.06f;
				if (Math.Abs(Main.windSpeedCurrent) > 0.5f)
				{
					num2 *= 1.37f;
				}
				if (this.velocity.Y != 0f)
				{
					num2 *= 1.5f;
				}
				if (flag2)
				{
					num2 *= 0.8f;
					float num4 = 0.072f;
					num2 = MathHelper.Clamp(num2, -num4, num4);
				}
				flag3 = true;
				if (Math.Sign(this.direction) != Math.Sign(num2))
				{
					num -= Math.Abs(num2) * 40f;
				}
			}
			if (this.trackBoost != 0f)
			{
				this.velocity.X = this.velocity.X + this.trackBoost;
				this.trackBoost = 0f;
				if (this.velocity.X < 0f)
				{
					if (this.velocity.X < -this.maxRunSpeed)
					{
						this.velocity.X = -this.maxRunSpeed;
					}
				}
				else if (this.velocity.X > this.maxRunSpeed)
				{
					this.velocity.X = this.maxRunSpeed;
				}
			}
			if (this.controlLeft && this.velocity.X > -this.maxRunSpeed)
			{
				if (!this.mount.Active || !this.mount.Cart || this.velocity.Y == 0f)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					this.velocity.X = this.velocity.X - this.runAcceleration;
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
				{
					if (this.velocity.X < 0f && flag)
					{
						this.direction = -1;
					}
					else if (this.itemAnimation <= 0 && this.velocity.Y == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item55, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2);
						DelegateMethods.Minecart.rotation = this.fullRotation;
						DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
						if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
						{
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
						{
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
							}
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else
						{
							Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
						}
					}
				}
				else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = -1;
				}
			}
			else if (this.controlRight && this.velocity.X < this.maxRunSpeed)
			{
				if (!this.mount.Active || !this.mount.Cart || this.velocity.Y == 0f)
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					this.velocity.X = this.velocity.X + this.runAcceleration;
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
				{
					if (this.velocity.X > 0f && flag)
					{
						this.direction = 1;
					}
					else if (this.itemAnimation <= 0 && this.velocity.Y == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item55, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2);
						DelegateMethods.Minecart.rotation = this.fullRotation;
						DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
						if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
						{
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
						{
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
							}
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else
						{
							Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 1);
						}
					}
				}
				else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = 1;
				}
			}
			else if (this.controlLeft && this.velocity.X > -this.accRunSpeed && this.dashDelay >= 0)
			{
				if (this.mount.Active && this.mount.Cart)
				{
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
				}
				else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = -1;
				}
				if (this.velocity.Y == 0f || this.wingsLogic > 0 || this.mount.CanFly())
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					this.velocity.X = this.velocity.X - this.runAcceleration * 0.2f;
					if (this.wingsLogic > 0)
					{
						this.velocity.X = this.velocity.X - this.runAcceleration * 0.2f;
					}
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X < this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.velocity.X < -num && this.velocity.Y == 0f && !this.mount.Active)
				{
					this.SpawnFastRunParticles();
				}
			}
			else if (this.controlRight && this.velocity.X < this.accRunSpeed && this.dashDelay >= 0)
			{
				if (this.mount.Active && this.mount.Cart)
				{
					if (this.velocity.X > 0f)
					{
						this.direction = -1;
					}
				}
				else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = 1;
				}
				if (this.velocity.Y == 0f || this.wingsLogic > 0 || this.mount.CanFly())
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					this.velocity.X = this.velocity.X + this.runAcceleration * 0.2f;
					if (this.wingsLogic > 0)
					{
						this.velocity.X = this.velocity.X + this.runAcceleration * 0.2f;
					}
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.velocity.X > num && this.velocity.Y == 0f && !this.mount.Active)
				{
					this.SpawnFastRunParticles();
				}
			}
			else if (this.mount.Active && this.mount.Cart && Math.Abs(this.velocity.X) >= 1f)
			{
				if (this.onWrongGround)
				{
					if (this.velocity.X > 0f)
					{
						if (this.velocity.X > this.runSlowdown)
						{
							this.velocity.X = this.velocity.X - this.runSlowdown;
						}
						else
						{
							this.velocity.X = 0f;
						}
					}
					else if (this.velocity.X < 0f)
					{
						if (this.velocity.X < -this.runSlowdown)
						{
							this.velocity.X = this.velocity.X + this.runSlowdown;
						}
						else
						{
							this.velocity.X = 0f;
						}
					}
				}
				if (this.velocity.X > this.maxRunSpeed)
				{
					this.velocity.X = this.maxRunSpeed;
				}
				if (this.velocity.X < -this.maxRunSpeed)
				{
					this.velocity.X = -this.maxRunSpeed;
				}
			}
			else if (this.velocity.Y == 0f)
			{
				if (this.velocity.X > this.runSlowdown)
				{
					this.velocity.X = this.velocity.X - this.runSlowdown;
				}
				else if (this.velocity.X < -this.runSlowdown)
				{
					this.velocity.X = this.velocity.X + this.runSlowdown;
				}
				else
				{
					this.velocity.X = 0f;
				}
			}
			else if (!this.PortalPhysicsEnabled)
			{
				if ((double)this.velocity.X > (double)this.runSlowdown * 0.5)
				{
					this.velocity.X = this.velocity.X - this.runSlowdown * 0.5f;
				}
				else if ((double)this.velocity.X < (double)(-(double)this.runSlowdown) * 0.5)
				{
					this.velocity.X = this.velocity.X + this.runSlowdown * 0.5f;
				}
				else
				{
					this.velocity.X = 0f;
				}
			}
			if (flag3)
			{
				if (num2 < 0f && this.velocity.X > num2)
				{
					this.velocity.X = this.velocity.X + num2;
					if (this.velocity.X < num2)
					{
						this.velocity.X = num2;
					}
				}
				if (num2 > 0f && this.velocity.X < num2)
				{
					this.velocity.X = this.velocity.X + num2;
					if (this.velocity.X > num2)
					{
						this.velocity.X = num2;
					}
				}
			}
			bool flag4 = this.mount.Type == 40 || this.mount.Type == 41 || this.mount.Type == 42;
			if (this.mount.Active && (this.mount.Type == 10 || this.mount.Type == 47 || flag4) && Math.Abs(this.velocity.X) > this.mount.DashSpeed - this.mount.RunSpeed / 2f)
			{
				Rectangle rect = this.getRect();
				if (this.direction == 1)
				{
					rect.Offset(this.width - 1, 0);
				}
				rect.Width = 2;
				rect.Inflate(6, 12);
				int num5 = 60;
				if (flag4)
				{
					num5 = 30;
				}
				float damage = (float)num5 * this.minionDamage;
				float knockback = 10f;
				if (flag4)
				{
					knockback = 7f;
				}
				int npcimmuneTime = 30;
				int playerImmuneTime = 6;
				this.CollideWithNPCs(rect, damage, knockback, npcimmuneTime, playerImmuneTime);
			}
			if (this.mount.Active && this.mount.Type == 44 && Math.Abs(this.velocity.X) > this.mount.DashSpeed - this.mount.RunSpeed / 4f)
			{
				Rectangle rect2 = this.getRect();
				if (this.direction == 1)
				{
					rect2.Offset(this.width - 1, 0);
				}
				rect2.Width = 2;
				rect2.Inflate(6, 12);
				float damage2 = (float)100 * this.minionDamage;
				float knockback2 = 12f;
				int npcimmuneTime2 = 30;
				int playerImmuneTime2 = 6;
				this.CollideWithNPCs(rect2, damage2, knockback2, npcimmuneTime2, playerImmuneTime2);
			}
			if (this.mount.Active && this.mount.Type == 45 && Math.Abs(this.velocity.X) > this.mount.DashSpeed * 0.9f)
			{
				Rectangle rect3 = this.getRect();
				if (this.direction == 1)
				{
					rect3.Offset(this.width - 1, 0);
				}
				rect3.Width = 2;
				rect3.Inflate(6, 12);
				float damage3 = (float)120 * this.minionDamage;
				float knockback3 = 12f;
				int npcimmuneTime3 = 30;
				int playerImmuneTime3 = 6;
				this.CollideWithNPCs(rect3, damage3, knockback3, npcimmuneTime3, playerImmuneTime3);
			}
			if (this.mount.Active && this.mount.Type == 14 && Math.Abs(this.velocity.X) > this.mount.RunSpeed / 2f)
			{
				Rectangle rect4 = this.getRect();
				if (this.direction == 1)
				{
					rect4.Offset(this.width - 1, 0);
				}
				rect4.Width = 2;
				rect4.Inflate(6, 12);
				float damage4 = 90f * this.minionDamage;
				float knockback4 = 10f;
				int npcimmuneTime4 = 30;
				int playerImmuneTime4 = 6;
				this.CollideWithNPCs(rect4, damage4, knockback4, npcimmuneTime4, playerImmuneTime4);
			}
			if (this.mount.Active && this.mount.Type == 17 && Math.Abs(this.velocity.X) > this.mount.RunSpeed / 2f)
			{
				Rectangle rect5 = this.getRect();
				if (this.direction == 1)
				{
					rect5.Offset(this.width - 1, 0);
				}
				rect5.Width = 2;
				rect5.Inflate(6, 12);
				float damage5 = (float)40 * this.minionDamage;
				float knockback5 = 10f;
				int npcimmuneTime5 = 30;
				int playerImmuneTime5 = 12;
				this.CollideWithNPCs(rect5, damage5, knockback5, npcimmuneTime5, playerImmuneTime5);
			}
			this.TryUsingDiggerCart();
			if (this.HeldItem.type == 4049 && this.whoAmI == Main.myPlayer)
			{
				this.MowTheLawn();
			}
		}

		// Token: 0x060007A3 RID: 1955 RVA: 0x002E2CC0 File Offset: 0x002E0EC0
		private void TryUsingDiggerCart()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (!this.mount.Active || this.mount.Type != 39)
			{
				return;
			}
			if (this.velocity.Y != 0f)
			{
				return;
			}
			int num = 12;
			int num2 = 20;
			Vector2 value = new Vector2(0f, this.gravDir * 10f);
			Vector2 vector = this.RotatedRelativePoint(base.Center + new Vector2((float)(num * this.direction), this.gravDir * (float)num2), false, true);
			vector += value;
			Tile tileSafely = Framing.GetTileSafely(vector);
			if (!tileSafely.active() || tileSafely.type != 314)
			{
				vector = this.RotatedRelativePoint(base.Center + new Vector2((float)(num * this.direction) * 0.5f, this.gravDir * (float)num2), false, true);
				vector += value;
			}
			int digDirectionY = this.controlDown.ToInt() - this.controlUp.ToInt();
			if (this.controlUp.ToInt() + this.controlDown.ToInt() + this.controlLeft.ToInt() + this.controlRight.ToInt() > 0)
			{
				MinecartDiggerHelper.Instance.TryDigging(this, vector, this.direction, digDirectionY);
			}
		}

		// Token: 0x060007A4 RID: 1956 RVA: 0x002E2E14 File Offset: 0x002E1014
		private void SpawnFastRunParticles()
		{
			int num = 0;
			if (this.gravDir == -1f)
			{
				num -= this.height;
			}
			if (this.runSoundDelay == 0 && this.velocity.Y == 0f)
			{
				SoundEngine.PlaySound(this.hermesStepSound.SoundType, (int)this.position.X, (int)this.position.Y, this.hermesStepSound.SoundStyle, 1f, 0f);
				this.runSoundDelay = this.hermesStepSound.IntendedCooldown;
			}
			if (this.wings == 3)
			{
				int num2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
				Main.dust[num2].velocity *= 0.025f;
				Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				num2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
				Main.dust[num2].velocity *= 0.2f;
				Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				return;
			}
			if (this.sailDash)
			{
				for (int i = 0; i < 4; i++)
				{
					int num3 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y), this.width + 8, this.height, 253, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity.X = Main.dust[num3].velocity.X * 0.2f;
					Main.dust[num3].velocity.Y = Main.dust[num3].velocity.Y * 0.2f;
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					Main.dust[num3].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
					Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					value.Normalize();
					value *= (float)Main.rand.Next(81) * 0.1f;
				}
				return;
			}
			if (this.desertDash)
			{
				Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 32, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 0, default(Color), 1f);
				dust.velocity *= 0.2f;
				dust.velocity.Y = dust.velocity.Y - this.gravDir * 2f;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				return;
			}
			if (this.coldDash)
			{
				for (int j = 0; j < 2; j++)
				{
					int num4;
					if (j == 0)
					{
						num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
					}
					else
					{
						num4 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
					}
					Main.dust[num4].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
					Main.dust[num4].noGravity = true;
					Main.dust[num4].noLight = true;
					Main.dust[num4].velocity *= 0.001f;
					Dust dust2 = Main.dust[num4];
					dust2.velocity.Y = dust2.velocity.Y - 0.003f;
					Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				}
				return;
			}
			if (this.fairyBoots)
			{
				int type = (int)Main.rand.NextFromList(new short[]
				{
					61,
					61,
					61,
					242,
					64,
					63
				});
				int alpha = 0;
				for (int k = 1; k < 3; k++)
				{
					float scale = 1.5f;
					if (k == 2)
					{
						scale = 1f;
					}
					int num5 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, type, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, alpha, default(Color), scale);
					Main.dust[num5].velocity *= 1.5f;
					if (k == 2)
					{
						Main.dust[num5].position += Main.dust[num5].velocity;
					}
					Main.dust[num5].noGravity = true;
					Main.dust[num5].noLightEmittence = true;
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				}
				return;
			}
			if (this.hellfireTreads)
			{
				int num6 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 6, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 2f);
				Main.dust[num6].velocity.X = Main.dust[num6].velocity.X * 0.2f;
				Main.dust[num6].velocity.Y = -1.5f - Main.rand.NextFloat() * 0.5f;
				Main.dust[num6].fadeIn = 0.5f;
				Main.dust[num6].noGravity = true;
				Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				return;
			}
			int num7 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
			Main.dust[num7].velocity.X = Main.dust[num7].velocity.X * 0.2f;
			Main.dust[num7].velocity.Y = Main.dust[num7].velocity.Y * 0.2f;
			Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
		}

		// Token: 0x060007A5 RID: 1957 RVA: 0x002E36F4 File Offset: 0x002E18F4
		private void MowTheLawn()
		{
			if (this.miscCounter % 2 != 0 || this.velocity.Y != 0f || this.grappling[0] != -1)
			{
				return;
			}
			if (this.itemAnimation < 1)
			{
				return;
			}
			Vector2 vector = base.Center + new Vector2((float)(this.direction * 38), (float)(this.height / 2 + 4) * this.gravDir);
			float num = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
			num *= 2f;
			if (num < 1f)
			{
				num = 1f - num;
			}
			else
			{
				num -= 1f;
			}
			Vector2 value = vector + new Vector2((float)(this.direction * -16), this.gravDir * -4f);
			Vector2 value2 = vector + new Vector2((float)(this.direction * -6), this.gravDir * -4f);
			Dust dust = Dust.NewDustDirect(Vector2.Lerp(value, value2, num), 0, 0, 31, 0f, -this.gravDir * 0.25f, 127, default(Color), 1f);
			dust.scale = 0.9f;
			dust.position -= new Vector2(4f);
			if (dust.velocity.Y > 0f)
			{
				Dust dust2 = dust;
				dust2.velocity.Y = dust2.velocity.Y * -1f;
			}
			dust.velocity *= 0.25f;
			Rectangle rectangle = Utils.CenteredRectangle(vector, new Vector2(8f, 20f));
			if (this.velocity.X * (float)this.direction > 0f || this.velocity.Y * this.gravDir > 0f)
			{
				Rectangle myRect = rectangle;
				myRect.Height -= 4;
				myRect.Y += 2;
				float damage = 8f;
				float knockback = 2f;
				int npcimmuneTime = 12;
				int playerImmuneTime = 6;
				this.CollideWithNPCs(myRect, damage, knockback, npcimmuneTime, playerImmuneTime);
			}
			rectangle.X -= this.direction * 10;
			if (this.whoAmI == Main.myPlayer)
			{
				bool[] shouldIgnore = this.ItemCheck_GetTileCutIgnoreList(this.HeldItem);
				this.ItemCheck_CutTiles(this.HeldItem, rectangle, shouldIgnore);
				this.MowGrassTile(vector);
				if (!WorldGen.SolidTile(Framing.GetTileSafely(vector.ToTileCoordinates())))
				{
					this.MowGrassTile(vector + new Vector2(0f, 16f * this.gravDir));
				}
			}
		}

		// Token: 0x060007A6 RID: 1958 RVA: 0x002E3978 File Offset: 0x002E1B78
		private void MowGrassTile(Vector2 thePos)
		{
			Point point = thePos.ToTileCoordinates();
			Tile tile = Main.tile[point.X, point.Y];
			if (tile == null)
			{
				return;
			}
			if (!WorldGen.CanKillTile(point.X, point.Y, WorldGen.SpecialKillTileContext.MowingTheGrass))
			{
				return;
			}
			ushort num = 0;
			ushort type = tile.type;
			if (type != 2)
			{
				if (type == 109)
				{
					num = 492;
				}
			}
			else
			{
				num = 477;
			}
			if (num == 0)
			{
				return;
			}
			int num2 = WorldGen.KillTile_GetTileDustAmount(true, tile);
			for (int i = 0; i < num2; i++)
			{
				WorldGen.KillTile_MakeTileDust(point.X, point.Y, tile);
			}
			tile.type = num;
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, point.X, point.Y, TileChangeType.None);
			}
		}

		// Token: 0x060007A7 RID: 1959 RVA: 0x002E3A34 File Offset: 0x002E1C34
		public int CollideWithNPCs(Rectangle myRect, float Damage, float Knockback, int NPCImmuneTime, int PlayerImmuneTime)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.active && !npc.dontTakeDamage && !npc.friendly && npc.immune[this.whoAmI] == 0 && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc, null))
				{
					Rectangle rect = npc.getRect();
					if (myRect.Intersects(rect) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
					{
						int direction = this.direction;
						if (this.velocity.X < 0f)
						{
							direction = -1;
						}
						if (this.velocity.X > 0f)
						{
							direction = 1;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							this.ApplyDamageToNPC(npc, (int)Damage, Knockback, direction, false);
						}
						npc.immune[this.whoAmI] = NPCImmuneTime;
						this.GiveImmuneTimeForCollisionAttack(PlayerImmuneTime);
						num++;
						break;
					}
				}
			}
			return num;
		}

		// Token: 0x060007A8 RID: 1960 RVA: 0x002E3B54 File Offset: 0x002E1D54
		public void ApplyDamageToNPC(NPC npc, int damage, float knockback, int direction, bool crit)
		{
			int num = Item.NPCtoBanner(npc.BannerID());
			if (num > 0 && this.HasNPCBannerBuff(num))
			{
				if (Main.expertMode)
				{
					damage = (int)((float)damage * ItemID.Sets.BannerStrength[Item.BannerToItem(num)].ExpertDamageDealt);
				}
				else
				{
					damage = (int)((float)damage * ItemID.Sets.BannerStrength[Item.BannerToItem(num)].NormalDamageDealt);
				}
			}
			this.OnHit(npc.Center.X, npc.Center.Y, npc);
			damage += npc.checkArmorPenetration(this.armorPenetration, 0f);
			NPCKillAttempt npckillAttempt = new NPCKillAttempt(npc);
			int dmg = (int)npc.StrikeNPC(damage, knockback, direction, crit, false, false);
			if (this.accDreamCatcher)
			{
				this.addDPS(dmg);
			}
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, null, npc.whoAmI, (float)damage, knockback, (float)direction, crit.ToInt(), 0, 0);
			}
			int num2 = Item.NPCtoBanner(npc.BannerID());
			if (num2 >= 0)
			{
				this.lastCreatureHit = num2;
			}
			if (npckillAttempt.DidNPCDie())
			{
				this.OnKillNPC(ref npckillAttempt, null);
			}
		}

		// Token: 0x060007A9 RID: 1961 RVA: 0x002E3C64 File Offset: 0x002E1E64
		public void OnKillNPC(ref NPCKillAttempt attempt, object externalKillingBlowSource)
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			Item item = externalKillingBlowSource as Item;
			if (item != null && item.type == 5096)
			{
				this.AddBuff(336, 420, false, false);
			}
		}

		// Token: 0x1700011F RID: 287
		// (get) Token: 0x060007AA RID: 1962 RVA: 0x002E3CA8 File Offset: 0x002E1EA8
		public bool SlimeDontHyperJump
		{
			get
			{
				return this.mount.Active && this.mount.IsConsideredASlimeMount && this.wetSlime > 0 && !this.controlJump;
			}
		}

		// Token: 0x060007AB RID: 1963 RVA: 0x002E3CD8 File Offset: 0x002E1ED8
		public void GiveImmuneTimeForCollisionAttack(int time)
		{
			if (this._timeSinceLastImmuneGet <= 20)
			{
				this._immuneStrikes++;
			}
			else
			{
				this._immuneStrikes = 1;
			}
			this._timeSinceLastImmuneGet = 0;
			if (this._immuneStrikes >= 3)
			{
				return;
			}
			if (this.immune && this.immuneTime > time)
			{
				return;
			}
			this.immune = true;
			this.immuneNoBlink = true;
			this.immuneTime = time;
		}

		// Token: 0x060007AC RID: 1964 RVA: 0x002E3D40 File Offset: 0x002E1F40
		public bool CanNPCBeHitByPlayerOrPlayerProjectile(NPC npc, Projectile projectile = null)
		{
			bool flag = this.dontHurtCritters || (projectile != null && (projectile.minion || ProjectileID.Sets.MinionShot[projectile.type] || projectile.sentry || ProjectileID.Sets.SentryShot[projectile.type]));
			return !NPCID.Sets.CountsAsCritter[npc.type] || !flag;
		}

		// Token: 0x060007AD RID: 1965 RVA: 0x002E3DA0 File Offset: 0x002E1FA0
		public void JumpMovement()
		{
			if (this.mount.Active && this.mount.IsConsideredASlimeMount && this.wetSlime == 0 && this.velocity.Y > 0f)
			{
				Rectangle rect = this.getRect();
				rect.Offset(0, this.height - 1);
				rect.Height = 2;
				rect.Inflate(12, 6);
				for (int i = 0; i < 200; i++)
				{
					NPC npc = Main.npc[i];
					if (npc.active && !npc.dontTakeDamage && !npc.friendly && npc.immune[this.whoAmI] == 0 && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc, null))
					{
						Rectangle rect2 = npc.getRect();
						if (rect.Intersects(rect2) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
						{
							float num = 40f * this.minionDamage;
							float knockback = 5f;
							int direction = this.direction;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.velocity.X > 0f)
							{
								direction = 1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(npc, (int)num, knockback, direction, false);
							}
							npc.immune[this.whoAmI] = 10;
							this.velocity.Y = -10f;
							this.GiveImmuneTimeForCollisionAttack(6);
							break;
						}
					}
				}
			}
			if (this.mount.Active && this.mount.Type == 17 && this.velocity.Y > 0f)
			{
				Rectangle rect3 = this.getRect();
				rect3.Offset(0, this.height - 1);
				rect3.Height = 2;
				rect3.Inflate(12, 6);
				for (int j = 0; j < 200; j++)
				{
					NPC npc2 = Main.npc[j];
					if (npc2.active && !npc2.dontTakeDamage && !npc2.friendly && npc2.immune[this.whoAmI] == 0 && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc2, null))
					{
						Rectangle rect4 = npc2.getRect();
						if (rect3.Intersects(rect4) && (npc2.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc2.position, npc2.width, npc2.height)))
						{
							float num2 = 40f;
							float knockback2 = 5f;
							int direction2 = this.direction;
							if (this.velocity.X < 0f)
							{
								direction2 = -1;
							}
							if (this.velocity.X > 0f)
							{
								direction2 = 1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(npc2, (int)num2, knockback2, direction2, false);
							}
							npc2.immune[this.whoAmI] = 12;
							this.GiveImmuneTimeForCollisionAttack(12);
							break;
						}
					}
				}
			}
			if (this.controlJump)
			{
				if (this.sliding)
				{
					this.autoJump = false;
				}
				bool flag = false;
				bool flag2 = this.wet && this.accFlipper;
				bool flag3 = !this.mount.Active || !this.mount.Cart;
				if (this.mount.Active && this.mount.IsConsideredASlimeMount && this.wetSlime > 0)
				{
					this.wetSlime = 0;
					flag = true;
				}
				if (this.mount.Active && this.mount.Type == 43 && this.releaseJump && this.velocity.Y != 0f)
				{
					this.isPerformingPogostickTricks = true;
				}
				if (this.jump > 0)
				{
					if (this.velocity.Y == 0f)
					{
						this.jump = 0;
					}
					else
					{
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						if (this.merman && (!this.mount.Active || !this.mount.Cart))
						{
							if (this.swimTime <= 10)
							{
								this.swimTime = 30;
							}
						}
						else
						{
							this.jump--;
						}
					}
				}
				else if ((this.sliding || this.velocity.Y == 0f || flag || this.canJumpAgain_Cloud || this.canJumpAgain_Sandstorm || this.canJumpAgain_Blizzard || this.canJumpAgain_Fart || this.canJumpAgain_Sail || this.canJumpAgain_Unicorn || this.canJumpAgain_Santank || this.canJumpAgain_WallOfFleshGoat || this.canJumpAgain_Basilisk || (flag2 && flag3)) && (this.releaseJump || (this.autoJump && (this.velocity.Y == 0f || this.sliding))))
				{
					if (this.mount.Active && MountID.Sets.Cart[this.mount.Type])
					{
						this.position.Y = this.position.Y - 0.001f;
					}
					if (this.sliding || this.velocity.Y == 0f)
					{
						this.justJumped = true;
					}
					bool flag4 = false;
					if (this.wet && this.accFlipper)
					{
						if (this.swimTime == 0)
						{
							this.swimTime = 30;
						}
						flag4 = true;
					}
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					bool flag11 = false;
					bool flag12 = false;
					if (!flag2 && !flag)
					{
						if (this.canJumpAgain_Basilisk)
						{
							flag12 = true;
							this.canJumpAgain_Basilisk = false;
						}
						if (this.canJumpAgain_WallOfFleshGoat)
						{
							flag11 = true;
							this.canJumpAgain_WallOfFleshGoat = false;
						}
						else if (this.canJumpAgain_Santank)
						{
							flag10 = true;
							this.canJumpAgain_Santank = false;
						}
						else if (this.canJumpAgain_Unicorn)
						{
							flag9 = true;
							this.canJumpAgain_Unicorn = false;
						}
						else if (this.canJumpAgain_Sandstorm)
						{
							flag5 = true;
							this.canJumpAgain_Sandstorm = false;
						}
						else if (this.canJumpAgain_Blizzard)
						{
							flag6 = true;
							this.canJumpAgain_Blizzard = false;
						}
						else if (this.canJumpAgain_Fart)
						{
							this.canJumpAgain_Fart = false;
							flag7 = true;
						}
						else if (this.canJumpAgain_Sail)
						{
							this.canJumpAgain_Sail = false;
							flag8 = true;
						}
						else
						{
							this.canJumpAgain_Cloud = false;
						}
					}
					this.canRocket = false;
					this.rocketRelease = false;
					if (this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped))
					{
						this.RefreshDoubleJumps();
					}
					if (this.velocity.Y == 0f || flag4 || this.sliding || flag)
					{
						if (this.mount.Active && this.mount.Type == 43)
						{
							SoundEngine.PlaySound(SoundID.Item168, base.Center);
						}
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight;
						if (this.portableStoolInfo.IsInUse)
						{
							this.position.Y = this.position.Y - (float)this.portableStoolInfo.HeightBoost;
							this.gfxOffY += (float)this.portableStoolInfo.HeightBoost;
						}
						if (this.sliding)
						{
							this.velocity.X = (float)(3 * -(float)this.slideDir);
						}
					}
					else if (flag5)
					{
						this.isPerformingJump_Sandstorm = true;
						int height = this.height;
						float num3 = this.gravDir;
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 3;
					}
					else if (flag6)
					{
						this.isPerformingJump_Blizzard = true;
						int height2 = this.height;
						float num4 = this.gravDir;
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 1.5);
					}
					else if (flag8)
					{
						this.isPerformingJump_Sail = true;
						int num5 = this.height;
						if (this.gravDir == -1f)
						{
							num5 = 0;
						}
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 1.25);
						for (int k = 0; k < 30; k++)
						{
							int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num5), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, default(Color), 1.5f);
							if (k % 2 == 0)
							{
								Dust dust = Main.dust[num6];
								dust.velocity.X = dust.velocity.X + (float)Main.rand.Next(30, 71) * 0.1f;
							}
							else
							{
								Dust dust2 = Main.dust[num6];
								dust2.velocity.X = dust2.velocity.X - (float)Main.rand.Next(30, 71) * 0.1f;
							}
							Dust dust3 = Main.dust[num6];
							dust3.velocity.Y = dust3.velocity.Y + (float)Main.rand.Next(-10, 31) * 0.1f;
							Main.dust[num6].noGravity = true;
							Main.dust[num6].scale += (float)Main.rand.Next(-10, 41) * 0.01f;
							Main.dust[num6].velocity *= Main.dust[num6].scale * 0.7f;
							Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value.Normalize();
							value *= (float)Main.rand.Next(81) * 0.1f;
						}
					}
					else if (flag7)
					{
						this.isPerformingJump_Fart = true;
						int num7 = this.height;
						if (this.gravDir == -1f)
						{
							num7 = 0;
						}
						SoundEngine.PlaySound(SoundID.Item16, this.position);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						for (int l = 0; l < 10; l++)
						{
							int num8 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num7 - 16f), 102, 32, 188, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num8].velocity.X = Main.dust[num8].velocity.X * 0.5f - this.velocity.X * 0.1f;
							Main.dust[num8].velocity.Y = Main.dust[num8].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
						}
						int num9 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 16f, this.position.Y + (float)num7 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num9 = Gore.NewGore(new Vector2(this.position.X - 36f, this.position.Y + (float)num7 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num9 = Gore.NewGore(new Vector2(this.position.X + (float)this.width + 4f, this.position.Y + (float)num7 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
					}
					else if (flag9)
					{
						this.isPerformingJump_Unicorn = true;
						int height3 = this.height;
						float num10 = this.gravDir;
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						Vector2 center = base.Center;
						Vector2 value2 = new Vector2(50f, 20f);
						float num11 = 6.2831855f * Main.rand.NextFloat();
						for (int m = 0; m < 5; m++)
						{
							for (float num12 = 0f; num12 < 14f; num12 += 1f)
							{
								Dust dust4 = Main.dust[Dust.NewDust(center, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[]
								{
									176,
									177,
									179
								}), 0f, 0f, 0, default(Color), 1f)];
								Vector2 vector = Vector2.UnitY.RotatedBy((double)(num12 * 6.2831855f / 14f + num11), default(Vector2));
								vector *= 0.2f * (float)m;
								dust4.position = center + vector * value2;
								dust4.velocity = vector + new Vector2(0f, this.gravDir * 4f);
								dust4.noGravity = true;
								dust4.scale = 1f + Main.rand.NextFloat() * 0.8f;
								dust4.fadeIn = Main.rand.NextFloat() * 2f;
								dust4.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
							}
						}
					}
					else if (flag11)
					{
						this.isPerformingJump_WallOfFleshGoat = true;
						int height4 = this.height;
						float num13 = this.gravDir;
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						Vector2 center2 = base.Center;
						Vector2 value3 = new Vector2(50f, 20f);
						float num14 = 6.2831855f * Main.rand.NextFloat();
						for (int n = 0; n < 5; n++)
						{
							for (float num15 = 0f; num15 < 14f; num15 += 1f)
							{
								Dust dust5 = Main.dust[Dust.NewDust(center2, 0, 0, 6, 0f, 0f, 0, default(Color), 1f)];
								Vector2 vector2 = Vector2.UnitY.RotatedBy((double)(num15 * 6.2831855f / 14f + num14), default(Vector2));
								vector2 *= 0.2f * (float)n;
								dust5.position = center2 + vector2 * value3;
								dust5.velocity = vector2 + new Vector2(0f, this.gravDir * 4f);
								dust5.noGravity = true;
								dust5.scale = 1f + Main.rand.NextFloat() * 0.8f;
								dust5.fadeIn = Main.rand.NextFloat() * 2f;
								dust5.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
							}
						}
					}
					else if (flag12)
					{
						this.isPerformingJump_Basilisk = true;
						int height5 = this.height;
						float num16 = this.gravDir;
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 0.75);
						Vector2 center3 = base.Center;
						Vector2 value4 = new Vector2(50f, 20f);
						float num17 = 6.2831855f * Main.rand.NextFloat();
						for (int num18 = 0; num18 < 5; num18++)
						{
							for (float num19 = 0f; num19 < 14f; num19 += 1f)
							{
								Dust dust6 = Main.dust[Dust.NewDust(center3, 0, 0, 31, 0f, 0f, 0, default(Color), 1f)];
								Vector2 vector3 = Vector2.UnitY.RotatedBy((double)(num19 * 6.2831855f / 14f + num17), default(Vector2));
								vector3 *= 0.2f * (float)num18;
								dust6.position = center3 + vector3 * value4;
								dust6.velocity = vector3 + new Vector2(0f, this.gravDir * 4f);
								dust6.noGravity = true;
								dust6.scale = 1f + Main.rand.NextFloat() * 0.8f;
								dust6.fadeIn = Main.rand.NextFloat() * 2f;
								dust6.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
							}
						}
					}
					else if (flag10)
					{
						this.isPerformingJump_Santank = true;
						int num20 = this.height;
						if (this.gravDir == -1f)
						{
							num20 = 0;
						}
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						for (int num21 = 0; num21 < 15; num21++)
						{
							int num22 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num20 - 16f), 102, 32, 4, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, new Color(250, 230, 230, 150), 1.5f);
							Main.dust[num22].velocity.X = Main.dust[num22].velocity.X * 0.5f - this.velocity.X * 0.1f;
							Main.dust[num22].velocity.Y = Main.dust[num22].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
							Main.dust[num22].noGravity = true;
							num22 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num20 - 16f), 102, 32, 6, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 20, default(Color), 1.5f);
							Dust dust7 = Main.dust[num22];
							dust7.velocity.Y = dust7.velocity.Y - 1f;
							if (num21 % 2 == 0)
							{
								Main.dust[num22].fadeIn = Main.rand.NextFloat() * 2f;
							}
						}
						float y = base.Bottom.Y - 22f;
						for (int num23 = 0; num23 < 3; num23++)
						{
							Vector2 center4 = base.Center;
							switch (num23)
							{
							case 0:
								center4 = new Vector2(base.Center.X - 16f, y);
								break;
							case 1:
								center4 = new Vector2(this.position.X - 36f, y);
								break;
							case 2:
								center4 = new Vector2(base.Right.X + 4f, y);
								break;
							}
							int num24 = Gore.NewGore(center4, new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(61, 63), 1f);
							Main.gore[num24].velocity *= 0.1f;
							Gore gore = Main.gore[num24];
							gore.velocity.X = gore.velocity.X - this.velocity.X * 0.1f;
							Gore gore2 = Main.gore[num24];
							gore2.velocity.Y = gore2.velocity.Y - this.velocity.Y * 0.05f;
							Main.gore[num24].velocity += Main.rand.NextVector2Circular(1f, 1f) * 0.5f;
						}
					}
					else
					{
						this.isPerformingJump_Cloud = true;
						int num25 = this.height;
						if (this.gravDir == -1f)
						{
							num25 = 0;
						}
						SoundEngine.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 0.75);
						for (int num26 = 0; num26 < 10; num26++)
						{
							int num27 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num25 - 16f), 102, 32, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num27].velocity.X = Main.dust[num27].velocity.X * 0.5f - this.velocity.X * 0.1f;
							Main.dust[num27].velocity.Y = Main.dust[num27].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
						}
						int num28 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 16f, this.position.Y + (float)num25 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num28].velocity.X = Main.gore[num28].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num28].velocity.Y = Main.gore[num28].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num28 = Gore.NewGore(new Vector2(this.position.X - 36f, this.position.Y + (float)num25 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num28].velocity.X = Main.gore[num28].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num28].velocity.Y = Main.gore[num28].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num28 = Gore.NewGore(new Vector2(this.position.X + (float)this.width + 4f, this.position.Y + (float)num25 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num28].velocity.X = Main.gore[num28].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num28].velocity.Y = Main.gore[num28].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
					}
				}
				this.releaseJump = false;
				return;
			}
			this.jump = 0;
			this.releaseJump = true;
			this.rocketRelease = true;
		}

		// Token: 0x060007AE RID: 1966 RVA: 0x002E59C0 File Offset: 0x002E3BC0
		public void DashMovement()
		{
			if (this.dashDelay == 0)
			{
				this.dash = this.dashType;
			}
			if (this.dash == 0)
			{
				this.dashTime = 0;
				this.dashDelay = 0;
			}
			if (this.dash == 2 && this.eocDash > 0)
			{
				if (this.eocHit < 0)
				{
					Rectangle rectangle = new Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
					for (int i = 0; i < 200; i++)
					{
						NPC npc = Main.npc[i];
						if (npc.active && !npc.dontTakeDamage && !npc.friendly && (npc.aiStyle != 112 || npc.ai[2] <= 1f) && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc, null))
						{
							Rectangle rect = npc.getRect();
							if (rectangle.Intersects(rect) && (npc.noTileCollide || this.CanHit(npc)))
							{
								float num = 30f * this.meleeDamage;
								float num2 = 9f;
								bool crit = false;
								if (this.kbGlove)
								{
									num2 *= 2f;
								}
								if (this.kbBuff)
								{
									num2 *= 1.5f;
								}
								if (Main.rand.Next(100) < this.meleeCrit)
								{
									crit = true;
								}
								int num3 = this.direction;
								if (this.velocity.X < 0f)
								{
									num3 = -1;
								}
								if (this.velocity.X > 0f)
								{
									num3 = 1;
								}
								if (this.whoAmI == Main.myPlayer)
								{
									this.ApplyDamageToNPC(npc, (int)num, num2, num3, crit);
								}
								this.eocDash = 10;
								this.dashDelay = 30;
								this.velocity.X = (float)(-(float)num3 * 9);
								this.velocity.Y = -4f;
								this.GiveImmuneTimeForCollisionAttack(4);
								this.eocHit = i;
							}
						}
					}
				}
				else if ((!this.controlLeft || this.velocity.X >= 0f) && (!this.controlRight || this.velocity.X <= 0f))
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
			}
			if (this.dash == 3 && this.dashDelay < 0 && this.whoAmI == Main.myPlayer)
			{
				Rectangle rectangle2 = new Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
				for (int j = 0; j < 200; j++)
				{
					NPC npc2 = Main.npc[j];
					if (npc2.active && !npc2.dontTakeDamage && !npc2.friendly && npc2.immune[this.whoAmI] <= 0 && (npc2.aiStyle != 112 || npc2.ai[2] <= 1f) && this.CanNPCBeHitByPlayerOrPlayerProjectile(npc2, null))
					{
						Rectangle rect2 = npc2.getRect();
						if (rectangle2.Intersects(rect2) && (npc2.noTileCollide || this.CanHit(npc2)))
						{
							if (!this.solarDashConsumedFlare)
							{
								this.solarDashConsumedFlare = true;
								this.ConsumeSolarFlare();
							}
							float num4 = 150f * this.meleeDamage;
							float num5 = 9f;
							bool crit2 = false;
							if (this.kbGlove)
							{
								num5 *= 2f;
							}
							if (this.kbBuff)
							{
								num5 *= 1.5f;
							}
							if (Main.rand.Next(100) < this.meleeCrit)
							{
								crit2 = true;
							}
							int direction = this.direction;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.velocity.X > 0f)
							{
								direction = 1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(npc2, (int)num4, num5, direction, crit2);
								int num6 = Projectile.NewProjectile(this.GetProjectileSource_OnHit(npc2, 2), base.Center.X, base.Center.Y, 0f, 0f, 608, (int)num4, 15f, Main.myPlayer, 0f, 0f, 0f);
								Main.projectile[num6].Kill();
							}
							npc2.immune[this.whoAmI] = 6;
							this.GiveImmuneTimeForCollisionAttack(4);
						}
					}
				}
			}
			if (this.dashDelay > 0)
			{
				if (this.eocDash > 0)
				{
					this.eocDash--;
				}
				if (this.eocDash == 0)
				{
					this.eocHit = -1;
				}
				this.dashDelay--;
				return;
			}
			if (this.dashDelay < 0)
			{
				this.StopVanityActions(true);
				float num7 = 12f;
				float num8 = 0.992f;
				float num9 = Math.Max(this.accRunSpeed, this.maxRunSpeed);
				float num10 = 0.96f;
				int num11 = 20;
				if (this.dash == 1)
				{
					for (int k = 0; k < 2; k++)
					{
						int num12;
						if (this.velocity.Y == 0f)
						{
							num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 4f), this.width, 8, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						else
						{
							num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 8f), this.width, 16, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						Main.dust[num12].velocity *= 0.1f;
						Main.dust[num12].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					}
				}
				else if (this.dash == 2)
				{
					for (int l = 0; l < 0; l++)
					{
						int num13;
						if (this.velocity.Y == 0f)
						{
							num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 4f), this.width, 8, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						else
						{
							num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 8f), this.width, 16, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						Main.dust[num13].velocity *= 0.1f;
						Main.dust[num13].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					}
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 30;
				}
				else if (this.dash == 3)
				{
					for (int m = 0; m < 4; m++)
					{
						int num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 6, 0f, 0f, 100, default(Color), 1.7f);
						Main.dust[num14].velocity *= 0.1f;
						Main.dust[num14].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						Main.dust[num14].noGravity = true;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num14].fadeIn = 0.5f;
						}
					}
					num7 = 14f;
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 20;
				}
				else if (this.dash == 4)
				{
					for (int n = 0; n < 2; n++)
					{
						int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 229, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num15].velocity *= 0.1f;
						Main.dust[num15].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num15].noGravity = true;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num15].fadeIn = 0.3f;
						}
					}
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 20;
				}
				if (this.dash == 5)
				{
					for (int num16 = 0; num16 < 2; num16++)
					{
						int type = (int)Main.rand.NextFromList(new short[]
						{
							68,
							69,
							70
						});
						int num17;
						if (this.velocity.Y == 0f)
						{
							num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 4f), this.width, 8, type, 0f, 0f, 100, default(Color), 1f);
						}
						else
						{
							num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 8f), this.width, 16, type, 0f, 0f, 100, default(Color), 1f);
						}
						Main.dust[num17].velocity *= 0.2f;
						Main.dust[num17].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num17].fadeIn = 0.5f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num17].noGravity = true;
						Main.dust[num17].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
				if (this.dash > 0)
				{
					this.doorHelper.AllowOpeningDoorsByVelocityAloneForATime(num11 * 3);
					this.vortexStealthActive = false;
					if (this.velocity.X > num7 || this.velocity.X < -num7)
					{
						this.velocity.X = this.velocity.X * num8;
						return;
					}
					if (this.velocity.X > num9 || this.velocity.X < -num9)
					{
						this.velocity.X = this.velocity.X * num10;
						return;
					}
					this.dashDelay = num11;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = -num9;
						return;
					}
					if (this.velocity.X > 0f)
					{
						this.velocity.X = num9;
						return;
					}
				}
			}
			else if (this.dash > 0 && !this.mount.Active)
			{
				if (this.dash == 1)
				{
					int num18;
					bool flag;
					this.DoCommonDashHandle(out num18, out flag, null);
					if (flag)
					{
						this.velocity.X = 16.9f * (float)num18;
						Point point = (base.Center + new Vector2((float)(num18 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point2 = (base.Center + new Vector2((float)(num18 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point.X, point.Y) || WorldGen.SolidOrSlopedTile(point2.X, point2.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						for (int num19 = 0; num19 < 20; num19++)
						{
							int num20 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num20];
							dust.position.X = dust.position.X + (float)Main.rand.Next(-5, 6);
							Dust dust2 = Main.dust[num20];
							dust2.position.Y = dust2.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num20].velocity *= 0.2f;
							Main.dust[num20].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						}
						int num21 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 34f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num21].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num21].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num21].velocity *= 0.4f;
						num21 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 14f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num21].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num21].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num21].velocity *= 0.4f;
					}
				}
				else if (this.dash == 2)
				{
					int num22;
					bool flag2;
					this.DoCommonDashHandle(out num22, out flag2, null);
					if (flag2)
					{
						this.velocity.X = 14.5f * (float)num22;
						Point point3 = (base.Center + new Vector2((float)(num22 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point4 = (base.Center + new Vector2((float)(num22 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point3.X, point3.Y) || WorldGen.SolidOrSlopedTile(point4.X, point4.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						this.eocDash = 15;
						for (int num23 = 0; num23 < 0; num23++)
						{
							int num24 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust3 = Main.dust[num24];
							dust3.position.X = dust3.position.X + (float)Main.rand.Next(-5, 6);
							Dust dust4 = Main.dust[num24];
							dust4.position.Y = dust4.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num24].velocity *= 0.2f;
							Main.dust[num24].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						}
					}
				}
				else if (this.dash == 3)
				{
					int num25;
					bool flag3;
					this.DoCommonDashHandle(out num25, out flag3, new Player.DashStartAction(this.SolarDashStart));
					if (flag3)
					{
						this.velocity.X = 21.9f * (float)num25;
						Point point5 = (base.Center + new Vector2((float)(num25 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point6 = (base.Center + new Vector2((float)(num25 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point5.X, point5.Y) || WorldGen.SolidOrSlopedTile(point6.X, point6.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						for (int num26 = 0; num26 < 20; num26++)
						{
							int num27 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							Dust dust5 = Main.dust[num27];
							dust5.position.X = dust5.position.X + (float)Main.rand.Next(-5, 6);
							Dust dust6 = Main.dust[num27];
							dust6.position.Y = dust6.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num27].velocity *= 0.2f;
							Main.dust[num27].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num27].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
							Main.dust[num27].noGravity = true;
							Main.dust[num27].fadeIn = 0.5f;
						}
					}
				}
				if (this.dash == 5)
				{
					int num28;
					bool flag4;
					this.DoCommonDashHandle(out num28, out flag4, null);
					if (flag4)
					{
						this.velocity.X = 16.9f * (float)num28;
						Point point7 = (base.Center + new Vector2((float)(num28 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point8 = (base.Center + new Vector2((float)(num28 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point7.X, point7.Y) || WorldGen.SolidOrSlopedTile(point8.X, point8.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						for (int num29 = 0; num29 < 20; num29++)
						{
							int type2 = (int)Main.rand.NextFromList(new short[]
							{
								68,
								69,
								70
							});
							int num30 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, type2, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust7 = Main.dust[num30];
							dust7.position.X = dust7.position.X + (float)Main.rand.Next(-5, 6);
							Dust dust8 = Main.dust[num30];
							dust8.position.Y = dust8.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num30].velocity = base.DirectionTo(Main.dust[num30].position) * 2f;
							Main.dust[num30].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num30].fadeIn = 0.5f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num30].noGravity = true;
							Main.dust[num30].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						}
					}
				}
			}
		}

		// Token: 0x060007AF RID: 1967 RVA: 0x002E703D File Offset: 0x002E523D
		private void SolarDashStart(int dashDirection)
		{
			this.solarDashing = true;
			this.solarDashConsumedFlare = false;
		}

		// Token: 0x060007B0 RID: 1968 RVA: 0x002E7050 File Offset: 0x002E5250
		private void DoCommonDashHandle(out int dir, out bool dashing, Player.DashStartAction dashStartAction = null)
		{
			dir = 0;
			dashing = false;
			if (this.dashTime > 0)
			{
				this.dashTime--;
			}
			if (this.dashTime < 0)
			{
				this.dashTime++;
			}
			if (this.controlRight && this.releaseRight)
			{
				if (this.dashTime <= 0)
				{
					this.dashTime = 15;
					return;
				}
				dir = 1;
				dashing = true;
				this.dashTime = 0;
				this.timeSinceLastDashStarted = 0;
				if (dashStartAction != null)
				{
					dashStartAction(dir);
					return;
				}
			}
			else if (this.controlLeft && this.releaseLeft)
			{
				if (this.dashTime < 0)
				{
					dir = -1;
					dashing = true;
					this.dashTime = 0;
					this.timeSinceLastDashStarted = 0;
					if (dashStartAction != null)
					{
						dashStartAction(dir);
						return;
					}
				}
				else
				{
					this.dashTime = -15;
				}
			}
		}

		// Token: 0x060007B1 RID: 1969 RVA: 0x002E7114 File Offset: 0x002E5314
		public void WallslideMovement()
		{
			this.sliding = false;
			if (this.slideDir != 0 && this.spikedBoots > 0 && !this.mount.Active && ((this.controlLeft && this.slideDir == -1) || (this.controlRight && this.slideDir == 1)))
			{
				bool flag = false;
				float num = this.position.X;
				if (this.slideDir == 1)
				{
					num += (float)this.width;
				}
				num += (float)this.slideDir;
				float num2 = this.position.Y + (float)this.height + 1f;
				if (this.gravDir < 0f)
				{
					num2 = this.position.Y - 1f;
				}
				num /= 16f;
				num2 /= 16f;
				if (WorldGen.SolidTile((int)num, (int)num2, false) && WorldGen.SolidTile((int)num, (int)num2 - 1, false))
				{
					flag = true;
				}
				if (this.spikedBoots >= 2)
				{
					if (flag && ((this.velocity.Y > 0f && this.gravDir == 1f) || (this.velocity.Y < this.gravity && this.gravDir == -1f)))
					{
						float num3 = this.gravity;
						if (this.slowFall)
						{
							if (this.TryingToHoverUp)
							{
								num3 = this.gravity / 10f * this.gravDir;
							}
							else
							{
								num3 = this.gravity / 3f * this.gravDir;
							}
						}
						this.fallStart = (int)(this.position.Y / 16f);
						if ((this.controlDown && this.gravDir == 1f) || (this.controlUp && this.gravDir == -1f))
						{
							this.velocity.Y = 4f * this.gravDir;
							int num4 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), this.position.Y + (float)(this.height / 2) + (float)(this.height / 2 - 4) * this.gravDir), 8, 8, 31, 0f, 0f, 0, default(Color), 1f);
							if (this.slideDir < 0)
							{
								Dust dust = Main.dust[num4];
								dust.position.X = dust.position.X - 10f;
							}
							if (this.gravDir < 0f)
							{
								Dust dust2 = Main.dust[num4];
								dust2.position.Y = dust2.position.Y - 12f;
							}
							Main.dust[num4].velocity *= 0.1f;
							Main.dust[num4].scale *= 1.2f;
							Main.dust[num4].noGravity = true;
							Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
						}
						else if (this.gravDir == -1f)
						{
							this.velocity.Y = (-num3 + 1E-05f) * this.gravDir;
						}
						else
						{
							this.velocity.Y = (-num3 + 1E-05f) * this.gravDir;
						}
						this.sliding = true;
						return;
					}
				}
				else if ((flag && (double)this.velocity.Y > 0.5 && this.gravDir == 1f) || ((double)this.velocity.Y < -0.5 && this.gravDir == -1f))
				{
					this.fallStart = (int)(this.position.Y / 16f);
					if (this.controlDown)
					{
						this.velocity.Y = 4f * this.gravDir;
					}
					else
					{
						this.velocity.Y = 0.5f * this.gravDir;
					}
					this.sliding = true;
					int num5 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), this.position.Y + (float)(this.height / 2) + (float)(this.height / 2 - 4) * this.gravDir), 8, 8, 31, 0f, 0f, 0, default(Color), 1f);
					if (this.slideDir < 0)
					{
						Dust dust3 = Main.dust[num5];
						dust3.position.X = dust3.position.X - 10f;
					}
					if (this.gravDir < 0f)
					{
						Dust dust4 = Main.dust[num5];
						dust4.position.Y = dust4.position.Y - 12f;
					}
					Main.dust[num5].velocity *= 0.1f;
					Main.dust[num5].scale *= 1.2f;
					Main.dust[num5].noGravity = true;
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				}
			}
		}

		// Token: 0x060007B2 RID: 1970 RVA: 0x002E7644 File Offset: 0x002E5844
		public void CarpetMovement()
		{
			bool flag = false;
			if (this.grappling[0] == -1 && this.carpet && !this.canJumpAgain_Cloud && !this.canJumpAgain_Sandstorm && !this.canJumpAgain_Blizzard && !this.canJumpAgain_Fart && !this.canJumpAgain_Sail && !this.canJumpAgain_Unicorn && !this.canJumpAgain_Santank && !this.canJumpAgain_WallOfFleshGoat && !this.canJumpAgain_Basilisk && this.jump == 0 && this.velocity.Y != 0f && this.rocketTime == 0 && this.wingTime == 0f && !this.mount.Active)
			{
				if (this.controlJump && this.canCarpet)
				{
					this.canCarpet = false;
					this.carpetTime = 300;
				}
				if (this.carpetTime > 0 && this.controlJump)
				{
					this.fallStart = (int)(this.position.Y / 16f);
					flag = true;
					this.carpetTime--;
					float num = this.gravity;
					if (this.gravDir == 1f && this.velocity.Y > -num)
					{
						this.velocity.Y = -(num + 1E-06f);
					}
					else if (this.gravDir == -1f && this.velocity.Y < num)
					{
						this.velocity.Y = num + 1E-06f;
					}
					this.carpetFrameCounter += 1f + Math.Abs(this.velocity.X * 0.5f);
					if (this.carpetFrameCounter > 8f)
					{
						this.carpetFrameCounter = 0f;
						this.carpetFrame++;
					}
					if (this.carpetFrame < 0)
					{
						this.carpetFrame = 0;
					}
					if (this.carpetFrame > 5)
					{
						this.carpetFrame = 0;
					}
				}
			}
			if (!flag)
			{
				this.carpetFrame = -1;
				return;
			}
			this.slowFall = false;
		}

		// Token: 0x060007B3 RID: 1971 RVA: 0x002E7864 File Offset: 0x002E5A64
		public void DoubleJumpVisuals()
		{
			if (this.isPerformingJump_Cloud && this.hasJumpOption_Cloud && !this.canJumpAgain_Cloud && (this.canJumpAgain_Sandstorm || !this.hasJumpOption_Sandstorm) && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num = this.height;
				if (this.gravDir == -1f)
				{
					num = -6;
				}
				int num2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num), this.width + 8, 4, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
				Main.dust[num2].velocity.X = Main.dust[num2].velocity.X * 0.5f - this.velocity.X * 0.1f;
				Main.dust[num2].velocity.Y = Main.dust[num2].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
			}
			if (this.isPerformingJump_Sandstorm && this.hasJumpOption_Sandstorm && !this.canJumpAgain_Sandstorm && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num3 = this.height;
				if (this.gravDir == -1f)
				{
					num3 = -6;
				}
				float num4 = ((float)this.jump / 75f + 1f) / 2f;
				for (int i = 0; i < 3; i++)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(num3 / 2)), this.width, 32, 124, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 150, default(Color), 1f * num4);
					Main.dust[num5].velocity *= 0.5f * num4;
					Main.dust[num5].fadeIn = 1.5f * num4;
				}
				this.sandStorm = true;
				if (this.miscCounter % 3 == 0)
				{
					int num6 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 18f, this.position.Y + (float)(num3 / 2)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(220, 223), num4);
					Main.gore[num6].velocity = this.velocity * 0.3f * num4;
					Main.gore[num6].alpha = 100;
				}
			}
			if (this.isPerformingJump_Fart && this.hasJumpOption_Fart && !this.canJumpAgain_Fart && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num7 = this.height;
				if (this.gravDir == -1f)
				{
					num7 = -6;
				}
				int num8 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num7), this.width + 8, 4, 188, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
				Main.dust[num8].velocity.X = Main.dust[num8].velocity.X * 0.5f - this.velocity.X * 0.1f;
				Main.dust[num8].velocity.Y = Main.dust[num8].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
				Main.dust[num8].velocity *= 0.5f;
			}
			if (this.isPerformingJump_Unicorn && this.hasJumpOption_Unicorn && !this.canJumpAgain_Unicorn && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
				{
					176,
					177,
					179
				}), 0f, 0f, 0, default(Color), 1f)];
				dust.velocity = Vector2.Zero;
				dust.noGravity = true;
				dust.scale = 0.5f + Main.rand.NextFloat() * 0.8f;
				dust.fadeIn = 1f + Main.rand.NextFloat() * 2f;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
			}
			if (this.isPerformingJump_Sail && this.hasJumpOption_Sail && !this.canJumpAgain_Sail && ((this.gravDir == 1f && this.velocity.Y < 1f) || (this.gravDir == -1f && this.velocity.Y > 1f)))
			{
				int num9 = 1;
				if (this.jump > 0)
				{
					num9 = 2;
				}
				int num10 = this.height - 6;
				if (this.gravDir == -1f)
				{
					num10 = 6;
				}
				for (int j = 0; j < num9; j++)
				{
					int num11 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num10), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, default(Color), 1.5f);
					Main.dust[num11].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
					if (this.jump <= 0)
					{
						Main.dust[num11].scale *= 0.8f;
					}
					else
					{
						Main.dust[num11].velocity -= this.velocity / 5f;
					}
					Main.dust[num11].noGravity = true;
					Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					value.Normalize();
					value *= (float)Main.rand.Next(81) * 0.1f;
				}
			}
			if (this.isPerformingJump_Blizzard && this.hasJumpOption_Blizzard && !this.canJumpAgain_Blizzard && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num12 = this.height - 6;
				if (this.gravDir == -1f)
				{
					num12 = 6;
				}
				for (int k = 0; k < 2; k++)
				{
					int num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num13].velocity *= 0.1f;
					if (k == 0)
					{
						Main.dust[num13].velocity += this.velocity * 0.03f;
					}
					else
					{
						Main.dust[num13].velocity -= this.velocity * 0.03f;
					}
					Main.dust[num13].velocity -= this.velocity * 0.1f;
					Main.dust[num13].noGravity = true;
					Main.dust[num13].noLight = true;
				}
				for (int l = 0; l < 3; l++)
				{
					int num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num14].fadeIn = 1.5f;
					Main.dust[num14].velocity *= 0.6f;
					Main.dust[num14].velocity += this.velocity * 0.8f;
					Main.dust[num14].noGravity = true;
					Main.dust[num14].noLight = true;
				}
				for (int m = 0; m < 3; m++)
				{
					int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num15].fadeIn = 1.5f;
					Main.dust[num15].velocity *= 0.6f;
					Main.dust[num15].velocity -= this.velocity * 0.8f;
					Main.dust[num15].noGravity = true;
					Main.dust[num15].noLight = true;
				}
			}
		}

		// Token: 0x060007B4 RID: 1972 RVA: 0x002E83C4 File Offset: 0x002E65C4
		public void WingMovement()
		{
			if (this.wingsLogic == 4 && this.TryingToHoverUp)
			{
				this.velocity.Y = this.velocity.Y - 0.2f * this.gravDir;
				if (this.gravDir == 1f)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - 1f;
					}
					else if (this.velocity.Y > -Player.jumpSpeed)
					{
						this.velocity.Y = this.velocity.Y - 0.2f;
					}
					if (this.velocity.Y < -Player.jumpSpeed * 3f)
					{
						this.velocity.Y = -Player.jumpSpeed * 3f;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + 1f;
					}
					else if (this.velocity.Y < Player.jumpSpeed)
					{
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					if (this.velocity.Y > Player.jumpSpeed * 3f)
					{
						this.velocity.Y = Player.jumpSpeed * 3f;
					}
				}
				this.wingTime -= 2f;
			}
			else
			{
				float num = 0.1f;
				float num2 = 0.5f;
				float num3 = 1.5f;
				float num4 = 0.5f;
				float num5 = 0.1f;
				if (this.wingsLogic == 26)
				{
					num2 = 0.75f;
					num5 = 0.15f;
					num4 = 1f;
					num3 = 2.5f;
					num = 0.125f;
				}
				if (this.wingsLogic == 8 || this.wingsLogic == 11 || this.wingsLogic == 24 || this.wingsLogic == 27 || this.wingsLogic == 22)
				{
					num3 = 1.66f;
				}
				if (this.wingsLogic == 21 || this.wingsLogic == 12 || this.wingsLogic == 20 || this.wingsLogic == 23)
				{
					num3 = 1.805f;
				}
				if (this.wingsLogic == 37)
				{
					num2 = 0.75f;
					num5 = 0.15f;
					num4 = 1f;
					num3 = 2.5f;
					num = 0.125f;
				}
				if (this.wingsLogic == 44)
				{
					num2 = 0.85f;
					num5 = 0.15f;
					num4 = 1f;
					num3 = 2.75f;
					num = 0.125f;
					if (this.TryingToHoverUp)
					{
						this.velocity.Y = this.velocity.Y - 0.4f * this.gravDir;
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - 1f;
							}
							else if (this.velocity.Y > -Player.jumpSpeed)
							{
								this.velocity.Y = this.velocity.Y - 0.2f;
							}
							if (this.velocity.Y < -Player.jumpSpeed * 3f)
							{
								this.velocity.Y = -Player.jumpSpeed * 3f;
							}
						}
						else
						{
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + 1f;
							}
							else if (this.velocity.Y < Player.jumpSpeed)
							{
								this.velocity.Y = this.velocity.Y + 0.2f;
							}
							if (this.velocity.Y > Player.jumpSpeed * 3f)
							{
								this.velocity.Y = Player.jumpSpeed * 3f;
							}
						}
					}
					if (this.TryingToHoverDown && !this.controlJump && this.velocity.Y != 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.4f;
					}
				}
				if (this.wingsLogic == 45)
				{
					num2 = 0.95f;
					num5 = 0.15f;
					num4 = 1f;
					num3 = 4.5f;
					if (this.TryingToHoverUp)
					{
						this.velocity.Y = this.velocity.Y - 0.4f * this.gravDir;
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - 1f;
							}
							else if (this.velocity.Y > -Player.jumpSpeed)
							{
								this.velocity.Y = this.velocity.Y - 0.2f;
							}
							if (this.velocity.Y < -Player.jumpSpeed * 3f)
							{
								this.velocity.Y = -Player.jumpSpeed * 3f;
							}
						}
						else
						{
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + 1f;
							}
							else if (this.velocity.Y < Player.jumpSpeed)
							{
								this.velocity.Y = this.velocity.Y + 0.2f;
							}
							if (this.velocity.Y > Player.jumpSpeed * 3f)
							{
								this.velocity.Y = Player.jumpSpeed * 3f;
							}
						}
					}
					if (this.TryingToHoverDown && !this.controlJump && this.velocity.Y != 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.4f;
					}
				}
				if (this.wingsLogic == 29 || this.wingsLogic == 32)
				{
					num2 = 0.85f;
					num5 = 0.15f;
					num4 = 1f;
					num3 = 3f;
					num = 0.135f;
				}
				if (this.wingsLogic == 30 || this.wingsLogic == 31)
				{
					num4 = 1f;
					num3 = 2.45f;
					if (!this.TryingToHoverDown)
					{
						num = 0.15f;
					}
				}
				this.velocity.Y = this.velocity.Y - num * this.gravDir;
				if (this.gravDir == 1f)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - num2;
					}
					else if (this.velocity.Y > -Player.jumpSpeed * num4)
					{
						this.velocity.Y = this.velocity.Y - num5;
					}
					if (this.velocity.Y < -Player.jumpSpeed * num3)
					{
						this.velocity.Y = -Player.jumpSpeed * num3;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + num2;
					}
					else if (this.velocity.Y < Player.jumpSpeed * num4)
					{
						this.velocity.Y = this.velocity.Y + num5;
					}
					if (this.velocity.Y > Player.jumpSpeed * num3)
					{
						this.velocity.Y = Player.jumpSpeed * num3;
					}
				}
				if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 31 || this.wingsLogic == 37 || this.wingsLogic == 45) && this.TryingToHoverDown && !this.controlLeft && !this.controlRight)
				{
					this.wingTime -= 0.5f;
				}
				else
				{
					this.wingTime -= 1f;
				}
			}
			if (this.empressBrooch && this.wingTime != 0f)
			{
				this.wingTime = (float)this.wingTimeMax;
			}
		}

		// Token: 0x060007B5 RID: 1973 RVA: 0x002E8B34 File Offset: 0x002E6D34
		public void MoonLeechRope()
		{
			int num = -1;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].type == 456 && Main.projectile[i].ai[1] == (float)this.whoAmI)
				{
					num = i;
					break;
				}
			}
			if (num == -1)
			{
				return;
			}
			if (Main.projectile[num].ai[0] < 0f)
			{
				return;
			}
			Projectile projectile = Main.projectile[num];
			Vector2 value = new Vector2(0f, 216f);
			Vector2 value2 = Main.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - base.Center + value;
			if (value2.Length() > 200f)
			{
				Vector2 value3 = Vector2.Normalize(value2);
				this.position += value3 * (value2.Length() - 200f);
			}
		}

		// Token: 0x060007B6 RID: 1974 RVA: 0x002E8C34 File Offset: 0x002E6E34
		public void WOFTongue()
		{
			if (Main.wofNPCIndex >= 0 && Main.npc[Main.wofNPCIndex].active)
			{
				float num = Main.npc[Main.wofNPCIndex].position.X + 40f;
				if (Main.npc[Main.wofNPCIndex].direction > 0)
				{
					num -= 96f;
				}
				if (this.position.X + (float)this.width > num && this.position.X < num + 140f && this.gross)
				{
					this.noKnockback = false;
					int attackDamage_ScaledByStrength = Main.npc[Main.wofNPCIndex].GetAttackDamage_ScaledByStrength(50f);
					this.Hurt(PlayerDeathReason.LegacyDefault(), attackDamage_ScaledByStrength, Main.npc[Main.wofNPCIndex].direction, false, false, false, -1, true);
				}
				if (!this.gross && this.position.Y > (float)((Main.maxTilesY - 250) * 16) && this.position.X > num - 1920f && this.position.X < num + 1920f)
				{
					this.AddBuff(37, 10, true, false);
					SoundEngine.PlaySound(4, (int)Main.npc[Main.wofNPCIndex].position.X, (int)Main.npc[Main.wofNPCIndex].position.Y, 10, 1f, 0f);
				}
				if (this.gross)
				{
					if (this.position.Y < (float)(Main.UnderworldLayer * 16))
					{
						this.AddBuff(38, 10, true, false);
					}
					if (Main.npc[Main.wofNPCIndex].direction < 0)
					{
						if (this.position.X + (float)(this.width / 2) > Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) + 40f)
						{
							this.AddBuff(38, 10, true, false);
						}
					}
					else if (this.position.X + (float)(this.width / 2) < Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) - 40f)
					{
						this.AddBuff(38, 10, true, false);
					}
				}
				if (this.tongued)
				{
					this.controlHook = false;
					this.controlUseItem = false;
					for (int i = 0; i < 1000; i++)
					{
						if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].aiStyle == 7)
						{
							Main.projectile[i].Kill();
						}
					}
					Vector2 center = base.Center;
					float num2 = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) - center.X;
					float num3 = Main.npc[Main.wofNPCIndex].position.Y + (float)(Main.npc[Main.wofNPCIndex].height / 2) - center.Y;
					if ((float)Math.Sqrt((double)(num2 * num2 + num3 * num3)) > 3000f)
					{
						this.KillMe(PlayerDeathReason.ByOther(11), 1000.0, 0, false);
						return;
					}
					if (Main.npc[Main.wofNPCIndex].position.X < 608f || Main.npc[Main.wofNPCIndex].position.X > (float)((Main.maxTilesX - 38) * 16))
					{
						this.KillMe(PlayerDeathReason.ByOther(12), 1000.0, 0, false);
					}
				}
			}
		}

		// Token: 0x060007B7 RID: 1975 RVA: 0x002E8FE4 File Offset: 0x002E71E4
		public void StatusFromNPC(NPC npc)
		{
			if (Main.expertMode && ((npc.type == 266 && Main.rand.Next(3) == 0) || npc.type == 267))
			{
				int num = Main.rand.Next(9);
				if (num == 2 || num == 4)
				{
					num = Main.rand.Next(9);
				}
				float num2 = (float)Main.rand.Next(75, 150) * 0.01f;
				if (num == 0)
				{
					this.AddBuff(20, (int)(60f * num2 * 3.5f), true, false);
				}
				else if (num == 1)
				{
					this.AddBuff(22, (int)(60f * num2 * 2f), true, false);
				}
				else if (num == 2)
				{
					this.AddBuff(23, (int)(60f * num2 * 0.5f), true, false);
				}
				else if (num == 3)
				{
					this.AddBuff(30, (int)(60f * num2 * 5f), true, false);
				}
				else if (num == 4)
				{
					this.AddBuff(31, (int)(60f * num2 * 1f), true, false);
				}
				else if (num == 5)
				{
					this.AddBuff(32, (int)(60f * num2 * 3.5f), true, false);
				}
				else if (num == 6)
				{
					this.AddBuff(33, (int)(60f * num2 * 7.5f), true, false);
				}
				else if (num == 7)
				{
					this.AddBuff(35, (int)(60f * num2 * 1f), true, false);
				}
				else if (num == 8)
				{
					this.AddBuff(36, (int)((double)(60f * num2) * 6.5), true, false);
				}
			}
			if (npc.type == 530 || npc.type == 531)
			{
				this.AddBuff(70, Main.rand.Next(240, 241), true, false);
			}
			if (npc.type == 159 || npc.type == 158)
			{
				this.AddBuff(30, Main.rand.Next(300, 600), true, false);
			}
			if (npc.type == 525)
			{
				this.AddBuff(39, 240, true, false);
			}
			if (npc.type == 526)
			{
				this.AddBuff(69, 420, true, false);
			}
			if (npc.type == 527)
			{
				this.AddBuff(31, 840, true, false);
			}
			if (Main.expertMode && (npc.type == 49 || npc.type == 93 || npc.type == 51 || npc.type == 152 || npc.type == 634) && Main.rand.Next(10) == 0)
			{
				this.AddBuff(148, Main.rand.Next(1800, 5400), true, false);
			}
			if (Main.expertMode && npc.type == 222)
			{
				this.AddBuff(20, Main.rand.Next(60, 240), true, false);
			}
			if (Main.expertMode && (npc.type == 210 || npc.type == 211))
			{
				this.AddBuff(20, Main.rand.Next(60, 180), true, false);
			}
			if (Main.expertMode && npc.type == 35)
			{
				this.AddBuff(30, Main.rand.Next(180, 300), true, false);
			}
			if (Main.expertMode && npc.type == 36 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(32, Main.rand.Next(30, 60), true, false);
			}
			if (npc.type >= 269 && npc.type <= 272)
			{
				if (Main.rand.Next(3) == 0)
				{
					this.AddBuff(30, 600, true, false);
				}
				else if (Main.rand.Next(3) == 0)
				{
					this.AddBuff(32, 300, true, false);
				}
			}
			if (npc.type >= 273 && npc.type <= 276 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(36, 600, true, false);
			}
			if (npc.type >= 277 && npc.type <= 280)
			{
				this.AddBuff(24, 600, true, false);
			}
			if (npc.type == 371)
			{
				this.AddBuff(103, 60 * Main.rand.Next(3, 8), true, false);
			}
			if (npc.type == 370 && Main.expertMode)
			{
				int num3 = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					0,
					148,
					30
				});
				if (num3 != 0)
				{
					this.AddBuff(num3, 60 * Main.rand.Next(3, 11), true, false);
				}
			}
			if (((npc.type == 1 && npc.netID == -6) || npc.type == 81 || npc.type == 79 || npc.type == 183 || npc.type == 630) && Main.rand.Next(4) == 0)
			{
				this.AddBuff(22, 900, true, false);
			}
			if ((npc.type == 23 || npc.type == 25) && Main.rand.Next(3) == 0)
			{
				this.AddBuff(24, 420, true, false);
			}
			if ((npc.type == 34 || npc.type == 83 || npc.type == 84 || npc.type == 179 || npc.type == 289) && Main.rand.Next(3) == 0)
			{
				this.AddBuff(23, 240, true, false);
			}
			if ((npc.type == 104 || npc.type == 102) && Main.rand.Next(8) == 0)
			{
				this.AddBuff(30, 2700, true, false);
			}
			if (npc.type == 75 && Main.rand.Next(10) == 0)
			{
				this.AddBuff(35, 420, true, false);
			}
			if ((npc.type == 163 || npc.type == 238 || npc.type == 236 || npc.type == 237) && Main.rand.Next(10) == 0)
			{
				this.AddBuff(70, 240, true, false);
			}
			if ((npc.type == 79 || npc.type == 103 || npc.type == 630) && Main.rand.Next(5) == 0)
			{
				this.AddBuff(35, 420, true, false);
			}
			if ((npc.type == 75 || npc.type == 78 || npc.type == 82) && Main.rand.Next(8) == 0)
			{
				this.AddBuff(32, 900, true, false);
			}
			if ((npc.type == 93 || npc.type == 109 || npc.type == 80) && Main.rand.Next(14) == 0)
			{
				this.AddBuff(31, 300, true, false);
			}
			if (npc.type >= 305 && npc.type <= 314 && Main.rand.Next(10) == 0)
			{
				this.AddBuff(33, 3600, true, false);
			}
			if (npc.type == 77 && Main.rand.Next(6) == 0)
			{
				this.AddBuff(36, 7200, true, false);
			}
			if (npc.type == 112 && Main.rand.Next(20) == 0)
			{
				this.AddBuff(33, 18000, true, false);
			}
			if (npc.type == 182 && Main.rand.Next(25) == 0)
			{
				this.AddBuff(33, 7200, true, false);
			}
			if (npc.type == 141 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(20, 600, true, false);
			}
			if (npc.type == 147 && !this.frozen && Main.rand.Next(12) == 0)
			{
				this.AddBuff(46, 600, true, false);
			}
			if (npc.type == 150)
			{
				if (Main.rand.Next(2) == 0)
				{
					this.AddBuff(46, 900, true, false);
				}
				if (!this.frozen && Main.rand.Next(35) == 0)
				{
					this.AddBuff(47, 60, true, false);
				}
				else if (!this.frozen && Main.expertMode && Main.rand.Next(35) == 0)
				{
					this.AddBuff(47, 60, true, false);
				}
			}
			if (npc.type == 184)
			{
				this.AddBuff(46, 1200, true, false);
				if (!this.frozen && Main.rand.Next(15) == 0)
				{
					this.AddBuff(47, 60, true, false);
					return;
				}
				if (!this.frozen && Main.expertMode && Main.rand.Next(25) == 0)
				{
					this.AddBuff(47, 60, true, false);
				}
			}
		}

		// Token: 0x060007B8 RID: 1976 RVA: 0x002E98C8 File Offset: 0x002E7AC8
		public void GrappleMovement()
		{
			if (this.grappling[0] >= 0)
			{
				this.StopVanityActions(true);
				if (Main.myPlayer == this.whoAmI && this.mount.Active)
				{
					this.mount.Dismount(this);
				}
				this.canCarpet = true;
				this.carpetFrame = -1;
				this.wingFrame = 1;
				if (this.velocity.Y == 0f || (this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02))
				{
					this.wingFrame = 0;
				}
				if (this.wings == 4)
				{
					this.wingFrame = 3;
				}
				if (this.wings == 30)
				{
					this.wingFrame = 0;
				}
				this.RefreshMovementAbilities(true);
				this.rocketFrame = false;
				this.canRocket = false;
				this.rocketRelease = false;
				this.fallStart = (int)(this.position.Y / 16f);
				int num = -1;
				for (int i = 0; i < this.grapCount; i++)
				{
					if (Main.projectile[this.grappling[i]].type == 403)
					{
						num = i;
					}
				}
				int? num2;
				float x;
				float num3;
				this.GetGrapplingForces(base.Center, out num2, out x, out num3);
				if (num3 > 0f)
				{
					this.GoingDownWithGrapple = true;
				}
				this.velocity.X = x;
				this.velocity.Y = num3;
				if (num != -1)
				{
					Projectile projectile = Main.projectile[this.grappling[num]];
					if (projectile.position.X < this.position.X + (float)this.width && projectile.position.X + (float)projectile.width >= this.position.X && projectile.position.Y < this.position.Y + (float)this.height && projectile.position.Y + (float)projectile.height >= this.position.Y)
					{
						int num4 = (int)(projectile.position.X + (float)(projectile.width / 2)) / 16;
						int num5 = (int)(projectile.position.Y + (float)(projectile.height / 2)) / 16;
						this.velocity = Vector2.Zero;
						if (Main.tile[num4, num5].type == 314)
						{
							Vector2 position;
							position.X = projectile.position.X + (float)(projectile.width / 2) - (float)(this.width / 2);
							position.Y = projectile.position.Y + (float)(projectile.height / 2) - (float)(this.height / 2);
							this.RemoveAllGrapplingHooks();
							int num6 = 13;
							if (this.miscEquips[2].stack > 0 && this.miscEquips[2].mountType >= 0 && MountID.Sets.Cart[this.miscEquips[2].mountType] && (!this.miscEquips[2].expertOnly || Main.expertMode))
							{
								num6 = this.miscEquips[2].mountType;
							}
							int num7 = this.height + Mount.GetHeightBoost(num6);
							if (Minecart.GetOnTrack(num4, num5, ref position, this.width, num7) && !Collision.SolidCollision(position, this.width, num7 - 20))
							{
								this.position = position;
								DelegateMethods.Minecart.rotation = this.fullRotation;
								DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
								this.mount.SetMount(num6, this, this.minecartLeft);
								Minecart.WheelSparks(this.mount.Delegations.MinecartDust, this.position, this.width, this.height, 25);
							}
						}
					}
				}
				if (this.itemAnimation == 0)
				{
					if (this.velocity.X == 0f && num2 != null)
					{
						this.ChangeDir(num2.Value);
					}
					if (this.velocity.X > 0f)
					{
						this.ChangeDir(1);
					}
					if (this.velocity.X < 0f)
					{
						this.ChangeDir(-1);
					}
				}
				if (this.controlJump)
				{
					if (this.releaseJump)
					{
						if ((this.velocity.Y == 0f || (this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02)) && !this.controlDown)
						{
							this.velocity.Y = -Player.jumpSpeed;
							this.jump = Player.jumpHeight / 2;
							this.releaseJump = false;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.01f;
							this.releaseJump = false;
						}
						this.RefreshDoubleJumps();
						this.RemoveAllGrapplingHooks();
						return;
					}
				}
				else
				{
					this.releaseJump = true;
				}
			}
		}

		// Token: 0x060007B9 RID: 1977 RVA: 0x002E9DA8 File Offset: 0x002E7FA8
		public void DoQueenSlimeHookTeleport(Vector2 targetPosition)
		{
			int num = 150;
			Vector2 vector = this.position;
			Vector2 velocity = this.velocity;
			for (int i = 0; i < num; i++)
			{
				velocity = (vector + base.Size / 2f).DirectionTo(targetPosition).SafeNormalize(Vector2.Zero) * 12f;
				Vector2 value = Collision.TileCollision(vector, velocity, this.width, this.height, true, true, (int)this.gravDir);
				vector += value;
			}
			int num2 = 10;
			vector - this.position;
			this.Teleport(vector, num2, 0);
			NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector.X, vector.Y, num2, 0, 0);
		}

		// Token: 0x060007BA RID: 1978 RVA: 0x002E9E6C File Offset: 0x002E806C
		private void GetGrapplingForces(Vector2 fromPosition, out int? preferredPlayerDirectionToSet, out float preferedPlayerVelocityX, out float preferedPlayerVelocityY)
		{
			float num = 0f;
			float num2 = 0f;
			preferredPlayerDirectionToSet = null;
			int num3 = 0;
			for (int i = 0; i < this.grapCount; i++)
			{
				Projectile projectile = Main.projectile[this.grappling[i]];
				if (projectile.ai[0] == 2f && !projectile.position.HasNaNs())
				{
					num += projectile.position.X + (float)(projectile.width / 2);
					num2 += projectile.position.Y + (float)(projectile.height / 2);
					num3++;
					if (projectile.type == 446)
					{
						Vector2 vector = new Vector2((float)(this.controlRight.ToInt() - this.controlLeft.ToInt()), (float)(this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir);
						if (vector != Vector2.Zero)
						{
							vector.Normalize();
						}
						vector *= 100f;
						Vector2 vector2 = Vector2.Normalize(base.Center - projectile.Center + vector);
						if (vector2.HasNaNs())
						{
							vector2 = -Vector2.UnitY;
						}
						float num4 = 200f;
						num += vector2.X * num4;
						num2 += vector2.Y * num4;
					}
					else if (projectile.type == 652)
					{
						Vector2 vector3 = new Vector2((float)(this.controlRight.ToInt() - this.controlLeft.ToInt()), (float)(this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir).SafeNormalize(Vector2.Zero);
						Vector2 vector4 = projectile.Center - base.Center;
						Vector2 vector5 = vector4.SafeNormalize(Vector2.Zero);
						Vector2 vector6 = Vector2.Zero;
						if (vector3 != Vector2.Zero)
						{
							vector6 = vector5 * Vector2.Dot(vector5, vector3);
						}
						float num5 = 6f;
						if (Vector2.Dot(vector6, vector4) < 0f && vector4.Length() >= 600f)
						{
							num5 = 0f;
						}
						num += -vector4.X + vector6.X * num5;
						num2 += -vector4.Y + vector6.Y * num5;
					}
					else if (projectile.type == 865)
					{
						Vector2 vector7 = (projectile.rotation - 1.5707964f).ToRotationVector2().SafeNormalize(Vector2.UnitY);
						Vector2 vector8 = -vector7 * 28f;
						num += vector8.X;
						num2 += vector8.Y;
						if (vector7.X != 0f)
						{
							preferredPlayerDirectionToSet = new int?(Math.Sign(vector7.X));
						}
					}
				}
			}
			if (num3 == 0)
			{
				preferedPlayerVelocityX = this.velocity.X;
				preferedPlayerVelocityY = this.velocity.Y;
				return;
			}
			float num6 = num / (float)num3;
			float num7 = num2 / (float)num3;
			preferedPlayerVelocityX = num6 - fromPosition.X;
			preferedPlayerVelocityY = num7 - fromPosition.Y;
			float num8 = (float)Math.Sqrt((double)(preferedPlayerVelocityX * preferedPlayerVelocityX + preferedPlayerVelocityY * preferedPlayerVelocityY));
			float num9 = 11f;
			if (Main.projectile[this.grappling[0]].type == 315)
			{
				num9 = 14f;
			}
			if (Main.projectile[this.grappling[0]].type == 487)
			{
				num9 = 12f;
			}
			if (Main.projectile[this.grappling[0]].type >= 646 && Main.projectile[this.grappling[0]].type <= 649)
			{
				num9 = 16f;
			}
			float num10;
			if (num8 > num9)
			{
				num10 = num9 / num8;
			}
			else
			{
				num10 = 1f;
			}
			preferedPlayerVelocityX *= num10;
			preferedPlayerVelocityY *= num10;
		}

		// Token: 0x060007BB RID: 1979 RVA: 0x002EA260 File Offset: 0x002E8460
		private void RefreshMovementAbilities(bool doubleJumps = true)
		{
			this.wingTime = (float)this.wingTimeMax;
			this.rocketTime = this.rocketTimeMax;
			this.rocketDelay = 0;
			if (doubleJumps)
			{
				this.RefreshDoubleJumps();
			}
		}

		// Token: 0x060007BC RID: 1980 RVA: 0x002EA28C File Offset: 0x002E848C
		private void RefreshDoubleJumps()
		{
			if (this.hasJumpOption_Cloud)
			{
				this.canJumpAgain_Cloud = true;
			}
			if (this.hasJumpOption_Sandstorm)
			{
				this.canJumpAgain_Sandstorm = true;
			}
			if (this.hasJumpOption_Blizzard)
			{
				this.canJumpAgain_Blizzard = true;
			}
			if (this.hasJumpOption_Fart)
			{
				this.canJumpAgain_Fart = true;
			}
			if (this.hasJumpOption_Sail)
			{
				this.canJumpAgain_Sail = true;
			}
			if (this.hasJumpOption_Unicorn)
			{
				this.canJumpAgain_Unicorn = true;
			}
			if (this.hasJumpOption_Santank)
			{
				this.canJumpAgain_Santank = true;
			}
			if (this.hasJumpOption_WallOfFleshGoat)
			{
				this.canJumpAgain_WallOfFleshGoat = true;
			}
			if (this.hasJumpOption_Basilisk)
			{
				this.canJumpAgain_Basilisk = true;
			}
		}

		// Token: 0x060007BD RID: 1981 RVA: 0x002EA320 File Offset: 0x002E8520
		public void StickyMovement()
		{
			if (this.shimmering)
			{
				return;
			}
			bool flag = false;
			if (this.mount.Type > 0 && MountID.Sets.Cart[this.mount.Type] && Math.Abs(this.velocity.X) > 5f)
			{
				flag = true;
			}
			int num = this.width / 2;
			int num2 = this.height / 2;
			new Vector2(this.position.X + (float)(this.width / 2) - (float)(num / 2), this.position.Y + (float)(this.height / 2) - (float)(num2 / 2));
			Vector2 vector = Collision.StickyTiles(this.position, this.velocity, this.width, this.height);
			if (vector.Y != -1f && vector.X != -1f)
			{
				int num3 = (int)vector.X;
				int num4 = (int)vector.Y;
				int type = (int)Main.tile[num3, num4].type;
				if (this.whoAmI == Main.myPlayer && type == 51 && (this.velocity.X != 0f || this.velocity.Y != 0f))
				{
					this.stickyBreak++;
					if (this.stickyBreak > Main.rand.Next(20, 100) || flag)
					{
						this.stickyBreak = 0;
						WorldGen.KillTile(num3, num4, false, false, false);
						if (Main.netMode == 1 && !Main.tile[num3, num4].active() && Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)num3, (float)num4, 0f, 0, 0, 0);
						}
					}
				}
				if (flag)
				{
					return;
				}
				this.fallStart = (int)(this.position.Y / 16f);
				if (type != 229)
				{
					this.jump = 0;
				}
				if (this.velocity.X > 1f)
				{
					this.velocity.X = 1f;
				}
				if (this.velocity.X < -1f)
				{
					this.velocity.X = -1f;
				}
				if ((double)this.velocity.X > 0.75 || (double)this.velocity.X < -0.75)
				{
					this.velocity.X = this.velocity.X * 0.85f;
				}
				else
				{
					this.velocity.X = this.velocity.X * 0.6f;
				}
				if (this.gravDir == -1f)
				{
					if (this.velocity.Y < -1f)
					{
						this.velocity.Y = -1f;
					}
					if (this.velocity.Y > 5f)
					{
						this.velocity.Y = 5f;
					}
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.96f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.3f;
					}
				}
				else
				{
					if (this.velocity.Y > 1f)
					{
						this.velocity.Y = 1f;
					}
					if (this.velocity.Y < -5f)
					{
						this.velocity.Y = -5f;
					}
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.96f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.3f;
					}
				}
				if (type == 229 && Main.rand.Next(5) == 0 && ((double)this.velocity.Y > 0.15 || this.velocity.Y < 0f))
				{
					if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
					{
						int num5 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num5].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num5].velocity *= 0.1f;
						Main.dust[num5].noGravity = true;
					}
					else
					{
						int num6 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num6].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num6].velocity *= 0.1f;
						Main.dust[num6].noGravity = true;
					}
					if (Main.tile[num3, num4 + 1] != null && Main.tile[num3, num4 + 1].type == 229 && this.position.Y + (float)this.height > (float)((num4 + 1) * 16))
					{
						if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
						{
							int num7 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16 + 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num7].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num7].velocity *= 0.1f;
							Main.dust[num7].noGravity = true;
						}
						else
						{
							int num8 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16 + 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num8].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num8].velocity *= 0.1f;
							Main.dust[num8].noGravity = true;
						}
					}
					if (Main.tile[num3, num4 + 2] != null && Main.tile[num3, num4 + 2].type == 229 && this.position.Y + (float)this.height > (float)((num4 + 2) * 16))
					{
						if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
						{
							int num9 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16 + 32)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num9].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num9].velocity *= 0.1f;
							Main.dust[num9].noGravity = true;
							return;
						}
						int num10 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16 + 32)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num10].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num10].velocity *= 0.1f;
						Main.dust[num10].noGravity = true;
						return;
					}
				}
			}
			else
			{
				this.stickyBreak = 0;
			}
		}

		// Token: 0x060007BE RID: 1982 RVA: 0x002EABD0 File Offset: 0x002E8DD0
		public bool HasLockedInventory()
		{
			return this.IsStackingItems();
		}

		// Token: 0x060007BF RID: 1983 RVA: 0x002EABD8 File Offset: 0x002E8DD8
		public bool IsStackingItems()
		{
			for (int i = 0; i < this.inventoryChestStack.Length; i++)
			{
				if (this.inventoryChestStack[i])
				{
					if (this.inventory[i].type != 0 && this.inventory[i].stack != 0)
					{
						return true;
					}
					this.inventoryChestStack[i] = false;
				}
			}
			return this.disableVoidBag >= 0;
		}

		// Token: 0x060007C0 RID: 1984 RVA: 0x002EAC3C File Offset: 0x002E8E3C
		public List<int> GetNearbyContainerProjectilesList()
		{
			List<int> list = new List<int>();
			Vector2 center = base.Center;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active)
				{
					int num = -1;
					if (projectile.TryGetContainerIndex(out num))
					{
						Point point = projectile.Hitbox.ClosestPointInRect(center).ToTileCoordinates();
						if (this.IsInTileInteractionRange(point.X, point.Y, TileReachCheckSettings.QuickStackToNearbyChests))
						{
							list.Add(i);
						}
					}
				}
			}
			return list;
		}

		// Token: 0x060007C1 RID: 1985 RVA: 0x002EACBC File Offset: 0x002E8EBC
		public void UpdateNearbyInteractibleProjectilesList()
		{
			List<int> projectilesToInteractWith = this._projectilesToInteractWith;
			projectilesToInteractWith.Clear();
			if (!Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile)
			{
				return;
			}
			Vector2 center = base.Center;
			for (int i = 0; i < 1000; i++)
			{
				Projectile proj = Main.projectile[i];
				if (this.IsProjectileInteractibleAndInInteractionRange(proj, ref center))
				{
					projectilesToInteractWith.Add(i);
				}
			}
		}

		// Token: 0x060007C2 RID: 1986 RVA: 0x002EAD10 File Offset: 0x002E8F10
		public bool IsProjectileInteractibleAndInInteractionRange(Projectile proj, ref Vector2 compareSpot)
		{
			if (!proj.active)
			{
				return false;
			}
			if (!proj.IsInteractible())
			{
				return false;
			}
			Point point = proj.Hitbox.ClosestPointInRect(compareSpot).ToTileCoordinates();
			return this.IsInTileInteractionRange(point.X, point.Y, TileReachCheckSettings.Simple);
		}

		// Token: 0x060007C3 RID: 1987 RVA: 0x002EAD64 File Offset: 0x002E8F64
		public bool useVoidBag()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].type == 4131)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060007C4 RID: 1988 RVA: 0x002EADA8 File Offset: 0x002E8FA8
		public void QuickStackAllChests()
		{
			if (this.HasLockedInventory())
			{
				return;
			}
			List<int> nearbyContainerProjectilesList = this.GetNearbyContainerProjectilesList();
			for (int i = 0; i < nearbyContainerProjectilesList.Count; i++)
			{
				Projectile projectile = Main.projectile[nearbyContainerProjectilesList[i]];
				int num;
				if (projectile.TryGetContainerIndex(out num))
				{
					ContainerTransferContext context = ContainerTransferContext.FromProjectile(projectile);
					int num2 = this.chest;
					this.chest = num;
					ChestUI.QuickStack(context, false);
					if (this.useVoidBag())
					{
						ChestUI.QuickStack(context, true);
					}
					this.chest = num2;
				}
			}
			int num3 = 39;
			int num4 = (int)(base.Center.X / 16f);
			int num5 = (int)(base.Center.Y / 16f);
			for (int j = num4 - num3; j <= num4 + num3; j++)
			{
				if (j >= 0 && j < Main.maxTilesX)
				{
					for (int k = num5 - num3; k <= num5 + num3; k++)
					{
						if (k >= 0 && k < Main.maxTilesY)
						{
							int num6 = 0;
							if (Main.tile[j, k].type == 29)
							{
								num6 = -2;
							}
							else if (Main.tile[j, k].type == 97)
							{
								num6 = -3;
							}
							else if (Main.tile[j, k].type == 463)
							{
								num6 = -4;
							}
							else if (Main.tile[j, k].type == 491)
							{
								num6 = -5;
							}
							if (num6 < 0 && (new Vector2((float)(j * 16 + 8), (float)(k * 16 + 8)) - base.Center).Length() < 600f)
							{
								ContainerTransferContext context2 = ContainerTransferContext.FromBlockPosition(j, k);
								int num7 = this.chest;
								this.chest = num6;
								ChestUI.QuickStack(context2, false);
								if (this.useVoidBag())
								{
									ChestUI.QuickStack(context2, true);
								}
								this.chest = num7;
							}
						}
					}
				}
			}
			if (Main.netMode == 1)
			{
				for (int l = 10; l < 50; l++)
				{
					if (this.inventory[l].type > 0 && this.inventory[l].stack > 0 && !this.inventory[l].favorited && !this.inventory[l].IsACoin)
					{
						NetMessage.SendData(5, -1, -1, null, this.whoAmI, (float)(PlayerItemSlotID.Inventory0 + l), (float)this.inventory[l].prefix, 0f, 0, 0, 0);
						NetMessage.SendData(85, -1, -1, null, PlayerItemSlotID.Inventory0 + l, 0f, 0f, 0f, 0, 0, 0);
						this.inventoryChestStack[l] = true;
					}
				}
				if (this.useVoidBag())
				{
					for (int m = 0; m < 40; m++)
					{
						if (this.bank4.item[m].type > 0 && this.bank4.item[m].stack > 0 && !this.bank4.item[m].favorited && !this.bank4.item[m].IsACoin)
						{
							NetMessage.SendData(5, -1, -1, null, this.whoAmI, (float)(PlayerItemSlotID.Bank4_0 + m), (float)this.bank4.item[m].prefix, 0f, 0, 0, 0);
							NetMessage.SendData(85, -1, -1, null, PlayerItemSlotID.Bank4_0 + m, 0f, 0f, 0f, 0, 0, 0);
							this.disableVoidBag = m;
						}
					}
					return;
				}
			}
			else
			{
				for (int n = 10; n < 50; n++)
				{
					if (this.inventory[n].type > 0 && this.inventory[n].stack > 0 && !this.inventory[n].favorited && !this.inventory[n].IsACoin)
					{
						int type = this.inventory[n].type;
						int stack = this.inventory[n].stack;
						this.inventory[n] = Chest.PutItemInNearbyChest(this.inventory[n], base.Center);
						if (this.inventory[n].type == type)
						{
							int stack2 = this.inventory[n].stack;
						}
					}
				}
				if (this.useVoidBag())
				{
					for (int num8 = 0; num8 < 40; num8++)
					{
						if (this.bank4.item[num8].type > 0 && this.bank4.item[num8].stack > 0 && !this.bank4.item[num8].favorited && !this.bank4.item[num8].IsACoin)
						{
							int type2 = this.bank4.item[num8].type;
							int stack3 = this.bank4.item[num8].stack;
							this.bank4.item[num8] = Chest.PutItemInNearbyChest(this.bank4.item[num8], base.Center);
							if (this.bank4.item[num8].type == type2)
							{
								int stack4 = this.bank4.item[num8].stack;
							}
						}
					}
				}
			}
		}

		// Token: 0x060007C5 RID: 1989 RVA: 0x002EB304 File Offset: 0x002E9504
		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(this.position, this.width, this.height, this.gravDir, false);
			if (this.armor[0].type == 250 || this.armor[0].type == 4275)
			{
				flag = true;
			}
			if (this.inventory[this.selectedItem].type == 186 && this.itemAnimation == 0)
			{
				try
				{
					int num = (int)((this.position.X + (float)(this.width / 2) + (float)(6 * this.direction)) / 16f);
					int num2 = 0;
					if (this.gravDir == -1f)
					{
						num2 = this.height;
					}
					int num3 = (int)((this.position.Y + (float)num2 - 44f * this.gravDir) / 16f);
					if (Main.tile[num, num3] != null && Main.tile[num, num3].liquid < 128)
					{
						if (Main.tile[num, num3] == null)
						{
							Main.tile[num, num3] = new Tile();
						}
						if (!Main.tile[num, num3].active() || !Main.tileSolid[(int)Main.tile[num, num3].type] || Main.tileSolidTop[(int)Main.tile[num, num3].type])
						{
							flag = false;
						}
					}
				}
				catch
				{
				}
			}
			if (this.gills)
			{
				flag = (Main.getGoodWorld && !flag);
			}
			if (this.shimmering)
			{
				flag = false;
			}
			if (this.mount.Active && this.mount.Type == 4)
			{
				flag = false;
			}
			if (Main.myPlayer == this.whoAmI)
			{
				if (this.accMerman)
				{
					if (flag)
					{
						this.merman = true;
					}
					flag = false;
				}
				if (flag)
				{
					this.breathCD++;
					if (this.breathCD >= this.breathCDMax)
					{
						this.breathCD = 0;
						this.breath--;
						if (this.breath == 0)
						{
							SoundEngine.PlaySound(23, -1, -1, 1, 1f, 0f);
						}
						if (this.breath <= 0)
						{
							this.lifeRegenTime = 0f;
							this.breath = 0;
							this.statLife -= 2;
							if (this.statLife <= 0)
							{
								this.statLife = 0;
								this.KillMe(PlayerDeathReason.ByOther(1), 10.0, 0, false);
							}
						}
					}
				}
				else
				{
					this.breath += 3;
					if (this.breath > this.breathMax)
					{
						this.breath = this.breathMax;
					}
					this.breathCD = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !this.lavaWet && !this.honeyWet)
			{
				int num4 = 0;
				if (this.gravDir == -1f)
				{
					num4 += this.height - 12;
				}
				if (this.inventory[this.selectedItem].type == 186)
				{
					Dust.NewDust(new Vector2(this.position.X + (float)(10 * this.direction) + 4f, this.position.Y + (float)num4 - 54f * this.gravDir), this.width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
					return;
				}
				Dust.NewDust(new Vector2(this.position.X + (float)(12 * this.direction), this.position.Y + (float)num4 + 4f * this.gravDir), this.width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		// Token: 0x060007C6 RID: 1990 RVA: 0x002EB6EC File Offset: 0x002E98EC
		public void CheckCrackedBrickBreak()
		{
			if (this.shimmering)
			{
				return;
			}
			bool flag = false;
			if ((float)Main.rand.Next(2, 12) < Math.Abs(this.velocity.X))
			{
				flag = true;
			}
			if ((float)Main.rand.Next(2, 12) < this.velocity.Y)
			{
				flag = true;
			}
			if (flag && this.velocity.Y < 1f)
			{
				Point point = (base.Bottom + Vector2.UnitY).ToTileCoordinates();
				Point point2 = (base.BottomLeft + Vector2.UnitY).ToTileCoordinates();
				Point point3 = (base.BottomRight + Vector2.UnitY).ToTileCoordinates();
				if ((WorldGen.SolidTileAllowBottomSlope(point.X, point.Y) && !TileID.Sets.CrackedBricks[(int)Main.tile[point.X, point.Y].type]) || (WorldGen.SolidTileAllowBottomSlope(point2.X, point2.Y) && !TileID.Sets.CrackedBricks[(int)Main.tile[point2.X, point2.Y].type]) || (WorldGen.SolidTileAllowBottomSlope(point3.X, point3.Y) && !TileID.Sets.CrackedBricks[(int)Main.tile[point3.X, point3.Y].type]))
				{
					flag = false;
				}
			}
			if (flag)
			{
				Vector2 vector = this.position + this.velocity;
				flag = false;
				int num = (int)(vector.X / 16f);
				int num2 = (int)((vector.X + (float)this.width) / 16f);
				int num3 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
				Rectangle rect = this.getRect();
				rect.Inflate(1, 1);
				for (int i = num; i <= num2; i++)
				{
					int num4 = num3;
					while (num4 <= num3 + 1 && Main.tile[i, num4] != null)
					{
						if (Main.tile[i, num4].nactive() && !WorldGen.SolidTile(i, num4 - 1, false) && TileID.Sets.CrackedBricks[(int)Main.tile[i, num4].type])
						{
							Rectangle rectangle = new Rectangle(i * 16, num4 * 16, 16, 16);
							if (rectangle.Intersects(rect))
							{
								flag = true;
								if (this.velocity.Y > 1f)
								{
									this.velocity.Y = 1f;
								}
								NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						num4++;
					}
				}
				if (flag)
				{
					num = (int)((vector.X - 16f - 8f) / 16f);
					num2 = (int)((vector.X + (float)this.width + 16f + 8f) / 16f);
					for (int j = num; j <= num2; j++)
					{
						for (int k = num3; k <= num3 + 2; k++)
						{
							if (Main.tile[j, k].nactive() && !WorldGen.SolidTile(j, k - 1, false) && TileID.Sets.CrackedBricks[(int)Main.tile[j, k].type])
							{
								WorldGen.KillTile(j, k, false, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 20, (float)j, (float)k, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060007C7 RID: 1991 RVA: 0x002EBA88 File Offset: 0x002E9C88
		public void CheckIceBreak()
		{
			if (this.velocity.Y > 7f)
			{
				Vector2 vector = this.position + this.velocity;
				int num = (int)(vector.X / 16f);
				int num2 = (int)((vector.X + (float)this.width) / 16f);
				int num3 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
				for (int i = num; i <= num2; i++)
				{
					int num4 = num3;
					while (num4 <= num3 + 1 && Main.tile[i, num4] != null)
					{
						if (Main.tile[i, num4].nactive() && Main.tile[i, num4].type == 162 && !WorldGen.SolidTile(i, num4 - 1, false))
						{
							WorldGen.KillTile(i, num4, false, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)num4, 0f, 0, 0, 0);
							}
						}
						num4++;
					}
				}
			}
		}

		// Token: 0x060007C8 RID: 1992 RVA: 0x002EBB9C File Offset: 0x002E9D9C
		public void SlopeDownMovement()
		{
			this.sloping = false;
			if (this.mount.Active && this.mount.Type == 48)
			{
				return;
			}
			float y = this.velocity.Y;
			Vector4 vector = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, this.gravity * this.gravDir);
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
			if (this.velocity.Y != y)
			{
				this.sloping = true;
			}
		}

		// Token: 0x060007C9 RID: 1993 RVA: 0x002EBC60 File Offset: 0x002E9E60
		public void ShimmerCollision(bool fallThrough, bool ignorePlats, bool noCollision)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 20;
			}
			else
			{
				height = this.height;
			}
			Vector2 velocity = this.velocity;
			if (!noCollision)
			{
				this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			}
			Vector2 value = this.velocity * 0.375f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
			}
			this.position += value;
			if (this.shimmerImmune && !noCollision)
			{
				this.TryFloatingInFluid();
			}
		}

		// Token: 0x060007CA RID: 1994 RVA: 0x002EBD38 File Offset: 0x002E9F38
		public void HoneyCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 20;
			}
			else
			{
				height = this.height;
			}
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			Vector2 value = this.velocity * 0.25f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
			}
			this.position += value;
			this.TryFloatingInFluid();
		}

		// Token: 0x060007CB RID: 1995 RVA: 0x002EBE04 File Offset: 0x002EA004
		public void WaterCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 20;
			}
			else
			{
				height = this.height;
			}
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			Vector2 value = this.velocity * 0.5f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
			}
			this.position += value;
			this.TryFloatingInFluid();
		}

		// Token: 0x060007CC RID: 1996 RVA: 0x002EBED0 File Offset: 0x002EA0D0
		private void TryFloatingInFluid()
		{
			if (this.ShouldFloatInWater)
			{
				if (this.whoAmI == Main.myPlayer && this.sitting.isSitting)
				{
					this.sitting.SitUp(this, true);
				}
				float num;
				if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out num))
				{
					float num2 = base.Center.Y;
					if (this.mount.Active && this.mount.Type == 37)
					{
						num2 -= 6f;
					}
					float num3 = num2 + 8f;
					if (num3 + this.velocity.Y >= num)
					{
						if (num2 > num)
						{
							this.velocity.Y = this.velocity.Y - 0.4f;
							if (this.velocity.Y < -6f)
							{
								this.velocity.Y = -6f;
								return;
							}
						}
						else
						{
							this.velocity.Y = num - num3;
							if (this.velocity.Y < -3f)
							{
								this.velocity.Y = -3f;
							}
							if (this.velocity.Y == 0f)
							{
								this.velocity.Y = float.Epsilon;
								return;
							}
						}
					}
				}
				else
				{
					this.velocity.Y = this.velocity.Y - 0.4f;
				}
			}
		}

		// Token: 0x060007CD RID: 1997 RVA: 0x002EC018 File Offset: 0x002EA218
		public void DryCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 10;
			}
			else
			{
				height = this.height;
			}
			if (this.velocity.Length() > 16f)
			{
				ref Vector2 ptr = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
				float num = this.velocity.Length();
				Vector2 value = Vector2.Normalize(this.velocity);
				if (ptr.Y == 0f)
				{
					value.Y = 0f;
				}
				Vector2 vector = Vector2.Zero;
				bool flag = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12 || this.mount.Type == 44 || this.mount.Type == 49;
				Vector2 zero = Vector2.Zero;
				while (num > 0f)
				{
					float num2 = num;
					if (num2 > 16f)
					{
						num2 = 16f;
					}
					num -= num2;
					Vector2 velocity = value * num2;
					this.velocity = velocity;
					this.SlopeDownMovement();
					velocity = this.velocity;
					if (this.velocity.Y == this.gravity && (!this.mount.Active || (!this.mount.Cart && this.mount.Type != 48 && !flag)))
					{
						Collision.StepDown(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.waterWalk || this.waterWalk2);
					}
					if (this.gravDir == -1f)
					{
						if ((this.carpetFrame != -1 || this.velocity.Y <= this.gravity) && !this.controlUp)
						{
							Collision.StepUp(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
						}
					}
					else if (flag || ((this.carpetFrame != -1 || this.velocity.Y >= this.gravity) && !this.controlDown && !this.mount.Cart))
					{
						Collision.StepUp(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
					}
					Vector2 vector2 = Collision.TileCollision(this.position, velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
					if (Collision.up && this.gravDir == 1f)
					{
						this.jump = 0;
					}
					if (this.waterWalk || this.waterWalk2)
					{
						Vector2 velocity2 = this.velocity;
						vector2 = Collision.WaterCollision(this.position, vector2, this.width, this.height, fallThrough, false, this.waterWalk);
						if (velocity2 != this.velocity)
						{
							this.fallStart = (int)(this.position.Y / 16f);
						}
					}
					this.position += vector2;
					bool falling = false;
					if (vector2.Y > this.gravity)
					{
						falling = true;
					}
					if (vector2.Y < -this.gravity)
					{
						falling = true;
					}
					this.velocity = vector2;
					this.UpdateTouchingTiles();
					this.TryBouncingBlocks(falling);
					this.TryLandingOnDetonator();
					this.SlopingCollision(fallThrough, ignorePlats);
					Collision.StepConveyorBelt(this, this.gravDir);
					vector2 = this.velocity;
					vector += vector2;
				}
				this.velocity = vector;
				return;
			}
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			if (Collision.up && this.gravDir == 1f)
			{
				this.jump = 0;
			}
			if (this.waterWalk || this.waterWalk2)
			{
				Vector2 velocity3 = this.velocity;
				this.velocity = Collision.WaterCollision(this.position, this.velocity, this.width, this.height, fallThrough, false, this.waterWalk);
				if (velocity3 != this.velocity)
				{
					this.fallStart = (int)(this.position.Y / 16f);
				}
			}
			this.position += this.velocity;
		}

		// Token: 0x060007CE RID: 1998 RVA: 0x002EC474 File Offset: 0x002EA674
		private bool TouchBlockSurfaceCenter(int x, int y, Tile tile, out int exitNormalX, out int exitNormalY, out Vector2 surfaceCenter)
		{
			exitNormalX = (exitNormalY = 0);
			Vector2 vector = new Vector2((float)(x * 16), (float)(y * 16));
			Vector2 vector2 = new Vector2(vector.X + 16f, vector.Y);
			Vector2 vector3 = new Vector2(vector.X, vector.Y + 16f);
			Vector2 value = new Vector2(vector.X + 16f, vector.Y + 16f);
			int num = 0;
			int num2 = 0;
			switch (tile.blockType())
			{
			case 1:
				vector.Y += 8f;
				vector2.Y += 8f;
				break;
			case 2:
				vector2.Y += 16f;
				num = 1;
				break;
			case 3:
				vector.Y += 16f;
				num = -1;
				break;
			case 4:
				value.Y -= 16f;
				num2 = 1;
				break;
			case 5:
				vector3.Y -= 16f;
				num2 = -1;
				break;
			}
			Vector2 vector4 = new Vector2(0.0001f);
			this.position - vector4;
			base.Size + vector4 * 2f;
			Rectangle hitbox = base.Hitbox;
			surfaceCenter = Vector2.Lerp(vector, vector2, 0.5f);
			float num3 = 4f;
			if (hitbox.Distance(surfaceCenter) <= num3)
			{
				exitNormalX = num;
				exitNormalY = -1;
				return true;
			}
			surfaceCenter = Vector2.Lerp(vector3, value, 0.5f);
			if (hitbox.Distance(surfaceCenter) <= num3)
			{
				exitNormalX = num2;
				exitNormalY = 1;
				return true;
			}
			if (vector != vector3)
			{
				surfaceCenter = Vector2.Lerp(vector, vector3, 0.5f);
				if (hitbox.Distance(surfaceCenter) <= num3)
				{
					exitNormalX = -1;
					exitNormalY = 0;
					return true;
				}
			}
			if (vector2 != value)
			{
				surfaceCenter = Vector2.Lerp(vector2, value, 0.5f);
				if (hitbox.Distance(surfaceCenter) <= num3)
				{
					exitNormalX = 1;
					exitNormalY = 0;
					return true;
				}
			}
			return false;
		}

		// Token: 0x060007CF RID: 1999 RVA: 0x002EC6A4 File Offset: 0x002EA8A4
		public void SlopingCollision(bool fallThrough, bool ignorePlats)
		{
			if (ignorePlats || this.controlDown || this.grappling[0] >= 0 || this.gravDir == -1f)
			{
				this.stairFall = true;
			}
			Vector4 vector = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, this.gravity, this.stairFall);
			if (Collision.stairFall)
			{
				this.stairFall = true;
			}
			else if (!fallThrough)
			{
				this.stairFall = false;
			}
			if (Collision.stair && Math.Abs(vector.Y - this.position.Y) > 8f + Math.Abs(this.velocity.X))
			{
				this.gfxOffY -= vector.Y - this.position.Y;
				this.stepSpeed = 4f;
			}
			Vector2 velocity = this.velocity;
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
			if (this.gravDir == -1f && this.velocity.Y == 0.0101f)
			{
				this.velocity.Y = 0f;
			}
		}

		// Token: 0x060007D0 RID: 2000 RVA: 0x002EC7FC File Offset: 0x002EA9FC
		public void FloorVisuals(bool Falling)
		{
			int num = (int)((this.position.X + (float)(this.width / 2)) / 16f);
			int num2 = (int)((this.position.Y + (float)this.height) / 16f);
			if (this.gravDir == -1f)
			{
				num2 = (int)(this.position.Y - 0.1f) / 16;
			}
			Tile floorTile = Player.GetFloorTile(num, num2);
			int num3 = -1;
			if (floorTile != null)
			{
				num3 = (int)floorTile.type;
			}
			if (num3 <= -1)
			{
				this.ResetFloorFlags();
				return;
			}
			this.sticky = (num3 == 229);
			this.slippy = TileID.Sets.IceSkateSlippery[num3];
			this.slippy2 = (num3 == 197);
			this.powerrun = (num3 == 198);
			this.runningOnSand = (TileID.Sets.Conversion.Sand[num3] || TileID.Sets.Conversion.Sandstone[num3] || TileID.Sets.Conversion.HardenedSand[num3]);
			if (num3 == 666 && this.whoAmI == Main.myPlayer)
			{
				this.AddBuff(120, 180, true, false);
			}
			if (Main.tile[num - 1, num2].slope() != 0 || Main.tile[num, num2].slope() != 0 || Main.tile[num + 1, num2].slope() != 0)
			{
				num3 = -1;
			}
			if (!this.wet && !this.mount.Cart)
			{
				this.MakeFloorDust(Falling, num3, (int)floorTile.color());
			}
		}

		// Token: 0x060007D1 RID: 2001 RVA: 0x002EC968 File Offset: 0x002EAB68
		public void ResetFloorFlags()
		{
			this.slippy = false;
			this.slippy2 = false;
			this.sticky = false;
			this.powerrun = false;
			this.runningOnSand = false;
		}

		// Token: 0x060007D2 RID: 2002 RVA: 0x002EC990 File Offset: 0x002EAB90
		public static Tile GetFloorTile(int x, int y)
		{
			Tile result = null;
			if (Main.tile[x - 1, y] == null)
			{
				Main.tile[x - 1, y] = new Tile();
			}
			if (Main.tile[x + 1, y] == null)
			{
				Main.tile[x + 1, y] = new Tile();
			}
			if (Main.tile[x, y] == null)
			{
				Main.tile[x, y] = new Tile();
			}
			if (Main.tile[x, y].nactive() && Main.tileSolid[(int)Main.tile[x, y].type])
			{
				result = Main.tile[x, y];
			}
			else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[(int)Main.tile[x - 1, y].type])
			{
				result = Main.tile[x - 1, y];
			}
			else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[(int)Main.tile[x + 1, y].type])
			{
				result = Main.tile[x + 1, y];
			}
			return result;
		}

		// Token: 0x060007D3 RID: 2003 RVA: 0x002ECAC4 File Offset: 0x002EACC4
		public static int GetFloorTileType(int x, int y)
		{
			Tile floorTile = Player.GetFloorTile(x, y);
			if (floorTile == null)
			{
				return -1;
			}
			return (int)floorTile.type;
		}

		// Token: 0x060007D4 RID: 2004 RVA: 0x002ECAE4 File Offset: 0x002EACE4
		private void MakeFloorDust(bool Falling, int type, int paintColor)
		{
			if (type == 659 || type == 667)
			{
				bool flag = true;
				if (!Falling)
				{
					float num = Math.Abs(this.velocity.X) / 3f;
					if ((float)Main.rand.Next(100) > num * 50f)
					{
						flag = false;
					}
				}
				if (!flag)
				{
					return;
				}
				Vector2 positionInWorld = new Vector2(this.position.X, this.position.Y + (float)this.height - 2f) + new Vector2((float)this.width * Main.rand.NextFloat(), 6f * Main.rand.NextFloat());
				Vector2 vector = Main.rand.NextVector2Circular(0.8f, 0.8f);
				if (vector.Y > 0f)
				{
					vector.Y *= -1f;
				}
				ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.ShimmerBlock, new ParticleOrchestraSettings
				{
					PositionInWorld = positionInWorld,
					MovementVector = vector
				}, new int?(this.whoAmI));
			}
			if (type == 147 || type == 25 || type == 53 || type == 189 || type == 0 || type == 123 || type == 57 || type == 112 || type == 116 || type == 196 || type == 193 || type == 195 || type == 197 || type == 199 || type == 229 || type == 234 || type == 371 || type == 460 || type == 666)
			{
				int num2 = 1;
				if (Falling)
				{
					num2 = 20;
					if (type == 666)
					{
						SoundEngine.PlaySound(SoundID.Item177, (int)base.Center.X, (int)base.Bottom.Y);
					}
				}
				for (int i = 0; i < num2; i++)
				{
					bool flag2 = true;
					int num3 = 76;
					if (type == 666)
					{
						if (paintColor != 0)
						{
							return;
						}
						num3 = 322;
					}
					if (type == 53)
					{
						num3 = 32;
					}
					if (type == 189)
					{
						num3 = 16;
					}
					if (type == 0)
					{
						num3 = 0;
					}
					if (type == 123)
					{
						num3 = 53;
					}
					if (type == 57)
					{
						num3 = 36;
					}
					if (type == 112)
					{
						num3 = 14;
					}
					if (type == 234)
					{
						num3 = 122;
					}
					if (type == 116)
					{
						num3 = 51;
					}
					if (type == 196)
					{
						num3 = 108;
					}
					if (type == 193)
					{
						num3 = 4;
					}
					if (type == 195 || type == 199)
					{
						num3 = 5;
					}
					if (type == 197)
					{
						num3 = 4;
					}
					if (type == 229)
					{
						num3 = 153;
					}
					if (type == 371)
					{
						num3 = 243;
					}
					if (type == 460)
					{
						num3 = 108;
					}
					if (type == 25)
					{
						num3 = 37;
					}
					if (num3 == 32 && Main.rand.Next(2) == 0)
					{
						flag2 = false;
					}
					if (num3 == 14 && Main.rand.Next(2) == 0)
					{
						flag2 = false;
					}
					if (num3 == 51 && Main.rand.Next(2) == 0)
					{
						flag2 = false;
					}
					if (num3 == 36 && Main.rand.Next(2) == 0)
					{
						flag2 = false;
					}
					if (num3 == 0 && Main.rand.Next(3) != 0)
					{
						flag2 = false;
					}
					if (num3 == 53 && Main.rand.Next(3) != 0)
					{
						flag2 = false;
					}
					Color newColor = default(Color);
					if (type == 193)
					{
						newColor = new Color(30, 100, 255, 100);
					}
					if (type == 197)
					{
						newColor = new Color(97, 200, 255, 100);
					}
					if (type == 460)
					{
						newColor = new Color(100, 150, 130, 100);
					}
					if (!Falling)
					{
						float num4 = Math.Abs(this.velocity.X) / 3f;
						if ((float)Main.rand.Next(100) > num4 * 100f)
						{
							flag2 = false;
						}
					}
					if (flag2)
					{
						float num5 = this.velocity.X;
						if (num5 > 6f)
						{
							num5 = 6f;
						}
						if (num5 < -6f)
						{
							num5 = -6f;
						}
						if (this.velocity.X != 0f || Falling)
						{
							int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 6, num3, 0f, 0f, 50, newColor, 1f);
							if (this.gravDir == -1f)
							{
								Dust dust = Main.dust[num6];
								dust.position.Y = dust.position.Y - (float)(this.height + 4);
							}
							if (num3 == 76)
							{
								Main.dust[num6].scale += (float)Main.rand.Next(3) * 0.1f;
								Main.dust[num6].noLight = true;
							}
							if (num3 == 16 || num3 == 108 || num3 == 153)
							{
								Main.dust[num6].scale += (float)Main.rand.Next(6) * 0.1f;
							}
							if (num3 == 37)
							{
								Main.dust[num6].scale += 0.25f;
								Main.dust[num6].alpha = 50;
							}
							if (num3 == 5)
							{
								Main.dust[num6].scale += (float)Main.rand.Next(2, 8) * 0.1f;
							}
							Main.dust[num6].noGravity = true;
							if (num3 == 322)
							{
								if (Main.rand.Next(4) == 0)
								{
									Main.dust[num6].noGravity = false;
									Main.dust[num6].scale *= 1.1f;
								}
								else
								{
									Main.dust[num6].scale *= 1.2f;
								}
							}
							if (num2 > 1)
							{
								Dust dust2 = Main.dust[num6];
								dust2.velocity.X = dust2.velocity.X * 1.2f;
								Dust dust3 = Main.dust[num6];
								dust3.velocity.Y = dust3.velocity.Y * 0.8f;
								Dust dust4 = Main.dust[num6];
								dust4.velocity.Y = dust4.velocity.Y - 1f;
								Main.dust[num6].velocity *= 0.8f;
								Main.dust[num6].scale += (float)Main.rand.Next(3) * 0.1f;
								Main.dust[num6].velocity.X = (Main.dust[num6].position.X - (this.position.X + (float)(this.width / 2))) * 0.2f;
								if (Main.dust[num6].velocity.Y > 0f)
								{
									Dust dust5 = Main.dust[num6];
									dust5.velocity.Y = dust5.velocity.Y * -1f;
								}
								Dust dust6 = Main.dust[num6];
								dust6.velocity.X = dust6.velocity.X + num5 * 0.3f;
							}
							else
							{
								Main.dust[num6].velocity *= 0.2f;
							}
							Dust dust7 = Main.dust[num6];
							dust7.position.X = dust7.position.X - num5 * 1f;
							if (this.gravDir == -1f)
							{
								Dust dust8 = Main.dust[num6];
								dust8.velocity.Y = dust8.velocity.Y * -1f;
							}
						}
					}
				}
			}
		}

		// Token: 0x060007D5 RID: 2005 RVA: 0x002ED234 File Offset: 0x002EB434
		public void BordersMovement()
		{
			if (this.position.X < Main.leftWorld + 640f + 16f)
			{
				Main.cameraX = 0f;
				this.position.X = Main.leftWorld + 640f + 16f;
				this.velocity.X = 0f;
			}
			if (this.position.X + (float)this.width > Main.rightWorld - 640f - 32f)
			{
				Main.cameraX = 0f;
				this.position.X = Main.rightWorld - 640f - 32f - (float)this.width;
				this.velocity.X = 0f;
			}
			if (this.position.Y < Main.topWorld + 640f + 16f)
			{
				if (Main.remixWorld || this.forcedGravity > 0)
				{
					if (this.position.Y < Main.topWorld + 640f + 16f - (float)this.height && !this.dead)
					{
						this.KillMe(PlayerDeathReason.ByOther(19), 10.0, 0, false);
					}
					if (this.position.Y < Main.topWorld + 320f + 16f)
					{
						this.position.Y = Main.topWorld + 320f + 16f;
						if (this.velocity.Y < 0f)
						{
							this.velocity.Y = 0f;
						}
						this.gravDir = 1f;
					}
				}
				else
				{
					this.position.Y = Main.topWorld + 640f + 16f;
					if ((double)this.velocity.Y < 0.11)
					{
						this.velocity.Y = 0.11f;
					}
					this.gravDir = 1f;
				}
				AchievementsHelper.HandleSpecialEvent(this, 11);
			}
			if (this.position.Y > Main.bottomWorld - 640f - 32f - (float)this.height)
			{
				this.position.Y = Main.bottomWorld - 640f - 32f - (float)this.height;
				this.velocity.Y = 0f;
			}
			if (this.position.Y > Main.bottomWorld - 640f - 150f - (float)this.height)
			{
				AchievementsHelper.HandleSpecialEvent(this, 10);
			}
		}

		// Token: 0x060007D6 RID: 2006 RVA: 0x002ED4C0 File Offset: 0x002EB6C0
		public void CollectTaxes()
		{
			int num = Item.buyPrice(0, 0, 0, 50);
			int num2 = Item.buyPrice(0, 25, 0, 0);
			if (Main.tenthAnniversaryWorld)
			{
				num2 *= 2;
				num *= 2;
			}
			if (!NPC.taxCollector)
			{
				return;
			}
			if (this.taxMoney >= num2)
			{
				return;
			}
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && !Main.npc[i].homeless && !NPCID.Sets.IsTownPet[Main.npc[i].type] && NPC.TypeToDefaultHeadIndex(Main.npc[i].type) > 0)
				{
					num3++;
				}
			}
			this.taxMoney += num * num3;
			if (this.taxMoney > num2)
			{
				this.taxMoney = num2;
			}
		}

		// Token: 0x060007D7 RID: 2007 RVA: 0x002ED57E File Offset: 0x002EB77E
		public void GamepadEnableGrappleCooldown()
		{
			this._quickGrappleCooldown = 3;
		}

		// Token: 0x060007D8 RID: 2008 RVA: 0x002ED588 File Offset: 0x002EB788
		public void TryInterruptingItemUsage()
		{
			bool flag = false;
			if (this.heldProj > -1 && Main.projectile[this.heldProj].IsInterruptible(this))
			{
				flag = true;
			}
			if (!flag)
			{
				return;
			}
			bool flag2 = false;
			if (PlayerInput.Triggers.Current.Hotbar1)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar2)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar3)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar4)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar5)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar6)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar7)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar8)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar9)
			{
				flag2 = true;
			}
			if (PlayerInput.Triggers.Current.Hotbar10)
			{
				flag2 = true;
			}
			bool flag3 = Main.hairWindow;
			if (flag3)
			{
				int y = Main.screenHeight / 2 + 60;
				flag3 = new Rectangle(Main.screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2, y, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(Main.MouseScreen.ToPoint());
			}
			if (!Main.mapFullscreen && !CaptureManager.Instance.Active && !flag3 && !Main.playerInventory)
			{
				int num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt();
				if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
				{
					num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() - PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
				}
				if (PlayerInput.Triggers.Current.HotbarScrollCD != 0)
				{
					num = 0;
				}
				if (!Main.inFancyUI && !Main.ingameOptionsWindow)
				{
					num += PlayerInput.ScrollWheelDelta / -120;
				}
				if (num != 0)
				{
					num = Player.ClampHotbarOffset(num);
					int num2 = this.selectedItem + num;
					flag2 = true;
				}
			}
			if (flag2 && this.heldProj > -1)
			{
				Main.projectile[this.heldProj].Interrupt(this);
			}
		}

		// Token: 0x060007D9 RID: 2009 RVA: 0x002ED7C0 File Offset: 0x002EB9C0
		private bool CanMoveForwardOnRope(int dir, int x, int y)
		{
			int num = x + dir;
			if (Main.tile[num, y] != null && Main.tile[num, y].active() && Main.tileRope[(int)Main.tile[num, y].type])
			{
				float num2 = (float)(num * 16 + 8 - this.width / 2);
				float y2 = this.position.Y;
				y2 = (float)(y * 16 + 22);
				if ((!Main.tile[num, y - 1].active() || !Main.tileRope[(int)Main.tile[num, y - 1].type]) && (!Main.tile[num, y + 1].active() || !Main.tileRope[(int)Main.tile[num, y + 1].type]))
				{
					y2 = (float)(y * 16 + 22);
				}
				return !Collision.SolidCollision(new Vector2(num2, y2), this.width, this.height);
			}
			return false;
		}

		// Token: 0x060007DA RID: 2010 RVA: 0x002ED8C0 File Offset: 0x002EBAC0
		public void UpdateHairDyeDust()
		{
			if (Main.netMode == 2 || Main.gamePaused || this.dead || this.ghost || this.stoned || this.frozen)
			{
				return;
			}
			if ((int)this.hairDye == ContentSamples.CommonlyUsedContentSamples.TeamDyeShaderIndex)
			{
				if (Main.rand.Next(45) == 0)
				{
					int type = Main.rand.Next(139, 143);
					int num = Dust.NewDust(this.position, this.width, 8, type, 0f, 0f, 0, default(Color), 1.2f);
					Dust dust = Main.dust[num];
					dust.velocity.X = dust.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust2 = Main.dust[num];
					dust2.velocity.Y = dust2.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust3 = Main.dust[num];
					dust3.velocity.X = dust3.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust dust4 = Main.dust[num];
					dust4.velocity.Y = dust4.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust dust5 = Main.dust[num];
					dust5.velocity.Y = dust5.velocity.Y - 1f;
					Main.dust[num].scale *= 0.7f + (float)Main.rand.Next(-30, 31) * 0.01f;
					Main.dust[num].velocity += this.velocity * 0.2f;
				}
				if (Main.rand.Next(225) == 0)
				{
					int type2 = Main.rand.Next(276, 283);
					int num2 = Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(8)), this.velocity, type2, 1f);
					Gore gore = Main.gore[num2];
					gore.velocity.X = gore.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore gore2 = Main.gore[num2];
					gore2.velocity.Y = gore2.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Main.gore[num2].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Gore gore3 = Main.gore[num2];
					gore3.velocity.X = gore3.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore4 = Main.gore[num2];
					gore4.velocity.Y = gore4.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore5 = Main.gore[num2];
					gore5.velocity.Y = gore5.velocity.Y - 1f;
					Main.gore[num2].velocity += this.velocity * 0.2f;
				}
			}
		}

		// Token: 0x060007DB RID: 2011 RVA: 0x002EDC24 File Offset: 0x002EBE24
		public void Update(int i)
		{
			if (i == Main.myPlayer && Main.netMode != 2)
			{
				LockOnHelper.Update();
			}
			if (i == Main.myPlayer && Main.dontStarveWorld)
			{
				DontStarveDarknessDamageDealer.Update(this);
			}
			this.maxFallSpeed = 10f;
			this.gravity = Player.defaultGravity;
			Player.jumpHeight = 15;
			Player.jumpSpeed = 5.01f;
			this.maxRunSpeed = 3f;
			this.runAcceleration = 0.08f;
			this.runSlowdown = 0.2f;
			this.accRunSpeed = this.maxRunSpeed;
			if (!this.mount.Active || !this.mount.Cart)
			{
				this.onWrongGround = false;
			}
			this.heldProj = -1;
			this.instantMovementAccumulatedThisFrame = Vector2.Zero;
			if (this.PortalPhysicsEnabled)
			{
				this.maxFallSpeed = 35f;
			}
			if (this.shimmerWet || this.shimmering)
			{
				if (this.shimmering)
				{
					this.gravity *= 0.9f;
					this.maxFallSpeed *= 0.9f;
				}
				else
				{
					this.gravity = 0.15f;
					Player.jumpHeight = 23;
					Player.jumpSpeed = 5.51f;
				}
			}
			else if (this.wet)
			{
				if (this.honeyWet)
				{
					this.gravity = 0.1f;
					this.maxFallSpeed = 3f;
				}
				else if (this.merman)
				{
					this.gravity = 0.3f;
					this.maxFallSpeed = 7f;
				}
				else if (this.trident && !this.lavaWet)
				{
					this.gravity = 0.25f;
					this.maxFallSpeed = 6f;
					Player.jumpHeight = 25;
					Player.jumpSpeed = 5.51f;
					if (this.controlUp)
					{
						this.gravity = 0.1f;
						this.maxFallSpeed = 2f;
					}
				}
				else
				{
					this.gravity = 0.2f;
					this.maxFallSpeed = 5f;
					Player.jumpHeight = 30;
					Player.jumpSpeed = 6.01f;
				}
			}
			if (this.vortexDebuff)
			{
				this.gravity = 0f;
			}
			this.maxFallSpeed += 0.01f;
			bool flag = false;
			if (Main.myPlayer == i)
			{
				if (Main.mapFullscreen)
				{
					this.GamepadEnableGrappleCooldown();
				}
				else if (this._quickGrappleCooldown > 0)
				{
					this._quickGrappleCooldown--;
				}
				TileObject.objectPreview.Reset();
				if (DD2Event.DownedInvasionAnyDifficulty)
				{
					this.downedDD2EventAnyDifficulty = true;
				}
				this.autoReuseAllWeapons = Main.SettingsEnabled_AutoReuseAllItems;
			}
			if (NPC.freeCake && this.talkNPC >= 0 && Main.npc[this.talkNPC].type == 208)
			{
				NPC.freeCake = false;
				if (Main.netMode != 1)
				{
					Item.NewItem(new EntitySource_Gift(Main.npc[this.talkNPC]), (int)this.position.X, (int)this.position.Y, this.width, this.height, 3750, 1, false, 0, false, false);
				}
			}
			if (this.emoteTime > 0)
			{
				this.emoteTime--;
			}
			if (this.ghostDmg > 0f)
			{
				this.ghostDmg -= 6.6666665f;
			}
			if (this.ghostDmg < 0f)
			{
				this.ghostDmg = 0f;
			}
			if (Main.expertMode)
			{
				if (this.lifeSteal < 70f)
				{
					this.lifeSteal += 0.5f;
				}
				if (this.lifeSteal > 70f)
				{
					this.lifeSteal = 70f;
				}
			}
			else
			{
				if (this.lifeSteal < 80f)
				{
					this.lifeSteal += 0.6f;
				}
				if (this.lifeSteal > 80f)
				{
					this.lifeSteal = 80f;
				}
			}
			this.ResizeHitbox();
			if (this.mount.Active && this.mount.Type == 0)
			{
				int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int j = (int)(this.position.Y + (float)(this.height / 2) - 14f) / 16;
				Lighting.AddLight(num, j, 0.5f, 0.2f, 0.05f);
				Lighting.AddLight(num + this.direction, j, 0.5f, 0.2f, 0.05f);
				Lighting.AddLight(num + this.direction * 2, j, 0.5f, 0.2f, 0.05f);
			}
			this.outOfRange = false;
			if (this.whoAmI != Main.myPlayer)
			{
				int num2 = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num3 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
				if (!WorldGen.InWorld(num2, num3, 4))
				{
					flag = true;
				}
				else if (Main.tile[num2, num3] == null)
				{
					flag = true;
				}
				else if (Main.tile[num2 - 3, num3] == null)
				{
					flag = true;
				}
				else if (Main.tile[num2 + 3, num3] == null)
				{
					flag = true;
				}
				else if (Main.tile[num2, num3 - 3] == null)
				{
					flag = true;
				}
				else if (Main.tile[num2, num3 + 3] == null)
				{
					flag = true;
				}
				if (flag)
				{
					this.outOfRange = true;
					this.numMinions = 0;
					this.slotsMinions = 0f;
					this.itemAnimation = 0;
					this.UpdateBuffs(i);
					this.PlayerFrame();
				}
			}
			if (this.tankPet >= 0)
			{
				if (!this.tankPetReset)
				{
					this.tankPetReset = true;
				}
				else
				{
					this.tankPet = -1;
				}
			}
			if (i == Main.myPlayer)
			{
				this.IsVoidVaultEnabled = this.HasItem(4131);
			}
			if (this.chatOverhead.timeLeft > 0)
			{
				this.chatOverhead.timeLeft = this.chatOverhead.timeLeft - 1;
			}
			if (this.snowBallLauncherInteractionCooldown > 0)
			{
				this.snowBallLauncherInteractionCooldown--;
			}
			this.environmentBuffImmunityTimer = Math.Max(0, this.environmentBuffImmunityTimer - 1);
			if (flag)
			{
				return;
			}
			this.UpdateHairDyeDust();
			this.UpdateMiscCounter();
			this.infernoCounter++;
			if (this.infernoCounter >= 180)
			{
				this.infernoCounter = 0;
			}
			this.timeSinceLastDashStarted++;
			if (this.timeSinceLastDashStarted >= 300)
			{
				this.timeSinceLastDashStarted = 300;
			}
			this._framesLeftEligibleForDeadmansChestDeathAchievement--;
			if (this._framesLeftEligibleForDeadmansChestDeathAchievement < 0)
			{
				this._framesLeftEligibleForDeadmansChestDeathAchievement = 0;
			}
			if (this.titaniumStormCooldown > 0)
			{
				this.titaniumStormCooldown--;
			}
			if (this.starCloakCooldown > 0)
			{
				this.starCloakCooldown--;
				if (Main.rand.Next(5) == 0)
				{
					for (int k = 0; k < 2; k++)
					{
						Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
						dust.noLight = true;
						dust.noGravity = true;
						dust.velocity *= 0.5f;
						dust.velocity.X = 0f;
						dust.velocity.Y = dust.velocity.Y - 0.5f;
					}
				}
				if (this.starCloakCooldown == 0)
				{
					SoundEngine.PlaySound(25, -1, -1, 1, 1f, 0f);
				}
			}
			this._timeSinceLastImmuneGet++;
			if (this._timeSinceLastImmuneGet >= 10000)
			{
				this._timeSinceLastImmuneGet = 10000;
			}
			float num4 = (float)Main.maxTilesX / 4200f;
			num4 *= num4;
			float num5 = (float)((double)(this.position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 6.0));
			if (Main.remixWorld)
			{
				num5 = (float)((double)(this.position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 1.0));
			}
			if (Main.remixWorld)
			{
				if ((double)num5 < 0.1)
				{
					num5 = 0.1f;
				}
			}
			else if ((double)num5 < 0.25)
			{
				num5 = 0.25f;
			}
			if (num5 > 1f)
			{
				num5 = 1f;
			}
			this.gravity *= num5;
			this.maxRegenDelay = (1f - (float)this.statMana / (float)this.statManaMax2) * 60f * 4f + 45f;
			this.maxRegenDelay *= 0.7f;
			this.UpdateSocialShadow();
			this.UpdateTeleportVisuals();
			this.whoAmI = i;
			if (this.whoAmI == Main.myPlayer)
			{
				if (!DD2Event.Ongoing)
				{
					this.PurgeDD2EnergyCrystals();
				}
				this.TryPortalJumping();
				if (this.whoAmI == Main.myPlayer)
				{
					this.doorHelper.Update(this);
				}
			}
			if (this.runSoundDelay > 0)
			{
				this.runSoundDelay--;
			}
			if (this.attackCD > 0)
			{
				this.attackCD--;
			}
			if (this.itemAnimation == 0)
			{
				this.attackCD = 0;
			}
			if (this.potionDelay > 0)
			{
				this.potionDelay--;
			}
			if (i == Main.myPlayer)
			{
				if (this.trashItem.type >= 1522 && this.trashItem.type <= 1527)
				{
					this.trashItem.SetDefaults(0);
				}
				if (this.trashItem.type == 3643)
				{
					this.trashItem.SetDefaults(0);
				}
				this.UpdateBiomes();
				this.UpdateMinionTarget();
			}
			if (this.ghost)
			{
				this.Ghost();
				return;
			}
			if (this.dead)
			{
				this.UpdateDead();
				this.ResetProjectileCaches();
				this.UpdateProjectileCaches(i);
				return;
			}
			this.TrySpawningFaelings();
			if (i == Main.myPlayer && this.hasLucyTheAxe)
			{
				LucyAxeMessage.TryPlayingIdleMessage();
			}
			if (this.velocity.Y == 0f)
			{
				this.mount.FatigueRecovery();
			}
			if (i == Main.myPlayer && !this.isControlledByFilm)
			{
				this.ResetControls();
				if (Main.hasFocus)
				{
					if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
					{
						PlayerInput.Triggers.Current.CopyInto(this);
						this.LocalInputCache = new Player.DirectionalInputSyncCache(this);
						if (Main.mapFullscreen)
						{
							if (this.controlUp)
							{
								Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlDown)
							{
								Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y + 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlLeft)
							{
								Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlRight)
							{
								Main.mapFullscreenPos.X = Main.mapFullscreenPos.X + 1f * (16f / Main.mapFullscreenScale);
							}
							this.controlUp = false;
							this.controlLeft = false;
							this.controlDown = false;
							this.controlRight = false;
							this.controlJump = false;
							this.controlUseItem = false;
							this.controlUseTile = false;
							this.controlThrow = false;
							this.controlHook = false;
							this.controlTorch = false;
							this.controlSmart = false;
							this.controlMount = false;
						}
						if (this.isOperatingAnotherEntity)
						{
							this.controlUp = (this.controlDown = (this.controlLeft = (this.controlRight = (this.controlJump = false))));
						}
						if (this.controlQuickHeal)
						{
							if (this.releaseQuickHeal)
							{
								this.QuickHeal();
							}
							this.releaseQuickHeal = false;
						}
						else
						{
							this.releaseQuickHeal = true;
						}
						if (this.controlQuickMana)
						{
							if (this.releaseQuickMana)
							{
								this.QuickMana();
							}
							this.releaseQuickMana = false;
						}
						else
						{
							this.releaseQuickMana = true;
						}
						if (this.controlCreativeMenu)
						{
							if (this.releaseCreativeMenu)
							{
								this.ToggleCreativeMenu();
							}
							this.releaseCreativeMenu = false;
						}
						else
						{
							this.releaseCreativeMenu = true;
						}
						if (this.controlLeft && this.controlRight)
						{
							this.controlLeft = false;
							this.controlRight = false;
						}
						if (PlayerInput.UsingGamepad || !this.mouseInterface || !ItemSlot.Options.DisableLeftShiftTrashCan)
						{
							if (PlayerInput.SteamDeckIsUsed && PlayerInput.SettingsForUI.CurrentCursorMode == CursorMode.Mouse)
							{
								this.TryToToggleSmartCursor(ref Main.SmartCursorWanted_Mouse);
							}
							else if (PlayerInput.UsingGamepad)
							{
								this.TryToToggleSmartCursor(ref Main.SmartCursorWanted_GamePad);
							}
							else
							{
								this.TryToToggleSmartCursor(ref Main.SmartCursorWanted_Mouse);
							}
						}
						if (this.controlSmart)
						{
							this.releaseSmart = false;
						}
						else
						{
							this.releaseSmart = true;
						}
						if (this.controlMount)
						{
							if (this.releaseMount)
							{
								this.QuickMount();
							}
							this.releaseMount = false;
						}
						else
						{
							this.releaseMount = true;
						}
						if (Main.mapFullscreen)
						{
							if (this.mapZoomIn)
							{
								Main.mapFullscreenScale *= 1.05f;
							}
							if (this.mapZoomOut)
							{
								Main.mapFullscreenScale *= 0.95f;
							}
						}
						else
						{
							if (Main.mapStyle == 1)
							{
								if (this.mapZoomIn)
								{
									Main.mapMinimapScale *= 1.025f;
								}
								if (this.mapZoomOut)
								{
									Main.mapMinimapScale *= 0.975f;
								}
								if (this.mapAlphaUp)
								{
									Main.mapMinimapAlpha += 0.015f;
								}
								if (this.mapAlphaDown)
								{
									Main.mapMinimapAlpha -= 0.015f;
								}
							}
							else if (Main.mapStyle == 2)
							{
								if (this.mapZoomIn)
								{
									Main.mapOverlayScale *= 1.05f;
								}
								if (this.mapZoomOut)
								{
									Main.mapOverlayScale *= 0.95f;
								}
								if (this.mapAlphaUp)
								{
									Main.mapOverlayAlpha += 0.015f;
								}
								if (this.mapAlphaDown)
								{
									Main.mapOverlayAlpha -= 0.015f;
								}
							}
							if (this.mapStyle)
							{
								if (this.releaseMapStyle)
								{
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									Main.mapStyle++;
									if (Main.mapStyle > 2)
									{
										Main.mapStyle = 0;
									}
								}
								this.releaseMapStyle = false;
							}
							else
							{
								this.releaseMapStyle = true;
							}
						}
						if (this.mapFullScreen)
						{
							if (this.releaseMapFullscreen)
							{
								if (Main.mapFullscreen)
								{
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
									Main.mapFullscreen = false;
								}
								else
								{
									this.TryOpeningFullscreenMap();
								}
							}
							this.releaseMapFullscreen = false;
						}
						else
						{
							this.releaseMapFullscreen = true;
						}
					}
					else if (!PlayerInput.UsingGamepad && !Main.editSign && !Main.editChest && !Main.blockInput)
					{
						PlayerInput.Triggers.Current.CopyIntoDuringChat(this);
					}
					if (this.confused)
					{
						bool flag2 = this.controlLeft;
						bool flag3 = this.controlUp;
						this.controlLeft = this.controlRight;
						this.controlRight = flag2;
						this.controlUp = this.controlRight;
						this.controlDown = flag3;
					}
					else if (this.cartFlip)
					{
						if (this.controlRight || this.controlLeft)
						{
							bool flag4 = this.controlLeft;
							this.controlLeft = this.controlRight;
							this.controlRight = flag4;
						}
						else
						{
							this.cartFlip = false;
						}
					}
					for (int l = 0; l < this.doubleTapCardinalTimer.Length; l++)
					{
						this.doubleTapCardinalTimer[l]--;
						if (this.doubleTapCardinalTimer[l] < 0)
						{
							this.doubleTapCardinalTimer[l] = 0;
						}
					}
					for (int m = 0; m < 4; m++)
					{
						bool flag5 = false;
						bool flag6 = false;
						switch (m)
						{
						case 0:
							flag5 = (this.controlDown && this.releaseDown);
							flag6 = this.controlDown;
							break;
						case 1:
							flag5 = (this.controlUp && this.releaseUp);
							flag6 = this.controlUp;
							break;
						case 2:
							flag5 = (this.controlRight && this.releaseRight);
							flag6 = this.controlRight;
							break;
						case 3:
							flag5 = (this.controlLeft && this.releaseLeft);
							flag6 = this.controlLeft;
							break;
						}
						if (flag5)
						{
							if (this.doubleTapCardinalTimer[m] > 0)
							{
								this.KeyDoubleTap(m);
							}
							else
							{
								this.doubleTapCardinalTimer[m] = 15;
							}
						}
						if (flag6)
						{
							this.holdDownCardinalTimer[m]++;
							this.KeyHoldDown(m, this.holdDownCardinalTimer[m]);
						}
						else
						{
							this.holdDownCardinalTimer[m] = 0;
						}
					}
					this.controlDownHold = (this.holdDownCardinalTimer[0] >= 45);
					if (this.controlInv)
					{
						if (this.releaseInventory)
						{
							this.ToggleInv();
						}
						this.releaseInventory = false;
					}
					else
					{
						this.releaseInventory = true;
					}
					if (this.delayUseItem)
					{
						if (!this.controlUseItem)
						{
							this.delayUseItem = false;
						}
						this.controlUseItem = false;
					}
					if (this.itemAnimation == 0 && this.ItemTimeIsZero && this.reuseDelay == 0)
					{
						this.dropItemCheck();
						int num6 = this.selectedItem;
						bool flag7 = false;
						if (!Main.drawingPlayerChat && this.selectedItem != 58 && !Main.editSign && !Main.editChest)
						{
							if (PlayerInput.Triggers.Current.Hotbar1)
							{
								this.selectedItem = 0;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar2)
							{
								this.selectedItem = 1;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar3)
							{
								this.selectedItem = 2;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar4)
							{
								this.selectedItem = 3;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar5)
							{
								this.selectedItem = 4;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar6)
							{
								this.selectedItem = 5;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar7)
							{
								this.selectedItem = 6;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar8)
							{
								this.selectedItem = 7;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar9)
							{
								this.selectedItem = 8;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar10)
							{
								this.selectedItem = 9;
								flag7 = true;
							}
							int selectedBinding = this.DpadRadial.SelectedBinding;
							int selectedBinding2 = this.CircularRadial.SelectedBinding;
							int selectedBinding3 = this.QuicksRadial.SelectedBinding;
							this.DpadRadial.Update();
							this.CircularRadial.Update();
							this.QuicksRadial.Update();
							if (this.CircularRadial.SelectedBinding >= 0 && selectedBinding2 != this.CircularRadial.SelectedBinding)
							{
								this.DpadRadial.ChangeSelection(-1);
							}
							if (this.DpadRadial.SelectedBinding >= 0 && selectedBinding != this.DpadRadial.SelectedBinding)
							{
								this.CircularRadial.ChangeSelection(-1);
							}
							if (this.QuicksRadial.SelectedBinding != -1 && PlayerInput.Triggers.JustReleased.RadialQuickbar && !PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed)
							{
								switch (this.QuicksRadial.SelectedBinding)
								{
								case 0:
									this.QuickMount();
									break;
								case 1:
									this.QuickHeal();
									break;
								case 2:
									this.QuickBuff();
									break;
								case 3:
									this.QuickMana();
									break;
								}
							}
							if (this.controlTorch || flag7)
							{
								this.DpadRadial.ChangeSelection(-1);
								this.CircularRadial.ChangeSelection(-1);
							}
							if (this.controlTorch && flag7)
							{
								if (this.selectedItem != this.nonTorch)
								{
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								this.nonTorch = this.selectedItem;
								this.selectedItem = num6;
								flag7 = false;
							}
						}
						bool flag8 = Main.hairWindow;
						if (flag8)
						{
							int y = Main.screenHeight / 2 + 60;
							flag8 = new Rectangle(Main.screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2, y, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(Main.MouseScreen.ToPoint());
						}
						if (flag7 && CaptureManager.Instance.Active)
						{
							CaptureManager.Instance.Active = false;
						}
						if (num6 != this.selectedItem)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						if (Main.mapFullscreen)
						{
							float num7 = (float)(PlayerInput.ScrollWheelDelta / 120);
							if (PlayerInput.UsingGamepad)
							{
								num7 += (float)(PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt()) * 0.1f;
							}
							Main.mapFullscreenScale *= 1f + num7 * 0.3f;
						}
						else if (CaptureManager.Instance.Active)
						{
							CaptureManager.Instance.Scrolling();
						}
						else if (!flag8)
						{
							if (!Main.playerInventory)
							{
								this.HandleHotbar();
							}
							else
							{
								int num8 = Player.GetMouseScrollDelta();
								bool flag9 = true;
								if (Main.recBigList)
								{
									int num9 = 42;
									int num10 = 340;
									int num11 = 310;
									PlayerInput.SetZoom_UI();
									int num12 = (Main.screenWidth - num11 - 280) / num9;
									int num13 = (Main.screenHeight - num10 - 20) / num9;
									if (new Rectangle(num11, num10, num12 * num9, num13 * num9).Contains(Main.MouseScreen.ToPoint()))
									{
										num8 *= -1;
										int num14 = Math.Sign(num8);
										while (num8 != 0)
										{
											if (num8 < 0)
											{
												Main.recStart -= num12;
												if (Main.recStart < 0)
												{
													Main.recStart = 0;
												}
											}
											else
											{
												Main.recStart += num12;
												if (Main.recStart > Main.numAvailableRecipes - num12)
												{
													Main.recStart = Main.numAvailableRecipes - num12;
												}
											}
											num8 -= num14;
										}
									}
									PlayerInput.SetZoom_World();
								}
								if (flag9)
								{
									Main.focusRecipe += num8;
									if (Main.focusRecipe > Main.numAvailableRecipes - 1)
									{
										Main.focusRecipe = Main.numAvailableRecipes - 1;
									}
									if (Main.focusRecipe < 0)
									{
										Main.focusRecipe = 0;
									}
								}
							}
						}
					}
					else
					{
						bool flag10 = false;
						if (!Main.drawingPlayerChat && this.selectedItem != 58 && !Main.editSign && !Main.editChest)
						{
							int num15 = -1;
							if (Main.keyState.IsKeyDown(Keys.D1))
							{
								num15 = 0;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D2))
							{
								num15 = 1;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D3))
							{
								num15 = 2;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D4))
							{
								num15 = 3;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D5))
							{
								num15 = 4;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D6))
							{
								num15 = 5;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D7))
							{
								num15 = 6;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D8))
							{
								num15 = 7;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D9))
							{
								num15 = 8;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D0))
							{
								num15 = 9;
								flag10 = true;
							}
							if (flag10)
							{
								if (num15 != this.nonTorch)
								{
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								this.nonTorch = num15;
							}
						}
					}
				}
				if (this.selectedItem != 58)
				{
					this.SmartSelectLookup();
				}
				if (this.stoned != this.lastStoned)
				{
					if (this.whoAmI == Main.myPlayer && this.stoned)
					{
						int damage = (int)(20.0 * (double)Main.GameModeInfo.EnemyDamageMultiplier);
						this.Hurt(PlayerDeathReason.ByOther(5), damage, 0, false, false, false, -1, true);
					}
					SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					for (int n = 0; n < 20; n++)
					{
						int num16 = Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num16].noGravity = true;
						}
					}
				}
				this.lastStoned = this.stoned;
				if (this.frozen || this.webbed || this.stoned)
				{
					this.controlJump = false;
					this.controlDown = false;
					this.controlLeft = false;
					this.controlRight = false;
					this.controlUp = false;
					this.controlUseItem = false;
					this.controlUseTile = false;
					this.controlThrow = false;
					this.gravDir = 1f;
				}
				if (!this.controlThrow)
				{
					this.releaseThrow = true;
				}
				else
				{
					this.releaseThrow = false;
				}
				if (this.controlDown && this.releaseDown)
				{
					if (this.tryKeepingHoveringUp)
					{
						this.tryKeepingHoveringUp = false;
					}
					else
					{
						this.tryKeepingHoveringDown = true;
					}
				}
				if (this.controlUp && this.releaseUp)
				{
					if (this.tryKeepingHoveringDown)
					{
						this.tryKeepingHoveringDown = false;
					}
					else
					{
						this.tryKeepingHoveringUp = true;
					}
				}
				if (this.velocity.Y == 0f)
				{
					this.tryKeepingHoveringUp = false;
					this.tryKeepingHoveringDown = false;
				}
				if (Player.Settings.HoverControl == Player.Settings.HoverControlMode.Hold)
				{
					this.tryKeepingHoveringUp = false;
					this.tryKeepingHoveringDown = false;
				}
				this.TrySyncingInput();
				if (Main.playerInventory)
				{
					this.AdjTiles();
				}
				this.HandleBeingInChestRange();
				TileEntity tileEntity = this.tileEntityAnchor.GetTileEntity();
				if (tileEntity != null)
				{
					tileEntity.OnPlayerUpdate(this);
				}
			}
			if (i == Main.myPlayer)
			{
				if (this.velocity.Y <= 0f)
				{
					this.fallStart2 = (int)(this.position.Y / 16f);
				}
				if (this.velocity.Y == 0f)
				{
					int num17 = 25;
					num17 += this.extraFall;
					int num18 = (int)(this.position.Y / 16f) - this.fallStart;
					if (this.mount.CanFly())
					{
						num18 = 0;
					}
					if (this.mount.Cart && Minecart.OnTrack(this.position, this.width, this.height))
					{
						num18 = 0;
					}
					if (this.mount.Type == 1)
					{
						num18 = 0;
					}
					if (num18 > 0 || (this.gravDir == -1f && num18 < 0))
					{
						int num19 = (int)(this.position.X / 16f);
						int num20 = (int)((this.position.X + (float)this.width) / 16f);
						int num21 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
						if (this.gravDir == -1f)
						{
							num21 = (int)((this.position.Y - 1f) / 16f);
						}
						for (int num22 = num19; num22 <= num20; num22++)
						{
							if (Main.tile[num22, num21] != null && Main.tile[num22, num21].active() && (Main.tile[num22, num21].type == 189 || Main.tile[num22, num21].type == 196 || Main.tile[num22, num21].type == 460 || Main.tile[num22, num21].type == 666))
							{
								num18 = 0;
								break;
							}
						}
					}
					bool flag11 = false;
					for (int num23 = 3; num23 < 10; num23++)
					{
						if (this.armor[num23].stack > 0 && this.armor[num23].wingSlot > -1)
						{
							flag11 = true;
						}
					}
					if (this.stoned)
					{
						int num24 = (int)(((float)num18 * this.gravDir - 2f) * 20f);
						if (num24 > 0)
						{
							this.Hurt(PlayerDeathReason.ByOther(5), num24, 0, false, false, false, -1, true);
							this.immune = false;
						}
					}
					else if (((this.gravDir == 1f && num18 > num17) || (this.gravDir == -1f && num18 < -num17)) && !this.noFallDmg && !flag11)
					{
						this.immune = false;
						int num25 = (int)((float)num18 * this.gravDir - (float)num17) * 10;
						if (this.mount.Active)
						{
							num25 = (int)((float)num25 * this.mount.FallDamage);
						}
						this.Hurt(PlayerDeathReason.ByOther(0), num25, 0, false, false, false, -1, true);
						if (!this.dead && this.statLife <= this.statLifeMax2 / 10)
						{
							AchievementsHelper.HandleSpecialEvent(this, 8);
						}
					}
					this.fallStart = (int)(this.position.Y / 16f);
				}
				if (this.jump > 0 || this.rocketDelay > 0 || this.wet || this.slowFall || (double)num5 < 0.8 || this.tongued)
				{
					this.fallStart = (int)(this.position.Y / 16f);
				}
			}
			if (Main.netMode != 1)
			{
				if (this.chest == -1 && this.lastChest >= 0 && Main.chest[this.lastChest] != null)
				{
					int x = Main.chest[this.lastChest].x;
					int y2 = Main.chest[this.lastChest].y;
					NPC.BigMimicSummonCheck(x, y2, this);
				}
				if (this.lastChest != this.chest && this.chest >= 0 && Main.chest[this.chest] != null)
				{
					int x2 = Main.chest[this.chest].x;
					int y3 = Main.chest[this.chest].y;
					Projectile.GasTrapCheck(x2, y3, this);
					ItemSlot.forceClearGlowsOnChest = true;
				}
				this.lastChest = this.chest;
			}
			if (this.mouseInterface)
			{
				this.delayUseItem = true;
			}
			Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
			Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
			if (this.gravDir == -1f)
			{
				Player.tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
			}
			if (Player.tileTargetX >= Main.maxTilesX - 5)
			{
				Player.tileTargetX = Main.maxTilesX - 5;
			}
			if (Player.tileTargetY >= Main.maxTilesY - 5)
			{
				Player.tileTargetY = Main.maxTilesY - 5;
			}
			if (Player.tileTargetX < 5)
			{
				Player.tileTargetX = 5;
			}
			if (Player.tileTargetY < 5)
			{
				Player.tileTargetY = 5;
			}
			if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX - 1, Player.tileTargetY] = new Tile();
			}
			if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX + 1, Player.tileTargetY] = new Tile();
			}
			if (Main.tile[Player.tileTargetX, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX, Player.tileTargetY] = new Tile();
			}
			if (this.inventory[this.selectedItem].axe > 0 && !Main.tile[Player.tileTargetX, Player.tileTargetY].active() && this.inventory[this.selectedItem].createWall <= 0 && (this.inventory[this.selectedItem].hammer <= 0 || this.inventory[this.selectedItem].axe != 0))
			{
				if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type == 323)
				{
					if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].frameY > 4)
					{
						Player.tileTargetX--;
					}
				}
				else if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type == 323 && Main.tile[Player.tileTargetX + 1, Player.tileTargetY].frameY < -4)
				{
					Player.tileTargetX++;
				}
			}
			if (i == Main.myPlayer)
			{
				this.UpdateNearbyInteractibleProjectilesList();
			}
			try
			{
				if (this.whoAmI == Main.myPlayer && Main.instance.IsActive)
				{
					SmartCursorHelper.SmartCursorLookup(this);
					this.SmartInteractLookup();
				}
			}
			catch
			{
				Main.SmartCursorWanted_GamePad = false;
				Main.SmartCursorWanted_Mouse = false;
			}
			this.UpdateImmunity();
			if (this.petalTimer > 0)
			{
				this.petalTimer--;
			}
			if (this.shadowDodgeTimer > 0)
			{
				this.shadowDodgeTimer--;
			}
			if (this.boneGloveTimer > 0)
			{
				this.boneGloveTimer--;
			}
			if (this.crystalLeafCooldown > 0)
			{
				this.crystalLeafCooldown--;
			}
			if (this.jump > 0 || this.velocity.Y != 0f)
			{
				this.ResetFloorFlags();
			}
			bool flag12 = this.pStone;
			this.potionDelayTime = Item.potionDelay;
			this.restorationDelayTime = Item.restorationDelay;
			this.mushroomDelayTime = Item.mushroomDelay;
			if (this.pStone)
			{
				this.potionDelayTime = (int)((float)this.potionDelayTime * Player.PhilosopherStoneDurationMultiplier);
				this.restorationDelayTime = (int)((float)this.restorationDelayTime * Player.PhilosopherStoneDurationMultiplier);
				this.mushroomDelayTime = (int)((float)this.mushroomDelayTime * Player.PhilosopherStoneDurationMultiplier);
			}
			if (this.yoraiz0rEye > 0)
			{
				this.Yoraiz0rEye();
			}
			this.ResetEffects();
			this.UpdateDyes();
			if (CreativePowerManager.Instance.GetPower<CreativePowers.GodmodePower>().IsEnabledForPlayer(this.whoAmI))
			{
				this.creativeGodMode = true;
			}
			if (this.IsStandingStillForSpecialEffects && this.itemAnimation == 0)
			{
				this.afkCounter++;
			}
			else
			{
				this.afkCounter = 0;
			}
			this.meleeCrit += this.inventory[this.selectedItem].crit;
			this.magicCrit += this.inventory[this.selectedItem].crit;
			this.rangedCrit += this.inventory[this.selectedItem].crit;
			if (this.whoAmI == Main.myPlayer)
			{
				Main.musicBox2 = -1;
				if (Main.SceneMetrics.WaterCandleCount > 0)
				{
					this.AddBuff(86, 2, false, false);
				}
				if (Main.SceneMetrics.PeaceCandleCount > 0)
				{
					this.AddBuff(157, 2, false, false);
				}
				if (Main.SceneMetrics.ShadowCandleCount > 0)
				{
					this.AddBuff(350, 2, false, false);
				}
				if (Main.SceneMetrics.HasCampfire)
				{
					this.AddBuff(87, 2, false, false);
				}
				if (Main.SceneMetrics.HasCatBast)
				{
					this.AddBuff(215, 2, false, false);
				}
				if (Main.SceneMetrics.HasStarInBottle)
				{
					this.AddBuff(158, 2, false, false);
				}
				if (Main.SceneMetrics.HasHeartLantern)
				{
					this.AddBuff(89, 2, false, false);
				}
				if (Main.SceneMetrics.HasSunflower)
				{
					this.AddBuff(146, 2, false, false);
				}
				if (Main.SceneMetrics.hasBanner)
				{
					this.AddBuff(147, 2, false, false);
				}
				if (!this.behindBackWall && this.ZoneSandstorm)
				{
					this.AddBuff(194, 2, false, false);
				}
			}
			for (int num26 = 0; num26 < BuffID.Count; num26++)
			{
				this.buffImmune[num26] = false;
			}
			this.UpdateProjectileCaches(i);
			this.UpdateBuffs(i);
			if (this.whoAmI == Main.myPlayer)
			{
				if (!this.onFire && !this.poisoned)
				{
					this.trapDebuffSource = false;
				}
				this.UpdatePet(i);
				this.UpdatePetLight(i);
				this.isOperatingAnotherEntity = (this.ownedProjectileCounts[1020] > 0);
			}
			bool flag13 = this.wet && !this.lavaWet && (!this.mount.Active || !this.mount.IsConsideredASlimeMount);
			if (this.accMerman && flag13)
			{
				this.releaseJump = true;
				this.wings = 0;
				this.merman = true;
				this.accFlipper = true;
				this.AddBuff(34, 2, true, false);
			}
			else
			{
				this.merman = false;
			}
			if (!flag13 && this.forceWerewolf)
			{
				this.forceMerman = false;
			}
			if (this.forceMerman && flag13)
			{
				this.wings = 0;
			}
			this.accMerman = false;
			this.hideMerman = false;
			this.forceMerman = false;
			if (this.wolfAcc && !this.merman && !Main.dayTime && !this.wereWolf)
			{
				this.AddBuff(28, 60, true, false);
			}
			this.wolfAcc = false;
			this.hideWolf = false;
			this.forceWerewolf = false;
			if (this.whoAmI == Main.myPlayer)
			{
				for (int num27 = 0; num27 < Player.maxBuffs; num27++)
				{
					if (this.buffType[num27] > 0 && this.buffTime[num27] <= 0)
					{
						this.DelBuff(num27);
					}
				}
			}
			this.beetleDefense = false;
			this.beetleOffense = false;
			this.setSolar = false;
			this.head = this.armor[0].headSlot;
			this.body = this.armor[1].bodySlot;
			this.legs = this.armor[2].legSlot;
			this.ResetVisibleAccessories();
			if (this.MountFishronSpecialCounter > 0f)
			{
				this.MountFishronSpecialCounter -= 1f;
			}
			if (this._portalPhysicsTime > 0)
			{
				this._portalPhysicsTime--;
			}
			this.UpdateEquips(i);
			if (Main.npcShop <= 0)
			{
				this.discountAvailable = this.discountEquipped;
			}
			if (flag12 != this.pStone)
			{
				this.AdjustRemainingPotionSickness();
			}
			this.UpdatePermanentBoosters();
			this.UpdateLuck();
			this.shimmerUnstuckHelper.Update(this);
			this.UpdatePortableStoolUsage();
			if (this.velocity.Y == 0f || this.controlJump)
			{
				this.portalPhysicsFlag = false;
			}
			if (this.inventory[this.selectedItem].type == 3384 || this.portalPhysicsFlag)
			{
				this._portalPhysicsTime = 30;
			}
			if (this.mount.Active)
			{
				this.mount.UpdateEffects(this);
			}
			this.gemCount++;
			if (this.gemCount >= 10)
			{
				this.gem = -1;
				this.ownedLargeGems = 0;
				this.gemCount = 0;
				for (int num28 = 0; num28 <= 58; num28++)
				{
					if (this.inventory[num28].type == 0 || this.inventory[num28].stack == 0)
					{
						this.inventory[num28].TurnToAir(false);
					}
					if (this.inventory[num28].type >= 1522 && this.inventory[num28].type <= 1527)
					{
						this.gem = this.inventory[num28].type - 1522;
						this.ownedLargeGems[this.gem] = true;
					}
					if (this.inventory[num28].type == 3643)
					{
						this.gem = 6;
						this.ownedLargeGems[this.gem] = true;
					}
				}
			}
			this.UpdateArmorLights();
			this.UpdateArmorSets(i);
			if (this.shadowDodge && !this.onHitDodge)
			{
				this.ClearBuff(59);
			}
			if (this.maxTurretsOld != this.maxTurrets)
			{
				this.UpdateMaxTurrets();
				this.maxTurretsOld = this.maxTurrets;
			}
			if (this.shieldRaised)
			{
				this.statDefense += 20;
			}
			if ((this.merman || this.forceMerman) && flag13)
			{
				this.wings = 0;
			}
			if (this.invis)
			{
				if (this.itemAnimation == 0 && this.aggro > -750)
				{
					this.aggro = -750;
				}
				else if (this.aggro > -250)
				{
					this.aggro = -250;
				}
			}
			if (this.inventory[this.selectedItem].type == 3106)
			{
				if (this.itemAnimation > 0)
				{
					this.stealthTimer = 15;
					if (this.stealth > 0f)
					{
						this.stealth += 0.1f;
					}
				}
				else if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1 && !this.mount.Active)
				{
					if (this.stealthTimer == 0 && this.stealth > 0f)
					{
						this.stealth -= 0.02f;
						if ((double)this.stealth <= 0.0)
						{
							this.stealth = 0f;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
				else
				{
					if (this.stealth > 0f)
					{
						this.stealth += 0.1f;
					}
					if (this.mount.Active)
					{
						this.stealth = 1f;
					}
				}
				if (this.stealth > 1f)
				{
					this.stealth = 1f;
				}
				this.meleeDamage += (1f - this.stealth) * 3f;
				this.meleeCrit += (int)((1f - this.stealth) * 30f);
				if (this.meleeCrit > 100)
				{
					this.meleeCrit = 100;
				}
				this.aggro -= (int)((1f - this.stealth) * 750f);
				if (this.stealthTimer > 0)
				{
					this.stealthTimer--;
				}
			}
			else if (this.shroomiteStealth)
			{
				if (this.itemAnimation > 0)
				{
					this.stealthTimer = 5;
				}
				if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1 && !this.mount.Active)
				{
					if (this.stealthTimer == 0 && this.stealth > 0f)
					{
						this.stealth -= 0.015f;
						if ((double)this.stealth <= 0.0)
						{
							this.stealth = 0f;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
				else
				{
					float num29 = Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y);
					this.stealth += num29 * 0.0075f;
					if (this.stealth > 1f)
					{
						this.stealth = 1f;
					}
					if (this.mount.Active)
					{
						this.stealth = 1f;
					}
				}
				this.rangedDamage += (1f - this.stealth) * 0.6f;
				this.rangedCrit += (int)((1f - this.stealth) * 10f);
				this.aggro -= (int)((1f - this.stealth) * 750f);
				if (this.stealthTimer > 0)
				{
					this.stealthTimer--;
				}
			}
			else if (this.setVortex)
			{
				bool flag14 = false;
				if (this.vortexStealthActive)
				{
					float num30 = this.stealth;
					this.stealth -= 0.04f;
					if (this.stealth < 0f)
					{
						this.stealth = 0f;
					}
					else
					{
						flag14 = true;
					}
					if (this.stealth == 0f && num30 != this.stealth && Main.netMode == 1)
					{
						NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					this.rangedDamage += (1f - this.stealth) * 0.8f;
					this.rangedCrit += (int)((1f - this.stealth) * 20f);
					this.aggro -= (int)((1f - this.stealth) * 1200f);
					this.accRunSpeed *= 0.3f;
					this.maxRunSpeed *= 0.3f;
					if (this.mount.Active)
					{
						this.vortexStealthActive = false;
					}
				}
				else
				{
					float num31 = this.stealth;
					this.stealth += 0.04f;
					if (this.stealth > 1f)
					{
						this.stealth = 1f;
					}
					else
					{
						flag14 = true;
					}
					if (this.stealth == 1f && num31 != this.stealth && Main.netMode == 1)
					{
						NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (flag14)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust2 = Main.dust[Dust.NewDust(base.Center - vector * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.position = base.Center - vector * (float)Main.rand.Next(5, 11);
						dust2.velocity = vector.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
						dust2.scale = 0.5f + Main.rand.NextFloat();
						dust2.fadeIn = 0.5f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust3 = Main.dust[Dust.NewDust(base.Center - vector2 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
						dust3.noGravity = true;
						dust3.position = base.Center - vector2 * 12f;
						dust3.velocity = vector2.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
						dust3.scale = 0.5f + Main.rand.NextFloat();
						dust3.fadeIn = 0.5f;
					}
				}
			}
			else
			{
				this.stealth = 1f;
			}
			if (this.manaSick)
			{
				this.magicDamage *= 1f - this.manaSickReduction;
			}
			float num32 = this.meleeSpeed - 1f;
			num32 *= ItemID.Sets.BonusMeleeSpeedMultiplier[this.inventory[this.selectedItem].type];
			this.meleeSpeed = 1f + num32;
			if (this.tileSpeed > 3f)
			{
				this.tileSpeed = 3f;
			}
			this.tileSpeed = 1f / this.tileSpeed;
			if (this.wallSpeed > 3f)
			{
				this.wallSpeed = 3f;
			}
			this.wallSpeed = 1f / this.wallSpeed;
			if (this.statManaMax2 > 400)
			{
				this.statManaMax2 = 400;
			}
			if (this.statDefense < 0)
			{
				this.statDefense = 0;
			}
			if (this.slowOgreSpit)
			{
				this.moveSpeed /= 3f;
				if (this.velocity.Y == 0f && Math.Abs(this.velocity.X) > 1f)
				{
					this.velocity.X = this.velocity.X / 2f;
				}
			}
			else if (this.dazed)
			{
				this.moveSpeed /= 3f;
			}
			else if (this.slow)
			{
				this.moveSpeed /= 2f;
			}
			else if (this.chilled)
			{
				this.moveSpeed *= 0.75f;
			}
			if (this.shieldRaised)
			{
				this.moveSpeed /= 3f;
				if (this.velocity.Y == 0f && Math.Abs(this.velocity.X) > 3f)
				{
					this.velocity.X = this.velocity.X / 2f;
				}
			}
			if (DD2Event.Ongoing)
			{
				DD2Event.FindArenaHitbox();
				if (DD2Event.ShouldBlockBuilding(base.Center))
				{
					this.noBuilding = true;
					this.AddBuff(199, 3, true, false);
				}
			}
			if ((double)this.pickSpeed < 0.3)
			{
				this.pickSpeed = 0.3f;
			}
			this.CapAttackSpeeds();
			this.UpdateLifeRegen();
			this.soulDrain = 0;
			this.UpdateManaRegen();
			if (this.manaRegenCount < 0)
			{
				this.manaRegenCount = 0;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			this.runAcceleration *= this.moveSpeed;
			this.maxRunSpeed *= this.moveSpeed;
			this.UpdateJumpHeight();
			for (int num33 = 0; num33 < Player.maxBuffs; num33++)
			{
				if (this.buffType[num33] > 0 && this.buffTime[num33] > 0 && this.buffImmune[this.buffType[num33]])
				{
					this.DelBuff(num33);
				}
			}
			if (this.brokenArmor)
			{
				this.statDefense /= 2;
			}
			if (this.witheredArmor)
			{
				this.statDefense /= 2;
			}
			if (this.witheredWeapon)
			{
				this.meleeDamage *= 0.5f;
				this.rangedDamage *= 0.5f;
				this.magicDamage *= 0.5f;
				this.minionDamage *= 0.5f;
				this.rangedMultDamage *= 0.5f;
			}
			this.lastTileRangeX = Player.tileRangeX;
			this.lastTileRangeY = Player.tileRangeY;
			if (this.mount.Active)
			{
				this.movementAbilitiesCache.CopyFrom(this);
			}
			else
			{
				this.movementAbilitiesCache.PasteInto(this);
			}
			if (this.mount.Active && this.mount.BlockExtraJumps)
			{
				this.canJumpAgain_Cloud = false;
				this.canJumpAgain_Sandstorm = false;
				this.canJumpAgain_Blizzard = false;
				this.canJumpAgain_Fart = false;
				this.canJumpAgain_Sail = false;
				this.canJumpAgain_Unicorn = false;
				this.canJumpAgain_Santank = false;
				this.canJumpAgain_WallOfFleshGoat = false;
				this.canJumpAgain_Basilisk = false;
			}
			else if (this.velocity.Y == 0f || this.sliding)
			{
				this.RefreshDoubleJumps();
			}
			else
			{
				if (!this.hasJumpOption_Cloud)
				{
					this.canJumpAgain_Cloud = false;
				}
				if (!this.hasJumpOption_Sandstorm)
				{
					this.canJumpAgain_Sandstorm = false;
				}
				if (!this.hasJumpOption_Blizzard)
				{
					this.canJumpAgain_Blizzard = false;
				}
				if (!this.hasJumpOption_Fart)
				{
					this.canJumpAgain_Fart = false;
				}
				if (!this.hasJumpOption_Sail)
				{
					this.canJumpAgain_Sail = false;
				}
				if (!this.hasJumpOption_Unicorn)
				{
					this.canJumpAgain_Unicorn = false;
				}
				if (!this.hasJumpOption_Santank)
				{
					this.canJumpAgain_Santank = false;
				}
				if (!this.hasJumpOption_WallOfFleshGoat)
				{
					this.canJumpAgain_WallOfFleshGoat = false;
				}
				if (!this.hasJumpOption_Basilisk)
				{
					this.canJumpAgain_Basilisk = false;
				}
			}
			if (!this.carpet)
			{
				this.canCarpet = false;
				this.carpetFrame = -1;
			}
			else if (this.velocity.Y == 0f || this.sliding)
			{
				this.canCarpet = true;
				this.carpetTime = 0;
				this.carpetFrame = -1;
				this.carpetFrameCounter = 0f;
			}
			if (this.gravDir == -1f)
			{
				this.canCarpet = false;
			}
			if (this.ropeCount > 0)
			{
				this.ropeCount--;
			}
			if (!this.pulley && !this.frozen && !this.webbed && !this.stoned && !this.controlJump && this.gravDir == 1f && this.ropeCount == 0 && this.grappling[0] == -1 && !this.tongued && !this.mount.Active)
			{
				this.FindPulley();
			}
			this.UpdatePettingAnimal();
			this.sitting.UpdateSitting(this);
			this.sleeping.UpdateState(this);
			this.eyeHelper.Update(this);
			if (this.pulley)
			{
				if (this.mount.Active)
				{
					this.pulley = false;
				}
				this.sandStorm = false;
				this.CancelAllJumpVisualEffects();
				int num34 = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num35 = (int)(this.position.Y - 8f) / 16;
				bool flag15 = false;
				if (this.pulleyDir == 0)
				{
					this.pulleyDir = 1;
				}
				if (this.pulleyDir == 1)
				{
					if (this.direction == -1 && this.controlLeft && (this.releaseLeft || this.leftTimer == 0))
					{
						this.pulleyDir = 2;
						flag15 = true;
					}
					else if ((this.direction == 1 && this.controlRight && this.releaseRight) || this.rightTimer == 0)
					{
						this.pulleyDir = 2;
						flag15 = true;
					}
					else
					{
						if (this.direction == 1 && this.controlLeft)
						{
							this.direction = -1;
							flag15 = true;
						}
						if (this.direction == -1 && this.controlRight)
						{
							this.direction = 1;
							flag15 = true;
						}
					}
				}
				else if (this.pulleyDir == 2)
				{
					if (this.direction == 1 && this.controlLeft)
					{
						flag15 = true;
						if (!Collision.SolidCollision(new Vector2((float)(num34 * 16 + 8 - this.width / 2), this.position.Y), this.width, this.height))
						{
							this.pulleyDir = 1;
							this.direction = -1;
							flag15 = true;
						}
					}
					if (this.direction == -1 && this.controlRight)
					{
						flag15 = true;
						if (!Collision.SolidCollision(new Vector2((float)(num34 * 16 + 8 - this.width / 2), this.position.Y), this.width, this.height))
						{
							this.pulleyDir = 1;
							this.direction = 1;
							flag15 = true;
						}
					}
				}
				int num36 = 1;
				if (this.controlLeft)
				{
					num36 = -1;
				}
				bool flag16 = this.CanMoveForwardOnRope(num36, num34, num35);
				if (this.controlLeft && this.direction == -1 && flag16)
				{
					this.instantMovementAccumulatedThisFrame.X = this.instantMovementAccumulatedThisFrame.X + -1f;
				}
				if (this.controlRight && this.direction == 1 && flag16)
				{
					this.instantMovementAccumulatedThisFrame.X = this.instantMovementAccumulatedThisFrame.X + 1f;
				}
				bool flag17 = false;
				if (!flag15 && ((this.controlLeft && (this.releaseLeft || this.leftTimer == 0)) || (this.controlRight && (this.releaseRight || this.rightTimer == 0))))
				{
					int num37 = num34 + num36;
					if (WorldGen.IsRope(num37, num35))
					{
						this.pulleyDir = 1;
						this.direction = num36;
						int num38 = num37 * 16 + 8 - this.width / 2;
						float num39 = this.position.Y;
						num39 = (float)(num35 * 16 + 22);
						if (Main.tile[num37, num35 - 1] == null)
						{
							Main.tile[num37, num35 - 1] = new Tile();
						}
						if (Main.tile[num37, num35 + 1] == null)
						{
							Main.tile[num37, num35 + 1] = new Tile();
						}
						if (WorldGen.IsRope(num37, num35 - 1) || WorldGen.IsRope(num37, num35 + 1))
						{
							num39 = (float)(num35 * 16 + 22);
						}
						if (Collision.SolidCollision(new Vector2((float)num38, num39), this.width, this.height))
						{
							this.pulleyDir = 2;
							this.direction = -num36;
							if (this.direction == 1)
							{
								num38 = num37 * 16 + 8 - this.width / 2 + 6;
							}
							else
							{
								num38 = num37 * 16 + 8 - this.width / 2 + -6;
							}
						}
						if (i == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - (float)num38;
						}
						this.position.X = (float)num38;
						this.gfxOffY = this.position.Y - num39;
						this.position.Y = num39;
						flag17 = true;
					}
				}
				if (!flag17 && !flag15 && !this.controlUp && ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight)))
				{
					this.pulley = false;
					if (this.controlLeft && this.velocity.X == 0f)
					{
						this.velocity.X = -1f;
					}
					if (this.controlRight && this.velocity.X == 0f)
					{
						this.velocity.X = 1f;
					}
				}
				if (this.velocity.X != 0f)
				{
					this.pulley = false;
				}
				if (Main.tile[num34, num35] == null)
				{
					Main.tile[num34, num35] = new Tile();
				}
				if (!WorldGen.IsRope(num34, num35))
				{
					this.pulley = false;
				}
				if (this.gravDir != 1f)
				{
					this.pulley = false;
				}
				if (this.frozen || this.webbed || this.stoned)
				{
					this.pulley = false;
				}
				if (!this.pulley)
				{
					this.velocity.Y = this.velocity.Y - this.gravity;
				}
				if (this.controlJump)
				{
					this.pulley = false;
					this.jump = Player.jumpHeight;
					this.velocity.Y = -Player.jumpSpeed;
				}
			}
			if (this.grapCount > 0)
			{
				this.pulley = false;
			}
			if (NPC.brainOfGravity >= 0 && NPC.brainOfGravity < 200 && Vector2.Distance(base.Center, Main.npc[NPC.brainOfGravity].Center) < 4000f)
			{
				this.forcedGravity = 10;
			}
			if (this.forcedGravity > 0)
			{
				this.gravDir = -1f;
			}
			if (this.pulley)
			{
				this.fallStart = (int)this.position.Y / 16;
				this.wingFrame = 0;
				if (this.wings == 4)
				{
					this.wingFrame = 3;
				}
				int num40 = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num41 = (int)(this.position.Y - 16f) / 16;
				int num42 = (int)(this.position.Y - 8f) / 16;
				bool flag18 = true;
				bool flag19 = false;
				if (WorldGen.IsRope(num40, num42 - 1) || WorldGen.IsRope(num40, num42 + 1))
				{
					flag19 = true;
				}
				if (Main.tile[num40, num41] == null)
				{
					Main.tile[num40, num41] = new Tile();
				}
				if (!WorldGen.IsRope(num40, num41))
				{
					flag18 = false;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
					}
				}
				if (flag19)
				{
					if (this.controlUp && flag18)
					{
						float num43 = this.position.X;
						float y4 = this.position.Y - Math.Abs(this.velocity.Y) - 2f;
						if (Collision.SolidCollision(new Vector2(num43, y4), this.width, this.height))
						{
							num43 = (float)(num40 * 16 + 8 - this.width / 2 + 6);
							if (!Collision.SolidCollision(new Vector2(num43, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + this.position.X - num43;
								}
								this.pulleyDir = 2;
								this.direction = 1;
								this.position.X = num43;
								this.velocity.X = 0f;
							}
							else
							{
								num43 = (float)(num40 * 16 + 8 - this.width / 2 + -6);
								if (!Collision.SolidCollision(new Vector2(num43, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
								{
									if (i == Main.myPlayer)
									{
										Main.cameraX = Main.cameraX + this.position.X - num43;
									}
									this.pulleyDir = 2;
									this.direction = -1;
									this.position.X = num43;
									this.velocity.X = 0f;
								}
							}
						}
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.7f;
						}
						if (this.velocity.Y > -3f)
						{
							this.velocity.Y = this.velocity.Y - 0.2f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y - 0.02f;
						}
						if (this.velocity.Y < -8f)
						{
							this.velocity.Y = -8f;
						}
					}
					else if (this.controlDown)
					{
						float num44 = this.position.X;
						float y5 = this.position.Y;
						if (Collision.SolidCollision(new Vector2(num44, y5), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
						{
							num44 = (float)(num40 * 16 + 8 - this.width / 2 + 6);
							if (!Collision.SolidCollision(new Vector2(num44, y5), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + this.position.X - num44;
								}
								this.pulleyDir = 2;
								this.direction = 1;
								this.position.X = num44;
								this.velocity.X = 0f;
							}
							else
							{
								num44 = (float)(num40 * 16 + 8 - this.width / 2 + -6);
								if (!Collision.SolidCollision(new Vector2(num44, y5), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
								{
									if (i == Main.myPlayer)
									{
										Main.cameraX = Main.cameraX + this.position.X - num44;
									}
									this.pulleyDir = 2;
									this.direction = -1;
									this.position.X = num44;
									this.velocity.X = 0f;
								}
							}
						}
						if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.7f;
						}
						if (this.velocity.Y < 3f)
						{
							this.velocity.Y = this.velocity.Y + 0.2f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.velocity.Y > this.maxFallSpeed)
						{
							this.velocity.Y = this.maxFallSpeed;
						}
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.7f;
						if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
						{
							this.velocity.Y = 0f;
						}
					}
				}
				else if (this.controlDown)
				{
					this.ropeCount = 10;
					this.pulley = false;
					this.velocity.Y = 1f;
				}
				else
				{
					this.velocity.Y = 0f;
					this.position.Y = (float)(num41 * 16 + 22);
				}
				float num45 = (float)(num40 * 16 + 8 - this.width / 2);
				if (this.pulleyDir == 1)
				{
					num45 = (float)(num40 * 16 + 8 - this.width / 2);
				}
				if (this.pulleyDir == 2)
				{
					num45 = (float)(num40 * 16 + 8 - this.width / 2 + 6 * this.direction);
				}
				if (i == Main.myPlayer)
				{
					Main.cameraX += this.position.X - num45;
					Main.cameraX = MathHelper.Clamp(Main.cameraX, -32f, 32f);
				}
				this.position.X = num45;
				this.pulleyFrameCounter += Math.Abs(this.velocity.Y * 0.75f);
				if (this.velocity.Y != 0f)
				{
					this.pulleyFrameCounter += 0.75f;
				}
				if (this.pulleyFrameCounter > 10f)
				{
					this.pulleyFrame++;
					this.pulleyFrameCounter = 0f;
				}
				if (this.pulleyFrame > 1)
				{
					this.pulleyFrame = 0;
				}
				this.canCarpet = true;
				this.carpetFrame = -1;
				this.wingTime = (float)this.wingTimeMax;
				this.rocketTime = this.rocketTimeMax;
				this.rocketDelay = 0;
				this.rocketFrame = false;
				this.canRocket = false;
				this.rocketRelease = false;
				this.DashMovement();
				this.UpdateControlHolds();
			}
			else if (this.grappling[0] == -1 && !this.tongued)
			{
				if (this.wingsLogic > 0 && this.velocity.Y != 0f && !this.merman && !this.mount.Active)
				{
					this.WingAirLogicTweaks();
				}
				if (this.empressBrooch)
				{
					this.runAcceleration *= 1.75f;
				}
				if (this.hasMagiluminescence && this.velocity.Y == 0f)
				{
					this.runAcceleration *= 1.75f;
					this.maxRunSpeed *= 1.15f;
					this.accRunSpeed *= 1.15f;
					this.runSlowdown *= 1.75f;
				}
				if (this.shadowArmor)
				{
					this.runAcceleration *= 1.75f;
					this.maxRunSpeed *= 1.15f;
					this.accRunSpeed *= 1.15f;
					this.runSlowdown *= 1.75f;
				}
				if (this.mount.Active && this.mount.Type == 43 && this.velocity.Y != 0f)
				{
					this.runSlowdown = 0f;
				}
				if (this.sticky)
				{
					this.maxRunSpeed *= 0.25f;
					this.runAcceleration *= 0.25f;
					this.runSlowdown *= 2f;
					if (this.velocity.X > this.maxRunSpeed)
					{
						this.velocity.X = this.maxRunSpeed;
					}
					if (this.velocity.X < -this.maxRunSpeed)
					{
						this.velocity.X = -this.maxRunSpeed;
					}
				}
				else if (this.powerrun)
				{
					this.maxRunSpeed *= 3.5f;
					this.runAcceleration *= 1f;
					this.runSlowdown *= 2f;
				}
				else if (this.runningOnSand && this.desertBoots)
				{
					float num46 = 1.75f;
					this.maxRunSpeed *= num46;
					this.accRunSpeed *= num46;
					this.runAcceleration *= num46;
					this.runSlowdown *= num46;
				}
				else if (this.slippy2)
				{
					this.runAcceleration *= 0.6f;
					this.runSlowdown = 0f;
					if (this.iceSkate)
					{
						this.runAcceleration *= 3.5f;
						this.maxRunSpeed *= 1.25f;
					}
				}
				else if (this.slippy)
				{
					this.runAcceleration *= 0.7f;
					if (this.iceSkate)
					{
						this.runAcceleration *= 3.5f;
						this.maxRunSpeed *= 1.25f;
					}
					else
					{
						this.runSlowdown *= 0.1f;
					}
				}
				if (this.sandStorm)
				{
					this.runAcceleration *= 1.5f;
					this.maxRunSpeed *= 2f;
				}
				if (this.isPerformingJump_Blizzard && this.hasJumpOption_Blizzard)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.isPerformingJump_Fart && this.hasJumpOption_Fart)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.75f;
				}
				if (this.isPerformingJump_Unicorn && this.hasJumpOption_Unicorn)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.isPerformingJump_Santank && this.hasJumpOption_Santank)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.isPerformingJump_WallOfFleshGoat && this.hasJumpOption_WallOfFleshGoat)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.isPerformingJump_Basilisk && this.hasJumpOption_Basilisk)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.isPerformingJump_Sail && this.hasJumpOption_Sail)
				{
					this.runAcceleration *= 1.5f;
					this.maxRunSpeed *= 1.25f;
				}
				if (this.carpetFrame != -1)
				{
					this.runAcceleration *= 1.25f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.inventory[this.selectedItem].type == 3106 && this.stealth < 1f)
				{
					float num47 = this.maxRunSpeed / 2f * (1f - this.stealth);
					this.maxRunSpeed -= num47;
					this.accRunSpeed = this.maxRunSpeed;
				}
				if (this.mount.Active)
				{
					this.rocketBoots = 0;
					this.vanityRocketBoots = 0;
					this.wings = 0;
					this.wingsLogic = 0;
					this.maxRunSpeed = this.mount.RunSpeed;
					this.accRunSpeed = this.mount.DashSpeed;
					this.runAcceleration = this.mount.Acceleration;
					if (this.mount.Type == 12 && !this.MountFishronSpecial)
					{
						this.runAcceleration /= 2f;
						this.maxRunSpeed /= 2f;
					}
					this.mount.AbilityRecovery();
					if (this.mount.Cart && this.velocity.Y == 0f)
					{
						if (!Minecart.OnTrack(this.position, this.width, this.height))
						{
							this.fullRotation = 0f;
							this.onWrongGround = true;
							this.runSlowdown = 0.2f;
							if ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight))
							{
								this.mount.Dismount(this);
							}
						}
						else
						{
							this.runSlowdown = this.runAcceleration;
							this.onWrongGround = false;
						}
					}
					if (this.mount.Type == 8)
					{
						this.mount.UpdateDrill(this, this.controlUp, this.controlDown);
					}
				}
				this.HorizontalMovement();
				bool flag20 = !this.mount.Active;
				if (this.forcedGravity > 0)
				{
					this.gravDir = -1f;
				}
				else if (this.gravControl && flag20)
				{
					if (this.controlUp && this.releaseUp)
					{
						if (this.gravDir == 1f)
						{
							this.gravDir = -1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							SoundEngine.PlaySound(SoundID.Item8, this.position);
						}
						else
						{
							this.gravDir = 1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							SoundEngine.PlaySound(SoundID.Item8, this.position);
						}
					}
				}
				else if (this.gravControl2 && flag20)
				{
					if (this.controlUp && this.releaseUp)
					{
						if (this.gravDir == 1f)
						{
							this.gravDir = -1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							SoundEngine.PlaySound(SoundID.Item8, this.position);
						}
						else
						{
							this.gravDir = 1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							SoundEngine.PlaySound(SoundID.Item8, this.position);
						}
					}
				}
				else
				{
					this.gravDir = 1f;
				}
				if (this.velocity.Y == 0f && this.mount.Active && this.mount.CanHover() && this.controlUp && this.releaseUp)
				{
					this.velocity.Y = -(this.mount.Acceleration + this.gravity + 0.001f);
				}
				this.UpdateControlHolds();
				this.sandStorm = false;
				this.JumpMovement();
				if (this.wingsLogic == 0)
				{
					this.wingTime = 0f;
				}
				if (this.rocketBoots == 0)
				{
					this.rocketTime = 0;
				}
				if (this.jump == 0)
				{
					this.CancelAllJumpVisualEffects();
				}
				this.DashMovement();
				this.WallslideMovement();
				this.CarpetMovement();
				this.DoubleJumpVisuals();
				if (this.wingsLogic > 0 || this.mount.Active)
				{
					this.sandStorm = false;
				}
				if (((this.gravDir == 1f && this.velocity.Y > -Player.jumpSpeed) || (this.gravDir == -1f && this.velocity.Y < Player.jumpSpeed)) && this.velocity.Y != 0f)
				{
					this.canRocket = true;
				}
				bool flag21 = false;
				if (((this.velocity.Y == 0f || this.sliding) && this.releaseJump) || (this.autoJump && this.justJumped))
				{
					this.mount.ResetFlightTime(this.velocity.X);
					this.wingTime = (float)this.wingTimeMax;
				}
				if (this.wingsLogic > 0 && this.controlJump && this.wingTime > 0f && this.jump == 0 && this.velocity.Y != 0f)
				{
					flag21 = true;
				}
				if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 32 || this.wingsLogic == 29 || this.wingsLogic == 33 || this.wingsLogic == 35 || this.wingsLogic == 37 || this.wingsLogic == 45) && this.controlJump && this.TryingToHoverDown && this.wingTime > 0f)
				{
					flag21 = true;
				}
				if (this.frozen || this.webbed || this.stoned)
				{
					if (this.mount.Active)
					{
						this.mount.Dismount(this);
					}
					this.velocity.Y = this.velocity.Y + this.gravity;
					if (this.velocity.Y > this.maxFallSpeed)
					{
						this.velocity.Y = this.maxFallSpeed;
					}
					this.sandStorm = false;
					this.CancelAllJumpVisualEffects();
				}
				else
				{
					if (flag21)
					{
						this.WingAirVisuals();
						this.WingMovement();
					}
					this.WingFrame(flag21);
					if (this.wingsLogic > 0 && this.rocketBoots != 0 && this.velocity.Y != 0f && this.rocketTime != 0)
					{
						int num48 = 6;
						int num49 = this.rocketTime * num48;
						this.wingTime += (float)num49;
						if (this.wingTime > (float)(this.wingTimeMax + num49))
						{
							this.wingTime = (float)(this.wingTimeMax + num49);
						}
						this.rocketTime = 0;
					}
					if (flag21 && this.wings != 4 && this.wings != 22 && this.wings != 0 && this.wings != 24 && this.wings != 28 && this.wings != 30 && this.wings != 33 && this.wings != 45)
					{
						bool flag22 = this.wingFrame == 3;
						if (this.wings == 43 || this.wings == 44)
						{
							flag22 = (this.wingFrame == 4);
						}
						if (flag22)
						{
							if (!this.flapSound)
							{
								SoundEngine.PlaySound(SoundID.Item32, this.position);
							}
							this.flapSound = true;
						}
						else
						{
							this.flapSound = false;
						}
					}
					if (this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped))
					{
						this.rocketTime = this.rocketTimeMax;
					}
					if (this.empressBrooch)
					{
						this.rocketTime = this.rocketTimeMax;
					}
					if ((this.wingTime == 0f || this.wingsLogic == 0) && this.rocketBoots != 0 && this.controlJump && this.rocketDelay == 0 && this.canRocket && this.rocketRelease && !this.canJumpAgain_Cloud)
					{
						if (this.rocketTime > 0)
						{
							this.rocketTime--;
							this.rocketDelay = 10;
							if (this.rocketDelay2 <= 0)
							{
								if (this.rocketBoots == 1)
								{
									this.rocketDelay2 = 30;
								}
								else if (this.rocketBoots == 2 || this.rocketBoots == 5 || this.rocketBoots == 3 || this.rocketBoots == 4)
								{
									this.rocketDelay2 = 15;
								}
							}
							if (this.rocketSoundDelay <= 0)
							{
								if (this.vanityRocketBoots == 1 || this.vanityRocketBoots == 5)
								{
									this.rocketSoundDelay = 30;
									SoundEngine.PlaySound(SoundID.Item13, this.position);
								}
								else if (this.vanityRocketBoots == 2 || this.vanityRocketBoots == 3 || this.vanityRocketBoots == 4)
								{
									this.rocketSoundDelay = 15;
									SoundEngine.PlaySound(SoundID.Item24, this.position);
								}
							}
						}
						else
						{
							this.canRocket = false;
						}
					}
					if (this.rocketSoundDelay > 0)
					{
						this.rocketSoundDelay--;
					}
					if (this.rocketDelay2 > 0)
					{
						this.rocketDelay2--;
					}
					if (this.rocketDelay == 0)
					{
						this.rocketFrame = false;
					}
					if (this.rocketDelay > 0)
					{
						this.rocketFrame = true;
						this.RocketBootVisuals();
						if (this.rocketDelay == 0)
						{
							this.releaseJump = true;
						}
						this.rocketDelay--;
						this.velocity.Y = this.velocity.Y - 0.1f * this.gravDir;
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - 0.5f;
							}
							else if ((double)this.velocity.Y > (double)(-(double)Player.jumpSpeed) * 0.5)
							{
								this.velocity.Y = this.velocity.Y - 0.1f;
							}
							if (this.velocity.Y < -Player.jumpSpeed * 1.5f)
							{
								this.velocity.Y = -Player.jumpSpeed * 1.5f;
							}
						}
						else
						{
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + 0.5f;
							}
							else if ((double)this.velocity.Y < (double)Player.jumpSpeed * 0.5)
							{
								this.velocity.Y = this.velocity.Y + 0.1f;
							}
							if (this.velocity.Y > Player.jumpSpeed * 1.5f)
							{
								this.velocity.Y = Player.jumpSpeed * 1.5f;
							}
						}
					}
					else if (!flag21)
					{
						if (this.mount.CanHover())
						{
							this.mount.Hover(this);
						}
						else if (this.mount.CanFly() && this.controlJump && this.jump == 0)
						{
							if (this.mount.Flight())
							{
								if (this.TryingToHoverDown)
								{
									this.velocity.Y = this.velocity.Y * 0.9f;
									if (this.velocity.Y > -1f && (double)this.velocity.Y < 0.5)
									{
										this.velocity.Y = 1E-05f;
									}
								}
								else
								{
									float num50 = Player.jumpSpeed;
									if (this.mount.Type == 50)
									{
										num50 *= 0.5f;
									}
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.5f;
									}
									else if ((double)this.velocity.Y > (double)(-(double)num50) * 1.5)
									{
										this.velocity.Y = this.velocity.Y - 0.1f;
									}
									if (this.velocity.Y < -num50 * 1.5f)
									{
										this.velocity.Y = -num50 * 1.5f;
									}
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
								if (this.gravDir == 1f)
								{
									if (this.velocity.Y > this.maxFallSpeed / 3f && !this.TryingToHoverDown)
									{
										this.velocity.Y = this.maxFallSpeed / 3f;
									}
								}
								else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.TryingToHoverUp)
								{
									this.velocity.Y = -this.maxFallSpeed / 3f;
								}
							}
						}
						else if (this.slowFall && !this.TryingToHoverDown)
						{
							if (this.TryingToHoverUp)
							{
								this.gravity = this.gravity / 10f * this.gravDir;
							}
							else
							{
								this.gravity = this.gravity / 3f * this.gravDir;
							}
							this.velocity.Y = this.velocity.Y + this.gravity;
						}
						else if (this.wingsLogic > 0 && this.controlJump && this.velocity.Y > 0f)
						{
							bool noLightEmittence = this.wingsLogic != this.wings;
							this.fallStart = (int)(this.position.Y / 16f);
							if (this.velocity.Y > 0f)
							{
								if (this.wings == 10 && Main.rand.Next(3) == 0)
								{
									int num51 = 4;
									if (this.direction == 1)
									{
										num51 = -40;
									}
									int num52 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num51, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
									Main.dust[num52].fadeIn = 1.1f;
									Main.dust[num52].noGravity = true;
									Main.dust[num52].noLight = true;
									Main.dust[num52].velocity *= 0.3f;
									Main.dust[num52].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 34 && this.ShouldDrawWingsThatAreAlwaysAnimated() && Main.rand.Next(3) == 0)
								{
									int num53 = 4;
									if (this.direction == 1)
									{
										num53 = -40;
									}
									int num54 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num53, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
									Main.dust[num54].fadeIn = 1.1f;
									Main.dust[num54].noGravity = true;
									Main.dust[num54].noLight = true;
									Main.dust[num54].noLightEmittence = noLightEmittence;
									Main.dust[num54].velocity *= 0.3f;
									Main.dust[num54].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 40)
								{
									this.ShouldDrawWingsThatAreAlwaysAnimated();
								}
								if (this.wings == 44)
								{
									this.ShouldDrawWingsThatAreAlwaysAnimated();
								}
								if (this.wings == 9 && Main.rand.Next(3) == 0)
								{
									int num55 = 8;
									if (this.direction == 1)
									{
										num55 = -40;
									}
									int num56 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num55, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
									Main.dust[num56].noGravity = true;
									Main.dust[num56].velocity *= 0.3f;
									Main.dust[num56].noLightEmittence = noLightEmittence;
									Main.dust[num56].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 29 && Main.rand.Next(3) == 0)
								{
									int num57 = 8;
									if (this.direction == 1)
									{
										num57 = -40;
									}
									int num58 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num57, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
									Main.dust[num58].noGravity = true;
									Main.dust[num58].velocity *= 0.3f;
									Main.dust[num58].noLightEmittence = noLightEmittence;
									if (Main.rand.Next(10) == 0)
									{
										Main.dust[num58].fadeIn = 2f;
									}
									Main.dust[num58].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 6)
								{
									if (Main.rand.Next(10) == 0)
									{
										int num59 = 4;
										if (this.direction == 1)
										{
											num59 = -40;
										}
										int num60 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num59, this.position.Y + (float)(this.height / 2) - 12f), 30, 20, 55, 0f, 0f, 200, default(Color), 1f);
										Main.dust[num60].noLightEmittence = noLightEmittence;
										Main.dust[num60].velocity *= 0.3f;
										Main.dust[num60].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
									}
								}
								else if (this.wings == 5 && Main.rand.Next(6) == 0)
								{
									int num61 = 6;
									if (this.direction == 1)
									{
										num61 = -30;
									}
									int num62 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num61, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
									Main.dust[num62].velocity *= 0.3f;
									Main.dust[num62].noLightEmittence = noLightEmittence;
									Main.dust[num62].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 4)
								{
									this.rocketDelay2--;
									if (this.rocketDelay2 <= 0)
									{
										SoundEngine.PlaySound(SoundID.Item13, this.position);
										this.rocketDelay2 = 60;
									}
									int type = 6;
									float scale = 1.5f;
									int alpha = 100;
									float x3 = this.position.X + (float)(this.width / 2) + 16f;
									if (this.direction > 0)
									{
										x3 = this.position.X + (float)(this.width / 2) - 26f;
									}
									float num63 = this.position.Y + (float)this.height - 18f;
									if (Main.rand.Next(2) == 1)
									{
										x3 = this.position.X + (float)(this.width / 2) + 8f;
										if (this.direction > 0)
										{
											x3 = this.position.X + (float)(this.width / 2) - 20f;
										}
										num63 += 6f;
									}
									int num64 = Dust.NewDust(new Vector2(x3, num63), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
									Dust dust4 = Main.dust[num64];
									dust4.velocity.X = dust4.velocity.X * 0.3f;
									Dust dust5 = Main.dust[num64];
									dust5.velocity.Y = dust5.velocity.Y + 10f;
									Main.dust[num64].noGravity = true;
									Main.dust[num64].noLightEmittence = noLightEmittence;
									Main.dust[num64].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
									this.wingFrameCounter++;
									if (this.wingFrameCounter > 4)
									{
										this.wingFrame++;
										this.wingFrameCounter = 0;
										if (this.wingFrame >= 3)
										{
											this.wingFrame = 0;
										}
									}
								}
								else if (this.wings != 22 && this.wings != 28)
								{
									if (this.wings == 30)
									{
										this.wingFrameCounter++;
										int num65 = 5;
										if (this.wingFrameCounter >= num65 * 3)
										{
											this.wingFrameCounter = 0;
										}
										this.wingFrame = 1 + this.wingFrameCounter / num65;
									}
									else if (this.wings == 34)
									{
										this.wingFrameCounter++;
										int num66 = 7;
										if (this.wingFrameCounter >= num66 * 6)
										{
											this.wingFrameCounter = 0;
										}
										this.wingFrame = this.wingFrameCounter / num66;
									}
									else if (this.wings != 45)
									{
										if (this.wings == 40)
										{
											this.wingFrame = 0;
										}
										else if (this.wings == 44)
										{
											this.wingFrame = 2;
										}
										else if (this.wings == 39)
										{
											this.wingFrameCounter++;
											int num67 = 12;
											if (this.wingFrameCounter >= num67 * 6)
											{
												this.wingFrameCounter = 0;
											}
											this.wingFrame = this.wingFrameCounter / num67;
										}
										else if (this.wings == 26)
										{
											int num68 = 6;
											if (this.direction == 1)
											{
												num68 = -30;
											}
											int num69 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num68, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
											Main.dust[num69].noGravity = true;
											Main.dust[num69].noLight = true;
											Main.dust[num69].velocity /= 4f;
											Main.dust[num69].velocity -= this.velocity;
											Main.dust[num69].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
											if (Main.rand.Next(2) == 0)
											{
												num68 = -24;
												if (this.direction == 1)
												{
													num68 = 12;
												}
												float num70 = this.position.Y;
												if (this.gravDir == -1f)
												{
													num70 += (float)(this.height / 2);
												}
												num69 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num68, num70), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
												Main.dust[num69].noGravity = true;
												Main.dust[num69].noLight = true;
												Main.dust[num69].velocity /= 4f;
												Main.dust[num69].velocity -= this.velocity;
												Main.dust[num69].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
											}
											this.wingFrame = 2;
										}
										else if (this.wings == 37)
										{
											Color color = Color.Lerp(Color.Black, Color.White, Main.rand.NextFloat());
											int num71 = 6;
											if (this.direction == 1)
											{
												num71 = -30;
											}
											int num72 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num71, this.position.Y), 24, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
											{
												31,
												31,
												31
											}), 0f, 0f, 100, default(Color), 0.7f);
											Main.dust[num72].noGravity = true;
											Main.dust[num72].noLight = true;
											Main.dust[num72].velocity /= 4f;
											Main.dust[num72].velocity -= this.velocity;
											Main.dust[num72].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
											if (Main.dust[num72].type == 55)
											{
												Main.dust[num72].color = color;
											}
											if (Main.rand.Next(3) == 0)
											{
												num71 = -24;
												if (this.direction == 1)
												{
													num71 = 12;
												}
												float num73 = this.position.Y;
												if (this.gravDir == -1f)
												{
													num73 += (float)(this.height / 2);
												}
												num72 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num71, num73), 12, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
												{
													31,
													31,
													31
												}), 0f, 0f, 140, default(Color), 0.7f);
												Main.dust[num72].noGravity = true;
												Main.dust[num72].noLight = true;
												Main.dust[num72].velocity /= 4f;
												Main.dust[num72].velocity -= this.velocity;
												Main.dust[num72].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
												if (Main.dust[num72].type == 55)
												{
													Main.dust[num72].color = color;
												}
											}
											this.wingFrame = 2;
										}
										else if (this.wings != 24)
										{
											if (this.wings == 43)
											{
												this.wingFrame = 1;
											}
											else if (this.wings == 12)
											{
												this.wingFrame = 3;
											}
											else
											{
												this.wingFrame = 2;
											}
										}
									}
								}
							}
							this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
							if (this.gravDir == 1f)
							{
								if (this.velocity.Y > this.maxFallSpeed / 3f && !this.TryingToHoverDown)
								{
									this.velocity.Y = this.maxFallSpeed / 3f;
								}
							}
							else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.TryingToHoverUp)
							{
								this.velocity.Y = -this.maxFallSpeed / 3f;
							}
						}
						else if (this.cartRampTime <= 0)
						{
							this.velocity.Y = this.velocity.Y + this.gravity * this.gravDir;
						}
						else
						{
							this.cartRampTime--;
						}
					}
					if (!this.mount.Active || this.mount.Type != 5)
					{
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > this.maxFallSpeed)
							{
								this.velocity.Y = this.maxFallSpeed;
							}
							if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 3f && !this.TryingToHoverDown)
							{
								this.velocity.Y = this.maxFallSpeed / 3f;
							}
							if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 5f && this.TryingToHoverUp)
							{
								this.velocity.Y = this.maxFallSpeed / 10f;
							}
						}
						else
						{
							if (this.velocity.Y < -this.maxFallSpeed)
							{
								this.velocity.Y = -this.maxFallSpeed;
							}
							if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 3f && !this.TryingToHoverDown)
							{
								this.velocity.Y = -this.maxFallSpeed / 3f;
							}
							if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 5f && this.TryingToHoverUp)
							{
								this.velocity.Y = -this.maxFallSpeed / 10f;
							}
						}
					}
				}
			}
			else
			{
				this.UpdateControlHolds();
			}
			if (this.mount.Active)
			{
				this.wingFrame = 0;
			}
			if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 31 || this.wingsLogic == 33 || this.wingsLogic == 35 || this.wingsLogic == 37 || this.wingsLogic == 45) && this.TryingToHoverDown && this.controlJump && this.wingTime > 0f && !this.merman)
			{
				float num74 = 0.9f;
				if (this.wingsLogic == 45)
				{
					num74 = 0.8f;
				}
				this.velocity.Y = this.velocity.Y * num74;
				if (this.velocity.Y > -2f && this.velocity.Y < 1f)
				{
					this.velocity.Y = 1E-05f;
				}
			}
			if (this.wingsLogic == 37 && this.TryingToHoverDown && this.controlJump && this.wingTime > 0f && !this.merman)
			{
				this.velocity.Y = this.velocity.Y * 0.92f;
				if (this.velocity.Y > -2f && this.velocity.Y < 1f)
				{
					this.velocity.Y = 1E-05f;
				}
			}
			this.GrabItems(i);
			this.LookForTileInteractions();
			if (this.tongued)
			{
				this.StopVanityActions(true);
				bool flag23 = false;
				if (Main.wofNPCIndex >= 0)
				{
					NPC npc = Main.npc[Main.wofNPCIndex];
					float num75 = npc.Center.X + (float)(npc.direction * 200);
					float y6 = npc.Center.Y;
					Vector2 center = base.Center;
					float num76 = num75 - center.X;
					float num77 = y6 - center.Y;
					float num78 = (float)Math.Sqrt((double)(num76 * num76 + num77 * num77));
					float num79 = 11f;
					if (Main.expertMode)
					{
						float value = 22f;
						float amount = Math.Min(1f, npc.velocity.Length() / 5f);
						num79 = MathHelper.Lerp(num79, value, amount);
					}
					float num80;
					if (num78 > num79)
					{
						num80 = num79 / num78;
					}
					else
					{
						num80 = 1f;
						flag23 = true;
					}
					num76 *= num80;
					num77 *= num80;
					this.velocity.X = num76;
					this.velocity.Y = num77;
				}
				else
				{
					flag23 = true;
				}
				if (flag23 && Main.myPlayer == this.whoAmI)
				{
					for (int num81 = 0; num81 < Player.maxBuffs; num81++)
					{
						if (this.buffType[num81] == 38)
						{
							this.DelBuff(num81);
						}
					}
				}
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.WOFTongue();
				if (this.controlHook)
				{
					if (this.releaseHook)
					{
						this.QuickGrapple();
					}
					this.releaseHook = false;
				}
				else
				{
					this.releaseHook = true;
				}
				if (this.talkNPC >= 0)
				{
					Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
					Rectangle value2 = new Rectangle((int)Main.npc[this.talkNPC].position.X, (int)Main.npc[this.talkNPC].position.Y, Main.npc[this.talkNPC].width, Main.npc[this.talkNPC].height);
					if (!rectangle.Intersects(value2) || this.chest != -1 || !Main.npc[this.talkNPC].active || this.tileEntityAnchor.InUse)
					{
						if (this.chest == -1)
						{
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						this.SetTalkNPC(-1, false);
						Main.npcChatCornerItem = 0;
						Main.npcChatText = "";
					}
				}
				if (this.sign >= 0)
				{
					Rectangle value3 = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
					try
					{
						bool flag24 = false;
						if (Main.sign[this.sign] == null)
						{
							flag24 = true;
						}
						if (!flag24 && !new Rectangle(Main.sign[this.sign].x * 16, Main.sign[this.sign].y * 16, 32, 32).Intersects(value3))
						{
							flag24 = true;
						}
						if (flag24)
						{
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							this.sign = -1;
							Main.editSign = false;
							Main.npcChatText = "";
						}
					}
					catch
					{
						SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						this.sign = -1;
						Main.editSign = false;
						Main.npcChatText = "";
					}
				}
				if (Main.editSign)
				{
					if (this.sign == -1)
					{
						Main.editSign = false;
					}
					else
					{
						Main.InputTextSign();
					}
				}
				else if (Main.editChest)
				{
					Main.InputTextChest();
					if (Main.player[Main.myPlayer].chest == -1)
					{
						Main.editChest = false;
					}
				}
				if (this.mount.Active && this.mount.Cart && this.velocity.Length() > 4f)
				{
					Rectangle rectangle2 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
					if (this.velocity.X < -1f)
					{
						rectangle2.X -= 15;
					}
					if (this.velocity.X > 1f)
					{
						rectangle2.Width += 15;
					}
					if (this.velocity.X < -10f)
					{
						rectangle2.X -= 10;
					}
					if (this.velocity.X > 10f)
					{
						rectangle2.Width += 10;
					}
					if (this.velocity.Y < -1f)
					{
						rectangle2.Y -= 10;
					}
					if (this.velocity.Y > 1f)
					{
						rectangle2.Height += 10;
					}
					for (int num82 = 0; num82 < 200; num82++)
					{
						if (Main.npc[num82].active && !Main.npc[num82].dontTakeDamage && !Main.npc[num82].friendly && Main.npc[num82].immune[i] == 0 && this.CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[num82], null) && rectangle2.Intersects(new Rectangle((int)Main.npc[num82].position.X, (int)Main.npc[num82].position.Y, Main.npc[num82].width, Main.npc[num82].height)))
						{
							float num83 = (float)this.meleeCrit;
							if (num83 < (float)this.rangedCrit)
							{
								num83 = (float)this.rangedCrit;
							}
							if (num83 < (float)this.magicCrit)
							{
								num83 = (float)this.magicCrit;
							}
							bool crit = false;
							if ((float)Main.rand.Next(1, 101) <= num83)
							{
								crit = true;
							}
							float currentSpeed = this.velocity.Length() / this.maxRunSpeed;
							int damage2;
							float num84;
							this.GetMinecartDamage(currentSpeed, out damage2, out num84);
							int direction = 1;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (Main.npc[num82].knockBackResist < 1f && Main.npc[num82].knockBackResist > 0f)
							{
								num84 /= Main.npc[num82].knockBackResist;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(Main.npc[num82], damage2, num84, direction, crit);
							}
							Main.npc[num82].immune[i] = 30;
							if (!Main.npc[num82].active)
							{
								AchievementsHelper.HandleSpecialEvent(this, 9);
							}
						}
					}
				}
				this.Update_NPCCollision();
				if (!this.shimmering)
				{
					Collision.HurtTile hurtTile = this.GetHurtTile();
					if (hurtTile.type >= 0)
					{
						this.ApplyTouchDamage(hurtTile.type, hurtTile.x, hurtTile.y);
					}
				}
				this.TryToShimmerUnstuck();
			}
			if (this.controlRight)
			{
				this.releaseRight = false;
			}
			else
			{
				this.releaseRight = true;
				this.rightTimer = 7;
			}
			if (this.controlLeft)
			{
				this.releaseLeft = false;
			}
			else
			{
				this.releaseLeft = true;
				this.leftTimer = 7;
			}
			this.releaseDown = !this.controlDown;
			if (this.rightTimer > 0)
			{
				this.rightTimer--;
			}
			else if (this.controlRight)
			{
				this.rightTimer = 7;
			}
			if (this.leftTimer > 0)
			{
				this.leftTimer--;
			}
			else if (this.controlLeft)
			{
				this.leftTimer = 7;
			}
			this.GrappleMovement();
			this.StickyMovement();
			this.CheckDrowning();
			if (this.gravDir == -1f)
			{
				this.waterWalk = false;
				this.waterWalk2 = false;
			}
			int num85 = this.height;
			if (this.waterWalk)
			{
				num85 -= 6;
			}
			bool flag25 = false;
			if (!this.shimmering)
			{
				flag25 = Collision.LavaCollision(this.position, this.width, num85);
			}
			if (flag25)
			{
				if (!this.lavaImmune && Main.myPlayer == i && this.hurtCooldowns[4] <= 0)
				{
					if (this.lavaTime > 0)
					{
						this.lavaTime--;
					}
					else
					{
						int num86 = 80;
						int num87 = 420;
						if (Main.remixWorld)
						{
							num86 = 200;
							num87 = 630;
						}
						if (!this.ashWoodBonus || !this.lavaRose)
						{
							if (this.ashWoodBonus)
							{
								if (Main.remixWorld)
								{
									num86 = 145;
								}
								num86 /= 2;
								num87 -= 210;
							}
							if (this.lavaRose)
							{
								num86 -= 45;
								num87 -= 210;
							}
							if (num86 > 0)
							{
								this.Hurt(PlayerDeathReason.ByOther(2), num86, 0, false, false, false, 4, true);
							}
							if (num87 > 0)
							{
								this.AddBuff(24, num87, true, false);
							}
						}
					}
				}
				this.lavaWet = true;
			}
			else
			{
				this.lavaWet = false;
				if (this.lavaTime < this.lavaMax)
				{
					this.lavaTime++;
				}
			}
			if (this.lavaTime > this.lavaMax)
			{
				this.lavaTime = this.lavaMax;
			}
			if (this.waterWalk2 && !this.waterWalk)
			{
				num85 -= 6;
			}
			bool flag26 = Collision.WetCollision(this.position, this.width, this.height);
			bool flag27 = Collision.honey;
			bool shimmer = Collision.shimmer;
			if (shimmer)
			{
				this.shimmerWet = true;
				if (this.whoAmI == Main.myPlayer && !this.shimmerImmune && !this.shimmerUnstuckHelper.ShouldUnstuck)
				{
					int num88 = (int)(base.Center.X / 16f);
					int num89 = (int)((this.position.Y + 1f) / 16f);
					if (Main.tile[num88, num89] != null && Main.tile[num88, num89].shimmer() && Main.tile[num88, num89].liquid >= 0 && this.position.Y / 16f < (float)Main.UnderworldLayer)
					{
						this.AddBuff(353, 60, true, false);
					}
				}
			}
			if (flag27 && !this.shimmering)
			{
				this.AddBuff(48, 1800, true, false);
				this.honeyWet = true;
			}
			if (flag26)
			{
				if ((this.onFire || this.onFire3) && !this.lavaWet)
				{
					for (int num90 = 0; num90 < Player.maxBuffs; num90++)
					{
						int num91 = this.buffType[num90];
						if (num91 == 24 || num91 == 323)
						{
							this.DelBuff(num90);
						}
					}
				}
				if (!this.wet)
				{
					if (this.wetCount == 0)
					{
						this.wetCount = 10;
						if (!this.shimmering)
						{
							if (!flag25)
							{
								if (this.shimmerWet)
								{
									for (int num92 = 0; num92 < 50; num92++)
									{
										int num93 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, 308, 0f, 0f, 0, default(Color), 1f);
										Dust dust6 = Main.dust[num93];
										dust6.velocity.Y = dust6.velocity.Y - 4f;
										Dust dust7 = Main.dust[num93];
										dust7.velocity.X = dust7.velocity.X * 2.5f;
										Main.dust[num93].scale = 0.8f;
										Main.dust[num93].noGravity = true;
										int num94 = Main.rand.Next(6);
										if (num94 == 0)
										{
											Main.dust[num93].color = new Color(255, 255, 210);
										}
										else if (num94 == 1)
										{
											Main.dust[num93].color = new Color(190, 245, 255);
										}
										else if (num94 == 2)
										{
											Main.dust[num93].color = new Color(255, 150, 255);
										}
										else
										{
											Main.dust[num93].color = new Color(190, 175, 255);
										}
									}
									SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 2, 1f, 0f);
								}
								else if (this.honeyWet)
								{
									for (int num95 = 0; num95 < 20; num95++)
									{
										int num96 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
										Dust dust8 = Main.dust[num96];
										dust8.velocity.Y = dust8.velocity.Y - 1f;
										Dust dust9 = Main.dust[num96];
										dust9.velocity.X = dust9.velocity.X * 2.5f;
										Main.dust[num96].scale = 1.3f;
										Main.dust[num96].alpha = 100;
										Main.dust[num96].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								}
								else
								{
									for (int num97 = 0; num97 < 50; num97++)
									{
										int num98 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
										Dust dust10 = Main.dust[num98];
										dust10.velocity.Y = dust10.velocity.Y - 3f;
										Dust dust11 = Main.dust[num98];
										dust11.velocity.X = dust11.velocity.X * 2.5f;
										Main.dust[num98].scale = 0.8f;
										Main.dust[num98].alpha = 100;
										Main.dust[num98].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
								}
							}
							else
							{
								for (int num99 = 0; num99 < 20; num99++)
								{
									int num100 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
									Dust dust12 = Main.dust[num100];
									dust12.velocity.Y = dust12.velocity.Y - 1.5f;
									Dust dust13 = Main.dust[num100];
									dust13.velocity.X = dust13.velocity.X * 2.5f;
									Main.dust[num100].scale = 1.3f;
									Main.dust[num100].alpha = 100;
									Main.dust[num100].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
						}
					}
					this.wet = true;
					if (this.ShouldFloatInWater)
					{
						this.velocity.Y = this.velocity.Y / 2f;
						if (this.velocity.Y > 3f)
						{
							this.velocity.Y = 3f;
						}
					}
				}
			}
			else if (this.wet)
			{
				this.wet = false;
				if (this.jump > Player.jumpHeight / 5 && this.wetSlime == 0)
				{
					this.jump = Player.jumpHeight / 5;
				}
				if (this.wetCount == 0)
				{
					this.wetCount = 10;
					if (!this.shimmering)
					{
						if (!this.lavaWet)
						{
							if (this.shimmerWet)
							{
								for (int num101 = 0; num101 < 50; num101++)
								{
									int num102 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, 308, 0f, 0f, 0, default(Color), 1f);
									Dust dust14 = Main.dust[num102];
									dust14.velocity.Y = dust14.velocity.Y - 4f;
									Dust dust15 = Main.dust[num102];
									dust15.velocity.X = dust15.velocity.X * 2.5f;
									Main.dust[num102].scale = 0.75f;
									Main.dust[num102].noGravity = true;
									int num103 = Main.rand.Next(6);
									if (num103 == 0)
									{
										Main.dust[num102].color = new Color(255, 255, 210);
									}
									else if (num103 == 1)
									{
										Main.dust[num102].color = new Color(190, 245, 255);
									}
									else if (num103 == 2)
									{
										Main.dust[num102].color = new Color(255, 150, 255);
									}
									else
									{
										Main.dust[num102].color = new Color(190, 175, 255);
									}
								}
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 3, 1f, 0f);
							}
							else if (this.honeyWet)
							{
								for (int num104 = 0; num104 < 20; num104++)
								{
									int num105 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
									Dust dust16 = Main.dust[num105];
									dust16.velocity.Y = dust16.velocity.Y - 1f;
									Dust dust17 = Main.dust[num105];
									dust17.velocity.X = dust17.velocity.X * 2.5f;
									Main.dust[num105].scale = 1.3f;
									Main.dust[num105].alpha = 100;
									Main.dust[num105].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
							else
							{
								for (int num106 = 0; num106 < 50; num106++)
								{
									int num107 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
									Dust dust18 = Main.dust[num107];
									dust18.velocity.Y = dust18.velocity.Y - 4f;
									Dust dust19 = Main.dust[num107];
									dust19.velocity.X = dust19.velocity.X * 2.5f;
									Main.dust[num107].scale = 0.8f;
									Main.dust[num107].alpha = 100;
									Main.dust[num107].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
						}
						else
						{
							for (int num108 = 0; num108 < 20; num108++)
							{
								int num109 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
								Dust dust20 = Main.dust[num109];
								dust20.velocity.Y = dust20.velocity.Y - 1.5f;
								Dust dust21 = Main.dust[num109];
								dust21.velocity.X = dust21.velocity.X * 2.5f;
								Main.dust[num109].scale = 1.3f;
								Main.dust[num109].alpha = 100;
								Main.dust[num109].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
					}
				}
			}
			if (!flag27)
			{
				this.honeyWet = false;
			}
			if (!shimmer)
			{
				this.shimmerWet = false;
			}
			if (!this.wet)
			{
				this.lavaWet = false;
				this.honeyWet = false;
				this.shimmerWet = false;
			}
			if (this.wetCount > 0)
			{
				this.wetCount -= 1;
			}
			if (this.wetSlime > 0)
			{
				this.wetSlime -= 1;
			}
			if (this.wet && this.mount.Active)
			{
				int num91 = this.mount.Type;
				switch (num91)
				{
				case 3:
					break;
				case 4:
				case 6:
					goto IL_7C49;
				case 5:
				case 7:
					if (this.whoAmI == Main.myPlayer)
					{
						this.mount.Dismount(this);
						goto IL_7C49;
					}
					goto IL_7C49;
				default:
					if (num91 != 50)
					{
						goto IL_7C49;
					}
					break;
				}
				this.wetSlime = 30;
				if (this.velocity.Y > 2f)
				{
					this.velocity.Y = this.velocity.Y * 0.9f;
				}
				this.velocity.Y = this.velocity.Y - 0.5f;
				if (this.velocity.Y < -4f)
				{
					this.velocity.Y = -4f;
				}
			}
			IL_7C49:
			if (Main.expertMode && this.ZoneSnow && this.wet && !this.lavaWet && !this.honeyWet && !this.arcticDivingGear && this.environmentBuffImmunityTimer == 0)
			{
				this.AddBuff(46, 150, true, false);
			}
			float num110 = 1f + Math.Abs(this.velocity.X) / 3f;
			if (this.gfxOffY > 0f)
			{
				this.gfxOffY -= num110 * this.stepSpeed;
				if (this.gfxOffY < 0f)
				{
					this.gfxOffY = 0f;
				}
			}
			else if (this.gfxOffY < 0f)
			{
				this.gfxOffY += num110 * this.stepSpeed;
				if (this.gfxOffY > 0f)
				{
					this.gfxOffY = 0f;
				}
			}
			if (this.gfxOffY > 32f)
			{
				this.gfxOffY = 32f;
			}
			if (this.gfxOffY < -32f)
			{
				this.gfxOffY = -32f;
			}
			if (Main.myPlayer == i)
			{
				if (!this.iceSkate)
				{
					this.CheckIceBreak();
				}
				this.CheckCrackedBrickBreak();
			}
			if (!this.shimmering)
			{
				this.SlopeDownMovement();
				bool flag28 = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12 || this.mount.Type == 44 || this.mount.Type == 49;
				if (this.velocity.Y == this.gravity && (!this.mount.Active || (!this.mount.Cart && this.mount.Type != 48 && !flag28)))
				{
					Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.waterWalk || this.waterWalk2);
				}
				if (this.gravDir == -1f)
				{
					if ((this.carpetFrame != -1 || this.velocity.Y <= this.gravity) && !this.controlUp)
					{
						Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
					}
				}
				else if ((this.carpetFrame != -1 || this.velocity.Y >= this.gravity) && !this.controlDown && !this.mount.Cart && !flag28 && this.grappling[0] == -1)
				{
					Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
				}
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			bool falling = false;
			if (this.velocity.Y > this.gravity)
			{
				falling = true;
			}
			if (this.velocity.Y < -this.gravity)
			{
				falling = true;
			}
			Vector2 velocity = this.velocity;
			this.slideDir = 0;
			bool ignorePlats = false;
			bool fallThrough = this.controlDown;
			if (this.gravDir == -1f | (this.mount.Active && (this.mount.Cart || this.mount.Type == 12 || this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 23 || this.mount.Type == 44 || this.mount.Type == 48)) | this.GoingDownWithGrapple | this.pulley)
			{
				ignorePlats = true;
				fallThrough = true;
			}
			bool flag29 = this.onTrack;
			this.onTrack = false;
			bool flag30 = false;
			if (this.mount.Active && this.mount.Cart)
			{
				this.fartKartCloudDelay = Math.Max(0, this.fartKartCloudDelay - 1);
				float num111;
				if (!this.ignoreWater && !this.merman)
				{
					if (this.shimmerWet)
					{
						num111 = 0.25f;
					}
					else if (this.honeyWet)
					{
						num111 = 0.25f;
					}
					else if (this.wet)
					{
						num111 = 0.5f;
					}
					else
					{
						num111 = 1f;
					}
				}
				else
				{
					num111 = 1f;
				}
				this.velocity *= num111;
				DelegateMethods.Minecart.rotation = this.fullRotation;
				DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
				BitsByte bitsByte = Minecart.TrackCollision(this, ref this.position, ref this.velocity, ref this.lastBoost, this.width, this.height, this.controlDown, this.controlUp, this.fallStart2, false, this.mount.Delegations);
				if (bitsByte[0])
				{
					this.onTrack = true;
					this.gfxOffY = Minecart.TrackRotation(this, ref this.fullRotation, this.position + this.velocity, this.width, this.height, this.controlDown, this.controlUp, this.mount.Delegations);
					this.fullRotationOrigin = new Vector2((float)(this.width / 2), (float)this.height);
				}
				if (flag29 && !this.onTrack)
				{
					this.mount.Delegations.MinecartJumpingSound(this, this.position, this.width, this.height);
				}
				if (bitsByte[1])
				{
					if (this.controlLeft || this.controlRight)
					{
						if (this.cartFlip)
						{
							this.cartFlip = false;
						}
						else
						{
							this.cartFlip = true;
						}
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					else if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					this.mount.Delegations.MinecartBumperSound(this, this.position, this.width, this.height);
				}
				this.velocity /= num111;
				if (bitsByte[3] && this.whoAmI == Main.myPlayer)
				{
					flag30 = true;
				}
				if (bitsByte[2])
				{
					this.cartRampTime = (int)(Math.Abs(this.velocity.X) / this.mount.RunSpeed * 20f);
				}
				if (bitsByte[4])
				{
					this.trackBoost -= 4f;
				}
				if (bitsByte[5])
				{
					this.trackBoost += 4f;
				}
			}
			bool flag31 = this.whoAmI == Main.myPlayer && !this.mount.Active;
			Vector2 position = this.position;
			if (this.vortexDebuff)
			{
				this.velocity.Y = this.velocity.Y * 0.8f + (float)Math.Cos((double)(base.Center.X % 120f / 120f * 6.2831855f)) * 5f * 0.2f;
			}
			if (this.tongued)
			{
				this.position += this.velocity;
				flag31 = false;
			}
			else if (this.shimmerWet || this.shimmering)
			{
				this.ShimmerCollision(fallThrough, ignorePlats, this.shimmering);
			}
			else if (this.honeyWet && !this.ignoreWater)
			{
				this.HoneyCollision(fallThrough, ignorePlats);
			}
			else if (this.wet && !this.merman && !this.ignoreWater && !this.trident)
			{
				this.WaterCollision(fallThrough, ignorePlats);
			}
			else
			{
				this.DryCollision(fallThrough, ignorePlats);
				if (this.mount.Active && this.mount.IsConsideredASlimeMount && this.velocity.Y != 0f && !this.SlimeDontHyperJump)
				{
					Vector2 velocity2 = this.velocity;
					this.velocity.X = 0f;
					this.DryCollision(fallThrough, ignorePlats);
					this.velocity.X = velocity2.X;
				}
				if (this.mount.Active && this.mount.Type == 43 && this.velocity.Y != 0f)
				{
					Vector2 velocity3 = this.velocity;
					this.velocity.X = 0f;
					this.DryCollision(fallThrough, ignorePlats);
					this.velocity.X = velocity3.X;
				}
			}
			this.UpdateTouchingTiles();
			this.TryBouncingBlocks(falling);
			this.TryLandingOnDetonator();
			if (!this.shimmering && !this.tongued)
			{
				this.SlopingCollision(fallThrough, ignorePlats);
				if (!this.isLockedToATile)
				{
					Collision.StepConveyorBelt(this, this.gravDir);
				}
			}
			if (flag31 && this.velocity.Y == 0f)
			{
				AchievementsHelper.HandleRunning(Math.Abs(this.position.X - position.X));
			}
			if (flag30)
			{
				NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				Minecart.HitTrackSwitch(new Vector2(this.position.X, this.position.Y), this.width, this.height);
			}
			if (velocity.X != this.velocity.X)
			{
				if (velocity.X < 0f)
				{
					this.slideDir = -1;
				}
				else if (velocity.X > 0f)
				{
					this.slideDir = 1;
				}
			}
			if (this.gravDir == 1f && Collision.up)
			{
				this.velocity.Y = 0.01f;
				if (!this.merman)
				{
					this.jump = 0;
				}
			}
			else if (this.gravDir == -1f && Collision.down)
			{
				this.velocity.Y = -0.01f;
				if (!this.merman)
				{
					this.jump = 0;
				}
			}
			if (this.velocity.Y == 0f && this.grappling[0] == -1)
			{
				this.FloorVisuals(falling);
			}
			if (this.whoAmI == Main.myPlayer && !this.shimmering)
			{
				Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 1);
			}
			PressurePlateHelper.UpdatePlayerPosition(this);
			this.BordersMovement();
			this.numMinions = 0;
			this.slotsMinions = 0f;
			if (Main.netMode != 2 && this.mount.Type != 8)
			{
				this.ItemCheck_ManageRightClickFeatures();
			}
			this.ItemCheckWrapped(i);
			this.PlayerFrame();
			if (this.mount.Type == 8)
			{
				this.mount.UseDrill(this);
			}
			if (this.statLife > this.statLifeMax2)
			{
				this.statLife = this.statLifeMax2;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			this.grappling[0] = -1;
			this.grapCount = 0;
			this.UpdateReleaseUseTile();
			this.UpdateAdvancedShadows();
		}

		// Token: 0x060007DC RID: 2012 RVA: 0x002F63BC File Offset: 0x002F45BC
		private void TryToToggleSmartCursor(ref bool smartCursorWanted)
		{
			if (Main.cSmartCursorModeIsToggleAndNotHold)
			{
				if (this.controlSmart && this.releaseSmart)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
					smartCursorWanted = !smartCursorWanted;
					return;
				}
			}
			else
			{
				if (this.controlSmart && this.releaseSmart)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				if (Player.SmartCursorSettings.SmartCursorHoldCanReleaseMidUse)
				{
					smartCursorWanted = this.controlSmart;
					return;
				}
				if (smartCursorWanted)
				{
					if (!this.controlSmart && !this.controlUseItem)
					{
						smartCursorWanted = false;
						return;
					}
				}
				else
				{
					smartCursorWanted = this.controlSmart;
				}
			}
		}

		// Token: 0x060007DD RID: 2013 RVA: 0x002F6454 File Offset: 0x002F4654
		private void TryToShimmerUnstuck()
		{
			this.timeShimmering = Utils.Clamp<int>(this.timeShimmering + (this.shimmering ? 1 : -10), 0, 7200);
			bool flag = this.timeShimmering >= 3600;
			if ((this.LocalInputCache.controlLeft || this.LocalInputCache.controlRight || this.LocalInputCache.controlUp || this.LocalInputCache.controlDown) && this.timeShimmering >= 1200)
			{
				flag = true;
			}
			if (flag)
			{
				this.ShimmerUnstuck();
			}
		}

		// Token: 0x060007DE RID: 2014 RVA: 0x002F64E8 File Offset: 0x002F46E8
		private void ShimmerUnstuck()
		{
			this.timeShimmering = 0;
			Vector2? vector = this.TryFindingShimmerFreeSpot();
			if (vector != null)
			{
				this.velocity = new Vector2(0f, 0.0001f);
				this.Teleport(vector.Value + new Vector2(0f, -2f), 12, 0);
				this.shimmering = false;
				this.shimmerWet = false;
				this.wet = false;
				this.ClearBuff(353);
				ParticleOrchestrator.BroadcastOrRequestParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Bottom
				});
				return;
			}
			if (Collision.WetCollision(this.position, this.width, this.height) && Collision.shimmer)
			{
				this.shimmerUnstuckHelper.StartUnstuck();
			}
			this.ClearBuff(353);
			ParticleOrchestrator.BroadcastOrRequestParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Bottom
			});
		}

		// Token: 0x060007DF RID: 2015 RVA: 0x002F65D8 File Offset: 0x002F47D8
		private Vector2? TryFindingShimmerFreeSpot()
		{
			Point point = base.Top.ToTileCoordinates();
			int num = 60;
			Vector2? result = null;
			bool allowSolidTop = true;
			for (int i = 1; i < num; i += 2)
			{
				Vector2? vector = ShimmerHelper.FindSpotWithoutShimmer(this, point.X, point.Y, i, allowSolidTop);
				if (vector != null)
				{
					result = new Vector2?(vector.Value);
					break;
				}
			}
			this.FindSpawn();
			if (!Player.CheckSpawn(this.SpawnX, this.SpawnY))
			{
				this.SpawnX = -1;
				this.SpawnY = -1;
			}
			if (result == null && this.SpawnX != -1 && this.SpawnY != -1)
			{
				for (int j = 1; j < num; j += 2)
				{
					Vector2? vector2 = ShimmerHelper.FindSpotWithoutShimmer(this, this.SpawnX, this.SpawnY, j, allowSolidTop);
					if (vector2 != null)
					{
						result = new Vector2?(vector2.Value);
						break;
					}
				}
			}
			if (result == null)
			{
				for (int k = 1; k < num; k += 2)
				{
					Vector2? vector3 = ShimmerHelper.FindSpotWithoutShimmer(this, Main.spawnTileX, Main.spawnTileY, k, allowSolidTop);
					if (vector3 != null)
					{
						result = new Vector2?(vector3.Value);
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x060007E0 RID: 2016 RVA: 0x002F6708 File Offset: 0x002F4908
		private void AdjustRemainingPotionSickness()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			int num = this.FindBuffIndex(21);
			if (num == -1)
			{
				return;
			}
			float num2 = (float)this.buffTime[num];
			float philosopherStoneDurationMultiplier = Player.PhilosopherStoneDurationMultiplier;
			if (this.pStone)
			{
				num2 *= philosopherStoneDurationMultiplier;
			}
			else
			{
				num2 /= philosopherStoneDurationMultiplier;
			}
			this.buffTime[num] = (int)num2;
		}

		// Token: 0x060007E1 RID: 2017 RVA: 0x002F6760 File Offset: 0x002F4960
		private Collision.HurtTile GetHurtTile()
		{
			Collision.HurtTile hurtTile = Collision.HurtTiles(this.position, this.width, (!this.mount.Active || !this.mount.Cart) ? this.height : (this.height - 16), this);
			if (hurtTile.type >= 0)
			{
				return hurtTile;
			}
			foreach (Point point in this.TouchedTiles)
			{
				Tile tile = Main.tile[point.X, point.Y];
				if (tile != null && tile.active() && tile.nactive() && !TileID.Sets.Suffocate[(int)tile.type] && Collision.CanTileHurt(tile.type, point.X, point.Y, this))
				{
					Collision.HurtTile result = default(Collision.HurtTile);
					result.type = (int)tile.type;
					result.x = point.X;
					result.y = point.Y;
					return result;
				}
			}
			return hurtTile;
		}

		// Token: 0x060007E2 RID: 2018 RVA: 0x002F6888 File Offset: 0x002F4A88
		private void ApplyTouchDamage(int tileId, int x, int y)
		{
			if (TileID.Sets.TouchDamageHot[tileId])
			{
				this.AddBuff(67, 20, true, false);
			}
			if (TileID.Sets.Suffocate[tileId])
			{
				if (this.suffocateDelay < 5)
				{
					this.suffocateDelay += 1;
				}
				else
				{
					this.AddBuff(68, 1, true, false);
				}
			}
			else
			{
				this.suffocateDelay = 0;
			}
			if (TileID.Sets.TouchDamageBleeding[tileId])
			{
				this.AddBuff(30, Main.rand.Next(240, 600), true, false);
			}
			int num = TileID.Sets.TouchDamageImmediate[tileId];
			if (num > 0)
			{
				num = Main.DamageVar((float)num, -this.luck);
				this.Hurt(PlayerDeathReason.ByOther(3), num, 0, false, false, false, 0, true);
			}
			if (TileID.Sets.TouchDamageDestroyTile[tileId])
			{
				WorldGen.KillTile(x, y, false, false, false);
				if (Main.netMode == 1 && !Main.tile[x, y].active())
				{
					NetMessage.SendData(17, -1, -1, null, 4, (float)x, (float)y, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x060007E3 RID: 2019 RVA: 0x002F697C File Offset: 0x002F4B7C
		private void CapAttackSpeeds()
		{
			float num = this.meleeSpeed;
			this.meleeSpeed = this.TurnAttackSpeedToUseTimeMultiplier(num);
			this.summonerWeaponSpeedBonus = this.TurnAttackSpeedToUseTimeMultiplier(num + this.summonerWeaponSpeedBonus);
		}

		// Token: 0x060007E4 RID: 2020 RVA: 0x002F69B1 File Offset: 0x002F4BB1
		private float TurnAttackSpeedToUseTimeMultiplier(float speed)
		{
			if (speed > 3f)
			{
				speed = 3f;
			}
			if (speed != 0f)
			{
				speed = 1f / speed;
			}
			return speed;
		}

		// Token: 0x060007E5 RID: 2021 RVA: 0x002F69D4 File Offset: 0x002F4BD4
		public void UpdateLuck()
		{
			this.UpdateLuckFactors();
			this.RecalculateLuck();
			if (this.luckNeedsSync && this.whoAmI == Main.myPlayer)
			{
				this.luckNeedsSync = false;
				NetMessage.SendData(134, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060007E6 RID: 2022 RVA: 0x002F6A30 File Offset: 0x002F4C30
		private void ResetControls()
		{
			this.controlUp = false;
			this.controlLeft = false;
			this.controlDown = false;
			this.controlRight = false;
			this.controlJump = false;
			this.controlUseItem = false;
			this.controlUseTile = false;
			this.controlThrow = false;
			this.controlInv = false;
			this.controlHook = false;
			this.controlTorch = false;
			this.controlSmart = false;
			this.controlMount = false;
			this.controlQuickHeal = false;
			this.controlQuickMana = false;
			this.controlCreativeMenu = false;
			this.mapStyle = false;
			this.mapAlphaDown = false;
			this.mapAlphaUp = false;
			this.mapFullScreen = false;
			this.mapZoomIn = false;
			this.mapZoomOut = false;
		}

		// Token: 0x060007E7 RID: 2023 RVA: 0x002F6AD8 File Offset: 0x002F4CD8
		private void UpdateControlHolds()
		{
			if (this.whoAmI == Main.myPlayer)
			{
				if (this.controlUp && this.releaseUp)
				{
					Player.FlexibleWandCycleOffset--;
				}
				if (this.controlDown && this.releaseDown)
				{
					Player.FlexibleWandCycleOffset++;
				}
			}
			if (this.controlUp)
			{
				this.releaseUp = false;
				return;
			}
			this.releaseUp = true;
		}

		// Token: 0x060007E8 RID: 2024 RVA: 0x002F6B44 File Offset: 0x002F4D44
		public void TryOpeningFullscreenMap()
		{
			if (Main.mapEnabled)
			{
				Main.playerInventory = false;
				this.sign = -1;
				Main.editSign = false;
				this.SetTalkNPC(-1, false);
				Main.npcChatCornerItem = 0;
				SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
				Main.mapFullscreenScale = 2.5f;
				Main.mapFullscreen = true;
				Main.resetMapFull = true;
				Main.buffString = string.Empty;
				this.releaseInventory = false;
			}
		}

		// Token: 0x060007E9 RID: 2025 RVA: 0x002F6BB8 File Offset: 0x002F4DB8
		public void UpdateLuckFactors()
		{
			this.UpdateLadyBugLuckTime();
			this.UpdateCoinLuck();
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			float num = this.torchLuck;
			this.TryRecalculatingTorchLuck();
			if (this.torchLuck != num)
			{
				this.luckNeedsSync = true;
			}
		}

		// Token: 0x060007EA RID: 2026 RVA: 0x002F6BFC File Offset: 0x002F4DFC
		public void RecalculateLuck()
		{
			this.luck = this.GetLadyBugLuck() * 0.2f + this.torchLuck * 0.2f;
			this.luck += (float)this.luckPotion * 0.1f;
			if (this.usedGalaxyPearl)
			{
				this.luck += 0.03f;
			}
			if (LanternNight.LanternsUp)
			{
				this.luck += 0.3f;
			}
			if (this.HasGardenGnomeNearby)
			{
				this.luck += 0.2f;
			}
			this.luck += this.equipmentBasedLuckBonus;
			this.luck += this.CalculateCoinLuck();
		}

		// Token: 0x060007EB RID: 2027 RVA: 0x002F6CB5 File Offset: 0x002F4EB5
		public static int GetMouseScrollDelta()
		{
			return PlayerInput.ScrollWheelDelta / 120;
		}

		// Token: 0x060007EC RID: 2028 RVA: 0x002F6CC0 File Offset: 0x002F4EC0
		private void UpdatePortableStoolUsage()
		{
			bool flag = this.portableStoolInfo.HasAStool && this.controlUp && !this.gravControl && !this.mount.Active && this.velocity.X == 0f && this.velocity.Y == 0f && !this.pulley && this.grappling[0] == -1;
			if (flag)
			{
				flag = this.CanFitSpace(this.portableStoolInfo.HeightBoost);
			}
			if (flag)
			{
				this.portableStoolInfo.IsInUse = true;
				this.ResizeHitbox();
			}
		}

		// Token: 0x060007ED RID: 2029 RVA: 0x002F6D5C File Offset: 0x002F4F5C
		private void ResizeHitbox()
		{
			this.position.Y = this.position.Y + (float)this.height;
			this.height = 42 + this.HeightOffsetBoost;
			this.position.Y = this.position.Y - (float)this.height;
		}

		// Token: 0x060007EE RID: 2030 RVA: 0x002F6D9C File Offset: 0x002F4F9C
		private void UpdateReleaseUseTile()
		{
			bool flag = !this.tileInteractAttempted;
			if (this._lockTileInteractionsTimer > 0 && !this.releaseUseTile)
			{
				flag = false;
			}
			this.releaseUseTile = flag;
			if (this._lockTileInteractionsTimer > 0)
			{
				this._lockTileInteractionsTimer--;
			}
		}

		// Token: 0x060007EF RID: 2031 RVA: 0x002F6DE4 File Offset: 0x002F4FE4
		private void GetMinecartDamage(float currentSpeed, out int damage, out float knockback)
		{
			switch (this.mount.Type)
			{
			case 11:
			case 15:
			case 16:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 24:
			case 25:
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 38:
			case 39:
			case 51:
			case 53:
				damage = Main.DamageVar(25f + 55f * currentSpeed, this.luck);
				break;
			default:
				damage = Main.DamageVar(25f + 55f * currentSpeed, this.luck);
				break;
			case 13:
				damage = Main.DamageVar(15f + 30f * currentSpeed, this.luck);
				break;
			}
			if (this.UsingSuperCart)
			{
				damage = Main.DamageVar(50f + 100f * currentSpeed, this.luck);
			}
			knockback = 10f + 40f * currentSpeed;
			if (Main.hardMode)
			{
				damage = (int)((double)damage * 1.5);
			}
			if (Main.expertMode)
			{
				damage = (int)((double)damage * 1.5);
			}
		}

		// Token: 0x060007F0 RID: 2032 RVA: 0x002F6F63 File Offset: 0x002F5163
		public void UpdateMiscCounter()
		{
			this.miscCounter++;
			if (this.miscCounter >= 300)
			{
				this.miscCounter = 0;
			}
		}

		// Token: 0x060007F1 RID: 2033 RVA: 0x002F6F88 File Offset: 0x002F5188
		private void WingAirLogicTweaks()
		{
			if (this.wingsLogic < 1)
			{
				return;
			}
			WingStats wingStats = this.GetWingStats(this.wingsLogic);
			bool flag = this.TryingToHoverDown && this.controlJump && this.wingTime > 0f;
			if (wingStats.HasDownHoverStats && flag)
			{
				if (wingStats.DownHoverSpeedOverride != -1f)
				{
					this.accRunSpeed = wingStats.DownHoverSpeedOverride;
				}
				this.runAcceleration *= wingStats.DownHoverAccelerationMult;
			}
			else
			{
				if (wingStats.AccRunSpeedOverride != -1f && wingStats.AccRunSpeedOverride > this.accRunSpeed)
				{
					this.accRunSpeed = wingStats.AccRunSpeedOverride;
				}
				this.runAcceleration *= wingStats.AccRunAccelerationMult;
			}
			if (this.wingsLogic == 45 && (float)this.timeSinceLastDashStarted >= 60f)
			{
				this.runSlowdown *= 6f;
			}
		}

		// Token: 0x060007F2 RID: 2034 RVA: 0x002F706C File Offset: 0x002F526C
		private void RocketBootVisuals()
		{
			int num = this.height;
			if (this.gravDir == -1f)
			{
				num = 4;
			}
			int i = 0;
			while (i < 2)
			{
				int num2 = (i == 0) ? 2 : -2;
				Rectangle rectangle;
				if (i == 0)
				{
					rectangle = new Rectangle((int)this.position.X - 4, (int)this.position.Y + num - 10, 8, 8);
				}
				else
				{
					rectangle = new Rectangle((int)this.position.X + this.width - 4, (int)this.position.Y + num - 10, 8, 8);
				}
				if (this.direction == -1)
				{
					rectangle.X -= 4;
				}
				int type = 6;
				float scale = 2.5f;
				int alpha = 100;
				float scaleFactor = 1f;
				Vector2 vector = new Vector2((float)(-(float)num2) - this.velocity.X * 0.3f, 2f * this.gravDir - this.velocity.Y * 0.3f);
				Dust dust;
				switch (this.vanityRocketBoots)
				{
				case 1:
					if (this.socialShadowRocketBoots)
					{
						type = 27;
						scale = 1.5f;
						goto IL_2E8;
					}
					goto IL_2E8;
				case 2:
					if (this.fairyBoots)
					{
						type = (int)Main.rand.NextFromList(new short[]
						{
							61,
							61,
							61,
							242,
							64,
							63
						});
						scale = 2f;
						alpha = 120;
						goto IL_2E8;
					}
					type = 16;
					scale = 1.5f;
					alpha = 20;
					goto IL_2E8;
				case 3:
					type = 76;
					scale = 1f;
					alpha = 20;
					goto IL_2E8;
				case 4:
				{
					int num3 = Main.rand.Next(6);
					rectangle.Y += 2 * (int)this.gravDir;
					if (num3 != 0 && num3 != 1)
					{
						type = 107;
						alpha = 100;
						scale = 0.7f;
						scaleFactor = 0.5f;
						goto IL_2E8;
					}
					dust = Dust.NewDustDirect(rectangle.TopLeft(), rectangle.Width, rectangle.Height, 278, 0f, 0f, 100, Color.Lerp(Color.LimeGreen, Color.White, Main.rand.NextFloat() * 0.3f), 1f);
					dust.shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					dust.scale = 0.66f;
					dust.noGravity = true;
					dust.velocity *= 0.25f;
					dust.velocity -= this.velocity * 0.5f;
					dust.velocity += vector * 0.5f;
					dust.position += dust.velocity * 4f;
					if (Main.rand.Next(5) == 0)
					{
						dust.fadeIn = 0.8f;
					}
					break;
				}
				case 5:
					type = 6;
					scale = 2.5f;
					goto IL_2E8;
				default:
					goto IL_2E8;
				}
				IL_411:
				i++;
				continue;
				IL_2E8:
				dust = Dust.NewDustDirect(rectangle.TopLeft(), rectangle.Width, rectangle.Height, type, 0f, 0f, alpha, default(Color), scale);
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				dust.velocity += vector;
				dust.velocity *= scaleFactor;
				switch (this.vanityRocketBoots)
				{
				case 1:
					dust.noGravity = true;
					break;
				case 2:
					dust.velocity *= 0.1f;
					break;
				case 3:
				{
					dust.velocity *= 0.05f;
					Dust dust2 = dust;
					dust2.velocity.Y = dust2.velocity.Y + 0.15f;
					dust.noLight = true;
					if (Main.rand.Next(2) == 0)
					{
						dust.noGravity = true;
						dust.scale = 1.75f;
					}
					break;
				}
				case 5:
					dust.noGravity = true;
					break;
				}
				if (this.fairyBoots)
				{
					dust.noGravity = true;
					dust.noLightEmittence = true;
					goto IL_411;
				}
				goto IL_411;
			}
		}

		// Token: 0x060007F3 RID: 2035 RVA: 0x002F7498 File Offset: 0x002F5698
		public void WingFrame(bool wingFlap)
		{
			bool flag = this.wingsLogic != this.wings;
			if (this.wings == 4)
			{
				if (wingFlap || this.jump > 0)
				{
					this.rocketDelay2--;
					if (this.rocketDelay2 <= 0)
					{
						SoundEngine.PlaySound(SoundID.Item13, this.position);
						this.rocketDelay2 = 60;
					}
					int num = 2;
					if (this.TryingToHoverUp)
					{
						num = 4;
					}
					for (int i = 0; i < num; i++)
					{
						int type = 6;
						if (this.head == 41)
						{
							int num2 = this.body;
						}
						float scale = 1.75f;
						int alpha = 100;
						float x = this.position.X + (float)(this.width / 2) + 16f;
						if (this.direction > 0)
						{
							x = this.position.X + (float)(this.width / 2) - 26f;
						}
						float num3 = this.position.Y + (float)this.height - 18f;
						if (i == 1 || i == 3)
						{
							x = this.position.X + (float)(this.width / 2) + 8f;
							if (this.direction > 0)
							{
								x = this.position.X + (float)(this.width / 2) - 20f;
							}
							num3 += 6f;
						}
						if (i > 1)
						{
							num3 += this.velocity.Y;
						}
						int num4 = Dust.NewDust(new Vector2(x, num3), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
						Dust dust = Main.dust[num4];
						dust.velocity.X = dust.velocity.X * 0.1f;
						Main.dust[num4].velocity.Y = Main.dust[num4].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
						Main.dust[num4].noGravity = true;
						Main.dust[num4].noLightEmittence = flag;
						Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						if (num == 4)
						{
							Dust dust2 = Main.dust[num4];
							dust2.velocity.Y = dust2.velocity.Y + 6f;
						}
					}
					this.wingFrameCounter++;
					if (this.wingFrameCounter > 4)
					{
						this.wingFrame++;
						this.wingFrameCounter = 0;
						if (this.wingFrame >= 3)
						{
							this.wingFrame = 0;
							return;
						}
					}
				}
				else if (!this.controlJump || this.velocity.Y == 0f)
				{
					this.wingFrame = 3;
					return;
				}
			}
			else if (this.wings == 28 && this.ShouldDrawWingsThatAreAlwaysAnimated())
			{
				if (!flag && this.velocity.Y != 0f)
				{
					Lighting.AddLight(base.Bottom, 0.3f, 0.1f, 0.4f);
					return;
				}
			}
			else if (this.wings == 22)
			{
				if (!this.controlJump)
				{
					this.wingFrame = 0;
					this.wingFrameCounter = 0;
					return;
				}
				if (this.wingTime > 0f)
				{
					if (this.TryingToHoverDown)
					{
						if (this.velocity.X != 0f)
						{
							this.wingFrameCounter++;
							int num5 = 2;
							if (this.wingFrameCounter < num5)
							{
								this.wingFrame = 1;
								return;
							}
							if (this.wingFrameCounter < num5 * 2)
							{
								this.wingFrame = 2;
								return;
							}
							if (this.wingFrameCounter < num5 * 3)
							{
								this.wingFrame = 3;
								return;
							}
							if (this.wingFrameCounter < num5 * 4 - 1)
							{
								this.wingFrame = 2;
								return;
							}
							this.wingFrame = 2;
							this.wingFrameCounter = 0;
							return;
						}
						else
						{
							this.wingFrameCounter++;
							int num6 = 6;
							if (this.wingFrameCounter < num6)
							{
								this.wingFrame = 4;
								return;
							}
							if (this.wingFrameCounter < num6 * 2)
							{
								this.wingFrame = 5;
								return;
							}
							if (this.wingFrameCounter < num6 * 3 - 1)
							{
								this.wingFrame = 4;
								return;
							}
							this.wingFrame = 4;
							this.wingFrameCounter = 0;
							return;
						}
					}
					else
					{
						this.wingFrameCounter++;
						int num7 = 2;
						if (this.wingFrameCounter < num7)
						{
							this.wingFrame = 4;
							return;
						}
						if (this.wingFrameCounter < num7 * 2)
						{
							this.wingFrame = 5;
							return;
						}
						if (this.wingFrameCounter < num7 * 3)
						{
							this.wingFrame = 6;
							return;
						}
						if (this.wingFrameCounter < num7 * 4 - 1)
						{
							this.wingFrame = 5;
							return;
						}
						this.wingFrame = 5;
						this.wingFrameCounter = 0;
						return;
					}
				}
				else
				{
					this.wingFrameCounter++;
					int num8 = 6;
					if (this.wingFrameCounter < num8)
					{
						this.wingFrame = 4;
						return;
					}
					if (this.wingFrameCounter < num8 * 2)
					{
						this.wingFrame = 5;
						return;
					}
					if (this.wingFrameCounter < num8 * 3 - 1)
					{
						this.wingFrame = 4;
						return;
					}
					this.wingFrame = 4;
					this.wingFrameCounter = 0;
					return;
				}
			}
			else if (this.wings == 12)
			{
				if (wingFlap || this.jump > 0)
				{
					this.wingFrameCounter++;
					int num9 = 5;
					if (this.wingFrameCounter < num9)
					{
						this.wingFrame = 1;
						return;
					}
					if (this.wingFrameCounter < num9 * 2)
					{
						this.wingFrame = 2;
						return;
					}
					if (this.wingFrameCounter < num9 * 3)
					{
						this.wingFrame = 3;
						return;
					}
					if (this.wingFrameCounter < num9 * 4 - 1)
					{
						this.wingFrame = 2;
						return;
					}
					this.wingFrame = 2;
					this.wingFrameCounter = 0;
					return;
				}
				else
				{
					if (this.velocity.Y != 0f)
					{
						this.wingFrame = 2;
						return;
					}
					this.wingFrame = 0;
					return;
				}
			}
			else if (this.wings == 24)
			{
				if (wingFlap || this.jump > 0)
				{
					this.wingFrameCounter++;
					int num10 = 1;
					if (this.wingFrameCounter < num10)
					{
						this.wingFrame = 1;
						return;
					}
					if (this.wingFrameCounter < num10 * 2)
					{
						this.wingFrame = 2;
						return;
					}
					if (this.wingFrameCounter < num10 * 3)
					{
						this.wingFrame = 3;
						return;
					}
					this.wingFrame = 2;
					if (this.wingFrameCounter >= num10 * 4 - 1)
					{
						this.wingFrameCounter = 0;
						return;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.wingFrame = 0;
						return;
					}
					if (this.controlJump)
					{
						this.wingFrameCounter++;
						int num11 = 3;
						if (this.wingFrameCounter < num11)
						{
							this.wingFrame = 1;
							return;
						}
						if (this.wingFrameCounter < num11 * 2)
						{
							this.wingFrame = 2;
							return;
						}
						if (this.wingFrameCounter < num11 * 3)
						{
							this.wingFrame = 3;
							return;
						}
						this.wingFrame = 2;
						if (this.wingFrameCounter >= num11 * 4 - 1)
						{
							this.wingFrameCounter = 0;
							return;
						}
					}
					else
					{
						if (this.wingTime == 0f)
						{
							this.wingFrame = 0;
							return;
						}
						this.wingFrame = 1;
						return;
					}
				}
			}
			else if (this.wings == 30)
			{
				bool flag2 = false;
				if (wingFlap || this.jump > 0)
				{
					this.wingFrameCounter++;
					int num12 = 2;
					if (this.wingFrameCounter >= num12 * 3)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = 1 + this.wingFrameCounter / num12;
					flag2 = true;
				}
				else if (this.velocity.Y != 0f)
				{
					if (this.controlJump)
					{
						this.wingFrameCounter++;
						int num13 = 2;
						if (this.wingFrameCounter >= num13 * 3)
						{
							this.wingFrameCounter = 0;
						}
						this.wingFrame = 1 + this.wingFrameCounter / num13;
						flag2 = true;
					}
					else if (this.wingTime == 0f)
					{
						this.wingFrame = 0;
					}
					else
					{
						this.wingFrame = 0;
					}
				}
				else
				{
					this.wingFrame = 0;
				}
				if (flag2)
				{
					for (int j = 0; j < 4; j++)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 value = (-0.74539816f + 0.3926991f * (float)j + 0.03f * (float)j).ToRotationVector2() * new Vector2((float)(-(float)this.direction * 20), 20f);
							Dust dust3 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.8f)];
							dust3.noGravity = true;
							dust3.noLightEmittence = flag;
							dust3.position = base.Center + value;
							dust3.velocity = base.DirectionTo(dust3.position) * 2f;
							if (Main.rand.Next(10) != 0)
							{
								dust3.customData = this;
							}
							else
							{
								dust3.fadeIn = 0.5f;
							}
							dust3.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
					}
					for (int k = 0; k < 4; k++)
					{
						if (Main.rand.Next(8) == 0)
						{
							Vector2 value2 = (-0.7053982f + 0.3926991f * (float)k + 0.03f * (float)k).ToRotationVector2() * new Vector2((float)(this.direction * 20), 24f) + new Vector2((float)(-(float)this.direction) * 16f, 0f);
							Dust dust4 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.5f)];
							dust4.noGravity = true;
							dust4.noLightEmittence = flag;
							dust4.position = base.Center + value2;
							dust4.velocity = Vector2.Normalize(dust4.position - base.Center - new Vector2((float)(-(float)this.direction) * 16f, 0f)) * 2f;
							dust4.position += dust4.velocity * 5f;
							if (Main.rand.Next(10) != 0)
							{
								dust4.customData = this;
							}
							else
							{
								dust4.fadeIn = 0.5f;
							}
							dust4.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
					}
					return;
				}
			}
			else if (this.wings == 34 && this.ShouldDrawWingsThatAreAlwaysAnimated())
			{
				if (wingFlap || this.jump > 0)
				{
					this.wingFrameCounter++;
					int num14 = 4;
					if (this.wingFrameCounter >= num14 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = this.wingFrameCounter / num14;
					return;
				}
				if (this.velocity.Y == 0f)
				{
					this.wingFrameCounter++;
					int num15 = 4;
					if (this.wingFrameCounter >= num15 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = this.wingFrameCounter / num15;
					return;
				}
				if (this.controlJump)
				{
					this.wingFrameCounter++;
					int num16 = 9;
					if (this.wingFrameCounter >= num16 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = this.wingFrameCounter / num16;
					return;
				}
				this.wingFrameCounter++;
				int num17 = 6;
				if (this.wingFrameCounter >= num17 * 6)
				{
					this.wingFrameCounter = 0;
				}
				this.wingFrame = this.wingFrameCounter / num17;
				return;
			}
			else if (this.wings == 45 && this.ShouldDrawWingsThatAreAlwaysAnimated())
			{
				if (this.wingTime > 0f)
				{
					this.rocketDelay2--;
					if (this.rocketDelay2 <= 0)
					{
						SoundEngine.PlaySound(SoundID.Item24, this.position);
						this.rocketDelay2 = 30;
					}
				}
				if (this.velocity.Y == 0f)
				{
					this.wingFrameCounter = 0;
					this.wingFrame = 0;
				}
				else
				{
					this.wingFrameCounter++;
					int num18 = 3;
					if (this.wingTime == 0f)
					{
						num18 = 5;
					}
					if (this.wingFrameCounter >= num18 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = this.wingFrameCounter / num18;
				}
				if (Main.netMode != 2 && Main.rand.Next(8) == 0)
				{
					Rectangle rectangle = Utils.CenteredRectangle(Main.ReverseGravitySupport(base.Bottom - Main.screenPosition, 0f) + Main.screenPosition, new Vector2(40f, 24f));
					Dust dust5 = Dust.NewDustDirect(rectangle.TopLeft(), rectangle.Width, rectangle.Height, 43, 0f, 0f, 0, Color.White * 0.5f, 0.2f);
					dust5.fadeIn = 0.4f;
					dust5.velocity += this.velocity;
					dust5.velocity *= 0.35f;
					dust5.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					return;
				}
			}
			else if (this.wings == 44 && this.ShouldDrawWingsThatAreAlwaysAnimated())
			{
				int num19 = 5;
				if (wingFlap || this.jump > 0)
				{
					this.wingFrameCounter++;
					if (this.wingFrameCounter >= num19 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = 1 + this.wingFrameCounter / num19;
					return;
				}
				if (this.velocity.Y == 0f)
				{
					this.wingFrameCounter++;
					if (this.wingFrameCounter >= num19 * 6)
					{
						this.wingFrameCounter = 0;
					}
					this.wingFrame = 1 + this.wingFrameCounter / num19;
					return;
				}
				if (this.controlJump)
				{
					this.wingFrame = 2;
					return;
				}
				if (this.ShouldFloatInWater && this.wet)
				{
					this.wingFrame = 0;
					return;
				}
				this.wingFrame = 3;
				return;
			}
			else
			{
				if (this.wings == 39 && this.ShouldDrawWingsThatAreAlwaysAnimated())
				{
					if (wingFlap || this.jump > 0)
					{
						this.wingFrameCounter++;
						int num20 = 4;
						if (this.wingFrameCounter >= num20 * 6)
						{
							this.wingFrameCounter = 0;
						}
						this.wingFrame = this.wingFrameCounter / num20;
					}
					else if (this.velocity.Y != 0f)
					{
						if (this.controlJump)
						{
							this.wingFrameCounter++;
							int num21 = 9;
							if (this.wingFrameCounter >= num21 * 6)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = this.wingFrameCounter / num21;
						}
						else
						{
							this.wingFrameCounter++;
							int num22 = 6;
							if (this.wingFrameCounter >= num22 * 6)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = this.wingFrameCounter / num22;
						}
					}
					else
					{
						this.wingFrameCounter++;
						int num23 = 4;
						if (this.wingFrameCounter >= num23 * 6)
						{
							this.wingFrameCounter = 0;
						}
						this.wingFrame = this.wingFrameCounter / num23;
					}
					int num24 = 1;
					if (this.wingFrame == 3)
					{
						num24 = 5;
					}
					if (this.velocity.Y == 0f)
					{
						num24 = 0;
					}
					Rectangle rectangle2 = Utils.CenteredRectangle((this.gravDir == 1f) ? (base.Bottom + new Vector2(0f, -10f)) : (base.Top + new Vector2(0f, 10f)), new Vector2(50f, 20f));
					for (int l = 0; l < num24; l++)
					{
						Dust dust6 = Dust.NewDustDirect(rectangle2.TopLeft(), rectangle2.Width, rectangle2.Height, 31, 0f, 0f, 0, Color.Black, 1f);
						dust6.scale = 0.7f;
						dust6.velocity *= 0.4f;
						dust6.velocity.Y = dust6.velocity.Y + this.gravDir * 0.5f;
						dust6.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					}
					return;
				}
				if (this.wings == 33)
				{
					bool flag3 = false;
					if (wingFlap || this.jump > 0)
					{
						flag3 = true;
					}
					else if (this.velocity.Y != 0f && this.controlJump)
					{
						flag3 = true;
					}
					if (flag3)
					{
						Color newColor = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f, byte.MaxValue);
						int num25 = (this.direction == 1) ? 0 : -4;
						int num26 = (this.gravDir == 1f) ? this.height : 0;
						for (int m = 0; m < 2; m++)
						{
							Dust dust7 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 182, this.velocity.X, this.velocity.Y, 127, newColor, 1f)];
							dust7.noGravity = true;
							dust7.fadeIn = 1f;
							dust7.scale = 1f;
							dust7.noLight = true;
							dust7.noLightEmittence = flag;
							dust7.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							if (m == 0)
							{
								dust7.position = new Vector2(this.position.X + (float)num25, this.position.Y + (float)num26);
								dust7.velocity.X = dust7.velocity.X * 1f - 2f - this.velocity.X * 0.3f;
								dust7.velocity.Y = dust7.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
							}
							else if (m == 1)
							{
								dust7.position = new Vector2(this.position.X + (float)this.width + (float)num25, this.position.Y + (float)num26);
								dust7.velocity.X = dust7.velocity.X * 1f + 2f - this.velocity.X * 0.3f;
								dust7.velocity.Y = dust7.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
							}
							if (dust7.dustIndex != 6000)
							{
								Dust dust8 = Dust.CloneDust(dust7);
								dust8.scale *= 0.65f;
								dust8.fadeIn *= 0.65f;
								dust8.color = new Color(255, 255, 255, 255);
								dust7.noLight = true;
								dust7.noLightEmittence = flag;
								dust7.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
						}
						return;
					}
				}
				else if (this.wings == 38)
				{
					bool flag4 = false;
					if (wingFlap || this.jump > 0)
					{
						this.wingFrameCounter++;
						if (this.wingFrameCounter >= 32)
						{
							this.wingFrameCounter = 0;
						}
						this.wingFrame = 1 + this.wingFrameCounter / 8;
						if (this.wingFrame == 4)
						{
							this.wingFrame = 2;
						}
						flag4 = true;
					}
					else if (this.velocity.Y != 0f)
					{
						if (this.controlJump)
						{
							this.wingFrameCounter++;
							if (this.wingFrameCounter >= 32)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = 1 + this.wingFrameCounter / 8;
							if (this.wingFrame == 4)
							{
								this.wingFrame = 2;
							}
							flag4 = true;
						}
						else
						{
							this.wingFrame = 0;
						}
					}
					else
					{
						this.wingFrame = 0;
					}
					if (flag4)
					{
						Vector2 value3 = new Vector2((float)this.direction, this.gravDir);
						Vector2 value4 = this.velocity * 0.5f;
						int type2 = 267;
						int num27 = this.miscCounter * this.direction;
						for (int n = 0; n < 3; n++)
						{
							Vector2 value5 = Vector2.Zero;
							if (n != 1)
							{
								if (n == 2)
								{
									value5 = this.velocity * -0.66f;
								}
							}
							else
							{
								value5 = this.velocity * -0.33f;
							}
							Vector2 value6 = new Vector2(-39f, 6f) * value3 + new Vector2(2f, 0f).RotatedBy((double)((float)num27 / -15f * 6.2831855f), default(Vector2));
							Dust dust9 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, new Vector2?(value4), 0, this.underShirtColor, 1f);
							dust9.noGravity = true;
							dust9.noLight = true;
							dust9.noLightEmittence = flag;
							dust9.scale = 0.47f;
							dust9.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							value6 = new Vector2(-23f, 2f) * value3 + new Vector2(2f, 0f).RotatedBy((double)((float)num27 / -15f * 6.2831855f), default(Vector2));
							Dust dust10 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, new Vector2?(value4), 0, this.underShirtColor, 1f);
							dust10.noGravity = true;
							dust10.noLight = true;
							dust10.noLightEmittence = flag;
							dust10.scale = 0.35f;
							dust10.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							value6 = new Vector2(-31f, -6f) * value3 + new Vector2(2f, 0f).RotatedBy((double)((float)num27 / -20f * 6.2831855f), default(Vector2));
							Dust dust11 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, new Vector2?(value4), 0, this.underShirtColor, 1f);
							dust11.noGravity = true;
							dust11.noLight = true;
							dust11.noLightEmittence = flag;
							dust11.scale = 0.49f;
							dust11.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						return;
					}
				}
				else
				{
					int num28 = 4;
					int num29 = 4;
					int num30 = 0;
					if (this.wings == 43)
					{
						num29 = 7;
						num30 = 1;
						num28 = 3;
					}
					if (this.wings == 32)
					{
						num28 = 3;
					}
					if (wingFlap || this.jump > 0)
					{
						this.wingFrameCounter++;
						if (this.wingFrameCounter > num28)
						{
							this.wingFrame++;
							this.wingFrameCounter = 0;
							if (this.wingFrame >= num29)
							{
								this.wingFrame = num30;
								return;
							}
						}
					}
					else if (this.velocity.Y != 0f)
					{
						this.wingFrame = 1;
						if (this.wings == 32)
						{
							this.wingFrame = 3;
						}
						if (this.wings == 43)
						{
							this.wingFrame = 2;
							if (this.ShouldFloatInWater && this.wet)
							{
								this.wingFrame = 0;
							}
						}
						if (this.wings == 29 && Main.rand.Next(5) == 0)
						{
							int num31 = 4;
							if (this.direction == 1)
							{
								num31 = -40;
							}
							int num32 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num31, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
							Main.dust[num32].noGravity = true;
							Main.dust[num32].noLightEmittence = flag;
							Main.dust[num32].velocity *= 0.3f;
							if (Main.rand.Next(10) == 0)
							{
								Main.dust[num32].fadeIn = 2f;
							}
							Main.dust[num32].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							return;
						}
					}
					else
					{
						this.wingFrame = 0;
					}
				}
			}
		}

		// Token: 0x060007F4 RID: 2036 RVA: 0x002F8CB6 File Offset: 0x002F6EB6
		public bool ShouldDrawWingsThatAreAlwaysAnimated()
		{
			return (this.velocity.Y != 0f || this.grappling[0] != -1) && (!this.wet || !this.ShouldFloatInWater) && !this.mount.Active;
		}

		// Token: 0x060007F5 RID: 2037 RVA: 0x002F8CF8 File Offset: 0x002F6EF8
		private void WingAirVisuals()
		{
			bool noLightEmittence = this.wingsLogic != this.wings;
			if (this.wings == 10 && Main.rand.Next(2) == 0)
			{
				int num = 4;
				if (this.direction == 1)
				{
					num = -40;
				}
				int num2 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
				Main.dust[num2].fadeIn = 1.1f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].noLight = true;
				Main.dust[num2].velocity *= 0.3f;
				Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			if (this.wings == 34 && Main.rand.Next(2) == 0)
			{
				int num3 = 4;
				if (this.direction == 1)
				{
					num3 = -40;
				}
				int num4 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num3, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
				Main.dust[num4].fadeIn = 1.1f;
				Main.dust[num4].noGravity = true;
				Main.dust[num4].noLight = true;
				Main.dust[num4].noLightEmittence = noLightEmittence;
				Main.dust[num4].velocity *= 0.3f;
				Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			int num5 = this.wings;
			int num6 = this.wings;
			if (this.wings == 9 && Main.rand.Next(2) == 0)
			{
				int num7 = 4;
				if (this.direction == 1)
				{
					num7 = -40;
				}
				int num8 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num7, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
				Main.dust[num8].noGravity = true;
				Main.dust[num8].noLightEmittence = noLightEmittence;
				Main.dust[num8].velocity *= 0.3f;
				Main.dust[num8].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			if (this.wings == 6 && Main.rand.Next(4) == 0)
			{
				int num9 = 4;
				if (this.direction == 1)
				{
					num9 = -40;
				}
				int num10 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num9, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 55, 0f, 0f, 200, default(Color), 1f);
				Main.dust[num10].velocity *= 0.3f;
				Main.dust[num10].noLightEmittence = noLightEmittence;
				Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			if (this.wings == 5 && Main.rand.Next(3) == 0)
			{
				int num11 = 6;
				if (this.direction == 1)
				{
					num11 = -30;
				}
				int num12 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num11, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
				Main.dust[num12].noLightEmittence = noLightEmittence;
				Main.dust[num12].velocity *= 0.3f;
				Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			if (this.wings == 26)
			{
				int num13 = 6;
				if (this.direction == 1)
				{
					num13 = -30;
				}
				int num14 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num13, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
				Main.dust[num14].noGravity = true;
				Main.dust[num14].noLight = true;
				Main.dust[num14].velocity /= 4f;
				Main.dust[num14].velocity -= this.velocity;
				Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				if (Main.rand.Next(2) == 0)
				{
					num13 = -24;
					if (this.direction == 1)
					{
						num13 = 12;
					}
					float num15 = this.position.Y;
					if (this.gravDir == -1f)
					{
						num15 += (float)(this.height / 2);
					}
					num14 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num13, num15), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
					Main.dust[num14].noGravity = true;
					Main.dust[num14].noLight = true;
					Main.dust[num14].velocity /= 4f;
					Main.dust[num14].velocity -= this.velocity;
					Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				}
			}
			if (this.wings == 37)
			{
				int num16 = 6;
				if (this.direction == 1)
				{
					num16 = -30;
				}
				Dust dust = Dust.NewDustDirect(new Vector2(this.position.X + (float)(this.width / 2) + (float)num16, this.position.Y), 24, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
				{
					31,
					31,
					31
				}), 0f, 0f, 100, default(Color), 1f);
				dust.noGravity = true;
				dust.noLight = true;
				dust.velocity /= 4f;
				dust.velocity -= this.velocity / 2f;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				if (dust.type == 55)
				{
					dust.noGravity = true;
					dust.velocity *= 2f;
					dust.color = Color.Red;
				}
				if (Main.rand.Next(3) == 0)
				{
					num16 = -24;
					if (this.direction == 1)
					{
						num16 = 12;
					}
					float num17 = this.position.Y;
					if (this.gravDir == -1f)
					{
						num17 += (float)(this.height / 2);
					}
					dust = Dust.NewDustDirect(new Vector2(this.position.X + (float)(this.width / 2) + (float)num16, num17), 16, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
					{
						31,
						31,
						31
					}), 0f, 0f, 100, default(Color), 1f);
					dust.noGravity = true;
					dust.noLight = true;
					dust.velocity /= 4f;
					dust.velocity -= this.velocity / 2f;
					dust.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					if (dust.type == 55)
					{
						dust.noGravity = true;
						dust.velocity *= 2f;
						dust.color = Color.Red;
					}
				}
			}
			if (this.wings == 29 && Main.rand.Next(3) == 0)
			{
				int num18 = 4;
				if (this.direction == 1)
				{
					num18 = -40;
				}
				int num19 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num18, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
				Main.dust[num19].noGravity = true;
				Main.dust[num19].velocity *= 0.3f;
				Main.dust[num19].noLightEmittence = noLightEmittence;
				if (Main.rand.Next(10) == 0)
				{
					Main.dust[num19].fadeIn = 2f;
				}
				Main.dust[num19].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
			}
			if (this.wings == 31)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num20 = 4;
					if (this.direction == 1)
					{
						num20 = -40;
					}
					Dust dust2 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num20, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 86, 0f, 0f, 0, default(Color), 1f)];
					dust2.noGravity = true;
					dust2.scale = 1f;
					dust2.fadeIn = 1.2f;
					dust2.velocity *= 0.2f;
					dust2.noLight = true;
					dust2.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				}
				if (Main.rand.Next(3) == 0)
				{
					int num21 = 4;
					if (this.direction == 1)
					{
						num21 = -40;
					}
					Dust dust3 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num21, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 240, 0f, 0f, 0, default(Color), 1f)];
					dust3.noGravity = true;
					dust3.scale = 1.2f;
					dust3.velocity *= 0.2f;
					dust3.alpha = 200;
					dust3.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
				}
				if (Main.rand.Next(2) == 0)
				{
					if (Main.rand.Next(6) == 0)
					{
						int num22 = -24;
						if (this.direction == 1)
						{
							num22 = 12;
						}
						float num23 = this.position.Y;
						if (this.gravDir == -1f)
						{
							num23 += (float)(this.height / 2);
						}
						Dust dust4 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num22, num23), 12, this.height / 2, 86, 0f, 0f, 0, default(Color), 1f)];
						dust4.noGravity = true;
						dust4.scale = 1f;
						dust4.fadeIn = 1.2f;
						dust4.velocity *= 0.2f;
						dust4.noLight = true;
						dust4.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					}
					if (Main.rand.Next(3) == 0)
					{
						int num22 = -24;
						if (this.direction == 1)
						{
							num22 = 12;
						}
						float num24 = this.position.Y;
						if (this.gravDir == -1f)
						{
							num24 += (float)(this.height / 2);
						}
						Dust dust5 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num22, num24), 12, this.height / 2, 240, 0f, 0f, 0, default(Color), 1f)];
						dust5.noGravity = true;
						dust5.scale = 1.2f;
						dust5.velocity *= 0.2f;
						dust5.alpha = 200;
						dust5.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					}
				}
			}
		}

		// Token: 0x060007F6 RID: 2038 RVA: 0x002F9A98 File Offset: 0x002F7C98
		private void HandleBeingInChestRange()
		{
			if (this.chest != -1)
			{
				if (this.chest != -2)
				{
					this.piggyBankProjTracker.Clear();
				}
				if (this.chest != -5)
				{
					this.voidLensChest.Clear();
				}
				bool flag = false;
				int projectileLocalIndex = this.piggyBankProjTracker.ProjectileLocalIndex;
				if (projectileLocalIndex >= 0)
				{
					flag = true;
					if (!Main.projectile[projectileLocalIndex].active || (Main.projectile[projectileLocalIndex].type != 525 && Main.projectile[projectileLocalIndex].type != 960))
					{
						Main.PlayInteractiveProjectileOpenCloseSound(Main.projectile[projectileLocalIndex].type, false);
						this.chest = -1;
						Recipe.FindRecipes(false);
					}
					else
					{
						int num = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
						int num2 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
						Vector2 vector = Main.projectile[projectileLocalIndex].Hitbox.ClosestPointInRect(base.Center);
						this.chestX = (int)vector.X / 16;
						this.chestY = (int)vector.Y / 16;
						if (num < this.chestX - Player.tileRangeX || num > this.chestX + Player.tileRangeX + 1 || num2 < this.chestY - Player.tileRangeY || num2 > this.chestY + Player.tileRangeY + 1)
						{
							if (this.chest != -1)
							{
								Main.PlayInteractiveProjectileOpenCloseSound(Main.projectile[projectileLocalIndex].type, false);
							}
							this.chest = -1;
							Recipe.FindRecipes(false);
						}
					}
				}
				int projectileLocalIndex2 = this.voidLensChest.ProjectileLocalIndex;
				if (projectileLocalIndex2 >= 0)
				{
					flag = true;
					if (!Main.projectile[projectileLocalIndex2].active || Main.projectile[projectileLocalIndex2].type != 734)
					{
						SoundEngine.PlaySound(SoundID.Item130, -1, -1);
						this.chest = -1;
						Recipe.FindRecipes(false);
					}
					else
					{
						int num3 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
						int num4 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
						Vector2 vector2 = Main.projectile[projectileLocalIndex2].Hitbox.ClosestPointInRect(base.Center);
						this.chestX = (int)vector2.X / 16;
						this.chestY = (int)vector2.Y / 16;
						if (num3 < this.chestX - Player.tileRangeX || num3 > this.chestX + Player.tileRangeX + 1 || num4 < this.chestY - Player.tileRangeY || num4 > this.chestY + Player.tileRangeY + 1)
						{
							if (this.chest != -1)
							{
								SoundEngine.PlaySound(SoundID.Item130, -1, -1);
							}
							this.chest = -1;
							Recipe.FindRecipes(false);
						}
					}
				}
				if (!flag)
				{
					if (!this.IsInInteractionRangeToMultiTileHitbox(this.chestX, this.chestY))
					{
						if (this.chest != -1)
						{
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						this.chest = -1;
						Recipe.FindRecipes(false);
						return;
					}
					if (!Main.tile[this.chestX, this.chestY].active())
					{
						SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
						this.chest = -1;
						Recipe.FindRecipes(false);
						return;
					}
				}
			}
			else
			{
				this.piggyBankProjTracker.Clear();
				this.voidLensChest.Clear();
			}
		}

		// Token: 0x060007F7 RID: 2039 RVA: 0x002F9E30 File Offset: 0x002F8030
		public bool IsInInteractionRangeToMultiTileHitbox(int chestPointX, int chestPointY)
		{
			int num = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
			int num2 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
			Rectangle empty = Rectangle.Empty;
			Tile tile = Main.tile[chestPointX, chestPointY];
			if (tile.type == 463 || tile.type == 491)
			{
				empty = new Rectangle(chestPointX * 16 - 16, chestPointY * 16 - 32, 48, 64);
			}
			if (TileID.Sets.BasicChest[(int)tile.type] || tile.type == 97)
			{
				empty = new Rectangle(chestPointX * 16, chestPointY * 16, 32, 32);
			}
			if (tile.type == 88)
			{
				empty = new Rectangle(chestPointX * 16, chestPointY * 16, 48, 32);
			}
			if (tile.type == 29)
			{
				empty = new Rectangle(chestPointX * 16, chestPointY * 16, 32, 16);
			}
			empty.Inflate(-1, -1);
			Point point = empty.ClosestPointInRect(base.Center).ToTileCoordinates();
			chestPointX = point.X;
			chestPointY = point.Y;
			return num >= chestPointX - Player.tileRangeX && num <= chestPointX + Player.tileRangeX + 1 && num2 >= chestPointY - Player.tileRangeY && num2 <= chestPointY + Player.tileRangeY + 1;
		}

		// Token: 0x060007F8 RID: 2040 RVA: 0x002F9F98 File Offset: 0x002F8198
		public void ResetVisibleAccessories()
		{
			this.handon = -1;
			this.handoff = -1;
			this.back = -1;
			this.front = -1;
			this.shoe = -1;
			this.waist = -1;
			this.shield = -1;
			this.neck = -1;
			this.face = -1;
			this.balloon = -1;
			this.backpack = -1;
			this.tail = -1;
			this.faceHead = -1;
			this.faceFlower = -1;
			this.balloonFront = -1;
			this.beard = -1;
		}

		// Token: 0x060007F9 RID: 2041 RVA: 0x002FA018 File Offset: 0x002F8218
		public void UpdateArmorLights()
		{
			if (this.vortexStealthActive)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = 0f;
			int num4 = this.head;
			if (num4 <= 178)
			{
				if (num4 != 11)
				{
					switch (num4)
					{
					case 169:
						num = 0f;
						num2 = 0.36f;
						num3 = 0.4f;
						break;
					case 170:
						num = 0.4f;
						num2 = 0.16f;
						num3 = 0.36f;
						break;
					case 171:
						num = 0.5f;
						num2 = 0.25f;
						num3 = 0.05f;
						break;
					default:
						if (num4 == 178)
						{
							num = 0.1f;
							num2 = 0.2f;
							num3 = 0.3f;
						}
						break;
					}
				}
				else
				{
					num = 0.92f;
					num2 = 0.8f;
					num3 = 0.65f;
				}
			}
			else if (num4 != 189)
			{
				if (num4 != 211)
				{
					if (num4 == 216)
					{
						num = 0.7f;
						num2 = 0.95f;
						num3 = 0.82f;
					}
				}
				else
				{
					num = 0.2f;
					num2 = 0.4f;
					num3 = 0.8f;
				}
			}
			else
			{
				num = 0.9f;
				num2 = 0.9f;
				num3 = 0.7f;
			}
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 0f;
			num4 = this.body;
			switch (num4)
			{
			case 175:
				num5 = 0f;
				num6 = 0.36f;
				num7 = 0.4f;
				break;
			case 176:
				num5 = 0.4f;
				num6 = 0.16f;
				num7 = 0.36f;
				break;
			case 177:
				num5 = 0.5f;
				num6 = 0.25f;
				num7 = 0.05f;
				break;
			default:
				if (num4 != 190)
				{
					if (num4 == 205)
					{
						num5 = 0.2f;
						num6 = 0.4f;
						num7 = 0.8f;
					}
				}
				else
				{
					num = 0.9f;
					num2 = 0.9f;
					num3 = 0.7f;
				}
				break;
			}
			float num8 = 0f;
			float num9 = 0f;
			float num10 = 0f;
			num4 = this.legs;
			switch (num4)
			{
			case 110:
				num8 = 0f;
				num9 = 0.36f;
				num10 = 0.4f;
				break;
			case 111:
				num8 = 0.4f;
				num9 = 0.16f;
				num10 = 0.36f;
				break;
			case 112:
				num8 = 0.5f;
				num9 = 0.25f;
				num10 = 0.05f;
				break;
			default:
				if (num4 == 130)
				{
					num = 0.9f;
					num2 = 0.9f;
					num3 = 0.7f;
				}
				break;
			}
			if (num != 0f || num2 != 0f || num3 != 0f)
			{
				float num11 = 1f;
				if (num == num5 && num2 == num6 && num3 == num7)
				{
					num11 += 0.5f;
				}
				if (num == num8 && num2 == num9 && num3 == num10)
				{
					num11 += 0.5f;
				}
				Vector2 vector = new Vector2((float)(this.width / 2 + 8 * this.direction), 2f);
				if (this.fullRotation != 0f)
				{
					vector = vector.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i = (int)(this.position.X + vector.X) / 16;
				int j = (int)(this.position.Y + vector.Y) / 16;
				Lighting.AddLight(i, j, num * num11, num2 * num11, num3 * num11);
			}
			if (num5 != 0f || num6 != 0f || num7 != 0f)
			{
				float num12 = 1f;
				if (num5 == num && num6 == num2 && num7 == num3)
				{
					num12 += 0.5f;
				}
				if (num5 == num8 && num6 == num9 && num7 == num10)
				{
					num12 += 0.5f;
				}
				Vector2 vector2 = new Vector2((float)(this.width / 2 + 8), (float)(this.height / 2));
				if (this.fullRotation != 0f)
				{
					vector2 = vector2.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i2 = (int)(this.position.X + vector2.X) / 16;
				int j2 = (int)(this.position.Y + vector2.Y) / 16;
				Lighting.AddLight(i2, j2, num5 * num12, num6 * num12, num7 * num12);
			}
			if (num8 != 0f || num9 != 0f || num10 != 0f)
			{
				float num13 = 1f;
				if (num8 == num5 && num9 == num6 && num10 == num7)
				{
					num13 += 0.5f;
				}
				if (num8 == num && num9 == num2 && num10 == num3)
				{
					num13 += 0.5f;
				}
				Vector2 vector3 = new Vector2((float)(this.width / 2 + 8 * this.direction), (float)this.height * 0.75f);
				if (this.fullRotation != 0f)
				{
					vector3 = vector3.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i3 = (int)(this.position.X + vector3.X) / 16;
				int j3 = (int)(this.position.Y + vector3.Y) / 16;
				Lighting.AddLight(i3, j3, num8 * num13, num9 * num13, num10 * num13);
			}
		}

		// Token: 0x060007FA RID: 2042 RVA: 0x002FA52C File Offset: 0x002F872C
		public void Update_NPCCollision()
		{
			if (this.creativeGodMode)
			{
				return;
			}
			Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && !Main.npc[i].friendly && Main.npc[i].damage > 0)
				{
					int num = -1;
					int type = Main.npc[i].type;
					if (type - 396 > 2 && type - 400 > 1)
					{
						if (type == 636)
						{
							num = 1;
							if (Main.npc[i].ai[0] == 0f || Main.npc[i].ai[0] == 10f)
							{
								goto IL_451;
							}
						}
					}
					else
					{
						num = 1;
					}
					if ((num != -1 || !this.immune) && (this.dash != 2 || i != this.eocHit || this.eocDash <= 0) && !this.npcTypeNoAggro[Main.npc[i].type])
					{
						float num2 = 1f;
						Main.npc[i].position += Main.npc[i].netOffset;
						Rectangle rectangle2 = new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height);
						NPC.GetMeleeCollisionData(rectangle, i, ref num, ref num2, ref rectangle2);
						if (rectangle.Intersects(rectangle2))
						{
							if (this.npcTypeNoAggro[Main.npc[i].type])
							{
								goto IL_451;
							}
							bool flag = true;
							bool flag2 = false;
							bool flag3 = this.CanParryAgainst(rectangle, rectangle2, Main.npc[i].velocity);
							float num3 = this.thorns;
							float knockback = 10f;
							if (this.turtleThorns)
							{
								num3 = 2f;
							}
							if (flag3)
							{
								num3 = 2f;
								knockback = 5f;
								flag = false;
								flag2 = true;
							}
							int num4 = -1;
							if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < this.position.X + (float)(this.width / 2))
							{
								num4 = 1;
							}
							int num5 = Main.DamageVar((float)Main.npc[i].damage * num2, -this.luck);
							int num6 = Item.NPCtoBanner(Main.npc[i].BannerID());
							if (num6 > 0 && this.HasNPCBannerBuff(num6))
							{
								if (Main.expertMode)
								{
									num5 = (int)((float)num5 * ItemID.Sets.BannerStrength[Item.BannerToItem(num6)].ExpertDamageReceived);
								}
								else
								{
									num5 = (int)((float)num5 * ItemID.Sets.BannerStrength[Item.BannerToItem(num6)].NormalDamageReceived);
								}
							}
							bool flag4 = !this.immune;
							if (num >= 0)
							{
								flag4 = (this.hurtCooldowns[num] == 0);
							}
							if (this.whoAmI == Main.myPlayer && num3 > 0f && flag4 && !Main.npc[i].dontTakeDamage)
							{
								int num7 = (int)((float)num5 * num3);
								if (num7 > 1000)
								{
									num7 = 1000;
								}
								this.ApplyDamageToNPC(Main.npc[i], num7, knockback, -num4, false);
							}
							if (this.whoAmI == Main.myPlayer && this.cactusThorns && flag4 && !Main.npc[i].dontTakeDamage)
							{
								int damage = 15;
								if (Main.masterMode)
								{
									damage = 45;
								}
								else if (Main.expertMode)
								{
									damage = 30;
								}
								this.ApplyDamageToNPC(Main.npc[i], damage, knockback, -num4, false);
							}
							if (this.resistCold && Main.npc[i].coldDamage)
							{
								num5 = (int)((float)num5 * 0.7f);
							}
							if (flag)
							{
								bool dodgeable = Main.npc[i].IsDamageDodgeable();
								if (this.Hurt(PlayerDeathReason.ByNPC(i), num5, num4, false, false, false, num, dodgeable) > 0.0 && !this.dead && !flag2)
								{
									this.StatusFromNPC(Main.npc[i]);
								}
							}
							if (flag3)
							{
								this.GiveImmuneTimeForCollisionAttack(this.longInvince ? 60 : 30);
								this.AddBuff(198, 300, false, false);
							}
						}
						Main.npc[i].position -= Main.npc[i].netOffset;
					}
				}
				IL_451:;
			}
		}

		// Token: 0x060007FB RID: 2043 RVA: 0x002FA99C File Offset: 0x002F8B9C
		public bool CanParryAgainst(Rectangle blockingPlayerRect, Rectangle enemyRect, Vector2 enemyVelocity)
		{
			return this.shieldParryTimeLeft > 0 && Math.Sign(enemyRect.Center.X - blockingPlayerRect.Center.X) == this.direction && enemyVelocity != Vector2.Zero && !this.immune;
		}

		// Token: 0x060007FC RID: 2044 RVA: 0x002FA9F0 File Offset: 0x002F8BF0
		private void PurgeDD2EnergyCrystals()
		{
			if (this.trashItem.type == 3822)
			{
				this.trashItem.TurnToAir(false);
			}
			if (Main.myPlayer == this.whoAmI && Main.mouseItem.type == 3822)
			{
				Main.mouseItem.TurnToAir(false);
			}
			for (int i = 0; i < 59; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && item.type == 3822)
				{
					item.TurnToAir(false);
				}
			}
			if (this.chest == -2)
			{
				Chest chest = this.bank;
				for (int j = 0; j < 40; j++)
				{
					if (chest.item[j].stack > 0 && chest.item[j].type == 3822)
					{
						chest.item[j].TurnToAir(false);
					}
				}
			}
			if (this.chest == -4)
			{
				Chest chest2 = this.bank3;
				for (int k = 0; k < 40; k++)
				{
					if (chest2.item[k].stack > 0 && chest2.item[k].type == 3822)
					{
						chest2.item[k].TurnToAir(false);
					}
				}
			}
			if (this.chest == -5)
			{
				Chest chest3 = this.bank4;
				for (int l = 0; l < 40; l++)
				{
					if (chest3.item[l].stack > 0 && chest3.item[l].type == 3822)
					{
						chest3.item[l].TurnToAir(false);
					}
				}
			}
			if (this.chest == -3)
			{
				Chest chest4 = this.bank2;
				for (int m = 0; m < 40; m++)
				{
					if (chest4.item[m].stack > 0 && chest4.item[m].type == 3822)
					{
						chest4.item[m].TurnToAir(false);
					}
				}
			}
			if (this.chest > -1)
			{
				Chest chest5 = Main.chest[this.chest];
				for (int n = 0; n < 40; n++)
				{
					if (chest5.item[n].stack > 0 && chest5.item[n].type == 3822)
					{
						chest5.item[n].TurnToAir(false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(32, -1, -1, null, this.chest, (float)n, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
		}

		// Token: 0x060007FD RID: 2045 RVA: 0x002FAC60 File Offset: 0x002F8E60
		public void ItemCheck_ManageRightClickFeatures()
		{
			bool flag = this.selectedItem != 58 && this.controlUseTile && Main.myPlayer == this.whoAmI && !this.tileInteractionHappened && this.releaseUseItem && !this.controlUseItem && !this.mouseInterface && !CaptureManager.Instance.Active && !Main.HoveringOverAnNPC && !Main.SmartInteractShowingGenuine;
			bool flag2 = flag;
			if (!ItemID.Sets.ItemsThatAllowRepeatedRightClick[this.inventory[this.selectedItem].type] && !Main.mouseRightRelease)
			{
				flag2 = false;
			}
			if (flag2 && this.altFunctionUse == 0)
			{
				for (int i = 0; i < this._projectilesToInteractWith.Count; i++)
				{
					Projectile projectile = Main.projectile[this._projectilesToInteractWith[i]];
					if (projectile.Hitbox.Contains(Main.MouseWorld.ToPoint()) || Main.SmartInteractProj == projectile.whoAmI)
					{
						flag = false;
						flag2 = false;
						break;
					}
				}
			}
			if (flag2 && this.altFunctionUse == 0 && this.itemTime == 0 && this.itemAnimation == 0)
			{
				int num = -1;
				int type = 7;
				int type2 = this.inventory[this.selectedItem].type;
				if (type2 <= 5309)
				{
					if (type2 <= 4346)
					{
						if (type2 != 4131)
						{
							if (type2 == 4346)
							{
								num = 5391;
								type = 22;
							}
						}
						else
						{
							num = 5325;
						}
					}
					else if (type2 != 4767)
					{
						if (type2 == 5309)
						{
							num = 5454;
						}
					}
					else
					{
						num = 5453;
					}
				}
				else if (type2 <= 5361)
				{
					switch (type2)
					{
					case 5323:
						num = 5455;
						break;
					case 5324:
						num = 5329;
						type = 22;
						break;
					case 5325:
						num = 4131;
						break;
					case 5326:
					case 5327:
					case 5328:
						break;
					case 5329:
						num = 5330;
						type = 22;
						break;
					case 5330:
						num = 5324;
						type = 22;
						break;
					default:
						switch (type2)
						{
						case 5358:
							num = 5360;
							type = 22;
							break;
						case 5359:
							num = 5358;
							type = 22;
							break;
						case 5360:
							num = 5361;
							type = 22;
							break;
						case 5361:
							num = 5359;
							type = 22;
							break;
						}
						break;
					}
				}
				else if (type2 != 5391)
				{
					if (type2 != 5437)
					{
						switch (type2)
						{
						case 5453:
							num = 4767;
							break;
						case 5454:
							num = 5309;
							break;
						case 5455:
							num = 5323;
							break;
						}
					}
					else
					{
						num = 5358;
						type = 22;
					}
				}
				else
				{
					num = 4346;
					type = 22;
				}
				if (num != -1)
				{
					this.releaseUseTile = false;
					Main.mouseRightRelease = false;
					SoundEngine.PlaySound(type, -1, -1, 1, 1f, 0f);
					this.inventory[this.selectedItem].ChangeItemType(num);
					Recipe.FindRecipes(false);
				}
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3384)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3858)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 4673)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3852 && this.itemAnimation == 0)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].shoot > 0 && ProjectileID.Sets.TurretFeature[this.inventory[this.selectedItem].shoot])
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag2 && this.altFunctionUse == 0 && this.inventory[this.selectedItem].shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[this.inventory[this.selectedItem].shoot])
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (!this.controlUseItem && this.altFunctionUse == 1)
			{
				this.altFunctionUse = 0;
			}
			this.ItemCheck_ManageRightClickFeatures_ShieldRaise(flag);
		}

		// Token: 0x060007FE RID: 2046 RVA: 0x002FB104 File Offset: 0x002F9304
		public void ItemCheck_ManageRightClickFeatures_ShieldRaise(bool theGeneralCheck)
		{
			bool mouseRight = PlayerInput.Triggers.JustPressed.MouseRight;
			if (this.whoAmI != Main.myPlayer)
			{
				mouseRight = this.shieldRaised;
				theGeneralCheck = this.shieldRaised;
			}
			bool shouldGuard = false;
			bool flag = this.inventory[this.selectedItem].type == 3823 || this.inventory[this.selectedItem].type == 4760;
			if (theGeneralCheck && flag && this.hasRaisableShield && !this.mount.Active && (this.itemAnimation == 0 || mouseRight))
			{
				shouldGuard = true;
			}
			if (this.shield_parry_cooldown > 0)
			{
				this.shield_parry_cooldown--;
				if (this.shield_parry_cooldown == 0)
				{
					SoundEngine.PlaySound(25, base.Center, 1);
					for (int i = 0; i < 10; i++)
					{
						int num = Dust.NewDust(base.Center + new Vector2((float)(this.direction * 6 + ((this.direction == -1) ? -10 : 0)), -14f), 10, 16, 45, 0f, 0f, 255, new Color(255, 100, 0, 127), (float)Main.rand.Next(10, 16) * 0.1f);
						Main.dust[num].noLight = true;
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.5f;
					}
				}
			}
			if (this.shieldParryTimeLeft > 0)
			{
				int num2 = this.shieldParryTimeLeft + 1;
				this.shieldParryTimeLeft = num2;
				if (num2 > 20)
				{
					this.shieldParryTimeLeft = 0;
				}
			}
			this.TryTogglingShield(shouldGuard);
		}

		// Token: 0x060007FF RID: 2047 RVA: 0x002FB2BC File Offset: 0x002F94BC
		public void TryTogglingShield(bool shouldGuard)
		{
			if (shouldGuard != this.shieldRaised)
			{
				this.shieldRaised = shouldGuard;
				if (this.shieldRaised)
				{
					if (this.shield_parry_cooldown == 0)
					{
						this.shieldParryTimeLeft = 1;
					}
					this.itemAnimation = 0;
					this.itemTime = 0;
					this.reuseDelay = 0;
					return;
				}
				this.shield_parry_cooldown = 15;
				this.shieldParryTimeLeft = 0;
				this.ApplyAttackCooldown(20);
			}
		}

		// Token: 0x06000800 RID: 2048 RVA: 0x002FB320 File Offset: 0x002F9520
		private void HandleHotbar()
		{
			int num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt();
			if (PlayerInput.CurrentProfile.HotbarAllowsRadial && num != 0 && PlayerInput.Triggers.Current.HotbarHoldTime > PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired && PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
			{
				PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed = true;
				PlayerInput.Triggers.Current.HotbarScrollCD = 2;
			}
			if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
			{
				num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() - PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
				if (PlayerInput.Triggers.Current.HotbarScrollCD == 1 && num != 0)
				{
					num = 0;
				}
			}
			if (PlayerInput.Triggers.Current.HotbarScrollCD == 0 && num != 0)
			{
				this.HotbarOffset += num;
				PlayerInput.Triggers.Current.HotbarScrollCD = 8;
			}
			if (!Main.inFancyUI && !Main.ingameOptionsWindow)
			{
				this.HotbarOffset += PlayerInput.ScrollWheelDelta / -120;
			}
			this.ScrollHotbar(this.HotbarOffset);
			this.HotbarOffset = 0;
		}

		// Token: 0x06000801 RID: 2049 RVA: 0x002FB45C File Offset: 0x002F965C
		private void ItemCheckWrapped(int i)
		{
			bool flag = !this.controlLeft && !this.controlRight && !this.controlUp && !this.controlDown && PlayerInput.UsingGamepad && Main.SmartCursorIsUsed && PlayerInput.GamepadThumbstickRight.Length() < 0.05f;
			if (flag)
			{
				this.ForceForwardCursor(true);
			}
			bool flag2 = PlayerInput.smartSelectPointer.ShouldBeUsed() && !Main.SmartCursorIsUsed;
			if (flag2)
			{
				this.ForceSmartSelectCursor(true);
			}
			LockOnHelper.SetUP();
			int stack = this.inventory[this.selectedItem].stack;
			if (Main.ignoreErrors)
			{
				this.ItemCheck();
			}
			else
			{
				this.ItemCheck();
			}
			if (stack != this.inventory[this.selectedItem].stack)
			{
				Recipe.FindRecipes(false);
			}
			LockOnHelper.SetDOWN();
			if (flag2)
			{
				this.ForceSmartSelectCursor(false);
			}
			if (flag)
			{
				this.ForceForwardCursor(false);
			}
			if (this.itemAnimation == 0)
			{
				this.lastVisualizedSelectedItem = this.HeldItem.Clone();
			}
		}

		// Token: 0x06000802 RID: 2050 RVA: 0x002FB54C File Offset: 0x002F974C
		private void ForceForwardCursor(bool state)
		{
			if (state == this._forceForwardCursor)
			{
				return;
			}
			this._forceForwardCursor = state;
			if (state)
			{
				this._inputMouseCoordsForward = new Point(PlayerInput.MouseX, PlayerInput.MouseY);
				this._mainMouseCoordsForward = new Point(Main.mouseX, Main.mouseY);
				Point point = (base.Center - Main.screenPosition + new Vector2((float)(this.direction * 200), 0f)).ToPoint();
				Main.mouseX = (PlayerInput.MouseX = point.X);
				Main.mouseY = (PlayerInput.MouseY = point.Y);
				return;
			}
			PlayerInput.MouseX = this._inputMouseCoordsForward.X;
			PlayerInput.MouseY = this._inputMouseCoordsForward.Y;
			Main.mouseX = this._mainMouseCoordsForward.X;
			Main.mouseY = this._mainMouseCoordsForward.Y;
		}

		// Token: 0x06000803 RID: 2051 RVA: 0x002FB62C File Offset: 0x002F982C
		private void ForceSmartSelectCursor(bool state)
		{
			if (state == this._forceSmartSelectCursor)
			{
				return;
			}
			this._forceSmartSelectCursor = state;
			if (state)
			{
				this._inputMouseCoordsSmartSelect = new Point(PlayerInput.MouseX, PlayerInput.MouseY);
				this._mainMouseCoordsSmartSelect = new Point(Main.mouseX, Main.mouseY);
				this._tileTargetSmartSelect = new Point(Player.tileTargetX, Player.tileTargetY);
				Point point = PlayerInput.smartSelectPointer.GetPointerPosition().ToPoint();
				Main.mouseX = (PlayerInput.MouseX = point.X);
				Main.mouseY = (PlayerInput.MouseY = point.Y);
				Point point2 = (point.ToVector2() + Main.screenPosition).ToTileCoordinates();
				Player.tileTargetX = point2.X;
				Player.tileTargetY = point2.Y;
				return;
			}
			PlayerInput.MouseX = this._inputMouseCoordsSmartSelect.X;
			PlayerInput.MouseY = this._inputMouseCoordsSmartSelect.Y;
			Main.mouseX = this._mainMouseCoordsSmartSelect.X;
			Main.mouseY = this._mainMouseCoordsSmartSelect.Y;
			Player.tileTargetX = this._tileTargetSmartSelect.X;
			Player.tileTargetY = this._tileTargetSmartSelect.Y;
		}

		// Token: 0x06000804 RID: 2052 RVA: 0x002FB74C File Offset: 0x002F994C
		public void ScrollHotbar(int Offset)
		{
			Offset = Player.ClampHotbarOffset(Offset);
			this.selectedItem += Offset;
			if (Offset != 0)
			{
				SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				int num = this.selectedItem - Offset;
				this.DpadRadial.ChangeSelection(-1);
				this.CircularRadial.ChangeSelection(-1);
				this.selectedItem = num + Offset;
				this.nonTorch = -1;
			}
			if (this.changeItem >= 0)
			{
				if (this.selectedItem != this.changeItem)
				{
					SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				this.selectedItem = this.changeItem;
				this.changeItem = -1;
			}
			if (this.itemAnimation == 0 && this.selectedItem != 58)
			{
				while (this.selectedItem > 9)
				{
					this.selectedItem -= 10;
				}
				while (this.selectedItem < 0)
				{
					this.selectedItem += 10;
				}
			}
		}

		// Token: 0x06000805 RID: 2053 RVA: 0x002FB83E File Offset: 0x002F9A3E
		private static int ClampHotbarOffset(int Offset)
		{
			while (Offset > 9)
			{
				Offset -= 10;
			}
			while (Offset < 0)
			{
				Offset += 10;
			}
			return Offset;
		}

		// Token: 0x06000806 RID: 2054 RVA: 0x002FB85A File Offset: 0x002F9A5A
		public List<int> GetListOfProjectilesToInteractWithHack()
		{
			return this._projectilesToInteractWith;
		}

		// Token: 0x06000807 RID: 2055 RVA: 0x002FB862 File Offset: 0x002F9A62
		public void LockGamepadTileInteractions()
		{
			this.releaseUseTile = false;
			this._lockTileInteractionsTimer = 3;
			PlayerInput.LockGamepadTileUseButton = true;
		}

		// Token: 0x06000808 RID: 2056 RVA: 0x002FB878 File Offset: 0x002F9A78
		public void LookForTileInteractions()
		{
			if (Main.netMode == 2 || Main.myPlayer != this.whoAmI)
			{
				return;
			}
			if (Main.mapFullscreen)
			{
				return;
			}
			if (Main.InGameUI.CurrentState == Main.BestiaryUI)
			{
				return;
			}
			int smartInteractX = Player.tileTargetX;
			int smartInteractY = Player.tileTargetY;
			if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1 && Main.SmartInteractProj == -1)
			{
				smartInteractX = Main.SmartInteractX;
				smartInteractY = Main.SmartInteractY;
			}
			bool flag = this.controlUseTile;
			if (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC)
			{
				flag = false;
			}
			if (Main.gamePaused)
			{
				flag = false;
			}
			if (this.releaseUseTile)
			{
				this.tileInteractionHappened = false;
			}
			this.tileInteractAttempted = flag;
			if (this.tileInteractAttempted && this.releaseUseTile)
			{
				if (Main.instance.currentNPCShowingChatBubble > -1 && (this.talkNPC == -1 || !Main.npcChatRelease))
				{
					this.tileInteractAttempted = true;
					this.releaseUseTile = false;
				}
				if (Main.HasInteractibleObjectThatIsNotATile)
				{
					this.tileInteractAttempted = true;
					this.releaseUseTile = false;
				}
			}
			if (this.IsInTileInteractionRange(smartInteractX, smartInteractY, TileReachCheckSettings.Simple))
			{
				this.TileInteractionsCheckLongDistance(Player.tileTargetX, Player.tileTargetY);
				this.TileInteractionsCheck(smartInteractX, smartInteractY);
			}
			else
			{
				this.TileInteractionsCheckLongDistance(smartInteractX, smartInteractY);
			}
			this.TryInteractingWithMinecartTrackInNearbyArea(smartInteractX, smartInteractY);
		}

		// Token: 0x06000809 RID: 2057 RVA: 0x002FB9A4 File Offset: 0x002F9BA4
		private void TryInteractingWithMinecartTrackInNearbyArea(int selectedTargetX, int selectedTargetY)
		{
			if ((!this.mount.Active || !MountID.Sets.Cart[this.mount.Type]) && this.botherWithUnaimedMinecartTracks && !this.tileInteractionHappened && !Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1 && Main.SmartInteractProj == -1 && WorldGen.InWorld(selectedTargetX, selectedTargetY, 10) && this.gravDir == 1f)
			{
				int num = 2;
				for (int i = selectedTargetX - num; i <= selectedTargetX + num; i++)
				{
					for (int j = selectedTargetY - num; j <= selectedTargetY + num; j++)
					{
						if (this.IsInTileInteractionRange(i, j, TileReachCheckSettings.Simple))
						{
							Tile tile = Main.tile[i, j];
							if (tile != null)
							{
								if (tile.active() && tile.type == 314)
								{
									if (!this.cursorItemIconEnabled)
									{
										this.noThrow = 2;
										this.cursorItemIconEnabled = true;
										this.cursorItemIconID = 2343;
									}
									if (this.tileInteractAttempted)
									{
										this.TileInteractionsCheck(i, j);
									}
								}
								if (this.tileInteractionHappened)
								{
									return;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x0600080A RID: 2058 RVA: 0x002FBAC0 File Offset: 0x002F9CC0
		public bool InInteractionRange(int interactX, int interactY, TileReachCheckSettings settings)
		{
			int num = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
			int num2 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
			Tile tile = Main.tile[interactX, interactY];
			int num3;
			int num4;
			settings.GetRanges(this, out num3, out num4);
			if (tile.type == 597)
			{
				if (interactX < num)
				{
					interactX += 2;
				}
				if (interactY < num2)
				{
					interactY += 3;
				}
				Point point = this.position.ToTileCoordinates();
				Point point2 = base.BottomRight.ToTileCoordinates();
				return point2.X >= interactX - num3 + 1 && point.X <= interactX + num3 - 1 && point2.Y >= interactY - num4 + 2 && point.Y <= interactY + num4 - 1;
			}
			if (tile.type == 475)
			{
				return num >= interactX - num3 - 1 && num <= interactX + num3 + 2 && num2 >= interactY - num4 - 1 && num2 <= interactY + num4 + 2;
			}
			if (tile.type == 470)
			{
				return num >= interactX - num3 - 1 && num <= interactX + num3 + 1 && num2 >= interactY - num4 - 1 && num2 <= interactY + num4 + 2;
			}
			return num >= interactX - num3 && num <= interactX + num3 + 1 && num2 >= interactY - num4 && num2 <= interactY + num4 + 1;
		}

		// Token: 0x0600080B RID: 2059 RVA: 0x002FBC40 File Offset: 0x002F9E40
		public bool IsInTileInteractionRange(int targetX, int targetY, TileReachCheckSettings settings)
		{
			int num;
			int num2;
			settings.GetRanges(this, out num, out num2);
			return this.position.X / 16f - (float)num <= (float)targetX && (this.position.X + (float)this.width) / 16f + (float)num - 1f >= (float)targetX && this.position.Y / 16f - (float)num2 <= (float)targetY && (this.position.Y + (float)this.height) / 16f + (float)num2 - 2f >= (float)targetY;
		}

		// Token: 0x0600080C RID: 2060 RVA: 0x002FBCDC File Offset: 0x002F9EDC
		public void TileInteractionsCheck(int myX, int myY)
		{
			if (Main.tile[myX, myY] == null)
			{
				Main.tile[myX, myY] = new Tile();
			}
			if (Main.tile[myX, myY].active())
			{
				this.TileInteractionsMouseOver(myX, myY);
				this.TileInteractionsUse(myX, myY);
			}
		}

		// Token: 0x0600080D RID: 2061 RVA: 0x002FBD2C File Offset: 0x002F9F2C
		private void TileInteractionsCheckLongDistance(int myX, int myY)
		{
			if (!WorldGen.InWorld(myX, myY, 10))
			{
				return;
			}
			if (Main.tile[myX, myY] == null || !Main.tile[myX, myY].active())
			{
				return;
			}
			if (TileID.Sets.BasicChest[(int)Main.tile[myX, myY].type])
			{
				this.TileInteractionsMouseOver_Containers(myX, myY);
				if (this.cursorItemIconText == "")
				{
					this.cursorItemIconEnabled = false;
					this.cursorItemIconID = 0;
				}
			}
			if (Main.tile[myX, myY].type == 88)
			{
				Tile tile = Main.tile[myX, myY];
				int num = myY;
				int x = myX - (int)(tile.frameX % 54 / 18);
				if (tile.frameY % 36 != 0)
				{
					num--;
				}
				int num2 = Chest.FindChest(x, num);
				this.cursorItemIconID = -1;
				if (num2 < 0)
				{
					this.cursorItemIconText = Lang.dresserType[0].Value;
				}
				else
				{
					if (Main.chest[num2].name != "")
					{
						this.cursorItemIconText = Main.chest[num2].name;
					}
					else
					{
						this.cursorItemIconText = Lang.dresserType[(int)(tile.frameX / 54)].Value;
					}
					if (this.cursorItemIconText == Lang.dresserType[(int)(tile.frameX / 54)].Value)
					{
						this.cursorItemIconID = Chest.dresserTypeToIcon[(int)(tile.frameX / 54)];
						this.cursorItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				if (this.cursorItemIconText == "")
				{
					this.cursorItemIconEnabled = false;
					this.cursorItemIconID = 0;
				}
			}
			if (Main.tileSign[(int)Main.tile[myX, myY].type])
			{
				this.noThrow = 2;
				int num3 = (int)(Main.tile[myX, myY].frameX / 18);
				int num4 = (int)(Main.tile[myX, myY].frameY / 18);
				num3 %= 2;
				int num5 = myX - num3;
				int num6 = myY - num4;
				Main.signBubble = true;
				Main.signX = num5 * 16 + 16;
				Main.signY = num6 * 16;
				int num7 = Sign.ReadSign(num5, num6, false);
				if (num7 != -1 && Player.tileTargetX >= num5 && Player.tileTargetY >= num6 && Player.tileTargetX <= num5 + 1 && Player.tileTargetY <= num6 + 1)
				{
					Main.signHover = num7;
					this.cursorItemIconEnabled = false;
					this.cursorItemIconID = -1;
				}
			}
		}

		// Token: 0x0600080E RID: 2062 RVA: 0x002FBF94 File Offset: 0x002FA194
		private void TileInteractionsUse(int myX, int myY)
		{
			if (WiresUI.Open)
			{
				return;
			}
			if (this.ownedProjectileCounts[651] > 0)
			{
				return;
			}
			bool flag = this.releaseUseTile;
			if (this.tileInteractAttempted)
			{
				bool flag2 = false;
				if (Main.tile[myX, myY].type == 212 && this.snowBallLauncherInteractionCooldown <= 0)
				{
					flag2 = true;
					this.snowBallLauncherInteractionCooldown = 7;
					SoundEngine.PlaySound(SoundID.Item11, this.position);
					int i = (int)(Main.tile[myX, myY].frameX / 18);
					int num = 0;
					while (i >= 3)
					{
						num++;
						i -= 3;
					}
					i = myX - i;
					int j;
					for (j = (int)(Main.tile[myX, myY].frameY / 18); j >= 3; j -= 3)
					{
					}
					j = myY - j;
					float num2 = 12f + (float)Main.rand.Next(450) * 0.01f;
					float num3 = (float)Main.rand.Next(85, 105);
					float num4 = (float)Main.rand.Next(-35, 11);
					int type = 166;
					int damage = 35;
					float knockBack = 3.5f;
					Vector2 vector = new Vector2((float)((i + 2) * 16 - 8), (float)((j + 2) * 16 - 8 - 4));
					if (num == 0)
					{
						num3 *= -1f;
						vector.X -= 14f;
						vector.X -= 2f;
					}
					else
					{
						vector.X += 14f;
					}
					float num5 = num3;
					float num6 = num4;
					float num7 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
					num7 = num2 / num7;
					num5 *= num7;
					num6 *= num7;
					int num8 = Projectile.NewProjectile(this.GetProjectileSource_TileInteraction(i, j), vector.X, vector.Y, num5, num6, type, damage, knockBack, Main.myPlayer, (float)(-(float)Main.rand.Next(0, 16)), 0f, 0f);
					Main.projectile[num8].originatedFromActivableTile = true;
				}
				if (flag)
				{
					if (Main.tile[myX, myY].type == 132 || Main.tile[myX, myY].type == 136 || Main.tile[myX, myY].type == 144)
					{
						flag2 = true;
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, null, myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 597)
					{
						flag2 = true;
						this.TryOpeningFullscreenMap();
					}
					else if (Main.tile[myX, myY].type == 441 || Main.tile[myX, myY].type == 468)
					{
						flag2 = true;
						int k;
						for (k = (int)(Main.tile[myX, myY].frameX / 18); k > 1; k -= 2)
						{
						}
						k = myX - k;
						int num9 = myY - (int)(Main.tile[myX, myY].frameY / 18);
						Animation.NewTemporaryAnimation(2, Main.tile[myX, myY].type, k, num9);
						NetMessage.SendTemporaryAnimation(-1, 2, (int)Main.tile[myX, myY].type, k, num9);
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, null, myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 139)
					{
						flag2 = true;
						SoundEngine.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						WorldGen.SwitchMB(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 215)
					{
						flag2 = true;
						SoundEngine.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						int num10 = (int)(Main.tile[myX, myY].frameX % 54 / 18);
						int num11 = (int)(Main.tile[myX, myY].frameY % 36 / 18);
						int num12 = myX - num10;
						int num13 = myY - num11;
						int num14 = 36;
						if (Main.tile[num12, num13].frameY >= 36)
						{
							num14 = -36;
						}
						for (int l = num12; l < num12 + 3; l++)
						{
							for (int m = num13; m < num13 + 2; m++)
							{
								Main.tile[l, m].frameY = (short)((int)Main.tile[l, m].frameY + num14);
							}
						}
						NetMessage.SendTileSquare(-1, num12, num13, 3, 2, TileChangeType.None);
					}
					else if (Main.tile[myX, myY].type == 207)
					{
						flag2 = true;
						SoundEngine.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						WorldGen.SwitchFountain(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 410 || Main.tile[myX, myY].type == 480 || Main.tile[myX, myY].type == 509 || Main.tile[myX, myY].type == 657 || Main.tile[myX, myY].type == 658)
					{
						flag2 = true;
						SoundEngine.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						this.GamepadEnableGrappleCooldown();
						WorldGen.SwitchMonolith(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 455)
					{
						flag2 = true;
						SoundEngine.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						this.GamepadEnableGrappleCooldown();
						BirthdayParty.ToggleManualParty();
					}
					else if (Main.tile[myX, myY].type == 216)
					{
						flag2 = true;
						WorldGen.LaunchRocket(myX, myY, false);
					}
					else if (Main.tile[myX, myY].type == 386 || Main.tile[myX, myY].type == 387)
					{
						flag2 = true;
						bool flag3 = Main.tile[myX, myY].type == 387;
						int num15 = WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) > base.Center.Y, -1).ToInt();
						if (num15 == 0)
						{
							num15 = -WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) <= base.Center.Y, -1).ToInt();
						}
						if (num15 != 0)
						{
							NetMessage.SendData(19, -1, -1, null, 2 + (!flag3).ToInt(), (float)myX, (float)myY, (float)(num15 * Math.Sign((float)(myY * 16) - base.Center.Y)), 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 388 || Main.tile[myX, myY].type == 389)
					{
						flag2 = true;
						bool flag4 = Main.tile[myX, myY].type == 389;
						if (WorldGen.ShiftTallGate(myX, myY, flag4, false))
						{
							NetMessage.SendData(19, -1, -1, null, 4 + flag4.ToInt(), (float)myX, (float)myY, 0f, 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 15 || Main.tile[myX, myY].type == 497)
					{
						if (this.IsWithinSnappngRangeToTile(myX, myY, 40))
						{
							flag2 = true;
							this.GamepadEnableGrappleCooldown();
							this.sitting.SitDown(this, myX, myY);
						}
					}
					else if (Main.tile[myX, myY].type == 89 || Main.tile[myX, myY].type == 102 || Main.tile[myX, myY].type == 487)
					{
						if (this.IsWithinSnappngRangeToTile(myX, myY, 40))
						{
							flag2 = true;
							this.GamepadEnableGrappleCooldown();
							this.sitting.SitDown(this, myX, myY);
						}
					}
					else if (Main.tile[myX, myY].type == 335)
					{
						flag2 = true;
						WorldGen.LaunchRocketSmall(myX, myY, false);
					}
					else if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
					{
						flag2 = true;
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, null, myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 494)
					{
						flag2 = true;
						for (int n = 0; n < 1000; n++)
						{
							if (ProjectileID.Sets.IsAGolfBall[Main.projectile[n].type] && Main.projectile[n].owner == this.whoAmI)
							{
								Main.projectile[n].Kill();
							}
						}
						int type2;
						this.GetPreferredGolfBallToUse(out type2);
						Projectile.NewProjectile(this.GetProjectileSource_TileInteraction(myX, myY), (float)(myX * 16) + 8.5f, (float)(myY * 16 + 6), 0f, 0f, type2, 0, 0f, this.whoAmI, 0f, -1f, 0f);
					}
					else if (Main.tile[myX, myY].type == 338)
					{
						flag2 = true;
						int num16 = myY;
						if (Main.tile[myX, num16].frameY == 18)
						{
							num16--;
						}
						bool flag5 = false;
						for (int num17 = 0; num17 < 1000; num17++)
						{
							if (Main.projectile[num17].active && Main.projectile[num17].aiStyle == 73 && Main.projectile[num17].ai[0] == (float)myX && Main.projectile[num17].ai[1] == (float)num16)
							{
								flag5 = true;
								break;
							}
						}
						if (!flag5)
						{
							int num18 = Projectile.NewProjectile(this.GetProjectileSource_TileInteraction(myX, num16), (float)(myX * 16 + 8), (float)(num16 * 16 + 2), 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, this.whoAmI, (float)myX, (float)num16, 0f);
							Main.projectile[num18].originatedFromActivableTile = true;
						}
					}
					else if (Main.tile[myX, myY].type == 33 || Main.tile[myX, myY].type == 49 || Main.tile[myX, myY].type == 372 || Main.tile[myX, myY].type == 174 || Main.tile[myX, myY].type == 646)
					{
						short num19 = 18;
						Tile tile = Main.tile[myX, myY];
						if (tile.frameX > 0)
						{
							num19 = -18;
						}
						tile.frameX += num19;
						NetMessage.SendTileSquare(-1, myX, myY, TileChangeType.None);
						flag2 = true;
						this.GamepadEnableGrappleCooldown();
					}
					else if (Main.tile[myX, myY].type == 4 || Main.tile[myX, myY].type == 13 || (Main.tile[myX, myY].type == 50 && Main.tile[myX, myY].frameX == 90))
					{
						WorldGen.KillTile(myX, myY, false, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)myX, (float)myY, 0f, 0, 0, 0);
						}
						flag2 = true;
						this.GamepadEnableGrappleCooldown();
					}
					else if (Main.tile[myX, myY].type == 466)
					{
						flag2 = true;
						this.GamepadEnableGrappleCooldown();
						int num20 = myY;
						Tile tileSafely = Framing.GetTileSafely(myX, myY);
						if (tileSafely.frameY == 0)
						{
							num20 += 3;
						}
						if (tileSafely.frameY == 18)
						{
							num20 += 2;
						}
						if (tileSafely.frameY == 36)
						{
							num20++;
						}
						if (DD2Event.Ongoing)
						{
							DD2Event.RequestToSkipWaitTime(myX, myY);
						}
						else
						{
							bool flag6 = !DD2Event.Ongoing && !NPC.AnyNPCs(548) && !Main.pumpkinMoon && !Main.snowMoon;
							if (flag6)
							{
								flag6 = this.HasItem(3828);
							}
							if (flag6)
							{
								flag6 = !DD2Event.WouldFailSpawningHere(myX, num20);
								if (!flag6)
								{
									DD2Event.FailureMessage(-1);
								}
							}
							if (flag6)
							{
								flag6 = this.ConsumeItem(3828, true, false);
							}
							if (flag6)
							{
								DD2Event.SummonCrystal(myX, num20, this.whoAmI);
							}
						}
					}
					else if (Main.tile[myX, myY].type == 334)
					{
						flag2 = true;
						if (this.ItemFitsWeaponRack(this.inventory[this.selectedItem]))
						{
							this.GamepadEnableGrappleCooldown();
							this.PlaceWeapon(myX, myY);
						}
						else
						{
							int num21 = myX;
							int num22 = myY;
							if (Main.tile[myX, myY].frameY == 0)
							{
								num22++;
							}
							if (Main.tile[myX, myY].frameY == 36)
							{
								num22--;
							}
							int frameX = (int)Main.tile[myX, num22].frameX;
							int num23 = (int)Main.tile[myX, num22].frameX;
							int num24 = 0;
							while (num23 >= 5000)
							{
								num23 -= 5000;
								num24++;
							}
							if (num24 != 0)
							{
								num23 = (num24 - 1) * 18;
							}
							num23 %= 54;
							if (num23 == 18)
							{
								frameX = (int)Main.tile[myX - 1, num22].frameX;
								num21--;
							}
							if (num23 == 36)
							{
								frameX = (int)Main.tile[myX - 2, num22].frameX;
								num21 -= 2;
							}
							if (frameX >= 5000)
							{
								this.GamepadEnableGrappleCooldown();
								WorldGen.KillTile(myX, num22, true, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 0, (float)myX, (float)num22, 1f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 440)
					{
						flag2 = true;
						int num25 = (int)(Main.tile[myX, myY].frameX / 54);
						int num26 = (int)(Main.tile[myX, myY].frameY / 54);
						short num27 = Main.tile[myX, myY].frameX % 54 / 18;
						short num28 = Main.tile[myX, myY].frameY % 54 / 18;
						int num29 = -1;
						switch (num25)
						{
						case 0:
							num29 = 1526;
							break;
						case 1:
							num29 = 1524;
							break;
						case 2:
							num29 = 1525;
							break;
						case 3:
							num29 = 1523;
							break;
						case 4:
							num29 = 1522;
							break;
						case 5:
							num29 = 1527;
							break;
						case 6:
							num29 = 3643;
							break;
						}
						if (num29 != -1)
						{
							if (num26 == 0 && this.HasItem(num29) && this.selectedItem != 58)
							{
								this.GamepadEnableGrappleCooldown();
								if (Main.netMode != 1)
								{
									this.ConsumeItem(num29, false, false);
									WorldGen.ToggleGemLock(myX, myY, true);
								}
								else
								{
									this.ConsumeItem(num29, false, false);
									NetMessage.SendData(105, -1, -1, null, myX, (float)myY, 1f, 0f, 0, 0, 0);
								}
							}
							else if (num26 == 1)
							{
								this.GamepadEnableGrappleCooldown();
								if (Main.netMode != 1)
								{
									WorldGen.ToggleGemLock(myX, myY, false);
								}
								else
								{
									NetMessage.SendData(105, -1, -1, null, myX, (float)myY, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 395)
					{
						flag2 = true;
						TEItemFrame.OnPlayerInteraction(this, myX, myY);
					}
					else if (Main.tile[myX, myY].type == 520)
					{
						flag2 = true;
						TEFoodPlatter.OnPlayerInteraction(this, myX, myY);
					}
					else if (Main.tile[myX, myY].type == 471)
					{
						flag2 = true;
						TEWeaponsRack.OnPlayerInteraction(this, myX, myY);
					}
					else if (Main.tile[myX, myY].type == 470)
					{
						flag2 = true;
						TEDisplayDoll.OnPlayerInteraction(this, myX, myY);
					}
					else if (Main.tile[myX, myY].type == 475)
					{
						flag2 = true;
						TEHatRack.OnPlayerInteraction(this, myX, myY);
					}
					else if (Main.tile[myX, myY].type == 125)
					{
						flag2 = true;
						this.AddBuff(29, 108000, true, false);
						SoundEngine.PlaySound(SoundID.Item4, this.position);
					}
					else if (Main.tile[myX, myY].type == 621)
					{
						flag2 = true;
						this.AddBuff(192, 7200, true, false);
						SoundEngine.PlaySound(SoundID.Item2, this.position);
					}
					else if (Main.tile[myX, myY].type == 464)
					{
						flag2 = true;
						this.AddBuff(348, 108000, true, false);
						SoundEngine.PlaySound(SoundID.Item4, this.position);
					}
					else if (Main.tile[myX, myY].type == 377)
					{
						flag2 = true;
						this.AddBuff(159, 108000, true, false);
						SoundEngine.PlaySound(SoundID.Item37, this.position);
					}
					else if (Main.tile[myX, myY].type == 354)
					{
						flag2 = true;
						this.AddBuff(150, 108000, true, false);
						SoundEngine.PlaySound(SoundID.Item4, this.position);
					}
					else if (Main.tile[myX, myY].type == 287)
					{
						flag2 = true;
						this.AddBuff(93, 108000, true, false);
						SoundEngine.PlaySound(SoundID.Item149, this.position);
					}
					else if (Main.tile[myX, myY].type == 356)
					{
						flag2 = true;
						if (!Main.fastForwardTimeToDawn && (Main.netMode == 1 || Main.sundialCooldown == 0))
						{
							Main.Sundialing();
							SoundEngine.PlaySound(SoundID.Item4, this.position);
						}
					}
					else if (Main.tile[myX, myY].type == 663)
					{
						flag2 = true;
						if (!Main.fastForwardTimeToDusk && (Main.netMode == 1 || Main.moondialCooldown == 0))
						{
							Main.Moondialing();
							SoundEngine.PlaySound(SoundID.Item4, this.position);
						}
					}
					else if (Main.tile[myX, myY].type == 79)
					{
						flag2 = true;
						int num30 = myX + (int)(Main.tile[myX, myY].frameX / 18 * -1);
						if (Main.tile[myX, myY].frameX >= 72)
						{
							num30 += 4;
							num30++;
						}
						else
						{
							num30 += 2;
						}
						int num31 = (int)(Main.tile[myX, myY].frameY / 18);
						int num32 = 0;
						while (num31 > 1)
						{
							num31 -= 2;
							num32++;
						}
						int num33 = myY - num31;
						num33 += 2;
						if (!Player.IsHoveringOverABottomSideOfABed(myX, myY))
						{
							if (this.IsWithinSnappngRangeToTile(myX, myY, 96))
							{
								flag2 = true;
								this.GamepadEnableGrappleCooldown();
								this.sleeping.StartSleeping(this, myX, myY);
							}
						}
						else
						{
							this.FindSpawn();
							if (this.SpawnX == num30 && this.SpawnY == num33)
							{
								this.RemoveSpawn();
								Main.NewText(Language.GetTextValue("Game.SpawnPointRemoved"), byte.MaxValue, 240, 20);
							}
							else if (Player.CheckSpawn(num30, num33))
							{
								this.ChangeSpawn(num30, num33);
								Main.NewText(Language.GetTextValue("Game.SpawnPointSet"), byte.MaxValue, 240, 20);
							}
						}
					}
					else if (Main.tileSign[(int)Main.tile[myX, myY].type])
					{
						flag2 = true;
						bool flag7 = true;
						if (this.sign >= 0 && Sign.ReadSign(myX, myY, false) == this.sign)
						{
							this.sign = -1;
							Main.npcChatText = "";
							Main.editSign = false;
							SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							flag7 = false;
						}
						if (flag7)
						{
							if (Main.netMode == 0)
							{
								this.SetTalkNPC(-1, false);
								Main.npcChatCornerItem = 0;
								Main.playerInventory = false;
								Main.editSign = false;
								int num34 = Sign.ReadSign(myX, myY, true);
								if (num34 < 0)
								{
									return;
								}
								SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
								this.sign = num34;
								Main.npcChatText = Main.sign[num34].text;
							}
							else
							{
								int num35 = (int)(Main.tile[myX, myY].frameX / 18);
								int num36 = (int)(Main.tile[myX, myY].frameY / 18);
								while (num35 > 1)
								{
									num35 -= 2;
								}
								int num37 = myX - num35;
								int num38 = myY - num36;
								if (Main.tileSign[(int)Main.tile[num37, num38].type])
								{
									NetMessage.SendData(46, -1, -1, null, num37, (float)num38, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 104)
					{
						flag2 = true;
						string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
						double num39 = Main.time;
						if (!Main.dayTime)
						{
							num39 += 54000.0;
						}
						num39 = num39 / 86400.0 * 24.0;
						double num40 = 7.5;
						num39 = num39 - num40 - 12.0;
						if (num39 < 0.0)
						{
							num39 += 24.0;
						}
						if (num39 >= 12.0)
						{
							textValue = Language.GetTextValue("GameUI.TimePastMorning");
						}
						int num41 = (int)num39;
						double num42 = (double)((int)((num39 - (double)num41) * 60.0));
						string text = string.Concat(num42);
						if (num42 < 10.0)
						{
							text = "0" + text;
						}
						if (num41 > 12)
						{
							num41 -= 12;
						}
						if (num41 == 0)
						{
							num41 = 12;
						}
						Main.NewText(Language.GetTextValue("Game.Time", string.Concat(new object[]
						{
							num41,
							":",
							text,
							" ",
							textValue
						})), byte.MaxValue, 240, 20);
					}
					else if (Main.tile[myX, myY].type == 237)
					{
						flag2 = true;
						bool flag8 = false;
						if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss)
						{
							for (int num43 = 0; num43 < 58; num43++)
							{
								if (this.inventory[num43].type == 1293)
								{
									this.inventory[num43].stack--;
									if (this.inventory[num43].stack <= 0)
									{
										this.inventory[num43].SetDefaults(0);
									}
									flag8 = true;
									break;
								}
							}
						}
						if (flag8)
						{
							SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(this.whoAmI, 245);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, null, this.whoAmI, 245f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (Main.tile[myX, myY].type == 10)
					{
						flag2 = true;
						if (WorldGen.IsLockedDoor(myX, myY))
						{
							int num44 = 1141;
							bool flag9 = false;
							for (int num45 = 0; num45 < 58; num45++)
							{
								if (this.inventory[num45].type == num44 && this.inventory[num45].stack > 0)
								{
									flag9 = true;
									this.inventory[num45].stack--;
									if (this.inventory[num45].stack <= 0)
									{
										this.inventory[num45] = new Item();
									}
									WorldGen.UnlockDoor(myX, myY);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(52, -1, -1, null, this.whoAmI, 2f, (float)myX, (float)myY, 0, 0, 0);
									}
								}
							}
							if (!flag9 && this.useVoidBag())
							{
								for (int num46 = 0; num46 < 40; num46++)
								{
									if (this.bank4.item[num46].type == num44 && this.bank4.item[num46].stack > 0)
									{
										this.bank4.item[num46].stack--;
										if (this.bank4.item[num46].stack <= 0)
										{
											this.bank4.item[num46] = new Item();
										}
										WorldGen.UnlockDoor(myX, myY);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(52, -1, -1, null, this.whoAmI, 2f, (float)myX, (float)myY, 0, 0, 0);
										}
									}
								}
							}
						}
						else
						{
							WorldGen.OpenDoor(myX, myY, this.direction);
							if (Main.tile[myX, myY].type != 10)
							{
								NetMessage.SendData(19, -1, -1, null, 0, (float)myX, (float)myY, (float)this.direction, 0, 0, 0);
							}
							else
							{
								WorldGen.OpenDoor(myX, myY, -this.direction);
								if (Main.tile[myX, myY].type != 10)
								{
									NetMessage.SendData(19, -1, -1, null, 0, (float)myX, (float)myY, (float)(-(float)this.direction), 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 11)
					{
						flag2 = true;
						if (WorldGen.CloseDoor(myX, myY, false))
						{
							NetMessage.SendData(19, -1, -1, null, 1, (float)myX, (float)myY, (float)this.direction, 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 88)
					{
						flag2 = true;
						int num47 = (int)(Main.tile[myX, myY].frameX / 18);
						num47 %= 3;
						num47 = myX - num47;
						int num48 = myY - (int)(Main.tile[myX, myY].frameY / 18);
						if (Main.tile[myX, myY].frameY == 0)
						{
							Main.CancelClothesWindow(true);
							Main.mouseRightRelease = false;
							this.CloseSign();
							this.SetTalkNPC(-1, false);
							Main.npcChatCornerItem = 0;
							Main.npcChatText = "";
							if (Main.editChest)
							{
								SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.editChest = false;
								Main.npcChatText = string.Empty;
							}
							if (this.editedChestName)
							{
								NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[this.chest].name), this.chest, 1f, 0f, 0f, 0, 0, 0);
								this.editedChestName = false;
							}
							if (Main.netMode == 1)
							{
								if (num47 == this.chestX && num48 == this.chestY && this.chest != -1)
								{
									this.chest = -1;
									Recipe.FindRecipes(false);
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								}
								else
								{
									NetMessage.SendData(31, -1, -1, null, num47, (float)num48, 0f, 0f, 0, 0, 0);
									Main.stackSplit = 600;
								}
							}
							else
							{
								this.piggyBankProjTracker.Clear();
								this.voidLensChest.Clear();
								int num49 = Chest.FindChest(num47, num48);
								if (num49 != -1)
								{
									Main.stackSplit = 600;
									if (num49 == this.chest)
									{
										this.chest = -1;
										Recipe.FindRecipes(false);
										SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
									}
									else if (num49 != this.chest && this.chest == -1)
									{
										this.OpenChest(num47, num48, num49);
										SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
									}
									else
									{
										this.OpenChest(num47, num48, num49);
										SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
									}
									Recipe.FindRecipes(false);
								}
							}
						}
						else
						{
							Main.playerInventory = false;
							this.chest = -1;
							Recipe.FindRecipes(false);
							this.SetTalkNPC(-1, false);
							Main.npcChatCornerItem = 0;
							Main.npcChatText = "";
							Main.interactedDresserTopLeftX = num47;
							Main.interactedDresserTopLeftY = num48;
							Main.OpenClothesWindow();
						}
					}
					else if (Main.tile[myX, myY].type == 209)
					{
						flag2 = true;
						Tile tile2 = Main.tile[myX, myY];
						int num50 = (int)(tile2.frameX % 72 / 18);
						int num51 = (int)(tile2.frameY % 54 / 18);
						int num52 = myX - num50;
						int num53 = myY - num51;
						int num54 = (int)(tile2.frameY / 54);
						int num55 = (int)(tile2.frameX / 72);
						int num56 = -1;
						if (num50 == 1 || num50 == 2)
						{
							num56 = num51;
						}
						int num57 = 0;
						if (num50 == 3 || (num50 == 2 && num55 != 3 && num55 != 4))
						{
							num57 = -54;
						}
						if (num50 == 0 || (num50 == 1 && num55 != 3 && num55 != 4))
						{
							num57 = 54;
						}
						if (num54 >= 8 && num57 > 0)
						{
							num57 = 0;
						}
						if (num54 == 0 && num57 < 0)
						{
							num57 = 0;
						}
						bool flag10 = false;
						if (num57 != 0)
						{
							for (int num58 = num52; num58 < num52 + 4; num58++)
							{
								for (int num59 = num53; num59 < num53 + 3; num59++)
								{
									Main.tile[num58, num59].frameY = (short)((int)Main.tile[num58, num59].frameY + num57);
								}
							}
							flag10 = true;
						}
						if ((num55 == 3 || num55 == 4) && (num56 == 1 || num56 == 0))
						{
							num57 = ((num55 == 3) ? 72 : -72);
							for (int num60 = num52; num60 < num52 + 4; num60++)
							{
								for (int num61 = num53; num61 < num53 + 3; num61++)
								{
									Main.tile[num60, num61].frameX = (short)((int)Main.tile[num60, num61].frameX + num57);
								}
							}
							flag10 = true;
						}
						if (flag10)
						{
							NetMessage.SendTileSquare(-1, num52, num53, 4, 3, TileChangeType.None);
						}
						if (num56 != -1)
						{
							bool flag11 = false;
							if ((num55 == 3 || num55 == 4) && num56 == 2)
							{
								flag11 = true;
							}
							if (flag11)
							{
								WorldGen.ShootFromCannon(num52, num53, num54, num55 + 1, 0, 0f, this.whoAmI, false);
							}
						}
					}
					else if (Main.tile[myX, myY].type == 510 || Main.tile[myX, myY].type == 511)
					{
						flag2 = true;
						Tile tile3 = Main.tile[myX, myY];
						int num62 = (int)(tile3.frameX % 36 / 18);
						int num63 = (int)(tile3.frameY % 36 / 18);
						int num64 = myX - num62;
						int num65 = myY - num63;
						int num66 = (int)(tile3.frameY / 36);
						short num67 = tile3.frameX / 36;
						int num68 = 0;
						if (num62 == 0)
						{
							num68 = -36;
						}
						if (num62 == 1)
						{
							num68 = 36;
						}
						if (num66 >= 7 && num68 > 0)
						{
							num68 = -252;
						}
						if (num66 == 0 && num68 < 0)
						{
							num68 = 252;
						}
						bool flag12 = false;
						if (num68 != 0)
						{
							for (int num69 = num64; num69 < num64 + 2; num69++)
							{
								for (int num70 = num65; num70 < num65 + 2; num70++)
								{
									Main.tile[num69, num70].frameY = (short)((int)Main.tile[num69, num70].frameY + num68);
								}
							}
							flag12 = true;
						}
						if (flag12)
						{
							NetMessage.SendTileSquare(-1, num64, num65, 2, 2, TileChangeType.None);
						}
					}
					else if (TileID.Sets.BasicChest[(int)Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463 || Main.tile[myX, myY].type == 491)
					{
						flag2 = true;
						Main.mouseRightRelease = false;
						int num71 = 0;
						int num72;
						for (num72 = (int)(Main.tile[myX, myY].frameX / 18); num72 > 1; num72 -= 2)
						{
						}
						num72 = myX - num72;
						int num73 = myY - (int)(Main.tile[myX, myY].frameY / 18);
						if (Main.tile[myX, myY].type == 29)
						{
							num71 = 1;
						}
						else if (Main.tile[myX, myY].type == 97)
						{
							num71 = 2;
						}
						else if (Main.tile[myX, myY].type == 463)
						{
							num71 = 3;
							if (Main.tile[myX, myY].frameX == 36)
							{
								num72--;
							}
							else
							{
								num72++;
							}
							num73 += 2;
						}
						else if (Main.tile[myX, myY].type == 491)
						{
							num71 = 4;
							if (Main.tile[myX, myY].frameX == 36)
							{
								num72--;
							}
							else
							{
								num72++;
							}
							num73 += 2;
						}
						this.CloseSign();
						this.SetTalkNPC(-1, false);
						Main.npcChatCornerItem = 0;
						Main.npcChatText = "";
						if (Main.editChest)
						{
							SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.editChest = false;
							Main.npcChatText = string.Empty;
						}
						if (this.editedChestName)
						{
							NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[this.chest].name), this.chest, 1f, 0f, 0f, 0, 0, 0);
							this.editedChestName = false;
						}
						bool flag13 = Chest.IsLocked(Main.tile[num72, num73]);
						if (Main.netMode == 1 && num71 == 0 && !flag13)
						{
							if (num72 == this.chestX && num73 == this.chestY && this.chest != -1)
							{
								this.chest = -1;
								Recipe.FindRecipes(false);
								SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else
							{
								if (WorldGen.IsChestRigged(num72, num73))
								{
									this._framesLeftEligibleForDeadmansChestDeathAchievement = 600;
								}
								NetMessage.SendData(31, -1, -1, null, num72, (float)num73, 0f, 0f, 0, 0, 0);
								Main.stackSplit = 600;
							}
						}
						else
						{
							int num74 = -1;
							if (num71 == 1)
							{
								num74 = -2;
							}
							else if (num71 == 2)
							{
								num74 = -3;
							}
							else if (num71 == 3)
							{
								num74 = -4;
							}
							else if (num71 == 4)
							{
								if (this.disableVoidBag < 0)
								{
									num74 = -5;
								}
							}
							else
							{
								bool flag14 = false;
								if (Chest.IsLocked(num72, num73))
								{
									int type3 = (int)Main.tile[num72, num73].type;
									int num75 = 327;
									if (type3 == 21)
									{
										if (Main.tile[num72, num73].frameX >= 144 && Main.tile[num72, num73].frameX <= 178)
										{
											num75 = 329;
										}
										if (Main.tile[num72, num73].frameX >= 828 && Main.tile[num72, num73].frameX <= 1006)
										{
											int num76 = (int)(Main.tile[num72, num73].frameX / 18);
											int num77 = 0;
											while (num76 >= 2)
											{
												num76 -= 2;
												num77++;
											}
											num77 -= 23;
											num75 = 1533 + num77;
										}
									}
									else if (type3 == 467)
									{
										int num78 = (int)(Main.tile[num72, num73].frameX / 36);
										if (num78 == 13)
										{
											num75 = 4714;
										}
									}
									flag14 = true;
									bool flag15 = false;
									bool flag16 = num75 != 329;
									for (int num79 = 0; num79 < 58; num79++)
									{
										if (this.inventory[num79].type == num75 && this.inventory[num79].stack > 0 && Chest.Unlock(num72, num73))
										{
											flag15 = true;
											if (flag16)
											{
												this.inventory[num79].stack--;
												if (this.inventory[num79].stack <= 0)
												{
													this.inventory[num79] = new Item();
												}
											}
											if (Main.netMode == 1)
											{
												NetMessage.SendData(52, -1, -1, null, this.whoAmI, 1f, (float)num72, (float)num73, 0, 0, 0);
											}
										}
									}
									if (!flag15 && this.useVoidBag())
									{
										for (int num80 = 0; num80 < 40; num80++)
										{
											if (this.bank4.item[num80].type == num75 && this.bank4.item[num80].stack > 0 && Chest.Unlock(num72, num73))
											{
												if (num75 != 329)
												{
													this.bank4.item[num80].stack--;
													if (this.bank4.item[num80].stack <= 0)
													{
														this.bank4.item[num80] = new Item();
													}
												}
												if (Main.netMode == 1)
												{
													NetMessage.SendData(52, -1, -1, null, this.whoAmI, 1f, (float)num72, (float)num73, 0, 0, 0);
												}
											}
										}
									}
								}
								if (!flag14)
								{
									num74 = Chest.FindChest(num72, num73);
								}
							}
							if (num74 != -1)
							{
								Main.stackSplit = 600;
								bool flag17 = WorldGen.IsChestRigged(num72, num73);
								if (num74 == this.chest)
								{
									this.chest = -1;
									SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
								}
								else if (num74 != this.chest && this.chest == -1)
								{
									this.OpenChest(num72, num73, num74);
									SoundEngine.PlaySound(10, -1, -1, 1, 1f, 0f);
									if (Main.tile[num72, num73].frameX >= 36 && Main.tile[num72, num73].frameX < 72)
									{
										AchievementsHelper.HandleSpecialEvent(this, 16);
									}
								}
								else
								{
									this.OpenChest(num72, num73, num74);
									SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								if (flag17)
								{
									Wiring.HitSwitch(myX, myY);
									NetMessage.SendData(59, -1, -1, null, myX, (float)myY, 0f, 0f, 0, 0, 0);
									this._framesLeftEligibleForDeadmansChestDeathAchievement = 600;
								}
								Recipe.FindRecipes(false);
							}
						}
					}
					else if (Main.tile[myX, myY].type == 314 && this.gravDir == 1f)
					{
						flag2 = true;
						bool flag18 = true;
						if (this.mount.Active)
						{
							if (this.mount.Cart)
							{
								flag18 = false;
							}
							else
							{
								this.mount.Dismount(this);
							}
						}
						if (flag18)
						{
							this.LaunchMinecartHook(myX, myY);
						}
					}
				}
				if (flag2)
				{
					this.tileInteractionHappened = true;
				}
			}
		}

		// Token: 0x0600080F RID: 2063 RVA: 0x002FE658 File Offset: 0x002FC858
		private static bool IsHoveringOverABottomSideOfABed(int myX, int myY)
		{
			short frameX = Main.tile[myX, myY].frameX;
			bool flag = frameX / 72 == 1;
			bool flag2 = frameX % 72 < 36;
			if (flag)
			{
				flag2 = !flag2;
			}
			return flag2;
		}

		// Token: 0x06000810 RID: 2064 RVA: 0x002FE690 File Offset: 0x002FC890
		public void PetAnimal(int animalNpcIndex)
		{
			int dir;
			Vector2 vector;
			bool flag;
			this.GetPettingInfo(animalNpcIndex, out dir, out vector, out flag);
			vector = vector.Floor();
			Vector2 offset = vector - base.Bottom;
			bool flag2 = this.CanSnapToPosition(offset);
			if (flag2 && !WorldGen.SolidTileAllowBottomSlope((int)vector.X / 16, (int)vector.Y / 16))
			{
				flag2 = false;
			}
			if (flag2)
			{
				if (this.isPettingAnimal && base.Bottom == vector)
				{
					this.StopPettingAnimal();
					return;
				}
				this.StopVanityActions(true);
				this.RemoveAllGrapplingHooks();
				if (this.mount.Active)
				{
					this.mount.Dismount(this);
				}
				base.Bottom = vector;
				this.ChangeDir(dir);
				this.isPettingAnimal = true;
				this.isTheAnimalBeingPetSmall = flag;
				this.velocity = Vector2.Zero;
				this.gravDir = 1f;
				if (this.whoAmI == Main.myPlayer)
				{
					AchievementsHelper.HandleSpecialEvent(this, 21);
				}
			}
		}

		// Token: 0x06000811 RID: 2065 RVA: 0x002FE77C File Offset: 0x002FC97C
		private void GetPettingInfo(int animalNpcIndex, out int targetDirection, out Vector2 playerPositionWhenPetting, out bool isPetSmall)
		{
			NPC npc = Main.npc[animalNpcIndex];
			targetDirection = ((npc.Center.X > base.Center.X) ? 1 : -1);
			int num = 36;
			isPetSmall = false;
			int type = npc.type;
			if (type != 637)
			{
				if (type != 656)
				{
					switch (type)
					{
					case 670:
					case 678:
					case 679:
					case 680:
					case 681:
					case 683:
						isPetSmall = true;
						num = 26;
						break;
					case 682:
						isPetSmall = true;
						num = 22;
						break;
					case 684:
						isPetSmall = true;
						num = 20;
						break;
					}
				}
				else
				{
					isPetSmall = true;
					num = 24;
				}
			}
			else
			{
				isPetSmall = true;
				num = 28;
			}
			playerPositionWhenPetting = npc.Bottom + new Vector2((float)(-(float)targetDirection * num), 0f);
		}

		// Token: 0x06000812 RID: 2066 RVA: 0x002FE864 File Offset: 0x002FCA64
		public bool CanSnapToPosition(Vector2 offset)
		{
			if (Collision.SolidCollision(this.position + offset, this.width, this.height))
			{
				return false;
			}
			bool flag = Collision.CanHit(this.position, this.width, this.height, this.position + offset, this.width, this.height);
			if (!flag)
			{
				this.TryAllowingSnappingToPosition(ref flag, this.position, this.position + offset);
				if (!flag)
				{
					int num = Math.Sign(offset.X);
					if (num != 0)
					{
						Vector2 vector = new Vector2((float)(num * this.width), 0f);
						if (Collision.TileCollision(this.position, vector, this.width, this.height, true, true, (int)this.gravDir) == vector)
						{
							this.TryAllowingSnappingToPosition(ref flag, this.position + vector, this.position + offset);
						}
					}
				}
			}
			return flag;
		}

		// Token: 0x06000813 RID: 2067 RVA: 0x002FE958 File Offset: 0x002FCB58
		private void TryAllowingSnappingToPosition(ref bool canSnapToPosition, Vector2 pos1, Vector2 pos2)
		{
			Vector2 value = new Vector2((float)(this.width - 2), 0f);
			canSnapToPosition = Collision.CanHit(pos1 + value, 2, this.height, pos2, 2, this.height);
			if (!canSnapToPosition)
			{
				canSnapToPosition = Collision.CanHit(pos1 + value, 2, this.height, pos2 + value, 2, this.height);
			}
			if (!canSnapToPosition)
			{
				canSnapToPosition = Collision.CanHit(pos1, 2, this.height, pos2, 2, this.height);
			}
			if (!canSnapToPosition)
			{
				canSnapToPosition = Collision.CanHit(pos1, 2, this.height, pos2 + value, 2, this.height);
			}
		}

		// Token: 0x06000814 RID: 2068 RVA: 0x002FE9FA File Offset: 0x002FCBFA
		public void StopVanityActions(bool multiplayerBroadcast = true)
		{
			this.StopPettingAnimal();
			this.sitting.SitUp(this, multiplayerBroadcast);
			this.sleeping.StopSleeping(this, multiplayerBroadcast);
		}

		// Token: 0x06000815 RID: 2069 RVA: 0x002FEA1C File Offset: 0x002FCC1C
		private void StopPettingAnimal()
		{
			this.isPettingAnimal = false;
			this.isTheAnimalBeingPetSmall = false;
		}

		// Token: 0x06000816 RID: 2070 RVA: 0x002FEA2C File Offset: 0x002FCC2C
		private void UpdatePettingAnimal()
		{
			if (!this.isPettingAnimal)
			{
				return;
			}
			if (this.talkNPC == -1)
			{
				this.StopPettingAnimal();
				return;
			}
			int num = Math.Sign(Main.npc[this.talkNPC].Center.X - base.Center.X);
			if (this.controlLeft || this.controlRight || this.controlUp || this.controlDown || this.controlJump || this.pulley || this.mount.Active || num != this.direction)
			{
				this.StopPettingAnimal();
				return;
			}
			int num2;
			Vector2 target;
			bool flag;
			this.GetPettingInfo(this.talkNPC, out num2, out target, out flag);
			if (base.Bottom.Distance(target) > 2f)
			{
				this.StopPettingAnimal();
				return;
			}
		}

		// Token: 0x06000817 RID: 2071 RVA: 0x002FEAF4 File Offset: 0x002FCCF4
		private void OpenChest(int x, int y, int newChest)
		{
			if (this.chest != -1 && Main.myPlayer == this.whoAmI)
			{
				for (int i = 0; i < 40; i++)
				{
					ItemSlot.SetGlow(i, -1f, true);
				}
			}
			this.chest = newChest;
			Main.playerInventory = true;
			UILinkPointNavigator.ForceMovementCooldown(120);
			if (PlayerInput.GrappleAndInteractAreShared)
			{
				PlayerInput.Triggers.JustPressed.Grapple = false;
			}
			Main.recBigList = false;
			this.chestX = x;
			this.chestY = y;
		}

		// Token: 0x06000818 RID: 2072 RVA: 0x002FEB6F File Offset: 0x002FCD6F
		public void CloseSign()
		{
			if (this.sign > -1)
			{
				SoundEngine.PlaySound(11, -1, -1, 1, 1f, 0f);
				this.sign = -1;
				Main.editSign = false;
				Main.npcChatText = string.Empty;
			}
		}

		// Token: 0x06000819 RID: 2073 RVA: 0x002FEBA8 File Offset: 0x002FCDA8
		private void LaunchMinecartHook(int myX, int myY)
		{
			Vector2 vector = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
			vector = new Vector2((float)(myX * 16 + 8), (float)(myY * 16 + 8));
			if (this.direction > 0)
			{
				this.minecartLeft = false;
			}
			else
			{
				this.minecartLeft = true;
			}
			this.RemoveAllGrapplingHooks();
			Projectile.NewProjectile(this.GetProjectileSource_TileInteraction(myX, myY), vector.X, vector.Y, 0f, 0f, 403, 0, 0f, this.whoAmI, 0f, 0f, 0f);
			this.releaseHook = false;
		}

		// Token: 0x0600081A RID: 2074 RVA: 0x002FEC60 File Offset: 0x002FCE60
		public void RemoveAllGrapplingHooks()
		{
			this.ClearGrapplingBlacklist();
			this.grappling[0] = -1;
			this.grapCount = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].aiStyle == 7)
				{
					Main.projectile[i].Kill();
				}
			}
		}

		// Token: 0x0600081B RID: 2075 RVA: 0x002FECD0 File Offset: 0x002FCED0
		public void RemoveAllFishingBobbers()
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].bobber)
				{
					Main.projectile[i].Kill();
				}
			}
		}

		// Token: 0x0600081C RID: 2076 RVA: 0x002FED2C File Offset: 0x002FCF2C
		private void TileInteractionsMouseOver(int myX, int myY)
		{
			if (myX != Player.tileTargetX || myY != Player.tileTargetY)
			{
				return;
			}
			if (Main.tile[myX, myY].type == 79)
			{
				if (!Player.IsHoveringOverABottomSideOfABed(myX, myY))
				{
					if (this.IsWithinSnappngRangeToTile(myX, myY, 96))
					{
						this.noThrow = 2;
						this.cursorItemIconEnabled = true;
						this.cursorItemIconID = 5013;
					}
				}
				else
				{
					this.noThrow = 2;
					this.cursorItemIconEnabled = true;
					int num = (int)(Main.tile[myX, myY].frameY / 36);
					if (num == 0)
					{
						this.cursorItemIconID = 224;
					}
					else if (num == 1)
					{
						this.cursorItemIconID = 644;
					}
					else if (num == 2)
					{
						this.cursorItemIconID = 645;
					}
					else if (num == 3)
					{
						this.cursorItemIconID = 646;
					}
					else if (num == 4)
					{
						this.cursorItemIconID = 920;
					}
					else if (num == 5)
					{
						this.cursorItemIconID = 1470;
					}
					else if (num == 6)
					{
						this.cursorItemIconID = 1471;
					}
					else if (num == 7)
					{
						this.cursorItemIconID = 1472;
					}
					else if (num == 8)
					{
						this.cursorItemIconID = 1473;
					}
					else if (num == 9)
					{
						this.cursorItemIconID = 1719;
					}
					else if (num == 10)
					{
						this.cursorItemIconID = 1720;
					}
					else if (num == 11)
					{
						this.cursorItemIconID = 1721;
					}
					else if (num == 12)
					{
						this.cursorItemIconID = 1722;
					}
					else if (num >= 13 && num <= 18)
					{
						this.cursorItemIconID = 2066 + num - 13;
					}
					else if (num >= 19 && num <= 20)
					{
						this.cursorItemIconID = 2139 + num - 19;
					}
					else if (num == 21)
					{
						this.cursorItemIconID = 2231;
					}
					else if (num == 22)
					{
						this.cursorItemIconID = 2520;
					}
					else if (num == 23)
					{
						this.cursorItemIconID = 2538;
					}
					else if (num == 24)
					{
						this.cursorItemIconID = 2553;
					}
					else if (num == 25)
					{
						this.cursorItemIconID = 2568;
					}
					else if (num == 26)
					{
						this.cursorItemIconID = 2669;
					}
					else if (num == 27)
					{
						this.cursorItemIconID = 2811;
					}
					else if (num == 28)
					{
						this.cursorItemIconID = 3162;
					}
					else if (num == 29)
					{
						this.cursorItemIconID = 3164;
					}
					else if (num == 30)
					{
						this.cursorItemIconID = 3163;
					}
					else if (num == 31)
					{
						this.cursorItemIconID = 3897;
					}
					else if (num == 32)
					{
						this.cursorItemIconID = 3932;
					}
					else if (num == 33)
					{
						this.cursorItemIconID = 3959;
					}
					else if (num == 34)
					{
						this.cursorItemIconID = 4146;
					}
					else if (num == 35)
					{
						this.cursorItemIconID = 4167;
					}
					else if (num == 36)
					{
						this.cursorItemIconID = 4188;
					}
					else if (num == 37)
					{
						this.cursorItemIconID = 4209;
					}
					else if (num == 38)
					{
						this.cursorItemIconID = 4299;
					}
					else if (num == 39)
					{
						this.cursorItemIconID = 4567;
					}
					else if (num == 40)
					{
						this.cursorItemIconID = 5149;
					}
					else if (num == 41)
					{
						this.cursorItemIconID = 5170;
					}
					else if (num == 42)
					{
						this.cursorItemIconID = 5191;
					}
					else
					{
						this.cursorItemIconID = 646;
					}
				}
			}
			if (Main.tile[myX, myY].type == 597)
			{
				int pylonStyleFromTile = TETeleportationPylon.GetPylonStyleFromTile(Main.tile[myX, myY]);
				int pylonItemTypeFromTileStyle = TETeleportationPylon.GetPylonItemTypeFromTileStyle(pylonStyleFromTile);
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = pylonItemTypeFromTileStyle;
				if (pylonStyleFromTile == 1)
				{
					this.cursorItemIconID = 4875;
				}
				if (pylonStyleFromTile == 2)
				{
					this.cursorItemIconID = 4916;
				}
				if (pylonStyleFromTile == 3)
				{
					this.cursorItemIconID = 4917;
				}
				if (pylonStyleFromTile == 4)
				{
					this.cursorItemIconID = 4918;
				}
				if (pylonStyleFromTile == 5)
				{
					this.cursorItemIconID = 4919;
				}
				if (pylonStyleFromTile == 6)
				{
					this.cursorItemIconID = 4920;
				}
				if (pylonStyleFromTile == 7)
				{
					this.cursorItemIconID = 4921;
				}
				if (pylonStyleFromTile == 8)
				{
					this.cursorItemIconID = 4951;
				}
			}
			if (Main.tile[myX, myY].type == 621)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3750;
			}
			if (Main.tile[myX, myY].type == 464)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3814;
			}
			if (Main.tile[myX, myY].type == 33)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 105;
				int num2 = (int)(Main.tile[myX, myY].frameY / 22);
				if (num2 == 1)
				{
					this.cursorItemIconID = 1405;
				}
				if (num2 == 2)
				{
					this.cursorItemIconID = 1406;
				}
				if (num2 == 3)
				{
					this.cursorItemIconID = 1407;
				}
				if (num2 >= 4 && num2 <= 13)
				{
					this.cursorItemIconID = 2045 + num2 - 4;
				}
				if (num2 >= 14 && num2 <= 16)
				{
					this.cursorItemIconID = 2153 + num2 - 14;
				}
				if (num2 == 17)
				{
					this.cursorItemIconID = 2236;
				}
				if (num2 == 18)
				{
					this.cursorItemIconID = 2523;
				}
				if (num2 == 19)
				{
					this.cursorItemIconID = 2542;
				}
				if (num2 == 20)
				{
					this.cursorItemIconID = 2556;
				}
				if (num2 == 21)
				{
					this.cursorItemIconID = 2571;
				}
				if (num2 == 22)
				{
					this.cursorItemIconID = 2648;
				}
				if (num2 == 23)
				{
					this.cursorItemIconID = 2649;
				}
				if (num2 == 24)
				{
					this.cursorItemIconID = 2650;
				}
				if (num2 == 25)
				{
					this.cursorItemIconID = 2651;
				}
				else if (num2 == 26)
				{
					this.cursorItemIconID = 2818;
				}
				else if (num2 == 27)
				{
					this.cursorItemIconID = 3171;
				}
				else if (num2 == 28)
				{
					this.cursorItemIconID = 3173;
				}
				else if (num2 == 29)
				{
					this.cursorItemIconID = 3172;
				}
				else if (num2 == 30)
				{
					this.cursorItemIconID = 3890;
				}
				else if (num2 == 31)
				{
					this.cursorItemIconID = 3936;
				}
				else if (num2 == 32)
				{
					this.cursorItemIconID = 3962;
				}
				else if (num2 == 33)
				{
					this.cursorItemIconID = 4150;
				}
				else if (num2 == 34)
				{
					this.cursorItemIconID = 4171;
				}
				else if (num2 == 35)
				{
					this.cursorItemIconID = 4192;
				}
				else if (num2 == 36)
				{
					this.cursorItemIconID = 4213;
				}
				else if (num2 == 37)
				{
					this.cursorItemIconID = 4303;
				}
				else if (num2 == 38)
				{
					this.cursorItemIconID = 4571;
				}
				else if (num2 == 39)
				{
					this.cursorItemIconID = 5153;
				}
				else if (num2 == 40)
				{
					this.cursorItemIconID = 5174;
				}
				else if (num2 == 41)
				{
					this.cursorItemIconID = 5195;
				}
			}
			if (Main.tile[myX, myY].type == 21)
			{
				this.TileInteractionsMouseOver_Containers(myX, myY);
			}
			if (Main.tile[myX, myY].type == 467)
			{
				this.TileInteractionsMouseOver_Containers(myX, myY);
			}
			if (Main.tile[myX, myY].type == 441)
			{
				Tile tile = Main.tile[myX, myY];
				if (tile.frameX % 36 != 0)
				{
					int num3 = myX - 1;
				}
				if (tile.frameY % 36 != 0)
				{
					int num4 = myY - 1;
				}
				this.cursorItemIconID = -1;
				this.cursorItemIconID = Chest.chestTypeToIcon[(int)(tile.frameX / 36)];
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
			}
			if (Main.tile[myX, myY].type == 468)
			{
				Tile tile2 = Main.tile[myX, myY];
				if (tile2.frameX % 36 != 0)
				{
					int num5 = myX - 1;
				}
				if (tile2.frameY % 36 != 0)
				{
					int num6 = myY - 1;
				}
				this.cursorItemIconID = -1;
				this.cursorItemIconID = Chest.chestTypeToIcon2[(int)(tile2.frameX / 36)];
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
			}
			if (Main.tile[myX, myY].type == 88)
			{
				Tile tile3 = Main.tile[myX, myY];
				int num7 = myY;
				int x = myX - (int)(tile3.frameX % 54 / 18);
				if (tile3.frameY % 36 != 0)
				{
					num7--;
				}
				int num8 = Chest.FindChest(x, num7);
				this.cursorItemIconID = -1;
				if (num8 < 0)
				{
					this.cursorItemIconText = Lang.dresserType[0].Value;
				}
				else
				{
					if (Main.chest[num8].name != "")
					{
						this.cursorItemIconText = Main.chest[num8].name;
					}
					else
					{
						this.cursorItemIconText = Lang.dresserType[(int)(tile3.frameX / 54)].Value;
					}
					if (this.cursorItemIconText == Lang.dresserType[(int)(tile3.frameX / 54)].Value)
					{
						this.cursorItemIconID = Chest.dresserTypeToIcon[(int)(tile3.frameX / 54)];
						this.cursorItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				if (Main.tile[myX, myY].frameY > 0)
				{
					this.cursorItemIconID = 269;
					this.cursorItemIconText = "";
				}
			}
			if (Main.tile[myX, myY].type == 10 || Main.tile[myX, myY].type == 11)
			{
				Tile tile4 = Main.tile[myX, myY];
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int i = (int)tile4.frameY;
				int num9 = 0;
				while (i >= 54)
				{
					i -= 54;
					num9++;
				}
				if (tile4.type == 10)
				{
					num9 += (int)(36 * (tile4.frameX / 54));
				}
				if (tile4.type == 11)
				{
					num9 += (int)(36 * (tile4.frameX / 72));
				}
				if (num9 == 0)
				{
					this.cursorItemIconID = 25;
				}
				else if (num9 == 9)
				{
					this.cursorItemIconID = 837;
				}
				else if (num9 == 10)
				{
					this.cursorItemIconID = 912;
				}
				else if (num9 == 11)
				{
					this.cursorItemIconID = 1141;
				}
				else if (num9 == 12)
				{
					this.cursorItemIconID = 1137;
				}
				else if (num9 == 13)
				{
					this.cursorItemIconID = 1138;
				}
				else if (num9 == 14)
				{
					this.cursorItemIconID = 1139;
				}
				else if (num9 == 15)
				{
					this.cursorItemIconID = 1140;
				}
				else if (num9 == 16)
				{
					this.cursorItemIconID = 1411;
				}
				else if (num9 == 17)
				{
					this.cursorItemIconID = 1412;
				}
				else if (num9 == 18)
				{
					this.cursorItemIconID = 1413;
				}
				else if (num9 == 19)
				{
					this.cursorItemIconID = 1458;
				}
				else if (num9 >= 20 && num9 <= 23)
				{
					this.cursorItemIconID = 1709 + num9 - 20;
				}
				else if (num9 == 24)
				{
					this.cursorItemIconID = 1793;
				}
				else if (num9 == 25)
				{
					this.cursorItemIconID = 1815;
				}
				else if (num9 == 26)
				{
					this.cursorItemIconID = 1924;
				}
				else if (num9 == 27)
				{
					this.cursorItemIconID = 2044;
				}
				else if (num9 == 28)
				{
					this.cursorItemIconID = 2265;
				}
				else if (num9 == 29)
				{
					this.cursorItemIconID = 2528;
				}
				else if (num9 == 30)
				{
					this.cursorItemIconID = 2561;
				}
				else if (num9 == 31)
				{
					this.cursorItemIconID = 2576;
				}
				else if (num9 == 32)
				{
					this.cursorItemIconID = 2815;
				}
				else if (num9 == 33)
				{
					this.cursorItemIconID = 3129;
				}
				else if (num9 == 34)
				{
					this.cursorItemIconID = 3131;
				}
				else if (num9 == 35)
				{
					this.cursorItemIconID = 3130;
				}
				else if (num9 == 36)
				{
					this.cursorItemIconID = 3888;
				}
				else if (num9 == 37)
				{
					this.cursorItemIconID = 3941;
				}
				else if (num9 == 38)
				{
					this.cursorItemIconID = 3967;
				}
				else if (num9 == 39)
				{
					this.cursorItemIconID = 4155;
				}
				else if (num9 == 40)
				{
					this.cursorItemIconID = 4176;
				}
				else if (num9 == 41)
				{
					this.cursorItemIconID = 4197;
				}
				else if (num9 == 42)
				{
					this.cursorItemIconID = 4218;
				}
				else if (num9 == 43)
				{
					this.cursorItemIconID = 4307;
				}
				else if (num9 == 44)
				{
					this.cursorItemIconID = 4415;
				}
				else if (num9 == 45)
				{
					this.cursorItemIconID = 4576;
				}
				else if (num9 == 46)
				{
					this.cursorItemIconID = 5158;
				}
				else if (num9 == 47)
				{
					this.cursorItemIconID = 5179;
				}
				else if (num9 == 48)
				{
					this.cursorItemIconID = 5200;
				}
				else if (num9 >= 4 && num9 <= 8)
				{
					this.cursorItemIconID = 812 + num9;
				}
				else
				{
					this.cursorItemIconID = 649 + num9;
				}
			}
			if (Main.tile[myX, myY].type == 104)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				switch (Main.tile[myX, myY].frameX / 36)
				{
				case 0:
					this.cursorItemIconID = 359;
					break;
				case 1:
					this.cursorItemIconID = 2237;
					break;
				case 2:
					this.cursorItemIconID = 2238;
					break;
				case 3:
					this.cursorItemIconID = 2239;
					break;
				case 4:
					this.cursorItemIconID = 2240;
					break;
				case 5:
					this.cursorItemIconID = 2241;
					break;
				case 6:
					this.cursorItemIconID = 2560;
					break;
				case 7:
					this.cursorItemIconID = 2575;
					break;
				case 8:
					this.cursorItemIconID = 2591;
					break;
				case 9:
					this.cursorItemIconID = 2592;
					break;
				case 10:
					this.cursorItemIconID = 2593;
					break;
				case 11:
					this.cursorItemIconID = 2594;
					break;
				case 12:
					this.cursorItemIconID = 2595;
					break;
				case 13:
					this.cursorItemIconID = 2596;
					break;
				case 14:
					this.cursorItemIconID = 2597;
					break;
				case 15:
					this.cursorItemIconID = 2598;
					break;
				case 16:
					this.cursorItemIconID = 2599;
					break;
				case 17:
					this.cursorItemIconID = 2600;
					break;
				case 18:
					this.cursorItemIconID = 2601;
					break;
				case 19:
					this.cursorItemIconID = 2602;
					break;
				case 20:
					this.cursorItemIconID = 2603;
					break;
				case 21:
					this.cursorItemIconID = 2604;
					break;
				case 22:
					this.cursorItemIconID = 2605;
					break;
				case 23:
					this.cursorItemIconID = 2606;
					break;
				case 24:
					this.cursorItemIconID = 2809;
					break;
				case 25:
					this.cursorItemIconID = 3126;
					break;
				case 26:
					this.cursorItemIconID = 3128;
					break;
				case 27:
					this.cursorItemIconID = 3127;
					break;
				case 28:
					this.cursorItemIconID = 3898;
					break;
				case 29:
					this.cursorItemIconID = 3899;
					break;
				case 30:
					this.cursorItemIconID = 3900;
					break;
				case 31:
					this.cursorItemIconID = 3901;
					break;
				case 32:
					this.cursorItemIconID = 3902;
					break;
				case 33:
					this.cursorItemIconID = 3940;
					break;
				case 34:
					this.cursorItemIconID = 3966;
					break;
				case 35:
					this.cursorItemIconID = 4154;
					break;
				case 36:
					this.cursorItemIconID = 4175;
					break;
				case 37:
					this.cursorItemIconID = 4196;
					break;
				case 38:
					this.cursorItemIconID = 4217;
					break;
				case 39:
					this.cursorItemIconID = 4306;
					break;
				case 40:
					this.cursorItemIconID = 4575;
					break;
				case 41:
					this.cursorItemIconID = 5157;
					break;
				case 42:
					this.cursorItemIconID = 5178;
					break;
				case 43:
					this.cursorItemIconID = 5199;
					break;
				}
			}
			if (Main.tile[myX, myY].type == 356)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3064;
			}
			if (Main.tile[myX, myY].type == 663)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 5381;
			}
			if (Main.tile[myX, myY].type == 377)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3198;
			}
			if (Main.tile[myX, myY].type == 209)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				if (Main.tile[myX, myY].frameX < 72)
				{
					this.cursorItemIconID = 928;
				}
				else if (Main.tile[myX, myY].frameX < 144)
				{
					this.cursorItemIconID = 1337;
				}
				else if (Main.tile[myX, myY].frameX < 216)
				{
					this.cursorItemIconID = 3369;
				}
				else if (Main.tile[myX, myY].frameX < 360)
				{
					this.cursorItemIconID = 3664;
				}
				int j;
				for (j = (int)(Main.tile[myX, myY].frameX / 18); j >= 4; j -= 4)
				{
				}
				if (j < 2)
				{
					this.cursorItemIconReversed = true;
				}
				else
				{
					this.cursorItemIconReversed = false;
				}
			}
			if (Main.tile[myX, myY].type == 216)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int k = (int)Main.tile[myX, myY].frameY;
				int num10 = 0;
				while (k >= 40)
				{
					k -= 40;
					num10++;
				}
				this.cursorItemIconID = 970 + num10;
			}
			if (Main.tile[myX, myY].type == 387 || Main.tile[myX, myY].type == 386)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int num11 = 0;
				int num12 = 0;
				WorldGen.GetTopLeftAndStyles(ref num11, ref num12, 2, 1 + (Main.tile[myX, myY].type == 386).ToInt(), 18, 18);
				this.cursorItemIconID = 3239;
			}
			if (Main.tile[myX, myY].type == 389 || Main.tile[myX, myY].type == 388)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3240;
			}
			if (Main.tile[myX, myY].type == 335)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 2700;
			}
			if (Main.tile[myX, myY].type == 15 && this.IsWithinSnappngRangeToTile(myX, myY, 40))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = WorldGen.GetItemDrop_Chair((int)(Main.tile[myX, myY].frameY / 40));
				if (Main.tile[myX, myY].frameX / 18 < 1)
				{
					this.cursorItemIconReversed = true;
				}
			}
			if (Main.tile[myX, myY].type == 102 && this.IsWithinSnappngRangeToTile(myX, myY, 40))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 355;
			}
			if (Main.tile[myX, myY].type == 89 && this.IsWithinSnappngRangeToTile(myX, myY, 40))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = WorldGen.GetItemDrop_Benches((int)(Main.tile[myX, myY].frameX / 54));
			}
			if (Main.tile[myX, myY].type == 487 && this.IsWithinSnappngRangeToTile(myX, myY, 40))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = WorldGen.GetItemDrop_PicnicTables((int)(Main.tile[myX, myY].frameX / 72));
			}
			if (Main.tile[myX, myY].type == 497 && this.IsWithinSnappngRangeToTile(myX, myY, 40))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = WorldGen.GetItemDrop_Toilet((int)(Main.tile[myX, myY].frameY / 40));
				if (Main.tile[myX, myY].frameX / 18 < 1)
				{
					this.cursorItemIconReversed = true;
				}
			}
			if (Main.tile[myX, myY].type == 410)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3536 + Math.Min((int)(Main.tile[myX, myY].frameX / 36), 3);
			}
			if (Main.tile[myX, myY].type == 480)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4054;
			}
			if (Main.tile[myX, myY].type == 509)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4318;
			}
			if (Main.tile[myX, myY].type == 657)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 5345;
			}
			if (Main.tile[myX, myY].type == 658)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 5347;
			}
			if (Main.tile[myX, myY].type == 463)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3813;
			}
			if (Main.tile[myX, myY].type == 491)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4076;
			}
			if (Main.tile[myX, myY].type == 494)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4089;
			}
			if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3545;
			}
			if (Main.tile[myX, myY].type == 338)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 2738;
			}
			if (Main.tile[myX, myY].type == 455)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3747;
			}
			if ((Main.tile[myX, myY].type == 219 || Main.tile[myX, myY].type == 642) && (this.inventory[this.selectedItem].type == 424 || this.inventory[this.selectedItem].type == 1103 || this.inventory[this.selectedItem].type == 2339 || this.inventory[this.selectedItem].type == 2338 || this.inventory[this.selectedItem].type == 2337))
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = this.inventory[this.selectedItem].type;
			}
			if (Main.tile[myX, myY].type == 212)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 949;
			}
			if (Main.tile[myX, myY].type == 314 && this.gravDir == 1f)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 2343;
			}
			if (Main.tile[myX, myY].type == 215)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int num13 = (int)(Main.tile[myX, myY].frameX / 54);
				if (num13 == 0)
				{
					this.cursorItemIconID = 966;
				}
				else if (num13 == 14)
				{
					this.cursorItemIconID = 5299;
				}
				else if (num13 == 15)
				{
					this.cursorItemIconID = 5357;
				}
				else if (num13 >= 8 && num13 <= 13)
				{
					this.cursorItemIconID = 4689 + num13 - 8;
				}
				else if (num13 == 7)
				{
					this.cursorItemIconID = 3724;
				}
				else if (num13 == 6)
				{
					this.cursorItemIconID = 3723;
				}
				else if (num13 == 5)
				{
					this.cursorItemIconID = 3050;
				}
				else
				{
					this.cursorItemIconID = 3046 + num13 - 1;
				}
			}
			if (Main.tile[myX, myY].type == 4)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int num14 = (int)(Main.tile[myX, myY].frameY / 22);
				if (num14 == 0)
				{
					this.cursorItemIconID = 8;
				}
				else if (num14 == 8)
				{
					this.cursorItemIconID = 523;
				}
				else if (num14 == 9)
				{
					this.cursorItemIconID = 974;
				}
				else if (num14 == 10)
				{
					this.cursorItemIconID = 1245;
				}
				else if (num14 == 11)
				{
					this.cursorItemIconID = 1333;
				}
				else if (num14 == 12)
				{
					this.cursorItemIconID = 2274;
				}
				else if (num14 == 13)
				{
					this.cursorItemIconID = 3004;
				}
				else if (num14 == 14)
				{
					this.cursorItemIconID = 3045;
				}
				else if (num14 == 15)
				{
					this.cursorItemIconID = 3114;
				}
				else if (num14 == 16)
				{
					this.cursorItemIconID = 4383;
				}
				else if (num14 == 17)
				{
					this.cursorItemIconID = 4384;
				}
				else if (num14 == 18)
				{
					this.cursorItemIconID = 4385;
				}
				else if (num14 == 19)
				{
					this.cursorItemIconID = 4386;
				}
				else if (num14 == 20)
				{
					this.cursorItemIconID = 4387;
				}
				else if (num14 == 21)
				{
					this.cursorItemIconID = 4388;
				}
				else if (num14 == 22)
				{
					this.cursorItemIconID = 5293;
				}
				else if (num14 == 23)
				{
					this.cursorItemIconID = 5353;
				}
				else
				{
					this.cursorItemIconID = 426 + num14;
				}
			}
			if (Main.tile[myX, myY].type == 13)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int num15 = (int)(Main.tile[myX, myY].frameX / 18);
				if (num15 == 1)
				{
					this.cursorItemIconID = 28;
				}
				else if (num15 == 2)
				{
					this.cursorItemIconID = 110;
				}
				else if (num15 == 3)
				{
					this.cursorItemIconID = 350;
				}
				else if (num15 == 4)
				{
					this.cursorItemIconID = 351;
				}
				else if (num15 == 5)
				{
					this.cursorItemIconID = 2234;
				}
				else if (num15 == 6)
				{
					this.cursorItemIconID = 2244;
				}
				else if (num15 == 7)
				{
					this.cursorItemIconID = 2257;
				}
				else if (num15 == 8)
				{
					this.cursorItemIconID = 2258;
				}
				else
				{
					this.cursorItemIconID = 31;
				}
			}
			if (Main.tile[myX, myY].type == 29)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 87;
			}
			if (Main.tile[myX, myY].type == 97)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 346;
			}
			if (Main.tile[myX, myY].type == 510)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4319;
				int l;
				for (l = (int)(Main.tile[myX, myY].frameX / 18); l >= 2; l -= 2)
				{
				}
				if (l == 0)
				{
					this.cursorItemIconReversed = true;
				}
				else
				{
					this.cursorItemIconReversed = false;
				}
			}
			if (Main.tile[myX, myY].type == 511)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 4320;
				int m;
				for (m = (int)(Main.tile[myX, myY].frameX / 18); m >= 2; m -= 2)
				{
				}
				if (m == 0)
				{
					this.cursorItemIconReversed = true;
				}
				else
				{
					this.cursorItemIconReversed = false;
				}
			}
			if (Main.tile[myX, myY].type == 49)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 148;
			}
			if (Main.tile[myX, myY].type == 372)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3117;
			}
			if (Main.tile[myX, myY].type == 646)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 5322;
			}
			if (Main.tile[myX, myY].type == 174)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 713;
			}
			if (Main.tile[myX, myY].type == 50)
			{
				this.noThrow = 2;
				if (Main.tile[myX, myY].frameX == 90)
				{
					this.cursorItemIconEnabled = true;
					this.cursorItemIconID = 165;
				}
			}
			if (Main.tile[myX, myY].type == 139)
			{
				this.noThrow = 2;
				int num16 = 0;
				for (int n = (int)(Main.tile[myX, myY].frameY / 18); n >= 2; n -= 2)
				{
					num16++;
				}
				this.cursorItemIconEnabled = true;
				if (num16 == 28)
				{
					this.cursorItemIconID = 1963;
				}
				else if (num16 == 29)
				{
					this.cursorItemIconID = 1964;
				}
				else if (num16 == 30)
				{
					this.cursorItemIconID = 1965;
				}
				else if (num16 == 31)
				{
					this.cursorItemIconID = 2742;
				}
				else if (num16 == 32)
				{
					this.cursorItemIconID = 3044;
				}
				else if (num16 == 33)
				{
					this.cursorItemIconID = 3235;
				}
				else if (num16 == 34)
				{
					this.cursorItemIconID = 3236;
				}
				else if (num16 == 35)
				{
					this.cursorItemIconID = 3237;
				}
				else if (num16 == 36)
				{
					this.cursorItemIconID = 3370;
				}
				else if (num16 == 37)
				{
					this.cursorItemIconID = 3371;
				}
				else if (num16 == 38)
				{
					this.cursorItemIconID = 3796;
				}
				else if (num16 == 39)
				{
					this.cursorItemIconID = 3869;
				}
				else if (num16 == 40)
				{
					this.cursorItemIconID = 4082;
				}
				else if (num16 == 41)
				{
					this.cursorItemIconID = 4078;
				}
				else if (num16 == 42)
				{
					this.cursorItemIconID = 4079;
				}
				else if (num16 == 43)
				{
					this.cursorItemIconID = 4077;
				}
				else if (num16 == 44)
				{
					this.cursorItemIconID = 4080;
				}
				else if (num16 == 45)
				{
					this.cursorItemIconID = 4081;
				}
				else if (num16 == 46)
				{
					this.cursorItemIconID = 4237;
				}
				else if (num16 == 47)
				{
					this.cursorItemIconID = 4356;
				}
				else if (num16 == 48)
				{
					this.cursorItemIconID = 4357;
				}
				else if (num16 == 49)
				{
					this.cursorItemIconID = 4358;
				}
				else if (num16 == 50)
				{
					this.cursorItemIconID = 4421;
				}
				else if (num16 == 51)
				{
					this.cursorItemIconID = 4606;
				}
				else if (num16 == 52)
				{
					this.cursorItemIconID = 4979;
				}
				else if (num16 == 53)
				{
					this.cursorItemIconID = 4985;
				}
				else if (num16 == 54)
				{
					this.cursorItemIconID = 4990;
				}
				else if (num16 == 55)
				{
					this.cursorItemIconID = 4991;
				}
				else if (num16 == 56)
				{
					this.cursorItemIconID = 4992;
				}
				else if (num16 == 57)
				{
					this.cursorItemIconID = 5006;
				}
				else if (num16 == 58)
				{
					this.cursorItemIconID = 5014;
				}
				else if (num16 == 59)
				{
					this.cursorItemIconID = 5015;
				}
				else if (num16 == 60)
				{
					this.cursorItemIconID = 5016;
				}
				else if (num16 == 61)
				{
					this.cursorItemIconID = 5017;
				}
				else if (num16 == 62)
				{
					this.cursorItemIconID = 5018;
				}
				else if (num16 == 63)
				{
					this.cursorItemIconID = 5019;
				}
				else if (num16 == 64)
				{
					this.cursorItemIconID = 5020;
				}
				else if (num16 == 65)
				{
					this.cursorItemIconID = 5021;
				}
				else if (num16 == 66)
				{
					this.cursorItemIconID = 5022;
				}
				else if (num16 == 67)
				{
					this.cursorItemIconID = 5023;
				}
				else if (num16 == 68)
				{
					this.cursorItemIconID = 5024;
				}
				else if (num16 == 69)
				{
					this.cursorItemIconID = 5025;
				}
				else if (num16 == 70)
				{
					this.cursorItemIconID = 5026;
				}
				else if (num16 == 71)
				{
					this.cursorItemIconID = 5027;
				}
				else if (num16 == 72)
				{
					this.cursorItemIconID = 5028;
				}
				else if (num16 == 73)
				{
					this.cursorItemIconID = 5029;
				}
				else if (num16 == 74)
				{
					this.cursorItemIconID = 5030;
				}
				else if (num16 == 75)
				{
					this.cursorItemIconID = 5031;
				}
				else if (num16 == 76)
				{
					this.cursorItemIconID = 5032;
				}
				else if (num16 == 77)
				{
					this.cursorItemIconID = 5033;
				}
				else if (num16 == 78)
				{
					this.cursorItemIconID = 5034;
				}
				else if (num16 == 79)
				{
					this.cursorItemIconID = 5035;
				}
				else if (num16 == 80)
				{
					this.cursorItemIconID = 5036;
				}
				else if (num16 == 81)
				{
					this.cursorItemIconID = 5037;
				}
				else if (num16 == 82)
				{
					this.cursorItemIconID = 5038;
				}
				else if (num16 == 83)
				{
					this.cursorItemIconID = 5039;
				}
				else if (num16 == 84)
				{
					this.cursorItemIconID = 5040;
				}
				else if (num16 == 85)
				{
					this.cursorItemIconID = 5044;
				}
				else if (num16 == 86)
				{
					this.cursorItemIconID = 5112;
				}
				else if (num16 == 87)
				{
					this.cursorItemIconID = 5362;
				}
				else if (num16 >= 13)
				{
					this.cursorItemIconID = 1596 + num16 - 13;
				}
				else
				{
					this.cursorItemIconID = 562 + num16;
				}
			}
			if (Main.tile[myX, myY].type == 207)
			{
				this.noThrow = 2;
				int num17 = 0;
				for (int num18 = (int)(Main.tile[myX, myY].frameX / 18); num18 >= 2; num18 -= 2)
				{
					num17++;
				}
				this.cursorItemIconEnabled = true;
				if (num17 == 0)
				{
					this.cursorItemIconID = 909;
				}
				else if (num17 == 1)
				{
					this.cursorItemIconID = 910;
				}
				else if (num17 == 2)
				{
					this.cursorItemIconID = 940;
				}
				else if (num17 == 3)
				{
					this.cursorItemIconID = 941;
				}
				else if (num17 == 4)
				{
					this.cursorItemIconID = 942;
				}
				else if (num17 == 5)
				{
					this.cursorItemIconID = 943;
				}
				else if (num17 == 6)
				{
					this.cursorItemIconID = 944;
				}
				else if (num17 == 7)
				{
					this.cursorItemIconID = 945;
				}
				else if (num17 == 8)
				{
					this.cursorItemIconID = 4922;
				}
				else if (num17 == 9)
				{
					this.cursorItemIconID = 4417;
				}
			}
			if (Main.tileSign[(int)Main.tile[myX, myY].type])
			{
				this.noThrow = 2;
				int num19 = (int)(Main.tile[myX, myY].frameX / 18);
				int num20 = (int)(Main.tile[myX, myY].frameY / 18);
				num19 %= 2;
				int num21 = myX - num19;
				int num22 = myY - num20;
				Main.signBubble = true;
				Main.signX = num21 * 16 + 16;
				Main.signY = num22 * 16;
				int num23 = Sign.ReadSign(num21, num22, false);
				if (num23 != -1)
				{
					Main.signHover = num23;
				}
				if (num23 != -1)
				{
					Main.signHover = num23;
					this.cursorItemIconEnabled = false;
					this.cursorItemIconID = -1;
				}
			}
			if (Main.tile[myX, myY].type == 237)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 1293;
			}
			if (Main.tile[myX, myY].type == 466)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3828;
			}
			if (Main.tile[myX, myY].type == 125)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 487;
			}
			if (Main.tile[myX, myY].type == 354)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 2999;
			}
			if (Main.tile[myX, myY].type == 287)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 2177;
			}
			if (Main.tile[myX, myY].type == 132)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 513;
			}
			if (Main.tile[myX, myY].type == 136)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 538;
			}
			if (Main.tile[myX, myY].type == 144)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				int num24 = (int)(Main.tile[myX, myY].frameX / 18);
				if (num24 < 3)
				{
					this.cursorItemIconID = 583 + num24;
				}
				else
				{
					this.cursorItemIconID = 4484 + (num24 - 3);
				}
			}
			if (Main.tile[myX, myY].type == 440)
			{
				int num25 = (int)(Main.tile[myX, myY].frameX / 54);
				int num26 = (int)(Main.tile[myX, myY].frameY / 54);
				int num27 = -1;
				switch (num25)
				{
				case 0:
					num27 = 1526;
					break;
				case 1:
					num27 = 1524;
					break;
				case 2:
					num27 = 1525;
					break;
				case 3:
					num27 = 1523;
					break;
				case 4:
					num27 = 1522;
					break;
				case 5:
					num27 = 1527;
					break;
				case 6:
					num27 = 3643;
					break;
				}
				if (num27 != -1 && (num26 == 1 || this.HasItem(num27)))
				{
					this.noThrow = 2;
					this.cursorItemIconEnabled = true;
					this.cursorItemIconID = num27;
				}
			}
			else if (Main.tile[myX, myY].type == 470)
			{
				this.noThrow = 2;
				int num28 = (int)(Main.tile[myX, myY].frameX % 136 / 34);
				if (num28 < 2)
				{
					this.cursorItemIconEnabled = true;
					this.cursorItemIconID = 498;
				}
				else if (num28 < 4)
				{
					this.cursorItemIconEnabled = true;
					this.cursorItemIconID = 1989;
				}
			}
			else if (Main.tile[myX, myY].type == 475)
			{
				this.noThrow = 2;
				this.cursorItemIconEnabled = true;
				this.cursorItemIconID = 3977;
			}
			else if (Main.tile[myX, myY].type == 520)
			{
				this.noThrow = 2;
				int num29 = TEFoodPlatter.Find(myX, myY);
				if (num29 != -1)
				{
					this.cursorItemIconEnabled = true;
					TEFoodPlatter tefoodPlatter = (TEFoodPlatter)TileEntity.ByID[num29];
					this.cursorItemIconID = tefoodPlatter.item.type;
				}
			}
			else if (Main.tile[myX, myY].type == 395)
			{
				this.noThrow = 2;
				int num30 = myX;
				int num31 = myY;
				int num32 = (int)Main.tile[myX, myY].frameX;
				int num33 = (int)Main.tile[myX, myY].frameY;
				while (num33 > 0)
				{
					num33 -= 18;
					num31--;
				}
				while (num32 >= 36)
				{
					num32 -= 36;
				}
				while (num32 > 0)
				{
					num32 -= 18;
					num30--;
				}
				int num34 = TEItemFrame.Find(num30, num31);
				if (num34 != -1)
				{
					this.cursorItemIconEnabled = true;
					TEItemFrame teitemFrame = (TEItemFrame)TileEntity.ByID[num34];
					this.cursorItemIconID = teitemFrame.item.type;
				}
			}
			else if (Main.tile[myX, myY].type == 471)
			{
				this.noThrow = 2;
				int num35 = myX;
				int num36 = myY;
				int num37 = (int)Main.tile[myX, myY].frameX;
				int num38 = (int)Main.tile[myX, myY].frameY;
				while (num38 > 0)
				{
					num38 -= 18;
					num36--;
				}
				while (num37 >= 54)
				{
					num37 -= 54;
				}
				while (num37 > 0)
				{
					num37 -= 18;
					num35--;
				}
				int num39 = TEWeaponsRack.Find(num35, num36);
				if (num39 != -1)
				{
					this.cursorItemIconEnabled = true;
					TEWeaponsRack teweaponsRack = (TEWeaponsRack)TileEntity.ByID[num39];
					this.cursorItemIconID = teweaponsRack.item.type;
				}
			}
			else if (Main.tile[myX, myY].type == 334)
			{
				this.noThrow = 2;
			}
			if (PlayerInput.UsingGamepad && this.cursorItemIconText.Length == 0)
			{
				this.cursorItemIconEnabled = false;
				this.cursorItemIconID = 0;
			}
		}

		// Token: 0x0600081D RID: 2077 RVA: 0x003018D0 File Offset: 0x002FFAD0
		public Color ChatColor()
		{
			byte b = this.difficulty;
			if (b == 1)
			{
				return Main.mcColor;
			}
			if (b != 2)
			{
				return Color.White;
			}
			return Main.hcColor;
		}

		// Token: 0x0600081E RID: 2078 RVA: 0x00301900 File Offset: 0x002FFB00
		private void TileInteractionsMouseOver_Containers(int myX, int myY)
		{
			LocalizedText[] array = Lang.chestType;
			int[] array2 = Chest.chestTypeToIcon;
			Tile tile = Main.tile[myX, myY];
			if (tile.type == 467)
			{
				array = Lang.chestType2;
				array2 = Chest.chestTypeToIcon2;
			}
			int num = myX;
			int num2 = myY;
			if (tile.frameX % 36 != 0)
			{
				num--;
			}
			if (tile.frameY % 36 != 0)
			{
				num2--;
			}
			int num3 = Chest.FindChest(num, num2);
			this.cursorItemIconID = -1;
			if (num3 < 0)
			{
				this.cursorItemIconText = array[0].Value;
			}
			else
			{
				if (Main.chest[num3].name != "")
				{
					this.cursorItemIconText = Main.chest[num3].name;
				}
				else
				{
					this.cursorItemIconText = array[(int)(tile.frameX / 36)].Value;
				}
				if (this.cursorItemIconText == array[(int)(tile.frameX / 36)].Value)
				{
					this.cursorItemIconID = array2[(int)(tile.frameX / 36)];
					this.cursorItemIconText = "";
				}
			}
			if (this.cursorItemIconID == 3988)
			{
				this.cursorItemIconID = 306;
			}
			this.noThrow = 2;
			this.cursorItemIconEnabled = true;
		}

		// Token: 0x0600081F RID: 2079 RVA: 0x00301A30 File Offset: 0x002FFC30
		private void TryLandingOnDetonator()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (this.velocity.Y >= 3f)
			{
				Point point = (base.Bottom + new Vector2(0f, 0.01f)).ToTileCoordinates();
				Tile tileSafely = Framing.GetTileSafely(point.X, point.Y);
				if (tileSafely.active() && tileSafely.type == 411 && tileSafely.frameY == 0 && tileSafely.frameX < 36)
				{
					Wiring.HitSwitch(point.X, point.Y);
					NetMessage.SendData(59, -1, -1, null, point.X, (float)point.Y, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000820 RID: 2080 RVA: 0x00301AF0 File Offset: 0x002FFCF0
		private void TryBouncingBlocks(bool Falling)
		{
			bool flag = !this.wet && !this.shimmering && (this.velocity.Y >= 5f || this.velocity.Y <= -5f);
			bool flag2 = false;
			bool flag3 = false;
			float num = 1f;
			if (flag)
			{
				bool flag4 = false;
				int num2 = 0;
				foreach (Point point in this.TouchedTiles)
				{
					Tile tile = Main.tile[point.X, point.Y];
					if (tile != null && tile.active() && tile.nactive() && (flag2 || Main.tileBouncy[(int)tile.type]))
					{
						flag4 = true;
						num2 = point.Y;
						break;
					}
				}
				if (flag4)
				{
					this.velocity.Y = this.velocity.Y * -0.8f;
					if (this.controlJump)
					{
						this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -13f, 13f);
					}
					this.position.Y = (float)(num2 * 16 - ((this.velocity.Y < 0f) ? this.height : -16));
					this.FloorVisuals(Falling);
					if (flag3)
					{
						Vector2 vector = (this.fullRotation - 1.5707964f).ToRotationVector2();
						if (vector.Y > 0f)
						{
							vector.Y *= -1f;
						}
						vector.Y = vector.Y * 0.5f + -0.5f;
						float num3 = -vector.Y;
						if (num3 < 0f)
						{
							num3 = 0f;
						}
						float num4 = num3 * 1.5f + 1f;
						float num5 = Math.Abs(this.velocity.Y) * num4 * num;
						num5 = MathHelper.Clamp(num5, 2f, 16f);
						this.velocity = vector * num5;
						float scaleFactor = 20f;
						Vector2 positionInWorld = base.Center + (this.fullRotation + 1.5707964f).ToRotationVector2() * scaleFactor;
						positionInWorld = base.Bottom;
						ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.Keybrand, new ParticleOrchestraSettings
						{
							PositionInWorld = positionInWorld
						}, new int?(this.whoAmI));
					}
					this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -20f, 20f);
					if (this.velocity.Y * this.gravDir < 0f)
					{
						this.fallStart = (int)this.position.Y / 16;
					}
				}
			}
		}

		// Token: 0x06000821 RID: 2081 RVA: 0x00301DBC File Offset: 0x002FFFBC
		public bool CanAcceptItemIntoInventory(Item item)
		{
			return !this.preventAllItemPickups || ItemID.Sets.IgnoresEncumberingStone[item.type];
		}

		// Token: 0x06000822 RID: 2082 RVA: 0x00301DD4 File Offset: 0x002FFFD4
		private void GrabItems(int i)
		{
			for (int j = 0; j < 400; j++)
			{
				Item item = Main.item[j];
				if (item.active && item.shimmerTime == 0f && item.noGrabDelay == 0 && item.playerIndexTheItemIsReservedFor == i && this.CanAcceptItemIntoInventory(item) && (!item.shimmered || (double)item.velocity.Length() < 0.2))
				{
					int itemGrabRange = this.GetItemGrabRange(item);
					Rectangle hitbox = item.Hitbox;
					if (base.Hitbox.Intersects(hitbox))
					{
						if (i == Main.myPlayer && (this.inventory[this.selectedItem].type != 0 || this.itemAnimation <= 0))
						{
							item = this.PickupItem(i, j, item);
						}
					}
					else if (new Rectangle((int)this.position.X - itemGrabRange, (int)this.position.Y - itemGrabRange, this.width + itemGrabRange * 2, this.height + itemGrabRange * 2).Intersects(hitbox))
					{
						Player.ItemSpaceStatus itemSpaceStatus = this.ItemSpace(item);
						if (this.CanPullItem(item, itemSpaceStatus))
						{
							item.shimmered = false;
							item.beingGrabbed = true;
							bool flag = false;
							if (this.difficulty == 3 && CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>().IsEnabledForPlayer(this.whoAmI))
							{
								flag = true;
							}
							if (flag)
							{
								this.PullItem_Pickup(item, 7f, 1);
							}
							else if (this.manaMagnet && (item.type == 184 || item.type == 1735 || item.type == 1868))
							{
								this.PullItem_Pickup(item, 12f, 5);
							}
							else if (this.lifeMagnet && (item.type == 58 || item.type == 1734 || item.type == 1867))
							{
								this.PullItem_Pickup(item, 15f, 5);
							}
							else if (ItemID.Sets.NebulaPickup[item.type])
							{
								this.PullItem_Pickup(item, 12f, 5);
							}
							else if (itemSpaceStatus.ItemIsGoingToVoidVault)
							{
								this.PullItem_ToVoidVault(item);
							}
							else if (this.goldRing && item.IsACoin)
							{
								this.PullItem_Pickup(item, 12f, 5);
							}
							else
							{
								this.PullItem_Common(item, 0.75f);
							}
						}
					}
				}
			}
		}

		// Token: 0x06000823 RID: 2083 RVA: 0x0030203A File Offset: 0x0030023A
		private void PullItem_ToVoidVault(Item itemToPickUp)
		{
			this.PullItem_Pickup(itemToPickUp, 12f, 5);
		}

		// Token: 0x06000824 RID: 2084 RVA: 0x0030204C File Offset: 0x0030024C
		private void PullItem_Common(Item itemToPickUp, float xPullSpeed)
		{
			if ((double)this.position.X + (double)this.width * 0.5 > (double)itemToPickUp.position.X + (double)itemToPickUp.width * 0.5)
			{
				if (itemToPickUp.velocity.X < Player.itemGrabSpeedMax + this.velocity.X)
				{
					itemToPickUp.velocity.X = itemToPickUp.velocity.X + Player.itemGrabSpeed;
				}
				if (itemToPickUp.velocity.X < 0f)
				{
					itemToPickUp.velocity.X = itemToPickUp.velocity.X + Player.itemGrabSpeed * xPullSpeed;
				}
			}
			else
			{
				if (itemToPickUp.velocity.X > -Player.itemGrabSpeedMax + this.velocity.X)
				{
					itemToPickUp.velocity.X = itemToPickUp.velocity.X - Player.itemGrabSpeed;
				}
				if (itemToPickUp.velocity.X > 0f)
				{
					itemToPickUp.velocity.X = itemToPickUp.velocity.X - Player.itemGrabSpeed * xPullSpeed;
				}
			}
			if ((double)this.position.Y + (double)this.height * 0.5 > (double)itemToPickUp.position.Y + (double)itemToPickUp.height * 0.5)
			{
				if (itemToPickUp.velocity.Y < Player.itemGrabSpeedMax)
				{
					itemToPickUp.velocity.Y = itemToPickUp.velocity.Y + Player.itemGrabSpeed;
				}
				if (itemToPickUp.velocity.Y < 0f)
				{
					itemToPickUp.velocity.Y = itemToPickUp.velocity.Y + Player.itemGrabSpeed * xPullSpeed;
					return;
				}
			}
			else
			{
				if (itemToPickUp.velocity.Y > -Player.itemGrabSpeedMax)
				{
					itemToPickUp.velocity.Y = itemToPickUp.velocity.Y - Player.itemGrabSpeed;
				}
				if (itemToPickUp.velocity.Y > 0f)
				{
					itemToPickUp.velocity.Y = itemToPickUp.velocity.Y - Player.itemGrabSpeed * xPullSpeed;
				}
			}
		}

		// Token: 0x06000825 RID: 2085 RVA: 0x0030222C File Offset: 0x0030042C
		private void PullItem_Pickup(Item itemToPickUp, float speed, int acc)
		{
			Vector2 vector = new Vector2(itemToPickUp.position.X + (float)(itemToPickUp.width / 2), itemToPickUp.position.Y + (float)(itemToPickUp.height / 2));
			float num = base.Center.X - vector.X;
			float num2 = base.Center.Y - vector.Y;
			float num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
			num3 = speed / num3;
			num *= num3;
			num2 *= num3;
			itemToPickUp.velocity.X = (itemToPickUp.velocity.X * (float)(acc - 1) + num) / (float)acc;
			itemToPickUp.velocity.Y = (itemToPickUp.velocity.Y * (float)(acc - 1) + num2) / (float)acc;
		}

		// Token: 0x06000826 RID: 2086 RVA: 0x003022EC File Offset: 0x003004EC
		private Item PickupItem(int playerIndex, int worldItemArrayIndex, Item itemToPickUp)
		{
			if (ItemID.Sets.NebulaPickup[itemToPickUp.type])
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				int num = itemToPickUp.buffType;
				itemToPickUp = new Item();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(102, -1, -1, null, playerIndex, (float)num, base.Center.X, base.Center.Y, 0, 0, 0);
				}
				else
				{
					this.NebulaLevelup(num);
				}
			}
			if (itemToPickUp.type == 58 || itemToPickUp.type == 1734 || itemToPickUp.type == 1867)
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				this.Heal(20);
				itemToPickUp = new Item();
			}
			else if (itemToPickUp.type == 184 || itemToPickUp.type == 1735 || itemToPickUp.type == 1868)
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				this.statMana += 100;
				if (Main.myPlayer == this.whoAmI)
				{
					this.ManaEffect(100);
				}
				if (this.statMana > this.statManaMax2)
				{
					this.statMana = this.statManaMax2;
				}
				itemToPickUp = new Item();
			}
			else if (itemToPickUp.type == 4143)
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				this.statMana += 50;
				if (Main.myPlayer == this.whoAmI)
				{
					this.ManaEffect(50);
				}
				if (this.statMana > this.statManaMax2)
				{
					this.statMana = this.statManaMax2;
				}
				itemToPickUp = new Item();
			}
			else
			{
				itemToPickUp = this.GetItem(playerIndex, itemToPickUp, GetItemSettings.PickupItemFromWorld);
			}
			Main.item[worldItemArrayIndex] = itemToPickUp;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, worldItemArrayIndex, 0f, 0f, 0f, 0, 0, 0);
			}
			return itemToPickUp;
		}

		// Token: 0x06000827 RID: 2087 RVA: 0x0030252E File Offset: 0x0030072E
		public void Heal(int amount)
		{
			this.statLife += amount;
			if (Main.myPlayer == this.whoAmI)
			{
				this.HealEffect(amount, true);
			}
			if (this.statLife > this.statLifeMax2)
			{
				this.statLife = this.statLifeMax2;
			}
		}

		// Token: 0x06000828 RID: 2088 RVA: 0x00302570 File Offset: 0x00300770
		public int GetItemGrabRange(Item item)
		{
			int num = Player.defaultItemGrabRange;
			if (this.goldRing && item.IsACoin)
			{
				num += Item.coinGrabRange;
			}
			if (this.manaMagnet && (item.type == 184 || item.type == 1735 || item.type == 1868))
			{
				num += Item.manaGrabRange;
			}
			if (item.type == 4143)
			{
				num += Item.manaGrabRange;
			}
			if (this.lifeMagnet && (item.type == 58 || item.type == 1734 || item.type == 1867))
			{
				num += Item.lifeGrabRange;
			}
			if (this.treasureMagnet)
			{
				num += Item.treasureGrabRange;
			}
			if (item.type == 3822)
			{
				num += 50;
			}
			if (ItemID.Sets.NebulaPickup[item.type])
			{
				num += 100;
			}
			if (this.difficulty == 3 && CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>().IsEnabledForPlayer(this.whoAmI))
			{
				num += 240;
			}
			return num;
		}

		// Token: 0x06000829 RID: 2089 RVA: 0x0030267C File Offset: 0x0030087C
		public bool SellItem(Item item, int stack = -1)
		{
			long num;
			long num2;
			this.GetItemExpectedPrice(item, out num, out num2);
			if (num <= 0L)
			{
				return false;
			}
			if (stack == -1)
			{
				stack = item.stack;
			}
			Item[] array = new Item[58];
			for (int i = 0; i < 58; i++)
			{
				array[i] = new Item();
				array[i] = this.inventory[i].Clone();
			}
			long num3 = num / 5L;
			if (num3 < 1L)
			{
				num3 = 1L;
			}
			long num4 = num3;
			num3 *= (long)stack;
			int amount = Main.shopSellbackHelper.GetAmount(item);
			if (amount > 0)
			{
				num3 += (-num4 + num2) * (long)Math.Min(amount, item.stack);
			}
			bool flag = false;
			while (num3 >= 1000000L)
			{
				if (flag)
				{
					break;
				}
				int num5 = -1;
				for (int j = 53; j >= 0; j--)
				{
					if (num5 == -1 && (this.inventory[j].type == 0 || this.inventory[j].stack == 0))
					{
						num5 = j;
					}
					while (this.inventory[j].type == 74 && this.inventory[j].stack < this.inventory[j].maxStack && num3 >= 1000000L)
					{
						this.inventory[j].stack++;
						num3 -= 1000000L;
						this.DoCoins(j);
						if (this.inventory[j].stack == 0 && num5 == -1)
						{
							num5 = j;
						}
					}
				}
				if (num3 >= 1000000L)
				{
					if (num5 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num5].SetDefaults(74);
						num3 -= 1000000L;
					}
				}
			}
			while (num3 >= 10000L)
			{
				if (flag)
				{
					break;
				}
				int num6 = -1;
				for (int k = 53; k >= 0; k--)
				{
					if (num6 == -1 && (this.inventory[k].type == 0 || this.inventory[k].stack == 0))
					{
						num6 = k;
					}
					while (this.inventory[k].type == 73 && this.inventory[k].stack < this.inventory[k].maxStack && num3 >= 10000L)
					{
						this.inventory[k].stack++;
						num3 -= 10000L;
						this.DoCoins(k);
						if (this.inventory[k].stack == 0 && num6 == -1)
						{
							num6 = k;
						}
					}
				}
				if (num3 >= 10000L)
				{
					if (num6 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num6].SetDefaults(73);
						num3 -= 10000L;
					}
				}
			}
			while (num3 >= 100L)
			{
				if (flag)
				{
					break;
				}
				int num7 = -1;
				for (int l = 53; l >= 0; l--)
				{
					if (num7 == -1 && (this.inventory[l].type == 0 || this.inventory[l].stack == 0))
					{
						num7 = l;
					}
					while (this.inventory[l].type == 72 && this.inventory[l].stack < this.inventory[l].maxStack && num3 >= 100L)
					{
						this.inventory[l].stack++;
						num3 -= 100L;
						this.DoCoins(l);
						if (this.inventory[l].stack == 0 && num7 == -1)
						{
							num7 = l;
						}
					}
				}
				if (num3 >= 100L)
				{
					if (num7 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num7].SetDefaults(72);
						num3 -= 100L;
					}
				}
			}
			while (num3 >= 1L && !flag)
			{
				int num8 = -1;
				for (int m = 53; m >= 0; m--)
				{
					if (num8 == -1 && (this.inventory[m].type == 0 || this.inventory[m].stack == 0))
					{
						num8 = m;
					}
					while (this.inventory[m].type == 71 && this.inventory[m].stack < this.inventory[m].maxStack && num3 >= 1L)
					{
						this.inventory[m].stack++;
						num3 -= 1L;
						this.DoCoins(m);
						if (this.inventory[m].stack == 0 && num8 == -1)
						{
							num8 = m;
						}
					}
				}
				if (num3 >= 1L)
				{
					if (num8 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num8].SetDefaults(71);
						num3 -= 1L;
					}
				}
			}
			if (flag)
			{
				for (int n = 0; n < 58; n++)
				{
					this.inventory[n] = array[n].Clone();
				}
				return false;
			}
			return true;
		}

		// Token: 0x0600082A RID: 2090 RVA: 0x00302B28 File Offset: 0x00300D28
		public void RefreshItems(bool onlyIfVariantChanged = true)
		{
			if (onlyIfVariantChanged && this.whoAmI == Main.myPlayer)
			{
				Recipe.UpdateItemVariants();
			}
			this.RefreshItems(this.inventory, onlyIfVariantChanged);
			this.RefreshItems(this.armor, onlyIfVariantChanged);
			this.RefreshItems(this.dye, onlyIfVariantChanged);
			this.RefreshItems(this.miscEquips, onlyIfVariantChanged);
			this.RefreshItems(this.miscDyes, onlyIfVariantChanged);
			this.RefreshItems(this.bank.item, onlyIfVariantChanged);
			this.RefreshItems(this.bank2.item, onlyIfVariantChanged);
			this.RefreshItems(this.bank3.item, onlyIfVariantChanged);
			this.RefreshItems(this.bank4.item, onlyIfVariantChanged);
			this.RefreshItems(this._temporaryItemSlots, onlyIfVariantChanged);
		}

		// Token: 0x0600082B RID: 2091 RVA: 0x00302BE0 File Offset: 0x00300DE0
		private void RefreshItems(Item[] array, bool onlyIfVariantChanged)
		{
			foreach (Item item in array)
			{
				if (item != null)
				{
					item.Refresh(onlyIfVariantChanged);
				}
			}
		}

		// Token: 0x0600082C RID: 2092 RVA: 0x00302C0C File Offset: 0x00300E0C
		public void GetItemExpectedPrice(Item item, out long calcForSelling, out long calcForBuying)
		{
			if (item.shopSpecialCurrency != -1)
			{
				CustomCurrencyManager.GetPrices(item, out calcForSelling, out calcForBuying);
				return;
			}
			int storeValue = item.GetStoreValue();
			calcForSelling = (long)storeValue;
			calcForBuying = (long)storeValue;
			if (this.discountAvailable)
			{
				if (!item.buyOnce)
				{
					calcForBuying = (long)((int)((float)calcForBuying * 0.8f));
				}
				if (item.isAShopItem)
				{
					calcForSelling = calcForBuying;
				}
			}
			if (item.buyOnce)
			{
				calcForBuying = (long)((int)Math.Round((double)calcForBuying / this.currentShoppingSettings.PriceAdjustment));
				calcForSelling = (long)((int)Math.Round((double)calcForSelling / this.currentShoppingSettings.PriceAdjustment));
			}
			else
			{
				calcForBuying = (long)((int)Math.Round((double)calcForBuying * this.currentShoppingSettings.PriceAdjustment));
				calcForSelling = (long)((int)Math.Round((double)calcForSelling / this.currentShoppingSettings.PriceAdjustment));
			}
			if (item.buyOnce)
			{
				calcForBuying /= 5L;
				if (storeValue != 0 && calcForBuying < 1L)
				{
					calcForBuying = 1L;
				}
			}
		}

		// Token: 0x0600082D RID: 2093 RVA: 0x00302CEC File Offset: 0x00300EEC
		public bool BuyItem(long price, int customCurrency = -1)
		{
			if (customCurrency != -1)
			{
				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
			}
			bool flag;
			long num = Utils.CoinsCount(out flag, this.inventory, new int[]
			{
				58,
				57,
				56,
				55,
				54
			});
			long num2 = Utils.CoinsCount(out flag, this.bank.item, new int[0]);
			long num3 = Utils.CoinsCount(out flag, this.bank2.item, new int[0]);
			long num4 = Utils.CoinsCount(out flag, this.bank3.item, new int[0]);
			long num5 = Utils.CoinsCount(out flag, this.bank4.item, new int[0]);
			if (Utils.CoinsCombineStacks(out flag, new long[]
			{
				num,
				num2,
				num3,
				num4,
				num5
			}) < price)
			{
				return false;
			}
			List<Item[]> list = new List<Item[]>();
			Dictionary<int, List<int>> dictionary = new Dictionary<int, List<int>>();
			List<Point> list2 = new List<Point>();
			List<Point> list3 = new List<Point>();
			List<Point> list4 = new List<Point>();
			List<Point> list5 = new List<Point>();
			List<Point> list6 = new List<Point>();
			List<Point> list7 = new List<Point>();
			list.Add(this.inventory);
			list.Add(this.bank.item);
			list.Add(this.bank2.item);
			list.Add(this.bank3.item);
			list.Add(this.bank4.item);
			for (int i = 0; i < list.Count; i++)
			{
				dictionary[i] = new List<int>();
			}
			dictionary[0] = new List<int>
			{
				58,
				57,
				56,
				55,
				54
			};
			for (int j = 0; j < list.Count; j++)
			{
				for (int k = 0; k < list[j].Length; k++)
				{
					if (!dictionary[j].Contains(k) && list[j][k].IsACoin)
					{
						list3.Add(new Point(j, k));
					}
				}
			}
			int num6 = 0;
			for (int l = list[num6].Length - 1; l >= 0; l--)
			{
				if (!dictionary[num6].Contains(l) && (list[num6][l].type == 0 || list[num6][l].stack == 0))
				{
					list2.Add(new Point(num6, l));
				}
			}
			num6 = 1;
			for (int m = list[num6].Length - 1; m >= 0; m--)
			{
				if (!dictionary[num6].Contains(m) && (list[num6][m].type == 0 || list[num6][m].stack == 0))
				{
					list4.Add(new Point(num6, m));
				}
			}
			num6 = 2;
			for (int n = list[num6].Length - 1; n >= 0; n--)
			{
				if (!dictionary[num6].Contains(n) && (list[num6][n].type == 0 || list[num6][n].stack == 0))
				{
					list5.Add(new Point(num6, n));
				}
			}
			num6 = 3;
			for (int num7 = list[num6].Length - 1; num7 >= 0; num7--)
			{
				if (!dictionary[num6].Contains(num7) && (list[num6][num7].type == 0 || list[num6][num7].stack == 0))
				{
					list6.Add(new Point(num6, num7));
				}
			}
			num6 = 4;
			for (int num8 = list[num6].Length - 1; num8 >= 0; num8--)
			{
				if (!dictionary[num6].Contains(num8) && (list[num6][num8].type == 0 || list[num6][num8].stack == 0))
				{
					list7.Add(new Point(num6, num8));
				}
			}
			return !Player.TryPurchasing(price, list, list3, list2, list4, list5, list6, list7);
		}

		// Token: 0x0600082E RID: 2094 RVA: 0x0030311C File Offset: 0x0030131C
		private static bool TryPurchasing(long price, List<Item[]> inv, List<Point> slotCoins, List<Point> slotsEmpty, List<Point> slotEmptyBank, List<Point> slotEmptyBank2, List<Point> slotEmptyBank3, List<Point> slotEmptyBank4)
		{
			long num = price;
			Dictionary<Point, Item> dictionary = new Dictionary<Point, Item>();
			bool result = false;
			while (num > 0L)
			{
				long num2 = 1000000L;
				for (int i = 0; i < 4; i++)
				{
					if (num >= num2)
					{
						foreach (Point point in slotCoins)
						{
							if (inv[point.X][point.Y].type == 74 - i)
							{
								long num3 = num / num2;
								dictionary[point] = inv[point.X][point.Y].Clone();
								if (num3 < (long)inv[point.X][point.Y].stack)
								{
									inv[point.X][point.Y].stack -= (int)num3;
								}
								else
								{
									inv[point.X][point.Y].SetDefaults(0);
									slotsEmpty.Add(point);
								}
								num -= num2 * (long)(dictionary[point].stack - inv[point.X][point.Y].stack);
							}
						}
					}
					num2 /= 100L;
				}
				if (num > 0L)
				{
					if (slotsEmpty.Count <= 0)
					{
						foreach (KeyValuePair<Point, Item> keyValuePair in dictionary)
						{
							inv[keyValuePair.Key.X][keyValuePair.Key.Y] = keyValuePair.Value.Clone();
						}
						result = true;
						break;
					}
					slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					Point point2 = new Point(-1, -1);
					for (int j = 0; j < inv.Count; j++)
					{
						num2 = 10000L;
						for (int k = 0; k < 3; k++)
						{
							if (num >= num2)
							{
								foreach (Point point3 in slotCoins)
								{
									if (point3.X == j && inv[point3.X][point3.Y].type == 74 - k && inv[point3.X][point3.Y].stack >= 1)
									{
										List<Point> list = slotsEmpty;
										if (j == 1 && slotEmptyBank.Count > 0)
										{
											list = slotEmptyBank;
										}
										if (j == 2 && slotEmptyBank2.Count > 0)
										{
											list = slotEmptyBank2;
										}
										if (j == 3 && slotEmptyBank3.Count > 0)
										{
											list = slotEmptyBank3;
										}
										if (j == 4 && slotEmptyBank4.Count > 0)
										{
											list = slotEmptyBank4;
										}
										Item item = inv[point3.X][point3.Y];
										int num4 = item.stack - 1;
										item.stack = num4;
										if (num4 <= 0)
										{
											inv[point3.X][point3.Y].SetDefaults(0);
											list.Add(point3);
										}
										dictionary[list[0]] = inv[list[0].X][list[0].Y].Clone();
										inv[list[0].X][list[0].Y].SetDefaults(73 - k);
										inv[list[0].X][list[0].Y].stack = 100;
										point2 = list[0];
										list.RemoveAt(0);
										break;
									}
								}
							}
							if (point2.X != -1 || point2.Y != -1)
							{
								break;
							}
							num2 /= 100L;
						}
						for (int l = 0; l < 2; l++)
						{
							if (point2.X == -1 && point2.Y == -1)
							{
								foreach (Point point4 in slotCoins)
								{
									if (point4.X == j && inv[point4.X][point4.Y].type == 73 + l && inv[point4.X][point4.Y].stack >= 1)
									{
										List<Point> list2 = slotsEmpty;
										if (j == 1 && slotEmptyBank.Count > 0)
										{
											list2 = slotEmptyBank;
										}
										if (j == 2 && slotEmptyBank2.Count > 0)
										{
											list2 = slotEmptyBank2;
										}
										if (j == 3 && slotEmptyBank3.Count > 0)
										{
											list2 = slotEmptyBank3;
										}
										if (j == 4 && slotEmptyBank4.Count > 0)
										{
											list2 = slotEmptyBank4;
										}
										Item item2 = inv[point4.X][point4.Y];
										int num4 = item2.stack - 1;
										item2.stack = num4;
										if (num4 <= 0)
										{
											inv[point4.X][point4.Y].SetDefaults(0);
											list2.Add(point4);
										}
										dictionary[list2[0]] = inv[list2[0].X][list2[0].Y].Clone();
										inv[list2[0].X][list2[0].Y].SetDefaults(72 + l);
										inv[list2[0].X][list2[0].Y].stack = 100;
										point2 = list2[0];
										list2.RemoveAt(0);
										break;
									}
								}
							}
						}
						if (point2.X != -1 && point2.Y != -1)
						{
							slotCoins.Add(point2);
							break;
						}
					}
					slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank2.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank3.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank4.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
				}
			}
			return result;
		}

		// Token: 0x0600082F RID: 2095 RVA: 0x003037F0 File Offset: 0x003019F0
		public void AdjTiles()
		{
			int num = 4;
			int num2 = 3;
			if (this.ateArtisanBread)
			{
				num += 4;
				num2 += 4;
			}
			for (int i = 0; i < (int)TileID.Count; i++)
			{
				this.oldAdjTile[i] = this.adjTile[i];
				this.adjTile[i] = false;
			}
			this.oldAdjWater = this.adjWater;
			this.adjWater = false;
			this.oldAdjHoney = this.adjHoney;
			this.adjHoney = false;
			this.oldAdjLava = this.adjLava;
			this.adjLava = false;
			this.alchemyTable = false;
			int num3 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
			int num4 = (int)((this.position.Y + (float)this.height) / 16f);
			for (int j = num3 - num; j <= num3 + num; j++)
			{
				for (int k = num4 - num2; k < num4 + num2; k++)
				{
					if (Main.tile[j, k].active())
					{
						this.adjTile[(int)Main.tile[j, k].type] = true;
						ushort type = Main.tile[j, k].type;
						if (type <= 302)
						{
							if (type <= 133)
							{
								if (type != 77)
								{
									if (type != 133)
									{
										goto IL_1DB;
									}
									this.adjTile[17] = true;
									this.adjTile[77] = true;
									goto IL_1DB;
								}
							}
							else
							{
								if (type == 134)
								{
									this.adjTile[16] = true;
									goto IL_1DB;
								}
								if (type != 302)
								{
									goto IL_1DB;
								}
							}
							this.adjTile[17] = true;
						}
						else
						{
							if (type <= 355)
							{
								if (type != 354)
								{
									if (type != 355)
									{
										goto IL_1DB;
									}
									this.adjTile[13] = true;
									this.adjTile[14] = true;
									this.alchemyTable = true;
									goto IL_1DB;
								}
							}
							else if (type != 469 && type != 487)
							{
								goto IL_1DB;
							}
							this.adjTile[14] = true;
						}
					}
					IL_1DB:
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 0)
					{
						this.adjWater = true;
					}
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 2)
					{
						this.adjHoney = true;
					}
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 1)
					{
						this.adjLava = true;
					}
				}
			}
			if (Main.playerInventory)
			{
				bool flag = false;
				for (int l = 0; l < (int)TileID.Count; l++)
				{
					if (this.oldAdjTile[l] != this.adjTile[l])
					{
						flag = true;
						break;
					}
				}
				if (this.adjWater != this.oldAdjWater)
				{
					flag = true;
				}
				if (this.adjHoney != this.oldAdjHoney)
				{
					flag = true;
				}
				if (this.adjLava != this.oldAdjLava)
				{
					flag = true;
				}
				if (flag)
				{
					Recipe.FindRecipes(false);
				}
			}
		}

		// Token: 0x06000830 RID: 2096 RVA: 0x00303B10 File Offset: 0x00301D10
		public bool IsTileTypeInInteractionRange(int targetTileType, TileReachCheckSettings settings)
		{
			Point point = this.position.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int num;
			int num2;
			settings.GetRanges(this, out num, out num2);
			int num3 = Utils.Clamp<int>(point.X - num + 1, 0, Main.maxTilesX - 1);
			int num4 = Utils.Clamp<int>(point2.X + num - 1, 0, Main.maxTilesX - 1);
			int num5 = Utils.Clamp<int>(point.Y - num2 + 1, 0, Main.maxTilesY - 1);
			int num6 = Utils.Clamp<int>(point2.Y + num2 - 2, 0, Main.maxTilesY - 1);
			for (int i = num3; i <= num4; i++)
			{
				for (int j = num5; j <= num6; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active() && (int)tile.type == targetTileType)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000831 RID: 2097 RVA: 0x00303BEF File Offset: 0x00301DEF
		public void DisplayDollUpdate()
		{
			if (Main.gamePaused)
			{
				return;
			}
			this.UpdateMiscCounter();
		}

		// Token: 0x06000832 RID: 2098 RVA: 0x00303BFF File Offset: 0x00301DFF
		public bool IsColorfulDye(int dye)
		{
			return dye > 0 && ItemID.Sets.ColorfulDyeValues[dye];
		}

		// Token: 0x06000833 RID: 2099 RVA: 0x00303C10 File Offset: 0x00301E10
		public bool ShouldDrawFootball()
		{
			bool result = this.hasFootball && !this.pulley && !this.compositeBackArm.enabled;
			if (this.HeldItem.type == 4743 && this.itemAnimation > 0)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000834 RID: 2100 RVA: 0x00303C60 File Offset: 0x00301E60
		public void PlayerFrame()
		{
			if (this.swimTime > 0)
			{
				this.swimTime--;
				if (!this.wet)
				{
					this.swimTime = 0;
				}
			}
			this.head = this.armor[0].headSlot;
			this.body = this.armor[1].bodySlot;
			this.legs = this.armor[2].legSlot;
			if (this.armor[10].headSlot >= 0)
			{
				this.head = this.armor[10].headSlot;
			}
			if (this.armor[11].bodySlot >= 0)
			{
				this.body = this.armor[11].bodySlot;
			}
			if (this.armor[12].legSlot >= 0)
			{
				this.legs = this.armor[12].legSlot;
			}
			if (!this.dead)
			{
				this.UpdateVisibleAccessories();
			}
			this.wearsRobe = false;
			bool flag = false;
			int num = Player.SetMatch(new Player.SetMatchRequest
			{
				Head = this.head,
				Body = this.body,
				Legs = this.legs,
				Male = this.Male,
				ArmorSlotRequested = 1
			}, ref this.wearsRobe);
			if (num != -1)
			{
				this.legs = num;
			}
			num = Player.SetMatch(new Player.SetMatchRequest
			{
				Head = this.head,
				Body = this.body,
				Legs = this.legs,
				Male = this.Male,
				ArmorSlotRequested = 2
			}, ref flag);
			if (num != -1)
			{
				this.legs = num;
			}
			num = Player.SetMatch(new Player.SetMatchRequest
			{
				Head = this.head,
				Body = this.body,
				Legs = this.legs,
				Male = this.Male,
				ArmorSlotRequested = 0
			}, ref flag);
			if (num != -1)
			{
				this.head = num;
			}
			if (this.body == 93)
			{
				this.shield = 0;
				this.handoff = 0;
			}
			if (this.body > 0 && ArmorIDs.Body.Sets.DisableHandOnAndOffAccDraw[this.body])
			{
				this.handon = 0;
				this.handoff = 0;
			}
			if (this.body > 0 && this.waist > 0 && ArmorIDs.Body.Sets.DisableBeltAccDraw[this.body] && ArmorIDs.Waist.Sets.IsABelt[(int)this.waist])
			{
				this.waist = 0;
			}
			if (!this.dead && this.body >= 0)
			{
				sbyte b = (sbyte)(this.Male ? ArmorIDs.Body.Sets.IncludedCapeBack : ArmorIDs.Body.Sets.IncludedCapeBackFemale)[this.body];
				if (b != -1)
				{
					if (ArmorIDs.Back.Sets.DrawInBackpackLayer[(int)b])
					{
						this.backpack = b;
						this.cBackpack = this.cBody;
					}
					else if (ArmorIDs.Back.Sets.DrawInTailLayer[(int)b])
					{
						this.tail = b;
						this.cTail = this.cBody;
					}
					else if (this.back == -1)
					{
						this.back = b;
						this.cBack = this.cBody;
					}
				}
				sbyte b2 = (sbyte)ArmorIDs.Body.Sets.IncludedCapeFront[this.body];
				if (b2 != -1 && this.front == -1)
				{
					this.front = b2;
					this.cFront = this.cBody;
				}
				ArmorIDs.Body.Sets.IncludeCapeFrontAndBackInfo includeCapeFrontAndBackInfo = ArmorIDs.Body.Sets.IncludeCapeFrontAndBack[this.body];
				if (!includeCapeFrontAndBackInfo.Invalid && this.back == -1 && this.front == -1)
				{
					this.front = includeCapeFrontAndBackInfo.frontCape;
					this.cFront = this.cBody;
					sbyte backCape = includeCapeFrontAndBackInfo.backCape;
					if (ArmorIDs.Back.Sets.DrawInBackpackLayer[(int)backCape])
					{
						this.backpack = backCape;
						this.cBackpack = this.cBody;
					}
					else if (ArmorIDs.Back.Sets.DrawInTailLayer[(int)backCape])
					{
						this.tail = backCape;
						this.cTail = this.cBody;
					}
					else if (!this.sitting.isSitting)
					{
						this.back = backCape;
						this.cBack = this.cBody;
					}
				}
			}
			if (this.legs == 67)
			{
				this.shoe = 0;
			}
			if (this.legs == 140)
			{
				this.shoe = 0;
			}
			bool flag2 = false;
			if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
			{
				this.legs = 20;
				this.body = 21;
				this.head = 38;
				flag2 = true;
			}
			bool flag3 = this.wet && !this.lavaWet && (!this.mount.Active || !this.mount.IsConsideredASlimeMount);
			if (this.merman || this.forceMerman)
			{
				if (!this.hideMerman)
				{
					this.head = 39;
					this.legs = 21;
					this.body = 22;
					flag2 = true;
				}
				if (flag3)
				{
					this.wings = 0;
				}
			}
			this.socialShadowRocketBoots = false;
			this.socialIgnoreLight = false;
			this.socialGhost = false;
			this.armorEffectDrawShadow = false;
			this.armorEffectDrawShadowSubtle = false;
			this.armorEffectDrawOutlines = false;
			this.armorEffectDrawShadowLokis = false;
			this.armorEffectDrawShadowBasilisk = false;
			this.armorEffectDrawOutlinesForbidden = false;
			this.armorEffectDrawShadowEOCShield = false;
			if (!this.isDisplayDollOrInanimate)
			{
				if (this.head == 101 && this.body == 66 && this.legs == 55)
				{
					this.socialGhost = true;
				}
				if (this.head == 156 && this.body == 66 && this.legs == 55)
				{
					this.socialGhost = true;
				}
				this.SetArmorEffectVisuals(this);
			}
			this.hermesStepSound.SoundType = 17;
			this.hermesStepSound.SoundStyle = -1;
			this.hermesStepSound.IntendedCooldown = 9;
			if (this.head == 99 && this.body == 65 && this.legs == 54)
			{
				this.turtleArmor = true;
			}
			if (this.head == 162 && this.body == 170 && this.legs == 105)
			{
				this.spiderArmor = true;
			}
			this.ApplyArmorSoundAndDustChanges();
			if (this.legs == 140)
			{
				this.hermesStepSound.SoundType = 2;
				this.hermesStepSound.SoundStyle = 24;
				this.hermesStepSound.IntendedCooldown = 6;
			}
			if (flag2)
			{
				this.face = -1;
				this.faceFlower = -1;
				this.faceHead = -1;
			}
			if (this.head > 0 && this.face > 0)
			{
				if (ArmorIDs.Face.Sets.OverrideHelmet[(int)this.face])
				{
					this.head = -1;
					this.faceHead = -1;
				}
				else if (!ArmorIDs.Face.Sets.DrawInFaceUnderHairLayer[(int)this.face])
				{
					this.face = -1;
				}
			}
			if (this.head > 0 && this.faceHead > 0 && ArmorIDs.Head.Sets.UseAltFaceHeadDraw[this.head])
			{
				sbyte b3 = (sbyte)ArmorIDs.Face.Sets.AltFaceHead[(int)this.faceHead];
				if (b3 > 0)
				{
					this.faceHead = b3;
				}
			}
			if (this.webbed || this.frozen || this.stoned)
			{
				return;
			}
			if (Main.gamePaused && !Main.gameMenu)
			{
				return;
			}
			if (this.head == 267 && this.body == 236 && (this.legs == 219 || this.legs == 220) && this.miscCounter % 15 == 0 && Main.rand.Next(3) == 0)
			{
				Vector2 vector = base.Center;
				float num2 = 1f + Main.rand.NextFloat() * 0.5f;
				if (Main.rand.Next(2) == 0)
				{
					num2 *= -1f;
				}
				vector += new Vector2(num2 * -25f, -8f);
				Dust dust = Main.dust[Dust.NewDust(vector, 2, 2, 304, 0f, 0f, 100, default(Color), 1f)];
				dust.rotation = Main.rand.NextFloat() * 6.2831855f;
				dust.alpha = 254;
				dust.velocity.X = num2 * 0.2f;
				dust.noGravity = true;
				dust.customData = this;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cBody, this);
			}
			if (!this.isDisplayDollOrInanimate)
			{
				if (((this.body == 68 && this.legs == 57 && this.head == 106) || (this.body == 74 && this.legs == 63 && this.head == 106)) && Main.rand.Next(10) == 0)
				{
					int num3 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, new Color(255, 0, 255), 0.3f);
					Main.dust[num3].fadeIn = 0.8f;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity *= 2f;
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if (this.wings == 27 && this.wingsLogic == this.wings)
				{
					float num4 = 0.4f * this.stealth;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num4 * 0.9f, num4 * 0.2f);
				}
				if (this.head == 5 && this.body == 5 && this.legs == 5)
				{
					this.socialShadowRocketBoots = true;
				}
				if (this.head == 5 && this.body == 5 && this.legs == 5 && Main.rand.Next(10) == 0)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 200, default(Color), 1.2f);
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if (this.head == 76 && this.body == 49 && this.legs == 45)
				{
					this.socialShadowRocketBoots = true;
				}
				if (this.head == 74 && this.body == 48 && this.legs == 44)
				{
					this.socialShadowRocketBoots = true;
				}
				if (this.head == 74 && this.body == 48 && this.legs == 44 && Main.rand.Next(10) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 200, default(Color), 1.2f);
					Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if (this.head == 57 && this.body == 37 && this.legs == 35)
				{
					int maxValue = 10;
					if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f)
					{
						maxValue = 2;
					}
					if (Main.rand.Next(maxValue) == 0)
					{
						int num7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 115, 0f, 0f, 140, default(Color), 0.75f);
						Main.dust[num7].noGravity = true;
						Main.dust[num7].fadeIn = 1.5f;
						Main.dust[num7].velocity *= 0.3f;
						Main.dust[num7].velocity += this.velocity * 0.2f;
						Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
				if (this.head == 6 && this.body == 6 && this.legs == 6 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f && !this.rocketFrame)
				{
					for (int i = 0; i < 2; i++)
					{
						int num8 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num8].noGravity = true;
						Main.dust[num8].noLight = true;
						Dust dust2 = Main.dust[num8];
						dust2.velocity.X = dust2.velocity.X - this.velocity.X * 0.5f;
						Dust dust3 = Main.dust[num8];
						dust3.velocity.Y = dust3.velocity.Y - this.velocity.Y * 0.5f;
						Main.dust[num8].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
				if (this.head == 8 && this.body == 8 && this.legs == 8 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f)
				{
					int num9 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 40, 0f, 0f, 50, default(Color), 1.4f);
					Main.dust[num9].noGravity = true;
					Main.dust[num9].velocity.X = this.velocity.X * 0.25f;
					Main.dust[num9].velocity.Y = this.velocity.Y * 0.25f;
					Main.dust[num9].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if (this.head == 9 && this.body == 9 && this.legs == 9 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f && !this.rocketFrame)
				{
					for (int j = 0; j < 2; j++)
					{
						int num10 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num10].noGravity = true;
						Main.dust[num10].noLight = true;
						Dust dust4 = Main.dust[num10];
						dust4.velocity.X = dust4.velocity.X - this.velocity.X * 0.5f;
						Dust dust5 = Main.dust[num10];
						dust5.velocity.Y = dust5.velocity.Y - this.velocity.Y * 0.5f;
						Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
				if (this.body == 18 && this.legs == 17 && (this.head == 32 || this.head == 33 || this.head == 34) && Main.rand.Next(10) == 0)
				{
					int num11 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, default(Color), 0.3f);
					Main.dust[num11].fadeIn = 0.8f;
					Main.dust[num11].velocity *= 0f;
					Main.dust[num11].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if ((this.body == 24 || this.body == 229) && (this.legs == 23 || this.legs == 212) && (this.head == 43 || this.head == 41 || this.head == 42 || this.head == 254 || this.head == 255 || this.head == 256 || this.head == 257 || this.head == 258) && this.velocity.X != 0f && this.velocity.Y != 0f && Main.rand.Next(10) == 0)
				{
					int num12 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, default(Color), 0.3f);
					Main.dust[num12].fadeIn = 0.8f;
					Main.dust[num12].velocity *= 0f;
					Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				if (this.body == 36 && this.head == 56 && this.velocity.X != 0f && this.velocity.Y == 0f)
				{
					for (int k = 0; k < 2; k++)
					{
						int num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)((this.gravDir == 1f) ? (this.height - 2) : -4)), this.width, 6, 106, 0f, 0f, 100, default(Color), 0.1f);
						Main.dust[num13].fadeIn = 1f;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].velocity *= 0.2f;
						Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
				if (this.body == 27 && this.head == 46 && this.legs == 26 && this.velocity.X != 0f && this.velocity.Y == 0f && this.miscCounter % 2 == 0)
				{
					for (int l = 0; l < 2; l++)
					{
						int num14;
						if (l == 0)
						{
							num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
						}
						else
						{
							num14 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
						}
						Main.dust[num14].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
						Main.dust[num14].noGravity = true;
						Main.dust[num14].noLight = true;
						Main.dust[num14].velocity *= 0.001f;
						Dust dust6 = Main.dust[num14];
						dust6.velocity.Y = dust6.velocity.Y - 0.003f;
						Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
			}
			this.drawingFootball = false;
			if (this.ShouldDrawFootball())
			{
				this.SetCompositeArmBack(true, Player.CompositeArmStretchAmount.Full, 0.31415927f * (float)this.direction * -1f);
				this.drawingFootball = true;
			}
			Item.GetDrawHitbox(this.HeldItem.type, this);
			bool flag4 = this.CanVisuallyHoldItem(this.HeldItem);
			bool flag5 = this.HeldItem.type != 4952;
			if (this.mount.Active)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * 6;
				if (this.mount.Type == 23 || this.mount.Type == 45 || this.mount.Type == 48)
				{
					Rectangle rectangle = this.legFrame;
					this.legFrame.Y = 0;
				}
				if (this.velocity.Y != 0f)
				{
					if (this.mount.FlyTime > 0 && this.jump == 0 && this.controlJump && !this.mount.CanHover())
					{
						if (this.mount.Type == 0)
						{
							if (this.direction > 0)
							{
								if (Main.rand.Next(4) == 0)
								{
									int num15 = Dust.NewDust(new Vector2(base.Center.X - 22f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num15].velocity *= 0.1f;
									Main.dust[num15].noLight = true;
								}
								if (Main.rand.Next(4) == 0)
								{
									int num16 = Dust.NewDust(new Vector2(base.Center.X + 12f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num16].velocity *= 0.1f;
									Main.dust[num16].noLight = true;
								}
							}
							else
							{
								if (Main.rand.Next(4) == 0)
								{
									int num17 = Dust.NewDust(new Vector2(base.Center.X - 32f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num17].velocity *= 0.1f;
									Main.dust[num17].noLight = true;
								}
								if (Main.rand.Next(4) == 0)
								{
									int num18 = Dust.NewDust(new Vector2(base.Center.X + 2f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num18].velocity *= 0.1f;
									Main.dust[num18].noLight = true;
								}
							}
						}
						this.mount.TryBeginningFlight(this, 3);
						this.mount.UpdateFrame(this, 3, this.velocity);
						this.mount.TryLanding(this);
					}
					else if (this.wet)
					{
						this.mount.UpdateFrame(this, 4, this.velocity);
					}
					else
					{
						this.mount.TryBeginningFlight(this, 2);
						this.mount.UpdateFrame(this, 2, this.velocity);
						this.mount.TryLanding(this);
					}
				}
				else
				{
					this.mount.UpdateFrame(this, this.mount.GetIntendedGroundedFrame(this), this.velocity);
				}
			}
			else if (this.legs != 140)
			{
				if (this.swimTime > 0)
				{
					this.legFrameCounter += 2.0;
					while (this.legFrameCounter > 8.0)
					{
						this.legFrameCounter -= 8.0;
						this.legFrame.Y = this.legFrame.Y + this.legFrame.Height;
					}
					if (this.legFrame.Y < this.legFrame.Height * 7)
					{
						this.legFrame.Y = this.legFrame.Height * 19;
					}
					else if (this.legFrame.Y > this.legFrame.Height * 19)
					{
						this.legFrame.Y = this.legFrame.Height * 7;
					}
				}
				else if (this.velocity.Y != 0f || this.grappling[0] > -1)
				{
					this.legFrameCounter = 0.0;
					this.legFrame.Y = this.legFrame.Height * 5;
					if ((this.wings == 22 || this.wings == 28 || this.wings == 45) && this.ShouldDrawWingsThatAreAlwaysAnimated())
					{
						this.legFrame.Y = 0;
					}
				}
				else if (this.velocity.X != 0f)
				{
					if ((this.slippy || this.slippy2 || this.windPushed) && !this.controlLeft && !this.controlRight)
					{
						this.legFrameCounter = 0.0;
						Rectangle rectangle2 = this.legFrame;
						this.legFrame.Y = 0;
					}
					else
					{
						this.legFrameCounter += (double)Math.Abs(this.velocity.X) * 1.3;
						while (this.legFrameCounter > 8.0)
						{
							this.legFrameCounter -= 8.0;
							this.legFrame.Y = this.legFrame.Y + this.legFrame.Height;
						}
						if (this.legFrame.Y < this.legFrame.Height * 7)
						{
							this.legFrame.Y = this.legFrame.Height * 19;
						}
						else if (this.legFrame.Y > this.legFrame.Height * 19)
						{
							this.legFrame.Y = this.legFrame.Height * 7;
						}
					}
				}
				else
				{
					this.legFrameCounter = 0.0;
					Rectangle rectangle3 = this.legFrame;
					this.legFrame.Y = 0;
				}
			}
			if (this.carpetFrame >= 0)
			{
				this.legFrameCounter = 0.0;
				Rectangle rectangle4 = this.legFrame;
				this.legFrame.Y = 0;
			}
			if (this.sandStorm)
			{
				if (this.grappling[0] >= 0)
				{
					this.sandStorm = false;
				}
				if (this.miscCounter % 4 == 0 && this.itemAnimation == 0)
				{
					this.ChangeDir(this.direction * -1);
					if (this.inventory[this.selectedItem].holdStyle == 2)
					{
						if (this.inventory[this.selectedItem].type == 946 || this.inventory[this.selectedItem].type == 4707)
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
						}
						if (this.inventory[this.selectedItem].type == 186)
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
							this.itemRotation = 0.79f * (float)(-(float)this.direction);
						}
					}
				}
				this.legFrameCounter = 0.0;
				Rectangle rectangle5 = this.legFrame;
				this.legFrame.Y = 0;
			}
			else if (this.itemAnimation > 0 && this.inventory[this.selectedItem].useStyle != 10 && flag5)
			{
				if (this.inventory[this.selectedItem].useStyle == 1 || this.inventory[this.selectedItem].type == 0)
				{
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 7)
				{
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.5)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 2)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 3;
				}
				else if (this.inventory[this.selectedItem].useStyle == 11)
				{
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.5)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 4;
					}
					else if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.15)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 9)
				{
					this.bodyFrame.Y = 0;
				}
				else if (this.inventory[this.selectedItem].useStyle == 6)
				{
					float num19 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
					num19 *= 6f;
					if (num19 > 1f)
					{
						num19 = 1f;
					}
					if (num19 >= 0.5f)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 3)
				{
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 4)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 2;
				}
				else if (this.inventory[this.selectedItem].useStyle == 8)
				{
					this.bodyFrame.Y = 0;
				}
				else if (this.inventory[this.selectedItem].useStyle == 12)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 3;
				}
				else if (this.inventory[this.selectedItem].useStyle == 13)
				{
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
					}
					else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height;
					}
				}
				else if (this.inventory[this.selectedItem].useStyle == 5)
				{
					if (this.inventory[this.selectedItem].type == 281 || this.inventory[this.selectedItem].type == 986)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
					else
					{
						float num20 = this.itemRotation * (float)this.direction;
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						if ((double)num20 < -0.75)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 2;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 4;
							}
						}
						if ((double)num20 > 0.6)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 4;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 2;
							}
						}
					}
				}
			}
			else if (this.pulley)
			{
				if (this.pulleyDir == 2)
				{
					this.bodyFrame.Y = this.bodyFrame.Height;
				}
				else
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 2;
				}
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 1 && (!this.wet || !this.inventory[this.selectedItem].noWet) && (!this.happyFunTorchTime || this.inventory[this.selectedItem].createTile != 4))
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 3;
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 2 && (!this.wet || !this.inventory[this.selectedItem].noWet))
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 2;
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 3)
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 3;
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 5)
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 3;
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 7)
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 11;
			}
			else if (flag4 && this.inventory[this.selectedItem].holdStyle == 4 && this.velocity.Y == 0f && this.gravDir == 1f)
			{
				Rectangle rectangle6 = this.bodyFrame;
				this.bodyFrame.Y = 0;
			}
			else if (this.shieldRaised)
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 10;
			}
			else if (this.mount.Active)
			{
				this.bodyFrameCounter = 0.0;
				this.bodyFrame.Y = this.bodyFrame.Height * this.mount.BodyFrame;
			}
			else if (this.grappling[0] >= 0)
			{
				this.sandStorm = false;
				this.CancelAllJumpVisualEffects();
				Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num21 = 0f;
				float num22 = 0f;
				for (int m = 0; m < this.grapCount; m++)
				{
					num21 += Main.projectile[this.grappling[m]].position.X + (float)(Main.projectile[this.grappling[m]].width / 2);
					num22 += Main.projectile[this.grappling[m]].position.Y + (float)(Main.projectile[this.grappling[m]].height / 2);
				}
				num21 /= (float)this.grapCount;
				num22 /= (float)this.grapCount;
				num21 -= vector2.X;
				num22 -= vector2.Y;
				if (num22 < 0f && Math.Abs(num22) > Math.Abs(num21))
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 2;
					if (this.gravDir == -1f)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 4;
					}
				}
				else if (num22 > 0f && Math.Abs(num22) > Math.Abs(num21))
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 4;
					if (this.gravDir == -1f)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
					}
				}
				else
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 3;
				}
			}
			else if (this.wet && this.ShouldFloatInWater)
			{
				this.bodyFrame.Y = this.bodyFrame.Height * 10;
			}
			else if (this.swimTime > 0)
			{
				if (this.swimTime > 20)
				{
					Rectangle rectangle7 = this.bodyFrame;
					this.bodyFrame.Y = 0;
				}
				else if (this.swimTime > 10)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 5;
				}
				else
				{
					Rectangle rectangle8 = this.bodyFrame;
					this.bodyFrame.Y = 0;
				}
			}
			else if (this.velocity.Y != 0f)
			{
				if (this.sliding)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 3;
				}
				else if (this.sandStorm || this.carpetFrame >= 0)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 6;
				}
				else if (this.eocDash > 0)
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 6;
				}
				else if (this.wings > 0)
				{
					if (this.wings == 22 || this.wings == 28 || this.wings == 45)
					{
						this.bodyFrame.Y = 0;
					}
					else if (this.velocity.Y > 0f)
					{
						if (this.controlJump)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 6;
						}
						else
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 5;
						}
					}
					else
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 6;
					}
				}
				else
				{
					this.bodyFrame.Y = this.bodyFrame.Height * 5;
				}
				this.bodyFrameCounter = 0.0;
			}
			else if (this.velocity.X != 0f)
			{
				if (this.legs == 140)
				{
					this.bodyFrameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
					while (this.bodyFrameCounter > 8.0)
					{
						this.bodyFrameCounter -= 8.0;
						this.bodyFrame.Y = this.bodyFrame.Y + this.bodyFrame.Height;
					}
					if (this.bodyFrame.Y < this.bodyFrame.Height * 7)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 19;
					}
					else if (this.bodyFrame.Y > this.bodyFrame.Height * 19)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 7;
					}
				}
				else
				{
					this.bodyFrameCounter += (double)Math.Abs(this.velocity.X) * 1.5;
					this.bodyFrame.Y = this.legFrame.Y;
				}
			}
			else
			{
				this.bodyFrameCounter = 0.0;
				Rectangle rectangle9 = this.bodyFrame;
				this.bodyFrame.Y = 0;
			}
			if (this.legs == 140)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * (this.velocity.Y != 0f).ToInt();
				int num23 = this.bodyFrame.Y / this.bodyFrame.Height;
				if (Main.OffsetsPlayerHeadgear[num23].Y == 0f)
				{
					this.legFrame.Y = this.legFrame.Height * 7;
				}
				if (this.wings == 22 || this.wings == 28)
				{
					this.legFrame.Y = 0;
				}
			}
			if (this.legs == 217 && (this.sitting.isSitting || this.sleeping.isSleeping))
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * 5;
			}
			if (this.head == 259 && !this.skipAnimatingValuesInPlayerFrame)
			{
				this.rabbitOrderFrame.Update();
			}
		}

		// Token: 0x06000835 RID: 2101 RVA: 0x00306995 File Offset: 0x00304B95
		private void CancelAllJumpVisualEffects()
		{
			this.isPerformingJump_Cloud = false;
			this.isPerformingJump_Sandstorm = false;
			this.isPerformingJump_Blizzard = false;
			this.isPerformingJump_Fart = false;
			this.isPerformingJump_Sail = false;
			this.isPerformingJump_Unicorn = false;
			this.isPerformingJump_Santank = false;
		}

		// Token: 0x06000836 RID: 2102 RVA: 0x003069C8 File Offset: 0x00304BC8
		private void CancelAllBootRunVisualEffects()
		{
			this.sailDash = false;
			this.coldDash = false;
			this.desertDash = false;
			this.fairyBoots = false;
			this.hellfireTreads = false;
		}

		// Token: 0x06000837 RID: 2103 RVA: 0x003069F0 File Offset: 0x00304BF0
		private void UpdateFishingBobber(Item item)
		{
			switch (item.type)
			{
			case 5139:
				this.overrideFishingBobber = 986;
				return;
			case 5140:
				this.overrideFishingBobber = 987;
				return;
			case 5141:
				this.overrideFishingBobber = 988;
				return;
			case 5142:
				this.overrideFishingBobber = 989;
				return;
			case 5143:
				this.overrideFishingBobber = 990;
				return;
			case 5144:
				this.overrideFishingBobber = 991;
				return;
			case 5145:
				this.overrideFishingBobber = 992;
				return;
			case 5146:
				this.overrideFishingBobber = 993;
				return;
			default:
				return;
			}
		}

		// Token: 0x06000838 RID: 2104 RVA: 0x00306A90 File Offset: 0x00304C90
		private void UpdateBootVisualEffects(Item item)
		{
			int type = item.type;
			if (type <= 1862)
			{
				if (type <= 405)
				{
					if (type == 54)
					{
						this.CancelAllBootRunVisualEffects();
						return;
					}
					if (type == 128)
					{
						this.vanityRocketBoots = 1;
						return;
					}
					if (type != 405)
					{
						return;
					}
				}
				else if (type != 898)
				{
					if (type == 1579)
					{
						this.CancelAllBootRunVisualEffects();
						this.coldDash = true;
						return;
					}
					if (type != 1862)
					{
						return;
					}
					this.CancelAllBootRunVisualEffects();
					this.vanityRocketBoots = 3;
					return;
				}
				this.CancelAllBootRunVisualEffects();
				this.vanityRocketBoots = 2;
				return;
			}
			if (type <= 3993)
			{
				if (type == 3200 || type == 3990)
				{
					this.CancelAllBootRunVisualEffects();
					this.sailDash = true;
					return;
				}
				if (type != 3993)
				{
					return;
				}
				this.CancelAllBootRunVisualEffects();
				this.fairyBoots = true;
				this.vanityRocketBoots = 2;
				return;
			}
			else
			{
				if (type == 4055)
				{
					this.CancelAllBootRunVisualEffects();
					this.desertDash = true;
					return;
				}
				if (type == 4874)
				{
					this.CancelAllBootRunVisualEffects();
					this.vanityRocketBoots = 5;
					this.hellfireTreads = true;
					return;
				}
				if (type != 5000)
				{
					return;
				}
				this.CancelAllBootRunVisualEffects();
				this.vanityRocketBoots = 4;
				return;
			}
		}

		// Token: 0x06000839 RID: 2105 RVA: 0x00306BB0 File Offset: 0x00304DB0
		private void UpdateVisibleAccessories()
		{
			for (int i = 3; i < 10; i++)
			{
				if (this.IsItemSlotUnlockedAndUsable(i))
				{
					Item item = this.armor[i];
					if (this.eocDash > 0 && this.shield == -1 && item.shieldSlot != -1)
					{
						this.shield = item.shieldSlot;
						if (this.cShieldFallback != -1)
						{
							this.cShield = this.cShieldFallback;
						}
					}
					if (this.shieldRaised && this.shield == -1 && item.shieldSlot != -1)
					{
						this.shield = item.shieldSlot;
						if (this.cShieldFallback != -1)
						{
							this.cShield = this.cShieldFallback;
						}
					}
					if (!this.ItemIsVisuallyIncompatible(item))
					{
						if (item.wingSlot > 0)
						{
							if (this.hideVisibleAccessory[i] && (this.velocity.Y == 0f || this.mount.Active))
							{
								goto IL_EC;
							}
							this.wings = (int)item.wingSlot;
						}
						if (!this.hideVisibleAccessory[i])
						{
							this.UpdateVisibleAccessory(i, item);
						}
					}
				}
				IL_EC:;
			}
			for (int j = 13; j < 20; j++)
			{
				if (this.IsItemSlotUnlockedAndUsable(j))
				{
					Item item2 = this.armor[j];
					if (!this.ItemIsVisuallyIncompatible(item2))
					{
						this.UpdateVisibleAccessory(j, item2);
					}
				}
			}
			int type = this.HeldItem.type;
			if (type == 4760 && this.ownedProjectileCounts[866] < 1)
			{
				this.shield = 9;
				this.cShield = 0;
			}
		}

		// Token: 0x0600083A RID: 2106 RVA: 0x00306D1C File Offset: 0x00304F1C
		private bool ItemIsVisuallyIncompatible(Item item)
		{
			return (this.compositeBackArm.enabled && item.shieldSlot > 0) || (item.shieldSlot > 0 && ItemID.Sets.IsFood[this.HeldItem.type]) || (this.body == 96 && item.backSlot > 0 && (int)item.backSlot < ArmorIDs.Back.Count && ArmorIDs.Back.Sets.DrawInTailLayer[(int)item.backSlot]) || (this.legs > 0 && ArmorIDs.Legs.Sets.IncompatibleWithFrogLeg[this.legs] && item.shoeSlot == 15) || (item.balloonSlot == 18 && (this.body == 93 || this.body == 83));
		}

		// Token: 0x0600083B RID: 2107 RVA: 0x00306DD3 File Offset: 0x00304FD3
		private bool IsVisibleCapeBad(int accFrontSlot)
		{
			return accFrontSlot - 1 <= 4 || accFrontSlot == 8;
		}

		// Token: 0x0600083C RID: 2108 RVA: 0x00306DE4 File Offset: 0x00304FE4
		private void UpdateVisibleAccessory(int itemSlot, Item item)
		{
			if (item.stringColor > 0)
			{
				this.stringColor = item.stringColor;
			}
			if (item.handOnSlot > 0)
			{
				this.handon = item.handOnSlot;
			}
			if (item.handOffSlot > 0)
			{
				this.handoff = item.handOffSlot;
			}
			if (item.backSlot > 0)
			{
				if (ArmorIDs.Back.Sets.DrawInBackpackLayer[(int)item.backSlot])
				{
					this.backpack = item.backSlot;
				}
				else if (ArmorIDs.Back.Sets.DrawInTailLayer[(int)item.backSlot])
				{
					this.tail = item.backSlot;
				}
				else
				{
					this.back = item.backSlot;
					this.front = -1;
				}
			}
			if (item.frontSlot > 0)
			{
				this.front = item.frontSlot;
			}
			if (this.sitting.isSitting)
			{
				this.back = -1;
			}
			if (item.shoeSlot > 0)
			{
				this.shoe = item.shoeSlot;
				if (!this.Male && ArmorIDs.Shoe.Sets.MaleToFemaleID[(int)this.shoe] > 0)
				{
					this.shoe = (sbyte)ArmorIDs.Shoe.Sets.MaleToFemaleID[(int)this.shoe];
				}
			}
			if (item.waistSlot > 0)
			{
				this.waist = item.waistSlot;
			}
			if (item.shieldSlot > 0)
			{
				this.shield = item.shieldSlot;
			}
			if (item.neckSlot > 0)
			{
				this.neck = item.neckSlot;
			}
			if (item.faceSlot > 0)
			{
				if (ArmorIDs.Face.Sets.DrawInFaceHeadLayer[(int)item.faceSlot])
				{
					this.faceHead = item.faceSlot;
				}
				else if (ArmorIDs.Face.Sets.DrawInFaceFlowerLayer[(int)item.faceSlot])
				{
					this.faceFlower = item.faceSlot;
				}
				else
				{
					this.face = item.faceSlot;
				}
			}
			if (item.balloonSlot > 0)
			{
				if (ArmorIDs.Balloon.Sets.DrawInFrontOfBackArmLayer[(int)item.balloonSlot])
				{
					this.balloonFront = item.balloonSlot;
				}
				else
				{
					this.balloon = item.balloonSlot;
				}
			}
			if (item.beardSlot > 0)
			{
				this.beard = item.beardSlot;
			}
			if (item.wingSlot > 0)
			{
				this.wings = (int)item.wingSlot;
			}
			if (item.type == 3580)
			{
				this.yoraiz0rEye = itemSlot - 2;
			}
			if (item.type == 3581)
			{
				this.yoraiz0rDarkness = true;
			}
			if (item.type == 3929)
			{
				this.leinforsHair = true;
			}
			if (item.type == 4404)
			{
				this.hasFloatingTube = true;
			}
			if (item.type == 4563)
			{
				this.hasUnicornHorn = true;
			}
			if (item.type == 1987)
			{
				this.hasAngelHalo = true;
			}
			if (item.type == 5075)
			{
				this.hasRainbowCursor = true;
			}
		}

		// Token: 0x0600083D RID: 2109 RVA: 0x00307064 File Offset: 0x00305264
		public void SetArmorEffectVisuals(Player drawPlayer)
		{
			if (drawPlayer.head == 111 && drawPlayer.body == 73 && drawPlayer.legs == 62)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 && drawPlayer.velocity.Y != 0f && !drawPlayer.SlimeDontHyperJump)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 2f)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 44 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 4f)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 45 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed * 0.9f)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.RunSpeed / 2f)
			{
				this.armorEffectDrawShadowBasilisk = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 48)
			{
				this.armorEffectDrawOutlines = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.body == 67 && drawPlayer.legs == 56 && drawPlayer.head >= 103 && drawPlayer.head <= 105)
			{
				this.armorEffectDrawShadow = true;
			}
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				this.armorEffectDrawShadowSubtle = true;
			}
			if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
			{
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlinesForbidden = true;
			}
			if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
			{
				this.armorEffectDrawShadow = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
			{
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 209 && drawPlayer.legs == 159)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.eocDash > 0)
			{
				this.armorEffectDrawShadowEOCShield = true;
			}
			else if (drawPlayer.dashDelay < 0)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.dye[0].dye == 30 && drawPlayer.dye[1].dye == 30 && drawPlayer.dye[2].dye == 30 && drawPlayer.head == 4 && drawPlayer.body == 27 && drawPlayer.legs == 26)
			{
				this.armorEffectDrawShadow = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
			{
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 17 && drawPlayer.legs == 16 && (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.body == 19 && drawPlayer.legs == 18 && (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
			{
				this.armorEffectDrawOutlines = true;
			}
			if ((drawPlayer.body == 24 || drawPlayer.body == 229) && (drawPlayer.legs == 23 || drawPlayer.legs == 212) && (drawPlayer.head == 43 || drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 254 || drawPlayer.head == 255 || drawPlayer.head == 256 || drawPlayer.head == 257 || drawPlayer.head == 258))
			{
				this.armorEffectDrawOutlines = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
			{
				int num = drawPlayer.body;
			}
			if (drawPlayer.body == 36 && drawPlayer.head == 56)
			{
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 267)
			{
				this.yoraiz0rDarkness = true;
			}
			if (drawPlayer.stoned || drawPlayer.stealth != 1f)
			{
				this.armorEffectDrawOutlines = false;
				this.armorEffectDrawShadow = false;
				this.armorEffectDrawShadowSubtle = false;
			}
		}

		// Token: 0x0600083E RID: 2110 RVA: 0x00307790 File Offset: 0x00305990
		public static int SetMatch(Player.SetMatchRequest request, ref bool somethingSpecial)
		{
			int armorSlotRequested = request.ArmorSlotRequested;
			bool male = request.Male;
			int num;
			switch (armorSlotRequested)
			{
			default:
				num = request.Head;
				break;
			case 1:
				num = request.Body;
				break;
			case 2:
				num = request.Legs;
				break;
			}
			int num2 = -1;
			if (armorSlotRequested == 0 && num == 201)
			{
				num2 = (male ? 201 : 202);
			}
			if (armorSlotRequested == 1)
			{
				bool flag = true;
				if (num <= 90)
				{
					if (num <= 42)
					{
						if (num <= 36)
						{
							if (num != 15)
							{
								if (num == 36)
								{
									num2 = 89;
								}
							}
							else
							{
								num2 = 88;
							}
						}
						else if (num != 41)
						{
							if (num == 42)
							{
								num2 = 90;
							}
						}
						else
						{
							num2 = 97;
						}
					}
					else if (num <= 77)
					{
						switch (num)
						{
						case 58:
							num2 = 91;
							break;
						case 59:
							num2 = 92;
							break;
						case 60:
							num2 = 93;
							break;
						case 61:
							num2 = 94;
							break;
						case 62:
							num2 = 95;
							break;
						case 63:
							num2 = 96;
							break;
						default:
							if (num == 77)
							{
								num2 = 121;
							}
							break;
						}
					}
					else if (num != 81)
					{
						if (num != 88)
						{
							if (num == 90)
							{
								num2 = 166;
							}
						}
						else
						{
							num2 = 168;
						}
					}
					else if (request.Legs == 0)
					{
						num2 = 169;
					}
				}
				else if (num <= 191)
				{
					if (num <= 167)
					{
						if (num != 93)
						{
							switch (num)
							{
							case 165:
								if (male)
								{
									num2 = 118;
								}
								else
								{
									num2 = 99;
								}
								break;
							case 166:
								flag = false;
								if (male)
								{
									num2 = 119;
								}
								else
								{
									num2 = 100;
								}
								break;
							case 167:
								if (!male)
								{
									num2 = 102;
								}
								else
								{
									num2 = 101;
								}
								break;
							}
						}
						else
						{
							num2 = 165;
						}
					}
					else
					{
						switch (num)
						{
						case 180:
							num2 = 115;
							break;
						case 181:
							num2 = 116;
							break;
						case 182:
							break;
						case 183:
							num2 = (male ? 136 : 123);
							break;
						default:
							if (num == 191)
							{
								num2 = 131;
							}
							break;
						}
					}
				}
				else if (num <= 215)
				{
					if (num != 213)
					{
						if (num == 215)
						{
							num2 = 189;
						}
					}
					else
					{
						num2 = 187;
					}
				}
				else
				{
					switch (num)
					{
					case 219:
						num2 = 196;
						break;
					case 220:
					case 222:
						break;
					case 221:
						num2 = 199;
						break;
					case 223:
						num2 = 204;
						break;
					default:
						switch (num)
						{
						case 231:
							num2 = 214;
							break;
						case 232:
							num2 = 215;
							break;
						case 233:
							num2 = 216;
							break;
						default:
							if (num == 241)
							{
								num2 = 229;
							}
							break;
						}
						break;
					}
				}
				if (num2 != -1)
				{
					somethingSpecial = flag;
				}
			}
			if (armorSlotRequested == 2)
			{
				if (num <= 180)
				{
					if (num <= 132)
					{
						if (num <= 83)
						{
							if (num != 57)
							{
								if (num == 83)
								{
									if (male)
									{
										num2 = 117;
									}
								}
							}
							else if (male)
							{
								num2 = 137;
							}
						}
						else if (num != 84)
						{
							if (num == 132)
							{
								if (male)
								{
									num2 = 135;
								}
							}
						}
						else if (male)
						{
							num2 = 120;
						}
					}
					else if (num <= 154)
					{
						if (num != 146)
						{
							if (num == 154)
							{
								num2 = (male ? 155 : 154);
							}
						}
						else
						{
							num2 = (male ? 146 : 147);
						}
					}
					else if (num != 158)
					{
						if (num == 180)
						{
							if (!male)
							{
								num2 = 179;
							}
						}
					}
					else if (male)
					{
						num2 = 157;
					}
				}
				else if (num <= 197)
				{
					if (num <= 191)
					{
						if (num != 184)
						{
							if (num == 191)
							{
								if (!male)
								{
									num2 = 192;
								}
							}
						}
						else if (!male)
						{
							num2 = 183;
						}
					}
					else if (num != 193)
					{
						if (num == 197)
						{
							if (!male)
							{
								num2 = 198;
							}
						}
					}
					else if (!male)
					{
						num2 = 194;
					}
				}
				else if (num <= 208)
				{
					if (num != 203)
					{
						if (num == 208)
						{
							if (!male)
							{
								num2 = 207;
							}
						}
					}
					else if (!male)
					{
						num2 = 202;
					}
				}
				else if (num != 219)
				{
					if (num == 232)
					{
						if (!male)
						{
							num2 = 233;
						}
					}
				}
				else if (!male)
				{
					num2 = 220;
				}
			}
			return num2;
		}

		// Token: 0x0600083F RID: 2111 RVA: 0x00307C6C File Offset: 0x00305E6C
		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			try
			{
				this._funkytownAchievementCheckCooldown = 100;
				this.environmentBuffImmunityTimer = 4;
				if (Style != 10)
				{
					this.RemoveAllGrapplingHooks();
				}
				this.StopVanityActions(true);
				if (this.shimmering || this.shimmerWet)
				{
					this.shimmering = false;
					this.shimmerWet = false;
					this.wet = false;
					this.ClearBuff(353);
				}
				int extraInfo2 = 0;
				if (Style == 4)
				{
					extraInfo2 = this.lastPortalColorIndex;
				}
				if (Style == 9)
				{
					this.lastTeleportPylonStyleUsed = extraInfo;
					extraInfo2 = this.lastTeleportPylonStyleUsed;
				}
				float num = MathHelper.Clamp(1f - this.teleportTime * 0.99f, 0.01f, 1f);
				Vector2 position = this.position;
				Main.TeleportEffect(this.getRect(), Style, extraInfo2, num, TeleportationSide.Entry, newPos);
				float num2 = Vector2.Distance(this.position, newPos);
				PressurePlateHelper.UpdatePlayerPosition(this);
				this.position = newPos;
				if (Style == 8)
				{
					SoundEngine.PlaySound(SoundID.Item6, position);
					SoundEngine.PlaySound(SoundID.Item6, newPos);
				}
				this.fallStart = (int)(this.position.Y / 16f);
				if (this.whoAmI == Main.myPlayer)
				{
					bool flag = false;
					if (num2 < new Vector2((float)Main.screenWidth, (float)Main.screenHeight).Length() / 2f + 100f)
					{
						int time = 0;
						if (Style == 1)
						{
							time = 10;
						}
						Main.SetCameraLerp(0.1f, time);
						flag = true;
					}
					else
					{
						NPC.ResetNetOffsets();
						Main.BlackFadeIn = 255;
						Lighting.Clear();
						Main.screenLastPosition = Main.screenPosition;
						Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
						Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
						Main.instantBGTransitionCounter = 10;
						this.ForceUpdateBiomes();
					}
					if (num > 0.1f || !flag || Style != 0)
					{
						if (Main.mapTime < 5)
						{
							Main.mapTime = 5;
						}
						Main.maxQ = true;
						Main.renderNow = true;
					}
				}
				if (Style == 4)
				{
					this.lastPortalColorIndex = extraInfo;
					extraInfo2 = this.lastPortalColorIndex;
					this.portalPhysicsFlag = true;
					this.gravity = 0f;
				}
				PressurePlateHelper.UpdatePlayerPosition(this);
				this.ResetAdvancedShadows();
				for (int i = 0; i < 3; i++)
				{
					this.UpdateSocialShadow();
				}
				this.oldPosition = this.position + this.BlehOldPositionFixer;
				Main.TeleportEffect(this.getRect(), Style, extraInfo2, num, TeleportationSide.Exit, position);
				this.teleportTime = 1f;
				this.teleportStyle = Style;
			}
			catch
			{
			}
		}

		// Token: 0x06000840 RID: 2112 RVA: 0x00307F14 File Offset: 0x00306114
		public void DoPotionOfReturnTeleportationAndSetTheComebackPoint()
		{
			this.RemoveAllGrapplingHooks();
			this.PotionOfReturnOriginalUsePosition = new Vector2?(base.Bottom);
			bool flag = this.immune;
			int num = this.immuneTime;
			this.StopVanityActions(false);
			this.Spawn(PlayerSpawnContext.RecallFromItem);
			this.PotionOfReturnHomePosition = new Vector2?(base.Bottom);
			NetMessage.SendData(13, -1, this.whoAmI, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			this.immune = flag;
			this.immuneTime = num;
		}

		// Token: 0x06000841 RID: 2113 RVA: 0x00307F9C File Offset: 0x0030619C
		public void DoPotionOfReturnReturnToOriginalUsePosition()
		{
			if (this.PotionOfReturnOriginalUsePosition == null)
			{
				return;
			}
			Vector2 vector = this.PotionOfReturnOriginalUsePosition.Value + base.Size * new Vector2(-0.5f, -1f);
			int num = 8;
			this.Teleport(vector, num, 0);
			NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector.X, vector.Y, num, 0, 0);
			this.PotionOfReturnOriginalUsePosition = null;
			this.PotionOfReturnHomePosition = null;
		}

		// Token: 0x06000842 RID: 2114 RVA: 0x00308028 File Offset: 0x00306228
		public void AutoFinchStaff()
		{
			int num = this.FindItem(4281);
			if (num != -1)
			{
				Item item = this.inventory[num];
				this.AddBuff(item.buffType, 3600, false, false);
			}
		}

		// Token: 0x06000843 RID: 2115 RVA: 0x00308064 File Offset: 0x00306264
		public void Spawn(PlayerSpawnContext context)
		{
			Main.LocalPlayer.creativeInterface = false;
			this._funkytownAchievementCheckCooldown = 100;
			bool flag = false;
			if (context == PlayerSpawnContext.SpawningIntoWorld)
			{
				if (Main.netMode == 0 && this.unlockedBiomeTorches)
				{
					NPC npc = new NPC();
					npc.SetDefaults(664, default(NPCSpawnParams));
					Main.BestiaryTracker.Kills.RegisterKill(npc);
				}
				if (this.dead)
				{
					Player.AdjustRespawnTimerForWorldJoining(this);
					if (this.dead)
					{
						flag = true;
					}
				}
			}
			this.StopVanityActions(true);
			if (this.whoAmI == Main.myPlayer)
			{
				Main.NotifyOfEvent(GameNotificationType.SpawnOrDeath);
			}
			if (this.whoAmI == Main.myPlayer)
			{
				if (Main.mapTime < 5)
				{
					Main.mapTime = 5;
				}
				Main.instantBGTransitionCounter = 10;
				this.FindSpawn();
				if (!Player.CheckSpawn(this.SpawnX, this.SpawnY))
				{
					this.SpawnX = -1;
					this.SpawnY = -1;
				}
				Main.maxQ = true;
				NPC.ResetNetOffsets();
			}
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(12, -1, -1, null, Main.myPlayer, (float)((byte)context), 0f, 0f, 0, 0, 0);
			}
			this.headPosition = Vector2.Zero;
			this.bodyPosition = Vector2.Zero;
			this.legPosition = Vector2.Zero;
			this.headRotation = 0f;
			this.bodyRotation = 0f;
			this.legRotation = 0f;
			this.rabbitOrderFrame.Reset();
			this.lavaTime = this.lavaMax;
			if (!flag)
			{
				if (this.statLife <= 0)
				{
					int num = this.statLifeMax2 / 2;
					this.statLife = 100;
					if (num > this.statLife)
					{
						this.statLife = num;
					}
					this.breath = this.breathMax;
					if (this.spawnMax)
					{
						this.statLife = this.statLifeMax2;
						this.statMana = this.statManaMax2;
					}
				}
				this.immune = true;
				this.dead = false;
				this.immuneTime = 0;
			}
			this.active = true;
			Vector2 position = this.position;
			if (this.SpawnX >= 0 && this.SpawnY >= 0)
			{
				int spawnX = this.SpawnX;
				int spawnY = this.SpawnY;
				this.Spawn_SetPosition(this.SpawnX, this.SpawnY);
			}
			else
			{
				this.Spawn_SetPositionAtWorldSpawn();
			}
			this.wet = false;
			this.wetCount = 0;
			this.lavaWet = false;
			this.fallStart = (int)(this.position.Y / 16f);
			this.fallStart2 = this.fallStart;
			this.velocity.X = 0f;
			this.velocity.Y = 0f;
			this.ResetAdvancedShadows();
			for (int i = 0; i < 3; i++)
			{
				this.UpdateSocialShadow();
			}
			this.oldPosition = this.position + this.BlehOldPositionFixer;
			this.SetTalkNPC(-1, false);
			if (this.whoAmI == Main.myPlayer)
			{
				Main.npcChatCornerItem = 0;
			}
			if (!flag)
			{
				if (this.pvpDeath)
				{
					this.pvpDeath = false;
					this.immuneTime = 300;
					this.statLife = this.statLifeMax;
				}
				else if (context == PlayerSpawnContext.ReviveFromDeath)
				{
					this.immuneTime = 180;
				}
				else
				{
					this.immuneTime = 60;
				}
				if (this.immuneTime > 0 && !this.hostile)
				{
					this.immuneNoBlink = true;
				}
			}
			if (this.whoAmI == Main.myPlayer)
			{
				bool flag2 = true;
				bool flag3 = Vector2.Distance(position, this.position) < new Vector2((float)Main.screenWidth, (float)Main.screenHeight).Length() / 2f + 100f;
				if (flag3)
				{
					Main.SetCameraLerp(0.1f, 0);
					flag3 = true;
				}
				else
				{
					Main.BlackFadeIn = 255;
					Lighting.Clear();
					Main.screenLastPosition = Main.screenPosition;
					Main.instantBGTransitionCounter = 10;
				}
				if (!flag3)
				{
					Main.renderNow = true;
				}
				if (Main.netMode == 1)
				{
					Netplay.AddCurrentServerToRecentList();
				}
				if (flag2 && !flag3)
				{
					Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
					Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
					this.ForceUpdateBiomes();
				}
			}
			if (flag)
			{
				this.immuneAlpha = 255;
			}
			this.UpdateGraveyard(true);
			if (this.whoAmI == Main.myPlayer && context == PlayerSpawnContext.ReviveFromDeath && this.difficulty == 3)
			{
				this.AutoFinchStaff();
			}
			if (this.whoAmI == Main.myPlayer && context == PlayerSpawnContext.SpawningIntoWorld)
			{
				Main.ReleaseHostAndPlayProcess();
				this.RefreshItems(true);
				this.SetPlayerDataToOutOfClassFields();
				Main.LocalGolfState.SetScoreTime();
				Main.ActivePlayerFileData.StartPlayTimer();
				Player.Hooks.EnterWorld(this.whoAmI);
			}
		}

		// Token: 0x06000844 RID: 2116 RVA: 0x003084F8 File Offset: 0x003066F8
		public bool Spawn_GetPositionAtWorldSpawn(ref int floorX, ref int floorY)
		{
			int spawnTileX = Main.spawnTileX;
			int num = Main.spawnTileY;
			if (this.Spawn_IsAreaAValidWorldSpawn(spawnTileX, num))
			{
				num = Player.Spawn_DescendFromDefaultSpace(spawnTileX, num);
				floorX = spawnTileX;
				floorY = num;
				return false;
			}
			bool flag = false;
			if (!flag)
			{
				for (int i = 0; i < 30; i++)
				{
					if (this.Spawn_IsAreaAValidWorldSpawn(spawnTileX, num - i))
					{
						num -= i;
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				for (int j = 0; j < 30; j++)
				{
					if (this.Spawn_IsAreaAValidWorldSpawn(spawnTileX, num - j))
					{
						num -= j;
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				floorX = spawnTileX;
				floorY = num;
				return true;
			}
			return false;
		}

		// Token: 0x06000845 RID: 2117 RVA: 0x00308588 File Offset: 0x00306788
		private void Spawn_SetPositionAtWorldSpawn()
		{
			int spawnTileX = Main.spawnTileX;
			int spawnTileY = Main.spawnTileY;
			bool flag = this.Spawn_GetPositionAtWorldSpawn(ref spawnTileX, ref spawnTileY);
			this.Spawn_SetPosition(spawnTileX, spawnTileY);
			if (flag && !this.Spawn_IsAreaAValidWorldSpawn(spawnTileX, spawnTileY))
			{
				Player.Spawn_ForceClearArea(spawnTileX, spawnTileY);
			}
		}

		// Token: 0x06000846 RID: 2118 RVA: 0x003085C8 File Offset: 0x003067C8
		private static int Spawn_DescendFromDefaultSpace(int x, int y)
		{
			for (int i = 0; i < 50; i++)
			{
				bool flag = false;
				for (int j = -1; j <= 1; j++)
				{
					Tile tile = Main.tile[x + j, y + i];
					if (tile.nactive() && (Main.tileSolid[(int)tile.type] || !Main.tileSolidTop[(int)tile.type]))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					y += i;
					break;
				}
			}
			return y;
		}

		// Token: 0x06000847 RID: 2119 RVA: 0x00308634 File Offset: 0x00306834
		private static void Spawn_ForceClearArea(int floorX, int floorY)
		{
			for (int i = floorX - 1; i < floorX + 2; i++)
			{
				for (int j = floorY - 3; j < floorY; j++)
				{
					if (Main.tile[i, j] != null)
					{
						if (Main.tile[i, j].nactive() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
						{
							WorldGen.KillTile(i, j, false, false, false);
						}
						if (Main.tile[i, j].liquid > 0)
						{
							Main.tile[i, j].lava(false);
							Main.tile[i, j].liquid = 0;
							WorldGen.SquareTileFrame(i, j, true);
						}
					}
				}
			}
		}

		// Token: 0x06000848 RID: 2120 RVA: 0x0030870C File Offset: 0x0030690C
		private bool Spawn_IsAreaAValidWorldSpawn(int floorX, int floorY)
		{
			for (int i = floorX - 1; i < floorX + 2; i++)
			{
				for (int j = floorY - 3; j < floorY; j++)
				{
					if (Main.tile[i, j] != null)
					{
						if (Main.tile[i, j].nactive() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
						{
							return false;
						}
						if (Main.tile[i, j].liquid > 0)
						{
							return false;
						}
					}
				}
			}
			return true;
		}

		// Token: 0x06000849 RID: 2121 RVA: 0x003087A6 File Offset: 0x003069A6
		private void Spawn_SetPosition(int floorX, int floorY)
		{
			this.position.X = (float)(floorX * 16 + 8 - this.width / 2);
			this.position.Y = (float)(floorY * 16 - this.height);
		}

		// Token: 0x0600084A RID: 2122 RVA: 0x003087DC File Offset: 0x003069DC
		public void SetImmuneTimeForAllTypes(int time)
		{
			this.immune = true;
			this.immuneTime = time;
			for (int i = 0; i < this.hurtCooldowns.Length; i++)
			{
				this.hurtCooldowns[i] = time;
			}
		}

		// Token: 0x0600084B RID: 2123 RVA: 0x00308814 File Offset: 0x00306A14
		public void ShadowDodge()
		{
			this.SetImmuneTimeForAllTypes(this.longInvince ? 120 : 80);
			if (this.whoAmI == Main.myPlayer)
			{
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (this.buffTime[i] > 0 && this.buffType[i] == 59)
					{
						this.DelBuff(i);
					}
				}
				this.PutHallowedArmorSetBonusOnCooldown();
				NetMessage.SendData(62, -1, -1, null, this.whoAmI, 2f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600084C RID: 2124 RVA: 0x00308898 File Offset: 0x00306A98
		private void PutHallowedArmorSetBonusOnCooldown()
		{
			this.shadowDodgeTimer = 1800;
		}

		// Token: 0x0600084D RID: 2125 RVA: 0x003088A8 File Offset: 0x00306AA8
		public void BrainOfConfusionDodge()
		{
			this.SetImmuneTimeForAllTypes(this.longInvince ? 120 : 80);
			this.brainOfConfusionDodgeAnimationCounter = 300;
			if (this.whoAmI == Main.myPlayer)
			{
				this.AddBuff(321, 240, false, false);
				NetMessage.SendData(62, -1, -1, null, this.whoAmI, 4f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600084E RID: 2126 RVA: 0x00308918 File Offset: 0x00306B18
		public void NinjaDodge()
		{
			this.SetImmuneTimeForAllTypes(this.longInvince ? 120 : 80);
			for (int i = 0; i < 100; i++)
			{
				int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
				Dust dust = Main.dust[num];
				dust.position.X = dust.position.X + (float)Main.rand.Next(-20, 21);
				Dust dust2 = Main.dust[num];
				dust2.position.Y = dust2.position.Y + (float)Main.rand.Next(-20, 21);
				Main.dust[num].velocity *= 0.4f;
				Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
				Main.dust[num].shader = GameShaders.Armor.GetSecondaryShader(this.cWaist, this);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
					Main.dust[num].noGravity = true;
				}
			}
			int num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			if (this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(62, -1, -1, null, this.whoAmI, 1f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600084F RID: 2127 RVA: 0x00308F1C File Offset: 0x0030711C
		public void ApplyArmorSoundAndDustChanges()
		{
			int num = this.armor[0].headSlot;
			int num2 = this.armor[1].bodySlot;
			int num3 = this.armor[2].legSlot;
			if (this.armor[10].headSlot >= 0)
			{
				num = this.armor[10].headSlot;
			}
			if (this.armor[11].bodySlot >= 0)
			{
				num2 = this.armor[11].bodySlot;
			}
			if (this.armor[12].legSlot >= 0)
			{
				num3 = this.armor[12].legSlot;
			}
			if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
			{
				num3 = 20;
				num2 = 21;
				num = 38;
			}
			if ((num == 75 || num == 7) && num2 == 7 && num3 == 7)
			{
				this.boneArmor = true;
			}
			if (num2 == 27 && num == 46 && num3 == 26)
			{
				this.frostArmor = true;
			}
		}

		// Token: 0x06000850 RID: 2128 RVA: 0x00309004 File Offset: 0x00307204
		public double Hurt(PlayerDeathReason damageSource, int Damage, int hitDirection, bool pvp = false, bool quiet = false, bool Crit = false, int cooldownCounter = -1, bool dodgeable = true)
		{
			if (this.shimmering && Player.AllowShimmerDodge(damageSource, cooldownCounter, dodgeable))
			{
				return 0.0;
			}
			if (this.creativeGodMode)
			{
				return 0.0;
			}
			bool flag = !this.immune;
			bool flag2 = false;
			int hitContext = cooldownCounter;
			switch (cooldownCounter)
			{
			case 0:
			case 1:
			case 3:
			case 4:
				flag = (this.hurtCooldowns[cooldownCounter] <= 0);
				break;
			case 2:
				flag2 = true;
				cooldownCounter = -1;
				break;
			}
			if (flag)
			{
				if (dodgeable)
				{
					if (this.whoAmI == Main.myPlayer && this.blackBelt && Main.rand.Next(10) == 0)
					{
						this.NinjaDodge();
						return 0.0;
					}
					if (this.whoAmI == Main.myPlayer && this.brainOfConfusionItem != null && !this.brainOfConfusionItem.IsAir && Main.rand.Next(6) == 0 && this.FindBuffIndex(321) == -1)
					{
						this.BrainOfConfusionDodge();
						return 0.0;
					}
					if (this.whoAmI == Main.myPlayer && this.shadowDodge)
					{
						this.ShadowDodge();
						return 0.0;
					}
				}
				if (this.whoAmI == Main.myPlayer && this.panic)
				{
					this.AddBuff(63, 480, true, false);
				}
				if (this.whoAmI == Main.myPlayer && this.setSquireT2)
				{
					this.AddBuff(205, 300, true, false);
				}
				this.stealth = 1f;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				int num = Damage;
				double num2 = Main.CalculateDamagePlayersTake(num, this.statDefense);
				if (Crit)
				{
					num *= 2;
				}
				if (num2 >= 1.0)
				{
					if (this.whoAmI == Main.myPlayer)
					{
						Main.NotifyOfEvent(GameNotificationType.Damage);
						if (this.hasFootball)
						{
							for (int i = 0; i < 59; i++)
							{
								if (this.inventory[i].stack > 0 && this.inventory[i].type == 4743)
								{
									Projectile.NewProjectile(this.GetProjectileSource_Misc(12), base.Center, new Vector2((float)(-(float)hitDirection * 4), -6f), 861, 0, 0f, this.whoAmI, 0f, 1f, 0f);
									this.inventory[i].SetDefaults(0);
									if (i == 58)
									{
										Main.mouseItem = new Item();
									}
								}
							}
						}
					}
					if (this.inventory[this.selectedItem].type == 4790 || this.inventory[this.selectedItem].type == 4788 || this.inventory[this.selectedItem].type == 4789)
					{
						for (int j = 0; j < 1000; j++)
						{
							if (Main.projectile[j].active && Main.projectile[j].owner == this.whoAmI && (Main.projectile[j].type == 879 || Main.projectile[j].type == 877 || Main.projectile[j].type == 878))
							{
								Main.projectile[j].active = false;
							}
						}
					}
					if (this.invis)
					{
						for (int k = 0; k < Player.maxBuffs; k++)
						{
							if (this.buffType[k] == 10)
							{
								this.DelBuff(k);
							}
						}
					}
					num2 = (double)((int)((double)(1f - this.endurance) * num2));
					if (num2 < 1.0)
					{
						num2 = 1.0;
					}
					if (this.ConsumeSolarFlare())
					{
						float num3 = 0.2f;
						num2 = (double)((int)((double)(1f - num3) * num2));
						if (num2 < 1.0)
						{
							num2 = 1.0;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							IEntitySource spawnSource = this.GetProjectileSource_SetBonus(1);
							Entity attacker = null;
							if (damageSource.TryGetCausingEntity(out attacker))
							{
								spawnSource = this.GetProjectileSource_OnHurt(attacker, 1);
							}
							int num4 = Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, 0f, 0f, 608, (int)(150f * this.meleeDamage), 15f, Main.myPlayer, 0f, 0f, 0f);
							Main.projectile[num4].netUpdate = true;
							Main.projectile[num4].Kill();
						}
					}
					if (this.beetleDefense && this.beetleOrbs > 0)
					{
						float num5 = 0.15f * (float)this.beetleOrbs;
						num2 = (double)((int)((double)(1f - num5) * num2));
						this.beetleOrbs--;
						for (int l = 0; l < Player.maxBuffs; l++)
						{
							if (this.buffType[l] >= 95 && this.buffType[l] <= 97)
							{
								this.DelBuff(l);
							}
						}
						if (this.beetleOrbs > 0)
						{
							this.AddBuff(95 + this.beetleOrbs - 1, 5, false, false);
						}
						this.beetleCounter = 0f;
						if (num2 < 1.0)
						{
							num2 = 1.0;
						}
					}
					if (this.magicCuffs)
					{
						int num6 = num;
						this.statMana += num6;
						if (this.statMana > this.statManaMax2)
						{
							this.statMana = this.statManaMax2;
						}
						this.ManaEffect(num6);
					}
					if (this.defendedByPaladin)
					{
						if (this.whoAmI != Main.myPlayer)
						{
							if (Main.player[Main.myPlayer].hasPaladinShield)
							{
								Player player = Main.player[Main.myPlayer];
								if (player.team == this.team && this.team != 0)
								{
									float num7 = player.Distance(base.Center);
									bool flag3 = num7 < 800f;
									if (flag3)
									{
										for (int m = 0; m < 255; m++)
										{
											if (m != Main.myPlayer && Main.player[m].active && !Main.player[m].dead && !Main.player[m].immune && Main.player[m].hasPaladinShield && Main.player[m].team == this.team && (float)Main.player[m].statLife > (float)Main.player[m].statLifeMax2 * 0.25f)
											{
												float num8 = Main.player[m].Distance(base.Center);
												if (num7 > num8 || (num7 == num8 && m < Main.myPlayer))
												{
													flag3 = false;
													break;
												}
											}
										}
									}
									if (flag3)
									{
										int damage = (int)(num2 * 0.25);
										num2 = (double)((int)(num2 * 0.75));
										player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0, false, false, false, -1, true);
									}
								}
							}
						}
						else
						{
							bool flag4 = false;
							for (int n = 0; n < 255; n++)
							{
								if (n != Main.myPlayer && Main.player[n].active && !Main.player[n].dead && !Main.player[n].immune && Main.player[n].hasPaladinShield && Main.player[n].team == this.team && (float)Main.player[n].statLife > (float)Main.player[n].statLifeMax2 * 0.25f)
								{
									flag4 = true;
									break;
								}
							}
							if (flag4)
							{
								num2 = (double)((int)(num2 * 0.75));
							}
						}
					}
					if (this.brainOfConfusionItem != null && !this.brainOfConfusionItem.IsAir && Main.myPlayer == this.whoAmI)
					{
						for (int num9 = 0; num9 < 200; num9++)
						{
							if (Main.npc[num9].active && !Main.npc[num9].friendly)
							{
								int num10 = 300;
								num10 += (int)num2 * 2;
								if (Main.rand.Next(500) < num10)
								{
									float num11 = (Main.npc[num9].Center - base.Center).Length();
									float num12 = (float)Main.rand.Next(200 + (int)num2 / 2, 301 + (int)num2 * 2);
									if (num12 > 500f)
									{
										num12 = 500f + (num12 - 500f) * 0.75f;
									}
									if (num12 > 700f)
									{
										num12 = 700f + (num12 - 700f) * 0.5f;
									}
									if (num12 > 900f)
									{
										num12 = 900f + (num12 - 900f) * 0.25f;
									}
									if (num11 < num12)
									{
										float num13 = (float)Main.rand.Next(90 + (int)num2 / 3, 300 + (int)num2 / 2);
										Main.npc[num9].AddBuff(31, (int)num13, false);
									}
								}
							}
						}
						Projectile.NewProjectile(this.GetProjectileSource_Accessory(this.brainOfConfusionItem), base.Center.X + (float)Main.rand.Next(-40, 40), base.Center.Y - (float)Main.rand.Next(20, 60), this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 565, 0, 0f, this.whoAmI, 0f, 0f, 0f);
					}
					if (Main.netMode == 1 && this.whoAmI == Main.myPlayer && !quiet)
					{
						if (!this.noKnockback && hitDirection != 0 && (!this.mount.Active || !this.mount.Cart))
						{
							NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						}
						NetMessage.SendData(16, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						NetMessage.SendPlayerHurt(this.whoAmI, damageSource, Damage, hitDirection, Crit, pvp, hitContext, -1, -1);
					}
					Color color = Crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly;
					CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), color, (int)num2, Crit, false);
					this.statLife -= (int)num2;
					if (cooldownCounter == -1)
					{
						this.immune = true;
						int num14;
						if (pvp)
						{
							num14 = 8;
						}
						else if (num2 == 1.0)
						{
							num14 = (this.longInvince ? 40 : 20);
						}
						else
						{
							num14 = (this.longInvince ? 80 : 40);
						}
						this.immuneTime = num14;
					}
					else if (cooldownCounter == 0)
					{
						if (num2 == 1.0)
						{
							this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 40 : 20);
						}
						else
						{
							this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 80 : 40);
						}
					}
					else if (cooldownCounter == 1 || cooldownCounter == 3 || cooldownCounter == 4)
					{
						if (num2 == 1.0)
						{
							this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 40 : 20);
						}
						else
						{
							this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 80 : 40);
						}
					}
					this.lifeRegenTime = 0f;
					int? sourceProjectileType = damageSource.SourceProjectileType;
					if (sourceProjectileType != null && (ProjectileID.Sets.DismountsPlayersOnHit.IndexInRange(sourceProjectileType.Value) && ProjectileID.Sets.DismountsPlayersOnHit[sourceProjectileType.Value]))
					{
						this.mount.Dismount(this);
					}
					if (this.whoAmI == Main.myPlayer)
					{
						if (this.starCloakItem != null && !this.starCloakItem.IsAir && (cooldownCounter == -1 || cooldownCounter == 1))
						{
							for (int num15 = 0; num15 < 3; num15++)
							{
								float x = this.position.X + (float)Main.rand.Next(-400, 400);
								float y = this.position.Y - (float)Main.rand.Next(500, 800);
								Vector2 vector = new Vector2(x, y);
								float num16 = this.position.X + (float)(this.width / 2) - vector.X;
								float num17 = this.position.Y + (float)(this.height / 2) - vector.Y;
								num16 += (float)Main.rand.Next(-100, 101);
								float num18 = (float)23;
								float num19 = (float)Math.Sqrt((double)(num16 * num16 + num17 * num17));
								num19 = num18 / num19;
								num16 *= num19;
								num17 *= num19;
								int type = 726;
								Item item = this.starCloakItem;
								if (this.starCloakItem_starVeilOverrideItem != null)
								{
									item = this.starCloakItem_starVeilOverrideItem;
									type = 725;
								}
								if (this.starCloakItem_beeCloakOverrideItem != null)
								{
									item = this.starCloakItem_beeCloakOverrideItem;
									type = 724;
								}
								if (this.starCloakItem_manaCloakOverrideItem != null)
								{
									item = this.starCloakItem_manaCloakOverrideItem;
									type = 723;
								}
								int num20 = 75;
								if (Main.masterMode)
								{
									num20 *= 3;
								}
								else if (Main.expertMode)
								{
									num20 *= 2;
								}
								Projectile.NewProjectile(this.GetProjectileSource_Accessory(item), x, y, num16, num17, type, num20, 5f, this.whoAmI, 0f, this.position.Y, 0f);
							}
						}
						if (this.honeyCombItem != null && !this.honeyCombItem.IsAir)
						{
							int num21 = 1;
							if (Main.rand.Next(3) == 0)
							{
								num21++;
							}
							if (Main.rand.Next(3) == 0)
							{
								num21++;
							}
							if (this.strongBees && Main.rand.Next(3) == 0)
							{
								num21++;
							}
							float num22 = 13f;
							if (this.strongBees)
							{
								num22 = 18f;
							}
							if (Main.masterMode)
							{
								num22 *= 2f;
							}
							else if (Main.expertMode)
							{
								num22 *= 1.5f;
							}
							IEntitySource projectileSource_Accessory = this.GetProjectileSource_Accessory(this.honeyCombItem);
							for (int num23 = 0; num23 < num21; num23++)
							{
								float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
								float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
								Projectile.NewProjectile(projectileSource_Accessory, this.position.X, this.position.Y, speedX, speedY, this.beeType(), this.beeDamage((int)num22), this.beeKB(0f), Main.myPlayer, 0f, 0f, 0f);
							}
							this.AddBuff(48, 300, true, false);
						}
					}
					this.StopVanityActions(true);
					if (flag2 && hitDirection != 0)
					{
						if (!this.mount.Active || !this.mount.Cart)
						{
							float num24 = 10.5f;
							float y2 = -7.5f;
							if (this.noKnockback)
							{
								num24 = 2.5f;
								y2 = -1.5f;
							}
							this.velocity.X = num24 * (float)hitDirection;
							this.velocity.Y = y2;
							this.fallStart = (int)(this.position.Y / 16f);
						}
					}
					else if (!this.noKnockback && hitDirection != 0 && (!this.mount.Active || !this.mount.Cart))
					{
						this.velocity.X = 4.5f * (float)hitDirection;
						this.velocity.Y = -3.5f;
						this.fallStart = (int)(this.position.Y / 16f);
					}
					if (this.stoned)
					{
						SoundEngine.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
					else if (this.mount.Active && this.mount.Type == 52)
					{
						SoundEngine.PlaySound(3, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
					}
					else if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
					{
						SoundEngine.PlaySound(3, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
					}
					else if (this.frostArmor)
					{
						SoundEngine.PlaySound(SoundID.Item27, this.position);
					}
					else if (this.boneArmor)
					{
						SoundEngine.PlaySound(3, (int)this.position.X, (int)this.position.Y, 2, 1f, 0f);
					}
					else if (Main.dontStarveWorld && !Main.remixWorld)
					{
						SoundEngine.PlaySound(this.Male ? SoundID.DSTMaleHurt : SoundID.DSTFemaleHurt, this.position);
					}
					else
					{
						SoundEngine.PlaySound(this.Male ? 1 : 20, this.position, 1);
					}
					this.eyeHelper.BlinkBecausePlayerGotHurt();
					if (this.statLife > 0)
					{
						double num25 = num2 / (double)this.statLifeMax2 * 100.0;
						float num26 = (float)(2 * hitDirection);
						float num27 = 0f;
						if (flag2)
						{
							num25 *= 12.0;
							num27 = 6f;
						}
						int num28 = 0;
						while ((double)num28 < num25)
						{
							if (this.stoned)
							{
								Dust.NewDust(this.position, this.width, this.height, 1, num26 + (float)hitDirection * num27 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
							}
							else if (this.frostArmor)
							{
								int num29 = Dust.NewDust(this.position, this.width, this.height, 135, num26 + (float)hitDirection * num27 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
								Main.dust[num29].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
							}
							else if (this.boneArmor)
							{
								int num30 = Dust.NewDust(this.position, this.width, this.height, 26, num26 + (float)hitDirection * num27 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
								Main.dust[num30].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
							}
							else
							{
								Dust.NewDust(this.position, this.width, this.height, 5, num26 + (float)hitDirection * num27 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
							}
							num28++;
						}
					}
					else
					{
						this.statLife = 0;
						if (this.whoAmI == Main.myPlayer)
						{
							this.KillMe(damageSource, num2, hitDirection, pvp);
						}
					}
				}
				if (pvp)
				{
					num2 = Main.CalculateDamagePlayersTakeInPVP(num, this.statDefense);
				}
				return num2;
			}
			return 0.0;
		}

		// Token: 0x06000851 RID: 2129 RVA: 0x0030A368 File Offset: 0x00308568
		private static bool AllowShimmerDodge(PlayerDeathReason damageSource, int cooldownCounter, bool dodgeable)
		{
			if (!dodgeable)
			{
				return false;
			}
			if (cooldownCounter == 1)
			{
				return false;
			}
			Entity entity = null;
			if (!damageSource.TryGetCausingEntity(out entity))
			{
				return true;
			}
			NPC npc = entity as NPC;
			if (npc != null && npc.active && (npc.boss || NPC.GetNPCInvasionGroup(npc.type) != 0 || NPCID.Sets.CanHitPastShimmer[npc.type]))
			{
				return false;
			}
			Projectile projectile = entity as Projectile;
			return projectile == null || !projectile.active || !ProjectileID.Sets.CanHitPastShimmer[projectile.type];
		}

		// Token: 0x06000852 RID: 2130 RVA: 0x0030A3E8 File Offset: 0x003085E8
		public void KillMeForGood()
		{
			PlayerFileData activePlayerFileData = Main.ActivePlayerFileData;
			if (activePlayerFileData.ServerSideCharacter)
			{
				return;
			}
			bool isCloudSave = activePlayerFileData.IsCloudSave;
			if (FileUtilities.Exists(Main.playerPathName, isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName, isCloudSave, false);
			}
			if (FileUtilities.Exists(Main.playerPathName + ".bak", isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName + ".bak", isCloudSave, false);
			}
			Main.ActivePlayerFileData = new PlayerFileData();
		}

		// Token: 0x06000853 RID: 2131 RVA: 0x0030A45C File Offset: 0x0030865C
		public void KillMe(PlayerDeathReason damageSource, double dmg, int hitDirection, bool pvp = false)
		{
			if (this.creativeGodMode)
			{
				return;
			}
			if (this.dead)
			{
				return;
			}
			this.StopVanityActions(true);
			if (pvp)
			{
				this.pvpDeath = true;
			}
			if (this.trapDebuffSource)
			{
				AchievementsHelper.HandleSpecialEvent(this, 4);
			}
			if (Main.myPlayer == this.whoAmI && this._framesLeftEligibleForDeadmansChestDeathAchievement > 0)
			{
				AchievementsHelper.HandleSpecialEvent(this, 23);
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Main.NotifyOfEvent(GameNotificationType.SpawnOrDeath);
			}
			if (this.pvpDeath)
			{
				this.numberOfDeathsPVP++;
			}
			else
			{
				this.numberOfDeathsPVE++;
			}
			this.lastDeathPostion = base.Center;
			this.lastDeathTime = DateTime.Now;
			this.showLastDeath = true;
			bool flag;
			long coinsOwned = Utils.CoinsCount(out flag, this.inventory, new int[0]);
			if (Main.myPlayer == this.whoAmI)
			{
				this.lostCoins = coinsOwned;
				this.lostCoinString = Main.ValueToCoins(this.lostCoins);
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.EndOngoingTorchGodEvent();
			}
			if (Main.myPlayer == this.whoAmI)
			{
				Main.mapFullscreen = false;
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.trashItem.SetDefaults(0);
				if (this.difficulty == 0 || this.difficulty == 3)
				{
					for (int i = 0; i < 59; i++)
					{
						if (this.inventory[i].stack > 0 && ((this.inventory[i].type >= 1522 && this.inventory[i].type <= 1527) || this.inventory[i].type == 3643))
						{
							int num = Item.NewItem(this.GetItemSource_Death(), (int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[i].type, 1, false, 0, false, false);
							Main.item[num].netDefaults(this.inventory[i].netID);
							Main.item[num].Prefix((int)this.inventory[i].prefix);
							Main.item[num].stack = this.inventory[i].stack;
							Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
							Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
							Main.item[num].noGrabDelay = 100;
							Main.item[num].favorited = false;
							Main.item[num].newAndShiny = false;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
							}
							this.inventory[i].SetDefaults(0);
						}
					}
				}
				else if (this.difficulty == 1)
				{
					this.DropItems();
				}
				else if (this.difficulty == 2)
				{
					this.DropItems();
					this.KillMeForGood();
				}
			}
			if (Main.dontStarveWorld || Main.tenthAnniversaryWorld)
			{
				SoundEngine.PlaySound(this.Male ? SoundID.DSTMaleHurt : SoundID.DSTFemaleHurt, this.position);
			}
			else
			{
				SoundEngine.PlaySound(5, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			if (Main.tenthAnniversaryWorld)
			{
				for (int j = 0; j < 85; j++)
				{
					int type = Main.rand.Next(139, 143);
					int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, type, 0f, -10f, 0, default(Color), 1.2f);
					Dust dust = Main.dust[num2];
					dust.velocity.X = dust.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust dust2 = Main.dust[num2];
					dust2.velocity.Y = dust2.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Dust dust3 = Main.dust[num2];
					dust3.velocity.X = dust3.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust4 = Main.dust[num2];
					dust4.velocity.Y = dust4.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Dust dust5 = Main.dust[num2];
					dust5.velocity.X = dust5.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust6 = Main.dust[num2];
					dust6.velocity.Y = dust6.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num2].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int k = 0; k < 40; k++)
				{
					int type2 = Main.rand.Next(276, 283);
					int num3 = Gore.NewGore(this.position, new Vector2(0f, -10f), type2, 1f);
					Gore gore = Main.gore[num3];
					gore.velocity.X = gore.velocity.X + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore2 = Main.gore[num3];
					gore2.velocity.Y = gore2.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore3 = Main.gore[num3];
					gore3.velocity.X = gore3.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Gore gore4 = Main.gore[num3];
					gore4.velocity.Y = gore4.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
					Main.gore[num3].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Gore gore5 = Main.gore[num3];
					gore5.velocity.X = gore5.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
					Gore gore6 = Main.gore[num3];
					gore6.velocity.Y = gore6.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			this.headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			this.bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			this.legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			if (this.stoned)
			{
				this.headPosition = Vector2.Zero;
				this.bodyPosition = Vector2.Zero;
				this.legPosition = Vector2.Zero;
			}
			for (int l = 0; l < 100; l++)
			{
				if (this.stoned)
				{
					Dust.NewDust(this.position, this.width, this.height, 1, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
				}
				else if (this.frostArmor)
				{
					int num4 = Dust.NewDust(this.position, this.width, this.height, 135, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				else if (this.boneArmor)
				{
					int num5 = Dust.NewDust(this.position, this.width, this.height, 26, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				else
				{
					Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
				}
			}
			this.mount.Dismount(this);
			this.dead = true;
			this.respawnTimer = this.GetRespawnTime(pvp);
			this.immuneAlpha = 0;
			if (!ChildSafety.Disabled)
			{
				this.immuneAlpha = 255;
			}
			this.palladiumRegen = false;
			this.iceBarrier = false;
			this.crystalLeaf = false;
			NetworkText deathText = damageSource.GetDeathText(this.name);
			if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(deathText, new Color(225, 25, 25), -1);
			}
			else if (Main.netMode == 0)
			{
				Main.NewText(deathText.ToString(), 225, 25, 25);
			}
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendPlayerDeath(this.whoAmI, damageSource, (int)dmg, hitDirection, pvp, -1, -1);
			}
			if (this.whoAmI == Main.myPlayer && (this.difficulty == 0 || this.difficulty == 3))
			{
				if (!pvp)
				{
					this.DropCoins();
				}
				else
				{
					this.lostCoins = 0L;
					this.lostCoinString = Main.ValueToCoins(this.lostCoins);
				}
			}
			this.DropTombstone(coinsOwned, deathText, hitDirection);
			if (this.whoAmI == Main.myPlayer)
			{
				try
				{
					WorldGen.saveToonWhilePlaying();
				}
				catch
				{
				}
			}
		}

		// Token: 0x06000854 RID: 2132 RVA: 0x0030AE88 File Offset: 0x00309088
		private int GetRespawnTime(bool pvp)
		{
			int num = 600;
			bool flag = false;
			if (Main.netMode != 0 && !pvp)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && (Main.npc[i].boss || Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15) && Math.Abs(base.Center.X - Main.npc[i].Center.X) + Math.Abs(base.Center.Y - Main.npc[i].Center.Y) < 4000f)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				num += 600;
			}
			if (Main.expertMode)
			{
				num = (int)((double)num * 1.5);
			}
			if (flag && Main.getGoodWorld && Main.netMode != 0)
			{
				bool flag2 = false;
				for (int j = 0; j < 255; j++)
				{
					if (j != this.whoAmI && Main.player[j].active)
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					num *= 2;
				}
			}
			return num;
		}

		// Token: 0x06000855 RID: 2133 RVA: 0x0030AFD0 File Offset: 0x003091D0
		public void DropTombstone(long coinsOwned, NetworkText deathText, int hitDirection)
		{
			if (Main.netMode != 1)
			{
				float num = (float)Main.rand.Next(-35, 36) * 0.1f;
				while (num < 2f && num > -2f)
				{
					num += (float)Main.rand.Next(-30, 31) * 0.1f;
				}
				int num2 = Main.rand.Next(6);
				if (coinsOwned > 100000L)
				{
					num2 = Main.rand.Next(5);
					num2 += 527;
				}
				else if (num2 == 0)
				{
					num2 = 43;
				}
				else
				{
					num2 = 200 + num2;
				}
				IEntitySource projectileSource_Misc = this.GetProjectileSource_Misc(9);
				int damage = 0;
				int num3 = 0;
				if (Main.getGoodWorld)
				{
					damage = 70;
					num3 = 10;
				}
				int whoAmI = this.whoAmI;
				int num4;
				if (Main.getGoodWorld)
				{
					num4 = Projectile.NewProjectile(projectileSource_Misc, this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), ((float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num) * 1.5f, (float)Main.rand.Next(-40, -20) * 0.1f * 1.5f, num2, damage, (float)num3, Main.myPlayer, (float)whoAmI, 0f, 0f);
				}
				else
				{
					num4 = Projectile.NewProjectile(projectileSource_Misc, this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), (float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num, (float)Main.rand.Next(-40, -20) * 0.1f, num2, damage, (float)num3, Main.myPlayer, (float)whoAmI, 0f, 0f);
				}
				DateTime now = DateTime.Now;
				string str = now.ToString("D");
				if (GameCulture.FromCultureName(GameCulture.CultureName.English).IsActive)
				{
					str = now.ToString("MMMM d, yyy");
				}
				string miscText = deathText.ToString() + "\n" + str;
				Main.projectile[num4].miscText = miscText;
			}
		}

		// Token: 0x06000856 RID: 2134 RVA: 0x0030B1E2 File Offset: 0x003093E2
		public bool CanPullItem(Item item, Player.ItemSpaceStatus status)
		{
			return status.CanTakeItem && this.CanAcceptItemIntoInventory(item);
		}

		// Token: 0x06000857 RID: 2135 RVA: 0x0030B1F8 File Offset: 0x003093F8
		public Player.ItemSpaceStatus ItemSpace(Item newItem)
		{
			if (ItemID.Sets.IsAPickup[newItem.type])
			{
				return new Player.ItemSpaceStatus(true, false);
			}
			if (newItem.uniqueStack && this.HasItem(newItem.type))
			{
				return new Player.ItemSpaceStatus(false, false);
			}
			int num = 50;
			if (newItem.IsACoin)
			{
				num = 54;
			}
			for (int i = 0; i < num; i++)
			{
				if (this.CanItemSlotAccept(this.inventory[i], newItem))
				{
					return new Player.ItemSpaceStatus(true, false);
				}
			}
			if (newItem.ammo > 0 && !newItem.notAmmo)
			{
				for (int j = 54; j < 58; j++)
				{
					if (this.CanGoIntoAmmoOnPickup(this.inventory[j], newItem))
					{
						return new Player.ItemSpaceStatus(true, false);
					}
				}
			}
			for (int k = 54; k < 58; k++)
			{
				if (this.inventory[k].type > 0 && this.inventory[k].stack < this.inventory[k].maxStack && newItem.IsTheSameAs(this.inventory[k]))
				{
					return new Player.ItemSpaceStatus(true, false);
				}
			}
			if (this.ItemSpaceForCofveve(newItem))
			{
				return new Player.ItemSpaceStatus(true, true);
			}
			return new Player.ItemSpaceStatus(false, false);
		}

		// Token: 0x06000858 RID: 2136 RVA: 0x0030B310 File Offset: 0x00309510
		public bool ItemSpaceForCofveve(Item newItem)
		{
			if (!this.IsVoidVaultEnabled)
			{
				return false;
			}
			if (!this.CanVoidVaultAccept(newItem))
			{
				return false;
			}
			Item[] item = this.bank4.item;
			for (int i = 0; i < item.Length; i++)
			{
				if (this.CanItemSlotAccept(item[i], newItem))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000859 RID: 2137 RVA: 0x0030B35B File Offset: 0x0030955B
		public bool CanItemSlotAccept(Item theSlot, Item theItemToAccept)
		{
			return theSlot.type == 0 || (theSlot.stack < theSlot.maxStack && theItemToAccept.IsTheSameAs(theSlot));
		}

		// Token: 0x0600085A RID: 2138 RVA: 0x0030B381 File Offset: 0x00309581
		public bool CanGoIntoAmmoOnPickup(Item theSlot, Item theItemToAccept)
		{
			return (theItemToAccept.CanFillEmptyAmmoSlot() || theSlot.type != 0) && this.CanItemSlotAccept(theSlot, theItemToAccept);
		}

		// Token: 0x0600085B RID: 2139 RVA: 0x0030B3A0 File Offset: 0x003095A0
		public void DoCoins(int i)
		{
			if (this.inventory[i].stack == 100 && (this.inventory[i].type == 71 || this.inventory[i].type == 72 || this.inventory[i].type == 73))
			{
				this.inventory[i].SetDefaults(this.inventory[i].type + 1);
				for (int j = 0; j < 54; j++)
				{
					if (this.inventory[j].IsTheSameAs(this.inventory[i]) && j != i && this.inventory[j].type == this.inventory[i].type && this.inventory[j].stack < this.inventory[j].maxStack)
					{
						this.inventory[j].stack++;
						this.inventory[i].SetDefaults(0);
						this.inventory[i].active = false;
						this.inventory[i].TurnToAir(false);
						this.DoCoins(j);
					}
				}
			}
		}

		// Token: 0x0600085C RID: 2140 RVA: 0x0030B4C4 File Offset: 0x003096C4
		public Item FillAmmo(int plr, Item newItem, GetItemSettings settings)
		{
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].type > 0 && this.inventory[i].stack < this.inventory[i].maxStack && newItem.IsTheSameAs(this.inventory[i]))
				{
					SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					if (newItem.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
					{
						this.inventory[i].stack += newItem.stack;
						if (!settings.NoText)
						{
							PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack, false, false);
						}
						this.DoCoins(i);
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes(false);
						}
						settings.HandlePostAction(this.inventory[i]);
						return new Item();
					}
					newItem.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
					if (!settings.NoText)
					{
						PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, false);
					}
					this.inventory[i].stack = this.inventory[i].maxStack;
					this.DoCoins(i);
					if (plr == Main.myPlayer)
					{
						Recipe.FindRecipes(false);
					}
					settings.HandlePostAction(this.inventory[i]);
				}
			}
			if (newItem.CanFillEmptyAmmoSlot())
			{
				for (int j = 54; j < 58; j++)
				{
					if (this.inventory[j].type == 0)
					{
						newItem.shimmered = false;
						this.inventory[j] = newItem;
						if (!settings.NoText)
						{
							PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack, false, false);
						}
						this.DoCoins(j);
						SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes(false);
						}
						settings.HandlePostAction(this.inventory[j]);
						return new Item();
					}
				}
			}
			return newItem;
		}

		// Token: 0x0600085D RID: 2141 RVA: 0x0030B714 File Offset: 0x00309914
		public Item GetItem(int plr, Item newItem, GetItemSettings settings)
		{
			bool isACoin = newItem.IsACoin;
			Item item = newItem;
			int num = 50;
			if (newItem.noGrabDelay > 0)
			{
				return item;
			}
			int num2 = 0;
			if (newItem.uniqueStack && this.HasItem(newItem.type))
			{
				return item;
			}
			if (isACoin)
			{
				num2 = -4;
				num = 54;
			}
			if (item.FitsAmmoSlot())
			{
				item = this.FillAmmo(plr, item, settings);
				if (item.type == 0 || item.stack == 0)
				{
					return new Item();
				}
			}
			for (int i = num2; i < 50; i++)
			{
				int num3 = i;
				if (num3 < 0)
				{
					num3 = 54 + i;
				}
				if (this.GetItem_FillIntoOccupiedSlot(plr, newItem, settings, item, num3))
				{
					return new Item();
				}
			}
			if (!isACoin && newItem.useStyle != 0)
			{
				for (int j = 0; j < 10; j++)
				{
					if (this.GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, j))
					{
						return new Item();
					}
				}
			}
			if (newItem.favorited)
			{
				for (int k = 0; k < num; k++)
				{
					if (this.GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, k))
					{
						return new Item();
					}
				}
			}
			else
			{
				for (int l = num - 1; l >= 0; l--)
				{
					if (this.GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, l))
					{
						return new Item();
					}
				}
			}
			if (settings.CanGoIntoVoidVault && this.IsVoidVaultEnabled && this.CanVoidVaultAccept(newItem) && this.GetItem_VoidVault(plr, this.bank4.item, newItem, settings, item))
			{
				return new Item();
			}
			return item;
		}

		// Token: 0x0600085E RID: 2142 RVA: 0x0030B874 File Offset: 0x00309A74
		private bool GetItem_VoidVault(int plr, Item[] inventory, Item newItem, GetItemSettings settings, Item returnItem)
		{
			if (!this.CanVoidVaultAccept(newItem))
			{
				return false;
			}
			for (int i = 0; i < inventory.Length; i++)
			{
				if (this.GetItem_FillIntoOccupiedSlot_VoidBag(plr, inventory, newItem, settings, returnItem, i))
				{
					return true;
				}
			}
			for (int j = 0; j < inventory.Length; j++)
			{
				if (this.GetItem_FillEmptyInventorySlot_VoidBag(plr, inventory, newItem, settings, returnItem, j))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600085F RID: 2143 RVA: 0x0030B8D0 File Offset: 0x00309AD0
		private bool CanVoidVaultAccept(Item item)
		{
			if (item.questItem)
			{
				return false;
			}
			int type = item.type;
			return type != 3822;
		}

		// Token: 0x06000860 RID: 2144 RVA: 0x0030B8FC File Offset: 0x00309AFC
		private bool GetItem_FillIntoOccupiedSlot_VoidBag(int plr, Item[] inv, Item newItem, GetItemSettings settings, Item returnItem, int i)
		{
			if (inv[i].type > 0 && inv[i].stack < inv[i].maxStack && returnItem.IsTheSameAs(inv[i]))
			{
				if (newItem.IsACoin)
				{
					SoundEngine.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				else
				{
					SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (returnItem.stack + inv[i].stack <= inv[i].maxStack)
				{
					inv[i].stack += returnItem.stack;
					if (!settings.NoText)
					{
						PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, returnItem.stack, false, settings.LongText);
					}
					AchievementsHelper.NotifyItemPickup(this, returnItem);
					settings.HandlePostAction(inv[i]);
					return true;
				}
				AchievementsHelper.NotifyItemPickup(this, returnItem, inv[i].maxStack - inv[i].stack);
				returnItem.stack -= inv[i].maxStack - inv[i].stack;
				if (!settings.NoText)
				{
					PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, inv[i].maxStack - inv[i].stack, false, settings.LongText);
				}
				inv[i].stack = inv[i].maxStack;
				settings.HandlePostAction(inv[i]);
			}
			return false;
		}

		// Token: 0x06000861 RID: 2145 RVA: 0x0030BA8C File Offset: 0x00309C8C
		private bool GetItem_FillIntoOccupiedSlot(int plr, Item newItem, GetItemSettings settings, Item returnItem, int i)
		{
			if (this.inventory[i].type > 0 && this.inventory[i].stack < this.inventory[i].maxStack && returnItem.IsTheSameAs(this.inventory[i]))
			{
				if (newItem.IsACoin)
				{
					SoundEngine.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				else
				{
					SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (returnItem.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
				{
					this.inventory[i].stack += returnItem.stack;
					if (!settings.NoText)
					{
						PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, returnItem.stack, false, settings.LongText);
					}
					this.DoCoins(i);
					if (plr == Main.myPlayer)
					{
						Recipe.FindRecipes(false);
					}
					AchievementsHelper.NotifyItemPickup(this, returnItem);
					settings.HandlePostAction(this.inventory[i]);
					return true;
				}
				AchievementsHelper.NotifyItemPickup(this, returnItem, this.inventory[i].maxStack - this.inventory[i].stack);
				returnItem.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
				if (!settings.NoText)
				{
					PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, settings.LongText);
				}
				this.inventory[i].stack = this.inventory[i].maxStack;
				this.DoCoins(i);
				if (plr == Main.myPlayer)
				{
					Recipe.FindRecipes(false);
				}
				settings.HandlePostAction(this.inventory[i]);
			}
			return false;
		}

		// Token: 0x06000862 RID: 2146 RVA: 0x0030BC9C File Offset: 0x00309E9C
		private bool GetItem_FillEmptyInventorySlot_VoidBag(int plr, Item[] inv, Item newItem, GetItemSettings settings, Item returnItem, int i)
		{
			if (inv[i].type != 0)
			{
				return false;
			}
			if (newItem.IsACoin)
			{
				SoundEngine.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			else
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			returnItem.shimmered = false;
			inv[i] = returnItem;
			if (!settings.NoText)
			{
				PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, newItem.stack, false, settings.LongText);
			}
			this.DoCoins(i);
			if (plr == Main.myPlayer)
			{
				Recipe.FindRecipes(false);
			}
			AchievementsHelper.NotifyItemPickup(this, returnItem);
			settings.HandlePostAction(inv[i]);
			return true;
		}

		// Token: 0x06000863 RID: 2147 RVA: 0x0030BD6C File Offset: 0x00309F6C
		private bool GetItem_FillEmptyInventorySlot(int plr, Item newItem, GetItemSettings settings, Item returnItem, int i)
		{
			if (this.inventory[i].type != 0)
			{
				return false;
			}
			if (newItem.IsACoin)
			{
				SoundEngine.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			else
			{
				SoundEngine.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			returnItem.shimmered = false;
			this.inventory[i] = returnItem;
			if (!settings.NoText)
			{
				PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack, false, settings.LongText);
			}
			this.DoCoins(i);
			if (plr == Main.myPlayer)
			{
				Recipe.FindRecipes(false);
			}
			AchievementsHelper.NotifyItemPickup(this, returnItem);
			if (plr == Main.myPlayer && newItem.type == 5095)
			{
				LucyAxeMessage.Create(LucyAxeMessage.MessageSource.PickedUp, base.Top, new Vector2(0f, -7f));
			}
			settings.HandlePostAction(this.inventory[i]);
			return true;
		}

		// Token: 0x06000864 RID: 2148 RVA: 0x0030BE7C File Offset: 0x0030A07C
		public void PlaceThing(ref Player.ItemCheckContext context)
		{
			if (this.itemTime == 0)
			{
				this.dontConsumeWand = false;
			}
			this.PlaceThing_Paintbrush();
			this.PlaceThing_PaintRoller();
			this.PlaceThing_PaintScrapper();
			this.PlaceThing_CannonBall();
			this.PlaceThing_XMasTreeTops();
			this.PlaceThing_ItemInExtractinator(ref context);
			this.PlaceThing_LockChest();
			if (this.noBuilding)
			{
				return;
			}
			this.PlaceThing_Tiles();
			this.PlaceThing_Walls();
		}

		// Token: 0x06000865 RID: 2149 RVA: 0x0030BED8 File Offset: 0x0030A0D8
		private void PlaceThing_Walls()
		{
			if (this.inventory[this.selectedItem].createWall >= 0 && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				this.cursorItemIconEnabled = true;
				if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem && (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > 0) && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall != this.inventory[this.selectedItem].createWall)
				{
					bool flag = true;
					if (this.TileReplacementEnabled)
					{
						flag = this.PlaceThing_TryReplacingWalls(flag);
					}
					if (flag)
					{
						WorldGen.PlaceWall(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createWall, false);
						if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall == this.inventory[this.selectedItem].createWall)
						{
							this.ApplyItemTime(this.inventory[this.selectedItem], this.wallSpeed);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 3, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.inventory[this.selectedItem].createWall, 0, 0, 0);
							}
							this.PlaceThing_Walls_FillEmptySpace();
							if (this.autoPaint && this.builderAccStatus[3] == 0)
							{
								this.TryPainting(Player.tileTargetX, Player.tileTargetY, true, false);
							}
						}
					}
				}
			}
		}

		// Token: 0x06000866 RID: 2150 RVA: 0x0030C248 File Offset: 0x0030A448
		private void PlaceThing_Walls_FillEmptySpace()
		{
			if (this.inventory[this.selectedItem].stack > 1)
			{
				int createWall = this.inventory[this.selectedItem].createWall;
				for (int i = 0; i < 4; i++)
				{
					int num = Player.tileTargetX;
					int num2 = Player.tileTargetY;
					if (i == 0)
					{
						num--;
					}
					if (i == 1)
					{
						num++;
					}
					if (i == 2)
					{
						num2--;
					}
					if (i == 3)
					{
						num2++;
					}
					if (Main.tile[num, num2].wall == 0)
					{
						int num3 = 0;
						for (int j = 0; j < 4; j++)
						{
							int num4 = num;
							int num5 = num2;
							if (j == 0)
							{
								num4--;
							}
							if (j == 1)
							{
								num4++;
							}
							if (j == 2)
							{
								num5--;
							}
							if (j == 3)
							{
								num5++;
							}
							if ((int)Main.tile[num4, num5].wall == createWall)
							{
								num3++;
							}
						}
						if (num3 == 4)
						{
							WorldGen.PlaceWall(num, num2, createWall, false);
							if ((int)Main.tile[num, num2].wall == createWall)
							{
								this.inventory[this.selectedItem].stack--;
								if (this.inventory[this.selectedItem].stack == 0)
								{
									this.inventory[this.selectedItem].SetDefaults(0);
								}
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 3, (float)num, (float)num2, (float)createWall, 0, 0, 0);
								}
								if (this.autoPaint && this.builderAccStatus[3] == 0)
								{
									this.TryPainting(num, num2, true, false);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000867 RID: 2151 RVA: 0x0030C3D4 File Offset: 0x0030A5D4
		private void PlaceThing_Tiles()
		{
			Item item = this.inventory[this.selectedItem];
			int num = item.createTile;
			if (num >= 0 && this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				this.cursorItemIconEnabled = true;
				bool flag = this.PlaceThing_Tiles_CheckLavaBlocking();
				bool flag2 = true;
				flag2 = this.PlaceThing_Tiles_CheckGamepadTorchUsability(flag2);
				flag2 = this.PlaceThing_Tiles_CheckWandUsability(flag2);
				flag2 = this.PlaceThing_Tiles_CheckRopeUsability(flag2);
				flag2 = this.PlaceThing_Tiles_CheckFlexibleWand(flag2);
				if (this.TileReplacementEnabled)
				{
					flag2 = this.PlaceThing_TryReplacingTiles(flag2);
				}
				Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
				if (tile.active())
				{
					if (num == 23 && tile.type == 59)
					{
						num = 661;
					}
					if (num == 199 && tile.type == 59)
					{
						num = 662;
					}
				}
				if (flag2 && ((!tile.active() && !flag) || (Main.tileCut[(int)tile.type] && tile.type != 484) || (tile.type >= 373 && tile.type <= 375) || tile.type == 461 || num == 199 || num == 23 || num == 662 || num == 661 || num == 2 || num == 109 || num == 60 || num == 70 || num == 633 || Main.tileMoss[num] || TileID.Sets.BreakableWhenPlacing[(int)tile.type]) && this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
				{
					bool flag3 = false;
					bool newObjectType = false;
					bool? flag4 = null;
					int? forcedRandom = null;
					TileObject data = default(TileObject);
					int style;
					this.FigureOutWhatToPlace(tile, item, out num, out style, out flag4, out forcedRandom);
					if (flag4 != null)
					{
						flag3 = flag4.Value;
					}
					else if (TileObjectData.CustomPlace(num, style) && num != 82 && num != 227)
					{
						newObjectType = true;
						flag3 = TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, (int)((ushort)num), style, this.direction, out data, false, forcedRandom);
						Player.PlaceThing_Tiles_BlockPlacementIfOverPlayers(ref flag3, ref data);
						Player.PlaceThing_Tiles_BlockPlacementForRepeatedPigronatas(ref flag3, ref data);
						Player.PlaceThing_Tiles_BlockPlacementForRepeatedPumpkins(ref flag3, ref data);
						Player.PlaceThing_Tiles_BlockPlacementForRepeatedCoralAndBeachPiles(ref flag3, ref data);
					}
					else
					{
						flag3 = this.PlaceThing_Tiles_BlockPlacementForAssortedThings(flag3);
					}
					if (flag3)
					{
						this.PlaceThing_Tiles_PlaceIt(newObjectType, data, num);
					}
				}
			}
		}

		// Token: 0x06000868 RID: 2152 RVA: 0x0030C704 File Offset: 0x0030A904
		private bool ModifyFlexibleWandPlacementInfo(ref int tileType, ref int tileStyle, ref int? forcedRandom)
		{
			FlexibleTileWand flexibleTileWand = this.HeldItem.GetFlexibleTileWand();
			if (flexibleTileWand == null)
			{
				return true;
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Point point = new Point(Player.tileTargetX, Player.tileTargetY);
				if (Player.FlexibleWandLastPosition != point)
				{
					Player.FlexibleWandLastPosition = point;
					Player.FlexibleWandRandomSeed = Main.rand.Next();
				}
			}
			FlexibleTileWand.PlacementOption placementOption;
			Item item;
			if (flexibleTileWand.TryGetPlacementOption(this, Player.FlexibleWandRandomSeed, Player.FlexibleWandCycleOffset, out placementOption, out item))
			{
				tileType = placementOption.TileIdToPlace;
				tileStyle = placementOption.TileStyleToPlace;
				forcedRandom = new int?(Player.FlexibleWandCycleOffset);
				return true;
			}
			return false;
		}

		// Token: 0x06000869 RID: 2153 RVA: 0x0030C79C File Offset: 0x0030A99C
		private bool PlaceThing_TryReplacingWalls(bool canUse)
		{
			if (canUse && this.itemAnimation > 0 && this.ItemTimeIsZero && this.controlUseItem && this.PlaceThing_ValidWallForReplacement() && WorldGen.NearFriendlyWall(Player.tileTargetX, Player.tileTargetY) && WorldGen.ReplaceWall(Player.tileTargetX, Player.tileTargetY, (ushort)this.HeldItem.createWall))
			{
				canUse = false;
				this.ApplyItemTime(this.HeldItem, this.wallSpeed);
				NetMessage.SendData(17, -1, -1, null, 22, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.HeldItem.createWall, 0, 0, 0);
				if (this.autoPaint && this.builderAccStatus[3] == 0)
				{
					this.TryPainting(Player.tileTargetX, Player.tileTargetY, true, false);
				}
			}
			return canUse;
		}

		// Token: 0x0600086A RID: 2154 RVA: 0x0030C86B File Offset: 0x0030AA6B
		private bool PlaceThing_ValidWallForReplacement()
		{
			Main.tile[Player.tileTargetX, Player.tileTargetY];
			return Main.tile[Player.tileTargetX, Player.tileTargetY].wall > 0;
		}

		// Token: 0x0600086B RID: 2155 RVA: 0x0030C8A0 File Offset: 0x0030AAA0
		private bool PlaceThing_TryReplacingTiles(bool canUse)
		{
			bool flag = this.PlaceThing_ValidTileForReplacement();
			if (flag)
			{
				TileObject.objectPreview.Reset();
			}
			if (this.controlUseItem && (canUse && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && this.itemAnimation > 0 && this.ItemTimeIsZero && flag))
			{
				Item bestPickaxe = this.GetBestPickaxe();
				if (bestPickaxe == null)
				{
					return false;
				}
				Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
				ushort type = tile.type;
				int num = this.hitReplace.HitObject(Player.tileTargetX, Player.tileTargetY, 1);
				int pickaxeDamage = this.GetPickaxeDamage(Player.tileTargetX, Player.tileTargetY, bestPickaxe.pick, num, tile);
				if (pickaxeDamage == 0)
				{
					return false;
				}
				if (!WorldGen.IsTileReplacable(Player.tileTargetX, Player.tileTargetY))
				{
					return false;
				}
				if (!false)
				{
					if (this.hitReplace.AddDamage(num, pickaxeDamage, true) < 100)
					{
						int num2 = WorldGen.KillTile_GetTileDustAmount(true, tile);
						for (int i = 0; i < num2; i++)
						{
							WorldGen.KillTile_MakeTileDust(Player.tileTargetX, Player.tileTargetY, tile);
						}
						WorldGen.KillTile_PlaySounds(Player.tileTargetX, Player.tileTargetY, true, tile);
						if (this.HeldItem.consumable)
						{
							this.HeldItem.stack++;
						}
						this.dontConsumeWand = true;
						this.ApplyItemTime(bestPickaxe, this.pickSpeed);
						this.SetItemAnimation((int)((float)bestPickaxe.useTime * this.pickSpeed));
						return false;
					}
					this.ClearMiningCacheAt(Player.tileTargetX, Player.tileTargetY, 1);
				}
				int[,] typeCaches = this.PlaceThing_Tiles_GetAutoAccessoryCache();
				ushort num3 = (ushort)this.HeldItem.createTile;
				int num4 = this.HeldItem.placeStyle;
				if (this.UsingBiomeTorches && num3 == 4)
				{
					num4 = this.BiomeTorchPlaceStyle(num4);
				}
				if (this.UsingBiomeTorches && num3 == 215)
				{
					num4 = this.BiomeCampfirePlaceStyle(num4);
				}
				if (WorldGen.ReplaceTile(Player.tileTargetX, Player.tileTargetY, num3, num4))
				{
					canUse = false;
					NetMessage.SendData(17, -1, -1, null, 21, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num3, num4, 0, 0);
					this.ApplyItemTime(this.HeldItem);
					this.SetItemAnimation(this.HeldItem.useAnimation);
					this.PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(typeCaches, (int)num3);
				}
			}
			return canUse;
		}

		// Token: 0x0600086C RID: 2156 RVA: 0x0030CAE0 File Offset: 0x0030ACE0
		private bool PlaceThing_ValidTileForReplacement()
		{
			int createTile = this.HeldItem.createTile;
			int num = this.HeldItem.placeStyle;
			if (this.UsingBiomeTorches && createTile == 4)
			{
				num = this.BiomeTorchPlaceStyle(num);
			}
			if (this.UsingBiomeTorches && createTile == 215)
			{
				num = this.BiomeCampfirePlaceStyle(num);
			}
			Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
			if (WorldGen.WouldTileReplacementBeBlockedByLiquid(Player.tileTargetX, Player.tileTargetY, 1))
			{
				return false;
			}
			if (ItemID.Sets.SortingPriorityRopes[this.HeldItem.type] != -1)
			{
				return false;
			}
			if (Main.tileMoss[createTile])
			{
				return false;
			}
			if (TileID.Sets.DoesntPlaceWithTileReplacement[createTile])
			{
				return false;
			}
			if (TileID.Sets.DoesntGetReplacedWithTileReplacement[(int)tile.type])
			{
				return false;
			}
			if (!this.PlaceThing_CheckSpecificValidtyCaseForBlockSwap(createTile, (int)tile.type))
			{
				return false;
			}
			if (Main.tileCut[(int)tile.type])
			{
				return false;
			}
			if (TileID.Sets.Platforms[(int)tile.type] && (int)tile.type == createTile)
			{
				return (int)tile.frameY != num * 18;
			}
			if (tile.type == 4 && (int)tile.type == createTile)
			{
				return (int)tile.frameY != num * 22;
			}
			if (tile.type == 215 && (int)tile.type == createTile)
			{
				return (int)(tile.frameX / 54) != num;
			}
			if (TileID.Sets.BasicChest[(int)tile.type] && TileID.Sets.BasicChest[createTile])
			{
				return (int)(tile.frameX / 36) != num || (int)tile.type != createTile;
			}
			if (TileID.Sets.BasicDresser[(int)tile.type] && TileID.Sets.BasicDresser[createTile])
			{
				return (int)(tile.frameX / 54) != num || (int)tile.type != createTile;
			}
			bool flag = false;
			if (Main.tileRope[(int)tile.type])
			{
				if (createTile != 314 && !TileID.Sets.Platforms[createTile])
				{
					return false;
				}
				flag = true;
			}
			if (!flag && Main.tileFrameImportant[createTile] && !TileID.Sets.Platforms[createTile])
			{
				return false;
			}
			if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == createTile)
			{
				return false;
			}
			if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 230 && Main.getGoodWorld)
			{
				return false;
			}
			if (!TileID.Sets.IgnoresTileReplacementDropCheckWhenBeingPlaced[createTile])
			{
				int num2;
				int num3;
				int num4;
				int num5;
				WorldGen.KillTile_GetItemDrops(Player.tileTargetX, Player.tileTargetY, tile, out num2, out num3, out num4, out num5, false);
				if (num2 == this.HeldItem.type)
				{
					return false;
				}
			}
			return WorldGen.WouldTileReplacementWork((ushort)createTile, Player.tileTargetX, Player.tileTargetY);
		}

		// Token: 0x0600086D RID: 2157 RVA: 0x0030CD5C File Offset: 0x0030AF5C
		private bool PlaceThing_CheckSpecificValidtyCaseForBlockSwap(int tileTypeBeingPlaced, int tileTypeCurrentlyPlaced)
		{
			bool flag = TileID.Sets.Falling[tileTypeBeingPlaced];
			bool flag2 = TileID.Sets.Falling[tileTypeCurrentlyPlaced] && !flag;
			if (flag2)
			{
				Item bestPickaxe = this.GetBestPickaxe();
				if (bestPickaxe != null && bestPickaxe.pick >= 110)
				{
					flag2 = false;
				}
			}
			if (flag2 && Player.tileTargetY > 0)
			{
				Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
				bool flag3 = false;
				if (tile != null)
				{
					flag3 |= !tile.active();
					flag3 |= (tile.active() && !TileID.Sets.Falling[(int)tile.type]);
				}
				if (flag3)
				{
					flag2 = false;
				}
			}
			return !flag2;
		}

		// Token: 0x0600086E RID: 2158 RVA: 0x0030CDFC File Offset: 0x0030AFFC
		public Item GetBestPickaxe()
		{
			Item item = null;
			for (int i = 0; i < 50; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].pick > 0 && (item == null || this.inventory[i].pick > item.pick))
				{
					item = this.inventory[i];
				}
			}
			return item;
		}

		// Token: 0x0600086F RID: 2159 RVA: 0x0030CE5C File Offset: 0x0030B05C
		private TileObject PlaceThing_Tiles_PlaceIt(bool newObjectType, TileObject data, int tileToCreate)
		{
			int num = this.inventory[this.selectedItem].placeStyle;
			if (!newObjectType)
			{
				num = this.PlaceThing_Tiles_PlaceIt_GetLegacyTileStyle(num);
			}
			int[,] typeCaches = this.PlaceThing_Tiles_GetAutoAccessoryCache();
			bool forced = false;
			bool flag;
			if (newObjectType)
			{
				flag = TileObject.Place(data);
				WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
				if (Main.netMode != 1 || !TileID.Sets.IsAContainer[tileToCreate])
				{
					SoundEngine.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1, 1f, 0f);
				}
			}
			else
			{
				if (this.UsingBiomeTorches && tileToCreate == 4 && num == 0)
				{
					num = this.BiomeTorchPlaceStyle(num);
				}
				flag = WorldGen.PlaceTile(Player.tileTargetX, Player.tileTargetY, tileToCreate, false, forced, this.whoAmI, num);
			}
			if (flag)
			{
				this.ApplyItemTime(this.inventory[this.selectedItem], this.tileSpeed);
				if (newObjectType)
				{
					TileObjectData.CallPostPlacementPlayerHook(Player.tileTargetX, Player.tileTargetY, tileToCreate, num, this.direction, data.alternate, data);
					if (Main.netMode == 1 && !Main.tileContainer[tileToCreate] && tileToCreate != 423)
					{
						NetMessage.SendObjectPlacement(-1, Player.tileTargetX, Player.tileTargetY, data.type, data.style, data.alternate, data.random, this.direction);
					}
				}
				else
				{
					NetMessage.SendData(17, -1, -1, null, 1, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)tileToCreate, num, 0, 0);
					this.PlaceThing_Tiles_PlaceIt_SpinChairs();
					this.PlaceThing_Tiles_PlaceIt_SpinBedsAndBaths();
				}
				this.PlaceThing_Tiles_PlaceIt_AdjustPlants();
				this.PlaceThing_Tiles_PlaceIt_SpinTraps();
				this.PlaceThing_Tiles_PlaceIt_TriggerLogicLamp();
				this.PlaceThing_Tiles_PlaceIt_SpinSmartPlatform();
				this.PlaceThing_Tiles_PlaceIt_ConsumeFlexibleWandMaterial();
				this.PlaceThing_Tiles_PlaceIt_UnslopeForSolids();
				this.PlaceThing_Tiles_PlaceIt_KillGrassForSolids();
				this.PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(typeCaches, tileToCreate);
				if (PlayerInput.UsingGamepad && ItemID.Sets.SingleUseInGamepad[this.inventory[this.selectedItem].type] && Main.myPlayer == this.whoAmI && !Main.SmartCursorIsUsed)
				{
					Main.blockMouse = true;
				}
			}
			return data;
		}

		// Token: 0x06000870 RID: 2160 RVA: 0x0030D030 File Offset: 0x0030B230
		public void PlaceThing_Tiles_PlaceIt_ConsumeFlexibleWandMaterial()
		{
			FlexibleTileWand flexibleTileWand = this.inventory[this.selectedItem].GetFlexibleTileWand();
			if (flexibleTileWand == null)
			{
				return;
			}
			FlexibleTileWand.PlacementOption placementOption;
			Item item;
			if (!flexibleTileWand.TryGetPlacementOption(this, Player.FlexibleWandRandomSeed, Player.FlexibleWandCycleOffset, out placementOption, out item))
			{
				return;
			}
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir(false);
			}
		}

		// Token: 0x06000871 RID: 2161 RVA: 0x0030D08C File Offset: 0x0030B28C
		public int BiomeTorchPlaceStyle(int style)
		{
			if (!this.UsingBiomeTorches || style != 0)
			{
				return style;
			}
			if (this.ZoneShimmer)
			{
				style = 23;
			}
			else if (this.ZoneLihzhardTemple)
			{
				style = 21;
			}
			else if (this.ZoneDungeon)
			{
				style = 13;
			}
			else if (this.position.Y > (float)(Main.UnderworldLayer * 16))
			{
				style = 7;
			}
			else if (this.ZoneHallow)
			{
				style = 20;
			}
			else if (this.ZoneCorrupt)
			{
				style = 18;
			}
			else if (this.ZoneCrimson)
			{
				style = 19;
			}
			else if (this.ZoneSnow)
			{
				style = 9;
			}
			else if (this.ZoneGlowshroom)
			{
				style = 22;
			}
			else if (this.ZoneJungle)
			{
				style = 21;
			}
			else if ((this.ZoneDesert && (double)this.position.Y < Main.worldSurface * 16.0) || this.ZoneUndergroundDesert)
			{
				style = 16;
			}
			else if (this.ZoneDesert && Main.remixWorld)
			{
				style = 16;
			}
			return style;
		}

		// Token: 0x06000872 RID: 2162 RVA: 0x0030D198 File Offset: 0x0030B398
		public int BiomeTorchHoldStyle(int style)
		{
			if (!this.UsingBiomeTorches || style != 8)
			{
				return style;
			}
			if (this.ZoneShimmer)
			{
				style = 5353;
			}
			else if (this.ZoneLihzhardTemple)
			{
				style = 4388;
			}
			else if (this.ZoneDungeon)
			{
				style = 3004;
			}
			else if (this.position.Y > (float)(Main.UnderworldLayer * 16))
			{
				style = 433;
			}
			else if (this.ZoneHallow)
			{
				style = 4387;
			}
			else if (this.ZoneCorrupt)
			{
				style = 4385;
			}
			else if (this.ZoneCrimson)
			{
				style = 4386;
			}
			else if (this.ZoneSnow)
			{
				style = 974;
			}
			else if (this.ZoneGlowshroom)
			{
				style = 5293;
			}
			else if (this.ZoneJungle)
			{
				style = 4388;
			}
			else if ((this.ZoneDesert && (double)this.position.Y < Main.worldSurface * 16.0) || this.ZoneUndergroundDesert)
			{
				style = 4383;
			}
			else if (this.ZoneDesert && Main.remixWorld)
			{
				style = 4383;
			}
			return style;
		}

		// Token: 0x06000873 RID: 2163 RVA: 0x0030D2CC File Offset: 0x0030B4CC
		public int BiomeCampfirePlaceStyle(int style)
		{
			if (!this.UsingBiomeTorches || style != 0)
			{
				return style;
			}
			if (this.ZoneShimmer)
			{
				style = 15;
			}
			else if (this.ZoneLihzhardTemple)
			{
				style = 13;
			}
			else if (this.ZoneDungeon)
			{
				style = 7;
			}
			else if (this.position.Y > (float)(Main.UnderworldLayer * 16))
			{
				style = 2;
			}
			else if (this.ZoneHallow)
			{
				style = 12;
			}
			else if (this.ZoneCorrupt)
			{
				style = 10;
			}
			else if (this.ZoneCrimson)
			{
				style = 11;
			}
			else if (this.ZoneSnow)
			{
				style = 3;
			}
			else if (this.ZoneGlowshroom)
			{
				style = 14;
			}
			else if (this.ZoneJungle)
			{
				style = 13;
			}
			else if ((this.ZoneDesert && (double)this.position.Y < Main.worldSurface * 16.0) || this.ZoneUndergroundDesert)
			{
				style = 8;
			}
			else if (this.ZoneDesert && Main.remixWorld)
			{
				style = 8;
			}
			return style;
		}

		// Token: 0x06000874 RID: 2164 RVA: 0x0030D3D4 File Offset: 0x0030B5D4
		public int BiomeCampfireHoldStyle(int itemType)
		{
			if (!this.UsingBiomeTorches || itemType != 966)
			{
				return itemType;
			}
			if (this.ZoneShimmer)
			{
				itemType = 5357;
			}
			else if (this.ZoneLihzhardTemple)
			{
				itemType = 4694;
			}
			else if (this.ZoneDungeon)
			{
				itemType = 3724;
			}
			else if (this.position.Y > (float)(Main.UnderworldLayer * 16))
			{
				itemType = 3047;
			}
			else if (this.ZoneHallow)
			{
				itemType = 4693;
			}
			else if (this.ZoneCorrupt)
			{
				itemType = 4691;
			}
			else if (this.ZoneCrimson)
			{
				itemType = 4692;
			}
			else if (this.ZoneSnow)
			{
				itemType = 3048;
			}
			else if (this.ZoneJungle)
			{
				itemType = 4694;
			}
			else if (this.ZoneGlowshroom)
			{
				itemType = 5299;
			}
			else if ((this.ZoneDesert && (double)this.position.Y < Main.worldSurface * 16.0) || this.ZoneUndergroundDesert)
			{
				itemType = 4689;
			}
			else if (this.ZoneDesert && Main.remixWorld)
			{
				itemType = 4689;
			}
			return itemType;
		}

		// Token: 0x06000875 RID: 2165 RVA: 0x0030D50C File Offset: 0x0030B70C
		private int[,] PlaceThing_Tiles_GetAutoAccessoryCache()
		{
			int[,] array = null;
			if (this.autoPaint || this.autoActuator)
			{
				array = new int[11, 11];
				for (int i = 0; i < 11; i++)
				{
					for (int j = 0; j < 11; j++)
					{
						int num = Player.tileTargetX - 5 + i;
						int num2 = Player.tileTargetY - 5 + j;
						if (Main.tile[num, num2].active())
						{
							array[i, j] = (int)Main.tile[num, num2].type;
						}
						else
						{
							array[i, j] = -1;
						}
					}
				}
			}
			return array;
		}

		// Token: 0x06000876 RID: 2166 RVA: 0x0030D5A0 File Offset: 0x0030B7A0
		private int PlaceThing_Tiles_PlaceIt_GetLegacyTileStyle(int style)
		{
			int createTile = this.inventory[this.selectedItem].createTile;
			if (createTile == 36)
			{
				style = Main.rand.Next(7);
			}
			if (createTile == 212 && this.direction > 0)
			{
				style = 1;
			}
			if (createTile == 141)
			{
				style = Main.rand.Next(2);
			}
			if (createTile == 128 || createTile == 269 || createTile == 334)
			{
				if (this.direction < 0)
				{
					style = -1;
				}
				else
				{
					style = 1;
				}
			}
			if (createTile == 241 && this.inventory[this.selectedItem].placeStyle == 0)
			{
				style = Main.rand.Next(0, 9);
			}
			if (createTile == 35 && this.inventory[this.selectedItem].placeStyle == 0)
			{
				style = Main.rand.Next(9);
			}
			if (createTile == 314 && style == 2 && this.direction == 1)
			{
				style++;
			}
			if (createTile == 129)
			{
				style = (int)((short)Main.rand.Next(18));
			}
			return style;
		}

		// Token: 0x06000877 RID: 2167 RVA: 0x0030D6A8 File Offset: 0x0030B8A8
		private void PlaceThing_Tiles_PlaceIt_UnslopeForSolids()
		{
			if (Main.tileSolid[this.inventory[this.selectedItem].createTile] && (this.inventory[this.selectedItem].createTile < 0 || !TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile]))
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY + 1;
				if (Main.tile[num, num2] != null && !TileID.Sets.Platforms[(int)Main.tile[num, num2].type] && (Main.tile[num, num2].topSlope() || Main.tile[num, num2].halfBrick()))
				{
					WorldGen.SlopeTile(num, num2, 0, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, (float)num, (float)num2, 0f, 0, 0, 0);
					}
				}
				num = Player.tileTargetX;
				num2 = Player.tileTargetY - 1;
				if (Main.tile[num, num2] != null && !TileID.Sets.Platforms[(int)Main.tile[num, num2].type] && Main.tile[num, num2].bottomSlope())
				{
					WorldGen.SlopeTile(num, num2, 0, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, (float)num, (float)num2, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x06000878 RID: 2168 RVA: 0x0030D7FC File Offset: 0x0030B9FC
		private void PlaceThing_Tiles_PlaceIt_KillGrassForSolids()
		{
			if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
			{
				for (int i = Player.tileTargetX - 1; i <= Player.tileTargetX + 1; i++)
				{
					for (int j = Player.tileTargetY - 1; j <= Player.tileTargetY + 1; j++)
					{
						Tile tile = Main.tile[i, j];
						if (tile.active() && this.inventory[this.selectedItem].createTile != (int)tile.type && (tile.type == 2 || tile.type == 23 || tile.type == 60 || tile.type == 70 || tile.type == 109 || tile.type == 199 || tile.type == 477 || tile.type == 492 || tile.type == 633))
						{
							bool flag = true;
							for (int k = i - 1; k <= i + 1; k++)
							{
								for (int l = j - 1; l <= j + 1; l++)
								{
									if (!WorldGen.SolidTile(k, l, false))
									{
										flag = false;
									}
								}
							}
							if (flag)
							{
								WorldGen.KillTile(i, j, true, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 1f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000879 RID: 2169 RVA: 0x0030D960 File Offset: 0x0030BB60
		private void PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(int[,] typeCaches, int tileToCreate)
		{
			if (this.autoPaint || this.autoActuator)
			{
				int num = 0;
				int num2 = 0;
				int num3 = 11;
				int num4 = 11;
				bool flag = TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type];
				bool flag2 = TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && TileID.Sets.Platforms[tileToCreate];
				if (!Main.tileFrameImportant[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || flag)
				{
					num2 = (num = 5);
					num4 = (num3 = 6);
				}
				for (int i = num; i < num3; i++)
				{
					for (int j = num2; j < num4; j++)
					{
						int num5 = Player.tileTargetX - 5 + i;
						int num6 = Player.tileTargetY - 5 + j;
						if ((Main.tile[num5, num6].active() || typeCaches[i, j] != -1) && (!Main.tile[num5, num6].active() || flag2 || (typeCaches[i, j] != (int)Main.tile[num5, num6].type && (int)Main.tile[num5, num6].type == tileToCreate)))
						{
							if (this.autoPaint && this.builderAccStatus[3] == 0)
							{
								this.TryPainting(num5, num6, false, false);
							}
							if (this.autoActuator && this.builderAccStatus[2] == 0)
							{
								bool flag3 = Main.tileSolid[(int)Main.tile[num5, num6].type] && !TileID.Sets.NotReallySolid[(int)Main.tile[num5, num6].type];
								ushort type = Main.tile[num5, num6].type;
								if (type == 314 || type - 386 <= 3)
								{
									flag3 = false;
								}
								if (flag3)
								{
									int num7 = this.FindItem(849);
									if (num7 > -1 && WorldGen.PlaceActuator(num5, num6))
									{
										NetMessage.SendData(17, -1, -1, null, 8, (float)num5, (float)num6, 0f, 0, 0, 0);
										this.inventory[num7].stack--;
										if (this.inventory[num7].stack <= 0)
										{
											this.inventory[num7].SetDefaults(0);
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x0600087A RID: 2170 RVA: 0x0030DBD4 File Offset: 0x0030BDD4
		private void PlaceThing_Tiles_PlaceIt_SpinSmartPlatform()
		{
			if (this.inventory[this.selectedItem].createTile >= 0 && TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile] && Main.SmartCursorIsUsed)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				int num3 = -1;
				int num4 = 0;
				int num5 = 0;
				bool flag = true;
				for (int i = -1; i < 2; i++)
				{
					for (int j = -1; j < 2; j++)
					{
						if ((i != 0 || j != 0) && TileID.Sets.Platforms[(int)Main.tile[num + i, num2 + j].type])
						{
							flag = false;
						}
					}
				}
				if (!flag)
				{
					Tile tile = Main.tile[num - 1, num2 - 1];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 2)
					{
						num4++;
					}
					tile = Main.tile[num - 1, num2 + 1];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 1)
					{
						num5++;
					}
					tile = Main.tile[num + 1, num2 - 1];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 1)
					{
						num5++;
					}
					tile = Main.tile[num + 1, num2 + 1];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 2)
					{
						num4++;
					}
					tile = Main.tile[num - 1, num2];
					if (WorldGen.SolidTile(tile))
					{
						num4++;
						if (TileID.Sets.Platforms[(int)tile.type] && tile.slope() == 0)
						{
							num4++;
						}
					}
					tile = Main.tile[num + 1, num2];
					if (WorldGen.SolidTile(tile))
					{
						num5++;
						if (TileID.Sets.Platforms[(int)tile.type] && tile.slope() == 0)
						{
							num5++;
						}
					}
					if (num4 > num5)
					{
						num3 = 1;
					}
					else if (num5 > num4)
					{
						num3 = 2;
					}
					tile = Main.tile[num - 1, num2];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type])
					{
						num3 = 0;
					}
					tile = Main.tile[num + 1, num2];
					if (tile.active() && TileID.Sets.Platforms[(int)tile.type])
					{
						num3 = 0;
					}
					if (num3 != -1)
					{
						WorldGen.SlopeTile(num, num2, num3, true);
						int num6 = (int)Main.tile[num, num2].slope();
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num6, 0, 0, 0);
						}
						int num7;
						int num8;
						if (num3 == 1)
						{
							num7 = -1;
							num8 = -1;
						}
						else
						{
							num7 = 1;
							num8 = -1;
						}
						tile = Main.tile[num + num7, num2 + num8];
						if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() == 0 && (!Main.tile[num + num7 + num7, num2 + num8].active() || !TileID.Sets.Platforms[(int)Main.tile[num + num7 + num7, num2 + num8].type] || !Main.tile[num + num7 + num7, num2 + num8].halfBrick()))
						{
							WorldGen.SlopeTile(num + num7, num2 + num8, num3, false);
							num6 = (int)tile.slope();
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, (float)(num + num7), (float)(num2 + num8), (float)num6, 0, 0, 0);
							}
						}
						if (num3 == 1)
						{
							num7 = 1;
							num8 = 1;
						}
						else
						{
							num7 = -1;
							num8 = 1;
						}
						tile = Main.tile[num + num7, num2 + num8];
						if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() == 0 && WorldGen.PlatformProperSides(num + num7, num2 + num8, true) <= 0)
						{
							WorldGen.SlopeTile(num + num7, num2 + num8, num3, false);
							num6 = (int)tile.slope();
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, (float)(num + num7), (float)(num2 + num8), (float)num6, 0, 0, 0);
								return;
							}
						}
					}
					else
					{
						int num7 = -1;
						tile = Main.tile[num + num7, num2];
						if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 0)
						{
							int num9 = (tile.slope() == 1).ToDirectionInt() * num7;
							num3 = (int)((num9 == -1) ? 0 : tile.slope());
							bool flag2 = true;
							if (Main.tile[num + num7 * 2, num2 + num9].active() && TileID.Sets.Platforms[(int)Main.tile[num + num7 * 2, num2].type] && num3 == (int)Main.tile[num + num7 * 2, num2 + num9].slope())
							{
								flag2 = false;
							}
							if (Main.tile[num, num2 - num9].active() && TileID.Sets.Platforms[(int)Main.tile[num, num2 - num9].type] && tile.slope() == Main.tile[num, num2 - num9].slope())
							{
								flag2 = false;
							}
							if (flag2)
							{
								WorldGen.SlopeTile(num + num7, num2, num3, false);
								int num10 = (int)tile.slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)(num + num7), (float)num2, (float)num10, 0, 0, 0);
								}
							}
						}
						num7 = 1;
						int num8 = 0;
						tile = Main.tile[num + num7, num2 + num8];
						if (tile.active() && TileID.Sets.Platforms[(int)tile.type] && tile.slope() != 0)
						{
							int num11 = (tile.slope() == 1).ToDirectionInt() * num7;
							num3 = (int)((num11 == -1) ? 0 : tile.slope());
							bool flag3 = true;
							if (Main.tile[num + num7 * 2, num2 + num11].active() && TileID.Sets.Platforms[(int)Main.tile[num + num7 * 2, num2].type] && num3 == (int)Main.tile[num + num7 * 2, num2 + num11].slope())
							{
								flag3 = false;
							}
							if (Main.tile[num, num2 - num11].active() && TileID.Sets.Platforms[(int)Main.tile[num, num2 - num11].type] && tile.slope() == Main.tile[num, num2 - num11].slope())
							{
								flag3 = false;
							}
							if (flag3)
							{
								WorldGen.SlopeTile(num + num7, num2, num3, false);
								int num10 = (int)tile.slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)(num + num7), (float)num2, (float)num10, 0, 0, 0);
								}
							}
						}
						if (num4 == num5 && WorldGen.PlatformProperSides(num, num2, false) == 0)
						{
							tile = Main.tile[num, num2 + 1];
							if (tile.active() && !tile.halfBrick() && tile.slope() == 0 && Main.tileSolid[(int)tile.type])
							{
								num3 = ((this.direction == 1) ? 2 : 1);
								WorldGen.SlopeTile(num, num2, num3, false);
								int num10 = (int)Main.tile[num, num2].slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num10, 0, 0, 0);
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x0600087B RID: 2171 RVA: 0x0030E360 File Offset: 0x0030C560
		private void PlaceThing_Tiles_PlaceIt_TriggerLogicLamp()
		{
			if (this.inventory[this.selectedItem].createTile == 419)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 18, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
					return;
				}
				Wiring.PokeLogicGate(Player.tileTargetX, Player.tileTargetY);
			}
		}

		// Token: 0x0600087C RID: 2172 RVA: 0x0030E3C0 File Offset: 0x0030C5C0
		private void PlaceThing_Tiles_PlaceIt_SpinBedsAndBaths()
		{
			if ((this.inventory[this.selectedItem].createTile == 79 || this.inventory[this.selectedItem].createTile == 90) && Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 5, TileChangeType.None);
			}
		}

		// Token: 0x0600087D RID: 2173 RVA: 0x0030E414 File Offset: 0x0030C614
		private void PlaceThing_Tiles_PlaceIt_SpinChairs()
		{
			if (this.inventory[this.selectedItem].createTile == 15)
			{
				if (this.direction == 1)
				{
					Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
					tile.frameX += 18;
					Tile tile2 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
					tile2.frameX += 18;
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, Player.tileTargetX - 1, Player.tileTargetY - 1, 3, TileChangeType.None);
				}
			}
		}

		// Token: 0x0600087E RID: 2174 RVA: 0x0030E4A8 File Offset: 0x0030C6A8
		private void PlaceThing_Tiles_PlaceIt_SpinTraps()
		{
			if (this.inventory[this.selectedItem].createTile == 137)
			{
				if (this.direction == 1)
				{
					Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
					tile.frameX += 18;
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, TileChangeType.None);
				}
			}
		}

		// Token: 0x0600087F RID: 2175 RVA: 0x0030E514 File Offset: 0x0030C714
		private void PlaceThing_Tiles_PlaceIt_AdjustPlants()
		{
			if (this.inventory[this.selectedItem].createTile != 3)
			{
				return;
			}
			FlowerPacketInfo flowerPacketInfo = ItemID.Sets.flowerPacketInfo[this.inventory[this.selectedItem].type];
			if (flowerPacketInfo == null)
			{
				return;
			}
			List<int> stylesOnPurity = flowerPacketInfo.stylesOnPurity;
			if (stylesOnPurity.Count == 0)
			{
				return;
			}
			int num = stylesOnPurity[Main.rand.Next(stylesOnPurity.Count)];
			Main.tile[Player.tileTargetX, Player.tileTargetY].frameX = (short)(num * 18);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, TileChangeType.None);
			}
		}

		// Token: 0x06000880 RID: 2176 RVA: 0x0030E5B4 File Offset: 0x0030C7B4
		private bool PlaceThing_Tiles_PlaceIt_StaffOfRegrowthCheck(bool placed)
		{
			bool flag = this.inventory[this.selectedItem].type == 213 || this.inventory[this.selectedItem].type == 5295;
			if (flag && !placed && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1 && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
			{
				int num = 0;
				int num2 = 0;
				Point point = base.Center.ToTileCoordinates();
				Dictionary<ushort, int> dictionary = new Dictionary<ushort, int>();
				WorldUtils.Gen(new Point(point.X - 25, point.Y - 25), new Shapes.Rectangle(50, 50), new Actions.TileScanner(new ushort[]
				{
					182,
					515,
					180,
					513,
					179,
					512,
					183,
					516,
					181,
					514,
					381,
					517,
					534,
					535,
					536,
					537,
					539,
					540,
					625,
					626,
					627,
					628
				}).Output(dictionary));
				foreach (KeyValuePair<ushort, int> keyValuePair in dictionary)
				{
					if (keyValuePair.Value > num2)
					{
						num2 = keyValuePair.Value;
						num = (int)keyValuePair.Key;
					}
				}
				if (num <= 537)
				{
					switch (num)
					{
					case 512:
						num = 179;
						break;
					case 513:
						num = 180;
						break;
					case 514:
						num = 181;
						break;
					case 515:
						num = 182;
						break;
					case 516:
						num = 183;
						break;
					case 517:
						num = 381;
						break;
					default:
						if (num != 535)
						{
							if (num == 537)
							{
								num = 536;
							}
						}
						else
						{
							num = 534;
						}
						break;
					}
				}
				else if (num != 540)
				{
					if (num != 626)
					{
						if (num == 628)
						{
							num = 627;
						}
					}
					else
					{
						num = 625;
					}
				}
				else
				{
					num = 539;
				}
				if (num2 == 0)
				{
					num = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						182,
						180,
						179,
						183,
						181
					});
				}
				if (num != 0)
				{
					Main.tile[Player.tileTargetX, Player.tileTargetY].type = (ushort)num;
					WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
					NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, TileChangeType.None);
					placed = true;
				}
			}
			if (flag && !placed && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 38 && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
			{
				int num3 = 0;
				int num4 = 0;
				Point point2 = base.Center.ToTileCoordinates();
				Dictionary<ushort, int> dictionary2 = new Dictionary<ushort, int>();
				WorldUtils.Gen(new Point(point2.X - 25, point2.Y - 25), new Shapes.Rectangle(50, 50), new Actions.TileScanner(new ushort[]
				{
					182,
					515,
					180,
					513,
					179,
					512,
					183,
					516,
					181,
					514,
					381,
					517,
					534,
					535,
					536,
					537,
					539,
					540,
					625,
					626,
					627,
					628
				}).Output(dictionary2));
				foreach (KeyValuePair<ushort, int> keyValuePair2 in dictionary2)
				{
					if (keyValuePair2.Value > num4)
					{
						num4 = keyValuePair2.Value;
						num3 = (int)keyValuePair2.Key;
					}
				}
				if (num3 <= 534)
				{
					switch (num3)
					{
					case 179:
						num3 = 512;
						break;
					case 180:
						num3 = 513;
						break;
					case 181:
						num3 = 514;
						break;
					case 182:
						num3 = 515;
						break;
					case 183:
						num3 = 516;
						break;
					default:
						if (num3 != 381)
						{
							if (num3 == 534)
							{
								num3 = 535;
							}
						}
						else
						{
							num3 = 517;
						}
						break;
					}
				}
				else if (num3 <= 539)
				{
					if (num3 != 536)
					{
						if (num3 == 539)
						{
							num3 = 540;
						}
					}
					else
					{
						num3 = 537;
					}
				}
				else if (num3 != 625)
				{
					if (num3 == 627)
					{
						num3 = 628;
					}
				}
				else
				{
					num3 = 626;
				}
				if (num4 == 0)
				{
					num3 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						515,
						513,
						512,
						516,
						514
					});
				}
				if (num3 != 0)
				{
					Main.tile[Player.tileTargetX, Player.tileTargetY].type = (ushort)num3;
					WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
					NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, TileChangeType.None);
					placed = true;
				}
			}
			return placed;
		}

		// Token: 0x06000881 RID: 2177 RVA: 0x0030EA3C File Offset: 0x0030CC3C
		private bool PlaceThing_Tiles_BlockPlacementForAssortedThings(bool canPlace)
		{
			bool flag = this.inventory[this.selectedItem].type == 213 || this.inventory[this.selectedItem].type == 5295;
			if (flag)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 38)
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 2 || this.inventory[this.selectedItem].createTile == 109)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0)
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 23 || this.inventory[this.selectedItem].createTile == 199)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive())
				{
					if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0)
					{
						canPlace = true;
					}
					else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 59)
					{
						canPlace = true;
					}
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 227)
			{
				canPlace = true;
			}
			else if (this.inventory[this.selectedItem].createTile >= 373 && this.inventory[this.selectedItem].createTile <= 375)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY - 1;
				if (Main.tile[num, num2].nactive() && Main.tileSolid[(int)Main.tile[num, num2].type] && !Main.tileSolidTop[(int)Main.tile[num, num2].type])
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 461)
			{
				int num3 = Player.tileTargetX;
				int num4 = Player.tileTargetY - 1;
				if (Main.tile[num3, num4].nactive() && Main.tileSolid[(int)Main.tile[num3, num4].type] && !Main.tileSolidTop[(int)Main.tile[num3, num4].type])
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 60 || this.inventory[this.selectedItem].createTile == 70 || this.inventory[this.selectedItem].createTile == 661 || this.inventory[this.selectedItem].createTile == 662)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 59)
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 4 || this.inventory[this.selectedItem].createTile == 136)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall > 0)
				{
					canPlace = true;
				}
				else
				{
					if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY))
					{
						if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].halfBrick() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].slope() != 0))
						{
							if (!TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
							{
								WorldGen.SlopeTile(Player.tileTargetX, Player.tileTargetY + 1, 0, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)Player.tileTargetX, (float)(Player.tileTargetY + 1), 0f, 0, 0, 0);
								}
							}
						}
						else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].halfBrick() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].slope() != 0))
						{
							if (!TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type])
							{
								WorldGen.SlopeTile(Player.tileTargetX - 1, Player.tileTargetY, 0, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)(Player.tileTargetX - 1), (float)Player.tileTargetY, 0f, 0, 0, 0);
								}
							}
						}
						else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY) && (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].halfBrick() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].slope() != 0) && !TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type])
						{
							WorldGen.SlopeTile(Player.tileTargetX + 1, Player.tileTargetY, 0, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, (float)(Player.tileTargetX + 1), (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
					}
					int num5 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type;
					if (Main.tile[Player.tileTargetX, Player.tileTargetY].halfBrick())
					{
						num5 = -1;
					}
					int num6 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type;
					int num7 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type;
					int tree = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
					int tree2 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].type;
					int tree3 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
					int tree4 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].type;
					if (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive())
					{
						num5 = -1;
					}
					if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].nactive())
					{
						num6 = -1;
					}
					if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY].nactive())
					{
						num7 = -1;
					}
					if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].nactive())
					{
						tree = -1;
					}
					if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].nactive())
					{
						tree2 = -1;
					}
					if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY + 1].nactive())
					{
						tree3 = -1;
					}
					if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].nactive())
					{
						tree4 = -1;
					}
					if (num5 >= 0 && Main.tileSolid[num5] && (!Main.tileNoAttach[num5] || (num5 >= 0 && TileID.Sets.Platforms[num5])))
					{
						canPlace = true;
					}
					else if ((num6 >= 0 && Main.tileSolid[num6] && !Main.tileNoAttach[num6]) || (WorldGen.IsTreeType(num6) && WorldGen.IsTreeType(tree) && WorldGen.IsTreeType(tree3)) || (num6 >= 0 && TileID.Sets.IsBeam[num6]))
					{
						canPlace = true;
					}
					else if ((num7 >= 0 && Main.tileSolid[num7] && !Main.tileNoAttach[num7]) || (WorldGen.IsTreeType(num7) && WorldGen.IsTreeType(tree2) && WorldGen.IsTreeType(tree4)) || (num7 >= 0 && TileID.Sets.IsBeam[num7]))
					{
						canPlace = true;
					}
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 78 || this.inventory[this.selectedItem].createTile == 98 || this.inventory[this.selectedItem].createTile == 100 || this.inventory[this.selectedItem].createTile == 173 || this.inventory[this.selectedItem].createTile == 174 || this.inventory[this.selectedItem].createTile == 324)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && (Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type] || Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type]))
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 419)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() && (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 419 || (this.inventory[this.selectedItem].placeStyle != 2 && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 420)))
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 13 || this.inventory[this.selectedItem].createTile == 29 || this.inventory[this.selectedItem].createTile == 33 || this.inventory[this.selectedItem].createTile == 49 || this.inventory[this.selectedItem].createTile == 50 || this.inventory[this.selectedItem].createTile == 103)
			{
				if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 275 || this.inventory[this.selectedItem].createTile == 276 || this.inventory[this.selectedItem].createTile == 277)
			{
				canPlace = true;
			}
			else if (this.inventory[this.selectedItem].createTile == 51 || this.inventory[this.selectedItem].createTile == 330 || this.inventory[this.selectedItem].createTile == 331 || this.inventory[this.selectedItem].createTile == 332 || this.inventory[this.selectedItem].createTile == 333 || this.inventory[this.selectedItem].createTile == 336 || this.inventory[this.selectedItem].createTile == 340 || this.inventory[this.selectedItem].createTile == 342 || this.inventory[this.selectedItem].createTile == 341 || this.inventory[this.selectedItem].createTile == 343 || this.inventory[this.selectedItem].createTile == 344 || this.inventory[this.selectedItem].createTile == 379 || this.inventory[this.selectedItem].createTile == 351)
			{
				if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > 0)
				{
					canPlace = true;
				}
			}
			else if (this.inventory[this.selectedItem].createTile == 314)
			{
				for (int i = Player.tileTargetX - 1; i <= Player.tileTargetX + 1; i++)
				{
					for (int j = Player.tileTargetY - 1; j <= Player.tileTargetY + 1; j++)
					{
						Tile tile = Main.tile[i, j];
						if (tile.active() || tile.wall > 0)
						{
							canPlace = true;
							break;
						}
					}
				}
			}
			else
			{
				Tile tile2 = Main.tile[Player.tileTargetX - 1, Player.tileTargetY];
				Tile tile3 = Main.tile[Player.tileTargetX + 1, Player.tileTargetY];
				Tile tile4 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
				Tile tile5 = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
				if ((tile3.active() && (Main.tileSolid[(int)tile3.type] || TileID.Sets.IsBeam[(int)tile3.type] || Main.tileRope[(int)tile3.type] || tile3.type == 314)) || (tile3.wall > 0 || (tile2.active() && (Main.tileSolid[(int)tile2.type] || TileID.Sets.IsBeam[(int)tile2.type] || Main.tileRope[(int)tile2.type] || tile2.type == 314))) || (tile2.wall > 0 || (tile5.active() && (Main.tileSolid[(int)tile5.type] || TileID.Sets.IsBeam[(int)tile5.type] || Main.tileRope[(int)tile5.type] || tile5.type == 314))) || (tile5.wall > 0 || (tile4.active() && (Main.tileSolid[(int)tile4.type] || TileID.Sets.IsBeam[(int)tile4.type] || Main.tileRope[(int)tile4.type] || tile4.type == 314))) || tile4.wall > 0)
				{
					canPlace = true;
				}
				else if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall > 0)
				{
					canPlace = true;
				}
			}
			if (flag && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
			{
				int num8 = Player.tileTargetX;
				int num9 = Player.tileTargetY;
				if (Main.tile[num8, num9].type == 3 || Main.tile[num8, num9].type == 73 || Main.tile[num8, num9].type == 84)
				{
					WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
					if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
					}
				}
				else if (Main.tile[num8, num9].type == 83)
				{
					bool flag2 = false;
					short num10 = Main.tile[num8, num9].frameX / 18;
					if (num10 == 0 && Main.dayTime)
					{
						flag2 = true;
					}
					if (num10 == 1 && !Main.dayTime)
					{
						flag2 = true;
					}
					if (num10 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
					{
						flag2 = true;
					}
					if (num10 == 4 && (Main.raining || Main.cloudAlpha > 0f))
					{
						flag2 = true;
					}
					if (num10 == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
					{
						flag2 = true;
					}
					if (flag2)
					{
						WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
						NetMessage.SendData(17, -1, -1, null, 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
					}
				}
			}
			if (Main.tileAlch[this.inventory[this.selectedItem].createTile])
			{
				canPlace = true;
			}
			if (Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (Main.tileCut[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || (Main.tile[Player.tileTargetX, Player.tileTargetY].type >= 373 && Main.tile[Player.tileTargetX, Player.tileTargetY].type <= 375) || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 461))
			{
				if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != this.inventory[this.selectedItem].createTile)
				{
					bool flag3 = Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 78 && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 380 && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 579;
					bool flag4 = Main.tile[Player.tileTargetX, Player.tileTargetY].type == 3 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 73;
					bool flag5 = Main.tileAlch[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && WorldGen.IsHarvestableHerbWithSeed((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type, (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18));
					bool flag6 = Main.tileAlch[this.inventory[this.selectedItem].createTile];
					if (flag3 || ((flag4 || flag5) && flag6))
					{
						WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
						if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					else
					{
						canPlace = false;
					}
				}
				else
				{
					canPlace = false;
				}
			}
			if (!canPlace && this.inventory[this.selectedItem].createTile >= 0 && TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile])
			{
				for (int k = Player.tileTargetX - 1; k <= Player.tileTargetX + 1; k++)
				{
					for (int l = Player.tileTargetY - 1; l <= Player.tileTargetY + 1; l++)
					{
						if (Main.tile[k, l].active())
						{
							canPlace = true;
							break;
						}
					}
				}
			}
			if (this.inventory[this.selectedItem].createTile == 3)
			{
				canPlace = WorldGen.IsFitToPlaceFlowerIn(Player.tileTargetX, Player.tileTargetY, 3);
				if (canPlace)
				{
					WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
					if (Main.netMode == 1 && !Main.tile[Player.tileTargetX, Player.tileTargetY].active())
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
					}
				}
			}
			return canPlace;
		}

		// Token: 0x06000882 RID: 2178 RVA: 0x0031002C File Offset: 0x0030E22C
		private static void PlaceThing_Tiles_BlockPlacementForRepeatedPumpkins(ref bool canPlace, ref TileObject data)
		{
			if (data.type == 254)
			{
				for (int i = -1; i < 1; i++)
				{
					for (int j = 0; j < 2; j++)
					{
						if (!WorldGen.CanCutTile(Player.tileTargetX + j, Player.tileTargetY + i, TileCuttingContext.TilePlacement))
						{
							canPlace = false;
						}
					}
				}
			}
		}

		// Token: 0x06000883 RID: 2179 RVA: 0x00310078 File Offset: 0x0030E278
		private static void PlaceThing_Tiles_BlockPlacementForRepeatedCoralAndBeachPiles(ref bool canPlace, ref TileObject data)
		{
			if (data.type == 81 || data.type == 324)
			{
				Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
				if (tile.active() && (Main.tileCut[(int)tile.type] || TileID.Sets.BreakableWhenPlacing[(int)tile.type] || (tile.type >= 373 && tile.type <= 375) || tile.type == 461))
				{
					canPlace = false;
				}
			}
		}

		// Token: 0x06000884 RID: 2180 RVA: 0x00310100 File Offset: 0x0030E300
		private static void PlaceThing_Tiles_BlockPlacementForRepeatedPigronatas(ref bool canPlace, ref TileObject data)
		{
			if (data.type == 454)
			{
				for (int i = -2; i < 2; i++)
				{
					Tile tile = Main.tile[Player.tileTargetX + i, Player.tileTargetY];
					if (tile.active() && tile.type == 454)
					{
						canPlace = false;
					}
				}
			}
		}

		// Token: 0x06000885 RID: 2181 RVA: 0x00310158 File Offset: 0x0030E358
		private static void PlaceThing_Tiles_BlockPlacementIfOverPlayers(ref bool canPlace, ref TileObject data)
		{
			int num = 0;
			int num2 = 0;
			int x = 0;
			int y = 0;
			int type = data.type;
			if (type <= 387)
			{
				if (type != 138)
				{
					if (type == 235)
					{
						num = 48;
						num2 = 16;
						x = data.xCoord * 16;
						y = data.yCoord * 16;
						goto IL_E4;
					}
					if (type != 387)
					{
						goto IL_E4;
					}
					num = 32;
					num2 = 16;
					x = data.xCoord * 16;
					y = data.yCoord * 16;
					goto IL_E4;
				}
			}
			else
			{
				if (type == 476)
				{
					num = 16;
					num2 = 16;
					x = data.xCoord * 16;
					y = data.yCoord * 16;
					goto IL_E4;
				}
				if (type == 484)
				{
					num = 32;
					num2 = 32;
					x = data.xCoord * 16;
					y = data.yCoord * 16;
					goto IL_E4;
				}
				if (type != 664)
				{
					goto IL_E4;
				}
			}
			num = 32;
			num2 = 32;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			IL_E4:
			if (num != 0 && num2 != 0)
			{
				Rectangle value = new Rectangle(x, y, num, num2);
				for (int i = 0; i < 255; i++)
				{
					Player player = Main.player[i];
					if (player.active && !player.dead && !player.ghost && player.Hitbox.Intersects(value))
					{
						canPlace = false;
						return;
					}
				}
			}
		}

		// Token: 0x06000886 RID: 2182 RVA: 0x003102AC File Offset: 0x0030E4AC
		private bool PlaceThing_Tiles_CheckLavaBlocking()
		{
			bool result = false;
			if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
			{
				if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
				{
					result = true;
				}
				else if (!TileObjectData.CheckLiquidPlacement(this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle, Main.tile[Player.tileTargetX, Player.tileTargetY]))
				{
					result = true;
				}
			}
			return result;
		}

		// Token: 0x06000887 RID: 2183 RVA: 0x00310354 File Offset: 0x0030E554
		private bool PlaceThing_Tiles_CheckRopeUsability(bool canUse)
		{
			if (Main.tileRope[this.inventory[this.selectedItem].createTile] && canUse && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tileRope[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
			{
				int num = Player.tileTargetY;
				int num2 = Player.tileTargetX;
				bool flag = this.inventory[this.selectedItem].createTile == 214;
				while (Main.tile[num2, num].active() && (Main.tileRope[(int)Main.tile[num2, num].type] || Main.tile[num2, num].type == 314 || TileID.Sets.Platforms[(int)Main.tile[num2, num].type]) && num < Main.maxTilesY - 5 && Main.tile[num2, num + 2] != null && (flag || !Main.tile[num2, num + 1].lava()))
				{
					num++;
					if (Main.tile[num2, num] == null)
					{
						canUse = false;
						num = Player.tileTargetY;
						break;
					}
				}
				if (!Main.tile[num2, num].active())
				{
					Player.tileTargetY = num;
				}
			}
			return canUse;
		}

		// Token: 0x06000888 RID: 2184 RVA: 0x003104C0 File Offset: 0x0030E6C0
		private bool PlaceThing_Tiles_CheckFlexibleWand(bool canUse)
		{
			FlexibleTileWand flexibleTileWand = this.inventory[this.selectedItem].GetFlexibleTileWand();
			if (flexibleTileWand == null)
			{
				return canUse;
			}
			FlexibleTileWand.PlacementOption placementOption;
			Item item;
			return flexibleTileWand.TryGetPlacementOption(this, Player.FlexibleWandRandomSeed, Player.FlexibleWandCycleOffset, out placementOption, out item);
		}

		// Token: 0x06000889 RID: 2185 RVA: 0x003104FC File Offset: 0x0030E6FC
		private bool PlaceThing_Tiles_CheckWandUsability(bool canUse)
		{
			if (this.inventory[this.selectedItem].tileWand > 0)
			{
				int tileWand = this.inventory[this.selectedItem].tileWand;
				canUse = false;
				for (int i = 0; i < 58; i++)
				{
					if (tileWand == this.inventory[i].type && this.inventory[i].stack > 0)
					{
						canUse = true;
						break;
					}
				}
			}
			return canUse;
		}

		// Token: 0x0600088A RID: 2186 RVA: 0x00310567 File Offset: 0x0030E767
		private bool PlaceThing_Tiles_CheckGamepadTorchUsability(bool canUse)
		{
			if (PlayerInput.UsingGamepad && this.inventory[this.selectedItem].createTile == 4 && Main.SmartCursorIsUsed && !Main.SmartCursorShowing)
			{
				canUse = false;
			}
			return canUse;
		}

		// Token: 0x0600088B RID: 2187 RVA: 0x00310598 File Offset: 0x0030E798
		private void PlaceThing_LockChest()
		{
			Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
			Item item = this.inventory[this.selectedItem];
			if (!tile.active())
			{
				return;
			}
			if (item.type == 5328 && TileID.Sets.IsAContainer[(int)tile.type])
			{
				if (this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost - (float)this.blockRange > (float)Player.tileTargetX || (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f + (float)this.blockRange < (float)Player.tileTargetX || this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost - (float)this.blockRange > (float)Player.tileTargetY || (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f + (float)this.blockRange < (float)Player.tileTargetY)
				{
					return;
				}
				if (!this.ItemTimeIsZero || this.itemAnimation <= 0 || !this.controlUseItem)
				{
					return;
				}
				Tile tileSafely = Framing.GetTileSafely(Player.tileTargetX, Player.tileTargetY);
				int type = (int)tileSafely.type;
				int num = (int)(tileSafely.frameX / 36);
				if (type == 21)
				{
					if (num <= 3)
					{
						if (num != 1 && num != 3)
						{
							return;
						}
					}
					else if (num - 18 > 4)
					{
						switch (num)
						{
						case 35:
						case 37:
						case 39:
							break;
						default:
							return;
						}
					}
				}
				else if (type == 467 && num != 12)
				{
					return;
				}
				if (this.inventory[this.selectedItem].stack > 0)
				{
					int i;
					for (i = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18); i > 1; i -= 2)
					{
					}
					i = Player.tileTargetX - i;
					int num2 = Player.tileTargetY - (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
					if (Chest.Lock(i, num2))
					{
						this.inventory[this.selectedItem].stack--;
						if (this.inventory[this.selectedItem].stack <= 0)
						{
							this.inventory[this.selectedItem] = new Item();
						}
						if (Main.netMode == 1)
						{
							NetMessage.SendData(52, -1, -1, null, this.whoAmI, 3f, (float)i, (float)num2, 0, 0, 0);
						}
					}
				}
			}
		}

		// Token: 0x0600088C RID: 2188 RVA: 0x00310840 File Offset: 0x0030EA40
		private void PlaceThing_ItemInExtractinator(ref Player.ItemCheckContext context)
		{
			Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
			Item item = this.inventory[this.selectedItem];
			if (!tile.active())
			{
				return;
			}
			if (this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost - (float)this.blockRange > (float)Player.tileTargetX || (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f + (float)this.blockRange < (float)Player.tileTargetX || this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost - (float)this.blockRange > (float)Player.tileTargetY || (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f + (float)this.blockRange < (float)Player.tileTargetY)
			{
				return;
			}
			if (!this.ItemTimeIsZero || this.itemAnimation <= 0 || !this.controlUseItem)
			{
				return;
			}
			float num = 1f;
			if (tile.type == 642)
			{
				num *= 0.33f;
			}
			ItemTrader itemTrader = Player.TryGettingItemTraderFromBlock(tile);
			ItemTrader.TradeOption tradeOption;
			if (itemTrader != null && itemTrader.TryGetTradeOption(item, out tradeOption))
			{
				SoundEngine.PlaySound(7, -1, -1, 1, 1f, 0f);
				this.ApplyItemTime(item, num);
				context.SkipItemConsumption = true;
				item.stack -= tradeOption.TakingItemStack;
				if (item.stack <= 0)
				{
					item.TurnToAir(false);
				}
				this.DropItemFromExtractinator(tradeOption.GivingITemType, tradeOption.GivingItemStack);
				return;
			}
			if (ItemID.Sets.ExtractinatorMode[item.type] >= 0 && (tile.type == 219 || tile.type == 642))
			{
				this.ApplyItemTime(item, num);
				SoundEngine.PlaySound(7, -1, -1, 1, 1f, 0f);
				int extractType = ItemID.Sets.ExtractinatorMode[item.type];
				this.ExtractinatorUse(extractType, (int)tile.type);
			}
		}

		// Token: 0x0600088D RID: 2189 RVA: 0x00310A6C File Offset: 0x0030EC6C
		private static ItemTrader TryGettingItemTraderFromBlock(Tile targetBlock)
		{
			ItemTrader result = null;
			if (targetBlock.type == 642)
			{
				result = ItemTrader.ChlorophyteExtractinator;
			}
			return result;
		}

		// Token: 0x0600088E RID: 2190 RVA: 0x00310A90 File Offset: 0x0030EC90
		private void PlaceThing_XMasTreeTops()
		{
			if (this.inventory[this.selectedItem].type >= 1874 && this.inventory[this.selectedItem].type <= 1905 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 171 && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY && this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
			{
				int num = this.inventory[this.selectedItem].type;
				if (num >= 1874 && num <= 1877)
				{
					num -= 1873;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 0) != num)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem]);
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 0);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 0, num);
						int num2 = Player.tileTargetX;
						int num3 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num2 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num3 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num2, num3, TileChangeType.None);
						return;
					}
				}
				else if (num >= 1878 && num <= 1883)
				{
					num -= 1877;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 1) != num)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem]);
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 1);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 1, num);
						int num4 = Player.tileTargetX;
						int num5 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num4 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num5 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num4, num5, TileChangeType.None);
						return;
					}
				}
				else if (num >= 1884 && num <= 1894)
				{
					num -= 1883;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 2) != num)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem]);
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 2);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 2, num);
						int num6 = Player.tileTargetX;
						int num7 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num6 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num7 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num6, num7, TileChangeType.None);
						return;
					}
				}
				else if (num >= 1895 && num <= 1905)
				{
					num -= 1894;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 3) != num)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem]);
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 3);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 3, num);
						int num8 = Player.tileTargetX;
						int num9 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num8 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num9 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num8, num9, TileChangeType.None);
					}
				}
			}
		}

		// Token: 0x0600088F RID: 2191 RVA: 0x00310FC4 File Offset: 0x0030F1C4
		private void PlaceThing_CannonBall()
		{
			if ((this.inventory[this.selectedItem].type == 929 || this.inventory[this.selectedItem].type == 1338 || this.inventory[this.selectedItem].type == 1345) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 209)
				{
					this.ShootFromCannon(num, num2);
				}
			}
		}

		// Token: 0x06000890 RID: 2192 RVA: 0x00311174 File Offset: 0x0030F374
		private void PlaceThing_PaintScrapper()
		{
			if (!ItemID.Sets.IsPaintScraper[this.inventory[this.selectedItem].type])
			{
				return;
			}
			if (this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				if (Main.tile[num, num2] == null)
				{
					return;
				}
				this.PlaceThing_PaintScrapper_TryScrapping(num, num2);
				this.PlaceThing_PaintScrapper_LongMoss(num, num2);
			}
		}

		// Token: 0x06000891 RID: 2193 RVA: 0x003112DC File Offset: 0x0030F4DC
		private void PlaceThing_PaintScrapper_LongMoss(int x, int y)
		{
			if (Main.tile[x, y].type != 184)
			{
				return;
			}
			this.cursorItemIconEnabled = true;
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
			{
				ushort type = Main.tile[x, y].type;
				int frameX = (int)Main.tile[x, y].frameX;
				WorldGen.KillTile(x, y, false, false, false);
				if (!Main.tile[x, y].active())
				{
					this.ApplyItemTime(this.inventory[this.selectedItem]);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
					}
					if (Main.rand.Next(9) == 0)
					{
						int type2 = 4349 + frameX / 22;
						switch (frameX / 22)
						{
						case 6:
							type2 = 4377;
							break;
						case 7:
							type2 = 4378;
							break;
						case 8:
							type2 = 4389;
							break;
						case 9:
							type2 = 5127;
							break;
						case 10:
							type2 = 5128;
							break;
						}
						int number = Item.NewItem(new EntitySource_ItemUse(this, this.HeldItem), x * 16, y * 16, 16, 16, type2, 1, false, 0, false, false);
						NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x06000892 RID: 2194 RVA: 0x00311448 File Offset: 0x0030F648
		private void PlaceThing_PaintScrapper_TryScrapping(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!(false | (tile.wall > 0 && (tile.wallColor() > 0 || tile.invisibleWall() || tile.fullbrightWall())) | (tile.active() && (tile.color() > 0 || tile.invisibleBlock() || tile.fullbrightBlock()))))
			{
				return;
			}
			this.cursorItemIconEnabled = true;
			if (!this.ItemTimeIsZero || this.itemAnimation <= 0 || !this.controlUseItem)
			{
				return;
			}
			if (WorldGen.paintTile(x, y, 0, true) || WorldGen.paintCoatTile(x, y, 0, true))
			{
				this.ApplyItemTime(this.inventory[this.selectedItem], this.tileSpeed);
				return;
			}
			if (WorldGen.paintWall(x, y, 0, true) || WorldGen.paintCoatWall(x, y, 0, true))
			{
				this.ApplyItemTime(this.inventory[this.selectedItem], this.wallSpeed);
				return;
			}
		}

		// Token: 0x06000893 RID: 2195 RVA: 0x00311538 File Offset: 0x0030F738
		private void PlaceThing_PaintRoller()
		{
			if ((this.inventory[this.selectedItem].type == 1072 || this.inventory[this.selectedItem].type == 1544) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				if (Main.tile[num, num2] != null && Main.tile[num, num2].wall > 0)
				{
					this.cursorItemIconEnabled = true;
					if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
					{
						this.TryPainting(num, num2, true, true);
					}
				}
			}
		}

		// Token: 0x06000894 RID: 2196 RVA: 0x003116E8 File Offset: 0x0030F8E8
		private void PlaceThing_Paintbrush()
		{
			if ((this.inventory[this.selectedItem].type == 1071 || this.inventory[this.selectedItem].type == 1543) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				if (Main.tile[num, num2] != null && Main.tile[num, num2].active())
				{
					this.cursorItemIconEnabled = true;
					if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
					{
						this.TryPainting(num, num2, false, true);
					}
				}
			}
		}

		// Token: 0x06000895 RID: 2197 RVA: 0x00311898 File Offset: 0x0030FA98
		public Item FindPaintOrCoating()
		{
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].PaintOrCoating)
				{
					return this.inventory[i];
				}
			}
			for (int j = 0; j < 58; j++)
			{
				if (this.inventory[j].stack > 0 && this.inventory[j].PaintOrCoating)
				{
					return this.inventory[j];
				}
			}
			return null;
		}

		// Token: 0x06000896 RID: 2198 RVA: 0x00311914 File Offset: 0x0030FB14
		private void TryPainting(int x, int y, bool paintingAWall = false, bool applyItemAnimation = true)
		{
			Item item = this.FindPaintOrCoating();
			if (item == null)
			{
				return;
			}
			if (item.paintCoating != 0)
			{
				this.ApplyCoating(x, y, paintingAWall, applyItemAnimation, item);
			}
			if (item.paint != 0)
			{
				this.ApplyPaint(x, y, paintingAWall, applyItemAnimation, item);
			}
		}

		// Token: 0x06000897 RID: 2199 RVA: 0x00311954 File Offset: 0x0030FB54
		private void ApplyCoating(int x, int y, bool paintingAWall, bool applyItemAnimation, Item targetItem)
		{
			byte paintCoating = targetItem.paintCoating;
			if (paintingAWall)
			{
				if (WorldGen.paintCoatWall(x, y, paintCoating, true))
				{
					targetItem.stack--;
					if (targetItem.stack <= 0)
					{
						targetItem.SetDefaults(0);
					}
					if (applyItemAnimation)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem], this.wallSpeed);
						return;
					}
				}
			}
			else if (WorldGen.paintCoatTile(x, y, paintCoating, true))
			{
				targetItem.stack--;
				if (targetItem.stack <= 0)
				{
					targetItem.SetDefaults(0);
				}
				if (applyItemAnimation)
				{
					this.ApplyItemTime(this.inventory[this.selectedItem], this.tileSpeed);
				}
			}
		}

		// Token: 0x06000898 RID: 2200 RVA: 0x00311A04 File Offset: 0x0030FC04
		private void ApplyPaint(int x, int y, bool paintingAWall, bool applyItemAnimation, Item targetItem)
		{
			byte paint = targetItem.paint;
			if (paintingAWall)
			{
				if (Main.tile[x, y].wallColor() != paint && WorldGen.paintWall(x, y, paint, true))
				{
					targetItem.stack--;
					if (targetItem.stack <= 0)
					{
						targetItem.SetDefaults(0);
					}
					if (applyItemAnimation)
					{
						this.ApplyItemTime(this.inventory[this.selectedItem], this.wallSpeed);
						return;
					}
				}
			}
			else if (Main.tile[x, y].color() != paint && WorldGen.paintTile(x, y, paint, true))
			{
				targetItem.stack--;
				if (targetItem.stack <= 0)
				{
					targetItem.SetDefaults(0);
				}
				if (applyItemAnimation)
				{
					this.ApplyItemTime(this.inventory[this.selectedItem], this.tileSpeed);
				}
			}
		}

		// Token: 0x06000899 RID: 2201 RVA: 0x00311AE0 File Offset: 0x0030FCE0
		private void ShootFromCannon(int x, int y)
		{
			int num = 0;
			int num2 = (int)(Main.tile[x, y].frameX / 72);
			int type = this.inventory[this.selectedItem].type;
			if (num2 == 0 && type == 929)
			{
				num = 1;
			}
			else if (num2 == 1 && type == 1338)
			{
				num = 2;
			}
			else if (num2 == 2 && type == 1345)
			{
				num = 3;
			}
			if (num > 0 && (num != 2 || WorldGen.BunnyCannonCanFire()))
			{
				this.cursorItemIconEnabled = true;
				if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
				{
					int i = (int)(Main.tile[x, y].frameX / 18);
					int num3 = 0;
					int num4 = 0;
					while (i >= 4)
					{
						num3++;
						i -= 4;
					}
					i = x - i;
					int j;
					for (j = (int)(Main.tile[x, y].frameY / 18); j >= 3; j -= 3)
					{
						num4++;
					}
					j = y - j;
					this.ApplyItemTime(this.inventory[this.selectedItem]);
					WorldGen.ShootFromCannon(i, j, num4, num, this.inventory[this.selectedItem].damage, 8f, Main.myPlayer, false);
				}
			}
		}

		// Token: 0x0600089A RID: 2202 RVA: 0x00311C1C File Offset: 0x0030FE1C
		private void ExtractinatorUse(int extractType, int extractinatorBlockType)
		{
			int num = 5000;
			int num2 = 25;
			int num3 = 50;
			int num4 = -1;
			int num5 = -1;
			int num6 = -1;
			int num7 = 1;
			switch (extractType)
			{
			case 1:
				num /= 3;
				num2 *= 2;
				num3 = 20;
				num4 = 10;
				break;
			case 2:
				num = -1;
				num2 = -1;
				num3 = -1;
				num4 = -1;
				num5 = 1;
				num7 = -1;
				break;
			case 3:
				num = -1;
				num2 = -1;
				num3 = -1;
				num4 = -1;
				num5 = -1;
				num7 = -1;
				num6 = 1;
				break;
			}
			int num8 = 1;
			int num9;
			if (num4 != -1 && Main.rand.Next(num4) == 0)
			{
				num9 = 3380;
				if (Main.rand.Next(5) == 0)
				{
					num8 += Main.rand.Next(2);
				}
				if (Main.rand.Next(10) == 0)
				{
					num8 += Main.rand.Next(3);
				}
				if (Main.rand.Next(15) == 0)
				{
					num8 += Main.rand.Next(4);
				}
			}
			else if (num7 != -1 && Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(12000) == 0)
				{
					num9 = 74;
					if (Main.rand.Next(14) == 0)
					{
						num8 += Main.rand.Next(0, 2);
					}
					if (Main.rand.Next(14) == 0)
					{
						num8 += Main.rand.Next(0, 2);
					}
					if (Main.rand.Next(14) == 0)
					{
						num8 += Main.rand.Next(0, 2);
					}
				}
				else if (Main.rand.Next(800) == 0)
				{
					num9 = 73;
					if (Main.rand.Next(6) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num8 += Main.rand.Next(1, 20);
					}
				}
				else if (Main.rand.Next(60) == 0)
				{
					num9 = 72;
					if (Main.rand.Next(4) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num8 += Main.rand.Next(5, 25);
					}
				}
				else
				{
					num9 = 71;
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(10, 25);
					}
				}
			}
			else if (num != -1 && Main.rand.Next(num) == 0)
			{
				num9 = 1242;
			}
			else if (num5 != -1)
			{
				if (Main.rand.Next(4) != 1)
				{
					num9 = 2674;
				}
				else if (Main.rand.Next(3) != 1)
				{
					num9 = 2006;
				}
				else if (Main.rand.Next(3) != 1)
				{
					num9 = 2002;
				}
				else
				{
					num9 = 2675;
				}
			}
			else if (num6 != -1 && extractinatorBlockType == 642)
			{
				if (Main.rand.Next(10) == 1)
				{
					num9 = Main.rand.Next(5);
					if (num9 == 0)
					{
						num9 = 4354;
					}
					else if (num9 == 1)
					{
						num9 = 4389;
					}
					else if (num9 == 2)
					{
						num9 = 4377;
					}
					else if (num9 == 3)
					{
						num9 = 5127;
					}
					else
					{
						num9 = 4378;
					}
				}
				else
				{
					num9 = Main.rand.Next(5);
					if (num9 == 0)
					{
						num9 = 4349;
					}
					else if (num9 == 1)
					{
						num9 = 4350;
					}
					else if (num9 == 2)
					{
						num9 = 4351;
					}
					else if (num9 == 3)
					{
						num9 = 4352;
					}
					else
					{
						num9 = 4353;
					}
				}
			}
			else if (num6 != -1)
			{
				num9 = Main.rand.Next(5);
				if (num9 == 0)
				{
					num9 = 4349;
				}
				else if (num9 == 1)
				{
					num9 = 4350;
				}
				else if (num9 == 2)
				{
					num9 = 4351;
				}
				else if (num9 == 3)
				{
					num9 = 4352;
				}
				else
				{
					num9 = 4353;
				}
			}
			else if (num2 != -1 && Main.rand.Next(num2) == 0)
			{
				num9 = Main.rand.Next(6);
				if (num9 == 0)
				{
					num9 = 181;
				}
				else if (num9 == 1)
				{
					num9 = 180;
				}
				else if (num9 == 2)
				{
					num9 = 177;
				}
				else if (num9 == 3)
				{
					num9 = 179;
				}
				else if (num9 == 4)
				{
					num9 = 178;
				}
				else
				{
					num9 = 182;
				}
				if (Main.rand.Next(20) == 0)
				{
					num8 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num8 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num8 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num8 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num8 += Main.rand.Next(0, 6);
				}
			}
			else if (num3 != -1 && Main.rand.Next(num3) == 0)
			{
				num9 = 999;
				if (Main.rand.Next(20) == 0)
				{
					num8 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num8 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num8 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num8 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num8 += Main.rand.Next(0, 6);
				}
			}
			else if (Main.rand.Next(3) == 0)
			{
				if (Main.rand.Next(5000) == 0)
				{
					num9 = 74;
					if (Main.rand.Next(10) == 0)
					{
						num8 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num8 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num8 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num8 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num8 += Main.rand.Next(0, 3);
					}
				}
				else if (Main.rand.Next(400) == 0)
				{
					num9 = 73;
					if (Main.rand.Next(5) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 += Main.rand.Next(1, 20);
					}
				}
				else if (Main.rand.Next(30) == 0)
				{
					num9 = 72;
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num8 += Main.rand.Next(5, 25);
					}
				}
				else
				{
					num9 = 71;
					if (Main.rand.Next(2) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num8 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num8 += Main.rand.Next(10, 25);
					}
				}
			}
			else if (extractinatorBlockType == 642)
			{
				num9 = Main.rand.Next(14);
				if (num9 == 0)
				{
					num9 = 12;
				}
				else if (num9 == 1)
				{
					num9 = 11;
				}
				else if (num9 == 2)
				{
					num9 = 14;
				}
				else if (num9 == 3)
				{
					num9 = 13;
				}
				else if (num9 == 4)
				{
					num9 = 699;
				}
				else if (num9 == 5)
				{
					num9 = 700;
				}
				else if (num9 == 6)
				{
					num9 = 701;
				}
				else if (num9 == 7)
				{
					num9 = 702;
				}
				else if (num9 == 8)
				{
					num9 = 364;
				}
				else if (num9 == 9)
				{
					num9 = 1104;
				}
				else if (num9 == 10)
				{
					num9 = 365;
				}
				else if (num9 == 11)
				{
					num9 = 1105;
				}
				else if (num9 == 12)
				{
					num9 = 366;
				}
				else
				{
					num9 = 1106;
				}
				if (Main.rand.Next(20) == 0)
				{
					num8 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num8 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num8 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num8 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num8 += Main.rand.Next(0, 6);
				}
			}
			else
			{
				num9 = Main.rand.Next(8);
				if (num9 == 0)
				{
					num9 = 12;
				}
				else if (num9 == 1)
				{
					num9 = 11;
				}
				else if (num9 == 2)
				{
					num9 = 14;
				}
				else if (num9 == 3)
				{
					num9 = 13;
				}
				else if (num9 == 4)
				{
					num9 = 699;
				}
				else if (num9 == 5)
				{
					num9 = 700;
				}
				else if (num9 == 6)
				{
					num9 = 701;
				}
				else
				{
					num9 = 702;
				}
				if (Main.rand.Next(20) == 0)
				{
					num8 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num8 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num8 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num8 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num8 += Main.rand.Next(0, 6);
				}
			}
			if (num9 > 0)
			{
				this.DropItemFromExtractinator(num9, num8);
			}
		}

		// Token: 0x0600089B RID: 2203 RVA: 0x00312840 File Offset: 0x00310A40
		private void DropItemFromExtractinator(int itemType, int stack)
		{
			Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
			if (Main.SmartCursorIsUsed || PlayerInput.UsingGamepad)
			{
				vector = base.Center;
			}
			int number = Item.NewItem(this.GetItemSource_TileInteraction(Player.tileTargetX, Player.tileTargetY), (int)vector.X, (int)vector.Y, 1, 1, itemType, stack, false, -1, false, false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x0600089C RID: 2204 RVA: 0x003128D0 File Offset: 0x00310AD0
		public void ChangeDir(int dir)
		{
			if (!this.pulley || this.pulleyDir != 2)
			{
				this.direction = dir;
				return;
			}
			if (this.pulleyDir == 2 && dir == this.direction)
			{
				return;
			}
			int num = (int)(this.position.X + (float)(this.width / 2)) / 16 * 16 + 8 - this.width / 2;
			if (!Collision.SolidCollision(new Vector2((float)num, this.position.Y), this.width, this.height))
			{
				if (this.whoAmI == Main.myPlayer)
				{
					Main.cameraX = Main.cameraX + this.position.X - (float)num;
				}
				this.pulleyDir = 1;
				this.position.X = (float)num;
				this.direction = dir;
			}
		}

		// Token: 0x0600089D RID: 2205 RVA: 0x0000EF06 File Offset: 0x0000D106
		public Rectangle getRect()
		{
			return new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
		}

		// Token: 0x0600089E RID: 2206 RVA: 0x00312998 File Offset: 0x00310B98
		public void HorsemansBlade_SpawnPumpkin(int npcIndex, int dmg, float kb)
		{
			Vector2 center = Main.npc[npcIndex].Center;
			int logicCheckScreenHeight = Main.LogicCheckScreenHeight;
			int logicCheckScreenWidth = Main.LogicCheckScreenWidth;
			int num = Main.rand.Next(100, 300);
			int num2 = Main.rand.Next(100, 300);
			if (Main.rand.Next(2) == 0)
			{
				num -= logicCheckScreenWidth / 2 + num;
			}
			else
			{
				num += logicCheckScreenWidth / 2 - num;
			}
			if (Main.rand.Next(2) == 0)
			{
				num2 -= logicCheckScreenHeight / 2 + num2;
			}
			else
			{
				num2 += logicCheckScreenHeight / 2 - num2;
			}
			num += (int)this.position.X;
			num2 += (int)this.position.Y;
			float num3 = 8f;
			Vector2 vector = new Vector2((float)num, (float)num2);
			float num4 = center.X - vector.X;
			float num5 = center.Y - vector.Y;
			float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
			num6 = num3 / num6;
			num4 *= num6;
			num5 *= num6;
			Projectile.NewProjectile(this.GetProjectileSource_Item(this.HeldItem), (float)num, (float)num2, num4, num5, 321, dmg, kb, this.whoAmI, (float)npcIndex, 0f, 0f);
		}

		// Token: 0x0600089F RID: 2207 RVA: 0x00312AD4 File Offset: 0x00310CD4
		public void PutItemInInventoryFromItemUsage(int type, int theSelectedItem = -1)
		{
			for (int i = 0; i < 58; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && item.type == type && item.stack < item.maxStack)
				{
					item.stack++;
					return;
				}
			}
			if (theSelectedItem >= 0 && (this.inventory[theSelectedItem].type == 0 || this.inventory[theSelectedItem].stack <= 0))
			{
				this.inventory[theSelectedItem].SetDefaults(type);
				return;
			}
			Item item2 = new Item();
			item2.SetDefaults(type);
			if (this.GetItem(this.whoAmI, item2, GetItemSettings.ItemCreatedFromItemUsage).stack > 0)
			{
				Item item3 = item2;
				if (theSelectedItem != -1)
				{
					item3 = this.inventory[theSelectedItem];
				}
				int number = Item.NewItem(new EntitySource_ItemUse(this, item3), (int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				item2.position.X = base.Center.X - (float)(item2.width / 2);
				item2.position.Y = base.Center.Y - (float)(item2.height / 2);
				item2.active = true;
				PopupText.NewText(PopupTextContext.RegularItemPickup, item2, 0, false, false);
			}
		}

		// Token: 0x060008A0 RID: 2208 RVA: 0x00312C40 File Offset: 0x00310E40
		public bool SummonItemCheck(Item item)
		{
			int type = item.type;
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.active && ((type == 43 && npc.type == 4) || (type == 70 && npc.type == 13) || ((type == 560 & npc.type == 50) || (type == 544 && npc.type == 125)) || (type == 544 && npc.type == 126) || (type == 556 && npc.type == 134) || (type == 557 && npc.type == 127) || (type == 1133 && npc.type == 222) || (type == 1331 && npc.type == 266) || (type == 4988 && npc.type == 657) || (type == 5120 && npc.type == 668)))
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060008A1 RID: 2209 RVA: 0x00312D60 File Offset: 0x00310F60
		public PlayerFishingConditions GetFishingConditions()
		{
			PlayerFishingConditions playerFishingConditions = default(PlayerFishingConditions);
			this.Fishing_GetBestFishingPole(out playerFishingConditions.PolePower, out playerFishingConditions.PoleItemType);
			this.Fishing_GetBait(out playerFishingConditions.BaitPower, out playerFishingConditions.BaitItemType);
			if (playerFishingConditions.BaitItemType == 2673)
			{
				return playerFishingConditions;
			}
			if (playerFishingConditions.BaitPower == 0 || playerFishingConditions.PolePower == 0)
			{
				return playerFishingConditions;
			}
			int num = 0;
			if (this.FindBuffIndex(25) != -1)
			{
				num += 5;
			}
			if (this.canFloatInWater && this.wet)
			{
				num += 5;
			}
			Tile tile;
			if (this.sitting.TryGetSittingBlock(this, out tile) && ((tile.type == 15 && tile.frameY / 40 == 1) || tile.type == 497))
			{
				num += 5;
			}
			int num2 = playerFishingConditions.BaitPower + playerFishingConditions.PolePower + this.fishingSkill + num;
			playerFishingConditions.LevelMultipliers = Player.Fishing_GetPowerMultiplier();
			playerFishingConditions.FinalFishingLevel = (int)((float)num2 * playerFishingConditions.LevelMultipliers);
			return playerFishingConditions;
		}

		// Token: 0x060008A2 RID: 2210 RVA: 0x00312E50 File Offset: 0x00311050
		private static float Fishing_GetPowerMultiplier()
		{
			float num = 1f;
			if (Main.raining)
			{
				num *= 1.2f;
			}
			if (Main.cloudBGAlpha > 0f)
			{
				num *= 1.1f;
			}
			if (Main.dayTime && (Main.time < 5400.0 || Main.time > 48600.0))
			{
				num *= 1.3f;
			}
			if (Main.dayTime && Main.time > 16200.0 && Main.time < 37800.0)
			{
				num *= 0.8f;
			}
			if (!Main.dayTime && Main.time > 6480.0 && Main.time < 25920.0)
			{
				num *= 0.8f;
			}
			if (Main.moonPhase == 0)
			{
				num *= 1.1f;
			}
			if (Main.moonPhase == 1 || Main.moonPhase == 7)
			{
				num *= 1.05f;
			}
			if (Main.moonPhase == 3 || Main.moonPhase == 5)
			{
				num *= 0.95f;
			}
			if (Main.moonPhase == 4)
			{
				num *= 0.9f;
			}
			if (Main.bloodMoon)
			{
				num *= 1.1f;
			}
			return num;
		}

		// Token: 0x060008A3 RID: 2211 RVA: 0x00312F74 File Offset: 0x00311174
		private void Fishing_GetBait(out int baitPower, out int baitType)
		{
			baitPower = 0;
			baitType = 0;
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].bait > 0)
				{
					baitPower = this.inventory[i].bait;
					baitType = this.inventory[i].type;
					break;
				}
			}
			if (baitPower == 0 && baitType == 0)
			{
				for (int j = 0; j < 50; j++)
				{
					if (this.inventory[j].stack > 0 && this.inventory[j].bait > 0)
					{
						baitPower = this.inventory[j].bait;
						baitType = this.inventory[j].type;
						return;
					}
				}
			}
		}

		// Token: 0x060008A4 RID: 2212 RVA: 0x0031302C File Offset: 0x0031122C
		private void Fishing_GetBestFishingPole(out int fishingPolePower, out int fishingPoleType)
		{
			fishingPolePower = this.inventory[this.selectedItem].fishingPole;
			fishingPoleType = this.inventory[this.selectedItem].type;
			if (fishingPolePower == 0)
			{
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].fishingPole > fishingPolePower)
					{
						fishingPolePower = this.inventory[i].fishingPole;
						fishingPoleType = this.inventory[i].type;
					}
				}
			}
		}

		// Token: 0x060008A5 RID: 2213 RVA: 0x003130A4 File Offset: 0x003112A4
		public bool HasUnityPotion()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].type == 2997 && this.inventory[i].stack > 0)
				{
					return true;
				}
			}
			if (this.useVoidBag())
			{
				for (int j = 0; j < 40; j++)
				{
					if (this.bank4.item[j].type == 2997 && this.bank4.item[j].stack > 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060008A6 RID: 2214 RVA: 0x0031312C File Offset: 0x0031132C
		public void TakeUnityPotion()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].type == 2997 && this.inventory[i].stack > 0)
				{
					this.inventory[i].stack--;
					if (this.inventory[i].stack <= 0)
					{
						this.inventory[i].SetDefaults(0);
					}
					return;
				}
			}
			if (this.useVoidBag())
			{
				for (int j = 0; j < 40; j++)
				{
					if (this.bank4.item[j].type == 2997 && this.bank4.item[j].stack > 0)
					{
						this.bank4.item[j].stack--;
						if (this.bank4.item[j].stack <= 0)
						{
							this.bank4.item[j].SetDefaults(0);
						}
						return;
					}
				}
			}
		}

		// Token: 0x060008A7 RID: 2215 RVA: 0x00313224 File Offset: 0x00311424
		public void UnityTeleport(Vector2 telePos)
		{
			int num = 3;
			if (Main.netMode == 0)
			{
				this.Teleport(telePos, num, 0);
				return;
			}
			NetMessage.SendData(65, -1, -1, null, 2, (float)this.whoAmI, telePos.X, telePos.Y, num, 0, 0);
		}

		// Token: 0x060008A8 RID: 2216 RVA: 0x00313268 File Offset: 0x00311468
		private void PayDD2CrystalsBeforeUse(Item item)
		{
			int requiredDD2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
			for (int i = 0; i < requiredDD2CrystalsToUse; i++)
			{
				this.ConsumeItem(3822, true, false);
			}
		}

		// Token: 0x060008A9 RID: 2217 RVA: 0x00313298 File Offset: 0x00311498
		private bool CheckDD2CrystalPaymentLock(Item item)
		{
			if (!DD2Event.Ongoing)
			{
				return true;
			}
			int requiredDD2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
			return this.CountItem(3822, requiredDD2CrystalsToUse) >= requiredDD2CrystalsToUse;
		}

		// Token: 0x060008AA RID: 2218 RVA: 0x003132C8 File Offset: 0x003114C8
		private int GetRequiredDD2CrystalsToUse(Item item)
		{
			switch (item.type)
			{
			case 3818:
			case 3819:
			case 3820:
				return 10;
			case 3824:
			case 3825:
			case 3826:
				return 10;
			case 3829:
			case 3830:
			case 3831:
				return 10;
			case 3832:
			case 3833:
			case 3834:
				return 10;
			}
			return 0;
		}

		// Token: 0x060008AB RID: 2219 RVA: 0x0031333C File Offset: 0x0031153C
		public void SporeSac(Item sourceItem)
		{
			int damage = 70;
			float knockBack = 1.5f;
			if (Main.rand.Next(15) == 0)
			{
				int num = 0;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && (Main.projectile[i].type == 567 || Main.projectile[i].type == 568))
					{
						num++;
					}
				}
				if (Main.rand.Next(15) >= num && num < 10)
				{
					int num2 = 50;
					int num3 = 24;
					int num4 = 90;
					for (int j = 0; j < num2; j++)
					{
						int num5 = Main.rand.Next(200 - j * 2, 400 + j * 2);
						Vector2 center = base.Center;
						center.X += (float)Main.rand.Next(-num5, num5 + 1);
						center.Y += (float)Main.rand.Next(-num5, num5 + 1);
						if (!Collision.SolidCollision(center, num3, num3) && !Collision.WetCollision(center, num3, num3))
						{
							center.X += (float)(num3 / 2);
							center.Y += (float)(num3 / 2);
							if (Collision.CanHit(new Vector2(base.Center.X, this.position.Y), 1, 1, center, 1, 1) || Collision.CanHit(new Vector2(base.Center.X, this.position.Y - 50f), 1, 1, center, 1, 1))
							{
								int num6 = (int)center.X / 16;
								int num7 = (int)center.Y / 16;
								bool flag = false;
								if (Main.rand.Next(3) == 0 && Main.tile[num6, num7] != null && Main.tile[num6, num7].wall > 0)
								{
									flag = true;
								}
								else
								{
									center.X -= (float)(num4 / 2);
									center.Y -= (float)(num4 / 2);
									if (Collision.SolidCollision(center, num4, num4))
									{
										center.X += (float)(num4 / 2);
										center.Y += (float)(num4 / 2);
										flag = true;
									}
									else if (Main.tile[num6, num7] != null && Main.tile[num6, num7].active() && Main.tile[num6, num7].type == 19)
									{
										flag = true;
									}
								}
								if (flag)
								{
									for (int k = 0; k < 1000; k++)
									{
										if (Main.projectile[k].active && Main.projectile[k].owner == this.whoAmI && Main.projectile[k].aiStyle == 105 && (center - Main.projectile[k].Center).Length() < 48f)
										{
											flag = false;
											break;
										}
									}
									if (flag && Main.myPlayer == this.whoAmI)
									{
										Projectile.NewProjectile(this.GetProjectileSource_Accessory(sourceItem), center.X, center.Y, 0f, 0f, 567 + Main.rand.Next(2), damage, knockBack, this.whoAmI, 0f, 0f, 0f);
										return;
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060008AC RID: 2220 RVA: 0x003136BC File Offset: 0x003118BC
		public void VolatileGelatin(Item sourceItem)
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			this.volatileGelatinCounter++;
			if (this.volatileGelatinCounter > 40)
			{
				this.volatileGelatinCounter = 0;
				int damage = 65;
				float knockBack = 7f;
				float num = 640f;
				NPC npc = null;
				for (int i = 0; i < 200; i++)
				{
					NPC npc2 = Main.npc[i];
					if (npc2 != null && npc2.active && npc2.CanBeChasedBy(this, false) && Collision.CanHit(this, npc2))
					{
						float num2 = Vector2.Distance(npc2.Center, base.Center);
						if (num2 < num)
						{
							num = num2;
							npc = npc2;
						}
					}
				}
				if (npc != null)
				{
					Vector2 vector = npc.Center - base.Center;
					vector = vector.SafeNormalize(Vector2.Zero) * 12f;
					vector.Y -= 1.3f;
					Projectile.NewProjectile(this.GetProjectileSource_Accessory(sourceItem), base.Center.X, base.Center.Y, vector.X, vector.Y, 937, damage, knockBack, this.whoAmI, 0f, 0f, 0f);
				}
			}
		}

		// Token: 0x060008AD RID: 2221 RVA: 0x003137F8 File Offset: 0x003119F8
		public bool CanHit(Entity ent)
		{
			return Collision.CanHit(this.position, this.width, this.height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), this.gravDir * (float)(-(float)this.height) / 3f), 0, 0, ent.Center + new Vector2(0f, (float)(-(float)ent.height / 3)), 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), this.gravDir * (float)(-(float)this.height) / 3f), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0);
		}

		// Token: 0x060008AE RID: 2222 RVA: 0x0031392C File Offset: 0x00311B2C
		public Rectangle GetItemDrawFrame(int type)
		{
			if (Main.dedServ)
			{
				return Rectangle.Empty;
			}
			Main.instance.LoadItem(type);
			if (ItemID.Sets.IsFood[type])
			{
				return TextureAssets.Item[type].Frame(1, 3, 0, 1, 0, 0);
			}
			if (Main.itemAnimations[type] != null)
			{
				return Main.itemAnimations[type].GetFrame(TextureAssets.Item[type].Value, -1);
			}
			return TextureAssets.Item[type].Frame(1, 1, 0, 0, 0, 0);
		}

		// Token: 0x060008AF RID: 2223 RVA: 0x003139A4 File Offset: 0x00311BA4
		public float GetAdjustedItemScale(Item item)
		{
			float scale = item.scale;
			if (item.melee)
			{
				this.ApplyMeleeScale(ref scale);
			}
			return scale;
		}

		// Token: 0x060008B0 RID: 2224 RVA: 0x003139C9 File Offset: 0x00311BC9
		public void ApplyMeleeScale(ref float scale)
		{
			if (this.meleeScaleGlove)
			{
				scale *= 1.1f;
			}
		}

		// Token: 0x060008B1 RID: 2225 RVA: 0x003139E0 File Offset: 0x00311BE0
		public Vector2 ApplyRangeCompensation(float rangeCompensation, Vector2 startPos, Vector2 targetPos)
		{
			Vector2 v = targetPos - startPos;
			Vector2 vector = v.SafeNormalize(Vector2.Zero);
			vector.Y -= 1f;
			float num = v.Length();
			num = (float)Math.Pow((double)(num / 700f), 2.0) * 700f;
			targetPos.Y += vector.Y * num * rangeCompensation * 1f;
			targetPos.X += -vector.X * num * rangeCompensation * 1f;
			return targetPos;
		}

		// Token: 0x060008B2 RID: 2226 RVA: 0x00313A70 File Offset: 0x00311C70
		public void ItemCheck()
		{
			if (this.CCed)
			{
				this.channel = false;
				this.itemAnimation = (this.itemAnimationMax = 0);
				return;
			}
			float heightOffsetHitboxCenter = this.HeightOffsetHitboxCenter;
			Item item = this.inventory[this.selectedItem];
			Player.ItemCheckContext itemCheckContext = default(Player.ItemCheckContext);
			bool flag = false;
			if (Main.myPlayer == this.whoAmI)
			{
				if (PlayerInput.ShouldFastUseItem)
				{
					this.controlUseItem = true;
					flag = true;
				}
				if (!this.cursorItemIconEnabled && item.stack > 0 && item.fishingPole > 0)
				{
					int num;
					int num2;
					this.Fishing_GetBait(out num, out num2);
					if (num2 > 0)
					{
						this.cursorItemIconEnabled = true;
						this.cursorItemIconID = num2;
						this.cursorItemIconPush = 6;
					}
				}
				if (!this.cursorItemIconEnabled && item.stack > 0 && (item.type == 779 || item.type == 5134))
				{
					for (int i = 54; i < 58; i++)
					{
						if (this.inventory[i].ammo == item.useAmmo && this.inventory[i].stack > 0)
						{
							this.cursorItemIconEnabled = true;
							this.cursorItemIconID = this.inventory[i].type;
							this.cursorItemIconPush = 10;
							break;
						}
					}
					if (!this.cursorItemIconEnabled)
					{
						for (int j = 0; j < 54; j++)
						{
							if (this.inventory[j].ammo == item.useAmmo && this.inventory[j].stack > 0)
							{
								this.cursorItemIconEnabled = true;
								this.cursorItemIconID = this.inventory[j].type;
								this.cursorItemIconPush = 10;
								break;
							}
						}
					}
				}
			}
			this.ItemCheck_HandleMount();
			int weaponDamage = this.GetWeaponDamage(item);
			this.ItemCheck_HandleMPItemAnimation(item);
			this.ItemCheck_HackHoldStyles(item);
			if (this.itemAnimation < 0)
			{
				this.itemAnimation = 0;
			}
			if (this.itemTime < 0)
			{
				this.itemTime = 0;
			}
			if (this.itemAnimation == 0 && this.reuseDelay > 0)
			{
				this.ApplyReuseDelay();
			}
			this.UpdatePlacementPreview(item);
			if (this.itemAnimation == 0 && this.altFunctionUse == 2)
			{
				this.altFunctionUse = 0;
			}
			bool flag2 = true;
			if (this.gravDir == -1f && GolfHelper.IsPlayerHoldingClub(this))
			{
				flag2 = false;
			}
			if (flag2 && this.controlUseItem && this.releaseUseItem && this.itemAnimation == 0 && item.useStyle != 0)
			{
				if (this.altFunctionUse == 1)
				{
					this.altFunctionUse = 2;
				}
				if (item.shoot == 0)
				{
					this.itemRotation = 0f;
				}
				bool flag3 = this.ItemCheck_CheckCanUse(item);
				if (item.potion && flag3)
				{
					this.ApplyPotionDelay(item);
				}
				if (item.mana > 0 && flag3 && this.whoAmI == Main.myPlayer && item.buffType != 0 && item.buffTime != 0)
				{
					this.AddBuff(item.buffType, item.buffTime, true, false);
				}
				if (item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || this.altFunctionUse != 2)
				{
					this.ItemCheck_ApplyPetBuffs(item);
				}
				if (this.whoAmI == Main.myPlayer && this.gravDir == 1f && item.mountType != -1 && this.mount.CanMount(item.mountType, this))
				{
					this.mount.SetMount(item.mountType, this, false);
				}
				if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || this.altFunctionUse != 2) && flag3 && this.whoAmI == Main.myPlayer && item.shoot >= 0 && item.shoot < (int)ProjectileID.Count && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot]))
				{
					this.FreeUpPetsAndMinions(item);
				}
				if (flag3)
				{
					this.ItemCheck_StartActualUse(item);
				}
			}
			bool flag4 = this.controlUseItem;
			if (this.mount.Active && this.mount.Type == 8)
			{
				flag4 = (this.controlUseItem || this.controlUseTile);
			}
			if (!flag4)
			{
				this.channel = false;
			}
			Item item2 = (this.itemAnimation > 0) ? this.lastVisualizedSelectedItem : item;
			Rectangle drawHitbox = Item.GetDrawHitbox(item2.type, this);
			this.compositeFrontArm.enabled = false;
			this.compositeBackArm.enabled = false;
			if (this.itemAnimation > 0)
			{
				if (item.mana > 0)
				{
					this.ItemCheck_ApplyManaRegenDelay(item);
				}
				if (Main.dedServ)
				{
					this.itemHeight = item.height;
					this.itemWidth = item.width;
				}
				else
				{
					this.itemHeight = drawHitbox.Height;
					this.itemWidth = drawHitbox.Width;
				}
				this.itemAnimation--;
				if (this.itemAnimation == 0 && this.whoAmI == Main.myPlayer)
				{
					PlayerInput.TryEndingFastUse();
				}
			}
			this.releaseUseItem = !this.controlUseItem;
			if (this.itemTime > 0)
			{
				this.itemTime--;
				if (this.ItemTimeIsZero && this.whoAmI == Main.myPlayer && !this.JustDroppedAnItem)
				{
					int type = item.type;
					if (type == 65 || type == 724 || type == 989 || type == 1226)
					{
						this.EmitMaxManaEffect();
					}
				}
			}
			if (this.itemAnimation > 0)
			{
				this.ItemCheck_ApplyUseStyle(heightOffsetHitboxCenter, item2, drawHitbox);
			}
			else
			{
				this.ItemCheck_ApplyHoldStyle(heightOffsetHitboxCenter, item2, drawHitbox);
			}
			if (!this.JustDroppedAnItem)
			{
				this.ItemCheck_EmitHeldItemLight(item);
				this.ItemCheck_EmitFoodParticles(item);
				this.ItemCheck_EmitDrinkParticles(item);
				if (this.whoAmI == Main.myPlayer)
				{
					this.ItemCheck_OwnerOnlyCode(ref itemCheckContext, item, weaponDamage, drawHitbox);
				}
				if (this.ItemTimeIsZero && this.itemAnimation > 0)
				{
					if (item.hairDye >= 0)
					{
						this.ApplyItemTime(item);
						if (this.whoAmI == Main.myPlayer)
						{
							this.hairDye = (byte)item.hairDye;
							NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					if (item.healLife > 0 || item.healMana > 0)
					{
						this.ApplyLifeAndOrMana(item);
						this.ApplyItemTime(item);
						if (Main.myPlayer == this.whoAmI && item.type == 126 && this.breath == 0)
						{
							AchievementsHelper.HandleSpecialEvent(this, 25);
						}
					}
					if (item.buffType > 0)
					{
						if (this.whoAmI == Main.myPlayer && item.buffType != 90 && item.buffType != 27)
						{
							this.AddBuff(item.buffType, item.buffTime, true, false);
						}
						this.ApplyItemTime(item);
					}
					if (item.type == 678)
					{
						if (Main.getGoodWorld)
						{
							this.ApplyItemTime(item);
							if (this.whoAmI == Main.myPlayer)
							{
								for (int k = 0; k < 3; k++)
								{
									int type2 = 0;
									int timeToAdd = 108000;
									switch (Main.rand.Next(18))
									{
									case 0:
										type2 = 16;
										break;
									case 1:
										type2 = 111;
										break;
									case 2:
										type2 = 114;
										break;
									case 3:
										type2 = 8;
										break;
									case 4:
										type2 = 105;
										break;
									case 5:
										type2 = 17;
										break;
									case 6:
										type2 = 116;
										break;
									case 7:
										type2 = 5;
										break;
									case 8:
										type2 = 113;
										break;
									case 9:
										type2 = 7;
										break;
									case 10:
										type2 = 6;
										break;
									case 11:
										type2 = 104;
										break;
									case 12:
										type2 = 115;
										break;
									case 13:
										type2 = 2;
										break;
									case 14:
										type2 = 9;
										break;
									case 15:
										type2 = 3;
										break;
									case 16:
										type2 = 117;
										break;
									case 17:
										type2 = 1;
										break;
									}
									this.AddBuff(type2, timeToAdd, true, false);
								}
							}
						}
						else
						{
							this.ApplyItemTime(item);
							if (this.whoAmI == Main.myPlayer)
							{
								this.AddBuff(20, 216000, true, false);
								this.AddBuff(22, 216000, true, false);
								this.AddBuff(23, 216000, true, false);
								this.AddBuff(24, 216000, true, false);
								this.AddBuff(30, 216000, true, false);
								this.AddBuff(31, 216000, true, false);
								this.AddBuff(32, 216000, true, false);
								this.AddBuff(33, 216000, true, false);
								this.AddBuff(35, 216000, true, false);
								this.AddBuff(36, 216000, true, false);
								this.AddBuff(68, 216000, true, false);
							}
						}
					}
				}
				if ((item.type == 50 || item.type == 3124 || item.type == 3199 || item.type == 5358) && this.itemAnimation > 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, default(Color), 1.1f);
					}
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == item.useTime / 2)
					{
						for (int l = 0; l < 70; l++)
						{
							Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.5f);
						}
						this.RemoveAllGrapplingHooks();
						this.Spawn(PlayerSpawnContext.RecallFromItem);
						for (int m = 0; m < 70; m++)
						{
							Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, default(Color), 1.5f);
						}
					}
				}
				if ((item.type == 4263 || item.type == 5360) && this.itemAnimation > 0)
				{
					Vector2 value = Vector2.UnitY.RotatedBy((double)((float)this.itemAnimation * 6.2831855f / 30f), default(Vector2)) * new Vector2(15f, 0f);
					for (int n = 0; n < 2; n++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust = Dust.NewDustPerfect(base.Bottom + value, Dust.dustWater(), null, 0, default(Color), 1f);
							dust.velocity.Y = dust.velocity.Y * 0f;
							dust.velocity.Y = dust.velocity.Y - 4.5f;
							dust.velocity.X = dust.velocity.X * 1.5f;
							dust.scale = 0.8f;
							dust.alpha = 130;
							dust.noGravity = true;
							dust.fadeIn = 1.1f;
						}
					}
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == item.useTime / 2)
					{
						if (Main.netMode == 0)
						{
							this.MagicConch();
						}
						else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
						{
							NetMessage.SendData(73, -1, -1, null, 1, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if ((item.type == 4819 || item.type == 5361) && this.itemAnimation > 0)
				{
					Vector2 value2 = Vector2.UnitY.RotatedBy((double)((float)this.itemAnimation * 6.2831855f / 30f), default(Vector2)) * new Vector2(15f, 0f);
					for (int num3 = 0; num3 < 2; num3++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustPerfect(base.Bottom + value2, 35, null, 0, default(Color), 1f);
							dust2.velocity.Y = dust2.velocity.Y * 0f;
							dust2.velocity.Y = dust2.velocity.Y - 4.5f;
							dust2.velocity.X = dust2.velocity.X * 1.5f;
							dust2.scale = 0.8f;
							dust2.alpha = 130;
							dust2.noGravity = true;
							dust2.fadeIn = 1.1f;
						}
					}
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == item.useTime / 2)
					{
						if (Main.netMode == 0)
						{
							this.DemonConch();
						}
						else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
						{
							NetMessage.SendData(73, -1, -1, null, 2, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (item.type == 5359 && this.itemAnimation > 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num4 = Main.rand.Next(4);
						Color color = Color.Green;
						switch (num4)
						{
						case 0:
						case 1:
							color = new Color(100, 255, 100);
							break;
						case 2:
							color = Color.Yellow;
							break;
						case 3:
							color = Color.White;
							break;
						}
						Dust dust3 = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(base.Hitbox), 267, null, 0, default(Color), 1f);
						dust3.noGravity = true;
						dust3.color = color;
						dust3.velocity *= 2f;
						dust3.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					}
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == item.useTime / 2)
					{
						if (Main.netMode == 0)
						{
							this.Shellphone_Spawn();
						}
						else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
						{
							NetMessage.SendData(73, -1, -1, null, 3, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (item.type == 2350 && this.itemAnimation > 0)
				{
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
						SoundEngine.PlaySound(SoundID.Item3, this.position);
						for (int num5 = 0; num5 < 10; num5++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
					}
					else if (this.itemTime == 20)
					{
						SoundEngine.PlaySound(this.HeldItem.UseSound, this.position);
						for (int num6 = 0; num6 < 70; num6++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
						this.RemoveAllGrapplingHooks();
						bool flag5 = this.immune;
						int num7 = this.immuneTime;
						this.Spawn(PlayerSpawnContext.RecallFromItem);
						this.immune = flag5;
						this.immuneTime = num7;
						for (int num8 = 0; num8 < 70; num8++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
						if (item.stack > 0)
						{
							item.stack--;
						}
					}
				}
				if (item.type == 4870 && this.itemAnimation > 0)
				{
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
						SoundEngine.PlaySound(SoundID.Item3, this.position);
						for (int num9 = 0; num9 < 10; num9++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
					}
					else if (this.itemTime == 20)
					{
						SoundEngine.PlaySound(this.HeldItem.UseSound, this.position);
						for (int num10 = 0; num10 < 70; num10++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							this.DoPotionOfReturnTeleportationAndSetTheComebackPoint();
						}
						for (int num11 = 0; num11 < 70; num11++)
						{
							Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
						}
						if (item.stack > 0)
						{
							item.stack--;
						}
					}
				}
				if (item.type == 2351 && this.itemAnimation > 0)
				{
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == 2)
					{
						if (Main.netMode == 0)
						{
							this.TeleportationPotion();
						}
						else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
						{
							NetMessage.SendData(73, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
						}
						if (item.stack > 0)
						{
							item.stack--;
						}
					}
				}
				if (item.type == 2756 && this.itemAnimation > 0)
				{
					if (this.ItemTimeIsZero)
					{
						this.ApplyItemTime(item);
					}
					else if (this.itemTime == 2)
					{
						if (this.whoAmI == Main.myPlayer)
						{
							this.Male = !this.Male;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						if (item.stack > 0)
						{
							item.stack--;
						}
					}
					else
					{
						float num12 = (float)item.useTime;
						num12 = (num12 - (float)this.itemTime) / num12;
						float x = 15f;
						float num13 = 44f;
						float num14 = 9.424778f;
						Vector2 vector = new Vector2(x, 0f).RotatedBy((double)(num14 * num12), default(Vector2));
						vector.X *= (float)this.direction;
						for (int num15 = 0; num15 < 2; num15++)
						{
							int type3 = 221;
							if (num15 == 1)
							{
								vector.X *= -1f;
								type3 = 219;
							}
							Vector2 vector2 = new Vector2(vector.X, num13 * (1f - num12) - num13 + (float)(this.height / 2));
							vector2 += base.Center;
							int num16 = Dust.NewDust(vector2, 0, 0, type3, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num16].position = vector2;
							Main.dust[num16].noGravity = true;
							Main.dust[num16].velocity = Vector2.Zero;
							Main.dust[num16].scale = 1.3f;
							Main.dust[num16].customData = this;
						}
					}
				}
				if (this.whoAmI == Main.myPlayer)
				{
					if ((this.itemTimeMax != 0 && this.itemTime == this.itemTimeMax) | (!item.IsAir && item.IsNotTheSameAs(this.lastVisualizedSelectedItem)))
					{
						this.lastVisualizedSelectedItem = item.Clone();
					}
				}
				else
				{
					this.lastVisualizedSelectedItem = item.Clone();
				}
				if (this.whoAmI == Main.myPlayer)
				{
					if (!this.dontConsumeWand && this.itemTime == (int)((float)item.useTime * this.tileSpeed) && item.tileWand > 0)
					{
						int tileWand = item.tileWand;
						int num17 = 0;
						while (num17 < 58)
						{
							if (tileWand == this.inventory[num17].type && this.inventory[num17].stack > 0)
							{
								this.inventory[num17].stack--;
								if (this.inventory[num17].stack <= 0)
								{
									this.inventory[num17] = new Item();
									break;
								}
								break;
							}
							else
							{
								num17++;
							}
						}
					}
					if (this.itemTimeMax != 0 && this.itemTime == this.itemTimeMax && item.consumable && !itemCheckContext.SkipItemConsumption)
					{
						bool flag6 = true;
						if (item.ranged)
						{
							if (this.huntressAmmoCost90 && Main.rand.Next(10) == 0)
							{
								flag6 = false;
							}
							if (this.chloroAmmoCost80 && Main.rand.Next(5) == 0)
							{
								flag6 = false;
							}
							if (this.ammoCost80 && Main.rand.Next(5) == 0)
							{
								flag6 = false;
							}
							if (this.ammoCost75 && Main.rand.Next(4) == 0)
							{
								flag6 = false;
							}
						}
						if (item.IsACoin)
						{
							flag6 = true;
						}
						bool? flag7 = ItemID.Sets.ForceConsumption[item.type];
						if (flag7 != null)
						{
							flag6 = flag7.Value;
						}
						if (flag6)
						{
							if (item.stack > 0)
							{
								item.stack--;
							}
							if (item.stack <= 0)
							{
								this.itemTime = this.itemAnimation;
								Main.blockMouse = true;
							}
						}
					}
					if (item.stack <= 0 && this.itemAnimation == 0)
					{
						this.inventory[this.selectedItem] = new Item();
					}
					if (this.selectedItem == 58 && this.itemAnimation != 0)
					{
						Main.mouseItem = item.Clone();
					}
				}
			}
			if (this.itemAnimation == 0)
			{
				this.JustDroppedAnItem = false;
			}
			if (this.whoAmI == Main.myPlayer && flag)
			{
				PlayerInput.TryEndingFastUse();
			}
		}

		// Token: 0x060008B3 RID: 2227 RVA: 0x0031513C File Offset: 0x0031333C
		private void UpdatePlacementPreview(Item sItem)
		{
			if (Main.myPlayer != this.whoAmI || this.itemAnimation != 0)
			{
				return;
			}
			Tile targetTile = Main.tile[Player.tileTargetX, Player.tileTargetY];
			int type;
			int style;
			bool? flag;
			int? forcedRandom;
			this.FigureOutWhatToPlace(targetTile, sItem, out type, out style, out flag, out forcedRandom);
			if ((flag == null || flag.Value) && TileObjectData.CustomPlace(type, style))
			{
				TileObject tileObject;
				TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, type, style, this.direction, out tileObject, true, forcedRandom);
			}
		}

		// Token: 0x060008B4 RID: 2228 RVA: 0x003151C0 File Offset: 0x003133C0
		private void FigureOutWhatToPlace(Tile targetTile, Item sItem, out int tileToCreate, out int previewPlaceStyle, out bool? overrideCanPlace, out int? forcedRandom)
		{
			tileToCreate = sItem.createTile;
			previewPlaceStyle = sItem.placeStyle;
			overrideCanPlace = null;
			forcedRandom = null;
			if (this.UsingBiomeTorches && tileToCreate == 215 && previewPlaceStyle == 0)
			{
				previewPlaceStyle = this.BiomeCampfirePlaceStyle(previewPlaceStyle);
			}
			if (targetTile != null && targetTile.active())
			{
				ushort type = targetTile.type;
				if (tileToCreate == 23 && type == 59)
				{
					tileToCreate = 661;
				}
				if (tileToCreate == 199 && type == 59)
				{
					tileToCreate = 662;
				}
			}
			if (!this.ModifyFlexibleWandPlacementInfo(ref tileToCreate, ref previewPlaceStyle, ref forcedRandom))
			{
				overrideCanPlace = new bool?(false);
			}
		}

		// Token: 0x060008B5 RID: 2229 RVA: 0x00315264 File Offset: 0x00313464
		private void ItemCheck_OwnerOnlyCode(ref Player.ItemCheckContext context, Item sItem, int weaponDamage, Rectangle heldItemFrame)
		{
			bool flag = true;
			int type = sItem.type;
			if ((type == 65 || type == 676 || type == 723 || type == 724 || type == 757 || type == 674 || type == 675 || type == 989 || type == 1226 || type == 1227) && !this.ItemAnimationJustStarted)
			{
				flag = false;
			}
			if (type == 5097 && this.ItemAnimationJustStarted)
			{
				this._batbatCanHeal = true;
			}
			if (type == 5094 && this.ItemAnimationJustStarted)
			{
				this._spawnTentacleSpikes = true;
			}
			if (type == 795 && this.ItemAnimationJustStarted)
			{
				this._spawnBloodButcherer = true;
			}
			if (type == 121 && this.ItemAnimationJustStarted)
			{
				this._spawnVolcanoExplosion = true;
			}
			if (type == 155 && this.ItemAnimationJustStarted)
			{
				this._spawnMuramasaCut = true;
			}
			if (type == 3852)
			{
				if (this.itemAnimation < this.itemAnimationMax - 12)
				{
					flag = false;
				}
				if (this.altFunctionUse == 2 && !this.ItemAnimationJustStarted)
				{
					flag = false;
				}
			}
			if (type == 4956 && this.itemAnimation < this.itemAnimationMax - 3 * sItem.useTime)
			{
				flag = false;
			}
			if (type == 4952 && this.itemAnimation < this.itemAnimationMax - 8)
			{
				flag = false;
			}
			if (type == 4953 && this.itemAnimation < this.itemAnimationMax - 10)
			{
				flag = false;
			}
			if (type == 5451 && this.ownedProjectileCounts[1020] > 0)
			{
				flag = false;
			}
			this.ItemCheck_TurretAltFeatureUse(sItem, flag);
			this.ItemCheck_MinionAltFeatureUse(sItem, flag);
			bool flag2 = this.itemAnimation > 0 && this.ItemTimeIsZero && flag;
			if (sItem.shootsEveryUse)
			{
				flag2 = this.ItemAnimationJustStarted;
			}
			if (sItem.shoot > 0 && flag2)
			{
				this.ItemCheck_Shoot(this.whoAmI, sItem, weaponDamage);
			}
			this.ItemCheck_UseWiringTools(sItem);
			this.ItemCheck_UseLawnMower(sItem);
			this.ItemCheck_PlayInstruments(sItem);
			this.ItemCheck_UseBuckets(sItem);
			if (!this.channel)
			{
				this.toolTime = this.itemTime;
			}
			else
			{
				this.toolTime--;
				if (this.toolTime < 0)
				{
					this.toolTime = sItem.useTime;
				}
			}
			this.ItemCheck_TryDestroyingDrones(sItem);
			this.ItemCheck_UseMiningTools(sItem);
			this.ItemCheck_UseTeleportRod(sItem);
			this.ItemCheck_UseLifeCrystal(sItem);
			this.ItemCheck_UseLifeFruit(sItem);
			this.ItemCheck_UseManaCrystal(sItem);
			this.ItemCheck_UseDemonHeart(sItem);
			this.ItemCheck_UseMinecartPowerUp(sItem);
			this.ItemCheck_UseTorchGodsFavor(sItem);
			this.ItemCheck_UseArtisanLoaf(sItem);
			this.ItemCheck_UseEventItems(sItem);
			this.ItemCheck_UseBossSpawners(this.whoAmI, sItem);
			this.ItemCheck_UseCombatBook(sItem);
			this.ItemCheck_UsePeddlersSatchel(sItem);
			this.ItemCheck_UsePetLicenses(sItem);
			this.ItemCheck_UseShimmerPermanentItems(sItem);
			if (sItem.type == 4095 && this.itemAnimation == 2)
			{
				Main.LocalGolfState.ResetGolfBall();
			}
			this.PlaceThing(ref context);
			if (sItem.makeNPC > 0)
			{
				if (!Main.GamepadDisableCursorItemIcon && this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f >= (float)Player.tileTargetY)
				{
					this.cursorItemIconEnabled = true;
					Main.ItemIconCacheUpdate(sItem.type);
				}
				if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
				{
					this.ItemCheck_ReleaseCritter(sItem);
				}
			}
			if (this.boneGloveItem != null && !this.boneGloveItem.IsAir && this.boneGloveTimer == 0 && this.itemAnimation > 0 && sItem.damage > 0)
			{
				this.boneGloveTimer = 60;
				Vector2 center = base.Center;
				Vector2 vector = base.DirectionTo(this.ApplyRangeCompensation(0.2f, center, Main.MouseWorld)) * 10f;
				Projectile.NewProjectile(this.GetProjectileSource_Accessory(this.boneGloveItem), center.X, center.Y, vector.X, vector.Y, 532, 25, 5f, this.whoAmI, 0f, 0f, 0f);
			}
			if (((sItem.damage >= 0 && sItem.type > 0 && !sItem.noMelee) || sItem.type == 1450 || sItem.type == 1991 || sItem.type == 3183 || sItem.type == 4821 || sItem.type == 3542 || sItem.type == 3779) && this.itemAnimation > 0)
			{
				bool flag3;
				Rectangle itemRectangle;
				this.ItemCheck_GetMeleeHitbox(sItem, heldItemFrame, out flag3, out itemRectangle);
				if (!flag3)
				{
					itemRectangle = this.ItemCheck_EmitUseVisuals(sItem, itemRectangle);
					if (Main.myPlayer == this.whoAmI && (sItem.type == 1991 || sItem.type == 3183 || sItem.type == 4821))
					{
						itemRectangle = this.ItemCheck_CatchCritters(sItem, itemRectangle);
					}
					if (sItem.type == 3183 || sItem.type == 4821)
					{
						bool[] shouldIgnore = this.ItemCheck_GetTileCutIgnoreList(sItem);
						this.ItemCheck_CutTiles(sItem, itemRectangle, shouldIgnore);
					}
					if (sItem.damage > 0)
					{
						this.UpdateMeleeHitCooldowns();
						float num = sItem.knockBack;
						float num2 = 1f;
						if (this.kbGlove)
						{
							num2 += 1f;
						}
						if (this.kbBuff)
						{
							num2 += 0.5f;
						}
						num *= num2;
						if (this.inventory[this.selectedItem].type == 3106)
						{
							num += num * (1f - this.stealth);
						}
						bool[] shouldIgnore2 = this.ItemCheck_GetTileCutIgnoreList(sItem);
						this.ItemCheck_CutTiles(sItem, itemRectangle, shouldIgnore2);
						this.ItemCheck_MeleeHitNPCs(sItem, itemRectangle, weaponDamage, num);
						this.ItemCheck_MeleeHitPVP(sItem, itemRectangle, weaponDamage, num);
						this.ItemCheck_EmitHammushProjectiles(this.whoAmI, sItem, itemRectangle, weaponDamage);
					}
				}
			}
		}

		// Token: 0x17000120 RID: 288
		// (get) Token: 0x060008B6 RID: 2230 RVA: 0x003158A0 File Offset: 0x00313AA0
		public Vector2? MouthPosition
		{
			get
			{
				if (this.mount.Active)
				{
					Mount.MountDelegatesData.OverridePositionMethod mouthPosition = this.mount.Delegations.MouthPosition;
					Vector2? result;
					if (mouthPosition != null && mouthPosition(this, out result))
					{
						return result;
					}
				}
				Vector2 spinningpoint = new Vector2((float)(this.direction * 8), this.gravDir * -4f);
				return new Vector2?(this.RotatedRelativePoint(this.MountedCenter, false, false) + spinningpoint.RotatedBy((double)this.fullRotation, default(Vector2)));
			}
		}

		// Token: 0x060008B7 RID: 2231 RVA: 0x00315928 File Offset: 0x00313B28
		private void ItemCheck_EmitFoodParticles(Item sItem)
		{
			if (this.itemAnimation < 1)
			{
				return;
			}
			Color[] array = ItemID.Sets.FoodParticleColors[sItem.type];
			if (array == null || array.Length == 0)
			{
				return;
			}
			if (Main.rand.Next(2) == 0)
			{
				return;
			}
			Vector2? mouthPosition = this.MouthPosition;
			if (mouthPosition == null)
			{
				return;
			}
			Vector2 position = mouthPosition.Value + Main.rand.NextVector2Square(-4f, 4f);
			Vector2 spinningpoint = new Vector2((float)this.direction, -this.gravDir * 0.8f);
			Dust.NewDustPerfect(position, 284, new Vector2?(1.3f * spinningpoint.RotatedBy((double)(0.62831855f * Main.rand.NextFloatDirection()), default(Vector2))), 0, array[Main.rand.Next(array.Length)], 0.8f + 0.2f * Main.rand.NextFloat()).fadeIn = 0f;
		}

		// Token: 0x060008B8 RID: 2232 RVA: 0x00315A1C File Offset: 0x00313C1C
		private void ItemCheck_EmitDrinkParticles(Item sItem)
		{
			if (this.itemAnimation < 1)
			{
				return;
			}
			Color[] array = ItemID.Sets.DrinkParticleColors[sItem.type];
			if (array == null || array.Length == 0)
			{
				return;
			}
			Vector2? mouthPosition = this.MouthPosition;
			if (mouthPosition == null)
			{
				return;
			}
			Vector2 position = mouthPosition.Value + Main.rand.NextVector2Square(-4f, 4f);
			Vector2 spinningpoint = new Vector2((float)this.direction * 0.1f, -this.gravDir * 0.1f);
			Dust.NewDustPerfect(position, 284, new Vector2?(1.3f * spinningpoint.RotatedBy((double)(-0.62831855f * Main.rand.NextFloatDirection()), default(Vector2))), 0, array[Main.rand.Next(array.Length)] * 0.7f, 0.8f + 0.2f * Main.rand.NextFloat()).fadeIn = 0f;
		}

		// Token: 0x060008B9 RID: 2233 RVA: 0x00315B14 File Offset: 0x00313D14
		private void ItemCheck_UseBossSpawners(int onWhichPlayer, Item sItem)
		{
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && (sItem.type == 43 || sItem.type == 70 || sItem.type == 544 || sItem.type == 556 || sItem.type == 557 || sItem.type == 560 || sItem.type == 1133 || sItem.type == 1331 || sItem.type == 4988 || sItem.type == 5120 || sItem.type == 5334) && this.SummonItemCheck(sItem))
			{
				if (sItem.type == 560)
				{
					this.ApplyItemTime(sItem);
					SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						NPC.SpawnOnPlayer(onWhichPlayer, 50);
						return;
					}
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, 50f, 0f, 0f, 0, 0, 0);
					return;
				}
				else if (sItem.type == 43)
				{
					if (!Main.IsItDay())
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 4);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 4f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 70)
				{
					if (this.ZoneCorrupt)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 13);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 13f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 544)
				{
					if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 125);
							NPC.SpawnOnPlayer(onWhichPlayer, 126);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 125f, 0f, 0f, 0, 0, 0);
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 126f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 556)
				{
					if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 134);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 134f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 557)
				{
					if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 127);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 127f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 5334)
				{
					if (NPC.SpawnMechQueen(this.whoAmI))
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						return;
					}
				}
				else if (sItem.type == 1133)
				{
					this.ApplyItemTime(sItem);
					SoundEngine.PlaySound(SoundID.Item173, (int)this.position.X, (int)this.position.Y);
					if (Main.netMode != 1)
					{
						NPC.SpawnOnPlayer(onWhichPlayer, 222);
						return;
					}
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, 222f, 0f, 0f, 0, 0, 0);
					return;
				}
				else if (sItem.type == 1331)
				{
					if (this.ZoneCrimson)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 266);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 266f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 4988)
				{
					if (this.ZoneHallow)
					{
						this.ApplyItemTime(sItem);
						SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(onWhichPlayer, 657);
							return;
						}
						NetMessage.SendData(61, -1, -1, null, this.whoAmI, 657f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (sItem.type == 5120 && this.ZoneSnow)
				{
					this.ApplyItemTime(sItem);
					SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						NPC.SpawnOnPlayer(onWhichPlayer, 668);
						return;
					}
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, 668f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x060008BA RID: 2234 RVA: 0x00316154 File Offset: 0x00314354
		private void ItemCheck_UseEventItems(Item sItem)
		{
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 361 && Main.CanStartInvasion(1, true))
			{
				this.ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				if (Main.netMode != 1)
				{
					if (Main.invasionType == 0)
					{
						Main.invasionDelay = 0;
						Main.StartInvasion(1);
					}
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 602 && Main.CanStartInvasion(2, true))
			{
				this.ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				if (Main.netMode != 1)
				{
					if (Main.invasionType == 0)
					{
						Main.invasionDelay = 0;
						Main.StartInvasion(2);
					}
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -2f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 1315 && Main.CanStartInvasion(3, true))
			{
				this.ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				if (Main.netMode != 1)
				{
					if (Main.invasionType == 0)
					{
						Main.invasionDelay = 0;
						Main.StartInvasion(3);
					}
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -3f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 1844 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
			{
				this.ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				if (Main.netMode != 1)
				{
					Main.NewText(Lang.misc[31].Value, 50, byte.MaxValue, 130);
					Main.startPumpkinMoon();
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -4f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 2767 && Main.dayTime && !Main.eclipse)
			{
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					Main.eclipse = true;
					if (Main.remixWorld)
					{
						Main.NewText(Lang.misc[106].Value, 50, byte.MaxValue, 130);
					}
					else
					{
						Main.NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
					}
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -6f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 4271 && !Main.dayTime && !Main.bloodMoon)
			{
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					AchievementsHelper.NotifyProgressionEvent(4);
					Main.bloodMoon = true;
					if (Main.GetMoonPhase() == MoonPhase.Empty)
					{
						Main.moonPhase = 5;
					}
					Main.NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -10f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 3601 && NPC.downedGolemBoss && Main.hardMode && !NPC.AnyDanger(false, false) && !NPC.AnyoneNearCultists())
			{
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					WorldGen.StartImpendingDoom(720);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -8f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.ItemTimeIsZero && this.itemAnimation > 0 && sItem.type == 1958 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
			{
				this.ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				if (Main.netMode != 1)
				{
					Main.NewText(Lang.misc[34].Value, 50, byte.MaxValue, 130);
					Main.startSnowMoon();
					return;
				}
				NetMessage.SendData(61, -1, -1, null, this.whoAmI, -5f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008BB RID: 2235 RVA: 0x00316738 File Offset: 0x00314938
		private void ItemCheck_ReleaseCritter(Item sItem)
		{
			if (sItem.makeNPC == 614)
			{
				this.ApplyItemTime(sItem);
				NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y, (int)sItem.makeNPC, sItem.placeStyle, this.whoAmI);
				return;
			}
			if (this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f >= (float)Player.tileTargetY)
			{
				int num = Main.mouseX + (int)Main.screenPosition.X;
				int num2 = Main.mouseY + (int)Main.screenPosition.Y;
				int i = num / 16;
				int j = num2 / 16;
				if (!WorldGen.SolidTile(i, j, false))
				{
					this.ApplyItemTime(sItem);
					NPC.ReleaseNPC(num, num2, (int)sItem.makeNPC, sItem.placeStyle, this.whoAmI);
				}
			}
		}

		// Token: 0x060008BC RID: 2236 RVA: 0x003168A8 File Offset: 0x00314AA8
		private void ItemCheck_MeleeHitPVP(Item sItem, Rectangle itemRectangle, int damage, float knockBack)
		{
			if (this.hostile)
			{
				for (int i = 0; i < 255; i++)
				{
					Player player = Main.player[i];
					if (i != this.whoAmI && player.active && player.hostile && !player.immune && !player.dead && (this.team == 0 || this.team != player.team) && itemRectangle.Intersects(player.Hitbox) && this.CanHit(player))
					{
						bool flag = false;
						if (Main.rand.Next(1, 101) <= 10)
						{
							flag = true;
						}
						int num = Main.DamageVar((float)damage, this.luck);
						this.StatusToPlayerPvP(sItem.type, i);
						this.OnHit(player.Center.X, player.Center.Y, player);
						PlayerDeathReason playerDeathReason = PlayerDeathReason.ByPlayer(this.whoAmI);
						int num2 = (int)player.Hurt(playerDeathReason, num, this.direction, true, false, flag, -1, true);
						if (this.inventory[this.selectedItem].type == 3211)
						{
							Vector2 vector = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
							vector.Normalize();
							vector *= (float)Main.rand.Next(30, 41) * 0.1f;
							Vector2 vector2 = new Vector2((float)(itemRectangle.X + Main.rand.Next(itemRectangle.Width)), (float)(itemRectangle.Y + Main.rand.Next(itemRectangle.Height)));
							vector2 = (vector2 + player.Center * 2f) / 3f;
							Projectile.NewProjectile(this.GetProjectileSource_Item(this.HeldItem), vector2.X, vector2.Y, vector.X, vector.Y, 524, (int)((double)damage * 0.7), knockBack * 0.7f, this.whoAmI, 0f, 0f, 0f);
						}
						if (sItem.type == 5097)
						{
							this.BatBat_TryLifeLeeching(player);
						}
						if (this.beetleOffense)
						{
							this.beetleCounter += (float)num2;
							this.beetleCountdown = 0;
						}
						if (this.meleeEnchant == 7)
						{
							Projectile.NewProjectile(this.GetProjectileSource_Misc(8), player.Center.X, player.Center.Y, player.velocity.X, player.velocity.Y, 289, 0, 0f, this.whoAmI, 0f, 0f, 0f);
						}
						if (sItem.type == 1123)
						{
							int num3 = Main.rand.Next(1, 4);
							if (this.strongBees && Main.rand.Next(3) == 0)
							{
								num3++;
							}
							for (int j = 0; j < num3; j++)
							{
								float num4 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
								float num5 = (float)Main.rand.Next(-35, 36) * 0.02f;
								num4 *= 0.2f;
								num5 *= 0.2f;
								int num6 = Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), (float)(itemRectangle.X + itemRectangle.Width / 2), (float)(itemRectangle.Y + itemRectangle.Height / 2), num4, num5, this.beeType(), this.beeDamage(num / 3), this.beeKB(0f), this.whoAmI, 0f, 0f, 0f);
								Main.projectile[num6].melee = true;
							}
						}
						if (this.inventory[this.selectedItem].type == 3106)
						{
							this.stealth = 1f;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						if (Main.netMode != 0)
						{
							NetMessage.SendPlayerHurt(i, playerDeathReason, num, this.direction, flag, true, -1, -1, -1);
						}
						this.ApplyAttackCooldown();
					}
				}
			}
		}

		// Token: 0x060008BD RID: 2237 RVA: 0x00316CF8 File Offset: 0x00314EF8
		private void Volcano_TrySpawningVolcano(NPC npc, Item sItem, float damage, float knockBack, Rectangle itemRectangle)
		{
			if (!this._spawnVolcanoExplosion)
			{
				return;
			}
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			if (npc != null && !npc.HittableForOnHitRewards())
			{
				return;
			}
			Vector2 center = npc.Center;
			int num = 2;
			Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), center.X, center.Y, 0f, -1f * this.gravDir, 978, (int)damage, knockBack, this.whoAmI, 0f, (float)num, 0f);
			this._spawnVolcanoExplosion = false;
		}

		// Token: 0x060008BE RID: 2238 RVA: 0x00316D80 File Offset: 0x00314F80
		private void TentacleSpike_TrySpiking(NPC npc, Item sItem, float damage, float knockBack)
		{
			if (!this._spawnTentacleSpikes)
			{
				return;
			}
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			if (npc != null && !npc.CanBeChasedBy(this, false))
			{
				return;
			}
			Vector2 vector = npc.Center - this.MountedCenter;
			vector = vector.SafeNormalize(Vector2.Zero);
			Vector2 vector2 = npc.Hitbox.ClosestPointInRect(this.MountedCenter) + vector;
			Vector2 vector3 = (npc.Center - vector2) * 0.8f;
			int num = Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), vector2.X, vector2.Y, vector3.X, vector3.Y, 971, (int)damage, knockBack, this.whoAmI, 1f, (float)npc.whoAmI, 0f);
			Main.projectile[num].StatusNPC(npc.whoAmI);
			Projectile.KillOldestJavelin(num, 971, npc.whoAmI, Player._tentacleSpikesMax5);
			this._spawnTentacleSpikes = false;
		}

		// Token: 0x060008BF RID: 2239 RVA: 0x00316E74 File Offset: 0x00315074
		private void BloodButcherer_TryButchering(NPC npc, Item sItem, float damage, float knockBack)
		{
			if (!this._spawnBloodButcherer)
			{
				return;
			}
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			if (npc != null && !npc.CanBeChasedBy(this, false))
			{
				return;
			}
			Vector2 vector = npc.Center - this.MountedCenter;
			vector = vector.SafeNormalize(Vector2.Zero);
			Vector2 vector2 = npc.Hitbox.ClosestPointInRect(this.MountedCenter) + vector;
			Vector2 vector3 = (npc.Center - vector2) * 0.8f;
			vector3 = vector3.RotatedBy((double)(Main.rand.NextFloatDirection() * 3.1415927f * 0.25f), default(Vector2));
			int num = Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), vector2.X, vector2.Y, vector3.X, vector3.Y, 975, (int)damage, knockBack, this.whoAmI, 1f, (float)npc.whoAmI, 0f);
			Main.projectile[num].StatusNPC(npc.whoAmI);
			Projectile.KillOldestJavelin(num, 975, npc.whoAmI, Player._bloodButchererMax5);
			this._spawnBloodButcherer = false;
		}

		// Token: 0x060008C0 RID: 2240 RVA: 0x00316F90 File Offset: 0x00315190
		private void BatBat_TryLifeLeeching(Entity entity)
		{
			if (!this._batbatCanHeal)
			{
				return;
			}
			if (this.statLife >= this.statLifeMax2)
			{
				return;
			}
			NPC npc = entity as NPC;
			if (npc != null && !npc.HittableForOnHitRewards())
			{
				return;
			}
			this._batbatCanHeal = false;
			this.Heal(1);
		}

		// Token: 0x060008C1 RID: 2241 RVA: 0x00316FD6 File Offset: 0x003151D6
		public bool HasNPCBannerBuff(int bannerType)
		{
			return Main.SceneMetrics.NPCBannerBuff[bannerType];
		}

		// Token: 0x060008C2 RID: 2242 RVA: 0x00316FE4 File Offset: 0x003151E4
		public void ResetMeleeHitCooldowns()
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				this.meleeNPCHitCooldown[i] = 0;
			}
		}

		// Token: 0x060008C3 RID: 2243 RVA: 0x00317018 File Offset: 0x00315218
		public void UpdateMeleeHitCooldowns()
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				this.meleeNPCHitCooldown[i]--;
			}
		}

		// Token: 0x060008C4 RID: 2244 RVA: 0x00317054 File Offset: 0x00315254
		public bool CanHitNPCWithMeleeHit(int npcIndex)
		{
			return this.meleeNPCHitCooldown[npcIndex] <= 0;
		}

		// Token: 0x060008C5 RID: 2245 RVA: 0x00317064 File Offset: 0x00315264
		public void SetMeleeHitCooldown(int npcIndex, int timeInFrames)
		{
			this.meleeNPCHitCooldown[npcIndex] = timeInFrames;
		}

		// Token: 0x060008C6 RID: 2246 RVA: 0x00317070 File Offset: 0x00315270
		private void ItemCheck_MeleeHitNPCs(Item sItem, Rectangle itemRectangle, int originalDamage, float knockBack)
		{
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.active && npc.immune[this.whoAmI] == 0 && this.CanHitNPCWithMeleeHit(i) && this.attackCD <= 0)
				{
					npc.position += npc.netOffset;
					this.ProcessHitAgainstNPC(sItem, itemRectangle, originalDamage, knockBack, i);
					npc.position -= npc.netOffset;
				}
			}
		}

		// Token: 0x060008C7 RID: 2247 RVA: 0x003170F8 File Offset: 0x003152F8
		public void TakeDamageFromJellyfish(int npcIndex)
		{
			NPC npc = Main.npc[npcIndex];
			this.Hurt(PlayerDeathReason.ByNPC(npcIndex), (int)((double)npc.damage * 1.3), -this.direction, false, false, false, -1, true);
			this.SetMeleeHitCooldown(npcIndex, this.itemAnimation);
			this.ApplyAttackCooldown();
		}

		// Token: 0x060008C8 RID: 2248 RVA: 0x0031714C File Offset: 0x0031534C
		private void ProcessHitAgainstNPC(Item sItem, Rectangle itemRectangle, int originalDamage, float knockBack, int npcIndex)
		{
			NPC npc = Main.npc[npcIndex];
			if (npc.dontTakeDamage || !this.CanNPCBeHitByPlayerOrPlayerProjectile(npc, null))
			{
				if (NPCID.Sets.ZappingJellyfish[npc.type] && itemRectangle.Intersects(npc.Hitbox) && (npc.noTileCollide || this.CanHit(npc)))
				{
					this.TakeDamageFromJellyfish(npcIndex);
				}
				return;
			}
			if (npc.friendly && (npc.type != 22 || !this.killGuide) && (npc.type != 54 || !this.killClothier) && (!npc.isLikeATownNPC || sItem.type != 5129))
			{
				return;
			}
			Rectangle rectangle = new Rectangle((int)npc.position.X, (int)npc.position.Y, npc.width, npc.height);
			bool flag = itemRectangle.Intersects(rectangle);
			int type = sItem.type;
			if (type == 121)
			{
				Vector2 lineStart;
				Vector2 vector;
				this.GetPointOnSwungItemPath(70f, 70f, 0f, this.GetAdjustedItemScale(sItem), out lineStart, out vector);
				Vector2 lineEnd;
				this.GetPointOnSwungItemPath(70f, 70f, 0.9f, this.GetAdjustedItemScale(sItem), out lineEnd, out vector);
				bool flag2 = Utils.LineRectangleDistance(rectangle, lineStart, lineEnd) <= 16f;
				if (this._spawnVolcanoExplosion)
				{
					flag = flag2;
				}
				else
				{
					flag = (flag || flag2);
				}
			}
			if (!flag)
			{
				return;
			}
			if (npc.noTileCollide || this.CanHit(npc))
			{
				int num = originalDamage;
				bool flag3 = false;
				int weaponCrit = this.GetWeaponCrit(sItem);
				if (Main.rand.Next(1, 101) <= weaponCrit)
				{
					flag3 = true;
				}
				int num2 = Item.NPCtoBanner(npc.BannerID());
				if (num2 > 0 && this.HasNPCBannerBuff(num2))
				{
					if (Main.expertMode)
					{
						num = (int)((float)num * ItemID.Sets.BannerStrength[Item.BannerToItem(num2)].ExpertDamageDealt);
					}
					else
					{
						num = (int)((float)num * ItemID.Sets.BannerStrength[Item.BannerToItem(num2)].NormalDamageDealt);
					}
				}
				if (this.parryDamageBuff && sItem.melee)
				{
					num *= 5;
					this.parryDamageBuff = false;
					this.ClearBuff(198);
				}
				if (sItem.type == 426 && (float)npc.life >= (float)npc.lifeMax * 0.9f)
				{
					num = (int)((float)num * 2.5f);
				}
				if (sItem.type == 5096)
				{
					int num3 = 0;
					if (this.FindBuffIndex(26) != -1)
					{
						num3 = 1;
					}
					if (this.FindBuffIndex(206) != -1)
					{
						num3 = 2;
					}
					if (this.FindBuffIndex(207) != -1)
					{
						num3 = 3;
					}
					float num4 = 1f + 0.05f * (float)num3;
					num = (int)((float)num * num4);
				}
				if (sItem.type == 671)
				{
					float t = (float)npc.life / (float)npc.lifeMax;
					float lerpValue = Utils.GetLerpValue(1f, 0.1f, t, true);
					float num5 = 1f * lerpValue;
					num = (int)((float)num * (1f + num5));
					Vector2 point = itemRectangle.Center.ToVector2();
					Vector2 positionInWorld = npc.Hitbox.ClosestPointInRect(point);
					ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.Keybrand, new ParticleOrchestraSettings
					{
						PositionInWorld = positionInWorld
					}, new int?(this.whoAmI));
				}
				int num6 = Main.DamageVar((float)num, this.luck);
				float armorPenetrationPercent = 0f;
				if (sItem.type == 5129 && npc.isLikeATownNPC)
				{
					armorPenetrationPercent = 1f;
					if (npc.type == 18)
					{
						num6 *= 2;
					}
				}
				if (sItem.type == 3258)
				{
					ParticleOrchestraSettings settings = new ParticleOrchestraSettings
					{
						PositionInWorld = npc.Center
					};
					ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.SlapHand, settings, new int?(this.whoAmI));
				}
				if (sItem.type == 5382)
				{
					ParticleOrchestraSettings settings2 = new ParticleOrchestraSettings
					{
						PositionInWorld = npc.Center
					};
					ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.WaffleIron, settings2, new int?(this.whoAmI));
				}
				if (sItem.type == 5129)
				{
					ParticleOrchestraSettings settings3 = new ParticleOrchestraSettings
					{
						PositionInWorld = npc.Center
					};
					ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.FlyMeal, settings3, new int?(this.whoAmI));
				}
				this.StatusToNPC(sItem.type, npcIndex);
				if (npc.life > 5)
				{
					this.OnHit(npc.Center.X, npc.Center.Y, npc);
				}
				num6 += npc.checkArmorPenetration(this.armorPenetration, armorPenetrationPercent);
				NPCKillAttempt npckillAttempt = new NPCKillAttempt(npc);
				int dmgDone = (int)npc.StrikeNPC(num6, knockBack, this.direction, flag3, false, false);
				this.ApplyNPCOnHitEffects(sItem, itemRectangle, num, knockBack, npcIndex, num6, dmgDone);
				int num7 = Item.NPCtoBanner(npc.BannerID());
				if (num7 >= 0)
				{
					this.lastCreatureHit = num7;
				}
				if (Main.netMode != 0)
				{
					if (flag3)
					{
						NetMessage.SendData(28, -1, -1, null, npcIndex, (float)num6, knockBack, (float)this.direction, 1, 0, 0);
					}
					else
					{
						NetMessage.SendData(28, -1, -1, null, npcIndex, (float)num6, knockBack, (float)this.direction, 0, 0, 0);
					}
				}
				if (this.accDreamCatcher)
				{
					this.addDPS(num6);
				}
				this.SetMeleeHitCooldown(npcIndex, this.itemAnimation);
				if (npckillAttempt.DidNPCDie())
				{
					this.OnKillNPC(ref npckillAttempt, sItem);
				}
				this.ApplyAttackCooldown();
			}
		}

		// Token: 0x060008C9 RID: 2249 RVA: 0x0031767B File Offset: 0x0031587B
		public void ApplyAttackCooldown()
		{
			this.attackCD = Math.Max(1, (int)((double)this.itemAnimationMax * 0.33));
		}

		// Token: 0x060008CA RID: 2250 RVA: 0x0031769B File Offset: 0x0031589B
		public void ApplyAttackCooldown(int frames)
		{
			if (this.attackCD < frames)
			{
				this.attackCD = frames;
			}
		}

		// Token: 0x060008CB RID: 2251 RVA: 0x003176B0 File Offset: 0x003158B0
		private void ApplyNPCOnHitEffects(Item sItem, Rectangle itemRectangle, int damage, float knockBack, int npcIndex, int dmgRandomized, int dmgDone)
		{
			bool flag = !Main.npc[npcIndex].immortal;
			if (sItem.type == 3211)
			{
				Vector2 vector = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
				vector.Normalize();
				vector *= (float)Main.rand.Next(30, 41) * 0.1f;
				Vector2 vector2 = new Vector2((float)(itemRectangle.X + Main.rand.Next(itemRectangle.Width)), (float)(itemRectangle.Y + Main.rand.Next(itemRectangle.Height)));
				vector2 = (vector2 + Main.npc[npcIndex].Center * 2f) / 3f;
				Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), vector2.X, vector2.Y, vector.X, vector.Y, 524, (int)((double)damage * 0.5), knockBack * 0.7f, this.whoAmI, 0f, 0f, 0f);
			}
			if (this.beetleOffense && flag)
			{
				this.beetleCounter += (float)dmgDone;
				this.beetleCountdown = 0;
			}
			if (this.meleeEnchant == 7)
			{
				Projectile.NewProjectile(this.GetProjectileSource_Misc(8), Main.npc[npcIndex].Center.X, Main.npc[npcIndex].Center.Y, Main.npc[npcIndex].velocity.X, Main.npc[npcIndex].velocity.Y, 289, 0, 0f, this.whoAmI, 0f, 0f, 0f);
			}
			if (sItem.type == 3106)
			{
				this.stealth = 1f;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(84, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (sItem.type == 5094)
			{
				this.TentacleSpike_TrySpiking(Main.npc[npcIndex], sItem, (float)damage, knockBack);
			}
			if (sItem.type == 795)
			{
				this.BloodButcherer_TryButchering(Main.npc[npcIndex], sItem, (float)damage, knockBack);
			}
			if (sItem.type == 121)
			{
				this.Volcano_TrySpawningVolcano(Main.npc[npcIndex], sItem, (float)((int)((float)damage * 0.75f)), knockBack, itemRectangle);
			}
			if (sItem.type == 5097)
			{
				this.BatBat_TryLifeLeeching(Main.npc[npcIndex]);
			}
			if (sItem.type == 1123 && flag)
			{
				int num = Main.rand.Next(1, 4);
				if (this.strongBees && Main.rand.Next(3) == 0)
				{
					num++;
				}
				for (int i = 0; i < num; i++)
				{
					float num2 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
					float num3 = (float)Main.rand.Next(-35, 36) * 0.02f;
					num2 *= 0.2f;
					num3 *= 0.2f;
					int num4 = Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), (float)(itemRectangle.X + itemRectangle.Width / 2), (float)(itemRectangle.Y + itemRectangle.Height / 2), num2, num3, this.beeType(), this.beeDamage(dmgRandomized / 3), this.beeKB(0f), this.whoAmI, 0f, 0f, 0f);
					Main.projectile[num4].melee = true;
				}
			}
			if (sItem.type == 155 && flag && this._spawnMuramasaCut)
			{
				this._spawnMuramasaCut = false;
				int num5 = Main.rand.Next(1, 4);
				num5 = 1;
				for (int j = 0; j < num5; j++)
				{
					NPC npc = Main.npc[npcIndex];
					Rectangle hitbox = npc.Hitbox;
					hitbox.Inflate(30, 16);
					hitbox.Y -= 8;
					Vector2 vector3 = Main.rand.NextVector2FromRectangle(hitbox);
					Vector2 vector4 = hitbox.Center.ToVector2();
					Vector2 vector5 = (vector4 - vector3).SafeNormalize(new Vector2((float)this.direction, this.gravDir)) * 8f;
					Main.rand.NextFloat();
					float num6 = (float)(Main.rand.Next(2) * 2 - 1) * (0.62831855f + 2.5132742f * Main.rand.NextFloat());
					num6 *= 0.5f;
					vector5 = vector5.RotatedBy(0.7853981852531433, default(Vector2));
					int num7 = 3;
					int num8 = 10 * num7;
					int num9 = 5;
					int num10 = num9 * num7;
					vector3 = vector4;
					for (int k = 0; k < num10; k++)
					{
						vector3 -= vector5;
						vector5 = vector5.RotatedBy((double)(-(double)num6 / (float)num8), default(Vector2));
					}
					vector3 += npc.velocity * (float)num9;
					Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), vector3, vector5, 977, (int)((float)dmgRandomized * 0.5f), 0f, this.whoAmI, num6, 0f, 0f);
				}
			}
			if (Main.npc[npcIndex].value > 0f && this.hasLuckyCoin && Main.rand.Next(5) == 0)
			{
				int type = 71;
				if (Main.rand.Next(10) == 0)
				{
					type = 72;
				}
				if (Main.rand.Next(100) == 0)
				{
					type = 73;
				}
				int num11 = Item.NewItem(this.GetItemSource_OnHit(Main.npc[npcIndex], 2), (int)Main.npc[npcIndex].position.X, (int)Main.npc[npcIndex].position.Y, Main.npc[npcIndex].width, Main.npc[npcIndex].height, type, 1, false, 0, false, false);
				Main.item[num11].stack = Main.rand.Next(1, 11);
				Main.item[num11].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
				Main.item[num11].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)this.direction;
				Main.item[num11].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(148, -1, -1, null, num11, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x060008CC RID: 2252 RVA: 0x00317D68 File Offset: 0x00315F68
		private void ItemCheck_EmitHammushProjectiles(int i, Item sItem, Rectangle itemRectangle, int damage)
		{
			if (sItem.type == 787)
			{
				int num = this.itemAnimationMax;
				if (this.itemAnimation == (int)((double)num * 0.1) || this.itemAnimation == (int)((double)num * 0.3) || this.itemAnimation == (int)((double)num * 0.5) || this.itemAnimation == (int)((double)num * 0.7) || this.itemAnimation == (int)((double)num * 0.9))
				{
					float num2 = 0f;
					float num3 = 0f;
					float num4 = 0f;
					float num5 = 0f;
					if (this.itemAnimation == (int)((double)num * 0.9))
					{
						num2 = -7f;
					}
					if (this.itemAnimation == (int)((double)num * 0.7))
					{
						num2 = -6f;
						num3 = 2f;
					}
					if (this.itemAnimation == (int)((double)num * 0.5))
					{
						num2 = -4f;
						num3 = 4f;
					}
					if (this.itemAnimation == (int)((double)num * 0.3))
					{
						num2 = -2f;
						num3 = 6f;
					}
					if (this.itemAnimation == (int)((double)num * 0.1))
					{
						num3 = 7f;
					}
					if (this.itemAnimation == (int)((double)num * 0.7))
					{
						num5 = 26f;
					}
					if (this.itemAnimation == (int)((double)num * 0.3))
					{
						num5 -= 4f;
						num4 -= 20f;
					}
					if (this.itemAnimation == (int)((double)num * 0.1))
					{
						num4 += 6f;
					}
					if (this.direction == -1)
					{
						if (this.itemAnimation == (int)((double)num * 0.9))
						{
							num5 -= 8f;
						}
						if (this.itemAnimation == (int)((double)num * 0.7))
						{
							num5 -= 6f;
						}
					}
					num2 *= 1.5f;
					num3 *= 1.5f;
					num5 *= (float)this.direction;
					num4 *= this.gravDir;
					Projectile.NewProjectile(this.GetProjectileSource_Item(sItem), (float)(itemRectangle.X + itemRectangle.Width / 2) + num5, (float)(itemRectangle.Y + itemRectangle.Height / 2) + num4, (float)this.direction * num3, num2 * this.gravDir, 131, damage / 2, 0f, i, 0f, 0f, 0f);
				}
			}
		}

		// Token: 0x060008CD RID: 2253 RVA: 0x00317FD8 File Offset: 0x003161D8
		private bool[] ItemCheck_GetTileCutIgnoreList(Item sItem)
		{
			bool allowRegrowth = false;
			int type = sItem.type;
			if (type == 213 || type == 5295)
			{
				allowRegrowth = true;
			}
			return this.GetTileCutIgnorance(allowRegrowth, false);
		}

		// Token: 0x060008CE RID: 2254 RVA: 0x00318008 File Offset: 0x00316208
		public bool[] GetTileCutIgnorance(bool allowRegrowth, bool fromTrap)
		{
			bool[] result = TileID.Sets.TileCutIgnore.None;
			if (allowRegrowth)
			{
				result = TileID.Sets.TileCutIgnore.Regrowth;
			}
			if (!fromTrap && this.dontHurtNature)
			{
				result = TileID.Sets.TileCutIgnore.IgnoreDontHurtNature;
			}
			return result;
		}

		// Token: 0x060008CF RID: 2255 RVA: 0x00318038 File Offset: 0x00316238
		private void ItemCheck_CutTiles(Item sItem, Rectangle itemRectangle, bool[] shouldIgnore)
		{
			int num = itemRectangle.X / 16;
			int num2 = (itemRectangle.X + itemRectangle.Width) / 16 + 1;
			int num3 = itemRectangle.Y / 16;
			int num4 = (itemRectangle.Y + itemRectangle.Height) / 16 + 1;
			Utils.ClampWithinWorld(ref num, ref num3, ref num2, ref num4, false, 0, 0);
			for (int i = num; i < num2; i++)
			{
				for (int j = num3; j < num4; j++)
				{
					if (Main.tile[i, j] != null && Main.tileCut[(int)Main.tile[i, j].type] && !shouldIgnore[(int)Main.tile[i, j].type] && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackMelee))
					{
						if (sItem.type == 1786)
						{
							ushort type = Main.tile[i, j].type;
							WorldGen.KillTile(i, j, false, false, false);
							if (!Main.tile[i, j].active())
							{
								int num5 = 0;
								if (type == 3 || type == 24 || type == 61 || type == 110 || type == 201 || type == 637 || type == 529)
								{
									num5 = Main.rand.Next(1, 3);
								}
								else if (type == 73 || type == 74 || type == 113)
								{
									num5 = Main.rand.Next(2, 5);
								}
								if (num5 > 0)
								{
									int number = Item.NewItem(new EntitySource_ItemUse(this, sItem), i * 16, j * 16, 16, 16, 1727, num5, false, 0, false, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
									}
								}
							}
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
							}
						}
						else
						{
							WorldGen.KillTile(i, j, false, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)i, (float)j, 0f, 0, 0, 0);
							}
						}
					}
				}
			}
		}

		// Token: 0x060008D0 RID: 2256 RVA: 0x00318268 File Offset: 0x00316468
		private Rectangle ItemCheck_CatchCritters(Item sItem, Rectangle itemRectangle)
		{
			bool flag = sItem.type == 3183 || sItem.type == 4821;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].catchItem > 0)
				{
					Rectangle value = new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height);
					if (itemRectangle.Intersects(value))
					{
						if (!flag && ItemID.Sets.IsLavaBait[(int)Main.npc[i].catchItem])
						{
							if (Main.myPlayer == this.whoAmI && this.Hurt(PlayerDeathReason.ByNPC(i), 1, (Main.npc[i].Center.X < base.Center.X) ? 1 : -1, false, false, false, 3, true) > 0.0 && !this.dead)
							{
								this.AddBuff(24, 300, false, false);
							}
						}
						else if (Main.npc[i].type == 585 || Main.npc[i].type == 583 || Main.npc[i].type == 584)
						{
							if (Main.npc[i].ai[2] <= 1f)
							{
								NPC.CatchNPC(i, this.whoAmI);
							}
						}
						else
						{
							NPC.CatchNPC(i, this.whoAmI);
						}
					}
				}
			}
			return itemRectangle;
		}

		// Token: 0x060008D1 RID: 2257 RVA: 0x00318408 File Offset: 0x00316608
		private void GetPointOnSwungItemPath(float spriteWidth, float spriteHeight, float normalizedPointOnPath, float itemScale, out Vector2 location, out Vector2 outwardDirection)
		{
			float scaleFactor = (float)Math.Sqrt((double)(spriteWidth * spriteWidth + spriteHeight * spriteHeight));
			float num = (float)(this.direction == 1).ToInt() * 1.5707964f;
			if (this.gravDir == -1f)
			{
				num += 1.5707964f * (float)this.direction;
			}
			outwardDirection = this.itemRotation.ToRotationVector2().RotatedBy((double)(3.926991f + num), default(Vector2));
			location = this.RotatedRelativePoint(this.itemLocation + outwardDirection * scaleFactor * normalizedPointOnPath * itemScale, false, true);
		}

		// Token: 0x060008D2 RID: 2258 RVA: 0x003184B4 File Offset: 0x003166B4
		private Rectangle ItemCheck_EmitUseVisuals(Item sItem, Rectangle itemRectangle)
		{
			if (sItem.type == 989 && Main.rand.Next(5) == 0)
			{
				int num = Main.rand.Next(3);
				if (num == 0)
				{
					num = 15;
				}
				else if (num == 1)
				{
					num = 57;
				}
				else
				{
					num = 58;
				}
				int num2 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, num, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f);
				Main.dust[num2].velocity *= 0.2f;
			}
			if (sItem.type == 2880 && Main.rand.Next(2) == 0)
			{
				int type = Utils.SelectRandom<int>(Main.rand, new int[]
				{
					226,
					229
				});
				int num3 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, type, (float)(this.direction * 2), 0f, 150, default(Color), 1f);
				Main.dust[num3].velocity *= 0.2f;
				Main.dust[num3].noGravity = true;
			}
			if ((sItem.type == 44 || sItem.type == 45 || sItem.type == 103 || sItem.type == 104) && Main.rand.Next(15) == 0)
			{
				Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f);
			}
			if (sItem.type == 46 && Main.rand.Next(15) == 0)
			{
				Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f);
			}
			if (sItem.type == 273 || sItem.type == 675)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, (float)(this.direction * 2), 0f, 150, default(Color), 1.4f);
				}
				int num4 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num4].noGravity = true;
				Dust dust = Main.dust[num4];
				dust.velocity.X = dust.velocity.X / 2f;
				Dust dust2 = Main.dust[num4];
				dust2.velocity.Y = dust2.velocity.Y / 2f;
			}
			if (sItem.type == 723 && Main.rand.Next(2) == 0)
			{
				int num5 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 64, 0f, 0f, 150, default(Color), 1.2f);
				Main.dust[num5].noGravity = true;
			}
			if (sItem.type == 65)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
				}
				if (Main.rand.Next(10) == 0)
				{
					Gore.NewGore(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), default(Vector2), Main.rand.Next(16, 18), 1f);
				}
			}
			if (sItem.type == 3065)
			{
				int num6 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
				Main.dust[num6].velocity *= 0.5f;
				if (Main.rand.Next(8) == 0)
				{
					int num7 = Gore.NewGore(new Vector2((float)itemRectangle.Center.X, (float)itemRectangle.Center.Y), default(Vector2), 16, 1f);
					Main.gore[num7].velocity *= 0.5f;
					Main.gore[num7].velocity += new Vector2((float)this.direction, 0f);
				}
			}
			if (sItem.type == 190)
			{
				int num8 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 40, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
				Main.dust[num8].noGravity = true;
			}
			else if (sItem.type == 213 || sItem.type == 5295)
			{
				int num9 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 3, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
				Main.dust[num9].noGravity = true;
			}
			if (sItem.type == 121)
			{
				for (int i = 0; i < 2; i++)
				{
					Vector2 position;
					Vector2 spinningpoint;
					this.GetPointOnSwungItemPath(70f, 70f, 0.2f + 0.8f * Main.rand.NextFloat(), this.GetAdjustedItemScale(sItem), out position, out spinningpoint);
					Vector2 value = spinningpoint.RotatedBy((double)(1.5707964f * (float)this.direction * this.gravDir), default(Vector2));
					Dust.NewDustPerfect(position, 6, new Vector2?(value * 4f), 100, default(Color), 2.5f).noGravity = true;
				}
			}
			if (sItem.type == 122 || sItem.type == 217)
			{
				int num10 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.9f);
				Main.dust[num10].noGravity = true;
			}
			if (sItem.type == 155)
			{
				int num11 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 172, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 0.9f);
				Main.dust[num11].noGravity = true;
				Main.dust[num11].velocity *= 0.1f;
			}
			if (sItem.type == 676 && Main.rand.Next(3) == 0)
			{
				int num12 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, default(Color), 1.5f);
				Main.dust[num12].noGravity = true;
				Main.dust[num12].velocity *= 0.2f;
			}
			if (sItem.type == 3063)
			{
				int num13 = Dust.NewDust(itemRectangle.TopLeft(), itemRectangle.Width, itemRectangle.Height, 66, 0f, 0f, 150, Color.Transparent, 0.85f);
				Main.dust[num13].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f, byte.MaxValue);
				Main.dust[num13].noGravity = true;
				Main.dust[num13].velocity /= 2f;
			}
			if (sItem.type == 3823)
			{
				Dust dust3 = Dust.NewDustDirect(itemRectangle.TopLeft(), itemRectangle.Width, itemRectangle.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, Color.Transparent, 0.7f);
				dust3.noGravity = true;
				dust3.velocity *= 2f;
				dust3.fadeIn = 0.9f;
			}
			if (sItem.type == 724 && Main.rand.Next(5) == 0)
			{
				int num14 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, default(Color), 1.5f);
				Main.dust[num14].noGravity = true;
				Main.dust[num14].velocity *= 0.2f;
			}
			if (sItem.type >= 795 && sItem.type <= 802)
			{
				for (int j = 0; j < 2; j++)
				{
					Vector2 position2;
					Vector2 spinningpoint2;
					this.GetPointOnSwungItemPath(60f, 60f, 0.2f + 0.8f * Main.rand.NextFloat(), this.GetAdjustedItemScale(sItem), out position2, out spinningpoint2);
					Vector2 value2 = spinningpoint2.RotatedBy((double)(1.5707964f * (float)this.direction * this.gravDir), default(Vector2));
					Dust.NewDustPerfect(position2, 5, new Vector2?(value2 * 2f), 100, default(Color), 0.7f + Main.rand.NextFloat() * 0.6f);
					if (Main.rand.Next(20) == 0)
					{
						int num15 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 115, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 140, default(Color), 0.7f);
						Main.dust[num15].position = position2;
						Main.dust[num15].fadeIn = 1.2f;
						Main.dust[num15].noGravity = true;
						Main.dust[num15].velocity *= 0.25f;
						Main.dust[num15].velocity += value2 * 5f;
					}
				}
			}
			if (sItem.type == 367)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num16 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
					Main.dust[num16].noGravity = true;
					Dust dust4 = Main.dust[num16];
					dust4.velocity.X = dust4.velocity.X / 2f;
					Dust dust5 = Main.dust[num16];
					dust5.velocity.Y = dust5.velocity.Y / 2f;
					Dust dust6 = Main.dust[num16];
					dust6.velocity.X = dust6.velocity.X + (float)(this.direction * 2);
				}
				if (Main.rand.Next(4) == 0)
				{
					int num16 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num16].velocity *= 0f;
				}
			}
			else if (sItem.type != 368)
			{
				int type2 = sItem.type;
			}
			if (sItem.type == 4258 || sItem.type == 4259 || (sItem.type >= 198 && sItem.type <= 203) || (sItem.type >= 3764 && sItem.type <= 3769))
			{
				float num17 = 0.5f;
				float num18 = 0.5f;
				float num19 = 0.5f;
				if (sItem.type == 198 || sItem.type == 3764)
				{
					num17 *= 0.1f;
					num18 *= 0.5f;
					num19 *= 1.2f;
				}
				else if (sItem.type == 199 || sItem.type == 3765)
				{
					num17 *= 1f;
					num18 *= 0.2f;
					num19 *= 0.1f;
				}
				else if (sItem.type == 200 || sItem.type == 3766)
				{
					num17 *= 0.1f;
					num18 *= 1f;
					num19 *= 0.2f;
				}
				else if (sItem.type == 201 || sItem.type == 3767)
				{
					num17 *= 0.8f;
					num18 *= 0.1f;
					num19 *= 1f;
				}
				else if (sItem.type == 202 || sItem.type == 3768)
				{
					num17 *= 0.8f;
					num18 *= 0.9f;
					num19 *= 1f;
				}
				else if (sItem.type == 203 || sItem.type == 3769)
				{
					num17 *= 0.8f;
					num18 *= 0.8f;
					num19 *= 0f;
				}
				else if (sItem.type == 4258 || sItem.type == 4259)
				{
					num17 *= 0.9f;
					num18 *= 0.5f;
					num19 *= 0f;
				}
				Lighting.AddLight((int)((this.itemLocation.X + 6f + this.velocity.X) / 16f), (int)((this.itemLocation.Y - 14f) / 16f), num17, num18, num19);
			}
			if (this.frostBurn && sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && Main.rand.Next(2) == 0)
			{
				int num20 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 135, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num20].noGravity = true;
				Main.dust[num20].velocity *= 0.7f;
				Dust dust7 = Main.dust[num20];
				dust7.velocity.Y = dust7.velocity.Y - 0.5f;
			}
			if (sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && this.meleeEnchant > 0)
			{
				if (this.meleeEnchant == 1)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num21 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 171, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num21].noGravity = true;
						Main.dust[num21].fadeIn = 1.5f;
						Main.dust[num21].velocity *= 0.25f;
					}
				}
				else if (this.meleeEnchant == 2)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num22 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 75, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Main.dust[num22].noGravity = true;
						Main.dust[num22].velocity *= 0.7f;
						Dust dust8 = Main.dust[num22];
						dust8.velocity.Y = dust8.velocity.Y - 0.5f;
					}
				}
				else if (this.meleeEnchant == 3)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num23 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Main.dust[num23].noGravity = true;
						Main.dust[num23].velocity *= 0.7f;
						Dust dust9 = Main.dust[num23];
						dust9.velocity.Y = dust9.velocity.Y - 0.5f;
					}
				}
				else if (this.meleeEnchant == 4)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num24 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
						Main.dust[num24].noGravity = true;
						Dust dust10 = Main.dust[num24];
						dust10.velocity.X = dust10.velocity.X / 2f;
						Dust dust11 = Main.dust[num24];
						dust11.velocity.Y = dust11.velocity.Y / 2f;
					}
				}
				else if (this.meleeEnchant == 5)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num25 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 169, 0f, 0f, 100, default(Color), 1f);
						Dust dust12 = Main.dust[num25];
						dust12.velocity.X = dust12.velocity.X + (float)this.direction;
						Dust dust13 = Main.dust[num25];
						dust13.velocity.Y = dust13.velocity.Y + 0.2f;
						Main.dust[num25].noGravity = true;
					}
				}
				else if (this.meleeEnchant == 6)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num26 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 135, 0f, 0f, 100, default(Color), 1f);
						Dust dust14 = Main.dust[num26];
						dust14.velocity.X = dust14.velocity.X + (float)this.direction;
						Dust dust15 = Main.dust[num26];
						dust15.velocity.Y = dust15.velocity.Y + 0.2f;
						Main.dust[num26].noGravity = true;
					}
				}
				else if (this.meleeEnchant == 7)
				{
					if (Main.rand.Next(20) == 0)
					{
						int type3 = Main.rand.Next(139, 143);
						int num27 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, type3, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
						Dust dust16 = Main.dust[num27];
						dust16.velocity.X = dust16.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Dust dust17 = Main.dust[num27];
						dust17.velocity.Y = dust17.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Dust dust18 = Main.dust[num27];
						dust18.velocity.X = dust18.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
						Dust dust19 = Main.dust[num27];
						dust19.velocity.Y = dust19.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.dust[num27].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					}
					if (Main.rand.Next(40) == 0)
					{
						int type4 = Main.rand.Next(276, 283);
						int num28 = Gore.NewGore(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), this.velocity, type4, 1f);
						Gore gore = Main.gore[num28];
						gore.velocity.X = gore.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Gore gore2 = Main.gore[num28];
						gore2.velocity.Y = gore2.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						Main.gore[num28].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Gore gore3 = Main.gore[num28];
						gore3.velocity.X = gore3.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
						Gore gore4 = Main.gore[num28];
						gore4.velocity.Y = gore4.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
					}
				}
				else if (this.meleeEnchant == 8 && Main.rand.Next(4) == 0)
				{
					int num29 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 46, 0f, 0f, 100, default(Color), 1f);
					Main.dust[num29].noGravity = true;
					Main.dust[num29].fadeIn = 1.5f;
					Main.dust[num29].velocity *= 0.25f;
				}
			}
			if (this.magmaStone && sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && Main.rand.Next(3) != 0)
			{
				int num30 = Dust.NewDust(new Vector2((float)itemRectangle.X, (float)itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num30].noGravity = true;
				Dust dust20 = Main.dust[num30];
				dust20.velocity.X = dust20.velocity.X * 2f;
				Dust dust21 = Main.dust[num30];
				dust21.velocity.Y = dust21.velocity.Y * 2f;
			}
			return itemRectangle;
		}

		// Token: 0x060008D3 RID: 2259 RVA: 0x00319E80 File Offset: 0x00318080
		private void ItemCheck_GetMeleeHitbox(Item sItem, Rectangle heldItemFrame, out bool dontAttack, out Rectangle itemRectangle)
		{
			dontAttack = false;
			itemRectangle = new Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, 32, 32);
			if (!Main.dedServ)
			{
				int num = heldItemFrame.Width;
				int num2 = heldItemFrame.Height;
				switch (sItem.type)
				{
				case 5094:
					num -= 10;
					num2 -= 10;
					break;
				case 5095:
					num -= 10;
					num2 -= 10;
					break;
				case 5096:
					num -= 12;
					num2 -= 12;
					break;
				case 5097:
					num -= 8;
					num2 -= 8;
					break;
				}
				itemRectangle = new Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, num, num2);
			}
			float adjustedItemScale = this.GetAdjustedItemScale(sItem);
			itemRectangle.Width = (int)((float)itemRectangle.Width * adjustedItemScale);
			itemRectangle.Height = (int)((float)itemRectangle.Height * adjustedItemScale);
			if (this.direction == -1)
			{
				itemRectangle.X -= itemRectangle.Width;
			}
			if (this.gravDir == 1f)
			{
				itemRectangle.Y -= itemRectangle.Height;
			}
			if (sItem.useStyle == 1)
			{
				if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
				{
					if (this.direction == -1)
					{
						itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
					}
					itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
					itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5 * (double)this.gravDir);
					itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
				}
				else if ((double)this.itemAnimation >= (double)this.itemAnimationMax * 0.666)
				{
					if (this.direction == 1)
					{
						itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
					}
					itemRectangle.Width *= 2;
					itemRectangle.Y -= (int)(((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height) * (double)this.gravDir);
					itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
				}
			}
			else if (sItem.useStyle == 3)
			{
				if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
				{
					dontAttack = true;
				}
				else
				{
					if (this.direction == -1)
					{
						itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
					}
					itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
					itemRectangle.Y += (int)((double)itemRectangle.Height * 0.6);
					itemRectangle.Height = (int)((double)itemRectangle.Height * 0.6);
					if (sItem.type == 946 || sItem.type == 4707)
					{
						itemRectangle.Height += 14;
						itemRectangle.Width -= 10;
						if (this.direction == -1)
						{
							itemRectangle.X += 10;
						}
					}
				}
			}
			if (sItem.type == 1450 && Main.rand.Next(3) == 0)
			{
				int num3 = -1;
				float x = (float)(itemRectangle.X + Main.rand.Next(itemRectangle.Width));
				float y = (float)(itemRectangle.Y + Main.rand.Next(itemRectangle.Height));
				if (Main.rand.Next(500) == 0)
				{
					num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 415, (float)Main.rand.Next(51, 101) * 0.01f);
				}
				else if (Main.rand.Next(250) == 0)
				{
					num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 414, (float)Main.rand.Next(51, 101) * 0.01f);
				}
				else if (Main.rand.Next(80) == 0)
				{
					num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 413, (float)Main.rand.Next(51, 101) * 0.01f);
				}
				else if (Main.rand.Next(10) == 0)
				{
					num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 412, (float)Main.rand.Next(51, 101) * 0.01f);
				}
				else if (Main.rand.Next(3) == 0)
				{
					num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
				}
				if (num3 >= 0)
				{
					Gore gore = Main.gore[num3];
					gore.velocity.X = gore.velocity.X + (float)(this.direction * 2);
					Gore gore2 = Main.gore[num3];
					gore2.velocity.Y = gore2.velocity.Y * 0.3f;
				}
			}
			if (sItem.type == 3542)
			{
				dontAttack = true;
			}
			if (sItem.type == 3779)
			{
				dontAttack = true;
				Vector2 vector = this.itemLocation + new Vector2((float)(this.direction * 30), -8f);
				Vector2 value = vector - this.position;
				for (float num4 = 0f; num4 < 1f; num4 += 0.2f)
				{
					Vector2 position = Vector2.Lerp(this.oldPosition + value + new Vector2(0f, this.gfxOffY), vector, num4);
					Dust dust = Main.dust[Dust.NewDust(vector - Vector2.One * 8f, 16, 16, 27, 0f, -2f, 0, default(Color), 1f)];
					dust.noGravity = true;
					dust.position = position;
					dust.velocity = new Vector2(0f, -this.gravDir * 2f);
					dust.scale = 1.2f;
					dust.alpha = 200;
				}
			}
		}

		// Token: 0x060008D4 RID: 2260 RVA: 0x0031A520 File Offset: 0x00318720
		private void ItemCheck_UseDemonHeart(Item sItem)
		{
			if (sItem.type == 3335 && this.itemAnimation > 0 && !this.extraAccessory && Main.expertMode && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.extraAccessory = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008D5 RID: 2261 RVA: 0x0031A58C File Offset: 0x0031878C
		private void ItemCheck_UseMinecartPowerUp(Item sItem)
		{
			if (sItem.type == 5289 && this.itemAnimation > 0 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				if (!this.unlockedSuperCart)
				{
					this.unlockedSuperCart = true;
					NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				this.QuickSpawnItem(this.GetItemSource_OpenItem(5289), 3353, 1);
			}
		}

		// Token: 0x060008D6 RID: 2262 RVA: 0x0031A608 File Offset: 0x00318808
		private void ItemCheck_UseArtisanLoaf(Item sItem)
		{
			if (sItem.type == 5326 && this.itemAnimation > 0 && !this.ateArtisanBread && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.ateArtisanBread = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008D7 RID: 2263 RVA: 0x0031A66C File Offset: 0x0031886C
		private void ItemCheck_UseTorchGodsFavor(Item sItem)
		{
			if (sItem.type == 5043 && this.itemAnimation > 0 && !this.unlockedBiomeTorches && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.unlockedBiomeTorches = true;
				this.UsingBiomeTorches = true;
				AchievementsHelper.HandleSpecialEvent(this, 24);
				if (Main.netMode == 0)
				{
					NPC npc = new NPC();
					npc.SetDefaults(664, default(NPCSpawnParams));
					Main.BestiaryTracker.Kills.RegisterKill(npc);
				}
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(51, -1, -1, null, this.whoAmI, 5f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008D8 RID: 2264 RVA: 0x0031A73C File Offset: 0x0031893C
		private void ItemCheck_TryDestroyingDrones(Item sItem)
		{
			if (sItem.type == 5451 && this.ownedProjectileCounts[1020] > 0 && this.controlUseItem && this.ItemTimeIsZero && !this.mouseInterface)
			{
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.owner == this.whoAmI && projectile.type == 1020)
					{
						projectile.Kill();
					}
				}
				this.releaseUseItem = false;
			}
		}

		// Token: 0x060008D9 RID: 2265 RVA: 0x0031A7C0 File Offset: 0x003189C0
		private void ItemCheck_UseManaCrystal(Item sItem)
		{
			if (sItem.type == 109 && this.itemAnimation > 0 && this.statManaMax < 200 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.statManaMax += 20;
				this.statManaMax2 += 20;
				this.statMana += 20;
				if (Main.myPlayer == this.whoAmI)
				{
					this.ManaEffect(20);
				}
				AchievementsHelper.HandleSpecialEvent(this, 1);
			}
		}

		// Token: 0x060008DA RID: 2266 RVA: 0x0031A848 File Offset: 0x00318A48
		private void ItemCheck_UseLifeFruit(Item sItem)
		{
			if (sItem.type == 1291 && this.itemAnimation > 0 && this.statLifeMax >= 400 && this.statLifeMax < 500 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.statLifeMax += 5;
				this.statLifeMax2 += 5;
				this.statLife += 5;
				if (Main.myPlayer == this.whoAmI)
				{
					this.HealEffect(5, true);
				}
				AchievementsHelper.HandleSpecialEvent(this, 2);
			}
		}

		// Token: 0x060008DB RID: 2267 RVA: 0x0031A8DC File Offset: 0x00318ADC
		private void ItemCheck_UseLifeCrystal(Item sItem)
		{
			if (sItem.type == 29 && this.itemAnimation > 0 && this.statLifeMax < 400 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.statLifeMax += 20;
				this.statLifeMax2 += 20;
				this.statLife += 20;
				if (Main.myPlayer == this.whoAmI)
				{
					this.HealEffect(20, true);
				}
				AchievementsHelper.HandleSpecialEvent(this, 0);
			}
		}

		// Token: 0x060008DC RID: 2268 RVA: 0x0031A964 File Offset: 0x00318B64
		private void ItemCheck_UseCombatBook(Item sItem)
		{
			if (!NPC.combatBookWasUsed && sItem.type == 4382 && this.itemAnimation > 0 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					NPC.combatBookWasUsed = true;
					Main.NewText(Language.GetTextValue("Misc.CombatBookUsed"), 50, byte.MaxValue, 130);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, -11f, 0f, 0f, 0, 0, 0);
				}
			}
			if (!NPC.combatBookVolumeTwoWasUsed && sItem.type == 5336 && this.itemAnimation > 0 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					NPC.combatBookVolumeTwoWasUsed = true;
					Main.NewText(Language.GetTextValue("Misc.CombatBookVolumeTwoUsed"), 50, byte.MaxValue, 130);
					return;
				}
				NetMessage.SendData(61, -1, -1, null, this.whoAmI, -17f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008DD RID: 2269 RVA: 0x0031AA60 File Offset: 0x00318C60
		private void ItemCheck_UsePetLicenses(Item sItem)
		{
			if (sItem.type == 4829 && this.itemAnimation > 0)
			{
				this.LicenseOrExchangePet(sItem, ref NPC.boughtCat, 637, "Misc.LicenseCatUsed", -12);
			}
			if (sItem.type == 4830 && this.itemAnimation > 0)
			{
				this.LicenseOrExchangePet(sItem, ref NPC.boughtDog, 638, "Misc.LicenseDogUsed", -13);
			}
			if (sItem.type == 4910 && this.itemAnimation > 0)
			{
				this.LicenseOrExchangePet(sItem, ref NPC.boughtBunny, 656, "Misc.LicenseBunnyUsed", -14);
			}
		}

		// Token: 0x060008DE RID: 2270 RVA: 0x0031AAF8 File Offset: 0x00318CF8
		private void ItemCheck_UsePeddlersSatchel(Item sItem)
		{
			if (!NPC.peddlersSatchelWasUsed && sItem.type == 5343 && this.itemAnimation > 0 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				if (Main.netMode == 0)
				{
					NPC.peddlersSatchelWasUsed = true;
					Main.NewText(Language.GetTextValue("Misc.PeddlersSatchelUsed"), 50, byte.MaxValue, 130);
					return;
				}
				NetMessage.SendData(61, -1, -1, null, this.whoAmI, -18f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008DF RID: 2271 RVA: 0x0031AB7C File Offset: 0x00318D7C
		private void ItemCheck_UseShimmerPermanentItems(Item sItem)
		{
			if (sItem.type == 5337 && this.itemAnimation > 0 && !this.usedAegisCrystal && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedAegisCrystal = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			if (sItem.type == 5338 && this.itemAnimation > 0 && !this.usedAegisFruit && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedAegisFruit = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			if (sItem.type == 5339 && this.itemAnimation > 0 && !this.usedArcaneCrystal && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedArcaneCrystal = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			if (sItem.type == 5340 && this.itemAnimation > 0 && !this.usedGalaxyPearl && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedGalaxyPearl = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			if (sItem.type == 5341 && this.itemAnimation > 0 && !this.usedGummyWorm && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedGummyWorm = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			if (sItem.type == 5342 && this.itemAnimation > 0 && !this.usedAmbrosia && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.usedAmbrosia = true;
				NetMessage.SendData(4, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		// Token: 0x060008E0 RID: 2272 RVA: 0x0031AD87 File Offset: 0x00318F87
		private void LicenseOrExchangePet(Item sItem, ref bool petBoughtFlag, int npcType, string textKeyForLicense, int netMessageData)
		{
			if (!this.ItemTimeIsZero)
			{
				return;
			}
			if (petBoughtFlag && !NPC.AnyNPCs(npcType))
			{
				return;
			}
			this.ApplyItemTime(sItem);
			NPC.UnlockOrExchangePet(ref petBoughtFlag, npcType, textKeyForLicense, netMessageData);
		}

		// Token: 0x060008E1 RID: 2273 RVA: 0x0031ADB4 File Offset: 0x00318FB4
		public void LimitPointToPlayerReachableArea(ref Vector2 pointPoisition)
		{
			Vector2 center = base.Center;
			Vector2 vector = pointPoisition - center;
			float num = Math.Abs(vector.X);
			float num2 = Math.Abs(vector.Y);
			float num3 = 1f;
			if (num > 960f)
			{
				float num4 = 960f / num;
				if (num3 > num4)
				{
					num3 = num4;
				}
			}
			if (num2 > 600f)
			{
				float num5 = 600f / num2;
				if (num3 > num5)
				{
					num3 = num5;
				}
			}
			Vector2 value = vector * num3;
			pointPoisition = center + value;
		}

		// Token: 0x060008E2 RID: 2274 RVA: 0x0031AE3C File Offset: 0x0031903C
		private void ItemCheck_UseTeleportRod(Item sItem)
		{
			if (Main.myPlayer == this.whoAmI && (sItem.type == 1326 || sItem.type == 5335) && this.itemAnimation > 0 && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				Vector2 vector;
				vector.X = (float)Main.mouseX + Main.screenPosition.X;
				if (this.gravDir == 1f)
				{
					vector.Y = (float)Main.mouseY + Main.screenPosition.Y - (float)this.height;
				}
				else
				{
					vector.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
				}
				vector.X -= (float)(this.width / 2);
				this.LimitPointToPlayerReachableArea(ref vector);
				if (vector.X > 50f && vector.X < (float)(Main.maxTilesX * 16 - 50) && vector.Y > 50f && vector.Y < (float)(Main.maxTilesY * 16 - 50))
				{
					int num = (int)(vector.X / 16f);
					int num2 = (int)(vector.Y / 16f);
					if ((Main.tile[num, num2].wall != 87 || NPC.downedPlantBoss || (!Main.remixWorld && (double)num2 <= Main.worldSurface)) && !Collision.SolidCollision(vector, this.width, this.height))
					{
						this.Teleport(vector, 1, 0);
						NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector.X, vector.Y, 1, 0, 0);
						if (sItem.type == 1326)
						{
							if (this.chaosState)
							{
								this.statLife -= this.statLifeMax2 / 7;
								PlayerDeathReason damageSource = PlayerDeathReason.ByOther(13);
								if (Main.rand.Next(2) == 0)
								{
									damageSource = PlayerDeathReason.ByOther(this.Male ? 14 : 15);
								}
								if (this.statLife <= 0)
								{
									this.KillMe(damageSource, 1.0, 0, false);
								}
								this.lifeRegenCount = 0;
								this.lifeRegenTime = 0f;
							}
							this.AddBuff(88, 360, true, false);
						}
					}
				}
			}
		}

		// Token: 0x060008E3 RID: 2275 RVA: 0x0031B088 File Offset: 0x00319288
		private bool IsTilePoundable(Tile targetTile)
		{
			return !Main.tileHammer[(int)targetTile.type] && !Main.tileSolid[(int)targetTile.type] && targetTile.type != 314 && targetTile.type != 424 && targetTile.type != 442 && targetTile.type != 351;
		}

		// Token: 0x060008E4 RID: 2276 RVA: 0x0031B0EC File Offset: 0x003192EC
		private void UseShovel(Player user, Item item, int sX, int sY)
		{
			for (int i = sX - 1; i <= sX + 1; i++)
			{
				for (int j = sY - 1; j <= sY + 1; j++)
				{
					this.DamageTileWithShovel(user, item, i, j);
				}
			}
			this.itemTime = (int)((float)item.useTime * this.pickSpeed);
		}

		// Token: 0x060008E5 RID: 2277 RVA: 0x0031B13C File Offset: 0x0031933C
		private void DamageTileWithShovel(Player user, Item item, int x, int y)
		{
			Tile tileSafely = Framing.GetTileSafely(x, y);
			if (!TileID.Sets.CanBeDugByShovel[(int)tileSafely.type])
			{
				return;
			}
			int pickPower = 30;
			if (tileSafely.active() && (TileID.Sets.Conversion.Grass[(int)tileSafely.type] || TileID.Sets.Conversion.JungleGrass[(int)tileSafely.type] || tileSafely.type == 70 || tileSafely.type == 633))
			{
				this.PickTile(x, y, 100);
			}
			this.PickTile(x, y, pickPower);
		}

		// Token: 0x060008E6 RID: 2278 RVA: 0x0031B1B4 File Offset: 0x003193B4
		private void ItemCheck_UseMiningTools(Item sItem)
		{
			Player.SpecialToolUsageSettings specialToolUsageSettings = default(Player.SpecialToolUsageSettings);
			if (sItem.type == 4711)
			{
				specialToolUsageSettings = new Player.SpecialToolUsageSettings
				{
					IsAValidTool = true,
					UsageAction = new Player.SpecialToolUsageSettings.UseToolAction(this.UseShovel)
				};
			}
			if (sItem.pick <= 0 && sItem.axe <= 0 && sItem.hammer <= 0 && !specialToolUsageSettings.IsAValidTool)
			{
				return;
			}
			bool flag = this.IsTargetTileInItemRange(sItem);
			if (this.noBuilding)
			{
				flag = false;
			}
			if (flag && specialToolUsageSettings.UsageCondition != null)
			{
				flag = specialToolUsageSettings.UsageCondition(this, sItem, Player.tileTargetX, Player.tileTargetY);
			}
			if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
			{
				Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
				if (!tile.active() || this.IsTilePoundable(tile))
				{
					this.poundRelease = false;
				}
			}
			if (!flag)
			{
				return;
			}
			if (!Main.GamepadDisableCursorItemIcon)
			{
				this.cursorItemIconEnabled = true;
				Main.ItemIconCacheUpdate(sItem.type);
			}
			bool flag2 = false;
			if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
			{
				if (specialToolUsageSettings.UsageAction != null)
				{
					specialToolUsageSettings.UsageAction(this, sItem, Player.tileTargetX, Player.tileTargetY);
					return;
				}
				this.ItemCheck_UseMiningTools_ActuallyUseMiningTool(sItem, out flag2, Player.tileTargetX, Player.tileTargetY);
			}
			if (this.releaseUseItem)
			{
				this.poundRelease = true;
			}
			if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem && flag2)
			{
				int wX;
				int wY;
				Player.ItemCheck_UseMiningTools_TryFindingWallToHammer(out wX, out wY);
				this.ItemCheck_UseMiningTools_TryHittingWall(sItem, wX, wY);
			}
		}

		// Token: 0x060008E7 RID: 2279 RVA: 0x0031B34C File Offset: 0x0031954C
		private void ItemCheck_UseMiningTools_ActuallyUseMiningTool(Item sItem, out bool canHitWalls, int x, int y)
		{
			int num = 0;
			canHitWalls = true;
			Tile tile = Main.tile[x, y];
			if (tile.active())
			{
				if ((sItem.pick > 0 && !Main.tileAxe[(int)tile.type] && !Main.tileHammer[(int)tile.type]) || (sItem.axe > 0 && Main.tileAxe[(int)tile.type]) || (sItem.hammer > 0 && Main.tileHammer[(int)tile.type]))
				{
					canHitWalls = false;
				}
				int num2 = this.hitTile.HitObject(x, y, 1);
				if (Main.tileNoFail[(int)tile.type])
				{
					num = 100;
				}
				if (Main.tileHammer[(int)tile.type])
				{
					canHitWalls = false;
					if (sItem.hammer > 0)
					{
						num += sItem.hammer;
						if (!WorldGen.CanKillTile(x, y))
						{
							num = 0;
						}
						if (tile.type == 26 && (sItem.hammer < 80 || !Main.hardMode))
						{
							num = 0;
							this.Hurt(PlayerDeathReason.ByOther(4), this.statLife / 2, -this.direction, false, false, false, -1, true);
						}
						AchievementsHelper.CurrentlyMining = true;
						if (this.hitTile.AddDamage(num2, num, true) >= 100)
						{
							this.ClearMiningCacheAt(x, y, 1);
							WorldGen.KillTile(x, y, false, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
							}
						}
						else
						{
							WorldGen.KillTile(x, y, true, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 1f, 0, 0, 0);
							}
						}
						if (num != 0)
						{
							this.hitTile.Prune();
						}
						this.ApplyItemTime(sItem);
						AchievementsHelper.CurrentlyMining = false;
					}
				}
				else if (Main.tileAxe[(int)tile.type])
				{
					if (tile.type == 80)
					{
						num += (int)((float)(sItem.axe * 3) * 1.2f);
					}
					else
					{
						num += (int)((float)sItem.axe * 1.2f);
					}
					if (Main.getGoodWorld)
					{
						num = (int)((double)num * 1.3);
					}
					if (sItem.axe > 0)
					{
						AchievementsHelper.CurrentlyMining = true;
						if (!WorldGen.CanKillTile(x, y))
						{
							num = 0;
						}
						if (Main.dontStarveWorld && Main.myPlayer == this.whoAmI && num > 0 && tile.type == 80)
						{
							this.Hurt(PlayerDeathReason.ByOther(3), Main.DamageVar(6f, this.luck), 0, false, false, false, 0, true);
						}
						if (this.hitTile.AddDamage(num2, num, true) >= 100)
						{
							if (this.whoAmI == Main.myPlayer && sItem.type == 5095 && (TileID.Sets.IsATreeTrunk[(int)tile.type] || tile.type == 323 || tile.type == 80))
							{
								LucyAxeMessage.MessageSource messageSource = LucyAxeMessage.MessageSource.ChoppedTree;
								if (TileID.Sets.CountsAsGemTree[(int)tile.type])
								{
									messageSource = LucyAxeMessage.MessageSource.ChoppedGemTree;
								}
								if (tile.type == 80)
								{
									messageSource = LucyAxeMessage.MessageSource.ChoppedCactus;
									LucyAxeMessage.TryCreatingMessageWithCooldown(messageSource, base.Top, new Vector2((float)(this.direction * 7), -7f), 420);
								}
								else
								{
									LucyAxeMessage.Create(messageSource, base.Top, new Vector2((float)(this.direction * 7), -7f));
								}
							}
							this.ClearMiningCacheAt(x, y, 1);
							bool flag = this.IsBottomOfTreeTrunkNoRoots(x, y);
							WorldGen.KillTile(x, y, false, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
							}
							if (sItem.type == 5295 && flag)
							{
								this.TryReplantingTree();
							}
						}
						else
						{
							WorldGen.KillTile(x, y, true, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 1f, 0, 0, 0);
							}
						}
						if (num != 0)
						{
							this.hitTile.Prune();
						}
						this.ApplyItemTime(sItem);
						AchievementsHelper.CurrentlyMining = false;
					}
				}
				else if (sItem.pick > 0)
				{
					this.PickTile(x, y, sItem.pick);
				}
				if (sItem.pick > 0)
				{
					this.itemTime = (int)((float)sItem.useTime * this.pickSpeed);
				}
				this.ItemCheck_UseMiningTools_TryPoundingTile(sItem, num2, ref canHitWalls, x, y);
			}
		}

		// Token: 0x060008E8 RID: 2280 RVA: 0x0031B75C File Offset: 0x0031995C
		private bool IsBottomOfTreeTrunkNoRoots(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.active())
			{
				return false;
			}
			if (!TileID.Sets.IsATreeTrunk[(int)tile.type] && tile.type != 323)
			{
				return false;
			}
			short frameX = tile.frameX;
			short frameY = tile.frameY;
			ushort type = tile.type;
			return type == 323 || frameY < 132 || frameY > 176 || (frameX != 22 && frameX != 44);
		}

		// Token: 0x060008E9 RID: 2281 RVA: 0x0031B7D8 File Offset: 0x003199D8
		private void TryReplantingTree()
		{
			ushort type = 20;
			int style = 0;
			TileObject tileObject;
			if (!TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, (int)type, style, this.direction, out tileObject, false, null))
			{
				return;
			}
			bool flag = TileObject.Place(tileObject);
			WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
			if (!flag)
			{
				return;
			}
			TileObjectData.CallPostPlacementPlayerHook(Player.tileTargetX, Player.tileTargetY, (int)type, style, this.direction, tileObject.alternate, tileObject);
			if (Main.netMode == 1)
			{
				NetMessage.SendObjectPlacement(-1, Player.tileTargetX, Player.tileTargetY, tileObject.type, tileObject.style, tileObject.alternate, tileObject.random, this.direction);
			}
		}

		// Token: 0x060008EA RID: 2282 RVA: 0x0031B880 File Offset: 0x00319A80
		private static void ItemCheck_UseMiningTools_TryFindingWallToHammer(out int wX, out int wY)
		{
			wX = Player.tileTargetX;
			wY = Player.tileTargetY;
			bool flag = true;
			if (Main.tile[wX, wY].wall > 0)
			{
				if (!Main.wallHouse[(int)Main.tile[wX, wY].wall])
				{
					for (int i = wX - 1; i < wX + 2; i++)
					{
						for (int j = wY - 1; j < wY + 2; j++)
						{
							if (Main.tile[i, j].wall != Main.tile[wX, wY].wall)
							{
								flag = false;
								break;
							}
						}
					}
				}
				else
				{
					flag = false;
				}
			}
			if (flag && !Main.tile[wX, wY].active())
			{
				int num = -1;
				if ((double)(((float)Main.mouseX + Main.screenPosition.X) / 16f) < Math.Round((double)(((float)Main.mouseX + Main.screenPosition.X) / 16f)))
				{
					num = 0;
				}
				int num2 = -1;
				if ((double)(((float)Main.mouseY + Main.screenPosition.Y) / 16f) < Math.Round((double)(((float)Main.mouseY + Main.screenPosition.Y) / 16f)))
				{
					num2 = 0;
				}
				for (int k = Player.tileTargetX + num; k <= Player.tileTargetX + num + 1; k++)
				{
					for (int l = Player.tileTargetY + num2; l <= Player.tileTargetY + num2 + 1; l++)
					{
						if (flag)
						{
							wX = k;
							wY = l;
							if (Main.tile[wX, wY].wall > 0)
							{
								if (!Main.wallHouse[(int)Main.tile[wX, wY].wall])
								{
									for (int m = wX - 1; m < wX + 2; m++)
									{
										for (int n = wY - 1; n < wY + 2; n++)
										{
											if (Main.tile[m, n].wall != Main.tile[wX, wY].wall)
											{
												flag = false;
												break;
											}
										}
									}
								}
								else
								{
									flag = false;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060008EB RID: 2283 RVA: 0x0031BA9C File Offset: 0x00319C9C
		private void ItemCheck_UseMiningTools_TryHittingWall(Item sItem, int wX, int wY)
		{
			if (Main.tile[wX, wY].wall > 0 && (!Main.tile[wX, wY].active() || wX != Player.tileTargetX || wY != Player.tileTargetY || (!Main.tileHammer[(int)Main.tile[wX, wY].type] && !this.poundRelease)) && this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem && sItem.hammer > 0 && Player.CanPlayerSmashWall(wX, wY))
			{
				int damage = (int)((float)sItem.hammer * 1.5f);
				this.PickWall(wX, wY, damage);
				this.itemTime = sItem.useTime / 2;
			}
		}

		// Token: 0x060008EC RID: 2284 RVA: 0x0031BB58 File Offset: 0x00319D58
		public static bool CanPlayerSmashWall(int X, int Y)
		{
			bool result = true;
			if (!Main.wallHouse[(int)Main.tile[X, Y].wall])
			{
				result = false;
				for (int i = X - 1; i < X + 2; i++)
				{
					for (int j = Y - 1; j < Y + 2; j++)
					{
						if (Main.tile[i, j].wall == 0 || Main.wallHouse[(int)Main.tile[i, j].wall])
						{
							result = true;
							break;
						}
					}
				}
			}
			return result;
		}

		// Token: 0x060008ED RID: 2285 RVA: 0x0031BBD4 File Offset: 0x00319DD4
		public void PickWall(int x, int y, int damage)
		{
			int tileId = this.hitTile.HitObject(x, y, 2);
			if (this.hitTile.AddDamage(tileId, damage, true) >= 100)
			{
				this.hitTile.Clear(tileId);
				this.ClearMiningCacheAt(x, y, 2);
				WorldGen.KillWall(x, y, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 2, (float)x, (float)y, 0f, 0, 0, 0);
				}
			}
			else
			{
				WorldGen.KillWall(x, y, true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 2, (float)x, (float)y, 1f, 0, 0, 0);
				}
			}
			if (damage != 0)
			{
				this.hitTile.Prune();
			}
		}

		// Token: 0x060008EE RID: 2286 RVA: 0x0031BC78 File Offset: 0x00319E78
		private void ItemCheck_UseMiningTools_TryPoundingTile(Item sItem, int tileHitId, ref bool hitWall, int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (sItem.hammer > 0 && tile.active() && (Main.tileSolid[(int)tile.type] || tile.type == 314 || tile.type == 351 || tile.type == 424 || tile.type == 442) && this.poundRelease)
			{
				hitWall = false;
				this.ApplyItemTime(sItem);
				int damageAmount = 100;
				if (WorldGen.IsLockedDoor(x, y - 1) || WorldGen.IsLockedDoor(x, y + 1))
				{
					damageAmount = 0;
				}
				if (this.hitTile.AddDamage(tileHitId, damageAmount, true) < 100)
				{
					WorldGen.KillTile(x, y, true, true, false);
					SoundEngine.PlaySound(0, x * 16, y * 16, 1, 1f, 0f);
					return;
				}
				this.ClearMiningCacheAt(x, y, 1);
				if (this.poundRelease)
				{
					if (TileID.Sets.Platforms[(int)Main.tile[x, y].type])
					{
						if (tile.halfBrick())
						{
							WorldGen.PoundTile(x, y);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
							}
						}
						else
						{
							int num = 1;
							int slope = 2;
							if (TileID.Sets.Platforms[(int)Main.tile[x + 1, y - 1].type] || TileID.Sets.Platforms[(int)Main.tile[x - 1, y + 1].type] || (WorldGen.SolidTile(x + 1, y, false) && !WorldGen.SolidTile(x - 1, y, false)))
							{
								num = 2;
								slope = 1;
							}
							if (Main.tile[x, y].slope() == 0)
							{
								WorldGen.SlopeTile(x, y, num, false);
								int num2 = (int)Main.tile[x, y].slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num2, 0, 0, 0);
								}
							}
							else if ((int)Main.tile[x, y].slope() == num)
							{
								WorldGen.SlopeTile(x, y, slope, false);
								int num3 = (int)Main.tile[x, y].slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num3, 0, 0, 0);
								}
							}
							else
							{
								WorldGen.SlopeTile(x, y, 0, false);
								int num4 = (int)Main.tile[x, y].slope();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num4, 0, 0, 0);
								}
								WorldGen.PoundTile(x, y);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[x, y].type == 314)
					{
						if (Minecart.FrameTrack(x, y, true, false) && Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 15, (float)x, (float)y, 1f, 0, 0, 0);
						}
					}
					else if (Main.tile[x, y].type == 137)
					{
						int num5 = 0;
						switch (Main.tile[x, y].frameY / 18)
						{
						case 0:
						case 1:
						case 2:
						case 5:
							switch (Main.tile[x, y].frameX / 18)
							{
							case 0:
								num5 = 2;
								break;
							case 1:
								num5 = 3;
								break;
							case 2:
								num5 = 4;
								break;
							case 3:
								num5 = 5;
								break;
							case 4:
								num5 = 1;
								break;
							case 5:
								num5 = 0;
								break;
							}
							break;
						case 3:
						case 4:
							switch (Main.tile[x, y].frameX / 18)
							{
							case 0:
							case 1:
								num5 = 3;
								break;
							case 2:
								num5 = 4;
								break;
							case 3:
								num5 = 2;
								break;
							case 4:
								num5 = 0;
								break;
							}
							break;
						}
						Main.tile[x, y].frameX = (short)(num5 * 18);
						if (Main.netMode == 1)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
					}
					else if (Main.tile[x, y].type == 424)
					{
						if (Main.tile[x, y].frameX == 0)
						{
							Main.tile[x, y].frameX = 18;
						}
						else if (Main.tile[x, y].frameX == 18)
						{
							Main.tile[x, y].frameX = 36;
						}
						else
						{
							Main.tile[x, y].frameX = 0;
						}
						if (Main.netMode == 1)
						{
							NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
						}
					}
					else if (Main.tile[x, y].type == 442)
					{
						Tile tile2 = Main.tile[x, y - 1];
						Tile tile3 = Main.tile[x, y + 1];
						Tile tile4 = Main.tile[x - 1, y];
						Tile tile5 = Main.tile[x + 1, y];
						Tile tile6 = Main.tile[x - 1, y + 1];
						Tile tile7 = Main.tile[x + 1, y + 1];
						Tile tile8 = Main.tile[x - 1, y - 1];
						Tile tile9 = Main.tile[x + 1, y - 1];
						int num6 = -1;
						int num7 = -1;
						int num8 = -1;
						int num9 = -1;
						int tree = -1;
						int tree2 = -1;
						int tree3 = -1;
						int tree4 = -1;
						if (tile2 != null && tile2.nactive() && !tile2.bottomSlope())
						{
							num7 = (int)tile2.type;
						}
						if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
						{
							num6 = (int)tile3.type;
						}
						if (tile4 != null && tile4.nactive() && (tile4.slope() == 0 || tile4.slope() % 2 != 1))
						{
							num8 = (int)tile4.type;
						}
						if (tile5 != null && tile5.nactive() && (tile5.slope() == 0 || tile5.slope() % 2 != 0))
						{
							num9 = (int)tile5.type;
						}
						if (tile6 != null && tile6.nactive())
						{
							tree = (int)tile6.type;
						}
						if (tile7 != null && tile7.nactive())
						{
							tree2 = (int)tile7.type;
						}
						if (tile8 != null && tile8.nactive())
						{
							tree3 = (int)tile8.type;
						}
						if (tile9 != null && tile9.nactive())
						{
							tree4 = (int)tile9.type;
						}
						bool flag = false;
						bool flag2 = false;
						bool flag3 = false;
						bool flag4 = false;
						if (num6 >= 0 && Main.tileSolid[num6] && (!Main.tileNoAttach[num6] || TileID.Sets.Platforms[num6]) && (tile3.bottomSlope() || tile3.slope() == 0) && !tile3.halfBrick())
						{
							flag4 = true;
						}
						if (num7 >= 0 && Main.tileSolid[num7] && (!Main.tileNoAttach[num7] || (TileID.Sets.Platforms[num7] && tile2.halfBrick())) && (tile2.topSlope() || tile2.slope() == 0 || tile2.halfBrick()))
						{
							flag = true;
						}
						if ((num8 >= 0 && Main.tileSolid[num8] && !Main.tileNoAttach[num8] && (tile4.leftSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num8 >= 0 && TileID.Sets.IsBeam[num8]) || (WorldGen.IsTreeType(num8) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
						{
							flag2 = true;
						}
						if ((num9 >= 0 && Main.tileSolid[num9] && !Main.tileNoAttach[num9] && (tile5.rightSlope() || tile5.slope() == 0) && !tile5.halfBrick()) || (num9 >= 0 && TileID.Sets.IsBeam[num9]) || (WorldGen.IsTreeType(num9) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
						{
							flag3 = true;
						}
						int num10 = (int)(Main.tile[x, y].frameX / 22);
						short num11 = -2;
						switch (num10)
						{
						case 0:
							if (flag2)
							{
								num11 = 2;
							}
							else if (flag)
							{
								num11 = 1;
							}
							else if (flag3)
							{
								num11 = 3;
							}
							else
							{
								num11 = -1;
							}
							break;
						case 1:
							if (flag3)
							{
								num11 = 3;
							}
							else if (flag4)
							{
								num11 = 0;
							}
							else if (flag2)
							{
								num11 = 2;
							}
							else
							{
								num11 = -1;
							}
							break;
						case 2:
							if (flag)
							{
								num11 = 1;
							}
							else if (flag3)
							{
								num11 = 3;
							}
							else if (flag4)
							{
								num11 = 0;
							}
							else
							{
								num11 = -1;
							}
							break;
						case 3:
							if (flag4)
							{
								num11 = 0;
							}
							else if (flag2)
							{
								num11 = 2;
							}
							else if (flag)
							{
								num11 = 1;
							}
							else
							{
								num11 = -1;
							}
							break;
						}
						if (num11 != -1)
						{
							if (num11 == -2)
							{
								num11 = 0;
							}
							Main.tile[x, y].frameX = 22 * num11;
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
							}
						}
					}
					else if ((Main.tile[x, y].halfBrick() || Main.tile[x, y].slope() != 0) && !Main.tileSolidTop[(int)Main.tile[x, y].type])
					{
						int num12 = 1;
						int num13 = 1;
						int num14 = 2;
						if ((WorldGen.SolidTile(x + 1, y, false) || Main.tile[x + 1, y].slope() == 1 || Main.tile[x + 1, y].slope() == 3) && !WorldGen.SolidTile(x - 1, y, false))
						{
							num13 = 2;
							num14 = 1;
						}
						if (WorldGen.SolidTile(x, y - 1, false) && !WorldGen.SolidTile(x, y + 1, false))
						{
							num12 = -1;
						}
						if (num12 == 1)
						{
							if (Main.tile[x, y].slope() == 0)
							{
								WorldGen.SlopeTile(x, y, num13, false);
							}
							else if ((int)Main.tile[x, y].slope() == num13)
							{
								WorldGen.SlopeTile(x, y, num14, false);
							}
							else if ((int)Main.tile[x, y].slope() == num14)
							{
								WorldGen.SlopeTile(x, y, num13 + 2, false);
							}
							else if ((int)Main.tile[x, y].slope() == num13 + 2)
							{
								WorldGen.SlopeTile(x, y, num14 + 2, false);
							}
							else
							{
								WorldGen.SlopeTile(x, y, 0, false);
							}
						}
						else if (Main.tile[x, y].slope() == 0)
						{
							WorldGen.SlopeTile(x, y, num13 + 2, false);
						}
						else if ((int)Main.tile[x, y].slope() == num13 + 2)
						{
							WorldGen.SlopeTile(x, y, num14 + 2, false);
						}
						else if ((int)Main.tile[x, y].slope() == num14 + 2)
						{
							WorldGen.SlopeTile(x, y, num13, false);
						}
						else if ((int)Main.tile[x, y].slope() == num13)
						{
							WorldGen.SlopeTile(x, y, num14, false);
						}
						else
						{
							WorldGen.SlopeTile(x, y, 0, false);
						}
						int num15 = (int)Main.tile[x, y].slope();
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 14, (float)x, (float)y, (float)num15, 0, 0, 0);
						}
					}
					else
					{
						WorldGen.PoundTile(x, y);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 7, (float)x, (float)y, 1f, 0, 0, 0);
						}
					}
					this.poundRelease = false;
					return;
				}
			}
			else
			{
				this.poundRelease = false;
			}
		}

		// Token: 0x060008EF RID: 2287 RVA: 0x0031C844 File Offset: 0x0031AA44
		public bool IsTargetTileInItemRange(Item sItem)
		{
			return this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f >= (float)Player.tileTargetY;
		}

		// Token: 0x060008F0 RID: 2288 RVA: 0x0031C918 File Offset: 0x0031AB18
		private void ItemCheck_UseBuckets(Item sItem)
		{
			if (((sItem.type >= 205 && sItem.type <= 207) || sItem.type == 1128 || sItem.type == 3031 || sItem.type == 3032 || sItem.type == 4820 || sItem.type == 4872 || sItem.type == 5302 || sItem.type == 5303 || sItem.type == 5304 || sItem.type == 5364) && !this.noBuilding && this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f >= (float)Player.tileTargetY)
			{
				if (!Main.GamepadDisableCursorItemIcon)
				{
					this.cursorItemIconEnabled = true;
					Main.ItemIconCacheUpdate(sItem.type);
				}
				if (this.ItemTimeIsZero && this.itemAnimation > 0 && this.controlUseItem)
				{
					if ((sItem.type == 205 && !Main.tile[Player.tileTargetX, Player.tileTargetY].shimmer()) || (sItem.type == 3032 && Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0) || (sItem.type == 3032 && Main.tile[Player.tileTargetX, Player.tileTargetY].shimmer()) || (sItem.type == 4872 && Main.tile[Player.tileTargetX, Player.tileTargetY].lava()) || (sItem.type == 5303 && Main.tile[Player.tileTargetX, Player.tileTargetY].honey()) || sItem.type == 5304)
					{
						int num = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
						int num2 = 0;
						for (int i = Player.tileTargetX - 1; i <= Player.tileTargetX + 1; i++)
						{
							for (int j = Player.tileTargetY - 1; j <= Player.tileTargetY + 1; j++)
							{
								if ((int)Main.tile[i, j].liquidType() == num)
								{
									num2 += (int)Main.tile[i, j].liquid;
								}
							}
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && (num2 > 100 || sItem.type == 3032 || sItem.type == 4872 || sItem.type == 5303 || sItem.type == 5304))
						{
							int liquidType = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
							if (sItem.type != 3032 && sItem.type != 4872 && sItem.type != 5303 && sItem.type != 5304)
							{
								if (Main.tile[Player.tileTargetX, Player.tileTargetY].honey() && sItem.type == 205)
								{
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(1128, this.selectedItem);
								}
								else if (Main.tile[Player.tileTargetX, Player.tileTargetY].lava() && sItem.type == 205)
								{
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(207, this.selectedItem);
								}
								else
								{
									if (Main.tile[Player.tileTargetX, Player.tileTargetY].shimmer() && sItem.type == 205)
									{
										return;
									}
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(206, this.selectedItem);
								}
							}
							SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							this.ApplyItemTime(sItem);
							int num3 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid;
							Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = 0;
							Main.tile[Player.tileTargetX, Player.tileTargetY].lava(false);
							Main.tile[Player.tileTargetX, Player.tileTargetY].honey(false);
							WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, false);
							if (Main.netMode == 1)
							{
								NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
							}
							else
							{
								Liquid.AddWater(Player.tileTargetX, Player.tileTargetY);
							}
							if (num3 < 255)
							{
								for (int k = Player.tileTargetX - 1; k <= Player.tileTargetX + 1; k++)
								{
									for (int l = Player.tileTargetY - 1; l <= Player.tileTargetY + 1; l++)
									{
										if ((k != Player.tileTargetX || l != Player.tileTargetY) && Main.tile[k, l].liquid > 0 && (int)Main.tile[k, l].liquidType() == num)
										{
											int num4 = (int)Main.tile[k, l].liquid;
											if (num4 + num3 > 255)
											{
												num4 = 255 - num3;
											}
											num3 += num4;
											Tile tile = Main.tile[k, l];
											tile.liquid -= (byte)num4;
											Main.tile[k, l].liquidType(liquidType);
											if (Main.tile[k, l].liquid == 0)
											{
												Main.tile[k, l].lava(false);
												Main.tile[k, l].honey(false);
											}
											WorldGen.SquareTileFrame(k, l, false);
											if (Main.netMode == 1)
											{
												NetMessage.sendWater(k, l);
											}
											else
											{
												Liquid.AddWater(k, l);
											}
										}
									}
								}
								return;
							}
						}
					}
					else if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid < 200 && (!Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() || !Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || Main.tileSolidTop[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 546))
					{
						if (sItem.type == 207 || sItem.type == 4820)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 1)
							{
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(1);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
								if (sItem.type != 4820)
								{
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(205, this.selectedItem);
								}
								this.ApplyItemTime(sItem);
								if (Main.netMode == 1)
								{
									NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
									return;
								}
							}
						}
						else if (sItem.type == 206 || sItem.type == 3031)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0)
							{
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(0);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
								if (sItem.type != 3031)
								{
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(205, this.selectedItem);
								}
								this.ApplyItemTime(sItem);
								if (Main.netMode == 1)
								{
									NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
									return;
								}
							}
						}
						else if (sItem.type == 1128 || sItem.type == 5302)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 2)
							{
								SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(2);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
								if (sItem.type != 5302)
								{
									sItem.stack--;
									this.PutItemInInventoryFromItemUsage(205, this.selectedItem);
								}
								this.ApplyItemTime(sItem);
								if (Main.netMode == 1)
								{
									NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
									return;
								}
							}
						}
						else if (sItem.type == 5364 && (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 3))
						{
							SoundEngine.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(3);
							Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
							WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
							this.ApplyItemTime(sItem);
							if (Main.netMode == 1)
							{
								NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
							}
						}
					}
				}
			}
		}

		// Token: 0x060008F1 RID: 2289 RVA: 0x0031D4A4 File Offset: 0x0031B6A4
		private void ItemCheck_PlayInstruments(Item sItem)
		{
			Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num = (float)Main.mouseX + Main.screenPosition.X - vector.X;
			float num2 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
			float num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
			float num4 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
			num3 /= num4 / 2f;
			if (num3 > 1f)
			{
				num3 = 1f;
			}
			this.musicDist = num3;
			if (this.itemAnimation > 0 && this.ItemTimeIsZero && (sItem.type == 508 || sItem.type == 507))
			{
				this.ApplyItemTime(sItem);
				Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num5 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
				float num6 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
				float num7 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
				float num8 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
				num7 /= num8 / 2f;
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				num7 = num7 * 2f - 1f;
				if (num7 < -1f)
				{
					num7 = -1f;
				}
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				num7 = (float)Math.Round((double)(num7 * (float)Player.musicNotes));
				num7 /= (float)Player.musicNotes;
				Main.musicPitch = num7;
				LegacySoundStyle type = SoundID.Item26;
				if (sItem.type == 507)
				{
					type = SoundID.Item35;
				}
				SoundEngine.PlaySound(type, this.position);
				NetMessage.SendData(58, -1, -1, null, this.whoAmI, num7, 0f, 0f, 0, 0, 0);
			}
			if (this.itemAnimation > 0 && !this.mouseInterface)
			{
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					if (sItem.type == 1305)
					{
						Vector2 vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num9 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
						float num10 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
						float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
						float num12 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
						num11 /= num12 / 2f;
						if (num11 > 1f)
						{
							num11 = 1f;
						}
						num11 = num11 * 2f - 1f;
						if (num11 < -1f)
						{
							num11 = -1f;
						}
						if (num11 > 1f)
						{
							num11 = 1f;
						}
						num11 = (float)Math.Round((double)(num11 * (float)Player.musicNotes));
						num11 /= (float)Player.musicNotes;
						Main.musicPitch = num11;
						SoundEngine.PlaySound(SoundID.Item47, this.position);
						NetMessage.SendData(58, -1, -1, null, this.whoAmI, num11, 0f, 0f, 0, 0, 0);
					}
					else if (sItem.type == 4057 || sItem.type == 4372)
					{
						Vector2 vector4 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num13 = (float)Main.mouseX + Main.screenPosition.X - vector4.X;
						float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector4.Y;
						float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
						float num16 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
						num15 /= num16 / 2f;
						if (num15 > 1f)
						{
							num15 = 1f;
						}
						this.PlayGuitarChord(num15);
						NetMessage.SendData(58, -1, -1, null, this.whoAmI, num15, 0f, 0f, 0, 0, 0);
					}
				}
				if (sItem.type == 4715 && ((Main.mouseLeft && Main.mouseLeftRelease) | this.ItemAnimationJustStarted))
				{
					Vector2 vector5 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num17 = (float)Main.mouseX + Main.screenPosition.X - vector5.X;
					float num18 = (float)Main.mouseY + Main.screenPosition.Y - vector5.Y;
					float num19 = (float)Math.Sqrt((double)(num17 * num17 + num18 * num18));
					float num20 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
					num19 /= num20 / 2f;
					if (num19 > 1f)
					{
						num19 = 1f;
					}
					this.PlayGuitarChord(num19);
					NetMessage.SendData(58, -1, -1, null, this.whoAmI, num19, 0f, 0f, 0, 0, 0);
				}
				if (sItem.type == 4673)
				{
					int num21 = (int)base.Center.X / 16;
					int num22 = (int)base.Center.Y / 16;
					if (WorldGen.InWorld(num21, num22, 0) && Main.tile[num21, num22] != null && Main.tile[num21, num22].type == 486 && ((Main.mouseLeft && Main.mouseLeftRelease) || (Main.mouseRight && Main.mouseRightRelease)))
					{
						Vector2 vector6 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num23 = (float)Main.mouseX + Main.screenPosition.X - vector6.X;
						float num24 = (float)Main.mouseY + Main.screenPosition.Y - vector6.Y;
						float num25 = (float)Math.Sqrt((double)(num23 * num23 + num24 * num24));
						float num26 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
						num25 /= num26 / 2f;
						if (num25 > 1f)
						{
							num25 = 1f;
						}
						this.PlayDrums(num25);
						NetMessage.SendData(58, -1, -1, null, this.whoAmI, num25, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x060008F2 RID: 2290 RVA: 0x0031DBCC File Offset: 0x0031BDCC
		private bool GetSparkleGuitarTarget(out List<NPC> validTargets)
		{
			validTargets = new List<NPC>();
			Rectangle value = Utils.CenteredRectangle(base.Center, new Vector2(1000f, 800f));
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.CanBeChasedBy(this, false) && npc.Hitbox.Intersects(value))
				{
					validTargets.Add(npc);
				}
			}
			return validTargets.Count != 0;
		}

		// Token: 0x060008F3 RID: 2291 RVA: 0x0031DC44 File Offset: 0x0031BE44
		private bool GetZenithTarget(Vector2 searchCenter, float maxDistance, out int npcTargetIndex)
		{
			npcTargetIndex = 0;
			int? num = null;
			float num2 = maxDistance;
			for (int i = 0; i < 200; i++)
			{
				NPC npc = Main.npc[i];
				if (npc.CanBeChasedBy(this, false))
				{
					float num3 = searchCenter.Distance(npc.Center);
					if (num2 > num3)
					{
						num = new int?(i);
						num2 = num3;
					}
				}
			}
			if (num == null)
			{
				return false;
			}
			npcTargetIndex = num.Value;
			return true;
		}

		// Token: 0x060008F4 RID: 2292 RVA: 0x0031DCB4 File Offset: 0x0031BEB4
		public void PlayGuitarChord(float range)
		{
			int num = 6;
			float num2 = 1f / (float)num;
			if (range > num2 * 5f)
			{
				SoundEngine.PlaySound(49, base.Center, 1);
				return;
			}
			if (range > num2 * 4f)
			{
				SoundEngine.PlaySound(48, base.Center, 1);
				return;
			}
			if (range > num2 * 3f)
			{
				SoundEngine.PlaySound(47, base.Center, 1);
				return;
			}
			if (range > num2 * 2f)
			{
				SoundEngine.PlaySound(51, base.Center, 1);
				return;
			}
			if (range > num2 * 1f)
			{
				SoundEngine.PlaySound(52, base.Center, 1);
				return;
			}
			SoundEngine.PlaySound(50, base.Center, 1);
		}

		// Token: 0x060008F5 RID: 2293 RVA: 0x0031DD58 File Offset: 0x0031BF58
		public void PlayDrums(float range)
		{
			int num = 10;
			float num2 = 1f / (float)num;
			if (range > num2 * 9f)
			{
				SoundEngine.PlaySound(59, base.Center, 1);
				return;
			}
			if (range > num2 * 8f)
			{
				SoundEngine.PlaySound(58, base.Center, 1);
				return;
			}
			if (range > num2 * 7f)
			{
				SoundEngine.PlaySound(53, base.Center, 1);
				return;
			}
			if (range > num2 * 6f)
			{
				SoundEngine.PlaySound(57, base.Center, 1);
				return;
			}
			if (range > num2 * 5f)
			{
				SoundEngine.PlaySound(62, base.Center, 1);
				return;
			}
			if (range > num2 * 4f)
			{
				SoundEngine.PlaySound(61, base.Center, 1);
				return;
			}
			if (range > num2 * 3f)
			{
				SoundEngine.PlaySound(54, base.Center, 1);
				return;
			}
			if (range > num2 * 2f)
			{
				SoundEngine.PlaySound(56, base.Center, 1);
				return;
			}
			if (range > num2 * 1f)
			{
				SoundEngine.PlaySound(55, base.Center, 1);
				return;
			}
			SoundEngine.PlaySound(60, base.Center, 1);
		}

		// Token: 0x060008F6 RID: 2294 RVA: 0x0031DE60 File Offset: 0x0031C060
		private void ItemCheck_UseWiringTools(Item sItem)
		{
			if ((sItem.type == 509 || sItem.type == 510 || sItem.type == 849 || sItem.type == 850 || sItem.type == 851 || sItem.type == 3612 || sItem.type == 3620 || sItem.type == 3625) && this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				if (!Main.GamepadDisableCursorItemIcon)
				{
					this.cursorItemIconEnabled = true;
					Main.ItemIconCacheUpdate(sItem.type);
				}
				if (this.CanDoWireStuffHere(Player.tileTargetX, Player.tileTargetY) && this.itemAnimation > 0 && this.ItemTimeIsZero && this.controlUseItem)
				{
					int num = Player.tileTargetX;
					int num2 = Player.tileTargetY;
					if (sItem.type == 509)
					{
						int num3 = -1;
						for (int i = 0; i < 58; i++)
						{
							if (this.inventory[i].stack > 0 && this.inventory[i].type == 530)
							{
								num3 = i;
								break;
							}
						}
						if (num3 >= 0 && WorldGen.PlaceWire(num, num2))
						{
							this.inventory[num3].stack--;
							if (this.inventory[num3].stack <= 0)
							{
								this.inventory[num3].SetDefaults(0);
							}
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 5, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					else if (sItem.type == 850)
					{
						int num4 = -1;
						for (int j = 0; j < 58; j++)
						{
							if (this.inventory[j].stack > 0 && this.inventory[j].type == 530)
							{
								num4 = j;
								break;
							}
						}
						if (num4 >= 0 && WorldGen.PlaceWire2(num, num2))
						{
							this.inventory[num4].stack--;
							if (this.inventory[num4].stack <= 0)
							{
								this.inventory[num4].SetDefaults(0);
							}
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 10, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					if (sItem.type == 851)
					{
						int num5 = -1;
						for (int k = 0; k < 58; k++)
						{
							if (this.inventory[k].stack > 0 && this.inventory[k].type == 530)
							{
								num5 = k;
								break;
							}
						}
						if (num5 >= 0 && WorldGen.PlaceWire3(num, num2))
						{
							this.inventory[num5].stack--;
							if (this.inventory[num5].stack <= 0)
							{
								this.inventory[num5].SetDefaults(0);
							}
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 12, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					if (sItem.type == 3612)
					{
						int num6 = -1;
						for (int l = 0; l < 58; l++)
						{
							if (this.inventory[l].stack > 0 && this.inventory[l].type == 530)
							{
								num6 = l;
								break;
							}
						}
						if (num6 >= 0 && WorldGen.PlaceWire4(num, num2))
						{
							this.inventory[num6].stack--;
							if (this.inventory[num6].stack <= 0)
							{
								this.inventory[num6].SetDefaults(0);
							}
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 16, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					else if (sItem.type == 510)
					{
						if (WorldGen.KillActuator(num, num2))
						{
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 9, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
						else if (WorldGen.KillWire4(num, num2))
						{
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 17, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
						else if (WorldGen.KillWire3(num, num2))
						{
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 13, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
						else if (WorldGen.KillWire2(num, num2))
						{
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 11, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
						else if (WorldGen.KillWire(num, num2))
						{
							this.ApplyItemTime(sItem);
							NetMessage.SendData(17, -1, -1, null, 6, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
					}
					else if (sItem.type == 849 && sItem.stack > 0 && WorldGen.PlaceActuator(num, num2))
					{
						this.ApplyItemTime(sItem);
						NetMessage.SendData(17, -1, -1, null, 8, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						sItem.stack--;
						if (sItem.stack <= 0)
						{
							sItem.SetDefaults(0);
						}
					}
					if (sItem.type == 3620)
					{
						Tile tile = Main.tile[num, num2];
						if (tile != null && tile.actuator())
						{
							bool flag = tile.inActive();
							if ((!this.ActuationRodLock || this.ActuationRodLockSetting == tile.inActive()) && Wiring.Actuate(num, num2) && flag != tile.inActive())
							{
								this.ActuationRodLock = true;
								this.ActuationRodLockSetting = !tile.inActive();
								this.ApplyItemTime(sItem);
								NetMessage.SendData(17, -1, -1, null, 19, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
					}
					if (sItem.type == 3625)
					{
						Point point = new Point(Player.tileTargetX, Player.tileTargetY);
						this.ApplyItemTime(sItem);
						WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
						WiresUI.Settings.ToolMode &= ~WiresUI.Settings.MultiToolMode.Actuator;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(109, -1, -1, null, point.X, (float)point.Y, (float)point.X, (float)point.Y, (int)WiresUI.Settings.ToolMode, 0, 0);
						}
						else
						{
							Wiring.MassWireOperation(point, point, this);
						}
						WiresUI.Settings.ToolMode = toolMode;
					}
				}
			}
		}

		// Token: 0x060008F7 RID: 2295 RVA: 0x0031E5A8 File Offset: 0x0031C7A8
		public bool CanDoWireStuffHere(int x, int y)
		{
			return WorldGen.InWorld(x, y, 0) && (NPC.downedGolemBoss || Main.tile[x, y].wall != 87);
		}

		// Token: 0x060008F8 RID: 2296 RVA: 0x0031E5D8 File Offset: 0x0031C7D8
		private void ItemCheck_UseLawnMower(Item sItem)
		{
			if (sItem.type != 4049)
			{
				return;
			}
			if (this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost - (float)this.blockRange > (float)Player.tileTargetX || (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f + (float)this.blockRange < (float)Player.tileTargetX || this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost - (float)this.blockRange > (float)Player.tileTargetY || (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f + (float)this.blockRange < (float)Player.tileTargetY)
			{
				return;
			}
			if (this.itemAnimation > 0 && this.ItemTimeIsZero && this.controlUseItem)
			{
				this.MowGrassTile(new Point(Player.tileTargetX, Player.tileTargetY).ToWorldCoordinates(8f, 8f));
				this.ApplyItemTime(sItem);
			}
		}

		// Token: 0x060008F9 RID: 2297 RVA: 0x0031E718 File Offset: 0x0031C918
		private void DestroyOldestProximityMinesOverMinesCap(int minesCap)
		{
			Player._oldestProjCheckList.Clear();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == this.whoAmI)
				{
					int type = projectile.type;
					if (type <= 782)
					{
						if (type <= 141)
						{
							if (type != 135 && type != 138 && type != 141)
							{
								goto IL_C5;
							}
						}
						else if (type != 144 && type != 778 && type != 782)
						{
							goto IL_C5;
						}
					}
					else if (type <= 792)
					{
						if (type != 786 && type != 789 && type != 792)
						{
							goto IL_C5;
						}
					}
					else if (type != 795 && type != 798 && type != 801)
					{
						goto IL_C5;
					}
					Player._oldestProjCheckList.Add(projectile);
				}
				IL_C5:;
			}
			while (Player._oldestProjCheckList.Count > minesCap)
			{
				Projectile projectile2 = Player._oldestProjCheckList[0];
				for (int j = 1; j < Player._oldestProjCheckList.Count; j++)
				{
					if (Player._oldestProjCheckList[j].timeLeft < projectile2.timeLeft)
					{
						projectile2 = Player._oldestProjCheckList[j];
					}
				}
				projectile2.Kill();
				Player._oldestProjCheckList.Remove(projectile2);
			}
			Player._oldestProjCheckList.Clear();
		}

		// Token: 0x060008FA RID: 2298 RVA: 0x0031E870 File Offset: 0x0031CA70
		private void ItemCheck_Shoot(int i, Item sItem, int weaponDamage)
		{
			int num = sItem.shoot;
			float num2 = sItem.shootSpeed;
			int damage = sItem.damage;
			if (sItem.melee && !ProjectileID.Sets.NoMeleeSpeedVelocityScaling[num])
			{
				num2 /= this.meleeSpeed;
			}
			bool flag = false;
			int num3 = weaponDamage;
			float num4 = sItem.knockBack;
			int ammoItemId = 0;
			if (sItem.useAmmo > 0)
			{
				this.PickAmmo(sItem, ref num, ref num2, ref flag, ref num3, ref num4, out ammoItemId, ItemID.Sets.gunProj[sItem.type]);
			}
			else
			{
				flag = true;
			}
			if (ItemID.Sets.gunProj[sItem.type])
			{
				num4 = sItem.knockBack;
				num3 = weaponDamage;
				num2 = sItem.shootSpeed;
			}
			if (sItem.IsACoin)
			{
				flag = false;
			}
			if (sItem.type == 1254 && num == 14)
			{
				num = 242;
			}
			if (sItem.type == 1255 && num == 14)
			{
				num = 242;
			}
			if (sItem.type == 1265 && num == 14)
			{
				num = 242;
			}
			if (sItem.type == 3542)
			{
				if (Main.rand.Next(100) < 20)
				{
					num++;
					num3 *= 3;
				}
				else
				{
					num2 -= 1f;
				}
			}
			if (sItem.type == 1928)
			{
				num3 = (int)((float)num3 * 1f);
			}
			if (sItem.type == 3063)
			{
				num3 = (int)((float)num3 * 1.25f);
			}
			if (sItem.type == 1306)
			{
				num3 = (int)((double)num3 * 0.67);
			}
			if (sItem.type == 1227)
			{
				num3 = (int)((double)num3 * 0.7);
			}
			if (flag)
			{
				num4 = this.GetWeaponKnockback(sItem, num4);
				IEntitySource projectileSource_Item_WithPotentialAmmo = this.GetProjectileSource_Item_WithPotentialAmmo(sItem, ammoItemId);
				if (num == 228)
				{
					num4 = 0f;
				}
				if (num == 1 && sItem.type == 120)
				{
					num = 2;
				}
				if (sItem.type == 682)
				{
					num = 117;
				}
				if (sItem.type == 725)
				{
					num = 120;
				}
				if (sItem.type == 2796)
				{
					num = 442;
				}
				if (sItem.type == 2223)
				{
					num = 357;
				}
				if (sItem.type == 5117)
				{
					num = 968;
				}
				if (sItem.fishingPole > 0 && this.overrideFishingBobber > -1)
				{
					num = this.overrideFishingBobber;
				}
				this.ApplyItemTime(sItem);
				Vector2 vector = this.RotatedRelativePoint(this.MountedCenter, false, true);
				bool flag2 = true;
				int type = sItem.type;
				if (type == 723 || type == 3611)
				{
					flag2 = false;
				}
				Vector2 value = Vector2.UnitX.RotatedBy((double)this.fullRotation, default(Vector2));
				Vector2 vector2 = Main.MouseWorld - vector;
				Vector2 v = this.itemRotation.ToRotationVector2() * (float)this.direction;
				if (sItem.type == 3852 && !this.ItemAnimationJustStarted)
				{
					vector2 = (v.ToRotation() + this.fullRotation).ToRotationVector2();
				}
				if (vector2 != Vector2.Zero)
				{
					vector2.Normalize();
				}
				float num5 = Vector2.Dot(value, vector2);
				if (flag2)
				{
					if (num5 > 0f)
					{
						this.ChangeDir(1);
					}
					else
					{
						this.ChangeDir(-1);
					}
				}
				if (sItem.type == 3094 || sItem.type == 3378 || sItem.type == 3543)
				{
					vector.Y = this.position.Y + (float)(this.height / 3);
				}
				if (sItem.type == 5117)
				{
					vector.Y = this.position.Y + (float)(this.height / 3);
				}
				if (sItem.type == 517)
				{
					vector.X += (float)Main.rand.Next(-3, 4) * 3.5f;
					vector.Y += (float)Main.rand.Next(-3, 4) * 3.5f;
				}
				if (sItem.type == 2611)
				{
					Vector2 vector3 = vector2;
					if (vector3 != Vector2.Zero)
					{
						vector3.Normalize();
					}
					vector += vector3;
				}
				if (sItem.type == 3827)
				{
					vector += vector2.SafeNormalize(Vector2.Zero).RotatedBy((double)((float)this.direction * -1.5707964f), default(Vector2)) * 24f;
				}
				if (num == 9)
				{
					vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
					num4 = 0f;
					num3 = (int)((float)num3 * 1.5f);
				}
				if (sItem.type == 986 || sItem.type == 281)
				{
					vector.X += (float)(6 * this.direction);
					vector.Y -= 6f * this.gravDir;
				}
				if (sItem.type == 3007)
				{
					vector.X -= (float)(4 * this.direction);
					vector.Y -= 2f * this.gravDir;
				}
				float num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (sItem.type == 3852 && !this.ItemAnimationJustStarted)
				{
					Vector2 vector4 = vector2;
					num6 = vector4.X;
					num7 = vector4.Y;
				}
				if (this.gravDir == -1f)
				{
					num7 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
				float num9 = num8;
				if ((float.IsNaN(num6) && float.IsNaN(num7)) || (num6 == 0f && num7 == 0f))
				{
					num6 = (float)this.direction;
					num7 = 0f;
					num8 = num2;
				}
				else
				{
					num8 = num2 / num8;
				}
				if (sItem.type == 1929 || sItem.type == 2270)
				{
					num6 += (float)Main.rand.Next(-50, 51) * 0.03f / num8;
					num7 += (float)Main.rand.Next(-50, 51) * 0.03f / num8;
				}
				num6 *= num8;
				num7 *= num8;
				if (num == 250)
				{
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && Main.projectile[j].owner == this.whoAmI && (Main.projectile[j].type == 250 || Main.projectile[j].type == 251))
						{
							Main.projectile[j].Kill();
						}
					}
				}
				if (num == 12 && Collision.CanHitLine(base.Center, 0, 0, vector + new Vector2(num6, num7) * 4f, 0, 0))
				{
					vector += new Vector2(num6, num7) * 3f;
				}
				if (num == 728 && !Collision.CanHitLine(base.Center, 0, 0, vector + new Vector2(num6, num7) * 2f, 0, 0))
				{
					Vector2 value2 = new Vector2(num6, num7) * 0.25f;
					vector = base.Center - value2;
				}
				if (num == 85)
				{
					vector += new Vector2(0f, -6f * (float)this.direction * this.Directions.Y).RotatedBy((double)vector2.ToRotation(), default(Vector2));
					if (Collision.CanHitLine(vector, 0, 0, vector + new Vector2(num6, num7) * 5f, 0, 0))
					{
						vector += new Vector2(num6, num7) * 4f;
					}
				}
				if (num == 802 || num == 842)
				{
					Vector2 v2 = new Vector2(num6, num7);
					float num10 = 0.7853982f;
					Vector2 vector5 = v2.SafeNormalize(Vector2.Zero).RotatedBy((double)(num10 * (Main.rand.NextFloat() - 0.5f)), default(Vector2)) * (v2.Length() - Main.rand.NextFloatDirection() * 0.7f);
					num6 = vector5.X;
					num7 = vector5.Y;
				}
				if (sItem.useStyle == 5)
				{
					if (sItem.type == 3029)
					{
						Vector2 vector6 = new Vector2(num6, num7);
						vector6.X = (float)Main.mouseX + Main.screenPosition.X - vector.X;
						vector6.Y = (float)Main.mouseY + Main.screenPosition.Y - vector.Y - 1000f;
						this.itemRotation = (float)Math.Atan2((double)(vector6.Y * (float)this.direction), (double)(vector6.X * (float)this.direction));
						NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						NetMessage.SendData(41, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (sItem.type == 4381)
					{
						Vector2 vector7 = new Vector2(num6, num7);
						vector7.X = (float)Main.mouseX + Main.screenPosition.X - vector.X;
						vector7.Y = (float)Main.mouseY + Main.screenPosition.Y - vector.Y - 1000f;
						this.itemRotation = (float)Math.Atan2((double)(vector7.Y * (float)this.direction), (double)(vector7.X * (float)this.direction));
						NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						NetMessage.SendData(41, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (sItem.type == 3779)
					{
						this.itemRotation = 0f;
						NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						NetMessage.SendData(41, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					else
					{
						this.itemRotation = (float)Math.Atan2((double)(num7 * (float)this.direction), (double)(num6 * (float)this.direction)) - this.fullRotation;
						NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						NetMessage.SendData(41, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (sItem.useStyle == 13)
				{
					this.itemRotation = (float)Math.Atan2((double)(num7 * (float)this.direction), (double)(num6 * (float)this.direction)) - this.fullRotation;
					NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(41, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				if (num == 17)
				{
					vector.X = (float)Main.mouseX + Main.screenPosition.X;
					vector.Y = (float)Main.mouseY + Main.screenPosition.Y;
					if (this.gravDir == -1f)
					{
						vector.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
					}
					this.LimitPointToPlayerReachableArea(ref vector);
				}
				if (num == 76)
				{
					num += Main.rand.Next(3);
					float num11 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
					num9 /= num11 / 2f;
					if (num9 > 1f)
					{
						num9 = 1f;
					}
					float num12 = num6 + (float)Main.rand.Next(-40, 41) * 0.01f;
					float num13 = num7 + (float)Main.rand.Next(-40, 41) * 0.01f;
					num12 *= num9 + 0.25f;
					num13 *= num9 + 0.25f;
					int num14 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num12, num13, num, num3, num4, i, 0f, 0f, 0f);
					Main.projectile[num14].ai[1] = 1f;
					num9 = num9 * 2f - 1f;
					if (num9 < -1f)
					{
						num9 = -1f;
					}
					if (num9 > 1f)
					{
						num9 = 1f;
					}
					num9 = (float)Math.Round((double)(num9 * (float)Player.musicNotes));
					num9 /= (float)Player.musicNotes;
					Main.projectile[num14].ai[0] = num9;
					NetMessage.SendData(27, -1, -1, null, num14, 0f, 0f, 0f, 0, 0, 0);
					return;
				}
				if (sItem.type == 3029)
				{
					int num15 = 3;
					if (num == 91 || num == 4 || num == 5 || num == 41)
					{
						if (Main.rand.Next(3) == 0)
						{
							num15--;
						}
					}
					else if (Main.rand.Next(3) == 0)
					{
						num15++;
					}
					for (int k = 0; k < num15; k++)
					{
						vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
						vector.X = (vector.X * 10f + base.Center.X) / 11f + (float)Main.rand.Next(-100, 101);
						vector.Y -= (float)(150 * k);
						num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
						num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
						if (num7 < 0f)
						{
							num7 *= -1f;
						}
						if (num7 < 20f)
						{
							num7 = 20f;
						}
						num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
						num8 = num2 / num8;
						num6 *= num8;
						num7 *= num8;
						float num16 = num6 + (float)Main.rand.Next(-40, 41) * 0.03f;
						float speedY = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
						num16 *= (float)Main.rand.Next(75, 150) * 0.01f;
						vector.X += (float)Main.rand.Next(-50, 51);
						int num17 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num16, speedY, num, num3, num4, i, 0f, 0f, 0f);
						Main.projectile[num17].noDropItem = true;
					}
					return;
				}
				if (sItem.type == 4381)
				{
					int num18 = Main.rand.Next(1, 3);
					if (Main.rand.Next(3) == 0)
					{
						num18++;
					}
					for (int l = 0; l < num18; l++)
					{
						vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(61) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
						vector.X = (vector.X * 10f + base.Center.X) / 11f + (float)Main.rand.Next(-30, 31);
						vector.Y -= 150f * Main.rand.NextFloat();
						num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
						num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
						if (num7 < 0f)
						{
							num7 *= -1f;
						}
						if (num7 < 20f)
						{
							num7 = 20f;
						}
						num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
						num8 = num2 / num8;
						num6 *= num8;
						num7 *= num8;
						float num19 = num6 + (float)Main.rand.Next(-20, 21) * 0.03f;
						float speedY2 = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
						num19 *= (float)Main.rand.Next(55, 80) * 0.01f;
						vector.X += (float)Main.rand.Next(-50, 51);
						int num20 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num19, speedY2, num, num3, num4, i, 0f, 0f, 0f);
						Main.projectile[num20].noDropItem = true;
					}
					return;
				}
				if (sItem.type == 98 || sItem.type == 533)
				{
					float speedX = num6 + (float)Main.rand.Next(-40, 41) * 0.01f;
					float speedY3 = num7 + (float)Main.rand.Next(-40, 41) * 0.01f;
					Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX, speedY3, num, num3, num4, i, 0f, 0f, 0f);
					return;
				}
				if (sItem.type == 1319)
				{
					float speedX2 = num6 + (float)Main.rand.Next(-40, 41) * 0.02f;
					float speedY4 = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
					Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX2, speedY4, num, num3, num4, i, 0f, 0f, 0f);
					return;
				}
				if (sItem.type == 3107)
				{
					float speedX3 = num6 + (float)Main.rand.Next(-40, 41) * 0.02f;
					float speedY5 = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
					Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX3, speedY5, num, num3, num4, i, 0f, 0f, 0f);
					return;
				}
				if (ProjectileID.Sets.IsAGolfBall[num])
				{
					Vector2 vector8 = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
					Vector2 vector9 = vector8 - base.Center;
					bool flag3 = false;
					if (vector9.Length() < 100f)
					{
						flag3 = this.TryPlacingAGolfBallNearANearbyTee(vector8);
					}
					if (!flag3)
					{
						if (vector9.Length() > 100f || !Collision.CanHit(base.Center, 1, 1, vector8, 1, 1))
						{
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
							return;
						}
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector8.X, vector8.Y, 0f, 0f, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
				}
				else
				{
					if (sItem.type == 3053)
					{
						bool flag4 = false;
						if (this.itemAnimation <= sItem.useTime + 1)
						{
							flag4 = true;
						}
						Vector2 vector10 = new Vector2(num6, num7);
						vector10.Normalize();
						vector10 *= 4f;
						if (!flag4)
						{
							Vector2 value3 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value3.Normalize();
							vector10 += value3;
						}
						vector10.Normalize();
						vector10 *= sItem.shootSpeed;
						float num21 = (float)Main.rand.Next(10, 80) * 0.001f;
						if (Main.rand.Next(2) == 0)
						{
							num21 *= -1f;
						}
						float num22 = (float)Main.rand.Next(10, 80) * 0.001f;
						if (Main.rand.Next(2) == 0)
						{
							num22 *= -1f;
						}
						if (flag4)
						{
							num21 = (num22 = 0f);
						}
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector10.X, vector10.Y, num, num3, num4, i, num22, num21, 0f);
						return;
					}
					if (sItem.type == 3019)
					{
						Vector2 vector11 = new Vector2(num6, num7);
						float num23 = vector11.Length();
						vector11.X += (float)Main.rand.Next(-100, 101) * 0.01f * num23 * 0.15f;
						vector11.Y += (float)Main.rand.Next(-100, 101) * 0.01f * num23 * 0.15f;
						float num24 = num6 + (float)Main.rand.Next(-40, 41) * 0.03f;
						float num25 = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
						vector11.Normalize();
						vector11 *= num23;
						num24 *= (float)Main.rand.Next(50, 150) * 0.01f;
						num25 *= (float)Main.rand.Next(50, 150) * 0.01f;
						Vector2 vector12 = new Vector2(num24, num25);
						vector12.X += (float)Main.rand.Next(-100, 101) * 0.025f;
						vector12.Y += (float)Main.rand.Next(-100, 101) * 0.025f;
						vector12.Normalize();
						vector12 *= num23;
						num24 = vector12.X;
						num25 = vector12.Y;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num24, num25, num, num3, num4, i, vector11.X, vector11.Y, 0f);
						return;
					}
					if (sItem.type == 2797)
					{
						Vector2 value4 = Vector2.Normalize(new Vector2(num6, num7)) * 40f * sItem.scale;
						if (Collision.CanHit(vector, 0, 0, vector + value4, 0, 0))
						{
							vector += value4;
						}
						float ai = new Vector2(num6, num7).ToRotation();
						float num26 = 2.0943952f;
						int num27 = Main.rand.Next(4, 5);
						if (Main.rand.Next(4) == 0)
						{
							num27++;
						}
						for (int m = 0; m < num27; m++)
						{
							float scaleFactor = (float)Main.rand.NextDouble() * 0.2f + 0.05f;
							Vector2 vector13 = new Vector2(num6, num7).RotatedBy((double)(num26 * (float)Main.rand.NextDouble() - num26 / 2f), default(Vector2)) * scaleFactor;
							int num28 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector13.X, vector13.Y, 444, num3, num4, i, ai, 0f, 0f);
							Main.projectile[num28].localAI[0] = (float)num;
							Main.projectile[num28].localAI[1] = num2;
						}
						return;
					}
					if (sItem.type == 2270)
					{
						float num29 = num6 + (float)Main.rand.Next(-40, 41) * 0.05f;
						float num30 = num7 + (float)Main.rand.Next(-40, 41) * 0.05f;
						if (Main.rand.Next(3) == 0)
						{
							num29 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
							num30 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
						}
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num29, num30, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 5117)
					{
						float speedX4 = num6 + (float)Main.rand.Next(-15, 16) * 0.075f;
						float speedY6 = num7 + (float)Main.rand.Next(-15, 16) * 0.075f;
						int num31 = Main.rand.Next(Main.projFrames[sItem.shoot]);
						int damage2 = num3;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX4, speedY6, num, damage2, num4, i, 0f, (float)num31, 0f);
						return;
					}
					if (sItem.type == 1930)
					{
						int num32 = 2 + Main.rand.Next(3);
						for (int n = 0; n < num32; n++)
						{
							float num33 = num6;
							float num34 = num7;
							float num35 = 0.025f * (float)n;
							num33 += (float)Main.rand.Next(-35, 36) * num35;
							num34 += (float)Main.rand.Next(-35, 36) * num35;
							num8 = (float)Math.Sqrt((double)(num33 * num33 + num34 * num34));
							num8 = num2 / num8;
							num33 *= num8;
							num34 *= num8;
							float x = vector.X + num6 * (float)(num32 - n) * 1.75f;
							float y = vector.Y + num7 * (float)(num32 - n) * 1.75f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x, y, num33, num34, num, num3, num4, i, (float)Main.rand.Next(0, 10 * (n + 1)), 0f, 0f);
						}
						return;
					}
					if (sItem.type == 1931)
					{
						int num36 = 2;
						for (int num37 = 0; num37 < num36; num37++)
						{
							vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
							vector.X = (vector.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
							vector.Y -= (float)(100 * num37);
							num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
							num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
							if (this.gravDir == -1f)
							{
								num7 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
							}
							if (num7 < 0f)
							{
								num7 *= -1f;
							}
							if (num7 < 20f)
							{
								num7 = 20f;
							}
							num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
							num8 = num2 / num8;
							num6 *= num8;
							num7 *= num8;
							float speedX5 = num6 + (float)Main.rand.Next(-40, 41) * 0.02f;
							float speedY7 = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX5, speedY7, num, num3, num4, i, 0f, (float)Main.rand.Next(5), 0f);
						}
						return;
					}
					if (sItem.type == 2750)
					{
						int num38 = 1;
						for (int num39 = 0; num39 < num38; num39++)
						{
							vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
							vector.X = (vector.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
							vector.Y -= (float)(100 * num39);
							num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X + (float)Main.rand.Next(-40, 41) * 0.03f;
							num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
							if (this.gravDir == -1f)
							{
								num7 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
							}
							if (num7 < 0f)
							{
								num7 *= -1f;
							}
							if (num7 < 20f)
							{
								num7 = 20f;
							}
							num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
							num8 = num2 / num8;
							num6 *= num8;
							num7 *= num8;
							float num40 = num6;
							float num41 = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num40 * 0.75f, num41 * 0.75f, num + Main.rand.Next(3), num3, num4, i, 0f, 0.5f + (float)Main.rand.NextDouble() * 0.3f, 0f);
						}
						return;
					}
					if (sItem.type == 3570)
					{
						int num42 = 3;
						for (int num43 = 0; num43 < num42; num43++)
						{
							vector = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
							vector.X = (vector.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
							vector.Y -= (float)(100 * num43);
							num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
							num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
							float ai2 = num7 + vector.Y;
							if (num7 < 0f)
							{
								num7 *= -1f;
							}
							if (num7 < 20f)
							{
								num7 = 20f;
							}
							num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
							num8 = num2 / num8;
							num6 *= num8;
							num7 *= num8;
							Vector2 vector14 = new Vector2(num6, num7) / 2f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector14.X, vector14.Y, num, num3, num4, i, 0f, ai2, 0f);
						}
						return;
					}
					if (sItem.type == 5065)
					{
						Vector2 farthestSpawnPositionOnLine = this.GetFarthestSpawnPositionOnLine(vector, num6, num7);
						Vector2 zero = Vector2.Zero;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, farthestSpawnPositionOnLine, zero, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 3065)
					{
						Vector2 vector15 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
						float num44 = vector15.Y;
						if (num44 > base.Center.Y - 200f)
						{
							num44 = base.Center.Y - 200f;
						}
						for (int num45 = 0; num45 < 3; num45++)
						{
							vector = base.Center + new Vector2((float)(-(float)Main.rand.Next(0, 401) * this.direction), -600f);
							vector.Y -= (float)(100 * num45);
							Vector2 vector16 = vector15 - vector;
							if (vector16.Y < 0f)
							{
								vector16.Y *= -1f;
							}
							if (vector16.Y < 20f)
							{
								vector16.Y = 20f;
							}
							vector16.Normalize();
							vector16 *= num2;
							num6 = vector16.X;
							num7 = vector16.Y;
							float speedX6 = num6;
							float speedY8 = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX6, speedY8, num, num3, num4, i, 0f, num44, 0f);
						}
						return;
					}
					if (sItem.type == 2624)
					{
						float num46 = 0.31415927f;
						int num47 = 5;
						Vector2 vector17 = new Vector2(num6, num7);
						vector17.Normalize();
						vector17 *= 40f;
						bool flag5 = Collision.CanHit(vector, 0, 0, vector + vector17, 0, 0);
						for (int num48 = 0; num48 < num47; num48++)
						{
							float num49 = (float)num48 - ((float)num47 - 1f) / 2f;
							Vector2 vector18 = vector17.RotatedBy((double)(num46 * num49), default(Vector2));
							if (!flag5)
							{
								vector18 -= vector17;
							}
							int num50 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X + vector18.X, vector.Y + vector18.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
							Main.projectile[num50].noDropItem = true;
						}
						return;
					}
					if (sItem.type == 1929)
					{
						float speedX7 = num6 + (float)Main.rand.Next(-40, 41) * 0.03f;
						float speedY9 = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX7, speedY9, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 1553)
					{
						float speedX8 = num6 + (float)Main.rand.Next(-40, 41) * 0.005f;
						float speedY10 = num7 + (float)Main.rand.Next(-40, 41) * 0.005f;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, speedX8, speedY10, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 518)
					{
						float num51 = num6;
						float num52 = num7;
						num51 += (float)Main.rand.Next(-40, 41) * 0.04f;
						num52 += (float)Main.rand.Next(-40, 41) * 0.04f;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num51, num52, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 1265)
					{
						float num53 = num6;
						float num54 = num7;
						num53 += (float)Main.rand.Next(-30, 31) * 0.03f;
						num54 += (float)Main.rand.Next(-30, 31) * 0.03f;
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num53, num54, num, num3, num4, i, 0f, 0f, 0f);
						return;
					}
					if (sItem.type == 4262)
					{
						float num55 = 2.6666667f;
						Vector2 bottom = base.Bottom;
						int num56 = (int)base.Bottom.X / 16;
						float num57 = Math.Abs((float)Main.mouseX + Main.screenPosition.X - this.position.X) / 16f;
						if (this.direction < 0)
						{
							num57 += 1f;
						}
						int num58 = (int)num57;
						if (num58 > 15)
						{
							num58 = 15;
						}
						Point point = base.Center.ToTileCoordinates();
						int maxDistance = 31;
						for (int num59 = num58; num59 >= 0; num59--)
						{
							Point point2;
							if (Collision.CanHitLine(base.Center, 1, 1, base.Center + new Vector2((float)(16 * num59 * this.direction), 0f), 1, 1) && WorldUtils.Find(new Point(point.X + this.direction * num59, point.Y), Searches.Chain(new Searches.Down(maxDistance), new GenCondition[]
							{
								new Conditions.MysticSnake()
							}), out point2))
							{
								int num60 = point2.Y;
								while (Main.tile[point2.X, num60 - 1].active())
								{
									num60--;
									if (Main.tile[point2.X, num60 - 1] == null || num60 < 10 || point2.Y - num60 > 7)
									{
										num60 = -1;
										break;
									}
								}
								if (num60 >= 10)
								{
									point2.Y = num60;
									for (int num61 = 0; num61 < 1000; num61++)
									{
										Projectile projectile = Main.projectile[num61];
										if (projectile.active && projectile.owner == this.whoAmI && projectile.type == num)
										{
											if (projectile.ai[1] == 2f)
											{
												projectile.timeLeft = 4;
											}
											else
											{
												projectile.Kill();
											}
										}
									}
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, (float)(point2.X * 16 + 8), (float)(point2.Y * 16 + 8 - 16), 0f, -num55, num, num3, num4, i, (float)(point2.Y * 16 + 8 - 16), 0f, 0f);
									return;
								}
							}
						}
						return;
					}
					if (sItem.type == 4952)
					{
						Vector2 vector19 = Main.rand.NextVector2Circular(1f, 1f) + Main.rand.NextVector2CircularEdge(3f, 3f);
						if (vector19.Y > 0f)
						{
							vector19.Y *= -1f;
						}
						float num62 = (float)this.itemAnimation / (float)this.itemAnimationMax * 0.66f + this.miscCounterNormalized;
						vector = this.MountedCenter + new Vector2((float)(this.direction * 15), this.gravDir * 3f);
						Point point3 = vector.ToTileCoordinates();
						Tile tile = Main.tile[point3.X, point3.Y];
						if (tile != null && tile.nactive() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !TileID.Sets.Platforms[(int)tile.type])
						{
							vector = this.MountedCenter;
						}
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector19.X, vector19.Y, num, num3, num4, i, -1f, num62 % 1f, 0f);
						return;
					}
					if (sItem.type == 4953)
					{
						float num63 = 0.31415927f;
						int num64 = 5;
						Vector2 vector20 = new Vector2(num6, num7);
						vector20.Normalize();
						vector20 *= 40f;
						bool flag6 = Collision.CanHit(vector, 0, 0, vector + vector20, 0, 0);
						int num65 = (this.itemAnimationMax - this.itemAnimation) / 2;
						int num66 = num65;
						if (this.direction == 1)
						{
							num66 = 4 - num65;
						}
						float num67 = (float)num66 - ((float)num64 - 1f) / 2f;
						Vector2 vector21 = vector20.RotatedBy((double)(num63 * num67), default(Vector2));
						if (!flag6)
						{
							vector21 -= vector20;
						}
						Vector2 mouseWorld = Main.MouseWorld;
						Vector2 vector22 = vector + vector21;
						Vector2 vector23 = vector22.DirectionTo(mouseWorld).SafeNormalize(-Vector2.UnitY);
						Vector2 value5 = base.Center.DirectionTo(base.Center + new Vector2(num6, num7)).SafeNormalize(-Vector2.UnitY);
						float lerpValue = Utils.GetLerpValue(100f, 40f, mouseWorld.Distance(base.Center), true);
						if (lerpValue > 0f)
						{
							vector23 = Vector2.Lerp(vector23, value5, lerpValue).SafeNormalize(new Vector2(num6, num7).SafeNormalize(-Vector2.UnitY));
						}
						Vector2 vector24 = vector23 * num2;
						if (num65 == 2)
						{
							num = 932;
							num3 *= 2;
						}
						if (num == 932)
						{
							float ai3 = this.miscCounterNormalized * 12f % 1f;
							vector24 = vector24.SafeNormalize(Vector2.Zero) * (num2 * 2f);
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector22, vector24, num, num3, num4, i, 0f, ai3, 0f);
							return;
						}
						int num68 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector22, vector24, num, num3, num4, i, 0f, 0f, 0f);
						Main.projectile[num68].noDropItem = true;
						return;
					}
					else
					{
						if (sItem.type == 534)
						{
							int num69 = Main.rand.Next(4, 6);
							for (int num70 = 0; num70 < num69; num70++)
							{
								float num71 = num6;
								float num72 = num7;
								num71 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num72 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num71, num72, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 4703)
						{
							float num73 = 1.5707964f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
							for (int num74 = 0; num74 < 7; num74++)
							{
								Vector2 vector25 = new Vector2(num6, num7);
								float scaleFactor2 = vector25.Length();
								vector25 += vector25.SafeNormalize(Vector2.Zero).RotatedBy((double)(num73 * Main.rand.NextFloat()), default(Vector2)) * Main.rand.NextFloatDirection() * 5f;
								vector25 = vector25.SafeNormalize(Vector2.Zero) * scaleFactor2;
								float num75 = vector25.X;
								float num76 = vector25.Y;
								num75 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num76 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num75, num76, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 4270)
						{
							Vector2 mouseWorld2 = Main.MouseWorld;
							this.LimitPointToPlayerReachableArea(ref mouseWorld2);
							Vector2 vector26 = mouseWorld2 + Main.rand.NextVector2Circular(8f, 8f);
							Vector2 vector27 = this.FindSharpTearsSpot(vector26).ToWorldCoordinates((float)Main.rand.Next(17), (float)Main.rand.Next(17));
							Vector2 vector28 = (vector26 - vector27).SafeNormalize(-Vector2.UnitY) * 16f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector27.X, vector27.Y, vector28.X, vector28.Y, num, num3, num4, i, 0f, Main.rand.NextFloat() * 0.5f + 0.6f, 0f);
							return;
						}
						if (sItem.type == 4715)
						{
							Vector2 vector29 = Main.MouseWorld;
							List<NPC> list;
							bool sparkleGuitarTarget = this.GetSparkleGuitarTarget(out list);
							if (sparkleGuitarTarget)
							{
								NPC npc = list[Main.rand.Next(list.Count)];
								vector29 = npc.Center + npc.velocity * 20f;
							}
							Vector2 vector30 = vector29 - base.Center;
							if (!sparkleGuitarTarget)
							{
								vector29 += Main.rand.NextVector2Circular(24f, 24f);
								if (vector30.Length() > 700f)
								{
									vector30 *= 700f / vector30.Length();
									vector29 = base.Center + vector30;
								}
							}
							Vector2 vector31 = Main.rand.NextVector2CircularEdge(1f, 1f);
							if (vector31.Y > 0f)
							{
								vector31 *= -1f;
							}
							if (Math.Abs(vector31.Y) < 0.5f)
							{
								vector31.Y = -Main.rand.NextFloat() * 0.5f - 0.5f;
							}
							vector31 *= vector30.Length() * 2f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector31.X, vector31.Y, num, num3, num4, i, vector29.X, vector29.Y, 0f);
							return;
						}
						if (sItem.type == 4722)
						{
							Vector2 value6 = Main.MouseWorld;
							List<NPC> list2;
							bool sparkleGuitarTarget2 = this.GetSparkleGuitarTarget(out list2);
							if (sparkleGuitarTarget2)
							{
								NPC npc2 = list2[Main.rand.Next(list2.Count)];
								value6 = npc2.Center + npc2.velocity * 20f;
							}
							Vector2 vector32 = value6 - base.Center;
							Vector2 vector33 = Main.rand.NextVector2CircularEdge(1f, 1f);
							float num77 = 1f;
							int num78 = 1;
							for (int num79 = 0; num79 < num78; num79++)
							{
								if (!sparkleGuitarTarget2)
								{
									value6 += Main.rand.NextVector2Circular(24f, 24f);
									if (vector32.Length() > 700f)
									{
										vector32 *= 700f / vector32.Length();
										value6 = base.Center + vector32;
									}
									float num80 = Utils.GetLerpValue(0f, 6f, this.velocity.Length(), true) * 0.8f;
									vector33 *= 1f - num80;
									vector33 += this.velocity * num80;
									vector33 = vector33.SafeNormalize(Vector2.UnitX);
								}
								float num81 = 60f;
								float num82 = Main.rand.NextFloatDirection() * 3.1415927f * (1f / num81) * 0.5f * num77;
								float num83 = num81 / 2f;
								float scaleFactor3 = 12f + Main.rand.NextFloat() * 2f;
								Vector2 vector34 = vector33 * scaleFactor3;
								Vector2 vector35 = new Vector2(0f, 0f);
								Vector2 vector36 = vector34;
								int num84 = 0;
								while ((float)num84 < num83)
								{
									vector35 += vector36;
									vector36 = vector36.RotatedBy((double)num82, default(Vector2));
									num84++;
								}
								Vector2 value7 = -vector35;
								Vector2 position = value6 + value7;
								float lerpValue2 = Utils.GetLerpValue((float)this.itemAnimationMax, 0f, (float)this.itemAnimation, true);
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, position, vector34, num, num3, num4, i, num82, lerpValue2, 0f);
							}
							return;
						}
						if (sItem.type == 4607)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 5069)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 5114)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 2188)
						{
							int num85 = 4;
							if (Main.rand.Next(3) == 0)
							{
								num85++;
							}
							if (Main.rand.Next(4) == 0)
							{
								num85++;
							}
							if (Main.rand.Next(5) == 0)
							{
								num85++;
							}
							for (int num86 = 0; num86 < num85; num86++)
							{
								float num87 = num6;
								float num88 = num7;
								float num89 = 0.05f * (float)num86;
								num87 += (float)Main.rand.Next(-35, 36) * num89;
								num88 += (float)Main.rand.Next(-35, 36) * num89;
								num8 = (float)Math.Sqrt((double)(num87 * num87 + num88 * num88));
								num8 = num2 / num8;
								num87 *= num8;
								num88 *= num8;
								float x2 = vector.X;
								float y2 = vector.Y;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x2, y2, num87, num88, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1308)
						{
							int num90 = 3;
							if (Main.rand.Next(3) == 0)
							{
								num90++;
							}
							for (int num91 = 0; num91 < num90; num91++)
							{
								float num92 = num6;
								float num93 = num7;
								float num94 = 0.05f * (float)num91;
								num92 += (float)Main.rand.Next(-35, 36) * num94;
								num93 += (float)Main.rand.Next(-35, 36) * num94;
								num8 = (float)Math.Sqrt((double)(num92 * num92 + num93 * num93));
								num8 = num2 / num8;
								num92 *= num8;
								num93 *= num8;
								float x3 = vector.X;
								float y3 = vector.Y;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x3, y3, num92, num93, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1258)
						{
							float num95 = num6;
							float num96 = num7;
							num95 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num96 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector.X += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector.Y += (float)Main.rand.Next(-45, 36) * 0.05f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num95, num96, num, num3, num4, i, 0f, 0f, 0f);
							return;
						}
						if (sItem.type == 964)
						{
							int num97 = Main.rand.Next(3, 5);
							for (int num98 = 0; num98 < num97; num98++)
							{
								float num99 = num6;
								float num100 = num7;
								num99 += (float)Main.rand.Next(-35, 36) * 0.04f;
								num100 += (float)Main.rand.Next(-35, 36) * 0.04f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num99, num100, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1569)
						{
							int num101 = 4;
							if (Main.rand.Next(2) == 0)
							{
								num101++;
							}
							if (Main.rand.Next(4) == 0)
							{
								num101++;
							}
							if (Main.rand.Next(8) == 0)
							{
								num101++;
							}
							if (Main.rand.Next(16) == 0)
							{
								num101++;
							}
							for (int num102 = 0; num102 < num101; num102++)
							{
								float num103 = num6;
								float num104 = num7;
								float num105 = 0.05f * (float)num102;
								num103 += (float)Main.rand.Next(-35, 36) * num105;
								num104 += (float)Main.rand.Next(-35, 36) * num105;
								num8 = (float)Math.Sqrt((double)(num103 * num103 + num104 * num104));
								num8 = num2 / num8;
								num103 *= num8;
								num104 *= num8;
								float x4 = vector.X;
								float y4 = vector.Y;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x4, y4, num103, num104, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1572 || sItem.type == 2366 || sItem.type == 3571 || sItem.type == 3569 || sItem.type == 5119)
						{
							bool flag7 = sItem.type == 3571 || sItem.type == 3569;
							int num106 = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
							int num107 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
							if (this.gravDir == -1f)
							{
								num107 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
							}
							if (!flag7)
							{
								while (num107 < Main.maxTilesY - 10 && Main.tile[num106, num107] != null && !WorldGen.SolidTile2(num106, num107) && Main.tile[num106 - 1, num107] != null && !WorldGen.SolidTile2(num106 - 1, num107) && Main.tile[num106 + 1, num107] != null && !WorldGen.SolidTile2(num106 + 1, num107))
								{
									num107++;
								}
								num107--;
							}
							int num108 = 0;
							type = sItem.type;
							if (type != 1572)
							{
								if (type == 5119)
								{
									num108 = 90;
								}
							}
							else
							{
								num108 = 60;
							}
							int num109 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, (float)Main.mouseX + Main.screenPosition.X, (float)(num107 * 16 - 24), 0f, 15f, num, num3, num4, i, (float)num108, 0f, 0f);
							Main.projectile[num109].originalDamage = damage;
							this.UpdateMaxTurrets();
							return;
						}
						if (sItem.type == 1244 || sItem.type == 1256)
						{
							int num110 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
							Main.projectile[num110].ai[0] = (float)Main.mouseX + Main.screenPosition.X;
							Main.projectile[num110].ai[1] = (float)Main.mouseY + Main.screenPosition.Y;
							return;
						}
						if (sItem.type == 1229)
						{
							int num111 = 2;
							if (Main.rand.Next(3) == 0)
							{
								num111++;
							}
							for (int num112 = 0; num112 < num111; num112++)
							{
								float num113 = num6;
								float num114 = num7;
								if (num112 > 0)
								{
									num113 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num114 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								if (num112 > 1)
								{
									num113 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num114 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								if (num112 > 2)
								{
									num113 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num114 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								int num115 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num113, num114, num, num3, num4, i, 0f, 0f, 0f);
								Main.projectile[num115].noDropItem = true;
							}
							return;
						}
						if (sItem.type == 1121)
						{
							int num116 = Main.rand.Next(1, 4);
							if (Main.rand.Next(6) == 0)
							{
								num116++;
							}
							if (Main.rand.Next(6) == 0)
							{
								num116++;
							}
							if (this.strongBees && Main.rand.Next(3) == 0)
							{
								num116++;
							}
							for (int num117 = 0; num117 < num116; num117++)
							{
								float num118 = num6;
								float num119 = num7;
								num118 += (float)Main.rand.Next(-35, 36) * 0.02f;
								num119 += (float)Main.rand.Next(-35, 36) * 0.02f;
								int num120 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num118, num119, this.beeType(), this.beeDamage(num3), this.beeKB(num4), i, 0f, 0f, 0f);
								Main.projectile[num120].magic = true;
							}
							return;
						}
						if (sItem.type == 1155)
						{
							int num121 = Main.rand.Next(2, 5);
							for (int num122 = 0; num122 < num121; num122++)
							{
								float num123 = num6;
								float num124 = num7;
								num123 += (float)Main.rand.Next(-35, 36) * 0.02f;
								num124 += (float)Main.rand.Next(-35, 36) * 0.02f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num123, num124, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1801)
						{
							int num125 = Main.rand.Next(2, 4);
							for (int num126 = 0; num126 < num125; num126++)
							{
								float num127 = num6;
								float num128 = num7;
								num127 += (float)Main.rand.Next(-35, 36) * 0.05f;
								num128 += (float)Main.rand.Next(-35, 36) * 0.05f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num127, num128, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 679)
						{
							for (int num129 = 0; num129 < 6; num129++)
							{
								float num130 = num6;
								float num131 = num7;
								num130 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num131 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num130, num131, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 1156)
						{
							for (int num132 = 0; num132 < 3; num132++)
							{
								float num133 = num6;
								float num134 = num7;
								num133 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num134 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num133, num134, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 4682)
						{
							for (int num135 = 0; num135 < 3; num135++)
							{
								float num136 = num6;
								float num137 = num7;
								num136 += (float)Main.rand.Next(-20, 21) * 0.1f;
								num137 += (float)Main.rand.Next(-20, 21) * 0.1f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num136, num137, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 2623)
						{
							for (int num138 = 0; num138 < 3; num138++)
							{
								float num139 = num6;
								float num140 = num7;
								num139 += (float)Main.rand.Next(-40, 41) * 0.1f;
								num140 += (float)Main.rand.Next(-40, 41) * 0.1f;
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num139, num140, num, num3, num4, i, 0f, 0f, 0f);
							}
							return;
						}
						if (sItem.type == 3210)
						{
							Vector2 vector37 = new Vector2(num6, num7);
							vector37.X += (float)Main.rand.Next(-30, 31) * 0.04f;
							vector37.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
							vector37.Normalize();
							vector37 *= (float)Main.rand.Next(70, 91) * 0.1f;
							vector37.X += (float)Main.rand.Next(-30, 31) * 0.04f;
							vector37.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector37.X, vector37.Y, num, num3, num4, i, (float)Main.rand.Next(20), 0f, 0f);
							return;
						}
						if (sItem.type == 434)
						{
							float num141 = num6;
							float num142 = num7;
							if (this.itemAnimation < 5)
							{
								num141 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num142 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num141 *= 1.1f;
								num142 *= 1.1f;
							}
							else if (this.itemAnimation < 10)
							{
								num141 += (float)Main.rand.Next(-20, 21) * 0.01f;
								num142 += (float)Main.rand.Next(-20, 21) * 0.01f;
								num141 *= 1.05f;
								num142 *= 1.05f;
							}
							Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num141, num142, num, num3, num4, i, 0f, 0f, 0f);
							return;
						}
						if (sItem.type == 1157)
						{
							num = Main.rand.Next(191, 195);
							int num143 = this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							Main.projectile[num143].localAI[0] = 30f;
							return;
						}
						if (sItem.type == 1802)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 2364 || sItem.type == 2365)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 2535)
						{
							num6 = 0f;
							num7 = 0f;
							Vector2 vector38 = new Vector2(num6, num7);
							vector38 = vector38.RotatedBy(1.5707963705062866, default(Vector2));
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, vector38, vector38);
							vector38 = vector38.RotatedBy(-3.1415927410125732, default(Vector2));
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num + 1, damage, num4, vector38, vector38);
							return;
						}
						if (sItem.type == 2551)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num + this.nextCycledSpiderMinionType, damage, num4, default(Vector2), default(Vector2));
							this.nextCycledSpiderMinionType++;
							this.nextCycledSpiderMinionType %= 3;
							return;
						}
						if (sItem.type == 2584)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num + Main.rand.Next(3), damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 2621)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 2749 || sItem.type == 3249 || sItem.type == 3474 || sItem.type == 4273 || sItem.type == 4281)
						{
							this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
							return;
						}
						if (sItem.type == 3531)
						{
							int num144 = -1;
							int num145 = -1;
							for (int num146 = 0; num146 < 1000; num146++)
							{
								if (Main.projectile[num146].active && Main.projectile[num146].owner == Main.myPlayer)
								{
									if (num144 == -1 && Main.projectile[num146].type == 625)
									{
										num144 = num146;
									}
									if (num145 == -1 && Main.projectile[num146].type == 628)
									{
										num145 = num146;
									}
									if (num144 != -1 && num145 != -1)
									{
										break;
									}
								}
							}
							if (num144 == -1 && num145 == -1)
							{
								num6 = 0f;
								num7 = 0f;
								vector.X = (float)Main.mouseX + Main.screenPosition.X;
								vector.Y = (float)Main.mouseY + Main.screenPosition.Y;
								int num147 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
								int num148 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num + 1, num3, num4, i, (float)num147, 0f, 0f);
								int num149 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num + 2, num3, num4, i, (float)num148, 0f, 0f);
								int num150 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num + 3, num3, num4, i, (float)num149, 0f, 0f);
								Main.projectile[num148].localAI[1] = (float)num149;
								Main.projectile[num149].localAI[1] = (float)num150;
								Main.projectile[num147].originalDamage = damage;
								Main.projectile[num148].originalDamage = damage;
								Main.projectile[num149].originalDamage = damage;
								Main.projectile[num150].originalDamage = damage;
								return;
							}
							if (num144 != -1 && num145 != -1)
							{
								int num151 = (int)Main.projectile[num145].ai[0];
								int num152 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num + 1, num3, num4, i, (float)num151, 0f, 0f);
								int num153 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num + 2, num3, num4, i, (float)num152, 0f, 0f);
								Main.projectile[num152].localAI[1] = (float)num153;
								Main.projectile[num152].netUpdate = true;
								Main.projectile[num152].ai[1] = 1f;
								Main.projectile[num153].localAI[1] = (float)num145;
								Main.projectile[num153].netUpdate = true;
								Main.projectile[num153].ai[1] = 1f;
								Main.projectile[num145].ai[0] = (float)num153;
								Main.projectile[num145].netUpdate = true;
								Main.projectile[num145].ai[1] = 1f;
								Main.projectile[num152].originalDamage = damage;
								Main.projectile[num153].originalDamage = damage;
								Main.projectile[num145].originalDamage = damage;
								return;
							}
						}
						else
						{
							if (sItem.type == 1309 || sItem.type == 4758 || sItem.type == 4269 || sItem.type == 5005)
							{
								this.SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, num, damage, num4, default(Vector2), default(Vector2));
								return;
							}
							if (sItem.shoot > 0 && (Main.projPet[sItem.shoot] || sItem.shoot == 72 || sItem.shoot == 18 || sItem.shoot == 500 || sItem.shoot == 650) && !sItem.summon)
							{
								for (int num154 = 0; num154 < 1000; num154++)
								{
									Projectile projectile2 = Main.projectile[num154];
									if (projectile2.active && projectile2.owner == this.whoAmI)
									{
										if (sItem.shoot == 72 && (projectile2.type == 72 || projectile2.type == 86 || projectile2.type == 87))
										{
											projectile2.Kill();
										}
										else if (sItem.type == 5131 && (projectile2.type == 881 || projectile2.type == 934))
										{
											projectile2.Kill();
										}
										else if (sItem.shoot == projectile2.type)
										{
											projectile2.Kill();
										}
									}
								}
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, 0, 0f, i, 0f, 0f, 0f);
								return;
							}
							if (sItem.type == 3006)
							{
								vector = this.GetFarthestSpawnPositionOnLine(vector, num6, num7);
								Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, 0f, 0f, num, num3, num4, i, 0f, 0f, 0f);
								return;
							}
							if (sItem.type == 3014)
							{
								Vector2 vector39;
								vector39.X = Main.MouseWorld.X;
								vector39.Y = Main.MouseWorld.Y;
								this.LimitPointToPlayerReachableArea(ref vector39);
								while (Collision.CanHitLine(this.position, this.width, this.height, vector, 1, 1))
								{
									vector.X += num6;
									vector.Y += num7;
									if ((vector - vector39).Length() < 20f + Math.Abs(num6) + Math.Abs(num7))
									{
										vector = vector39;
										break;
									}
								}
								bool flag8 = false;
								int num155 = (int)vector.Y / 16;
								int num156 = (int)vector.X / 16;
								int num157 = num155;
								while (num155 < Main.maxTilesY - 10 && num155 - num157 < 30 && !WorldGen.SolidTile(num156, num155, false) && !TileID.Sets.Platforms[(int)Main.tile[num156, num155].type])
								{
									num155++;
								}
								if (!WorldGen.SolidTile(num156, num155, false) && !TileID.Sets.Platforms[(int)Main.tile[num156, num155].type])
								{
									flag8 = true;
								}
								float num158 = (float)(num155 * 16);
								num155 = num157;
								while (num155 > 10 && num157 - num155 < 30 && !WorldGen.SolidTile(num156, num155, false))
								{
									num155--;
								}
								float num159 = (float)(num155 * 16 + 16);
								float num160 = num158 - num159;
								int num161 = 15;
								if (num160 > (float)(16 * num161))
								{
									num160 = (float)(16 * num161);
								}
								num159 = num158 - num160;
								vector.X = (float)((int)(vector.X / 16f) * 16);
								if (!flag8)
								{
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, 0f, 0f, num, num3, num4, i, num159, num160, 0f);
									return;
								}
							}
							else
							{
								if (sItem.type == 3384)
								{
									int num162 = (this.altFunctionUse == 2) ? 1 : 0;
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, (float)num162, 0f);
									return;
								}
								if (sItem.type == 3473)
								{
									float ai4 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f;
									Vector2 vector40 = new Vector2(num6, num7);
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector40.X, vector40.Y, num, num3, num4, i, 0f, ai4, 0f);
									return;
								}
								if (sItem.type == 4956)
								{
									int num163 = (this.itemAnimationMax - this.itemAnimation) / this.itemTime;
									Vector2 velocity = new Vector2(num6, num7);
									int num164 = FinalFractalHelper.GetRandomProfileIndex();
									if (num163 == 0)
									{
										num164 = 4956;
									}
									Vector2 mouseWorld3 = Main.MouseWorld;
									this.LimitPointToPlayerReachableArea(ref mouseWorld3);
									Vector2 value8 = mouseWorld3 - this.MountedCenter;
									if (num163 == 1 || num163 == 2)
									{
										int num165;
										bool zenithTarget = this.GetZenithTarget(mouseWorld3, 400f, out num165);
										if (zenithTarget)
										{
											value8 = Main.npc[num165].Center - this.MountedCenter;
										}
										bool flag9 = num163 == 2;
										if (num163 == 1 && !zenithTarget)
										{
											flag9 = true;
										}
										if (flag9)
										{
											value8 += Main.rand.NextVector2Circular(150f, 150f);
										}
									}
									velocity = value8 / 2f;
									float ai5 = (float)Main.rand.Next(-100, 101);
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, velocity, num, num3, num4, i, ai5, (float)num164, 0f);
									return;
								}
								if (sItem.type == 3836)
								{
									float ai6 = Main.rand.NextFloat() * num2 * 0.75f * (float)this.direction;
									Vector2 velocity2 = new Vector2(num6, num7);
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, velocity2, num, num3, num4, i, ai6, 0f, 0f);
									return;
								}
								if (sItem.type == 3858)
								{
									bool flag10 = this.altFunctionUse == 2;
									Vector2 vector41 = new Vector2(num6, num7);
									if (flag10)
									{
										vector41 *= 1.5f;
										float ai7 = (0.3f + 0.7f * Main.rand.NextFloat()) * num2 * 1.75f * (float)this.direction;
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, vector41, 708, (int)((float)num3 * 0.5f), num4 + 4f, i, ai7, 0f, 0f);
										return;
									}
									Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, vector41, num, num3, num4, i, 0f, 0f, 0f);
									return;
								}
								else
								{
									if (sItem.type == 3859)
									{
										Vector2 vector42 = new Vector2(num6, num7);
										num = 710;
										vector42 *= 0.8f;
										Vector2 value9 = vector42.SafeNormalize(-Vector2.UnitY);
										float num166 = 0.017453292f * (float)(-(float)this.direction);
										for (float num167 = -2.5f; num167 < 3f; num167 += 1f)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, (vector42 + value9 * num167 * 0.5f).RotatedBy((double)(num167 * num166), default(Vector2)), num, num3, num4, i, 0f, 0f, 0f);
										}
										return;
									}
									if (sItem.type == 3870)
									{
										Vector2 value10 = Vector2.Normalize(new Vector2(num6, num7)) * 40f * sItem.scale;
										if (Collision.CanHit(vector, 0, 0, vector + value10, 0, 0))
										{
											vector += value10;
										}
										Vector2 vector43 = new Vector2(num6, num7);
										vector43 *= 0.8f;
										Vector2 value11 = vector43.SafeNormalize(-Vector2.UnitY);
										float num168 = 0.017453292f * (float)(-(float)this.direction);
										for (int num169 = 0; num169 <= 2; num169++)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, (vector43 + value11 * (float)num169 * 1f).RotatedBy((double)((float)num169 * num168), default(Vector2)), num, num3, num4, i, 0f, 0f, 0f);
										}
										return;
									}
									if (sItem.type == 3542)
									{
										float num170 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f * 0.7f;
										int num171 = 0;
										while (num171 < 10 && !Collision.CanHit(vector, 0, 0, vector + new Vector2(num6, num7).RotatedBy((double)num170, default(Vector2)) * 100f, 0, 0))
										{
											num170 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f * 0.7f;
											num171++;
										}
										Vector2 vector44 = new Vector2(num6, num7).RotatedBy((double)num170, default(Vector2)) * (0.95f + Main.rand.NextFloat() * 0.3f);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, vector44.X, vector44.Y, num, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 3779)
									{
										float num172 = Main.rand.NextFloat() * 6.2831855f;
										int num173 = 0;
										while (num173 < 10 && !Collision.CanHit(vector, 0, 0, vector + new Vector2(num6, num7).RotatedBy((double)num172, default(Vector2)) * 100f, 0, 0))
										{
											num172 = Main.rand.NextFloat() * 6.2831855f;
											num173++;
										}
										Vector2 value12 = new Vector2(num6, num7).RotatedBy((double)num172, default(Vector2)) * (0.95f + Main.rand.NextFloat() * 0.3f);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector + value12 * 30f, Vector2.Zero, num, num3, num4, i, -2f, 0f, 0f);
										return;
									}
									if (sItem.type == 3787)
									{
										float f = Main.rand.NextFloat() * 6.2831855f;
										float value13 = 20f;
										float value14 = 60f;
										Vector2 vector45 = vector + f.ToRotationVector2() * MathHelper.Lerp(value13, value14, Main.rand.NextFloat());
										for (int num174 = 0; num174 < 50; num174++)
										{
											vector45 = vector + f.ToRotationVector2() * MathHelper.Lerp(value13, value14, Main.rand.NextFloat());
											if (Collision.CanHit(vector, 0, 0, vector45 + (vector45 - vector).SafeNormalize(Vector2.UnitX) * 8f, 0, 0))
											{
												break;
											}
											f = Main.rand.NextFloat() * 6.2831855f;
										}
										Vector2 vector46 = Main.MouseWorld - vector45;
										Vector2 vector47 = new Vector2(num6, num7).SafeNormalize(Vector2.UnitY) * num2;
										vector46 = vector46.SafeNormalize(vector47) * num2;
										vector46 = Vector2.Lerp(vector46, vector47, 0.25f);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector45, vector46, num, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 3788)
									{
										Vector2 vector48 = new Vector2(num6, num7);
										float num175 = 0.7853982f;
										for (int num176 = 0; num176 < 2; num176++)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, vector48 + vector48.SafeNormalize(Vector2.Zero).RotatedBy((double)(num175 * (Main.rand.NextFloat() * 0.5f + 0.5f)), default(Vector2)) * Main.rand.NextFloatDirection() * 2f, num, num3, num4, i, 0f, 0f, 0f);
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, vector48 + vector48.SafeNormalize(Vector2.Zero).RotatedBy((double)(-(double)num175 * (Main.rand.NextFloat() * 0.5f + 0.5f)), default(Vector2)) * Main.rand.NextFloatDirection() * 2f, num, num3, num4, i, 0f, 0f, 0f);
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, vector48.SafeNormalize(Vector2.UnitX * (float)this.direction) * (num2 * 1.3f), 661, num3 * 2, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 4463 || sItem.type == 486)
									{
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, new Vector2(num6, num7), num, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 46)
									{
										Vector2 value15 = new Vector2((float)this.direction, this.gravDir * 4f).SafeNormalize(Vector2.UnitY).RotatedBy((double)(6.2831855f * Main.rand.NextFloatDirection() * 0.05f), default(Vector2));
										Vector2 vector49 = this.MountedCenter + new Vector2(70f, -40f) * this.Directions + value15 * -10f;
										int num177;
										if (this.GetZenithTarget(vector49, 50f, out num177))
										{
											NPC npc3 = Main.npc[num177];
											vector49 = npc3.Center + Main.rand.NextVector2Circular((float)(npc3.width / 2), (float)(npc3.height / 2));
										}
										else
										{
											vector49 += Main.rand.NextVector2Circular(20f, 20f);
										}
										float ai8 = 1f;
										if (Main.rand.Next(100) < this.meleeCrit)
										{
											ai8 = 2f;
											num3 *= 2;
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector49, value15 * 0.001f, num, (int)((double)num3 * 0.5), num4, i, ai8, 0f, 0f);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 273)
									{
										float adjustedItemScale = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), num, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2(num6, num7), num, num3, num4, i, (float)this.direction * this.gravDir * 0.1f, 30f, adjustedItemScale);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 368)
									{
										float adjustedItemScale2 = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), num, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale2);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 1826)
									{
										float adjustedItemScale3 = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), num, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale3);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 675)
									{
										float adjustedItemScale4 = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), 972, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale4);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2(num6, num7), num, num3 / 2, num4, i, (float)this.direction * this.gravDir, 32f, adjustedItemScale4);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 674)
									{
										float adjustedItemScale5 = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), num, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale5);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), 982, 0, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale5);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 757)
									{
										float adjustedItemScale6 = this.GetAdjustedItemScale(sItem);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2((float)this.direction, 0f), 984, num3, num4, i, (float)this.direction * this.gravDir, (float)this.itemAnimationMax, adjustedItemScale6);
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, this.MountedCenter, new Vector2(num6, num7) * 5f, num, num3, num4, i, (float)this.direction * this.gravDir, 18f, adjustedItemScale6);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 190)
									{
										Vector2 vector50 = this.MountedCenter + new Vector2(70f, -40f) * this.Directions;
										int num178;
										bool zenithTarget2 = this.GetZenithTarget(vector50, 150f, out num178);
										if (zenithTarget2)
										{
											NPC npc4 = Main.npc[num178];
											vector50 = Main.rand.NextVector2FromRectangle(npc4.Hitbox);
										}
										else
										{
											vector50 += Main.rand.NextVector2Circular(20f, 20f);
										}
										Vector2 vector51 = base.Center + new Vector2(Main.rand.NextFloatDirection() * (float)this.width / 2f, (float)(this.height / 2)) * this.Directions;
										Vector2 v3 = vector50 - vector51;
										float num179 = (3.1415927f + 6.2831855f * Main.rand.NextFloat() * 1.5f) * ((float)(-(float)this.direction) * this.gravDir);
										int num180 = 60;
										float num181 = num179 / (float)num180;
										float scaleFactor4 = 16f;
										float num182 = v3.Length();
										if (Math.Abs(num181) >= 0.17f)
										{
											num181 *= 0.7f;
										}
										int direction = this.direction;
										float num183 = this.gravDir;
										Vector2 vector52 = Vector2.UnitX * scaleFactor4;
										Vector2 vector53 = vector52;
										int num184 = 0;
										while (vector53.Length() < num182 && num184 < num180)
										{
											num184++;
											vector53 += vector52;
											vector52 = vector52.RotatedBy((double)num181, default(Vector2));
										}
										float num185 = vector53.ToRotation();
										Vector2 vector54 = v3.SafeNormalize(Vector2.UnitY).RotatedBy((double)(-(double)num185 - num181), default(Vector2)) * scaleFactor4;
										if (num184 == num180)
										{
											vector54 = new Vector2((float)this.direction, 0f) * scaleFactor4;
										}
										if (!zenithTarget2)
										{
											vector51.Y -= this.gravDir * 24f;
											vector54 = vector54.RotatedBy((double)((float)this.direction * this.gravDir * 6.2831855f * 0.14f), default(Vector2));
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector51, vector54, num, (int)((double)num3 * 0.25), num4, i, num181, (float)num184, 0f);
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
										return;
									}
									if (sItem.type == 3475)
									{
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, 615, num3, num4, i, (float)(5 * Main.rand.Next(0, 20)), 0f, 0f);
										return;
									}
									if (sItem.type == 3930)
									{
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, 714, num3, num4, i, (float)(5 * Main.rand.Next(0, 20)), 0f, 0f);
										return;
									}
									if (sItem.type == 3540)
									{
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, 630, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 5451)
									{
										for (int num186 = 0; num186 < 1000; num186++)
										{
											Projectile projectile3 = Main.projectile[num186];
											if (projectile3.type == num && projectile3.owner == this.whoAmI)
											{
												projectile3.Kill();
											}
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 3854)
									{
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, 705, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									if (sItem.type == 3546)
									{
										for (int num187 = 0; num187 < 2; num187++)
										{
											float num188 = num6;
											float num189 = num7;
											num188 += (float)Main.rand.Next(-40, 41) * 0.05f;
											num189 += (float)Main.rand.Next(-40, 41) * 0.05f;
											Vector2 vector55 = vector + Vector2.Normalize(new Vector2(num188, num189).RotatedBy((double)(-1.5707964f * (float)this.direction), default(Vector2))) * 6f;
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector55.X, vector55.Y, num188, num189, 167 + Main.rand.Next(4), num3, num4, i, 0f, 1f, 0f);
										}
										return;
									}
									if (sItem.type == 3350)
									{
										float num190 = num6;
										float num191 = num7;
										num190 += (float)Main.rand.Next(-1, 2) * 0.5f;
										num191 += (float)Main.rand.Next(-1, 2) * 0.5f;
										if (Collision.CanHitLine(base.Center, 0, 0, vector + new Vector2(num190, num191) * 2f, 0, 0))
										{
											vector += new Vector2(num190, num191);
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y - this.gravDir * 4f, num190, num191, num, num3, num4, i, 0f, (float)Main.rand.Next(12) / 6f, 0f);
										return;
									}
									if (sItem.type == 3852)
									{
										if (this.altFunctionUse == 2)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, base.Bottom.Y - 100f, (float)this.direction * num2, 0f, 704, (int)((float)num3 * 1.75f), num4, i, 0f, 0f, 0f);
											return;
										}
										Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
										return;
									}
									else
									{
										if (sItem.type == 3818 || sItem.type == 3819 || sItem.type == 3820 || sItem.type == 3824 || sItem.type == 3825 || sItem.type == 3826 || sItem.type == 3829 || sItem.type == 3830 || sItem.type == 3831 || sItem.type == 3832 || sItem.type == 3833 || sItem.type == 3834)
										{
											this.PayDD2CrystalsBeforeUse(sItem);
											int num192;
											int num193;
											int num194;
											this.FindSentryRestingSpot(sItem.shoot, out num192, out num193, out num194);
											int num195 = 0;
											int num196 = 0;
											int num197 = 0;
											switch (sItem.type)
											{
											case 3818:
												num195 = 1;
												num196 = 80;
												break;
											case 3819:
												num195 = 1;
												num196 = 70;
												break;
											case 3820:
												num195 = 1;
												num196 = 60;
												break;
											case 3824:
											case 3825:
											case 3826:
												num195 = 1;
												num196 = Projectile.GetBallistraShotDelay(this);
												break;
											case 3832:
											case 3833:
											case 3834:
												num197 = Projectile.GetExplosiveTrapCooldown(this);
												break;
											}
											int num198 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, (float)num192, (float)(num193 - num194), 0f, 0f, num, num3, num4, i, (float)num195, (float)num196, 0f);
											Main.projectile[num198].originalDamage = damage;
											Main.projectile[num198].localAI[0] = (float)num197;
											this.UpdateMaxTurrets();
											return;
										}
										if (sItem.type == 65)
										{
											Vector2 velocity3 = new Vector2(num6, num7);
											new Vector2(100f, 0f);
											Vector2 mouseWorld4 = Main.MouseWorld;
											Vector2 vector56 = mouseWorld4;
											Vector2 value16 = (vector - mouseWorld4).SafeNormalize(new Vector2(0f, -1f));
											while (vector56.Y > vector.Y && WorldGen.SolidTile(vector56.ToTileCoordinates()))
											{
												vector56 += value16 * 16f;
											}
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector, velocity3, num, num3, num4, i, 0f, vector56.Y, 0f);
											return;
										}
										if (sItem.type == 4923)
										{
											float adjustedItemScale7 = this.GetAdjustedItemScale(sItem);
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, adjustedItemScale7, 0f);
											return;
										}
										if (sItem.type == 1910)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 1f, 0f, 0f);
											return;
										}
										if (sItem.type == 5134)
										{
											Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 1f, 0f);
											return;
										}
										int num199 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector.X, vector.Y, num6, num7, num, num3, num4, i, 0f, 0f, 0f);
										if (sItem.type == 726)
										{
											Main.projectile[num199].magic = true;
										}
										if (sItem.type == 724 || sItem.type == 676)
										{
											Main.projectile[num199].melee = true;
										}
										if (num == 80)
										{
											Main.projectile[num199].ai[0] = (float)Player.tileTargetX;
											Main.projectile[num199].ai[1] = (float)Player.tileTargetY;
										}
										if (sItem.type == 760)
										{
											this.DestroyOldestProximityMinesOverMinesCap(20);
										}
										if (num == 442)
										{
											Main.projectile[num199].ai[0] = (float)Player.tileTargetX;
											Main.projectile[num199].ai[1] = (float)Player.tileTargetY;
										}
										if (num == 826)
										{
											Main.projectile[num199].ai[1] = (float)Main.rand.Next(3);
										}
										if (sItem.type == 949)
										{
											Main.projectile[num199].ai[1] = 1f;
										}
										if (Main.projectile[num199].aiStyle == 99)
										{
											AchievementsHelper.HandleSpecialEvent(this, 7);
										}
										if (Main.projectile[num199].aiStyle == 160 && Main.IsItAHappyWindyDay)
										{
											AchievementsHelper.HandleSpecialEvent(this, 17);
										}
										NetMessage.SendData(13, -1, -1, null, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x060008FB RID: 2299 RVA: 0x00325144 File Offset: 0x00323344
		public Vector2 GetFarthestSpawnPositionOnLine(Vector2 startPos, float speedX, float speedY)
		{
			Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
			this.LimitPointToPlayerReachableArea(ref vector);
			int num = 0;
			float num2 = new Vector2(speedX, speedY).Length();
			float num3 = (vector - startPos).Length();
			Vector2 center = base.Center;
			center.X += (float)(this.direction * 16);
			while (Collision.CanHitLine(center, 0, 0, startPos, 0, 0))
			{
				num++;
				startPos.X += speedX;
				startPos.Y += speedY;
				if ((startPos - vector).Length() < 20f + Math.Abs(speedX) + Math.Abs(speedY))
				{
					startPos = vector;
					break;
				}
				if (num2 * (float)num >= num3)
				{
					startPos = vector;
					break;
				}
			}
			return startPos;
		}

		// Token: 0x060008FC RID: 2300 RVA: 0x00325218 File Offset: 0x00323418
		public int SpawnMinionOnCursor(IEntitySource projectileSource, int ownerIndex, int minionProjectileId, int originalDamageNotScaledByMinionDamage, float KnockBack, Vector2 offsetFromCursor = default(Vector2), Vector2 velocityOnSpawn = default(Vector2))
		{
			Vector2 vector = Main.MouseWorld;
			vector += offsetFromCursor;
			this.LimitPointToPlayerReachableArea(ref vector);
			float ai = 0f;
			EntitySource_ItemUse entitySource_ItemUse = projectileSource as EntitySource_ItemUse;
			if (entitySource_ItemUse != null)
			{
				int type = entitySource_ItemUse.Item.type;
				if (type <= 2535)
				{
					if (type == 1157)
					{
						ai = 60f;
						goto IL_87;
					}
					if (type - 2364 > 1 && type != 2535)
					{
						goto IL_87;
					}
				}
				else if (type != 2621 && type != 2749 && type != 3474)
				{
					goto IL_87;
				}
				ai = 1f;
			}
			IL_87:
			int num = Projectile.NewProjectile(projectileSource, vector, velocityOnSpawn, minionProjectileId, originalDamageNotScaledByMinionDamage, KnockBack, ownerIndex, 0f, ai, 0f);
			Main.projectile[num].originalDamage = originalDamageNotScaledByMinionDamage;
			return num;
		}

		// Token: 0x060008FD RID: 2301 RVA: 0x003252D8 File Offset: 0x003234D8
		private Point FindSharpTearsSpot(Vector2 targetSpot)
		{
			Point point = targetSpot.ToTileCoordinates();
			Vector2 center = base.Center;
			Vector2 endPoint = targetSpot;
			int samplesToTake = 3;
			float samplingWidth = 4f;
			Vector2 v;
			float[] array;
			Collision.AimingLaserScan(center, endPoint, samplingWidth, samplesToTake, out v, out array);
			float num = float.PositiveInfinity;
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] < num)
				{
					num = array[i];
				}
			}
			targetSpot = center + v.SafeNormalize(Vector2.Zero) * num;
			point = targetSpot.ToTileCoordinates();
			Rectangle value = new Rectangle(point.X, point.Y, 1, 1);
			value.Inflate(6, 16);
			Rectangle value2 = new Rectangle(0, 0, Main.maxTilesX, Main.maxTilesY);
			value2.Inflate(-40, -40);
			value = Rectangle.Intersect(value, value2);
			List<Point> list = new List<Point>();
			List<Point> list2 = new List<Point>();
			for (int j = value.Left; j <= value.Right; j++)
			{
				for (int k = value.Top; k <= value.Bottom; k++)
				{
					if (WorldGen.SolidTile2(j, k))
					{
						Vector2 value3 = new Vector2((float)(j * 16 + 8), (float)(k * 16 + 8));
						if (Vector2.Distance(targetSpot, value3) <= 200f)
						{
							if (this.FindSharpTearsOpening(j, k, j > point.X, j < point.X, k > point.Y, k < point.Y))
							{
								list.Add(new Point(j, k));
							}
							else
							{
								list2.Add(new Point(j, k));
							}
						}
					}
				}
			}
			if (list.Count == 0 && list2.Count == 0)
			{
				list.Add((base.Center.ToTileCoordinates().ToVector2() + Main.rand.NextVector2Square(-2f, 2f)).ToPoint());
			}
			List<Point> list3 = list;
			if (list3.Count == 0)
			{
				list3 = list2;
			}
			int index = Main.rand.Next(list3.Count);
			return list3[index];
		}

		// Token: 0x060008FE RID: 2302 RVA: 0x003254F0 File Offset: 0x003236F0
		private bool FindSharpTearsOpening(int x, int y, bool acceptLeft, bool acceptRight, bool acceptUp, bool acceptDown)
		{
			return (acceptLeft && !WorldGen.SolidTile(x - 1, y, false)) || (acceptRight && !WorldGen.SolidTile(x + 1, y, false)) || (acceptUp && !WorldGen.SolidTile(x, y - 1, false)) || (acceptDown && !WorldGen.SolidTile(x, y + 1, false));
		}

		// Token: 0x060008FF RID: 2303 RVA: 0x00325548 File Offset: 0x00323748
		public bool TryPlacingAGolfBallNearANearbyTee(Vector2 placePosition)
		{
			int num = 0;
			int num2 = (int)(placePosition.X / 16f) - Player.tileRangeX - num + 1;
			int num3 = (int)(placePosition.X / 16f) + Player.tileRangeX + num - 1;
			int num4 = (int)(placePosition.Y / 16f) - Player.tileRangeY - num + 1;
			int num5 = (int)(placePosition.Y / 16f) + Player.tileRangeY + num - 2;
			num2 = Utils.Clamp<int>(num2, 10, Main.maxTilesX - 10);
			num3 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
			num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
			Vector2 value = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
			if (this.gravDir == -1f)
			{
				value.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
			}
			Point point = placePosition.ToTileCoordinates();
			List<Tuple<int, int>> list = new List<Tuple<int, int>>();
			for (int i = -2; i <= 2; i++)
			{
				for (int j = -2; j <= 2; j++)
				{
					int num6 = point.X + i;
					int num7 = point.Y + j;
					if (WorldGen.InWorld(num6, num7, 1))
					{
						Tile tileSafely = Framing.GetTileSafely(num6, num7);
						if (tileSafely.active() && tileSafely.type == 494)
						{
							list.Add(new Tuple<int, int>(num6, num7));
							break;
						}
					}
				}
			}
			bool result = false;
			if (list.Count > 0)
			{
				float num8 = -1f;
				Tuple<int, int> tuple = list[0];
				for (int k = 0; k < list.Count; k++)
				{
					float num9 = Vector2.Distance(new Vector2((float)list[k].Item1, (float)list[k].Item2) * 16f + Vector2.One * 8f, value);
					if (num8 == -1f || num9 < num8)
					{
						num8 = num9;
						tuple = list[k];
					}
				}
				if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num2, num4, num3, num5))
				{
					result = true;
					for (int l = 0; l < 1000; l++)
					{
						if (ProjectileID.Sets.IsAGolfBall[Main.projectile[l].type] && Main.projectile[l].owner == this.whoAmI)
						{
							Main.projectile[l].Kill();
						}
					}
					int type;
					this.GetPreferredGolfBallToUse(out type);
					Projectile.NewProjectile(this.GetProjectileSource_TileInteraction(tuple.Item1, tuple.Item2), (float)(tuple.Item1 * 16) + 8.5f, (float)(tuple.Item2 * 16 + 6), 0f, 0f, type, 0, 0f, this.whoAmI, 0f, -1f, 0f);
				}
			}
			return result;
		}

		// Token: 0x06000900 RID: 2304 RVA: 0x00325844 File Offset: 0x00323A44
		public void GetPreferredGolfBallToUse(out int projType)
		{
			projType = 721;
			Item item = this.inventory[this.selectedItem];
			if (!item.IsAir && item.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item.shoot])
			{
				projType = item.shoot;
				return;
			}
			for (int i = 19; i >= 0; i--)
			{
				if (this.IsItemSlotUnlockedAndUsable(i))
				{
					int num = i % 10;
					Item item2 = this.armor[i];
					if (!item2.IsAir && item2.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item2.shoot])
					{
						projType = item2.shoot;
						return;
					}
				}
			}
			for (int j = 0; j < 50; j++)
			{
				Item item3 = this.inventory[j];
				if (!item3.IsAir && item3.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item3.shoot])
				{
					projType = item3.shoot;
					return;
				}
			}
		}

		// Token: 0x06000901 RID: 2305 RVA: 0x0032591D File Offset: 0x00323B1D
		private void ItemCheck_MinionAltFeatureUse(Item sItem, bool cShoot)
		{
			if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] && this.altFunctionUse == 2 && cShoot && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				this.MinionNPCTargetAim(false);
			}
		}

		// Token: 0x06000902 RID: 2306 RVA: 0x00325958 File Offset: 0x00323B58
		private void ItemCheck_TurretAltFeatureUse(Item sItem, bool cShoot)
		{
			if (sItem.shoot > 0 && ProjectileID.Sets.TurretFeature[sItem.shoot] && this.altFunctionUse == 2 && cShoot && this.ItemTimeIsZero)
			{
				this.ApplyItemTime(sItem);
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.TurretFeature[projectile.type])
					{
						projectile.Kill();
					}
				}
			}
		}

		// Token: 0x06000903 RID: 2307 RVA: 0x003259D8 File Offset: 0x00323BD8
		private void EmitMaxManaEffect()
		{
			SoundEngine.PlaySound(25, -1, -1, 1, 1f, 0f);
			for (int i = 0; i < 5; i++)
			{
				int num = Dust.NewDust(this.position, this.width, this.height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
				Main.dust[num].noLight = true;
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.5f;
			}
		}

		// Token: 0x17000121 RID: 289
		// (get) Token: 0x06000904 RID: 2308 RVA: 0x00325A8C File Offset: 0x00323C8C
		public Vector2? HandPosition
		{
			get
			{
				if (this.mount.Active)
				{
					Mount.MountDelegatesData.OverridePositionMethod handPosition = this.mount.Delegations.HandPosition;
					Vector2? result;
					if (handPosition != null && handPosition(this, out result))
					{
						return result;
					}
				}
				Vector2 vector = Main.OffsetsPlayerOnhand[this.bodyFrame.Y / 56] * 2f;
				if (this.direction != 1)
				{
					vector.X = (float)this.bodyFrame.Width - vector.X;
				}
				if (this.gravDir != 1f)
				{
					vector.Y = (float)this.bodyFrame.Height - vector.Y;
				}
				vector -= new Vector2((float)(this.bodyFrame.Width - this.width), (float)(this.bodyFrame.Height - 42)) / 2f;
				Vector2 value = -new Vector2(20f, 42f) / 2f + vector;
				return new Vector2?(this.RotatedRelativePoint(this.MountedCenter + value, false, true));
			}
		}

		// Token: 0x06000905 RID: 2309 RVA: 0x00325BAC File Offset: 0x00323DAC
		private void ItemCheck_EmitHeldItemLight(Item sItem)
		{
			Vector2? handPosition = this.HandPosition;
			if (((ItemID.Sets.Torches[sItem.type] && !this.wet) || ItemID.Sets.WaterTorches[sItem.type]) && !this.pulley && !this.happyFunTorchTime)
			{
				float r = 1f;
				float g = 0.95f;
				float b = 0.8f;
				int num = 0;
				int num2 = this.BiomeTorchHoldStyle(sItem.type);
				if (num2 == 523)
				{
					num = 8;
				}
				else if (num2 == 974)
				{
					num = 9;
				}
				else if (num2 == 1245)
				{
					num = 10;
				}
				else if (num2 == 1333)
				{
					num = 11;
				}
				else if (num2 == 2274)
				{
					num = 12;
				}
				else if (num2 == 3004)
				{
					num = 13;
				}
				else if (num2 == 3045)
				{
					num = 14;
				}
				else if (num2 == 3114)
				{
					num = 15;
				}
				else if (num2 == 4383)
				{
					num = 16;
				}
				else if (num2 == 4384)
				{
					num = 17;
				}
				else if (num2 == 4385)
				{
					num = 18;
				}
				else if (num2 == 4386)
				{
					num = 19;
				}
				else if (num2 == 4387)
				{
					num = 20;
				}
				else if (num2 == 4388)
				{
					num = 21;
				}
				else if (num2 == 5293)
				{
					num = 22;
				}
				else if (num2 == 5353)
				{
					num = 23;
				}
				else if (num2 >= 427)
				{
					num = num2 - 426;
				}
				num = (int)MathHelper.Clamp((float)num, 0f, (float)(TorchID.Count - 1));
				TorchID.TorchColor(num, out r, out g, out b);
				int num3 = TorchID.Dust[num];
				int maxValue = 30;
				if (this.itemAnimation > 0)
				{
					maxValue = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						int num4 = Dust.NewDust(new Vector2(this.itemLocation.X - 16f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, num3, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num4].noGravity = true;
						}
						Main.dust[num4].velocity *= 0.3f;
						Dust dust = Main.dust[num4];
						dust.velocity.Y = dust.velocity.Y - 1.5f;
						Main.dust[num4].position = this.RotatedRelativePoint(Main.dust[num4].position, false, true);
						if (num3 == 66)
						{
							Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
							Main.dust[num4].noGravity = true;
						}
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), false, true), r, g, b);
				}
				else
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						int num5 = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, num3, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num5].noGravity = true;
						}
						Main.dust[num5].velocity *= 0.3f;
						Dust dust2 = Main.dust[num5];
						dust2.velocity.Y = dust2.velocity.Y - 1.5f;
						Main.dust[num5].position = this.RotatedRelativePoint(Main.dust[num5].position, false, true);
						if (num3 == 66)
						{
							Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
							Main.dust[num5].noGravity = true;
						}
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), false, true), r, g, b);
				}
			}
			if ((sItem.type == 105 || sItem.type == 713) && !this.wet && !this.pulley)
			{
				int maxValue2 = 20;
				if (this.itemAnimation > 0)
				{
					maxValue2 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue2) == 0)
					{
						int num6 = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num6].noGravity = true;
						}
						Main.dust[num6].velocity *= 0.3f;
						Dust dust3 = Main.dust[num6];
						dust3.velocity.Y = dust3.velocity.Y - 1.5f;
						Main.dust[num6].position = this.RotatedRelativePoint(Main.dust[num6].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 1f, 0.95f, 0.8f);
				}
				else
				{
					if (Main.rand.Next(maxValue2) == 0)
					{
						int num7 = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num7].noGravity = true;
						}
						Main.dust[num7].velocity *= 0.3f;
						Dust dust4 = Main.dust[num7];
						dust4.velocity.Y = dust4.velocity.Y - 1.5f;
						Main.dust[num7].position = this.RotatedRelativePoint(Main.dust[num7].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 1f, 0.95f, 0.8f);
				}
			}
			else if (sItem.type == 148 && !this.wet && !this.pulley)
			{
				int maxValue3 = 10;
				if (this.itemAnimation > 0)
				{
					maxValue3 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue3) == 0)
					{
						int num8 = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num8].noGravity = true;
						}
						Main.dust[num8].velocity *= 0.3f;
						Dust dust5 = Main.dust[num8];
						dust5.velocity.Y = dust5.velocity.Y - 1.5f;
						Main.dust[num8].position = this.RotatedRelativePoint(Main.dust[num8].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0f, 0.5f, 1f);
				}
				else
				{
					if (Main.rand.Next(maxValue3) == 0)
					{
						int num9 = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num9].noGravity = true;
						}
						Main.dust[num9].velocity *= 0.3f;
						Dust dust6 = Main.dust[num9];
						dust6.velocity.Y = dust6.velocity.Y - 1.5f;
						Main.dust[num9].position = this.RotatedRelativePoint(Main.dust[num9].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0f, 0.5f, 1f);
				}
			}
			else if (sItem.type == 3117 && !this.wet && !this.pulley)
			{
				this.itemLocation.X = this.itemLocation.X - (float)(this.direction * 4);
				int maxValue4 = 10;
				if (this.itemAnimation > 0)
				{
					maxValue4 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue4) == 0)
					{
						int num10 = Dust.NewDust(new Vector2(this.itemLocation.X - 10f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num10].noGravity = true;
						}
						Main.dust[num10].velocity *= 0.3f;
						Dust dust7 = Main.dust[num10];
						dust7.velocity.Y = dust7.velocity.Y - 1.5f;
						Main.dust[num10].position = this.RotatedRelativePoint(Main.dust[num10].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.9f, 0.1f, 0.75f);
				}
				else
				{
					if (Main.rand.Next(maxValue4) == 0)
					{
						int num11 = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num11].noGravity = true;
						}
						Main.dust[num11].velocity *= 0.3f;
						Dust dust8 = Main.dust[num11];
						dust8.velocity.Y = dust8.velocity.Y - 1.5f;
						Main.dust[num11].position = this.RotatedRelativePoint(Main.dust[num11].position, false, true);
					}
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.9f, 0.1f, 0.75f);
				}
			}
			else if (sItem.type == 5322 && !this.wet && !this.pulley)
			{
				float r2 = 0.2f;
				float g2 = 0.3f;
				float b2 = 0.32f;
				if (this.direction == -1)
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), r2, g2, b2);
				}
				else
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), r2, g2, b2);
				}
			}
			if (sItem.type == 282 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.7f, 1f, 0.8f);
				}
				else
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.7f, 1f, 0.8f);
				}
			}
			if (sItem.type == 3002 && !this.pulley)
			{
				float r3 = 1.05f;
				float g3 = 0.95f;
				float b3 = 0.55f;
				if (this.direction == -1)
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), r3, g3, b3);
				}
				else
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), r3, g3, b3);
				}
				this.spelunkerTimer += 1;
				if (this.spelunkerTimer >= 10)
				{
					this.spelunkerTimer = 0;
					Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
				}
			}
			if (sItem.type == 286 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.7f, 0.8f, 1f);
				}
				else
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 0.7f, 0.8f, 1f);
				}
			}
			if (sItem.type == 3112 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 1f, 0.6f, 0.85f);
				}
				else
				{
					Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true), 1f, 0.6f, 0.85f);
				}
			}
			if (sItem.type == 4776 && !this.pulley)
			{
				Vector2 vector = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), false, true);
				if (this.direction == -1)
				{
					vector = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), false, true);
				}
				Vector3 vector2 = new Vector3(0.9f, 0.35f, 1f);
				DelegateMethods.v3_1 = vector2;
				Point point = vector.ToTileCoordinates();
				DelegateMethods.v2_1 = point.ToVector2();
				DelegateMethods.f_1 = 4.5f;
				Utils.PlotTileArea(point.X, point.Y, new Utils.TileActionAttempt(DelegateMethods.SpreadLightOpen_StopForSolids));
				Lighting.AddLight(vector, vector2);
			}
			if (sItem.type == 3542 && handPosition != null)
			{
				Vector2 position = handPosition.Value - this.velocity;
				for (int i = 0; i < 4; i++)
				{
					Dust dust9 = Main.dust[Dust.NewDust(base.Center, 0, 0, 242, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f)];
					dust9.position = position;
					dust9.velocity *= 0f;
					dust9.noGravity = true;
					dust9.fadeIn = 1f;
					dust9.velocity += this.velocity;
					if (Main.rand.Next(2) == 0)
					{
						dust9.position += Utils.RandomVector2(Main.rand, -4f, 4f);
						dust9.scale += Main.rand.NextFloat();
						if (Main.rand.Next(2) == 0)
						{
							dust9.customData = this;
						}
					}
				}
			}
			if (sItem.type == 4952 && !this.pulley && !this.isPettingAnimal)
			{
				Vector2 pos = this.itemLocation + new Vector2((float)(8 * this.direction), -10f * this.gravDir);
				Vector3 rgb = new Vector3(1f, 0.7f, 0.8f) * 1.3f;
				Vector2 vector3 = this.RotatedRelativePoint(pos, false, true);
				Lighting.AddLight(vector3, rgb);
				if (Main.rand.Next(40) == 0)
				{
					Vector2 vector4 = Main.rand.NextVector2Circular(4f, 4f);
					Dust dust10 = Dust.NewDustPerfect(vector3 + vector4, 43, new Vector2?(Vector2.Zero), 254, new Color(255, 255, 0, 255), 0.3f);
					if (vector4 != Vector2.Zero)
					{
						dust10.velocity = vector3.DirectionTo(dust10.position) * 0.2f;
					}
					dust10.fadeIn = 0.3f;
					dust10.noLightEmittence = true;
					dust10.customData = this;
				}
			}
		}

		// Token: 0x06000906 RID: 2310 RVA: 0x00326FC4 File Offset: 0x003251C4
		public bool CanVisuallyHoldItem(Item item)
		{
			if (item.holdStyle == 4)
			{
				if (this.isPettingAnimal)
				{
					return false;
				}
				if (this.pulley)
				{
					return false;
				}
				if (this.gravDir == -1f)
				{
					return false;
				}
				if (this.velocity.Y != 0f)
				{
					return false;
				}
				if (this.mount.Active)
				{
					return false;
				}
			}
			return (item.holdStyle != 6 || !this.isPettingAnimal) && (item.holdStyle != 5 || !this.isPettingAnimal);
		}

		// Token: 0x06000907 RID: 2311 RVA: 0x00327048 File Offset: 0x00325248
		private void ItemCheck_ApplyHoldStyle(float mountOffset, Item sItem, Rectangle heldItemFrame)
		{
			if (this.isPettingAnimal)
			{
				int num = this.miscCounter % 14 / 7;
				Player.CompositeArmStretchAmount stretch = Player.CompositeArmStretchAmount.ThreeQuarters;
				if (num == 1)
				{
					stretch = Player.CompositeArmStretchAmount.Full;
				}
				float num2 = 0.3f;
				if (this.isTheAnimalBeingPetSmall)
				{
					num2 = 0.2f;
				}
				this.SetCompositeArmBack(true, stretch, -6.2831855f * num2 * (float)this.direction);
			}
			if (!this.CanVisuallyHoldItem(sItem))
			{
				return;
			}
			if (sItem.holdStyle == 1 && !this.pulley)
			{
				if (Main.dedServ)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + 20f * (float)this.direction;
				}
				else if (sItem.type == 930)
				{
					this.itemLocation.X = this.position.X + (float)(this.width / 2) * 0.5f - 12f - (float)(2 * this.direction);
					float num3 = this.position.X + (float)(this.width / 2) + (float)(38 * this.direction);
					if (this.direction == 1)
					{
						num3 -= 10f;
					}
					float num4 = this.MountedCenter.Y - 4f * this.gravDir;
					if (this.gravDir == -1f)
					{
						num4 -= 8f;
					}
					this.RotateRelativePoint(ref num3, ref num4);
					int num5 = 0;
					for (int i = 54; i < 58; i++)
					{
						if (this.inventory[i].stack > 0 && this.inventory[i].ammo == 931)
						{
							num5 = this.inventory[i].type;
							break;
						}
					}
					if (num5 == 0)
					{
						for (int j = 0; j < 54; j++)
						{
							if (this.inventory[j].stack > 0 && this.inventory[j].ammo == 931)
							{
								num5 = this.inventory[j].type;
								break;
							}
						}
					}
					if (num5 != 931)
					{
						if (num5 != 1614)
						{
							switch (num5)
							{
							case 5377:
								num5 = 169;
								break;
							case 5378:
								num5 = 75;
								break;
							case 5379:
								num5 = 66;
								break;
							case 5380:
								num5 = 310;
								break;
							}
						}
						else
						{
							num5 = 187;
						}
					}
					else
					{
						num5 = 127;
					}
					if (num5 > 0)
					{
						int num6 = Dust.NewDust(new Vector2(num3, num4 + this.gfxOffY), 6, 6, num5, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num6].noGravity = true;
						Dust dust = Main.dust[num6];
						dust.velocity.Y = dust.velocity.Y - 4f * this.gravDir;
						if (num5 == 66)
						{
							Main.dust[num6].color = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.6f % 1f, 1f, 0.5f, byte.MaxValue);
							Main.dust[num6].scale *= 0.5f;
							Main.dust[num6].velocity *= 0.75f;
						}
					}
				}
				else if (sItem.type == 968)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(8 * this.direction);
					if (this.whoAmI == Main.myPlayer)
					{
						int num7 = (int)(this.itemLocation.X + (float)heldItemFrame.Width * 0.8f * (float)this.direction) / 16;
						int num8 = (int)(this.itemLocation.Y + mountOffset + (float)(heldItemFrame.Height / 2)) / 16;
						if (Main.tile[num7, num8] == null)
						{
							Main.tile[num7, num8] = new Tile();
						}
						if (Main.tile[num7, num8].active() && Main.tile[num7, num8].type == 215 && Main.tile[num7, num8].frameY < 54)
						{
							this.miscTimer++;
							if (Main.rand.Next(5) == 0)
							{
								this.miscTimer++;
							}
							if (this.miscTimer > 900)
							{
								this.miscTimer = 0;
								sItem.SetDefaults(969);
								if (this.selectedItem == 58)
								{
									Main.mouseItem.SetDefaults(969);
								}
								for (int k = 0; k < 58; k++)
								{
									if (this.inventory[k].type == sItem.type && k != this.selectedItem && this.inventory[k].stack < this.inventory[k].maxStack)
									{
										SoundEngine.PlaySound(7, -1, -1, 1, 1f, 0f);
										this.inventory[k].stack++;
										sItem.SetDefaults(0);
										if (this.selectedItem == 58)
										{
											Main.mouseItem.SetDefaults(0);
										}
									}
								}
							}
						}
						else
						{
							this.miscTimer = 0;
						}
					}
				}
				else if (sItem.type == 856)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(4 * this.direction);
				}
				else if (sItem.fishingPole > 0)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)heldItemFrame.Width * 0.18f * (float)this.direction;
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f + 2f) * (float)this.direction;
					if (sItem.type == 282 || sItem.type == 286 || sItem.type == 3112 || sItem.type == 4776)
					{
						this.itemLocation.X = this.itemLocation.X - (float)(this.direction * 2);
						this.itemLocation.Y = this.itemLocation.Y + 4f;
					}
					else if (sItem.type == 3002)
					{
						this.itemLocation.X = this.itemLocation.X - (float)(4 * this.direction);
						this.itemLocation.Y = this.itemLocation.Y + 2f;
					}
				}
				this.itemLocation.Y = this.position.Y + 24f + mountOffset;
				if (sItem.type == 856)
				{
					this.itemLocation.Y = this.position.Y + 34f + mountOffset;
				}
				if (sItem.type == 930)
				{
					this.itemLocation.Y = this.position.Y + 9f + mountOffset;
				}
				if (sItem.fishingPole > 0)
				{
					this.itemLocation.Y = this.itemLocation.Y + 4f;
				}
				else if (sItem.type == 3476)
				{
					this.itemLocation.X = base.Center.X + (float)(14 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y;
				}
				else if (sItem.type == 3779)
				{
					this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 6f;
				}
				else if (sItem.type == 4952)
				{
					this.itemLocation.X = base.Center.X + (float)(2 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 26f;
				}
				else if (sItem.type == 353)
				{
					this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 11f;
				}
				else if (ItemID.Sets.IsFood[sItem.type])
				{
					this.itemLocation.X = base.Center.X + (float)(4 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + (float)(heldItemFrame.Height / 2);
				}
				else if (sItem.type == 4049 && Main.rand.Next(4) == 0)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + new Vector2((float)(this.direction * 23), this.gravDir * 6f), 31, new Vector2?(Vector2.Zero), 127, default(Color), 0.7f);
					dust2.noGravity = true;
					dust2.velocity = Main.rand.NextVector2Circular(1f, 1f) + new Vector2(0f, -1f);
				}
				this.itemRotation = 0f;
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y) + mountOffset;
					if (sItem.type == 930)
					{
						this.itemLocation.Y = this.itemLocation.Y - 24f;
						return;
					}
				}
			}
			else if (sItem.holdStyle == 2 && !this.pulley)
			{
				if (sItem.type == 946 || sItem.type == 4707)
				{
					this.itemRotation = 0f;
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
					this.itemLocation.Y = this.position.Y + 22f + mountOffset;
					this.fallStart = (int)(this.position.Y / 16f);
					if (this.gravDir == -1f)
					{
						this.itemRotation = -this.itemRotation;
						this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						if (this.velocity.Y < -2f && !this.controlDown)
						{
							this.velocity.Y = -2f;
							return;
						}
					}
					else if (this.velocity.Y > 2f && !this.controlDown)
					{
						this.velocity.Y = 2f;
						return;
					}
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
					this.itemLocation.Y = this.position.Y + 16f + mountOffset;
					this.itemRotation = 0.79f * (float)(-(float)this.direction);
					if (this.gravDir == -1f)
					{
						this.itemRotation = -this.itemRotation;
						this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						return;
					}
				}
			}
			else if (sItem.holdStyle == 3 && !this.pulley)
			{
				if (!Main.dedServ)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)heldItemFrame.Width * 0.5f - (float)(this.direction * 2);
					this.itemLocation.Y = this.MountedCenter.Y - (float)heldItemFrame.Height * 0.5f;
					this.itemRotation = 0f;
					return;
				}
			}
			else if (sItem.holdStyle == 4)
			{
				if (Main.dedServ)
				{
					return;
				}
				float num9 = new Vector2((float)(10 * this.direction), 10f).ToRotation() + 0.7853982f;
				this.itemRotation = num9;
				if (this.direction == -1)
				{
					this.itemRotation += 1.5707964f;
				}
				Player.CompositeArmStretchAmount stretch2 = Player.CompositeArmStretchAmount.Full;
				Player.CompositeArmStretchAmount stretch3 = Player.CompositeArmStretchAmount.ThreeQuarters;
				float num10 = -0.31415927f;
				if (this.direction == -1)
				{
					num10 *= -1f;
				}
				float num11 = this.itemRotation - 0.7853982f + 3.1415927f;
				if (this.direction == 1)
				{
					num11 += 1.5707964f;
				}
				float rotation = num11 + num10;
				float rotation2 = num11 - num10;
				Vector2 value = (num11 + 1.5707964f).ToRotationVector2() * 2f;
				this.itemLocation = this.MountedCenter.Floor() + value;
				this.SetCompositeArmFront(true, stretch2, rotation);
				this.SetCompositeArmBack(true, stretch3, rotation2);
				this.FlipItemLocationAndRotationForGravity();
				return;
			}
			else if (sItem.holdStyle == 5 && !this.pulley)
			{
				if (Main.dedServ)
				{
					return;
				}
				this.itemRotation = 0f;
				this.itemLocation.X = base.Center.X - (float)(8 * this.direction);
				this.itemLocation.Y = this.position.Y + 40f + mountOffset;
				Vector2 value2 = Main.OffsetsPlayerHeadgear[this.bodyFrame.Y / 56];
				this.itemLocation += value2;
				Player.CompositeArmStretchAmount stretch4 = Player.CompositeArmStretchAmount.Quarter;
				this.SetCompositeArmBack(true, stretch4, -0.7853982f * (float)this.direction);
				Player.CompositeArmStretchAmount stretch5 = Player.CompositeArmStretchAmount.Full;
				this.SetCompositeArmFront(true, stretch5, -0.39269912f * (float)this.direction);
				this.FlipItemLocationAndRotationForGravity();
				return;
			}
			else if (sItem.holdStyle == 6 && !this.pulley)
			{
				if (Main.dedServ)
				{
					return;
				}
				this.itemRotation = 0f;
				this.itemLocation.X = base.Center.X + (float)(8 * this.direction);
				this.itemLocation.Y = this.position.Y + 40f + mountOffset - 2f;
				Vector2 value3 = Main.OffsetsPlayerHeadgear[this.bodyFrame.Y / 56];
				this.itemLocation += value3;
				Player.CompositeArmStretchAmount stretch6 = Player.CompositeArmStretchAmount.ThreeQuarters;
				this.SetCompositeArmBack(true, stretch6, -1.8849556f * (float)this.direction);
				this.FlipItemLocationAndRotationForGravity();
			}
		}

		// Token: 0x06000908 RID: 2312 RVA: 0x00327F46 File Offset: 0x00326146
		private void ItemCheck_ApplyManaRegenDelay(Item sItem)
		{
			if (!this.spaceGun || (sItem.type != 127 && sItem.type != 4347 && sItem.type != 4348))
			{
				this.manaRegenDelay = (float)((int)this.maxRegenDelay);
			}
		}

		// Token: 0x06000909 RID: 2313 RVA: 0x00327F84 File Offset: 0x00326184
		public Vector2 GetFrontHandPosition(Player.CompositeArmStretchAmount stretch, float rotation)
		{
			float num = rotation + 1.5707964f;
			Vector2 vector = new Vector2((float)Math.Cos((double)num), (float)Math.Sin((double)num));
			switch (stretch)
			{
			case Player.CompositeArmStretchAmount.Full:
				vector *= 10f;
				break;
			case Player.CompositeArmStretchAmount.None:
				vector *= 4f;
				break;
			case Player.CompositeArmStretchAmount.Quarter:
				vector *= 6f;
				break;
			case Player.CompositeArmStretchAmount.ThreeQuarters:
				vector *= 8f;
				break;
			}
			if (this.direction == -1)
			{
				vector += new Vector2(4f, -2f);
				vector += new Vector2(0f, -3f).RotatedBy((double)(rotation + 1.5707964f), default(Vector2));
			}
			else
			{
				vector += new Vector2(-4f, -2f);
				vector += new Vector2(0f, 3f).RotatedBy((double)(rotation + 1.5707964f), default(Vector2));
			}
			return this.MountedCenter + vector;
		}

		// Token: 0x0600090A RID: 2314 RVA: 0x0032809C File Offset: 0x0032629C
		public Vector2 GetBackHandPosition(Player.CompositeArmStretchAmount stretch, float rotation)
		{
			float num = rotation + 1.5707964f;
			Vector2 vector = new Vector2((float)Math.Cos((double)num), (float)Math.Sin((double)num));
			switch (stretch)
			{
			case Player.CompositeArmStretchAmount.Full:
				vector *= new Vector2(10f, 12f);
				break;
			case Player.CompositeArmStretchAmount.None:
				vector *= new Vector2(4f, 6f);
				break;
			case Player.CompositeArmStretchAmount.Quarter:
				vector *= new Vector2(6f, 8f);
				break;
			case Player.CompositeArmStretchAmount.ThreeQuarters:
				vector *= new Vector2(8f, 10f);
				break;
			}
			if (this.direction == -1)
			{
				vector += new Vector2(-6f, -2f);
			}
			else
			{
				vector += new Vector2(6f, -2f);
			}
			return this.MountedCenter + vector;
		}

		// Token: 0x0600090B RID: 2315 RVA: 0x00328184 File Offset: 0x00326384
		public void ItemCheck_ApplyUseStyle(float mountOffset, Item sItem, Rectangle heldItemFrame)
		{
			if (Main.dedServ)
			{
				return;
			}
			if (sItem.useStyle == 1)
			{
				if (sItem.type > -1 && Item.claw[sItem.type])
				{
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						float num = 10f;
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num) * (float)this.direction;
						this.itemLocation.Y = this.position.Y + 26f + mountOffset;
					}
					else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
					{
						float num2 = 8f;
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num2) * (float)this.direction;
						num2 = 24f;
						this.itemLocation.Y = this.position.Y + num2 + mountOffset;
					}
					else
					{
						float num3 = 6f;
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f - ((float)heldItemFrame.Width * 0.5f - num3) * (float)this.direction;
						num3 = 20f;
						this.itemLocation.Y = this.position.Y + num3 + mountOffset;
					}
					this.itemRotation = ((float)this.itemAnimation / (float)this.itemAnimationMax - 0.5f) * (float)(-(float)this.direction) * 3.5f - (float)this.direction * 0.3f;
				}
				else
				{
					Vector2 zero = Vector2.Zero;
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						float num4 = 10f;
						if (heldItemFrame.Width > 32)
						{
							num4 = 14f;
						}
						if (heldItemFrame.Width >= 52)
						{
							num4 = 24f;
						}
						if (heldItemFrame.Width >= 64)
						{
							num4 = 28f;
						}
						if (heldItemFrame.Width >= 92)
						{
							num4 = 38f;
						}
						if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
						{
							num4 += 8f;
						}
						if (sItem.type == 671)
						{
							num4 += 12f;
						}
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num4) * (float)this.direction;
						this.itemLocation.Y = this.position.Y + 24f + mountOffset;
						zero = new Vector2(-4f, 1f);
					}
					else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
					{
						float num5 = 10f;
						if (heldItemFrame.Width > 32)
						{
							num5 = 18f;
						}
						if (heldItemFrame.Width >= 52)
						{
							num5 = 24f;
						}
						if (heldItemFrame.Width >= 64)
						{
							num5 = 28f;
						}
						if (heldItemFrame.Width >= 92)
						{
							num5 = 38f;
						}
						if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
						{
							num5 += 4f;
						}
						if (sItem.type == 671)
						{
							num5 += 6f;
						}
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num5) * (float)this.direction;
						num5 = 10f;
						if (heldItemFrame.Height > 32)
						{
							num5 = 8f;
						}
						if (heldItemFrame.Height > 52)
						{
							num5 = 12f;
						}
						if (heldItemFrame.Height > 64)
						{
							num5 = 14f;
						}
						if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
						{
							num5 += 4f;
						}
						if (sItem.type == 671)
						{
							num5 += 10f;
						}
						this.itemLocation.Y = this.position.Y + num5 + mountOffset;
						zero = new Vector2(-6f, -4f);
					}
					else
					{
						float num6 = 6f;
						if (heldItemFrame.Width > 32)
						{
							num6 = 14f;
						}
						if (heldItemFrame.Width >= 48)
						{
							num6 = 18f;
						}
						if (heldItemFrame.Width >= 52)
						{
							num6 = 24f;
						}
						if (heldItemFrame.Width >= 64)
						{
							num6 = 28f;
						}
						if (heldItemFrame.Width >= 92)
						{
							num6 = 38f;
						}
						if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
						{
							num6 += 4f;
						}
						if (sItem.type == 671)
						{
							num6 += 8f;
						}
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f - ((float)heldItemFrame.Width * 0.5f - num6) * (float)this.direction;
						num6 = 10f;
						if (heldItemFrame.Height > 32)
						{
							num6 = 10f;
						}
						if (heldItemFrame.Height > 52)
						{
							num6 = 12f;
						}
						if (heldItemFrame.Height > 64)
						{
							num6 = 14f;
						}
						if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
						{
							num6 += 4f;
						}
						if (sItem.type == 671)
						{
							num6 += 8f;
						}
						this.itemLocation.Y = this.position.Y + num6 + mountOffset;
						zero = new Vector2(4f, -2f);
					}
					if (sItem.type > -1 && ItemID.Sets.UsesBetterMeleeItemLocation[sItem.type])
					{
						this.itemLocation += zero * this.Directions;
					}
					this.itemRotation = ((float)this.itemAnimation / (float)this.itemAnimationMax - 0.5f) * (float)(-(float)this.direction) * 3.5f - (float)this.direction * 0.3f;
				}
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 7)
			{
				this.itemRotation = (float)this.itemAnimation / (float)this.itemAnimationMax * (float)this.direction * 2f + -1.4f * (float)this.direction;
				if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.5)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - this.itemRotation * 12f * (float)this.direction) * (float)this.direction;
					this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction * 4f + mountOffset;
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - this.itemRotation * 16f * (float)this.direction) * (float)this.direction;
					this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction + mountOffset;
				}
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 9)
			{
				float num7 = (float)this.itemAnimation / (float)this.itemAnimationMax;
				float num8 = 1f - num7;
				num8 = Utils.GetLerpValue(0f, 0.7f, num8, true);
				this.itemRotation = num8 * (float)(-(float)this.direction) * 2f + 0.7f * (float)this.direction;
				this.itemLocation = this.MountedCenter + new Vector2((float)(this.direction * 10) * ((float)this.itemAnimation / (float)this.itemAnimationMax), 0f);
				float num9 = 8f;
				float scaleFactor = 7f;
				float num10 = 1.2566371f;
				float num11 = -num10 * 0.5f + (1f - num8) * num10;
				num11 += 0.31415927f;
				Vector2 vector = base.Center + new Vector2((float)this.direction * num9, 0f) + num11.ToRotationVector2() * scaleFactor * new Vector2((float)this.direction, 1f);
				this.itemLocation = vector;
				float num12 = num11 - 1.5707964f;
				if (this.direction == -1)
				{
					num12 = -num12;
				}
				this.SetCompositeArmFront(true, Player.CompositeArmStretchAmount.Full, num12);
				this.itemLocation = this.GetFrontHandPosition(Player.CompositeArmStretchAmount.Full, num12);
				this.itemLocation -= this.MountedCenter;
				this.itemLocation *= MathHelper.Lerp(1.5f, 1.2f, num8);
				this.itemLocation += this.MountedCenter;
				this.itemLocation.X = this.itemLocation.X + (float)this.direction * MathHelper.Lerp(8f, 2f, num8);
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 6)
			{
				float num13 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
				num13 *= 6f;
				if (num13 > 1f)
				{
					num13 = 1f;
				}
				this.itemRotation = (1f - num13) * (float)this.direction * 2f - 1.4f * (float)this.direction;
				if (num13 >= 0.5f)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - this.itemRotation * 12f * (float)this.direction) * (float)this.direction;
					this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction * 4f + mountOffset;
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - this.itemRotation * 16f * (float)this.direction) * (float)this.direction;
					this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction + mountOffset;
				}
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 2)
			{
				this.itemLocation = this.MountedCenter + new Vector2((float)(10 * this.direction), -10f).RotatedBy((double)(this.itemRotation + 0.7853982f * (float)this.direction), default(Vector2));
				float num14 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
				Player.CompositeArmStretchAmount stretch = Player.CompositeArmStretchAmount.Full;
				if (num14 > 0.25f && num14 <= 0.5f)
				{
					stretch = Player.CompositeArmStretchAmount.ThreeQuarters;
				}
				if (num14 > 0.5f && num14 <= 0.75f)
				{
					stretch = Player.CompositeArmStretchAmount.Quarter;
				}
				if (num14 > 0.75f && num14 <= 1f)
				{
					stretch = Player.CompositeArmStretchAmount.None;
				}
				this.SetCompositeArmFront(true, stretch, -1.5707964f * (float)this.direction);
				this.SetCompositeArmBack(true, stretch, -1.5707964f * (float)this.direction);
				int num15 = 8;
				switch (stretch)
				{
				case Player.CompositeArmStretchAmount.Full:
					num15 = 8;
					break;
				case Player.CompositeArmStretchAmount.None:
					num15 = 2;
					break;
				case Player.CompositeArmStretchAmount.Quarter:
					num15 = 4;
					break;
				case Player.CompositeArmStretchAmount.ThreeQuarters:
					num15 = 6;
					break;
				}
				this.itemLocation = this.MountedCenter + new Vector2((float)((num15 + 10 - heldItemFrame.Width / 2) * this.direction), (float)(heldItemFrame.Height / 2 - 4));
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 11)
			{
				float num16 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
				num16 *= 2f;
				Player.CompositeArmStretchAmount stretch2 = Player.CompositeArmStretchAmount.Full;
				if (num16 > 0.25f && num16 <= 0.5f)
				{
					stretch2 = Player.CompositeArmStretchAmount.ThreeQuarters;
				}
				if (num16 > 0.5f && num16 <= 0.75f)
				{
					stretch2 = Player.CompositeArmStretchAmount.Quarter;
				}
				if (num16 > 0.75f && num16 <= 1.25f)
				{
					stretch2 = Player.CompositeArmStretchAmount.None;
				}
				if (num16 > 1.25f && num16 <= 1.5f)
				{
					stretch2 = Player.CompositeArmStretchAmount.Quarter;
				}
				if (num16 > 1.5f && num16 <= 1.75f)
				{
					stretch2 = Player.CompositeArmStretchAmount.ThreeQuarters;
				}
				if (num16 > 1.75f && num16 <= 2f)
				{
					stretch2 = Player.CompositeArmStretchAmount.Full;
				}
				this.SetCompositeArmFront(true, stretch2, -0.7853982f * (float)this.direction);
				this.SetCompositeArmBack(true, Player.CompositeArmStretchAmount.Full, -0.19634955f);
				int num17 = 8;
				switch (stretch2)
				{
				case Player.CompositeArmStretchAmount.Full:
					num17 = 8;
					break;
				case Player.CompositeArmStretchAmount.None:
					num17 = 2;
					break;
				case Player.CompositeArmStretchAmount.Quarter:
					num17 = 4;
					break;
				case Player.CompositeArmStretchAmount.ThreeQuarters:
					num17 = 6;
					break;
				}
				this.itemLocation = this.MountedCenter + new Vector2((float)((num17 + 22 - heldItemFrame.Width / 2) * this.direction), (float)(heldItemFrame.Height / 2 - 8));
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 3)
			{
				if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
				{
					this.itemLocation.X = -1000f;
					this.itemLocation.Y = -1000f;
					this.itemRotation = -1.3f * (float)this.direction;
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 4f) * (float)this.direction;
					this.itemLocation.Y = this.position.Y + 24f + mountOffset;
					float num18 = (float)this.itemAnimation / (float)this.itemAnimationMax * (float)heldItemFrame.Width * (float)this.direction * this.GetAdjustedItemScale(sItem) * 1.2f - (float)(10 * this.direction);
					if (num18 > -4f && this.direction == -1)
					{
						num18 = -8f;
					}
					if (num18 < 4f && this.direction == 1)
					{
						num18 = 8f;
					}
					this.itemLocation.X = this.itemLocation.X - num18;
					this.itemRotation = 0.8f * (float)this.direction;
					if (sItem.type == 946 || sItem.type == 4707)
					{
						this.itemLocation.X = this.itemLocation.X - (float)(6 * this.direction);
					}
				}
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 4)
			{
				int num19 = 0;
				int num20 = 0;
				if (sItem.type == 3601)
				{
					num19 = 10;
				}
				if (sItem.type == 5114)
				{
					num19 = 10;
					num20 = -2;
				}
				if (sItem.type == 5120)
				{
					num19 = 10;
				}
				this.itemRotation = 0f;
				this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - this.itemRotation * 14f * (float)this.direction - 4f - (float)num19) * (float)this.direction;
				this.itemLocation.Y = this.position.Y + (float)heldItemFrame.Height * 0.5f + 4f + mountOffset + (float)num20;
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					return;
				}
			}
			else if (sItem.useStyle == 5)
			{
				if (sItem.type == 3779)
				{
					this.itemRotation = 0f;
					this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 6f;
				}
				else if (sItem.type == 4262)
				{
					this.itemRotation = 0f;
					this.itemLocation.X = base.Center.X + (float)(-(float)heldItemFrame.Width) * 0.5f + (float)(this.direction * -6);
					this.itemLocation.Y = this.MountedCenter.Y - 6f;
					if (Main.rand.Next(20) == 0)
					{
						int num21 = Main.rand.Next(570, 573);
						Vector2 position = new Vector2(base.Center.X + (float)(this.direction * 30) - 6f, this.itemLocation.Y - 30f);
						Vector2 velocity = new Vector2(Main.WindForVisuals * 2f + (float)this.direction * 0.3f, -0.5f);
						velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						if (num21 == 572)
						{
							position.X -= 8f;
						}
						if (num21 == 571)
						{
							position.X -= 4f;
						}
						Gore.NewGore(position, velocity, num21, 0.8f);
					}
				}
				else if (Item.staff[sItem.type])
				{
					float scaleFactor2 = 6f;
					if (sItem.type == 3476)
					{
						scaleFactor2 = 14f;
					}
					this.itemLocation = this.MountedCenter;
					this.itemLocation += (this.itemRotation.ToRotationVector2() * scaleFactor2 * (float)this.direction).Floor();
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)heldItemFrame.Width * 0.5f - (float)(this.direction * 2);
					this.itemLocation.Y = this.MountedCenter.Y - (float)heldItemFrame.Height * 0.5f;
				}
				if (sItem.type == 5065)
				{
					float num22 = this.itemRotation;
					Vector2 vector2 = this.itemLocation + this.itemRotation.ToRotationVector2() * 38f * (float)this.direction;
					Vector2 value = this.itemRotation.ToRotationVector2() * 5f * (float)this.direction;
					if (this.itemAnimation % 2 == 0)
					{
						Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f, byte.MaxValue);
						int num23 = Dust.NewDust(vector2, 0, 0, 267, 0f, 0f, 0, newColor, 1f);
						Main.dust[num23].position = vector2 - this.velocity + Main.rand.NextVector2Circular(10f, 10f);
						Main.dust[num23].noGravity = true;
						Main.dust[num23].scale = 0.3f;
						Main.dust[num23].fadeIn = Main.rand.NextFloat() * 1.2f;
						Main.dust[num23].velocity = Main.rand.NextVector2Circular(1f, 1f) + this.velocity;
						if (num23 != 6000)
						{
							Dust dust = Dust.CloneDust(num23);
							dust.scale /= 2f;
							dust.fadeIn *= 0.85f;
							dust.color = new Color(255, 255, 255, 255);
						}
					}
					if (this.itemAnimation % 4 == 0)
					{
						ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
						{
							PositionInWorld = vector2,
							MovementVector = value * 0.1f + Main.rand.NextVector2Circular(2f, 2f) + this.velocity
						}, new int?(this.whoAmI));
						return;
					}
				}
			}
			else
			{
				if (sItem.useStyle == 13)
				{
					int useAnimation = this.itemAnimationMax;
					if (this.itemTimeMax != 0)
					{
						useAnimation = this.itemTimeMax;
					}
					if (useAnimation == 0)
					{
						useAnimation = sItem.useAnimation;
					}
					float num24 = 1f - (float)(this.itemAnimation % useAnimation) / (float)useAnimation;
					Player.CompositeArmStretchAmount stretch3 = Player.CompositeArmStretchAmount.Quarter;
					if (num24 > 0.33f && num24 <= 0.66f)
					{
						stretch3 = Player.CompositeArmStretchAmount.ThreeQuarters;
					}
					if (num24 > 0.66f && num24 <= 1f)
					{
						stretch3 = Player.CompositeArmStretchAmount.Full;
					}
					float rotation = this.itemRotation * this.Directions.Y - 1.5707964f * (float)this.direction;
					this.SetCompositeArmFront(true, stretch3, rotation);
					return;
				}
				if (sItem.useStyle == 8)
				{
					Projectile projectile = null;
					if (this.ownedProjectileCounts[722] > 0)
					{
						for (int i = 0; i < 1000; i++)
						{
							Projectile projectile2 = Main.projectile[i];
							if (projectile2.active && projectile2.owner == this.whoAmI && projectile2.type == 722)
							{
								projectile = projectile2;
								break;
							}
						}
					}
					float num25;
					if (projectile != null)
					{
						num25 = MathHelper.Lerp(0.6f, 1f, Utils.GetLerpValue(0f, 800f, Vector2.Distance(this.MountedCenter, projectile.Center), true));
					}
					num25 = 1f;
					if (this.itemAnimation >= sItem.useAnimation - 1 && this.itemAnimation <= sItem.useAnimation)
					{
						float num26 = new Vector2((float)(10 * this.direction), 10f).ToRotation() + 0.7853982f;
						this.itemRotation = num26;
						if (this.direction == -1)
						{
							this.itemRotation += 1.5707964f;
						}
						float num27 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
						Player.CompositeArmStretchAmount stretch4 = Player.CompositeArmStretchAmount.Full;
						Player.CompositeArmStretchAmount stretch5 = Player.CompositeArmStretchAmount.ThreeQuarters;
						float num28 = -0.31415927f;
						if (this.direction == -1)
						{
							num28 *= -1f;
						}
						float num29 = this.itemRotation - 0.7853982f + 3.1415927f;
						if (this.direction == 1)
						{
							num29 += 1.5707964f;
						}
						float rotation2 = num29 + num28;
						float rotation3 = num29 - num28;
						Vector2 value2 = (num29 + 1.5707964f).ToRotationVector2() * -2f;
						this.itemLocation = (this.MountedCenter + value2).Floor();
						this.SetCompositeArmFront(true, stretch4, rotation2);
						this.SetCompositeArmBack(true, stretch5, rotation3);
					}
					else if (this.itemAnimation > sItem.useAnimation)
					{
						float num30 = -Utils.GetLerpValue((float)this.itemAnimationMax, (float)(this.itemAnimationMax * 5), (float)this.itemAnimation, true);
						num30 *= num25;
						Player.CompositeArmStretchAmount stretch6 = Player.CompositeArmStretchAmount.Full;
						Player.CompositeArmStretchAmount stretch7 = Player.CompositeArmStretchAmount.ThreeQuarters;
						float num31 = -0.31415927f;
						num31 *= -num30;
						this.itemRotation = 1.5707964f * (float)(-(float)this.direction) + 3.1415927f + 3.1415927f * num30 * (float)(-(float)this.direction);
						float num32 = -0.62831855f * (float)this.direction;
						if (this.direction < 1)
						{
							num31 *= -1f;
						}
						float rotation4 = num32 + num31;
						float rotation5 = num32 - num31;
						Vector2 value3 = new Vector2((float)(10 * this.direction), num30 * -6f);
						this.itemLocation = (this.MountedCenter + value3).Floor();
						this.SetCompositeArmFront(true, stretch6, rotation4);
						this.SetCompositeArmBack(true, stretch7, rotation5);
					}
					else
					{
						float num33 = 1f - (float)this.itemAnimation / (float)this.itemAnimationMax;
						Player.CompositeArmStretchAmount stretch8 = Player.CompositeArmStretchAmount.Full;
						Player.CompositeArmStretchAmount stretch9 = Player.CompositeArmStretchAmount.ThreeQuarters;
						if (num33 > 0.6f)
						{
							stretch9 = Player.CompositeArmStretchAmount.Quarter;
						}
						float num34 = -0.31415927f;
						if (this.direction == -1)
						{
							num34 *= -1f;
						}
						num34 *= 1f - num33 * 2.2f;
						this.itemRotation = (num33 * 3.1415927f * 1.6f + -1.5707964f) * num25 * (float)(-(float)this.direction) + 3.1415927f;
						float num35 = (num33 * 3.1415927f * 0.6f + 1.2566371f) * (float)(-(float)this.direction) + 3.1415927f - 0.7853982f + 3.1415927f;
						if (this.direction == 1)
						{
							num35 += 1.5707964f;
						}
						float rotation6 = num35 + num34;
						float rotation7 = num35 - num34;
						Vector2 value4 = (num35 + 1.5707964f).ToRotationVector2() * (-5f * (1f - num33));
						this.itemLocation = (this.MountedCenter + value4).Floor();
						this.SetCompositeArmFront(true, stretch8, rotation6);
						this.SetCompositeArmBack(true, stretch9, rotation7);
					}
					this.FlipItemLocationAndRotationForGravity();
					return;
				}
				if (sItem.useStyle == 12)
				{
					this.itemRotation = 0f;
					this.itemLocation.X = this.MountedCenter.X - (float)(8 * this.direction);
					this.itemLocation.Y = this.position.Y + 40f + mountOffset;
					Vector2 value5 = Main.OffsetsPlayerHeadgear[this.bodyFrame.Y / 56];
					this.itemLocation += value5;
					float num36 = (float)this.itemAnimationMax;
					if (num36 == 0f)
					{
						num36 = (float)sItem.useAnimation;
					}
					float num37 = 1f - (float)this.itemAnimation / num36;
					num37 *= 2f;
					float num38 = (float)Math.Cos((double)(num37 * 3.1415927f)) * 0.2f;
					Player.CompositeArmStretchAmount compositeArmStretchAmount = Player.CompositeArmStretchAmount.Full;
					if (num37 > 0.25f && num37 <= 0.5f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.ThreeQuarters;
					}
					if (num37 > 0.5f && num37 <= 0.75f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.Quarter;
					}
					if (num37 > 0.75f && num37 <= 1.25f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.None;
					}
					if (num37 > 1.25f && num37 <= 1.5f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.Quarter;
					}
					if (num37 > 1.5f && num37 <= 1.75f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.ThreeQuarters;
					}
					if (num37 > 1.75f && num37 <= 2f)
					{
						compositeArmStretchAmount = Player.CompositeArmStretchAmount.Full;
					}
					this.SetCompositeArmFront(true, compositeArmStretchAmount, (-0.7853982f + num38) * (float)this.direction);
					Player.CompositeArmStretchAmount stretch10 = Player.CompositeArmStretchAmount.Quarter;
					this.SetCompositeArmBack(true, stretch10, (-0.7853982f - num38 * 0.5f) * (float)this.direction);
					this.FlipItemLocationAndRotationForGravity();
					if (sItem.type == 4715 && compositeArmStretchAmount == Player.CompositeArmStretchAmount.ThreeQuarters)
					{
						Vector2 position2 = this.itemLocation + new Vector2((float)heldItemFrame.Width, (float)(-(float)heldItemFrame.Height)) * new Vector2((float)this.direction, this.gravDir) * 0.3f;
						Dust dust2 = Dust.NewDustPerfect(position2, 228, new Vector2?(Main.rand.NextVector2CircularEdge(1f, 1f)), 0, default(Color), 1f);
						dust2.noGravity = true;
						dust2.noLight = true;
						dust2.velocity *= 2f;
						float num39 = 0.5f;
						for (float num40 = 0f; num40 < 1f; num40 += 0.5f)
						{
							if (Main.rand.Next(3) == 0)
							{
								Dust dust3 = Dust.NewDustPerfect(position2, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num40 * 6.2831855f + Main.rand.NextFloat() * num39 - num39 * 0.5f + 1.5707964f), default(Vector2)) * (2f + Main.rand.NextFloat() * 1f)), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f), 0.45f);
								dust3.noGravity = true;
								dust3.velocity *= 0.5f;
								dust3.customData = this;
								dust3.position += dust3.velocity * 6f;
							}
						}
						for (float num41 = 0f; num41 < 1f; num41 += 0.5f)
						{
							if (Main.rand.Next(3) == 0)
							{
								Dust dust4 = Dust.NewDustPerfect(position2, 278, new Vector2?(Vector2.UnitY.RotatedBy((double)(num41 * 6.2831855f + Main.rand.NextFloat() * num39 - num39 * 0.5f + 1.5707964f), default(Vector2)) * (0.5f + Main.rand.NextFloat() * 1f)), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat() * 0.5f + 0.5f), 0.45f);
								dust4.noGravity = true;
								dust4.velocity *= 0.5f;
								dust4.customData = this;
								dust4.position += dust4.velocity * 6f;
							}
						}
						return;
					}
				}
				else if (sItem.useStyle == 14)
				{
					if (Main.dedServ)
					{
						return;
					}
					this.itemRotation = 0f;
					this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
					this.itemLocation.Y = this.position.Y + 40f + mountOffset - 8f;
					Vector2 value6 = Main.OffsetsPlayerHeadgear[this.bodyFrame.Y / 56];
					this.itemLocation += value6;
					Player.CompositeArmStretchAmount stretch11 = Player.CompositeArmStretchAmount.Full;
					this.SetCompositeArmBack(true, stretch11, -2.3561945f * (float)this.direction);
					this.FlipItemLocationAndRotationForGravity();
				}
			}
		}

		// Token: 0x0600090C RID: 2316 RVA: 0x0032A2AC File Offset: 0x003284AC
		public void FlipItemLocationAndRotationForGravity()
		{
			if (this.gravDir != -1f)
			{
				return;
			}
			this.itemRotation = -this.itemRotation;
			float num = this.position.Y - this.itemLocation.Y;
			this.itemLocation.Y = base.Bottom.Y + num;
		}

		// Token: 0x0600090D RID: 2317 RVA: 0x0032A304 File Offset: 0x00328504
		private void ItemCheck_StartActualUse(Item sItem)
		{
			bool flag = sItem.type == 4711;
			if (sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0 || flag)
			{
				this.toolTime = 1;
			}
			if (this.grappling[0] > -1)
			{
				this.pulley = false;
				this.pulleyDir = 1;
				if (this.controlRight)
				{
					this.direction = 1;
				}
				else if (this.controlLeft)
				{
					this.direction = -1;
				}
			}
			this.StartChanneling(sItem);
			this.attackCD = 0;
			this.ResetMeleeHitCooldowns();
			this.ApplyItemAnimation(sItem);
			bool flag2 = ItemID.Sets.SkipsInitialUseSound[sItem.type];
			if (sItem.UseSound != null && !flag2)
			{
				SoundEngine.PlaySound(sItem.UseSound, base.Center);
			}
		}

		// Token: 0x0600090E RID: 2318 RVA: 0x0032A3C8 File Offset: 0x003285C8
		private void FreeUpPetsAndMinions(Item sItem)
		{
			if (ProjectileID.Sets.MinionSacrificable[sItem.shoot])
			{
				List<int> list = new List<int>();
				float num = 0f;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].minion)
					{
						int j;
						for (j = 0; j < list.Count; j++)
						{
							if (Main.projectile[list[j]].minionSlots > Main.projectile[i].minionSlots)
							{
								list.Insert(j, i);
								break;
							}
						}
						if (j == list.Count)
						{
							list.Add(i);
						}
						num += Main.projectile[i].minionSlots;
					}
				}
				float num2 = (float)ItemID.Sets.StaffMinionSlotsRequired[sItem.type];
				float num3 = 0f;
				int num4 = 388;
				int num5 = -1;
				for (int k = 0; k < list.Count; k++)
				{
					int type = Main.projectile[list[k]].type;
					if (type == 626)
					{
						list.RemoveAt(k);
						k--;
					}
					if (type == 627)
					{
						if (Main.projectile[(int)Main.projectile[list[k]].localAI[1]].type == 628)
						{
							num5 = list[k];
						}
						list.RemoveAt(k);
						k--;
					}
				}
				if (num5 != -1)
				{
					list.Add(num5);
					list.Add(Projectile.GetByUUID(Main.projectile[num5].owner, Main.projectile[num5].ai[0]));
				}
				int num6 = 0;
				while (num6 < list.Count && num - num3 > (float)this.maxMinions - num2)
				{
					int type2 = Main.projectile[list[num6]].type;
					if (type2 != num4 && type2 != 625 && type2 != 628 && type2 != 623)
					{
						if (type2 == 388 && num4 == 387)
						{
							num4 = 388;
						}
						if (type2 == 387 && num4 == 388)
						{
							num4 = 387;
						}
						num3 += Main.projectile[list[num6]].minionSlots;
						if (type2 == 626 || type2 == 627)
						{
							Projectile projectile = Main.projectile[list[num6]];
							int byUUID = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
							if (Main.projectile.IndexInRange(byUUID))
							{
								Projectile projectile2 = Main.projectile[byUUID];
								if (projectile2.type != 625)
								{
									projectile2.localAI[1] = projectile.localAI[1];
								}
								projectile2 = Main.projectile[(int)projectile.localAI[1]];
								projectile2.ai[0] = projectile.ai[0];
								projectile2.ai[1] = 1f;
								projectile2.netUpdate = true;
							}
						}
						Main.projectile[list[num6]].Kill();
					}
					num6++;
				}
				list.Clear();
				if (num + num2 >= 9f)
				{
					AchievementsHelper.HandleSpecialEvent(this, 6);
					return;
				}
			}
			else
			{
				for (int l = 0; l < 1000; l++)
				{
					Projectile projectile3 = Main.projectile[l];
					if (projectile3.active && projectile3.owner == this.whoAmI)
					{
						if (projectile3.type == sItem.shoot)
						{
							projectile3.Kill();
						}
						if (sItem.shoot == 72 && (projectile3.type == 86 || projectile3.type == 87))
						{
							projectile3.Kill();
						}
						if (sItem.type == 5131 && (projectile3.type == 881 || projectile3.type == 934))
						{
							projectile3.Kill();
						}
					}
				}
			}
		}

		// Token: 0x0600090F RID: 2319 RVA: 0x0032A7B8 File Offset: 0x003289B8
		private void ApplyPotionDelay(Item sItem)
		{
			if (sItem.type == 3001)
			{
				int minValue = 2400;
				int num = 4200;
				this.potionDelay = Main.rand.Next(minValue, num + 1);
				if (this.pStone)
				{
					this.potionDelay = (int)((float)this.potionDelay * Player.PhilosopherStoneDurationMultiplier);
				}
				this.AddBuff(21, this.potionDelay, true, false);
				return;
			}
			if (sItem.type == 227)
			{
				this.potionDelay = this.restorationDelayTime;
				this.AddBuff(21, this.potionDelay, true, false);
				return;
			}
			if (sItem.type == 5)
			{
				this.potionDelay = this.mushroomDelayTime;
				this.AddBuff(21, this.potionDelay, true, false);
				this.TryToResetHungerToNeutral();
				return;
			}
			this.potionDelay = this.potionDelayTime;
			this.AddBuff(21, this.potionDelay, true, false);
		}

		// Token: 0x06000910 RID: 2320 RVA: 0x0032A894 File Offset: 0x00328A94
		private void ApplyLifeAndOrMana(Item item)
		{
			int num = item.healLife;
			int healMana = item.healMana;
			if (item.type == 3001)
			{
				int healLife = item.healLife;
				int num2 = 120;
				num = Main.rand.Next(healLife, num2 + 1);
				if (Main.myPlayer == this.whoAmI)
				{
					float num3 = Main.rand.NextFloat();
					int num4 = 0;
					if (num3 <= 0.1f)
					{
						num4 = 240;
					}
					else if (num3 <= 0.3f)
					{
						num4 = 120;
					}
					else if (num3 <= 0.6f)
					{
						num4 = 60;
					}
					if (num4 > 0)
					{
						this.SetImmuneTimeForAllTypes(num4);
					}
				}
			}
			this.statLife += num;
			this.statMana += healMana;
			if (this.statLife > this.statLifeMax2)
			{
				this.statLife = this.statLifeMax2;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			if (num > 0 && Main.myPlayer == this.whoAmI)
			{
				this.HealEffect(num, true);
			}
			if (healMana > 0)
			{
				this.AddBuff(94, Player.manaSickTime, true, false);
				if (Main.myPlayer == this.whoAmI)
				{
					this.ManaEffect(healMana);
				}
			}
		}

		// Token: 0x06000911 RID: 2321 RVA: 0x0032A9BC File Offset: 0x00328BBC
		private bool ItemCheck_CheckCanUse(Item sItem)
		{
			int whoAmI = this.whoAmI;
			bool flag = true;
			int num = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
			int num2 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
			if (this.gravDir == -1f)
			{
				num2 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
			}
			if (sItem.type == 3335 && (this.extraAccessory || !Main.expertMode))
			{
				flag = false;
			}
			if (this.pulley && sItem.fishingPole > 0)
			{
				flag = false;
			}
			if (this.pulley && ItemID.Sets.IsAKite[sItem.type])
			{
				flag = false;
			}
			if (sItem.type == 3611 && (WiresUI.Settings.ToolMode & (WiresUI.Settings.MultiToolMode.Red | WiresUI.Settings.MultiToolMode.Green | WiresUI.Settings.MultiToolMode.Blue | WiresUI.Settings.MultiToolMode.Yellow | WiresUI.Settings.MultiToolMode.Actuator)) == (WiresUI.Settings.MultiToolMode)0)
			{
				flag = false;
			}
			if (sItem.type == 5451 && this.ownedProjectileCounts[1020] > 0)
			{
				flag = false;
			}
			if ((sItem.type == 3611 || sItem.type == 3625) && this.wireOperationsCooldown > 0)
			{
				flag = false;
			}
			if (!this.CheckDD2CrystalPaymentLock(sItem))
			{
				flag = false;
			}
			if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && !this.downedDD2EventAnyDifficulty && !DD2Event.Ongoing)
			{
				flag = false;
			}
			if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && DD2Event.Ongoing && whoAmI == Main.myPlayer)
			{
				int worldX;
				int worldY;
				int num3;
				this.FindSentryRestingSpot(sItem.shoot, out worldX, out worldY, out num3);
				if (Player.WouldSpotOverlapWithSentry(worldX, worldY, sItem.shoot == 688 || sItem.shoot == 689 || sItem.shoot == 690))
				{
					flag = false;
				}
			}
			if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && whoAmI == Main.myPlayer)
			{
				int num4;
				int num5;
				int num6;
				this.FindSentryRestingSpot(sItem.shoot, out num4, out num5, out num6);
				num4 /= 16;
				num5 /= 16;
				num5--;
				if (sItem.shoot == 688 || sItem.shoot == 689 || sItem.shoot == 690)
				{
					if (Collision.SolidTiles(num4, num4, num5 - 2, num5))
					{
						flag = false;
					}
				}
				else if (WorldGen.SolidTile(num4, num5, false))
				{
					flag = false;
				}
			}
			if (this.wet && (sItem.shoot == 85 || sItem.shoot == 15 || sItem.shoot == 34))
			{
				flag = false;
			}
			if (sItem.makeNPC > 0 && !NPC.CanReleaseNPCs(this.whoAmI))
			{
				flag = false;
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 603 && !Main.runningCollectorsEdition)
			{
				flag = false;
			}
			if (sItem.type == 1071 || sItem.type == 1072)
			{
				bool flag2 = false;
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].PaintOrCoating)
					{
						flag2 = true;
						break;
					}
				}
				if (!flag2)
				{
					flag = false;
				}
			}
			if (this.noItems)
			{
				flag = false;
			}
			if (sItem.tileWand > 0)
			{
				int tileWand = sItem.tileWand;
				flag = false;
				for (int j = 0; j < 58; j++)
				{
					if (tileWand == this.inventory[j].type && this.inventory[j].stack > 0)
					{
						flag = true;
						break;
					}
				}
			}
			if (sItem.shoot == 6 || sItem.shoot == 19 || sItem.shoot == 33 || sItem.shoot == 52 || sItem.shoot == 113 || sItem.shoot == 320 || sItem.shoot == 333 || sItem.shoot == 383 || sItem.shoot == 491 || sItem.shoot == 867 || sItem.shoot == 902 || sItem.shoot == 866)
			{
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == sItem.shoot)
					{
						flag = false;
					}
				}
			}
			if (sItem.shoot == 106)
			{
				int num7 = 0;
				for (int l = 0; l < 1000; l++)
				{
					if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == sItem.shoot)
					{
						num7++;
					}
				}
				if (num7 >= 6)
				{
					flag = false;
				}
			}
			if (sItem.shoot == 272)
			{
				int num8 = 0;
				for (int m = 0; m < 1000; m++)
				{
					if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type == sItem.shoot)
					{
						num8++;
					}
				}
				if (num8 >= 10)
				{
					flag = false;
				}
			}
			if (sItem.shoot == 1000)
			{
				int num9 = 0;
				for (int n = 0; n < 1000; n++)
				{
					if (Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type == sItem.shoot)
					{
						num9++;
					}
				}
				if (num9 >= 3)
				{
					flag = false;
				}
			}
			if (sItem.shoot == 13 || sItem.shoot == 32 || (sItem.shoot >= 230 && sItem.shoot <= 235) || sItem.shoot == 315 || sItem.shoot == 331 || sItem.shoot == 372)
			{
				for (int num10 = 0; num10 < 1000; num10++)
				{
					if (Main.projectile[num10].active && Main.projectile[num10].owner == Main.myPlayer && Main.projectile[num10].type == sItem.shoot && Main.projectile[num10].ai[0] != 2f)
					{
						flag = false;
					}
				}
			}
			if (sItem.shoot == 332)
			{
				int num11 = 0;
				for (int num12 = 0; num12 < 1000; num12++)
				{
					if (Main.projectile[num12].active && Main.projectile[num12].owner == Main.myPlayer && Main.projectile[num12].type == sItem.shoot && Main.projectile[num12].ai[0] != 2f)
					{
						num11++;
					}
				}
				if (num11 >= 3)
				{
					flag = false;
				}
			}
			if (sItem.potion && this.potionDelay > 0)
			{
				flag = false;
			}
			if (sItem.mana > 0 && this.silence)
			{
				flag = false;
			}
			if (sItem.mana > 0 && flag)
			{
				flag = this.ItemCheck_PayMana(sItem, flag);
			}
			if (sItem.type == 43 && Main.IsItDay())
			{
				flag = false;
			}
			if (sItem.type == 544 && Main.IsItDay())
			{
				flag = false;
			}
			if (sItem.type == 556 && Main.IsItDay())
			{
				flag = false;
			}
			if (sItem.type == 557 && Main.IsItDay())
			{
				flag = false;
			}
			if (sItem.type == 70 && !this.ZoneCorrupt)
			{
				flag = false;
			}
			if (sItem.type == 1133 && !this.ZoneJungle)
			{
				flag = false;
			}
			if (sItem.type == 5120 && !this.ZoneSnow)
			{
				flag = false;
			}
			if (sItem.type == 1844 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
			{
				flag = false;
			}
			if (sItem.type == 1958 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
			{
				flag = false;
			}
			if (sItem.type == 2767 && (!Main.dayTime || Main.eclipse || !Main.hardMode))
			{
				flag = false;
			}
			if (sItem.type == 4271 && (Main.dayTime || Main.bloodMoon))
			{
				flag = false;
			}
			if (sItem.type == 3601 && (!NPC.downedGolemBoss || !Main.hardMode || NPC.AnyDanger(false, false) || NPC.AnyoneNearCultists()))
			{
				flag = false;
			}
			if (!this.SummonItemCheck(sItem))
			{
				flag = false;
			}
			if (sItem.shoot == 17 && flag && whoAmI == Main.myPlayer && !Player.ItemCheck_IsValidDirtRodTarget(Main.tile[num, num2]))
			{
				flag = false;
			}
			if (sItem.chlorophyteExtractinatorConsumable && flag && whoAmI == Main.myPlayer)
			{
				Tile tile = Main.tile[num, num2];
				if (!tile.active() || (tile.type != 642 && tile.type != 219))
				{
					flag = false;
				}
			}
			if (sItem.fishingPole > 0)
			{
				flag = this.ItemCheck_CheckFishingBobbers(flag);
			}
			if (ItemID.Sets.HasAProjectileThatHasAUsabilityCheck[sItem.type])
			{
				flag = this.ItemCheck_CheckUsabilityOfProjectiles(flag);
			}
			if (sItem.shoot == 17 && flag && whoAmI == Main.myPlayer)
			{
				if (Player.ItemCheck_IsValidDirtRodTarget(Main.tile[num, num2]))
				{
					WorldGen.KillTile(num, num2, false, false, true);
					if (!Main.tile[num, num2].active())
					{
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 4, (float)num, (float)num2, 0f, 0, 0, 0);
						}
					}
					else
					{
						flag = false;
					}
				}
				else
				{
					flag = false;
				}
			}
			if (flag)
			{
				flag = this.HasAmmo(sItem, flag);
			}
			return flag;
		}

		// Token: 0x06000912 RID: 2322 RVA: 0x0032B30C File Offset: 0x0032950C
		private bool ItemCheck_CheckUsabilityOfProjectiles(bool canUse)
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == this.whoAmI)
				{
					projectile.CheckUsability(this, ref canUse);
				}
			}
			return canUse;
		}

		// Token: 0x06000913 RID: 2323 RVA: 0x0032B354 File Offset: 0x00329554
		private bool ItemCheck_CheckFishingBobbers(bool canUse)
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == this.whoAmI && projectile.bobber)
				{
					canUse = false;
					if (this.whoAmI == Main.myPlayer && projectile.ai[0] == 0f)
					{
						projectile.ai[0] = 1f;
						float num = -10f;
						if (projectile.wet && projectile.velocity.Y > num)
						{
							projectile.velocity.Y = num;
						}
						projectile.netUpdate2 = true;
						if (projectile.ai[1] < 0f && projectile.localAI[1] != 0f)
						{
							bool flag;
							int baitTypeUsed;
							this.ItemCheck_CheckFishingBobber_PickAndConsumeBait(projectile, out flag, out baitTypeUsed);
							if (flag)
							{
								this.ItemCheck_CheckFishingBobber_PullBobber(projectile, baitTypeUsed);
							}
						}
					}
				}
			}
			return canUse;
		}

		// Token: 0x06000914 RID: 2324 RVA: 0x0032B43C File Offset: 0x0032963C
		private void ItemCheck_CheckFishingBobber_PullBobber(Projectile bobber, int baitTypeUsed)
		{
			if (baitTypeUsed == 2673)
			{
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(this.whoAmI, 370);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, this.whoAmI, 370f, 0f, 0f, 0, 0, 0);
				}
				bobber.ai[0] = 2f;
			}
			else if (bobber.localAI[1] < 0f)
			{
				Point point = new Point((int)bobber.position.X, (int)bobber.position.Y);
				int num = (int)(-(int)bobber.localAI[1]);
				if (num == 618)
				{
					point.Y += 64;
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendData(130, -1, -1, null, point.X / 16, (float)(point.Y / 16), (float)num, 0f, 0, 0, 0);
				}
				else
				{
					if (num == 682)
					{
						NPC.unlockedSlimeRedSpawn = true;
					}
					NPC.NewNPC(new EntitySource_FishedOut(this), point.X, point.Y, num, 0, 0f, 0f, 0f, 0f, 255);
					bobber.ai[0] = 2f;
					WorldGen.CheckAchievement_RealEstateAndTownSlimes();
				}
			}
			else if (Main.rand.Next(7) == 0 && !this.accFishingLine)
			{
				bobber.ai[0] = 2f;
			}
			else
			{
				bobber.ai[1] = bobber.localAI[1];
			}
			bobber.netUpdate = true;
		}

		// Token: 0x06000915 RID: 2325 RVA: 0x0032B5B8 File Offset: 0x003297B8
		private void ItemCheck_CheckFishingBobber_PickAndConsumeBait(Projectile bobber, out bool pullTheBobber, out int baitTypeUsed)
		{
			pullTheBobber = false;
			baitTypeUsed = 0;
			int num = -1;
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].bait > 0)
				{
					num = i;
					break;
				}
			}
			if (num == -1)
			{
				for (int j = 0; j < 50; j++)
				{
					if (this.inventory[j].stack > 0 && this.inventory[j].bait > 0)
					{
						num = j;
						break;
					}
				}
			}
			if (num > -1)
			{
				Item item = this.inventory[num];
				bool flag = false;
				float num2 = 1f + (float)item.bait / 6f;
				if (num2 < 1f)
				{
					num2 = 1f;
				}
				if (this.accTackleBox)
				{
					num2 += 1f;
				}
				if (Main.rand.NextFloat() * num2 < 1f)
				{
					flag = true;
				}
				if (bobber.localAI[1] == -1f)
				{
					flag = true;
				}
				if (bobber.localAI[1] > 0f)
				{
					Item item2 = new Item();
					item2.SetDefaults((int)bobber.localAI[1]);
					if (item2.rare < 0)
					{
						flag = false;
					}
				}
				baitTypeUsed = item.type;
				if (baitTypeUsed == 2895)
				{
					flag = (Main.rand.Next(20) == 0);
				}
				if (baitTypeUsed == 2673)
				{
					flag = true;
				}
				if (flag)
				{
					if (item.type == 4361 || item.type == 4362)
					{
						NPC.LadyBugKilled(base.Center, item.type == 4362);
					}
					item.stack--;
					if (item.stack <= 0)
					{
						item.SetDefaults(0);
					}
				}
				pullTheBobber = true;
			}
		}

		// Token: 0x06000916 RID: 2326 RVA: 0x0032B760 File Offset: 0x00329960
		private static bool ItemCheck_IsValidDirtRodTarget(Tile t)
		{
			return t.active() && (t.type == 0 || t.type == 2 || t.type == 23 || t.type == 109 || t.type == 199 || t.type == 477 || t.type == 492);
		}

		// Token: 0x06000917 RID: 2327 RVA: 0x0032B7C8 File Offset: 0x003299C8
		private bool ItemCheck_PayMana(Item sItem, bool canUse)
		{
			bool flag = this.altFunctionUse == 2;
			bool flag2 = false;
			int num = (int)((float)sItem.mana * this.manaCost);
			if (sItem.type == 2795)
			{
				flag2 = true;
			}
			if (sItem.type == 3852 && flag)
			{
				num = (int)((float)(sItem.mana * 2) * this.manaCost);
			}
			if (sItem.shoot > 0 && ProjectileID.Sets.TurretFeature[sItem.shoot] && flag)
			{
				flag2 = true;
			}
			if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] && flag)
			{
				flag2 = true;
			}
			if (sItem.type == 3006)
			{
				flag2 = true;
			}
			if (sItem.type != 3269 && (!this.spaceGun || (sItem.type != 127 && sItem.type != 4347 && sItem.type != 4348)))
			{
				if (this.statMana >= num)
				{
					if (!flag2)
					{
						this.statMana -= num;
					}
				}
				else if (this.manaFlower)
				{
					this.QuickMana();
					if (this.statMana >= num)
					{
						if (!flag2)
						{
							this.statMana -= num;
						}
					}
					else
					{
						canUse = false;
					}
				}
				else
				{
					canUse = false;
				}
			}
			return canUse;
		}

		// Token: 0x06000918 RID: 2328 RVA: 0x0032B8F8 File Offset: 0x00329AF8
		private void ItemCheck_TryPlacingWearablesOnMannequins(Item sItem)
		{
			if (this.controlUseItem && this.releaseUseItem && (sItem.headSlot > 0 || sItem.bodySlot > 0 || sItem.legSlot > 0))
			{
				if (sItem.useStyle == 0)
				{
					this.releaseUseItem = false;
				}
				if (this.position.X / 16f - (float)Player.tileRangeX - (float)sItem.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)sItem.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)sItem.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)sItem.tileBoost - 2f >= (float)Player.tileTargetY)
				{
					int num = Player.tileTargetX;
					int num2 = Player.tileTargetY;
					if (Main.tile[num, num2].active() && (Main.tile[num, num2].type == 128 || Main.tile[num, num2].type == 269))
					{
						int num3 = (int)Main.tile[num, num2].frameY;
						int i = 0;
						if (sItem.bodySlot >= 0)
						{
							i = 1;
						}
						if (sItem.legSlot >= 0)
						{
							i = 2;
						}
						num3 /= 18;
						while (i > num3)
						{
							num2++;
							num3 = (int)Main.tile[num, num2].frameY;
							num3 /= 18;
						}
						while (i < num3)
						{
							num2--;
							num3 = (int)Main.tile[num, num2].frameY;
							num3 /= 18;
						}
						int j;
						for (j = (int)Main.tile[num, num2].frameX; j >= 100; j -= 100)
						{
						}
						if (j >= 36)
						{
							j -= 36;
						}
						num -= j / 18;
						int k = (int)Main.tile[num, num2].frameX;
						WorldGen.KillTile(num, num2, true, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, (float)num, (float)num2, 1f, 0, 0, 0);
						}
						while (k >= 100)
						{
							k -= 100;
						}
						if (num3 == 0 && sItem.headSlot >= 0)
						{
							Main.blockMouse = true;
							Main.tile[num, num2].frameX = (short)(k + sItem.headSlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num, num2, TileChangeType.None);
							}
							sItem.stack--;
							if (sItem.stack <= 0)
							{
								sItem.SetDefaults(0);
								Main.mouseItem.SetDefaults(0);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = sItem.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
							return;
						}
						if (num3 == 1 && sItem.bodySlot >= 0)
						{
							Main.blockMouse = true;
							Main.tile[num, num2].frameX = (short)(k + sItem.bodySlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num, num2, TileChangeType.None);
							}
							sItem.stack--;
							if (sItem.stack <= 0)
							{
								sItem.SetDefaults(0);
								Main.mouseItem.SetDefaults(0);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = sItem.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
							return;
						}
						if (num3 == 2 && sItem.legSlot >= 0 && !ArmorIDs.Legs.Sets.MannequinIncompatible.Contains(sItem.legSlot))
						{
							Main.blockMouse = true;
							Main.tile[num, num2].frameX = (short)(k + sItem.legSlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num, num2, TileChangeType.None);
							}
							sItem.stack--;
							if (sItem.stack <= 0)
							{
								sItem.SetDefaults(0);
								Main.mouseItem.SetDefaults(0);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = sItem.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
						}
					}
				}
			}
		}

		// Token: 0x06000919 RID: 2329 RVA: 0x0032BD2A File Offset: 0x00329F2A
		private void ApplyReuseDelay()
		{
			this.itemAnimation = this.reuseDelay;
			this.itemTime = this.reuseDelay;
			this.reuseDelay = 0;
		}

		// Token: 0x0600091A RID: 2330 RVA: 0x0032BD4C File Offset: 0x00329F4C
		private void ItemCheck_HackHoldStyles(Item sItem)
		{
			if (sItem.fishingPole > 0)
			{
				sItem.holdStyle = 0;
				if (this.ItemTimeIsZero && this.itemAnimation == 0)
				{
					for (int i = 0; i < 1000; i++)
					{
						if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].bobber)
						{
							sItem.holdStyle = 1;
						}
					}
				}
			}
			if (ItemID.Sets.IsAKite[sItem.type])
			{
				sItem.holdStyle = 0;
				if (this.ItemTimeIsZero && this.itemAnimation == 0)
				{
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && Main.projectile[j].owner == this.whoAmI && Main.projectile[j].type == sItem.shoot)
						{
							sItem.holdStyle = 1;
							this.ChangeDir((Main.projectile[j].Center.X - base.Center.X < 0f) ? -1 : 1);
						}
					}
				}
			}
		}

		// Token: 0x0600091B RID: 2331 RVA: 0x0032BE68 File Offset: 0x0032A068
		private void ItemCheck_HandleMPItemAnimation(Item sItem)
		{
			if (sItem.autoReuse && !this.noItems)
			{
				this.releaseUseItem = true;
				if (this.itemAnimation == 1 && sItem.stack > 0)
				{
					if (sItem.shoot > 0 && this.whoAmI != Main.myPlayer && this.controlUseItem && sItem.useStyle == 5 && sItem.reuseDelay == 0)
					{
						this.ApplyItemAnimation(sItem);
					}
					else
					{
						this.itemAnimation = 0;
					}
				}
			}
			this.TryAllowingItemReuse(sItem);
		}

		// Token: 0x0600091C RID: 2332 RVA: 0x0032BEE4 File Offset: 0x0032A0E4
		private void TryAllowingItemReuse(Item sItem)
		{
			bool flag = false;
			if (this.autoReuseGlove)
			{
				flag |= (sItem.melee && sItem.type != 3030);
				flag |= (sItem.summon && ItemID.Sets.SummonerWeaponThatScalesWithAttackSpeed[sItem.type]);
			}
			if (this.autoReuseAllWeapons && sItem.damage > 0 && (!sItem.channel || !this.channel))
			{
				flag = true;
			}
			if (flag)
			{
				this.releaseUseItem = true;
			}
		}

		// Token: 0x0600091D RID: 2333 RVA: 0x0032BF60 File Offset: 0x0032A160
		private void ItemCheck_HandleMount()
		{
			if (!this.mount.Active)
			{
				return;
			}
			if (this.whoAmI == Main.myPlayer && this.gravDir == -1f)
			{
				this.mount.Dismount(this);
				return;
			}
			if (this.mount.Type == 8)
			{
				this.noItems = true;
				if (this.controlUseItem || this.controlUseTile)
				{
					this.StartChanneling();
					if (this.releaseUseItem && this.releaseUseTile)
					{
						this.mount.UseAbility(this, Vector2.Zero, true);
					}
					this.releaseUseItem = false;
					this.releaseUseTile = false;
				}
			}
		}

		// Token: 0x0600091E RID: 2334 RVA: 0x0032BFFD File Offset: 0x0032A1FD
		public void StartChanneling()
		{
			this.channel = true;
			this._channelShotCache = default(Player.ChannelCancelKey);
		}

		// Token: 0x0600091F RID: 2335 RVA: 0x0032C014 File Offset: 0x0032A214
		public void StartChanneling(Item item)
		{
			if (!item.channel)
			{
				return;
			}
			this.channel = true;
			this._channelShotCache = new Player.ChannelCancelKey
			{
				ProjectileTypeExpected = item.shoot
			};
		}

		// Token: 0x06000920 RID: 2336 RVA: 0x0032C04D File Offset: 0x0032A24D
		public void TryUpdateChannel(Projectile projectile)
		{
			this._channelShotCache.TryTracking(projectile);
		}

		// Token: 0x06000921 RID: 2337 RVA: 0x0032C05B File Offset: 0x0032A25B
		public void TryCancelChannel(Projectile projectile)
		{
			if (this._channelShotCache.Matches(projectile))
			{
				this.channel = false;
			}
		}

		// Token: 0x06000922 RID: 2338 RVA: 0x0032C074 File Offset: 0x0032A274
		public static bool WouldSpotOverlapWithSentry(int worldX, int worldY, bool lightningAura)
		{
			Point value = new Point(worldX, worldY - 8);
			Point value2 = new Point(worldX + 16, worldY - 8);
			Point value3 = new Point(worldX - 16, worldY - 8);
			bool result = false;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.sentry)
				{
					Rectangle hitbox = projectile.Hitbox;
					if (!lightningAura && hitbox.X > 30)
					{
						hitbox.X += hitbox.Width / 2;
						hitbox.Width = 30;
						hitbox.X -= hitbox.Width / 2;
					}
					if (hitbox.Contains(value) || hitbox.Contains(value2) || hitbox.Contains(value3))
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x06000923 RID: 2339 RVA: 0x0032C14C File Offset: 0x0032A34C
		public void FindSentryRestingSpot(int checkProj, out int worldX, out int worldY, out int pushYUp)
		{
			bool flag = false;
			Vector2 mouseWorld = Main.MouseWorld;
			this.LimitPointToPlayerReachableArea(ref mouseWorld);
			int num = (int)mouseWorld.X / 16;
			int num2 = (int)mouseWorld.Y / 16;
			worldX = num * 16 + 8;
			pushYUp = 41;
			switch (checkProj)
			{
			case 663:
				worldX += this.direction;
				break;
			case 664:
			case 666:
				break;
			case 665:
				pushYUp += 2;
				break;
			case 667:
				pushYUp += 3;
				break;
			default:
				switch (checkProj)
				{
				case 677:
					worldX += this.direction;
					break;
				case 678:
					worldX += this.direction;
					break;
				case 679:
					break;
				default:
					if (checkProj - 691 <= 2)
					{
						pushYUp = 20;
						worldX += this.direction;
						pushYUp += 2;
					}
					break;
				}
				break;
			}
			if (!flag)
			{
				while (num2 < Main.maxTilesY - 10 && Main.tile[num, num2] != null && !WorldGen.SolidTile2(num, num2) && Main.tile[num - 1, num2] != null && !WorldGen.SolidTile2(num - 1, num2) && Main.tile[num + 1, num2] != null && !WorldGen.SolidTile2(num + 1, num2))
				{
					num2++;
				}
				num2++;
			}
			num2--;
			pushYUp -= 14;
			worldY = num2 * 16;
		}

		// Token: 0x06000924 RID: 2340 RVA: 0x0032C29C File Offset: 0x0032A49C
		public void UpdateMaxTurrets()
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			List<Projectile> list = new List<Projectile>();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].WipableTurret)
				{
					list.Add(Main.projectile[i]);
				}
			}
			int num = 0;
			while (list.Count > this.maxTurrets && ++num < 1000)
			{
				Projectile projectile = list[0];
				for (int j = 1; j < list.Count; j++)
				{
					if (list[j].timeLeft < projectile.timeLeft)
					{
						projectile = list[j];
					}
				}
				projectile.Kill();
				list.Remove(projectile);
			}
		}

		// Token: 0x06000925 RID: 2341 RVA: 0x0032C350 File Offset: 0x0032A550
		private void ItemCheck_ApplyPetBuffs(Item sItem)
		{
			if (this.whoAmI == Main.myPlayer && sItem.type == 603 && Main.runningCollectorsEdition)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 669)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 115)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3060)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3628)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3062)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3577)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 425)
			{
				int num = Main.rand.Next(3);
				if (num == 0)
				{
					num = 27;
				}
				if (num == 1)
				{
					num = 101;
				}
				if (num == 2)
				{
					num = 102;
				}
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (this.buffType[i] == 27 || this.buffType[i] == 101 || this.buffType[i] == 102)
					{
						this.DelBuff(i);
						i--;
					}
				}
				this.AddBuff(num, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 753)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 994)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1169)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1170)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1171)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1172)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1180)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1181)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1182)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1183)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1242)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1157)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1309)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1311)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1837)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1312)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1798)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1799)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1802)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1810)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1927)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1959)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2364)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2365)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3043)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2420)
			{
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			int type;
			if (this.whoAmI == Main.myPlayer)
			{
				type = sItem.type;
				if (type <= 3474)
				{
					if (type <= 2587)
					{
						if (type <= 2551)
						{
							if (type != 2535 && type != 2551)
							{
								goto IL_768;
							}
						}
						else if (type != 2584 && type != 2587)
						{
							goto IL_768;
						}
					}
					else if (type <= 2749)
					{
						if (type != 2621 && type != 2749)
						{
							goto IL_768;
						}
					}
					else if (type != 3249 && type != 3474)
					{
						goto IL_768;
					}
				}
				else if (type <= 4281)
				{
					if (type <= 4269)
					{
						if (type != 3531 && type != 4269)
						{
							goto IL_768;
						}
					}
					else if (type != 4273 && type != 4281)
					{
						goto IL_768;
					}
				}
				else if (type <= 4758)
				{
					if (type != 4607 && type != 4758)
					{
						goto IL_768;
					}
				}
				else if (type != 5005 && type != 5069 && type != 5114)
				{
					goto IL_768;
				}
				this.AddBuff(sItem.buffType, 3600, true, false);
			}
			IL_768:
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			type = sItem.type;
			if (type <= 4777)
			{
				if (type <= 4551)
				{
					if (type <= 4366)
					{
						if (type - 3855 > 2 && type - 4365 > 1)
						{
							return;
						}
					}
					else if (type != 4425 && type - 4550 > 1)
					{
						return;
					}
				}
				else if (type <= 4701)
				{
					if (type - 4603 > 2 && type != 4701)
					{
						return;
					}
				}
				else if (type - 4735 > 2 && type != 4777)
				{
					return;
				}
			}
			else if (type <= 5098)
			{
				if (type <= 4960)
				{
					if (type - 4797 > 20 && type != 4960)
					{
						return;
					}
				}
				else if (type - 5088 > 3 && type != 5098)
				{
					return;
				}
			}
			else if (type <= 5276)
			{
				if (type != 5131 && type != 5276)
				{
					return;
				}
			}
			else if (type != 5297 && type - 5332 > 1 && type != 5400)
			{
				return;
			}
			this.AddBuff(sItem.buffType, 3600, true, false);
		}

		// Token: 0x06000926 RID: 2342 RVA: 0x0032CBD4 File Offset: 0x0032ADD4
		public float GetWeaponKnockback(Item sItem, float KnockBack)
		{
			if (sItem.summon)
			{
				KnockBack += this.minionKB;
			}
			if (sItem.melee && this.kbGlove)
			{
				KnockBack *= 2f;
			}
			if (this.kbBuff)
			{
				KnockBack *= 1.5f;
			}
			if (sItem.ranged && this.shroomiteStealth)
			{
				KnockBack *= 1f + (1f - this.stealth) * 0.5f;
			}
			if (sItem.ranged && this.setVortex)
			{
				KnockBack *= 1f + (1f - this.stealth) * 0.5f;
			}
			return KnockBack;
		}

		// Token: 0x06000927 RID: 2343 RVA: 0x0032CC76 File Offset: 0x0032AE76
		public int GetWeaponCrit(Item sItem)
		{
			if (sItem.melee)
			{
				return this.meleeCrit;
			}
			if (sItem.ranged)
			{
				return this.rangedCrit;
			}
			if (sItem.magic)
			{
				return this.magicCrit;
			}
			return 0;
		}

		// Token: 0x06000928 RID: 2344 RVA: 0x0032CCA8 File Offset: 0x0032AEA8
		public int GetWeaponDamage(Item sItem)
		{
			int num = sItem.damage;
			if (num > 0)
			{
				if (sItem.melee)
				{
					num = (int)((float)num * this.meleeDamage + 5E-06f);
				}
				else if (sItem.ranged)
				{
					float num2 = this.rangedDamage;
					if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
					{
						num2 = this.bowEffectiveDamage;
					}
					if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
					{
						num2 = this.gunEffectiveDamage;
					}
					if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly || sItem.useAmmo == AmmoID.Coin || sItem.useAmmo == AmmoID.Flare || sItem.useAmmo == AmmoID.Dart || sItem.useAmmo == AmmoID.Snowball || sItem.useAmmo == AmmoID.Sand || sItem.useAmmo == AmmoID.FallenStar || sItem.useAmmo == AmmoID.Gel)
					{
						num2 = this.specialistEffectiveDamage;
					}
					if (sItem.type == 1156 || sItem.type == 3350 || sItem.type == 3210 || sItem.type == 160 || sItem.type == 3821)
					{
						num2 = this.specialistEffectiveDamage;
					}
					num = (int)((float)num * num2 + 5E-06f);
				}
				else if (sItem.magic)
				{
					num = (int)((float)num * this.magicDamage + 5E-06f);
				}
				else if (sItem.summon)
				{
					num = (int)((float)num * this.minionDamage + 5E-06f);
				}
			}
			return num;
		}

		// Token: 0x06000929 RID: 2345 RVA: 0x0032CE5C File Offset: 0x0032B05C
		public bool HasAmmo(Item sItem, bool canUse)
		{
			if (sItem.useAmmo > 0)
			{
				canUse = false;
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].ammo == sItem.useAmmo && this.inventory[i].stack > 0)
					{
						canUse = true;
						break;
					}
				}
			}
			return canUse;
		}

		// Token: 0x0600092A RID: 2346 RVA: 0x0032CEB0 File Offset: 0x0032B0B0
		private bool PickAmmo_TryFindingSpecificMatches(int launcher, int ammo, out int pickedProjectileId)
		{
			pickedProjectileId = 0;
			Dictionary<int, int> dictionary;
			return AmmoID.Sets.SpecificLauncherAmmoProjectileMatches.TryGetValue(launcher, out dictionary) && dictionary.TryGetValue(ammo, out pickedProjectileId);
		}

		// Token: 0x0600092B RID: 2347 RVA: 0x0032CEDC File Offset: 0x0032B0DC
		public void PickAmmo(Item sItem, ref int projToShoot, ref float speed, ref bool canShoot, ref int Damage, ref float KnockBack, out int usedAmmoItemId, bool dontConsume = false)
		{
			Item item = new Item();
			bool flag = false;
			usedAmmoItemId = 0;
			if (sItem.useAmmo == AmmoID.Coin)
			{
				for (int i = 0; i < 4; i++)
				{
					int num = 50 + i;
					if (this.inventory[num].ammo == sItem.useAmmo && this.inventory[num].stack > 0)
					{
						item = this.inventory[num];
						canShoot = true;
						flag = true;
						break;
					}
				}
			}
			for (int j = 54; j < 58; j++)
			{
				if (this.inventory[j].ammo == sItem.useAmmo && this.inventory[j].stack > 0)
				{
					item = this.inventory[j];
					canShoot = true;
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				for (int k = 0; k < 54; k++)
				{
					if (this.inventory[k].ammo == sItem.useAmmo && this.inventory[k].stack > 0)
					{
						item = this.inventory[k];
						canShoot = true;
						break;
					}
				}
			}
			if (canShoot)
			{
				usedAmmoItemId = item.type;
				int num2 = -1;
				if (this.PickAmmo_TryFindingSpecificMatches(sItem.type, item.type, out num2))
				{
					projToShoot = num2;
				}
				else if (sItem.type == 1946)
				{
					projToShoot = 338 + item.type - 771;
				}
				else if (sItem.type == 3930)
				{
					projToShoot = 715 + item.type - AmmoID.Rocket;
				}
				else if (sItem.useAmmo == AmmoID.Rocket)
				{
					projToShoot += item.shoot;
				}
				else if (sItem.useAmmo == AmmoID.Solution)
				{
					projToShoot += item.shoot;
				}
				else if (item.shoot > 0)
				{
					projToShoot = item.shoot;
				}
				if (sItem.type == 3019 && projToShoot == 1)
				{
					projToShoot = 485;
				}
				if (sItem.type == 3052)
				{
					projToShoot = 495;
				}
				if (sItem.type == 4953 && projToShoot == 1)
				{
					projToShoot = 932;
				}
				if (sItem.type == 4381)
				{
					projToShoot = 819;
				}
				if (sItem.type == 4058 && projToShoot == 474)
				{
					projToShoot = 117;
				}
				if (projToShoot == 42)
				{
					if (item.type == 370)
					{
						projToShoot = 65;
						Damage += 5;
					}
					else if (item.type == 408)
					{
						projToShoot = 68;
						Damage += 5;
					}
					else if (item.type == 1246)
					{
						projToShoot = 354;
						Damage += 5;
					}
				}
				if (this.inventory[this.selectedItem].type == 2888 && projToShoot == 1)
				{
					projToShoot = 469;
				}
				if (this.hasMoltenQuiver && projToShoot == 1)
				{
					projToShoot = 2;
					Damage += 2;
				}
				speed += item.shootSpeed;
				if (this.magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake))
				{
					KnockBack *= 1.1f;
					speed *= 1.1f;
				}
				if (item.ranged)
				{
					if (item.damage > 0)
					{
						Damage += (int)((float)item.damage * this.rangedDamage);
					}
				}
				else
				{
					Damage += item.damage;
				}
				if ((sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake) && this.archery)
				{
					if (speed < 20f)
					{
						speed *= 1.2f;
						if (speed > 20f)
						{
							speed = 20f;
						}
					}
					Damage = (int)((double)Damage * 1.1);
				}
				KnockBack += item.knockBack;
				bool flag2 = dontConsume;
				if (sItem.type == 3475 && Main.rand.Next(3) != 0)
				{
					flag2 = true;
				}
				if (sItem.type == 3930 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 3540 && Main.rand.Next(3) != 0)
				{
					flag2 = true;
				}
				if (sItem.type == 5134 && Main.rand.Next(3) == 0)
				{
					flag2 = true;
				}
				if (this.magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake) && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoBox && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoPotion && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1782 && Main.rand.Next(3) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 98 && Main.rand.Next(3) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 2270 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 533 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1929 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1553 && Main.rand.Next(3) != 0)
				{
					flag2 = true;
				}
				if (sItem.type == 434 && !this.ItemAnimationJustStarted)
				{
					flag2 = true;
				}
				if (sItem.type == 4953 && this.itemAnimation > sItem.useAnimation - 8)
				{
					flag2 = true;
				}
				if (this.huntressAmmoCost90 && Main.rand.Next(10) == 0)
				{
					flag2 = true;
				}
				if (this.chloroAmmoCost80 && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoCost80 && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoCost75 && Main.rand.Next(4) == 0)
				{
					flag2 = true;
				}
				if (Main.remixWorld && sItem.type == 1319 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (projToShoot == 85 && this.itemAnimation < this.itemAnimationMax - sItem.useTime)
				{
					flag2 = true;
				}
				if ((sItem.type == 779 || sItem.type == 5134) && this.itemAnimation < this.itemAnimationMax - sItem.useTime)
				{
					flag2 = true;
				}
				if (!flag2 && item.consumable)
				{
					item.stack--;
					if (item.stack <= 0)
					{
						item.active = false;
						item.TurnToAir(false);
					}
				}
			}
		}

		// Token: 0x0600092C RID: 2348 RVA: 0x0032D548 File Offset: 0x0032B748
		public void GetOtherPlayersPickTile(int x, int y, int pickDamage)
		{
			int tileId = this.hitTile.HitObject(x, y, 1);
			this.hitTile.AddDamage(tileId, pickDamage, true);
		}

		// Token: 0x0600092D RID: 2349 RVA: 0x0032D574 File Offset: 0x0032B774
		public void PickTile(int x, int y, int pickPower)
		{
			int num = this.hitTile.HitObject(x, y, 1);
			Tile tile = Main.tile[x, y];
			if (tile.type == 504)
			{
				return;
			}
			int num2 = this.GetPickaxeDamage(x, y, pickPower, num, tile);
			if (!WorldGen.CanKillTile(x, y))
			{
				num2 = 0;
			}
			if (Main.getGoodWorld)
			{
				num2 *= 2;
			}
			if (this.DoesPickTargetTransformOnKill(this.hitTile, num2, x, y, pickPower, num, tile))
			{
				num2 = 0;
			}
			if (this.hitTile.AddDamage(num, num2, true) >= 100)
			{
				AchievementsHelper.CurrentlyMining = true;
				this.ClearMiningCacheAt(x, y, 1);
				if (Main.netMode == 1 && Main.tileContainer[(int)Main.tile[x, y].type])
				{
					if (Main.tile[x, y].type == 470 || Main.tile[x, y].type == 475)
					{
						NetMessage.SendData(17, -1, -1, null, 20, (float)x, (float)y, 0f, 0, 0, 0);
					}
					else
					{
						WorldGen.KillTile(x, y, true, false, false);
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 1f, 0, 0, 0);
					}
					if (Main.tile[x, y].type == 21)
					{
						NetMessage.SendData(34, -1, -1, null, 1, (float)x, (float)y, 0f, 0, 0, 0);
					}
					if (Main.tile[x, y].type == 467)
					{
						NetMessage.SendData(34, -1, -1, null, 5, (float)x, (float)y, 0f, 0, 0, 0);
					}
					if (Main.tile[x, y].type == 88)
					{
						NetMessage.SendData(34, -1, -1, null, 3, (float)x, (float)y, 0f, 0, 0, 0);
					}
				}
				else
				{
					bool flag = Main.tile[x, y].active();
					WorldGen.KillTile(x, y, false, false, false);
					if (!Main.dedServ && flag && !Main.tile[x, y].active())
					{
						AchievementsHelper.HandleMining();
					}
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 0f, 0, 0, 0);
					}
				}
				AchievementsHelper.CurrentlyMining = false;
			}
			else
			{
				WorldGen.KillTile(x, y, true, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 1f, 0, 0, 0);
					NetMessage.SendData(125, -1, -1, null, Main.myPlayer, (float)x, (float)y, (float)num2, 0, 0, 0);
				}
			}
			if (num2 != 0)
			{
				this.hitTile.Prune();
			}
		}

		// Token: 0x0600092E RID: 2350 RVA: 0x0032D7DC File Offset: 0x0032B9DC
		private void ClearMiningCacheAt(int x, int y, int hitTileCacheType)
		{
			this.hitReplace.TryClearingAndPruning(x, y, 1);
			this.hitTile.TryClearingAndPruning(x, y, 1);
		}

		// Token: 0x0600092F RID: 2351 RVA: 0x0032D7FC File Offset: 0x0032B9FC
		public bool isNearFairy()
		{
			if (NPC.npcsFoundForCheckActive[583] || NPC.npcsFoundForCheckActive[584] || NPC.npcsFoundForCheckActive[585])
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && (Main.npc[i].type == 583 || Main.npc[i].type == 584 || Main.npc[i].type == 585) && Vector2.Distance(Main.npc[i].Center, base.Center) < (float)NPC.sWidth)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000930 RID: 2352 RVA: 0x0032D8AC File Offset: 0x0032BAAC
		public bool isNearNPC(int type, float range = -1f)
		{
			if (range == -1f)
			{
				range = (float)NPC.sWidth;
			}
			if (NPC.npcsFoundForCheckActive[type])
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == type && Vector2.Distance(Main.npc[i].Center, base.Center) < range)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06000931 RID: 2353 RVA: 0x0032D91C File Offset: 0x0032BB1C
		public bool HasEnoughPickPowerToHurtTile(int x, int y)
		{
			Item bestPickaxe = this.GetBestPickaxe();
			if (bestPickaxe == null)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			ushort type = tile.type;
			int hitBufferIndex = this.hitTile.HitObject(x, y, 1);
			return this.GetPickaxeDamage(x, y, bestPickaxe.pick, hitBufferIndex, tile) != 0;
		}

		// Token: 0x06000932 RID: 2354 RVA: 0x0032D970 File Offset: 0x0032BB70
		private int GetPickaxeDamage(int x, int y, int pickPower, int hitBufferIndex, Tile tileTarget)
		{
			int num = 0;
			if (Main.tileNoFail[(int)tileTarget.type])
			{
				num = 100;
			}
			if (Main.tileDungeon[(int)tileTarget.type] || tileTarget.type == 25 || tileTarget.type == 58 || tileTarget.type == 117 || tileTarget.type == 203)
			{
				num += pickPower / 2;
			}
			else if (tileTarget.type == 85)
			{
				if (Main.getGoodWorld)
				{
					num += pickPower / 4;
				}
				else
				{
					num += pickPower / 3;
				}
			}
			else if (tileTarget.type == 48 || tileTarget.type == 232)
			{
				num += pickPower * 2;
			}
			else if (tileTarget.type == 226)
			{
				num += pickPower / 4;
			}
			else if (tileTarget.type == 107 || tileTarget.type == 221)
			{
				num += pickPower / 2;
			}
			else if (tileTarget.type == 108 || tileTarget.type == 222)
			{
				num += pickPower / 3;
			}
			else if (tileTarget.type == 111 || tileTarget.type == 223)
			{
				num += pickPower / 4;
			}
			else if (tileTarget.type == 211)
			{
				num += pickPower / 5;
			}
			else
			{
				num += pickPower;
			}
			if (tileTarget.type == 211 && pickPower < 200)
			{
				num = 0;
			}
			if ((tileTarget.type == 25 || tileTarget.type == 203) && pickPower < 65)
			{
				num = 0;
			}
			else if (tileTarget.type == 117 && pickPower < 65)
			{
				num = 0;
			}
			else if (tileTarget.type == 37 && pickPower < 50)
			{
				num = 0;
			}
			else if ((tileTarget.type == 22 || tileTarget.type == 204) && (double)y > Main.worldSurface && pickPower < 55)
			{
				num = 0;
			}
			else if (tileTarget.type == 56 && pickPower < 55)
			{
				num = 0;
			}
			else if (tileTarget.type == 77 && pickPower < 65 && y >= Main.UnderworldLayer)
			{
				num = 0;
			}
			else if (tileTarget.type == 58 && pickPower < 65)
			{
				num = 0;
			}
			else if ((tileTarget.type == 226 || tileTarget.type == 237) && pickPower < 210)
			{
				num = 0;
			}
			else if (tileTarget.type == 137 && pickPower < 210)
			{
				int num2 = (int)(tileTarget.frameY / 18);
				if (num2 - 1 <= 3)
				{
					num = 0;
				}
			}
			else if (Main.tileDungeon[(int)tileTarget.type] && pickPower < 100 && (double)y > Main.worldSurface)
			{
				if ((double)x < (double)Main.maxTilesX * 0.35 || (double)x > (double)Main.maxTilesX * 0.65)
				{
					num = 0;
				}
			}
			else if (tileTarget.type == 107 && pickPower < 100)
			{
				num = 0;
			}
			else if (tileTarget.type == 108 && pickPower < 110)
			{
				num = 0;
			}
			else if (tileTarget.type == 111 && pickPower < 150)
			{
				num = 0;
			}
			else if (tileTarget.type == 221 && pickPower < 100)
			{
				num = 0;
			}
			else if (tileTarget.type == 222 && pickPower < 110)
			{
				num = 0;
			}
			else if (tileTarget.type == 223 && pickPower < 150)
			{
				num = 0;
			}
			if (tileTarget.type == 147 || tileTarget.type == 0 || tileTarget.type == 40 || tileTarget.type == 53 || tileTarget.type == 57 || tileTarget.type == 59 || tileTarget.type == 123 || tileTarget.type == 224 || tileTarget.type == 397)
			{
				num += pickPower;
			}
			if (tileTarget.type == 404)
			{
				num += 5;
			}
			if (tileTarget.type == 165 || Main.tileRope[(int)tileTarget.type] || tileTarget.type == 199)
			{
				num = 100;
			}
			if (tileTarget.type == 128 || tileTarget.type == 269)
			{
				if (tileTarget.frameX == 18 || tileTarget.frameX == 54)
				{
					x--;
					tileTarget = Main.tile[x, y];
					this.hitTile.UpdatePosition(hitBufferIndex, x, y);
				}
				if (tileTarget.frameX >= 100)
				{
					num = 0;
					Main.blockMouse = true;
				}
			}
			if (tileTarget.type == 334)
			{
				if (tileTarget.frameY == 0)
				{
					y++;
					tileTarget = Main.tile[x, y];
					this.hitTile.UpdatePosition(hitBufferIndex, x, y);
				}
				if (tileTarget.frameY == 36)
				{
					y--;
					tileTarget = Main.tile[x, y];
					this.hitTile.UpdatePosition(hitBufferIndex, x, y);
				}
				int i = (int)tileTarget.frameX;
				bool flag = i >= 5000;
				bool flag2 = false;
				if (!flag)
				{
					int num3 = i / 18;
					num3 %= 3;
					x -= num3;
					tileTarget = Main.tile[x, y];
					if (tileTarget.frameX >= 5000)
					{
						flag = true;
					}
				}
				if (flag)
				{
					i = (int)tileTarget.frameX;
					int num4 = 0;
					while (i >= 5000)
					{
						i -= 5000;
						num4++;
					}
					if (num4 != 0)
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					num = 0;
					Main.blockMouse = true;
				}
			}
			return num;
		}

		// Token: 0x06000933 RID: 2355 RVA: 0x0032DED4 File Offset: 0x0032C0D4
		private bool DoesPickTargetTransformOnKill(HitTile hitCounter, int damage, int x, int y, int pickPower, int bufferIndex, Tile tileTarget)
		{
			return hitCounter.AddDamage(bufferIndex, damage, false) >= 100 && (tileTarget.type == 2 || tileTarget.type == 477 || tileTarget.type == 492 || tileTarget.type == 23 || tileTarget.type == 60 || tileTarget.type == 70 || tileTarget.type == 109 || tileTarget.type == 199 || Main.tileMoss[(int)tileTarget.type] || tileTarget.type == 662 || tileTarget.type == 661 || TileID.Sets.tileMossBrick[(int)tileTarget.type] || tileTarget.type == 633);
		}

		// Token: 0x06000934 RID: 2356 RVA: 0x0032DFA8 File Offset: 0x0032C1A8
		public bool ItemFitsWeaponRack(Item i)
		{
			bool flag = false;
			if (i.fishingPole > 0)
			{
				flag = true;
			}
			int netID = i.netID;
			if (netID == 905 || netID == 1326 || netID == 5335)
			{
				flag = true;
			}
			return (i.damage > 0 || flag) && i.useStyle != 0 && i.stack > 0;
		}

		// Token: 0x06000935 RID: 2357 RVA: 0x0032E004 File Offset: 0x0032C204
		public void PlaceWeapon(int x, int y)
		{
			if (!Main.tile[x, y].active() || Main.tile[x, y].type != 334)
			{
				return;
			}
			int num = (int)Main.tile[x, y].frameY;
			int i = 1;
			num /= 18;
			while (i > num)
			{
				y++;
				num = (int)Main.tile[x, y].frameY;
				num /= 18;
			}
			while (i < num)
			{
				y--;
				num = (int)Main.tile[x, y].frameY;
				num /= 18;
			}
			int j = (int)Main.tile[x, y].frameX;
			int num2 = 0;
			while (j >= 5000)
			{
				j -= 5000;
				num2++;
			}
			if (num2 != 0)
			{
				j = (num2 - 1) * 18;
			}
			bool flag = false;
			if (j >= 54)
			{
				j -= 54;
				flag = true;
			}
			x -= j / 18;
			int k = (int)Main.tile[x, y].frameX;
			WorldGen.KillTile(x, y, true, false, false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 0, (float)x, (float)y, 1f, 0, 0, 0);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 0, (float)(x + 1), (float)y, 1f, 0, 0, 0);
			}
			while (k >= 5000)
			{
				k -= 5000;
			}
			Main.blockMouse = true;
			int num3 = 5000;
			int num4 = 10000;
			if (flag)
			{
				num3 = 20000;
				num4 = 25000;
			}
			Main.tile[x, y].frameX = (short)(this.inventory[this.selectedItem].netID + num3 + 100);
			Main.tile[x + 1, y].frameX = (short)((int)this.inventory[this.selectedItem].prefix + num4);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x, y, TileChangeType.None);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x + 1, y, TileChangeType.None);
			}
			this.inventory[this.selectedItem].stack--;
			if (this.inventory[this.selectedItem].stack <= 0)
			{
				this.inventory[this.selectedItem].SetDefaults(0);
				Main.mouseItem.SetDefaults(0);
			}
			if (this.selectedItem == 58)
			{
				Main.mouseItem = this.inventory[this.selectedItem].Clone();
			}
			this.releaseUseItem = false;
			this.mouseInterface = true;
		}

		// Token: 0x06000936 RID: 2358 RVA: 0x0032E271 File Offset: 0x0032C471
		public bool ItemFitsItemFrame(Item i)
		{
			return i.stack > 0;
		}

		// Token: 0x06000937 RID: 2359 RVA: 0x0032E27C File Offset: 0x0032C47C
		public Color GetImmuneAlpha(Color newColor, float alphaReduction)
		{
			float num = (float)(255 - this.immuneAlpha) / 255f;
			if (alphaReduction > 0f)
			{
				num *= 1f - alphaReduction;
			}
			if (this.shimmerTransparency > 0f)
			{
				if ((double)this.shimmerTransparency >= 0.8)
				{
					return Color.Transparent;
				}
				num *= 1f - this.shimmerTransparency;
				num *= 1f - this.shimmerTransparency;
				num *= 1f - this.shimmerTransparency;
			}
			if (this.immuneAlpha > 125)
			{
				return Color.Transparent;
			}
			return Color.Multiply(newColor, num);
		}

		// Token: 0x06000938 RID: 2360 RVA: 0x0032E318 File Offset: 0x0032C518
		public Color GetImmuneAlphaPure(Color newColor, float alphaReduction)
		{
			float num = (float)(255 - this.immuneAlpha) / 255f;
			if (alphaReduction > 0f)
			{
				num *= 1f - alphaReduction;
			}
			if (this.shimmerTransparency > 0f)
			{
				num *= 1f - this.shimmerTransparency;
			}
			return Color.Multiply(newColor, num);
		}

		// Token: 0x06000939 RID: 2361 RVA: 0x0032E370 File Offset: 0x0032C570
		public Color GetDeathAlpha(Color newColor)
		{
			int r = (int)newColor.R + (int)((double)this.immuneAlpha * 0.9);
			int g = (int)newColor.G + (int)((double)this.immuneAlpha * 0.5);
			int b = (int)newColor.B + (int)((double)this.immuneAlpha * 0.5);
			int num = (int)newColor.A + (int)((double)this.immuneAlpha * 0.4);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			return new Color(r, g, b, num);
		}

		// Token: 0x0600093A RID: 2362 RVA: 0x0032E404 File Offset: 0x0032C604
		public void addDPS(int dmg)
		{
			if (this.dpsStarted)
			{
				this.dpsLastHit = DateTime.Now;
				this.dpsDamage += dmg;
				this.dpsEnd = DateTime.Now;
				return;
			}
			this.dpsStarted = true;
			this.dpsStart = DateTime.Now;
			this.dpsEnd = DateTime.Now;
			this.dpsLastHit = DateTime.Now;
			this.dpsDamage = dmg;
		}

		// Token: 0x0600093B RID: 2363 RVA: 0x0032E470 File Offset: 0x0032C670
		public void checkDPSTime()
		{
			int num = 3;
			if (!this.dpsStarted)
			{
				return;
			}
			if ((DateTime.Now - this.dpsLastHit).Seconds >= num)
			{
				this.dpsStarted = false;
			}
		}

		// Token: 0x0600093C RID: 2364 RVA: 0x0032E4AC File Offset: 0x0032C6AC
		public int getDPS()
		{
			TimeSpan timeSpan = this.dpsEnd - this.dpsStart;
			float num = (float)timeSpan.Milliseconds / 1000f;
			num += (float)timeSpan.Seconds;
			num += (float)timeSpan.Minutes / 60f;
			if (num >= 3f)
			{
				this.dpsStart = DateTime.Now;
				this.dpsStart = this.dpsStart.AddSeconds(-1.0);
				this.dpsDamage = (int)((float)this.dpsDamage / num);
				timeSpan = this.dpsEnd - this.dpsStart;
				num = (float)timeSpan.Milliseconds / 1000f;
				num += (float)timeSpan.Seconds;
				num += (float)timeSpan.Minutes / 60f;
			}
			if (num < 1f)
			{
				num = 1f;
			}
			return (int)((float)this.dpsDamage / num);
		}

		// Token: 0x0600093D RID: 2365 RVA: 0x0032E588 File Offset: 0x0032C788
		public long DropCoins()
		{
			IEntitySource itemSource_Death = this.GetItemSource_Death();
			long num = 0L;
			for (int i = 0; i < 59; i++)
			{
				if (this.inventory[i].IsACoin)
				{
					int num2 = Item.NewItem(itemSource_Death, (int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[i].type, 1, false, 0, false, false);
					int num3 = this.inventory[i].stack / 2;
					if (Main.expertMode)
					{
						num3 = (int)((double)this.inventory[i].stack * 0.25);
					}
					if (Main.masterMode)
					{
						num3 = 0;
					}
					num3 = this.inventory[i].stack - num3;
					this.inventory[i].stack -= num3;
					if (this.inventory[i].type == 71)
					{
						num += (long)num3;
					}
					if (this.inventory[i].type == 72)
					{
						num += (long)num3 * 100L;
					}
					if (this.inventory[i].type == 73)
					{
						num += (long)num3 * 10000L;
					}
					if (this.inventory[i].type == 74)
					{
						num += (long)num3 * 1000000L;
					}
					if (this.inventory[i].stack <= 0)
					{
						this.inventory[i] = new Item();
					}
					Main.item[num2].stack = num3;
					Main.item[num2].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
					Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
					Main.item[num2].noGrabDelay = 100;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num2, 0f, 0f, 0f, 0, 0, 0);
					}
					if (i == 58)
					{
						Main.mouseItem = this.inventory[i].Clone();
					}
				}
			}
			this.lostCoins = num;
			this.lostCoinString = Main.ValueToCoins(this.lostCoins);
			return num;
		}

		// Token: 0x0600093E RID: 2366 RVA: 0x0032E7B0 File Offset: 0x0032C9B0
		public void DropItems()
		{
			IEntitySource itemSource_Death = this.GetItemSource_Death();
			for (int i = 0; i < 59; i++)
			{
				if (this.inventory[i].stack > 0)
				{
					bool flag = true;
					int j = this.inventory[i].type;
					if (j - 3506 <= 1 || j == 3509)
					{
						flag = false;
					}
					if (flag)
					{
						this.TryDroppingSingleItem(itemSource_Death, this.inventory[i]);
					}
				}
				this.inventory[i].TurnToAir(false);
				if (i < this.armor.Length)
				{
					this.TryDroppingSingleItem(itemSource_Death, this.armor[i]);
				}
				if (i < this.dye.Length)
				{
					this.TryDroppingSingleItem(itemSource_Death, this.dye[i]);
				}
				if (i < this.miscEquips.Length)
				{
					this.TryDroppingSingleItem(itemSource_Death, this.miscEquips[i]);
				}
				if (i < this.miscDyes.Length)
				{
					this.TryDroppingSingleItem(itemSource_Death, this.miscDyes[i]);
				}
			}
			EquipmentLoadout[] loadouts = this.Loadouts;
			for (int j = 0; j < loadouts.Length; j++)
			{
				loadouts[j].TryDroppingItems(this, itemSource_Death);
			}
			this.inventory[0].SetDefaults(3507);
			this.inventory[0].Prefix(-1);
			this.inventory[1].SetDefaults(3509);
			this.inventory[1].Prefix(-1);
			this.inventory[2].SetDefaults(3506);
			this.inventory[2].Prefix(-1);
			Main.mouseItem.TurnToAir(false);
		}

		// Token: 0x0600093F RID: 2367 RVA: 0x0032E924 File Offset: 0x0032CB24
		public void TryDroppingSingleItem(IEntitySource source, Item theItem)
		{
			if (theItem.stack > 0)
			{
				int num = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, theItem.type, 1, false, 0, false, false);
				Item item = Main.item[num];
				item.netDefaults(theItem.netID);
				item.Prefix((int)theItem.prefix);
				item.stack = theItem.stack;
				item.velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
				item.velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
				item.noGrabDelay = 100;
				item.newAndShiny = false;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			theItem.TurnToAir(true);
		}

		// Token: 0x06000940 RID: 2368 RVA: 0x00005D11 File Offset: 0x00003F11
		public object Clone()
		{
			return base.MemberwiseClone();
		}

		// Token: 0x06000941 RID: 2369 RVA: 0x0032EA18 File Offset: 0x0032CC18
		public void CopyVisuals(Player other)
		{
			this.skinVariant = other.skinVariant;
			this.direction = other.direction;
			this.selectedItem = other.selectedItem;
			this.extraAccessory = other.extraAccessory;
			this.skinColor = other.skinColor;
			this.eyeColor = other.eyeColor;
			this.hair = other.hair;
			this.hairColor = other.hairColor;
			this.shirtColor = other.shirtColor;
			this.underShirtColor = other.underShirtColor;
			this.pantsColor = other.pantsColor;
			this.shoeColor = other.shoeColor;
			this.position = other.position;
			this.velocity = other.velocity;
			this.statLife = other.statLife;
			this.statLifeMax = other.statLifeMax;
			this.statLifeMax2 = other.statLifeMax2;
			this.statMana = other.statMana;
			this.statManaMax = other.statManaMax;
			this.statManaMax2 = other.statManaMax2;
			this.hideMisc = other.hideMisc;
			for (int i = 0; i < 59; i++)
			{
				this.inventory[i] = other.inventory[i].Clone();
				if (i < this.armor.Length)
				{
					this.armor[i] = other.armor[i].Clone();
				}
				if (i < this.dye.Length)
				{
					this.dye[i] = other.dye[i].Clone();
				}
				if (i < this.miscEquips.Length)
				{
					this.miscEquips[i] = other.miscEquips[i].Clone();
				}
				if (i < this.miscDyes.Length)
				{
					this.miscDyes[i] = other.miscDyes[i].Clone();
				}
				if (i < this.hideVisibleAccessory.Length)
				{
					this.hideVisibleAccessory[i] = other.hideVisibleAccessory[i];
				}
			}
		}

		// Token: 0x06000942 RID: 2370 RVA: 0x0032EBE4 File Offset: 0x0032CDE4
		public Player clientClone()
		{
			Player player = new Player();
			player.zone1 = this.zone1;
			player.zone2 = this.zone2;
			player.zone3 = this.zone3;
			player.zone4 = this.zone4;
			player.zone5 = this.zone5;
			player.voidVaultInfo = this.voidVaultInfo;
			player.luck = this.luck;
			player.extraAccessory = this.extraAccessory;
			player.MinionRestTargetPoint = this.MinionRestTargetPoint;
			player.MinionAttackTargetNPC = this.MinionAttackTargetNPC;
			player.direction = this.direction;
			player.selectedItem = this.selectedItem;
			player.controlUp = this.controlUp;
			player.controlDown = this.controlDown;
			player.controlLeft = this.controlLeft;
			player.controlRight = this.controlRight;
			player.controlJump = this.controlJump;
			player.controlUseItem = this.controlUseItem;
			player.controlDownHold = this.controlDownHold;
			player.isOperatingAnotherEntity = this.isOperatingAnotherEntity;
			player.autoReuseAllWeapons = this.autoReuseAllWeapons;
			player.statLife = this.statLife;
			player.statLifeMax = this.statLifeMax;
			player.statMana = this.statMana;
			player.statManaMax = this.statManaMax;
			player.position.X = this.position.X;
			player.tileEntityAnchor = this.tileEntityAnchor;
			player.chest = this.chest;
			player.talkNPC = this.talkNPC;
			player.piggyBankProjTracker = this.piggyBankProjTracker;
			player.voidLensChest = this.voidLensChest;
			player.hideVisibleAccessory = this.hideVisibleAccessory;
			player.hideMisc = this.hideMisc;
			player.shieldRaised = this.shieldRaised;
			for (int i = 0; i < 59; i++)
			{
				player.inventory[i] = this.inventory[i].Clone();
				if (i < this.armor.Length)
				{
					player.armor[i] = this.armor[i].Clone();
				}
				if (i < this.dye.Length)
				{
					player.dye[i] = this.dye[i].Clone();
				}
				if (i < this.miscEquips.Length)
				{
					player.miscEquips[i] = this.miscEquips[i].Clone();
				}
				if (i < this.miscDyes.Length)
				{
					player.miscDyes[i] = this.miscDyes[i].Clone();
				}
				if (i < this.bank.item.Length)
				{
					player.bank.item[i] = this.bank.item[i].Clone();
				}
				if (i < this.bank2.item.Length)
				{
					player.bank2.item[i] = this.bank2.item[i].Clone();
				}
				if (i < this.bank3.item.Length)
				{
					player.bank3.item[i] = this.bank3.item[i].Clone();
				}
				if (i < this.bank4.item.Length)
				{
					player.bank4.item[i] = this.bank4.item[i].Clone();
				}
			}
			this.CloneLoadouts(player);
			player.trashItem = this.trashItem.Clone();
			for (int j = 0; j < Player.maxBuffs; j++)
			{
				player.buffType[j] = this.buffType[j];
				player.buffTime[j] = this.buffTime[j];
			}
			this.DpadRadial.CopyTo(player.DpadRadial);
			this.CircularRadial.CopyTo(player.CircularRadial);
			return player;
		}

		// Token: 0x06000943 RID: 2371 RVA: 0x0032EF68 File Offset: 0x0032D168
		private void CloneLoadouts(Player clonePlayer)
		{
			Item[] array = this.armor;
			Item[] array2 = clonePlayer.armor;
			for (int i = 0; i < array.Length; i++)
			{
				array2[i] = array[i].Clone();
			}
			array = this.dye;
			array2 = clonePlayer.dye;
			for (int j = 0; j < array.Length; j++)
			{
				array2[j] = array[j].Clone();
			}
			for (int k = 0; k < this.Loadouts.Length; k++)
			{
				array = this.Loadouts[k].Armor;
				array2 = clonePlayer.Loadouts[k].Armor;
				for (int l = 0; l < array.Length; l++)
				{
					array2[l] = array[l].Clone();
				}
				array = this.Loadouts[k].Dye;
				array2 = clonePlayer.Loadouts[k].Dye;
				for (int m = 0; m < array.Length; m++)
				{
					array2[m] = array[m].Clone();
				}
			}
		}

		// Token: 0x06000944 RID: 2372 RVA: 0x0032F05C File Offset: 0x0032D25C
		public static bool CheckSpawn(int x, int y)
		{
			bool flag = Main.tileSolid[379];
			Main.tileSolid[379] = true;
			bool result = Player.CheckSpawn_Internal(x, y);
			Main.tileSolid[379] = flag;
			return result;
		}

		// Token: 0x06000945 RID: 2373 RVA: 0x0032F094 File Offset: 0x0032D294
		private static bool CheckSpawn_Internal(int x, int y)
		{
			if (x < 10 || x > Main.maxTilesX - 10 || y < 10 || y > Main.maxTilesX - 10)
			{
				return false;
			}
			if (Main.tile[x, y - 1] == null)
			{
				return false;
			}
			if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79)
			{
				return false;
			}
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 3; j < y; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return false;
					}
					if (Main.tile[i, j].nactive() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
					{
						Main.NewText(Language.GetTextValue("Game.BedObstructed"), byte.MaxValue, 240, 20);
						return false;
					}
				}
			}
			return WorldGen.StartRoomCheck(x, y - 1);
		}

		// Token: 0x06000946 RID: 2374 RVA: 0x0032F1A8 File Offset: 0x0032D3A8
		public void FindSpawn()
		{
			for (int i = 0; i < 200; i++)
			{
				if (this.spN[i] == null)
				{
					this.SpawnX = -1;
					this.SpawnY = -1;
					return;
				}
				if (this.spN[i] == Main.worldName && this.spI[i] == Main.worldID)
				{
					this.SpawnX = this.spX[i];
					this.SpawnY = this.spY[i];
					return;
				}
			}
		}

		// Token: 0x06000947 RID: 2375 RVA: 0x0032F220 File Offset: 0x0032D420
		public void RemoveSpawn()
		{
			this.SpawnX = -1;
			this.SpawnY = -1;
			int num = 0;
			while (num < 200 && this.spN[num] != null)
			{
				if (this.spN[num] == Main.worldName && this.spI[num] == Main.worldID)
				{
					for (int i = num; i < 199; i++)
					{
						this.spN[i] = this.spN[i + 1];
						this.spI[i] = this.spI[i + 1];
						this.spX[i] = this.spX[i + 1];
						this.spY[i] = this.spY[i + 1];
					}
					this.spN[199] = null;
					this.spI[199] = 0;
					this.spX[199] = 0;
					this.spY[199] = 0;
					return;
				}
				num++;
			}
		}

		// Token: 0x06000948 RID: 2376 RVA: 0x0032F314 File Offset: 0x0032D514
		public void ChangeSpawn(int x, int y)
		{
			int num = 0;
			while (num < 200 && this.spN[num] != null)
			{
				if (this.spN[num] == Main.worldName && this.spI[num] == Main.worldID)
				{
					for (int i = num; i > 0; i--)
					{
						this.spN[i] = this.spN[i - 1];
						this.spI[i] = this.spI[i - 1];
						this.spX[i] = this.spX[i - 1];
						this.spY[i] = this.spY[i - 1];
					}
					this.spN[0] = Main.worldName;
					this.spI[0] = Main.worldID;
					this.spX[0] = x;
					this.spY[0] = y;
					this.FindSpawn();
					return;
				}
				num++;
			}
			for (int j = 199; j > 0; j--)
			{
				if (this.spN[j - 1] != null)
				{
					this.spN[j] = this.spN[j - 1];
					this.spI[j] = this.spI[j - 1];
					this.spX[j] = this.spX[j - 1];
					this.spY[j] = this.spY[j - 1];
				}
			}
			this.spN[0] = Main.worldName;
			this.spI[0] = Main.worldID;
			this.spX[0] = x;
			this.spY[0] = y;
			this.FindSpawn();
		}

		// Token: 0x06000949 RID: 2377 RVA: 0x0032F48C File Offset: 0x0032D68C
		public static void SavePlayer(PlayerFileData playerFile, bool skipMapSave = false)
		{
			try
			{
				Main.Achievements.Save();
				Player.InternalSaveMap(playerFile.IsCloudSave);
				if (!Main.ServerSideCharacter)
				{
					FileUtilities.ProtectedInvoke(delegate
					{
						Player.InternalSavePlayerFile(playerFile);
					});
				}
			}
			catch (Exception exception)
			{
				FancyErrorPrinter.ShowFileSavingFailError(exception, playerFile.Path);
				throw;
			}
		}

		// Token: 0x0600094A RID: 2378 RVA: 0x0032F500 File Offset: 0x0032D700
		private static void InternalSavePlayerFile(PlayerFileData playerFile)
		{
			if (playerFile.ServerSideCharacter)
			{
				return;
			}
			string path = playerFile.Path;
			Player player = playerFile.Player;
			bool isCloudSave = playerFile.IsCloudSave;
			if (string.IsNullOrEmpty(path))
			{
				return;
			}
			if (FileUtilities.Exists(path, isCloudSave))
			{
				FileUtilities.Copy(path, path + ".bak", isCloudSave, true);
			}
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			using (Stream stream = isCloudSave ? new MemoryStream(2000) : new FileStream(path, FileMode.Create))
			{
				using (CryptoStream cryptoStream = new CryptoStream(stream, rijndaelManaged.CreateEncryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), CryptoStreamMode.Write))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(cryptoStream))
					{
						binaryWriter.Write(279);
						playerFile.Metadata.Write(binaryWriter);
						Player.Serialize(playerFile, player, binaryWriter);
						binaryWriter.Flush();
						cryptoStream.FlushFinalBlock();
						stream.Flush();
						if (isCloudSave && SocialAPI.Cloud != null)
						{
							SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream)stream).ToArray());
						}
					}
				}
			}
		}

		// Token: 0x0600094B RID: 2379 RVA: 0x0032F640 File Offset: 0x0032D840
		private static void Serialize(PlayerFileData playerFile, Player newPlayer, BinaryWriter fileIO)
		{
			fileIO.Write(newPlayer.name);
			fileIO.Write(newPlayer.difficulty);
			fileIO.Write(playerFile.GetPlayTime().Ticks);
			fileIO.Write(newPlayer.hair);
			fileIO.Write(newPlayer.hairDye);
			BitsByte bb = 0;
			for (int i = 0; i < 8; i++)
			{
				bb[i] = newPlayer.hideVisibleAccessory[i];
			}
			fileIO.Write(bb);
			bb = 0;
			for (int j = 0; j < 2; j++)
			{
				bb[j] = newPlayer.hideVisibleAccessory[j + 8];
			}
			fileIO.Write(bb);
			fileIO.Write(newPlayer.hideMisc);
			fileIO.Write((byte)newPlayer.skinVariant);
			fileIO.Write(newPlayer.statLife);
			fileIO.Write(newPlayer.statLifeMax);
			fileIO.Write(newPlayer.statMana);
			fileIO.Write(newPlayer.statManaMax);
			fileIO.Write(newPlayer.extraAccessory);
			fileIO.Write(newPlayer.unlockedBiomeTorches);
			fileIO.Write(newPlayer.UsingBiomeTorches);
			fileIO.Write(newPlayer.ateArtisanBread);
			fileIO.Write(newPlayer.usedAegisCrystal);
			fileIO.Write(newPlayer.usedAegisFruit);
			fileIO.Write(newPlayer.usedArcaneCrystal);
			fileIO.Write(newPlayer.usedGalaxyPearl);
			fileIO.Write(newPlayer.usedGummyWorm);
			fileIO.Write(newPlayer.usedAmbrosia);
			fileIO.Write(newPlayer.downedDD2EventAnyDifficulty);
			fileIO.Write(newPlayer.taxMoney);
			fileIO.Write(newPlayer.numberOfDeathsPVE);
			fileIO.Write(newPlayer.numberOfDeathsPVP);
			fileIO.Write(newPlayer.hairColor.R);
			fileIO.Write(newPlayer.hairColor.G);
			fileIO.Write(newPlayer.hairColor.B);
			fileIO.Write(newPlayer.skinColor.R);
			fileIO.Write(newPlayer.skinColor.G);
			fileIO.Write(newPlayer.skinColor.B);
			fileIO.Write(newPlayer.eyeColor.R);
			fileIO.Write(newPlayer.eyeColor.G);
			fileIO.Write(newPlayer.eyeColor.B);
			fileIO.Write(newPlayer.shirtColor.R);
			fileIO.Write(newPlayer.shirtColor.G);
			fileIO.Write(newPlayer.shirtColor.B);
			fileIO.Write(newPlayer.underShirtColor.R);
			fileIO.Write(newPlayer.underShirtColor.G);
			fileIO.Write(newPlayer.underShirtColor.B);
			fileIO.Write(newPlayer.pantsColor.R);
			fileIO.Write(newPlayer.pantsColor.G);
			fileIO.Write(newPlayer.pantsColor.B);
			fileIO.Write(newPlayer.shoeColor.R);
			fileIO.Write(newPlayer.shoeColor.G);
			fileIO.Write(newPlayer.shoeColor.B);
			for (int k = 0; k < newPlayer.armor.Length; k++)
			{
				fileIO.Write(newPlayer.armor[k].netID);
				fileIO.Write(newPlayer.armor[k].prefix);
			}
			for (int l = 0; l < newPlayer.dye.Length; l++)
			{
				fileIO.Write(newPlayer.dye[l].netID);
				fileIO.Write(newPlayer.dye[l].prefix);
			}
			for (int m = 0; m < 58; m++)
			{
				fileIO.Write(newPlayer.inventory[m].netID);
				fileIO.Write(newPlayer.inventory[m].stack);
				fileIO.Write(newPlayer.inventory[m].prefix);
				fileIO.Write(newPlayer.inventory[m].favorited);
			}
			for (int n = 0; n < newPlayer.miscEquips.Length; n++)
			{
				fileIO.Write(newPlayer.miscEquips[n].netID);
				fileIO.Write(newPlayer.miscEquips[n].prefix);
				fileIO.Write(newPlayer.miscDyes[n].netID);
				fileIO.Write(newPlayer.miscDyes[n].prefix);
			}
			for (int num = 0; num < 40; num++)
			{
				fileIO.Write(newPlayer.bank.item[num].netID);
				fileIO.Write(newPlayer.bank.item[num].stack);
				fileIO.Write(newPlayer.bank.item[num].prefix);
			}
			for (int num2 = 0; num2 < 40; num2++)
			{
				fileIO.Write(newPlayer.bank2.item[num2].netID);
				fileIO.Write(newPlayer.bank2.item[num2].stack);
				fileIO.Write(newPlayer.bank2.item[num2].prefix);
			}
			for (int num3 = 0; num3 < 40; num3++)
			{
				fileIO.Write(newPlayer.bank3.item[num3].netID);
				fileIO.Write(newPlayer.bank3.item[num3].stack);
				fileIO.Write(newPlayer.bank3.item[num3].prefix);
			}
			for (int num4 = 0; num4 < 40; num4++)
			{
				fileIO.Write(newPlayer.bank4.item[num4].netID);
				fileIO.Write(newPlayer.bank4.item[num4].stack);
				fileIO.Write(newPlayer.bank4.item[num4].prefix);
				fileIO.Write(newPlayer.bank4.item[num4].favorited);
			}
			fileIO.Write(newPlayer.voidVaultInfo);
			for (int num5 = 0; num5 < Player.maxBuffs; num5++)
			{
				if (Main.buffNoSave[newPlayer.buffType[num5]])
				{
					fileIO.Write(0);
					fileIO.Write(0);
				}
				else
				{
					fileIO.Write(newPlayer.buffType[num5]);
					fileIO.Write(newPlayer.buffTime[num5]);
				}
			}
			for (int num6 = 0; num6 < 200; num6++)
			{
				if (newPlayer.spN[num6] == null)
				{
					fileIO.Write(-1);
					break;
				}
				fileIO.Write(newPlayer.spX[num6]);
				fileIO.Write(newPlayer.spY[num6]);
				fileIO.Write(newPlayer.spI[num6]);
				fileIO.Write(newPlayer.spN[num6]);
			}
			fileIO.Write(newPlayer.hbLocked);
			for (int num7 = 0; num7 < newPlayer.hideInfo.Length; num7++)
			{
				fileIO.Write(newPlayer.hideInfo[num7]);
			}
			fileIO.Write(newPlayer.anglerQuestsFinished);
			for (int num8 = 0; num8 < newPlayer.DpadRadial.Bindings.Length; num8++)
			{
				fileIO.Write(newPlayer.DpadRadial.Bindings[num8]);
			}
			for (int num9 = 0; num9 < newPlayer.builderAccStatus.Length; num9++)
			{
				fileIO.Write(newPlayer.builderAccStatus[num9]);
			}
			fileIO.Write(newPlayer.bartenderQuestLog);
			fileIO.Write(newPlayer.dead);
			if (newPlayer.dead)
			{
				fileIO.Write(newPlayer.respawnTimer);
			}
			long value = DateTime.UtcNow.ToBinary();
			fileIO.Write(value);
			fileIO.Write(newPlayer.golferScoreAccumulated);
			newPlayer.creativeTracker.Save(fileIO);
			newPlayer.SaveTemporaryItemSlotContents(fileIO);
			CreativePowerManager.Instance.SaveToPlayer(newPlayer, fileIO);
			BitsByte bb2 = default(BitsByte);
			bb2[0] = newPlayer.unlockedSuperCart;
			bb2[1] = newPlayer.enabledSuperCart;
			fileIO.Write(bb2);
			fileIO.Write(newPlayer.CurrentLoadoutIndex);
			for (int num10 = 0; num10 < newPlayer.Loadouts.Length; num10++)
			{
				newPlayer.Loadouts[num10].Serialize(fileIO);
			}
		}

		// Token: 0x0600094C RID: 2380 RVA: 0x0032FE54 File Offset: 0x0032E054
		private void SaveTemporaryItemSlotContents(BinaryWriter writer)
		{
			Item itemByIndex = Main.CreativeMenu.GetItemByIndex(0);
			BitsByte bb = 0;
			bb[0] = !Main.mouseItem.IsAir;
			bb[1] = !itemByIndex.IsAir;
			bb[2] = !Main.guideItem.IsAir;
			bb[3] = !Main.reforgeItem.IsAir;
			ItemSerializationContext context = ItemSerializationContext.SavingAndLoading;
			writer.Write(bb);
			if (bb[0])
			{
				Main.mouseItem.Serialize(writer, context);
			}
			if (bb[1])
			{
				itemByIndex.Serialize(writer, context);
			}
			if (bb[2])
			{
				Main.guideItem.Serialize(writer, context);
			}
			if (bb[3])
			{
				Main.reforgeItem.Serialize(writer, context);
			}
		}

		// Token: 0x0600094D RID: 2381 RVA: 0x0032FF28 File Offset: 0x0032E128
		private void LoadTemporaryItemSlotContents(BinaryReader reader)
		{
			BitsByte bitsByte = reader.ReadByte();
			ItemSerializationContext context = ItemSerializationContext.SavingAndLoading;
			if (bitsByte[0])
			{
				this._temporaryItemSlots[0] = new Item();
				this._temporaryItemSlots[0].DeserializeFrom(reader, context);
			}
			if (bitsByte[1])
			{
				this._temporaryItemSlots[1] = new Item();
				this._temporaryItemSlots[1].DeserializeFrom(reader, context);
			}
			if (bitsByte[2])
			{
				this._temporaryItemSlots[2] = new Item();
				this._temporaryItemSlots[2].DeserializeFrom(reader, context);
			}
			if (bitsByte[3])
			{
				this._temporaryItemSlots[3] = new Item();
				this._temporaryItemSlots[3].DeserializeFrom(reader, context);
			}
		}

		// Token: 0x0600094E RID: 2382 RVA: 0x0032FFDC File Offset: 0x0032E1DC
		public void SetPlayerDataToOutOfClassFields()
		{
			Item item = new Item();
			if (this._temporaryItemSlots[0] != null)
			{
				item = this._temporaryItemSlots[0].Clone();
			}
			Main.mouseItem = item;
			item = new Item();
			if (this._temporaryItemSlots[1] != null)
			{
				item = this._temporaryItemSlots[1].Clone();
			}
			Main.CreativeMenu.SetItembyIndex(item, 0);
			item = new Item();
			if (this._temporaryItemSlots[2] != null)
			{
				item = this._temporaryItemSlots[2].Clone();
			}
			Main.guideItem = item;
			item = new Item();
			if (this._temporaryItemSlots[3] != null)
			{
				item = this._temporaryItemSlots[3].Clone();
			}
			Main.reforgeItem = item;
			CreativePowerManager.Instance.ApplyLoadedDataToPlayer(this);
		}

		// Token: 0x0600094F RID: 2383 RVA: 0x0033008A File Offset: 0x0032E28A
		public static void ClearPlayerTempInfo()
		{
			Main.mouseItem.TurnToAir(false);
			Main.guideItem.TurnToAir(false);
			Main.reforgeItem.TurnToAir(false);
			Main.CreativeMenu.GetItemByIndex(0).TurnToAir(false);
		}

		// Token: 0x06000950 RID: 2384 RVA: 0x003300C0 File Offset: 0x0032E2C0
		public static void InternalSaveMap(bool isCloudSave)
		{
			if (!string.IsNullOrEmpty(Main.playerPathName))
			{
				try
				{
					if (Main.mapEnabled)
					{
						Main.Map.Save();
					}
				}
				catch
				{
				}
				if (!isCloudSave)
				{
					Utils.TryCreatingDirectory(Main.PlayerPath);
				}
			}
		}

		// Token: 0x06000951 RID: 2385 RVA: 0x00330110 File Offset: 0x0032E310
		public static PlayerFileData LoadPlayer(string playerPath, bool cloudSave)
		{
			PlayerFileData playerFileData = new PlayerFileData(playerPath, cloudSave);
			if (cloudSave && SocialAPI.Cloud == null)
			{
				return playerFileData;
			}
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			Player player = new Player();
			bool flag = false;
			try
			{
				RijndaelManaged rijndaelManaged = new RijndaelManaged();
				rijndaelManaged.Padding = PaddingMode.None;
				using (MemoryStream memoryStream = new MemoryStream(FileUtilities.ReadAllBytes(playerPath, cloudSave)))
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), CryptoStreamMode.Read))
					{
						using (BinaryReader binaryReader = new BinaryReader(cryptoStream))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 135)
							{
								playerFileData.Metadata = FileMetadata.Read(binaryReader, FileType.Player);
							}
							else
							{
								playerFileData.Metadata = FileMetadata.FromCurrentSettings(FileType.Player);
							}
							if (num > 279)
							{
								player.loadStatus = 1;
								player.name = binaryReader.ReadString();
								playerFileData.Player = player;
								return playerFileData;
							}
							Player.Deserialize(playerFileData, player, binaryReader, num, out flag);
						}
					}
				}
				player.PlayerFrame();
				player.loadStatus = 0;
				playerFileData.Player = player;
				return playerFileData;
			}
			catch
			{
			}
			Player player2 = new Player();
			player2.loadStatus = 2;
			if (flag && player.name.Length <= Player.nameLen)
			{
				player2.name = player.name;
			}
			else
			{
				string[] array = playerPath.Replace('/', Path.DirectorySeparatorChar).Split(new char[]
				{
					Path.DirectorySeparatorChar
				});
				player2.name = array[array.Length - 1].Split(new char[]
				{
					'.'
				})[0];
			}
			playerFileData.Player = player2;
			return playerFileData;
		}

		// Token: 0x06000952 RID: 2386 RVA: 0x003302FC File Offset: 0x0032E4FC
		public Player SerializedClone()
		{
			Player player = new Player();
			Player._visualCloneStream.Seek(0L, SeekOrigin.Begin);
			Player.Serialize(Player._visualCloneDummyData, this, Player._visualCloneWriter);
			Player._visualCloneStream.Seek(0L, SeekOrigin.Begin);
			bool flag;
			Player.Deserialize(Player._visualCloneDummyData, player, Player._visualCloneReader, 279, out flag);
			return player;
		}

		// Token: 0x06000953 RID: 2387 RVA: 0x00330354 File Offset: 0x0032E554
		private static void Deserialize(PlayerFileData data, Player newPlayer, BinaryReader fileIO, int release, out bool gotToReadName)
		{
			gotToReadName = false;
			newPlayer.name = fileIO.ReadString();
			gotToReadName = true;
			if (release >= 10)
			{
				if (release >= 17)
				{
					newPlayer.difficulty = fileIO.ReadByte();
				}
				else if (fileIO.ReadBoolean())
				{
					newPlayer.difficulty = 2;
				}
			}
			if (release >= 138)
			{
				data.SetPlayTime(new TimeSpan(fileIO.ReadInt64()));
			}
			else
			{
				data.SetPlayTime(TimeSpan.Zero);
			}
			newPlayer.hair = fileIO.ReadInt32();
			if (release >= 82)
			{
				newPlayer.hairDye = fileIO.ReadByte();
			}
			if (release >= 124)
			{
				BitsByte bitsByte = fileIO.ReadByte();
				for (int i = 0; i < 8; i++)
				{
					newPlayer.hideVisibleAccessory[i] = bitsByte[i];
				}
				bitsByte = fileIO.ReadByte();
				for (int j = 0; j < 2; j++)
				{
					newPlayer.hideVisibleAccessory[j + 8] = bitsByte[j];
				}
			}
			else if (release >= 83)
			{
				BitsByte bitsByte2 = fileIO.ReadByte();
				for (int k = 0; k < 8; k++)
				{
					newPlayer.hideVisibleAccessory[k] = bitsByte2[k];
				}
			}
			if (release >= 119)
			{
				newPlayer.hideMisc = fileIO.ReadByte();
			}
			if (release <= 17)
			{
				if (newPlayer.hair == 5 || newPlayer.hair == 6 || newPlayer.hair == 9 || newPlayer.hair == 11)
				{
					newPlayer.Male = false;
				}
				else
				{
					newPlayer.Male = true;
				}
			}
			else if (release < 107)
			{
				newPlayer.Male = fileIO.ReadBoolean();
			}
			else
			{
				newPlayer.skinVariant = (int)fileIO.ReadByte();
			}
			if (release < 161 && newPlayer.skinVariant == 7)
			{
				newPlayer.skinVariant = 9;
			}
			newPlayer.statLife = fileIO.ReadInt32();
			newPlayer.statLifeMax = fileIO.ReadInt32();
			if (newPlayer.statLifeMax > 500)
			{
				newPlayer.statLifeMax = 500;
			}
			newPlayer.statMana = fileIO.ReadInt32();
			newPlayer.statManaMax = fileIO.ReadInt32();
			if (newPlayer.statManaMax > 200)
			{
				newPlayer.statManaMax = 200;
			}
			if (newPlayer.statMana > 400)
			{
				newPlayer.statMana = 400;
			}
			if (release >= 125)
			{
				newPlayer.extraAccessory = fileIO.ReadBoolean();
			}
			if (release >= 229)
			{
				newPlayer.unlockedBiomeTorches = fileIO.ReadBoolean();
				newPlayer.UsingBiomeTorches = fileIO.ReadBoolean();
				if (release >= 256)
				{
					newPlayer.ateArtisanBread = fileIO.ReadBoolean();
				}
				if (release >= 260)
				{
					newPlayer.usedAegisCrystal = fileIO.ReadBoolean();
					newPlayer.usedAegisFruit = fileIO.ReadBoolean();
					newPlayer.usedArcaneCrystal = fileIO.ReadBoolean();
					newPlayer.usedGalaxyPearl = fileIO.ReadBoolean();
					newPlayer.usedGummyWorm = fileIO.ReadBoolean();
					newPlayer.usedAmbrosia = fileIO.ReadBoolean();
				}
			}
			if (release >= 182)
			{
				newPlayer.downedDD2EventAnyDifficulty = fileIO.ReadBoolean();
			}
			if (release >= 128)
			{
				newPlayer.taxMoney = fileIO.ReadInt32();
			}
			if (release >= 254)
			{
				newPlayer.numberOfDeathsPVE = fileIO.ReadInt32();
			}
			if (release >= 254)
			{
				newPlayer.numberOfDeathsPVP = fileIO.ReadInt32();
			}
			newPlayer.hairColor = fileIO.ReadRGB();
			newPlayer.skinColor = fileIO.ReadRGB();
			newPlayer.eyeColor = fileIO.ReadRGB();
			newPlayer.shirtColor = fileIO.ReadRGB();
			newPlayer.underShirtColor = fileIO.ReadRGB();
			newPlayer.pantsColor = fileIO.ReadRGB();
			newPlayer.shoeColor = fileIO.ReadRGB();
			Main.player[Main.myPlayer].hairColor = newPlayer.hairColor;
			Main.player[Main.myPlayer].skinColor = newPlayer.skinColor;
			Main.player[Main.myPlayer].eyeColor = newPlayer.eyeColor;
			Main.player[Main.myPlayer].shirtColor = newPlayer.shirtColor;
			Main.player[Main.myPlayer].underShirtColor = newPlayer.underShirtColor;
			Main.player[Main.myPlayer].pantsColor = newPlayer.pantsColor;
			Main.player[Main.myPlayer].shoeColor = newPlayer.shoeColor;
			if (release >= 38)
			{
				if (release < 124)
				{
					int num = 11;
					if (release >= 81)
					{
						num = 16;
					}
					for (int l = 0; l < num; l++)
					{
						int num2 = l;
						if (num2 >= 8)
						{
							num2 += 2;
						}
						newPlayer.armor[num2].netDefaults(fileIO.ReadInt32());
						newPlayer.armor[num2].Prefix((int)fileIO.ReadByte());
					}
				}
				else
				{
					int num3 = 20;
					for (int m = 0; m < num3; m++)
					{
						newPlayer.armor[m].netDefaults(fileIO.ReadInt32());
						newPlayer.armor[m].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 47)
				{
					int num4 = 3;
					if (release >= 81)
					{
						num4 = 8;
					}
					if (release >= 124)
					{
						num4 = 10;
					}
					for (int n = 0; n < num4; n++)
					{
						int num5 = n;
						newPlayer.dye[num5].netDefaults(fileIO.ReadInt32());
						newPlayer.dye[num5].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 58)
				{
					for (int num6 = 0; num6 < 58; num6++)
					{
						int num7 = fileIO.ReadInt32();
						if (num7 >= (int)ItemID.Count)
						{
							newPlayer.inventory[num6].netDefaults(0);
							fileIO.ReadInt32();
							fileIO.ReadByte();
							if (release >= 114)
							{
								fileIO.ReadBoolean();
							}
						}
						else
						{
							newPlayer.inventory[num6].netDefaults(num7);
							newPlayer.inventory[num6].stack = fileIO.ReadInt32();
							newPlayer.inventory[num6].Prefix((int)fileIO.ReadByte());
							if (release >= 114)
							{
								newPlayer.inventory[num6].favorited = fileIO.ReadBoolean();
							}
						}
					}
				}
				else
				{
					for (int num8 = 0; num8 < 48; num8++)
					{
						int num9 = fileIO.ReadInt32();
						if (num9 >= (int)ItemID.Count)
						{
							newPlayer.inventory[num8].netDefaults(0);
							fileIO.ReadInt32();
							fileIO.ReadByte();
						}
						else
						{
							newPlayer.inventory[num8].netDefaults(num9);
							newPlayer.inventory[num8].stack = fileIO.ReadInt32();
							newPlayer.inventory[num8].Prefix((int)fileIO.ReadByte());
						}
					}
				}
				if (release >= 117)
				{
					if (release < 136)
					{
						for (int num10 = 0; num10 < 5; num10++)
						{
							if (num10 != 1)
							{
								int num11 = fileIO.ReadInt32();
								if (num11 >= (int)ItemID.Count)
								{
									newPlayer.miscEquips[num10].netDefaults(0);
									fileIO.ReadByte();
								}
								else
								{
									newPlayer.miscEquips[num10].netDefaults(num11);
									newPlayer.miscEquips[num10].Prefix((int)fileIO.ReadByte());
								}
								num11 = fileIO.ReadInt32();
								if (num11 >= (int)ItemID.Count)
								{
									newPlayer.miscDyes[num10].netDefaults(0);
									fileIO.ReadByte();
								}
								else
								{
									newPlayer.miscDyes[num10].netDefaults(num11);
									newPlayer.miscDyes[num10].Prefix((int)fileIO.ReadByte());
								}
							}
						}
					}
					else
					{
						for (int num12 = 0; num12 < 5; num12++)
						{
							int num13 = fileIO.ReadInt32();
							if (num13 >= (int)ItemID.Count)
							{
								newPlayer.miscEquips[num12].netDefaults(0);
								fileIO.ReadByte();
							}
							else
							{
								newPlayer.miscEquips[num12].netDefaults(num13);
								newPlayer.miscEquips[num12].Prefix((int)fileIO.ReadByte());
							}
							num13 = fileIO.ReadInt32();
							if (num13 >= (int)ItemID.Count)
							{
								newPlayer.miscDyes[num12].netDefaults(0);
								fileIO.ReadByte();
							}
							else
							{
								newPlayer.miscDyes[num12].netDefaults(num13);
								newPlayer.miscDyes[num12].Prefix((int)fileIO.ReadByte());
							}
						}
					}
				}
				if (release >= 58)
				{
					for (int num14 = 0; num14 < 40; num14++)
					{
						newPlayer.bank.item[num14].netDefaults(fileIO.ReadInt32());
						newPlayer.bank.item[num14].stack = fileIO.ReadInt32();
						newPlayer.bank.item[num14].Prefix((int)fileIO.ReadByte());
					}
					for (int num15 = 0; num15 < 40; num15++)
					{
						newPlayer.bank2.item[num15].netDefaults(fileIO.ReadInt32());
						newPlayer.bank2.item[num15].stack = fileIO.ReadInt32();
						newPlayer.bank2.item[num15].Prefix((int)fileIO.ReadByte());
					}
				}
				else
				{
					for (int num16 = 0; num16 < 20; num16++)
					{
						newPlayer.bank.item[num16].netDefaults(fileIO.ReadInt32());
						newPlayer.bank.item[num16].stack = fileIO.ReadInt32();
						newPlayer.bank.item[num16].Prefix((int)fileIO.ReadByte());
					}
					for (int num17 = 0; num17 < 20; num17++)
					{
						newPlayer.bank2.item[num17].netDefaults(fileIO.ReadInt32());
						newPlayer.bank2.item[num17].stack = fileIO.ReadInt32();
						newPlayer.bank2.item[num17].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 182)
				{
					for (int num18 = 0; num18 < 40; num18++)
					{
						newPlayer.bank3.item[num18].netDefaults(fileIO.ReadInt32());
						newPlayer.bank3.item[num18].stack = fileIO.ReadInt32();
						newPlayer.bank3.item[num18].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 198)
				{
					for (int num19 = 0; num19 < 40; num19++)
					{
						newPlayer.bank4.item[num19].netDefaults(fileIO.ReadInt32());
						newPlayer.bank4.item[num19].stack = fileIO.ReadInt32();
						newPlayer.bank4.item[num19].Prefix((int)fileIO.ReadByte());
						if (release >= 255)
						{
							newPlayer.bank4.item[num19].favorited = fileIO.ReadBoolean();
						}
					}
				}
				if (release >= 199)
				{
					newPlayer.voidVaultInfo = fileIO.ReadByte();
				}
			}
			else
			{
				for (int num20 = 0; num20 < 8; num20++)
				{
					newPlayer.armor[num20].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
					if (release >= 36)
					{
						newPlayer.armor[num20].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 6)
				{
					for (int num21 = 8; num21 < 11; num21++)
					{
						newPlayer.armor[num21].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
						if (release >= 36)
						{
							newPlayer.armor[num21].Prefix((int)fileIO.ReadByte());
						}
					}
				}
				for (int num22 = 0; num22 < 44; num22++)
				{
					newPlayer.inventory[num22].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
					newPlayer.inventory[num22].stack = fileIO.ReadInt32();
					if (release >= 36)
					{
						newPlayer.inventory[num22].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 15)
				{
					for (int num23 = 44; num23 < 48; num23++)
					{
						newPlayer.inventory[num23].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
						newPlayer.inventory[num23].stack = fileIO.ReadInt32();
						if (release >= 36)
						{
							newPlayer.inventory[num23].Prefix((int)fileIO.ReadByte());
						}
					}
				}
				for (int num24 = 0; num24 < 20; num24++)
				{
					newPlayer.bank.item[num24].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
					newPlayer.bank.item[num24].stack = fileIO.ReadInt32();
					if (release >= 36)
					{
						newPlayer.bank.item[num24].Prefix((int)fileIO.ReadByte());
					}
				}
				if (release >= 20)
				{
					for (int num25 = 0; num25 < 20; num25++)
					{
						newPlayer.bank2.item[num25].SetDefaults((int)ItemID.FromLegacyName(fileIO.ReadString(), release));
						newPlayer.bank2.item[num25].stack = fileIO.ReadInt32();
						if (release >= 36)
						{
							newPlayer.bank2.item[num25].Prefix((int)fileIO.ReadByte());
						}
					}
				}
			}
			if (release < 58)
			{
				for (int num26 = 40; num26 < 48; num26++)
				{
					newPlayer.inventory[num26 + 10] = newPlayer.inventory[num26].Clone();
					newPlayer.inventory[num26].SetDefaults(0);
				}
			}
			if (release >= 11)
			{
				int num27 = 22;
				if (release < 74)
				{
					num27 = 10;
				}
				if (release >= 252)
				{
					num27 = 44;
				}
				for (int num28 = 0; num28 < num27; num28++)
				{
					newPlayer.buffType[num28] = fileIO.ReadInt32();
					newPlayer.buffTime[num28] = fileIO.ReadInt32();
					if (newPlayer.buffType[num28] == 0)
					{
						num28--;
						num27--;
					}
				}
			}
			for (int num29 = 0; num29 < 200; num29++)
			{
				int num30 = fileIO.ReadInt32();
				if (num30 == -1)
				{
					break;
				}
				newPlayer.spX[num29] = num30;
				newPlayer.spY[num29] = fileIO.ReadInt32();
				newPlayer.spI[num29] = fileIO.ReadInt32();
				newPlayer.spN[num29] = fileIO.ReadString();
			}
			if (release >= 16)
			{
				newPlayer.hbLocked = fileIO.ReadBoolean();
			}
			if (release >= 115)
			{
				int num31 = 13;
				for (int num32 = 0; num32 < num31; num32++)
				{
					newPlayer.hideInfo[num32] = fileIO.ReadBoolean();
				}
			}
			if (release >= 98)
			{
				newPlayer.anglerQuestsFinished = fileIO.ReadInt32();
			}
			if (release >= 162)
			{
				for (int num33 = 0; num33 < 4; num33++)
				{
					newPlayer.DpadRadial.Bindings[num33] = fileIO.ReadInt32();
				}
			}
			if (release >= 164)
			{
				int num34 = 8;
				if (release >= 167)
				{
					num34 = 10;
				}
				if (release >= 197)
				{
					num34 = 11;
				}
				if (release >= 230)
				{
					num34 = 12;
				}
				for (int num35 = 0; num35 < num34; num35++)
				{
					newPlayer.builderAccStatus[num35] = fileIO.ReadInt32();
				}
				if (release < 210)
				{
					newPlayer.builderAccStatus[0] = 1;
				}
				if (release < 249)
				{
					bool flag = false;
					for (int num36 = 0; num36 < 58; num36++)
					{
						if (newPlayer.inventory[num36].type == 3611)
						{
							flag = true;
							break;
						}
					}
					if (flag)
					{
						newPlayer.builderAccStatus[1] = 1;
					}
				}
			}
			if (release >= 181)
			{
				newPlayer.bartenderQuestLog = fileIO.ReadInt32();
			}
			if (release >= 200)
			{
				newPlayer.dead = fileIO.ReadBoolean();
				if (newPlayer.dead)
				{
					newPlayer.respawnTimer = Utils.Clamp<int>(fileIO.ReadInt32(), 0, 60000);
				}
			}
			newPlayer.lastTimePlayerWasSaved = 0L;
			if (release >= 202)
			{
				newPlayer.lastTimePlayerWasSaved = fileIO.ReadInt64();
			}
			else
			{
				newPlayer.lastTimePlayerWasSaved = DateTime.UtcNow.ToBinary();
			}
			if (release >= 206)
			{
				newPlayer.golferScoreAccumulated = fileIO.ReadInt32();
			}
			if (release >= 218)
			{
				newPlayer.creativeTracker.Load(fileIO, release);
			}
			if (release >= 214)
			{
				newPlayer.LoadTemporaryItemSlotContents(fileIO);
			}
			newPlayer.savedPerPlayerFieldsThatArentInThePlayerClass = new Player.SavedPlayerDataWithAnnoyingRules();
			CreativePowerManager.Instance.ResetDataForNewPlayer(newPlayer);
			if (release >= 220)
			{
				CreativePowerManager.Instance.LoadToPlayer(newPlayer, fileIO, release);
			}
			if (release >= 253)
			{
				BitsByte bitsByte3 = fileIO.ReadByte();
				newPlayer.unlockedSuperCart = bitsByte3[0];
				newPlayer.enabledSuperCart = bitsByte3[1];
			}
			else
			{
				newPlayer.unlockedSuperCart = newPlayer.HasItemInAnyInventory(3353);
			}
			if (release >= 262)
			{
				int value = fileIO.ReadInt32();
				newPlayer.CurrentLoadoutIndex = Utils.Clamp<int>(value, 0, newPlayer.Loadouts.Length - 1);
				for (int num37 = 0; num37 < newPlayer.Loadouts.Length; num37++)
				{
					newPlayer.Loadouts[num37].Deserialize(fileIO, release);
				}
			}
			Player.LoadPlayer_LastMinuteFixes(newPlayer);
		}

		// Token: 0x06000954 RID: 2388 RVA: 0x00331320 File Offset: 0x0032F520
		private static void AdjustRespawnTimerForWorldJoining(Player newPlayer)
		{
			if (Main.myPlayer != newPlayer.whoAmI)
			{
				return;
			}
			if (newPlayer.dead)
			{
				long num = DateTime.UtcNow.ToBinary() - newPlayer.lastTimePlayerWasSaved;
				if (num > 0L)
				{
					TimeSpan timeSpan = new TimeSpan(num);
					int num2 = Utils.Clamp<int>((int)(Utils.Clamp<double>(timeSpan.TotalSeconds, 0.0, 1000.0) * 60.0), 0, newPlayer.respawnTimer);
					newPlayer.respawnTimer -= num2;
					if (newPlayer.respawnTimer == 0)
					{
						newPlayer.dead = false;
					}
				}
			}
		}

		// Token: 0x06000955 RID: 2389 RVA: 0x003313B8 File Offset: 0x0032F5B8
		public void FixLoadedData()
		{
			this.FixLoadedData_Items(this.armor);
			this.FixLoadedData_Items(this.dye);
			this.FixLoadedData_Items(this.inventory);
			this.FixLoadedData_Items(this.miscEquips);
			this.FixLoadedData_Items(this.miscDyes);
			this.FixLoadedData_Items(this.bank.item);
			this.FixLoadedData_Items(this.bank2.item);
			this.FixLoadedData_Items(this.bank3.item);
			this.FixLoadedData_Items(this.bank4.item);
			this.FixLoadedData_Items(this._temporaryItemSlots);
			Player.FixLoadedData_EliminiateDuplicateAccessories(this.armor);
			for (int i = 0; i < this.Loadouts.Length; i++)
			{
				this.Loadouts[i].FixLoadedData();
			}
		}

		// Token: 0x06000956 RID: 2390 RVA: 0x0033147C File Offset: 0x0032F67C
		public static void FixLoadedData_EliminiateDuplicateAccessories(Item[] armorArray)
		{
			for (int i = 3; i < 10; i++)
			{
				Item item = armorArray[i];
				if (!item.IsAir)
				{
					for (int j = i + 1; j < 10; j++)
					{
						Item item2 = armorArray[j];
						if (item2.type == item.type)
						{
							item2.TurnToAir(false);
						}
					}
				}
			}
		}

		// Token: 0x06000957 RID: 2391 RVA: 0x003314CC File Offset: 0x0032F6CC
		private void FixLoadedData_Items(Item[] items)
		{
			for (int i = 0; i < items.Length; i++)
			{
				if (items[i] != null)
				{
					items[i].FixAgainstExploit();
				}
			}
		}

		// Token: 0x06000958 RID: 2392 RVA: 0x003314F4 File Offset: 0x0032F6F4
		private static void LoadPlayer_LastMinuteFixes(Player newPlayer)
		{
			newPlayer.skinVariant = (int)MathHelper.Clamp((float)newPlayer.skinVariant, 0f, (float)(PlayerVariantID.Count - 1));
			for (int i = 3; i < 10; i++)
			{
				int type = newPlayer.armor[i].type;
				if (type == 908 || type == 5000)
				{
					newPlayer.lavaMax += 420;
				}
				if (type == 906 || type == 4038 || type == 3999 || type == 4003)
				{
					newPlayer.lavaMax += 420;
				}
				if (newPlayer.wingsLogic == 0 && newPlayer.armor[i].wingSlot >= 0)
				{
					newPlayer.wingsLogic = (int)newPlayer.armor[i].wingSlot;
				}
				if (type == 158 || type == 396 || type == 1250 || type == 1251 || type == 1252)
				{
					newPlayer.noFallDmg = true;
				}
				if (type == 860 || type == 535)
				{
					newPlayer.pStone = true;
				}
				newPlayer.lavaTime = newPlayer.lavaMax;
			}
			newPlayer.FixLoadedData();
		}

		// Token: 0x06000959 RID: 2393 RVA: 0x0033161C File Offset: 0x0032F81C
		public static PlayerFileData GetFileData(string file, bool cloudSave)
		{
			if (file == null || (cloudSave && SocialAPI.Cloud == null))
			{
				return null;
			}
			PlayerFileData playerFileData = Player.LoadPlayer(file, cloudSave);
			if (playerFileData.Player != null)
			{
				if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1)
				{
					if (FileUtilities.Exists(file + ".bak", cloudSave))
					{
						FileUtilities.Move(file + ".bak", file, cloudSave, true, false);
					}
					playerFileData = Player.LoadPlayer(file, cloudSave);
					if (playerFileData.Player == null)
					{
						return null;
					}
				}
				return playerFileData;
			}
			return null;
		}

		// Token: 0x0600095A RID: 2394 RVA: 0x003316A0 File Offset: 0x0032F8A0
		public Color GetHairColor(bool useLighting = true)
		{
			Color color = Lighting.GetColor((int)((double)this.position.X + (double)this.width * 0.5) / 16, (int)(((double)this.position.Y + (double)this.height * 0.25) / 16.0));
			return GameShaders.Hair.GetColor((short)this.hairDye, this, useLighting ? color : Color.White);
		}

		// Token: 0x0600095B RID: 2395 RVA: 0x0033171C File Offset: 0x0032F91C
		public bool HasItem(int type)
		{
			for (int i = 0; i < 58; i++)
			{
				if (type == this.inventory[i].type && this.inventory[i].stack > 0)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600095C RID: 2396 RVA: 0x0033175C File Offset: 0x0032F95C
		public bool HasItem(int type, Item[] collection)
		{
			for (int i = 0; i < collection.Length; i++)
			{
				if (type == collection[i].type && collection[i].stack > 0)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600095D RID: 2397 RVA: 0x00331790 File Offset: 0x0032F990
		public bool HasItemInInventoryOrOpenVoidBag(int type)
		{
			return this.HasItem(type) || (this.useVoidBag() && this.HasItem(type, this.bank4.item));
		}

		// Token: 0x0600095E RID: 2398 RVA: 0x003317BC File Offset: 0x0032F9BC
		public bool HasItemInAnyInventory(int type)
		{
			return this.HasItem(type, this.inventory) || this.HasItem(type, this.armor) || this.HasItem(type, this.dye) || this.HasItem(type, this.miscEquips) || this.HasItem(type, this.miscDyes) || this.HasItem(type, this.bank.item) || this.HasItem(type, this.bank2.item) || this.HasItem(type, this.bank3.item) || this.HasItem(type, this.bank4.item);
		}

		// Token: 0x0600095F RID: 2399 RVA: 0x00331878 File Offset: 0x0032FA78
		public int FindItem(int netid)
		{
			for (int i = 0; i < 58; i++)
			{
				if (netid == this.inventory[i].netID && this.inventory[i].stack > 0)
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x06000960 RID: 2400 RVA: 0x003318B8 File Offset: 0x0032FAB8
		public int FindItem(List<int> netids)
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && netids.Contains(this.inventory[i].netID))
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x06000961 RID: 2401 RVA: 0x003318FC File Offset: 0x0032FAFC
		public int FindItem(bool[] validtypes)
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && validtypes[this.inventory[i].type])
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x06000962 RID: 2402 RVA: 0x0033193C File Offset: 0x0032FB3C
		public int FindItem(int type, Item[] collection)
		{
			for (int i = 0; i < collection.Length; i++)
			{
				if (this.inventory[i].stack > 0 && type == collection[i].type)
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x06000963 RID: 2403 RVA: 0x00331978 File Offset: 0x0032FB78
		public int FindItemInInventoryOrOpenVoidBag(int type, out bool inVoidBag)
		{
			inVoidBag = false;
			int num = this.FindItem(type);
			if (num == -1 && this.useVoidBag())
			{
				num = this.FindItem(type, this.bank4.item);
				if (num == -1)
				{
					return -1;
				}
				inVoidBag = true;
			}
			return num;
		}

		// Token: 0x06000964 RID: 2404 RVA: 0x003319BC File Offset: 0x0032FBBC
		public Player()
		{
			this.width = 20;
			this.height = 42;
			this.name = string.Empty;
			this.bodyFrame.Width = 40;
			this.bodyFrame.Height = 56;
			this.legFrame.Width = 40;
			this.legFrame.Height = 56;
			this.tileEntityAnchor.Clear();
			this.doorHelper = new DoorOpeningHelper();
			for (int i = 0; i < 59; i++)
			{
				if (i < this.armor.Length)
				{
					this.armor[i] = new Item();
				}
				this.inventory[i] = new Item();
			}
			for (int j = 0; j < 40; j++)
			{
				this.bank.item[j] = new Item();
				this.bank2.item[j] = new Item();
				this.bank3.item[j] = new Item();
				this.bank4.item[j] = new Item();
			}
			for (int k = 0; k < this.dye.Length; k++)
			{
				this.dye[k] = new Item();
			}
			for (int l = 0; l < this.miscEquips.Length; l++)
			{
				this.miscEquips[l] = new Item();
			}
			for (int m = 0; m < this.miscDyes.Length; m++)
			{
				this.miscDyes[m] = new Item();
			}
			this.trashItem = new Item();
			this.lastVisualizedSelectedItem = new Item();
			this.grappling[0] = -1;
			this.statManaMax = 20;
			this.extraAccessory = false;
			this.ateArtisanBread = false;
			this.usedAegisCrystal = false;
			this.usedAegisFruit = false;
			this.usedArcaneCrystal = false;
			this.usedGalaxyPearl = false;
			this.usedGummyWorm = false;
			this.usedAmbrosia = false;
			for (int n = 0; n < (int)TileID.Count; n++)
			{
				this.adjTile[n] = false;
				this.oldAdjTile[n] = false;
			}
			this.hitTile = new HitTile();
			this.hitReplace = new HitTile();
			this.mount = new Mount();
			this.talkNPC = -1;
			this.piggyBankProjTracker.Clear();
			this.voidLensChest.Clear();
			this.creativeTracker = new CreativeUnlocksTracker();
			this.builderAccStatus[0] = 1;
		}

		// Token: 0x06000965 RID: 2405 RVA: 0x0033230C File Offset: 0x0033050C
		public void MagicConch()
		{
			bool flag = this.position.X / 16f < (float)(Main.maxTilesX / 2);
			int num = 50;
			int num2 = 50;
			int num3 = WorldGen.beachDistance - num - num2;
			if (flag)
			{
				num3 = Main.maxTilesX - num3 - 1 - num2;
			}
			else
			{
				num3 -= num2 / 2;
			}
			float num4 = (float)Main.maxTilesY / 1200f;
			float num5 = (float)Main.maxTilesY / 1200f;
			Player.RandomTeleportationAttemptSettings randomTeleportationAttemptSettings = new Player.RandomTeleportationAttemptSettings();
			randomTeleportationAttemptSettings.avoidAnyLiquid = true;
			randomTeleportationAttemptSettings.avoidHurtTiles = true;
			randomTeleportationAttemptSettings.attemptsBeforeGivingUp = 1000;
			randomTeleportationAttemptSettings.maximumFallDistanceFromOrignalPoint = 300;
			Vector2 vector = Vector2.Zero;
			int num6 = flag.ToDirectionInt();
			int startX = flag ? (Main.maxTilesX - 50) : 50;
			bool flag2 = true;
			Point p;
			if (!TeleportHelpers.RequestMagicConchTeleportPosition(this, -num6, startX, out p))
			{
				flag2 = false;
				startX = ((!flag) ? (Main.maxTilesX - 50) : 50);
				if (TeleportHelpers.RequestMagicConchTeleportPosition(this, num6, startX, out p))
				{
					flag2 = true;
				}
			}
			if (flag2)
			{
				vector = p.ToWorldCoordinates(8f, 16f) - new Vector2((float)(this.width / 2), (float)this.height);
			}
			if (flag2)
			{
				Vector2 vector2 = vector;
				this.Teleport(vector2, 5, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector2.X, vector2.Y, 5, 0, 0);
					return;
				}
			}
			else
			{
				Vector2 position = this.position;
				this.Teleport(position, 5, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, position.X, position.Y, 5, 1, 0);
				}
			}
		}

		// Token: 0x06000966 RID: 2406 RVA: 0x003324E4 File Offset: 0x003306E4
		public void Shellphone_Spawn()
		{
			int spawnTileX = Main.spawnTileX;
			int spawnTileY = Main.spawnTileY;
			this.Spawn_GetPositionAtWorldSpawn(ref spawnTileX, ref spawnTileY);
			if (Main.netMode != 1 && !this.Spawn_IsAreaAValidWorldSpawn(spawnTileX, spawnTileY))
			{
				Player.Spawn_ForceClearArea(spawnTileX, spawnTileY);
			}
			Vector2 vector = new Point(spawnTileX, spawnTileY).ToWorldCoordinates(8f, 0f) - new Vector2((float)(this.width / 2), (float)this.height);
			this.Teleport(vector, 11, 0);
			this.velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(this.whoAmI, this.position, 1);
				NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector.X, vector.Y, 11, 0, 0);
			}
		}

		// Token: 0x06000967 RID: 2407 RVA: 0x003325A4 File Offset: 0x003307A4
		public void DemonConch()
		{
			bool flag = false;
			int num = 100;
			int num2 = Main.maxTilesX / 2;
			int num3 = num;
			int num4 = num3 / 2;
			int teleportStartY = Main.UnderworldLayer + 20;
			int teleportRangeY = 80;
			Player.RandomTeleportationAttemptSettings settings = new Player.RandomTeleportationAttemptSettings
			{
				mostlySolidFloor = true,
				avoidAnyLiquid = true,
				avoidLava = true,
				avoidHurtTiles = true,
				avoidWalls = true,
				attemptsBeforeGivingUp = 1000,
				maximumFallDistanceFromOrignalPoint = 30
			};
			Vector2 vector = this.CheckForGoodTeleportationSpot(ref flag, num2 - num4, num3, teleportStartY, teleportRangeY, settings);
			if (!flag)
			{
				vector = this.CheckForGoodTeleportationSpot(ref flag, num2 - num3, num4, teleportStartY, teleportRangeY, settings);
			}
			if (!flag)
			{
				vector = this.CheckForGoodTeleportationSpot(ref flag, num2 + num4, num4, teleportStartY, teleportRangeY, settings);
			}
			if (flag)
			{
				Vector2 vector2 = vector;
				this.Teleport(vector2, 7, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector2.X, vector2.Y, 7, 0, 0);
					return;
				}
			}
			else
			{
				Vector2 position = this.position;
				this.Teleport(position, 7, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, position.X, position.Y, 7, 1, 0);
				}
			}
		}

		// Token: 0x06000968 RID: 2408 RVA: 0x00332708 File Offset: 0x00330908
		public void TeleportationPotion()
		{
			bool flag = false;
			int teleportStartX = 100;
			int teleportRangeX = Main.maxTilesX - 200;
			int teleportStartY = 100;
			int underworldLayer = Main.UnderworldLayer;
			Vector2 vector = this.CheckForGoodTeleportationSpot(ref flag, teleportStartX, teleportRangeX, teleportStartY, underworldLayer, new Player.RandomTeleportationAttemptSettings
			{
				avoidLava = true,
				avoidHurtTiles = true,
				maximumFallDistanceFromOrignalPoint = 100,
				attemptsBeforeGivingUp = 1000
			});
			if (flag)
			{
				Vector2 vector2 = vector;
				this.Teleport(vector2, 2, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, vector2.X, vector2.Y, 2, 0, 0);
					return;
				}
			}
			else
			{
				Vector2 position = this.position;
				this.Teleport(position, 2, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, null, 0, (float)this.whoAmI, position.X, position.Y, 2, 1, 0);
				}
			}
		}

		// Token: 0x06000969 RID: 2409 RVA: 0x0033281C File Offset: 0x00330A1C
		public Vector2 CheckForGoodTeleportationSpot(ref bool canSpawn, int teleportStartX, int teleportRangeX, int teleportStartY, int teleportRangeY, Player.RandomTeleportationAttemptSettings settings)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int width = this.width;
			Vector2 vector = new Vector2((float)num2, (float)num3) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
			while (!canSpawn && num < settings.attemptsBeforeGivingUp)
			{
				num++;
				num2 = teleportStartX + Main.rand.Next(teleportRangeX);
				num3 = teleportStartY + Main.rand.Next(teleportRangeY);
				int num4 = 5;
				num2 = (int)MathHelper.Clamp((float)num2, (float)num4, (float)(Main.maxTilesX - num4));
				num3 = (int)MathHelper.Clamp((float)num3, (float)num4, (float)(Main.maxTilesY - num4));
				vector = new Vector2((float)num2, (float)num3) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
				if (!Collision.SolidCollision(vector, width, this.height))
				{
					if (Main.tile[num2, num3] == null)
					{
						Main.tile[num2, num3] = new Tile();
					}
					if ((!settings.avoidWalls || Main.tile[num2, num3].wall <= 0) && (Main.tile[num2, num3].wall != 87 || (double)num3 <= Main.worldSurface || NPC.downedPlantBoss) && (!Main.wallDungeon[(int)Main.tile[num2, num3].wall] || (double)num3 <= Main.worldSurface || NPC.downedBoss3))
					{
						int i = 0;
						while (i < settings.maximumFallDistanceFromOrignalPoint)
						{
							if (Main.tile[num2, num3 + i] == null)
							{
								Main.tile[num2, num3 + i] = new Tile();
							}
							Tile tile = Main.tile[num2, num3 + i];
							vector = new Vector2((float)num2, (float)(num3 + i)) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
							Collision.SlopeCollision(vector, this.velocity, width, this.height, this.gravDir, false);
							if (!Collision.SolidCollision(vector, width, this.height))
							{
								i++;
							}
							else
							{
								if (tile.active() && !tile.inActive() && Main.tileSolid[(int)tile.type])
								{
									break;
								}
								i++;
							}
						}
						vector.Y -= 16f;
						int i2 = (int)vector.X / 16;
						int j = (int)vector.Y / 16;
						int num5 = (int)(vector.X + (float)width * 0.5f) / 16;
						int j2 = (int)(vector.Y + (float)this.height) / 16;
						Tile tileSafely = Framing.GetTileSafely(i2, j);
						Tile tileSafely2 = Framing.GetTileSafely(num5, j2);
						if (!settings.avoidAnyLiquid || tileSafely2.liquid <= 0)
						{
							if (settings.mostlySolidFloor)
							{
								Tile tileSafely3 = Framing.GetTileSafely(num5 - 1, j2);
								Tile tileSafely4 = Framing.GetTileSafely(num5 + 1, j2);
								if (!tileSafely3.active() || tileSafely3.inActive() || !Main.tileSolid[(int)tileSafely3.type] || Main.tileSolidTop[(int)tileSafely3.type] || !tileSafely4.active() || tileSafely4.inActive() || !Main.tileSolid[(int)tileSafely4.type] || Main.tileSolidTop[(int)tileSafely4.type])
								{
									continue;
								}
							}
							if ((!settings.avoidWalls || tileSafely.wall <= 0) && (!settings.avoidAnyLiquid || !Collision.WetCollision(vector, width, this.height)) && (!settings.avoidLava || !Collision.LavaCollision(vector, width, this.height)) && (!settings.avoidHurtTiles || !Collision.AnyHurtingTiles(vector, width, this.height)) && !Collision.SolidCollision(vector, width, this.height) && i < settings.maximumFallDistanceFromOrignalPoint - 1)
							{
								Vector2 vector2 = Vector2.UnitX * 16f;
								if (!(Collision.TileCollision(vector - vector2, vector2, this.width, this.height, false, false, (int)this.gravDir) != vector2))
								{
									vector2 = -Vector2.UnitX * 16f;
									if (!(Collision.TileCollision(vector - vector2, vector2, this.width, this.height, false, false, (int)this.gravDir) != vector2))
									{
										vector2 = Vector2.UnitY * 16f;
										if (!(Collision.TileCollision(vector - vector2, vector2, this.width, this.height, false, false, (int)this.gravDir) != vector2))
										{
											vector2 = -Vector2.UnitY * 16f;
											if (!(Collision.TileCollision(vector - vector2, vector2, this.width, this.height, false, false, (int)this.gravDir) != vector2))
											{
												canSpawn = true;
												num3 += i;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return vector;
		}

		// Token: 0x0600096A RID: 2410 RVA: 0x00332D30 File Offset: 0x00330F30
		public void GetAnglerReward(NPC angler, int questItemType)
		{
			EntitySource_Gift source = new EntitySource_Gift(angler);
			int questsDone = this.anglerQuestsFinished;
			float num = Player.GetAnglerRewardRarityMultiplier(questsDone);
			num *= (float)(this.currentShoppingSettings.PriceAdjustment + 1.0) / 2f;
			GetItemSettings npcentityToPlayerInventorySettings = GetItemSettings.NPCEntityToPlayerInventorySettings;
			this.GetAnglerReward_MainReward(source, questsDone, num, questItemType, ref npcentityToPlayerInventorySettings);
			this.GetAnglerReward_Decoration(source, questsDone, num, ref npcentityToPlayerInventorySettings);
			this.GetAnglerReward_Money(source, questsDone, num, ref npcentityToPlayerInventorySettings);
			this.GetAnglerReward_Bait(source, questsDone, num, ref npcentityToPlayerInventorySettings);
		}

		// Token: 0x0600096B RID: 2411 RVA: 0x00332DA4 File Offset: 0x00330FA4
		public static float GetAnglerRewardRarityMultiplier(int questsDone)
		{
			float num = 1f;
			if (questsDone <= 50)
			{
				num -= (float)questsDone * 0.01f;
			}
			else if (questsDone <= 100)
			{
				num = 0.5f - (float)(questsDone - 50) * 0.005f;
			}
			else if (questsDone <= 150)
			{
				num = 0.25f - (float)(questsDone - 100) * 0.002f;
			}
			else
			{
				num = 0.15f;
			}
			return num * 0.9f;
		}

		// Token: 0x0600096C RID: 2412 RVA: 0x00332E10 File Offset: 0x00331010
		private void GetAnglerReward_MainReward(IEntitySource source, int questsDone, float rarityReduction, int questItemType, ref GetItemSettings anglerRewardSettings)
		{
			Item item = new Item();
			item.type = 0;
			if (questsDone == 5)
			{
				item.SetDefaults(2428);
			}
			else if (questsDone == 10)
			{
				item.SetDefaults(2367);
			}
			else if (questsDone == 15)
			{
				item.SetDefaults(2368);
			}
			else if (questsDone == 20)
			{
				item.SetDefaults(2369);
			}
			else if (questsDone == 25)
			{
				item.SetDefaults(3031);
			}
			else if (questsDone == 30)
			{
				item.SetDefaults(2294);
			}
			else if (questItemType == 2451 && Main.hardMode)
			{
				item.SetDefaults((Main.rand.Next(2) == 0) ? 5303 : 5302);
			}
			else if (questItemType == 2451 && !Main.hardMode && Main.rand.Next(2) == 0)
			{
				item.SetDefaults((Main.rand.Next(2) == 0) ? 5303 : 5302);
			}
			else
			{
				List<int> list = new List<int>
				{
					2373,
					2374,
					2375,
					3120,
					3037,
					3096,
					5139
				};
				float num = 1f;
				for (int i = 0; i < 3; i++)
				{
					num *= 1f - 1f / (float)((int)(40f * rarityReduction));
				}
				for (int j = 0; j < 3; j++)
				{
					num *= 1f - 1f / (float)((int)(30f * rarityReduction));
				}
				num *= 1f - 1f / (float)((int)(25f * rarityReduction));
				float num2 = 1f - num;
				num2 *= 0.8f;
				bool flag;
				int defaults;
				if (questsDone > 75 && Main.rand.Next((int)(250f * rarityReduction)) == 0)
				{
					item.SetDefaults(2294);
				}
				else if (Main.hardMode && questsDone > 25 && Main.rand.Next((int)(100f * rarityReduction)) == 0)
				{
					item.SetDefaults(2422);
				}
				else if (Main.hardMode && questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
				{
					item.SetDefaults(2494);
				}
				else if (questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
				{
					item.SetDefaults(3031);
				}
				else if (questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
				{
					item.SetDefaults(3032);
				}
				else if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
				{
					item.SetDefaults(3183);
				}
				else if (Main.rand.Next((int)(60f * rarityReduction)) == 0)
				{
					item.SetDefaults(2360);
				}
				else if (Main.rand.Next((int)(60f * rarityReduction)) == 0)
				{
					item.SetDefaults(4067);
				}
				else if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
				{
					item.SetDefaults(2417);
				}
				else if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
				{
					item.SetDefaults(2498);
				}
				else if (this.DropAnglerAccByMissing(list, num2, out flag, out defaults))
				{
					item.SetDefaults(defaults);
				}
				else if (!flag && Main.rand.NextDouble() < (double)num2)
				{
					int defaults2 = Utils.SelectRandom<int>(Main.rand, list.ToArray());
					item.SetDefaults(defaults2);
				}
				else
				{
					int num3 = Main.rand.Next(3);
					if (num3 == 0)
					{
						item.SetDefaults(2354);
						item.stack = Main.rand.Next(2, 6);
					}
					else if (num3 == 1)
					{
						item.SetDefaults(2355);
						item.stack = Main.rand.Next(2, 6);
					}
					else
					{
						item.SetDefaults(2356);
						item.stack = Main.rand.Next(2, 6);
					}
				}
			}
			item.position = base.Center;
			Item item2 = this.GetItem(this.whoAmI, item, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
			if (item.type == 2417)
			{
				Item item3 = new Item();
				Item item4 = new Item();
				item3.SetDefaults(2418);
				item3.position = base.Center;
				item2 = this.GetItem(this.whoAmI, item3, anglerRewardSettings);
				if (item2.stack > 0)
				{
					int number2 = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				item4.SetDefaults(2419);
				item4.position = base.Center;
				item2 = this.GetItem(this.whoAmI, item4, anglerRewardSettings);
				if (item2.stack > 0)
				{
					int number3 = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (item.type == 2498)
			{
				Item item5 = new Item();
				Item item6 = new Item();
				item5.SetDefaults(2499);
				item5.position = base.Center;
				item2 = this.GetItem(this.whoAmI, item5, anglerRewardSettings);
				if (item2.stack > 0)
				{
					int number4 = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				item6.SetDefaults(2500);
				item6.position = base.Center;
				item2 = this.GetItem(this.whoAmI, item6, anglerRewardSettings);
				if (item2.stack > 0)
				{
					int number5 = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number5, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600096D RID: 2413 RVA: 0x0033357C File Offset: 0x0033177C
		private void GetAnglerReward_Decoration(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
		{
			float value = 1f - rarityReduction;
			int num = 100;
			float num2 = MathHelper.Lerp(value, 1f, Math.Min(1f, (float)questsDone / (float)num));
			if (num2 >= 1f || Main.rand.NextFloat() <= num2)
			{
				Item item = new Item();
				item.type = 0;
				int defaults;
				switch (Main.rand.Next(19))
				{
				default:
					defaults = 2442;
					break;
				case 1:
					defaults = 2443;
					break;
				case 2:
					defaults = 2444;
					break;
				case 3:
					defaults = 2445;
					break;
				case 4:
					defaults = 2497;
					break;
				case 5:
					defaults = 2495;
					break;
				case 6:
					defaults = 2446;
					break;
				case 7:
					defaults = 2447;
					break;
				case 8:
					defaults = 2448;
					break;
				case 9:
					defaults = 2449;
					break;
				case 10:
					defaults = 2490;
					break;
				case 11:
					defaults = 2496;
					break;
				case 12:
					defaults = 5235;
					break;
				case 13:
					defaults = 5252;
					break;
				case 14:
					defaults = 5256;
					break;
				case 15:
					defaults = 5259;
					break;
				case 16:
					defaults = 5263;
					break;
				case 17:
					defaults = 5264;
					break;
				case 18:
					defaults = 5265;
					break;
				}
				item.SetDefaults(defaults);
				item.position = base.Center;
				Item item2 = this.GetItem(this.whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
				if (item2.stack > 0)
				{
					int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600096E RID: 2414 RVA: 0x00333764 File Offset: 0x00331964
		private void GetAnglerReward_Bait(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
		{
			if (Main.rand.Next((int)(100f * rarityReduction)) <= 50)
			{
				Item item = new Item();
				if (Main.rand.Next((int)(15f * rarityReduction)) == 0)
				{
					item.SetDefaults(2676);
				}
				else if (Main.rand.Next((int)(5f * rarityReduction)) == 0)
				{
					item.SetDefaults(2675);
				}
				else
				{
					item.SetDefaults(2674);
				}
				if (Main.rand.Next(25) <= questsDone)
				{
					item.stack++;
				}
				if (Main.rand.Next(50) <= questsDone)
				{
					item.stack++;
				}
				if (Main.rand.Next(100) <= questsDone)
				{
					item.stack++;
				}
				if (Main.rand.Next(150) <= questsDone)
				{
					item.stack++;
				}
				if (Main.rand.Next(200) <= questsDone)
				{
					item.stack++;
				}
				if (Main.rand.Next(250) <= questsDone)
				{
					item.stack++;
				}
				item.position = base.Center;
				Item item2 = this.GetItem(this.whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
				if (item2.stack > 0)
				{
					int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		// Token: 0x0600096F RID: 2415 RVA: 0x0033391C File Offset: 0x00331B1C
		private void GetAnglerReward_Money(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
		{
			Item item = new Item();
			int num = (questsDone + 50) / 2;
			num = (int)((float)(num * Main.rand.Next(50, 201)) * 0.015f);
			num = (int)((double)num * 1.5);
			if (Main.hardMode)
			{
				num *= 2;
			}
			if (Main.expertMode)
			{
				num *= 2;
			}
			if (num > 100)
			{
				num /= 100;
				if (num > 10)
				{
					num = 10;
				}
				if (num < 1)
				{
					num = 1;
				}
				item.SetDefaults(73);
				item.stack = num;
			}
			else
			{
				if (num > 99)
				{
					num = 99;
				}
				if (num < 1)
				{
					num = 1;
				}
				item.SetDefaults(72);
				item.stack = num;
			}
			item.position = base.Center;
			Item item2 = this.GetItem(this.whoAmI, item, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000970 RID: 2416 RVA: 0x00333A48 File Offset: 0x00331C48
		public bool DropAnglerAccByMissing(List<int> itemIdsOfAccsWeWant, float totalChance, out bool botheredRollingForADrop, out int itemIdToDrop)
		{
			botheredRollingForADrop = false;
			itemIdToDrop = 0;
			List<int> list = new List<int>(itemIdsOfAccsWeWant);
			Item[] item = this.inventory;
			for (int i = 0; i < item.Length; i++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[i]);
			}
			item = this.armor;
			for (int j = 0; j < item.Length; j++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[j]);
			}
			item = this.bank.item;
			for (int k = 0; k < item.Length; k++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[k]);
			}
			item = this.bank2.item;
			for (int l = 0; l < item.Length; l++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[l]);
			}
			item = this.bank3.item;
			for (int m = 0; m < item.Length; m++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[m]);
			}
			item = this.bank4.item;
			for (int n = 0; n < item.Length; n++)
			{
				this.RemoveAnglerAccOptionsFromRewardPool(list, item[n]);
			}
			for (int num = 0; num < this.Loadouts.Length; num++)
			{
				item = this.Loadouts[num].Armor;
				for (int num2 = 0; num2 < item.Length; num2++)
				{
					this.RemoveAnglerAccOptionsFromRewardPool(list, item[num2]);
				}
			}
			if (list.Count == 0)
			{
				return false;
			}
			bool flag = false;
			if (Main.rand.NextDouble() < (double)totalChance)
			{
				flag = true;
			}
			botheredRollingForADrop = true;
			if (flag)
			{
				itemIdToDrop = Main.rand.NextFromList(list.ToArray());
				return true;
			}
			return false;
		}

		// Token: 0x06000971 RID: 2417 RVA: 0x00333BC8 File Offset: 0x00331DC8
		private void RemoveAnglerAccOptionsFromRewardPool(List<int> itemIdsOfAccsWeWant, Item itemToTestAgainst)
		{
			if (itemToTestAgainst.IsAir)
			{
				return;
			}
			int type = itemToTestAgainst.type;
			if (type <= 3721)
			{
				if (type == 3036 || type - 3123 <= 1)
				{
					goto IL_83;
				}
				if (type == 3721)
				{
					goto IL_5E;
				}
			}
			else
			{
				if (type == 5064)
				{
					goto IL_5E;
				}
				if (type - 5140 <= 6)
				{
					itemIdsOfAccsWeWant.Remove(5139);
					return;
				}
				if (type - 5358 <= 3)
				{
					goto IL_83;
				}
			}
			itemIdsOfAccsWeWant.Remove(itemToTestAgainst.type);
			return;
			IL_5E:
			itemIdsOfAccsWeWant.Remove(2373);
			itemIdsOfAccsWeWant.Remove(2375);
			itemIdsOfAccsWeWant.Remove(2374);
			return;
			IL_83:
			itemIdsOfAccsWeWant.Remove(3120);
			itemIdsOfAccsWeWant.Remove(3037);
			itemIdsOfAccsWeWant.Remove(3096);
		}

		// Token: 0x06000972 RID: 2418 RVA: 0x00333C8C File Offset: 0x00331E8C
		public void GetDyeTraderReward(NPC dyeTrader)
		{
			EntitySource_Gift source = new EntitySource_Gift(dyeTrader);
			List<int> list = new List<int>
			{
				3560,
				3028,
				3041,
				3040,
				3025,
				3190,
				3027,
				3026,
				3554,
				3553,
				3555,
				2872,
				3534,
				2871
			};
			if (Main.hardMode)
			{
				list.Add(3039);
				list.Add(3038);
				list.Add(3598);
				list.Add(3597);
				list.Add(3600);
				list.Add(3042);
				list.Add(3533);
				list.Add(3561);
				if (NPC.downedMechBossAny)
				{
					list.Add(2883);
					list.Add(2869);
					list.Add(2873);
					list.Add(2870);
				}
				if (NPC.downedPlantBoss)
				{
					list.Add(2878);
					list.Add(2879);
					list.Add(2884);
					list.Add(2885);
				}
				if (NPC.downedMartians)
				{
					list.Add(2864);
					list.Add(3556);
				}
				if (NPC.downedMoonlord)
				{
					list.Add(3024);
				}
			}
			int defaults = list[Main.rand.Next(list.Count)];
			Item item = new Item();
			item.SetDefaults(defaults);
			item.stack = 6;
			item.position = base.Center;
			Item item2 = this.GetItem(this.whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
			if (item2.stack > 0)
			{
				int number = Item.NewItem(source, (int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		// Token: 0x06000973 RID: 2419 RVA: 0x00333EF4 File Offset: 0x003320F4
		public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false)
		{
			int num = (int)((float)amount * this.manaCost);
			if (this.statMana >= num)
			{
				if (pay)
				{
					this.statMana -= num;
				}
				return true;
			}
			if (!this.manaFlower || blockQuickMana)
			{
				return false;
			}
			this.QuickMana();
			if (this.statMana >= num)
			{
				if (pay)
				{
					this.statMana -= num;
				}
				return true;
			}
			return false;
		}

		// Token: 0x06000974 RID: 2420 RVA: 0x00333F58 File Offset: 0x00332158
		public void TryPortalJumping()
		{
			if (this.mount.Active || this.dead || this.isLockedToATile)
			{
				return;
			}
			PortalHelper.TryGoingThroughPortals(this);
		}

		// Token: 0x06000975 RID: 2421 RVA: 0x00333F80 File Offset: 0x00332180
		public bool ConsumeSolarFlare()
		{
			if (this.setSolar && this.solarShields > 0)
			{
				this.solarShields--;
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (this.buffType[i] >= 170 && this.buffType[i] <= 172)
					{
						this.DelBuff(i);
					}
				}
				if (this.solarShields > 0 && this.whoAmI == Main.myPlayer)
				{
					this.AddBuff(170 + this.solarShields - 1, 5, false, false);
				}
				this.solarCounter = 0;
				return true;
			}
			return false;
		}

		// Token: 0x06000976 RID: 2422 RVA: 0x0033401C File Offset: 0x0033221C
		public void KeyDoubleTap(int keyDir)
		{
			int num = 0;
			if (Main.ReversedUpDownArmorSetBonuses)
			{
				num = 1;
			}
			if (keyDir == num)
			{
				if (this.setVortex && !this.mount.Active)
				{
					this.vortexStealthActive = !this.vortexStealthActive;
				}
				if (this.setForbidden)
				{
					this.MinionRestTargetAim();
					if (!this.setForbiddenCooldownLocked)
					{
						this.CommandForbiddenStorm();
					}
				}
			}
		}

		// Token: 0x06000977 RID: 2423 RVA: 0x00334078 File Offset: 0x00332278
		public void UpdateForbiddenSetLock()
		{
			List<int> list = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
				{
					list.Add(i);
				}
			}
			this.setForbiddenCooldownLocked = (list.Count > 1);
		}

		// Token: 0x06000978 RID: 2424 RVA: 0x003340DC File Offset: 0x003322DC
		public void CommandForbiddenStorm()
		{
			List<int> list = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
				{
					list.Add(i);
				}
			}
			bool flag = StrayMethods.CanSpawnSandstormFriendly(this.MinionRestTargetPoint, 30, 30);
			bool flag2 = this.MinionRestTargetPoint == Vector2.Zero;
			Vector2 center = base.Center;
			Vector2 endPoint = this.MinionRestTargetPoint;
			if (flag2)
			{
				endPoint = center;
			}
			int samplesToTake = 10;
			float samplingWidth = 60f;
			Vector2 v;
			float[] array;
			Collision.AimingLaserScan(center, endPoint, samplingWidth, samplesToTake, out v, out array);
			bool flag3 = false;
			float[] array2 = array;
			for (int j = 0; j < array2.Length; j++)
			{
				if (Math.Abs(array2[j] - v.Length()) < 10f)
				{
					flag3 = true;
					break;
				}
			}
			float num = 0f;
			for (int k = 0; k < array.Length; k++)
			{
				if (array[k] > num)
				{
					num = array[k];
				}
			}
			if (list.Count <= 1)
			{
				Vector2 vector = center + v.SafeNormalize(Vector2.Zero) * num;
				Vector2 value = vector - center;
				if (value.Length() > 0f)
				{
					for (float num2 = 0f; num2 < value.Length(); num2 += 15f)
					{
						Vector2 position = center + value * (num2 / value.Length());
						Dust dust = Main.dust[Dust.NewDust(position, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
						dust.position = position;
						dust.fadeIn = 0.5f;
						dust.scale = 0.7f;
						dust.velocity *= 0.4f;
						dust.noLight = true;
					}
				}
				for (float num3 = 0f; num3 < 6.2831855f; num3 += 0.20943952f)
				{
					Dust dust2 = Main.dust[Dust.NewDust(vector, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
					dust2.position = vector;
					dust2.fadeIn = 1f;
					dust2.scale = 0.3f;
					dust2.noLight = true;
				}
			}
			flag &= (list.Count <= 1);
			flag = (flag && flag3);
			if (flag)
			{
				flag = this.CheckMana(20, true, false);
				if (flag)
				{
					this.manaRegenDelay = (float)((int)this.maxRegenDelay);
				}
			}
			if (!flag)
			{
				return;
			}
			foreach (int num4 in list)
			{
				Projectile projectile2 = Main.projectile[num4];
				if (projectile2.ai[0] < 780f)
				{
					projectile2.ai[0] = 780f + projectile2.ai[0] % 60f;
					projectile2.netUpdate = true;
				}
			}
			int damage = (int)(20f * (1f + this.magicDamage + this.minionDamage - 2f));
			IEntitySource projectileSource_SetBonus = this.GetProjectileSource_SetBonus(3);
			Projectile projectile3 = Main.projectile[Projectile.NewProjectile(projectileSource_SetBonus, this.MinionRestTargetPoint, Vector2.Zero, 656, damage, 0f, Main.myPlayer, 0f, 0f, 0f)];
		}

		// Token: 0x06000979 RID: 2425 RVA: 0x00334458 File Offset: 0x00332658
		public void KeyHoldDown(int keyDir, int holdTime)
		{
			int num = 0;
			if (Main.ReversedUpDownArmorSetBonuses)
			{
				num = 1;
			}
			if (keyDir == num)
			{
				if (this.setStardust && holdTime >= 60)
				{
					this.MinionRestTargetPoint = Vector2.Zero;
				}
				if (this.setForbidden && holdTime >= 60)
				{
					this.MinionRestTargetPoint = Vector2.Zero;
				}
			}
		}

		// Token: 0x0600097A RID: 2426 RVA: 0x003344A4 File Offset: 0x003326A4
		public void MinionNPCTargetAim(bool doNotDisableIfTheTargetIsTheSame)
		{
			Vector2 mouseWorld = Main.MouseWorld;
			int num = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].CanBeChasedBy(this, false) && (num == -1 || Main.npc[i].Hitbox.Distance(mouseWorld) < Main.npc[num].Hitbox.Distance(mouseWorld)))
				{
					num = i;
				}
			}
			if (this.MinionAttackTargetNPC == num && !doNotDisableIfTheTargetIsTheSame)
			{
				this.MinionAttackTargetNPC = -1;
				return;
			}
			this.MinionAttackTargetNPC = num;
		}

		// Token: 0x0600097B RID: 2427 RVA: 0x00334520 File Offset: 0x00332720
		public void MinionRestTargetAim()
		{
			Vector2 mouseWorld = Main.MouseWorld;
			float y = mouseWorld.Y;
			int num = (int)mouseWorld.X / 16;
			int num2 = (int)y / 16;
			int num3 = 0;
			if (Main.tile[num, num2].nactive() && Main.tileSolid[(int)Main.tile[num, num2].type] && !Main.tileSolidTop[(int)Main.tile[num, num2].type])
			{
				int num4 = 0;
				int num5 = 0;
				while (num5 > -20 && num2 + num5 > 1)
				{
					int num6 = num2 + num5;
					if (!Main.tile[num, num6].nactive() || !Main.tileSolid[(int)Main.tile[num, num6].type] || Main.tileSolidTop[(int)Main.tile[num, num6].type])
					{
						num4 = num5;
						break;
					}
					num4 = num5;
					num5--;
				}
				int num7 = 0;
				int num8 = 0;
				while (num8 < 20 && num2 + num8 < Main.maxTilesY)
				{
					int num9 = num2 + num8;
					if (!Main.tile[num, num9].nactive() || !Main.tileSolid[(int)Main.tile[num, num9].type] || Main.tileSolidTop[(int)Main.tile[num, num9].type])
					{
						num7 = num8;
						break;
					}
					num7 = num8;
					num8++;
				}
				if (num7 > -num4)
				{
					num3 = num4 - 2;
				}
				else
				{
					num3 = num7 + 3;
				}
			}
			int num10 = num2 + num3;
			bool flag = false;
			for (int i = num10; i < num10 + 5; i++)
			{
				if (WorldGen.SolidTileAllowBottomSlope(num, i))
				{
					flag = true;
				}
			}
			while (!flag)
			{
				num10++;
				for (int j = num10; j < num10 + 5; j++)
				{
					if (WorldGen.SolidTileAllowBottomSlope(num, j))
					{
						flag = true;
					}
				}
			}
			Vector2 vector = new Vector2((float)(num * 16 + 8), (float)(num10 * 16));
			if (base.Distance(vector) <= 1000f)
			{
				this.MinionRestTargetPoint = vector;
			}
		}

		// Token: 0x0600097C RID: 2428 RVA: 0x0033472C File Offset: 0x0033292C
		public void UpdateMinionTarget()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (base.Distance(this.MinionRestTargetPoint) > 1000f)
			{
				this.MinionRestTargetPoint = Vector2.Zero;
			}
			if (this.MinionAttackTargetNPC != -1 && (!Main.npc[this.MinionAttackTargetNPC].CanBeChasedBy(this, false) || Main.npc[this.MinionAttackTargetNPC].Hitbox.Distance(base.Center) > 3000f))
			{
				this.MinionAttackTargetNPC = -1;
			}
			if (this.stardustGuardian && this.HasMinionRestTarget)
			{
				Vector2 minionRestTargetPoint = this.MinionRestTargetPoint;
				float num = (float)this.miscCounter / 150f;
				float num2 = 2.0943952f;
				for (int i = 0; i < 3; i++)
				{
					int num3 = Dust.NewDust(minionRestTargetPoint, 0, 0, 135, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity = Vector2.Zero;
					Main.dust[num3].noLight = true;
					Main.dust[num3].position = minionRestTargetPoint + (num * 6.2831855f + num2 * (float)i).ToRotationVector2() * 4f;
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(this.cPet, this);
				}
			}
		}

		// Token: 0x0600097D RID: 2429 RVA: 0x00334894 File Offset: 0x00332A94
		public void NebulaLevelup(int type)
		{
			if (this.whoAmI == Main.myPlayer)
			{
				int timeToAdd = 480;
				for (int i = 0; i < Player.maxBuffs; i++)
				{
					if (this.buffType[i] >= type && this.buffType[i] < type + 3)
					{
						this.DelBuff(i);
					}
				}
				if (type == 173)
				{
					this.nebulaLevelLife = (int)MathHelper.Clamp((float)(this.nebulaLevelLife + 1), 0f, 3f);
					this.AddBuff(type + this.nebulaLevelLife - 1, timeToAdd, true, false);
					return;
				}
				if (type == 176)
				{
					this.nebulaLevelMana = (int)MathHelper.Clamp((float)(this.nebulaLevelMana + 1), 0f, 3f);
					this.AddBuff(type + this.nebulaLevelMana - 1, timeToAdd, true, false);
					return;
				}
				if (type != 179)
				{
					return;
				}
				this.nebulaLevelDamage = (int)MathHelper.Clamp((float)(this.nebulaLevelDamage + 1), 0f, 3f);
				this.AddBuff(type + this.nebulaLevelDamage - 1, timeToAdd, true, false);
			}
		}

		// Token: 0x0600097E RID: 2430 RVA: 0x00334998 File Offset: 0x00332B98
		public void UpdateTouchingTiles()
		{
			this.TouchedTiles.Clear();
			List<Point> list = null;
			List<Point> list2 = null;
			if (!Collision.IsClearSpotTest(this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, true))
			{
				list = Collision.FindCollisionTile((Math.Sign(this.velocity.Y) == 1) ? 2 : 3, this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, false);
			}
			if (!Collision.IsClearSpotTest(this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true))
			{
				list2 = Collision.FindCollisionTile((Math.Sign(this.velocity.Y) == 1) ? 2 : 3, this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true);
			}
			if (list != null && list2 != null)
			{
				for (int i = 0; i < list2.Count; i++)
				{
					if (!list.Contains(list2[i]))
					{
						list.Add(list2[i]);
					}
				}
			}
			if (list == null && list2 != null)
			{
				list = list2;
			}
			if (list != null)
			{
				this.TouchedTiles = list;
			}
		}

		// Token: 0x040004A2 RID: 1186
		public int emoteTime;

		// Token: 0x040004A3 RID: 1187
		public CreativeUnlocksTracker creativeTracker;

		// Token: 0x040004A4 RID: 1188
		private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");

		// Token: 0x040004A5 RID: 1189
		public Player.OverheadMessage chatOverhead;

		// Token: 0x040004A6 RID: 1190
		public Player.SelectionRadial DpadRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.Dpad4);

		// Token: 0x040004A7 RID: 1191
		public Player.SelectionRadial CircularRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialCircular);

		// Token: 0x040004A8 RID: 1192
		public Player.SelectionRadial QuicksRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialQuicks);

		// Token: 0x040004A9 RID: 1193
		public bool alchemyTable;

		// Token: 0x040004AA RID: 1194
		public int HotbarOffset;

		// Token: 0x040004AB RID: 1195
		public bool GoingDownWithGrapple;

		// Token: 0x040004AC RID: 1196
		public byte spelunkerTimer;

		// Token: 0x040004AD RID: 1197
		public bool[] hideInfo = new bool[13];

		// Token: 0x040004AE RID: 1198
		public int[] builderAccStatus = new int[Player.BuilderAccToggleIDs.Count];

		// Token: 0x040004AF RID: 1199
		public long lostCoins;

		// Token: 0x040004B0 RID: 1200
		public string lostCoinString = "";

		// Token: 0x040004B1 RID: 1201
		public int soulDrain;

		// Token: 0x040004B2 RID: 1202
		public float drainBoost;

		// Token: 0x040004B3 RID: 1203
		public bool dd2Accessory;

		// Token: 0x040004B4 RID: 1204
		private static bool disabledBlizzardGraphic = false;

		// Token: 0x040004B5 RID: 1205
		private static bool disabledBlizzardSound = false;

		// Token: 0x040004B6 RID: 1206
		private static float _blizzardSoundVolume;

		// Token: 0x040004B7 RID: 1207
		private static SlotId _strongBlizzardSound = SlotId.Invalid;

		// Token: 0x040004B8 RID: 1208
		private static SlotId _insideBlizzardSound = SlotId.Invalid;

		// Token: 0x040004B9 RID: 1209
		public string name = "";

		// Token: 0x040004BA RID: 1210
		public int taxMoney;

		// Token: 0x040004BB RID: 1211
		public int taxTimer;

		// Token: 0x040004BC RID: 1212
		public static int taxRate = 3600;

		// Token: 0x040004BD RID: 1213
		public int numberOfDeathsPVE;

		// Token: 0x040004BE RID: 1214
		public int numberOfDeathsPVP;

		// Token: 0x040004BF RID: 1215
		public static int crystalLeafDamage = 100;

		// Token: 0x040004C0 RID: 1216
		public static int crystalLeafKB = 10;

		// Token: 0x040004C1 RID: 1217
		public float basiliskCharge;

		// Token: 0x040004C2 RID: 1218
		public Vector2 lastDeathPostion;

		// Token: 0x040004C3 RID: 1219
		public DateTime lastDeathTime;

		// Token: 0x040004C4 RID: 1220
		public bool showLastDeath;

		// Token: 0x040004C5 RID: 1221
		public bool usedAegisCrystal;

		// Token: 0x040004C6 RID: 1222
		public bool usedAegisFruit;

		// Token: 0x040004C7 RID: 1223
		public bool usedArcaneCrystal;

		// Token: 0x040004C8 RID: 1224
		public bool usedGalaxyPearl;

		// Token: 0x040004C9 RID: 1225
		public bool usedGummyWorm;

		// Token: 0x040004CA RID: 1226
		public bool usedAmbrosia;

		// Token: 0x040004CB RID: 1227
		public int extraAccessorySlots = 2;

		// Token: 0x040004CC RID: 1228
		public bool extraAccessory;

		// Token: 0x040004CD RID: 1229
		private bool dontConsumeWand;

		// Token: 0x040004CE RID: 1230
		public int tankPet = -1;

		// Token: 0x040004CF RID: 1231
		public bool tankPetReset;

		// Token: 0x040004D0 RID: 1232
		public int stringColor;

		// Token: 0x040004D1 RID: 1233
		public int counterWeight;

		// Token: 0x040004D2 RID: 1234
		public bool yoyoString;

		// Token: 0x040004D3 RID: 1235
		public bool yoyoGlove;

		// Token: 0x040004D4 RID: 1236
		public int beetleOrbs;

		// Token: 0x040004D5 RID: 1237
		public float beetleCounter;

		// Token: 0x040004D6 RID: 1238
		public int beetleCountdown;

		// Token: 0x040004D7 RID: 1239
		public bool beetleDefense;

		// Token: 0x040004D8 RID: 1240
		public bool beetleOffense;

		// Token: 0x040004D9 RID: 1241
		public bool beetleBuff;

		// Token: 0x040004DA RID: 1242
		public int solarShields;

		// Token: 0x040004DB RID: 1243
		public int solarCounter;

		// Token: 0x040004DC RID: 1244
		public const int maxSolarShields = 3;

		// Token: 0x040004DD RID: 1245
		public Vector2[] solarShieldPos = new Vector2[3];

		// Token: 0x040004DE RID: 1246
		public Vector2[] solarShieldVel = new Vector2[3];

		// Token: 0x040004DF RID: 1247
		public bool solarDashing;

		// Token: 0x040004E0 RID: 1248
		public bool solarDashConsumedFlare;

		// Token: 0x040004E1 RID: 1249
		public const int nebulaMaxLevel = 3;

		// Token: 0x040004E2 RID: 1250
		public int nebulaLevelLife;

		// Token: 0x040004E3 RID: 1251
		public int nebulaLevelMana;

		// Token: 0x040004E4 RID: 1252
		public int nebulaManaCounter;

		// Token: 0x040004E5 RID: 1253
		public int nebulaLevelDamage;

		// Token: 0x040004E6 RID: 1254
		public bool manaMagnet;

		// Token: 0x040004E7 RID: 1255
		public bool lifeMagnet;

		// Token: 0x040004E8 RID: 1256
		public bool treasureMagnet;

		// Token: 0x040004E9 RID: 1257
		public bool chiselSpeed;

		// Token: 0x040004EA RID: 1258
		public bool lifeForce;

		// Token: 0x040004EB RID: 1259
		public bool calmed;

		// Token: 0x040004EC RID: 1260
		public bool inferno;

		// Token: 0x040004ED RID: 1261
		public float flameRingRot;

		// Token: 0x040004EE RID: 1262
		public float flameRingScale = 1f;

		// Token: 0x040004EF RID: 1263
		public byte flameRingFrame;

		// Token: 0x040004F0 RID: 1264
		public byte flameRingAlpha;

		// Token: 0x040004F1 RID: 1265
		public int netManaTime;

		// Token: 0x040004F2 RID: 1266
		public int netLifeTime;

		// Token: 0x040004F3 RID: 1267
		public bool netMana;

		// Token: 0x040004F4 RID: 1268
		public bool netLife;

		// Token: 0x040004F5 RID: 1269
		public Vector2[] beetlePos = new Vector2[3];

		// Token: 0x040004F6 RID: 1270
		public Vector2[] beetleVel = new Vector2[3];

		// Token: 0x040004F7 RID: 1271
		public int beetleFrame;

		// Token: 0x040004F8 RID: 1272
		public int beetleFrameCounter;

		// Token: 0x040004F9 RID: 1273
		public static int manaSickTime = 300;

		// Token: 0x040004FA RID: 1274
		public static int manaSickTimeMax = 600;

		// Token: 0x040004FB RID: 1275
		public static float manaSickLessDmg = 0.25f;

		// Token: 0x040004FC RID: 1276
		public float manaSickReduction;

		// Token: 0x040004FD RID: 1277
		public bool manaSick;

		// Token: 0x040004FE RID: 1278
		public int afkCounter;

		// Token: 0x040004FF RID: 1279
		public bool stairFall;

		// Token: 0x04000500 RID: 1280
		public int loadStatus;

		// Token: 0x04000501 RID: 1281
		public Vector2[] itemFlamePos = new Vector2[7];

		// Token: 0x04000502 RID: 1282
		public int itemFlameCount;

		// Token: 0x04000503 RID: 1283
		public bool outOfRange;

		// Token: 0x04000504 RID: 1284
		public float lifeSteal = 99999f;

		// Token: 0x04000505 RID: 1285
		public float ghostDmg;

		// Token: 0x04000506 RID: 1286
		public bool teleporting;

		// Token: 0x04000507 RID: 1287
		public float teleportTime;

		// Token: 0x04000508 RID: 1288
		public int teleportStyle;

		// Token: 0x04000509 RID: 1289
		public bool sloping;

		// Token: 0x0400050A RID: 1290
		public bool chilled;

		// Token: 0x0400050B RID: 1291
		public bool dazed;

		// Token: 0x0400050C RID: 1292
		public bool frozen;

		// Token: 0x0400050D RID: 1293
		public bool stoned;

		// Token: 0x0400050E RID: 1294
		public bool lastStoned;

		// Token: 0x0400050F RID: 1295
		public bool ichor;

		// Token: 0x04000510 RID: 1296
		public bool webbed;

		// Token: 0x04000511 RID: 1297
		public bool tipsy;

		// Token: 0x04000512 RID: 1298
		public bool noBuilding;

		// Token: 0x04000513 RID: 1299
		public int ropeCount;

		// Token: 0x04000514 RID: 1300
		public int manaRegenBonus;

		// Token: 0x04000515 RID: 1301
		public float manaRegenDelayBonus;

		// Token: 0x04000516 RID: 1302
		public int dashType;

		// Token: 0x04000517 RID: 1303
		public int dash;

		// Token: 0x04000518 RID: 1304
		public int dashTime;

		// Token: 0x04000519 RID: 1305
		public int timeSinceLastDashStarted;

		// Token: 0x0400051A RID: 1306
		public int dashDelay;

		// Token: 0x0400051B RID: 1307
		public int eocDash;

		// Token: 0x0400051C RID: 1308
		public int eocHit;

		// Token: 0x0400051D RID: 1309
		public float accRunSpeed;

		// Token: 0x0400051E RID: 1310
		public bool cordage;

		// Token: 0x0400051F RID: 1311
		public int gem = -1;

		// Token: 0x04000520 RID: 1312
		public int gemCount;

		// Token: 0x04000521 RID: 1313
		public BitsByte ownedLargeGems;

		// Token: 0x04000522 RID: 1314
		public byte meleeEnchant;

		// Token: 0x04000523 RID: 1315
		public byte pulleyDir;

		// Token: 0x04000524 RID: 1316
		public bool pulley;

		// Token: 0x04000525 RID: 1317
		public int pulleyFrame;

		// Token: 0x04000526 RID: 1318
		public float pulleyFrameCounter;

		// Token: 0x04000527 RID: 1319
		public bool blackBelt;

		// Token: 0x04000528 RID: 1320
		public bool sliding;

		// Token: 0x04000529 RID: 1321
		public int slideDir;

		// Token: 0x0400052A RID: 1322
		public int snowBallLauncherInteractionCooldown;

		// Token: 0x0400052B RID: 1323
		public bool iceSkate;

		// Token: 0x0400052C RID: 1324
		public bool carpet;

		// Token: 0x0400052D RID: 1325
		public int spikedBoots;

		// Token: 0x0400052E RID: 1326
		public int carpetFrame = -1;

		// Token: 0x0400052F RID: 1327
		public float carpetFrameCounter;

		// Token: 0x04000530 RID: 1328
		public bool canCarpet;

		// Token: 0x04000531 RID: 1329
		public int carpetTime;

		// Token: 0x04000532 RID: 1330
		public int miscCounter;

		// Token: 0x04000533 RID: 1331
		public int infernoCounter;

		// Token: 0x04000534 RID: 1332
		public int insanityShadowCooldown;

		// Token: 0x04000535 RID: 1333
		public int starCloakCooldown;

		// Token: 0x04000536 RID: 1334
		public bool sandStorm;

		// Token: 0x04000537 RID: 1335
		public bool crimsonRegen;

		// Token: 0x04000538 RID: 1336
		public bool ghostHeal;

		// Token: 0x04000539 RID: 1337
		public bool ghostHurt;

		// Token: 0x0400053A RID: 1338
		public bool sticky;

		// Token: 0x0400053B RID: 1339
		public bool slippy;

		// Token: 0x0400053C RID: 1340
		public bool slippy2;

		// Token: 0x0400053D RID: 1341
		public bool powerrun;

		// Token: 0x0400053E RID: 1342
		public bool runningOnSand;

		// Token: 0x0400053F RID: 1343
		public bool flapSound;

		// Token: 0x04000540 RID: 1344
		public bool iceBarrier;

		// Token: 0x04000541 RID: 1345
		public bool dangerSense;

		// Token: 0x04000542 RID: 1346
		public byte luckPotion;

		// Token: 0x04000543 RID: 1347
		public byte oldLuckPotion;

		// Token: 0x04000544 RID: 1348
		public float endurance;

		// Token: 0x04000545 RID: 1349
		public float whipRangeMultiplier;

		// Token: 0x04000546 RID: 1350
		public float whipUseTimeMultiplier;

		// Token: 0x04000547 RID: 1351
		public bool loveStruck;

		// Token: 0x04000548 RID: 1352
		public bool stinky;

		// Token: 0x04000549 RID: 1353
		public bool resistCold;

		// Token: 0x0400054A RID: 1354
		public bool electrified;

		// Token: 0x0400054B RID: 1355
		public bool dryadWard;

		// Token: 0x0400054C RID: 1356
		public bool panic;

		// Token: 0x0400054D RID: 1357
		public Item brainOfConfusionItem;

		// Token: 0x0400054E RID: 1358
		public int brainOfConfusionDodgeAnimationCounter;

		// Token: 0x0400054F RID: 1359
		public byte iceBarrierFrame;

		// Token: 0x04000550 RID: 1360
		public byte iceBarrierFrameCounter;

		// Token: 0x04000551 RID: 1361
		public bool shadowDodge;

		// Token: 0x04000552 RID: 1362
		public float shadowDodgeCount;

		// Token: 0x04000553 RID: 1363
		public bool palladiumRegen;

		// Token: 0x04000554 RID: 1364
		public bool onHitDodge;

		// Token: 0x04000555 RID: 1365
		public bool onHitRegen;

		// Token: 0x04000556 RID: 1366
		public bool onHitPetal;

		// Token: 0x04000557 RID: 1367
		public bool onHitTitaniumStorm;

		// Token: 0x04000558 RID: 1368
		public int titaniumStormCooldown;

		// Token: 0x04000559 RID: 1369
		public bool hasTitaniumStormBuff;

		// Token: 0x0400055A RID: 1370
		public int petalTimer;

		// Token: 0x0400055B RID: 1371
		public int shadowDodgeTimer;

		// Token: 0x0400055C RID: 1372
		public int boneGloveTimer;

		// Token: 0x0400055D RID: 1373
		public int phantomPhoneixCounter;

		// Token: 0x0400055E RID: 1374
		public int fishingSkill;

		// Token: 0x0400055F RID: 1375
		public bool cratePotion;

		// Token: 0x04000560 RID: 1376
		public bool sonarPotion;

		// Token: 0x04000561 RID: 1377
		public bool accFishingLine;

		// Token: 0x04000562 RID: 1378
		public bool accFishingBobber;

		// Token: 0x04000563 RID: 1379
		public bool accTackleBox;

		// Token: 0x04000564 RID: 1380
		public bool accLavaFishing;

		// Token: 0x04000565 RID: 1381
		public int maxMinions = 1;

		// Token: 0x04000566 RID: 1382
		public int numMinions;

		// Token: 0x04000567 RID: 1383
		public float slotsMinions;

		// Token: 0x04000568 RID: 1384
		public bool pygmy;

		// Token: 0x04000569 RID: 1385
		public bool raven;

		// Token: 0x0400056A RID: 1386
		public bool slime;

		// Token: 0x0400056B RID: 1387
		public bool hornetMinion;

		// Token: 0x0400056C RID: 1388
		public bool impMinion;

		// Token: 0x0400056D RID: 1389
		public bool twinsMinion;

		// Token: 0x0400056E RID: 1390
		public bool spiderMinion;

		// Token: 0x0400056F RID: 1391
		public int nextCycledSpiderMinionType;

		// Token: 0x04000570 RID: 1392
		public bool pirateMinion;

		// Token: 0x04000571 RID: 1393
		public bool sharknadoMinion;

		// Token: 0x04000572 RID: 1394
		public bool UFOMinion;

		// Token: 0x04000573 RID: 1395
		public bool DeadlySphereMinion;

		// Token: 0x04000574 RID: 1396
		public bool stardustMinion;

		// Token: 0x04000575 RID: 1397
		public bool stardustGuardian;

		// Token: 0x04000576 RID: 1398
		public bool stardustDragon;

		// Token: 0x04000577 RID: 1399
		public bool batsOfLight;

		// Token: 0x04000578 RID: 1400
		public bool babyBird;

		// Token: 0x04000579 RID: 1401
		public bool vampireFrog;

		// Token: 0x0400057A RID: 1402
		public bool stormTiger;

		// Token: 0x0400057B RID: 1403
		public int highestStormTigerGemOriginalDamage;

		// Token: 0x0400057C RID: 1404
		public bool smolstar;

		// Token: 0x0400057D RID: 1405
		public bool empressBlade;

		// Token: 0x0400057E RID: 1406
		public bool flinxMinion;

		// Token: 0x0400057F RID: 1407
		public bool abigailMinion;

		// Token: 0x04000580 RID: 1408
		public int highestAbigailCounterOriginalDamage;

		// Token: 0x04000581 RID: 1409
		public float wingTime;

		// Token: 0x04000582 RID: 1410
		public int wings;

		// Token: 0x04000583 RID: 1411
		public int wingsLogic;

		// Token: 0x04000584 RID: 1412
		public int wingTimeMax;

		// Token: 0x04000585 RID: 1413
		public int wingFrame;

		// Token: 0x04000586 RID: 1414
		public int wingFrameCounter;

		// Token: 0x04000587 RID: 1415
		public int skinVariant;

		// Token: 0x04000588 RID: 1416
		public bool ghost;

		// Token: 0x04000589 RID: 1417
		public int ghostFrame;

		// Token: 0x0400058A RID: 1418
		public int ghostFrameCounter;

		// Token: 0x0400058B RID: 1419
		public int miscTimer;

		// Token: 0x0400058C RID: 1420
		public int environmentBuffImmunityTimer;

		// Token: 0x0400058D RID: 1421
		public int _framesLeftEligibleForDeadmansChestDeathAchievement;

		// Token: 0x0400058E RID: 1422
		public bool pvpDeath;

		// Token: 0x0400058F RID: 1423
		public BitsByte zone1 = 0;

		// Token: 0x04000590 RID: 1424
		public BitsByte zone2 = 0;

		// Token: 0x04000591 RID: 1425
		public BitsByte zone3 = 0;

		// Token: 0x04000592 RID: 1426
		public BitsByte zone4 = 0;

		// Token: 0x04000593 RID: 1427
		public BitsByte zone5 = 0;

		// Token: 0x04000594 RID: 1428
		private bool _wasInShimmerZone;

		// Token: 0x04000595 RID: 1429
		public bool boneArmor;

		// Token: 0x04000596 RID: 1430
		public bool frostArmor;

		// Token: 0x04000597 RID: 1431
		public bool honey;

		// Token: 0x04000598 RID: 1432
		public bool crystalLeaf;

		// Token: 0x04000599 RID: 1433
		public int crystalLeafCooldown;

		// Token: 0x0400059A RID: 1434
		public PortableStoolUsage portableStoolInfo;

		// Token: 0x0400059B RID: 1435
		public bool preventAllItemPickups;

		// Token: 0x0400059C RID: 1436
		public bool dontHurtCritters;

		// Token: 0x0400059D RID: 1437
		public bool hasLucyTheAxe;

		// Token: 0x0400059E RID: 1438
		public bool dontHurtNature;

		// Token: 0x0400059F RID: 1439
		public int[] doubleTapCardinalTimer = new int[4];

		// Token: 0x040005A0 RID: 1440
		public int[] holdDownCardinalTimer = new int[4];

		// Token: 0x040005A1 RID: 1441
		public bool defendedByPaladin;

		// Token: 0x040005A2 RID: 1442
		public bool hasPaladinShield;

		// Token: 0x040005A3 RID: 1443
		public float[] speedSlice = new float[60];

		// Token: 0x040005A4 RID: 1444
		public float townNPCs;

		// Token: 0x040005A5 RID: 1445
		public double headFrameCounter;

		// Token: 0x040005A6 RID: 1446
		public double bodyFrameCounter;

		// Token: 0x040005A7 RID: 1447
		public double legFrameCounter;

		// Token: 0x040005A8 RID: 1448
		public int netSkip;

		// Token: 0x040005A9 RID: 1449
		public int oldSelectItem;

		// Token: 0x040005AA RID: 1450
		public bool immune;

		// Token: 0x040005AB RID: 1451
		public bool immuneNoBlink;

		// Token: 0x040005AC RID: 1452
		public int immuneTime;

		// Token: 0x040005AD RID: 1453
		public int immuneAlphaDirection;

		// Token: 0x040005AE RID: 1454
		public int immuneAlpha;

		// Token: 0x040005AF RID: 1455
		public int team;

		// Token: 0x040005B0 RID: 1456
		private int _timeSinceLastImmuneGet;

		// Token: 0x040005B1 RID: 1457
		private int _immuneStrikes;

		// Token: 0x040005B2 RID: 1458
		public bool hbLocked;

		// Token: 0x040005B3 RID: 1459
		public static int nameLen = 20;

		// Token: 0x040005B4 RID: 1460
		public float maxRegenDelay;

		// Token: 0x040005B5 RID: 1461
		public int sign = -1;

		// Token: 0x040005B6 RID: 1462
		public bool editedChestName;

		// Token: 0x040005B7 RID: 1463
		public int reuseDelay;

		// Token: 0x040005B8 RID: 1464
		public int aggro;

		// Token: 0x040005B9 RID: 1465
		public float nearbyActiveNPCs;

		// Token: 0x040005BA RID: 1466
		public bool creativeInterface;

		// Token: 0x040005BB RID: 1467
		public bool mouseInterface;

		// Token: 0x040005BC RID: 1468
		public bool lastMouseInterface;

		// Token: 0x040005BD RID: 1469
		public int noThrow;

		// Token: 0x040005BE RID: 1470
		public int changeItem = -1;

		// Token: 0x040005BF RID: 1471
		public int selectedItem;

		// Token: 0x040005C0 RID: 1472
		public const int SupportedSlotsArmor = 3;

		// Token: 0x040005C1 RID: 1473
		public const int SupportedSlotsAccs = 7;

		// Token: 0x040005C2 RID: 1474
		public const int SupportedSlotSets = 10;

		// Token: 0x040005C3 RID: 1475
		public const int InitialAccSlotCount = 5;

		// Token: 0x040005C4 RID: 1476
		public const int miscSlotPet = 0;

		// Token: 0x040005C5 RID: 1477
		public const int miscSlotLight = 1;

		// Token: 0x040005C6 RID: 1478
		public const int miscSlotCart = 2;

		// Token: 0x040005C7 RID: 1479
		public const int miscSlotMount = 3;

		// Token: 0x040005C8 RID: 1480
		public const int miscSlotHook = 4;

		// Token: 0x040005C9 RID: 1481
		public const int SupportedMiscSlotCount = 5;

		// Token: 0x040005CA RID: 1482
		public Item[] armor = new Item[20];

		// Token: 0x040005CB RID: 1483
		public Item[] dye = new Item[10];

		// Token: 0x040005CC RID: 1484
		public Item[] miscEquips = new Item[5];

		// Token: 0x040005CD RID: 1485
		public Item[] miscDyes = new Item[5];

		// Token: 0x040005CE RID: 1486
		public Item trashItem = new Item();

		// Token: 0x040005CF RID: 1487
		public float itemRotation;

		// Token: 0x040005D0 RID: 1488
		public int itemWidth;

		// Token: 0x040005D1 RID: 1489
		public int itemHeight;

		// Token: 0x040005D2 RID: 1490
		public Vector2 itemLocation;

		// Token: 0x040005D3 RID: 1491
		public bool poundRelease;

		// Token: 0x040005D4 RID: 1492
		public float ghostFade;

		// Token: 0x040005D5 RID: 1493
		public float ghostDir = 1f;

		// Token: 0x040005D6 RID: 1494
		public static readonly int maxBuffs = 44;

		// Token: 0x040005D7 RID: 1495
		public int[] buffType = new int[Player.maxBuffs];

		// Token: 0x040005D8 RID: 1496
		public int[] buffTime = new int[Player.maxBuffs];

		// Token: 0x040005D9 RID: 1497
		public bool[] buffImmune = new bool[BuffID.Count];

		// Token: 0x040005DA RID: 1498
		public int heldProj = -1;

		// Token: 0x040005DB RID: 1499
		public int breathCD;

		// Token: 0x040005DC RID: 1500
		public int breathMax = 200;

		// Token: 0x040005DD RID: 1501
		public int breath = 200;

		// Token: 0x040005DE RID: 1502
		public int lavaCD;

		// Token: 0x040005DF RID: 1503
		public int lavaMax;

		// Token: 0x040005E0 RID: 1504
		public int lavaTime;

		// Token: 0x040005E1 RID: 1505
		public bool ignoreWater;

		// Token: 0x040005E2 RID: 1506
		public bool armorEffectDrawShadow;

		// Token: 0x040005E3 RID: 1507
		public bool armorEffectDrawShadowSubtle;

		// Token: 0x040005E4 RID: 1508
		public bool armorEffectDrawOutlines;

		// Token: 0x040005E5 RID: 1509
		public bool armorEffectDrawShadowLokis;

		// Token: 0x040005E6 RID: 1510
		public bool armorEffectDrawShadowBasilisk;

		// Token: 0x040005E7 RID: 1511
		public bool armorEffectDrawOutlinesForbidden;

		// Token: 0x040005E8 RID: 1512
		public bool armorEffectDrawShadowEOCShield;

		// Token: 0x040005E9 RID: 1513
		public bool socialShadowRocketBoots;

		// Token: 0x040005EA RID: 1514
		public bool socialGhost;

		// Token: 0x040005EB RID: 1515
		public bool shroomiteStealth;

		// Token: 0x040005EC RID: 1516
		public bool ashWoodBonus;

		// Token: 0x040005ED RID: 1517
		public bool socialIgnoreLight;

		// Token: 0x040005EE RID: 1518
		public int stealthTimer;

		// Token: 0x040005EF RID: 1519
		public float stealth = 1f;

		// Token: 0x040005F0 RID: 1520
		public int beardGrowthTimer;

		// Token: 0x040005F1 RID: 1521
		public bool isDisplayDollOrInanimate;

		// Token: 0x040005F2 RID: 1522
		public bool isFullbright;

		// Token: 0x040005F3 RID: 1523
		public bool isHatRackDoll;

		// Token: 0x040005F4 RID: 1524
		public bool isFirstFractalAfterImage;

		// Token: 0x040005F5 RID: 1525
		public float firstFractalAfterImageOpacity;

		// Token: 0x040005F6 RID: 1526
		public string setBonus = "";

		// Token: 0x040005F7 RID: 1527
		public Item[] inventory = new Item[59];

		// Token: 0x040005F8 RID: 1528
		public bool[] inventoryChestStack = new bool[59];

		// Token: 0x040005F9 RID: 1529
		public Item lastVisualizedSelectedItem;

		// Token: 0x040005FA RID: 1530
		public Chest bank = new Chest(true);

		// Token: 0x040005FB RID: 1531
		public Chest bank2 = new Chest(true);

		// Token: 0x040005FC RID: 1532
		public Chest bank3 = new Chest(true);

		// Token: 0x040005FD RID: 1533
		public Chest bank4 = new Chest(true);

		// Token: 0x040005FE RID: 1534
		public BitsByte voidVaultInfo;

		// Token: 0x040005FF RID: 1535
		public float headRotation;

		// Token: 0x04000600 RID: 1536
		public float bodyRotation;

		// Token: 0x04000601 RID: 1537
		public float legRotation;

		// Token: 0x04000602 RID: 1538
		public Vector2 headPosition;

		// Token: 0x04000603 RID: 1539
		public Vector2 bodyPosition;

		// Token: 0x04000604 RID: 1540
		public Vector2 legPosition;

		// Token: 0x04000605 RID: 1541
		public Vector2 headVelocity;

		// Token: 0x04000606 RID: 1542
		public Vector2 bodyVelocity;

		// Token: 0x04000607 RID: 1543
		public Vector2 legVelocity;

		// Token: 0x04000608 RID: 1544
		public float fullRotation;

		// Token: 0x04000609 RID: 1545
		public Vector2 fullRotationOrigin = Vector2.Zero;

		// Token: 0x0400060A RID: 1546
		public int fartKartCloudDelay;

		// Token: 0x0400060B RID: 1547
		public const int fartKartCloudDelayMax = 20;

		// Token: 0x0400060C RID: 1548
		public int nonTorch = -1;

		// Token: 0x0400060D RID: 1549
		public float gfxOffY;

		// Token: 0x0400060E RID: 1550
		public float stepSpeed = 1f;

		// Token: 0x0400060F RID: 1551
		public static bool deadForGood = false;

		// Token: 0x04000610 RID: 1552
		public bool dead;

		// Token: 0x04000611 RID: 1553
		public int respawnTimer;

		// Token: 0x04000612 RID: 1554
		public const int respawnTimerMax = 3600;

		// Token: 0x04000613 RID: 1555
		public long lastTimePlayerWasSaved;

		// Token: 0x04000614 RID: 1556
		public int attackCD;

		// Token: 0x04000615 RID: 1557
		public int potionDelay;

		// Token: 0x04000616 RID: 1558
		public byte difficulty;

		// Token: 0x04000617 RID: 1559
		public byte wetSlime;

		// Token: 0x04000618 RID: 1560
		public HitTile hitTile;

		// Token: 0x04000619 RID: 1561
		public HitTile hitReplace;

		// Token: 0x0400061A RID: 1562
		public int jump;

		// Token: 0x0400061B RID: 1563
		public int head = -1;

		// Token: 0x0400061C RID: 1564
		public int body = -1;

		// Token: 0x0400061D RID: 1565
		public int legs = -1;

		// Token: 0x0400061E RID: 1566
		public sbyte handon = -1;

		// Token: 0x0400061F RID: 1567
		public sbyte handoff = -1;

		// Token: 0x04000620 RID: 1568
		public sbyte back = -1;

		// Token: 0x04000621 RID: 1569
		public sbyte front = -1;

		// Token: 0x04000622 RID: 1570
		public sbyte shoe = -1;

		// Token: 0x04000623 RID: 1571
		public sbyte waist = -1;

		// Token: 0x04000624 RID: 1572
		public sbyte shield = -1;

		// Token: 0x04000625 RID: 1573
		public sbyte neck = -1;

		// Token: 0x04000626 RID: 1574
		public sbyte face = -1;

		// Token: 0x04000627 RID: 1575
		public sbyte balloon = -1;

		// Token: 0x04000628 RID: 1576
		public sbyte backpack = -1;

		// Token: 0x04000629 RID: 1577
		public sbyte tail = -1;

		// Token: 0x0400062A RID: 1578
		public sbyte faceHead = -1;

		// Token: 0x0400062B RID: 1579
		public sbyte faceFlower = -1;

		// Token: 0x0400062C RID: 1580
		public sbyte balloonFront = -1;

		// Token: 0x0400062D RID: 1581
		public sbyte beard = -1;

		// Token: 0x0400062E RID: 1582
		public bool[] hideVisibleAccessory = new bool[10];

		// Token: 0x0400062F RID: 1583
		public BitsByte hideMisc = 0;

		// Token: 0x04000630 RID: 1584
		public Rectangle headFrame;

		// Token: 0x04000631 RID: 1585
		public Rectangle bodyFrame;

		// Token: 0x04000632 RID: 1586
		public Rectangle legFrame;

		// Token: 0x04000633 RID: 1587
		public Rectangle hairFrame;

		// Token: 0x04000634 RID: 1588
		public Player.DirectionalInputSyncCache LocalInputCache;

		// Token: 0x04000635 RID: 1589
		public bool controlLeft;

		// Token: 0x04000636 RID: 1590
		public bool controlRight;

		// Token: 0x04000637 RID: 1591
		public bool controlUp;

		// Token: 0x04000638 RID: 1592
		public bool controlDown;

		// Token: 0x04000639 RID: 1593
		public bool controlJump;

		// Token: 0x0400063A RID: 1594
		public bool controlUseItem;

		// Token: 0x0400063B RID: 1595
		public bool controlUseTile;

		// Token: 0x0400063C RID: 1596
		public bool controlThrow;

		// Token: 0x0400063D RID: 1597
		public bool controlInv;

		// Token: 0x0400063E RID: 1598
		public bool controlHook;

		// Token: 0x0400063F RID: 1599
		public bool controlTorch;

		// Token: 0x04000640 RID: 1600
		public bool controlMap;

		// Token: 0x04000641 RID: 1601
		public bool controlSmart;

		// Token: 0x04000642 RID: 1602
		public bool controlMount;

		// Token: 0x04000643 RID: 1603
		public bool releaseJump;

		// Token: 0x04000644 RID: 1604
		public bool releaseUp;

		// Token: 0x04000645 RID: 1605
		public bool releaseUseItem;

		// Token: 0x04000646 RID: 1606
		public bool releaseUseTile;

		// Token: 0x04000647 RID: 1607
		public bool releaseInventory;

		// Token: 0x04000648 RID: 1608
		public bool releaseHook;

		// Token: 0x04000649 RID: 1609
		public bool releaseThrow;

		// Token: 0x0400064A RID: 1610
		public bool releaseQuickMana;

		// Token: 0x0400064B RID: 1611
		public bool releaseQuickHeal;

		// Token: 0x0400064C RID: 1612
		public bool releaseLeft;

		// Token: 0x0400064D RID: 1613
		public bool releaseRight;

		// Token: 0x0400064E RID: 1614
		public bool releaseSmart;

		// Token: 0x0400064F RID: 1615
		public bool releaseMount;

		// Token: 0x04000650 RID: 1616
		public bool releaseDown;

		// Token: 0x04000651 RID: 1617
		public bool controlQuickMana;

		// Token: 0x04000652 RID: 1618
		public bool controlQuickHeal;

		// Token: 0x04000653 RID: 1619
		public bool controlCreativeMenu;

		// Token: 0x04000654 RID: 1620
		public bool releaseCreativeMenu;

		// Token: 0x04000655 RID: 1621
		public bool tileInteractionHappened;

		// Token: 0x04000656 RID: 1622
		public bool tileInteractAttempted;

		// Token: 0x04000657 RID: 1623
		public bool controlDownHold;

		// Token: 0x04000658 RID: 1624
		public bool isOperatingAnotherEntity;

		// Token: 0x04000659 RID: 1625
		public bool autoReuseAllWeapons;

		// Token: 0x0400065A RID: 1626
		public bool isControlledByFilm;

		// Token: 0x0400065B RID: 1627
		public bool tryKeepingHoveringDown;

		// Token: 0x0400065C RID: 1628
		public bool tryKeepingHoveringUp;

		// Token: 0x0400065D RID: 1629
		public int altFunctionUse;

		// Token: 0x0400065E RID: 1630
		public bool mapZoomIn;

		// Token: 0x0400065F RID: 1631
		public bool mapZoomOut;

		// Token: 0x04000660 RID: 1632
		public bool mapAlphaUp;

		// Token: 0x04000661 RID: 1633
		public bool mapAlphaDown;

		// Token: 0x04000662 RID: 1634
		public bool mapFullScreen;

		// Token: 0x04000663 RID: 1635
		public bool mapStyle;

		// Token: 0x04000664 RID: 1636
		public bool releaseMapFullscreen;

		// Token: 0x04000665 RID: 1637
		public bool releaseMapStyle;

		// Token: 0x04000666 RID: 1638
		public int leftTimer;

		// Token: 0x04000667 RID: 1639
		public int rightTimer;

		// Token: 0x04000668 RID: 1640
		public bool delayUseItem;

		// Token: 0x04000669 RID: 1641
		public const int defaultWidth = 20;

		// Token: 0x0400066A RID: 1642
		public const int defaultHeight = 42;

		// Token: 0x0400066B RID: 1643
		public bool cursorItemIconEnabled;

		// Token: 0x0400066C RID: 1644
		public bool cursorItemIconReversed;

		// Token: 0x0400066D RID: 1645
		public int cursorItemIconID;

		// Token: 0x0400066E RID: 1646
		public int cursorItemIconPush;

		// Token: 0x0400066F RID: 1647
		public string cursorItemIconText = "";

		// Token: 0x04000670 RID: 1648
		public int runSoundDelay;

		// Token: 0x04000671 RID: 1649
		public float opacityForAnimation = 1f;

		// Token: 0x04000672 RID: 1650
		public const int shadowMax = 3;

		// Token: 0x04000673 RID: 1651
		public Vector2[] shadowPos = new Vector2[3];

		// Token: 0x04000674 RID: 1652
		public float[] shadowRotation = new float[3];

		// Token: 0x04000675 RID: 1653
		public Vector2[] shadowOrigin = new Vector2[3];

		// Token: 0x04000676 RID: 1654
		public int[] shadowDirection = new int[3];

		// Token: 0x04000677 RID: 1655
		public int shadowCount;

		// Token: 0x04000678 RID: 1656
		public float manaCost = 1f;

		// Token: 0x04000679 RID: 1657
		public bool fireWalk;

		// Token: 0x0400067A RID: 1658
		public bool channel;

		// Token: 0x0400067B RID: 1659
		public int step = -1;

		// Token: 0x0400067C RID: 1660
		private Player.ChannelCancelKey _channelShotCache;

		// Token: 0x0400067D RID: 1661
		public bool skipAnimatingValuesInPlayerFrame;

		// Token: 0x0400067E RID: 1662
		public Player.RabbitOrderFrameHelper rabbitOrderFrame;

		// Token: 0x0400067F RID: 1663
		public bool creativeGodMode;

		// Token: 0x04000680 RID: 1664
		private const int MaxAdvancedShadows = 60;

		// Token: 0x04000681 RID: 1665
		public int availableAdvancedShadowsCount;

		// Token: 0x04000682 RID: 1666
		private EntityShadowInfo[] _advancedShadows = new EntityShadowInfo[60];

		// Token: 0x04000683 RID: 1667
		private int _lastAddedAvancedShadow;

		// Token: 0x04000684 RID: 1668
		public Player.CompositeArmData compositeFrontArm;

		// Token: 0x04000685 RID: 1669
		public Player.CompositeArmData compositeBackArm;

		// Token: 0x04000686 RID: 1670
		public int anglerQuestsFinished;

		// Token: 0x04000687 RID: 1671
		public int golferScoreAccumulated;

		// Token: 0x04000688 RID: 1672
		public int bartenderQuestLog;

		// Token: 0x04000689 RID: 1673
		public bool downedDD2EventAnyDifficulty;

		// Token: 0x0400068A RID: 1674
		public int armorPenetration;

		// Token: 0x0400068B RID: 1675
		public int statDefense;

		// Token: 0x0400068C RID: 1676
		public int statLifeMax = 100;

		// Token: 0x0400068D RID: 1677
		public int statLifeMax2 = 100;

		// Token: 0x0400068E RID: 1678
		public int statLife = 100;

		// Token: 0x0400068F RID: 1679
		public int statMana;

		// Token: 0x04000690 RID: 1680
		public int statManaMax;

		// Token: 0x04000691 RID: 1681
		public int statManaMax2;

		// Token: 0x04000692 RID: 1682
		public int lifeRegen;

		// Token: 0x04000693 RID: 1683
		public int lifeRegenCount;

		// Token: 0x04000694 RID: 1684
		public float lifeRegenTime;

		// Token: 0x04000695 RID: 1685
		public int manaRegen;

		// Token: 0x04000696 RID: 1686
		public int manaRegenCount;

		// Token: 0x04000697 RID: 1687
		public float manaRegenDelay;

		// Token: 0x04000698 RID: 1688
		public bool manaRegenBuff;

		// Token: 0x04000699 RID: 1689
		public bool noKnockback;

		// Token: 0x0400069A RID: 1690
		private bool shimmerImmune;

		// Token: 0x0400069B RID: 1691
		public bool spaceGun;

		// Token: 0x0400069C RID: 1692
		public float gravDir = 1f;

		// Token: 0x0400069D RID: 1693
		public bool chloroAmmoCost80;

		// Token: 0x0400069E RID: 1694
		public bool huntressAmmoCost90;

		// Token: 0x0400069F RID: 1695
		public bool ammoCost80;

		// Token: 0x040006A0 RID: 1696
		public bool ammoCost75;

		// Token: 0x040006A1 RID: 1697
		public int stickyBreak;

		// Token: 0x040006A2 RID: 1698
		public bool magicQuiver;

		// Token: 0x040006A3 RID: 1699
		public bool magmaStone;

		// Token: 0x040006A4 RID: 1700
		public bool lavaRose;

		// Token: 0x040006A5 RID: 1701
		public bool hasMoltenQuiver;

		// Token: 0x040006A6 RID: 1702
		public int phantasmTime;

		// Token: 0x040006A7 RID: 1703
		public bool ammoBox;

		// Token: 0x040006A8 RID: 1704
		public bool ammoPotion;

		// Token: 0x040006A9 RID: 1705
		public bool chaosState;

		// Token: 0x040006AA RID: 1706
		public bool strongBees;

		// Token: 0x040006AB RID: 1707
		public bool sporeSac;

		// Token: 0x040006AC RID: 1708
		public bool shinyStone;

		// Token: 0x040006AD RID: 1709
		public bool empressBrooch;

		// Token: 0x040006AE RID: 1710
		public bool volatileGelatin;

		// Token: 0x040006AF RID: 1711
		public int volatileGelatinCounter;

		// Token: 0x040006B0 RID: 1712
		public bool hasMagiluminescence;

		// Token: 0x040006B1 RID: 1713
		public bool shadowArmor;

		// Token: 0x040006B2 RID: 1714
		public bool dontStarveShader;

		// Token: 0x040006B3 RID: 1715
		public bool eyebrellaCloud;

		// Token: 0x040006B4 RID: 1716
		public int yoraiz0rEye;

		// Token: 0x040006B5 RID: 1717
		public bool yoraiz0rDarkness;

		// Token: 0x040006B6 RID: 1718
		public bool hasUnicornHorn;

		// Token: 0x040006B7 RID: 1719
		public bool hasAngelHalo;

		// Token: 0x040006B8 RID: 1720
		public bool hasRainbowCursor;

		// Token: 0x040006B9 RID: 1721
		public bool leinforsHair;

		// Token: 0x040006BA RID: 1722
		public bool stardustMonolithShader;

		// Token: 0x040006BB RID: 1723
		public bool nebulaMonolithShader;

		// Token: 0x040006BC RID: 1724
		public bool vortexMonolithShader;

		// Token: 0x040006BD RID: 1725
		public bool solarMonolithShader;

		// Token: 0x040006BE RID: 1726
		public bool moonLordMonolithShader;

		// Token: 0x040006BF RID: 1727
		public bool bloodMoonMonolithShader;

		// Token: 0x040006C0 RID: 1728
		public bool shimmerMonolithShader;

		// Token: 0x040006C1 RID: 1729
		public int overrideFishingBobber = -1;

		// Token: 0x040006C2 RID: 1730
		public bool unlockedBiomeTorches;

		// Token: 0x040006C3 RID: 1731
		public bool ateArtisanBread;

		// Token: 0x040006C4 RID: 1732
		public bool unlockedSuperCart;

		// Token: 0x040006C5 RID: 1733
		public bool enabledSuperCart = true;

		// Token: 0x040006C6 RID: 1734
		public bool suspiciouslookingTentacle;

		// Token: 0x040006C7 RID: 1735
		public bool crimsonHeart;

		// Token: 0x040006C8 RID: 1736
		public bool lightOrb;

		// Token: 0x040006C9 RID: 1737
		public bool blueFairy;

		// Token: 0x040006CA RID: 1738
		public bool redFairy;

		// Token: 0x040006CB RID: 1739
		public bool greenFairy;

		// Token: 0x040006CC RID: 1740
		public bool bunny;

		// Token: 0x040006CD RID: 1741
		public bool turtle;

		// Token: 0x040006CE RID: 1742
		public bool eater;

		// Token: 0x040006CF RID: 1743
		public bool penguin;

		// Token: 0x040006D0 RID: 1744
		public bool HasGardenGnomeNearby;

		// Token: 0x040006D1 RID: 1745
		public bool magicLantern;

		// Token: 0x040006D2 RID: 1746
		public bool rabid;

		// Token: 0x040006D3 RID: 1747
		public bool sunflower;

		// Token: 0x040006D4 RID: 1748
		public bool wellFed;

		// Token: 0x040006D5 RID: 1749
		public bool puppy;

		// Token: 0x040006D6 RID: 1750
		public bool grinch;

		// Token: 0x040006D7 RID: 1751
		public bool miniMinotaur;

		// Token: 0x040006D8 RID: 1752
		public bool flowerBoots;

		// Token: 0x040006D9 RID: 1753
		public bool fairyBoots;

		// Token: 0x040006DA RID: 1754
		public bool hellfireTreads;

		// Token: 0x040006DB RID: 1755
		public bool moonLordLegs;

		// Token: 0x040006DC RID: 1756
		public bool arcticDivingGear;

		// Token: 0x040006DD RID: 1757
		public bool coolWhipBuff;

		// Token: 0x040006DE RID: 1758
		public bool wearsRobe;

		// Token: 0x040006DF RID: 1759
		public bool minecartLeft;

		// Token: 0x040006E0 RID: 1760
		public bool onWrongGround;

		// Token: 0x040006E1 RID: 1761
		public bool onTrack;

		// Token: 0x040006E2 RID: 1762
		public int cartRampTime;

		// Token: 0x040006E3 RID: 1763
		public bool cartFlip;

		// Token: 0x040006E4 RID: 1764
		public float trackBoost;

		// Token: 0x040006E5 RID: 1765
		public Vector2 lastBoost = Vector2.Zero;

		// Token: 0x040006E6 RID: 1766
		public Mount mount;

		// Token: 0x040006E7 RID: 1767
		public bool blackCat;

		// Token: 0x040006E8 RID: 1768
		public bool spider;

		// Token: 0x040006E9 RID: 1769
		public bool squashling;

		// Token: 0x040006EA RID: 1770
		public bool petFlagDD2Gato;

		// Token: 0x040006EB RID: 1771
		public bool petFlagDD2Ghost;

		// Token: 0x040006EC RID: 1772
		public bool petFlagDD2Dragon;

		// Token: 0x040006ED RID: 1773
		public bool petFlagUpbeatStar;

		// Token: 0x040006EE RID: 1774
		public bool petFlagSugarGlider;

		// Token: 0x040006EF RID: 1775
		public bool petFlagBabyShark;

		// Token: 0x040006F0 RID: 1776
		public bool petFlagLilHarpy;

		// Token: 0x040006F1 RID: 1777
		public bool petFlagFennecFox;

		// Token: 0x040006F2 RID: 1778
		public bool petFlagGlitteryButterfly;

		// Token: 0x040006F3 RID: 1779
		public bool petFlagBabyImp;

		// Token: 0x040006F4 RID: 1780
		public bool petFlagBabyRedPanda;

		// Token: 0x040006F5 RID: 1781
		public bool petFlagPlantero;

		// Token: 0x040006F6 RID: 1782
		public bool petFlagDynamiteKitten;

		// Token: 0x040006F7 RID: 1783
		public bool petFlagBabyWerewolf;

		// Token: 0x040006F8 RID: 1784
		public bool petFlagShadowMimic;

		// Token: 0x040006F9 RID: 1785
		public bool petFlagVoltBunny;

		// Token: 0x040006FA RID: 1786
		public bool petFlagKingSlimePet;

		// Token: 0x040006FB RID: 1787
		public bool petFlagEyeOfCthulhuPet;

		// Token: 0x040006FC RID: 1788
		public bool petFlagEaterOfWorldsPet;

		// Token: 0x040006FD RID: 1789
		public bool petFlagBrainOfCthulhuPet;

		// Token: 0x040006FE RID: 1790
		public bool petFlagSkeletronPet;

		// Token: 0x040006FF RID: 1791
		public bool petFlagQueenBeePet;

		// Token: 0x04000700 RID: 1792
		public bool petFlagDestroyerPet;

		// Token: 0x04000701 RID: 1793
		public bool petFlagTwinsPet;

		// Token: 0x04000702 RID: 1794
		public bool petFlagSkeletronPrimePet;

		// Token: 0x04000703 RID: 1795
		public bool petFlagPlanteraPet;

		// Token: 0x04000704 RID: 1796
		public bool petFlagGolemPet;

		// Token: 0x04000705 RID: 1797
		public bool petFlagDukeFishronPet;

		// Token: 0x04000706 RID: 1798
		public bool petFlagLunaticCultistPet;

		// Token: 0x04000707 RID: 1799
		public bool petFlagMoonLordPet;

		// Token: 0x04000708 RID: 1800
		public bool petFlagFairyQueenPet;

		// Token: 0x04000709 RID: 1801
		public bool petFlagPumpkingPet;

		// Token: 0x0400070A RID: 1802
		public bool petFlagEverscreamPet;

		// Token: 0x0400070B RID: 1803
		public bool petFlagIceQueenPet;

		// Token: 0x0400070C RID: 1804
		public bool petFlagMartianPet;

		// Token: 0x0400070D RID: 1805
		public bool petFlagDD2OgrePet;

		// Token: 0x0400070E RID: 1806
		public bool petFlagDD2BetsyPet;

		// Token: 0x0400070F RID: 1807
		public bool petFlagQueenSlimePet;

		// Token: 0x04000710 RID: 1808
		public bool petFlagBerniePet;

		// Token: 0x04000711 RID: 1809
		public bool petFlagGlommerPet;

		// Token: 0x04000712 RID: 1810
		public bool petFlagDeerclopsPet;

		// Token: 0x04000713 RID: 1811
		public bool petFlagPigPet;

		// Token: 0x04000714 RID: 1812
		public bool petFlagChesterPet;

		// Token: 0x04000715 RID: 1813
		public bool petFlagJunimoPet;

		// Token: 0x04000716 RID: 1814
		public bool petFlagBlueChickenPet;

		// Token: 0x04000717 RID: 1815
		public bool petFlagSpiffo;

		// Token: 0x04000718 RID: 1816
		public bool petFlagCaveling;

		// Token: 0x04000719 RID: 1817
		public bool petFlagDirtiestBlock;

		// Token: 0x0400071A RID: 1818
		public bool companionCube;

		// Token: 0x0400071B RID: 1819
		public bool babyFaceMonster;

		// Token: 0x0400071C RID: 1820
		public bool magicCuffs;

		// Token: 0x0400071D RID: 1821
		public bool coldDash;

		// Token: 0x0400071E RID: 1822
		public bool sailDash;

		// Token: 0x0400071F RID: 1823
		public bool desertDash;

		// Token: 0x04000720 RID: 1824
		public bool desertBoots;

		// Token: 0x04000721 RID: 1825
		public bool eyeSpring;

		// Token: 0x04000722 RID: 1826
		public bool snowman;

		// Token: 0x04000723 RID: 1827
		public bool scope;

		// Token: 0x04000724 RID: 1828
		public bool dino;

		// Token: 0x04000725 RID: 1829
		public bool skeletron;

		// Token: 0x04000726 RID: 1830
		public bool hornet;

		// Token: 0x04000727 RID: 1831
		public bool zephyrfish;

		// Token: 0x04000728 RID: 1832
		public bool tiki;

		// Token: 0x04000729 RID: 1833
		public bool parrot;

		// Token: 0x0400072A RID: 1834
		public bool truffle;

		// Token: 0x0400072B RID: 1835
		public bool sapling;

		// Token: 0x0400072C RID: 1836
		public bool cSapling;

		// Token: 0x0400072D RID: 1837
		public bool wisp;

		// Token: 0x0400072E RID: 1838
		public bool lizard;

		// Token: 0x0400072F RID: 1839
		public bool archery;

		// Token: 0x04000730 RID: 1840
		public bool poisoned;

		// Token: 0x04000731 RID: 1841
		public bool venom;

		// Token: 0x04000732 RID: 1842
		public bool blind;

		// Token: 0x04000733 RID: 1843
		public bool blackout;

		// Token: 0x04000734 RID: 1844
		public bool headcovered;

		// Token: 0x04000735 RID: 1845
		public bool frostBurn;

		// Token: 0x04000736 RID: 1846
		public bool onFrostBurn;

		// Token: 0x04000737 RID: 1847
		public bool onFrostBurn2;

		// Token: 0x04000738 RID: 1848
		public bool burned;

		// Token: 0x04000739 RID: 1849
		public bool shimmering;

		// Token: 0x0400073A RID: 1850
		public int timeShimmering;

		// Token: 0x0400073B RID: 1851
		public float shimmerTransparency;

		// Token: 0x0400073C RID: 1852
		public ShimmerUnstuckHelper shimmerUnstuckHelper;

		// Token: 0x0400073D RID: 1853
		public bool suffocating;

		// Token: 0x0400073E RID: 1854
		public byte suffocateDelay;

		// Token: 0x0400073F RID: 1855
		public bool dripping;

		// Token: 0x04000740 RID: 1856
		public bool drippingSlime;

		// Token: 0x04000741 RID: 1857
		public bool drippingSparkleSlime;

		// Token: 0x04000742 RID: 1858
		public bool onFire;

		// Token: 0x04000743 RID: 1859
		public bool onFire2;

		// Token: 0x04000744 RID: 1860
		public bool onFire3;

		// Token: 0x04000745 RID: 1861
		public bool noItems;

		// Token: 0x04000746 RID: 1862
		public bool cursed;

		// Token: 0x04000747 RID: 1863
		public bool hungry;

		// Token: 0x04000748 RID: 1864
		public bool starving;

		// Token: 0x04000749 RID: 1865
		public bool heartyMeal;

		// Token: 0x0400074A RID: 1866
		public bool windPushed;

		// Token: 0x0400074B RID: 1867
		public bool wereWolf;

		// Token: 0x0400074C RID: 1868
		public bool wolfAcc;

		// Token: 0x0400074D RID: 1869
		public bool hideMerman;

		// Token: 0x0400074E RID: 1870
		public bool hideWolf;

		// Token: 0x0400074F RID: 1871
		public bool forceMerman;

		// Token: 0x04000750 RID: 1872
		public bool forceWerewolf;

		// Token: 0x04000751 RID: 1873
		public bool rulerGrid;

		// Token: 0x04000752 RID: 1874
		public bool rulerLine;

		// Token: 0x04000753 RID: 1875
		public bool bleed;

		// Token: 0x04000754 RID: 1876
		public bool confused;

		// Token: 0x04000755 RID: 1877
		public bool accMerman;

		// Token: 0x04000756 RID: 1878
		public bool merman;

		// Token: 0x04000757 RID: 1879
		public bool trident;

		// Token: 0x04000758 RID: 1880
		public bool brokenArmor;

		// Token: 0x04000759 RID: 1881
		public bool silence;

		// Token: 0x0400075A RID: 1882
		public bool slow;

		// Token: 0x0400075B RID: 1883
		public bool gross;

		// Token: 0x0400075C RID: 1884
		public bool tongued;

		// Token: 0x0400075D RID: 1885
		public bool kbGlove;

		// Token: 0x0400075E RID: 1886
		public bool autoReuseGlove;

		// Token: 0x0400075F RID: 1887
		public bool meleeScaleGlove;

		// Token: 0x04000760 RID: 1888
		public bool kbBuff;

		// Token: 0x04000761 RID: 1889
		public bool remoteVisionForDrone;

		// Token: 0x04000762 RID: 1890
		public Item starCloakItem;

		// Token: 0x04000763 RID: 1891
		public Item starCloakItem_manaCloakOverrideItem;

		// Token: 0x04000764 RID: 1892
		public Item starCloakItem_starVeilOverrideItem;

		// Token: 0x04000765 RID: 1893
		public Item starCloakItem_beeCloakOverrideItem;

		// Token: 0x04000766 RID: 1894
		public bool longInvince;

		// Token: 0x04000767 RID: 1895
		public bool pStone;

		// Token: 0x04000768 RID: 1896
		public static readonly float PhilosopherStoneDurationMultiplier = 0.75f;

		// Token: 0x04000769 RID: 1897
		public bool manaFlower;

		// Token: 0x0400076A RID: 1898
		public bool moonLeech;

		// Token: 0x0400076B RID: 1899
		public bool vortexDebuff;

		// Token: 0x0400076C RID: 1900
		public bool trapDebuffSource;

		// Token: 0x0400076D RID: 1901
		public bool witheredArmor;

		// Token: 0x0400076E RID: 1902
		public bool witheredWeapon;

		// Token: 0x0400076F RID: 1903
		public bool slowOgreSpit;

		// Token: 0x04000770 RID: 1904
		public bool parryDamageBuff;

		// Token: 0x04000771 RID: 1905
		public bool ballistaPanic;

		// Token: 0x04000772 RID: 1906
		public bool JustDroppedAnItem;

		// Token: 0x04000773 RID: 1907
		public int meleeCrit = 4;

		// Token: 0x04000774 RID: 1908
		public int magicCrit = 4;

		// Token: 0x04000775 RID: 1909
		public int rangedCrit = 4;

		// Token: 0x04000776 RID: 1910
		public float meleeDamage = 1f;

		// Token: 0x04000777 RID: 1911
		public float magicDamage = 1f;

		// Token: 0x04000778 RID: 1912
		public float rangedDamage = 1f;

		// Token: 0x04000779 RID: 1913
		public float rangedMultDamage = 1f;

		// Token: 0x0400077A RID: 1914
		public float arrowDamageAdditiveStack;

		// Token: 0x0400077B RID: 1915
		public float arrowDamage = 1f;

		// Token: 0x0400077C RID: 1916
		public float bulletDamage = 1f;

		// Token: 0x0400077D RID: 1917
		public float rocketDamage = 1f;

		// Token: 0x0400077E RID: 1918
		public float minionDamage = 1f;

		// Token: 0x0400077F RID: 1919
		public float minionKB;

		// Token: 0x04000780 RID: 1920
		public float meleeSpeed = 1f;

		// Token: 0x04000781 RID: 1921
		public float summonerWeaponSpeedBonus;

		// Token: 0x04000782 RID: 1922
		public float moveSpeed = 1f;

		// Token: 0x04000783 RID: 1923
		public float pickSpeed = 1f;

		// Token: 0x04000784 RID: 1924
		public float wallSpeed = 1f;

		// Token: 0x04000785 RID: 1925
		public float tileSpeed = 1f;

		// Token: 0x04000786 RID: 1926
		public bool autoPaint;

		// Token: 0x04000787 RID: 1927
		public bool autoActuator;

		// Token: 0x04000788 RID: 1928
		public int SpawnX = -1;

		// Token: 0x04000789 RID: 1929
		public int SpawnY = -1;

		// Token: 0x0400078A RID: 1930
		public Vector2? PotionOfReturnOriginalUsePosition;

		// Token: 0x0400078B RID: 1931
		public Vector2? PotionOfReturnHomePosition;

		// Token: 0x0400078C RID: 1932
		public int[] spX = new int[200];

		// Token: 0x0400078D RID: 1933
		public int[] spY = new int[200];

		// Token: 0x0400078E RID: 1934
		public string[] spN = new string[200];

		// Token: 0x0400078F RID: 1935
		public int[] spI = new int[200];

		// Token: 0x04000790 RID: 1936
		public static int tileRangeX = 5;

		// Token: 0x04000791 RID: 1937
		public static int tileRangeY = 4;

		// Token: 0x04000792 RID: 1938
		public int lastTileRangeX;

		// Token: 0x04000793 RID: 1939
		public int lastTileRangeY;

		// Token: 0x04000794 RID: 1940
		public static int tileTargetX;

		// Token: 0x04000795 RID: 1941
		public static int tileTargetY;

		// Token: 0x04000796 RID: 1942
		public static float defaultGravity = 0.4f;

		// Token: 0x04000797 RID: 1943
		public static int jumpHeight = 15;

		// Token: 0x04000798 RID: 1944
		public static float jumpSpeed = 5.01f;

		// Token: 0x04000799 RID: 1945
		public float gravity = Player.defaultGravity;

		// Token: 0x0400079A RID: 1946
		public float maxFallSpeed = 10f;

		// Token: 0x0400079B RID: 1947
		public float maxRunSpeed = 3f;

		// Token: 0x0400079C RID: 1948
		public float runAcceleration = 0.08f;

		// Token: 0x0400079D RID: 1949
		public float runSlowdown = 0.2f;

		// Token: 0x0400079E RID: 1950
		public bool adjWater;

		// Token: 0x0400079F RID: 1951
		public bool adjHoney;

		// Token: 0x040007A0 RID: 1952
		public bool adjLava;

		// Token: 0x040007A1 RID: 1953
		public bool oldAdjWater;

		// Token: 0x040007A2 RID: 1954
		public bool oldAdjHoney;

		// Token: 0x040007A3 RID: 1955
		public bool oldAdjLava;

		// Token: 0x040007A4 RID: 1956
		public bool[] adjTile = new bool[(int)TileID.Count];

		// Token: 0x040007A5 RID: 1957
		public bool[] oldAdjTile = new bool[(int)TileID.Count];

		// Token: 0x040007A6 RID: 1958
		public static int defaultItemGrabRange = 42;

		// Token: 0x040007A7 RID: 1959
		private static float itemGrabSpeed = 0.45f;

		// Token: 0x040007A8 RID: 1960
		private static float itemGrabSpeedMax = 4f;

		// Token: 0x040007A9 RID: 1961
		public byte hairDye;

		// Token: 0x040007AA RID: 1962
		public Color hairDyeColor = Color.Transparent;

		// Token: 0x040007AB RID: 1963
		public float hairDyeVar;

		// Token: 0x040007AC RID: 1964
		public int skinDyePacked;

		// Token: 0x040007AD RID: 1965
		public Color hairColor = new Color(215, 90, 55);

		// Token: 0x040007AE RID: 1966
		public Color skinColor = new Color(255, 125, 90);

		// Token: 0x040007AF RID: 1967
		public Color eyeColor = new Color(105, 90, 75);

		// Token: 0x040007B0 RID: 1968
		public Color shirtColor = new Color(175, 165, 140);

		// Token: 0x040007B1 RID: 1969
		public Color underShirtColor = new Color(160, 180, 215);

		// Token: 0x040007B2 RID: 1970
		public Color pantsColor = new Color(255, 230, 175);

		// Token: 0x040007B3 RID: 1971
		public Color shoeColor = new Color(160, 105, 60);

		// Token: 0x040007B4 RID: 1972
		public int hair;

		// Token: 0x040007B5 RID: 1973
		public bool hostile;

		// Token: 0x040007B6 RID: 1974
		public SoundPlaySet hermesStepSound = new SoundPlaySet();

		// Token: 0x040007B7 RID: 1975
		public Vector2 instantMovementAccumulatedThisFrame;

		// Token: 0x040007B8 RID: 1976
		public int accCompass;

		// Token: 0x040007B9 RID: 1977
		public int accWatch;

		// Token: 0x040007BA RID: 1978
		public int accDepthMeter;

		// Token: 0x040007BB RID: 1979
		public bool accFishFinder;

		// Token: 0x040007BC RID: 1980
		public bool accWeatherRadio;

		// Token: 0x040007BD RID: 1981
		public bool accJarOfSouls;

		// Token: 0x040007BE RID: 1982
		public bool accCalendar;

		// Token: 0x040007BF RID: 1983
		public int lastCreatureHit = -1;

		// Token: 0x040007C0 RID: 1984
		public bool accThirdEye;

		// Token: 0x040007C1 RID: 1985
		public byte accThirdEyeCounter;

		// Token: 0x040007C2 RID: 1986
		public byte accThirdEyeNumber;

		// Token: 0x040007C3 RID: 1987
		public bool accStopwatch;

		// Token: 0x040007C4 RID: 1988
		public bool accOreFinder;

		// Token: 0x040007C5 RID: 1989
		public bool accCritterGuide;

		// Token: 0x040007C6 RID: 1990
		public byte accCritterGuideCounter;

		// Token: 0x040007C7 RID: 1991
		public byte accCritterGuideNumber;

		// Token: 0x040007C8 RID: 1992
		public bool accDreamCatcher;

		// Token: 0x040007C9 RID: 1993
		public bool hasFootball;

		// Token: 0x040007CA RID: 1994
		public bool drawingFootball;

		// Token: 0x040007CB RID: 1995
		public bool ActuationRodLock;

		// Token: 0x040007CC RID: 1996
		public bool ActuationRodLockSetting;

		// Token: 0x040007CD RID: 1997
		public bool InfoAccMechShowWires;

		// Token: 0x040007CE RID: 1998
		public DateTime dpsStart;

		// Token: 0x040007CF RID: 1999
		public DateTime dpsEnd;

		// Token: 0x040007D0 RID: 2000
		public DateTime dpsLastHit;

		// Token: 0x040007D1 RID: 2001
		public int dpsDamage;

		// Token: 0x040007D2 RID: 2002
		public bool dpsStarted;

		// Token: 0x040007D3 RID: 2003
		public string displayedFishingInfo = "";

		// Token: 0x040007D4 RID: 2004
		public bool discountEquipped;

		// Token: 0x040007D5 RID: 2005
		public bool discountAvailable;

		// Token: 0x040007D6 RID: 2006
		public bool hasLuckyCoin;

		// Token: 0x040007D7 RID: 2007
		public Item boneGloveItem;

		// Token: 0x040007D8 RID: 2008
		public bool goldRing;

		// Token: 0x040007D9 RID: 2009
		public bool accDivingHelm;

		// Token: 0x040007DA RID: 2010
		public bool accFlipper;

		// Token: 0x040007DB RID: 2011
		public bool hasLuck_LuckyCoin;

		// Token: 0x040007DC RID: 2012
		public bool hasLuck_LuckyHorseshoe;

		// Token: 0x040007DD RID: 2013
		public bool hasJumpOption_Cloud;

		// Token: 0x040007DE RID: 2014
		public bool canJumpAgain_Cloud;

		// Token: 0x040007DF RID: 2015
		public bool isPerformingJump_Cloud;

		// Token: 0x040007E0 RID: 2016
		public bool hasJumpOption_Sandstorm;

		// Token: 0x040007E1 RID: 2017
		public bool canJumpAgain_Sandstorm;

		// Token: 0x040007E2 RID: 2018
		public bool isPerformingJump_Sandstorm;

		// Token: 0x040007E3 RID: 2019
		public bool hasJumpOption_Blizzard;

		// Token: 0x040007E4 RID: 2020
		public bool canJumpAgain_Blizzard;

		// Token: 0x040007E5 RID: 2021
		public bool isPerformingJump_Blizzard;

		// Token: 0x040007E6 RID: 2022
		public bool hasJumpOption_Fart;

		// Token: 0x040007E7 RID: 2023
		public bool canJumpAgain_Fart;

		// Token: 0x040007E8 RID: 2024
		public bool isPerformingJump_Fart;

		// Token: 0x040007E9 RID: 2025
		public bool hasJumpOption_Sail;

		// Token: 0x040007EA RID: 2026
		public bool canJumpAgain_Sail;

		// Token: 0x040007EB RID: 2027
		public bool isPerformingJump_Sail;

		// Token: 0x040007EC RID: 2028
		public bool hasJumpOption_Unicorn;

		// Token: 0x040007ED RID: 2029
		public bool canJumpAgain_Unicorn;

		// Token: 0x040007EE RID: 2030
		public bool isPerformingJump_Unicorn;

		// Token: 0x040007EF RID: 2031
		public bool hasJumpOption_Santank;

		// Token: 0x040007F0 RID: 2032
		public bool canJumpAgain_Santank;

		// Token: 0x040007F1 RID: 2033
		public bool isPerformingJump_Santank;

		// Token: 0x040007F2 RID: 2034
		public bool hasJumpOption_WallOfFleshGoat;

		// Token: 0x040007F3 RID: 2035
		public bool canJumpAgain_WallOfFleshGoat;

		// Token: 0x040007F4 RID: 2036
		public bool isPerformingJump_WallOfFleshGoat;

		// Token: 0x040007F5 RID: 2037
		public bool hasJumpOption_Basilisk;

		// Token: 0x040007F6 RID: 2038
		public bool canJumpAgain_Basilisk;

		// Token: 0x040007F7 RID: 2039
		public bool isPerformingJump_Basilisk;

		// Token: 0x040007F8 RID: 2040
		public bool isPerformingPogostickTricks;

		// Token: 0x040007F9 RID: 2041
		public bool autoJump;

		// Token: 0x040007FA RID: 2042
		public bool justJumped;

		// Token: 0x040007FB RID: 2043
		public float jumpSpeedBoost;

		// Token: 0x040007FC RID: 2044
		public int extraFall;

		// Token: 0x040007FD RID: 2045
		public bool canFloatInWater;

		// Token: 0x040007FE RID: 2046
		public bool hasFloatingTube;

		// Token: 0x040007FF RID: 2047
		public bool frogLegJumpBoost;

		// Token: 0x04000800 RID: 2048
		public bool skyStoneEffects;

		// Token: 0x04000801 RID: 2049
		public bool spawnMax;

		// Token: 0x04000802 RID: 2050
		public int blockRange;

		// Token: 0x04000803 RID: 2051
		public int[] grappling = new int[20];

		// Token: 0x04000804 RID: 2052
		public int grapCount;

		// Token: 0x04000805 RID: 2053
		public int rocketTime;

		// Token: 0x04000806 RID: 2054
		public int rocketTimeMax = 7;

		// Token: 0x04000807 RID: 2055
		public int rocketDelay;

		// Token: 0x04000808 RID: 2056
		public int rocketDelay2;

		// Token: 0x04000809 RID: 2057
		public int rocketSoundDelay;

		// Token: 0x0400080A RID: 2058
		public bool rocketRelease;

		// Token: 0x0400080B RID: 2059
		public bool rocketFrame;

		// Token: 0x0400080C RID: 2060
		public int rocketBoots;

		// Token: 0x0400080D RID: 2061
		public int vanityRocketBoots;

		// Token: 0x0400080E RID: 2062
		public bool canRocket;

		// Token: 0x0400080F RID: 2063
		public bool jumpBoost;

		// Token: 0x04000810 RID: 2064
		public bool noFallDmg;

		// Token: 0x04000811 RID: 2065
		public int swimTime;

		// Token: 0x04000812 RID: 2066
		public bool killGuide;

		// Token: 0x04000813 RID: 2067
		public bool killClothier;

		// Token: 0x04000814 RID: 2068
		public float equipmentBasedLuckBonus;

		// Token: 0x04000815 RID: 2069
		public float lastEquipmentBasedLuckBonus;

		// Token: 0x04000816 RID: 2070
		public bool hasCreditsSceneMusicBox;

		// Token: 0x04000817 RID: 2071
		public bool lavaImmune;

		// Token: 0x04000818 RID: 2072
		public bool gills;

		// Token: 0x04000819 RID: 2073
		public bool slowFall;

		// Token: 0x0400081A RID: 2074
		public bool findTreasure;

		// Token: 0x0400081B RID: 2075
		public bool biomeSight;

		// Token: 0x0400081C RID: 2076
		public bool invis;

		// Token: 0x0400081D RID: 2077
		public bool detectCreature;

		// Token: 0x0400081E RID: 2078
		public bool nightVision;

		// Token: 0x0400081F RID: 2079
		public bool enemySpawns;

		// Token: 0x04000820 RID: 2080
		public float thorns;

		// Token: 0x04000821 RID: 2081
		public bool turtleArmor;

		// Token: 0x04000822 RID: 2082
		public bool turtleThorns;

		// Token: 0x04000823 RID: 2083
		public bool cactusThorns;

		// Token: 0x04000824 RID: 2084
		public bool spiderArmor;

		// Token: 0x04000825 RID: 2085
		public bool anglerSetSpawnReduction;

		// Token: 0x04000826 RID: 2086
		public bool CanSeeInvisibleBlocks;

		// Token: 0x04000827 RID: 2087
		public bool setSolar;

		// Token: 0x04000828 RID: 2088
		public bool setVortex;

		// Token: 0x04000829 RID: 2089
		public bool setNebula;

		// Token: 0x0400082A RID: 2090
		public int nebulaCD;

		// Token: 0x0400082B RID: 2091
		public bool setStardust;

		// Token: 0x0400082C RID: 2092
		public bool setForbidden;

		// Token: 0x0400082D RID: 2093
		public bool setForbiddenCooldownLocked;

		// Token: 0x0400082E RID: 2094
		public bool setSquireT3;

		// Token: 0x0400082F RID: 2095
		public bool setHuntressT3;

		// Token: 0x04000830 RID: 2096
		public bool setApprenticeT3;

		// Token: 0x04000831 RID: 2097
		public bool setMonkT3;

		// Token: 0x04000832 RID: 2098
		public bool setSquireT2;

		// Token: 0x04000833 RID: 2099
		public bool setHuntressT2;

		// Token: 0x04000834 RID: 2100
		public bool setApprenticeT2;

		// Token: 0x04000835 RID: 2101
		public bool setMonkT2;

		// Token: 0x04000836 RID: 2102
		public int maxTurrets = 1;

		// Token: 0x04000837 RID: 2103
		public int maxTurretsOld = 1;

		// Token: 0x04000838 RID: 2104
		public bool vortexStealthActive;

		// Token: 0x04000839 RID: 2105
		public bool waterWalk;

		// Token: 0x0400083A RID: 2106
		public bool waterWalk2;

		// Token: 0x0400083B RID: 2107
		public int forcedGravity;

		// Token: 0x0400083C RID: 2108
		public bool gravControl;

		// Token: 0x0400083D RID: 2109
		public bool gravControl2;

		// Token: 0x0400083E RID: 2110
		public Item honeyCombItem;

		// Token: 0x0400083F RID: 2111
		public int wireOperationsCooldown;

		// Token: 0x04000840 RID: 2112
		public int lastChest;

		// Token: 0x04000841 RID: 2113
		public TrackedProjectileReference piggyBankProjTracker;

		// Token: 0x04000842 RID: 2114
		public TrackedProjectileReference voidLensChest;

		// Token: 0x04000843 RID: 2115
		public int chest = -1;

		// Token: 0x04000844 RID: 2116
		public int chestX;

		// Token: 0x04000845 RID: 2117
		public int chestY;

		// Token: 0x04000847 RID: 2119
		public int fallStart;

		// Token: 0x04000848 RID: 2120
		public int fallStart2;

		// Token: 0x04000849 RID: 2121
		public int potionDelayTime = Item.potionDelay;

		// Token: 0x0400084A RID: 2122
		public int restorationDelayTime = Item.restorationDelay;

		// Token: 0x0400084B RID: 2123
		public int mushroomDelayTime = Item.mushroomDelay;

		// Token: 0x0400084C RID: 2124
		private bool _batbatCanHeal;

		// Token: 0x0400084D RID: 2125
		private bool _spawnTentacleSpikes;

		// Token: 0x0400084E RID: 2126
		private bool _spawnBloodButcherer;

		// Token: 0x0400084F RID: 2127
		private bool _spawnVolcanoExplosion;

		// Token: 0x04000850 RID: 2128
		private bool _spawnMuramasaCut;

		// Token: 0x04000851 RID: 2129
		public bool isPettingAnimal;

		// Token: 0x04000852 RID: 2130
		public bool isTheAnimalBeingPetSmall;

		// Token: 0x04000853 RID: 2131
		public PlayerSittingHelper sitting;

		// Token: 0x04000854 RID: 2132
		public PlayerSleepingHelper sleeping;

		// Token: 0x04000855 RID: 2133
		public PlayerEyeHelper eyeHelper;

		// Token: 0x04000856 RID: 2134
		public PlayerInteractionAnchor tileEntityAnchor;

		// Token: 0x04000857 RID: 2135
		public DoorOpeningHelper doorHelper;

		// Token: 0x04000858 RID: 2136
		public ShoppingSettings currentShoppingSettings = ShoppingSettings.NotInShop;

		// Token: 0x04000859 RID: 2137
		public int cHead;

		// Token: 0x0400085A RID: 2138
		public int cBody;

		// Token: 0x0400085B RID: 2139
		public int cLegs;

		// Token: 0x0400085C RID: 2140
		public int cHandOn;

		// Token: 0x0400085D RID: 2141
		public int cHandOff;

		// Token: 0x0400085E RID: 2142
		public int cBack;

		// Token: 0x0400085F RID: 2143
		public int cFront;

		// Token: 0x04000860 RID: 2144
		public int cShoe;

		// Token: 0x04000861 RID: 2145
		public int cWaist;

		// Token: 0x04000862 RID: 2146
		public int cShield;

		// Token: 0x04000863 RID: 2147
		public int cNeck;

		// Token: 0x04000864 RID: 2148
		public int cFace;

		// Token: 0x04000865 RID: 2149
		public int cFaceHead;

		// Token: 0x04000866 RID: 2150
		public int cFaceFlower;

		// Token: 0x04000867 RID: 2151
		public int cBalloon;

		// Token: 0x04000868 RID: 2152
		public int cBalloonFront;

		// Token: 0x04000869 RID: 2153
		public int cWings;

		// Token: 0x0400086A RID: 2154
		public int cCarpet;

		// Token: 0x0400086B RID: 2155
		public int cFloatingTube;

		// Token: 0x0400086C RID: 2156
		public int cBackpack;

		// Token: 0x0400086D RID: 2157
		public int cTail;

		// Token: 0x0400086E RID: 2158
		public int cShieldFallback;

		// Token: 0x0400086F RID: 2159
		public int cGrapple;

		// Token: 0x04000870 RID: 2160
		public int cMount;

		// Token: 0x04000871 RID: 2161
		public int cMinecart;

		// Token: 0x04000872 RID: 2162
		public int cPet;

		// Token: 0x04000873 RID: 2163
		public int cLight;

		// Token: 0x04000874 RID: 2164
		public int cYorai;

		// Token: 0x04000875 RID: 2165
		public int cPortableStool;

		// Token: 0x04000876 RID: 2166
		public int cUnicornHorn;

		// Token: 0x04000877 RID: 2167
		public int cAngelHalo;

		// Token: 0x04000878 RID: 2168
		public int cBeard;

		// Token: 0x04000879 RID: 2169
		public int cMinion;

		// Token: 0x0400087A RID: 2170
		public int cLeinShampoo;

		// Token: 0x0400087B RID: 2171
		public int cFlameWaker;

		// Token: 0x0400087C RID: 2172
		public int[] ownedProjectileCounts = new int[(int)ProjectileID.Count];

		// Token: 0x0400087D RID: 2173
		public bool[] npcTypeNoAggro = new bool[(int)NPCID.Count];

		// Token: 0x0400087E RID: 2174
		public int lastPortalColorIndex;

		// Token: 0x0400087F RID: 2175
		public int _portalPhysicsTime;

		// Token: 0x04000880 RID: 2176
		public bool portalPhysicsFlag;

		// Token: 0x04000881 RID: 2177
		public int lastTeleportPylonStyleUsed;

		// Token: 0x04000882 RID: 2178
		public float MountFishronSpecialCounter;

		// Token: 0x04000883 RID: 2179
		public Vector2 MinionRestTargetPoint = Vector2.Zero;

		// Token: 0x04000884 RID: 2180
		public int MinionAttackTargetNPC = -1;

		// Token: 0x04000885 RID: 2181
		public List<Point> TouchedTiles = new List<Point>();

		// Token: 0x04000886 RID: 2182
		public int itemAnimation;

		// Token: 0x04000887 RID: 2183
		public int itemAnimationMax;

		// Token: 0x04000888 RID: 2184
		public int itemTime;

		// Token: 0x04000889 RID: 2185
		public int itemTimeMax;

		// Token: 0x0400088A RID: 2186
		public int toolTime;

		// Token: 0x0400088B RID: 2187
		public static int BlockInteractionWithProjectiles = 3;

		// Token: 0x0400088C RID: 2188
		public const int SafeItemAnimationTimeForPreventingExploits = 20;

		// Token: 0x0400088D RID: 2189
		private HashSet<Point> _blackListedTileCoordsForGrappling = new HashSet<Point>();

		// Token: 0x0400088E RID: 2190
		private bool makeStrongBee;

		// Token: 0x0400088F RID: 2191
		public bool equippedAnyTileRangeAcc;

		// Token: 0x04000890 RID: 2192
		public bool equippedAnyTileSpeedAcc;

		// Token: 0x04000891 RID: 2193
		public bool equippedAnyWallSpeedAcc;

		// Token: 0x04000892 RID: 2194
		private static List<NPC> _hallucinationCandidates = new List<NPC>();

		// Token: 0x04000893 RID: 2195
		public bool behindBackWall;

		// Token: 0x04000894 RID: 2196
		public int _funkytownAchievementCheckCooldown;

		// Token: 0x04000895 RID: 2197
		private float _stormShaderObstruction = 1f;

		// Token: 0x04000896 RID: 2198
		private float _shaderObstructionInternalValue = 1f;

		// Token: 0x04000897 RID: 2199
		private int graveImmediateTime;

		// Token: 0x04000898 RID: 2200
		public static float airLightDecay = 1f;

		// Token: 0x04000899 RID: 2201
		public static float solidLightDecay = 1f;

		// Token: 0x0400089A RID: 2202
		private float _deerclopsBlizzardSmoothedEffect;

		// Token: 0x0400089B RID: 2203
		public const int ChairSittingMaxDistance = 40;

		// Token: 0x0400089C RID: 2204
		private static SmartInteractSystem _smartInteractSys = new SmartInteractSystem();

		// Token: 0x0400089D RID: 2205
		private int _lastSmartCursorToolStrategy = -1;

		// Token: 0x0400089E RID: 2206
		private bool[] nearbyTorch = new bool[(int)TorchID.Count];

		// Token: 0x0400089F RID: 2207
		private bool dryCoralTorch;

		// Token: 0x040008A0 RID: 2208
		private int luckyTorchCounter;

		// Token: 0x040008A1 RID: 2209
		private int nearbyTorches;

		// Token: 0x040008A2 RID: 2210
		public float torchLuck;

		// Token: 0x040008A3 RID: 2211
		private Vector2 _nextTorchLuckCheckCenter;

		// Token: 0x040008A4 RID: 2212
		public bool happyFunTorchTime;

		// Token: 0x040008A5 RID: 2213
		private int torchFunTimer;

		// Token: 0x040008A6 RID: 2214
		private int torchGodCooldown;

		// Token: 0x040008A7 RID: 2215
		private int numberOfTorchAttacksMade;

		// Token: 0x040008A8 RID: 2216
		private static int maxTorchAttacks = 200;

		// Token: 0x040008A9 RID: 2217
		private int[] unlitTorchX = new int[Player.maxTorchAttacks];

		// Token: 0x040008AA RID: 2218
		private int[] unlitTorchY = new int[Player.maxTorchAttacks];

		// Token: 0x040008AB RID: 2219
		private static int[] _torchAttackPosX = new int[400];

		// Token: 0x040008AC RID: 2220
		private static int[] _torchAttackPosY = new int[400];

		// Token: 0x040008AD RID: 2221
		public int ladyBugLuckTimeLeft;

		// Token: 0x040008AE RID: 2222
		public float luck;

		// Token: 0x040008AF RID: 2223
		public float luckMinimumCap = -0.7f;

		// Token: 0x040008B0 RID: 2224
		public float luckMaximumCap = 1f;

		// Token: 0x040008B1 RID: 2225
		public float coinLuck;

		// Token: 0x040008B2 RID: 2226
		public bool luckNeedsSync;

		// Token: 0x040008B3 RID: 2227
		public int disableVoidBag = -1;

		// Token: 0x040008B4 RID: 2228
		private int _quickGrappleCooldown;

		// Token: 0x040008B5 RID: 2229
		public PlayerMovementAccsCache movementAbilitiesCache;

		// Token: 0x040008B6 RID: 2230
		public float wingAccRunSpeed = -1f;

		// Token: 0x040008B7 RID: 2231
		public float wingRunAccelerationMult = 1f;

		// Token: 0x040008B8 RID: 2232
		public const int SHIELD_PARRY_DURATION = 20;

		// Token: 0x040008B9 RID: 2233
		public const int SHIELD_PARRY_DURATION_DRAWING_TWEAKER = 20;

		// Token: 0x040008BA RID: 2234
		public const int SHIELD_PARRY_DAMAGE_BUFF_MULTIPLIER = 5;

		// Token: 0x040008BB RID: 2235
		public bool hasRaisableShield;

		// Token: 0x040008BC RID: 2236
		public bool shieldRaised;

		// Token: 0x040008BD RID: 2237
		public int shieldParryTimeLeft;

		// Token: 0x040008BE RID: 2238
		public int shield_parry_cooldown;

		// Token: 0x040008BF RID: 2239
		private bool _forceForwardCursor;

		// Token: 0x040008C0 RID: 2240
		private Point _inputMouseCoordsForward;

		// Token: 0x040008C1 RID: 2241
		private Point _mainMouseCoordsForward;

		// Token: 0x040008C2 RID: 2242
		private bool _forceSmartSelectCursor;

		// Token: 0x040008C3 RID: 2243
		private Point _inputMouseCoordsSmartSelect;

		// Token: 0x040008C4 RID: 2244
		private Point _mainMouseCoordsSmartSelect;

		// Token: 0x040008C5 RID: 2245
		private Point _tileTargetSmartSelect;

		// Token: 0x040008C6 RID: 2246
		private bool botherWithUnaimedMinecartTracks = true;

		// Token: 0x040008C7 RID: 2247
		private List<int> _projectilesToInteractWith = new List<int>();

		// Token: 0x040008C8 RID: 2248
		private int _lockTileInteractionsTimer;

		// Token: 0x040008C9 RID: 2249
		public int[] hurtCooldowns = new int[5];

		// Token: 0x040008CA RID: 2250
		public static int FlexibleWandRandomSeed;

		// Token: 0x040008CB RID: 2251
		public static int FlexibleWandCycleOffset;

		// Token: 0x040008CC RID: 2252
		public static Point FlexibleWandLastPosition;

		// Token: 0x040008CD RID: 2253
		public static bool lastPound = true;

		// Token: 0x040008CE RID: 2254
		private static Point[] _tentacleSpikesMax5 = new Point[5];

		// Token: 0x040008CF RID: 2255
		private static Point[] _bloodButchererMax5 = new Point[5];

		// Token: 0x040008D0 RID: 2256
		public int[] meleeNPCHitCooldown = new int[200];

		// Token: 0x040008D1 RID: 2257
		public static int musicNotes = 6;

		// Token: 0x040008D2 RID: 2258
		public float musicDist;

		// Token: 0x040008D3 RID: 2259
		private static List<Projectile> _oldestProjCheckList = new List<Projectile>();

		// Token: 0x040008D4 RID: 2260
		public EquipmentLoadout[] Loadouts = new EquipmentLoadout[]
		{
			new EquipmentLoadout(),
			new EquipmentLoadout(),
			new EquipmentLoadout()
		};

		// Token: 0x040008D5 RID: 2261
		public int CurrentLoadoutIndex;

		// Token: 0x040008D6 RID: 2262
		public Player.SavedPlayerDataWithAnnoyingRules savedPerPlayerFieldsThatArentInThePlayerClass;

		// Token: 0x040008D7 RID: 2263
		private const int SaveSlotIndex_MouseItem = 0;

		// Token: 0x040008D8 RID: 2264
		private const int SaveSlotIndex_CreativeSacrifice = 1;

		// Token: 0x040008D9 RID: 2265
		private const int SaveSlotIndex_GuideItem = 2;

		// Token: 0x040008DA RID: 2266
		private const int SaveSlotIndex_TinkererItem = 3;

		// Token: 0x040008DB RID: 2267
		private const int SaveSlotIndexCount = 4;

		// Token: 0x040008DC RID: 2268
		private Item[] _temporaryItemSlots = new Item[4];

		// Token: 0x040008DD RID: 2269
		private static readonly PlayerFileData _visualCloneDummyData = new PlayerFileData();

		// Token: 0x040008DE RID: 2270
		private static readonly MemoryStream _visualCloneStream = new MemoryStream();

		// Token: 0x040008DF RID: 2271
		private static readonly BinaryWriter _visualCloneWriter = new BinaryWriter(Player._visualCloneStream);

		// Token: 0x040008E0 RID: 2272
		private static readonly BinaryReader _visualCloneReader = new BinaryReader(Player._visualCloneStream);

		// Token: 0x020004B9 RID: 1209
		public static class BuilderAccToggleIDs
		{
			// Token: 0x0400566A RID: 22122
			public const int RulerLine = 0;

			// Token: 0x0400566B RID: 22123
			public const int RulerGrid = 1;

			// Token: 0x0400566C RID: 22124
			public const int AutoActuate = 2;

			// Token: 0x0400566D RID: 22125
			public const int AutoPaint = 3;

			// Token: 0x0400566E RID: 22126
			public const int WireVisibility_Red = 4;

			// Token: 0x0400566F RID: 22127
			public const int WireVisibility_Green = 5;

			// Token: 0x04005670 RID: 22128
			public const int WireVisibility_Blue = 6;

			// Token: 0x04005671 RID: 22129
			public const int WireVisibility_Yellow = 7;

			// Token: 0x04005672 RID: 22130
			public const int HideAllWires = 8;

			// Token: 0x04005673 RID: 22131
			public const int WireVisibility_Actuators = 9;

			// Token: 0x04005674 RID: 22132
			public const int BlockSwap = 10;

			// Token: 0x04005675 RID: 22133
			public const int TorchBiome = 11;

			// Token: 0x04005676 RID: 22134
			public static readonly int Count = 12;
		}

		// Token: 0x020004BA RID: 1210
		public struct DirectionalInputSyncCache
		{
			// Token: 0x06002F09 RID: 12041 RVA: 0x005C64D7 File Offset: 0x005C46D7
			public DirectionalInputSyncCache(Player player)
			{
				this.controlLeft = player.controlLeft;
				this.controlRight = player.controlRight;
				this.controlUp = player.controlUp;
				this.controlDown = player.controlDown;
			}

			// Token: 0x06002F0A RID: 12042 RVA: 0x005C6509 File Offset: 0x005C4709
			public void ApplyTo(Player player)
			{
				player.controlLeft = this.controlLeft;
				player.controlRight = this.controlRight;
				player.controlUp = this.controlUp;
				player.controlDown = this.controlDown;
			}

			// Token: 0x04005677 RID: 22135
			public bool controlLeft;

			// Token: 0x04005678 RID: 22136
			public bool controlRight;

			// Token: 0x04005679 RID: 22137
			public bool controlUp;

			// Token: 0x0400567A RID: 22138
			public bool controlDown;
		}

		// Token: 0x020004BB RID: 1211
		private struct ChannelCancelKey
		{
			// Token: 0x06002F0B RID: 12043 RVA: 0x005C653B File Offset: 0x005C473B
			public bool Matches(Projectile projectile)
			{
				return this.ProjectileTypeExpected == projectile.type && this.ProjectileIndexExpected == projectile.whoAmI;
			}

			// Token: 0x06002F0C RID: 12044 RVA: 0x005C655B File Offset: 0x005C475B
			public void TryTracking(Projectile projectile)
			{
				if (this.ProjectileTypeExpected == projectile.type)
				{
					this.ProjectileIndexExpected = projectile.whoAmI;
				}
			}

			// Token: 0x0400567B RID: 22139
			public int ProjectileTypeExpected;

			// Token: 0x0400567C RID: 22140
			public int ProjectileIndexExpected;
		}

		// Token: 0x020004BC RID: 1212
		public struct RabbitOrderFrameHelper
		{
			// Token: 0x06002F0D RID: 12045 RVA: 0x005C6578 File Offset: 0x005C4778
			public void Update()
			{
				switch (this._aiState)
				{
				case 0:
					this.UpdateFrame(0, 0, Main.rand.Next(1, 4), Main.rand.Next(180, 3600));
					return;
				case 1:
					this.UpdateFrame(7, 9, 0, 20);
					return;
				case 2:
				{
					int gameFramesPerDisplayFrame = 8;
					if (this.DisplayFrame == 13)
					{
						gameFramesPerDisplayFrame = 120;
					}
					this.UpdateFrame(10, 16, 0, gameFramesPerDisplayFrame);
					return;
				}
				case 3:
					this.UpdateFrame(17, 26, 0, 4);
					return;
				default:
					return;
				}
			}

			// Token: 0x06002F0E RID: 12046 RVA: 0x005C6601 File Offset: 0x005C4801
			public void Reset()
			{
				this.ChangeToAIState(0);
			}

			// Token: 0x06002F0F RID: 12047 RVA: 0x005C660A File Offset: 0x005C480A
			private void ChangeToAIState(int aiState)
			{
				this._aiState = aiState;
				this._frameCounter = 0;
				this.Update();
			}

			// Token: 0x06002F10 RID: 12048 RVA: 0x005C6620 File Offset: 0x005C4820
			private void UpdateFrame(int displayFrameMin, int displayFrameMax, int exitAIState, int gameFramesPerDisplayFrame)
			{
				this.DisplayFrame = Utils.Clamp<int>(this.DisplayFrame, displayFrameMin, displayFrameMax);
				int num = this._frameCounter;
				this._frameCounter = num + 1;
				if (num >= gameFramesPerDisplayFrame)
				{
					this._frameCounter = 0;
					num = this.DisplayFrame;
					this.DisplayFrame = num + 1;
					if (num >= displayFrameMax)
					{
						this.ChangeToAIState(exitAIState);
					}
				}
			}

			// Token: 0x0400567D RID: 22141
			public int DisplayFrame;

			// Token: 0x0400567E RID: 22142
			private int _frameCounter;

			// Token: 0x0400567F RID: 22143
			private int _aiState;

			// Token: 0x04005680 RID: 22144
			private const int AIState_Idle = 0;

			// Token: 0x04005681 RID: 22145
			private const int AIState_LookingAtCamera = 1;

			// Token: 0x04005682 RID: 22146
			private const int AIState_Resting = 2;

			// Token: 0x04005683 RID: 22147
			private const int AIState_EatingCarrot = 3;
		}

		// Token: 0x020004BD RID: 1213
		public enum CompositeArmStretchAmount
		{
			// Token: 0x04005685 RID: 22149
			Full,
			// Token: 0x04005686 RID: 22150
			None,
			// Token: 0x04005687 RID: 22151
			Quarter,
			// Token: 0x04005688 RID: 22152
			ThreeQuarters
		}

		// Token: 0x020004BE RID: 1214
		public struct CompositeArmData
		{
			// Token: 0x06002F11 RID: 12049 RVA: 0x005C6677 File Offset: 0x005C4877
			public CompositeArmData(bool enabled, Player.CompositeArmStretchAmount intendedStrech, float rotation)
			{
				this.enabled = enabled;
				this.stretch = intendedStrech;
				this.rotation = rotation;
			}

			// Token: 0x04005689 RID: 22153
			public bool enabled;

			// Token: 0x0400568A RID: 22154
			public Player.CompositeArmStretchAmount stretch;

			// Token: 0x0400568B RID: 22155
			public float rotation;
		}

		// Token: 0x020004BF RID: 1215
		// (Invoke) Token: 0x06002F13 RID: 12051
		public delegate void DashStartAction(int dashDirection);

		// Token: 0x020004C0 RID: 1216
		public struct SetMatchRequest
		{
			// Token: 0x0400568C RID: 22156
			public int Head;

			// Token: 0x0400568D RID: 22157
			public int Body;

			// Token: 0x0400568E RID: 22158
			public int Legs;

			// Token: 0x0400568F RID: 22159
			public int ArmorSlotRequested;

			// Token: 0x04005690 RID: 22160
			public bool Male;
		}

		// Token: 0x020004C1 RID: 1217
		public struct ItemSpaceStatus
		{
			// Token: 0x17000397 RID: 919
			// (get) Token: 0x06002F16 RID: 12054 RVA: 0x005C668E File Offset: 0x005C488E
			public bool CanTakeItemToPersonalInventory
			{
				get
				{
					return this.CanTakeItem && !this.ItemIsGoingToVoidVault;
				}
			}

			// Token: 0x06002F17 RID: 12055 RVA: 0x005C66A3 File Offset: 0x005C48A3
			public ItemSpaceStatus(bool CanTakeItem, bool ItemIsGoingToVoidVault = false)
			{
				this.CanTakeItem = CanTakeItem;
				this.ItemIsGoingToVoidVault = ItemIsGoingToVoidVault;
			}

			// Token: 0x04005691 RID: 22161
			public readonly bool CanTakeItem;

			// Token: 0x04005692 RID: 22162
			public readonly bool ItemIsGoingToVoidVault;
		}

		// Token: 0x020004C2 RID: 1218
		public struct ItemCheckContext
		{
			// Token: 0x04005693 RID: 22163
			public bool SkipItemConsumption;
		}

		// Token: 0x020004C3 RID: 1219
		private struct SpecialToolUsageSettings
		{
			// Token: 0x04005694 RID: 22164
			public bool IsAValidTool;

			// Token: 0x04005695 RID: 22165
			public Player.SpecialToolUsageSettings.CanUseToolCondition UsageCondition;

			// Token: 0x04005696 RID: 22166
			public Player.SpecialToolUsageSettings.UseToolAction UsageAction;

			// Token: 0x020007DF RID: 2015
			// (Invoke) Token: 0x06003946 RID: 14662
			public delegate bool CanUseToolCondition(Player user, Item item, int targetX, int targetY);

			// Token: 0x020007E0 RID: 2016
			// (Invoke) Token: 0x0600394A RID: 14666
			public delegate void UseToolAction(Player user, Item item, int targetX, int targetY);
		}

		// Token: 0x020004C4 RID: 1220
		public class SavedPlayerDataWithAnnoyingRules
		{
			// Token: 0x04005697 RID: 22167
			public bool godmodePowerEnabled;

			// Token: 0x04005698 RID: 22168
			public bool farPlacementRangePowerEnabled;

			// Token: 0x04005699 RID: 22169
			public float spawnRatePowerSliderValue;
		}

		// Token: 0x020004C5 RID: 1221
		public class RandomTeleportationAttemptSettings
		{
			// Token: 0x0400569A RID: 22170
			public bool mostlySolidFloor;

			// Token: 0x0400569B RID: 22171
			public bool avoidLava;

			// Token: 0x0400569C RID: 22172
			public bool avoidAnyLiquid;

			// Token: 0x0400569D RID: 22173
			public bool avoidHurtTiles;

			// Token: 0x0400569E RID: 22174
			public bool avoidWalls;

			// Token: 0x0400569F RID: 22175
			public int attemptsBeforeGivingUp;

			// Token: 0x040056A0 RID: 22176
			public int maximumFallDistanceFromOrignalPoint;
		}

		// Token: 0x020004C6 RID: 1222
		public static class Hooks
		{
			// Token: 0x1400005B RID: 91
			// (add) Token: 0x06002F1A RID: 12058 RVA: 0x005C66B4 File Offset: 0x005C48B4
			// (remove) Token: 0x06002F1B RID: 12059 RVA: 0x005C66E8 File Offset: 0x005C48E8
			public static event Action<Player> OnEnterWorld;

			// Token: 0x06002F1C RID: 12060 RVA: 0x005C671B File Offset: 0x005C491B
			public static void PlayerConnect(int playerIndex)
			{
				PressurePlateHelper.ResetPlayer(playerIndex);
			}

			// Token: 0x06002F1D RID: 12061 RVA: 0x005C671B File Offset: 0x005C491B
			public static void PlayerDisconnect(int playerIndex)
			{
				PressurePlateHelper.ResetPlayer(playerIndex);
			}

			// Token: 0x06002F1E RID: 12062 RVA: 0x005C6723 File Offset: 0x005C4923
			public static void EnterWorld(int playerIndex)
			{
				if (Player.Hooks.OnEnterWorld != null)
				{
					Player.Hooks.OnEnterWorld(Main.player[playerIndex]);
				}
				if (playerIndex == Main.myPlayer)
				{
					Main.ToggleGameplayUpdates(true);
				}
			}
		}

		// Token: 0x020004C7 RID: 1223
		public class SmartCursorSettings
		{
			// Token: 0x040056A2 RID: 22178
			public static bool SmartBlocksEnabled;

			// Token: 0x040056A3 RID: 22179
			public static bool SmartAxeAfterPickaxe;

			// Token: 0x040056A4 RID: 22180
			public static bool SmartCursorHoldCanReleaseMidUse;
		}

		// Token: 0x020004C8 RID: 1224
		public class Settings
		{
			// Token: 0x06002F21 RID: 12065 RVA: 0x005C674C File Offset: 0x005C494C
			public static void CycleHoverControl()
			{
				Player.Settings.HoverControlMode hoverControl = Player.Settings.HoverControl;
				if (hoverControl == Player.Settings.HoverControlMode.Hold)
				{
					Player.Settings.HoverControl = Player.Settings.HoverControlMode.Click;
					return;
				}
				if (hoverControl != Player.Settings.HoverControlMode.Click)
				{
					return;
				}
				Player.Settings.HoverControl = Player.Settings.HoverControlMode.Hold;
			}

			// Token: 0x040056A5 RID: 22181
			public static Player.Settings.HoverControlMode HoverControl;

			// Token: 0x020007E1 RID: 2017
			public enum HoverControlMode
			{
				// Token: 0x040064B1 RID: 25777
				Hold,
				// Token: 0x040064B2 RID: 25778
				Click
			}
		}

		// Token: 0x020004C9 RID: 1225
		public class SelectionRadial
		{
			// Token: 0x17000398 RID: 920
			// (get) Token: 0x06002F24 RID: 12068 RVA: 0x005C6774 File Offset: 0x005C4974
			public int SelectedBinding
			{
				get
				{
					return this._SelectedBinding;
				}
			}

			// Token: 0x17000399 RID: 921
			// (get) Token: 0x06002F25 RID: 12069 RVA: 0x005C677C File Offset: 0x005C497C
			public int SelectedItem
			{
				get
				{
					if (this._SelectedBinding == -1)
					{
						return -1;
					}
					return this.Bindings[this._SelectedBinding];
				}
			}

			// Token: 0x06002F26 RID: 12070 RVA: 0x005C6798 File Offset: 0x005C4998
			public SelectionRadial(Player.SelectionRadial.SelectionMode mode = Player.SelectionRadial.SelectionMode.Dpad4)
			{
				this.Mode = mode;
				int radialCount = 0;
				switch (mode)
				{
				case Player.SelectionRadial.SelectionMode.Dpad4:
					radialCount = 4;
					break;
				case Player.SelectionRadial.SelectionMode.RadialCircular:
					radialCount = 10;
					break;
				case Player.SelectionRadial.SelectionMode.RadialQuicks:
					radialCount = 4;
					break;
				}
				this.RadialCount = radialCount;
				this.Bindings = new int[this.RadialCount];
				for (int i = 0; i < this.RadialCount; i++)
				{
					this.Bindings[i] = -1;
				}
			}

			// Token: 0x06002F27 RID: 12071 RVA: 0x005C680C File Offset: 0x005C4A0C
			public void Update()
			{
				Player.SelectionRadial.SelectionMode mode = this.Mode;
				if (mode != Player.SelectionRadial.SelectionMode.Dpad4)
				{
					if (mode - Player.SelectionRadial.SelectionMode.RadialCircular > 1)
					{
						return;
					}
					for (int i = 0; i < this.RadialCount; i++)
					{
						this.Bindings[i] = i;
					}
					if ((this.Mode == Player.SelectionRadial.SelectionMode.RadialCircular && PlayerInput.Triggers.Current.RadialHotbar) || (this.Mode == Player.SelectionRadial.SelectionMode.RadialQuicks && PlayerInput.Triggers.Current.RadialQuickbar))
					{
						bool flag = this.Mode == Player.SelectionRadial.SelectionMode.RadialCircular;
						float num = 6.2831855f / (float)this.RadialCount / 2f;
						Vector2 vector = PlayerInput.GamepadThumbstickRight.RotatedBy((double)(-1.5707964f + num), default(Vector2));
						if (vector.Length() == 0f)
						{
							vector = PlayerInput.GamepadThumbstickLeft.RotatedBy((double)(-1.5707964f + num), default(Vector2));
						}
						int num2 = -1;
						if (vector.Length() > 0.3f)
						{
							num2 = (int)((vector.ToRotation() + 3.1415927f) / (6.2831855f / (float)this.RadialCount));
							if (num2 >= this.RadialCount)
							{
								num2 -= this.RadialCount;
							}
						}
						if ((num2 != -1 || !flag) && this._SelectedBinding != num2 && (num2 != -1 || !(vector != Vector2.Zero)))
						{
							this.ChangeSelection(num2);
						}
					}
				}
				else
				{
					if (PlayerInput.Triggers.JustPressed.DpadRadial1)
					{
						this.ChangeSelection(0);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial2)
					{
						this.ChangeSelection(1);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial3)
					{
						this.ChangeSelection(2);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial4)
					{
						this.ChangeSelection(3);
						return;
					}
				}
			}

			// Token: 0x06002F28 RID: 12072 RVA: 0x005C69C0 File Offset: 0x005C4BC0
			public void ChangeBinding(int itemSlot)
			{
				if (itemSlot < 0 || itemSlot >= 50)
				{
					return;
				}
				if (this.Mode == Player.SelectionRadial.SelectionMode.Dpad4)
				{
					if (PlayerInput.Triggers.JustPressed.DpadRadial1)
					{
						this.Bind(itemSlot, 0);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial2)
					{
						this.Bind(itemSlot, 1);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial3)
					{
						this.Bind(itemSlot, 2);
					}
					if (PlayerInput.Triggers.JustPressed.DpadRadial4)
					{
						this.Bind(itemSlot, 3);
					}
				}
			}

			// Token: 0x06002F29 RID: 12073 RVA: 0x005C6A45 File Offset: 0x005C4C45
			public void ChangeSelection(int to)
			{
				if (this._SelectedBinding == to)
				{
					this._SelectedBinding = -1;
					return;
				}
				this._SelectedBinding = to;
			}

			// Token: 0x06002F2A RID: 12074 RVA: 0x005C6A60 File Offset: 0x005C4C60
			private void Bind(int itemslot, int radialslot)
			{
				this.ChangeSelection(-1);
				if (this.Bindings[radialslot] == itemslot)
				{
					this.Bindings[radialslot] = -1;
					return;
				}
				for (int i = 0; i < this.RadialCount; i++)
				{
					if (this.Bindings[i] == itemslot)
					{
						this.Bindings[i] = -1;
					}
				}
				this.Bindings[radialslot] = itemslot;
			}

			// Token: 0x06002F2B RID: 12075 RVA: 0x005C6AB8 File Offset: 0x005C4CB8
			public int GetDrawMode(int itemslot)
			{
				if (this.SelectedBinding != -1 && this.Bindings[this.SelectedBinding] == itemslot)
				{
					return 2;
				}
				for (int i = 0; i < this.RadialCount; i++)
				{
					if (this.Bindings[i] == itemslot)
					{
						return 1;
					}
				}
				return 0;
			}

			// Token: 0x06002F2C RID: 12076 RVA: 0x005C6B00 File Offset: 0x005C4D00
			public void CopyTo(Player.SelectionRadial that)
			{
				that._SelectedBinding = this._SelectedBinding;
				that.Mode = this.Mode;
				that.RadialCount = this.RadialCount;
				Array.Resize<int>(ref that.Bindings, this.RadialCount);
				for (int i = 0; i < this.RadialCount; i++)
				{
					that.Bindings[i] = this.Bindings[i];
				}
			}

			// Token: 0x040056A6 RID: 22182
			private int _SelectedBinding = -1;

			// Token: 0x040056A7 RID: 22183
			public int RadialCount;

			// Token: 0x040056A8 RID: 22184
			public int[] Bindings;

			// Token: 0x040056A9 RID: 22185
			public Player.SelectionRadial.SelectionMode Mode;

			// Token: 0x020007E2 RID: 2018
			public enum SelectionMode
			{
				// Token: 0x040064B4 RID: 25780
				Dpad4,
				// Token: 0x040064B5 RID: 25781
				RadialCircular,
				// Token: 0x040064B6 RID: 25782
				RadialQuicks
			}
		}

		// Token: 0x020004CA RID: 1226
		public struct OverheadMessage
		{
			// Token: 0x06002F2D RID: 12077 RVA: 0x005C6B64 File Offset: 0x005C4D64
			public void NewMessage(string message, int displayTime)
			{
				this.chatText = message;
				this.snippets = ChatManager.ParseMessage(this.chatText, Color.White).ToArray();
				this.messageSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, this.snippets, Vector2.One, -1f);
				this.timeLeft = displayTime;
			}

			// Token: 0x040056AA RID: 22186
			public string chatText;

			// Token: 0x040056AB RID: 22187
			public TextSnippet[] snippets;

			// Token: 0x040056AC RID: 22188
			public Vector2 messageSize;

			// Token: 0x040056AD RID: 22189
			public int timeLeft;

			// Token: 0x040056AE RID: 22190
			public Color color;
		}
	}
}
